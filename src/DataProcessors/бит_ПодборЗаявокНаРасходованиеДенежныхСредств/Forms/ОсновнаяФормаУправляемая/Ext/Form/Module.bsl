
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("Команда") Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	// Cтандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = Параметры.Команда;
	Организация = ?(Параметры.Свойство("Организация"), Параметры.Организация, Неопределено);
	
	ЗакрыватьПриВыборе = Ложь;
	
	ЗаполнитьКэшЗначений();

	// Заполним значения периода
	Если Параметры.Свойство("ДатаНачала") Тогда
		Объект.НачалоПериода = Параметры.ДатаНачала;
	КонецЕсли; 
	
	Если Параметры.Свойство("ДатаНачала") Тогда
		Объект.КонецПериода   = Параметры.ДатаОкончания;
	КонецЕсли; 
	
	// Инициализация схемы компановки данных
	АдресСхемыКомпоновкиДанных = бит_Казначейство.ПолучитьДляПеречняДокументовАдресСКД(Объект.Компоновщик);
	ДобавитьНастройкуПоОрганизации(Организация);
	
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	ПрименитьНастройки(НастройкаПоУмолчанию);
	
	// +СБ. Широков Николай. 2016-08-05. 2565 Добавить отбор по утвержденным заявкам
	Для каждого ЭлементНастройки Из Объект.Компоновщик.ПользовательскиеНастройки.Элементы Цикл
		
		Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = "2aec20a7-56de-4fbe-ac34-faa05a47d35a" Тогда
			
			ЭлементНастройки.Использование 	= Истина;
			ЭлементНастройки.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементНастройки.ПравоеЗначение = Справочники.бит_СтатусыОбъектов.Заявка_Утверждена;
			
		КонецЕсли;
		
	КонецЦикла;
	// -СБ. Широков Николай
	
	ОбновитьЗаявки(); 
	
	ЭтаФорма.Заголовок = Параметры.Заголовок;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗначенияПоУмолчанию();
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "Нажатие" кнопки "НастройкаПериода" 
// коммандной панели "КомандыФормыПодвал".
// 
&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	
	ВыборПериода = Новый ДиалогРедактированияСтандартногоПериода;
	ВыборПериода.Период = Новый СтандартныйПериод(Объект.НачалоПериода, Объект.КонецПериода);
	ВыборПериода.Период.Вариант = ВариантСтандартногоПериода.Сегодня;
	ВыборПериода.Показать(ОписаниеОповещения);

КонецПроцедуры // ДействиеНастройкаПериода()

// Описание оповещения процедуры "ВыбратьПериод".
//
// Параметры:
//  РезультатВыбора	 - 	 - 
//  ДопПараметры	 - Произвольный - дополнительные параметры.
//
&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НачалоПериода = РезультатВыбора.ДатаНачала;
	Объект.КонецПериода  = РезультатВыбора.ДатаОкончания;
	
КонецПроцедуры

// Процедура - обработчик события "Выбор" поля табличного документа "Заявки".
// 
&НаКлиенте
Процедура ЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтруктураПодбора = СформироватьСтруктуруПодбора(Элемент.ТекущиеДанные);
	ОповеститьВладельцаОВыборе(СтруктураПодбора);
   	
КонецПроцедуры // ЗаявкиВыбор()

&НаКлиенте
Процедура ПеренестиЗаявки(Команда)
	
	ЗаявкиДляПодбора = Объект.Заявки.НайтиСтроки(Новый Структура("Перенести", Истина));
	
	// Получаем количество заявок для переноса.
	Кол_во = ЗаявкиДляПодбора.Количество();
	
	Если Кол_во <> 0 Тогда
		
		Счетчик = 0;
		
		МассивПодбора = Новый Массив;
	
		Для Каждого ТекЗаявка Из ЗаявкиДляПодбора Цикл
			
			Счетчик = Счетчик + 1;
			
			// Сформируем структуру подбора и оповестим о выборе тек. заявки.
			СтруктураПодбора = СформироватьСтруктуруПодбора(ТекЗаявка);
			МассивПодбора.Добавить(СтруктураПодбора);
			
			Состояние("Обработано заявок: " + Счетчик + " из " + Кол_во);
			
		КонецЦикла;
		
		ОповеститьВладельцаОВыборе(МассивПодбора);
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры // ПеренестиЗаявки()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	СкрытьНастройки();

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "Обновить" 
// коммандной панели "КомандыФормыПодвал".
// 
&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();

	Отказ = НЕ ПериодЗаполненПравильно(ЭтотОбъект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПроверитьЗаполнение() Тогда
		СкрытьНастройки();
		ОбновитьЗаявки();
	КонецЕсли; 
	
КонецПроцедуры // Обновить()

// Процедура - обработчик события "Нажатие" кнопки "СнятьВсе" 
// коммандной панели "КнопкиПеречня".
// 
&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ОбработатьФлаги(0);
	
КонецПроцедуры // СнятьВсе()

// Процедура - обработчик события "Нажатие" кнопки "УстановитьВсе" 
// коммандной панели "КнопкиПеречня".
// 
&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	ОбработатьФлаги(1);
	
КонецПроцедуры // УстановитьВсе()
 
// Процедура - обработчик события "Нажатие" кнопки "Инвертировать" 
// коммандной панели "КнопкиПеречня".
// 
&НаКлиенте
Процедура Инвертировать(Команда)
	
	ОбработатьФлаги(2);
	
КонецПроцедуры // Инвертировать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
  
 // Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_ПодборЗаявокНаРасходованиеДенежныхСредств");
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура добавляет в пользовательские настройки компоновщика отбор по организации.
// 
// Параметры:
//  Организация  - СправочникСсылка.Организации или Неопределено.
// 
&НаСервере
Процедура ДобавитьНастройкуПоОрганизации(Организация)

	Если Организация <>  Неопределено И Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		
		НастройкиПользователя = Объект.Компоновщик.ПользовательскиеНастройки.Элементы;
			
		Для каждого ЭлементНастройки Из НастройкиПользователя Цикл
		
			Если ТипЗнч(ЭлементНастройки.ПравоеЗначение) = Тип("СправочникСсылка.Организации") Тогда
			
				ЭлементНастройки.ПравоеЗначение = Организация;
				ЭлементНастройки.Использование = Истина;
 
				Прервать;
			
			КонецЕсли; 	
		
		КонецЦикла; 	
					
	КонецЕсли; 

КонецПроцедуры // ДобавитьНастройкуПоОрганизации()

// Функция ищет в пользовательских настройках компоновщика отбор по организации.
// 
// Параметры:
//  нет
// 
&НаСервере
Функция НайтиОрганизациюВНастройках()
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	НастройкиПользователя = Объект.Компоновщик.ПользовательскиеНастройки.Элементы;
	
	Для каждого ЭлементНастройки Из НастройкиПользователя Цикл
		
		Если ТипЗнч(ЭлементНастройки.ПравоеЗначение) = Тип("СправочникСсылка.Организации") Тогда
			
			Организация = ЭлементНастройки.ПравоеЗначение;
			
			Прервать;
			
		КонецЕсли; 	
		
	КонецЦикла; 	
	
	Возврат Организация;
	
КонецФункции // НайтиОрганизациюВНастройках()

// Процедура обновляет таблицу заявок.
// 
// Параметры:
//  Нет
&НаСервере
Процедура ОбновитьЗаявки()
	
	ПеродОтчета = Новый СтандартныйПериод(Объект.НачалоПериода, Объект.КонецПериода);
	
	Запрос = бит_Казначейство.ПолучитьДляПеречняДокументовЗапросСКД(АдресСхемыКомпоновкиДанных, 
												Объект.Компоновщик, ПеродОтчета);
	Результат = Запрос.Выполнить();
	 
	Если Результат.Пустой() Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр("ru = 'Нет данных, удовлетворяющих отбору.'"));
	КонецЕсли; 
	 
	Объект.Заявки.Очистить();
	 
	Выборка = Результат.Выбрать();
	 
	Пока Выборка.Следующий() Цикл
	 
	   	НоваяСтрока = Объект.Заявки.Добавить();
	   	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		  
	 	СтруктураПараметров = Новый Структура;
	 	СтруктураПараметров.Вставить("Дата"			  , ТекущаяДата());
	 	СтруктураПараметров.Вставить("ВалютаДокумента", НоваяСтрока.Валюта);
	
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-12 (#НТП_БП12_ФР01)
		#Область ТиповойКод
	 	//СуммаПлатежа = бит_Казначейство.ПересчитатьСуммуПлатежаПоВалюте(НоваяСтрока.СуммаОстаток, НоваяСтрока.ПлатежнаяПозиция, СтруктураПараметров);
		#КонецОбласти
		СуммаПлатежа = бит_КурсыВалютКлиентСервер.ПересчитатьСуммуПоКурсу(НоваяСтрока.СуммаОстаток, НоваяСтрока.Заявка.КурсДокумента, НоваяСтрока.Заявка.КратностьДокумента);
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-12 (#НТП_БП12_ФР01)
		
	    ЕстьПлатежныйДокумент = ЗначениеЗаполнено(Выборка.ПлатежныйДокумент);
	    НоваяСтрока.СуммаКОплате 	= ?(ЕстьПлатежныйДокумент, 0, СуммаПлатежа);
	    НоваяСтрока.СуммаКОплатеНач = ?(ЕстьПлатежныйДокумент, 0, СуммаПлатежа);
  
  	КонецЦикла;

КонецПроцедуры // ОбновитьЗаявки()
 
&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыПодбора.ТекущаяСтраница = Элементы.НастройкиПодбора;
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()

	Элементы.РазделыПодбора.ТекущаяСтраница = Элементы.Подбор;
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ПериодЗаполненПравильно(Форма)

	ЗаполненПравильно = Истина;
	
	Объект = Форма.Объект;
	Отказ  = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Начало периода"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", ,Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Конец периода"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.КонецПериода", ,Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НачалоПериода) И ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Если Объект.КонецПериода < Объект.НачалоПериода Тогда
			ТекстСообщения = НСтр("ru ='Период указан неверно! Дата начала больше даты окончания.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", ,Отказ);
		КонецЕсли;
	КонецЕсли; 
	
	Если Отказ Тогда
		ЗаполненПравильно = Ложь;
	КонецЕсли;  
	
	Возврат ЗаполненПравильно; 

КонецФункции // ПериодЗаполненПравильно()

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ПользовательскиеНастройки", Объект.Компоновщик.ПользовательскиеНастройки);
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		Объект.НачалоПериода = ТекущаяДата();
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Объект.КонецПериода = ТекущаяДата();
	КонецЕсли; 

	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") 
		И СтруктураНастроек.Свойство("ПользовательскиеНастройки") Тогда
		
		// Загрузка пользовательских настроек в компоновщик.
		ПользовательскиеНастройки = СтруктураНастроек.ПользовательскиеНастройки;
				
		Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
			
	Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Настройки не восстановлены.");
	КонецЕсли;  		
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	Организация = НайтиОрганизациюВНастройках();
	
	// Установим настройку
	ПрименитьНастройки(НастройкаПоУмолчанию);
	
	// Организация в сохраненной настройке и документе могут отличаться - возьмем организацию из документа.
	ДобавитьНастройкуПоОрганизации(Организация);
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

&НаКлиенте
Процедура СохранитьНастройки(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиЗавершение",ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиСохранить()

// Процедура - обработчик оповещения о закрытии формы сохранения настроек. 
// 
&НаКлиенте
Процедура СохранитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		РезНастройка = Результат;
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ВосстановитьНастройки(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНастройкиЗавершение",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиВосстановить()
      
// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ВосстановитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		ПрименитьНастройки(Результат);
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек

// Процедура управляет флагами в табличной части.
// 
// Парметры:
//  ЗначениеФлага - Число (0 - снять флаги, 1 - установить истина, 2 - инвертировать).
&НаКлиенте
Процедура ОбработатьФлаги(ЗначениеФлага)
	
	Для каждого СтрокаТаблицы Из Объект.Заявки Цикл
			
		Если ЗначениеФлага = 0 Тогда
			СтрокаТаблицы.Перенести = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			СтрокаТаблицы.Перенести = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			СтрокаТаблицы.Перенести = НЕ СтрокаТаблицы.Оплачено;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьФлаги()

// Процедура формирует структуру подбора.
// 
// Параметры:
//  СтрокаСДанными - СтрокаТаблицыЗначений.Заявки.
// 
&НаКлиенте
Функция СформироватьСтруктуруПодбора(СтрокаСДанными)
	
	СтруктураПодбора = Новый Структура();
	
	СтруктураПодбора.Вставить("ВключенаВРеестр"		     , СтрокаСДанными.ВключенаВРеестр);
	СтруктураПодбора.Вставить("Оплачено"				 , СтрокаСДанными.Оплачено);
	СтруктураПодбора.Вставить("ФормаОплаты"				 , СтрокаСДанными.ФормаОплаты);
	СтруктураПодбора.Вставить("Организация"				 , СтрокаСДанными.Организация);
	СтруктураПодбора.Вставить("БанковскийСчетОрганизация", СтрокаСДанными.БанковскийСчетОрганизация);
	СтруктураПодбора.Вставить("Заявка"					 , СтрокаСДанными.Заявка);
	СтруктураПодбора.Вставить("ПлатежнаяПозиция"		 , СтрокаСДанными.ПлатежнаяПозиция);
	СтруктураПодбора.Вставить("ВалютаДокумента"			 , СтрокаСДанными.ВалютаДокумента);
	СтруктураПодбора.Вставить("Сумма"					 , СтрокаСДанными.Сумма);
	СтруктураПодбора.Вставить("СуммаОстаток"			 , СтрокаСДанными.СуммаОстаток);
	СтруктураПодбора.Вставить("Валюта"					 , СтрокаСДанными.Валюта);
	СтруктураПодбора.Вставить("СуммаКОплатеНач"			 , СтрокаСДанными.СуммаКОплатеНач);
	СтруктураПодбора.Вставить("СуммаКОплате"			 , СтрокаСДанными.СуммаКОплате);
	
	Возврат СтруктураПодбора;
	
КонецФункции // СформироватьСтруктуруПодбора()

// Процедура оповещает форму - владельца о выборе.
// 
// Параметры:
//  Параметр  - Структура или Массив.
// 
&НаКлиенте
Процедура ОповеститьВладельцаОВыборе(Параметр)

	Оповестить(Команда, Параметр, ЭтаФорма.ВладелецФормы);	

КонецПроцедуры // ОповеститьВладельцаОВыборе()

#КонецОбласти


