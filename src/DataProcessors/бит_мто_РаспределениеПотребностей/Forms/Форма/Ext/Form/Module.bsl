
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	ЗаполнитьКэшЗначений();
	
	// Инициализируем настройки компоновщика
	АдресСхемыКомпоновкиДанных = Обработки.бит_мто_РаспределениеПотребностей.ИнициализироватьКомпоновщик(Объект.Компоновщик, УникальныйИдентификатор, "СКД");
	
	Элементы.КомпоновщикПользовательскиеНастройки.РежимОтображения = РежимОтображенияНастроекКомпоновкиДанных.БыстрыйДоступ;	
	
	// Установим заголовок формы
	ЭтаФорма.АвтоЗаголовок = Ложь;
	
	УстановитьЗначенияПоУмолчанию();
	
	Элементы.ЗаполнятьАналитикиИзПервойСтроки.Доступность = ГруппироватьПоКонтрагентуДоговору;
	
	
	// Настроим отображение полей доп. аналитик в табличном поле Результат.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																							,"Товары"
																							,фКэшЗначений.ИзмеренияДоп
																							,фКэшЗначений.НастройкиИзмерений);
																							
	ВидимостьНазначенныхАналитик();
																							
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ВыбранноеЗначение, "РезультатИзмененияРаспределения") Тогда
		
		ПерезаполнитьТабличнуюЧасть(ВыбранноеЗначение.ХранилищеДанные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Ложь);
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаПриИзменении(Элемент)
	
	ИД = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииДоговора(ИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПоКонтрагентуДоговоруПриИзменении(Элемент)
	
	Если ГруппироватьПоКонтрагентуДоговору Тогда
	
		Элементы.ЗаполнятьАналитикиИзПервойСтроки.Доступность = Истина;
		
	Иначе	
		Элементы.ЗаполнятьАналитикиИзПервойСтроки.Доступность = Ложь;
		ЗаполнятьАналитикиИзПервойСтроки = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
														  	   , Элемент
															   , ТекущиеДанные
															   , ИмяАналитики
															   , СтандартнаяОбработка
															   , фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // ТоварыАналитикаНачалоВыбора()

&НаКлиенте
Процедура ТоварыАналитикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
														  	   , Элемент
															   , ТекущиеДанные
															   , ИмяАналитики
															   , СтандартнаяОбработка
															   , фКэшЗначений.НастройкиИзмерений);
                                                          
КонецПроцедуры // ТоварыАналитикаАвтоПодбор()

&НаКлиенте
Процедура ТоварыАналитикаОчистка(Элемент, СтандартнаяОбработка)
	
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			, ТекущиеДанные
																		   	, ИмяАналитики
																		   	, СтандартнаяОбработка
																		   	, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // ТоварыАналитикаОчистка()

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ПолучитьРезультатЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для каждого Строка Из Объект.Товары Цикл
	
		Строка.Изменить = Истина;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для каждого Строка Из Объект.Товары Цикл
	
		Строка.Изменить = Ложь;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьФлажки(Команда)
	
	Для каждого Строка Из Объект.Товары Цикл
	
		Строка.Изменить = НЕ Строка.Изменить;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуНаЗакупку(Команда)
	
	ДокЗаявка = СоздатьЗаявкуПередачуСервер("Закупка");
	
	// Если ТипЗнч(ДокЗаявка) = Тип("Массив") Тогда.
	// 	
	// 	Для каждого Заявка Из ДокЗаявка Цикл
	// 	
	// 		ПараметрыФормы = Новый Структура;
	// 		ПараметрыФормы.Вставить("Ключ", Заявка);
	// 				
	// 		ОткрытьФорму("Документ.бит_мто_ЗаявкаНаЗакупку.ФормаОбъекта", ПараметрыФормы);
	// 		
	// 	КонецЦикла;	
	// 		
	// КонецЕсли; 
			
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПередачуВОбеспечение(Команда)
	
	ДокПередача = СоздатьЗаявкуПередачуСервер("Передача");
	
	// Если ТипЗнч(ДокПередача) = Тип("Массив") Тогда.
	// 	
	// 	Для каждого Заявка Из ДокПередача Цикл
	// 		
	// 		ПараметрыФормы = Новый Структура;
	// 		ПараметрыФормы.Вставить("Ключ", Заявка);
	// 		
	// 		ОткрытьФорму("Документ.бит_мто_ПередачаВОбеспечениеСоСклада.ФормаОбъекта", ПараметрыФормы);
	// 		
	// 	КонецЦикла; 
	// 
	// КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗакрытие(Команда)
	
	ДокЗакрытия = СоздатьЗакрытиеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийОбъект",Объект);
	ОткрытьФорму("Обработка.бит_мто_РаспределениеПотребностей.Форма.ИзменениеТабличнойЧасти",ПараметрыФормы , ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСНастройками

// Процедура - действие команды "КомандаСохранитьНастройки".
// 
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
	
		ПараметрыФормы.Вставить("СохраненнаяНастройка",ТекущаяНастройка);
	
	КонецЕсли; 
		
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройки",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаСохранитьНастройки()

// Процедура - обработчик оповещения о закрытии формы сохранения настроек. 
// 
&НаКлиенте
Процедура СохранитьНастройки(СохрНастройка, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		
		ТекущаяНастройка = СохрНастройка;
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

// Процедура - действие команды "КомандаВосстановитьНастройки".
// 
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроек",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаВосстановитьНастройки()

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек

// Функция готовит стуктуру с настройками для сохранения.
// 
// Возвращаемое значение:
//   СтруктураНастройки   - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастройки = Новый Структура;
	
	СтруктураНастройки.Вставить("ПользовательскиеНастройки", Новый ХранилищеЗначения(Объект.Компоновщик.ПользовательскиеНастройки));
	СтруктураНастройки.Вставить("ГруппироватьПоКонтрагентуДоговору", ГруппироватьПоКонтрагентуДоговору);
	СтруктураНастройки.Вставить("ЗаполнятьАналитикиИзПервойСтроки", ЗаполнятьАналитикиИзПервойСтроки);
	
	Возврат СтруктураНастройки;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Функция применяет сохраненные настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Функция ПрименитьНастройки(ВыбНастройка)

	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			ПользовательскиеНастройки = СтруктураНастроек.ПользовательскиеНастройки.Получить();
			
			Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
			
			ГруппироватьПоКонтрагентуДоговору = СтруктураНастроек.ГруппироватьПоКонтрагентуДоговору;
			ЗаполнятьАналитикиИзПервойСтроки = СтруктураНастроек.ЗаполнятьАналитикиИзПервойСтроки;
			
			ТекущаяНастройка = ВыбНастройка;
			УстановитьЗаголовокФормыСервер();				
				
		КонецЕсли;	 
		
	КонецЕсли; 
	
КонецФункции // ПрименитьНастройки()

// Процедура устанавливает настройку либо из последних использованных, 
// 	либо из настройки по умолчанию.
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	// Получим настройку по - умолчанию и последнюю использованную.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипНастройки"			  , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	СтруктураПараметров.Вставить("НастраиваемыйОбъект"    , фКэшЗначений.НастраиваемыйОбъект);
	СтруктураПараметров.Вставить("ИспользоватьПриОткрытии", Истина);
	СохрНастройка = Справочники.бит_СохраненныеНастройки.ПолучитьНастройкуПоУмолчанию(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		
		ПрименитьНастройки(СохрНастройка);
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

#КонецОбласти 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_мто_РаспределениеПотребностей");
	
	фКэшЗначений.Вставить("ИзмеренияДоп"       , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним"));
	фКэшЗначений.Вставить("НастройкиИзмерений" , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура выполняет запрос и заполняет табличную часть "Результат".
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ПолучитьРезультатЗапроса()

	ЭлементыУпорядочивания = Неопределено;
	Результат = Обработки.бит_мто_РаспределениеПотребностей.ВыполнитьЗапросПоНастройке(Объект.Компоновщик, АдресСхемыКомпоновкиДанных, ЭлементыУпорядочивания);
	
	Если Результат.Количество() = 0 Тогда
	
		ТекстСообщения =  НСтр("ru = 'Нет данных, удовлетворяющих отбору'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
	КонецЕсли; 
	
	Объект.Товары.Загрузить(Результат);

	// Если не заполнена НДС подставляем 18%
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
		
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			
			РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Ложь);
			
			СтрокаТЧ.Всего = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	// Упорядочивание
	Если ЭлементыУпорядочивания <> Неопределено Тогда
	
		Для каждого элУп Из ЭлементыУпорядочивания Цикл
		
			Если элУп.Использование Тогда
			
				Если элУп.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
				
					Объект.Товары.Сортировать(Строка(элУп.Поле)+" Возр");
					
				Иначе 	
					Объект.Товары.Сортировать(Строка(элУп.Поле)+" Убыв");
				КонецЕсли; 
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры // ПолучитьРезультатЗапроса() 

// Процедура устанавливает заголовок формы на клиенте.
// 
&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = "Распределение потребностей ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтаФорма.Заголовок = "Распределение потребностей";
		
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура устанавливает заголовок формы на сервере.
// 
&НаСервере
Процедура УстановитьЗаголовокФормыСервер()
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = "Распределение потребностей ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтаФорма.Заголовок = "Распределение потребностей";
		
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормыСервер()

// Функция проверяет построчно заполненность поля номенклатура.
// 
&НаСервере
Функция ПроверкаЗаполненияНоменклатуры(МассивСтрок)

	Для каждого Строка Из МассивСтрок Цикл
	
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			ТекстСообщения = Нстр("ru = 'В строке %1% не заполнено поле ""Номенклатура""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат Ложь;
		
		КонецЕсли; 
		
		Если Строка.Количество = 0 Тогда
			
			ТекстСообщения = Нстр("ru = 'В строке %1% не заполнено поле ""Количество""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат Ложь;
		
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции // ПроверкаЗаполненияНоменклатуры()

// Функция проверяет построчно заполненность поля контрагент и договор.
// 
&НаСервере
Функция ПроверкаЗаполненияКонтрагентаИДоговора(МассивСтрок)

	Для каждого Строка Из МассивСтрок Цикл
	
		Если НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда
			
			ТекстСообщения = Нстр("ru = 'В строке %1% не заполнено поле ""Контрагент""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат Ложь;
		
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
			
			ТекстСообщения = Нстр("ru = 'В строке %1% не заполнено поле ""Договор контрагента""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат Ложь;
		
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат Истина;

КонецФункции // ПроверкаЗаполненияКонтрагентаИДоговора()

// Функция проверяет остатки выбранных строк.
// 
// Возвращаемое значение:
//  Булево.
// 
&НаСервере
Функция ПроверкаОстатковПотребностей(МассивСтрок)

	грТаблица = Объект.Товары.Выгрузить(МассивСтрок,"Потребность, Количество, ЗаявкаНаПотребность");
	грТаблица.Свернуть("Потребность, ЗаявкаНаПотребность","Количество");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабТовары.Количество,
	               |	ТабТовары.ЗаявкаНаПотребность,
	               |	ТабТовары.Потребность
	               |ПОМЕСТИТЬ врем
	               |ИЗ
	               |	&ТабТовары КАК ТабТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	врем.ЗаявкаНаПотребность,
	               |	ЕСТЬNULL(ПотребностиНоменклатурыОстатки.КоличествоОстаток - врем.Количество, 0) КАК Разность,
	               |	врем.Потребность
	               |ИЗ
	               |	врем КАК врем
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_мто_ПотребностиНоменклатуры.Остатки КАК ПотребностиНоменклатурыОстатки
	               |		ПО врем.ЗаявкаНаПотребность = ПотребностиНоменклатурыОстатки.ДокументПланирования
	               |			И врем.Потребность = ПотребностиНоменклатурыОстатки.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ врем";
	
	Запрос.УстановитьПараметр("ТабТовары", грТаблица);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Разность < 0 Тогда
		
			ТекстСообщения = Нстр("ru = 'В документе: %1%, превышено количество по Потребности: ""%2%"" на %3%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СокрЛП(Выборка.ЗаявкаНаПотребность), Выборка.Потребность, -Выборка.Разность);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПроверкаОстатковПотребностей()

// Функция создает заявку не закупку  или передачу в обеспечение по строкам таблицы.
// 
// Параметры:
//  ТипДокумента - Строка.
// 
&НаСервере
Функция СоздатьЗаявкуПередачуСервер(ТипДокумента)

	стрОтбор = Новый Структура;
	стрОтбор.Вставить("Изменить", Истина);
	МассивСтрок = Объект.Товары.НайтиСтроки(стрОтбор);
	
	Если МассивСтрок.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если НЕ ПроверкаЗаполненияНоменклатуры(МассивСтрок) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Успех = ПроверкаОстатковПотребностей(МассивСтрок);
	
	Если НЕ Успех Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МассивДок = Новый Массив;
	
	// Создаем документ
	Если ТипДокумента = "Закупка" Тогда
		
		Если НЕ ПроверкаЗаполненияКонтрагентаИДоговора(МассивСтрок) Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		Если ГруппироватьПоКонтрагентуДоговору Тогда
		
			ТаблицаТовары = Объект.Товары.Выгрузить(МассивСтрок, "Организация, Контрагент, ДоговорКонтрагента, ВидОперации");
			ТаблицаТовары.Свернуть("Организация, Контрагент, ДоговорКонтрагента, ВидОперации");
			
		Иначе	
			ТаблицаТовары = Объект.Товары.Выгрузить(МассивСтрок, "Организация, Контрагент, ДоговорКонтрагента, ВидОперации, ЗаявкаНаПотребность");
			ТаблицаТовары.Свернуть("Организация, Контрагент, ДоговорКонтрагента, ВидОперации, ЗаявкаНаПотребность");
		КонецЕсли; 
		
		Для каждого СтрокаТаб Из ТаблицаТовары Цикл
		
			ДокОб = Документы.бит_мто_ЗаявкаНаЗакупку.СоздатьДокумент();
		
			ДокОб.Дата = ТекущаяДата();
			ДокОб.Организация = СтрокаТаб.Организация;
			ДокОб.ВидОперации 		= СтрокаТаб.ВидОперации;
			ДокОб.УстановитьНовыйНомер();
			
			ДокОб.Контрагент 		= СтрокаТаб.Контрагент;
			ДокОб.ДоговорКонтрагента = СтрокаТаб.ДоговорКонтрагента;
				
			нОтбор = Новый Структура;
			нОтбор.Вставить("Изменить", Истина);
			нОтбор.Вставить("ВидОперации", СтрокаТаб.ВидОперации);
			нОтбор.Вставить("Организация", СтрокаТаб.Организация);
			нОтбор.Вставить("Контрагент", СтрокаТаб.Контрагент);
			нОтбор.Вставить("ДоговорКонтрагента", СтрокаТаб.ДоговорКонтрагента);
				
			Если НЕ ГруппироватьПоКонтрагентуДоговору Тогда
				нОтбор.Вставить("ЗаявкаНаПотребность", СтрокаТаб.ЗаявкаНаПотребность);
			КонецЕсли;
			
			нМассивСтрок = Объект.Товары.НайтиСтроки(нОтбор);
			
			Если нМассивСтрок.Количество()=0 Тогда
				Продолжить;
			КонецЕсли; 
			
			// Если Заявка на потребность одна, тогда заполняем шапку документа из нее,
			// иначе шапку оставляем пустой.
			нТаблицаЗнач = Новый ТаблицаЗначений;
			нТаблицаЗнач.Колонки.Добавить("ЗаявкаНаПотребность");
			Для каждого нСтр Из нМассивСтрок Цикл
			
				СтрТабЗнач = нТаблицаЗнач.Добавить();
				СтрТабЗнач.ЗаявкаНаПотребность = нСтр.ЗаявкаНаПотребность;
			
			КонецЦикла; 
			нТаблицаЗнач.Свернуть("ЗаявкаНаПотребность");
			
			Если нМассивСтрок.Количество() = 1
				ИЛИ нТаблицаЗнач.Количество() = 1 Тогда
				
				ЗаполнитьЗначенияСвойств(ДокОб, нМассивСтрок[0]);
			
			КонецЕсли; 
			
			// Если установлен флаг Заполнять аналитики из первой строки,
			// так же заполняем шапку значениями из первой строки.
			Если ЗаполнятьАналитикиИзПервойСтроки Тогда
			
				ЗаполнитьЗначенияСвойств(ДокОб, нМассивСтрок[0]);
			
			КонецЕсли; 
			
			Для каждого нСтрока Из нМассивСтрок Цикл
			
				НоваяСтрока = ДокОб.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, нСтрока);
				
				НоваяСтрока.ЗаявкаНаПотребность = нСтрока.ЗаявкаНаПотребность;
				
			КонецЦикла; 
			
			Если НЕ ЗначениеЗаполнено(ДокОб.Сценарий) Тогда
			
				ДокОб.Сценарий = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойСценарий"
																								, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
			
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ДокОб.ВалютаДокумента) Тогда
				
				ДокОб.ВалютаДокумента = нМассивСтрок[0].ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
			КонецЕсли; 
			
			СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ДокОб.ВалютаДокумента,ДокОб.Дата);
			ДокОб.КурсДокумента      = СтрКурса.Курс;
			ДокОб.КратностьДокумента = СтрКурса.Кратность;
			
			Успешно = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОб, РежимЗаписиДокумента.Запись);
			
			Если Успешно Тогда
			
				МассивДок.Добавить(ДокОб.Ссылка);
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		Возврат МассивДок;
		
	ИначеЕсли ТипДокумента = "Передача" Тогда	
		
		сТаблица = Объект.Товары.Выгрузить(МассивСтрок,"ЗаявкаНаПотребность");
		сТаблица.Свернуть("ЗаявкаНаПотребность");
		
		Для каждого СтрокаТаб Из сТаблица Цикл
			
			Заявка = СтрокаТаб.ЗаявкаНаПотребность; 
			
			Если бит_мто.ЭтоУслуга(Заявка) Тогда
				
				ТекстСообщения =  НСтр("ru = 'Запрещено создавать документ ""Передача в обеспечение"" на основании заявки с видом операции ""Услуги""!'");
				// ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СокрЛП(Заявка));
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				Продолжить;
			
			КонецЕсли; 
			
			стрОтбор = Новый Структура;
			стрОтбор.Вставить("Изменить", Истина);
			стрОтбор.Вставить("ЗаявкаНаПотребность", Заявка);
			МассивСтрок = Объект.Товары.НайтиСтроки(стрОтбор);
			
			// Создаем документ Передача в обеспечение
			ДокОб = Документы.бит_мто_ПередачаВОбеспечениеСоСклада.СоздатьДокумент();
		
			ДокОб.Дата = ТекущаяДата();
			ДокОб.УстановитьНовыйНомер();
			ДокОб.ДокументОснование = Заявка;
			ДокОб.Организация 		= Заявка.Организация;
			ДокОб.ЦФО 				= Заявка.ЦФО;
			
			Исключения = "Дата,Номер,Проведен,ПометкаУдаления";
			ЗаполнитьЗначенияСвойств(ДокОб, Заявка,,Исключения);
			
			Для каждого нСтр Из МассивСтрок Цикл
				
				НоваяСтрока = ДокОб.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, нСтр);
			
			КонецЦикла; 
			
			Успешно = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОб, РежимЗаписиДокумента.Запись);
			
			Если Успешно Тогда
				
				МассивДок.Добавить(ДокОб.Ссылка);
				
			КонецЕсли;			
				
		КонецЦикла; 
		
		Возврат МассивДок;
		
	КонецЕсли;	
		
КонецФункции // СоздатьЗаявкуПередачуСервер()

// Функция создает документ закрытия.
// 
&НаСервере
Функция СоздатьЗакрытиеНаСервере()
	
	МассивДок = Новый Массив;
	
	стрОтбор = Новый Структура;
	стрОтбор.Вставить("Изменить", Истина);
	МассивСтрок = Объект.Товары.НайтиСтроки(стрОтбор);
	
	Если МассивСтрок.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	сТаблица = Объект.Товары.Выгрузить(МассивСтрок,"Организация");
	сТаблица.Свернуть("Организация");
	
	Для каждого Строка Из сТаблица Цикл
		
		нОтбор = Новый Структура;
		нОтбор.Вставить("Изменить", Истина);
		нОтбор.Вставить("Организация", Строка.Организация);
		
		нМассивСтрок = Объект.Товары.НайтиСтроки(нОтбор);
		
		ДокОб = Документы.бит_ЗакрытиеЗаявок.СоздатьДокумент();
		ДокОб.Дата = КонецДня(ТекущаяДата());
		ДокОб.УстановитьНовыйНомер();
		ДокОб.Организация = Строка.Организация;
		
		Для каждого СтрМассива Из нМассивСтрок Цикл
		
			НовСтрока = ДокОб.ДокументыПланирования.Добавить();
			НовСтрока.ДокументПланирования = СтрМассива.ЗаявкаНаПотребность;
			НовСтрока.ПричинаЗакрытия = Справочники.бит_ПричиныЗакрытияДокументовПланированияПлатежа.Отмена;
		
		КонецЦикла; 
		
		Успешно = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОб, РежимЗаписиДокумента.Запись);
		
		Если Успешно Тогда
			МассивДок.Добавить(ДокОб.Ссылка);
		КонецЕсли; 
	КонецЦикла;	
		
	Возврат МассивДок;
	
КонецФункции

// Процедура пересчитывает суммы табличной части при изменении цены или количества.
// 
&НаКлиенте
Процедура ПриИзмененииКоличествоЦена()

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Ложь);

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;

КонецПроцедуры // ПриИзмененииКоличествоЦена()

// Процедура пересчитывает суммы табличной части при изменении суммы.
// 
&НаКлиенте
Процедура ПриИзмененииСумма()

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;

	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Ложь);

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;

КонецПроцедуры // ПриИзмененииСумма()

// Процедура осуществляет расчет суммы НДС, исходя из постоянной суммы.
// 
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС = Ложь)

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(
											СтрокаТабличнойЧасти.Сумма,
											Истина,
											СуммаВключаетНДС,
											бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;

КонецПроцедуры

// Процедура обработка при изменении договора в табличной части. 
// 
&НаСервере
Процедура ПриИзмененииДоговора(ИД)

	ТекСтрока = Объект.Товары.НайтиПоИдентификатору(ИД);

	Если ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента) Тогда
	
		СтруктураДоговора = Новый Структура;
		
		Если ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента.ТипЦен) Тогда
			
			ТипЦен = ТекСтрока.ДоговорКонтрагента.ТипЦен; 
			СтруктураДоговора.Вставить("ТипЦен", ТипЦен);
			
		Иначе	
			СтруктураДоговора.Вставить("ТипЦен", ТекСтрока.ТипЦен);
		КонецЕсли; 
		
		СтруктураДоговора.Вставить("СуммаВключаетНДС", Ложь);
		
		ВалютаДокумента = ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента,ТекСтрока.ЗаявкаНаПотребность.Дата);
		КурсДокумента      = СтрКурса.Курс;
		КратностьДокумента = СтрКурса.Кратность;
		
		СтруктураДоговора.Вставить("ВалютаДокумента",      ВалютаДокумента);
		СтруктураДоговора.Вставить("КратностьДокумента",   КратностьДокумента);
		СтруктураДоговора.Вставить("КурсДокумента",        КурсДокумента);
		
		ПриИзмененииЦеныИВалюты(СтруктураДоговора, ТекСтрока);
		
	КонецЕсли; 
	
КонецПроцедуры // ПриИзмененииДоговора()

// Процедура пересчитывает цены и суммы в табличной части "Товары".
// 
// Параметры:
//  СтруктураЦеныИВалюта - Структура.
//  ТекСтрока - Текущая строка таб части Товары.
// 
&НаСервере
Процедура ПриИзмененииЦеныИВалюты(СтруктураЦеныИВалюта, ТекСтрока)

	ВалютаДоИзменения    = ТекСтрока.ВалютаДокумента;
	КурсДоИзменения      = ТекСтрока.КурсДокумента;
	КратностьДоИзменения = ТекСтрока.КратностьДокумента;
	
	ТекСтрока.ТипЦен               = СтруктураЦеныИВалюта.ТипЦен;
	ТекСтрока.ВалютаДокумента      = СтруктураЦеныИВалюта.ВалютаДокумента;
	ТекСтрока.КурсДокумента      	= СтруктураЦеныИВалюта.КурсДокумента;
	ТекСтрока.КратностьДокумента 	= СтруктураЦеныИВалюта.КратностьДокумента;
	
	ПересчитатьНДС = Ложь;
	
	СписокНоменклатуры = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура"));
	
	Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
		СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
	Иначе
		СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекСтрока.ЗаявкаНаПотребность.Дата, Новый Структура("Валюта", ВалютаДоИзменения));
		
		СтруктураКурса.Вставить("Валюта",    ВалютаДоИзменения);
		СтруктураКурса.Вставить("ДатаКурса", ТекСтрока.ЗаявкаНаПотребность.Дата);
	КонецЕсли;
	
	Цена = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		ТекСтрока.Цена, ВалютаДоИзменения, ТекСтрока.ВалютаДокумента, СтруктураКурса.Курс,
		ТекСтрока.КурсДокумента, СтруктураКурса.Кратность, ТекСтрока.КратностьДокумента);
	
	ТекСтрока.Цена = Цена;
		
	ТекСтрока.Сумма = Цена * ТекСтрока.Количество;

	ТекСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма,
		Ложь, бит_БухгалтерияСервер.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС));
		
	ТекСтрока.Всего = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;

КонецПроцедуры // ПриИзмененииЦеныИВалюты()

// Процедура управляет видимостью полей назначенных аналитик.
// 
&НаСервере
Процедура ВидимостьНазначенныхАналитик()

	СовпадающиеАналитики = Новый Соответствие;
	
	МассивТипов = Новый Массив;
	
	Для каждого Реквизит Из Метаданные.Обработки.бит_мто_РаспределениеПотребностей.ТабличныеЧасти.Товары.Реквизиты Цикл
	                         
		Если Найти(Реквизит.Имя, "Аналитика")=0 Тогда
		
			Для каждого ТипРек Из Реквизит.Тип.Типы() Цикл
			
				Если НЕ ТипРек = Тип("Булево")
					И НЕ ТипРек = Тип("Дата")
					И НЕ ТипРек = Тип("Строка")
					И НЕ ТипРек = Тип("Число") Тогда
					
					СтрРекв = Новый Структура("Имя, Тип", Реквизит.Имя, ТипРек);
					МассивТипов.Добавить(СтрРекв);
				
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Настр = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Для каждого Аналит Из Настр Цикл
		
		Если НЕ Аналит.Значение.ЭтоСоставнойТип Тогда 
		
			Для каждого СтрРекв Из МассивТипов Цикл
				
				ТипРек = СтрРекв.Тип;
				Если Аналит.Значение.ТипЗначения.СодержитТип(ТипРек) Тогда 
					СовпадающиеАналитики.Вставить(Аналит.Ключ, СтрРекв.Имя);
					Прервать;
				КонецЕсли;
			
			КонецЦикла; 
			
		КонецЕсли;	
			
	КонецЦикла; 
	
	Для каждого Соотв Из СовпадающиеАналитики Цикл
	
		ИмяАналитики = Соотв.Ключ; 
		Элементы["Товары"+ИмяАналитики].Видимость = Ложь;
	
	КонецЦикла; 
	
КонецПроцедуры // ВидимостьНазначенныхАналитик()

// Процедура перезаполняет табличную часть "Товары" после групповой замены аналитик.
// 
&НаСервере
Процедура ПерезаполнитьТабличнуюЧасть(ХранилищеДанные)

	ДанныеЗаполнения = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ХранилищеДанные);
	
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(ДанныеЗаполнения);
	
КонецПроцедуры // ПерезаполнитьТабличнуюЧасть()

#КонецОбласти

