#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//	 * ПараметрыУказанияСерий - Структура - состав полей задается в функции ПроверкаИПодборПродукцииИСМП.ПараметрыУказанияСерий
//	Возвращаемое значение:
//	 * ТекстЗапроса - Строка - текст запроса расчета статуса указания серий.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(
		Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП, ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается из длительной операции по подготовке данных для формы проверки и подбора маркируемой продукции.
// 
// Параметры:
//	* Параметры - Структура - содержит следующие значения:
// 		** ПроверкаНеПоДокументу            - Булево - признак получения данных не по ссылке на документ
// 		** ПроверяемыйДокумент              - ДокументСсылка - ссылка на документ, из формы которого открыта форма проверки и подбора
// 		** НачальныйСтатусПроверки          - ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС - статус наличия продукции, используемый при подготовке данных
// 		** ДетализацияСтруктурыХранения     - ПеречислениеСсылка.ДетализацияСтруктурыХраненияПродукцииИСМП - значение детализации из формы проверки
// 		** РедактированиеФормыНедоступно    - Булево - признак запрета редактирования формы подбора
// 		** РежимПодбораСуществующихУпаковок - Булево - признак работы со штрихкодами упаковок, имеющимися в информационной базе
// 		** ПараметрыСканирования            - Структура - параметры обработки кодов маркировки, сформированные в форме проверки и подбора
// 		** ПараметрыПроверкиКодовМаркировки - Структура - параметры проверки кодов маркировки по статусу и владельцу, сформированные в форме проверки и подбора
// 		** КонтролироватьСканируемуюПродукциюПоДокументуОснованию - Булево - признак необходимости контроля наличия маркируемой продукции по основанию проверяемого документа
//	* АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения
// Возвращаемое значение:
//
Процедура ЗагрузитьДанныеДокументаДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.ПроверкаИПодборПродукцииИСМП.МодульМенеджера.ЗагрузитьДанныеДокументаДлительнаяОперация");
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          ДеревоМаркированнойПродукции());
	ДанныеДокумента.Вставить("ПодобраннаяМаркируемаяПродукция",       ПодобраннаяМаркируемаяПродукция());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",          Новый СписокЗначений());
	ДанныеДокумента.Вставить("УпаковкиДокумента",                     Новый СписокЗначений());
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               Параметры.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          Параметры.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",      Параметры.РежимПодбораСуществующихУпаковок);
	ДанныеДокумента.Вставить("ПроверкаЭлектронногоДокумента",         Параметры.ПроверкаЭлектронногоДокумента);
	ДанныеДокумента.Вставить("ПараметрыПроверкиКодовМаркировки",      Параметры.ПараметрыПроверкиКодовМаркировки);
	ДанныеДокумента.Вставить("КоличествоНедопустимыхКодовМаркировки", 0);
	ДанныеДокумента.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Параметры.КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
	
	СохраненнаяДетализацияСтруктурыХранения = СохраненнаяДетализацияСтруктурыХранения(Параметры.РежимПодбораСуществующихУпаковок);
	
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", СохраненнаяДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("СодержимоеУпаковокНедоступно", Ложь);
	ДанныеДокумента.Вставить("СтрокаПродукцияБезУпаковки",   Неопределено);
	
	Если Параметры.ПроверкаНеПоДокументу Тогда
		
		ПроверяемыеДанные = Параметры.ПроверяемыеДанные;
		ЗаполнитьТаблицуПодобраннойМаркируемойПродукции(ПроверяемыеДанные.ТаблицаМаркируемойПродукции, ДанныеДокумента);
		ДополнитьТаблицуПодобраннойМаркируемойПродукции(ПроверяемыеДанные.МаркированныеТовары, ДанныеДокумента);
		ЗаполнитьДеревоМаркированнойПродукции(ПроверяемыеДанные.ДеревоУпаковок, ДанныеДокумента);
		
	Иначе
		
		ТаблицаМаркируемойПродукции = ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента(
			Параметры.ПроверяемыйДокумент, Перечисления.ВидыПродукцииИС.Обувная);
		
		ЗаполнитьТаблицуПодобраннойМаркируемойПродукции(ТаблицаМаркируемойПродукции, ДанныеДокумента);
		
		Если Параметры.Свойство("ДанныеКлючаСессииИСМП") Тогда
			ПараметрыСеанса.ДанныеКлючаСессииИСМП = Параметры.ДанныеКлючаСессииИСМП;
		КонецЕсли;
		
		ПараметрыСканирования = Параметры.ПараметрыСканирования;
		ПараметрыСканирования.СсылкаНаОбъект = Параметры.ПроверяемыйДокумент;
		Если Параметры.РежимПодбораСуществующихУпаковок Тогда
			РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковокПоДокументу(
				Параметры.ПроверяемыйДокумент, ПараметрыСканирования.Детализация, ПараметрыСканирования);
		Иначе
			
			ПараметрыСканирования.Детализация = СохраненнаяДетализацияСтруктурыХранения;
			ПараметрыСканирования.СопоставлятьНоменклатуру = Ложь;
			ШтрихкодыУпаковокДокумента = ШтрихкодированиеИС.ШтрихкодыУпаковокДокумента(
				Параметры.ПроверяемыйДокумент, ПараметрыСканирования);
			РезультатПолученияДанных = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыПоДаннымИСМП(
				ШтрихкодыУпаковокДокумента, ПараметрыСканирования);
		КонецЕсли;
		
		Если РезультатПолученияДанных.ЕстьОшибки Тогда
			ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
		КонецЕсли;
		
		ДанныеПроверяемогоДокумента = РезультатПолученияДанных.ВложенныеШтрихкоды;
		
		ДополнитьТаблицуПодобраннойМаркируемойПродукции(ДанныеПроверяемогоДокумента.МаркированныеТовары, ДанныеДокумента);
		ЗаполнитьДеревоМаркированнойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента);
		
	КонецЕсли;
	
	КоличествоДанных = ИнтеграцияИС.КоличествоСтрокДереваЗначений(ДанныеДокумента.ДеревоМаркированнойПродукции)
		+ ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Количество();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресРезультата);
	
КонецПроцедуры

// Фоновая операция по фиксации результатов проверки и подбора в документе, 
// 
// Параметры:
// 	Параметры - Структура - содержит следующие значения:
// 	   * СоздаватьАктОРасхождениях    - Булево - признак необходимости создания акта о расхождениях.
// 	   * ПроверяемыйДокумент          - ДокументСсылка - документ, для которого выполнялась проверка и подбор.
// 	   * ДеревоМаркированнойПродукции - ДеревоЗначений - содержит результаты проверки и подбора с иерархией упаковок.
// 	   * ДанныеПроверкиИПодбора       - Структруа      - содержит слепок состояния проверки и подбора, если предусмотрено его хранение по окончании результатов проверки.
// 	   * ПроверкаНеПоДокументу        - Булево - признак того, что проверка и подбор была вызвана из произвольной формы.
// 	   * ПодобраннаяМаркируемаяПродукция - ТаблицаЗначений - содержит информацию о подобранной продукции сгруппированную до 
// 	       номенклатуры, характеристики, серии.
// 	АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения
// Возвращаемое значение:
// 	
Процедура ЗафиксироватьРезультатПроверкиИПодбора(Параметры, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обработка.ПроверкаИПодборПродукцииИСМП.МодульМенеджера.ЗафиксироватьРезультатПроверкиИПодбора");

	НачатьТранзакцию();
	
	Попытка
		
		ПараметрыОкончанияПроверки = ПроверкаИПодборПродукцииИСМП.ПараметрыОкончанияПроверки();
		ПараметрыОкончанияПроверки.ВидПродукцииИС            = Перечисления.ВидыПродукцииИС.Обувная;
		ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях = Параметры.СоздаватьАктОРасхождениях;
		ПараметрыОкончанияПроверки.ПроверяемыйДокумент       = Параметры.ПроверяемыйДокумент;
			
		ДеревоМаркированнойПродукции = Параметры.ДеревоМаркированнойПродукции;
		ДеревоМаркированнойПродукции.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
		ПроверкаИПодборПродукцииИСМП.УдалитьПустыеУпаковкиДерева(ДеревоМаркированнойПродукции);
	
		ТаблицаШтрихкодовВерхнегоУровня        = ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаШтрихкодовВерхнегоУровня();
		ТаблицаПодобраннойПровереннойПродукции = ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаПодобраннойПровереннойПродукции();
		
		Справочники.ШтрихкодыУпаковокТоваров.РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(
			ДеревоМаркированнойПродукции, ТаблицаШтрихкодовВерхнегоУровня);
		
		ОтразитьАгрегациюКодовМаркировкиВПуле(ДеревоМаркированнойПродукции);
		
		ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня = ТаблицаШтрихкодовВерхнегоУровня;
		
		ЕстьРасхождения = Ложь;
		
		Для Каждого СтрокаДерева Из Параметры.ПодобраннаяМаркируемаяПродукция Цикл
			НоваяСтрока = ТаблицаПодобраннойПровереннойПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Характеристика) Тогда
				НоваяСтрока.Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"); 
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
				НоваяСтрока.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"); 
			КонецЕсли;
			
			Если НоваяСтрока.Количество <> НоваяСтрока.КоличествоПодобрано Тогда
				ЕстьРасхождения = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции = ТаблицаПодобраннойПровереннойПродукции;
		
		Если Не Параметры.ПроверкаНеПоДокументу Тогда
			
			Если Параметры.СоздаватьАктОРасхождениях Тогда
				ПараметрыОкончанияПроверки.ТаблицаРасхожденийШтриховыхКодов = ТаблицаРасхожденийУпаковокПоРезультатамПроверкиИПодбора(Параметры);
			КонецЕсли;
			
			ПроверкаИПодборПродукцииИСМП.ЗафиксироватьРезультатПроверкиИПодбора(ПараметрыОкончанияПроверки);
				
			Если Параметры.СоздаватьАктОРасхождениях
				И ЗначениеЗаполнено(ПараметрыОкончанияПроверки.СозданныйАктОРасхождениях) Тогда
				
				РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.ОтразитьЗавершениеПроверкиДокумента(
					ПараметрыОкончанияПроверки.СозданныйАктОРасхождениях,
					Перечисления.ВидыПродукцииИС.Обувная,
					Параметры.ДанныеПроверкиИПодбора);
				
				РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.ОтразитьЗавершениеПроверкиДокумента(
					Параметры.ПроверяемыйДокумент,
					Перечисления.ВидыПродукцииИС.Обувная,
					Неопределено,
					Перечисления.ТребуемоеДействиеДокументЭДО.Подтвердить);
				
			Иначе
				
				Если ЕстьРасхождения Тогда
					ТребуемоеДействие = Перечисления.ТребуемоеДействиеДокументЭДО.Отклонить;
				Иначе
					ТребуемоеДействие = Перечисления.ТребуемоеДействиеДокументЭДО.Подтвердить;
				КонецЕсли;
				
				РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.ОтразитьЗавершениеПроверкиДокумента(
					Параметры.ПроверяемыйДокумент,
					Перечисления.ВидыПродукцииИС.Обувная,
					Параметры.ДанныеПроверкиИПодбора,
					ТребуемоеДействие);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Произошла ошибка при сохранении результатов проверки.'");
		ТекстОшибки = ТекстОшибки + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
		
	КоличествоДанных = ИнтеграцияИС.КоличествоСтрокДереваЗначений(ДеревоМаркированнойПродукции);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	РезультатПроверки = Новый Структура();
	
	Если Параметры.ПроверкаНеПоДокументу Тогда
		РезультатПроверки.Вставить("ТаблицаШтрихкодовВерхнегоУровня", ТаблицаШтрихкодовВерхнегоУровня);
		РезультатПроверки.Вставить("ТаблицаПодобраннойПровереннойПродукции", ТаблицаПодобраннойПровереннойПродукции);
	Иначе
		РезультатПроверки.Вставить("СозданныйАктОРасхождениях", ПараметрыОкончанияПроверки.СозданныйАктОРасхождениях);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресРезультата);
	
КонецПроцедуры

// Возвращает сохраненную в хранилище настроек данных форм детализацию отображения структуры упаковок в форме проверки и подбора табачной продукции.
// 
// Параметры:
//	* РежимПодбораСуществующихУпаковок - Булево - признак работы со штрихкодами упаковок, имеющимися в информационной базе.
// Возвращаемое значение:
//	* СохраненнаяДетализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияПродукцииИСМП - сохраненная детализация отображения структуры упаковок
//
Функция СохраненнаяДетализацияСтруктурыХранения(РежимПодбораСуществующихУпаковок) Экспорт
	
	СохраненнаяДетализация = Неопределено;
	СохраненныеНастройки   = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор", "");
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Если РежимПодбораСуществующихУпаковок
			И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХранения") Тогда
			СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХранения;
		ИначеЕсли НЕ РежимПодбораСуществующихУпаковок
			И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХраненияПриобретение") Тогда
			СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХраненияПриобретение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СохраненнаяДетализация;
	
КонецФункции

// Возвращает детализацию переданной иерархической структуры упаковок маркируемой продукции.
// 
// Параметры:
//	* ДеревоУпаковок - ДеревоЗначений, ДанныеФормыКоллекция - иерархическая структура упаковок маркируемой продукции.
// Возвращаемое значение:
//	* ДетализацияСтруктурыДерева - ПеречислениеСсылка.ДетализацияСтруктурыХраненияПродукцииИСМП - расчитаная детализация структуры упаковок
//
Функция ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок) Экспорт

	ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.КоробаПотребительскиеУпаковки;
			
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
				Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
					ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаРасхожденийУпаковокПоРезультатамПроверкиИПодбора(Параметры)
	
	ТаблицаРасхождений = Новый ТаблицаЗначений;
	ТаблицаРасхождений.Колонки.Добавить("ШтрихкодУпаковки",  Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаРасхождений.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаРасхождений.Колонки.Добавить("Номенклатура",      Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаРасхождений.Колонки.Добавить("Характеристика",    Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаРасхождений.Колонки.Добавить("Серия",             Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаРасхождений.Колонки.Добавить("ЭтоИзлишек",        Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаДерева Из Параметры.ДеревоМаркированнойПродукции.Строки Цикл
		
		ЗаполнитьТаблицуРасхожденийПоСтрокеДерева(СтрокаДерева, ТаблицаРасхождений);
		
	КонецЦикла;
	
	Возврат ТаблицаРасхождений;
	
КонецФункции

Процедура ЗаполнитьТаблицуРасхожденийПоСтрокеДерева(СтрокаДерева, ТаблицаРасхождений)
	
	ЭтоИзлишек = (СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась
	             Или СтрокаДерева.СтатусПроверки = СтрокаДерева.НеСодержитсяВДанныхДокумента);
	
	ЭтоНедостача = СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
	
	ЭтоТипУпаковкиПоКоторомуФиксируютсяРасхождения = (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
	                                                  Или СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар);
	
	ВозможнаПроверкаПодчиненныхСтрок = (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
	                                   Или СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
	                                   Или СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки); 
	
	Если ЭтоТипУпаковкиПоКоторомуФиксируютсяРасхождения
		И (ЭтоИзлишек Или ЭтоНедостача) Тогда
		
		НоваяСтрокаТаблицы = ТаблицаРасхождений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаДерева); 	
		НоваяСтрокаТаблицы.ЭтоИзлишек = ЭтоИзлишек;
		
		Возврат;
			
	КонецЕсли; 
	
	Если ВозможнаПроверкаПодчиненныхСтрок Тогда
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
			ЗаполнитьТаблицуРасхожденийПоСтрокеДерева(ПодчиненнаяСтрока, ТаблицаРасхождений);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПодобраннойМаркируемойПродукции(ТаблицаМаркируемойПродукции, ДанныеДокумента)
	
	ПустаяСерия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	
	Для Каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
		СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника);
		СтрокаПодобраннойПродукции.НоменклатураСопоставлена = Истина;
		
		Если ДанныеДокумента.ПроверкаЭлектронногоДокумента Тогда
			СтрокаПодобраннойПродукции.Серия = ПустаяСерия;
		КонецЕсли;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПодобраннойМаркируемойПродукции(ТаблицаМаркируемойПродукции, ДанныеДокумента)
	
	Если ТаблицаМаркируемойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МаркированнаяПродукцияИСМП = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки();
	
	Для Каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("GTIN", СтрокаИсточника.GTIN);
		
		Если ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) Тогда
			СтруктураПоиска.Вставить("Номенклатура", СтрокаИсточника.Номенклатура);
			
			Если ЗначениеЗаполнено(СтрокаИсточника.Характеристика) Тогда
				СтруктураПоиска.Вставить("Характеристика", СтрокаИсточника.Характеристика);
			Иначе
				СтруктураПоиска.Вставить("Характеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточника.Серия) Тогда
				СтруктураПоиска.Вставить("Серия", СтрокаИсточника.Серия);
			Иначе
				СтруктураПоиска.Вставить("Серия", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
			КонецЕсли;
		Иначе
			СтруктураПоиска.Вставить("Номенклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		КонецЕсли;
		
		СтрокиПродукцииИСМП = МаркированнаяПродукцияИСМП.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПродукцииИСМП.Количество() = 0 Тогда
			СтрокаПродукцииИСМП = МаркированнаяПродукцияИСМП.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПродукцииИСМП, СтруктураПоиска);
			ЗаполнитьЗначенияСвойств(СтрокаПродукцииИСМП, СтрокаИсточника, "ПредставлениеНоменклатуры");
		Иначе
			СтрокаПродукцииИСМП = СтрокиПродукцииИСМП[0];
		КонецЕсли;
		
		КоличествоИС = 1;
		СтрокаПродукцииИСМП.КоличествоИС = СтрокаПродукцииИСМП.КоличествоИС + КоличествоИС;
	КонецЦикла;
	
	Если ДанныеДокумента.РежимПодбораСуществующихУпаковок Тогда
		ИменаКолонокПоиска   = "Номенклатура,Характеристика,Серия";
		ИмяКолонкиКоличество = "КоличествоПодобрано";
	Иначе
		ИменаКолонокПоиска   = "Номенклатура,Характеристика";
		ИмяКолонкиКоличество = "КоличествоИС";
	КонецЕсли;
	
	ТаблицаПоискаПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Скопировать(, ИменаКолонокПоиска);
	ТаблицаПоискаПродукции.Свернуть(ИменаКолонокПоиска);
	
	Для Каждого СтрокаПоискаПродукции Из ТаблицаПоискаПродукции Цикл
		СтруктураПоиска = Новый Структура(ИменаКолонокПоиска);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоискаПродукции);
		
		СтрокиПродукцииИСМП = МаркированнаяПродукцияИСМП.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПродукцииИСМП.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПодобраннойПродукции.Количество() = 1 Тогда
			СтрокаПодобраннойПродукции = СтрокиПодобраннойПродукции[0];
			ИндексПодобраннойСтроки = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Индекс(СтрокаПодобраннойПродукции);
			
			Если СтрокиПродукцииИСМП.Количество() = 1 Тогда
				СтрокаПродукцииИСМП = СтрокиПродукцииИСМП[0];
				ДополнитьСтрокуПодобраннойМаркированнойПродукции(СтрокаПодобраннойПродукции, СтрокаПродукцииИСМП, ИмяКолонкиКоличество, СтрокаПродукцииИСМП.КоличествоИС);
			ИначеЕсли НЕ ДанныеДокумента.РежимПодбораСуществующихУпаковок Тогда
				ИндексСтрокиИСМП = 0;
				
				Пока ИндексСтрокиИСМП < СтрокиПродукцииИСМП.Количество() Цикл
					СтрокаПродукцииИСМП = СтрокиПродукцииИСМП[ИндексСтрокиИСМП];
					ДополнитьСтрокуПодобраннойМаркированнойПродукции(СтрокаПодобраннойПродукции, СтрокаПродукцииИСМП, ИмяКолонкиКоличество, СтрокаПродукцииИСМП.КоличествоИС);
					
					Если СтрокаПодобраннойПродукции.Количество > СтрокаПодобраннойПродукции[ИмяКолонкиКоличество] Тогда
						ИндексСтрокиИСМП = ИндексСтрокиИСМП + 1;
						
						Если ИндексСтрокиИСМП < (СтрокиПродукцииИСМП.Количество() - 1) Тогда
							ОстатокКоличества = СтрокаПодобраннойПродукции.Количество - СтрокаПодобраннойПродукции[ИмяКолонкиКоличество];
							СтрокаПодобраннойПродукции.Количество = СтрокаПодобраннойПродукции[ИмяКолонкиКоличество];
							ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
						
							СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Вставить(ИндексПодобраннойСтроки + 1);
							ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтруктураПоиска);
							СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
							СтрокаПодобраннойПродукции.Количество = ОстатокКоличества;
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли СтрокиПродукцииИСМП.Количество() = 1 Тогда
			СтрокаПродукцииИСМП = СтрокиПродукцииИСМП[0];
			ИндексПодобраннойСтроки = 0;
			
			Пока ИндексПодобраннойСтроки < СтрокиПодобраннойПродукции.Количество() Цикл
				СтрокаПодобраннойПродукции = СтрокиПодобраннойПродукции[ИндексПодобраннойСтроки];
				
				Если ИндексПодобраннойСтроки = (СтрокиПодобраннойПродукции.Количество() - 1) Тогда
					ТекущееКоличествоИС = СтрокаПродукцииИСМП.КоличествоИС;
				Иначе
					ТекущееКоличествоИС = Мин(СтрокаПродукцииИСМП.КоличествоИС, СтрокаПодобраннойПродукции.Количество);
				КонецЕсли;
				
				ДополнитьСтрокуПодобраннойМаркированнойПродукции(СтрокаПодобраннойПродукции, СтрокаПродукцииИСМП, ИмяКолонкиКоличество, ТекущееКоличествоИС);
				
				Если СтрокаПродукцииИСМП.КоличествоИС = 0 Тогда
					Прервать;
				Иначе
					ИндексПодобраннойСтроки = ИндексПодобраннойСтроки + 1;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаПодобраннойПродукции Из СтрокиПодобраннойПродукции Цикл
				Для Каждого СтрокаПродукцииИСМП Из СтрокиПродукцииИСМП Цикл
					Если СтрокаПодобраннойПродукции.Количество = СтрокаПродукцииИСМП.КоличествоИС Тогда
						ДополнитьСтрокуПодобраннойМаркированнойПродукции(СтрокаПодобраннойПродукции, СтрокаПродукцииИСМП, ИмяКолонкиКоличество, СтрокаПродукцииИСМП.КоличествоИС);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;	
		
	Для Каждого СтрокаПродукцииИСМП Из МаркированнаяПродукцияИСМП Цикл
		Если СтрокаПродукцииИСМП.КоличествоИС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаПродукцииИСМП,, "КоличествоИС");
		СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
		СтрокаПодобраннойПродукции[ИмяКолонкиКоличество] = СтрокаПродукцииИСМП.КоличествоИС;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтрокуПодобраннойМаркированнойПродукции(СтрокаПодобраннойПродукции, СтрокаПродукцииИСМП, ИмяКолонкиКоличество, КоличествоИС)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПодобраннойПродукции.GTIN) Тогда
		СтрокаПодобраннойПродукции.GTIN = СтрокаПродукцииИСМП.GTIN;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПодобраннойПродукции.ПредставлениеНоменклатуры) Тогда
		СтрокаПодобраннойПродукции.ПредставлениеНоменклатуры = СтрокаПродукцииИСМП.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Серия) И ЗначениеЗаполнено(СтрокаПродукцииИСМП.Серия) Тогда
		СтрокаПодобраннойПродукции.Серия = СтрокаПродукцииИСМП.Серия;
	КонецЕсли;
	
	СтрокаПодобраннойПродукции[ИмяКолонкиКоличество] = СтрокаПодобраннойПродукции[ИмяКолонкиКоличество] + КоличествоИС;
	СтрокаПродукцииИСМП.КоличествоИС = СтрокаПродукцииИСМП.КоличествоИС - КоличествоИС;

	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);

КонецПроцедуры

Процедура ЗаполнитьДеревоМаркированнойПродукции(ДеревоУпаковокДокумента, ДанныеДокумента)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева(ДеревоУпаковокДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоУпаковокДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаПродукцияБезУпаковки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
		ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента)
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаПродукции Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаПродукции, КоллекцияСтрокПриемника, ДанныеДокумента);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
	
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
			
		СтрокаПродукцияБезУпаковки = ДанныеДокумента.СтрокаПродукцияБезУпаковки;
		
		Если СтрокаПродукцияБезУпаковки = Неопределено Тогда
			СтрокаПродукцияБезУпаковки = ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПродукцияБезУпаковки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	
	Если НоваяСтрока.НедопустимыйКодМаркировки Тогда
		ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки = ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки + 1;
	КонецЕсли;
	
	Если НоваяСтрока.СодержимоеНедоступно Тогда
		ДанныеДокумента.СодержимоеУпаковокНедоступно = Истина;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;

	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента);
	КонецЦикла;

КонецПроцедуры

Функция ДобавленнаяСтрокаПродукцияБезУпаковки(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаполнитьСтрокуПродукцияБезУпаковки(НоваяСтрока);
	
	ДанныеДокумента.СтрокаПродукцияБезУпаковки = НоваяСтрока;
	
	Возврат НоваяСтрока;

КонецФункции

Процедура ОтразитьАгрегациюКодовМаркировкиВПуле(ДеревоМаркированнойПродукции, ПроверятьУпаковкиПула = Ложь)
	
	ТаблицаКодовМаркировки = Новый ТаблицаЗначений();
	ТаблицаКодовМаркировки.Колонки.Добавить("КодМаркировки",    ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаКодовМаркировки.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаКодовМаркировки.Колонки.Добавить("ХешСуммаУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	ЗаполнитьТаблицуКодовМаркировки(ТаблицаКодовМаркировки, ДеревоМаркированнойПродукции.Строки);
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
	ЭлементБлокировки.ИсточникДанных = ТаблицаКодовМаркировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КодМаркировки", "КодМаркировки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КодыМаркировки.КодМаркировки    КАК КодМаркировки,
	|	КодыМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	КодыМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки
	|ПОМЕСТИТЬ
	|	ВТКодыМаркировки
	|ИЗ
	|	&ТаблицаКодовМаркировки КАК КодыМаркировки
	|
	|;
	|
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.ДокументОснование КАК ДокументОснование,
	|	ПулКодовМаркировки.КодМаркировки     КАК КодМаркировки,
	|	КодыМаркировки.ШтрихкодУпаковки      КАК ШтрихкодУпаковки,
	|	КодыМаркировки.ХешСуммаУпаковки      КАК ХешСуммаУпаковки
	|ПОМЕСТИТЬ
	|	ВТКодыМаркировкиИОснования
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыМаркировки КАК КодыМаркировки
	|		ПО ПулКодовМаркировки.КодМаркировки = КодыМаркировки.КодМаркировки
	|ГДЕ
	|	ПулКодовМаркировки.ШтрихкодУпаковки <> КодыМаркировки.ШтрихкодУпаковки
	|	ИЛИ ПулКодовМаркировки.ХешСуммаУпаковки <> КодыМаркировки.ХешСуммаУпаковки
	|
	|;
	|
	|ВЫБРАТЬ
	|	КодыМаркировкиИОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ВТКодыМаркировкиИОснования КАК КодыМаркировкиИОснования
	|СГРУППИРОВАТЬ ПО
	|	КодыМаркировкиИОснования.ДокументОснование
	|
	|;
	|
	|ВЫБРАТЬ
	|	КодыМаркировкиИОснования.ДокументОснование КАК ДокументОснование,
	|	КодыМаркировкиИОснования.КодМаркировки     КАК КодМаркировки,
	|	КодыМаркировкиИОснования.ШтрихкодУпаковки  КАК ШтрихкодУпаковки,
	|	КодыМаркировкиИОснования.ХешСуммаУпаковки  КАК ХешСуммаУпаковки
	|ИЗ
	|	ВТКодыМаркировкиИОснования КАК КодыМаркировкиИОснования
	|ИТОГИ ПО
	|	ДокументОснование
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаКодовМаркировки", ТаблицаКодовМаркировки);
	Результаты = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результаты.Количество();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
	ЭлементБлокировки.ИсточникДанных = Результаты[КоличествоРезультатов - 2];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОснование", "ДокументОснование");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ВыборкаДокументОснование = Результаты[КоличествоРезультатов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументОснование.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПулКодовМаркировкиСУЗ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["ДокументОснование"].Установить(ВыборкаДокументОснование.ДокументОснование);
		НаборЗаписей.Прочитать();
		
		Выборка = ВыборкаДокументОснование.Выбрать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			СтруктураПоиска = Новый Структура("КодМаркировки", ЗаписьНабора.КодМаркировки);
			Выборка.Сбросить();
			
			Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
				Если ПроверятьУпаковкиПула
					И ЗначениеЗаполнено(ЗаписьНабора.ШтрихкодУпаковки)
					И ЗаписьНабора.ШтрихкодУпаковки <> Выборка.ШтрихкодУпаковки Тогда
					ТекстОшибки = НСтр("ru = 'Код маркировки %1 уже вложен в упаковку со штрихкодом %2.'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.КодМаркировки, ЗаписьНабора.ШтрихкодУпаковки);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				ЗаписьНабора.ШтрихкодУпаковки = Выборка.ШтрихкодУпаковки;
				ЗаписьНабора.ХешСуммаУпаковки = Выборка.ХешСуммаУпаковки;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуКодовМаркировки(ТаблицаКодовМаркировки, СтрокиМаркированнойПродукции)
	
	РодительскаяСтрока = СтрокиМаркированнойПродукции.Родитель;
	
	ТаблицаСостава = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.НоваяСоставУпаковки();
	ТаблицаСостава.Колонки.Добавить("КодМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Для Каждого СтрокаМаркированнойПродукции Из СтрокиМаркированнойПродукции Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаМаркированнойПродукции.ТипУпаковки) Тогда
			ЗаполнитьТаблицуКодовМаркировки(ТаблицаКодовМаркировки, СтрокаМаркированнойПродукции.Строки);
		ИначеЕсли СтрокаМаркированнойПродукции.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			И РодительскаяСтрока <> Неопределено
			И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительскаяСтрока.ТипУпаковки) Тогда
			НоваяСтрока = ТаблицаСостава.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМаркированнойПродукции);
			НоваяСтрока.КодМаркировки = СтрокаМаркированнойПродукции.Штрихкод;
			НоваяСтрока.Количество = 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСостава.Количество() > 0 Тогда
		КопияСостава = ТаблицаСостава.Скопировать();
		КопияСостава.Свернуть("Номенклатура,Характеристика,Серия", "Количество");
		ХешСуммаУпаковки = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.ХешСуммаУпаковки(КопияСостава);
		
		Для Каждого СтрокаСостава Из ТаблицаСостава Цикл
			НоваяСтрока = ТаблицаКодовМаркировки.Добавить();
			НоваяСтрока.КодМаркировки    = СтрокаСостава.КодМаркировки;
			НоваяСтрока.ШтрихкодУпаковки = РодительскаяСтрока.ШтрихкодУпаковки;
			НоваяСтрока.ХешСуммаУпаковки = ХешСуммаУпаковки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДеревоМаркированнойПродукции()
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки", Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП, ПеречислениеСсылка.ТипыУпаковок"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",           Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",             Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки",     Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненнойПродукции",      Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",          Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",  Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                        Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                Метаданные.ОпределяемыеТипы.GTIN.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                 Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки", Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",           Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("СодержимоеНедоступно",                Новый ОписаниеТипов("Булево"));	
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

Функция ПодобраннаяМаркируемаяПродукция()
	
	ПодобраннаяМаркируемаяПродукция = Новый ТаблицаЗначений();
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Номенклатура",               Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Характеристика",             Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Серия",                      Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("Количество",                 Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоПодобрано",        Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ИндексКодаМаркировки",       Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("GTIN",                       Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ПредставлениеНоменклатуры",  Новый ОписаниеТипов("Строка"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("СтатусУказанияСерий",        Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("ТипНоменклатуры",            Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НомерСтроки",                Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("КоличествоИС",               Новый ОписаниеТипов("Число"));
	ПодобраннаяМаркируемаяПродукция.Колонки.Добавить("НоменклатураСопоставлена",   Новый ОписаниеТипов("Булево"));
	
	Возврат ПодобраннаяМаркируемаяПродукция;
	
КонецФункции

#КонецОбласти
	
#КонецЕсли