
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если НЕ бит_ЛицензированиеБФCервер.СборкаДоступна("УХ") Тогда
	
		 Отказ = Истина;
	
	КонецЕсли; 
	
	КоллекцияПсевдоМета = Новый Структура;
	Объект.РежимСообщений = "Все";
	Объект.РежимЗаписи = "Запись";
	
	ЗаполнитьКэшЗначений();
	
	УстановитьЗначенияПоУмолчанию();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    УстановитьЗаголовокФормы();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "НачалоВыбора" поля ввода "Путь".
// 
&НаКлиенте
Процедура ПутьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.РежимВыбора = 1 Тогда
		
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.МножественныйВыбор = Истина;
		ДиалогВыбора.Фильтр = "Все файлы Excel (*.xls, *.xlsx)|*.xls; *.xlsx";
		
	Иначе
		
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ПутьВыборЗавершение", ЭтотОбъект);
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

// Процедура обработчик оповещения "ПутьВыборЗавершение".
// 
// Параметры:
// ВыбранныеПути - Массив.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ПутьВыборЗавершение(ВыбранныеПути, ДополнительныеДанные) Экспорт

	Если ТипЗнч(ВыбранныеПути) = Тип("Массив") И ВыбранныеПути.Количество() > 0 Тогда
	
		 ВыбранныеФайлы.Очистить();
		 
		 Если Объект.РежимВыбора = 1 Тогда
			 
			 Объект.Путь = ВыбранныеПути[0];
			 
		 	 Для каждого ТекПуть Из ВыбранныеПути Цикл
			 
			 	ВыбранныеФайлы.Добавить(ТекПуть);
			 
			 КонецЦикла; 
			 
		 Иначе
			 
			 Объект.Путь = ВыбранныеПути[0];
			 
		 КонецЕсли; 
		 
		 УправлениеДоступностьюЭлементов(Ложь);
		 
		 ПодключитьОбработчикОжидания("ОжиданиеВыбораПути",0.1,Истина);
	
	КонецЕсли; 
	
КонецПроцедуры	// ПутьВыборЗавершение

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереводанные

// Процедура - обработчик события "Очистка" поля ввода "Представление" 
// табличного поля "ДеревоДанные".
// 
&НаКлиенте
Процедура ДеревоДанныеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ДеревоДанные.ТекущиеДанные;
	
	Если НЕ ПустаяСтрока(ТекущаяСтрока.ИмяФайла) Тогда
	
		ФайловаяСистемаКлиент.ОткрытьФайл(ТекущаяСтрока.ИмяФайла);
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ВидПроформы" 
// табличного поля "ДеревоДанные".
// 
&НаКлиенте
Процедура ДеревоДанныеВидПроформыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Выполнять" 
// табличного поля "ДеревоДанные".
// 
&НаКлиенте
Процедура ДеревоДанныеВыполнятьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоДанные.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		Если ТекущаяСтрока.Выполнять  Тогда
			
			КодДействия = 1;
			
		Иначе	
			
			КодДействия = 0;
			
		КонецЕсли; 
		
		ИзменитьФлажки(ТекущаяСтрока,КодДействия);
		
		// Если устанавливаем флаг для листа, то нужно установить флаг и для файла.
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		
		Если НЕ СтрокаРодитель = Неопределено И ТекущаяСтрока.Выполнять Тогда
		
			СтрокаРодитель.Выполнять = Истина;
		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСозданныеобъекты

// Процедура - обработчик события "НачалоВыбора" поля ввода "СозданныйОбъект" 
// табличного поля "СозданныеОбъекты".
// 
&НаКлиенте
Процедура СозданныеОбъектыСозданныйОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - действие команды "КомандаЗагрузить".
// 
&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ЗагрузитьДанные();
	
КонецПроцедуры

// Процедура - действие команды "КомандаНастройки".
// Открываем форму настроек.
// 
&НаКлиенте
Процедура КомандаНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийОбъект",Объект);
	
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	Оповещение = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.бит_ЗагрузкаПроформ.Форма.ФормаНастройкиУправляемая",ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОкна);
	
КонецПроцедуры

// Процедура обработчик оповещения "НастройкиЗавершение".
// 
// Параметры:
// Рез - Структура.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура НастройкиЗавершение(Рез, ДополнительныеДанные) Экспорт

	Если ТипЗнч(Рез) = Тип("Структура") И Рез.Команда = "ОК" Тогда
		
		ПрименитьНастройкиОбработки(Рез);
		
	КонецЕсли; 
	
КонецПроцедуры	// НастройкиЗавершение

// Процедура - действие команды "ЗагруженныеОбъектыУстановитьВсе".
// 
&НаКлиенте
Процедура ЗагруженныеОбъектыУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.СозданныеОбъекты, "Выполнять", 1);
	
КонецПроцедуры

// Процедура - действие команды "ЗагруженныеОбъектыСнятьВсе".
// 
&НаКлиенте
Процедура ЗагруженныеОбъектыСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.СозданныеОбъекты, "Выполнять", 0);
	
КонецПроцедуры

// Процедура - действие команды "ЗагруженныеОбъектыИнвертировать".
// 
&НаКлиенте
Процедура ЗагруженныеОбъектыИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.СозданныеОбъекты, "Выполнять", 2);
	
КонецПроцедуры

// Процедура - действие команды "ЗагруженныеОбъектыУдалить".
// 
&НаКлиенте
Процедура ЗагруженныеОбъектыУдалить(Команда)
	
    Если Объект.СозданныеОбъекты.Количество() = 0 Тогда
        Возврат
    КонецЕсли;
    
    ТекстВопроса = НСтр("ru = 'Удалить объекты без возможности восстановления?'");
    Оповещение = Новый ОписаниеОповещения("ВопросОбУдаленииОбъектовЗавершение", ЭтотОбъект); 
    ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
КонецПроцедуры

// Процедура - обработчик оповещения "ВопросОбУдаленииОбъектовЗавершение".
// 
&НаКлиенте
Процедура ВопросОбУдаленииОбъектовЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если НЕ  Ответ = КодВозвратаДиалога.Да Тогда
	    Возврат;
	КонецЕсли;
	
	УдалитьЗагруженныеОбъекты();
	
КонецПроцедуры // ВопросОбУдаленииОбъектовЗавершение()
 
// Процедура - действие команды "ЗагруженныеОбъектыОчистить".
// 
&НаКлиенте
Процедура ЗагруженныеОбъектыОчистить(Команда)
	
	Если Объект.СозданныеОбъекты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Список созданных объектов будет очищен. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросОбОчисткеСозданныхОбъектовЗавершение", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения "ВопросОбОчисткеСозданныхОбъектовЗавершение".
// 
&НаКлиенте
Процедура ВопросОбОчисткеСозданныхОбъектовЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.СозданныеОбъекты.Очистить();
	КонецЕсли;

КонецПроцедуры // ВопросОбОчисткеСозданныхОбъектовЗавершение()
 
// Процедура - действие команды "ЗагруженныеОбъектыОчистить".
// 
&НаКлиенте
Процедура ДанныеЗагрузкиУстановитьВсе(Команда)
	
	ИзменитьФлажки(ДеревоДанные, 1);
	
КонецПроцедуры

// Процедура - действие команды "ДанныеЗагрузкиСнятьВсе".
// 
&НаКлиенте
Процедура ДанныеЗагрузкиСнятьВсе(Команда)
	
	ИзменитьФлажки(ДеревоДанные, 0);
	
КонецПроцедуры

// Процедура - действие команды "ДанныеЗагрузкиИнвертировать".
// 
&НаКлиенте
Процедура ДанныеЗагрузкиИнвертировать(Команда)
	
	ИзменитьФлажки(ДеревоДанные, 2);
	
КонецПроцедуры

// Процедура - действие команды "КомандаОбновить".
// 
&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	УправлениеДоступностьюЭлементов(Ложь);
	ОбновитьДеревоДанные();
	
КонецПроцедуры

// Процедура - действие команды "СохранитьНастройки".
// 
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	СохранитьНастройки();
	
КонецПроцедуры

// Процедура - действие команды "ВосстановитьНастройки".
// 
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ВосстановитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрочиеСерверныеПроцедурыИФункции

// Процедура заполняет кэш значений, для последующего использования на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("НастраиваемыйОбъект"	, "Обработка.бит_ЗагрузкаПроформ");
	
	// Перечисления
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСохраненныхНастроек);
	КэшПеречисления.Вставить("бит_ТипыСохраненныхНастроек",ТекПеречисление);
	
	фКэшЗначений.Вставить("Перечисления",КэшПеречисления);
	
КонецПроцедуры // ЗаполнитьКэшЗначений() 

// Процедура заполняет в модели документа Дату и НомерПроформы.
// 
// Параметры:
//  МодельДокумента  - Структура.
//  ПсевдоМетаданные - Структура;
//
&НаСервере
Процедура ЗаполнитьНомерДату(МодельДокумента, ПсевдоМетаданные)
	
	Если НЕ МодельДокумента.Свойство("НомерПроформы") Тогда
		
		МетаРеквизит = ПсевдоМетаданные.СтандартныеРеквизиты.Найти("НомерПроформы");
		ТекЗнч = бит_ПроформыКлиентСервер.ЗагруженноеЗначение("", МетаРеквизит, "", "");
		МодельДокумента.Вставить("НомерПроформы", ТекЗнч);
		
	КонецЕсли; 
	
	Если МодельДокумента.Свойство("Дата") Тогда
		
		ДатаДок = МодельДокумента.Дата.Значение; 
		Если НЕ ЗначениеЗаполнено(ДатаДок) Тогда
			
			ДатаДок = ТекущаяДата();
			МодельДокумента.Дата.Значение = ДатаДок;
			
		КонецЕсли; 
		
	Иначе	
		
		ДатаДок = ТекущаяДата();
		МетаРеквизит = ПсевдоМетаданные.СтандартныеРеквизиты.Найти("Дата");			
		ТекЗнч = бит_ПроформыКлиентСервер.ЗагруженноеЗначение(Формат(ДатаДок,"ДФ=dd.MM.yyyy"), МетаРеквизит, "", ДатаДок);
		МодельДокумента.Вставить("Дата", ТекЗнч);
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьНомерДату() 

// Процедура распознает данные, загруженные из Эксель, и записывает в проформы. 
// 
// Параметры:
//  КоллекцияДанныхОбщ - Структура.
// 
&НаСервере
Процедура ОбработатьЗагруженныеДанные(Знач КоллекцияДанныхОбщ)
	
	Для каждого КиЗ Из КоллекцияДанныхОбщ Цикл
		
		КомплектДанных = КиЗ.Значение;
		
		СпискиИсточники  = КомплектДанных.СпискиИсточники;
		ПсевдоМетаданные = КомплектДанных.ПсевдоМетаданные;
		МодельДокумента  = КомплектДанных.МодельДокумента;
		
		Документы.бит_Проформы.РаспознатьДанные(МодельДокумента, ПсевдоМетаданные, СпискиИсточники);
		
		ЗаполнитьНомерДату(МодельДокумента, ПсевдоМетаданные);
		
		НайденнаяПроформа = Документы.бит_Проформы.ПустаяСсылка();
		Если ЗначениеЗаполнено(МодельДокумента.НомерПроформы.Значение) Тогда
		
				
			НайденнаяПроформа = Документы.бит_Проформы.НайтиПроформуПоНомеру(КомплектДанных.ВидПроформы
			                                                                  , МодельДокумента.НомерПроформы.Значение
																			  , МодельДокумента.Дата.Значение
																			  , Перечисления.бит_НазначенияПроформ.ФормаСбораДанных
																			  , "НомерПроформы");
			
			
		
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(НайденнаяПроформа) Тогда
		
			ДокОбъект = НайденнаяПроформа.ПолучитьОбъект();
			
		Иначе
			
			ДокОбъект = Документы.бит_Проформы.СоздатьДокумент();
		
		КонецЕсли; 
		
		флНовый = ?(ЗначениеЗаполнено(ДокОбъект.Ссылка), Ложь, Истина);
		
		Если НЕ флНовый И НЕ Объект.РазрешитьПерезапись Тогда
			
			ТекстСообщения = НСтр("ru = 'Проформа вида ""%1%"" № вх. %2% от %3% была создана ранее. Перезапись запрещена. 
			                         |Для разрешения перезаписи установите флаг ""Разрешить перезапись"" в настройках обработки.'");
									 
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
			                                                                             , КомплектДанных.ВидПроформы
																						 , МодельДокумента.НомерПроформы.Значение
																						 , МодельДокумента.Дата.Значение);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Продолжить;
		
		КонецЕсли; 
		
		ФиксированныеРеквизиты = Новый СписокЗначений;
		Документы.бит_Проформы.СписокФиксированныеРеквизиты(ФиксированныеРеквизиты);
		
		// Заполнение данных документа
		
		// Заполнение реквизитов шапки шапки
		ДокОбъект.ДанныеШапки.Очистить();		
		Для каждого МетаРеквизит Из ПсевдоМетаданные.Реквизиты Цикл
			
			ЗагруженныйЭлемент = Неопределено;
			Имя = МетаРеквизит.Имя;
			Если МодельДокумента.Свойство(МетаРеквизит.Имя, ЗагруженныйЭлемент) Тогда
				
				ЗначениеРеквизита = ЗагруженныйЭлемент.Значение;
				
				Если бит_ПроформыКлиентСервер.ЭтоФиксированныйРеквизит(Имя, ФиксированныеРеквизиты)  Тогда
					
					ДокОбъект[Имя] = ЗначениеРеквизита;
					
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				
					НоваяСтрока = ДокОбъект.ДанныеШапки.Добавить();
					НоваяСтрока.ИмяРеквизита = Имя;
					НоваяСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
				
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; // Реквизиты
		
		// Стандартные реквизиты
		ДокОбъект.ВидПроформы = КомплектДанных.ВидПроформы;
		ДокОбъект.Назначение  = Перечисления.бит_НазначенияПроформ.ФормаСбораДанных;
		Для каждого МетаРеквизит Из ПсевдоМетаданные.СтандартныеРеквизиты Цикл
			
			Если МетаРеквизит.Имя = "Номер" Тогда
			
				Продолжить;
			
			КонецЕсли; 
			
			ЗагруженныйЭлемент = Неопределено;
			Имя = МетаРеквизит.Имя;
			Если МодельДокумента.Свойство(МетаРеквизит.Имя, ЗагруженныйЭлемент) Тогда
				
				ЗначениеРеквизита = ЗагруженныйЭлемент.Значение;
					
				ДокОбъект[Имя] = ЗначениеРеквизита;
				
			КонецЕсли; 
			
		КонецЦикла; 
		Если флНовый Тогда
			
			ДокОбъект.УстановитьНовыйНомер();
			
		КонецЕсли; 
		
		// Обработка ситуации незаполненной валюты и курсов.
		Если НЕ ЗначениеЗаполнено(ДокОбъект.ВалютаДокумента) Тогда
		
			ДокОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			ДокОбъект.КурсДокумента   = 1;
			ДокОбъект.КратностьДокумента = 1;
		
		КонецЕсли; 
		
		Если ДокОбъект.КурсДокумента = 0 ИЛИ ДокОбъект.КратностьДокумента = 0 Тогда
			
			СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ДокОбъект.ВалютаДокумента, ДокОбъект.Дата);
			ДокОбъект.КурсДокумента = СтрКурса.Курс;
			ДокОбъект.КратностьДокумента = СтрКурса.Кратность;
			
		КонецЕсли; 
		
		// Заполнение табличных частей
	    ТабДанныеТабличныхЧастей = Документы.бит_Проформы.КонструкторТаблицыХраненияТабЧасти();		
		Для каждого КиЗ Из ПсевдоМетаданные.ТабличныеЧасти Цикл
			
			МетаТабЧасть = КиЗ.Значение;
			
			Если МодельДокумента.Свойство(МетаТабЧасть.Имя) Тогда
				
				ТабДанные = МодельДокумента[МетаТабЧасть.Имя].ТаблицаДанных;
				Колонки = ТабДанные.Колонки;
				
				инд = 1;
				Для каждого СтрокаТаблицы Из ТабДанные Цикл
					
					Для каждого МетаРеквизит Из МетаТабЧасть.Реквизиты Цикл
					
						
						Если Колонки.Найти(МетаРеквизит.Имя) = Неопределено Тогда
						
							Продолжить;
						
						КонецЕсли; 
						
						ЗначениеРеквизита = СтрокаТаблицы[МетаРеквизит.Имя];
						
						Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							
							НоваяСтрока = ТабДанныеТабличныхЧастей.Добавить();
							НоваяСтрока.ИмяТабличнойЧасти  = МетаТабЧасть.Имя;
							НоваяСтрока.НомерСтрокиТаблицы = инд;
							НоваяСтрока.ИмяРеквизита       = МетаРеквизит.Имя;
							НоваяСтрока.ЗначениеРеквизита  = ЗначениеРеквизита;
							
						КонецЕсли; 
					
					КонецЦикла;  // МетаТабЧасть.Реквизиты
					
					инд = инд+1;
				КонецЦикла; // ТабДанные
				
			КонецЕсли; 
			
		КонецЦикла; // ТабЧасти
		
		ДокОбъект.СохранитьДанныеТабЧастей(ТабДанныеТабличныхЧастей);
		
		ТекРежимЗаписи = ?(Объект.РежимЗаписи="Проведение",РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);		
		
		Если ДокОбъект.Проведен Тогда
		
			 ТекРежимЗаписи = РежимЗаписиДокумента.Проведение;
		
		КонецЕсли; 
		
		флДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОбъект, ТекРежимЗаписи, ,Объект.РежимСообщений);
		
		Если флНовый И флДействиеВыполнено Тогда
		
			 НоваяСтрока = Объект.СозданныеОбъекты.Добавить();
			 НоваяСтрока.СозданныйОбъект = ДокОбъект.Ссылка;
		
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьЗагруженныеДанные() 

// Процедура управляет доступностью элементов формы. 
// 
// Параметры:
//  Доступность - Булево.
// 
&НаСервере
Процедура УправлениеДоступностьюЭлементов(Доступность)
	
	Элементы.ФормаКомандаЗагрузить.Доступность = Доступность;	
	Элементы.Путь.Доступность = Доступность;
	Элементы.ДеревоДанныеКомандаОбновить.Доступность = Доступность;
	
КонецПроцедуры // УправлениеДоступностьюЭлементов()

// Процедура обновляет ДеревоДанные.
// 
// Параметры:
//  МодельДерева - Массив
// 
&НаСервере
Процедура ОбновитьДерево(МодельДерева)

	ДеревоДанные.ПолучитьЭлементы().Очистить();
	
	КоллекцияВерх = ДеревоДанные.ПолучитьЭлементы();
	
	Для каждого МодельВерх Из МодельДерева Цикл
		
		ЭлементВерх = КоллекцияВерх.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементВерх, МодельВерх);
		
		КоллекцияЛисты = ЭлементВерх.ПолучитьЭлементы();
		
		Для каждого МодельЛист Из МодельВерх.Подчиненные Цикл
			
			Если ЗначениеЗаполнено(МодельЛист.ИмяПроформы) Тогда
				
				ВидПроформы = Справочники.бит_ВидыПроформ.НайтиПоРеквизиту("Имя",МодельЛист.ИмяПроформы);
				
				Если ЗначениеЗаполнено(ВидПроформы) Тогда
					
					ЭлементЛист = КоллекцияЛисты.Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементЛист, МодельЛист);
					ЭлементЛист.ВидПроформы = ВидПроформы;
					
					Если НЕ КоллекцияПсевдоМета.Свойство(МодельЛист.ИмяПроформы) Тогда
					
						ПсевдоМета = Справочники.бит_ВидыПроформ.ЭмулироватьМетаданные(ВидПроформы);
						КоллекцияПсевдоМета.Вставить(МодельЛист.ИмяПроформы, ПсевдоМета);
					
					КонецЕсли; 
					
				Иначе	
					
					ТекстСообщения = НСтр("ru = 'Не удалось найти вид проформы по имени %1%.'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, МодельЛист.ИмяПроформы);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если КоллекцияЛисты.Количество() = 0 Тогда
		
			ЭлементВерх.Выполнять = Ложь;
		
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры // ОбновитьДерево()

// Процедура применяет новые настройки обработки. 
// 
// Параметры:
//  СтрПар - Структура.
// 
&НаСервере
Процедура ПрименитьНастройкиОбработки(СтрПар)
	
	ОбрОбъект = ДанныеФормыВЗначение(СтрПар.ТекущийОбъект,Тип("ОбработкаОбъект.бит_ЗагрузкаПроформ"));
	ЗначениеВДанныеФормы(ОбрОбъект,Объект);
	
КонецПроцедуры // ПрименитьНастройкиОбработки()

// Процедура удаляет загруженные объекты.
// 
&НаСервере
Процедура УдалитьЗагруженныеОбъекты()
	
	// На только что созданные объекты не может быть ссылок. 
	// При необходимости, если были загружены неверные данные можно их удалить.
	
	КоличествоСтрок = Объект.СозданныеОбъекты.Количество();
	
	Для Ном = 1 По КоличествоСтрок Цикл
		
		ТекНом    = КоличествоСтрок-Ном;
		ТекСтрока = Объект.СозданныеОбъекты[ТекНом];
		
		Если ТекСтрока.Выполнять Тогда
			
			Попытка
				
				// Удаление объекта
				СтрокаДляСообщения = Строка(ТекСтрока.СозданныйОбъект);
				ТекОбъект = ТекСтрока.СозданныйОбъект.ПолучитьОбъект();
				ТекОбъект.Удалить();
				
				// Удаление строки ТабЧасти
				Объект.СозданныеОбъекты.Удалить(ТекСтрока);
				
				ТекстСообщения = НСтр("ru = 'Удален объект %1%.'");
			    ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаДляСообщения);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			Исключение
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла; // КоличествоСтрок
	
КонецПроцедуры // УдалитьЗагруженныеОбъекты()

#КонецОбласти

#Область СохранениеВосстановлениеНастроек

// Процедура открывает форму сохранения настроек.
// 
&НаКлиенте
Процедура СохранитьНастройки()

	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки",СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки",фКэшЗначений.Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект",фКэшЗначений.НастраиваемыйОбъект);
	ПараметрыФормы.Вставить("СохраненнаяНастройка", ТекущаяНастройка);
	
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОкна);

КонецПроцедуры // СохранитьНастройки()

// Процедура обработчик оповещения "СохранитьНастройкиЗавершение".
// 
// Параметры:
// РезНастройка - Произвольный.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура СохранитьНастройкиЗавершение(РезНастройка, ДополнительныеДанные) Экспорт

	Если ЗначениеЗаполнено(РезНастройка) Тогда
	
		ТекущаяНастройка = РезНастройка;
		УстановитьЗаголовокФормы();
	
	КонецЕсли; 
	
КонецПроцедуры	// СохранитьНастройкиЗавершение

// Процедура открывает форму восстановления настроек.
// 
&НаКлиенте
Процедура ВосстановитьНастройки()

	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки",фКэшЗначений.Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект",фКэшЗначений.НастраиваемыйОбъект);
	
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНастройкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки",ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОкна);

КонецПроцедуры // ВосстановитьНастройки()

// Процедура обработчик оповещения "ВосстановитьНастройкиЗавершение".
// 
// Параметры:
// ВыбНастройка - Произвольный.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВосстановитьНастройкиЗавершение(ВыбНастройка, ДополнительныеДанные) Экспорт

	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		ТекущаяНастройка = ВыбНастройка;
		ПрименитьНастройки(ВыбНастройка);
	
	КонецЕсли; 
	
КонецПроцедуры	// ВосстановитьНастройкиЗавершение

// Функция создает структуру, хранящую настройки панели индикаторов.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	Исключения = Новый Массив;
	Исключения.Добавить("РежимВыбора");
	
	СтруктураНастроек = Новый Структура;

	Для каждого МетаРеквизит Из Метаданные.Обработки.бит_ЗагрузкаПроформ.Реквизиты Цикл
		
		Если НЕ Исключения.Найти(МетаРеквизит.Имя) = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		СтруктураНастроек.Вставить(МетаРеквизит.Имя, Объект[МетаРеквизит.Имя]);
	
	КонецЦикла; 
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройку к панели индикаторов.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Для каждого КиЗ Из СтруктураНастроек Цикл
			
			Имя = КиЗ.Ключ;
			Знч = КиЗ.Значение;
			
			Если бит_РаботаСМетаданными.ЕстьРеквизит(Имя, Метаданные.Обработки.бит_ЗагрузкаПроформ) Тогда
			
				Объект[Имя] = Знч;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура устанавливает настройку либо из последних использованных, либо из настройки по умолчанию.
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	// Получим настройку по - умолчанию и последнюю использованну.
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);

	// Установим настройку
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда
		ПрименитьНастройки(НастройкаПоУмолчанию);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура выполняет загрузку данных из Эксель. На клиенте выполняется чтение данных из Эксель, 
// затем для обработки загруженных данных вызывается серверная процедура ОбработатьЗагруженныеДанные(). 
// 
&НаКлиенте
Процедура ЗагрузитьДанные()

	Отказ = Ложь;
	
	ExcelApp = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ);
	
	Если Отказ Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	КоллекцияДанныхОбщ = Новый Соответствие;
	
	КоллекцияВерх = ДеревоДанные.ПолучитьЭлементы();
	
	Для каждого ЭлементВерх Из КоллекцияВерх Цикл
	
		Если НЕ ЭлементВерх.Выполнять Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		КоллекцияЛисты = ЭлементВерх.ПолучитьЭлементы();
		
		ЛистыКЗагрузке = Новый Массив;
		
		Отказ = Ложь;
		ИмяФайла = ЭлементВерх.ИмяФайла;
		ExcelWorkbook = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(ExcelApp, ИмяФайла, Отказ); 
		
		СпискиИсточники = бит_ПроформыКлиентСервер.ПрочитатьСпискиИсточники(ExcelWorkbook);
		
		
		Для каждого ЭлементЛист Из КоллекцияЛисты Цикл
			
			Если НЕ ЭлементЛист.Выполнять ИЛИ НЕ ЗначениеЗаполнено(ЭлементЛист.ВидПроформы) Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			
			Отказ = Ложь;				
			Sheet = бит_ОбменДаннымиЭксельКлиентСервер.GetExcelSheet(ExcelWorkbook, ЭлементЛист.ИмяЛиста, Отказ);
			
			Если НЕ Отказ Тогда
				
				ИмяПроформы = String(Sheet.Cells(1,1).Value);
				ВидЛиста    = String(Sheet.Cells(2,1).Value);
				ИмяТабЧасти = String(Sheet.Cells(3,1).Value);
				
				Ключ = ЭлементЛист.ИмяФайла+"_"+ИмяПроформы;
				
				КомплектДанных = КоллекцияДанныхОбщ[Ключ];
				
				Если КомплектДанных = Неопределено Тогда
					
					КомплектДанных = Новый Структура;
					КомплектДанных.Вставить("ИмяПроформы", ИмяПроформы);
					
					ПсевдоМета = КоллекцияПсевдоМета[ИмяПроформы];
					КомплектДанных.Вставить("ПсевдоМетаданные", ПсевдоМета);
					КомплектДанных.Вставить("ВидПроформы"     , ЭлементЛист.ВидПроформы); 
					КомплектДанных.Вставить("СпискиИсточники" , СпискиИсточники);
					КомплектДанных.Вставить("МодельДокумента" , Новый Структура);
					
					КоллекцияДанныхОбщ.Вставить(Ключ, КомплектДанных);
					
				КонецЕсли; 
				
				Если ВидЛиста = "Шапка" Тогда
					
					бит_ПроформыКлиентСервер.ПрочитатьДанныеШапки(ExcelWorkbook, Sheet, КомплектДанных.ПсевдоМетаданные, ИмяПроформы, КомплектДанных.МодельДокумента);
					
				КонецЕсли; 
				
				Если НЕ ПустаяСтрока(ИмяТабЧасти) Тогда
					
					 МетаТабЧасть = Неопределено;
					 КомплектДанных.ПсевдоМетаданные.ТабличныеЧасти.Свойство(ИмяТабЧасти, МетаТабЧасть);
					 
					 Если НЕ МетаТабЧасть = Неопределено Тогда
					 
					 	 ДанныеТЧ = бит_ПроформыКлиентСервер.ПрочитатьДанныеТабЧасти(Sheet, МетаТабЧасть, ИмяПроформы); 
						 КомплектДанных.МодельДокумента.Вставить(МетаТабЧасть.Имя, ДанныеТЧ);
					 
					 КонецЕсли; 
					 
				КонецЕсли; 

				
			КонецЕсли; 
			
			
		КонецЦикла; // По листам
		
		бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelWorkbook, Ложь);
		
	КонецЦикла; // По файлам
	
	бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(ExcelApp);
	
	ОбработатьЗагруженныеДанные(КоллекцияДанныхОбщ);
	
	ТекстСообщения =  НСтр("ru = 'Загрузка завершена.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры // ЗагрузитьДанные()

// Процедура-обработчик ожидания выбора пути к каталогу с данными. 
// 
&НаКлиенте
Процедура ОжиданиеВыбораПути()
		
	ОбновитьДеревоДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоДанные()

	Если ПустаяСтрока(Объект.Путь) Тогда
		УправлениеДоступностьюЭлементов(Истина);
		Возврат;	
	КонецЕсли; 
	
	ТекстСостояние = НСтр("ru = 'Анализ файлов Excel...'");
	Состояние(ТекстСостояние);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДеревоДанныеЗавершение", ЭтотОбъект); 
	
	Если Объект.РежимВыбора = 1 Тогда
		МассивФайлов = Новый Массив;
		Для каждого ТекПуть Из ВыбранныеФайлы Цикл
			ТекФайл = Новый Файл(ТекПуть);
			МассивФайлов.Добавить(ТекФайл);
		КонецЦикла; 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, МассивФайлов);
	Иначе	
		НачатьПоискФайлов(ОписаниеОповещения, Объект.Путь, "*.xlsx", Истина); 
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьДеревоДанныеЗавершение(МассивФайлов, ДополнительныеПараметры) Экспорт
	
	ИмяИсточникСписков = бит_ПроформыКлиентСервер.ListSourceSheetName();
	
	Если ТипЗнч(МассивФайлов) = Тип("Массив") И МассивФайлов.Количество() > 0 Тогда
		
		Отказ = Ложь; 
		
		ExcelApp = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		
		МодельДерева = Новый Массив;
		Для каждого ТекФайл Из МассивФайлов Цикл
			
			Если ТекФайл.Существует() Тогда
				
				ExcelWorkBook = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(ExcelApp, ТекФайл.ПолноеИмя, Отказ);
				
				Если НЕ Отказ Тогда
					
					МассивМоделейСтрок = Новый Массив;
					
					Для каждого Sheet Из ExcelApp.Sheets Цикл
						
						ИмяЛиста = Sheet.Name;
						Если ИмяЛиста = ИмяИсточникСписков Тогда
							
							Продолжить;
							
						КонецЕсли; 
						
						ИмяПроформы = String(Sheet.Cells(1,1).Value);
						МодельСтроки = МодельСтрокиДерева(ТекФайл.ПолноеИмя, ИмяЛиста, ИмяЛиста, ИмяПроформы, Новый Массив);
						МассивМоделейСтрок.Добавить(МодельСтроки);
						
					КонецЦикла; 
					
					МодСтрокаВерх = МодельСтрокиДерева(ТекФайл.ПолноеИмя, "", ТекФайл.ПолноеИмя, "", МассивМоделейСтрок);
					
					МодельДерева.Добавить(МодСтрокаВерх);
					
				КонецЕсли; 
				
				бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelWorkbook, Ложь);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		ОбновитьДерево(МодельДерева);
		бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоДанные, ДеревоДанные.ПолучитьЭлементы(), Истина);
		
		бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(ExcelApp);
		
	КонецЕсли; 
	
	УправлениеДоступностьюЭлементов(Истина);

КонецПроцедуры

// Процедура изменяет флажки в ДеревеДанные.
// 
// Параметры:
//  ЭлементВерх  - ДанныеФормыЭлементДерева.
//  КодДействия  - Число: 0-Снять,1 - Установить, 2-Инвертировать.
// 
&НаКлиенте
Процедура ИзменитьФлажки(ЭлементВерх,КодДействия)
	
	Коллекция = ЭлементВерх.ПолучитьЭлементы();
	
	Для каждого ТекЭлемент Из Коллекция Цикл
		
		Если КодДействия = 0 Тогда
			
			ТекЭлемент.Выполнять = Ложь;
			
		ИначеЕсли КодДействия = 1 Тогда
			
			ТекЭлемент.Выполнять = Истина;
			
		ИначеЕсли КодДействия = 2 Тогда	
			
			ТекЭлемент.Выполнять = Не ТекЭлемент.Выполнять;
			
		КонецЕсли; 
		
		ИзменитьФлажки(ТекЭлемент,КодДействия);
		
	КонецЦикла; 
	
КонецПроцедуры // ИзменитьФлажки()

// Процедура устанавливает заголовок формы.
// 
&НаКлиенте
Процедура УстановитьЗаголовокФормы()

	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтотОбъект.Заголовок = "Загрузка форм сбора данных ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтотОбъект.Заголовок = "Загрузка форм сбора данных";
		
		
	КонецЕсли; 

КонецПроцедуры // УстановитьЗаголовокФормы()

// Функция-конструктор структуры, моделирующей строку дерева.
// 
// Параметры:
//  ИмяФайла - Строка
//  ИмяЛиста - Строка
//  Представление - Строка
//  ИмяПроформы - Строка
//  Подчиненные - Массив
// 
// Возвращаемое значение:
//  МодельСтроки - Структура.
// 
&НаКлиентеНаСервереБезКонтекста
Функция МодельСтрокиДерева(ИмяФайла, ИмяЛиста, Представление, ИмяПроформы, Подчиненные)

	МодельСтроки = Новый Структура("Выполнять, ИмяФайла, ИмяЛиста, Представление, ИмяПроформы, Подчиненные"
	                                 , Истина
									 , ИмяФайла
									 , ИмяЛиста
									 , Представление
									 , ИмяПроформы
									 , Подчиненные);
	
	

	Возврат МодельСтроки;
	
КонецФункции // МодельСтрокиДерева()

#КонецОбласти

#КонецОбласти

