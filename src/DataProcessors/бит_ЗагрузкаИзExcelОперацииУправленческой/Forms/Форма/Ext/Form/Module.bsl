
&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Команда)
	//Если НЕ ЗначениеЗаполнено(ЭлементыФормы.Организация.Значение) Тогда
	//		Сообщить("Заполните организацию");
	//		Возврат;
	//КонецЕсли;
	СоздатьДокументСАналитикой(Объект.ПутьКФайлу);
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл для считывания";
	ДиалогОткрытияФайла.МножественныйВыбор = ЛОЖЬ;
	ДиалогОткрытияФайла.Фильтр = "Excel (*.xls;*.xlsx)|*.xls;*.xlsx";
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ДиалогОткрытияФайла", ДиалогОткрытияФайла)));
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        ПолныйПуть = ДиалогОткрытияФайла.ПолноеИмяФайла;
    	Объект.ПутьКФайлу = ПолныйПуть;
    КонецЕсли;

КонецПроцедуры

//Процедура бит_ОперацияУправленческийПриИзменении(Элемент)
//	Если  не ЗначениеЗАполнено(Элементыформы.бит_ОперацияУправленческий.Значение) тогда
//		Элементыформы.Организация.Доступность=Истина;
//	иначе	
//		Элементыформы.Организация.Значение=справочники.Организации.ПустаяСсылка();
//		Элементыформы.Организация.Доступность=Ложь;
//	КОнецЕсли;	
//КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументСАналитикой(ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		ПоказатьПредупреждение(Неопределено, "Файл не существует!", 5, "Предупреждение");
		Возврат;
	КонецЕсли;
	
	//ОК+ Аверьянова 17.10.14 #AT-1216236# запрет во избежание затирания проводок по просьбе Гузель
	Если ЗначениеЗаполнено(Объект.бит_ОперацияУправленческий) И ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.бит_ОперацияУправленческий, "ПометкаУдаления") Тогда
		ПоказатьПредупреждение(Неопределено, "Выбранная " +Объект.бит_ОперацияУправленческий + " помечена на удаление!!!" +
		                                " Загрузка в помеченный на удаление документ НЕВОЗМОЖНА");
		Возврат;
	КонецЕсли;	
    //ОК- Аверьянова
	
	Попытка
		Эксель = Новый COMОбъект("Excel.Application");
	Исключение
		Сообщить("Не создать объект");
		Возврат;
	КонецПопытки;
	
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла); 
	Лист = Книга.WorkSheets(1);
	ВсегоСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	мСтроки = Новый Массив;
	Для Строка = 2 по ВсегоСтрок Цикл
		
		СтруктураКолонок = Новый Структура;
		СтруктураКолонок.Вставить("Строка", Строка);
		Для ъ=1 ПО 16 Цикл 
			СтруктураКолонок.Вставить("_"+ъ, Лист.Cells(Строка,ъ).Value);
		КонецЦикла;
		мСтроки.Добавить(СтруктураКолонок);
		
	КонецЦикла;
	Эксель.Application.Quit();
	
	СоответствиеОрганизацияДокумент = СоздатьДокументСАналитикойНаСервере(ИмяФайла, мСтроки);
	
	Если СоответствиеОрганизацияДокумент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Объект.бит_ОперацияУправленческий) Тогда 
		ПараметрыФормы.Вставить("Ключ", Объект.бит_ОперацияУправленческий);
	КонецЕсли;
	Для Каждого Док из СоответствиеОрганизацияДокумент Цикл 
		ПараметрыФормы.Вставить("бит_ЗагрузкаИзExcel", Док);
		ОткрытьФорму("Документ.бит_ОперацияУправленческий.ФормаОбъекта", ПараметрыФормы, , Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументСАналитикойНаСервере(ИмяФайла, мСтроки)
	//bit auavseenkov  
	СоответствиеОрганизацияДокумент = Новый Соответствие;
	//}
	Для Каждого ТекЭлемент ИЗ мСтроки Цикл 
		СтруктураДанных = Новый Структура("Организация, РегистрБухгалтерии, ВидОперации, Содержание, Дата");
		//bit auavseenkov 
		Объект.Организация =  Справочники.Организации.НайтиПоКоду(ТекЭлемент["_2"]);
		Если не ЗначениеЗаполнено(Объект.Организация) Тогда 
			Сообщить("Не найдена организация с кодом " + ТекЭлемент["_2"]);
			Возврат Неопределено;
		КонецЕсли;

		ДокументУправленческий = СоответствиеОрганизацияДокумент.Получить(Объект.Организация);
		Если  ДокументУправленческий = Неопределено Тогда 
		//}	
			//ОК Калинин М. 290513
			Если значениеЗаполнено(Объект.бит_ОперацияУправленческий) тогда
				ОперацияУправленческийНовый=Объект.бит_ОперацияУправленческий.ПолучитьОбъект();
				//	ОперацияУправленческийНовый.Номер="";
				//ОрганизацияИзОбработки = ОперацияУправленческийНовый.Организация; 
				Если Объект.Организация <> Объект.бит_ОперацияУправленческий.Организация Тогда 
					Сообщить("Организация из документа: " + Объект.бит_ОперацияУправленческий + ", не соответствует организации в файле: " + Объект.Организация);
					Возврат Неопределено;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтруктураДанных, Объект.бит_ОперацияУправленческий);
				
			иначе	
				////ОК Калинин М. 
				ОперацияУправленческийНовый = Документы.бит_ОперацияУправленческий.СоздатьДокумент();
				//bit auavseenkov 
								
				СтруктураДанных.Вставить("Организация", Объект.Организация);
				//}
			конецЕсли;	                                              	
			
			//bit auavseenkov 
			СоответствиеОрганизацияДокумент.Вставить(Объект.Организация,СтруктураДанных);
			//}
 	
			
			СтруктураДанных.Вставить("РегистрБухгалтерии", Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024"));
			СтруктураДанных.Вставить("ВидОперации", ВидОперации);
			
			//НашаФорма = ОперацияУправленческийНовый.ПолучитьФорму("ФормаДокумента");
			//ОК Калинин М. 121012
			СтруктураДанных.Вставить("Содержание", "Загружено из Excel");
			//ОК Калинин М. 	
			
			//ОперацияУправленческийНовый.Движения.бит_Дополнительный_2.Прочитать();
			СтруктураДанных.Вставить("ТаблицаПроводок", ОперацияУправленческийНовый.Движения.бит_Дополнительный_2.Выгрузить());
			
			
			Если ЗначениеЗаполнено(Объект.Дата) Тогда
				СтруктураДанных.Вставить("Дата", Объект.Дата);
			ИначеЕсли ЗначениеЗаполнено(ТекЭлемент["_1"]) И ТекЭлемент["_1"] <> Дата(1,1,1) Тогда
				СтруктураДанных.Вставить("Дата",  ТекЭлемент["_1"]);
			ИначеЕсли СтруктураДанных.Дата = Дата(1,1,1) Тогда
				Сообщить("В обработке и в файле загрузки не указана дата. Загрузка прервана.");
				Возврат Неопределено;
			КонецЕсли;
			//bit aavseenkov
		Иначе 
			 //ОперацияУправленческийНовый =  ДокументУправленческий;
			 //НашаФорма = ОперацияУправленческийНовый.ПолучитьФорму("ФормаДокумента");
			 //ТаблицаПроводок = НашаФорма.ЭлементыФормы.ТабличноеПолеДвижениябит_Дополнительный_2.Значение;			 
			 СтруктураДанных = ДокументУправленческий;
	    КонецЕсли;
		   //}
		   
		ТаблицаПроводок = СтруктураДанных.ТаблицаПроводок;
		
		Если  (ЗначениеЗаполнено(ТекЭлемент["_1"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_2"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_3"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_4"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_5"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_6"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_7"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_8"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_9"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_10"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_11"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_12"])
			ИЛИ ЗначениеЗаполнено(ТекЭлемент["_13"])) Тогда	
			
			Попытка
				Валюта = Справочники.Валюты.НайтиПоКоду(Строка(ТекЭлемент["_15"]));
			Исключение
				Сообщить("Для строки " + ТекЭлемент.Строка + " не удалось получить значение валюты")
			КонецПопытки;
			
			НоваяПроводка = ТаблицаПроводок.Добавить();
			НоваяПроводка.Активность = Истина;
			
			СчетДтБПроб = СтрЗаменить(Строка(ТекЭлемент["_3"]), Символы.НПП, "");
			СчетДт = ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду(СчетДтБПроб);
			
			Если СчетДт <> ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка() И СчетДт <> Неопределено Тогда
				НоваяПроводка.СчетДт = СчетДт;	
			Иначе
				Сообщить("В строке №" + ТекЭлемент.Строка + " файла " + ИмяФайла + " в поле ""СчетДт"" не найден код " + Строка(ТекЭлемент["_3"]));
			КонецЕсли;
			
			СчетКтБПроб = СтрЗаменить(Строка(ТекЭлемент["_8"]), Символы.НПП, "");
			СчетКт = ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду(СчетКтБПроб);
			Если СчетКт <> ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка() И СчетКт <> Неопределено Тогда
				НоваяПроводка.СчетКт = СчетКт;
			Иначе
				Сообщить("В строке №" + ТекЭлемент.Строка + " файла " + ИмяФайла + " в поле ""СчетКт"" не найден код " + Строка(ТекЭлемент["_8"]));
			КонецЕсли;
			
			НоваяПроводка.Период = ТекЭлемент["_1"];
			НоваяПроводка.СуммаМУ = ТекЭлемент["_13"];
			НоваяПроводка.СуммаРегл = ТекЭлемент["_13"];
			НоваяПроводка.СуммаУпр = ТекЭлемент["_13"];

			//ОК Калинин М. 121012
			//НоваяПроводка.Содержание = "Загружено из Excel";			
			НоваяПроводка.Содержание = ТекЭлемент["_16"];
			видоперЧ=ТекЭлемент["_14"];
			Если видоперЧ<>Неопределено тогда
				// БИТ AMerkulov 09012014 ++ /Обработка добавленных видов движений				
				//если (видоперЧ>=0 и видоперЧ<5) тогда
				Если (видоперЧ>=0 и видоперЧ<Перечисления.БИТ_ВидыДвиженияМСФО.Количество()-1) тогда
					НоваяПроводка.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.Получить(видоперЧ);	
				// БИТ AMerkulov --
				иначе				
					Сообщить("В строке №" + ТекЭлемент.Строка + " файла " + ИмяФайла+ " в поле Вид движ. не корректно!");	
				конецесли;	
			конецесли;
			//ОК Калинин М.
					
			Если Строка(ТекЭлемент["_14"]) <> "643" Тогда
				ЗапросКурса = Новый Запрос;
				ЗапросКурса.Текст = "ВЫБРАТЬ
				|	КурсыВалют.Курс
				|ИЗ
				|	РегистрСведений.КурсыВалют КАК КурсыВалют
				|ГДЕ
				|	КурсыВалют.Период = &Период
				|	И КурсыВалют.Валюта = &Валюта";
				//***БИТ***Теплова***(2012.04.11
				//ЗапросКурса.УстановитьПараметр("Период", НачалоДня(Дата));
				ЗапросКурса.УстановитьПараметр("Период", НачалоДня(СтруктураДанных.Дата));
				//***БИТ***Теплова***)
				ЗапросКурса.УстановитьПараметр("Валюта", Валюта);
				ВыборкаКурса = ЗапросКурса.Выполнить().Выбрать();
				Если ВыборкаКурса.Следующий() Тогда
					Курс = ВыборкаКурса.Курс;
				Иначе
					Курс = 0;
				КонецЕсли;
				
				Если СчетДт.Валютный И НЕ СчетКт.Валютный  Тогда
					Если Курс <> 0 Тогда
						НоваяПроводка.СуммаРегл = НоваяПроводка.СуммаРегл * Курс;
						НоваяПроводка.СуммаУпр  = НоваяПроводка.СуммаУпр * Курс;
						НоваяПроводка.СуммаМУ   = НоваяПроводка.СуммаМУ * Курс;
						НоваяПроводка.ВалютаДт  = Валюта;
						НоваяПроводка.ВалютнаяСуммаДт = ТекЭлемент["_13"];
					Иначе
						Сообщить("В строке " + Строка(ТекЭлемент.Строка-1) + " не заполнены СуммаМУ, СуммаУпр, СуммаРегл, т.к. на дату, указанную в обработке не введен курс");
						НоваяПроводка.СуммаРегл = 0;
						НоваяПроводка.СуммаУпр  = 0;
						НоваяПроводка.СуммаМУ   = 0;
					КонецЕсли;
					
				КонецЕсли;
				
				Если СчетКт.Валютный И НЕ СчетДт.Валютный Тогда
					Если Курс <> 0 Тогда
						НоваяПроводка.СуммаРегл = НоваяПроводка.СуммаРегл * Курс;
						НоваяПроводка.СуммаУпр  = НоваяПроводка.СуммаУпр * Курс;
						НоваяПроводка.СуммаМУ   = НоваяПроводка.СуммаМУ * Курс;
						НоваяПроводка.ВалютаКт  = Валюта;
						НоваяПроводка.ВалютнаяСуммаКт = ТекЭлемент["_13"];
					Иначе
						Сообщить("В строке " + Строка(ТекЭлемент.Строка-1) + " не заполнены СуммаМУ, СуммаУпр, СуммаРегл, т.к. на дату, указанную в обработке не введен курс");
						НоваяПроводка.СуммаРегл = 0;
						НоваяПроводка.СуммаУпр  = 0;
						НоваяПроводка.СуммаМУ   = 0;
					КонецЕсли;
					
				КонецЕсли;
				
				Если СчетДт.Валютный И СчетКт.Валютный  Тогда
					Если Курс <> 0 Тогда
						НоваяПроводка.СуммаРегл = НоваяПроводка.СуммаРегл * Курс;
						НоваяПроводка.СуммаУпр  = НоваяПроводка.СуммаУпр * Курс;
						НоваяПроводка.СуммаМУ   = НоваяПроводка.СуммаМУ * Курс;
						НоваяПроводка.ВалютаДт  = Валюта;
						НоваяПроводка.ВалютнаяСуммаДт = ТекЭлемент["_13"];
						НоваяПроводка.ВалютаКт  = Валюта;
						НоваяПроводка.ВалютнаяСуммаКт = ТекЭлемент["_13"];
					Иначе
						Сообщить("В строке " + Строка(ТекЭлемент.Строка-1) + " не заполнены СуммаМУ, СуммаУпр, СуммаРегл, т.к. на дату, указанную в обработке не введен курс");
						НоваяПроводка.СуммаРегл = 0;
						НоваяПроводка.СуммаУпр  = 0;
						НоваяПроводка.СуммаМУ   = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			//Получаем типы субконто
			ВидыСубконтоДт = СчетДт.ВидыСубконто;						
			ВидыСубконтоКт = СчетКт.ВидыСубконто;
			
			Для Каждого СубконтоДт Из ВидыСубконтоДт Цикл
				НомерСубконтоДт = СубконтоДт.НомерСтроки;
				ТипСубконтоДт = СубконтоДт.ВидСубконто.ТипЗначения.ПривестиЗначение();
				ИмяТипаСубконтоДт = СубконтоДт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Имя;
				Если Метаданные.Справочники.Содержит(СубконтоДт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные()) Тогда
					Если Справочники[СубконтоДт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Имя].НайтиПоКоду(СтрЗаменить(ТекЭлемент["_"+Строка(3+НомерСубконтоДт)], Символы.НПП, "")) = Справочники[СубконтоДт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Имя].ПустаяСсылка() И ТекЭлемент["_"+Строка(3+НомерСубконтоДт)] <> Неопределено Тогда
						Сообщить("В строке №" + ТекЭлемент.Строка + " файла " + ИмяФайла + " в поле СубконтоДт" + НомерСубконтоДт + " не найден код " + Строка(ТекЭлемент["_"+Строка(3+НомерСубконтоДт)]));
					Иначе
						НоваяПроводка["ВидСубконтоДт"+НомерСубконтоДт] = СубконтоДт.ВидСубконто;
						НоваяПроводка["СубконтоДт"+НомерСубконтоДт] = Справочники[СубконтоДт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Имя].НайтиПоКоду(СтрЗаменить(ТекЭлемент["_"+Строка(3+НомерСубконтоДт)], Символы.НПП, ""));
					КонецЕсли;
				ИначеЕсли Метаданные.Перечисления.Содержит(СубконтоДт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные()) Тогда 
					НоваяПроводка["ВидСубконтоДт"+НомерСубконтоДт] = СубконтоДт.ВидСубконто;
					НоваяПроводка["СубконтоДт"+НомерСубконтоДт] = Перечисления[СубконтоДт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Имя].Получить(Число(СтрЗаменить(ТекЭлемент["_"+Строка(3+НомерСубконтоДт)], Символы.НПП, "")));
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СубконтоКт Из ВидыСубконтоКт Цикл
				НомерСубконтоКт = СубконтоКт.НомерСтроки;
				ТипСубконтоКт = СубконтоКт.ВидСубконто.ТипЗначения.ПривестиЗначение();
				ИмяТипаСубконтоКт = СубконтоКт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Имя;
				Если Метаданные.Справочники.Содержит(СубконтоКт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные()) Тогда
					Если Справочники[СубконтоКт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Имя].НайтиПоКоду(СтрЗаменить(ТекЭлемент["_"+Строка(8+НомерСубконтоКт)], Символы.НПП, "")) = Справочники[СубконтоКт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Имя].ПустаяСсылка() И ТекЭлемент["_"+Строка(8+НомерСубконтоКт)] <> Неопределено Тогда
						Сообщить("В строке №" + ТекЭлемент.Строка + " файла " + ИмяФайла + " в поле СубконтоКт" + НомерСубконтоКт + " не найден код " + Строка(ТекЭлемент["_"+Строка(8+НомерСубконтоКт)]));	
					Иначе
						НоваяПроводка["ВидСубконтоКт"+НомерСубконтоКт] = СубконтоКт.ВидСубконто;
						НоваяПроводка["СубконтоКт"+НомерСубконтоКт] = Справочники[СубконтоКт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Имя].НайтиПоКоду(СтрЗаменить(ТекЭлемент["_"+Строка(8+НомерСубконтоКт)], Символы.НПП, ""));
					КонецЕсли;
				ИначеЕсли Метаданные.Перечисления.Содержит(СубконтоКт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные()) Тогда
					НоваяПроводка["ВидСубконтоКт"+НомерСубконтоКт] = СубконтоКт.ВидСубконто;
					НоваяПроводка["СубконтоКт"+НомерСубконтоКт] = Перечисления[СубконтоКт.ВидСубконто.ТипЗначения.ПривестиЗначение().Метаданные().Имя].Получить(Число(СтрЗаменить(ТекЭлемент["_"+Строка(8+НомерСубконтоКт)], Символы.НПП, "")));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	мРезультат = Новый Массив;
	
	Для Каждого Док из СоответствиеОрганизацияДокумент Цикл 
		Док.Значение.Вставить("Комментарий", "Загружено автоматически " + ТекущаяДатаСеанса());
		Док.Значение.Вставить("Ответственный", ПользователиКлиентСервер.ТекущийПользователь());
		мРезультат.Добавить(ПоместитьВоВременноеХранилище(Док.Значение, Новый УникальныйИдентификатор));
	КонецЦикла;
	
	Возврат мРезультат;
КонецФункции
