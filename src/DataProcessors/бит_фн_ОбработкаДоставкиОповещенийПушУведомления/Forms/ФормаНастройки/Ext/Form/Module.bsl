
#Область ОбработчикиСобытийФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_фн_ОбработкаДоставкиОповещенийЭлПочта;
	
	// Вызов механизма защиты
	
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("НастройкиДоставки") Тогда
	
		 Для каждого КиЗ Из Параметры.НастройкиДоставки Цикл
		 
		 	 ИмяРеквизита = "Настройка_"+КиЗ.Ключ;
			 Объект[ИмяРеквизита] = КиЗ.Значение;
		 
		 КонецЦикла; 
	
	КонецЕсли; 
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик Команды "ПоКнопкеОК".
// 
&НаКлиенте
Процедура ПоКнопкеОК(Команда)
	
	флНетОшибок = ПроверитьЗаполнение();
	
	Если флНетОшибок Тогда
		
		НастройкиДоставки = ОК_Сервер();
		ОповеститьОВыборе(НастройкиДоставки);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьТокен(Команда)
	КомандаПроверитьТокенНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучитьТокен(Команда)
	
	ФайловаяСистемаКлиент.ЗапуститьПрограмму("http://pushrapid.com/Public/Account/Register");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура КомандаПроверитьТокенНаСервере()
	
	ДанныеТокена = ПолучитьДанныеТокена();
	ВывестиДанныеТокена(ДанныеТокена);
	
КонецПроцедуры

// Процедура получате структуру настройки доставки.
// 
&НаСервере
Функция ОК_Сервер()
	
	ОбработкаОбъект   = РеквизитФормыВЗначение("Объект");
	НастройкиДоставки = бит_фн_ОповещенияСервер.ПолучитьСтруктуруНастроекДоставки(ОбработкаОбъект);

	Возврат НастройкиДоставки;
	
КонецФункции // ОК_Сервер()

// Функция получает инфорацию о токене сервиса уведомлений.
//
// Возвращаемое значение:
//  ДанныеОтвета - Структура.
//
&НаСервере
Функция ПолучитьДанныеТокена()
	
	ДанныеОтвета = Неопределено;	
	
	HttpConnections = new HTTPСоединение("pushrapid.com",,,,,30);
	
	HttpRequest = new HTTPЗапрос;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type","application/json");
	
	HttpRequest.АдресРесурса = "/api/CheckToken";
	HttpRequest.Заголовки = Заголовки;
	
	strJSON = "{""auth_token"":""%Токен%""}";	
	
	strJSON = СтрЗаменить(strJSON, "%Токен%"  , Объект.Настройка_Токен);
	
	HttpRequest.УстановитьТелоИзСтроки(strJSON,КодировкаТекста.UTF8);
	
	responce = HttpConnections.ОтправитьДляОбработки(HttpRequest);
	
	strResponce = responce.ПолучитьТелоКакСтроку();
	
	Если responce.КодСостояния = 200 Тогда
		
		strResponce = СтрЗаменить(strResponce,"{","{"+Символы.ПС);		
		strResponce = СтрЗаменить(strResponce,"}",Символы.ПС+"}");
		strResponce = СтрЗаменить(strResponce,""",",","+Символы.ПС);
		
		ДанныеОтвета = бит_ОбщегоНазначения.JSON_Parse(strResponce);
		
	Иначе	
		
		ТекстСообщения =  НСтр("ru = 'Не удалось проверить токен. Код состояния: %1%. Ответ сервера: %2%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, responce.КодСостояния, strResponce);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 

	Возврат ДанныеОтвета;
	
КонецФункции // ПолучитьДанныеТокена()

// Функция выводит данные токена на форму.
//
// Параметры:
//   ДанныеОтвета - Структура
//
&НаСервере
Процедура ВывестиДанныеТокена(ДанныеОтвета)
	
	флЕстьОтвет = ?(ТипЗнч(ДанныеОтвета) = Тип("Структура"), Истина, Ложь);
	
	Элементы.ДекорацияИнфо.Видимость = флЕстьОтвет;
	
	Если флЕстьОтвет Тогда
		
		Если ДанныеОтвета.status_code = "200" Тогда
			
			ЦветИнформации = ?(ВРег(ДанныеОтвета.is_valid) = Врег("True"), WebЦвета.Зеленый, WebЦвета.Красный);
			ТекстИнформации = ?(ВРег(ДанныеОтвета.is_trial) = Врег("True"), "Пробный","");
			
			КоличествоСообщений = ДанныеОтвета.push_limit;
			КоличествоСообщенийОтправлено = ДанныеОтвета.push_sent;
			
			// информация по количеству
			Если КоличествоСообщений = "unlimited" Тогда
				
				ОграничениеКоличество =  НСтр("ru = 'Без ограничения по количеству'");
				
			Иначе	
				
				ОграничениеКоличество =  НСтр("ru = 'Количество: %1%, Отправлено: %2%, Осталось: %3%'");
				
				Попытка
					
					КоличествоСообщений = Число(КоличествоСообщений);
					
				Исключение
					
					КоличествоСообщений = 0;
					
				КонецПопытки;
				
				Попытка
					
					КоличествоСообщенийОтправлено = Число(КоличествоСообщенийОтправлено);
					
				Исключение
					
					КоличествоСообщенийОтправлено = 0;
					
				КонецПопытки;
				
				КоличествоОстаток = КоличествоСообщений - КоличествоСообщенийОтправлено;
				
				ОграничениеКоличество = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ОграничениеКоличество, КоличествоСообщений, КоличествоСообщенийОтправлено, КоличествоОстаток);
				
			КонецЕсли; 
			
			ТекстИнформации = ТекстИнформации + ?(ПустаяСтрока(ТекстИнформации),"",", ")+ОграничениеКоличество; 
			
			// информация ограничения по времени
			ДатаКрайняя = ДанныеОтвета.time_limit;
			Если ДатаКрайняя = "unlimited" Тогда
				
				ДействуетДо =  НСтр("ru = 'Без ограничения по времени'");
				
			Иначе
				
				ДействуетДо =  НСтр("ru = 'Действует до'")+": "+ДатаКрайняя;
				
			КонецЕсли; 
			ТекстИнформации = ТекстИнформации + ?(ПустаяСтрока(ТекстИнформации),"",", ")+ДействуетДо+"."; 
			
			
		ИначеЕсли ДанныеОтвета.status_code = "101" Тогда	
			
			ЦветИнформации =  WebЦвета.Красный;
			ТекстИнформации =  НСтр("ru = 'Токен не обнаружен. Проверьте правильность ввода.'");
			
		Иначе	
			
			ЦветИнформации =  WebЦвета.Красный;
			ТекстИнформации =  НСтр("ru = 'Токен не действительный. Неизвестная ошибка'");
			
		КонецЕсли; 
		
		
		Элементы.ДекорацияИнфо.Заголовок = ТекстИнформации;
		Элементы.ДекорацияИнфо.ЦветТекста = ЦветИнформации;
		
	КонецЕсли; 
	
КонецПроцедуры // ВывестиДанныеТокена()

#КонецОбласти
