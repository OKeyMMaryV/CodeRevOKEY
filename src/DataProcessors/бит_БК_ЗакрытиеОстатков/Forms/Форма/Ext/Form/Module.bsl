//bit_SVKushnirenko 27.01.2017 #2657
//Прокладка для вызова серверного метода из клиента на форме
// Параметры:
//парСсылка - ссылка на текущий документ
&НаСервереБезКонтекста
Функция ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(парСсылка)

	Возврат бит_БК_Общий.ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(парСсылка);
КонецФункции // ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях()

&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Команда)
	
	//{ bit_SVKushnirenko 01.02.2017 #2657
	//ИсходныйКод{
	//СформироватьДокументыЗакрытия();
	//}ИсходныйКод
	
	пСсылкаНаДокЗакрытия = Неопределено;
	СформироватьДокументыЗакрытия(пСсылкаНаДокЗакрытия);
	
	//Попытка обновить статусы на формах текущего сеанса
	пМассивОбновления = ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(пСсылкаНаДокЗакрытия);
	Если пМассивОбновления.Количество()  >  0 Тогда
		
		Оповестить("бит_БК_ИзмСтатусаПослеИзмБалансаЗаявок", Новый Структура("Ссылки", пМассивОбновления));
	КонецЕсли;
	
	Объект.Результат.Очистить(); //очистка созданного набора для исключения возможности повторного создания документов с содержанием, неактуальным БК
	//} bit_SVKushnirenko 01.02.2017 #2657
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("СтруктураОтбора", Объект.СтруктураОтбора);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("Макет");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникДоступныхНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	
	ДоработатьОтборКомпоновщика();
	
	//+БИТ_Сундукова №2053
	объект.ПричинаЗакрытия = справочники.бит_ПричиныЗакрытияДокументовПланированияПлатежа.РешениеОЦР;
	//-БИТ_Сундукова №2053
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-27 (#3044)
	УстановитьВидимостьКолонокТЧРезультат(ЭтаФорма, Объект.ок_КаскадноеЗакрытие);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-27 (#3044)
	
КонецПроцедуры

&НаСервере
Процедура ДоработатьОтборКомпоновщика()
	
	Если НЕ ТипЗнч(Объект.СтруктураОтбора) = Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-08 (#3073)
	КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Очистить();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-08 (#3073)

	Для Каждого ТекСтрока Из Объект.СтруктураОтбора Цикл
		Если КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(ТекСтрока.Ключ) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		//Это структура
		ТекПараметры = ТекСтрока.Значение;
		ЭлементОтбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекСтрока.Ключ);
		Если ТекПараметры.Свойство("ВидСравнения") Тогда 
			ЭлементОтбора.ВидСравнения = ТекПараметры.ВидСравнения;
		КонецЕсли;
		Если ТекПараметры.Свойство("Использование") Тогда 
			ЭлементОтбора.Использование = ТекПараметры.Использование;
		КонецЕсли;
		Если ТекПараметры.Свойство("ПравоеЗначение") Тогда 
			ЭлементОтбора.ПравоеЗначение = ТекПараметры.ПравоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КоманднаяПанель1Сформировать_Сервер()
	СформироватьИзКомпоновщика(КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки());
КонецФункции

&НаКлиенте
Процедура КоманднаяПанель1Сформировать(Команда)
	КоманднаяПанель1Сформировать_Сервер();
	//ОКЕЙ Рычаков А.С. (СофтЛаб) Начало 2019-09-24 (#3492)
	ОбновитьПризнакОтрицательныхОстатков(Неопределено); 
	//ОКЕЙ Рычаков А.С. (СофтЛаб) Конец 2019-09-24 (#3492)
КонецПроцедуры

&НаКлиенте
Процедура РезультатСуммаОстатокПриИзменении(Элемент)
	
	//Проверим по таблице контроля сумм
	
	//{ bit_SVKushnirenko 19.01.2017 #2657
	//ИсходныйКод{
	//ТекСтрока = Элементы.Результат.ТекущиеДанные;
	//СтрокиКонтроля = ТаблицаКонтроляСумм.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
	//СтрокаКонтроля = ?(СтрокиКонтроля.Количество() = 0, Неопределено, СтрокиКонтроля[0]);
	//Если НЕ СтрокаКонтроля = Неопределено Тогда 
	//	Если ТекСтрока.СуммаОстаток > СтрокаКонтроля.СуммаОстаток Тогда 
	//		Сообщить("Нельзя ввести сумму больше суммы остатка!");
	//		ТекСтрока.СуммаОстаток = СтрокаКонтроля.СуммаОстаток;
	//	КонецЕсли;
	//КонецЕсли;
	//}ИсходныйКод
	
	пТекСтрока = Элементы.Результат.ТекущиеДанные;
	Если пТекСтрока.СуммаОстаток > пТекСтрока.СуммаКонтроль Тогда
				
		Сообщить("Нельзя ввести сумму больше суммы остатка!");
		пТекСтрока.СуммаОстаток = пТекСтрока.СуммаКонтроль;
		//ОКЕЙ Рычаков А.С. (СофтЛаб) Начало 2019-09-24 (#3492)
		Возврат;
		//ОКЕЙ Рычаков А.С. (СофтЛаб) Конец 2019-09-24 (#3492)
	КонецЕсли;
	//} bit_SVKushnirenko 19.01.2017 #2657
	
	//ОКЕЙ Рычаков А.С. (СофтЛаб) Начало 2019-09-24 (#3492)
	ОбновитьПризнакОтрицательныхОстатков(пТекСтрока); 
	//ОКЕЙ Рычаков А.С. (СофтЛаб) Конец 2019-09-24 (#3492)
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВключитьВсе" командной панели
// табличного поля "НайденныеСсылки". 
// Включает пометки у всех строк.
//
&НаКлиенте
Процедура КоманднаяПанельНайденныеСсылкиВключитьВсе(Команда)

	Для Каждого ТекСтрока ИЗ Объект.Результат Цикл 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-24 (#3969)
		//ТекСтрока.Флаг = Истина;
		Если Элементы.Результат.ПроверитьСтроку(ТекСтрока.ПолучитьИдентификатор()) Тогда
			ТекСтрока.Флаг = Истина;
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-24 (#3969)
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыключитьВсе" командной панели
// табличного поля "НайденныеСсылки". 
// Выключает пометки у всех строк.
//
&НаКлиенте
Процедура КоманднаяПанельНайденныеСсылкиВыключитьВсе(Команда)

	Для Каждого ТекСтрока ИЗ Объект.Результат Цикл 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-24 (#3969)
		//ТекСтрока.Флаг = Ложь;
		Если Элементы.Результат.ПроверитьСтроку(ТекСтрока.ПолучитьИдентификатор()) Тогда
			ТекСтрока.Флаг = Ложь;
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-24 (#3969)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИзКомпоновщика(Настройки) Экспорт
	//+Сундукова 10.05.16 №2053
	 объект.Результат.Очистить();
	 Настройки.Отбор.Элементы.очистить();
	 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-17 (#3073)
	 //Для каждого ТекСтрока из КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы цикл
	 //   
	 //   ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	 //   ЗаполнитьЗначенияСвойств(ЭлементОтбора,текстрока);
	 //КонецЦикла;
	 //Заменено на:
	 КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Настройки.Отбор, КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор);  
	 БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, "НеВыводитьКопейки", Объект.НеВыводитьКопейки);
	 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-17 (#3073)
	 
	//-Сундукова 10.05.16 №2053
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений") , , ); 
	
	//{ bit SVKushnirenko Bit 19.01.2017 #2657
	//Устанавливаем текст запроса в соответствии с настройками БК БИТ
	пТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойЗапрос.Запрос;
	
	МакетКомпоновкиДанных.НаборыДанных.ОсновнойЗапрос.Запрос = бит_БК_Общий.КорректировкаТекстаЗапросаЗакрытия(пТекстЗапроса);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-28 (#3044)
	МакетКомпоновкиДанных.ЗначенияПараметров.КаскадноеЗакрытие.Значение = Объект.ок_КаскадноеЗакрытие;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-28 (#3044)	
	
	МакетКомпоновкиДанных.ЗначенияПараметров.НеВыводитьКопейки.Значение = Объект.НеВыводитьКопейки; //копейки не выводим в соответствии с настройками на форме до выборки
	//} bit SVKushnirenko Bit 25.01.2017 #2657
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	//1c-izhtc spawn 26.08.15 (
	
	//{ bit_SVKushnirenko 19.01.2017 #2657
	//ИсходныйКод{
	////+Сундукова 13.04.16 №2053
	//ТаблицаРезультат.Свернуть("Аналитика_1,аналитика_2,период,СтатьяОборотов,Сценарий,ЦФО,проект","Разница");
	//ТаблицаРезультат.Колонки.Добавить("СуммаОстаток");
	////-Сундукова 13.04.16 №2053
	//Для Каждого СтрокаТаблицаРезультат ИЗ ТаблицаРезультат Цикл 		
	//	Если СтрокаТаблицаРезультат.Разница>0 Тогда
	//		Строчка =Объект.Результат.Добавить(); 
	//		ЗаполнитьЗначенияСвойств(Строчка,СтрокаТаблицаРезультат);
	//		Строчка.СуммаОстаток = СтрокаТаблицаРезультат.Разница;		
	//	КонецЕсли;
	//КонецЦикла;
	////1c-izhtc spawn 26.08.15 ) 	
	////Объект.Результат.Загрузить(ТаблицаРезультат);
	//ТаблицаКонтроляСумм.Загрузить(Объект.Результат.Выгрузить(,"НомерСтроки,СуммаОстаток"));	
	//}ИсходныйКод
	                         
	пТаблицаДляВыбораПользователем = ТаблицаРезультат.Скопировать();
	//пТаблицаДляВыбораПользователем.Свернуть("Аналитика_1, Аналитика_2, Период, СтатьяОборотов, Сценарий, ЦФО, Проект", "СуммаОстаток"); //Свертываем т.к. в данных запроса есть детализирующие сведения "ПериодЗакрытия"
	Объект.Результат.Загрузить(пТаблицаДляВыбораПользователем);	
	//} bit_SVKushnirenko 19.01.2017 #2657
			
КонецПроцедуры

//{ bit_SVKushnirenko 19.01.2017 #2657
//ПОМЕСТИТЬ СЮДА ИСХОДНЫЙ ТЕКСТ Процедура СформироватьДокументыЗакрытия()!!!! в предрабе, процедура переработана полностью, текст устрачен при правке!!!
//} bit SVKushnirenko Bit 19.01.2017 #2657

//{ bit_SVKushnirenko 19.01.2017 #2657
&НаСервере
Процедура СформироватьДокументыЗакрытия(парДокументЗакрытия = Неопределено) Экспорт
	Если Объект.Результат.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	МассивСтрок = Объект.Результат.НайтиСтроки(Новый Структура("Флаг", Истина));

	Если МассивСтрок.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДокументЗакрытия = Документы.бит_БК_ЗакрытиеОстатков.СоздатьДокумент();
	ДокументЗакрытия.Дата = ТекущаяДата();
	
	//ОКЕЙ Рычаков А.С. (СофтЛаб) Начало 2019-09-24 (#3492)
	ДокументЗакрытия.ок_ОтрицательныеОстатки = Объект.ок_ОтрицательныеОстатки;
	//ОКЕЙ Рычаков А.С. (СофтЛаб) Конец 2019-09-24 (#3492)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-14 (#3046)
	Если ТипЗнч(Объект.СтруктураОтбора) = Тип("Структура") И
		Объект.СтруктураОтбора.Свойство("Аналитика_1") И
		ТипЗнч(Объект.СтруктураОтбора.Аналитика_1) = Тип("Структура") И
		Объект.СтруктураОтбора.Аналитика_1.Свойство("ПравоеЗначение") 		
	Тогда 
		ДокументЗакрытия.ДокументОснование = Объект.СтруктураОтбора.Аналитика_1.ПравоеЗначение;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-14 (#3046)
	
	ДокументЗакрытия.Комментарий = "Сформирован обработкой закрытия остатков " + ТекущаяДата();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-12 (#3044)
	Если Объект.ок_КаскадноеЗакрытие Тогда 
		ДокументЗакрытия.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сформирован обработкой по каскадному закрытию остатков  %1'"), 
																							   ТекущаяДата());
		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-12 (#3044)
	
	ДокументЗакрытия.Ответственный = Пользователи.ТекущийПользователь();
	ТабличнаяЧасть = ДокументЗакрытия.ТабличнаяЧасть;
	
	//Получение сценариев с "аномально широкими" периодами ключевых аналитик более месяца (год и "без периода")
	пНастройкиВыбораКЗБПоСценариям = бит_БК_общий.СценариПланированияНастройкиВыбораСумм();
	пМассивАномальныхСценариев = Новый Массив();
	пМассивСценариевПериодГод = Новый Массив();
	
	Для каждого пЭлементНастройкиПоСценарию Из пНастройкиВыбораКЗБПоСценариям Цикл
	
		пСписокКлючевыхАналитикСценария = пЭлементНастройкиПоСценарию.Значение;
		Если пСписокКлючевыхАналитикСценария.НайтиПоЗначению(Перечисления.бит_БК_ДопИзмеренияКонтроля.ПериодВсе) <> Неопределено или
			пСписокКлючевыхАналитикСценария.НайтиПоЗначению(Перечисления.бит_БК_ДопИзмеренияКонтроля.ПериодГод) <> Неопределено Тогда  
			
			пМассивАномальныхСценариев.Добавить(Справочники.СценарииПланирования[пЭлементНастройкиПоСценарию.Ключ]);
		КонецЕсли;
		
		Если пСписокКлючевыхАналитикСценария.НайтиПоЗначению(Перечисления.бит_БК_ДопИзмеренияКонтроля.ПериодГод) <> Неопределено Тогда  
			
			пМассивСценариевПериодГод.Добавить(Справочники.СценарииПланирования[пЭлементНастройкиПоСценарию.Ключ]);
		КонецЕсли;
	КонецЦикла; 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-23 (#3800)
	пМассивАномальныхСценариевКаскад = пМассивАномальныхСценариев;
	мИсключаемыхИзАномальных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест"));
	пМассивАномальныхСценариев = ОбщегоНазначенияКлиентСервер.РазностьМассивов(пМассивАномальныхСценариев, мИсключаемыхИзАномальных);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-23 (#3800)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-17 (#3044)
	пСтрДляВышестоящего = Новый Структура;
	Если Объект.ок_КаскадноеЗакрытие Тогда 
		пТаблицаРезультат = Объект.Результат.Выгрузить();
		пТаблицаРезультат.Очистить();
		пТаблицаРезультат.Добавить();
		мСтруктур = ОбщегоНазначения.ТаблицаЗначенийВМассив(пТаблицаРезультат);
		пСтрДляВышестоящего = мСтруктур[0];
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-17 (#3044)
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-17 (#3044)
		
		//Если пМассивАномальныхСценариев.Найти(ТекСтрока.Сценарий) <> Неопределено Тогда // требуется распределение по периодам т.к. период планирования (месяц) явно не соответствует периоду ключевой аналитики сценария
				
		//	//Формирование структуры параметра для запроса распределения
		//	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-06 (#3046)
		//	//пСтруктураОтбора = Новый Структура("СтатьяОборотов, СценарийКонтролируемый, ЦФО, Проект, Аналитика_1, Аналитика_2"); 
		//	//Заменено на:
		//	пСтруктураОтбора = Новый Структура("СтатьяОборотов, СценарийКонтролируемый, ЦФО, Проект, Аналитика_1, Аналитика_2, Контрагент, ДоговорКонтрагента"); 
		//	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-06 (#3046)			
		//	ЗаполнитьЗначенияСвойств(пСтруктураОтбора, ТекСтрока);
		//	
		//	пПериодНачало = Неопределено;
		//	пПериодКонец = Неопределено;
		//	
		//	Если пМассивСценариевПериодГод.Найти(ТекСтрока.СценарийКонтролируемый) <> Неопределено  Тогда 
		//		
		//		пПериодНачало = НачалоГода(ТекСтрока.Период);
		//		пПериодКонец = КонецГода(ТекСтрока.Период);
		//	КонецЕсли;
		//	 
		//	пТЗРаспределения = бит_БК_Общий.ПолучитьРаспределениеПоПериодамПланированияСверхМесячныхКлАН(пСтруктураОтбора, ТекСтрока.СуммаОстаток, пПериодНачало, пПериодКонец);
		//	
		//	Если пТЗРаспределения <> Неопределено и пТЗРаспределения.Количество() <>  0 Тогда  //выполняем заполнение по данным распределения 
		//		
		//		Для каждого пСтрокаРаспределения Из пТЗРаспределения Цикл
		//		
		//			пНовСтрока = ТабличнаяЧасть.Добавить();
		//			ЗаполнитьЗначенияСвойств(пНовСтрока, пСтрокаРаспределения);
		//			
		//			пНовСтрока.ПричинаЗакрытия = Объект.ПричинаЗакрытия;
		//			пНовСтрока.СуммаБезНДС = пСтрокаРаспределения.СуммаОстаток;
		//			пНовСтрока.СтавкаНДС= Перечисления.СтавкиНДС.НДС18;
		//			пНовСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(пНовСтрока.СуммаБезНДС, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пНовСтрока.СтавкаНДС));
		//			пНовСтрока.СуммаСНДС = пНовСтрока.СуммаБезНДС + пНовСтрока.НДС;			
		//		КонецЦикла; 
		//		
		//		Продолжить; //завершена итерация "распределения", выполнение старого сценария заполнения прерывается для текущей строки данных закрытия
		//	КонецЕсли;
		//	
		//	//если распределение не удалось, продолжаем выполнение заполнения закрытия "как есть", что есть ошибка по периодам, но правильно по балансу БК
		//	ТекСтрока.Период = НачалоГода(ТекущаяДата()); //период закрытия ставим в начало текущего года - тоже неверно, но лучше, чем ничего, вообще это недопустимы
		//КонецЕсли;
		//
		//пНовСтрока = ТабличнаяЧасть.Добавить();
		//ЗаполнитьЗначенияСвойств(пНовСтрока, ТекСтрока);
		//
		//пНовСтрока.ПричинаЗакрытия = Объект.ПричинаЗакрытия;
		//пНовСтрока.СуммаБезНДС = ТекСтрока.СуммаОстаток;
		//пНовСтрока.СтавкаНДС= Перечисления.СтавкиНДС.НДС18;
		//пНовСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(пНовСтрока.СуммаБезНДС, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пНовСтрока.СтавкаНДС));
		//пНовСтрока.СуммаСНДС = пНовСтрока.СуммаБезНДС + пНовСтрока.НДС;			
		//Заменено на:
		
		ДобавитьСтрокуВТабЧасть(ТекСтрока,пМассивАномальныхСценариев,пМассивСценариевПериодГод,ТабличнаяЧасть);
		
		Если Объект.ок_КаскадноеЗакрытие 
		   И ТекСтрока.Ок_СуммаЗакрытияВышестоящегоСценария <> 0 
		Тогда 		    	
			ЗаполнитьЗначенияСвойств(пСтрДляВышестоящего,ТекСтрока);
			пСтрДляВышестоящего.СуммаОстаток = ТекСтрока.Ок_СуммаЗакрытияВышестоящегоСценария;			 		
			пСтрДляВышестоящего.СценарийКонтролируемый = пСтрДляВышестоящего.Сценарий;
			пСтрДляВышестоящего.Сценарий = ТекСтрока.Ок_СценарийВышестоящий;			 						
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-23 (#3800)
			пСтрДляВышестоящего.Период = пСтрДляВышестоящего.Период_ВС;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-23 (#3800)
			
			ДобавитьСтрокуВТабЧасть(пСтрДляВышестоящего,пМассивАномальныхСценариев,пМассивСценариевПериодГод,ТабличнаяЧасть);
			
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-17 (#3044)
		
	КонецЦикла;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда 

		Сообщить("Документ не создан: нет остатков для закрытия.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;		 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-17 (#3044)
	ДокументЗакрытия.ДополнительныеСвойства.Вставить("НеПроверятьОстатки", Истина);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-17 (#3044)
	
	Попытка

		ДокументЗакрытия.Записать(РежимЗаписиДокумента.Проведение);
		Успешно = Истина;
	Исключение

		Сообщить("Документ не удалось провести по причине: ",СтатусСообщения.Важное);
		Сообщить(ОписаниеОшибки());
		Успешно = Ложь;
	КонецПопытки;
	
	Если НЕ Успешно Тогда 
		Попытка
			
			ДокументЗакрытия.Записать(РежимЗаписиДокумента.Запись);
			Успешно = Истина;
		Исключение
			
			Сообщить("Документ не удалось записать по причине: ",СтатусСообщения.Важное);
			Сообщить(ОписаниеОшибки());
			Успешно = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если Успешно Тогда 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-06 (#3046)
		//Сообщить("Создан документ: " + ДокументЗакрытия.Ссылка);
		//Заменено на:
		пТекстСообщения = НСтр("ru = 'Создан документ: %1'");
		пТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстСообщения, ДокументЗакрытия.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстСообщения, ДокументЗакрытия.Ссылка);		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-06 (#3046)		
		парДокументЗакрытия = ДокументЗакрытия.Ссылка;
	КонецЕсли; 
КонецПроцедуры

//} bit_SVKushnirenko 19.01.2017 #2657

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-27 (#3044)
&НаСервере
Процедура ДобавитьСтрокуВТабЧасть(ТекСтрока,пМассивАномальныхСценариев,пМассивСценариевПериодГод,ТабличнаяЧасть)
	
	Если пМассивАномальныхСценариев.Найти(ТекСтрока.Сценарий) <> Неопределено Тогда // требуется распределение по периодам т.к. период планирования (месяц) явно не соответствует периоду ключевой аналитики сценария
		пСтруктураОтбора = Новый Структура("СтатьяОборотов, СценарийКонтролируемый, ЦФО, Проект, Аналитика_1, Аналитика_2, Контрагент, ДоговорКонтрагента"); 
		
		ЗаполнитьЗначенияСвойств(пСтруктураОтбора, ТекСтрока);
		
		пПериодНачало = Неопределено;
		пПериодКонец = Неопределено;
		
		Если пМассивСценариевПериодГод.Найти(ТекСтрока.СценарийКонтролируемый) <> Неопределено  Тогда 
			
			пПериодНачало = НачалоГода(ТекСтрока.Период);
			пПериодКонец = КонецГода(ТекСтрока.Период);
		КонецЕсли;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-08-23 (#3427)
		//пТЗРаспределения = бит_БК_Общий.ПолучитьРаспределениеПоПериодамПланированияСверхМесячныхКлАН(пСтруктураОтбора, ТекСтрока.СуммаОстаток, пПериодНачало, пПериодКонец);
		//Заменено на:
		пТЗРаспределения = ПолучитьРаспределениеПоПериодамПланированияСверхМесячныхКлАН(пСтруктураОтбора, ТекСтрока.СуммаОстаток, пПериодНачало, пПериодКонец);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-08-23 (#3427)
		
		
		Если пТЗРаспределения <> Неопределено и пТЗРаспределения.Количество() <>  0 Тогда  //выполняем заполнение по данным распределения 
			
			Для каждого пСтрокаРаспределения Из пТЗРаспределения Цикл
				
				пНовСтрока = ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(пНовСтрока, пСтрокаРаспределения);
				
				пНовСтрока.ПричинаЗакрытия = Объект.ПричинаЗакрытия;
				пНовСтрока.СуммаБезНДС = пСтрокаРаспределения.СуммаОстаток;
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-14 (#3885)
				//пНовСтрока.СтавкаНДС= Перечисления.СтавкиНДС.НДС18;
				пНовСтрока.СтавкаНДС= Перечисления.СтавкиНДС.НДС20;
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-14 (#3885)
				пНовСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(пНовСтрока.СуммаБезНДС, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пНовСтрока.СтавкаНДС));
				пНовСтрока.СуммаСНДС = пНовСтрока.СуммаБезНДС + пНовСтрока.НДС;			
			КонецЦикла; 
			
			Возврат; //завершена итерация "распределения", выполнение старого сценария заполнения прерывается для текущей строки данных закрытия
		КонецЕсли;
		
		//если распределение не удалось, продолжаем выполнение заполнения закрытия "как есть", что есть ошибка по периодам, но правильно по балансу БК
		ТекСтрока.Период = НачалоГода(ТекущаяДата()); //период закрытия ставим в начало текущего года - тоже неверно, но лучше, чем ничего, вообще это недопустимы
	КонецЕсли;
	
	пНовСтрока = ТабличнаяЧасть.Добавить();
	ЗаполнитьЗначенияСвойств(пНовСтрока, ТекСтрока);
	
	пНовСтрока.ПричинаЗакрытия = Объект.ПричинаЗакрытия;
	пНовСтрока.СуммаБезНДС = ТекСтрока.СуммаОстаток;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-14 (#3885)
	//пНовСтрока.СтавкаНДС= Перечисления.СтавкиНДС.НДС18;
	пНовСтрока.СтавкаНДС= Перечисления.СтавкиНДС.НДС20;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-14 (#3885)
	пНовСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(пНовСтрока.СуммаБезНДС, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пНовСтрока.СтавкаНДС));
	пНовСтрока.СуммаСНДС = пНовСтрока.СуммаБезНДС + пНовСтрока.НДС;		
	
КонецПроцедуры

&НаКлиенте
Процедура ок_КаскадноеЗакрытиеПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокТЧРезультат(ЭтаФорма, Объект.ок_КаскадноеЗакрытие);
	
	СтрОбнуления = Новый Структура("Ок_СуммаЗакрытия,Ок_СуммаЗакрытияВышестоящегоСценария,Ок_СуммаОстаткаВышестоящегоСценария,Ок_СценарийВышестоящий", 0,0,0,ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка"));
	
	Для Каждого СтрТЧ Из Объект.Результат Цикл 
		ЗаполнитьЗначенияСвойств(СтрТЧ,СтрОбнуления);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКолонокТЧРезультат(ЭтаФорма, КаскадноеЗакрытие)
	
	ЭтаФорма.Элементы.ГруппаКаскадноеЗакрытие.Видимость    = КаскадноеЗакрытие;
	ЭтаФорма.Элементы.РезультатСуммаОстаток.ТолькоПросмотр = КаскадноеЗакрытие;	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-26 (#3044)
	ЭтаФорма.Элементы.РезультатОк_СуммаЗакрытия.ТолькоПросмотр = КаскадноеЗакрытие;	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-26 (#3044)
	
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОк_СуммаЗакрытияВышестоящегоСценарияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	пТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	
	Если пТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
	
		пВведенноеЗначение = Число(Текст);
	
	Исключение
	    пВведенноеЗначение = 0;
	КонецПопытки; 
	
	Если пВведенноеЗначение > пТекущиеДанные.СуммаОстаток Тогда 
		пВведенноеЗначение = пТекущиеДанные.СуммаОстаток;
		
		СтандартнаяОбработка = Ложь;
		Текст = пВведенноеЗначение;
		спВыбора  = Новый СписокЗначений;
		спВыбора.Добавить(пВведенноеЗначение);
		ДанныеВыбора = спВыбора;
		
		пТекущиеДанные.Ок_СуммаЗакрытияВышестоящегоСценария = пВведенноеЗначение;
		
		ПолеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.Результат[%1].Ок_СуммаЗакрытияВышестоящегоСценария",пТекущиеДанные.ПолучитьИдентификатор());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сумму закрытия по вышестоящему сценарию нельзя менять в сторону увеличения'"),,ПолеОшибки);
				
	КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-27 (#3044)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-08-23 (#3427)
&НаСервере
Функция ПолучитьРаспределениеПоПериодамПланированияСверхМесячныхКлАН(парСтруктураОтбора, парСуммаРаспределения, парПериодНачало = Неопределено, парПериодКонец = Неопределено) Экспорт
	
	пЗапрос = Новый Запрос;
	
	пТекстЗапроса = ТекстЗапросаДляРаспределенияЗакрытияОстатков();
	пЗапрос.Текст = бит_БК_Общий.КорректировкаТекстаЗапросаЗакрытия(пТекстЗапроса, Истина);
	
	Если парПериодНачало =  Неопределено Тогда  
		
		пЗапрос.Текст = СтрЗаменить(пЗапрос.Текст, "&пзПериодНачало", ""); //параметр не нужен, выбираются все периоды
	Иначе
		
		пЗапрос.УстановитьПараметр("пзПериодНачало", парПериодНачало);
	КонецЕсли;
	 
	Если парПериодКонец =  Неопределено Тогда  
		
		пЗапрос.Текст = СтрЗаменить(пЗапрос.Текст, "&пзПериодКонец", ""); //параметр не нужен, выбираются все периоды
	Иначе
		
		пЗапрос.УстановитьПараметр("пзПериодКонец", парПериодКонец);
	КонецЕсли;
	
	Если парСтруктураОтбора.Количество() > 0 Тогда //есть параметры отбора
		
		пСтрокаУсловияОтбора = ""; пНомерПараметра = 1;
		Для каждого пЭлемент Из парСтруктураОтбора Цикл
		
			пЗначение = пЭлемент.Значение;
			Если ЗначениеЗаполнено(пЗначение) Тогда //
						
				пИмяПараметра = "пзОтбор" + пНомерПараметра;
				пСтрокаУсловияОтбора = пСтрокаУсловияОтбора + ?(пСтрокаУсловияОтбора = "", "", " и ") + пЭлемент.Ключ + " = &" + пИмяПараметра;
				пЗапрос.УстановитьПараметр(пИмяПараметра, пЭлемент.Значение);
				пНомерПараметра = пНомерПараметра + 1;
			КонецЕсли;
		КонецЦикла; 
		
		пЗапрос.Текст = СтрЗаменить(пЗапрос.Текст, "&пзУсловиеВыбораЗаписейРегистра", пСтрокаУсловияОтбора);
	Иначе
		
		пЗапрос.Текст = СтрЗаменить(пЗапрос.Текст, "&пзУсловиеВыбораЗаписейРегистра", "");
	КонецЕсли;

	пТЗРез = пЗапрос.Выполнить().Выгрузить(); //в запросе представлены все строки ТЧ с данными суммы БК и признаками превышения
	
	Если пТЗРез.Количество() = 0 Тогда
		
		Возврат Неопределено; //запрос БК не вернул данных, значит нет предмета для распределения
	КонецЕсли;
	
	////Последовательное закрытие по сумме остатка в периоде
	//пТЗГодовИСуммОстатка = пТЗРез.Скопировать();
	//пТЗГодовИСуммОстатка.Свернуть("Год, РазницаВГоду", ""); //получение годовых долей остатков к закрытию для распределения входящей суммы
	//
	//пОстатокКРаспределениюВсего = парСуммаРаспределения;
	//пОстатокКРаспределениюГода = 0;
	//пТекущийГодРаспределения = Дата(1, 1, 1, 0, 0, 0);
	//
	//пМассивУдаляемыхСтрок = Новый Массив;
	//
	//Для каждого пСтрокаБазы Из пТЗРез Цикл
	//	
	//	пГодСтроки = НачалоГода(пСтрокаБазы.Период);
	//	Если пГодСтроки <> пТекущийГодРаспределения Тогда  
	//		
	//		пТекущийГодРаспределения = НачалоГода(пСтрокаБазы.Период);
	//		пОстатокКРаспределениюГода = 0;
	//		Если пТЗГодовИСуммОстатка.Найти(пГодСтроки, "Год") <>  Неопределено Тогда  
	//			
	//			пОстатокКРаспределениюГода = пСтрокаБазы.РазницаВГоду
	//		КонецЕсли;
	//		
	//		Если пОстатокКРаспределениюВсего <= пОстатокКРаспределениюГода  Тогда  
	//			
	//			пОстатокКРаспределениюГода = пОстатокКРаспределениюВсего;
	//			пОстатокКРаспределениюВсего = 0;
	//		ИначеЕсли пОстатокКРаспределениюВсего > пОстатокКРаспределениюГода Тогда 
	//			
	//			пОстатокКРаспределениюВсего = пОстатокКРаспределениюВсего - пОстатокКРаспределениюГода;
	//		КонецЕсли;
	//	КонецЕсли;
	//	 
	//	Если пСтрокаБазы.СуммаОстаток <= пОстатокКРаспределениюГода Тогда  
	//		
	//		пОстатокКРаспределениюГода = пОстатокКРаспределениюГода - пСтрокаБазы.СуммаОстаток;
	//	ИначеЕсли пСтрокаБазы.СуммаОстаток > пОстатокКРаспределениюГода Тогда 
	//		
	//		пСтрокаБазы.СуммаОстаток = пОстатокКРаспределениюГода;
	//		пОстатокКРаспределениюГода = 0;
	//	Иначе //остаток распределения исчерпан, обнуляем таблицу остатков
	//		
	//		пСтрокаБазы.СуммаОстаток = 0;
	//	КонецЕсли;
	//	
	//	Если пСтрокаБазы.СуммаОстаток = 0 Тогда  
	//		
	//		пМассивУдаляемыхСтрок.Добавить(пСтрокаБазы);
	//	КонецЕсли;
	//КонецЦикла; 
	//
	//Для каждого пСтрокаУдаления Из пМассивУдаляемыхСтрок Цикл //удалем строки с нулевыми суммами распределения, они не должны попасть в закрытие
	//
	//	пТЗРез.Удалить(пСтрокаУдаления);
	//КонецЦикла; 
		
	Возврат пТЗРез.Скопировать();
КонецФункции // ПолучитьРаспределениеПоПериодамПланированияСверхМесячныхКлАН()

Функция ТекстЗапросаДляРаспределенияЗакрытияОстатков()

	Возврат
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования) КАК Сценарий,
	|	ВЫРАЗИТЬ(бит_БК_НастройкиБК.ЗначениеСсылка КАК Справочник.СценарииПланирования) КАК СценарийКонтролирующий
	|ПОМЕСТИТЬ СценарииБКОК
	|ИЗ
	|	РегистрСведений.бит_БК_НастройкиБК КАК бит_БК_НастройкиБК
	|ГДЕ
	|	бит_БК_НастройкиБК.Группа = ""Контролирующий сценарий""
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сценарий,
	|	СценарийКонтролирующий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(бит_КонтрольныеЗначенияБюджетовОбороты.Период, МЕСЯЦ) КАК Период,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий КАК Сценарий,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый КАК СценарийКонтролируемый,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО КАК ЦФО,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Проект КАК Проект,
	|	ВЫРАЗИТЬ(бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1 КАК Документ.бит_ФормаВводаБюджета) КАК Аналитика_1,
	|	ВЫРАЗИТЬ(бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_2 КАК Справочник.ОбъектыСтроительства) КАК Аналитика_2,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Контрагент КАК Контрагент,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольОборот - бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот) КАК Разница
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-23 (#3800)
	|	,бит_КонтрольныеЗначенияБюджетовОбороты.Период КАК ПериодИсх,
	|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольОборот) КАК СуммаСценарийКонтроль	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-23 (#3800)
	|ПОМЕСТИТЬ Подготовка
	|ИЗ
	|	СценарииБКОК КАК СценарииБКОК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(&пзПериодНачало, &пзПериодКонец, Месяц, &пзУсловиеВыбораЗаписейРегистра) КАК бит_КонтрольныеЗначенияБюджетовОбороты
	|		ПО СценарииБКОК.Сценарий = бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый
	|			И СценарииБКОК.СценарийКонтролирующий = бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(бит_КонтрольныеЗначенияБюджетовОбороты.Период, МЕСЯЦ),
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Проект,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Контрагент,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.ДоговорКонтрагента,
	|	ВЫРАЗИТЬ(бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1 КАК Документ.бит_ФормаВводаБюджета),
	|	ВЫРАЗИТЬ(бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_2 КАК Справочник.ОбъектыСтроительства)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-23 (#3800)
	|	,бит_КонтрольныеЗначенияБюджетовОбороты.Период
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-23 (#3800)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-23 (#3800)
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подготовка.СтатьяОборотов КАК СтатьяОборотов,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Подготовка.ПериодИсх, МЕСЯЦ)) КАК Период,
	|	Подготовка.Сценарий КАК Сценарий,
	|	Подготовка.ЦФО КАК ЦФО,
	|	Подготовка.Проект КАК Проект,
	|	Подготовка.Контрагент КАК Контрагент,
	|	Подготовка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Подготовка.СценарийКонтролируемый КАК СценарийКонтролируемый,
	|	Подготовка.Аналитика_1 КАК Аналитика_1,
	|	Подготовка.Аналитика_2 КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_МинимальныеПериодыКонтракт
	|ИЗ
	|	Подготовка КАК Подготовка
	|ГДЕ
	|	Подготовка.СценарийКонтролируемый = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Контракт_Инвест)
	|	И Подготовка.СуммаСценарийКонтроль > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Подготовка.СтатьяОборотов,
	|	Подготовка.Сценарий,
	|	Подготовка.СценарийКонтролируемый,
	|	Подготовка.ЦФО,
	|	Подготовка.Проект,
	|	Подготовка.Контрагент,
	|	Подготовка.ДоговорКонтрагента,
	|	Подготовка.Аналитика_1,
	|	Подготовка.Аналитика_2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Подготовка.Аналитика_1 КАК Аналитика_1,
	|	БДДС.Период КАК Период,
	|	БДДС.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ИнвестСтрокиСПериодом
	|ИЗ
	|	Подготовка КАК Подготовка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета.БДДС КАК БДДС
	|		ПО Подготовка.Аналитика_1 = БДДС.Ссылка
	|			И (Подготовка.СценарийКонтролируемый = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Контракт_Инвест))
	|ГДЕ
	|	БДДС.СтатьяОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ИнвестСтрокиСПериодом.Аналитика_1 КАК Аналитика_1,
	|	МИНИМУМ(ВТ_ИнвестСтрокиСПериодом.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_МинИнвестСтрока
	|ИЗ
	|	ВТ_ИнвестСтрокиСПериодом КАК ВТ_ИнвестСтрокиСПериодом
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИнвестСтрокиСПериодом.Аналитика_1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ИнвестСтрокиСПериодом.Аналитика_1 КАК Аналитика_1,
	|	ВТ_ИнвестСтрокиСПериодом.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ПерваяИнвестСтрокаБДДС
	|ИЗ
	|	ВТ_ИнвестСтрокиСПериодом КАК ВТ_ИнвестСтрокиСПериодом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МинИнвестСтрока КАК ВТ_МинИнвестСтрока
	|		ПО ВТ_ИнвестСтрокиСПериодом.Аналитика_1 = ВТ_МинИнвестСтрока.Аналитика_1
	|			И ВТ_ИнвестСтрокиСПериодом.НомерСтроки = ВТ_МинИнвестСтрока.НомерСтроки
	|;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-23 (#3800)
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Подготовка.Период, ГОД) КАК Год,
	|	СУММА(Подготовка.Разница) КАК РазницаВГоду
	|ПОМЕСТИТЬ втОстаткиПоГодам
	|ИЗ
	|	Подготовка КАК Подготовка
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Подготовка.Период, ГОД)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подготовка.СтатьяОборотов,
	|	НАЧАЛОПЕРИОДА(Подготовка.Период, ГОД) КАК Год,
	|	Подготовка.Период КАК Период,
	|	Подготовка.Сценарий,
	|	Подготовка.ЦФО,
	|	Подготовка.Проект,
	|	Подготовка.СценарийКонтролируемый,
	|	Подготовка.Разница КАК СуммаОстаток,
	|	Подготовка.Аналитика_1,
	|	Подготовка.Аналитика_2,
	|	Подготовка.Контрагент,
	|	Подготовка.ДоговорКонтрагента,
	|	Подготовка.Разница КАК СуммаКонтроль,
	|	втОстаткиПоГодам.РазницаВГоду КАК РазницаВГоду
	|ИЗ
	|	Подготовка КАК Подготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоГодам КАК втОстаткиПоГодам
	|		ПО (НАЧАЛОПЕРИОДА(Подготовка.Период, ГОД) = втОстаткиПоГодам.Год)
	|ГДЕ
	|	Подготовка.Разница <> 0              //изменение по 3046
	|	И втОстаткиПоГодам.РазницаВГоду <> 0 //изменение по 3046
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-09-23 (#3800)
	|	И Подготовка.СценарийКонтролируемый <> ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Контракт_Инвест)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подготовка.СтатьяОборотов,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВТ_МинимальныеПериодыКонтракт.Период, ВТ_ПерваяИнвестСтрокаБДДС.Период), МЕСЯЦ),
	|	Подготовка.Период,
	|	Подготовка.Сценарий,
	|	Подготовка.ЦФО,
	|	Подготовка.Проект,
	|	Подготовка.СценарийКонтролируемый,
	|	Подготовка.Разница,
	|	Подготовка.Аналитика_1,
	|	Подготовка.Аналитика_2,
	|	Подготовка.Контрагент,
	|	Подготовка.ДоговорКонтрагента,
	|	Подготовка.Разница,
	|	втОстаткиПоГодам.РазницаВГоду
	|ИЗ
	|	Подготовка КАК Подготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоГодам КАК втОстаткиПоГодам
	|		ПО (НАЧАЛОПЕРИОДА(Подготовка.Период, ГОД) = втОстаткиПоГодам.Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МинимальныеПериодыКонтракт КАК ВТ_МинимальныеПериодыКонтракт
	|		ПО Подготовка.Сценарий = ВТ_МинимальныеПериодыКонтракт.Сценарий
	|			И Подготовка.СценарийКонтролируемый = ВТ_МинимальныеПериодыКонтракт.СценарийКонтролируемый
	|			И Подготовка.СтатьяОборотов = ВТ_МинимальныеПериодыКонтракт.СтатьяОборотов
	|			И Подготовка.ЦФО = ВТ_МинимальныеПериодыКонтракт.ЦФО
	|			И Подготовка.Проект = ВТ_МинимальныеПериодыКонтракт.Проект
	|			И Подготовка.Аналитика_1 = ВТ_МинимальныеПериодыКонтракт.Аналитика_1
	|			И Подготовка.Аналитика_2 = ВТ_МинимальныеПериодыКонтракт.Аналитика_2
	|			И Подготовка.Контрагент = ВТ_МинимальныеПериодыКонтракт.Контрагент
	|			И Подготовка.ДоговорКонтрагента = ВТ_МинимальныеПериодыКонтракт.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПерваяИнвестСтрокаБДДС КАК ВТ_ПерваяИнвестСтрокаБДДС
	|		ПО Подготовка.Аналитика_1 = ВТ_ПерваяИнвестСтрокаБДДС.Аналитика_1
	|ГДЕ
	|	Подготовка.Разница <> 0
	|	И втОстаткиПоГодам.РазницаВГоду <> 0
	|	И Подготовка.СценарийКонтролируемый = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Контракт_Инвест)
	|
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-09-23 (#3800)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Подготовка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОстаткиПоГодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СценарииБКОК";
	
КонецФункции // ТекстЗапросаДляРаспределенияЗакрытияОстатков()

//ОКЕЙ Рычаков А.С. (СофтЛаб) Начало 2019-09-24 (#3492)
&НаКлиенте
Процедура ОбновитьПризнакОтрицательныхОстатков(СтрокаРезультат)
	
	Если СтрокаРезультат <> Неопределено И СтрокаРезультат.СуммаОстаток < 0 Тогда 
		Объект.ок_ОтрицательныеОстатки = Истина;
	Иначе 
		
		Объект.ок_ОтрицательныеОстатки = Ложь;
		
		Для Каждого ТекущаяСтрока Из Объект.Результат Цикл 
			
			Если ТекущаяСтрока.СуммаОстаток < 0 Тогда
				Объект.ок_ОтрицательныеОстатки = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры
//ОКЕЙ Рычаков А.С. (СофтЛаб) Конец 2019-09-24 (#3492)
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-08-23 (#3427)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-24 (#3969)
&НаКлиенте
Процедура ЗагрузитьСписокФВБВОтбор()
	
	Если НЕ ПодключитьРасширениеРаботыСФайламиКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	// Создается диалог для открытия файла Excel.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = бит_ОбменДанными_Excel.ПолучитьФильтрДляВыбораФайлаExcel();
	Диалог.МножественныйВыбор = Ложь;
	
	Диалог.Показать(Новый ОписаниеОповещения("ФайлИсточникНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		ИмяФайла = ВыбранныеФайлы[0];
		
		ОткрываемыйФайл = Новый Файл(СокрЛП(ИмяФайла));
    
		Если ПустаяСтрока(ИмяФайла) ИЛИ
			 НЕ ОткрываемыйФайл.Существует()		
		Тогда
			ТекстСообщения = НСтр("ru = 'Указан неверный путь к файлу'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИмяФайла");
			Возврат;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru='Поиск ФВБ...'");
		Состояние(ТекстСообщения);
		
		Данные = ПолучитьТаблицуДанныхExcelНаКлиенте(ИмяФайла);
		СписокФВБ = ПолучитьСписокФВБ(Данные);
		
		ТекстСообщения = НСтр("ru='Выполнено'");
		Состояние(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьТаблицуДанныхExcelНаКлиенте(ФайлИсточник)
	
	Отказ = Ложь;
	
	// Получаем данные из структуры параметров.
	ФайлИсточник	 		   	= ФайлИсточник;
	СоотвПредстОбъектов   	   	= бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьСоответствиеПредставленийВидовОбъектов();
	ЗаписатьИзменения		   	= Истина;
	МассивНеРазрешимыхСимволов 	= бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьМассивНеРазрешимыхСимволов();
	НомерНачальнойКолонки 	   	= 1;
	НомерНачальнойСтроки  	   	= 1;
	НомерКонечнойСтроки  	   	= 0;
	ИмяЛиста					= 1;
	ИмяОбъекта					= "ФВБ";
	
	// Если номер начальной строки и колонки равны 1, тогда быстрое считывание данных разрешено.
	БыстроеСчитываниеДанных	   = ?(НомерНачальнойСтроки = 1 И НомерНачальнойКолонки = 1 И НомерКонечнойСтроки = 0,
								   Истина, Ложь);
								   
	// Создадим приложение Excel.
	Excel = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ);// , ВестиПротоколЗагрузки, ПротоколЗагрузки
	
	Если Excel = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Откроем указанный файл.
	ExcelФайл = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(Excel, ФайлИсточник, Отказ);// , ВестиПротоколЗагрузки, ПротоколЗагрузки
	
    Если ExcelФайл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

    Данные = Новый Структура;
	
	Попытка
	
		// Откроем лист Excel.
		ExcelЛист = бит_ОбменДаннымиЭксельКлиентСервер.GetExcelSheet(ExcelФайл, ИмяЛиста, Отказ); 
		
		Если ExcelЛист = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru='Загрузка не выполнена!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Данные.Вставить(ИмяОбъекта, Новый Массив);
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Получение данных из Excel'");
			Состояние(ТекстСообщения);
			
			ИмяЛистаИсточник = бит_ПроформыКлиентСервер.ListSourceSheetName();
			Попытка
				ЛистИсточникСписков = ExcelФайл.Sheets(ИмяЛистаИсточник);
				ЕстьСписки = Истина;
			Исключение
				ЕстьСписки = Ложь;
			КонецПопытки;
			
			Если ЕстьСписки Тогда
				// Чтение источников выпадающих списков
				СпискиИсточники = бит_ПроформыКлиентСервер.ПрочитатьСпискиИсточники(ExcelФайл);
			Иначе
				СпискиИсточники = Новый Соответствие;
			КонецЕсли;
			
			// Получаем таблицу значения для объекта.
			СтруктураДанных = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьТаблицуДанных(ExcelЛист, Неопределено, НомерНачальнойКолонки, НомерНачальнойСтроки, 
													МассивНеРазрешимыхСимволов, БыстроеСчитываниеДанных, НомерКонечнойСтроки);
			
			Данные.Вставить(ИмяОбъекта, СтруктураДанных.ТаблицаДанных);
			Данные.Вставить("НастройкиКолонок", СтруктураДанных.НастройкиКолонок);
			Данные.Вставить("СпискиИсточники", СпискиИсточники);
			
			ТекстСообщения = НСтр("ru='Получение данных из Excel завершено'");
			Состояние(ТекстСообщения);
			
		КонецЕсли;
		
		// Закроем открытый файл.
		бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelФайл,Ложь);
		
		// Закроем приложение Excel.
		бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Excel);
		
	Исключение
		
		// Закроем открытый файл.
		бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelФайл,Ложь);
		
		// Закроем приложение Excel.
		бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Excel);
		
	КонецПопытки; 
	
    Возврат Данные;
	
КонецФункции

&НаКлиенте
Функция ПодключитьРасширениеРаботыСФайламиКлиент()
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ТекстСообщения = НСтр("ru='Импорт объектов не доступен, т.к. не подключено расширение работы с файлами!'");
		бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол(ТекстСообщения, СтатусСообщения.Важное);
		
		Подключено = Ложь;
	Иначе
		Подключено = Истина;
	КонецЕсли;
	
	Возврат Подключено;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокФВБ(Данные)
	
	ТЗ_СписокНомеров = Новый ТаблицаЗначений();
	ТЗ_СписокНомеров.Колонки.Добавить("НомерЗаявки", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	
	Для каждого ЭлементМассива Из Данные.ФВБ Цикл
		НоваяСтрока = ТЗ_СписокНомеров.Добавить();
		
		НомерЗаявки = СокрЛП(ЭлементМассива.Номер);
		НомерЗаявки = СтрЗаменить(НомерЗаявки, Символы.НПП, 	"");
		НомерЗаявки = СтрЗаменить(НомерЗаявки, Символы.ВТаб,	"");
		НомерЗаявки = СтрЗаменить(НомерЗаявки, Символы.ПС,		"");
		НомерЗаявки = СтрЗаменить(НомерЗаявки, Символы.ПФ, 		"");
		НомерЗаявки = СтрЗаменить(НомерЗаявки, Символы.Таб, 	"");
		НомерЗаявки = СтрЗаменить(НомерЗаявки, Символы.ВК, 		"");

		НоваяСтрока.НомерЗаявки = НомерЗаявки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокНомеров.НомерЗаявки КАК НомерЗаявки
		|ПОМЕСТИТЬ ВТ_СписокНомеров
		|ИЗ
		|	&ТЗ_СписокНомеров КАК СписокНомеров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокНомеров.НомерЗаявки КАК НомерЗаявки,
		|	ЕСТЬNULL(МАКСИМУМ(бит_ФормаВводаБюджета.Ссылка), ЗНАЧЕНИЕ(Документ.бит_ФормаВводаБюджета.ПустаяСсылка)) КАК Ссылка
		|ИЗ
		|	ВТ_СписокНомеров КАК СписокНомеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
		|		ПО СписокНомеров.НомерЗаявки = бит_ФормаВводаБюджета.Номер
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокНомеров.НомерЗаявки";
	
	Запрос.УстановитьПараметр("ТЗ_СписокНомеров", ТЗ_СписокНомеров);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокФВБ = Новый СписокЗначений();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ФВБ №" + ВыборкаДетальныеЗаписи.НомерЗаявки + " в системе не найдена.");
			Продолжить;
		КонецЕсли; 
		
		СписокФВБ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
	ЭлементОтбора_ФВБ = Неопределено;
	Для каждого ЭлементОтбора Из КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналитика_1") Тогда
			ЭлементОтбора_ФВБ = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	
	КонецЦикла; 
	
	Если ЭлементОтбора_ФВБ = Неопределено Тогда
	
		ЭлементОтбора_ФВБ = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора_ФВБ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналитика_1");
	
	КонецЕсли; 
	
	ЭлементОтбора_ФВБ.Использование = Истина;
	ЭлементОтбора_ФВБ.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора_ФВБ.ПравоеЗначение = СписокФВБ;
	
	Возврат 1;
	
КонецФункции;
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-24 (#3969)