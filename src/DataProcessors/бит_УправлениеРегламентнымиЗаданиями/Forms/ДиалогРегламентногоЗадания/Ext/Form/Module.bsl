
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("Идентификатор") Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(Параметры.Идентификатор);
	
	УстановитьПривилегированныйРежим(Истина);
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РегламентноеЗадание = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не найдено регламентное задание!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
			ЭтаФорма,
			РегламентноеЗадание,
			"Ключ,
			|Наименование,
			|Использование,
			|ИмяПользователя,
			|ИнтервалПовтораПриАварийномЗавершении,
			|КоличествоПовторовПриАварийномЗавершении");
			
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = РегламентноеЗадание.Метаданные.Синоним;
	КонецЕсли;
			
	ИмяМетаданных = РегламентноеЗадание.Метаданные.Имя;
	Расписание	  = РегламентноеЗадание.Расписание;
	Идентификатор = Строка(РегламентноеЗадание.УникальныйИдентификатор);
	
	РасписаниеПредставление = Строка(Расписание);
	
	Если ИмяМетаданных = "бит_фн_ЗарегистрироватьДокументыПодлежащиеВизированию"
		И РегламентноеЗадание.Параметры.Количество() > 0 Тогда
		
		СтруктураПараметров = РегламентноеЗадание.Параметры[0];
		СтруктураПараметров.Свойство("Оповещение", Оповещение);
		СтруктураПараметров.Свойство("НастройкаОбработкиВизирования", НастройкаОбработкиВизирования);
		
		Если СтруктураПараметров.Свойство("СогласующиеЛица") Тогда
			Для Каждого СтрокаТаблицы Из СтруктураПараметров.СогласующиеЛица Цикл
				НоваяСтрока = СогласующиеЛица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Изменение кода. Начало. 18.11.2015{{
	Если ИмяМетаданных = "бит_УстановкаРешенийПоПросроченнымВизам"
		И РегламентноеЗадание.Параметры.Количество() > 0 Тогда
		
		СтруктураПараметров = РегламентноеЗадание.Параметры[0];
		
		СтруктураПараметров.Свойство("Решение",      Решение);
		СтруктураПараметров.Свойство("Статус",       Статус);
		СтруктураПараметров.Свойство("Организация",  Организация);
		СтруктураПараметров.Свойство("ОбъектСистемы",ОбъектСистемы);
		
	КонецЕсли;
	// Изменение кода. Конец. 18.11.2015}}
	
	// Изменение кода. Начало. 18.11.2015{{
	Если ИмяМетаданных = "бит_СоздатьДокументыПланированияИзДопУсловий"
		И РегламентноеЗадание.Параметры.Количество() > 0 Тогда
		
		СтруктураПараметров = РегламентноеЗадание.Параметры[0];
		
		// заявка на расходование ДС
		СтруктураПараметров.Свойство("СоздаватьЗаявкаНаРасходованиеДС", ЗаявкаНаРасходованиеДС);
		СтруктураПараметров.Свойство("ЗаявкаДни", ЗаявкаНаРасходованиеДСДни);

		// планируемое поступление ДС
		СтруктураПараметров.Свойство("СоздаватьПланируемоеПоступлениеДС", ПланируемоеПоступлениеДС);
		СтруктураПараметров.Свойство("ПланируемоеПоступлениеДни", ПланируемоеПоступлениеДСДни);

		// заявка на затраты
	    СтруктураПараметров.Свойство("СоздаватьЗаявкаНаЗатраты", ЗаявкаНаЗатраты);
		СтруктураПараметров.Свойство("ЗаявкаНаЗатратыДни", ЗаявкаНаЗатратыДни);

		// прогноз платежа
	    СтруктураПараметров.Свойство("СоздаватьПрогнозПлатежа", ПрогнозПлатежа);
		СтруктураПараметров.Свойство("ПрогнозПлатежаДни", ПрогнозПлатежаДни);

		СтруктураПараметров.Свойство("РежимЗаписи",  РежимЗаписи);
		
		СтруктураПараметров.Свойство("ДатаНачала",  ДатаНачала);

	ИначеЕсли  ИмяМетаданных = "бит_СоздатьДокументыПланированияИзДопУсловий" Тогда
		
		ЗаполнитьПараметрыСозданияДокументовПоУмолчанию();
		
	КонецЕсли;
	// Изменение кода. Конец. 18.11.2015}}
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		ТекстСообщения = НСтр("ru='Ошибка при получении списка пользователей информационной базы: %1%'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		ПользователиИБ = Неопределено;
	КонецПопытки;
	
	Если НЕ ПользователиИБ = Неопределено Тогда
		
	    Для Каждого Пользователь Из ПользователиИБ Цикл
			Элементы.ИмяПользователя.СписокВыбора.Добавить(Пользователь.Имя);
		КонецЦикла;
	
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Параметры регламентного задания изменены. Сохранить изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект); 
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		
	ИначеЕсли ИмяМетаданных = "бит_УстановкаРешенийПоПросроченнымВизам" Тогда

		Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
			ТекстСообщения = НСтр("ru='Необходимо указать пользователя для регламентного задания.'");
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Отказ = Истина;
			
		ИначеЕсли Не ЗначениеЗаполнено(Решение) Тогда
			
			ТекстСообщения = НСтр("ru='Необходимо указать решение визирования для регламентного задания.'");
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Отказ = Истина;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура окончание процедуры "ПередЗакрытиемЗавершение". 
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаписьВыполнена = ЗаписатьНастройкиРегламентногоЗадания();
		
		Если ЗаписьВыполнена Тогда
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
                
КонецПроцедуры // ПередЗакрытиемЗавершение()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура выполняет действия связанные с началом выбора настройки обработки визирования.
// 
&НаКлиенте
Процедура НачалоВыбораНастройкиОбработкиВизирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НастраиваемыйОбъект", "Обработка.бит_РабочееМестоВизирования");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.бит_СохраненныеНастройки.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидСобытия", ПредопределенноеЗначение("Перечисление.бит_фн_ВидыСобытийОповещений.ДокументыДляВизирования"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.бит_фн_Оповещения.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОбработкиВизированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораНастройкиОбработкиВизирования(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРасходованиеДСПриИзменении(Элемент)
	
	Если ЗаявкаНаРасходованиеДС Тогда
		ПрогнозПлатежа = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогнозПлатежаПриИзменении(Элемент)
	
	Если ПрогнозПлатежа Тогда
		ЗаявкаНаРасходованиеДС = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.Документ"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,ОбъектСистемы);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы",бит_Визирование.ВизируемыеОбъектыСистемы());
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласующиеЛица

&НаКлиенте
Процедура СогласующиеЛицаНастройкаОбработкиВизированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораНастройкиОбработкиВизирования(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	Диалог.Показать(Новый ОписаниеОповещения("НастроитьРасписаниеОкончание", ЭтотОбъект));
	
КонецПроцедуры

// Процедура окончание процедуры "НастроитьРасписаниеОкончание". 
// 
// Параметры:
//  Расписание - расписаниеРегламентногоЗадания.
//  ДополнительныеПараметры - Структура.
// 
&НаКлиенте 
Процедура НастроитьРасписаниеОкончание(ТекРасписание, ДополнительныеПараметры) Экспорт
	
	Если ТекРасписание <> Неопределено Тогда
		
		Расписание = ТекРасписание;
		РасписаниеПредставление = Строка(Расписание);
	
	КонецЕсли; 
	
КонецПроцедуры // НастроитьРасписаниеОкончание()

&НаКлиенте
Процедура Записать(Команда)
	
	Модифицированность = НЕ ЗаписатьНастройкиРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписьВыполнена = ЗаписатьНастройкиРегламентногоЗадания();
	
	Если ЗаписьВыполнена Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура ЗаполнитьПараметрыСозданияДокументовПоУмолчанию.
//
&НаСервере
Процедура ЗаполнитьПараметрыСозданияДокументовПоУмолчанию()

	РежимЗаписи = "Запись";
	
	ЗаявкаНаРасходованиеДС = Истина;	
    ЗаявкаНаРасходованиеДСДни = 3;
	
	ПрогнозПлатежа = Ложь;
	ПрогнозПлатежаДни = 0;
	
	ПланируемоеПоступлениеДС = Истина;	
    ПланируемоеПоступлениеДСДни = 3;

	ЗаявкаНаЗатраты = Истина;	
    ЗаявкаНаЗатратыДни = 3;	
	
	ДатаНачала = Дата(2016,1,1);
	
КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()
	
	Если ИмяМетаданных = "бит_фн_ЗарегистрироватьДокументыПодлежащиеВизированию" Тогда
		Элементы.ГруппаСтраницаПараметрыОповещенийВизирования.Видимость = Истина;
	Иначе
		Элементы.ГруппаСтраницаПараметрыОповещенийВизирования.Видимость = Ложь;
	КонецЕсли;
	
	Если ИмяМетаданных = "бит_УстановкаРешенийПоПросроченнымВизам" Тогда
		Элементы.ГруппаСтраницаНастройкаРешенийВизирования.Видимость = Истина;
	Иначе
		Элементы.ГруппаСтраницаНастройкаРешенийВизирования.Видимость = Ложь;
	КонецЕсли;
	
	// Изменение кода. Начало. 09.12.2016{{
	Если ИмяМетаданных = "бит_СоздатьДокументыПланированияИзДопУсловий" Тогда
		Элементы.ГруппаСтраницаПараметрыСозданияДокументов.Видимость = Истина;
	Иначе
		Элементы.ГруппаСтраницаПараметрыСозданияДокументов.Видимость = Ложь;
	КонецЕсли;
	// Изменение кода. Конец. 09.12.2016}}
	
КонецПроцедуры

// Функция выполняет запись параметров регламентного задания.
// 
&НаСервере
Функция ЗаписатьНастройкиРегламентногоЗадания()
	
	ЗаписьВыполнена = Ложь;
	
	Попытка
		
		УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(Идентификатор);
		
		УстановитьПривилегированныйРежим(Истина);
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗаполнитьЗначенияСвойств(
				РегламентноеЗадание,
				ЭтаФорма,
				"Ключ, 
				|Наименование,
				|Использование,
				|ИмяПользователя,
				|ИнтервалПовтораПриАварийномЗавершении,
				|КоличествоПовторовПриАварийномЗавершении");
		
		Если ИмяМетаданных = "бит_фн_ЗарегистрироватьДокументыПодлежащиеВизированию" Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Оповещение"					, Оповещение);
			СтруктураПараметров.Вставить("НастройкаОбработкиВизирования", НастройкаОбработкиВизирования);
			СтруктураПараметров.Вставить("СогласующиеЛица"				, СогласующиеЛица.Выгрузить());
			
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(СтруктураПараметров);
			
			РегламентноеЗадание.Параметры = ПараметрыЗадания;
			
		ИначеЕсли ИмяМетаданных = "бит_УстановкаРешенийПоПросроченнымВизам" Тогда
			
			СтруктураПараметров = Новый Структура;
		    СтруктураПараметров.Вставить("Решение",      Решение);
			СтруктураПараметров.Вставить("Статус",       Статус);
			СтруктураПараметров.Вставить("Организация",  Организация);
			СтруктураПараметров.Вставить("ОбъектСистемы",ОбъектСистемы);
			
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(СтруктураПараметров);
			
			РегламентноеЗадание.Параметры = ПараметрыЗадания;
			
		// Изменение кода. Начало. 09.12.2016{{
		ИначеЕсли ИмяМетаданных = "бит_СоздатьДокументыПланированияИзДопУсловий" Тогда
			
			СтруктураПараметров = Новый Структура;

			// заявка на расходование ДС
		    СтруктураПараметров.Вставить("СоздаватьЗаявкаНаРасходованиеДС", ЗаявкаНаРасходованиеДС);
			СтруктураПараметров.Вставить("ЗаявкаДни", ЗаявкаНаРасходованиеДСДни);

			// планируемое поступление ДС
		    СтруктураПараметров.Вставить("СоздаватьПланируемоеПоступлениеДС", ПланируемоеПоступлениеДС);
			СтруктураПараметров.Вставить("ПланируемоеПоступлениеДни", ПланируемоеПоступлениеДСДни);

			// заявка на затраты
		    СтруктураПараметров.Вставить("СоздаватьЗаявкаНаЗатраты", ЗаявкаНаЗатраты);
			СтруктураПараметров.Вставить("ЗаявкаНаЗатратыДни", ЗаявкаНаЗатратыДни);

			// прогноз платежа
		    СтруктураПараметров.Вставить("СоздаватьПрогнозПлатежа", ПрогнозПлатежа);
			СтруктураПараметров.Вставить("ПрогнозПлатежаДни", ПрогнозПлатежаДни);

            СтруктураПараметров.Вставить("РежимЗаписи",  РежимЗаписи);
			
			СтруктураПараметров.Вставить("ДатаНачала",  ДатаНачала);

			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(СтруктураПараметров);
			
			РегламентноеЗадание.Параметры = ПараметрыЗадания;
        // Изменение кода. Конец. 09.12.2016}}
		КонецЕсли;
		
		РегламентноеЗадание.Расписание = Расписание;
		
		УстановитьПривилегированныйРежим(Истина);
		РегламентноеЗадание.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗаписьВыполнена = Истина;
		
	Исключение	
		
		ТекстОшибки = ИнформацияОбОшибке();
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстОшибки);
		
	КонецПопытки;
	
	Возврат ЗаписьВыполнена;
	
КонецФункции

#КонецОбласти
