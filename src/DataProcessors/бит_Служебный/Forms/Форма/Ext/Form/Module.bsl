
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Проверки регистраторов хозрасчетный.
	ЭтоЕРП = бит_ОбщегоНазначения.ЭтоERP();
	
	// Планы обмена.
	ЗаИсключениемОбъектовНачинающихсяНа = "бит_";
	
	// Проверка открытия форм.
	СписокКоллекций.Добавить("Справочники", "Справочники");
	СписокКоллекций.Добавить("Документы", "Документы");
	СписокКоллекций.Добавить("Отчеты", "Отчеты");
	СписокКоллекций.Добавить("Обработки", "Обработки");
	СписокКоллекций.Добавить("ПланыВидовХарактеристик", "Планы видов характеристик");
	СписокКоллекций.Добавить("ПланыСчетов", "Планы счетов");
	СписокКоллекций.Добавить("РегистрыСведений", "Регистры сведений");
	СписокКоллекций.Добавить("РегистрыНакопления", "Регистры накопления");
	СписокКоллекций.Добавить("РегистрыБухгалтерии", "Регистры бухгалтерии");
    СписокКоллекций.ЗаполнитьПометки(Истина);
	
	// Тест записи объектов.
	Объект.Префикс = "бит_" ;
	Объект.ПроверитьСправочники = Истина;
	Объект.ПроверитьДокументы = Истина;
	Объект.ПроверитьПланыВидовРасчета = Истина;
	Объект.ПроверитьПланыВидовХарактеристик = Истина;
	Объект.ПроверитьПланыОбмена = Истина;
	Объект.ПроверитьПланыСчетов = Истина;
	ПланОбменаИсточник = "Полный";
	ПланОбменаПриемник = "бит_Полный";
		
	ОтражениеЗарплатыВБухучете = "< не выполнено >";

	РежимРаботы = 1;
	
	Показывать = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтернетПоддержкаПользователей",
		"ВсегдаПоказыватьПриСтартеПрограммы", Истина);
	
	Если бит_ОбщегоНазначения.ЭтоБП() Тогда
		ДатаТекущейВерсии = Константы.ДатаТекущейВерсии.Получить();
	Иначе
		Элементы.ДатаТекущейВерсии.Видимость = Ложь;
	КонецЕсли; 
	
	УправлениеФормой(ЭтаФорма);
	
	ВосстановитьНастройки();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	
	КлючОбъекта  = "СравнениеМетаданныхКонфигураций";
    КлючНастроек = "НастройкиПодключений";
    Настройки    = Объект.НастройкиПодключений.Выгрузить();
	Настройки.ЗаполнитьЗначения(Ложь, "ДанныеПрочитаны");
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта,  КлючНастроек, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ПередЗакрытиемНаСервере();
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПриИзменении(Элемент)
	ПоказыватьПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаТекущейВерсииПриИзменении(Элемент)
	ДатаТекущейВерсииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АнализироватьРолиПриИзменении(Элемент)
	
	Для каждого СтрокаНастройки Из Объект.НастройкиПодключений Цикл
		СтрокаНастройки.ДанныеПрочитаны = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ПрочитатьМетаданныеКонфигурацииНаСервере()
	
	НастройкиПодключения         = Объект.НастройкиПодключений.Выгрузить();
	
	ПараметрыПолученияМетаданных = Новый Структура;
	ПараметрыПолученияМетаданных.Вставить("НастройкиПодключения", НастройкиПодключения);
	ПараметрыПолученияМетаданных.Вставить("АнализироватьРоли", АнализироватьРоли);
	ПараметрыПолученияМетаданных.Вставить("АдресСтруктурыТаблицХранения", АдресСтруктурыТаблицХранения);
	ПараметрыПолученияМетаданных.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	РезультатЗагрузки            = ОбработкаОбъект().СтруктураТаблицКонфигураций(ПараметрыПолученияМетаданных);
	АдресСтруктурыТаблицХранения = РезультатЗагрузки.АдресСтруктурыТаблицХранения;
	
	Для каждого ИД Из РезультатЗагрузки.ИДЗагруженныхСтруктурБД Цикл
		СтрокаПодключения = НастройкиПодключения.Найти(ИД, "ИД");
		СтрокаПодключения.ДанныеПрочитаны = Истина;
	КонецЦикла;
	
	Объект.НастройкиПодключений.Загрузить(НастройкиПодключения);
	
	// Настройка компоновщика.
	Если НЕ ЭтоАдресВременногоХранилища(АдресСтруктурыТаблицХранения) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресСтруктурыТаблицХранения);
	Если СтруктураТаблиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивИД = Новый Массив;
	ТаблицаМетаданных  = СводнаяТаблицаМетаданных(СтруктураТаблиц, МассивИД);
	АдресТаблицыДанных = ПоместитьВоВременноеХранилище(ТаблицаМетаданных, УникальныйИдентификатор);
		
	Схема = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаКомпоновкиДанных");
	ПоляНабораДанных = Схема.НаборыДанных.ТаблицаМетаданных.Поля;
	
	Для каждого ИД Из МассивИД Цикл
		ПолеНабора = ПоляНабораДанных.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Заголовок   = "Найдено в: " + НаименованиеИБ(ИД);
	    ПолеНабора.ПутьКДанным = ПолеПризнакВхождения(ИД);
	    ПолеНабора.Поле        = ПолеПризнакВхождения(ИД);
		ПолеНабора.ТипЗначения = Новый ОписаниеТипов("Булево");
	КонецЦикла;
	
	НастройкиКомпоновкиДанных = Схема.НастройкиПоУмолчанию;
	Для каждого ИД Из МассивИД Цикл
		ВыбранноеПоле = НастройкиКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Заголовок     = "Найдено в: " + НаименованиеИБ(ИД);
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(ПолеПризнакВхождения(ИД));
	КонецЦикла;
	
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьМетаданныеКонфигурации(Команда)
	
	ПрочитатьМетаданныеКонфигурацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПодключений

&НаКлиенте
Процедура НастройкиПодключенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеНастройкиПодключенияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.бит_Служебный.Форма.НастройкаПодключения",,ЭтотОбъект,,,,
		Оповещение,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры
	
&НаКлиенте
Процедура НастройкиПодключенийПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.НастройкиПодключений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ                = Истина;
	
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения.Вставить("ИД"               , ТекущиеДанные.ИД);
	СтруктураПодключения.Вставить("Наименование"     , ТекущиеДанные.Наименование);
	СтруктураПодключения.Вставить("ПредставлениеПути", ТекущиеДанные.ПредставлениеПути);
	СтруктураПодключения.Вставить("ТипРасположения"  , ТекущиеДанные.ТипРасположения);
	СтруктураПодключения.Вставить("ИмяСервера"       , ТекущиеДанные.ИмяСервера);
	СтруктураПодключения.Вставить("ИмяБазы"          , ТекущиеДанные.ИмяБазы);
	СтруктураПодключения.Вставить("Путь"             , ТекущиеДанные.Путь);
	СтруктураПодключения.Вставить("Пользователь"     , ТекущиеДанные.Пользователь);
	СтруктураПодключения.Вставить("Пароль"           , ТекущиеДанные.Пароль);
	СтруктураПодключения.Вставить("НеАнализировать"  , ТекущиеДанные.НеАнализировать);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПодключения", СтруктураПодключения);
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеНастройкиПодключенияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.бит_Служебный.Форма.НастройкаПодключения",ПараметрыФормы,ЭтотОбъект,,,,
		Оповещение,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры
	
// Окончание редактирования окна "НастройкаПодключения".
//
&НаКлиенте
Процедура ИзменениеНастройкиПодключенияЗавершение(РезультатыНастроек, ДополнительныеПараметры) Экспорт
	
	Если РезультатыНастроек = Неопределено
		ИЛИ РезультатыНастроек = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиИД = Объект.НастройкиПодключений.НайтиСтроки(Новый Структура("ИД", РезультатыНастроек.ИД));
	Если СтрокиИД.Количество() = 0 Тогда
		СтрокаНастройки = Объект.НастройкиПодключений.Добавить();
	Иначе
		СтрокаНастройки = СтрокиИД[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаНастройки, РезультатыНастроек);
	СтрокаНастройки.ДанныеПрочитаны = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаРегистраторов

&НаКлиенте
Процедура ПроверитьРегистраторы(Команда)
	ПроверитьРегистраторыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьРегистраторыНаСервере()
	
	Обработки.бит_Служебный.ПроверитьРегистраторы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСоставныхТипов

&НаКлиенте
Процедура ПроверкаСоставныхТипов(Команда)
	ПроверкаСоставныхТиповНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверкаСоставныхТиповНаСервере()
	
	Элементы.ДекорацияОпасность.Видимость = Обработки.бит_Служебный.ПроверкаСоставныхТипов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СоответствиеРегистраторовХозрасчетный

&НаКлиенте
Процедура РегистраторыХозрасчетный(Команда)
	ЗаполнитьТаблицуРегистраторовХозрасчетныйСервер();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистраторовХозрасчетныйСервер()
	
	Обработки.бит_Служебный.ЗаполнитьТаблицуРегистраторовХозрасчетный(ЭтотОбъект);
	
КонецПроцедуры //ЗаполнитьТаблицуРегистраторовХозрасчетныйСервер()

#КонецОбласти 

#Область СоответствиеРегистраторовМеждународный

&НаКлиенте
Процедура РегистраторыМеждународный(Команда)
	ЗаполнитьТаблицуРегистраторовМеждународныйСервер();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистраторовМеждународныйСервер()
	
	Обработки.бит_Служебный.ЗаполнитьТаблицуРегистраторовМеждународный(ЭтотОбъект);
	
КонецПроцедуры //ЗаполнитьТаблицуРегистраторовХозрасчетныйСервер()

#КонецОбласти 

#Область СоответствиеРегистраторовХозрасчетныйПВХ

&НаКлиенте
Процедура ЗаполнитьПВХ(Команда)
	ЗаполнитьТаблицуПВХСервер();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПВХСервер()

	Обработки.бит_Служебный.ЗаполнитьТаблицуПВХ(ЭтотОбъект);
	
КонецПроцедуры // ЗаполнитьТаблицуПВХСервер()

#КонецОбласти 

#Область ПолучениеКонтрольныхСумм

&НаКлиенте
Процедура ПолучитьКонтрольныеСуммы(Команда)
	ПолучитьКонтрольныеСуммыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьКонтрольныеСуммыНаСервере()
	
	Обработки.бит_Служебный.ПолучитьКонтрольныеСуммы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область СортировкаМетаданных

&НаКлиенте
Процедура СформироватьСписки(Команда)
	
	СформироватьТаблицыМетаданныхСервер();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицыМетаданныхСервер()

	Обработки.бит_Служебный.СформироватьТаблицыМетаданных(ЭтотОбъект);
	
КонецПроцедуры // СформироватьТаблицыМетаданныхСервер()

#КонецОбласти

#Область СоответствиеПлановОбмена

&НаКлиенте
Процедура СоответствиеПлановОбмена(Команда)
	
	ПолучитьСоставПланаОбменаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСоставПланаОбменаСервер()

	ПротоколПланОбмена = "";
	Обработки.бит_Служебный.ПолучитьСоставПланаОбмена(ПланОбменаИсточник, ПланОбменаПриемник, ЗаИсключениемОбъектовНачинающихсяНа, ПротоколПланОбмена);

КонецПроцедуры // ПолучитьСоставПланаОбменаСервер()

&НаКлиенте
Процедура ПланОбменаИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	пСписокВыбора = ПолучитьСписокПлановОбмена();
	
	Оповещение = Новый ОписаниеОповещения("ПланОбменаИсточникОкончаниеВыбора", ЭтотОбъект); 
	пСписокВыбора.ПоказатьВыборЭлемента(Оповещение);
	
КонецПроцедуры

&НаКлиенте 
Процедура ПланОбменаИсточникОкончаниеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		ПланОбменаИсточник = ВыбранноеЗначение.Значение;
		
	КонецЕсли;
	
КонецПроцедуры // ПланОбменаИсточникОкончаниеВыбора()

&НаКлиенте
Процедура ПланОбменаПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	пСписокВыбора = ПолучитьСписокПлановОбмена();
	
	Оповещение = Новый ОписаниеОповещения("ПланОбменаПриемникОкончаниеВыбора", ЭтотОбъект); 
	пСписокВыбора.ПоказатьВыборЭлемента(Оповещение);
	
КонецПроцедуры

&НаКлиенте 
Процедура ПланОбменаПриемникОкончаниеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		ПланОбменаПриемник = ВыбранноеЗначение.Значение;
		
	КонецЕсли;
	
КонецПроцедуры // ПланОбменаПриемникОкончаниеВыбора()

&НаСервереБезКонтекста
Функция ПолучитьСписокПлановОбмена()
	
	МетаПланыОбмена = Метаданные.ПланыОбмена;
	
	пСписокВыбора = Новый СписокЗначений;
	
	Для Каждого ПланОбмена Из МетаПланыОбмена Цикл
		
		пСписокВыбора.Добавить(ПланОбмена.Имя, ПланОбмена.Синоним);
		
	КонецЦикла;
	
	Возврат пСписокВыбора;
	
КонецФункции

#КонецОбласти

#Область ПроверкаОткрытияФорм

&НаКлиенте
Процедура ВыполнитьПроверкуОткрытияФорм(Команда)
	
	ВыполнитьПроверкуОткрытияФормКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуОткрытияФормКлиент()
	
	ЕстьОшибки = Ложь;
	
	ПротоколПроверки.ДобавитьСтроку("");
	
	СоотвКоллекцияМассивИменОбъектов = ПолучитьСоответствиеКоллекцияМассивИменОбъектовСервер();
	СоотвКоллекцияМассивФорм = ПолучитьСоответствиеКоллекцияМассивФормСервер();
	
	СоотвИменКоллекции = Новый Соответствие;
	СоотвИменКоллекции.Вставить("Справочники", "Справочник");
	СоотвИменКоллекции.Вставить("Документы", "Документ");
	СоотвИменКоллекции.Вставить("Отчеты", "Отчет");
	СоотвИменКоллекции.Вставить("Обработки", "Обработка");
	СоотвИменКоллекции.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	СоотвИменКоллекции.Вставить("ПланыСчетов", "ПланСчетов");
	СоотвИменКоллекции.Вставить("РегистрыСведений", "РегистрСведений");
	СоотвИменКоллекции.Вставить("РегистрыНакопления", "РегистрНакопления");
	СоотвИменКоллекции.Вставить("РегистрыБухгалтерии", "РегистрБухгалтерии");
	
	ШаблонНачалоПротокола    = "-> Начало проверки открытия форм объектов БИТ.ФИНАНС (%1). Время: %2";
	ШаблонОкончаниеПротокола = "-> Конец проверки открытия форм объектов БИТ.ФИНАНС (%1). Время: %2";
	
	ИмяФормыШаблон       = "%1.%2.%3";
	Шаблонсообщения      = "Открывается форма %1 из %2";
	ШаблонПояснения      = "Форма %1";
	ШаблонОписанияОшибки = "!!!: Ошибка открытия формы ""%1"": %2";
	
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("АвтоТест",              РежимТестирования = 0);
	ПараметрыПередачи.Вставить("АвтотестЛицензирование",НЕ РежимТестирования = 0);
	
	Для Каждого ЭлементСписка Из СписокКоллекций Цикл
		
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ПротоколПроверки.ДобавитьСтроку(СтрШаблон(ШаблонНачалоПротокола, ЭлементСписка.Значение, Формат(ТекущаяДата(), "ДЛФ=DT")));
		
		ТекИмяКоллекции           = ЭлементСписка.Значение;
		ТекстИмяДляПолученияФормы = СоотвИменКоллекции.Получить(ТекИмяКоллекции);
		
		МассивИменФорм     = СоотвКоллекцияМассивФорм.Получить(ТекИмяКоллекции);
		МассивИменОбъектов = СоотвКоллекцияМассивИменОбъектов.Получить(ТекИмяКоллекции);
		
		Если ЗначениеЗаполнено(МассивИменОбъектов) Тогда
			
			Ном = 1;
			КолОбъектов = МассивИменОбъектов.КОличество();
			
			Для Каждого ТекИмяОбъекта Из МассивИменОбъектов Цикл
				Для Каждого ТекИмяФормы Из МассивИменФорм Цикл
					
					ТекИмяФормы    = СтрШаблон(ИмяФормыШаблон, ТекстИмяДляПолученияФормы, ТекИмяОбъекта, ТекИмяФормы);
					ТекстСообщения = СтрШаблон(Шаблонсообщения, Ном, КолОбъектов);
					ТекстПояснения = СтрШаблон(ШаблонПояснения, ТекИмяФормы);

					Состояние(ТекстСообщения, Цел(Ном * 100 / КолОбъектов), ТекстПояснения);
					Попытка 
						Если Найти(ТекИмяФормы, "ПрисоединенныеФайлы")=0
							И Найти(ТекИмяФормы, "бит_Служебный")=0 Тогда
							ФормаОбъекта = ОткрытьФорму(ТекИмяФормы, ПараметрыПередачи);
						КонецЕсли; 
						Если НЕ ФормаОбъекта = Неопределено И ФормаОбъекта.Открыта() Тогда
						     ФормаОбъекта.Закрыть(Неопределено);
						КонецЕсли; 
					Исключение
						ТекстСообщения = СтрШаблон(ШаблонОписанияОшибки, ТекИмяФормы, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
						ПротоколПроверки.ДобавитьСтроку(ТекстСообщения);
					КонецПопытки;
				КонецЦикла;
				
				Ном = Ном + 1;
				ОбработкаПрерыванияПользователя();
				
			КонецЦикла;
			
		КонецЕсли;
		ПротоколПроверки.ДобавитьСтроку(СтрШаблон(ШаблонОкончаниеПротокола, ЭлементСписка.Значение, Формат(ТекущаяДата(), "ДЛФ=DT")));		
	КонецЦикла;
	
	Состояние("");	
	ПоказатьПредупреждение(,"Проверка закончена");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеКоллекцияМассивИменОбъектовСервер() 
	
	СоотвКоллекцияМассивИменОбъектов = Обработки.бит_Служебный.ПолучитьСоответствиеКоллекцияМассивИменОбъектов(СписокКоллекций);
	
	Возврат СоотвКоллекцияМассивИменОбъектов;
	
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеКоллекцияМассивФормСервер() 
	
	СоотвКоллекцияМассивФорм = Обработки.бит_Служебный.ПолучитьСоответствиеКоллекцияМассивФорм();
	
	Возврат СоотвКоллекцияМассивФорм;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	// Установить пометку у всех строк.
    СписокКоллекций.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	// Снять пометку у всех строк.
    СписокКоллекций.ЗаполнитьПометки(Ложь);
	
КонецПроцедуры

#КонецОбласти 

#Область ТестЗаписиОбъектов

&НаСервере
Процедура ПоставитьФлажкиСервер()
	
	Объект.ПроверитьСправочники = Истина;
	Объект.ПроверитьДокументы = Истина;
	Объект.ПроверитьПланыВидовРасчета = Истина;
	Объект.ПроверитьПланыВидовХарактеристик = Истина;
	Объект.ПроверитьПланыОбмена = Истина;
	Объект.ПроверитьПланыСчетов = Истина;

КонецПроцедуры // ПоставитьФлажкиСервер()

&НаСервере
Процедура СнятьФлажкиСервер()

	Объект.ПроверитьСправочники = Ложь;
	Объект.ПроверитьДокументы = Ложь;
	Объект.ПроверитьПланыВидовРасчета = Ложь;
	Объект.ПроверитьПланыВидовХарактеристик = Ложь;
	Объект.ПроверитьПланыОбмена = Ложь;
	Объект.ПроверитьПланыСчетов = Ложь;

КонецПроцедуры // СнятьФлажкиСервер()

&НаСервере
Процедура ИнвертироватьФлажкиСервер()

	Объект.ПроверитьСправочники = НЕ Объект.ПроверитьСправочники;
	Объект.ПроверитьДокументы = НЕ Объект.ПроверитьДокументы;
	Объект.ПроверитьПланыВидовРасчета = НЕ Объект.ПроверитьПланыВидовРасчета;
	Объект.ПроверитьПланыВидовХарактеристик = НЕ Объект.ПроверитьПланыВидовХарактеристик;
	Объект.ПроверитьПланыОбмена = НЕ Объект.ПроверитьПланыОбмена;
	Объект.ПроверитьПланыСчетов = НЕ Объект.ПроверитьПланыСчетов;

КонецПроцедуры // ИнвертироватьФлажкиСервер()

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСообщение(Протокол, Сообщение)
	
	Протокол = Протокол+?(ПустаяСтрока(Протокол),"",Символы.ПС)+Сообщение;	
       
КонецПроцедуры // ДобавитьСообщение()

&НаКлиенте
Процедура ПроверитьСПрефиксомБитПриИзменении(Элемент)
	
	 Если Объект.ПроверитьСПрефиксомБит Тогда
	 
	 	  Элементы.Префикс.Доступность = Истина;
		  
	 Иначе
		  
	 	  Элементы.Префикс.Доступность = Ложь;
		                          
	 КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Href)	Тогда
		СтандартнаяОбработка = Ложь;
		ПерейтиПоНавигационнойСсылке(ДанныеСобытия.Href);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьФлажки(Команда)
	ПоставитьФлажкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	СнятьФлажкиСервер();	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьФлажки(Команда)
	ИнвертироватьФлажкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура КомандаТестировать(Команда)
	
	Протокол = "";
	
	ДобавитьСообщение(ПротоколЗаписиОбъектов, "<html><body><h1>Начало выполнения "+ТекущаяДата()+"</h1><i>");
	
	ВызватьМетодОбъекта();
	
	ДобавитьСообщение(ПротоколЗаписиОбъектов, "</i><h2>Выполнение завершено "+ТекущаяДата()+"</h2></body></html>");
	
КонецПроцедуры

&НаСервере
Процедура ВызватьМетодОбъекта()

	СтрПар = Новый Структура;
	СтрПар.Вставить("ПроверитьСПрефиксом", Объект.ПроверитьСПрефиксомБит);
	СтрПар.Вставить("Префикс", Объект.Префикс);
	СтрПар.Вставить("Справочники", Объект.ПроверитьСправочники);
	СтрПар.Вставить("Документы", Объект.ПроверитьДокументы);
	СтрПар.Вставить("ПланыВидовХарактеристик", Объект.ПроверитьПланыВидовХарактеристик);
	СтрПар.Вставить("ПланыОбмена", Объект.ПроверитьПланыОбмена);
	СтрПар.Вставить("ПланыСчетов", Объект.ПроверитьПланыСчетов);
	СтрПар.Вставить("ПланыВидовРасчета", Объект.ПроверитьПланыВидовРасчета);
	
	ОбОбъект = РеквизитФормыВЗначение("Объект");
	
	РезСтр = ОбОбъект.ПереборМетаданных(СтрПар);
	
	н=-1;
	Для н=н+1 По РезСтр.МассивРезультатовПроверки.Количество()-1 Цикл
	
		ТекстСообщения = "ОШИБКА. В объекте метаданных: <font = ""15""><b>%4%</font></br>%5%</b> <a href=""%1%"">%2%</a></br>По причине: %3%</br>-------------------------------</br>";
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
		, РезСтр.МассивРезультатовПроверки[н].Элемент
		, РезСтр.МассивРезультатовПроверки[н].Название
		, РезСтр.МассивРезультатовПроверки[н].Ошибка
		, РезСтр.МассивРезультатовПроверки[н].МетаОбъект
		, РезСтр.МассивРезультатовПроверки[н].Текст);
		ДобавитьСообщение(ПротоколЗаписиОбъектов, ТекстСообщения);
		
	КонецЦикла;	
	
КонецПроцедуры // ВызватьМетодОбъекта()

#КонецОбласти 

#Область СброситьБлокировкуСВнешнимиРесурсами

&НаКлиенте
Процедура СброситьБлокировкуСВнешнимиРесурсами(Команда)
	
	СброситьБлокировкуСВнешнимиРесурсамиСервер();
	
	ТекстСообщения = НСтр("ru = 'Разблокировано.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура СброситьБлокировкуСВнешнимиРесурсамиСервер()
	
	Обработки.бит_Служебный.СброситьБлокировкуСВнешнимиРесурсами();
	
КонецПроцедуры // СброситьБлокировкуСВнешнимиРесурсамиСервер()
	
#КонецОбласти 

#Область ИзмененныеСвойстваОбъектов

&НаСервереБезКонтекста
Процедура ПроверитьСвойстваОбъектовМДНаСервере(ОтражениеЗарплатыВБухучете)
	
	ОтражениеЗарплатыВБухучете = Обработки.бит_Служебный.ПроверитьСвойстваОбъектовМДНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеЗарплатыВБухучетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПроверитьСвойстваОбъектовМДНаСервере(ОтражениеЗарплатыВБухучете);
	
КонецПроцедуры

#КонецОбласти 

#Область ПроверкаСтатистики

&НаСервере
Процедура ПроверкаРаботыСтатистикиНаСервере()
	
	Результат = бит_ук_АссистентСервер.lsbAPI_TestConnection();
	Если бит_ук_АссистентСервер.НетОшибок(Результат) Тогда
		ОшибкаСтатистика = "Работает";
	Иначе
		// проблема
		ОшибкаСтатистика = бит_ук_АссистентСервер.СформироватьОтчетПоОбъектуРезультата(Результат);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаРаботыСтатистики(Команда)
	ПроверкаРаботыСтатистикиНаСервере();
КонецПроцедуры

#КонецОбласти 

#Область ПроверкаТиповыхПеречислений

&НаСервере
Процедура ПроверкаТиповыхПеречисленийНаСервере()

	Элементы.ДекорацияОпасность.Видимость = Обработки.бит_Служебный.ПроверкаТиповыхПеречислений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаТиповыхПеречислений(Команда)
	ПроверкаТиповыхПеречисленийНаСервере();
КонецПроцедуры

#КонецОбласти 

#Область ИнтернетПоддержка

&НаСервере
Процедура ПоказыватьПриИзмененииНаСервере()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИнтернетПоддержкаПользователей", 
		"ВсегдаПоказыватьПриСтартеПрограммы", Показывать);
	
КонецПроцедуры

&НаСервере
Процедура ДатаТекущейВерсииПриИзмененииНаСервере()
	
	Константы.ДатаТекущейВерсии.Установить(ДатаТекущейВерсии);
	
КонецПроцедуры
	
#КонецОбласти 

#Область ЦентрУправленияИзменениями
	
&НаКлиенте
Процедура ИзменитьНастройки(Команда)
	
	ИзменитьНастройкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАлгоритмыПроцессов(Команда)
	
	СоздатьАлгоритмыПроцессовНаСервере();
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.бит_уп_Алгоритмы"));
	ОповеститьОбИзменении(Тип("СправочникСсылка.бит_уп_ТочкиАлгоритмов"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьНастройкиНаСервере()
	
	Константы.ИспользоватьАльтернативныйСерверДляЗагрузкиКурсовВалют.Установить(Истина);
    Сообщить("Установлена возможность использования альтернативного сервера для загрузки валют.");
    //Сообщить(Константы.ИспользоватьАльтернативныйСерверДляЗагрузкиКурсовВалют.Получить());
    
    // Константа ИспользоватьАльтернативныйСерверДляЗагрузкиКлассификатораБанков удалена в 3.0.75.37.
	
    ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИнтернетПоддержкаПользователей", 
		"ВсегдаПоказыватьПриСтартеПрограммы", Ложь);    
    Сообщить("Отменено отображение формы интернет поддержки при открытии приложения.");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьАлгоритмыПроцессовНаСервере()
	
	Обработки.бит_Служебный.СозданиеАлгоритмовПроцессов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы    = Форма.Элементы;
	Объект      = Форма.Объект;
	Тестировщик = (Форма.РежимРаботы = 0);
	
	Элементы.ПланыОбмена.Видимость 						  = НЕ Тестировщик;
	Элементы.ГруппаРегистраторы.Видимость 				  = НЕ Тестировщик;
	Элементы.КонтрольныеСуммы.Видимость 				  = НЕ Тестировщик;
	Элементы.РегистраторыХозрасчетный.Видимость 		  = НЕ Тестировщик;
	Элементы.ТипыПВХ.Видимость 							  = НЕ Тестировщик;
	Элементы.ПроверкаСортировкиМетаданных.Видимость		  = НЕ Тестировщик;
	Элементы.ПроверкаСоставныхТипов.Видимость 			  = НЕ Тестировщик;
	Элементы.РегистраторыМеждународный.Видимость 		  = НЕ Тестировщик;	

КонецПроцедуры // УправлениеФормой()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента 	  = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиПодключений");
	
	ОтборЭлементаУО = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаУО.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.НастройкиПодключений.ДанныеПрочитаны");
	ОтборЭлементаУО.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаУО.ПравоеЗначение = Истина;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,Истина));
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента 	  = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиПодключений");
	
	ОтборЭлементаУО = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаУО.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.НастройкиПодключений.НеАнализировать");
	ОтборЭлементаУО.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаУО.ПравоеЗначение = Истина;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
КонецПроцедуры

Функция ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля) Экспорт
	
	ПолеЭлемента 		= КоллекцияОформляемыхПолей.Элементы.Добавить();
	ПолеЭлемента.Поле 	= Новый ПолеКомпоновкиДанных(ИмяПоля);

	Возврат ПолеЭлемента;
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	КлючОбъекта  = "СравнениеМетаданныхКонфигураций";
    КлючНастроек = "НастройкиПодключений";
	
	СохраненныеНастройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек);
	Если СохраненныеНастройки <> Неопределено Тогда
		СохраненныеНастройки.ЗаполнитьЗначения(Ложь, "ДанныеПрочитаны");
		Объект.НастройкиПодключений.Загрузить(СохраненныеНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресТаблицыДанных) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо считать данные конфигурации.";
		Сообщение.Поле  = "ВыполнитьПроверку";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	
	Схема     = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	Настройки = Компоновщик.ПолучитьНастройки();
	
	// Формирование макета, с помощью компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Передача схемы, настроек и данных расшифровки в макет компоновки.
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(Схема, Настройки);
	
	// Внешние наборы данных
	ТаблицаМетаданных = ПолучитьИзВременногоХранилища(АдресТаблицыДанных);
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаМетаданных", ТаблицаМетаданных);
	
	// Выполнение компоновки с помощью процессора компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,, Истина);
                  
	// Вывод таблицы   	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьДокумент(Результат); 	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТекущийЭлемент = Элементы.Результат;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СводнаяТаблицаМетаданных(СтруктураТаблиц, МассивИД)
	
	Запрос   = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Для каждого ЭлементСтруктуры Из СтруктураТаблиц Цикл
		ИД            = ЭлементСтруктуры.Ключ;
		ТаблицаДанных = ЭлементСтруктуры.Значение;
		МассивИД.Добавить(ИД);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.ВладелецСвойства КАК ВладелецСвойства,
		|	ТаблицаДанных.Значение КАК Значение,
		|	ТаблицаДанных.Свойство КАК Свойство,
		|	ТаблицаДанных.ТипОбъекта КАК ТипОбъекта,
		|	ТаблицаДанных.ХешКлюча КАК ХешКлюча
		|ПОМЕСТИТЬ ТаблицаДанныхПриемник
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ХешКлюча";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДанныхПриемник", ИД);
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		Запрос.Выполнить();
		
	КонецЦикла;
	
	ПервыйЭлемент = Истина;
	Для каждого ИД Из МассивИД Цикл
		Если ПервыйЭлемент Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДанныхИсточник.ХешКлюча
			|ПОМЕСТИТЬ ДанныеКлючей
			|ИЗ
			|	ТаблицаДанныхИсточник КАК ТаблицаДанныхИсточник";
			ПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ТаблицаДанныхИсточник.ХешКлюча
			|ИЗ
			|	ТаблицаДанныхИсточник КАК ТаблицаДанныхИсточник";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДанныхИсточник", ИД);
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
			|
			|;
			|///////////////////////////////////////////////////
			|";
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВЫБОР";
	Для каждого ИД Из МассивИД Цикл 
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА НЕ " + ИД + ".ВладелецСвойства ЕСТЬ NULL
		|			ТОГДА " + ИД + ".ВладелецСвойства";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|	КОНЕЦ КАК ВладелецСвойства,
	|	ВЫБОР";
	Для каждого ИД Из МассивИД Цикл 
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА НЕ " + ИД + ".Значение ЕСТЬ NULL
		|			ТОГДА " + ИД + ".Значение";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|	КОНЕЦ КАК Значение,
	|	ВЫБОР";
	Для каждого ИД Из МассивИД Цикл 
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА НЕ " + ИД + ".Свойство ЕСТЬ NULL
		|			ТОГДА " + ИД + ".Свойство";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|	КОНЕЦ КАК Свойство,
	|	ВЫБОР";
	Для каждого ИД Из МассивИД Цикл 
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА НЕ " + ИД + ".ТипОбъекта ЕСТЬ NULL
		|			ТОГДА " + ИД + ".ТипОбъекта";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|	КОНЕЦ КАК ТипОбъекта,";
	Для каждого ИД Из МассивИД Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР
		|		КОГДА " + ИД + ".ХешКлюча ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК " + ПолеПризнакВхождения(ИД) + ",";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|	ДанныеКлючей.ХешКлюча КАК ХешКлюча
	|ИЗ
	|	ДанныеКлючей КАК ДанныеКлючей";
	Для каждого ИД Из МассивИД Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИД + " КАК " + ИД + "
		|		ПО ДанныеКлючей.ХешКлюча = " + ИД + ".ХешКлюча";
	КонецЦикла;
	
	Запрос.Текст     = ТекстЗапроса;
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаРезультат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолеПризнакВхождения(ИД)
	
	Возврат "ПрисутствуетВ" + ИД;
	
КонецФункции

&НаСервере
Функция НаименованиеИБ(ИД)
	
	Для каждого СтрокаПодключения Из Объект.НастройкиПодключений Цикл
		Если СтрокаПодключения.ИД = ИД Тогда
			Возврат СтрокаПодключения.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "<База не найдена>";
	
КонецФункции

#КонецОбласти