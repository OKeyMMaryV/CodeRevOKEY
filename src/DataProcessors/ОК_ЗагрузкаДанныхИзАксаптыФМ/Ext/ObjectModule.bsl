//ОК+ Аверьянова 13.08.15 - добавлено заполнение РС Сопоставление аналитики по РБП + по договорам изменения по записи дока УстановкаВидовРасчетов (перенесено в 3.0 13.04.16)

// Параметры соединения с SQL
Перем Адрес;
Перем Пользователь;
Перем Пароль;
Перем БазаДанных;
Перем ПодключеноКБазе;
Перем мТаймаут;

// Почтовые параметры
Перем мСерверSMTP;
Перем мПортSMTP;
Перем мПользовательSMTP;
Перем мПарольSMTP;
Перем мОтправитель;
Перем мКому;
Перем мАутентификация;

Перем Граница;
Перем мПоставщики;
Перем мПокупатели;

Перем мТЗКонтрагентов;

Перем ПорцияТранзакции;
Перем РБСтрокаСоединения;
Перем РБАдресСервера;

Перем мГруппаПоОрганизации; 
Перем мГруппаНоменклатура; 
Перем мГруппаРБП; 
// ++ BIT AMerkulov 24072014 /Загрузка ОС
Перем мГруппаОС;
// -- BIT AMerkulov 24072014 /Загрузка ОС

// ++ BIT AMerkulov 03112014 /Загрузка НМА
Перем мГруппаНМА;		
// -- BIT AMerkulov 03112014 /Загрузка НМА



// объекты для подключения к базе
Перем СоединениеАДО, ЗапросАДО; 

// таблица для формирования отчета об ошибках
Перем ТаблицаОшибок, мПутьСохраненияОтчетовОбОшибках;
Перем ТаблицаОшибокБезИсключений, КоличествоЗагруженных, СопоставленныеДоговора;
Перем КоличествоДокЗагруженных, ВремяНачалаЗагрузки, ВремяОкончанияЗагрузки; // Ок Видяйкин В.И. 20171121 (Извещение на e-mail о рез. выполнения регл. задания "ОК_ЗагрузкаДанныхИзАксаптыФМ")

Процедура ВыводСтатусаСообщения(Статус = Неопределено, Сообщение = Неопределено, ПроверятьПрерывение = Ложь) Экспорт 

	#Если Клиент Тогда
		Если Статус <> Неопределено Тогда 
			Состояние(Статус);
		КонецЕсли;
		
		Если Сообщение <> Неопределено Тогда 
			Сообщить(Сообщение);
		КонецЕсли;
		
		Если ПроверятьПрерывение Тогда 
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
	#КонецЕсли 

КонецПроцедуры

Процедура ЗаполнитьНастройки() Экспорт
	  ЗаполнитьНастройкиФМ();	
КонецПроцедуры

Процедура ЗагрузитьКонтрагентов() Экспорт
	
	Если Не ПодключеноКБазе Тогда
		Если НЕ ПодключениеКБазе() Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Сообщение				= "Начало загрузки контрагентов:	" + ТекущаяДата();
	Статус					= "Загрузка контрагентов из SQL";
	ВыводСтатусаСообщения(Статус, Сообщение);
	
	// Получаем данные из Аксапты
	//Формирование запроса
	ЗапросАДО.CommandText = "select DISTINCT
	|	AccountNum,
	|	Name,
	|	NameAlias,
	|	INN,
	|	recno,
	|	ParentId,
	|	InventClass,
	|	Blocked,
	|	Address,
	|	DivisionId 
	|from "+БазаДанных+".dbo.CustVendTable_EXT 
	|where state = 0 
	//and ExpCompanyId='D' 
	|and name<>''
	|";
	
	//Выполнение запроса
	Выборка = ЗапросАДО.Execute(); 
	КонтрагентыSQL.Очистить();
	
	Пока Не Выборка.EOF() Цикл 
	   НовСтр = КонтрагентыSQL.Добавить();
	   Для Каждого ЗначениеSQL из Выборка.Fields Цикл 
		   НовСтр[ЗначениеSQL.Name] = ЗначениеSQL.Value;
	   КонецЦикла;
	   Выборка.MoveNext(); 
	КонецЦикла;	
	
	Если КонтрагентыSQL.Количество() = 0 Тогда
		Сообщение	= "Таблица контрагентов пуста:		" + ТекущаяДата() ;
		ВыводСтатусаСообщения(, Сообщение);
		Возврат;
	КонецЕсли;
	
	СтрокаКонтрагентовКОчистке = "";
	
	ВыводСтатусаСообщения("Сопоставление контрагентов с данными базы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыSQL.AccountNum,
	               |	КонтрагентыSQL.Name,
	               |	КонтрагентыSQL.NameAlias,
	               |	КонтрагентыSQL.INN,
	               |	КонтрагентыSQL.recno,
	               |	КонтрагентыSQL.ParentId,
	               |	КонтрагентыSQL.InventClass,
	               |	КонтрагентыSQL.Blocked,
	               |	КонтрагентыSQL.Address,
	               |	КонтрагентыSQL.DivisionId
	               |ПОМЕСТИТЬ ВТ_КонтрагентыSQL
	               |ИЗ
	               |	&КонтрагентыSQL КАК КонтрагентыSQL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КонтрагентыSQL.AccountNum,
	               |	МАКСИМУМ(ВТ_КонтрагентыSQL.recno) КАК recno
	               |ПОМЕСТИТЬ ВТ_МаксRecno
	               |ИЗ
	               |	ВТ_КонтрагентыSQL КАК ВТ_КонтрагентыSQL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_КонтрагентыSQL.AccountNum
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_КонтрагентыSQL.AccountNum,
	               |	ВТ_КонтрагентыSQL.Name,
	               |	ВТ_КонтрагентыSQL.NameAlias,
	               |	ВТ_КонтрагентыSQL.INN,
	               |	ВТ_КонтрагентыSQL.recno,
	               |	ВТ_КонтрагентыSQL.ParentId,
	               |	ВТ_КонтрагентыSQL.InventClass,
	               |	ВТ_КонтрагентыSQL.Blocked,
	               |	ВТ_КонтрагентыSQL.Address,
	               |	ВТ_КонтрагентыSQL.DivisionId,
	               |	Контрагенты.Ссылка,
	               |	Контрагенты.Ссылка КАК КонтрагентБД,
	               |	ВЫБОР
	               |		КОГДА ВТ_МаксRecno.recno ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК МаксRecno
	               |ИЗ
	               |	ВТ_КонтрагентыSQL КАК ВТ_КонтрагентыSQL
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ((ВЫРАЗИТЬ(ВТ_КонтрагентыSQL.AccountNum КАК СТРОКА(25))) = (ВЫРАЗИТЬ(Контрагенты.НомДокИмпорт КАК СТРОКА(25))))
	               |			И (Контрагенты.НомДокИмпорт <> """")
	               |			И (Контрагенты.Ссылка В ИЕРАРХИИ (&мГруппаПоОрганизации))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксRecno КАК ВТ_МаксRecno
	               |		ПО ВТ_КонтрагентыSQL.AccountNum = ВТ_МаксRecno.AccountNum
	               |			И ВТ_КонтрагентыSQL.recno = ВТ_МаксRecno.recno";  
	
	Запрос.УстановитьПараметр("КонтрагентыSQL", КонтрагентыSQL);
	Запрос.УстановитьПараметр("мГруппаПоОрганизации", мГруппаПоОрганизации);
	СопоставленныеКонтрагенты 		= Запрос.Выполнить().Выгрузить();
	
	КонтрагентыSQL.Загрузить(СопоставленныеКонтрагенты);
	
	Инд 							= 1;
	ВсегоСтрок						= СопоставленныеКонтрагенты.Количество();
	
	// Обходим полученные данные
	Для каждого СтрокаТЗ из СопоставленныеКонтрагенты Цикл
		ВыводСтатусаСообщения("Обрабатывается контрагент " + Инд + " из " + ВсегоСтрок, ,Истина);
		Инд							= Инд + 1;
		
		Если СтрокаТЗ.МаксRecno Тогда  
			НачатьТранзакцию();
			
			//ОК+ Аверьянова 24.02.15 исправление ошибки - не находит КА в подпапке 
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|   Контрагенты.НомДокИмпорт = &НомДокИмпорт				
				|	И Контрагенты.Родитель В ИЕРАРХИИ(&Родитель)";

			Запрос.УстановитьПараметр("НомДокИмпорт", СтрокаТЗ.AccountNum);
			Запрос.УстановитьПараметр("Родитель", мГруппаПоОрганизации);

			Результат = Запрос.Выполнить().Выбрать();

			Если Результат.Следующий() Тогда
				СтрокаТЗ.КонтрагентБД = Результат.Ссылка;
			КонецЕсли;
			//ОК- Аверьянова 24.02.15
						
			Если ЗначениеЗаполнено(СтрокаТЗ.КонтрагентБД) Тогда  
				ЭтоНовыйКА = Ложь;   //ОК Аверьянова 12.04.17  
				Контрагент 				= СтрокаТЗ.КонтрагентБД.ПолучитьОбъект();
				Контрагент.Наименование = СтрокаТЗ.Name; 
			Иначе
				ЭтоНовыйКА = Истина;   //ОК Аверьянова 12.04.17 
				// Не нашли - создаем нового
				Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
				Если Лев(СтрокаТЗ.AccountNum, 1) = "П" Тогда
					// Родитель - группа поставщики
					Контрагент.Родитель = мПоставщики;
				Иначе
					// Родитель - группа покупатели
					Контрагент.Родитель = мПокупатели;
				КонецЕсли;
				Контрагент.НомДокИмпорт = СтрокаТЗ.AccountNum;
				Контрагент.Наименование = СтрокаТЗ.Name;
				Контрагент.Записать(); // Нужно записать, что бы в ГоловнойКонтрагент можно было поставить ссылку
			КонецЕсли;
			Контрагент.ГоловнойКонтрагент = Контрагент.Ссылка; 
			Контрагент.НаименованиеПолное = СтрокаТЗ.Name;
			Слэш						= Найти(СтрокаТЗ.INN, "/");
			Если ЗначениеЗаполнено(Слэш)Тогда
				Контрагент.ИНН 				= Лев(СтрокаТЗ.INN, Слэш-1);
				Контрагент.КПП				= Прав(СтрокаТЗ.INN, СтрДлина(СтрокаТЗ.INN)-Слэш);
			Иначе
				Контрагент.ИНН 				= СтрокаТЗ.INN;
			КонецЕсли;
			
			Контрагент.Записать();
			
			КонтрагентыSQL[Инд-2].Ссылка = Контрагент.Ссылка;
			
			//ОК+ Аверьянова 12.04.17 - будем перезаписывать адрес, а не создавать новые строки
			// заполнить адреса
			//// Юридический адрес
			//ЗаписьЮА 					= Контрагент.КонтактнаяИнформация.Добавить();
			//ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
			//ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			//ЗаписьЮА.Представление 		= СтрокаТЗ.Address;
			//
			//// Фактический адрес
			//ЗаписьФА 					= Контрагент.КонтактнаяИнформация.Добавить();
			//ЗаписьФА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
			//ЗаписьФА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			//ЗаписьФА.Представление 		= СтрокаТЗ.Address;
			//Контрагент.Записать();
			
			Если ЭтоНовыйКА Тогда
				// Юридический адрес
				ЗаписьЮА 					= Контрагент.КонтактнаяИнформация.Добавить();
				ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				ЗаписьЮА.Представление 		= СтрокаТЗ.Address;
				
				// Фактический адрес
				ЗаписьФА 					= Контрагент.КонтактнаяИнформация.Добавить();
				ЗаписьФА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				ЗаписьФА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ЗаписьФА.Представление 		= СтрокаТЗ.Address;  				
			Иначе
				ЗапросКИ = Новый Запрос;     //получим конт.информацию КА
				
				// Ок Видяйкин В. 20170517 + исправление загрузки контрагентов: фактический и юридический адреса.
				// Необходимо учесть вариант, когда у контрагента отсутствуют строки адреса в "КонтактнаяИнформация"				
				// в нижеследующем запросе дополнительные строки: 
				//  Выбор Когда КИ_ЮрАдрес.ЮрАдрес ЕСТЬ NULL Тогда 0 Иначе 1 Конец КАК ЕстьЮрАдрес,
				//  Выбор Когда КИ_ФактАдрес.Представление ЕСТЬ NULL Тогда 0 Иначе 1 Конец КАК ЕстьФактАдрес
				// Ок Видяйкин В. 20170517 -
				ЗапросКИ.Текст = 
					"ВЫБРАТЬ
					|	Контрагенты.Ссылка КАК КА,
					|	КИ_ЮрАдрес.ЮрАдрес КАК ЮрАдрес,
                    |	Выбор Когда КИ_ЮрАдрес.ЮрАдрес ЕСТЬ NULL Тогда 0 Иначе 1 Конец КАК ЕстьЮрАдрес,
					|	КИ_ФактАдрес.Представление КАК ФактАдрес,
	                |	Выбор Когда КИ_ФактАдрес.Представление ЕСТЬ NULL Тогда 0 Иначе 1 Конец КАК ЕстьФактАдрес
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			КонтрагентыКонтактнаяИнформация.Представление КАК ЮрАдрес,
					|			КонтрагентыКонтактнаяИнформация.Ссылка.Код КАК Код
					|		ИЗ
					|			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
					|		ГДЕ
					|			КонтрагентыКонтактнаяИнформация.Вид = &ВидЮрАдрес) КАК КИ_ЮрАдрес
					|		ПО (КИ_ЮрАдрес.Код = Контрагенты.КонтактнаяИнформация.Ссылка.Код)
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			КонтрагентыКонтактнаяИнформация.Ссылка.Код КАК Код,
					|			КонтрагентыКонтактнаяИнформация.Представление КАК Представление
					|		ИЗ
					|			Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
					|		ГДЕ
					|			КонтрагентыКонтактнаяИнформация.Вид = &ВидФактАдрес) КАК КИ_ФактАдрес
					|		ПО (КИ_ФактАдрес.Код = Контрагенты.КонтактнаяИнформация.Ссылка.Код)
					|ГДЕ
					|	Контрагенты.Ссылка = &КА";
				
				ЗапросКИ.УстановитьПараметр("КА", Контрагент.Ссылка);
				ЗапросКИ.УстановитьПараметр("ВидЮрАдрес",Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
				ЗапросКИ.УстановитьПараметр("ВидФактАдрес",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
				
				Результат = ЗапросКИ.Выполнить();
				КИ_КА = Результат.Выбрать();
				
				// Ок Видяйкин В. 20170517 +  исправление загрузки контрагентов: фактический и юридический адреса.
				//
				//Если КИ_КА.Количество() = 0 Тогда
				//    //Сообщить("у контрагента "+Контрагент.Наименование+" отсутствует конт.информация");	
				//	// Юридический адрес
				//	ЗаписьЮА 					= Контрагент.КонтактнаяИнформация.Добавить();
				//	ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				//	ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				//	ЗаписьЮА.Представление 		= СтрокаТЗ.Address;
				//	
				//	// Фактический адрес
				//	ЗаписьФА 					= Контрагент.КонтактнаяИнформация.Добавить();
				//	ЗаписьФА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				//	ЗаписьФА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				//	ЗаписьФА.Представление 		= СтрокаТЗ.Address;
				//иначе
				//	Контрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "Вид").Представление  = СтрокаТЗ.Address;
				//	Контрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "Вид").Представление = СтрокаТЗ.Address;
				//КонецЕсли;	
				//
				ФлЕстьСтрокаЮрАдресКонтрагента   = 0;
				ФлЕстьСтрокаФактАдресКонтрагента = 0;
				Если КИ_КА.Количество() > 0 Тогда
					Пока КИ_КА.Следующий() Цикл
						Если КИ_КА.ЕстьЮрАдрес = 1 Тогда
							ФлЕстьСтрокаЮрАдресКонтрагента = 1;
						КонецЕсли;
						Если КИ_КА.ЕстьФактАдрес = 1 Тогда
							ФлЕстьСтрокаФактАдресКонтрагента = 1;
						КонецЕсли;
						Прервать;
					КонецЦикла;
				КонецЕсли;
				// Заполняем адреса:
				// если ФлЕстьСтрокаЮрАдресКонтрагента  =0, то создаем строку в "Контрагент.КонтактнаяИнформация"; =1 тогда обновляем данные  
				// если ФлЕстьСтрокаФактАдресКонтрагента=0, то создаем строку в "Контрагент.КонтактнаяИнформация"; =1 тогда обновляем данные					
				
				// Юридический адрес
				Если ФлЕстьСтрокаЮрАдресКонтрагента = 0 Тогда
					ЗаписьЮА 					= Контрагент.КонтактнаяИнформация.Добавить();
					ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
					ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
					ЗаписьЮА.Представление 		= СтрокаТЗ.Address;                                                                                           
				Иначе // ФлЕстьСтрокаЮрАдресКонтрагента = 1	
					Контрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "Вид").Представление  = СтрокаТЗ.Address;
				КонецЕсли;
				
				// Фактический адрес
				Если ФлЕстьСтрокаФактАдресКонтрагента = 0 Тогда
					ЗаписьФА 					= Контрагент.КонтактнаяИнформация.Добавить();
					ЗаписьФА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
					ЗаписьФА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
					ЗаписьФА.Представление 		= СтрокаТЗ.Address;                                                                                           
				Иначе // ФлЕстьСтрокаФактАдресКонтрагента = 1	
					Контрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "Вид").Представление = СтрокаТЗ.Address; 
				КонецЕсли;
				// Ок Видяйкин В. 20170517 -
				
			КонецЕсли; 

			Контрагент.Записать();

			//+ Заполним регистр изменения реквизитоы контрагентов
			Запись = РегистрыСведений.бит_ИсторияИзмененияРеквизитовКонтрагентов.СоздатьМенеджерЗаписи();
			Запись.Контрагент = Контрагент.Ссылка;
			Запись.ИНН = Контрагент.ИНН;
			Запись.КПП = Контрагент.КПП;
			Запись.НаименованиеПолное 		= Контрагент.НаименованиеПолное;
			Запись.Наименование 			= Контрагент.Наименование;
			Запись.ЮридическийАдрес 		= СтрокаТЗ.ADDRESS;			
			Запись.ДатаМодификации 	= ТекущаяДата();
			Запись.Период			= '19800101';
			Запись.ДатаНаименование = '19800101';
			Запись.ДатаНаименованиеПолное = '19800101';
			Запись.ДатаИНН = '19800101';
			Запись.ДатаКПП = '19800101';
			Запись.ДатаЮридическийАдрес ='19800101';
			Запись.Записать();	
			//ОК- 12.04.17
			
			// Сопоставление аналитики
			// Добавить в регистр сопоставления записи по счетам 60, 62, 76
			ЗаписьСопоставление60 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление60.СчетАксапты 			= "60";
			ЗаписьСопоставление60.КодАналитикиАксапты 	= СтрокаТЗ.AccountNum;
			ЗаписьСопоставление60.Организация 			= Организация;
			ЗаписьСопоставление60.Аналитика1С 			= Контрагент.Ссылка;
			ЗаписьСопоставление60.Тип1С 		    	= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041");
			ЗаписьСопоставление60.Записать(Истина);
			
			ЗаписьСопоставление62 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление62.СчетАксапты = "62";
			ЗаписьСопоставление62.КодАналитикиАксапты 	= СтрокаТЗ.AccountNum;
			ЗаписьСопоставление62.Организация 			= Организация;
			ЗаписьСопоставление62.Аналитика1С 			= Контрагент.Ссылка;
			ЗаписьСопоставление62.Тип1С 		    	= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041");
			ЗаписьСопоставление62.Записать(Истина);
			
			ЗаписьСопоставление76 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление76.СчетАксапты 			= "76";
			ЗаписьСопоставление76.КодАналитикиАксапты 	= СтрокаТЗ.AccountNum;
			ЗаписьСопоставление76.Организация 			= Организация;
			ЗаписьСопоставление76.Аналитика1С 			= Контрагент.Ссылка;
			ЗаписьСопоставление76.Тип1С 		    	= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041");
			ЗаписьСопоставление76.Записать(Истина);
			
			// BIT AMerkulov 03112014 ++
			ЗаписьСопоставление19 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление19.СчетАксапты 			= "19";
			ЗаписьСопоставление19.КодАналитикиАксапты 	= СтрокаТЗ.AccountNum;
			ЗаписьСопоставление19.Организация 			= Организация;
			ЗаписьСопоставление19.Аналитика1С 			= Контрагент.Ссылка;
			ЗаписьСопоставление19.Тип1С 		    	= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041");
			ЗаписьСопоставление19.Записать(Истина);
			// BIT AMerkulov 03112014 --
			
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если СтрокаКонтрагентовКОчистке = "" Тогда
			СтрокаКонтрагентовКОчистке 				= Формат(СтрокаТЗ.recno, "ЧГ=0");
		Иначе
			СтрокаКонтрагентовКОчистке 				= СтрокаКонтрагентовКОчистке + ", " + Формат(СтрокаТЗ.recno, "ЧГ=0");
		КонецЕсли; 
		
	КонецЦикла;
		
	Если СтрокаКонтрагентовКОчистке <> "" Тогда
		//Формирование запроса
		ЗапросАДО.CommandText = "delete from dbo.CustVendTable_EXT
		|where recno in (" + СтрокаКонтрагентовКОчистке + ")";

		//Выполнение запроса
		Выборка = ЗапросАДО.Execute(); 
	КонецЕсли;
	
	Сообщение	= "Загрузка контрагентов завершена:" + ТекущаяДата();
	ВыводСтатусаСообщения(, Сообщение);
КонецПроцедуры

Процедура ЗагрузитьДоговора(Проверка = Ложь) Экспорт
	
	Если Не ПодключеноКБазе Тогда
		Если НЕ ПодключениеКБазе() Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ Проверка Тогда
		Сообщение				= "Начало загрузки договоров:		" + ТекущаяДата();
		Статус					= "Загрузка договоров из SQL";
		ВыводСтатусаСообщения(Статус, Сообщение);
	КонецЕсли;
		
	//Типы договоров
	ТипДоговор = Справочники.бит_ТипыДоговоров.НайтиПоНаименованию("Договор");
	ТипПриложениеКДоговору = Справочники.бит_ТипыДоговоров.НайтиПоНаименованию("Приложение к договору");
	ТипСчетДоговора = Справочники.бит_ТипыДоговоров.НайтиПоНаименованию("Счет договора");
	ТипСчетПриложения = Справочники.бит_ТипыДоговоров.НайтиПоНаименованию("Счет приложения");
	
	Если ДоговораSQL.Количество()=0 Тогда
		
		// Получаем данные из Аксапты
		//Формирование запроса
		ЗапросАДО.CommandText = "SELECT DISTINCT
		|   recno,
		|	RECID,
		|	RCONTRACTPARTNERTYPE,
		|	RCONTRACTPARTNERCODE,
		|	RCONTRACTCODE,
		|	RCONTRACTACCOUNT,
		|	RCONTRACTCODEREF,
		|	RCONTRACTACCOUNTREF,
		|	CONTRACTLEVEL,
		|	GROUP1C,
		|	RCONTRACTNUMBER,
		|	CONTRACTDATE,
		|	CONTRACTENDDATE,
		|	RCONTRACTSUBJECT,
		|	DIMENSION,
		|	CONTRACTPOSTINGPROGILE,
		|	CURRENCYCODE
		//,
	//	| 	CLEARINGSTYPE
		|   FROM "+БазаДанных+".dbo.ContractTable_EXT";         
		//|   where RCONTRACTPARTNERCODE = 'КЛ000409'";
		
		//Выполнение запроса
		Выборка = ЗапросАДО.Execute(); 
		//ДоговораSQL.Очистить();
		
		Пока Не Выборка.EOF() Цикл 
			НовСтр = ДоговораSQL.Добавить();
			Для Каждого ЗначениеSQL из Выборка.Fields Цикл 
				Если ЗначениеSQL.Name = "RECID" Тогда
					НовСтр[ЗначениеSQL.Name] = Формат(ЗначениеSQL.Value, "ЧГ=0");
				Иначе	
					НовСтр[ЗначениеSQL.Name] = ЗначениеSQL.Value;
				КонецЕсли;
			КонецЦикла;
			Выборка.MoveNext(); 
		КонецЦикла;	
		
		Если ДоговораSQL.Количество() = 0 Тогда
			Сообщение	= "Таблица договоров пуста:		" + ТекущаяДата() ;
			ВыводСтатусаСообщения(, Сообщение);
			Возврат;
		КонецЕсли;
		
		//СтрокаДоговоровКОчистке = "";
		
		ВыводСтатусаСообщения("Сопоставление договоров с данными базы");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДоговораSQL.RECID,
		               |	ДоговораSQL.RCONTRACTPARTNERTYPE,
		               |	ДоговораSQL.RCONTRACTPARTNERCODE,
		               |	ДоговораSQL.RCONTRACTCODE,
		               |	ДоговораSQL.RCONTRACTACCOUNT,
		               |	ДоговораSQL.RCONTRACTCODEREF,
		               |	ДоговораSQL.RCONTRACTACCOUNTREF,
		               |	ДоговораSQL.CONTRACTLEVEL,
		               |	ДоговораSQL.GROUP1C,
		               |	ДоговораSQL.RCONTRACTNUMBER,
		               |	ДоговораSQL.CONTRACTDATE,
		               |	ДоговораSQL.CONTRACTENDDATE,
		               |	ДоговораSQL.RCONTRACTSUBJECT,
		               |	ДоговораSQL.DIMENSION,
		               |	ДоговораSQL.CONTRACTPOSTINGPROGILE,
		               |	ДоговораSQL.CURRENCYCODE,
		               |	ДоговораSQL.RECNO,
		               |	ДоговораSQL.CLEARINGSTYPE
		               |ПОМЕСТИТЬ ВТ_ДоговораSQL
		               |ИЗ
		               |	&ДоговораSQL КАК ДоговораSQL
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДоговораSQL.RECID КАК RECID,
		               |	МАКСИМУМ(ВТ_ДоговораSQL.RECNO) КАК RECNO
		               |ПОМЕСТИТЬ ВТ_МаксRecNo
		               |ИЗ
		               |	ВТ_ДоговораSQL КАК ВТ_ДоговораSQL
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ДоговораSQL.RECID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ВТ_ДоговораSQL.CONTRACTPOSTINGPROGILE) КАК CONTRACTPOSTINGPROGILE,
		               |	ВТ_ДоговораSQL.RCONTRACTPARTNERCODE
		               |ПОМЕСТИТЬ ВТ_МаксПрофиль
		               |ИЗ
		               |	ВТ_ДоговораSQL КАК ВТ_ДоговораSQL
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ДоговораSQL.RCONTRACTPARTNERCODE
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ДоговорыКонтрагентов.Ссылка КАК Договор,
		               |	Контрагенты.Ссылка КАК Контрагент,
		               |	ДоговорыКонтрагентов.бит_НомерАХ,
		               |	Контрагенты.НомДокИмпорт,
		               |	ДоговорыКонтрагентов.бит_RECID
		               |ПОМЕСТИТЬ ВТ_КонтрагентыДоговоры
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |		ПО Контрагенты.Ссылка = ДоговорыКонтрагентов.Владелец
		               |			И (ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ)
		               |			И (ДоговорыКонтрагентов.бит_RECID <> """")
		               |ГДЕ
		               |	Контрагенты.ПометкаУдаления = ЛОЖЬ
		               |	И Контрагенты.НомДокИмпорт <> """"
		               |	И Контрагенты.Ссылка В ИЕРАРХИИ(&мГруппаПоОрганизации)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ВидыВзаиморасчетов.Ссылка) КАК Ссылка,
		               |	ВидыВзаиморасчетов.бит_КодАксапты
		               |ПОМЕСТИТЬ ВТ_ВидыВзаиморасчетов
		               |ИЗ
		               |	Справочник.ВидыВзаиморасчетов КАК ВидыВзаиморасчетов
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВидыВзаиморасчетов.бит_КодАксапты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Контрагенты.Ссылка КАК Контрагент,
		               |	Контрагенты.НомДокИмпорт
		               |ПОМЕСТИТЬ ВТ_Контрагенты
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.ПометкаУдаления = ЛОЖЬ
		               |	И Контрагенты.НомДокИмпорт <> """"
		               |	И Контрагенты.Ссылка В ИЕРАРХИИ(&мГруппаПоОрганизации)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_ДоговораSQL.RECID,
		               |	ВТ_ДоговораSQL.RCONTRACTPARTNERTYPE,
		               |	ВТ_ДоговораSQL.RCONTRACTPARTNERCODE КАК RCONTRACTPARTNERCODE,
		               |	ВТ_ДоговораSQL.RCONTRACTCODE,
		               |	ВТ_ДоговораSQL.RCONTRACTACCOUNT КАК RCONTRACTACCOUNT,
		               |	ВТ_ДоговораSQL.RCONTRACTCODEREF,
		               |	ВТ_ДоговораSQL.RCONTRACTACCOUNTREF,
		               |	ВТ_ДоговораSQL.CONTRACTLEVEL,
		               |	ВТ_ДоговораSQL.GROUP1C КАК GROUP1C,
		               |	ВТ_ДоговораSQL.RCONTRACTNUMBER,
		               |	ВТ_ДоговораSQL.CONTRACTDATE,
		               |	ВТ_ДоговораSQL.CONTRACTENDDATE,
		               |	ВТ_ДоговораSQL.RCONTRACTSUBJECT,
		               |	ВТ_ДоговораSQL.DIMENSION,
		               |	ВЫБОР
		               |		КОГДА ВТ_ДоговораSQL.CONTRACTPOSTINGPROGILE = """"
		               |			ТОГДА ВТ_МаксПрофиль.CONTRACTPOSTINGPROGILE
		               |		ИНАЧЕ ВТ_ДоговораSQL.CONTRACTPOSTINGPROGILE
		               |	КОНЕЦ КАК CONTRACTPOSTINGPROGILE,
		               |	ВТ_ДоговораSQL.CURRENCYCODE,
		               |	СБ_СоответствиеОбъектовСтроительства.ПраваяАналитика_1 КАК ОбъектСтроительстваБД,
		               |	ЕСТЬNULL(ВТ_КонтрагентыДоговоры.Контрагент, ВТ_Контрагенты.Контрагент) КАК КонтрагентБД,
		               |	ВТ_КонтрагентыДоговоры.Договор КАК ДоговорБД,
		               |	ВЫБОР
		               |		КОГДА ВТ_МаксRecNo.RECNO ЕСТЬ NULL 
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК МаксRecNo
		             //  |	,ВТ_ВидыВзаиморасчетов.Ссылка КАК CLEARINGSTYPE
		               |ИЗ
		               |	ВТ_ДоговораSQL КАК ВТ_ДоговораSQL
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксПрофиль КАК ВТ_МаксПрофиль
		               |		ПО ВТ_ДоговораSQL.RCONTRACTPARTNERCODE = ВТ_МаксПрофиль.RCONTRACTPARTNERCODE
					   //++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 21.09.2015 11:04:18
					   //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеОбъектовСтроительства КАК СБ_СоответствиеОбъектовСтроительства
					   //|		ПО ВТ_ДоговораSQL.DIMENSION = СБ_СоответствиеОбъектовСтроительства.inventlocationid
					   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК СБ_СоответствиеОбъектовСтроительства
					   |		ПО ВТ_ДоговораSQL.DIMENSION = СБ_СоответствиеОбъектовСтроительства.ЛеваяАналитика_1 И СБ_СоответствиеОбъектовСтроительства.ВидСоответствия = &ВидСоответствия
					   //-- СВВ}
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
		               |		ПО ВЫРАЗИТЬ (ВТ_ДоговораSQL.RCONTRACTPARTNERCODE КАК СТРОКА(25)) =ВЫРАЗИТЬ ( ВТ_Контрагенты.НомДокИмпорт  КАК СТРОКА(25))
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтрагентыДоговоры КАК ВТ_КонтрагентыДоговоры
		               |		ПО ВТ_ДоговораSQL.RECID = ВТ_КонтрагентыДоговоры.бит_RECID
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксRecNo КАК ВТ_МаксRecNo
		               |		ПО ВТ_ДоговораSQL.RECID = ВТ_МаксRecNo.RECID
		               |			И ВТ_ДоговораSQL.RECNO = ВТ_МаксRecNo.RECNO
					   //|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыВзаиморасчетов КАК ВТ_ВидыВзаиморасчетов
					   //|		ПО ВТ_ДоговораSQL.CLEARINGSTYPE = ВТ_ВидыВзаиморасчетов.бит_КодАксапты
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	RCONTRACTPARTNERCODE,
		               |	RCONTRACTACCOUNT,
		               |	GROUP1C УБЫВ";  
					   
	   Запрос.УстановитьПараметр("мГруппаПоОрганизации", мГруппаПоОрганизации);
	   Запрос.УстановитьПараметр("ВидСоответствия", Справочники.бит_ВидыСоответствийАналитик.inventlocationid_ОбъектыСтроительства);
	   Запрос.УстановитьПараметр("ДоговораSQL", ДоговораSQL);
	   СопоставленныеДоговора 		= Запрос.Выполнить().Выгрузить();
	   Для каждого СтрокаДоговора Из СопоставленныеДоговора Цикл
		   Если  СтрокаДоговора.МаксRecNo Тогда
			   НовСтр = СопоставленныеДоговораДляПроверки.Добавить();
			   ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДоговора);
		   КонецЕсли;
	   КонецЦикла;
	   //СопоставленныеДоговораДляПроверки.Загрузить(СопоставленныеДоговора);
   КонецЕсли;
   
	Если Проверка Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДоговоровКОчистке = "";
	
	Инд 							= 1;
	ВсегоСтрок						= СопоставленныеДоговора.Количество();
	
	//Валюта
	Юань = Справочники.Валюты.НайтиПоКоду("156");
	Евро = Справочники.Валюты.НайтиПоКоду("978");
	Доллары = Справочники.Валюты.НайтиПоКоду("840");
	Рубли = Справочники.Валюты.НайтиПоКоду("643");
	
	// Обходим полученные данные
	Для каждого СтрокаТЗ из СопоставленныеДоговора Цикл
		
		Если НЕ СтрокаТЗ.МаксRecNo Тогда
			Продолжить;
		КонецЕсли;
	   
		УдалятьИзТаблицыSQL = Истина;
		
		ВыводСтатусаСообщения("Обрабатывается договор " + Инд + " из " + ВсегоСтрок, ,Истина);
		Инд							= Инд + 1;
		
		НачатьТранзакцию();
				
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.КонтрагентБД) Тогда
			Сообщить("Не найден сопоставленный контрагент (НомДокИмпорт: " + СтрокаТЗ.RCONTRACTPARTNERCODE + ") для договора с номером АХ:" + СтрокаТЗ.RCONTRACTACCOUNT + ". Договор не добавлен!");
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ДоговорБД) Тогда  
			Договор 				= СтрокаТЗ.ДоговорБД.ПолучитьОбъект();
			Договор.Наименование = СтрокаТЗ.RCONTRACTNUMBER;  
			Родитель = Договор.Родитель;
			Если СтрокаТЗ.GROUP1C = "1" и НЕ ЗначениеЗаполнено(Родитель) Тогда
				Родитель = Справочники.ДоговорыКонтрагентов.СоздатьГруппу();
				Родитель.Наименование = СтрокаТЗ.RCONTRACTNUMBER;
				Родитель.Владелец = СтрокаТЗ.КонтрагентБД;
				Родитель.Записать();
			КонецЕсли;
		Иначе
			// Не нашли - создаем нового
			Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Если СтрокаТЗ.GROUP1C = "1" Тогда
				Родитель = Справочники.ДоговорыКонтрагентов.СоздатьГруппу();
				Родитель.Наименование = СтрокаТЗ.RCONTRACTNUMBER;
				Родитель.Владелец = СтрокаТЗ.КонтрагентБД;
				Родитель.Записать();
			Иначе
				ЭлементРодитель = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("бит_НомерАХ", СтрокаТЗ.RCONTRACTACCOUNTREF,, СтрокаТЗ.КонтрагентБД);
				Родитель = ЭлементРодитель.Родитель;
			КонецЕсли;
		КонецЕсли;
		
		Договор.бит_НомерАХ = СтрокаТЗ.RCONTRACTACCOUNT;
		Договор.Наименование = СтрокаТЗ.RCONTRACTNUMBER;
		Договор.Родитель = Родитель.Ссылка;
		Договор.Владелец = СтрокаТЗ.КонтрагентБД;
		Договор.Организация = Организация;
		Договор.бит_RECID = СтрокаТЗ.RECID;
		//Договор.ВидВзаиморасчетов = СтрокаТЗ.CLEARINGSTYPE;
		
		
		Если СтрокаТЗ.CURRENCYCODE = Лев(Рубли.Наименование, 3) Тогда
			Договор.ВалютаВзаиморасчетов = Рубли;
		ИначеЕсли СтрокаТЗ.CURRENCYCODE = Евро.Наименование Тогда
			Договор.ВалютаВзаиморасчетов = Евро;
		ИначеЕсли СтрокаТЗ.CURRENCYCODE = Доллары.Наименование Тогда
			Договор.ВалютаВзаиморасчетов = Доллары;
		ИначеЕсли СтрокаТЗ.CURRENCYCODE = Юань.Наименование Тогда
			Договор.ВалютаВзаиморасчетов = Юань;
		КонецЕсли;
		Договор.Комментарий = "Загружено из АХ";
		Если Лев(СтрокаТЗ.CONTRACTPOSTINGPROGILE, 2) = "60" Тогда
			Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		ИначеЕсли Лев(СтрокаТЗ.CONTRACTPOSTINGPROGILE, 2) = "62" Тогда
			Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Иначе
			Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;
		Договор.Дата = ?(СтрокаТЗ.CONTRACTDATE = "01.01.1900 0:00:00", Дата('00010101'), СтрокаТЗ.CONTRACTDATE);
		Договор.Номер = СтрокаТЗ.RCONTRACTNUMBER;
		Договор.СрокДействия = ?(СтрокаТЗ.CONTRACTENDDATE = "01.01.1900 0:00:00", Дата('00010101'), СтрокаТЗ.CONTRACTENDDATE);
		Договор.бит_ПредметДоговора = СтрокаТЗ.RCONTRACTSUBJECT;
		Если ЗначениеЗаполнено(СтрокаТЗ.DIMENSION) Тогда
			Договор.Объект = СтрокаТЗ.ОбъектСтроительстваБД;
			Если НЕ ЗначениеЗаполнено(Договор.Объект) Тогда
				Сообщить("Не заполнено соответствие объектов строительства для Inventlocationid=" + СтрокаТЗ.DIMENSION + ". Объект строительства не заполнен! Номер АХ договора: " + СтрокаТЗ.RCONTRACTACCOUNT);
				УдалятьИзТаблицыSQL = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТЗ.CONTRACTLEVEL = "0"  Тогда
			Договор.бит_ТипДоговора = ТипДоговор.Ссылка;
		ИначеЕсли СтрокаТЗ.CONTRACTLEVEL = "1"  Тогда
			Договор.бит_ТипДоговора = ТипПриложениеКДоговору.Ссылка;
		ИначеЕсли СтрокаТЗ.CONTRACTLEVEL = "2"  Тогда
			Договор.бит_ТипДоговора = ТипСчетПриложения.Ссылка;
		ИначеЕсли СтрокаТЗ.CONTRACTLEVEL = "3"  Тогда
			Договор.бит_ТипДоговора = ТипСчетДоговора.Ссылка;
		КонецЕсли;
		
		НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.НайтиПоНаименованию(СтрокаТЗ.RCONTRACTCODE);
		Если НЕ(ЗначениеЗаполнено(НаправлениеДоговора)) Тогда
			НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.СоздатьЭлемент();
			НаправлениеДоговора.Наименование = СтрокаТЗ.RCONTRACTCODE;
			НаправлениеДоговора.Записать();
			НаправлениеДоговора = НаправлениеДоговора.Ссылка;
		КонецЕсли;
		Договор.бит_НаправлениеДоговора = НаправлениеДоговора;
		Договор.бит_НомерАХ = СтрокаТЗ.RCONTRACTACCOUNT;
		
		Попытка
			Договор.Записать();
			//ОК+ Аверьянова С.А. 13.08.15 исправление - ссылка всегда есть и документ установки видов расчета не создается,
			// поэтому запишем его раньше
			Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ДоговорБД) Тогда  
				Если ЗначениеЗаполнено(Договор.Дата) Тогда
					УстановкаВидовРасчетов = Документы.УстановкаВидовРасчетовПоДоговорам.СоздатьДокумент();
					УстановкаВидовРасчетов.Дата = Договор.Дата;
					УстановкаВидовРасчетов.Организация = Организация;
					УстановкаВидовРасчетов.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					
					НовСтрПринадлежности = УстановкаВидовРасчетов.Принадлежности.Добавить();
					НовСтрПринадлежности.Контрагент = Договор.Владелец;
					НовСтрПринадлежности.ДоговорКонтрагента = Договор.Ссылка;
					//ОК+ Аверьянова 03.09.15 - уточнение вида расчета договора
					//НовСтрПринадлежности.ВидРасчета = ?(СтрокаТЗ.RCONTRACTCODE = "ОС", Перечисления.ПринадлежностиРасчетовПоДоговорам.Инвестиционные, Перечисления.ПринадлежностиРасчетовПоДоговорам.Текущие);
					НовСтрПринадлежности.ВидРасчета = ?(СтрокаТЗ.RCONTRACTCODE = "ОС" ИЛИ СтрокаТЗ.RCONTRACTCODE = "Капвложения" ИЛИ СтрокаТЗ.RCONTRACTCODE = "Недвижимость", Перечисления.ПринадлежностиРасчетовПоДоговорам.Инвестиционные, Перечисления.ПринадлежностиРасчетовПоДоговорам.Текущие);
					//ОК- 03.09.15
					УстановкаВидовРасчетов.Записать(РежимЗаписиДокумента.Проведение);	
				КонецЕсли;
			КонецЕсли;
			//ОК- Аверьянова С.А.
			СтрокаТЗ.ДоговорБД = Договор.Ссылка;
			СтрокаТЧ = СопоставленныеДоговораДляПроверки.Найти(СтрокаТЗ.RCONTRACTACCOUNT, "RCONTRACTACCOUNT");
			СтрокаТЧ.ДоговорБД = Договор.Ссылка;
		Исключение
			Сообщить("Не удалось добавить договор с номером АХ: " + СтрокаТЗ.RCONTRACTACCOUNT + " по причине: " + ОписаниеОшибки());
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		//ОК+ Аверьянова С.А. 13.08.15 
		//Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ДоговорБД) Тогда  
		//	Если ЗначениеЗаполнено(Договор.Дата) Тогда
		//		УстановкаВидовРасчетов = Документы.УстановкаВидовРасчетовПоДоговорам.СоздатьДокумент();
		//		УстановкаВидовРасчетов.Дата = Договор.Дата;
		//		УстановкаВидовРасчетов.Организация = Организация;
		//		УстановкаВидовРасчетов.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		//		
		//		НовСтрПринадлежности = УстановкаВидовРасчетов.Принадлежности.Добавить();
		//		НовСтрПринадлежности.Контрагент = Договор.Владелец;
		//		НовСтрПринадлежности.ДоговорКонтрагента = Договор.Ссылка;
		//		НовСтрПринадлежности.ВидРасчета = ?(СтрокаТЗ.RCONTRACTCODE = "ОС", Перечисления.ПринадлежностиРасчетовПоДоговорам.Инвестиционные, Перечисления.ПринадлежностиРасчетовПоДоговорам.Текущие);
		//		
		//		УстановкаВидовРасчетов.Записать(РежимЗаписиДокумента.Проведение);	
		//	КонецЕсли;
		//КонецЕсли;
		//ОК- Аверьянова С.А.
		
		// Сопоставление аналитики
		// Добавить в регистр сопоставления записи по счетам 60, 62, 76
		Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ЗаписьСопоставление60 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление60.СчетАксапты 			= "60";
			ЗаписьСопоставление60.КодАналитикиАксапты 	= СтрокаТЗ.RECID;
			ЗаписьСопоставление60.Организация 			= Организация;
			ЗаписьСопоставление60.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление60.Тип1С 			    = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление60.Записать(Истина);
			
			ЗаписьСопоставление76 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление76.СчетАксапты 			= "76";
			ЗаписьСопоставление76.КодАналитикиАксапты 	= СтрокаТЗ.RECID;
			ЗаписьСопоставление76.Организация 			= Организация;
			ЗаписьСопоставление76.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление76.Тип1С 			    = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление76.Записать(Истина);
		ИначеЕсли  Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			ЗаписьСопоставление62 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление62.СчетАксапты           = "62";
			ЗаписьСопоставление62.КодАналитикиАксапты 	= СтрокаТЗ.RECID;
			ЗаписьСопоставление62.Организация 			= Организация;
			ЗаписьСопоставление62.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление62.Тип1С 			    = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление62.Записать(Истина);
			
			ЗаписьСопоставление76 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление76.СчетАксапты 			= "76";
			ЗаписьСопоставление76.КодАналитикиАксапты 	= СтрокаТЗ.RECID;
			ЗаписьСопоставление76.Организация 			= Организация;
			ЗаписьСопоставление76.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление76.Тип1С 			    = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление76.Записать(Истина);
		ИначеЕсли Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее и ЗначениеЗаполнено(СтрокаТЗ.CONTRACTPOSTINGPROGILE) Тогда
			ЗаписьСопоставлениеПрочее 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставлениеПрочее.СчетАксапты           = Лев(СтрокаТЗ.CONTRACTPOSTINGPROGILE,2);
			ЗаписьСопоставлениеПрочее.КодАналитикиАксапты 	= СтрокаТЗ.RECID;
			ЗаписьСопоставлениеПрочее.Организация 			= Организация;
			ЗаписьСопоставлениеПрочее.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставлениеПрочее.Тип1С 			    = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставлениеПрочее.Записать(Истина);
		Иначе
			ЗаписьСопоставление60 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление60.СчетАксапты 			= "60";
			ЗаписьСопоставление60.КодАналитикиАксапты 	= СтрокаТЗ.RECID;
			ЗаписьСопоставление60.Организация 			= Организация;
			ЗаписьСопоставление60.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление60.Тип1С 			    = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление60.Записать(Истина);
			
			ЗаписьСопоставление76 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление76.СчетАксапты 			= "76";
			ЗаписьСопоставление76.КодАналитикиАксапты 	= СтрокаТЗ.RECID;
			ЗаписьСопоставление76.Организация 			= Организация;
			ЗаписьСопоставление76.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление76.Тип1С 			    = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление76.Записать(Истина);
			
			ЗаписьСопоставление62 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление62.СчетАксапты           = "62";
			ЗаписьСопоставление62.КодАналитикиАксапты 	= СтрокаТЗ.RECID;
			ЗаписьСопоставление62.Организация 			= Организация;
			ЗаписьСопоставление62.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление62.Тип1С 			    = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление62.Записать(Истина);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
		Если НЕ УдалятьИзТаблицыSQL Тогда
		    Продолжить;
		КонецЕсли;
		
		Если СтрокаДоговоровКОчистке = "" Тогда
			СтрокаДоговоровКОчистке 				= Формат(СтрокаТЗ.RECID, "ЧГ=0");
		Иначе
			СтрокаДоговоровКОчистке 				= СтрокаДоговоровКОчистке + ", " + Формат(СтрокаТЗ.RECID, "ЧГ=0");
		КонецЕсли; 
		
	КонецЦикла;
	
	// Удаляем записи из таблицы
	Если СтрокаДоговоровКОчистке <> "" Тогда
		//Формирование запроса
		ЗапросАДО.CommandText = "delete from "+БазаДанных+".dbo.ContractTable_EXT
		|where RECID in (" + СтрокаДоговоровКОчистке + ")";
		//Выполнение запроса
		
		Выборка = ЗапросАДО.Execute(); 
		//Сообщить("Из таблицы "+БазаДанных+".dbo.ContractTable_EXT удалены договора с RecId: " + СтрокаДоговоровКОчистке);
	КонецЕсли;
	
	ДоговораSQL.Очистить();
	СопоставленныеДоговора.Очистить();
	
	Сообщение	= "Загрузка договоров завершена:" + ТекущаяДата();
	ВыводСтатусаСообщения(, Сообщение);
КонецПроцедуры

Процедура ЗагрузитьНоменклатуру()  Экспорт
	
	Если Не ПодключеноКБазе Тогда
		Если НЕ ПодключениеКБазе() Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Сообщение				= "Начало загрузки номенклатуры:	" + ТекущаяДата();
	Статус					= "Загрузка номенклатуры из SQL";
	ВыводСтатусаСообщения(Статус, Сообщение);
	
	ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	
	// Получаем данные из Аксапты
	//Формирование запроса
	ЗапросАДО.CommandText = "select  DISTINCT
	|	ItemId, ItemName, UnitId, ItemGroupId
	|from "+БазаДанных+".dbo.InventTable_EXT 
	//|where state = 0 and ExpCompanyId='D' and name<>''
	|";
	
	//Выполнение запроса
	Выборка = ЗапросАДО.Execute(); 
	НоменклатураSQL.Очистить();
	
	Пока Не Выборка.EOF() Цикл 
	   НовСтр = НоменклатураSQL.Добавить();
	   Для Каждого ЗначениеSQL из Выборка.Fields Цикл 
		   НовСтр[ЗначениеSQL.Name] = ЗначениеSQL.Value;
	   КонецЦикла;
	   Выборка.MoveNext(); 
	КонецЦикла;	
	
	//ОК+ Аверьянова
	Если НоменклатураSQL.Количество() = 0 Тогда
		Сообщение	= "Таблица номенклатуры пуста:		" + ТекущаяДата() ;
		ВыводСтатусаСообщения(, Сообщение);
		Возврат;
	КонецЕсли;
	СтрокаНоменклатурыКОчистке = "";	
	//ОК-
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураSQL.ItemId,
	               |	НоменклатураSQL.ItemName,
	               |	НоменклатураSQL.UnitId , НоменклатураSQL.ItemGroupId
	               |ПОМЕСТИТЬ ВТ_НоменклатураSQL
	               |ИЗ
	               |	&НоменклатураSQL КАК НоменклатураSQL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Номенклатура.бит_НомерAx,
	               |	МАКСИМУМ(Номенклатура.Ссылка) КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Номенклатура
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Ссылка В ИЕРАРХИИ(&мГруппаНоменклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура.бит_НомерAx
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НоменклатураSQL.ItemId,
	               |	ВТ_НоменклатураSQL.ItemName,
	               |	ВТ_НоменклатураSQL.UnitId,	               
				   |	ВТ_НоменклатураSQL.ItemGroupId,
	               |	ВТ_Номенклатура.Ссылка
	               |ИЗ
	               |	ВТ_НоменклатураSQL КАК ВТ_НоменклатураSQL
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	               |		ПО ВТ_НоменклатураSQL.ItemId = ВТ_Номенклатура.бит_НомерAx";  
	
	Запрос.УстановитьПараметр("НоменклатураSQL", НоменклатураSQL);
	Запрос.УстановитьПараметр("мГруппаНоменклатура", мГруппаНоменклатура);
	
	НоменклатураSQL.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого Стр Из НоменклатураSQL Цикл
		
		//ОК+ Аверьянова 24.02.15 ***исправление ошибки - не находит номенклатуру в подпапке - исправление

		//Стр.Ссылка = Справочники.Номенклатура.НайтиПоРеквизиту("бит_НомерAx", Стр.ItemId, мГруппаНоменклатура);

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.бит_НомерAx = &бит_НомерAx
			|	И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
			
			Запрос.УстановитьПараметр("бит_НомерAx", Стр.ItemId);
			Запрос.УстановитьПараметр("Родитель", мГруппаНоменклатура);
			
			Результат = Запрос.Выполнить().Выбрать();

			Если Результат.Следующий() Тогда
				Стр.Ссылка = Результат.Ссылка;
			КонецЕсли;
		//ОК- Аверьянова 24.02.15
		
		Если ЗначениеЗаполнено(Стр.Ссылка) Тогда
			ОбъектНоменклатура = Стр.Ссылка.ПолучитьОбъект();
			НоваяЗапись = Ложь;
		Иначе
			ОбъектНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
			ОбъектНоменклатура.Родитель = мГруппаНоменклатура; //ОК+ Аверьянова 24.02.15 записываем только для новых
			НоваяЗапись = Истина;			
		КонецЕсли;
		
		//ОбъектНоменклатура.Родитель = мГруппаНоменклатура;    //ОК- Аверьянова 24.02.15 для имеющихся элементов родителя не меняем
		ОбъектНоменклатура.Наименование = Стр.ItemName;
		ОбъектНоменклатура.НаименованиеПолное = Стр.ItemName;
		ОбъектНоменклатура.бит_НомерAx = Стр.ItemId;
		ОбъектНоменклатура.ЕдиницаИзмерения	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Стр.UnitId);
		
		Если Не ЗначениеЗаполнено(ОбъектНоменклатура.ЕдиницаИзмерения) Тогда
			ОбъектНоменклатура.ЕдиницаИзмерения	= ЕдиницаИзмерения;
		КонецЕсли;
		
		
		ОбъектНоменклатура.Записать();
		Стр.Ссылка = ОбъектНоменклатура.Ссылка;
		
		Если НоваяЗапись Тогда			
			ЗаписьСопоставления = РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
			ЗаписьСопоставления.Аналитика1С			= Стр.Ссылка;
			ЗаписьСопоставления.КодАналитикиАксапты = Стр.ItemId;
			ЗаписьСопоставления.Тип1С 				= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000050");
			ЗаписьСопоставления.Организация			= Организация;
			
			Если Стр.ItemGroupId = "ЗапЧасти"
				ИЛИ Стр.ItemGroupId = "Материалы"
				ИЛИ Стр.ItemGroupId = "МатПроч"
				ИЛИ Стр.ItemGroupId = "МОС"
				ИЛИ Стр.ItemGroupId = "СпецОдеИнв"
				ИЛИ Стр.ItemGroupId = "Тара"
				ИЛИ Стр.ItemGroupId = "Топливо" Тогда
					ЗаписьСопоставления.СчетАксапты			= "10";				
			КонецЕсли;
			
			Если Стр.ItemGroupId = "ЗемУчастки"
				ИЛИ Стр.ItemGroupId = "ОбъектПрир"
				ИЛИ Стр.ItemGroupId = "ПриобрНМА"
				ИЛИ Стр.ItemGroupId = "ПриобрОС"
				ИЛИ Стр.ItemGroupId = "СтроитОС" Тогда
					ЗаписьСопоставления.СчетАксапты			= "08";				
			КонецЕсли;			
			ЗаписьСопоставления.Записать();
		КонецЕсли;
		
		//ОК+ Аверьянова 20.11.12 формируем строки к очистке
		Если СтрокаНоменклатурыКОчистке = "" Тогда
			СтрокаНоменклатурыКОчистке = "'"+Стр.ItemId+"'";
		Иначе                
			СтрокаНоменклатурыКОчистке = СтрокаНоменклатурыКОчистке + ", '"+Стр.ItemId+"'";
		КонецЕсли; 

	    //ОК- Аверьянова 20.11.12
		
	КонецЦикла;
	
	//ОК+ Аверьянова 26.11.14 - удаляем записи из таблицы
	Если СтрокаНоменклатурыКОчистке <> "" Тогда
		//Формирование запроса
		ЗапросАДО.CommandText = "delete from "+БазаДанных+".dbo.InventTable_EXT
		|where ItemId in (" + СтрокаНоменклатурыКОчистке + ")";
		//Выполнение запроса
		Выборка = ЗапросАДО.Execute(); 
	КонецЕсли;
	//ОК- Аверьянова 26.11.14
	
	Сообщение	= "Загрузка номенклатуры завершена:" + ТекущаяДата();
	ВыводСтатусаСообщения(, Сообщение);

	
КонецПроцедуры

Процедура ЗагрузитьРБП()  Экспорт
	
	Если Не ПодключеноКБазе Тогда
		Если НЕ ПодключениеКБазе() Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Сообщение				= "Начало загрузки РБП:	" + ТекущаяДата();
	Статус					= "Загрузка РБП из SQL";
	ВыводСтатусаСообщения(Статус, Сообщение);
	
	// Получаем данные из Аксапты
	//Формирование запроса
	ЗапросАДО.CommandText = "select DISTINCT  
	|	DeferralsId, Name, DeferralsType , PaymentOfTheCost, StartDeferralsDate, EndDeferralsDate,
	|AccountNum, Subconto1, Subconto2, Subconto3, AssetType, Dimension4, VendAccount,AgreementId, AssetTypeMSFO, Dimension10
	|from "+БазаДанных+".dbo.RDeferralsTable_EXT 
	//|where state = 0 and ExpCompanyId='D' and name<>''
	|";
	
	//Выполнение запроса
	Выборка = ЗапросАДО.Execute(); 
	РБПSQL.Очистить();
	
	Пока Не Выборка.EOF() Цикл 
	   НовСтр = РБПSQL.Добавить();
	   Для Каждого ЗначениеSQL из Выборка.Fields Цикл 
		   НовСтр[ЗначениеSQL.Name] = ЗначениеSQL.Value;
	   КонецЦикла;
	   Выборка.MoveNext(); 
   КонецЦикла;	
   
    СтрокаРБПКОчистке = "";  //ОК+ Аверьянова 13.01.15
	
   	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РБПSQL.DeferralsId,
                   |	РБПSQL.NAme,
                   |	РБПSQL.DeferralsType,
                   |	РБПSQL.PaymentOfTheCost,
                   |	РБПSQL.StartDeferralsDate,
                   |	РБПSQL.EndDeferralsDate,
                   |	РБПSQL.AccountNum,
                   |	РБПSQL.Subconto1,
                   |	РБПSQL.Subconto2,
                   |	РБПSQL.Subconto3,
                   |	РБПSQL.AssetType,
                   |	РБПSQL.Dimension4,
                   |	РБПSQL.VendAccount,
                   |	РБПSQL.AssetTypeMSFO,
                   |	РБПSQL.Dimension10,
                   |	РБПSQL.AgreementId
                   |ПОМЕСТИТЬ ВТ_РБПSQL
                   |ИЗ
                   |	&РБПSQL КАК РБПSQL
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ РАЗЛИЧНЫЕ
                   |	РасходыБудущихПериодов.бит_НомерAx,
                   |	МАКСИМУМ(РасходыБудущихПериодов.Ссылка) КАК Ссылка
                   |ПОМЕСТИТЬ ВТ_РБП
                   |ИЗ
                   |	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
                //   |ГДЕ
                 //  |	РасходыБудущихПериодов.Ссылка В ИЕРАРХИИ(&мГруппаРБП)
                   |
                   |СГРУППИРОВАТЬ ПО
                   |	РасходыБудущихПериодов.бит_НомерAx
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |	ВТ_РБП.Ссылка,
                   |	ВТ_РБПSQL.DeferralsId,
                   |	ВТ_РБПSQL.NAme,
                   |	ВТ_РБПSQL.DeferralsType,
                   |	ВТ_РБПSQL.PaymentOfTheCost,
                   |	ВТ_РБПSQL.StartDeferralsDate,
                   |	ВТ_РБПSQL.EndDeferralsDate,
                   |	ВТ_РБПSQL.AccountNum,
                   |	ВТ_РБПSQL.Subconto1,
                   |	ВТ_РБПSQL.Subconto2,
                   |	ВТ_РБПSQL.Subconto3,
                   |	ВТ_РБПSQL.AssetType,
                   |	ВТ_РБПSQL.Dimension4,
                   |	ВТ_РБПSQL.VendAccount,
                   |	ВТ_РБПSQL.AssetTypeMSFO,
                   |	ВТ_РБПSQL.Dimension10,
                   |	ВТ_РБПSQL.AgreementId
                   |ИЗ
                   |	ВТ_РБПSQL КАК ВТ_РБПSQL
                   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РБП КАК ВТ_РБП
                   |		ПО (ВТ_РБПSQL.DeferralsId  = ВТ_РБП.бит_НомерAx )";  
    
    Запрос.УстановитьПараметр("РБПSQL", РБПSQL.Выгрузить());
    Запрос.УстановитьПараметр("мГруппаРБП", мГруппаРБП);
    
    РБПSQL.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// BIT AMerkulov 24102014 ++
	
	ЗапросАналитик = Новый Запрос("ВЫБРАТЬ
	                              |	бит_ок_СопоставлениеАналитики.СчетАксапты,
	                              |	бит_ок_СопоставлениеАналитики.КодАналитикиАксапты,
	                              |	бит_ок_СопоставлениеАналитики.Организация,
	                              |	бит_ок_СопоставлениеАналитики.Аналитика1С,
	                              |	бит_ок_СопоставлениеАналитики.Тип1С
	                              |ИЗ
	                              |	РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
	                              |ГДЕ
	                              |	бит_ок_СопоставлениеАналитики.Организация = &Организация
	                              |	И (бит_ок_СопоставлениеАналитики.КодАналитикиАксапты В (&Список1)
	                              |			ИЛИ бит_ок_СопоставлениеАналитики.КодАналитикиАксапты В (&Список2)
	                              |			ИЛИ бит_ок_СопоставлениеАналитики.КодАналитикиАксапты В (&Список3))");
								  
	ЗапросАналитик.УстановитьПараметр("Список1", РБПSQL.ВыгрузитьКолонку("Subconto1"));							  
	ЗапросАналитик.УстановитьПараметр("Список2", РБПSQL.ВыгрузитьКолонку("Subconto2"));							  
	ЗапросАналитик.УстановитьПараметр("Список3", РБПSQL.ВыгрузитьКолонку("Subconto3"));							  
	ЗапросАналитик.УстановитьПараметр("Организация", Организация);
	
	ТаблицаАналитик = ЗапросАналитик.Выполнить().Выгрузить();							  
	
	// BIT AMerkulov 24102014 --
	
	Для Каждого Стр Из РБПSQL Цикл
		
		//ОК+ Аверьянова 13.01.15 ***исправление ошибки - не находит КА в подпапке - исправление
		//Стр.Ссылка = Справочники.РасходыБудущихПериодов.НайтиПоРеквизиту("бит_НомерAx", Стр.DeferralsId, мГруппаРБП);

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходыБудущихПериодов.Ссылка
			|ИЗ
			|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
			|ГДЕ
			|	РасходыБудущихПериодов.бит_НомерAx = &бит_НомерAx
			|	И РасходыБудущихПериодов.Родитель В ИЕРАРХИИ(&Родитель)";

		Запрос.УстановитьПараметр("бит_НомерAx", Стр.DeferralsId);
		Запрос.УстановитьПараметр("Родитель", мГруппаРБП);

		Результат = Запрос.Выполнить().Выбрать();

		Если Результат.Следующий() Тогда
			Стр.Ссылка = Результат.Ссылка;
		КонецЕсли;
		//ОК- Аверьянова 13.01.15
		
		Если ЗначениеЗаполнено(Стр.Ссылка) Тогда
			ОбъектРБП = Стр.Ссылка.ПолучитьОбъект();
		Иначе
			ОбъектРБП = Справочники.РасходыБудущихПериодов.СоздатьЭлемент();
			ОбъектРБП.Родитель = мГруппаРБП;
			
		КонецЕсли;
		
		//ОК+ Аверьянова 04.12.14   //для строки с ¶ некорректно отображала наименование
		//ОбъектРБП.Наименование = Стр.NAme;
		ОбъектРБП.Наименование = СтрЗаменить(Стр.NAme,Символы.ПС," "); 
		//ОК- Аверьянова 04.12.14
		ОбъектРБП.бит_НомерAx = Стр.DeferralsId;
		
		ОбъектРБП.ВидРБП = Перечисления.ВидыРБП.Прочие; 
		
		Если Стр.PaymentOfTheCost = "По месяцам" Тогда
			ОбъектРБП.СпособПризнанияРасходов  = Перечисления.СпособыПризнанияРасходов.ПоМесяцам;
		ИначеЕсли  Стр.PaymentOfTheCost = "В особом порядке" Тогда
			ОбъектРБП.СпособПризнанияРасходов  = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
		ИначеЕсли  Стр.PaymentOfTheCost = "По календарным дням" Тогда
			ОбъектРБП.СпособПризнанияРасходов  = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням;
		КонецЕсли;
		
		ОбъектРБП.ДатаНачалаСписания 	= Стр.StartDeferralsDate;
		ОбъектРБП.ДатаОкончанияСписания = Стр.EndDeferralsDate;
		
		ОбъектРБП.СчетЗатрат		= ПланыСчетов.Хозрасчетный.НайтиПоКоду(Стр.AccountNum);
		
		// BIT AMerkulov 24102014 ++
		
		//Если ЗначениеЗаполнено(Стр.Subconto1) Тогда
		//	ОбъектРБП.СубконтоЗатрат1	= Справочники.СтатьиЗатрат.НайтиПоНаименованию(Стр.Subconto1, Истина);
		//Иначе
		//	ОбъектРБП.СубконтоЗатрат1 = Неопределено;
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(Стр.Subconto2) Тогда		
		//	ОбъектРБП.СубконтоЗатрат2	= Справочники.ОбъектыСтроительства.НайтиПоНаименованию(Стр.Subconto2, Истина);
		//Иначе
		//	ОбъектРБП.СубконтоЗатрат2 = Неопределено;			
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(Стр.Subconto2) Тогда	
		//	ОбъектРБП.СубконтоЗатрат3	= Справочники.бит_ЦФО.НайтиПоНаименованию(Стр.Subconto3, Истина);
		//Иначе
		//	ОбъектРБП.СубконтоЗатрат3 = Неопределено;			
		//КонецЕсли;
		
		УстановитьСубконто(ТаблицаАналитик, Стр, 1);		
		УстановитьСубконто(ТаблицаАналитик, Стр, 2);		
		УстановитьСубконто(ТаблицаАналитик, Стр, 3);		
		
		ОбъектРБП.СубконтоЗатрат1 	= Стр.Субконто1РСБУ;
		ОбъектРБП.СубконтоЗатрат2 	= Стр.Субконто2РСБУ;
		ОбъектРБП.СубконтоЗатрат3 	= Стр.Субконто3РСБУ;
		
		
		// BIT AMerkulov 24102014 --
		
		// BIT AMerkulov 03112014 ++
		Если ЗначениеЗаполнено(Стр.DeferralsType) Тогда
			ОбъектРБП.бит_ВидРБП_МСФО = Справочники.бит_му_ВидыРБП.НайтиПоКоду(Стр.DeferralsType);
		КонецЕсли;
		
		
		Если Стр.AssetType = "Проч. ВОА" Тогда
			ОбъектРБП.ВидАктива = Перечисления.ВидыАктивовДляРБП.ПрочиеВнеоборотныеАктивы;
		ИначеЕсли Стр.AssetType = "Проч. ОА" Тогда
			ОбъектРБП.ВидАктива = Перечисления.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы;
		ИначеЕсли Стр.AssetType = "ОС" Тогда
			ОбъектРБП.ВидАктива = Перечисления.ВидыАктивовДляРБП.ОсновныеСредства;
		ИначеЕсли Стр.AssetType = "Запасы" Тогда
			ОбъектРБП.ВидАктива = Перечисления.ВидыАктивовДляРБП.Запасы;
		ИначеЕсли Стр.AssetType = "ДЗ" Тогда
			ОбъектРБП.ВидАктива = Перечисления.ВидыАктивовДляРБП.ДебиторскаяЗадолженность;			
		КонецЕсли;
		// BIT AMerkulov 03112014 --
		
		
		
		//ОбъектРБП.Объект = Справочники.ОбъектыСтроительства.НайтиПоНаименованию(Стр.Dimension4, Истина);
		ОбъектРБП.Объект = Стр.Субконто2РСБУ;
		//ОбъектРБП.ОК_Функция = Справочники.бит_ЦФО.НайтиПоНаименованию(Стр.Dimension10, Истина);
		ОбъектРБП.ОК_Функция = Стр.Субконто3РСБУ;

		Если ЗначениеЗаполнено(Стр.VendAccount) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("НомДокИмпорт", Стр.VendAccount);
			Строки = мТЗКонтрагентов.НайтиСтроки(Отбор);
			
			Если Строки.Количество() Тогда
				ОбъектРБП.Контрагент 			=  Строки[0].Ссылка;
				Если ЗначениеЗаполнено(ОбъектРБП.Контрагент) Тогда
					ОбъектРБП.ДоговорКонтрагента 	= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("бит_RECID", Стр.AgreementId, ,ОбъектРБП.Контрагент);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ОбъектРБП.Контрагент = Неопределено;
			ОбъектРБП.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		
		// ++ БоровинскаяОА (СофтЛаб) 18.12.18 Начало (#3130)
		ОбъектРБП.Комментарий = "";
		// ++ БоровинскаяОА (СофтЛаб) 22.10.19 Начало (#3508)
		// перенесла сброс реквизитов РБП, зависящих от бит_ВидРБП_МСФО, ниже - в ветку где обрабатывается получение НЕкорректного значения
		//ОбъектРБП.бит_Субконто1 = Неопределено;
		//ОбъектРБП.бит_Субконто2 = Неопределено;
		//ОбъектРБП.бит_НМА_МСФО = Справочники.НематериальныеАктивы.ПустаяСсылка();
		// -- БоровинскаяОА (СофтЛаб) 22.10.19 Конец (#3508)
		Если НЕ ЗначениеЗаполнено(ОбъектРБП.бит_ВидРБП_МСФО) Тогда
			ОбъектРБП.Комментарий = ОбъектРБП.Комментарий + ?(ЗначениеЗаполнено(ОбъектРБП.Комментарий)," ","") + "Вид РБП по коду """+Стр.DeferralsType+""" не найден.";
			// ++ БоровинскаяОА (СофтЛаб) 22.10.19 Начало (#3508)
			ОбъектРБП.бит_Субконто1 = Неопределено;
			ОбъектРБП.бит_Субконто2 = Неопределено;
			ОбъектРБП.бит_НМА_МСФО = Справочники.НематериальныеАктивы.ПустаяСсылка();
			// -- БоровинскаяОА (СофтЛаб) 22.10.19 Конец (#3508)
		ИначеЕсли ЗначениеЗаполнено(ОбъектРБП.бит_ВидРБП_МСФО) Тогда
			
			СтатьяЗатратСоотвествуетВидуРБП = Ложь;
			ВидАктиваСоотвествуетВидуРБП = Ложь;
			
			СтатьяЗатрат = ?(ТипЗнч(ОбъектРБП.СубконтоЗатрат1) = Тип("СправочникСсылка.СтатьиЗатрат"),ОбъектРБП.СубконтоЗатрат1,
			?(ТипЗнч(ОбъектРБП.СубконтоЗатрат2) = Тип("СправочникСсылка.СтатьиЗатрат"),ОбъектРБП.СубконтоЗатрат2,
			?(ТипЗнч(ОбъектРБП.СубконтоЗатрат3) = Тип("СправочникСсылка.СтатьиЗатрат"),ОбъектРБП.СубконтоЗатрат3, Справочники.СтатьиЗатрат.ПустаяСсылка())));
			
			Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
				
				СтатьяЗатратСоотвествуетВидуРБП = ЕстьСоотвествиеВРегистреСоответствияАналитик(Справочники.бит_ВидыСоответствийАналитик.Субконто_ВидРБП_МСФО, СтатьяЗатрат, ОбъектРБП.бит_ВидРБП_МСФО);
				
				Если НЕ СтатьяЗатратСоотвествуетВидуРБП Тогда
					ОбъектРБП.Комментарий = ОбъектРБП.Комментарий + ?(ЗначениеЗаполнено(ОбъектРБП.Комментарий)," ","") + "Вид РБП с кодом """+Стр.DeferralsType+""" не соответствует статье затрат.";
				КонецЕсли;
			Иначе
				СтатьяЗатратСоотвествуетВидуРБП = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектРБП.ВидАктива) Тогда
				
				ВидАктиваСоотвествуетВидуРБП = ЕстьСоотвествиеВРегистреСоответствияАналитик(Справочники.бит_ВидыСоответствийАналитик.ВидРБП_МСФО_ВидАктива, ОбъектРБП.бит_ВидРБП_МСФО, ОбъектРБП.ВидАктива);
				
				Если НЕ ВидАктиваСоотвествуетВидуРБП Тогда
					ОбъектРБП.Комментарий = ОбъектРБП.Комментарий + ?(ЗначениеЗаполнено(ОбъектРБП.Комментарий)," ","") + "Вид РБП с кодом """+Стр.DeferralsType+""" не соответствует виду актива.";
				КонецЕсли;
			Иначе
				ВидАктиваСоотвествуетВидуРБП = Истина;
			КонецЕсли;
			
			Если СтатьяЗатратСоотвествуетВидуРБП И ВидАктиваСоотвествуетВидуРБП Тогда
				// ++ БоровинскаяОА (СофтЛаб) 22.10.19 Начало (#3508)
				НМА_МСФО = ОбъектРБП.бит_НМА_МСФО;
				// -- БоровинскаяОА (СофтЛаб) 22.10.19 Конец (#3508)
				СоздатьСвязанныйСРБП_НМА = Ложь;
				СоздатьНМАДляСубконто = НЕ (ЗначениеЗаполнено(НМА_МСФО) И НМА_МСФО.бит_УчитываетсяКакНМАВМСФО)
										// ++ БоровинскаяОА (СофтЛаб) 22.10.19 Начало (#3508)
										ИЛИ (ЗначениеЗаполнено(НМА_МСФО) И НМА_МСФО.Наименование <> ОбъектРБП.Наименование)
										ИЛИ (ЗначениеЗаполнено(НМА_МСФО) И НМА_МСФО.бит_ОбъектСтроительства <> ОбъектРБП.Объект);
										// -- БоровинскаяОА (СофтЛаб) 22.10.19 Конец (#3508)
				ОбъектРБП.ЗаполнитьСвязанныеСВидомРБПМСФОДанные(СоздатьСвязанныйСРБП_НМА,СоздатьНМАДляСубконто);
			Иначе
				ОбъектРБП.бит_ВидРБП_МСФО = Справочники.бит_му_ВидыРБП.ПустаяСсылка();
				// ++ БоровинскаяОА (СофтЛаб) 22.10.19 Начало (#3508)
				ОбъектРБП.бит_Субконто1 = Неопределено;
				ОбъектРБП.бит_Субконто2 = Неопределено;
				ОбъектРБП.бит_НМА_МСФО = Справочники.НематериальныеАктивы.ПустаяСсылка();
				// -- БоровинскаяОА (СофтЛаб) 22.10.19 Конец (#3508)
			КонецЕсли;
		КонецЕсли;
		// -- БоровинскаяОА (СофтЛаб) 18.12.18 Конец (#3130)
		
		ОбъектРБП.Записать();
		Стр.Ссылка = ОбъектРБП.Ссылка;
		
		//ОК+ Аверьянова 13.08.15  добавим в регистр сопоставления записи по счету 97
		ЗаписьСопоставление97 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
		ЗаписьСопоставление97.СчетАксапты 			= "97";
		ЗаписьСопоставление97.КодАналитикиАксапты 	= ОбъектРБП.бит_НомерAx;
		ЗаписьСопоставление97.Организация 			= Организация;
		ЗаписьСопоставление97.Аналитика1С 			= ОбъектРБП.Ссылка;
		ЗаписьСопоставление97.Тип1С 		    	= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000071");
		ЗаписьСопоставление97.Записать(Истина);
		//ОК- Аверьянова 13.08.15
		
	//ОК+ Аверьянова 13.01.15 //очистим таблицу
	//КонецЦикла;

		Если СтрокаРБПКОчистке = "" Тогда
			СтрокаРБПКОчистке = "'" + Стр.DeferralsId + "'";
		Иначе
			СтрокаРБПКОчистке = СтрокаРБПКОчистке + ", '" + Стр.DeferralsId + "'";
		КонецЕсли; 
	КонецЦикла;
	
	Если СтрокаРБПКОчистке <> "" Тогда
		//Формирование запроса
		ЗапросАДО.CommandText = "delete from "+БазаДанных+".dbo.RDeferralsTable_EXT
		|where DeferralsId in (" + СтрокаРБПКОчистке + ")";

		//Выполнение запроса
		Выборка = ЗапросАДО.Execute(); 
	КонецЕсли;
	//ОК- Аверьянова 13.01.15
	

	Сообщение	= "Загрузка РБП завершена:" + ТекущаяДата();
	ВыводСтатусаСообщения(, Сообщение);
	
	
КонецПроцедуры

// ++ BIT AMerkulov 24072014 /Загрузка ОС
Процедура ЗагрузитьОС()  Экспорт

	Если Не ПодключеноКБазе Тогда
		Если НЕ ПодключениеКБазе() Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Сообщение				= "Начало загрузки ОС:	" + ТекущаяДата();
	Статус					= "Загрузка ОС из SQL";
	ВыводСтатусаСообщения(Статус, Сообщение);
	
	// ++ BIT AMerkulov 03112014 
	
	// Получаем данные из Аксапты
	//Формирование запроса
	ЗапросАДО.CommandText = "select DISTINCT  
	|	AccountNum, Name, Notes, Dimension1, AssetGroup_UU, recno, AssetGroup
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-26 (#4144)
	|	, RAssetDate, DisposalDate, LifeTime
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-26 (#4144) 
	|from "+БазаДанных+".dbo.RAssetTable_EXT 
	|";
	
	//Выполнение запроса
	Выборка = ЗапросАДО.Execute(); 
	ОСSQL.Очистить();
	
	Пока Не Выборка.EOF() Цикл 
	   НовСтр = ОСSQL.Добавить();
	   Для Каждого ЗначениеSQL из Выборка.Fields Цикл 
		   НовСтр[ЗначениеSQL.Name] = ЗначениеSQL.Value;
	   КонецЦикла;
	   Выборка.MoveNext(); 
   КонецЦикла;	
   
	//ОК+ Аверьянова 26.11.14
	СтрокаОСКОчистке = "";	
	//ОК-
	
   	Запрос = Новый Запрос;
	//ОК Довбешка 05.05.2015
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ОСSQL.AccountNum,
	//               |	ОСSQL.Name,
	//               |	ОСSQL.Notes,
	//               |	ОСSQL.Dimension1,
	//               |	ОСSQL.AssetGroup_UU,
	//               |	ОСSQL.recno,
	//               |	ОСSQL.AssetGroup 
	//               |ПОМЕСТИТЬ ВТ_ОСSQL
	//               |ИЗ
	//               |	&ОСSQL КАК ОСSQL
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	ОС.бит_НомерAx,
	//               |	МАКСИМУМ(ОС.Ссылка) КАК Ссылка
	//               |ПОМЕСТИТЬ ВТ_ОС
	//               |ИЗ
	//               |	Справочник.ОсновныеСредства КАК ОС
	//               |ГДЕ
	//               |	ОС.Ссылка В ИЕРАРХИИ(&мГруппаОС)
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ОС.бит_НомерAx
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВТ_ОС.Ссылка,
	//               |	ВТ_ОСSQL.AccountNum,
	//               |	ВТ_ОСSQL.Name,
	//               |	ВТ_ОСSQL.Notes,
	//               |	ВТ_ОСSQL.Dimension1,
	//               |	ВТ_ОСSQL.AssetGroup_UU,
	//               |	ВТ_ОСSQL.recno,
	//               |	ВТ_ОСSQL.AssetGroup 
	//               |ИЗ
	//               |	ВТ_ОСSQL КАК ВТ_ОСSQL
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОС КАК ВТ_ОС
	//               |		ПО ВТ_ОСSQL.AccountNum = ВТ_ОС.бит_НомерAx"; 
	    Запрос.Текст = "ВЫБРАТЬ
                   |	ОСSQL.AccountNum,
                   |	ОСSQL.Name,
                   |	ОСSQL.Notes,
                   |	ОСSQL.Dimension1,
                   |	ОСSQL.AssetGroup_UU,
                   |	ОСSQL.recno,
				   //ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-26 (#4144)
				   |	ОСSQL.RAssetDate,
                   |	ОСSQL.DisposalDate,
                   |	ОСSQL.LifeTime,
				   //ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-26 (#4144) 
                   |	ОСSQL.AssetGroup
                   |ПОМЕСТИТЬ ВТ_ОСSQL
                   |ИЗ
                   |	&ОСSQL КАК ОСSQL
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ РАЗЛИЧНЫЕ
                   |	ОС.бит_НомерAx,
                   |	МАКСИМУМ(ОС.Ссылка) КАК Ссылка,
                   |	""ОС"" КАК Вид
                   |ПОМЕСТИТЬ ВТ_ОС
                   |ИЗ
                   |	Справочник.ОсновныеСредства КАК ОС
                   |ГДЕ
                   |	ОС.Ссылка В ИЕРАРХИИ(&мГруппаОС)
                   |
                   |СГРУППИРОВАТЬ ПО
                   |	ОС.бит_НомерAx
                   |
                   |ОБЪЕДИНИТЬ
                   |
                   |ВЫБРАТЬ РАЗЛИЧНЫЕ
                   |	ОС.бит_НомерAx,
                   |	МАКСИМУМ(ОС.Ссылка),
                   |	""НМА""
                   |ИЗ
                   |	Справочник.НематериальныеАктивы КАК ОС
                   |ГДЕ
                   |	ОС.Ссылка В ИЕРАРХИИ(&мГруппаНМА)
                   |
                   |СГРУППИРОВАТЬ ПО
                   |	ОС.бит_НомерAx
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |	ВТ_ОС.Ссылка,
                   |	ВТ_ОСSQL.AccountNum,
                   |	ВТ_ОСSQL.Name,
                   |	ВТ_ОСSQL.Notes,
                   |	ВТ_ОСSQL.Dimension1,
                   |	ВТ_ОСSQL.AssetGroup_UU,
                   |	ВТ_ОСSQL.recno,
				   //ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-26 (#4144)
				   |	ВТ_ОСSQL.RAssetDate,
                   |	ВТ_ОСSQL.DisposalDate,
                   |	ВТ_ОСSQL.LifeTime,
				   //ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-26 (#4144)
                   |	ВТ_ОСSQL.AssetGroup
                   |ИЗ
                   |	ВТ_ОСSQL КАК ВТ_ОСSQL
                   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОС КАК ВТ_ОС
                   |		ПО (ВТ_ОСSQL.AccountNum = ВТ_ОС.бит_НомерAx
                   |				И ВТ_ОСSQL.AssetGroup = ВТ_ОС.Вид)";  

    //ОК 
    Запрос.УстановитьПараметр("ОСSQL", ОСSQL.Выгрузить());
    Запрос.УстановитьПараметр("мГруппаОС", мГруппаОС);
	//ОК Довбешка 05.05.2015
    Запрос.УстановитьПараметр("мГруппаНМА", мГруппаНМА);
    //ОК 
    
    ОСSQL.Загрузить(Запрос.Выполнить().Выгрузить());
	
	МассивУспешноЗагруженныхПолей = Новый Массив;
	Для Каждого Стр Из ОСSQL Цикл
				
		Попытка
			
			Если Стр.AssetGroup = "НМА"
				Тогда
				//ОК+ Аверьянова 10.02.15 
				//Стр.Ссылка = Справочники.НематериальныеАктивы.НайтиПоРеквизиту("бит_НомерAx", Стр.AccountNum, мГруппаНМА);

				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	НематериальныеАктивы.Ссылка
					|ИЗ
					|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
					|ГДЕ
					|	НематериальныеАктивы.бит_НомерAx = &бит_НомерAx
					|	И НематериальныеАктивы.Родитель В ИЕРАРХИИ(&Родитель)";

				Запрос.УстановитьПараметр("бит_НомерAx", Стр.AccountNum);
				Запрос.УстановитьПараметр("Родитель", мГруппаНМА);

				Результат = Запрос.Выполнить().Выбрать();

				Если Результат.Следующий() Тогда
					Стр.Ссылка = Результат.Ссылка;
				КонецЕсли;
				//ОК- Аверьянова 10.02.15
				Если ЗначениеЗаполнено(Стр.Ссылка) Тогда
					ОбъектНМА = Стр.Ссылка.ПолучитьОбъект();
				Иначе
					ОбъектНМА = Справочники.НематериальныеАктивы.СоздатьЭлемент();
					ОбъектНМА.Родитель = мГруппаНМА;  //ОК+ Аверьянова 24.02.15 только для новых 

				КонецЕсли;
				
				//ОбъектНМА.Родитель = мГруппаНМА;    //ОК- Аверьянова 24.02.15 только для новых
				ОбъектНМА.Наименование 			= Стр.Name;
				ОбъектНМА.НаименованиеПолное 	= Стр.Notes;				
				Если ЗначениеЗаполнено(Стр.Dimension1) Тогда
					//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 21.09.2015 11:26:18
					ЗапросР = Новый Запрос;
					ЗапросР.Текст = 
					"ВЫБРАТЬ
					|	ДополнительныеСведения.Объект
					|ИЗ
					|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|ГДЕ
					|	ДополнительныеСведения.Свойство = &Свойство
					|	И ДополнительныеСведения.Значение = &Значение";
					ЗапросР.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Код аксапты (Объект строительства)"));
					ЗапросР.УстановитьПараметр("Значение",Стр.Dimension1);
					ЗаписьР = ЗапросР.Выполнить().Выбрать();
					Если ЗаписьР.Следующий() Тогда
						ОбъектНМА.бит_ОбъектСтроительства = ЗаписьР.Объект;
					КонецЕсли; 
					//-- СВВ}
					
//					ОбъектНМА.бит_ОбъектСтроительства = Справочники.бит_БК_ДополнительныеСведенияПоОбъекту.НайтиПоРеквизиту("КодАксапты", Стр.Dimension1).Владелец;
					
					Если НЕ ЗначениеЗаполнено(ОбъектНМА.бит_ОбъектСтроительства) Тогда
						ОбъектНМА.бит_ОбъектСтроительства  = Справочники.ОбъектыСтроительства.НайтиПоКоду("000000776");	
					КонецЕсли;
					
				Иначе
					ОбъектНМА.бит_ОбъектСтроительства = Неопределено;					
				КонецЕсли;	

				ОбъектНМА.бит_НомерAx		 	= Стр.AccountNum;
				
				ОбъектНМА.Записать();
				Стр.Ссылка = ОбъектНМА.Ссылка;
				
				ЗаписьСопоставление04 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
				ЗаписьСопоставление04.СчетАксапты 			= "04";
				ЗаписьСопоставление04.КодАналитикиАксапты 	= Стр.AccountNum;
				ЗаписьСопоставление04.Организация 			= Организация;                                                                                        
				ЗаписьСопоставление04.Аналитика1С 			= Стр.Ссылка;
				ЗаписьСопоставление04.Тип1С 			    = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000049");
				ЗаписьСопоставление04.Записать(Истина);			
				
				ЗаписьСопоставление05 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ЗаписьСопоставление05,ЗаписьСопоставление04);
				ЗаписьСопоставление05.СчетАксапты 			= "05";
				ЗаписьСопоставление05.Записать(Истина);	
				
				ЗаписьСопоставление08 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ЗаписьСопоставление08,ЗаписьСопоставление04);
				ЗаписьСопоставление08.СчетАксапты 			= "08";
				ЗаписьСопоставление08.Записать(Истина);					
			Иначе
				
				//ОК+ Аверьянова 10.02.15 
				//Стр.Ссылка = Справочники.ОсновныеСредства.НайтиПоРеквизиту("бит_НомерAx", Стр.AccountNum, мГруппаОС);;

				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ОсновныеСредства.Ссылка
					|ИЗ
					|	Справочник.ОсновныеСредства КАК ОсновныеСредства
					|ГДЕ
					|	ОсновныеСредства.бит_НомерAx = &бит_НомерAx
					|	И ОсновныеСредства.Родитель В ИЕРАРХИИ(&Родитель)";

				Запрос.УстановитьПараметр("бит_НомерAx", Стр.AccountNum);
				Запрос.УстановитьПараметр("Родитель", мГруппаОС);

				Результат = Запрос.Выполнить().Выбрать();

				Если Результат.Следующий() Тогда
					Стр.Ссылка = Результат.Ссылка;
				КонецЕсли;
				//ОК- Аверьянова 10.02.15
				
				Если ЗначениеЗаполнено(Стр.Ссылка) Тогда
					ОбъектОС = Стр.Ссылка.ПолучитьОбъект();
				Иначе
					ОбъектОС = Справочники.ОсновныеСредства.СоздатьЭлемент();
					ОбъектОС.Родитель = мГруппаОС;   //ОК+ Аверьянова 24.02.15 только для новых
				КонецЕсли;
				
				//ОбъектОС.Родитель = мГруппаОС;    //ОК- Аверьянова 24.02.15 только для новых
				ОбъектОС.Наименование 			= Стр.Name;
				ОбъектОС.НаименованиеПолное 	= Стр.Notes;
				ОбъектОС.бит_НомерAx		 	= Стр.AccountNum;
				
				Если ЗначениеЗаполнено(Стр.Dimension1) Тогда
					
					//ОбъектОС.Объект				 	= Справочники.бит_БК_ДополнительныеСведенияПоОбъекту.НайтиПоРеквизиту("КодАксапты", Стр.Dimension1).Владелец;
					//
					//Если НЕ ЗначениеЗаполнено(ОбъектОС.Объект) Тогда
					//	ОбъектОС.Объект = Справочники.ОбъектыСтроительства.НайтиПоКоду("000000776");	
					//КонецЕсли;
					
				Иначе
					ОбъектОС.Объект = Неопределено;					
				КонецЕсли;	
				
				
				
				ОбъектОС.БИТ_ГруппаОСУУ			= Справочники.бит_му_КлассыОсновныхСредств.НайтиПоКоду(Стр.AssetGroup_UU);		
				
				ОбъектОС.Записать();
				Стр.Ссылка = ОбъектОС.Ссылка;
				
				ЗаписьСопоставление01 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
				ЗаписьСопоставление01.СчетАксапты 			= "01";
				ЗаписьСопоставление01.КодАналитикиАксапты 	= Стр.AccountNum;
				ЗаписьСопоставление01.Организация 			= Организация;                                                                                        
				ЗаписьСопоставление01.Аналитика1С 			= Стр.Ссылка;
				ЗаписьСопоставление01.Тип1С 			    = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000061");
				ЗаписьСопоставление01.Записать(Истина);			
				
				ЗаписьСопоставление02 						= РегистрыСведений.бит_ок_СопоставлениеАналитики.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ЗаписьСопоставление02,ЗаписьСопоставление01);
				ЗаписьСопоставление02.СчетАксапты 			= "02";
				ЗаписьСопоставление02.Записать(Истина);			
				
			КонецЕсли;
			//ОК+ Аверьянова 26.11.14 формируем строки к очистке
			//МассивУспешноЗагруженныхПолей.Добавить(Стр.AccountNum);
			Если СтрокаОСКОчистке = "" Тогда
				СтрокаОСКОчистке = "'"+Стр.AccountNum+"'";
			Иначе                
				СтрокаОСКОчистке = СтрокаОСКОчистке + ", '"+Стр.AccountNum+"'";
			КонецЕсли; 
			//ОК- Аверьянова 26.11.14
			
		Исключение
		КонецПопытки;
	
	КонецЦикла;

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-26 (#4144)
	Если ОСSQL.Количество() > 0 Тогда
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОСSQL", ОСSQL.Выгрузить());
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОСSQL.AssetGroup КАК AssetGroup,
		               |	ОСSQL.RAssetDate КАК RAssetDate,
		               |	ОСSQL.DisposalDate КАК DisposalDate,
		               |	ОСSQL.LifeTime КАК LifeTime,
		               |	ОСSQL.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ОСSQL
		               |ИЗ
		               |	&ОСSQL КАК ОСSQL
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ОСSQL.Ссылка КАК Ссылка,
		               |	ВТ_ОСSQL.RAssetDate <> ДАТАВРЕМЯ(1, 1, 1)
		               |		И ВТ_ОСSQL.RAssetDate <> ДАТАВРЕМЯ(1900, 1, 1) КАК ЗаполненоRAssetDate,
		               |	ВТ_ОСSQL.RAssetDate КАК RAssetDate,
		               |	ВТ_ОСSQL.DisposalDate <> ДАТАВРЕМЯ(1, 1, 1)
		               |		И ВТ_ОСSQL.DisposalDate <> ДАТАВРЕМЯ(1900, 1, 1) КАК ЗаполненоDisposalDate,
		               |	ВТ_ОСSQL.DisposalDate КАК DisposalDate,
		               |	ВТ_ОСSQL.LifeTime > 0 КАК ЗаполненоLifeTime,
		               |	ВТ_ОСSQL.LifeTime КАК LifeTime,
		               |	ЕСТЬNULL(СостоянияОСОрганизацийСрезПоследнихПринятоКУчету.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)) КАК СостояниеПринятоКУчету,
		               |	ЕСТЬNULL(СостоянияОСОрганизацийСрезПоследнихСнятоСУчета.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПустаяСсылка)) КАК СостояниеСнятоСУчета,
		               |	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
		               |	ЕСТЬNULL(СостоянияОСОрганизацийСрезПоследнихПринятоКУчету.ДатаСостояния, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСостоянияПринятоКУчету,
		               |	ЕСТЬNULL(СостоянияОСОрганизацийСрезПоследнихСнятоСУчета.ДатаСостояния, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСостоянияСнятоСУчета
		               |ПОМЕСТИТЬ ВТ_Данные
		               |ИЗ
		               |	ВТ_ОСSQL КАК ВТ_ОСSQL
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
		               |				,
		               |				Организация = &Организация
		               |					И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)) КАК СостоянияОСОрганизацийСрезПоследнихПринятоКУчету
		               |		ПО ВТ_ОСSQL.Ссылка = СостоянияОСОрганизацийСрезПоследнихПринятоКУчету.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
		               |				,
		               |				Организация = &Организация
		               |					И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)) КАК СостоянияОСОрганизацийСрезПоследнихСнятоСУчета
		               |		ПО ВТ_ОСSQL.Ссылка = СостоянияОСОрганизацийСрезПоследнихСнятоСУчета.ОсновноеСредство
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		               |		ПО ВТ_ОСSQL.Ссылка = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		               |ГДЕ
		               |	ВТ_ОСSQL.AssetGroup <> ""НМА""
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Данные.Ссылка КАК Ссылка,
		               |	ВТ_Данные.RAssetDate КАК RAssetDate
		               |ИЗ
		               |	ВТ_Данные КАК ВТ_Данные
		               |ГДЕ
		               |	ВТ_Данные.ЗаполненоRAssetDate
		               |	И (ВТ_Данные.ДатаСостоянияПринятоКУчету <> ВТ_Данные.RAssetDate
		               |			ИЛИ ВТ_Данные.СостояниеПринятоКУчету <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету))
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Данные.Ссылка КАК Ссылка,
		               |	ВТ_Данные.LifeTime КАК LifeTime
		               |ИЗ
		               |	ВТ_Данные КАК ВТ_Данные
		               |ГДЕ
		               |	ВТ_Данные.ЗаполненоLifeTime
		               |	И ВТ_Данные.СрокПолезногоИспользования <> ВТ_Данные.LifeTime
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Данные.Ссылка КАК Ссылка,
		               |	ВТ_Данные.DisposalDate КАК DisposalDate
		               |ИЗ
		               |	ВТ_Данные КАК ВТ_Данные
		               |ГДЕ
		               |	ВТ_Данные.ЗаполненоDisposalDate
		               |	И (ВТ_Данные.СостояниеСнятоСУчета <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		               |			ИЛИ ВТ_Данные.ДатаСостоянияСнятоСУчета <> ВТ_Данные.DisposalDate)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Данные
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ОСSQL";
                   
		ПакетЗапросов = Запрос.ВыполнитьПакет();
		
		Если НЕ ПакетЗапросов[2].Пустой()
			ИЛИ НЕ ПакетЗапросов[3].Пустой() Тогда
								
			ОперацияБух = Документы.ОперацияБух.СоздатьДокумент();
			ОперацияБух.Дата = ТекущаяДата();
			ОперацияБух.Организация = Организация;
			ОперацияБух.Комментарий = "Загружено из Аксапты " + ОперацияБух.Дата;
			ОперацияБух.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			
			//обработка Даты принятия к учету
			Если НЕ ПакетЗапросов[2].Пустой() Тогда
				
				ПринятыКУчету = ПакетЗапросов[2].Выбрать();
				ДвижениеСостоянияОСОрганизаций = ОперацияБух.Движения.СостоянияОСОрганизаций;
				ДвижениеСостоянияОСОрганизаций.Записывать = Истина;
				
				Пока ПринятыКУчету.Следующий() Цикл
					СтрокаДвижения = ДвижениеСостоянияОСОрганизаций.Добавить();
					СтрокаДвижения.Организация = Организация;
					СтрокаДвижения.ОсновноеСредство = ПринятыКУчету.Ссылка;
					СтрокаДвижения.ДатаСостояния = ПринятыКУчету.RAssetDate;
					СтрокаДвижения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКУчету");					
				КонецЦикла;
			КонецЕсли;
			
			//обработка Срока полезного использования
			Если НЕ ПакетЗапросов[3].Пустой() Тогда
				
				СрокиЖизни = ПакетЗапросов[3].Выбрать();
				ДвижениеПараметрыАмортизацииОСБухгалтерскийУчет = ОперацияБух.Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
				ДвижениеПараметрыАмортизацииОСБухгалтерскийУчет.Записывать = Истина;
				
				Пока СрокиЖизни.Следующий() Цикл
					СтрокаДвижения = ДвижениеПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
					СтрокаДвижения.Организация = Организация;
					СтрокаДвижения.ОсновноеСредство = СрокиЖизни.Ссылка;
					СтрокаДвижения.СрокПолезногоИспользования = СрокиЖизни.LifeTime;					
				КонецЦикла;
			КонецЕсли;

			Попытка
				ОперацияБух.Записать();
				ВыводСтатусаСообщения(, "Создана " + ОперацияБух.Ссылка);
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВыводСтатусаСообщения(, "При записи операции произошла ошибка. Подробности в ЖР");
				ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты Фреш Маркет",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
		//обработка даты снятия с учета
		Если НЕ ПакетЗапросов[4].Пустой() Тогда
			
			ОперацияБух = Документы.ОперацияБух.СоздатьДокумент();
			ОперацияБух.Дата = ТекущаяДата();
			ОперацияБух.Организация = Организация;
			ОперацияБух.Комментарий = "Загружено из Аксапты " + ОперацияБух.Дата;
			ОперацияБух.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			
			ДвижениеСостоянияОСОрганизаций = ОперацияБух.Движения.СостоянияОСОрганизаций;
			ДвижениеСостоянияОСОрганизаций.Записывать = Истина;
			
			СнятыСУчета = ПакетЗапросов[4].Выбрать();
			Пока СнятыСУчета.Следующий() Цикл
				СтрокаДвижения = ДвижениеСостоянияОСОрганизаций.Добавить();
				СтрокаДвижения.Организация = Организация;
				СтрокаДвижения.ОсновноеСредство = СнятыСУчета.Ссылка;
				СтрокаДвижения.ДатаСостояния = СнятыСУчета.DisposalDate;
				СтрокаДвижения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОС.СнятоСУчета");
			КонецЦикла;
			
			Попытка
				ОперацияБух.Записать();
				ВыводСтатусаСообщения(, "Создана " + ОперацияБух.Ссылка);
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВыводСтатусаСообщения(, "При записи операции произошла ошибка. Подробности в ЖР");
				ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты Фреш Маркет", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки); 
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
				
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-26 (#4144) 

	// ++ BIT AMerkulov 03112014 
	
	//ОК+ Аверьянова 26.11.14 очистим загруженные строки
	//ТекстОчисткиТаблицы = "DELETE FROM "+БазаДанных+".dbo.RAssetTable_EXT WHERE FALSE OR";
	//ТекстОчисткиТаблицы = ТекстОчисткиТаблицы + " AccountNum = '" + Поле + "'";	
	//Сообщение	= "Текст запроса на удаление:" + ТекстОчисткиТаблицы;
	//ВыводСтатусаСообщения(, Сообщение);
	
	Если СтрокаОСКОчистке <> "" Тогда
		//Формирование запроса
		ЗапросАДО.CommandText = "delete from "+БазаДанных+".dbo.RAssetTable_EXT
		|where AccountNum in (" + СтрокаОСКОчистке + ")";
		//Выполнение запроса
		Выборка = ЗапросАДО.Execute(); 
	КонецЕсли;
	Выборка = ЗапросАДО.Execute(); 
	//ОК- Аверьянова 26.11.14
	
	Сообщение	= "Загрузка ОС завершена:" + ТекущаяДата();
	ВыводСтатусаСообщения(, Сообщение);
	
КонецПроцедуры	
// -- BIT AMerkulov 24072014 /Загрузка ОС

Процедура ПакетнаяЗагрузка() Экспорт
	
	Если Не ПодключениеКБазе() Тогда
		Возврат;
	КонецЕсли;
	Если бит_ЗагружатьКонтрагентов Тогда
		ЗагрузитьКонтрагентов();
	КонецЕсли;
	
	Если бит_ЗагружатьДоговоры Тогда
		ЗагрузитьДоговора();
	КонецЕсли;
	
	Если бит_ЗагружатьНоменклатуру Тогда
		ЗагрузитьНоменклатуру();
	КонецЕсли;
	
	Если бит_ЗагружатьРБП Тогда
		ЗагрузитьРБП();
	КонецЕсли;	
	
	// ++ BIT AMerkulov 24072014 /Загрузка ОС
	Если бит_ЗагружатьОС Тогда
		ЗагрузитьОС();
	КонецЕсли;	
	// -- BIT AMerkulov 24072014 /Загрузка ОС
	
КонецПроцедуры

Функция ПодключениеКБазе()Экспорт    //***БИТ***Теплова***(добавила Экспорт)
	
//Проверка настроеки рабочей базы или копии, если указаны параметры подключения от рабочей базы, копия не должна с ними запуститься

	Если ВРег(СтрокаСоединенияИнформационнойБазы()) <> ВРег(РБСтрокаСоединения) Тогда 
		Если ВРег(Адрес) = ВРег(РБАдресСервера) Тогда
			Сообщение	= "Указаны параметры подключения к рабочей базе из копии. 
						|	Параметры рабочей базы: " + РБСтрокаСоединения + " подключается к : " + РБАдресСервера + "
						|	Параметры текущей базы: " + СтрокаСоединенияИнформационнойБазы() + " подключается к : " + Адрес + "
						|Подключение отменено.";
			ВыводСтатусаСообщения(,Сообщение);
			СделатьЗаписьЖР(Сообщение, УровеньЖурналаРегистрации.Ошибка);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
		
	//***БИТ***Теплова***(2012.06.08 При загрузке по 2-м орагнизациям нужно каждый раз переподключаться к базе
	//Если ПодключеноКБазе Тогда
	//	Возврат Истина;
	//КонецЕсли;
	//***БИТ***Теплова***)
	
	// соединение с базой
	СоединениеАДО = СоздатьСоединениеАДО(); 
	Если СоединениеАДО = Неопределено Тогда 
	   Сообщить("Не удалось СоздатьСоединениеАДО", СтатусСообщения.Важное); 
	   Возврат Ложь; 
	КонецЕсли; 
	ЗапросАДО = СоздатьЗапросАДО(); 
	Если ЗапросАДО = Неопределено Тогда 
	   Сообщить("Не удалось СоздатьЗапросАДО", СтатусСообщения.Важное); 
	   Возврат Ложь; 
	КонецЕсли; 
	Если Не ПодключитьсяАДОкБД(СоединениеАДО, ЗапросАДО) Тогда 
	   Сообщить("Не удалось ПодключитьсяАДОкБД", СтатусСообщения.Важное); 
	   Возврат Ложь; 
	КонецЕсли; 
	
	ПодключеноКБазе = Истина;
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьНастройкиФМ() Экспорт 
	
	Запрос = Новый Запрос;
	
	//Проверка наличия групп в регистре, если их нет, то добавляются
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	""ПараметрыЗагрузкиАксапты"" КАК Группа,
	               |	""Начало Периода Фреш Маркет"" КАК ИмяНастройки,
	               |	ДАТАВРЕМЯ(2011, 1, 1) КАК Значение
	               |ПОМЕСТИТЬ ВТ_ПроверяемыеНастройки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""ПараметрыЗагрузкиАксапты"",
	               |	""Конец Периода Фреш Маркет"",
	               |	ДАТАВРЕМЯ(2011, 12, 31)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""ПараметрыЗагрузкиАксапты"",
	               |	""Порция"",
	               |	""5000""
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""НастройкиРабочейБазы"",
	               |	""РБСтрокаСоединения"",
	               |	""Srvr=""""1c8-app1"""";Ref=""""EIS"""";""
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	""НастройкиРабочейБазы"",
	               |	""РБАдресСервера"",
	               |	""New-sql""
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Группа,
	               |	ИмяНастройки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПроверяемыеНастройки.Группа,
	               |	ВТ_ПроверяемыеНастройки.ИмяНастройки,
	               |	ВТ_ПроверяемыеНастройки.Значение
	               |ИЗ
	               |	ВТ_ПроверяемыеНастройки КАК ВТ_ПроверяемыеНастройки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	               |		ПО ВТ_ПроверяемыеНастройки.Группа = бит_ок_НастройкиМеханизмаИмпортаДанных.Группа
	               |			И ВТ_ПроверяемыеНастройки.ИмяНастройки = бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки
	               |ГДЕ
	               |	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки ЕСТЬ NULL ";
				   
	ТЗНастройки = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Для Каждого СтрокаНастроек из ТЗНастройки Цикл 
		ДобавляемаяНастройка				= РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.СоздатьМенеджерЗаписи();
		ДобавляемаяНастройка.Группа			= СтрокаНастроек.Группа;
		ДобавляемаяНастройка.ИмяНастройки	= СтрокаНастроек.ИмяНастройки;
		ДобавляемаяНастройка.Значение		= СтрокаНастроек.Значение;
		ДобавляемаяНастройка.Записать(Истина);
	КонецЦикла;
	ЗафиксироватьТранзакцию();

	// Параметры подключения и почтовые параметры
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки,
	               |	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение
	               |ИЗ
	               |	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	               |ГДЕ
	               |	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа В (&Группы)";
				   
	Группы	= Новый Массив;
	Группы.Добавить("ПараметрыСоединенияSQL");
	Группы.Добавить("ПочтовыеПараметры");
	Группы.Добавить("Организации");
	Группы.Добавить("Предопределенные группы");
	Группы.Добавить("ПараметрыЗагрузкиАксапты");
	Группы.Добавить("НастройкиРабочейБазы");
	Запрос.УстановитьПараметр("Группы", Группы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИмяНастройки = "ИмяПользователя Фреш Маркет" Тогда
			Пользователь = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Пароль Фреш Маркет" Тогда
			Пароль = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "АдресСервера Фреш Маркет" Тогда
			Адрес = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "БазаДанных Фреш Маркет" Тогда
			БазаДанных = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПутьСохраненияОтчетовОбОшибках" Тогда
			мПутьСохраненияОтчетовОбОшибках = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Таймаут" Тогда
			мТаймаут = Выборка.Значение;
			
		//Почтовые параметры
		ИначеЕсли Выборка.ИмяНастройки = "СерверSMTP" Тогда
			мСерверSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПортSMTP" Тогда
			мПортSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПользовательSMTP" Тогда
			мПользовательSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПарольSMTP" Тогда
			мПарольSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Отправитель" Тогда
			мОтправитель = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Кому" Тогда
			мКому = Выборка.Значение;
		//ИначеЕсли Выборка.ИмяНастройки = "Аутентификация" Тогда
		//	мАутентификация = Выборка.Значение;
			
		// Организации
		ИначеЕсли Выборка.ИмяНастройки = "Организация Фреш Маркет" Тогда
			Организация = Выборка.Значение;
			
		ИначеЕсли Выборка.ИмяНастройки = "Группа номенклатура Фреш Маркет" Тогда
			мГруппаНоменклатура = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Группа расходы будущих периодов Фреш Маркет" Тогда
			мГруппаРБП = Выборка.Значение;
			
		// ++ BIT AMerkulov 24072014 /Загрузка ОС
		ИначеЕсли Выборка.ИмяНастройки = "Группа основные средства Фреш Маркет" Тогда
			мГруппаОС = Выборка.Значение;		
		// -- BIT AMerkulov 24072014 /Загрузка ОС
			
		// ++ BIT AMerkulov 03112014 /Загрузка НМА
		ИначеЕсли Выборка.ИмяНастройки = "Группа НМА Фреш Маркет" Тогда
			мГруппаНМА = Выборка.Значение;		
		// -- BIT AMerkulov 03112014 /Загрузка НМА
			
			// Предопределенные группы
		ИначеЕсли Выборка.ИмяНастройки = "Группа контрагентов Поставщики Фреш Маркет" Тогда
			мПоставщики = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Группа контрагентов Покупатели Фреш Маркет" Тогда
			мПокупатели = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Группа для загрузки договоров Фреш Маркет" Тогда
			мГруппаПоОрганизации = Выборка.Значение;
			
			// Параметры загрузки из аксапты
		ИначеЕсли Выборка.ИмяНастройки = "Порция" Тогда
			Порция 		= Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Конец Периода Фреш Маркет" Тогда
			КонПериода 	= Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Начало Периода Фреш Маркет" Тогда
			НачПериода 	= Выборка.Значение;
			
		//Парамеры рабочей базы 
		ИначеЕсли Выборка.ИмяНастройки = "РБСтрокаСоединения" Тогда
			РБСтрокаСоединения 	= Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "РБАдресСервера" Тогда
			РБАдресСервера 	= Выборка.Значение;
		
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Контрагенты.Ссылка,
	                      |	Контрагенты.НомДокИмпорт
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	Контрагенты.Ссылка В ИЕРАРХИИ(&ГруппаПоОрганизации)");
	Запрос.УстановитьПараметр("ГруппаПоОрганизации", мГруппаПоОрганизации);
	мТЗКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Получить Границу запрета изменения данных
	Запрос = Новый Запрос;
	
	//++ СВВ Сапожников Вадим
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГраницыЗапретаИзмененияДанных.ДатаЗапрета КАК ГраницаЗапретаИзменений
	               |ИЗ
	               |	РегистрСведений.ДатыЗапретаИзменения КАК ГраницыЗапретаИзмененияДанных
	               |ГДЕ
	               |	ГраницыЗапретаИзмененияДанных.Объект = &Организация
	               |	И ГраницыЗапретаИзмененияДанных.Раздел = &Раздел";
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений
	//|ИЗ
	//|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
	//|ГДЕ
	//|	ГраницыЗапретаИзмененияДанных.Организация = &Организация";
	//ОК Довбешка Т. 21.01.2018
	//Запрос.УстановитьПараметр("Раздел", ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.БухгалтерскийУчет);
	Запрос.УстановитьПараметр("Раздел", ДатыЗапретаИзмененияБП.РазделБухгалтерскийУчет().Ссылка);
	//ОК Довбешка Т.
	//-- СВВ
	Запрос.УстановитьПараметр("Организация", Организация);
	ЗапросВыполнить = Запрос.Выполнить();
	Если ЗапросВыполнить.Пустой() Тогда
		Граница = Неопределено;
	Иначе
		Граница = Запрос.Выполнить().Выгрузить()[0].ГраницаЗапретаИзменений;
	КонецЕсли;
	
	// Если Групп поставщиков, покупателей нет или они не заполнена, то поискать по наименованию
	// Родитель - группа поставщики
	Если Не ЗначениеЗаполнено(мПоставщики) Тогда
		мПоставщики = Справочники.Контрагенты.НайтиПоНаименованию("Поставщики (Аксапта)", Истина);
	КонецЕсли;
	// Родитель - группа покупатели
	Если Не ЗначениеЗаполнено(мПокупатели) Тогда
		мПокупатели = Справочники.Контрагенты.НайтиПоНаименованию("Покупатели (Аксапта)", Истина);
	КонецЕсли;
	
	// Заполнить страницу загрузки и сопоставления
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ок_ТипыОперацийАксапты.Код КАК Значение,
	               |	бит_ок_ТипыОперацийАксапты.Наименование КАК Представление,
	               |	бит_ок_ТипыОперацийАксапты.СвернутыеОбороты,
	               |	ИСТИНА КАК Пометка
	               |ИЗ
	               |	Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
	               |ГДЕ
	               |	бит_ок_ТипыОперацийАксапты.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	бит_ок_ТипыОперацийАксапты.Код";
				   
	Таб = Запрос.Выполнить().Выгрузить();
	Для каждого Стр из Таб Цикл
		Если Стр.СвернутыеОбороты Тогда  
			//ТипыОперацийСвернутые.Добавить(Стр.Значение, Стр.Значение + ". " + Стр.Представление, Стр.Пометка);
		Иначе 		
			//ТипыОперацийГруппы.Добавить(Стр.Значение, Стр.Значение + ". " + Стр.Представление, Стр.Пометка);
			ТипыОперацийСопоставление.Добавить(Стр.Значение, Стр.Значение + ". " + Стр.Представление, Стр.Пометка);
		КонецЕсли;
	КонецЦикла;
		
	ПрерываниеПоCtrlBreak		= Истина;
	
КонецПроцедуры

Процедура СделатьЗаписьЖР(Сообщение, Уровень = Неопределено)

	#Если Сервер Тогда
		Если Уровень = Неопределено Тогда 
			Уровень = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Объект в сторно закупок. Обработка" 
		,Уровень 
		,
		,
		,Сообщение);
	#КонецЕсли 

КонецПроцедуры

//Создать объект ADODB.Connection 
//Возврат: 
//   OLE - объект соединение или Неопределено 
Функция СоздатьСоединениеАДО() Экспорт 
   Перем СоединениеАДО; 
   Попытка 
      СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
   Исключение 
      #Если Клиент Тогда 
      Сообщить("Не удалось создать объект ""ADODB.Connection""", СтатусСообщения.Важное); 
      #КонецЕсли 
      Возврат Неопределено; 
   КонецПопытки; 
   //СоединениеАДО.ConnectionTimeOut = 20; 
   //СоединениеАДО.ConnectionTimeOut = 600; 
   //СоединениеАДО.CommandTimeOut = 600; 
   //СоединениеАДО.CursorLocation       = 3; 
   Возврат СоединениеАДО; 
КонецФункции //СоздатьСоединениеАДО() 

//Создать объект ADODB.Command 
//Возврат: 
//   OLE - объект запрос или Неопределено 
Функция СоздатьЗапросАДО() Экспорт 
   Перем ЗапросАДО; 
   Попытка 
      ЗапросАДО = Новый COMОбъект("ADODB.Command");
	  ЗапросАДО.CommandTimeout = ?( (НЕ ЗначениеЗаполнено(мТаймаут)) ИЛИ мТаймаут=0, 600, мТаймаут);
   Исключение 
      #Если Клиент Тогда 
      Сообщить("Не удалось создать объект ""ADODB.Command""", СтатусСообщения.Важное); 
      #КонецЕсли 
      Возврат Неопределено; 
   КонецПопытки; 
   Возврат ЗапросАДО; 
КонецФункции //СоздатьЗапросАДО() 

//СоединениеАДО (OLE) - соединение 
//ЗапросАДО (OLE)      - запрос 
//Возврат: 
//   Булево - удачно, нет 
Функция ПодключитьсяАДОкБД(СоединениеАДО, ЗапросАДО)
	
   //СтрокаСоединения = "Provider=SQLNCLI11;server="+Адрес+";uid="+Пользователь+";pwd="+Пароль+";Database="+БазаДанных; 
   СтрокаСоединения = "DRIVER={SQL Server};SERVER="+Адрес+";UID="+Пользователь+";PWD="+Пароль+";DATABASE="+БазаДанных;
   //СтрокаСоединения = "driver=SQLOLEDB.1;server="+Адрес+";uid="+Пользователь+";pwd="+Пароль+";Database="+БазаДанных +";Connection Timeout=300"; 
   
   
   ////++СВВ проба тест
   //Попытка
   //    Сон = Новый COMОбъект("ADODB.Connection");
   //    Датал = Новый COMОбъект("DataLinks");
   //    Датал.PromptEdit(Сон);
   //Исключение
   //    Сообщить("Тест не прошел");  
   //КонецПопытки;
   //
   ////--СВВ 
   
   Попытка
	  СоединениеАДО.ConnectionTimeOut = ?( (НЕ ЗначениеЗаполнено(мТаймаут)) ИЛИ мТаймаут=0, 600, мТаймаут);
	  //СоединениеАДО.CommandTimeOut = 600;
      СоединениеАДО.Open(СтрокаСоединения); 
   Исключение 
      Сообщить("Не удалось установить соединение с базой данных", СтатусСообщения.Важное); 
      Возврат Ложь; 
   КонецПопытки; 
    
   ЗапросАДО.ActiveConnection = СоединениеАДО; 
    
   Возврат Истина; 
    
КонецФункции // ПодключитьсяАДОкБД()

// Загрузка документов
Процедура Загрузка(ЗагрузитьГруппу=Истина, ДатаНачала=Неопределено, ДатаОкончания=Неопределено, ТипыОпераций=Неопределено, Порция = 0, УсловиеRecNoВаучеры="", ПроверятьЗакрытыйПериод = Ложь) Экспорт

	// Ок Видяйкин 20171121 (Извещение на e-mail о рез. выполнения регл. задания "ОК_ЗагрузкаДанныхИзАксаптыФМ") +
	ВремяНачалаЗагрузки = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy hh:mm:ss"); 
	КоличествоДокЗагруженных = 0;
	// Ок Видяйкин 20171121 -
	
	Если ПроверятьЗакрытыйПериод Тогда 
		Если ДатаНачала <> Неопределено И Граница <> Неопределено Тогда
			Если ДатаНачала < Граница Тогда
				Сообщение = "Дата запрета редактирования " + Граница + ", позже периода загрузки, начинающегося с " + ДатаНачала; 
				#Если Сервер Тогда
					ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты" 
					,УровеньЖурналаРегистрации.Ошибка 
					,
					,
					,Сообщение);
				#ИначеЕсли Клиент Тогда 
					Предупреждение(Сообщение);
				#КонецЕсли 
				//ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,Сообщение);
				//Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	ДатаНачалаЗагрузки = ТекущаяДата();
	// проверим поступившие параметры
	Если ЗагрузитьГруппу Тогда
		Если ДатаНачала=Неопределено
		 ИЛИ ТипЗнч(ДатаНачала)<>Тип("Дата")
		 ИЛИ ДатаОкончания=Неопределено
		 ИЛИ ТипЗнч(ДатаОкончания)<>Тип("Дата")
		 ИЛИ ТипыОпераций=Неопределено
		 ИЛИ ТипЗнч(ТипыОпераций)<>Тип("Массив")
		 ИЛИ ТипыОпераций.Количество() = 0
		 ИЛИ Порция <= 0
		 ИЛИ ДатаНачала > ДатаОкончания Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если УсловиеRecNoВаучеры = "" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ЗагрузитьГруппу", ЗагрузитьГруппу);
	СтруктураНастройки.Вставить("ДатаНачала", ДатаНачала);
	СтруктураНастройки.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураНастройки.Вставить("ТипыОпераций", ТипыОпераций);
	СтруктураНастройки.Вставить("Порция", Порция);
	СтруктураНастройки.Вставить("УсловиеRecNoВаучеры", УсловиеRecNoВаучеры);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
	СтруктураНастройки.Вставить("МассивПропущенныхVoucher", 		Новый Массив);
	СтруктураНастройки.Вставить("МассивПовторноЗагруженныхVoucher", Новый Массив);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
	
	// Подключение к базе
	Если Не ПодключениеКБазе() Тогда
		Возврат;
	КонецЕсли;
	
	//Заполнение контрагентов
	ЗагрузитьКонтрагентов();
	//***БИТ***Теплова***(
	Если бит_ЗагружатьДоговоры Тогда
		ЗагрузитьДоговора(); 
	КонецЕсли;
	//***БИТ***Теплова***)
	//Загрузка данных
	ТаблицаОшибок = Новый ТаблицаЗначений;
	
	ТаблицаОшибокБезИсключений = Новый ТаблицаЗначений;   //***БИТ***Теплова***
	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 05.10.2015 14:07:18
	ТаблицаСтатДанных = Новый ТаблицаЗначений;
	ТаблицаСтатДанных.Колонки.Добавить("ЗагруженоДок");
	//-- СВВ}
	
	Если ЗагрузитьГруппу Тогда
		// Загрузка порциями
		ДанныеЕщеЕсть = Истина;
		ФлагиПостедОбновлены = Истина;
		Пока ДанныеЕщеЕсть Цикл 
			//Получение данных, сопоставление аналитики
			Данные = ПолучениеДанных(СтруктураНастройки);
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
			//ДанныеЕщеЕсть = Данные.Количество() > 0 И ФлагиПостедОбновлены;
			ДанныеЕщеЕсть = Данные.Количество() > 0;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
			
			Если ДанныеЕщеЕсть Тогда
				//Формирование данных в системе
				КоличествоЗагруженных = КоличествоЗагруженных + Данные.Количество();
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
				//ФлагиПостедОбновлены = ФормированиеДанных(Данные,ТаблицаСтатДанных);
				ФлагиПостедОбновлены = ФормированиеДанных(Данные, ТаблицаСтатДанных, СтруктураНастройки);
				
				Если НЕ ФлагиПостедОбновлены 
					И ТипЗнч(СтруктураНастройки) = Тип("Структура")
					И СтруктураНастройки.Свойство("МассивПропущенныхVoucher") Тогда
					
					ТабВаучеров = Данные.Скопировать(,"Voucher");
					ТабВаучеров.Свернуть("Voucher");
					
					Для каждого Voucher Из ТабВаучеров Цикл
					
						Если СтруктураНастройки.МассивПропущенныхVoucher.Найти(Voucher.Voucher) = Неопределено Тогда
							СтруктураНастройки.МассивПропущенныхVoucher.Добавить(Voucher.Voucher);
							КоличествоЗагруженных = КоличествоЗагруженных - 1;
						КонецЕсли; 
					
					КонецЦикла; 
				
				КонецЕсли;
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
		    КонецЕсли;

		КонецЦикла;
		ДатаОкончанияЗагрузки = ТекущаяДата();
		// Ок Видяйкин 20171121 (Извещение на e-mail о рез. выполнения регл. задания "ОК_ЗагрузкаДанныхИзАксаптыФМ") +
		//СформироватьИПередатьОтчет(ТаблицаОшибок, СтруктураНастройки, ДатаНачалаЗагрузки, ДатаОкончанияЗагрузки);
		Попытка
			КоличествоДокЗагруженных = ТаблицаСтатДанных.Итог("ЗагруженоДок"); 	
    		СформироватьИПередатьОтчет(ТаблицаОшибок, СтруктураНастройки, ДатаНачалаЗагрузки, ДатаОкончанияЗагрузки);
		Исключение
			ЗаписьЖурналаРегистрации("Неудачный запуск отправки отчета о работе обработки загрузки из аксапты (Ок)" 
			,УровеньЖурналаРегистрации.Ошибка
			, 
			,
			,ОписаниеОшибки());
		КонецПопытки;
		// Ок Видяйкин 20171121 -
	Иначе
		//Получение данных, сопоставление аналитики
		Данные = ПолучениеДанных(СтруктураНастройки);
		
		#Если Клиент Тогда
			Если НЕ ЗагрузитьГруппу Тогда

				Для каждого Стр из Данные Цикл
					Если ЗначениеЗаполнено(Граница) И Стр.DocDate < Граница Тогда
						Предупреждение("Документ RecNo=" + Стр.RecNo + ", Ваучер=" + Стр.Voucher + ", находится в закрытом периоде. Обработка остановлена." );
						Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		#КонецЕсли 
		
		//Формирование данных в системе
		ФормированиеДанных(Данные,ТаблицаСтатДанных);
	КонецЕсли;
	Сообщить("Загружено документов - " + ТаблицаСтатДанных.Итог("ЗагруженоДок"));;

КонецПроцедуры

 ///////////////////////
Функция ПолучениеДанных(СтруктураНастройки)
	
	// получение оборотов
	ОборотыАксапты = ПолучениеОборотов(СтруктураНастройки);
	
	// выборка аналитики
	ОборотыАксапты = ПроставитьТипыАналитики(ОборотыАксапты);
	
	// сопоставление аналитики
	СопоставленнаяАналитика = СопоставлениеАналитики(ОборотыАксапты);
	
	// проставление сопоставления
    Данные = ЗаполнитьСопоставленнуюАналитику(ОборотыАксапты, СопоставленнаяАналитика);
	
	Возврат Данные;
	
КонецФункции

Функция ПолучениеОборотов(СтруктураНастройки)
	
	//Условия запроса
	Если СтруктураНастройки.ЗагрузитьГруппу Тогда
		// количество проводок
		Число = СтруктураНастройки.Порция;
		ЧислоПроводок = "TOP (" + Формат(Число, "ЧГ=0") + ")";
		
		// блок условий по типам операций
		ТипыОпераций = СтруктураНастройки.ТипыОпераций;
		Если ТипыОпераций.Количество() = 1 Тогда
			УсловияПоТипуДокумента = "DocType = " + ТипыОпераций[0].Код;
		Иначе
			УсловияПоТипуДокумента = "";
			Для каждого ТипОп из ТипыОпераций Цикл
				Если НЕ УсловияПоТипуДокумента = "" Тогда
					УсловияПоТипуДокумента = УсловияПоТипуДокумента + " or ";
				КонецЕсли;
				УсловияПоТипуДокумента = УсловияПоТипуДокумента + "DocType = " + ТипОп.Код;
			КонецЦикла;
			УсловияПоТипуДокумента = "(" + УсловияПоТипуДокумента + ")";
		КонецЕсли;
		
		// условие по периоду
		ДатаНачала =  Формат(СтруктураНастройки.ДатаНачала, "ДФ=""ггггММдд""");
		ДатаОкончания = Формат(СтруктураНастройки.ДатаОкончания, "ДФ=ггггММдд");
		
		УсловиеПоПериоду = "((DocDate>='" + ДатаНачала + "') and (DocDate<='" + ДатаОкончания + "'))";
		// Нужен наш флаг Posted. И по нему написать условия.
		УсловиеPosted = "(Posted = 0)";
		
		ВсеУсловия = УсловияПоТипуДокумента + " and " + УсловиеПоПериоду + " and " + УсловиеPosted;
	Иначе
		ЧислоПроводок = "";
		ВсеУсловия = СтруктураНастройки.УсловиеRecNoВаучеры;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
	Если ТипЗнч(СтруктураНастройки) = Тип("Структура")
		И СтруктураНастройки.Свойство("МассивПропущенныхVoucher")
		И СтруктураНастройки.МассивПропущенныхVoucher.Количество() > 0 Тогда
		
		УсловияПоVoucher = "";
		Для каждого Voucher из СтруктураНастройки.МассивПропущенныхVoucher Цикл
			Если НЕ УсловияПоVoucher = "" Тогда
				УсловияПоVoucher = УсловияПоVoucher + ", ";
			КонецЕсли;
			УсловияПоVoucher = УсловияПоVoucher + "'" + Voucher + "'";
		КонецЦикла;
		
		УсловияПоVoucher = "Voucher NOT in (" + УсловияПоVoucher + ")";
		
		ВсеУсловия = ВсеУсловия + " and " + УсловияПоVoucher;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
	
	Попытка
		
		//Формирование запроса
		ЗапросАДО.CommandText =" use "+БазаДанных+"; 
		|SELECT
		|ExportDataTo1cDocHeader.RecNo,
		|ExportDataTo1cDocHeader.DocNum,
		|ExportDataTo1cDocHeader.Voucher,
		|ExportDataTo1cDocHeader.ReferVoucherId,
		//***БИТ***Теплова***(
		|ExportDataTo1cDocHeader.BudgetIntID,
		//***БИТ***Теплова***)
		|ExportDataTo1cDocHeader.DocDate,
		|ExportDataTo1cDocHeader.DocType, 
		|ExportDataTo1cDocHeader.Type,
		|ExportDataTo1cDocHeader.Comment,
		|ExportDataTo1cDocHeader.Posted,
		|ExportDataTo1CDocTrans.RefRecNo,
		|ExportDataTo1CDocTrans.Voucher AS VoucherTrans,
		|ExportDataTo1CDocTrans.AccD,
		|ExportDataTo1CDocTrans.DimD1,
		|ExportDataTo1CDocTrans.DimD2, 
		|ExportDataTo1CDocTrans.DimD3,
		|ExportDataTo1CDocTrans.DimD4,
		|ExportDataTo1CDocTrans.DimD5,
		//|ExportDataTo1CDocTrans.DimD6,
		|ExportDataTo1CDocTrans.TypeD,
		|ExportDataTo1CDocTrans.AccC,
		|ExportDataTo1CDocTrans.DimC1, 
		|ExportDataTo1CDocTrans.DimC2,
		|ExportDataTo1CDocTrans.DimC3,
		|ExportDataTo1CDocTrans.DimC4,
		|ExportDataTo1CDocTrans.DimC5,
		//|ExportDataTo1CDocTrans.DimC6,
		|ExportDataTo1CDocTrans.TypeC,
		|ExportDataTo1CDocTrans.Amount, 
		|ExportDataTo1CDocTrans.AmountCur,
		|ExportDataTo1CDocTrans.CurrencyCode,
		|ExportDataTo1CDocTrans.Corr
		|FROM
		|	(SELECT
		|		" + ЧислоПроводок + "
		|		ExportDataTo1cDocHeader.RecNo
		|		FROM         ExportDataTo1cDocHeader
		|		where " + ВсеУсловия + "
		|	) as Headers
		|LEFT OUTER JOIN
		|		ExportDataTo1cDocHeader
		|ON Headers.RecNo = ExportDataTo1cDocHeader.RecNo
		|LEFT OUTER JOIN
		|				ExportDataTo1CDocTrans
		|ON ExportDataTo1cDocHeader.RecNo = ExportDataTo1CDocTrans.RefRecNo";
		
		//Выполнение запроса
		Сообщение				= "Начало загрузки документов: 	" + ТекущаяДата();
		Статус					= "Запрос к экспортным таблицам SQL";
		ВыводСтатусаСообщения(Статус, );
		
		Выборка = ЗапросАДО.Execute(); 
		
	Исключение
		
		Сообщить("В таблицах не найдены валютные поля, запрос будет переформирован без их учета!");

		//Формирование запроса
		ЗапросАДО.CommandText =" use "+БазаДанных+"; 
		|SELECT
		|ExportDataTo1cDocHeader.RecNo,
		|ExportDataTo1cDocHeader.DocNum,
		|ExportDataTo1cDocHeader.Voucher,
		|ExportDataTo1cDocHeader.ReferVoucherId,
		|ExportDataTo1cDocHeader.BudgetIntID,
		|ExportDataTo1cDocHeader.DocDate,
		|ExportDataTo1cDocHeader.DocType, 
		|ExportDataTo1cDocHeader.Type,
		|ExportDataTo1cDocHeader.Comment,
		|ExportDataTo1cDocHeader.Posted,
		|ExportDataTo1CDocTrans.RefRecNo,
		|ExportDataTo1CDocTrans.Voucher AS VoucherTrans,
		|ExportDataTo1CDocTrans.AccD,
		|ExportDataTo1CDocTrans.DimD1,
		|ExportDataTo1CDocTrans.DimD2, 
		|ExportDataTo1CDocTrans.DimD3,
		|ExportDataTo1CDocTrans.DimD4,
		|ExportDataTo1CDocTrans.DimD5,
		//|ExportDataTo1CDocTrans.DimD6,
		|ExportDataTo1CDocTrans.TypeD,
		|ExportDataTo1CDocTrans.AccC,
		|ExportDataTo1CDocTrans.DimC1, 
		|ExportDataTo1CDocTrans.DimC2,
		|ExportDataTo1CDocTrans.DimC3,
		|ExportDataTo1CDocTrans.DimC4,
		|ExportDataTo1CDocTrans.DimC5,
		//|ExportDataTo1CDocTrans.DimC6,
		|ExportDataTo1CDocTrans.TypeC,
		|ExportDataTo1CDocTrans.Amount, 
		|ExportDataTo1CDocTrans.Corr
		|FROM
		|	(SELECT
		|		" + ЧислоПроводок + "
		|		ExportDataTo1cDocHeader.RecNo
		|		FROM         ExportDataTo1cDocHeader
		|		where " + ВсеУсловия + "
		|	) as Headers
		|LEFT OUTER JOIN
		|		ExportDataTo1cDocHeader
		|ON Headers.RecNo = ExportDataTo1cDocHeader.RecNo
		|LEFT OUTER JOIN
		|				ExportDataTo1CDocTrans
		|ON ExportDataTo1cDocHeader.RecNo = ExportDataTo1CDocTrans.RefRecNo";
		
		//Выполнение запроса
		Сообщение				= "Начало загрузки документов: 	" + ТекущаяДата();
		Статус					= "Запрос к экспортным таблицам SQL";
		ВыводСтатусаСообщения(Статус, );
		
		Выборка = ЗапросАДО.Execute(); 
		
	КонецПопытки;
    ОповеститьПользователя("Сопоставление аналитики");
	
	//Формирование таблицы для хранения и обработки результата данных
	ТабОбороты = СформироватьТаблицуОборотов();
	
	Пока Не Выборка.EOF() Цикл 
	   НовСтр = ТабОбороты.Добавить();
	   Для каждого Колонка из ТабОбороты.Колонки Цикл
		   Попытка
			   
			   Имя = Колонка.Имя;
			   НовСтр[Имя] = Выборка.Fields(Имя).Value;
			   
		   Исключение
			   
		   КонецПопытки;
	   КонецЦикла;
	   Выборка.MoveNext(); 
	КонецЦикла;	
	
	// Возврат Данные;
	Возврат ТабОбороты;
	
КонецФункции

Функция ПроставитьТипыАналитики(ОборотыАксапты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабОА", ОборотыАксапты);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабОА.RecNo,
	               |	ТабОА.DocNum,
	               |	ТабОА.Voucher,
	               |	ТабОА.ReferVoucherId, 
	               |	ТабОА.DocDate,
	               |	ТабОА.Comment,
	               |	ТабОА.Posted,
	               |	ТабОА.RefRecNo,
	               |	ТабОА.Amount,
	               |	ТабОА.DocType,
	               |	ТабОА.AccD,
	               |	ТабОА.AccC,
	               |	ТабОА.DimD1,
	               |	ТабОА.DimD2,
	               |	ТабОА.DimD3,
	               |	ТабОА.DimD4,
	               |	ТабОА.DimD5,
	               //|	ТабОА.DimD6,
	               |	ТабОА.DimC1,
	               |	ТабОА.DimC2,
	               |	ТабОА.DimC3,
	               |	ТабОА.DimC4,
	               |	ТабОА.DimC5,
	              // |	ТабОА.DimC6,
	               |	ТабОА.BudgetIntID, //***БИТ***Теплова***
	               |	ТабОА.AmountCur, //***БИТ***Теплова***
	               |	ТабОА.CurrencyCode //***БИТ***Теплова***
	               |ПОМЕСТИТЬ ТабОА
	               |ИЗ
	               |	&ТабОА КАК ТабОА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОА.RecNo,
	               |	ТабОА.DocNum,
	               |	ТабОА.Voucher,
	               |	ТабОА.ReferVoucherId, 
	               |	ТабОА.DocDate,
	               |	ТабОА.Comment,
	               |	ТабОА.Posted,
	               |	ТабОА.RefRecNo,
	               |	ТабОА.Amount,
	               |	ТабОА.DocType,
	               |	ТабОА.DocType КАК DocType1,
	               |	ТабОА.BudgetIntID, //***БИТ***Теплова***
	               |	ТабОА.AmountCur, //***БИТ***Теплова***
	               |	ТабОА.CurrencyCode, //***БИТ***Теплова***
	               |	ТабОА.AccD,
	               |	ТабОА.DimD1 КАК DimD1,
	               |	ВЫБОР
	               |		КОГДА бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто1 ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто1
	               |	КОНЕЦ КАК СубконтоДт1Тип1С,
	               |	ТабОА.DimD2 КАК DimD2,
	               |	ВЫБОР
	               |		КОГДА бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто2 ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто2
	               |	КОНЕЦ КАК СубконтоДт2Тип1С,
	               |	ТабОА.DimD3 КАК DimD3,
	               |	ВЫБОР
	               |		КОГДА бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто3 ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто3
	               |	КОНЕЦ КАК СубконтоДт3Тип1С,
	               |	ТабОА.DimD4 КАК DimD4,
	               |	ВЫБОР
	               |		КОГДА бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто4 ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто4
	               |	КОНЕЦ КАК СубконтоДт4Тип1С,
	               |	ТабОА.DimD5 КАК DimD5,
	               |	ВЫБОР
	               |		КОГДА бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто5 ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто5
	               |	КОНЕЦ КАК СубконтоДт5Тип1С,
				   //|	ТабОА.DimD6 КАК DimD6,
				   //|	ВЫБОР
				   //|		КОГДА бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто6 ЕСТЬ NULL 
				   //|			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
				   //|		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаДТ.ТипСубконто6
				   //|	КОНЕЦ КАК СубконтоДт6Тип1С,
	               |	ТабОА.AccC,
	               |	ТабОА.DimC1 КАК DimC1,
	               |	ВЫБОР
	               |		КОГДА бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто1 ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто1
	               |	КОНЕЦ КАК СубконтоКт1Тип1С,
	               |	ТабОА.DimC2 КАК DimC2,
	               |	ВЫБОР
	               |		КОГДА бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто2 ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто2
	               |	КОНЕЦ КАК СубконтоКт2Тип1С,
	               |	ТабОА.DimC3 КАК DimC3,
	               |	ВЫБОР
	               |		КОГДА бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто3 ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто3
	               |	КОНЕЦ КАК СубконтоКт3Тип1С,
	               |	ТабОА.DimC4 КАК DimC4,
	               |	ВЫБОР
	               |		КОГДА бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто4 ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто4
	               |	КОНЕЦ КАК СубконтоКт4Тип1С,
	               |	ТабОА.DimC5 КАК DimC5,
	               |	ВЫБОР
	               |		КОГДА бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто5 ЕСТЬ NULL 
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто5
	               |	КОНЕЦ КАК СубконтоКт5Тип1С,
	               //|	ТабОА.DimC6 КАК DimC6,
				   //|	ВЫБОР
				   //|		КОГДА бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто6 ЕСТЬ NULL 
				   //|			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
				   //|		ИНАЧЕ бит_ок_АналитикаСчетовАксаптаКТ.ТипСубконто6
				   //|	КОНЕЦ КАК СубконтоКт6Тип1С,
	               |	бит_ок_ТипыОперацийАксапты.Ссылка КАК ТипОперации1С
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_АналитикаСчетовАксапта КАК бит_ок_АналитикаСчетовАксаптаДТ
	               |		ПО ТабОА.DocType = бит_ок_АналитикаСчетовАксаптаДТ.ТипДокумента.Код
	               |			И (ПОДСТРОКА(ТабОА.AccD, 1, 2) = бит_ок_АналитикаСчетовАксаптаДТ.СчетАксапты)
	               |			И (бит_ок_АналитикаСчетовАксаптаДТ.Организация = &Организация)   //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_АналитикаСчетовАксапта КАК бит_ок_АналитикаСчетовАксаптаКТ
	               |		ПО ТабОА.DocType = бит_ок_АналитикаСчетовАксаптаКТ.ТипДокумента.Код
	               |			И (ПОДСТРОКА(ТабОА.AccC, 1, 2) = бит_ок_АналитикаСчетовАксаптаКТ.СчетАксапты)
	               |			И (бит_ок_АналитикаСчетовАксаптаКТ.Организация = &Организация) //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
	               |		ПО ТабОА.DocType = бит_ок_ТипыОперацийАксапты.Код";	
	Запрос.УстановитьПараметр("Организация", Организация);	//***БИТ***Теплова***		   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СопоставлениеАналитики(ОборотыАксапты)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабОА", ОборотыАксапты);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабОА.DocType,
	               |	ТабОА.AccD,
	               |	ТабОА.AccC,
	               |	ТабОА.DimD1,
	               |	ТабОА.DimD2,
	               |	ТабОА.DimD3,
	               |	ТабОА.DimD4,
	               |	ТабОА.DimD5,
	               //|	ТабОА.DimD6,
	               |	ТабОА.DimC1,
	               |	ТабОА.DimC2,
	               |	ТабОА.DimC3,
	               |	ТабОА.DimC4,
	               |	ТабОА.DimC5,
	               //|	ТабОА.DimC6,
	               |	ТабОА.СубконтоДт1Тип1С,
	               |	ТабОА.СубконтоДт2Тип1С,
	               |	ТабОА.СубконтоДт3Тип1С,
	               |	ТабОА.СубконтоДт4Тип1С,
	               |	ТабОА.СубконтоДт5Тип1С,
	               //|	ТабОА.СубконтоДт6Тип1С,
	               |	ТабОА.СубконтоКт1Тип1С,
	               |	ТабОА.СубконтоКт2Тип1С,
	               |	ТабОА.СубконтоКт3Тип1С,
	               |	ТабОА.СубконтоКт4Тип1С,
	               |	ТабОА.СубконтоКт5Тип1С
				   //,
	               //|	ТабОА.СубконтоКт6Тип1С
	               |ПОМЕСТИТЬ ТабОА
	               |ИЗ
	               |	&ТабОА КАК ТабОА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОА.AccD КАК Acc,
	               |	ТабОА.DimD1 КАК Dim
	               |ПОМЕСТИТЬ АналитикаАксапты
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |ГДЕ
	               |	ТабОА.СубконтоДт1Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабОА.AccD,
	               |	ТабОА.DimD2
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |ГДЕ
	               |	ТабОА.СубконтоДт2Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабОА.AccD,
	               |	ТабОА.DimD3
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |ГДЕ
	               |	ТабОА.СубконтоДт3Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабОА.AccD,
	               |	ТабОА.DimD4
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |ГДЕ
	               |	ТабОА.СубконтоДт4Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабОА.AccD,
	               |	ТабОА.DimD5
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |ГДЕ
	               |	ТабОА.СубконтоДт5Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
				   //|ОБЪЕДИНИТЬ ВСЕ
				   //|
				   //|ВЫБРАТЬ
				   //|	ТабОА.AccD,
				   //|	ТабОА.DimD6
				   //|ИЗ
				   //|	ТабОА КАК ТабОА
				   //|ГДЕ
				   //|	ТабОА.СубконтоДт6Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабОА.AccC,
	               |	ТабОА.DimC1
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |ГДЕ
	               |	ТабОА.СубконтоКт1Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабОА.AccC,
	               |	ТабОА.DimC2
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |ГДЕ
	               |	ТабОА.СубконтоКт2Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабОА.AccC,
	               |	ТабОА.DimC3
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |ГДЕ
	               |	ТабОА.СубконтоКт3Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабОА.AccC,
	               |	ТабОА.DimC4
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |ГДЕ
	               |	ТабОА.СубконтоКт4Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабОА.AccC,
	               |	ТабОА.DimC5
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |ГДЕ
	               |	ТабОА.СубконтоКт5Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |
				   //|ОБЪЕДИНИТЬ ВСЕ
				   //|
				   //|ВЫБРАТЬ
				   //|	ТабОА.AccC,
				   //|	ТабОА.DimC6
				   //|ИЗ
				   //|	ТабОА КАК ТабОА
				   //|ГДЕ
				   //|	ТабОА.СубконтоКт6Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АналитикаАксапты.Acc,
	               |	АналитикаАксапты.Dim,
	               |	ПОДСТРОКА(АналитикаАксапты.Acc, 1, 2) КАК СчетВерхнегоУровня
	               |ПОМЕСТИТЬ АналитикаАксаптыСгруппированная
	               |ИЗ
	               |	АналитикаАксапты КАК АналитикаАксапты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АналитикаАксапты.Acc,
	               |	АналитикаАксапты.Dim,
	               |	ПОДСТРОКА(АналитикаАксапты.Acc, 1, 2)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АналитикаАксаптыСгруппированная.Acc,
	               |	АналитикаАксаптыСгруппированная.Dim,
	               |	бит_ок_СопоставлениеАналитики.Аналитика1С,
	               |	бит_ок_СопоставлениеАналитики.Тип1С,
	               |	ВЫБОР
	               |		КОГДА бит_ок_СопоставлениеАналитики.Аналитика1С ЕСТЬ NULL 
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НеСопоставлено
	               |ИЗ
	               |	АналитикаАксаптыСгруппированная КАК АналитикаАксаптыСгруппированная
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК бит_ок_СопоставлениеАналитики
	               //ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-13 (#4159)
				   //|		ПО АналитикаАксаптыСгруппированная.Dim = бит_ок_СопоставлениеАналитики.КодАналитикиАксапты
				   |		ПО АналитикаАксаптыСгруппированная.Dim <> """"
				   |			И бит_ок_СопоставлениеАналитики.КодАналитикиАксапты <> """" 
				   |			И АналитикаАксаптыСгруппированная.Dim = бит_ок_СопоставлениеАналитики.КодАналитикиАксапты
				   //ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-13 (#4159)
	               |			И АналитикаАксаптыСгруппированная.СчетВерхнегоУровня = бит_ок_СопоставлениеАналитики.СчетАксапты
				   //***БИТ***Теплова***(
				   |			И (бит_ок_СопоставлениеАналитики.Организация = &Организация)";
	Запрос.УстановитьПараметр("Организация", Организация);			   
				   //***БИТ***Теплова***)
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаполнитьСопоставленнуюАналитику(ОборотыАксапты, СопоставленнаяАналитика)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабОА", ОборотыАксапты);
	Запрос.УстановитьПараметр("Аналитика", СопоставленнаяАналитика);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.НомерСтроки,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.ИД,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Значение,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяТаблицы
	               |ПОМЕСТИТЬ СчетаАХ
	               |ИЗ
	               |	Справочник.бит_ПравилаТрансляции.ЗначенияРеквизитов КАК бит_ПравилаТрансляцииЗначенияРеквизитов
	               |ГДЕ
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка В ИЕРАРХИИ(&СсылкаНаПравило)
	               |	И (бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки = ""бит_ок_ОборотыАксапты_СчетДт""
	               |			ИЛИ бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки = ""бит_ок_ОборотыАксапты_СчетКт"")
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.НомерСтроки,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.ИД,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Значение,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяТаблицы
	               |ПОМЕСТИТЬ Счета1С
	               |ИЗ
	               |	Справочник.бит_ПравилаТрансляции.ЗначенияРеквизитов КАК бит_ПравилаТрансляцииЗначенияРеквизитов
	               |ГДЕ
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка В ИЕРАРХИИ(&СсылкаНаПравило)
	               |	И бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки = ""Хозрасчетный_Счет""
	               |	И бит_ПравилаТрансляцииЗначенияРеквизитов.Значение ССЫЛКА ПланСчетов.Хозрасчетный
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СчетаАХ.Значение КАК СчетАХ,
	               |	Счета1С.Значение КАК Счет1С
	               |ПОМЕСТИТЬ ВТ_Счета
	               |ИЗ
	               |	СчетаАХ КАК СчетаАХ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Счета1С КАК Счета1С
	               |		ПО СчетаАХ.ИД = Счета1С.ИД
	               |ГДЕ
	               |	Счета1С.Значение.Валютный = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОА.RecNo,
	               |	ТабОА.DocNum,
	               |	ТабОА.Voucher,
	               |	ТабОА.ReferVoucherId,
	               |	ТабОА.DocDate,
	               |	ТабОА.Comment,
	               |	ТабОА.Posted,
	               |	ТабОА.RefRecNo,
	               |	ТабОА.Amount,
	               |	ТабОА.DocType,
	               |	ТабОА.СубконтоДт1Тип1С,
	               |	ТабОА.СубконтоДт2Тип1С,
	               |	ТабОА.СубконтоДт3Тип1С,
	               |	ТабОА.СубконтоДт4Тип1С,
	               |	ТабОА.СубконтоДт5Тип1С,
	               //|	ТабОА.СубконтоДт6Тип1С,
	               |	ТабОА.СубконтоКт1Тип1С,
	               |	ТабОА.СубконтоКт2Тип1С,
	               |	ТабОА.СубконтоКт3Тип1С,
	               |	ТабОА.СубконтоКт4Тип1С,
	               |	ТабОА.СубконтоКт5Тип1С,
	               //|	ТабОА.СубконтоКт6Тип1С,
	               |	ТабОА.AccD,
	               |	ТабОА.AccC,
	               |	ТабОА.DimD1,
	               |	ТабОА.DimD2,
	               |	ТабОА.DimD3,
	               |	ТабОА.DimD4,
	               |	ТабОА.DimD5,
	               //|	ТабОА.DimD6,
	               |	ТабОА.DimC1,
	               |	ТабОА.DimC2,
	               |	ТабОА.DimC3,
	               |	ТабОА.DimC4,
	               |	ТабОА.DimC5,
	               //|	ТабОА.DimC6,
	               |	ТабОА.AmountCur,
	               |	ТабОА.CurrencyCode,
	               |	ТабОА.ТипОперации1С,
	               |	ТабОА.BudgetIntID
	               |ПОМЕСТИТЬ ТабОА
	               |ИЗ
	               |	&ТабОА КАК ТабОА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Аналитика.Acc,
	               |	Аналитика.Dim,
	               |	Аналитика.Аналитика1С,
	               |	Аналитика.Тип1С
	               |ПОМЕСТИТЬ Аналитика
	               |ИЗ
	               |	&Аналитика КАК Аналитика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ТабОА.RecNo) КАК RecNo,
	               |	ТабОА.Voucher
	               |ПОМЕСТИТЬ МаксRecNo
	               |ИЗ
	               |	ТабОА КАК ТабОА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТабОА.Voucher
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабОА.RecNo КАК RecNo,
	               |	ТабОА.DocNum,
	               |	ТабОА.Voucher,
	               |	ТабОА.ReferVoucherId,
	               |	ТабОА.DocDate,
	               |	ТабОА.Comment,
	               |	ТабОА.Posted,
	               |	ТабОА.RefRecNo,
	               |	ТабОА.Amount КАК Сумма,
	               |	ТабОА.DocType,
	               |	ТабОА.ТипОперации1С,
	               |	ТабОА.СубконтоДт1Тип1С,
	               |	ТабОА.СубконтоДт2Тип1С,
	               |	ТабОА.СубконтоДт3Тип1С,
	               |	ТабОА.СубконтоДт4Тип1С,
	               |	ТабОА.СубконтоДт5Тип1С,
	               //|	ТабОА.СубконтоДт6Тип1С,
	               |	ТабОА.СубконтоКт1Тип1С,
	               |	ТабОА.СубконтоКт2Тип1С,
	               |	ТабОА.СубконтоКт3Тип1С,
	               |	ТабОА.СубконтоКт4Тип1С,
	               |	ТабОА.СубконтоКт5Тип1С,
	               //|	ТабОА.СубконтоКт6Тип1С,
	               |	ТабОА.AccD КАК СчетДт,
	               |	ТабОА.AccC КАК СчетКт,
	               |	ТабОА.DimD1 КАК СубконтоАксаптаДт1,
	               |	ТабОА.DimD2 КАК СубконтоАксаптаДт2,
	               |	ТабОА.DimD3 КАК СубконтоАксаптаДт3,
	               |	ТабОА.DimD4 КАК СубконтоАксаптаДт4,
	               |	ТабОА.DimD5 КАК СубконтоАксаптаДт5,
	               //|	ТабОА.DimD6 КАК СубконтоАксаптаДт6,
	               |	ТабОА.DimC1 КАК СубконтоАксаптаКт1,
	               |	ТабОА.DimC2 КАК СубконтоАксаптаКт2,
	               |	ТабОА.DimC3 КАК СубконтоАксаптаКт3,
	               |	ТабОА.DimC4 КАК СубконтоАксаптаКт4,
	               |	ТабОА.DimC5 КАК СубконтоАксаптаКт5,
	               //|	ТабОА.DimC6 КАК СубконтоАксаптаКт6,
	               |	АналитикаДт1.Аналитика1С КАК Субконто1СДт1,
	               |	АналитикаДт2.Аналитика1С КАК Субконто1СДт2,
	               |	АналитикаДт3.Аналитика1С КАК Субконто1СДт3,
	               |	АналитикаДт4.Аналитика1С КАК Субконто1СДт4,
	               |	АналитикаДт5.Аналитика1С КАК Субконто1СДт5,
	               //|	АналитикаДт6.Аналитика1С КАК Субконто1СДт6,
	               |	АналитикаКт1.Аналитика1С КАК Субконто1СКт1,
	               |	АналитикаКт2.Аналитика1С КАК Субконто1СКт2,
	               |	АналитикаКт3.Аналитика1С КАК Субконто1СКт3,
	               |	АналитикаКт4.Аналитика1С КАК Субконто1СКт4,
	               |	АналитикаКт5.Аналитика1С КАК Субконто1СКт5,
	               //|	АналитикаКт6.Аналитика1С КАК Субконто1СКт6,
	               |	ТабОА.BudgetIntID,
	               |	ВЫБОР
	               |		КОГДА (НЕ ВТ_Счета_Дт.Счет1С ЕСТЬ NULL )
	               |			ТОГДА ТабОА.AmountCur
	               |	КОНЕЦ КАК ВалютнаяСуммаДт,
	               |	ВЫБОР
	               |		КОГДА (НЕ ВТ_Счета_Кт.Счет1С ЕСТЬ NULL )
	               |			ТОГДА ТабОА.AmountCur
	               |	КОНЕЦ КАК ВалютнаяСуммаКт,
	               |	ВЫБОР
	               |		КОГДА (НЕ ВТ_Счета_Дт.Счет1С ЕСТЬ NULL )
	               |			ТОГДА ТабОА.CurrencyCode
	               |	КОНЕЦ КАК ВалютаДт,
	               |	ВЫБОР
	               |		КОГДА (НЕ ВТ_Счета_Кт.Счет1С ЕСТЬ NULL )
	               |			ТОГДА ТабОА.CurrencyCode
	               |	КОНЕЦ КАК ВалютаКт
	               |ИЗ
	               |	МаксRecNo КАК МаксRecNo
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабОА КАК ТабОА
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаДт1
	               |			ПО ТабОА.AccD = АналитикаДт1.Acc
	               |				И ТабОА.DimD1 = АналитикаДт1.Dim
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаДт2
	               |			ПО ТабОА.AccD = АналитикаДт2.Acc
	               |				И ТабОА.DimD2 = АналитикаДт2.Dim
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаДт3
	               |			ПО ТабОА.AccD = АналитикаДт3.Acc
	               |				И ТабОА.DimD3 = АналитикаДт3.Dim
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаДт4
	               |			ПО ТабОА.AccD = АналитикаДт4.Acc
	               |				И ТабОА.DimD4 = АналитикаДт4.Dim
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаДт5
	               |			ПО ТабОА.AccD = АналитикаДт5.Acc
	               |				И ТабОА.DimD5 = АналитикаДт5.Dim
				   //|			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаДт6
				   //|			ПО ТабОА.AccD = АналитикаДт6.Acc
				   //|				И ТабОА.DimD6 = АналитикаДт6.Dim
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаКт1
	               |			ПО ТабОА.AccC = АналитикаКт1.Acc
	               |				И ТабОА.DimC1 = АналитикаКт1.Dim
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаКт2
	               |			ПО ТабОА.AccC = АналитикаКт2.Acc
	               |				И ТабОА.DimC2 = АналитикаКт2.Dim
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаКт3
	               |			ПО ТабОА.AccC = АналитикаКт3.Acc
	               |				И ТабОА.DimC3 = АналитикаКт3.Dim
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаКт4
	               |			ПО ТабОА.AccC = АналитикаКт4.Acc
	               |				И ТабОА.DimC4 = АналитикаКт4.Dim
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаКт5
	               |			ПО ТабОА.AccC = АналитикаКт5.Acc
	               |				И ТабОА.DimC5 = АналитикаКт5.Dim
				   //|			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаКт6
				   //|			ПО ТабОА.AccC = АналитикаКт6.Acc
				   //|				И ТабОА.DimC6 = АналитикаКт6.Dim
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счета КАК ВТ_Счета_Дт
	               |			ПО ТабОА.AccD = ВТ_Счета_Дт.СчетАХ
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счета КАК ВТ_Счета_Кт
	               |			ПО ТабОА.AccC = ВТ_Счета_Кт.СчетАХ
	               |		ПО МаксRecNo.RecNo = ТабОА.RecNo
	               |			И МаксRecNo.Voucher = ТабОА.Voucher";	
	               //***БИТ***Теплова***)
    Запрос.УстановитьПараметр("СсылкаНаПравило", Справочники.бит_ПравилаТрансляции.НайтиПоКоду("000000220"));
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
//Функция ФормированиеДанных(Данные, ТаблицаСтатДанных)
Функция ФормированиеДанных(Данные, ТаблицаСтатДанных, СтруктураНастройки = Неопределено)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
	
	// Получить элементы "Не сопоставлено"
	ТабНеСопоставлено = ПолучитьНеСопоставленные();
	
	Данные.Колонки.Добавить("ЗагруженоСОшибкой", Новый ОписаниеТипов("Булево"));
	//Данные.Колонки.Добавить("Posted", Новый ОписаниеТипов("Число"));
    Данные.Колонки.Добавить("ДокументОперацияАксапты", Новый ОписаниеТипов("ДокументСсылка.бит_ок_ОперацияАксапты"));
	//***БИТ***Теплова***(2012.06.08
	//Данные.Колонки.Добавить("ВидОшибки", Новый ОписаниеТипов("Строка"));
    Данные.Колонки.Добавить("Счет", Новый ОписаниеТипов("СписокЗначений"));
    Данные.Колонки.Добавить("ТипАналитики", Новый ОписаниеТипов("СписокЗначений"));
    Данные.Колонки.Добавить("Значение", Новый ОписаниеТипов("СписокЗначений"));
    Данные.Колонки.Добавить("СчетБезИсключений", Новый ОписаниеТипов("СписокЗначений"));
    Данные.Колонки.Добавить("ТипАналитикиБезИсключений", Новый ОписаниеТипов("СписокЗначений"));
    Данные.Колонки.Добавить("ЗначениеБезИсключений", Новый ОписаниеТипов("СписокЗначений"));
	Данные.Колонки.Добавить("ВСпискеИсключений", Новый ОписаниеТипов("Булево"));
	
	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 16.09.2015 8:57:41
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	бит_СчетаИсключения.Счет,
	//	|	бит_СчетаИсключения.ТипДокумента,
	//	|	бит_СчетаИсключения.Аналитика1,
	//	|	бит_СчетаИсключения.Аналитика2,
	//	|	бит_СчетаИсключения.Аналитика3,
	//	|	бит_СчетаИсключения.Аналитика4,
	//	|	бит_СчетаИсключения.Аналитика5,
	//	|	бит_СчетаИсключения.Аналитика6
	//	|ИЗ
	//	|	РегистрСведений.бит_СчетаИсключения КАК бит_СчетаИсключения";

	//ТабИсключений = Запрос.Выполнить().Выгрузить();
	//-- СВВ}

	//***БИТ***Теплова***)
	//заполнение незаполненной аналитики справочниками "Не сопоставлено"
	Для каждого Стр из Данные Цикл
		
		Стр.Счет = "";
		Стр.ТипАналитики = "";
		Стр.Значение = "";
		
		//заполнение незаполненной аналитики справочниками "Не сопоставлено"
		СтруктураАналитики = Новый Структура;
		СтруктураАналитики.Вставить("СубконтоДт1Тип1С", "Субконто1СДт1");
		СтруктураАналитики.Вставить("СубконтоДт2Тип1С", "Субконто1СДт2");
		СтруктураАналитики.Вставить("СубконтоДт3Тип1С", "Субконто1СДт3");
		СтруктураАналитики.Вставить("СубконтоДт4Тип1С", "Субконто1СДт4");
		СтруктураАналитики.Вставить("СубконтоДт5Тип1С", "Субконто1СДт5");
		//СтруктураАналитики.Вставить("СубконтоДт6Тип1С", "Субконто1СДт6");
		СтруктураАналитики.Вставить("СубконтоКт1Тип1С", "Субконто1СКт1");
		СтруктураАналитики.Вставить("СубконтоКт2Тип1С", "Субконто1СКт2");
		СтруктураАналитики.Вставить("СубконтоКт3Тип1С", "Субконто1СКт3");
		СтруктураАналитики.Вставить("СубконтоКт4Тип1С", "Субконто1СКт4");
		СтруктураАналитики.Вставить("СубконтоКт5Тип1С", "Субконто1СКт5");
		//СтруктураАналитики.Вставить("СубконтоКт6Тип1С", "Субконто1СКт6");
		
		Для каждого ЭлСтр из СтруктураАналитики Цикл
			Если ЗначениеЗаполнено(Стр[ЭлСтр.Ключ]) И НЕ ЗначениеЗаполнено(Стр[ЭлСтр.Значение]) Тогда
				// найти не сопоставленный
				СтрокаТабНеСопоставлено = ТабНеСопоставлено.Найти(Стр[ЭлСтр.Ключ].Наименование, "ИмяНастройки");
				Если СтрокаТабНеСопоставлено <> Неопределено Тогда
					Стр[ЭлСтр.Значение] = СтрокаТабНеСопоставлено.Значение;
					Стр.ЗагруженоСОшибкой = Истина;
					ДтКт = ?(Найти(ЭлСтр.Ключ, "Дт")<>0, "Дт", "Кт");
					//***БИТ***Теплова***(2012.06.08
					ВСпискеИсключений = Ложь;
					Счет = Стр["Счет"+ДтКт];
					//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 16.09.2015 8:59:55
					//СтрокаТИ = ТабИсключений.НайтиСтроки(Новый Структура("Счет", Счет));
					//
					//Если ЗначениеЗаполнено(СтрокаТИ) Тогда
					//	
					//	ЗначениеТипДокумента = ЗначениеЗаполнено(СтрокаТИ[0].ТипДокумента);
					//	ЗначениеАналитика1 = СтрокаТИ[0].Аналитика1;
					//	ЗначениеАналитика2 = СтрокаТИ[0].Аналитика2;
					//	ЗначениеАналитика3 = СтрокаТИ[0].Аналитика3;
					//	ЗначениеАналитика4 = СтрокаТИ[0].Аналитика4;
					//	ЗначениеАналитика5 = СтрокаТИ[0].Аналитика5;
					//	ЗначениеАналитика6 = СтрокаТИ[0].Аналитика6;
					//	
					//	Если ЗначениеТипДокумента и НЕ ЗначениеАналитика1 и НЕ ЗначениеАналитика2 и НЕ ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (СтрокаТИ[0].ТипДокумента = Стр.ТипОперации1С);
					//	ИначеЕсли ЗначениеТипДокумента и ЗначениеАналитика1 и НЕ ЗначениеАналитика2 и НЕ ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (СтрокаТИ[0].ТипДокумента = Стр.ТипОперации1С) и ЭлСтр.Значение = "Субконто1С" +ДтКт + "1";
					//	ИначеЕсли ЗначениеТипДокумента и ЗначениеАналитика1 и ЗначениеАналитика2 и НЕ ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (СтрокаТИ[0].ТипДокумента = Стр.ТипОперации1С) и (ЭлСтр.Значение = "Субконто1С" +ДтКт + "1" или ЭлСтр.Значение = "Субконто1С" +ДтКт + "2");
					//	ИначеЕсли ЗначениеТипДокумента и ЗначениеАналитика1 и ЗначениеАналитика2 и ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (СтрокаТИ[0].ТипДокумента = Стр.ТипОперации1С) и (ЭлСтр.Значение = "Субконто1С" +ДтКт + "1" или ЭлСтр.Значение = "Субконто1С" +ДтКт + "2" или ЭлСтр.Значение = "Субконто1С" +ДтКт + "3");
					//		
					//	ИначеЕсли ЗначениеТипДокумента и НЕ ЗначениеАналитика1 и НЕ ЗначениеАналитика2 и ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (СтрокаТИ[0].ТипДокумента = Стр.ТипОперации1С) и (ЭлСтр.Значение = "Субконто1С" +ДтКт + "3");
					//	ИначеЕсли ЗначениеТипДокумента и НЕ ЗначениеАналитика1 и ЗначениеАналитика2 и НЕ ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (СтрокаТИ[0].ТипДокумента = Стр.ТипОперации1С) и (ЭлСтр.Значение = "Субконто1С" +ДтКт + "2");
					//	ИначеЕсли ЗначениеТипДокумента и ЗначениеАналитика1 и НЕ ЗначениеАналитика2 и ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (СтрокаТИ[0].ТипДокумента = Стр.ТипОперации1С) и (ЭлСтр.Значение = "Субконто1С" +ДтКт + "1" или ЭлСтр.Значение = "Субконто1С" +ДтКт + "3");
					//	ИначеЕсли ЗначениеТипДокумента и НЕ ЗначениеАналитика1 и ЗначениеАналитика2 и ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (СтрокаТИ[0].ТипДокумента = Стр.ТипОперации1С) и (ЭлСтр.Значение = "Субконто1С" +ДтКт + "2" или ЭлСтр.Значение = "Субконто1С" +ДтКт + "3");
					//		
					//	ИначеЕсли НЕ ЗначениеТипДокумента и ЗначениеАналитика1 и НЕ ЗначениеАналитика2 и НЕ ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = ЭлСтр.Значение = "Субконто1С" +ДтКт + "1";
					//	ИначеЕсли НЕ ЗначениеТипДокумента и ЗначениеАналитика1 и ЗначениеАналитика2 и НЕ ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (ЭлСтр.Значение = "Субконто1С" +ДтКт + "1" или ЭлСтр.Значение = "Субконто1С" +ДтКт + "2");
					//	ИначеЕсли НЕ ЗначениеТипДокумента и ЗначениеАналитика1 и ЗначениеАналитика2 и ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (ЭлСтр.Значение = "Субконто1С" +ДтКт + "1" или ЭлСтр.Значение = "Субконто1С" +ДтКт + "2" или ЭлСтр.Значение = "Субконто1С" +ДтКт + "3");
					//		
					//	ИначеЕсли НЕ ЗначениеТипДокумента и НЕ ЗначениеАналитика1 и НЕ ЗначениеАналитика2 и ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (ЭлСтр.Значение = "Субконто1С" +ДтКт + "3");
					//	ИначеЕсли НЕ ЗначениеТипДокумента и НЕ ЗначениеАналитика1 и ЗначениеАналитика2 и НЕ ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (ЭлСтр.Значение = "Субконто1С" +ДтКт + "2");
					//	ИначеЕсли НЕ ЗначениеТипДокумента и ЗначениеАналитика1 и НЕ ЗначениеАналитика2 и ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (ЭлСтр.Значение = "Субконто1С" +ДтКт + "1" или ЭлСтр.Значение = "Субконто1С" +ДтКт + "3");
					//	ИначеЕсли НЕ ЗначениеТипДокумента и НЕ ЗначениеАналитика1 и ЗначениеАналитика2 и ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = (ЭлСтр.Значение = "Субконто1С" +ДтКт + "2" или ЭлСтр.Значение = "Субконто1С" +ДтКт + "3");
					//		
					//	ИначеЕсли НЕ ЗначениеТипДокумента и НЕ ЗначениеАналитика1 и НЕ ЗначениеАналитика2 и НЕ ЗначениеАналитика3 Тогда
					//		ВСпискеИсключений = Истина;
					//	КонецЕсли;
					//			
					//КонецЕсли;
					//
					////-- СВВ}
					
					Если НЕ ВСпискеИсключений Тогда
						Стр.СчетБезИсключений.Добавить(Счет);
						Стр.ТипАналитикиБезИсключений.Добавить(Стр[ЭлСтр.Ключ].Наименование);
						Стр.ЗначениеБезИсключений.Добавить(Стр[СтрЗаменить(ЭлСтр.Значение, "1С", "Аксапта")]);
					КонецЕсли;
					//Стр.ВидОшибки = Стр.ВидОшибки + "Счет" + ДтКт + "=" + Стр["Счет"+ДтКт] + ", " + Стр[ЭлСтр.Ключ].Наименование + " = НЕ_СОПОСТАВЛЕНО (аналитика Аксапты """ + Стр[СтрЗаменить(ЭлСтр.Значение, "1С", "Аксапта")] +  """); ";
					Стр.Счет.Добавить(Счет);
					Стр.ТипАналитики.Добавить(Стр[ЭлСтр.Ключ].Наименование);
					Стр.Значение.Добавить(Стр[СтрЗаменить(ЭлСтр.Значение, "1С", "Аксапта")]);
					//***БИТ***Теплова***)
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Получение из таблицы оборотов таблицы документов
	ТабДокументов = Данные.Скопировать(,"Voucher, ReferVoucherId, DocDate, BudgetIntID");  //***БИТ***Теплова***
    ТабДокументов.Свернуть("Voucher, ReferVoucherId, DocDate, BudgetIntID");  //***БИТ***Теплова***
	
	// Проверить, есть ли такие данные в базе. Если документ есть, его не нужно создавать.
	ТабДокументов = ПроверитьДокументы(ТабДокументов);
	
	// Время старта нужно для примерного вычисления скорости
	ДСтарт = ТекущаяДата();

	ДокументовВПорции						= 0;
	
	//***БИТ***Теплова***(
    //Валюта
	Юань = Справочники.Валюты.НайтиПоКоду("156");
	Евро = Справочники.Валюты.НайтиПоКоду("978");
	Доллары = Справочники.Валюты.НайтиПоКоду("840");
	Рубли = Справочники.Валюты.НайтиПоКоду("643");
    //***БИТ***Теплова***)
	
	КолДок = 0;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
	НачатьТранзакцию();
	
	Попытка
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
	
	// создание проведение документов
	Для каждого ДокСтр Из ТабДокументов Цикл	
		
		Если ДокСтр.СуществующийДокумент = Null Тогда
			Док = Документы.бит_ок_ОперацияАксапты.СоздатьДокумент();
		Иначе
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
			Если ТипЗнч(СтруктураНастройки) = Тип("Структура")
				И СтруктураНастройки.Свойство("МассивПовторноЗагруженныхVoucher")
				И СтруктураНастройки.МассивПовторноЗагруженныхVoucher.Найти(ДокСтр.Voucher) = Неопределено Тогда
				СтруктураНастройки.МассивПовторноЗагруженныхVoucher.Добавить(ДокСтр.Voucher);
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = 'По Voucher, ReferVoucherId и DocDate (%1; %2; %3) найден документ Операция Аксапты (%4), в ЕИС будет перезагружен.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
								ДокСтр.Voucher, 
								ДокСтр.ReferVoucherId, 
								ДокСтр.DocDate, 
								ДокСтр.СуществующийДокумент);
								
			ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты Фреш Маркет.ФормированиеДанных", УровеньЖурналаРегистрации.Предупреждение,, ДокСтр.СуществующийДокумент, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокСтр.СуществующийДокумент);
			
			бит_ОбщегоНазначения.ДобавитьЗначениеАналитики(ДокСтр.СуществующийДокумент, ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ок_ВыполнитьПовторнуюТрансляцию"), Истина);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
			
			Док = ДокСтр.СуществующийДокумент.ПолучитьОбъект();
			Док.ОборотыАксапты.Очистить();
			Док.Движения.Хозрасчетный.Очистить();
			//***БИТ***Теплова***(
			Док.Движения.бит_Дополнительный_2.Очистить();
			
			//БИТ Тртилек 05.10.2012 если в закрытом периоде по МСФО, тогда удалим движения по МСФО 
			
			флЗакрытыйПериод = ЭтоДокументЗакрытогоПериодаПоМСФО(Док, Организация);
			
			// если документ попадает в закрытый период - принудительно выполняется on-line трансляция 
			Если флЗакрытыйПериод Тогда
				
				Док.Движения.бит_Дополнительный_2.Прочитать();
				
			КонецЕсли;
			
			///БИТ Тртилек

            //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-03 (#3124)
			//Если ЗначениеЗаполнено(Док.бтСсылкаНаДокументОперация) Тогда
			//Док.бтИсправление = Ложь;
			//ДокументКорректировки = Док.бтСсылкаНаДокументОперация.ПолучитьОбъект();
			//Заменено на:
			бтСсылкаНаДокументОперация = Документы.бит_ок_ОперацияАксапты.ПолучитьСвязаннуюОперациюБУХ(Док.Ссылка);
			Если ЗначениеЗаполнено(бтСсылкаНаДокументОперация) Тогда
				ДокументКорректировки = бтСсылкаНаДокументОперация.ПолучитьОбъект();				
				Док.бтИсправление = Ложь;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-03 (#3124)		
				
				ДокументКорректировки.ПометкаУдаления = Истина;
				ДвиженияОперация = ДокументКорректировки.Движения.Хозрасчетный;
				ДвиженияОперация.Очистить();
				ДвиженияОперация.Записать();
				ДокументКорректировки.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			//***БИТ***Теплова***)
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Voucher", ДокСтр.Voucher);
		Отбор.Вставить("ReferVoucherId", ДокСтр.ReferVoucherId);
		Отбор.Вставить("DocDate", ДокСтр.DocDate);
		
		Строки = Данные.НайтиСтроки(Отбор);
		// Определим старший RecNo - это последний документ из набора
		СтрокиRecNo = Данные.Скопировать(Строки, "RecNo");
		СтрокиRecNo.Сортировать("RecNo Убыв");
		СтаршийRecNo = СтрокиRecNo[0].RecNo;
		
		// берем наиболее актуальный документ
		// если в базе документ с более старшим RecNo, то трогать его не надо
		
		//***БИТ***Теплова( временно убрала проверку
		//Если СтаршийRecNo < Док.RecNo Тогда
		//	// чтобы в следующий раз эти данные не обрабатывать - поставим им флаг 1
		//	Для каждого Стр из Строки Цикл
		//		Стр.Posted = 1;
		//	КонецЦикла;
		//	Продолжить;
		//КонецЕсли;
		//***БИТ***Теплова)
		
		// заполним шапку
		Док.Дата = ДокСтр.DocDate;
		Док.Организация = Организация;
		Док.ТипДокумента = Строки[0].ТипОперации1С;
		Док.DocType = Строки[0].DocType;
		Док.RecNo = СтаршийRecNo;
		Док.Ваучер = ДокСтр.Voucher;
		Док.ОК_ID_Разноска = Формат(ДокСтр.BudgetIntID, "ЧН=0; ЧГ=0");  //***БИТ***Теплова***
		Док.ReferVoucherId = ДокСтр.ReferVoucherId;
		Док.ДатаЗагрузки = ТекущаяДата();
		Док.Комментарий = Строки[0].Comment;
		Док.ЗагруженоСОшибкой = Ложь;
		
		Для каждого Стр из Строки Цикл
			Если Стр.RecNo < СтаршийRecNo Тогда
				Продолжить;
			КонецЕсли;
			НовСтр = Док.ОборотыАксапты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			//***БИТ***Теплова***( валютные поля
			Если ЗначениеЗаполнено(Стр.ВалютаДт) Тогда
				Если Стр.ВалютаДт = Лев(Рубли.Наименование, 3) Тогда
					НовСтр.ВалютаДт = Рубли;
				ИначеЕсли Стр.ВалютаДт = Евро.Наименование Тогда
					НовСтр.ВалютаДт = Евро;
				ИначеЕсли Стр.ВалютаДт = Доллары.Наименование Тогда
					НовСтр.ВалютаДт = Доллары;
				ИначеЕсли Стр.ВалютаДт = Юань.Наименование Тогда
					НовСтр.ВалютаДт = Юань;
				КонецЕсли;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Стр.ВалютаКт) Тогда
				Если Стр.ВалютаКт = Лев(Рубли.Наименование, 3) Тогда
					НовСтр.ВалютаКт = Рубли;
				ИначеЕсли Стр.ВалютаКт = Евро.Наименование Тогда
					НовСтр.ВалютаКт = Евро;
				ИначеЕсли Стр.ВалютаКт = Доллары.Наименование Тогда
					НовСтр.ВалютаКт = Доллары;
				ИначеЕсли Стр.ВалютаКт = Юань.Наименование Тогда
					НовСтр.ВалютаКт = Юань;
				КонецЕсли;
			КонецЕсли; 
			//***БИТ***Теплова***)
			
			Если Стр.ЗагруженоСОшибкой Тогда
				Док.ЗагруженоСОшибкой = Истина;
			КонецЕсли;
		КонецЦикла;                                         
		
		// запись документа
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
		//Попытка
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
			#Если Клиент Тогда 
				Если ПрерываниеПоCtrlBreak Тогда
					ОбработкаПрерыванияПользователя();
				КонецЕсли;
			#КонецЕсли 
			
			// вывести информацию
			ВремяРаботы = ТекущаяДата() - ДСтарт;
			Обработано = ТабДокументов.Индекс(ДокСтр);
			Скорость = Обработано / ?(ВремяРаботы = 0, 1, ВремяРаботы);
			ОповеститьПользователя("Записываю документ " + ТабДокументов.Индекс(ДокСтр) + " из " + ТабДокументов.Количество() + " - " + Формат(Скорость, "ЧДЦ=2") + " документов/с");
			
			// запись документа
			//Док.Записать(РежимЗаписиДокумента.Проведение);
			// Вместо проведения мы записываем документ с признаком "Проведен" и после этого записываем движения по регистру ОборотыАксапты
			// это позволяет обойти всякие проверки функционала БИТ:Финанс
			// но при этом надо понимать, что невозможно сделать некоторые вещи, например, онлайн трансляцию
			
			// во избежании ситуации, когда документ записан, а его движения по каким-то причинам нет, сделаем оба действия в транзакции
			//НачатьТранзакцию();
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
			//Если ДокументовВПорции >= ПорцияТранзакции Тогда 
			//	ЗафиксироватьТранзакцию();
			//	ДокументовВПорции				= 0;
			//КонецЕсли;
			//
			//Если ДокументовВПорции = 0 тогда 
			//	НачатьТранзакцию();
			//	БлокировкаРН 	= Новый БлокировкаДанных;
			//	ОбъектРН 		= БлокировкаРН.Добавить("РегистрНакопления.бит_ок_ОборотыАксапты");
			//	ОбъектРН.Режим 	= РежимБлокировкиДанных.Исключительный;
			//	ОбъектРН.УстановитьЗначение("Организация", Организация);
			//	БлокировкаРН.Заблокировать();
			//КонецЕсли;
			//ДокументовВПорции					= ДокументовВПорции + 1;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
			
			Если НЕ Док.ПометкаУдаления Тогда  //***БИТ***Теплова***(2012.05.03)
				
				Док.Проведен = Истина;
				//БИТ Тртилек 06.09.2012 установим ссылку нового
				Если Док.Ссылка = Документы.бит_ок_ОперацияАксапты.ПустаяСсылка() Тогда
					СсылкаДок = Документы.бит_ок_ОперацияАксапты.ПолучитьСсылку(Новый УникальныйИдентификатор);
					Док.УстановитьСсылкуНового(СсылкаДок);
				Иначе
					СсылкаДок = Док.Ссылка;
				КонецЕсли; 
				//Док.Записать(РежимЗаписиДокумента.Запись);
				///БИТ Тртилек
				
				Для Каждого ТекСтрокаОборотыАксапты Из Док.ОборотыАксапты Цикл
					Движение = Док.Движения.бит_ок_ОборотыАксапты.Добавить();
					ЗаполнитьЗначенияСвойств(Движение, ТекСтрокаОборотыАксапты); //***БИТ***Теплова*** (заполнение валютных полей)
					Движение.Период = Док.Дата;
					Движение.Организация = Док.Организация;
					Движение.ТипДокумента = Док.ТипДокумента;
					Движение.Ваучер = Док.Ваучер;
					//Движение.СчетДт = ТекСтрокаОборотыАксапты.СчетДт;
					//Движение.СчетКт = ТекСтрокаОборотыАксапты.СчетКт;
					//Движение.СубконтоАксаптаДт1 = ТекСтрокаОборотыАксапты.СубконтоАксаптаДт1;
					//Движение.СубконтоАксаптаДт2 = ТекСтрокаОборотыАксапты.СубконтоАксаптаДт2;
					//Движение.СубконтоАксаптаДт3 = ТекСтрокаОборотыАксапты.СубконтоАксаптаДт3;
					//Движение.СубконтоАксаптаДт4 = ТекСтрокаОборотыАксапты.СубконтоАксаптаДт4;
					//Движение.СубконтоАксаптаДт5 = ТекСтрокаОборотыАксапты.СубконтоАксаптаДт5;
					//Движение.СубконтоАксаптаДт6 = ТекСтрокаОборотыАксапты.СубконтоАксаптаДт6;
					//Движение.СубконтоАксаптаКт1 = ТекСтрокаОборотыАксапты.СубконтоАксаптаКт1;
					//Движение.СубконтоАксаптаКт2 = ТекСтрокаОборотыАксапты.СубконтоАксаптаКт2;
					//Движение.СубконтоАксаптаКт3 = ТекСтрокаОборотыАксапты.СубконтоАксаптаКт3;
					//Движение.СубконтоАксаптаКт4 = ТекСтрокаОборотыАксапты.СубконтоАксаптаКт4;
					//Движение.СубконтоАксаптаКт5 = ТекСтрокаОборотыАксапты.СубконтоАксаптаКт5;
					//Движение.СубконтоАксаптаКт6 = ТекСтрокаОборотыАксапты.СубконтоАксаптаКт6;
					//Движение.Субконто1СДт1 = ТекСтрокаОборотыАксапты.Субконто1СДт1;
					//Движение.Субконто1СДт2 = ТекСтрокаОборотыАксапты.Субконто1СДт2;
					//Движение.Субконто1СДт3 = ТекСтрокаОборотыАксапты.Субконто1СДт3;
					//Движение.Субконто1СДт4 = ТекСтрокаОборотыАксапты.Субконто1СДт4;
					//Движение.Субконто1СДт5 = ТекСтрокаОборотыАксапты.Субконто1СДт5;
					//Движение.Субконто1СДт6 = ТекСтрокаОборотыАксапты.Субконто1СДт6;
					//Движение.Субконто1СКт1 = ТекСтрокаОборотыАксапты.Субконто1СКт1;
					//Движение.Субконто1СКт2 = ТекСтрокаОборотыАксапты.Субконто1СКт2;
					//Движение.Субконто1СКт3 = ТекСтрокаОборотыАксапты.Субконто1СКт3;
					//Движение.Субконто1СКт4 = ТекСтрокаОборотыАксапты.Субконто1СКт4;
					//Движение.Субконто1СКт5 = ТекСтрокаОборотыАксапты.Субконто1СКт5;
					//Движение.Субконто1СКт6 = ТекСтрокаОборотыАксапты.Субконто1СКт6;
					//Движение.Сумма = ТекСтрокаОборотыАксапты.Сумма;
				КонецЦикла;
				//БИТ Тртилек 06.09.2012
				//вставим дополнительное свойство, чтобы при проведении и онлайн трансляции исключить трансляцию при записи
				Док.ДополнительныеСвойства.Вставить("бит_ДокументЗагружаетсяИзАксапты",);
				Док.Записать(РежимЗаписиДокумента.Запись);
				///БИТ Тртилек
				Док.Движения.бит_ок_ОборотыАксапты.Записать();
				Если ДокСтр.СуществующийДокумент <> Null Тогда
					Док.Движения.Хозрасчетный.Записать();   
					//***БИТ***Теплова***(               
					Док.Движения.бит_Дополнительный_2.Записать();  
					//***БИТ***Теплова***)
				//БИТ Тртилек К.И. 08.10.2012 необходимо записать движения, т.к. создаются движения в открытый период
				Иначе 
					Док.Движения.бит_Дополнительный_2.Записать();
				///БИТ Тртилек К.И.
				КонецЕсли;
			КонецЕсли;  //***БИТ***Теплова***(2012.05.03)
			
			//Проставим флаг
			Для каждого Стр из Строки Цикл
				Стр.Posted = 1;
				Стр.ДокументОперацияАксапты = Док.Ссылка;
			КонецЦикла;
			КолДок = КолДок + 1;
			
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
		//Исключение
		//	СообщитьПользователю("Не удалось записать документ Операция Аксапты " + Док.Ссылка + " "  + ОписаниеОшибки());
		//	
		//	//Проставим флаг
		//	Для каждого Стр из Строки Цикл
		//		Стр.Posted = 0;
		//		Стр.ДокументОперацияАксапты = Док.Ссылка;
		//	КонецЦикла;
		//	
		//КонецПопытки;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
		
	КонецЦикла;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
	//СтрСтат = ТаблицаСтатДанных.ДОбавить();
	//СтрСтат.ЗагруженоДок = КолДок;
	//
	//Если ТранзакцияАктивна() Тогда 
	//	ЗафиксироватьТранзакцию();
	//КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
	
	// проставление флага Posted
	СтрокаУсловиеПоRecNo = "";
	
	Для каждого Стр из Данные Цикл
		//ОК+ Аверьянова 08.06.2016 - исправление ошибки (аналогично загрузки ОКЕЙ //BIT AMerkulov 12-02-2016) 
		//Если Стр.Posted = 1 Тогда
		Если Стр.Posted = 1 И ЗначениеЗаполнено(Стр.ДокументОперацияАксапты) И ТипЗнч(Стр.ДокументОперацияАксапты) = Тип("ДокументСсылка.бит_ок_ОперацияАксапты") И Стр.ДокументОперацияАксапты.Ваучер = Стр.Voucher  Тогда
		//ОК-	
			Если СтрокаУсловиеПоRecNo <> "" Тогда
				СтрокаУсловиеПоRecNo = СтрокаУсловиеПоRecNo + ", ";
			КонецЕсли;
			СтрокаУсловиеПоRecNo = СтрокаУсловиеПоRecNo + Формат(Стр.RecNo, "ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	СтрокаУсловиеПоRecNo = "(" + СтрокаУсловиеПоRecNo + ")";
	
	// если есть что проставлять, то проставим флаги Posted
	Если Не СтрокаУсловиеПоRecNo = "()" Тогда
		
		ПроставитьФлагPosted(СтрокаУсловиеПоRecNo);
	
	Иначе
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
		ЗафиксироватьТранзакцию();
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
		Возврат Ложь;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
	ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты Фреш Маркет.ФормированиеДанных", УровеньЖурналаРегистрации.Ошибка,,ДокСтр.СуществующийДокумент, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	СтрСтат = ТаблицаСтатДанных.ДОбавить();
	СтрСтат.ЗагруженоДок = КолДок;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
	
	// Сформировать отчет
	Отбор = Новый Структура;
	Отбор.Вставить("ЗагруженоСОшибкой", Истина);
	//***БИТ***Теплова***(2012.06.09
	//ДанныеОбОшибкаФормированиеДанныхх = Данные.Скопировать(Отбор, "Voucher, DocType, ДокументОперацияАксапты, ВидОшибки");
	ДанныеОбОшибках = Данные.Скопировать(Отбор, "Voucher, DocType, ДокументОперацияАксапты, Счет, ТипАналитики, Значение");
	//ДанныеОбОшибках.Свернуть("Voucher, DocType, ДокументОперацияАксапты, ВидОшибки");
	ДанныеОбОшибках.Свернуть("Voucher, DocType, ДокументОперацияАксапты, Счет, ТипАналитики, Значение");
	
	ДанныеОбОшибкахБезИсключений = Данные.Скопировать(Отбор, "Voucher, DocType, ДокументОперацияАксапты, СчетБезИсключений, ТипАналитикиБезИсключений, ЗначениеБезИсключений");
	ДанныеОбОшибкахБезИсключений.Свернуть("Voucher, DocType, ДокументОперацияАксапты, СчетБезИсключений, ТипАналитикиБезИсключений, ЗначениеБезИсключений");
	//***БИТ***Теплова***)
	
	Если ТаблицаОшибок.Количество() = 0 Тогда
		ТаблицаОшибок = ДанныеОбОшибках.Скопировать();
	Иначе
		Для каждого СтрТабОшибок из ДанныеОбОшибках Цикл
			НовСтрТабОшибок = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрТабОшибок, СтрТабОшибок);
		КонецЦикла;
	КонецЕсли;
	//***БИТ***Теплова***(2012.06.09
	ТаблицаОшибокБезИсключений = ДанныеОбОшибкахБезИсключений.СкопироватьКолонки();
	Для каждого СтрТабОшибокБезИсключений из ДанныеОбОшибкахБезИсключений Цикл
		Если ЗначениеЗаполнено(СтрТабОшибокБезИсключений.СчетБезИсключений) Тогда
			НовСтрТабОшибокБезИсключений = ТаблицаОшибокБезИсключений.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрТабОшибокБезИсключений, СтрТабОшибокБезИсключений);
		КонецЕсли;
	КонецЦикла;
	//***БИТ***Теплова***)
	
	Возврат Истина; 
КонецФункции

Функция ПроверитьДокументы(ТабДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабДок", ТабДокументов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабДок.Voucher,
	               |	ТабДок.ReferVoucherId,
	               |	ТабДок.DocDate,
	               |	ТабДок.BudgetIntID  //***БИТ***Теплова***
	               |ПОМЕСТИТЬ ТабДок
	               |ИЗ
	               |	&ТабДок КАК ТабДок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабДок.Voucher,
	               |	ТабДок.ReferVoucherId,
	               |	ТабДок.DocDate,
	               |	ТабДок.BudgetIntID,  //***БИТ***Теплова***
	               |	бит_ок_ОперацияАксапты.Ссылка КАК СуществующийДокумент
	               |ИЗ
	               |	ТабДок КАК ТабДок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
	               |		ПО ТабДок.Voucher = бит_ок_ОперацияАксапты.Ваучер
	               |			И ТабДок.ReferVoucherId = бит_ок_ОперацияАксапты.ReferVoucherId
	               |			И ТабДок.DocDate = бит_ок_ОперацияАксапты.Дата
	//***БИТ***Теплова***(
	               |			И (бит_ок_ОперацияАксапты.Организация = &Организация)";
				   	Запрос.УстановитьПараметр("Организация", Организация);
	//***БИТ***Теплова***)			   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьНеСопоставленные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки,
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение
		|ИЗ
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
		|ГДЕ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа";

	Запрос.УстановитьПараметр("Группа", "Служебные элементы Не сопоставлено");

	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ПроставитьФлагPosted(СтрокаУсловиеПоRecNo)
	
	
	ЗапросАДО.CommandText = "UPDATE ExportDataTo1cDocHeader set Posted = 1   
	|where RecNo in " + СтрокаУсловиеПоRecNo;                                   

	//Выполнение запроса
	ОповеститьПользователя("Проставляется флаг Posted в экспортных таблицах");
	
	 
	Выборка = ЗапросАДО.Execute(); 
	
КонецФункции

Функция СформироватьИПередатьОтчет(ТаблицаОшибок, СтруктураНастройки, ДатаНачалаЗагрузки, ДатаОкончанияЗагрузки)
	
	// Ок Видяйкин 20171121 (Извещение на e-mail о рез. выполнения регл. задания "ОК_ЗагрузкаДанныхИзАксаптыФМ") +
	ВремяОкончанияЗагрузки = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy hh:mm:ss");
	// Извещение инженеров второй линии о результатах загрузки операций Аксапты в 1С EIS
	времСообщение_Заголовок = "Информация по работе обработки по загрузке данных из Аксапты (Фреш Маркет).";
	времТекстСообщения      = "Загрузка данных произведена. Время начала загрузки: "+ВремяНачалаЗагрузки+". Время окончания: "+ВремяОкончанияЗагрузки+". Загружено: "
	                          +КоличествоДокЗагруженных+" документов ""Операция Аксапты"""; 
	времСообщение_Подпись   = "Информация о работе обработки ""Загрузка данных из Аксапты ФМ"". Пользователь: "+ПользователиИнформационнойБазы.ТекущийПользователь();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-17 (#3771)
	//вхСписокПолучателей = Новый СписокЗначений();
	//вхСписокПолучателей.Добавить("valeriy.vidyaykin@okmarket.ru");
	//вхСписокПолучателей.Добавить("Tatyana.Dovbeshka@okmarket.ru");
	//вхСписокПолучателей.Добавить("Svetlana.Averyanova@okmarket.ru");
	
	вхСписокПолучателей = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте","Список получателей протокола выполнения РЗ", Новый СписокЗначений());
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-17 (#3771)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-22 (#4183)
	времТекстСообщения = времТекстСообщения + Символы.ПС;
	
	Если ТипЗнч(СтруктураНастройки) = Тип("Структура")
		И СтруктураНастройки.Свойство("МассивПропущенныхVoucher")
		И СтруктураНастройки.МассивПропущенныхVoucher.Количество() > 0 Тогда
		
		СписокВаучеровСтрокой = "";
		Для каждого Voucher Из СтруктураНастройки.МассивПропущенныхVoucher Цикл
			СписокВаучеровСтрокой = СписокВаучеровСтрокой + Voucher + ";";
		КонецЦикла; 
		
		ТекстСообщения = "Список пропущенных ваучеров (" + СтруктураНастройки.МассивПропущенныхVoucher.Количество() + "): " + СписокВаучеровСтрокой;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты Фреш Маркет.Загрузка", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения); 
		
		времТекстСообщения = времТекстСообщения + Символы.ПС + ТекстСообщения + Символы.ПС;
		
	КонецЕсли; 
	
	Если ТипЗнч(СтруктураНастройки) = Тип("Структура")
		И СтруктураНастройки.Свойство("МассивПовторноЗагруженныхVoucher")
		И СтруктураНастройки.МассивПовторноЗагруженныхVoucher.Количество() > 0 Тогда
		
		СписокВаучеровСтрокой = "";
		Для каждого Voucher Из СтруктураНастройки.МассивПовторноЗагруженныхVoucher Цикл
			СписокВаучеровСтрокой = СписокВаучеровСтрокой + Voucher + ";";
		КонецЦикла; 
		
		ТекстСообщения = "Список повторно загруженных ваучеров (" + СтруктураНастройки.МассивПовторноЗагруженныхVoucher.Количество() + "): " + СписокВаучеровСтрокой;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты Фреш Маркет.Загрузка", УровеньЖурналаРегистрации.Информация,,,ТекстСообщения); 
		
		времТекстСообщения = времТекстСообщения + Символы.ПС + ТекстСообщения + Символы.ПС;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-22 (#4183)
	
	ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок, времТекстСообщения, времСообщение_Подпись, вхСписокПолучателей);
	// Ок Видяйкин 20171121 -
	
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		ТаблицаТиповДокументов = ТаблицаОшибок.Скопировать(,"DocType");
		ТаблицаТиповДокументов.Свернуть("DocType");
		ТаблицаТиповДокументов.Сортировать("DocType");
	КонецЕсли;	
	//***БИТ***Теплова***(2012.06.09
	Если ТаблицаОшибокБезИсключений.Количество() <> 0 Тогда
		ТаблицаТиповДокументовБезИсключений = ТаблицаОшибокБезИсключений.Скопировать(,"DocType");
		ТаблицаТиповДокументовБезИсключений.Свернуть("DocType");
		ТаблицаТиповДокументовБезИсключений.Сортировать("DocType");
	КонецЕсли;	
	//***БИТ***Теплова***)
		
	Макет = ПолучитьМакет("Отчет");
	ТабДок = Новый ТабличныйДокумент;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ПериодЗагрузки = "Загрузка выполнялась с " + Формат(ДатаНачалаЗагрузки, "ДЛФ=DDT") + " по " + Формат(ДатаОкончанияЗагрузки, "ДЛФ=DDT");
	ОбластьЗаголовок.Параметры.ЗаПериод = "за период с " + Формат(СтруктураНастройки.ДатаНачала, "ДФ=dd.MM.yyyy")+ " по " + Формат(СтруктураНастройки.ДатаОкончания, "ДФ=dd.MM.yyyy");   //***БИТ***Теплова*** добавила формат даты
	ОбластьЗаголовок.Параметры.Организация = Организация; //***БИТ***Теплова***
	
	Если СтруктураНастройки.ТипыОпераций.Количество() = 1 Тогда
		ТекстТипыКЗагрузке = "тип операций №" + СтруктураНастройки.ТипыОпераций[0].Код;  //***БИТ***Теплова*** у типа операции нужен только код (без расшифровки)
	Иначе
		ТекстТипыКЗагрузке = "";
		Для каждого ТипОп из СтруктураНастройки.ТипыОпераций Цикл
			Если НЕ ТекстТипыКЗагрузке = "" Тогда
				ТекстТипыКЗагрузке = ТекстТипыКЗагрузке + ", ";
			КонецЕсли;
			ТекстТипыКЗагрузке = ТекстТипыКЗагрузке + ТипОп.Код; //***БИТ***Теплова*** у типа операции нужен только код (без расшифровки)
		КонецЦикла;
		ТекстТипыКЗагрузке = "типы операций: " + ТекстТипыКЗагрузке;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.ТипыКЗагрузке = ТекстТипыКЗагрузке;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьDocType = Макет.ПолучитьОбласть("DocType");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	//***БИТ***Теплова***(2012.06.09
	ОбластьПодвал1 = Макет.ПолучитьОбласть("Подвал1");
	ОбластьШапкаТаблицы1 = Макет.ПолучитьОбласть("ШапкаТаблицы1");
	ОбластьПодвалТаблицы1 = Макет.ПолучитьОбласть("ПодвалТаблицы1");
	ОбластьDocType1 = Макет.ПолучитьОбласть("DocType1");
	ОбластьДетальныхЗаписей1 = Макет.ПолучитьОбласть("Детали1");
	//***БИТ***Теплова***)
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	
	//***БИТ***Теплова***(2012.06.09
	ТабДок.Вывести(ОбластьШапкаТаблицы1);
	ТабДок.НачатьАвтогруппировкуСтрок();
	Если ТаблицаОшибокБезИсключений.Количество() <> 0 Тогда
		Для каждого СтрТипДокумента из ТаблицаТиповДокументовБезИсключений Цикл
			ОбластьDocType.Параметры.DocType = СтрТипДокумента.DocType;
			ТабДок.Вывести(ОбластьDocType, 0, , Ложь);

			Отбор = Новый Структура;
			Отбор.Вставить("DocType", СтрТипДокумента.DocType);
			ТаблицаДокументовПоТипуБезИсключений = ТаблицаОшибокБезИсключений.Скопировать(Отбор);
			
			Для каждого СтрДок из ТаблицаДокументовПоТипуБезИсключений Цикл
				ОбластьДетальныхЗаписей1.Параметры.Заполнить(СтрДок);
				//ОбластьДетальныхЗаписей.Параметры.Voucher = СтрДок.Voucher;
				//ОбластьДетальныхЗаписей.Параметры.ДокументОперацияАксапты = СтрДок.ДокументОперацияАксапты;
				ОбластьДетальныхЗаписей1.Параметры.Счет = СтрДок.СчетБезИсключений;
				ОбластьДетальныхЗаписей1.Параметры.ТипАналитики = СтрДок.ТипАналитикиБезИсключений;
				ОбластьДетальныхЗаписей1.Параметры.Значение = СтрДок.ЗначениеБезИсключений;
				ТабДок.Вывести(ОбластьДетальныхЗаписей1, 1);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы1);
	ТабДок.Вывести(ОбластьПодвал1);
	//***БИТ***Теплова***)
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	//ВыборкаDocType = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Если ТаблицаОшибок.Количество() <> 0 Тогда
		Для каждого СтрТипДокумента из ТаблицаТиповДокументов Цикл
			ОбластьDocType.Параметры.DocType = СтрТипДокумента.DocType;
			ТабДок.Вывести(ОбластьDocType, 0, , Ложь);

			Отбор = Новый Структура;
			Отбор.Вставить("DocType", СтрТипДокумента.DocType);
			ТаблицаДокументовПоТипу = ТаблицаОшибок.Скопировать(Отбор);
			
			Для каждого СтрДок из ТаблицаДокументовПоТипу Цикл
				ОбластьДетальныхЗаписей.Параметры.Заполнить(СтрДок);
				//ОбластьДетальныхЗаписей.Параметры.Voucher = СтрДок.Voucher;
				//ОбластьДетальныхЗаписей.Параметры.ДокументОперацияАксапты = СтрДок.ДокументОперацияАксапты;
				//ОбластьДетальныхЗаписей.Параметры.ВидОшибки = СтрДок.ВидОшибки;
				ТабДок.Вывести(ОбластьДетальныхЗаписей, 1);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
	
	//ТабДок.Показать();
	Если ЗначениеЗаполнено(мПутьСохраненияОтчетовОбОшибках) Тогда
		Если Прав(мПутьСохраненияОтчетовОбОшибках, 1) <> "\" Тогда
			мПутьСохраненияОтчетовОбОшибках = мПутьСохраненияОтчетовОбОшибках + "\";
		КонецЕсли;
		ИмяФайла = "ErrorReport_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + СтрЗаменить(Формат(ТекущаяДата(), "ДЛФ=T"), ":","") + ".xls";
		ИмяФайлаДляСохраненияОтчетовОбОшибках = мПутьСохраненияОтчетовОбОшибках + ИмяФайла;
	Иначе
		//если вдруг у нас не заполнена настройка пути сохранения файла
		ИмяФайлаДляСохраненияОтчетовОбОшибках = ПолучитьИмяВременногоФайла("xls");
	КонецЕсли;
	
	Попытка
		ТабДок.Записать(ИмяФайлаДляСохраненияОтчетовОбОшибках, ТипФайлаТабличногоДокумента.XLS);
	Исключение
		// Если такого каталога нет, не хватает прав или ещё по какой-то причине файл не сохранен
		ИмяФайлаДляСохраненияОтчетовОбОшибках = ПолучитьИмяВременногоФайла("xls");
		ТабДок.Записать(ИмяФайлаДляСохраненияОтчетовОбОшибках, ТипФайлаТабличногоДокумента.XLS);
	КонецПопытки;

	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 16.09.2015 16:39:08
	
	//Отправка почты
	//Если ЗначениеЗаполнено(мКому)
	//	И ЗначениеЗаполнено(мОтправитель)
	//	И ЗначениеЗаполнено(мСерверSMTP)
	//	И ЗначениеЗаполнено(мПользовательSMTP)
	//	И ЗначениеЗаполнено(мПарольSMTP)
	//	И ЗначениеЗаполнено(мПортSMTP) Тогда
	//	//Отправить почту
	//	//***БИТ***Теплова***(
	//	ТекстСообщения = "
	//	| Организация: "+Организация+" 
	//	| Всего загружено проводок: "+КоличествоЗагруженных+" 
	//	| Загружено проводок с ошибкой: "+ТаблицаОшибокБезИсключений.Количество()+"
	//	|"; 
	//	
	//	СообщениеСтруктура = Новый Структура();
	//	СообщениеСтруктура.Вставить("Текст", ТекстСообщения);
	//	СообщениеСтруктура.Вставить("Заголовок", "Отчет об ошибках при загрузке документов их Axapta от " + ТекущаяДата());
	//	СообщениеСтруктура.Вставить("Подпись", "");
	//	//МассивВложения = Новый Массив ();
	//	//МассивВложения.Добавить(ИмяФайлаДляСохраненияОтчетовОбОшибках); 
	//	СообщениеСтруктура.Вставить("Вложения", ИмяФайлаДляСохраненияОтчетовОбОшибках);
	//	
	//	НастройкиДоставки = Новый Структура;
	//	НастройкиДоставки.Вставить("АдресSMTP", мСерверSMTP);
	//	НастройкиДоставки.Вставить("ПортSMTP", мПортSMTP);
	//	НастройкиДоставки.Вставить("SMTPАутентификация",мАутентификация);
	//	НастройкиДоставки.Вставить("ПользовательSMTP",мПользовательSMTP);
	//	НастройкиДоставки.Вставить("ПарольSMTP",мПарольSMTP);
	//	НастройкиДоставки.Вставить("EMailАдресОтправителя",мОтправитель);
	//	
	//	СтруктураПараметров = Новый Структура("АдресПолучателя",мКому);
	//	
	//	ОтправитьСообщение(СообщениеСтруктура, НастройкиДоставки, СтруктураПараметров,);
	//КонецЕсли;
	//-- СВВ}
КонецФункции

Функция ОтправитьСообщение(СообщениеСтруктура, НастройкиДоставки, СтруктураПараметров,ПротоколОтправки="") Экспорт
	
	флДействиеВыполнено = Ложь;			
	Отказ = Ложь;
		
	Если НЕ Отказ Тогда
		
		// сформируем почтовый профиль
		ИПП 					= Новый ИнтернетПочтовыйПрофиль;
		ИПП.АдресСервераSMTP 	= НастройкиДоставки.АдресSMTP;   
		ИПП.ПортSMTP 			= НастройкиДоставки.ПортSMTP;
		//Если НЕ ПустаяСтрока(СокрЛП(НастройкиДоставки.SMTPАутентификация)) Тогда
		//	
		//	ИПП.АутентификацияSMTP 	= СпособSMTPАутентификации[СокрЛП(НастройкиДоставки.SMTPАутентификация)];
		//	
		//КонецЕсли; 
		ИПП.ПользовательSMTP 	= НастройкиДоставки.ПользовательSMTP;
		ИПП.ПарольSMTP 			= НастройкиДоставки.ПарольSMTP;
		
		//ИПП.АдресСервераPOP3    = НастройкиДоставки.АдресPOP3;
		//ИПП.ПортPOP3            = НастройкиДоставки.ПортPOP3;
		//Если НЕ ПустаяСтрока(СокрЛП(НастройкиДоставки.POPАутентификация)) Тогда
		//	
		//	ИПП.АутентификацияPOP3  = СпособPOP3Аутентификации[СокрЛП(НастройкиДоставки.POPАутентификация)];
		//	
		//КонецЕсли; 
		//ИПП.Пользователь        = НастройкиДоставки.ПользовательPOP3;
		//ИПП.Пароль              = НастройкиДоставки.ПарольPOP3;
		                         
		
		// Создадим сообщение 
		Сообщение = Новый ИнтернетПочтовоеСообщение; 
		Сообщение.Отправитель.Адрес = НастройкиДоставки.EMailАдресОтправителя;
		Сообщение.ОбратныйАдрес.Добавить(НастройкиДоставки.EMailАдресОтправителя);
		Сообщение.Получатели.Добавить(СтруктураПараметров.АдресПолучателя);  		
		Сообщение.Тема = СообщениеСтруктура.Заголовок; 
		Сообщение.Вложения.Добавить(СообщениеСтруктура.Вложения, "Отчет об ошибках"); 
		Сообщение.Тексты.Добавить(СообщениеСтруктура.Текст + Символы.ПС + СообщениеСтруктура.Подпись); 
		
		// Подключимся и отправим сформированное сообщение
		Попытка
			
			Почта = Новый ИнтернетПочта; 
			Почта.Подключиться(ИПП); 
			Почта.Послать(Сообщение); 
			флДействиеВыполнено = Истина;
			ПротоколОтправки    = "Сообщение отправлено по адресу "
			                       +СтруктураПараметров.АдресПолучателя
								   +"  "
								   +ТекущаяДата()
								   +".";
			
		Исключение
			
			флДействиеВыполнено = Ложь;
			ПротоколОтправки    = "Сообщение  не удалось отправить по адресу "
			                       +СтруктураПараметров.АдресПолучателя
								   +"  "
								   +ТекущаяДата()
								   +" по причине "
								   +ОписаниеОшибки()
								   +".";
			
			
		КонецПопытки;
		
		Почта.Отключиться(); 
		
	КонецЕсли; 
	
	Сообщить(ПротоколОтправки);

	Возврат флДействиеВыполнено;
КонецФункции

Процедура ЗагрузкаСвернутых(ДатаНачала, ДатаОкончания, ТипыОперацийКВыгрузке) Экспорт
	
	#Если Клиент Тогда
		Если ДатаНачала <> Неопределено И Граница <> Неопределено Тогда
			Если ДатаНачала < Граница Тогда
				Предупреждение("Выбранный период частично или полностью находится в закрытом периоде, выберите корректный период.");
				//Возврат;
			КонецЕсли;	
		КонецЕсли;
	#КонецЕсли 
	
	// проверим поступившие параметры
	Если ДатаНачала=Неопределено
	 ИЛИ ТипЗнч(ДатаНачала)<>Тип("Дата")
	 ИЛИ ДатаОкончания=Неопределено
	 ИЛИ ТипЗнч(ДатаОкончания)<>Тип("Дата")
	 ИЛИ ТипыОперацийКВыгрузке=Неопределено
	 ИЛИ ТипЗнч(ТипыОперацийКВыгрузке)<>Тип("Массив")
	 ИЛИ ТипыОперацийКВыгрузке.Количество() = 0
	 ИЛИ ДатаНачала > ДатаОкончания Тогда
		Возврат;
	КонецЕсли;

	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ДатаНачала", ДатаНачала);
	СтруктураНастройки.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураНастройки.Вставить("ТипыОпераций", ТипыОперацийКВыгрузке);
	
	// Подключение к базе
	Если Не ПодключениеКБазе() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьЗаписатьДанные(СтруктураНастройки);
	
КонецПроцедуры

Функция ПолучитьЗаписатьДанные(СтруктураНастройки)

	// условие по периоду
	ДатаНачала =  Формат(СтруктураНастройки.ДатаНачала, "ДФ=""ггггММдд""");
	ДатаОкончания = Формат(СтруктураНастройки.ДатаОкончания, "ДФ=ггггММдд");

	УсловиеПоПериоду = "'" + ДатаНачала + "' and '" + ДатаОкончания + "'";

	// блок условий по типам операций
	ТипыОпераций = СтруктураНастройки.ТипыОпераций;
	Если ТипыОпераций.Количество() = 1 Тогда
		УсловияПоТипуДокумента = "'" + ТипыОпераций[0].Код + "'";
	Иначе
		УсловияПоТипуДокумента = "";
		Для каждого ТипОп из ТипыОпераций Цикл
			Если НЕ УсловияПоТипуДокумента = "" Тогда
				УсловияПоТипуДокумента = УсловияПоТипуДокумента + ", ";
			КонецЕсли;
			УсловияПоТипуДокумента = УсловияПоТипуДокумента + "'" + ТипОп.Код + "'";
		КонецЦикла;
	КонецЕсли;
    ТипыСЗагрузкойОбъектов	= "'270', '450', '280'";

	//Формирование запроса
	ЗапросАДО.CommandText = "SELECT
	|Headers.DocDate,
	|Headers.DocType,
	|Trans.AccD,
	|Trans.AccC,
	|sum(Trans.Amount) as Amount
	|, CASE WHEN Headers.DocType IN (" + ТипыСЗагрузкойОбъектов + ") THEN CASE WHEN Trans.AccC LIKE '20%' THEN Trans.DimC1 WHEN Trans.AccD LIKE '20%' THEN Trans.DimD1 ELSE '' END ELSE '' END AS OBJ
	|FROM
	|	(SELECT distinct
	|		uh.Voucher,
	|		uh.ReferVoucherId,
	|		uh.DocDate,
	|		max(uh.RecNo) as RecNo
	|	FROM ["+БазаДанных+"].[dbo].[ExportDataTo1cDocHeader] uh 
	|	where
	|		uh.DocDate between " + УсловиеПоПериоду + "
	|		and uh.DocType in (" + УсловияПоТипуДокумента + ")
	|	group by
	|		Voucher,
	|		ReferVoucherId,
	|		DocDate) As UniqHeaders
	|LEFT OUTER JOIN
	|["+БазаДанных+"].[dbo].[ExportDataTo1cDocHeader] AS Headers
	|ON	UniqHeaders.RecNo = Headers.RecNo and
	|	UniqHeaders.Voucher = Headers.Voucher and
	|	UniqHeaders.ReferVoucherId = Headers.ReferVoucherId and
	|	UniqHeaders.DocDate = Headers.DocDate 
	|LEFT OUTER JOIN
	|["+БазаДанных+"].[dbo].[ExportDataTo1CDocTrans] AS Trans
	|ON	UniqHeaders.RecNo = Trans.RefRecNo and
	|	UniqHeaders.Voucher = Trans.Voucher

	|group by
	|Headers.DocDate,
	|Headers.DocType,
	|Trans.AccD,
	|Trans.AccC
	|, CASE WHEN Headers.DocType IN (" + ТипыСЗагрузкойОбъектов + ") THEN CASE WHEN Trans.AccC LIKE '20%' THEN Trans.DimC1 WHEN Trans.AccD LIKE '20%' THEN Trans.DimD1 ELSE '' END ELSE '' END
	|	ORDER BY Headers.DocDate, Headers.DocType
	|";

	ОповеститьПользователя("Выполняется запрос к экспортным таблицам");
	Выборка = ЗапросАДО.Execute(); 

	//Описание типов
	ТипЧисло = Новый ОписаниеТипов("Число"); 
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипСтрока3 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3));
	ТипСтрока20 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20));
	ТипДата = Новый ОписаниеТипов("Дата");

	//Формирование таблицы для хранения и обработки результата данных
	ТабОбороты = Новый ТаблицаЗначений;
	ТабОбороты.Колонки.Добавить("DocDate",ТипДата);
	ТабОбороты.Колонки.Добавить("DocType", ТипСтрока3);
	ТабОбороты.Колонки.Добавить("AccD", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("AccC", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("Amount", ТипЧисло);
	ТабОбороты.Колонки.Добавить("OBJ", ТипСтрока20);

	Пока Не Выборка.EOF() Цикл 		
		НовСтр = ТабОбороты.Добавить();
		Для каждого Колонка из ТабОбороты.Колонки Цикл
			Имя = Колонка.Имя;
			НовСтр[Имя] = Выборка.Fields(Имя).Value;
		КонецЦикла;
		Выборка.MoveNext(); 
	КонецЦикла;

	// Сопоставим типы операций 1С и найдём соответствующие документы
	ТабДатаТип = ТабОбороты.Скопировать(, "DocDate, DocType");
	ТабДатаТип.Свернуть("DocDate, DocType");

	ТабДатаТип = СопоставитьТипНайтиДокументы(ТабДатаТип);
	
	// Время старта нужно для примерного вычисления скорости
	ДСтарт = ТекущаяДата();
	ДокументовВПорции	= 0;
	
	Для каждого Стр из ТабДатаТип Цикл
		
		Если ДокументовВПорции >= ПорцияТранзакции Тогда 
			ЗафиксироватьТранзакцию();
			ДокументовВПорции				= 0;
		КонецЕсли;
		
		Если ДокументовВПорции = 0 тогда 
			НачатьТранзакцию();
			БлокировкаРН 	= Новый БлокировкаДанных;
			ОбъектРН 		= БлокировкаРН.Добавить("РегистрНакопления.бит_ок_ОборотыАксапты");
			ОбъектРН.Режим 	= РежимБлокировкиДанных.Исключительный;
			ОбъектРН.УстановитьЗначение("Организация", Организация);
			БлокировкаРН.Заблокировать();
		КонецЕсли;
		ДокументовВПорции					= ДокументовВПорции + 1;
			
		Если Стр.ОперацияАксапты = Null Тогда
			Док = Документы.бит_ок_ОперацияАксапты.СоздатьДокумент();
		Иначе
			Док = Стр.ОперацияАксапты.ПолучитьОбъект();
			Док.ОборотыАксапты.Очистить();
			Док.Движения.Хозрасчетный.Очистить();
			//***БИТ***Теплова***(
			Док.Движения.бит_Дополнительный_2.Очистить();  							
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-03 (#3124)
			//Если ЗначениеЗаполнено(Док.бтСсылкаНаДокументОперация) Тогда
				//Док.бтИсправление = Ложь;
				//ДокументКорректировки = Док.бтСсылкаНаДокументОперация.ПолучитьОбъект();
			//Заменено на:
			бтСсылкаНаДокументОперация = Документы.бит_ок_ОперацияАксапты.ПолучитьСвязаннуюОперациюБУХ(Док.Ссылка);
			Если ЗначениеЗаполнено(бтСсылкаНаДокументОперация) Тогда
				ДокументКорректировки = бтСсылкаНаДокументОперация.ПолучитьОбъект();				
				Док.бтИсправление = Ложь;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-03 (#3124)			
				ДокументКорректировки.ПометкаУдаления = Истина;
				ДвиженияОперация = ДокументКорректировки.Движения.Хозрасчетный;
				ДвиженияОперация.Очистить();
				ДвиженияОперация.Записать();
				ДокументКорректировки.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			//***БИТ***Теплова***)

		КонецЕсли;
		
		Отбор 				= Новый Структура();
		Отбор.Вставить("DocType", Стр.DocType);
		Отбор.Вставить("DocDate", Стр.DocDate);
		
		Строки 				= ТабОбороты.НайтиСтроки(Отбор);
				
        // заполним шапку
        Док.Дата 			= Стр.DocDate;
		Док.Организация 	= Организация;
		Док.ТипДокумента	= Стр.ТипОперации;
		Док.DocType 		= Стр.DocType;
		Док.ДатаЗагрузки	= ТекущаяДата();
		Док.Комментарий 	= "";
		
        ОборотыАксапты 		= СформироватьТаблицуОборотов();
		Для каждого Строка из Строки Цикл
			НовСтр 			= ОборотыАксапты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Строка);
			Если Найти(ТипыСЗагрузкойОбъектов, Строка.DocType) > 0 Тогда 
				Если Найти(Строка.AccD, "20") > 0 Тогда 
					НовСтр.DimD1	= Строка.OBJ;
				ИначеЕсли Найти(Строка.AccC, "20") > 0 Тогда 
					НовСтр.DimC1	= Строка.OBJ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
//Сопоставление свернутых
		
	// выборка аналитики
		ОборотыАксапты 		= ПроставитьТипыАналитики(ОборотыАксапты);
	
	// сопоставление аналитики
		СопоставленнаяАналитика = СопоставлениеАналитики(ОборотыАксапты);
	
	// проставление сопоставления
	    Данные 				= ЗаполнитьСопоставленнуюАналитику(ОборотыАксапты, СопоставленнаяАналитика);
		
	//Заполнение ТЧ документа
		Док.ОборотыАксапты.Загрузить(Данные);

		// запись документа
		Попытка
			#Если Клиент Тогда 
				Если ПрерываниеПоCtrlBreak Тогда
					ОбработкаПрерыванияПользователя();
				КонецЕсли;
			#КонецЕсли 
			
			// вывести информацию
			ВремяРаботы 	= ТекущаяДата() - ДСтарт;
			Обработано 		= ТабДатаТип.Индекс(Стр);
			Скорость 		= Обработано / ?(ВремяРаботы = 0, 1, ВремяРаботы);
			ОповеститьПользователя("Записываю документ " + ТабДатаТип.Индекс(Стр) + " из " + ТабДатаТип.Количество() + " - " + Формат(Скорость, "ЧДЦ=2") + " документов/с");
			
			// запись документа
			Док.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			СообщитьПользователю("!!!");
		КонецПопытки;
		
	КонецЦикла;	
	
	Если ТранзакцияАктивна() Тогда 
		ЗафиксироватьТранзакцию();
	КонецЕсли;
		
КонецФункции

Функция СопоставитьТипНайтиДокументы(ТабДатаТип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабДатаТип", ТабДатаТип);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабДатаТип.DocType,
	               |	ТабДатаТип.DocDate
	               |ПОМЕСТИТЬ ТабДатаТип
	               |ИЗ
	               |	&ТабДатаТип КАК ТабДатаТип
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабДатаТип.DocType,
	               |	ТабДатаТип.DocDate,
	               |	бит_ок_ТипыОперацийАксапты.Ссылка КАК ТипОперации
	               |ПОМЕСТИТЬ ТабДатаТипОперации
	               |ИЗ
	               |	ТабДатаТип КАК ТабДатаТип
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
	               |		ПО ТабДатаТип.DocType = бит_ок_ТипыОперацийАксапты.Код
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабДатаТипОперации.DocType,
	               |	ТабДатаТипОперации.DocDate,
	               |	ТабДатаТипОперации.ТипОперации,
	               |	бит_ок_ОперацияАксапты.Ссылка КАК ОперацияАксапты
	               |ИЗ
	               |	ТабДатаТипОперации КАК ТабДатаТипОперации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
	               |		ПО ТабДатаТипОперации.ТипОперации = бит_ок_ОперацияАксапты.ТипДокумента
	               |			И (НАЧАЛОПЕРИОДА(ТабДатаТипОперации.DocDate, ДЕНЬ) = НАЧАЛОПЕРИОДА(бит_ок_ОперацияАксапты.Дата, ДЕНЬ))
	               |			И (бит_ок_ОперацияАксапты.Организация = &Организация) //***БИТ***Теплова***
	               |ГДЕ
	               |	(бит_ок_ОперацияАксапты.ПометкаУдаления = ЛОЖЬ
	               |			ИЛИ бит_ок_ОперацияАксапты.Ссылка ЕСТЬ NULL )";
				   
    Запрос.УстановитьПараметр("Организация", Организация);   //***БИТ***Теплова***

	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции
/////////////////////////////////////


Функция ОповеститьПользователя(Текст)
	
	#Если Клиент Тогда 
		Состояние(Текст);
	#КонецЕсли 
	
КонецФункции

Функция СообщитьПользователю(Текст)
	
	#Если Клиент Тогда 
		Сообщить(Текст);
	#КонецЕсли 
		
КонецФункции

Процедура ЗаполнитьРС_ОК_ЗагружаемыеТипыОперацийАксапты(Свернутые) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ок_ТипыОперацийАксапты.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_ТипыОпераций
	               |ИЗ
	               |	Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
	               |ГДЕ
	               |	(НЕ бит_ок_ТипыОперацийАксапты.ПометкаУдаления)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ТипыОпераций.Ссылка КАК ТипОперацииАксапты,
	               |	ИСТИНА КАК Пометка
	               |ИЗ
	               |	ВТ_ТипыОпераций КАК ВТ_ТипыОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОК_ЗагружаемыеТипыОперацийАксапты КАК ОК_ЗагружаемыеТипыОперацийАксапты
	               |		ПО ВТ_ТипыОпераций.Ссылка = ОК_ЗагружаемыеТипыОперацийАксапты.ТипОперацииАксапты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТипОперацииАксапты
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Свернутые", Свернутые);
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Для Каждого СтрокаНастроек из ТЗРезультат Цикл 
		ДобавляемаяНастройка						= РегистрыСведений.ОК_ЗагружаемыеТипыОперацийАксапты.СоздатьМенеджерЗаписи();
		ДобавляемаяНастройка.ТипОперацииАксапты		= СтрокаНастроек.ТипОперацииАксапты;
		ДобавляемаяНастройка.Пометка				= СтрокаНастроек.Пометка;
		ДобавляемаяНастройка.Записать(Истина);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ЗаполнитьРС_ОК_ЗагружаемыеТипыОперацийАксапты()

Процедура ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты(Пометка, Свернутые) Экспорт 

	НаборЗаписей			= РегистрыСведений.ОК_ЗагружаемыеТипыОперацийАксапты.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого СтрокаНЗ из НаборЗаписей Цикл 
		Если СтрокаНЗ.ТипОперацииАксапты.СвернутыеОбороты = Свернутые Тогда 
			СтрокаНЗ.Пометка	= Пометка;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры //ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты()

Процедура ЗагрузитьГруппу(RecNo) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОК_ЗагружаемыеТипыОперацийАксапты.ТипОперацииАксапты
	               |ИЗ
	               |	РегистрСведений.ОК_ЗагружаемыеТипыОперацийАксапты КАК ОК_ЗагружаемыеТипыОперацийАксапты
	               |ГДЕ
	               |	ОК_ЗагружаемыеТипыОперацийАксапты.Пометка 
	               |	И (НЕ ОК_ЗагружаемыеТипыОперацийАксапты.ТипОперацииАксапты.СвернутыеОбороты)
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();	
	ТипыОперацийКВыгрузке = ТЗРезультат.ВыгрузитьКолонку("ТипОперацииАксапты");
	ЗагрузитьГруппу = Истина;
	// вызываем главную процедуру обработки
	Загрузка(ЗагрузитьГруппу, НачПериода, КонПериода, ТипыОперацийКВыгрузке, Порция, RecNo, Истина);

КонецПроцедуры

Процедура ЗагрузитьПоRecNo(RecNo) Экспорт 

	ЗагрузитьГруппу = Ложь;
	УсловиеПоRecNo = "RecNo = " + Формат(RecNo, "ЧГ=0");
	Загрузка(ЗагрузитьГруппу, НачПериода, КонПериода, Неопределено, Порция, УсловиеПоRecNo);

КонецПроцедуры

Процедура ЗагрузитьПоВаучеру(Ваучеры) Экспорт

	СтрокаУсловиеПоВаучеру = "";
	Для каждого Стр из Ваучеры Цикл
		Если СтрокаУсловиеПоВаучеру <> "" Тогда
			СтрокаУсловиеПоВаучеру = СтрокаУсловиеПоВаучеру + ", ";
		КонецЕсли;
		СтрокаУсловиеПоВаучеру = СтрокаУсловиеПоВаучеру + " '" + Стр.Значение + "'";
	КонецЦикла;
	СтрокаУсловиеПоВаучеру = "(" + СтрокаУсловиеПоВаучеру + ")";
	
	
	ЗагрузитьГруппу = Ложь;
	УсловиеПоRecNo = "ExportDataTo1cDocHeader.Voucher in " + СтрокаУсловиеПоВаучеру;
	Загрузка(ЗагрузитьГруппу, НачПериода, КонПериода, Неопределено, Порция, УсловиеПоRecNo);
		

КонецПроцедуры

Процедура ЗагрузитьСвернутые() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОК_ЗагружаемыеТипыОперацийАксапты.ТипОперацииАксапты
	|ИЗ
	|	РегистрСведений.ОК_ЗагружаемыеТипыОперацийАксапты КАК ОК_ЗагружаемыеТипыОперацийАксапты
	|ГДЕ
	|	ОК_ЗагружаемыеТипыОперацийАксапты.Пометка
	|	И ОК_ЗагружаемыеТипыОперацийАксапты.ТипОперацииАксапты.СвернутыеОбороты
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();	
	ТипыОперацийКВыгрузке = ТЗРезультат.ВыгрузитьКолонку("ТипОперацииАксапты");
	ЗагрузкаСвернутых(НачПериода, КонПериода, ТипыОперацийКВыгрузке);
	
КонецПроцедуры

Процедура ВыполнитьСопоставление(АналитикаАксапты) Экспорт

	ТипыОперацийКВыгрузке = Новый Массив;
	Для каждого Эл из ТипыОперацийСопоставление Цикл
		Если Эл.Пометка Тогда
			ТипыОперацийКВыгрузке.Добавить(Эл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Сопоставление(НачПериода, КонПериода, АналитикаАксапты, ТипыОперацийКВыгрузке);

КонецПроцедуры

// бит_Тртилек 05.10.2012 Определяет, попадает документ в закрытый период или нет по регистру международному. 
// Анализ производится по дате документа.
//
// Параметры:
// Объект - ДокументСсылка, ДокументОбъект
// Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  флЗакрытыйПериод – Булево.
//
Функция ЭтоДокументЗакрытогоПериодаПоМСФО(Объект, Организация) Экспорт
	
	флЗакрытыйПериод = Ложь;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	РегистрыКонтроля = Новый Соответствие;
	
	ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрБухгалтерии.бит_Дополнительный_2");
			
	ТаблицаДат = бит_ОбщегоНазначения.ПолучитьЗначениеПеременной("бит_НачалоОткрытогоПериода");
		
	Если ТаблицаДат.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаДат"       ,ТаблицаДат);
		Запрос.УстановитьПараметр("Организация"      ,Организация);
		Запрос.УстановитьПараметр("ОбъектСистемы"    ,ОбъектСистемы);
		Запрос.УстановитьПараметр("ПустаяДата"       ,Дата('00010101'));
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаДат.Организация,
		|	ТаблицаДат.ОбъектСистемы,
		|	ТаблицаДат.ДатаОткрытогоПериода
		|ПОМЕСТИТЬ ТаблицаДат
		|ИЗ
		|	&ТаблицаДат КАК ТаблицаДат
		|ГДЕ
		|	ТаблицаДат.ОбъектСистемы = &ОбъектСистемы
		|	И ТаблицаДат.ДатаОткрытогоПериода <> &ПустаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ТаблицаДат.ОбъектСистемы,
		|	ТаблицаДат.ДатаОткрытогоПериода
		|ИЗ
		|	ТаблицаДат КАК ТаблицаДат
		|ГДЕ
		|	ТаблицаДат.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ТаблицаДат.ОбъектСистемы,
		|	ТаблицаДат.ДатаОткрытогоПериода
		|ИЗ
		|	ТаблицаДат КАК ТаблицаДат
		|ГДЕ
		|	ТаблицаДат.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДат";
		
		Результат = Запрос.Выполнить();
		
		Выборка   = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РегистрыКонтроля.Вставить(Выборка.ОбъектСистемы,Выборка.ДатаОткрытогоПериода);
			ДатаОткрытогоПериода = Выборка.ДатаОткрытогоПериода;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Если РегистрыКонтроля.Количество() > 0 Тогда
		
		Если Объект.Дата < ДатаОткрытогоПериода Тогда
			
			флЗакрытыйПериод = Истина;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат флЗакрытыйПериод;
	
КонецФункции // ЭтоДокументЗакрытогоПериода()

// BIT AMerkulov 24102014 ++		
Процедура УстановитьСубконто(ТаблицаАналитик, Стр, НомерСубконто)		
	Если ЗначениеЗаполнено(Стр["Subconto"+НомерСубконто]) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СчетАксапты",Лев(Стр.AccountNum,2));
		СтруктураОтбора.Вставить("КодАналитикиАксапты",Стр["Subconto"+НомерСубконто]);
		
		НайденныеСтроки = ТаблицаАналитик.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() Тогда
			Стр["Субконто"+НомерСубконто+"РСБУ"] = НайденныеСтроки[0].Аналитика1С;	
		КонецЕсли;				
	КонецЕсли;
КонецПроцедуры			
// BIT AMerkulov 24102014 --

// ++ БоровинскаяОА (СофтЛаб) 18.12.18 Начало (#3130)
Функция ЕстьСоотвествиеВРегистреСоответствияАналитик(ВидСоответствия, ЛевоеЗначение, ПравоеЗначение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_СоответствияАналитик.ЛеваяАналитика_1 КАК ЛевоеЗначение,
	|	бит_СоответствияАналитик.ПраваяАналитика_1 КАК ПравоеЗначение
	|ИЗ
	|	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|ГДЕ
	|	бит_СоответствияАналитик.ВидСоответствия = &ВидСоответствия
	|	И бит_СоответствияАналитик.ЛеваяАналитика_1 = &ЛевоеЗначение
	|	И бит_СоответствияАналитик.ПраваяАналитика_1 = &ПравоеЗначение";
	
	Запрос.УстановитьПараметр("ВидСоответствия", ВидСоответствия);
	Запрос.УстановитьПараметр("ЛевоеЗначение", ЛевоеЗначение);
	Запрос.УстановитьПараметр("ПравоеЗначение", ПравоеЗначение);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции
// -- БоровинскаяОА (СофтЛаб) 18.12.18 Начало (#3130)

Функция СформироватьТаблицуОборотов()

	//Описание типов
	ТипЧисло = Новый ОписаниеТипов("Число"); 
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипСтрока3 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3));
	ТипСтрока20 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20));
	ТипСтрока60 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60));
	ТипСтрока100 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
	ТипДата = Новый ОписаниеТипов("Дата");
	
	//Формирование таблицы для хранения и обработки результата данных
	ТабОбороты = Новый ТаблицаЗначений;
	ТабОбороты.Колонки.Добавить("RecNo", ТипЧисло);
	ТабОбороты.Колонки.Добавить("DocNum",ТипСтрока100);
	ТабОбороты.Колонки.Добавить("Voucher",ТипСтрока20);
	ТабОбороты.Колонки.Добавить("ReferVoucherId",ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DocDate",ТипДата);
	ТабОбороты.Колонки.Добавить("DocType", ТипСтрока3);
	ТабОбороты.Колонки.Добавить("Comment", ТипСтрока60);
	ТабОбороты.Колонки.Добавить("Posted", ТипЧисло);
	ТабОбороты.Колонки.Добавить("BudgetIntID", ТипЧисло);

	ТабОбороты.Колонки.Добавить("RefRecNo", ТипЧисло);
	ТабОбороты.Колонки.Добавить("VoucherTrans", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("AccD", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimD1", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimD2", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimD3", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimD4", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimD5", ТипСтрока20);
	//ТабОбороты.Колонки.Добавить("DimD6", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("AccC", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimC1", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimC2", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimC3", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimC4", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimC5", ТипСтрока20);
	//ТабОбороты.Колонки.Добавить("DimC6", ТипСтрока20);
	ТабОбороты.Колонки.Добавить("Amount", ТипЧисло);
	//***БИТ***Теплова***( валютные поля
	ТабОбороты.Колонки.Добавить("AmountCur", ТипЧисло);
	ТабОбороты.Колонки.Добавить("CurrencyCode", ТипСтрока3);
	//***БИТ***Теплова***)

	Возврат	ТабОбороты;
КонецФункции // СформироватьТаблицуОборотов()

////////////////////////////////////////////////////////////////////////////////////
// Сопоставление
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

Процедура Сопоставление(ДатаНачала=Неопределено, ДатаОкончания=Неопределено, Аналитика="", ТипыОпераций=Неопределено) Экспорт
	#Если Клиент Тогда
		Если ДатаНачала <> Неопределено И Граница <> Неопределено Тогда
			Если ДатаНачала < Граница Тогда
				Предупреждение("Выбранный период частично или полностью находится в закрытом периоде, выберите корректный период.");
				//Возврат;
			КонецЕсли;	
		КонецЕсли;
	#КонецЕсли 

	// проверим поступившие параметры
	Если ДатаНачала=Неопределено
	 ИЛИ ТипЗнч(ДатаНачала)<>Тип("Дата")
	 ИЛИ ДатаОкончания=Неопределено
	 ИЛИ ТипЗнч(ДатаОкончания)<>Тип("Дата")
	 ИЛИ ДатаНачала > ДатаОкончания 
	 ИЛИ ТипыОпераций=Неопределено
	 ИЛИ ТипЗнч(ТипыОпераций)<>Тип("Массив")
	 ИЛИ ТипЗнч(Аналитика)<>Тип("Строка")
	 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Если ТипыОпераций.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТипДокумента", ТипыОпераций);
		Запрос.УстановитьПараметр("НетОтбораПоТипуДокумента", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ТипДокумента", Неопределено);
		Запрос.УстановитьПараметр("НетОтбораПоТипуДокумента", Истина);
	КонецЕсли;
	Если СтрДлина(Аналитика) > 0 Тогда
		СубконтоАксапта = Новый Массив;
		СубконтоАксапта.Добавить(Аналитика);
		Запрос.УстановитьПараметр("СубконтоАксапта", СубконтоАксапта);
		Запрос.УстановитьПараметр("НетОтбораПоАналитике", Ложь);
	Иначе
		Запрос.УстановитьПараметр("СубконтоАксапта", Неопределено);
		Запрос.УстановитьПараметр("НетОтбораПоАналитике", Истина);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Ссылка КАК Ссылка,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.НомерСтроки,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СчетДт,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт1,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт2,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт3,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт4,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт5,
	              // |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт6,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СДт1,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СДт2,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СДт3,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СДт4,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СДт5,
	               //|	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СДт6,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СчетКт,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт1,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт2,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт3,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт4,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт5,
	               //|	бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт6,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СКт1,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СКт2,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СКт3,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СКт4,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СКт5,
	               //|	бит_ок_ОперацияАксаптыОборотыАксапты.Субконто1СКт6,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Сумма,
	               |	ПОДСТРОКА(бит_ок_ОперацияАксаптыОборотыАксапты.СчетДт, 1, 2) КАК СчетДтВерхний,
	               |	ПОДСТРОКА(бит_ок_ОперацияАксаптыОборотыАксапты.СчетКт, 1, 2) КАК СчетКтВерхний,
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Ссылка.Организация КАК Организация //***БИТ***Теплова***
	               |ПОМЕСТИТЬ Документы
	               |ИЗ
	               |	Документ.бит_ок_ОперацияАксапты.ОборотыАксапты КАК бит_ок_ОперацияАксаптыОборотыАксапты
	               |ГДЕ
	               |	бит_ок_ОперацияАксаптыОборотыАксапты.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И (бит_ок_ОперацияАксаптыОборотыАксапты.Ссылка.ТипДокумента.Код В (&ТипДокумента)
	               |			ИЛИ &НетОтбораПоТипуДокумента)
	               |	И (бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт1 В (&СубконтоАксапта)
	               |			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт2 В (&СубконтоАксапта)
	               |			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт3 В (&СубконтоАксапта)
	               |			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт4 В (&СубконтоАксапта)
	               |			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт5 В (&СубконтоАксапта)
	               //|			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаДт6 В (&СубконтоАксапта)
	               |			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт1 В (&СубконтоАксапта)
	               |			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт2 В (&СубконтоАксапта)
	               |			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт3 В (&СубконтоАксапта)
	               |			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт4 В (&СубконтоАксапта)
	               |			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт5 В (&СубконтоАксапта)
	               //|			ИЛИ бит_ок_ОперацияАксаптыОборотыАксапты.СубконтоАксаптаКт6 В (&СубконтоАксапта)
	               |			ИЛИ &НетОтбораПоАналитике)
	               |	И бит_ок_ОперацияАксаптыОборотыАксапты.Ссылка.Организация = &Организация  //***БИТ***Теплова***
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Документы.Ссылка,
	               |	Документы.НомерСтроки,
	               |	Документы.СчетДт,
	               |	Документы.СубконтоАксаптаДт1,
	               |	Документы.СубконтоАксаптаДт2,
	               |	Документы.СубконтоАксаптаДт3,
	               |	Документы.СубконтоАксаптаДт4,
	               |	Документы.СубконтоАксаптаДт5,
	               //|	Документы.СубконтоАксаптаДт6,
	               |	Документы.Субконто1СДт1,
	               |	Документы.Субконто1СДт2,
	               |	Документы.Субконто1СДт3,
	               |	Документы.Субконто1СДт4,
	               |	Документы.Субконто1СДт5,
	               //|	Документы.Субконто1СДт6,
	               |	Документы.СчетКт,
	               |	Документы.СубконтоАксаптаКт1,
	               |	Документы.СубконтоАксаптаКт2,
	               |	Документы.СубконтоАксаптаКт3,
	               |	Документы.СубконтоАксаптаКт4,
	               |	Документы.СубконтоАксаптаКт5,
	              //|	Документы.СубконтоАксаптаКт6,
	               |	Документы.Субконто1СКт1,
	               |	Документы.Субконто1СКт2,
	               |	Документы.Субконто1СКт3,
	               |	Документы.Субконто1СКт4,
	               |	Документы.Субконто1СКт5,
	               //|	Документы.Субконто1СКт6,
	               |	Документы.Сумма,
	               |	СА_Дт1.Аналитика1С КАК СА_Дт1,
	               |	СА_Дт2.Аналитика1С КАК СА_Дт2,
	               |	СА_Дт3.Аналитика1С КАК СА_Дт3,
	               |	СА_Дт4.Аналитика1С КАК СА_Дт4,
	               |	СА_Дт5.Аналитика1С КАК СА_Дт5,
	               //|	СА_Дт6.Аналитика1С КАК СА_Дт6,
	               |	СА_Кт1.Аналитика1С КАК СА_Кт1,
	               |	СА_Кт2.Аналитика1С КАК СА_Кт2,
	               |	СА_Кт3.Аналитика1С КАК СА_Кт3,
	               |	СА_Кт4.Аналитика1С КАК СА_Кт4,
	               |	СА_Кт5.Аналитика1С КАК СА_Кт5
				   //,
	               //|	СА_Кт6.Аналитика1С КАК СА_Кт6
	               |ПОМЕСТИТЬ НовоеСопоставление
	               |ИЗ
	               |	Документы КАК Документы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Дт1
	               |		ПО Документы.СубконтоАксаптаДт1 = СА_Дт1.КодАналитикиАксапты
	               |			И Документы.СчетДтВерхний = СА_Дт1.СчетАксапты
	               |			И Документы.Организация = СА_Дт1.Организация  //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Дт2
	               |		ПО Документы.СубконтоАксаптаДт2 = СА_Дт2.КодАналитикиАксапты
	               |			И Документы.СчетДтВерхний = СА_Дт2.СчетАксапты
	               |			И Документы.Организация = СА_Дт2.Организация  //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Дт3
	               |		ПО Документы.СубконтоАксаптаДт3 = СА_Дт3.КодАналитикиАксапты
	               |			И Документы.СчетДтВерхний = СА_Дт3.СчетАксапты
	               |			И Документы.Организация = СА_Дт3.Организация  //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Дт4
	               |		ПО Документы.СубконтоАксаптаДт4 = СА_Дт4.КодАналитикиАксапты
	               |			И Документы.СчетДтВерхний = СА_Дт4.СчетАксапты
	               |			И Документы.Организация = СА_Дт4.Организация  //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Дт5
	               |		ПО Документы.СубконтоАксаптаДт5 = СА_Дт5.КодАналитикиАксапты
	               |			И Документы.СчетДтВерхний = СА_Дт5.СчетАксапты
	               |			И Документы.Организация = СА_Дт5.Организация  //***БИТ***Теплова***
				   //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Дт6
				   //|		ПО Документы.СубконтоАксаптаДт6 = СА_Дт6.КодАналитикиАксапты
				   //|			И Документы.СчетДтВерхний = СА_Дт6.СчетАксапты
				   //|			И Документы.Организация = СА_Дт6.Организация  //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Кт1
	               |		ПО Документы.СубконтоАксаптаКт1 = СА_Кт1.КодАналитикиАксапты
	               |			И Документы.СчетКтВерхний = СА_Кт1.СчетАксапты
	               |			И Документы.Организация = СА_Кт1.Организация  //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Кт2
	               |		ПО Документы.СубконтоАксаптаКт2 = СА_Кт2.КодАналитикиАксапты
	               |			И Документы.СчетКтВерхний = СА_Кт2.СчетАксапты
	               |			И Документы.Организация = СА_Кт2.Организация  //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Кт3
	               |		ПО Документы.СубконтоАксаптаКт3 = СА_Кт3.КодАналитикиАксапты
	               |			И Документы.СчетКтВерхний = СА_Кт3.СчетАксапты
	               |			И Документы.Организация = СА_Кт3.Организация  //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Кт4
	               |		ПО Документы.СубконтоАксаптаКт4 = СА_Кт4.КодАналитикиАксапты
	               |			И Документы.СчетКтВерхний = СА_Кт4.СчетАксапты
	               |			И Документы.Организация = СА_Кт4.Организация  //***БИТ***Теплова***
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Кт5
	               |		ПО Документы.СубконтоАксаптаКт5 = СА_Кт5.КодАналитикиАксапты
	               |			И Документы.СчетКтВерхний = СА_Кт5.СчетАксапты
	               |			И Документы.Организация = СА_Кт5.Организация  //***БИТ***Теплова***
				   //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СА_Кт6
				   //|		ПО Документы.СубконтоАксаптаКт6 = СА_Кт6.КодАналитикиАксапты
				   //|			И Документы.СчетКтВерхний = СА_Кт6.СчетАксапты
				   //|			И Документы.Организация = СА_Кт6.Организация  //***БИТ***Теплова***
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НовоеСопоставление.Ссылка КАК Ссылка,
	               |	НовоеСопоставление.НомерСтроки,
	               |	НовоеСопоставление.СчетДт,
	               |	НовоеСопоставление.СчетКт,
	               |	НовоеСопоставление.Сумма,
	               |	НовоеСопоставление.СубконтоАксаптаДт1,
	               |	НовоеСопоставление.СубконтоАксаптаДт2,
	               |	НовоеСопоставление.СубконтоАксаптаДт3,
	               |	НовоеСопоставление.СубконтоАксаптаДт4,
	               |	НовоеСопоставление.СубконтоАксаптаДт5,
	               //|	НовоеСопоставление.СубконтоАксаптаДт6,
	               |	НовоеСопоставление.Субконто1СДт1,
	               |	НовоеСопоставление.СА_Дт1,
	               |	НовоеСопоставление.Субконто1СДт2,
	               |	НовоеСопоставление.СА_Дт2,
	               |	НовоеСопоставление.Субконто1СДт3,
	               |	НовоеСопоставление.СА_Дт3,
	               |	НовоеСопоставление.Субконто1СДт4,
	               |	НовоеСопоставление.СА_Дт4,
	               |	НовоеСопоставление.Субконто1СДт5,
	               |	НовоеСопоставление.СА_Дт5,
	               //|	НовоеСопоставление.Субконто1СДт6,
	              // |	НовоеСопоставление.СА_Дт6,
	               |	НовоеСопоставление.СубконтоАксаптаКт1,
	               |	НовоеСопоставление.СубконтоАксаптаКт2,
	               |	НовоеСопоставление.СубконтоАксаптаКт3,
	               |	НовоеСопоставление.СубконтоАксаптаКт4,
	               |	НовоеСопоставление.СубконтоАксаптаКт5,
	               //|	НовоеСопоставление.СубконтоАксаптаКт6,
	               |	НовоеСопоставление.Субконто1СКт1,
	               |	НовоеСопоставление.СА_Кт1,
	               |	НовоеСопоставление.Субконто1СКт2,
	               |	НовоеСопоставление.СА_Кт2,
	               |	НовоеСопоставление.Субконто1СКт3,
	               |	НовоеСопоставление.СА_Кт3,
	               |	НовоеСопоставление.Субконто1СКт4,
	               |	НовоеСопоставление.СА_Кт4,
	               |	НовоеСопоставление.Субконто1СКт5,
	               |	НовоеСопоставление.СА_Кт5
				   //,
	              // |	НовоеСопоставление.Субконто1СКт6,
	               //|	НовоеСопоставление.СА_Кт6
	               |ИЗ
	               |	НовоеСопоставление КАК НовоеСопоставление
	               |ГДЕ
	               |	(НовоеСопоставление.Субконто1СДт1 <> НовоеСопоставление.СА_Дт1
	               |			ИЛИ НовоеСопоставление.Субконто1СДт2 <> НовоеСопоставление.СА_Дт2
	               |			ИЛИ НовоеСопоставление.Субконто1СДт3 <> НовоеСопоставление.СА_Дт3
	               |			ИЛИ НовоеСопоставление.Субконто1СДт4 <> НовоеСопоставление.СА_Дт4
	               |			ИЛИ НовоеСопоставление.Субконто1СДт5 <> НовоеСопоставление.СА_Дт5
	               //|			ИЛИ НовоеСопоставление.Субконто1СДт6 <> НовоеСопоставление.СА_Дт6
	               |			ИЛИ НовоеСопоставление.Субконто1СКт1 <> НовоеСопоставление.СА_Кт1
	               |			ИЛИ НовоеСопоставление.Субконто1СКт2 <> НовоеСопоставление.СА_Кт2
	               |			ИЛИ НовоеСопоставление.Субконто1СКт3 <> НовоеСопоставление.СА_Кт3
	               |			ИЛИ НовоеСопоставление.Субконто1СКт4 <> НовоеСопоставление.СА_Кт4
	               |			ИЛИ НовоеСопоставление.Субконто1СКт5 <> НовоеСопоставление.СА_Кт5)
	               //|			ИЛИ НовоеСопоставление.Субконто1СКт6 <> НовоеСопоставление.СА_Кт6)
	               |ИТОГИ ПО
	               |	Ссылка";
				   
				   Запрос.УстановитьПараметр("Организация", Организация);  //***БИТ***Теплова***
				   
	ОповеститьПользователя("Выполняется запрос для получения документов необходимых для пересопоставления аналитики");
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаДокументКоличество = ВыборкаДокумент.Количество();
	ОбрабатываетсяДокумент = 0;
	// Время старта нужно для примерного вычисления скорости
	ДСтарт = ТекущаяДата();
	
	МассивНеСопоставленных = ПолучитьНеСопоставленные().ВыгрузитьКолонку("Значение");
	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 22.10.2015 9:41:20
	КолДок = 0; 
	//-- СВВ}
	Пока ВыборкаДокумент.Следующий() Цикл
		ЕстьНеСопоставленные = Ложь;
		ОбрабатываетсяДокумент = ОбрабатываетсяДокумент + 1;
		Док = ВыборкаДокумент.Ссылка.ПолучитьОбъект();
		
		Выборка = ВыборкаДокумент.Выбрать();
		Пока Выборка.Следующий() Цикл
			Строка = Док.ОборотыАксапты.Получить(Выборка.НомерСтроки-1);
			
			Строка.Субконто1СДт1 = ?(Выборка.СА_Дт1 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СДт1), Строка.Субконто1СДт1, Выборка.СА_Дт1);
			Строка.Субконто1СДт2 = ?(Выборка.СА_Дт2 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СДт2), Строка.Субконто1СДт2, Выборка.СА_Дт2);
			Строка.Субконто1СДт3 = ?(Выборка.СА_Дт3 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СДт3), Строка.Субконто1СДт3, Выборка.СА_Дт3);
			Строка.Субконто1СДт4 = ?(Выборка.СА_Дт4 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СДт4), Строка.Субконто1СДт4, Выборка.СА_Дт4);
			Строка.Субконто1СДт5 = ?(Выборка.СА_Дт5 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СДт5), Строка.Субконто1СДт5, Выборка.СА_Дт5);
			//Строка.Субконто1СДт6 = ?(Выборка.СА_Дт6 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СДт6), Строка.Субконто1СДт6, Выборка.СА_Дт6);
			Строка.Субконто1СКт1 = ?(Выборка.СА_Кт1 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СКт1), Строка.Субконто1СКт1, Выборка.СА_Кт1);
			Строка.Субконто1СКт2 = ?(Выборка.СА_Кт2 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СКт2), Строка.Субконто1СКт2, Выборка.СА_Кт2);
			Строка.Субконто1СКт3 = ?(Выборка.СА_Кт3 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СКт3), Строка.Субконто1СКт3, Выборка.СА_Кт3);
			Строка.Субконто1СКт4 = ?(Выборка.СА_Кт4 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СКт4), Строка.Субконто1СКт4, Выборка.СА_Кт4);
			Строка.Субконто1СКт5 = ?(Выборка.СА_Кт5 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СКт5), Строка.Субконто1СКт5, Выборка.СА_Кт5);
			//Строка.Субконто1СКт6 = ?(Выборка.СА_Кт6 = Null ИЛИ НЕ ЗначениеЗаполнено(Строка.Субконто1СКт6), Строка.Субконто1СКт6, Выборка.СА_Кт6);
			
			МассивСубконто = Новый Массив;
			МассивСубконто.Добавить(Строка.Субконто1СДт1);
			МассивСубконто.Добавить(Строка.Субконто1СДт2);
			МассивСубконто.Добавить(Строка.Субконто1СДт3);
			МассивСубконто.Добавить(Строка.Субконто1СДт4);
			МассивСубконто.Добавить(Строка.Субконто1СДт5);
			//МассивСубконто.Добавить(Строка.Субконто1СДт6);
			МассивСубконто.Добавить(Строка.Субконто1СКт1);
			МассивСубконто.Добавить(Строка.Субконто1СКт2);
			МассивСубконто.Добавить(Строка.Субконто1СКт3);
			МассивСубконто.Добавить(Строка.Субконто1СКт4);
			МассивСубконто.Добавить(Строка.Субконто1СКт5);
			//МассивСубконто.Добавить(Строка.Субконто1СКт6);
			Для каждого Эл из МассивСубконто Цикл
				НайдЭл = МассивНеСопоставленных.Найти(Эл);
				Если НайдЭл <> Неопределено Тогда
					ЕстьНеСопоставленные = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Док.ЗагруженоСОшибкой = ЕстьНеСопоставленные;
		
		// запись документа
		Попытка
			#Если Клиент Тогда 
				Если ПрерываниеПоCtrlBreak Тогда
					ОбработкаПрерыванияПользователя();
				КонецЕсли;
			#КонецЕсли 
			
			// вывести информацию
			ВремяРаботы = ТекущаяДата() - ДСтарт;
			Обработано = ОбрабатываетсяДокумент;
			Скорость = Обработано / ?(ВремяРаботы = 0, 1, ВремяРаботы);
			ОповеститьПользователя("Записываю документ " + ОбрабатываетсяДокумент + " из " + ВыборкаДокументКоличество + " - " + Формат(Скорость, "ЧДЦ=2") + " документов/с");
			
			// запись документа
			Док.Записать(РежимЗаписиДокумента.Проведение);
			//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 22.10.2015 9:42:07
			КолДОк = КолДок + 1;
			//-- СВВ}
		Исключение
			СообщитьПользователю("!!!");
		КонецПопытки;
		
	КонецЦикла;
	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 22.10.2015 9:42:18
	Сообщить("Сопоставлено документов - " + КолДок);;
	//-- СВВ}
КонецПроцедуры
	

КоличествоЗагруженных   = 0; 
ПорцияТранзакции		= 500;
мТаймаут 				= 0;
ЗаполнитьНастройки();

ПодключеноКБазе 		= Ложь;
мАутентификация = 1; // 0 - без, 1 - базовая, 2 - NTLM