
#Область ОписаниеПеременных

// Служит для передачи вида сравнения между обработчиками.
&НаКлиенте
Перем мТекущийВидСравнения;

// Служит для передачи вида параметра между обработчиками.
&НаКлиенте
Перем мТекущийВидПараметра;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Объект.СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотГод;
	
	ЗаполнитьКэшЗначений();
	
	НастройкаПрезентацииПриИзмененииНаСервере();		
	
	// Применим настройку по-умолчанию, если таковая есть.
	УстановитьЗначенияПоУмолчанию();		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастройкаПрезентацииПриИзменении(Элемент)
	НастройкаПрезентацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НастройкаПрезентацииПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.НастройкаПрезентации) Тогда
		
		ЗаполнитьТаблицуОтборов();
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборвотчете

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные 		 = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВыбораДляОтборов); 
	
КонецПроцедуры // ОтборВОтчетеВидСравненияНачалоВыбора()

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные 		 = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВыбораДляОтборов);
	
КонецПроцедуры // ОтборВОтчетеВидСравненияАвтоПодбор()

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеВидСравненияПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);	
	
КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

&НаКлиенте
Процедура ОтборВОтчетеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеЗначениеПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока        = Элементы.ОтборВОтчете.ТекущиеДанные;	
	
	Если ТекущаяСтрока.Значение = Неопределено Тогда
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
		
	Иначе	
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВОтчетеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВОтчетеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеВидСравненияПриИзмененииСервер(Ид, мТекущийВидСравнения)
	
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеВидСравненияПриИзменении(ТекущиеДанные, мТекущийВидСравнения);	
	
КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеЗначениеПриИзмененииСервер(Ид)
	
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеЗначениеПриИзменении(ТекущиеДанные);
	
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИмяКаталогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Показать(Новый ОписаниеОповещения("ИмяКаталогаНачалоВыбораЗавершение", ЭтотОбъект)); 
	
КонецПроцедуры

// Обработка оповещения процедуры "ИмяКаталогаНачалоВыбора".
//
// Параметры:
//  ВыбранныеФайлы			 - массив -  массив выбранных имен файлов или Неопределено, если выбор не осуществлен.
//  ДополнительныеПараметры	 - Произвольный.
//
&НаКлиенте
Процедура ИмяКаталогаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяКаталога = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаПериода(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Объект, "СтандартныйПериод");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформировать(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		
		Отказ = Ложь;		
		
		ТекстСообщения = НСтр("ru = 'Вывод данных презентации...'");
		Состояние(ТекстСообщения);
		
		ДанныеЗаполнения = КомандаСформироватьНаСервере();
		
		
		Если ЭтоАдресВременногоХранилища(фАдресХранилищаМакетаСохранение) Тогда
			
			// Сохранение файла во временный каталог
			ИмяФайлаВрем = Объект.ИмяКаталога+"\"+Строка(Объект.НастройкаПрезентации)+".pptx";
			
			ДанныеМакета = ПолучитьИзВременногоХранилища(фАдресХранилищаМакетаСохранение);
			Попытка
				
				ДанныеМакета.Записать(ИмяФайлаВрем);
				
			Исключение
				
				ТекстСообщения =  НСтр("ru = 'Ошибка записи файла: %1%.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецПопытки;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			
			// Анализ структуры файла
			
			PowerPointApp = бит_ПауэрПойтнКлиентСервер.InitPowerPoint(Ложь, Истина, Отказ);
			
			// PowerPointApp.Visible = False;
			
			
			Presentation = бит_ПауэрПойтнКлиентСервер.OpenPowerPointFile(PowerPointApp, ИмяФайлаВрем, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			xlWB = undefined;	
			Для Каждого Slide Из Presentation.Slides Цикл
				
				// Сообщить(Slide.Name+" "+Slide.SlideID);
				
				// Установка параметров слайдов
				Для Каждого Shape Из Slide.Shapes Цикл
					
					Если Shape.HasTextFrame Тогда
						
						// Сообщить(Shape.TextFrame.TextRange.Text);
						Текст = Shape.TextFrame.TextRange.Text;
						
						Если Найти(Текст,"{%")>0 Тогда
							
							МассивВрем = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(Текст,"%}");
							Для каждого СтрВрем Из МассивВрем Цикл
								
								ПозНач = Найти(СтрВрем,"{%");
								Если ПозНач > 0 Тогда
									
									ИмяПараметра = Сред(СтрВрем, ПозНач+2);
									
									ЗначениеПараметра = ДанныеЗаполнения.ПараметрыПрезентации[ИмяПараметра+"_"+Slide.SlideID];
									Если ЗначениеПараметра = Неопределено Тогда
										
										ЗначениеПараметра = ДанныеЗаполнения.ПараметрыПрезентации[ИмяПараметра];
										
									КонецЕсли; 
									
									Если НЕ ЗначениеПараметра = Неопределено Тогда
										
										Текст = СтрЗаменить(Текст, "{%"+ИмяПараметра+"%}",Строка(ЗначениеПараметра));
										
									КонецЕсли; 
									
								КонецЕсли; 
								
							КонецЦикла; 
							
							Shape.TextFrame.TextRange.Text = Текст;
							
						КонецЕсли; 
						
					ИначеЕсли Shape.HasChart Тогда
						
						Ключ = Строка(Slide.SlideID)+"_"+Shape.Name;
						ДанныеПрезентации = ДанныеЗаполнения.ДанныеДиаграмм[Ключ];
						
						Если НЕ ДанныеПрезентации = Неопределено Тогда
							
							Если ДанныеПрезентации.Точки.Количество() = 0 Тогда
								
								Продолжить;
								
							КонецЕсли; 
							
							res = Shape.Chart.ChartData.Activate();											 
							// Если NOT xlWB = undefined Тогда
							// 
							// 	   	xlWB.Close();
							//   	xlWB = undefined;
							
							// 
							//   КонецЕсли; 
							xlWB =  Shape.Chart.ChartData.Workbook;
							xlWB.Application.Visible = False;
							Sheet = xlWB.Worksheets(1);	
							
							Ном = 2;
							Для Каждого Точка Из ДанныеПрезентации.Точки Цикл
								Sheet.Cells(Ном, 1).Value = Строка(Точка);
								Ном = Ном + 1;
							КонецЦикла;
							
							Ном = 2;
							Для Каждого ТекСерия Из ДанныеПрезентации.Серии Цикл
								// Sheet.Cells(1, Ном).Value = ТекСерия.Имя;
								Sheet.Cells(1, Ном).Value = ТекСерия.Заголовок;
								
								НомСтр = 2;
								Для Каждого ТекЗнч Из ТекСерия.Данные Цикл
									
									Sheet.Cells(НомСтр, Ном).Value = ТекЗнч;
									
									НомСтр = НомСтр + 1;
								КонецЦикла;
								
								Ном = Ном + 1;
							КонецЦикла;
							
							Sheet.ListObjects.Item(1).Resize(Sheet.Range(Sheet.Cells(1, 1), Sheet.Cells(НомСтр-1, Ном-1)));
							
						КонецЕсли;
						
					ИначеЕсли Shape.HasTable Тогда
						
						// Ключ = Строка(Slide.SlideID)+"_"+Shape.Table.Title;
						Ключ = КлючТаблицы(Slide.SlideID,Shape.Table.Title);
						МодельТаблицы = ДанныеЗаполнения.ДанныеТаблиц[Ключ];
						
						Если НЕ МодельТаблицы = Неопределено Тогда
							
							КоличествоКолонок = Shape.Table.Columns.Count();
							КоличествоСтрок   = Shape.Table.Rows.Count();
							ТекНомерСтроки = КоличествоСтрок;
							
							Для Каждого МодельСтроки ИЗ МодельТаблицы Цикл
								
								Shape.Table.Rows.Add();
								ТекНомерСтроки = ТекНомерСтроки + 1;
								
								нк = 1;
								Для каждого КиЗ ИЗ МодельСтроки Цикл
									
									Если нк <= КоличествоКолонок Тогда
										
										Shape.Table.Cell(ТекНомерСтроки, нк).Shape.TextFrame.TextRange.Text = Строка(КиЗ.Значение); 
										
									КонецЕсли;	  
									
									нк = нк+1;
									
								КонецЦикла; // По колонкам	  
								
							КонецЦикла; // По строкам модели таблицы	 
							
						КонецЕсли;	 
						
					КонецЕсли; 
					
				КонецЦикла;  // Элементы слайдов
				
			КонецЦикла;	 // Слайды
			
		КонецЕсли;	
		
	КонецЕсли; 
	
	// Если NOT xlWB = undefined Тогда
	// 	
	// 	xlWB.Close();
	// 	xlWB = undefined;
	// 	
	// КонецЕсли; 
	
	ТекстСообщения = НСтр("ru = 'Формирование презентации завершено.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция КомандаСформироватьНаСервере()
	
	// Извлечение макета из хранилища
	СпрОб = Объект.НастройкаПрезентации.ПолучитьОбъект();
	ДанныеМакета = СпрОб.ИзвлечьМакет();
	Если ТипЗнч(ДанныеМакета) = Тип("ДвоичныеДанные") Тогда
		
		фАдресХранилищаМакетаСохранение = ПоместитьВоВременноеХранилище(ДанныеМакета, УникальныйИдентификатор);
		
	Иначе
		
		фАдресХранилищаМакетаСохранение = "";
		
	КонецЕсли; 
	
	// Получение данных по источникам
	
	ТабИсточники = Новый ТаблицаЗначений;
	ТабИсточники.Колонки.Добавить("ИсточникДанных");
	ТабИсточники.Колонки.Добавить("ЭлементДанных");
	
	Для Каждого СтрокаТаблицы Из СпрОб.ПараметрыПрезентации Цикл
		
		НоваяСтрока = ТабИсточники.Добавить();
		НоваяСтрока.ИсточникДанных = СтрокаТаблицы.ИсточникДанных;
		НоваяСтрока.ЭлементДанных  = СтрокаТаблицы.ЭлементДанных;
		
	КонецЦикла;	
	
	Для каждого СтрокаТаблицы Из СпрОб.СерииДиаграмм Цикл
		
		НоваяСтрока = ТабИсточники.Добавить();
		НоваяСтрока.ИсточникДанных = СтрокаТаблицы.ИсточникДанных;
		НоваяСтрока.ЭлементДанных = СтрокаТаблицы.ЭлементДанных;
		
	КонецЦикла; 
	
	Для Каждого СтрокаТаблицы Из СпрОб.ТаблицыПрезентации Цикл
		
		НоваяСтрока = ТабИсточники.Добавить();
		НоваяСтрока.ИсточникДанных = СтрокаТаблицы.ИсточникДанных;
		НоваяСтрока.ЭлементДанных  = СтрокаТаблицы.ЭлементДанных;
		
	КонецЦикла;	
	
	
	ТабИсточники.Свернуть("ИсточникДанных, ЭлементДанных");
	
	ДанныеИсточников = Новый Соответствие;
	
	ГраницаНач = Объект.СтандартныйПериод.ДатаНачала;
	ГраницаКон = Новый Граница(Объект.СтандартныйПериод.ДатаОкончания,ВидГраницы.Включая);
	
	
	Для каждого СтрокаИсточник Из ТабИсточники Цикл
		
		// Определяем тип источника данных
		ЭтоИсточник         = ?(ТипЗнч(СтрокаИсточник.ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных"),Истина,Ложь);
		ЭтоСпособКомпоновки = ?(ТипЗнч(СтрокаИсточник.ИсточникДанных) = Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных"),Истина,Ложь);
		
		// Получаем таблицу данных
		Если ЭтоИсточник Тогда
			
			СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
			СтрПар.ОтборВОтчете = ОтборВОтчете;
			СтрПар.НастройкаПулаПодключений = Объект.НастройкаПулаПодключений;			
			
			ТаблицаРезультат = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(СтрокаИсточник.ИсточникДанных
			,ГраницаНач
			,ГраницаКон
			,СтрПар);
			
			
			
			
			
		ИначеЕсли ЭтоСпособКомпоновки Тогда
			
			
			ПоказыватьИндикатор = НЕ бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("НеОтображатьИндикаторКомпоновкиИсточников");
			
			СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоСпособуКомпоновки();
			СтрПар.ОтборВОтчете             = ОтборВОтчете;
			СтрПар.ПоказыватьИндикатор      = Ложь;
			СтрПар.НастройкаПулаПодключений = Объект.НастройкаПулаПодключений;
			
			ТаблицаРезультат = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточникам(СтрокаИсточник.ИсточникДанных
			,ГраницаНач
			,ГраницаКон
			,СтрПар);
			
			
			бит_МеханизмПолученияДанных.ДополнитьРезультатИВыполнитьРасчет(СтрокаИсточник.ИсточникДанных,ТаблицаРезультат);
			
			// Выполняем свертку
			МассивРесурсов    = бит_МеханизмПолученияДанных.ПолучитьСписокПолейДляСпособаКомпоновки(СтрокаИсточник.ИсточникДанных,"Ресурс");
			ТаблицаРезультат  = бит_МеханизмПолученияДанных.СвернутьРезультат(ТаблицаРезультат,МассивРесурсов);
			
		КонецЕсли;
		
		ДанныеИсточников.Вставить(СтрокаИсточник.ИсточникДанных, ТаблицаРезультат);
		
	КонецЦикла; 
	
	// Подготовка данных для вывода в диаграмму
	ДанныеДиаграмм = Новый Соответствие;
	
	Для каждого СтрокаДиаграмма Из СпрОб.ДиаграммыПрезентации Цикл
		
		// Найдем серии диаграммы
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("ИдДиаграммы", СтрокаДиаграмма.ИД);
		
		Точки = Новый СписокЗначений;
		Серии = СпрОб.СерииДиаграмм.НайтиСтроки(СтрОтбор);
		ДанныеСерийВрем = Новый Массив;
		
		Для каждого СтрокаСерии Из Серии Цикл
			
			ТаблицаРезультат = ДанныеИсточников[СтрокаСерии.ИсточникДанных];
			
			Если ТипЗнч(ТаблицаРезультат) = Тип("ТаблицаЗначений") Тогда
				
				
				Если ЗначениеЗаполнено(СтрокаСерии.ИмяПоляСерии) Тогда
					
					МассивПолейСерий = ТаблицаРезультат.ВыгрузитьКолонку(СтрокаСерии.ИмяПоляСерии);
					
					бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивПолейСерий);
					
					Для каждого ТекЗнчСерии Из МассивПолейСерий Цикл
						
						ОтборДанныеСерии = Новый Структура;
						ОтборДанныеСерии.Вставить(СтрокаСерии.ИмяПоляСерии, ТекЗнчСерии);
						
						ТекДанныеСерии = ТаблицаРезультат.НайтиСтроки(ОтборДанныеСерии);
						
						Если ЗначениеЗаполнено(СтрокаСерии.ФорматПоляСерии) Тогда
							ТекПредставлениеСерии = Формат(ТекЗнчСерии, СтрокаСерии.ФорматПоляСерии);
						Иначе	
							ТекПредставлениеСерии = ТекЗнчСерии;
						КонецЕсли;
						
						ТекСерия = ПодготовитьДанныеСерии(ТекДанныеСерии, Точки, СтрокаСерии, ТекПредставлениеСерии);
						ДанныеСерийВрем.Добавить(ТекСерия);				
						
					КонецЦикла; 
					
				Иначе	
					
					ТекСерия = ПодготовитьДанныеСерии(ТаблицаРезультат, Точки, СтрокаСерии);
					ДанныеСерийВрем.Добавить(ТекСерия);				
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; // По сериям
		
		ТекТочки = Точки.Скопировать();
		ТекТочки.СортироватьПоЗначению();
		
		Если НЕ СтрокаСерии = Неопределено И ЗначениеЗаполнено(СтрокаСерии.ФорматПоляТочки) Тогда
			
			Для каждого Эл Из ТекТочки Цикл
			
				Эл.Значение = Формат(Эл.Значение, СтрокаСерии.ФорматПоляТочки);
			
			КонецЦикла; 
					
		КонецЕсли; 
		
		ДанныеДиаграммы = Новый Структура;
		ДанныеДиаграммы.Вставить("Точки",ТекТочки);
		ДанныеСерий = Новый Массив;
		
		Для каждого ТекСерияВрем Из ДанныеСерийВрем Цикл
			
			ТекСерия = Новый Структура("Имя,Заголовок,Данные");
			ТекСерия.Имя = ТекСерияВрем.Имя;
			ТекСерия.Заголовок = ТекСерияВрем.Заголовок;
			
			ТекСерияДанные = Новый Массив;
			Для каждого Элемент Из Точки Цикл
				
				СтрОтбор = Новый Структура("Поле", Элемент.Значение);
				НайденныеСтроки = ТекСерияВрем.Данные.НайтиСтроки(СтрОтбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					ТекЗначение = НайденныеСтроки[0].Ресурс;
					ТекСерияДанные.Добавить(ТекЗначение);
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			ТекСерия.Данные = ТекСерияДанные;
			ДанныеСерий.Добавить(ТекСерия);
			
		КонецЦикла; // ДанныеСерийВрем
		
		ДанныеДиаграммы.Вставить("Серии",ДанныеСерий);
		
		ДанныеДиаграмм.Вставить(СтрокаДиаграмма.КонтейнерИД+"_"+СтрокаДиаграмма.Имя, ДанныеДиаграммы);
		
	КонецЦикла; // По диаграммам
	
	// Данные таблиц
	ДанныеТаблиц = Новый Структура;
	Для Каждого СтрокаТаблицы ИЗ Объект.НастройкаПрезентации.ТаблицыПрезентации Цикл
		
		ТабВрем = ДанныеИсточников[СтрокаТаблицы.ИсточникДанных];
		
		МодельТаблицы = Новый Массив;
		
		Если ТипЗнч(ТабВрем) = Тип("ТаблицаЗначений") Тогда
			
			СтрКолонки = Новый Структура;
			Для Каждого Колонка ИЗ ТабВрем.Колонки Цикл
				
				СтрКолонки.Вставить(Колонка.Имя);
				
			КонецЦикла;	  
			
			Для каждого СтрокаВрем ИЗ ТабВрем Цикл
				
				МодельСтроки = Новый Структура;
				Для Каждого КиЗ ИЗ СтрКолонки Цикл
					
					МодельСтроки.Вставить(КиЗ.Ключ, СтрокаВрем[КиЗ.Ключ]);
					
				КонецЦикла;	  
				
				МодельТаблицы.Добавить(МодельСтроки);
				
			КонецЦикла;	  
			
		КонецЕсли;	 
		
		// КлючТаблицы = СтрокаТаблицы.КонтейнерИД+?(ПустаяСтрока(СтрокаТаблицы.Имя,"","_"+СтрокаТаблицы.Имя);
		Ключ = КлючТаблицы(СтрокаТаблицы.КонтейнерИД, СтрокаТаблицы.Имя);
		ДанныеТаблиц.Вставить(Ключ, МодельТаблицы);
		
	КонецЦикла;	
	
	// Заполнение параметров презентации
	ДанныеЗаполнения = Новый Структура;
	ПараметрыПрезентации = Новый Соответствие;
	Для каждого СтрокаТаблицы Из Объект.НастройкаПрезентации.ПараметрыПрезентации Цикл
		
		ТекЗначение = СтрокаТаблицы.Значение;
		
		// Извлечение значения параметра из данных источников.
		ТабВрем = ДанныеИсточников[СтрокаТаблицы.ИсточникДанных];
		Если ТипЗнч(ТабВрем) = Тип("ТаблицаЗначений") Тогда
			
			ТабВрем.Свернуть(,СтрокаТаблицы.ИмяРесурса);
			
			Если ТабВрем.Количество() > 0  Тогда
				
				СтрокаДанные = ТабВрем[0];
				
				ТекЗначение = СтрокаДанные[СтрокаТаблицы.ИмяРесурса];
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Форматирование значения
		Если ЗначениеЗаполнено(СтрокаТаблицы.Формат) Тогда
			
			ТекЗначение = Формат(ТекЗначение, СтрокаТаблицы.Формат);
			
		КонецЕсли; 
		
		// Установка значения
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КонтейнерИД) Тогда
			
			ПараметрыПрезентации.Вставить(СтрокаТаблицы.Имя, ТекЗначение);
			
		Иначе	
			
			ПараметрыПрезентации.Вставить(СтрокаТаблицы.Имя+"_"+СтрокаТаблицы.КонтейнерИД, ТекЗначение);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ДанныеЗаполнения.Вставить("ПараметрыПрезентации", ПараметрыПрезентации); 
	ДанныеЗаполнения.Вставить("ДанныеДиаграмм", ДанныеДиаграмм);
	ДанныеЗаполнения.Вставить("ДанныеТаблиц", ДанныеТаблиц);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючТаблицы(ИдСлайда, ИмяТаблицы)
	
	Ключ = "Таблица_"+ИдСлайда+?(ПустаяСтрока(ИмяТаблицы),"","_"+ИмяТаблицы);
	
	Возврат Ключ;
	
КонецФункции // КлючТаблицы	

// Процедура устанавливает заголовок формы.
// 
&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = фКэшЗначений.ЗаголовокФормы+" ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтаФорма.Заголовок = фКэшЗначений.ЗаголовокФормы;
		
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура устанавливает заголовок формы.
// 
&НаСервере
Процедура УстановитьЗаголовокФормыСервер()
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = фКэшЗначений.ЗаголовокФормы+" ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтаФорма.Заголовок = фКэшЗначений.ЗаголовокФормы;
		
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("МассивВыбораДляОтборов", бит_МеханизмПолученияДанных.СформироватьСписокВыбораДляОтборовВОтчете("Массив"));
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_мпд_ПрезентацияОтчетности");
	фКэшЗначений.Вставить("ЗаголовокФормы",  НСтр("ru = 'Презентации отчетности'"));
	
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Функция ПодготовитьДанныеСерии(ТаблицаДанные, Точки, СтрокаСерии, ПолеСерии = Неопределено)
	
	ТабВрем = Новый ТаблицаЗначений;
	ТабВрем.Колонки.Добавить("Поле");
	ТабВрем.Колонки.Добавить("Ресурс");
	
	Для каждого СтрокаРезультат Из ТаблицаДанные Цикл
		
		НоваяСтрока = ТабВрем.Добавить();
		НоваяСтрока.Поле = СтрокаРезультат[СтрокаСерии.ИмяПоляТочки]; 
		НоваяСтрока.Ресурс = СтрокаРезультат[СтрокаСерии.ИмяРесурса];
		
	КонецЦикла; 
	
	ТабВрем.Свернуть("Поле","Ресурс");
	
	Для каждого СтрокаВрем Из ТабВрем Цикл
		
		Если Точки.НайтиПоЗначению(СтрокаВрем.Поле) = Неопределено Тогда
			
			Точки.Добавить(СтрокаВрем.Поле);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТекСерия = Новый Структура;
	Если ЗначениеЗаполнено(ПолеСерии) Тогда
		ТекСерия.Вставить("Имя","Серия_"+Строка(ПолеСерии));
		ТекСерия.Вставить("Заголовок",Строка(ПолеСерии));
	Иначе	
		ТекСерия.Вставить("Имя","Серия_"+СтрокаСерии.НомерСтроки);
		ТекСерия.Вставить("Заголовок",СтрокаСерии.Заголовок);
	КонецЕсли; 
	ТекСерия.Вставить("Данные", ТабВрем);
	
	Возврат ТекСерия;
	
КонецФункции // ПодготовитьДанныеСерии()

// Процедура заполняет таблицу отборов.
// 
&НаСервере
Процедура ЗаполнитьТаблицуОтборов()
	
	ТаблицаОтборов = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	Источники = Справочники.бит_мпд_НастройкиПрезентацийОтчетности.ПолучитьМассивИсточников(Объект.НастройкаПрезентации);
	бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(Источники, ТаблицаОтборов);
	ЗначениеВДанныеФормы(ТаблицаОтборов, ОтборВОтчете);
	
КонецПроцедуры // ЗаполнитьТаблицуОтборов()

// Процедура - действие команды "СохранитьНастройки".
// 
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	СохранитьНастройки();
	
КонецПроцедуры

// Процедура - действие команды "ВосстановитьНастройки".
// 
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ВосстановитьНастройки();
	
КонецПроцедуры

// Процедура открывает форму сохранения настроек.
// 
&НаКлиенте
Процедура СохранитьНастройки()
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки",СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки", ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("СохранениеНастроекЗавершение",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // СохранитьНастройки()

// Процедура - обработчик оповещения о закрытии формы сохранения настроек. 
// 
&НаКлиенте
Процедура СохранениеНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ТекущаяНастройка = Результат;
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры // СохранениеНастроекЗавершение()

// Процедура открывает форму восстановления настроек.
// 
&НаКлиенте
Процедура ВосстановитьНастройки()
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки",ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроекЗавершение",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ВосстановитьНастройки()

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ТекущаяНастройка = Результат;
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроекЗавершение

// Функция создает структуру, хранящую настройки панели индикаторов.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НастройкаПрезентации"    ,Объект.НастройкаПрезентации);
	СтруктураНастроек.Вставить("СтандартныйПериод"       ,Объект.СтандартныйПериод);
	СтруктураНастроек.Вставить("ИмяКаталога"             ,Объект.ИмяКаталога);
	СтруктураНастроек.Вставить("НастройкаПулаПодключений",Объект.НастройкаПулаПодключений);
	
	
	ИменаРеквизитов = Новый Массив;
	РеквизитыТаблицы = ПолучитьРеквизиты("ОтборВОтчете");
	
	Для каждого реквизит Из РеквизитыТаблицы Цикл
		
		ИменаРеквизитов.Добавить(реквизит.Имя);
		
	КонецЦикла;
	
	МодельОтборВОтчете = бит_ОбщегоНазначенияКлиентСервер.УпаковатьДанныеФормыКоллекция(ОтборВОтчете,ИменаРеквизитов);
	СтруктураНастроек.Вставить("ОтборВОтчете"     ,МодельОтборВОтчете);
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройку к панели индикаторов.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			Объект.ИмяКаталога = СтруктураНастроек.ИмяКаталога;
			Объект.НастройкаПрезентации = СтруктураНастроек.НастройкаПрезентации;
			Объект.НастройкаПулаПодключений = СтруктураНастроек.НастройкаПулаПодключений;
			
			Объект.СтандартныйПериод = СтруктураНастроек.СтандартныйПериод;
			
			ОтборВОтчете.Очистить();
			Если ТипЗнч(СтруктураНастроек.ОтборВОтчете) = Тип("ТаблицаЗначений") 
				ИЛИ ТипЗнч(СтруктураНастроек.ОтборВОтчете) = Тип("Массив") Тогда
				
				Для каждого СтрокаТаблицы Из СтруктураНастроек.ОтборВОтчете Цикл
					
					НоваяСтрока = ОтборВОтчете.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					
				КонецЦикла;
				
			Иначе	
				
				ЗаполнитьТаблицуОтборов();
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; // Настройка выбрана
	
	УстановитьЗаголовокФормыСервер();	
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура устанавливает вариант и настройку панели. Если найдены значения по-умолчанию, 
// то устанавливаются они, иначе устанавливаются последние использованные.
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	// Получим настройку по умолчанию
	ТекущаяНастройка = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	ПрименитьНастройки(ТекущаяНастройка);
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()


#КонецОбласти
