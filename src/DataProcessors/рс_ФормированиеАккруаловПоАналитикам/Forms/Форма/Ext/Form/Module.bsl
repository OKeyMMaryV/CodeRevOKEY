
&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.База.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьВопросЗавершение", ЭтотОбъект), "Список документов будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.База.Очистить();
    Иначе
        Возврат;
    КонецЕсли;
    
    ЗаполнитьСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Объект.ФлагОбъект 				= Истина;
	Объект.ФлагСтатья 				= Истина;
	Объект.ФлагФункция				= Истина;
	Объект.ФлагКонтрагент 			= Истина;
	Объект.ФлагДоговорКонтрагента 	= Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДвиженияПоДокументам_OLD(ТекущиеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_Дополнительный_2ДвиженияССубконто.Период КАК Период,
	|	бит_Дополнительный_2ДвиженияССубконто.Регистратор КАК Регистратор,
	|	бит_Дополнительный_2ДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	бит_Дополнительный_2ДвиженияССубконто.Активность,
	|	бит_Дополнительный_2ДвиженияССубконто.СчетДт,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт1,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт1,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт2,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт2,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт3,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт3,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт4,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт4,
	|	бит_Дополнительный_2ДвиженияССубконто.СчетКт,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт1,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт1,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт2,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт2,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт3,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт3,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт4,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт4,
	|	бит_Дополнительный_2ДвиженияССубконто.Организация,
	|	бит_Дополнительный_2ДвиженияССубконто.ВалютаДт,
	|	бит_Дополнительный_2ДвиженияССубконто.ВалютаКт,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидДвиженияМСФО,
	|	бит_Дополнительный_2ДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	бит_Дополнительный_2ДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	бит_Дополнительный_2ДвиженияССубконто.КоличествоДт,
	|	бит_Дополнительный_2ДвиженияССубконто.КоличествоКт,
	|	бит_Дополнительный_2ДвиженияССубконто.СуммаРегл КАК СуммаРегл,
	|	бит_Дополнительный_2ДвиженияССубконто.СуммаУпр КАК СуммаУпр,
	|	бит_Дополнительный_2ДвиженияССубконто.СуммаМУ КАК СуммаМУ,
	|	бит_Дополнительный_2ДвиженияССубконто.Содержание,
	|	бит_Дополнительный_2ДвиженияССубконто.НомерЖурнала,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидПроводки,
	|	бит_Дополнительный_2ДвиженияССубконто.ДатаФормирования
	|ПОМЕСТИТЬ ДвижениюПоФильтру
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(&ДатаНач, &ДатаКон, &Условие1, , ) КАК бит_Дополнительный_2ДвиженияССубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвижениюПоФильтру.Период КАК Период,
	|	ДвижениюПоФильтру.Регистратор КАК Регистратор,
	|	ДвижениюПоФильтру.НомерСтроки КАК НомерСтроки,
	|	ДвижениюПоФильтру.Активность,
	|	ДвижениюПоФильтру.СчетДт,
	|	ДвижениюПоФильтру.СубконтоДт1,
	|	ДвижениюПоФильтру.ВидСубконтоДт1,
	|	ДвижениюПоФильтру.СубконтоДт2,
	|	ДвижениюПоФильтру.ВидСубконтоДт2,
	|	ДвижениюПоФильтру.СубконтоДт3,
	|	ДвижениюПоФильтру.ВидСубконтоДт3,
	|	ДвижениюПоФильтру.СубконтоДт4,
	|	ДвижениюПоФильтру.ВидСубконтоДт4,
	|	ДвижениюПоФильтру.СчетКт,
	|	ДвижениюПоФильтру.СубконтоКт1,
	|	ДвижениюПоФильтру.ВидСубконтоКт1,
	|	ДвижениюПоФильтру.СубконтоКт2,
	|	ДвижениюПоФильтру.ВидСубконтоКт2,
	|	ДвижениюПоФильтру.СубконтоКт3,
	|	ДвижениюПоФильтру.ВидСубконтоКт3,
	|	ДвижениюПоФильтру.СубконтоКт4,
	|	ДвижениюПоФильтру.ВидСубконтоКт4,
	|	ДвижениюПоФильтру.Организация,
	|	ДвижениюПоФильтру.ВалютаДт,
	|	ДвижениюПоФильтру.ВалютаКт,
	|	ДвижениюПоФильтру.ВидДвиженияМСФО,
	|	ДвижениюПоФильтру.ВалютнаяСуммаДт,
	|	ДвижениюПоФильтру.ВалютнаяСуммаКт,
	|	ДвижениюПоФильтру.КоличествоДт,
	|	ДвижениюПоФильтру.КоличествоКт,
	|	ДвижениюПоФильтру.СуммаРегл,
	|	ДвижениюПоФильтру.СуммаУпр,
	|	ДвижениюПоФильтру.СуммаМУ,
	|	ДвижениюПоФильтру.Содержание,
	|	ДвижениюПоФильтру.НомерЖурнала,
	|	ДвижениюПоФильтру.ВидПроводки,
	|	ДвижениюПоФильтру.ДатаФормирования
	|ИЗ
	|	ДвижениюПоФильтру КАК ДвижениюПоФильтру
	|ГДЕ
	|	&Условие2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор,
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(ТекущиеДанные.Период));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(ТекущиеДанные.Период));
	
	МассивУсловия = Новый Массив;
	
	Если Объект.ФлагДоговорКонтрагента Тогда
		МассивУсловия.Добавить(ТекущиеДанные.ДоговорКонтрагента);
	ИначеЕсли Объект.ФлагКонтрагент Тогда
		МассивУсловия.Добавить(ТекущиеДанные.Контрагент);
	КонецЕсли;
	
	Если Объект.ФлагФункция Тогда
		МассивУсловия.Добавить(ТекущиеДанные.ДокументОснование.База.ВыгрузитьКолонку("ФункцияЦФО"));
	КонецЕсли;
	
	Если Объект.ФлагОбъект Тогда
		МассивУсловия.Добавить(ТекущиеДанные.ДокументОснование.База.ВыгрузитьКолонку("Объект"));
	КонецЕсли;
		
	Если МассивУсловия.Количество() = 0 Тогда
		НаборЗаписейбит_Дополнительный_2.Очистить();
		Возврат;
	КонецЕсли;
	
	// установим первое условие в первой запросе
	ТекстУсловие1 	= "Организация = &Организация И (Субконто1 = &Субконто0)";
	
	// Rarus-spb byse 2012.12.21 {
	Если Объект.ФлагСтатья Тогда
		ТекстУсловие1 = ТекстУсловие1 + " И (СчетДТ В (&Счет) Или СчетКТ В (&Счет)) ";
		З = Новый Запрос;
		//1c-izhtc spawn (
		//З.Текст = "Выбрать Различные Счет Из РегистрСведений.рс_СоответствиеСтатейОборотовСчетовМСФО Где СтатьяОборотов В (&СтатьяОборотов)";
		З.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		          |	ЛеваяАналитика_1 КАК Счет
		          |ИЗ
		          |	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
		          |ГДЕ
				  |	ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СчетМСФО_СтатьяОборотов)
				  |	И ПраваяАналитика_1 В(&СтатьяОборотов)";
		//1c-izhtc spawn )
		З.УстановитьПараметр("СтатьяОборотов",ТекущиеДанные.ДокументОснование.База.ВыгрузитьКолонку("СтатьяОборотов"));
		В = З.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		Запрос.УстановитьПараметр("Счет",В);
	КонецЕсли;
	// Rarus-spb byse 2012.12.21 }
	
	Запрос.УстановитьПараметр("Субконто0", МассивУсловия[0]);
	
	МассивУсловия.Удалить(0);
	
	Если МассивУсловия.Количество() = 0 Тогда
		ТекстУсловие2 	= "ИСТИНА";
	Иначе
		
		//ШаблонУсловие = "(ДвижениюПоФильтру.СубконтоДт1 = &СубконтоN ИЛИ ДвижениюПоФильтру.СубконтоДт2 = &СубконтоN ИЛИ ДвижениюПоФильтру.СубконтоДт3 = &СубконтоN ИЛИ ДвижениюПоФильтру.СубконтоДт4 = &СубконтоN
		//			 |ИЛИ ДвижениюПоФильтру.СубконтоКт1 = &СубконтоN ИЛИ ДвижениюПоФильтру.СубконтоКт2 = &СубконтоN ИЛИ ДвижениюПоФильтру.СубконтоКт3 = &СубконтоN ИЛИ ДвижениюПоФильтру.СубконтоКт4 = &СубконтоN)";
		ШаблонУсловие = "(ДвижениюПоФильтру.СубконтоДт1 В (&СубконтоN) ИЛИ ДвижениюПоФильтру.СубконтоДт2 В (&СубконтоN) ИЛИ ДвижениюПоФильтру.СубконтоДт3 В (&СубконтоN) ИЛИ ДвижениюПоФильтру.СубконтоДт4 В (&СубконтоN)
					 |ИЛИ ДвижениюПоФильтру.СубконтоКт1 В (&СубконтоN) ИЛИ ДвижениюПоФильтру.СубконтоКт2 В (&СубконтоN) ИЛИ ДвижениюПоФильтру.СубконтоКт3 В (&СубконтоN) ИЛИ ДвижениюПоФильтру.СубконтоКт4 В (&СубконтоN))";

		ТекстУсловие2 	= "";
					
		Для Ном = 1 По МассивУсловия.Количество() Цикл
			
			ТекстУсловие2 = ТекстУсловие2 + ?(Ном <> 1, " И ", "") + СтрЗаменить(ШаблонУсловие, "N", Ном);
			Запрос.УстановитьПараметр("Субконто" + Ном, МассивУсловия[Ном - 1]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", ТекстУсловие1);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", ТекстУсловие2);
	
	ТаблицаЗапрос = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейбит_Дополнительный_2.Загрузить(ТаблицаЗапрос);
	
КонецПроцедуры

&НаКлиенте
Процедура БазаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Заявка = Элемент.ТекущиеДанные.ДокументОснование;
	Если Заявка <> ТекДок Тогда
		НужноОбновлятьДвижения = Истина;
		ТекДок = Заявка;
		ОбновитьДвижения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДвижения()
	
	Если Не НужноОбновлятьДвижения Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.База.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура("Период, СтатьяОборотов, Объект, ФункцияЦФО, Контрагент, ДоговорКонтрагента, ДокументОснование");
	ЗаполнитьЗначенияСвойств(СтруктураДанные, Элементы.База.ТекущиеДанные);
	
	ЗагрузитьДвиженияПоДокументам(СтруктураДанные);	
	
	НужноОбновлятьДвижения = ЛОЖЬ;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеоформление()
	
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы[0];
	ЭлементУсловногоОформления.Отбор.Элементы[0].ПравоеЗначение = ОтборАккруалПоID;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьАккруалы(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНач) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаКон) Тогда
		ПоказатьПредупреждение(Неопределено, "Не указан период!");
		Возврат;
	КонецЕсли;
	
	МассивСуществующиеАккруалы = Новый Массив;
	
	Для Каждого СтрокаТЧ Из Объект.База Цикл
		
		Если НЕ СтрокаТЧ.Отбор Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.АккруалПоID) ИЛИ ТипЗнч(СтрокаТЧ.АккруалПоID) = Тип("Строка") Тогда
		Иначе
			МассивСуществующиеАккруалы.Добавить(СтрокаТЧ.АккруалПоID);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСуществующиеАккруалы.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьАккруалыВопросЗавершение", ЭтотОбъект), "По выбранным позициям уже существуют созданные аккруалы, они будут перепроведены. Продолжить?", РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СформироватьАккруалыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьАккруалыВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    СформироватьАккруалыСервер();

КонецПроцедуры

&НаКлиенте
Процедура БазаОтборПриИзменении(Элемент)
	
	Если Элемент.Родитель.ТекущиеДанные.Отбор = Истина Тогда
		Элемент.Родитель.ТекущиеДанные.СуммаАккруала = Элемент.Родитель.ТекущиеДанные.Сумма;
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.База Цикл
		СтрокаТЧ.Отбор = Истина;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсе(Команда)

	Для Каждого СтрокаТЧ Из Объект.База Цикл
		СтрокаТЧ.Отбор = Ложь;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НаборЗаписейбит_Дополнительный_2Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Регистратор);
	
КонецПроцедуры

// Rarus-spb byse {
&НаСервере
Процедура ЗаполнитьСервер()
	мОбъект = РеквизитФормыВЗначение("Объект");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	рс_ЗаявкаНаДоговор.Ссылка КАК ДокументОснование,
	|	рс_ЗаявкаНаДоговор.Контрагент,
	|	рс_ЗаявкаНаДоговор.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы1.СтатьяОборотов) = 1
	|			ТОГДА МАКСИМУМ(Документы1.СтатьяОборотов)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СтатьяОборотов,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы1.Объект) = 1
	|			ТОГДА МАКСИМУМ(Документы1.Объект)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Объект,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы1.ФункцияЦФО) = 1
	|			ТОГДА МАКСИМУМ(Документы1.ФункцияЦФО)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ФункцияЦФО,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы1.Период) = 1
	|			ТОГДА МАКСИМУМ(Документы1.Период)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Период,
	|	рс_ЗаявкаНаДоговор.СуммаБезНДС КАК Сумма,
	|	рс_АккруалПоID.Ссылка КАК АккруалПоID,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы1.СтатьяОборотов) КАК СтатьяОборотовКоличество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы1.Объект) КАК ОбъектКоличество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы1.ФункцияЦФО) КАК ФункцияЦФОКоличество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы1.Период) КАК ПериодКоличество
	|ИЗ
	|	Документ.рс_ЗаявкаНаДоговор КАК рс_ЗаявкаНаДоговор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.рс_ЗаявкаНаДоговор.База КАК Документы1
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.рс_АккруалПоID КАК рс_АккруалПоID
	|			ПО (рс_АккруалПоID.ДокументОснование = Документы1.Ссылка)
	|				И (НЕ рс_АккруалПоID.ПометкаУдаления)
	|		ПО (Документы1.Ссылка = рс_ЗаявкаНаДоговор.Ссылка)
	|ГДЕ
	|	рс_ЗаявкаНаДоговор.Организация = &Организация
	|	И рс_ЗаявкаНаДоговор.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ рс_ЗаявкаНаДоговор.ПометкаУдаления
	|	И рс_ЗаявкаНаДоговор.Проведен
	|	И &Условие1
	|	И &Условие2
	|	И &Условие3
	|	И &Условие4
	|	И &Условие5
	|
	|СГРУППИРОВАТЬ ПО
	|	рс_АккруалПоID.Ссылка,
	|	рс_ЗаявкаНаДоговор.Ссылка,
	|	рс_ЗаявкаНаДоговор.Контрагент,
	|	рс_ЗаявкаНаДоговор.ДоговорКонтрагента,
	|	рс_ЗаявкаНаДоговор.СуммаБезНДС";
	
	Запрос.УстановитьПараметр("ДатаНач", Объект.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", Объект.ДатаКон);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	// Если нужно, чтобы условия выполнялись ОДНОВРЕМЕННО, тогда нужно накладывать на таблицу "Документ1"
	// Иначе - на таблицу "Рс_ЗаявкаНаДоговор.База"
	
	Если ЗначениеЗаполнено(Объект.СтатьяОборотов) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "Рс_ЗаявкаНаДоговор.База.СтатьяОборотов = &СтатьяОборотов");
		Запрос.УстановитьПараметр("СтатьяОборотов", Объект.СтатьяОборотов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФункцияЦФО) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", "Рс_ЗаявкаНаДоговор.База.ФункцияЦФО = &ФункцияЦФО");
		Запрос.УстановитьПараметр("ФункцияЦФО", Объект.ФункцияЦФО);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Объект) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие3", "Рс_ЗаявкаНаДоговор.База.Объект = &Объект");
		Запрос.УстановитьПараметр("Объект", Объект.Объект);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие3", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие4", "Рс_ЗаявкаНаДоговор.Контрагент = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие4", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие5", "Рс_ЗаявкаНаДоговор.ДоговорКонтрагента = &ДоговорКонтрагента");
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие5", "ИСТИНА");
	КонецЕсли;
	
	мОбъект.База.Загрузить(Запрос.Выполнить().Выгрузить());
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДвиженияПоДокументам(ТекущиеДанные)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_Дополнительный_2ДвиженияССубконто.Период КАК Период,
	|	бит_Дополнительный_2ДвиженияССубконто.Регистратор КАК Регистратор,
	|	бит_Дополнительный_2ДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	бит_Дополнительный_2ДвиженияССубконто.Активность,
	|	бит_Дополнительный_2ДвиженияССубконто.СчетДт,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт1,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт1,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт2,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт2,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт3,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт3,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт4,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт4,
	|	бит_Дополнительный_2ДвиженияССубконто.СчетКт,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт1,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт1,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт2,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт2,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт3,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт3,
	|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт4,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт4,
	|	бит_Дополнительный_2ДвиженияССубконто.Организация,
	|	бит_Дополнительный_2ДвиженияССубконто.ВалютаДт,
	|	бит_Дополнительный_2ДвиженияССубконто.ВалютаКт,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидДвиженияМСФО,
	|	бит_Дополнительный_2ДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	бит_Дополнительный_2ДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	бит_Дополнительный_2ДвиженияССубконто.КоличествоДт,
	|	бит_Дополнительный_2ДвиженияССубконто.КоличествоКт,
	|	бит_Дополнительный_2ДвиженияССубконто.СуммаРегл КАК СуммаРегл,
	|	бит_Дополнительный_2ДвиженияССубконто.СуммаУпр КАК СуммаУпр,
	|	бит_Дополнительный_2ДвиженияССубконто.СуммаМУ КАК СуммаМУ,
	|	бит_Дополнительный_2ДвиженияССубконто.Содержание,
	|	бит_Дополнительный_2ДвиженияССубконто.НомерЖурнала,
	|	бит_Дополнительный_2ДвиженияССубконто.ВидПроводки,
	|	бит_Дополнительный_2ДвиженияССубконто.ДатаФормирования
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(&ДатаНач, &ДатаКон, &Условие1, , ) КАК бит_Дополнительный_2ДвиженияССубконто
	|ГДЕ
	|	&Условие2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	мПериоды = ТекущиеДанные.ДокументОснование.База.ВыгрузитьКолонку("Период");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(мПериоды);
	мСписокПериодов = Новый СписокЗначений;
	мСписокПериодов.ЗагрузитьЗначения(мПериоды);
	мСписокПериодов.СортироватьПоЗначению();	
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(мСписокПериодов[0].Значение));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(мСписокПериодов[мСписокПериодов.Количество() - 1].Значение));
	
	СоответствиеУсловий = Новый Соответствие;
	мПлан               = ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	
	Если Объект.ФлагДоговорКонтрагента Тогда
		СоответствиеУсловий.Вставить(мПлан.ДоговорыКонтрагентов,ТекущиеДанные.ДоговорКонтрагента);
	ИначеЕсли Объект.ФлагКонтрагент Тогда
		СоответствиеУсловий.Вставить(мПлан.Контрагенты,ТекущиеДанные.Контрагент);
	КонецЕсли;
	
	Если Объект.ФлагФункция Тогда
		СоответствиеУсловий.Вставить(мПлан.Функции,ТекущиеДанные.ДокументОснование.База.ВыгрузитьКолонку("ФункцияЦФО"));
	КонецЕсли;
	
	Если Объект.ФлагОбъект Тогда
		СоответствиеУсловий.Вставить(мПлан.Объект,ТекущиеДанные.ДокументОснование.База.ВыгрузитьКолонку("Объект"));
	КонецЕсли;
		
	Если СоответствиеУсловий.Количество() = 0 Тогда
		НаборЗаписейбит_Дополнительный_2.Очистить();
		Возврат;
	КонецЕсли;
	
	// установим первое условие в первой запросе
	ТекстУсловие1 	= "Организация = &Организация ";
	
	Если Объект.ФлагСтатья Тогда
		ТекстУсловие1 = ТекстУсловие1 + " И (СчетДТ В (&Счет) Или СчетКТ В (&Счет)) ";
		З             = Новый Запрос;
		//1c-izhtc spawn (
		//З.Текст       = "Выбрать Различные Счет Из РегистрСведений.рс_СоответствиеСтатейОборотовСчетовМСФО Где СтатьяОборотов В (&СтатьяОборотов)";
		З.Текст 	  = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			          |	ЛеваяАналитика_1 КАК Счет
			          |ИЗ
			          |	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
			          |ГДЕ
					  |	ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СчетМСФО_СтатьяОборотов)
					  |	И ПраваяАналитика_1 В(&СтатьяОборотов)";
		//1c-izhtc spawn )
		З.УстановитьПараметр("СтатьяОборотов",ТекущиеДанные.ДокументОснование.База.ВыгрузитьКолонку("СтатьяОборотов"));
		В             = З.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		Запрос.УстановитьПараметр("Счет",В);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", ТекстУсловие1);
		
	// Нужно наложить все условия на субконто
	ТекстУсловие2 = "";
	СчетчикУсловий = 0;
	МассивДТКТ     = Новый Массив;
	МассивДТКТ.Добавить("ДТ");
	МассивДТКТ.Добавить("КТ");
	Для Каждого Эл Из СоответствиеУсловий Цикл
		СчетчикУсловий    = СчетчикУсловий + 1;
		ТекстУсловие2Подч = "";
		Для Каждого ВидДВ Из МассивДТКТ Цикл
			Для НомерСубконто = 1 По 4 Цикл
				ТекстУсловие2Подч = ТекстУсловие2Подч + ?(ПустаяСтрока(ТекстУсловие2Подч),""," ИЛИ ") + "("
				" ВидСубконто" + ВидДВ + НомерСубконто + " = &УсловиеСубконто" + СчетчикУсловий + " И "
				" Субконто" + ВидДВ + НомерСубконто + " В (&УсловиеЗначение" + СчетчикУсловий + ") "
				+ ")";
			КонецЦикла;	
		КонецЦикла;
		ТекстУсловие2 = ТекстУсловие2 + ?(ПустаяСтрока(ТекстУсловие2),""," 
		| И ") + "(" + ТекстУсловие2Подч + ")";
		Запрос.УстановитьПараметр("УсловиеСубконто" + СчетчикУсловий,Эл.Ключ);
		Запрос.УстановитьПараметр("УсловиеЗначение" + СчетчикУсловий,Эл.Значение);
	КонецЦикла;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", ТекстУсловие2);
				  
	НаборЗаписейбит_Дополнительный_2.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура СформироватьАккруалыСервер ()
	мОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого СтрокаТЧ Из мОбъект.База Цикл
		
		Если НЕ СтрокаТЧ.Отбор Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.АккруалПоID) ИЛИ ТипЗнч(СтрокаТЧ.АккруалПоID) = Тип("Строка") Тогда
			ДокументОбъект = Документы.рс_АккруалПоID.СоздатьДокумент();
			ДокументОбъект.Дата = КонецДня(Объект.ДатаКон);
		Иначе
			ДокументОбъект = СтрокаТЧ.АккруалПоID.ПолучитьОбъект();
		КонецЕсли;
		
		Документы.рс_АккруалПоID.ЗаполнениеПоОснованию(ДокументОбъект, СтрокаТЧ.ДокументОснование, СтрокаТЧ.СуммаАккруала);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			СтрокаТЧ.АккруалПоID = ДокументОбъект.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;
		
		СтрокаТЧ.Отбор = Ложь;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
КонецПроцедуры	

// КЛИЕНТСКИЕ ПРОЦЕДУРЫ //

&НаКлиенте
Процедура ФлагФункцияПриИзменении(Элемент)
	НужноОбновлятьДвижения = Истина;
	ОбновитьДвижения();
КонецПроцедуры

&НаКлиенте
Процедура ФлагОбъектПриИзменении(Элемент)
	НужноОбновлятьДвижения = Истина;
	ОбновитьДвижения();   
КонецПроцедуры

&НаКлиенте
Процедура ФлагСтатьяПриИзменении(Элемент)
	НужноОбновлятьДвижения = Истина;
	ОбновитьДвижения();
КонецПроцедуры

&НаКлиенте
Процедура ФлагКонтрагентПриИзменении(Элемент)
	НужноОбновлятьДвижения = Истина;
	ОбновитьДвижения();
КонецПроцедуры

&НаКлиенте
Процедура ФлагДоговорКонтрагентаПриИзменении(Элемент)
	НужноОбновлятьДвижения = Истина;
	ОбновитьДвижения();
КонецПроцедуры
// Rarus-spb byse }
