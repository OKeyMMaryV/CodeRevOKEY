#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция инициализирует компоновщик для получения записей 
// регистра сведений бит_ОчередьТрансляции для последующей обработки.
// 
// Параметры:
//  Компоновщик              - КомпоновщикНастроекСхемыКомпоновкиДанных.
//  УникальныйИдентификатор  - УникальныйИдентификатор.
// 
// Возвращаемое значение:
//   АдресСхемыКомпоновкиДанных   - Строка.
// 
Функция ИнициализироватьКомпоновщик(Компоновщик,УникальныйИдентификатор) Экспорт

	СхемаКомпоновкиДанных = Обработки.бит_ОбработкаЗаписейРегистраОчередьТрансляции.ПолучитьМакет("СхемаКомпоновкиДанных");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
    Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции // ИнициализироватьКомпоновщик()

// Функция выполняет запрос по настройке компновщика.
// 
// Параметры:
//  Компоновщик  - КомпоновщикНастроекКомпоновкиДанных.
//  АдресСхемыКомпоновкиДанных  - Строка.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ВыполнитьЗапросПоНастройке(Компоновщик,АдресСхемыКомпоновкиДанных)  Экспорт

	 СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);

	// Выполняем компановку макета МакетСКД
	// (настройки берутся из схемы компановки данных и из пользовательских настроек).
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки());
	
	// Получаем запрос макета компановки данных
	Запрос = Новый Запрос(МакетСКД.НаборыДанных.ОчередьТрансляции.Запрос);
	
	// Устанавливаем параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;

	Результат = Запрос.Выполнить();

	Возврат Результат;
	
КонецФункции // ВыполнитьЗапросПоНастройке()

// Процедура устанавливает отбор компоновщика по статусу в зависимости от вида операции.
// 
// Параметры:                                                  
//  Компоновщик  - КомпоновщикНастроекКомпоновкиДанных.
//  ВидОперации  - ПеречислениеСсылка.бит_ВидыОперацийОбработкиОчередиТрансляции.
// 
Процедура УстановитьОтборыКомпоновщика(Компоновщик,ВидОперации) Экспорт

    Для каждого ЭлементОтбора Из Компоновщик.Настройки.Отбор.Элементы Цикл
	
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Статус" Тогда
			
			// Установим отбор по статусу в зависимости от вида операции.
			ЭлементОтбора.Использование = Истина;
			Если ВидОперации = Перечисления.бит_ВидыОперацийОбработкиОчередиТрансляции.УдалитьОбработанныеЗаписи Тогда
				
				ЭлементОтбора.ПравоеЗначение   = Перечисления.бит_СтатусыВыполненияОтложеннойТрансляции.Выполнено;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
				
			ИначеЕсли ВидОперации = Перечисления.бит_ВидыОперацийОбработкиОчередиТрансляции.ИзменитьСтатус Тогда
				
				ЭлементОтбора.ПравоеЗначение   = Перечисления.бит_СтатусыВыполненияОтложеннойТрансляции.Ошибка;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;				
				
			КонецЕсли; 
			
			// Синхронизируем элемент пользовательских настроек с настройкой отбора.
			ЭлементПН = бит_ОбщегоНазначенияКлиентСервер.НайтиЭлементПользовательскойНастройки(ЭлементОтбора.ИдентификаторПользовательскойНастройки
			                                                                                   ,Компоновщик);
			Если НЕ ЭлементПН = Неопределено Тогда
				
				ЭлементПН.ПравоеЗначение   = ЭлементОтбора.ПравоеЗначение;
				ЭлементПН.Использование    = ЭлементОтбора.Использование;
				ЭлементПН.РежимОтображения = ЭлементОтбора.РежимОтображения;
				
			КонецЕсли; 
			 
		КонецЕсли; // Отбор по статусу
	
	КонецЦикла; // По элементам отбора
	

КонецПроцедуры // УстановитьОтборыКомпоновщика()

// Процедура выполняет изменение статусов оповещений в регистре бит_ОчередьТрансляции.
// 
// Параметры:
// Параметры:
//  РезультатЗапроса  - РезультатЗапроса.
//  СтатусНовый       - ПеречислениеСсылка.бит_ВидыОперацийОбработкиОчередиТрансляции.
//  РежимСообщения    - Строка.
// 
Процедура ИзменитьСтатусОповещений(РезультатЗапроса = Неопределено,СтатусНовый,РежимСообщений = "Нет") Экспорт
	
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);	
	
	Если РезультатЗапроса = Неопределено Тогда
		
		РезультатЗапроса = ПолучитьДанныеДляОбработки(Перечисления.бит_ВидыОперацийОбработкиОчередиТрансляции.ИзменитьСтатус);
		
	КонецЕсли; 	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Ном = 1;
	КоличествоЗаписей = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
	
		МенеджерЗаписи = РегистрыСведений.бит_ОчередьТрансляции.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
		
		Попытка
			
			МенеджерЗаписи.Удалить();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
			МенеджерЗаписи.Статус = СтатусНовый;
			МенеджерЗаписи.Записать();
			
		Исключение
			
			Если РежимыВывода.ВыводитьОшибки Тогда
			
				ТекстСообщения = НСтр("ru = 'Не удалось изменить статус оповещния для объекта ""%1%""!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,МенеджерЗаписи.Объект);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли; 
			
		КонецПопытки; 
		
		Ном = Ном+1;
		Если Ном%10 = 0 Тогда
			
			 ТекстСостояния = НСтр("ru = 'Изменение статусов оповещений %1% из %2%'");
			 ТекстСостояния = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСостояния
			                                                                              ,Строка(Ном)
																						  ,Строка(КоличествоЗаписей));
			 бит_ОбщегоНазначения.бит_Состояние(ТекстСостояния);
			 
		КонецЕсли; 
	КонецЦикла; // По выборке
	
	Если РежимыВывода.ВыводитьИнформацию Тогда
		
		ТекстСообщения = НСтр("ru = 'Изменение статусов оповещений завершено.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 
	
	
КонецПроцедуры // ИзменитьСтатусОповещений() 

// Процедура удаляет обработанные записи регистра бит_ОчередьТрансляции.
// 
// Параметры:
//  РезультатЗапроса  - РезультатЗапроса.
//  РежимСообщений    - Строка.
// 
Процедура УдалитьОбработанныеЗаписи(РезультатЗапроса = Неопределено,РежимСообщений = "Нет") Экспорт
	
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);		
	
	Если РезультатЗапроса = Неопределено Тогда
		
		РезультатЗапроса = ПолучитьДанныеДляОбработки(Перечисления.бит_ВидыОперацийОбработкиОчередиТрансляции.УдалитьОбработанныеЗаписи);
		
	КонецЕсли; 
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для обработки!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Ном = 1;
	КоличествоЗаписей = Выборка.Количество();	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.бит_ОчередьТрансляции.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
		
		Попытка
			
			МенеджерЗаписи.Удалить();
			
		Исключение
			
			Если РежимыВывода.ВыводитьОшибки Тогда
			
				ТекстСообщения = НСтр("ru = 'Не удалось удалить запись очереди трансляции  для объекта ""%1%"" зарегистрированную ""%2%""!'");
				ТекстСообщения = ТекстСообщения+ОписаниеОшибки();
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																							,Строка(МенеджерЗаписи.Объект)
																							,Строка(МенеджерЗаписи.ПоставленоВОчередь));
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли; 
			
			
		КонецПопытки; 
		
		Ном = Ном+1;
		Если Ном%10 = 0 Тогда
			
			ТекстСостояния = НСтр("ru = 'Удаление обработанных записей %1% из %2%'");
			ТекстСостояния = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСостояния
																						,Строка(Ном)
																						,Строка(КоличествоЗаписей));
			бит_ОбщегоНазначения.бит_Состояние(ТекстСостояния);
			
		КонецЕсли; 
		
		
	КонецЦикла; 
	
	Если РежимыВывода.ВыводитьИнформацию Тогда
		
		ТекстСообщения = НСтр("ru = 'Удаление обработанных записей завершено.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 
	
	
КонецПроцедуры // УдалитьОбработанныеЗаписи()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает записи регистра бит_ОчередьТрансляции для дальнейшей обработки. 
// Используется при программном вызове действий с записями регистра.
// 
// Параметры:
//  ВидОперации  - ПеречислениеСсылка.бит_ВидыОперацийОбработкиОчередиТрансляции.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ПолучитьДанныеДляОбработки(ВидОперации)

 	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресСКД  = ИнициализироватьКомпоновщик(Компоновщик,Новый УникальныйИдентификатор);
	УстановитьОтборыКомпоновщика(Компоновщик,ВидОперации);
	Результат = ВыполнитьЗапросПоНастройке(Компоновщик,АдресСКД);
    УдалитьИзВременногоХранилища(АдресСКД);
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеДляОбработки()

#КонецОбласти

#КонецЕсли
