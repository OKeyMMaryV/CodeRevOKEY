
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Объект.Обрабатывать_Запросы                             = Истина;
	Объект.Обрабатывать_ПравилаЗаполненияПолейПриТрансляции = Истина;
	Объект.Обрабатывать_ПользовательскиеФункции             = Истина;
	Объект.СоздаватьРезервныеКопииОбъектов                  = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	Состояние("Выполняется поиск объектов, подлежащих конвертации...");
	ОбновитьОбъектыКонвертации();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	 Состояние("Выполняется конвертация...");	
	 УстранитьПроблемы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(Объект.ОбъектыКонвертации, "Выполнять", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(Объект.ОбъектыКонвертации, "Выполнять", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнвертировать(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(Объект.ОбъектыКонвертации, "Выполнять", 2);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет сообщение в протокол.
// 
// Параметры:
//  ТекстСообщения - Строка.
// 
&НаСервере
Процедура ДобавитьСообщение(ТекстСообщения)

	Протокол = Протокол+?(ПустаяСтрока(Протокол), "", Символы.ПС)+ТекстСообщения;

КонецПроцедуры // ДобавитьСообщение()

// Процедура создает группу для хранения резервных копий. 
// 
// Параметры:
//  ИмяСправочника - Строка.
// 
&НаСервере
Функция СоздатьНайтиГруппуРезервныеКопии(ИмяСправочника)

	 РезГруппа = Неопределено;
	 НаименованиеГруппы = "РезервныеКопии_Конвертация_3.0";
	
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
	 Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	Спр.Ссылка
	                |ИЗ
	                |	Справочник."+ИмяСправочника+" КАК Спр
	                |ГДЕ
	                |	Спр.ЭтоГруппа
	                |	И Спр.Наименование = &Наименование";
					
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		РезГруппа = Выборка.Ссылка;
	
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(РезГруппа) Тогда
	
		НовГруппа = Справочники[ИмяСправочника].СоздатьГруппу();
		НовГруппа.Наименование = НаименованиеГруппы;
		НовГруппа.УстановитьНовыйКод();
		
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(НовГруппа,"","Ошибки");
		
		Если флВыполнено Тогда
		
			РезГруппа = НовГруппа.Ссылка;
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат РезГруппа;
	
КонецФункции // СоздатьНайтиГруппуРезервныеКопии()

// Процедура создает резервную копию объекта.
// 
// Параметры:
//  ТекущийОбъект - СправочникСсылка.
//  ГруппаКопии - СправочникСсылка.
// 
&НаСервере
Функция СоздатьКопиюОбъекта(ТекущийОбъект, ГруппаКопии)
	
	МетаОбъект  = ТекущийОбъект.Метаданные();
	КопияОбъект = ТекущийОбъект.Скопировать();
	КопияОбъект.Родитель = ГруппаКопии;
	КопияОбъект.Наименование = "Копия "+ТекущийОбъект.Наименование;
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Комментарий", МетаОбъект) Тогда
		
		КопияОбъект.Комментарий  = "Скопировано "+ТекущаяДатаСеанса();
		
	КонецЕсли; 
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Описание", МетаОбъект) Тогда
		
		КопияОбъект.Описание  = "Скопировано "+ТекущаяДатаСеанса();
		
	КонецЕсли; 
	
	КопияОбъект.УстановитьНовыйКод();
	флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(КопияОбъект,"","Ошибки",Истина);
	
	Если флВыполнено Тогда
		КопияСсылка = КопияОбъект.Ссылка;
	Иначе	
		КопияСсылка = Неопределено;
	КонецЕсли; 
	
	Возврат КопияСсылка;
	
КонецФункции // СоздатьКопиюОбъекта()

// Функция проверяет необходимость замены имени номенклатура на Аналитика_5.
// 
// Параметры:
//  ИмяРегистра - Строка
// 
// Возвращаемое значение:
//  флЗаменятьНоменклатуру - Булево.
// 
&НаСервере
Функция ПроверитьНеобходимостьЗаменыНоменклатуры(ИмяРегистра)

	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("бит_му_ПартииМПЗСобственныхКонтрагентов");
	МассивИсключений.Добавить("бит_му_ПартииМПЗ");
	
	Если Найти(ИмяРегистра,"бит_") > 0 И МассивИсключений.Найти(ИмяРегистра) = Неопределено Тогда
	
		 флЗаменятьНоменклатуру = Истина;
		 
	Иначе	 
		
		 флЗаменятьНоменклатуру = Ложь;
		
	КонецЕсли; 
	
	Возврат флЗаменятьНоменклатуру;
	
КонецФункции // ПроверитьНеобходимостьЗаменыНоменклатуры()

// Процедура проверяет работоспособность запроса. 
// 
// Параметры:
//  ТекущаяСсылка - СправочникСсылка.бит_Запросы.
// 
&НаСервере
Функция ПроверитьЗапрос(ТекущаяСсылка)

	РезСтр = Новый Структура("ОК, ОписаниеОшибки",Ложь,"");
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	
	СтрОписаниеОшибки = "";
	
	Попытка
		
		ПостроительЗапроса.Текст = ТекущаяСсылка.ТекстЗапроса;
		РезСтр.ОК = Истина;
		
	Исключение
		
		РезСтр.ОК = Ложь; 
		РезСтр.ОписаниеОшибки = Строка(ОписаниеОшибки());
		
	КонецПопытки;

	Возврат РезСтр;
	
КонецФункции // ПроверитьЗапрос()

// Функция проверяет работоспособность правила заполнения полей при трансляции.
// 
// Параметры:
//  СтрПар - Структура
// 
// Возвращаемое значение:
//  РезСтр - Структура
// 
&НаСервере
Функция ПроверитьПравилоЗаполнения(СтрПар)

	РезСтр = Новый Структура("ОК,ОписаниеОшибки",Истина, "");
	ВидыРегистров = бит_МеханизмТрансляции.КонструкторСтруктурыВидыРегистров(Ложь,Ложь,Ложь,Ложь);
	
	// Создание набора записей источник
	Попытка
	
		Если СтрПар.Источник.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления Тогда
			
			НаборИсточник = РегистрыНакопления[СтрПар.Источник.ИмяОбъекта].СоздатьНаборЗаписей();
			МетаИсточник = Метаданные.РегистрыНакопления[СтрПар.Источник.ИмяОбъекта];
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ТабРегистра.Регистратор
			               |ИЗ
			               |	РегистрНакопления."+СтрПар.Источник.ИмяОбъекта+" КАК ТабРегистра
			               |ГДЕ
			               |	ТабРегистра.Активность";
						   
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
			
				НаборИсточник.Отбор.Регистратор.Установить(Выборка.Регистратор, Истина);
				НаборИсточник.Прочитать();
			
			КонецЕсли; 
			
			ВидыРегистров.ИсточникРегистрНакопления = Истина;
			
		Иначе	
			
			НаборИсточник = РегистрыБухгалтерии[СтрПар.Источник.ИмяОбъекта].СоздатьНаборЗаписей();
			МетаИсточник = Метаданные.РегистрыБухгалтерии[СтрПар.Источник.ИмяОбъекта];
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ТабРегистра.Регистратор
			               |ИЗ
			               |	РегистрБухгалтерии."+СтрПар.Источник.ИмяОбъекта+" КАК ТабРегистра
			               |ГДЕ
			               |	ТабРегистра.Активность";
						   
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
			
				НаборИсточник.Отбор.Регистратор.Установить(Выборка.Регистратор, Истина);
				НаборИсточник.Прочитать();
			
			КонецЕсли; 
			
			ВидыРегистров.ИсточникРегистрБухгалтерии = Истина;
			
		КонецЕсли; 
		
		РезСтр.ОК = Истина;
		
	Исключение
		
		РезСтр.ОК = Ложь;
		РезСтр.ОписаниеОшибки = Строка(ОписаниеОшибки());
		
	КонецПопытки;

	// Создание набора записей приемник
	Попытка
		
		Если СтрПар.Приемник.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления Тогда
			
			НаборПриемник = РегистрыНакопления[СтрПар.Приемник.ИмяОбъекта].СоздатьНаборЗаписей();
			МетаПриемник  = Метаданные.РегистрыНакопления[СтрПар.Приемник.ИмяОбъекта];
			
			ВидыРегистров.ПриемникРегистрНакопления = Истина;			
			
		Иначе	
			
			НаборПриемник = РегистрыБухгалтерии[СтрПар.Приемник.ИмяОбъекта].СоздатьНаборЗаписей();
			МетаПриемник  = Метаданные.РегистрыБухгалтерии[СтрПар.Приемник.ИмяОбъекта];
			
			ВидыРегистров.ПриемникРегистрБухгалтерии = Истина;
			
		КонецЕсли; 
		
	Исключение
		
		РезСтр.ОК = Ложь;
		РезСтр.ОписаниеОшибки = РезСтр.ОписаниеОшибки+Символы.ПС+Строка(ОписаниеОшибки());
		
	КонецПопытки;
	
	Если НЕ НаборИсточник = Неопределено 
		И НЕ НаборПриемник = Неопределено Тогда
		
		ТекущийОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();  // Для примера
		ТекПротокол = "";		
		
	ПараметрыТрансляции = бит_МеханизмТрансляции.КонструкторСтруктурыПараметровТрансляции();
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ТекущийОбъект);	
	бит_МеханизмТрансляции.ДополнитьСтруктуруШапкиДокумента(ТекущийОбъект, СтруктураШапкиДокумента);
														
	ПараметрыТрансляции.ОбязательныеПоля  = Новый Структура;
	ПараметрыТрансляции.ПравилоЗаполнения = СтрПар.ПравилоЗаполнения;;
	ПараметрыТрансляции.ПравилаТрансляции = Новый Массив;
	ПараметрыТрансляции.СтруктураШапкиДокумента = Новый Структура;
	ПараметрыТрансляции.ПользовательскиеФункции = Новый Соответствие;
	ПараметрыТрансляции.ДополнительныеАналитики = Новый Соответствие;
	ПараметрыТрансляции.ПризнакиУчета           = бит_МеханизмТрансляции.ЗаполнитьПризнакиУчета(СтрПар.Приемник);
	ПараметрыТрансляции.ВидыРегистров           = ВидыРегистров;
	ПараметрыТрансляции.МетаданныеИсточника     = МетаИсточник;
	ПараметрыТрансляции.МетаданныеПриемника     = МетаПриемник;
	ПараметрыТрансляции.ОбъектСистемыИсточник   = СтрПар.Источник;
	ПараметрыТрансляции.ОбъектСистемыПриемник   = СтрПар.Приемник;
	ПараметрыТрансляции.ЗаписыватьДвижения      = Ложь;
	ПараметрыТрансляции.ВестиПротокол           = Истина;
	ПараметрыТрансляции.СтруктураШапкиДокумента = СтруктураШапкиДокумента;
		
		
		бит_МеханизмТрансляции.ВыполнитьТрансляциюДвижений(ТекущийОбъект,НаборИсточник,НаборПриемник,ПараметрыТрансляции,ТекПротокол);
		
		Если Найти(ТекПротокол, "Не удалось")>0 Тогда
			
			РезСтр.ОК = Ложь;
			РезСтр.ОписаниеОшибки = РезСтр.ОписаниеОшибки+Символы.ПС+ТекПротокол;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат РезСтр;
	
КонецФункции // ПроверитьПравилоЗаполнения()

// Процедура создает контекст ЗависимыхОборотов для проверки функции.
// 
&НаСервере
Процедура ЭмулироватьКонтекстЗависимыхОборотов(ТабПараметров)

	СтрНастройкиРасчета = Новый Структура;
	
	МетаРесурсы = Метаданные.РегистрыСведений.бит_ЗависимыеОбороты.Ресурсы;
	
	Для Каждого мета Из МетаРесурсы Цикл
		
		Имя = мета.Имя;
		СтрНастройкиРасчета.Вставить(Имя, мета.Тип.ПривестиЗначение());
		
	КонецЦикла; 
	
	
	СтрИсточник = Новый Структура;
	СтрПриемник = Новый Структура;
	
	Исключения = Новый Массив;
	Исключения.Добавить("КомментарийРасчета");
	
	МетаРеквизиты = Метаданные.Документы.бит_БюджетнаяОперация.ТабличныеЧасти.ЗависимыеОбороты.Реквизиты;
	
	Для каждого метаРеквизит Из МетаРеквизиты Цикл
		
		ИмяРеквизита = метаРеквизит.Имя;
		Если НЕ Исключения.Найти(ИмяРеквизита) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		СтрИсточник.Вставить(метаРеквизит.Имя, метаРеквизит.Тип.ПривестиЗначение());
		СтрПриемник.Вставить(метаРеквизит.Имя, метаРеквизит.Тип.ПривестиЗначение());
		
	КонецЦикла; 
	
	НоваяСтрока = ТабПараметров.Добавить();
	НоваяСтрока.Номер = 1;
	НоваяСтрока.Параметр = "НастройкаРасчета";
	НоваяСтрока.Значение = СтрНастройкиРасчета;
	
	НоваяСтрока = ТабПараметров.Добавить();
	НоваяСтрока.Номер = 2;
	НоваяСтрока.Параметр = "СтрокаИсточник";
	НоваяСтрока.Значение = СтрИсточник;
	
	НоваяСтрока = ТабПараметров.Добавить();
	НоваяСтрока.Номер = 3;
	НоваяСтрока.Параметр = "СтрокаПриемник";
	НоваяСтрока.Значение = СтрПриемник;
	
	
КонецПроцедуры // ЭмулироватьКонтекстЗависимыхОборотов()

// Функция проверяет работоспособность пользовательских функций.
// 
// Параметры:
//   ТекущийКомплект - СправочникСсылка.бит_КомплектыДвижений.
// 
// Возвращаемое значение:
//  РезСтр - Структура.
// 
&НаСервере
Функция ПроверитьПользовательскуюФункцию(ТекФункция)

	РезСтр = Новый Структура("ОК,ОписаниеОшибки",Истина, "");
	
		СтрПеременные = Новый Структура;
	
	Для Каждого СтрокаТаблицы Из ТекФункция.Переменные Цикл
		
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Имя) И НЕ СтрПеременные.Свойство(СтрокаТаблицы.Имя) Тогда
			
			СтрПеременные.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	ТабПараметров = Новый ТаблицаЗначений;
	ТабПараметров.Колонки.Добавить("Номер");
	ТабПараметров.Колонки.Добавить("Параметр");
	ТабПараметров.Колонки.Добавить("Значение");	
	
	// Если контекст зависимые обороты его нужно сэмулировать.
	Если ТекФункция.Контекст = ПредопределенноеЗначение("Перечисление.бит_КонтекстыВыполненияПользовательскихФункций.ЗависимыеОбороты") Тогда
		
		ЭмулироватьКонтекстЗависимыхОборотов(ТабПараметров);
	
	КонецЕсли; 
	
	Ном = 1;
	Для Каждого ТекСтрокаПараметры Из ТекФункция.ПараметрыФункции Цикл
		
		НоваяСтрока = ТабПараметров.Добавить();
		НоваяСтрока.Номер = Ном;
		НоваяСтрока.Параметр = ТекСтрокаПараметры.Наименование;
		НоваяСтрока.Значение = ТекСтрокаПараметры.ЗначениеПоУмолчанию;
		
		Ном = Ном + 1;
	КонецЦикла;
	
	// Чтобы текст функции не изменился сформируем его копию.
	ТекстФункции = Строка(ТекФункция.КодПодпрограммы);
	
	Результат = бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункциюСПараметрами(ТекстФункции
																					, ТабПараметров
																					, СтрПеременные);  
	
	Если ТипЗнч(Результат) = Тип("Строка") 
		И Найти(Результат, "Ошибка компиляции при вычислении выражения или выполнении фрагмента кода")  Тогда
		
		РезСтр.ОК = Ложь;
		РезСтр.ОписаниеОшибки = Результат;
		
	КонецЕсли; 																				
																					

	Возврат РезСтр;
	
КонецФункции // ПроверитьПользовательскуюФункцию()

// Функция проверяет работоспособность комплекта МХО.
// 
// Параметры:
//   ТекущийКомплект - СправочникСсылка.бит_КомплектыДвижений.
// 
// Возвращаемое значение:
//  РезСтр - Структура.
// 
&НаСервере
Функция ПроверитьКомплектМХО(ТекущийКомплект)

	РезСтр = Новый Структура("ОК,ОписаниеОшибки",Истина, "");
	
	ОбъектСистемы = ТекущийКомплект.ВидДокумента;
	
	Источник = Неопределено;
	
	// Для теста выберем реальный документ и создадим его копию.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Док.Ссылка
	               |ИЗ
	               |	Документ."+ОбъектСистемы.ИмяОбъекта+" КАК Док
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Док.Дата УБЫВ";
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
		
			Источник = Выборка.Ссылка.Скопировать();
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Если документов данного типа вообще нет будем тестировать на пустом документе.
	Если Источник = Неопределено Тогда
		
		Источник = Документы[ОбъектСистемы.ИмяОбъекта].СоздатьДокумент();
		
	КонецЕсли; 

	ИмяВидаДокумента = Источник.Метаданные().Имя;
	
	АктивныйКомплект = бит_МеханизмХозяйственныхОперацийСервер.ПолучитьАктивныйКомплектДляДокумента(Источник);
	
	Если НЕ АктивныйКомплект = Неопределено Тогда
		
		// Получим массив переменных
		МассивПеременных 	= АктивныйКомплект.СтекПеременных.Получить();
		КодОбработчика 		= АктивныйКомплект.КодОбработчикаПроведения;
		
		Если СокрЛП(КодОбработчика) <> "" Тогда
			
			ЭтоОтладка = Неопределено;
			
			Источник.ДополнительныеСвойства.Свойство("ЭтоОтладка", ЭтоОтладка);
			
			Попытка
				Выполнить(КодОбработчика);
			Исключение
				РезСтр.ОК = Ложь;
				РезСтр.ОписаниеОшибки = Строка(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезСтр;
	
КонецФункции // ПроверитьКомплектыМХО()

// Процедура обновляет перечень объектов, требующих конвертации.
// 
&НаСервере
Процедура ОбновитьОбъектыКонвертации()

	Объект.ОбъектыКонвертации.Очистить();
	
	// Запросы
	Если Объект.Обрабатывать_Запросы Тогда
	
		ГруппаРезерв = СоздатьНайтиГруппуРезервныеКопии("бит_Запросы");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидИнформационнойБазы", Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза);
		Запрос.УстановитьПараметр("ГруппаРезерв", ГруппаРезерв);
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_Запросы.Ссылка,
		               |	бит_Запросы.ТекстЗапроса
		               |ИЗ
		               |	Справочник.бит_Запросы КАК бит_Запросы
		               |ГДЕ
		               |	НЕ бит_Запросы.ЭтоГруппа
		               |	И бит_Запросы.ВидИнформационнойБазы = &ВидИнформационнойБазы
		               |	И бит_Запросы.Родитель <> &ГруппаРезерв";
					 
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			 РезСтр = ПроверитьЗапрос(Выборка.Ссылка);
			
			 Если НЕ РезСтр.ОК Тогда
			 
			 	 НоваяСтрока = Объект.ОбъектыКонвертации.Добавить();
				 НоваяСтрока.Объект = Выборка.Ссылка;
				 НоваяСтрока.ТипОбъекта     = "Запрос";
				 НоваяСтрока.ОписаниеОшибки = РезСтр.ОписаниеОшибки;
				 НоваяСтрока.Картинка = БиблиотекаКартинок.бит_Важно;
			 
			 КонецЕсли; 
			 
		КонецЦикла; 
	
	КонецЕсли; // Запросы
	
	// Правила заполнения полей при трансляции
	Если Объект.Обрабатывать_ПравилаЗаполненияПолейПриТрансляции Тогда
		
		ГруппаРезерв = СоздатьНайтиГруппуРезервныеКопии("бит_ПравилаЗаполненияПолейПриТрансляции");;		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ГруппаРезерв", ГруппаРезерв);
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_ПравилаЗаполненияПолейПриТрансляции.Ссылка,
		               |	бит_ПравилаЗаполненияПолейПриТрансляции.Источник,
		               |	бит_ПравилаЗаполненияПолейПриТрансляции.Приемник,
		               |	бит_ПравилаЗаполненияПолейПриТрансляции.КодЗаполнения
		               |ИЗ
		               |	Справочник.бит_ПравилаЗаполненияПолейПриТрансляции КАК бит_ПравилаЗаполненияПолейПриТрансляции
		               |ГДЕ
		               |	НЕ бит_ПравилаЗаполненияПолейПриТрансляции.ЭтоГруппа
		               |	И бит_ПравилаЗаполненияПолейПриТрансляции.Родитель <> &ГруппаРезерв";
					   
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			 СтрПар = Новый Структура("ПравилоЗаполнения, Источник, Приемник, КодЗаполнения"
			                             , Выборка.Ссылка
										 , Выборка.Источник
										 , Выборка.Приемник
										 , Выборка.КодЗаполнения);
										 
			 РезСтр = ПроверитьПравилоЗаполнения(СтрПар);	
			 
			 Если НЕ РезСтр.ОК Тогда
			 
				
				НоваяСтрока = Объект.ОбъектыКонвертации.Добавить();
				НоваяСтрока.Объект = Выборка.Ссылка;
				НоваяСтрока.ТипОбъекта     = "ПравилаЗаполненияПолейПриТрансляции";
				НоваяСтрока.ОписаниеОшибки = РезСтр.ОписаниеОшибки;
				НоваяСтрока.Картинка = БиблиотекаКартинок.бит_Важно;
				
			 
			 КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли; // Правила заполнения полей при трансляции
	
	// Пользовательские функции
	Если Объект.Обрабатывать_ПользовательскиеФункции Тогда
		
		ГруппаРезерв = СоздатьНайтиГруппуРезервныеКопии("бит_ПользовательскиеФункции");		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ГруппаРезерв", ГруппаРезерв);		
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_ПользовательскиеФункции.Ссылка
		               |ИЗ
		               |	Справочник.бит_ПользовательскиеФункции КАК бит_ПользовательскиеФункции
		               |ГДЕ
		               |	НЕ бит_ПользовательскиеФункции.ЭтоГруппа
		               |	И бит_ПользовательскиеФункции.Родитель <> &ГруппаРезерв";
					   
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			 РезСтр = ПроверитьПользовательскуюФункцию(Выборка.Ссылка);
			 
			 Если НЕ РезСтр.ОК Тогда
				 
				 НоваяСтрока = Объект.ОбъектыКонвертации.Добавить();
				 НоваяСтрока.Объект = Выборка.Ссылка;
				 НоваяСтрока.ТипОбъекта     = "ПользовательскаяФункция";
				 НоваяСтрока.ОписаниеОшибки = РезСтр.ОписаниеОшибки;
				 НоваяСтрока.Картинка = БиблиотекаКартинок.бит_Важно;
				 
			 КонецЕсли;	
				
		КонецЦикла; 
	
	КонецЕсли; 
	
	// Комплекты МХО
	Если Объект.Обрабатывать_КомплектыМХО Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_КомплектыДвижений.Ссылка
		               |ИЗ
		               |	Справочник.бит_КомплектыДвижений КАК бит_КомплектыДвижений";
					   
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			 РезСтр = ПроверитьКомплектМХО(Выборка.Ссылка);
			 
			 Если НЕ РезСтр.ОК Тогда
			 
				НоваяСтрока = Объект.ОбъектыКонвертации.Добавить();
				НоваяСтрока.Объект = Выборка.Ссылка;
				НоваяСтрока.ТипОбъекта     = "КомплектШаблонов";
				НоваяСтрока.ОписаниеОшибки = РезСтр.ОписаниеОшибки;
				НоваяСтрока.Картинка = БиблиотекаКартинок.бит_Важно;
			 
			 КонецЕсли; 
		
		КонецЦикла; 
		
	
	КонецЕсли; 
	
	Если Объект.ОбъектыКонвертации.Количество() = 0 Тогда
	
		ТекстСообщения =  НСтр("ru = 'Объекты, подлежащие конвертации не обнаружены!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
	КонецЕсли; 
	
КонецПроцедуры // ОбновитьОбъектыКонвертации()

// Процедура выполняет конвертацию запроса. 
// 
&НаСервере
Процедура ИсправитьЗапрос(СтрокаОбъекты, ОписаниеОшибки, СтрПар)

	флЗаменятьНоменклатуру = ?(Найти(ОписаниеОшибки,"Номенклатура") > 0, Истина, Ложь);
	
	СловарьЗамены = Новый Соответствие;
	Для каждого КиЗ Из СтрПар.СловарьЗамены Цикл
		
		СловарьЗамены.Вставить(КиЗ.Ключ, КиЗ.Значение);
		
	КонецЦикла; 
	
	Если флЗаменятьНоменклатуру Тогда
		
		СловарьЗамены.Вставить("Номенклатура", "Аналитика_5");
		
	КонецЕсли; 
	
	флИзменено = Ложь;
	ТекущийОбъект = СтрокаОбъекты.Объект.ПолучитьОбъект();
	ТекстСообщения =  НСтр("ru = 'Обработка объекта ""%1%"".'");
	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаОбъекты.Объект);
	ДобавитьСообщение(ТекстСообщения);
	
	Если Объект.СоздаватьРезервныеКопииОбъектов Тогда
	
		ГруппаКопии = СоздатьНайтиГруппуРезервныеКопии("бит_Запросы");
		СоздатьКопиюОбъекта(СтрокаОбъекты.Объект, ГруппаКопии);
	
	КонецЕсли; 

	ТекстДокВрем = Новый ТекстовыйДокумент;
	ТекстДокВрем.УстановитьТекст(ТекущийОбъект.ТекстЗапроса);
	
	КолСтрок = ТекстДокВрем.КоличествоСтрок();
	
	флУдалена = Ложь;
	флБылаЗапятая = Ложь;
	Для н = 0 По КолСтрок-1 Цикл
		
		инд = КолСтрок - н;
		ТекущаяСтрока = ТекстДокВрем.ПолучитьСтроку(инд);
		
		Если флУдалена И НЕ флБылаЗапятая Тогда
		
			// Была удалена строка снизу и там не было запятой - удалим запятую в текущей строке.
			ТекущаяСтрока = СокрЛП(ТекущаяСтрока);
			ТекущаяСтрока = Сред(ТекущаяСтрока,1,СтрДлина(ТекущаяСтрока)-1);
			
		КонецЕсли; 
		
		флУдалена = Ложь;
		флБылаЗапятая = Ложь;
		// Удаление
		Для каждого СтрПоиска Из СтрПар.ДляУдаления Цикл
			
			Если Найти(ТекущаяСтрока, СтрПоиска) > 0 Тогда
				
				ТекстСообщения =  НСтр("ru = 'Удалена строка №%1% запроса, содержащая текст ""%2%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,инд, СтрПоиска);
				ДобавитьСообщение(ТекстСообщения);				
				флБылаЗапятая  = ?(Прав(СокрЛП(ТекущаяСтрока),1)=",",Истина,Ложь);
				
				ТекстДокВрем.УдалитьСтроку(инд);
				
				флИзменено = Истина;
				флУдалена  = Истина;
				Прервать;
			
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если  флУдалена Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		// Замена
		Для каждого КиЗ Из СловарьЗамены Цикл
			
			СтрПоиска = КиЗ.Ключ;
			СтрЗамены = КиЗ.Значение;
			
			Если Найти(ТекущаяСтрока, СтрПоиска) > 0 Тогда
				
				ТекстСообщения =  НСтр("ru = 'В строке №%1% запроса заменен текст ""%2%"" на текст ""%3%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, инд, СтрПоиска, СтрЗамены);
				ДобавитьСообщение(ТекстСообщения);				
				
				ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока, СтрПоиска, СтрЗамены);
				флИзменено = Истина;
				
			КонецЕсли; 
			
		КонецЦикла; // По словарю замены				
		
		ТекстДокВрем.ЗаменитьСтроку(инд, ТекущаяСтрока);
		ТекущийОбъект.ТекстЗапроса = ТекстДокВрем.ПолучитьТекст();
		
	КонецЦикла; 
	
	Если флИзменено Тогда
		
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ТекущийОбъект,"","Ошибки",Истина);
		ТекстСообщения = ?(флВыполнено, НСтр("ru = 'Записан объект ""%1%"".'"), НСтр("ru = 'Не удалось записать объект ""%1%"".'"));
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаОбъекты.Объект);
		ДобавитьСообщение(ТекстСообщения);
		ДобавитьСообщение("====================================================");
		
	КонецЕсли; 
	
КонецПроцедуры // ИсправитьЗапрос()

// Процедура вносит исправления в правила заполнения полей при трансляции. 
// 
&НаСервере
Процедура ИсправитьПравилоЗаполнения(СтрокаОбъекты, СтрПар)

	флИзменено = Ложь;
	
	флЗаменятьНоменклатуруПриемник = ПроверитьНеобходимостьЗаменыНоменклатуры(СтрокаОбъекты.Объект.Приемник.ИмяОбъектаПолное);
	флЗаменятьНоменклатуруИсточник = ПроверитьНеобходимостьЗаменыНоменклатуры(СтрокаОбъекты.Объект.Источник.ИмяОбъектаПолное);
	
	// Корректировка словаря замены
	СловарьЗамены = Новый Соответствие;
	Для каждого КиЗ Из СтрПар.СловарьЗамены Цикл
	
		СловарьЗамены.Вставить(КиЗ.Ключ, КиЗ.Значение);
	
	КонецЦикла; 
	
	Если флЗаменятьНоменклатуруИсточник Тогда
	
		СловарьЗамены.Вставить("ЗаписьИсточник.Номенклатура", "ЗаписьИсточник.Аналитика_5");
	
	КонецЕсли; 
	
	Если флЗаменятьНоменклатуруПриемник Тогда
	
		СловарьЗамены.Вставить("ЗаписьПриемник.Номенклатура", "ЗаписьПриемник.Аналитика_5");
	
	КонецЕсли; 
	
	ТекущийОбъект = СтрокаОбъекты.Объект.ПолучитьОбъект();
	ТекстСообщения =  НСтр("ru = 'Обработка объекта ""%1%"".'");
	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаОбъекты.Объект);
	ДобавитьСообщение(ТекстСообщения);
	
	Если Объект.СоздаватьРезервныеКопииОбъектов Тогда
	
		ГруппаКопии = СоздатьНайтиГруппуРезервныеКопии("бит_ПравилаЗаполненияПолейПриТрансляции");
		СоздатьКопиюОбъекта(СтрокаОбъекты.Объект, ГруппаКопии);
	
	КонецЕсли; 
	
	КолСтр = ТекущийОбъект.ПоляПриемника.Количество();
	
	// Исправление табличной части правила заполнения.
	Для н = 1 По КолСтр-1 Цикл
		
		инд = КолСтр-н;
		СтрокаТаблицы = ТекущийОбъект.ПоляПриемника[инд];
		флУдалена = Ложь;
		
		// Удаление
		Для каждого СтрПоиска Из СтрПар.ДляУдаления Цикл
			
			Если Найти(СтрокаТаблицы.ПравилоЗаполнения, СтрПоиска) > 0 ИЛИ Найти(СтрокаТаблицы.ИмяПоля, СтрПоиска)>0  Тогда
				
				ТекстСообщения =  НСтр("ru = 'Удалена строка №%1% правил заполнения, содержащая текст ""%2%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтрокаТаблицы.НомерСтроки, СтрПоиска);
				ДобавитьСообщение(ТекстСообщения);				
				
				ТекущийОбъект.ПоляПриемника.Удалить(СтрокаТаблицы);
				
				флИзменено = Истина;
				флУдалена  = Истина;
				Прервать;
			
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если  флУдалена Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		// Замена
		Для каждого КиЗ Из СловарьЗамены Цикл
			
			СтрПоиска = КиЗ.Ключ;
			СтрЗамены = КиЗ.Значение;
			
			Если Найти(СтрокаТаблицы.ПравилоЗаполнения, СтрПоиска) > 0 Тогда
				
				ТекстСообщения =  НСтр("ru = 'В строке №%1% правил заполнения заменен текст ""%2%"" на текст ""%3%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтрокаТаблицы.НомерСтроки, СтрПоиска, СтрЗамены);
				ДобавитьСообщение(ТекстСообщения);
				
				СтрокаТаблицы.ПравилоЗаполнения = СтрЗаменить(СтрокаТаблицы.ПравилоЗаполнения, СтрПоиска, СтрЗамены);
				флИзменено = Истина;
				
			КонецЕсли; 
			
		КонецЦикла; // По словарю замены				
		
		Если флЗаменятьНоменклатуруПриемник И СтрокаТаблицы.ИмяПоля = "Номенклатура" Тогда
			
			СтрокаТаблицы.ИмяПоля = "Аналитика_5";
			
			ТекстСообщения =  НСтр("ru = 'В строке №%1% правил заполнения заменено имя поля ""Номенклатура"" на имя поля ""Аналитика_5"".'");
			ДобавитьСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам правил заполнения
	
	// Исправления в обработчиках
	ИменаОбработчиков = Новый Массив;
	ИменаОбработчиков.Добавить("КодПередФормированиемНабораЗаписей");
	ИменаОбработчиков.Добавить("КодПередФормированиемЗаписи");
	ИменаОбработчиков.Добавить("КодПослеФормированияЗаписи");
	ИменаОбработчиков.Добавить("КодПослеФормированияНабораЗаписей");
	
	Для каждого ИмяОбработчика Из ИменаОбработчиков Цикл
		
		Для каждого КиЗ Из СловарьЗамены Цикл
			
			СтрПоиска = КиЗ.Ключ;
			СтрЗамены = КиЗ.Значение;
			
			Если Найти(ТекущийОбъект[ИмяОбработчика], СтрПоиска) > 0 Тогда
				
				ТекстСообщения =  НСтр("ru = 'В обработчике %1% заменен текст ""%2%"" на текст ""%3%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяОбработчика, СтрПоиска, СтрЗамены);
				ДобавитьСообщение(ТекстСообщения);				
				
				ТекущийОбъект[ИмяОбработчика] = СтрЗаменить(ТекущийОбъект[ИмяОбработчика], СтрПоиска, СтрЗамены);
				флИзменено = Истина;
				
			КонецЕсли; 
			
		КонецЦикла; // По словарю замены				
		
	КонецЦикла; 
	
	Если флИзменено Тогда
		
		ТекущийОбъект.ГенерироватьКод();
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ТекущийОбъект,"","Ошибки",Истина);
		ТекстСообщения = ?(флВыполнено, НСтр("ru = 'Записан объект ""%1%"".'"), НСтр("ru = 'Не удалось записать объект ""%1%"".'"));
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаОбъекты.Объект);
		ДобавитьСообщение(ТекстСообщения);
		ДобавитьСообщение("====================================================");
		
	КонецЕсли; 

КонецПроцедуры // ИсправитьПравилоЗаполнения()

// Процедура вносит исправления в правила заполнения полей при трансляции. 
// 
&НаСервере
Процедура ИсправитьПользовательскуюФункцию(СтрокаОбъекты, СтрПар)

	флИзменено = Ложь;
	СловарьЗамены = СтрПар.СловарьЗамены;
	
	ТекущийОбъект = СтрокаОбъекты.Объект.ПолучитьОбъект();
	ТекстСообщения =  НСтр("ru = 'Обработка объекта ""%1%"".'");
	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаОбъекты.Объект);
	ДобавитьСообщение(ТекстСообщения);
	
	Если Объект.СоздаватьРезервныеКопииОбъектов Тогда
	
		ГруппаКопии = СоздатьНайтиГруппуРезервныеКопии("бит_ПользовательскиеФункции");
		СоздатьКопиюОбъекта(СтрокаОбъекты.Объект, ГруппаКопии);
	
	КонецЕсли; 	
	
	ИмяОбработчика = "КодПодпрограммы";
	Для каждого КиЗ Из СловарьЗамены Цикл
		
		СтрПоиска = КиЗ.Ключ;
		СтрЗамены = КиЗ.Значение;
		
		Если Найти(ТекущийОбъект[ИмяОбработчика], СтрПоиска) > 0 Тогда
			
			ТекстСообщения =  НСтр("ru = 'В коде пользовательской функции %1% заменен текст ""%2%"" на текст ""%3%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаОбъекты.Объект, СтрПоиска, СтрЗамены);
			ДобавитьСообщение(ТекстСообщения);				
			
			ТекущийОбъект[ИмяОбработчика] = СтрЗаменить(ТекущийОбъект[ИмяОбработчика], СтрПоиска, СтрЗамены);
			флИзменено = Истина;
			
		КонецЕсли; 
		
	КонецЦикла; // По словарю замены				
	
	Если флИзменено Тогда
		
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ТекущийОбъект,"","Ошибки",Истина);
		ТекстСообщения = ?(флВыполнено, НСтр("ru = 'Записан объект ""%1%"".'"), НСтр("ru = 'Не удалось записать объект ""%1%"".'"));
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаОбъекты.Объект);
		ДобавитьСообщение(ТекстСообщения);
		ДобавитьСообщение("====================================================");
		
	КонецЕсли; 
	
КонецПроцедуры // ИсправитьПользовательскуюФункцию()

// Процедура копирует шаблоны комплекта движений. 
// 
// Параметры:
//  Комплект - СправочникСсылка.бит_Комплекты.
// 
&НаСервере
Процедура СкопироватьШаблоныКомплекта(Комплект)
	
	ГруппаКопии = СоздатьНайтиГруппуРезервныеКопии("бит_ШаблоныДвижений");
	
	Для каждого СтрокаШаблон Из Комплект.ШаблоныДвижений Цикл
		
		КопияШаблона = СоздатьКопиюОбъекта(СтрокаШаблон.ШаблонДвижения, ГруппаКопии);
		
		Если ЗначениеЗаполнено(КопияШаблона) Тогда
			
			// Копируем значения реквизитов шаблонов
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ШаблонДвижений", СтрокаШаблон.ШаблонДвижения);
			Запрос.УстановитьПараметр("ШаблонПриемник", КопияШаблона);
			Запрос.Текст = "ВЫБРАТЬ
			|	&ШаблонПриемник КАК ШаблонДвижений,
			|	бит_ЗначенияРеквизитовШаблонов.Реквизит,
			|	бит_ЗначенияРеквизитовШаблонов.НомерДвижения,
			|	бит_ЗначенияРеквизитовШаблонов.Значение
			|ИЗ
			|	РегистрСведений.бит_ЗначенияРеквизитовШаблонов КАК бит_ЗначенияРеквизитовШаблонов
			|ГДЕ
			|	бит_ЗначенияРеквизитовШаблонов.ШаблонДвижений = &ШаблонДвижений";
			
			
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				
				ТаблицаЗначенияРеквизитов = Результат.Выгрузить();
				
				НаборЗаписей = РегистрыСведений.бит_ЗначенияРеквизитовШаблонов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ШаблонДвижений.Установить(КопияШаблона);
				НаборЗаписей.Загрузить(ТаблицаЗначенияРеквизитов);
				
				Попытка
					
					НаборЗаписей.Записать();
					
				Исключение
					
					ТекстСообщения = НСтр("ru = '%1'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ОписаниеОшибки());
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецПопытки;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; // Комплект.ШаблоныДвижений
	
КонецПроцедуры // СкопироватьШаблоныКомплекта()

// Процедура вносит исправления в шаблоны МХО. 
// 
// Параметры:
//  СтрокаОбъекты - СтрокаТабличнойЧасти.
// 
&НаСервере
Процедура ИсправитьКомплектШаблонов(СтрокаОбъекты, СтрПар)
	
	СловарьЗамены = Новый Соответствие;
	Для каждого КиЗ Из СтрПар.СловарьЗамены Цикл
	
		СловарьЗамены.Вставить(КиЗ.Ключ, КиЗ.Значение);
	
	КонецЦикла; 
	Если Найти(СтрокаОбъекты.ОписаниеОшибки, "Номенклатура") > 0 Тогда
	
		СловарьЗамены.Вставить("Номенклатура", "Аналитика_5");
	
	КонецЕсли; 
	
	Комплект = СтрокаОбъекты.Объект;
	
	Если Объект.СоздаватьРезервныеКопииОбъектов Тогда
		
		СкопироватьШаблоныКомплекта(Комплект);
		
	КонецЕсли; // Создавать резервные копии
	
	Обработчики = Новый Массив;
	Обработчики.Добавить("АлгоритмПередФормированиемПроводок");
	Обработчики.Добавить("АлгоритмПослеФормированияПроводок");
	Обработчики.Добавить("АлгоритмПередФормированиемСтроки");
	Обработчики.Добавить("АлгоритмПослеФормированияСтроки");
	
	флЕстьИзменения = Ложь;
	Для каждого СтрокаШаблоны Из Комплект.ШаблоныДвижений Цикл
		
		Шаблон = СтрокаШаблоны.ШаблонДвижения;
		ОписаниеРегистра = Шаблон.Регистр;
		МетаРегистр = Метаданные[ОписаниеРегистра.ВидРегистра][ОписаниеРегистра.ИмяРегистра];
		ЭтоРегистрБит = ?(Найти(МетаРегистр.Имя,"бит_")>0,Истина,Ложь);
		флЕстьИзмерениеНоменклатура = ?(МетаРегистр.Измерения.Найти("Номенклатура") = Неопределено, Ложь, Истина);
		флЕстьИзмерениеАналитика_5  = ?(МетаРегистр.Измерения.Найти("Аналитика_5")  = Неопределено, Ложь, Истина);
		
		// Исправления в обработчиках шаблона
		ШаблонОб = Шаблон.ПолучитьОбъект();
	    флИзменено = Ложь;		
		
		Для каждого ИмяОбработчика ИЗ Обработчики Цикл
			
			Для каждого КиЗ Из СловарьЗамены Цикл
				
				СтрПоиска = КиЗ.Ключ;
				СтрЗамены = КиЗ.Значение;
				
				Если Найти(ШаблонОб[ИмяОбработчика], СтрПоиска) > 0 Тогда
					
					ТекстСообщения =  НСтр("ru = 'В обработчике %1% шаблона %2% заменен текст ""%3%"" на текст ""%4%"".'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяОбработчика, Шаблон, СтрПоиска, СтрЗамены);
					ДобавитьСообщение(ТекстСообщения);				
					
					ШаблонОб[ИмяОбработчика] = СтрЗаменить(ШаблонОб[ИмяОбработчика], СтрПоиска, СтрЗамены);
					флИзменено = Истина;
					
				КонецЕсли; 
				
			КонецЦикла; // По словарю замены				
			
		КонецЦикла; // Имена обработчиков	
		
		Если флИзменено Тогда
			
			флЕстьИзменения = Истина;
			бит_ОбщегоНазначения.ЗаписатьСправочник(ШаблонОб,"","Ошибки",Истина);
		
		КонецЕсли; 
		
		// Исправление в значениях реквизитов движений.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ШаблонДвижений", Шаблон);
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_ЗначенияРеквизитовШаблонов.ШаблонДвижений,
		               |	бит_ЗначенияРеквизитовШаблонов.Реквизит,
		               |	бит_ЗначенияРеквизитовШаблонов.Реквизит.Наименование,
		               |	бит_ЗначенияРеквизитовШаблонов.НомерДвижения,
		               |	бит_ЗначенияРеквизитовШаблонов.Значение
		               |ИЗ
		               |	РегистрСведений.бит_ЗначенияРеквизитовШаблонов КАК бит_ЗначенияРеквизитовШаблонов
		               |ГДЕ
		               |	бит_ЗначенияРеквизитовШаблонов.ШаблонДвижений = &ШаблонДвижений";
					   
					   
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			флУдалена = Ложь;
			// Удаление
			Для каждого СтрПоиска Из СтрПар.ДляУдаления Цикл
				
				Если Найти(Выборка.РеквизитНаименование, СтрПоиска) > 0  Тогда
					
					
					МенеджерЗаписи = РегистрыСведений.бит_ЗначенияРеквизитовШаблонов.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
					Попытка
					
						МенеджерЗаписи.Удалить();
						ТекстСообщения = НСтр("ru = 'Удалено значение реквизита шаблона ""%1%"".'");
						ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.РеквизитНаименование);
						ДобавитьСообщение(ТекстСообщения);				
						флИзменено = Истина;
						флУдалена  = Истина;
						
					Исключение
						
						ТекстСообщения = НСтр("ru = '%1'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, ОписаниеОшибки());
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецПопытки;
					
					Если флУдалена Тогда
						
						Прервать;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла;  // Фразы для удаления
			
			Если флУдалена Тогда
			
				 Продолжить;
			
			КонецЕсли; 
			
			// Изменение имени измерения номенклатура на Аналитика_5.
			Если ЭтоРегистрБит 
				 И Выборка.РеквизитНаименование = "Номенклатура" 
				 И НЕ флЕстьИзмерениеНоменклатура 
				 И флЕстьИзмерениеАналитика_5 Тогда
			
				 ВидРеквизитаАналитика_5 = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию("Аналитика_5",Истина, ОписаниеРегистра);
				 
				 Если ЗначениеЗаполнено(ВидРеквизитаАналитика_5) Тогда
				 
				 	МенеджерЗаписи = РегистрыСведений.бит_ЗначенияРеквизитовШаблонов.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
					МенеджерЗаписи.Реквизит = ВидРеквизитаАналитика_5;
					
					Если ТипЗнч(МенеджерЗаписи.Значение) = Тип("Строка") Тогда
						
						Для каждого КиЗ Из СловарьЗамены Цикл
							
							СтрПоиска = КиЗ.Ключ;
							СтрЗамены = КиЗ.Значение;
							
							Если Найти(МенеджерЗаписи.Значение, СтрПоиска) > 0 Тогда
								
								МенеджерЗаписи.Значение = СтрЗаменить(МенеджерЗаписи.Значение, СтрПоиска, СтрЗамены);
								
							КонецЕсли; 
							
						КонецЦикла; // По словарю замены				
						
					КонецЕсли; 
					
					Попытка
						
						ТекстСообщения =  НСтр("ru = 'Выполнена замена реквизита шаблона ""%1%"" на ""%2%"".'");
						ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.РеквизитНаименование, ВидРеквизитаАналитика_5);
						ДобавитьСообщение(ТекстСообщения);				
						
						МенеджерЗаписи.Записать();
					
					Исключение
						
						ТекстСообщения = НСтр("ru = '%1'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, ОписаниеОшибки());
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецПопытки;
					
				 	МенеджерЗаписи = РегистрыСведений.бит_ЗначенияРеквизитовШаблонов.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
					
					Попытка
					
						МенеджерЗаписи.Удалить();
					
					Исключение
						
						ТекстСообщения = НСтр("ru = '%1'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, ОписаниеОшибки());
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецПопытки;
					
				 КонецЕсли; 
				 
				 Продолжить;
				 
			КонецЕсли;  // Изменение измени измерения Номенклатура
			
			// Замена
			Если ТипЗнч(Выборка.Значение) = Тип("Строка") Тогда
			
				Для каждого КиЗ Из СловарьЗамены Цикл
					
					СтрПоиска = КиЗ.Ключ;
					СтрЗамены = КиЗ.Значение;
					
					Если Найти(Выборка.Значение, СтрПоиска) > 0 Тогда
						
						
						МенеджерЗаписи = РегистрыСведений.бит_ЗначенияРеквизитовШаблонов.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
						
						МенеджерЗаписи.Значение = СтрЗаменить(МенеджерЗаписи.Значение, СтрПоиска, СтрЗамены);
						
						Попытка
							
							МенеджерЗаписи.Записать();
							флИзменено = Истина;
							
							ТекстСообщения =  НСтр("ru = 'В значении реквизита шаблона %1% заменен текст ""%2%"" на текст ""%3%"".'");
							ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.РеквизитНаименование, СтрПоиска, СтрЗамены);
							ДобавитьСообщение(ТекстСообщения);				
							
						Исключение
							
							ТекстСообщения = НСтр("ru = '%1'");
							ТекстСообщения = СтрШаблон(ТекстСообщения, ОписаниеОшибки());
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						КонецПопытки;
						
						
					КонецЕсли; 
					
				КонецЦикла; // По словарю замены				
			
			КонецЕсли; 
			
			
		КонецЦикла; // По реквизитам движений 
		
		Если флИзменено Тогда
			
			флЕстьИзменения = Истина;
		
		КонецЕсли; 
		
	КонецЦикла; // Шаблоны движений 
	
	Если флЕстьИзменения Тогда
	
		бит_МеханизмХозяйственныхОперацийСервер.ИнтерпретироватьВсеКомплекты();
	
	КонецЕсли; 
	
КонецПроцедуры // ИсправитьКомплектШаблонов()

// Функция готовит словари для замены и удаления в коде.
// 
// Возвращаемое значение:
//  СтрПарПроверка - Структура.
// 
&НаСервереБезКонтекста
Функция ПодготовитьСловари()

	// Определим пары строк для замены
	СловарьЗамены = Новый Соответствие;
	СловарьЗамены.Вставить("МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(","бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(");
	СловарьЗамены.Вставить("МодульВалютногоУчета.ПолучитьКурсВалюты(", "бит_КурсыВалют.ПолучитьКурсВалюты(");
	
	СловарьЗамены.Вставить("бит_ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(" , "бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(");
	СловарьЗамены.Вставить("бит_ОбщегоНазначения.ПолучитьКурсВалюты("         , "бит_КурсыВалют.ПолучитьКурсВалюты(");
	СловарьЗамены.Вставить("бит_ОбщегоНазначения.ПересчитатьДокВзаиморасчеты(", "бит_КурсыВалют.ПересчитатьДокВзаиморасчеты(");
	СловарьЗамены.Вставить("бит_ОбщегоНазначения.ПересчитатьВалютаДокумента(" , "бит_КурсыВалют.ПересчитатьВалютаДокумента(");
	СловарьЗамены.Вставить("бит_ОбщегоНазначения.ПересчитатьДокРегл("         , "бит_КурсыВалют.ПересчитатьДокРегл(");
	СловарьЗамены.Вставить("бит_ОбщегоНазначения.РассчитатьСуммуНДС("         , "бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(");
	
	СловарьЗамены.Вставить("глЗначениеПеременной(", "бит_ОбщиеПеременныеСервер.ЗначениеПеременной(");
	
	СловарьЗамены.Вставить("бит_ОбщегоНазначенияКлиентСервер.РассчитатьСуммуНДС(", "бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(");
	СловарьЗамены.Вставить("бит_ОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДС(" , "бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(");
	
	СловарьЗамены.Вставить("МодульВалютногоУчета.ПолучитьКурсВалюты("        , "бит_КурсыВалют.ПолучитьКурсВалюты(");
	СловарьЗамены.Вставить("МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(", "бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(");
	
	СловарьЗамены.Вставить("ОбщегоНазначения.ЕстьРеквизитДокумента(", "бит_РаботаСМетаданными.ЕстьРеквизит(");
	СловарьЗамены.Вставить("ОбщегоНазначения.ЕстьТабЧастьДокумента(", "бит_РаботаСМетаданными.ЕстьТабЧасть(");
	
	СловарьЗамены.Вставить("ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(", "бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(");
	СловарьЗамены.Вставить("ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок("     , "бит_СтрокиКлиентСервер.РазложитьСтрокуВМассивПодстрок(");
	СловарьЗамены.Вставить("ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(", "бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(");
	
	СловарьЗамены.Вставить("УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(", "бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой(");
	СловарьЗамены.Вставить("УчетНДС.ПолучитьСтавкуНДС(" , "бит_БухгалтерияСервер.ПолучитьСтавкуНДС(");
	СловарьЗамены.Вставить("УчетНДС.РассчитатьСуммуНДС(", "бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(");
	
	СловарьЗамены.Вставить("Справочники.бит_СценарииБюджетирования"     ,"Справочники.СценарииПланирования");
	СловарьЗамены.Вставить("Справочник.бит_СценарииБюджетирования"      ,"Справочник.СценарииПланирования");
	СловарьЗамены.Вставить("СправочникСсылка.бит_СценарииБюджетирования","СправочникСсылка.СценарииПланирования");
	СловарьЗамены.Вставить("СправочникОбъект.бит_СценарииБюджетирования","СправочникОбъект.СценарииПланирования");	
	
	СловарьЗамены.Вставить("Справочники.бит_ЦФО"                        ,"Справочники.Подразделения");
	СловарьЗамены.Вставить("Справочник.бит_ЦФО"                         ,"Справочник.Подразделения");
	СловарьЗамены.Вставить("СправочникСсылка.бит_ЦФО"                   ,"СправочникСсылка.Подразделения");
	СловарьЗамены.Вставить("СправочникОбъект.бит_ЦФО"                   ,"СправочникОбъект.Подразделения");
	
	СловарьЗамены.Вставить("Справочники.бит_Проекты"                    ,"Справочники.Проекты");
	СловарьЗамены.Вставить("Справочник.бит_Проекты"                     ,"Справочник.Проекты");
	СловарьЗамены.Вставить("СправочникСсылка.бит_Проекты"               ,"СправочникСсылка.Проекты");
	СловарьЗамены.Вставить("СправочникОбъект.бит_Проекты"               ,"СправочникОбъект.Проекты");
	
	СловарьЗамены.Вставить(".бит_Номенклатура",".бит_Аналитика_5");
	
	// Определим строки для удаления
	ДляУдаления = Новый Массив;
	ДляУдаления.Добавить("СуммаБезНДСРегл");
	ДляУдаления.Добавить("СуммаБезНДСУпр");
	ДляУдаления.Добавить("СуммаБезНДССценарий");
	
	СтрПарПроверка = Новый Структура;
	СтрПарПроверка.Вставить("СловарьЗамены", СловарьЗамены);
	СтрПарПроверка.Вставить("ДляУдаления"  , ДляУдаления);

	Возврат СтрПарПроверка;
	
КонецФункции // ПодготовитьСловари()

// Процедура устраняет проблемы в коде настроек.
// 
&НаСервере
Процедура УстранитьПроблемы()

	 СтрПарПроверка = ПодготовитьСловари();
	
	 Для каждого СтрокаТаблицы Из Объект.ОбъектыКонвертации Цикл
	 
	 	  Если НЕ СтрокаТаблицы.Выполнять ИЛИ СтрокаТаблицы.ОбъектРаботоспособен Тогда
		  
		  	   Продолжить;
		  
		  КонецЕсли; 
		  
		  РезСтр = Неопределено;
		  
		  Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.бит_Запросы") Тогда
			  
			  ИсправитьЗапрос(СтрокаТаблицы, СтрокаТаблицы.ОписаниеОшибки, СтрПарПроверка);
			  РезСтр = ПроверитьЗапрос(СтрокаТаблицы.Объект);
			  
		  ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.бит_ПравилаЗаполненияПолейПриТрансляции") Тогда	  
			  
			  ИсправитьПравилоЗаполнения(СтрокаТаблицы, СтрПарПроверка);
			  
			  // Проверим результат исправления
  			 СтрПар = Новый Структура("ПравилоЗаполнения, Источник, Приемник, КодЗаполнения"
                             , СтрокаТаблицы.Объект
							 , СтрокаТаблицы.Объект.Источник
							 , СтрокаТаблицы.Объект.Приемник
							 , СтрокаТаблицы.Объект.КодЗаполнения);
										 
			 РезСтр = ПроверитьПравилоЗаполнения(СтрПар);	

		  ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.бит_ПользовательскиеФункции") Тогда
			 
			 ИсправитьПользовательскуюФункцию(СтрокаТаблицы, СтрПарПроверка); 
			 РезСтр = ПроверитьПользовательскуюФункцию(СтрокаТаблицы.Объект);
			 
		  ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.бит_КомплектыДвижений") Тогда	 
			  
			 ИсправитьКомплектШаблонов(СтрокаТаблицы, СтрПарПроверка); 
			 РезСтр = ПроверитьКомплектМХО(СтрокаТаблицы.Объект);
			  
		  КонецЕсли; 
		  
		  Если ТипЗнч(РезСтр) = Тип("Структура") Тогда
			  
			  Если РезСтр.ОК Тогда
				  
				  СтрокаТаблицы.ОбъектРаботоспособен = Истина;
				  СтрокаТаблицы.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
				  СтрокаТаблицы.ОписаниеОшибки = "";
				  
			  Иначе	
				  
				  СтрокаТаблицы.ОписаниеОшибки = РезСтр.ОписаниеОшибки;
				  
			  КонецЕсли;  
			  
		  КонецЕсли; 
		  
	 КонецЦикла; 

КонецПроцедуры // УстранитьПроблемы()

#КонецОбласти

