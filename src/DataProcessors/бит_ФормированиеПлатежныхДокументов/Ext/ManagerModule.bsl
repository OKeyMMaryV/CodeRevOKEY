#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция создает структуру, хранящую настройки.
// 
// Параметры:
//   Объект.
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
Функция ЗаполнитьНастройки(Обработка) Экспорт

	Настройки = Новый Структура;
	Настройки.Вставить("ПериодРасхода", 						Обработка.ПериодРасхода);
	Настройки.Вставить("РежимЗаписи", 							Обработка.РежимЗаписи);
	Настройки.Вставить("РежимСообщений", 						Обработка.РежимСообщений);	
	Настройки.Вставить("НеФормироватьПлатежныеПоручения", 		Обработка.НеФормироватьПлатежныеПоручения);
	Настройки.Вставить("ПроводитьПлатежныеПоручения", 			Обработка.ПроводитьПлатежныеПоручения);
	Настройки.Вставить("НеФормироватьДокументыОплаты", 			Обработка.НеФормироватьДокументыОплаты);
	Настройки.Вставить("ПроводитьДокументыОплаты", 				Обработка.ПроводитьДокументыОплаты);
	Настройки.Вставить("РежимТабло",							Обработка.РежимТабло);
	Настройки.Вставить("ИсточникДанныхТабло",					Обработка.ИсточникДанныхТабло);
	Настройки.Вставить("ИнтервалАвтообновленияТаблоСчетов",		Обработка.ИнтервалАвтообновленияТаблоСчетов);
	Настройки.Вставить("ОтменитьФильтрПоСчетамВТабло", 			Обработка.ОтменитьФильтрПоСчетамВТабло);
	Настройки.Вставить("ПоказыватьСуммуПланируемыхПоступлений", Обработка.ПоказыватьСуммуПланируемыхПоступлений);
	Настройки.Вставить("ПользовательскиеНастройки",				Обработка.Компоновщик.ПользовательскиеНастройки);
			
	Возврат Настройки;
	
КонецФункции // УпаковатьНастройкиВСтруктуруМодуль()

// Функция создает структуру, хранящую настройки.
// 
// Параметры:
//   Объект.
//   СтруктураНастроек - Структура.
// 
Процедура НастроитьОбработку(Обработка, Настройки) Экспорт

	Настройки.Свойство("ПериодРасхода", 						Обработка.ПериодРасхода);
	Настройки.Свойство("РежимЗаписи", 							Обработка.РежимЗаписи);
	Настройки.Свойство("РежимСообщений", 						Обработка.РежимСообщений);
	Настройки.Свойство("НеФормироватьПлатежныеПоручения", 		Обработка.НеФормироватьПлатежныеПоручения);
	Настройки.Свойство("ПроводитьПлатежныеПоручения", 			Обработка.ПроводитьПлатежныеПоручения);
	Настройки.Свойство("НеФормироватьДокументыОплаты", 			Обработка.НеФормироватьДокументыОплаты);
	Настройки.Свойство("ПроводитьДокументыОплаты", 				Обработка.ПроводитьДокументыОплаты);
	Настройки.Свойство("РежимТабло", 							Обработка.РежимТабло);	
	Настройки.Свойство("ИсточникДанныхТабло", 					Обработка.ИсточникДанныхТабло);
	Настройки.Свойство("ИнтервалАвтообновленияТаблоСчетов", 	Обработка.ИнтервалАвтообновленияТаблоСчетов);
	Настройки.Свойство("ОтменитьФильтрПоСчетамВТабло",		    Обработка.ОтменитьФильтрПоСчетамВТабло);	
	Настройки.Свойство("ПоказыватьСуммуПланируемыхПоступлений", Обработка.ПоказыватьСуммуПланируемыхПоступлений);
	
	// Загрузка пользовательских настроек в компоновщик.
	ПользовательскиеНастройки = Настройки.ПользовательскиеНастройки;
	Обработка.Компоновщик.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	
КонецПроцедуры // НастроитьОбработку()

Процедура СоздатьДокументыОплаты(НастройкиПараметров, АдресВХранилище) Экспорт

	НовыеДокументы = Новый СписокЗначений(); 

	ДобавленоДокументов = 0;
	Для каждого Элемент Из НастройкиПараметров Цикл
		
		ПлатежныеПозиции = Элемент.Значение.ПлатежныеПозиции;
		
		Для каждого ПлатежнаяПозиция Из ПлатежныеПозиции Цикл
			ПараметрыФормирования = Элемент.Значение;
			ПлатежныеДокументы = бит_Казначейство.СформироватьДокументыОплаты(ПлатежнаяПозиция, 
				ПараметрыФормирования);
			
			Для каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
				НовыеДокументы.Добавить(ПлатежныйДокумент); 
			КонецЦикла; 
		КонецЦикла; 		
	КонецЦикла; 
	
	ДобавленоДокументов = НовыеДокументы.Количество();
	
	Результат = Новый Структура; 
	Результат.Вставить("Сообщения", ПолучитьСообщенияПользователю(Истина));
	Результат.Вставить("Выполнено", ДобавленоДокументов <> 0);
	Результат.Вставить("НовыеДокументы",НовыеДокументы);
	
	ПоместитьВоВременноеХранилище(Результат, АдресВХранилище); 
	
КонецПроцедуры
 
#КонецОбласти

#КонецЕсли