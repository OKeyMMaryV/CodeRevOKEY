	
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийБанковскийСчет; // Хранит текущий банковский счет для передачи между обработчиками НачалоВыбора и ПриИзменении.

&НаКлиенте
Перем мНастраиваемыйОбъект; // Хранит строку обозначающую настраиваемый объект.

&НаКлиенте
Перем мТекущаяНастройка; // Хранит актуальную настройку.

&НаКлиенте
Перем мУстановленОтбор; // Хранит актуальную настройку.

&НаКлиенте
Перем мУстанавливатьОтборВПеречне; // Хранит признак повторного входа в процедуру активизации строки в табло счетов
                                   // (пока значение переменной неопределено - отбор в перечне не устанавливается).

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_ФормированиеПлатежныхДокументов;
	
	// Вызов механизма защиты
	 	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;

	ТекущаяКонтрольнаяСумма = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	ЗаполнитьКэшЗначений();
	УстановитьУсловноеОформление();
	
	// Отобразим дополнительные измерения в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект
																	, "ПереченьДокументов"
																	, фКэшЗначений.ИзмеренияДоп
																	, фКэшЗначений.НастройкиИзмерений);

																	
	// Инициализация схемы компановки данных
	АдресСхемыКомпоновкиДанных = бит_Казначейство.ПолучитьДляПеречняДокументовАдресСКД(Объект.Компоновщик);
	
	ОбновитьТаблоПлатежейСервер();
	УстановитьОтборСформированныхДокументов(СформированныеДокументы, Новый СписокЗначений());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Если Объект.ИнтервалАвтообновленияТаблоСчетов > 0 Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьТабло", 
									Объект.ИнтервалАвтообновленияТаблоСчетов, Ложь);
		
	КонецЕсли; 
								
	мНастраиваемыйОбъект = "ОтчетОбъект.бит_ФормированиеПлатежныхДокументов";
	
	УстановитьЗначенияПоУмолчанию();
	
	мУстановленОтбор = Ложь;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если СтрСравнить(ИмяСобытия, "Записан_ПлатежнаяПозиция") = 0 Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц();	
	ИначеЕсли СтрСравнить(ИмяСобытия, "ГрупповаяОплатаЗаявокЗавершена") = 0 И Источник = ЭтотОбъект Тогда
		БылоДокументов   = ДобавленоДокументов;
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Для каждого Элемент Из Параметр.СписокДокументовСписания Цикл
				ЗаполнитьЗначенияСвойств(ДобавленныеДокументы.Добавить(), Элемент);
			КонецЦикла; 
			ДобавленоДокументов = ДобавленныеДокументы.Количество();
		КонецЕсли; 
		Если БылоДокументов <> ДобавленоДокументов Тогда
			УстановитьОтборСформированныхДокументов(СформированныеДокументы, ДобавленныеДокументы);
			ОбновитьПереченьДокументовТаблоСчетовТаблоПлатежей();
			ОповеститьОЗавершенииФормированияДокументов();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаОплатыПриИзменении(Элемент)
	
	ДатаОплаты = ?(ЗначениеЗаполнено(Объект.ДатаОплаты), Объект.ДатаОплаты, ТекущаяДата());	
	
	СтрокиПересчета = Новый СписокЗначений;
	КоличествоСтрок = Объект.ПереченьДокументов.Количество();
	МассивСтрок = Новый Массив;
	
	Для каждого СтрокаТаблицы Из Объект.ПереченьДокументов Цикл
					
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда

			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
			МассивПараметров.Добавить(СтрокаТаблицы.Валюта);
			МассивПараметров.Добавить(СтрокаТаблицы.СуммаОстаток);
			МассивПараметров.Добавить(СтрокаТаблицы.ПлатежнаяПозиция);
            МассивСтрок.Добавить(МассивПараметров);
						
		КонецЕсли; 
		
	КонецЦикла;
	
	ПересчитатьСуммыПлатежейПоВалюте(ДатаОплаты, МассивСтрок);
	
	Для каждого СтрокаПерерасчета Из МассивСтрок Цикл
		
		СуммаПлатежа  = СтрокаПерерасчета[4];
		
		СтрокаТаблицы = Объект.ПереченьДокументов.НайтиПоИдентификатору(СтрокаПерерасчета[0]);
		
		КоэффициентСумм = ?(СтрокаТаблицы.СуммаКОплатеНач = 0, 1,
							СтрокаТаблицы.СуммаКОплатеНач / СтрокаТаблицы.СуммаКОплате);

		СтрокаТаблицы.СуммаКОплате    = СуммаПлатежа / КоэффициентСумм;
		СтрокаТаблицы.СуммаКОплатеНач = СуммаПлатежа;
		
	КонецЦикла; 
	
КонецПроцедуры // ДатаОплатыПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблоСчетов

&НаКлиенте
Процедура ТаблоСчетовПриАктивизацииСтроки(Элемент)
	
	Если мУстанавливатьОтборВПеречне <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.ТаблоСчетов.ТекущиеДанные;
		
		Если ТекущаяСтрока <> Неопределено И Объект.РежимТабло = "УстанавливатьОтборы" Тогда
			УстановитьОтборВЗаявках(ТекущаяСтрока.КонтрольнаяСумма);
		КонецЕсли; 	
	КонецЕсли; 
	
	мУстанавливатьОтборВПеречне = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереченьДокументов

&НаКлиенте
Процедура ПереченьДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры // ПереченьДокументовПередНачаломДобавления()

&НаКлиенте
Процедура ПереченьДокументовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры // ПереченьДокументовПередУдалением()

&НаКлиенте
Процедура ПереченьДокументовОплаченоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	//Если ФлажокОплаченоДоступен(ТекущаяСтрока.ПолучитьИдентификатор()) Тогда
		
		// Произведем вычисления в табличном поле "ТаблоСчетов".
		ОбработатьИзменениеФлажка(ТекущаяСтрока);
		
	//Иначе		
	//	
	//	ТекущаяСтрока.Оплачено = Не ТекущаяСтрока.Оплачено;
	//	ТекстСообщения = НСтр("ru = 'К оплате могут быть допущены только проведенные платежные позиции.'");
	//	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	//
	//КонецЕсли;

КонецПроцедуры // ПереченьДокументовОплаченоПриИзменении()

&НаКлиенте
Процедура ПереченьДокументовПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ПереченьДокументов.ТекущиеДанные;
	ВыделитьТекущуюСтрокуВТабло(ТекущаяСтрока);
	 	
КонецПроцедуры // ПереченьДокументовПриАктивизацииСтроки()

&НаКлиенте
Процедура ПереченьДокументовБанковскийСчетОрганизацияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПереченьДокументов.ТекущиеДанные;
	БанковскийСчет   = ТекущаяСтрока.БанковскийСчетОрганизация;
	ПлатежнаяПозиция = ТекущаяСтрока.ПлатежнаяПозиция;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ОбновитьПлатежнуюПозицию(ПлатежнаяПозиция, БанковскийСчет, мТекущийБанковскийСчет, Объект.РежимСообщений);
		Если БанковскийСчет <> мТекущийБанковскийСчет Тогда
			ОбновитьТаблоСчетов();
			РасчитатьСуммыРасхода();
		Иначе
			ТекущаяСтрока.БанковскийСчетОрганизация = мТекущийБанковскийСчет;
		КонецЕсли; 
	КонецЕсли; 

	мТекущийБанковскийСчет = Неопределено; 
	
КонецПроцедуры // ПереченьДокументовБанковскийСчетОрганизацияПриИзменении()

&НаКлиенте
Процедура ПереченьДокументовБанковскийСчетОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ПереченьДокументов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мТекущийБанковскийСчет = ТекущаяСтрока.БанковскийСчетОрганизация;
	
	РасчетыВУЕ 		= ТекущаяСтрока.РасчетыВУсловныхЕдиницах;
	ВалютаДляОтбора = ?(РасчетыВУЕ, фКэшЗначений.ВалютаРегл, ТекущаяСтрока.ВалютаДокумента);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец"       			,ТекущаяСтрока.Организация);
	СтруктураПараметров.Вставить("ВалютаДенежныхСредств"	,ВалютаДляОтбора);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизация",ТекущаяСтрока.БанковскийСчетОрганизация);
    СтруктураПараметров.Вставить("ЭлементВладелец"			, Элемент);

	бит_РаботаСДиалогамиКлиент.ОткрытьФормуВыбораРасчетногоСчета(СтруктураПараметров);
	
КонецПроцедуры // ПереченьДокументовБанковскийСчетОрганизацияНачалоВыбора()

&НаКлиенте
Процедура ПереченьДокументовСуммаКОплатеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	// Проверим превышение суммы к оплате над суммой план.
	ПроверитьПревышениеСуммыКОплатеНадСуммойПлан_ВСтроке(ТекущаяСтрока, Истина);
	
	ОбновитьТаблоСчетов(Истина);
	РасчитатьСуммыРасхода();

КонецПроцедуры // ПереченьДокументовСуммаКОплатеПриИзменении()

&НаКлиенте
Процедура ПереченьДокументовПлатежнаяПозицияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущаяСтрока.ПлатежнаяПозиция);
	
	Оповещение = Новый ОписаниеОповещения("ПлатежнаяПозицияОткрытиеОкончание",ЭтотОбъект);
	ОткрытьФорму("Документ.бит_ПлатежнаяПозиция.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ПереченьДокументовПлатежнаяПозицияОткрытие()

// Процедура окончание процедуры "ПереченьДокументовПлатежнаяПозицияОткрытие".
// 
&НаКлиенте 
Процедура ПлатежнаяПозицияОткрытиеОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	// Проверим, может быть изменилась сумма
	ОбработатьИзмененияВПлатежнойПозиции(ТекущаяСтрока.ПлатежнаяПозиция, ТекущаяСтрока.ПолучитьИдентификатор());
	
	ОбновитьТаблоСчетов(Истина);
	РасчитатьСуммыРасхода();
	
КонецПроцедуры // ПлатежнаяПозицияОткрытиеОкончание()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДействияФормыОбновить(Команда)
	
	Если Объект.ПереченьДокументов.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ДействияФормыОбновитьОкончание", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, НСтр("ru='Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет); 
		
	Иначе 
		ТаблоСчетов.ПолучитьЭлементы().Очистить();
		// Обновление табличных полей
		ОбновитьПереченьДокументовТаблоСчетовТаблоПлатежей();
		// Раскроем табло счетов
		ОбновитьТаблоСчетов();
	КонецЕсли;	
		
КонецПроцедуры

// Процедура окончание процедуры "ДействияФормыОбновить".
// 
&НаКлиенте 
Процедура ДействияФормыОбновитьОкончание(Ответ, ДополнительныеДанные) Экспорт

	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПереченьДокументов.Очистить();
	
	ТаблоСчетов.ПолучитьЭлементы().Очистить();
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.ГруппаПереченьДокументов;
	
	// Обновление табличных полей
	ОбновитьПереченьДокументовТаблоСчетовТаблоПлатежей();
	
	// Раскроем табло счетов
	ОбновитьТаблоСчетов();
	
КонецПроцедуры // ДействияФормыОбновитьОкончание()

&НаКлиенте
Процедура ДействияФормыНастройка(Кнопка)
	
	СтруктураНастроек = ЗаполнитьНастройки();
	ПараметрыФормы = Новый Структура("СтруктураНастроек", СтруктураНастроек);

	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиОкончание",ЭтотОбъект);
	ОткрытьФорму("Обработка.бит_ФормированиеПлатежныхДокументов.Форма.ФормаНастройки",ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройка()

// Процедура окончание процедуры "ДействияФормыНастройка".
// 
&НаКлиенте 
Процедура ОткрытьНастройкиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	СтруктураНастроек = РезультатВыбора;
	
    Если СтруктураНастроек = Неопределено Тогда
    	Возврат;
    КонецЕсли;
		
	НастроитьОбработку(РезультатВыбора);
	
	Если Объект.ИнтервалАвтообновленияТаблоСчетов > 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьТабло", 
			Объект.ИнтервалАвтообновленияТаблоСчетов, Ложь);
	Иначе
		ОтключитьОбработчикОжидания("ОбработчикОжиданияОбновитьТабло");
	КонецЕсли; 
	
	Если Объект.РежимТабло = "Автономно" Тогда
		Элементы.ПереченьДокументов.ОтборСтрок = Неопределено;
	КонецЕсли; 
	
	ОбновитьТаблоСчетов();
	РасчитатьСуммыРасхода();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеПлатежныеДокументы(Команда)

	СоздатьПлатежныеДокументы();
   
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеДокументы(Команда)
	
	СоздатьПлатежныеДокументы(ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные"));
	
КонецПроцедуры

&НаКлиенте
Процедура РасходныеКассовыеОрдера(Команда)
	
	СоздатьПлатежныеДокументы(ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Наличные"));
	 
КонецПроцедуры

&НаКлиенте
Процедура КомандаГрупповаяОплата(Команда)
		
	ОткрытьФорму("Обработка.бит_ГрупповаяОплатаЗаявок.Форма",  ПараметрыГрупповойОплатыЗаявок(), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНастройкаПериода(Команда)
	
	ВыборПериода(Объект.ПериодРасхода);
	
КонецПроцедуры // ДействиеНастройкаПериода()
  
&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ОбработатьФлаги(0);
	
КонецПроцедуры // СнятьВсе()

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	ОбработатьФлаги(1);
	
КонецПроцедуры // УстановитьВсе()
 
&НаКлиенте
Процедура Инвертировать(Команда)
	
	ОбработатьФлаги(2);
	
КонецПроцедуры // Инвертировать()

&НаКлиенте
Процедура ТаблоСчетовРазвернутьВсе(Команда)
	
	РазвернутьУзлыТаблоСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблоСчетовСвернутьВсе(Команда)
	
	Для каждого Элемент Из ТаблоСчетов.ПолучитьЭлементы() Цикл
		Элементы.ТаблоСчетов.Свернуть(Элемент.ПолучитьИдентификатор());
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// ТаблоСчетов
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблоСчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблоСчетов.СуммаКонОстаток", ВидСравненияКомпоновкиДанных.Меньше, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблоСчетов");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблоСчетов.КонтрольнаяСумма", ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных("ТекущаяКонтрольнаяСумма"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.бит_ОсновнойЭлементСписка);
	
	// ЗаявкиБанковскийСчетОрганизация, ЗаявкиСуммаКОплате, ЗаявкиОплачено.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПереченьДокументовБанковскийСчетОрганизация");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПереченьДокументовСуммаКОплате");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПереченьДокументовОплачено");
	
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,,
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.ПереченьДокументов.ПлатежныйДокумент", ВидСравненияКомпоновкиДанных.Заполнено, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.ПереченьДокументов.ОплаченоДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ЗаявкиБанковскийСчетОрганизация.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПереченьДокументовБанковскийСчетОрганизация");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПереченьДокументов.ФормаОплаты", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыДенежныхСредств.Наличные);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ЗаявкиОплачено.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПереченьДокументовОплачено");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПереченьДокументов.СуммаКОплате", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры
 
// Процедура открывает форму выбора периода.
// 
// Параметры:
//  Период  - Стандартный период
// 
&НаКлиенте
Процедура ВыборПериода(Период)

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Период;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВыборПериода",ЭтотОбъект);
	Диалог.Показать(Оповещение);
	 
КонецПроцедуры // ВыборПериода()

// Процедура выбора периода 
// 
&НаКлиенте 
Процедура ПоказатьВыборПериода(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
	
		Объект.ПериодРасхода = РезультатВыбора;
	
	КонецЕсли; 
	
КонецПроцедуры // ПоказатьВыборПериода

&НаКлиенте
Функция НайтиСтрокуВТаблоСчетов(КонтрольнаяСумма, Коллекция)
	
	Результат = Неопределено;
	
	Для каждого Элемент Из Коллекция Цикл
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если Элемент.КонтрольнаяСумма = КонтрольнаяСумма Тогда
			Результат = Элемент;
		Иначе
			ПодчиненныеСтроки = Элемент.ПолучитьЭлементы();
			Если ПодчиненныеСтроки.Количество() > 0 Тогда
				Результат = НайтиСтрокуВТаблоСчетов(КонтрольнаяСумма, ПодчиненныеСтроки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// Процедура производит вычисления в табло счетов 
// при изменении флажка в табличном поле ПереченьДокументов.
// 
// Параметры:
//  ТекущаяСтрока  - ДанныеФормыЭлементКоллекции - текущая строка перечня документов.
// 
&НаКлиенте
Процедура ОбработатьИзменениеФлажка(ТекущаяСтрока)

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
                
	 СтрокаТабло = НайтиСтрокуВТаблоСчетов(ТекущаяСтрока.КонтрольнаяСумма, ТаблоСчетов.ПолучитьЭлементы());
	 
	 Если СтрокаТабло <> Неопределено Тогда
		 Оплачено = ?(ТекущаяСтрока.Оплачено, ТекущаяСтрока.СуммаКОплате, - ТекущаяСтрока.СуммаКОплате); 
	 	 СтрокаТабло.СуммаРасход 	= СтрокаТабло.СуммаРасход + Оплачено;
	 	 СтрокаТабло.СуммаКонОстаток = СтрокаТабло.СуммаНачОстаток + СтрокаТабло.СуммаПриход - СтрокаТабло.СуммаРасход;
	 КонецЕсли; 
	 
КонецПроцедуры
 
// Процедура управляет флагами в табличной части.
// 
// Парметры:
//  ЗначениеФлага - Число (0 - снять флаги, 1 - установить истина, 2 - инвертировать).
&НаКлиенте
Процедура ОбработатьФлаги(ЗначениеФлага)
	
	Для каждого СтрокаТаблицы Из Объект.ПереченьДокументов Цикл
		Если НЕ СтрокаТаблицы.ОплаченоДоступность Тогда
			Продолжить;		
		КонецЕсли; 
		
		ПредыдущееЗначениеФлага = СтрокаТаблицы.Оплачено;
		Если ЗначениеФлага = 0 Тогда
			СтрокаТаблицы.Оплачено = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			СтрокаТаблицы.Оплачено = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			СтрокаТаблицы.Оплачено = НЕ СтрокаТаблицы.Оплачено;
		КонецЕсли; 
		
		Если ПредыдущееЗначениеФлага <> СтрокаТаблицы.Оплачено Тогда
			ОбработатьИзменениеФлажка(СтрокаТаблицы);
		КонецЕсли; 
	
	КонецЦикла; 
	ОбновитьТаблоПлатежейСервер();
	
КонецПроцедуры
  
// Процедура устанавливает текущую строку в ТаблоСчетов в зависимости 
// от текущей строки ПеречняДокументов.
// 
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.ПереченьДокументов.
// 
&НаКлиенте
Процедура ВыделитьТекущуюСтрокуВТабло(ТекущаяСтрока)

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекущаяКонтрольнаяСумма = ТекущаяСтрока.КонтрольнаяСумма;
	Элемент = НайтиСтрокуВТаблоСчетов(ТекущаяКонтрольнаяСумма, ТаблоСчетов.ПолучитьЭлементы());
	Если Элемент <> Неопределено  Тогда
		Элементы.ТаблоСчетов.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
	КонецЕсли; 

КонецПроцедуры

// Функция выполняет поиск строк ТаблоСчетов, 
// соответствующих текущей строке таблицы ПереченьДокументов.
// 
// Параметры:
//  ТекущаяСтрока  - СтрокаДереваЗначений.ТаблоСчетов.
// 
// Возвращаемое значение:
//   МассивСтрок   - Массив.
// 
&НаКлиенте
Процедура УстановитьОтборВЗаявках(КонтрольнаяСумма)
	
	Элементы.Заявки.ОтборСтрок = Неопределено;
	
	Если ПустаяСтрока(КонтрольнаяСумма) Тогда
		Элементы.Заявки.ОтборСтрок = Неопределено;
		мУстановленОтбор = Ложь;
	Иначе
		Отбор = Новый Структура("КонтрольнаяСумма", КонтрольнаяСумма);
		Элементы.Заявки.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		мУстановленОтбор = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет превышение суммы к оплате над суммой план 
// в строке табличной части.
// 
// Параметры:
//  СтрокаТабЧасти    - СтрокаТабличнойЧасти.Заявки.
//  ЭтоИзменениеСуммы - Булево.
//  Отказ             - Булево, флаг превышения суммы к оплате над суммой план.
// 
&НаКлиенте
Процедура ПроверитьПревышениеСуммыКОплатеНадСуммойПлан_ВСтроке(СтрокаТабЧасти, ЭтоИзменениеСуммы, Отказ = Ложь) Экспорт 
    
    Если СтрокаТабЧасти = Неопределено Тогда
        Возврат;
    КонецЕсли; 
    
    ВведеннаяСуммаКОплате = СтрокаТабЧасти.СуммаКОплате;
    
    Если ВведеннаяСуммаКОплате > СтрокаТабЧасти.СуммаКОплатеНач Тогда
        
        // Это превышение.
        Если Не ЭтоИзменениеСуммы Тогда
            ТекстНачальногоСообщения = "В строке номер """ + СтрокаТабЧасти.НомерСтроки + """ табличной части ""Заявки"": ";
        Иначе
            ТекстНачальногоСообщения = "";
            СтрокаТабЧасти.СуммаКОплате = СтрокаТабЧасти.СуммаКОплатеНач;
        КонецЕсли;
        
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстНачальногоСообщения + "Введенная сумма к оплате (" + ВведеннаяСуммаКОплате + 
                                          ") превышает сумму план (" + СтрокаТабЧасти.СуммаКОплатеНач + ").");
        Отказ = Истина;
        
    КонецЕсли;
    
КонецПроцедуры // ПроверитьПревышениеСуммыКОплатеНадСуммойПлан_ВСтроке()

// Процедура обновляет табличное поле табло счетов.
// 
// Параметры:
//  ТолькоРазвернуть 	  - Булево.
//  ОбновитьТаблоПлатежей - Булево.
// 
&НаКлиенте
Процедура ОбновитьТаблоСчетов(ОбновитьТаблоПлатежей = Ложь)
	
	ОбновитьТаблоСчетовСервер(ОбновитьТаблоПлатежей);
	мУстановленОтбор = Ложь;

	РазвернутьУзлыТаблоСчетов();	
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУзлыТаблоСчетов()

	Для каждого Элемент Из ТаблоСчетов.ПолучитьЭлементы() Цикл
		Элементы.ТаблоСчетов.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
	КонецЦикла;	

КонецПроцедуры

// Процедура расчитывает суммы расхода в табло счетов.
// 
&НаКлиенте
Процедура РасчитатьСуммыРасхода()

	// Рассчитаем суммы расхода в табло счетов
	Для Каждого СтрокаТаблицы Из Объект.ПереченьДокументов Цикл
		Если СтрокаТаблицы.Оплачено И Не ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда
			ОбработатьИзменениеФлажка(СтрокаТаблицы);
		КонецЕсли; 
	КонецЦикла; 
 
КонецПроцедуры // РасчитатьСуммыРасхода()

// Процедура обработчик ожидания. Обновляет табло счетов.
// 
&НаКлиенте
Процедура ОбработчикОжиданияОбновитьТабло()

	ОбновитьТаблоСчетов();
	РасчитатьСуммыРасхода();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для каждого СтрокаТаблицы Из Объект.ПереченьДокументов Цикл
		ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы);
	КонецЦикла; 	

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы)

	СтрокаТаблицы.ОплаченоДоступность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ПлатежнаяПозиция, "Проведен")
										И (СтрокаТаблицы.СтатусЗаявки = Справочники.бит_СтатусыОбъектов.Заявка_Утверждена
										ИЛИ СтрокаТаблицы.СостояниеОплаты = Справочники.бит_СтатусыОбъектов.ЧастичнаяОплата);
										
	СтрокаТаблицы.КонтрольнаяСумма = КонтрольнаяСуммаСтрокой(СтрокаТаблицы.Валюта, 
			СтрокаТаблицы.БанковскийСчетОрганизация, СтрокаТаблицы.Организация);
	
КонецПроцедуры 

&НаСервере
Функция КонтрольнаяСуммаСтрокой(Валюта, БанковскийСчет, Организация)
		
	Возврат бит_Казначейство.КонтрольнаяСтрокиСуммаДереваСчетов(Валюта, БанковскийСчет, Организация);
		
КонецФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	КэшПеречисления = Новый Структура;
 	КэшПеречисления.Вставить("бит_ВидыДенежныхСредств", 
							бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыДенежныхСредств));
						
	КэшПеречисления.Вставить("бит_РежимПолученияДанныхТаблоСчетов", 
							бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РежимПолученияДанныхТаблоСчетов));
							
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	фКэшЗначений.Вставить("ЭтоБухгалтерия", бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия());
	фКэшЗначений.Вставить("ПустойБанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_ФормированиеПлатежныхДокументов"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , ДокументОбъект.мИзмеренияДоп);
	фКэшЗначений.Вставить("НастройкиИзмерений", ДокументОбъект.мНастройкиИзмерений);
	
	фКэшЗначений.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_ФормированиеПлатежныхДокументов");
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура обновляет конкретную строку в табличном поле ПереченьДокументов.
// 
// Параметры:
// 	ПлатежнаяПозиция - ДокументСсылка.бит_ПлатежнаяПозиция.
// 	ИДСтроки - число - идентификатор строки для обновления.
&НаСервере
Процедура ОбновитьСтрокуПеречняДокументов(ПлатежнаяПозиция, ИДСтроки)
	
	Запрос = бит_Казначейство.ПолучитьДляПеречняДокументовЗапросСКД(АдресСхемыКомпоновкиДанных, 
																	Объект.Компоновщик, Объект.ПериодРасхода);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.НайтиСледующий(ПлатежнаяПозиция, "ПлатежнаяПозиция") Тогда
		
		ТекущаяСтрока = Объект.ПереченьДокументов.НайтиПоИдентификатору(ИДСтроки);
		
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,Выборка);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Дата"			  , ?(ЗначениеЗаполнено(Объект.ДатаОплаты), Объект.ДатаОплаты, ТекущаяДата()));
		СтруктураПараметров.Вставить("ВалютаДокумента", ТекущаяСтрока.Валюта);
		СуммаПлатежа = бит_Казначейство.ПересчитатьСуммуПлатежаПоВалюте(ТекущаяСтрока.СуммаОстаток, 
																		ТекущаяСтрока.ПлатежнаяПозиция, СтруктураПараметров);
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПлатежныйДокумент) Тогда
			
			ТекущаяСтрока.СуммаКОплате 	  = СуммаПлатежа;
			ТекущаяСтрока.СуммаКОплатеНач = СуммаПлатежа;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСтрокуПеречняДокументов()

// Процедура обрабатывает изменение суммы в платежной позиции,
// 	если сумма изменилась происходит обновление текущей строки в перечне документов.
// 
// Параметры:
// 	ПлатежнаяПозиция - ДокументСсылка.бит_ПлатежнаяПозиция.
// 	ИДСтроки - число - идентификатор текущей строки.
// 
&НаСервере
Процедура ОбработатьИзмененияВПлатежнойПозиции(ПлатежнаяПозиция, ИДСтроки)
	
	ТекущаяСтрока = Объект.ПереченьДокументов.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка,
	|	СУММА(бит_ПлатежнаяПозицияРаспределение.Сумма) КАК Сумма
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
	|ГДЕ
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка = &ПлатежнаяПозиция
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка";
	
	Запрос.УстановитьПараметр("ПлатежнаяПозиция", ТекущаяСтрока.ПлатежнаяПозиция);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если НЕ Выборка.Сумма = ТекущаяСтрока.Сумма Тогда
			
			ОбновитьСтрокуПеречняДокументов(ТекущаяСтрока.ПлатежнаяПозиция, ИДСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзмененияВПлатежнойПозиции()

// Процедура обновляет табличное поле "ПереченьДокументов".
// 
&НаСервере
Процедура ОбновитьПереченьДокументовТаблоСчетовТаблоПлатежей()
	 
	 Запрос    = бит_Казначейство.ПолучитьДляПеречняДокументовЗапросСКД(АдресСхемыКомпоновкиДанных, 
												Объект.Компоновщик, Объект.ПериодРасхода);
	 Результат = Запрос.Выполнить();
	 
	 Если Результат.Пустой() Тогда
	 	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Нет данных, удовлетворяющих отбору.");
	 КонецЕсли; 
	 
	 Объект.ПереченьДокументов.Очистить();
	 
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
		 
		 НоваяСтрока = Объект.ПереченьДокументов.Добавить();
		 ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		 
		 СтруктураПараметров = Новый Структура;
		 СтруктураПараметров.Вставить("Дата", ?(ЗначениеЗаполнено(Объект.ДатаОплаты), Объект.ДатаОплаты, ТекущаяДата()));
		 СтруктураПараметров.Вставить("ВалютаДокумента", НоваяСтрока.Валюта);
		 СуммаПлатежа = бит_Казначейство.ПересчитатьСуммуПлатежаПоВалюте(НоваяСтрока.СуммаОстаток, 
		 НоваяСтрока.ПлатежнаяПозиция, СтруктураПараметров);
		 
		 Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПлатежныйДокумент) Тогда
			 НоваяСтрока.СуммаКОплате 	  = СуммаПлатежа;
			 НоваяСтрока.СуммаКОплатеНач = СуммаПлатежа;
		 КонецЕсли; 
		 ЗаполнитьДобавленныеКолонкиСтроки(НоваяСтрока);
	 КонецЦикла;
	
	// Сразу обновляем табло счетов и табло платежей.
	ОбновитьТаблоСчетовСервер(Истина);
	     		
КонецПроцедуры // ОбновитьПереченьДокументовТаблоСчетовТаблоПлатежей()

// Процедура  обновляет табличное поле "ТаблоСчетов".
// 
&НаСервере
Процедура ОбновитьТаблоСчетовСервер(ОбновитьТаблоПлатежей = Ложь)

	ТаблоСчетов.ПолучитьЭлементы().Очистить();
	
	Если Объект.ПереченьДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;   	

	ТаблицаПеречень = Объект.ПереченьДокументов.Выгрузить();
	
	Результат = бит_Казначейство.ПолучитьДанныеДляЗаполненияТаблоСчетов(ТаблицаПеречень,
					Объект.ОтменитьФильтрПоСчетамВТабло, Объект.ПоказыватьСуммуПланируемыхПоступлений,
					Объект.ИсточникДанныхТабло);
		
	ДеревоТаблоСчетов = ДанныеФормыВЗначение(ТаблоСчетов, Тип("ДеревоЗначений"));
	ДеревоТаблоСчетов = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоТаблоСчетов.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ДеревоТаблоСчетов.Колонки.Добавить("КонтрольнаяСумма", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	
	бит_Казначейство.ЗаполнитьОписаниеВДереве(ДеревоТаблоСчетов);
	ЗначениеВДанныеФормы(ДеревоТаблоСчетов, ТаблоСчетов);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ОбновитьТаблоПлатежей Тогда 	
		ОбновитьТаблоПлатежейСервер();  	
	КонецЕсли;
		
КонецПроцедуры // ОбновитьТаблоСчетовСервер()

// Процедура обновляет табло платежей.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ОбновитьТаблоПлатежейСервер()

	ТаблоПлатежей.Очистить();
	
	НужныеСтроки = Объект.ПереченьДокументов.НайтиСтроки(Новый Структура("Оплачено", Истина));
	Если НужныеСтроки.Количество() > 0 Тогда
	
		ТаблицаПлатежныхПозиций = Объект.ПереченьДокументов.Выгрузить(НужныеСтроки, "Валюта, СуммаКОплате");
		
		ТаблицаПлатежныхПозиций.Свернуть("Валюта", "СуммаКОплате");
		
		Для каждого СтрокаТаблицы Из ТаблицаПлатежныхПозиций Цикл
			Если СтрокаТаблицы.СуммаКОплате <> 0 Тогда 			
				НоваяСтрока = ТаблоПлатежей.Добавить();	
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры // ОбновитьТаблоПлатежейСервер()

// Функция пересчитывает суммы платежей по валюте.
// 
// Параметры:
//  ДатаОплаты  		- Дата.
//  СтрокиПересчета  	- Массив (многомерный)
// 						[0] - Число - идентификатор строки
// 						[1] - СправочникСсылка.Валюты,
// 						[2] - Число - СуммаОстаток
// 						[3] - ДокументСсылка.бит_ПлатежнаяПозиция
// 						*[4] - Число (сумма платежа - заполняется в процедуре).
//  
// 
&НаСервереБезКонтекста
Процедура ПересчитатьСуммыПлатежейПоВалюте(ДатаОплаты, СтрокиПересчета)
  		
	СтруктураПараметров = Новый Структура;
	
	Для каждого СтрокаПерерасчета Из СтрокиПересчета Цикл
		
		ВалютаДокумента  = СтрокаПерерасчета[1];
		СуммаОстаток	 = СтрокаПерерасчета[2];
		ПлатежнаяПозиция = СтрокаПерерасчета[3];
		
		СтруктураПараметров.Вставить("Дата"			  , ДатаОплаты);
		СтруктураПараметров.Вставить("ВалютаДокумента", ВалютаДокумента);
		СуммаПлатежа = бит_Казначейство.ПересчитатьСуммуПлатежаПоВалюте(СуммаОстаток
																	, ПлатежнаяПозиция
																	, СтруктураПараметров);
        СтрокаПерерасчета.Добавить(СуммаПлатежа);
		
	КонецЦикла;
		
КонецПроцедуры // ПересчитатьСуммуПлатежаПоВалюте()

// Процедура записывает выбранный банковский счет в платежную позицию.
// 
// Параметры:
//  ПлатежнаяПозиция  	   - ДокументСсылка.бит_ПлатежнаяПозиция.
//  БанковскийСчет    	   - СправочникСсылка.БанковскиеСчета.
//  мТекущийБанковскийСчет - СправочникСсылка.БанковскиеСчета.
// 
&НаСерверебезКонтекста
Процедура ОбновитьПлатежнуюПозицию(ПлатежнаяПозиция, БанковскийСчет, мТекущийБанковскийСчет, РежимСообщений)

	// Обновим платежную позицию
	ОбъектПлатежнаяПозиция = ПлатежнаяПозиция.ПолучитьОбъект();
	
	Если бит_ОбщегоНазначения.ЗаблокироватьОбъект(ОбъектПлатежнаяПозиция,Строка(ПлатежнаяПозиция),, РежимСообщений) Тогда
		
		ОбъектПлатежнаяПозиция.БанковскийСчетОрганизация = БанковскийСчет;
		
		РежимЗаписиПлатежнойПозиции = ?(ОбъектПлатежнаяПозиция.Проведен
										, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		Если Не бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ОбъектПлатежнаяПозиция
										, РежимЗаписиПлатежнойПозиции,, РежимСообщений) Тогда
			БанковскийСчет = мТекущийБанковскийСчет;
		КонецЕсли;
	Иначе
		БанковскийСчет = мТекущийБанковскийСчет;
	КонецЕсли;            		

КонецПроцедуры // ОбновитьПлатежнуюПозицию()

&НаСервере
Функция ПараметрыГрупповойОплатыЗаявок()
	
	ПлатежныеПозиции = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Объект.ПереченьДокументов Цикл
		Если НЕ СтрокаТаблицы.ОплаченоДоступность Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.Оплачено Тогда
			Продолжить;
		КонецЕсли; 
		
		// Проверка на превышение суммы оплаты
		Если СтрокаТаблицы.СуммаКОплате > СтрокаТаблицы.СуммаКОплатеНач Тогда
			Продолжить;
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("ПлатежнаяПозиция", СтрокаТаблицы.ПлатежнаяПозиция);
		Структура.Вставить("СуммаКОплате"	 , СтрокаТаблицы.СуммаКОплате);
		Структура.Вставить("СуммаКОплатеНач" , СтрокаТаблицы.СуммаКОплатеНач);
		Структура.Вставить("ВалютаПлатежа"	 , СтрокаТаблицы.Валюта);
		
		ПлатежныеПозиции.Добавить(Структура);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПозиций",                Новый ФиксированныйМассив(ПлатежныеПозиции));
	ПараметрыФормы.Вставить("РежимЗаписи",                	   Объект.РежимЗаписи);
	ПараметрыФормы.Вставить("РежимСообщений",                  Объект.РежимСообщений);
	ПараметрыФормы.Вставить("НеФормироватьПлатежныеПоручения", Объект.НеФормироватьПлатежныеПоручения);
	ПараметрыФормы.Вставить("НеФормироватьДокументыОплаты",    Объект.НеФормироватьДокументыОплаты);
	ПараметрыФормы.Вставить("ПроводитьПлатежныеПоручения",     Объект.ПроводитьПлатежныеПоручения);
	ПараметрыФормы.Вставить("ПроводитьДокументыОплаты",        Объект.ПроводитьДокументыОплаты);

	Возврат ПараметрыФормы;

	
КонецФункции // СформироватьСтруктуруПозиций()

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция ЗаполнитьНастройки()

	Возврат Обработки.бит_ФормированиеПлатежныхДокументов.ЗаполнитьНастройки(Объект);
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") 
	   И СтруктураНастроек.Свойство("ПользовательскиеНастройки") Тогда

		Обработки.бит_ФормированиеПлатежныхДокументов.НастроитьОбработку(Объект, СтруктураНастроек);
	Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Ошибка при восстановлении настроек.");
	КонецЕсли;  		
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	ПрименитьНастройки(НастройкаПоУмолчанию);
	
	Если Объект.РежимСообщений = "" И Объект.РежимТабло = "" И Объект.РежимЗаписи = "" Тогда
		
		// Если настройки нет - заполним значения по умолчанию.
		Объект.РежимСообщений = "Все";
		Объект.РежимТабло     = "Автономно";
		Объект.РежимЗаписи    = "Запись";
		Объект.ИсточникДанныхТабло 					 = Перечисления.бит_РежимПолученияДанныхТаблоСчетов.ДанныеБухгалтерскогоУчета;
		Объект.ПоказыватьСуммуПланируемыхПоступлений = Ложь;
	 				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРасхода.ДатаНачала) Тогда
		Объект.ПериодРасхода.Вариант = ВариантСтандартногоПериода.Сегодня;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура устанавливает настройки указанные в форме настройки.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
&НаСервере
Процедура НастроитьОбработку(СтруктураНастроек)

	Обработки.бит_ФормированиеПлатежныхДокументов.НастроитьОбработку(Объект, СтруктураНастроек);
	
КонецПроцедуры // УстановитьДопНастройки()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = ЗаполнитьНастройки();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиСохранить()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроек",ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиВосстановить()

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек

&НаКлиенте
Процедура СоздатьПлатежныеДокументы(ФормаОплаты = Неопределено)
	
	ДлительнаяОперация = ПараметрыСозданияДокументовОплаты(ФормаОплаты);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = "Создание документов"; 
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПлатежныеДокументыЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры // СоздатьПлатежныеДокументы()

// Обраборка оповещения процедуры "ПоКнопкеСоздатьПлатежныеДокументы".
//
// Параметры:
//  Результат				 - Структура - См. общий модуль ДлительныеОпрации.
//  ДополнительныеПараметры	 - Произвольный - произвольные данные, переданные в обработку оповещения. 
//
&НаКлиенте
Процедура СоздатьПлатежныеДокументыЗавершение(Результат, ДополнительныеПараметры) Экспорт 

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		// Ничего не делать или обработать ошибку.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при выполнении: " + Результат.КраткоеПредставлениеОшибки);
	Иначе	

		БылоДокументов = ДобавленоДокументов;
		РезультатСоздания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(РезультатСоздания) = Тип("Структура") Тогда
			Если РезультатСоздания.Выполнено Тогда
				Для каждого Элемент Из РезультатСоздания.НовыеДокументы Цикл
					ЗаполнитьЗначенияСвойств(ДобавленныеДокументы.Добавить(), Элемент);				
				КонецЦикла; 
				ДобавленоДокументов = ДобавленныеДокументы.Количество();
			КонецЕсли; 
			//Если РезультатСоздания.Сообщения.Количество() <> 0 Тогда
			//	ТекстСообщения = НСтр("ru = 'При выполнении произошли ошибки: '");
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//	Для каждого Элемент Из РезультатСоздания.Сообщения Цикл
			//		Элемент.Сообщить();
			//	КонецЦикла; 
			//КонецЕсли; 
		КонецЕсли; 
		Если БылоДокументов <> ДобавленоДокументов Тогда
			УстановитьОтборСформированныхДокументов(СформированныеДокументы, ДобавленныеДокументы);
			ОбновитьПереченьДокументовТаблоСчетовТаблоПлатежей();
			ОповеститьОЗавершенииФормированияДокументов();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры 

&НаСервере
Функция ПараметрыСозданияДокументовОплаты(ФормаОплаты)

	НаименованиеЗадания = НСтр("ru = 'Создание документов оплаты.'");
	ВыполняемыйМетод = "Обработки.бит_ФормированиеПлатежныхДокументов.СоздатьДокументыОплаты";
	
	НастройкиПараметров = Новый Соответствие; 
	ПодготовитьСписокПлатежныхПозиций(НастройкиПараметров, ФормаОплаты);
	
	// Заполнение пераметов длительной операции.
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, НастройкиПараметров, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ПодготовитьСписокПлатежныхПозиций(НастройкиПараметров, ФормаОплаты)

	Для каждого СтрокаТаблицы Из Объект.ПереченьДокументов Цикл
		
		// Оплаченные платежные позиции не обрабатываются.
		Если НЕ СтрокаТаблицы.Оплачено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ СтрокаТаблицы.ОплаченоДоступность Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ФормаОплаты) И ФормаОплаты <> СтрокаТаблицы.ФормаОплаты Тогда
			Продолжить;
		КонецЕсли;
		
		Отказ   = Ложь;
		ПроверитьЗаполнениеПередСозданиемПлатежныхДокументов(СтрокаТаблицы, Отказ);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли; 

		ПараметрыФормирования = бит_Казначейство.НовыеПараметрыФормированияПлатежныхДокументов();
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, Объект);
		
		ПараметрыФормирования.ДатаОплаты = ?(НЕ ЗначениеЗаполнено(Объект.ДатаОплаты), ТекущаяДата(), Объект.ДатаОплаты);
		
		// Была отредактирована сумма платежа - указываем явно.
		Если СтрокаТаблицы.СуммаКОплате <> СтрокаТаблицы.СуммаКОплатеНач Тогда
			 ПараметрыФормирования.СуммаКОплате  = СтрокаТаблицы.СуммаКОплате;
			 ПараметрыФормирования.ВалютаПлатежа = СтрокаТаблицы.Валюта;
			 ПараметрыФормирования.СуммаВВалютеПлатежа = Истина; // ++ NB 44.4
		КонецЕсли; 
		
		// Если оплачиваем не всю сумму - разобъем платежную позицию.
		Если СтрокаТаблицы.СуммаКОплате < СтрокаТаблицы.СуммаКОплатеНач Тогда
			
			// Если валюта документа отличается от валюты платежа, нужно пересчиать из валюты в валюту. 
			Если СтрокаТаблицы.Валюта <> СтрокаТаблицы.ВалютаДокумента Тогда
				
				ИсходнаяВалюта = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТаблицы.Валюта, 
									?(НЕ ЗначениеЗаполнено(Объект.ДатаОплаты), ТекущаяДата(), Объект.ДатаОплаты));
				НоваяВалюта = бит_КурсыВалютКлиентСервер.СтруктураКурса(СтрокаТаблицы.ВалютаДокумента, 
								СтрокаТаблицы.ПлатежнаяПозиция.КурсДокумента, СтрокаТаблицы.ПлатежнаяПозиция.КратностьДокумента);
				СуммаКОплате = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТаблицы.СуммаКОплате, 
								ИсходнаяВалюта, НоваяВалюта); 
				
				СуммаКОплатеНач = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТаблицы.СуммаКОплатеНач, 
									ИсходнаяВалюта, НоваяВалюта);	
			Иначе
				СуммаКОплате 	= СтрокаТаблицы.СуммаКОплате ;
				СуммаКОплатеНач = СтрокаТаблицы.СуммаКОплатеНач;
			КонецЕсли; 
			
			ДействиеВыполнено = бит_Казначейство.РазбитьПлатежнуюПозицию(СтрокаТаблицы.ПлатежнаяПозиция, 
									СуммаКОплате, СуммаКОплатеНач, Объект.РежимСообщений);
			Если НЕ ДействиеВыполнено Тогда												 
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		ПараметрыФормирования.ПлатежныеПозиции.Добавить(СтрокаТаблицы.ПлатежнаяПозиция);
		НастройкиПараметров.Вставить(СтрокаТаблицы.ПлатежнаяПозиция, ПараметрыФормирования);
	КонецЦикла; 

КонецПроцедуры 

&НаСервере
Процедура ПроверитьЗаполнениеПередСозданиемПлатежныхДокументов(СтрокаТаблицы, Отказ)
	
	Отказ   = Ложь;
	Префикс = "ПереченьДокументов[%1].";
	Префикс = СтрШаблон(Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
	
	// Проверка заполнения банковского счета
	Если СтрокаТаблицы.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные 
		И НЕ ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетОрганизация) Тогда
		
		Поле = Префикс + "БанковскийСчетОрганизация";
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "Заполнение", 
							"Банковский счет", СтрокаТаблицы.НомерСтроки,"Перечень документов");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
		
	ИначеЕсли Не бит_ОбщегоНазначения.ЭтоСемействоБП() И 
		СтрокаТаблицы.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные 
		И НЕ ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетОрганизация) Тогда
		
		Поле = Префикс + "БанковскийСчетОрганизация";
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "Заполнение",
							"Касса", СтрокаТаблицы.НомерСтроки, "Перечень документов");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);		
	КонецЕсли;
	
	СтрСтатус = бит_Визирование.ПолучитьСтатусОбъекта(СтрокаТаблицы.ПлатежнаяПозиция,Перечисления.бит_ВидыСтатусовОбъектов.Статус);
	Если СтрСтатус.Статус = Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта Тогда
		
		Поле = Префикс + "СтатусЗаявки";
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ",
							"Статус заявки", СтрокаТаблицы.НомерСтроки, "Перечень документов", "Указана закрытая платежная позиция");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);		
	КонецЕсли; 
	
	// Проверка на превышение суммы оплаты
	Если СтрокаТаблицы.СуммаКОплате > СтрокаТаблицы.СуммаКОплатеНач Тогда
		Пояснение = СтрШаблон(НСтр("ru = 'Сумма к оплате %1 превышает плановую сумму %2.'"),
						бит_ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.СуммаКОплате,СтрокаТаблицы.Валюта), 
						бит_ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.СуммаКОплатеНач,СтрокаТаблицы.Валюта));
		
		Поле = Префикс + "СуммаКОплате";
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ",
		"Сумма к оплате", СтрокаТаблицы.НомерСтроки, "Перечень документов", Пояснение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
	КонецЕсли; 

КонецПроцедуры 

&НаКлиенте
Процедура ОповеститьОЗавершенииФормированияДокументов()
	
	Перем Оповещение, Текст, ТекстСообщения;
	
	Текст = НСтр("ru = 'Формирование документов'");
	Если ДобавленоДокументов <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Список сформированных документов.'");
		ПоказатьОповещениеПользователя(Текст, , ТекстСообщения, БиблиотекаКартинок.Информация32); 
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.ГруппаСформированныеДокументы;
	Иначе
		ТекстСообщения = НСтр("ru = 'Создано 0 документов.'");
		ПоказатьОповещениеПользователя(Текст,,ТекстСообщения, БиблиотекаКартинок.бит_Предупреждение32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСформированныхДокументов(Список, ЗначениеОтбора)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
			"Ссылка",ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
КонецПроцедуры 

#КонецОбласти
