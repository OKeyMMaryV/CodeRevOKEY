#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт; // Хранит сохраненную настройку

Перем мЗаписатьИзменения; // Хранит значение выполнения записи информации о загрузке в файл источник.

Перем мПротоколЗагрузки Экспорт; // Хранит текст протокола загрузки.

Перем мСоотвПредстОбъектов; // Хранит соответствие представлений объекта для сообщения пользователю.

Перем мСоотвИменКоллекций; // Хранит соответствие имен коллекций объектов видам объектов.

Перем мМассивНеРазрешимыхСимволов; // Хранит массив неразрешимых символов.

Перем мСтруктураСсылочныхТипов Экспорт; // Хранит структуру имен - ссылочный типов.

Перем мОбъектДляОбновления Экспорт; // Хранит объект данные которго необходимо обновить.

Перем мСсылкаОбъектаДляПоиска; // Хранит ссылку объекта переменной "мСсылкаОбъектаДляПоиска".

Перем мЗаписатьОбъект Экспорт; // Переменная хранит значение подтверждения на разрешение записи объекта.
 
Перем мСообщатьОХодеЗагрузки Экспорт; // Сообщать о ходе загрузки.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция для корректной работы модуля ТиповыеОтчеты.
// 
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции // ПолучитьПараметрыИсполненияОтчета()

// Процедура заполняет шапку обработки из настройки.
// 
// Параметры:
//  Нет.
// 
Процедура ЗаполнитьШапкуОбработкиИзНастройки() Экспорт
    
    ФайлИсточник = НастройкаДляЗагрузки.ФайлИсточник;
    ИмяЛиста     = НастройкаДляЗагрузки.ИмяЛиста;
    
    НомерНачальнойСтроки  = НастройкаДляЗагрузки.НомерСтрокиСИменамиКолонок;
    НомерНачальнойКолонки = НастройкаДляЗагрузки.НомерНачальнойКолонки;
    
	Если Не ЗначениеЗаполнено(ИмяЛиста) Тогда
		// По умолчанию имя листа - синоним объекта.
		ИмяЛиста = НастройкаДляЗагрузки.Объект;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуОбработкиИзНастройки()

// Процедура заполняет обновляемые реквизиты из дерева реквизитов. Рекурсивный вызов.
// 
// Параметры:
//  СтрокиДерева		 - СтрокиДереваЗначений.
//  ОбновляемыеРеквизиты - СписокЗначений.
// 
Процедура ЗаполнитьОбновляемыеРеквизиты(СтрокиДерева, ОбновляемыеРеквизиты) Экспорт
	
	Для Каждого ТекСтрока Из СтрокиДерева.Строки Цикл
		
		ТекВидДанных = ТекСтрока.ВидДанных;
		
		Если ТекСтрока.ВерхнийУровень
			И (ТекВидДанных = "Шапка" Или ТекВидДанных = "Табличные части") Тогда
			
			ЗаполнитьОбновляемыеРеквизиты(ТекСтрока, ОбновляемыеРеквизиты);
			
		Иначе
			
			Если ТекСтрока.Выполнять Тогда
				ДопТекст = ?(ТекВидДанных = "Шапка", "", "ТабличныеЧасти_" + ТекСтрока.ВидДанных);
				ОбновляемыеРеквизиты.Вставить(ДопТекст + ТекСтрока.ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОбновляемыеРеквизиты()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура вывода служедной информации.
// 
// Параметры:
//  Сообщение   	- Строка.
//  Статус 	    	- СтатусСообщения.
//  Счетчик     	- Число.
//  ИмяЭлемента 	- Строка.
//  Элемент			- СправочникСсылка, ДокументСсылка.
//  СообщитьОЗаписи - Булево.
//  СообщитьЭлемент - Булево.
// 
Процедура ОповеститьПользователя(Сообщение = "", Статус = Неопределено, Счетчик, ИмяЭлемента = "", 
								 Элемент = "", СообщитьОЗаписи = Ложь, СообщитьЭлемент = Ложь)
	
	Если НЕ СообщитьОЗаписи Тогда
		Сообщение = "";
	КонецЕсли;
	
	Если ИмяЭлемента <> "" Тогда
		
        Если СообщатьОЗаписиЭлементов Тогда
            ДопСообщение = ?(СообщитьЭлемент, Элемент, ИмяЭлемента + " - " + Элемент.Наименование);
		    Сообщение = НСтр("ru = 'Запись №%1 записан: %2.'");
			Сообщение = СтрШаблон(Сообщение, Счетчик, ДопСообщение);
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
		КонецЕсли;
		
	Иначе
		Если СообщатьОбОшибкахЗаписи ИЛИ СообщитьОЗаписи Тогда
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВестиПротоколЗагрузки И (Не ПустаяСтрока(Сообщение) ИЛИ СообщитьОЗаписи) Тогда
		мПротоколЗагрузки.ДобавитьСтроку(бит_ОбменДанными_Excel.ПолучитьТекстПоСтатусуДляПротокола(Статус) + Строка(Сообщение));
	КонецЕсли; // Если ВестиПротоколЗагрузки Тогда
	
КонецПроцедуры // ОповеститьПользователя(Счетчик, "контрагент", Контрагент);

// Проверяет можно ли записывать данный реквизит справочника.
// 
// Параметры:
//  МетаСпр      - КоллекцияМетаданныхСправочника.
//  ИмяРеквизита - Строка.
//  ЭтоГруппа    - Булево, признак группы.
// 
//  ОбновляемыеРеквизиты - Структура.
// 
// Возвращаемое значение:
//  Булево
// 
Функция РеквизитСправочникаМожноЗаписывать(МетаСпр, ИмяРеквизита, ЭтоГруппа, ОбновляемыеРеквизиты)
    
	МожноЗаписывать = Ложь;
	
	Если РежимОбновленияРеквизитов Тогда
		Если НЕ ОбновляемыеРеквизиты.Свойство(ИмяРеквизита) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ИмяРеквизита = "КОД" 
		Или ИмяРеквизита = "НАИМЕНОВАНИЕ"
		Или ИмяРеквизита = "РОДИТЕЛЬ"
		Или ИмяРеквизита = "ВЛАДЕЛЕЦ" Тогда
		МожноЗаписывать = Истина;
        
    ИначеЕсли ИмяРеквизита = "ЭТОГРУППА"
        Или ИмяРеквизита = "ПОМЕТКАУДАЛЕНИЯ" Тогда
		МожноЗаписывать = Ложь;
	Иначе
		
        Если МетаСпр.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
            Если ЭтоГруппа Тогда
                Если МетаСпр.Реквизиты[ИмяРеквизита].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента 
                    Или МетаСпр.Реквизиты[ИмяРеквизита].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
                    МожноЗаписывать = Истина;
                КонецЕсли;
            Иначе	
                Если МетаСпр.Реквизиты[ИмяРеквизита].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента 
                    Или МетаСпр.Реквизиты[ИмяРеквизита].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
                    МожноЗаписывать = Истина;
                КонецЕсли;
            КонецЕсли; 
        КонецЕсли; 	
		
	КонецЕсли; 
	
	Возврат МожноЗаписывать;
    
КонецФункции // РеквизитСправочникаМожноЗаписывать()

// Проверяет можно ли записывать данный реквизит документа.
// 
// Параметры:
//  МетаДок      - КоллекцияМетаданныхДокумента.
//  ИмяРеквизита - Строка.
// 
//  ОбновляемыеРеквизиты - Структура.
// 
// Возвращаемое значение:
//  Булево
// 
Функция РеквизитДокументаМожноЗаписывать(МетаДок, ИмяРеквизита, ОбновляемыеРеквизиты)
    
	МожноЗаписывать = Ложь;
	
	Если РежимОбновленияРеквизитов Тогда
		Если НЕ ОбновляемыеРеквизиты.Свойство(ИмяРеквизита) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ИмяРеквизита = "ДАТА"
		Или ИмяРеквизита = "НОМЕР" Тогда
		МожноЗаписывать = Истина;
        
    ИначеЕсли ИмяРеквизита = "ПОМЕТКАУДАЛЕНИЯ" Тогда
		МожноЗаписывать = Ложь;
	Иначе
		
		Если МетаДок.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			МожноЗаписывать = Истина;
		КонецЕсли; 	
		
	КонецЕсли; 
	
	Возврат МожноЗаписывать;
    
КонецФункции // РеквизитДокументаМожноЗаписывать()

#КонецОбласти

#Область ПроцедурыИФункцииНеобходимыеДляОбеспеченияЗагрузкиДанных

// Процедура выполняет вызов процедур и функций необходимых для выполнения
// загрузки информации из файла источника в ИБ.
// 
// Параметры:
//  ОбновляемыеРеквизиты - Структура.
// 	Отказ - булево.
// 	Данные - неопределено, структура - является структурой.
// , в случае если чтение файла excel производилось на стороне клиента.
// 
Процедура ВыполнитьПеренос(ОбновляемыеРеквизиты, Отказ = Ложь, Данные=Неопределено) Экспорт
	
	мЗаписатьОбъект = Истина;
	
	// Если указан объект для обновления, тогда
	Если Не мОбъектДляОбновления = Неопределено Тогда
		мСсылкаОбъектаДляПоиска = мОбъектДляОбновления.Ссылка;
	КонецЕсли;
	
	// Получим таблицу объектов для загрузки.
	ТаблицаОбъектов = ПолучитьТаблицуОбъектов();
	
    СчетчикОшибок = 0;
    
    // Проверим заполненность шапки обработки.
    ПроверитьЗаполненностьШапки(Отказ, ТаблицаОбъектов);
    
    Если НЕ Отказ Тогда
        
        Если ТаблицаОбъектов.Количество() <> 0 Тогда
            
            // Создаем структуру для записи информации
            ИнформацияДляЗаписи = Новый Структура;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ФайлИсточник"				 , ФайлИсточник);
			СтруктураПараметров.Вставить("ПротоколЗагрузки"			 , мПротоколЗагрузки);
			СтруктураПараметров.Вставить("СоотвПредстОбъектов"		 , мСоотвПредстОбъектов);
			СтруктураПараметров.Вставить("ВестиПротоколЗагрузки"	 , ВестиПротоколЗагрузки);
			СтруктураПараметров.Вставить("СообщатьОбОшибкахЗаписи"	 , СообщатьОбОшибкахЗаписи);
			СтруктураПараметров.Вставить("СообщатьОЗаписиЭлементов"	 , СообщатьОЗаписиЭлементов);
			СтруктураПараметров.Вставить("МассивНеРазрешимыхСимволов", мМассивНеРазрешимыхСимволов);
			СтруктураПараметров.Вставить("НомерНачальнойКолонки"	 , НомерНачальнойКолонки);
			СтруктураПараметров.Вставить("НомерНачальнойСтроки"		 , НомерНачальнойСтроки);
			СтруктураПараметров.Вставить("НомерКонечнойСтроки"		 , ?(УказатьНомерКонечнойСтроки, НомерКонечнойСтроки, 0));
			СтруктураПараметров.Вставить("ЗаписатьИзменения"		 , мЗаписатьИзменения);
			
            // Получаем данные для выполнения загрузки
			Если Данные = Неопределено Тогда
				Данные = бит_ОбменДанными_Excel.ПолучитьДанныеИзExcelПоНастройкеДляЗагрузки(ТаблицаОбъектов, 
																						СтруктураПараметров, Отказ);
			Иначе 
				// Загрузка происходила на клиенте и таблица с данными уже заполнена.
			КонецЕсли;
			
			Если Данные = Неопределено Или Отказ Тогда
				Возврат;	
			КонецЕсли;
			
			// 1c-izhtc (
			Для Каждого КлючЗначение Из Данные Цикл
				Если ТипЗнч(КлючЗначение.Значение) = Тип("ТаблицаЗначений") Тогда Продолжить; КонецЕсли;
				ТаблицаОбъектов[0].СтруктураПараметров.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			// 1c-izhtc )
			
			мЗаписатьИзменения = СтруктураПараметров.ЗаписатьИзменения;
			
			ТаблицаОбъектов[0].СтруктураПараметров.Вставить("НастройкиКолонок", Данные.НастройкиКолонок);
			ТаблицаОбъектов[0].СтруктураПараметров.Вставить("СпискиИсточники", Данные.СпискиИсточники);
			
            // Загружаем полученные данные и ИБ
            ВыполнитьЗагрузкуОбъектовВИнформационнуюБазу(ТаблицаОбъектов, Данные, ОбновляемыеРеквизиты, ИнформацияДляЗаписи);
            
            // Если НЕ ВыполнитьПроверкуНаличияОбъектов И мЗаписатьИзменения Тогда
            //    ЗаписатьИнформациюОЗагрузке(ТаблицаОбъектов, Данные, ИнформацияДляЗаписи);
            // КонецЕсли;
            
        Иначе
            ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбраны объекты для загрузки.'"));
        КонецЕсли;
        
    КонецЕсли; // Если НЕ Отказ Тогда
    
    мЗаписатьИзменения = Истина;
    
КонецПроцедуры // ВыполнитьПеренос()

// Функция получает (подготавливает) таблицу объектов
// для выполнения загрузки.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ТаблицаОбъектов - ТаблицаЗначений.
// 
Функция ПолучитьТаблицуОбъектов() Экспорт
	
	ПравилаЗагрузки = НастройкаДляЗагрузки.ПравилаЗагрузки.Выгрузить();
	
	// Заробъем таблицу правил на две таблицы:
	// 1) "ПравилаЗагрузкиШапки" - правила загрузки шапки.
	// 2) "ПравилаЗагрузкиТЧ" 	 - правила загрузки значений табличных частей.
	СтруктураТаблиц = бит_ОбменДанными_Excel.РазбитьТаблицуПравилЗагрузкиНаДвеТаблицы(ПравилаЗагрузки);
	
	ПравилаЗагрузкиШапки = СтруктураТаблиц.ПравилаЗагрузкиШапки;
	ПравилаЗагрузкиТЧ	 = СтруктураТаблиц.ПравилаЗагрузкиТЧ;
	
	// Формируем массив ключевых полей.
    // И реквизитов для поиска объекта в ИБ.
    КлючевыеПоля    = Новый Массив;
    РеквизитыПоиска = Новый Массив;
	
	ПроизвольныйАлгоритм = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм;
	
    Для Каждого ТекСтрока Из ПравилаЗагрузкиШапки Цикл
        // Если это ключевое поле, тогда
        Если ТекСтрока.КлючевоеПоле Тогда
            РеквизитыПоиска.Добавить(ТекСтрока.ИмяРеквизита);
            // Если не установлено значение по умолчанию
			// и не назначен произвольный алгоритм, тогда
			// включаем поля для проверки заполненности.
			Если Не ЗначениеЗаполнено(ТекСтрока.ПоУмолчанию) 
				И Не (ТекСтрока.Тип = ПроизвольныйАлгоритм И ЗначениеЗаполнено(ТекСтрока.ИмяОбъекта)) Тогда
                КлючевыеПоля.Добавить(ТекСтрока.ИмяВФайле);
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
	
    // Формируем таблицу загружаемых объектов.
    ТаблицаОбъектов = Новый ТаблицаЗначений;
    
    ТаблицаОбъектов.Колонки.Добавить("ИмяЗакладкиВExcel");
    ТаблицаОбъектов.Колонки.Добавить("ИмяОбъекта");
    ТаблицаОбъектов.Колонки.Добавить("ОтображаемоеИмя");
    ТаблицаОбъектов.Колонки.Добавить("ВидОбъекта");
    ТаблицаОбъектов.Колонки.Добавить("ЭтоРегистрСведений");
	ТаблицаОбъектов.Колонки.Добавить("ПравилаЗагрузки");
    ТаблицаОбъектов.Колонки.Добавить("ПравилаЗагрузкиШапки");
	ТаблицаОбъектов.Колонки.Добавить("ПравилаЗагрузкиТЧ");
    ТаблицаОбъектов.Колонки.Добавить("ЗагрузкаСТЧ");
	ТаблицаОбъектов.Колонки.Добавить("КлючевыеПоля");
	ТаблицаОбъектов.Колонки.Добавить("РеквизитыПоиска");
	ТаблицаОбъектов.Колонки.Добавить("ИспользоватьНестандартныйАлгоритмПоиска");
	ТаблицаОбъектов.Колонки.Добавить("СтруктураПараметров");
    
    НовСтрока = ТаблицаОбъектов.Добавить();
    НовСтрока.ИмяЗакладкиВExcel							= ИмяЛиста;
    НовСтрока.ИмяОбъекта								= НастройкаДляЗагрузки.ИмяОбъекта;
    НовСтрока.ОтображаемоеИмя							= НастройкаДляЗагрузки.Объект;
    НовСтрока.ВидОбъекта								= НастройкаДляЗагрузки.ВидОбъекта;
    НовСтрока.ЭтоРегистрСведений						= НовСтрока.ВидОбъекта = "РегистрСведений";
	НовСтрока.ПравилаЗагрузки							= ПравилаЗагрузки;
    НовСтрока.ПравилаЗагрузкиШапки						= ПравилаЗагрузкиШапки;
	НовСтрока.ПравилаЗагрузкиТЧ	 						= ПравилаЗагрузкиТЧ;
    НовСтрока.ЗагрузкаСТЧ    						    = (Не ПравилаЗагрузкиТЧ.Количество() = 0);
	НовСтрока.КлючевыеПоля    							= КлючевыеПоля;
	НовСтрока.РеквизитыПоиска 							= РеквизитыПоиска;
	НовСтрока.ИспользоватьНестандартныйАлгоритмПоиска 	= НастройкаДляЗагрузки.ИспользоватьНестандартныйАлгоритмПоиска;
	НовСтрока.СтруктураПараметров						= Новый Структура();
	
	// Отсортируем таблицу правил.
	бит_ОбменДанными_Excel.ОтсортироватьТаблицуПравил(НовСтрока.ПравилаЗагрузкиШапки);
	бит_ОбменДанными_Excel.ОтсортироватьТаблицуПравил(НовСтрока.ПравилаЗагрузкиТЧ);
	
	Возврат ТаблицаОбъектов;
	
КонецФункции // ПолучитьТаблицуОбъектов()

// Проверка заполненности реквизитов шапки обработки.
// 
// Параметры:
//  Отказ           - Булево.
//  ТаблицаОбъектов - ТаблицаЗначений.
// 
Процедура ПроверитьЗаполненностьШапки(Отказ, ТаблицаОбъектов) Экспорт
    
	// Формируем структуру обязательных полей.
	СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("НастройкаДляЗагрузки");
	СтруктураПолей.Вставить("ФайлИсточник");
    СтруктураПолей.Вставить("ИмяЛиста");
    СтруктураПолей.Вставить("НомерНачальнойСтроки");
    СтруктураПолей.Вставить("НомерНачальнойКолонки");
	
	Если УказатьНомерКонечнойСтроки Тогда
		СтруктураПолей.Вставить("НомерКонечнойСтроки");
	КонецЕсли;
	
    бит_ОбменДанными_Excel.ПроверитьЗаполнениеШапкиОбъекта(ЭтотОбъект, СтруктураПолей, Отказ, "");
    
    Если Не Отказ Тогда
		
		Если УказатьНомерКонечнойСтроки 
			И НомерКонечнойСтроки <= НомерНачальнойСтроки Тогда
			
			Отказ = Истина;
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Номер конечной строки не может быть меньше или равен номеру начальной строки!", СтатусСообщения.Внимание);
			
			Возврат;
		КонецЕсли;
		
        Заголовок = "Проверка правильности настройки для загрузки.";
        
        // Проверим наличие правил загрузки для объектов.
        Для Каждого ТекСтрока Из ТаблицаОбъектов Цикл
            
            Если Не ЗначениеЗаполнено(ТекСтрока.ПравилаЗагрузки) Тогда
                Отказ = Истина;
                бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Не установлены правила загрузки " + мСоотвПредстОбъектов.Получить(ВРег(ТекСтрока.ВидОбъекта)) + " """ + ТекСтрока.ОтображаемоеИмя + """!", СтатусСообщения.Внимание);
            Иначе
                // Проверим правильность настройки правил загрузки.
                бит_ОбменДанными_Excel.ПроверитьПравильностьЗаполненияНастройкиЗагрузки(ТекСтрока.ПравилаЗагрузки.Скопировать(), ТекСтрока, Отказ, Заголовок);
            КонецЕсли;
            
        КонецЦикла;
    
    КонецЕсли;
    
КонецПроцедуры // ПроверитьЗаполненностьШапки()

// Процедура выполняет загрузку данных в ИБ.
// 
// Параметры:
//  ТаблицаОбъектов      - ТаблицаЗнчаений.
//  Данные               - Структура.
//  ОбновляемыеРеквизиты - Структура.
//  ИнформацияДляЗаписи  - Структура.
// 
Процедура ВыполнитьЗагрузкуОбъектовВИнформационнуюБазу(ТаблицаОбъектов, Данные, ОбновляемыеРеквизиты, ИнформацияДляЗаписи)

    Для Каждого СтрокаТаблицыОбъектов ИЗ ТаблицаОбъектов Цикл
        
        ДанныеДляЗаписи = Новый Структура;
        
		Отказ = Ложь;
		ЕстьОшибки = Ложь;
		ОписаниеОшибки = "";
		ВыполнитьОбработчикПередЗагрузкой(Данные[СтрокаТаблицыОбъектов.ИмяОбъекта],
										  СтрокаТаблицыОбъектов.СтруктураПараметров,
										  Отказ,
										  ЕстьОшибки,
										  ОписаниеОшибки);
		Если ЕстьОшибки Тогда
			ОповеститьПользователя("Ошибка при выполнении обработчика ""ПередЗагрузкой"": " + ОписаниеОшибки,
								   СтатусСообщения.ОченьВажное,
								   0,
								   ,
								   ,
								   Истина);
		КонецЕсли;
		Если Отказ Тогда
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-21 (#4262)
			//ОповеститьПользователя("Отказ от загрузки: " + ОписаниеОшибки, СтатусСообщения.ОченьВажное, 0,,, Истина);
			Если ок_СообщатьВСлучаеОтказаОтЗаписи Тогда
				ОповеститьПользователя("Отказ от загрузки: " + ОписаниеОшибки, СтатусСообщения.ОченьВажное, 0,,, Истина);
			КонецЕсли;
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-21 (#4262)
			Продолжить;
		КонецЕсли;
	
        // Если это не регистр сведений, тогда
        Если Не СтрокаТаблицыОбъектов.ЭтоРегистрСведений Тогда
            ЗагрузитьОбъект(Данные[СтрокаТаблицыОбъектов.ИмяОбъекта], СтрокаТаблицыОбъектов, ОбновляемыеРеквизиты, ДанныеДляЗаписи);
        Иначе
            ЗагрузитьРегистрСведений(Данные[СтрокаТаблицыОбъектов.ИмяОбъекта], СтрокаТаблицыОбъектов, ДанныеДляЗаписи);
        КонецЕсли; // Если Не СтрокаТаблицыОбъектов.ЭтоРегистрСведений Тогда.
        
		ЕстьОшибки = Ложь;
		ОписаниеОшибки = "";
		ВыполнитьОбработчикПослеЗагрузки(Данные[СтрокаТаблицыОбъектов.ИмяОбъекта],
										 СтрокаТаблицыОбъектов.СтруктураПараметров,
										 ЕстьОшибки,
										 ОписаниеОшибки);
		
		// Записывает информацию для тек. объекта
        ИнформацияДляЗаписи.Вставить(СтрокаТаблицыОбъектов.ИмяОбъекта, ДанныеДляЗаписи);
        
    КонецЦикла;

КонецПроцедуры // ВыполнитьЗагрузкуОбъектовВИнформационнуюБазу() 

// Процедура выполняет загрузку объекта.
// 
// Параметры:
//  ТаблицаДанных 		  - ТаблицаЗначений.
//  СтрокаТаблицыОбъектов - СтрокаТаблицыЗначений.
// 
//  ОбновляемыеРеквизиты - Структура.
//  ДанныеДляЗаписи      - Структура.
// 
Процедура ЗагрузитьОбъект(ТаблицаДанных, СтрокаТаблицыОбъектов, ОбновляемыеРеквизиты, ДанныеДляЗаписи)

    // Получаем необходимые значения для выполнения загрузки.
	ПравилаЗагрузки		 = СтрокаТаблицыОбъектов.ПравилаЗагрузки;
    ПравилаЗагрузкиШапки = СтрокаТаблицыОбъектов.ПравилаЗагрузкиШапки;
	ПравилаЗагрузкиТЧ	 = СтрокаТаблицыОбъектов.ПравилаЗагрузкиТЧ;
    ИмяЗакладки     	 = СтрокаТаблицыОбъектов.ИмяЗакладкиВExcel;
    ВидОбъекта      	 = СтрокаТаблицыОбъектов.ВидОбъекта;
    ИмяОбъекта      	 = СтрокаТаблицыОбъектов.ИмяОбъекта;
    ОтображаемоеИмя 	 = СтрокаТаблицыОбъектов.ОтображаемоеИмя;
	КлючевыеПоля    	 = СтрокаТаблицыОбъектов.КлючевыеПоля;
    РеквизитыПоиска 	 = СтрокаТаблицыОбъектов.РеквизитыПоиска;
	ЗагрузкаСТЧ			 = СтрокаТаблицыОбъектов.ЗагрузкаСТЧ;
	
    ПредставлениеВидаОбъекта = мСоотвПредстОбъектов.Получить(ВРег(ВидОбъекта));
	
	Если мСообщатьОХодеЗагрузки Тогда
	    // Сообщим пользователю и в протокол.
	    бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Выполняется загрузка " + ПредставлениеВидаОбъекта + " """ + ОтображаемоеИмя 
															  + """ (" + Формат(ТекущаяДата(), "ДЛФ=DT") + ").", СтатусСообщения.Информация,,
															  ВестиПротоколЗагрузки, мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
	КонецЕсли;							   
	
	// Проверим активность "Режима обновления реквизитов".
	ПроверитьАктивностьРежимаОбновленияРеквизитов(ОбновляемыеРеквизиты);
								   
    // Подготовим таблицу правил для выполнения проверки наличия колонок.
	ПодготовитьТаблицуПравилДляВыполненияЗагрузки(ПравилаЗагрузки);
	
    // Проверяем правильность указания колонок
    КолонкиВсеНайдены = ПроверитьНаличиеКолонокВТаблицеСДанными(ПравилаЗагрузки, ТаблицаДанных.Колонки, ИмяЗакладки, ЗагрузкаСТЧ);
    
    Если НЕ КолонкиВсеНайдены Тогда
        // Сообщим пользователю и в протокол.
        бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Загрузка " + ПредставлениеВидаОбъекта + " """ + ОтображаемоеИмя 
									   						  + """ не выполнена!", СтатусСообщения.Информация,, ВестиПротоколЗагрузки,
								   							  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);	
        Возврат;
    КонецЕсли;
	
	// Подготовим таблицы правил для выполнения загрузки.
	ПодготовитьТаблицуПравилДляВыполненияЗагрузки(ПравилаЗагрузкиШапки);
	ПодготовитьТаблицуПравилДляВыполненияЗагрузки(ПравилаЗагрузкиТЧ);
	
	СтрокаИерархическийОбъект = ПравилаЗагрузки.Найти("ЭТОГРУППА", "ИмяРеквизита");
	ЭтоИерархическийОбъект	  = (Не СтрокаИерархическийОбъект = Неопределено);
	
	// Если грузиться иерархический справочник необходимо
	// отсортировать таблицу данных таким образом чтобы 
	// все группы были в верху - их будем грузить первыми.
	Если ЭтоИерархическийОбъект Тогда
		ТаблицаДанных.Сортировать(СтрокаИерархическийОбъект.ИмяВФайле + " Убыв");
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ЭтоИерархическийОбъект", ЭтоИерархическийОбъект);
	СтруктураДанных.Вставить("ОбрабатыватьРодителей" , (Не ПравилаЗагрузки.Найти("РОДИТЕЛЬ", "ИмяРеквизита") = Неопределено));
	СтруктураДанных.Вставить("ТаблицаДанных"		 , ТаблицаДанных);
	СтруктураДанных.Вставить("КлючевыеПоля"		 	 , КлючевыеПоля);
	СтруктураДанных.Вставить("ПравилаЗагрузки"		 , ПравилаЗагрузки);
	СтруктураДанных.Вставить("ПравилаЗагрузкиШапки"	 , ПравилаЗагрузкиШапки);
	СтруктураДанных.Вставить("ПравилаЗагрузкиТЧ"	 , ПравилаЗагрузкиТЧ);
	СтруктураДанных.Вставить("РеквизитыПоиска"		 , РеквизитыПоиска);
	СтруктураДанных.Вставить("СтрокаТаблицыОбъектов" , СтрокаТаблицыОбъектов);
	СтруктураДанных.Вставить("ОбновляемыеРеквизиты"	 , ОбновляемыеРеквизиты);
	СтруктураДанных.Вставить("ВидОбъекта"		 	 , ВидОбъекта);
	СтруктураДанных.Вставить("ИмяОбъекта"		 	 , ИмяОбъекта);
	СтруктураДанных.Вставить("ЗагрузкаСТЧ"		 	 , ЗагрузкаСТЧ);
	
	// Выполним загрузку элементов.
	ЗагрузитьЭлементыТаблицыДанных(СтруктураДанных);
	
    СчетчикГрупп 	 = СтруктураДанных.СчетчикГрупп;
	СчетчикЭлементов = СтруктураДанных.СчетчикЭлементов;
    
    // Записываем данные для записи в файл источник.
    ДанныеДляЗаписи.Вставить("СчетчикГрупп"	   , СчетчикГрупп);
    ДанныеДляЗаписи.Вставить("СчетчикЭлементов", СчетчикЭлементов);
    
    // ЗаписатьСлужебнуюИнформацию(ExcelФайл,ИмяЗакладки,СчетчикЭлементов,СчетчикГрупп);
	
	Если Не мСообщатьОХодеЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
    Если ПредставлениеВидаОбъекта = "справочника" Тогда
        ДопТекст = "элементов";
    ИначеЕсли ПредставлениеВидаОбъекта = "документа" Тогда
        ДопТекст = "документов";
    КонецЕсли;
    
    // Сообщим пользователю и в протокол.
    бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Записано " + ДопТекст + ": " + СчетчикЭлементов, 
														  СтатусСообщения.Обычное,, ВестиПротоколЗагрузки, 
														  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
    
    // Если это иерархический объект, тогда
	Если ЭтоИерархическийОбъект Тогда
		
        бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("         групп: " + СчетчикГрупп, 
															  СтатусСообщения.Обычное,, ВестиПротоколЗагрузки, 
															  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
															  
        бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("         всего: " + (СчетчикЭлементов + СчетчикГрупп), 
															  СтатусСообщения.Обычное,, ВестиПротоколЗагрузки, 
															  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
															  
    КонецЕсли;
        
    // Сообщим пользователю и в протокол.
    бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Загрузка " + ПредставлениеВидаОбъекта + " """ 
														  + ОтображаемоеИмя + """ завершена (" + Формат(ТекущаяДата(), "ДЛФ=DT") + "). " + Символы.ПС, 
														  СтатусСообщения.Информация,, ВестиПротоколЗагрузки, 
														  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
    
КонецПроцедуры // ЗагрузитьОбъект() 

// Процедура подготавливает таблицу правил для выполнения загрузки.
// 
// Параметры:
//  ПравилаЗагрузки - ТаблицаЗначений.
// 
Процедура ПодготовитьТаблицуПравилДляВыполненияЗагрузки(ПравилаЗагрузки)
	
	Для Каждого ТекСтрока Из ПравилаЗагрузки Цикл
		
		ТекСтрока.ИмяВФайле      = ВРег(ТекСтрока.ИмяВФайле);
		ТекСтрока.ИмяРеквизита   = ВРег(ТекСтрока.ИмяРеквизита);
		ТекСтрока.РеквизитПоиска = ВРег(ТекСтрока.РеквизитПоиска);
		
		// Удалим неразрешимые символы.
        Для Каждого ТекСимвол Из мМассивНеРазрешимыхСимволов Цикл
            ТекСтрока.ИмяВФайле    	 = СтрЗаменить(ТекСтрока.ИмяВФайле,      ТекСимвол, "");
			ТекСтрока.ИмяРеквизита 	 = СтрЗаменить(ТекСтрока.ИмяРеквизита,   ТекСимвол, "");
			ТекСтрока.РеквизитПоиска = СтрЗаменить(ТекСтрока.РеквизитПоиска, ТекСимвол, "");
        КонецЦикла;
		
	КонецЦикла;
	
	// Если необходимо получать значения использую пользовательскую
	// функцию, тогда добавим колонки и заполним их.
	НайденныеСтроки = ПравилаЗагрузки.НайтиСтроки(Новый Структура("ТИП", Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм));
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		
        ПравилаЗагрузки.Колонки.Добавить("ИмяФункции");
        ПравилаЗагрузки.Колонки.Добавить("ОшибкаАлгоритма", Новый ОписаниеТипов("Булево"));
		
        Для Каждого ТекСтрока Из НайденныеСтроки Цикл
            ТекСтрока.ИмяФункции = СокрЛП(ТекСтрока.ИмяОбъекта);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьТаблицуПравилДляВыполненияЗагрузки()

// Процедура выполняет загрузку элементов (справочников, документов) из таблицы данных
// в информационную базу.
// 
// Параметры:
//  СтруктураДанных - Структура.
// 
Процедура ЗагрузитьЭлементыТаблицыДанных(СтруктураДанных)
	
	ПравилаЗагрузкиТЧ = СтруктураДанных.ПравилаЗагрузкиТЧ;
	ТаблицаДанных 	  = СтруктураДанных.ТаблицаДанных;
	КлючевыеПоля  	  = СтруктураДанных.КлючевыеПоля;
	ЗагрузкаСТЧ   	  = СтруктураДанных.ЗагрузкаСТЧ;
	
	МассивИменТЧ = ПравилаЗагрузкиТЧ.ВыгрузитьКолонку("ВидДанных");
	МассивИменТЧ = бит_ОбменДанными_Excel.УдалитьПовторяющиесяЭлементыМассива(МассивИменТЧ, Истина);
	
	СтруктураДанных.Вставить("МассивИменТЧ", МассивИменТЧ);
	
	Ном		= 1;
	Счетчик = 1;
    СчетчикГрупп 	 = 0;
    СчетчикЭлементов = 0;
	
	ТаблицаДляОбхода  = ТаблицаДанных.Скопировать();
	ТаблицаСДаннымиТЧ = ТаблицаДанных.Скопировать();
	
	Если ЗагрузкаСТЧ Тогда
		
		ТаблицаДляОбхода.Очистить();
		
		// Найдем записи данных шапки.
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ИмяТабЧасти", ""));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ИмяТабЧасти", Неопределено));
		КонецЕсли;
		бит_ОбменДанными_Excel.ЗагрузитьВТаблицуЗначений(НайденныеСтроки, ТаблицаДляОбхода);
		
		// Удалим найденные строки из таблицы "ТаблицаСДаннымиТЧ".
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			СтрокаДляУдаления = ТаблицаСДаннымиТЧ.Найти(ТекСтрока.НомерСтрокиВФайле, "НомерСтрокиВФайле");
			
			Если Не СтрокаДляУдаления = Неопределено Тогда
				ТаблицаСДаннымиТЧ.Удалить(СтрокаДляУдаления);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ТаблицаДляОбхода  = ТаблицаДанных;
		ТаблицаСДаннымиТЧ.Очистить();
	КонецЕсли;
	
	СтруктураДанных.Вставить("ТаблицаСДаннымиТЧ", ТаблицаСДаннымиТЧ);
	
	КоличествоСтрок = ТаблицаДанных.Количество();
	
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДляОбхода Цикл
		// Загрузим элемент таблицы данных. Рекурсия.
		ЗагрузитьЭлементСтрокиТаблицыДанных(СтруктураДанных, ТаблицаДляОбхода, СтрокаТаблицыДанных, Ном, Счетчик, 
											СчетчикГрупп, СчетчикЭлементов, КоличествоСтрок);
	КонецЦикла;
	
	СтруктураДанных.Вставить("СчетчикГрупп"	   , СчетчикГрупп);
	СтруктураДанных.Вставить("СчетчикЭлементов", СчетчикЭлементов);
	
КонецПроцедуры // ЗагрузитьЭлементыТаблицыДанных()

// Процедура выполняет загрузку элемента (справочника, документа) строки таблицы данных
// в информационную базу. Рекурсивный вызов.
// 
// Параметры:
//  СтруктураДанных 	- Структура.
//  ТаблицаДанных		- ТаблицаЗначений.
//  СтрокаТаблицыДанных - СтрокаТаблицыЗначений.
//  Ном					- Число.
//  Счетчик				- Число.
//  СчетчикГрупп		- Число.
//  СчетчикЭлементов	- Число.
//  КоличествоСтрок	    - Число.
// 
//  ТаблицаСДаннымиТЧ 	- ТаблицаЗначений, данные значений ТЧ.
// 
Процедура ЗагрузитьЭлементСтрокиТаблицыДанных(СтруктураДанных, ТаблицаДанных, СтрокаТаблицыДанных, Ном, Счетчик, 
											  СчетчикГрупп, СчетчикЭлементов, КоличествоСтрок)
											  
	Если Не мЗаписатьОбъект Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаТаблицыДанных.СтрокаОбработана Тогда
		// Если ранее строка была обработана, тогда 
		// не зачем ее обрабатывать повторно.
		Возврат;
	КонецЕсли;
	
	КлючевыеПоля = СтруктураДанных.КлючевыеПоля;  
	
	// Проверим заполненность ключевых полей.
	Если Не КлючевыеПоляЗаполнены(СтрокаТаблицыДанных, КлючевыеПоля) Тогда
		СтрокаТаблицыДанных.СтрокаОбработана = Истина;
		Возврат;
	КонецЕсли; 
	
	ЭтоИерархическийОбъект = СтруктураДанных.ЭтоИерархическийОбъект;
	ОбрабатыватьРодителей  = СтруктураДанных.ОбрабатыватьРодителей;
	ПравилаЗагрузкиШапки   = СтруктураДанных.ПравилаЗагрузкиШапки;
	РеквизитыПоиска		   = СтруктураДанных.РеквизитыПоиска;
	СтрокаТаблицыОбъектов  = СтруктураДанных.СтрокаТаблицыОбъектов;
	ОбновляемыеРеквизиты   = СтруктураДанных.ОбновляемыеРеквизиты;
	ВидОбъекта 			   = СтруктураДанных.ВидОбъекта;
	ИмяОбъекта 			   = СтруктураДанных.ИмяОбъекта;
	ЗагрузкаСТЧ			   = СтруктураДанных.ЗагрузкаСТЧ;
	
	НомерСтрокиВФайле 	   = СтрокаТаблицыДанных.НомерСтрокиВФайле;
	
	# Если Клиент Тогда
		ОбработкаПрерыванияПользователя();	
	# КонецЕсли 
	
	Данные = Новый Структура;
	Данные.Вставить("Загружен"      , Ложь);
	Данные.Вставить("ОписаниеОшибки", "");
	Данные.Вставить("Событие"       , "");
	Данные.Вставить("Служебный_СтрокаТаблицыДанных", СтрокаТаблицыДанных);
	Данные.Вставить("Служебный_СтруктураПараметров", СтруктураДанных.СтрокаТаблицыОбъектов.СтруктураПараметров);
	
	
	СообщатьНеНайденРодитель = Истина;
	
	Если ОбрабатыватьРодителей 
		И ЗначениеЗаполнено(СтрокаТаблицыДанных.Родитель) Тогда
		
		НайденныеСтроки = ПравилаЗагрузкиШапки.НайтиСтроки(Новый Структура("ИмяРеквизита", "РОДИТЕЛЬ"));
		
		// Проверим наличие родителя.
		ПолучитьЗначенияПоПравилам(Данные, СтрокаТаблицыДанных, НайденныеСтроки, Ложь);
		
		// Если родитель не найден, тогда необходимо его загрузить.
		Если Не ЗначениеЗаполнено(Данные.Родитель) Тогда
			
			ПравилоПоискаРодителя = НайденныеСтроки[0];
			
			Если СтрокаТаблицыДанных.Родитель = СтрокаТаблицыДанных[ПравилоПоискаРодителя.РеквизитПоиска] Тогда
				
				ТекстСообщения = "В строке №" + НомерСтрокиВФайле
								 + " обнаружено зацикливание. Проверте значения в колонках: "
								 + ПравилоПоискаРодителя.ИмяВФайле 
								 + ", " + ПравилоПоискаРодителя.РеквизитПоиска + ".";
								 
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.ОченьВажное, 0,,, Истина);
				СтрокаТаблицыДанных.СтрокаОбработана = Истина;
				Возврат;
				
			КонецЕсли;
			
			// Проверим наличие строки с родителем в таблице данных.
			НайденнаяСтрока = ТаблицаДанных.Найти(СтрокаТаблицыДанных.Родитель, ПравилоПоискаРодителя.РеквизитПоиска);
			
			// Если есть строка с указанным родителем, тогда необходимо его загрузить.
			Если Не НайденнаяСтрока = Неопределено Тогда
				
				ЗагрузитьЭлементСтрокиТаблицыДанных(СтруктураДанных, ТаблицаДанных, НайденнаяСтрока, Ном, Счетчик, 
													СчетчикГрупп, СчетчикЭлементов, КоличествоСтрок);
				
				СообщатьНеНайденРодитель = Не ВыполнитьПроверкуНаличияОбъектов;
													 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получаем значения по правилам загрузки.
	ПолучитьЗначенияПоПравилам(Данные, СтрокаТаблицыДанных, ПравилаЗагрузкиШапки, СообщатьНеНайденРодитель);
	
	Если ЗагрузкаСТЧ Тогда
		// Получим данные по табличным частям объекта.
		ПолучитьДанныеПоТабличнымЧастямДляОбъекта(Данные, СтруктураДанных, СтрокаТаблицыДанных);
	КонецЕсли;
	
	// Найдем объект в ИБ.
	Если НастройкаДляЗагрузки.ИспользоватьНестандартныйАлгоритмПоиска Тогда
		Данные.Вставить("ТЕКУЩИЙОБЪЕКТ", НайтиОбъектВ_ИБ_ПоАлгоритму(СтрокаТаблицыДанных, Данные.Служебный_СтруктураПараметров));
	Иначе
		Данные.Вставить("ТЕКУЩИЙОБЪЕКТ", НайтиОбъектВ_ИБ(РеквизитыПоиска, СтрокаТаблицыОбъектов, Данные, ПравилаЗагрузкиШапки));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные.ТекущийОбъект) Тогда
		Данные.Событие = "Новый";
	Иначе 
		Данные.Событие = "Изменить";
	КонецЕсли;
	
	Если НЕ ВыполнитьПроверкуНаличияОбъектов Тогда
		
		Если ВидОбъекта = "Справочник" Тогда
			
			// Проверяем на значение группы
			Если Данные.Свойство("ТЕКУЩИЙОБЪЕКТ") И ЗначениеЗаполнено(Данные.ТекущийОбъект) Тогда
				
				Иерархический = Данные.ТекущийОбъект.Метаданные().Иерархический;
				// Проверяем группа это или нет, если справочник иерархический.
				ЭтоРеальноГруппа = ?(Иерархический, Данные.ТекущийОбъект.ЭтоГруппа, Ложь);
				
			Иначе
				
				ЭтоРеальноГруппа = ?(ЭтоИерархическийОбъект, 
									 СтрокаТаблицыДанных.ЭтоГруппа = "1" 
									  ИЛИ ВРег(СтрокаТаблицыДанных.ЭтоГруппа) = "ИСТИНА" 
									  ИЛИ ВРег(СтрокаТаблицыДанных.ЭтоГруппа) = "ДА",
									 Ложь);
			КонецЕсли;
			
			Если ЭтоРеальноГруппа Тогда
				ЗаписатьГруппуСправочника(ИмяОбъекта, Данные, Счетчик, СчетчикГрупп, 
										  ОбновляемыеРеквизиты, НомерСтрокиВФайле, ЗагрузкаСТЧ);
			Иначе
				ЗаписатьЭлементСправочника(ИмяОбъекта, Данные, Счетчик, СчетчикЭлементов, 
										   ОбновляемыеРеквизиты, НомерСтрокиВФайле, ЗагрузкаСТЧ);
			КонецЕсли;
			
		Иначе
			ЗаписатьДокумент(ИмяОбъекта, Данные, Счетчик, СчетчикЭлементов, 
							 ОбновляемыеРеквизиты, НомерСтрокиВФайле, ЗагрузкаСТЧ);
		КонецЕсли;
		
		// ЗаписатьИнформациюОЗагрузкеВСтроку(СтрокаТаблицыДанных, Данные, НомерСтрокиВФайле);
		
	КонецЕсли;
	
	// ОтметитьЗагруженные(Лист,Данные,НомерСтрокиВФайле);
	
	Если Ном%10 = 0 Тогда
		бит_ОбменДанными_Excel.ВывестиСостояниеПользователю("Запись " + ИмяОбъекта + " " + Ном + " из " + КоличествоСтрок);
	КонецЕсли; 
	
	Ном = Ном + 1; 
	
	СтрокаТаблицыДанных.СтрокаОбработана = Истина;
	
КонецПроцедуры // ЗагрузитьЭлементСтрокиТаблицыДанных()

// Процедура получает данные по табличным частям объекта
// и помещает их в структуру "Данные" - ключ: "ТабличныеЧасти_" + ИмяТабЧасти.
// 
// Параметры:
//  Данные          	- Структура.
//  СтруктураДанных 	- Структура.
//  СтрокаТаблицыДанных - СтрокаТаблицыЗначений.
// 
Процедура ПолучитьДанныеПоТабличнымЧастямДляОбъекта(Данные, СтруктураДанных, СтрокаТаблицыДанных)
	
	ПравилаЗагрузкиТЧ = СтруктураДанных.ПравилаЗагрузкиТЧ;
	МассивИменТЧ	  = СтруктураДанных.МассивИменТЧ;
	КлючевыеПоля	  = СтруктураДанных.КлючевыеПоля;
	ТаблицаСДаннымиТЧ = СтруктураДанных.ТаблицаСДаннымиТЧ;
	
	СтруктураДляПоиска = Новый Структура;
	
	Для Каждого ТекКлюч Из КлючевыеПоля Цикл
		СтруктураДляПоиска.Вставить(ТекКлюч, СтрокаТаблицыДанных[ТекКлюч])
	КонецЦикла;
	
	Для Каждого ТекИмяТабЧасти Из МассивИменТЧ Цикл
		
		МассивДанныхТЧ 		 = Новый Массив;
		ПравилаЗагрузкиТекТЧ = ПравилаЗагрузкиТЧ.НайтиСтроки(Новый Структура("ВидДанных", ТекИмяТабЧасти));
		
		СтруктураДляПоиска.Вставить("ИмяТабЧасти", ТекИмяТабЧасти);
		НайденныеСтроки = ТаблицаСДаннымиТЧ.НайтиСтроки(СтруктураДляПоиска);
		
		Для Каждого ТекСтрокаТЧ Из НайденныеСтроки Цикл
			
			ДанныеСТроки = Новый Структура;
			ДанныеСтроки.Вставить("Служебный_СтруктураПараметров", Данные.Служебный_СтруктураПараметров);
			// Получаем значения по правилам загрузки.
			ПолучитьЗначенияПоПравилам(ДанныеСТроки, ТекСтрокаТЧ, ПравилаЗагрузкиТекТЧ);
			
			МассивДанныхТЧ.Добавить(ДанныеСТроки);
			
		КонецЦикла;
		
		Данные.Вставить("ТабличныеЧасти_" + ТекИмяТабЧасти, МассивДанныхТЧ);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоТабличнымЧастямДляОбъекта()

// Функция осуществляет поиск объекта в ИБ по полям поиска.
// 
// Параметры:
//  РеквизитыПоиска - Массив.
//  ТекОбъект       - СтрокаТаблицыЗначений.
//  Данные          - Структура.
//  ПравилаЗагрузки - ТаблицаЗначений.
// 
// Возвращаемое значение:
//  СсылкаНаОбъект.
// 
Функция НайтиОбъектВ_ИБ(РеквизитыПоиска, ТекОбъект, Данные, ПравилаЗагрузки)
	
	СсылкаНаОбъект = Неопределено;
	
	// Если реквизиты поиска не установлены, тогда
	// и искать элемент нет необходимости.
	Если РеквизитыПоиска.Количество() = 0 Тогда
		Возврат СсылкаНаОбъект;
	КонецЕсли;
	
	// ВидОбъекта  = ТекОбъект.ВидОбъекта;
	// МетаОбъекта = Метаданные[мСоотвИменКоллекций.Получить(ВидОбъекта)][ТекОбъект.ИмяОбъекта];
	
	ТекстУсловия = "";
	
    Запрос = Новый Запрос;
	
	Для Каждого ТекПоле Из РеквизитыПоиска Цикл 
		
		ИмяРеквизита = ПравилаЗагрузки.Найти(ВРег(ТекПоле), "ИмяРеквизита").ИмяРеквизита;
		
		// // Если реквизит можно использовать в запросе для отбора, тогда
		// Если РеквизитМожноИспользоватьСЗапросеДляОтбора(ИмяРеквизита, ВидОбъекта, МетаОбъекта, ЭтоГруппа) Тогда	
			// Устанавливаем параметр.
			Запрос.УстановитьПараметр(ИмяРеквизита, Данные[ИмяРеквизита]);
			
			// Записываем условие поиска элемента в ИБ.
			ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = "", "", Символы.ПС + "	И ") + ИмяРеквизита + " = &" + ИмяРеквизита;
			
		// КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Объекты.Ссылка
		|ИЗ
		|	" + ТекОбъект.ВидОбъекта + "." + ТекОбъект.ИмяОбъекта + " КАК Объекты
		|ГДЕ
		|	" + ТекстУсловия + "";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Если ВыборкаЗапроса.Следующий() Тогда
			СсылкаНаОбъект = ВыборкаЗапроса.Ссылка;
		КонецЕсли;
		
	Иначе
		СсылкаНаОбъект = Неопределено;
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции // НайтиОбъектВ_ИБ()

// Функция осуществляет поиск объекта в ИБ по заданному в настройке полям поиска.
// 
// Параметры:
//  ДанныеСтроки			- СтрокаТаблицыЗначений		- Данные строки файла MS Excel.
//  СтруктураПараметров		- Структура					- Структура, содержащая параметры, передаваемые между обработчиками.
//  ЕстьОшибки				- Булево					- Признак, что при выполнении произошла ошибка.
//  ОписаниеОшибки			- Строка					- Описание возникшей ошибки.
// 
// Возвращаемое значение:
//  СсылкаНаОбъект, Неопределено.
// 
Функция НайтиОбъектВ_ИБ_ПоАлгоритму(ДанныеСтроки, СтруктураПараметров, ЕстьОшибка = Ложь, ОписаниеОшибки = "")
	Результат = Неопределено;
	
	Попытка
		Выполнить(НастройкаДляЗагрузки.АлгоритмПоискаСуществующихОбъектов);
	Исключение
		ЕстьОшибки = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // НайтиОбъектВ_ИБ_ПоАлгоритму()

// Процедура выполняет загрузку регистра сведений.
// 
// Параметры:
//  ТаблицаДанных 		  - ТаблицаЗначений.
//  СтрокаТаблицыОбъектов - СтрокаТаблицыЗначений.
//  ДанныеДляЗаписи       - Структура.
// 
Процедура ЗагрузитьРегистрСведений(ТаблицаДанных, СтрокаТаблицыОбъектов, ДанныеДляЗаписи)

    // Получаем необходимые значения для выполнения щагрузки.
	ПравилаЗагрузки = СтрокаТаблицыОбъектов.ПравилаЗагрузки;
    ИмяЗакладки		= СтрокаТаблицыОбъектов.ИмяЗакладкиВExcel;
    ИмяОбъекта		= СтрокаТаблицыОбъектов.ИмяОбъекта;
    ОтображаемоеИмя	= СтрокаТаблицыОбъектов.ОтображаемоеИмя;
	
    ПредставлениеВидаОбъекта = мСоотвПредстОбъектов.Получить(ВРег("РегистрСведений"));
    
    // Сообщим пользователю и в протокол.
    бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Выполняется загрузка " + ПредставлениеВидаОбъекта + " """ 
														  + ОтображаемоеИмя + """ (" + Формат(ТекущаяДата(), "ДЛФ=DT") + ").", 
														  СтатусСообщения.Информация,, ВестиПротоколЗагрузки, 
														  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
								   
    // Подготовим таблицу правил для выполнения загрузки.
	ПодготовитьТаблицуПравилДляВыполненияЗагрузки(ПравилаЗагрузки);
	
    // Проверяем правильность указания колонок
    КолонкиВсеНайдены = ПроверитьНаличиеКолонокВТаблицеСДанными(ПравилаЗагрузки, ТаблицаДанных.Колонки, ИмяЗакладки);
    
    Если НЕ КолонкиВсеНайдены Тогда
        // Сообщим пользователю и в протокол.
        бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Загрузка " + ПредставлениеВидаОбъекта + " """ 
															  + ОтображаемоеИмя + """ не выполнена!", СтатусСообщения.Информация,, ВестиПротоколЗагрузки,
								   							  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);	
        Возврат;
    КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаДанных"		, ТаблицаДанных);
	СтруктураДанных.Вставить("ПравилаЗагрузки"		, ПравилаЗагрузки);
	СтруктураДанных.Вставить("СтрокаТаблицыОбъектов", СтрокаТаблицыОбъектов);
	СтруктураДанных.Вставить("ИмяОбъекта"		 	, ИмяОбъекта);
	СтруктураДанных.Вставить("ОтображаемоеИмя"		, ОтображаемоеИмя);
	
	// Выполним загрузку записей регистра сведений.
	ЗагрузитьЗаписиТаблицыДанныхВРегистрСведений(СтруктураДанных);
	
	СчетчикЗаписей = СтруктураДанных.СчетчикЗаписей;
    
    // Записываем данные для записи в файл источник.
    ДанныеДляЗаписи.Вставить("СчетчикЗаписей", СчетчикЗаписей);
    
    // Сообщим пользователю и в протокол.
    бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Записано записей: " + СчетчикЗаписей, 
														  СтатусСообщения.Обычное,, ВестиПротоколЗагрузки, 
														  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
    
    // Сообщим пользователю и в протокол.
    бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Загрузка " + ПредставлениеВидаОбъекта + " """ 
														  + ОтображаемоеИмя + """ завершена (" + Формат(ТекущаяДата(), "ДЛФ=DT") + "). " + Символы.ПС, 
														  СтатусСообщения.Информация,, ВестиПротоколЗагрузки, 
														  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
    
КонецПроцедуры // ЗагрузитьРегистрСведений() 

// Процедура выполняет загрузку записей регистра сведений из таблицы данных
// в информационную базу.
// 
// Параметры:
//  СтруктураДанных - Структура.
// 
Процедура ЗагрузитьЗаписиТаблицыДанныхВРегистрСведений(СтруктураДанных)
	
	ПравилаЗагрузки = СтруктураДанных.ПравилаЗагрузки;
	ТаблицаДанных 	= СтруктураДанных.ТаблицаДанных;
	ИмяОбъекта		= СтруктураДанных.ИмяОбъекта;
	ОтображаемоеИмя = СтруктураДанных.ОтображаемоеИмя;
	
	Ном		= 1;
	Счетчик = 1;
    СчетчикЗаписей = 0;
	
	КоличествоСтрок = ТаблицаДанных.Количество();
	
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		# Если Клиент Тогда
			ОбработкаПрерыванияПользователя();	
		# КонецЕсли 
		
		Данные = Новый Структура;
		Данные.Вставить("Загружен"      , Ложь);
		Данные.Вставить("ОписаниеОшибки", "");
		Данные.Вставить("Событие"       , "");
		Данные.Вставить("Служебный_СтрокаТаблицыДанных", СтрокаТаблицыДанных);
		Данные.Вставить("Служебный_СтруктураПараметров", СтруктураДанных.СтрокаТаблицыОбъектов.СтруктураПараметров);
	
		
		// Получаем значения по правилам загрузки.
		ПолучитьЗначенияПоПравилам(Данные, СтрокаТаблицыДанных, ПравилаЗагрузки);
		
		Если НЕ ВыполнитьПроверкуНаличияОбъектов Тогда
			ЗаписатьДанныеВРегистрСведений(ИмяОбъекта, Данные, Счетчик, СчетчикЗаписей, 
										   СтрокаТаблицыДанных.НомерСтрокиВФайле, ОтображаемоеИмя);
		КонецЕсли;
		
		Если Ном%10 = 0 Тогда
			бит_ОбменДанными_Excel.ВывестиСостояниеПользователю("Запись " + ИмяОбъекта + " " + Ном + " из " + КоличествоСтрок);
		КонецЕсли; 
		
		Ном = Ном + 1;
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("СчетчикЗаписей", СчетчикЗаписей);
	
КонецПроцедуры // ЗагрузитьЗаписиТаблицыДанныхВРегистрСведений()

#КонецОбласти

#Область ПроцедурыЗаписиОбъектов

// Выполняет запись группы справочника в базу.
// 
// Параметры:
//  ИмяОбъекта   - Строка.
//  Данные       - Структура.
//  Счетчик      - Число.
//  СчетчикГрупп - Число.
// 
//  ОбновляемыеРеквизиты - Структура.
//  НомерСтрокиВФайле    - Число.
// 
//  ЗагрузкаСТЧ	- Булево.
// 
Процедура ЗаписатьГруппуСправочника(ИмяОбъекта, Данные, Счетчик, СчетчикГрупп, 
									ОбновляемыеРеквизиты, НомерСтрокиВФайле, ЗагрузкаСТЧ)
	
	МетаСпр = Метаданные.Справочники[ИмяОбъекта];
	
	ЭтоНоваяГруппа = Данные.Событие = "Новый";
	
	Если ЭтоНоваяГруппа Тогда
		
		Если РежимЗаписи = 1 Тогда
			Возврат;
		Иначе
			ТекОбъект = Справочники[ИмяОбъекта].СоздатьГруппу();
		КонецЕсли;
		
    Иначе
        
		Если РежимЗаписи = 1 Тогда  // Обновлять безусловно
			
			ОбъектСсылка = Данные.ТекущийОбъект;
			
			// Если не указан объект для обновления, тогда.
			Если мОбъектДляОбновления = Неопределено Тогда
				ТекОбъект = ОбъектСсылка.ПолучитьОбъект();
			Иначе
				// Иначе указан объект для обновления.
				
				Если ОбъектСсылка = мСсылкаОбъектаДляПоиска Тогда
					
					ТекОбъект 		= мОбъектДляОбновления;
					мЗаписатьОбъект = Ложь;
					
				Иначе
					// Это не наш объект.
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
        Иначе
            Возврат;	
        КонецЕсли; 
        
	КонецЕсли;
    
    // Заполним значения реквизитов.
	Для Каждого КлючИЗначение Из Данные Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЗначениеРеквизита = КлючИЗначение.Значение;
		Если РеквизитСправочникаМожноЗаписывать(МетаСпр, ИмяРеквизита, Истина, ОбновляемыеРеквизиты) Тогда
			ТекОбъект[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли; 	
	КонецЦикла; 
	
	// Загрузим данные по табличным частям для объекта.
	ЗагрузитьДанныеПоТЧДляОбъекта(ЗагрузкаСТЧ, ТекОбъект, МетаСпр, Данные, ОбновляемыеРеквизиты, "Справочник", Истина);
	
	// Выполним запись объект в ИБ.
	ЗаписатьОбъектВИнформационнуюБазу(Данные, ТекОбъект, ИмяОбъекта, "ГруппаСправочника", 
									  Счетчик, СчетчикГрупп, НомерСтрокиВФайле);
    
КонецПроцедуры // ЗаписатьГруппуСправочника()

// Выполняет запись элемента справочника в базу.
// 
// Параметры:
//  ИмяОбъекта       - Строка.
//  Данные           - Структура.
//  Счетчик          - Число.
//  СчетчикЭлементов - Число.
// 
//  ОбновляемыеРеквизиты - Структура.
//  НомерСтрокиВФайле    - Число.
// 
//  ЗагрузкаСТЧ	- Булево.
// 
Процедура ЗаписатьЭлементСправочника(ИмяОбъекта, Данные, Счетчик, СчетчикЭлементов, 
									 ОбновляемыеРеквизиты, НомерСтрокиВФайле, ЗагрузкаСТЧ)
	
	МетаСпр = Метаданные.Справочники[ИмяОбъекта];
	
	ЭтоНовыйОбъект = (Данные.Событие = "Новый");
	
	Если ЭтоНовыйОбъект Тогда
		
		Если РежимЗаписи = 1 Тогда
			Возврат;
		Иначе
			ТекОбъект = Справочники[ИмяОбъекта].СоздатьЭлемент();
		КонецЕсли;
		
    Иначе
		
		Если РежимЗаписи = 1 Тогда  // Обновлять безусловно
			
			ОбъектСсылка = Данные.ТекущийОбъект;
			
			// Если не указан объект для обновления, тогда.
			Если мОбъектДляОбновления = Неопределено Тогда
				ТекОбъект = ОбъектСсылка.ПолучитьОбъект();
			Иначе
				// Иначе указан объект для обновления.
				
				Если ОбъектСсылка = мСсылкаОбъектаДляПоиска Тогда
					
					ТекОбъект 		= мОбъектДляОбновления;
					мЗаписатьОбъект = Ложь;
					
				Иначе
					// Это не наш объект.
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
        Иначе
            Возврат;	
        КонецЕсли;
		
	КонецЕсли;
    
    // Заполним значения реквизитов.
	Для Каждого КлючИЗначение Из Данные Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЗначениеРеквизита = КлючИЗначение.Значение;
		Если РеквизитСправочникаМожноЗаписывать(МетаСпр, ИмяРеквизита, Ложь, ОбновляемыеРеквизиты) Тогда
			ТекОбъект[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли; 	
	КонецЦикла; 
	
	// Загрузим данные по табличным частям для объекта.
	ЗагрузитьДанныеПоТЧДляОбъекта(ЗагрузкаСТЧ, ТекОбъект, МетаСпр, Данные, ОбновляемыеРеквизиты, "Справочник");
	
	// Выполним запись объект в ИБ.
	ЗаписатьОбъектВИнформационнуюБазу(Данные, ТекОбъект, ИмяОбъекта, "ЭлементСправочника", 
									  Счетчик, СчетчикЭлементов, НомерСтрокиВФайле);
	
КонецПроцедуры // ЗаписатьЭлементСправочника()

// Выполняет запись документа в базу.
// 
// Параметры:
//  ИмяОбъекта       - Строка.
//  Данные           - Структура.
//  Счетчик          - Число.
//  СчетчикЭлементов - Число.
// 
//  ОбновляемыеРеквизиты - Структура.
//  НомерСтрокиВФайле    - Число.
// 
//  ЗагрузкаСТЧ	- Булево.
// 
Процедура ЗаписатьДокумент(ИмяОбъекта, Данные, Счетчик, СчетчикЭлементов, 
						   ОбновляемыеРеквизиты, НомерСтрокиВФайле, ЗагрузкаСТЧ)
	
	МетаДок = Метаданные.Документы[ИмяОбъекта];
	
	ЭтоНовыйОбъект = (Данные.Событие = "Новый");
	
	Если ЭтоНовыйОбъект Тогда
		
		Если РежимЗаписи = 1 Тогда
			Возврат;
		Иначе
			ТекОбъект = Документы[ИмяОбъекта].СоздатьДокумент();
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-06 (#3629)
			Если ТипЗнч(ТекОбъект) = Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредств") Тогда
				ТекОбъект.ок_СпособСоздания = 9;
			КонецЕсли; 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-06 (#3629)
		КонецЕсли;
		
    Иначе
        
		Если РежимЗаписи = 1 Тогда  // Обновлять безусловно
			
			ОбъектСсылка = Данные.ТекущийОбъект;
			
			// Если не указан объект для обновления, тогда.
			Если мОбъектДляОбновления = Неопределено Тогда
				ТекОбъект = ОбъектСсылка.ПолучитьОбъект();
			Иначе
				// Иначе указан объект для обновления.
				
				Если ОбъектСсылка = мСсылкаОбъектаДляПоиска Тогда
					
					ТекОбъект 		= мОбъектДляОбновления;
					мЗаписатьОбъект = Ложь;
					
				Иначе
					// Это не наш объект.
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
        Иначе
            Возврат;	
        КонецЕсли; 
        
	КонецЕсли;
    
    // Заполним значения реквизитов.
	Для Каждого КлючИЗначение Из Данные Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЗначениеРеквизита = КлючИЗначение.Значение;
		Если РеквизитДокументаМожноЗаписывать(МетаДок, ИмяРеквизита, ОбновляемыеРеквизиты) Тогда
			ТекОбъект[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли; 	
	КонецЦикла; 
    
    Если НЕ ЗначениеЗаполнено(ТекОбъект.Дата) Тогда
        ТекОбъект.Дата = ТекущаяДата();  
    КонецЕсли;
    
	// Загрузим данные по табличным частям для объекта.
	ЗагрузитьДанныеПоТЧДляОбъекта(ЗагрузкаСТЧ, ТекОбъект, МетаДок, Данные, ОбновляемыеРеквизиты, "Документ");
	
	// Выполним запись объект в ИБ.
	ЗаписатьОбъектВИнформационнуюБазу(Данные, ТекОбъект, ИмяОбъекта, "Документ", 
									  Счетчик, СчетчикЭлементов, НомерСтрокиВФайле);
    
КонецПроцедуры // ЗаписатьДокумент()

// Процедура выполняет запись объекта в ИБ.
// 
// Параметры:
//  Данные     - Структура.
//  ТекОбъект  - ОбъектОбъекта.
//  ИмяОбъекта - Строка.
//  ТипОбъекта - Строка, "ГруппаСправочника, ЭлементСправочника, Документ".
// 
//  Счетчик    		  - Число, счетчик для вывода состояния записи.
//  СчетчикОбъектов   - Число, счетчик записанных объектов.
//  НомерСтрокиВФайле - Число.
// 
Процедура ЗаписатьОбъектВИнформационнуюБазу(Данные, ТекОбъект, ИмяОбъекта, ТипОбъекта, 
											Счетчик, СчетчикОбъектов, НомерСтрокиВФайле)
	
	ЕстьОшибки  = Ложь;
	ЭтоДокумент = ТипОбъекта = "Документ";
	
	ТекстСообщенияУспешнойЗаписи = "";
	
	Если ТипОбъекта = "ГруппаСправочника" Тогда
		ТекстСообщенияУспешнойЗаписи = "группа";
		
	ИначеЕсли ТипОбъекта = "ЭлементСправочника" Тогда
		ТекстСообщенияУспешнойЗаписи = "элемент";
		
    ИначеЕсли ТипОбъекта = "Документ" Тогда
        // BF-1702,1844 добавление кода. Начало. 29.11.2017{{
        // Если это документ с доп аналитиками.
        ОбъектСсылка = ТекОбъект.ССылка;
        Если ЗначениеЗаполнено(ОбъектСсылка) И Метаданные.РегистрыСведений.бит_ДополнительныеАналитики.Измерения.Объект.Тип.Типы().Найти(ТипЗнч(ОбъектСсылка)) <> Неопределено Тогда
            // Запрет на перезаполнение аналитик по умолчанию.
            ТекОбъект.ДополнительныеСвойства.Вставить("бит_НеЗаполнятьАналитикиПоУмолчанию", Истина); 
            Если бит_МеханизмДопИзмерений.ВключенРежимЗаполнятьВсегда() Тогда
                СтруктураДопПараметров = Новый Структура("ЗапретитьПерезаполнениеАналитик", Истина);
                бит_МеханизмДопИзмерений.ЗаписатьДополнительныеПараметрыОбъекта(ОбъектСсылка, СтруктураДопПараметров);
            КонецЕсли;
        КонецЕсли;
        // Добавление кода. Конец. 29.11.2017}}
        ТекстСообщенияУспешнойЗаписи = "документ";
		
	КонецЕсли;
	
	Если Не мЗаписатьОбъект Тогда
		Возврат;
	КонецЕсли;
	
    Попытка
        
		ОписаниеОшибки = "";
		Отказ = Ложь;
		ВыполнитьОбработчикПередЗаписьюОбъекта(ТекОбъект,
											   Данные.Служебный_СтрокаТаблицыДанных,
											   Данные.Служебный_СтруктураПараметров,
											   Отказ,
											   ЕстьОшибки,
											   ОписаниеОшибки);
		Если Отказ Тогда
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-21 (#4262)
			//ОповеститьПользователя("Запись объекта " + СокрЛП(ТекОбъект) +" не выполнена: " + ОписаниеОшибки,
			//					   СтатусСообщения.ОченьВажное,
			//					   Счетчик,
			//					   ,
			//					   ,
			//					   Истина);
			Если ок_СообщатьВСлучаеОтказаОтЗаписи Тогда
				ОповеститьПользователя("Запись объекта " + СокрЛП(ТекОбъект) +" не выполнена: " + ОписаниеОшибки,
								   СтатусСообщения.ОченьВажное,
								   Счетчик,
								   ,
								   ,
								   Истина);
			КонецЕсли;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-21 (#4262)
			Возврат;
		КонецЕсли;
		Если ЕстьОшибки Тогда
			ТекстСообщенияОбОшибке = "";
			ОкончаниеСообщения 	   = """" + ИмяОбъекта + """ файла - строка №" + НомерСтрокиВФайле + ". " + ОписаниеОшибки;
			
			Если ТипОбъекта = "ГруппаСправочника" Тогда
				ТекстСообщенияОбОшибке = "Ошибка выполнения обработчика перед записью группы справочника " + ОкончаниеСообщения;
				
			ИначеЕсли ТипОбъекта = "ЭлементСправочника" Тогда
				ТекстСообщенияОбОшибке = "Ошибка выполнения обработчика перед записью элемента справочника " + ОкончаниеСообщения;
				
			ИначеЕсли ТипОбъекта = "Документ" Тогда
				ТекстСообщенияОбОшибке = "Ошибка выполнения обработчика перед записью документа " + ОкончаниеСообщения;
				
			КонецЕсли;
				
			ОповеститьПользователя(ТекстСообщенияОбОшибке, СтатусСообщения.Важное, Счетчик,,, Истина);
			
			Данные.Загружен = "Ошибка";
			Данные.ОписаниеОшибки = Данные.ОписаниеОшибки + ?(ЗначениеЗаполнено(Данные.ОписаниеОшибки), Символы.ПС, "") 
									+ ОписаниеОшибки;
		Иначе
			ТекОбъект.Записать();
			
			Если Данные.Событие = "Новый" Тогда
				НоваяСтрока = СозданныеОбъекты.Добавить();
				НоваяСтрока.СозданныйОбъект = ТекОбъект.Ссылка;
			КонецЕсли;
			
			ОповеститьПользователя(,, Счетчик, ТекстСообщенияУспешнойЗаписи, ТекОбъект.Ссылка,, ЭтоДокумент);
	        
			Данные.Загружен = "Да";
	        
	        Счетчик         = Счетчик + 1;
			СчетчикОбъектов = СчетчикОбъектов + 1;
		КонецЕсли;
		
	Исключение
		ЕстьОшибки = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
		
		ТекстСообщенияОбОшибке = "";
		ОкончаниеСообщения 	   = """" + ИмяОбъекта + """ файла - строка №" + НомерСтрокиВФайле + ". " + ОписаниеОшибки;
		
		Если ТипОбъекта = "ГруппаСправочника" Тогда
			ТекстСообщенияОбОшибке = "Ошибка записи группы справочника " + ОкончаниеСообщения;
			
		ИначеЕсли ТипОбъекта = "ЭлементСправочника" Тогда
			ТекстСообщенияОбОшибке = "Ошибка записи элемента справочника " + ОкончаниеСообщения;
			
		ИначеЕсли ТипОбъекта = "Документ" Тогда
			ТекстСообщенияОбОшибке = "Ошибка записи документа " + ОкончаниеСообщения;
			
		КонецЕсли;
			
		ОповеститьПользователя(ТекстСообщенияОбОшибке, СтатусСообщения.Важное, Счетчик,,, Истина);
		
		Данные.Загружен = "Ошибка";
		Данные.ОписаниеОшибки = Данные.ОписаниеОшибки + ?(ЗначениеЗаполнено(Данные.ОписаниеОшибки), Символы.ПС, "") 
								+ ОписаниеОшибки;
	КонецПопытки;
    
    // Если есть ошибки и загружать без проверок, тогда.
    Если ЕстьОшибки И ЗагрузитьБезПроверок Тогда
        
        Попытка
			ЕстьОшибки = Ложь;
            
			ТекОбъект.ОбменДанными.Загрузка = Истина;	
			ТекОбъект.Записать();
			
			Если Данные.Событие = "Новый" Тогда
				НоваяСтрока = СозданныеОбъекты.Добавить();
				НоваяСтрока.СозданныйОбъект = ТекОбъект.Ссылка;
			КонецЕсли;
			
			ОповеститьПользователя(,, Счетчик, ТекстСообщенияУспешнойЗаписи, ТекОбъект.Ссылка,, ЭтоДокумент);
			
			Данные.Загружен = "Да";
            
            Счетчик         = Счетчик + 1;
			СчетчикОбъектов = СчетчикОбъектов + 1;
			
		Исключение
			ЕстьОшибки = Истина;
        КонецПопытки;
        
	КонецЕсли; 
	
	Если НЕ ЕстьОшибки Тогда
		ОписаниеОшибки = "";
		ВыполнитьОбработчикПослеЗаписиОбъекта(ТекОбъект,
											  Данные.Служебный_СтрокаТаблицыДанных,
											  Данные.Служебный_СтруктураПараметров,
											  ЕстьОшибки,
											  ОписаниеОшибки);
		Если ЕстьОшибки Тогда
			ТекстСообщенияОбОшибке = "";
			ОкончаниеСообщения 	   = """" + ИмяОбъекта + """ файла - строка №" + НомерСтрокиВФайле + ". " + ОписаниеОшибки;
			
			Если ТипОбъекта = "ГруппаСправочника" Тогда
				ТекстСообщенияОбОшибке = "Ошибка выполнения обработчика после записи группы справочника " + ОкончаниеСообщения;
				
			ИначеЕсли ТипОбъекта = "ЭлементСправочника" Тогда
				ТекстСообщенияОбОшибке = "Ошибка выполнения обработчика после записи элемента справочника " + ОкончаниеСообщения;
				
			ИначеЕсли ТипОбъекта = "Документ" Тогда
				ТекстСообщенияОбОшибке = "Ошибка выполнения обработчика после записи документа " + ОкончаниеСообщения;
				
			КонецЕсли;
				
			ОповеститьПользователя(ТекстСообщенияОбОшибке, СтатусСообщения.Важное, Счетчик,,, Истина);
			
			Данные.Загружен = "Ошибка";
			Данные.ОписаниеОшибки = Данные.ОписаниеОшибки + ?(ЗначениеЗаполнено(Данные.ОписаниеОшибки), Символы.ПС, "") 
									+ ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	// При необходимости установим пометку на удаление.
	УстановитьПометкуУдаленияДляОбъекта(Данные, ТекОбъект);
	
КонецПроцедуры // ЗаписатьОбъектВИнформационнуюБазу()

// Процедура устанавливает пометку на удаление в случае необходимости.
// 
// Параметры:
//  Данные    - Структура.
//  ТекОбъект - ОбъектОбъекта.
// 
Процедура УстановитьПометкуУдаленияДляОбъекта(Данные, ТекОбъект)
	
	Если Данные.Свойство("ПОМЕТКАУДАЛЕНИЯ") И Не ТекОбъект.ЭтоНовый() Тогда
	
		 Если Данные.ПометкаУдаления <> ТекОбъект.ПометкаУдаления Тогда
			 Попытка
				 ТекОбъект.УстановитьПометкуУдаления(Данные.ПометкаУдаления);
			 Исключение
				 // Сообщим пользователю и в протокол.
                 бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Не удалось установить пометку удаления <" 
				 													   + ТекОбъект.Ссылка + ">", СтатусСообщения.Важное, "Ошибка", ВестиПротоколЗагрузки, 
																	   мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
			 КонецПопытки;
		 КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкуУдаленияДляОбъекта()

// Процедура загружает в объекта данные по табличным частям.
// 
// Параметры:
//  ЗагрузкаСТЧ - Булево.
//  ТекОбъект 	- ОбъектОбъекта.
//  МетаОбъекта - МатаданныеОбъекта.
//  Данные    	- Структура.
// 
//  ОбновляемыеРеквизиты - Структура.
// 
//  ВидОбъекта 	- Строка, "Справочник, Документ".
//  ЭтоГруппа	- Булево.
// 
Процедура ЗагрузитьДанныеПоТЧДляОбъекта(ЗагрузкаСТЧ, ТекОбъект, МетаОбъекта, Данные, 
										ОбновляемыеРеквизиты, ВидОбъекта, ЭтоГруппа = Ложь)
	
	Если Не ЗагрузкаСТЧ Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныеЧасти = МетаОбъекта.ТабличныеЧасти;
	
	Для Каждого ТекТабЧасть Из ТабличныеЧасти Цикл
		
		МожноЗаписывать = Ложь;
		
		Если ВидОбъекта = "Справочник" Тогда
			
			Если ЭтоГруппа Тогда
				Если ТекТабЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента 
					Или ТекТабЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
					МожноЗаписывать = Истина;
				КонецЕсли;
			Иначе	
				Если ТекТабЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента 
					Или ТекТабЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
					МожноЗаписывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			МожноЗаписывать = Истина;
		КонецЕсли;
		
		Если МожноЗаписывать Тогда
			
			ИмяТЧ  = ТекТабЧасть.Имя;
			КлючТЧ = "ТабличныеЧасти_" + ИмяТЧ;
			
			Если Данные.Свойство(КлючТЧ) Тогда
			
				Если РежимОбновленияРеквизитов Тогда
					
					Если НЕ ОбновляемыеРеквизиты.Свойство(КлючТЧ) Тогда
						Продолжить;
					КонецЕсли; 
					
				    ТЧДляЗагрузки = ТекОбъект[ИмяТЧ]; 				
    				ДанныеТЧ = Данные[КлючТЧ];
                    
                    Сi = 0;
                    Для Каждого ТекСтрока Из ДанныеТЧ Цикл
                        Если ТЧДляЗагрузки.Количество() >= Сi+1 Тогда
                            НоваяСтрока = ТЧДляЗагрузки[Сi];
    					    ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСТрока);
                            Сi = Сi + 1;
                        КонецЕсли; 					
                    КонецЦикла;
                    
                Иначе
                    
    				ТЧДляЗагрузки = ТекОбъект[ИмяТЧ];
                    ДанныеТЧ = Данные[КлючТЧ];
                    
    				Если Не ТЧДляЗагрузки.Количество() = 0 Тогда
    					ТЧДляЗагрузки.Очистить();
    				КонецЕсли;
    				
    				Для Каждого ТекСтрока Из ДанныеТЧ Цикл
    					НоваяСтрока = ТЧДляЗагрузки.Добавить();
    					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСТрока);
                    КонецЦикла;
                
                КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если бит_ОбменДанными_Excel.ЭтоДокументРучнаяОперация(МетаОбъекта) Тогда
		
		Для Каждого ТекДвижение Из МетаОбъекта.Движения Цикл
			
			КлючДвижения = "ТабличныеЧасти_Движения_"+ТекДвижение.Имя;
			
			Если НЕ Данные.Свойство(КлючДвижения) Тогда
				Продолжить;
			КонецЕсли;
			
			Если РежимОбновленияРеквизитов Тогда
				
				Если НЕ ОбновляемыеРеквизиты.Свойство(КлючДвижения) Тогда
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли;
			
			ТЧДляЗагрузки = ТекОбъект.Движения[ТекДвижение.Имя];
			
			Если Не ТЧДляЗагрузки.Количество() = 0 Тогда
				ТЧДляЗагрузки.Очистить();
			КонецЕсли;
			
			ДанныеТЧ = Данные[КлючДвижения];
			
			ВидРегистра = бит_ОбменДанными_Excel.ПолучитьВидОбъектаПоМетаданным(ТекДвижение);
			
			Если ВидРегистра = "РегистрБухгалтерии" Тогда
				МаксКоличествоСубконто = ТекДвижение.ПланСчетов.МаксКоличествоСубконто;
				Корреспонденция		   = ТекДвижение.Корреспонденция;
				
				МассивСторонПроводки = Новый Массив;
				Если Корреспонденция Тогда
					МассивСторонПроводки.Добавить("Дт");
					МассивСторонПроводки.Добавить("Кт");
				Иначе
					МассивСторонПроводки.Добавить("");
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из ДанныеТЧ Цикл
				НоваяСтрока = ТЧДляЗагрузки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСТрока);
				НоваяСтрока.Период = ТекОбъект.Дата;
				Если ВидРегистра = "РегистрБухгалтерии" Тогда
					// Заполним субконто
					Для Каждого СторонаПроводки Из МассивСторонПроводки Цикл
						Для Ном=1 по МаксКоличествоСубконто Цикл
							
							Если ТекСтрока.Свойство("Субконто"+СторонаПроводки+Ном) Тогда
								бит_БухгалтерияСервер.УстановитьСубконто(НоваяСтрока["Счет"+СторонаПроводки], НоваяСтрока["Субконто"+СторонаПроводки], Ном, ТекСтрока["Субконто"+СторонаПроводки+Ном]);
							КонецЕсли;
							
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ТЧДляЗагрузки.Количество() = 0 Тогда
				ТЧДляЗагрузки.Записывать = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДанныеПоТЧДляОбъекта()

// Процедура выполняет запись данных в регистр сведений.
// 
// Параметры:
//  ИмяОбъекта     	  - Строка.
//  Данные         	  - Структура.
//  Счетчик        	  - Число.
//  СчетчикЗаписей 	  - Число.
//  НомерСтрокиВФайле - Число.
//  ОтображаемоеИмя   - Строка.
// 
Процедура ЗаписатьДанныеВРегистрСведений(ИмяОбъекта, Данные, Счетчик, СчетчикЗаписей, 
										 НомерСтрокиВФайле, ОтображаемоеИмя)

	ЕстьОшибки  = Ложь;
	
	МенеджерЗаписи 	   = РегистрыСведений[ИмяОбъекта].СоздатьМенеджерЗаписи();
    МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяОбъекта];
	
	// Заполним значения менеджера записи из полученных данных.
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Данные);
	
	Попытка
        
		Отказ = Ложь;
		ОписаниеОшибки = "";
		ВыполнитьОбработчикПередЗаписьюОбъекта(МенеджерЗаписи,
											   Данные.Служебный_СтрокаТаблицыДанных,
											   Данные.Служебный_СтруктураПараметров,
											   Отказ,
											   ЕстьОшибки,
											   ОписаниеОшибки);
		Если Отказ Тогда

			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-21 (#4262)
			//ОповеститьПользователя("Запись в регистр сведений не выполнена: " + ОписаниеОшибки,
			//					   СтатусСообщения.ОченьВажное,
			//					   Счетчик,
			//					   ,
			//					   ,
			//					   Истина);
			Если ок_СообщатьВСлучаеОтказаОтЗаписи Тогда
				ОповеститьПользователя("Запись в регистр сведений не выполнена: " + ОписаниеОшибки,
								   СтатусСообщения.ОченьВажное,
								   Счетчик,
								   ,
								   ,
								   Истина);
			КонецЕсли;
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-21 (#4262)
			
			Возврат;
		КонецЕсли;
		Если ЕстьОшибки Тогда
			ОкончаниеСообщения 	   = """" + ИмяОбъекта + """ файла - строка №" + НомерСтрокиВФайле + ". " + ОписаниеОшибки;
			ТекстСообщенияОбОшибке = "Ошибка выполнения обработчика перед записью регистра сведений " + ОкончаниеСообщения;
			ТекстСообщенияОбОшибке = "";
				
			ОповеститьПользователя(ТекстСообщенияОбОшибке, СтатусСообщения.Важное, Счетчик,,, Истина);
			
			Данные.Загружен = "Ошибка";
			Данные.ОписаниеОшибки = Данные.ОписаниеОшибки + ?(ЗначениеЗаполнено(Данные.ОписаниеОшибки), Символы.ПС, "") 
									+ ОписаниеОшибки;
		Иначе						
	
			МенеджерЗаписи.Записать();
		
			// ОповеститьПользователя(,, Счетчик, "запись", "запись регистра сведений """ + ОтображаемоеИмя + """ "
			// 					   + "файла - строка №" + НомерСтрокиВФайле,, Истина);
			ОповеститьПользователя(,, Счетчик, "запись", "запись файла - строка №" + НомерСтрокиВФайле,, Истина);
        
			Данные.Загружен = "Да";
        
        	Счетчик        = Счетчик + 1;
			СчетчикЗаписей = СчетчикЗаписей + 1;
		КонецЕсли;
		
	Исключение
		ЕстьОшибки = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
		
		ОкончаниеСообщения 	   = """" + ИмяОбъекта + """ файла - строка №" + НомерСтрокиВФайле + ". " + ОписаниеОшибки;
		ТекстСообщенияОбОшибке = "Ошибка записи регистра сведений " + ОкончаниеСообщения;
			
		ОповеститьПользователя(ТекстСообщенияОбОшибке, СтатусСообщения.Важное, Счетчик,,, Истина);
		
		Данные.Загружен = "Ошибка";
		Данные.ОписаниеОшибки = Данные.ОписаниеОшибки + ?(ЗначениеЗаполнено(Данные.ОписаниеОшибки), Символы.ПС, "") 
		+ ОписаниеОшибки;
	КонецПопытки;
	
	Если НЕ ЕстьОшибки Тогда
		ОписаниеОшибки = "";
		ВыполнитьОбработчикПослеЗаписиОбъекта(МенеджерЗаписи,
											  Данные.Служебный_СтрокаТаблицыДанных,
											  Данные.Служебный_СтруктураПараметров,
											  ЕстьОшибки,
											  ОписаниеОшибки);
		Если ЕстьОшибки Тогда
			ОкончаниеСообщения 	   = """" + ИмяОбъекта + """ файла - строка №" + НомерСтрокиВФайле + ". " + ОписаниеОшибки;
			ТекстСообщенияОбОшибке = "Ошибка выполнения обработчика после записи регистра сведений " + ОкончаниеСообщения;
			ТекстСообщенияОбОшибке = "";
			
			ОповеститьПользователя(ТекстСообщенияОбОшибке, СтатусСообщения.Важное, Счетчик,,, Истина);
		
			Данные.Загружен = "Ошибка";
			Данные.ОписаниеОшибки = Данные.ОписаниеОшибки + ?(ЗначениеЗаполнено(Данные.ОписаниеОшибки), Символы.ПС, "") 
									+ ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДанныеВРегистрСведений()

#КонецОбласти

#Область ОбработчикиСобытийОбъектовAkuznetsov050811

// Процедура выполняется перед началом загрузки данных из файла MS Excel
// 	Выполняется код указанный в настройках загрузки в обработчике события "Перед загрузкой".
// 
// Параметры:
//  Данные					 - ТаблицаЗначений							- Таблица с данными из файла MS Excel.
//  СтруктураПараметров		 - Структура								- Структура, содержащая параметры, передаваемые между обработчиками.
//  Отказ					 - Булево									- Признак, отказа от выполнения загрузки.
//  ЕстьОшибки				 - Булево									- Признак, что при выполнении произошла ошибка.
//  ОписаниеОшибки			 - Строка									- Описание возникшей ошибки.
// 
// Возвращаемое значение:
//  нет.
// 
Процедура ВыполнитьОбработчикПередЗагрузкой(Данные, СтруктураПараметров, Отказ = Ложь, ЕстьОшибки = Ложь, ОписаниеОшибки = "")
	Попытка
		// 1c-izhtc (
		ИндексКлиент = Найти(НастройкаДляЗагрузки.АлгоритмПередЗагрузкой, "#Клиент");
		Если ИндексКлиент > 0 Тогда 
			ИндексСервер = Найти(НастройкаДляЗагрузки.АлгоритмПередЗагрузкой, "#Сервер");
			Длина = ИндексКлиент - (ИндексСервер + 8);
			Если Длина < 0 Тогда 
				Длина = СтрДлина(НастройкаДляЗагрузки.АлгоритмПередЗагрузкой)-(ИндексСервер + 8);
			КонецЕсли;
			АлгоритмПередЗагрузкой = Сред(НастройкаДляЗагрузки.АлгоритмПередЗагрузкой, ИндексСервер+8, Длина);
			Выполнить(АлгоритмПередЗагрузкой);
		Иначе
			Выполнить(НастройкаДляЗагрузки.АлгоритмПередЗагрузкой);
		КонецЕсли;
		// 1c-izhtc )
	Исключение
		ЕстьОшибки = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры // ВыполнитьОбработчикПередЗагрузкой()

// Процедура выполняется сразу после загрузки объектов
// 	Выполняется код указанный в настройках загрузки в обработчике события "После загрузки".
// 
// Параметры:
//  Данные					 - ТаблицаЗначений							- Таблица с данными из файла MS Excel.
//  СтруктураПараметров		 - Структура								- Структура, содержащая параметры, передаваемые между обработчиками.
//  СтруктураПараметров		 - Структура								- Структура, содержащая параметры, передаваемые между обработчиками.
//  ЕстьОшибки				 - Булево									- Признак, что при выполнении произошла ошибка.
//  ОписаниеОшибки			 - Строка									- Описание возникшей ошибки.
// 
// Возвращаемое значение:
//  нет
// 
Процедура ВыполнитьОбработчикПослеЗагрузки(Данные, СтруктураПараметров, ЕстьОшибки = Ложь, ОписаниеОшибки = "")
	Попытка
		Выполнить(НастройкаДляЗагрузки.АлгоритмПослеЗагрузки);
	Исключение
		ЕстьОшибки = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры // ВыполнитьОбработчикПослеЗагрузки()

// Процедура выполняется непосредственно перед записью объекта
// 	Выполняется код указанный в настройках загрузки в обработчике события "Перед записью объекта".
// 
// Параметры:
//  Объект		 			 - Объект, МенеджерЗаписи регистра сведений	- Записываемый объект.
//  ДанныеСтроки			 - СтрокаТаблицыЗначений					- Данные строки из файла MS Excel.
//  СтруктураПараметров		 - Структура								- Структура, содержащая параметры, передаваемые между обработчиками.
//  Отказ					 - Булево									- Признак, отказа от записи объекта.
//  ЕстьОшибки				 - Булево									- Признак, что при выполнении произошла ошибка.
//  ОписаниеОшибки			 - Строка									- Описание возникшей ошибки.
// 
// Возвращаемое значение:
//  нет
// 
Процедура ВыполнитьОбработчикПередЗаписьюОбъекта(Объект, ДанныеСтроки, СтруктураПараметров, Отказ = Ложь, ЕстьОшибки = Ложь, ОписаниеОшибки = "")
	Попытка
		Выполнить(НастройкаДляЗагрузки.АлгоритмПередЗаписьюОбъекта);
	Исключение
		ЕстьОшибки = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры // ВыполнитьОбработчикПередЗаписьюОбъекта()

// Процедура выполняется сразу после записи объекта
// 	Выполняется код указанный в настройках загрузки в обработчике события "После записи объекта".
// 
// Параметры:
//  Объект		 			 - Объект, МенеджерЗаписи регистра сведений	- Записываемый объект.
//  ДанныеСтроки			 - СтрокаТаблицыЗначений					- Данные строки из файла MS Excel.
//  СтруктураПараметров		 - Структура								- Структура, содержащая параметры, передаваемые между обработчиками.
//  ЕстьОшибки				 - Булево									- Признак, что при выполнении произошла ошибка.
//  ОписаниеОшибки			 - Строка									- Описание возникшей ошибки.
// 
// Возвращаемое значение:
//  нет
// 
Процедура ВыполнитьОбработчикПослеЗаписиОбъекта(Объект, ДанныеСтроки, СтруктураПараметров, ЕстьОшибки = Ложь, ОписаниеОшибки = "")
	Попытка
		Выполнить(НастройкаДляЗагрузки.АлгоритмПослеЗаписиОбъекта);
	Исключение
		ЕстьОшибки = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры // ВыполнитьОбработчикПослеЗаписиОбъекта()

#КонецОбласти

#Область ФункцииПоискаОбъектов

// Функция осуществляет поиск элемента справочника в ИБ.
// 
// Параметры:
//  СтрокаПравил 			 - СтрокаТаблицыЗначений.
//  СообщатьНеНайденРодитель - Булево.
//  Значение                 - Строка.
//  ТекстСтрока              - Строка.
// 
// Возвращаемое значение:
//  Результат - СправочникСсылка.
// 
Функция НайтиЭлементСправочника(СтрокаПравил, СообщатьНеНайденРодитель, Значение, ТекстСтрока)
	
	Результат = Справочники[СтрокаПравил.ИмяОбъекта].ПустаяСсылка();
	
	СообщатьОНенайденномЭлементе = СтрокаПравил.ИмяРеквизита <> "РОДИТЕЛЬ"
								   Или (СтрокаПравил.ИмяРеквизита = "РОДИТЕЛЬ"
								   И СообщатьНеНайденРодитель);
	
	Если СтрокаПравил.РеквизитПоиска = "КОД" Тогда
		
		ТекущийКод = "";
		
		Если Метаданные.Справочники[СтрокаПравил.ИмяОбъекта].ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
			ТекущийКод = бит_ОбменДанными_Excel.ПолучитьЧисло(бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение)));
		Иначе	
			ТекущийКод = бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение));
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ТекущийКод) Тогда
			
			Результат = Справочники[СтрокаПравил.ИмяОбъекта].НайтиПоКоду(ТекущийКод);
			
			// Проверим найден элемент справочника по коду.
			Если Не ЗначениеЗаполнено(Результат)
				И СообщатьОНенайденномЭлементе Тогда
				
				ТекстСообщения = "Элемент справочника """ + Метаданные.Справочники[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ с кодом: " + ТекущийКод + " в ИБ не найден!" + ТекстСтрока;
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		ЗначениеРеквизита = бит_ОбменДанными_Excel.УбитьНеразрывныйПробел(СокрЛП(Значение));
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			РекПоискаНаименование = (СтрокаПравил.РеквизитПоиска = "НАИМЕНОВАНИЕ");
			
			Если РекПоискаНаименование Тогда
				Результат = Справочники[СтрокаПравил.ИмяОбъекта].НайтиПоНаименованию(ЗначениеРеквизита);
			Иначе
				Результат = НайтиОбъектИБПоРеквизиту("Справочник", СтрокаПравил.ИмяОбъекта,  
													 СтрокаПравил.РеквизитПоиска, ЗначениеРеквизита);
			КонецЕсли;
			
			// Проверим найден элемент справочника по реквизиту.
			Если Не ЗначениеЗаполнено(Результат)
				И СообщатьОНенайденномЭлементе Тогда
				
				ДопТекст = ?(РекПоискаНаименование, "с наименованием: " + ЗначениеРеквизита, 
							 "со значением: " + ЗначениеРеквизита + " реквизита: " + СтрокаПравил.РеквизитПоиска);
				
				ТекстСообщения = "Элемент справочника """ + Метаданные.Справочники[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ " + ДопТекст + " в ИБ не найден!" + ТекстСтрока;
				
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НайтиЭлементСправочника()

// Функция осуществляет поиск документа в ИБ.
// 
// Параметры:
//  СтрокаПравил - СтрокаТаблицыЗначений.
//  Значение	 - Строка.
//  ТекстСтрока  - Строка.
// 
// Возвращаемое значение:
//  Результат - ДокументСсылка.
// 
Функция НайтиДокумент(СтрокаПравил, Значение, ТекстСтрока)
	
	Результат = Документы[СтрокаПравил.ИмяОбъекта].ПустаяСсылка();
	
	Если СтрокаПравил.РеквизитПоиска = "НОМЕР" Тогда
		
		ТекущийНомер = "";
		
		Если Метаданные.Документы[СтрокаПравил.ИмяОбъекта].ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Число Тогда
			ТекущийНомер = бит_ОбменДанными_Excel.ПолучитьЧисло(бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение)));
		Иначе	
			ТекущийНомер = бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение));
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ТекущийНомер) Тогда
			
			Результат = Документы[СтрокаПравил.ИмяОбъекта].НайтиПоНомеру(ТекущийНомер, ТекущаяДата());
			
			// Проверим найден документ по номеру.
			Если Не ЗначениеЗаполнено(Результат) Тогда
				
				ТекстСообщения = "Документ """ + Метаданные.Документы[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ с номером: " + ТекущийНомер + " в ИБ не найден!" + ТекстСтрока;
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		ЗначениеРеквизита = бит_ОбменДанными_Excel.УбитьНеразрывныйПробел(СокрЛП(Значение));
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			Результат = НайтиОбъектИБПоРеквизиту("Документ", СтрокаПравил.ИмяОбъекта,  
												 СтрокаПравил.РеквизитПоиска, ЗначениеРеквизита);
			
			// Проверим найден документ по реквизиту.
			Если Не ЗначениеЗаполнено(Результат) Тогда
				
				ТекстСообщения = "Документ """ + Метаданные.Документы[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ со значением: " + ЗначениеРеквизита + " реквизита: " 
								 + СтрокаПравил.РеквизитПоиска + " в ИБ не найден!" + ТекстСтрока;
				
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НайтиДокумент()

// Функция осуществляет поиск значения перечисления в конфигурации.
// 
// Параметры:
//  СтрокаПравил - СтрокаТаблицыЗначений.
//  Значение	 - Строка.
//  ТекстСтрока  - Строка.
// 
// Возвращаемое значение:
//  Результат - ПеречислениеСсылка.
// 
Функция НайтиЗначениеПеречисления(СтрокаПравил, Значение, ТекстСтрока)
	
	Результат = Перечисления[СтрокаПравил.ИмяОбъекта].ПустаяСсылка();
	
	ИмяЗначенияПеречисления = бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение));
	
	Если ЗначениеЗаполнено(ИмяЗначенияПеречисления) Тогда
		
		Попытка
			Результат = Перечисления[СтрокаПравил.ИмяОбъекта][ИмяЗначенияПеречисления];
		Исключение
			
			// Сообщим пользователю об неудаче.
			ТекстСообщения = "Значения перечисления """ + Метаданные.Перечисления[СтрокаПравил.ИмяОбъекта].Синоним
							 + """ с именем: " + ИмяЗначенияПеречисления + " в конфигурации нет!" + ТекстСтрока;
			ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НайтиЗначениеПеречисления()

// Функция осуществляет поиск элемента плана видов характеристик в ИБ.
// 
// Параметры:
//  СтрокаПравил 			 - СтрокаТаблицыЗначений.
//  СообщатьНеНайденРодитель - Булево.
//  Значение                 - Строка.
//  ТекстСтрока              - Строка.
// 
// Возвращаемое значение:
//  Результат - ПланВидовХарактеристикСсылка.
// 
Функция НайтиЭлементПланаВидовХарактеристик(СтрокаПравил, СообщатьНеНайденРодитель, Значение, ТекстСтрока)
	
	Результат = ПланыВидовХарактеристик[СтрокаПравил.ИмяОбъекта].ПустаяСсылка();
	
	СообщатьОНенайденномЭлементе = СтрокаПравил.ИмяРеквизита <> "РОДИТЕЛЬ"
								   Или (СтрокаПравил.ИмяРеквизита = "РОДИТЕЛЬ"
								   И СообщатьНеНайденРодитель);
	
	Если СтрокаПравил.РеквизитПоиска = "КОД" Тогда
		
		ТекущийКод = бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение));
		
		Если ЗначениеЗаполнено(ТекущийКод) Тогда
			
			Результат = ПланыВидовХарактеристик[СтрокаПравил.ИмяОбъекта].НайтиПоКоду(ТекущийКод);
			
			// Проверим найден элемент справочника по коду.
			Если Не ЗначениеЗаполнено(Результат)
				И СообщатьОНенайденномЭлементе Тогда
				
				ТекстСообщения = "Элемент плана видов характеристик """ + Метаданные.ПланыВидовХарактеристик[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ с кодом: " + ТекущийКод + " в ИБ не найден!" + ТекстСтрока;
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		ЗначениеРеквизита = бит_ОбменДанными_Excel.УбитьНеразрывныйПробел(СокрЛП(Значение));
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			РекПоискаНаименование = (СтрокаПравил.РеквизитПоиска = "НАИМЕНОВАНИЕ");
			
			Если РекПоискаНаименование Тогда
				Результат = ПланыВидовХарактеристик[СтрокаПравил.ИмяОбъекта].НайтиПоНаименованию(ЗначениеРеквизита);
			Иначе
				Результат = НайтиОбъектИБПоРеквизиту("ПланВидовХарактеристик", СтрокаПравил.ИмяОбъекта,  
													 СтрокаПравил.РеквизитПоиска, ЗначениеРеквизита);
			КонецЕсли;
			
			// Проверим найден элемент справочника по реквизиту.
			Если Не ЗначениеЗаполнено(Результат)
				И СообщатьОНенайденномЭлементе Тогда
				
				ДопТекст = ?(РекПоискаНаименование, "с наименованием: " + ЗначениеРеквизита, 
							 "со значением: " + ЗначениеРеквизита + " реквизита: " + СтрокаПравил.РеквизитПоиска);
				
				ТекстСообщения = "Элемент плана видов характеристик """ + Метаданные.ПланыВидовХарактеристик[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ " + ДопТекст + " в ИБ не найден!" + ТекстСтрока;
				
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НайтиЭлементПланаВидовХарактеристик()

// Функция осуществляет поиск элемента плана счетов в ИБ.
// 
// Параметры:
//  СтрокаПравил - СтрокаТаблицыЗначений.
//  Значение	 - Строка.
//  ТекстСтрока  - Строка.
// 
// Возвращаемое значение:
//  Результат - ПланСчетовСсылка.
// 
Функция НайтиЭлементПланаСчетов(СтрокаПравил, Значение, ТекстСтрока)
	
	Результат = ПланыСчетов[СтрокаПравил.ИмяОбъекта].ПустаяСсылка();
	
	Если СтрокаПравил.РеквизитПоиска = "КОД" Тогда
		
		ТекущийКод = бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение));
		
		Если ЗначениеЗаполнено(ТекущийКод) Тогда
			
			Результат = ПланыСчетов[СтрокаПравил.ИмяОбъекта].НайтиПоКоду(ТекущийКод);
			
			// Проверим найден элемент плана счетов по коду.
			Если Не ЗначениеЗаполнено(Результат) Тогда
				
				ТекстСообщения = "Элемент плана счетов """ + Метаданные.ПланыСчетов[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ с кодом: " + ТекущийКод + " в ИБ не найден!" + ТекстСтрока;
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		ЗначениеРеквизита = бит_ОбменДанными_Excel.УбитьНеразрывныйПробел(СокрЛП(Значение));
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			РекПоискаНаименование = (СтрокаПравил.РеквизитПоиска = "НАИМЕНОВАНИЕ");
			
			Если РекПоискаНаименование Тогда
				Результат = ПланыСчетов[СтрокаПравил.ИмяОбъекта].НайтиПоНаименованию(ЗначениеРеквизита, Истина, Неопределено);
			Иначе
				Результат = НайтиОбъектИБПоРеквизиту("ПланСчетов", СтрокаПравил.ИмяОбъекта,  
													 СтрокаПравил.РеквизитПоиска, ЗначениеРеквизита);
			КонецЕсли;
			
			// Проверим найден элемент плана счетов по реквизиту.
			Если Не ЗначениеЗаполнено(Результат) Тогда
				
				ДопТекст = ?(РекПоискаНаименование, "с наименованием: " + ЗначениеРеквизита, 
							 "со значением: " + ЗначениеРеквизита + " реквизита: " + СтрокаПравил.РеквизитПоиска);
				
				ТекстСообщения = "Элемент плана счетов """ + Метаданные.ПланыСчетов[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ " + ДопТекст + " в ИБ не найден!" + ТекстСтрока;
				
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НайтиЭлементПланаСчетов()

// Функция осуществляет поиск элемента плана видов расчета в ИБ.
// 
// Параметры:
//  СтрокаПравил - СтрокаТаблицыЗначений.
//  Значение	 - Строка.
//  ТекстСтрока  - Строка.
// 
// Возвращаемое значение:
//  Результат - ПланВидовРасчетаСсылка.
// 
Функция НайтиЭлементПланаВидовРасчета(СтрокаПравил, Значение, ТекстСтрока)
	
	Результат = ПланыВидовРасчета[СтрокаПравил.ИмяОбъекта].ПустаяСсылка();
	
	Если СтрокаПравил.РеквизитПоиска = "КОД" Тогда
		
		ТекущийКод = "";
		
		Если Метаданные.ПланыВидовРасчета[СтрокаПравил.ИмяОбъекта].ТипКода = Метаданные.СвойстваОбъектов.ТипКодаПланаВидовРасчета.Число Тогда
			ТекущийКод = бит_ОбменДанными_Excel.ПолучитьЧисло(бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение)));
		Иначе	
			ТекущийКод = бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийКод) Тогда
			
			Результат = ПланыВидовРасчета[СтрокаПравил.ИмяОбъекта].НайтиПоКоду(ТекущийКод);
			
			// Проверим найден элемент плана счетов по коду.
			Если Не ЗначениеЗаполнено(Результат) Тогда
				
				ТекстСообщения = "Элемент плана видов расчета """ + Метаданные.ПланыВидовРасчета[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ с кодом: " + ТекущийКод + " в ИБ не найден!" + ТекстСтрока;
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		ЗначениеРеквизита = бит_ОбменДанными_Excel.УбитьНеразрывныйПробел(СокрЛП(Значение));
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			РекПоискаНаименование = (СтрокаПравил.РеквизитПоиска = "НАИМЕНОВАНИЕ");
			
			Если РекПоискаНаименование Тогда
				Результат = ПланыВидовРасчета[СтрокаПравил.ИмяОбъекта].НайтиПоНаименованию(ЗначениеРеквизита, Истина);
			Иначе
				Результат = НайтиОбъектИБПоРеквизиту("ПланВидовРасчета", СтрокаПравил.ИмяОбъекта,  
													 СтрокаПравил.РеквизитПоиска, ЗначениеРеквизита);
			КонецЕсли;
			
			// Проверим найден элемент плана счетов по реквизиту.
			Если Не ЗначениеЗаполнено(Результат) Тогда
				
				ДопТекст = ?(РекПоискаНаименование, "с наименованием: " + ЗначениеРеквизита, 
							 "со значением: " + ЗначениеРеквизита + " реквизита: " + СтрокаПравил.РеквизитПоиска);
				
				ТекстСообщения = "Элемент плана видов расчета """ + Метаданные.ПланыВидовРасчета[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ " + ДопТекст + " в ИБ не найден!" + ТекстСтрока;
				
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НайтиЭлементПланаВидовРасчета()

// Функция осуществляет поиск элемента плана обмена в ИБ.
// 
// Параметры:
//  СтрокаПравил - СтрокаТаблицыЗначений.
//  Значение	 - Строка.
//  ТекстСтрока  - Строка.
// 
// Возвращаемое значение:
//  Результат - ПланОбменаСсылка.
// 
Функция НайтиЭлементПланаОбмена(СтрокаПравил, Значение, ТекстСтрока)
	
	Результат = ПланыОбмена[СтрокаПравил.ИмяОбъекта].ПустаяСсылка();
	
	Если СтрокаПравил.РеквизитПоиска = "КОД" Тогда
		
		ТекущийКод = бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение));
		
		Если ЗначениеЗаполнено(ТекущийКод) Тогда
			
			Результат = ПланыОбмена[СтрокаПравил.ИмяОбъекта].НайтиПоКоду(ТекущийКод);
			
			// Проверим найден элемент плана счетов по коду.
			Если Не ЗначениеЗаполнено(Результат) Тогда
				
				ТекстСообщения = "Элемент плана обмена """ + Метаданные.ПланыОбмена[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ с кодом: " + ТекущийКод + " в ИБ не найден!" + ТекстСтрока;
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		ЗначениеРеквизита = бит_ОбменДанными_Excel.УбитьНеразрывныйПробел(СокрЛП(Значение));
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			РекПоискаНаименование = (СтрокаПравил.РеквизитПоиска = "НАИМЕНОВАНИЕ");
			
			Если РекПоискаНаименование Тогда
				Результат = ПланыОбмена[СтрокаПравил.ИмяОбъекта].НайтиПоНаименованию(ЗначениеРеквизита, Истина);
			Иначе
				Результат = НайтиОбъектИБПоРеквизиту("ПланОбмена", СтрокаПравил.ИмяОбъекта,  
													 СтрокаПравил.РеквизитПоиска, ЗначениеРеквизита);
			КонецЕсли;
			
			// Проверим найден элемент плана счетов по реквизиту.
			Если Не ЗначениеЗаполнено(Результат) Тогда
				
				ДопТекст = ?(РекПоискаНаименование, "с наименованием: " + ЗначениеРеквизита, 
							 "со значением: " + ЗначениеРеквизита + " реквизита: " + СтрокаПравил.РеквизитПоиска);
				
				ТекстСообщения = "Элемент плана обмена """ + Метаданные.ПланыОбмена[СтрокаПравил.ИмяОбъекта].Синоним
								 + """ " + ДопТекст + " в ИБ не найден!" + ТекстСтрока;
				
				ОповеститьПользователя(ТекстСообщения, СтатусСообщения.Важное, 0,,, Истина);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НайтиЭлементПланаВидовРасчета()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Функция проверяет заполненность ключевых полей в строке.
// 
// Параметры:
//  СтрокаТаблицыДанных - СтрокаТаблицыЗначений.
//  КлючевыеПоля 		- Массив.
// 
// Возвращаемое значение:
//  ПоляЗаполнены - Булево.
// 
Функция КлючевыеПоляЗаполнены(СтрокаТаблицыДанных, КлючевыеПоля)
    
    ПоляЗаполнены 	  = Истина;
	ТекстКлючевыеПоля = "";
	
    Для Каждого ТекПоле Из КлючевыеПоля Цикл
        
		Если Не ЗначениеЗаполнено(СтрокаТаблицыДанных[ТекПоле]) Тогда
			ТекстКлючевыеПоля = ТекстКлючевыеПоля + ?(ПустаяСтрока(ТекстКлючевыеПоля), "", ", ") + ТекПоле;
            ПоляЗаполнены 	  = Ложь;
        КонецЕсли;
        
    КонецЦикла;
	
	Если Не ПоляЗаполнены Тогда
		ТекстСообщения = "В файле по строке №" + СтрокаТаблицыДанных.НомерСтрокиВФайле + " не заполнены ключевые поля: " 
						 + ТекстКлючевыеПоля + ". Данные по строке не загружены.";
		ОповеститьПользователя(ТекстСообщения, СтатусСообщения.ОченьВажное, 0,,, Истина);
	КонецЕсли;
	
    Возврат ПоляЗаполнены;
    
КонецФункции // КлючевыеПоляЗаполнены()

// Проверяет наличие колонок в таблице с данными.
// 
// Параметры:
//  ТаблицыПравил        - ТаблицаЗначений.
//  КолонкиТаблицыДанных - КоллекцияМетаданных.
//  ИмяЗакладки          - Строка.
//  ЗагрузкаСТЧ			 - Булево.
// 
// Возвращаемое значение:
//  КолонкиВсеНайдены - Булево.
// 
Функция ПроверитьНаличиеКолонокВТаблицеСДанными(ТаблицыПравил, КолонкиТаблицыДанных, ИмяЗакладки, ЗагрузкаСТЧ = Ложь);
    
    КолонкиВсеНайдены    = Истина;
    ПроизвольныйАлгоритм = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм;
    
	Для Каждого ТекСтрока ИЗ ТаблицыПравил Цикл
        
        Если ТекСтрока.Тип = ПроизвольныйАлгоритм
            Или (ЗначениеЗаполнено(ТекСтрока.ПоУмолчанию) И Не ТекСтрока.ТолькоДляПустых) Тогда
            Продолжить;
        КонецЕсли;
        
        // Если колонка не найдена сообщаем пользователю.
		Если КолонкиТаблицыДанных.Найти(ТекСтрока.ИмяВФайле) = Неопределено Тогда
            // Сообщим пользователю и в протокол.
            бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Колонка с именем """ + ТекСтрока.ИмяВФайле 
																  + """ не найдена, лист """ + ИмяЗакладки + """ в файле источнике!", СтатусСообщения.Важное,, 
																  ВестиПротоколЗагрузки, мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
			КолонкиВсеНайдены = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗагрузкаСТЧ Тогда
		
		// Проверим наличие колонки с имененм "ИмяТабЧасти".
		Если КолонкиТаблицыДанных.Найти("ИМЯТАБЧАСТИ") = Неопределено Тогда
            // Сообщим пользователю и в протокол.
            бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Колонка с именем ""ИмяТабЧасти"" не найдена, лист """ 
																  + ИмяЗакладки + """ в файле источнике!", СтатусСообщения.Важное,,
																  ВестиПротоколЗагрузки, мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
			КолонкиВсеНайдены = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КолонкиВсеНайдены;
	
КонецФункции // ПроверитьНаличиеКолонокВТаблицеСДанными()

// Процедура форматирует данные согласно правилам загруки.
// 
// Параметры:
//  Данные         	   - Структура.
//  СтрокаТаблицыEXCEL - СтрокаТаблицыЗначений.
//  ПравилаЗагрузки	   - ТаблицаЗначений.
// 
Процедура ПолучитьЗначенияПоПравилам(Данные, СтрокаТаблицыEXCEL, ПравилаЗагрузки, СообщатьНеНайденРодитель = Истина)
	
    // Получаем ссылку на перечисление "бит_ТипыЗагружаемыхОбъектовИзExcel".
    МенеджерТипы = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel;
    
    Для каждого СтрокаПравил Из ПравилаЗагрузки Цикл
		
		ТекстСтрока	= " (в файле имя колонки " + СтрокаПравил.ИмяВФайле + ", строка №" + СтрокаТаблицыEXCEL.НомерСтрокиВФайле + ")";
        ТекущийТип	= СтрокаПравил.Тип;
        Результат   = Неопределено;
        
        // Если это не произвольный алгоритм, тогда
        Если ТекущийТип <> МенеджерТипы.ПроизвольныйАлгоритм Тогда
            
            ЗначениеУстановленоПоУмолчанию = Ложь;
            
            // Если установлено значение по умолчанию, тогда.
            Если ЗначениеЗаполнено(СтрокаПравил.ПоУмолчанию) Тогда
                
                // Если значение необходимо устанавливать только для пустых значений, тогда.
                Если СтрокаПравил.ТолькоДляПустых Тогда
					
					ТекущееЗначение = СтрокаТаблицыEXCEL[СтрокаПравил.ИмяВФайле];
					
                    Если Не ЗначениеЗаполнено(ТекущееЗначение) Тогда
                        Результат = СтрокаПравил.ПоУмолчанию;
                        ЗначениеУстановленоПоУмолчанию = Истина;
                    Иначе
                        Значение = ТекущееЗначение;
                    КонецЕсли;
                    
                Иначе
                    Результат = СтрокаПравил.ПоУмолчанию;
                    ЗначениеУстановленоПоУмолчанию = Истина;
                КонецЕсли;
                
            Иначе
                Значение = СтрокаТаблицыEXCEL[СтрокаПравил.ИмяВФайле];
            КонецЕсли;
            
            // Если значение установлено не по умолчанию, тогда.
            Если Не ЗначениеУстановленоПоУмолчанию Тогда
				
				// Получим значение из списков Excel
				Если Данные.Служебный_СтруктураПараметров.НастройкиКолонок.Свойство(СтрокаПравил.ИмяВФайле) Тогда
					ИмяСписка = Данные.Служебный_СтруктураПараметров.НастройкиКолонок[СтрокаПравил.ИмяВФайле].ИмяСписка; 
				КонецЕсли;
				СпискиИсточники = Данные.Служебный_СтруктураПараметров.СпискиИсточники;
				МассивТипов = бит_ОбщегоНазначенияКлиентСервер.ПолучитьТипыИзСтроки(СтрокаПравил.СтрТип);
				ТекТип = Новый ОписаниеТипов(МассивТипов);
				Результат = бит_ОбменДаннымиЭксельСервер.ПреобразоватьЗагруженноеЗначение(Значение, ТекТип, ИмяСписка, СпискиИсточники);
				
				Если НЕ ЗначениеЗаполнено(Результат)
					ИЛИ Результат = Значение Тогда
					
					Если ТекущийТип = МенеджерТипы.Строка Тогда
						Результат = бит_ОбменДанными_Excel.УбитьНеразрывныйПробел(СокрЛП(Значение));
						
					ИначеЕсли ТекущийТип = МенеджерТипы.Дата Тогда
						Результат = бит_ОбменДанными_Excel.ПолучитьДату(бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение)));
						
					ИначеЕсли ТекущийТип = МенеджерТипы.Число Тогда
						Результат = бит_ОбменДанными_Excel.ПолучитьЧисло(бит_ОбменДанными_Excel.УбитьЛишнее(СокрЛП(Значение)));
						
					ИначеЕсли ТекущийТип = МенеджерТипы.Булево Тогда
						Результат = бит_ОбменДанными_Excel.ПолучитьБулево(бит_ОбменДанными_Excel.УбитьНеразрывныйПробел(СокрЛП(Значение)));
						
						// Поиск элемента справочника.
					ИначеЕсли ТекущийТип = МенеджерТипы.СправочникСсылка Тогда
						Результат = НайтиЭлементСправочника(СтрокаПравил, СообщатьНеНайденРодитель, Значение, ТекстСтрока);
						
						// Поиск документа.
					ИначеЕсли ТекущийТип = МенеджерТипы.ДокументСсылка Тогда
						Результат = НайтиДокумент(СтрокаПравил, Значение, ТекстСтрока);
						
						// Поиск значения перечисления.
					ИначеЕсли ТекущийТип = МенеджерТипы.ПеречислениеСсылка Тогда
						Результат = НайтиЗначениеПеречисления(СтрокаПравил, Значение, ТекстСтрока);
						
						// Поиск элемента плана видов характеристик.
					ИначеЕсли ТекущийТип = МенеджерТипы.ПланВидовХарактеристикСсылка Тогда
						Результат = НайтиЭлементПланаВидовХарактеристик(СтрокаПравил, СообщатьНеНайденРодитель, Значение, ТекстСтрока);
						
						// Поиск элемента плана счетов.
					ИначеЕсли ТекущийТип = МенеджерТипы.ПланСчетовСсылка Тогда
						Результат = НайтиЭлементПланаСчетов(СтрокаПравил, Значение, ТекстСтрока);
						
						// Поиск элемента плана видов расчета.
					ИначеЕсли ТекущийТип = МенеджерТипы.ПланВидовРасчетаСсылка Тогда
						Результат = НайтиЭлементПланаВидовРасчета(СтрокаПравил, Значение, ТекстСтрока);
						
						// Поиск элемента плана обмена.
					ИначеЕсли ТекущийТип = МенеджерТипы.ПланОбменаСсылка Тогда
						Результат = НайтиЭлементПланаОбмена(СтрокаПравил, Значение, ТекстСтрока);
						
					КонецЕсли;
				КонецЕсли;
            Иначе
				Если ТекущийТип = МенеджерТипы.Булево Тогда
					Результат = бит_ОбменДанными_Excel.ПолучитьБулево(Результат);
                КонецЕсли;
            КонецЕсли; // Если Не ЗначениеУстановленоПоУмолчанию Тогда.
			
        Иначе    
            // Иначе если это произвольный алгоритм, тогда.
			Попытка
				Результат = бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункцию(СтрокаПравил.ИмяОбъекта, СтрокаТаблицыEXCEL, Данные, СтрокаПравил);
            Исключение
                // Если этот алгоритм ранее отработал с ошибкой 
                // не будет дважды сообщать причину ошибки.
                Если Не СтрокаПравил.ОшибкаАлгоритма Тогда
                    // Укажем что алгоритм отработал с ошибкой.
                    СтрокаПравил.ОшибкаАлгоритма = Истина;
                    // Сообщим пользователю и в протокол.
                    бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Ошибка выполнения пользовательской функции: <" 
																		  + СтрокаПравил.ИмяФункции + "> (строка правил загрузки №" + СтрокаПравил.НомерСтроки + "), " + 
																		  Символы.ПС + "       по причине: " + ОписаниеОшибки() + ".", СтатусСообщения.Важное,,
																		  ВестиПротоколЗагрузки, мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
                КонецЕсли;
            КонецПопытки;
        КонецЕсли;
        
        Если (СтрокаПравил.ИмяРеквизита = "КОД"
            Или СтрокаПравил.ИмяРеквизита = "НОМЕР")
            И Не ЗначениеЗаполнено(Результат) Тогда
            Продолжить;
        КонецЕсли;
		
		// Получаем имя ключа для записи в структуру данных.
		Если СтрокаПравил.ИмяРеквизита = "БЕЗ_СОПОСТАВЛЕНИЯ" Тогда
			ИмяКлючаДляЗаписи = СтрокаПравил.ИмяВФайле;
		Иначе
			ИмяКлючаДляЗаписи = СтрокаПравил.ИмяРеквизита;
		КонецЕсли;
		
		Если Не Данные.Свойство(ИмяКлючаДляЗаписи) Или Не ЗначениеЗаполнено(Данные[ИмяКлючаДляЗаписи]) Тогда
            Данные.Вставить(ИмяКлючаДляЗаписи, Результат);
        КонецЕсли;
        
    КонецЦикла; 

КонецПроцедуры // ПолучитьЗначенияПоПравилам()

// Функция производит поиск объекта по реквизиту в ИБ.
// 
// Параметры:
//  ВидОбъекта 		  - Строка, "Справочник, Документ, ПланСчетов".
//  ИмяОбъекта	 	  - Строка.
//  РеквизитПоиска 	  - Строка.
//  ЗначениеРеквизита - Значение по которому необходимо произвести поиск.
// 
// Возвращаемое значение:
//  НайденныйОбъект - ОбъектСсылка.
// 
Функция НайтиОбъектИБПоРеквизиту(ВидОбъекта, ИмяОбъекта, РеквизитПоиска, Знач ЗначениеРеквизита)
	
	ИмяКоллекции = мСоотвИменКоллекций.Получить(ВидОбъекта);
	
	// Получим менеджер коллекции.
	МенеджетОбъектов = бит_ОбщегоНазначения.ПолучитьМенеджер(ИмяКоллекции);
	
	НайденныйОбъект = МенеджетОбъектов[ИмяОбъекта].ПустаяСсылка();
	
	МетаОбъекта  = Метаданные[ИмяКоллекции][ИмяОбъекта];
	ТипРеквизита = МетаОбъекта.Реквизиты[РеквизитПоиска].Тип;
	
	Если ТипРеквизита = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗначениеРеквизита", "%" + ЗначениеРеквизита + "%");
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.Ссылка
		|ИЗ
		|	" + ВидОбъекта + "." + ИмяОбъекта + " КАК ТаблицаОбъектов
		|ГДЕ
		|	ТаблицаОбъектов." + РеквизитПоиска + " ПОДОБНО &ЗначениеРеквизита";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			Если ВыборкаЗапроса.Следующий() Тогда
				
				НайденныйОбъект = ВыборкаЗапроса.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
			// Получим значение строки в указанном типе реквизита.
			ЗначениеРеквизита = бит_ОбменДанными_Excel.ПолучитьЗначениеСтрокиВУказанномТипе(ЗначениеРеквизита, ТипРеквизита);
		КонецЕсли;
		
		НайденныйОбъект = МенеджетОбъектов[ИмяОбъекта].НайтиПоРеквизиту(РеквизитПоиска, ЗначениеРеквизита);
		
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции // НайтиОбъектИБПоРеквизиту()

// Процедура проверяет активность "Режима обновления реквизитов"
// и сообщает список обновляемых реквизитов.
// 
// Параметры:
//  ОбновляемыеРеквизиты - Структура.
// 
Процедура ПроверитьАктивностьРежимаОбновленияРеквизитов(ОбновляемыеРеквизиты)
	
	// Если включен режим обновления реквизитов, тогда.
	Если мСообщатьОХодеЗагрузки И РежимОбновленияРеквизитов Тогда
		
		ТекстРеквизиты = "";
		
		Для Каждого КлючЗначение Из ОбновляемыеРеквизиты Цикл
			ТекстРеквизиты = ТекстРеквизиты + ?(ПустаяСтрока(ТекстРеквизиты), "", ", ") + КлючЗначение.Ключ;
		КонецЦикла;
		
		бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Включен ""Режим обновления реквизитов"".", 
															  СтатусСообщения.Информация,, ВестиПротоколЗагрузки, 
															  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
															  
		бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол("Обновляемые реквизиты: " + ТекстРеквизиты + ".", 
															  СтатусСообщения.Обычное,, ВестиПротоколЗагрузки, 
															  мПротоколЗагрузки, СообщатьОбОшибкахЗаписи, СообщатьОЗаписиЭлементов);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьАктивностьРежимаОбновленияРеквизитов()

#КонецОбласти

#КонецОбласти

#Область Инициализация

// Получим структуру имен - ссылочных типов.
мСтруктураСсылочныхТипов = бит_ОбменДанными_Excel.ПолучитьСтруктуруИменСсылочныхТиповДляЗагрузки();

// Формируем соответствие представлений видов объектов.
мСоотвПредстОбъектов = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьСоответствиеПредставленийВидовОбъектов();

мСоотвИменКоллекций = Новый Соответствие;
мСоотвИменКоллекций.Вставить("Справочник"			 , "Справочники");
мСоотвИменКоллекций.Вставить("Документ"  			 , "Документы");
мСоотвИменКоллекций.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик");
мСоотвИменКоллекций.Вставить("ПланСчетов"			 , "ПланыСчетов");
мСоотвИменКоллекций.Вставить("ПланВидовРасчета"		 , "ПланыВидовРасчета");
мСоотвИменКоллекций.Вставить("ПланОбмена"			 , "ПланыОбмена");
                                           
// Формируем массив неразрешимых символов.
мМассивНеРазрешимыхСимволов = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьМассивНеРазрешимыхСимволов();

мЗаписатьИзменения 	 	= Истина;
мОбъектДляОбновления 	= Неопределено;
мСсылкаОбъектаДляПоиска = Неопределено;
мСообщатьОХодеЗагрузки  = Истина;

#КонецОбласти

#КонецЕсли
