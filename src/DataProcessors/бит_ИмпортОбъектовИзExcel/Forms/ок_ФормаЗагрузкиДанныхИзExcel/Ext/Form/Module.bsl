#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("КонтекстВызова"								, КонтекстВызова);
	Параметры.Свойство("РежимОбновленияРеквизитов"					, Объект.РежимОбновленияРеквизитов);
	Параметры.Свойство("ВыполнятьЧтениеФайлаExcelНаСервере" 		, Объект.ВыполнятьЧтениеФайлаExcelНаСервере);
	Параметры.Свойство("РежимЗаписи"								, Объект.РежимЗаписи); // 0-1
	Параметры.Свойство("ЗагрузитьБезПроверок"						, Объект.ЗагрузитьБезПроверок);
	Параметры.Свойство("СообщатьОбОшибкахЗаписи"					, Объект.СообщатьОбОшибкахЗаписи);
	Параметры.Свойство("СообщатьОЗаписиЭлементов"					, Объект.СообщатьОЗаписиЭлементов);
	Параметры.Свойство("ВыполнятьЗагрузкуВПривилегированномРежиме"	, ВыполнятьЗагрузкуВПривилегированномРежиме);

	Если Параметры.Свойство("ЗаголовокФормы") И ТипЗнч(Параметры.ЗаголовокФормы) = Тип("Строка") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
	
	Если Параметры.Свойство("НастройкаДляЗагрузки", Объект.НастройкаДляЗагрузки) Тогда
		ЗаполнитьШапкуОбработкиИзНастройки();
	КонецЕсли;
	
	Если Параметры.Свойство("ЗапретитьИзменятьНастройку") Тогда
		Элементы.НастройкаДляЗагрузки.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФайлИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Создается диалог для открытия файла Excel.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = бит_ОбменДанными_Excel.ПолучитьФильтрДляВыбораФайлаExcel();
	Диалог.МножественныйВыбор = Ложь;
	
	Диалог.Показать(Новый ОписаниеОповещения("ФайлИсточникНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Обработка оповещения процедуры "ФайлИсточникНачалоВыбора".
//
// Параметры:
//  ВыбранныеФайлы			 - массив - массив выбранных имен файлов или Неопределено, если выбор не осуществлен.
//  ДополнительныеПараметры	 - Неопределено.
//
&НаКлиенте
Процедура ФайлИсточникНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ФайлИсточник = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаДляЗагрузкиПриИзменении(Элемент)
	
	ЗаполнитьШапкуОбработкиИзНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	
	Если Объект.РежимОбновленияРеквизитов И ТипЗнч(ОбновляемыеРеквизиты) = Тип("Структура") Тогда
		
		Если ОбновляемыеРеквизиты.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='В шаблоне не указан ни один реквизит для обновления!'");
			ПоказатьПредупреждение(,ТекстСообщения, 30);
			Возврат;
		КонецЕсли;
		
	Иначе
		ОбновляемыеРеквизиты = Неопределено;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлИсточник) Тогда
		ТекстСообщения = НСтр("ru='Не указан файл источник!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Поместим файл во временное хранилище для передачи на сервер - на случай если загрузка будет производиться на сервере.
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла;
	ОписаниеФайла.Имя = Объект.ФайлИсточник;
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ОписаниеФайла);
	
	МассивПомещенныеФайлы = Новый Массив;
	
	Если НЕ ПоместитьФайлы(МассивФайлов,МассивПомещенныеФайлы,,Ложь,УникальныйИдентификатор) Тогда
		Возврат;
	КонецЕсли;	
	
	Если МассивПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если загрузка производится на клиенте - получим из файла данные.
	Если Объект.ВыполнятьЧтениеФайлаExcelНаСервере Тогда
		СтруктураДанных = Неопределено;
	Иначе	
		Отказ = Ложь;
		СтруктураДанных = ПолучитьТаблицуДанныхExcelНаКлиенте(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеФайла = МассивПомещенныеФайлы[0];
	
	Попытка
		АлгоритмПередЗагрузкой = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.НастройкаДляЗагрузки, "АлгоритмПередЗагрузкой");
		Если ЗначениеЗаполнено(АлгоритмПередЗагрузкой) Тогда 
			ИндексКлиент = Найти(АлгоритмПередЗагрузкой, "#Клиент");
			ИндексСервер = Найти(АлгоритмПередЗагрузкой, "#Сервер");
			Длина = ИндексСервер - (ИндексКлиент + 8);
			Если Длина < 0 Тогда 
				Длина = СтрДлина(АлгоритмПередЗагрузкой)-(ИндексСервер + 8);
			КонецЕсли;
			АлгоритмПередЗагрузкой = Сред(АлгоритмПередЗагрузкой, ИндексКлиент+8, Длина);
			Выполнить(АлгоритмПередЗагрузкой);
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	// Выполним загрузку объектов.
	ВыполнитьПереносСервер(ОписаниеФайла, ОбновляемыеРеквизиты, СтруктураДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет шапку обработки из настройки.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьШапкуОбработкиИзНастройки()
    
    Объект.ИмяЛиста = Объект.НастройкаДляЗагрузки.ИмяЛиста;
	// Информация об объекте
	ИмяОбъекта		= Объект.НастройкаДляЗагрузки.ИмяОбъекта;
	ВидОбъекта	  	= Объект.НастройкаДляЗагрузки.ВидОбъекта;
	СинонимОбъекта 	= Объект.НастройкаДляЗагрузки.Объект;
	
    Объект.НомерНачальнойСтроки  = Объект.НастройкаДляЗагрузки.НомерСтрокиСИменамиКолонок;
    Объект.НомерНачальнойКолонки = Объект.НастройкаДляЗагрузки.НомерНачальнойКолонки;
    
	Если Не ЗначениеЗаполнено(Объект.ИмяЛиста) Тогда
		// По умолчанию имя листа - синоним объекта.
		Объект.ИмяЛиста = Объект.НастройкаДляЗагрузки.Объект;
	КонецЕсли;
	
	ЭтоРегистрСведений = (Объект.НастройкаДляЗагрузки.ВидОбъекта = "РегистрСведений");
	
	Если Объект.РежимОбновленияРеквизитов Тогда
		
		Если ЭтоРегистрСведений Тогда
			Объект.РежимОбновленияРеквизитов = Ложь;
		Иначе
			
			ОбновляемыеРеквизиты = Новый Структура;
			
			Для Каждого ТекСтрока Из Объект.НастройкаДляЗагрузки.ПравилаЗагрузки Цикл
				
				ТекВидДанных = ТекСтрока.ВидДанных;
				
				ДопТекст = ?(ТекВидДанных = "Шапка", "", "ТабличныеЧасти_" + ТекСтрока.ВидДанных);
				ОбновляемыеРеквизиты.Вставить(ДопТекст + ТекСтрока.ИмяРеквизита);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		ОбновляемыеРеквизиты = Неопределено;
	КонецЕсли;
	
	Если ЭтоРегистрСведений Тогда
		
		Объект.РежимЗаписи = 0;
		
		Если Объект.ЗагрузитьБезПроверок Тогда
			Объект.ЗагрузитьБезПроверок = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуОбработкиИзНастройки()

// Функция формирует структуру с таблицами значений данных из Excel для загружаемых объектов.
// Является адаптацией для работы на клиенте 
// процедуры бит_ОбменДанными_Excel.ПолучитьДанныеИзExcelПоНастройкеДляЗагрузки.
// 
// Параметры:
// 
//  Отказ - Булево.
// 
// Возвращаемое значение:
//  Данные - Структура.
// 			  Состав: Ключ 	   - имя объекта.
// 			  		  Значение - ТаблицаЗначений.
// 
&НаКлиенте
Функция ПолучитьТаблицуДанныхExcelНаКлиенте(Отказ)
	
	// Получаем данные из структуры параметров.
	ФайлИсточник	 		   = Объект.ФайлИсточник;
	
	СоотвПредстОбъектов   	   = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьСоответствиеПредставленийВидовОбъектов();
								   
	ЗаписатьИзменения		   = Истина;
							  
	ВестиПротоколЗагрузки 	   = Объект.ВестиПротоколЗагрузки;
							  
	СообщатьОбОшибкахЗаписи    = Объект.СообщатьОбОшибкахЗаписи;
							  
	СообщатьОЗаписиЭлементов   = Объект.СообщатьОЗаписиЭлементов;
								 
	МассивНеРазрешимыхСимволов = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьМассивНеРазрешимыхСимволов();
								   
	НомерНачальнойКолонки 	   = Объект.НомерНачальнойКолонки;
							  
	НомерНачальнойСтроки  	   = Объект.НомерНачальнойСтроки;
								   
	НомерКонечнойСтроки  	   = ?(Объект.УказатьНомерКонечнойСтроки, Объект.НомерКонечнойСтроки, 0);
								   
	// Если номер начальной строки и колонки равны 1, тогда быстрое считывание данных разрешено.
	БыстроеСчитываниеДанных	   = ?(НомерНачальнойСтроки = 1 И НомерНачальнойКолонки = 1 И НомерКонечнойСтроки = 0,
								   Истина, Ложь);
								   
	// Создадим приложение Excel.
	Excel = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ);// , ВестиПротоколЗагрузки, ПротоколЗагрузки
	
	Если Excel = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Откроем указанный файл.
	ExcelФайл = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(Excel, ФайлИсточник, Отказ);// , ВестиПротоколЗагрузки, ПротоколЗагрузки
	
    Если ExcelФайл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

    Данные = Новый Структура;
	
	// Получаем имя листа.
	ИмяЛиста = Объект.ИмяЛиста;
	
	// Откроем лист Excel.
	ExcelЛист = бит_ОбменДаннымиЭксельКлиентСервер.GetExcelSheet(ExcelФайл, ИмяЛиста, Отказ); 
	
	Если ExcelЛист = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru='Загрузка %1% ""%2%"" не выполнена!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																,СоотвПредстОбъектов.Получить(ВРег(ВидОбъекта))
																,СинонимОбъекта);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Данные.Вставить(ИмяОбъекта, Новый Массив);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Получение данных для %1% ""%2%""...'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																,СоотвПредстОбъектов.Получить(ВРег(ВидОбъекта))
																,СинонимОбъекта);
		Состояние(ТекстСообщения);
		
		ИмяЛистаИсточник = бит_ПроформыКлиентСервер.ListSourceSheetName();
		Попытка
			ЛистИсточникСписков = ExcelФайл.Sheets(ИмяЛистаИсточник);
			ЕстьСписки = Истина;
		Исключение
			ЕстьСписки = Ложь;
		КонецПопытки;
		
		Если ЕстьСписки Тогда
			// Чтение источников выпадающих списков
			СпискиИсточники = бит_ПроформыКлиентСервер.ПрочитатьСпискиИсточники(ExcelФайл);
		Иначе
			СпискиИсточники = Новый Соответствие;
		КонецЕсли;
		
		// Получаем таблицу значения для объекта.
		СтруктураДанных = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьТаблицуДанных(ExcelЛист, Неопределено, НомерНачальнойКолонки, НомерНачальнойСтроки, 
												МассивНеРазрешимыхСимволов, БыстроеСчитываниеДанных, НомерКонечнойСтроки);
		
		Данные.Вставить(ИмяОбъекта, СтруктураДанных.ТаблицаДанных);
		Данные.Вставить("НастройкиКолонок", СтруктураДанных.НастройкиКолонок);
		Данные.Вставить("СпискиИсточники", СпискиИсточники);
		
	КонецЕсли;
	
	// Закроем открытый файл.
	бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelФайл,Ложь);
	
	// Закроем приложение Excel.
	бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Excel);
	
    Возврат Данные;
	
КонецФункции

// Процедура выполняет загрузку объектов.
// 
// Параметры:
// 	ОписаниеФайла 		- ОписаниеПереданногоФайла.
// 	ОбновляемыРеквизиты - Структура.
// 	СтруктураДанных 	- Структура, Неопределено 
// 						- является структурой, в случае если загрузка файла excel производилась на клиенте
// 						  ключ 	   - имя объекта
// 						  значение - массив структур, содержит данные из файла excel.
// 
&НаСервере
Процедура ВыполнитьПереносСервер(ОписаниеФайла, ОбновляемыеРеквизиты, СтруктураДанных)
	
	СниматьПривилегированныйРежим = Ложь;
	
	Если ВыполнятьЗагрузкуВПривилегированномРежиме И Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
		СниматьПривилегированныйРежим = Истина;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// Получим файл для загрузки на сервере
	ВремФайлДанные  = ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
	РасширениеФайла = Прав(ОписаниеФайла.Имя,4);
	
	ВремФайл = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	ВремФайлДанные.Записать(ВремФайл);
	
	// Преобразуем ТаблицуДанных из массива в таблицу значений.
	Если НЕ СтруктураДанных = Неопределено Тогда
		Данные = Новый Структура;
		
		Для Каждого КлючЗначение Из СтруктураДанных Цикл
			Данные.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Если ТипЗнч(СтруктураДанных[ИмяОбъекта]) = Тип("Массив") Тогда
		 		
			ТаблицаДанных = Новый ТаблицаЗначений;		
			МассивДанных = СтруктураДанных[ИмяОбъекта];
		
			Для Каждого СтруктураСтроки Из МассивДанных Цикл
				
				// Если окажется что какой либо колонки нет - добавим ее.
				Для Каждого КлючЗначение Из СтруктураСтроки Цикл
					Колонка = ТаблицаДанных.Колонки.Найти(КлючЗначение.Ключ);
					Если Колонка = Неопределено Тогда
						ТаблицаДанных.Колонки.Добавить(КлючЗначение.Ключ);
					КонецЕсли;
				КонецЦикла;    				
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
			КонецЦикла;
			
			Данные.Вставить(ИмяОбъекта, ТаблицаДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаОбъект.ФайлИсточник	  = ВремФайл;
	
	ОбработкаОбъект.ВыполнитьПеренос(ОбновляемыеРеквизиты, , Данные);
	
	Объект.СозданныеОбъекты.Загрузить(ОбработкаОбъект.СозданныеОбъекты.Выгрузить());
	
	Если СниматьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти





