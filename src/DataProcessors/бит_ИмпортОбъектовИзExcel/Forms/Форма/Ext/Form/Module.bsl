
#Область ОписаниеПеременных

// Хранит номер конечной строки
&НаКлиенте
Перем мНомерКонечнойСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_ИмпортОбъектовИзExcel;
	
	// Вызов механизма защиты
	 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Параметры применимы когда обработка открывается по команде.
	Параметры.Свойство("НастройкаДляЗагрузки", Объект.НастройкаДляЗагрузки);	
	Если Параметры.Свойство("ЗаполнитьШапкуПоНастройке") И ЗначениеЗаполнено(Объект.НастройкаДляЗагрузки) Тогда   		
		ЗаполнитьШапкуОбработкиИзНастройки();		
	Иначе        		
		УстановитьЗначенияПоУмолчанию();  		
	КонецЕсли;
			
	УправлениеЭлементамиФормы();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мНомерКонечнойСтроки = Объект.НомерКонечнойСтроки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастройкаДляЗагрузкиПриИзменении(Элемент)
	
	НастройкаДляЗагрузкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПодключитьРасширениеРаботыСФайламиКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	// Создается диалог для открытия файла Excel.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = бит_ОбменДанными_Excel.ПолучитьФильтрДляВыбораФайлаExcel();
	Диалог.МножественныйВыбор = Ложь;
	
	Диалог.Показать(Новый ОписаниеОповещения("ФайлИсточникНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Обработка оповещения процедуры "ФайлИсточникНачалоВыбора".
//
// Параметры:
//  ВыбранныеФайлы			 - массив - массив выбранных имен файлов или Неопределено, если выбор не осуществлен.
//  ДополнительныеПараметры	 - Неопределено.
//
&НаКлиенте
Процедура ФайлИсточникНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ФайлИсточник = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникОткрытие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ПодключитьРасширениеРаботыСФайламиКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФайла = СокрЛП(Объект.ФайлИсточник);
	
	ОткрытьФайл(ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКонечнойСтрокиПриИзменении(Элемент)
	
	Если Объект.НомерКонечнойСтроки <= Объект.НомерНачальнойСтроки Тогда
		
		ТекстСообщения = НСтр("ru='Номер конечной строки не может быть меньше или равен номеру начальной строки!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Объект.НомерКонечнойСтроки = мНомерКонечнойСтроки;
		
	КонецЕсли;
	
	мНомерКонечнойСтроки = Объект.НомерКонечнойСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьНомерКонечнойСтрокиПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОбновленияРеквизитовПриИзменении(Элемент)
	
	РежимОбновленияРеквизитовПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревореквизитов

&НаКлиенте
Процедура ДеревоРеквизитовВыполнятьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Затемненный флажок устанавливается только программно.
	Если ТекущиеДанные.Выполнять = 2 Тогда
		ТекущиеДанные.Выполнять = 0;
	КонецЕсли;
	
	ИзменитьФлажкиДерево(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Выполнять);
	
	ИзменитьФлажкиРодителей(ТекущиеДанные.ПолучитьРодителя(), ТекущиеДанные.Выполнять);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСозданныеобъекты

&НаКлиенте
Процедура СозданныеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СозданныеОбъекты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "СозданныеОбъектыСозданныйОбъект" Тогда
		ПоказатьЗначение(,ТекущиеДанные.СозданныйОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиСохранить(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Обработчик = Новый ОписаниеОповещения("НастройкиСохранитьЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",ПараметрыФормы,ЭтаФорма,,,,Обработчик, Режим);
	
КонецПроцедуры

// Процедура обработчик оповещения "НастройкиСохранитьЗавершение".
// 
// Параметры:
// Результат - Структура.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура НастройкиСохранитьЗавершение(Результат, Параметры) Экспорт
	
	РезНастройка = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПротокол(Команда)
	
	Если Не ПустаяСтрока(ПротоколЗагрузки) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОчиститьПротоколЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Протокол загрузки будет очищен. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ОчиститьПротоколЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ОчиститьПротоколЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПротоколЗагрузки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуСозданныеОбъекты(Команда)
	
	Если Объект.СозданныеОбъекты.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуСозданныеОбъектыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Список созданных объектов будет очищен. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ОчиститьТаблицуСозданныеОбъектыЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ОчиститьТаблицуСозданныеОбъектыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.СозданныеОбъекты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	ОбработатьФлагиТабЧасти("СозданныеОбъекты", "Выполнять", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ОбработатьФлагиТабЧасти("СозданныеОбъекты", "Выполнять", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
	
	ОбработатьФлагиТабЧасти("СозданныеОбъекты", "Выполнять", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСозданныеОбъекты(Команда)
	
	Если Объект.СозданныеОбъекты.Количество() = 0 Тогда
        Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УдалитьСозданныеОбъектыЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить объекты без возможности восстановления?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
    
КонецПроцедуры

// Процедура обработчик оповещения "УдалитьСозданныеОбъектыЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура УдалитьСозданныеОбъектыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСозданныеОбъектыНепосредственно();

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-18 (#4321)
	Оповестить("ИмпортИзExcelУдалить");
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-18 (#4321)
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	РежимЗаписиДоИзменения = Объект.РежимЗаписи;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимЗаписи", Объект.РежимЗаписи);
	ПараметрыФормы.Вставить("ЗагрузитьБезПроверок", Объект.ЗагрузитьБезПроверок);
	ПараметрыФормы.Вставить("ВестиПротоколЗагрузки", Объект.ВестиПротоколЗагрузки);
	ПараметрыФормы.Вставить("СообщатьОЗаписиЭлементов", Объект.СообщатьОЗаписиЭлементов);
	ПараметрыФормы.Вставить("СообщатьОбОшибкахЗаписи", Объект.СообщатьОбОшибкахЗаписи);
	ПараметрыФормы.Вставить("ВыполнятьЧтениеФайлаExcelНаСервере", Объект.ВыполнятьЧтениеФайлаExcelНаСервере);
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект, РежимЗаписиДоИзменения);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.бит_ИмпортОбъектовИзExcel.Форма.ФормаНастройки",ПараметрыФормы,ЭтаФорма,,,,Обработчик, Режим);
	
КонецПроцедуры

// Процедура обработчик оповещения "ОткрытьНастройкиЗавершение".
// 
// Параметры:
// СтруктураЗначений - Структура.
// РежимЗаписиДоИзменения - Число.
// 
&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(СтруктураЗначений, РежимЗаписиДоИзменения) Экспорт
	
	Если НЕ СтруктураЗначений = Неопределено Тогда
        ЗаполнитьЗначенияСвойств(Объект, СтруктураЗначений);
    КонецЕсли;
    
	Если РежимЗаписиДоИзменения <> Объект.РежимЗаписи Тогда
		
		Если Объект.РежимОбновленияРеквизитов 
			И Не Объект.РежимЗаписи = 1 Тогда
			
			Объект.РежимОбновленияРеквизитов = Ложь;
			
			// Обновим дерево реквизитов для изменения.
			ОбновитьДеревоРеквизитов();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
    
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВосстановить(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки",ПараметрыФормы,ЭтаФорма,,,,Обработчик, Режим);
	
КонецПроцедуры

// Процедура обработчик оповещения "НастройкиВосстановитьЗавершение".
// 
// Параметры:
// ВыбНастройка - Структура.
// Параметры - Структура.
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(ВыбНастройка, Параметры) Экспорт
	
    Если ЗначениеЗаполнено(ВыбНастройка) Тогда        
		
		ПрименитьНастройки(ВыбНастройка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	
	Если НЕ ПодключитьРасширениеРаботыСФайламиКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка допустимости загрузки ЦФО
	Если ИмяОбъекта = "Подразделения" И ВидОбъекта = "Справочник" И фРежимСинхронизацииЦФО Тогда
		
		 ТекстСообщения =  НСтр("ru = 'Включен режим синхронизации регл. подразделений и ЦФО. Загрузка ЦФО невозможна.'");
		 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		 Возврат;
	
	КонецЕсли; 
	
	// Формируем структуру обновляемых реквизитов.
	Если Объект.РежимОбновленияРеквизитов Тогда
		
		ОбновляемыеРеквизиты = Новый Структура;
		ЗаполнитьОбновляемыеРеквизитыСервер(ОбновляемыеРеквизиты);
		
		Если ОбновляемыеРеквизиты.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='Не указан ни один реквизит для обновления!'");
			ПоказатьПредупреждение(,ТекстСообщения, 30);
			Возврат;
		КонецЕсли;
		
	Иначе
		ОбновляемыеРеквизиты = Неопределено;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлИсточник) Тогда
		ТекстСообщения = НСтр("ru='Не указан файл источник!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Поместим файл во временное хранилище для передачи на сервер - на случай если загрузка будет производиться на сервере.
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла;
	ОписаниеФайла.Имя = Объект.ФайлИсточник;
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ОписаниеФайла);
	
	МассивПомещенныеФайлы = Новый Массив;
	
	Если НЕ ПоместитьФайлы(МассивФайлов,МассивПомещенныеФайлы,,Ложь,УникальныйИдентификатор) Тогда
		Возврат;
	КонецЕсли;	
	
	Если МассивПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если загрузка производится на клиенте - получим из файла данные.
	Если Объект.ВыполнятьЧтениеФайлаExcelНаСервере Тогда
		СтруктураДанных = Неопределено;
	Иначе	
		Отказ = Ложь;
		СтруктураДанных = ПолучитьТаблицуДанныхExcelНаКлиенте(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеФайла = МассивПомещенныеФайлы[0];
	
	// 1c-izhtc (
	Попытка
		АлгоритмПередЗагрузкой = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.НастройкаДляЗагрузки, "АлгоритмПередЗагрузкой");
		Если ЗначениеЗаполнено(АлгоритмПередЗагрузкой) Тогда 
			ИндексКлиент = Найти(АлгоритмПередЗагрузкой, "#Клиент");
			ИндексСервер = Найти(АлгоритмПередЗагрузкой, "#Сервер");
			Длина = ИндексСервер - (ИндексКлиент + 8);
			Если Длина < 0 Тогда 
				Длина = СтрДлина(АлгоритмПередЗагрузкой)-(ИндексСервер + 8);
			КонецЕсли;
			АлгоритмПередЗагрузкой = Сред(АлгоритмПередЗагрузкой, ИндексКлиент+8, Длина);
			Выполнить(АлгоритмПередЗагрузкой);
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	// 1c-izhtc )
	// Выполним загрузку объектов.
	ВыполнитьПереносСервер(ОписаниеФайла, ОбновляемыеРеквизиты, СтруктураДанных);
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-18 (#4321)
	Если Объект.СозданныеОбъекты.Количество() > 0 Тогда
		МассивОбъектов = Новый Массив;
		Для Каждого СтрокаТаблицы Из Объект.СозданныеОбъекты Цикл
			МассивОбъектов.Добавить(СтрокаТаблицы.СозданныйОбъект);
		КонецЦикла;
		
		Оповестить("ИмпортИзExcelЗавершенаЗагрузка", Новый Структура("МассивОбъектов", МассивОбъектов));
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-18 (#4321)
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КлиентскиеПроцедурыИФункции

// Процедура открывает файл для просмотра.
// 
// Параметры:
//  ИмяФайла - Строка.
// 
&НаКлиенте
Процедура ОткрытьФайл(ИмяФайла)
    
    Если ПустаяСтрока(ИмяФайла) Тогда
        Возврат;
    КонецЕсли;
    
    ОткрываемыйФайл = Новый Файл(ИмяФайла);
    ОткрываемыйФайл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ОткрытьФайлПродолжение", ЭтотОбъект, 
		Новый Структура("ИмяФайла", ИмяФайла)));
  
КонецПроцедуры

// Обработка оповещения процедуры "ОткрытьФайл".
//
// Параметры:
//  Существует				 - Булево - помещается признак существования, тип Булево. Истина, если файл существует. 
//  ДополнительныеПараметры	 - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
&НаКлиенте
Процедура ОткрытьФайлПродолжение(Существует, ДополнительныеПараметры) Экспорт
	
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	Если Существует Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОткрытьФайлЗавершение", ЭтотОбъект), ИмяФайла);
	КонецЕсли;

КонецПроцедуры

// Обработка оповещения процедуры "ОткрытьФайлПродолжение".
//
// Параметры:
//  Существует				 - код возврата, тип Число или Неопределено, если соответствующий входной параметр 
//								<ДождатьсяЗавершения> не указан.
//  ДополнительныеПараметры	 - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
&НаКлиенте
Процедура ОткрытьФайлЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Совместимо = Истина;	

КонецПроцедуры

// Устанавливает значение флажка в нужное состояние в дереве. Вызывается рекурсивно.
// 
// Параметры:
// 	ЭлементыДерева - ДанныеФормыДерево.
// 	ЗначениеФлажка - булево.
// 
&НаКлиенте
Процедура ИзменитьФлажкиДерево(ЭлементыДерева, ЗначениеФлажка)
	
	Для Каждого ТекущаяВетка Из ЭлементыДерева Цикл
		
		ТекущаяВетка.Выполнять = ЗначениеФлажка;
		
		ИзменитьФлажкиДерево(ТекущаяВетка.ПолучитьЭлементы(), ЗначениеФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура настраивает флаги для родительских строк. Вызывается рекурсивно.
// 
// Параметры:
// 	
&НаКлиенте
Процедура ИзменитьФлажкиРодителей(ВеткаРодитель, ЗначениеФлажка)
	
	Если ВеткаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = ВеткаРодитель.ПолучитьЭлементы();
	
	СостояниеРодителя = ЗначениеФлажка;
	
	Для Каждого ТекущаяВетка Из ЭлементыРодителя Цикл
		Если НЕ ТекущаяВетка.Выполнять = ЗначениеФлажка Тогда
			СостояниеРодителя = 2;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВеткаРодитель.Выполнять = СостояниеРодителя;
	
	ИзменитьФлажкиРодителей(ВеткаРодитель.ПолучитьРодителя(), ЗначениеФлажка);
	
КонецПроцедуры

// Процедура подключает расширение работы с файлами.
// 
&НаКлиенте
Функция ПодключитьРасширениеРаботыСФайламиКлиент()
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ТекстСообщения = НСтр("ru='Импорт объектов не доступен, т.к. не подключено расширение работы с файлами!'");
		бит_ОбменДанными_Excel.СообщитьПользователюИВПротокол(ТекстСообщения, СтатусСообщения.Важное,,Объект.ВестиПротоколЗагрузки,ПротоколЗагрузки);
		
		Подключено = Ложь;
	Иначе
		Подключено = Истина;
	КонецЕсли;
	
	Возврат Подключено;
	
КонецФункции

// Функция формирует структуру с таблицами значений данных из Excel для загружаемых объектов.
// Является адаптацией для работы на клиенте 
// процедуры бит_ОбменДанными_Excel.ПолучитьДанныеИзExcelПоНастройкеДляЗагрузки.
// 
// Параметры:
// 
//  Отказ - Булево.
// 
// Возвращаемое значение:
//  Данные - Структура.
// 			  Состав: Ключ 	   - имя объекта.
// 			  		  Значение - ТаблицаЗначений.
// 
&НаКлиенте
Функция ПолучитьТаблицуДанныхExcelНаКлиенте(Отказ)
	
	// Получаем данные из структуры параметров.
	ФайлИсточник	 		   = Объект.ФайлИсточник;
	
	СоотвПредстОбъектов   	   = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьСоответствиеПредставленийВидовОбъектов();
								   
	ЗаписатьИзменения		   = Истина;
							  
	ВестиПротоколЗагрузки 	   = Объект.ВестиПротоколЗагрузки;
							  
	СообщатьОбОшибкахЗаписи    = Объект.СообщатьОбОшибкахЗаписи;
							  
	СообщатьОЗаписиЭлементов   = Объект.СообщатьОЗаписиЭлементов;
								 
	МассивНеРазрешимыхСимволов = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьМассивНеРазрешимыхСимволов();
								   
	НомерНачальнойКолонки 	   = Объект.НомерНачальнойКолонки;
							  
	НомерНачальнойСтроки  	   = Объект.НомерНачальнойСтроки;
								   
	НомерКонечнойСтроки  	   = ?(Объект.УказатьНомерКонечнойСтроки, Объект.НомерКонечнойСтроки, 0);
								   
	// Если номер начальной строки и колонки равны 1, тогда быстрое считывание данных разрешено.
	БыстроеСчитываниеДанных	   = ?(НомерНачальнойСтроки = 1 И НомерНачальнойКолонки = 1 И НомерКонечнойСтроки = 0,
								   Истина, Ложь);
								   
	// Создадим приложение Excel.
	Excel = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ);// , ВестиПротоколЗагрузки, ПротоколЗагрузки
	
	Если Excel = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Откроем указанный файл.
	ExcelФайл = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(Excel, ФайлИсточник, Отказ);// , ВестиПротоколЗагрузки, ПротоколЗагрузки
	
    Если ExcelФайл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

    Данные = Новый Структура;
	
	// Получаем имя листа.
	ИмяЛиста = Объект.ИмяЛиста;
	
	// Откроем лист Excel.
	ExcelЛист = бит_ОбменДаннымиЭксельКлиентСервер.GetExcelSheet(ExcelФайл, ИмяЛиста, Отказ); 
	
	Если ExcelЛист = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru='Загрузка %1% ""%2%"" не выполнена!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																,СоотвПредстОбъектов.Получить(ВРег(ВидОбъекта))
																,СинонимОбъекта);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Данные.Вставить(ИмяОбъекта, Новый Массив);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Получение данных для %1% ""%2%""...'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																,СоотвПредстОбъектов.Получить(ВРег(ВидОбъекта))
																,СинонимОбъекта);
		Состояние(ТекстСообщения);
		
		ИмяЛистаИсточник = бит_ПроформыКлиентСервер.ListSourceSheetName();
		Попытка
			ЛистИсточникСписков = ExcelФайл.Sheets(ИмяЛистаИсточник);
			ЕстьСписки = Истина;
		Исключение
			ЕстьСписки = Ложь;
		КонецПопытки;
		
		Если ЕстьСписки Тогда
			// Чтение источников выпадающих списков
			СпискиИсточники = бит_ПроформыКлиентСервер.ПрочитатьСпискиИсточники(ExcelФайл);
		Иначе
			СпискиИсточники = Новый Соответствие;
		КонецЕсли;
		
		// Получаем таблицу значения для объекта.
		СтруктураДанных = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьТаблицуДанных(ExcelЛист, Неопределено, НомерНачальнойКолонки, НомерНачальнойСтроки, 
												МассивНеРазрешимыхСимволов, БыстроеСчитываниеДанных, НомерКонечнойСтроки);
		
		Данные.Вставить(ИмяОбъекта, СтруктураДанных.ТаблицаДанных);
		Данные.Вставить("НастройкиКолонок", СтруктураДанных.НастройкиКолонок);
		Данные.Вставить("СпискиИсточники", СпискиИсточники);
		
	КонецЕсли;
	
	// Закроем открытый файл.
	бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelФайл,Ложь);
	
	// Закроем приложение Excel.
	бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Excel);
	
    Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область СерверныеПроцедурыИФункцииОбщегоНазначения

// Процедура формирует кэш значений необходимый для работы на клиенте.
// 
// Параметры:
// 	КэшированныеЗначения - Произвольный - приводится к структуре значений.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	КэшированныеЗначения.Вставить("НастраиваемыйОбъект", "Обработка.бит_ИмпортОбъектовИзExcel");
	
	// Получим структуру имен - ссылочных типов.
	мСтруктураСсылочныхТипов = бит_ОбменДанными_Excel.ПолучитьСтруктуруИменСсылочныхТиповДляЗагрузки();
	
	КэшированныеЗначения.Вставить("СтруктураСсылочныхТипов", мСтруктураСсылочныхТипов);
	
	КэшированныеЗначения.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	
	фРежимСинхронизацииЦФО = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_СинхронизироватьПодразделенияРеглЦФО");
	
КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	НастройкаЗаполнена = ЗначениеЗаполнено(Объект.НастройкаДляЗагрузки);
    
    Элементы.РежимОбновленияРеквизитов.Доступность = НастройкаЗаполнена;
    
	Если НастройкаЗаполнена Тогда
		
		СимволыДляПоиска   = Лев(Объект.НастройкаДляЗагрузки.ВидОбъекта, 3);
		ЭтоРегистрСведений = СимволыДляПоиска = "Рег";
		
	Иначе
		ЭтоРегистрСведений = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаСтраницыСозданныеОбъекты.Видимость = Не ЭтоРегистрСведений;
	
	Элементы.ГруппаРежимОбновленияРеквизитов.Видимость = Не ЭтоРегистрСведений;
	Элементы.ДеревоРеквизитов.Видимость = Не ЭтоРегистрСведений
										И Объект.РежимОбновленияРеквизитов;
	
	Элементы.НомерКонечнойСтроки.Видимость = Объект.УказатьНомерКонечнойСтроки;
	
	Элементы.ГруппаСтраницыПротоколЗагрузки.Видимость = Объект.ВестиПротоколЗагрузки;
	
КонецПроцедуры

// Процедура обновляет дерево реквизитов доступных для обновления.
// 
&НаСервере
Процедура ОбновитьДеревоРеквизитов()
    
	Если Объект.РежимОбновленияРеквизитов Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СтруктураСсылочныхТипов", фКэшЗначений.СтруктураСсылочныхТипов);
		СтруктураПараметров.Вставить("ВидОбъекта"	  		  , Объект.НастройкаДляЗагрузки.ВидОбъекта);
		СтруктураПараметров.Вставить("ИмяЗагружаемогоОбъекта" , Объект.НастройкаДляЗагрузки.ИмяОбъекта);
		СтруктураПараметров.Вставить("ЗаполнятьИДСтроки"	  , Ложь);
		СтруктураПараметров.Вставить("БезСопоставления"	  	  , Истина);
		
		обДеревоРеквизитов = РеквизитФормыВЗначение("ДеревоРеквизитов");
		
		// Обновим дерево правил загрузки.
		бит_ОбменДанными_Excel.ОбновитьДеревоПравилЗагрузки(Объект.НастройкаДляЗагрузки.ПравилаЗагрузки, 
															обДеревоРеквизитов, СтруктураПараметров,, Истина);
															
		ЗначениеВРеквизитФормы(обДеревоРеквизитов, "ДеревоРеквизитов");
		
		// Устанавливаем режим загрузки "Обновлять".
        Объект.РежимЗаписи = 1;
		
    Иначе
        ДеревоРеквизитов.ПолучитьЭлементы().Очистить();
        // Устанавливаем режим загрузки "Не обновлять".
        Объект.РежимЗаписи = 0;
    КонецЕсли; 
    
КонецПроцедуры // ОбновитьДеревоРеквизитов()

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Обработки.бит_ИмпортОбъектовИзExcel.Реквизиты Цикл
		СтруктураНастроек.Вставить(Реквизит.Имя, Объект[Реквизит.Имя])
	КонецЦикла;

	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	ПрименитьНастройки(НастройкаПоУмолчанию);
      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Применяет ранее сохраненные настройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек);
	    			
	КонецЕсли;
	
	Если Не СтруктураНастроек.Свойство("РежимОбновленияРеквизитов") Тогда
		Объект.РежимОбновленияРеквизитов = Ложь;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НастройкаДляЗагрузки) И Объект.РежимОбновленияРеквизитов Тогда
		// Обновим дерево реквизитов для изменения.
		ОбновитьДеревоРеквизитов();
	Иначе
		ДеревоРеквизитов.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НастройкаДляЗагрузки) Тогда
	 	ЗаполнитьШапкуОбработкиИзНастройки();	
	КонецЕсли;
	
	// Установим видимость элементов формы.
    УправлениеЭлементамиФормы();

КонецПроцедуры // ПрименитьНастройки()

// Выполняет действия необходимые при изменении настройки для загрузки.
// 
&НаСервере
Процедура НастройкаДляЗагрузкиПриИзмененииСервер()
	
	// Заполним шапку обработки из настройки.
    ЗаполнитьШапкуОбработкиИзНастройки();
	
	ЭтоРегистрСведений = (Объект.НастройкаДляЗагрузки.ВидОбъекта = "РегистрСведений");
	
	Если ЗначениеЗаполнено(Объект.НастройкаДляЗагрузки) Тогда
		
		Если Объект.РежимОбновленияРеквизитов Тогда
			
			Если ЭтоРегистрСведений Тогда
				Объект.РежимОбновленияРеквизитов = Ложь;
			КонецЕсли;
			
			// Обновим дерево реквизитов для изменения.
			ОбновитьДеревоРеквизитов();
			
		КонецЕсли;
		
	Иначе
		ДеревоРеквизитов.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	Если ЭтоРегистрСведений Тогда
		
		Объект.РежимЗаписи = 0;
		
		Если Объект.ЗагрузитьБезПроверок Тогда
			Объект.ЗагрузитьБезПроверок = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

// Процедура заполняет шапку обработки из настройки.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьШапкуОбработкиИзНастройки()
    
    ФайлИсточник 	= Объект.НастройкаДляЗагрузки.ФайлИсточник;
    Объект.ИмяЛиста = Объект.НастройкаДляЗагрузки.ИмяЛиста;
	// Информация об объекте
	ИмяОбъекта		= Объект.НастройкаДляЗагрузки.ИмяОбъекта;
	ВидОбъекта	  	= Объект.НастройкаДляЗагрузки.ВидОбъекта;
	СинонимОбъекта 	= Объект.НастройкаДляЗагрузки.Объект;
	
    Объект.НомерНачальнойСтроки  = Объект.НастройкаДляЗагрузки.НомерСтрокиСИменамиКолонок;
    Объект.НомерНачальнойКолонки = Объект.НастройкаДляЗагрузки.НомерНачальнойКолонки;
    
	Если Не ЗначениеЗаполнено(Объект.ИмяЛиста) Тогда
		// По умолчанию имя листа - синоним объекта.
		Объект.ИмяЛиста = Объект.НастройкаДляЗагрузки.Объект;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуОбработкиИзНастройки()

// Выполняет действия необходимые при изменении режима обновления реквизитов.
// 
&НаСервере
Процедура РежимОбновленияРеквизитовПриИзмененииСервер()
	
	ОбновитьДеревоРеквизитов();
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

// выполняет установку снятие флагов в табличной части.
// 
// Параметры:
//  ТабЧасть    - ТабличнаяЧасть.
//  ИмяФлага    - Строка - имя реквизита флаг в табличной части.
//  ТекЗначение - Число - / 0 - Ложь / 1 - Истина / 2 - Инвертировать.
// 
&НаСервере
Процедура ОбработатьФлагиТабЧасти(ТабЧасть,ИмяФлага,ТекЗначение) Экспорт
	
	Для каждого ТекущаяСтрока Из Объект[ТабЧасть] Цикл
		
		Если ТекЗначение = 0 Тогда
			ТекущаяСтрока[ИмяФлага] = Ложь;
		ИначеЕсли ТекЗначение = 1 Тогда
			ТекущаяСтрока[ИмяФлага] = Истина;	
		ИначеЕсли ТекЗначение = 2 Тогда			
			ТекущаяСтрока[ИмяФлага] = Не ТекущаяСтрока[ИмяФлага];
		КонецЕсли;   
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьФлагиТабЧасти()

// Удаляет созданные объекты непосредственно из базы.
// 
&НаСервере
Процедура УдалитьСозданныеОбъектыНепосредственно()
	
	// Удалим документы из ИБ.
    Для Каждого СтрокаТЧ Из Объект.СозданныеОбъекты Цикл
        
        Если НЕ СтрокаТЧ.Выполнять Тогда
            Продолжить;
        КонецЕсли; 
        
        Попытка
            СтрокаДляСообщения = Строка(СтрокаТЧ.СозданныйОбъект);
            ТекОбъект = СтрокаТЧ.СозданныйОбъект.ПолучитьОбъект();
            ТекОбъект.Удалить();
			
			ТекстСообщения = НСтр("ru='Удален объект - %1%'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаДляСообщения);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
        Исключение
        КонецПопытки;
        
    КонецЦикла; 
    
    // Удалим строки из табличного поля "СозданныеОбъекты".
    КоличествоСтрок = Объект.СозданныеОбъекты.Количество();
    
    Для Ном = 1 По КоличествоСтрок Цикл
        
        ТекНом    = КоличествоСтрок-Ном;
        ТекСтрока = Объект.СозданныеОбъекты[ТекНом];
        
        Попытка
            Если ТекСтрока.СозданныйОбъект.ПолучитьОбъект() = Неопределено Тогда
                Объект.СозданныеОбъекты.Удалить(ТекСтрока);
            КонецЕсли; 
        Исключение
        КонецПопытки;
        
    КонецЦикла; 
	
	ТекстСообщения = НСтр("ru='Удаление завершено'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры

// Процедура заполняет список реквизитов отмеченных для обновления.
// 
// Параметры:
// 	ОбновляемыеРеквизиты - Структура.
// 
&НаСервере
Процедура ЗаполнитьОбновляемыеРеквизитыСервер(ОбновляемыеРеквизиты)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	обДеревоРеквизитов = РеквизитФормыВЗначение("ДеревоРеквизитов");
	
	ОбработкаОбъект.ЗаполнитьОбновляемыеРеквизиты(обДеревоРеквизитов, ОбновляемыеРеквизиты);
	
КонецПроцедуры

// Процедура выполняет загрузку объектов.
// 
// Параметры:
// 	ОписаниеФайла 		- ОписаниеПереданногоФайла.
// 	ОбновляемыРеквизиты - Структура.
// 	СтруктураДанных 	- Структура, Неопределено 
// 						- является структурой, в случае если загрузка файла excel производилась на клиенте
// 						  ключ 	   - имя объекта
// 						  значение - массив структур, содержит данные из файла excel.
// 
&НаСервере
Процедура ВыполнитьПереносСервер(ОписаниеФайла, ОбновляемыеРеквизиты, СтруктураДанных)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// Получим файл для загрузки на сервере
	ВремФайлДанные  = ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
	РасширениеФайла = Прав(ОписаниеФайла.Имя,4);
	
	ВремФайл = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	ВремФайлДанные.Записать(ВремФайл);
	
	// Преобразуем ТаблицуДанных из массива в таблицу значений.
	Если НЕ СтруктураДанных = Неопределено Тогда
		Данные = Новый Структура;
		
		Для Каждого КлючЗначение Из СтруктураДанных Цикл
			Данные.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Если ТипЗнч(СтруктураДанных[ИмяОбъекта]) = Тип("Массив") Тогда
		 		
			ТаблицаДанных = Новый ТаблицаЗначений;		
			МассивДанных = СтруктураДанных[ИмяОбъекта];
		
			Для Каждого СтруктураСтроки Из МассивДанных Цикл
				
				// Если окажется что какой либо колонки нет - добавим ее.
				Для Каждого КлючЗначение Из СтруктураСтроки Цикл
					Колонка = ТаблицаДанных.Колонки.Найти(КлючЗначение.Ключ);
					Если Колонка = Неопределено Тогда
						ТаблицаДанных.Колонки.Добавить(КлючЗначение.Ключ);
					КонецЕсли;
				КонецЦикла;    				
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
			КонецЦикла;
			
			Данные.Вставить(ИмяОбъекта, ТаблицаДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаОбъект.ФайлИсточник	  = ВремФайл;
	ОбработкаОбъект.мПротоколЗагрузки = ПротоколЗагрузки;
	
	ОбработкаОбъект.ВыполнитьПеренос(ОбновляемыеРеквизиты, , Данные);
	
	Объект.СозданныеОбъекты.Загрузить(ОбработкаОбъект.СозданныеОбъекты.Выгрузить());
	
КонецПроцедуры
             
#КонецОбласти

#КонецОбласти


