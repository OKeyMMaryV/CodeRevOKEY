
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Обработчик обновления версии 3.1.43.
// См. документацию БСП - Отложенное обновление больших архивов данных.
//
// Параметры:
//  Параметры - Структура - содержит необходимый для последующей обработки признак ОбработкаЗавершена.
Процедура УстановитьАктивныеТочкиВизированияПриПереходеНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_УстановленныеВизы.Объект КАК Объект,
	|	бит_УстановленныеВизы.АктивнаяВиза КАК АктивнаяВиза,
	|	бит_УстановленныеВизы.Решение КАК Решение,
	|	бит_УстановленныеВизы.Алгоритм КАК Алгоритм
	|ПОМЕСТИТЬ ВизируемыеОбъекты
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	бит_УстановленныеВизы.Решение В (ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.Отклонено))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВизируемыеОбъекты.Объект КАК Объект,
	|	МАКСИМУМ(ВизируемыеОбъекты.Алгоритм) КАК Алгоритм
	|ПОМЕСТИТЬ ОбъектыСНеактивнымиВизами
	|ИЗ
	|	ВизируемыеОбъекты КАК ВизируемыеОбъекты
	|ГДЕ
	|	НЕ ВизируемыеОбъекты.АктивнаяВиза
	|	И ВизируемыеОбъекты.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВизируемыеОбъекты.Объект
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВизируемыеОбъекты.Алгоритм) <> ЗНАЧЕНИЕ(Справочник.бит_уп_Алгоритмы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыСНеактивнымиВизами.Объект КАК ОбъектВизирования,
	|	ОбъектыСНеактивнымиВизами.Алгоритм КАК Алгоритм
	|ИЗ
	|	ОбъектыСНеактивнымиВизами КАК ОбъектыСНеактивнымиВизами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВизируемыеОбъекты КАК ВизируемыеОбъекты
	|		ПО ОбъектыСНеактивнымиВизами.Объект = ВизируемыеОбъекты.Объект
	|			И (ВизируемыеОбъекты.АктивнаяВиза
	|				ИЛИ ВизируемыеОбъекты.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.Отклонено))
	|ГДЕ
	|	ВизируемыеОбъекты.Объект ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	ВыборкаНеактивности = РезультатЗапроса.Выбрать();
	Пока ВыборкаНеактивности.Следующий() Цикл
		
		ОбъектВизирования = ВыборкаНеактивности.ОбъектВизирования;
		Алгоритм          = ВыборкаНеактивности.Алгоритм;
		
		НаборВизы = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
		НаборВизы.Отбор.Объект.Установить(ОбъектВизирования);
		НаборВизы.Прочитать();
		
		ТаблицаВизы = НаборВизы.Выгрузить();
		
		ТаблицаВизы.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
		ТаблицаВизы.ЗаполнитьЗначения(Истина, "ДоступностьВизы");
		
		ТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы);
		
		// Определяем, какие точки алгоритма доступны.
		флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);	
		бит_уп_Сервер.ОпределитьДоступностьТочек(ТаблицаТочкиВизы,флВыполнятьПоэтапно);
		
		ЕстьИзменения = Ложь;
		// Устанавливаем крайние даты и признак активности.
		Для каждого Запись Из НаборВизы Цикл
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
			//СтрокаТаблицы = ТаблицаТочек.Найти(Запись.ИД,"ИД");
			Если Запись.Виза = ПредопределенноеЗначение("Справочник.бит_Визы.ок_Инициатор") Тогда
				СтрокаТаблицы = ТаблицаТочкиВизы.Найти(Запись.Виза,"Виза");
			Иначе		
				СтрокаТаблицы = ТаблицаТочкиВизы.Найти(Запись.ИД,"ИД");
			КонецЕсли;			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997)
			Если СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Запись.АктивнаяВиза <> СтрокаТаблицы.АктивнаяВиза Тогда
				Запись.АктивнаяВиза = СтрокаТаблицы.АктивнаяВиза;
						
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
				//ЕстьИзменения = Истина;
				Если НЕ Запись.АктивнаяВиза И НЕ ЗначениеЗаполнено(Запись.Решение) Тогда
					Запись.АктивнаяВиза = Истина;
				Иначе
					ЕстьИзменения = Истина;
				КонецЕсли;		
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 
				
			КонецЕсли;
		КонецЦикла; // По набору виз.
		
		Если ЕстьИзменения Тогда
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборВизы);
				ОбъектовОбработано = ОбъектовОбработано + 1;
			Исключение
				Параметры.ОбработкаЗавершена = Ложь;
				
				// Если не удалось обработать какой-либо набор, повторяем попытку снова.
				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать визу для: %1 по причине:
									|%2'"), ОбъектВизирования, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
								УровеньЖурналаРегистрации.Предупреждение,
								Метаданные.РегистрыСведений.бит_УстановленныеВизы, НаборВизы, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Параметры.ОбработкаЗавершена Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Процедуре УстановитьАктивныеТочкиВизированияПриПереходеНаНовуюВерсию
							|не удалось установить актуальность виз для некоторых документов (пропущены): %1'"),
							ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Обработки.бит_КонсольОперативногоВизирования,,
			СтрШаблон(НСтр("ru = 'Процедура УстановитьАктивныеТочкиВизированияПриПереходеНаНовуюВерсию
				|обработала записи регистра Установленные визы: %1'"), ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция собирает данные текущего пользователя о доступных визах и пользовательских условиях
//
// Параметры:
//  Ответственный - СправочникСсылка.Пользователи (необязательный). Пользователь,
//		для которого собирается информация о доступных визах. Если значение не заполнено,
//		определяется доступность для текущего пользователя.
// Возвращаемое значение:
//  ТаблицаЗначений.
// 
Функция МатрицаДоступа(Ответственный = Неопределено) Экспорт
	
	Если Ответственный = Неопределено Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос       = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыПользователейПользователиГруппы.Ссылка КАК ПользовательГруппа
	|ПОМЕСТИТЬ ПользователиИГруппы
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейПользователиГруппы
	|ГДЕ
	|	ГруппыПользователейПользователиГруппы.Пользователь = &Ответственный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиИГруппы.ПользовательГруппа КАК ПользовательГруппа,
	|	бит_ПраваУстановкиВиз.Виза КАК ВизаГруппа,
	|	бит_ПраваУстановкиВиз.ПользовательскоеУсловие КАК ПользовательскоеУсловие
	|ПОМЕСТИТЬ ПраваДоступаПоГруппам
	|ИЗ
	|	ПользователиИГруппы КАК ПользователиИГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
	|		ПО ПользователиИГруппы.ПользовательГруппа = бит_ПраваУстановкиВиз.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПраваДоступаПоГруппам.ВизаГруппа КАК Справочник.бит_Визы) КАК Виза,
	|	ПраваДоступаПоГруппам.ПользовательскоеУсловие КАК ПользовательскоеУсловие
	|ПОМЕСТИТЬ МатицаДоступаКВизам
	|ИЗ
	|	ПраваДоступаПоГруппам КАК ПраваДоступаПоГруппам
	|ГДЕ
	|	ПраваДоступаПоГруппам.ВизаГруппа ССЫЛКА Справочник.бит_Визы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	бит_ГруппыВизВизыГруппы.Виза,
	|	ПраваДоступаПоГруппам.ПользовательскоеУсловие
	|ИЗ
	|	ПраваДоступаПоГруппам КАК ПраваДоступаПоГруппам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
	|		ПО ПраваДоступаПоГруппам.ВизаГруппа = бит_ГруппыВизВизыГруппы.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	бит_Визы.Ссылка,
	|	ПраваДоступаПоГруппам.ПользовательскоеУсловие
	|ИЗ
	|	ПраваДоступаПоГруппам КАК ПраваДоступаПоГруппам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_Визы КАК бит_Визы
	|		ПО (ПраваДоступаПоГруппам.ВизаГруппа = ЗНАЧЕНИЕ(Справочник.бит_ГруппыВиз.ВсеВизы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатицаДоступаКВизам.Виза КАК Виза
	|ПОМЕСТИТЬ ВизыБезусловногоДоступа
	|ИЗ
	|	МатицаДоступаКВизам КАК МатицаДоступаКВизам
	|ГДЕ
	|	МатицаДоступаКВизам.ПользовательскоеУсловие = ЗНАЧЕНИЕ(Справочник.бит_ПользовательскиеУсловия.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВизыБезусловногоДоступа.Виза КАК Виза,
	|	ИСТИНА КАК ПолныйДоступ,
	|	ЗНАЧЕНИЕ(Справочник.бит_ПользовательскиеУсловия.ПустаяСсылка) КАК УсловиеДоступа,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектДоступа
	|ИЗ
	|	ВизыБезусловногоДоступа КАК ВизыБезусловногоДоступа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МатицаДоступаКВизам.Виза,
	|	ЛОЖЬ,
	|	МатицаДоступаКВизам.ПользовательскоеУсловие,
	|	МатицаДоступаКВизам.ПользовательскоеУсловие.ОбъектСистемы
	|ИЗ
	|	МатицаДоступаКВизам КАК МатицаДоступаКВизам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВизыБезусловногоДоступа КАК ВизыБезусловногоДоступа
	|		ПО МатицаДоступаКВизам.Виза = ВизыБезусловногоДоступа.Виза
	|ГДЕ
	|	ВизыБезусловногоДоступа.Виза ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	ТаблицаДоступа = Запрос.Выполнить().Выгрузить();
	ТаблицаДоступа.Колонки.Добавить("ПустаяСсылкаОбъектаДоступа", Метаданные.ОпределяемыеТипы.бит_ОбъектыВизирования.Тип);
	Для каждого СтрокаДокумента Из ТаблицаДоступа Цикл
		Если СтрокаДокумента.ПолныйДоступ Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДокумента.ПустаяСсылкаОбъектаДоступа = бит_ОбщегоНазначенияПовтИсп.ПустоеЗначениеОбъектаСистемы(СтрокаДокумента.ОбъектДоступа);
	КонецЦикла;
	
	Возврат ТаблицаДоступа;	
	
КонецФункции

// Процедура получает при помощи СКД таблицу документов для визирования.
//
// Параметры:
//  ПараметрыПолучения	 - Структура - см. НовыеПараметрыЗаполненияТаблицыВизирования().
//  АдресВХранилище		 - Строка	 - Адрес временного хранилища результатаов заполнения таблиблицы.
//
Процедура ЗаполнитьТаблицуВизирования(ПараметрыПолучения, АдресВХранилище = "") Экспорт

	Ответственный = ПараметрыПолучения.Ответственный;
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда	
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	УникальныйИдентификатор = ПараметрыПолучения.УникальныйИдентификатор;
	Настройки	            = ПараметрыПолучения.НастройкиКомпоновщика;
	СхемаКомпоновкиДанных   = ПараметрыПолучения.СхемаКомпоновкиДанных;
	
	ДанныеТабличногоДокумента = ПараметрыПолучения.ДанныеТабличногоДокумента;
	ВыводВТабличныйДокумент   = (ПараметрыПолучения.ТипРезультата = Тип("ТабличныйДокумент"));
	
	ДанныеТабличногоДокумента.Очистить();
	СоответствиеОбъектовСистемы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапросаПравДоступа();
	ТаблицаДоступа = ПараметрыПолучения.МатрицаДоступа;
	Запрос.УстановитьПараметр("ТаблицаДоступа", ТаблицаДоступа);
	Запрос.УстановитьПараметр("ФильтрВизы"    , ПараметрыПолучения.ФильтрВизы);
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапросаВыбратьВизы(ПараметрыПолучения);
	Запрос.УстановитьПараметр("ТипыОбъектовВизирования", ПараметрыПолучения.ТипыОбъектовВизирования);
	РезультатЗапросаТипыОбъектов = Запрос.Выполнить();
	ТипыОбъектовВизирования = РезультатЗапросаТипыОбъектов.Выгрузить().ВыгрузитьКолонку("ТипОбъектаВизирования");
	Если ТипыОбъектовВизирования.Количество() = 0 Тогда
		ОписаниеТиповОбъектов = Метаданные.ОпределяемыеТипы.бит_ОбъектыВизирования.Тип;
	Иначе
		ОписаниеТиповОбъектов = Новый ОписаниеТипов(ТипыОбъектовВизирования);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаСмешанныеПоляШапкиТЧ(ПараметрыПолучения, ОписаниеТиповОбъектов);
	ТаблицаСмешанныхПолей = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВизы = ОписаниеТаблицыИсточникаСКД(ОписаниеТиповОбъектов);
	
	ЕстьФильтрыРолевойАдресации = НаложитьОтборыРолевойАдресации(Запрос, Ответственный);
	
	Запрос.Текст = ТекстЗапросаДетальныеЗаписиВиз(ПараметрыПолучения, ОписаниеТиповОбъектов, ЕстьФильтрыРолевойАдресации);
	ВыборкаОбъектовВизирования = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъектовВизирования.Следующий() Цикл
		ОбъектВизирования = ВыборкаОбъектовВизирования.ОбъектВизирования;
		ВыборкаВиз = ВыборкаОбъектовВизирования.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВиз.Следующий() Цикл
			ВыборкаУсловийДоступа = ВыборкаВиз.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВизаДоступна = Ложь;
			Если ВыборкаВиз.ПолныйДоступ
				ИЛИ ВыборкаВиз.ДоступРолевойАдресации = 2 Тогда // Разрешен доступ по ролевой адресации пользовательского условия.
				ВизаДоступна = Истина;
				ВыборкаУсловийДоступа.Следующий();
			Иначе
				Пока ВыборкаУсловийДоступа.Следующий() Цикл
					Если ВыборкаУсловийДоступа.ДоступРолевойАдресации = 1 Тогда
						// Запрещен доступ по ролевой адресации пользовательского условия.
						Продолжить;
					КонецЕсли;
					Если ВыполняетсяПользовательскоеУсловие(ОбъектВизирования
															,ВыборкаУсловийДоступа.УсловиеДоступа
															,Ответственный) Тогда
						ВизаДоступна = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ВизаДоступна Тогда
				ВыборкаДетальныхЗаписей = ВыборкаУсловийДоступа.Выбрать();
				Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
					НоваяЗаписьВизы = ТаблицаВизы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗаписьВизы, ВыборкаДетальныхЗаписей);
					НоваяЗаписьВизы.ОбъектСистемы = ОбъектСистемыДокумент(СоответствиеОбъектовСистемы, ВыборкаДетальныхЗаписей.ТипОбъектаВизирования);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если СхемаКомпоновкиДанных <> Неопределено Тогда
		Схема = СхемаКомпоновкиДанных;
	Иначе
		Схема = Обработки.бит_КонсольОперативногоВизирования.ПолучитьМакет("СхемаКомпоновкиДанных");
	КонецЕсли;
	
	// Временное сохранение расшифровки данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	Если ПараметрыПолучения.ЭтоМобильноеПриложение Тогда	
		ВариантНастроек = Схема.ВариантыНастроек.Найти("МобильноеПриложение");
		Настройки = ВариантНастроек.Настройки;
	ИначеЕсли ПараметрыПолучения.ПолучатьНастройкиКомпоновщика = Ложь Тогда
		Настройки = Схема.НастройкиПоУмолчанию; 	
	КонецЕсли;
	
	// Ограничение типов: если в составе типа будут содержаться документы, недоступные пользователю, то вложенные поля
	//  не будут выводиться в отчет, даже если чтение будет производиться исключетельно из доступных объектов.
	ПолеОбъектВизирования = Схема.НаборыДанных.ТаблицаВизы.Поля.Найти("ОбъектВизирования");
	ПолеОбъектВизирования.ТипЗначения = ОписаниеТиповОбъектов;
	
	Для каждого КолонкаАналитики Из ТаблицаВизы.Колонки Цикл
		ИмяКолонки = КолонкаАналитики.Имя;
		Если СтрНайти(ИмяКолонки, "Аналитика_") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеАналитикиСКД = Схема.НаборыДанных.ТаблицаВизы.Поля.Найти(ИмяКолонки);
		ПолеАналитикиСКД.Заголовок   = КолонкаАналитики.Заголовок;
		ПолеАналитикиСКД.ТипЗначения = КолонкаАналитики.ТипЗначения;
		ПолеАналитикиСКД.ОграничениеИспользования.Группировка = Ложь;
		ПолеАналитикиСКД.ОграничениеИспользования.Поле        = Ложь;
		ПолеАналитикиСКД.ОграничениеИспользования.Порядок     = Ложь;
		ПолеАналитикиСКД.ОграничениеИспользования.Условие     = Ложь;
	КонецЦикла;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ЭлементУправления");
	НомерКолонкиЭлементУправления = ПозицияВыбранногоПоля(Настройки, ПолеКомпоновки); 
	Если ВыводВТабличныйДокумент И НомерКолонкиЭлементУправления = 0 Тогда
		ВызватьИсключение НСтр("ru = 'В выбранах полях должно обязательно присутствовать поле ""Элемент управления"".';
						  	|en = 'Selected fields must have ""Control"" column.'");
	КонецЕсли;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ЕстьФайлыКартинка");
	НомерКолонкиКартинкаЕстьФайл = ПозицияВыбранногоПоля(Настройки, ПолеКомпоновки); 
	
	// Формирование макета, с помощью компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Передача схемы, настроек и данных расшифровки в макет компоновки.
	Если ВыводВТабличныйДокумент Тогда
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, ДанныеРасшифровки);
	Иначе
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	КонецЕсли;
	
	// Внешние наборы данных.
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаВизы"          , ТаблицаВизы);
	ВнешниеНаборыДанных.Вставить("ТаблицаСмешанныхПолей", ТаблицаСмешанныхПолей);
	
	// Выполнение компоновки с помощью процессора компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	// Вывод таблицы.
	Если ВыводВТабличныйДокумент Тогда
		Результат = Новый ТабличныйДокумент;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.ОтображатьПроцентВывода = Истина;
		ПроцессорВывода.УстановитьДокумент(Результат); 	
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Иначе
		Результат = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат); 	
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	КонецЕсли;
	
	// Сохранение данных расшифровки в хранилище.
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
		
	Если ВыводВТабличныйДокумент Тогда
		
		КолКолонокТаблицы = Результат.ШиринаТаблицы; // Количество колонок в отчете.
		КолСтрокТаблицы   = Результат.ВысотаТаблицы; // Количество строк в отчете.
		
		ПорядковыйНомер = 1;
		
		// Обходим все строки отчета.
		Для НомСтр = 1 По КолСтрокТаблицы Цикл
			ТекОбласть = Результат.Область(НомСтр, НомерКолонкиЭлементУправления);  
			Если ЭтоУправляющаяОбласть(ТекОбласть.Текст) Тогда
				ТекОбласть.Текст    = "";
				ТекОбласть.Картинка = КартинкаБиблиотеки("ФлагВыбораЛожь");
				
				Если ТекОбласть.Расшифровка <> Неопределено Тогда
					ЗначенияПолейРасшифровки = ДанныеРасшифровки.Элементы[ТекОбласть.Расшифровка].ПолучитьПоля();
					
					НоваяСтрока = ДанныеТабличногоДокумента.Добавить();
					НоваяСтрока.Обрабатывать = Ложь;
					Для каждого ЗначениеРасшифровки Из ЗначенияПолейРасшифровки Цикл
						НоваяСтрока[ЗначениеРасшифровки.Поле] = ЗначениеРасшифровки.Значение;
					КонецЦикла;
					НоваяСтрока.НомерПП = ПорядковыйНомер;
					ПорядковыйНомер = ПорядковыйНомер + 1;
					
					ТекОбласть.Имя = ИдентификаторЭлементаУправленияКартинки() + НоваяСтрока.ИД;
				КонецЕсли;
			КонецЕсли;
			
			Если НомерКолонкиКартинкаЕстьФайл <> 0 Тогда
				ТекОбласть = Результат.Область(НомСтр, НомерКолонкиКартинкаЕстьФайл);  
				Если ТекстСодержитИдентификаторКартинки(ТекОбласть.Текст) Тогда
					ПараметрыИзвлеченияКартинки = ПараметрыИзвлеченияКартинки(ТекОбласть.Текст);
					ТекОбласть.Текст    = ПараметрыИзвлеченияКартинки.Текст;
					ТекОбласть.Картинка = ПараметрыИзвлеченияКартинки.Картинка;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Возвращаем результаты.
	СтруктураРезультатаОбновления = Новый Структура;
	СтруктураРезультатаОбновления.Вставить("СхемаКомпоновкиДанных", Схема);
	СтруктураРезультатаОбновления.Вставить("Результат", Результат);
	СтруктураРезультатаОбновления.Вставить("ДанныеРасшифровки", АдресДанныхРасшифровки);
	СтруктураРезультатаОбновления.Вставить("ДанныеТабличногоДокумента", ДанныеТабличногоДокумента);
	СтруктураРезультатаОбновления.Вставить("НомерКолонкиЭлементУправления", НомерКолонкиЭлементУправления);
	
	ПоместитьВоВременноеХранилище(СтруктураРезультатаОбновления, АдресВХранилище);
		
КонецПроцедуры

// Функция - Конструктор параметра функции ЗаполнитьТаблицуВизирования.
// 
// Возвращаемое значение:
//  Структура - параметры получения табличных документов:
//   * Ответственный - СправочникСсылка.Пользователи.
//   * УникальныйИдентификатор - УникальныйИдентификатор формы.
//   * НастройкиКомпоновщика  - НастройкиКомпоновкиДанных  - настройки компоновщика данных для СКД.
//   * СхемаКомпоновкиДанных - Строка - адрес хранения СКД.
//   * ДанныеТабличногоДокумента - ТаблицаЗначений - обрабатываемые данные, связанные с выведенным табличным документом.
//   * АдресТаблицыДоступа - Строка - адрес хранения таблицы значений, содержащей сведения о доступных визах.
//   * ВариантОтбораВиз - Число - тип установленного фильтра по видам виз.
//   * ФильтрВизы - СписокЗначений - выбранный пользователем список отбора по видам виз.
//   * ТипыОбъектовВизирования - СписокЗначений - выбранный пользователем список отбора по видам документов.
//   * ПолучатьНастройкиКомпоновщика - Булево - признак необходимости получения настроек из пользовательских настроек компоновщика.
//
Функция НовыеПараметрыЗаполненияТаблицыВизирования() Экспорт
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("Ответственный",				Неопределено);
	ПараметрыПолучения.Вставить("УникальныйИдентификатор",		Неопределено);
	ПараметрыПолучения.Вставить("НастройкиКомпоновщика",		Новый НастройкиКомпоновкиДанных);
	ПараметрыПолучения.Вставить("СхемаКомпоновкиДанных",		Неопределено);
	ПараметрыПолучения.Вставить("ДанныеТабличногоДокумента",	Новый ТаблицаЗначений);
	ПараметрыПолучения.Вставить("МатрицаДоступа",				Новый ТаблицаЗначений);
	ПараметрыПолучения.Вставить("ВариантОтбораВиз",				0);
	ПараметрыПолучения.Вставить("ФильтрВизы",					Новый СписокЗначений);
	ПараметрыПолучения.Вставить("ТипыОбъектовВизирования",		Новый СписокЗначений);
	ПараметрыПолучения.Вставить("ПолучатьНастройкиКомпоновщика",Ложь);
	ПараметрыПолучения.Вставить("ТипРезультата",				Тип("ТабличныйДокумент"));
	ПараметрыПолучения.Вставить("ЭтоМобильноеПриложение",		Ложь);
	Возврат ПараметрыПолучения;
	
КонецФункции

Функция ИдентификаторЭлементаУправленияКартинки() Экспорт
	
	Возврат "ЭлементУправленияПолеФлага_";
	
КонецФункции

Функция ТекстСодержитИдентификаторКартинки(ИсходныйТекст) Экспорт
	
	ПодстановкаКартинки = ИдентификаторПодстановкиКартинки();
	Если СтрНайти(ИсходныйТекст, ПодстановкаКартинки) > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоУправляющаяОбласть(ИмяОбласти) Экспорт
	
	ПризнакУправляющейОбласти = ИдентификаторЭлементаУправленияКартинки();
	Если СтрНайти(ИмяОбласти, ПризнакУправляющейОбласти) > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеТаблицыВизирования

Функция ТекстЗапросаПравДоступа()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДоступа.Виза,
	|	ТаблицаДоступа.ПолныйДоступ,
	|	ТаблицаДоступа.УсловиеДоступа,
	|	ТаблицаДоступа.ПустаяСсылкаОбъектаДоступа КАК ПустаяСсылкаОбъектаДоступа
	|ПОМЕСТИТЬ ТаблицаДоступа
	|ИЗ
	|	&ТаблицаДоступа КАК ТаблицаДоступа";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыбратьВизы(ПараметрыПолучения)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	бит_УстановленныеВизы.Объект КАК Объект,
	|	бит_УстановленныеВизы.Виза КАК Виза,
	|	бит_УстановленныеВизы.ИД КАК ИД,
	|	бит_УстановленныеВизы.ДатаКрайняя КАК ДатаКрайняя
	|ПОМЕСТИТЬ АктивныеВизы
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	бит_УстановленныеВизы.АктивнаяВиза
	|	И &УсловиеПоТипуОбъекта
	|	И &УсловиеПоВизам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктивныеВизы.Объект КАК ОбъектВизирования,
	|	АктивныеВизы.Виза КАК Виза,
	|	АктивныеВизы.ИД КАК ИД,
	|	АктивныеВизы.ДатаКрайняя КАК ДатаКрайняя,
	|	ТаблицаДоступа.ПолныйДоступ КАК ПолныйДоступ,
	|	ТаблицаДоступа.УсловиеДоступа КАК УсловиеДоступа,
	|	ТИПЗНАЧЕНИЯ(АктивныеВизы.Объект) КАК ТипОбъектаВизирования,
	|	АктивныеВизы.Объект.Организация КАК Организация,
	|	&АктивныеВизыОбъектАналитики КАК АктивныеВизыОбъектАналитики
	|ПОМЕСТИТЬ ОтборныеВизы
	|ИЗ
	|	АктивныеВизы КАК АктивныеВизы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДоступа КАК ТаблицаДоступа
	|		ПО АктивныеВизы.Виза = ТаблицаДоступа.Виза
	|ГДЕ
	|	НЕ АктивныеВизы.Объект.Ссылка ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектВизирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТИПЗНАЧЕНИЯ(ОтборныеВизы.ОбъектВизирования) КАК ТипОбъектаВизирования
	|ИЗ
	|	ОтборныеВизы КАК ОтборныеВизы";
	
	ТипыОбъектовВизирования = ПараметрыПолучения.ТипыОбъектовВизирования;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоТипуОбъекта", ТекстФильтраТипыОбъектов(ТипыОбъектовВизирования));
	
	ВариантОтбораВиз = ПараметрыПолучения.ВариантОтбораВиз;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоВизам", ТекстФильтраВизы(ВариантОтбораВиз));
	
	ТекстЗамены = ТекстВыборкиПолейАналитики("АктивныеВизы.Объект", Истина);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&АктивныеВизыОбъектАналитики КАК АктивныеВизыОбъектАналитики", ТекстЗамены);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстФильтраТипыОбъектов(ТипыОбъектовВизирования)
	
	Если ТипыОбъектовВизирования.Количество() = 0 Тогда
		ТекстФильтра = "ИСТИНА";
	Иначе
		ТекстФильтра = "ТИПЗНАЧЕНИЯ(бит_УстановленныеВизы.Объект) В (&ТипыОбъектовВизирования)";
	КонецЕсли;
	
	Возврат ТекстФильтра;
	
КонецФункции

Функция ТекстФильтраВизы(ВариантОтбораВиз)
	
	ТекстФильтра = "ИСТИНА";
	
	Если ВариантОтбораВиз = 1 ИЛИ ВариантОтбораВиз = 2 Тогда
		ТекстФильтра = "бит_УстановленныеВизы.Виза.Вид = ЗНАЧЕНИЕ(Перечисление.бит_ВидыВиз.%1)";
		ТекстФильтра = СтрШаблон(ТекстФильтра, ?(ВариантОтбораВиз = 1, "Утверждающая", "Согласующая"));
	ИначеЕсли ВариантОтбораВиз = 3 Тогда
		ТекстФильтра = "бит_УстановленныеВизы.Виза В ИЕРАРХИИ (&ФильтрВизы)";
	КонецЕсли;
	
	Возврат ТекстФильтра;
	
КонецФункции

Функция ТекстВыборкиПолейАналитики(ИмяТаблицыИсточника, ПервичнаяВыборка = Ложь)
	
	ТекстВыборки = "";
	
	Если ПервичнаяВыборка Тогда
		Для Сч = 1 По 7 Цикл
			ИмяПоляАналитики = "Аналитика_" + Сч;
			ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, ИмяПоляАналитики,, Сч>1);
		КонецЦикла;
		
		Если бит_ОбщегоНазначенияПовтИсп.ЭтоСемействоБП() Тогда
			ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "СтатьяОборотов",       "Аналитика_8");
			ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "ЦФО",                  "Аналитика_9");
			ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Контрагент",           "Аналитика_10");
			ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "ДоговорКонтрагента",   "Аналитика_11");
			ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Сценарий",             "Аналитика_12");
			ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "НоменклатурнаяГруппа", "Аналитика_13");
			ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Проект",               "Аналитика_14");
		ИначеЕсли бит_ОбщегоНазначенияПовтИсп.ЭтоERP() Тогда
			Для Сч = 8 По 12 Цикл
				ИмяПоляАналитики = "Аналитика_" + Сч;
				ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, ИмяПоляАналитики);
			КонецЦикла;
		КонецЕсли;
	Иначе
		КоличествоАналитик = 12;
		Если бит_ОбщегоНазначенияПовтИсп.ЭтоСемействоБП() Тогда
			КоличествоАналитик = 14;
		КонецЕсли;
		
		Для Сч = 1 По КоличествоАналитик Цикл
			ИмяПоляАналитики = "Аналитика_" + Сч;
			ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, ИмяПоляАналитики,, Сч>1);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Дата"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Номер"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Контрагент"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "СверхБюджета"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "НазначениеПлатежаУпр"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Ответственный"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Сценарий"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Комментарий"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Исполнитель"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "Проект"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "ДатаРасхода"); 
	ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, "ДоговорКонтрагента"); 
	
	Возврат ТекстВыборки;
	
КонецФункции

Функция ТекстЗапросаСмешанныеПоляШапкиТЧ(ПараметрыПолучения, ОписаниеТиповВиз)
	
	ТекстЗапросаСмешанныхПолей = "";
	НужноОбъединение           = Ложь;
	ТипыВиз                    = ОписаниеТиповВиз.Типы();
	
	Для каждого ТипВизы Из ТипыВиз Цикл
		
		МетаданныеОбъектаВизирования = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипВизы).Метаданные();
		ПолноеИмяМетаданного         = МетаданныеОбъектаВизирования.ПолноеИмя();
		
		Если МетаданныеОбъектаВизирования.ТабличныеЧасти.Найти("Распределение") <> Неопределено
			И МетаданныеОбъектаВизирования.ТабличныеЧасти.Распределение.Реквизиты.Найти("СтатьяОборотов") <> Неопределено
			И МетаданныеОбъектаВизирования.ТабличныеЧасти.Распределение.Реквизиты.Найти("ЦФО") <> Неопределено Тогда
			
			Если НужноОбъединение Тогда
				ТекстЗапросаСмешанныхПолей = ТекстЗапросаСмешанныхПолей + ОбъединитьВсе();
			КонецЕсли;
			ТекстЗапросаСмешанныхПолей = ТекстЗапросаСмешанныхПолей +
			"ВЫБРАТЬ
			|	ТЧВизы.Ссылка КАК ОбъектВизирования,
			|	ТЧВизы.СтатьяОборотов КАК СтатьяОборотовСмешанная,
			|	ТЧВизы.ЦФО КАК ЦФОСмешанная,
			|	ОтборныеВизы.Виза КАК ВизаСмешанная 
			|ИЗ
			|	ОтборныеВизы КАК ОтборныеВизы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПолноеИмяМетаданного + ".Распределение КАК ТЧВизы
			|		ПО ОтборныеВизы.ОбъектВизирования = ТЧВизы.Ссылка";
			
		Иначе
			
			ЕстьСтатья = МетаданныеОбъектаВизирования.Реквизиты.Найти("СтатьяОборотов") <> Неопределено;
			ЕстьЦФО    = МетаданныеОбъектаВизирования.Реквизиты.Найти("ЦФО") <> Неопределено;
			Если НужноОбъединение Тогда
				ТекстЗапросаСмешанныхПолей = ТекстЗапросаСмешанныхПолей + ОбъединитьВсе();
			КонецЕсли;
			
			ТекстШаблонаЗапросаСмешанныхПолей =
			"ВЫБРАТЬ
			|	&ОбъектВизирования КАК ОбъектВизирования,
			|	&СтатьяОборотов КАК СтатьяОборотовСмешанная,
			|	&ЦФО КАК ЦФОСмешанная,
			|	ОтборныеВизы.Виза КАК ВизаСмешанная
			|ИЗ
			|	ОтборныеВизы КАК ОтборныеВизы
			|ГДЕ
			|	ОтборныеВизы.ОбъектВизирования ССЫЛКА &ВидОбъекта";
			
			ТекстПриведенияТипа = "ВЫРАЗИТЬ(ОтборныеВизы.ОбъектВизирования КАК %1)";
			ТекстПриведенияТипа = СтрШаблон(ТекстПриведенияТипа, ПолноеИмяМетаданного);
			
			ТекстШаблонаЗапросаСмешанныхПолей = СтрЗаменить(ТекстШаблонаЗапросаСмешанныхПолей, "&ОбъектВизирования", ТекстПриведенияТипа);
															
			ТекстПодстановки = "НЕОПРЕДЕЛЕНО";
			Если ЕстьСтатья Тогда
				ТекстПодстановки = ТекстПриведенияТипа + ".СтатьяОборотов";
			КонецЕсли;
			ТекстШаблонаЗапросаСмешанныхПолей = СтрЗаменить(ТекстШаблонаЗапросаСмешанныхПолей, "&СтатьяОборотов", ТекстПодстановки);
			
			ТекстПодстановки = "НЕОПРЕДЕЛЕНО";
			Если ЕстьСтатья Тогда
				ТекстПодстановки = ТекстПриведенияТипа + ".ЦФО";
			КонецЕсли;
			ТекстШаблонаЗапросаСмешанныхПолей = СтрЗаменить(ТекстШаблонаЗапросаСмешанныхПолей, "&ЦФО", ТекстПодстановки);
			
			ТекстШаблонаЗапросаСмешанныхПолей = СтрЗаменить(ТекстШаблонаЗапросаСмешанныхПолей, "&ВидОбъекта", ПолноеИмяМетаданного);
			
			ТекстЗапросаСмешанныхПолей = ТекстЗапросаСмешанныхПолей + ТекстШаблонаЗапросаСмешанныхПолей;
			
		КонецЕсли;
		
		НужноОбъединение = Истина;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапросаСмешанныхПолей) Тогда
		ТекстЗапросаСмешанныхПолей =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК ОбъектВизирования,
		|	НЕОПРЕДЕЛЕНО КАК СтатьяОборотовСмешанная,
		|	НЕОПРЕДЕЛЕНО КАК ЦФОСмешанная,
		|	НЕОПРЕДЕЛЕНО КАК ВизаСмешанная";
	КонецЕсли;
	
	Возврат ТекстЗапросаСмешанныхПолей;
	
КонецФункции

Функция ОбъединитьВсе()
	
	Возврат "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
	
КонецФункции

Функция НаложитьОтборыРолевойАдресации(Запрос, Ответственный)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтборныеВизы.ОбъектВизирования КАК ОбъектВизирования,
	|	ОтборныеВизы.Виза КАК Виза
	|ПОМЕСТИТЬ ОграниченныеВизы
	|ИЗ
	|	ОтборныеВизы КАК ОтборныеВизы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтборныеВизы.ОбъектВизирования,
	|	ОтборныеВизы.Виза
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ОтборныеВизы.ПолныйДоступ) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборныеВизы.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
	|	ОтборныеВизы.УсловиеДоступа КАК УсловиеДоступа,
	|	ОтборныеВизы.ОбъектВизирования КАК ОбъектВизирования,
	|	ОтборныеВизы.Виза КАК Виза
	|ПОМЕСТИТЬ УсловияРолевыхОграничений
	|ИЗ
	|	ОтборныеВизы КАК ОтборныеВизы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОграниченныеВизы КАК ОграниченныеВизы
	|		ПО ОтборныеВизы.ОбъектВизирования = ОграниченныеВизы.ОбъектВизирования
	|			И ОтборныеВизы.Виза = ОграниченныеВизы.Виза
	|			И (ОтборныеВизы.УсловиеДоступа.ВидПользовательскогоУсловия = ЗНАЧЕНИЕ(Перечисление.бит_ВидыПользовательскихУсловий.РолеваяАдресация))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОграниченныеВизы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияРолевыхОграничений.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
	|	УсловияРолевыхОграничений.УсловиеДоступа КАК УсловиеДоступа,
	|	РолеваяАдресацияУсловий.РольИсполнителя КАК РольИсполнителя,
	|	УсловияРолевыхОграничений.ОбъектВизирования КАК ОбъектВизирования,
	|	бит_ИсполнителиЗадач.ОбъектАдресации_1 КАК ОбъектАдресации_1,
	|	бит_ИсполнителиЗадач.ОбъектАдресации_2 КАК ОбъектАдресации_2,
	|	бит_ИсполнителиЗадач.ОбъектАдресации_3 КАК ОбъектАдресации_3
	|ПОМЕСТИТЬ МатрицаОбъектовАдресации
	|ИЗ
	|	УсловияРолевыхОграничений КАК УсловияРолевыхОграничений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_ПользовательскиеУсловия.РолеваяАдресация КАК РолеваяАдресацияУсловий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ИсполнителиЗадач КАК бит_ИсполнителиЗадач
	|			ПО РолеваяАдресацияУсловий.РольИсполнителя = бит_ИсполнителиЗадач.РольИсполнителя
	|				И (бит_ИсполнителиЗадач.Исполнитель = &Ответственный)
	|		ПО УсловияРолевыхОграничений.УсловиеДоступа = РолеваяАдресацияУсловий.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РольИсполнителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатрицаОбъектовАдресации.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
	|	МатрицаОбъектовАдресации.УсловиеДоступа КАК УсловиеДоступа,
	|	МатрицаОбъектовАдресации.РольИсполнителя КАК РольИсполнителя,
	|	МАКСИМУМ(МатрицаОбъектовАдресации.ОбъектАдресации_1) КАК ОбъектАдресации_1,
	|	МАКСИМУМ(МатрицаОбъектовАдресации.ОбъектАдресации_2) КАК ОбъектАдресации_2,
	|	МАКСИМУМ(МатрицаОбъектовАдресации.ОбъектАдресации_3) КАК ОбъектАдресации_3,
	|	МАКСИМУМ(АдресацииРоли.Имя) КАК ПолеРеквизитаАдресации,
	|	АдресацииРоли.Вид КАК ВидОбъектаАдресации,
	|	АдресацииРоли.Вид.Код КАК ИмяВидаАдресации,
	|	АдресацииРоли.Вид.СпособПроверкиПринадлежности КАК СпособПроверкиАдресации
	|ИЗ
	|	МатрицаОбъектовАдресации КАК МатрицаОбъектовАдресации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_РолиИсполнителей.ОбъектыАдресации КАК АдресацииРоли
	|		ПО МатрицаОбъектовАдресации.РольИсполнителя = АдресацииРоли.Ссылка
	|			И (АдресацииРоли.Имя = ""ОбъектАдресации_1""
	|				ИЛИ АдресацииРоли.Имя = ""ОбъектАдресации_2""
	|				ИЛИ АдресацииРоли.Имя = ""ОбъектАдресации_3"")
	|
	|СГРУППИРОВАТЬ ПО
	|	МатрицаОбъектовАдресации.ТипОбъектаВизирования,
	|	МатрицаОбъектовАдресации.УсловиеДоступа,
	|	МатрицаОбъектовАдресации.РольИсполнителя,
	|	АдресацииРоли.Вид,
	|	АдресацииРоли.Вид.Код,
	|	АдресацииРоли.Вид.СпособПроверкиПринадлежности
	|ИТОГИ ПО
	|	ТипОбъектаВизирования,
	|	УсловиеДоступа,
	|	РольИсполнителя";
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	ВыборкаТипов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоРезультатовПроверок = 0;
	Пока ВыборкаТипов.Следующий() Цикл
		
		ПустаяСсылкаНаОбъект          = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ВыборкаТипов.ТипОбъектаВизирования);
		МетаданныеОбъектаВизирования  = ПустаяСсылкаНаОбъект.Метаданные();
		ПолноеИмяМетаданного          = МетаданныеОбъектаВизирования.ПолноеИмя();
		ВыборкаУсловий                = ВыборкаТипов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаУсловий.Следующий() Цикл
			
			КоличествоРезультатовПроверок = КоличествоРезультатовПроверок + 1;
			
			ВыборкаРолей = ВыборкаУсловий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			КоличествоУсловийДоступа = 0;
			Пока ВыборкаРолей.Следующий() Цикл
				
				КоличествоУсловийДоступа = КоличествоУсловийДоступа + 1;
				
				ПодзапросПровркаАдресации = Новый Запрос;
				ПодзапросПровркаАдресации.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
				ТекстЗапросаПроверкиАдресации =
				"ВЫБРАТЬ
				|	МатрицаОбъектовАдресации.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
				|	МатрицаОбъектовАдресации.УсловиеДоступа КАК УсловиеДоступа,
				|	&ПолеОбъектВизирования КАК ОбъектВизирования,
				|	МатрицаОбъектовАдресации.РольИсполнителя КАК РольИсполнителя,
				|	МатрицаОбъектовАдресации.ОбъектАдресации_1 КАК ОбъектАдресации_1,
				|	МатрицаОбъектовАдресации.ОбъектАдресации_2 КАК ОбъектАдресации_2,
				|	МатрицаОбъектовАдресации.ОбъектАдресации_3 КАК ОбъектАдресации_3
				|ПОМЕСТИТЬ ОбъектыПроверки
				|ИЗ
				|	МатрицаОбъектовАдресации КАК МатрицаОбъектовАдресации
				|ГДЕ
				|	МатрицаОбъектовАдресации.ТипОбъектаВизирования = &ТипОбъектаВизирования
				|	И МатрицаОбъектовАдресации.РольИсполнителя     = &РольИсполнителя
				|	И МатрицаОбъектовАдресации.УсловиеДоступа      = &УсловиеДоступа";
				ТекстЗапросаПроверкиАдресации = СтрЗаменить(ТекстЗапросаПроверкиАдресации
													, "&ПолеОбъектВизирования"
													, "ВЫРАЗИТЬ(МатрицаОбъектовАдресации.ОбъектВизирования КАК "
														+ ПолноеИмяМетаданного + ")");
				ПодзапросПровркаАдресации.УстановитьПараметр("ТипОбъектаВизирования", ВыборкаРолей.ТипОбъектаВизирования);
				ПодзапросПровркаАдресации.УстановитьПараметр("РольИсполнителя"      , ВыборкаРолей.РольИсполнителя);
				ПодзапросПровркаАдресации.УстановитьПараметр("УсловиеДоступа"       , ВыборкаРолей.УсловиеДоступа);
				ТекстЗапросаПроверкиАдресации = ТекстЗапросаПроверкиАдресации + ОбщегоНазначения.РазделительПакетаЗапросов();
				
				// Роль исполнителя может содержать до 3х измерений адресации,
				//  для доступа должно выполняться сопоставление объектов визирования по всем измерениям.
				ВыборкаВидовАдресации = ВыборкаРолей.Выбрать();
				
				НомерВидаАдресации = 0;
				Пока ВыборкаВидовАдресации.Следующий() Цикл
					
					НомерВидаАдресации = НомерВидаАдресации + 1;
					
					ИмяПоляПроверки = ВыборкаВидовАдресации.ИмяВидаАдресации;
					СпособПроверки  = ВыборкаВидовАдресации.СпособПроверкиАдресации;
					
					ПроверятьШапку    = ?(СпособПроверки = Перечисления.бит_СпособыПроверкиПринадлежностиОбъектаАдресации.Шапка
									  	ИЛИ СпособПроверки = Перечисления.бит_СпособыПроверкиПринадлежностиОбъектаАдресации.ШапкаТабличныеЧасти
										, Истина, Ложь);
					ПроверятьТабЧасть = ?(СпособПроверки = Перечисления.бит_СпособыПроверкиПринадлежностиОбъектаАдресации.ТабличныеЧасти
									  	ИЛИ СпособПроверки = Перечисления.бит_СпособыПроверкиПринадлежностиОбъектаАдресации.ШапкаТабличныеЧасти
										, Истина, Ложь);
					// В рамках проверки поля адресации значение может присутствовать в шапке или строке одной из табличных частей,
					//  в соответствии со способом проверки.
					
					СодержитПроверки         = Ложь;
					КоличествоОбластейПоиска = 0;
					ТекстПроверкиРеквизита   = "";
					Если ПроверятьШапку И бит_РаботаСМетаданными.ЕстьРеквизит(ИмяПоляПроверки, МетаданныеОбъектаВизирования) Тогда
						КоличествоОбластейПоиска = КоличествоОбластейПоиска + 1;
						ТекстПроверкиРеквизита   = ТекстПроверкиРеквизита +
						"ВЫБРАТЬ
						|	ОбъектыПроверки.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
						|	ОбъектыПроверки.УсловиеДоступа КАК УсловиеДоступа,
						|	ОбъектыПроверки.ОбъектВизирования КАК ОбъектВизирования,
						|	ОбъектыПроверки.РольИсполнителя КАК РольИсполнителя
						|ПОМЕСТИТЬ БлокПроверкиВидаАдресации
						|ИЗ
						|	ОбъектыПроверки КАК ОбъектыПроверки
						|ГДЕ
						|	&ПолеПроверкиРеквизита = &ПолеРеквизитаАдресации";
						ТекстПроверкиРеквизита = СтрЗаменить(ТекстПроверкиРеквизита
															, "&ПолеПроверкиРеквизита"
															, "ОбъектыПроверки.ОбъектВизирования." + ИмяПоляПроверки);
						ТекстПроверкиРеквизита = СтрЗаменить(ТекстПроверкиРеквизита
															, "&ПолеРеквизитаАдресации"
															, "ОбъектыПроверки." + ВыборкаВидовАдресации.ПолеРеквизитаАдресации);
					КонецЕсли;
					
					Если ПроверятьТабЧасть Тогда
						Для каждого ТабЧастьОбъекта Из МетаданныеОбъектаВизирования.ТабличныеЧасти Цикл
							Если бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(ИмяПоляПроверки
																			, МетаданныеОбъектаВизирования
																			, ТабЧастьОбъекта.Имя) Тогда
								КоличествоОбластейПоиска = КоличествоОбластейПоиска + 1;
								Если КоличествоОбластейПоиска > 1 Тогда
									ТекстПроверкиРеквизита = ТекстПроверкиРеквизита +
									"
									|
									|ОБЪЕДИНИТЬ
									|
									|";
								КонецЕсли;
								
								ТекстПроверкиРеквизита = ТекстПроверкиРеквизита +
								"ВЫБРАТЬ
								|	ОбъектыПроверки.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
								|	ОбъектыПроверки.УсловиеДоступа КАК УсловиеДоступа,
								|	ОбъектыПроверки.ОбъектВизирования КАК ОбъектВизирования,
								|	ОбъектыПроверки.РольИсполнителя КАК РольИсполнителя";
								Если КоличествоОбластейПоиска = 1 Тогда
									ТекстПроверкиРеквизита = ТекстПроверкиРеквизита +
									"
									|ПОМЕСТИТЬ БлокПроверкиВидаАдресации";
								КонецЕсли;
								ТекстПроверкиРеквизита = ТекстПроверкиРеквизита +
								"
								|ИЗ
								|	ОбъектыПроверки КАК ОбъектыПроверки
								|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПутьКТабличнойЧасти КАК ТабличнаяЧастьОбъекта
								|		ПО ОбъектыПроверки.ОбъектВизирования = ТабличнаяЧастьОбъекта.Ссылка
								|			И (&ПолеПроверкиРеквизита = &ПолеРеквизитаАдресации)";
								ТекстПроверкиРеквизита = СтрЗаменить(ТекстПроверкиРеквизита
																	, "ПутьКТабличнойЧасти"
																	, ПолноеИмяМетаданного + "." + ТабЧастьОбъекта.Имя);
								ТекстПроверкиРеквизита = СтрЗаменить(ТекстПроверкиРеквизита
																	, "&ПолеПроверкиРеквизита"
																	, "ТабличнаяЧастьОбъекта." + ИмяПоляПроверки);
								ТекстПроверкиРеквизита = СтрЗаменить(ТекстПроверкиРеквизита
																	, "&ПолеРеквизитаАдресации"
																	, "ОбъектыПроверки." + ВыборкаВидовАдресации.ПолеРеквизитаАдресации);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ПустаяСтрока(ТекстПроверкиРеквизита) Тогда
						// Ни реквизиты шапки, ни реквизиты ТЧ не содержат атрибутов адресации
						ТекстПроверкиРеквизита =
						"ВЫБРАТЬ
						|	ОбъектыПроверки.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
						|	ОбъектыПроверки.УсловиеДоступа КАК УсловиеДоступа,
						|	ОбъектыПроверки.ОбъектВизирования КАК ОбъектВизирования,
						|	ОбъектыПроверки.РольИсполнителя КАК РольИсполнителя
						|ПОМЕСТИТЬ БлокПроверкиВидаАдресации
						|ИЗ
						|	ОбъектыПроверки КАК ОбъектыПроверки
						|ГДЕ
						|	ЛОЖЬ";
					КонецЕсли;
					
					ТекстПроверкиРеквизита = СтрЗаменить(ТекстПроверкиРеквизита
												, "БлокПроверкиВидаАдресации"
												, "БлокПроверкиВидаАдресации" + НомерВидаАдресации);
					Если КоличествоОбластейПоиска = 1 Тогда
						ТекстПроверкиРеквизита = СтрЗаменить(ТекстПроверкиРеквизита, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗЛИЧНЫЕ");
					КонецЕсли;
					ТекстЗапросаПроверкиАдресации = ТекстЗапросаПроверкиАдресации + ТекстПроверкиРеквизита;
					ТекстЗапросаПроверкиАдресации = ТекстЗапросаПроверкиАдресации + ОбщегоНазначения.РазделительПакетаЗапросов();
					ТекстЗапросаПроверкиАдресации = ТекстЗапросаПроверкиАдресации +
					"ВЫБРАТЬ
					|	ОбъектыПроверки.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
					|	ОбъектыПроверки.УсловиеДоступа КАК УсловиеДоступа,
					|	ОбъектыПроверки.ОбъектВизирования КАК ОбъектВизирования,
					|	ОбъектыПроверки.РольИсполнителя КАК РольИсполнителя
					|ПОМЕСТИТЬ РезультатПроверки" + Формат(КоличествоРезультатовПроверок, "ЧГ=") + "
					|ИЗ
					|	ОбъектыПроверки КАК ОбъектыПроверки";
					Для Сч = 1 По КоличествоУсловийДоступа Цикл
						ПодстрокаФильтрации = "
						|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ БлокПроверкиВидаАдресации КАК БлокПроверкиВидаАдресации
						|	ПО ОбъектыПроверки.ТипОбъектаВизирования = БлокПроверкиВидаАдресации.ТипОбъектаВизирования
						|		И ОбъектыПроверки.УсловиеДоступа = БлокПроверкиВидаАдресации.УсловиеДоступа
						|		И ОбъектыПроверки.ОбъектВизирования = БлокПроверкиВидаАдресации.ОбъектВизирования
						|		И ОбъектыПроверки.РольИсполнителя = БлокПроверкиВидаАдресации.РольИсполнителя";
						ПодстрокаФильтрации = СтрЗаменить(ПодстрокаФильтрации
												, "БлокПроверкиВидаАдресации"
												, "БлокПроверкиВидаАдресации" + Формат(Сч, "ЧГ="));
						ТекстЗапросаПроверкиАдресации = ТекстЗапросаПроверкиАдресации + ПодстрокаФильтрации;
					КонецЦикла;
					ТекстЗапросаПроверкиАдресации = ТекстЗапросаПроверкиАдресации + ОбщегоНазначения.РазделительПакетаЗапросов();
					ТекстЗапросаПроверкиАдресации = ТекстЗапросаПроверкиАдресации + "УНИЧТОЖИТЬ ОбъектыПроверки";
					Для Сч = 1 По КоличествоУсловийДоступа Цикл
						ТекстЗапросаПроверкиАдресации = ТекстЗапросаПроверкиАдресации + ОбщегоНазначения.РазделительПакетаЗапросов();
						ТекстЗапросаПроверкиАдресации = ТекстЗапросаПроверкиАдресации + "УНИЧТОЖИТЬ БлокПроверкиВидаАдресации" + Формат(Сч, "ЧГ=");
					КонецЦикла;
					
					ПодзапросПровркаАдресации.Текст = ТекстЗапросаПроверкиАдресации;
					ПодзапросПровркаАдресации.Выполнить();
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоРезультатовПроверок = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстРезультатаПроверки = "";
	ТекстСтрокаДеструктора  = "";
	Для НомерРеультата = 1 По КоличествоРезультатовПроверок Цикл
		НомерРезультатаСтрокой = Формат(НомерРеультата, "ЧГ=");
		
		Если НомерРеультата > 1 Тогда
			ТекстРезультатаПроверки = ТекстРезультатаПроверки +
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
			
		ТекстРезультатаПроверки = ТекстРезультатаПроверки +
		"ВЫБРАТЬ
		|	РезультатПроверки.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
		|	РезультатПроверки.УсловиеДоступа КАК УсловиеДоступа,
		|	РезультатПроверки.ОбъектВизирования КАК ОбъектВизирования,
		|	РезультатПроверки.РольИсполнителя КАК РольИсполнителя";
		Если НомерРеультата = 1 Тогда
			ТекстРезультатаПроверки = ТекстРезультатаПроверки +
			"
			|ПОМЕСТИТЬ РезультатПроверки";
		КонецЕсли;
		ТекстРезультатаПроверки = ТекстРезультатаПроверки +
		"
		|ИЗ
		|	РезультатПроверки" + НомерРезультатаСтрокой + " КАК РезультатПроверки";
		
		ТекстСтрокаДеструктора =  ОбщегоНазначения.РазделительПакетаЗапросов() +
		"УНИЧТОЖИТЬ РезультатПроверки" + НомерРезультатаСтрокой;
	КонецЦикла;
	
	ТекстРезультатаПроверки = ТекстРезультатаПроверки + ОбщегоНазначения.РазделительПакетаЗапросов();
	ТекстРезультатаПроверки = ТекстРезультатаПроверки +
	"ВЫБРАТЬ
	|	УсловияРолевыхОграничений.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
	|	УсловияРолевыхОграничений.УсловиеДоступа КАК УсловиеДоступа,
	|	УсловияРолевыхОграничений.ОбъектВизирования КАК ОбъектВизирования,
	|	УсловияРолевыхОграничений.Виза КАК Виза,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РезультатПроверки.ОбъектВизирования ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ДоступРолевойАдресации
	|ПОМЕСТИТЬ РезультатПроверкиРолевойАдресации
	|ИЗ
	|	УсловияРолевыхОграничений КАК УсловияРолевыхОграничений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезультатПроверки КАК РезультатПроверки
	|		ПО УсловияРолевыхОграничений.ТипОбъектаВизирования = РезультатПроверки.ТипОбъектаВизирования
	|			И УсловияРолевыхОграничений.УсловиеДоступа = РезультатПроверки.УсловиеДоступа
	|			И УсловияРолевыхОграничений.ОбъектВизирования = РезультатПроверки.ОбъектВизирования
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияРолевыхОграничений.ТипОбъектаВизирования,
	|	УсловияРолевыхОграничений.УсловиеДоступа,
	|	УсловияРолевыхОграничений.ОбъектВизирования,
	|	УсловияРолевыхОграничений.Виза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектВизирования";
	ТекстРезультатаПроверки = ТекстРезультатаПроверки + ТекстСтрокаДеструктора;
	ТекстРезультатаПроверки = ТекстРезультатаПроверки + ОбщегоНазначения.РазделительПакетаЗапросов();
	ТекстРезультатаПроверки = ТекстРезультатаПроверки + "УНИЧТОЖИТЬ УсловияРолевыхОграничений";
	
	Запрос.Текст = ТекстРезультатаПроверки;
	Запрос.Выполнить();
	
	Возврат Истина;
	
КонецФункции

Функция ТекстЗапросаДетальныеЗаписиВиз(ПараметрыПолучения, ОписаниеТиповВиз, ЕстьФильтрыРолевойАдресации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ОбъектВизирования,
	|	0 КАК СуммаДокумента,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента
	|ПОМЕСТИТЬ ДанныеДокументов";
	
	ТипыВиз = ОписаниеТиповВиз.Типы();
	Для каждого ТипВизы Из ТипыВиз Цикл
		МетаданныеВизы = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипВизы).Метаданные();
		
		ТекстЗапросаПоОбъекту = ТекстЗапросаРеквизитовПоДокументуВизирования(МетаданныеВизы);
		Если ТекстЗапросаПоОбъекту = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоОбъекту;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	Если ЕстьФильтрыРолевойАдресации Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ОтборныеВизы.ОбъектВизирования КАК ОбъектВизирования,
		|	ОтборныеВизы.Виза КАК Виза,
		|	ОтборныеВизы.ИД КАК ИД,
		|	ОтборныеВизы.ДатаКрайняя КАК ДатаКрайняя,
		|	ОтборныеВизы.ПолныйДоступ КАК ПолныйДоступ,
		|	ОтборныеВизы.УсловиеДоступа КАК УсловиеДоступа,
		|	ОтборныеВизы.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
		|	ЕСТЬNULL(СтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
		|	ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ) КАК ЕстьФайлы,
		|	ОтборныеВизы.Организация КАК Организация,
		|	ДанныеДокументов.СуммаДокумента КАК СуммаДокумента,
		|	ДанныеДокументов.ВалютаДокумента КАК ВалютаДокумента,
		|	&ОтборныеВизыАналитики КАК ОтборныеВизыАналитики,
		|	ВЫБОР
		|		КОГДА РезультатПроверкиРолевойАдресации.ОбъектВизирования ЕСТЬ NULL
		|			ТОГДА 0 //Не ролевое пользовательское условие
		|		КОГДА РезультатПроверкиРолевойАдресации.ДоступРолевойАдресации = ЛОЖЬ
		|			ТОГДА 1 //Не доступа по ролям
		|		КОГДА РезультатПроверкиРолевойАдресации.ДоступРолевойАдресации = ИСТИНА
		|			ТОГДА 2 //Доступен по роли
		|	КОНЕЦ КАК ДоступРолевойАдресации
		|ИЗ
		|	ОтборныеВизы КАК ОтборныеВизы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО ОтборныеВизы.ОбъектВизирования = СтатусыОбъектов.Объект
		|			И (СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ОтборныеВизы.ОбъектВизирования = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументов КАК ДанныеДокументов
		|		ПО ОтборныеВизы.ОбъектВизирования = ДанныеДокументов.ОбъектВизирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ РезультатПроверкиРолевойАдресации КАК РезультатПроверкиРолевойАдресации
		|		ПО ОтборныеВизы.ОбъектВизирования = РезультатПроверкиРолевойАдресации.ОбъектВизирования
		|			И ОтборныеВизы.УсловиеДоступа = РезультатПроверкиРолевойАдресации.УсловиеДоступа
		|			И ОтборныеВизы.Виза = РезультатПроверкиРолевойАдресации.Виза
		|ИТОГИ
		|	МАКСИМУМ(ПолныйДоступ),
		|	МАКСИМУМ(ДоступРолевойАдресации)
		|ПО
		|	ОтборныеВизы.ОбъектВизирования,
		|	ОтборныеВизы.Виза,
		|	ОтборныеВизы.УсловиеДоступа";
	Иначе
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ОтборныеВизы.ОбъектВизирования КАК ОбъектВизирования,
		|	ОтборныеВизы.Виза КАК Виза,
		|	ОтборныеВизы.ИД КАК ИД,
		|	ОтборныеВизы.ДатаКрайняя КАК ДатаКрайняя,
		|	ОтборныеВизы.ПолныйДоступ КАК ПолныйДоступ,
		|	ОтборныеВизы.УсловиеДоступа КАК УсловиеДоступа,
		|	ОтборныеВизы.ТипОбъектаВизирования КАК ТипОбъектаВизирования,
		|	ЕСТЬNULL(СтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
		|	ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ) КАК ЕстьФайлы,
		|	ОтборныеВизы.Организация КАК Организация,
		|	ДанныеДокументов.СуммаДокумента КАК СуммаДокумента,
		|	ДанныеДокументов.ВалютаДокумента КАК ВалютаДокумента,
		|	&ОтборныеВизыАналитики КАК ОтборныеВизыАналитики,
		|	0 КАК ДоступРолевойАдресации
		|ИЗ
		|	ОтборныеВизы КАК ОтборныеВизы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО ОтборныеВизы.ОбъектВизирования = СтатусыОбъектов.Объект
		|			И (СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ОтборныеВизы.ОбъектВизирования = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументов КАК ДанныеДокументов
		|		ПО ОтборныеВизы.ОбъектВизирования = ДанныеДокументов.ОбъектВизирования
		|ИТОГИ
		|	МАКСИМУМ(ПолныйДоступ),
		|	МАКСИМУМ(ДоступРолевойАдресации)
		|ПО
		|	ОбъектВизирования,
		|	Виза,
		|	УсловиеДоступа";
	КонецЕсли;
	
	ТекстЗамены  = ТекстВыборкиПолейАналитики("ОтборныеВизы");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборныеВизыАналитики КАК ОтборныеВизыАналитики", ТекстЗамены);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРеквизитовПоДокументуВизирования(МетаданныеВизы)
	
	Если МетаданныеВизы = Метаданные.Документы.бит_РеестрПлатежей Тогда
		Возврат ТекстЗапросаРеквизитовРеестрПлатежей();
	КонецЕсли;
	
	// Варианты возможных реквизитов значений документов отображаются в порядке убывания приоритета их поиска.
	ВариантыРеквизитовСуммы = Новый Массив;
	ВариантыРеквизитовСуммы.Добавить("СуммаВзаиморасчеты");
	ВариантыРеквизитовСуммы.Добавить("СуммаДокумента");
	ВариантыРеквизитовСуммы.Добавить("Сумма");
	ВариантыРеквизитовВалюты = Новый Массив;
	ВариантыРеквизитовВалюты.Добавить("ВалютаВзаиморасчетов");
	ВариантыРеквизитовВалюты.Добавить("ВалютаДокумента");
	ВариантыРеквизитовВалюты.Добавить("Валюта");
	
	РеквизитыВизируемогоДокумента = МетаданныеВизы.Реквизиты;
	
	РеквизитСуммы  = "";
	РеквизитВалюты = "";
	Для каждого ВариантРеквизита Из ВариантыРеквизитовСуммы Цикл
		Если РеквизитыВизируемогоДокумента.Найти(ВариантРеквизита) <> Неопределено Тогда
			РеквизитСуммы = ВариантРеквизита;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для каждого ВариантРеквизита Из ВариантыРеквизитовВалюты Цикл
		Если РеквизитыВизируемогоДокумента.Найти(ВариантРеквизита) <> Неопределено Тогда
			РеквизитВалюты = ВариантРеквизита;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(РеквизитСуммы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапросаПоОбъекту = "
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	МетаОбъектВизирования.Ссылка КАК ОбъектВизирования,
	|	&СуммаДокумента КАК СуммаДокумента,
	|	&ВалютаДокумента КАК ВалютаДокумента
	|ИЗ
	|	ОтборныеВизы КАК ОтборныеВизы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсточникОбъектВизирования КАК МетаОбъектВизирования
	|		ПО ОтборныеВизы.ОбъектВизирования = МетаОбъектВизирования.Ссылка";
	
	ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту, "ИсточникОбъектВизирования", МетаданныеВизы.ПолноеИмя());
	ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту, "&СуммаДокумента", "МетаОбъектВизирования." + РеквизитСуммы);
	Если ПустаяСтрока(РеквизитВалюты) Тогда
		ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту, "&ВалютаДокумента", "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
	Иначе
		ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту, "&ВалютаДокумента", "МетаОбъектВизирования." + РеквизитВалюты);
	КонецЕсли;
	
	Возврат ТекстЗапросаПоОбъекту;
	
КонецФункции

Функция ТекстЗапросаРеквизитовРеестрПлатежей()
	
	// По реестру выводим суммы только в том случае, если все заявки ТЧ указаны в одной валюте.
	
	ТекстЗапросаПоОбъекту = "
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТЧРеестра.Ссылка КАК ОбъектВизирования,
	|	СУММА(ТЧРеестра.Сумма) КАК СуммаДокумента,
	|	МАКСИМУМ(ТЧРеестра.ВалютаДокумента) КАК ВалютаДокумента
	|ИЗ
	|	ОтборныеВизы КАК ОтборныеВизы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_РеестрПлатежей.Заявки КАК ТЧРеестра
	|		ПО ОтборныеВизы.ОбъектВизирования = ТЧРеестра.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧРеестра.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТЧРеестра.ВалютаДокумента) = 1";
	
	Возврат ТекстЗапросаПоОбъекту;
	
КонецФункции

Процедура ДобавитьОписаниеПоляАналитики(ТекстВыборки, ИмяТаблицыИсточника, ИмяПоляАналитики,
										СинонимПояАналитики = Неопределено, НужнаяЗапятая = Истина)
										
	Если СинонимПояАналитики = Неопределено Тогда
		СинонимПояАналитики = ИмяПоляАналитики;
	КонецЕсли;
	
	Если НужнаяЗапятая Тогда
		ТекстВыборки = ТекстВыборки + ",";
	КонецЕсли;
	
	ТекстВыборки = ТекстВыборки + "
	|	%1.%2 КАК %3";
	ТекстВыборки = СтрШаблон(ТекстВыборки, ИмяТаблицыИсточника, ИмяПоляАналитики, СинонимПояАналитики);
	
КонецПроцедуры	

Функция ОписаниеТаблицыИсточникаСКД(ОписаниеТиповОбъектов)
	
	ТипДата         = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипДатаВремя    = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока36     = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная));
	ТипСтрокаНеогр  = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
	ТипОрганизация  = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТаблицаИсточник = Новый ТаблицаЗначений;
	
	ТаблицаИсточник.Колонки.Добавить("ОбъектВизирования",		ОписаниеТиповОбъектов);
	ТаблицаИсточник.Колонки.Добавить("ДатаКрайняя",				ТипДата);
	ТаблицаИсточник.Колонки.Добавить("Виза",					Новый ОписаниеТипов("СправочникСсылка.бит_Визы"));
	ТаблицаИсточник.Колонки.Добавить("ТипОбъектаВизирования",	ТипСтрокаНеогр);
	ТаблицаИсточник.Колонки.Добавить("ИД",						ТипСтрока36);
	ТаблицаИсточник.Колонки.Добавить("ОбъектСистемы",			Новый ОписаниеТипов("СправочникСсылка.бит_ОбъектыСистемы"));
	ТаблицаИсточник.Колонки.Добавить("Статус",					Новый ОписаниеТипов("СправочникСсылка.бит_СтатусыОбъектов"));
	ТаблицаИсточник.Колонки.Добавить("ЕстьФайлы",				Новый ОписаниеТипов("Булево"));
	ТаблицаИсточник.Колонки.Добавить("Организация",				ТипОрганизация);
	ТаблицаИсточник.Колонки.Добавить("СуммаДокумента",			Новый ОписаниеТипов("Число",
															 	 Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаИсточник.Колонки.Добавить("ВалютаДокумента",			Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаИсточник.Колонки.Добавить("Дата",					ТипДатаВремя);           
	ТаблицаИсточник.Колонки.Добавить("Номер",					ТипСтрока36);           
	ТаблицаИсточник.Колонки.Добавить("Контрагент",				Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));           
	ТаблицаИсточник.Колонки.Добавить("СверхБюджета",			Новый ОписаниеТипов("Булево"));           
	ТаблицаИсточник.Колонки.Добавить("НазначениеПлатежаУпр",	ТипСтрокаНеогр);           
	ТаблицаИсточник.Колонки.Добавить("Ответственный",			Новый ОписаниеТипов("СправочникСсылка.Пользователи"));           
	ТаблицаИсточник.Колонки.Добавить("Сценарий",				Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"));           
	ТаблицаИсточник.Колонки.Добавить("Комментарий",				ТипСтрокаНеогр);           
	ТаблицаИсточник.Колонки.Добавить("Исполнитель",				Новый ОписаниеТипов("СправочникСсылка.Пользователи"));           
	ТаблицаИсточник.Колонки.Добавить("Проект",					Новый ОписаниеТипов("СправочникСсылка.Проекты"));           
	ТаблицаИсточник.Колонки.Добавить("ДатаРасхода",				ТипДата);           
	ТаблицаИсточник.Колонки.Добавить("ДоговорКонтрагента",  	Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));           
	
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	Для каждого ЭлементНастройки Из НастройкиИзмерений Цикл
		Если ЭлементНастройки.Значение.ТипЗначения = ТипОрганизация Тогда
			Продолжить; // Организация выводится из реквизита шапки
		КонецЕсли;
		ТаблицаИсточник.Колонки.Добавить(ЭлементНастройки.Ключ,
											ЭлементНастройки.Значение.ТипЗначения,
											ЭлементНастройки.Значение.Синоним);
	КонецЦикла;

	Если бит_ОбщегоНазначенияПовтИсп.ЭтоСемействоБП() Тогда
		ТаблицаИсточник.Колонки.Добавить("Аналитика_8",
											Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов"),
											"Статья оборотов");
		ТаблицаИсточник.Колонки.Добавить("Аналитика_9",
											Новый ОписаниеТипов("СправочникСсылка.Подразделения"),
											"ЦФО");
		ТаблицаИсточник.Колонки.Добавить("Аналитика_10",
											Новый ОписаниеТипов("СправочникСсылка.Контрагенты"),
											"Контрагент");
		ТаблицаИсточник.Колонки.Добавить("Аналитика_11",
											Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"),
											"Договор контрагенты");
		ТаблицаИсточник.Колонки.Добавить("Аналитика_12",
											Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"),
											"Сценарий планирования");
		ТаблицаИсточник.Колонки.Добавить("Аналитика_13",
											Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"),
											"Номенклатурная группа");
		ТаблицаИсточник.Колонки.Добавить("Аналитика_14",
											Новый ОписаниеТипов("СправочникСсылка.Проекты"),
											"Проекты");
	КонецЕсли;
	
	Возврат ТаблицаИсточник;
	
КонецФункции

Функция ПозицияВыбранногоПоля(КоллекцияЭлементовСтруктуры, ПолеКомпоновки)
	
	СчетчикПолей = 1;
	Для каждого ВыбранноеПоле Из КоллекцияЭлементовСтруктуры.Выбор.Элементы Цикл
		Если Тип(ВыбранноеПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных")
			ИЛИ НЕ ВыбранноеПоле.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ВыбранноеПоле.Поле = ПолеКомпоновки Тогда
			Возврат СчетчикПолей;
		КонецЕсли;
		СчетчикПолей = СчетчикПолей + 1;
	КонецЦикла;
	
	Для каждого НастройкиГруппировки Из КоллекцияЭлементовСтруктуры.Структура Цикл
		НомерПозиции = ПозицияВыбранногоПоля(НастройкиГруппировки, ПолеКомпоновки);
		Если НомерПозиции <> 0 Тогда
			Возврат НомерПозиции;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

// Возвращеает ссылку на элемент справочника "Объекты системы", соответствующий переданному типу
//
// Параметры:
//  ТипОбъекта - Тип.
// 
// Возвращаемое значение:
//  СправочникСсылка.бит_ОбъектыСистемы.
//
Функция ОбъектСистемыДокумент(СоответствиеОбъектовСистемы, ТипОбъекта)
	
	Если НЕ ЗначениеЗаполнено(ТипОбъекта)
		ИЛИ ТипЗнч(ТипОбъекта) <> Тип("Тип") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СоответствиеОбъектовСистемы = Неопределено Тогда
		СоответствиеОбъектовСистемы = Новый Соответствие;
	КонецЕсли;
	
	ОбъектСистемы = СоответствиеОбъектовСистемы.Получить(ТипОбъекта);
	Если ОбъектСистемы = Неопределено Тогда
		ОбъектСистемы =  бит_УправлениеОбъектамиСистемы.НайтиОбъектДоступаПоТипу(ТипОбъекта,
							Перечисления.бит_ВидыОбъектовСистемы.Документ);
		СоответствиеОбъектовСистемы.Вставить(ТипОбъекта, ОбъектСистемы);
	КонецЕсли;
	
	Возврат ОбъектСистемы;
	
КонецФункции

Функция ВыполняетсяПользовательскоеУсловие(ОбъектВизирования, ПользовательскоеУсловие, Ответственный)
	
	ПараметрыУсловия = Новый Структура;
	ПараметрыУсловия.Вставить("ТекущийОбъект",       ОбъектВизирования);
	ПараметрыУсловия.Вставить("ТекущийПользователь", Ответственный);
	Возврат бит_уп_Сервер.ПроверитьПользовательскоеУсловие(ПользовательскоеУсловие,
							ПараметрыУсловия,,,"Ошибки");
	
КонецФункции

#КонецОбласти

Функция КартинкаБиблиотеки(Назначение)
	
	Если Назначение = "ФлагВыбораЛожь" Тогда
		Возврат БиблиотекаКартинок.бит_ЗвездаПустая;
	ИначеЕсли Назначение = "ФлагВыбораИстина" Тогда
		Возврат БиблиотекаКартинок.бит_ЗвездаСтрелочка;
	ИначеЕсли Назначение = "Согласовано" Тогда
		Возврат БиблиотекаКартинок.бит_ГалочкаКруглая;
	ИначеЕсли Назначение = "Отклонено" Тогда
		Возврат БиблиотекаКартинок.УдалитьНепосредственно;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыИзвлеченияКартинки(ИсходныйТекст)
	
	// #Картинка#НаименованиеИзображнеия#[Произвольный текст после извлечения]
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Текст");
	СтруктураПараметров.Вставить("Картинка");
	
	Если ТекстСодержитИдентификаторКартинки(ИсходныйТекст) Тогда
		НачалоОписанияКартинки = СтрНайти(ИсходныйТекст, "#",,, 2);
		ОкончаниеОписанияКартинки = СтрНайти(ИсходныйТекст, "#",,, 3);
	КонецЕсли;
	
	НаименованиеКартинки = Сред(ИсходныйТекст, НачалоОписанияКартинки + 1, ОкончаниеОписанияКартинки - НачалоОписанияКартинки - 1);
	СтруктураПараметров.Текст    = СтрЗаменить(ИсходныйТекст, ИдентификаторПодстановкиКартинки() + НаименованиеКартинки + "#", "");
	СтруктураПараметров.Картинка = БиблиотекаКартинок[НаименованиеКартинки];
		
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ИдентификаторПодстановкиКартинки()
	
	Возврат "#Картинка#";
	
КонецФункции

#КонецОбласти

#КонецЕсли