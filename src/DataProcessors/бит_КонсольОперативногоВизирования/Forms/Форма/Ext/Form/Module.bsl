
	
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьФорму();
	УстановитьВидимость();
	
	ОбслужитьТаблицуДоступа();
	
	ВосстановитьНастройкиПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСписокВизКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписокВизНаКлиенте(Команда)
	
	ОбновитьСписокВизКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокОбъектовНажатие(Элемент)
	
	ПанельТипыДокументовСписокВизВидимость = НЕ ПанельТипыДокументовСписокВизВидимость;
	Если ПанельТипыДокументовСписокВизВидимость Тогда
		ЗаполнитьСписокОбъектовВизирования();
		УстановитьНастройкаФильтраВиз();
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокВизНажатие(Элемент)
	
	ПанельТипыДокументовСписокВизВидимость = НЕ ПанельТипыДокументовСписокВизВидимость;
	Если ПанельТипыДокументовСписокВизВидимость Тогда
		ЗаполнитьСписокОбъектовВизирования();
		УстановитьНастройкаФильтраВиз();
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРабочееМестоВизированияНажатие(Элемент)
	
	ОткрытьФорму("Обработка.бит_РабочееМестоВизирования.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеНастроек(Команда)
	
	НастройкиСвернуты = НЕ НастройкиСвернуты;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиНажатие(Элемент)
	
	ПанельНастроекВидимость = НЕ ПанельНастроекВидимость;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартаАлгоритмаНажатие(Элемент)
	
	ПанельАлгоритмВидимость = НЕ ПанельАлгоритмВидимость;
	ОбновитьКартуАлгоритма(Истина);
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКомментарий(Команда)
	
	Текст        = Объект.Комментарий;
	Подсказка    = НСтр("ru='Введите текст комментария';en='Enter the comment text'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВвестиКомментарийЗавершение", ЭтотОбъект);
	
	ПоказатьВводСтроки(ОповещениеОЗавершении, Текст, Подсказка, 300, Истина);
	
КонецПроцедуры

// Процедура окончание процедуры "ВвестиКомментарий".
//
&НаКлиенте
Процедура ВвестиКомментарийЗавершение(Комментарий, ДополнительныеПараметры) Экспорт

	Если Комментарий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Комментарий = Комментарий;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРешение(Команда)
	
	Если Объект.Решение.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано решение.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Решение","Объект.Решение");
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьВозможностьУстановкиРешения(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
	// В случае Web-публикации падает по ошибке "Несоответствие типов (параметр номер '1').
	Элементы.Результат.ТекущаяОбласть = Неопределено; // Чтобы не было повторной активации ячейки.
	#КонецЕсли
	
	УстановитьРешения();
	
	ОбновитьКартуАлгоритма(Истина);
	Объект.Комментарий = "";
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	ГрупповаяУстановкаПризнакаОбработки(Истина);
						
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ГрупповаяУстановкаПризнакаОбработки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыделенные(Команда)
	
	ТекущаяОбласть = Элементы.Результат.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = ТекущаяОбласть.Имя;
	ГрупповаяУстановкаПризнакаОбработкиПоДиаппазонуЯчеек(ИмяОбласти, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделенные(Команда)
	
	ТекущаяОбласть = Элементы.Результат.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = ТекущаяОбласть.Имя;
	ГрупповаяУстановкаПризнакаОбработкиПоДиаппазонуЯчеек(ИмяОбласти, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	ТекущаяОбласть = Элементы.Результат.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран ни один документ для открытия.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = ТекущаяОбласть.Имя;
	ИДСтроки = ИДСтрокиПоИмениОбласти(ИмяОбласти);
	РасшифроватьОбласть(ИДСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласованиеСтроки(Команда)
	
	ТекущаяОбласть = Элементы.Результат.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран ни один документ для согласования.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = ТекущаяОбласть.Имя;
	ИДСтроки = ИДСтрокиПоИмениОбласти(ИмяОбласти);
	ОткрытьОкноПринятияРешения(ИДСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	
	ТекущаяОбласть = Элементы.Результат.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выделите область с документом, чтобы посмотреть вложения.'
								|;en='Select the document area to view attachments.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяОбласти        = ТекущаяОбласть.Имя;
	ИДСтроки          = ИДСтрокиПоИмениОбласти(ИмяОбласти);
	Если ИДСтроки = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить документ в выделенной области.'
								|;en='Cant define document in area.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбъектВизирования = ПараметрыСтрокиДанных(ИДСтроки, "ОбъектВизирования");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  ОбъектВизирования);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
				 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	
	ТекущаяОбласть = Элементы.Результат.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выделите область с документом, чтобы создать задачу.'
								|;en='Select the document area to create task.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяОбласти        = ТекущаяОбласть.Имя;
	ИДСтроки          = ИДСтрокиПоИмениОбласти(ИмяОбласти);
	Если ИДСтроки = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить документ в выделенной области.'
								|;en='Cant define document in area.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбъектВизирования = ПараметрыСтрокиДанных(ИДСтроки, "ОбъектВизирования");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ОбъектВизирования);
	
	ОткрытьФорму("Задача.бит_уп_Задача.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = СохраняемыеНастройкиОтчета();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", НастраиваемыйОбъект());
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		ПараметрыФормы.Вставить("СохраненнаяНастройка",ТекущаяНастройка);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиЗавершение",ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтотОбъект,,,,
		Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", НастраиваемыйОбъект());
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьНастройкиЗавершение",ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтотОбъект,,,,
		Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкноНастроек(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Компоновщик", Объект.Компоновщик);
	
	Оповещение = Новый ОписаниеОповещения("НастройкиОтчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.бит_КонсольОперативногоВизирования.Форма.Настройки",ПараметрыФормы,ЭтотОбъект,,ЭтотОбъект.Окно,,
		Оповещение,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументыУстановитьВсе(Команда)
	
	НастройкаТипыДокументов.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументыСнятьВсе(Команда)
	
	НастройкаТипыДокументов.ЗаполнитьПометки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументыУстановитьФильтр(Команда)
	
	УстановленныеФильтры = Новый СписокЗначений;
	
	ЕстьФильтры = Ложь;
	Для каждого ЭлементСписка Из НастройкаТипыДокументов Цикл
		Если ЭлементСписка.Пометка Тогда
			УстановленныеФильтры.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			ЕстьВключенные = Истина;
		Иначе			
			ЕстьФильтры = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если УстановленныеФильтры.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не отмечено ни одного документа для отображения.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ТипыОбъектовВизированияЗначение");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЕстьФильтры Тогда
		УстановленныеФильтры.Очистить();
	КонецЕсли;
	
	ТипыОбъектовВизирования = УстановленныеФильтры;
	
	
	ВариантОтбораВиз = НастройкаВариантОтбораВиз;
	ФильтрВизы       = НастройкаФильтрВизы;
	
	
	ПанельТипыДокументовСписокВизВидимость = Ложь;
	УстановитьВидимость();
	ОбновитьСписокВизКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументыЗакрытьОкно(Команда)
	
	ПанельТипыДокументовСписокВизВидимость = Ложь;
	УстановитьВидимость();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоляРезультат

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	ОтключитьОбработчикОжидания("РезультатОжиданиеАктивазацииОбласти");
	ПодключитьОбработчикОжидания("РезультатОжиданиеАктивазацииОбласти",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОжиданиеАктивазацииОбласти()
	
	ТекущаяОбласть = Элементы.Результат.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеВыбораФлага(ТекущаяОбласть);
	ОбновитьКартуАлгоритма();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартуАлгоритма(ОбновлятьПринудительно = Ложь)
	
	ТекущаяОбласть = Элементы.Результат.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПанельАлгоритмВидимость Тогда
		Возврат;
	КонецЕсли;
	
	ИДСтроки = ИДСтрокиПоИмениОбласти(ТекущаяОбласть.Имя);
	Если ИДАктивнойСтрокиДоИзменения = ИДСтроки И НЕ ОбновлятьПринудительно Тогда
		Возврат;
	Иначе
		ИДАктивнойСтрокиДоИзменения = ИДСтроки;
	КонецЕсли;
		
	Если ИДСтроки <> Неопределено Тогда
		ОтрисоватьКартуАлгоритма(ИДСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяОбласти = Элемент.ТекущаяОбласть.Имя;
	
	ИДСтроки = ИДСтрокиПоИмениОбласти(ИмяОбласти);
	
	Если ЭтоУправляющаяОбласть(ИмяОбласти) Тогда
		// Обработка взаимодействия с элементом управления выполнется при активации
		ОткрытьОкноПринятияРешения(ИДСтроки);
	Иначе
		РасшифроватьОбласть(ИДСтроки, Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучиДанныеРасшифровки(Расшифровка)

	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		ЭлементРасшифровки = Данные.Элементы[Расшифровка];
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
				Возврат Поле.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСТабличнымПолемРезультат

&НаКлиенте
Процедура ОбновитьСписокВизКлиент()
	
	ДлительнаяОперация = ПараметрыОбновленияТаблицыВизирования();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Заполнение таблицы'");  
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииОбновленияТаблицыВизирования", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
	
КонецПроцедуры

// Процедура окончание процедуры "ОбновитьСписокВизКлиент".
//
&НаКлиенте
Процедура ПриЗавершенииОбновленияТаблицыВизирования(ПараметрыРезультата, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРезультата.Статус = "Ошибка" Тогда
		// Ничего не делать или обработать ошибку.
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка при выполнении: %1'"), 
		ПараметрыРезультата.КраткоеПредставлениеОшибки));
	Иначе
		ПриЗавершенииОбновленияТаблицыВизированияНаСервере(ПараметрыРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииОбновленияТаблицыВизированияНаСервере(ПараметрыРезультата)
	
	СтруктураРезультатаОбновления = ПолучитьИзВременногоХранилища(ПараметрыРезультата.АдресРезультата);
	
	СхемаКомпоновкиДанных         = ПоместитьВоВременноеХранилище(СтруктураРезультатаОбновления.СхемаКомпоновкиДанных, УникальныйИдентификатор);
	Результат                     = СтруктураРезультатаОбновления.Результат;
	ДанныеРасшифровки             = СтруктураРезультатаОбновления.ДанныеРасшифровки;
	НомерКолонкиЭлементУправления = СтруктураРезультатаОбновления.НомерКолонкиЭлементУправления;
	ДанныеТабличногоДокумента.Загрузить(СтруктураРезультатаОбновления.ДанныеТабличногоДокумента);
	
	Если НЕ КомпоновщикИнициализирован Тогда
		Если ЭтоАдресВременногоХранилища(СхемаКомпоновкиДанных) Тогда
			Схема = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
		Иначе
			Схема = Обработки.бит_КонсольОперативногоВизирования.ПолучитьМакет("СхемаКомпоновкиДанных");
		КонецЕсли;
		
		Если ПолучатьНастройкиКомпоновщика Тогда
			Настройки = Объект.Компоновщик.Настройки;
		Иначе
			Настройки = Схема.НастройкиПоУмолчанию;
		КонецЕсли;
		
		АдресСКД = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
		Объект.Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД));
		Объект.Компоновщик.ЗагрузитьНастройки(Настройки);
		
		КомпоновщикИнициализирован    = Истина;
		ПолучатьНастройкиКомпоновщика = Истина;
	КонецЕсли;
	
	ОбновитьСтатистику();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОбновленияТаблицыВизирования()

	НаименованиеЗадания = НСтр("ru = 'Заполнение таблицы визирования.'");
	ВыполняемыйМетод = "Обработки.бит_КонсольОперативногоВизирования.ЗаполнитьТаблицуВизирования";
	
	НастройкиПараметров = НастройкаПараметровЗаполненияТаблицыВизирования();
	
	// Заполнение пераметов длительной операции.
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, НастройкиПараметров, ПараметрыВыполнения);

КонецФункции

&НаСервере
Функция НастройкаПараметровЗаполненияТаблицыВизирования()
	
	ПараметрыЗаполнения	= Обработки.бит_КонсольОперативногоВизирования.НовыеПараметрыЗаполненияТаблицыВизирования();
	ПараметрыЗаполнения.Ответственный                 = Объект.Ответственный;
	ПараметрыЗаполнения.УникальныйИдентификатор       = УникальныйИдентификатор;
	ПараметрыЗаполнения.НастройкиКомпоновщика         = Объект.Компоновщик.Настройки;
	Если ЭтоАдресВременногоХранилища(СхемаКомпоновкиДанных) Тогда
		ПараметрыЗаполнения.СхемаКомпоновкиДанных     = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	КонецЕсли;
	ПараметрыЗаполнения.ДанныеТабличногоДокумента     = РеквизитФормыВЗначение("ДанныеТабличногоДокумента");
	ПараметрыЗаполнения.МатрицаДоступа   		      = ПолучитьИзВременногоХранилища(АдресТаблицыДоступа);
	ПараметрыЗаполнения.ВариантОтбораВиз              = ВариантОтбораВиз;
	ПараметрыЗаполнения.ФильтрВизы                    = ФильтрВизы;
	ПараметрыЗаполнения.ТипыОбъектовВизирования       = ТипыОбъектовВизирования;
	ПараметрыЗаполнения.ПолучатьНастройкиКомпоновщика = ПолучатьНастройкиКомпоновщика;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторЭлементаУправленияКартинки()
	
	Возврат Обработки.бит_КонсольОперативногоВизирования.ИдентификаторЭлементаУправленияКартинки();
	
КонецФункции

&НаСервере
Функция ОбластьРезультатаПоИдектификатору(Идентификатор)
	
	ИмяОбластиЭУ = ИдентификаторЭлементаУправленияКартинки() + Идентификатор;
	ОбластьЭУ    = Результат.Области.Найти(ИмяОбластиЭУ);
	Возврат ОбластьЭУ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоУправляющаяОбласть(ИмяОбласти)
	
	Возврат Обработки.бит_КонсольОперативногоВизирования.ЭтоУправляющаяОбласть(ИмяОбласти);
	
КонецФункции

&НаСервере
Функция ИДСтрокиПоИмениОбласти(Знач ИмяОбласти)
	
	Если НЕ ЭтоУправляющаяОбласть(ИмяОбласти) Тогда
		КолСиволовИдентификатораСтроки = СтрНайти(ИмяОбласти, "C");
		Если КолСиволовИдентификатораСтроки = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИмяОбластиИдентификатора = Лев(ИмяОбласти, КолСиволовИдентификатораСтроки) + НомерКолонкиЭлементУправления;	
		ИмяОбласти               = Результат.Область(ИмяОбластиИдентификатора).Имя;
		Если НЕ ЭтоУправляющаяОбласть(ИмяОбласти) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИДСтроки = СтрЗаменить(ИмяОбласти, ИдентификаторЭлементаУправленияКартинки(), "");
	
	Возврат ИДСтроки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОформленияЭлементаУправления(ПараметрыСтроки)
	
	Полужирный = Ложь;
	Наклонный  = Ложь;
	
	РешениеПринято = ЗначениеЗаполнено(ПараметрыСтроки.ПринятоеРешение);
	Если РешениеПринято Тогда
		Если ПараметрыСтроки.ПринятоеРешение = Справочники.бит_ВидыРешенийСогласования.Отклонено Тогда
			Картинка  = КартинкаБиблиотеки("Отклонено");
		Иначе	
			Картинка  = КартинкаБиблиотеки("Согласовано");
		КонецЕсли;
		Наклонный = Истина;
	ИначеЕсли ПараметрыСтроки.Обрабатывать Тогда
		Картинка   = КартинкаБиблиотеки("ФлагВыбораИстина");
		Полужирный = Истина;
	Иначе
		Картинка = КартинкаБиблиотеки("ФлагВыбораЛожь");
	КонецЕсли;
	
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("Картинка", Картинка);
	ПараметрыОформления.Вставить("Полужирный", Полужирный);
	ПараметрыОформления.Вставить("Наклонный",  Наклонный);
	
	Возврат ПараметрыОформления;
	
КонецФункции

&НаСервереБезКонтекста
Функция КартинкаБиблиотеки(Назначение)
	
	Если Назначение = "ФлагВыбораЛожь" Тогда
		Возврат БиблиотекаКартинок.бит_ЗвездаПустая;
	ИначеЕсли Назначение = "ФлагВыбораИстина" Тогда
		Возврат БиблиотекаКартинок.бит_ЗвездаСтрелочка;
	ИначеЕсли Назначение = "Согласовано" Тогда
		Возврат БиблиотекаКартинок.бит_ГалочкаКруглая;
	ИначеЕсли Назначение = "Отклонено" Тогда
		Возврат БиблиотекаКартинок.УдалитьНепосредственно;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеВыбораФлага(ТекущаяОбласть)
	
	ИмяТекущейОбласти = ТекущаяОбласть.Имя;
	
	Если НЕ ЭтоУправляющаяОбласть(ИмяТекущейОбласти) Тогда
		Возврат;
	КонецЕсли;
	ИДСтроки = ИДСтрокиПоИмениОбласти(ИмяТекущейОбласти);
	
	СтрокиТаблицы = ДанныеТабличногоДокумента.НайтиСтроки(Новый Структура("ИД", ИДСтроки));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаДанных = СтрокиТаблицы[0];
	
	РешениеПринято = ЗначениеЗаполнено(СтрокаДанных.ПринятоеРешение);
	
	Если РешениеПринято Тогда
		СтрокаДанных.Обрабатывать = Ложь;
	Иначе
		СтрокаДанных.Обрабатывать = НЕ СтрокаДанных.Обрабатывать;
		Если СтрокаДанных.Обрабатывать И ЗначениеЗаполнено(Объект.Решение) Тогда
			СписокВозможныхРешений = ВозможныеРешенияПоОбъекту(СтрокаДанных.ОбъектВизирования);
			Если СписокВозможныхРешений.НайтиПоЗначению(Объект.Решение) = Неопределено Тогда
				// Для выбранного объекта визирования не допустимо выбранное в шапке решение.
				Объект.Решение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("Обрабатывать", СтрокаДанных.Обрабатывать);
	ПараметрыСтроки.Вставить("ПринятоеРешение", СтрокаДанных.ПринятоеРешение);
	ПараметрыОформленияЭУ = ПараметрыОформленияЭлементаУправления(ПараметрыСтроки);
	
	ТекущаяОбласть.Картинка = ПараметрыОформленияЭУ.Картинка;
	
	НомТекСтроки = ТекущаяОбласть.Верх;
	КолКолонок   = Результат.ШиринаТаблицы;
	ОбластьТекущейСтроки = Результат.Область(НомТекСтроки,1,НомТекСтроки,КолКолонок);
	ОбластьТекущейСтроки.Шрифт = Новый Шрифт(ТекущаяОбласть.Шрифт,,,
							ПараметрыОформленияЭУ.Полужирный, ПараметрыОформленияЭУ.Наклонный);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьОбласть(ИДСтроки, Расшифровка = Неопределено)
	
	Если ИДСтроки = Неопределено И Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИДСтроки <> Неопределено Тогда
		Данные   = ПараметрыСтрокиДанных(ИДСтроки, "ОбъектВизирования");
	Иначе
		// Не удалось определить идентификатор, выполним стандартную расшифровку для текущей области
		Данные = ПолучиДанныеРасшифровки(Расшифровка);
	КонецЕсли;
	
	ПоказатьЗначение(,Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОкноПринятияРешения(ИДСтроки)
	
	ПараметрыСтроки   = ПараметрыСтрокиДанных(ИДСтроки);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("ПараметрыСтроки", ПараметрыСтроки);
	
	Оповещение = Новый ОписаниеОповещения("СтрокаРезультатЗавершениеВыбораРешения", ЭтотОбъект, Дополнительно); 
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСтроки.ПринятоеРешение) Тогда
		ВозможныеРешения = ВозможныеРешенияПоОбъекту(ПараметрыСтроки.ОбъектВизирования);
	Иначе
		ВозможныеРешения = Новый СписокЗначений;
		ВозможныеРешения.Добавить(ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка"), НСтр("ru = 'Очистить решение'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("МенюРешений",    ВозможныеРешения);
	ПараметрыФормы.Вставить("Комментарий",    Объект.Комментарий);
	ПараметрыФормы.Вставить("Виза", 	      ПараметрыСтроки.Виза);
	ПараметрыФормы.Вставить("Решение", 	      Объект.Решение);
	ПараметрыФормы.Вставить("Объект", 	      ПараметрыСтроки.ОбъектВизирования);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
	
	ОткрытьФорму("Обработка.бит_УстановкаВиз.Форма.ВыборРешения", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,
					Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозможныеРешенияПоОбъекту(ОбъектВизирования)
	
	ПараметрыФормированияСписка = Новый Структура;
	
	МетаданныеОбъекта = ОбъектВизирования.Метаданные();
	ОбъектСистемы     = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаданныеОбъекта);
	ПараметрыФормированияСписка.Вставить("ОбъектСистемы", ОбъектСистемы);
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъекта) Тогда
		ПараметрыФормированияСписка.Вставить("Организация",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектВизирования, "Организация"));
	КонецЕсли; 

	Возврат бит_Визирование.ПолучитьСписокВозможныхРешений(ПараметрыФормированияСписка);
	
КонецФункции

&НаСервере
Функция ОграничениеРешенийПоУстановленнымВизам()
	
	ТабДанные = РеквизитФормыВЗначение("ДанныеТабличногоДокумента");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеТабличногоДокумента.Организация КАК Организация,
	|	ДанныеТабличногоДокумента.ОбъектСистемы КАК ОбъектСистемы,
	|	ДанныеТабличногоДокумента.Обрабатывать КАК Обрабатывать
	|ПОМЕСТИТЬ ДанныеТабличногоДокумента
	|ИЗ
	|	&ДанныеТабличногоДокумента КАК ДанныеТабличногоДокумента";
	Запрос.УстановитьПараметр("ДанныеТабличногоДокумента", ТабДанные);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеТабличногоДокумента.ОбъектСистемы КАК ОбъектСистемы
	|ИЗ
	|	ДанныеТабличногоДокумента КАК ДанныеТабличногоДокумента
	|ГДЕ
	|	ДанныеТабличногоДокумента.Обрабатывать";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Не выбрано ни одной визы, вернем весь возможный псисок решений.
		Возврат ДоступныеРешения;
	КонецЕсли;
	
	// Необходимо ограничить списов выбора только теми возможными решениями, которые доступны для всех отмеченных виз.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеТабличногоДокумента.Организация КАК Организация,
	|	ДанныеТабличногоДокумента.ОбъектСистемы КАК ОбъектСистемы
	|ПОМЕСТИТЬ ОбрабатываемыеДокументы
	|ИЗ
	|	ДанныеТабличногоДокумента КАК ДанныеТабличногоДокумента
	|ГДЕ
	|	ДанныеТабличногоДокумента.Обрабатывать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеТабличногоДОкумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбрабатываемыеДокументы.ОбъектСистемы КАК ОбъектСистемы,
	|	ЕСТЬNULL(НазначениеВидовРешений.ВидРешения, ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка)) КАК ВидРешения,
	|	НазначениеВидовРешений.КодСортировки КАК КодСортировки
	|ПОМЕСТИТЬ МатрицаДоступныхРешений
	|ИЗ
	|	ОбрабатываемыеДокументы КАК ОбрабатываемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначениеВидовРешенийСогласования КАК НазначениеВидовРешений
	|		ПО (ОбрабатываемыеДокументы.Организация = НазначениеВидовРешений.Организация
	|				ИЛИ НазначениеВидовРешений.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			И (ОбрабатываемыеДокументы.ОбъектСистемы = НазначениеВидовРешений.ОбъектСистемы
	|				ИЛИ НазначениеВидовРешений.ОбъектСистемы = ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка))
	|			И (НЕ НазначениеВидовРешений.ВидРешения.Отключено)
	|			И (НЕ НазначениеВидовРешений.ВидРешения.ПометкаУдаления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРешения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбрабатываемыеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатрицаДоступныхРешений.ВидРешения КАК ВидРешения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МатрицаДоступныхРешений.ОбъектСистемы) КАК КоличествоВизРешения
	|ПОМЕСТИТЬ СтатистикаПоДоступнымРешениям
	|ИЗ
	|	МатрицаДоступныхРешений КАК МатрицаДоступныхРешений
	|
	|СГРУППИРОВАТЬ ПО
	|	МатрицаДоступныхРешений.ВидРешения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтатистикаПоДоступнымРешениям.КоличествоВизРешения) КАК КоличествоВизРешения
	|ПОМЕСТИТЬ МаксКоличествоВиз
	|ИЗ
	|	СтатистикаПоДоступнымРешениям КАК СтатистикаПоДоступнымРешениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатистикаПоДоступнымРешениям.ВидРешения КАК ВидРешения,
	|	СтатистикаПоДоступнымРешениям.КоличествоВизРешения КАК КоличествоВизРешения
	|ПОМЕСТИТЬ ОтборныеРешения
	|ИЗ
	|	СтатистикаПоДоступнымРешениям КАК СтатистикаПоДоступнымРешениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксКоличествоВиз КАК МаксКоличествоВиз
	|		ПО СтатистикаПоДоступнымРешениям.КоличествоВизРешения = МаксКоличествоВиз.КоличествоВизРешения
	|			И (СтатистикаПоДоступнымРешениям.ВидРешения <> ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СтатистикаПоДоступнымРешениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаксКоличествоВиз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборныеРешения.ВидРешения КАК ВидРешения,
	|	МАКСИМУМ(МатрицаДоступныхРешений.КодСортировки) КАК КодСортировки,
	|	ОтборныеРешения.ВидРешения.Представление КАК ВидРешенияПредставление
	|ИЗ
	|	ОтборныеРешения КАК ОтборныеРешения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МатрицаДоступныхРешений КАК МатрицаДоступныхРешений
	|		ПО ОтборныеРешения.ВидРешения = МатрицаДоступныхРешений.ВидРешения
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтборныеРешения.ВидРешения
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСортировки";
	                                      
	СписокРешений = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокРешений.Добавить(Выборка.ВидРешения, Выборка.ВидРешенияПредставление);
	КонецЦикла; 

	Возврат СписокРешений;
	
КонецФункции

&НаСервере
Процедура ПроверитьКорректностьРешенияШапки()
	
	Если НЕ ЗначениеЗаполнено(Объект.Решение) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеВидыРешений = ОграничениеРешенийПоУстановленнымВизам();
	Если ДоступныеВидыРешений.НайтиПоЗначению(Объект.Решение) = Неопределено Тогда
		Объект.Решение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик закрытия формы выбора решения.
//  См. Синтакс-помощник: ОткрытьФорму().
// 
&НаКлиенте 
Процедура СтрокаРезультатЗавершениеВыбораРешения(РезультатВыбора, ДополнительныеДанные) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРезультатЗавершениеВыбораРешенияСервер(ДополнительныеДанные, РезультатВыбора);
	ОбновитьКартуАлгоритма(Истина);
	
КонецПроцедуры

&НаСервере
Процедура СтрокаРезультатЗавершениеВыбораРешенияСервер(ДополнительныеДанные, РезультатВыбора)
	
	ПараметрыОтметкиРешения = ПараметрыПринятияРешения();
	ПараметрыОтметкиРешения.Решение     = РезультатВыбора.Решение;
	ПараметрыОтметкиРешения.Комментарий = РезультатВыбора.Комментарий;
	ПараметрыОтметкиРешения.ДатаУстановкиРешения = ТекущаяДатаСеанса();
	
	СтрокаРезультата = ДополнительныеДанные.ПараметрыСтроки;
	СтрокаРезультата.Обрабатывать = Истина; // В случае выбора статуса в строке, обрабатываем всегда
	УстановитьРешениеПоСтроке(СтрокаРезультата, ПараметрыОтметкиРешения);
	
	СтрокиДанных = ДанныеТабличногоДокумента.НайтиСтроки(Новый Структура("ИД", СтрокаРезультата.ИД));
	ЗаполнитьЗначенияСвойств(СтрокиДанных[0], СтрокаРезультата);
	
	ПараметрыОформленияЭУ = ПараметрыОформленияЭлементаУправления(СтрокаРезультата);
	ОбластьЭУ    = ОбластьРезультатаПоИдектификатору(СтрокаРезультата.ИД);
	ОбластьЭУ.Картинка = ПараметрыОформленияЭУ.Картинка;
							
	НомТекСтроки = ОбластьЭУ.Верх;
	КолКолонок   = Результат.ШиринаТаблицы;
	ОбластьТекущейСтроки = Результат.Область(НомТекСтроки,1,НомТекСтроки,КолКолонок);
	ОбластьТекущейСтроки.Шрифт = Новый Шрифт(ОбластьЭУ.Шрифт,,,
							ПараметрыОформленияЭУ.Полужирный, ПараметрыОформленияЭУ.Наклонный);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСтрокиДанных(ИДСтроки, ИмяПараметра = Неопределено)
	
	ТабДанные = РеквизитФормыВЗначение("ДанныеТабличногоДокумента");
	СтрокаДанных = ТабДанные.Найти(ИДСтроки, "ИД");
	Если СтрокаДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяПараметра <> Неопределено Тогда
		Возврат СтрокаДанных[ИмяПараметра];
	КонецЕсли;
	
	ПараметрыСтроки = Новый Структура;
	Для каждого КолонкаТаблицыДанных Из ТабДанные.Колонки Цикл
		ИмяКолонки = КолонкаТаблицыДанных.Имя;
		ПараметрыСтроки.Вставить(ИмяКолонки, СтрокаДанных[ИмяКолонки]);
	КонецЦикла;
	
	Возврат ПараметрыСтроки;
	
КонецФункции

#КонецОбласти

#Область СохранениеВосстановлениеНастроек

// Процедура - обработчик оповещения о закрытии формы сохранения настроек. 
//
&НаКлиенте
Процедура СохранитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекущаяНастройка = Результат;
		УстановитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
//
&НаКлиенте
Процедура ВыбратьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		ТекущаяНастройка = Результат;
		Если ПрименитьНастройки(ТекущаяНастройка) Тогда
			ОбновитьСписокВизКлиент();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохраняемыеНастройкиОтчета()
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ТипыОбъектовВизирования", ТипыОбъектовВизирования);
	СтруктураНастройки.Вставить("ВариантОтбораВиз",		   ВариантОтбораВиз);
	СтруктураНастройки.Вставить("ФильтрВизы",	           ФильтрВизы);
	СтруктураНастройки.Вставить("НастройкиКомпоновщика",   Объект.Компоновщик.Настройки);

	Возврат СтруктураНастройки;
	
КонецФункции

&НаСервереБезКонтекста
Функция НастраиваемыйОбъект()
	
	Возврат Метаданные.Обработки.бит_КонсольОперативногоВизирования.ПолноеИмя();
	
КонецФункции

// Функция применяет сохраненные настройки.
//
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
//
&НаСервере
Функция ПрименитьНастройки(ВыбНастройка)
	
	НастройкиОбновлены = Ложь;
	
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			ТипыОбъектовВизирования      = СтруктураНастроек.ТипыОбъектовВизирования;
			ВариантОтбораВиз             = СтруктураНастроек.ВариантОтбораВиз;
			ФильтрВизы                   = СтруктураНастроек.ФильтрВизы;
			Объект.Компоновщик.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			
			ПолучатьНастройкиКомпоновщика = Истина;
			НастройкиОбновлены = Истина;
			
		КонецЕсли;	 
		
	КонецЕсли; 
	
	УстановитьЗаголовокФормы();
	Возврат НастройкиОбновлены;
	
КонецФункции

&НаСервере
Функция ВосстановитьНастройкиПоУмолчанию()
	
	// Пока значения по умолчанию, далее будет сохранение и восстановление.
	ПанельАлгоритмВидимость = Ложь;
	ВариантОтбораВиз        = 0;
	
	// Получим настройку по - умолчанию и последнюю использованную.
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(НастраиваемыйОбъект());
	
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда
		Возврат ПрименитьНастройки(НастройкаПоУмолчанию);
	КонецЕсли;
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбъектСистемы", Метаданные.Обработки.бит_КонсольОперативногоВизирования);
	СтруктураПараметров.Вставить("КлючЗначения", "ПоследниеЗначения");
	
	ПоследниеЗначения = РегистрыСведений.бит_СохраненныеЗначения.ПолучитьЗнч(бит_ОбщегоНазначенияПовтИсп.ЗначениеПеременной("ТекущийПользователь"),
							СтруктураПараметров);
	Если ТипЗнч(ПоследниеЗначения) = Тип("Структура") И ПоследниеЗначения.Свойство("Настройка") Тогда
		Настройка_Последняя = ПоследниеЗначения.Настройка;
		Возврат ПрименитьНастройки(Настройка_Последняя);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОбслужитьТаблицуДоступа()
	
	ТаблицаДоступа      = Обработки.бит_КонсольОперативногоВизирования.МатрицаДоступа(Объект.Ответственный);
	АдресТаблицыДоступа = ПоместитьВоВременноеХранилище(ТаблицаДоступа, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаАлгоритм.Видимость = ПанельАлгоритмВидимость;
	ТекстПодсказки = ?(ПанельАлгоритмВидимость, НСтр("ru = 'Скрыть карту'"), НСтр("ru = 'Отобразить карту'"));
	Элементы.ДекорацияКартаАлгоритма.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
	Элементы.ГруппаЛокальныеНастройки.Видимость = ПанельНастроекВидимость;
	ТекстПодсказки = ?(ПанельНастроекВидимость, НСтр("ru='Скрыть настройки';en='Hide Settings'"), НСтр("ru='Отобразить настройки';en='Display Settings'"));
	Элементы.ДекорацияНастройки.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
	// Управление видимостью настроек.
	Элементы.ГруппаПанельНавигации.Видимость = НЕ НастройкиСвернуты;
	Если НастройкиСвернуты Тогда
		Элементы.ОтображениеНастроек.Заголовок = НСтр("ru = 'Отобразить дополнительную панель'");
		Элементы.ОтображениеНастроек.Картинка  = БиблиотекаКартинок.СтрелкаВниз;
	Иначе
		Элементы.ОтображениеНастроек.Заголовок = НСтр("ru = 'Скрыть дополнительную панель'");
		Элементы.ОтображениеНастроек.Картинка  = БиблиотекаКартинок.СтрелкаВверх;
	КонецЕсли;
	
	Элементы.ГруппаТипыДокументовИСписокВиз.Видимость = ПанельТипыДокументовСписокВизВидимость;
	Элементы.НастройкаФильтрВизы.Доступность = (НастройкаВариантОтбораВиз = 3);
	
КонецПроцедуры

// Процедура устанавливает заголовок формы.
//
&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		ЗаголовокФормы = НСтр("ru='Рабочее место визирования (%1)';en='Workplace sight (%1)'");
		ЗаголовокФормы = СтрШаблон(ЗаголовокФормы, ТекущаяНастройка);
	Иначе	
		ЗаголовокФормы = НСтр("ru='Рабочее место визирования';en='Approval Workplace'");
	КонецЕсли; 
	ЭтотОбъект.Заголовок = ЗаголовокФормы;
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьКартуАлгоритма(ИдВизы)
	
	ОбъектВизирования = ПараметрыСтрокиДанных(ИдВизы, "ОбъектВизирования");
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("Объект", ОбъектВизирования);
	
	ТекНаборВизы = бит_Визирование.ПрочитатьНаборВиз(СтрОтбор);
	ТаблицаВизы  = ТекНаборВизы.Выгрузить();
	
	ВизыПользователя = бит_Визирование.ПолучитьВизыПользователя(бит_ОбщегоНазначенияПовтИсп.ЗначениеПеременной("ТекущийПользователь"), ОбъектВизирования);
	
	ТаблицаВизы.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаВизы Цикл
		СтрокаТаблицы.ДоступностьВизы = ВизыПользователя.НайтиПоЗначению(Справочники.бит_ГруппыВиз.ВсеВизы) <> Неопределено
		ИЛИ ВизыПользователя.НайтиПоЗначению(СтрокаТаблицы.Виза) <> Неопределено;
	КонецЦикла; 
	
	Алгоритм = бит_Визирование.ПолучитьАлгоритмПоНаборуВиз(ТаблицаВизы);
	
	ТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы);
	
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);		
	// Определяем, какие точки алгоритма доступны.
	бит_уп_Сервер.ОпределитьДоступностьТочек(ТаблицаТочкиВизы,флВыполнятьПоэтапно);
	
	ТаблицаТочкиВизы.ЗаполнитьЗначения(0,"Обработана");
	ТаблицаТочкиВизы.ЗаполнитьЗначения(0,"СвязиОбработаны");
	
	// Версия схемы = 2
	РеквизитыАлгоритма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Алгоритм, 
	"ВерсияСхемы, КартаМаршрута");
	
	Если РеквизитыАлгоритма.ВерсияСхемы = 2 Тогда
		ГрафическаяСхема = РеквизитыАлгоритма.КартаМаршрута.Получить();
		бит_УправлениеПроцессамиКлиентСервер.ВыделитьЭлементыПоТаблицеВиз(ГрафическаяСхема, ТаблицаТочкиВизы);
	КонецЕсли;
	
	Элементы.ГрафическаяСхема.Видимость = РеквизитыАлгоритма.ВерсияСхемы = 2;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатистику()
	
	ТекстФильтраВидовОбъектов = "";
	Если ТипыОбъектовВизирования.Количество() = 0 Тогда
		ТекстФильтраВидовОбъектов = НСтр("ru='Все';en='all'");
	Иначе
		ВсегоТипов   = Метаданные.ОпределяемыеТипы.бит_ОбъектыВизирования.Тип.Типы().Количество();
		ВыбраноТипов = ТипыОбъектовВизирования.Количество();
		
		Если ВыбраноТипов = 1 Тогда
			ТекстФильтраВидовОбъектов = ТипыОбъектовВизирования[0].Представление;
		Иначе
			ТекстФильтраВидовОбъектов = НСтр("ru = 'Выбрано: %1 из %2'");
			ТекстФильтраВидовОбъектов = СтрШаблон(ТекстФильтраВидовОбъектов, ВыбраноТипов, ВсегоТипов);
		КонецЕсли;
	КонецЕсли;
	Элементы.ДекорацияСписокОбъектов.РасширеннаяПодсказка.Заголовок = ТекстФильтраВидовОбъектов;
	
	ТекстФльтраВизы = "";
	Если ВариантОтбораВиз = 0 Тогда
		ТекстФльтраВизы = НСтр("ru='Все';en='all'");
	ИначеЕсли ВариантОтбораВиз = 1 Тогда
		ТекстФльтраВизы = НСтр("ru = 'Согласующие'");
	ИначеЕсли ВариантОтбораВиз = 2 Тогда
		ТекстФльтраВизы = НСтр("ru = 'Утверждающие'");
	ИначеЕсли ВариантОтбораВиз = 3 Тогда
		ВыбраноВиз = ФильтрВизы.Количество();
		Если ВыбраноВиз = 1 Тогда
			ТекстФльтраВизы = Строка(ФильтрВизы[0].Значение);
		Иначе
			ТекстФльтраВизы = НСтр("ru = 'Выбрано: %1'");
			ТекстФльтраВизы = СтрШаблон(ТекстФльтраВизы, ВыбраноВиз);
		КонецЕсли;
	КонецЕсли;
	Элементы.ДекорацияСписокВиз.РасширеннаяПодсказка.Заголовок = ТекстФльтраВизы;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОбъектовВизирования()
	
	НастройкаТипыДокументов.Очистить();
	ЕстьФильтр = (ТипыОбъектовВизирования.Количество() > 0);
	
	Для каждого ТипОбъекта Из Метаданные.ОпределяемыеТипы.бит_ОбъектыВизирования.Тип.Типы() Цикл
		ПредставлениеТипа = Строка(ТипОбъекта);
		Если СтрНайти(ПредставлениеТипа, "(Не используется)") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Отметка = Истина;
		Если ЕстьФильтр Тогда
			Если ТипыОбъектовВизирования.НайтиПоЗначению(ТипОбъекта) = Неопределено Тогда
				Отметка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НастройкаТипыДокументов.Добавить(ТипОбъекта,ПредставлениеТипа,Отметка);
	КонецЦикла;	
	
	НастройкаТипыДокументов.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкаФильтраВиз()
	
	НастройкаВариантОтбораВиз = ВариантОтбораВиз;
	НастройкаФильтрВизы       = ФильтрВизы;
	
КонецПроцедуры

// Процедура окончание процедуры "ОкноНастроек".
//
&НаКлиенте
Процедура НастройкиОтчетаЗавершение(РезультатыНастроек, ДополнительныеПараметры) Экспорт
	
	Если РезультатыНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Компоновщик = РезультатыНастроек.Компоновщик;
	ОбновитьСписокВизКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РешениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОграничениеДоступныхРешений = ОграничениеРешенийПоУстановленнымВизам();
	
	Оповещение = Новый ОписаниеОповещения("РешениеНачалоВыбораЗавершение", ЭтотОбъект, Элемент); 
	ПоказатьВыборИзСписка(Оповещение, ОграничениеДоступныхРешений, Элемент);
	
КонецПроцедуры

// Процедура окончание процедуры "РешениеНачалоВыбора".
// 
&НаКлиенте 
Процедура РешениеНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		Объект.Решение = РезультатВыбора.Значение;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтветственныйНажатиеЗавершение", ЭтотОбъект, Элемент);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",ПараметрыФормы,Элемент,,,,ОписаниеОповещения);
	
КонецПроцедуры

// Обработчик завершения открытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
//
&НаКлиенте
Процедура ОтветственныйНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.Ответственный = Результат;
		ИзменениеОтветственногоНаСервере();
		ОбновитьСписокВизКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеОтветственногоНаСервере()
	
	ОбслужитьТаблицуДоступа();
	
КонецПроцедуры

// Процедура выполняет действия, необходимые при создании формы на сервере.
//
// Параметры:
// 	Нет.
//
&НаСервере
Процедура ПодготовитьФорму() Экспорт

	Объект.Ответственный               = Пользователи.ТекущийПользователь();
	Если НЕ ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.бит_ПраваУстановкиВиз) Тогда
		Элементы.Ответственный.Видимость = Ложь;
	КонецЕсли;
	
	ИнициализироватьДоступныеРешения();
	Элементы.ГрафическаяСхема.Видимость = Истина;
	УстановитьЗаголовокФормы();

КонецПроцедуры

// Процедура инициализирует список доступных для установки решений.
//
&НаСервере
Процедура ИнициализироватьДоступныеРешения()

	ПустойФильтр     = Новый Структура;
	ДоступныеРешения = бит_Визирование.ПолучитьСписокВозможныхРешений(ПустойФильтр);

КонецПроцедуры

&НаСервере
Процедура ГрупповаяУстановкаПризнакаОбработки(УстанавливаемыйПризнак)
	
	#Если НЕ ВебКлиент Тогда
	// В случае Web-публикации падает по ошибке "Несоответствие типов (параметр номер '1').
	Элементы.Результат.ТекущаяОбласть = Неопределено; // Чтобы не было повторной активации ячейки.
	#КонецЕсли
	
	СтрокиТаблицы = ДанныеТабличногоДокумента.НайтиСтроки(Новый Структура("Обрабатывать", НЕ УстанавливаемыйПризнак));
	Для каждого СтрокаДанных Из СтрокиТаблицы Цикл
		СтрокаДанных.Обрабатывать = УстанавливаемыйПризнак;
		
		ОбластьОформления = ОбластьРезультатаПоИдектификатору(СтрокаДанных.ИД);
		Если ОбластьОформления = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Обрабатывать", СтрокаДанных.Обрабатывать);
		ПараметрыСтроки.Вставить("ПринятоеРешение", СтрокаДанных.ПринятоеРешение);
		ПараметрыОформленияЭУ = ПараметрыОформленияЭлементаУправления(ПараметрыСтроки);
		
		ОбластьОформления.Картинка = ПараметрыОформленияЭУ.Картинка;
		
		НомТекСтроки = ОбластьОформления.Верх;
		КолКолонок   = Результат.ШиринаТаблицы;
		ОбластьТекущейСтроки = Результат.Область(НомТекСтроки,1,НомТекСтроки,КолКолонок);
		ОбластьТекущейСтроки.Шрифт = Новый Шрифт(ОбластьОформления.Шрифт,,,
										ПараметрыОформленияЭУ.Полужирный, ПараметрыОформленияЭУ.Наклонный);
	КонецЦикла;

	ПроверитьКорректностьРешенияШапки();
	
КонецПроцедуры

&НаСервере
Процедура ГрупповаяУстановкаПризнакаОбработкиПоДиаппазонуЯчеек(ИмяДиаппазона, УстанавливаемыйПризнак)
	
	МассивИД   = Новый Массив;
	МассивИмен = СтрРазделить(ИмяДиаппазона, ":");
	
	Если МассивИмен.Количество() = 1 Тогда
		ИДСтроки = ИДСтрокиПоИмениОбласти(МассивИмен[0]);
		МассивИД.Добавить(ИДСтроки);
	Иначе
		НомерПервойСтроки    = НомерСтрокиИзИмениОбласти(МассивИмен[0]);
		НомерПоследнейСтроки = НомерСтрокиИзИмениОбласти(МассивИмен[1]);
		
		Для Сч = НомерПервойСтроки По НомерПоследнейСтроки Цикл
			ИмяЯчейкиИтератора = "R%1C%2";
			ИмяЯчейкиИтератора = СтрШаблон(ИмяЯчейкиИтератора,
									Формат(Сч, "ЧГ="),
									Формат(НомерКолонкиЭлементУправления, "ЧГ="));
			
			ИДСтроки = ИДСтрокиПоИмениОбласти(ИмяЯчейкиИтератора);
			МассивИД.Добавить(ИДСтроки);
		КонецЦикла;
	КонецЕсли;
	
	ШаблонОтбора = Новый Структура;
	ШаблонОтбора.Вставить("ИД");
	Для каждого ИДСтроки Из МассивИД Цикл
		Если ИДСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонОтбора.ИД = ИДСтроки;
		СтрокиТаблицы   = ДанныеТабличногоДокумента.НайтиСтроки(ШаблонОтбора);
		Для каждого СтрокаДанных Из СтрокиТаблицы Цикл
			СтрокаДанных.Обрабатывать = УстанавливаемыйПризнак;
			
			ОбластьОформления = ОбластьРезультатаПоИдектификатору(СтрокаДанных.ИД);
			Если ОбластьОформления = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыСтроки = Новый Структура;
			ПараметрыСтроки.Вставить("Обрабатывать", СтрокаДанных.Обрабатывать);
			ПараметрыСтроки.Вставить("ПринятоеРешение", СтрокаДанных.ПринятоеРешение);
			ПараметрыОформленияЭУ = ПараметрыОформленияЭлементаУправления(ПараметрыСтроки);
			
			ОбластьОформления.Картинка = ПараметрыОформленияЭУ.Картинка;
			
			НомТекСтроки = ОбластьОформления.Верх;
			КолКолонок   = Результат.ШиринаТаблицы;
			ОбластьТекущейСтроки = Результат.Область(НомТекСтроки,1,НомТекСтроки,КолКолонок);
			ОбластьТекущейСтроки.Шрифт = Новый Шрифт(ОбластьОформления.Шрифт,,,
				ПараметрыОформленияЭУ.Полужирный, ПараметрыОформленияЭУ.Наклонный);
		КонецЦикла;		
	КонецЦикла;
	
	ПроверитьКорректностьРешенияШапки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерСтрокиИзИмениОбласти(ИмяОбласти)
	
	// ИмяОбласи: R##C##
	ПозицияС = СтрНайти(ИмяОбласти,"C");
	Если ПозицияС = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПорядокЧислаНомСтроки = ПозицияС - 2;
	
	НомСтрокой = Сред(ИмяОбласти, 2, ПорядокЧислаНомСтроки);
	
	НомерСтроки = Число(НомСтрокой);
	Возврат НомерСтроки;
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьУстановкиРешения(Отказ)
	
	ДанныеТД = РеквизитФормыВЗначение("ДанныеТабличногоДокумента");
	Запрос   = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеТД.Обрабатывать КАК Обрабатывать,
	|	ДанныеТД.ОбъектВизирования КАК ОбъектВизирования,
	|	ДанныеТД.Организация КАК Организация,
	|	ДанныеТД.ОбъектСистемы КАК ОбъектСистемы,
	|	ДанныеТД.НомерПП КАК НомерПП
	|ПОМЕСТИТЬ ДанныеТД
	|ИЗ
	|	&ДанныеТД КАК ДанныеТД";
	Запрос.УстановитьПараметр("ДанныеТД", ДанныеТД);
	Запрос.Выполнить();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеТД.Обрабатывать КАК Обрабатывать,
	|	ДанныеТД.ОбъектВизирования КАК ОбъектВизирования,
	|	ДанныеТД.Организация КАК Организация,
	|	ДанныеТД.ОбъектСистемы КАК ОбъектСистемы,
	|	ДанныеТД.НомерПП КАК НомерПП
	|ПОМЕСТИТЬ ОбрабатываеммыеДанные
	|ИЗ
	|	ДанныеТД КАК ДанныеТД
	|ГДЕ
	|	ДанныеТД.Обрабатывать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбрабатываеммыеДанные.ОбъектВизирования КАК ОбъектВизирования,
	|	МИНИМУМ(ОбрабатываеммыеДанные.НомерПП) КАК НомерПП
	|ИЗ
	|	ОбрабатываеммыеДанные КАК ОбрабатываеммыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначениеВидовРешенийСогласования КАК НазначенияРешений
	|		ПО (ОбрабатываеммыеДанные.Организация = НазначенияРешений.Организация
	|				ИЛИ НазначенияРешений.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			И (ОбрабатываеммыеДанные.ОбъектСистемы = НазначенияРешений.ОбъектСистемы
	|				ИЛИ НазначенияРешений.ОбъектСистемы = ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка))
	|			И (НазначенияРешений.ВидРешения = &ВыбранноеРешение)
	|ГДЕ
	|	НазначенияРешений.ВидРешения ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбрабатываеммыеДанные.ОбъектВизирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПП";
	Запрос.УстановитьПараметр("ВыбранноеРешение", Объект.Решение);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат; // Решение доступно для всех отмеченных видов документов
	КонецЕсли;
	
	ВыборкаЗапретов = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапретов.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Решение ""%1"" не может быть установлено для документа ""%2"". Проверьте регистр ""Назначение видов решений"".'"),
									Объект.Решение, ВыборкаЗапретов.ОбъектВизирования);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыПринятияРешения()
	
	ПараметрыРешения = Новый Структура;
	ПараметрыРешения.Вставить("Решение");
	ПараметрыРешения.Вставить("Комментарий");
	ПараметрыРешения.Вставить("ДатаУстановкиРешения");
	ПараметрыРешения.Вставить("ПроводитьПослеУтверждения");
	ПараметрыРешения.Вставить("ТекущийПользователь");
	
	ПараметрыРешения.ПроводитьПослеУтверждения = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения");
	ПараметрыРешения.ТекущийПользователь       = Пользователи.ТекущийПользователь();
	
	Возврат ПараметрыРешения;
	
КонецФункции

&НаСервере
Процедура УстановитьРешения()
	
	ПараметрыОтметкиРешения = ПараметрыПринятияРешения();
	ПараметрыОтметкиРешения.Решение     = Объект.Решение;
	ПараметрыОтметкиРешения.Комментарий = Объект.Комментарий;
	ПараметрыОтметкиРешения.ДатаУстановкиРешения = ТекущаяДатаСеанса();
	
	ДанныеТД = РеквизитФормыВЗначение("ДанныеТабличногоДокумента");
	ТаблицаРезультат = УстановитьРешениеПоТаблицеДанных(ДанныеТД, ПараметрыОтметкиРешения);
	ЗначениеВРеквизитФормы(ТаблицаРезультат, "ДанныеТабличногоДокумента");
	
	// Установим отметки завершенных операций
	Для каждого СтрокаРезультата Из ТаблицаРезультат Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ПринятоеРешение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОформленияЭУ = ПараметрыОформленияЭлементаУправления(СтрокаРезультата);
		ОбластьЭУ    = ОбластьРезультатаПоИдектификатору(СтрокаРезультата.ИД);
		
		ОбластьЭУ.Картинка = ПараметрыОформленияЭУ.Картинка;
		
		НомТекСтроки = ОбластьЭУ.Верх;
		КолКолонок   = Результат.ШиринаТаблицы;
		ОбластьТекущейСтроки = Результат.Область(НомТекСтроки,1,НомТекСтроки,КолКолонок);
		ОбластьТекущейСтроки.Шрифт = Новый Шрифт(ОбластьЭУ.Шрифт,,,
			ПараметрыОформленияЭУ.Полужирный, ПараметрыОформленияЭУ.Наклонный);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьРешениеПоСтроке(СтрокаДанных, ПараметрыОтметкиРешения)
	
	Если НЕ СтрокаДанных.Обрабатывать Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектВизирования = СтрокаДанных.ОбъектВизирования;
	
	ТекНаборВизы = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	ТекНаборВизы.Отбор.Объект.Установить(ОбъектВизирования);
	ТекНаборВизы.Прочитать();
	
	НаборМодифицирован = Ложь;
	Для каждого ЗаписьНабора Из ТекНаборВизы Цикл
		Если ЗаписьНабора.ИД <> СтрокаДанных.ИД Тогда
			Продолжить;
		КонецЕсли;
		
		ПринятоеРешение = ПараметрыОтметкиРешения.Решение;
		Если ЗначениеЗаполнено(ПринятоеРешение) Тогда
			ЗаписьНабора.Решение       = ПринятоеРешение;
			ЗаписьНабора.Пользователь  = ПараметрыОтметкиРешения.ТекущийПользователь;
			ЗаписьНабора.ДатаУстановки = ПараметрыОтметкиРешения.ДатаУстановкиРешения;
			ЗаписьНабора.Комментарий   = ПараметрыОтметкиРешения.Комментарий;
		Иначе //Отмена принятого решения
			ЗаписьНабора.Решение       = Неопределено;
			ЗаписьНабора.Пользователь  = Неопределено;
			ЗаписьНабора.ДатаУстановки = Неопределено;
			ЗаписьНабора.Комментарий   = Неопределено;
		КонецЕсли;
		
		НаборМодифицирован = Истина;
		Прервать;
	КонецЦикла;
	
	УспешноеВыполнение = Ложь;
	
	Если НаборМодифицирован Тогда
		ДокОбъект  = ОбъектВизирования.ПолучитьОбъект();
		МетаОбъект = ДокОбъект.Метаданные();
		
		бит_Визирование.ДовыполнитьАлгоритмВизирования(ОбъектВизирования, ТекНаборВизы, Ложь);
		бит_Визирование.УстановитьКрайниеДатыВизирования(ОбъектВизирования, ТекНаборВизы, Ложь);
		
		Если ТекНаборВизы.ПроверитьЗаполнение() Тогда
			Попытка
				ТекНаборВизы.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка записи виз.'") + ОписаниеОшибки()); 
			КонецПопытки;
			
			ДокОбъект.УстановитьСтатус();
			бит_Визирование.ПровестиВСтатусеУтверждено(ДокОбъект, МетаОбъект, ПараметрыОтметкиРешения.ПроводитьПослеУтверждения, "Ошибки");
			УспешноеВыполнение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если УспешноеВыполнение Тогда
		СтрокаДанных.Обрабатывать    = Ложь;
		СтрокаДанных.ПринятоеРешение = ПараметрыОтметкиРешения.Решение;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьРешениеПоТаблицеДанных(ТаблицаДанных, ПараметрыОтметкиРешения)
	
	Для каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		УстановитьРешениеПоСтроке(СтрокаДанных, ПараметрыОтметкиРешения); 
				
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

&НаКлиенте
Процедура НастройкаВариантОтбораВизПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти
