#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// 1С:Бухучет и торговля
// 
//  Данная обработка реализует доставку оповещений по электронной почте, 
//  используя справочник "УчетныеЗаписиЭлектроннойПочты".
//  Обработка может быть сохранена как внешняя и использована для разработки собственных способов доставки оповещений,
//  при этом сигнатура всех процедур и функций должна быть сохранена.

#Область СлужебныйПрограммныйИнтерфейс

// Функция определяет, что обработка является обработкой доставки оповещений.
// 
// Возвращаемое значение:
//   Булево
// 
Функция ЭтоОбработкаДоставкиОповещений() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция НастройкиПоУмолчанию() Экспорт

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("EMAILУчетнаяЗапись", Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);

	Возврат РезСтруктура;
	
КонецФункции // НастройкиПоУмолчанию()

Функция ОтправитьСообщение(СообщениеСтруктура, НастройкиДоставки, СтруктураПараметров, ПротоколОтправки = "") Экспорт
	
	Результат = Ложь;
	Отказ 	  = Ложь;
	СтруктураСообщенияКорректна(СообщениеСтруктура,Отказ,ПротоколОтправки);
	
	Если НЕ Отказ Тогда
	
		Результат = ОтправитьПочтовоеСообщение(СообщениеСтруктура, НастройкиДоставки, СтруктураПараметров, ПротоколОтправки);

		Шаблон = "%1 " + СтруктураПараметров.АдресПолучателя + " " + ТекущаяДата() + ".";
		
		Если Результат Тогда
			ПротоколОтправки = СтрШаблон(Шаблон, НСтр("ru = 'Сообщение отправлено по адресу'"));
		Иначе
			ПротоколОтправки = СтрШаблон(Шаблон, НСтр("ru = 'Сообщение  не удалось отправить по адресу'"));
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьПочтовоеСообщение(СообщениеСтруктура, НастройкиДоставки, СтруктураПараметров, ПротоколОтправки)
	
	ПараметрыПисьма = СформироватьПараметрыПисьма(СообщениеСтруктура, НастройкиДоставки, СтруктураПараметров, ПротоколОтправки);
	Если ПараметрыПисьма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(НастройкиДоставки.EMAILУчетнаяЗапись, ПараметрыПисьма,,ПротоколОтправки);
	Возврат Истина;
	
КонецФункции

// Проверяет возможность отправления письма и если
// это возможно - формирует параметры отправки.
//
Функция СформироватьПараметрыПисьма(СообщениеСтруктура, НастройкиДоставки, СтруктураПараметров, ПротоколОтправки)
	
	ПараметрыПисьма = Новый Структура;
	
	СписокПолучателей = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(СтруктураПараметров.АдресПолучателя);
	Кому = Новый Массив;
	Для Каждого Получатель Из СписокПолучателей Цикл
		Если Не ПустаяСтрока(Получатель.ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Получатель.ОписаниеОшибки, , "ПочтовыйАдресПолучателя");
			Возврат Неопределено;
		КонецЕсли;
		Кому.Добавить(Новый Структура("Адрес, Представление", Получатель.Адрес, Получатель.Псевдоним));
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Кому) Тогда
		ПараметрыПисьма.Вставить("Кому", Кому);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить получателя письма'"), , "ПочтовыйАдресПолучателя");
		Возврат Неопределено;
	КонецЕсли;
	
	АдресОтвета = ПолучитьПочтовыйАдресПоУчетнойЗаписи(НастройкиДоставки.EMAILУчетнаяЗапись);
	
	СписокПолучателей = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(АдресОтвета);
	Кому = Новый Массив;
	Для Каждого Получатель Из СписокПолучателей Цикл
		Если Не ПустаяСтрока(Получатель.ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Получатель.ОписаниеОшибки, , "АдресОтвета");
			Возврат Неопределено;
		КонецЕсли;
		Кому.Добавить(Новый Структура("Адрес, Представление", Получатель.Адрес, Получатель.Псевдоним));
	КонецЦикла;
	
	//Если ЗначениеЗаполнено(АдресПолучателяСкрытойКопии) Тогда
	//	ПараметрыПисьма.Вставить("СлепыеКопии", АдресПолучателяСкрытойКопии);
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресОтвета) Тогда
		ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеСтруктура.Заголовок) Тогда
		ПараметрыПисьма.Вставить("Тема", СообщениеСтруктура.Заголовок);
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ПолучателиСообщения) Тогда
	//	ПараметрыПисьма.Вставить("ПолучателиСообщения", ПолучитьИзВременногоХранилища(ПолучателиСообщения));
	//КонецЕсли;
	
	СодержимоеПисьма = СообщениеСтруктура.Текст + Символы.ПС + СообщениеСтруктура.Подпись;
	
	ПараметрыПисьма.Вставить("Тело", СодержимоеПисьма);
	ПараметрыПисьма.Вставить("ТипТекста", СообщениеСтруктура.ТипТекстаСообщения); //см. ТипТекстаПочтовогоСообщения 
	ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
	Если СтруктураПараметров.Свойство("ИдентификаторДляВложений") И ЗначениеЗаполнено(СтруктураПараметров.ИдентификаторДляВложений) Тогда 
		ПараметрыПисьма.Вставить("Вложения", Новый Соответствие);
		пЗапрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ок_ВременныеФайлыПисем.Идентификатор КАК Идентификатор,
		|	ок_ВременныеФайлыПисем.ПолноеИмяФайла КАК ПолноеИмяФайла,
		|	ок_ВременныеФайлыПисем.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.ок_ВременныеФайлыПисем КАК ок_ВременныеФайлыПисем
		|ГДЕ
		|	ок_ВременныеФайлыПисем.Идентификатор = &Идентификатор"
		);
		пЗапрос.УстановитьПараметр("Идентификатор", СтруктураПараметров.ИдентификаторДляВложений);
		пРезультат = пЗапрос.Выполнить();
		Если НЕ пРезультат.Пустой() Тогда 
			МДРСВрФ = Метаданные.РегистрыСведений.ок_ВременныеФайлыПисем;
			Выборка = пРезультат.Выбрать();
			Пока Выборка.Следующий() Цикл 
				
				пДвоичныеДанныеДляОтправки = Выборка.Файл.Получить();
				
				Если ТипЗнч(пДвоичныеДанныеДляОтправки) = Тип("ДвоичныеДанные") Тогда
					// подготовим структуру для передачи во вложения письма
					ПараметрыПисьма.Вложения.Вставить(Выборка.ПолноеИмяФайла, пДвоичныеДанныеДляОтправки);						
				КонецЕсли;	
				
				пЗаписьВФ = РегистрыСведений.ок_ВременныеФайлыПисем.СоздатьМенеджерЗаписи();
				пЗаписьВФ.Идентификатор  = СтруктураПараметров.ИдентификаторДляВложений;
				пЗаписьВФ.ПолноеИмяФайла = Выборка.ПолноеИмяФайла;
				пЗаписьВФ.Прочитать();
				Если пЗаписьВФ.Выбран() Тогда 						
					Попытка
						пЗаписьВФ.Удалить();
					Исключение
						пТекстОшибки = НСтр("ru = 'Не удалось удалить запись с идентификатором: %1 и полным именем: %2, по причине: %3'");
						ЗаписьЖурналаРегистрации("Отправка вложений в письмах", УровеньЖурналаРегистрации.Ошибка,МДРСВрФ,, 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, СтруктураПараметров.ИдентификаторДляВложений,
						Выборка.ПолноеИмяФайла,
						ОписаниеОшибки()));
					КонецПопытки;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	Иначе
		ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Функция ПолучитьПочтовыйАдресПоУчетнойЗаписи(Знач УчетнаяЗапись)
	
	Возврат СокрЛП(УчетнаяЗапись.ИмяПользователя)
			+ ? (ПустаяСтрока(СокрЛП(УчетнаяЗапись.ИмяПользователя)),
					УчетнаяЗапись.АдресЭлектроннойПочты,
					" <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">");
	
КонецФункции

// Процедура проверяет корретность структуры сообщения. В случае ошибки устанавливается Отказ = Истина;
// 
Процедура СтруктураСообщенияКорректна(Сообщение,Отказ,ПротоколОтправки = "") Экспорт
	
	// Приведем строковое описание типа текста к системному перечислению.
	Если НЕ Сообщение.Свойство("ТипТекстаСообщения")
		ИЛИ НЕ ЗначениеЗаполнено(Сообщение.ТипТекстаСообщения) Тогда
		
		ТипТекстаСообщения = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Иначе
		
		Для Каждого ТекущийТипТекста Из ТипТекстаПочтовогоСообщения Цикл
			
			Если Строка(ТекущийТипТекста) = Сообщение.ТипТекстаСообщения Тогда
				ТипТекстаСообщения = ТекущийТипТекста;
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Сообщение.Вставить("ТипТекстаСообщения", ТипТекстаСообщения);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли	