
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем Таблицы;
	
	АдресХранилища = Параметры.АдресХранилища;
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Таблицы = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли; 
	
	Если НЕ ТипЗнч(Таблицы) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Эта форма открывается из формы корректировки движений'"),,,,Отказ);
		Возврат;
	КонецЕсли; 
	
	ЗагрузитьТаблицыВОбработку(Таблицы, Отказ);
	Если Отказ Тогда
	     Возврат;	
	КонецЕсли; 
	
	Элементы.ГруппаОборотыПоБюджетам.Заголовок = "Бюджет по сценарию: " + Объект.Сценарий;
	
	ЗаполнитьКэшЗначений();
	
	// Оформление списков	
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	, "ОборотыПоБюджетам"
																	, фКэшЗначений.ИзмеренияДоп
																	, фКэшЗначений.НастройкиИзмерений);

	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	, "РаспределенныеОбороты"
																	, фКэшЗначений.ИзмеренияДоп
																	, фКэшЗначений.НастройкиИзмерений);
																
	ОФормитьТаблицу(,"ОборотыПоБюджетам");
	ОФормитьТаблицу(,"РаспределенныеОбороты");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	ОтобразитьРаспределение();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//// Обязательные измерения из разряда дополнительных.
	//Для каждого КлючИЗначение Из фКэшЗначений.НастройкиИзмерений Цикл
	//
	//	ИмяИзмерения = "РаспределенныеОбороты." + КлючИЗначение.Ключ;
	//	Настройка    = КлючИЗначение.Значение;
	//	
	//	Если Настройка.Обязательное Тогда  			
	//		ПроверяемыеРеквизиты.Добавить(ИмяИзмерения);		
	//	КонецЕсли; 
	//
	//КонецЦикла; 
	//
	//Для каждого СтрокаТаблицы ИЗ Объект.РаспределенныеОбороты Цикл
	//
	//	Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 Тогда
	//		
	//		ТекстСообщения =  НСтр("ru = 'В строке №%1% табличной части ""Данные бюджета"" не заполнены ни сумма ни количество!'");
	//		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.НомерСтроки);
	//		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	//		Отказ = Истина;
	//	
	//	КонецЕсли; 
	//
	//КонецЦикла; 
	//
	//бит_Бюджетирование.ПроверитьОбязательныеРазрезыСтатейОборотов(РеквизитФормыВЗначение("Объект") , "РаспределенныеОбороты", Отказ, фКэшЗначений.НастройкиИзмерений);
	ПроверяемыеРеквизиты.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Сохранить изменения движений?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОборотыПоБюджетам

&НаКлиенте
Процедура ОборотыПоБюджетамПриАктивизацииСтроки(Элемент)
	
	Если ЭтаФорма.АктивизацияСтрокиТЧ Тогда 
		ЭтаФорма.АктивизацияСтрокиТЧ = Ложь;
	Иначе 
		ОтобразитьРаспределение();
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоБюджетамПередУдалением(Элемент, Отказ)
	
	КлючПоиска = Новый Структура("КлючСтроки" , Элементы.РаспределенныеОбороты.ОтборСтрок.КлючСтроки);
	
	НайденныеСтроки = Объект.РаспределенныеОбороты.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Объект.РаспределенныеОбороты.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоБюджетамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда

		Кандидат = ПоискПоТабличнойЧасти();
		
		Элементы.ОборотыПоБюджетам.ТекущиеДанные.КлючСтроки = Кандидат;
		
		ОтобразитьРаспределение();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоБюджетамПослеУдаления(Элемент)
	
	ОтобразитьРаспределение();

КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоБюджетамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьПредупреждение(,Нстр("ru = 'Редактирование выполняется в таблице ""Распределение""'"),,НСтр("ru = 'Корретировка факта'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыПоБюджетамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределенныеОбороты

&НаКлиенте
Процедура РаспределенныеОборотыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаВладелец = Элементы.ОборотыПоБюджетам.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.КлючСтроки = Элементы.РаспределенныеОбороты.ОтборСтрок.КлючСтроки;
		ТекущиеДанные.Активность = СтрокаВладелец.Активность;
		ТекущиеДанные.Валюта 	 = СтрокаВладелец.Валюта;
	КонецЕсли; 
	
	Если НоваяСтрока И НЕ Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, 
				фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		// Установка параметров выбора.
		СтруктураОтбора = Новый Структура("Владелец", ТекущиеДанные.Контрагент);
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.РаспределенныеОборотыДоговорКонтрагента, СтруктураОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеОборотыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;
	ИзменениеСуммыТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор(), "Сумма", "", Объект.Регистратор, Объект.Сценарий);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеОборотыСуммаСценарийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;
	ИзменениеСуммыТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор(), "СуммаСценарий", "", Объект.Регистратор, Объект.Сценарий);

КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеОборотыСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;

	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	
	ИзменениеСтатьиОборотовТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеОборотыАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "РаспределенныеОбороты", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
														  	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // РаспределенныеОборотыАналитика_НачалоВыбора()

&НаКлиенте
Процедура РаспределенныеОборотыАналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "РаспределенныеОбороты", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
														  	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,фКэшЗначений.НастройкиИзмерений);

КонецПроцедуры // РаспределенныеОборотыАналитика_АвтоПодбор()

&НаКлиенте
Процедура РаспределенныеОборотыАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "РаспределенныеОбороты", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
																		   	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // БДДСАналитика_Очистка()

&НаКлиенте
Процедура РаспределенныеОборотыПередУдалением(Элемент, Отказ)
	
	НайденныеСтроки = Объект.РаспределенныеОбороты.НайтиСтроки(Новый Структура("КлючСтроки", Элемент.ОтборСтрок.КлючСтроки));
	Если НайденныеСтроки.Количество() = 1 Тогда
		ТекстСообщенияПользователю = НСтр("ru = 'Удаление всех строк не поддерживается.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю, , , , Отказ); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеОборотыКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;
	
	бит_РаботаСДиалогамиСервер.ПроверитьВладельцаДоговораКонтрагентаВСтроке(ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
								  		
		// Установка параметров выбора.
		СтруктураОтбора = Новый Структура("Владелец", ТекущиеДанные.Контрагент);
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.РаспределенныеОборотыДоговорКонтрагента, СтруктураОтбора);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеОборотыДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;
		
	бит_РаботаСДиалогамиСервер.ИзменениеДоговораКонтрагента(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеОборотыДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
								  		
		// Установка параметров выбора.
		СтруктураОтбора = Новый Структура("Владелец", ТекущиеДанные.Контрагент);
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеОборотыБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные;
	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка);	

КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеОборотыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Отказ = Ложь;
	ПеренестиВДокументНаСервере(Отказ);
	Если Отказ Тогда
	     Возврат;
	КонецЕсли; 
	 
	Закрыть(Новый Структура("Успех, АдресХранилища", Истина, АдресХранилища));
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоПериодам_СтрокаРаспределения(Команда)
	
	ТекущиеДанные = Элементы.РаспределенныеОбороты.ТекущиеДанные; 	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Вид"	  , ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоПериодам"));
		ПараметрыФормы.Вставить("Сценарий", ТекущиеДанные.Сценарий);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТекИД_Распр"	 , ТекущиеДанные.ПолучитьИдентификатор());
		ОповещениеРСП = Новый ОписаниеОповещения("РаспределитьЗавершение", ЭтотОбъект, ДопПараметры);
		РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОткрытьФорму("Обработка.бит_РаспределениеБюджетныхДанныхПоПрофилю.Форма.Форма", ПараметрыФормы,ЭтотОбъект,,,, ОповещениеРСП, РежимОкна);
		          	
	Иначе	
		ТекстСообщения =  НСтр("ru = 'Не выбрана строка для распределения.'");
		ПоказатьПредупреждение(,ТекстСообщения,,Нстр("ru = 'Распределение'")); 
	КонецЕсли;
	
КонецПроцедуры // РаспределитьПоПериодам_СтрокаРаспределения()

&НаКлиенте
Процедура РаспределитьПоАналитикам_СтрокаРаспределения(Команда)
		
	ТекущиеДанные  = Элементы.РаспределенныеОбороты.ТекущиеДанные;
	ТекущийЭлемент = Элементы.РаспределенныеОбороты.ТекущийЭлемент;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущийЭлемент <> Неопределено Тогда
			
			// Имя аналитики, по которой нужно выполнить распределение пробуем получить из выделенной колонки таблицы.
			ИмяКолонки = ПолучитьИмяАналитики(ТекущийЭлемент, ТекущиеДанные);
			Если НЕ ЗначениеЗаполнено(ИмяКолонки) Тогда
				// Имя колонки не подходит для распределения по аналитике.
				Возврат;			
			КонецЕсли;
						
			// Проверки для имени колонки-аналитики, по которой будет открыта форма распределения.
			ТекущееЗначение = ?(ЗначениеЗаполнено(ИмяКолонки), ТекущиеДанные[ИмяКолонки], Неопределено);
						
		КонецЕсли;
		
		// Открытие формы распределения данных
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Вид"	  		 , ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоАналитике"));
		ПараметрыФормы.Вставить("Сценарий"		 , ТекущиеДанные.Сценарий);
		ПараметрыФормы.Вставить("ИмяКолонки"	 , ИмяКолонки);
		ПараметрыФормы.Вставить("ТекущееЗначение", ТекущееЗначение);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТекИД_Распр"	 , ТекущиеДанные.ПолучитьИдентификатор());
		ОповещениеРСА = Новый ОписаниеОповещения("РаспределитьЗавершение", ЭтотОбъект, ДопПараметры);
		РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОткрытьФорму("Обработка.бит_РаспределениеБюджетныхДанныхПоПрофилю.Форма.Форма", ПараметрыФормы,ЭтаФорма,,,, ОповещениеРСА, РежимОкна);
		          	
	Иначе	
		ТекстСообщения =  НСтр("ru = 'Не выбрана строка для распределения.'");
		ПоказатьПредупреждение(,ТекстСообщения,,Нстр("ru = 'Распределение'")); 
	КонецЕсли;
	
КонецПроцедуры // РаспределитьПоАналитикам_СтрокаРаспределения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
			
	// Данные по дополнительным аналитикам
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
		
	// Параметры, используемые для управления автовидимостью колонок.
	фКэшЗначений.Вставить("НастройкаВидимостиКолонок", Новый Структура);
	фКэшЗначений.Вставить("МассивСтатей_ОборотыПоБюджетам"		 , Новый Массив);
	фКэшЗначений.Вставить("МассивСтатей_РаспределенныеОбороты"		 , Новый Массив);
			
	МассивНередактируемыхЭлементовФормы = Новый Массив;
	фКэшЗначений.Вставить("МассивНередактируемыхЭлементовФормы", МассивНередактируемыхЭлементовФормы);
	
	МассивИменСумм = Новый Массив;
	МассивИменСумм.Добавить("СуммаСценарий");
	МассивИменСумм.Добавить("СуммаРегл");
	МассивИменСумм.Добавить("СуммаУпр");
	фКэшЗначений.Вставить("СтруктураДопПолей", Новый Структура("Учет_Сумма", МассивИменСумм));
	  
	// Произвольные измерения
	фКэшЗначений.Вставить("Измерения"         , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере 
Процедура ЗагрузитьТаблицыВОбработку(Таблицы, Отказ)
	
	Объект.Регистратор  = Таблицы.Регистратор;
	МетаданныеДокумента = Объект.Регистратор.Метаданные();
    
    // Движения по регистру "Обороты по бюджетам".
	Объект.ОборотыПоБюджетам.Загрузить(Таблицы.ОборотыПоБюджетам);
	Элементы.ОборотыПоБюджетам.ТекущаяСтрока = Таблицы.ТекущаяСтрока;
    
	// Массив строк ТЧ "ОборотыПоБюджетам". 
	МассивСтрок = Новый Массив(); 
	Для каждого СтрокаТаблицы Из Объект.ОборотыПоБюджетам Цикл
	    МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла; 
			
	Объект.СоответствиеЗаписейТрансляции.Загрузить(Таблицы.СоответствиеЗаписейТрансляции);  

	// Из набора "ОборотыПоБюджетам" отбираем строки, на которые есть ссылки в наборе "СоответствиеЗаписейТрансляции" 
	// по условиям отбора "Приемник", избавляясь от зависимых оборотов. 
	Отбор = Новый Структура();
	Отбор.Вставить("Приемник", бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам));
    НайденныеСтроки = Объект.СоответствиеЗаписейТрансляции.НайтиСтроки(Отбор); 	

	// Проверка на превышения номера строки приемника РС "СоответствиеЗаписейТрансляции" 
	// количества строк набора "ОборотыПоБюджетам".
	ВГраница = 0;
	Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		ВГраница = Макс(ВГраница, СтрокаТаблицы.НомерСтрокиПриемника);
	КонецЦикла; 
	
	Если ВГраница > Объект.ОборотыПоБюджетам.Количество() Тогда
	
		ВызватьИсключение 
		Нстр("ru = 'Максимальный номер строки приемника (Обороты по бюджетам) в регистре сведений ""Соотвествие записей трансляции""
					|превышает количество строк в таблице ""Обороты по бюджетам"".
					|Скорректируйте данные регистра ""Соотвествие записей трансляции""'");
	
	КонецЕсли; 
	
	// Исключаем из массива строк строки, полученные трансляцией, устанавливаем новый указатель в  соотв. записей.
	Сч = 1;
	Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		Запись = Объект.ОборотыПоБюджетам.Получить(СтрокаТаблицы.НомерСтрокиПриемника - 1); //Получаем по индексу!!!
		Если НЕ Запись = Неопределено Тогда
			
			МассивСтрок.Удалить(МассивСтрок.Найти(Запись));
			 
			Запись.КлючСтроки = Сч;
			Сч = Сч + 1;
			
			Копия = Объект.РаспределенныеОбороты.Добавить();
			ЗаполнитьЗначенияСвойств(Копия, Запись);

			Запись.НомерСтрокиИсточника = СтрокаТаблицы.НомерСтрокиИсточника;  
			Запись.Источник             = СтрокаТаблицы.Источник;

			Объект.СоответствиеЗаписейТрансляции.Удалить(Объект.СоответствиеЗаписейТрансляции.Индекс(СтрокаТаблицы));
		КонецЕсли; 
	КонецЦикла; 
	
	// Удаляем строки зависимых оборотов
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
	    Объект.ОборотыПоБюджетам.Удалить(Объект.ОборотыПоБюджетам.Индекс(СтрокаТаблицы));
	КонецЦикла; 
	
	// Сценарий определяется по первой строке оборотов
    Если Объект.ОборотыПоБюджетам.Количество() = 0 Тогда
	     ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет фактических данных доступных для редактирования'"),,,,Отказ);
	КонецЕсли; 

    // Валюта.
    Если бит_РаботаСМетаданными.ЕстьРеквизит("ВалютаДокумента", МетаданныеДокумента) Тогда
		Объект.ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Регистратор, "ВалютаДокумента");
    ИначеЕсли бит_РаботаСМетаданными.ЕстьРеквизит("ВалютаВзаиморасчетов", МетаданныеДокумента) Тогда
        Объект.ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Регистратор, "ВалютаВзаиморасчетов");
    ИначеЕсли НЕ Отказ Тогда
        Объект.ВалютаДокумента = Объект.ОборотыПоБюджетам[0].Валюта;
    КонецЕсли;
    
	Если НЕ Отказ Тогда
		Объект.Сценарий = Объект.ОборотыПоБюджетам[0].Сценарий;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
		РеквизитыСценарий = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Сценарий, "Валюта, ИспользоватьКурсыСценария");
		Если РеквизитыСценарий.ИспользоватьКурсыСценария Тогда
		     ВалютаСценария = РеквизитыСценарий.Валюта;
		Иначе	
		     ВалютаСценария = Объект.ВалютаДокумента;
		КонецЕсли; 
	КонецЕсли; 
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУпр  = Константы.бит_ВалютаУправленческогоУчета.Получить();
	
КонецПроцедуры // ЗагрузитьТаблицыВОбработку(Таблицы)
 
&НаСервере
Процедура ПеренестиВДокументНаСервере(Отказ)

	Отказ = НЕ ПроверитьЗаполнение();
	Если Отказ Тогда
	    Возврат;
	КонецЕсли; 
	
	Таблицы = Новый Структура;
	
	// Копирование исторических данных
	Для каждого СтрокаТаблицы Из Объект.РаспределенныеОбороты Цикл
	    СтрокаТаблицы.Сценарий = Объект.Сценарий;
		
		СтрокаВладелец = Объект.ОборотыПоБюджетам.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки))[0];
		СтрокаТаблицы.НомерСтрокиИсточника = СтрокаВладелец.НомерСтрокиИсточника; 
		СтрокаТаблицы.Источник             = СтрокаВладелец.Источник;  
		СтрокаТаблицы.Организация          = СтрокаВладелец.Организация;
	КонецЦикла; 
	
	// Соотвестив записей трансляции
	ПодготовитьСоответствиеЗаписейТрансляции(Таблицы);
	
	НаборЗаписей = РегистрыНакопления.бит_ОборотыПоБюджетам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Объект.Регистратор);
	НаборЗаписей.Загрузить(Объект.РаспределенныеОбороты.Выгрузить());
	
	Таблицы.Вставить("ОборотыПоБюджетам", НаборЗаписей);
	ЗаполнитьЗависимыеОбороты(Таблицы);
	
	ПоместитьВоВременноеХранилище(Таблицы, АдресХранилища);

	Модифицированность = Ложь;
	
КонецПроцедуры // ПеренестиВДокументНаСервере()

&НаСервере 
Процедура ПодготовитьСоответствиеЗаписейТрансляции(Таблицы)

	РНОборотыПоБюджетам = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам);
	Сч = 1;
	Для каждого СтрокаТаблицы Из Объект.РаспределенныеОбороты Цикл
	
		НоваяСтрока = Объект.СоответствиеЗаписейТрансляции.Добавить();
		НоваяСтрока.Источник    = СтрокаТаблицы.Источник;
		НоваяСтрока.Приемник    = РНОборотыПоБюджетам;
		НоваяСтрока.Организация = СтрокаТаблицы.Организация;
		НоваяСтрока.НомерСтрокиИсточника = СтрокаТаблицы.НомерСтрокиИсточника;
	    НоваяСтрока.НомерСтрокиПриемника = Сч;
		Сч = Сч + 1;
	КонецЦикла; 
	
	НаборЗаписей = РегистрыСведений.бит_СоответствиеЗаписейТрансляции.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Объект.Регистратор);
	НаборЗаписей.Загрузить(Объект.СоответствиеЗаписейТрансляции.Выгрузить());
	
	Таблицы.Вставить("СоответствиеЗаписейТрансляции", НаборЗаписей);

КонецПроцедуры // ПодготовитьСоответствиеЗаписейТрансляции()

&НаКлиенте
Процедура ОтобразитьРаспределение()
	
	СтрокаТаблицы =  Элементы.ОборотыПоБюджетам.ТекущиеДанные;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		// Включаем отбор по ключу из текущей строки табличной части "СоставКосвенныхРасходов".
		ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", СтрокаТаблицы.КлючСтроки); 
			
		Элементы.РаспределенныеОбороты.ТолькоПросмотр = Ложь;
		Элементы.РаспределенныеОбороты.ОтборСтрок 	   = ОтборСтрок;
						
	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		Элементы.РаспределенныеОбороты.ТолькоПросмотр = Истина;
		Если Объект.ОборотыПоБюджетам.Количество() = 0 Тогда
			Объект.РаспределенныеОбороты.Очистить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция ПоискПоТабличнойЧасти()
	
	// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей "РаспределенныеОбороты"
	// Значение должно быть уникальным в пределах таблицы ОборотыПоБюджетам.
	НеУстановлено = Истина;
	Кандидат = Объект.ОборотыПоБюджетам.Количество();
	
	Пока НеУстановлено Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КлючСтроки", Кандидат);
		
		Если НЕ ЗначениеЗаполнено(Объект.ОборотыПоБюджетам.НайтиСтроки(ПараметрыОтбора)) Тогда
			
			НеУстановлено = Ложь;
			
			Возврат Кандидат
		Иначе
			// Такое значение ключа уже использовано
			Кандидат = Кандидат + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ИзменениеСуммыТабличнойЧасти(ДаныеСтроки, Префикс, Постфикс, Регистратор, Сценарий)
	
	ВыполнитьВалютныеПересчетыВСтроке(Объект.РаспределенныеОбороты.НайтиПоИдентификатору(ДаныеСтроки), Префикс, Постфикс, Регистратор, Сценарий);
			
КонецПроцедуры

&НаСервере
Процедура ВыполнитьВалютныеПересчетыВСтроке(ТекущиеДанные, Префикс, Постфикс, Регистратор, Сценарий)

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
    СтруктураКурсыВалют = ПолучитьСтруктуруКурсовВалютСценария(Регистратор, Сценарий, ТекущиеДанные.Валюта, 
								ТекущиеДанные.Период, Новый Структура("Документ, Регл, Упр, Сценарий"));

	Если Сценарий.ИспользоватьКурсыСценария Тогда
		СтруктураКурсыСценарий = СтруктураКурсыВалют.Сценарий;
  	Иначе	
  		СтруктураКурсыСценарий = СтруктураКурсыВалют.Документ;
	КонецЕсли;
	СтруктураКурсыРегл = СтруктураКурсыВалют["Регл"];
	СтруктураКурсыУпр  = СтруктураКурсыВалют["Упр"];
	СтруктураКурсыВал  = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанные.Валюта, ТекущиеДанные.Период);
		
	ИмяРеквизитаИсточник = Префикс + Постфикс;
	           	
	Если Префикс = "СуммаСценарий" Тогда
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "Сумма" + Постфикс	, ИмяРеквизитаИсточник, СтруктураКурсыСценарий, СтруктураКурсыВал);
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "СуммаРегл" + Постфикс, ИмяРеквизитаИсточник, СтруктураКурсыСценарий, СтруктураКурсыРегл);	
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "СуммаУпр" + Постфикс , ИмяРеквизитаИсточник, СтруктураКурсыСценарий, СтруктураКурсыУпр);
	ИначеЕсли Префикс = "Сумма" Тогда	
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "СуммаСценарий" + Постфикс, ИмяРеквизитаИсточник, СтруктураКурсыВал, СтруктураКурсыСценарий);
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "СуммаРегл" + Постфикс	, ИмяРеквизитаИсточник, СтруктураКурсыВал, СтруктураКурсыРегл);	
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "СуммаУпр" + Постфикс	 	, ИмяРеквизитаИсточник, СтруктураКурсыВал, СтруктураКурсыУпр);
	КонецЕсли;   	
  	      
КонецПроцедуры // ВыполнитьВалютныеПересчетыВСтроке()

// Взято из "бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария" и адаптированно.    
// 
&НаСервереБезКонтекста  
Функция ПолучитьСтруктуруКурсовВалютСценария(ТекущийДокумент, Сценарий, ВалютаДокумента, ДатаКурсов, ВидыКурсов = Неопределено) Экспорт

	СтруктураКурсыВалют = Новый Структура;
	
	МетаданныеДокумента = ТекущийДокумент.Метаданные();
	
	// Курс документа
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Документ") Тогда
        
        СтрКурса = Новый Структура;
                    
		Если бит_РаботаСМетаданными.ЕстьРеквизит("КурсДокумента", МетаданныеДокумента)
			И бит_РаботаСМетаданными.ЕстьРеквизит("КратностьДокумента", МетаданныеДокумента) Тогда
            
            СтрКурса.Вставить("Валюта"   , ВалютаДокумента);
			СтрКурса.Вставить("Курс"     , ТекущийДокумент.КурсДокумента);
			СтрКурса.Вставить("Кратность", ТекущийДокумент.КратностьДокумента);
			            
        ИначеЕсли бит_РаботаСМетаданными.ЕстьРеквизит("КурсВзаиморасчетов", МетаданныеДокумента)
				И бит_РаботаСМетаданными.ЕстьРеквизит("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда				
                
            РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокумент, "ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
            СтрКурса.Вставить("Валюта"   , РеквизитыДокумента.ВалютаДокумента);
            СтрКурса.Вставить("Курс"     , РеквизитыДокумента.КурсВзаиморасчетов);
            СтрКурса.Вставить("Кратность", РеквизитыДокумента.КратностьВзаиморасчетов);
                        
        Иначе
            
            СтрКурса.Вставить("Валюта"   , ВалютаДокумента);
            СтрКурсаПроводки = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурсов);
            СтрКурса.Вставить("Курс"     , СтрКурсаПроводки.Курс);
            СтрКурса.Вставить("Кратность", СтрКурсаПроводки.Кратность);                      
            
        КонецЕсли; 
        
        СтруктураКурсыВалют.Вставить("Документ", СтрКурса); 
		
	КонецЕсли; 
	
	// Курс упр. учета
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Упр") Тогда	
		
		Валюта = Константы.бит_ВалютаУправленческогоУчета.Получить();
		
		СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, Валюта, ДатаКурсов);
		СтрКурса.Вставить("Валюта", Валюта);
		СтруктураКурсыВалют.Вставить("Упр", СтрКурса);
		
	КонецЕсли;
	
	// Курс сценария
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Сценарий") Тогда
		
		Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Валюта");
		
		СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, Валюта, ДатаКурсов);
		СтрКурса.Вставить("Валюта", Валюта);
		СтруктураКурсыВалют.Вставить("Сценарий", СтрКурса);
		
	КонецЕсли;
	
	// Валюта регламентированного учета
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Регл") Тогда
		
		СтрКурса = Новый Структура;
		СтрКурса.Вставить("Курс"	 , 1);
		СтрКурса.Вставить("Кратность", 1);
		СтрКурса.Вставить("Валюта"	 , Константы.ВалютаРегламентированногоУчета.Получить());
		СтруктураКурсыВалют.Вставить("Регл", СтрКурса);
	
	КонецЕсли;
	
    Возврат СтруктураКурсыВалют;
	
КонецФункции

&НаСервере
Процедура ПересчитатьИзВалютыВВалюту(ТекущиеДанные, ИмяРеквизита, ИмяРеквизитаИсточник, СтруктураКурсыНач, СтруктураКурсыКон)

	ТекущиеДанные[ИмяРеквизита] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущиеДанные[ИмяРеквизитаИсточник]
    																			, СтруктураКурсыНач.Валюта
    																			, СтруктураКурсыКон.Валюта
    																			, СтруктураКурсыНач.Курс
    																			, СтруктураКурсыКон.Курс
    																			, СтруктураКурсыНач.Кратность
    																			, СтруктураКурсыКон.Кратность);
	

КонецПроцедуры
 
&НаСервере
Процедура ОФормитьТаблицу(СтатьяОборотов = Неопределено, ПрефиксТаблицы="ОборотыПоБюджетам") 

	// Оформление реквизитов строк по статьям оборотов
	
	УдалитьСтароеОформление = Ложь;
	ПрефиксКонтейнера = "Объект.";
	
	Если СтатьяОборотов = Неопределено Тогда
	
		УдалитьСтароеОформление = Истина;
	
		// Формирование массива статей, по которым нужно добавить элементы УО.
		ТаблицаПоиска = Объект[ПрефиксТаблицы].Выгрузить();
		МассивСтатей = ТаблицаПоиска.ВыгрузитьКолонку("СтатьяОборотов");
		
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		
		ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].ЗагрузитьЗначения(МассивСтатей);
		
	Иначе // Работаем только с одной статьей оборотов		
		
		МассивСтатей = Новый Массив; 		
		
		НайденноеЗначение = ЭтаФорма["фСписокСтатей" + ПрефиксТаблицы].НайтиПоЗначению(СтатьяОборотов);
		Если НайденноеЗначение = Неопределено Тогда	
			
			МассивСтатей.Добавить(СтатьяОборотов);
			ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].Добавить(СтатьяОборотов);		
			
		КонецЕсли;  		
		
	КонецЕсли;	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОтметитьОбязательныеРазрезыСтатей", Истина);
	
	бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление, МассивСтатей, 
			УдалитьСтароеОформление, ПрефиксКонтейнера, ПрефиксТаблицы, "", фКэшЗначений.СтруктураДопПолей,,ДопПараметры);
	
КонецПроцедуры // ОФормитьТаблицу()
 
&НаСервере 
Процедура ЗаполнитьЗависимыеОбороты(Таблицы) 
	
	Организация = Справочники.Организации.ПустаяСсылка();
	Приемники   = Новый Массив(); 
	Приемники.Добавить(бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам));
	
	Реквизиты = "Дата";
	Если бит_ОбщегоНазначения.ЕстьРеквизит("Организация", Объект.Регистратор.Метаданные()) Тогда
		Реквизиты 		   = Реквизиты + ", Организация";
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Регистратор, Реквизиты);
		Организация = РеквизитыДокумента.Организация;
		Дата        = РеквизитыДокумента.Дата;
	иначе
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Регистратор, Реквизиты);
		Дата        = РеквизитыДокумента.Дата;
	КонецЕсли; 
	
	РезультатЗапроса = бит_МеханизмТрансляции.ПолучитьДоступныеПравилаТрансляцииПереопределяемый(Организация, Объект.Регистратор, Дата, Неопределено,Приемники);
	Выборка          = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПравилоЗаполнения.ФормироватьЗависимыеОбороты Тогда
			бит_Бюджетирование.СформироватьЗависимыеОборотыПоНаборуЗаписей(Объект, Таблицы.ОборотыПоБюджетам);
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьЗависимыеОбороты()

// Процедура обрабатывает изменение реквизита "СтатьяОборотов" в табличной части "БДДС".
// 
// Параметры:
//  ТекИд - Число
// 
&НаСервере
Процедура ИзменениеСтатьиОборотовТабличнойЧасти(ТекИд)
	
	ТекущиеДанные = Объект.РаспределенныеОбороты.НайтиПоИдентификатору(ТекИд);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СтавкаНДС = ТекущиеДанные.СтатьяОборотов.СтавкаНДС;
	
	НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(ТекущиеДанные.СтатьяОборотов);	
	
	Если Не НастройкиСтатьи.Учет_Количество Тогда
		
		ТекущиеДанные.Количество = 0;
		
	КонецЕсли;
	
	Если Не НастройкиСтатьи.Учет_Сумма Тогда
		
		ТекущиеДанные.СуммаСценарий 		= 0;
		ТекущиеДанные.СуммаРегл 			= 0;
		ТекущиеДанные.СуммаУпр 				= 0;
		ТекущиеДанные.Сумма 				= 0;
		
	КонецЕсли;
	
	бит_Бюджетирование.УстановитьИспользованиеАналитики(ТекущиеДанные, НастройкиСтатьи, фКэшЗначений.Измерения);
	
	ОФормитьТаблицу(ТекущиеДанные.СтатьяОборотов);		
	
КонецПроцедуры // ИзменениеСтатьиОборотовТабличнойЧасти()

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		ПеренестиВДокументНаСервере(Отказ);
		Если НЕ Отказ Тогда
			Модифицированность = Ложь;
			Закрыть(Новый Структура("Успех, АдресХранилища", Истина, АдресХранилища));
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ИтогиСумма         = 0;
	Форма.ИтогиСуммаРегл     = 0;
	Форма.ИтогиСуммаСценария = 0;
	Форма.ИтогиСуммаУпр      = 0;
	
	НайденныеСтроки = Объект.РаспределенныеОбороты.НайтиСтроки(Новый Структура("КлючСтроки", Элементы.РаспределенныеОбороты.ОтборСтрок.КлючСтроки));
	Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
		Форма.ИтогиСумма         = Форма.ИтогиСумма         + СтрокаТаблицы.Сумма;
		Форма.ИтогиСуммаРегл     = Форма.ИтогиСуммаРегл     + СтрокаТаблицы.СуммаРегл;
		Форма.ИтогиСуммаСценария = Форма.ИтогиСуммаСценария + СтрокаТаблицы.СуммаСценарий;
		Форма.ИтогиСуммаУпр      = Форма.ИтогиСуммаУпр      + СтрокаТаблицы.СуммаУпр;
		
	КонецЦикла; 

КонецПроцедуры // ОбновитьИтоги()

// Функция проверки учета по аналитике для статьи оборотов
//
// Параметры:
//  ИмяКолонки  	  - Строка.
//  ТекСтатьяОборотов - СправочникСсылка.бит_СтатьиОборотов.
//  
// Возвращаемое значение:
//   Тип.Вид   - описание.
//
&НаСервереБезКонтекста
Функция ЕстьУчетДляСтатьиОборотов(ИмяКолонки, ТекСтатьяОборотов)

	Результат = Ложь;
	
	ИмяРеквизитаУчета = "Учет_" + ИмяКолонки;
	
	Если ИмяКолонки = "ЦФО" Тогда 
		Результат = Истина;
	ИначеЕсли ТекСтатьяОборотов.Метаданные().Реквизиты.Найти(ИмяРеквизитаУчета) <> Неопределено Тогда 
		Результат = ТекСтатьяОборотов[ИмяРеквизитаУчета];
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ЕстьУчетДляСтатьиОборотов()

// Функция получает имя поля таблицы, на котором стоит указатель
//
// Параметры:
//  ТекущийЭлемент  - ТаблицаФормы.
//  
// Возвращаемое значение:
//   Строка.
//
&НаКлиенте
Функция ПолучитьИмяАналитики(ТекущийЭлемент, ТекущиеДанные)

	ИмяКолонки = "";
	ЗаголовокСообщения = "ru = 'Распределение'";
	
	Если ТекущийЭлемент.Имя <> "РаспределенныеОбороты" Тогда
		ТекстСообщения =  НСтр("ru = 'Выберите строку в таблице и аналитику, по которой надо распределить данные.'");
		ПоказатьПредупреждение(,ТекстСообщения,,ЗаголовокСообщения); 
		Возврат Неопределено;
	КонецЕсли;
	
	// Определение поля, на котором стоит указатель
	ТекущееПоле = ТекущийЭлемент.ТекущийЭлемент;
	Если ТекущееПоле = Неопределено Тогда
		ТекстСообщения =  НСтр("ru = 'Выберите аналитику, по которой надо распределить данные.'");
		ПоказатьПредупреждение(,ТекстСообщения,,ЗаголовокСообщения); 
		Возврат Неопределено;
	КонецЕсли;

	// Исключения
	Исключения = Новый Массив;
	Исключения.Добавить("НомерСтроки");
	Исключения.Добавить("Период");
	Исключения.Добавить("СтавкаНДС");
	Исключения.Добавить("СуммаСценарий");
	Исключения.Добавить("СуммаРегл");
	Исключения.Добавить("СуммаУпр");
	Исключения.Добавить("Сумма");
	
	// По ЦФО и статье оборотов можно выполнять распределение.
	Разрешенные = Новый Массив;
	Разрешенные.Добавить("ЦФО");
	Разрешенные.Добавить("СтатьяОборотов");
	
	// Имя поля
	ИмяКолонки = СтрЗаменить(ТекущееПоле.Имя, "РаспределенныеОбороты", ""); 	
	
	Если Разрешенные.Найти(ИмяКолонки) = Неопределено Тогда 
	
		// Проверки для имени колонки-аналитики, по которой будет открыта форма распределения.  	
		Если Исключения.Найти(ИмяКолонки) <> Неопределено Тогда 		
			ТекстСообщения = НСтр("ru = 'По колонке %1 распределение не предусмотрено.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяКолонки);
			ПоказатьПредупреждение(,ТекстСообщения,,ЗаголовокСообщения); 
			Возврат Неопределено;
		КонецЕсли; 
		
		// Если статья не заполнена, то нельзя проверить ведется ли учет по аналитике.
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяОборотов) Тогда 	
			ТекстСообщения =  НСтр("ru = 'В выбранной строке не заполнена статья оборотов.'");
			ПоказатьПредупреждение(,ТекстСообщения,,ЗаголовокСообщения); 	
		    Возврат Неопределено;                		
		КонецЕсли;
		
		// Если по статье не ведется учет по данной аналитике - распределение невозможно.
		Если НЕ ЕстьУчетДляСтатьиОборотов(ИмяКолонки, ТекущиеДанные.СтатьяОборотов) Тогда
			ТекстСообщения =  НСтр("ru = 'Для статьи %1 учет по аналитике %2 не ведется.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущиеДанные.СтатьяОборотов, ИмяКолонки);
			ПоказатьПредупреждение(,ТекстСообщения,,ЗаголовокСообщения); 
			Возврат Неопределено;   		 
		КонецЕсли;
	
	КонецЕсли;
		
	Возврат ИмяКолонки;
	
КонецФункции // ПолучитьИмяАналитики() 

// Процедура выполняет распределение по настройкам, полученным из  обработки бит_РаспределениеБюджетныхДанныхПоПрофилю.
//
// Параметры:
//  НастройкиРаспределения - Струтура
//  ТекИД_Распр 		   - Число (Идентификатор строки распределения, которую нужно распределить).
//
&НаСервере
Процедура ВыполнитьРаспределениеПоПрофилю(НастройкиРаспределения, ТекИД_Распр)
		
	СтрОб = Объект.РаспределенныеОбороты.НайтиПоИдентификатору(ТекИД_Распр);	
	Если СтрОб <> Неопределено Тогда
		
		МассивРесурсов = Новый Массив;
		МассивРесурсов.Добавить("Сумма");
		МассивРесурсов.Добавить("СуммаСценарий");
		МассивРесурсов.Добавить("СуммаРегл");
		МассивРесурсов.Добавить("СуммаУпр");
		МассивРесурсов.Добавить("Количество");
		
		бит_Бюджетирование.РаспределитьПоПрофилюАналитики(НастройкиРаспределения, Объект.РаспределенныеОбороты, СтрОб, МассивРесурсов);
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьРаспределениеПоПрофилю()

// Процедура обработчик оповещения "РаспределитьПоПериодамЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура РаспределитьЗавершение(НастройкиРаспределения, ДополнительныеДанные) Экспорт

	Если ТипЗнч(НастройкиРаспределения) = Тип("Структура") Тогда
		
		ВыполнитьРаспределениеПоПрофилю(НастройкиРаспределения, ДополнительныеДанные.ТекИД_Распр)
			
	КонецЕсли; 
	
КонецПроцедуры // РаспределитьЗавершение

#КонецОбласти
