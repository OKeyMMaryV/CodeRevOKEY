
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_му_НастройкиРасчетаОтложенныхНалогов;
	// Вызов механизма защиты
	
	
	ЗаполнитьКэшЗначений();
	
	ОбновлятьАвтоматически = Истина;
	
	СчетчикИдГруппы = 0;
	ИдГруппы 		= 0;
	
	Период = ТекущаяДата();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДерево();
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "Период".
// 
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Если ОбновлятьАвтоматически Тогда
		ОбновитьДерево();
	КонецЕсли;
	
КонецПроцедуры // ПериодПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ОбновлятьАвтоматически Тогда
		ОбновитьДерево();
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревонастроек

// Процедура - обработчик события "НачалоВыбора" поля ввода "ВидАктивовОбязательств" 
// табличного поля "ДеревоНастроек".
// 
&НаКлиенте
Процедура ДеревоНастроекВидАктивовОбязательствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
		 	
	Отбор = Новый Структура("Родитель", ТекущиеДанные.Группа);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ТекущийЭлемент", ТекущиеДанные.ВидАктивовОбязательств);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.бит_му_ВидыАктивовОбязательств.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры // ДеревоНастроекВидАктивовОбязательствНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИсточникДанных" 
// табличного поля "ДеревоНастроек".
// 
&НаКлиенте
Процедура ДеревоНастроекИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	ИсточникДанных = ТекущиеДанные.ИсточникДанных;
	 	
	Отбор = Новый Структура("ТипИсточника", фКэшЗначений.ТипОтложенныеНалогиМСФО);
	
	//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов	 
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТипНастройки) Тогда
		Сообщить("Сначала выберите тип настройки!");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипНастройки = ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза") Тогда
		Отбор = Новый Структура("ТипИсточника", фКэшЗначений.ТипОтложенныеНалогиМСФО);
	Иначе
		Отбор = Новый Структура("ТипИсточника", фКэшЗначений.СписокДополнительныхТиповМСФО);
	КонецЕсли;
	//bit Amerkulov 20.11.2014 -- Расчет отложенных налогов
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ТекущийЭлемент", ИсточникДанных);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.бит_ИсточникиДанных.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры // ДеревоНастроекИсточникДанныхНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля "ИсточникДанных" 
// табличного поля "ДеревоНастроек".
// 
&НаКлиенте
Процедура ДеревоНастроекИсточникДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураДанных = ПолучитьСтруктуруИзменяемыхДанных(ТекущиеДанные); 
		ЗафиксироватьИзменения(СтруктураДанных);
	
		ТекущиеДанные.Изменено = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры // ДеревоНастроекИсточникДанныхПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "Кроме" 
// табличного поля "ДеревоНастроек".
// 
&НаКлиенте
Процедура ДеревоНастроекКромеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураДанных = ПолучитьСтруктуруИзменяемыхДанных(ТекущиеДанные); 
		ЗафиксироватьИзменения(СтруктураДанных);
	
		ТекущиеДанные.Изменено = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры // ДеревоНастроекКромеПриИзменении()

// Процедура - обработчик события "ПередУдалением" 
// табличного поля "ДеревоНастроек".
// 
&НаКлиенте
Процедура ДеревоНастроекПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.ИсточникДанных = фКэшЗначений.ПустойИсточник;
		
		СтруктураДанных = ПолучитьСтруктуруИзменяемыхДанных(ТекущиеДанные);
		ЗафиксироватьИзменения(СтруктураДанных);
	
		ТекущиеДанные.Изменено = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоНастроекПередУдалением()

// Процедура - обработчик события "ПередНачаломДобавления" 
// табличного поля "ДеревоНастроек".
// 
&НаКлиенте
Процедура ДеревоНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда // Копирование
			
		Отказ = Истина;
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И  Не ТекущиеДанные.ЭтоГруппа Тогда 
   			
			// Добавляем новую строку дерева
			СтрокаДерева 	   = ДобавитьСтрокуДерева(ТекущиеДанные);
			
			// Заполняем строку дерева
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Элемент.ТекущиеДанные);
			СтрокаДерева.ИсточникДанных  = фКэшЗначений.ПустойИсточник;
			СтрокаДерева.ТекущийИсточник = фКэшЗначений.ПустойИсточник;
			
			//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов	
			СтрокаДерева.ИсточникДанныхДляВычета  = фКэшЗначений.ПустойИсточник;
			СтрокаДерева.ТекущийИсточникДляВычета = фКэшЗначений.ПустойИсточник;
			//bit Amerkulov 20.11.2014 -- Расчет отложенных налогов
		КонецЕсли; 
		
	Иначе // Добавление
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Отказ = Истина;
			
			// Добавляем новую строку дерева
			СтрокаДерева 	   = ДобавитьСтрокуДерева(ТекущиеДанные);			
			
		КонецЕсли;
	
	КонецЕсли; 
	
	Элементы.ДеревоНастроек.Обновить();
	
КонецПроцедуры // ДеревоНастроекПередНачаломДобавления()

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "ДеревоНастроек".
// 
&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ДеревоНастроекПередНачаломИзменения()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события "Нажатие" команды "Обновить".
// 
&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДерево();
	
КонецПроцедуры // Обновить()

// Процедура - обработчик события "Нажатие" кнопки "Записать".
// 
&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьИзмененияВРегистр();
	
	УстановитьНеИзменено(ДеревоНастроек);
	
КонецПроцедуры // Записать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;

	фКэшЗначений.Вставить("ТипОтложенныеНалогиМСФО", Перечисления.бит_ТипыИсточниковДанных.ОтложенныеНалогиМСФО);
    фКэшЗначений.Вставить("ПустойИсточник", Справочники.бит_ИсточникиДанных.ПустаяСсылка());
	
	//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов
	СписокДополнительныхТиповМСФО = Новый СписокЗначений;
	СписокДополнительныхТиповМСФО.Добавить(Перечисления.бит_ТипыИсточниковДанных.бит_МСФО_ОтложенныеНалогиКорректировкиОборотыМУ);
	СписокДополнительныхТиповМСФО.Добавить(Перечисления.бит_ТипыИсточниковДанных.бит_МСФО_ОтложенныеНалогиКорректировкиОстаткиБУ);
	СписокДополнительныхТиповМСФО.Добавить(Перечисления.бит_ТипыИсточниковДанных.бит_МСФО_ОтложенныеНалогиКорректировкиОстаткиМУ);
	фКэшЗначений.Вставить("СписокДополнительныхТиповМСФО",СписокДополнительныхТиповМСФО);
	//bit Amerkulov 20.11.2014 -- Расчет отложенных налогов

КонецПроцедуры // ЗаполнитьКэшЗначений()

// Функция получает записи регистра сведений бит_му_НастройкиРасчетаОтложенныхНалогов.
// 
&НаСервере
Процедура ЗаполнитьДеревоНастроек()
	
	ТаблицаИзменений.Очистить();
	ДанныеДерева = ЭтаФорма.ДеревоНастроек.ПолучитьЭлементы();
	ДанныеДерева.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", 		Период);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов
	Запрос.УстановитьПараметр("ТипНастройки",ТипНастройки);
	//bit Amerkulov 20.11.2014 -- Расчет отложенных налогов
	//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов
	//bit Amerkulov 20.11.2014 -- Расчет отложенных налогов
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыАктивов.Ссылка КАК ВидАктивовОбязательств,
	               |	ВидыАктивов.ЭтоГруппа,
	               |	ВидыАктивов.Родитель КАК Группа,
	               |	Настройки.ИсточникДанных,
	               |	Настройки.ИсточникДанных КАК ТекущийИсточник,
	               |	Настройки.Период,
	               |	ВЫБОР
	               |		КОГДА Настройки.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.бит_ИсточникиДанных.ПустаяСсылка)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Кроме
				   //bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов
				   |	,Настройки.ВидАктивовОбязательствДляРекласса,
				   |	Настройки.ТипНастройки,
				   |	Настройки.ИсточникДанныхДляВычета,
				   |	Настройки.ИсточникДанныхДляВычета КАК ТекущийИсточникДанныхДляВычета
				   //bit Amerkulov 20.11.2014 -- Расчет отложенных налогов
	               |ИЗ
	               |	Справочник.бит_му_ВидыАктивовОбязательств КАК ВидыАктивов
				   //bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов
				   //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НастройкиРасчетаОтложенныхНалогов.СрезПоследних(&Период, Организация = &Организация) КАК Настройки
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НастройкиРасчетаОтложенныхНалогов.СрезПоследних(&Период, Организация = &Организация" + ?(ЗначениеЗаполнено(ТипНастройки)," И ТипНастройки = &ТипНастройки ", "") + ") КАК Настройки
				   //bit Amerkulov 20.11.2014 -- Расчет отложенных налогов
	               |		ПО ВидыАктивов.Ссылка = Настройки.ВидАктивовОбязательств
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидыАктивов.Ссылка ИЕРАРХИЯ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	НомерСтроки = 0;
	ДобавитьУровень(Выборка, ДеревоНастроек, НомерСтроки);
	
	КоличествоСтрок = КоличествоСтрок + НомерСтроки;
	
	Элементы.ДеревоНастроек.НачальноеОтображениеДерева    = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецПроцедуры // ПроверитьВозможностьЗаписи()

// Процедура заполняет значениями строку дерева.
// 
// Параметры:
//  Выборка  - Выборка из результата запроса.
//  Строка   - ДанныеФормыДерево.
// 
&НаСервере
Функция ДобавитьУровень(ВыборкаУзел, Строка, НомерСтроки, УменьшитьИдГрупп = Ложь)
	
	Пока ВыборкаУзел.Следующий() Цикл
			
		ЭтоГруппа = ВыборкаУзел.ЭтоГруппа;
		
		КоллекцияЭлементов = Строка.ПолучитьЭлементы();

	    ЭлементДерева = КоллекцияЭлементов.Добавить();
	    ЗаполнитьЗначенияСвойств(ЭлементДерева, ВыборкаУзел);
		
		Если ЭтоГруппа Тогда
			ИдГруппы = СчетчикИд;
			ЭлементДерева.ИдГруппы = ИдГруппы;
		Иначе
		    ЭлементДерева.ИдГруппы = ИдГруппы;
		КонецЕсли;
		СчетчикИд = СчетчикИд + 1;
		
		ЭлементДерева.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		// Картинка группы или элемента
		Если ЭлементДерева.ВидАктивовОбязательств.ЭтоГруппа Тогда
			ЭлементДерева.Картинка = БиблиотекаКартинок.бит_Казна_Папка;
		Иначе
			ЭлементДерева.Картинка = БиблиотекаКартинок.бит_Реквизит;
		КонецЕсли; 
		
		// Вывод подуровней
		Выборка = ВыборкаУзел.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	    ДобавитьУровень(Выборка, ЭлементДерева, НомерСтроки, ЭтоГруппа);
					
	КонецЦикла;
		
	Если УменьшитьИдГрупп Тогда
		
		ИдГруппы = ИдГруппы - 1;	
	
	КонецЕсли;
    		
КонецФункции // ДобавитьУровень()

// Процедура фиксирует изменение прав пользователя в таблице изменений.
// 
// Параметры:
//  СтруктураДанных    - Структура.
// 
&НаСервере
Процедура ЗафиксироватьИзменения(СтруктураДанных)

	СтрокаСуществует = Ложь;
	
	мТаблицаИзменений = ДанныеФормыВЗначение(ТаблицаИзменений, Тип("ТаблицаЗначений")); 
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидАктивовОбязательств", СтруктураДанных.ВидАктивовОбязательств);
	//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов	
	Отбор.Вставить("ВидАктивовОбязательствДляРекласса", СтруктураДанных.ВидАктивовОбязательств);
	Отбор.Вставить("ТипНастройки", СтруктураДанных.ВидАктивовОбязательств);
	//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов
	СписокСтрок = мТаблицаИзменений.НайтиСтроки(Отбор);
	Для каждого Строка Из СписокСтрок Цикл
		Если Строка.ТекущийИсточник = СтруктураДанных.ТекущийИсточник Тогда
			Строка.ИсточникДанных   = СтруктураДанных.ИсточникДанных;
			Строка.Период 			= СтруктураДанных.Период;
			Строка.Кроме			= СтруктураДанных.Кроме;
			СтрокаСуществует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если Не СтрокаСуществует Тогда
		СтрокаИзменений = мТаблицаИзменений.Добавить();
		//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов	
		СтрокаИзменений.ИсточникДанныхДляВычета 	= СтруктураДанных.ИсточникДанныхДляВычета;
		СтрокаИзменений.ТекущийИсточникДляВычета  	= СтруктураДанных.ТекущийИсточникДляВычета;
		СтрокаИзменений.ВидАктивовОбязательствДляРекласса  	= СтруктураДанных.ВидАктивовОбязательствДляРекласса;
		СтрокаИзменений.ТипНастройки  				= СтруктураДанных.ТипНастройки;		
		//bit Amerkulov 20.11.2014 -- Расчет отложенных налогов
		СтрокаИзменений.ВидАктивовОбязательств = СтруктураДанных.ВидАктивовОбязательств;
		СтрокаИзменений.ТекущийИсточник 	   = СтруктураДанных.ТекущийИсточник;
		СтрокаИзменений.ИсточникДанных 		   = СтруктураДанных.ИсточникДанных;
		СтрокаИзменений.Кроме				   = СтруктураДанных.Кроме;
		СтрокаИзменений.Период 				   = ?(ЗначениеЗаполнено(СтруктураДанных.Период), 
													СтруктураДанных.Период,
													Период);
	КонецЕсли; 
	
	ЗначениеВДанныеФормы(мТаблицаИзменений, ТаблицаИзменений);
   	
КонецПроцедуры // ЗафиксироватьИзменения()

// Процедура записывает установленные права
// в регистр сведений бит_НастройкиДополнительныхПравПользователей.
// 
&НаСервере
Процедура ЗаписатьИзмененияВРегистр()

	Если Не ЗначениеЗаполнено(Период) Тогда
		ТекстСообщения = Нстр("ru = 'Период не может быть пустым'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	мТаблицаИзменений = ДанныеФормыВЗначение(ТаблицаИзменений, Тип("ТаблицаЗначений")); 

	Для каждого Строка Из мТаблицаИзменений Цикл
		
		МенеджерЗаписи = РегистрыСведений.бит_му_НастройкиРасчетаОтложенныхНалогов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период   	 		  = Строка.Период;
		МенеджерЗаписи.Организация   		  = Организация;
		МенеджерЗаписи.ВидАктивовОбязательств = Строка.ВидАктивовОбязательств;
		МенеджерЗаписи.ИсточникДанных 		  = Строка.ТекущийИсточник;
		//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов	
		МенеджерЗаписи.ИсточникДанныхДляВычета 	= Строка.ТекущийИсточникДляВычета;
		МенеджерЗаписи.ВидАктивовОбязательствДляРекласса  	= Строка.ВидАктивовОбязательствДляРекласса;
		МенеджерЗаписи.ТипНастройки  				= Строка.ТипНастройки;		
		//bit Amerkulov 20.11.2014 -- Расчет отложенных налогов
		МенеджерЗаписи.Удалить();
		
		Если ЗначениеЗаполнено(Строка.ИсточникДанных) ИЛИ Строка.Кроме Тогда
			МенеджерЗаписи = РегистрыСведений.бит_му_НастройкиРасчетаОтложенныхНалогов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период   	 		  = ?(ЗначениеЗаполнено(Строка.Период), 
													Строка.Период, 
													НачалоМесяца(Период));
			МенеджерЗаписи.Организация   		  = Организация;
			МенеджерЗаписи.ВидАктивовОбязательств = Строка.ВидАктивовОбязательств;
			МенеджерЗаписи.ИсточникДанных   	  = Строка.ИсточникДанных;
			//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов	
			МенеджерЗаписи.ИсточникДанныхДляВычета 	= Строка.ИсточникДанныхДляВычета;
			МенеджерЗаписи.ВидАктивовОбязательствДляРекласса  	= Строка.ВидАктивовОбязательствДляРекласса;
			МенеджерЗаписи.ТипНастройки  				= Строка.ТипНастройки;		
			//bit Amerkulov 20.11.2014 -- Расчет отложенных налогов
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Строка.ТекущийИсточник = Строка.ИсточникДанных;
		//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов	
		Строка.ТекущийИсточникДляВычета = Строка.ИсточникДанныхДляВычета;
		//bit Amerkulov 20.11.2014 -- Расчет отложенных налогов
  					
	КонецЦикла; 
	
	мТаблицаИзменений.Очистить();
	ЗначениеВДанныеФормы(мТаблицаИзменений, ТаблицаИзменений);

КонецПроцедуры // ЗаписатьИзмененияВРегистр()

// Процедура обновляет дерево настроек
// 
&НаКлиенте
Процедура ОбновитьДерево()
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Возврат;
	КонецЕсли;
	
	КоличствоПредыдущее = КоличествоСтрок;
	
	ЗаполнитьДеревоНастроек();
	
	// Раскрываем все уровни
	КоличествоВерхнихСтрок = ЭтаФорма.ДеревоНастроек.ПолучитьЭлементы().Количество();
	Для i = 0 По (КоличествоВерхнихСтрок - 1) Цикл
		
		СтрокаДерева = ЭтаФорма.ДеревоНастроек.ПолучитьЭлементы()[i];
		Элементы.ДеревоНастроек.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
			
	КонецЦикла;
	
КонецПроцедуры // ОбновитьДерево()

// Процедура сбрасывает все значения элемента "Изменено" таблицы значений в Ложь.
// 
// Параметры:
//  СтрокаДерева  - Данные формы Дерево.
// 
&НаКлиенте
Процедура УстановитьНеИзменено(СтрокаДерева)

	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементов Цикл  
		
		Строка.Изменено = Ложь;
				
		УстановитьНеИзменено(Строка);
		
	КонецЦикла; 	

КонецПроцедуры // УстановитьНеИзменено()

// Функция добавляет строку дерева в нужную группу.
// 
// Параметры:
//  ТекущиеДанные  - Текущие данные табличного поля ДеревоНастроек.
//  
// Возвращаемое значение:
//   Строка дерева значений.
// 
&НаКлиенте
Функция ДобавитьСтрокуДерева(ТекущиеДанные)
	
	ИдГруппы 	 = ТекущиеДанные.ИдГруппы;
	Группа		 = ТекущиеДанные.Группа;
	Если ЗначениеЗаполнено(ТекущиеДанные.Группа) Тогда
		СтрокаГруппы = ДеревоНастроек.НайтиПоИдентификатору(ИдГруппы);
		КоллекцияЭлементов = СтрокаГруппы.ПолучитьЭлементы();
	Иначе	
	    КоллекцияЭлементов = ДеревоНастроек.ПолучитьЭлементы();
	КонецЕсли;
	 
	
	// Добавляем новую строку дерева
	СтрокаДерева 	   = КоллекцияЭлементов.Добавить();
	СтрокаДерева.ИдГруппы = ИдГруппы;
	СтрокаДерева.Группа   = Группа;
	СтрокаДерева.Картинка = БиблиотекаКартинок.бит_Реквизит;
	СтрокаДерева.Изменено = Истина;
	
	СчетчикИд 		= СчетчикИд + 1;
	КоличествоСтрок = КоличествоСтрок + 1;
			
	Возврат СтрокаДерева;
	
КонецФункции // ДобавитьСтрокуДерева()

// Функция заполняет структуру изменяемой строки.
// 
// Параметры:
//  ТекущиеДанные  - ТекущиеДанные
// Возвращаемое значение:
//  Структура.
// 
&НаКлиенте
Функция ПолучитьСтруктуруИзменяемыхДанных(ТекущиеДанные)

	СтруктураДанных = Новый Структура("ВидАктивовОбязательств, ИсточникДанных, ТекущийИсточник, Период, Кроме", 
										ТекущиеДанные.ВидАктивовОбязательств, 
										ТекущиеДанные.ИсточникДанных, 
										ТекущиеДанные.ТекущийИсточник,
										ТекущиеДанные.Период,
										ТекущиеДанные.Кроме);	

	//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов
	СтруктураДанных.Вставить("ВидАктивовОбязательствДляРекласса", ТекущиеДанные.ВидАктивовОбязательствДляРекласса);
	СтруктураДанных.Вставить("ТипНастройки", ТипНастройки);
	СтруктураДанных.Вставить("ИсточникДанныхДляВычета", ТекущиеДанные.ИсточникДанныхДляВычета);
	СтруктураДанных.Вставить("ТекущийИсточникДляВычета", ТекущиеДанные.ТекущийИсточникДляВычета);
	//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов
	
	Возврат СтруктураДанных; 
	
КонецФункции // ПолучитьСтруктуруИзменяемыхДанных()
									
#КонецОбласти

//bit Amerkulov 20.11.2014 ++ Расчет отложенных налогов
&НаКлиенте
Процедура ДеревоНастроекВидАктивовОбязательствДляРеклассаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущаяСтрока.ТипНастройки <> ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.БалансовыеКорректировки") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекВидАктивовОбязательствДляРеклассаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущаяСтрока.ТипНастройки <> ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.БалансовыеКорректировки") Тогда
		ТекущаяСтрока.ВидАктивовОбязательствДляРекласса = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекТипНастройкиПриИзменении(Элемент)
	
	
	ТекущаяСтрока = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущаяСтрока.ТипНастройки <> ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.БалансовыеКорректировки") Тогда
		ТекущаяСтрока.ВидАктивовОбязательствДляРекласса = Неопределено;
	КонецЕсли;
	
	Если ТекущаяСтрока.ТипНастройки = ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза") Тогда
		ТекущаяСтрока.ИсточникДанныхДляВычета = Неопределено;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекИсточникДанныхДляВычетаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущаяСтрока.ТипНастройки = ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза") Тогда
		ТекущаяСтрока.ИсточникДанныхДляВычета = Неопределено;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекИсточникДанныхДляВычетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущаяСтрока.ТипНастройки = ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ТипНастройки) Тогда
		Сообщить("Сначала выберите тип настройки!");
		СтандартнаяОбработка = Ложь;		
		Возврат;
	КонецЕсли;

	
	СтандартнаяОбработка = Ложь;	
	
	Отбор = Новый Структура("ТипИсточника", фКэшЗначений.СписокДополнительныхТиповМСФО);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ТекущийЭлемент",  ТекущаяСтрока.ИсточникДанныхДляВычета);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
	ОткрытьФормуМодально("Справочник.бит_ИсточникиДанных.Форма.ФормаВыбораУправляемая", ПараметрыФормы, Элемент);
		
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипНастройкиПриИзменении(Элемент)
	Если ОбновлятьАвтоматически Тогда
		ОбновитьДерево();
	КонецЕсли;
КонецПроцедуры
