
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	 
	
	Элементы.ФормаСформироватьЗнРДС.Доступность = Ложь;
	
	КоличествоДокументовВТранзакции 	= 1;
	Объект.Дата 						= ТекущаяДата();
	Объект.ПроизводственныйКалендарь 	= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_КалендарьОплат");
	
	ОбновитьНастройкиНаСервере();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МакетОтборов = ОбработкаОбъект.ПолучитьМакет("СКД_ДанныеДляЗаполненияЗаявок");
	
	ПолеНД_Организация = МакетОтборов.НаборыДанных.НаборДанных1.Поля.Найти("Организация");
	Если ПолеНД_Организация <> Неопределено Тогда
		
		СписокДоступныхОрганизаций = Обработки.ок_ФормированиеЗнРДС.ПолучитьСписокДоступныхОрганизаций();
		ПолеНД_Организация.УстановитьДоступныеЗначения(СписокДоступныхОрганизаций);
	
	КонецЕсли; 
													 
	НастройкиОтборов = МакетОтборов.НастройкиПоУмолчанию;
  
    АдресСхемы = ПоместитьВоВременноеХранилище(МакетОтборов, УникальныйИдентификатор);
    Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтборов);
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиОтборов);
	Объект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	УстановитьНастройкиПоУмолчанию();
	
	//Список выбора даты расхода
	ДанныеПроизводственногоКалендаря_ТекущийГод = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(Объект.ПроизводственныйКалендарь, Год(Объект.Дата));
	ДанныеПроизводственногоКалендаря_СледующийГод = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(Объект.ПроизводственныйКалендарь, Год(Объект.Дата) + 1);
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ВидДня", ПредопределенноеЗначение("Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий"));
	
	НайденныеСтроки = ДанныеПроизводственногоКалендаря_ТекущийГод.НайтиСтроки(ПараметрыОтбора);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если НайденнаяСтрока.Дата <= Объект.Дата Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		//Если Элементы.ДатаРасхода.СписокВыбора.Количество() >= 10 Тогда
		//	Прервать;
		//КонецЕсли;
		
		Элементы.ДатаРасхода.СписокВыбора.Добавить(НайденнаяСтрока.Дата);
	
	КонецЦикла; 
	
	НайденныеСтроки = ДанныеПроизводственногоКалендаря_СледующийГод.НайтиСтроки(ПараметрыОтбора);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		//Если Элементы.ДатаРасхода.СписокВыбора.Количество() >= 10 Тогда
		//	Прервать;
		//КонецЕсли;
		
		Элементы.ДатаРасхода.СписокВыбора.Добавить(НайденнаяСтрока.Дата);
	
	КонецЦикла; 
	
	Объект.ДатаРасхода = ?(Элементы.ДатаРасхода.СписокВыбора.Количество() > 0, Элементы.ДатаРасхода.СписокВыбора[0].Значение, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаРасходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) Тогда
	
		Объект.ПроизводственныйКалендарь = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_КалендарьОплат");
	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) Тогда
		Сообщить("Календарь оформления оплат не задан в РС ""Настройки казначейства"".");
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ТекущаяДата", Объект.Дата);
	СтруктураПараметров.Вставить("ПроизводственныйКалендарь", Объект.ПроизводственныйКалендарь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииФормаВыбораРабочейДаты", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ок_ФормированиеЗнРДС.Форма.ФормаВыбораРабочейДаты",СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияОЗакрытииФормаВыбораРабочейДаты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
	
		Объект.ДатаРасхода = РезультатЗакрытия;
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-27 (#3758)
		ПересчитатьСуммуКОплатеДляУЕ();
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-27 (#3758)
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасходаПриИзменении(Элемент)
	
	Если Элементы.ДатаРасхода.СписокВыбора.НайтиПоЗначению(Объект.ДатаРасхода) = Неопределено Тогда
	
		Объект.ДатаРасхода = Неопределено;
		ПоказатьПредупреждение(,"Выберите рабочий день оплаты!");
		
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-27 (#3758)
	Иначе
		
		ПересчитатьСуммуКОплатеДляУЕ();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-27 (#3758)
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПоКонтрагентуПриИзменении(Элемент)

	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДанныеДляЗаполненияЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоля = СтрЗаменить(НРег(Поле.Имя), НРег("ДанныеДляЗаполненияЗаявок"),"");
	
	Если ИмяПоля = НРег("Выбран")
		ИЛИ ИмяПоля = НРег("СуммаКОплате") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Попытка
		
		Если ИмяПоля = НРег("ГиперссылкаСформированныеЗнРДС") Тогда

			ДанныеСтроки = Объект.ДанныеДляЗаполненияЗаявок.НайтиПоИдентификатору(ВыбраннаяСтрока);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("СформированныеЗнРДС", ДанныеСтроки.СформированныеЗнРДС);
			
			ОткрытьФорму("Обработка.ок_ФормированиеЗнРДС.Форма.ФормаГиперссылка", СтруктураПараметров,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ДанныеСтроки = Объект.ДанныеДляЗаполненияЗаявок.НайтиПоИдентификатору(ВыбраннаяСтрока);
			ПоказатьЗначение(, ДанныеСтроки[ИмяПоля]);
			
		КонецЕсли; 
	
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляЗаполненияЗаявокГиперссылкаСформированныеЗнРДСНажатие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеДляЗаполненияЗаявок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ГиперссылкаСформированныеЗнРДС <> ""
		И ТекущиеДанные.ГиперссылкаСформированныеЗнРДС <> "Нет сформированных ЗнРДС" Тогда
	
		ПоказатьЗначение(,ТекущиеДанные.СформированныеЗнРДС);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовВзаиморасчетовДляФормированияЗнРДСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора 	= Новый Структура("Ссылка", СписокСчетовВзаиморасчетовДляФормированияЗнРДС);
    ПараметрыОткрытия 	= Новый Структура("Отбор", ПараметрыОтбора);
    ОткрытьФорму("ПланСчетов.Хозрасчетный.ФормаСписка", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовПроверкиДЗНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора 	= Новый Структура("Ссылка", СписокСчетовПроверкиДЗ);
    ПараметрыОткрытия 	= Новый Структура("Отбор", ПараметрыОтбора);
    ОткрытьФорму("ПланСчетов.Хозрасчетный.ФормаСписка", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусыЗаявокДляИсключенийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора 	= Новый Структура("Ссылка", СтатусыЗаявокДляИсключений);
    ПараметрыОткрытия 	= Новый Структура("Отбор, Отображение", ПараметрыОтбора, ОтображениеТаблицы.Список);
    ОткрытьФорму("Справочник.бит_СтатусыОбъектов.ФормаСписка", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйКалендарьНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ВыполнитьПроверкуЗаполненностиОтборов() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДанныеДляЗаполненияЗаявок.Количество() > 0
		ИЛИ Объект.РеестрОшибок.Количество() > 0 Тогда
	
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_Заполнить", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Табличные части будут перезаполнены. Продолжить выполнение операции?", Режим, 0);
		
	Иначе
		
		ЗаполнитьНаСервере();
		Если Объект.ДанныеДляЗаполненияЗаявок.Количество() > 0 Тогда
			Элементы.ФормаСформироватьЗнРДС.Доступность = Истина;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса_Заполнить(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	ЗаполнитьНаСервере();
	Если Объект.ДанныеДляЗаполненияЗаявок.Количество() > 0 Тогда
		Элементы.ФормаСформироватьЗнРДС.Доступность = Истина;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗнРДС(Команда)
	
	Элементы.ФормаСформироватьЗнРДС.Доступность = Ложь;
	СформироватьЗнРДСНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПоУмолчанию()
	
	// Получим настройку по - умолчанию и последнюю использованную.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипНастройки"			  , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	СтруктураПараметров.Вставить("НастраиваемыйОбъект"    , "Обработка.ок_ФормированиеЗнРДС");
	СтруктураПараметров.Вставить("ИспользоватьПриОткрытии", Истина);
	СохрНастройка = Справочники.бит_СохраненныеНастройки.ПолучитьНастройкуПоУмолчанию(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		
		ПрименитьНастройкиЗавершениеНаСервере(СохрНастройка);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)

	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки" , ПолучитьНастройкиКД(Объект.КомпоновщикНастроек));
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", "Обработка.ок_ФормированиеЗнРДС");
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
	ОбновитьНастройкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)

	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", "Обработка.ок_ФормированиеЗнРДС");
    
    Оповещение = Новый ОписаниеОповещения("ПрименитьНастройкиЗавершение", ЭтаФорма);
    ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки",ПараметрыФормы,ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМетки(Команда)
	
	ИзменитьМетки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьМетки(Команда)
	
	ИзменитьМетки(Ложь);
	
КонецПроцедуры

&НаКлиенте 
Процедура ПрименитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройкиЗавершениеНаСервере(Результат);
		
	КонецЕсли;	
	
	ОбновитьНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере 
Процедура ПрименитьНастройкиЗавершениеНаСервере(Результат) Экспорт
	
	СтруктураНастроек = Результат.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СтруктураНастроек);
		Объект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	
	НастройкиПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПоУмолчаниюНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МакетОтборов = ОбработкаОбъект.ПолучитьМакет("СКД_ДанныеДляЗаполненияЗаявок");
	
	ПолеНД_Организация = МакетОтборов.НаборыДанных.НаборДанных1.Поля.Найти("Организация");
	Если ПолеНД_Организация <> Неопределено Тогда
		
		СписокДоступныхОрганизаций = Обработки.ок_ФормированиеЗнРДС.ПолучитьСписокДоступныхОрганизаций();
		ПолеНД_Организация.УстановитьДоступныеЗначения(СписокДоступныхОрганизаций);
	
	КонецЕсли; 
													 
	НастройкиОтборов = МакетОтборов.НастройкиПоУмолчанию;
  
    АдресСхемы = ПоместитьВоВременноеХранилище(МакетОтборов, УникальныйИдентификатор);
    Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтборов);
	      
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиОтборов);
	Объект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьНастройкиНаСервере()
	
	Объект.ПроизводственныйКалендарь 				= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_КалендарьОплат");
	КоличествоРабочихДнейИсполненияЗадачи 			= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_КоличествоРабочихДнейИсполненияЗадачи", 0);
	СписокСчетовВзаиморасчетовДляФормированияЗнРДС 	= Обработки.ок_ФормированиеЗнРДС.ПолучитьСписокСчетов();
	СписокСчетовПроверкиДЗ 							= Обработки.ок_ФормированиеЗнРДС.ПолучитьСписокСчетовДЗ();
	СтатусыЗаявокДляИсключений 						= Обработки.ок_ФормированиеЗнРДС.ПолучитьСтатусыЗаявокДляИсключений();
	СоздаватьЗаявкиНеПозднее 						= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_СоздаватьЗаявкиНеПозднее", Неопределено);
	СвойствоПриоритетаОплаты 						= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_СвойствоПриоритетаОплаты", Неопределено);
	РуководительГруппыУчета 						= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_РуководительГруппыУчета", Неопределено);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-14 (#3758)
	ВалютаРегламентированногоУчета 					= Константы.ВалютаРегламентированногоУчета.Получить();
	СтатьяБДДСДляПоступленияДенежныхДокументов		= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_СтатьяБДДСДляПоступленияДенежныхДокументов", Неопределено);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-14 (#3758)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("СКД_ДанныеДляЗаполненияЗаявок");
	
	Настройки = Объект.КомпоновщикНастроек.ПолучитьНастройки();
	
	Если Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")) <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"), Новый Граница(КонецДня(ТекущаяДата()), ВидГраницы.Включая));
	КонецЕсли;
	Если Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СписокСчетов")) <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СписокСчетов"), Обработки.ок_ФормированиеЗнРДС.ПолучитьСписокСчетов());
	КонецЕсли;
	Если Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СписокСчетовДЗ")) <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СписокСчетовДЗ"), Обработки.ок_ФормированиеЗнРДС.ПолучитьСписокСчетовДЗ());
	КонецЕсли;
	Если Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СтатусыЗаявокДляИсключений")) <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СтатусыЗаявокДляИсключений"), Обработки.ок_ФормированиеЗнРДС.ПолучитьСтатусыЗаявокДляИсключений());
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-14 (#3758)
	Если Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("АналитикаНомерЗаявки")) <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("АналитикаНомерЗаявки"), ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки"));
	КонецЕсли;
	Если Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипКонтрагента")) <> Неопределено Тогда
		СформированыДанныеПоВГО = ПредопределенноеЗначение("Перечисление.ок_ТипКонтрагента.ВГО") = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТипКонтрагента")).Значение;
	КонецЕсли;
	Если Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаРегламентированногоУчета")) <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВалютаРегламентированногоУчета"), ВалютаРегламентированногоУчета);
	КонецЕсли;
	Если Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРасхода")) <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРасхода"), Объект.ДатаРасхода);
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-14 (#3758)
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-12 (#НТП_МП_04)
	Если Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СписокИсключенийНаправленийДоговоров")) <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СписокИсключенийНаправленийДоговоров"), СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ИсключенияЗнРДС_СписокИсключенийНаправленийДоговоров", Неопределено));
	КонецЕсли;
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-12 (#НТП_МП_04)
	
	Для каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
	
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
		
			Если НЕ ЭлементОтбора.Использование
				ИЛИ НЕ ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ЭлементОтбора.ПравоеЗначение = СписокДоступныхОрганизаций;
			
			КонецЕсли; 
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Для каждого ЭлементСортировки Из Настройки.Порядок.Элементы Цикл
	
		Если ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Контрагент.Наименование") Тогда
			
			ЭлементСортировки.Использование = ?(СортировкаПоКонтрагенту = 0, Истина, Ложь);
			
		ИначеЕсли ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Контрагент.ИНН") Тогда
			
			//ЭлементСортировки.Использование = ?(СортировкаПоКонтрагенту = 0, Истина, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ОбработатьРезультат(Результат);
	
	ОбновитьНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультат(Результат);

	Объект.ДанныеДляЗаполненияЗаявок.Очистить();
	Объект.РеестрОшибок.Очистить();
	
	РезультатИтогиПоДоговору = Результат.Скопировать(,"Контрагент, ДоговорКонтрагента, СчетБУ, 
														//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-12-20 (#3589)
														|Организация, 
														//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-12-20 (#3589)
														//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-08-25 (#3758)
														|ВалютаВзаиморасчетов, 
														//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-08-25  (#3758)
														|СуммаОстаток, 
														|СуммаОстатокДт, 
														|СуммаОстатокКт,
														//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-14 (#3758)
														|СуммаОстатокКтВВалюте,
														//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-14 (#3758)
														|СуммаОстаток_ПоДоговору,
														|СуммаОстатокКт_ПоДоговору,
														//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-14 (#3758)
														|СуммаОстатокКтВВалюте_ПоДоговору,
														//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-14 (#3758)
														|СуммаОстаток_ПоКонтрагенту,
														|СуммаОстатокКт_ПоКонтрагенту,
														|СуммаСформированныхЗнРДС");
	
	РезультатИтогиПоДоговору.Свернуть("Контрагент, 
									|ДоговорКонтрагента,
									|СчетБУ,
									//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-12-20 (#3589)
									|Организация, 
									//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-12-20 (#3589)
									//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-08-25 (#3758)
									|ВалютаВзаиморасчетов, 
									//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-08-25  (#3758)
									|СуммаОстаток_ПоДоговору, 
									|СуммаОстатокКт_ПоДоговору, 
									//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-14 (#3758)
									|СуммаОстатокКтВВалюте_ПоДоговору,
									//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-14 (#3758)
									|СуммаОстаток_ПоКонтрагенту,
									|СуммаОстатокКт_ПоКонтрагенту,
									|СуммаСформированныхЗнРДС", 
														"СуммаОстаток, 
														|СуммаОстатокДт, 
														//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-14 (#3758)
														|СуммаОстатокКтВВалюте,
														//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-14 (#3758)
														|СуммаОстатокКт");
	
	РезультатИтогиПоКонтрагенту = РезультатИтогиПоДоговору.Скопировать(,"Контрагент, СчетБУ, 
														//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-12-20 (#3589)
														|Организация, 
														//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-12-20 (#3589)
														|СуммаОстаток, 
														|СуммаОстатокДт, 
														|СуммаОстатокКт,
														|СуммаОстаток_ПоДоговору,
														|СуммаОстатокКт_ПоДоговору, 
														|СуммаСформированныхЗнРДС");
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-12-20 (#3589)
	//РезультатИтогиПоКонтрагенту.Свернуть("Контрагент, СчетБУ", "СуммаОстаток, 
	РезультатИтогиПоКонтрагенту.Свернуть("Контрагент, 
										|СчетБУ,
										|Организация",
														"СуммаОстаток, 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-12-20 (#3589)													
														|СуммаОстатокДт, 
														|СуммаОстатокКт,
														|СуммаОстаток_ПоДоговору,
														|СуммаОстатокКт_ПоДоговору, 
														|СуммаСформированныхЗнРДС");
	
	Для каждого СтрокаТЗ Из Результат Цикл
		
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-06-11 (#НТП_МП_ФР04)
		// в нетиповых документах реквизита может не быть, исправляем ошибку
		докОтветственный = ?(Не ЗначениеЗаполнено(СтрокаТЗ.ДокументРасчетов) 
		                 Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЗ.ДокументРасчетов, "Ответственный"),
						 Неопределено,
						 СтрокаТЗ.ДокументРасчетов.Ответственный);
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-06-11  (#НТП_МП_ФР04)

		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-15 (#3758)
		РасчетыВУсловныхЕдиницах 	= СтрокаТЗ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
		СчетВалютный 				= СтрокаТЗ.СчетБУ.Валютный;
		ДоговорВалютный				= СтрокаТЗ.ДоговорКонтрагента.Валютный;
		
		ЭтоВалютнаяСтрока = ДоговорВалютный И СчетВалютный;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-15 (#3758)
		
		Ошибка = Ложь;
		//ОтрицательноеСальдоПоДокументуРасчетов
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-14 (#3758)
		Если НЕ ЭтоВалютнаяСтрока И СтрокаТЗ.СуммаОстатокКт < 0 
			ИЛИ ЭтоВалютнаяСтрока И СтрокаТЗ.СуммаОстатокКтВВалюте < 0 Тогда
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-14 (#3758)
		
			НоваяСтрока = Объект.РеестрОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Причина = Перечисления.ок_ПричиныОтказаСозданияЗнРДС.ОтрицательноеСальдоПоДокументуРасчетов;
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-06-11 (#НТП_МП_ФР04)
			//НоваяСтрока.Ответственный = ?(НоваяСтрока.ДокументРасчетов = Неопределено, Неопределено, НоваяСтрока.ДокументРасчетов.Ответственный);
			НоваяСтрока.Ответственный = докОтветственный;
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-06-11  (#НТП_МП_ФР04)
			
			Ошибка = Истина;
			
		КонецЕсли; 
		
		//СальдоПоДокументуБольшеЧемСальдоПоДоговору
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-14 (#3758)
		Если НЕ ЭтоВалютнаяСтрока И СтрокаТЗ.СуммаОстатокКт > СтрокаТЗ.СуммаОстатокКт_ПоДоговору
			ИЛИ ЭтоВалютнаяСтрока И СтрокаТЗ.СуммаОстатокКтВВалюте > СтрокаТЗ.СуммаОстатокКтВВалюте_ПоДоговору Тогда
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-14 (#3758)
		
			НоваяСтрока = Объект.РеестрОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Причина = Перечисления.ок_ПричиныОтказаСозданияЗнРДС.СальдоПоДокументуБольшеЧемСальдоПоДоговору;
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-06-11 (#НТП_МП_ФР04)
			//НоваяСтрока.Ответственный = ?(НоваяСтрока.ДокументРасчетов = Неопределено
			//								ИЛИ НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока.ДокументРасчетов, "Ответственный"), 
			//								Неопределено, 
			//								НоваяСтрока.ДокументРасчетов.Ответственный);
			НоваяСтрока.Ответственный = докОтветственный;
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-06-11  (#НТП_МП_ФР04)
			
			Ошибка = Истина;
			
		КонецЕсли; 
		
		//ПустоеЗначениеДокументаРасчетов
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ДокументРасчетов) Тогда
		
			НоваяСтрока = Объект.РеестрОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Причина = Перечисления.ок_ПричиныОтказаСозданияЗнРДС.ПустоеЗначениеДокументаРасчетов;
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-06-11 (#НТП_МП_ФР04)
			//НоваяСтрока.Ответственный = ?(НоваяСтрока.ДокументРасчетов = Неопределено, Неопределено, НоваяСтрока.ДокументРасчетов.Ответственный);
			НоваяСтрока.Ответственный = докОтветственный;
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-06-11  (#НТП_МП_ФР04)
			
			Ошибка = Истина;
			
		КонецЕсли; 
		
		Если Ошибка Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ДоговорКонтрагента", СтрокаТЗ.ДоговорКонтрагента);
		НайденныеСтрокиСОшибками = Объект.РеестрОшибок.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтрокиСОшибками.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = Объект.ДанныеДляЗаполненияЗаявок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
		НоваяСтрока.Выбран = Истина;
		НоваяСтрока.ДатаДокументаРасчетов 		= НоваяСтрока.ДокументРасчетов.Дата;
		НоваяСтрока.ВысокийПриоритетДляОплаты 	= УправлениеСвойствами.ЗначениеСвойства(НоваяСтрока.ДокументРасчетов, СвойствоПриоритетаОплаты);
		
		СтруктураОтбора_Контрагент = Новый Структура();
		СтруктураОтбора_Контрагент.Вставить("СчетБУ", НоваяСтрока.СчетБУ);
		СтруктураОтбора_Контрагент.Вставить("Контрагент", НоваяСтрока.Контрагент);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-12-20 (#3589)
		СтруктураОтбора_Контрагент.Вставить("Организация", НоваяСтрока.Организация);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-12-20 (#3589)
									
		СтруктураОтбора_Договор = Новый Структура();
		СтруктураОтбора_Договор.Вставить("СчетБУ", НоваяСтрока.СчетБУ);
		//СтруктураОтбора_Договор.Вставить("ДоговорКонтрагента", НоваяСтрока.ДоговорКонтрагента);
		СтруктураОтбора_Договор.Вставить("Контрагент", НоваяСтрока.Контрагент);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-12-20 (#3589)
		СтруктураОтбора_Договор.Вставить("Организация", НоваяСтрока.Организация);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-12-20 (#3589)
		
		СтрокиИтоговПоКонтрагенту 	= РезультатИтогиПоКонтрагенту.НайтиСтроки(СтруктураОтбора_Контрагент);
		СтрокаИтоговПоКонтрагенту	= ?(СтрокиИтоговПоКонтрагенту.Количество() = 0, Неопределено, СтрокиИтоговПоКонтрагенту[0]);
		СтрокиИтоговПоДоговору		= РезультатИтогиПоДоговору.НайтиСтроки(СтруктураОтбора_Договор);
		СтрокаИтоговПоДоговору		= ?(СтрокиИтоговПоДоговору.Количество() = 0, Неопределено, СтрокиИтоговПоДоговору[0]);
		
		НоваяСтрока.СуммаКт 					= СтрокаТЗ.СуммаОстатокКт;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-14 (#3758)
		НоваяСтрока.СуммаКтВВалюте				= СтрокаТЗ.СуммаОстатокКтВВалюте;
		Если ЭтоВалютнаяСтрока Тогда
			НоваяСтрока.СуммаКОплате = НоваяСтрока.СуммаКтВВалюте;
		Иначе
			НоваяСтрока.СуммаКОплате = НоваяСтрока.СуммаКт;
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-14 (#3758)
		НоваяСтрока.СвернутоеСальдо 			= (-1) * СтрокаТЗ.СуммаОстаток_ПоКонтрагенту;
		НоваяСтрока.СуммаСформированныхЗнРДС	= ?(СтрокаИтоговПоДоговору    = Неопределено, 0, СтрокаИтоговПоДоговору.СуммаСформированныхЗнРДС);
		НоваяСтрока.ДоступноеСальдо				= НоваяСтрока.СвернутоеСальдо - НоваяСтрока.СуммаСформированныхЗнРДС;
		
	КонецЦикла; 
	
	//Удаляем строки пропущенные при разборе
	ТаблицаДоговоровСОшибками = Объект.РеестрОшибок.Выгрузить(,"ДоговорКонтрагента");
	ТаблицаДоговоровСОшибками.Свернуть("ДоговорКонтрагента");
	МассивДоговоровСОшибками = ТаблицаДоговоровСОшибками.ВыгрузитьКолонку("ДоговорКонтрагента");
	
	Для каждого ДоговорСОшибками Из МассивДоговоровСОшибками Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ДоговорКонтрагента", ДоговорСОшибками);
		НайденныеСтрокиДляУдаления = Объект.ДанныеДляЗаполненияЗаявок.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаДляУдаления Из НайденныеСтрокиДляУдаления Цикл
			Объект.ДанныеДляЗаполненияЗаявок.Удалить(СтрокаДляУдаления);
		КонецЦикла; 
	
	КонецЦикла; 
	
	Обработки.ок_ФормированиеЗнРДС.ОбновитьНаличиеДЗ(Объект.ДанныеДляЗаполненияЗаявок);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗнРДСНаСервере()
	
	СтруктураПараметровЗаполнения = Новый Структура();
	СтруктураПараметровЗаполнения.Вставить("ДатаРасхода", 	Объект.ДатаРасхода);
	СтруктураПараметровЗаполнения.Вставить("ЭтоНеБК", 		Истина);
	
	пОшибки = "";
	//Обработки.ок_ФормированиеЗнРДС.
	Обработки.ок_ФормированиеЗнРДС.ФормированиеЗнРДСНеБК_ОбработатьДанныеДляЗаполненияЗаявок(Объект.ДанныеДляЗаполненияЗаявок, Объект.РеестрОшибок, СтруктураПараметровЗаполнения, пОшибки, КоличествоДокументовВТранзакции);
	Обработки.ок_ФормированиеЗнРДС.ФормированиеЗнРДС_ОбработатьРеестрОшибок(Объект.РеестрОшибок.Выгрузить());
	
	Для каждого СтрокаТЧ Из Объект.ДанныеДляЗаполненияЗаявок Цикл
	
		Если СтрокаТЧ.ГиперссылкаСформированныеЗнРДС <> ""
			И СтрокаТЧ.ГиперссылкаСформированныеЗнРДС <> "Нет сформированных ЗнРДС" Тогда
			СтрокаТЧ.Выбран = Ложь;
		КонецЕсли;
	
	КонецЦикла; 
	
	Если пОшибки <> "" Тогда
	
		Сообщить(пОшибки, СтатусСообщения.Внимание);
	
	КонецЕсли; 
	
	ОбновитьНастройкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМетки(Метка)
	
	Для каждого СтрокаТЧ Из Объект.ДанныеДляЗаполненияЗаявок Цикл
		
		Если СтрокаТЧ.ГиперссылкаСформированныеЗнРДС <> ""
			И СтрокаТЧ.ГиперссылкаСформированныеЗнРДС <> "Нет сформированных ЗнРДС" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.Выбран = Метка;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляЗаполненияЗаявокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиКД(КомпоновщикНастроек)
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

&НаКлиенте
Функция ВыполнитьПроверкуЗаполненностиОтборов()
	
	РезультатПроверки = Истина;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(Объект.КомпоновщикНастроек);
	
	Если СтруктураПараметров.Параметры.Свойство("ТипКонтрагента")
		И НЕ ЗначениеЗаполнено(СтруктураПараметров.Параметры.ТипКонтрагента) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""ТипКонтрагента"" не заполнено.");
		РезультатПроверки = Ложь;
		
	КонецЕсли; 
	
	Если СтруктураПараметров.Параметры.Свойство("ТипКонтрагента")
		И СтруктураПараметров.Отбор.Свойство("Контрагент")
		И ЗначениеЗаполнено(СтруктураПараметров.Параметры.ТипКонтрагента) Тогда
	
		МассивКонтрагентовВГО = ПолучитьМассивКонтрагентовВГО();
		
		Если ТипЗнч(СтруктураПараметров.Отбор.Контрагент) = Тип("СправочникСсылка.Контрагенты")
			И ЗначениеЗаполнено(СтруктураПараметров.Отбор.Контрагент) Тогда
			
			Если СтруктураПараметров.Параметры.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ок_ТипКонтрагента.ВГО") 
				И МассивКонтрагентовВГО.Найти(СтруктураПараметров.Отбор.Контрагент) = Неопределено Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранный контрагент """ + СтруктураПараметров.Отбор.Контрагент + """ не соответствует типу контрагента """ + СтруктураПараметров.Параметры.ТипКонтрагента + """.");
				РезультатПроверки = Ложь;
				
			ИначеЕсли СтруктураПараметров.Параметры.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ок_ТипКонтрагента.Прочие") 
				И МассивКонтрагентовВГО.Найти(СтруктураПараметров.Отбор.Контрагент) <> Неопределено Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранный контрагент """ + СтруктураПараметров.Отбор.Контрагент + """ не соответствует типу контрагента """ + СтруктураПараметров.Параметры.ТипКонтрагента + """.");
				РезультатПроверки = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтруктураПараметров.Отбор.Контрагент) = Тип("СписокЗначений")
			И СтруктураПараметров.Отбор.Контрагент.Количество() > 0 Тогда
			
			Для каждого ЭлементКонтрагент Из СтруктураПараметров.Отбор.Контрагент Цикл
			
				Если СтруктураПараметров.Параметры.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ок_ТипКонтрагента.ВГО") 
					И ЗначениеЗаполнено(ЭлементКонтрагент.Значение)
					И МассивКонтрагентовВГО.Найти(ЭлементКонтрагент.Значение) = Неопределено Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранный контрагент """ + ЭлементКонтрагент.Значение + """ не соответствует типу контрагента """ + СтруктураПараметров.Параметры.ТипКонтрагента + """.");
					РезультатПроверки = Ложь;
					
				ИначеЕсли СтруктураПараметров.Параметры.ТипКонтрагента = ПредопределенноеЗначение("Перечисление.ок_ТипКонтрагента.Прочие") 
					И ЗначениеЗаполнено(ЭлементКонтрагент.Значение)
					И МассивКонтрагентовВГО.Найти(ЭлементКонтрагент.Значение) <> Неопределено Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранный контрагент """ + ЭлементКонтрагент.Значение + """ не соответствует типу контрагента """ + СтруктураПараметров.Параметры.ТипКонтрагента + """.");
					РезультатПроверки = Ложь;
					
				КонецЕсли;
			
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПараметров(КомпоновщикНастроек)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Отбор",						Новый Структура());
	СтруктураПараметров.Вставить("Параметры",					Новый Структура());
	
	КН_Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	пОтбор = КН_Настройки.Отбор.Элементы;
	Для каждого ТекущийЭлементОтбора Из пОтбор Цикл
		
		Если ТекущийЭлементОтбора.Использование
			И ТипЗнч(ТекущийЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
			СтруктураПараметров.Отбор.Вставить(Строка(ТекущийЭлементОтбора.ЛевоеЗначение), ТекущийЭлементОтбора.ПравоеЗначение);
		
		КонецЕсли; 
		
	КонецЦикла;
	
	пПараметрыДанных = КН_Настройки.ПараметрыДанных.Элементы;
	Для каждого ТекущийЭлементПараметровДанных Из пПараметрыДанных Цикл
	
		Если ТекущийЭлементПараметровДанных.Использование
			И ТипЗнч(ТекущийЭлементПараметровДанных) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		
			СтруктураПараметров.Параметры.Вставить(Строка(ТекущийЭлементПараметровДанных.Параметр), ТекущийЭлементПараметровДанных.Значение);
		
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат СтруктураПараметров;
	
КонецФункции

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-27 (#3758)
&НаСервере
Процедура ПересчитатьСуммуКОплатеДляУЕ()
	
	Если НЕ Элементы.ФормаСформироватьЗнРДС.Доступность 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаРасхода) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("РасчетыВУсловныхЕдиницах", Истина);
	МассивВалют = Объект.ДанныеДляЗаполненияЗаявок.Выгрузить(ПараметрыОтбора,"Валюта");
	МассивВалют.Свернуть("Валюта");
	МассивВалют = МассивВалют.ВыгрузитьКолонку("Валюта");
	
	СоответствиеКурсовВалют = бит_КурсыВалют.ПолучитьСоответствиеКурсовВалютНаДату("КурсыВалют", МассивВалют, Объект.ДатаРасхода);
	
	НайденныеСтроки = Объект.ДанныеДляЗаполненияЗаявок.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		СтруктураКурса = СоответствиеКурсовВалют.Получить(НайденнаяСтрока.Валюта);
		
		Если СтруктураКурса = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		НайденнаяСтрока.СуммаКОплате = НайденнаяСтрока.СуммаКтВВалюте * СтруктураКурса.Курс / ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивКонтрагентовВГО()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобственныеКонтрагенты.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.бит_СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ
		|	НЕ СобственныеКонтрагенты.Контрагент.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	СобственныеКонтрагенты.Контрагент";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контрагент");
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-27 (#3758)

#КонецОбласти