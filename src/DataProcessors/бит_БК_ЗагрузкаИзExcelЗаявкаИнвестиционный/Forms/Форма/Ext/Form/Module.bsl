
&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Команда)
	
	ИдентификаторНазначения = ?(ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма"), ВладелецФормы.УникальныйИдентификатор, УникальныйИдентификатор);
	
	Отказ = Ложь;
		
	Если Не ЗначениеЗаполнено(Объект.ФайлИсточник) Тогда
		ТекстСообщения = "ru = 'Не заполнено значение реквизита ""Файл источник""!'";
		бит_ОбщегоНазначения.СообщитьОбОшибке(НСтр(ТекстСообщения), Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//ИнициализироватьИзФормы();
	
	ЭтаФорма.Закрыть(ЗагрузитьДанныеИзExcel());

КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект);
	СтруктураИмяФайла = Новый Структура("ИмяФайла","");
	// Зададим фильтр для диалога.
	ТекстФильтра = бит_ОбменДанными_Excel.ПолучитьФильтрДляВыбораФайлаExcel();
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(СтруктураИмяФайла,
	"ИмяФайла",
	Ложь,
	Новый Структура("Фильтр, ПроверятьСуществованиеФайла", ТекстФильтра, Истина),
	Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораФайла(ИмяФайла, ДополнительныеПараметры) Экспорт 
	
	Если ПустаяСтрока(ИмяФайла) тогда
		Возврат;
	КонецЕсли;	
	
	Объект.ФайлИсточник = ИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникОткрытие(Элемент, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;	
	ИмяФайла = СокрЛП(Объект.ФайлИсточник);
	ОткрытьФайл(ИмяФайла);
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(ИмяФайла)
    
    Если ПустаяСтрока(ИмяФайла) Тогда
        Возврат;
    КонецЕсли;
    
    ОткрываемыйФайл = Новый Файл(ИмяФайла);
    Если ОткрываемыйФайл.Существует() Тогда
        ЗапуститьПриложение(ИмяФайла);
    КонецЕсли;
  
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Сценарий", Сценарий);
	Параметры.Свойство("Дата", Дата);
	
	Объект.НомерЛиста = 1;
	
	//Здесь задаем параметры инициализации данных 1С и соответствие прочитанным из Excel колонкам
	СоответствиеКолонок = Новый Соответствие;
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","СтатьяОборотов", "Статья оборотов", Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов"),Справочники.бит_СтатьиОборотов.ПустаяСсылка(), "ИскатьПоКоду",,Истина);
	СоответствиеКолонок.Вставить("Колонка3",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","ЦФО", "Функция",Новый ОписаниеТипов("СправочникСсылка.Подразделения"),Справочники.Подразделения.ПустаяСсылка(), "ИскатьПоКоду",,Ложь);
	СоответствиеКолонок.Вставить("Колонка1",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Аналитика_2", "Объект",Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства"),Справочники.ОбъектыСтроительства.ПустаяСсылка(), "ИскатьПоКоду",,Ложь);
	СоответствиеКолонок.Вставить("Колонка2",Структура);
	//ОК Калинин М. 21092012 От Якимовой Л.  вновь приобретенная колонка «наименование  оборудования»
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","бит_БК_НаименованиеОборудования", "бит_БК_НаименованиеОборудования",Новый ОписаниеТипов("Строка"),,"НеИскать",,Ложь);
	СоответствиеКолонок.Вставить("Колонка4",Структура);
	//ОК Калинин М.
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Комментарий", "Комментарий",Новый ОписаниеТипов("Строка"),,"НеИскать",,Ложь);
	СоответствиеКолонок.Вставить("Колонка14",Структура);
	//Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Сценарий", "Сценарий",Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"),Справочники.СценарииПланирования.ПустаяСсылка(),"ИскатьПоРеквизиту","КодЗагрузкиИзExcel",Истина);
	//СоответствиеКолонок.Вставить("Колонка5",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","СтавкаНДС", "Ставка НДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"),Перечисления.СтавкиНДС.ПустаяСсылка(),"Вручную","",Ложь);
	СоответствиеКолонок.Вставить("Колонка12",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Период", "Период",Новый ОписаниеТипов("Дата"),,"Вручную","",Истина);
	СоответствиеКолонок.Вставить("БезКолонки1",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","бит_БК_Организация", "Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"),Справочники.Организации.ПустаяСсылка(),"Вручную","",Ложь);
	СоответствиеКолонок.Вставить("Колонка21",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","СуммаЗаполнения", "Сумма заполнения",Новый ОписаниеТипов("Число"),,"НеИскать","",Истина);
	СоответствиеКолонок.Вставить("Колонка9",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Сценарий", "Сценарий",Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"),Справочники.СценарииПланирования.ПустаяСсылка(),"Вручную","",Истина);
	СоответствиеКолонок.Вставить("БезКолонки2",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","бит_БК_ВалютаДоговора", "ВалютаДоговора",Новый ОписаниеТипов("СправочникСсылка.Валюты"),Справочники.Валюты.ПустаяСсылка(),"Вручную","",Ложь);
	СоответствиеКолонок.Вставить("Колонка11",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","бит_БК_Курс", "Кратность",Новый ОписаниеТипов("Число"),,"Вручную","",Ложь);
	СоответствиеКолонок.Вставить("БезКолонки3",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","бит_БК_Кратность", "Кратность",Новый ОписаниеТипов("Число"),,"Вручную","",Ложь);
	СоответствиеКолонок.Вставить("БезКолонки4",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","бит_БК_ПредпологаемыйКонтрагент", "ПредпологаемыйКонтрагент",Новый ОписаниеТипов("Строка"),,"НеИскать","",Ложь);
	СоответствиеКолонок.Вставить("Колонка5",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","бит_БК_СуммаПредоплаты", "СуммаПредоплаты",Новый ОписаниеТипов("Число"),,"НеИскать","",Ложь);
	СоответствиеКолонок.Вставить("Колонка13",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение, СообщатьОНезаполненом, УдалятьПриНезаполненом","бит_БК_ФормаОплаты", "Форма оплаты",Новый ОписаниеТипов("ПеречислениеСсылка.бит_ВидыДенежныхСредств"),Перечисления.бит_ВидыДенежныхСредств.ПустаяСсылка(),"ПолучатьИзПараметров","",Ложь,Ложь,Ложь);//БИТ АКриштопов 02062016
	СоответствиеКолонок.Вставить("Колонка14",Структура);

	//1 - ЦФО    - ЦФО
	//2 - Объект Строительства - Аналитика_2
	//3 - Статья - Статья оборотов
	//6 - Сумма без НДС
	//8 - Ставка НДС
	//10 - Месяц начисления(строкой) = Период
	//15 - № заявки = Номер документа
	//14 - Комментарий
	//9 - ЮрЛицо = наименование организации
	//18 - Инициатор = наименование спр. бит_Инициаторы
	//16 - Дата оформл. заявки = Дата документа
	
	АдресСоответствиеКолонок = ПоместитьВоВременноеХранилище(СоответствиеКолонок, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьДанныеИзExcel(СтруктураДанных = Неопределено) Экспорт
	
	Отказ = Ложь;
	//Если Данные уже прочитаны не создаем EXCEL
	Если СтруктураДанных = Неопределено Тогда 
		// Создадим приложение Excel.
		Excel = бит_БК_ОбщийКлиент.СоздатьПриложениеExcelКлиент(Отказ, Истина);
		
		Если Excel = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		// Откроем указанный файл.
		Excel.AutomationSecurity = 1;    //Довбешка Т. 20.10.2014    включить макросы
		ОбновлятьСсылки = 0;
		ExcelФайл = бит_БК_ОбщийКлиент.ОткрытьExcelФайлКлиент(Excel, Объект.ФайлИсточник, Отказ, ОбновлятьСсылки);
		
		Если ExcelФайл = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Откроем лист Excel.
		//ИмяЛиста = "Лист"+НомерЛиста;
		ИмяЛиста = "Заявка 1С";
		ExcelЛист = бит_БК_ОбщийКлиент.ОткрытьExcelЛистКлиент(ExcelФайл, ИмяЛиста, Отказ, Истина); 
		
		Если ExcelЛист = Неопределено ИЛИ ExcelЛист = Неопределено Тогда
			// Закроем открытый файл.
			ФайлЗакрыт = бит_БК_ОбщийКлиент.ЗакрытьExcelФайлКлиент(ExcelФайл);
			
			// Закроем приложение Excel.
			ExcelЗакрыт = бит_БК_ОбщийКлиент.ЗакрытьПриложениеExcelКлиент(Excel, Истина);
			Возврат Неопределено;
		КонецЕсли; 
		
		// Формируем таблицу загружаемых объектов.
		АдресТаблицаДанных = ПолучитьДанные(ExcelЛист);
		
		// Закроем открытый файл.
		ФайлЗакрыт = бит_БК_ОбщийКлиент.ЗакрытьExcelФайлКлиент(ExcelФайл);
		
		// Закроем приложение Excel.
		ExcelЗакрыт = бит_БК_ОбщийКлиент.ЗакрытьПриложениеExcelКлиент(Excel, Истина);
	иначе
		мКолонки = Новый Массив;
		
		АдресТаблицаДанных = ПолучитьДанныеНаСервере(СтруктураДанных.КоличествоКолонок, СтруктураДанных.КоличествоСтрок, СтруктураДанных.МассивКолонок);
	КонецЕсли;

	Если АдресТаблицаДанных = Неопределено тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Файл не содержит данных";
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;

    ОбщиеПараметры = ПолучитьПараметрыОбщие(АдресТаблицаДанных);
	
	//Дополнение соответствия колонок
	 ДополнениеСоответствияКолонок();
	//Добавить колонки 1С и удалить строки с другими сценариями
	ИнициализироватьДанные1С(АдресТаблицаДанных, ОбщиеПараметры);
	
	//Дополнительная обработка таблицы
	//Копия_ТЧ_БДДС = мОбъектДляЗаполнения.БДДС.Выгрузить();
	//ВыполнитьДополнительныеОбработки(Данные,СтруктураПериодов,Копия_ТЧ_БДДС);
	
	 //Заполнить шапку
	ПараметрыШапки = ЗаполнитьШапкуДокумента(АдресТаблицаДанных, ОбщиеПараметры);	
	//1c-izhtc spawn (
	// перенесено в модуль объекта
	////Заполняем таблицу объекта
	//ЗаполнитьДанныеБюджета(АдресТаблицаДанных);
	//1c-izhtc spawn )
	
	//Устанавлиаем флаг загрузки
	ПараметрыШапки.Вставить("бит_БК_ЗагрузкаИзExcel", Истина);
	
	СтруктураВозврата = Новый Структура("ПараметрыШапки, АдресТаблицаДанных", ПараметрыШапки, АдресТаблицаДанных);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанные(ExcelЛист)
	// Получим количество колонок.
    КоличествоКолонок = ExcelЛист.Cells(1,1).SpecialCells(11).Column;
	// Получим количество строк.
	КоличествоСтрок = ExcelЛист.Cells(1,1).SpecialCells(11).Row;
	
	Arr = ExcelЛист.UsedRange.Value;
	
	МассивКолонок = Arr.Выгрузить();
	
	АдресТаблицаДанных = ПолучитьДанныеНаСервере(КоличествоКолонок, КоличествоСтрок, МассивКолонок);
	
	Возврат АдресТаблицаДанных;
КонецФункции

&НаСервере
Функция ПолучитьДанныеНаСервере(КоличествоКолонок, КоличествоСтрок, МассивКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для сч = 1 по КоличествоКолонок Цикл
		ТаблицаДанных.Колонки.Добавить("Колонка"+сч);
	КонецЦикла;
	Для сч = 1 по КоличествоСтрок Цикл
		ТаблицаДанных.Добавить();
	КонецЦикла;
	
	Для НомКол = 1 По КоличествоКолонок Цикл
		
		МассивДанных = МассивКолонок[НомКол-1];
		
		// Загружаем значения текущей колонки.
		ТаблицаДанных.ЗагрузитьКолонку(МассивДанных, "Колонка"+НомКол);
		
	КонецЦикла;
	
	Если ТаблицаДанных.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	//Удаляем первую строку т.к. содержит заголовки
	ТаблицаДанных.Удалить(0);
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДанных, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ДополнениеСоответствияКолонок()
	СоответствиеКолонок = ПолучитьИзВременногоХранилища(АдресСоответствиеКолонок);
	//получаем список обязательных измерений контроля они должы быть заполнены
	СписокИзмеренийКонтроляБюджета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", Сценарий, Новый СписокЗначений, "СписокЗначений"); 
	Для Каждого Элемент Из СоответствиеКолонок Цикл
		СтруктураПараметров = Элемент.Значение;
		//Статья и сценарий и период д. б. заполнены по умолчанию
		Если СтруктураПараметров.Имя = "СтатьяОборотов" ИЛИ СтруктураПараметров.Имя = "Сценарий" ИЛИ СтруктураПараметров.Имя = "Период" Тогда 
			Продолжить;
		КонецЕсли;
		
		//Попытаемся получить Имя перечисления
		Мета = Метаданные.Перечисления.бит_БК_ИзмеренияКонтроляБюджета.ЗначенияПеречисления.Найти(СтруктураПараметров.Имя);
		//Если нашли, значит это измерение, проверяем на заполнение обязательно
		Если НЕ Мета = Неопределено тогда
			СтруктураПараметров.ПроверятьЗаполнение = Истина;
		КонецЕсли;
	КонецЦикла;
	АдресСоответствиеКолонок = ПоместитьВоВременноеХранилище(СоответствиеКолонок, АдресСоответствиеКолонок);
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанные1С(АдресДанные, ОбщиеПараметры)
	Данные = ПолучитьИзВременногоХранилища(АдресДанные);
	СоответствиеКолонок = ПолучитьИзВременногоХранилища(АдресСоответствиеКолонок);
	// добавляем колонки под значения 1С
	Для Каждого Элемент Из СоответствиеКолонок Цикл
		СтруктураПараметров = Элемент.Значение;
		Данные.Колонки.Добавить(СтруктураПараметров.Имя, СтруктураПараметров.ОписаниеТипов);
	КонецЦикла;	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Каждого ТекСтрока Из Данные Цикл
		//Заполняем данными
		Для Каждого Элемент Из СоответствиеКолонок Цикл
			СтруктураПараметров = Элемент.Значение;
			Если СтруктураПараметров.Искать = "ИскатьПоКоду" Тогда 
				Мета = СтруктураПараметров.Мета.Метаданные();
				КодОбъекта = ПривестиККодуОбъекта(ТекСтрока[Элемент.Ключ], Мета.ДлинаКода);
				ТекСтрока[СтруктураПараметров.Имя] = Справочники[Мета.Имя].НайтиПоКоду(КодОбъекта);
			ИначеЕсли СтруктураПараметров.Искать = "ИскатьПоРеквизиту" Тогда 
				Мета = СтруктураПараметров.Мета.Метаданные();
				ТекСтрока[СтруктураПараметров.Имя] = Справочники[Мета.Имя].НайтиПоРеквизиту(СтруктураПараметров.ИмяРеквизита,ТекСтрока[Элемент.Ключ]);
			ИначеЕсли СтруктураПараметров.Искать = "ИскатьПоНаименованию" Тогда
				Мета = СтруктураПараметров.Мета.Метаданные();
				ТекСтрока[СтруктураПараметров.Имя] = Справочники[Мета.Имя].НайтиПоНаименованию(ТекСтрока[Элемент.Ключ]);
			ИначеЕсли СтруктураПараметров.Искать = "НеИскать" Тогда
				ТекСтрока[СтруктураПараметров.Имя] = ТекСтрока[Элемент.Ключ];
			ИначеЕсли СтруктураПараметров.Искать = "ПолучатьИзПараметров" Тогда
				Попытка
					ТекСтрока[СтруктураПараметров.Имя] = ОбщиеПараметры[СтруктураПараметров.Имя];
				исключение
				КонецПопытки;
			ИначеЕсли СтруктураПараметров.Искать = "Вручную" Тогда
				//здесь можно задать значение
				Если СтруктураПараметров.Имя = "СтавкаНДС" Тогда
					Ставка = СокрЛП(ТекСтрока[Элемент.Ключ]);
					Попытка
						ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС["НДС"+Ставка];
					исключение
						ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
					КонецПопытки;
				ИначеЕсли СтруктураПараметров.Имя = "Период" Тогда
					Попытка
						//ТекСтрока.Период = Дата(Формат(Дата,"ДФ=yyyy")+ ПолучитьНомерМесяца(ТекСтрока["Колонка16"])+"01");
						ТекСтрока.Период = НачалоМесяца(Дата);
					Исключение
						ТекСтрока.Период = Дата(1,1,1);
					КонецПопытки;
				ИначеЕсли СтруктураПараметров.Имя = "Сценарий" Тогда
					ТекСтрока.Сценарий = Сценарий;
				ИначеЕсли СтруктураПараметров.Имя = "бит_БК_Организация" Тогда 
					ТекСтрока.бит_БК_Организация = ОбщиеПараметры.бит_БК_Организация;
				ИначеЕсли СтруктураПараметров.Имя = "бит_БК_ВалютаДоговора" Тогда 
					Если ТекСтрока[Элемент.Ключ] = "RUR" Тогда 
						ТекСтрока.бит_БК_ВалютаДоговора = Справочники.Валюты.НайтиПоКоду("643");
					Иначе 
						ТекСтрока.бит_БК_ВалютаДоговора = Справочники.Валюты.НайтиПоНаименованию(ТекСтрока[Элемент.Ключ]);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;		
		//Проверить строку на заполнение и удаление
		Если НЕ СтрокаЗаполненаКорректно(ТекСтрока, Данные.Индекс(ТекСтрока)+1) ИЛИ НЕ ТекСтрока.Сценарий = Сценарий Тогда
			МассивСтрокДляУдаления.Добавить(ТекСтрока);
			Продолжить;			
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивСтрокДляУдаления Цикл
		Данные.Удалить(ТекСтрока);
	КонецЦикла;
	
	АдресДанные = ПоместитьВоВременноеХранилище(Данные, АдресДанные);
КонецПроцедуры

&НаСервере
Функция ПривестиККодуОбъекта(КодExcel, ДлинаКода)
	//удаляем пробелы
	КодExcel = СтрЗаменить(КодExcel,Символы.НПП,"");
	ДлинаКодаExcel = СтрДлина(КодExcel);		
	Разница = ДлинаКода - ДлинаКодаExcel;
	КодОбъекта = "";
	//добавляем лид. 0
	Для сч = 1  По Разница Цикл
		КодОбъекта = КодОбъекта +"0";
	КонецЦикла;
	КодОбъекта = ""+КодОбъекта + КодExcel;
	Возврат КодОбъекта;
КонецФункции

&НаСервере
Функция СтрокаЗаполненаКорректно(ТекСтрока, НомерСтроки)
	СоответствиеКолонок = ПолучитьИзВременногоХранилища(АдресСоответствиеКолонок);
	ЗаполненаКорректно = Истина;
	ТекстСообщения = "Строка № "+НомерСтроки+" исходного файла:";
	//по уполчанию сообщение не заполнено
	ВыводитьСообщение = Ложь;

	Для Каждого Элемент Из СоответствиеКолонок Цикл
		СтруктураПараметров = Элемент.Значение;
		Если НЕ СтруктураПараметров.ПроверятьЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Найти(Элемент.Ключ,"БезКолонки") = 0 Тогда 
			КолонкаЗначение = "";
		иначе
			КолонкаЗначение = ТекСтрока[Элемент.Ключ];
		КонецЕсли;
		//Если значение 1С не заполнено, тогда проверяем: если нет исходного значения или колонка заполняется вручную по алгоритму сообщение не выводим
		Если НЕ ЗначениеЗаполнено(ТекСтрока[СтруктураПараметров.Имя]) Тогда 
			Если ЗначениеЗаполнено(КолонкаЗначение) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС+"	Не удалось определить значение <"+СтруктураПараметров.Наименование+"> по параметру "+КолонкаЗначение;
				ВыводитьСообщение = Истина;
			КонецЕсли;
			ЗаполненаКорректно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗаполненаКорректно И ВыводитьСообщение Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
		Сообщение.Сообщить();
	КонецЕсли;
	Возврат ЗаполненаКорректно;

	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыОбщие(АдресДанные)
	Данные = ПолучитьИзВременногоХранилища(АдресДанные);
	
	Структура = Новый Структура;
	//15 - № заявки = Номер документа
	//18 - Инициатор = наименование спр. бит_Инициаторы
	//11 - Дата оформл. заявки = Дата документа        	
	//получаем из первой строки
	ТекСтрока = Данные[0];
	
	Структура.Вставить("Номер",ТекСтрока["Колонка15"]);
	// BIT AMerkulov 23092014 ++	
	//Попытка
	//	ДатаДокумента = ТекСтрока["Колонка16"];
	//Исключение
	//КонецПопытки;
	ДатаДокумента = ТекущаяДатаСеанса();
	// BIT AMerkulov 23092014 --
	
	
	
	Если ДатаДокумента < Дата(1900,01,01) Тогда
		Структура.Вставить("Дата",ТекущаяДата());
	Иначе 
		Структура.Вставить("Дата",ДатаДокумента);
	КонецЕсли;

	//Структура.Вставить("бит_БК_Инициатор",Справочники.бит_БК_Инициаторы.НайтиПоНаименованию(ТекСтрока["Колонка18"]));
	//БИТ АКриштопов ++ 2405 26052016
	Структура.Вставить("бит_БК_Инициатор",Справочники.бит_БК_Инициаторы.НайтиПоРеквизиту("Email",(ТекСтрока["Колонка19"])));
	//БИТ АКриштопов -- 2405 26052016
	Структура.Вставить("бит_БК_Цель",ТекСтрока["Колонка17"]);
	//Получим наименование из настроек
	//БИТ АКриштопов ++ 2405 02062016
	//ФормаОплаты
	ФормаОплатыСтрока = СокрЛП(ТекСтрока["Колонка14"]);
	Если ФормаОплатыСтрока = "Б/Н" Тогда 
		ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
	ИначеЕсли ФормаОплатыСтрока = "НАЛ" Тогда
		ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные;
	КонецЕсли;	
	Структура.Вставить("бит_БК_ФормаОплаты",ФормаОплаты);
	//БИТ АКриштопов -- 2405 02062016
	Группа = "Соответствие наименования организации";
	ИмяНастройки = ТекСтрока["Колонка21"];
	Организация = бит_БК_Общий.ПолучитьЗначениеНастройкиБК(Группа,ИмяНастройки, Справочники.Организации.ПустаяСсылка());
	Структура.Вставить("бит_БК_Организация",Организация);
	Возврат Структура;
КонецФункции

&НаСервере
Функция ЗаполнитьШапкуДокумента(АдресДанные, ОбщиеПараметры)
	Данные = ПолучитьИзВременногоХранилища(АдресДанные);
	
	//15 - № заявки = Номер документа
	//18 - Инициатор = наименование спр. бит_Инициаторы
	//11 - Дата оформл. заявки = Дата документа        	
	//получаем из первой строки
	
	Если Данные.Количество()>0 Тогда
		ТаблицаПериодов = Данные.Скопировать(,"Период");
		ТаблицаПериодов.Сортировать("Период Возр");
		ДатаНачала    = ТаблицаПериодов[0].Период;
		ДатаОкончания = ТаблицаПериодов[ТаблицаПериодов.Количество()-1].Период;
		
	Иначе
		
		ДатаНачала    = ОбщиеПараметры.Дата;
		ДатаОкончания = ОбщиеПараметры.Дата;                  
		
	КонецЕсли; 
	ОбщиеПараметры.Вставить("бит_БК_ПериодНачало",ДатаНачала);
	ОбщиеПараметры.Вставить("бит_БК_ПериодКонец",ДатаОкончания);
	
	ПараметрыШапки = Новый Структура;
	ПараметрыШапки.Вставить("Дата",ОбщиеПараметры.Дата);
	ПараметрыШапки.Вставить("бит_БК_Инициатор",ОбщиеПараметры.бит_БК_Инициатор);
	ПараметрыШапки.Вставить("бит_БК_Цель",ОбщиеПараметры.бит_БК_Цель);
	ПараметрыШапки.Вставить("бит_БК_Организация",ОбщиеПараметры.бит_БК_Организация);
	ПараметрыШапки.Вставить("бит_БК_ПериодНачало",ОбщиеПараметры.бит_БК_ПериодНачало);
	ПараметрыШапки.Вставить("бит_БК_ПериодКонец",ОбщиеПараметры.бит_БК_ПериодКонец);
	
	//1c-izhtc spawn (
	//ЗаполнитьЗначенияСвойств(мОбъектДляЗаполнения,ПараметрыШапки);
	Возврат ПараметрыШапки;
	//1c-izhtc spawn )
КонецФункции
 
&НаСервере
Функция ПолучитьНомерМесяца(МесяцСтрокой)
	МесяцСтрокой = НРег(МесяцСтрокой);
	Если МесяцСтрокой = "январь" Тогда
		НомерМесяца = "01";
	ИначеЕсли МесяцСтрокой = "февраль" Тогда
		НомерМесяца = "02";
	ИначеЕсли МесяцСтрокой = "март" Тогда
		НомерМесяца = "03";
	ИначеЕсли МесяцСтрокой = "апрель" Тогда
		НомерМесяца = "04";
	ИначеЕсли МесяцСтрокой = "май" Тогда
		НомерМесяца = "05";
	ИначеЕсли МесяцСтрокой = "июнь" Тогда
		НомерМесяца = "06";
	ИначеЕсли МесяцСтрокой = "июль" Тогда
		НомерМесяца = "07";
	ИначеЕсли МесяцСтрокой = "август" Тогда
		НомерМесяца = "08";
	ИначеЕсли МесяцСтрокой = "сентябрь" Тогда
		НомерМесяца = "09";
	ИначеЕсли МесяцСтрокой = "октябрь" Тогда
		НомерМесяца = "10";
	ИначеЕсли МесяцСтрокой = "ноябрь" Тогда
		НомерМесяца = "11";
	ИначеЕсли МесяцСтрокой = "декабрь" Тогда
		НомерМесяца = "12";
	КонецЕсли;		 
	
	Возврат НомерМесяца;
КонецФункции

