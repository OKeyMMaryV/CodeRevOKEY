
#Область ОписаниеПеременных

// Хранит КОМ соединение с внешней базой.
&НаКлиенте
Перем мСостояниеПодключенияКОМ_1;

// Хранит КОМ соединение с внешней базой.
&НаКлиенте
Перем мСостояниеПодключенияКОМ_2;


// Хранит вид информационной базы, подключенной по соединению КОМ.
&НаКлиенте                                   
Перем мВидИнформационнойБазыСоединенияКОМ_1;  

// Хранит вид информационной базы, подключенной по соединению КОМ.
&НаКлиенте
Перем мВидИнформационнойБазыСоединенияКОМ_2;


// Хранит текущий вид ИБ 1.
&НаКлиенте                                   
Перем мВидИБ_1;  

// Хранит текущий вид ИБ 2.
&НаКлиенте
Перем мВидИБ_2;

// Хранит текущее имя объекта 1.
&НаКлиенте                                   
Перем мИмяОбъекта_1;  

// Хранит текущее имя объекта 2.
&НаКлиенте
Перем мИмяОбъекта_2;



#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "НачалоВыбора" поля ввода "ВидИнформационнойБазы_1".
// 
&НаКлиенте
Процедура ВидИнформационнойБазы_1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мВидИБ_1 = Объект.ВидИнформационнойБазы_1;

КонецПроцедуры // ВидИнформационнойБазы_1НачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ВидИнформационнойБазы_2".
// 
&НаКлиенте
Процедура ВидИнформационнойБазы_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мВидИБ_2 = Объект.ВидИнформационнойБазы_2;
	
КонецПроцедуры // ВидИнформационнойБазы_2НачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидИнформационнойБазы_1".
// 
&НаКлиенте
Процедура ВидИнформационнойБазы_1ПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаИБ("1");
		
КонецПроцедуры // ВидИнформационнойБазы_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидИнформационнойБазы_2".
// 
&НаКлиенте
Процедура ВидИнформационнойБазы_2ПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаИБ("2");
		
КонецПроцедуры // ВидИнформационнойБазы_2ПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектов

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// таблицы "ДеревоОбъектов".
// 
&НаКлиенте
Процедура ДеревоОбъектовПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборДляДополнительныхТаблиц();
	
КонецПроцедуры // ДеревоОбъектовПриАктивизацииСтроки()

// Процедура - обработчик события "ПриИзменении" флажка "Выбран"
// таблицы "ДеревоОбъектов".
// 
&НаКлиенте
Процедура ДеревоОбъектовВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;	
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоГруппа Тогда
		
		ГруппаВыбрана = ТекущиеДанные.Выбран;
		
		ИД = ТекущиеДанные.ПолучитьИдентификатор();
		СтрокаДерева = ДеревоОбъектов.НайтиПоИдентификатору(ИД);
		УзелДерева   = СтрокаДерева.ПолучитьЭлементы();
		Для каждого ПодстрокаДерева Из УзелДерева Цикл
			
			Если ЗначениеЗаполнено(ПодстрокаДерева.ИмяОбъекта_1)
				И ЗначениеЗаполнено(ПодстрокаДерева.ИмяОбъекта_2)
				И Не ПодстрокаДерева.Записан Тогда
			
				ПодстрокаДерева.Выбран = ГруппаВыбрана;	
			
			КонецЕсли; 				
		
		КонецЦикла;		
	
	КонецЕсли;
	
КонецПроцедуры // ДеревоОбъектовВыбранПриИзменении()

// Процедура - обработчик события "НачалоВыбора" флажка "ИмяОбъекта_1"
// таблицы "ДеревоОбъектов".
// 
&НаКлиенте
Процедура ДеревоОбъектовИмяОбъекта_1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьОбъектМетаданных(Элемент,
							"1",
							мСостояниеПодключенияКОМ_1,
							мВидИнформационнойБазыСоединенияКОМ_1,
							СтандартнаяОбработка);  							
			
КонецПроцедуры // ДеревоОбъектовИмяОбъекта_1НачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" флажка "ИмяОбъекта_2"
// таблицы "ДеревоОбъектов".
// 
&НаКлиенте
Процедура ДеревоОбъектовИмяОбъекта_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьОбъектМетаданных(Элемент,
							"2",
							мСостояниеПодключенияКОМ_2,
							мВидИнформационнойБазыСоединенияКОМ_2,
							СтандартнаяОбработка);	
								
КонецПроцедуры // ДеревоОбъектовИмяОбъекта_2НачалоВыбора()

// Процедура - обработчик события "Очистка" поля "ИмяОбъекта_1"
// таблицы "ДеревоОбъектов".
// 
&НаКлиенте
Процедура ДеревоОбъектовИмяОбъекта_1Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанныеДерева = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущиеДанныеДерева <> Неопределено И мИмяОбъекта_1 <> ТекущиеДанныеДерева.ИмяОбъекта_1 Тогда
		
		ОбработатьИзмененияИмениОбъекта(ТекущиеДанныеДерева, "ИмяОбъекта_1", "1");// МИмяОбъекта_1);			
	
	КонецЕсли;
	
КонецПроцедуры // ДеревоОбъектовИмяОбъекта_1Очистка()

// Процедура - обработчик события "Очистка" поля "ИмяОбъекта_2"
// таблицы "ДеревоОбъектов".
// 
&НаКлиенте
Процедура ДеревоОбъектовИмяОбъекта_2Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанныеДерева = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущиеДанныеДерева <> Неопределено И мИмяОбъекта_2 <> ТекущиеДанныеДерева.ИмяОбъекта_2 Тогда
		
		ОбработатьИзмененияИмениОбъекта(ТекущиеДанныеДерева, "ИмяОбъекта_2", "2");			
	
	КонецЕсли;                                       	
	
КонецПроцедуры // ДеревоОбъектовИмяОбъекта_2Очистка()
           
// Процедура - обработчик события "ПриИзменении" поля "ИмяОбъекта_1"
// таблицы "ДеревоОбъектов".
// 
&НаКлиенте
Процедура ДеревоОбъектовИмяОбъекта_1ПриИзменении(Элемент)
	
	ТекущиеДанныеДерева = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущиеДанныеДерева <> Неопределено И мИмяОбъекта_1 <> ТекущиеДанныеДерева.ИмяОбъекта_1 Тогда
		
		ОбработатьИзмененияИмениОбъекта(ТекущиеДанныеДерева, "ИмяОбъекта_1", "1");			
	
	КонецЕсли;

КонецПроцедуры // ДеревоОбъектовИмяОбъекта_1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ИмяОбъекта_2"
// таблицы "ДеревоОбъектов".
// 
&НаКлиенте
Процедура ДеревоОбъектовИмяОбъекта_2ПриИзменении(Элемент)
	                   	
	ТекущиеДанныеДерева = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущиеДанныеДерева <> Неопределено И мИмяОбъекта_2 <> ТекущиеДанныеДерева.ИмяОбъекта_2 Тогда
		
		ОбработатьИзмененияИмениОбъекта(ТекущиеДанныеДерева, "ИмяОбъекта_2", "2");			
	
	КонецЕсли;
	
КонецПроцедуры // ДеревоОбъектовИмяОбъекта_2ПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПравила

// Процедура - обработчик события "ПередНачаломДобавления" 
// таблицы "ТаблицаПравилаПоиска".
// 
&НаКлиенте
Процедура ТаблицаПравилаПоискаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ДобавитьСкопироватьСтрокуДополнительнойТаблицы("ТаблицаПравилаПоиска", Копирование, Отказ);
			
КонецПроцедуры // ТаблицаПравилаПоискаПередНачаломДобавления()

// Процедура - обработчик события "НачалоВыбора" поля ввода "СпособПоискаДанных"
// таблицы "ТаблицаПравилаПоиска".
// 
&НаКлиенте
Процедура ТаблицаПравилаПоискаСпособПоискаДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПеречСпособыПоискаДанных = фКэшЗначений.Перечисления.бит_мпд_СпособыПоискаДанных;
	ВидПеречисление 		 = фКэшЗначений.Перечисления.бит_мпд_ВидыОбъектовМетаданных.Перечисление;
	
	ТекущиеДанныеДерева = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	СписокЗначенийВыбора = Новый СписокЗначений;
	
	// Если Не ЗначениеЗаполнено(Объект.ВидОбъекта_1) Тогда.
	Если ТекущиеДанныеДерева.ВидОбъекта = ВидПеречисление Тогда
		СписокЗначенийВыбора.Добавить(ПеречСпособыПоискаДанных.ПоИменам);
		СписокЗначенийВыбора.Добавить(ПеречСпособыПоискаДанных.ПоСоответствиюИмен);
	Иначе
		СписокЗначенийВыбора.Добавить(ПеречСпособыПоискаДанных.ПоВнутреннимИдентификаторам);
		СписокЗначенийВыбора.Добавить(ПеречСпособыПоискаДанных.ПоРеквизитам);
		СписокЗначенийВыбора.Добавить(ПеречСпособыПоискаДанных.ПоЗначению);	
	КонецЕсли; 	
	
	ДанныеВыбора = СписокЗначенийВыбора;
	
КонецПроцедуры // ТаблицаПравилаПоискаСпособПоискаДанныхНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "СпособПоискаДанных"
// таблицы "ТаблицаПравилаПоиска".
// 
&НаКлиенте
Процедура ТаблицаПравилаПоискаСпособПоискаДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПравилаПоиска.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПеречСпособыПоискаДанных = фКэшЗначений.Перечисления.бит_мпд_СпособыПоискаДанных;
	
	Если ТекущиеДанные.СпособПоискаДанных = ПеречСпособыПоискаДанных.ПоВнутреннимИдентификаторам Тогда
		ТекущиеДанные.ИмяРеквизита_1 = "";	
		ТекущиеДанные.ИмяРеквизита_2 = "";	
	КонецЕсли;
		
КонецПроцедуры // ТаблицаПравилаПоискаСпособПоискаДанныхПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИмяРеквизита_1" 
// таблицы "ТаблицаПравилаПоиска".
// 
&НаКлиенте
Процедура ТаблицаПравилаПоискаИмяРеквизита_1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеДерева = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ИД = ТекущиеДанныеДерева.ПолучитьИдентификатор();
	
	ДанныеВыбора = ПолучитьСписокДанныхВыбора(мСостояниеПодключенияКОМ_1, 
											мВидИнформационнойБазыСоединенияКОМ_1,
											"Реквизиты",
											"1",
											ИД);
	
КонецПроцедуры // ТаблицаПравилаПоискаИмяРеквизита_1НачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИмяРеквизита_2" 
// таблицы "ТаблицаПравилаПоиска".
// 
&НаКлиенте
Процедура ТаблицаПравилаПоискаИмяРеквизита_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеДерева = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ИД = ТекущиеДанныеДерева.ПолучитьИдентификатор();
	
	ДанныеВыбора = ПолучитьСписокДанныхВыбора(мСостояниеПодключенияКОМ_2, 
											мВидИнформационнойБазыСоединенияКОМ_2,
											"Реквизиты",
											"2",
											ИД); 
	
КонецПроцедуры // ТаблицаПравилаПоискаИмяРеквизита_2НачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствие

// Процедура - обработчик события "ПередНачаломДобавления" 
// таблицы "ТаблицаСоответствиеЗначений".
// 
&НаКлиенте
Процедура ТаблицаСоответствиеЗначенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	                                                 
	ДобавитьСкопироватьСтрокуДополнительнойТаблицы("ТаблицаСоответствиеЗначений", Копирование, Отказ);
			
КонецПроцедуры // ТаблицаСоответствиеЗначенийПередНачаломДобавления()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИмяЗначения_1" 
// таблицы "ТаблицаСоответствиеЗначений".
// 
&НаКлиенте
Процедура ТаблицаСоответствиеЗначенийИмяЗначения_1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	                   
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеДерева = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ИД = ТекущиеДанныеДерева.ПолучитьИдентификатор();
	
	ПеречисленияВидовОбъектов = фКэшЗначений.Перечисления.бит_мпд_ВидыОбъектовМетаданных;
	
	Если ТекущиеДанныеДерева.ВидОбъекта = ПеречисленияВидовОбъектов.Справочник Тогда
		
		ИмяКоллекции = "Предопределенные";
		
	ИначеЕсли ТекущиеДанныеДерева.ВидОбъекта = ПеречисленияВидовОбъектов.Перечисление Тогда
		
		ИмяКоллекции = "ЗначенияПеречисления";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеВыбора = ПолучитьСписокДанныхВыбора(мСостояниеПодключенияКОМ_2, 
											мВидИнформационнойБазыСоединенияКОМ_2,
											ИмяКоллекции,
											"1",
											ИД);

	
КонецПроцедуры // ТаблицаСоответствиеЗначенийИмяЗначения_1НачалоВыбора()
											
// Процедура - обработчик события "НачалоВыбора" поля ввода "ИмяЗначения_2" 
// таблицы "ТаблицаСоответствиеЗначений".
// 
&НаКлиенте
Процедура ТаблицаСоответствиеЗначенийИмяЗначения_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеДерева = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ИД = ТекущиеДанныеДерева.ПолучитьИдентификатор();		
	
	ПеречисленияВидовОбъектов = фКэшЗначений.Перечисления.бит_мпд_ВидыОбъектовМетаданных;
	
	Если ТекущиеДанныеДерева.ВидОбъекта = ПеречисленияВидовОбъектов.Справочник Тогда
		
		ИмяКоллекции = "Предопределенные";
		
	ИначеЕсли ТекущиеДанныеДерева.ВидОбъекта = ПеречисленияВидовОбъектов.Перечисление Тогда
		
		ИмяКоллекции = "ЗначенияПеречисления";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеВыбора = ПолучитьСписокДанныхВыбора(мСостояниеПодключенияКОМ_2, 
											мВидИнформационнойБазыСоединенияКОМ_2,
											ИмяКоллекции,
											"2",
											ИД);

	
КонецПроцедуры // ТаблицаСоответствиеЗначенийИмяЗначения_2НачалоВыбора()											

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "Настройки".
// 
&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыФормы = Новый Структура; 	
	ПараметрыФормы.Вставить("ТаблицаПравилПоискаПоУмолчанию"	, ПолучитьХранилищеПравил());
	ПараметрыФормы.Вставить("СпособЗаписиНазначенийПравилПоиска", СпособЗаписиНазначенийПравилПоиска);
	ПараметрыФормы.Вставить("СпособПоискаДанныхДляПеречислений" , СпособПоискаДанныхДляПеречислений);
													   
	Оповещение_Настройки = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.бит_мпд_ЗаполнениеПравилПоискаДанных.Форма.ФормаНастроек"
					, ПараметрыФормы, ЭтаФорма, , , , Оповещение_Настройки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);    
					
КонецПроцедуры // Настройки()

// Процедура обработчик оповещения "ОткрытьНастройкиЗавершение".
// 
// Параметры:
//  СтруктураРезультата - Структура.
//  ДопПараметры 		- Структура.
// 
&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(СтруктураРезультата, ДопПараметры) Экспорт
	
	Если ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
		
		ЗагрузитьТаблицуПравилПоискаПоУмолчанию(СтруктураРезультата);
		СпособЗаписиНазначенийПравилПоиска = СтруктураРезультата.СпособЗаписиНазначенийПравилПоиска;
		СпособПоискаДанныхДляПеречислений  = СтруктураРезультата.СпособПоискаДанныхДляПеречислений;
		
	КонецЕсли;	
	
КонецПроцедуры // ОткрытьНастройкиЗавершение()
 

// Процедура - обработчик команды "ВсеЗаполнить".
// 
&НаКлиенте
Процедура ВсеЗаполнить(Команда)
	
	Если ЗначениеЗаполнено(Объект.ВидИнформационнойБазы_1) И ЗначениеЗаполнено(Объект.ВидИнформационнойБазы_2) Тогда

		ЗаполнитьВсеТаблицы(мСостояниеПодключенияКОМ_1,
							мСостояниеПодключенияКОМ_2,
							мВидИнформационнойБазыСоединенияКОМ_1, 
							мВидИнформационнойБазыСоединенияКОМ_2);
						
	КонецЕсли;
					
КонецПроцедуры // ВсеЗаполнить()		

// Процедура - обработчик команды "ДеревоЗаполнить".
// 
&НаКлиенте
Процедура ДеревоЗаполнить(Команда)
	                	
	Если ЗначениеЗаполнено(Объект.ВидИнформационнойБазы_1) И ЗначениеЗаполнено(Объект.ВидИнформационнойБазы_2) Тогда
	
		СформироватьДеревоОбъектов(мСостояниеПодключенияКОМ_1,
									мСостояниеПодключенияКОМ_2,
									Объект.ВидИнформационнойБазы_1,
									Объект.ВидИнформационнойБазы_2,
									мВидИнформационнойБазыСоединенияКОМ_1,
									мВидИнформационнойБазыСоединенияКОМ_2);
								
	КонецЕсли;			
							
КонецПроцедуры // ДеревоЗаполнить()
              
// Процедура - обработчик команды "ПравилаЗаполнить".
// 
&НаКлиенте
Процедура ПравилаЗаполнить(Команда)
	
	ЗаполнитьПравилаПоиска();
	
КонецПроцедуры // ПравилаЗаполнить()

// Процедура - обработчик команды "ПравилаЗаполнитьПоТекущей".
// 
&НаКлиенте
Процедура ПравилаЗаполнитьПоТекущей(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;	
	КонецЕсли;
	
	ИД = ТекущиеДанные.ПолучитьИдентификатор();	
	ЗаполнитьПравилаПоиска(ИД);
	
КонецПроцедуры // ПравилаЗаполнитьПоТекущей()

// Процедура - обработчик команды "ЗаполнитьЗначения".
// 
&НаКлиенте
Процедура ЗначенияЗаполнить(Команда)
	
	// СтруктураПодключения = Новый Структура("СостояниеКОМ_1, СостояниеКОМ_2, ВидПодключеннойИБ_1, ВидПодключеннойИБ_2",
	// 										мСостояниеПодключенияКОМ_1,
	// 										мСостояниеПодключенияКОМ_2,
	// 										мВидИнформационнойБазыСоединенияКОМ_1,
	// 										мВидИнформационнойБазыСоединенияКОМ_2);
	ЗаполнитьСоответствиеЗначений(мСостояниеПодключенияКОМ_1,
									мСостояниеПодключенияКОМ_2,
									мВидИнформационнойБазыСоединенияКОМ_1, 
									мВидИнформационнойБазыСоединенияКОМ_2);
	
КонецПроцедуры // ЗначенияЗаполнить()

// Процедура - обработчик команды "ЗначенияЗаполнитьПоТекущей".
// 
&НаКлиенте
Процедура ЗначенияЗаполнитьПоТекущей(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;	
	КонецЕсли;
	
	ИД = ТекущиеДанные.ПолучитьИдентификатор();
	// СтруктураПодключения = Новый Структура("СостояниеКОМ_1, СостояниеКОМ_2, ВидПодключеннойИБ_1, ВидПодключеннойИБ_2",
	// 										мСостояниеПодключенияКОМ_1,
	// 										мСостояниеПодключенияКОМ_2,
	// 										мВидИнформационнойБазыСоединенияКОМ_1,
	// 										мВидИнформационнойБазыСоединенияКОМ_2);
	ЗаполнитьСоответствиеЗначений(мСостояниеПодключенияКОМ_1,
									мСостояниеПодключенияКОМ_2,
									мВидИнформационнойБазыСоединенияКОМ_1, 
									мВидИнформационнойБазыСоединенияКОМ_2,
									ИД);
	
КонецПроцедуры // ЗначенияЗаполнитьПоТекущей()


// Процедура - обработчик команды "ДеревоВсеСнять".
// 
&НаКлиенте
Процедура ДеревоВсеСнять(Команда)
	
	ОбработатьФлаги(0);	
	
КонецПроцедуры // ДеревоВсеСнять()

// Процедура - обработчик команды "ДеревоВсеУстановить".
// 
&НаКлиенте
Процедура ДеревоВсеУстановить(Команда)
	
	ОбработатьФлаги(1);
	
КонецПроцедуры // ДеревоВсеУстановить()

// Процедура - обработчик команды "ДеревоВсеИнвертировать".
// 
&НаКлиенте
Процедура ДеревоВсеИнвертировать(Команда)
	
	ОбработатьФлаги(2);
	
КонецПроцедуры // ДеревоВсеИнвертировать()

// Процедура - обработчик команды "ДеревоОбновить".
// 
&НаКлиенте
Процедура ДеревоОбновить(Команда)
	
	ОбновитьДерево();	
	
КонецПроцедуры // ДеревоОбновить()

// Процедура - обработчик команды "ДеревоВыбратьНеобходимыеДляБюджетирования".
// 
&НаКлиенте
Процедура ДеревоВыбратьНеобходимыеДляБюджетирования(Команда)
	
	КореньДерева = ДеревоОбъектов.ПолучитьЭлементы();
	Если КореньДерева.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Если СписокОбъектовДляБюджетирования.Количество() = 0 Тогда
		ЗаполнитьСписокОбъектовДляБюджетирования(); 	
	КонецЕсли;
	
	ОтметитьНеобходимыеСтрокиДерева(КореньДерева, СписокОбъектовДляБюджетирования);
		
КонецПроцедуры // ДеревоВыбратьНеобходимыеДляБюджетирования()

// Процедура - обработчик команды "ДеревоВыбратьНеобходимыеДляМСФО".
// 
&НаКлиенте
Процедура ДеревоВыбратьНеобходимыеДляМСФО(Команда)
	
	КореньДерева = ДеревоОбъектов.ПолучитьЭлементы();
	Если КореньДерева.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Если СписокОбъектовДляМСФО.Количество() = 0 Тогда
		ЗаполнитьСписокОбъектовДляМСФО(); 	
	КонецЕсли;
	
	ОтметитьНеобходимыеСтрокиДерева(КореньДерева, СписокОбъектовДляМСФО);
			
КонецПроцедуры // ДеревоВыбратьНеобходимыеДляМСФО()
 

// Процедура - обработчик команды "Записать".
// 
&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьПравилаПоискаДанных();
	
КонецПроцедуры // Записать()



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СервеныеПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_мпд_ЗаполнениеПравилПоискаДанных;
	
	// Вызов механизма защиты
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	УстановитьОтборыДинамическихСписков();
	
	УстановитьНастройкиПоУмолчанию(); 	
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область СервеныеПроцедурыИФункцииОбщегоНазначения

// Процедура заполняет кэш значений.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	КэшПеречислений = Новый Структура;
	КэшПеречислений.Вставить("бит_мпд_СпособыПоискаДанных", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_мпд_СпособыПоискаДанных));
	КэшПеречислений.Вставить("бит_мпд_ВидыОбъектовМетаданных", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_мпд_ВидыОбъектовМетаданных));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречислений);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура добавляет элемент отбора для динамического списка.
// 
// Параметры:
//  ИмяПоля  	  - Строка
//  МассивВидовИб - Массив
// 
&НаСервере
Процедура ДобавитьЭлементОтбораСписка(ИмяСписка, ИмяПоля, МассивВидовИб)
                    
	ЭлементОтбора = ЭтаФорма[ИмяСписка].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение    = МассивВидовИб;
	ЭлементОтбора.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	

КонецПроцедуры // ДобавитьЭлементОтбораСписка()

// Процедура устанавливает отборы динамических списков.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьОтборыДинамическихСписков()

	ПравилаПоискаДанных.Отбор.Элементы.Очистить();
	НазначениеПравилПоискаДанных.Отбор.Элементы.Очистить();
	
	МассивВидовИб = Новый Массив;
	МассивВидовИб.Добавить(Объект.ВидИнформационнойБазы_1);
	МассивВидовИб.Добавить(Объект.ВидИнформационнойБазы_2);
	
	ДобавитьЭлементОтбораСписка("ПравилаПоискаДанных", "ВидИнформационнойБазы_1", МассивВидовИб);
	ДобавитьЭлементОтбораСписка("ПравилаПоискаДанных", "ВидИнформационнойБазы_2", МассивВидовИб);
	ДобавитьЭлементОтбораСписка("НазначениеПравилПоискаДанных", "ВидИнформационнойБазыИсточник", МассивВидовИб);
	ДобавитьЭлементОтбораСписка("НазначениеПравилПоискаДанных", "ВидИнформационнойБазыПриемник", МассивВидовИб);
                                           	
КонецПроцедуры // УстановитьОтборыДинамическихСписков()

// Процедура добавляет строку правил поиска по умолчанию.
// 
// Параметры:
//  Приоритет  			- Число.
//  СпособыПоискаДанных - ПеречислениеСсылка.бит_мпд_СпособыПоискаДанных.
//  ИмяРеквизита 		- Строка.
// 
&НаСервере
Процедура ДобавитьСтрокуПравилПоУмолчанию(Приоритет, СпособыПоискаДанных, ИмяРеквизита = "")

	НоваяСтрокаПравил = ТаблицаПравилПоискаПоУмолчанию.Добавить();
	НоваяСтрокаПравил.Приоритет 		 = Приоритет;
	НоваяСтрокаПравил.СпособПоискаДанных = СпособыПоискаДанных;
	НоваяСтрокаПравил.Выбран 			 = Истина;
	НоваяСтрокаПравил.ИмяРеквизита 		 = ИмяРеквизита;
	
КонецПроцедуры // ДобавитьСтрокуПравилПоУмолчанию()

// Процедура устанавливает настройки по умолчанию.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьНастройкиПоУмолчанию()
	
	Объект.ВидИнформационнойБазы_1 = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
	
	СпособЗаписиНазначенийПравилПоиска = "Прямой и обратный";
	СпособПоискаДанныхДляПеречислений  = Перечисления.бит_мпд_СпособыПоискаДанных.ПоСоответствиюИмен;
	
	// Заполнение ТаблицаПравилПоискаПоУмолчанию.
	ПоВнутреннимИдентификаторам = Перечисления.бит_мпд_СпособыПоискаДанных.ПоВнутреннимИдентификаторам;
	ПоРеквизитам 				= Перечисления.бит_мпд_СпособыПоискаДанных.ПоРеквизитам;
	ДобавитьСтрокуПравилПоУмолчанию(0, ПоВнутреннимИдентификаторам);
	ДобавитьСтрокуПравилПоУмолчанию(1, ПоРеквизитам, "Код");
	ДобавитьСтрокуПравилПоУмолчанию(1, ПоРеквизитам, "Номер");
	ДобавитьСтрокуПравилПоУмолчанию(2, ПоРеквизитам, "Наименование");
	ДобавитьСтрокуПравилПоУмолчанию(2, ПоРеквизитам, "Дата");
	
КонецПроцедуры // УстановитьНастройкиПоУмолчанию()

// Функция помещает таблицу правил по умолчанию в хранилище значений.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   ХранилищеЗначений
// 
&НаСервере
Функция ПолучитьХранилищеПравил()

	ТаблицаППУ 		= ТаблицаПравилПоискаПоУмолчанию.Выгрузить();
	ХранилищеПравил = бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаППУ);

	Возврат ХранилищеПравил;
	
КонецФункции // ПолучитьХранилищеПравил()

// Процедура загружает таблицу правил по умолчанию из хранилища значений.
// 
// Параметры:
//  СтруктураРезультата - Структура.
// 
&НаСервере
Процедура ЗагрузитьТаблицуПравилПоискаПоУмолчанию(СтруктураРезультата)

	ТаблицаППУ = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураРезультата.ТаблицаПравилПоискаПоУмолчанию);
	ТаблицаПравилПоискаПоУмолчанию.Загрузить(ТаблицаППУ);	

КонецПроцедуры // ЗагрузитьТаблицуПравилПоискаПоУмолчанию()

#КонецОбласти

#Область СервеныеПроцедурыИФункцииФормированияДерева

// Функция формирует дерево объектов метеденных.
// 
// Параметры:
//  СостояниеКОМ_1 		- Строка.
//  СостояниеКОМ_2 		- Строка.
//  ВидТекущейИБ_1 		- СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//  ВидТекущейИБ_2 		- СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//  ВидПодключеннойИБ_1 - СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//  ВидПодключеннойИБ_2 - СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
// 
&НаСервере
Процедура СформироватьДеревоОбъектов(СостояниеКОМ_1, СостояниеКОМ_2, ВидТекущейИБ_1, ВидТекущейИБ_2, ВидПодключеннойИБ_1, ВидПодключеннойИБ_2)
	
	ТаблицаПравилаПоиска.Очистить();
	ТаблицаСоответствиеЗначений.Очистить();
	
	ПеречСостоянияПодключения = Перечисления.бит_мпд_СостоянияПодключенияИБ;
	
	// Проверим подключение, если вид информационной базы - внешняя.
	фТекстОшибки = "";
	СоединениеИБ_1 = бит_мпд_ВнешниеИсточникиСервер.ПолучитьСоединениеИБ(СостояниеКОМ_1, ВидТекущейИБ_1, ВидПодключеннойИБ_1, "КОМ", АдресКомОбъекта_1, фТекстОшибки);
	СоединениеИБ_2 = бит_мпд_ВнешниеИсточникиСервер.ПолучитьСоединениеИБ(СостояниеКОМ_2, ВидТекущейИБ_2, ВидПодключеннойИБ_2, "КОМ", АдресКомОбъекта_2, фТекстОшибки);
	// АдресКомОбъекта_1 = ПоместитьВоВременноеХранилище(СоединениеИБ_1, ЭтаФорма.УникальныйИдентификатор);
	// АдресКомОбъекта_2 = ПоместитьВоВременноеХранилище(СоединениеИБ_2, ЭтаФорма.УникальныйИдентификатор);
	// Соедин2 = ПолучитьИзВременногоХранилища(АдресКомОбъекта_2);
	
	ИспользоватьКОМ_1 = СостояниеКОМ_1 = ПеречСостоянияПодключения.ВнешняяБаза_Подключена;
	ИспользоватьКОМ_2 = СостояниеКОМ_2 = ПеречСостоянияПодключения.ВнешняяБаза_Подключена;
	
	// Описание типов: Строка
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(255);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, , КС);
	// Описание типов: Число
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(1);
	ОписаниеЧисло = Новый ОписаниеТипов(МассивТипов, , , КЧ);
	// Описание типов: ПеречислениеСсылка.бит_мпд_ВидыОбъектовМетаданных.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.бит_мпд_ВидыОбъектовМетаданных"));
	ОписаниеВидыОС = Новый ОписаниеТипов(МассивТипов);
	                                                    
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Имя"		   , ОписаниеСтрока);
	ТаблицаОбъектов.Колонки.Добавить("ИмяОбъекта_1", ОписаниеСтрока);
	ТаблицаОбъектов.Колонки.Добавить("ИмяОбъекта_2", ОписаниеСтрока);
	ТаблицаОбъектов.Колонки.Добавить("ВидОбъекта"  , ОписаниеВидыОС);
	ТаблицаОбъектов.Колонки.Добавить("Приоритет"   , ОписаниеЧисло);	
		
	ДобавитьСтрокиВТаблицуОбъектов(ТаблицаОбъектов, ИспользоватьКОМ_1, СоединениеИБ_1, "1");
	ДобавитьСтрокиВТаблицуОбъектов(ТаблицаОбъектов, ИспользоватьКОМ_2, СоединениеИБ_2, "2");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.УстановитьПараметр("ВидИнформационнойБазы_1", Объект.ВидИнформационнойБазы_1);
	Запрос.УстановитьПараметр("ВидИнформационнойБазы_2", Объект.ВидИнформационнойБазы_2); 
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Имя,
	|	ТаблицаОбъектов.ИмяОбъекта_1,
	|	ТаблицаОбъектов.ИмяОбъекта_2,
	|	ТаблицаОбъектов.ВидОбъекта,
	|	ТаблицаОбъектов.Приоритет
	|ПОМЕСТИТЬ ТаблОб
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблОб.Имя						КАК Имя,
	|	МАКСИМУМ(ТаблОб.ИмяОбъекта_1) 	КАК ИмяОбъекта_1,
	|	МАКСИМУМ(ТаблОб.ИмяОбъекта_2) 	КАК ИмяОбъекта_2,
	|	ТаблОб.ВидОбъекта,
	|	ТаблОб.Приоритет
	|ПОМЕСТИТЬ ТаблПравил
	|ИЗ
	|	ТаблОб КАК ТаблОб
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблОб.Имя,
	|	ТаблОб.ВидОбъекта,
	|	Приоритет
	|;	
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблПравил.Имя,
	|	ТаблПравил.ИмяОбъекта_1,
	|	ТаблПравил.ИмяОбъекта_2,
	|	ТаблПравил.ВидОбъекта,
	|	ТаблПравил.Приоритет,
	|	ВЫБОР КОГДА  СпрПравилаПоиска.Ссылка ЕСТЬ NULL
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСсылка
	|ИЗ
	|	ТаблПравил КАК ТаблПравил
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_мпд_ПравилаПоискаДанных КАК СпрПравилаПоиска
	|		ПО (ТаблПравил.ИмяОбъекта_1 = СпрПравилаПоиска.ИмяОбъектаПолное_1
	|			И ТаблПравил.ИмяОбъекта_2 = СпрПравилаПоиска.ИмяОбъектаПолное_2
	|			И СпрПравилаПоиска.ВидИнформационнойБазы_1 = &ВидИнформационнойБазы_1
	|			И СпрПравилаПоиска.ВидИнформационнойБазы_2 = &ВидИнформационнойБазы_2)
	|		ИЛИ(ТаблПравил.ИмяОбъекта_1 = СпрПравилаПоиска.ИмяОбъектаПолное_2
	|			И ТаблПравил.ИмяОбъекта_2 = СпрПравилаПоиска.ИмяОбъектаПолное_1
	|			И СпрПравилаПоиска.ВидИнформационнойБазы_1 = &ВидИнформационнойБазы_2
	|			И СпрПравилаПоиска.ВидИнформационнойБазы_2 = &ВидИнформационнойБазы_1)
    |
	|УПОРЯДОЧИТЬ ПО
	|	ВидОбъекта,
	|	Приоритет,
	|	ТаблПравил.Имя
	|ИТОГИ ПО
	|	ВидОбъекта
	|";
	Результат = Запрос.Выполнить();

	// Заполнение дерева объектов	
	КореньДерева = ДеревоОбъектов.ПолучитьЭлементы();
	КореньДерева.Очистить();
	
	ВыборкаВерх = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаВерх.Следующий() Цикл
	
		СтрокаДерева = КореньДерева.Добавить();
		
		ВидОбъекта = ВыборкаВерх.ВидОбъекта;
		СтрокаДерева.Имя = ?(ЗначениеЗаполнено(ВидОбъекта), Строка(ВидОбъекта), "Перечисление");
		Если ЗначениеЗаполнено(ВидОбъекта) Тогда
			КартинкаВида = бит_УправлениеОбъектамиСистемы.ОпределитьКартинкуВидаОбъекта(ВидОбъекта);
		Иначе	
		    КартинкаВида = БиблиотекаКартинок.Перечисление;
		КонецЕсли;
		Если КартинкаВида <> Неопределено Тогда
			СтрокаДерева.Картинка = КартинкаВида;
		КонецЕсли;
		СтрокаДерева.ЭтоГруппа = Истина;
		
		УзелДерева = СтрокаДерева.ПолучитьЭлементы();
		
		Выборка = ВыборкаВерх.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаДерева = УзелДерева.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
			СтрокаДерева.УникальныйИД = Строка(Новый УникальныйИдентификатор);
			
			СтрокаДерева.Записан = Выборка.ЕстьСсылка;
			
		КонецЦикла;
		
	КонецЦикла;   
	
КонецПроцедуры // СформироватьДеревоОбъектов()

// Процедура данные по записанным правилам.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ОбновитьДерево()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидИнформационнойБазы_1", Объект.ВидИнформационнойБазы_1);
	Запрос.УстановитьПараметр("ВидИнформационнойБазы_2", Объект.ВидИнформационнойБазы_2);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СпрПравилаПоиска.ИмяОбъектаПолное_1 КАК ИмяОбъекта_1,
	|	СпрПравилаПоиска.ИмяОбъектаПолное_2 КАК ИмяОбъекта_2
	|ИЗ
	|	Справочник.бит_мпд_ПравилаПоискаДанных КАК СпрПравилаПоиска
	|	
	|ГДЕ
	|	(СпрПравилаПоиска.ВидИнформационнойБазы_1 = &ВидИнформационнойБазы_1
	|		И СпрПравилаПоиска.ВидИнформационнойБазы_2 = &ВидИнформационнойБазы_2)
	|	ИЛИ(СпрПравилаПоиска.ВидИнформационнойБазы_1 = &ВидИнформационнойБазы_2
	|		И СпрПравилаПоиска.ВидИнформационнойБазы_2 = &ВидИнформационнойБазы_1)
	|";
	Результат = Запрос.Выполнить();
	ТаблицаЗаписанныхПравил = Результат.Выгрузить();

	КореньДерева = ДеревоОбъектов.ПолучитьЭлементы();
	Для каждого СтрокаДерева Из КореньДерева Цикл
		
		УзелДерева = СтрокаДерева.ПолучитьЭлементы();
		Для каждого ПодстрокаДр Из УзелДерева Цикл
						
			Отбор = Новый Структура("ИмяОбъекта_1, ИмяОбъекта_2", ПодстрокаДр.ИмяОбъекта_1, ПодстрокаДр.ИмяОбъекта_2);
			НайденныеСтроки = ТаблицаЗаписанныхПравил.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ПодстрокаДр.Записан = Истина;
			Иначе
				Отбор = Новый Структура("ИмяОбъекта_1, ИмяОбъекта_2", ПодстрокаДр.ИмяОбъекта_2, ПодстрокаДр.ИмяОбъекта_1);
				НайденныеСтроки = ТаблицаЗаписанныхПравил.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ПодстрокаДр.Записан = Истина;
				Иначе
					ПодстрокаДр.Записан = Ложь;
				КонецЕсли;     			
			КонецЕсли;
			     		
		КонецЦикла;    		
	
	КонецЦикла;
	
	Элементы.ПравилаПоискаДанных.Обновить();
	Элементы.НазначениеПравилПоискаДанных.Обновить();

КонецПроцедуры // ОбновитьДерево()

// Процедура заполняет таблицу объектов.
// 
// Параметры:
//  ТаблицаОбъектов  		- ТаблицаЗначений.
//  ИспользоватьКОМ 		- Булево.
//  СоединениеИБ    		- COMОбъект.
//  НомерИб 				- Строка.
// 
&НаСервере
Процедура ДобавитьСтрокиВТаблицуОбъектов(ТаблицаОбъектов, ИспользоватьКОМ, СоединениеИБ, НомерИб)

	МетаданныеИБ = ?(ИспользоватьКОМ, СоединениеИБ.Метаданные, Метаданные);
	
	ЗначенияПеречисления = Метаданные.Перечисления.бит_мпд_ВидыОбъектовМетаданных.ЗначенияПеречисления;
	
	Для каждого ЭлПеречисление Из ЗначенияПеречисления Цикл
		
		ИмяВидаОбъекта = ЭлПеречисление.Имя;
		ВидОбъектов    = ЭлПеречисление.Комментарий;
		ВидОбъекта     = Перечисления.бит_мпд_ВидыОбъектовМетаданных[ЭлПеречисление.Имя];
		
		МетаданныеОбъектов = МетаданныеИБ[ВидОбъектов];
		
		Для каждого МетаОбъект Из МетаданныеОбъектов Цикл
			
			СтрокаТабл = ТаблицаОбъектов.Добавить();
			ИмяОбъекта = ИмяВидаОбъекта + "." + МетаОбъект.Имя;
			СтрокаТабл.Имя 						= ИмяОбъекта;
			СтрокаТабл["ИмяОбъекта_" + НомерИб] = ИмяОбъекта;
			СтрокаТабл.ВидОбъекта   			= ВидОбъекта;
			СтрокаТабл.Приоритет = ?(Найти(МетаОбъект.Имя, "бит_") = 0, 0, 1);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокиВТаблицуОбъектов()

// Процедура добавляет элементы в список по измерениям регистра.
// 
// Параметры:
//  СписокОбъектов - СписокЗначений.
//  МетаРегистра   - Объект метаданных.
// 
&НаСервере
Процедура ДополнитьСписокпоИзмерениямРегистра(СписокОбъектов, МетаРегистра)

	Для каждого Измерение Из МетаРегистра.Измерения Цикл
		
		ТипыОбъекта = Измерение.Тип;
		
		// Типы измерений
		Для каждого Тип Из ТипыОбъекта.Типы() Цикл
			
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип);
			Если МетаданныеОбъекта = Неопределено Тогда
				Продолжить;			
			КонецЕсли;
			СписокОбъектов.Добавить(МетаданныеОбъекта.ПолноеИмя());
			
			// Типы реквизитов измерений
			Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			
				ТипыРеквизита = Реквизит.Тип;
				
				Для каждого ТипРекизита Из ТипыРеквизита.Типы() Цикл
					
					МетаРеквизита = Метаданные.НайтиПоТипу(ТипРекизита);
					Если МетаРеквизита = Неопределено Тогда
						Продолжить;			
					КонецЕсли;
					СписокОбъектов.Добавить(МетаРеквизита.ПолноеИмя());
				
				КонецЦикла;
			
			КонецЦикла;
			
		КонецЦикла;	
	
	КонецЦикла;	

КонецПроцедуры // ДополнитьСписокпоИзмерениямРегистра()

// Процедура заполняет список объектов для бюджетирования.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьСписокОбъектовДляБюджетирования()

	ЗначенияПеречисления = Метаданные.Перечисления.бит_мпд_ВидыОбъектовМетаданных.ЗначенияПеречисления;
	
	МетаРегистра = Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам;
	ДополнитьСписокпоИзмерениямРегистра(СписокОбъектовДляБюджетирования, МетаРегистра);
	
КонецПроцедуры // ЗаполнитьСписокОбъектовДляБюджетирования()                                                        
															
// Функция Процедура заполняет список объектов для МСФО.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьСписокОбъектовДляМСФО()

	МетаПвх = Метаданные.ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	МассивТипов = МетаПвх.Тип.Типы();
	
	Для каждого ЭлТип Из МассивТипов Цикл
	
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ЭлТип);
		Если МетаданныеОбъекта = Неопределено Тогда
			Продолжить;			
		КонецЕсли;
		СписокОбъектовДляМСФО.Добавить(МетаданныеОбъекта.ПолноеИмя());
		
	КонецЦикла;  	
	
	МетаРегистра = Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2;
	ДополнитьСписокпоИзмерениямРегистра(СписокОбъектовДляМСФО, МетаРегистра);
		
КонецПроцедуры // ЗаполнитьСписокОбъектовДляМСФО()															

// Процедура заполняет дерево объектов и дополнительные таблицы.
// 
&НаСервере
Процедура ЗаполнитьВсеТаблицы(мСостояниеКОМ_1, мСостояниеКОМ_2, мВидИбСоединенияКОМ_1, мВидИбСоединенияКОМ_2)
	
	СформироватьДеревоОбъектов(мСостояниеКОМ_1,
							мСостояниеКОМ_2,
							Объект.ВидИнформационнойБазы_1,
							Объект.ВидИнформационнойБазы_2,
							мВидИбСоединенияКОМ_1,
							мВидИбСоединенияКОМ_2);
	
	ЗаполнитьПравилаПоиска();
	
	ЗаполнитьСоответствиеЗначений(мСостояниеКОМ_1,
								мСостояниеКОМ_2,
								мВидИбСоединенияКОМ_1, 
								мВидИбСоединенияКОМ_2);
	 	
КонецПроцедуры // ЗаполнитьВсеТаблицы()
							
#КонецОбласти

#Область СервеныеПроцедурыИФункцииДляРаботыСТаблицейПравилаПоиска

// Процедура заполняет правила поиска данных.
// 
// Параметры:
//  ИД 		- Число.
//  Очищать - Булево (по умолчанию = Истина).
// 
&НаСервере
Процедура ЗаполнитьПравилаПоискаДляСтрокиДереваОбъектов(ИД, Очищать = Истина)

	СпособыПоискаДанных = Перечисления.бит_мпд_СпособыПоискаДанных;
	                      
	ТекущиеДанныеДерева = ДеревоОбъектов.НайтиПоИдентификатору(ИД);
	ОбъектУникальныйИД  = ТекущиеДанныеДерева.УникальныйИД;
	
	Если Очищать Тогда
		ОтборСтрок = Новый Структура("УникальныйИД", ОбъектУникальныйИД);
		НайденныеСтроки = ТаблицаПравилаПоиска.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаТабл Из НайденныеСтроки Цикл
			ТаблицаПравилаПоиска.Удалить(СтрокаТабл);			
		КонецЦикла;   	
	КонецЕсли;        			 
	
	Если ТекущиеДанныеДерева.ВидОбъекта = Перечисления.бит_мпд_ВидыОбъектовМетаданных.Перечисление Тогда
		СтрокаПравил = ТаблицаПравилаПоиска.Добавить();
		СтрокаПравил.СпособПоискаДанных = СпособПоискаДанныхДляПеречислений;
		СтрокаПравил.Приоритет 			= 0;
		СтрокаПравил.УникальныйИД 		= ОбъектУникальныйИД;
		Возврат;
	КонецЕсли;	
	
	// По внутренним идентификаторам
	ОтборПоСпособу = Новый Структура("СпособПоискаДанных", СпособыПоискаДанных.ПоВнутреннимИдентификаторам);
	НайденныеСтроки = ТаблицаПравилПоискаПоУмолчанию.НайтиСтроки(ОтборПоСпособу);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаТабл = НайденныеСтроки[0];
		Если СтрокаТабл.Выбран Тогда
			СтрокаПравил = ТаблицаПравилаПоиска.Добавить();
			СтрокаПравил.СпособПоискаДанных = СтрокаТабл.СпособПоискаДанных;
			СтрокаПравил.Приоритет 			= СтрокаТабл.Приоритет;
			СтрокаПравил.УникальныйИД 		= ОбъектУникальныйИД;
		КонецЕсли;             		       			
	КонецЕсли;  

	СтруктураИмени = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта((ТекущиеДанныеДерева.Имя));
	МетаОбъекта    = Метаданные[СтруктураИмени.ИмяКоллекции][СтруктураИмени.ИмяОбъекта];
	
	МетаСтандартныеРеквизиты = МетаОбъекта.СтандартныеРеквизиты;
	
	Для каждого СтандартныйРеквизит Из МетаСтандартныеРеквизиты Цикл
		
		ИмяРеквизита = СтандартныйРеквизит.Имя; 
		
		ОтборПоИмени = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		НайденныеСтроки = ТаблицаПравилПоискаПоУмолчанию.НайтиСтроки(ОтборПоИмени);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТабл = НайденныеСтроки[0];
			Если СтрокаТабл.Выбран Тогда
				
				СтрокаПравил = ТаблицаПравилаПоиска.Добавить();
				СтрокаПравил.СпособПоискаДанных = СтрокаТабл.СпособПоискаДанных;
				СтрокаПравил.Приоритет 			= СтрокаТабл.Приоритет;
				СтрокаПравил.ИмяРеквизита_1 	= ИмяРеквизита;
				СтрокаПравил.ИмяРеквизита_2 	= ИмяРеквизита;
				СтрокаПравил.УникальныйИД 		= ОбъектУникальныйИД;       			
				
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПравилаПоискаДляСтрокиДереваОбъектов()

// Процедура заполняет правила поиска данных.
// 
// Параметры:
//  ИД - Число
// 
&НаСервере
Процедура ЗаполнитьПравилаПоиска(ИД = Неопределено)

	СпособыПоискаДанных = Перечисления.бит_мпд_СпособыПоискаДанных;
	                      
	Если ИД <> Неопределено Тогда
		
		ЗаполнитьПравилаПоискаДляСтрокиДереваОбъектов(ИД);
		
	Иначе
		
		ТаблицаПравилаПоиска.Очистить();
		
		КореньДерева = ДеревоОбъектов.ПолучитьЭлементы();
		Для каждого СтрокаДерева Из КореньДерева Цикл
			
			УзелДерева = СтрокаДерева.ПолучитьЭлементы();
			Для каждого ПодстрокаДерева Из УзелДерева Цикл
						 			
				Если ЗначениеЗаполнено(ПодстрокаДерева.ИмяОбъекта_1) 
					И ЗначениеЗаполнено(ПодстрокаДерева.ИмяОбъекта_2) Тогда
					
					ИД = ПодстрокаДерева.ПолучитьИдентификатор();
					ЗаполнитьПравилаПоискаДляСтрокиДереваОбъектов(ИД, Ложь);
				
				КонецЕсли; 
			
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьПравилаПоиска()

#КонецОбласти

#Область СервеныеПроцедурыИФункцииДляРаботыСТаблицейСоответствиеЗначений

// Процедура заполняет соответствие значений.
// 
// Параметры:
//  СтруктураПодключения - Структура.
//  ИД 		 			 - Число.
//  Очищать 		 	 - Булево (По умолчанию = Истина).
// 
&НаСервере
Процедура ЗаполнитьСоответсвиеЗначенийДляСтрокиДереваОбъектов(СостояниеКОМ_1, СостояниеКОМ_2, ВидПодключеннойИБ_1, ВидПодключеннойИБ_2, ИД, Очищать = Истина)

	ПеречСостоянияПодключения = Перечисления.бит_мпд_СостоянияПодключенияИБ;
		
	ТекущиеДанныеДерева = ДеревоОбъектов.НайтиПоИдентификатору(ИД);
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	ТекущиеДанныеДерева.ЕстьНесоответствия = Ложь;
	
	ВидОбъекта   = ТекущиеДанныеДерева.ВидОбъекта;
	ИмяОбъектаПолное_1 = ТекущиеДанныеДерева.ИмяОбъекта_1;
	ИмяОбъектаПолное_2 = ТекущиеДанныеДерева.ИмяОбъекта_2;
	Если ВидОбъекта = Перечисления.бит_мпд_ВидыОбъектовМетаданных.ПустаяСсылка() 
		ИЛИ ВидОбъекта <> Перечисления.бит_мпд_ВидыОбъектовМетаданных.Перечисление
		ИЛИ Не ЗначениеЗаполнено(ИмяОбъектаПолное_1)
		ИЛИ Не ЗначениеЗаполнено(ИмяОбъектаПолное_2) Тогда
		Возврат;
	КонецЕсли;	
	
	// Очистка по текущему объекту
	ОбъектУникальныйИД  = ТекущиеДанныеДерева.УникальныйИД;
	Если Очищать Тогда
		ОтборСтрок = Новый Структура("УникальныйИД", ОбъектУникальныйИД);
		НайденныеСтроки = ТаблицаСоответствиеЗначений.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаТабл Из НайденныеСтроки Цикл
			ТаблицаСоответствиеЗначений.Удалить(СтрокаТабл);			
		КонецЦикла;
	КонецЕсли;
	
	фТекстОшибки = Неопределено;
	СоединениеИБ_1 = бит_мпд_ВнешниеИсточникиСервер.ПолучитьСоединениеИБ(СостояниеКОМ_1, Объект.ВидИнформационнойБазы_1, ВидПодключеннойИБ_1, "КОМ", АдресКомОбъекта_1, фТекстОшибки);
	СоединениеИБ_2 = бит_мпд_ВнешниеИсточникиСервер.ПолучитьСоединениеИБ(СостояниеКОМ_2, Объект.ВидИнформационнойБазы_2, ВидПодключеннойИБ_2, "КОМ", АдресКомОбъекта_2, фТекстОшибки);
	
	Если СостояниеКОМ_1 = ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена 
		ИЛИ СостояниеКОМ_2 = ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена Тогда
		Возврат;
	КонецЕсли;
		
	МетаданныеИБ_1 = ?(СостояниеКОМ_1 = ПеречСостоянияПодключения.ТекущаяБаза, Метаданные, СоединениеИБ_1.Метаданные);
	МетаданныеИБ_2 = ?(СостояниеКОМ_2 = ПеречСостоянияПодключения.ТекущаяБаза, Метаданные, СоединениеИБ_2.Метаданные);
	
	СтруктураИмени  = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта((ИмяОбъектаПолное_1));
	ИмяОбъекта_1    = СтруктураИмени.ИмяОбъекта;
	ИмяКоллекции_1  = СтруктураИмени.ИмяКоллекции;
	СтруктураИмени  = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта((ИмяОбъектаПолное_2));
	ИмяОбъекта_2    = СтруктураИмени.ИмяОбъекта;
	ИмяКоллекции_2  = СтруктураИмени.ИмяКоллекции;
	
	МетаОбъекта_1 = МетаданныеИБ_1[ИмяКоллекции_1][ИмяОбъекта_1];
	МетаОбъекта_2 = МетаданныеИБ_2[ИмяКоллекции_2][ИмяОбъекта_2];

	// Описание типов: Строка
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(255);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, , КС);
	
	// Формирование таблицы сравнения значений
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Имя"		 , ОписаниеСтрока);
	ТаблицаОбъектов.Колонки.Добавить("ИмяЗначения_1", ОписаниеСтрока);
	ТаблицаОбъектов.Колонки.Добавить("ИмяЗначения_2", ОписаниеСтрока);
	
	Для каждого ЗначениеПеречисления Из МетаОбъекта_1.ЗначенияПеречисления Цикл
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Имя 	      = ЗначениеПеречисления.Имя;
		НоваяСтрока.ИмяЗначения_1 = ЗначениеПеречисления.Имя;
	КонецЦикла;
	Для каждого ЗначениеПеречисления Из МетаОбъекта_2.ЗначенияПеречисления Цикл
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Имя 	      = ЗначениеПеречисления.Имя;
		НоваяСтрока.ИмяЗначения_2 = ЗначениеПеречисления.Имя;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Имя,
	|	ТаблицаОбъектов.ИмяЗначения_1,
	|	ТаблицаОбъектов.ИмяЗначения_2
	|ПОМЕСТИТЬ ТаблОб
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблОб.Имя 						КАК Имя,
	|	МАКСИМУМ(ТаблОб.ИмяЗначения_1) 	КАК ИмяЗначения_1,
	|	МАКСИМУМ(ТаблОб.ИмяЗначения_2) 	КАК ИмяЗначения_2
	|ИЗ
	|	ТаблОб КАК ТаблОб
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблОб.Имя
	|УПОРЯДОЧИТЬ ПО
	|	Имя
	|";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Заполнения таблицы соответствия на форме
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовоеСоответствие = ТаблицаСоответствиеЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСоответствие, Выборка);
		НовоеСоответствие.УникальныйИД = ОбъектУникальныйИД;
		
		Если Не ТекущиеДанныеДерева.ЕстьНесоответствия 
			И (Не ЗначениеЗаполнено(НовоеСоответствие.ИмяЗначения_1)
			ИЛИ Не ЗначениеЗаполнено(НовоеСоответствие.ИмяЗначения_2)) Тогда
			
			ТекущиеДанныеДерева.ЕстьНесоответствия = Истина;
			
		КонецЕсли;
		
	КонецЦикла;		
		
КонецПроцедуры // ЗаполнитьСоответсвиеЗначений()

// Процедура заполняет соответствие значений.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьСоответствиеЗначений(СостояниеКОМ_1, СостояниеКОМ_2, ВидПодключеннойИБ_1, ВидПодключеннойИБ_2, ИД = Неопределено)

	Если ИД <> Неопределено Тогда
		
		ЗаполнитьСоответсвиеЗначенийДляСтрокиДереваОбъектов(СостояниеКОМ_1, 
															СостояниеКОМ_2, 
															ВидПодключеннойИБ_1, 
															ВидПодключеннойИБ_2, 
															ИД);		
		
	Иначе
		
		ТаблицаСоответствиеЗначений.Очистить();
		
		КореньДерева = ДеревоОбъектов.ПолучитьЭлементы();
		Для каждого СтрокаДерева Из КореньДерева Цикл
			
			// Временное условие
			Если СтрокаДерева.Имя <> "Перечисление" Тогда
				Продолжить;			
			КонецЕсли;
			
			УзелДерева = СтрокаДерева.ПолучитьЭлементы();
			Для каждого ПодстрокаДерева Из УзелДерева Цикл
						 			
				Если ЗначениеЗаполнено(ПодстрокаДерева.ИмяОбъекта_1) 
					И ЗначениеЗаполнено(ПодстрокаДерева.ИмяОбъекта_2) Тогда
										
					ИД = ПодстрокаДерева.ПолучитьИдентификатор();
					ЗаполнитьСоответсвиеЗначенийДляСтрокиДереваОбъектов(СостояниеКОМ_1, 
																		СостояниеКОМ_2, 
																		ВидПодключеннойИБ_1, 
																		ВидПодключеннойИБ_2, 
																		ИД, 
																		Ложь);		
				
				КонецЕсли; 
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьСоответствиеЗначений()

// Функция формирует список значений перечисления.
// 
// Параметры:
//  СостояниеКОМ  		- ПеречислениеСсылка.бит_мпд_СостоянияПодключенияИБ.
//  ВидПодключеннойИБ   - СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//  НомерИБ             - Строка.
//  ИД			        - Число.
//  
// Возвращаемое значение:
//   СписокЗначений.
// 
&НаСервере
Функция ПолучитьСписокДанныхВыбора(СостояниеКОМ, ВидПодключеннойИБ, ИмяКоллекции, НомерИБ, ИД)

	ДанныеВыбора = Новый СписокЗначений;
	
	ТекущиеДанныеДерева = ДеревоОбъектов.НайтиПоИдентификатору(ИД);
	Если ТекущиеДанныеДерева <> Неопределено Тогда
		
		ПеречСостоянияПодключения = Перечисления.бит_мпд_СостоянияПодключенияИБ;
		
		фТекстОшибки 	 = Неопределено;
		АдресКомОбъекта  = ЭтаФорма["АдресКомОбъекта_" + НомерИБ];
		ВидТекущейИБ 	 = Объект["ВидИнформационнойБазы_" + НомерИБ];
		ИмяОбъектаПолное = ТекущиеДанныеДерева["ИмяОбъекта_" + НомерИБ];
		
		СоединениеИБ = бит_мпд_ВнешниеИсточникиСервер.ПолучитьСоединениеИБ(СостояниеКОМ, ВидТекущейИБ, ВидПодключеннойИБ, "КОМ", АдресКомОбъекта, фТекстОшибки);
		
		Если СостояниеКОМ <> ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена Тогда
			
			ЭтоТекущая = СостояниеКОМ = Перечисления.бит_мпд_СостоянияПодключенияИБ.ТекущаяБаза;
				
			МетаданныеИБ = ?(СостояниеКОМ = ПеречСостоянияПодключения.ТекущаяБаза, Метаданные, СоединениеИБ.Метаданные);
			
			СтруктураИмени  = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта((ИмяОбъектаПолное));
			ИмяОбъекта    		 = СтруктураИмени.ИмяОбъекта;
			ИмяКоллекцииОбъектов = СтруктураИмени.ИмяКоллекции;
			ИмяКласса 	  		 = СтруктураИмени.ИмяКласса;
			
			Если ИмяКоллекции = "Предопределенные" И ИмяКоллекцииОбъектов = "Справочники" Тогда
				
				// КоллекцияПредопределенных = ?(ЭтоТекущая
				// 								, Справочники[ИмяОбъекта]
				// 								, СоединениеИБ[ИмяКоллекцииОбъектов][ИмяОбъекта]);
				// Выборка = КоллекцияПредопределенных.Выбрать();
				// Пока Выборка.Следующий() Цикл
				// 	Если Выборка.Предопределенный Тогда
				// 		ДанныеВыбора.Добавить(Выборка.Ссылка); 					
				// 	КонецЕсли;				
				// КонецЦикла;
				
			ИначеЕсли ИмяКоллекции = "ЗначенияПеречисления" Тогда
				
				МетаОбъекта = МетаданныеИБ[ИмяКоллекцииОбъектов][ИмяОбъекта];
				Для каждого ЭлементМетаданных Из МетаОбъекта[ИмяКоллекции] Цикл
					ДанныеВыбора.Добавить(ЭлементМетаданных.Имя);
				КонецЦикла; 				
			
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	Возврат ДанныеВыбора;
	
КонецФункции // ПолучитьСписокДанныхВыбора()

#КонецОбласти

#Область СервеныеПроцедурыИФункцииЗаписиПравил

// Процедура формирует запись регистра "бит_мпд_НазначениеПравилПоискаДанных".
// 
// Параметры:
//  ВидИб_1  			- СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//  ВидИб_2  		    - СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//  ИмяОбъектаИсточник  - Строка.
//  ПравилоПоискаДанных - СправочникСсылка.бит_мпд_ПравилаПоискаДанных.
// 
&НаСервере
Процедура СформироватьЗаписьРегистраНазначений(ВидИб_1, ВидИб_2, ИмяОбъектаИсточник, ПравилоПоискаДанных)
	
	НоваяЗапись = РегистрыСведений.бит_мпд_НазначениеПравилПоискаДанных.СоздатьМенеджерЗаписи();
	НоваяЗапись.ВидИнформационнойБазыИсточник = ВидИб_1;
	НоваяЗапись.ВидИнформационнойБазыПриемник = ВидИб_2;
	НоваяЗапись.ИмяОбъектаИсточник 			  = ИмяОбъектаИсточник;
	НоваяЗапись.ПравилоПоискаДанных 		  = ПравилоПоискаДанных;
	Попытка
		НоваяЗапись.Записать();
	Исключение
	КонецПопытки;	

КонецПроцедуры // СформироватьЗаписьРегистраНазначений()

// Процедура записывает правила посика данных.
// 
// Параметры:
// 	 Нет
// 
&НаСервере
Процедура ЗаписатьПравилаПоискаДанных()

	КореньДерева = ДеревоОбъектов.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из КореньДерева Цикл
		
		УзелДерева = СтрокаДерева.ПолучитьЭлементы();
	
		Для каждого ПодстрокаДерева Из УзелДерева Цикл
			
			// Записываем только выбранные
			Если Не ПодстрокаДерева.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			
			//////////////////////////////////////////////////////////
			// Запись элемента справочника "Правила поиска данных".
			
			// Основные реквизиты
			ВидОбъекта 	 = ПодстрокаДерева.ВидОбъекта;
			ИмяОбъекта_1 = ПодстрокаДерева.ИмяОбъекта_1;
			ИмяОбъекта_2 = ПодстрокаДерева.ИмяОбъекта_2;
			УникальныйИД = ПодстрокаДерева.УникальныйИД;
			
			ЭтоПеречисление = ВидОбъекта  = Перечисления.бит_мпд_ВидыОбъектовМетаданных.Перечисление;
			ЗаполнятьСоответствиеЗначений = Ложь;
			ПеречПоСоответствиюЗначений   = Перечисления.бит_мпд_СпособыПоискаДанных.ПоСоответствиюИмен;
			
			ИменаЗаполнены = ЗначениеЗаполнено(ИмяОбъекта_1) И ЗначениеЗаполнено(ИмяОбъекта_2);
	
			Если Не ИменаЗаполнены Тогда
				Продолжить;
			КонецЕсли;   			
			
			НаименованиеСпр = ?(ИмяОбъекта_1 = ИмяОбъекта_2, 
								ИмяОбъекта_1, 
								ИмяОбъекта_1 + " -> " + ИмяОбъекта_2);
									
			// Заполнение элемента справочника "Правила поиска данных".
		    СправочникПравил = Справочники.бит_мпд_ПравилаПоискаДанных.СоздатьЭлемент();
			СправочникПравил.Наименование 			 = НаименованиеСпр;
			СправочникПравил.ВидИнформационнойБазы_1 = Объект.ВидИнформационнойБазы_1;
			СправочникПравил.ВидИнформационнойБазы_2 = Объект.ВидИнформационнойБазы_2;
			СправочникПравил.ИмяОбъектаПолное_1 	 = ИмяОбъекта_1;
			СправочникПравил.ИмяОбъектаПолное_2 	 = ИмяОбъекта_2;
			СправочникПравил.ВидОбъекта_1			 = ВидОбъекта;
			СправочникПравил.ВидОбъекта_2 			 = ВидОбъекта;			
									
			// Отбор по текущему правилу
			ОтборИд = Новый Структура("УникальныйИД", УникальныйИД);
			
			// Запись табличной части "Правила поиска"
			НайденныеСтрПравил = ТаблицаПравилаПоиска.НайтиСтроки(ОтборИд);
			Для каждого СтрокаПравил Из НайденныеСтрПравил Цикл
				
				СтрПравил = СправочникПравил.ПравилаПоиска.Добавить();
				ЗаполнитьЗначенияСвойств(СтрПравил, СтрокаПравил);
				
				Если ЭтоПеречисление И СтрокаПравил.СпособПоискаДанных = ПеречПоСоответствиюЗначений Тогда
					ЗаполнятьСоответствиеЗначений = Истина;				
				КонецЕсли;
				
			КонецЦикла;
			
			// По умолчанию
			Если СправочникПравил.ПравилаПоиска.Количество() = 0 Тогда
				
				 СтрПравил = СправочникПравил.ПравилаПоиска.Добавить();
				 СтрПравил.СпособПоискаДанных = Перечисления.бит_мпд_СпособыПоискаДанных.ПоВнутреннимИдентификаторам;
				 СтрПравил.Приоритет = 0;
				 
				 Если ВидОбъекта = Перечисления.бит_мпд_ВидыОбъектовМетаданных.Справочник Тогда
					 
					 СтрПравил = СправочникПравил.ПравилаПоиска.Добавить();
					 СтрПравил.СпособПоискаДанных = Перечисления.бит_мпд_СпособыПоискаДанных.ПоРеквизитам;
					 СтрПравил.ИмяРеквизита_1 = "Наименование";
					 СтрПравил.ИмяРеквизита_2 = "Наименование";
					 СтрПравил.Приоритет = 1;
					 
				 КонецЕсли;
				
			КонецЕсли;	
			
			// Запись табличной части "Соответствие значений".
			Если ЗаполнятьСоответствиеЗначений Тогда
				
				НайденныеСтрСоответствий = ТаблицаСоответствиеЗначений.НайтиСтроки(ОтборИд);
				Для каждого СтрокаСоответствий Из НайденныеСтрСоответствий Цикл
					СтрСоответствий = СправочникПравил.СоответствиеИмен.Добавить();
					ЗаполнитьЗначенияСвойств(СтрСоответствий, СтрокаСоответствий);			
				КонецЦикла; 
				
			КонецЕсли;     			
			                   			
			// Запись элемента справочника
			ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(СправочникПравил);
			Если ДействиеВыполнено Тогда
				ПодстрокаДерева.Выбран  = Ложь;
				ПодстрокаДерева.Записан = Истина;
			Иначе
				Продолжить;
			КонецЕсли; 
			
			
			//////////////////////////////////////////////////////////
			// Запись в регистр "бит_мпд_НазначениеПравилПоискаДанных".
			
			// "Прямой" или "Прямой и обратный"
			Если СпособЗаписиНазначенийПравилПоиска <> "Обратный" Тогда 
				
				СформироватьЗаписьРегистраНазначений(Объект.ВидИнформационнойБазы_1, 
													Объект.ВидИнформационнойБазы_2,
													ПодстрокаДерева.ИмяОбъекта_1,
													СправочникПравил.Ссылка);   				
			КонецЕсли;
			
			// "Обратный" или "Прямой и обратный"
			Если СпособЗаписиНазначенийПравилПоиска <> "Прямой" Тогда
				
				СформироватьЗаписьРегистраНазначений(Объект.ВидИнформационнойБазы_2, 
													Объект.ВидИнформационнойБазы_1,
													ПодстрокаДерева.ИмяОбъекта_2,
													СправочникПравил.Ссылка);				
			КонецЕсли;
						
		КонецЦикла; 	
	
	КонецЦикла;
	
	Элементы.ПравилаПоискаДанных.Обновить();
	Элементы.НазначениеПравилПоискаДанных.Обновить();

КонецПроцедуры // ЗаписатьПравилаПоискаДанных() 

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанавливает отбор для дополнительных таблиц 
// по текущему уникальному идентификатору объекта.
// 
// Параметры:
// Нет.
// 
&НаКлиенте
Процедура УстановитьОтборДляДополнительныхТаблиц()

	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	ИскомыйИД = ?(ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа, 
					"НесуществующийИД", 
					ТекущиеДанные.УникальныйИД);
	
	СтруктураОтбор = Новый Структура("УникальныйИД", ИскомыйИД);
	ФиксСтруктура  = Новый ФиксированнаяСтруктура(СтруктураОтбор);
	
	Элементы.ТаблицаПравилаПоиска.ОтборСтрок 		= ФиксСтруктура;
	Элементы.ТаблицаСоответствиеЗначений.ОтборСтрок = ФиксСтруктура;
	
КонецПроцедуры // УстановитьОтборДляДополнительныхТаблиц()

// Процедура добавляет или копирует строку в дополнительной таблице.
// 
// Параметры:
//  ИмяДопТаблицы - Строка
//  Копирование   - Булево
//  Отказ 		  - Булево
// 
&НаКлиенте
Процедура ДобавитьСкопироватьСтрокуДополнительнойТаблицы(ИмяДопТаблицы, Копирование, Отказ)

	Отказ = Истина;
	
	ТекущиеДанныеДерева = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено ИЛИ ТекущиеДанныеДерева.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанныеТабл = Элементы[ИмяДопТаблицы].ТекущиеДанные;
	
	НоваяСтрока = ЭтаФорма[ИмяДопТаблицы].Добавить();
	НоваяСтрока.УникальныйИД = ТекущиеДанныеДерева.УникальныйИД;
	       	
	Если Копирование И ТекущиеДанныеТабл <> Неопределено Тогда   		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанныеТабл);	
	КонецЕсли;
	
	// Установим курсор на новую строку таблицы
	ИдСтроки = НоваяСтрока.ПолучитьИдентификатор();
	Элементы[ИмяДопТаблицы].ТекущаяСтрока = ИдСтроки;	

КонецПроцедуры // ДобавитьСкопироватьСтрокуДополнительнойТаблицы()

// Процедура обрабатывает флаги дерева объектов.
// 
// Параметры:
//  ВариантУстановки - Число
// 
&НаКлиенте
Процедура ОбработатьФлаги(ВариантУстановки)

	КореньДерева = ДеревоОбъектов.ПолучитьЭлементы();
	Для каждого СтрокаДерева Из КореньДерева Цикл
		
		ЗначениеФлагаГруппы = ?(ВариантУстановки = 1, Истина, Ложь);
		СтрокаДерева.Выбран = ЗначениеФлагаГруппы;
				
		УзелДерева = СтрокаДерева.ПолучитьЭлементы();
		Для каждого ПодстрокаДерева Из УзелДерева Цикл
			
			Если Не ЗначениеЗаполнено(ПодстрокаДерева.ИмяОбъекта_1)
				ИЛИ Не ЗначениеЗаполнено(ПодстрокаДерева.ИмяОбъекта_2) 
				ИЛИ ВариантУстановки = 0 Тогда
			
				ПодстрокаДерева.Выбран = Ложь;
				
			ИначеЕсли ВариантУстановки = 1 Тогда
				
				ПодстрокаДерева.Выбран = Истина;
				
			ИначеЕсли ВариантУстановки = 2 Тогда 				
				
				ПодстрокаДерева.Выбран = НЕ ПодстрокаДерева.Выбран;
				
			КонецЕсли;
									 		
		КонецЦикла;   		
	
	КонецЦикла;	

КонецПроцедуры // ОбработатьФлаги()

// Процедура осуществляет выбор объекта метаданных.
// 
// Параметры:
//  Элемент
//  ИмяТекущего  - Строка.
//  ВидИБ        - СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте
Процедура ВыбратьОбъектМетаданных(Элемент, НомерИБ, СостояниеПодключенияКОМ, ВидПодключеннойИБ, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		                
	ВидТекущейИБ = Объект["ВидИнформационнойБазы_" + НомерИБ];
	ИмяТекущего  = ТекущиеДанные["ИмяОбъекта_" + НомерИБ];
	
	Если Не ЗначениеЗаполнено(ВидТекущейИБ) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнено значение вида информационной базы.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ХранилищеДеревоОбъектов = Неопределено;
	// ХранилищеДеревоОбъектов = ЭтаФорма["ХранилищеДеревоОбъектов_" + НомерИБ];	
	АдресКомОбъекта 		= ЭтаФорма["АдресКомОбъекта_" + НомерИБ];
																	
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе"	 , Истина);
	ПараметрыФормы.Вставить("ХранилищеДеревоОбъектов", ХранилищеДеревоОбъектов);
	ПараметрыФормы.Вставить("ИмяТекущего" 		 	 , ИмяТекущего);
	ПараметрыФормы.Вставить("СостояниеПодключенияКОМ", СостояниеПодключенияКОМ);
	ПараметрыФормы.Вставить("ВидТекущейИБ" 			 , ВидТекущейИБ);
	ПараметрыФормы.Вставить("ВидПодключеннойИБ"	 	 , ВидПодключеннойИБ);
	ПараметрыФормы.Вставить("АдресКомОбъекта"	 	 , АдресКомОбъекта);
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент"		 , Элемент);
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДопПараметры.Вставить("НомерИБ"		 , НомерИБ);
												   
	Оповещение_ОбъектМетаданныхНВ = Новый ОписаниеОповещения("ОбъектМетаданныхНачалоВыбораЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.бит_мпд_ФормаВыбораОбъектовМетаданныхУправляемая", ПараметрыФормы, Элемент, , , 
							, Оповещение_ОбъектМетаданныхНВ, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры // ВыбратьОбъектМетаданных()

// Процедура обработчик оповещения "ОбъектМетаданныхНачалоВыбораЗавершение".
// 
// Параметры:
//  СтруктураРезультата - Структура.
//  ДопПараметры 		- Структура.
// 
&НаКлиенте
Процедура ОбъектМетаданныхНачалоВыбораЗавершение(СтруктураРезультата, ДопПараметры) Экспорт
	  	
	Элемент 	  = ДопПараметры.Элемент;
	ТекущиеДанные = ДопПараметры.ТекущиеДанные;
	НомерИБ 	  = ДопПараметры.НомерИБ;
	
	ИмяОбъекта = "ИмяОбъекта_" + НомерИБ;
	мЗнчИмяОбъекта = ТекущиеДанные[ИмяОбъекта]; 
	
	Если ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
		
		ТекущиеДанные[ИмяОбъекта] = СтруктураРезультата.ИмяОбъектаПолное;
		// Объект["ВидОбъекта_" + НомерИБ] 	   = СтруктураРезультата.ВидОбъекта;
		ЭтаФорма["АдресКомОбъекта_" + НомерИБ] = СтруктураРезультата.АдресКомОбъекта;
		
		// ХранилищеДеревоОбъектов = СтруктураРезультата.ХранилищеДеревоОбъектов;
		// ЭтаФорма["ХранилищеДеревоОбъектов_" + НомерИБ] = ХранилищеДеревоОбъектов;
		
		СостояниеПодключенияКОМ = СтруктураРезультата.СостояниеПодключенияКОМ;
		ВидПодключеннойИБ 	 	= СтруктураРезультата.ВидПодключеннойИБ;
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено И мЗнчИмяОбъекта <> ТекущиеДанные[ИмяОбъекта] Тогда   		
		ОбработатьИзмененияИмениОбъекта(ТекущиеДанные, ИмяОбъекта, НомерИБ);		
	КонецЕсли;  
	
КонецПроцедуры // ОбъектМетаданныхНачалоВыбораЗавершение()

// Процедура отмечает (Выбран = Истина) строки дерева по списку.
// 
// Параметры:
//  КореньДерева  			 - ДанныеФормыКоллекция.
//  СписокОтмечаемыхОбъектов - СписокЗначений.
// 
&НаКлиенте
Процедура ОтметитьНеобходимыеСтрокиДерева(КореньДерева, СписокОтмечаемыхОбъектов)

	Для каждого СтрокаДерева Из КореньДерева Цикл
		
		Если СтрокаДерева.Имя = "Справочник" Тогда
			
			УзелДерева = СтрокаДерева.ПолучитьЭлементы();
			Для каждого СтрокаДерева Из УзелДерева Цикл
				
				Если Не СтрокаДерева.Записан
					И ЗначениеЗаполнено(СтрокаДерева.ИмяОбъекта_1) И ЗначениеЗаполнено(СтрокаДерева.ИмяОбъекта_2)
					И (СписокОтмечаемыхОбъектов.НайтиПоЗначению(СтрокаДерева.Имя) <> Неопределено 
						ИЛИ СписокОтмечаемыхОбъектов.НайтиПоЗначению(СтрокаДерева.ИмяОбъекта_1) <> Неопределено
						ИЛИ СписокОтмечаемыхОбъектов.НайтиПоЗначению(СтрокаДерева.ИмяОбъекта_1) <> Неопределено) Тогда
					СтрокаДерева.Выбран = Истина;				
				КонецЕсли;
				
			КонецЦикла;
			
			Прервать;
		
		КонецЕсли;
		
	КонецЦикла;  	

КонецПроцедуры // ОтметитьНеобходимыеСтрокиДерева()

// Процедура обрабатывает изменение вида ИБ.
// 
// Параметры:
//  НомерВидаИБ - Строка
// 
&НаКлиенте
Процедура ОбработатьИзменениеВидаИБ(НомерВидаИБ)

	ТекущийВидИБ = Объект["ВидИнформационнойБазы_" + НомерВидаИБ];
	СтарыйВидИБ  = ?(НомерВидаИБ = "1", мВидИБ_1, мВидИБ_2);
	
	Если ТекущийВидИБ <> СтарыйВидИБ Тогда
		
		Если ДеревоОбъектов.ПолучитьЭлементы().Количество() > 0 
			ИЛИ ТаблицаПравилаПоиска.Количество() > 0
			ИЛИ ТаблицаСоответствиеЗначений.Количество() > 0 Тогда
		
			ТекстВопроса = "ru = 'Изменился вид ИБ. Будут очищены дополнительные таблицы и дерево объектов. Продолжить?'";
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("НомерВидаИБ", НомерВидаИБ);
			ОписаниеОповещения = Новый ОписаниеОповещения("Вопрос1ОчисткиТаблицЗавершение", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15);
			
		Иначе
			
			Если НомерВидаИБ = "1" Тогда
				мВидИБ_1 = ТекущийВидИБ;
			Иначе	
			    мВидИБ_2 = ТекущийВидИБ;
			КонецЕсли;
			УстановитьОтборыДинамическихСписков();
			
		КонецЕсли;	
					
	КонецЕсли;

КонецПроцедуры // ОбработатьИзменениеВидаИБ()

// Процедура обработчик оповещения "Вопрос1ОчисткиТаблицЗавершение".
// 
// Параметры:
//  РезультатВопроса - Произвольный.
//  ДопПараметры 	 - Структура.
// 
&НаКлиенте
Процедура Вопрос1ОчисткиТаблицЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	  	
	НомерВидаИБ = ДопПараметры.НомерВидаИБ;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ТаблицаПравилаПоиска.Очистить();
		ТаблицаСоответствиеЗначений.Очистить();
		ДеревоОбъектов.ПолучитьЭлементы().Очистить();
		
		Если НомерВидаИБ = "1" Тогда
			мВидИБ_1 = Объект["ВидИнформационнойБазы_" + НомерВидаИБ];
		Иначе	
		    мВидИБ_2 = Объект["ВидИнформационнойБазы_" + НомерВидаИБ];
		КонецЕсли;
		
	Иначе
		
		Объект["ВидИнформационнойБазы_" + НомерВидаИБ] = ?(НомерВидаИБ = "1", мВидИБ_1, мВидИБ_2);
		
	КонецЕсли;
	
	УстановитьОтборыДинамическихСписков();
	
КонецПроцедуры // Вопрос1ОчисткиТаблицЗавершение()

// Процедура обрабатывает изменение имени объекта.
// 
// Параметры:
//  ТекущиеДанныеДерева - ДанныеФормыЭлементДерева.
//  ИмяПараметра  		- Строка.
//  НомерВидаИБ		    - Строка.
// 
&НаКлиенте
Процедура ОбработатьИзмененияИмениОбъекта(ТекущиеДанныеДерева, ИмяПараметра, НомерВидаИБ) 

	ОтборИд = Новый Структура("УникальныйИД", ТекущиеДанныеДерева.УникальныйИД);
		
	НайденныеСтрокиПравил = ТаблицаПравилаПоиска.НайтиСтроки(ОтборИд);
	НайденныеСтрокиСоотв  = ТаблицаСоответствиеЗначений.НайтиСтроки(ОтборИд);
	
	Если НайденныеСтрокиПравил.Количество() > 0 
		ИЛИ НайденныеСтрокиСоотв.Количество() > 0 Тогда
	
		ТекстВопроса = "ru = 'Изменилось имя объекта. Будут очищены дополнительные таблицы. Продолжить?'";
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяПараметра"		 , ИмяПараметра);
		ДопПараметры.Вставить("НомерВидаИБ" 		 , НомерВидаИБ);
		ДопПараметры.Вставить("ТекущиеДанныеДерева"  , ТекущиеДанныеДерева);
		ДопПараметры.Вставить("НайденныеСтрокиСоотв" , НайденныеСтрокиСоотв);
		ДопПараметры.Вставить("НайденныеСтрокиПравил", НайденныеСтрокиПравил);
		ОписаниеОповещения = Новый ОписаниеОповещения("Вопрос2ОчисткиТаблицЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15);
				
	Иначе
		
		Если Не ЗначениеЗаполнено(ТекущиеДанныеДерева[ИмяПараметра]) Тогда
			ТекущиеДанныеДерева.Выбран = Ложь;
		КонецЕсли;
		Если НомерВидаИБ = "1" Тогда
			мИмяОбъекта_1 = ТекущиеДанныеДерева[ИмяПараметра];
		Иначе	
		    мИмяОбъекта_2 = ТекущиеДанныеДерева[ИмяПараметра];
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзмененияИмениОбъекта()

// Процедура обработчик оповещения "Вопрос2ОчисткиТаблицЗавершение".
// 
// Параметры:
//  РезультатВопроса - Произвольный.
//  ДопПараметры 	 - Структура.
// 
&НаКлиенте
Процедура Вопрос2ОчисткиТаблицЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	  	
	ИмяПараметра		  = ДопПараметры.ИмяПараметра;
	НомерВидаИБ 		  = ДопПараметры.НомерВидаИБ;
	ТекущиеДанныеДерева   = ДопПараметры.ТекущиеДанныеДерева;
	НайденныеСтрокиПравил = ДопПараметры.НайденныеСтрокиПравил;
	НайденныеСтрокиСоотв  = ДопПараметры.НайденныеСтрокиСоотв;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Для каждого СтрТабл Из НайденныеСтрокиПравил Цикл
			ТаблицаПравилаПоиска.Удалить(СтрТабл);		
		КонецЦикла; 	
		Для каждого СтрТабл Из НайденныеСтрокиСоотв Цикл
			ТаблицаСоответствиеЗначений.Удалить(СтрТабл);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанныеДерева[ИмяПараметра]) Тогда
			ТекущиеДанныеДерева.Выбран = Ложь;
		КонецЕсли;
		Если НомерВидаИБ = "1" Тогда
			мИмяОбъекта_1 = ТекущиеДанныеДерева[ИмяПараметра];
		Иначе	
		    мИмяОбъекта_2 = ТекущиеДанныеДерева[ИмяПараметра];
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанныеДерева[ИмяПараметра] = ?(НомерВидаИБ = "1", мИмяОбъекта_1, мИмяОбъекта_2);
		
	КонецЕсли;
	
КонецПроцедуры // Вопрос2ОчисткиТаблицЗавершение()



#КонецОбласти

#КонецОбласти
