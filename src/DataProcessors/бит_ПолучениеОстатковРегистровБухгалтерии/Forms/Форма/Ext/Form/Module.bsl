
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Параметры.Свойство("СтруктураПараметров") Тогда
		Для каждого ТекПараметр Из Параметры.СтруктураПараметров Цикл
			Объект[ТекПараметр.Ключ] = ТекПараметр.Значение;
		КонецЦикла;
	Иначе	
		Отказ = Истина;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	Если Параметры.Свойство("Ссылка") Тогда
		фКэшЗначений.Вставить("Ссылка", Параметры.Ссылка);
	КонецЕсли; 
	
	ДобавитьКорСчет();
	
	// Видимость ресурсов таблицы
	ПриемникМеждународный = бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(Объект.РегистрПриемник.ИмяОбъекта);
	ПриемникБюджетирование = ?(Объект.РегистрПриемник.ИмяОбъекта = "бит_Бюджетирование", Истина, Ложь);
	Элементы.ТаблицаДанныеСуммаМУДт.Видимость = ПриемникМеждународный;
	Элементы.ТаблицаДанныеСуммаМУКт.Видимость = ПриемникМеждународный;
	Элементы.ТаблицаДанныеСуммаСценарийДт.Видимость = ПриемникБюджетирование;
	Элементы.ТаблицаДанныеСуммаСценарийКт.Видимость = ПриемникБюджетирование;
	Элементы.ТаблицаДанныеЦФО.Видимость = ПриемникБюджетирование;
	
	// Кешируем количество субконто
	фКоличествоСубконтоМУ = 4;
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетИсточника"
												   ,"СубконтоИсточника"
												   ,фКоличествоСубконтоМУ
												   ,"ТаблицаДанные"
												   ,"Элементы.ТаблицаДанные.ТекущиеДанные");	 
												   
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетПриемника"
												   ,"СубконтоПриемника"
												   ,фКоличествоСубконтоМУ
												   ,"ТаблицаДанные"
												   ,"Элементы.ТаблицаДанные.ТекущиеДанные");	 
												   
	ВосстановитьКоличествоДоступныхСубконто();
												   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   ,"ТаблицаДанные"
															   ,"СубконтоИсточника"
															   ,"КоличествоДоступныхСубконтоИсточника"
															   ,фКоличествоСубконтоМУ);
															   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   ,"ТаблицаДанные"
															   ,"СубконтоПриемника"
															   ,"КоличествоДоступныхСубконтоПриемника"
															   ,фКоличествоСубконтоМУ);
															   
	УстановитьЗначенияПоУмолчанию();														   
	
	Элементы.Организация.Видимость = НЕ бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ФормаКомандаНастройки.Пометка = НЕ ВидимостьПанелиНастроек;	
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РегистрБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(фКэшЗначений.ВидОбъектаРегистрБухгалтерии);	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Объект.РегистрПриемник);
	
	// удаление из списка регистра источника
	СписокРегистров = фКэшЗначений.СписокДоступныхРегистров;
	НайденныйЭлемент = СписокРегистров.НайтиПоЗначению(Объект.РегистрПриемник);
	Если НайденныйЭлемент <> Неопределено Тогда
	    СписокРегистров.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", СписокРегистров);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныеЭлементОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрИсточникПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.РегистрИсточник) Тогда
	
		ДобавитьНастройкиОтбора();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныеСубконтоИсточникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДанные.ТекущиеДанные;
	
	ИмяСубконто       = Прав(Элемент.Имя, 18);	
	ЗначениеСубконто  = ТекущиеДанные[ИмяСубконто];	
	
	НачалоВыбораСубконтоБУ(Элемент, СтандартнаяОбработка, ТекущиеДанные, ЗначениеСубконто, ИмяСубконто);
	
КонецПроцедуры

// Процедура обрабатывает начало выбора субконто.
// 
// Параметры:
//  Элемент              - ЭлементУправления.
//  СтандартнаяОбработка - Булево.
//  Контейнер            - Произвольный.
//  ЗначениеСубконто     - Произвольный.
//  ИмяСубконто  		 - Строка.
// 
&НаКлиенте
Процедура НачалоВыбораСубконтоБУ(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто, ИмяСубконто)
	
	Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(Контейнер, СтандартнаяОбработка, ИмяСубконто);
		
	Иначе
		
		НачалоИмениСубконто = Лев(ИмяСубконто, 17);
		
		СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      , Объект
	                                                                                      , НачалоИмениСубконто
																						  , ЗначениеСубконто
																						  , фКоличествоСубконтоМУ);	
	
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
	
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораСубконто()

&НаКлиенте
Процедура ТаблицаДанныеСубконтоИсточникаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СубконтоБУАвтоПодбор(Элемент, ПараметрыПолученияДанных);
	
КонецПроцедуры	
	
// Процедура обрабатывает авто-подбор субконто.
// 
// Параметры:
//  Элемент - ПолеФормы.
//  Параметры - Структура
// 
&НаКлиенте
Процедура СубконтоБУАвтоПодбор(Элемент, ПараметрыПолученияДанных)

	ТекущиеДанные = Элементы.ТаблицаДанные.ТекущиеДанные;	
	
	ИмяСубконто       = Прав(Элемент.Имя, 18);	
	ЗначениеСубконто  = ТекущиеДанные[ИмяСубконто];	
	
	НачалоИмениСубконто = Лев(ИмяСубконто, 17);
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(ТекущиеДанные
                                                                                      , Объект
                                                                                      , НачалоИмениСубконто
																					  , ЗначениеСубконто
																					  , фКоличествоСубконтоМУ);	

	// Установим параметры выбора субконто.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

	Для каждого КиЗ Из СтруктураПараметров Цикл
	
		ПараметрыПолученияДанных.Отбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
	
	КонецЦикла; 
		
КонецПроцедуры // СубконтоБУАвтоПодбор()

&НаКлиенте
Процедура ТаблицаДанныеСчетПриемникаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаДанные.ТекущиеДанные;
	ИД = ТекДанные.ПолучитьИдентификатор();
	ТаблицаДанныеСчетПриемникаПриИзмененииСервер(ИД);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.ТаблицаДанные, "Выполнять", 1);
	
КонецПроцедуры // КомандаУстановитьВсе()

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.ТаблицаДанные, "Выполнять", 0);
	
КонецПроцедуры // КомандаСнятьВсе()

&НаКлиенте
Процедура КомандаИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.ТаблицаДанные, "Выполнять", 2);
	
КонецПроцедуры // КомандаИнвертировать()

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ЗаполнитьОстаткиРегистраБухгалтерии();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавить(Команда)
	
	Успех = ВыполнитьПроверкуЗаполнения();
	
	Если Успех Тогда
	
		ПеренестиОстатки("Добавить");
		ЭтаФорма.Закрыть();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	Успех = ВыполнитьПроверкуЗаполнения();
	
	Если Успех Тогда
	
		ПеренестиОстатки("Загрузить");
		ЭтаФорма.Закрыть();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройки(Команда)
	
	ЭтаФорма.ВидимостьПанелиНастроек = НЕ ЭтаФорма.ВидимостьПанелиНастроек;
	Элементы.ФормаКомандаНастройки.Пометка = НЕ ЭтаФорма.ВидимостьПанелиНастроек;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВалютнуюСумму(Команда)
	
	ЗаполнитьПустыеВалютныеСуммыПриемника();
	
КонецПроцедуры // ЗаполнитьВалютнуюСумму()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСНастройками

// Процедура - действие команды "КомандаСохранитьНастройки".
//
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
	
		ПараметрыФормы.Вставить("СохраненнаяНастройка",ТекущаяНастройка);
	
	КонецЕсли; 
		
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройки",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры //КомандаСохранитьНастройки()

// Процедура - обработчик оповещения о закрытии формы сохранения настроек. 
// 
&НаКлиенте
Процедура СохранитьНастройки(СохрНастройка, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		
		ТекущаяНастройка = СохрНастройка;
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

// Процедура - действие команды "КомандаВосстановитьНастройки".
//
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроек",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаВосстановитьНастройки()

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек

// Функция готовит стуктуру с настройками для сохранения.
//
// Возвращаемое значение:
//   СтруктураНастройки   - Структура.
//
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастройки = Новый Структура;
	
	СтруктураНастройки.Вставить("РегистрИсточник" 	, Объект.РегистрИсточник);
	СтруктураНастройки.Вставить("КорСчет" 			, Объект.КорСчет);
	
	СтруктураНастройки.Вставить("Настройки", Новый ХранилищеЗначения(Компоновщик.Настройки));
	СтруктураНастройки.Вставить("ПользовательскиеНастройки", Компоновщик.ПользовательскиеНастройки);
	
	Возврат СтруктураНастройки;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Функция применяет сохраненные настройки.
//
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
//
&НаСервере
Функция ПрименитьНастройки(ВыбНастройка)

	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			 						
			Объект.РегистрИсточник = СтруктураНастроек.РегистрИсточник;  			
			
			Настройки = СтруктураНастроек.Настройки.Получить();
			ДобавитьНастройкиОтбора(Настройки);	
			
			Если ТипЗнч(Объект.КорСчет) = ТипЗнч(СтруктураНастроек.КорСчет) Тогда
				Объект.КорСчет = СтруктураНастроек.КорСчет;
			КонецЕсли;        			
			
			Если СтруктураНастроек.Свойство("ПользовательскиеНастройки") Тогда
				Компоновщик.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.ПользовательскиеНастройки);
			КонецЕсли;
						
			ТекущаяНастройка = ВыбНастройка;
			УстановитьЗаголовокФормыСервер();				
				
		КонецЕсли;	 
		
	КонецЕсли; 
	
КонецФункции // ПрименитьНастройки()

// Процедура устанавливает настройку либо из последних использованных, 
//	либо из настройки по умолчанию.
//
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	// Получим настройку по - умолчанию и последнюю использованную.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипНастройки"			  , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	СтруктураПараметров.Вставить("НастраиваемыйОбъект"    , фКэшЗначений.НастраиваемыйОбъект);
	СтруктураПараметров.Вставить("ИспользоватьПриОткрытии", Истина);
	// Изменение кода. Начало. 10.12.2016{{
	//СохрНастройка = Справочники.бит_СохраненныеНастройки.ПолучитьНастройкуПоУмолчанию(СтруктураПараметров);
	СохрНастройка = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	// Изменение кода. Конец. 10.12.2016}}
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		
		ПрименитьНастройки(СохрНастройка);
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

#КонецОбласти

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("СписокДоступныхРегистров"
						, СформироватьСписокДоступныхРегистровБухгалтерииДляУправленческихОтчетов());
	фКэшЗначений.Вставить("ВидОбъектаРегистрБухгалтерии", Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	// Изменение кода. Начало. 10.12.2016{{
	Если Объект.РегистрПриемник.ИмяОбъекта = "бит_Бюджетирование" Тогда
		фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_ПолучениеОстатковРегистровБухгалтерии_Бюджетирование");
	Иначе	
	    фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_ПолучениеОстатковРегистровБухгалтерии");
	КонецЕсли;
	// Изменение кода. Конец. 10.12.2016}}
						
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляет видимостью/доступностью элементов формы. 
//
&НаСервере
Процедура УстановитьВидимость()

	Элементы.ГруппаНастройки.Видимость = НЕ ВидимостьПанелиНастроек;

КонецПроцедуры // УстановитьВидимость()

// Функция формирует список регистров бухгалтерии.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   СписокЗначений
// 
&НаСервере
Функция СформироватьСписокДоступныхРегистровБухгалтерииДляУправленческихОтчетов()

	СписокОбъектовСистемы = Новый СписокЗначений;
	       		
	РегистрыМета = Новый Массив;
	Если Метаданные.РегистрыБухгалтерии.Найти("Хозрасчетный")<> Неопределено Тогда
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный);	
	КонецЕсли;
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Бюджетирование);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_1);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_3);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_4);
	РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_5);
	
	Для каждого МетаОбъект Из РегистрыМета Цикл
		
		ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
		Если ЗначениеЗаполнено(ОбъектСистемы) Тогда
			
			СписокОбъектовСистемы.Добавить(ОбъектСистемы)
			
		КонецЕсли; 
		
	КонецЦикла; 
		
	Возврат СписокОбъектовСистемы;
 	
КонецФункции // СформироватьСписокДоступныхРегистровБухгалтерииДляУправленческихОтчетов()

// Процедура заполняет табличную часть остатками регистра источника. 
//
&НаСервере
Процедура ЗаполнитьОстаткиРегистраБухгалтерии()

	Объект.ТаблицаДанные.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрИсточник) Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтоХозрасчетный   = Объект.РегистрИсточник.ИмяОбъекта = "Хозрасчетный";
	ЭтоМеждународный  = бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(Объект.РегистрИсточник.ИмяОбъекта);
	ЭтоБюджетирование = Объект.РегистрИсточник.ИмяОбъекта = "бит_Бюджетирование";
	
	// Выполняем запрос с помощью схемы компоновки данных
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(фАдресКомпоновки);

	// Выполняем компоновку макета МакетСКД
	// (настройки берутся из схемы компоновки данных и из пользовательских настроек).
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки());
	
	// Получаем запрос макета компоновки данных
	Запрос = Новый Запрос(МакетСКД.НаборыДанных.НаборДанныхОсновной.Запрос);
	
	// Устанавливаем параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		Если ОписаниеПараметраЗапроса.Имя = "Акт"
			ИЛИ ОписаниеПараметраЗапроса.Имя = "Пас"
			ИЛИ ОписаниеПараметраЗапроса.Имя = "АктПас"
			ИЛИ ОписаниеПараметраЗапроса.Имя = "Организация"
			ИЛИ ОписаниеПараметраЗапроса.Имя = "Дата" Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Пас", ВидСчета.Пассивный);
	Запрос.УстановитьПараметр("Акт", ВидСчета.Активный);
	Запрос.УстановитьПараметр("АктПас", ВидСчета.АктивноПассивный);
	ГраницаДата = Новый Граница(Объект.Дата, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Дата", ГраницаДата);
	
	// Обработка запроса
	Результат = Запрос.Выполнить();
	
	// Если на пустой базе заведена одна организаия, то в запрос не попадает выбранное поле "Организация". 
	НайденаОрг = Результат.Выгрузить().Колонки.Найти("Организация") <> Неопределено;
	
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
	 
		Если Выборка.СуммаРегл <> 0 Тогда 

			НоваяСтрока = Объект.ТаблицаДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "Количество, Валюта, ВалютнаяСумма");
			
			НоваяСтрока.СчетИсточника = Выборка.Счет;
			НоваяСтрока.СубконтоИсточника1 = Выборка.Субконто1;
			НоваяСтрока.СубконтоИсточника2 = Выборка.Субконто2;
			НоваяСтрока.СубконтоИсточника3 = Выборка.Субконто3;
			Если НЕ ЭтоХозрасчетный Тогда
			
				НоваяСтрока.СубконтоИсточника4 = Выборка.Субконто4;
			
			КонецЕсли; 
			
			Если Выборка.ВидСчета = "Пассивный" Тогда
				
				НоваяСтрока.СуммаРеглКт = Выборка.СуммаРегл;
				
				Если НЕ ЭтоХозрасчетный Тогда
					НоваяСтрока.СуммаУпрКт = Выборка.СуммаУпр;
				КонецЕсли;
				
				Если ЭтоМеждународный Тогда
					НоваяСтрока.СуммаМУКт = Выборка.СуммаМУ;
				КонецЕсли; 
				
				Если ЭтоБюджетирование Тогда
					НоваяСтрока.СуммаСценарийКт = Выборка.СуммаСценарий;
				КонецЕсли;
								
			ИначеЕсли Выборка.ВидСчета = "Активный" Тогда	
				
				НоваяСтрока.СуммаРеглДт = Выборка.СуммаРегл;
				
				Если НЕ ЭтоХозрасчетный Тогда
					НоваяСтрока.СуммаУпрДт = Выборка.СуммаУпр;
				КонецЕсли;
				
				Если ЭтоМеждународный Тогда
					НоваяСтрока.СуммаМУДт = Выборка.СуммаМУ;
				КонецЕсли; 
				
				Если ЭтоБюджетирование Тогда
					НоваяСтрока.СуммаСценарийДт = Выборка.СуммаСценарий;
				КонецЕсли; 
								
			КонецЕсли; 
				
			Идентификатор = НоваяСтрока.ПолучитьИдентификатор();
			ИзменениеСчета(Идентификатор, "Источника");
			
			СтруктураСчетов = бит_МеханизмТрансляции.КонструкторПараметровПодбораСчетов();
			
			СтруктураСчетов.ТекущийОбъект = фКэшЗначений.Ссылка;
			СтруктураСчетов.Счет =          Выборка.Счет;
			Если ЭтоХозрасчетный Тогда
				СтруктураСчетов.Подразделение = Выборка.Подразделение;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Субконто1) Тогда
				СтруктураСчетов.Субконто1 = Выборка.Субконто1;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Выборка.Субконто2) Тогда
				СтруктураСчетов.Субконто2 = Выборка.Субконто2;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Выборка.Субконто3) Тогда
				СтруктураСчетов.Субконто3 = Выборка.Субконто3;
			КонецЕсли;
			Если НЕ ЭтоХозрасчетный
				И ЗначениеЗаполнено(Выборка.Субконто4) Тогда
				СтруктураСчетов.Субконто4 = Выборка.Субконто4;
			КонецЕсли;
			
			ТекОрг = ?(НайденаОрг, Выборка.Организация, Объект.Организация);
			СтруктураСчетовПриемник = бит_МеханизмТрансляции.ВыполнитьПодборСчетов(СтруктураСчетов
																					, ТекОрг
																					, Объект.Дата
																					, Объект.РегистрИсточник.ИмяОбъекта
																					, Объект.РегистрПриемник.ИмяОбъекта);	
																					
			// Заполняем счет и субконто приемника																		
			НоваяСтрока.СчетПриемника = СтруктураСчетовПриемник.Счет;
            СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НоваяСтрока.СчетПриемника);
			
			Если СвСч.Количественный Тогда
				НоваяСтрока.Количество 	  = Выборка.Количество;
			КонецЕсли;
			Если СвСч.Валютный Тогда
				НоваяСтрока.Валюта 		  = Выборка.Валюта;
				НоваяСтрока.ВалютнаяСумма = Выборка.ВалютнаяСумма;
			КонецЕсли; 			
			
			ПриемникБюджетирование = Объект.РегистрПриемник.ИмяОбъекта = "бит_Бюджетирование";
			Если ПриемникБюджетирование Тогда
			
				Если ЗначениеЗаполнено(СтруктураСчетовПриемник.ЦФО) Тогда
					НоваяСтрока.ЦФО = СтруктураСчетовПриемник.ЦФО;
				Иначе	
					РезМассив = бит_Бюджетирование.СвязанныеЦФОИПодразделения(НоваяСтрока.Организация);		
					Если РезМассив.Количество() <> 0 Тогда
						
						Если ТипЗнч(РезМассив[0]) = Тип("СправочникСсылка.Подразделения") Тогда				
							НоваяСтрока.ЦФО = РезМассив[0];				
						КонецЕсли;  
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(СтруктураСчетовПриемник.Субконто1) Тогда
				НоваяСтрока.СубконтоПриемника1 = СтруктураСчетовПриемник.Субконто1;
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтруктураСчетовПриемник.Субконто2) Тогда
				НоваяСтрока.СубконтоПриемника2 = СтруктураСчетовПриемник.Субконто2;
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтруктураСчетовПриемник.Субконто3) Тогда
				НоваяСтрока.СубконтоПриемника3 = СтруктураСчетовПриемник.Субконто3;
			КонецЕсли;
			Если НЕ ЭтоХозрасчетный
				И ЗначениеЗаполнено(СтруктураСчетовПриемник.Субконто4) Тогда
				НоваяСтрока.СубконтоПриемника4 = СтруктураСчетовПриемник.Субконто4;
			КонецЕсли;
			
			Идентификатор = НоваяСтрока.ПолучитьИдентификатор();
			ИзменениеСчета(Идентификатор, "Приемника");
			
		КонецЕсли; 

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОстаткиРегистраБухгалтерии()

// Процедура обрабатывает изменение счета в табличном поле "ТаблицаДанные".
// 
// Параметры:
//  Идентификатор  - Число - Индентификатор строки табличной части.
// 
&НаСервере         
Процедура ИзменениеСчета(Идентификатор, ИмяСчета)
	                       
	ТекущаяСтрока = Объект.ТаблицаДанные.НайтиПоИдентификатору(Идентификатор);
	
	ТекСчет = ТекущаяСтрока["Счет" + ИмяСчета];
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекСчет, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "Субконто" + ИмяСчета);
	   	
	Если ТекСчет = Неопределено Тогда
		ТекущаяСтрока["КоличествоДоступныхСубконто" + ИмяСчета] = 0;
    Иначе
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекСчет);
		ТекущаяСтрока["КоличествоДоступныхСубконто" + ИмяСчета] = СвСч.КоличествоСубконто; 	
	КонецЕсли;
		
КонецПроцедуры // ИзменениеСчета()

// Восстанавливает количество доступных субконто для счета в строках ТЧ.
// 
&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	Для каждого СтрокаТаблицы Из Объект.ТаблицаДанные Цикл
        
        СвСчИс = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетИсточника);
        СвСчПр = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетПриемника);
        
		СтрокаТаблицы.КоличествоДоступныхСубконтоИсточника = СвСчИс.КоличествоСубконто;
		СтрокаТаблицы.КоличествоДоступныхСубконтоПриемника = СвСчПр.КоличествоСубконто;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет настройки в форму. 
//
&НаСервере
Процедура ДобавитьНастройкиОтбора(НастройкиКд = Неопределено)

	ЭтоХозрасчетный   = Объект.РегистрИсточник.ИмяОбъекта = "Хозрасчетный";
	ЭтоМеждународный  = бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(Объект.РегистрИсточник.ИмяОбъекта);
	ЭтоБюджетирование = Объект.РегистрИсточник.ИмяОбъекта = "бит_Бюджетирование";
	
	//--------------------------------------------------
	// Создание схемы запроса
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросВыбораИзИБ = СхемаЗапроса.ПакетЗапросов[0];
	
	//--------------------------------------------------
	// Установка свойств запроса
	ЗапросВыбораИзИБ.ТаблицаДляПомещения = "Счета";
	ЗапросВыбораИзИБ.ВыбиратьРазрешенные = Истина;
	// Добавляем операторы выбора первого запроса пакета
	ОператорВыбораЗакупок = ЗапросВыбораИзИБ.Операторы[0];
	// Добавляем запрос выбора из регистра закупок
	ИсточникЗакупки = ОператорВыбораЗакупок.Источники.Добавить(Объект.РегистрИсточник.ИмяОбъектаПолное+".Остатки", "Остатки");
	ИсточникЗакупки.Источник.Параметры[0].Выражение = Новый ВыражениеСхемыЗапроса("&Дата") ;
	ИсточникЗакупки.Источник.Параметры[3].Выражение = Новый ВыражениеСхемыЗапроса("Организация = &Организация") ;
	// Указываем выбираемые поля
	ОператорВыбораЗакупок.ВыбираемыеПоля.Добавить("Остатки.Счет");
	// Указываем спевдонимы для выбранных полей
	ЗапросВыбораИзИБ.Колонки[0].Псевдоним = "Счет";

	//--------------------------------------------------
	// Второй пакет запроса
	ЗапросВыбораИзВТ = СхемаЗапроса.ПакетЗапросов.Добавить();
	ОператорВыбораОстаткиКт = ЗапросВыбораИзВТ.Операторы[0];
	// Устанавливаем сформированную в прошлом запросе временную таблицу как источник
	Источник = ОператорВыбораОстаткиКт.Источники.Добавить("Счета","Счета");
	
	// Добавляем запрос выбора из регистра бухгалтерии
	Источник = ОператорВыбораОстаткиКт.Источники.Добавить(Объект.РегистрИсточник.ИмяОбъектаПолное+".Остатки", "Остатки");
	Источник.Источник.Параметры[0].Выражение = Новый ВыражениеСхемыЗапроса("&Дата") ;
	Источник.Источник.Параметры[3].Выражение = Новый ВыражениеСхемыЗапроса("Организация = &Организация") ;
	// Задаем тип соединения
	Источник.Соединения.Добавить("Счета", "Счета.Счет = Остатки.Счет"); 
	Источник.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
	// Указываем выбираемые поля
	ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("""Пассивный""");
	ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("Счета.Счет");
	ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("Остатки.Субконто1");
	ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("Остатки.Субконто2");
	ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("Остатки.Субконто3");
	Если НЕ ЭтоХозрасчетный Тогда
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("Остатки.Субконто4");
	КонецЕсли; 
	ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("Остатки.Организация");
	ЗапросВыбораИзВТ.Колонки[0].Псевдоним = "ВидСчета";
	Если ЭтоХозрасчетный Тогда
		
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("Остатки.Подразделение");
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаОстатокКт, 0)");
		ЗапросВыбораИзВТ.Колонки.Найти("Поле1").Псевдоним = "СуммаРегл";
		
	ИначеЕсли ЭтоМеждународный Тогда	
		
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаРеглОстатокКт, 0)");
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаУпрОстатокКт, 0)");
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаМУОстатокКт, 0)");
		ЗапросВыбораИзВТ.Колонки[7].Псевдоним = "СуммаРегл";
		ЗапросВыбораИзВТ.Колонки[8].Псевдоним = "СуммаУпр";
		ЗапросВыбораИзВТ.Колонки[9].Псевдоним = "СуммаМУ";
		
	ИначеЕсли ЭтоБюджетирование Тогда 	
		
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаРеглОстатокКт, 0)");
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаУпрОстатокКт, 0)");
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаСценарийОстатокКт, 0)");
		ЗапросВыбораИзВТ.Колонки[7].Псевдоним = "СуммаРегл";
		ЗапросВыбораИзВТ.Колонки[8].Псевдоним = "СуммаУпр";
		ЗапросВыбораИзВТ.Колонки[9].Псевдоним = "СуммаСценарий";
		
	Иначе 	
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаРеглОстатокКт, 0)");
		ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаУпрОстатокКт, 0)");
		ЗапросВыбораИзВТ.Колонки[7].Псевдоним = "СуммаРегл";
		ЗапросВыбораИзВТ.Колонки[8].Псевдоним = "СуммаУпр";
		
	КонецЕсли;
		
	// Добавляем отбор
	ОператорВыбораОстаткиКт.Отбор.Добавить("Счета.Счет.Вид = &Пас ИЛИ Счета.Счет.Вид = &АктПас");

	//--------------------------------------------------
	ОператорВыбораОстаткиДт = ЗапросВыбораИзВТ.Операторы.Добавить();
	// Устанавливаем сформированную в прошлом запросе временную таблицу как источник
	Источник = ОператорВыбораОстаткиДт.Источники.Добавить("Счета","Счета");
	
	// Добавляем запрос выбора из регистра бухгалтерии
	Источник = ОператорВыбораОстаткиДт.Источники.Добавить(Объект.РегистрИсточник.ИмяОбъектаПолное+".Остатки", "Остатки");
	Источник.Источник.Параметры[0].Выражение = Новый ВыражениеСхемыЗапроса("&Дата") ;
	Источник.Источник.Параметры[3].Выражение = Новый ВыражениеСхемыЗапроса("Организация = &Организация") ;
	// Задаем тип соединения
	Источник.Соединения.Добавить("Счета", "Счета.Счет = Остатки.Счет"); 
	Источник.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
	// Указываем выбираемые поля
	ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("Счета.Счет");
	ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("Остатки.Организация");
	ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("Остатки.Субконто1");
	ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("Остатки.Субконто2");
	ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("Остатки.Субконто3");
	Если НЕ ЭтоХозрасчетный Тогда
	
		ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("Остатки.Субконто4");
	
	КонецЕсли; 
	ПолеВидСчета 	= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("""Активный""");
	ЗапросВыбораИзВТ.Колонки[0].Поля.Установить(1,ПолеВидСчета);
	Если ЭтоХозрасчетный Тогда
		
		ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("Остатки.Подразделение");
		ПолеСуммаРегл 	= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)");
		ЗапросВыбораИзВТ.Колонки.Найти("СуммаРегл").Поля.Установить(1, ПолеСуммаРегл);
						
	ИначеЕсли ЭтоМеждународный Тогда	
		
		ПолеСуммаУпр 	= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаУпрОстатокДт, 0)");
		ПолеСуммаРегл 	= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаРеглОстатокДт, 0)");
		ПолеСуммаМУ 	= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаМУОстатокДт, 0)");
		ЗапросВыбораИзВТ.Колонки[7].Поля.Установить(1,ПолеСуммаРегл);
		ЗапросВыбораИзВТ.Колонки[8].Поля.Установить(1,ПолеСуммаУпр);
		ЗапросВыбораИзВТ.Колонки[9].Поля.Установить(1,ПолеСуммаМУ);
		
	ИначеЕсли ЭтоБюджетирование Тогда 	
		
		ПолеСуммаУпр 		= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаУпрОстатокДт, 0)");
		ПолеСуммаРегл 		= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаРеглОстатокДт, 0)");
		ПолеСуммаСценарий 	= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаСценарийОстатокДт, 0)");
		ЗапросВыбораИзВТ.Колонки[7].Поля.Установить(1,ПолеСуммаРегл);
		ЗапросВыбораИзВТ.Колонки[8].Поля.Установить(1,ПолеСуммаУпр);
		ЗапросВыбораИзВТ.Колонки[9].Поля.Установить(1,ПолеСуммаСценарий);
		
	Иначе 	
		ПолеСуммаУпр 	= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаУпрОстатокДт, 0)");
		ПолеСуммаРегл 	= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.СуммаРеглОстатокДт, 0)");
		ЗапросВыбораИзВТ.Колонки[7].Поля.Установить(1,ПолеСуммаРегл);
		ЗапросВыбораИзВТ.Колонки[8].Поля.Установить(1,ПолеСуммаУпр);
		
	КонецЕсли;       	
	
	//--------------------------------------------------
	// Количество
	ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.КоличествоОстатокКт, 0)");
	ЗапросВыбораИзВТ.Колонки.Найти("Поле1").Псевдоним = "Количество";
	ПолеДт 	= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)");
	ЗапросВыбораИзВТ.Колонки.Найти("Количество").Поля.Установить(1, ПолеДт);
	// Валютная сумма	
	ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.ВалютнаяСуммаОстатокКт, 0)");
	ЗапросВыбораИзВТ.Колонки.Найти("Поле1").Псевдоним = "ВалютнаяСумма";
	ПолеДт 	= ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Остатки.ВалютнаяСуммаОстатокДт, 0)");
	ЗапросВыбораИзВТ.Колонки.Найти("ВалютнаяСумма").Поля.Установить(1, ПолеДт);
	// Валюта
	ОператорВыбораОстаткиКт.ВыбираемыеПоля.Добавить("Остатки.Валюта");
	ОператорВыбораОстаткиДт.ВыбираемыеПоля.Добавить("Остатки.Валюта");
	
	//--------------------------------------------------
	// Добавляем отбор
	ОператорВыбораОстаткиДт.Отбор.Добавить("Счета.Счет.Вид = &Акт ИЛИ Счета.Счет.Вид = &АктПас");

	//--------------------------------------------------
	// Последний запрос пакета - удаление временной таблицы
	ЗапросУничтоженияВТ = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтоженияВТ.ИмяТаблицы = "Счета";
	
	фТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
					
	СхемаКомпоновкиДанных = бит_МеханизмПолученияДанных.СоздатьСхемуКомпоновкиПоЗапросу(фТекстЗапроса);
	
	// Добавим поля быстрого отбора
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("Счет");
	МассивПолей.Добавить("Субконто1");
	МассивПолей.Добавить("Субконто2");
	МассивПолей.Добавить("Субконто3");
	Если НЕ ЭтоХозрасчетный Тогда
		МассивПолей.Добавить("Субконто4");
	КонецЕсли; 
	
	// Для отображения отборов на форме в пользовательских настройках.
	ОтборСКД = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор;      	
	
	Если НастройкиКд = Неопределено Тогда
		
		Для каждого Поле Из МассивПолей Цикл
		 			
			НовыйОтбор = ОтборСКД.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		    НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле);
		    НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		    НовыйОтбор.Использование = Ложь;
		    НовыйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			НовыйОтбор.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор; 			
			
		КонецЦикла;
	
	Иначе
		
		Для каждого ЭлОтбор Из НастройкиКд.Отбор.Элементы Цикл
		 			
			НовыйОтбор = ОтборСКД.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйОтбор, ЭлОтбор);			
			
		КонецЦикла;
		
	КонецЕсли;

	фАдресКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	
    // Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;        
    ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(фАдресКомпоновки);
    Попытка
                   
		Компоновщик.Инициализировать(ИсточникНастроек);
                   
    Исключение
                   
		ТекстСообщения =  НСтр("ru = 'Не удалось инициализировать компоновщик для отбора! Описание ошибки: %1%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
                   
	КонецПопытки;
	
    Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.ПользовательскиеНастройки.Элементы.Количество();

КонецПроцедуры // ДобавитьНастройкиОтбора()

// Процедура ищет 000 счет в плане счетов Источника. 
//
&НаСервере
Процедура ДобавитьКорСчет()

	Попытка
	
		Объект.КорСчет = ПланыСчетов[Объект.РегистрПриемник.ИмяОбъекта].НайтиПоКоду("000");
	
	Исключение
	
	КонецПопытки;
	
КонецПроцедуры // ДобавитьКорСчет()

// Процедура переносит остатки в операцию.
// 
// Параметры:
//  ИмяКоманды - Строка.
// 
&НаКлиенте
Процедура ПеренестиОстатки(ИмяКоманды)

	УпакованнаяТаблица = УпаковатьТаблицуЗначений();

	Если УпакованнаяТаблица <> Неопределено Тогда
		
		СтрПереноса = Новый Структура;
		СтрПереноса.Вставить("Хранилище", УпакованнаяТаблица);
		
		Если ИмяКоманды = "Загрузить" Тогда 		
			СтрПереноса.Вставить("ОчищатьТабЧасть", Истина); 			
		Иначе	
			СтрПереноса.Вставить("ОчищатьТабЧасть", Ложь);
		КонецЕсли;
		
		СтрПереноса.Вставить("ДатаТрансляции"    , Объект.Дата);
		СтрПереноса.Вставить("ДополнительныйСчет", Объект.КорСчет);
		
		Оповестить("бит_ПереносОстатков", СтрПереноса, ЭтаФорма.ВладелецФормы);	
		
	КонецЕсли; 
	
КонецПроцедуры // ПеренестиОстатки()

// Процедура упаковывает в таблицу значений строки для переноса.
// 
&НаСервере
Функция УпаковатьТаблицуЗначений()

	СтрОтбора = Новый Структура("Выполнять", Истина);
	СтрокиДляПереноса = Объект.ТаблицаДанные.НайтиСтроки(СтрОтбора);

	Если СтрокиДляПереноса.Количество() = 0 Тогда
		Возврат Неопределено;		
	КонецЕсли;	
		
	ТаблицаСтрок = Объект.ТаблицаДанные.Выгрузить(СтрокиДляПереноса);
	УпакованнаяТаблица = бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаСтрок);
	
	Возврат УпакованнаяТаблица;
	
КонецФункции // УпаковатьТаблицуЗначений()

// Функция проверяет заполнение формы.
//
&НаСервере
Функция ВыполнитьПроверкуЗаполнения()

	Выполнено = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.КорСчет) Тогда
		
		Выполнено = Ложь;
		
		ТекстСообщения =  НСтр("ru = 'Необходимо заполнить вспомогательный счет!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 

	Отбор = Новый Структура("Выполнять", Истина);
	Строки = Объект.ТаблицаДанные.НайтиСтроки(Отбор);
	
	Для каждого Строка Из Строки Цикл
	
		Если НЕ ЗначениеЗаполнено(Строка.СчетПриемника) Тогда
		
			ТекстСообщения =  НСтр("ru = 'В строке " + Строка.НомерСтроки + " необходимо заполнить счет приемника!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			//Выполнено = Ложь;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Выполнено;
	
КонецФункции // ВыполнитьПроверкуЗаполнения()

// Процедура устанавливает заголовок формы на клиенте.
//
&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = "Получение остатков регистров бухгалтерии ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтаФорма.Заголовок = "Получение остатков регистров бухгалтерии";
		
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура устанавливает заголовок формы.
//
&НаСервере
Процедура УстановитьЗаголовокФормыСервер()

	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = "Получение остатков регистров бухгалтерии ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтаФорма.Заголовок = "Получение остатков регистров бухгалтерии";
		
		
	КонецЕсли; 

КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура обработчик "ПриИзменении" счета приемника табличной части. 
//
&НаСервере
Процедура ТаблицаДанныеСчетПриемникаПриИзмененииСервер(ИД)

	ВосстановитьКоличествоДоступныхСубконто();
	
	ТекущаяСтрока = Объект.ТаблицаДанные.НайтиПоИдентификатору(ИД);
	
	КоличествоСубконто = 4;
	
	инд=0;
	Для инд=инд+1 По КоличествоСубконто Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока["СубконтоИсточника"+инд]) Тогда  
			
			Для каждого СубконтоПриемника Из ТекущаяСтрока.СчетПриемника.ВидыСубконто Цикл
				
				Если СубконтоПриемника.ВидСубконто.ТипЗначения <> Неопределено
					И ТипЗнч(ТекущаяСтрока["СубконтоИсточника"+инд]) = СубконтоПриемника.ВидСубконто.ТипЗначения.Типы()[0] Тогда
				
					ТекущаяСтрока["СубконтоПриемника"+СубконтоПриемника.НомерСтроки] = ТекущаяСтрока["СубконтоИсточника"+инд];
				
				КонецЕсли; 
			
			КонецЦикла; 
			
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры // ТаблицаДанныеСчетПриемникаПриИзмененииСервер()

// Процедура производит заполнение валютных сумм для счетов приемника,
// по которым ведется валютный учет в случае отсутствия валютного учета по счету источника.
//
&НаСервере
Процедура ЗаполнитьПустыеВалютныеСуммыПриемника()

	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если НЕ ЗначениеЗаполнено(ВалютаРегл) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнена валюта регламентированного учета.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			
	 	Возврат;
	КонецЕсли;
	
	Для каждого СтрТаб Из Объект.ТаблицаДанные Цикл
        
        СвСчИс = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрТаб.СчетИсточника);
        СвСчПр = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрТаб.СчетПриемника);
        
		Если (НЕ СвСчИс.Валютный) И СвСчПр.Валютный 
			И (НЕ ЗначениеЗаполнено(СтрТаб.Валюта)) Тогда
		
			СтрТаб.Валюта 		 = ВалютаРегл;
			СтрТаб.ВалютнаяСумма = ?(СтрТаб.СуммаРеглДт = 0, СтрТаб.СуммаРеглКт, СтрТаб.СуммаРеглДт);
		
		КонецЕсли;	
		   
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПустыеВалютныеСуммыПриемника()

#КонецОбласти
