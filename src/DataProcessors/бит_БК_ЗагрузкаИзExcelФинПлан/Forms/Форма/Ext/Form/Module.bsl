
&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Команда)
	
	ИдентификаторНазначения = ?(ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма"), ВладелецФормы.УникальныйИдентификатор, УникальныйИдентификатор);
	
	Отказ = Ложь;
		
	Если Не ЗначениеЗаполнено(Объект.ФайлИсточник) Тогда
		ТекстСообщения = "ru = 'Не заполнено значение реквизита ""Файл источник""!'";
		бит_ОбщегоНазначения.СообщитьОбОшибке(НСтр(ТекстСообщения), Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//ИнициализироватьИзФормы();
	
	ЭтаФорма.Закрыть(ЗагрузитьДанныеИзExcel());

КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект);
	СтруктураИмяФайла = Новый Структура("ИмяФайла","");
	// Зададим фильтр для диалога.
	ТекстФильтра = бит_ОбменДанными_Excel.ПолучитьФильтрДляВыбораФайлаExcel();
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(СтруктураИмяФайла,
	"ИмяФайла",
	Ложь,
	Новый Структура("Фильтр, ПроверятьСуществованиеФайла", ТекстФильтра, Истина),
	Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораФайла(ИмяФайла, ДополнительныеПараметры) Экспорт 
	
	Если ПустаяСтрока(ИмяФайла) тогда
		Возврат;
	КонецЕсли;	
	
	Объект.ФайлИсточник = ИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникОткрытие(Элемент, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;	
	ИмяФайла = СокрЛП(Объект.ФайлИсточник);
	ОткрытьФайл(ИмяФайла);
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(ИмяФайла)
    
    Если ПустаяСтрока(ИмяФайла) Тогда
        Возврат;
    КонецЕсли;
    
    ОткрываемыйФайл = Новый Файл(ИмяФайла);
    Если ОткрываемыйФайл.Существует() Тогда
        ЗапуститьПриложение(ИмяФайла);
    КонецЕсли;
  
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Сценарий", Сценарий);
	Параметры.Свойство("Дата", Дата);
	Параметры.Свойство("АдресКопия_ТЧ_БДДС", АдресКопия_ТЧ_БДДС);
	
	Объект.НомерЛиста = 1;
	
	//Здесь задаем параметры инициализации данных 1С и соответствие прочитанным из Excel колонкам
	СоответствиеКолонок = Новый Соответствие;
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","СтатьяОборотов", "Статья оборотов", Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов"),Справочники.бит_СтатьиОборотов.ПустаяСсылка(), "ИскатьПоКоду",,Истина);
	СоответствиеКолонок.Вставить("Колонка1",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","ЦФО", "Функция",Новый ОписаниеТипов("СправочникСсылка.Подразделения"),Справочники.Подразделения.ПустаяСсылка(), "ИскатьПоКоду",,Ложь);
	СоответствиеКолонок.Вставить("Колонка2",Структура);
	Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Аналитика_2", "Объект",Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства"),Справочники.ОбъектыСтроительства.ПустаяСсылка(), "ИскатьПоКоду",,Ложь);
	СоответствиеКолонок.Вставить("Колонка3",Структура);
	//1 - Статья - Статья оборотов
	//2 - ЦФО    - ЦФО
	//3 - Объект Строительства - Аналитика_2
	//4 - Подстатья - Комментарий
	//5 - Статус    - Сценарий
	
	АдресСоответствиеКолонок = ПоместитьВоВременноеХранилище(СоответствиеКолонок, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьДанныеИзExcel() Экспорт
	
	Отказ = Ложь;
	
	// Создадим приложение Excel.
	Excel = бит_БК_ОбщийКлиент.СоздатьПриложениеExcelКлиент(Отказ, Истина);
	
	Если Excel = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	// Откроем указанный файл.
	ExcelФайл = бит_БК_ОбщийКлиент.ОткрытьExcelФайлКлиент(Excel, Объект.ФайлИсточник, Отказ);
	
	Если ExcelФайл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Откроем лист Excel.
	ИмяЛиста = "Лист"+Объект.НомерЛиста;
	ExcelЛист = бит_БК_ОбщийКлиент.ОткрытьExcelЛистКлиент(ExcelФайл, ИмяЛиста, Отказ, Истина); 
	
	Если ExcelЛист = Неопределено ИЛИ ExcelЛист = Неопределено Тогда
		// Закроем открытый файл.
		ФайлЗакрыт = бит_БК_ОбщийКлиент.ЗакрытьExcelФайлКлиент(ExcelФайл);
		
		// Закроем приложение Excel.
		ExcelЗакрыт = бит_БК_ОбщийКлиент.ЗакрытьПриложениеExcelКлиент(Excel, Истина);
		Возврат Неопределено;
	КонецЕсли; 
	
	// Формируем таблицу загружаемых объектов.
	АдресТаблицаДанных = ПолучитьДанные(ExcelЛист);
	
	// Закроем открытый файл.
	ФайлЗакрыт = бит_БК_ОбщийКлиент.ЗакрытьExcelФайлКлиент(ExcelФайл);
	
	// Закроем приложение Excel.
	ExcelЗакрыт = бит_БК_ОбщийКлиент.ЗакрытьПриложениеExcelКлиент(Excel, Истина);

	Если АдресТаблицаДанных = Неопределено тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Файл не содержит данных";
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;

	//Получим структуру периодов
	СтруктураПериодов = ПолучитьСтруктуруПериодов(АдресТаблицаДанных);
	
	//Заполнить шапку
	ПараметрыШапки = ЗаполнитьШапкуДокумента(СтруктураПериодов);
	
	//Дополнение соответствия колонок
	 ДополнениеСоответствияКолонок();
	//Добавить колонки 1С и удалить строки с другими сценариями
	ИнициализироватьДанные1С(АдресТаблицаДанных);
	
	//Дополнительная обработка таблицы
	ВыполнитьДополнительныеОбработки(АдресТаблицаДанных,СтруктураПериодов);
	
	//1c-izhtc spawn (
	// перенесено в модуль объекта
	////Заполняем таблицу объекта
	//ЗаполнитьДанныеБюджета(Копия_ТЧ_БДДС);
	//1c-izhtc spawn )
	
	//Устанавлиаем флаг загрузки
	ПараметрыШапки.Вставить("бит_БК_ЗагрузкаИзExcel", Истина);
	
	СтруктураВозврата = Новый Структура("ПараметрыШапки, АдресТаблицаДанных", ПараметрыШапки, АдресКопия_ТЧ_БДДС);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанные(ExcelЛист)
	// Получим количество колонок.
    КоличествоКолонок = ExcelЛист.Cells(1,1).SpecialCells(11).Column;
	// Получим количество строк.
	КоличествоСтрок = ExcelЛист.Cells(1,1).SpecialCells(11).Row;
	
	Arr = ExcelЛист.UsedRange.Value;
	
	МассивКолонок = Arr.Выгрузить();
	
	АдресТаблицаДанных = ПолучитьДанныеНаСервере(КоличествоКолонок, КоличествоСтрок, МассивКолонок);
	
	Возврат АдресТаблицаДанных;
КонецФункции

&НаСервере
Функция ПолучитьДанныеНаСервере(КоличествоКолонок, КоличествоСтрок, МассивКолонок)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	Для сч = 1 по КоличествоКолонок Цикл
		ТаблицаДанных.Колонки.Добавить("Колонка"+сч);
	КонецЦикла;
	Для сч = 1 по КоличествоСтрок Цикл
		ТаблицаДанных.Добавить();
	КонецЦикла;
	
	Для НомКол = 1 По КоличествоКолонок Цикл
		
		МассивДанных = МассивКолонок[НомКол-1];
		
		// Загружаем значения текущей колонки.
		ТаблицаДанных.ЗагрузитьКолонку(МассивДанных, "Колонка"+НомКол);
		
	КонецЦикла;
	
	Если ТаблицаДанных.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДанных, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПериодов(АдресДанные)
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанные);
	
	//получаем периоды из 1 строки. периоды начинаются с 6-ой колонки если  или с 7-ой 
	СтруктураПериодов = Новый Структура;
	ПерваяСтрока = Данные[0];
	Если Сценарий = Справочники.СценарииПланирования.Бюджет_Инвест Тогда 
		НомерКолонки = 7;
	Иначе 
		НомерКолонки = 6;
	КонецЕсли;
	
	Для НомКол = НомерКолонки по Данные.Колонки.Количество() Цикл
		Период = ПерваяСтрока["Колонка"+НомКол];
		Если ЗначениеЗаполнено(Период) И ТипЗнч(Период) = Тип("Дата") Тогда 
			СтруктураПериодов.Вставить("Колонка"+НомКол,Период);
		Иначе 
			ВызватьИсключение  "Неверный формат данных <Дата>. Строка: "+Данные.Индекс(ПерваяСтрока)+1+", Колонка: "+НомКол;
		КонецЕсли;
	КонецЦикла;
	
	//Удаляем первую строку
	Данные.Удалить(0);
	
	АдресДанные = ПоместитьВоВременноеХранилище(Данные, АдресДанные);
	
	Возврат СтруктураПериодов;
КонецФункции

&НаСервере
Процедура ДополнениеСоответствияКолонок()
	СоответствиеКолонок = ПолучитьИзВременногоХранилища(АдресСоответствиеКолонок);
	
	//разница между упр и инвест бюджетом
	Если Сценарий = Справочники.СценарииПланирования.Бюджет_Инвест Тогда
		Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Проект", "Проект",Новый ОписаниеТипов("СправочникСсылка.Проекты"),Справочники.Проекты.ПустаяСсылка(),"ИскатьПоКоду",,Ложь);
		СоответствиеКолонок.Вставить("Колонка4",Структура);
		Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Комментарий", "Комментарий",Новый ОписаниеТипов("Строка"),,"НеИскать",,Ложь);
		СоответствиеКолонок.Вставить("Колонка5",Структура);
		Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Сценарий", "Сценарий",Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"),Справочники.СценарииПланирования.ПустаяСсылка(),"ИскатьПоРеквизиту","КодЗагрузкиИзExcel",Истина);
		СоответствиеКолонок.Вставить("Колонка6",Структура);
	иначе
		Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Комментарий", "Комментарий",Новый ОписаниеТипов("Строка"),,"НеИскать",,Ложь);
		СоответствиеКолонок.Вставить("Колонка4",Структура);
		Структура = Новый Структура("Имя, Наименование, ОписаниеТипов, Мета, Искать, ИмяРеквизита, ПроверятьЗаполнение","Сценарий", "Сценарий",Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"),Справочники.СценарииПланирования.ПустаяСсылка(),"ИскатьПоРеквизиту","КодЗагрузкиИзExcel",Истина);
		СоответствиеКолонок.Вставить("Колонка5",Структура);
	КонецЕсли;
	
	//получаем список обязательных измерений контроля они должы быть заполнены
	СписокИзмеренийКонтроляБюджета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", Сценарий, Новый СписокЗначений, "СписокЗначений"); 
	Для Каждого Элемент Из СоответствиеКолонок Цикл
		СтруктураПараметров = Элемент.Значение;
		//Статья и сценарий и период д. б. заполнены по умолчанию
		Если СтруктураПараметров.Имя = "СтатьяОборотов" ИЛИ СтруктураПараметров.Имя = "Сценарий" ИЛИ СтруктураПараметров.Имя = "Период" Тогда 
			Продолжить;
		КонецЕсли;
		
		//Попытаемся получить Имя перечисления
		Мета = Метаданные.Перечисления.бит_БК_ИзмеренияКонтроляБюджета.ЗначенияПеречисления.Найти(СтруктураПараметров.Имя);
		Если Мета = Неопределено тогда
			СтруктураПараметров.ПроверятьЗаполнение = Ложь;
		иначе
			СтруктураПараметров.ПроверятьЗаполнение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	АдресСоответствиеКолонок = ПоместитьВоВременноеХранилище(СоответствиеКолонок, АдресСоответствиеКолонок);
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанные1С(АдресДанные)
	Данные = ПолучитьИзВременногоХранилища(АдресДанные);
	СоответствиеКолонок = ПолучитьИзВременногоХранилища(АдресСоответствиеКолонок);
	// добавляем колонки под значения 1С
	Для Каждого Элемент Из СоответствиеКолонок Цикл
		СтруктураПараметров = Элемент.Значение;
		Данные.Колонки.Добавить(СтруктураПараметров.Имя, СтруктураПараметров.ОписаниеТипов);
	КонецЦикла;	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Каждого ТекСтрока Из Данные Цикл
		//Заполняем данными
		Для Каждого Элемент Из СоответствиеКолонок Цикл
			СтруктураПараметров = Элемент.Значение;
			Если СтруктураПараметров.Искать = "ИскатьПоКоду" Тогда 
				Мета = СтруктураПараметров.Мета.Метаданные();
				КодОбъекта = ПривестиККодуОбъекта(ТекСтрока[Элемент.Ключ], Мета.ДлинаКода);
				ТекСтрока[СтруктураПараметров.Имя] = Справочники[Мета.Имя].НайтиПоКоду(КодОбъекта);
			ИначеЕсли СтруктураПараметров.Искать = "ИскатьПоРеквизиту" Тогда 
				Мета = СтруктураПараметров.Мета.Метаданные();
				ТекСтрока[СтруктураПараметров.Имя] = Справочники[Мета.Имя].НайтиПоРеквизиту(СтруктураПараметров.ИмяРеквизита,ТекСтрока[Элемент.Ключ]);
			ИначеЕсли СтруктураПараметров.Искать = "ИскатьПоНаименованию" Тогда
				Мета = СтруктураПараметров.Мета.Метаданные();
				ТекСтрока[СтруктураПараметров.Имя] = Справочники[Мета.Имя].НайтиПоНаименованию(ТекСтрока[Элемент.Ключ]);
			ИначеЕсли СтруктураПараметров.Искать = "НеИскать" Тогда
				ТекСтрока[СтруктураПараметров.Имя] = ТекСтрока[Элемент.Ключ];
			ИначеЕсли СтруктураПараметров.Искать = "Вручную" Тогда
				//здесь можно задать значение
			КонецЕсли;
		КонецЦикла;		
		//Проверить строку на заполнение и удаление
		Если НЕ СтрокаЗаполненаКорректно(ТекСтрока, Данные.Индекс(ТекСтрока)+1) ИЛИ НЕ ТекСтрока.Сценарий = Сценарий Тогда
			МассивСтрокДляУдаления.Добавить(ТекСтрока);
			Продолжить;			
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивСтрокДляУдаления Цикл
		Данные.Удалить(ТекСтрока);
	КонецЦикла;
	
	АдресДанные = ПоместитьВоВременноеХранилище(Данные, АдресДанные);
КонецПроцедуры

&НаСервере
Функция ПривестиККодуОбъекта(КодExcel, ДлинаКода)
	//удаляем пробелы
	КодExcel = СтрЗаменить(КодExcel,Символы.НПП,"");
	ДлинаКодаExcel = СтрДлина(КодExcel);		
	Разница = ДлинаКода - ДлинаКодаExcel;
	КодОбъекта = "";
	//добавляем лид. 0
	Для сч = 1  По Разница Цикл
		КодОбъекта = КодОбъекта +"0";
	КонецЦикла;
	КодОбъекта = ""+КодОбъекта + КодExcel;
	Возврат КодОбъекта;
КонецФункции

&НаСервере
Функция СтрокаЗаполненаКорректно(ТекСтрока, НомерСтроки)
	СоответствиеКолонок = ПолучитьИзВременногоХранилища(АдресСоответствиеКолонок);
	ЗаполненаКорректно = Истина;
	ТекстСообщения = "Строка № "+НомерСтроки+" исходного файла:";
	//по уполчанию сообщение не заполнено
	ВыводитьСообщение = Ложь;

	Для Каждого Элемент Из СоответствиеКолонок Цикл
		СтруктураПараметров = Элемент.Значение;
		Если НЕ СтруктураПараметров.ПроверятьЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Найти(Элемент.Ключ,"БезКолонки") = 0 Тогда 
			КолонкаЗначение = "";
		иначе
			КолонкаЗначение = ТекСтрока[Элемент.Ключ];
		КонецЕсли;
		//Если значение 1С не заполнено, тогда проверяем: если нет исходного значения или колонка заполняется вручную по алгоритму сообщение не выводим
		Если НЕ ЗначениеЗаполнено(ТекСтрока[СтруктураПараметров.Имя]) Тогда 
			Если ЗначениеЗаполнено(КолонкаЗначение) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС+"	Не удалось определить значение <"+СтруктураПараметров.Наименование+"> по параметру "+КолонкаЗначение;
				ВыводитьСообщение = Истина;
			КонецЕсли;
			ЗаполненаКорректно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗаполненаКорректно И ВыводитьСообщение Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
		Сообщение.Сообщить();
	КонецЕсли;
	Возврат ЗаполненаКорректно;

	
КонецФункции

&НаСервере
Процедура ВыполнитьДополнительныеОбработки(АдресДанные,СтруктураПериодов)
		
	Данные = ПолучитьИзВременногоХранилища(АдресДанные);
	СоответствиеКолонок = ПолучитьИзВременногоХранилища(АдресСоответствиеКолонок);
	Копия_ТЧ_БДДС = ПолучитьИзВременногоХранилища(АдресКопия_ТЧ_БДДС);
	
	//Развернем таблицу по периодам в Копия_ТЧ_БДДС и без строк с 0 или отрицательными суммами
	
	Для Каждого ТекСтрока ИЗ Данные Цикл
		
		Для Каждого СтрокаПериод ИЗ СтруктураПериодов Цикл			
			Период = СтрокаПериод.Значение;
			Сумма = ТекСтрока[СтрокаПериод.Ключ];			
			Если Сумма = Неопределено Тогда 
				Сумма = 0;
			ИначеЕсли НЕ ТипЗнч(Сумма) = Тип("Число") Тогда
				ВызватьИсключение "Неверный формат данных <Число>. Колонка: "+СтрокаПериод.Ключ;
			КонецЕсли;	
			
			Если Сумма = 0 ИЛИ Сумма < 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			НовСтрока = Копия_ТЧ_БДДС.Добавить();
			НовСтрока.Период = Период;
			НовСтрока.Сумма = Сумма;
			Для Каждого ТекЭлемент Из СоответствиеКолонок Цикл
				СтруктураПараметров = ТекЭлемент.Значение;
				//НовСтрока.СтатьяОборотов = ТекСтрока.СтатьяОборотов;
				//НовСтрока.ЦФО = ТекСтрока.ЦФО;
				//НовСтрока.Аналитика_2 = ТекСтрока.Аналитика_2;
				//НовСтрока.Комментарий = ТекСтрока.Комментарий;
				//НовСтрока.Сценарий = ТекСтрока.Сценарий;
				НовСтрока[СтруктураПараметров.Имя] = ТекСтрока[СтруктураПараметров.Имя];
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	АдресКопия_ТЧ_БДДС = ПоместитьВоВременноеХранилище(Копия_ТЧ_БДДС, АдресКопия_ТЧ_БДДС);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьШапкуДокумента(СтруктураПериодов)
	
	ПараметрыШапки = Новый Структура;
	
	//определяем дату начала планирования как минимальную дату
	ПараметрыШапки.Вставить("ДатаНачалаПланирования",Дата(0001,01,01));
	Для Каждого ТекСтрока Из СтруктураПериодов Цикл
		Если ЗначениеЗаполнено(ПараметрыШапки.ДатаНачалаПланирования) Тогда 
			ПараметрыШапки.ДатаНачалаПланирования = Мин(ПараметрыШапки.ДатаНачалаПланирования, ТекСтрока.Значение);
		Иначе 
			ПараметрыШапки.ДатаНачалаПланирования = ТекСтрока.Значение;
		КонецЕсли;;
	КонецЦикла;		
	
	//1c-izhtc spawn (
	//ЗаполнитьЗначенияСвойств(мОбъектДляЗаполнения,ПараметрыШапки);
	Возврат ПараметрыШапки;
	//1c-izhtc spawn )
КонецФункции
 
