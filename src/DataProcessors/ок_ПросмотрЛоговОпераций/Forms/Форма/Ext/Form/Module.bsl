
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("Подключаемый_ПриОткрытии", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДеревоОпераций(Команда)
	ОбновитьДеревоОперацийНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборПоОперациям(Команда)
	ЗаполнитьОтборПоОперациямНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСостояния(Команда)
	ЗаполнитьСостоянияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
	
	ЭлементыДерева	=	ДеревоОпераций.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ДеревоОпераций.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	
	ЭлементыДерева	=	ДеревоОпераций.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ДеревоОпераций.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанные(Команда)
	ПолучитьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанные(Команда)
	
	ОписаниеОповещения	=	Новый ОписаниеОповещения("ОчиститьДанныеЗавершение", ЭтаФорма);
	
	ПоказатьВопрос(ОписаниеОповещения, "Очистить данные за период?", РежимДиалогаВопрос.ДаНет, 10, 
		КодВозвратаДиалога.Нет, "Очистка данных", КодВозвратаДиалога.Нет); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПросмотрЛогов(Команда)
	
	ОткрытьФорму("РегистрСведений.ок_ЛогированиеОпераций.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНастройкиЛогирования(Команда)
	
	ОткрытьФорму("РегистрСведений.ок_НастройкиЛогированияОпераций.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииУстановитьФлажки(Команда)
	УстановитьПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСнятьФлажки(Команда)
	УстановитьПометки(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриОткрытии()
	
	ЗаполнитьОперации	=	ОтборОперации.Количество() = 0;
	ЗаполнитьСостояния	=	ОтборСостояние.Количество() = 0;
	
	Если ЗаполнитьОперации Или ЗаполнитьСостояния Тогда
		ЗаполнитьНастройкиНаСервере(ЗаполнитьОперации, ЗаполнитьСостояния);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиНаСервере(ЗаполнитьОперации, ЗаполнитьСостояния)
	
	Если ЗаполнитьОперации Тогда
		ЗаполнитьОтборПоОперациямНаСервере();	
	КонецЕсли;
	
	Если ЗаполнитьСостояния Тогда
		ЗаполнитьСостоянияНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоОперацийНаСервере()
	
	ДеревоЗначений	=	РеквизитФормыВЗначение("ДеревоОпераций");
	
	Если Ложь Тогда
		ДеревоЗначений	=	Новый ДеревоЗначений;	
	КонецЕсли;
	
	ДеревоЗначений.Строки.Очистить();
	
	МассивСтрок		=	ОтборОперации.НайтиСтроки(Новый Структура("Пометка", Истина));
	ТаблицаОпераций	=	ОтборОперации.Выгрузить(МассивСтрок, "ИдентификаторОперации");
	
	МассивСостояний	=	Новый Массив;
	Для Каждого ЭлементСписка Из ОтборСостояние Цикл
		Если ЭлементСписка.Пометка Тогда
			МассивСостояний.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос			=	Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОпераций",			ТаблицаОпераций);
	Запрос.УстановитьПараметр("ДатаНачала",					Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",				Период.ДатаОкончания);
	Запрос.УстановитьПараметр("МассивСостояний",			МассивСостояний);
	Запрос.УстановитьПараметр("СтрокаПоиска",				"%" + ОтборСтрокаПоиска + "%");
	Запрос.УстановитьПараметр("СтрокаПоискаИспользовать",	ЗначениеЗаполнено(ОтборСтрокаПоиска));
	Запрос.Текст	=	
	"ВЫБРАТЬ
	|	ТаблицаОпераций.ИдентификаторОперации КАК ИдентификаторОперации
	|ПОМЕСТИТЬ ТаблицаОпераций
	|ИЗ
	|	&ТаблицаОпераций КАК ТаблицаОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ок_ЛогированиеОпераций.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ок_ЛогированиеОпераций.ИдентификаторЗадания КАК ИдентификаторЗадания,
	|	ок_ЛогированиеОпераций.ИдентификаторПотока КАК ИдентификаторПотока,
	|	ок_ЛогированиеОпераций.ДатаНачала КАК ДатаНачала,
	|	ок_ЛогированиеОпераций.ДатаОкончания КАК ДатаОкончания,
	|	ок_ЛогированиеОпераций.ИнформацияОбОшибке КАК ИнформацияОбОшибке,
	|	ок_ЛогированиеОпераций.СообщенияПользователю КАК СообщенияПользователю,
	|	ВЫБОР
	|		КОГДА ок_ЛогированиеОпераций.Состояние = 1
	|			ТОГДА 1
	|		КОГДА ок_ЛогированиеОпераций.Состояние = 2
	|			ТОГДА 3
	|		КОГДА ок_ЛогированиеОпераций.Состояние = 3
	|			ТОГДА 2
	|		КОГДА ок_ЛогированиеОпераций.Состояние = 4
	|			ТОГДА 0
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК КартинкаСтроки
	|ИЗ
	|	РегистрСведений.ок_ЛогированиеОпераций КАК ок_ЛогированиеОпераций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОпераций КАК ТаблицаОпераций
	|		ПО ок_ЛогированиеОпераций.ИдентификаторОперации = ТаблицаОпераций.ИдентификаторОперации
	|ГДЕ
	|	ок_ЛогированиеОпераций.ДатаНачала >= &ДатаНачала
	|	И ок_ЛогированиеОпераций.ДатаОкончания <= &ДатаОкончания
	|	И ок_ЛогированиеОпераций.Состояние В(&МассивСостояний)
	|	И ВЫБОР
	|			КОГДА &СтрокаПоискаИспользовать
	|				ТОГДА ок_ЛогированиеОпераций.ИнформацияОбОшибке ПОДОБНО &СтрокаПоиска
	|						ИЛИ ок_ЛогированиеОпераций.СообщенияПользователю ПОДОБНО &СтрокаПоиска
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторОперации,
	|	ДатаНачала УБЫВ,
	|	ДатаОкончания
	|ИТОГИ
	|	МИНИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания)
	|ПО
	|	ИдентификаторОперации,
	|	ИдентификаторЗадания";
	
	Результат	=	Запрос.Выполнить();
	
	ВыборкаПоОперациям	=	Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОперациям.Следующий() Цикл
		
		Операция				=	ДеревоЗначений.Строки.Добавить();
		Операция.Группировка	=	ВыборкаПоОперациям.ИдентификаторОперации;	
		Операция.Уровень		=	1;
		
		МассивКартинокОперации	=	Новый Массив;
		
		ВыборкаПоЗаданиям		=	ВыборкаПоОперациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаданиям.Следующий() Цикл
			
			Задание				=	Операция.Строки.Добавить();
			Задание.Группировка	=	ВыборкаПоЗаданиям.ИдентификаторЗадания;
			Задание.Уровень		=	2;
			ЗаполнитьЗначенияСвойств(Задание, ВыборкаПоЗаданиям);
			
			ВыборкаПоПотокам	=	ВыборкаПоЗаданиям.Выбрать();
			
			МассивКартинокЗадания	=	Новый Массив;
			Пока ВыборкаПоПотокам.Следующий() Цикл
				
				Поток				=	Задание.Строки.Добавить();
				Поток.Группировка	=	ВыборкаПоПотокам.ИдентификаторПотока;
				Поток.Уровень		=	3;
				ЗаполнитьЗначенияСвойств(Поток, ВыборкаПоПотокам);
				
				Если МассивКартинокЗадания.Найти(ВыборкаПоПотокам.КартинкаСтроки) = Неопределено Тогда
					МассивКартинокЗадания.Добавить(ВыборкаПоПотокам.КартинкаСтроки);
				КонецЕсли;
				
			КонецЦикла;
			
			Задание.КартинкаСтроки	=	ПолучитьКартинкуСтроки(МассивКартинокЗадания);
			
			Если МассивКартинокОперации.Найти(Задание.КартинкаСтроки) = Неопределено Тогда
				МассивКартинокОперации.Добавить(Задание.КартинкаСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
		Операция.КартинкаСтроки	=	ПолучитьКартинкуСтроки(МассивКартинокОперации);
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоОпераций");
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьКартинкуСтроки(МассивКартинок)
	
	Если Не МассивКартинок.Найти(0) = Неопределено Тогда
		Возврат	0;
	ИначеЕсли Не МассивКартинок.Найти(2) = Неопределено Тогда  
		Возврат	2;
	ИначеЕсли Не МассивКартинок.Найти(3) = Неопределено Тогда  
		Возврат	3;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтборПоОперациямНаСервере()
	
	Запрос	=	Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ок_НастройкиЛогированияОпераций.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ИСТИНА КАК Пометка,
	|	ПОДСТРОКА(ок_НастройкиЛогированияОпераций.Синоним, 0, 200) КАК Синоним,
	|	ок_НастройкиЛогированияОпераций.ВидОперации КАК ВидОперации
	|ИЗ
	|	РегистрСведений.ок_НастройкиЛогированияОпераций КАК ок_НастройкиЛогированияОпераций
	|ГДЕ
	|	ок_НастройкиЛогированияОпераций.Использовать
	|
	|УПОРЯДОЧИТЬ ПО
	|	Синоним";
	
	ОтборОперации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостоянияНаСервере()
	
	ОтборСостояние.Очистить();
	
	ОтборСостояние.Добавить(1, "Выполнено", 			Истина, БиблиотекаКартинок.СостояниеИнтеграцииОтправлено); 
	ОтборСостояние.Добавить(2, "Завершено с ошибками", 	Истина, БиблиотекаКартинок.ок_ЗавершеноСОшибками); 
	ОтборСостояние.Добавить(3, "Отменено", 				Истина, БиблиотекаКартинок.СостояниеИнтеграцииОшибка); 
	ОтборСостояние.Добавить(4, "Выполняется", 			Истина, БиблиотекаКартинок.СостояниеИнтеграцииОжидание); 
	                                                                                            
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Пометка)
	
	Для Каждого Строка Из ОтборОперации Цикл
		Строка.Пометка	=	Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеНаСервере()
	ок_ЛогированиеОпераций.ОбновлениеЛогаОпераций();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеНаСервере()
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",		Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	Период.ДатаОкончания);
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ок_ЛогированиеОпераций.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ок_ЛогированиеОпераций.ИдентификаторЗадания КАК ИдентификаторЗадания,
	|	ок_ЛогированиеОпераций.ИдентификаторПотока КАК ИдентификаторПотока
	|ИЗ
	|	РегистрСведений.ок_ЛогированиеОпераций КАК ок_ЛогированиеОпераций
	|ГДЕ
	|	ок_ЛогированиеОпераций.ДатаНачала >= &ДатаНачала
	|	И ок_ЛогированиеОпераций.ДатаОкончания <= &ДатаОкончания";
	Результат	=	Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка	=	Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи	=	РегистрыСведений.ок_ЛогированиеОпераций.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти