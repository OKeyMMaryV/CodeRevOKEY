//2012-11-09
Перем ГруппаНастроек Экспорт;

Процедура РучнаяТрансляцияЗагруженныхДанныхИзАксапты() Экспорт
	
	Если не ПроверитьГраницыПериодов() Тогда Возврат; КонецЕсли;
	
	МассивОчередей	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Очередность, ";");
	
	Для Каждого ТекущаяОчередь из МассивОчередей Цикл 
		Если ОК_ОбщегоНазначения.ПроверитьСтрокаВЧисло(ТекущаяОчередь) Тогда 
			Очередность	= Число(ТекущаяОчередь);
		Иначе 
			Сообщение	= "Очередь " + ТекущаяОчередь + " не удается привести к числу, она исключается из трансляции";
			ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,Сообщение);
			СделатьЗаписьЖР(Сообщение);
			Продолжить;
		КонецЕсли;
		
		// Запросом получить все требующиеся согласно отборам документы	
		Запрос = Новый Запрос;
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2019-04-08 (#3319)
		
		Если Очередность = 5 Тогда //ДДС
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_Дополнительный_2.Регистратор КАК Объект,
			|	ЛОЖЬ КАК Обработано,
			|	ВЫБОР
			|		КОГДА (бит_Дополнительный_2.СчетДт В ИЕРАРХИИ (&Группа9)
			|				ИЛИ бит_Дополнительный_2.СчетКт В ИЕРАРХИИ (&Группа9))
			|				И бит_Дополнительный_2.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ИндексСчет9,
			|	ВЫБОР
			|		КОГДА (бит_Дополнительный_2.СчетДт В ИЕРАРХИИ (&СчетСортировки)
			|					ИЛИ бит_Дополнительный_2.СчетКт В ИЕРАРХИИ (&СчетСортировки))
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ИндексСчет
			|ПОМЕСТИТЬ ВТОбщая
			|ИЗ
			|	РегистрБухгалтерии.бит_Дополнительный_2 КАК бит_Дополнительный_2
			|ГДЕ
			|	бит_Дополнительный_2.Период МЕЖДУ &ДатаНач И &ДатаКон
			|	И бит_Дополнительный_2.Организация = &Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТОбщая.Объект,
			|	ВТОбщая.Обработано,
			|	МАКСИМУМ(ВТОбщая.ИндексСчет) КАК ИндексСчет,
			|	МАКСИМУМ(ВТОбщая.ИндексСчет9) КАК ИндексСчет9
			|ПОМЕСТИТЬ ВТГруппировка
			|ИЗ
			|	ВТОбщая КАК ВТОбщая
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТОбщая.Объект,
			|	ВТОбщая.Обработано
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТГруппировка.Объект,
			|	ВТГруппировка.Обработано
			|ИЗ
			|	ВТГруппировка КАК ВТГруппировка
			|ГДЕ
			|	ВТГруппировка.ИндексСчет = 1
			|	И ВТГруппировка.ИндексСчет9 <> 1";
			Запрос.УстановитьПараметр("Организация", Организация);	
			Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПериодС));
			Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПериодПо));
			Запрос.УстановитьПараметр("Группа9", ПланыСчетов.бит_Дополнительный_2.СчетаУчетаДДС);
			Запрос.УстановитьПараметр("СчетСортировки", ПланыСчетов.бит_Дополнительный_2.ДенежныеСредстваИэквиваленты);
								
			ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
					
		//Если НЕ ТрансляцияТолькоНеоттранслированных 
		ИначеЕсли НЕ ТрансляцияТолькоНеоттранслированных Тогда
		
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2019-04-08 (#3319)
			Запрос.Текст = "ВЫБРАТЬ
			|	бит_ок_ОперацияАксапты.Ссылка КАК Объект,
			|	ЛОЖЬ КАК Обработано
			|ИЗ
			|	Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
			|ГДЕ
			|	бит_ок_ОперацияАксапты.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И бит_ок_ОперацияАксапты.ПометкаУдаления = ЛОЖЬ
			|	И бит_ок_ОперацияАксапты.Организация = &Организация";
			Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПериодС));
			Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПериодПо));
			Запрос.УстановитьПараметр("Организация", Организация);
			ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		Иначе
			ЗапросПриемника = Новый Запрос;
			ЗапросПриемника.Текст = "ВЫБРАТЬ
			|	бит_НазначениеПравилТрансляцииСрезПоследних.ПравилоТрансляции.Приемник  КАК Приемник
			|ИЗ
			|	РегистрСведений.бит_НазначениеПравилТрансляции.СрезПоследних КАК бит_НазначениеПравилТрансляцииСрезПоследних
			|ГДЕ
			|	бит_НазначениеПравилТрансляцииСрезПоследних.ПравилоТрансляции.Очередность = &Очередность
			|
			|СГРУППИРОВАТЬ ПО
			|	бит_НазначениеПравилТрансляцииСрезПоследних.ПравилоТрансляции.Приемник";
			ЗапросПриемника.УстановитьПараметр("Очередность", Очередность);
			ВыборкаПриемника = ЗапросПриемника.Выполнить().Выбрать();
			Если ВыборкаПриемника.Следующий() Тогда
				Приемник = ВыборкаПриемника.Приемник.ИмяОбъекта;
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ
			|	бит_ок_ОперацияАксапты.Ссылка КАК Объект,
			|	@Регистр@.Регистратор
			|ИЗ
			|	Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.@Регистр@ КАК @Регистр@
			|		ПО (@Регистр@.Регистратор = бит_ок_ОперацияАксапты.Ссылка)
			|ГДЕ
			|	бит_ок_ОперацияАксапты.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И бит_ок_ОперацияАксапты.ПометкаУдаления = ЛОЖЬ
			|	И бит_ок_ОперацияАксапты.Организация = &Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	Объект";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "@Регистр@", Приемник); 
			Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПериодС));
			Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПериодПо));
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("парамРегистратор", Документы.бит_ок_ОперацияАксапты.ПустаяСсылка());					   
			ТаблицаДокументов = Запрос.Выполнить().Выгрузить();  
			НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("Регистратор", Null));					   
			ТаблицаДокументов = Новый ТаблицаЗначений;
			ТаблицаДокументов.Колонки.Добавить("Объект");
			ТаблицаДокументов.Колонки.Добавить("Обработано");
			Для Каждого Строка Из НайденныеСтроки Цикл
				НоваяСтрока = ТаблицаДокументов.Добавить();
				НоваяСтрока.Объект = Строка.Объект;
				НоваяСтрока.Обработано = ЛОЖЬ;
			КонецЦикла;
		КонецЕсли;
		
		// сформировать общую таблицу документов для трансляции
		Сообщение	= "Документов для обработки  " + ТаблицаДокументов.Количество();
		ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,Сообщение);
		СделатьЗаписьЖР(Сообщение);
		
		Сообщение	= "Начало трансляций с очередностью: " + Очередность;
		ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,Сообщение);	
		СделатьЗаписьЖР(Сообщение);
		
		//Разбиваем таблицу документов на массив таблиц	с количеством элементов равным количеству потоков 
		МассивПартий = Новый Массив;
		Для Итер = 1 по КоличествоПотоков Цикл
			МассивПартий.Добавить(ТаблицаДокументов.СкопироватьКолонки());
		КонецЦикла;
		
		КолВоВПартии = Окр(ТаблицаДокументов.Количество() / КоличествоПотоков);
		
		КолВоВТекущейПартии = КолВоВПартии;
		Итер = 0;
		Для каждого Стр из ТаблицаДокументов Цикл
			НовСтр = МассивПартий[Итер].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			
			КолВоВТекущейПартии = КолВоВТекущейПартии - 1;
			Если КолВоВТекущейПартии <= 0 И (Итер+1)<КоличествоПотоков Тогда
				Итер = Итер + 1;
				КолВоВТекущейПартии = КолВоВПартии;
			КонецЕсли;
		КонецЦикла;
		
		МассивФЗ		= Новый Массив;
		НомерПотока 	= 1;
		Для Каждого Таб из МассивПартий Цикл
			
			//МассивПараметров = Новый Массив(3);
			МассивПараметров = Новый Массив(4);      //ОК Довбешка Т. 15.04.2014
			МассивПараметров[0] = Таб;
			МассивПараметров[1] = НомерПотока;
			МассивПараметров[2] = Очередность;
			МассивПараметров[3] = Ложь;              //ОК Довбешка Т. 15.04.2014
			Ключ = Новый УникальныйИдентификатор;
			
			МассивФЗ.Добавить(ФоновыеЗадания.Выполнить("бит_МодульРегламентныхЗаданий.ФоноваяТрансляция", МассивПараметров, Ключ, "Фоновая трансляция. Поток №" + НомерПотока));
			
			НомерПотока = НомерПотока + 1;
		КонецЦикла;
		Сообщение		= "Стартовало " + КоличествоПотоков + " потоков.";
		ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,Сообщение);
		СделатьЗаписьЖР(Сообщение);
		
		Если НЕ ТрансляцияТолькоНеоттранслированных Тогда
			Прервать;
		КонецЕсли;
		
		ФоновыеЗадания.ОжидатьЗавершения(МассивФЗ);
		
	КонецЦикла;	

	Если ТрансляцияТолькоНеоттранслированных Тогда
		Сообщение = НСтр("ru = 'Завершена автоматическая трансляция загруженных данных из Аксапты.'"); 
		ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,Сообщение);
		СделатьЗаписьЖР(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Процедура РучнаяРасТрансляцияЗагруженныхДанныхИзАксапты(УникальныйИдентификатор, АдресФормы, КолВоДокументов) Экспорт
	
	Если Не ПроверитьГраницыПериодов() Тогда Возврат; КонецЕсли;
	
	// Получим массив документов для выполнения отмены трансляции.
	ЗапросРастранслируемыхДокументов = Новый Запрос;
	ЗапросРастранслируемыхДокументов.Текст = "ВЫБРАТЬ
	|	бит_ок_ОперацияАксапты.Ссылка
	|ИЗ
	|	Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
	|ГДЕ
	|	бит_ок_ОперацияАксапты.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И бит_ок_ОперацияАксапты.ПометкаУдаления <> ИСТИНА
	|{ГДЕ
	|	(бит_ок_ОперацияАксапты.Организация = &Организация)}";
	
	ЗапросРастранслируемыхДокументов.УстановитьПараметр("ДатаНач", НачалоДня(ПериодС));										 										 
	ЗапросРастранслируемыхДокументов.УстановитьПараметр("ДатаКон", НачалоДня(ПериодПо));
	ЗапросРастранслируемыхДокументов.УстановитьПараметр("Организация", Организация);
	
	ТаблицаДокументов 	= ЗапросРастранслируемыхДокументов.Выполнить().Выгрузить();
	МассивДокументов 	= ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	КолВоДокументов  	= МассивДокументов.Количество();
	
	Если КолВоДокументов = 0 Тогда
		Сообщение		= "Не указаны документы для отмены трансляции движений!";
		бит_ОбщегоНазначения.бит_Сообщить(Сообщение, СтатусСообщения.Внимание);
		СделатьЗаписьЖР(Сообщение);
		Возврат;
	КонецЕсли;
	
	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 22.10.2015 11:45:24
	АдресФормы = ПоместитьВоВременноеХранилище(МассивДокументов,УникальныйИдентификатор);
	//-- СВВ}
	
	////////МассивОчередей	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Очередность, ";");
	////////
	////////Для Каждого ТекущаяОчередь из МассивОчередей Цикл 
	////////	Если ОК_ОбщегоНазначения.ПроверитьСтрокаВЧисло(ТекущаяОчередь) Тогда 
	////////		Очередность	= Число(ТекущаяОчередь);
	////////	Иначе 
	////////		Сообщение	= "Очередь " + ТекущаяОчередь + " не удается привести к числу, она исключается из трансляции";
	////////		ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,Сообщение);
	////////		СделатьЗаписьЖР(Сообщение);
	////////		Продолжить;
	////////	КонецЕсли;
	////////	
	////////	ЗапросПриемников = Новый Запрос;
	////////	ЗапросПриемников.Текст = "ВЫБРАТЬ
	////////	|	бит_НазначениеПравилТрансляцииСрезПоследних.ПравилоТрансляции.Приемник КАК ОбъектСистемы
	////////	|ИЗ
	////////	|	РегистрСведений.бит_НазначениеПравилТрансляции.СрезПоследних КАК бит_НазначениеПравилТрансляцииСрезПоследних
	////////	|ГДЕ
	////////	|	бит_НазначениеПравилТрансляцииСрезПоследних.ПравилоТрансляции.Очередность = &Очередность
	////////	|
	////////	|СГРУППИРОВАТЬ ПО
	////////	|	бит_НазначениеПравилТрансляцииСрезПоследних.ПравилоТрансляции.Приемник";
	////////	
	////////	ЗапросПриемников.УстановитьПараметр("Очередность", Очередность); 
	////////	Приемники 		= ЗапросПриемников.Выполнить().Выгрузить();
	////////	
	////////	МассивПриемники = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Приемники.ВыгрузитьКолонку("ОбъектСистемы"));
	////////	КолВоПриемники  = МассивПриемники.Количество();
	////////	
	////////	Если КолВоПриемники = 0 Тогда
	////////		Сообщение	= "Не указаны приемники для отмены трансляции движений!";
	////////		бит_ОбщегоНазначения.бит_Сообщить(Сообщение, СтатусСообщения.Внимание);
	////////		СделатьЗаписьЖР(Сообщение);
	////////		Возврат;
	////////	КонецЕсли;
	////////	
	////////	//#Если Клиент Тогда
	////////	//	
	////////	//	// Оповестим пользователя о начале выполнения отмены трансляции движений.
	////////	//	
	////////	//	Сообщить("Выполняется отмена трансляции движений (" + ТекущаяДата() + ").", СтатусСообщения.Информация);
	////////	//	
	////////	//	// Откроем форму индикации.
	////////	//	ФормаИндикации = бит_РаботаСДиалогами.ОткрытьФормаИндикации(КолВоДокументов, "Отмена трансляции движений");
	////////	//	
	////////	//#КонецЕсли
	////////	
	////////	Сообщение	= "Начало отмены трансляции";
	////////	бит_ОбщегоНазначения.бит_Сообщить(Сообщение, СтатусСообщения.Внимание);
	////////	СделатьЗаписьЖР(Сообщение);	
	////////	
	////////	Счетчик = 0;
	////////	
	////////	Для Каждого ТекДокумент Из МассивДокументов Цикл
	////////		
	////////		Счетчик = Счетчик + 1;
	////////		Отказ   = Ложь;
	////////		
	////////		//#Если Клиент Тогда
	////////		//	ОбработкаПрерыванияПользователя();
	////////		//	
	////////		//	// Выведем состояние.
	////////		//	бит_РаботаСДиалогами.ВывестиСостояниеВФормуИндикации(ФормаИндикации, Строка(ТекДокумент),,Счетчик, КолВоДокументов);
	////////		//	Состояние("Обработано документов: " + Счетчик + " из " + КолВоДокументов);
	////////		//	
	////////		//#КонецЕсли
	////////		
	////////		ДокументОбъект = ТекДокумент.ПолучитьОбъект();
	////////		
	////////		Если НЕ бит_ОбщегоНазначения.ЗаблокироватьОбъект(ДокументОбъект,Строка(ТекДокумент),,"Все") Тогда
	////////			
	////////			Продолжить;
	////////			
	////////		КонецЕсли; 
	////////		
	////////		Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
	////////			
	////////			// при наличиии механизма контроля закрытого периода сохраним движения для последующего анализа
	////////			Выполнить("бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект,Отказ,РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный)");
	////////			
	////////		КонецЕсли; 		
	////////		
	////////		// Выполним отмену трансляции движений.
	////////		ОтменитьТрансляцию(ДокументОбъект.Ссылка, МассивПриемники, Счетчик);
	////////		
	////////		Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда
	////////			
	////////			// при наличиии механизма контроля закрытого периода сформируем корректирующие проводки			
	////////			Выполнить("бит_КонтрольЗакрытогоПериода.КонтрольПриУдаленииПроведения(ДокументОбъект,Отказ)");
	////////			
	////////		КонецЕсли; 
	////////		
	////////		Если ДокументОбъект.Заблокирован() Тогда
	////////			
	////////			ДокументОбъект.Разблокировать();
	////////			
	////////		КонецЕсли; 
	////////		
	////////	КонецЦикла; // Для Каждого ТекДокумент Из МассивДокументов Цикл
	////////КонецЦикла;
	////////
	////////Сообщение	= "Завершение отмены трансляции";
	////////СделатьЗаписьЖР(Сообщение);	
	////////
	////////
	//////////#Если Клиент Тогда
	//////////	
	//////////	// Оповестим пользователя об окончании выполнения отмены трансляции движений.
	////////	Сообщить("Отмена трансляции движений завершена (" + ТекущаяДата() + "), обработано " + КолВоДокументов + ".", СтатусСообщения.Информация);
	//////////	
	//////////	// Закроем форму индикации.
	//////////	бит_РаботаСДиалогами.ЗакрытьФормуИндикации(ФормаИндикации);
	//////////	
	//////////#КонецЕсли
	
	
КонецПроцедуры	

Функция ОтменитьТрансляцию(ДокументСсылка, РегистрыПриемники, Позиция)
	
	ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,Строка(Позиция) + ") По документу: " + Строка(ДокументСсылка));
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ДействиеВыполнено = Истина;
	
	Для Каждого ТекРегистр Из РегистрыПриемники Цикл
		
		Если ТекРегистр.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии Тогда
			МенеджерРегистра = бит_ОбщегоНазначения.ПолучитьМенеджер("РегистрыБухгалтерии");
			ПредставлеРегистра = "движения регистра бухгалтерии";
			
		ИначеЕсли ТекРегистр.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления Тогда
			МенеджерРегистра = бит_ОбщегоНазначения.ПолучитьМенеджер("РегистрыНакопления");
			ПредставлеРегистра = "движения регистра накопления";
			
		Иначе
			МенеджерРегистра = Неопределено;
		КонецЕсли;
		
		Если МенеджерРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НаборДляОчистки = МенеджерРегистра[ТекРегистр.ИмяОбъекта].СоздатьНаборЗаписей();
		НаборДляОчистки.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборДляОчистки.Прочитать();
		
		Если НаборДляОчистки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборДляОчистки.Очистить();
		
		// Запишем очищенный набор записей.
		флВыполненаЗапись = бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборДляОчистки);
		Если Не флВыполненаЗапись Тогда
			
			Если ДействиеВыполнено Тогда
				ДействиеВыполнено = Ложь;
			КонецЕсли;
			
			// Не успешная запись.
			Сообщить("	- не отменены " + ПредставлеРегистра + ": """ + ТекРегистр.Наименование + """.");
			
		Иначе
			// Успешная запись.
			Сообщить("	- отменены " + ПредставлеРегистра + ": """ + ТекРегистр.Наименование + """.");
			
			Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыСведений.бит_СоответствиеЗаписейТрансляции) Тогда
				
				// очистим соответствие номеров движений
				НаборСоответствие = РегистрыСведений.бит_СоответствиеЗаписейТрансляции.СоздатьНаборЗаписей();
				НаборСоответствие.Отбор.Регистратор.Установить(ДокументСсылка);
				НаборСоответствие.Прочитать();
				
				бит_МеханизмТрансляции.ОчиститьСоответствиеДвижений(НаборСоответствие,,ТекРегистр);
				
				бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборСоответствие);			
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДействиеВыполнено;
	
КонецФункции // ОтменитьТрансляцию()

Процедура ЗаполнитьНастройки() Экспорт 
	
	Запрос 							= Новый Запрос;
	
	//Проверка наличия групп в регистре, если их нет, то добавляются
	
	Запрос.Текст = "ВЫБРАТЬ
	|	""ГруппаНастроек"" КАК Группа,
	|	""ОчередностьПравил"" КАК ИмяНастройки,
	|	""1"" КАК Значение
	|ПОМЕСТИТЬ ВТ_ПроверяемыеНастройки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ГруппаНастроек"",
	|	""КоличествоПотоков"",
	|	10
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ГруппаНастроек"",
	|	""ТолькоНеОттранслированные"",
	|	Истина
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Группа,
	|	ИмяНастройки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПроверяемыеНастройки.Группа,
	|	ВТ_ПроверяемыеНастройки.ИмяНастройки,
	|	ВТ_ПроверяемыеНастройки.Значение
	|ИЗ
	|	ВТ_ПроверяемыеНастройки КАК ВТ_ПроверяемыеНастройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	|		ПО ВТ_ПроверяемыеНастройки.Группа = бит_ок_НастройкиМеханизмаИмпортаДанных.Группа
	|			И ВТ_ПроверяемыеНастройки.ИмяНастройки = бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки
	|ГДЕ
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки ЕСТЬ NULL ";
	
	Запрос.Текст	= СтрЗаменить(Запрос.Текст, "ГруппаНастроек", ГруппаНастроек);
	ТЗНастройки 	= Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Для Каждого СтрокаНастроек из ТЗНастройки Цикл 
		ДобавляемаяНастройка				= РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.СоздатьМенеджерЗаписи();
		ДобавляемаяНастройка.Группа			= СтрокаНастроек.Группа;
		ДобавляемаяНастройка.ИмяНастройки	= СтрокаНастроек.ИмяНастройки;
		ДобавляемаяНастройка.Значение		= СтрокаНастроек.Значение;
		ДобавляемаяНастройка.Записать(Истина);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	
	Запрос.Текст	= "ВЫБРАТЬ
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа,
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки,
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	|ГДЕ
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа В(&СписокНастроек)";
	
	СписокНастроек			= Новый Массив;
	СписокНастроек.Добавить(ГруппаНастроек);
	СписокНастроек.Добавить("ПараметрыЗагрузкиАксапты");
	СписокНастроек.Добавить("Организации");
	Запрос.УстановитьПараметр("СписокНастроек", СписокНастроек);
	
	ТЗНастройки 			= Запрос.Выполнить().Выгрузить();
	
	Очередность				= ТЗНастройки.Найти("ОчередностьПравил").Значение;
	КоличествоПотоков		= ТЗНастройки.Найти("КоличествоПотоков").Значение;
	ТрансляцияТолькоНеоттранслированных = ТЗНастройки.Найти("ТолькоНеОттранслированные").Значение;
	
	Отказ					= Ложь;
	
	ОпределитьНастройку(ТЗНастройки, "Организация Лоджистикс", Организация);
	ОпределитьНастройку(ТЗНастройки, "Начало Периода Лоджистикс", ПериодС);
	ОпределитьНастройку(ТЗНастройки, "Конец Периода Лоджистикс", ПериодПо);
	
КонецПроцедуры

Процедура ОпределитьНастройку(ТЗНастройки, ИмяНастройки, Параметр)
	
	НайденнаяСтрока			= ТЗНастройки.Найти(ИмяНастройки);
	Если НайденнаяСтрока = Неопределено Тогда 
		Сообщение			= "В Настройках механизма импорта данных не найдена настройка " + ИмяНастройки;
		ОК_ОбщегоНазначения.ВыводСтатусаСообщения(, Сообщение);		
		СделатьЗаписьЖР(Сообщение);
		Отказ				= Истина;
	Иначе
		Параметр			= НайденнаяСтрока.Значение;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СделатьЗаписьЖР(Сообщение)

	#Если Сервер Тогда
		ЗаписьЖурналаРегистрации("Трансляция загруженных данных из Аксапты. Обработка" 
		,УровеньЖурналаРегистрации.Информация 
		,
		,
		,Сообщение);
	#КонецЕсли 

КонецПроцедуры

Функция ПроверитьГраницыПериодов()

	// Получить Границу запрета изменения данных
	Запрос = Новый Запрос;
	//++СВВ
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГраницыЗапретаИзмененияДанных.ДатаЗапрета КАК ГраницаЗапретаИзменений
	               |ИЗ
	               |	РегистрСведений.ДатыЗапретаИзменения КАК ГраницыЗапретаИзмененияДанных
	               |ГДЕ
	               |	ГраницыЗапретаИзмененияДанных.Объект = &Организация
	               |	И ГраницыЗапретаИзмененияДанных.Раздел = &Раздел";
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений
	//|ИЗ
	//|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
	//|ГДЕ
	//|	ГраницыЗапретаИзмененияДанных.Организация = &Организация";
	Запрос.УстановитьПараметр("Раздел", ДатыЗапретаИзмененияБП.РазделБухгалтерскийУчет().Ссылка);
	//--СВВ
	Запрос.УстановитьПараметр("Организация", Организация);
	ЗапросВыполнить = Запрос.Выполнить();
	Если ЗапросВыполнить.Пустой() Тогда
		Граница = Неопределено;
	Иначе
		Граница = Запрос.Выполнить().Выгрузить()[0].ГраницаЗапретаИзменений;
	КонецЕсли;
	
 	Если ПериодС <> Неопределено И Граница <> Неопределено Тогда
		Если ПериодС < Граница Тогда
			Сообщение = "Дата запрета редактирования " + Граница + ", позже периода загрузки, начинающегося с " + ПериодС; 
			ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,Сообщение);
			СделатьЗаписьЖР(Сообщение);
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;

	Возврат Истина;
	
КонецФункции // ПроверитьГраницыПериодов()


ГруппаНастроек	= "РегламентнаяТрансляцияОперацийАксапты";
ЗаполнитьНастройки();