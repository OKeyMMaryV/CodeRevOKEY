#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет строку в протокол с отступом.
// 
// Параметры:
//  Протокол 		- Текстовый документ.
//  ТекстСообщения  - Строка.
// 
Процедура ДополнитьПротокол(Протокол, ТекстСообщения)

	Протокол.ДобавитьСтроку(Символы.Таб + ТекстСообщения);	

КонецПроцедуры // ДополнитьПротокол()

// ----------------------------------------------------------------------
// ВСПОМОГАТЕЛЬНЫЕ СПРАВОЧНИКИ

// Процедура проверяет и если нужно создает группу статей оборотов.
// 
// Параметры:
//  фГруппаСтатейНДС - СправочникСсылка.бит_СтатьиОборотов.
//  Протокол 		 - Текстовый документ.
// 
// Возвращаемое значение:
//   Булево
// 
Функция ПроверитьГруппуСтатейОборотовНДС(фГруппаСтатейНДС, Протокол)
	
	ПроверкаПрошлаУспешно = Истина;
	ИмяСпр = "НДС";
	
	Если Не ЗначениеЗаполнено(фГруппаСтатейНДС) ИЛИ Не ЗначениеЗаполнено(фГруппаСтатейНДС.Код) Тогда
		
		// Поиск подходящего элемента справочника
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", ИмяСпр);
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_СтатьиОборотов.Ссылка
		|ИЗ
		|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
		|ГДЕ
		|	бит_СтатьиОборотов.Наименование = &Наименование
		|	И бит_СтатьиОборотов.ЭтоГруппа = ИСТИНА
		|";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			// Создание нового элемента справочника
			ГруппаСтатейНДС = Справочники.бит_СтатьиОборотов.СоздатьГруппу();	
			ГруппаСтатейНДС.Наименование = ИмяСпр;
				
			Если бит_ОбщегоНазначения.ЗаписатьСправочник(ГруппаСтатейНДС, , "Нет") Тогда
				
				фГруппаСтатейНДС = ГруппаСтатейНДС.Ссылка;
				
				ТекстСообщения = Нстр("ru = 'Создана группа статей оборотов ""%1%"" (код: %2%).'");	
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяСпр, фГруппаСтатейНДС.Код);
				
			Иначе
				
				ГруппаСтатейНДС = Неопределено;
				ПроверкаПрошлаУспешно = Ложь;
				
				ТекстСообщения = Нстр("ru = 'Операция прервана. Не удалось создать группу статей оборотов.'");
				
			КонецЕсли;
			
			ДополнитьПротокол(Протокол, ТекстСообщения);
			
		Иначе	
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			фГруппаСтатейНДС = Выборка.Ссылка;
			
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
	
	КонецЕсли;
	
	Возврат ПроверкаПрошлаУспешно;

КонецФункции // ПроверитьГруппуСтатейОборотовНДС()

// Процедура проверяет и если нужно создает вид статей НДС.
// 
// Параметры:
//  фВидСтатьи - СправочникСсылка.бит_ВидыСтатейОборотов.
//  Протокол   - Текстовый документ.
// 
// Возвращаемое значение:
//   Булево
// 
Функция ПроверитьВидСтатейОборотовНДС(фВидСтатьи, Протокол)

	ПроверкаПрошлаУспешно = Истина;
	ИмяСпр = "НДС";
	
	Если Не ЗначениеЗаполнено(фВидСтатьи) ИЛИ Не ЗначениеЗаполнено(фВидСтатьи.Код) Тогда
		              		
		// Поиск подходящего элемента справочника
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", ИмяСпр);
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ВидыСтатейОборотов.Ссылка
		|ИЗ
		|	Справочник.бит_ВидыСтатейОборотов КАК бит_ВидыСтатейОборотов
		|ГДЕ
		|	бит_ВидыСтатейОборотов.Наименование = &Наименование
		|";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			// Создание нового элемента справочника
			ВидСтатьи = Справочники.бит_ВидыСтатейОборотов.СоздатьЭлемент();
			ВидСтатьи.Наименование = ИмяСпр;
			
			Если бит_ОбщегоНазначения.ЗаписатьСправочник(ВидСтатьи, , "Нет") Тогда   			
				
				фВидСтатьи = ВидСтатьи.Ссылка;
				
				ТекстСообщения = Нстр("ru = 'Создан вид статей оборотов ""%1%"" (код: %2%).'");	
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяСпр, фВидСтатьи.Код);	
				
			Иначе
				
				фВидСтатьи = Неопределено;
				ПроверкаПрошлаУспешно = Ложь;
				
				ТекстСообщения = Нстр("ru = 'Операция прервана. Не удалось создать вид статьи.'");				           			
				
			КонецЕсли;
			
			ДополнитьПротокол(Протокол, ТекстСообщения);

		Иначе
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			фВидСтатьи = Выборка.Ссылка;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ПроверкаПрошлаУспешно;

КонецФункции // ПроверитьВидСтатейОборотовНДС()

// Функция формирует имя статьи оборотов.
// 
// Параметры:
//  СтавкаНДС  	- ПеречислениеСсылка.СтавкиНДС.
//  Направление - ПеречислениеСсылка.бит_РасходДоход.
//  
// Возвращаемое значение:
//   Строка.
// 
Функция ПолучитьНаименованиеСтатьи(СтавкаНДС, Направление)

	ИмяСтатьи = СокрЛП("НДС " + Строка(СтавкаНДС) + " (" + Строка(Направление) + ")");
	
	Возврат ИмяСтатьи;
	
КонецФункции // ПолучитьНаименованиеСтатьи()

// Процедура создает статью оборотов НДС.
// 
// Параметры:
//  СтавкаНДС  		 - ПеречислениеСсылка.СтавкиНДС.
//  Направление  	 - ПеречислениеСсылка.бит_РасходДоход.
//  фВидСтатьи 		 - СправочникСсылка.бит_ВидыСтатейОборотов.
//  фГруппаСтатейНДС - СправочникСсылка.бит_СтатьиОборотов (Группа).
//  РеквизитыУчета   - Структура.
//  Протокол 		 - Текстовый документ.
//  ИмяСтатьи        - Строка (По умолчанию = Неопределено). 
// 
Функция СоздатьСтатьюОборотовНДС(СтавкаНДС, Направление, фВидСтатьи, фГруппаСтатейНДС, РеквизитыУчета, Протокол, ИмяСтатьи = Неопределено)

	НоваяСтатья = Справочники.бит_СтатьиОборотов.СоздатьЭлемент();
	
	Если ИмяСтатьи = Неопределено Тогда
	 	ИмяСтатьи = ПолучитьНаименованиеСтатьи(СтавкаНДС, Направление);
	КонецЕсли;	
	НоваяСтатья.Наименование 	   = ИмяСтатьи;
	НоваяСтатья.НаименованиеПолное = ИмяСтатьи;
	
	НоваяСтатья.Родитель    = фГруппаСтатейНДС;
	НоваяСтатья.ВидСтатьи   = фВидСтатьи;  	
	НоваяСтатья.ТипСтатьи   = Перечисления.бит_ТипыСтатейОборотов.Прочее;	
	НоваяСтатья.РасходДоход = Направление;
	НоваяСтатья.СтавкаНДС   = СтавкаНДС;
	
	Для каждого ИмяРеквизита Из РеквизитыУчета Цикл
		НоваяСтатья[ИмяРеквизита] = Истина;		
	КонецЦикла;
	
	// Запись элемента справочника
	Если бит_ОбщегоНазначения.ЗаписатьСправочник(НоваяСтатья, , "Нет") Тогда
		
		НоваяСтатья = НоваяСтатья.Ссылка;
		
		ТекстСообщения = Нстр("ru = 'Создана статья оборотов ""%1%"" (код: %2%).'");	
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяСтатьи, НоваяСтатья.Код);
							
	Иначе
		
		НоваяСтатья = Неопределено;
		
		ТекстСообщения = Нстр("ru = 'Операция прервана. Не удалось создать статью оборотов ""%1%"".'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяСтатьи);
				
	КонецЕсли;
	
	ДополнитьПротокол(Протокол, ТекстСообщения);

	Возврат НоваяСтатья;
		
КонецФункции // СоздатьСтатьюОборотовНДС()

// Процедура добавляет значение в структуру статей оборотов.
// 
// Параметры:
//  СтавкаНДС  		  - ПеречислениеСсылка.СтавкиНДС.
//  Направление 	  - ПеречислениеСсылка.бит_РасходДоход.
//  ТекСтатьяОборотов - СправочникСсылка.бит_СтатьиОборотов.  
// 
Процедура ДополнитьСтруктуруСтатьейНДС(фСтатьиОборотовНДС, СтрокаСтавкаНДС, СтрокаНаправление, ТекСтатьяОборотов)
    	
	фСтатьиОборотовНДС.Вставить(СтрокаСтавкаНДС + "x" + СтрокаНаправление, ТекСтатьяОборотов);	

КонецПроцедуры // ДополнитьСтруктуруСтатьейНДС()

// Процедура проверяет наличие вспомогательных статей оборотов и создает, если они не найдены.
// 
// Параметры:
//  фСтатьиОборотовНДС - Структура.	
//  фВидСтатьи 		   - СправочникСсылка.бит_ВидыСтатейОборотов.
//  фГруппаСтатейНДС   - СправочникСсылка.бит_СтатьиОборотов.
//  РеквизитыУчета 	   - Структура.
//  Протокол 		   - Текстовый документ.
// 
// Возвращаемое значение:
//   Булево
// 
Функция ПроверитьСтатьиОборотовНДС(фСтатьиОборотовНДС, фВидСтатьи, фГруппаСтатейНДС, РеквизитыУчета, Протокол)
	
	ПроверкаПрошлаБезОшибок = Истина;
	
	Если ПроверитьГруппуСтатейОборотовНДС(фГруппаСтатейНДС, Протокол) // Проверка наличия группы статей оборотов НДС
		И ПроверитьВидСтатейОборотовНДС(фВидСтатьи, Протокол) Тогда   // Проверка наличия вида статей оборотов НДС

	
		// -----------------------------------------------------------------------------
		// Проверка наличия вспомогательных статей оборотов
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидСтатьи", фВидСтатьи);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	бит_СтатьиОборотов.Ссылка,
		|	бит_СтатьиОборотов.Наименование,
		|	бит_СтатьиОборотов.ВидСтатьи,
		|	бит_СтатьиОборотов.РасходДоход
		|ИЗ
		|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
		|ГДЕ
		|	бит_СтатьиОборотов.ВидСтатьи = &ВидСтатьи
		|	И НЕ бит_СтатьиОборотов.ЭтоГруппа
		|";
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Для каждого КлЗнч Из фСтатьиОборотовНДС Цикл
			
			Если ЗначениеЗаполнено(КлЗнч.Значение) И ЗначениеЗаполнено(КлЗнч.Значение.Код) Тогда
				
				Продолжить;
				
			Иначе
				
				МассивИмени = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(КлЗнч.Ключ, "x");
				СтрокаСтавкаНДС   = МассивИмени[0]; 
				СтрокаНаправление = МассивИмени[1];
				
				СтавкаНДС   = Перечисления.СтавкиНДС[СтрокаСтавкаНДС];
				Направление = Перечисления.бит_РасходДоход[СтрокаНаправление];				
				ИмяСтатьи   = ПолучитьНаименованиеСтатьи(СтавкаНДС, Направление);
				
				НайденнаяСтатья = ?(Выборка.НайтиСледующий(Новый Структура("Наименование, РасходДоход", ИмяСтатьи, Направление))
									, Выборка.Ссылка
									, СоздатьСтатьюОборотовНДС(СтавкаНДС, Направление, фВидСтатьи, фГруппаСтатейНДС, РеквизитыУчета, Протокол, ИмяСтатьи));				
				Если ЗначениеЗаполнено(НайденнаяСтатья) Тогда
					ДополнитьСтруктуруСтатьейНДС(фСтатьиОборотовНДС, СтрокаСтавкаНДС, СтрокаНаправление, НайденнаяСтатья);
				Иначе
					// Есть ошибки
					ПроверкаПрошлаБезОшибок = Ложь;				
				КонецЕсли;					
				
				Выборка.Сбросить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Есть ошибки
		ПроверкаПрошлаБезОшибок = Ложь; 	
		
	КонецЕсли;
	
	Возврат ПроверкаПрошлаБезОшибок;
		 
КонецФункции // ПроверитьСтатьиОборотовНДС()

// Процедура создает функция пользователя для расчета зависимых оборотов.
// 
// Параметры:
//  Протокол - Текстовый документ.
// 
// Возвращаемое значение:
//   СправочникСсылка.бит_ПользовательскиеФункции.
// 
Функция СоздатьФункциюПользователя(Протокол)

	ИмяФункции = "Сумма НДС для зависимых оборотов";
	
	// Поиск подходящего элемента справочника
	ФункцияПользователя = Справочники.бит_ПользовательскиеФункции.НайтиПоНаименованию(ИмяФункции, Истина);
	Если Не ЗначениеЗаполнено(ФункцияПользователя) ИЛИ ФункцияПользователя.ЭтоГруппа Тогда
	
		// Создание нового элемента справочника
		ФункцияПользователя = Справочники.бит_ПользовательскиеФункции.СоздатьЭлемент();
		ФункцияПользователя.Наименование = ИмяФункции;	
		ФункцияПользователя.Контекст     = Перечисления.бит_КонтекстыВыполненияПользовательскихФункций.ЗависимыеОбороты;
		
		// Параметры функции
		Справочники.бит_ПользовательскиеФункции.ЗаполнитьПараметры(ФункцияПользователя);
		
		// Код  		
		ФункцияПользователя.КодПодпрограммы = "
		|// Типы входных параметров: 
		|// НастройкаРасчета - ''
		|// СтрокаИсточник - ''
		|// СтрокаПриемник - ''
		|
		|ПараметрРасчетаПоСтавкеНДС = Число(НастройкаРасчета.КоэффициентСумма);
		|Результат = ?(ПараметрРасчетаПоСтавкеНДС = 0
		|				, 0
		|				, СтрокаИсточник.Сумма - (100 * СтрокаИсточник.Сумма / ПараметрРасчетаПоСтавкеНДС));
		|";

		Если бит_ОбщегоНазначения.ЗаписатьСправочник(ФункцияПользователя, , "Нет") Тогда
			ФункцияПользователя = ФункцияПользователя.Ссылка;
			ТекстСообщения = Нстр("ru = 'Создана пользовательская функция ""%1%"" (код: %2%).'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяФункции,  ФункцияПользователя.Код);
		Иначе
			ТекстСообщения = Нстр("ru = 'Операция прервана. Не удалось создать пользовательскую функцию.'");
			ФункцияПользователя = Неопределено;
		КонецЕсли;
		ДополнитьПротокол(Протокол, ТекстСообщения);
	
	КонецЕсли;
	
	Возврат ФункцияПользователя;
	
КонецФункции // СоздатьФункциюПользователя()

// ----------------------------------------------------------------------
// ОЧИСТКА ШАБЛОНОВСТАТЕЙ ОБОРОТОВ (НДС, Без НДС)

// Процедура очищает шаблоны проводок статей оборотов (НДС, без НДС).
// 
// Параметры:
//  Протокол - Текстовый документ.
// 
Процедура ОчиститьШаблоныПроводокСтатейОборотовМодуль(Протокол) Экспорт
	
	СпособыЗаполненияСуммы = Новый Массив;
	СпособыЗаполненияСуммы.Добавить(Перечисления.бит_СпособыЗаполненияСуммПроводокБюджетирования.НДС);
	СпособыЗаполненияСуммы.Добавить(Перечисления.бит_СпособыЗаполненияСуммПроводокБюджетирования.СуммаБезНДС);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СпособыЗаполненияСуммы", СпособыЗаполненияСуммы);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ШаблоныПроводокСтатей.Ссылка 				КАК СтатьяОборотов,
	|	ШаблоныПроводокСтатей.НомерСтроки 			КАК НомерСтроки,
	|	ШаблоныПроводокСтатей.СпособЗаполненияСуммы
	|ИЗ
	|	Справочник.бит_СтатьиОборотов.ШаблоныПроводок КАК ШаблоныПроводокСтатей
	|ГДЕ
	|	ШаблоныПроводокСтатей.СпособЗаполненияСуммы В(&СпособыЗаполненияСуммы)
    |
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ
	|
	|ИТОГИ ПО
	|	Ссылка
	|
	|";
	Результат = Запрос.Выполнить();
	
	ВыборкаСтатьи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаСтатьи.Следующий() Цикл
		
		ТекСтатьяОборотов = ВыборкаСтатьи.СтатьяОборотов;
		ТекущийОбъект     = ТекСтатьяОборотов.ПолучитьОбъект();
		
		ВыборкаШаблон = ВыборкаСтатьи.Выбрать();
		Пока ВыборкаШаблон.Следующий() Цикл
			
			НомерСтроки = ВыборкаШаблон.НомерСтроки;
			УдаляемаяСтрока = ТекущийОбъект.ШаблоныПроводок.Найти(НомерСтроки, "НомерСтроки");
			Если УдаляемаяСтрока <> Неопределено 
				И СпособыЗаполненияСуммы.Найти(УдаляемаяСтрока.СпособЗаполненияСуммы) <> Неопределено Тогда
				ТекущийОбъект.ШаблоныПроводок.Удалить(УдаляемаяСтрока);			
			КонецЕсли;
				 	
		КонецЦикла; 	
		
		бит_ОбщегоНазначения.ЗаписатьСправочник(ТекущийОбъект, ,"Ошибки", Истина);
		
	КонецЦикла;
		 
КонецПроцедуры // ОчиститьШаблоныПроводокСтатейОборотовМодуль()

// ----------------------------------------------------------------------
// КОНВЕРТАЦИЯ

// Процедура устанавливает вспомогательную статью оборотов по ставке НДС.
// 
// Параметры:
//  ЗаписьНабора - РегистрНакопленияЗапись.
//  СтараяСтатьяОборотов - СправочникСсылка.бит_СтатьиОборотов.
//  фСтатьиОборотовНДС   - Структура.
//  фВидСтатьи           - СправочникСсылка.бит_ВидыСтатейОборотов.
//  фГруппаСтатейНДС     - СправочникСсылка.бит_СтатьиОборотов (Группа).
//  РеквизитыУчета    	 - Структура.
//  Протокол 			 - Текстовый документ.
// 
Процедура УстановитьСтатьюОборотов(ЗаписьНабора, СтараяСтатьяОборотов, фСтатьиОборотовНДС, фВидСтатьи, фГруппаСтатейНДС
									, РеквизитыУчета, Протокол)
              	
	Если Не ЗначениеЗаполнено(СтараяСтатьяОборотов) 
		ИЛИ Не ЗначениеЗаполнено(ЗаписьНабора.СтавкаНДС) Тогда
		Возврат;								
	КонецЕсли;
	
	СтавкаНДС   = ЗаписьНабора.СтавкаНДС;
	Направление = СтараяСтатьяОборотов.РасходДоход;
	
	СтрокаСтавкаНДС   = СтавкаНДС.Метаданные().ЗначенияПеречисления.Получить(Перечисления.СтавкиНДС.Индекс(СтавкаНДС)).Имя;
	СтрокаНаправление = Строка(Направление);
	КлючСтруктуры = СтрокаСтавкаНДС + "x" + СтрокаНаправление;
	
	ТекСтатьяОборотов = Неопределено;
	фСтатьиОборотовНДС.Свойство(КлючСтруктуры, ТекСтатьяОборотов);
	
	Если ТекСтатьяОборотов = Неопределено Тогда
		
		ТекСтатьяОборотов = СоздатьСтатьюОборотовНДС(СтавкаНДС, Направление, фВидСтатьи, фГруппаСтатейНДС, РеквизитыУчета, Протокол);
		Если Не ЗначениеЗаполнено(ТекСтатьяОборотов) Тогда
			Возврат;
		КонецЕсли;
		ДополнитьСтруктуруСтатьейНДС(фСтатьиОборотовНДС, СтрокаСтавкаНДС, СтрокаНаправление, ТекСтатьяОборотов);	
	
	КонецЕсли;
	
	ЗаписьНабора.СтатьяОборотов = ТекСтатьяОборотов;

КонецПроцедуры // УстановитьСтатьюОборотов()

// Функция устанавливает сумму по валюте документа.
// 
// Параметры:
//  ЗаписьНабора   - РегистрНакопленияЗапись.
//  СтруктураВалют - Структура.
//  ДатаКурса 	   - Дата (По умолчанию = Неопределено, в этом случае расчитываетсясумма НДС).
// 
Процедура УстановитьСуммуПоВалюте(ЗаписьНабора, СтруктураВалют, ДатаКурса = Неопределено)
	
	ВалютаДокумента = СтруктураВалют.ВалютаДокумента;
	
	Если ВалютаДокумента = СтруктураВалют.ВалютаРеглУчета Тогда // Как валюта регламентированного учета
		
		ЗаписьНабора.Сумма = ЗаписьНабора.СуммаРегл;
		
	ИначеЕсли ВалютаДокумента = СтруктураВалют.ВалютаУпрлУчета Тогда // Как валюта управленческого учета	
		
		ЗаписьНабора.Сумма = ЗаписьНабора.СуммаУпр;
		
	ИначеЕсли ЗначениеЗаполнено(ЗаписьНабора.Сценарий) 
		И ВалютаДокумента = ЗаписьНабора.Сценарий.Валюта Тогда // Как валюта сценария
		
		ЗаписьНабора.Сумма = ЗаписьНабора.СуммаСценарий;
		
	ИначеЕсли ДатаКурса = Неопределено Тогда 
		
		// Сумма НДС
		ЗаписьНабора.Сумма = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(ЗаписьНабора.Сумма
	                                                        ,Истина
															,Истина
															,бит_БухгалтерияСервер.ПолучитьСтавкуНДС(ЗаписьНабора.СтавкаНДС));
															
	Иначе
		
		// Сумма полная
		СтруктураКурсаРегл = бит_КурсыВалют.ПолучитьКурсВалюты(СтруктураВалют.ВалютаРеглУчета, ДатаКурса);
		ЗаписьНабора.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ЗаписьНабора.СуммаРегл
																					, СтруктураВалют.ВалютаРеглУчета
																					, ВалютаДокумента
																					, СтруктураКурсаРегл.Курс
																					, СтруктураВалют.КурсДокумента
																					, СтруктураКурсаРегл.Кратность
																					, СтруктураВалют.КратностьДокумента);
	КонецЕсли; 	
	
КонецПроцедуры // УстановитьСуммуПоВалюте()

// Процедура выполняет конвертацию движений.
// 
// Параметры:
//  СтруктураВалют 	   - Структура.
//  РеквизитыУчета 	   - Структура.
//  фСтатьиОборотовНДС - Структура.
//  фВидСтатьи		   - СправочникСсылка.бит_ВидыСтатейОборотов.
//  фГруппаСтатейНДС   - СправочникСсылка.бит_СтатьиОборотов.
//  Протокол		   - Текстовый документ.
// 
Процедура ВыполнитьКонвертациюДвиженийМодуль(СтруктураВалют, РеквизитыУчета, фСтатьиОборотовНДС, фВидСтатьи, фГруппаСтатейНДС
											, Протокол, ВыполнитьПереносДанныхНДС) Экспорт

	Если Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Ресурсы.Найти("Удалить_СуммаБезНДСРегл") = Неопределено Тогда
		ТекстСообщения = Нстр("ru = 'Операция прервана. Структура регистра оборотов не содержит ресурсов учета сумм без НДС.'");
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если ВыполнитьПереносДанныхНДС Тогда
		Если Не ПроверитьСтатьиОборотовНДС(фСтатьиОборотовНДС, фВидСтатьи, фГруппаСтатейНДС, РеквизитыУчета, Протокол) Тогда
			Возврат;
		КонецЕсли;
		ТекстПереносДанныхНДС = "
		|	И бит_ОборотыПоБюджетам.Удалить_СуммаБезНДСРегл <> 0
		|	И бит_ОборотыПоБюджетам.Удалить_СуммаБезНДСУпр <> 0
		|	И бит_ОборотыПоБюджетам.Удалить_СуммаБезНДССценарий <> 0
		|";
	Иначе
		ТекстПереносДанныхНДС = "
		|	И бит_ОборотыПоБюджетам.Сумма = 0
		|";
	КонецЕсли;
	
	ТекстУсловиеПоДокКорректировки = " И Не бит_ОборотыПоБюджетам.Регистратор ССЫЛКА Документ.бит_удалить_КорректировкаЗаписейРегистров ";
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"   , НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Период.ДатаОкончания));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_ОборотыПоБюджетам.Регистратор		КАК Регистратор,
	|	бит_ОборотыПоБюджетам.Регистратор.Дата 	КАК Дата,
	|	бит_ОборотыПоБюджетам.Регистратор.ВалютаДокумента 		КАК ВалютаДокумента,
	|	бит_ОборотыПоБюджетам.Регистратор.КурсДокумента 		КАК КурсДокумента,
	|	бит_ОборотыПоБюджетам.Регистратор.КратностьДокумента 	КАК КратностьДокумента
	|
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	|
	|ГДЕ
	|	бит_ОборотыПоБюджетам.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	// |	И бит_ОборотыПоБюджетам.Активность
	|" 
	+ ТекстПереносДанныхНДС
	+ ТекстУсловиеПоДокКорректировки 
	+ "
    |
	|СГРУППИРОВАТЬ ПО
	|	бит_ОборотыПоБюджетам.Регистратор.Дата,
	|	бит_ОборотыПоБюджетам.Регистратор
	|";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = Нстр("ru = 'Нет данных, удовлетворяющих отбору.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		// Валюта, курс и кратность документа
		ВалютаДокумента = ?(ЗначениеЗаполнено(Выборка.ВалютаДокумента)
							, Выборка.ВалютаДокумента
							, СтруктураВалют.ВалютаРеглУчета);		
		СтруктураВалют.Вставить("ВалютаДокумента", ВалютаДокумента);
		Если ЗначениеЗаполнено(Выборка.КурсДокумента) Тогда
			СтруктураВалют.Вставить("КурсДокумента"		, Выборка.КурсДокумента);
		   	СтруктураВалют.Вставить("КратностьДокумента", Выборка.КратностьДокумента);
		Иначе		
			СтруктураКурсаДокм = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Выборка.Дата);
			СтруктураВалют.Вставить("КурсДокумента"		, СтруктураКурсаДокм.Курс);
		   	СтруктураВалют.Вставить("КратностьДокумента", СтруктураКурсаДокм.Кратность);
		КонецЕсли;   		
		
		НаборЗаписей = РегистрыНакопления.бит_ОборотыПоБюджетам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.Прочитать();
		
		КоличествоЗаписей = НаборЗаписей.Количество();
		
		Для i = 0 По КоличествоЗаписей - 1 Цикл
			
			// Старая строка
			СтараяСтрока = НаборЗаписей[i];
			
			Если ВыполнитьПереносДанныхНДС И Не ЗначениеЗаполнено(СтараяСтрока.СтатьяОборотов) Тогда
				ТекстСообщения = Нстр("ru = 'Не удалось сконвертировать движения по НДС документа %1%. Не заполнена статья оборотов.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(Регистратор));
				ДополнитьПротокол(Протокол, ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			// Сумма и валюта
			СтараяСтрока.Валюта = ВалютаДокумента;
			УстановитьСуммуПоВалюте(СтараяСтрока, СтруктураВалют, Выборка.Дата);
			
			Если ВыполнитьПереносДанныхНДС Тогда
				
				// Новая строка с суммами НДС, если они не нулевые.
				Если СтараяСтрока.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС
					И СтараяСтрока.СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Тогда
					
					НоваяСтрока = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяСтрока
											, 
											, "ВидДвижения, СтатьяОборотов, Количество, Удалить_СуммаБезНДСРегл, Удалить_СуммаБезНДССценарий, Удалить_СуммаБезНДСУпр");
					УстановитьСтатьюОборотов(НоваяСтрока, СтараяСтрока.СтатьяОборотов, фСтатьиОборотовНДС, фВидСтатьи, фГруппаСтатейНДС, РеквизитыУчета, Протокол);
					
					НоваяСтрока.СуммаРегл     = СтараяСтрока.СуммаРегл - СтараяСтрока.Удалить_СуммаБезНДСРегл;
					НоваяСтрока.СуммаСценарий = СтараяСтрока.СуммаСценарий - СтараяСтрока.Удалить_СуммаБезНДССценарий;
					НоваяСтрока.СуммаУпр 	  = СтараяСтрока.СуммаУпр - СтараяСтрока.Удалить_СуммаБезНДСУпр;	
					
					// Сумма (НДС)
					УстановитьСуммуПоВалюте(НоваяСтрока, СтруктураВалют);
						 				
				КонецЕсли;
				
				// Обнуление сумм без НДС в старой строке
				СтараяСтрока.Удалить_СуммаБезНДСРегл 	 = 0; 
				СтараяСтрока.Удалить_СуммаБезНДССценарий = 0;
				СтараяСтрока.Удалить_СуммаБезНДСУпр 	 = 0;
			
			КонецЕсли;
					                                  		
		КонецЦикла;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Если Не бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей, "Ошибки") Тогда
			ТекстСообщения = Нстр("ru = 'Не удалось сконвертировать движения по НДС документа %1%'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(Регистратор));
			ДополнитьПротокол(Протокол, ТекстСообщения);
		КонецЕсли;
									
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьКонвертациюДвиженийМодуль()

// ----------------------------------------------------------------------
// ЗАВИСИМЫЕ ОБОРОТЫ

// Процедура создает документы "Установка зависимых оборотов (БИТ)".
// 
// Параметры:
//  РеквизитыУчета 	     - Структура.
//  фСтатьиОборотовНДС   - Структура.
//  фВидСтатьи		     - СправочникСсылка.бит_ВидыСтатейОборотов.
//  фГруппаСтатейНДС     - СправочникСсылка.бит_СтатьиОборотов.
//  Протокол			 - Текстовый документ.
// 
Процедура СоздатьДокументыЗависимыхОборотовМодуль(РеквизитыУчета, фСтатьиОборотовНДС, фВидСтатьи, фГруппаСтатейНДС, Протокол) Экспорт
	
	Если Не ПроверитьСтатьиОборотовНДС(фСтатьиОборотовНДС, фВидСтатьи, фГруппаСтатейНДС, РеквизитыУчета, Протокол) Тогда
		Возврат;
	КонецЕсли;
	
	ФункцияПользователя = СоздатьФункциюПользователя(Протокол);
	Если Не ЗначениеЗаполнено(ФункцияПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчетаПоСтавкеНДС = Новый Соответствие;
	ПараметрыРасчетаПоСтавкеНДС.Вставить(Перечисления.СтавкиНДС.БезНДС	 , 0);
	ПараметрыРасчетаПоСтавкеНДС.Вставить(Перечисления.СтавкиНДС.НДС0  	 , 0);
	ПараметрыРасчетаПоСтавкеНДС.Вставить(Перечисления.СтавкиНДС.НДС10	 , 110);
	ПараметрыРасчетаПоСтавкеНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, 110);
	ПараметрыРасчетаПоСтавкеНДС.Вставить(Перечисления.СтавкиНДС.НДС18	 , 118);
	ПараметрыРасчетаПоСтавкеНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, 118);
	ПараметрыРасчетаПоСтавкеНДС.Вставить(Перечисления.СтавкиНДС.НДС20	 , 120);
	ПараметрыРасчетаПоСтавкеНДС.Вставить(Перечисления.СтавкиНДС.НДС20_120, 120);
	 
	НовыйДокумент = Документы.бит_УстановкаЗависимыхОборотов.СоздатьДокумент();
	НовыйДокумент.Дата       = ТекущаяДата();
	НовыйДокумент.ДатаНачала = Дата('19800101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСтатьиНДС", фВидСтатьи);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_ЗависимыеОбороты.СтатьяОборотов_Зависимый
	|ПОМЕСТИТЬ ЗависимыеСтатьиНДС
	|ИЗ
	|	РегистрСведений.бит_ЗависимыеОбороты КАК бит_ЗависимыеОбороты
	|ГДЕ
	|	бит_ЗависимыеОбороты.СтатьяОборотов_Зависимый.ВидСтатьи = &ВидСтатьиНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_СтатьиОборотовНДС.Ссылка,
	|	бит_СтатьиОборотовНДС.ВидСтатьи,
	|	бит_СтатьиОборотовНДС.РасходДоход,
	|	бит_СтатьиОборотовНДС.СтавкаНДС
	|ПОМЕСТИТЬ СтатьиНДС
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотовНДС
	|ГДЕ
	|	бит_СтатьиОборотовНДС.ВидСтатьи = &ВидСтатьиНДС
	|	И бит_СтатьиОборотовНДС.Ссылка НЕ В(ВЫБРАТЬ ТаблЗависимых.СтатьяОборотов_Зависимый 
	|										ИЗ ЗависимыеСтатьиНДС КАК ТаблЗависимых)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_СтатьиОборотов.Ссылка 			КАК СтатьяОборотов,
	|	бит_СтатьиОборотов.Наименование 	КАК Наименование,
	|	бит_СтатьиОборотов.РасходДоход		КАК Направление,
	|	бит_СтатьиОборотов.СтавкаНДС		КАК СтавкаНДС,
	|	бит_СтатьиОборотов.Учет_Сумма       КАК Учет_Сумма,
	|	СтатьиНДС.Ссылка 					КАК СтатьяОборотовНДС	
	|
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|		ПРАВОЕ СОЕДИНЕНИЕ СтатьиНДС КАК СтатьиНДС
	|			ПО СтатьиНДС.СтавкаНДС = бит_СтатьиОборотов.СтавкаНДС
	|			И СтатьиНДС.РасходДоход = бит_СтатьиОборотов.РасходДоход 
	|
	|ГДЕ
	|	бит_СтатьиОборотов.ВидСтатьи <> &ВидСтатьиНДС
	|	И бит_СтатьиОборотов.Учет_Сумма
	|
	|УПОРЯДОЧИТЬ ПО
	|	Направление,
	|	Наименование
	|
	|ИТОГИ ПО
	|	СтатьяОборотов
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗависимыеСтатьиНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СтатьиНДС
	|
	|";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	 	ТекстСообщения = Нстр("ru = 'Отменено создание документа установки зависимых оборотов. Нет подходящих статей оборотов.'");	
		ДополнитьПротокол(Протокол, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекИд = 0;
	
	ВыборкаВерх = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаВерх.Следующий() Цикл
		
		СтараяСтатьяОборотов = ВыборкаВерх.СтатьяОборотов;
		
		ТекИд 		= ТекИд + 1;
		ИД_Родитель = ТекИд;
		
		
		ВыборкаЗО = ВыборкаВерх.Выбрать();
		Пока ВыборкаЗО.Следующий() Цикл
			
			ТекИд = ТекИд + 1;
	
			НоваяСтрокаТч = НовыйДокумент.ЗависимыеОбороты.Добавить();
			
			НоваяСтрокаТч.ИД_Родитель			   = ИД_Родитель;
			НоваяСтрокаТч.СтатьяОборотов 		   = СтараяСтатьяОборотов;
			
			НоваяСтрокаТч.ИД                       = ТекИд;
			НоваяСтрокаТч.СтатьяОборотов_Зависимый = ВыборкаЗО.СтатьяОборотовНДС;
		
			НоваяСтрокаТч.РеквизитСумма    = Перечисления.бит_РеквизитыДляРасчетаЗависимостей.Сумма;
			НоваяСтрокаТч.КоэффициентСумма = ПараметрыРасчетаПоСтавкеНДС.Получить(ВыборкаЗО.СтавкаНДС);
			НоваяСтрокаТч.ФункцияСумма     = ФункцияПользователя;
	
		КонецЦикла; 	
	
	КонецЦикла;
	
	Если бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(НовыйДокумент, РежимЗаписиДокумента.Проведение, ,"Ошибки") Тогда
		ТекстСообщения = Нстр("ru = 'Создан документ установки зависимых оборотов №%1% от %2%.'");	
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, НовыйДокумент.Ссылка.Номер,  НовыйДокумент.Ссылка.Дата);
	Иначе
		ТекстСообщения = Нстр("ru = 'Операция прервана. Не удалось создать документ установки зависимых оборотов.'");
	КонецЕсли;
	ДополнитьПротокол(Протокол, ТекстСообщения);
	 
КонецПроцедуры // СоздатьДокументыЗависимыхОборотовМодуль()



#КонецОбласти

#КонецЕсли
