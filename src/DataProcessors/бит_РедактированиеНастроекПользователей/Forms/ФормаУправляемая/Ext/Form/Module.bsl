
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	// Умышленно не вызываем систему лицензирования, т.к. обработка позволяет изменить продукт по-умолчанию.
	
	ЗаполнитьКэшЗначений();
	
	
	// Заполнить Значения по Умолчанию
	Настройка = фКэшЗначений.Настройка_ОсновнаяГруппа;

	// Если открытие с параметром "Пользователь".
	Если Параметры.Свойство("Пользователь") Тогда
		Пользователь = Параметры.Пользователь;
		ОбновитьДанныеПоНастройкаПользователяИлиГруппы();
		ОткрытиеЧерезСправочникПользователи = Истина;
	Иначе
		ОткрытиеЧерезСправочникПользователи = Ложь;
		Пользователь = бит_ОбщегоНазначения.ПолучитьТекущегоПользователя();
		ОбновитьДанныеПоНастройкаПользователяИлиГруппы();
	КонецЕсли; 
	
	УстановитьВидимость(ОткрытиеЧерезСправочникПользователи);
	
	ИмяКонфигурации = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(Метаданные.Синоним, ",")[0];
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
	 	Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоЗначенийНастройки();
	РазвернутьДерево(Элементы.ДеревоПользователейЗначений.Имя);
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "Пользователь".
// 
&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
		
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ОбновитьДанныеПоНастройкаПользователяИлиГруппы();
	Иначе
		ДеревоНастроек.ПолучитьЭлементы().Очистить();
		ДеревоТиповыхНастроек.ПолучитьЭлементы().Очистить();
		ТаблицаПользователейГруппы.Очистить();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПользовательПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗначениеНастройки".
// дерева "ДеревоНастроек".
// 
&НаКлиенте
Процедура ДеревоНастроекЗначениеНастройкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные.Настройка = фКэшЗначений.Настройка_ОсновнаяГруппа Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбратьОсновнуюГруппуПользователя(Пользователь, ТекущиеДанные, Элемент);
		
	ИначеЕсли ТекущиеДанные.Настройка = фКэшЗначений.Настройка_ОсновнойРегистрУУ Тогда
		
		// Для настройки ОсновнойРегистрУУ откроем форму выбора объектов системы с ограниченным 
		// перечнем объектов - управленческими регистрами бухгалтерии.
		СтандартнаяОбработка = Ложь;
		
		СписокВидовОбъектов = Новый СписокЗначений;
		СписокВидовОбъектов.Добавить(фКэшЗначений.ВидОбъектаРегистрБухгалтерии);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
		ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , ТекущиеДанные.ЗначениеНастройки);
		ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", фКэшЗначений.СписокУправленческихРегистров);
		ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);
		   	
	КонецЕсли;  
	
КонецПроцедуры // ДеревоНастроекЗначениеНастройкиНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ЗначениеНастройки"
// дерева "ДеревоНастроек".
// 
&НаКлиенте
Процедура ДеревоНастроекЗначениеНастройкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные.ЗначениеНастройки = ТекущиеДанные.ПервоначальноеЗначение Тогда
		ТекущиеДанные.Изменено = Ложь
	Иначе
		ТекущиеДанные.Изменено = Истина;	
	КонецЕсли;                             
	
КонецПроцедуры // ДеревоНастроекЗначениеНастройкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение"
// дерева "ДеревоТиповыхНастроек".
// 
&НаКлиенте
Процедура ДеревоТиповыхНастроекЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоТиповыхНастроек.ТекущиеДанные;
	Если ТекущиеДанные.Значение = ТекущиеДанные.ПервоначальноеЗначение Тогда
		ТекущиеДанные.Изменено = Ложь
	Иначе
		ТекущиеДанные.Изменено = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ДеревоТиповыхНастроекЗначениеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗначениеНастройки".
// таблицы "ДеревоПользователейЗначений".
// 
&НаКлиенте
Процедура ДеревоПользователейЗначенийЗначениеНастройкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоПользователейЗначений.ТекущиеДанные;
	
	Если Настройка = фКэшЗначений.Настройка_ОсновнаяГруппа Тогда
		СтандартнаяОбработка = Ложь;
		ВыбратьОсновнуюГруппуПользователя(ТекущиеДанные.Пользователь, ТекущиеДанные, Элемент);	
	КонецЕсли;
	
КонецПроцедуры // ДеревоПользователейЗначенийЗначениеНастройкиНачалоВыбора()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "ИзменитьСоставГрупп".
// 
&НаКлиенте
Процедура ИзменитьСоставГрупп(Команда)
	
	ПараметрыФормы = Новый Структура("Пользователь, ИзменитьСоставГрупп", Пользователь, Истина);
	                      
	ОткрытьФорму("Обработка.бит_РедактированиеНастроекПользователей.Форма.ФормаСпискаДоступныхГруппУправляемая", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ИзменитьСоставГрупп()

// Процедура - обработчик команды "ОбновитьТаблицуЗначенийНастройки".
// 
&НаКлиенте
Процедура КомандаОбновитьДеревоНастроек(Команда)
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ОбновитьДеревоНастроекБит();	
	КонецЕсли;
		
КонецПроцедуры // КомандаОбновитьДеревоНастроек()

// Процедура - обработчик команды "ОбновитьТаблицуЗначенийНастройки".
// 
&НаКлиенте
Процедура КомандаОбновитьДеревоТиповыхНастроек(Команда)
	
	ОбновитьДеревоТиповыхНастроек();
	
КонецПроцедуры // КомандаОбновитьДеревоТиповыхНастроек()

// Процедура - обработчик команды "ОбновитьТаблицуЗначенийНастройки".
// 
&НаКлиенте
Процедура КомандаОбновитьДеревоЗначенийНастройки(Команда)
	
	ОбновитьДеревоЗначенийНастройки();
	РазвернутьДерево(Элементы.ДеревоПользователейЗначений.Имя);	
		
КонецПроцедуры // КомандаОбновитьДеревоЗначенийНастройки()


// Процедура - обработчик команды "ЗаписатьНастройкиБит".
//       
&НаКлиенте
Процедура КомандаЗаписатьНастройкиБит(Команда)
	
	СтруктураНастроек = Новый Структура;
	
	ЗаписатьНастройкиБит(СтруктураНастроек);
	
	Если СтруктураНастроек.Свойство("ИнтервалУведомленияУстановкиВиз") Тогда
		бит_РаботаСДиалогамиКлиент.ОбработатьИзмененияНастроекПользователя(Пользователь, СтруктураНастроек);
	КонецЕсли;
	
	РазвернутьДерево("ДеревоПользователейЗначений");
	
КонецПроцедуры // КомандаЗаписатьНастройкиБит()

// Процедура - обработчик команды "ЗаписатьТиповыеНастройки".
// 
&НаКлиенте
Процедура КомандаЗаписатьТиповыеНастройки(Команда)
	
	ЗаписатьТиповыеНастройки();
	
КонецПроцедуры // КомандаЗаписатьТиповыеНастройки()

// Процедура - обработчик команды "ЗаписатьВсеНастройки".
// 
&НаКлиенте
Процедура КомандаЗаписатьВсеНастройки(Команда)
	
	СтруктураНастроек = Новый Структура;
	
	ЗаписатьНастройкиБитТиповые(СтруктураНастроек);
	
	Если СтруктураНастроек.Свойство("ИнтервалУведомленияУстановкиВиз") Тогда
		бит_РаботаСДиалогамиКлиент.ОбработатьИзмененияНастроекПользователя(Пользователь, СтруктураНастроек);
	КонецЕсли;  
	
	РазвернутьДерево("ДеревоПользователейЗначений");
	
КонецПроцедуры // КомандаЗаписатьВсеНастройки()

// Процедура - обработчик команды "ЗаписатьЗначенияНастройки".
// 
&НаКлиенте
Процедура КомандаЗаписатьЗначенияНастройки(Команда)

	ТребуетсяОбновитьНастройки = Ложь;
	
	ЗаписатьЗначенияНастройки(ТребуетсяОбновитьНастройки);
	
	Если ТребуетсяОбновитьНастройки Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Обновите настройки (БИТ) для пользователя: " + Пользователь + ".");
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаписатьЗначенияНастройки()



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СерверныеПроцедурыИФункцииОбщегоНазначения

// Процедура заполняет кэш значений, доступный на клиенте и на сервере.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("Настройка_ОсновнаяГруппа"	 , ПланыВидовХарактеристик.бит_НастройкиПользователей.ОсновнаяГруппаПользователя);
	фКэшЗначений.Вставить("ГруппаВсеПользователи"  		 , Справочники.ГруппыПользователей.ВсеПользователи);
	фКэшЗначений.Вставить("ВидОбъектаРегистрБухгалтерии" , Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	фКэшЗначений.Вставить("Настройка_ОсновнойРегистрУУ"  , ПланыВидовХарактеристик.бит_НастройкиПользователей.ОсновнойРегистрБухгалтерииУУ);
	фКэшЗначений.Вставить("СписокУправленческихРегистров", СформироватьСписокУправленческихРегистровБухгалтерии());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура осуществляет управление видимостью/доступностью реквизитов формы.
// 
&НаСервере
Процедура УстановитьВидимость(ОткрытиеЧерезСправочникПользователи = Ложь)

	ЭтоПользователь = ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(Пользователь);
	ЭтоГруппа 		= ТипЗнч(Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") И ЗначениеЗаполнено(Пользователь);
                                  	
	Элементы.ГруппаТиповыхНастроек.Видимость    			  = ЭтоПользователь И Не ОткрытиеЧерезСправочникПользователи И Ложь;
	Элементы.ДеревоНастроекЗначениеПоОсновнойГруппе.Видимость = ЭтоПользователь;
	Элементы.ИзменитьСоставГрупп.Видимость					  = ЭтоПользователь;
	Элементы.ГруппаПользователиГруппы.Видимость 			  = ЭтоГруппа;
	
	Элементы.Пользователь.ТолькоПросмотр 	= ОткрытиеЧерезСправочникПользователи;
	Элементы.ЗначенияНастройки.Видимость 	= Не ОткрытиеЧерезСправочникПользователи;
	Элементы.ЗаписатьВсеНастройки.Видимость = Не ОткрытиеЧерезСправочникПользователи;
		
КонецПроцедуры // УстановитьВидимость()

// Функция формирует список управленческих регистров бухгалтерии.
// 
// Возвращаемое значение:
//   СписокОбъектовСистемы   - СписокЗначений.
// 
&НаСервере
Функция СформироватьСписокУправленческихРегистровБухгалтерии()

	СписокОбъектовСистемы = Новый СписокЗначений;
	
	Если бит_ОбщегоНазначения.ЭтоУУ() Тогда
		
		РегистрыМета = Новый Массив;
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_1);
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2);
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_3);
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_4);
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_5);
		
		Для каждого МетаОбъект Из РегистрыМета Цикл
			
			ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
			Если ЗначениеЗаполнено(ОбъектСистемы) Тогда
				
				СписокОбъектовСистемы.Добавить(ОбъектСистемы)
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат СписокОбъектовСистемы;
	
КонецФункции // СформироватьСписокУправленческихРегистровБухгалтерии()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииОновленияДанныхФормы

// Процедура обновляет дерево настроек, таблицу типовых настроек, 
// таблицу пользователей группы.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ОбновитьДанныеПоНастройкаПользователяИлиГруппы()

	ЭтоПользователь = ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи");
	ЭтоГруппа 		= ТипЗнч(Пользователь) = Тип("СправочникСсылка.ГруппыПользователей");
	
	ОбновитьДеревоНастроекБит();
	
	Если ЭтоПользователь Тогда
		ОбновитьДеревоТиповыхНастроек();
	ИначеЕсли ЭтоГруппа Тогда	
	    ОбновитьТаблицуПользователейГруппы();
	КонецЕсли;

КонецПроцедуры // ОбновитьДанныеПоНастройкаПользователяИлиГруппы()

// Функция получает текст запроса для формирования дереванастроек или дерева типовых настроек.
// 
// Параметры:
//  ИмяОбъекта - Строка.
//  ЗначениеОсновнаяГруппа - СправочникСсылка.ГруппыПользователей.
//  
// Возвращаемое значение:
//   Результат запроса.
// 
&НаСервере
Функция ПолучитьРезультатЗапросаДляНастроек(ИмяОбъекта, ЗначениеОсновнаяГруппа = Неопределено)

	
	ЭтоГруппа = ТипЗнч(Пользователь) = Тип("СправочникСсылка.ГруппыПользователей");
	ЭтоТиповыеНастройки = Найти(ИмяОбъекта, "бит_") = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь); 
	
	
	Если ЭтоГруппа ИЛИ ЭтоТиповыеНастройки Тогда
		
		Текст = "
		|ВЫБРАТЬ
		|	ПвхНастройки.Ссылка 		КАК Настройка,
		|	РегСвНастройки.%Значение%,
		|	ПвхНастройки.ЭтоГруппа
		|ИЗ
		|	ПланВидовХарактеристик.%ИмяОбъекта% КАК ПвхНастройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.%ИмяОбъекта% КАК РегСвНастройки
		|		ПО ПвхНастройки.Ссылка = РегСвНастройки.Настройка
		|			И (РегСвНастройки.Пользователь = &Пользователь)
		|
		|ГДЕ
		|	(ПвхНастройки.ПометкаУдаления = ЛОЖЬ)
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоГруппа ИЕРАРХИЯ,
		|	ПвхНастройки.Наименование
		|";
	    Текст = СтрЗаменить(Текст, "%ИмяОбъекта%", ИмяОбъекта);
		СтрокаЗначение = ?(ЭтоТиповыеНастройки, "Значение", "ЗначениеНастройки");
		Текст = СтрЗаменить(Текст, "%Значение%"  , СтрокаЗначение);
			
	Иначе
		
		Если ЗначениеОсновнаяГруппа = Неопределено Тогда
			
			ЗапросГруппа = Новый Запрос;
			ЗапросГруппа.УстановитьПараметр("Пользователь", Пользователь);
			ЗапросГруппа.УстановитьПараметр("НастройкаОсновнаяГруппа", фКэшЗначений.Настройка_ОсновнаяГруппа);
		  	ЗапросГруппа.Текст = "
			|ВЫБРАТЬ
			|	РегСвОсновнаяГруппа.ЗначениеНастройки КАК ОсновнаяГруппа
			|ИЗ
			|	РегистрСведений.бит_НастройкиПользователей КАК РегСвОсновнаяГруппа
			|ГДЕ
			|	РегСвОсновнаяГруппа.Пользователь = &Пользователь
			|	И РегСвОсновнаяГруппа.Настройка  = &НастройкаОсновнаяГруппа
			|";
			РезультатГруппа = ЗапросГруппа.Выполнить();
			Если РезультатГруппа.Пустой() Тогда
				ЗначениеОсновнаяГруппа = фКэшЗначений.ГруппаВсеПользователи;
			Иначе	
				Выборка = РезультатГруппа.Выбрать();
				Выборка.Следующий();
				ЗначениеОсновнаяГруппа = Выборка.ОсновнаяГруппа;
			КонецЕсли;
			
		КонецЕсли;

		Текст = "
		|ВЫБРАТЬ
		|	ПвхНастройки.Ссылка 				КАК Настройка,
		|	РегСвНастройки.ЗначениеНастройки	КАК ЗначениеНастройки,
		|	ПвхНастройки.ЭтоГруппа 				КАК ЭтоГруппа,
		|	РегСвНастройкиГруппы.ЗначениеНастройки КАК ЗначениеПоОсновнойГруппе
		|ИЗ
		|	ПланВидовХарактеристик.бит_НастройкиПользователей КАК ПвхНастройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиПользователей КАК РегСвНастройки
		|		ПО ПвхНастройки.Ссылка = РегСвНастройки.Настройка
		|			И (РегСвНастройки.Пользователь = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиПользователей КАК РегСвНастройкиГруппы
		|		ПО ПвхНастройки.Ссылка = РегСвНастройкиГруппы.Настройка
		|		И РегСвНастройкиГруппы.Пользователь = &ЗначениеОсновнаяГруппа
		|ГДЕ
		|	(ПвхНастройки.ПометкаУдаления = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоГруппа ИЕРАРХИЯ,
		|	ПвхНастройки.Наименование
		|
		|";       		
		
		Запрос.УстановитьПараметр("ЗначениеОсновнаяГруппа", ЗначениеОсновнаяГруппа);
			
	КонецЕсли;

	
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьРезультатЗапросаДляНастроек()

// Процедура приводит булево значение к значению по умолчанию.
// 
// Параметры:
//  СтрокаДерева    - ДанныеФормыЭлементДерева.
//  СтрокаЗначение  - Строка.
// 
&НаСервере
Процедура ПривестиБулевоЗначение(СтрокаДерева, СтрокаЗначение)

	ПвзНастроекБит = ПланыВидовХарактеристик.бит_НастройкиПользователей;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева[СтрокаЗначение]) 
		И СтрокаДерева.Свойство("Настройка") И СтрокаДерева.Настройка.ТипЗначения.СодержитТип(Тип("Булево"))
		И СтрокаДерева.Настройка.ТипЗначения.Типы().Количество() = 1 Тогда
		                 			
		Если СтрокаДерева.Настройка = ПвзНастроекБит.ПоказыватьДополнительнуюИнформациюБит
			ИЛИ (Метаданные.Обработки.Найти("бит_ПанельФункций") <> Неопределено И СтрокаДерева.Настройка = ПвзНастроекБит.ОткрыватьПриЗапускеПанельФункцийБИТ) Тогда
		    СтрокаДерева[СтрокаЗначение] = Истина;
		Иначе	
			СтрокаДерева[СтрокаЗначение] = СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева[СтрокаЗначение]);
		КонецЕсли;
					
	КонецЕсли; 	

КонецПроцедуры // ПривестиБулевоЗначение()

// Процедура добавляет строку в дерево.
// 
// Параметры:
//  Ветка  	 - ДанныеФормыКоллекцияЭлементовДерева.
//  Выборка  - Выборка из результата запроса.
// 
&НаСервере
Функция ДобавитьСтрокуДерева(Ветка, Выборка)

	СтрокаДерева = Ветка.Добавить();
	
	СтрокаЗначение = ?(СтрокаДерева.Свойство("Значение"), "Значение", "ЗначениеНастройки");
	
	// Заполним строку
	ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
		     	
	Если Выборка.ЭтоГруппа Тогда
		
		СтрокаДерева.Картинка = БиблиотекаКартинок.бит_казна_Папка;
		
		// Добавим подстроки, если они есть
		ВыборкаНиз = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ВеткаНиз = СтрокаДерева.ПолучитьЭлементы();
		Пока ВыборкаНиз.Следующий() Цикл		
			НоваяСтрокаДерева = ДобавитьСтрокуДерева(ВеткаНиз, ВыборкаНиз);
		КонецЦикла;
		
	Иначе
		
		СтрокаДерева.Картинка = БиблиотекаКартинок.бит_Реквизит;
		           		
		ПривестиБулевоЗначение(СтрокаДерева, СтрокаЗначение);
		Если СтрокаДерева.Свойство("ЗначениеПоОсновнойГруппе") Тогда
			ПривестиБулевоЗначение(СтрокаДерева, "ЗначениеПоОсновнойГруппе");
		КонецЕсли;
	
		Если СтрокаДерева.Свойство("Настройка") И СтрокаДерева.Настройка = фКэшЗначений.Настройка_ОсновнаяГруппа 
			И Не ЗначениеЗаполнено(СтрокаДерева[СтрокаЗначение]) Тогда
			
			СтрокаДерева[СтрокаЗначение] = фКэшЗначений.ГруппаВсеПользователи;
			
		КонецЕсли;
		
		СтрокаДерева.ПервоначальноеЗначение = СтрокаДерева[СтрокаЗначение];
		
	КонецЕсли;
	
	Возврат СтрокаДерева;
	
КонецФункции // ДобавитьСтрокуДерева()
 
// Процедура обновляет дерево типовых настроек.
// 
// Параметры:
//  Дерево     - ДанныеФормыКоллекцияЭлементовДерева.
//  ИмяОбъекта - Строка.
// 
&НаСервере
Процедура ОбновитьДеревоНастроек(Дерево, ИмяОбъекта)
        		   
	КореньДерева = Дерево.ПолучитьЭлементы();
	КореньДерева.Очистить();
	
	ЭтоНастройкиБит = Найти(ИмяОбъекта, "бит_") <> 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Запрос.Текст = ПолучитьРезультатЗапросаДляНастроек(ИмяОбъекта);
	
	Результат = ПолучитьРезультатЗапросаДляНастроек(ИмяОбъекта);
		
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Настройка.Наименование = "Настройки БИТ" Тогда
			Продолжить;		
		КонецЕсли;
		
		Если Выборка.Настройка.Предопределенный И Найти(Выборка.Настройка.ИмяПредопределенныхДанных, "Удалить_") Тогда
		
			 Продолжить;
		
		КонецЕсли; 
		
		// Изменение кода. Начало. 08.07.2014{{
		Если Выборка.Настройка.Наименование = "Учет по всем организациям"
			ИЛИ Выборка.Настройка.Наименование = "Панель функций (БИТ)"
			ИЛИ Выборка.Настройка.Наименование = "Открывать панель информации при открытии форм"
			ИЛИ Выборка.Настройка.Наименование = "Отображать дополнительные реквизиты договоров"
			ИЛИ Выборка.Настройка.Наименование = "Отображать дополнительные аналитики" Тогда
		
			Продолжить;
		
		КонецЕсли; 
		// Изменение кода. Конец. 08.07.2014}}
		
		СтрокаДерева = ДобавитьСтрокуДерева(КореньДерева, Выборка);
	
	КонецЦикла;		

КонецПроцедуры // ОбновитьДеревоНастроек()

// Процедура обновляет дерево настроек.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ОбновитьДеревоНастроекБит()

	ОбновитьДеревоНастроек(ДеревоНастроек, "бит_НастройкиПользователей");
	ИзмененыНастройкиПоОсновнойГруппе = Ложь;
	
КонецПроцедуры // ОбновитьДеревоНастроекБит()

// Процедура обновляет дерево типовых настроек.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ОбновитьДеревоТиповыхНастроек()

КонецПроцедуры // ОбновитьДеревоТиповыхНастроек()

// Процедура обновляет таблицу пользователей группы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ОбновитьТаблицуПользователейГруппы()

	ТаблицаПользователейГруппы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Настройка"		 , фКэшЗначений.Настройка_ОсновнаяГруппа); 
	Запрос.УстановитьПараметр("ГруппаПоУмолчанию", фКэшЗначений.ГруппаВсеПользователи); 
	
	Если Пользователь = фКэшЗначений.ГруппаВсеПользователи Тогда
		
		ТекстНачало = "
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	СУММА(ВЫБОР КОГДА ГруппыПользователей.Ссылка ЕСТЬ NULL 
		|		ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ)  КАК Количество
		|ПОМЕСТИТЬ ТабПользователи
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.%ИмяТабЧасти% КАК ГруппыПользователей
		|		ПО Пользователи.Ссылка = ГруппыПользователей.Пользователь
        |
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.Ссылка
		|;
        |
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Иначе		
		
		Запрос.УстановитьПараметр("СсылкаГруппы", Пользователь);  
		ТекстНачало = "
		|ВЫБРАТЬ
		|	ПользователиГруппы.Пользователь,
		|	СУММА(ВЫБОР КОГДА ГруппыПользователя.Ссылка = &СсылкаГруппы 
		|		ТОГДА 0 
		|		ИНАЧЕ 1
		|	КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ТабПользователи
		|ИЗ
		|	Справочник.ГруппыПользователей.%ИмяТабЧасти% КАК ПользователиГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.%ИмяТабЧасти% КАК ГруппыПользователя
		|		ПО ПользователиГруппы.Пользователь = ГруппыПользователя.Пользователь
		|ГДЕ
		|	ПользователиГруппы.Ссылка = &СсылкаГруппы
	    |
		|СГРУППИРОВАТЬ ПО
		|	ПользователиГруппы.Пользователь
		|;
	    |
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстНачало + "
	|ВЫБРАТЬ
	|	ТабПользователи.Пользователь КАК Пользователь,
	|	ВЫБОР
	|		КОГДА ТабПользователи.Количество > 0
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключенВДругиеГруппы,
	|	ВЫБОР КОГДА бит_НастройкиПользователей.ЗначениеНастройки ЕСТЬ NULL
	|		ТОГДА &ГруппаПоУмолчанию
	|		ИНАЧЕ бит_НастройкиПользователей.ЗначениеНастройки
	|	КОНЕЦ КАК ОсновнаяГруппа,
	|	ЛОЖЬ  КАК Изменено
	|ИЗ
	|	ТабПользователи КАК ТабПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиПользователей КАК бит_НастройкиПользователей
	|		ПО ТабПользователи.Пользователь = бит_НастройкиПользователей.Пользователь
	|		И  бит_НастройкиПользователей.Настройка = &Настройка
    |
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь
	|";
	
	ИмяТабЧасти = бит_ОбщегоНазначения.ИмяТабЧастиГруппыПользователей();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТабЧасти%", ИмяТабЧасти);		
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НовСтрока = ТаблицаПользователейГруппы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка); 
	
	КонецЦикла; 
	  
КонецПроцедуры // ОбновитьТаблицуПользователейГруппы()

// Процедура обновляет таблицу значений настройки.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ОбновитьДеревоЗначенийНастройки()

	КореньДерева = ДеревоПользователейЗначений.ПолучитьЭлементы();
	КореньДерева.Очистить();
	
	Если Настройка = фКэшЗначений.Настройка_ОсновнаяГруппа Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Настройка", Настройка);
		Запрос.УстановитьПараметр("ГруппаПоУмолчанию", фКэшЗначений.ГруппаВсеПользователи);
		
		Если бит_ОбщегоНазначения.ЭтоСемействоУПП() Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ТабПользователи.Ссылка 			КАК Пользователь,
			|	ТабПользователи.Наименование 	КАК Наименование,
			|	ТабПользователи.ЭтоГруппа 		КАК ЭтоГруппа,
			|	ВЫБОР
			|		КОГДА (НЕ ТабПользователи.ЭтоГруппа)
			|				И бит_НастройкиПользователей.ЗначениеНастройки ЕСТЬ NULL 
			|			ТОГДА &ГруппаПоУмолчанию
			|		ИНАЧЕ бит_НастройкиПользователей.ЗначениеНастройки
			|	КОНЕЦ КАК ЗначениеНастройки
			|ИЗ
			|	Справочник.Пользователи КАК ТабПользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиПользователей КАК бит_НастройкиПользователей
			|		ПО ТабПользователи.Ссылка = бит_НастройкиПользователей.Пользователь
			|			И (бит_НастройкиПользователей.Настройка = &Настройка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоГруппа ИЕРАРХИЯ,
			|	Наименование
			|";
			
			
		ИначеЕсли бит_ОбщегоНазначения.ЭтоСемействоБП() Или бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда	
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ТабПользователи.Ссылка 			КАК Пользователь,
			|	ТабПользователи.Наименование 	КАК Наименование,
			|	ЛОЖЬ 		КАК ЭтоГруппа,
			|	бит_НастройкиПользователей.ЗначениеНастройки КАК ЗначениеНастройки
			|ИЗ
			|	Справочник.Пользователи КАК ТабПользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиПользователей КАК бит_НастройкиПользователей
			|		ПО ТабПользователи.Ссылка = бит_НастройкиПользователей.Пользователь
			|			И (бит_НастройкиПользователей.Настройка = &Настройка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование
			|";
			
			
		КонецЕсли; 
		
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Выборка.Следующий() Цикл
			
			ДобавитьСтрокуДерева(КореньДерева, Выборка);
							
		КонецЦикла;			
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДеревоЗначенийНастройки()

// Процедура обновляет значения по основной группе для строки дерева настроек.
// 
// Параметры:
//  СтрокаДерева  	 		- ДанныеФормыЭлементДерева.
//  Выборка  		 		- Выборка из результата запроса.
//  ЗначениеОсновнаяГруппа  - СправочникСсылка.ГруппыПользователей.
// 
&НаСервере
Процедура ОбновитьЗначенияПоОсновнойГруппеДляСтрокиДерева(СтрокаДерева, Выборка, ЗначениеОсновнаяГруппа)

	Если СтрокаДерева.ЭтоГруппа Тогда
		
		Для каждого Подстрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ОбновитьЗначенияПоОсновнойГруппеДляСтрокиДерева(Подстрока, Выборка, ЗначениеОсновнаяГруппа);
		КонецЦикла;
		
	Иначе	
		
		СтруктураПоиска = Новый Структура("Настройка", СтрокаДерева.Настройка);
	    Выборка.НайтиСледующий(СтруктураПоиска);
		
		СтрокаДерева.ЗначениеПоОсновнойГруппе = Выборка.ЗначениеПоОсновнойГруппе;
		ПривестиБулевоЗначение(СтрокаДерева, "ЗначениеПоОсновнойГруппе");
				
		Если СтрокаДерева.Настройка = фКэшЗначений.Настройка_ОсновнаяГруппа Тогда
			
			СтрокаДерева.ЗначениеНастройки = ЗначениеОсновнаяГруппа;
			
			Если СтрокаДерева.ПервоначальноеЗначение = ЗначениеОсновнаяГруппа Тогда
				СтрокаДерева.Изменено = Ложь;
				ИзмененыНастройкиПоОсновнойГруппе = Ложь;
			Иначе
				СтрокаДерева.Изменено = Истина;
				ИзмененыНастройкиПоОсновнойГруппе = Истина;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли; 	   		

КонецПроцедуры // ОбновитьЗначенияПоОсновнойГруппеДляСтрокиДерева()

// Процедура обновляет значения по основной группе для дерева настроек.
// 
// Параметры:
//  ЗначениеОсновнаяГруппа - СправочникСсылка.ГруппыПользователей.
// 
&НаСервере
Процедура ОбновитьЗначенияПоОсновнойГруппе(ЗначениеОсновнаяГруппа)

	КореньДерева = ДеревоНастроек.ПолучитьЭлементы();


	Результат = ПолучитьРезультатЗапросаДляНастроек("бит_НастройкиПользователей", ЗначениеОсновнаяГруппа);
	Выборка = Результат.Выбрать();
	
	Для каждого СтрокаДерева Из КореньДерева Цикл
		ОбновитьЗначенияПоОсновнойГруппеДляСтрокиДерева(СтрокаДерева, Выборка, ЗначениеОсновнаяГруппа);
	КонецЦикла;   		

КонецПроцедуры // ОбновитьЗначенияПоОсновнойГруппе()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииЗаписиДанныхФормы

// Процедура записывает значение настройки пользователя регистр.
// 
// Параметры:
//  СтрокаТабл 		- СтрокаТаблицыЗначений или ДереваЗначений.
//  ДопСтруктура 	- Структура.
//  ИмяРегистра 	- Строка (по умолчанию "бит_НастройкиПользователей").
//  ТребуетсяОбновитьНастройки - Булево.
// 
&НаСервере
Процедура ЗаписатьЗначениеВРегистр(СтрокаТабл, ДопСтруктура, ИмяРегистра = "бит_НастройкиПользователей", ТребуетсяОбновитьНастройки = Ложь)
	
	Если ДопСтруктура.Свойство("Настройка")	Тогда
		пНастройка 	 = ДопСтруктура.Настройка;
		пПользователь = СтрокаТабл.Пользователь;
	Иначе
		пНастройка 	 = СтрокаТабл.Настройка;
		пПользователь = ДопСтруктура.Пользователь;
	КонецЕсли;	
	СтрокаЗначение = ?(СтрокаТабл.Свойство("Значение"), "Значение", "ЗначениеНастройки");
	
	Если СтрокаТабл.Изменено Тогда
			
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(пПользователь);
		НаборЗаписей.Отбор.Настройка.Установить(пНастройка);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		Если Не (Настройка = фКэшЗначений.Настройка_ОсновнаяГруппа
			И СтрокаТабл[СтрокаЗначение] = фКэшЗначений.ГруппаВсеПользователи) Тогда
		
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаТабл);
			ЗаполнитьЗначенияСвойств(Запись, ДопСтруктура);	
		
		КонецЕсли;
		
		бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей);
				
		СтрокаТабл.Изменено = Ложь;
		СтрокаТабл.ПервоначальноеЗначение = СтрокаТабл[СтрокаЗначение];
		
		Если Пользователь = пПользователь Тогда
			ТребуетсяОбновитьНастройки = Истина;
		КонецЕсли;
		
	КонецЕсли;   		 
	    	
КонецПроцедуры // ЗаписатьЗначениеВРегистр()

// Процедура записывает настройку по строке дерева значений.
// 
// Параметры:
//  ВеткаДерева  - ДанныеФормыКоллекцияЭлементовДерева.
//  ИмяРегистра  - Строка.
//  ТребуетсяОбновитьНастройки - Булево.
// 
&НаСервере
Процедура ЗаписатьНастройкиДляСтрокиДерева(ВеткаДерева, ИмяРегистра = "бит_НастройкиПользователей", ТребуетсяОбновитьНастройки = Ложь)

	Для каждого СтрокаДерева Из ВеткаДерева Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			ЗаписатьНастройкиДляСтрокиДерева(СтрокаДерева.ПолучитьЭлементы(), ИмяРегистра, ТребуетсяОбновитьНастройки);
		Иначе	
			
			Если СтрокаДерева.Свойство("Настройка") Тогда
				ДопСтруктура = Новый Структура("Пользователь", Пользователь);
			Иначе				
				ДопСтруктура = Новый Структура("Настройка"	 , Настройка);
			КонецЕсли;
			
			ЗаписатьЗначениеВРегистр(СтрокаДерева, ДопСтруктура, ИмяРегистра, ТребуетсяОбновитьНастройки);
			
		КонецЕсли;
		   	
	КонецЦикла; 	

КонецПроцедуры // ЗаписатьНастройкиДляСтрокиДерева()

// Процедура записывает настройки БИТ в регистр.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаписатьНастройкиБит(СтруктураНастроек)
	
	КореньДерева = ДеревоНастроек.ПолучитьЭлементы();
	ЗаписатьНастройкиДляСтрокиДерева(КореньДерева);
	
	Если Пользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь") Тогда
		СтруктураНастроек.Вставить("ИнтервалУведомленияУстановкиВиз", 
				бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ИнтервалУведомленияУстановкиВиз", 
																				Пользователь));
	КонецЕсли;
																			
	ОбновитьДеревоЗначенийНастройки();
	ИзмененыНастройкиПоОсновнойГруппе = Ложь;
		
КонецПроцедуры // ЗаписатьНастройкиБит()

// Процедура записывает типовые настройки в регистр.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаписатьТиповыеНастройки()
	
	КореньДерева = ДеревоТиповыхНастроек.ПолучитьЭлементы();
	ЗаписатьНастройкиДляСтрокиДерева(КореньДерева, "НастройкиПользователей");	
	                                         
КонецПроцедуры // ЗаписатьТиповыеНастройки()

// Процедура записывает настройки БИТ и типовые настройки в регистр.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаписатьНастройкиБитТиповые(СтруктураНастроек)
	
	ЗаписатьНастройкиБит(СтруктураНастроек);
	ЗаписатьТиповыеНастройки();
	
КонецПроцедуры // ЗаписатьНастройкиБитТиповые()
   
// Процедура записывает значение настройки пользователей регистр.
// 
// Параметры:
//  ТребуетсяОбновитьНастройки - Булево.
// 
&НаСервере
Процедура ЗаписатьЗначенияНастройки(ТребуетсяОбновитьНастройки)
	
	КореньДерева = ДеревоПользователейЗначений.ПолучитьЭлементы();
		
	ЗаписатьНастройкиДляСтрокиДерева(КореньДерева, , ТребуетсяОбновитьНастройки);
		    	
КонецПроцедуры // ЗаписатьЗначенияНастройки()


#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура раскрывает все уровни дерева.
// 
// Параметры:
//  ИмяДерева - Строка
// 
&НаКлиенте
Процедура РазвернутьДерево(ИмяДерева)

	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы[ИмяДерева], ЭтаФорма[ИмяДерева].ПолучитьЭлементы());
	
КонецПроцедуры // РазвернутьДерево()

// Процедура открывает форму выбора основной группы пользователя.
// 
// Параметры:
//  Пользователь   - СправочникСсылка.Пользователи.
//  ТекущиеДанные  - ТекущиеДанные.
//  Элемент        - Элемент.
// 
&НаКлиенте
Процедура ВыбратьОсновнуюГруппуПользователя(Пользователь, ТекущиеДанные, Элемент)

	ДополнительныеПараметры = Новый Структура("Пользователь, ТекущиеДанные, Элемент", Пользователь, ТекущиеДанные, Элемент);
	ПараметрыФормы = Новый Структура("Пользователь, ТекущаяГруппа", Пользователь, ТекущиеДанные.ЗначениеНастройки);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьГруппуОкончание", ЭтаФорма, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.бит_РедактированиеНастроекПользователей.Форма.ФормаСпискаДоступныхГруппУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ВыбратьОсновнуюГруппуПользователя()

// Процедура окончание выбора группы. 
// 
&НаКлиенте 
Процедура ВыбратьГруппуОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Группа 			= РезультатВыбора;
	ТекущиеДанные 	= ДополнительныеПараметры.ТекущиеДанные;
	Пользователь 	= ДополнительныеПараметры.Пользователь;
	Элемент 		= ДополнительныеПараметры.Элемент;
	
	// Запишем выбранную группу
	Если Группа <> Неопределено И Группа <> КодВозвратаДиалога.Отмена 
		И Группа <> ТекущиеДанные.ЗначениеНастройки Тогда
		
		Если Элемент.Родитель.Имя  = "ДеревоПользователейЗначений" Тогда
			
			ТекущиеДанные.ЗначениеНастройки = Группа;
			Если Группа = ТекущиеДанные.ПервоначальноеЗначение Тогда
				ТекущиеДанные.Изменено = Ложь
			Иначе
				ТекущиеДанные.Изменено = Истина;	
			КонецЕсли;
					
		Иначе
			
			ОбновитьЗначенияПоОсновнойГруппе(Группа);
			
		КонецЕсли;
					
	КонецЕсли;	
	
КонецПроцедуры // ВыбратьГруппуОкончание()

#КонецОбласти

#КонецОбласти

