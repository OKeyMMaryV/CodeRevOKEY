
#Область ОписаниеПеременных

// Хранит текущую дату начала планирования
&НаКлиенте
Перем мТекущаяДатаНачалаПланирования;
// Хранит текущую дату окончания планирования.
&НаКлиенте
Перем мТекущаяДатаОкончанияПланирования;
// Хранит текущую настройку формы
&НаКлиенте
Перем мТекущаяНастройкаФормы;
// Хранит текущую валюту обработки
&НаКлиенте
Перем мТекущаяВалютаОбработки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	// Стандартные действия при создании на сервере.
	МетаданныеОбъекта = Метаданные.Обработки.бит_РабочееМестоОперативногоПланированияДДС;
	
	// Вызов механизма защиты
	 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	УстановитьУсловноеОформление();
	
	УстановитьФлажкиРежимаОтображения("РежимОтображения_ПоБюджету");
	
	Если Параметры.Свойство("ДокументВладелец") Тогда
		ДокументВладелец	   = Параметры.ДокументВладелец;
		РежимОткрытияОбработки = Параметры.РежимОткрытия;
		
		Объект.НастройкаФормы	= ДокументВладелец.НастройкаФормы;
		Объект.Периодичность	= ДокументВладелец.Сценарий.бит_Периодичность;
		Объект.Валюта			= ДокументВладелец.ВалютаДокумента;
		Объект.Курс				= ДокументВладелец.КурсДокумента;
		Объект.Кратность		= ДокументВладелец.КратностьДокумента;
		Объект.Сценарий 		= ДокументВладелец.Сценарий;
		Объект.ПериодПланирования.ДатаНачала	 = ДокументВладелец.ДатаНачалаПланирования;
		Объект.ПериодПланирования.ДатаОкончания	 = ДокументВладелец.ДатаОкончанияПланирования;
		Если НЕ ЗначениеЗаполнено(Объект.ПериодПланирования.ДатаОкончания) Тогда
			ДатаОкончания = бит_Бюджетирование.ПолучитьПериодПоСдвигу(Объект.ПериодПланирования.ДатаНачала, ДокументВладелец.Сценарий.ПродолжительностьИнтервала-1, Объект.Периодичность);
			Объект.ПериодПланирования.ДатаОкончания = бит_Бюджетирование.ПолучитьКонецПериода(ДатаОкончания, Объект.Периодичность);
		КонецЕсли;
	Иначе	
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		СтрКурс = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаРегл, ТекущаяДатаСеанса());
		
		Объект.Периодичность = Перечисления.бит_ПериодичностьПланирования.День;
		Объект.Валюта		 = ВалютаРегл;
		Объект.Курс		 	 = СтрКурс.Курс;
		Объект.Кратность 	 = СтрКурс.Кратность;
		Объект.ПериодПланирования.ДатаНачала	= НачалоМесяца(ТекущаяДатаСеанса());
		Объект.ПериодПланирования.ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());
		
		УстановитьФлажкиРежимаОтображения("РежимОтображения_ПоДокументамПланирования"); // По документам планирования
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	
	Объект.ТекстЗапроса	= Объект.НастройкаФормы.ТекстЗапроса;
	
	
	// Инициализация компоновщика, используемого для настройки отборов.
	АдресКомпоновки = Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(Объект.ТекстЗапроса, Объект.Компоновщик, УникальныйИдентификатор);
	АдресКомпоновкиДокПланирования = ИнициализироватьКомпоновщикСервер(Объект.КомпоновщикДокПланирования);
	
	// Восстановление настроек построителя
	Если ЗначениеЗаполнено(ДокументВладелец) Тогда
		ДокОб = Параметры.ДокументВладелец.ПолучитьОбъект();
		СохраненнаяНастройка = ДокОб.ПолучитьНастройкиПостроителя();
		ВосстановитьОтбор(СохраненнаяНастройка);
		
		ОбновитьДеревоДанных(Истина);
		
		Элементы.ГруппаСтраницыОсновная.ТекущаяСтраница = Элементы.ГруппаСтраницаДеревоДанных;
	Иначе
		
		фЗависимостиЯчеек = бит_БюджетированиеКлиентСервер.ПолучитьЗависимостиЯчеек(ТабДокДанные);
		
		МассивСтатей = ИзвлечьСтатьиИзДерева(ТабДокДанные);
		фКэшЗначений.НастройкиСтатей = Новый Соответствие;
		бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(МассивСтатей, фКэшЗначений.НастройкиСтатей);
		
		// Установка оформления таблиц БДДС и ЗависимыеОбороты.
		ИменаТаблиц = Новый Массив;  
		ИменаТаблиц.Добавить("БДДС");
		ИменаТаблиц.Добавить("БДДС_Редактирование");
		ОФормитьТаблицу("БДДС", ИменаТаблиц, МассивСтатей);																
		
		// Установка видимости колонок табличных полей БДДС_Редактирование И ЗависимыеОбороты_Редактирование.
		УправлениеВидимостьюКолонокТаблиц();
	КонецЕсли; 
	
	ТекИдБДДС = бит_Бюджетирование.ОпределитьТекущийИД(Объект.БДДС.Выгрузить(),"ИД");
	
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	, "БДДС_Редактирование"
																	, фКэшЗначений.ИзмеренияДоп
																	, фКэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	, "БДДС"
																	, фКэшЗначений.ИзмеренияДоп
																	, фКэшЗначений.НастройкиИзмерений);
																	
	СформироватьДеревоВидовОперацийДляЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	мТекущаяНастройкаФормы  = Объект.НастройкаФормы;
	мТекущаяВалютаОбработки = Объект.Валюта;
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолучениеДанныхБюджета"
		И Источник = УникальныйИдентификатор Тогда
		
		ОбработкаПодбораБюджета(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастройкаФормыПриИзменении(Элемент)
	
	ОповещениеИстина = Новый ОписаниеОповещения("НастройкаФормыПриИзменении_ОтветДа", ЭтотОбъект); 
	ОповещениеЛожь	 = Новый ОписаниеОповещения("НастройкаФормыПриИзменении_ОтветНет", ЭтотОбъект); 
	ЗадатьВопросОбОчисткеДанных(ОповещениеИстина, ОповещениеЛожь);
	
КонецПроцедуры

// Процедура окончание процедуры "НастройкаФормыПриИзменении" при ответе Да.
// 
&НаКлиенте 
Процедура НастройкаФормыПриИзменении_ОтветДа(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИзменениеНастройкиФормы();	
	мТекущаяНастройкаФормы = Объект.НастройкаФормы;
	
КонецПроцедуры // НастройкаФормыПриИзменении_ОтветДа()

// Процедура окончание процедуры "НастройкаФормыПриИзменении" при ответе Нет.
// 
&НаКлиенте 
Процедура НастройкаФормыПриИзменении_ОтветНет(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Объект.НастройкаФормы = мТекущаяНастройкаФормы;
	
КонецПроцедуры // НастройкаФормыПриИзменении_ОтветНет()

&НаКлиенте
Процедура ПериодПланированияДатаНачалаПриИзменении(Элемент)
	
	ОповещениеИстина = Новый ОписаниеОповещения("ПериодПланированияДатаНачалаПриИзменении_ОтветДа", ЭтотОбъект); 
	ОповещениеЛожь	 = Новый ОписаниеОповещения("ПериодПланированияДатаНачалаПриИзменении_ОтветНет", ЭтотОбъект); 
	ЗадатьВопросОбОчисткеДанных(ОповещениеИстина, ОповещениеЛожь);
	
КонецПроцедуры

// Процедура окончание процедуры "ПериодПланированияДатаНачалаПриИзменении" при ответе Да.
// 
&НаКлиенте 
Процедура ПериодПланированияДатаНачалаПриИзменении_ОтветДа(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Объект.БДДС.Количество() > 0 Тогда
		
		ОчиститьВсе();
		
	КонецЕсли;
	
	мТекущаяДатаНачалаПланирования = Объект.ПериодПланирования.ДатаНачала;
	
КонецПроцедуры // ПериодПланированияДатаНачалаПриИзменении_ОтветДа()

// Процедура окончание процедуры "ПериодПланированияДатаНачалаПриИзменении" при ответе Нет.
// 
&НаКлиенте 
Процедура ПериодПланированияДатаНачалаПриИзменении_ОтветНет(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Объект.ПериодПланирования.ДатаНачала = мТекущаяДатаНачалаПланирования;
	
КонецПроцедуры // ПериодПланированияДатаНачалаПриИзменении_ОтветНет()

&НаКлиенте
Процедура ПериодПланированияДатаОкончанияПриИзменении(Элемент)
	
	ОповещениеИстина = Новый ОписаниеОповещения("ПериодПланированияДатаОкончанияПриИзменении_ОтветДа", ЭтотОбъект); 
	ОповещениеЛожь	 = Новый ОписаниеОповещения("ПериодПланированияДатаОкончанияПриИзменении_ОтветНет", ЭтотОбъект); 
	ЗадатьВопросОбОчисткеДанных(ОповещениеИстина, ОповещениеЛожь);
	
КонецПроцедуры

// Процедура окончание процедуры "ПериодПланированияДатаОкончанияПриИзменении" при ответе Да.
// 
&НаКлиенте 
Процедура ПериодПланированияДатаОкончанияПриИзменении_ОтветДа(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Объект.БДДС.Количество() > 0 Тогда
		
		ОчиститьВсе();
		
	КонецЕсли;                           
	
	мТекущаяДатаОкончанияПланирования = Объект.ПериодПланирования.ДатаОкончания;
	
КонецПроцедуры // ПериодПланированияДатаОкончанияПриИзменении_ОтветДа()

// Процедура окончание процедуры "ПериодПланированияДатаОкончанияПриИзменении" при ответе Нет.
// 
&НаКлиенте 
Процедура ПериодПланированияДатаОкончанияПриИзменении_ОтветНет(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Объект.ПериодПланирования.ДатаОкончания = мТекущаяДатаОкончанияПланирования;
	
КонецПроцедуры // ПериодПланированияДатаОкончанияПриИзменении_ОтветНет()

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	
	УстановитьФлажкиРежимаОтображения(Элемент.Имя);
	
	УстановитьВидимость();
	
	ВосстановитьДерево(Ложь,Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабдокданные

&НаКлиенте
Процедура ТабДокДанныеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Расшифровка, "РасшифровкаЯчейкиФормыВвода")  Тогда
	
		Если Расшифровка.Вид = "Измерение" И ЗначениеЗаполнено(Расшифровка.Значение) Тогда
		
			ПоказатьЗначение(,Расшифровка.Значение);
		
		КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ТабДокДанныеПриАктивизацииОбласти(Элемент)
	
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблМакета.Расшифровка, "РасшифровкаЯчейкиФормыВвода") Тогда
			
			расш = ОблМакета.Расшифровка;
			
			Если расш.Вид = "Значение" Тогда
				
				// Устанавливаем отбор по периоду и комбинации измерений.
				СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(расш);
				
				Если РежимОтображения_ПоБюджету 
					ИЛИ РежимОтображения_ПоДокументамПланирования Тогда
					
					СтрОтбор.Вставить("ИсточникСтроки", фКэшЗначений.РежимыОтображения[ПолучитьАктивныйРежимОтображения()]);
				КонецЕсли;	
				
				Элементы.БДДС_Редактирование.ОтборСтрок = Новый ФиксированнаяСтруктура(СтрОтбор);
				
			Иначе	
				
				УстановитьНесуществующийОтборБДДС();
				
			КонецЕсли; 
			
		Иначе	  
			
			УстановитьНесуществующийОтборБДДС();
			
		КонецЕсли;	// ИмяКласса подходит
		
	КонецЕсли; // ОблМакета подходит
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокДанныеПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблМакета.Расшифровка, "РасшифровкаЯчейкиФормыВвода") Тогда
			
			ИзменениеСодержимогоОбласти(ОблМакета);
			
		КонецЕсли;	// ИмяКласса подходит
		
		бит_БюджетированиеКлиентСервер.ВычислитьЗависимыеФормулы(ТабДокДанные, фЗависимостиЯчеек, ОблМакета.Имя);
		
	КонецЕсли; // ОблМакета подходит
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормыБддс_редактирование

&НаКлиенте
Процедура БДДС_РедактированиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БДДС_Редактирование.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ПоказатьЗначение(,ТекущиеДанные.ДокументПланирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования И АктивнаРедактируемаяЯчейка() Тогда
		
		Обл = Элементы.ТабДокДанные.ТекущаяОбласть;
		расш   = Обл.Расшифровка;

		ОбновитьЗначениеЯчейкиДерева(Обл, расш);
		ОбновитьПарнуюЯчейки(Обл);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПослеУдаления(Элемент)
	
	Если АктивнаРедактируемаяЯчейка() Тогда
		
		Обл = Элементы.ТабДокДанные.ТекущаяОбласть;
		расш   = Обл.Расшифровка;
		
		ОбновитьЗначениеЯчейкиДерева(Обл, расш);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПередУдалением(Элемент, Отказ)
	
	Если НЕ АктивнаРедактируемаяЯчейка() Тогда
		
		ТекстСообщения =  НСтр("ru = 'Для добавления данных необходимо установить курсор в редактируемую ячейку!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ АктивнаРедактируемаяЯчейка() Тогда
		
		ТекстСообщения =  НСтр("ru = 'Для добавления данных необходимо установить курсор в редактируемую ячейку!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;
		УстановитьИД_БДДС_Клиент(ТекущаяСтрока);		
		
		Если НЕ Копирование И АктивнаРедактируемаяЯчейка() Тогда
			
			 расш = Элементы.ТабДокДанные.ТекущаяОбласть.Расшифровка;
		     ЗаполнитьНовуюСтрокуБюджетаСервер(ТекущаяСтрока.ПолучитьИдентификатор(), расш);
			 
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеСтатьяОборотовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущаяСтрока, фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	
	ИзменениеСтатьиОборотовВТабличнойЧасти(ТекущаяСтрока.ПолучитьИдентификатор(),"БДДС", "БДДС_Редактирование");
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СсылкаДокумента"    , фКэшЗначений.ЗаявкаНаРасходованиеДСПустая);
	ПараметрыФормы.Вставить("ДеревоВидовОпераций", ДеревоВидовОпераций);
	
	Оповещение = Новый ОписаниеОповещения("БДДС_РедактированиеВидОперацииНачалоВыбораОкончание", ЭтотОбъект); 
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура окончание процедуры "БДДС_РедактированиеВидОперацииНачалоВыбора".
// 
&НаКлиенте 
Процедура БДДС_РедактированиеВидОперацииНачалоВыбораОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		
		ТекущиеДанные = Элементы.БДДС_Редактирование.ТекущиеДанные;
		
		ТекущиеДанные.ВидОперации = РезультатВыбора.ВидОперации;
		ТекущиеДанные.ФормаОплаты = РезультатВыбора.ФормаОплаты;
		
	КонецЕсли;
	
КонецПроцедуры // БДДС_РедактированиеВидОперацииНачалоВыбораОкончание()

&НаКлиенте
Процедура БДДС_РедактированиеКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БДДС_Редактирование.ТекущиеДанные;
	ИзменениеКонтрагентаТЧ(ТекущиеДанные.ПолучитьИдентификатор(), "БДДС");
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БДДС_Редактирование.ТекущиеДанные;
	ИзменениеДоговораКонтрагентаТЧ(ТекущиеДанные.ПолучитьИдентификатор(), "БДДС");
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БДДС_Редактирование.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		                          		
		// Установка параметров выбора.
		СтруктураОтбора = Новый Структура("Владелец", ТекущиеДанные.Контрагент);
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БДДС_Редактирование.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "БДДС_Редактирование", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,фКэшЗначений.НастройкиИзмерений);
															   
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеАналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    ТекущиеДанные = Элементы.БДДС_Редактирование.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "БДДС_Редактирование", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,фКэшЗначений.НастройкиИзмерений);
                                                          
КонецПроцедуры // ТоварыАналитикаАвтоПодбор()

&НаКлиенте
Процедура БДДС_РедактированиеАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.БДДС_Редактирование.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "БДДС_Редактирование", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
	                                                                       	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,фКэшЗначений.НастройкиИзмерений);
																			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыпланирования

&НаКлиенте
Процедура ДокументыПланированияВыполнятьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыПланирования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Затемненный флажок устанавливается только программно.
	Если ТекущиеДанные.Выполнять = 2 Тогда
		ТекущиеДанные.Выполнять = 0;
	КонецЕсли;
	
	ИзменитьФлажкиДерево(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Выполнять);
	
	ИзменитьФлажкиРодителей(ТекущиеДанные.ПолучитьРодителя(), ТекущиеДанные.Выполнять);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	Если ЗаполнениеДереваВозможно(Истина) Тогда
		
		ОповещениеИстина = Новый ОписаниеОповещения("ОбновитьДанныеОкончание", ЭтотОбъект); 
		ЗадатьВопросОбОчисткеДанных(ОповещениеИстина);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура окончание процедуры "ОбновитьДанные".
// 
&НаКлиенте 
Процедура ОбновитьДанныеОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Состояние( НСтр("ru = 'Выполняется построение дерева...'"));
	ОбновитьДеревоДанных(Истина);
	
КонецПроцедуры // ОбновитьДанныеОкончание()

&НаКлиенте
Процедура РедактироватьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Объект.ПериодПланирования;
	
	Оповещение = Новый ОписаниеОповещения("РедактироватьПериодОкончание", ЭтотОбъект); 
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Процедура окончание процедуры "РедактироватьПериод".
// 
&НаКлиенте 
Процедура РедактироватьПериодОкончание(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		
		ОповещениеИстина = Новый ОписаниеОповещения("РедактироватьПериодОкончание_Завершение", ЭтотОбъект, Период); 
		ЗадатьВопросОбОчисткеДанных(ОповещениеИстина);
		
	КонецЕсли;	
	
КонецПроцедуры // РедактироватьПериодОкончание()

// Процедура окончание процедуры "РедактироватьПериодОкончание".
// 
&НаКлиенте 
Процедура РедактироватьПериодОкончание_Завершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Объект.БДДС.Количество() > 0 Тогда
		
		ОчиститьВсе();
		
	КонецЕсли; 
	
	Объект.ПериодПланирования = ДополнительныеПараметры;
	
	Модифицированность = Истина;			
	
КонецПроцедуры // РедактироватьПериодОкончание_Завершение()

&НаКлиенте
Процедура ЗаполнитьДанныеПоДокументамПланирования(Команда)
	
	ЗаполнитьТабЧастьДаннымиДокументовПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоБюджету(Команда)
	
	Если ЗаполнениеДереваВозможно(Истина) Тогда
		
		ОткрытьОбработкуПолученияДанныхБюджета("ПланированиеДДС");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПланированияПоБюджету(Команда)
	
	Если НЕ ЗначенияПоУмолчаниюЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	ЗадатьВопрос = НеЗаполненВидОперацииИФормаОплаты("ДокументыПланирования");
	
	Если ЗадатьВопрос Тогда
		
		Оповещение = Новый ОписаниеОповещения("СоздатьДокументыПланированияПоБюджетуОкончание", ЭтотОбъект); 
		ТекстВопроса = НСтр("ru = 'В строках данных присутствуют строки с незаполненным видом операции или формой оплаты. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		СоздатьДокументыПланированияСервер("ДокументыПланирования");
	КонецЕсли;	
		
КонецПроцедуры

// Процедура окончание процедуры "СоздатьДокументыПланированияПоБюджету".
// 
&НаКлиенте 
Процедура СоздатьДокументыПланированияПоБюджетуОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	СоздатьДокументыПланированияСервер("ДокументыПланирования");
	
КонецПроцедуры // СоздатьДокументыПланированияПоБюджетуОкончание()

&НаКлиенте
Процедура СоздатьДокументыПрогнозированияПоБюджету(Команда)
	
	Если НЕ ЗначенияПоУмолчаниюЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	ЗадатьВопрос = НеЗаполненВидОперацииИФормаОплаты("ДокументыПрогнозирования");
	
	Если ЗадатьВопрос Тогда
		
		Оповещение = Новый ОписаниеОповещения("СоздатьДокументыПрогнозированияПоБюджетуОкончание", ЭтотОбъект); 
		ТекстВопроса = НСтр("ru = 'В строках данных присутствуют строки с незаполненной формой оплаты. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе	
		СоздатьДокументыПланированияСервер("ДокументыПрогнозирования");
	КонецЕсли;	
		
КонецПроцедуры

// Процедура окончание процедуры "СоздатьДокументыПрогнозированияПоБюджету".
// 
&НаКлиенте 
Процедура СоздатьДокументыПрогнозированияПоБюджетуОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();

	СоздатьДокументыПланированияСервер("ДокументыПрогнозирования");
	
КонецПроцедуры // СоздатьДокументыПрогнозированияПоБюджетуОкончание()

&НаКлиенте
Процедура УстановитьФлажкиДокументы(Команда)
	
	ИзменитьФлажкиДерево(ДокументыПланирования.ПолучитьЭлементы(), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиДокументы(Команда)
	
	ИзменитьФлажкиДерево(ДокументыПланирования.ПолучитьЭлементы(), 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументы(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УдалитьДокументыОкончание", ЭтотОбъект); 
	ТекстВопроса = НСтр("ru='Документы будут удалены непосредственно, без проверки ссылочной целостности и возможности восстановления. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Процедура окончание процедуры "УдалитьДокументы".
// 
&НаКлиенте 
Процедура УдалитьДокументыОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	УдалитьДокументыПланированияНаСервере();
                
КонецПроцедуры // УдалитьДокументыОкончание()

&НаКлиенте
Процедура ОтменитьПроведениеДокументов(Команда)
	
	ЗаписатьДокументыПланированияНаСервере(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументы(Команда)
	
	ЗаписатьДокументыПланированияНаСервере(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
	
		ПараметрыФормы.Вставить("СохраненнаяНастройка",ТекущаяНастройка);
	
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиОкончание", ЭтотОбъект); 
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
										
КонецПроцедуры

// Процедура окончание процедуры "СохранитьНастройки".
// 
&НаКлиенте 
Процедура СохранитьНастройкиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		ТекущаяНастройка = РезультатВыбора;
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройкиОкончание()

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНастройкиОкончание", ЭтотОбъект); 
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура окончание процедуры "ВосстановитьНастройки".
// 
&НаКлиенте 
Процедура ВосстановитьНастройкиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда        
		
		ТекущаяНастройка = РезультатВыбора;
		ПрименитьНастройки(ТекущаяНастройка);
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиОкончание()

&НаКлиенте
Процедура ЗаполнитьДанныеПоИсточникам(Команда)
	
	Если ЗаполнениеДереваВозможно(Истина) Тогда
		
		ОткрытьОбработкуПолученияДанныхБюджета("ПолучениеБюджета");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет заполнение обязательных параметров для построения дерева.
// 
// Параметры:
// 	ВыводитьСообщения - булево
// 
// Возвращаемое значение:
// 	ЗаполнениеВозможно - булево
// 
&НаКлиенте
Функция ЗаполнениеДереваВозможно(ВыводитьСообщения=Ложь)
	
	ЗаполнениеВозможно = Истина;
	
	ТекстСообщения = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.НастройкаФормы) Тогда
		
		ТекстСообщения =  НСтр("ru = 'Не заполнена настройка формы ввода.'");	
		
		ЗаполнениеВозможно = Ложь;	
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодПланирования.ДатаНачала) Тогда
	
		ТекстСообщения = ТекстСообщения+?(ПустаяСтрока(ТекстСообщения),"",Символы.ПС)+ НСтр("ru = 'Не указано ""Начало планирования"".'");	
		
		ЗаполнениеВозможно = Ложь;	
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ПериодПланирования.ДатаОкончания) 
		И Объект.ПериодПланирования.ДатаОкончания < Объект.ПериодПланирования.ДатаНачала Тогда
	
		ТекстСообщения = ТекстСообщения+?(ПустаяСтрока(ТекстСообщения),"",Символы.ПС)+ НСтр("ru = 'Не верно указан интервал планирования. Дата окончания предшествует дате начала!'");	
		
		ЗаполнениеВозможно = Ложь;	
	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		ТекстСообщения = ТекстСообщения+?(ПустаяСтрока(ТекстСообщения),"",Символы.ПС)+ НСтр("ru = 'Не указана периодичность планирования'");
		ЗаполнениеВозможно = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодПланирования.ДатаОкончания) Тогда
		ТекстСообщения = ТекстСообщения+?(ПустаяСтрока(ТекстСообщения),"",Символы.ПС)+ НСтр("ru = 'Не заполнена дата окончания периода'");
		ЗаполнениеВозможно = Ложь;
	КонецЕсли;
	
	Если НЕ ЗаполнениеВозможно Тогда
		
		ТекстСообщения = ТекстСообщения+Символы.ПС+ НСтр("ru = 'Заполнение невозможно!'");
		Если ВыводитьСообщения Тогда
		
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаполнениеВозможно;
	
КонецФункции

// Функция выводит вопрос о возможности продолжения с очисткой данных.
// 
// Возвращаемое значение:
//  флПродолжить - Булево.
// 
&НаКлиенте
Функция ЗадатьВопросОбОчисткеДанных(ОповещениеИстина, ОповещениеЛожь=Неопределено) 
	
	Если Объект.БДДС.Количество()>0 Тогда
		
		СтруктураОповещений = Новый Структура("ОповещениеИстина, ОповещениеЛожь", ОповещениеИстина, ОповещениеЛожь);
		
		Оповещение = Новый ОписаниеОповещения("ЗадатьВопросОбОчисткеДанныхОкончание", ЭтотОбъект, СтруктураОповещений);
		ТекстВопроса =  НСтр("ru = 'Данные будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеИстина);
		
	КонецЕсли;	
	
КонецФункции // ЗадатьВопросОбОчисткеДанных()

// Процедура окончание процедуры "ЗадатьВопросОбОчисткеДанных".
// 
&НаКлиенте 
Процедура ЗадатьВопросОбОчисткеДанныхОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеДанные.ОповещениеИстина);
		
	ИначеЕсли ДополнительныеДанные.ОповещениеЛожь <> Неопределено Тогда 	
		
		ВыполнитьОбработкуОповещения(ДополнительныеДанные.ОповещениеЛожь);
		
	КонецЕсли; 
                
КонецПроцедуры // ЗадатьВопросОбОчисткеДанныхОкончание()

// Устанвавливает заведомо несуществующий отбор табличной части БДДС. 
// 
&НаКлиенте
Процедура УстановитьНесуществующийОтборБДДС()
	
	// Устанавливаем заведомом несуществующий отбор, т.к. в таб. части документа не может быть больше 100000 строк.
	Элементы.БДДС_Редактирование.ОтборСтрок = Новый ФиксированнаяСтруктура("ИД",9999999);
	
КонецПроцедуры // УстановитьНесуществующийОтборБДДС()

// Процедура открывает обработку получения данных в различных режимах заполнения. 
// 
&НаКлиенте
Процедура ОткрытьОбработкуПолученияДанныхБюджета(РежимЗаполнения)

	флОткрытьПодбор = Истина;
	
	Если флОткрытьПодбор Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаДок"			, Объект.ПериодПланирования.ДатаНачала);
		ПараметрыФормы.Вставить("ДокументЗаполнения", Неопределено);
		ПараметрыФормы.Вставить("РежимЗаполнения"	, РежимЗаполнения);
		
		ПараметрыЗаполнения = Новый Структура;
		
		ПараметрыЗаполнения.Вставить("ВалютаДокумента"		, Объект.Валюта);
		ПараметрыЗаполнения.Вставить("КурсДокумента"		, Объект.Курс);
		ПараметрыЗаполнения.Вставить("КратностьДокумента"	, Объект.Кратность);
		ПараметрыЗаполнения.Вставить("ВалютаОбработки"		, Объект.Валюта);
		ПараметрыЗаполнения.Вставить("КурсОбработки"		, Объект.Курс);
		ПараметрыЗаполнения.Вставить("КратностьОбработки"	, Объект.Кратность);
		ПараметрыЗаполнения.Вставить("ПериодичностьСдвигаДат", Объект.Периодичность);
		ПараметрыЗаполнения.Вставить("СтандартныйПериод"	, Объект.ПериодПланирования);
		ПараметрыЗаполнения.Вставить("ЕдиницаИзмеренияСуммДокумента", ПредопределенноеЗначение("Перечисление.бит_ЕдиницыИзмеренияСумм.Единицы"));
		
		ПараметрыФормы.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		
		СтруктураОтбора = ПодготовитьСтруктуруОтбораДанныхБюджета();
		
		ПараметрыФормы.Вставить("СтруктураОтбора", СтруктураОтбора);
		
		ОткрытьФорму("Обработка.бит_ПолучениеДанныхБюджета.Форма", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли; 

КонецПроцедуры // ОткрытьОбработкуПолученияДанныхБюджета()

// Определяет, что активна ячейка для ввода значения.
// 
// Возвращаемое значение:
//  флЭтоРедактируемаяЯчейка - Булево.
// 
&НаКлиенте
Функция АктивнаРедактируемаяЯчейка()
	
	флЭтоРедактируемаяЯчейка = Ложь;
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблМакета.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
			  И ОблМакета.Расшифровка.Вид = "Значение" Тогда
			
			флЭтоРедактируемаяЯчейка = Истина;
			
		КонецЕсли;	// ИмяКласса подходит
		
	КонецЕсли; // ОблМакета подходит
	
	Возврат флЭтоРедактируемаяЯчейка;
	
КонецФункции // АктивнаРедактируемаяЯчейка()

// Обновляет значение в ячейке дерева данных по данным, установленным в табличной части. 
// 
// Параметры:
//  Обл - ТабличныйДокумент
//  Расшифровка - Структура
// 
&НаКлиенте
Процедура ОбновитьЗначениеЯчейкиДерева(Обл, Расшифровка)
	
	// Копируем отбор из отбора строк
	СтрОтбор = Новый Структура;
	Для каждого КиЗ Из Элементы.БДДС_Редактирование.ОтборСтрок Цикл
		
		СтрОтбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
		
	КонецЦикла; 
	
	// Вычисляем итог для данного отбора
	МассивСтрок = Объект.БДДС.НайтиСтроки(СтрОтбор);
	
	Ит = 0;
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		Ит = Ит+СтрокаТаблицы[Расшифровка.ИмяРесурса];
		
	КонецЦикла; 
	
	// Устанавливаем в дерево
	Обл.Значение = Ит;
	
	бит_БюджетированиеКлиентСервер.ВычислитьЗависимыеФормулы(ТабДокДанные, фЗависимостиЯчеек, Обл.Имя);	
	
КонецПроцедуры // ОбновитьЗначениеЯчейкиДерева()

// Процедура обновляет парную ячейку (Количество для Сумма, Сумму для Количества) в дереве.
// 
&НаКлиенте
Процедура ОбновитьПарнуюЯчейки(Обл)
	
	// Возможно следует обновить значение парной ячейки.
	Если ИспользуютсяДвеЯчейки() Тогда
		
		ИмяПарн = бит_БюджетированиеКлиент.ИмяВторойЯчейки(Обл.Имя);
		ОблПарн = ТабДокДанные.Области.Найти(ИмяПарн);
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблПарн) 
			И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблПарн.Расшифровка, "РасшифровкаЯчейкиФормыВвода") Тогда
			
			ОбновитьЗначениеЯчейкиДерева(ОблПарн, ОблПарн.Расшифровка);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ОбновитьПарнуюЯчейки()

// Функция определяет, используются ли обе ячейки в табличном документе.
// 
// Возвращаемое значение:
//  флИспользуются - Булево.
// 
&НаКлиенте
Функция ИспользуютсяДвеЯчейки()
	
	флИспользуются = фКэшЗначений.НастройкиФормы.УчетСумма И фКэшЗначений.НастройкиФормы.УчетКоличество;	
	
	Возврат флИспользуются;
	
КонецФункции // ИспользуютсяДвеЯчейки()

// Обрабатывает изменение ячейки данных дерева данных. 
// 
// Параметры:
//  Обл - ОбластьЯчеекТабличногоДокумента.
// 
&НаКлиенте
Процедура ИзменениеСодержимогоОбласти(Обл)
	
	расш = Обл.Расшифровка;
	
	Если расш.Вид = "Значение" Тогда
		
		СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(расш);
		
		МассивСтрок = Объект.БДДС.НайтиСтроки(СтрОтбор);
		
		Если Обл.Значение = 0 Тогда
			
			// Удаляем строки по данной комбинации измерений.
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				
				Объект.БДДС.Удалить(СтрокаТаблицы);
				
			КонецЦикла; // МассивСтрок 
			
		Иначе	
			
			Если МассивСтрок.Количество() = 0 Тогда
				
				// Создаем новую строку
				СоздатьНовуюСтрокуБюджета_Клиент(расш, Обл.Значение);
				
			ИначеЕсли МассивСтрок.Количество() = 1
				И НЕ ЗначениеЗаполнено(МассивСтрок[0].ДокументПланирования) Тогда	
				
				// Изменяем значение строки
				ТекСтрока = МассивСтрок[0];
				ТекСтрока[расш.ИмяРесурса] = Обл.Значение;
				
				бит_БюджетированиеКлиентСервер.ПроверитьПоляВСтроке(ТекСтрока, фКэшЗначений.НастройкиСтатей);
				
			Иначе
				
				// Восстанавливаем предыдущее значение
				Ит = 0;
				Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				
					Ит = Ит + СтрокаТаблицы[расш.ИмяРесурса];
				
				КонецЦикла; 
				Обл.Значение = Ит;
				
			КонецЕсли; 
			
		КонецЕсли;  // Обл.Значение = 0
		
		Модифицированность = Истина;
		
		// Значения могли быть очищены, поэтому обновляем значения ячейки по данным табличной части.
		ОбновитьЗначениеЯчейкиДерева(Обл, расш);
		// Обновляем парную ячейку
		ОбновитьПарнуюЯчейки(Обл);
		
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеСодержимогоОбласти()

// Процедура создает и заполняен новую строку табличной части БДДС на клиенте. 
// Серверный вызов возникает, только при работе механизма норм.
// 
// Параметры:
//  Расшифровка - Структура.
//  НовоеЗначение - Число.
// 
&НаКлиенте
Процедура СоздатьНовуюСтрокуБюджета_Клиент(Расшифровка, НовоеЗначение)

	НоваяСтрока = Объект.БДДС.Добавить();
	
	// Установка ИД строки
	УстановитьИД_БДДС_Клиент(НоваяСтрока);	
	
	// Заполнение аналитики
	ЗаполнитьНовуюСтрокуБюджетаСервер(НоваяСтрока.ПолучитьИдентификатор(), Расшифровка);
	
	// Заполнение ресурсов
	НоваяСтрока[Расшифровка.ИмяРесурса] = НовоеЗначение;
	
	// Проверка возможности заполнения полей в строке в зависимости от статьи оборотов.
	ИзмеренияРазворачивать = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать")];
	флУдаленоКлючевоеПоле  = бит_БюджетированиеКлиентСервер.ПроверитьПоляВСтроке(НоваяСтрока,фКэшЗначений.НастройкиСтатей, фКэшЗначений.ИзмеренияВсе, ИзмеренияРазворачивать); 	
	
	Если флУдаленоКлючевоеПоле Тогда
		
        бит_БюджетированиеКлиентСервер.ВывестиСообщениеОНесоответствииСтатьи(НоваяСтрока.СтатьяОборотов);		
		// Необходимо удалить строку, потому что к ней не будет доступа, т.к. отбор в табличном поле 
		// редактирования осуществляется по измерениям со способом заполнения Разворачивать.
		Объект.БДДС.Удалить(НоваяСтрока);
		
	Иначе	
		
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьНовуюСтрокуБюджета_Клиент()

// Процедура устанавливает ид строки на клиенте. 
// 
// Параметры:
//  ТекущаяСтрока - Строка.
// 
&НаКлиенте
Процедура УстановитьИД_БДДС_Клиент(ТекущаяСтрока)

	ТекущаяСтрока.ИД = ТекИдБДДС;
	ТекИдБДДС = ТекИдБДДС + 1;

КонецПроцедуры // УстановитьИД_БДДС()

// Устанавливает значение флажка в нужное состояние в дереве. Вызывается рекурсивно.
// 
// Параметры:
// 	ЭлементыДерева - ДанныеФормыДерево.
// 	ЗначениеФлажка - булево.
// 
&НаКлиенте
Процедура ИзменитьФлажкиДерево(ЭлементыДерева, ЗначениеФлажка)
	
	Для Каждого ТекущаяВетка Из ЭлементыДерева Цикл
		
		ТекущаяВетка.Выполнять = ЗначениеФлажка;
		
		ИзменитьФлажкиДерево(ТекущаяВетка.ПолучитьЭлементы(), ЗначениеФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура настраивает флаги для родительских строк. Вызывается рекурсивно.
// 
// Параметры:
// 	
&НаКлиенте
Процедура ИзменитьФлажкиРодителей(ВеткаРодитель, ЗначениеФлажка)
	
	Если ВеткаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = ВеткаРодитель.ПолучитьЭлементы();
	
	СостояниеРодителя = ЗначениеФлажка;
	
	Для Каждого ТекущаяВетка Из ЭлементыРодителя Цикл
		Если НЕ ТекущаяВетка.Выполнять = ЗначениеФлажка Тогда
			СостояниеРодителя = 2;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВеткаРодитель.Выполнять = СостояниеРодителя;
	
	ИзменитьФлажкиРодителей(ВеткаРодитель.ПолучитьРодителя(), ЗначениеФлажка);
	
КонецПроцедуры

// Функция проверяет заполнение значений по умолчанию для подстановки в документы планирования.
// 
&НаКлиенте
Функция ЗначенияПоУмолчаниюЗаполнены()
	
	Заполнено = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ТекстСообщения = НСтр("ru='Не заполнен сценарий'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,, "Объект.Сценарий");
		
		Заполнено = Ложь;
	КонецЕсли;
	
	Если НЕ Заполнено Тогда
		ТекстСообщения = НСтр("ru='Создание документов планирования невозможно!'");
		бит_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат Заполнено;
	
КонецФункции

&НаКлиенте
Функция НеЗаполненВидОперацииИФормаОплаты(РежимСоздания)
	
	ЗадатьВопрос = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИсточникСтроки", 0);
	
	ТаблицаСтрок = Объект.БДДС.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекСтрока Из ТаблицаСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ФормаОплаты) Тогда
			ТекстСообщения = НСтр("ru='Не заполнена форма оплаты в строке данных №%1%'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,ТекСтрока.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЗадатьВопрос);
		КонецЕсли;
		
		Если ТекСтрока.НаправлениеСтатьи = ПредопределенноеЗначение("Перечисление.бит_РасходДоход.Расходование")
			И РежимСоздания = "ДокументыПланирования" Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ВидОперации) Тогда
				ТекстСообщения = НСтр("ru='Не заполнен вид операции в строке данных №%1%'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,ТекСтрока.НомерСтроки);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЗадатьВопрос);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗадатьВопрос;
			
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ТабДокДанные.ТолькоПросмотр = НЕ РежимОтображения_ПоБюджету;
	
КонецПроцедуры

// Процедура устанавливает заголовок формы.
// 
&НаКлиенте
Процедура УстановитьЗаголовокФормы()

	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = фКэшЗначений.ЗаголовокФормы+" ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтаФорма.Заголовок = фКэшЗначений.ЗаголовокФормы;
		
	КонецЕсли; 

КонецПроцедуры // УстановитьЗаголовокФормы()

&НаКлиенте
Процедура ОбработкаПодбораБюджета(ВыбранноеЗначение)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИсточникСтроки", 0); // Строки по бюджету.
	
	СтрКурсаОбработки = Новый Структура;
	СтрКурсаОбработки.Вставить("Валюта"   , ВыбранноеЗначение.Валюта);
	СтрКурсаОбработки.Вставить("Курс"	  , ВыбранноеЗначение.Курс);
	СтрКурсаОбработки.Вставить("Кратность", ВыбранноеЗначение.Кратность);
	
	МассивСтрок = Объект.БДДС.НайтиСтроки(СтруктураОтбора);
	
	Если ВыбранноеЗначение.Режим = "Заполнить" 
		И МассивСтрок.Количество() > 0 Тогда 
		
		// В режиме заполнения существующие данные следует очистить.
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СтрКурсаОбработки", СтрКурсаОбработки);
		ДопПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		бит_РаботаСДиалогамиКлиент.ЗапросПодтвержденияОчисткиДанных(ЭтотОбъект, ДопПараметры);
		
	Иначе
		
		ЗаполнитьТабЧастьДаннымиБюджета(ВыбранноеЗначение, Ложь, СтрКурсаОбработки);
		
	КонецЕсли; // Режим заполнения
	
КонецПроцедуры

// Функция обращается к процедуре модуля объекта для инициализации СКД и пользовательских настроек.
// 
// Параметры:
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - пользовательские настройки.
// 
// Возвращаемое значение:
// 	АдресСКД - строка - адрес СКД во временном хранилище.
// 
&НаСервере
Функция ИнициализироватьКомпоновщикСервер(пКомпоновщик)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	АдресСКД = ОбработкаОбъект.ИнициализироватьКомпоновщик(пКомпоновщик);
	
	Возврат АдресСКД;
	     
КонецФункции

// Процедура заполняет значения, необходимые на клинте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_ВидыОперацийЗаявкаНаРасходование", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование));
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	фКэшЗначений.Вставить("НастраиваемыйОбъект", Метаданные.Обработки.бит_РабочееМестоОперативногоПланированияДДС.ПолноеИмя());
	фКэшЗначений.Вставить("ТипНастройки"       , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("ЗаголовокФормы"     , НСтр("ru='Рабочее место оперативного планирования ДДС'"));
	
	фКэшЗначений.Вставить("ИзмеренияДоп", бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним"));
	фКэшЗначений.Вставить("ИзмеренияВсе", бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","синоним"));
	фКэшЗначений.Вставить("НастройкиИзмерений" , бит_Бюджетирование.НастройкиИзмеренийБюджетирования()); 
	фКэшЗначений.Вставить("НастройкиФормы"     , Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Объект.НастройкаФормы));
	фКэшЗначений.Вставить("ТекущийПользователь", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));	
	фКэшЗначений.Вставить("ВидСравненияРавно"  , ВидСравнения.Равно);
	
	фКэшЗначений.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	// Параметры, используемые для управления автовидимостью колонок.
	фКэшЗначений.Вставить("НастройкаВидимостиКолонок"	 , Новый Структура);
	фКэшЗначений.Вставить("МассивСтатей_БДДС"			 , Новый Массив);
	
	фКэшЗначений.Вставить("СтруктураДопПолей", Новый Структура("Учет_Сумма, Учет_Количество", "Норма","Норма"));
	
	фКэшЗначений.Вставить("НастройкиСтатей", Новый Соответствие);
	
	фКэшЗначений.Вставить("ЗаявкаНаРасходованиеДСПустая", Документы.бит_ЗаявкаНаРасходованиеСредств.ПустаяСсылка());
	
	СоответствиеРежимов = Новый Соответствие;
	СоответствиеРежимов.Вставить("РежимОтображения_ПоБюджету"				, 0);
	СоответствиеРежимов.Вставить("РежимОтображения_ПоДокументамПланирования", 1);
	СоответствиеРежимов.Вставить("РежимОтображения_Сумма"					, 2);
	СоответствиеРежимов.Вставить("РежимОтображения_Разность"				, 3);
	
	фКэшЗначений.Вставить("РежимыОтображения", СоответствиеРежимов);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Очищает таблицы данных и дерево данных. 
// 
&НаСервере
Процедура ОчиститьВсе()

	ТабДокДанные.Очистить();
	
	ОчиститьТаблицы();

КонецПроцедуры // ОчиститьВсе()

// Процедура очищает табличные части ЗависимыеОбороты и БДДС.
// 
&НаСервере
Процедура ОчиститьТаблицы()

	Объект.БДДС.Очистить();

КонецПроцедуры // ОчиститьТаблицы()

// Процедура восстанавливает отбор из хранилища значения.
// 
// Параметры:
//  СохраненнаяНастройка - Структура.
// 
&НаСервере
Процедура ВосстановитьОтбор(СохраненнаяНастройка)

	Если СохраненнаяНастройка.Свойство("НастройкиКомпоновщика") 
		И ТипЗнч(СохраненнаяНастройка.НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных")  Тогда
		
		Если СохраненнаяНастройка.НастройкиКомпоновщика.Отбор.Элементы.Количество() > 0 Тогда
			
			Объект.Компоновщик.ЗагрузитьНастройки(СохраненнаяНастройка.НастройкиКомпоновщика);
			
		КонецЕсли;  
		
	Иначе
		
		// Если сохранена еще старая настройка выполним конвертацию отбора построителя в отбор компоновщика.
		бит_МеханизмПолученияДанных.КонвертацияОтборПостроителяОтборКомпоновщика(СохраненнаяНастройка, Объект.Компоновщик, Объект.ТекстЗапроса);
		
	КонецЕсли; 
	
КонецПроцедуры // ВосстановитьОтбор()

// Выполняет обновление дерева данных. 
// 
&НаСервере
Процедура ОбновитьДеревоДанных(ОчищатьТаблицы)
	
	// Очистим таблицу с данными
	Если ОчищатьТаблицы Тогда
		
		ОчиститьТаблицы();
		
	КонецЕсли; 
	
	ПараметрыОбновленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
	ПараметрыОбновленияДерева.АдресКомпоновки			= АдресКомпоновки;
	ПараметрыОбновленияДерева.НастройкиКомпоновщика		= Объект.Компоновщик.ПолучитьНастройки();
	ПараметрыОбновленияДерева.Периодичность				= Объект.Периодичность;
	ПараметрыОбновленияДерева.ПродолжительностьИнтервала= бит_Бюджетирование.РазностьДат(Объект.ПериодПланирования.ДатаНачала,
																							Объект.ПериодПланирования.ДатаОкончания,
																							Объект.Периодичность)+1;
	ПараметрыОбновленияДерева.ДатаНачалаПланирования	= Объект.ПериодПланирования.ДатаНачала;
	ПараметрыОбновленияДерева.ДатаОкончанияПланирования = Объект.ПериодПланирования.ДатаОкончания;
	
	Документы.бит_ФормаВводаБюджета.ОбновитьДеревоДанных(ТабДокДанные, Объект.НастройкаФормы, Объект.ТекстЗапроса, ПараметрыОбновленияДерева);
	
	МассивСтатей = ИзвлечьСтатьиИзДерева(ТабДокДанные);
	фКэшЗначений.НастройкиСтатей = Новый Соответствие;	
    бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(МассивСтатей, фКэшЗначений.НастройкиСтатей);
	
	фЗависимостиЯчеек = бит_БюджетированиеКлиентСервер.ПолучитьЗависимостиЯчеек(ТабДокДанные);
	
	ИменаТаблиц = Новый Массив;  
	ИменаТаблиц.Добавить("БДДС");
	ИменаТаблиц.Добавить("БДДС_Редактирование");
	ОФормитьТаблицу("БДДС", ИменаТаблиц, МассивСтатей);
	
	УправлениеВидимостьюКолонокТаблиц();
	
	// Изменение кода. Начало. 24.03.2015{{
	Если РежимОткрытияОбработки = "КопированиеДанных" Тогда
	
		// Добавим данные по документам планирования и из формы ввода бюджета.
		ПолучитьДанныеДокументаВладельца();
		
		ЗаполнитьТабЧастьДаннымиДокументовПланирования(Ложь, МассивСтатей);
	
	КонецЕсли; 
	// Изменение кода. Конец. 24.03.2015}}
	
	ВосстановитьДерево(Истина, Истина);
	
КонецПроцедуры

// Функция создает документ-объект ФормаВводаБюджета, чтобы можно было воспользоваться
// 	его методами по формированию дерева данных.
// 
// Параметры:
// 	нет
// 
// Возвращаемое значение:
// 	ДокОб - ДокументОбъект.бит_ФормаВводаБюджета.
// 
&НаСервере
Функция ПолучитьОбъектФормыВвода()
	
	ДокОб = Документы.бит_ФормаВводаБюджета.СоздатьДокумент();
	
	ДокОб.ДатаНачалаПланирования	= Объект.ПериодПланирования.ДатаНачала;
	ДокОб.ДатаОкончанияПланирования = Объект.ПериодПланирования.ДатаОкончания;
	
	Возврат ДокОб;
	
КонецФункции

// Восстанавливает дерево данных по табличным частям. 
// 
&НаСервере
Процедура ВосстановитьДерево(ВыводитьСообщения = Ложь, УдалятьЛишниеСтроки = Ложь, ОбновитьДерево=Ложь)
	
	ДокОб = ПолучитьОбъектФормыВвода();
	
	ПараметрыВосстановленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
	ПараметрыВосстановленияДерева.ВыводитьСообщения			= ВыводитьСообщения;
	ПараметрыВосстановленияДерева.АдресКомпоновки			= АдресКомпоновки;
	ПараметрыВосстановленияДерева.НастройкиКомпоновщика		= Объект.Компоновщик.ПолучитьНастройки();
	ПараметрыВосстановленияДерева.ОбновитьДерево			= ОбновитьДерево;
	ПараметрыВосстановленияДерева.УдалитьЛишнее				= УдалятьЛишниеСтроки;
	ПараметрыВосстановленияДерева.Периодичность				= Объект.Периодичность;
	ПараметрыВосстановленияДерева.ПродолжительностьИнтервала= бит_Бюджетирование.РазностьДат(
																Объект.ПериодПланирования.ДатаНачала, 
																Объект.ПериодПланирования.ДатаОкончания,
																Объект.Периодичность)+1;
	Если РежимОтображения_ПоБюджету
		ИЛИ РежимОтображения_ПоДокументамПланирования Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИсточникСтроки", фКэшЗначений.РежимыОтображения[ПолучитьАктивныйРежимОтображения()]);
		
		ТабДанные = Объект.БДДС.Выгрузить(СтруктураОтбора);
		
	ИначеЕсли РежимОтображения_Разность Тогда // Разница между оборотами по бюджету и документами планирования.
		
		ТабДанные = Объект.БДДС.Выгрузить();
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИсточникСтроки", 1);
		
		МассивСтрок = ТабДанные.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			
			Если ТекСтрока.ИсточникСтроки = 1 Тогда
				ТекСтрока.Сумма      = -ТекСтрока.Сумма;
				ТекСтрока.Количество = -ТекСтрока.Количество;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТабДанные = Объект.БДДС.Выгрузить();
		
	КонецЕсли;
	
	// Изменение кода. Начало. 05.03.2018{{
	Идентификатор = Новый УникальныйИдентификатор();
	АдресХранилищаДанных = Документы.бит_ФормаВводаБюджета.ЗаполнитьТаблицуДанных(ТабДокДанные, Идентификатор);
	
	// Сначала обработаем все имеющиеся строки и удалим лишние
	// это необходимо, чтобы при переключении режима отображения не было сообщений, что не найдена ячейка дерева.
	Если УдалятьЛишниеСтроки Тогда
		ДокОб.БДДС.Загрузить(Объект.БДДС.Выгрузить());
		ДокОб.ВосстановитьДеревоПоДанным(АдресХранилищаДанных,Идентификатор, ТабДокДанные, Объект.НастройкаФормы, Объект.ТекстЗапроса, ПараметрыВосстановленияДерева);
		// Использовать метод Загрузить нельзя, т.к. в ФормеВвода нет дополнительных колонок присутствующих в обработке.
		УдалитьЛишниеСтроки(ДокОб);
	КонецЕсли;
	
	// Теперь покажем только те суммы которые выбрали с помощью режима отображения.
	ДокОб.БДДС.Загрузить(ТабДанные);
	ДокОб.ВосстановитьДеревоПоДанным(АдресХранилищаДанных,Идентификатор, ТабДокДанные, Объект.НастройкаФормы, Объект.ТекстЗапроса, ПараметрыВосстановленияДерева);
	// Изменение кода. Конец. 05.03.2018}}
	
КонецПроцедуры // ВосстановитьДерево()

&НаСервере
Процедура УдалитьЛишниеСтроки(ДокОб)
	
	МассивИД = ДокОб.БДДС.ВыгрузитьКолонку("ИД");
	МассивКУдалению = Новый Массив;
	Для Каждого ТекСтрока Из Объект.БДДС Цикл
		НайденнаяСтрока = МассивИД.Найти(ТекСтрока.ИД);
		Если НайденнаяСтрока = Неопределено Тогда
			МассивКУдалению.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивКУдалению Цикл
		Объект.БДДС.Удалить(ТекЭлемент);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает ид строки на сервере. 
// 
// Параметры:
//  ТекущаяСтрока - Строка.
// 
&НаСервере
Процедура УстановитьИД_БДДС_Сервер(ТекущаяСтрока)

	ТекущаяСтрока.ИД = ТекИдБДДС;
	ТекИдБДДС = ТекИдБДДС + 1;

КонецПроцедуры // УстановитьИД_БДДС()

&НаСервере
Процедура ЗаполнитьНовуюСтрокуБюджетаСервер(ИДСтроки, Расшифровка)
	
	НоваяСтрока = Объект.БДДС.НайтиПоИдентификатору(ИДСтроки);
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение аналитики
	// не будем передавать измерения, т.к. в обработке нет возможности указать общие значения в шапке.
	бит_БюджетированиеКлиентСервер.ЗаполнитьНовуюСтрокуБюджета(Объект, НоваяСтрока, Расшифровка.Период, Расшифровка.Измерения, Новый Структура);

	НоваяСтрока.ВидОперации = НоваяСтрока.СтатьяОборотов.ВидОперации;
	НоваяСтрока.ФормаОплаты = НоваяСтрока.СтатьяОборотов.ФормаОплаты;
	НоваяСтрока.НаправлениеСтатьи = НоваяСтрока.СтатьяОборотов.РасходДоход;
	
КонецПроцедуры

// Процедура добавляет в таблицу БДДС данные выбранные с помощью обработки ПолучениеДанныхБюджета.
// 
&НаСервере
Процедура ЗаполнитьТабЧастьДаннымиБюджета(ВыбранноеЗначение, ОчищатьДанные, СтрКурсаОбработки)
	
	Если ОчищатьДанные Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИсточникСтроки", 0);
		
		МассивСтрок = Объект.БДДС.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			Объект.БДДС.Удалить(ТекСтрока);
		КонецЦикла;
	
	КонецЕсли; 
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресОборотовПоБюджетам);
	флИспользоватьЗначенияПоУмолчанию = ВыбранноеЗначение.ИспользоватьЗначенияПоУмолчанию;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого СтрокаТаблицы Из ДанныеЗаполнения Цикл
			
			НоваяСтрока = Объект.БДДС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			УстановитьИД_БДДС_Сервер(НоваяСтрока);
			
			НоваяСтрока.Период     = СтрокаТаблицы.ПериодДляЗаполнения;
			НоваяСтрока.Количество = СтрокаТаблицы.КоличествоДляЗаполнения;
			НоваяСтрока.ВидОперации = СтрокаТаблицы.СтатьяОборотов.ВидОперации;
			НоваяСтрока.ФормаОплаты = СтрокаТаблицы.СтатьяОборотов.ФормаОплаты;
			НоваяСтрока.НаправлениеСтатьи = СтрокаТаблицы.СтатьяОборотов.РасходДоход;
			НоваяСтрока.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСценарийВВалютеДокумента,
																			СтрКурсаОбработки.Валюта,
																			Объект.Валюта,
																			СтрКурсаОбработки.Курс,
																			Объект.Курс,
																			СтрКурсаОбработки.Кратность,
																			Объект.Кратность);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	УстановитьФлажкиРежимаОтображения("РежимОтображения_ПоБюджету"); // Отображаем данные по бюджету
	
	ВосстановитьДерево(Истина, Истина, Истина);
	
КонецПроцедуры

// Процедура заполняет таблицу БДДС данными по документам планирования 
// 	и по документу ФормаВводаБюджета.
// 
// Параметры:
// 	нет.
// 
&НаСервере
Процедура ЗаполнитьТабЧастьДаннымиДокументовПланирования(пВосстановитьДерево=Истина, МассивСтатей=Неопределено)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресКомпоновкиДокПланирования);
	
	ПараметрыСКД = Объект.КомпоновщикДокПланирования.Настройки.ПараметрыДанных;
	
	ДатаОкончания = ?(Объект.ПериодПланирования.ДатаОкончания=Дата("00010101"), Дата("20990101"), Объект.ПериодПланирования.ДатаОкончания);
	
	Если МассивСтатей = Неопределено Тогда
		МассивСтатей = ИзвлечьСтатьиИзДерева(ТабДокДанные);
	КонецЕсли;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("ДатаНачала"	, Объект.ПериодПланирования.ДатаНачала);
	ПараметрыСКД.УстановитьЗначениеПараметра("ДатаОкончания", ДатаОкончания);
	ПараметрыСКД.УстановитьЗначениеПараметра("МассивСтатей"	, МассивСтатей);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиСКД = Объект.КомпоновщикДокПланирования.ПолучитьНастройки(); 
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
												НастройкиСКД,
												,
												,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаПереченьДокументов = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаПереченьДокументов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Удалим присутствующие строки по документам планирования.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИсточникСтроки", 1);
	
	МассивСтрок = Объект.БДДС.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		Объект.БДДС.Удалить(ТекСтрока);
	КонецЦикла;
	
	// Изменение кода. Начало. 24.03.2015{{
	Если ЗначениеЗаполнено(ДокументВладелец) Тогда
	
		ТаблицаЦФО = ДокументВладелец.БДДС.Выгрузить();
		ТаблицаЦФО.Свернуть("ЦФО");
	
	КонецЕсли; 
	// Изменение кода. Конец. 24.03.2015}}
	
	// И добавляем данные по документам планирования.
	Для Каждого ТекДокумент Из ТаблицаПереченьДокументов Цикл
		
		// Изменение кода. Начало. 24.03.2015{{
		Если ЗначениеЗаполнено(ДокументВладелец) Тогда
			стрОтб = Новый Структура("ЦФО", ТекДокумент.ЦФО);
			МассивСтрок = ТаблицаЦФО.НайтиСтроки(стрОтб);
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;	
		// Изменение кода. Конец. 24.03.2015}}
		
		НоваяСтрока = Объект.БДДС.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДокумент);
		УстановитьИД_БДДС_Сервер(НоваяСтрока); 
		
		НоваяСтрока.ИсточникСтроки = 1;
		НоваяСтрока.Период = бит_Бюджетирование.ПолучитьНачалоПериода(ТекДокумент.ДатаРасхода,Объект.Периодичность);
		НоваяСтрока.Количество = 0;
		
		СтрКурс = бит_КурсыВалют.ПолучитьКурсВалюты(Объект.Валюта, ТекущаяДатаСеанса());
		НоваяСтрока.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекДокумент.Сумма,
																			ТекДокумент.ВалютаДокумента,
																			Объект.Валюта,
																			ТекДокумент.КурсДокумента,
																			СтрКурс.Курс,
																			ТекДокумент.КратностьДокумента,
																			СтрКурс.Кратность);
		
	КонецЦикла;
	
	Если пВосстановитьДерево Тогда
		ВосстановитьДерево(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеДокументаВладельца()
	
	// Если открыли из формы ввода, то берем данные оттуда.
	Если НЕ ЗначениеЗаполнено(ДокументВладелец)
		ИЛИ НЕ РежимОткрытияОбработки = "КопированиеДанных" Тогда
		
		Возврат;
	КонецЕсли;
	
	БДДСДокумента = ДокументВладелец.БДДС.Выгрузить();
	
	Для Каждого ТекСтрока Из БДДСДокумента Цикл
		НоваяСтрока = Объект.БДДС.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		НоваяСтрока.ВидОперации = ТекСтрока.СтатьяОборотов.ВидОперации;
		НоваяСтрока.ФормаОплаты = ТекСтрока.СтатьяОборотов.ФормаОплаты;
		НоваяСтрока.НаправлениеСтатьи = ТекСтрока.СтатьяОборотов.РасходДоход;
		
		СтрКурс = бит_КурсыВалют.ПолучитьКурсВалюты(Объект.Валюта, ТекущаяДатаСеанса());
		НоваяСтрока.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
																				ДокументВладелец.ВалютаДокумента,
																				Объект.Валюта,
																				ДокументВладелец.КурсДокумента,
																				СтрКурс.Курс,
																				ДокументВладелец.КратностьДокумента,
																				СтрКурс.Кратность);
	КонецЦикла;
	
КонецПроцедуры

// Процедура обрабатывает изменение настройки формы ввода.
// 
&НаСервере
Процедура ИзменениеНастройкиФормы()
	
	ОчиститьВсе();	
	
	Объект.ТекстЗапроса = Объект.НастройкаФормы.ТекстЗапроса;
	АдресКомпоновки = Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(Объект.ТекстЗапроса, Объект.Компоновщик, УникальныйИдентификатор);	
	
	фКэшЗначений.НастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Объект.НастройкаФормы);
	
	Если ЗначениеЗаполнено(Объект.НастройкаФормы) Тогда
		
		// Копирование отбора из настройки
		ОбНастройка   = Объект.НастройкаФормы.ПолучитьОбъект();
		СохрНастройка = ОбНастройка.ПолучитьНастройкиПостроителя();
		
		ВосстановитьОтбор(СохрНастройка);
		
	КонецЕсли; // ЗначениеЗаполнено(Объект.НастройкаФормы)
	
КонецПроцедуры // ИзменениеНастройкиФормы()

// Процедура обрабатывает изменение контрагента в табличной части документа.
// 
// Параметры:
//  ИдСтроки - Число.
//  ИмяТабЧасти - Строка.
// 
&НаСервере
Процедура ИзменениеКонтрагентаТЧ(ИдСтроки, ИмяТабЧасти)

	ТекущиеДанные = Объект[ИмяТабЧасти].НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	бит_РаботаСДиалогамиСервер.ПроверитьВладельцаДоговораКонтрагентаВСтроке(ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента);	

КонецПроцедуры // ИзменениеКонтрагентаТЧ()

// Процедура обрабатывает изменение договора контрагента в табличной части документа.
// 
// Параметры:
//  ИдСтроки - Число.
//  ИмяТабЧасти - Строка.
// 
&НаСервере
Процедура ИзменениеДоговораКонтрагентаТЧ(ИдСтроки, ИмяТабЧасти)
	
	ТекущиеДанные = Объект[ИмяТабЧасти].НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	бит_РаботаСДиалогамиСервер.ИзменениеДоговораКонтрагента(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
КонецПроцедуры // ИзменениеДоговораКонтрагентаТЧ()

// Управляет видимостью колонок табличных полей БДДС_Редактирование и ЗависимыеОбороты_Редактирование.
// 
&НаСервере
Процедура УправлениеВидимостьюКолонокТаблиц()

	Для каждого КиЗ Из фКэшЗначений.НастройкиФормы.Измерения Цикл
		
		Если КиЗ.Ключ = "Сценарий" Тогда
		
			Продолжить;
		
		КонецЕсли; 		
		
		ТекОписание = КиЗ.Значение;
		
		ИмяКолонки = "БДДС_Редактирование"+ТекОписание.Имя;
		Элементы[ИмяКолонки].Видимость = Истина;
	
	КонецЦикла; 
	
	// Скроем аналитики, которые заведомо не используются ни в одной статье в рамках формы ввода.
	локМассивСтатей = Новый Массив;
	Для каждого КиЗ Из фКэшЗначений.НастройкиСтатей Цикл
	
		локМассивСтатей.Добавить(КиЗ.Ключ);
	
	КонецЦикла; 
	локНастройкаВидимостиКолонок = Новый Структура;
	
	НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(локМассивСтатей
																		, Новый Массив
																		, локНастройкаВидимостиКолонок);
	
	
	бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				, локНастройкаВидимостиКолонок
											 				, "БДДС_Редактирование");
															
	// Скрываем в поле редактирования колонки, для которых установлен режим "Разворачивать" или "ПоУмолчанию".
	Для каждого КиЗ Из фКэшЗначений.НастройкиФормы.Измерения Цикл
		
		Если КиЗ.Ключ = "Сценарий" Тогда
		
			Продолжить;
		
		КонецЕсли; 		
		
		ТекОписание = КиЗ.Значение;
		флВидимость = ?(ТекОписание.СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать, Ложь, Истина);
						 
		Если Найти(ТекОписание.Имя,"Аналитика_")>0 Тогда
		
			Если фКэшЗначений.НастройкиИзмерений[ТекОписание.Имя] = Неопределено Тогда
				флВидимость = Ложь;
			КонецЕсли;	
		
		КонецЕсли; 				 
		
		Если НЕ флВидимость Тогда
			
			ИмяКолонки = "БДДС_Редактирование"+ТекОписание.Имя;
			Элементы[ИмяКолонки].Видимость = флВидимость;
			
		КонецЕсли; 
	
	КонецЦикла; 
															
	// Видимость нормы
	флЕстьКоличествоСумма = Объект.НастройкаФормы.Учет_Количество И Объект.НастройкаФормы.Учет_Сумма;
	
КонецПроцедуры // УправлениеВидимостьюКолонокТаблиц()

// формирует массив статей, которые присутствуют в дереве.
// 
// Параметры:
//  ТабДок - ТабличныйДокумент
// 
// Возвращаемое значение:
//  МассивСтатей - Массив.
// 
&НаСервере
Функция ИзвлечьСтатьиИзДерева(ТабДок)
	
	МассивСтатей = Новый Массив;
	
	Для каждого Обл Из ТабДок.Области Цикл
		
		Если Найти(Обл.Имя, "СтатьяОборотов_") > 0 Тогда
			
			Если ТипЗнч(Обл.Расшифровка.Значение) = Тип("СправочникСсылка.бит_СтатьиОборотов") 
				 И НЕ Обл.Расшифровка.Значение.ЭтоГруппа Тогда
				
				МассивСтатей.Добавить(Обл.Расшифровка.Значение);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТабВрем = Объект.БДДС.Выгрузить();
	ТабВрем.Свернуть("СтатьяОборотов");
	
	Для каждого СтрокаТаблицы Из ТабВрем Цикл
	
		МассивСтатей.Добавить(СтрокаТаблицы.СтатьяОборотов);
	
	КонецЦикла; 
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	
	Возврат МассивСтатей;
	
КонецФункции // ИзвлечьСтатьиИзДерева()

// Процедура оформляет табличное поле.
// 
// Параметры:
//  ПрефиксТаблицы 		- Строка.
//  МассивОформляемыхТаблиц - Массив.
//  вхМассивСтатей - Массив.
// 
&НаСервере
Процедура ОФормитьТаблицу(ПрефиксТаблицы, МассивОформляемыхТаблиц = Неопределено, вхМассивСтатей = Неопределено) 
	
	// ----------------------------------------------------------------------
	// Оформление реквизитов строк по статьям оборотов
	УдалитьСтароеОформление = Ложь;
	ПрефиксКонтейнера = "Объект.";
	
	Если вхМассивСтатей = Неопределено Тогда
	
		УдалитьСтароеОформление = Истина;
	
		// Формирование массива статей, по которым нужно добавить элементы УО.
		ТаблицаПоиска = Объект[ПрефиксТаблицы].Выгрузить();
		МассивСтатей = ТаблицаПоиска.ВыгрузитьКолонку("СтатьяОборотов");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		
		ЭтаФорма["фСписокСтатей" + ПрефиксТаблицы].ЗагрузитьЗначения(МассивСтатей);
		
	Иначе // Работаем только с массивом статей оборотов.
		
		МассивСтатей = Новый Массив; 		
		
		Для каждого ТекСтатья Из вхМассивСтатей Цикл
			
			НайденноеЗначение = ЭтаФорма["фСписокСтатей" + ПрефиксТаблицы].НайтиПоЗначению(ТекСтатья);
			Если НайденноеЗначение = Неопределено Тогда	
				
				МассивСтатей.Добавить(ТекСтатья);
				ЭтаФорма["фСписокСтатей" + ПрефиксТаблицы].Добавить(ТекСтатья);		
				
			КонецЕсли;  		
			
		КонецЦикла; 
		
		
	КонецЕсли;	
	
	бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление
	                                                             , МассивСтатей
																 , УдалитьСтароеОформление
																 , ПрефиксКонтейнера
																 , ПрефиксТаблицы
																 , ""
																 , фКэшЗначений.СтруктураДопПолей
																 , МассивОформляемыхТаблиц);
	
КонецПроцедуры // ОФормитьТаблицу()

// Функция получает таблицу данных по которым можно создать документы планирования.
// 
// Параметры:
// 	нет.
// 
// Возвращаемое значение:
// 	ТаблицаСтрок - ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьДанныеДляСозданияДокументовПланирования()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИсточникСтроки", 0);
	
	ТаблицаСтрок = Объект.БДДС.Выгрузить(СтруктураОтбора);
	
	ТаблицаСтрок.Колонки.Добавить("Организация"			, Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСтрок.Колонки.Добавить("ТипСтатьи"			, Новый ОписаниеТипов("ПеречислениеСсылка.бит_ТипыСтатейОборотов"));
	ТаблицаСтрок.Колонки.Добавить("ОрганизацияДоговора" , Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСтрок.Колонки.Добавить("ВалютаДоговора"		, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаСтрок.Колонки.Добавить("ДоговорРасчетыВУЕ"	, Новый ОписаниеТипов("Булево"));
	
	// Получим организации по ЦФО
	МассивЦФО = ТаблицаСтрок.ВыгрузитьКолонку("ЦФО");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивЦФО);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ЦФО_Организаций.Организация,
	|	бит_ЦФО_Организаций.ЦФО
	|ИЗ
	|	РегистрСведений.бит_ЦФО_Организаций КАК бит_ЦФО_Организаций
	|ГДЕ
	|	бит_ЦФО_Организаций.ЦФО В(&МассивЦФО)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ЦФО_Организаций.Организация,
	|	бит_ЦФО_Организаций.ЦФО";
	
	Запрос.УстановитьПараметр("МассивЦФО", МассивЦФО);
	
	Результат = Запрос.Выполнить();
	ТаблицаЦФООрганизаций = Результат.Выгрузить();
	
	Для Каждого ТекущаяСтрока Из ТаблицаСтрок Цикл
		ТекущаяСтрока.ТипСтатьи			= ТекущаяСтрока.СтатьяОборотов.ТипСтатьи;
		ТекущаяСтрока.НаправлениеСтатьи = ТекущаяСтрока.СтатьяОборотов.РасходДоход;
		ТекущаяСтрока.ОрганизацияДоговора = ТекущаяСтрока.ДоговорКонтрагента.Организация;
		ТекущаяСтрока.ВалютаДоговора	= ТекущаяСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ТекущаяСтрока.ДоговорРасчетыВУЕ = ТекущаяСтрока.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
		
		НайденноеСоответствие = ТаблицаЦФООрганизаций.Найти(ТекущаяСтрока.ЦФО, "ЦФО");
		Если НЕ НайденноеСоответствие = Неопределено Тогда
			ТекущаяСтрока.Организация = НайденноеСоответствие.Организация;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСтрок;
	
КонецФункции

// Процедура проверяет наличие необходимых данных в таблице для создания
// 	документов планирования.
// 
// Параметры:
// 	ТаблицаСтрок - ТаблицаЗначений.
// 	Отказ - булево.
// 
&НаСервере
Процедура ПроверитьЗаполнениеТаблицыСтрок(ТаблицаСтрок, Отказ)
	
	Если ТаблицаСтрок.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Отсутствуют строки для создания документов планирования!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
	// Проверим заполнение Организации
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	
	МассивСтрок = ТаблицаСтрок.НайтиСтроки(СтруктураОтбора);
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		МассивЦФО = Новый Массив;
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			МассивЦФО.Добавить(ТекСтрока.ЦФО);
		КонецЦикла;
		
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивЦФО);
		Для Каждого ТекЦФО Из МассивЦФО Цикл
			ТекстСообщения = НСтр("ru='Не указано соответствие ЦФО и Организации для ЦФО ""%1"" в регистре ""ЦФО организаций"".
					|см. ""Бюджетирование -> ЦФО организаций"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекЦФО);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЦикла;
	КонецЕсли;
	                             
	// Проверим заполнение ЦФО
	ИмяСправочникаЦФО = бит_ОбщегоНазначения.ПолучитьИмяСправочникаЦФО();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЦФО", Справочники[ИмяСправочникаЦФО].ПустаяСсылка());
	
	МассивСтрок = ТаблицаСтрок.НайтиСтроки(СтруктураОтбора);
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			ТекстСообщения = НСтр("ru='Не заполнено ЦФО в строке данных №%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ТекСтрока.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЦикла;
	КонецЕсли;
	
	// Проверим заполнение СтатьиОборотов
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СтатьяОборотов", Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	
	МассивСтрок = ТаблицаСтрок.НайтиСтроки(СтруктураОтбора);
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			ТекстСообщения = НСтр("ru='Не заполнена статья оборотов в строке данных №%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ТекСтрока.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЦикла;
	КонецЕсли;
	
	// Проверим заполнение Тип статьи
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипСтатьи", Перечисления.бит_ТипыСтатейОборотов.БДДС);
	
	МассивСтрок = ТаблицаСтрок.НайтиСтроки(СтруктураОтбора);
	
	Если НЕ МассивСтрок.Количество() = ТаблицаСтрок.Количество() Тогда
		ТекстСообщения = НСтр("ru='Создание документов возможно только по статьям оборотов с типом ""БДДС"". В дереве данных присутствуют другие типы статей!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует процесс создания документов планирования.
// 
// Параметры:
// 	РежимСоздания - Строка
// 
&НаСервере
Процедура СоздатьДокументыПланированияСервер(РежимСоздания)
	
	ТаблицаСтрок = ПолучитьДанныеДляСозданияДокументовПланирования();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеТаблицыСтрок(ТаблицаСтрок, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаБДДС", ТаблицаСтрок);
	Запрос.УстановитьПараметр("ВалютаОбработки", Объект.Валюта);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", фКэшЗначений.ВалютаРегл);
	
	// В запрос помещаем подготовленную таблицу по которой формируются документы планирования
	// 	таблицу делим на три части:
	// 	1 - данные для создания документов ПланируемоеПоступлениеДенежныхСредств
	// 	2 - данные для создания документов ЗаявкиНаРасходованиеДС
	// 	3 - данные для создания ПрогнозовПлатежей.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаБДДС.НомерСтроки,
	|	ТаблицаБДДС.ИД,
	|	ТаблицаБДДС.Организация,
	|	ТаблицаБДДС.ЦФО,
	|	ТаблицаБДДС.СтатьяОборотов,
	|	ТаблицаБДДС.ВидОперации,
	|	ТаблицаБДДС.ФормаОплаты,
	|	ТаблицаБДДС.ТипСтатьи,
	|	ТаблицаБДДС.НаправлениеСтатьи,
	|	ТаблицаБДДС.Контрагент,
	|	ТаблицаБДДС.ДоговорКонтрагента,
	|	ТаблицаБДДС.ВалютаДоговора,
	|	ТаблицаБДДС.ДоговорРасчетыВУЕ,
	|	ТаблицаБДДС.Проект,
	|	ТаблицаБДДС.НоменклатурнаяГруппа,
	|	ТаблицаБДДС.БанковскийСчет,
	|	ТаблицаБДДС.Аналитика_1,
	|	ТаблицаБДДС.Аналитика_2,
	|	ТаблицаБДДС.Аналитика_3,
	|	ТаблицаБДДС.Аналитика_4,
	|	ТаблицаБДДС.Аналитика_5,
	|	ТаблицаБДДС.Аналитика_6,
	|	ТаблицаБДДС.Аналитика_7,
	|	ТаблицаБДДС.Количество,
	|	ТаблицаБДДС.Норма,
	|	ТаблицаБДДС.Сумма,
	|	ТаблицаБДДС.Измерение,
	|	ТаблицаБДДС.Период,
	|	ТаблицаБДДС.Комментарий,
	|	ТаблицаБДДС.ДокументПланирования,
	|	ТаблицаБДДС.ИсточникСтроки,
	|	ТаблицаБДДС.ОрганизацияДоговора
	|ПОМЕСТИТЬ ТаблицаБДДС
	|ИЗ
	|	&ТаблицаБДДС КАК ТаблицаБДДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБДДС.НомерСтроки,
	|	ТаблицаБДДС.ИД,
	|	ТаблицаБДДС.ЦФО КАК ЦФО,
	|	ТаблицаБДДС.СтатьяОборотов,
	|	ТаблицаБДДС.ВидОперации,
	|	ТаблицаБДДС.ФормаОплаты КАК ФормаОплаты,
	|	ТаблицаБДДС.ТипСтатьи,
	|	ТаблицаБДДС.НаправлениеСтатьи,
	|	ТаблицаБДДС.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаБДДС.ОрганизацияДоговора = ТаблицаБДДС.Организация
	|			ТОГДА ТаблицаБДДС.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаБДДС.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА &ВалютаОбработки
	|		КОГДА ТаблицаБДДС.ДоговорРасчетыВУЕ
	|			ТОГДА &ВалютаРеглУчета
	|		ИНАЧЕ ТаблицаБДДС.ВалютаДоговора
	|	КОНЕЦ КАК Валюта,
	|	ТаблицаБДДС.Проект,
	|	ТаблицаБДДС.НоменклатурнаяГруппа,
	|	ТаблицаБДДС.БанковскийСчет,
	|	ТаблицаБДДС.Аналитика_1,
	|	ТаблицаБДДС.Аналитика_2,
	|	ТаблицаБДДС.Аналитика_3,
	|	ТаблицаБДДС.Аналитика_4,
	|	ТаблицаБДДС.Аналитика_5,
	|	ТаблицаБДДС.Аналитика_6,
	|	ТаблицаБДДС.Аналитика_7,
	|	ТаблицаБДДС.Количество,
	|	ТаблицаБДДС.Норма,
	|	ТаблицаБДДС.Сумма,
	|	ТаблицаБДДС.Измерение,
	|	ТаблицаБДДС.Период КАК ДатаПоступления,
	|	ТаблицаБДДС.Комментарий,
	|	ТаблицаБДДС.ДокументПланирования,
	|	ТаблицаБДДС.ИсточникСтроки,
	|	ТаблицаБДДС.Организация КАК Организация
	|ИЗ
	|	ТаблицаБДДС КАК ТаблицаБДДС
	|ГДЕ
	|	ТаблицаБДДС.НаправлениеСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_РасходДоход.Поступление)
	|	И ТаблицаБДДС.ДокументПланирования = НЕОПРЕДЕЛЕНО
	|	И НЕ ТаблицаБДДС.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.ПустаяСсылка)
	|	И ТаблицаБДДС.ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДДС)
	|ИТОГИ ПО
	|	ФормаОплаты,
	|	Организация,
	|	Контрагент,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБДДС.НомерСтроки,
	|	ТаблицаБДДС.ИД,
	|	ТаблицаБДДС.ЦФО,
	|	ТаблицаБДДС.СтатьяОборотов,
	|	ТаблицаБДДС.ВидОперации КАК ВидОперации,
	|	ТаблицаБДДС.ФормаОплаты КАК ФормаОплаты,
	|	ТаблицаБДДС.ТипСтатьи,
	|	ТаблицаБДДС.НаправлениеСтатьи,
	|	ТаблицаБДДС.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаБДДС.ОрганизацияДоговора = ТаблицаБДДС.Организация
	|			ТОГДА ТаблицаБДДС.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаБДДС.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА &ВалютаОбработки
	|		КОГДА ТаблицаБДДС.ДоговорРасчетыВУЕ
	|			ТОГДА &ВалютаРеглУчета
	|		ИНАЧЕ ТаблицаБДДС.ВалютаДоговора
	|	КОНЕЦ КАК Валюта,
	|	ТаблицаБДДС.Проект,
	|	ТаблицаБДДС.НоменклатурнаяГруппа,
	|	ТаблицаБДДС.БанковскийСчет,
	|	ТаблицаБДДС.Аналитика_1,
	|	ТаблицаБДДС.Аналитика_2,
	|	ТаблицаБДДС.Аналитика_3,
	|	ТаблицаБДДС.Аналитика_4,
	|	ТаблицаБДДС.Аналитика_5,
	|	ТаблицаБДДС.Аналитика_6,
	|	ТаблицаБДДС.Аналитика_7,
	|	ТаблицаБДДС.Количество,
	|	ТаблицаБДДС.Норма,
	|	ТаблицаБДДС.Сумма,
	|	ТаблицаБДДС.Измерение,
	|	ТаблицаБДДС.Период КАК Период,
	|	ТаблицаБДДС.Комментарий,
	|	ТаблицаБДДС.ДокументПланирования,
	|	ТаблицаБДДС.ИсточникСтроки,
	|	ТаблицаБДДС.Организация КАК Организация
	|ИЗ
	|	ТаблицаБДДС КАК ТаблицаБДДС
	|ГДЕ
	|	ТаблицаБДДС.НаправлениеСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_РасходДоход.Расходование)
	|	И ТаблицаБДДС.ДокументПланирования = НЕОПРЕДЕЛЕНО
	|	И НЕ ТаблицаБДДС.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПустаяСсылка)
	|	И НЕ ТаблицаБДДС.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.ПустаяСсылка)
	|	И ТаблицаБДДС.ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДДС)
	|ИТОГИ ПО
	|	ВидОперации,
	|	ФормаОплаты,
	|	Организация,
	|	Контрагент,
	|	Период,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБДДС.НомерСтроки,
	|	ТаблицаБДДС.ИД,
	|	ТаблицаБДДС.ЦФО,
	|	ТаблицаБДДС.СтатьяОборотов,
	|	ТаблицаБДДС.ВидОперации КАК ВидОперации,
	|	ТаблицаБДДС.ФормаОплаты КАК ФормаОплаты,
	|	ТаблицаБДДС.ТипСтатьи,
	|	ТаблицаБДДС.НаправлениеСтатьи,
	|	ТаблицаБДДС.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаБДДС.ОрганизацияДоговора = ТаблицаБДДС.Организация
	|			ТОГДА ТаблицаБДДС.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаБДДС.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА &ВалютаОбработки
	|		КОГДА ТаблицаБДДС.ДоговорРасчетыВУЕ
	|			ТОГДА &ВалютаРеглУчета
	|		ИНАЧЕ ТаблицаБДДС.ВалютаДоговора
	|	КОНЕЦ КАК Валюта,
	|	ТаблицаБДДС.Проект,
	|	ТаблицаБДДС.НоменклатурнаяГруппа,
	|	ТаблицаБДДС.БанковскийСчет КАК БанковскийСчет,
	|	ТаблицаБДДС.Аналитика_1,
	|	ТаблицаБДДС.Аналитика_2,
	|	ТаблицаБДДС.Аналитика_3,
	|	ТаблицаБДДС.Аналитика_4,
	|	ТаблицаБДДС.Аналитика_5,
	|	ТаблицаБДДС.Аналитика_6,
	|	ТаблицаБДДС.Аналитика_7,
	|	ТаблицаБДДС.Количество,
	|	ТаблицаБДДС.Норма,
	|	ТаблицаБДДС.Сумма,
	|	ТаблицаБДДС.Измерение,
	|	ТаблицаБДДС.Период КАК Период,
	|	ТаблицаБДДС.Комментарий,
	|	ТаблицаБДДС.ДокументПланирования,
	|	ТаблицаБДДС.ИсточникСтроки,
	|	ТаблицаБДДС.Организация КАК Организация
	|ИЗ
	|	ТаблицаБДДС КАК ТаблицаБДДС
	|ГДЕ
	|	ТаблицаБДДС.НаправлениеСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_РасходДоход.Расходование)
	|	И ТаблицаБДДС.ДокументПланирования = НЕОПРЕДЕЛЕНО
	|	И НЕ ТаблицаБДДС.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.ПустаяСсылка)
	|	И ТаблицаБДДС.ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДДС)
	|ИТОГИ ПО
	|	ВидОперации,
	|	ФормаОплаты,
	|	Организация,
	|	Контрагент,
	|	Период,
	|	БанковскийСчет,
	|	Валюта";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	
	// Создадим документы планирования
	
	ДокументыПоТипам = Новый Соответствие;
	
	Если РежимСоздания = "ДокументыПланирования" Тогда
		
		МассивДокументов = СоздатьЗаявкиНаРасходованиеСредств(МассивРезультатов[2]);
		ДокументыПоТипам.Вставить("Заявки на расходование средств", МассивДокументов);
		
		МассивДокументов = СоздатьПланируемыеПоступленияДенежныхСредств(МассивРезультатов[1]);
		ДокументыПоТипам.Вставить("Планируемые поступления денежных средств", МассивДокументов);
		
	Иначе
		
		МассивДокументов = СоздатьПрогнозыПлатежей(МассивРезультатов[3]);
		ДокументыПоТипам.Вставить("Прогнозы платежей", МассивДокументов);
		
	КонецЕсли;
	
	// Сформируем дерево по типам документов
	ДеревоДокументовПланирования = РеквизитФормыВЗначение("ДокументыПланирования");
	
	Для Каждого ТекТип Из ДокументыПоТипам Цикл
		
		МассивДокументов = ТекТип.Значение;
		
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = ТекТип.Ключ;
		НайденнаяСтрока = ДеревоДокументовПланирования.Строки.Найти(ИмяГруппы, "ДокументПланирования");
		
		Если НайденнаяСтрока = Неопределено Тогда
			ГруппаДокументов = ДеревоДокументовПланирования.Строки.Добавить();
			ГруппаДокументов.ДокументПланирования = ИмяГруппы;
		Иначе
			ГруппаДокументов = НайденнаяСтрока;
		КонецЕсли;
		
		Для Каждого ТекДокумент Из ТекТип.Значение Цикл
			СтрокаДок = ГруппаДокументов.Строки.Добавить();
			СтрокаДок.ДокументПланирования = ТекДокумент;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоДокументовПланирования, ДокументыПланирования);
	
КонецПроцедуры

// Функция создает ЗаявкиНаРасходованиеДС.
// 
// Параметры:
// 	РезультатЗапроса - РезультатЗапроса.
// 
&НаСервере
Функция  СоздатьЗаявкиНаРасходованиеСредств(РезультатЗапроса)
	
	МассивДокументов = Новый Массив;
	
	ВыборкаВидОперации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВидОперации.Следующий() Цикл // По видам операций
		
		ВыборкаФормаОплаты = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаФормаОплаты.Следующий() Цикл // По формам оплаты
			
			ВыборкаОрганизация = ВыборкаФормаОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаОрганизация.Следующий() Цикл // По организациям
				
				ВыборкаКонтрагент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаКонтрагент.Следующий() Цикл // По контрагентам
					
					ВыборкаПериод = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПериод.Следующий() Цикл // По периодам
						
						ВыборкаВалюта = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаВалюта.Следующий() Цикл // По валютам
							
							ДоступенСписок = бит_КазначействоКлиентСервер.ДоступенСписокВЗаявке(ВыборкаВалюта.ВидОперации);
							
							Если ДоступенСписок Тогда
								ДокОб = СоздатьДокументЗаявкаНаРасходДС(ВыборкаВалюта);
							КонецЕсли;
							
							Выборка = ВыборкаВалюта.Выбрать();
							
							СоответствиеДокументовИСтрок = Новый Соответствие;
							
							Пока Выборка.Следующий() Цикл // По детальным строкам
								
								Если НЕ ДоступенСписок Тогда
									ДокОб = СоздатьДокументЗаявкаНаРасходДС(ВыборкаВалюта);
								КонецЕсли;
								
								Если Выборка.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаЗаработнойПлатыРаботнику
									ИЛИ Выборка.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику
									ИЛИ Выборка.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеСотрудникуПоДоговоруПодряда
									ИЛИ Выборка.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаРаботнику
									ИЛИ Выборка.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаДепонентов
									ИЛИ Выборка.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП Тогда
									
									МаксКоличествоАналитик = 7;
									инд=0;
									Для инд=инд+1 По МаксКоличествоАналитик Цикл
									
										Если ТипЗнч(Выборка["Аналитика_"+инд])=Тип("СправочникСсылка.ФизическиеЛица") Тогда
										
											ДокОб.ФизическоеЛицо = Выборка["Аналитика_"+инд]; 
										
										КонецЕсли; 
									
									КонецЦикла; 
								
								КонецЕсли; 
								
								// Изменение кода. Начало. 02.12.2015{{
								Если ЗаполнятьНазначениеПлатежа Тогда
								
									ДокОб.НазначениеПлатежа = Выборка.Комментарий;
									ДокОб.НазначениеПлатежаУпр = Выборка.Комментарий;
								
								КонецЕсли; 
								// Изменение кода. Конец. 02.12.2015}}
								
								СтруктураОтбора = Новый Структура;
								СтруктураОтбора.Вставить("ИД", Выборка.ИД);
								
								НайденныеСтроки = Объект.БДДС.НайтиСтроки(СтруктураОтбора);
								Для Каждого ТекСтрока Из НайденныеСтроки Цикл
									СоответствиеДокументовИСтрок.Вставить(ТекСтрока, ДокОб);
								КонецЦикла;
								
								НовСтрока = ДокОб.Распределение.Добавить();
								ДокОб.УстановитьИДСтроки(НовСтрока);
								
								ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
								
								НовСтрока.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
																										Объект.Валюта,
																										ДокОб.ВалютаДокумента,
																										Объект.Курс,
																										ДокОб.КурсДокумента,
																										Объект.Кратность,
																										ДокОб.КратностьДокумента);
								НовСтрока.СтавкаНДС = Выборка.СтатьяОборотов.СтавкаНДС;
								
								НовСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(НовСтрока.Сумма, Истина, ДокОб.СуммаВключаетНДС,
												бит_БухгалтерияСервер.ПолучитьСтавкуНДС(НовСтрока.СтавкаНДС));
								
								Если НЕ ДоступенСписок Тогда
									бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОб, РежимЗаписиДокумента.Запись,,"Ошибки");
								КонецЕсли;
								
							КонецЦикла; // По детальным строкам
							
							Если ДоступенСписок Тогда
								бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОб, РежимЗаписиДокумента.Запись,,"Ошибки");
							КонецЕсли;
							
							
							Для Каждого КлючЗначение Из СоответствиеДокументовИСтрок Цикл
								ТекСтрока = КлючЗначение.Ключ;
								Док = КлючЗначение.Значение;
								
								// Установим ссылку в строках дерева
								ТекСтрока.ДокументПланирования = Док.Ссылка;
								
								// Добавим документ в дерево документов
								НайденныйДокумент = МассивДокументов.Найти(Док.Ссылка);
								Если НайденныйДокумент = Неопределено Тогда
									МассивДокументов.Добавить(Док.Ссылка);
								КонецЕсли;
							КонецЦикла;
							
						КонецЦикла; // По валютам
						
					КонецЦикла; // По периодам
					
				КонецЦикла; // По контрагентам
				
			КонецЦикла; // По организациям
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаСервере
Функция СоздатьДокументЗаявкаНаРасходДС(ДанныеШапки)
	
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ДанныеШапки.Валюта, ТекущаяДатаСеанса());
	
	ДокОб = Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
	
	ДокОб.Дата				= ТекущаяДатаСеанса();
	ДокОб.ВидОперации		= ДанныеШапки.ВидОперации;
	ДокОб.ФормаОплаты		= ДанныеШапки.ФормаОплаты;
	ДокОб.Сценарий			= Объект.Сценарий;
	ДокОб.ТипЗаявки			= Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
	ДокОб.ВалютаДокумента	= ДанныеШапки.Валюта;
	ДокОб.КурсДокумента		= СтрКурса.Курс;
	ДокОб.КратностьДокумента= СтрКурса.Кратность;
	ДокОб.СуммаВключаетНДС	= Истина;
	ДокОб.Важность			= Перечисления.бит_Важность.Средняя;
	ДокОб.Организация		= ДанныеШапки.Организация;
	ДокОб.Контрагент		= ДанныеШапки.Контрагент;
	ТекДата = НачалоДня(ТекущаяДатаСеанса());
	Если ДанныеШапки.Период < ТекДата Тогда
		ДокОб.ДатаРасхода	= ТекДата;
	Иначе
		ДокОб.ДатаРасхода	= ДанныеШапки.Период;
	КонецЕсли;
	ДокОб.Ответственный		= фКэшЗначений.ТекущийПользователь;
	
	// Синхронизируем значение первой строки с шапкой документа.
	ДокОб.ДополнительныеСвойства.Вставить("МногострочныйДокумент", Истина);
							
	Возврат ДокОб;
	
КонецФункции

// Функция создает ПланируемыеПоступленияДенежныхСредств.
// 
// Параметры:
// 	РезультатЗапроса - РезультатЗапроса.
// 
&НаСервере
Функция  СоздатьПланируемыеПоступленияДенежныхСредств(РезультатЗапроса)
	
	МассивДокументов = Новый Массив;
	
	ВыборкаФормаОплаты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаФормаОплаты.Следующий() Цикл // По формам оплаты
		
		ВыборкаОрганизация = ВыборкаФормаОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизация.Следующий() Цикл // По организациям
			
			ВыборкаКонтрагент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКонтрагент.Следующий() Цикл // По контрагентам
				
				ВыборкаВалюта = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаВалюта.Следующий() Цикл // По валютам
					СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВыборкаВалюта.Валюта, ТекущаяДатаСеанса());
					
					ДокОб = Документы.бит_ПланируемоеПоступлениеДенежныхСредств.СоздатьДокумент();
					
					ДокОб.Дата				 = ТекущаяДатаСеанса();
					ДокОб.ФормаОплаты		 = ВыборкаФормаОплаты.ФормаОплаты;
					ДокОб.ТипЗаявки			 = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
					ДокОб.ВалютаДокумента	 = ВыборкаВалюта.Валюта;
					ДокОб.КурсДокумента		 = СтрКурса.Курс;
					ДокОб.КратностьДокумента = СтрКурса.Кратность;
					ДокОб.Организация		 = ВыборкаОрганизация.Организация;
					ДокОб.Ответственный		 = фКэшЗначений.ТекущийПользователь;
					
					Выборка = ВыборкаВалюта.Выбрать();
					
					МассивСтрок = Новый Массив;
					
					Пока Выборка.Следующий() Цикл // По детальным строкам
						
						// Найдем строку в данных, чтобы потом поставить там ссылку на созданный документ.
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("ИД", Выборка.ИД);
						
						НайденныеСтроки = Объект.БДДС.НайтиСтроки(СтруктураОтбора);
						Для Каждого ТекСтрока Из НайденныеСтроки Цикл
							МассивСтрок.Добавить(ТекСтрока);
						КонецЦикла;
						
						НовСтрока = ДокОб.Распределение.Добавить();
						ДокОб.УстановитьИДСтроки(НовСтрока);
						
						ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
						
						НовСтрока.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
						Объект.Валюта,
						ДокОб.ВалютаДокумента,
						Объект.Курс,
						ДокОб.КурсДокумента,
						Объект.Кратность,
						ДокОб.КратностьДокумента);
						НовСтрока.СтавкаНДС = Выборка.СтатьяОборотов.СтавкаНДС;
						
						НовСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(НовСтрока.Сумма, Истина, Истина,
							бит_БухгалтерияСервер.ПолучитьСтавкуНДС(НовСтрока.СтавкаНДС));
						
					КонецЦикла; // По детальным строкам
					
					// Синхронизируем значение первой строки с шапкой документа.
					ДокОб.мСписок = Истина;
					
					бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОб, РежимЗаписиДокумента.Запись,,"Ошибки");
					
					// Установим ссылку в строках дерева
					Для Каждого ТекСтрока Из МассивСтрок Цикл
						ТекСтрока.ДокументПланирования = ДокОб.Ссылка;
					КонецЦикла;
					
					// Добавим документ в дерево документов
					МассивДокументов.Добавить(ДокОб.Ссылка);
					
				КонецЦикла; // По валютам
				
			КонецЦикла; // По контрагентам
			
		КонецЦикла; // По организациям
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

// Функция создает ПрогнозыПлатежей.
// 
// Параметры:
// 	РезультатЗапроса - РезультатЗапроса.
// 
&НаСервере
Функция  СоздатьПрогнозыПлатежей(РезультатЗапроса)
	
	МассивДокументов = Новый Массив;
	
	ВыборкаВидОперации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВидОперации.Следующий() Цикл // По видам операций
	
		ВыборкаФормаОплаты = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаФормаОплаты.Следующий() Цикл // По формам оплаты
			
			ВыборкаОрганизация = ВыборкаФормаОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаОрганизация.Следующий() Цикл // По организациям
				
				ВыборкаКонтрагент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаКонтрагент.Следующий() Цикл // По контрагентам
					
					ВыборкаПериод = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПериод.Следующий() Цикл // По периодам
						
						ВыборкаБанковскийСчет = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаБанковскийСчет.Следующий() Цикл // По банковским счетам
							
							ВыборкаВалюта = ВыборкаБанковскийСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							Пока ВыборкаВалюта.Следующий() Цикл // По валютам
								СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВыборкаВалюта.Валюта, ТекущаяДатаСеанса());
								
								ДокОб = Документы.бит_ЗаявкаНаРасходованиеСредствОбщая.СоздатьДокумент();
								
								ДокОб.Дата				= ТекущаяДатаСеанса();
								ДокОб.ФормаОплаты		= ВыборкаФормаОплаты.ФормаОплаты;
								ДокОб.Сценарий			= Объект.Сценарий;
								ДокОб.ТипЗаявки			= Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
								ДокОб.ВалютаДокумента	= ВыборкаВалюта.Валюта;
								ДокОб.КурсДокумента		= СтрКурса.Курс;
								ДокОб.КратностьДокумента= СтрКурса.Кратность;
								ДокОб.Организация		= ВыборкаОрганизация.Организация;
								ДокОб.Контрагент		= ВыборкаКонтрагент.Контрагент;
								ДокОб.БанковскийСчетОрганизации = ВыборкаБанковскийСчет.БанковскийСчет;
								ТекДата = НачалоДня(ТекущаяДатаСеанса());
								Если ВыборкаПериод.Период < ТекДата Тогда
									ДокОб.ДатаРасхода	= ТекДата;
								Иначе
									ДокОб.ДатаРасхода	= ВыборкаПериод.Период;
								КонецЕсли;
								ДокОб.Ответственный		= фКэшЗначений.ТекущийПользователь;
								
								Выборка = ВыборкаВалюта.Выбрать();
								
								МассивСтрок = Новый Массив;
								
								Пока Выборка.Следующий() Цикл // По детальным строкам
									
									// Изменение кода. Начало. 02.12.2015{{
									Если ЗаполнятьНазначениеПлатежа Тогда
									
										ДокОб.НазначениеПлатежа = Выборка.Комментарий;
										ДокОб.НазначениеПлатежаУпр = Выборка.Комментарий;
									
									КонецЕсли; 
									// Изменение кода. Конец. 02.12.2015}}
									
									СтруктураОтбора = Новый Структура;
									СтруктураОтбора.Вставить("ИД", Выборка.ИД);
									
									НайденныеСтроки = Объект.БДДС.НайтиСтроки(СтруктураОтбора);
									Для Каждого ТекСтрока Из НайденныеСтроки Цикл
										МассивСтрок.Добавить(ТекСтрока);
									КонецЦикла;
									
									НовСтрока = ДокОб.Распределение.Добавить();
									ДокОб.УстановитьИДСтроки(НовСтрока);
									
									ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
									
									НовСтрока.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
									Объект.Валюта,
									ДокОб.ВалютаДокумента,
									Объект.Курс,
									ДокОб.КурсДокумента,
									Объект.Кратность,
									ДокОб.КратностьДокумента);
									НовСтрока.СтавкаНДС = Выборка.СтатьяОборотов.СтавкаНДС;
									
									НовСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(НовСтрока.Сумма, Истина, Истина,
										бит_БухгалтерияСервер.ПолучитьСтавкуНДС(НовСтрока.СтавкаНДС));
									
								КонецЦикла; // По детальным строкам
								
								// Синхронизируем значение первой строки с шапкой документа.
								ДокОб.мСписок = Истина;
								
								бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОб, РежимЗаписиДокумента.Запись,,"Ошибки");
								
								// Установим ссылку в строках дерева
								Для Каждого ТекСтрока Из МассивСтрок Цикл
									ТекСтрока.ДокументПланирования = ДокОб.Ссылка;
								КонецЦикла;
								
								// Добавим документ в дерево документов
								МассивДокументов.Добавить(ДокОб.Ссылка);
								
							КонецЦикла; // По валютам
							
						КонецЦикла;
						
					КонецЦикла; // По периодам
					
				КонецЦикла; // По контрагентам
				
			КонецЦикла; // По организациям
			
		КонецЦикла; // По формам оплаты
		
	КонецЦикла;	// По видам операций
		
	Возврат МассивДокументов;
	
КонецФункции

// Процедура удаляет созданные документы планирования.
// 
&НаСервере
Процедура УдалитьДокументыПланированияНаСервере()
	
	ДеревоДокументовПланирования = РеквизитФормыВЗначение("ДокументыПланирования");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выполнять", 1);
	
	МассивДокументов = ДеревоДокументовПланирования.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
    Если МассивДокументов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не указаны документы для удаления!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
    КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	// Если в дереве есть данные по документам планирования, которые сейчас удаляем
	// 	то необходимо восстановить дерево данных.
	ВосстановитьДерево  = Ложь;
	
	Для Каждого ДокументКУдалению Из МассивДокументов Цикл
		
		Если ТипЗнч(ДокументКУдалению.ДокументПланирования) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		ДокОбъект = ДокументКУдалению.ДокументПланирования.ПолучитьОбъект();
		
		Попытка
			// Найдем ссылки на документ в таб.части БДДС.
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ДокументПланирования", ДокументКУдалению.ДокументПланирования);
			
			НайденныеСтроки = Объект.БДДС.НайтиСтроки(СтруктураОтбора);
			
			// Удалим документ
			ДокОбъект.УстановитьПометкуУдаления();
			
			// Удалим ссылки на документ из таб.части БДДС.
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ТекСтрока.ИсточникСтроки = 0 Тогда // Данные по бюджету
					ТекСтрока.ДокументПланирования = Неопределено;
				Иначе // Данные по документам планирования
					ВосстановитьДерево = Истина;
					Объект.БДДС.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
			// Запомним в каких строках дерева документов планирования удалось удалить документы.
			СтрокиКУдалению.Добавить(ДокументКУдалению);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			
			ТекстСообщения = НСтр("ru='Не удалось удалить документ ""%1%"" по причине: %2%'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ДокументКУдалению, ТекстОшибки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	// Удалим строки из дерева
	Для Каждого ТекСтрока Из СтрокиКУдалению Цикл
		ТекСтрока.Родитель.Строки.Удалить(ТекСтрока);
	КонецЦикла;
	
	// Удалим корневые строки, если у них нет подчиненных.
	Колво = ДеревоДокументовПланирования.Строки.Количество();
	Сч = 1;
	Пока Сч <= Колво Цикл
		ТекСтрока = ДеревоДокументовПланирования.Строки[Колво-Сч];
		
		Если ТекСтрока.Строки.Количество() = 0 Тогда
			ДеревоДокументовПланирования.Строки.Удалить(ТекСтрока);
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоДокументовПланирования, ДокументыПланирования);
	
	Если ВосстановитьДерево Тогда
		ВосстановитьДерево(Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет запись отмеченных документов планирования.
// 
// Параметры:
// 	РежимЗаписи - РежимЗаписиДокумента - требуемый режим записи.
// 
&НаСервере
Процедура ЗаписатьДокументыПланированияНаСервере(РежимЗаписи)
	
	ДеревоДокументовПланирования = РеквизитФормыВЗначение("ДокументыПланирования");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выполнять", 1);
	
	МассивДокументов = ДеревоДокументовПланирования.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
    Если МассивДокументов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не указаны документы планирования!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
    КонецЕсли;

	Для Каждого ДокументКУдалению Из МассивДокументов Цикл
		
		Если ТипЗнч(ДокументКУдалению.ДокументПланирования) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		ДокОбъект = ДокументКУдалению.ДокументПланирования.ПолучитьОбъект();
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ДокументЗаполнен = ДокОбъект.ПроверитьЗаполнение();
		Иначе
			ДокументЗаполнен = Истина;
		КонецЕсли;
		
		Если ДокументЗаполнен Тогда
			бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОбъект, РежимЗаписи,,"Ошибки");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеПериодичностиЧисло(Периодичность)
	
	ЗначениеПериодичности = 9;
	
	Если Периодичность = Перечисления.бит_ПериодичностьПланирования.День Тогда
		ЗначениеПериодичности = 6;
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьПланирования.Неделя Тогда
		ЗначениеПериодичности = 7; 
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьПланирования.Декада Тогда
		ЗначениеПериодичности = 8;
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьПланирования.Месяц Тогда
		ЗначениеПериодичности = 9;
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьПланирования.Квартал Тогда
		ЗначениеПериодичности = 10;
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьПланирования.Полугодие Тогда
		ЗначениеПериодичности = 11;
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьПланирования.Год Тогда
		ЗначениеПериодичности = 12;	
	КонецЕсли;
	
	Возврат ЗначениеПериодичности;
	
КонецФункции

&НаСервере
Функция ПодготовитьСтруктуруОтбораДанныхБюджета()
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Периодичность", ПолучитьЗначениеПериодичностиЧисло(Объект.Периодичность));
	
	Если ЗначениеЗаполнено(Объект.НастройкаФормы.Бюджет) Тогда
		СтруктураПараметров.Вставить("Бюджет", Объект.НастройкаФормы.Бюджет);
	КонецЕсли;
	
	СтруктураОтбора.Вставить("Параметры", СтруктураПараметров);
	СтруктураОтбора.Вставить("ОтборСКД", Объект.Компоновщик.Настройки.Отбор);
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоВидовОперацийДляЗаявки()
	
	ДеревоВидовОперацийИсточник = Документы.бит_ЗаявкаНаРасходованиеСредств.СформироватьДеревоВидовОперацийДляЗаявки(фКэшЗначений.Перечисления.бит_ВидыОперацийЗаявкаНаРасходование);
	
	ЗначениеВРеквизитФормы(ДеревоВидовОперацийИсточник, "ДеревоВидовОпераций");
	
КонецПроцедуры

//  Функция готовит стуктуру с настройками для сохранения.
// 
// Возвращаемое значение:
//   СтруктураНастройки   - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	МетаОбъект       = Метаданные.Обработки.бит_РабочееМестоОперативногоПланированияДДС;
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Компоновщик");
	МассивИсключений.Добавить("КомпоновщикДокПланирования");	
	МассивИсключений.Добавить("ТекстЗапроса");
	
	СтруктураНастроек = Справочники.бит_СохраненныеНастройки.УпаковатьРеквизиты(Объект,МетаОбъект,МассивИсключений);
	
	СтруктураНастроек.Вставить("НастройкиКомпоновщика"      		 ,Объект.Компоновщик.ПользовательскиеНастройки);
	СтруктураНастроек.Вставить("НастройкиКомпоновщикаДокПланирования",Объект.КомпоновщикДокПланирования.ПользовательскиеНастройки);
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

//  Процедура применяет сохраненные настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			МетаОбъект       = Метаданные.Обработки.бит_РабочееМестоОперативногоПланированияДДС;
			МассивИсключений = Новый Массив;
			МассивИсключений.Добавить("Компоновщик");
			МассивИсключений.Добавить("КомпоновщикДокПланирования");			
			МассивИсключений.Добавить("ТекстЗапроса");
			
			Справочники.бит_СохраненныеНастройки.РаспаковатьРеквизиты(Объект,МетаОбъект,СтруктураНастроек,МассивИсключений);
			ИзменениеНастройкиФормы();
			
			Если СтруктураНастроек.Свойство("НастройкиКомпоновщика") Тогда
				
				Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.НастройкиКомпоновщика);
				
			КонецЕсли; 
			
			Если СтруктураНастроек.Свойство("НастройкиКомпоновщикаДокПланирования") Тогда
				
				Объект.КомпоновщикДокПланирования.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.НастройкиКомпоновщикаДокПланирования);
				
			КонецЕсли; 
			
		КонецЕсли; // Сохранена структура	 
		
	КонецЕсли; // Настройка заполнена
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура обрабатывает изменение реквизита "СтатьяОборотов" в табличной части "БДДС".
// 
&НаСервере
Процедура ИзменениеСтатьиОборотовВТабличнойЧасти(ИдСтроки, ИмяТабЧасти, ИмяПоля, ЗаполнятьНорму = Истина)
	
	ТекущаяСтрока = Объект[ИмяТабЧасти].НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока.ВидОперации = ТекущаяСтрока.СтатьяОборотов.ВидОперации;
	ТекущаяСтрока.ФормаОплаты = ТекущаяСтрока.СтатьяОборотов.ФормаОплаты;
	ТекущаяСтрока.НаправлениеСтатьи = ТекущаяСтрока.СтатьяОборотов.РасходДоход;
	
	Если фКэшЗначений.НастройкиСтатей[ТекущаяСтрока.СтатьяОборотов] = Неопределено Тогда
	
		бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(ТекущаяСтрока.СтатьяОборотов, фКэшЗначений.НастройкиСтатей);
	
	КонецЕсли; 
	
	бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ТекущаяСтрока,фКэшЗначений.ИзмеренияДоп,фКэшЗначений.НастройкиИзмерений);	
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить(ИмяПоля);
	
	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(ТекущаяСтрока.СтатьяОборотов);
	
	ОФормитьТаблицу(ИмяТабЧасти, ИменаПолей, МассивСтатей);			
	
	ИзмеренияРазворачивать = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать")];	
	флУдаленоКлючевоеПоле = бит_БюджетированиеКлиентСервер.ПроверитьПоляВСтроке(ТекущаяСтрока, фКэшЗначений.НастройкиСтатей, фКэшЗначений.ИзмеренияВсе, ИзмеренияРазворачивать);
	
	Если флУдаленоКлючевоеПоле Тогда
	
        бит_БюджетированиеКлиентСервер.ВывестиСообщениеОНесоответствииСтатьи(ТекущаяСтрока.СтатьяОборотов);		
	
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеСтатьиОборотов()

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	флПерезаполнить = Ложь;
	Если Объект.БДДС.Количество() > 0 
		И Объект.Валюта <> мТекущаяВалютаОбработки Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВалютаПриИзмененииОкончание", ЭтотОбъект); 
		ТекстВопроса = НСтр("ru = 'Изменена валюта обработки. Пересчитать суммы в обработке?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 15, КодВозвратаДиалога.Отмена);
		
	Иначе 
	
		ИзменениеВалюты(флПерезаполнить, мТекущаяВалютаОбработки);
		
		мТекущаяВалютаОбработки = Объект.Валюта;
		
	КонецЕсли;	
		
КонецПроцедуры

// Процедура окончание процедуры "ВалютаПриИзменении".
// 
&НаКлиенте 
Процедура ВалютаПриИзмененииОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	флПерезаполнить = Ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		флПерезаполнить = Истина;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		флПерезаполнить = Ложь;			 
		
	Иначе	 
		
		Объект.Валюта = мТекущаяВалютаОбработки;
		Возврат;
		
	КонецЕсли; 
	
	ИзменениеВалюты(флПерезаполнить, мТекущаяВалютаОбработки);
	
	мТекущаяВалютаОбработки = Объект.Валюта;
	
КонецПроцедуры // ВалютаПриИзмененииОкончание()

// Процедура обрабатывает изменение валюты.
// 
&НаСервере
Процедура ИзменениеВалюты(ПересчитатьСуммы, ВалютаНач = Неопределено)
	
	СтрНач = бит_КурсыВалютКлиентСервер.СтруктураКурса(ВалютаНач, Объект.Курс, Объект.Кратность);	
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Объект.Валюта, ТекущаяДатаСеанса());
	Объект.Курс		 = СтруктураКурса.Курс;
	Объект.Кратность = СтруктураКурса.Кратность;
	
	Если ПересчитатьСуммы И ЗначениеЗаполнено(ВалютаНач) Тогда
		
		СтрКон = бит_КурсыВалютКлиентСервер.СтруктураКурса(Объект.Валюта, Объект.Курс, Объект.Кратность);
		
		КурсыДок = Новый Структура("Нач, Кон", СтрНач, СтрКон);
		
		ПересчитатьТабличныеЧастиПоВалюте(КурсыДок);
		
		ВосстановитьДерево();
		
	КонецЕсли; // Пересчитать	
	
КонецПроцедуры // ИзменениеВалюты()

// Выполняет пересчеты табличных частей при изменении валюты. 
// 
// Параметры:
//  КурсыДок - Структура
// 
&НаСервере
Процедура ПересчитатьТабличныеЧастиПоВалюте(КурсыДок)
	
	ПоляПересчета = Новый Массив;
	ПоляПересчета.Добавить("Сумма");
	
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	СценарийПустой = Справочники[ИмяСправочникаСценарии].ПустаяСсылка();
	
	бит_Бюджетирование.ПересчитатьТабЧастьПоВалюте(Объект.БДДС, СценарийПустой, КурсыДок, ПоляПересчета);
	
КонецПроцедуры // ПересчитатьТабличныеЧастиПоВалюте()

// Процедура управляет флажками режима отображения.
// 
// Параметры:
// 	Элемент - ЭлементУправления
// 
&НаСервере
Процедура УстановитьФлажкиРежимаОтображения(ИмяЭлемента)
	
	Для Каждого ТекЭлемент Из Элементы.ГруппаРежимОтображения.ПодчиненныеЭлементы Цикл
		Если НЕ Найти(ТекЭлемент.Имя, "РежимОтображения_") = 0 Тогда
			ЭтаФорма[ТекЭлемент.Имя] = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма[ИмяЭлемента] = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАктивныйРежимОтображения()
	
	АктивныйРежимОтображения = "";
	
	Для Каждого ТекЭлемент Из Элементы.ГруппаРежимОтображения.ПодчиненныеЭлементы Цикл
		Если НЕ Найти(ТекЭлемент.Имя, "РежимОтображения_") = 0
			И ЭтаФорма[ТекЭлемент.Имя] Тогда
			АктивныйРежимОтображения = ТекЭлемент.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат АктивныйРежимОтображения;
	
КонецФункции

// Оповещение на вопрос о подтверждение очистки.
//
// Параметры:
//  Результат    - КодВозвратаДиалога.
//  ДопПараметры - Структура.
//
&НаКлиенте
Процедура ОтветНаПотверждениеОчистки(РезультатОтвет, ДопПараметры) Экспорт
	
	ОчищатьДанные = РезультатОтвет = КодВозвратаДиалога.Да;
    
    Если ОчищатьДанные Тогда
            
        СтрКурсаОбработки = ДопПараметры.СтрКурсаОбработки;
        ВыбранноеЗначение = ДопПараметры.ВыбранноеЗначение;
        
        ЗаполнитьТабЧастьДаннымиБюджета(ВыбранноеЗначение, ОчищатьДанные, СтрКурсаОбработки);
        
        УстановитьВидимость();
    
    КонецЕсли;
    
КонецПроцедуры // ОтветНаПотверждениеОчистки()

&НаСервере
Процедура УстановитьУсловноеОформление()

	// БДДС_Редактирование
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БДДС_Редактирование");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.БДДС.ДокументПланирования", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// БДДС_РедактированиеФормаОплаты
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БДДС_РедактированиеФормаОплаты");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.БДДС.ВидОперации", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// БДДС_РедактированиеВидОперации, БДДСВидОперации
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БДДС_РедактированиеВидОперации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БДДСВидОперации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.БДДС.НаправлениеСтатьи", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_РасходДоход.Поступление);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры
 
#КонецОбласти