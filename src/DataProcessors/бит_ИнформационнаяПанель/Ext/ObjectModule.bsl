#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
 
Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мВалютаУправленческогоУчета Экспорт; // Хранит валюту управленческого учета.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура выводит информацию по данному объекту в табличный документ.
// 
// Параметры:
//  ТД  - ТабличныйДокумент.
// 
Процедура ОбновитьИнформацию(ТД) Экспорт

	ТД.Очистить();
	ТД.НачатьАвтоГруппировкуСтрок();
	Макет = ПолучитьМакет("Макет");
	
	ОблМакетаЗаголовок = Макет.ПолучитьОбласть("ЗаголовокИнформация");
	
	Если ЗначениеЗаполнено(Объект) И ТипЗнч(Объект) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
		ОблМакетаЗаголовок.Параметры.Заголовок = Строка(Объект);
		ТД.Вывести(ОблМакетаЗаголовок);
		ДеревоИнформация = ПолучитьИнформациюПоОбщейЗаявке();
		ВывестиСтрокуДерева(ДеревоИнформация,Макет,ТД);
		
	ИначеЕсли ЗначениеЗаполнено(Объект) И ТипЗнч(Объект) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
		ОблМакетаЗаголовок.Параметры.Заголовок = Строка(Объект);
		ТД.Вывести(ОблМакетаЗаголовок);
		ДеревоИнформация = ПолучитьИнформациюПоЗаявке();
		ВывестиСтрокуДерева(ДеревоИнформация,Макет,ТД);	
		
	ИначеЕсли ЗначениеЗаполнено(Объект) И ТипЗнч(Объект) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
		ОблМакетаЗаголовок.Параметры.Заголовок = Строка(Объект);
		ТД.Вывести(ОблМакетаЗаголовок);
		ДеревоИнформация = ПолучитьИнформациюПоЗаявкеНаЗатраты();
		ВывестиСтрокуДерева(ДеревоИнформация,Макет,ТД);
		
	ИначеЕсли ЗначениеЗаполнено(Объект) И ТипЗнч(Объект) = Тип("ДокументСсылка.бит_мто_ЗаявкаНаЗакупку") Тогда
		ОблМакетаЗаголовок.Параметры.Заголовок = Строка(Объект);
		ТД.Вывести(ОблМакетаЗаголовок);
		ДеревоИнформация = ПолучитьИнформациюПоЗаявкеНаЗакупку();
		ВывестиСтрокуДерева(ДеревоИнформация,Макет,ТД);
		
	Иначе	
	   ТД.Вывести(ОблМакетаЗаголовок);		
	   ОблМакета=Макет.ПолучитьОбласть("СтрокаИнформация");		
	   ОблМакета.Параметры.ИмяПараметра = "По данному объекту нет дополнительной информации";
	   ТД.Вывести(ОблМакета);
	КонецЕсли; 

	ТД.ТолькоПросмотр = Истина;
	ТД.ЗакончитьАвтоГруппировкуСтрок();
	
КонецПроцедуры

// Функция формирует дерево с инфомацией по документу общая заявка.
// 
// Возвращаемое значение:
//   ДеревоИнформация   - ДеревоЗначений.
// 
Функция ПолучитьИнформациюПоОбщейЗаявке() Экспорт

	ВалютаДокумента = Объект.ВалютаДокумента;
	
	ДеревоИнформация = Новый ДеревоЗначений;
	ДеревоИнформация.Колонки.Добавить("ЭтоГруппа",Новый ОписаниеТипов("Булево"));
	ДеревоИнформация.Колонки.Добавить("ИмяПараметра");
	ДеревоИнформация.Колонки.Добавить("ЗначениеПараметра");
	
	// Суммы по документу.
	СтрокаГруппа = ДеревоИнформация.Строки.Добавить();
	СтрокаГруппа.ИмяПараметра = "Суммы документа";
	СтрокаГруппа.ЭтоГруппа    = Истина; 
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма документа:";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(Объект.Сумма, ВалютаДокумента);	
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма (регл.):";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(Объект.СуммаРегл, мВалютаРегламентированногоУчета);
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма (упр.):";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(Объект.СуммаУпр, мВалютаУправленческогоУчета);
	
	// Остатки по общей заявке.
	СтрокаГруппа = ДеревоИнформация.Строки.Добавить();
	СтрокаГруппа.ИмяПараметра = "Остатки по прогнозу платежа";
	СтрокаГруппа.ЭтоГруппа    = Истина; 
	
	РезСтруктура = бит_Казначейство.ПолучитьОстатокПоДокументуПланирования(Объект);
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма остаток:";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.Сумма, ВалютаДокумента);
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма остаток (регл.):";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.СуммаРегл, мВалютаРегламентированногоУчета);
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма остаток (упр.):";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.СуммаУпр, мВалютаУправленческогоУчета);
	
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	// Получим настройки пользователя.
	ВыводитьСведенияОЛимитах = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ВыводитьСведенияОЛимитахДляЗаявки",
										ТекПользователь);
										
	Если ВыводитьСведенияОЛимитах Тогда
		// Добавим сведения об остатках по бюджету.
		ДобавитьСведенияОбОстаткахПоБюджету(ДеревоИнформация.Строки);		
	КонецЕсли;									
										
 	Возврат ДеревоИнформация;

КонецФункции

// Функция формирует дерево с инфомацией по документу заявка.
// 
// Возвращаемое значение:
//   ДеревоИнформация   - ДеревоЗначений.
// 
Функция ПолучитьИнформациюПоЗаявке() Экспорт

	ВалютаДокумента = Объект.ВалютаДокумента;
	
	ДеревоИнформация = Новый ДеревоЗначений;
	ДеревоИнформация.Колонки.Добавить("ЭтоГруппа",Новый ОписаниеТипов("Булево"));
	ДеревоИнформация.Колонки.Добавить("ИмяПараметра");
	ДеревоИнформация.Колонки.Добавить("ЗначениеПараметра");
	
	// Суммы по документу.
	СтрокаГруппа = ДеревоИнформация.Строки.Добавить();
	СтрокаГруппа.ИмяПараметра = "Суммы документа";
	СтрокаГруппа.ЭтоГруппа    = Истина;
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма документа:";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(Объект.Сумма, ВалютаДокумента, "0,00");	
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма (регл.):";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(Объект.СуммаРегл, мВалютаРегламентированногоУчета, "0,00");
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма (упр.):";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(Объект.СуммаУпр, мВалютаУправленческогоУчета, "0,00");
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		// Остатки по общей заявке.
		СтрокаГруппа = ДеревоИнформация.Строки.Добавить();
		СтрокаГруппа.ИмяПараметра = "Остатки по прогнозу платежа";
		СтрокаГруппа.ЭтоГруппа    = Истина; 
	
		РезСтруктура = бит_Казначейство.ПолучитьОстатокПоДокументуПланирования(Объект.ДокументОснование);
	
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Сумма остаток:";
		СтрокаДерева.ЗначениеПараметра =  бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.Сумма, ВалютаДокумента, "0,00");
	
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Сумма остаток (регл.):";
		СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.СуммаРегл, мВалютаРегламентированногоУчета, "0,00");
	
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Сумма остаток (упр.):";
		СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.СуммаУпр, мВалютаУправленческогоУчета, "0,00");
		
	КонецЕсли;
	
	// Сведения об оплате.
	СтрокаГруппа = ДеревоИнформация.Строки.Добавить();
	СтрокаГруппа.ИмяПараметра = "Сведения об оплате";
	СтрокаГруппа.ЭтоГруппа    = Истина;
	
	РезСтруктура = бит_Казначейство.ПолучитьОплатыПоЗаявке(Объект);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Если Объект.ВалютаДокумента = ВалютаРегл Тогда
	// 	ВалютаВзаиморасчетов = ВалютаРегл;
	// Иначе	
	// 	Если Объект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
	// 		ВалютаВзаиморасчетов = ВалютаРегл;
	// 	Иначе	
	// 		ВалютаВзаиморасчетов = ВалютаДокумента;
	// 	КонецЕсли;
	// КонецЕсли; 
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "К оплате:";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.СуммаПлан, Объект.ВалютаДокумента, "0,00");
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Оплачено:";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.СуммаОплата, Объект.ВалютаДокумента, "0,00");

	Если ЗначениеЗаполнено(РезСтруктура.СуммаЗакрыта) Тогда
		
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Закрыто:";
		СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.СуммаЗакрыта, Объект.ВалютаДокумента, "0,00");
		
	КонецЕсли;
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Остаток:";
	СтрокаДерева.ЗначениеПараметра =  бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.Разность, Объект.ВалютаДокумента, "0,00");
	
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	// Получим настройки пользователя.
	ВыводитьСведенияОЛимитах 		= бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ВыводитьСведенияОЛимитахДляЗаявки",
										ТекПользователь);
	ВыводитьСведенияОВзаиморасчетах = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ВыводитьСведенияОВзаиморасчетахДляЗаявки",
										ТекПользователь);
	Если ВыводитьСведенияОЛимитах Тогда																					  
		// Добавим сведения об остатках по бюджету.
		ДобавитьСведенияОбОстаткахПоБюджету(ДеревоИнформация.Строки);		
	КонецЕсли;
	
	Если ВыводитьСведенияОВзаиморасчетах Тогда
		// Добавим сведения по взаиморасчетам.
		ДобавитьСведенияПоВзаиморасчетам(ДеревоИнформация.Строки);
	КонецЕсли;
	
	ДобавитьСведенияПоКорректировкамКонтрольныхЗначений(ДеревоИнформация.Строки);
	
	Возврат ДеревоИнформация;

КонецФункции

// Функция формирует дерево с информацией по документу заявка на затраты.
// 
// Возвращаемое значение:
//   ДеревоИнформация   - ДеревоЗначений.
// 
Функция ПолучитьИнформациюПоЗаявкеНаЗатраты() Экспорт

	ВалютаДокумента = Объект.ВалютаДокумента;
	
	ДеревоИнформация = Новый ДеревоЗначений;
	ДеревоИнформация.Колонки.Добавить("ЭтоГруппа",Новый ОписаниеТипов("Булево"));
	ДеревоИнформация.Колонки.Добавить("ИмяПараметра");
	ДеревоИнформация.Колонки.Добавить("ЗначениеПараметра");
	
	// Суммы по документу.
	СтрокаГруппа = ДеревоИнформация.Строки.Добавить();
	СтрокаГруппа.ИмяПараметра = "Суммы документа";
	СтрокаГруппа.ЭтоГруппа    = Истина; 
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма документа:";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(Объект.Сумма, ВалютаДокумента, "0,00");	
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма (регл.):";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(Объект.СуммаРегл, мВалютаРегламентированногоУчета, "0,00");
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма (упр.):";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(Объект.СуммаУпр, мВалютаУправленческогоУчета, "0,00");
	
	// Сведения о выполнении.
	
	СтрокаГруппа = ДеревоИнформация.Строки.Добавить();
	СтрокаГруппа.ИмяПараметра = "Сведения о выполнении";
	СтрокаГруппа.ЭтоГруппа    = Истина;
	               
	РезСтруктура = бит_ДоговораСервер.ПолучитьЗатратыПоЗаявке(Объект);
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "К затратам:";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.СуммаПлан, Объект.ВалютаДокумента, "0,00");
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Выполнено:";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.СуммаЗатраты, Объект.ВалютаДокумента, "0,00");

	Если ЗначениеЗаполнено(РезСтруктура.СуммаЗакрыта) Тогда
		
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Закрыто:";
		СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.СуммаЗакрыта, Объект.ВалютаДокумента, "0,00");
		
	КонецЕсли;
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Остаток:";
	СтрокаДерева.ЗначениеПараметра =  бит_ОбщегоНазначения.ФорматСумм(РезСтруктура.Разность, Объект.ВалютаДокумента, "0,00");
	
	ДобавитьСведенияПоКорректировкамКонтрольныхЗначений(ДеревоИнформация.Строки);
	
	Возврат ДеревоИнформация;

КонецФункции

// Функция формирует дерево с информацией по документу бит_мто_ЗаявкаНаЗакупку.
// 
// Возвращаемое значение:
//   ДеревоИнформация   - ДеревоЗначений.
// 
Функция ПолучитьИнформациюПоЗаявкеНаЗакупку() Экспорт

	ВалютаДокумента = Объект.ВалютаДокумента;
	СуммаДокумента = Объект.Товары.Итог("Сумма");
	
	СтруктураКурсы = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(Объект,Объект.Дата,Новый Структура("Документ,Упр,Регл"));
	СуммаУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента
														  ,СтруктураКурсы["Документ"].Валюта
														  ,СтруктураКурсы["Упр"].Валюта
														  ,СтруктураКурсы["Документ"].Курс
														  ,СтруктураКурсы["Упр"].Курс
														  ,СтруктураКурсы["Документ"].Кратность
														  ,СтруктураКурсы["Упр"].Кратность);
														  
	СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента
														  ,СтруктураКурсы["Документ"].Валюта
														  ,СтруктураКурсы["Регл"].Валюта
														  ,СтруктураКурсы["Документ"].Курс
														  ,СтруктураКурсы["Регл"].Курс
														  ,СтруктураКурсы["Документ"].Кратность
														  ,СтруктураКурсы["Регл"].Кратность);
														  
	ДеревоИнформация = Новый ДеревоЗначений;
	ДеревоИнформация.Колонки.Добавить("ЭтоГруппа",Новый ОписаниеТипов("Булево"));
	ДеревоИнформация.Колонки.Добавить("ИмяПараметра");
	ДеревоИнформация.Колонки.Добавить("ЗначениеПараметра");

	// Суммы по документу.
	СтрокаГруппа = ДеревоИнформация.Строки.Добавить();
	СтрокаГруппа.ИмяПараметра = "Суммы документа";
	СтрокаГруппа.ЭтоГруппа    = Истина; 
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма документа:";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(СуммаДокумента, ВалютаДокумента, "0,00");	
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма (регл.):";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(СуммаРегл, СтруктураКурсы["Регл"].Валюта, "0,00");
	
	СтрокаДерева = СтрокаГруппа.Строки.Добавить();
	СтрокаДерева.ИмяПараметра = "Сумма (упр.):";
	СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(СуммаУпр, СтруктураКурсы["Упр"].Валюта, "0,00");
	
	ДобавитьСведенияОбОстаткахПоБюджетуЗакупка(ДеревоИнформация.Строки);
	
	ДобавитьСведенияПоВзаиморасчетамЗакупка(ДеревоИнформация.Строки);
	
	Возврат ДеревоИнформация;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выводит в табличный документ строку дерева значений. Рекурсивный вызов.
// 
// Параметры:
//  СтартоваяСтрока  - КоллекцияСтрокДереваЗначений.
//  Макет - Макет.
//  ТД    - ТабличныйДокумент.
// 
Процедура ВывестиСтрокуДерева(СтартоваяСтрока,Макет,ТД)

	
	Для каждого СтрокаДерева Из СтартоваяСтрока.Строки Цикл
		
		Если НЕ СтрокаДерева.ЭтоГруппа Тогда
			ОблМакета=Макет.ПолучитьОбласть("СтрокаИнформация");
		Иначе	
			ОблМакета=Макет.ПолучитьОбласть("ГруппировкаИнформация1");
		КонецЕсли; 
		
		ОблМакета.Параметры.ИмяПараметра = СтрокаДерева.ИмяПараметра;
		
		Если НЕ СтрокаДерева.ЭтоГруппа Тогда
			ОблМакета.Параметры.ЗначениеПараметра = СтрокаДерева.ЗначениеПараметра;
		КонецЕсли; 
		
		ТД.Вывести(ОблМакета,СтрокаДерева.Уровень()+1);
		
		ВывестиСтрокуДерева(СтрокаДерева,Макет,ТД)
		
	КонецЦикла; 

КонецПроцедуры

// Процедура добавляет сведения об остатках по бюджету.
// 
// Параметры:
//  СтрокиДереваИнформации - СтрокиДереваЗначений.
// 
Процедура ДобавитьСведенияОбОстаткахПоБюджету(СтрокиДереваИнформации)
	
	// Получим данные из заявки.
	ДатаРасхода    = Объект.ДатаРасхода;
	Сценарий	   = Объект.Сценарий;
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение кода. Начало. 12.12.2016{{
	//Периодичность  = Сценарий.бит_Периодичность;
	Периодичность  = Сценарий.ПериодичностьКонтроля;
	// Изменение кода. Конец. 12.12.2016}}
	ВалютаСценария = Сценарий.Валюта;
	
	МассивСтатейОборотов = Объект.Распределение.ВыгрузитьКолонку("СтатьяОборотов");
	МассивСтатейОборотов.Добавить(Объект.СтатьяОборотов);
	
	// Удалим повторяющиеся элементы массива статей оборотов.
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатейОборотов, Истина);
	
	// Получим имя периодичности.
	СтрПериодичность = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования
																		   ,Периодичность);
	// Получим начало и окончание периода от даты расхода.
	НачалоПериода = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаРасхода, Периодичность);
	КонецПериода  = бит_Бюджетирование.ПолучитьКонецПериода(ДатаРасхода , Периодичность);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода" 		, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"  		, Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Сценарий"	  		, Сценарий);
	Запрос.УстановитьПараметр("МассивСтатейОборотов", МассивСтатейОборотов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрольныеЗначенияБюджетов.ЦФО КАК ЦФО,
	|	КонтрольныеЗначенияБюджетов.СтатьяОборотов КАК СтатьяОборотов,
	|	КонтрольныеЗначенияБюджетов.СценарийКонтролируемый КАК СценарийКонтролируемый,
	|	КонтрольныеЗначенияБюджетов.Аналитика_1 КАК Аналитика_1,
	|	КонтрольныеЗначенияБюджетов.Аналитика_2 КАК Аналитика_2,
	|	КонтрольныеЗначенияБюджетов.Аналитика_3 КАК Аналитика_3,
	|	КонтрольныеЗначенияБюджетов.Аналитика_4 КАК Аналитика_4,
	|	КонтрольныеЗначенияБюджетов.Аналитика_5 КАК Аналитика_5,
	|	КонтрольныеЗначенияБюджетов.Аналитика_6 КАК Аналитика_6,
	|	КонтрольныеЗначенияБюджетов.Аналитика_7 КАК Аналитика_7,
	|	КонтрольныеЗначенияБюджетов.Контрагент КАК Контрагент,
	|	КонтрольныеЗначенияБюджетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КонтрольныеЗначенияБюджетов.Проект КАК Проект,
	|	КонтрольныеЗначенияБюджетов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КонтрольныеЗначенияБюджетов.БанковскийСчет КАК БанковскийСчет,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначенияБюджетов.СуммаСценарийКонтрольОборот, 0)) КАК Контроль,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнениеОборот, 0)) КАК Исполнение,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначенияБюджетов.СуммаСценарийКонтрольОборот, 0) - ЕСТЬNULL(КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнениеОборот, 0)) КАК Разность
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			"+СтрПериодичность+",
	|			Сценарий = &Сценарий 
	|               И СценарийКонтролируемый <> ЗНАЧЕНИЕ(Перечисление.бит_РежимыКонтроляПоБюджету.ГрафикиДоговоров)
	|				И СтатьяОборотов В (&МассивСтатейОборотов)
	|				%Отбор%) КАК КонтрольныеЗначенияБюджетов
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрольныеЗначенияБюджетов.ЦФО,
	|	КонтрольныеЗначенияБюджетов.СтатьяОборотов,
	|	КонтрольныеЗначенияБюджетов.СценарийКонтролируемый,
	|	КонтрольныеЗначенияБюджетов.Аналитика_1,
	|	КонтрольныеЗначенияБюджетов.Аналитика_2,
	|	КонтрольныеЗначенияБюджетов.Аналитика_3,
	|	КонтрольныеЗначенияБюджетов.Аналитика_4,
	|	КонтрольныеЗначенияБюджетов.Аналитика_5,
	|	КонтрольныеЗначенияБюджетов.Аналитика_6,
	|	КонтрольныеЗначенияБюджетов.Аналитика_7,
	|	КонтрольныеЗначенияБюджетов.Контрагент,
	|	КонтрольныеЗначенияБюджетов.ДоговорКонтрагента,
	|	КонтрольныеЗначенияБюджетов.Проект,
	|	КонтрольныеЗначенияБюджетов.НоменклатурнаяГруппа,
	|	КонтрольныеЗначенияБюджетов.БанковскийСчет
	|ИТОГИ
	|	СУММА(Контроль),
	|	СУММА(Исполнение),
	|	СУММА(Разность)
	|ПО
	|	ЦФО,
	|	СтатьяОборотов,
	|	СценарийКонтролируемый,
	|	Аналитика_1,
	|	Аналитика_2,
	|	Аналитика_3,
	|	Аналитика_4,
	|	Аналитика_5,
	|	Аналитика_6,
	|	Аналитика_7,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	Проект,
	|	НоменклатурнаяГруппа,
	|	БанковскийСчет";
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сценарий");
	МассивИсключений.Добавить("СтатьяОборотов");
	
	мИзмеренияДоп = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Все","Тип",,МассивИсключений);
	
	ТекстОтбор = "";
	Для каждого КлючИЗначение Из мИзмеренияДоп Цикл
		
		ИмяПоля = "КонтрольныеЗначенияБюджетов."+КлючИЗначение.Ключ;
		СтрОтбор = КлючИЗначение.Ключ+" В (&Массив"+КлючИЗначение.Ключ+")";
		ТекстОтбор = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(ТекстОтбор,СтрОтбор," И ");
		
	КонецЦикла; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%Отбор%"," И "+ТекстОтбор);
	
	ТаблицаРаспределение = Объект.Распределение.Выгрузить();
	
	// Заполним параметры.
	Для каждого КлючИЗначение Из мИзмеренияДоп Цикл
		
		ИмяИзмерения = КлючИЗначение.Ключ;
		Параметры    = КлючИЗначение.Значение;
		
		Если ТаблицаРаспределение.Колонки.Найти(ИмяИзмерения) = Неопределено Тогда
			МассивПараметров = Новый Массив;
		Иначе	
			МассивПараметров = Объект.Распределение.ВыгрузитьКолонку(ИмяИзмерения);
			бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивПараметров);		 
		КонецЕсли;
		
		МассивПараметров.Добавить(Неопределено);
		МассивПараметров.Добавить(Параметры.ПривестиЗначение());
		
		Запрос.УстановитьПараметр("Массив"+ИмяИзмерения,МассивПараметров);
		
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Остатки по бюджету.
	СтрокаГруппа = СтрокиДереваИнформации.Добавить();
	СтрокаГруппа.ИмяПараметра = "Остатки по бюджету";
	СтрокаГруппа.ЭтоГруппа    = Истина; 
			
	Если РезультатЗапроса.Пустой() Тогда
		
		// Выведем пустые суммы.
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Остаток:";
		СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(0, ВалютаСценария, "0,00");
		
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Исполнение:";
		СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(0, ВалютаСценария, "0,00");
		
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Разность:";
		СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(0, ВалютаСценария, "0,00");
		
		Возврат;
	КонецЕсли;
	
	// Сформируем массив имен аналитики для формирования строки бюджета.
	МассивАналитик = Новый Массив;
	МассивАналитик.Добавить("ЦФО");
	МассивАналитик.Добавить("СтатьяОборотов");
	МассивАналитик.Добавить("СценарийКонтролируемый");
	МассивАналитик.Добавить("Аналитика_1");
	МассивАналитик.Добавить("Аналитика_2");
	МассивАналитик.Добавить("Аналитика_3");
	МассивАналитик.Добавить("Аналитика_4");
	МассивАналитик.Добавить("Аналитика_5");
	МассивАналитик.Добавить("Аналитика_6");
	МассивАналитик.Добавить("Аналитика_7");
	МассивАналитик.Добавить("Контрагент");
	МассивАналитик.Добавить("ДоговорКонтрагента");
	МассивАналитик.Добавить("Проект");
	МассивАналитик.Добавить("НоменклатурнаяГруппа");
	МассивАналитик.Добавить("БанковскийСчет");
	
	// Выведем данные остатков по бюджету.
	ВывестиДанныеОстатковПоБюджетам(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам)
								   ,СтрокаГруппа
								   ,ВалютаСценария
								   ,МассивАналитик);
	
КонецПроцедуры

// Процедура выводит данные остатков по бюджету. Рекурсивный вызов.
// 
// Параметры:
//  СтрокаГруппа     - СтрокаДереваЗначений.
//  ВыборкаИзЗапроса - ВыборкаИзЗапроса.
// 
Процедура ВывестиДанныеОстатковПоБюджетам(ВыборкаИзЗапроса, СтрокаГруппа, ВалютаСценария, МассивАналитик)
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		
		ДопВыборкаИзЗапроса = ВыборкаИзЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если Не ДопВыборкаИзЗапроса.Количество() = 0 Тогда
			
			// Выведем данные остатков по бюджету.
			ВывестиДанныеОстатковПоБюджетам(ДопВыборкаИзЗапроса, СтрокаГруппа, ВалютаСценария, МассивАналитик);
			
		ИначеЕсли Не ВыборкаИзЗапроса.Контроль = 0
			Или Не ВыборкаИзЗапроса.Исполнение = 0
			Или Не ВыборкаИзЗапроса.Разность = 0 Тогда
			
			// Выведем суммы.
			СтрокаПодГруппа = СтрокаГруппа.Строки.Добавить();
			СтрокаПодГруппа.ИмяПараметра = СформироватьПредставлениеАналитик(ВыборкаИзЗапроса, МассивАналитик);
			СтрокаПодГруппа.ЭтоГруппа	 = Истина;
			
			// Контролируемая.
			СтрокаДерева = СтрокаПодГруппа.Строки.Добавить();
			СтрокаДерева.ИмяПараметра 	   = "Контролируемая статья";
			СтрокаДерева.ЗначениеПараметра = Не ВыборкаИзЗапроса.СтатьяОборотов.НеКонтролировать_Заявки;
	
			СтрокаДерева = СтрокаПодГруппа.Строки.Добавить();
			СтрокаДерева.ИмяПараметра = "Остаток:";
			СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(ВыборкаИзЗапроса.Контроль, ВалютаСценария, "0,00");
			
			СтрокаДерева = СтрокаПодГруппа.Строки.Добавить();
			СтрокаДерева.ИмяПараметра = "Исполнение:";
			СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(ВыборкаИзЗапроса.Исполнение, ВалютаСценария, "0,00");
			
			СтрокаДерева = СтрокаПодГруппа.Строки.Добавить();
			СтрокаДерева.ИмяПараметра = "Разность:";
			СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(ВыборкаИзЗапроса.Разность, ВалютаСценария, "0,00");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует представление аналитики остатка по бюджету.
// 
// Параметры:
//  ВыборкаИзЗапроса - ВыборкаИзЗапроса.
//  МассивАналитик   - Массив.
// 
// Возвращаемое значение:
//  Представление - Строка.
// 
Функция СформироватьПредставлениеАналитик(ВыборкаИзЗапроса, МассивАналитик)
	
	Представление = "";
	
	Для Каждого ТекИмяАналитики Из МассивАналитик Цикл
		
		ТекЗначениеАналитики = ВыборкаИзЗапроса[ТекИмяАналитики];
		
		Если ЗначениеЗаполнено(ТекЗначениеАналитики) Тогда
			
			Представление = Представление + ?(ПустаяСтрока(Представление), "", "/") + Строка(ТекЗначениеАналитики);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

// Процедура добавляет сведения по документам КорректировкаКонтрольныхЗначений.
// 
Процедура ДобавитьСведенияПоКорректировкамКонтрольныхЗначений(СтрокиДереваИнформации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_КорректировкаКонтрольныхЗначений.Ссылка
	|ИЗ
	|	Документ.бит_КорректировкаКонтрольныхЗначений КАК бит_КорректировкаКонтрольныхЗначений
	|ГДЕ
	|	бит_КорректировкаКонтрольныхЗначений.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	СтрокаГруппа = СтрокиДереваИнформации.Добавить();
	СтрокаГруппа.ИмяПараметра = "Корректировки контрольных значений";
	СтрокаГруппа.ЭтоГруппа    = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = Выборка.Ссылка;
		СтрокаДерева.ЭтоГруппа	  = Истина;
		// СтрокаДерева.ЗначениеПараметра = ;
		
	КонецЦикла;
	
КонецПроцедуры
	
// Процедура добавляет сведения по взаиморасчетам.
// 
// Параметры:
//  СтрокиДереваИнформации - СтрокиДереваЗначений.
// 
Процедура ДобавитьСведенияПоВзаиморасчетам(СтрокиДереваИнформации)
	
	// Отображаем информацию только для операции "Оплата поставщику".
	Если Не Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыБухгалтерии.Хозрасчетный) Тогда
		Возврат;
	КонецЕсли; 
	
	// Получим данные из заявки.
	МассивДоговоров = Объект.Распределение.ВыгрузитьКолонку("ДоговорКонтрагента");
	МассивДоговоров.Добавить(Объект.ДоговорКонтрагента);
	
	// Удалим повторяющиеся элементы массива договоров.
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров, Истина);
	
	Если Не ЗначениеЗаполнено(МассивДоговоров) Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем таблицу договоров.
	ТаблицаДоговоров = Новый ТаблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	// Заполним таблицу договоров.
	Для Каждого ТекДоговор Из МассивДоговоров Цикл
		НоваяСтрока = ТаблицаДоговоров.Добавить();
		НоваяСтрока.Договор = ТекДоговор;
	КонецЦикла;
	
	ДатаСведений = ТекущаяДата();
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками); 	   // Счет 60
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами); // Счет 76
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДоговоров", ТаблицаДоговоров);
	Запрос.УстановитьПараметр("ДатаОстатков"    , ДатаСведений);
	Запрос.УстановитьПараметр("МассивСубконто"  , МассивСубконто);
	Запрос.УстановитьПараметр("МассивСчетов"    , МассивСчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДоговоров.Договор
	|ПОМЕСТИТЬ ТаблицаДоговоров
	|ИЗ
	|	&ТаблицаДоговоров КАК ТаблицаДоговоров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДоговоров.Договор КАК Договор,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ТаблицаДоговоров.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК ОстДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК ОстКт,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) = 0
	|				ИЛИ НЕ ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОстатокЕсть
	|ИЗ
	|	ТаблицаДоговоров КАК ТаблицаДоговоров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаОстатков,
	|				Счет В ИЕРАРХИИ (&МассивСчетов),
	|				&МассивСубконто,
	|				Субконто2 В
	|					(ВЫБРАТЬ
	|						ТаблицаДоговоров.Договор
	|					ИЗ
	|						ТаблицаДоговоров КАК ТаблицаДоговоров)) КАК ХозрасчетныйОстатки
	|		ПО ТаблицаДоговоров.Договор = ХозрасчетныйОстатки.Субконто2
	|ИТОГИ
	|	СУММА(ОстДт),
	|	СУММА(ОстКт)
	|ПО
	|	ОстатокЕсть,
	|	Договор,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДоговоров";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Данные по взаиморасчетам.
	СтрокаГруппа = СтрокиДереваИнформации.Добавить();
	СтрокаГруппа.ИмяПараметра = "Взаиморасчеты";
	СтрокаГруппа.ЭтоГруппа    = Истина;
	
	// Сформируем структуру префиксов остатков.
	СтруктураПрефиксов = Новый Структура;
	СтруктураПрефиксов.Вставить("Дт", "Дебиторская задолженность");
	СтруктураПрефиксов.Вставить("Кт", "Кредиторская задолженность");
	
	ВыборкаИзЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОстатокЕсть");
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		
		ОстатокЕсть = ВыборкаИзЗапроса.ОстатокЕсть;
	
		ВыборкаПоДоговорам = ВыборкаИзЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
		
		Пока ВыборкаПоДоговорам.Следующий() Цикл
			
			ТекДоговор 			 = ВыборкаПоДоговорам.Договор;
			ВалютаВзаиморасчетов = ВыборкаПоДоговорам.ВалютаВзаиморасчетов;
			
			// Выведем суммы.
			СтрокаПодГруппа = СтрокаГруппа.Строки.Добавить();
			СтрокаПодГруппа.ИмяПараметра = Строка(ТекДоговор);
			СтрокаПодГруппа.ЭтоГруппа	 = Истина;
			
			// Если остатка нет, тогда.
			Если Не ОстатокЕсть Тогда
				
				// Выведем нулевую задолженность.
				СтрокаЗадолжность = СтрокаПодГруппа.Строки.Добавить();
				СтрокаЗадолжность.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(0, ВалютаВзаиморасчетов, "0,00");
					
				Продолжить;
			КонецЕсли;
			
			ВыборкаПоСчетам = ВыборкаПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");
			
			Пока ВыборкаПоСчетам.Следующий() Цикл
				
				Для Каждого КлючЗначение Из СтруктураПрефиксов Цикл
					
					ТекСумма = ВыборкаПоСчетам["Ост" + КлючЗначение.Ключ];
					
					Если Не ТекСумма = 0 Тогда
						
						НайденнаяСтрока = СтрокаПодГруппа.Строки.Найти(КлючЗначение.Значение, "ИмяПараметра");
						
						Если НайденнаяСтрока = Неопределено Тогда
							СтрокаГруппаСчетов = СтрокаПодГруппа.Строки.Добавить();
							СтрокаГруппаСчетов.ИмяПараметра = КлючЗначение.Значение;
							СтрокаГруппаСчетов.ЭтоГруппа	= Истина;
						Иначе
							СтрокаГруппаСчетов = НайденнаяСтрока;
						КонецЕсли;
						
						КурсКратностьВалюты = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаСведений);
						
						СуммаВВалютеВзаиморасчетов = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСумма, 
																								     мВалютаРегламентированногоУчета, ВалютаВзаиморасчетов,
																									 1, КурсКратностьВалюты.Курс,
																									 1, КурсКратностьВалюты.Кратность);
						
						СтрокаДерева = СтрокаГруппаСчетов.Строки.Добавить();
						СтрокаДерева.ИмяПараметра 	   = Строка(ВыборкаПоСчетам.Счет);
						СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(СуммаВВалютеВзаиморасчетов
																					,ВалютаВзаиморасчетов
																					,"0,00");
						
					КонецЕсли;
					
				КонецЦикла; // СтруктураПрефиксов.
				
			КонецЦикла; // ВыборкаПоСчетам.
			
		КонецЦикла; // ВыборкаПоДоговорам. 
		
	КонецЦикла; // ВыборкаИзЗапроса.
	
КонецПроцедуры

// Процедура добавляет сведения об остатках по бюджету.
// 
// Параметры:
//  СтрокиДереваИнформации - СтрокиДереваЗначений.
// 
Процедура ДобавитьСведенияОбОстаткахПоБюджетуЗакупка(СтрокиДереваИнформации)
	
	// Получим данные из заявки.
	ДатаРасхода    = Объект.ДатаЗакупкиПлан;
	Сценарий	   = Объект.Сценарий;
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение кода. Начало. 12.12.2016{{
	//Периодичность  = Сценарий.бит_Периодичность;
	Периодичность  = Сценарий.ПериодичностьКонтроля;
	// Изменение кода. Конец. 12.12.2016}}
	ВалютаСценария = Сценарий.Валюта;
	
	МассивСтатейОборотов = Новый Массив;
	МассивСтатейОборотов.Добавить(Объект.СтатьяОборотов);
	
	// Получим имя периодичности.
	СтрПериодичность = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования
																		   ,Периодичность);
	// Получим начало и окончание периода от даты расхода.
	НачалоПериода = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаРасхода, Периодичность);
	КонецПериода  = бит_Бюджетирование.ПолучитьКонецПериода(ДатаРасхода , Периодичность);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода" 		, НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"  		, Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Сценарий"	  		, Сценарий);
	Запрос.УстановитьПараметр("МассивСтатейОборотов", МассивСтатейОборотов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрольныеЗначенияБюджетов.ЦФО КАК ЦФО,
	|	КонтрольныеЗначенияБюджетов.СтатьяОборотов КАК СтатьяОборотов,
	|	КонтрольныеЗначенияБюджетов.СценарийКонтролируемый КАК СценарийКонтролируемый,
	|	КонтрольныеЗначенияБюджетов.Аналитика_1 КАК Аналитика_1,
	|	КонтрольныеЗначенияБюджетов.Аналитика_2 КАК Аналитика_2,
	|	КонтрольныеЗначенияБюджетов.Аналитика_3 КАК Аналитика_3,
	|	КонтрольныеЗначенияБюджетов.Аналитика_4 КАК Аналитика_4,
	|	КонтрольныеЗначенияБюджетов.Аналитика_5 КАК Аналитика_5,
	|	КонтрольныеЗначенияБюджетов.Аналитика_6 КАК Аналитика_6,
	|	КонтрольныеЗначенияБюджетов.Аналитика_7 КАК Аналитика_7,
	|	КонтрольныеЗначенияБюджетов.Контрагент КАК Контрагент,
	|	КонтрольныеЗначенияБюджетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КонтрольныеЗначенияБюджетов.Проект КАК Проект,
	|	КонтрольныеЗначенияБюджетов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КонтрольныеЗначенияБюджетов.БанковскийСчет КАК БанковскийСчет,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначенияБюджетов.СуммаСценарийКонтрольОборот, 0)) КАК Контроль,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнениеОборот, 0)) КАК Исполнение,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначенияБюджетов.СуммаСценарийКонтрольОборот, 0) - ЕСТЬNULL(КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнениеОборот, 0)) КАК Разность
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			" + СтрПериодичность + ",
	|			Сценарий = &Сценарий 
	|               И СценарийКонтролируемый <> Значение(Перечисление.бит_РежимыКонтроляПоБюджету.ГрафикиДоговоров)
	|				И СтатьяОборотов В (&МассивСтатейОборотов)
	|				%Отбор%) КАК КонтрольныеЗначенияБюджетов
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрольныеЗначенияБюджетов.ЦФО,
	|	КонтрольныеЗначенияБюджетов.СтатьяОборотов,
	|	КонтрольныеЗначенияБюджетов.СценарийКонтролируемый,
	|	КонтрольныеЗначенияБюджетов.Аналитика_1,
	|	КонтрольныеЗначенияБюджетов.Аналитика_2,
	|	КонтрольныеЗначенияБюджетов.Аналитика_3,
	|	КонтрольныеЗначенияБюджетов.Аналитика_4,
	|	КонтрольныеЗначенияБюджетов.Аналитика_5,
	|	КонтрольныеЗначенияБюджетов.Аналитика_6,
	|	КонтрольныеЗначенияБюджетов.Аналитика_7,
	|	КонтрольныеЗначенияБюджетов.Контрагент,
	|	КонтрольныеЗначенияБюджетов.ДоговорКонтрагента,
	|	КонтрольныеЗначенияБюджетов.Проект,
	|	КонтрольныеЗначенияБюджетов.НоменклатурнаяГруппа,
	|	КонтрольныеЗначенияБюджетов.БанковскийСчет
	|ИТОГИ
	|	СУММА(Контроль),
	|	СУММА(Исполнение),
	|	СУММА(Разность)
	|ПО
	|	ЦФО,
	|	СтатьяОборотов,
	|	СценарийКонтролируемый,
	|	Аналитика_1,
	|	Аналитика_2,
	|	Аналитика_3,
	|	Аналитика_4,
	|	Аналитика_5,
	|	Аналитика_6,
	|	Аналитика_7,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	Проект,
	|	НоменклатурнаяГруппа,
	|	БанковскийСчет";
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сценарий");
	МассивИсключений.Добавить("СтатьяОборотов");
	
	мИзмеренияДоп = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Все","Тип",,МассивИсключений);
	
	ТекстОтбор = "";
	Для каждого КлючИЗначение Из мИзмеренияДоп Цикл
		
		ИмяПоля = "КонтрольныеЗначенияБюджетов."+КлючИЗначение.Ключ;
		СтрОтбор = КлючИЗначение.Ключ+" В (&Массив"+КлючИЗначение.Ключ+")";
		ТекстОтбор = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(ТекстОтбор,СтрОтбор," И ");
		
	КонецЦикла; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%Отбор%"," И "+ТекстОтбор);
	
	// Заполним параметры.
	Для каждого КлючИЗначение Из мИзмеренияДоп Цикл
		
		ИмяИзмерения = КлючИЗначение.Ключ;
		Параметры    = КлючИЗначение.Значение;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Объект[ИмяИзмерения]);
		
		МассивПараметров.Добавить(Неопределено);
		МассивПараметров.Добавить(Параметры.ПривестиЗначение());
		
		Запрос.УстановитьПараметр("Массив"+ИмяИзмерения,МассивПараметров);
		
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Остатки по бюджету.
	СтрокаГруппа = СтрокиДереваИнформации.Добавить();
	СтрокаГруппа.ИмяПараметра = "Остатки по бюджету";
	СтрокаГруппа.ЭтоГруппа    = Истина; 
			
	Если РезультатЗапроса.Пустой() Тогда
		
		// Выведем пустые суммы.
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Остаток:";
		СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(0, ВалютаСценария, "0,00");
		
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Исполнение:";
		СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(0, ВалютаСценария, "0,00");
		
		СтрокаДерева = СтрокаГруппа.Строки.Добавить();
		СтрокаДерева.ИмяПараметра = "Разность:";
		СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(0, ВалютаСценария, "0,00");
		
		Возврат;
	КонецЕсли;
	
	// Сформируем массив имен аналитики для формирования строки бюджета.
	МассивАналитик = Новый Массив;
	МассивАналитик.Добавить("ЦФО");
	МассивАналитик.Добавить("СтатьяОборотов");
	МассивАналитик.Добавить("СценарийКонтролируемый");
	МассивАналитик.Добавить("Аналитика_1");
	МассивАналитик.Добавить("Аналитика_2");
	МассивАналитик.Добавить("Аналитика_3");
	МассивАналитик.Добавить("Аналитика_4");
	МассивАналитик.Добавить("Аналитика_5");
	МассивАналитик.Добавить("Аналитика_6");
	МассивАналитик.Добавить("Аналитика_7");
	МассивАналитик.Добавить("Контрагент");
	МассивАналитик.Добавить("ДоговорКонтрагента");
	МассивАналитик.Добавить("Проект");
	МассивАналитик.Добавить("НоменклатурнаяГруппа");
	МассивАналитик.Добавить("БанковскийСчет");
	
	// Выведем данные остатков по бюджету.
	ВывестиДанныеОстатковПоБюджетам(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам)
								   ,СтрокаГруппа
								   ,ВалютаСценария
								   ,МассивАналитик);
	
КонецПроцедуры

// Процедура добавляет сведения по взаиморасчетам.
// 
// Параметры:
//  СтрокиДереваИнформации - СтрокиДереваЗначений.
// 
Процедура ДобавитьСведенияПоВзаиморасчетамЗакупка(СтрокиДереваИнформации)

	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыБухгалтерии.Хозрасчетный) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем таблицу договоров.
	ТаблицаДоговоров = Новый ТаблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	НоваяСтрока = ТаблицаДоговоров.Добавить();
	НоваяСтрока.Договор = Объект.ДоговорКонтрагента;
	
	ДатаСведений = ТекущаяДата();
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками); 	   // Счет 60.
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами); // Счет 76.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДоговоров", ТаблицаДоговоров);
	Запрос.УстановитьПараметр("ДатаОстатков"    , ДатаСведений);
	Запрос.УстановитьПараметр("МассивСубконто"  , МассивСубконто);
	Запрос.УстановитьПараметр("МассивСчетов"    , МассивСчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДоговоров.Договор
	|ПОМЕСТИТЬ ТаблицаДоговоров
	|ИЗ
	|	&ТаблицаДоговоров КАК ТаблицаДоговоров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДоговоров.Договор КАК Договор,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ТаблицаДоговоров.Договор.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК ОстДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК ОстКт,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) = 0
	|				ИЛИ НЕ ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОстатокЕсть
	|ИЗ
	|	ТаблицаДоговоров КАК ТаблицаДоговоров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаОстатков,
	|				Счет В ИЕРАРХИИ (&МассивСчетов),
	|				&МассивСубконто,
	|				Субконто2 В
	|					(ВЫБРАТЬ
	|						ТаблицаДоговоров.Договор
	|					ИЗ
	|						ТаблицаДоговоров КАК ТаблицаДоговоров)) КАК ХозрасчетныйОстатки
	|		ПО ТаблицаДоговоров.Договор = ХозрасчетныйОстатки.Субконто2
	|ИТОГИ
	|	СУММА(ОстДт),
	|	СУММА(ОстКт)
	|ПО
	|	ОстатокЕсть,
	|	Договор,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДоговоров";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Данные по взаиморасчетам.
	СтрокаГруппа = СтрокиДереваИнформации.Добавить();
	СтрокаГруппа.ИмяПараметра = "Взаиморасчеты";
	СтрокаГруппа.ЭтоГруппа    = Истина;
	
	// Сформируем структуру префиксов остатков.
	СтруктураПрефиксов = Новый Структура;
	СтруктураПрефиксов.Вставить("Дт", "Дебиторская задолженность");
	СтруктураПрефиксов.Вставить("Кт", "Кредиторская задолженность");
	
	ВыборкаИзЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОстатокЕсть");
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		
		ОстатокЕсть = ВыборкаИзЗапроса.ОстатокЕсть;
	
		ВыборкаПоДоговорам = ВыборкаИзЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
		
		Пока ВыборкаПоДоговорам.Следующий() Цикл
			
			ТекДоговор 			 = ВыборкаПоДоговорам.Договор;
			ВалютаВзаиморасчетов = ВыборкаПоДоговорам.ВалютаВзаиморасчетов;
			
			// Выведем суммы.
			СтрокаПодГруппа = СтрокаГруппа.Строки.Добавить();
			СтрокаПодГруппа.ИмяПараметра = Строка(ТекДоговор);
			СтрокаПодГруппа.ЭтоГруппа	 = Истина;
			
			// Если остатка нет, тогда.
			Если Не ОстатокЕсть Тогда
				
				// Выведем нулевую задолженность.
				СтрокаЗадолжность = СтрокаПодГруппа.Строки.Добавить();
				СтрокаЗадолжность.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(0, ВалютаВзаиморасчетов, "0,00");
					
				Продолжить;
			КонецЕсли;
			
			ВыборкаПоСчетам = ВыборкаПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");
			
			Пока ВыборкаПоСчетам.Следующий() Цикл
				
				Для Каждого КлючЗначение Из СтруктураПрефиксов Цикл
					
					ТекСумма = ВыборкаПоСчетам["Ост" + КлючЗначение.Ключ];
					
					Если Не ТекСумма = 0 Тогда
						
						НайденнаяСтрока = СтрокаПодГруппа.Строки.Найти(КлючЗначение.Значение, "ИмяПараметра");
						
						Если НайденнаяСтрока = Неопределено Тогда
							СтрокаГруппаСчетов = СтрокаПодГруппа.Строки.Добавить();
							СтрокаГруппаСчетов.ИмяПараметра = КлючЗначение.Значение;
							СтрокаГруппаСчетов.ЭтоГруппа	= Истина;
						Иначе
							СтрокаГруппаСчетов = НайденнаяСтрока;
						КонецЕсли;
						
						КурсКратностьВалюты = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаСведений);
						
						СуммаВВалютеВзаиморасчетов = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСумма, 
																								     мВалютаРегламентированногоУчета, ВалютаВзаиморасчетов,
																									 1, КурсКратностьВалюты.Курс,
																									 1, КурсКратностьВалюты.Кратность);
						
						СтрокаДерева = СтрокаГруппаСчетов.Строки.Добавить();
						СтрокаДерева.ИмяПараметра 	   = Строка(ВыборкаПоСчетам.Счет);
						СтрокаДерева.ЗначениеПараметра = бит_ОбщегоНазначения.ФорматСумм(СуммаВВалютеВзаиморасчетов
																					,ВалютаВзаиморасчетов
																					,"0,00");
						
					КонецЕсли;
					
				КонецЦикла; // СтруктураПрефиксов.
				
			КонецЦикла; // ВыборкаПоСчетам.
			
		КонецЦикла; // ВыборкаПоДоговорам. 
		
	КонецЦикла; // ВыборкаИзЗапроса.
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаУправленческогоУчета     = Константы.бит_ВалютаУправленческогоУчета.Получить();

#КонецОбласти

#КонецЕсли
