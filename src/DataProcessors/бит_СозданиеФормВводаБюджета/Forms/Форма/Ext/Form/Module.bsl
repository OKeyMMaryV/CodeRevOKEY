
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    // Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
    
    ПодготовитьФормуНаСервере();
    
    УстановитьЗначенияПоУмолчанию();
    
    // Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	, "ФормыВводаБюджета"
																	, фНастройкиИзмерений.ИзмеренияДоп
																	, фНастройкиИзмерений.НастройкиИзмерений);                                                               
                                                                    
                                                                    
    Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
        Элементы.ФормыВводаБюджетаПроект.Видимость               = Ложь;
        Элементы.ФормыВводаБюджетаКонтрагент.Видимость           = Ложь;
        Элементы.ФормыВводаБюджетаДоговорКонтрагента.Видимость   = Ложь;
        Элементы.ФормыВводаБюджетаНоменклатурнаяГруппа.Видимость = Ложь;
        Элементы.ФормыВводаБюджетаБанковскийСчет.Видимость       = Ложь;
    Иначе
        Элементы.ФормыВводаБюджетаАналитика_8.Видимость  = Ложь;
        Элементы.ФормыВводаБюджетаАналитика_9.Видимость  = Ложь;
        Элементы.ФормыВводаБюджетаАналитика_10.Видимость = Ложь;
        Элементы.ФормыВводаБюджетаАналитика_11.Видимость = Ложь;
        Элементы.ФормыВводаБюджетаАналитика_12.Видимость = Ложь;
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
    
    Если Не ЗначениеЗаполнено(НастройкаИмени) ИЛИ НастройкаИмени.НайтиПоЗначению("Префикс") <> Неопределено Тогда
        СформироватьНастройкиИмени(НастройкаИмени);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПланированияДатаНачалаПриИзменении(Элемент)

    ПересчитатьКурсВалюты(Объект.Сценарий, Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента, Объект.ПериодПланирования.ДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКПапкеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
   
    Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		
	ФайловаяСистемаКлиент.ВыбратьКаталог(Новый ОписаниеОповещения("ПутьКПапкеНачалоВыбораЗавершение", ЭтотОбъект));
    
КонецПроцедуры

// Обработчик завершения выбора каталога сохраненных файлов.
//  См. Синтакс-помощник: ДиалогВыбораФайла.Показать().
//
&НаКлиенте
Процедура ПутьКПапкеНачалоВыбораЗавершение(Папка, ДополнительныеПараметры) Экспорт 
	
	Если Не ПустаяСтрока(Папка) Тогда 
		Объект.ПутьКПапке = Папка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
    
    ПересчитатьКурсВалюты(Объект.Сценарий, Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента, Объект.ПериодПланирования.ДатаНачала);
    
КонецПроцедуры

&НаКлиенте
Процедура ПутьКПапкеОткрытие(Элемент, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаВыгрузкаExcel Тогда
		Полеформы = "КаталогВыгрузки";
	Иначе	
		Полеформы = "КаталогЗагрузки";
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ПутьКПапкеОткрытиеЗавершение", ЭтотОбъект); 
	ПроверитьКаталог(Полеформы, Оповещение);
    
КонецПроцедуры

// Обработчик завершения открытия конечной папки.
//
// Параметры:
//  ПутьКПапке		 - Строкат - путь к конечной папке.
//  Дополнительно	 - Произвольный -  значение, которое было указано при создании объекта ОписаниеОповещения.
//
&НаКлиенте
Процедура ПутьКПапкеОткрытиеЗавершение(ПутьКПапке, Дополнительно) Экспорт

	Если НЕ ПустаяСтрока(ПутьКПапке) Тогда
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(ПутьКПапке);
	КонецЕсли; 

КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормыВводаБюджета

&НаКлиенте
Процедура ФормыВводаБюджетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    ТекущиеДанные = Элементы.ФормыВводаБюджета.ТекущиеДанные;
    
    Отказ = Истина;
    
    Если Копирование Тогда
        НовСтр = Объект.ФормыВводаБюджета.Добавить();
        ЗаполнитьЗначенияСвойств(НовСтр, ТекущиеДанные, , "Док_ФормаВводаБюджета, Док_ИмяФайла, Док_КоличествоРазворачивать, Док_ИдКартинки, Док_ВыгруженШаблонВExcel, Выбрать");
    Иначе
        НовСтр = Объект.ФормыВводаБюджета.Добавить();
    КонецЕсли;
    
    НовСтр.Док_ИдКартинки = 0;
    
КонецПроцедуры

&НаКлиенте
Процедура ФормыВводаБюджетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    Если Поле.Имя = "ФормыВводаБюджетаФормаВводаБюджета" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Док_ФормаВводаБюджета) Тогда
        ПоказатьЗначение(, Элемент.ТекущиеДанные.Док_ФормаВводаБюджета);   
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ФормыВводаБюджетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.бит_НастройкиФормВводаБюджета") Тогда 		
        НовСтр = Объект.ФормыВводаБюджета.Добавить();
        НовСтр.НастройкаФормы = ВыбранноеЗначение;
        НовСтр.Док_ИдКартинки = 0;
        ТекущиеДанные = Элементы.ФормыВводаБюджета.ТекущиеДанные;
        ФормыВводаБюджетаНастройкаФормыПриИзмененииНаСервере(НовСтр.ПолучитьИдентификатор());
	КонецЕсли; 
	  	
КонецПроцедуры

&НаКлиенте
Процедура ФормыВводаБюджетаExcelВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    Если Поле.Имя = "ФормыВводаБюджетаExcelДок_ФормаВводаБюджета" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Док_ФормаВводаБюджета) Тогда
        ПоказатьЗначение(, Элемент.ТекущиеДанные.Док_ФормаВводаБюджета);   
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ФормыВводаБюджетаНастройкаФормыПриИзменении(Элемент)
    
    ТекущиеДанные = Элементы.ФормыВводаБюджета.ТекущиеДанные;
    
    ФормыВводаБюджетаНастройкаФормыПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
    
КонецПроцедуры

&НаСервере
Процедура ФормыВводаБюджетаНастройкаФормыПриИзмененииНаСервере(Ид)
     
    ТекущиеДанные = Объект.ФормыВводаБюджета.НайтиПоИдентификатору(Ид);
    
    Если ЗначениеЗаполнено(ТекущиеДанные.НастройкаФормы) Тогда
            
        СтрНастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(ТекущиеДанные.НастройкаФормы);
        Для каждого КиЗ Из СтрНастройкиФормы.Измерения Цикл
            
            ТекОписание = КиЗ.Значение;
            Если ТекОписание.СпособЗаполнения <> Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать 
                И ЗначениеЗаполнено(ТекОписание.ЗначениеПоУмолчанию) Тогда
                
                ТекущиеДанные[ТекОписание.Имя] = ТекОписание.ЗначениеПоУмолчанию;
            КонецЕсли; 
        КонецЦикла; // СтрНастройкиФормы.
    КонецЕсли; // НастройкаФормы.  
                   
КонецПроцедуры

&НаКлиенте
Процедура ФормыВводаБюджетаВалютаДокументаПриИзменении(Элемент)
    
    ТекущиеДанные = Элементы.ФормыВводаБюджета.ТекущиеДанные;
    ПересчитатьКурсВалюты(ТекущиеДанные.Сценарий, ТекущиеДанные.ВалютаДокумента, ТекущиеДанные.КурсДокумента, ТекущиеДанные.КратностьДокумента, Объект.ПериодПланирования.ДатаНачала);
     
КонецПроцедуры

&НаКлиенте
Процедура ФормыВводаБюджетаДок_ФормаВводаБюджетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    ТекущиеДанные = Элементы.ФормыВводаБюджета.ТекущиеДанные;
    
    Если ТекущиеДанные.Док_ВыгруженШаблонВExcel Тогда
        СтандартнаяОбработка = Ложь;   
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ФормыВводаБюджетаДок_ФормаВводаБюджетаПриИзменении(Элемент)
    
    ТекущиеДанные = Элементы.ФормыВводаБюджета.ТекущиеДанные;
    ФормыВводаБюджетаДок_ФормаВводаБюджетаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
         
КонецПроцедуры

&НаСервере
Процедура ФормыВводаБюджетаДок_ФормаВводаБюджетаПриИзмененииНаСервере(Ид)
     
    ТекущиеДанные = Объект.ФормыВводаБюджета.НайтиПоИдентификатору(Ид);
    
    Если ЗначениеЗаполнено(ТекущиеДанные.Док_ФормаВводаБюджета) Тогда
        
        РеквизитыЗаполнения = Метаданные.Обработки.бит_СозданиеФормВводаБюджета.ТабличныеЧасти.ФормыВводаБюджета.Реквизиты;
        Для каждого РеквЗп Из РеквизитыЗаполнения Цикл
            
            // Имя реквизита заполнения.
            ИмяРекЗп = РеквЗп.Имя;
            Если Лев(ИмяРекЗп, 4) = "Док_" Тогда
                Продолжить;            
            КонецЕсли;
            ТекущиеДанные[ИмяРекЗп] = ТекущиеДанные.Док_ФормаВводаБюджета[ИмяРекЗп];        	
        КонецЦикла;
    
        Если ЗначениеЗаполнено(ТекущиеДанные.НастройкаФормы) Тогда
                
            СтрНастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(ТекущиеДанные.НастройкаФормы);
            Для каждого КиЗ Из СтрНастройкиФормы.Измерения Цикл
                
                ТекОписание = КиЗ.Значение;
                Если ТекОписание.СпособЗаполнения <> Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать 
                    И ЗначениеЗаполнено(ТекОписание.ЗначениеПоУмолчанию) Тогда
                    
                    ТекущиеДанные[ТекОписание.Имя] = ТекОписание.ЗначениеПоУмолчанию;
                КонецЕсли; 
            КонецЦикла; // СтрНастройкиФормы.
            НастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(ТекущиеДанные.НастройкаФормы);
            ТекущиеДанные.Док_КоличествоРазворачивать = НастройкиФормы.КоличествоРазворачивать;
        КонецЕсли; // НастройкаФормы.
        
        ТекущиеДанные.Док_ИмяФайла   = ПолучитьИмяФайла(ТекущиеДанные.Док_ФормаВводаБюджета, НастройкаИмени);
        ТекущиеДанные.Док_ИдКартинки = 1;
    Иначе
        // Очистить строку тч.
    КонецЕсли; // Док_ФормаВводаБюджета.     
                   
КонецПроцедуры

&НаКлиенте
Процедура ФормыВводаБюджетаАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ФормыВводаБюджета", "");
	ТекущиеДанные = Элементы.ФормыВводаБюджета.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
														  	   , Элемент
															   , ТекущиеДанные
															   , ИмяАналитики
															   , СтандартнаяОбработка
															   , фНастройкиИзмерений.НастройкиИзмерений);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормыВводаБюджетаАналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ФормыВводаБюджета", "");
	ТекущиеДанные = Элементы.ФормыВводаБюджета.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
														  	   , Элемент
															   , ТекущиеДанные
															   , ИмяАналитики
															   , СтандартнаяОбработка
															   , фНастройкиИзмерений.НастройкиИзмерений);
                                                          
КонецПроцедуры

&НаКлиенте
Процедура ФормыВводаБюджетаАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ФормыВводаБюджета", "");
	ТекущиеДанные = Элементы.ФормыВводаБюджета.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			, ТекущиеДанные
																		   	, ИмяАналитики
																		   	, СтандартнаяОбработка
																		   	, фНастройкиИзмерений.НастройкиИзмерений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗагруженныеДанные

&НаКлиенте
Процедура ЗагруженныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    Отказ = Истина;
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли

	Оповещение = Новый ОписаниеОповещения("ЗагруженныеДанныеПередНачаломДобавленияЗавершение", ЭтотОбъект); 
	ПроверитьКаталог("КаталогЗагрузки", Оповещение);
        
КонецПроцедуры

// Обработчик завершения проверки наличия конечной папки.
//
// Параметры:
//  ПутьКПапке		 - Строкат - путь к конечной папке.
//  Дополнительно	 - Произвольный -  значение, которое было указано при создании объекта ОписаниеОповещения.
//
&НаКлиенте
Процедура ЗагруженныеДанныеПередНачаломДобавленияЗавершение(ПутьКПапке, Дополнительно) Экспорт

    ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    ДиалогВыбора.Каталог            = ПутьКПапке;
    ДиалогВыбора.МножественныйВыбор = Ложь;
    ДиалогВыбора.Фильтр             = "Все файлы Excel (*.xls, *.xlsx)|*.xls; *.xlsx";         
    
    Оповещения = Новый ОписаниеОповещения("ВыбратьФайлЗагрузкиЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещения, ДиалогВыбора);

КонецПроцедуры
 
// Обработчик завершения выбора каталога сохраненных файлов.
//  См. Синтакс-помощник: ДиалогВыбораФайла.Показать().
//
&НаКлиенте
Процедура ВыбратьФайлЗагрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
        СоотвФлДок   = бит_ОбменДаннымиЭксельКлиент.СопоставитьФайлыДляЗагрузкиИдДок(ВыбранныеФайлы);
        СопоставитьФайлыДокументам(СоотвФлДок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагруженныеДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    Если Поле.Имя = "ЗагруженныеДанныеДок_ФормаВводаБюджета" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Док_ФормаВводаБюджета) Тогда
        ПоказатьЗначение(, Элемент.ТекущиеДанные.Док_ФормаВводаБюджета);   
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Объект.ПериодПланирования;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

// Обработчик завершения выбора каталога сохраненных файлов.
//  См. Синтакс-помощник: ДиалогРедактированияСтандартногоПериода.Показать().
//
&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора <> Неопределено Тогда
		Объект.ПериодПланирования = РезультатВыбора;
		ПересчитатьКурсВалюты(Объект.Сценарий, Объект.ВалютаДокумента, Объект.КурсДокумента, 
			Объект.КратностьДокумента, Объект.ПериодПланирования.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНастроекФорм(Команда)
    
    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("РежимВыбора", 		  Истина);
	ОткрытьФорму("Справочник.бит_НастройкиФормВводаБюджета.ФормаВыбора", ПараметрыФормы, Элементы.ФормыВводаБюджета,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

    // Дальнейшая работа в процедуре ФормыВводаБюджетаОбработкаВыбора.
    
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабЧасть(Команда)
    
    Доделать = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура Флаги_ФВБ_УстановитьВсе(Команда)
    
    ОбработатьФлаги(1, "ФормыВводаБюджета");
    
КонецПроцедуры

&НаКлиенте
Процедура Флаги_ФВБ_СнятьВсе(Команда)
    
    ОбработатьФлаги(0, "ФормыВводаБюджета");
    
КонецПроцедуры

&НаКлиенте
Процедура Флаги_ЗД_УстановитьВсе(Команда)
    
    ОбработатьФлаги(1, "ЗагруженныеДанные");
    
КонецПроцедуры

&НаКлиенте
Процедура Флаги_ЗД_СнятьВсе(Команда)
    
    ОбработатьФлаги(0, "ЗагруженныеДанные");
    
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФВБ(Команда)
    
    ШаблонСообщения = Нстр("ru = 'Можно заполнить общий реквизит в шапке обработки.'");
	Отказ = Ложь;
	
    Для каждого СтрФвб Из Объект.ФормыВводаБюджета Цикл
        
        Если НЕ СтрФвб.Выбрать Тогда
            Продолжить;       
        КонецЕсли;
        
        НомерСтроки = СтрФвб.НомерСтроки;
		
		Префикс = "ФормыВводаБюджета[%1].";
		Префикс = СтрШаблон(Префикс, Формат(НомерСтроки - 1, "Л=ru_RU; ЧН=0; ЧГ="));
		
		Если НЕ ЗначениеЗаполнено(СтрФвб.НастройкаФормы) Тогда
			Поле = Префикс + "НастройкаФормы";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,
				НСтр("ru = 'Настройка формы'"), НомерСтроки, "Создание документов", ШаблонСообщения);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрФвб.Сценарий) И НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
			Поле = Префикс + "Сценарий";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,
				НСтр("ru = 'Сценарий'"), НомерСтроки, "Создание документов", ШаблонСообщения);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрФвб.ВалютаДокумента) И НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			Поле = Префикс + "ВалютаДокумента";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,
				НСтр("ru = 'Валюта'"), НомерСтроки, "Создание документов", ШаблонСообщения);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
		КонецЕсли;
    КонецЦикла;
    
    Если НЕ Отказ Тогда     
         СоздатьФВБНаСервере();
    КонецЕсли;    
    
КонецПроцедуры

&НаСервере
Процедура СоздатьФВБНаСервере()
    
    РеквизитыЗаполнения = Метаданные.Обработки.бит_СозданиеФормВводаБюджета.ТабличныеЧасти.ФормыВводаБюджета.Реквизиты;
    РеквизитыШапки      = Метаданные.Обработки.бит_СозданиеФормВводаБюджета.Реквизиты;
    РеквизитыДокумента  = Метаданные.Документы.бит_ФормаВводаБюджета.Реквизиты;
    
    ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
    
    Для каждого СтрФвб Из Объект.ФормыВводаБюджета Цикл
        
        Если НЕ СтрФвб.Выбрать ИЛИ ЗначениеЗаполнено(СтрФвб.Док_ФормаВводаБюджета) Тогда
            Продолжить;       
        КонецЕсли;
        
        // Создание документа.
        НовДок = Документы.бит_ФормаВводаБюджета.СоздатьДокумент();
        
        СтруктураЗаполнения = Новый Структура;
        
        // Заполнение периода планирования.
        СтруктураЗаполнения.Вставить("ДатаНачалаПланирования"   , Объект.ПериодПланирования.ДатаНачала);
        СтруктураЗаполнения.Вставить("ДатаОкончанияПланирования", Объект.ПериодПланирования.ДатаОкончания);
        
        // Заполнение реквизитов документа.
        Для каждого РеквЗп Из РеквизитыЗаполнения Цикл
            
            // Имя реквизита заполнения.
            ИмяРекЗп = РеквЗп.Имя;
            Если Лев(ИмяРекЗп, 4) = "Док_" Тогда
                Продолжить;            
            КонецЕсли;
             
            // Проверка есть ли  в реквизитах документа текущий реквизит для заполнения.
            Если РеквизитыДокумента.Найти(ИмяРекЗп) = Неопределено Тогда
                Продолжить;           
            КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(СтрФвб[ИмяРекЗп]) И РеквизитыШапки.Найти(ИмяРекЗп) <> Неопределено Тогда
                 // Если в тч реквизит не заполнен, то берем из шапки.
            	 СтруктураЗаполнения.Вставить(ИмяРекЗп, Объект[ИмяРекЗп]);           
            Иначе
                 СтруктураЗаполнения.Вставить(ИмяРекЗп, СтрФвб[ИмяРекЗп]);
            КонецЕсли;         	
        
        КонецЦикла;
        
        Если НЕ ЗначениеЗаполнено(СтруктураЗаполнения.Ответственный) Тогда
            СтруктураЗаполнения.Вставить("Ответственный", ТекущийПользователь);
        КонецЕсли;
        
        // Заполнение документа через экспортную процедуру модуля документа.
        НовДок.ЗаполнитьДокумент(СтруктураЗаполнения);
        
        // Запись документа.
        ДокументЗаписан = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(НовДок, РежимЗаписиДокумента.Запись);        
        Если ДокументЗаписан Тогда
             СтрФвб.Док_ФормаВводаБюджета = НовДок.Ссылка;
             НастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(СтрФвб.НастройкаФормы);
             СтрФвб.Док_КоличествоРазворачивать = НастройкиФормы.КоличествоРазворачивать;
             СтрФвб.Док_ИдКартинки              = 1;
             СтрФвб.Док_ИмяФайла                = ПолучитьИмяФайла(НовДок, НастройкаИмени);
        КонецЕсли;
           
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФВБ(Команда)
    
    Оповещение = Новый ОписаниеОповещения("УдалитьФВБЗавершение", ЭтотОбъект); 
	ПоказатьВопрос(Оповещение, НСтр("ru='Выбранные документы будут помечены на удаление. Продолжить?'"), 
		РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет); 
    
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФВБЗавершение(Ответ, ДополнительныеДанные) Экспорт
   
    Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда		
		Возврат;                                    		
    КонецЕсли;
    
    УдалитьФВБСервер();
    
КонецПроцедуры

&НаСервере
Процедура УдалитьФВБСервер()

    // Массив документов.
    МассивФВБ = Новый Массив;
    Для каждого СтрФвб Из Объект.ФормыВводаБюджета Цикл
        
        Если НЕ СтрФвб.Выбрать ИЛИ НЕ ЗначениеЗаполнено(СтрФвб.Док_ФормаВводаБюджета) Тогда
            Продолжить;       
        КонецЕсли;
        
        МассивФВБ.Добавить(СтрФвб.Док_ФормаВводаБюджета);
                
    КонецЦикла;
    
    Если МассивФВБ.Количество() = 0 Тогда
        Возврат;   
    КонецЕсли;
    
    // Удаление задач.
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("МассивФВБ", МассивФВБ);
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	Задачи.Ссылка КАК Ссылка
    |ИЗ
    |	Задача.бит_уп_Задача КАК Задачи
    |ГДЕ
    |	Задачи.Предмет В(&МассивФВБ)
    |";
    Результат = Запрос.Выполнить();    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();    
    	ТекОбъект.УстановитьПометкуУдаления();   
    КонецЦикла;
    
    // Удаление документов.
    Для каждого СтрФвб Из Объект.ФормыВводаБюджета Цикл
        
        Если МассивФВБ.Найти(СтрФвб.Док_ФормаВводаБюджета) = Неопределено Тогда
            Продолжить;       
        КонецЕсли;
        
        ТекОбъект = СтрФвб.Док_ФормаВводаБюджета.ПолучитьОбъект();
		ТекОбъект.УстановитьПометкуУдаления();
        
        СтрФвб.Док_ФормаВводаБюджета = Документы.бит_ФормаВводаБюджета.ПустаяСсылка();
        СтрФвб.Док_ИмяФайла   = "";
        СтрФвб.Док_ИдКартинки = 0;
        СтрФвб.Док_ВыгруженШаблонВExcel = Ложь;
        
    КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьЗадачиОтветственнымНаСервере()
    
    МаксКоличествоОбъектов = бит_уп_Сервер.МаксимальноеКоличествоОбъектовАдресации();
    ТекущийПользователь    = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
    
    Для каждого СтрФвб Из Объект.ФормыВводаБюджета Цикл
        
        Если НЕ СтрФвб.Выбрать ИЛИ НЕ ЗначениеЗаполнено(СтрФвб.Док_ФормаВводаБюджета) Тогда
            Продолжить;       
        КонецЕсли;
        
        СтруктураЗадачи = Задачи.бит_уп_Задача.СтруктураЗадачи();
	
    	СтруктураЗадачи.Предмет         = СтрФвб.Док_ФормаВводаБюджета;
    	СтруктураЗадачи.Наименование    = НСтр("ru = 'Заполнить бюджет'");
        СтруктураЗадачи.СпособАдресации = 0;
    	СтруктураЗадачи.Исполнитель     = ?(ЗначениеЗаполнено(СтрФвб.Ответственный), СтрФвб.Ответственный, ТекущийПользователь);
        СтруктураЗадачи.Важность        = Перечисления.бит_уп_ВидыВажностиЗадач.Средняя;
               
        ОбЗадача = Задачи.бит_уп_Задача.ЗаполнитьОбъектЗадачи(СтруктураЗадачи, МаксКоличествоОбъектов);
	    ЗадачаЗаписана = бит_ОбщегоНазначения.ЗаписатьЗадачу(ОбЗадача);      
                
        Если ЗадачаЗаписана Тогда
            
            ТекстСообщения = Нстр("ru = 'Для документа ""%1%"" записана задача ""%2%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																						, СтрФвб.Док_ФормаВводаБюджета
                                                                                        , ОбЗадача.Наименование); 			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);

        КонецЕсли;          
                
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачиОтветственным(Команда)
    
    СоздатьЗадачиОтветственнымНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
   
    Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуЗавершение", ЭтотОбъект); 
	ПоказатьВопрос(Оповещение, НСтр("ru='Будет очищена таблица документов. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет); 
	
КонецПроцедуры

&НаКлиенте 
Процедура ОчиститьТаблицуЗавершение(Ответ, ДополнительныеДанные) Экспорт
    
    Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда		
		Возврат;                                    		
    КонецЕсли;
    
	Объект.ФормыВводаБюджета.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеПоДокументам(Команда)
   
    Оповещение = Новый ОписаниеОповещения("ОчиститьДанныеПоДокументамЗавершение", ЭтотОбъект); 
	ПоказатьВопрос(Оповещение, НСтр("ru='Из таблицы будут удалены данные по документам. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет); 
	
КонецПроцедуры

&НаКлиенте 
Процедура ОчиститьДанныеПоДокументамЗавершение(Ответ, ДополнительныеДанные) Экспорт
    
    Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда		
		Возврат;                                    		
    КонецЕсли;
    
    ОчиститьДанныеПоДокументамСервер();  	
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПоДокументамСервер()
    
    Для каждого СтрФВБ Из Объект.ФормыВводаБюджета Цикл
        СтрФВБ.Док_ФормаВводаБюджета       = Документы.бит_ФормаВводаБюджета.ПустаяСсылка();
        СтрФВБ.Док_ИмяФайла                = "";
    	СтрФВБ.Док_КоличествоРазворачивать = 0;
        СтрФВБ.Док_ИдКартинки              = 0;
        СтрФВБ.Док_ВыгруженШаблонВExcel    = Ложь;
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗагруженныеДанные(Команда)
    
    Оповещение = Новый ОписаниеОповещения("ОчиститьЗагруженныеДанныеЗавершение", ЭтотОбъект); 
	ПоказатьВопрос(Оповещение, НСтр("ru='Будет очищена таблица загрузки из Excel. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет); 

КонецПроцедуры

&НаКлиенте 
Процедура ОчиститьЗагруженныеДанныеЗавершение(Ответ, ДополнительныеДанные) Экспорт
    
    Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда		
		Возврат;                                    		
    КонецЕсли;
    
	Объект.ЗагруженныеДанные.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)

	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", "Обработка.бит_СозданиеФормВводаБюджета");
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
		
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)

	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", "Обработка.бит_СозданиеФормВводаБюджета");
    
    Оповещение = Новый ОписаниеОповещения("ПрименитьНастройкиЗавершение", ЭтаФорма);
    ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки",ПараметрыФормы,ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		ПрименитьНастройки(Результат);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоказать(Команда)
    
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("СохранятьДанныеОСозданныхДокументах", СохранятьДанныеОСозданныхДокументах);
    ПараметрыФормы.Вставить("СохранятьТаблицуЗагрузки"           , СохранятьТаблицуЗагрузки);
    ПараметрыФормы.Вставить("Расширение"                         , Расширение);
    ПараметрыФормы.Вставить("НастройкаИмени"                     , НастройкаИмени);
    
    Оповещение = Новый ОписаниеОповещения("ПоказатьНастройкиЗавершение",ЭтаФорма);
	ОткрытьФорму("Обработка.бит_СозданиеФормВводаБюджета.Форма.ФормаНастроек", ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	    
КонецПроцедуры

&НаКлиенте 
Процедура ПоказатьНастройкиЗавершение(СтрНастройки, ДополнительныеПараметры) Экспорт
	
	Если СтрНастройки = Неопределено ИЛИ СтрНастройки = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СохранятьДанныеОСозданныхДокументах = СтрНастройки.СохранятьДанныеОСозданныхДокументах;
    СохранятьТаблицуЗагрузки            = СтрНастройки.СохранятьТаблицуЗагрузки;
    Расширение                          = СтрНастройки.Расширение;
    НастройкаИмени                      = СтрНастройки.НастройкаИмени;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСExcel

// Функция формирует имя файла.
//
// Параметры:
//  НовДок - Документы.бит_ФормаВводаБюджета.Ссылка.
//  
// Возвращаемое значение:
//   Строка.
//
&НаСервереБезКонтекста
Функция ПолучитьИмяФайла(ТекДокумент, НастройкаИмени)

    ИмяФайла = "";
    
    МассивСтрок = Новый Массив;
    Для каждого ЭлСп Из НастройкаИмени Цикл
        Если ЭлСп.Значение = "ПроизвольныйТекст" Тогда
            МассивСтрок.Добавить(ЭлСп.Представление);
        ИначеЕсли ЭлСп.Значение = "НомерДокумента" Тогда
            МассивСтрок.Добавить(СокрЛП(ТекДокумент.Номер));       
        Иначе 
            МетаРек = Метаданные.Документы.бит_ФормаВводаБюджета.Реквизиты.Найти(ЭлСп.Значение);
            Если МетаРек <> Неопределено Тогда
                ЗначениеРеквизита = ТекДокумент[ЭлСп.Значение];
                Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
                    МассивСтрок.Добавить(ЗначениеРеквизита.Наименование);       
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла; 
    ИмяФайла = СтрСоединить(МассивСтрок, " - ");
                
    // Удаление недопустимых символов.
    ИмяФайла = СтрЗаменить(ИмяФайла, "\" , "");
    ИмяФайла = СтрЗаменить(ИмяФайла, "/" , "");
    ИмяФайла = СтрЗаменить(ИмяФайла, ":" , "");
    ИмяФайла = СтрЗаменить(ИмяФайла, "*" , "");
    ИмяФайла = СтрЗаменить(ИмяФайла, "?" , "");
    ИмяФайла = СтрЗаменить(ИмяФайла, """", "");
    ИмяФайла = СтрЗаменить(ИмяФайла, "<" , "");
    ИмяФайла = СтрЗаменить(ИмяФайла, ">" , "");
    ИмяФайла = СтрЗаменить(ИмяФайла, "|" , "");
       
    Возврат ИмяФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТабДокДанные(ФВБ_Ссылка)

	Возврат ФВБ_Ссылка.ХранилищеДерева.Получить();

КонецФункции

&НаКлиенте
Процедура ПроверитьКаталог(ПолеФормы, ОповещениеПродолжения)
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ПутьКПапке) Тогда
        ТекстСообщения = Нстр("ru = 'Необходимо выбрать каталог для сохранения файлов.'");        
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ПолеФормы,,Отказ); 
    КонецЕсли;    
    
	Если СтрДлина(Объект.ПутьКПапке) > 210 Тогда
		ТекстСообщения = Нстр("ru = 'Длинный путь к каталогу. Введите путь короче 210 символов.'");        
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ПолеФормы,,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Дополнительно = Новый Структура("ОповещениеПродолжения", ОповещениеПродолжения); 
	Оповещение 	  = Новый ОписаниеОповещения("ПроверитьКаталогНачатьПроверкуСуществования", ЭтотОбъект, Дополнительно); 
	
	Файл = Новый Файл(Объект.ПутьКПапке);
	Файл.НачатьПроверкуСуществования(Оповещение);
        
КонецПроцедуры

// Обработчик завершения проверки существования каталога.
//  См. Синтакс-помощник: Файл.НачатьПроверкуСуществования().
//
&НаКлиенте
Процедура ПроверитьКаталогНачатьПроверкуСуществования(Существует, Дополнительно) Экспорт

	Если Существует Тогда
		ВыполнитьОбработкуОповещения(Дополнительно.ОповещениеПродолжения, Объект.ПутьКПапке);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПроверитьКаталогНачатьСозданиеКаталога", ЭтотОбъект, Дополнительно); 
		НачатьСозданиеКаталога(Оповещение, Объект.ПутьКПапке); 
	КонецЕсли; 

КонецПроцедуры

// Обработчик завершения создания каталога.
//  См. Синтакс-помощник: НачатьСозданиеКаталога().
//
&НаКлиенте
Процедура ПроверитьКаталогНачатьСозданиеКаталога(ИмяКаталога, Дополнительно) Экспорт

	Если НЕ ПустаяСтрока(ИмяКаталога) Тогда
		ВыполнитьОбработкуОповещения(Дополнительно.ОповещениеПродолжения, ИмяКаталога);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ВыгрузитьШаблоныВExcel(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
    
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьШаблоныВExcelЗавершение", ЭтотОбъект); 
	ПроверитьКаталог("КаталогВыгрузки", Оповещение);

КонецПроцедуры

// Обработчик завершения выгрузки шаблона в файл.
//
// Параметры:
//  ПутьКПапке		 - Строкат - путь к конечной папке.
//  Дополнительно	 - Произвольный -  значение, которое было указано при создании объекта ОписаниеОповещения.
//
&НаКлиенте
Процедура ВыгрузитьШаблоныВExcelЗавершение(ПутьКПапке, Дополнительно) Экспорт 
		
	Для каждого СтрФвб Из Объект.ФормыВводаБюджета Цикл
		
		Если НЕ СтрФвб.Выбрать Тогда
			Продолжить;       
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрФвб.Док_ФормаВводаБюджета) ИЛИ НЕ ЗначениеЗаполнено(СтрФвб.Док_ИмяФайла) Тогда
			// Отмена выгрузки, если в строке нет документа или файл уже выгружен.
			Продолжить;       
		КонецЕсли;
		
		ТабДокДанные = ПолучитьТабДокДанные(СтрФвб.Док_ФормаВводаБюджета);
		
		ПутьКФайлу = ПутьКПапке + "\" + СтрФвб.Док_ИмяФайла;
		
		Попытка        
			
			бит_ОбменДаннымиЭксельКлиент.ФВБ_ВыгрузитьШаблонЭксель(ТабДокДанные
			, СтрФвб.Док_ФормаВводаБюджета
			, фДеревоВрем
			, СтрФвб.Док_КоличествоРазворачивать
			, ПутьКФайлу
			, Расширение);
			// Отметка о выгрузке.
			СтрФвб.Док_ВыгруженШаблонВExcel = Истина;
			СтрФвб.Док_ИмяФайла = СтрЗаменить(ПутьКФайлу, ПутьКПапке + "\", ""); 
			
		Исключение
			
			ТекстСообщения = Нстр("ru = 'Не удалось записать файл %1%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрФвб.Док_ИмяФайла);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Прервать;
			
		КонецПопытки;    	
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ОбновитьИменаФайлов(Команда)

	ОбновитьИменаФайловНаСервере();

КонецФункции

&НаСервере
Функция ОбновитьИменаФайловНаСервере()

	Для каждого СтрФвб Из Объект.ФормыВводаБюджета Цикл
        
        Если ЗначениеЗаполнено(СтрФвб.Док_ФормаВводаБюджета) Тогда
            СтрФвб.Док_ИмяФайла = ПолучитьИмяФайла(СтрФвб.Док_ФормаВводаБюджета, НастройкаИмени);
        КонецЕсли;       	
    
    КонецЦикла;

КонецФункции

// Процедура загружает данные из Excel
//
// Параметры:
//  ДанныеЭксель - Тип_описание.
//  ДокСсылка    - Тип_описание.
//  НомерСтроки  - .
//
&НаСервере
Функция ОбработкаЗагрузкиДанныхExcelСервер(ДанныеЭксель, ДокСсылка, НомерСтроки)

    ДокОбъект = ДокСсылка.ПолучитьОбъект();
    Если ДокОбъект = Неопределено Тогда
        ТекстСообщения = Нстр("ru = 'В строке %1% не найден документ.'");
        ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, НомерСтроки);
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
        Возврат Ложь;               
    КонецЕсли;
    Если ДокОбъект.ПометкаУдаления Тогда
        ТекстСообщения = Нстр("ru = 'Документ %1% помечен на удаление.'");
        ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ДокСсылка);
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
        Возврат Ложь;               
    КонецЕсли;
                
    // Очистка таблиц документа.
    ДокОбъект.БДДС.Очистить();
    ДокОбъект.ЗависимыеОбороты.Очистить();
    
    ТабДокДанные = ПолучитьТабДокДанные(ДокОбъект.Ссылка);
    НастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(ДокОбъект.НастройкаФормы);
    
    // Преобразование данных. 		
    ДокОбъект.УстановитьЗагруженныеДанные(ДанныеЭксель, ТабДокДанные, НастройкиФормы);
    
    ТекстЗапроса = ДокОбъект.НастройкаФормы.ТекстЗапроса;
    // Инициализация компоновщика, используемого для настройки отборов.
    АдресКомпоновки = Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(ТекстЗапроса, Компоновщик, УникальныйИдентификатор);

    // Восстановить дерево данных - табличный документ.
	ПараметрыВосстановленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
	ПараметрыВосстановленияДерева.АдресКомпоновки			= АдресКомпоновки;
	ПараметрыВосстановленияДерева.НастройкиКомпоновщика		= Компоновщик.ПолучитьНастройки();
	// Изменение кода. Начало. 26.02.2018{{
	Адрес = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
    // Сохранить дерево данных - табличный документ.
	ДокОбъект.ВосстановитьДеревоПоДанным(Адрес, Новый УникальныйИдентификатор(), ТабДокДанные, ДокОбъект.НастройкаФормы, ТекстЗапроса, ПараметрыВосстановленияДерева);
	// Изменение кода. Конец. 26.02.2018}}
    ДокОбъект.СохранитьДерево(ТабДокДанные);

    // Запись документа.
    ДокументЗаписан = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОбъект, РежимЗаписиДокумента.Запись);        
    Если НЕ ДокументЗаписан Тогда
        ТекстСообщения = Нстр("ru = 'Документ %1% не удалось записать.'");
        ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ДокСсылка);
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
        Возврат Ложь;    
    КонецЕсли;
             
    Возврат Истина;
    
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзExcelЗавершение", ЭтотОбъект); 
	ПроверитьКаталог("КаталогЗагрузки", Оповещение);
              
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcelЗавершение(ПутьКПапке, Дополнительно) Экспорт
	
	Для каждого СтрФвб Из Объект.ЗагруженныеДанные Цикл
		
		Если НЕ СтрФвб.Выбрать Тогда
			Продолжить;       
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрФвб.Док_ФормаВводаБюджета) ИЛИ НЕ ЗначениеЗаполнено(СтрФвб.Док_ИмяФайла) Тогда
			// Отмена загрузки, если в строке нет документа.
			Продолжить;       
		КонецЕсли;
		
		ТабДокДанные = ПолучитьТабДокДанные(СтрФвб.Док_ФормаВводаБюджета);
		ПутьКФайлу 	 = СтрФвб.Док_ИмяФайла;
		
		Попытка        
			// Данные из Excel.
			ДанныеЭксель = бит_ОбменДаннымиЭксельКлиент.ФВБ_ЗагрузитьДанныеПоШаблону(ПутьКФайлу);             
			Если ДанныеЭксель <> Неопределено Тогда                  
				
				ЗагрузкаВыполнилась = ОбработкаЗагрузкиДанныхExcelСервер(ДанныеЭксель, СтрФвб.Док_ФормаВводаБюджета, СтрФвб.НомерСтроки);
				Если НЕ ЗагрузкаВыполнилась Тогда
					ТекстСообщения = СтрШаблон(Нстр("ru = 'Не удалось загрузить файл %1.'"),
										СтрФвб.Док_ИмяФайла);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
					Прервать;               
				КонецЕсли;   
			КонецЕсли;
			
			// Отметка о загрузке.
			СтрФвб.Док_ЗагруженыДанныеИзExcel = ОбщегоНазначенияКлиент.ДатаСеанса();
		Исключение
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Не удалось загрузить данные из файла %1.'"), 
								СтрФвб.Док_ИмяФайла);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Прервать;
		КонецПопытки;    	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СопоставитьФайлыДокументам(СоотвФлДок)

    Для каждого КлЗнч Из СоотвФлДок Цикл
        ПутьКФайлу = КлЗнч.Ключ;
    	УИ_Док     = КлЗнч.Значение;
        ФВБСсылка = Документы.бит_ФормаВводаБюджета.ПолучитьСсылку(Новый УникальныйИдентификатор(УИ_Док));
        
        НовСтр = Объект.ЗагруженныеДанные.Добавить();
        НовСтр.Док_ИмяФайла = ПутьКФайлу;
        
        Если ЗначениеЗаполнено(ФВБСсылка) Тогда
            НовСтр.Док_ФормаВводаБюджета = ФВБСсылка;
            НовСтр.Выбрать               = Истина;
            Если НовСтр.Док_ФормаВводаБюджета.ПометкаУдаления Тогда
                 НовСтр.Док_ИдКартинки = 2;
            Иначе	
                 НовСтр.Док_ИдКартинки = 1;
            КонецЕсли;
        Иначе
            НовСтр.Док_ИдКартинки = 0;
            ТекстСообщения = Нстр("ru = 'Не удалось сопоставить файл %1% с документом базы.'");
            ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ПутьКФайлу);
            бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);                    
        КонецЕсли;      	
    КонецЦикла;	

КонецПроцедуры

#КонецОбласти

// Процедура подготавливает форму на сервере.
//
&НаСервере
Процедура ПодготовитьФормуНаСервере()

    фНастройкиИзмерений = Новый Структура;
    фНастройкиИзмерений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним"));
	фНастройкиИзмерений.Вставить("НастройкиИзмерений", бит_Бюджетирование.НастройкиИзмеренийБюджетирования()); 
	            
КонецПроцедуры

// Процедура подготавливает форму на сервере.
//
// Параметры:
//  Сценарий				 - 	 - 
//  ВалютаДокумента			 - 	 - 
//  КурсДокумента			 - 	 - 
//  КратностьДокумента		 - 	 - 
//  ДатаНачалаПланирования	 - 	 - 
//
&НаСервереБезКонтекста
Процедура ПересчитатьКурсВалюты(Сценарий, ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаНачалаПланирования)
    
    Если НЕ ЗначениеЗаполнено(Сценарий) И НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
        Возврат;   
    КонецЕсли;
	
	Если ЗначениеЗаполнено(Сценарий)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "ИспользоватьКурсыСценария") Тогда
		ДатаКурса = ДатаНачалаПланирования;
	Иначе
		ДатаКурса = ТекущаяДатаСеанса();
	КонецЕсли;
    СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ВалютаДокумента, ДатаКурса);
	КурсДокумента      = СтрКурса.Курс;
	КратностьДокумента = СтрКурса.Кратность;
    
КонецПроцедуры

// Процедура управляет флагами в табличной части.
// 
// Парметры:
//  ЗначениеФлага - Число (0 - снять флаги, 1 - установить истина, 2 - инвертировать).
//  ИмяТаблицы    - Строка.
//
&НаКлиенте
Процедура ОбработатьФлаги(ЗначениеФлага, ИмяТаблицы)
	
	Для каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		ПредыдущееЗначениеФлага = СтрокаТаблицы.Выбрать;
		Если ЗначениеФлага = 0 Тогда
			СтрокаТаблицы.Выбрать = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			СтрокаТаблицы.Выбрать = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			СтрокаТаблицы.Выбрать = НЕ СтрокаТаблицы.Выбрать;
		КонецЕсли; 
	КонецЦикла; 
	 	
КонецПроцедуры

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

    СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Обработки.бит_СозданиеФормВводаБюджета.Реквизиты Цикл
		СтруктураНастроек.Вставить(Реквизит.Имя, Объект[Реквизит.Имя])
    КонецЦикла;
    
    // Табличная часть "ФормыВводаБюджета".
    СтрРекв = "";
    Для каждого МетаРек Из Метаданные.Обработки.бит_СозданиеФормВводаБюджета.ТабличныеЧасти.ФормыВводаБюджета.Реквизиты Цикл
        Если СохранятьДанныеОСозданныхДокументах ИЛИ Лев(МетаРек.Имя, 4) <> "Док_" Тогда
            СтрРекв = СтрРекв + ?(СтрРекв = "", МетаРек.Имя, ", " + МетаРек.Имя);            
        КонецЕсли;        
    КонецЦикла;     
    ТаблицаФВБ = Объект.ФормыВводаБюджета.Выгрузить(, СтрРекв);
    СтруктураНастроек.Вставить("ТаблицаФВБ", Новый ХранилищеЗначения(ТаблицаФВБ));
    
    // Табличная часть "ЗагруженныеДанные".
    Если СохранятьТаблицуЗагрузки Тогда 
        СтрРекв = "";
        Для каждого МетаРек Из Метаданные.Обработки.бит_СозданиеФормВводаБюджета.ТабличныеЧасти.ЗагруженныеДанные.Реквизиты Цикл
            СтрРекв = СтрРекв + ?(СтрРекв = "", МетаРек.Имя, ", " + МетаРек.Имя);                  
        КонецЦикла;
        ТаблицаЗД = Объект.ЗагруженныеДанные.Выгрузить(, СтрРекв);
        СтруктураНастроек.Вставить("ТаблицаЗД", Новый ХранилищеЗначения(ТаблицаЗД));
    КонецЕсли;
       		
	Возврат СтруктураНастроек;
	
КонецФункции

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
        
        ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек);
        
        // Табличная часть "ФормыВводаБюджета".
        Если СтруктураНастроек.Свойство("ТаблицаФВБ") Тогда
    		ХрТаблицаФВБ = СтруктураНастроек.ТаблицаФВБ;
            Если ХрТаблицаФВБ <> Неопределено Тогда    
                Объект.ФормыВводаБюджета.Загрузить(ХрТаблицаФВБ.Получить());
            КонецЕсли;	
        КонецЕсли;
        бит_ОбщегоНазначения.УдалитьБитыеСсылкиИзТабличнойЧасти(Объект.ФормыВводаБюджета, "Док_ФормаВводаБюджета");
        Для каждого СтрФвб Из Объект.ФормыВводаБюджета Цикл
            СтрФвб.Док_ИдКартинки = ?(ЗначениеЗаполнено(СтрФвб.Док_ФормаВводаБюджета), 1, 0);       
        КонецЦикла;
        
        // Табличная часть "ЗагруженныеДанные".
        Если СтруктураНастроек.Свойство("ТаблицаЗД") Тогда
    		ХрТаблицаЗД = СтруктураНастроек.ТаблицаЗД;
            Если ХрТаблицаЗД <> Неопределено Тогда    
                Объект.ЗагруженныеДанные.Загрузить(ХрТаблицаЗД.Получить());
            КонецЕсли;	
        КонецЕсли;
        бит_ОбщегоНазначения.УдалитьБитыеСсылкиИзТабличнойЧасти(Объект.ЗагруженныеДанные, "Док_ФормаВводаБюджета");
        Для каждого СтрФвб Из Объект.ЗагруженныеДанные Цикл
            СтрФвб.Док_ИдКартинки = ?(ЗначениеЗаполнено(СтрФвб.Док_ФормаВводаБюджета), 1, 0);       
        КонецЦикла;
    Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр("ru = 'Настройки не восстановлены.'"));
    КонецЕсли;  		
	
КонецПроцедуры

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

    // Расширение сохраняемых файлов.
    Если Не ЗначениеЗаполнено(Расширение) Тогда
        Расширение = ".xlsx";
    КонецЕсли;       
    
    Если Не ЗначениеЗаполнено(НастройкаИмени) Тогда
        СформироватьНастройкиИмени(НастройкаИмени);
    КонецЕсли;
    
	// Получим настройку по умолчанию.
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта("Обработка.бит_СозданиеФормВводаБюджета");
	
	// Установим настройку.
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда
        
        ПрименитьНастройки(НастройкаПоУмолчанию);
        
    Иначе
        
        Если НЕ ЗначениеЗаполнено(Объект.РежимЗависимыхОборотов) Тогда     
            Объект.РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический;      
        КонецЕсли;       
        Если НЕ ЗначениеЗаполнено(Объект.РежимФормированияДвижений) Тогда           
            Объект.РежимФормированияДвижений = Перечисления.бит_РежимыФормированияДвиженийФормыВвода.Все;         
        КонецЕсли;	    
        Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияСумм) Тогда       
            Объект.ЕдиницаИзмеренияСумм = Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы;    
        КонецЕсли;       
        Если НЕ ЗначениеЗаполнено(Объект.ПериодПланирования) Тогда         
            Объект.ПериодПланирования.ДатаНачала = НачалоГода(ТекущаяДатаСеанса());	        
        КонецЕсли;
        Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда         
            Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
            Объект.КурсДокумента      = 1;
			Объект.КратностьДокумента = 1;
        КонецЕсли;
        СохранятьДанныеОСозданныхДокументах = Истина;
        СохранятьТаблицуЗагрузки            = Истина;
        
    КонецЕсли;           
    
КонецПроцедуры

// Заполняет начальное значение списка НастройкаИмени.
// 
&НаСервереБезКонтекста
Процедура СформироватьНастройкиИмени(НастройкаИмени)

    НастройкаИмени.Очистить();
	НастройкаИмени.Добавить("ПроизвольныйТекст", НСтр("ru = 'ФВБ'"), Истина);
    НастройкаИмени.Добавить("НомерДокумента"   , НСтр("ru = 'Номер документа'"));
    НастройкаИмени.Добавить("НастройкаФормы"   , НСтр("ru = 'Настройка формы'"));
    НастройкаИмени.Добавить("ЦФО"              , НСтр("ru = 'ЦФО'"));
    НастройкаИмени.Добавить("Сценарий"         , НСтр("ru = 'Сценарий'"));
    	
КонецПроцедуры

#КонецОбласти
