////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

#Область ПеременныеМодуля




#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения



// Устанавливает картинки строк в дереве меток и удаляет пустые группы.
// 
// Параметры 
// 	СтрокиМеток       	 -	КоллекцияСтрок         	 Строки для заполнения
// 							ДереваЗначений.
// 
&НаСервере
Процедура ЗаполнитьСтрокиМеток(СтрокиМеток, АдресКартинкиГруппы = "", АдресСтандартнойКартинки = "")
	
	МассивУдалить = Новый Массив();
	Для Каждого ТекСтрока Из СтрокиМеток Цикл
		Если ТекСтрока.Ссылка.ЭтоГруппа Тогда
			Если ТекСтрока.Строки.Количество() = 0 Тогда
				МассивУдалить.Добавить(ТекСтрока);
				Продолжить;
			КонецЕсли;
			Если АдресКартинкиГруппы = "" Тогда
				АдресКартинкиГруппы = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.СправочникОбъект, ЭтаФорма.УникальныйИдентификатор);
			КонецЕсли;
			ТекСтрока.ЭтоГруппа		= Истина;
			ТекСтрока.АдресКартинки	= АдресКартинкиГруппы;
			ЗаполнитьСтрокиМеток(ТекСтрока.Строки, АдресКартинкиГруппы, АдресСтандартнойКартинки);
		Иначе
			ВремКартинка = ТекСтрока.Ссылка.Пиктограмма.Получить();
			Если НЕ ТипЗнч(ВремКартинка) = Тип("Картинка") ИЛИ ВремКартинка.Вид = ВидКартинки.Пустая Тогда
				Если АдресСтандартнойКартинки = "" Тогда
					АдресСтандартнойКартинки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.бит_си_МеткаСтатьи, ЭтаФорма.УникальныйИдентификатор);
				КонецЕсли;
				ВремКартинка = АдресСтандартнойКартинки;
			Иначе
				ВремКартинка = ПоместитьВоВременноеХранилище(ВремКартинка, ЭтаФорма.УникальныйИдентификатор);
			КонецЕсли;
			ТекСтрока.АдресКартинки = ВремКартинка;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из МассивУдалить Цикл
		СтрокиМеток.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтрокиМеток()

// Заполняет дерево меток
// 
// Параметры 
// 	Статья		       	 -	СправочникСсылка.бит   	 Строки для заполнения
// 							_си_Статьи.
// 	УстановленныеМетки 	 -	ТаблицаЗначений       	 Таблица меток, которые обязательно должны быть установленны.
// 
&НаСервере
Процедура ЗаполнитьДеревоМеток(УстановленныеМетки = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	УстановленныеМетки.Метка
	               |ПОМЕСТИТЬ УстановленныеМетки
	               |ИЗ
	               |	&УстановленныеМетки КАК УстановленныеМетки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МеткиСтатей.Наименование КАК Метка,
	               |	ЕСТЬNULL(УстановленныеМетки.Пометка, 0) КАК Пометка,
	               |	0 КАК Исключить,
	               |	МеткиСтатей.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.бит_си_МеткиСтатей КАК МеткиСтатей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			УстановленныеМетки.Метка КАК Метка,
	               |			1 КАК Пометка
	               |		ИЗ
	               |			УстановленныеМетки КАК УстановленныеМетки) КАК УстановленныеМетки
	               |		ПО МеткиСтатей.Ссылка = УстановленныеМетки.Метка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Если НЕ ТипЗнч(УстановленныеМетки) = Тип("ТаблицаЗначений") Тогда
		УстановленныеМетки = Новый ТаблицаЗначений();
		УстановленныеМетки.Колонки.Добавить("Метка", Новый ОписаниеТипов("СправочникСсылка.бит_си_МеткиСтатей"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УстановленныеМетки", УстановленныеМетки);
	ВремМетки = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВремМетки.Колонки.Добавить("АдресКартинки"	, Новый ОписаниеТипов("Строка"));
	ВремМетки.Колонки.Добавить("ЭтоГруппа"		, Новый ОписаниеТипов("Булево"));
	ЗаполнитьСтрокиМеток(ВремМетки.Строки);
	
	ЗначениеВРеквизитФормы(ВремМетки, "Метки");
	
КонецПроцедуры // ЗаполнитьДеревоМеток()

// Возвращает таблицу устаноленных меток.
// 
// Параметры 
// 	Строки      	 	 -	КоллекцияСтрок         	 Строки для заполнения
// 							ДереваЗначений.
// 	ТабМетки	       	 -	ТаблицаЗначений       	 Таблица меток для заполнения.
// Возвращаемое значение:
// 	Возврат ...        	 -	ТаблицаЗначений        	 Таблица устаноленных меток.
// 
&НаСервере
Процедура ЗаполнитьУстановленныеМетки(ИдентификаторСтроки = Неопределено, ТабМетки = Неопределено, Строкой = Ложь)
	
	Если НЕ ТипЗнч(ТабМетки) = Тип("ТаблицаЗначений") Тогда
		ТабМетки = Новый ТаблицаЗначений();
		ТабМетки.Колонки.Добавить("Метка"		, Новый ОписаниеТипов("СправочникСсылка.бит_си_МеткиСтатей"));
		ТабМетки.Колонки.Добавить("Исключить"	, Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Строки = Метки.ПолучитьЭлементы();
	Иначе
		Строки = Метки.НайтиПоИдентификатору(ИдентификаторСтроки).ПолучитьЭлементы();
	КонецЕсли;
	Для Каждого ТекСтрока Из Строки Цикл
		Если ТекСтрока.Ссылка.ЭтоГруппа Тогда
			ЗаполнитьУстановленныеМетки(ТекСтрока.ПолучитьИдентификатор(), ТабМетки);
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.Пометка = 0 И ТекСтрока.Исключить = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ТабМетки.Найти(ТекСтрока.Ссылка, "Метка") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТабМетки.Добавить();
		НоваяСтрока.Метка		= ТекСтрока.Ссылка;
		НоваяСтрока.Исключить	= ТекСтрока.Исключить;
	КонецЦикла;
	
	ТабМетки = ?(Строкой И ИдентификаторСтроки = Неопределено, ЗначениеВСтрокуВнутр(ТабМетки), ТабМетки);
	
КонецПроцедуры // ЗаполнитьУстановленныеМетки()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ.

#Область ПроцедурыДействияКомандныхПанелейФормы



// Процедура обработчик - команды "Выбрать" формы.
// 
&НаКлиенте
Процедура Выбрать(Команда)
	
	УстановленныеМетки = "";
	ЗаполнитьУстановленныеМетки(, УстановленныеМетки, Истина);
	ОповеститьОВыборе(УстановленныеМетки);
	
КонецПроцедуры // Выбрать()



#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.

#Область ПроцедурыОбработчикиСобытийЭлементовФормы



// Процедура обработчик - события "ПриИзменении" поля "Исключить" таблицы "Метки".
// 
&НаКлиенте
Процедура МеткиИсключитьПриИзменении(Элемент)
	
	Если Элементы.Метки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Метки.ТекущиеДанные.Исключить = ?(Элементы.Метки.ТекущиеДанные.Исключить = 2, 0, Элементы.Метки.ТекущиеДанные.Исключить);
	Элементы.Метки.ТекущиеДанные.Пометка = ?(Элементы.Метки.ТекущиеДанные.Исключить = 0, Элементы.Метки.ТекущиеДанные.Пометка, 0);
	
КонецПроцедуры // МеткиИсключитьПриИзменении()

// Процедура обработчик - события "ПриИзменении" поля "Пометка" таблицы "Метки".
// 
&НаКлиенте
Процедура МеткиПометкаПриИзменении(Элемент)
	
	Если Элементы.Метки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Метки.ТекущиеДанные.Пометка = ?(Элементы.Метки.ТекущиеДанные.Пометка = 2, 0, Элементы.Метки.ТекущиеДанные.Пометка);
	Элементы.Метки.ТекущиеДанные.Исключить = ?(Элементы.Метки.ТекущиеДанные.Пометка = 0, Элементы.Метки.ТекущиеДанные.Исключить, 0);
	
КонецПроцедуры // МеткиПометкаПриИзменении()



#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ПроцедурыОбработчикиСобытийФормы



// Процедура обработчик - события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДеревоМеток();
	
КонецПроцедуры // ПриСозданииНаСервере()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

#Область ОператорыОсновнойПрограммы

#КонецОбласти

