////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

#Область ПеременныеМодуля




#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения



// Заполняет строки дерева разделов справочной информации.
// 
// Параметры 
// 	СтрокаРодителя     	 -	СтрокаДереваЗначений   	 Строка дерева разделов для добавления дочерних разделов.          
// 	Родитель           	 -	СправочникСсылка.бит_си	 Элемент справочника статей, дочерние элементы которого           
// 	                   	  	_Статьи, Неопределено  	 добавляются в дерево.                                             
// 
&НаСервере
Процедура ЗаполнитьСтрокиДереваСтатей(СтрокаРодителя, Родитель = Неопределено)
	
	ТекРодитель = ?(Родитель = Неопределено, Справочники.бит_си_Статьи.ПустаяСсылка(), Родитель);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Статьи.Ссылка,
	                      |	Статьи.ЭтоГруппа,
	                      |	Статьи.Наименование,
	                      |	Статьи.НазваниеСтатьи
	                      |ИЗ
	                      |	Справочник.бит_си_Статьи КАК Статьи
	                      |ГДЕ
	                      |	Статьи.Родитель = &Родитель
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Статьи.Порядок,
	                      |	Статьи.Наименование");
	Запрос.УстановитьПараметр("Родитель", ?(ТекРодитель = Неопределено, Справочники.бит_си_Статьи.ПустаяСсылка(), ТекРодитель));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтрокаРодителя.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Сохранять		= 0;
		НоваяСтрока.Раздел			= Выборка.Ссылка;
		НоваяСтрока.ЭтоГруппа		= Выборка.ЭтоГруппа;
		НоваяСтрока.НазваниеСтатьи	= ?(Выборка.ЭтоГруппа, Выборка.Наименование, Выборка.НазваниеСтатьи);
		Если Выборка.ЭтоГруппа Тогда
			ЗаполнитьСтрокиДереваСтатей(НоваяСтрока, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтрокиДереваСтатей()

// Обновляет дерево разделов справочной информации.
// 
&НаСервере
Процедура ОбновитьДеревоРазделов()
	
	РазделыСправки.ПолучитьЭлементы().Очистить();
	ЗаполнитьСтрокиДереваСтатей(РазделыСправки);
	
КонецПроцедуры // ОбновитьДеревоРазделов()

// Проверяет наличие пометок в строках дерева разделов, дочерних для переданной.
// 
// Параметры 
// 	Строка             	 -	СтрокаДереваЗначений   	 Строка дерева разделов для которой выполняется проверка.          
// Возвращаемое значение:
// 	Возврат ...        	 -	Число                  	 0 - дочерние разделы/статьи не выбраны; 1 - выбраны все; 2 -      
// 	                   	  	                       	 выбраны частично.                                                 
// 
&НаКлиенте
Функция ФлагВыборкаПодчиненных(Строка)
	
	Флаг = 0;
	ВсеФлажки = Истина;
	ЕстьФлажки = Ложь;
	Для Каждого ТекСтрока Из Строка.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтрока.Сохранять = 1 Тогда
			ВсеФлажки = Ложь;
		КонецЕсли;
			
		Если НЕ ТекСтрока.Сохранять = 0 Тогда
			ЕстьФлажки = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ВсеФлажки Тогда
		Возврат 1;
	ИначеЕсли ЕстьФлажки Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ФлагВыборкаПодчиненных()

// Устанавливает пометки для строк дерева разделов, родительских по отношению к переданной.
// 
// Параметры 
// 	Строка             	 -	СтрокаДереваЗначений   	 Строка для родителей которой будут установлены флажки.            
// 
&НаКлиенте
Процедура УстановитьФлажкиРодителей(Строка)
	
	ТекСтрока = Строка;
	Пока НЕ ТекСтрока.ПолучитьРодителя() = Неопределено Цикл
		ТекСтрока = ТекСтрока.ПолучитьРодителя();
		ТекСтрока.Сохранять = ФлагВыборкаПодчиненных(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // УстановитьФлажкиРодителей()

// Устанавливает пометки для строк дерева разделов, дочерних по отношению к переданной.
// 
// Параметры 
// 	Строка             	 -	СтрокаДереваЗначений   	 Строка для дочерних строк которой будут установлены флажки.       
// 	ЗначениеФлажка     	 -	Число                  	 Значение пометки к установке для дочерних строк.                  
// 
&НаКлиенте
Процедура УстановитьФлажкиПодчиненных(Строка, ЗначениеФлажка)
	
	Для Каждого ТекСтрока Из Строка.ПолучитьЭлементы() Цикл
		ТекСтрока.Сохранять = ЗначениеФлажка;
		УстановитьФлажкиПодчиненных(ТекСтрока, ЗначениеФлажка);
	КонецЦикла;
	
КонецПроцедуры // УстановитьФлажкиПодчиненных()

// Изменяет установленные пометки для всех подчиненных строк, переданной строки.
// 
// Параметры 
// 	Строка		     	 -	СтрокаДереваЗначений   	 Строка дерева разделов для изменения пометок.
// 	СпособИзменения    	 -	Строка					 Способ изменения пометок: "Установить", "Снять", "Инвертировать". 
// 
&НаКлиенте
Процедура ИзменитьПометки(Строка, СпособИзменения)
	
	Для Каждого ТекСтрока Из Строка.ПолучитьЭлементы() Цикл
		Если ТекСтрока.ЭтоГруппа Тогда
			ИзменитьПометки(ТекСтрока, СпособИзменения);
			Продолжить;
		КонецЕсли;
		Если СпособИзменения = "Установить" Тогда
			ТекСтрока.Сохранять = 1;
		ИначеЕсли СпособИзменения = "Снять" Тогда
			ТекСтрока.Сохранять = 0;
		ИначеЕсли СпособИзменения = "Инвертировать" Тогда
			ТекСтрока.Сохранять = ?(ТекСтрока.Сохранять = 1, 0, 1);
		КонецЕсли;
		УстановитьФлажкиРодителей(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // ИзменитьПометки()

// Дополняет массив соответствий статей и идентификаторов из дочерних строк переданного дерева/строки дерева
// и указанного массива статей.
// 
&НаСервере
Процедура ЗаполнитьИдентификаторыСтатейИзДереваРазделов(СтрокаДерева, МассивСтатей, МассивСтатейСИдентификаторами = Неопределено)
	
	Если МассивСтатейСИдентификаторами = Неопределено Тогда
		МассивСтатейСИдентификаторами = Новый Массив();
	КонецЕсли;
	
	КоллекцияСтрок = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого ТекСтрока Из КоллекцияСтрок Цикл
		Если ТекСтрока.ЭтоГруппа Тогда
			ЗаполнитьИдентификаторыСтатейИзДереваРазделов(ТекСтрока, МассивСтатей, МассивСтатейСИдентификаторами);
		КонецЕсли;
		Если МассивСтатей.Найти(ТекСтрока.Раздел) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивСтатейСИдентификаторами.Добавить(Новый Структура("Статья,
															   |Идентификатор",
															   ТекСтрока.Раздел,
															   ТекСтрока.ПолучитьИдентификатор()));
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьИдентификаторыСтатейИзДереваРазделов()

// Фозвращает массив статей, соответствующих списку переданных меток.
// 
&НаСервере
Функция ПолучитьСтатьиСМеткамиИИдентификаторами(ВыбранныеМеткиСтрокой)
	
	Попытка
		ВыбранныеМетки = ЗначениеИзСтрокиВнутр(ВыбранныеМеткиСтрокой);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ ТипЗнч(ВыбранныеМетки) = Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ВыбранныеМетки.Колонки.Найти("Метка") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ВыбранныеМетки.Колонки.Найти("Метка").ТипЗначения.Типы().Найти(Тип("СправочникСсылка.бит_си_МеткиСтатей")) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	УстановленныеМетки.Метка,
				   |	УстановленныеМетки.Исключить
				   |ПОМЕСТИТЬ УстановленныеМетки
				   |ИЗ
				   |	&УстановленныеМетки КАК УстановленныеМетки
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	УстановленныеМеткиСтатей.Статья
				   |ИЗ
				   |	РегистрСведений.бит_си_УстановленныеМеткиСтатей КАК УстановленныеМеткиСтатей
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			УстановленныеМетки.Метка КАК Метка,
				   |			УстановленныеМетки.Исключить КАК Исключить
				   |		ИЗ
				   |			УстановленныеМетки КАК УстановленныеМетки) КАК УстановленныеМетки
				   |		ПО УстановленныеМеткиСтатей.Метка = УстановленныеМетки.Метка
				   |			И (УстановленныеМеткиСтатей.Метка ССЫЛКА Справочник.бит_си_МеткиСтатей)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	УстановленныеМеткиСтатей.Статья
				   |
				   |ИМЕЮЩИЕ
				   |	МАКСИМУМ(УстановленныеМетки.Исключить) = ЛОЖЬ
				   |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("УстановленныеМетки", ВыбранныеМетки);
	
	МассивСтатейСИдентификаторами = Неопределено;
	ЗаполнитьИдентификаторыСтатейИзДереваРазделов(РазделыСправки,
												  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статья"),
												  МассивСтатейСИдентификаторами);
												  
	Возврат МассивСтатейСИдентификаторами;

КонецФункции // ПолучитьСтатьиСМеткамиИИдентификаторами()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ СПРАВОЧНОЙ ИНФОРМАЦИИ В XML

#Область ПроцедурыСохраненияСправочнойИнформацииВXml


// ДЛЯ ПОСЛЕДУЮЩЕЙ ЗАГРУЗКИ В СПРАВОЧНИК СТАТЕЙ

// Добавляет метку и ее родителей в запись XML.
// 
// Параметры 
// 	Метка       		 -	СправочникСсылка.бит_си_ Метка из справочника меток
// 							МеткиСтатей.
// 	ЗаписьXML          	 -	ЗаписьXML              	 Объект записи XML в файл.                                         
// 	СохраненныеМетки	 -	Массив                 	 Массив ранее сохраненных меток.
// 
&НаСервере
Процедура СохранитьМетку(Метка, ЗаписьXML, СохраненныеМетки)
	Если НЕ ТипЗнч(СохраненныеМетки) = Тип("Массив") Тогда
		СохраненныеМетки = Новый Массив();
	КонецЕсли;
	Если НЕ СохраненныеМетки.Найти(Метка) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВремДанные = Метка.ПолучитьОбъект();
	ЗаписатьXML(ЗаписьXML, ВремДанные);
	СохраненныеМетки.Добавить(Метка);
	
	Если ЗначениеЗаполнено(Метка.Родитель) Тогда
		СохранитьМетку(Метка.Родитель, ЗаписьXML, СохраненныеМетки);
	КонецЕсли;
КонецПроцедуры // СохранитьМетку

// Добавляет данные раздела справки текущей строки дерева разделов в запись XML.
// 
// Параметры 
// 	СтрокаДерева       	 -	СтрокаДереваЗначений   	 Строка дерева разделов справки для сохранения.                    
// 	ЗаписьXML          	 -	ЗаписьXML              	 Объект записи XML в файл.                                         
// 	ПодчиненныеСохранял	 -	Булево                 	 Истина - выполнялось сохранение подчиненных разделов/статей      
// 	ись                	  	                       	 справки; Ложь - в противном случае.                               
// 	СохранятьОтборы		 -	Булево                 	 Истина - сохранить отборы статей.
// 	СохранятьПривязки	 -	Булево                 	 Истина - сохранить привязки объектов к статьям.
// 
&НаСервере
Процедура СохранениеРаздела(СтрокаДерева,
							ЗаписьXML,
							ПодчиненныеСохранялись = Ложь,
							СохраненныеМетки = Неопределено,
							СохранятьОтборы = Ложь,
							СохранятьПривязки = Ложь)
	ВремПодчиненныеСохранялись = Ложь;
	Если НЕ ТипЗнч(СохраненныеМетки) = Тип("Массив") Тогда
		СохраненныеМетки = Новый Массив();
	КонецЕсли;
	Для Каждого ВремСтрокаДерева Из СтрокаДерева.Строки Цикл
		Если ВремСтрокаДерева.Сохранять = 0 Тогда
			Продолжить;
		КонецЕсли;
		СохранениеРаздела(ВремСтрокаДерева, ЗаписьXML, ВремПодчиненныеСохранялись, СохраненныеМетки, СохранятьОтборы, СохранятьПривязки);
	КонецЦикла;
	Если ВремПодчиненныеСохранялись ИЛИ СтрокаДерева.Сохранять = 1 Тогда
		ВремДанные = СтрокаДерева.Раздел.ПолучитьОбъект();
		ЗаписатьXML(ЗаписьXML, ВремДанные);
		ВремДанные = РегистрыСведений.бит_си_УстановленныеМеткиСтатей.СоздатьНаборЗаписей();
		ВремДанные.Отбор.Статья.Значение = СтрокаДерева.Раздел;
		ВремДанные.Отбор.Статья.Использование = Истина;
		ВремДанные.Прочитать();
		Если НЕ ВремДанные.Количество() = 0 Тогда
			ЗаписатьXML(ЗаписьXML, ВремДанные);
			Для Каждого ТекЗапись Из ВремДанные Цикл
				СохранитьМетку(ТекЗапись.Метка, ЗаписьXML, СохраненныеМетки);
			КонецЦикла;
		КонецЕсли;
		Если СохранятьОтборы ИЛИ СохранятьПривязки Тогда
			ВремДанные = РегистрыСведений.бит_си_СвязанныеОбъекты.СоздатьНаборЗаписей();
			ВремДанные.Отбор.Статья.Значение = СтрокаДерева.Раздел;
			ВремДанные.Отбор.Статья.Использование = Истина;
			Если СохранятьОтборы И НЕ СохранятьПривязки Тогда
				ВремДанные.Отбор.ДляОтборов.Значение = Истина;
				ВремДанные.Отбор.ДляОтборов.Использование = Истина;
			ИначеЕсли НЕ СохранятьОтборы И СохранятьПривязки Тогда
				ВремДанные.Отбор.ДляОтборов.Значение = Ложь;
				ВремДанные.Отбор.ДляОтборов.Использование = Истина;
			КонецЕсли;
			ВремДанные.Прочитать();
			Если НЕ ВремДанные.Количество() = 0 Тогда
				ЗаписатьXML(ЗаписьXML, ВремДанные);
			КонецЕсли;
		КонецЕсли;
		ПодчиненныеСохранялись = Истина;
	КонецЕсли;
КонецПроцедуры // СохранениеРаздела()

// Сохраняет разделы справки, отмеченные в дереве разделов, в файл XML (или сжатый XML-файл, ZIP).
// 
// Параметры 
// 	СохранятьОтборы		 -	Булево                 	 Истина - сохранить отборы статей.
// 	СохранятьПривязки	 -	Булево                 	 Истина - сохранить привязки объектов к статьям.
// 
&НаСервере
Функция ПолучитьДанныеДляСохраненияВXML(СохранятьОтборы = Ложь, СохранятьПривязки = Ложь, Архивировать = Ложь) 
	
	ДеревоРазделов = РеквизитФормыВЗначение("РазделыСправки");
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
				 
	Если Архивировать Тогда
		ЗаписьXML.ОткрытьФайл(ВремФайл);
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("бит_си_СправочнаяИнформация");
	
	// Для сокращения размера файла сообщения записываем соответствие пространств имен
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	Попытка
		
		// Получаем выборку сохраняемых данных	
		Для Каждого СтрокаДерева Из ДеревоРазделов.Строки Цикл
			Если СтрокаДерева.Сохранять = 0 Тогда
				Продолжить;
			КонецЕсли;
			СохранениеРаздела(СтрокаДерева, ЗаписьXML, , , СохранятьОтборы, СохранятьПривязки);
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Если Архивировать Тогда
			ЗаписьXML.Закрыть();
		Иначе
			Возврат ЗаписьXML.Закрыть();
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		ТекстСообщения = НСтр("ru = 'Ошибка архивации файла разделов справки: %1.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВызватьИсключение (ТекстОшибки);
		
	КонецПопытки;
	
	Если Архивировать Тогда
		Попытка
			ВремФайлАрхива = ПолучитьИмяВременногоФайла("zip");
			
			Архиватор = Новый ЗаписьZipФайла(ВремФайлАрхива, , "Файл разделов справки");
			Архиватор.Добавить(ВремФайл);
			Архиватор.Записать();
		
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка архивации файла разделов справки: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	    КонецПопытки;
		
	КонецЕсли;
	
	Данные = Новый ДвоичныеДанные(ВремФайлАрхива);
	
	Возврат Base64Строка(Данные);
	
КонецФункции // ПолучитьДанныеДляСохраненияВXML()



#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ СПРАВОЧНОЙ ИНФОРМАЦИИ В HTML.

#Область ПроцедурыСохраненияСправочнойИнформацииВHtml



// Добавляет раздел справки в содержание HTML-документа.
// 
// Параметры 
// 	СтрокаДерева       	 -	СтрокаДереваЗначений   	 Добавляемая строка дерева разделов.                               
// 	НомерСсылки        	 -	Число                  	 Порядковый номер ссылки на сохраняемый раздел.                   
// 	ТекстДокумента     	 -	ТекстовыйДокумент      	 Текст сохраняемого HTML-документа.                                
// 
&НаСервере
Процедура ДобавлениеРазделаСодержания(СтрокаДерева, ТекстДокумента, КаталогИзображений)
	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		Если ТекСтрока.Сохранять = 0 Тогда
			Продолжить;
		КонецЕсли;
		НаименованиеСтатьи = ?(ТекСтрока.Раздел.ЭтоГруппа, ТекСтрока.Раздел.Наименование, ТекСтрока.Раздел.НазваниеСтатьи);
		СтатьяОбъект = ТекСтрока.Раздел.ПолучитьОбъект();
		Метки = СтатьяОбъект.ПолучитьМеткиСтатьи(Истина, КаталогИзображений);
		ТекстМетки = "";
		Для Каждого ТекМетка Из Метки Цикл
			ТекстМетки = ТекстМетки +
						 "&nbsp;<img alt=""" + ТекМетка.Наименование + """ title=""" +
						 ТекМетка.Наименование + """ src = """ + ТекМетка.Картинка + """ />";
		КонецЦикла;
		ТекстДокумента.ДобавитьСтроку("<div style=""display:block;text-align:left;text-indent:" +
									  СокрЛП(10 + 20 * ТекСтрока.Уровень()) + "pt;font-size:" +
									  ?(ТекСтрока.Раздел.ЭтоГруппа,"12","10") + "pt;font-weight:" +
									  ?(ТекСтрока.Раздел.ЭтоГруппа,"bolder","normal") + ";padding-top:" +
									  ?(ТекСтрока.Раздел.ЭтоГруппа,"10","0") + """><a href=""" + "#link" +
									  СокрЛП(ТекСтрока.Раздел.УникальныйИдентификатор()) + """>" + НаименованиеСтатьи + "</a>" +
									  ТекстМетки + "</div>");
		ДобавлениеРазделаСодержания(ТекСтрока, ТекстДокумента, КаталогИзображений);
	КонецЦикла;
КонецПроцедуры // ДобавлениеРазделаСодержания()

// Добавляет раздел справки в HTML-документ
// 
// Параметры 
// 	СтрокаДерева       	 -	СтрокаДереваЗначений   	 Добавляемая строка дерева разделов.                               
// 	НомерСсылки        	 -	Число                  	 Порядковый номер ссылки на сохраняемый раздел.                    
// 	ТекстДокумента     	 -	ТекстовыйДокумент      	 Текст сохраняемого HTML-документа.                                
// 	КаталогИзображений 	 -	Строка                 	 Путь к каталогу для сохранения изображений.                       
// 
&НаСервере
Процедура ДобавлениеРаздела(СтрокаДерева, ТекстДокумента, КаталогИзображений)
	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		Если ТекСтрока.Сохранять = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.Раздел.ЭтоГруппа Тогда
			ТекстДокумента.ДобавитьСтроку("<div style=""display:block;text-align:left;text-indent:" +
										  СокрЛП(10 + 20 * ТекСтрока.Уровень()) +
										  "pt;font-size:18pt;font-weight:bold;padding-top:20""><a name=""" +
										  "link" + СокрЛП(ТекСтрока.Раздел.УникальныйИдентификатор()) + """>" +
										  ТекСтрока.Раздел.Наименование + "</a></div>");
			ДобавлениеРаздела(ТекСтрока, ТекстДокумента, КаталогИзображений);
		Иначе
			СтатьяОбъект = ТекСтрока.Раздел.ПолучитьОбъект();
			ТекстСтатьи = СтатьяОбъект.ЗагрузитьИзображенияИзБД(КаталогИзображений);
			
			Метки = СтатьяОбъект.ПолучитьМеткиСтатьи(Истина, КаталогИзображений);
			ТекстМетки = "";
			Для Каждого ТекМетка Из Метки Цикл
				ТекстМетки = ТекстМетки +
							 "&nbsp;<img alt=""" + ТекМетка.Наименование + """ title=""" +
							 ТекМетка.Наименование + """ src = """ + ТекМетка.Картинка + """ />";
			КонецЦикла;
			
			Позиция = Найти(ВРЕГ(ТекстСтатьи), "<BODY>");
			ТекстСтатьи = ?(Позиция = 0, ТекстСтатьи, Сред(ТекстСтатьи,Позиция+6));
			Позиция = Найти(ВРЕГ(ТекстСтатьи), "</BODY>");
			ТекстСтатьи = ?(Позиция = 0, ТекстСтатьи, Лев(ТекстСтатьи,Позиция-1));
			ТекстДокумента.ДобавитьСтроку("<div style=""display:block;text-align:left;text-indent:" +
										  СокрЛП(10 + 20 * ТекСтрока.Уровень()) + "pt;"">" + ТекстМетки + "<a name=""link" +
										  СокрЛП(ТекСтрока.Раздел.УникальныйИдентификатор()) + """></a>" + ТекстСтатьи + "</div>");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ДобавлениеРаздела()

// Сохраняет разделы справки, отмеченные в дереве разделов, в HTML-документ.
// 
// Параметры 
// 
&НаСервере
Функция ПолучитьДанныеДляСохраненияВHTML() Экспорт
	
	ДеревоРазделов = РеквизитФормыВЗначение("РазделыСправки");
	
	ТекДок = Новый ТекстовыйДокумент;
	ТекДок.ДобавитьСтроку("<html><head><title></title></head><body>");
	
	// Определяем каталог для сохранения изображений.
	ИмяФайла = ПолучитьИмяВременногоФайла("html");
	ВремКаталог = "";
	ВремФайл = "";
	бит_си_ИсточникСправочникСтатьи.бит_си_ПолучитьКаталогИИмяФайла(ИмяФайла, ВремКаталог, ВремФайл);
	бит_си_ИсточникСправочникСтатьи.бит_си_УстановитьРасширениеФайла(ВремФайл, ".files");
	ВремКаталог = ВремКаталог + "\" + ВремФайл;
	
	// Формируем оглавление
	ДобавлениеРазделаСодержания(ДеревоРазделов, ТекДок, ВремКаталог);
	
	// Формируем содержание
	ДобавлениеРаздела(ДеревоРазделов, ТекДок, ВремКаталог);
	
	ТекДок.ДобавитьСтроку("</BODY></html>");
	
	МассивФайловНаДиске = НайтиФайлы(ВремКаталог, "*.*");
	МассивФайлов = Новый Массив();
	
	Для Каждого ТекФайл Из МассивФайловНаДиске Цикл
		
		ТекАдрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ТекФайл.ПолноеИмя), ЭтаФорма.УникальныйИдентификатор);
		МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекФайл.Имя, ТекАдрес));
		
	КонецЦикла;
	
	Возврат Новый Структура("Текст, Картинки, ВремКаталог", ТекДок.ПолучитьТекст(), МассивФайлов, ВремКаталог);

КонецФункции // ПолучитьДанныеДляСохраненияВHTML()



#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ.

#Область ПроцедурыДействияКомандныхПанелейФормы



&НаКлиенте
Процедура СохранитьВXML(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);

#КонецОбласти

	#Если ВебКлиент Тогда
	ДиалогОткрытияФайла.Фильтр = "Файлы разделов справки (*.xml)|*.xml";
	ДиалогОткрытияФайла.Расширение = "xml";
	#Иначе
	ДиалогОткрытияФайла.Фильтр = "Файлы разделов справки (*.xml)|*.xml|Упакованные файлы разделов справки (*.zip)|*.zip";
	ДиалогОткрытияФайла.Расширение = "zip";
	#КонецЕсли
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Если НЕ ДиалогОткрытияФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	Архивировать = Ложь;
	#Иначе
	Архивировать = Прав(ДиалогОткрытияФайла.ПолноеИмяФайла, 4) = ".zip";
	#КонецЕсли
	ДанныеДляСохранения = ПолучитьДанныеДляСохраненияВXML(СохранятьОтборы, СохранятьПривязки, Архивировать);
	
	Если ТипЗнч(ДанныеДляСохранения) = Тип("Строка") Тогда
		Если Архивировать Тогда
			Данные = Base64Значение(ДанныеДляСохранения);
		Иначе
			Данные = Новый ТекстовыйДокумент();
			Данные.УстановитьТекст(ДанныеДляСохранения);
		КонецЕсли;
		Данные.Записать(ДиалогОткрытияФайла.ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры // СохранитьВXML()

&НаКлиенте
Процедура СохранитьВHTML(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = "Текст(*.htm)|*.htm";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		ИмяФайла = МассивФайлов[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	// Определяем каталог для сохранения изображений.
	ВремКаталог = "";
	ВремФайл = "";
	бит_си_ИсточникСправочникСтатьи.бит_си_ПолучитьКаталогИИмяФайла(ИмяФайла, ВремКаталог, ВремФайл);
	бит_си_ИсточникСправочникСтатьи.бит_си_УстановитьРасширениеФайла(ВремФайл, ".files");
	ВремКаталог = ВремКаталог + "\" + ВремФайл;
	
	Данные = ПолучитьДанныеДляСохраненияВHTML();
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		
		Если Данные.Картинки.Количество() > 0 Тогда
			ПолучитьФайлы(Данные.Картинки, , ВремКаталог, Ложь);
		КонецЕсли;
		
		Данные.Текст = СтрЗаменить(Данные.Текст, Данные.ВремКаталог, ВремКаталог);
		
		Текст = Новый ТекстовыйДокумент();
		Текст.УстановитьТекст(Данные.Текст);
		Текст.Записать(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры // СохранитьВHTML()

// Процедура обработчик команд изменения пометок разделов справки.
// 
&НаКлиенте
Процедура ПометкиИзменить(Команда)
	
	ИзменитьПометки(РазделыСправки, Сред(Команда.Имя, 8));
	
КонецПроцедуры // ПометкиИзменить()

// Процедура обработчик команды "Обновить" разделов справки.
// 
&НаКлиенте
Процедура ОбновитьРазделы(Команда)
	
	ОбновитьДеревоРазделов();
	
КонецПроцедуры // ОбновитьРазделы()

// Процедура обработчик команды "ВыбратьМетки".
// 
&НаКлиенте
Процедура ВыбратьМетки(Команда)
	
	ФормаВыбора = ПолучитьФорму("Обработка.бит_си_СохранениеСправочнойИнформации.Форма.ФормаВыборМетокУправляемая", , Элементы.РазделыСправки);
	ФормаВыбора.Открыть();
	
КонецПроцедуры // ВыбратьМетки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.

#Область ПроцедурыОбработчикиСобытийЭлементовФормы


// Процедура-обработчик события "ОбработкаВыбора" табличного поля "РазделыСправки".
// 
&НаКлиенте
Процедура РазделыСправкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтатьиСМетками = ПолучитьСтатьиСМеткамиИИдентификаторами(ВыбранноеЗначение);
	
	Если СтатьиСМетками = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ВопросРазделыСправкиОбработкаВыбора", ЭтотОбъект, СтатьиСМетками);
	ПоказатьВопрос(ОбработкаОповещения, "Сбросить установленные флажки?", РежимДиалогаВопрос.ДаНетОтмена, 15, КодВозвратаДиалога.Отмена); 
			
КонецПроцедуры

&НаКлиенте
Процедура ВопросРазделыСправкиОбработкаВыбора(Ответ, СтатьиСМетками) Экспорт

	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекСтрока Из РазделыСправки.ПолучитьЭлементы() Цикл
			ТекСтрока.Сохранять = 0;
			УстановитьФлажкиПодчиненных(ТекСтрока, 0);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекСтатья Из СтатьиСМетками Цикл
		СтрокаРаздела = РазделыСправки.НайтиПоИдентификатору(ТекСтатья.Идентификатор);
		Если СтрокаРаздела = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРаздела.Сохранять = 1;
		УстановитьФлажкиРодителей(СтрокаРаздела);
	КонецЦикла;

КонецПроцедуры // ВопросРазделыСправкиОбработкаВыбора()

// Процедура-обработчик события "ПриИзменении" поля "Сохранять" табличного поля "РазделыСправки".
// 
&НаКлиенте
Процедура РазделыСправкиСохранятьПриИзменении(Элемент)
	
	Если Элементы.РазделыСправки.ТекущиеДанные.Сохранять = 2 Тогда
		Элементы.РазделыСправки.ТекущиеДанные.Сохранять = 0;
	КонецЕсли;
	Если НЕ Элементы.РазделыСправки.ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		УстановитьФлажкиПодчиненных(Элементы.РазделыСправки.ТекущиеДанные,
									Элементы.РазделыСправки.ТекущиеДанные.Сохранять);
	КонецЕсли;
	УстановитьФлажкиРодителей(Элементы.РазделыСправки.ТекущиеДанные);
	
КонецПроцедуры // РазделыСправкиСохранятьПриИзменении()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ПроцедурыОбработчикиСобытийФормы



// Процедура-обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	ОбновитьДеревоРазделов();
	
КонецПроцедуры // ПриСозданииНаСервере()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

#Область ОператорыОсновнойПрограммы

#КонецОбласти




