
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_ЗаполнитьСоответствияОборотовТрансляции;
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьКэшированныеЗначения(фКэшЗначений);
	
	Объект.Период.Вариант = ВариантСтандартногоПериода.ЭтотГод;
	
	ИнициализацияКомпоновщика();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПравилаЗаполненияПолейПриИзменении(Элемент)
	
	ПроверитьПравильностьЗаполненияПравила();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПравилаЗаполненияПолей) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны правила заполнения полей!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,"Объект.ПравилаЗаполненияПолей",Отказ);
		
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим таблицу с регистраторами
	ПолучитьДокументыСДвижениями();
	
	Если ТаблицаДокументов.ПолучитьЭлементы().Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Отсутствуют данные для обработки!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьОбработкуЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Будет выполнено заполнение регистра ""Соответствие оборотов трансляции"". 
								|Операция может занять продолжительное время. Продолжить?'");

		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ВыполнитьОбработкуЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ВыполнитьОбработкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Выполняется заполнение регистра ""Соответствие оборотов трансляции""...'");
	Состояние(ТекстСообщения);
	
	ЗаполнитьСоответствиеОборотовТрансляции();

	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект);
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Объект.Период;
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Процедура обработчик оповещения "ВыборПериодаЗавершение".
// 
// Параметры:
// Период - Произвольный.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеДанные) Экспорт

	Если НЕ Период = Неопределено Тогда
		
		Объект.Период = Период; 
	
	КонецЕсли; 

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшированныеЗначения(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
КонецПроцедуры

// Процедура выполняет инициализацию компоновщика настроек.
// 
// 
&НаСервере
Процедура ИнициализацияКомпоновщика()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СоответствиеЗаписейТрансляции.Регистратор,
	|	бит_СоответствиеЗаписейТрансляции.НомерСтрокиИсточника,
	|	бит_СоответствиеЗаписейТрансляции.НомерСтрокиПриемника
	|{ВЫБРАТЬ
	|	Регистратор}
	|ИЗ
	|	РегистрСведений.бит_СоответствиеЗаписейТрансляции КАК бит_СоответствиеЗаписейТрансляции
	|ГДЕ
	|	бит_СоответствиеЗаписейТрансляции.Источник = &Источник
	|	И бит_СоответствиеЗаписейТрансляции.Приемник = &Приемник
	|	И ВЫБОР
	|			КОГДА &ДатаНачала = &ПустаяДата
	|					И &ДатаОкончания = &ПустаяДата
	|				ТОГДА ИСТИНА
	|			КОГДА &ДатаНачала <> &ПустаяДата
	|					И &ДатаОкончания <> &ПустаяДата
	|				ТОГДА бит_СоответствиеЗаписейТрансляции.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			КОГДА &ДатаНачала = &ПустаяДата
	|					И &ДатаОкончания <> &ПустаяДата
	|				ТОГДА бит_СоответствиеЗаписейТрансляции.Период <= &ДатаОкончания
	|			КОГДА &ДатаНачала <> &ПустаяДата
	|					И &ДатаОкончания = &ПустаяДата
	|				ТОГДА бит_СоответствиеЗаписейТрансляции.Период >= &ДатаНачала
	|		КОНЕЦ
	|{ГДЕ
	|	бит_СоответствиеЗаписейТрансляции.Организация}";
	
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя 				  = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя 						= "НаборДанных"; 
	НаборДанных.ИсточникДанных 				= "ИсточникДанных";
	НаборДанных.Запрос 						= ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей= Истина;
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Заголовок 	= "Регистратор";
	НовоеПоле.Поле 			= "Регистратор";
	НовоеПоле.ПутьКДанным 	= "Регистратор";
	
	НовоеПоле.Заголовок 	= "НомерСтрокиИсточника";
	НовоеПоле.Поле 			= "НомерСтрокиИсточника";
	НовоеПоле.ПутьКДанным 	= "НомерСтрокиИсточника";
	
	НовоеПоле.Заголовок 	= "НомерСтрокиПриемника";
	НовоеПоле.Поле 			= "НомерСтрокиПриемника";
	НовоеПоле.ПутьКДанным 	= "НомерСтрокиПриемника";
	
	ОтборСКД = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор;
	
	НовыйОтбор = ОтборСКД.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Организация");
	НовыйОтбор.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.Использование	= Ложь;
	НовыйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	НовыйОтбор.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор; // Это чтобы поле отображалось на форме в пользовательских настройках.
	
	// Определим структуру возвращаемой таблицы
	ГруппировкаКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ВыбранноеПоле = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Заголовок 	= "Регистратор";
	ВыбранноеПоле.Поле      	= Новый ПолеКомпоновкиДанных("Регистратор");
	
	ПолеГруппировки = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Регистратор");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	ПолеГруппировки.ТипДополнения  = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	
	ГруппировкаКомпоновки = ГруппировкаКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ВыбранноеПоле = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Заголовок 	= "НомерСтрокиИсточника";
	ВыбранноеПоле.Поле      	= Новый ПолеКомпоновкиДанных("НомерСтрокиИсточника");
	
	ВыбранноеПоле = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Заголовок 	= "НомерСтрокиПриемника";
	ВыбранноеПоле.Поле      	= Новый ПолеКомпоновкиДанных("НомерСтрокиПриемника");
	
	
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	Объект.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры // ИнициализацияЗапроса()

// Функция получает регистраторы.
// 
// Возвращаемое значение:
//   ТаблицаРегистраторов   - ТаблицаЗначений.
// 
&НаСервере
Процедура ПолучитьДокументыСДвижениями()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ПараметрыСКД = Объект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("ДатаНачала"   ,Объект.Период.ДатаНачала);
	ПараметрыСКД.УстановитьЗначениеПараметра("ДатаОкончания",Объект.Период.ДатаОкончания);
	ПараметрыСКД.УстановитьЗначениеПараметра("ПустаяДата"   ,Дата('00010101'));
	ПараметрыСКД.УстановитьЗначениеПараметра("Источник"   	,Объект.ПравилаЗаполненияПолей.Источник);
	ПараметрыСКД.УстановитьЗначениеПараметра("Приемник"   	,Объект.ПравилаЗаполненияПолей.Приемник);
	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
												Объект.КомпоновщикНастроек.ПолучитьНастройки(),
												,
												,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаРезультат = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ЗначениеВРеквизитФормы(ТаблицаРезультат, "ТаблицаДокументов");
	
КонецПроцедуры // ПолучитьРегистраторыДляОчистки()

// Процедура добавляет текст в протокол.
// 
// Параметры:
// 	ТекстСообщения - строка
// 
&НаСервере
Процедура ДобавитьТекстВПротокол(ТекстСообщения)
	
	Объект.ПротоколВыполнения = Объект.ПротоколВыполнения + Символы.ПС + ТекстСообщения;
	
КонецПроцедуры

// Процедура заполняет типы проводок в движениях регистраторов.
// 
// Параметры:
// 	нет
// 
&НаСервере
Процедура ЗаполнитьСоответствиеОборотовТрансляции()
	
	ТекстСообщения = НСтр("ru='Начало выполнения операции: %1%'");
	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекущаяДатаСеанса());
	ДобавитьТекстВПротокол(ТекстСообщения);
	             
	ЭлементыДерева = ТаблицаДокументов.ПолучитьЭлементы();
	
	ИмяИсточника = Объект.ПравилаЗаполненияПолей.Источник.ИмяОбъекта;
	ИмяПриемника = Объект.ПравилаЗаполненияПолей.Приемник.ИмяОбъекта;
	
	СтруктураПараметров = бит_МеханизмТрансляции.КонструкторСтруктурыПараметровТрансляции();
	СтруктураПараметров.ОбъектСистемыИсточник = Объект.ПравилаЗаполненияПолей.Источник;
	СтруктураПараметров.ОбъектСистемыПриемник = Объект.ПравилаЗаполненияПолей.Приемник;
	СтруктураПараметров.МетаданныеИсточника = Метаданные.РегистрыБухгалтерии[ИмяИсточника];
	СтруктураПараметров.МетаданныеПриемника = Метаданные.РегистрыБухгалтерии[ИмяПриемника];
	
	Для Каждого СтрокаРегистратор Из ЭлементыДерева Цикл
		
		МетаРегистратор = СтрокаРегистратор.Регистратор.Метаданные();
		
		// Получим наборы записей регистров с отбором по регистратору.
		НаборСоответствие = РегистрыНакопления.бит_СоответствиеОборотовТрансляции.СоздатьНаборЗаписей();
		НаборСоответствие.Отбор.Регистратор.Установить(СтрокаРегистратор.Регистратор);
		НаборСоответствие.Прочитать();
		
		НаборСоответствие.Очистить();
		
		НаборИсточник = РегистрыБухгалтерии[ИмяИсточника].СоздатьНаборЗаписей();
		НаборИсточник.Отбор.Регистратор.Установить(СтрокаРегистратор.Регистратор);
		НаборИсточник.Прочитать();
		
		максИндексНаборИсточник = НаборИсточник.Количество() - 1;
		
		НаборПриемник = РегистрыБухгалтерии[ИмяПриемника].СоздатьНаборЗаписей();
		НаборПриемник.Отбор.Регистратор.Установить(СтрокаРегистратор.Регистратор);
		НаборПриемник.Прочитать();
		
		максИндексНаборПриемник = НаборПриемник.Количество() - 1;
		
		// Подготовим структуру данных для формирования записи.
		СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(СтрокаРегистратор.Регистратор);
		бит_МеханизмТрансляции.ДополнитьСтруктуруШапкиДокумента(СтрокаРегистратор.Регистратор,СтруктураШапкиДокумента);
		
		СтруктураПараметров.МетаданныеРегистратора = МетаРегистратор;
		
		ЗаписиПоРегистратору = СтрокаРегистратор.ПолучитьЭлементы();
		
		Для Каждого ТекСтрока Из ЗаписиПоРегистратору Цикл
			
			ИндексИсточника = ТекСтрока.НомерСтрокиИсточника-1;
			ИндексПриемника = ТекСтрока.НомерСтрокиПриемника-1;
			
			Если максИндексНаборИсточник < ИндексИсточника ИЛИ максИндексНаборПриемник < ИндексПриемника Тогда
				Продолжить;
			КонецЕсли; 
			
			бит_МеханизмТрансляции.ЗаполнитьЗаписьСоответствияОборотов(НаборСоответствие
																, НаборИсточник[ИндексИсточника]
																, НаборПриемник[ИндексПриемника]
																, СтруктураШапкиДокумента
																, СтруктураПараметров);
			
		КонецЦикла;
		
		ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборСоответствие, "Ошибки");
		
		Если НЕ ДействиеВыполнено Тогда
			ТекстСообщения = НСтр("ru='Не удалось записать набор записей регистра для документа ""%1%""'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекСтрока.Регистратор);
			
			ДобавитьТекстВПротокол(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru='Окончание выполнения операции: %1%'");
	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекущаяДатаСеанса());
	ДобавитьТекстВПротокол(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПравильностьЗаполненияПравила()
	
	ДопустимыйВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии;
	
	Если НЕ Объект.ПравилаЗаполненияПолей.Источник.ВидОбъекта = ДопустимыйВидОбъекта
		ИЛИ НЕ Объект.ПравилаЗаполненияПолей.Приемник.ВидОбъекта = ДопустимыйВидОбъекта Тогда
		
		ТекстСообщения = НСтр("ru='Указано не корректное правило заполнения полей. "
							+ "Следует указать правило, в котором в качестве источника и приемника используется регистр бухгалтерии.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,Объект,"ПравилаЗаполненияПолей");
		
		Объект.ПравилаЗаполненияПолей = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

