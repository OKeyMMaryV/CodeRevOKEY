
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	МетаданныеОбъекта = Метаданные.Обработки.бит_РасшифровкаПроизвольногоОтчета;
	
	Если Не Параметры.Свойство("НастройкаОтчета") Тогда
	 	бит_ОбщегоНазначенияКлиентСервер.СообщитьОбОтказеОткрытияОбработкиСамостоятельно(МетаданныеОбъекта.Синоним, Отказ);
	    Возврат;
	КонецЕсли;
	
	Параметры.Свойство("НастройкаОтчета"   , Объект.НастройкаОтчета);
	Параметры.Свойство("ИмяОбласти"        , Объект.ИмяОбласти);
	Параметры.Свойство("ДатаНачала"        , Объект.ДатаНачала);
	Параметры.Свойство("ДатаОкончания"     , Объект.ДатаОкончания);
	Параметры.Свойство("ФорматЧисел"       , Объект.ФорматЧисел);
	Параметры.Свойство("ВалютаДокумента"   , Объект.ВалютаДокумента);
	Параметры.Свойство("КурсДокумента"     , Объект.КурсДокумента);
	Параметры.Свойство("ОткрытьВсе"        , Объект.ОткрытьВсе);
	Параметры.Свойство("КратностьДокумента", Объект.КратностьДокумента);
	Параметры.Свойство("Организация"       , Объект.Организация);
	Параметры.Свойство("ИмяФормыВладельца" , ИмяФормыВладельца);
	
	Параметры.Свойство("ИсточникДанных", Объект.ИсточникДанных);
	Параметры.Свойство("ЭлементДанных", Объект.ЭлементДанных);
	
	НастройкаПулаПодключений = Справочники.бит_мпд_НастройкиПуловПодключений.ПустаяСсылка();
	Параметры.Свойство("НастройкаПулаПодключений", НастройкаПулаПодключений);
	
	
	ОбрОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_РасшифровкаПроизвольногоОтчета"));
	
	Если Параметры.Свойство("ОтборВОтчете") Тогда		
		ОбрОбъект.ХранилищеОтборВОтчете =  Параметры.ОтборВОтчете;		
	КонецЕсли;
	
	Если Параметры.Свойство("ТаблицаДанныеОтчета") Тогда  		
		ОбрОбъект.ХранилищеТаблицаАргументов = Параметры.ТаблицаДанныеОтчета;		
	КонецЕсли;
	
	Если Параметры.Свойство("ТаблицаПараметры") Тогда		
		ОбрОбъект.ХранилищеТаблицаПараметры = Параметры.ТаблицаПараметры;		
	КонецЕсли; 
	
	ОбрОбъект.ПараметрыРасшифровок = Новый Массив;
	
	// Расшифровка произвольного отчета
	Если Объект.ОткрытьВсе Тогда
		
		МассивВидов = Новый Массив;
		МассивВидов.Добавить(Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение);
		МассивВидов.Добавить(Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула);
		
		ПравилаЗаполнения = Справочники.бит_НастройкиПроизвольныхОтчетов.ПолучитьПоказателиВида(Объект.НастройкаОтчета,МассивВидов);
		Для каждого СтрокаТаблицы Из ПравилаЗаполнения Цикл
			
			СтруктураНастроек = бит_МеханизмПолученияДанных.СформироватьНастройкуРасшифровкиПроизвольногоОтчета(СтрокаТаблицы
			,НастройкаПулаПодключений);
			
			ОбрОбъект.ПараметрыРасшифровок.Добавить(СтруктураНастроек);
			
		КонецЦикла; 
		
	Иначе	
		
		Если НЕ ПустаяСтрока(Объект.ИмяОбласти) Тогда
			
			СтрокаТаблицы = Справочники.бит_ПоказателиПроизвольныхОтчетов.НайтиПоКоду(Объект.ИмяОбласти,,,Объект.НастройкаОтчета);
			Если ЗначениеЗаполнено(СтрокаТаблицы) Тогда
				
				СтруктураНастроек = бит_МеханизмПолученияДанных.СформироватьНастройкуРасшифровкиПроизвольногоОтчета(СтрокаТаблицы
				,НастройкаПулаПодключений);
				ОбрОбъект.ПараметрыРасшифровок.Добавить(СтруктураНастроек);
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Для ячейки %1% расшифровка не предусмотрена.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Объект.ИмяОбласти);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				Отказ = Истина;
				
			КонецЕсли; 
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ЭлементДанных) Тогда
			
			СтруктураНастроек = бит_МеханизмПолученияДанных.КонструкторНастройкиРасшифровкиПроизвольногоОтчета();	
			
			СтруктураНастроек.Заголовок                = "";										   
			СтруктураНастроек.ИмяОбласти               = Объект.ИмяОбласти;
			СтруктураНастроек.ЭлементДанных            = Объект.ЭлементДанных;
			СтруктураНастроек.НастройкаПодключения     = Объект.ЭлементДанных.НастройкаПодключения;
			СтруктураНастроек.НастройкаПулаПодключений = НастройкаПулаПодключений;
			СтруктураНастроек.ВидИнформационнойБазы= Объект.ЭлементДанных.ВидИнформационнойБазы;
			СтруктураНастроек.ИсточникДанных       = Объект.ЭлементДанных.ИсточникДанных;
			СтруктураНастроек.ИмяРесурса           = ?(Параметры.Свойство("ИмяРесурса"), Параметры.ИмяРесурса, "");
			СтруктураНастроек.ВидЯчейки            = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение;
			СтруктураНастроек.ВидЭлементаДанных    = Объект.ЭлементДанных.ВидГруппы;
			СтруктураНастроек.Формула              = Объект.ЭлементДанных.Формула;
			СтруктураНастроек.ФорматЧисел          = Объект.ФорматЧисел;
			
			ОбрОбъект.ПараметрыРасшифровок.Добавить(СтруктураНастроек);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не выбрана ячейка для которой следует вывести расшифровку.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Отказ = Истина;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ОбрОбъект, Объект);
	
	Параметры.Свойство("ИсточникДанных", Объект.ИсточникДанных);
	ИзвлечьРеквизитыИсточникаДанных();
	
	Если Объект.ОткрытьВсе Тогда		
		ЗаголовокФормыРасшифровки = Строка(Объект.НастройкаОтчета)+" - "+ НСтр("ru = 'полная расшифровка'"); 		
	Иначе     		
		ЗаголовокФормыРасшифровки = Объект.ИмяОбласти+" - "+ НСтр("ru = 'расшифровка'"); 		
	КонецЕсли;
	
	Если Параметры.Свойство("Заголовок") И ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		
		ЗаголовокФормыРасшифровки = Параметры.Заголовок;
		
	КонецЕсли;	
	
	ЭтаФорма.Заголовок = ЗаголовокФормыРасшифровки;
	
	ОбновитьСервер();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ФормаКомандаНастройка.Пометка = НЕ ПанельНастроекСкрыта;
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда	
		
		Если Расшифровка.Свойство("ТипРасшифровки")  Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если ВРег(Расшифровка.ТипРасшифровки) = ВРег("НоваяЯчейка") Тогда
				
				// Открываем новую расшифровку
				СтрПар = Новый Структура;
				
				СтрПар.Вставить("ТаблицаДанныеОтчета", Объект.ХранилищеТаблицаАргументов);
				СтрПар.Вставить("ОтборВОтчете"       , Объект.ХранилищеОтборВОтчете);
				СтрПар.Вставить("ТаблицаПараметры"   , Объект.ХранилищеТаблицаПараметры);
				СтрПар.Вставить("ИмяОбласти"        ,Расшифровка.ЗначениеРасшифровки.ИмяОбласти);
				СтрПар.Вставить("НастройкаОтчета"   ,Объект.НастройкаОтчета);
				СтрПар.Вставить("ДатаНачала"        ,Объект.ДатаНачала);
				СтрПар.Вставить("ДатаОкончания"     ,Объект.ДатаОкончания);
				СтрПар.Вставить("ФорматЧисел"       ,Объект.ФорматЧисел);
				СтрПар.Вставить("ОткрытьВсе"        ,Ложь);
				СтрПар.Вставить("ВалютаДокумента"   ,Объект.ВалютаДокумента);
				СтрПар.Вставить("КурсДокумента"     ,Объект.КурсДокумента);
				СтрПар.Вставить("КратностьДокумента",Объект.КратностьДокумента);
				СтрПар.Вставить("Организация"       ,Объект.Организация);
				СтрПар.Вставить("НастройкаПулаПодключений", Объект.ПулПодключений);
				СтрПар.Вставить("ИмяФормыВладельца" ,ИмяФормыВладельца);
				Если Расшифровка.ЗначениеРасшифровки.Свойство("ИсточникДанных") Тогда
					
					СтрПар.Вставить("ИсточникДанных", Расшифровка.ЗначениеРасшифровки.ИсточникДанных);
					
				КонецЕсли; 
				Если Расшифровка.ЗначениеРасшифровки.Свойство("ЭлементДанных") Тогда
				
				    СтрПар.Вставить("ЭлементДанных", Расшифровка.ЗначениеРасшифровки.ЭлементДанных);
				
				КонецЕсли;
				Если Расшифровка.ЗначениеРасшифровки.Свойство("ИмяРесурса") Тогда
				
				    СтрПар.Вставить("ИмяРесурса", Расшифровка.ЗначениеРасшифровки.ИмяРесурса);
				
				КонецЕсли; 
				
				СтрКлюч =  Расшифровка.ЗначениеРасшифровки.ИмяОбласти;
				ОткрытьФорму("Обработка.бит_РасшифровкаПроизвольногоОтчета.Форма.ФормаУправляемая", СтрПар, ЭтаФорма, СтрКлюч);
				
				
			ИначеЕсли ВРег(Расшифровка.ТипРасшифровки) = ВРег("ВернутьсяВОтчет") Тогда	
				
				// Возвращаемся в расшифровываемый отчет					 
				АктивироватьОбластьОтчетаВладельца(Расшифровка.ЗначениеРасшифровки);
				
			КонецЕсли; // Анализ типа расшифровки
			
		Иначе	
			
		  бит_мпд_Клиент.РасшифроватьИзВнешнейБазы(Расшифровка, СтандартнаяОбработка);
			
		КонецЕсли; // Есть свойство ТипРасшифровки
		
	Иначе
		
		бит_мпд_Клиент.РасшифроватьИзВнешнейБазы(Расшифровка, СтандартнаяОбработка);
		
	КонецЕсли; // Расшифровка структура

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИзмерения

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "Измерения".
// 
&НаКлиенте
Процедура ИзмеренияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		
		Если Копирование Тогда

		  	ТекущаяСтрока = Элементы.Измерения.ТекущиеДанные;
			ТекущаяСтрока.ПутьКДанным = "";

		КонецЕсли; 	
		
	  	ОткрытьФормуПолейПостроителя("Измерения", "ПутьКДанным", "Измерение");
	
	КонецЕсли; 
	
КонецПроцедуры // ИзмеренияПриНачалеРедактирования()

&НаКлиенте
Процедура ИзмеренияПутьКДаннымНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПолейПостроителя("Измерения", "ПутьКДанным", "Измерение");
	  
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОбновитьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВернуться(Команда)
	
	АктивироватьОбластьОтчетаВладельца(Объект.ИмяОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройка(Команда)
	
	ПанельНастроекСкрыта = НЕ ПанельНастроекСкрыта;
	Элементы.ФормаКомандаНастройка.Пометка = НЕ ПанельНастроекСкрыта;
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура открывает форму выбора полей построителя.
// 
// Параметры:
//  ИмяТабЧасти - Строка
//  ИмяПоля     - Строка
//  Режим       - Строка
// 
&НаКлиенте
Процедура ОткрытьФормуПолейПостроителя(ИмяТабЧасти, ИмяПоля, Режим)

	ТекущаяСтрока = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	ПараметрыФормы  = Новый Структура;
	ПараметрыФормы.Вставить("ВидИнформационнойБазы",Объект.ВидИнформационнойБазы);
	ПараметрыФормы.Вставить("Режим"                ,Режим);
	ПараметрыФормы.Вставить("ВыводитьВложенные"    ,Истина);
	ПараметрыФормы.Вставить("ТекстЗапроса"         ,Объект.ТекстЗапроса);
	ПараметрыФормы.Вставить("НастройкаПодключения" ,Объект.НастройкаПодключения);
	ПараметрыФормы.Вставить("ИнициализироватьПостроитель",Истина);
	
	Если НЕ ПустаяСтрока(ТекущаяСтрока[ИмяПоля]) Тогда
		
		ПараметрыФормы.Вставить("ТекПутьКДанным",ТекущаяСтрока[ИмяПоля]);
		
	КонецЕсли; 
	
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ДопДанные  = Новый Структура("ТекущаяСтрока, ИмяПоля", ТекущаяСтрока, ИмяПоля);
	Оповещение = Новый ОписаниеОповещения("ВыборПолейПостроителяЗавершение", ЭтотОбъект, ДопДанные);
	ОткрытьФорму("ОбщаяФорма.бит_мпд_ФормаВыбораСвойствПостроителя",ПараметрыФормы,,,,,Оповещение,РежимОкна);
	
КонецПроцедуры // ОткрытьФормуПолейПостроителя()

// Процедура обработчик оповещения "ВыборПолейПостроителяЗавершение".
// 
// Параметры:
// РезВыбора - Структура.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВыборПолейПостроителяЗавершение(РезВыбора, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезВыбора) = Тип("Структура") Тогда
	
		ДополнительныеДанные.ТекущаяСтрока[ДополнительныеДанные.ИмяПоля] = РезВыбора.ПутьКДанным;
	
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПолейПостроителяЗавершение

// Функция активизирует форму расшифровываемого отчета 
// и позиционируется на расшифровываемую область.
// 
// Параметры:
//  ИмяОбласти - Строка
// 
&НаКлиенте
Процедура АктивироватьОбластьОтчетаВладельца(ИмяОбласти = "")
	
	// Возвращаемся в форму отчета
	Окна = ПолучитьОкна();
	
	Для каждого ТекОкно Из Окна Цикл
		
		Если ТекОкно.Основное Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		УФ = ТекОкно.ПолучитьСодержимое();
		
		Если ТипЗнч(УФ) = Тип("УправляемаяФорма") И (УФ.ИмяФормы = ИмяФормыВладельца) Тогда
			УФ.Активизировать();			
			Если НЕ ПустаяСтрока(ИмяОбласти) Тогда
				Оповестить("АктивизироватьОбласть", ИмяОбласти, УФ.УникальныйИдентификатор);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // АктивироватьОбластьОтчетаВладельца()

#КонецОбласти

// Процедура получает значения реквизитов источника данных.
// 
&НаСервере
Процедура ИзвлечьРеквизитыИсточникаДанных()
	
	Объект.ВидИнформационнойБазы = Объект.ИсточникДанных.ВидИнформационнойБазы;
	Объект.ТекстЗапроса = Объект.ИсточникДанных.ЗапросБД.ТекстЗапроса;
	Объект.НастройкаПодключения = Объект.ИсточникДанных.НастройкаПодключения;
	
КонецПроцедуры // ИзвлечьРеквизитыИсточникаДанных()

// Процедура обновляет данные расшифровки.
// 
&НаСервере
Процедура ОбновитьСервер()
	
	ОбрОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_РасшифровкаПроизвольногоОтчета"));
	
	ОбрОбъект.ОбновитьРасшифровку(Результат);
	
	ОбрОбъект.ПулПодключений = Новый Соответствие;
	
	ЗначениеВДанныеФормы(ОбрОбъект, Объект);	
	ИзвлечьРеквизитыИсточникаДанных();
	
КонецПроцедуры // ОбновитьСервер()

// Функция определяет необходимо ли при данной расшифровке видеть панель настройки.
// 
// Возвращаемое значение:
//   флВидимость   - Булево
// 
&НаСервере
Функция ОпределитьВидимостьНастройкиРасшифровки()

	флВидимость = Ложь;
	
	Если Объект.ПараметрыРасшифровок.Количество() = 1 Тогда
		
		ТекПараметрыРасшифровки = Объект.ПараметрыРасшифровок[0];
		Если ТекПараметрыРасшифровки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение 
			 И ТекПараметрыРасшифровки.ВидЭлементаДанных = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
		
			флВидимость = Истина;
			
		КонецЕсли; 
	
	КонецЕсли; 

	Возврат флВидимость;
	
КонецФункции // ОпределитьВидимостьНастройкиРасшифровки()

// Процедура управляет видимостью/доступностью элементов формы.
// 
// 
&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаНастройкаРасшифровки.Видимость = НЕ Объект.ОткрытьВсе И НЕ ПанельНастроекСкрыта;
	Элементы.ФормаКомандаНастройка.Видимость = НЕ Объект.ОткрытьВсе;
	
	Если НЕ ОпределитьВидимостьНастройкиРасшифровки() Тогда
	
		Элементы.ГруппаНастройкаРасшифровки.Видимость = Ложь;
		Элементы.ФормаКомандаНастройка.Видимость = Ложь;
	
	КонецЕсли; 
	
КонецПроцедуры // УстановитьВидимость()

#КонецОбласти
