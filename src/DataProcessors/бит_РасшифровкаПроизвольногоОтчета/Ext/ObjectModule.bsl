#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// Хранит признак, того, что выводится расшифровка по нескольким ячейкам.
Перем мМножественнаяРасшифровка;

// Перем ТаблицаРезультат;
// Хранит настройки отбора отчета.
Перем ОтборВОтчете;
// Хранит таблицу аргументов
Перем ТаблицаАргументов;
// Хранит таблицу параметров
Перем ТаблицаПараметры;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура выводит расшифровку для данного отчета.
// 
// Параметры:
//  ТД  - ТабличныйДокумент
// 
Процедура ОбновитьРасшифровку(ТД) Экспорт
	
	ТД.Очистить();
	
	Макет = ПолучитьМакет("Макет");
	
	мМножественнаяРасшифровка = ?(ПараметрыРасшифровок.Количество()>1,Истина,Ложь);
	
	ТаблицаАргументов = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ХранилищеТаблицаАргументов);
	Если НЕ ТипЗнч(ТаблицаАргументов) = Тип("ТаблицаЗначений") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	
	ОтборВОтчете = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ХранилищеОтборВОтчете);
	Если НЕ ТипЗнч(ОтборВОтчете) = Тип("ТаблицаЗначений") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ТаблицаПараметры = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ХранилищеТаблицаПараметры);
	Если НЕ ТипЗнч(ТаблицаПараметры) = Тип("ТаблицаЗначений") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Для каждого НастройкаРасшифровки Из ПараметрыРасшифровок Цикл
		
		флРучнаяКорректировка = Ложь;
		Если ЗначениеЗаполнено(НастройкаРасшифровки.ИмяОбласти) Тогда
			
			ЗначениеЯчейки = ПолучитьЗначениеАргумента(НастройкаРасшифровки.ИмяОбласти,ТаблицаАргументов,флРучнаяКорректировка);
			
		Иначе
			
			ЗначениеЯчейки = ПолучитьЗначениеЭД(ТаблицаРезультат
												,НастройкаРасшифровки.ЭлементДанных
												,НастройкаРасшифровки.ИмяРесурса);	
			
		КонецЕсли; 
		
		СтрФормат = ОпределитьФорматЧисел(НастройкаРасшифровки);
		
		ВывестиОбластьЗаголовок(ТД,Макет,НастройкаРасшифровки,флРучнаяКорректировка);
		
		Если НЕ флРучнаяКорректировка Тогда
			
			Если НастройкаРасшифровки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула Тогда
				
				ВывестиРасшифровкуФормулы(ТД,Макет,НастройкаРасшифровки,ЗначениеЯчейки,СтрФормат);		
				
			ИначеЕсли НастройкаРасшифровки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение Тогда
				
				Если НастройкаРасшифровки.ВидЭлементаДанных = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
					
					Итог = 0;
					ВывестиРасшифровкуЗначения(ТД,Макет,НастройкаРасшифровки,ЗначениеЯчейки,СтрФормат,Итог);
					
					ЗначениеКВыводу = ?(ЗначениеЯчейки = 0,Итог,ЗначениеЯчейки);
					ВывестиОбластьОписание(ТД,Макет,ЗначениеКВыводу,"Итого по ячейке",СтрФормат);
					
				ИначеЕсли НастройкаРасшифровки.ВидЭлементаДанных = Перечисления.бит_ВидыГруппДанных.Группировка Тогда
					
					ВывестиРасшифровкуГруппыЭлементовДанных(ТД,Макет,НастройкаРасшифровки,ЗначениеЯчейки,СтрФормат);
					
				ИначеЕсли НастройкаРасшифровки.ВидЭлементаДанных = Перечисления.бит_ВидыГруппДанных.Формула Тогда
					
					// Добавление кода. Начало: 08.11.2016  {{
					ВывестиРасшифровкуФормулыЭлементаДанных(ТД,Макет,НастройкаРасшифровки,ЗначениеЯчейки,СтрФормат);
					// Добавление кода. Конец }}  
					
				КонецЕсли; // По виду группы элемента данных				
				
				
			КонецЕсли; // По виду ячейки
			
		Иначе	
			
			// Ячейка скорректирована вручную - расшифровку не выводим, выводим только значение.
			ВывестиОбластьОписание(ТД,Макет,ЗначениеЯчейки,"Итого по ячейке",СтрФормат);
			
		КонецЕсли; // Ручная корректировка
		
	КонецЦикла; 
	
	ТД.ТолькоПросмотр = Истина;

КонецПроцедуры // Обновить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция определяет формат для вывода значений. Первый приоритет настройка формата из ячейки,
// далее из шапки, если формат не задан, то Число(15,2).
// 
// Параметры:
//  НастройкаРасшифровки  - Структура.
// 
// Возвращаемое значение:
//   СтрФормат   - Строка.
// 
Функция ОпределитьФорматЧисел(НастройкаРасшифровки)
	
	// Определим, какую настройку формата применять.
	Если НЕ ПустаяСтрока(НастройкаРасшифровки.ФорматЧисел) Тогда
		
		СтрФормат = НастройкаРасшифровки.ФорматЧисел;
		
	Иначе	
		
		Если НЕ ПустаяСтрока(ФорматЧисел) Тогда
			
			СтрФормат = ФорматЧисел;
			
		Иначе	
			
			СтрФормат = "ЧЦ=15; ЧДЦ=2";
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СтрФормат;
	
КонецФункции // ОпределитьФорматПоСтрокеПравил()

// Функция получает значение аргумента по имени из таблицы аргументов.
// 
// Параметры:
//  ИмяАргумента  - Строка.
//  ТабАргументов - ТаблицаЗначений.
//  РучнаяКорректировка - Булево - Признак, того, что значение было отредактирована в отчете вручную.
// 
// Возвращаемое значение:
//   Результат    - Число.
// 
Функция ПолучитьЗначениеАргумента(ИмяАргумента,ТабАргументов,РучнаяКорректировка = Ложь)  Экспорт
	
	Результат = 0;
	
	СтрОтбор = Новый Структура("ИмяОбласти",ИмяАргумента);
	
	МассивСтрок = ТабАргументов.НайтиСтроки(СтрОтбор);
	
	Если НЕ ТабАргументов.Колонки.Найти("ЗначениеПоказателя") = Неопределено Тогда
		
		ИмяРесурса = "ЗначениеПоказателя";
		
	Иначе	
		
		ИмяРесурса = "Значение";
		
	КонецЕсли; 
	
	Для каждого СтрокаАргументы Из МассивСтрок Цикл
	
		Результат = Результат + СтрокаАргументы[ИмяРесурса];
		
		Если СтрокаАргументы.РучнаяКорректировка = Истина Тогда
		
			РучнаяКорректировка = СтрокаАргументы.РучнаяКорректировка;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьЗначениеАргумента()

// Функция получает значение из ТаблицыРезультатов по элементу данных.
// 
// Параметры:
//  ТабРезультат  - ТаблицаЗначений.
//  ЭлементДанных - СправочникСсылка.бит_ЭлементыДанных.
//  ИмяРесурса    - Строка.
// 
// Возвращаемое значение:
//   Результат    - Число.
// 
Функция ПолучитьЗначениеЭД(ТабРезультат,ЭлементДанных,ИмяРесурса) Экспорт
	
	Результат = 0;
	
	Если НЕ ТабРезультат.Колонки.Найти("ЭлементДанных") = Неопределено Тогда
		
		СтрокаТаблицыРезультат = ТабРезультат.Найти(ЭлементДанных,"ЭлементДанных");	
		Если НЕ СтрокаТаблицыРезультат = Неопределено Тогда
			
			Результат = СтрокаТаблицыРезультат[ИмяРесурса];
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьЗначениеТаблицаРезультат()

// Функция формирует отступ заданного уровня. Используется при выводе по группировкам.
// 
// Параметры:
//  Уровень  - Число
// 
// Возвращаемое значение:
//   СтрОтступ - Строка
// 
Функция СформироватьОтступ(Уровень) 
	
	СтрОтступ = "";
	Для й = 0 По Уровень Цикл
	
		СтрОтступ = СтрОтступ+" ";
	
	КонецЦикла; 

	Возврат СтрОтступ;
	
КонецФункции // СформироватьОтступ()

// Функция формирует заголовок расшифровываемой ячейки.
// 
// Параметры:
//  ИмяОбласти    -  Строка.
//  НастройкаРасшифровки -  Структура.
//  РучнаяКорректировка - Булево.
// 
// Возвращаемое значение:
//   ЗаголовокЯчейки   - Строка.
// 
Функция СформироватьЗаголовокЯчейки(ИмяОбласти,НастройкаРасшифровки,РучнаяКорректировка)

	ЗаголовокЯчейки = ИмяОбласти;
	
	Если НЕ ПустаяСтрока(НастройкаРасшифровки.ЭлементДанных.Описание) Тогда
		
		ТекстНаименования = НастройкаРасшифровки.ЭлементДанных.Описание;
		
	Иначе	
		
		ТекстНаименования = НастройкаРасшифровки.ЭлементДанных.Наименование;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстНаименования) Тогда
		
		ЗаголовокЯчейки = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(ЗаголовокЯчейки,ТекстНаименования," - ");
		
	КонецЕсли; 
	
	Если РучнаяКорректировка Тогда
		
		ЗаголовокЯчейки = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(ЗаголовокЯчейки,"Отредактировано вручную!"," - ");
		
	КонецЕсли; 

	Возврат ЗаголовокЯчейки;
	
КонецФункции // СформироватьЗаголовокЯчейки()

// Процедура выводит область заголовка ячейки расшифровки.
// 
// Параметры:
//  ТД    - ТабличныйДокумент.
//  Макет - ТабличныйДокумент.
//  НастройкаРасшифровки - Структура.
//  РучнаяКорректировка  - Булево.
// 
Процедура ВывестиОбластьЗаголовок(ТД,Макет,НастройкаРасшифровки,РучнаяКорректировка)
	
	ОблМакета = Макет.ПолучитьОбласть("Заголовок");	
	
	Если НЕ ПустаяСтрока(НастройкаРасшифровки.ИмяОбласти) Тогда
		
		Расш = Новый Структура("ТипРасшифровки,ЗначениеРасшифровки","ВернутьсяВОтчет",НастройкаРасшифровки.ИмяОбласти);
		ОблМакета.Параметры.ЗначениеРасшифровки = Расш;
		
	КонецЕсли; 
	
	ОблМакета.Параметры.Заголовок = СформироватьЗаголовокЯчейки(НастройкаРасшифровки.ИмяОбласти
																,НастройкаРасшифровки
																,РучнаяКорректировка);
	ТД.Вывести(ОблМакета);
	
	
КонецПроцедуры // ВывестиОбластьЗаголовок()

// Процедура выводит область описания ячейки расшифровки.
// 
// Параметры:
//  ТД    - ТабличныйДокумент
//  Макет - ТабличныйДокумент
//  ЗначениеЯчейки - Число
//  ОписаниеЯчейки - Строка
//  СтрФормат	   - Строка
// 
Процедура ВывестиОбластьОписание(ТД,Макет,ЗначениеЯчейки,ОписаниеЯчейки,СтрФормат)
	
	ОблМакета = Макет.ПолучитьОбласть("Описание");
	ОблМакета.Параметры.РезультатЗначение = Формат(ЗначениеЯчейки,СтрФормат);
	ОблМакета.Параметры.РезультатОписание = ОписаниеЯчейки;
	ТД.Вывести(ОблМакета);
	
КонецПроцедуры // ВывестиОбластьОписание()

// Процедура выводит расшифровку группы элементов данных.
// 
// Параметры:
//  ТД    - ТабличныйДокумент.
//  Макет - ТабличныйДокумент.
//  НастройкаРасшифровки - Структура.
//  ЗначениеЯчейки       - Число.
//  СтрФормат            - Строка.
// 
Процедура ВывестиРасшифровкуГруппыЭлементовДанных(ТД,Макет,НастройкаРасшифровки,ЗначениеЯчейки,СтрФормат)

	// Получим элементы данных, входящие в данную группу.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаЭлементов" ,НастройкаРасшифровки.ЭлементДанных);
	Запрос.УстановитьПараметр("СпособКомпоновки",НастройкаОтчета.СпособКомпоновки);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	бит_ЭлементыДанных.Ссылка КАК Ссылка,
	|	бит_ЭлементыДанных.ИсточникДанных,
	|	бит_ЭлементыДанных.Коэффициент,
	|	бит_ЭлементыДанных.НастройкиПостроителя,
	|	бит_ЭлементыДанных.ВидГруппы
	|ИЗ
	|	Справочник.бит_ЭлементыДанных КАК бит_ЭлементыДанных
	|ГДЕ
	|	бит_ЭлементыДанных.Ссылка В ИЕРАРХИИ(&ГруппаЭлементов)
	|	И бит_ЭлементыДанных.Владелец = &СпособКомпоновки
	|	И бит_ЭлементыДанных.Ссылка <> &ГруппаЭлементов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Результат = Запрос.Выполнить();
	
	// Сформируем массив элементов данных
	ТзВрем = Результат.Выгрузить();
	МассивЭлементов = ТзВрем.ВыгрузитьКолонку("Ссылка");
	
	Если МассивЭлементов.Количество()=0 Тогда
		МассивЭлементов = Неопределено;
	КонецЕсли; 
	
	// Получим данных по элементам данных, входящим в данную группу.
	ГраницаНач = ДатаНачала;
	ГраницаКон = Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая);

	Параметры = бит_МеханизмПолученияДанных.ЗаполнитьСтруктуруПараметровИзТаблицы(ТаблицаПараметры);
	бит_МеханизмПолученияДанных.ДобавитьОбязательныеПараметрыПроизвольногоОтчета(ЭтотОбъект,Параметры);
	
	СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоСпособуКомпоновки();
	СтрПар.Параметры                = Параметры;
	СтрПар.МассивЭлементов          = МассивЭлементов;
	СтрПар.ОтборВОтчете             = ОтборВОтчете;
	СтрПар.ПоказыватьИндикатор      = Ложь;
	СтрПар.НастройкаПулаПодключений = НастройкаРасшифровки.НастройкаПулаПодключений;
	
	ТаблицаРезультатВрем = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточникам(НастройкаОтчета.СпособКомпоновки
																		,ГраницаНач
																		,ГраницаКон
																		,СтрПар);
	
																		
	бит_МеханизмПолученияДанных.ДополнитьРезультатИВыполнитьРасчет(НастройкаОтчета.СпособКомпоновки,ТаблицаРезультатВрем);
	МассивРесурсов   = бит_МеханизмПолученияДанных.ПолучитьСписокПолейДляСпособаКомпоновки(НастройкаОтчета.СпособКомпоновки,"Ресурс");
	ТаблицаРезультатВрем = бит_МеханизмПолученияДанных.СвернутьРезультат(ТаблицаРезультатВрем,МассивРесурсов);
	
	// Дополним или заменим данные в основной ТаблицаРезультат.
	Если ТаблицаРезультат = Неопределено ИЛИ ТаблицаРезультат.Колонки.Найти("ЭлементДанных") = Неопределено Тогда
		
		ТаблицаРезультат = ТаблицаРезультатВрем.Скопировать();
		
	Иначе	
		
		Для каждого СтрокаТаблицы Из ТаблицаРезультатВрем Цикл
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ЭлементДанных",СтрокаТаблицы.ЭлементДанных);
			
			НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(СтрОтбор);
			
			Если НайденныеСтроки.Количество()>0 Тогда
				
				Для каждого СтрокаНайденная Из НайденныеСтроки Цикл
					
					ЗаполнитьЗначенияСвойств(СтрокаНайденная,СтрокаТаблицы);
					
				КонецЦикла;  
				
			Иначе	
				
				НоваяСтрока = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	ТД.НачатьАвтогруппировкуСтрок();
	ОбойтиИерерхиюЭлементовДанных(ТД,Макет,Результат,НастройкаРасшифровки,0,СтрФормат);			  
	ТД.ЗакончитьАвтогруппировкуСтрок();
	
	ВывестиОбластьОписание(ТД,Макет,ЗначениеЯчейки,"Итого по ячейке",СтрФормат);
	

КонецПроцедуры // ВывестиРасшифровкуГруппыЭлементовДанных()

// Процедура выводит расшифровку по ячейке типа Значение, когда она ссылается на ЭлементДанных типа Формула.
// 
// Параметры:
//  ТД    - ТабличныйДокумент.
//  Макет - ТабличныйДокумент.
//  СтрокаПравил   - Структура.
//  ЗначениеЯчейки - Число.
//  СтрФормат      - Строка.
//
Процедура ВывестиРасшифровкуФормулыЭлементаДанных(ТД,Макет,НастройкаРасшифровки,ЗначениеЯчейки,СтрФормат)
	// ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-01-31 (#2954)
	Перем МассивЭлементов;
	// ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-01-31 (#2954)
	
	// Получим элементы данных, входящие в данную группу.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаЭлементов" ,НастройкаРасшифровки.ЭлементДанных);
	Запрос.УстановитьПараметр("СпособКомпоновки",НастройкаОтчета.СпособКомпоновки);
	
	// ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-01-31 (#2954)
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Таблица.СтрокаРасчета.ИсточникДанных КАК ИсточникДанных,
	//|	Таблица.СтрокаРасчета.Коэффициент КАК Коэффициент,
	//|	Таблица.СтрокаРасчета.НастройкиПостроителя КАК НастройкиПостроителя,
	//|	Таблица.СтрокаРасчета.ВидГруппы КАК ВидГруппы,
	//|	Таблица.СтрокаРасчета КАК Ссылка,
	//|	Таблица.СтрокаРасчета.НастройкаПодключения КАК НастройкаПодключения
	//|ИЗ
	//|	Справочник.бит_ЭлементыДанных.СтрокиРасчетаДляФормулы КАК Таблица
	//|ГДЕ
	//|	Таблица.Ссылка = &ГруппаЭлементов
	//|	И Таблица.Ссылка.Владелец = &СпособКомпоновки
	//|	И Таблица.СтрокаРасчета <> &ГруппаЭлементов";
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.СтрокаРасчета КАК Ссылка
	|ПОМЕСТИТЬ ТабЭД
	|ИЗ
	|	Справочник.бит_ЭлементыДанных.СтрокиРасчетаДляФормулы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &ГруппаЭлементов
	|	И Таблица.Ссылка.Владелец = &СпособКомпоновки
	|	И Таблица.СтрокаРасчета <> &ГруппаЭлементов
	|	И Таблица.СтрокаРасчета.ВидГруппы <> ЗНАЧЕНИЕ(Перечисление.бит_ВидыГруппДанных.Формула)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлДанных.Код КАК Код,
	|	ЭлДанных.Наименование КАК Наименование,
	|	ЭлДанных.ВидГруппы КАК ВидГруппы,
	|	ЭлДанных.ИсточникДанных КАК ИсточникДанных,
	|	ЭлДанных.НастройкиПостроителя КАК НастройкиПостроителя,
	|	ЭлДанных.Коэффициент КАК Коэффициент,
	|	ЭлДанных.НастройкаПодключения КАК НастройкаПодключения,
	|	ЭлДанных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_ЭлементыДанных КАК ЭлДанных
	|ГДЕ
	|	ЭлДанных.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ТабЭД.Ссылка
	|			ИЗ
	|				ТабЭД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
	 // ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-01-31 (#2954)
	
	Результат = Запрос.Выполнить();
	
	// Сформируем массив элементов данных
	// ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-01-31 (#2954)
	//ТзВрем = Результат.Выгрузить();
	//МассивЭлементов = ТзВрем.ВыгрузитьКолонку("Ссылка");
	//
	//Если МассивЭлементов.Количество()=0 Тогда
	//	МассивЭлементов = Неопределено;
	//КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если МассивЭлементов = Неопределено Тогда
			МассивЭлементов = Новый Массив;
		КонецЕсли;
		МассивЭлементов.Добавить(Выборка.Ссылка);
	КонецЦикла;	
	
	// ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-01-31 (#2954) 
	
	// Получим данных по элементам данных, входящим в данную группу.
	ГраницаНач = ДатаНачала;
	ГраницаКон = Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая);

	Параметры = бит_МеханизмПолученияДанных.ЗаполнитьСтруктуруПараметровИзТаблицы(ТаблицаПараметры);
	бит_МеханизмПолученияДанных.ДобавитьОбязательныеПараметрыПроизвольногоОтчета(ЭтотОбъект,Параметры);
	
	СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоСпособуКомпоновки();
	СтрПар.Параметры                = Параметры;
	СтрПар.МассивЭлементов          = МассивЭлементов;
	СтрПар.ОтборВОтчете             = ОтборВОтчете;
	СтрПар.ПоказыватьИндикатор      = Ложь;
	СтрПар.НастройкаПулаПодключений = НастройкаРасшифровки.НастройкаПулаПодключений;
	
	ТаблицаРезультатВрем = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточникам(НастройкаОтчета.СпособКомпоновки
																		,ГраницаНач
																		,ГраницаКон
																		,СтрПар);
	
																		
	бит_МеханизмПолученияДанных.ДополнитьРезультатИВыполнитьРасчет(НастройкаОтчета.СпособКомпоновки,ТаблицаРезультатВрем);
	МассивРесурсов   = бит_МеханизмПолученияДанных.ПолучитьСписокПолейДляСпособаКомпоновки(НастройкаОтчета.СпособКомпоновки,"Ресурс");
	ТаблицаРезультатВрем = бит_МеханизмПолученияДанных.СвернутьРезультат(ТаблицаРезультатВрем,МассивРесурсов);
	
	// Дополним или заменим данные в основной ТаблицаРезультат.
	Если ТаблицаРезультат = Неопределено ИЛИ ТаблицаРезультат.Колонки.Найти("ЭлементДанных") = Неопределено Тогда
		
		ТаблицаРезультат = ТаблицаРезультатВрем.Скопировать();
		
	Иначе	
		
		Для каждого СтрокаТаблицы Из ТаблицаРезультатВрем Цикл
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ЭлементДанных",СтрокаТаблицы.ЭлементДанных);
			
			НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(СтрОтбор);
			
			Если НайденныеСтроки.Количество()>0 Тогда
				
				Для каждого СтрокаНайденная Из НайденныеСтроки Цикл
					
					ЗаполнитьЗначенияСвойств(СтрокаНайденная,СтрокаТаблицы);
					
				КонецЦикла;  
				
			Иначе	
				
				НоваяСтрока = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-01-31 (#2954)
	//Для каждого СтрокаТаблицы Из ТзВрем Цикл
	//	
	//	ИмяРесурса = НастройкаРасшифровки.ИмяРесурса;
	//	ОблМакета  = Макет.ПолучитьОбласть("Ячейка");
	//	Значение   = ПолучитьЗначениеЭД(ТаблицаРезультат,СтрокаТаблицы.Ссылка,ИмяРесурса);
	//				
	//	СтруктураНастроек = бит_МеханизмПолученияДанных.КонструкторНастройкиРасшифровкиПроизвольногоОтчета();
	//	
	//	СтруктураНастроек.ИмяОбласти               = "";
	//	СтруктураНастроек.ЭлементДанных            = СтрокаТаблицы.Ссылка;
	//	СтруктураНастроек.ВидЭлементаДанных        = СтрокаТаблицы.ВидГруппы;
	//	СтруктураНастроек.ИсточникДанных           = СтрокаТаблицы.ИсточникДанных;
	//	СтруктураНастроек.ИмяРесурса               = ИмяРесурса;
	//	СтруктураНастроек.ВидЯчейки                = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение;
	//	СтруктураНастроек.Формула                  = "";
	//	СтруктураНастроек.ФорматЧисел              = СтрФормат;
	//	СтруктураНастроек.НастройкаПодключения     = СтрокаТаблицы.Ссылка.НастройкаПодключения;
	//	СтруктураНастроек.НастройкаПулаПодключений = НастройкаРасшифровки.НастройкаПулаПодключений;
	//	
	//	
	//	Расш = Новый Структура("ТипРасшифровки,ЗначениеРасшифровки","НоваяЯчейка",СтруктураНастроек);
	//	//ОблМакета.Параметры.ЗначениеРасшифровки = Расш;
	//						
	//	ОблМакета.Параметры.ЯчейкаОписание = Строка(СтрокаТаблицы.Ссылка);
	//	ОблМакета.Параметры.ЯчейкаЗначение = Формат(Значение,СтрФормат);
	//	ТД.Вывести(ОблМакета);
	//			
	//КонецЦикла; 
	//
	
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-19 (#2954)	
	ТД.НачатьАвтогруппировкуСтрок();
	
	ОблМакета = Макет.ПолучитьОбласть("Формула");
	ОблМакета.Параметры.Формула = НастройкаРасшифровки.ЭлементДанных.Формула;	
	ТД.Вывести(ОблМакета,0);
	//ТД.Область(ТД.ВысотаТаблицы,3,ТД.ВысотаТаблицы,3).Текст = ЗначениеЯчейки;
	
	ОбойтиИерерхиюЭлементовДанных(ТД,Макет,Результат,НастройкаРасшифровки,1,СтрФормат);	
	
	//ТД.ЗакончитьАвтогруппировкуСтрок();
	// ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-01-31 (#2954) 
	
	
	//Заполним формулы
	ЗапросФормул = Новый Запрос;
	ЗапросФормул.Текст = 
	"ВЫБРАТЬ
	|	Таблица.СтрокаРасчета КАК Ссылка,
	|	Таблица.СтрокаРасчета.Формула КАК Формула,
	|	Таблица.СтрокаРасчета.Наименование КАК Наименование,
	|	Таблица.СтрокаРасчета.Код КАК Код
	|ИЗ
	|	Справочник.бит_ЭлементыДанных.СтрокиРасчетаДляФормулы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &ГруппаЭлементов
	|	И Таблица.Ссылка.Владелец = &СпособКомпоновки
	|	И Таблица.СтрокаРасчета <> &ГруппаЭлементов
	|	И Таблица.СтрокаРасчета.ВидГруппы = ЗНАЧЕНИЕ(Перечисление.бит_ВидыГруппДанных.Формула)";
	
	ЗапросФормул.УстановитьПараметр("ГруппаЭлементов" ,НастройкаРасшифровки.ЭлементДанных);
	ЗапросФормул.УстановитьПараметр("СпособКомпоновки",НастройкаОтчета.СпособКомпоновки);
	
	РезультатЗапросаФормул = ЗапросФормул.Выполнить();
	
	ВыборкаДетальныеЗаписиФормула = РезультатЗапросаФормул.Выбрать();
	
	ЗапросЭлементовФормулы = Новый Запрос;
	ЗапросЭлементовФормулы.Текст = 
	"ВЫБРАТЬ
	|	бит_ЭлементыДанныхСтрокиРасчетаДляФормулы.СтрокаРасчета КАК Ссылка
	|ПОМЕСТИТЬ ТабЭДФ
	|ИЗ
	|	Справочник.бит_ЭлементыДанных.СтрокиРасчетаДляФормулы КАК бит_ЭлементыДанныхСтрокиРасчетаДляФормулы
	|ГДЕ
	|	бит_ЭлементыДанныхСтрокиРасчетаДляФормулы.Ссылка = &ЭлементДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлДанных.Код КАК Код,
	|	ЭлДанных.Наименование КАК Наименование,
	|	ЭлДанных.ВидГруппы КАК ВидГруппы,
	|	ЭлДанных.ИсточникДанных КАК ИсточникДанных,
	|	ЭлДанных.НастройкиПостроителя КАК НастройкиПостроителя,
	|	ЭлДанных.Коэффициент КАК Коэффициент,
	|	ЭлДанных.НастройкаПодключения КАК НастройкаПодключения,
	|	ЭлДанных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_ЭлементыДанных КАК ЭлДанных
	|ГДЕ
	|	ЭлДанных.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ТабЭДФ.Ссылка
	|			ИЗ
	|				ТабЭДФ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
		
	Пока ВыборкаДетальныеЗаписиФормула.Следующий() Цикл
					
		ЗапросЭлементовФормулы.УстановитьПараметр("ЭлементДанных", ВыборкаДетальныеЗаписиФормула.Ссылка);
		
		МассивЭлементовФормулы = ЗапросЭлементовФормулы.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Параметры = бит_МеханизмПолученияДанных.ЗаполнитьСтруктуруПараметровИзТаблицы(ТаблицаПараметры);
		бит_МеханизмПолученияДанных.ДобавитьОбязательныеПараметрыПроизвольногоОтчета(ЭтотОбъект,Параметры);
		
		СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоСпособуКомпоновки();
		СтрПар.Параметры                = Параметры;
		СтрПар.МассивЭлементов          = МассивЭлементовФормулы;
		СтрПар.ОтборВОтчете             = ОтборВОтчете;
		СтрПар.ПоказыватьИндикатор      = Ложь;
		СтрПар.НастройкаПулаПодключений = НастройкаРасшифровки.НастройкаПулаПодключений;
		
		ТаблицаРезультатВрем = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточникам(НастройкаОтчета.СпособКомпоновки
		,ГраницаНач
		,ГраницаКон
		,СтрПар);
		бит_МеханизмПолученияДанных.ДополнитьРезультатИВыполнитьРасчет(НастройкаОтчета.СпособКомпоновки,ТаблицаРезультатВрем);
		МассивРесурсов   = бит_МеханизмПолученияДанных.ПолучитьСписокПолейДляСпособаКомпоновки(НастройкаОтчета.СпособКомпоновки,"Ресурс");
		ТаблицаРезультатФормулы = бит_МеханизмПолученияДанных.СвернутьРезультат(ТаблицаРезультатВрем,МассивРесурсов);
		
		РезультатЗапросаЭлементов = ЗапросЭлементовФормулы.Выполнить();
		
		ТаблицаФормулы = Новый ТаблицаЗначений;
		ТаблицаФормулы.Колонки.Добавить("ЭлементКод");
		ТаблицаФормулы.Колонки.Добавить("Сумма");
		
		//ТД.НачатьАвтогруппировкуСтрок();
		ОблМакетаФормулаЗаголовок = Макет.ПолучитьОбласть("Формула");
		ОблМакетаФормулаЗаголовок.Параметры.Формула = ВыборкаДетальныеЗаписиФормула.Наименование + " [" + ВыборкаДетальныеЗаписиФормула.Код + "] Формула: " + ВыборкаДетальныеЗаписиФормула.Формула;
		ТД.Вывести(ОблМакетаФормулаЗаголовок,1);
		
		ПозицияЗаголовкаФормулы = ТД.ВысотаТаблицы;
		
		ОбойтиИерархиюФормулы(ТД,Макет, РезультатЗапросаЭлементов, НастройкаРасшифровки, 2, СтрФормат, ТаблицаРезультатФормулы, ТаблицаФормулы);	
		
		СтрокаФормулы = ВыборкаДетальныеЗаписиФормула.Формула;
		
		Для Каждого Строка из ТаблицаФормулы Цикл
			СтрокаФормулы = СтрЗаменить(СтрокаФормулы,Строка.ЭлементКод,Строка.Сумма);
		КонецЦикла;
		
		СтрокаФормулы = СтрЗаменить(СтрокаФормулы,",",".");
		СтрокаФормулы = СтрЗаменить(СтрокаФормулы," ","");
		Попытка
			ОблМакетаФормулаИтог = Макет.ПолучитьОбласть("ОписаниеФормула");		
			ОблМакетаФормулаИтог.Параметры.РезультатЗначение = Формат(Вычислить(СтрокаФормулы) * ВыборкаДетальныеЗаписиФормула.Ссылка.Коэффициент, СтрФормат);
			ОблМакетаФормулаИтог.Параметры.РезультатОписание = "Итог по формуле";
			ТД.Вывести(ОблМакетаФормулаИтог, 2);
			//ТД.Область(ПозицияЗаголовкаФормулы,3,ПозицияЗаголовкаФормулы,3).Текст = ОблМакетаФормулаИтог.Параметры.РезультатЗначение;						
		Исключение
			Сообщить("Ошибка расчета формулы " + ВыборкаДетальныеЗаписиФормула.Формула)			
		КонецПопытки;
	КонецЦикла;
		
	ТД.ЗакончитьАвтогруппировкуСтрок();
	ВывестиОбластьОписание(ТД,Макет,ЗначениеЯчейки,"Итого по ячейке",СтрФормат);
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-19 (#2954)
КонецПроцедуры // ВывестиРасшифровкуФормулы()

// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-19 (#2954)
Процедура ОбойтиИерархиюФормулы(ТД,Макет,Результат,НастройкаРасшифровки, Уровень, СтрФормат, ТаблицаРезультатФормулы, ТаблицаФормулы)
	
	ИмяРесурса = НастройкаРасшифровки.ИмяРесурса;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ОблМакета = Макет.ПолучитьОбласть("Ячейка");
	
	Пока Выборка.Следующий() Цикл
		
		ЗначениеЯчейки = ПолучитьЗначениеЭД(ТаблицаРезультатФормулы,Выборка.Ссылка,ИмяРесурса);
		
		Если Выборка.ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
			
			СтруктураНастроек = бит_МеханизмПолученияДанных.КонструкторНастройкиРасшифровкиПроизвольногоОтчета();
			
			СтруктураНастроек.ИмяОбласти               = "";
			СтруктураНастроек.ЭлементДанных            = Выборка.Ссылка;
			СтруктураНастроек.ВидЭлементаДанных        = Выборка.ВидГруппы;
			СтруктураНастроек.ИсточникДанных           = Выборка.ИсточникДанных;
			СтруктураНастроек.ИмяРесурса               = ИмяРесурса;
			СтруктураНастроек.ВидЯчейки                = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение;
			СтруктураНастроек.Формула                  = "";
			СтруктураНастроек.ФорматЧисел              = СтрФормат;
			СтруктураНастроек.НастройкаПодключения     = Выборка.Ссылка.НастройкаПодключения;
			СтруктураНастроек.НастройкаПулаПодключений = НастройкаРасшифровки.НастройкаПулаПодключений;
			
			
			Расш = Новый Структура("ТипРасшифровки,ЗначениеРасшифровки","НоваяЯчейка",СтруктураНастроек);
			ОблМакета.Параметры.ЗначениеРасшифровки = Расш;
			
		КонецЕсли; 
		
		СтрОтступ = СформироватьОтступ(Уровень);		
		
		ОблМакета.Параметры.ЯчейкаОписание = СтрОтступ+Строка(Выборка.Ссылка) + " [" + Выборка.Код + "]";
		ОблМакета.Параметры.ЯчейкаЗначение = Формат(ЗначениеЯчейки,СтрФормат);
		ТД.Вывести(ОблМакета,Уровень);
		
		Если Уровень = 2 Тогда 
			НовСтр = ТаблицаФормулы.Добавить();
			НовСтр.ЭлементКод = "[" + Выборка.Код + "]";
			НовСтр.Сумма = ЗначениеЯчейки;
		КонецЕсли;
		
		ОбойтиИерархиюФормулы(ТД,Макет,Выборка,НастройкаРасшифровки,Уровень+1,СтрФормат,ТаблицаРезультатФормулы, ТаблицаФормулы);
		
	КонецЦикла; 
		
КонецПроцедуры
// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-19 (#2954)

// Процедура обходит иерархию элементов данных и выводит данные в расшифровку. Рекурсивный вызов.
// 
// Параметры:
//  ТД    - ТабличныйДокумент.
//  Макет - ТабличныйДокумент.
//  ВыборкаВерх - ВыборкаИзРезультатаЗапроса.
//  ИмяРесурса  - Строка.
//  Уровень     - Число.
//  СтрФормат   - Строка.
// 
Процедура ОбойтиИерерхиюЭлементовДанных(ТД,Макет,ВыборкаВерх,НастройкаРасшифровки,Уровень,СтрФормат)

	ИмяРесурса = НастройкаРасшифровки.ИмяРесурса;
	
	Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ОблМакета = Макет.ПолучитьОбласть("Ячейка");
	
	Пока Выборка.Следующий() Цикл
		
		ЗначениеЯчейки = ПолучитьЗначениеЭД(ТаблицаРезультат,Выборка.Ссылка,ИмяРесурса);
		
		Если Выборка.ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
			
			СтруктураНастроек = бит_МеханизмПолученияДанных.КонструкторНастройкиРасшифровкиПроизвольногоОтчета();
																												 
      		СтруктураНастроек.ИмяОбласти               = "";
			СтруктураНастроек.ЭлементДанных            = Выборка.Ссылка;
			СтруктураНастроек.ВидЭлементаДанных        = Выборка.ВидГруппы;
			СтруктураНастроек.ИсточникДанных           = Выборка.ИсточникДанных;
			СтруктураНастроек.ИмяРесурса               = ИмяРесурса;
			СтруктураНастроек.ВидЯчейки                = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение;
			СтруктураНастроек.Формула                  = "";
			СтруктураНастроек.ФорматЧисел              = СтрФормат;
			СтруктураНастроек.НастройкаПодключения     = Выборка.Ссылка.НастройкаПодключения;
			СтруктураНастроек.НастройкаПулаПодключений = НастройкаРасшифровки.НастройкаПулаПодключений;
																										 
			
			Расш = Новый Структура("ТипРасшифровки,ЗначениеРасшифровки","НоваяЯчейка",СтруктураНастроек);
			ОблМакета.Параметры.ЗначениеРасшифровки = Расш;
			
		КонецЕсли; 
		
	    СтрОтступ = СформироватьОтступ(Уровень);		
		
		//ОблМакета.Параметры.ЯчейкаОписание = СтрОтступ+Строка(Выборка.Ссылка);
		ОблМакета.Параметры.ЯчейкаОписание = СтрОтступ+Строка(Выборка.Ссылка) + " [" + Выборка.Код + "]";
		ОблМакета.Параметры.ЯчейкаЗначение = Формат(ЗначениеЯчейки,СтрФормат);
		ТД.Вывести(ОблМакета,Уровень);
		
		ОбойтиИерерхиюЭлементовДанных(ТД,Макет,Выборка,НастройкаРасшифровки,Уровень+1,СтрФормат);
		
	КонецЦикла; 


КонецПроцедуры // ОбойтиИерерхиюЭлементовДанных()

// Процедура выводит расшифровку по ячейке типа формула.
// 
// Параметры:
//  ТД    - ТабличныйДокумент
//  Макет - ТабличныйДокумент
//  СтрокаПравил   - Структура
//  ЗначениеЯчейки - Число
//  СтрФормат      - Строка
// 
Процедура ВывестиРасшифровкуФормулы(ТД,Макет,НастройкаРасшифровки,ЗначениеЯчейки,СтрФормат)
	
	ОблМакета = Макет.ПолучитьОбласть("Ячейка");
	ОблМакетаОперация = Макет.ПолучитьОбласть("Операция");
	
	СтрФормула = НастройкаРасшифровки.Формула;
	
	// В расшифровке формулы выводим значения всех аргументов, а затем выводим формулу.
	МассивАргументов      = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(СтрФормула,"]");
	ОбработанныеАргументы = Новый Соответствие;
	
	Для  й = 0 ПО МассивАргументов.Количество()-1 Цикл
		
		ТекЭлемент  = МассивАргументов[й];
		
		Если ПустаяСтрока(ТекЭлемент) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		ПозицияОткр = Найти(ТекЭлемент,"[");
		
		Если ПозицияОткр = 0 Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		ИмяАргумента      = СокрЛП(Сред(ТекЭлемент,ПозицияОткр+1));
		Если ОбработанныеАргументы[ИмяАргумента] = Неопределено Тогда
			
			ЗначениеАргумента = ПолучитьЗначениеАргумента(ИмяАргумента,ТаблицаАргументов);
			
			ТекСтрокаПравил   = Справочники.бит_ПоказателиПроизвольныхОтчетов.НайтиПоКоду(ИмяАргумента,,,НастройкаОтчета);
			Если НЕ ТекСтрокаПравил = Неопределено Тогда
				
				ТекНаименование = СформироватьЗаголовокЯчейки(ИмяАргумента,НастройкаРасшифровки,Ложь);
				
			Иначе	
				
				ТекНаименование = "";
				
			КонецЕсли; 
			
			НастройкаРасш = бит_МеханизмПолученияДанных.СформироватьНастройкуРасшифровкиПроизвольногоОтчета(ТекСтрокаПравил
			                                                                                                 ,НастройкаРасшифровки.НастройкаПулаПодключений);
			Расш = Новый Структура("ТипРасшифровки,ЗначениеРасшифровки","НоваяЯчейка",НастройкаРасш);
			
			ОблМакета.Параметры.ЯчейкаОписание 		 = ТекНаименование;
			ОблМакета.Параметры.ЯчейкаЗначение 		 = Формат(ЗначениеАргумента,СтрФормат);
			ОблМакета.Параметры.ЗначениеРасшифровки  = Расш;
			ТД.Вывести(ОблМакета);
			
			ОбработанныеАргументы.Вставить(ИмяАргумента,Истина);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ВывестиОбластьОписание(ТД,Макет,ЗначениеЯчейки,НастройкаРасшифровки.Формула,СтрФормат);
	
	
КонецПроцедуры // ВывестиРасшифровкуФормулы()

// Процедура выводит расшифровку по ячейке типа Значение, когда она ссылается на ЭлементДанных типа Выборка.
// 
// Параметры:
//  ТД    - ТабличныйДокумент.
//  Макет - ТабличныйДокумент.
//  НастройкаРасшифровки  - Структура.
//  ЗначениеЯчейки        - Число.
//  СтрФормат             - Строка.
// 
Процедура ВывестиРасшифровкуЗначения(ТД,Макет,НастройкаРасшифровки,ЗначениеЯчейки,СтрФормат,Итог)
	
	ЭлементДанных = НастройкаРасшифровки.ЭлементДанных;
	
	Если НЕ ТипЗнч(НастройкаРасшифровки.ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
		
		Возврат;
		
	КонецЕсли; 
	
    ИсточникДанных = НастройкаРасшифровки.ИсточникДанных;
		
	// Восстановим настройки построителя при необходимости.
	Если Измерения.Количество() = 0 ИЛИ мМножественнаяРасшифровка Тогда
		Если ЗначениеЗаполнено(ЭлементДанных) Тогда
			Измерения.Загрузить(ЭлементДанных.Измерения.Выгрузить());
		Иначе	
			Измерения.Загрузить(ИсточникДанных.Измерения.Выгрузить());
		КонецЕсли; 
	КонецЕсли; 
	
	ИмяРесурса = НастройкаРасшифровки.ИмяРесурса;
	
	Если ЗначениеЗаполнено(ИсточникДанных) Тогда
		
		ГраницаНач = ДатаНачала;
		ГраницаКон = Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая);
		
		Если ЗначениеЗаполнено(ЭлементДанных) Тогда
			НастройкиПостроителя = ЭлементДанных.НастройкиПостроителя.Получить();
		Иначе	
			НастройкиПостроителя = НастройкаРасшифровки.ИсточникДанных.НастройкиПостроителя.Получить();
		КонецЕсли; 
		
		МассивИзмерения = Новый Массив;
		Для каждого ИзмерениеРасшифровки Из Измерения Цикл
			
			ВремСтр = Новый Структура("ПутьКДанным",ИзмерениеРасшифровки.ПутьКДанным);
			МассивИзмерения.Добавить(ВремСтр);
		
		КонецЦикла; 
		
		Параметры = бит_МеханизмПолученияДанных.ЗаполнитьСтруктуруПараметровИзТаблицы(ТаблицаПараметры);
		бит_МеханизмПолученияДанных.ДобавитьОбязательныеПараметрыПроизвольногоОтчета(ЭтотОбъект,Параметры);		
		
		// Выполним подключения к внешним базам при необходимости.
		ВыполнитьПодключения(НастройкаРасшифровки);
		
		СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
		СтрПар.Параметры                  = Параметры;
		СтрПар.Настройка                  = НастройкиПостроителя;
		СтрПар.ОтборВОтчете               = ОтборВОтчете;
		СтрПар.ВозвращатьРезультатЗапроса = Истина;
		СтрПар.НастройкаПодключения       = НастройкаРасшифровки.НастройкаПодключения;
		СтрПар.НастройкаПулаПодключений   = НастройкаРасшифровки.НастройкаПулаПодключений;
		СтрПар.ПулПодключений             = ПулПодключений;
		Если МассивИзмерения.Количество()>0 Тогда
		
		 СтрПар.Измерения = МассивИзмерения;	
		
		КонецЕсли; 
		
		РезультатыЗапросов = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ИсточникДанных, ГраницаНач, ГраницаКон, СтрПар);
		
		
		Если ЗначениеЗаполнено(ЭлементДанных) Тогда
			
			// Определим имя ресурса в источнике
			ИмяРесурсаСпособа = ИмяРесурса;
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ИсточникДанных",ИсточникДанных);
			СтрОтбор.Вставить("ИмяКолонки"	  ,ИмяРесурсаСпособа);
			
			МассивСтрок = ЭлементДанных.Владелец.СоответствиеКолонок.НайтиСтроки(СтрОтбор);
			
			Если МассивСтрок.Количество()>0 Тогда
				
				ИмяКолонкиИсточника = МассивСтрок[0].ИмяКолонкиИсточника;
				
			КонецЕсли; 
			
			ИмяРесурсаИсточника = Справочники.бит_ИсточникиДанных.ОпределитьИмяРесурсаИсточника(ИсточникДанных,ИмяКолонкиИсточника);
			
		Иначе	
			
			ИмяРесурсаИсточника = Справочники.бит_ИсточникиДанных.ОпределитьИмяРесурсаИсточника(ИсточникДанных,ИмяРесурса);
			
		КонецЕсли; 																	
		
		// Выведем значения расшифровки
		Если НЕ ПустаяСтрока(ИмяРесурсаИсточника) Тогда
			
			ТД.НачатьАвтогруппировкуСтрок();
			ОблМакета = Макет.ПолучитьОбласть("Ячейка");
			ОблМакетаОписание = Макет.ПолучитьОбласть("Описание");
			
			ном = 1;
			КоличествоРезультатов = РезультатыЗапросов.Количество();
			Для каждого КиЗ Из РезультатыЗапросов Цикл
				
				ИтогПред = Итог;
				
				Если КоличествоРезультатов>1 Тогда
					
					// Выведем имя подключения
					ОблМакетаОписание.Параметры.РезультатОписание = КиЗ.Ключ;
					
					ИмяОбласти = "Подключение_"+ном;				
					
					ОблЯчеек = ОблМакетаОписание.Область("R1C5:R1C7");
					ОблЯчеек.Имя = ИмяОбласти;
					
					ТД.Вывести(ОблМакетаОписание,-1);
					
				КонецЕсли; 
				
				// Обходим иерархию расшифровки
				Если КиЗ.Ключ = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза Тогда
					
					ОбойтиИерархиюРасшифровки(ТД,ОблМакета,КиЗ.Значение,ИмяРесурсаИсточника,0,СтрФормат, Итог);	
					
				Иначе	
					
					Соединение = ПулПодключений[КиЗ.Ключ];
					КэшПоиска = Новый Соответствие;
					ВидИбИсточник        = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
					ВидИбПриемник        = КиЗ.Ключ.ВидИнформационнойБазы;
					ПравилаПоискаВнешТек = РегистрыСведений.бит_мпд_НазначениеПравилПоискаДанных.ПолучитьПравилаПоиска(ВидИбПриемник,ВидИбИсточник);
					
					
					ОбойтиИерархиюРасшифровкиВнешняяБаза(Соединение
															,КиЗ.Ключ
															,ТД
															,ОблМакета
															,КиЗ.Значение
															,ИмяРесурсаИсточника
															,0
															,СтрФормат
															,Итог
															,ПравилаПоискаВнешТек
															,КэшПоиска);
					
					
				КонецЕсли; 
				
				Если КоличествоРезультатов>1 Тогда
					
					// Выводим итог по подключению
					ОблПодключение = ТД.Область(ИмяОбласти);
					Если НЕ ОблПодключение = Неопределено Тогда
						
						ОблПодключение.Текст = Формат(Итог-ИтогПред,"ЧЦ=15; ЧДЦ=2");
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				ном = ном+1;
			КонецЦикла; // РезультатыЗапросов
			
			ТД.ЗакончитьАвтогруппировкуСтрок();
			
		КонецЕсли; // НЕ ПустаяСтрока(ИмяРесурсаИсточника) 
		
	КонецЕсли; 
		
КонецПроцедуры // ВывестиРасшифровкуЗначения()

// Процедура выполняет подключения к удаленным информационным базам.
// 
// Параметры:
//  НастройкаРасшифровки - Структура.
// 
Процедура ВыполнитьПодключения(НастройкаРасшифровки)
	
	// Выполним подключения к внешним базам при необходимости.
	Если ЗначениеЗаполнено(НастройкаРасшифровки.НастройкаПулаПодключений) Тогда
		
		// Пул подключений
		Для каждого СтрокаТаблицы Из НастройкаРасшифровки.НастройкаПулаПодключений.НастройкиПодключений Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НастройкаПодключения) Тогда
				
				Если ПулПодключений[СтрокаТаблицы.НастройкаПодключения] = Неопределено Тогда
					
					Соединение = бит_мпд_ПовтИсп.ПодключитьКОМ(СтрокаТаблицы.НастройкаПодключения);
					Если НЕ Соединение = Неопределено Тогда
						
						ПулПодключений.Вставить(СтрокаТаблицы.НастройкаПодключения, Соединение);
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; // НастройкаРасшифровки.НастройкаПулаПодключений.
		
	Иначе	
		
		// Одно подключение
		Если ЗначениеЗаполнено(НастройкаРасшифровки.НастройкаПодключения) Тогда
			
			Если ПулПодключений[НастройкаРасшифровки.НастройкаПодключения] = Неопределено Тогда
				
				Соединение = бит_мпд_ПовтИсп.ПодключитьКОМ(НастройкаРасшифровки.НастройкаПодключения);
				
				Если НЕ Соединение = Неопределено Тогда
					
					ПулПодключений.Вставить(НастройкаРасшифровки.НастройкаПодключения, Соединение);
					
				КонецЕсли; 
				
			КонецЕсли;  
			
		КонецЕсли; 
		
	КонецЕсли; // ЗначениеЗаполнено(НастройкаРасшифровки.НастройкаПулаПодключений).
	
	
КонецПроцедуры // ВыполнитьПодключения()

// Процедура обходит иерархию измерений, используемых для расшифровки и выводит данные. 
// Рекурсивный вызов.
// 
// Параметры:
//  ТД  - ТабличныйДокумент.
//  Обл - ТабличныйДокумент.
//  ВыборкаВерх - ВыборкаИзРезультатаЗапроса.
//  ИмяРесурса  - Строка.
//  Уровень     - Число.
//  СтрФормат   - Строка.
// 
Процедура ОбойтиИерархиюРасшифровки(ТД,Обл,ВыборкаВерх,ИмяРесурса,Уровень,СтрФормат,Итог)
	
	Если Уровень+1<=Измерения.Количество() Тогда
	
		 ИзмерениеРасшифровки = Измерения[Уровень];
		 ИмяИзмерения = ИзмерениеРасшифровки.ПутьКДанным;
		 ИмяИзмерения = СтрЗаменить(ИмяИзмерения,".","");
		 
	 Иначе
		 
		 Возврат;
		 
	КонецЕсли;
	
	СтрОтступ = СформироватьОтступ(Уровень);
	
	Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		Обл.Параметры.ЯчейкаОписание = СтрОтступ+Строка(Выборка[ИмяИзмерения]);
		Обл.Параметры.ЗначениеРасшифровки = Выборка[ИмяИзмерения];
		ЗначениеРесурса = ?(ТипЗнч(Выборка[ИмяРесурса])=Тип("Число"),Выборка[ИмяРесурса],0);
		// ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-01-31 (#2954)
		Если Не ЗначениеЗаполнено(ЗначениеРесурса) Тогда
			Продолжить;
		КонецЕсли;	
		// ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-01-31 (#2954)
		Обл.Параметры.ЯчейкаЗначение = Формат(ЗначениеРесурса,СтрФормат);
		Итог = Итог+ЗначениеРесурса;		
		ТД.Вывести(Обл,Уровень);
		ОбойтиИерархиюРасшифровки(ТД,Обл,Выборка,ИмяРесурса,Уровень+1,СтрФормат,0);
		
	КонецЦикла; 
	
КонецПроцедуры // ОбойтиИерархию()

// Процедура обходит иерархию измерений, используемых для расшифровки и выводит данные. 
// Рекурсивный вызов.
// 
// Параметры:
//  ТД  - ТабличныйДокумент.
//  Обл - ТабличныйДокумент.
//  ВыборкаВерх - ВыборкаИзРезультатаЗапроса.
//  ИмяРесурса  - Строка.
//  Уровень     - Число.
//  СтрФормат   - Строка.
//  Итог        - Число.
//  КэшПоиска   - Соответствие.
// 
Процедура ОбойтиИерархиюРасшифровкиВнешняяБаза(Соединение
	                                            , НастройкаПодключения
												, ТД
												, Обл
												, ВыборкаВерх
												, ИмяРесурса
												, Уровень
												, СтрФормат
												, Итог
												, ПравилаПоиска
												, КэшПоиска)
	
	Если Уровень+1<= Измерения.Количество() Тогда
	
		 ИзмерениеРасшифровки = Измерения[Уровень];
		 ИмяИзмерения = ИзмерениеРасшифровки.ПутьКДанным;
		 
	 Иначе
		 
		 Возврат;
		 
	КонецЕсли;
	
	СтрОтступ = СформироватьОтступ(Уровень);
	СписокВрем = Новый СписокЗначений;
	
	Выборка = ВыборкаВерх.Выбрать(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		КонвЗначениеИзмерения = бит_мпд_ВнешниеИсточникиСервер.ПреобразоватьЗначениеВнешняяТекущая(Соединение
		                                                                                            , НастройкаПодключения
																									, Выборка[ИмяИзмерения]
																									, СписокВрем
																									, ПравилаПоиска
																									, КэшПоиска);
		
		Если ТипЗнч(КонвЗначениеИзмерения) = Тип("ЭлементСпискаЗначений") 
			ИЛИ ТипЗнч(КонвЗначениеИзмерения) = Тип("Структура") Тогда
			Обл.Параметры.ЯчейкаОписание      = СтрОтступ+Строка(КонвЗначениеИзмерения.Представление);
		Иначе	
			Обл.Параметры.ЯчейкаОписание      = СтрОтступ+Строка(КонвЗначениеИзмерения);
		КонецЕсли; 
		
		Обл.Параметры.ЗначениеРасшифровки = КонвЗначениеИзмерения;
		
		КонвЗначение = бит_мпд_ВнешниеИсточникиСервер.ПреобразоватьЗначениеВнешняяТекущая(Соединение
		                                                                                   , НастройкаПодключения
																						   , Выборка[ИмяРесурса]
																						   , СписокВрем
																						   , ПравилаПоиска
																						   , КэшПоиска);
		
		Если НЕ ТипЗнч(КонвЗначение) = Тип("Число") Тогда
		
			КонвЗначение = 0;
		
		КонецЕсли; 
		
		Обл.Параметры.ЯчейкаЗначение = Формат(КонвЗначение,СтрФормат);
		Итог                         = Итог+КонвЗначение;
		ТД.Вывести(Обл,Уровень);
		ОбойтиИерархиюРасшифровкиВнешняяБаза(Соединение
		                                      , НастройкаПодключения
											  , ТД
											  , Обл
											  , Выборка
											  , ИмяРесурса
											  , Уровень+1
											  , СтрФормат
											  , 0
											  , ПравилаПоиска
											  , КэшПоиска);
		
	КонецЦикла; 
	
КонецПроцедуры // ОбойтиИерархиюРасшифровкиВнешняяБаза()

#КонецОбласти

#Область Инициализация

мМножественнаяРасшифровка = Ложь;

Если ПулПодключений = Неопределено Тогда

	ПулПодключений = Новый Соответствие;

КонецЕсли; 

#КонецОбласти

#КонецЕсли
