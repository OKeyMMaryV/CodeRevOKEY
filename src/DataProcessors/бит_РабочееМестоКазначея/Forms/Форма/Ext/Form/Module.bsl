
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
	КонецЕсли;	 
	
КонецПроцедуры

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;	
	
	ИзменитьДоступностьПриИзмененииНастроек(Ложь, ЭтотОбъект);
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	фКэшЗначений.Вставить("НастраиваемыйОбъект", Метаданные.Обработки.бит_РабочееМестоКазначея.ПолноеИмя());
	фКэшЗначений.Вставить("ТипНастройки"       , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	
	ИмяСкдДляМассиваСчетов = "СхемаКомпоновкиДанных";
	ИмяСкдАнализ 		   = "СхемаКомпоновкиДанныхАнализ";
		
	АдресСхемыКомпоновкиДанных = ИнициализироватьКомпоновщик(Объект.Компоновщик
	                                                           ,ИмяСкдДляМассиваСчетов
															   ,УникальныйИдентификатор);
															   
	АдресСхемыКомпоновкиДанныхАнализ = ИнициализироватьКомпоновщик(Объект.КомпоновщикАнализ
	                                                                ,ИмяСкдАнализ
																	,УникальныйИдентификатор);
	
	ЗаполнитьФормуПоУмолчанию();

	ТекущийДень = НачалоДня(ТекущаяДатаСеанса());
	
	// Применим настройку по-умолчанию, если таковая есть.
	ТекущаяНастройка = ПолучитьНастройкиПриСозданииНаСервере();	
	ПрименитьНастройки(ТекущаяНастройка);
	
	МаксУровеньДеревоСчета = 6;
	
	НастройкиПанелей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПользователя",
								"Настройки панелей РМК", НастройкиПанелейПоУмолчанию(ЭтотОбъект));
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,  НастройкиПанелей);	
	
	Элементы.ГруппаТекущийДокумент.Высота = Объект.ВысотаПанелиТекущийДокумент;
	УстановитьЗаголовокФормы(ЭтотОбъект);
	УстановитьВидимость();
	ВидимостьДанныхПоВыделеннымДокументам(ЭтотОбъект);
	УстановитьВидимостьДекорацияПерейтиКСфоримрованнымДокументам(ЭтотОбъект);
	
	// +СБ. Широков Николай. 2014-10-02. ТЗ "Казначейство" 2.2.3.2.
	СБ_РаботаСФормамиОбъекты.бит_РабочееМестоКазначеяФормаУправляемаяПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -СБ. Широков Николай
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
	
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПользователя",
			"Настройки панелей РМК", НастройкиПанелейПоУмолчанию(ЭтотОбъект));
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ГрупповаяОплатаЗаявокЗавершена" И Источник = ЭтотОбъект Тогда
	
		БылоДокументов = ДобавленоДокументов;
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			СкопироватьСписокЗначений(СписокДокументовСписания, Параметр.СписокДокументовСписания);
			ДобавленоДокументов = СписокДокументовСписания.Количество() + СписокРеестры.Количество();
		КонецЕсли; 
		Если БылоДокументов <> ДобавленоДокументов Тогда
			ОповеститьяОЗавершенииФормированияДокументов(); 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	ИзменитьДоступностьПриИзмененииНастроек(Истина, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	ИзменитьДоступностьПриИзмененииНастроек(Истина, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперативныйДеньПриИзменении(Элемент)
		
	ЭлементСписка = КолонкиПериодов.НайтиПоЗначению(Объект.ОперативныйДень);
	Если ЭлементСписка <> Неопределено Тогда
		УпралениеВидимостьюКолонкиПериода("ДеревоСчета" + ЭлементСписка.Представление, Истина, ЭтотОбъект);
	КонецЕсли; 
	УстановитьУсловниеОформлениеПериодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиКДокументамОплатыНажатие(Элемент)
	
	ПоказатьСформированныеДокументы(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревосчета
 
&НаКлиенте
Процедура ДеревоСчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	 ТекущаяСтрока = ДеревоСчета.НайтиПоИдентификатору(ВыбраннаяСтрока);
	 Если НЕ ТекущаяСтрока = Неопределено Тогда
		 
		Если ТекущаяСтрока.ИмяГруппировки = "Организация" Тогда
		
	 	    ПоказатьЗначение(,ТекущаяСтрока.Измерение);
			
		ИначеЕсли ТекущаяСтрока.ИмяГруппировки = "БанковскийСчет" Тогда
			
			ПоказатьЗначение(,ТекущаяСтрока.Измерение);
			
		ИначеЕсли ТекущаяСтрока.ИмяГруппировки = "ДокументПланирования" Тогда
			
			Если Поле.Имя = "ДеревоСчетаПлатежнаяПозиция" Тогда
				ПоказатьЗначение(,ТекущаяСтрока.ПлатежнаяПозиция);
			Иначе	
				ПоказатьЗначение(,ТекущаяСтрока.ДокументПланирования);
			КонецЕсли; 
		КонецЕсли;  
	 КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ДеревоСчетаВыполнятьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоСчета.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		Если ТекущаяСтрока.Выполнять  Тогда
			
			КодДействия = 1;
			
		Иначе	
			
			КодДействия = 0;
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПлатежнаяПозиция) Тогда
		
			ПересчитатьЗначенияВыделенныхДокументов(ТекущаяСтрока.Выполнять, ТекущаяСтрока.Сумма, ТекущаяСтрока.ПлатежнаяПозиция);
		
		КонецЕсли; 
		
		ИзменитьФлажки(ТекущаяСтрока,КодДействия);
	
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДеревоСчетаПриАктивизацииСтроки(Элемент)
	
	флВыполнить = Ложь;
	
	ТекущаяСтрока = Элементы.ДеревоСчета.ТекущиеДанные;
	
	// Необходимо вывести информацию в панель документа.
	Если ПанельТекущийДокументВидимость 
		 И НЕ ТекущаяСтрока = Неопределено 
		 И ТекущаяСтрока.ИмяГруппировки = "ДокументПланирования" Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПлатежнаяПозиция) Тогда
			ТекущийДокумент = ТекущаяСтрока.ПлатежнаяПозиция;
		Иначе	
			ТекущийДокумент = ТекущаяСтрока.ДокументПланирования;
		КонецЕсли; 
		
		флВыполнить = Истина;
		
	КонецЕсли; 
	
	// Необходимо вывести информацию в аналитическую панель.
	Если НЕ ТекущаяСтрока = Неопределено 
		 // И ТекущаяСтрока.ИмяГруппировки <> "Организация".
		 И ПанельАналитическаяВидимость Тогда
	     
		 ТекущиеПараметры = Новый Структура;
		 ТекущиеПараметры.Вставить("БанковскийСчет"       ,ТекущаяСтрока.БанковскийСчет);
		 ТекущиеПараметры.Вставить("ВалютаДенежныхСредств",ТекущаяСтрока.ВалютаДенежныхСредств);
		 ТекущиеПараметры.Вставить("ИмяГруппировки"		  ,ТекущаяСтрока.ИмяГруппировки);
		 
		 флВыполнить = Истина; 
		 
	КонецЕсли; 
	
	Если флВыполнить Тогда
		// Используем обработчик ожидания, т.к. вызовы сервера в данном обработчике приводят к зацикливанию.
		ОтключитьОбработчикОжидания("ОжиданиеАктивазацииСтроки");
		ПодключитьОбработчикОжидания("ОжиданиеАктивазацииСтроки",0.1,Истина);
	КонецЕсли; 
	
 КонецПроцедуры
  
&НаКлиенте
Процедура ОжиданиеАктивазацииСтроки()

 	ДействияПриАктивизацииСтроки();
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ТекДокументШапка,ТекДокументШапка.ПолучитьЭлементы());
	
КонецПроцедуры // ОжиданиеАктивазацииСтроки()

&НаКлиенте
Процедура ДеревоСчетаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.ДеревоСчета.ВыделенныеСтроки.Количество() > 1 Тогда
		Выполнение = Ложь;
	Иначе
		Выполнение = КомандаВСтрокеНеПоддерживается(Элементы.ДеревоСчета.ВыделенныеСтроки, Истина) = Ложь;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСчетаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Выполнение 		 	 = Ложь;
	
	ИсходнаяСтрока = ДеревоСчета.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	ТекущаяСтрока  = ДеревоСчета.НайтиПоИдентификатору(Строка);
	
	Если ТекущаяСтрока.ИмяГруппировки = "БанковскийСчет" И Поле.Имя = "ДеревоСчетаИзмерение" Тогда
		// Перетаскивание на другой счет возможно в рамках одной организации и валюты и пр.
		// При этом блокируем пустой счет и кассу.
		Если ТекущаяСтрока.Организация 			  = ИсходнаяСтрока.Организация 
			И ТекущаяСтрока.ВалютаДенежныхСредств = ИсходнаяСтрока.ВалютаДенежныхСредств
			И ТекущаяСтрока.ВидДенежныхСредств 	  = ИсходнаяСтрока.ВидДенежныхСредств 
			И ЗначениеЗаполнено(ТекущаяСтрока.БанковскийСчет)
			И ТипЗнч(ТекущаяСтрока.БанковскийСчет) <> Тип("Строка") Тогда
			
			Выполнение = Истина;
		КонецЕсли; 
	ИначеЕсли ТекущаяСтрока.ИмяГруппировки = "ДокументПланирования" Тогда
		// Перетаскивание по периодам поддерживаем только в рамках одной строки.
		Если Строка = ПараметрыПеретаскивания.Значение[0] Тогда
			
			// Определим принадлежность колонки.
			Если СтрНачинаетсяС(Поле.Имя, "ДеревоСчетаП_") Тогда
				Для каждого ЭлементСписка Из КолонкиПериодов Цикл
					Кандидат = "ДеревоСчета" + ЭлементСписка.Представление;
					Если Кандидат = Поле.Имя Тогда
						// Перенос выполняется в интервале: Опер. день - Конец периода.
						Если ЭлементСписка.Значение >= ТекущийДень И ЭлементСписка.Значение <= Объект.КонецПериода Тогда
							
							Выполнение = Истина;
							
						КонецЕсли; 
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ Выполнение Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСчетаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ИсходнаяСтрока = ДеревоСчета.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	ТекущаяСтрока  = ДеревоСчета.НайтиПоИдентификатору(Строка);
	
	НовыйСчет = Неопределено;
	НоваяДата = Неопределено;
	
	Если ТекущаяСтрока.ИмяГруппировки = "БанковскийСчет" И Поле.Имя = "ДеревоСчетаИзмерение" Тогда
		// Перетаскивание на другой счет.
		НовыйСчет = ТекущаяСтрока.БанковскийСчет;
		
	ИначеЕсли ТекущаяСтрока.ИмяГруппировки = "ДокументПланирования" Тогда
		Для каждого ЭлементСписка Из КолонкиПериодов Цикл
			Если Поле.Имя = "ДеревоСчета" + ЭлементСписка.Представление Тогда
				НоваяДата = ЭлементСписка.Значение;			
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;

	ПараметрыИзменения = ПараметрыИзмененияРеквизитовДокументов(НоваяДата, НовыйСчет, ПараметрыПеретаскивания.Значение);
	
	Если ПараметрыИзменения.Количество()>0 Тогда
		ВыполнитьГрупповоеИзменениеРеквизитов(ПараметрыИзменения);
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТекдокумент

// Процедура - обработчик события "Выбор" табличного поля "ТекДокумент".
// 
&НаКлиенте
Процедура ТекДокументШапкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТекДокументШапка.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеПараметра) Тогда
	
		 ПоказатьЗначение(,ТекущаяСтрока.ЗначениеПараметра);
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТекдокументтаблица

// Процедура - обработчик события "Выбор" табличного поля "ТекДокументТаблица".
// 
&НаКлиенте
Процедура ТекДокументТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТекДокументТаблица.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
	
		ИмяРеквизита = СтрЗаменить(Поле.Имя,"ТекДокументТаблица","");
		ТекЗначение = ТекущаяСтрока[ИмяРеквизита];
		ПоказатьЗначение(,ТекЗначение);
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолеТабТокументаИнформация



// Процедура - обработчик события "ОбработкаРасшифровки" 
// поля табличного документа "ПолеТабДокументаИнформация".
// 
&НаКлиенте
Процедура ПолеТабДокументаИнформацияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолеТабДокументаАнализ

// Процедура - обработчик события "ОбработкаРасшифровки" 
// поля табличного документа "ПолеТабДокументаАнализ".
// 
&НаКлиенте
Процедура ПолеТабДокументаАнализОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	Отказ = НЕ ПериодЗаполненПравильно(ЭтотОбъект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ОчиститьЗначенияВыделенныхДокументов();
	
	ОбновитьДеревоСчетов();
	
	УстановитьВидимостьДекорацияПерейтиКСфоримрованнымДокументам(ЭтотОбъект);
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСчета,ДеревоСчета,Объект.УровеньРаскрытияСчетов);
	ИзменитьДоступностьПриИзмененииНастроек(Ложь, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеДеревоСчетаУровень(Команда)
	
	КнопкиУровней = Элементы.ДеревоСчетаУровни.ПодчиненныеЭлементы;
	
	НомПодчерк = Найти(Команда.Имя,"_");
	Если НомПодчерк > 0 Тогда
	
		 НомУровняСтр = Сред(Команда.Имя,НомПодчерк+1);
		 Попытка
			 
			 НомУровня = Число(НомУровняСтр);
		 
		 Исключение
			 
			 НомУровня = -1;
			 
		 КонецПопытки; 
		 
		 Если НомУровня > 0 Тогда
		 
		   бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСчета,ДеревоСчета,НомУровня);
		   
		   инд = 1;
		   Для каждого Кнопка Из КнопкиУровней Цикл
		   
		   	   Кнопка.Пометка = Ложь;
			   
			   Если инд = НомУровня Тогда
			   
			   	  Кнопка.Пометка = Истина;
			   
			   КонецЕсли; 
			   
			   инд = инд+1;
		   КонецЦикла; 
		   
		 КонецЕсли; 
		 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийОбъект",Объект);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиОкончание",ЭтотОбъект);
	ОткрытьФорму("Обработка.бит_РабочееМестоКазначея.Форма.ФормаНастройки", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОткрытьНастройкиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") И РезультатВыбора.Команда = "ОК" Тогда
		
		ОбработкаИзмененияНастроек(РезультатВыбора);
		 
		 Если РезультатВыбора.ИзмененЦвет Тогда
			 
		   бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСчета,ДеревоСчета,Объект.УровеньРаскрытияСчетов);
		   
		 КонецЕсли; 
		 
		 ВидимостьДанныхПоВыделеннымДокументам(ЭтотОбъект);
		 
	 КонецЕсли; 
	
КонецПроцедуры // ОткрытьНастройкиОкончание()

&НаКлиенте
Процедура КомандаВидимостьПанелиНастроек(Команда)
	
	ПанельНастройкиВидимость = НЕ ПанельНастройкиВидимость;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВОперДень(Команда)
	
	Если Объект.ОперативныйДень < Объект.НачалоПериода ИЛИ Объект.ОперативныйДень > Объект.КонецПериода Тогда
		ВызватьИсключение Нстр("ru = 'Дата переноса за границами периода рабочего места казначея.'");
	КонецЕсли; 

	Если КомандаВКолонкеНеПоддерживается() Тогда
		Возврат;
	КонецЕсли; 
	
	Если КомандаВСтрокеНеПоддерживается(Элементы.ДеревоСчета.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыИзменения = ПараметрыИзмененияРеквизитовДокументов(Объект.ОперативныйДень,,Элементы.ДеревоСчета.ВыделенныеСтроки);
	
	Если ПараметрыИзменения.Количество()>0 Тогда
		 ВыполнитьГрупповоеИзменениеРеквизитов(ПараметрыИзменения);	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиНаДату(Команда)
	
	Если КомандаВКолонкеНеПоддерживается() Тогда
		Возврат;
	КонецЕсли; 

	Если КомандаВСтрокеНеПоддерживается(Элементы.ДеревоСчета.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяПоля 	  = СтрЗаменить(Элементы.ДеревоСчета.ТекущийЭлемент.Имя, "ДеревоСчета","");
	ТекущийПериод = '0001-01-01';
	Для каждого Элемент Из КолонкиПериодов Цикл
		Если ИмяПоля = Элемент.Представление Тогда
			ТекущийПериод = Элемент.Значение;
		КонецЕсли; 
	КонецЦикла;
	
	Если ТекущийПериод < Объект.ОперативныйДень Тогда	
		ДатаПереноса = Объект.ОперативныйДень;
	Иначе	
		ДатаПереноса = ТекущийПериод;
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("КомандаПеренестиНаДатуОкончание", ЭтотОбъект); 
	ТекстПодсказки = НСтр("ru = 'Введите новую дату платежа'"); 
	ПоказатьВводДаты(Оповещение, ДатаПереноса, ТекстПодсказки, ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте 
Процедура КомандаПеренестиНаДатуОкончание(ДатаПереноса, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДатаПереноса = Неопределено Тогда
		
		// Проверка на перетаскивание в прошлый период.
		Если ДатаПереноса < ТекущийДень Тогда
			ВызватьИсключение НСтр("ru='Перенос в период ранее текущего дня не поддерживается.'");
		КонецЕсли; // Проверка на перетаскивание в прошлый период.

		Если ДатаПереноса < Объект.НачалоПериода ИЛИ ДатаПереноса > Объект.КонецПериода Тогда
			ВызватьИсключение Нстр("ru = 'Дата переноса за границами периода рабочего места казначея.'");
		КонецЕсли; 
		
		// Коллекция колонок всегда в рамках периода. Иначе - это ошибка при программировании.
		КолонкаПериода = КолонкиПериодов.НайтиПоЗначению(ДатаПереноса);
		КолонкаПериода.Пометка = Истина;
		
		УпралениеВидимостьюКолонкиПериода("ДеревоСчета" + КолонкаПериода.Представление, КолонкаПериода.Пометка, ЭтотОбъект);
		
		ПараметрыИзменения = ПараметрыИзмененияРеквизитовДокументов(ДатаПереноса,,Элементы.ДеревоСчета.ВыделенныеСтроки);
		
		Если ПараметрыИзменения.Количество()>0 Тогда
			ВыполнитьГрупповоеИзменениеРеквизитов(ПараметрыИзменения);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиНаБанкСчет(Команда)
	
	Если КомандаВКолонкеНеПоддерживается() Тогда
		Возврат;
	КонецЕсли; 

	Оповещение 	   = Новый ОписаниеОповещения("КомандаПеренестиНаБанкСчетОкончание", ЭтотОбъект); 
	ТекстСообщения = ""; 
	Отказ 		   = Ложь;
	
	Отбор = ОтборСпискаДляПереносаНаСчет(ТекстСообщения, Отказ);
	Если Отказ Тогда
		ПоказатьПредупреждение(, ТекстСообщения,,Нстр("ru = 'Рабочее место казначея'"));
	Иначе
		Если КомандаВСтрокеНеПоддерживается(Элементы.ДеревоСчета.ВыделенныеСтроки) = Ложь Тогда
			ПараметрыПередачи = Новый Структура();
			ПараметрыПередачи.Вставить("Отбор",Отбор);
			ПараметрыПередачи.Вставить("ЗакрыватьПриВыборе", Истина);
			ПараметрыПередачи.Вставить("МножественныйВыбор", Ложь);
			ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыПередачи,,,,,Оповещение);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте 
Процедура КомандаПеренестиНаБанкСчетОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		ПараметрыИзменения = ПараметрыИзмененияРеквизитовДокументов(,
								РезультатВыбора, Элементы.ДеревоСчета.ВыделенныеСтроки);		
		Если ПараметрыИзменения.Количество()>0 Тогда
			ВыполнитьГрупповоеИзменениеРеквизитов(ПараметрыИзменения);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)
	 
	 КоллекцияОрганизации = ДеревоСчета.ПолучитьЭлементы();
	 
	 Для каждого ТекЭлемент Из КоллекцияОрганизации Цикл
		 
		 ТекЭлемент.Выполнять = Истина;
		 ИзменитьФлажки(ТекЭлемент,1);
		 
	 КонецЦикла; 
	 
 КонецПроцедуры

&НаКлиенте
Процедура КомандаОтметитьТекущие(Команда)
	
	ОчиститьЗначенияВыделенныхДокументов();
	ОтметитьТекущие();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	 
	 КоллекцияОрганизации = ДеревоСчета.ПолучитьЭлементы();
	 
	 Для каждого ТекЭлемент Из КоллекцияОрганизации Цикл
		 
		 ТекЭлемент.Выполнять = Ложь;
		 ИзменитьФлажки(ТекЭлемент,0);
		 
	 КонецЦикла; 
	 
 КонецПроцедуры

&НаКлиенте
Процедура КомандаИнвертироватьФлажки(Команда)
	 
	 КоллекцияОрганизации = ДеревоСчета.ПолучитьЭлементы();
	 
	 Для каждого ТекЭлемент Из КоллекцияОрганизации Цикл
		 
		 ТекЭлемент.Выполнять = НЕ ТекЭлемент.Выполнять;		 
		 ИзменитьФлажки(ТекЭлемент,2);
		 
	 КонецЦикла; 
	 
 КонецПроцедуры

&НаКлиенте
Процедура ПоКнопкеСоздатьПлатежныеДокументы(Команда)
	
	ТекстСообщения 	   = "";
	ДлительнаяОперация = ПараметрыСозданияДокументовОплаты(ТекстСообщения);
	
	Если ДлительнаяОперация = Неопределено Тогда
		ПоказатьПредупреждение(, ТекстСообщения,, Нстр("ru = 'Сформировать платежные документы.'"));
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = "Создание документов"; 
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПлатежныеДокументыЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли; 
	
КонецПроцедуры

// Обраборка оповещения процедуры "ПоКнопкеСоздатьПлатежныеДокументы".
//
// Параметры:
//  Результат				 - Структура - См. общий модуль ДлительныеОпрации.
//  ДополнительныеПараметры	 - Произвольный - произвольные данные, переданные в обработку оповещения. 
//
&НаКлиенте
Процедура СоздатьПлатежныеДокументыЗавершение(Результат, ДополнительныеПараметры) Экспорт 

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		// Ничего не делать или обработать ошибку.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при выполнении: " + Результат.КраткоеПредставлениеОшибки);
	Иначе	

		БылоДокументов = ДобавленоДокументов;
		РезультатСоздания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ТипЗнч(РезультатСоздания) = Тип("Структура") Тогда
			Если РезультатСоздания.Выполнено Тогда
				НовыеДокументы = РезультатСоздания.НовыеДокументы;
				СкопироватьСписокЗначений(СписокДокументовСписания, НовыеДокументы);
				ДобавленоДокументов = СписокДокументовСписания.Количество() + СписокРеестры.Количество();
			КонецЕсли; 
			//Если РезультатСоздания.Сообщения.Количество() <> 0 Тогда
			//	ТекстСообщения = Нстр("ru = 'При выполнении произошли ошибки: '");
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//	Для каждого Элемент Из РезультатСоздания.Сообщения Цикл
			//		Элемент.Сообщить();
			//	КонецЦикла; 
			//КонецЕсли; 
		КонецЕсли; 
		Если БылоДокументов <> ДобавленоДокументов Тогда
			ОповеститьяОЗавершенииФормированияДокументов();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры 

&НаКлиенте
Процедура ПоКнопкеСоздатьРеестрыПлатежей(Команда)
	
	СоздатьРеестрыПлатежей(Ложь);

КонецПроцедуры
 
&НаКлиенте
Процедура ПоКнопкеСоздатьСводныйРеестр(Команда)
	
	СоздатьРеестрыПлатежей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПанельТекущийДокумент(Команда)
	
	ПанельТекущийДокументВидимость                     = НЕ ПанельТекущийДокументВидимость;
	//Элементы.ФормаКомандаПанельТекущийДокумент.Пометка = ПанельТекущийДокументВидимость;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАналитическаяПанель(Команда)
	
	ПанельАналитическаяВидимость                     = НЕ ПанельАналитическаяВидимость;
	//Элементы.ФормаКомандаАналитическаяПанель.Пометка = ПанельАналитическаяВидимость;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазбитьПлатеж(Команда)
	
	Если КомандаВКолонкеНеПоддерживается() Тогда
		Возврат;
	КонецЕсли; 

	РазбитьИзменитьПлатеж("Разбить"); 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьПлатеж(Команда)
	
	Если КомандаВКолонкеНеПоддерживается() Тогда
		Возврат;
	КонецЕсли; 

	РазбитьИзменитьПлатеж("Изменить"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоКнопкеГрупповаяОплата(Команда)
	
	ОткрытьФорму("Обработка.бит_ГрупповаяОплатаЗаявок.Форма", ПараметрыГрупповойОплатыЗаявок(), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыГрупповойОплатыЗаявок()

	ДеревоДокументов = РеквизитФормыВЗначение("ДеревоСчета");
	ДоступныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Новый Структура("ДоступностьФлажка, Выполнять", Истина, Истина), Истина);
	
	ПлатежныеПозиции = Новый Массив(); 
	Для каждого СтрокаТаблицы Из ДоступныеСтроки Цикл
		ПлатежныеПозиции.Добавить(Новый Структура("ПлатежнаяПозиция", СтрокаТаблицы.ПлатежнаяПозиция));
	КонецЦикла; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПозиций",                Новый ФиксированныйМассив(ПлатежныеПозиции));
	ПараметрыФормы.Вставить("РежимЗаписи",                	   Объект.РежимЗаписи);
	ПараметрыФормы.Вставить("РежимСообщений",                  Объект.РежимСообщений);
	ПараметрыФормы.Вставить("НеФормироватьПлатежныеПоручения", Объект.НеФормироватьПлатежныеПоручения);
	ПараметрыФормы.Вставить("НеФормироватьДокументыОплаты",    Объект.НеФормироватьДокументыОплаты);
	ПараметрыФормы.Вставить("ПроводитьПлатежныеПоручения",     Объект.ПроводитьПлатежныеПоручения);
	ПараметрыФормы.Вставить("ПроводитьДокументыОплаты",        Объект.ПроводитьДокументыОплаты);

	Возврат ПараметрыФормы;
	
КонецФункции
 
&НаКлиенте
Процедура КомандаСоздатьПрогнозПлатежа(Команда)
	
	СоздатьПоказатьНовыйДокумент("бит_ЗаявкаНаРасходованиеСредствОбщая");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьЗаявкуНаРасходованиеДС(Команда)
	
	СоздатьПоказатьНовыйДокумент("бит_ЗаявкаНаРасходованиеСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьПланируемоеПоступлениеДС(Команда)
	
	СоздатьПоказатьНовыйДокумент("бит_ПланируемоеПоступлениеДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереводМеждуСчетами(Команда)

	Если КомандаВКолонкеНеПоддерживается() Тогда
		Возврат;
	КонецЕсли; 

	ТекущаяСтрока = Элементы.ДеревоСчета.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ПараметрыФормы     = Новый Структура;
		ПараметрыФормы.Вставить("БанковскийСчетОрганизация", ТекущаяСтрока.БанковскийСчет);
		ПараметрыФормы.Вставить("Организация", ТекущаяСтрока.Организация);
		
		Оповещение = Новый ОписаниеОповещения("КомандаПереводМеждуСчетамиОкончание", ЭтотОбъект); 
		ОткрытьФорму("Обработка.бит_РабочееМестоКазначея.Форма.ФормаПереводаМеждуСчетамиИОрганизациями", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура КомандаПереводМеждуСчетамиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ОчиститьЗначенияВыделенныхДокументов();
	
	ОбновитьДеревоСчетов();
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСчета,ДеревоСчета,Объект.УровеньРаскрытияСчетов);
	
КонецПроцедуры // КомандаПереводМеждуСчетамиОкончание()

&НаКлиенте
Процедура АктуализироватьПоКурсамВыделенные(Команда)
	
	МассивАктуализации = Новый Массив;

	КоллекцияОрганизации = ДеревоСчета.ПолучитьЭлементы();
	
	Для каждого ТекЭлемент Из КоллекцияОрганизации Цикл
		
		СформироватьМассивДляАктуализации(ТекЭлемент,МассивАктуализации, Ложь);
		
	КонецЦикла; 
	 
	Если МассивАктуализации.Количество()>0 Тогда
	
		ВыполнитьАктуализацию(МассивАктуализации);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьПоКурсамВсе(Команда)
	
	МассивАктуализации = Новый Массив;

	КоллекцияОрганизации = ДеревоСчета.ПолучитьЭлементы();
	
	Для каждого ТекЭлемент Из КоллекцияОрганизации Цикл
		
		СформироватьМассивДляАктуализации(ТекЭлемент,МассивАктуализации, Истина);
		
	КонецЦикла; 
	 
	Если МассивАктуализации.Количество()>0 Тогда
	
		ВыполнитьАктуализацию(МассивАктуализации);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Описание оповещения процедуры "ВыбратьПериод".
//
// Параметры:
//  РезультатВыбора	 - 	 - 
//  ДопПараметры	 - Произвольный - дополнительные параметры.
//
&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	УстановитьЗаголовокФормы(ЭтотОбъект); 
	ИзменитьДоступностьПриИзмененииНастроек(Истина, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСНастройками

// Процедура - действие команды "КомандаСохранитьНастройки".
// 
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки" , СохраняемыеНастройки());
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
	
		ПараметрыФормы.Вставить("СохраненнаяНастройка",ТекущаяНастройка);
	
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиЗавершение",ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы сохранения настроек. 
// 
&НаКлиенте
Процедура СохранитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекущаяНастройка = Результат;
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

// Процедура - действие команды "КомандаВосстановитьНастройки".
// 
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНастройкиЗавершение",ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ВосстановитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		ТекущаяНастройка = Результат;
		ПрименитьНастройки(Результат);
	КонецЕсли;	
		
	УстановитьЗаголовокФормы(ЭтотОбъект);

КонецПроцедуры

// Функция готовит стуктуру с настройками для сохранения.
// 
// Возвращаемое значение:
//   СтруктураНастройки   - Структура.
// 
&НаСервере
Функция СохраняемыеНастройки()

	МетаОбъект       = Метаданные.Обработки.бит_РабочееМестоКазначея;
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Компоновщик");
	МассивИсключений.Добавить("КомпоновщикАнализ");	
	МассивИсключений.Добавить("ОперативныйДень");
	
	СохраняемыеНастройки = Справочники.бит_СохраненныеНастройки.УпаковатьРеквизиты(Объект,МетаОбъект,МассивИсключений);
	
	СохраняемыеНастройки.Вставить("НастройкиКомпоновщика"      ,Объект.Компоновщик.ПользовательскиеНастройки);
	СохраняемыеНастройки.Вставить("НастройкиКомпоновщикаАнализ",Объект.КомпоновщикАнализ.ПользовательскиеНастройки);
	
	МассивСчетов = Новый Массив;
	
	// Таб. часть. Счета
	Для каждого СтрокаТаблицы Из Объект.Счета Цикл
	
		Стр = Новый Структура;
		Стр.Вставить("ВидСчета",СтрокаТаблицы.ВидСчета);
		Стр.Вставить("Счет"    ,СтрокаТаблицы.Счет);
		
		МассивСчетов.Добавить(Стр);
		
	КонецЦикла; 

	СохраняемыеНастройки.Вставить("Счета",МассивСчетов);
	
	Возврат СохраняемыеНастройки;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненные настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			МетаОбъект       = Метаданные.Обработки.бит_РабочееМестоКазначея;
			МассивИсключений = Новый Массив;
			МассивИсключений.Добавить("Компоновщик");
			МассивИсключений.Добавить("КомпоновщикАнализ");			
			МассивИсключений.Добавить("ОперативныйДень");
			МассивИсключений.Добавить("НачалоПериода");
			МассивИсключений.Добавить("КонецПериода");
			
			Справочники.бит_СохраненныеНастройки.РаспаковатьРеквизиты(Объект, МетаОбъект, СтруктураНастроек,МассивИсключений);
			
			Если СтруктураНастроек.Свойство("НастройкиКомпоновщика") Тогда
				Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			КонецЕсли; 
			
			Если СтруктураНастроек.Свойство("НастройкиКомпоновщикаАнализ") Тогда
				Объект.КомпоновщикАнализ.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.НастройкиКомпоновщикаАнализ);
			КонецЕсли; 
			
			Если СтруктураНастроек.Свойство("Счета") Тогда
				
				Объект.Счета.Очистить();
				Для каждого Элемент Из СтруктураНастроек.Счета Цикл
				
					НоваяСтрока = Объект.Счета.Добавить();
					НоваяСтрока.ВидСчета = Элемент.ВидСчета;
					НоваяСтрока.Счет     = Элемент.Счет;
				
				КонецЦикла; 
			КонецЕсли;  // Сохранены счета
		КонецЕсли; // Сохранена структура	 
	КонецЕсли; // Настройка заполнена
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура устанавливает настройку либо из последних использованных, либо из настройки по умолчанию.
// 
&НаСервере
Функция ПолучитьНастройкиПриСозданииНаСервере()
	
	// Получим настройку по - умолчанию и последнюю использованну.
	СтруктураПараметров = Новый Структура;
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбъектСистемы", Метаданные.Обработки.бит_РабочееМестоКазначея);
	СтруктураПараметров.Вставить("КлючЗначения" , "ПоследниеЗначения");
	
	ПоследниеЗначения = РегистрыСведений.бит_СохраненныеЗначения.ПолучитьЗнч(фКэшЗначений.ТекущийПользователь, СтруктураПараметров);
	
	Если ТипЗнч(ПоследниеЗначения) = Тип("Структура") И ПоследниеЗначения.Свойство("Настройка") Тогда		
		Настройка_Последняя = ПоследниеЗначения.Настройка; 		
	КонецЕсли; 

	// Установим настройку
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда
	    ТекущаяНастройка = НастройкаПоУмолчанию;
	Иначе	
	    ТекущаяНастройка = Настройка_Последняя;
	КонецЕсли; 
	
	Возврат ТекущаяНастройка;
	
КонецФункции
                  
#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Функция формирует имя колонки.
// 
// Параметры:
//  Префикс  - Строка
//  ТекущийПериод  - Дата
// 
// Возвращаемое значение:
//   Строка   
// 
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьИмяКолонкиПериод(Префикс,ТекущийПериод)

	 Возврат Префикс+"_"+Формат(ТекущийПериод,"ДФ=yyyyMMdd");

КонецФункции // БитСформироватьИмяКолонкиПериод()

// Функция восстанавливает период по имени колонки.
// 
// Параметры:
//  ИмяКолонки  - Строка
// 
// Возвращаемое значение:
//   РезПериод   - Дата
// 
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПериодПоИмениКолонки(ИмяКолонки) Экспорт

	РезПериод = Дата('00010101');
	
	НомерПодчеркивания = Найти(ИмяКолонки,"_");
	Если НомерПодчеркивания >0 Тогда
	
		ПериодСтр = Сред(ИмяКолонки,НомерПодчеркивания+1);
		Попытка
			
			РезПериод = Дата(ПериодСтр);
			
		Исключение
			
		КонецПопытки;
	
	КонецЕсли; 

	Возврат РезПериод;
	
КонецФункции // ПолучитьПериодПоИмениКолонки()
 
&НаКлиенте
Функция КомандаВСтрокеНеПоддерживается(ВыбраныеСтроки, Перетаскивание = Ложь)

	НеПоддерживается = Ложь;
	Шаблон = Нстр("ru = '%1Для текущих данных операция не поддерживается.'");
	Для каждого ВыбраннаяСтрока Из ВыбраныеСтроки Цикл
		
		ТекущаяСтрока = ДеревоСчета.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			Если ТекущаяСтрока.ИмяГруппировки = "ДокументПланирования" Тогда 
				Если ТипЗнч(ТекущаяСтрока.ДокументПланирования) = Тип("ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств") Тогда
					ТекстСообщения = СтрШаблон(Шаблон, "");
					НеПоддерживается = Истина;
					ПоказатьПредупреждение(,ТекстСообщения,,НСтр("ru = 'Рабочее место казначея'"));
				ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ПлатежнаяПозиция) Тогда
					
					ПричинаОтказа = ""; 
					Если ТекущаяСтрока.Оплачено Тогда
						ПричинаОтказа = Нстр("ru = 'Документ оплачен. '");
						НеПоддерживается = Истина;
					ИначеЕсли ТекущаяСтрока.ЕстьПлатежныйДокумент ИЛИ ТекущаяСтрока.ЕстьПлатежноеПоручение Тогда
						ПричинаОтказа = Нстр("ru = 'На основании документа введен платежный документ или платежное поручение. '");
						НеПоддерживается = Истина;
					КонецЕсли; 
					
					Если НеПоддерживается Тогда
						ТекстСообщения = СтрШаблон(Шаблон, ПричинаОтказа); 
						ПоказатьПредупреждение(,ТекстСообщения,,НСтр("ru = 'Рабочее место казначея'"));
					КонецЕсли; 
					
				ИначеЕсли ТекущаяСтрока.ЭтоПрогноз Тогда
					
					// Если в "прогнозе" пользователь хочет изменить "Отклонение", не будем ему мешать.
					ИмяПоля = СтрЗаменить(Элементы.ДеревоСчета.ТекущийЭлемент.Имя, "ДеревоСчета", "");
					Если НЕ ТекущаяСтрока[ИмяПоля] = ТекущаяСтрока.Отклонение Тогда
						ЕстьПодчиненныеДокументы = бит_ОбщегоНазначения.ЕстьПодчиненныеДокументы(ТекущаяСтрока.ДокументПланирования, "бит_ЗаявкаНаРасходованиеСредств");
						Если ЕстьПодчиненныеДокументы Тогда
							НеПоддерживается 	   = Истина;
							ПричинаОтказа  = Нстр("ru = 'Есть подчиненные документы. '");
							ТекстСообщения = СтрШаблон(Шаблон, ПричинаОтказа);
							ПоказатьПредупреждение(,ТекстСообщения,,НСтр("ru = 'Рабочее место казначея'"));
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
			Иначе
				ТекстСообщения = СтрШаблон(Шаблон, "");
				НеПоддерживается = Истина;
				ПоказатьПредупреждение(,ТекстСообщения,,НСтр("ru = 'Рабочее место казначея'"));
			КонецЕсли; 
		Иначе
			НеПоддерживается = Истина;
		КонецЕсли; 
	КонецЦикла; 

	Возврат НеПоддерживается;
	
КонецФункции

&НаКлиенте
Функция КомандаВКолонкеНеПоддерживается()

	НеПоддерживается = (Элементы.ДеревоСчета.ТекущийЭлемент.Имя = "ДеревоСчетаСуммаФакт");
	Если НеПоддерживается Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для колонки ""Факт"" не поддерживается.'"),,Нстр("ru = 'Рабочее место казначея'"));
	КонецЕсли; 
	
	Возврат НеПоддерживается;
	
КонецФункции
  
&НаКлиенте
Функция РазрешенаОперацияСДаннымиДокумента(ПараметрыИзменения, ИмяРеквизита, ИзмененПериод)

	РазрешенаОперация = Истина;
	
	Если ПараметрыИзменения.ПричинаИзменения.БанковскийСчет Тогда
		// Проверки на этапе выбора счета.
		РазрешенаОперация = Истина;
	КонецЕсли;
	
	Если ПараметрыИзменения.ПричинаИзменения.Период Тогда
		
		СтрокаТекущая = ДеревоСчета.НайтиПоИдентификатору(ПараметрыИзменения.ТекущаяСтрока);
		//Если ЗначениеЗаполнено(СтрокаТекущая.ИмяДатаПлатежаКрайняя) И ИмяРеквизита > СтрокаТекущая.ИмяДатаПлатежаКрайняя Тогда
		Если ЗначениеЗаполнено(СтрокаТекущая.ИмяДатаПлатежаКрайняя) И ПараметрыИзменения.ПолеОбъектаНовыйПериод > СтрокаТекущая.ИмяДатаПлатежаКрайняя Тогда
			// Проверка на перетаскивание за рамки крайней даты платежа.
			Предупреждать = ПолучитьНастройкуКонтроляДатыПлатежаКрайней(СтрокаТекущая.Организация);
			
			Если Предупреждать Тогда
				Если СинхронизацияДатыПлатежа Тогда
					ТекстСообщения = НСтр("ru='В документе %1 превышена крайняя дата платежа %2! Данные синхронизированы.'");
				Иначе	
					ТекстСообщения = НСтр("ru='В документе %1 превышена крайняя дата платежа %2!'");
				КонецЕсли; 
				ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТекущая.ДокументПланирования,Формат(СтрокаТекущая.ДатаПлатежаКрайняя,"ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Иначе	
				РазрешенаОперация = Ложь;
				
				ТекстСообщения = НСтр("ru='В документе %1% превышена крайняя дата платежа %2%! Действие отменено.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТекущая.ДокументПланирования,Формат(СтрокаТекущая.ДатаПлатежаКрайняя,"ДФ=dd.MM.yyyy"));
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат РазрешенаОперация;
	
КонецФункции

// Конструктор параметров для принятия изммения документов из контекстного меню деоева.
// 
// Возвращаемое значение:
//   ПараметрыИзменения   - Структура
// 
&НаКлиенте
Функция НовыеПараметрыИзмененияРеквизитовДокументов(ТекущаяСтрока, ИзмененаДата, ИзмененБанковскийСчет)
	
	ПричинаИзменения = Новый Структура;
	ПричинаИзменения.Вставить("Период", 	   ИзмененаДата);
	ПричинаИзменения.Вставить("БанковскийСчет",ИзмененБанковскийСчет);
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("ПричинаИзменения",ПричинаИзменения);
	ПараметрыИзменения.Вставить("Значение", Неопределено); // Новое значение для подстановк в документ.
	ПараметрыИзменения.Вставить("ПолеОбъектаНовыйПериод", "");  	
	ПараметрыИзменения.Вставить("ПолеОбъектаСтарыйПериод", "");// Имя реквизита дерева - колонка периода, где есть сумма.
	ПараметрыИзменения.Вставить("ТекущаяСтрока", -1); // Ид-р текущей строки.
	ПараметрыИзменения.Вставить("НоваяСтрока",   -1); // Ид-р принимающей строки (для периода).
	
	// Поиск строк документа при нескольких выделенных.
	ПараметрыИзменения.Вставить("ДокументПланирования",  Неопределено);  
	ПараметрыИзменения.Вставить("ИмяПоляДокумент", "");
	ПараметрыИзменения.Вставить("ИскатьСтроки", Ложь);
	
	Возврат ПараметрыИзменения;
	
КонецФункции

// Функция готовит массив структур параметров для групповой обработки команд 
// перемещения на дату или на БанковскийСчет.
// 
// Параметры:
//  НоваяДата  - Дата
//  ИдНовыйСчет - Число
// 
// Возвращаемое значение:
//   МассивПереноса   - Массив
// 
&НаКлиенте
Функция ПараметрыИзмененияРеквизитовДокументов(НоваяДата = Неопределено, НовыйСчет = Неопределено, ВыделенныеСтроки)
	
	ИзмененаДата          = ?(ЗначениеЗаполнено(НоваяДата), Истина, Ложь);
	ИзмененБанковскийСчет = ?(ЗначениеЗаполнено(НовыйСчет), Истина, Ложь);	
	ПараметрыИзменения 	  = Новый Массив;	
	
	Если НЕ ИзмененаДата И НЕ ИзмененБанковскийСчет Тогда
		Возврат ПараметрыИзменения;	
	КонецЕсли; 
	
	//ВыделенныеСтроки = Элементы.ДеревоСчета.ВыделенныеСтроки;	
	Для каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = ДеревоСчета.НайтиПоИдентификатору(ИдСтроки);		 
		
		ПерейтиКСледующему = Ложь;
		ТекущаяДатаРМК 	= '0001-01-01';
		
		Для каждого Элемент Из КолонкиПериодов Цикл
			// Наличе суммы означает, что перенос состоится с этой даты.
			ТекущееЗначение = ТекущаяСтрока[Элемент.Представление];
			Если ЗначениеЗаполнено(ТекущееЗначение) Тогда					
				ТекущаяДатаРМК = Элемент.Значение;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ИзмененаДата Тогда				  
			// Новая дата совпадает с датой колонки, в которой записанна сумма документа. Изменения не нужны.
			Если ТекущаяДатаРМК = НоваяДата Тогда				 
				ПерейтиКСледующему = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		Если ИзмененБанковскийСчет Тогда
			Если ТекущаяСтрока.БанковскийСчет = НовыйСчет Тогда
				// Счет не изменился. Изменения не нужны.
				ПерейтиКСледующему = Истина;				 
			КонецЕсли; 
		КонецЕсли; 
		
		Если ПерейтиКСледующему Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеПараметры = НовыеПараметрыИзмененияРеквизитовДокументов(ТекущаяСтрока, ИзмененаДата, ИзмененБанковскийСчет);
		НовыеПараметры.ТекущаяСтрока     = ИдСтроки;
		НовыеПараметры.ПолеОбъектаСтарыйПериод = КолонкиПериодов.НайтиПоЗначению(ТекущаяДатаРМК).Представление;
		
		// Когда выделяется несколько строк для замены б/счета, тогда "слетает" идентивфикатор строки
		// при операциях вставки/удаления.
		// Запомним документ для поиска строк.
		Если ТекущаяСтрока.ЭтоПрогноз Тогда
			НовыеПараметры.ИмяПоляДокумент 		= "ДокументПланирования";
			НовыеПараметры.ДокументПланирования = ТекущаяСтрока.ДокументПланирования;
		Иначе	
			НовыеПараметры.ИмяПоляДокумент 		= "ПлатежнаяПозиция";
			НовыеПараметры.ДокументПланирования = ТекущаяСтрока.ПлатежнаяПозиция;
		КонецЕсли; 
		НовыеПараметры.ИскатьСтроки = ИзмененБанковскийСчет И ВыделенныеСтроки.Количество() > 1;
		
		Если ИзмененаДата Тогда
			НовыеПараметры.ПолеОбъектаНовыйПериод  = КолонкиПериодов.НайтиПоЗначению(НоваяДата).Представление;
			НовыеПараметры.Значение    = НоваяДата;
			НовыеПараметры.НоваяСтрока = ИдСтроки;
		КонецЕсли;			 
		
		Если ИзмененБанковскийСчет Тогда
			НовыеПараметры.ПолеОбъектаНовыйПериод = НовыеПараметры.ПолеОбъектаСтарыйПериод;
			НовыеПараметры.Значение = НовыйСчет;
			
			ОтборСтрок = НовыйОтборСтрокДереваСчетов("БанковскийСчет", "БанковскийСчет", НовыйСчет);
			Идентификатор = -1;
			НайтиСтрокуДереваСчетов(ЭтотОбъект, ДеревоСчета.ПолучитьЭлементы(), ОтборСтрок, Идентификатор);
			НовыеПараметры.НоваяСтрока = Идентификатор;
		КонецЕсли; 
		
		РазрешенаОперация = РазрешенаОперацияСДаннымиДокумента(НовыеПараметры,НовыеПараметры.ПолеОбъектаСтарыйПериод,ИзмененаДата);				 
		Если РазрешенаОперация Тогда					 
			ПараметрыИзменения.Добавить(НовыеПараметры);					 
		КонецЕсли; 				 
	КонецЦикла; 

	Возврат ПараметрыИзменения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НайтиСтрокуДереваСчетов(Форма, Коллекция, Отбор, Идентификатор)

	Для каждого Элемент Из Коллекция Цикл
		Если Элемент.ИмяГруппировки = Отбор.ИмяГруппировки И Элемент[Отбор.Поле] = Отбор.Значение Тогда
			Идентификатор = Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		Если Идентификатор = -1 Тогда	
			СубКоллекция = Элемент.ПолучитьЭлементы();
			Если СубКоллекция.Количество() <> 0 Тогда
				НайтиСтрокуДереваСчетов(Форма, СубКоллекция, Отбор, Идентификатор);				
			КонецЕсли; 			
		КонецЕсли; 				
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйОтборСтрокДереваСчетов(ИмяГруппировки, Поле, Значение)

	Отбор = Новый Структура; 
	Отбор.Вставить("ИмяГруппировки", ИмяГруппировки);
	Отбор.Вставить("Поле", Поле);
	Отбор.Вставить("Значение", Значение);
	
	Возврат Отбор;
	
КонецФункции
 
// Процедура изменяет флажки в ДеревеСчета.
// 
// Параметры:
//  ЭлементВерх  - ДанныеФормыЭлементДерева.
//  КодДействия  - Число: 0-Снять,1 - Установить, 2-Инвертировать.
// 
&НаКлиенте
Процедура ИзменитьФлажки(ЭлементВерх,КодДействия)
	
	Коллекция = ЭлементВерх.ПолучитьЭлементы();
	
	Для каждого ТекЭлемент Из Коллекция Цикл
		
		Если ТекЭлемент.ДоступностьФлажка Тогда
			
			Если КодДействия = 0 Тогда
				
				ТекЭлемент.Выполнять = Ложь;
				
			ИначеЕсли КодДействия = 1 Тогда
				
				ТекЭлемент.Выполнять = Истина;
				
			ИначеЕсли КодДействия = 2 Тогда	
				
				ТекЭлемент.Выполнять = Не ТекЭлемент.Выполнять;
				
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ТекЭлемент.ПлатежнаяПозиция) Тогда
				
				ПересчитатьЗначенияВыделенныхДокументов(ТекЭлемент.Выполнять, ТекЭлемент.Сумма, ТекЭлемент.ПлатежнаяПозиция);
			
			КонецЕсли; 
			
		КонецЕсли;  
		
		ИзменитьФлажки(ТекЭлемент,КодДействия);
		
	КонецЦикла; 
	
КонецПроцедуры // ИзменитьФлажки()

// Процедура пересчитывает значения подвала. 
//
// Параметры:
//  фВыполнять - булево.
//  Сумма - число.
//  ПлатПозиция - ДокументСсылка.бит_ПлатежнаяПозиция.
//
&НаКлиенте
Процедура ПересчитатьЗначенияВыделенныхДокументов(фВыполнять, Сумма, ПлатПозиция)

	НайденноеЗнач = ВыделенныеДокументыСписокПозиций.НайтиПоЗначению(ПлатПозиция);
	Если фВыполнять
		И НайденноеЗнач <> Неопределено Тогда
	
		Возврат;
		
	ИначеЕсли НЕ фВыполнять
		И НайденноеЗнач = Неопределено Тогда	
		
		Возврат;
		
	КонецЕсли; 
	
	Если фВыполнять Тогда
	
		ВыделенныеДокументыСписок.Добавить(Сумма);
		
	Иначе	
		
		элСписка = ВыделенныеДокументыСписок.НайтиПоЗначению(Сумма);
		ВыделенныеДокументыСписок.Удалить(элСписка);
		
	КонецЕсли; 
	
	Если фВыполнять Тогда
	
		ВыделенныеДокументыКоличество = ВыделенныеДокументыКоличество + 1;
		ВыделенныеДокументыСумма = ВыделенныеДокументыСумма + Сумма;
		
	Иначе	

		ВыделенныеДокументыКоличество = ВыделенныеДокументыКоличество - 1;
		ВыделенныеДокументыСумма = ВыделенныеДокументыСумма - Сумма;
		
	КонецЕсли; 

	Если ВыделенныеДокументыСписок.Количество()>0 Тогда
	
		ВыделенныеДокументыСписок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		ВыделенныеДокументыМаксимум = Число(Строка(ВыделенныеДокументыСписок[0]));
		
		ВыделенныеДокументыСписок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		ВыделенныеДокументыМинимум = Число(Строка(ВыделенныеДокументыСписок[0]));
		
	Иначе	
		ВыделенныеДокументыМаксимум = 0;
		ВыделенныеДокументыМинимум = 0;
	КонецЕсли; 
	
	Если ВыделенныеДокументыКоличество <> 0 Тогда
	
		ВыделенныеДокументыСреднее = ВыделенныеДокументыСумма/ВыделенныеДокументыКоличество;
		
	Иначе	
		ВыделенныеДокументыСреднее = 0;
	КонецЕсли; 
	
	Если фВыполнять Тогда
	
		ВыделенныеДокументыСписокПозиций.Добавить(ПлатПозиция);
		
	Иначе	
		элСписка = ВыделенныеДокументыСписокПозиций.НайтиПоЗначению(ПлатПозиция);
		ВыделенныеДокументыСписокПозиций.Удалить(элСписка);
	КонецЕсли; 
	
КонецПроцедуры // ПересчитатьСуммуВыделенныхДокументов()

// Процедура очищает значения выделенных документов. 
//
&НаКлиенте
Процедура ОчиститьЗначенияВыделенныхДокументов()

	ВыделенныеДокументыСумма 			= 0;
	ВыделенныеДокументыКоличество 		= 0;
	ВыделенныеДокументыМаксимум 		= 0;
	ВыделенныеДокументыМинимум 			= 0;
	ВыделенныеДокументыСреднее 			= 0;
	ВыделенныеДокументыСписок 			= Новый СписокЗначений;
	ВыделенныеДокументыСписокПозиций 	= Новый СписокЗначений;

КонецПроцедуры // ОчиститьЗначенияВыделенныхДокументов()

// Процедура меняет сумму в платежной позиции или разбивает ее на две.
// 
// Параметры:
// 	РежимРаботы - строка - "Разбить"  - разбить платежную позицию на две позиции
// 						   "Изменить" - изменить сумму в платежной позиции в большую или меньшую сторону.
// 
&НаКлиенте
Процедура РазбитьИзменитьПлатеж(РежимРаботы="Разбить")
	
	ТекущаяСтрока = Элементы.ДеревоСчета.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено 
		 И ЗначениеЗаполнено(ТекущаяСтрока.ПлатежнаяПозиция) 
		 И НЕ ТекущаяСтрока.Оплачено 
		 И НЕ ТекущаяСтрока.ЕстьПлатежныйДокумент
		 И НЕ ТекущаяСтрока.ЕстьПлатежноеПоручение Тогда
	
		НоваяСуммаПлатежа = ТекущаяСтрока.Сумма;
		
		ТекстПодсказки = НСтр("ru = 'Введите новую сумма платежа.'");
		Оповещение = Новый ОписаниеОповещения("РазбитьИзменитьПлатежОкончание", ЭтотОбъект, РежимРаботы); 
		ПоказатьВводЧисла(Оповещение, НоваяСуммаПлатежа,ТекстПодсказки,15,2);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура окончание процедуры "РазбитьИзменитьПлатеж".
// 
&НаКлиенте 
Процедура РазбитьИзменитьПлатежОкончание(НоваяСуммаПлатежа, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.ДеревоСчета.ТекущиеДанные;
	РежимРаботы = ДополнительныеПараметры;
	
	Если НЕ НоваяСуммаПлатежа = Неопределено Тогда
		
		Если РежимРаботы = "Разбить" 
			И НоваяСуммаПлатежа < ТекущаяСтрока.Сумма Тогда
			
			флДействиеВыполнено = РазбитьПлатеж(ТекущаяСтрока.ПолучитьИдентификатор(),ТекущаяСтрока.Сумма,НоваяСуммаПлатежа);
			
		ИначеЕсли РежимРаботы = "Изменить" Тогда
			
			флДействиеВыполнено = ИзменитьПлатеж(ТекущаяСтрока.ПолучитьИдентификатор(),ТекущаяСтрока.Сумма,НоваяСуммаПлатежа);
			
		Иначе
			флДействиеВыполнено = Ложь;
		КонецЕсли;
		
		Если флДействиеВыполнено Тогда
		
			бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСчета,ДеревоСчета,Объект.УровеньРаскрытияСчетов);			
		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // РазбитьИзменитьПлатежОкончание()

// Процедура создает и открывает новый документ
// , а также заполняет документ данными текущей строки ДереваСчетов.
// 
// Параметры:
// 	ВидДокумента - Строка - вид документа, который нужно создать 
// 				 ("бит_ЗаявкаНаРасходованиеСредств", "бит_ЗаявкаНаРасходованиеСредствОбщая").
// 
&НаКлиенте
Процедура СоздатьПоказатьНовыйДокумент(ВидДокумента)
	
	ТекущаяСтрока = Элементы.ДеревоСчета.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		СтруктураЗаполнения = Новый Структура;
		
		СтрКурса = ПолучитьКурсВалюты(ТекущаяСтрока.ВалютаДенежныхСредств,ТекущаяДата());
		
		СтруктураЗаполнения.Вставить("Организация"		 , ТекущаяСтрока.Организация);
		СтруктураЗаполнения.Вставить("ВалютаДокумента"	 , ТекущаяСтрока.ВалютаДенежныхСредств);
		СтруктураЗаполнения.Вставить("КурсДокумента"	 , СтрКурса.Курс);
		СтруктураЗаполнения.Вставить("КратностьДокумента", СтрКурса.Кратность);
		СтруктураЗаполнения.Вставить("ФормаОплаты"		 , ТекущаяСтрока.ВидДенежныхСредств);
		
		Если ТипЗнч(ТекущаяСтрока.БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			СтруктураЗаполнения.Вставить("БанковскийСчетОрганизации", ТекущаяСтрока.БанковскийСчет);
		Иначе
			СтруктураЗаполнения.Вставить("Касса", ТекущаяСтрока.БанковскийСчет);
		КонецЕсли;	
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
	КонецЕсли;
	
	ОткрытьФорму("Документ."+ВидДокумента+".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ВидимостьДанныхПоВыделеннымДокументам(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ВыделенныеДокументыКоличество.Видимость 	= Объект.ВыводитьВыделенныеДокументыКоличество;
	Элементы.ВыделенныеДокументыМаксимум.Видимость 		= Объект.ВыводитьВыделенныеДокументыМаксимум;
	Элементы.ВыделенныеДокументыМинимум.Видимость 		= Объект.ВыводитьВыделенныеДокументыМинимум;
	Элементы.ВыделенныеДокументыСреднее.Видимость 		= Объект.ВыводитьВыделенныеДокументыСреднее;
	Элементы.ВыделенныеДокументыСумма.Видимость 		= Объект.ВыводитьВыделенныеДокументыСумма;

КонецПроцедуры // ВидимостьДанныхПоВыделеннымДокументам()

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиПанелейПоУмолчанию(Форма)

	Настройки = Новый Структура;
	Настройки.Вставить("ПанельАналитическаяВидимость", Ложь);
	Настройки.Вставить("ПанельНастройкиВидимость", Ложь);
	Настройки.Вставить("ПанельТекущийДокументВидимость", Ложь);
	
	ЗаполнитьЗначенияСвойств(Настройки, Форма);
	
	Возврат Настройки;
	
КонецФункции // НастройкиПанелейПоУмолчанию()
  
&НаСервере
Процедура ЗаполнитьФормуПоУмолчанию()
	
	// Значения по умолчанию
	Объект.НачалоПериода 			= НачалоМесяца(ТекущаяДата());
	Объект.КонецПериода  			= КонецМесяца(ТекущаяДата());
	Объект.РежимОтображенияПериодов = "НеПустые";
	Объект.РежимОтображенияСчетов   = "НеПустые";
	Объект.РежимСообщений           = "Ошибки";
	Объект.РежимЗаписи              = "Запись";
	Объект.ОперативныйДень = ТекущаяДата();
	Объект.УровеньРаскрытияСчетов      = 4;
	Объект.ВысотаПанелиТекущийДокумент = 10;
	
	Объект.РежимОстатков = Перечисления.бит_РежимПолученияДанныхТаблоСчетов.ДанныеБухгалтерскогоУчета;
	
	Объект.Цвет_Информация = "#FFFFFF";
	Объект.Цвет_Прошлое    = "#F5F5F5";
	Объект.Цвет_Настоящее  = "#C0DCC0";
	Объект.Цвет_Будущее    = "#AFEEEE";
	Объект.Цвет_Запрет     = "#FFB6C1";
	Объект.ВыделятьПредельныеСрокиПлатежа = Истина;
	
	// Счета по-умолчанию для получения остатков
	// 51.
	НоваяСтрока = Объект.Счета.Добавить();	
	НоваяСтрока.ВидСчета = "Банк";
	НоваяСтрока.Счет     = ПланыСчетов.Хозрасчетный.РасчетныеСчета; 
	// 52
	НоваяСтрока = Объект.Счета.Добавить();		
	НоваяСтрока.ВидСчета = "Банк";
	НоваяСтрока.Счет     = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	// 50.01
	НоваяСтрока = Объект.Счета.Добавить();
	НоваяСтрока.ВидСчета = "Касса";
	НоваяСтрока.Счет     = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	// 50.21
	НоваяСтрока = Объект.Счета.Добавить();
	НоваяСтрока.ВидСчета = "Касса";
	НоваяСтрока.Счет     = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	// 50.02
	НоваяСтрока = Объект.Счета.Добавить();
	НоваяСтрока.ВидСчета = "Касса";
	НоваяСтрока.Счет     = ПланыСчетов.Хозрасчетный.ОперационнаяКасса;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)

	Объект = Форма.Объект;

	ЗаголовокОтчета = СтрШаблон(НСтр("ru = 'Рабочее место казначея%1'"),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Объект.НачалоПериода, Объект.КонецПериода));

	Если ЗначениеЗаполнено(Форма.ТекущаяНастройка) Тогда
		ЗаголовокОтчета = СтрШаблон("%1 (%2)", ЗаголовокОтчета, Форма.ТекущаяНастройка);
	КонецЕсли; 	
	
	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры 
 
&НаСервере
Процедура УстановитьВидимость()
 
 	Элементы.ГруппаОтборы.Видимость              = ПанельНастройкиВидимость;
	Элементы.ГруппаТекущийДокумент.Видимость     = ПанельТекущийДокументВидимость;
	Элементы.ГруппаАналитическаяПанель.Видимость = ПанельАналитическаяВидимость;
	
	Элементы.ФормаКомандаВидимостьПанелиНастроек.Пометка = ПанельНастройкиВидимость;
	Элементы.ФормаКомандаПанельТекущийДокумент.Пометка   = ПанельТекущийДокументВидимость;
	Элементы.ФормаКомандаАналитическаяПанель.Пометка     = ПанельАналитическаяВидимость;

	флВидимостьПанелиИнфо = ПанельТекущийДокументВидимость ИЛИ ПанельАналитическаяВидимость;
	Элементы.ГруппаИнформация.Видимость = флВидимостьПанелиИнфо;
 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьДоступностьПриИзмененииНастроек(ДоступОграничен = Ложь, Форма)

	Форма.Элементы.ПредупреждениеОбОбновленииДерева.Видимость = ДоступОграничен;	
	Форма.Элементы.ДеревоСчета.ТолькоПросмотр = ДоступОграничен;
	Форма.Элементы.ДеревоСчета.КонтекстноеМеню.Доступность = НЕ ДоступОграничен;
	Форма.Элементы.ФормаГруппаОтметить.Доступность = НЕ ДоступОграничен;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДекорацияПерейтиКСфоримрованнымДокументам(Форма)

	Показать = Форма.СписокДокументовСписания.Количество() <> 0
		   ИЛИ Форма.СписокРеестры.Количество() <> 0;
			
	Форма.Элементы.ДекорацияПерейтиКСфоримрованнымДокументам.Видимость = Показать;	

КонецПроцедуры
 
// Функция инициализирует настройки Компоновщик данных.
// 
// Возвращаемое значение:
//   АдресСКД   - Строка
// 
&НаСервере
Функция ИнициализироватьКомпоновщик(Компоновщик,ИмяМакета,УникальныйИдентификатор) Экспорт

	СхемаКомпоновкиДанных = Обработки.бит_РабочееМестоКазначея.ПолучитьМакет(ИмяМакета);
	бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СхемаКомпоновкиДанных, 
		СхемаКомпоновкиДанных.НаборыДанных[0].Имя, 
		бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));

	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
    Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат АдресСКД;
	
КонецФункции // ИнициализироватьКомпоновщик()

// Процедура выполняет обновление дерева счетов.
// 
// 
&НаСервере
Процедура ОбновитьДеревоСчетов()

	// Проверка возможности формирования
	Отказ = НЕ ПериодЗаполненПравильно(ЭтотОбъект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;  
	
	// Замер производительности
	СтрРегистрация = Новый Структура;
    бит_ук_СлужебныйСервер.РегистрацияНачалоСобытияВФорме(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);
	// Замер производительности

	ТекущиеПараметры = Новый Структура;
	ОчиститьИнформационныеПоля();
	
	// Получим данные по настроенной СКД
	СКД = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Установка параметров.
	ПараметрыСКД = Объект.Компоновщик.ФиксированныеНастройки.ПараметрыДанных;
	ПараметрыСКД.УстановитьЗначениеПараметра("ВыводитьОстаткиПоНеоплаченнымЗаявкам", Объект.ВыводитьОстаткиПоНеоплаченнымЗаявкам);
	ПараметрыСКД.УстановитьЗначениеПараметра("ВыводитьПрогнозыПлатежей", 			 Объект.ВыводитьПрогнозыПлатежей);
	//ПараметрыСКД.УстановитьЗначениеПараметра("КонецПериодаГраница", 				 Новый Граница(КонецДня(Объект.КонецПериода), ВидГраницы.Включая));	
	ПараметрыСКД.УстановитьЗначениеПараметра("НачалоПериода", 				 		 Объект.НачалоПериода);	
	//ПараметрыСКД.УстановитьЗначениеПараметра("КонецПериода", 				 		 КонецДня(Объект.КонецПериода));	
	ПараметрыСКД.УстановитьЗначениеПараметра("КонецПериода", Новый Граница(Объект.КонецПериода, ВидГраницы.Включая));
		
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Объект.Компоновщик.ПолучитьНастройки(),,,
												  Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
												  
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	// Дерево для вывода на форму
	РезДерево = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезДерево);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если РезДерево.Строки.Количество() = 0 Тогда
		 ТекстСообщения = НСтр("ru = 'Нет данных для вывода!'");
		 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		 Возврат;
	КонецЕсли; 
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);	
		
	Периоды = Новый ТаблицаЗначений(); 
	Периоды.Колонки.Добавить("Период");
	
	БанковскиеСчета = Новый ТаблицаЗначений(); 
	БанковскиеСчета.Колонки.Добавить("БанковскийСчет");
	БанковскиеСчета.Колонки.Добавить("Сумма");
	
	ЗаполнитьБанковскиеСчетаИПериоды(БанковскиеСчета, Периоды, РезДерево.Строки);
			
	ЗаполнитьСписокПериодов(Периоды);
	ДобавитьКолонкиДерева();

	Если БанковскиеСчета.Количество() > 1000 Тогда	
		БанковскиеСчета.Индексы.Добавить("БанковскийСчет,Сумма");
	КонецЕсли; 
	БанковскиеСчета.Свернуть("БанковскийСчет,Сумма");
	
	// Подготовим массив банковских счетов счетов.
	МассивСчетов = Новый Массив;
	
	Для каждого СтрокаТаблицы ИЗ БанковскиеСчета Цикл
		Если ВРег(Объект.РежимОтображенияСчетов) = ВРег("НеПустые") Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.Сумма) Тогда
				 МассивСчетов.Добавить(СтрокаТаблицы.БанковскийСчет);
			КонецЕсли; 
		Иначе	 
			МассивСчетов.Добавить(СтрокаТаблицы.БанковскийСчет);
		КонецЕсли; 
	КонецЦикла; 
	
	ДанныеСчетов = ПолучитьДанныеПоСчетам(МассивСчетов);
	
	ТекПозиция = Новый Структура("Измерение,ПлатежнаяПозиция");
	ИдТекПозиция = Элементы.ДеревоСчета.ТекущаяСтрока;
	Если  НЕ ИдТекПозиция = Неопределено Тогда
		
		ТекСтрока = ДеревоСчета.НайтиПоИдентификатору(ИдТекПозиция);
		
	КонецЕсли; 
	
	// Начало заполнения дерева счетов.
	ДанныеДерева = ДеревоСчета.ПолучитьЭлементы();
	ДанныеДерева.Очистить();
	
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекПозиция.Измерение        = ТекСтрока.Измерение;
		ТекПозиция.ПлатежнаяПозиция = ТекСтрока.ПлатежнаяПозиция;
	КонецЕсли; 
	
	ИдТекПозиция = 0;
	
	// Выведем дерево счетов 
	ОбойтиСтрокиДереваСчетов(РезДерево,ДанныеДерева, Неопределено, ДанныеСчетов, ТекПозиция, ИдТекПозиция);
	
	// Удалим группировка "Прогноз", если они не содержат подчиненных строк.
	Если Объект.ВыводитьПрогнозыПлатежей Тогда
		ОбъектДеревоСчета = РеквизитФормыВЗначение("ДеревоСчета");
		НайденныеСтроки = ОбъектДеревоСчета.Строки.НайтиСтроки(Новый Структура("Измерение", "Прогноз"), Истина);
		СтрокиКУдалению = Новый Массив(); 
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Строки.Количество() = 0 Тогда
				СтрокиКУдалению.Добавить(НайденнаяСтрока);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			УдаляемаяСтрока.Родитель.Строки.Удалить(УдаляемаяСтрока);
		КонецЦикла; 
		ЗначениеВРеквизитФормы(ОбъектДеревоСчета, "ДеревоСчета");
	КонецЕсли; 
	
	// Установим текущую строку
	Элементы.ДеревоСчета.ТекущаяСтрока = ИдТекПозиция;

	// Создадим подменю для управления уровнями дерева.
	СоздатьДействияУровней();

	// Установим оформление
	УстановитьУсловноеОформление(ДанныеСчетов);
	
	// Замер производительности
	бит_ук_СлужебныйСервер.РегистрацияФормированияОбработки(Ложь, СтрРегистрация);
	// Замер производительности

КонецПроцедуры // ОбновитьДеревоСчетов()

&НаСервере 
Процедура ЗаполнитьБанковскиеСчетаИПериоды(БанковскиеСчета, Периоды, Строки)

	Для каждого Строка Из Строки Цикл
		Если ЗначениеЗаполнено(Строка.БанковскийСчет) ИЛИ ЗначениеЗаполнено(Строка.Сумма) Тогда
			НоваяСтрока = БанковскиеСчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;  
		Если ЗначениеЗаполнено(Строка.Период) Тогда
			НоваяСтрока = Периоды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли; 
		ЗаполнитьБанковскиеСчетаИПериоды(БанковскиеСчета, Периоды, Строка.Строки);
	КонецЦикла;  

КонецПроцедуры
 
// Процедура устанавливает условное оформление формы.
// 
// Параметры:
//  МассивПериодов  - Массив
// 
&НаСервере
Процедура УстановитьУсловноеОформление(ДанныеСчетов)

	Если КолонкиПериодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 	
	
	УсловноеОформление.Элементы.Очистить();
		
	// Выделение группировки "Организация", "Банковский счет".
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоСчета");
	
	ГруппаУО = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы, 
				"ДеревоСчетаШрифт", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаУО,
				"ДеревоСчета.ИмяГруппировки", ВидСравненияКомпоновкиДанных.Равно, "Организация");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаУО,
				"ДеревоСчета.ИмяГруппировки", ВидСравненияКомпоновкиДанных.Равно, "БанковскийСчет");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));

	// Выделение шапки документа.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТекДокументШапка");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
				"ТекДокументШапка.Жирный", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));
	
	// Ограниченидоступа к полю "ДеревоСчетаВыполнять".
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоСчетаВыполнять");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
				"ДеревоСчета.ДоступностьФлажка", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	// Преобразуем цвета из шестнадцатеричного представления.
	ЦветИнформация  = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Информация);
	ЦветПрошлый     = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Прошлое);
	ЦветОперативный = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Настоящее);
	ЦветБудущий     = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Будущее);
	ЦветЗапрет      = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Запрет);

	// Последний период - остаток на конец
	ПоследнийПериод 	   = КолонкиПериодов[КолонкиПериодов.Количество() - 1].Значение;
	ИмяПоляПоследнийПериод = "ДеревоСчета" + КолонкиПериодов[КолонкиПериодов.Количество() - 1].Представление;
	
	МассивПрошлых     = Новый Массив;
	МассивБудущих     = Новый Массив;
	МассивОперативный = Новый Массив;
	
	// Заполним массивы периодов
	Для каждого Элемент Из КолонкиПериодов Цикл
		
		Значение  	  = Элемент.Значение;		
		Представление = Элемент.Представление; 
		ВидимостьПоля = Элемент.Пометка;
		ИмяПоля		  = "ДеревоСчета" + Представление;
		
		Если Значение < ТекущийДень Тогда			
			МассивПрошлых.Добавить(ИмяПоля);			 	 			 
		ИначеЕсли Значение > ТекущийДень Тогда			 
			Если Значение <> ПоследнийПериод Тогда				 
				МассивБудущих.Добавить(ИмяПоля);				 
			КонецЕсли; 
		Иначе			 
			МассивОперативный.Добавить(ИмяПоля);			 
		КонецЕсли; 
		
		Если Объект.ВыделятьПредельныеСрокиПлатежа Тогда	
			Если Значение >= ТекущийДень И Значение < ПоследнийПериод Тогда
				
				СтрУсловия = Новый Структура;
				СтрУсловия.Вставить("УсловиеЛевое" , "ДеревоСчета.ИмяДатаПлатежаКрайняя");	
				СтрУсловия.Вставить("УсловиеПравое", Представление);
				СтрУсловия.Вставить("ВидСравнения" , ВидСравненияКомпоновкиДанных.Меньше);				
				
				МассивПоля = Новый Массив;
				МассивПоля.Добавить(ИмяПоля);
				
				СтрОформления = Новый Структура("ЦветФона", ЦветЗапрет);
				СтруктураУО = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей",
										СтрОформления, СтрУсловия, МассивПоля); 
										
				бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
										Нстр("ru = 'Выделять предельные сроки платежа'"), СтруктураУО);				
			КонецЕсли; 
		КонецЕсли;
		
		Если Объект.ВыводитьНеснижаемыеОстатки Тогда
			
			МассивУсловий = Новый Массив;
			
			СтрУсловия = Новый Структура;
			СтрУсловия.Вставить("УсловиеЛевое" , "ДеревоСчета.ВидДанных");	
			СтрУсловия.Вставить("УсловиеПравое", Перечисления.бит_ВидыДанныхРабочееМестоКазначея.ДоступныеСредства);
			СтрУсловия.Вставить("ВидСравнения" , ВидСравненияКомпоновкиДанных.Равно);
			
			МассивУсловий.Добавить(СтрУсловия);
			
			СтрУсловия = Новый Структура;
			СтрУсловия.Вставить("УсловиеЛевое" , ИмяПоля);	
			СтрУсловия.Вставить("УсловиеПравое", 0);
			СтрУсловия.Вставить("ВидСравнения" , ВидСравненияКомпоновкиДанных.Меньше);
			
			МассивУсловий.Добавить(СтрУсловия);
			
			МассивПоля = Новый Массив;
			МассивПоля.Добавить(ИмяПоля);
			
			СтрОформления = Новый Структура;
			СтрОформления.Вставить("ЦветТекста", Новый Цвет(255, 0, 0));
			СтрОформления.Вставить("Шрифт", Новый Шрифт(,,Истина));
			
			СтруктураУО = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей",
									СтрОформления, МассивУсловий, МассивПоля); 				
			бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, Нстр("ru = 'Выводить неснижаемые остатки'"), СтруктураУО);				
			
		КонецЕсли;
		
		УпралениеВидимостьюКолонкиПериода(ИмяПоля, ВидимостьПоля, ЭтотОбъект);
	КонецЦикла;
	
	// Визуальное разделение периодов на "До опер. даты", "Опер. дата", "После опер. даты".
	ПредставлениеОформления = "ОформлениеПериодов";
	СтрУсловия = Новый Структура();
	СтрУсловия.Вставить("УсловиеЛевое", "флЛожь");	
	СтрУсловия.Вставить("УсловиеПравое", ЛОЖЬ);
	
	 УстановитьУсловниеОформлениеПериодов();
	 	
	// Информационные строки
	МассивПоля = Новый Массив;
	МассивПоля.Добавить(Элементы.ДеревоСчетаИзмерение.Имя);
	МассивПоля.Добавить(Элементы.ДеревоСчетаВалютаДенежныхСредств.Имя);
	МассивПоля.Добавить(Элементы.ДеревоСчетаПлатежнаяПозиция.Имя);
	МассивПоля.Добавить(Элементы.ДеревоСчетаСуммаФакт.Имя);
	МассивПоля.Добавить(Элементы.ДеревоСчетаСумма.Имя);
	МассивПоля.Добавить(ИмяПоляПоследнийПериод);

	СтрОформления = Новый Структура("ЦветФона", ЦветИнформация);
	СтруктураУО = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей",
	                              СтрОформления, СтрУсловия, МассивПоля);  	
	бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, ПредставлениеОформления, СтруктураУО);				
	
	// Прошлые периоды- строки по неоплаченным заявкам.
	МассивОформляемыхПолей = Новый Массив;
	МассивОформляемыхПолей.Добавить("ДеревоСчетаИзмерение");
	МассивОформляемыхПолей.Добавить("ДеревоСчетаПлатежнаяПозиция");
	МассивОформляемыхПолей.Добавить("ДеревоСчетаВалютаДенежныхСредств");
	МассивОформляемыхПолей.Добавить("ДеревоСчетаСуммаФакт");
	МассивОформляемыхПолей.Добавить("ДеревоСчетаСумма");
	МассивОформляемыхПолей.Добавить("ДеревоСчетаКонтрагент");
	МассивОформляемыхПолей.Добавить("ДеревоСчетаВыполнять");
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Представление = ПредставлениеОформления;
	ЭлементУО.Использование = Истина;			
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветПрошлый);
	
	ГруппаУсловиеУО = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаУсловиеУО.Использование = Истина;
	ГруппаУсловиеУО.ТипГруппы 	  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	УсловиеУО 				 = ГруппаУсловиеУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	УсловиеУО.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСчета.ЭтоОстатокПоНеоплаченнойЗаявке");
	УсловиеУО.ПравоеЗначение = Истина;
	
	УсловиеУО 				 = ГруппаУсловиеУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	УсловиеУО.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСчета.ЕстьПлатежныйДокумент");
	УсловиеУО.ПравоеЗначение = Ложь;
	
	УсловиеУО 				 = ГруппаУсловиеУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	УсловиеУО.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСчета.ЕстьПлатежноеПоручение");
	УсловиеУО.ПравоеЗначение = Ложь;
	
	УсловиеУО 				 = ГруппаУсловиеУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	УсловиеУО.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСчета.ЭтоПрогноз");
	УсловиеУО.ПравоеЗначение = Ложь;
	
	Для каждого ОфПоле Из МассивОформляемыхПолей Цикл
		ОформляемоеПоле 	 = ЭлементУО.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОфПоле);
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловниеОформлениеПериодов()
	
	ЦветПрошлый     = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Прошлое);
	ЦветОперативный = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Настоящее);
	ЦветБудущий     = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Будущее);
	ЦветЗапрет      = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Запрет);

	Для каждого ЭлементСписка Из КолонкиПериодов Цикл
		
		Если ЭлементСписка.Значение = Объект.ОперативныйДень Тогда
			ЦветФона = ЦветОперативный;
		ИначеЕсли ЭлементСписка.Значение < Объект.ОперативныйДень Тогда	
			ЦветФона = ЦветПрошлый;
		ИначеЕсли ЭлементСписка.Значение > Объект.ОперативныйДень Тогда
			ЦветФона = ЦветБудущий;
		КонецЕсли; 
		
		Элементы["ДеревоСчета" + ЭлементСписка.Представление].ЦветФона = ЦветФона;
	КонецЦикла; 		

КонецПроцедуры // УстановитьУсловниеОформлениеПеродов()
  
&НаКлиентеНаСервереБезКонтекста
Процедура УпралениеВидимостьюКолонкиПериода(ИмяКолонки, Пометка, Форма)

	Элемент = Форма.Элементы.Найти(ИмяКолонки);
	Если Элемент <> Неопределено Тогда
		Элемент.Видимость = Пометка;
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьСписокПериодов(Периоды)
	
	КолонкиПериодов.Очистить();
			
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) 
	 ИЛИ НЕ ЗначениеЗаполнено(Объект.КонецПериода) 
	 ИЛИ (Объект.НачалоПериода > Объект.КонецПериода)Тогда
		
		ВызватьИсключение НСТР("ru = 'Настройка перирода отображения данных выполнена не верно!'");
	КонецЕсли;
	
	Если Периоды.Количество() > 1000 Тогда	
		Периоды.Индексы.Добавить("Период");
	КонецЕсли;
	
	Периоды.Свернуть("Период");

	Если Периоды.Количество() > 1000 Тогда
		Периоды.Индексы.Добавить("Период");
	КонецЕсли; 
	
	ТекДата = Объект.НачалоПериода;
	Пока ТекДата <= Объект.КонецПериода Цикл
		
		Если ВРег(Объект.РежимОтображенияПериодов) = ВРег("Все") Тогда
			// Показываем все периоды.
			Пометка = Истина;
		Иначе
			Если ТекДата = Объект.ОперативныйДень Тогда
				// Оперативнй день покажем всегда.
				Пометка = Истина;
			ИначеЕсли Периоды.Найти(ТекДата, "Период") = Неопределено Тогда
				// Скрываем периоды без оборотов.
				Пометка = Ложь;
			Иначе
				// Выводим период.
				Пометка = Истина;	
			КонецЕсли; 
		КонецЕсли;
		
		КолонкиПериодов.Добавить(ТекДата, СформироватьИмяКолонкиПериод("П",ТекДата), Пометка);
		ТекДата = КонецДня(ТекДата) + 1;
		
	КонецЦикла; 
		
	Если КолонкиПериодов.Количество() > 0 Тогда
		
		// Для вывода остатков на конец
		КонецПериода = НачалоДня(КолонкиПериодов[КолонкиПериодов.Количество() - 1].Значение + 86400);
		КолонкиПериодов.Добавить(КонецПериода, СформироватьИмяКолонкиПериод("П", КонецПериода), Истина);
		
		// Для вывода остатков на начало.
		// Колонка на начало периода всегда скрыта.
		НачалоПериода = НачалоДня(КолонкиПериодов[0].Значение - 1);
		КолонкиПериодов.Вставить(0, НачалоПериода, СформироватьИмяКолонкиПериод("П", НачалоПериода), Ложь);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура добавляет реквизиты формы и колонки дерева.
// 
// Параметры:
//  МассивПериодов  - Массив
// 
&НаСервере
Процедура ДобавитьКолонкиДерева()
	
	// Удалим колонки и реквизиты периодов
	МассивУдалить = Новый Массив;
	Для каждого Элемент ИЗ Элементы.ДеревоСчета.ПодчиненныеЭлементы Цикл
		Если СтрНайти(Элемент.Имя,"ДеревоСчетаП_")>0 Тогда
			МассивУдалить.Добавить(Элемент);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого Элемент Из МассивУдалить Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла; 
	
	МассивРеквизитов = ПолучитьРеквизиты("ДеревоСчета");
	МассивУдалить = Новый Массив;
	
	Для каждого Реквизит Из МассивРеквизитов Цикл
		Если СтрНайти(Реквизит.Имя,"П_")>0 Тогда
			МассивУдалить.Добавить(Реквизит.Путь+"."+Реквизит.Имя);
		КонецЕсли; 
	КонецЦикла; 
	
	Если МассивУдалить.Количество()>0 Тогда
		ИзменитьРеквизиты(,МассивУдалить);
	КонецЕсли; 

	Если КолонкиПериодов.Количество() = 0 Тогда
		// Вообще нет данных - ничего не делаем
		Возврат;
	КонецЕсли;	
	
	// Добавим реквизиты и колонки дерева периодов
	// создадим колонки периодов.
	ПервыйПериод    = КолонкиПериодов[0].Значение;
	ПоследнийПериод = КолонкиПериодов[КолонкиПериодов.Количество() - 1].Значение;	
	ОписаниеЧисло   = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
	
	// Добавим реквизиты.
	ДобавляемыеРеквизиты = Новый Массив;
	Для каждого Элемент Из КолонкиПериодов Цикл
		
		ИмяКолонки = Элемент.Представление;
		Значение   = Элемент.Значение;
		
		Если Значение = ПоследнийПериод Тогда
			ЗаголовокКолонки = "На конец периода";
		ИначеЕсли Значение = ПервыйПериод Тогда
			ЗаголовокКолонки = "На начало периода";
		Иначе	
			ЗаголовокКолонки = Формат(Значение,"ДФ=dd.MM.yyyy");
		КонецЕсли; 
		НовыйРеквизит = Новый РеквизитФормы(ИмяКолонки,ОписаниеЧисло,"ДеревоСчета",ЗаголовокКолонки);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);		
		
	КонецЦикла; 
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавим элементы.
	Для каждого Элемент Из КолонкиПериодов Цикл
		
		Значение 	 = Элемент.Значение;
		ИмяКолонки   = Элемент.Представление;		
		ИмяЭлемента  = "ДеревоСчета" + ИмяКолонки;
		НовыйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Элементы.ДеревоСчета);
		
		НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным 	= "ДеревоСчета."+ИмяКолонки;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
		// Установим ширину элемента периода.
		НовыйЭлемент.Ширина = 10;
		НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;

	КонецЦикла; 

КонецПроцедуры

// Процедура создает кноки раскрытия/свертки уровней дерева счетов.
// 
&НаСервере
Процедура СоздатьДействияУровней()

	// Очищаем существующие кнопки подменю
	КоличествоЭлементов = Элементы.ДеревоСчетаУровни.ПодчиненныеЭлементы.Количество();
	Для н = 1 По КоличествоЭлементов Цикл
	
		инд = КоличествоЭлементов - н;
		Кнопка = Элементы.ДеревоСчетаУровни.ПодчиненныеЭлементы[инд];
		Элементы.Удалить(Кнопка);
	
	КонецЦикла; 
	
	// Создадим команды и кнопки в подменю
	Для инд = 1 По МаксУровеньДеревоСчета Цикл
		
		ИмяКоманды = "ДеревоСчетаУровень_"+инд;
		
		КомандаУровня = Команды.Найти(ИмяКоманды);
		
		Если КомандаУровня = Неопределено Тогда
			
			КомандаУровня = Команды.Добавить(ИмяКоманды);
			КомандаУровня.Действие = "Подключаемый_ДействиеДеревоСчетаУровень";
			
		КонецЕсли; 
		
		НоваяКнопка = Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"),Элементы.ДеревоСчетаУровни);
		
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
		НоваяКнопка.Заголовок = "Уровень "+инд;
		Если инд = Объект.УровеньРаскрытияСчетов Тогда
		
			НоваяКнопка.Пометка = Истина;
		
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры // СоздатьДействияУровней()

&НаКлиентеНаСервереБезКонтекста 
Функция ПериодЗаполненПравильно(Форма)

	ЗаполненПравильно = Истина;
	
	Объект = Форма.Объект;
	Отказ  = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Начало периода"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", ,Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Конец периода"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.КонецПериода", ,Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НачалоПериода) И ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Если Объект.КонецПериода < Объект.НачалоПериода Тогда
			ТекстСообщения = НСтр("ru ='Период указан неверно! Дата начала больше даты окончания.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", ,Отказ);
		КонецЕсли;
	КонецЕсли; 
	
	Если Отказ Тогда
		ЗаполненПравильно = Ложь;
	КонецЕсли;  
	
	Возврат ЗаполненПравильно; 

КонецФункции // ПериодЗаполненПравильно()

// Функция выполняет поиск пользовательской настройки по имени в настройках компоновщика.
// 
// Параметры:
//  ИмяНастройки  - Строка.
// 
// Возвращаемое значение:
//   РезНастройка   - ЗначениеПараметраНастроекКомпоновкиДанных.
//
&НаСервере
Функция НайтиПараметрДанных(Компоновщик,ИмяНастройки)

	РезНастройка = Неопределено;
	
	 Для каждого Элемент Из Компоновщик.Настройки.ПараметрыДанных.Элементы Цикл
		 
		 Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			 
			 Если Строка(Элемент.Параметр) = ИмяНастройки Тогда
				 
				 РезНастройка = Элемент;
				 Прервать;
				 
			 КонецЕсли; 
			 
		 КонецЕсли; 
	 
	 КонецЦикла; 

	Возврат РезНастройка;
	
КонецФункции

// Функция получает остатки и минимальные неснижаемые остатки по банковким счетам.
// 
// Параметры:
//  МассивБанковскихСчетов  - Массив.
// 
// Возвращаемое значение:
//  ДанныеСчетов   - Соответствие.
// 
&НаСервере
Функция ПолучитьДанныеПоСчетам(МассивБанковскихСчетов)
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДанныеСчетов = Новый Соответствие;
	
	// Сформируем массив счетов для получения остатков по банковским счетам.
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ВидСчета","Банк");
	
	МассивСтрок = Объект.Счета.НайтиСтроки(СтрОтбор);
	
	МассивСчетовБанк = Новый Массив;
	Для каждого Элемент Из МассивСтрок Цикл
	
		МассивСчетовБанк.Добавить(Элемент.Счет);
	
	КонецЦикла; 
	
	// Сформируем массив счетов для получения остатков по кассам.
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ВидСчета","Касса");
	
	МассивСтрок = Объект.Счета.НайтиСтроки(СтрОтбор);
	
	МассивСчетовКасса = Новый Массив;
	Для каждого Элемент Из МассивСтрок Цикл
	
		МассивСчетовКасса.Добавить(Элемент.Счет);
	
	КонецЦикла; 
	
	// Фрагмент текста запроса для получения минимальных неснижаемых остатков.
	ТекстМНО =       
	"ВЫБРАТЬ
	|	ТаблицаДат.Период
	|ПОМЕСТИТЬ ТаблицаДат
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МНО.БанковскийСчет,
	|	ТаблицаДат.Период КАК СеткаПериод,
	|	МАКСИМУМ(МНО.Период) КАК Период,
	|	МНО.Организация,
	|	МНО.Валюта
	|ПОМЕСТИТЬ ТаблицаДатМНО
	|ИЗ
	|	ТаблицаДат КАК ТаблицаДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НеснижаемыеОстатки КАК МНО
	|		ПО ТаблицаДат.Период >= МНО.Период
	|ГДЕ
	|	МНО.Период <= &КонецПериода
	|	И (МНО.БанковскийСчет В (&МассивБанковскихСчетов)
	|			ИЛИ МНО.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))
	|	И (НЕ МНО.Период ЕСТЬ NULL )
	|	И (НЕ МНО.БанковскийСчет ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	МНО.БанковскийСчет,
	|	ТаблицаДат.Период,
	|	МНО.Организация,
	|	МНО.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ТаблицаДатМНО.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ""Касса""
	|		ИНАЧЕ ТаблицаДатМНО.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	ТаблицаДатМНО.СеткаПериод КАК СеткаПериод,
	|	ВЫБОР
	|		КОГДА ТаблицаДатМНО.СеткаПериод <= МНО.ДатаОкончания
	|				ИЛИ МНО.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЕСТЬNULL(МНО.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОстаток,
	|	МНО.ДатаОкончания,
	|	ТаблицаДатМНО.Организация,
	|	ТаблицаДатМНО.Валюта
	|ПОМЕСТИТЬ МНО
	|ИЗ
	|	ТаблицаДатМНО КАК ТаблицаДатМНО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НеснижаемыеОстатки КАК МНО
	|		ПО ТаблицаДатМНО.БанковскийСчет = МНО.БанковскийСчет
	|			И ТаблицаДатМНО.Период = МНО.Период
	|			И ТаблицаДатМНО.Организация = МНО.Организация
	|			И ТаблицаДатМНО.Валюта = МНО.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Фрагмент текста запроса уничтожающий временные таблицы.
	ТекстУдалить =   
	"УНИЧТОЖИТЬ ТаблицаДатОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОстатки					   
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДатМНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МНО";
					 	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов"   ,МассивСчетовБанк);
	Запрос.УстановитьПараметр("МассивСчетовНал",МассивСчетовКасса);
	Запрос.УстановитьПараметр("ВалютаРегл"     ,ВалютаРегл);
	Запрос.УстановитьПараметр("НачалоПериода"  ,Объект.НачалоПериода);
	Запрос.УстановитьПараметр("НачалоПериодаСдвиг", НачалоДня(Объект.НачалоПериода - 1));	
	Запрос.УстановитьПараметр("КонецПериода"      , КонецДня(Объект.КонецПериода) + 86400); // Плюс день после конца пириода.
	
	ГраницаКон = Новый Граница(КонецДня(Объект.КонецПериода) + 1,ВидГраницы.Включая);	
	Запрос.УстановитьПараметр("ГраницаКон"     ,ГраницаКон);
	Запрос.УстановитьПараметр("МассивБанковскихСчетов",МассивБанковскихСчетов);
	
	// Сформируем сетку дат
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Период",Новый ОписаниеТипов("Дата"));
	
	ТаблицаДат.ЗаполнитьЗначения(КолонкиПериодов.ВыгрузитьЗначения(), "Период");
	Для каждого Элемент Из КолонкиПериодов Цикл
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Период = Элемент.Значение;
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("ТаблицаДат",ТаблицаДат);
	
	Если Объект.РежимОстатков = Перечисления.бит_РежимПолученияДанныхТаблоСчетов.ДанныеБухгалтерскогоУчета Тогда
		
		// Получение остатков по банковским счетам по данным бух. учета.
        ТекстОстатки = ТекстЗапросаОстаткиДенежныхСредствПоДаннымБухучета();
		
	ИначеЕсли Объект.РежимОстатков = Перечисления.бит_РежимПолученияДанныхТаблоСчетов.СведенияОДвиженииДенежныхСредств Тогда			   
		
		// Получение остатков по банковским счетам из "УправленческойВыписки".
		ТекстОстатки = ТекстЗапросаОстаткиИзУправленческойВыписки();		
				   
	ИначеЕсли Объект.РежимОстатков = Перечисления.бит_РежимПолученияДанныхТаблоСчетов.УппКа_ДанныеПоДенежнымСредствам Тогда
					   
		// Получение остатков по регистру ДенежныеСредства КА/УПП.
		ТекстОстатки = ТекстЗапросаОстаткиДенежныхСредствУППиКА(ТекстОстатки);
		
	КонецЕсли; 
	
	Запрос.Текст = ТекстМНО;
	Запрос.Текст = Запрос.Текст + ТекстОстатки;
	Запрос.Текст = Запрос.Текст;// + ТекстУдалить; 
	
	// Получим данные и сформируем соответствие для быстрого доступа к данным по банковскому счету.
	Результат = Запрос.Выполнить();
	
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ВыборкаВалюта = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВалюта.Следующий() Цикл
			
			ВыборкаСчет = ВыборкаВалюта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСчет.Следующий() Цикл
				
				СтрПериоды = Новый Структура;
				
				ВыборкаПериод = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период","Все");
				ОстатокОперДень = 0;
				
				Пока ВыборкаПериод.Следующий() Цикл
					
					Если НЕ КолонкиПериодов.НайтиПоЗначению(ВыборкаПериод.Период) = Неопределено Тогда
						
						ИмяПериода = СформироватьИмяКолонкиПериод("П",ВыборкаПериод.Период);
						
						СуммаОстаток = ?(ВыборкаПериод.Валюта = ВалютаРегл,ВыборкаПериод.СуммаОстаток,ВыборкаПериод.ВалСуммаОстаток);
						
						СуммаОстаток = ?(ТипЗнч(СуммаОстаток)=Тип("Null"),0,СуммаОстаток); 
						
						Если ВыборкаПериод.Период >= ТекущийДень Тогда
							
							Если ВыборкаПериод.Период = НачалоДня(ТекущийДень+86400) Тогда
								
								 // Остаток опер. дня необходимо показать с учетом движений, которые были отражены в опер. дне.
								 ОстатокОперДень    = СуммаОстаток;
								 ИмяПериодаОперДень = СформироватьИмяКолонкиПериод("П", ТекущийДень);
								 Если СтрПериоды.Свойство(ИмяПериодаОперДень) Тогда
								 
								 	СтрПериоды[ИмяПериодаОперДень].СуммаОстаток = ОстатокОперДень;
								 
								 КонецЕсли; 
							
							КонецЕсли; 
							
							Если ОстатокОперДень = 0 Тогда
								
								ОстатокОперДень = СуммаОстаток;
								
							КонецЕсли; 
							СуммаОстаток = ОстатокОперДень;
							
						Иначе	
							
							СуммаОстаток = СуммаОстаток;
							
						КонецЕсли; 
						
						СуммаМНО = ?(ЗначениеЗаполнено(ВыборкаПериод.СуммаМНО),ВыборкаПериод.СуммаМНО,0);
						ДоступныеСредства = СуммаОстаток - СуммаМНО;
						СтрСуммы = Новый Структура("СуммаОстаток,СуммаМНО, ДоступныеСредства",СуммаОстаток,СуммаМНО, ДоступныеСредства);
						СтрПериоды.Вставить(ИмяПериода,СтрСуммы);
						
					КонецЕсли; 
					
				КонецЦикла; // ВыборкаПериод
				
				Если ВыборкаСчет.БанковскийСчет = "Касса" Тогда
					Ключ = Строка(ВыборкаСчет.Организация.Код)+"/"+Строка(ВыборкаСчет.Валюта.Код); 
				Иначе	
					Ключ = ВыборкаСчет.БанковскийСчет;
				КонецЕсли; 
				
				ДанныеСчетов.Вставить(Ключ,СтрПериоды);
				
			КонецЦикла; // ВыборкаСчет
			
		КонецЦикла; // ВыборкаВалюта
		
	КонецЦикла;  // ВыборкаОрганизация
		
	Возврат ДанныеСчетов;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОстаткиДенежныхСредствПоДаннымБухучета()
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДОБАВИТЬКДАТЕ(ХозрасчетныйОстаткиИОбороты.Период, ДЕНЬ, 1) КАК Период,
	|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные) КАК ВидДенежныхСредств,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта ЕСТЬ NULL
	|				ИЛИ ХозрасчетныйОстаткиИОбороты.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА &ВалютаРегл
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.Валюта
	|	КОНЕЦ КАК Валюта,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток, 0)) КАК СуммаОстаток,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток, 0)) КАК ВалСуммаОстаток,
	|	0 КАК СуммаМНО,
	|	ХозрасчетныйОстаткиИОбороты.Организация.Код КАК ОрганизацияКод
	|ПОМЕСТИТЬ ТаблицаОстаткиПредв
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериодаСдвиг, &ГраницаКон, День, , Счет В (&МассивСчетов), , Субконто1 В (&МассивБанковскихСчетов)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Организация,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1,
	|	ДОБАВИТЬКДАТЕ(ХозрасчетныйОстаткиИОбороты.Период, ДЕНЬ, 1),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта ЕСТЬ NULL
	|				ИЛИ ХозрасчетныйОстаткиИОбороты.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА &ВалютаРегл
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.Валюта
	|	КОНЕЦ,
	|	ХозрасчетныйОстаткиИОбороты.Организация.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ХозрасчетныйОстаткиИОбороты.Период, ДЕНЬ, 1),
	|	ХозрасчетныйОстаткиИОбороты.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные),
	|	ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта ЕСТЬ NULL
	|				ИЛИ ХозрасчетныйОстаткиИОбороты.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА &ВалютаРегл
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.Валюта
	|	КОНЕЦ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток, 0)),
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток, 0)),
	|	СУММА(0),
	|	ХозрасчетныйОстаткиИОбороты.Организация.Код
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериодаСдвиг, &ГраницаКон, День, , Счет В (&МассивСчетовНал), , ) КАК ХозрасчетныйОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Валюта ЕСТЬ NULL
	|				ИЛИ ХозрасчетныйОстаткиИОбороты.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА &ВалютаРегл
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.Валюта
	|	КОНЕЦ,
	|	ДОБАВИТЬКДАТЕ(ХозрасчетныйОстаткиИОбороты.Период, ДЕНЬ, 1),
	|	ХозрасчетныйОстаткиИОбороты.Организация.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДат.Период КАК ПериодСетка,
	|	ТаблицаОстаткиПредв.Организация КАК Организация,
	|	ТаблицаОстаткиПредв.БанковскийСчет КАК БанковскийСчет,
	|	ТаблицаОстаткиПредв.Валюта КАК Валюта,
	|	МАКСИМУМ(ТаблицаОстаткиПредв.Период) КАК Период,
	|	ТаблицаОстаткиПредв.ВидДенежныхСредств КАК ВидДенежныхСредств
	|ПОМЕСТИТЬ ТаблицаДатОстатки
	|ИЗ
	|	ТаблицаДат КАК ТаблицаДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстаткиПредв КАК ТаблицаОстаткиПредв
	|		ПО ТаблицаДат.Период >= ТаблицаОстаткиПредв.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДат.Период,
	|	ТаблицаОстаткиПредв.Организация,
	|	ТаблицаОстаткиПредв.БанковскийСчет,
	|	ТаблицаОстаткиПредв.Валюта,
	|	ТаблицаОстаткиПредв.ВидДенежныхСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДатОстатки.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаОстаткиПредв.ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные)
	|			ТОГДА ""Касса""
	|		ИНАЧЕ ТаблицаДатОстатки.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	ТаблицаДатОстатки.Валюта КАК Валюта,
	|	ТаблицаДатОстатки.Организация.Код КАК ОрганизацияКод,
	|	ЕСТЬNULL(ТаблицаОстаткиПредв.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(ТаблицаОстаткиПредв.ВалСуммаОстаток, 0) КАК ВалСуммаОстаток,
	|	ТаблицаДатОстатки.ПериодСетка КАК Период
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	ТаблицаДатОстатки КАК ТаблицаДатОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстаткиПредв КАК ТаблицаОстаткиПредв
	|		ПО ТаблицаДатОстатки.Организация = ТаблицаОстаткиПредв.Организация
	|			И ТаблицаДатОстатки.БанковскийСчет = ТаблицаОстаткиПредв.БанковскийСчет
	|			И ТаблицаДатОстатки.Валюта = ТаблицаОстаткиПредв.Валюта
	|			И ТаблицаДатОстатки.Период = ТаблицаОстаткиПредв.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ТаблицаОстатки.Организация, МНО.Организация) КАК Организация,
	|	ЕСТЬNULL(ТаблицаОстатки.Валюта, МНО.Валюта) КАК Валюта,
	|	СУММА(ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)) КАК СуммаОстаток,
	|	СУММА(ЕСТЬNULL(ТаблицаОстатки.ВалСуммаОстаток, 0)) КАК ВалСуммаОстаток,
	|	СУММА(ЕСТЬNULL(МНО.СуммаОстаток, 0)) КАК СуммаМНО,
	|	ЕСТЬNULL(ТаблицаОстатки.Период, МНО.СеткаПериод) КАК Период,
	|	ЕСТЬNULL(ТаблицаОстатки.БанковскийСчет, МНО.БанковскийСчет) КАК БанковскийСчет
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ МНО КАК МНО
	|		ПО ТаблицаОстатки.Период = МНО.СеткаПериод
	|			И ТаблицаОстатки.Организация = МНО.Организация
	|			И ТаблицаОстатки.Валюта = МНО.Валюта
	|			И ТаблицаОстатки.БанковскийСчет = МНО.БанковскийСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ТаблицаОстатки.Организация, МНО.Организация),
	|	ЕСТЬNULL(ТаблицаОстатки.Валюта, МНО.Валюта),
	|	ЕСТЬNULL(ТаблицаОстатки.Период, МНО.СеткаПериод),
	|	ЕСТЬNULL(ТаблицаОстатки.БанковскийСчет, МНО.БанковскийСчет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ
	|	СУММА(СуммаОстаток),
	|	СУММА(ВалСуммаОстаток),
	|	СУММА(СуммаМНО)
	|ПО
	|	Организация,
	|	Валюта,
	|	БанковскийСчет,
	|	Период
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОстаткиПредв";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();

КонецФункции

&НаСервере
Функция ТекстЗапросаОстаткиДенежныхСредствУППиКА(ТекстОстатки)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДОБАВИТЬКДАТЕ(ДенежныеСредстваОстаткиИОбороты.Период, ДЕНЬ, 1) КАК Период,
	|	ДенежныеСредстваОстаткиИОбороты.Организация КАК Организация,
	|	ДенежныеСредстваОстаткиИОбороты.ВидДенежныхСредств,
	|	ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса КАК БанковскийСчет,
	|	ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса.ВалютаДенежныхСредств КАК Валюта,
	|	СУММА(ЕСТЬNULL(ДенежныеСредстваОстаткиИОбороты.СуммаКонечныйОстаток, 0))  КАК СуммаОстаток,
	|	СУММА(ЕСТЬNULL(ДенежныеСредстваОстаткиИОбороты.СуммаКонечныйОстаток, 0))  КАК ВалСуммаОстаток,
	|	0 КАК СуммаМНО,
	|	ДенежныеСредстваОстаткиИОбороты.Организация.Код
	|ПОМЕСТИТЬ ТаблицаОстаткиПредв
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&НачалоПериодаСдвиг, &ГраницаКон, День, , БанковскийСчетКасса В (&МассивБанковскихСчетов)) КАК ДенежныеСредстваОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваОстаткиИОбороты.Организация,
	|	ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса,
	|	ДОБАВИТЬКДАТЕ(ДенежныеСредстваОстаткиИОбороты.Период, ДЕНЬ, 1),
	|	ДенежныеСредстваОстаткиИОбороты.БанковскийСчетКасса.ВалютаДенежныхСредств,
	|	ДенежныеСредстваОстаткиИОбороты.Организация.Код,
	|	ДенежныеСредстваОстаткиИОбороты.ВидДенежныхСредств
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   ТаблицаДат.Период КАК ПериодСетка,
	|   ТаблицаОстаткиПредв.Организация,
	|   ТаблицаОстаткиПредв.БанковскийСчет,
	|   ТаблицаОстаткиПредв.Валюта,
	|   МАКСИМУМ(ТаблицаОстаткиПредв.Период) КАК Период,
	|   ТаблицаОстаткиПредв.ВидДенежныхСредств
	|ПОМЕСТИТЬ ТаблицаДатОстатки
	|ИЗ
	|   ТаблицаДат КАК ТаблицаДат
	|   	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстаткиПредв КАК ТаблицаОстаткиПредв
	|   	ПО ТаблицаДат.Период >= ТаблицаОстаткиПредв.Период
	|
	|СГРУППИРОВАТЬ ПО
	|   ТаблицаДат.Период,
	|   ТаблицаОстаткиПредв.Организация,
	|   ТаблицаОстаткиПредв.БанковскийСчет,
	|   ТаблицаОстаткиПредв.Валюта,
	|   ТаблицаОстаткиПредв.ВидДенежныхСредств
	|  
	|; 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   ТаблицаДатОстатки.Организация КАК Организация,
	|   ТаблицаДатОстатки.БанковскийСчет,
	|   ТаблицаДатОстатки.Валюта КАК Валюта,
	|   ТаблицаДатОстатки.Организация.Код,
	|   ЕСТЬNULL(ТаблицаОстаткиПредв.СуммаОстаток, 0) КАК СуммаОстаток,
	|   ЕСТЬNULL(ТаблицаОстаткиПредв.ВалСуммаОстаток, 0) КАК ВалСуммаОстаток,
	|   ТаблицаДатОстатки.ПериодСетка КАК Период
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|   ТаблицаДатОстатки КАК ТаблицаДатОстатки
	|   	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстаткиПредв КАК ТаблицаОстаткиПредв
	|   	ПО ТаблицаДатОстатки.Организация = ТаблицаОстаткиПредв.Организация
	|   		И ТаблицаДатОстатки.БанковскийСчет = ТаблицаОстаткиПредв.БанковскийСчет
	|   		И ТаблицаДатОстатки.Валюта = ТаблицаОстаткиПредв.Валюта
	|   		И ТаблицаДатОстатки.Период = ТаблицаОстаткиПредв.Период
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   ЕСТЬNULL(ТаблицаОстатки.Организация, МНО.Организация) КАК Организация,
	|   ЕСТЬNULL(ТаблицаОстатки.Валюта, МНО.Валюта) КАК Валюта,
	|   СУММА(ЕСТЬNULL(ТаблицаОстатки.СуммаОстаток, 0)) КАК СуммаОстаток,
	|   СУММА(ЕСТЬNULL(ТаблицаОстатки.ВалСуммаОстаток, 0)) КАК ВалСуммаОстаток,
	|   СУММА(ЕСТЬNULL(МНО.СуммаОстаток, 0)) КАК СуммаМНО,
	|   ЕСТЬNULL(ТаблицаОстатки.Период, МНО.СеткаПериод) КАК Период,
	|   ЕСТЬNULL(ТаблицаОстатки.БанковскийСчет, МНО.БанковскийСчет) КАК БанковскийСчет
	|ИЗ
	|   ТаблицаОстатки КАК ТаблицаОстатки
	|   	ПОЛНОЕ СОЕДИНЕНИЕ МНО КАК МНО
	|   	ПО ТаблицаОстатки.Период = МНО.СеткаПериод
	|   		И ТаблицаОстатки.Организация = МНО.Организация
	|   		И ТаблицаОстатки.Валюта = МНО.Валюта
	|   		И ТаблицаОстатки.БанковскийСчет = МНО.БанковскийСчет
	|
	|СГРУППИРОВАТЬ ПО
	|   ЕСТЬNULL(ТаблицаОстатки.Организация, МНО.Организация),
	|   ЕСТЬNULL(ТаблицаОстатки.Валюта, МНО.Валюта),
	|   ЕСТЬNULL(ТаблицаОстатки.Период, МНО.СеткаПериод),
	|   ЕСТЬNULL(ТаблицаОстатки.БанковскийСчет, МНО.БанковскийСчет)
	|
	|УПОРЯДОЧИТЬ ПО
	|   Период
	|ИТОГИ
	|   СУММА(СуммаОстаток),
	|   СУММА(ВалСуммаОстаток),
	|   СУММА(СуммаМНО)
	|ПО
	|   Организация,
	|   Валюта,
	|   БанковскийСчет,
	|   Период
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОстаткиПредв";

	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОстаткиИзУправленческойВыписки()	
	
	ТекстЗапроса =     
	//"ВЫБРАТЬ
	//|	ТаблицаДат.Период КАК Период
	//|ПОМЕСТИТЬ ТаблицаДат
	//|ИЗ
	//|	&ТаблицаДат КАК ТаблицаДат
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	"ВЫБРАТЬ
	|	бит_СведенияОбОстаткахДенежныхСредств.Период КАК Период,
	|	бит_СведенияОбОстаткахДенежныхСредств.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА бит_СведенияОбОстаткахДенежныхСредств.ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные)
	|			ТОГДА ВЫРАЗИТЬ(""Касса"" КАК СТРОКА(5))
	|		ИНАЧЕ бит_СведенияОбОстаткахДенежныхСредств.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	бит_СведенияОбОстаткахДенежныхСредств.Валюта КАК Валюта,
	|	бит_СведенияОбОстаткахДенежныхСредств.СуммаНач КАК СуммаОстаток,
	|	бит_СведенияОбОстаткахДенежныхСредств.СуммаНач КАК ВалСуммаОстаток
	|ПОМЕСТИТЬ СведенияОбОстатках
	|ИЗ
	|	РегистрСведений.бит_СведенияОбОстаткахДенежныхСредств КАК бит_СведенияОбОстаткахДенежныхСредств
	|ГДЕ
	|	бит_СведенияОбОстаткахДенежныхСредств.Период <= &КонецПериода
	|	И бит_СведенияОбОстаткахДенежныхСредств.БанковскийСчет В (&МассивБанковскихСчетов, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ДвиженияДенежныхСредствОбороты.Период КАК Период,
	|	бит_ДвиженияДенежныхСредствОбороты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА бит_ДвиженияДенежныхСредствОбороты.ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные)
	|			ТОГДА ВЫРАЗИТЬ(""Касса"" КАК СТРОКА(5))
	|		ИНАЧЕ бит_ДвиженияДенежныхСредствОбороты.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	бит_ДвиженияДенежныхСредствОбороты.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА бит_ДвиженияДенежныхСредствОбороты.РасходДоход = ЗНАЧЕНИЕ(Перечисление.бит_РасходДоход.расходование)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * бит_ДвиженияДенежныхСредствОбороты.СуммаОборот КАК СуммаВал,
	|	ВЫБОР
	|		КОГДА бит_ДвиженияДенежныхСредствОбороты.РасходДоход = ЗНАЧЕНИЕ(Перечисление.бит_РасходДоход.расходование)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * бит_ДвиженияДенежныхСредствОбороты.СуммаОборот КАК СуммаРегл
	|ПОМЕСТИТЬ ДвижениеДС
	|ИЗ
	|	РегистрНакопления.бит_ДвиженияДенежныхСредств.Обороты(&НачалоПериода, &КонецПериода, День, ) КАК бит_ДвиженияДенежныхСредствОбороты
	|ГДЕ
	|	бит_ДвиженияДенежныхСредствОбороты.БанковскийСчет В (&МассивБанковскихСчетов, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОбОстатках.БанковскийСчет КАК БанковскийСчет,
	|	МАКСИМУМ(СведенияОбОстатках.Период) КАК Период,
	|	ТаблицаДат.Период КАК СеткаПериод,
	|	СведенияОбОстатках.Валюта КАК Валюта,
	|	СведенияОбОстатках.Организация КАК Организация
	|ПОМЕСТИТЬ ОстаткиПоДням
	|ИЗ
	|	ТаблицаДат КАК ТаблицаДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОбОстатках КАК СведенияОбОстатках
	|		ПО ТаблицаДат.Период >= СведенияОбОстатках.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбОстатках.БанковскийСчет,
	|	ТаблицаДат.Период,
	|	СведенияОбОстатках.Валюта,
	|	СведенияОбОстатках.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СеткаПериод,
	|	Валюта,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПоДням.СеткаПериод КАК Период,
	|	ОстаткиПоДням.БанковскийСчет КАК БанковскийСчет,
	|	ОстаткиПоДням.Организация КАК Организация,
	|	ОстаткиПоДням.Валюта КАК Валюта,
	|	ОстаткиПоДням.Период КАК ПериодОстатки,
	|	МАКСИМУМ(ДвижениеДС.Период) КАК ПериодОбороты
	|ПОМЕСТИТЬ ОстаткиИОборотыПоДням
	|ИЗ
	|	ОстаткиПоДням КАК ОстаткиПоДням
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвижениеДС КАК ДвижениеДС
	|		ПО ОстаткиПоДням.БанковскийСчет = ДвижениеДС.БанковскийСчет
	|			И ОстаткиПоДням.Организация = ДвижениеДС.Организация
	|			И ОстаткиПоДням.Валюта = ДвижениеДС.Валюта
	|			И ОстаткиПоДням.СеткаПериод >= ДвижениеДС.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоДням.СеткаПериод,
	|	ОстаткиПоДням.Организация,
	|	ОстаткиПоДням.Валюта,
	|	ОстаткиПоДням.БанковскийСчет,
	|	ОстаткиПоДням.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиИОборотыПоДням.Период КАК Период,
	|	ОстаткиИОборотыПоДням.БанковскийСчет КАК БанковскийСчет,
	|	ОстаткиИОборотыПоДням.Организация КАК Организация,
	|	ОстаткиИОборотыПоДням.Валюта КАК Валюта,
	|	ОстаткиИОборотыПоДням.ПериодОстатки КАК ПериодОстатки,
	|	ВЫБОР
	|		КОГДА ОстаткиИОборотыПоДням.ПериодОстатки > ОстаткиИОборотыПоДням.ПериодОбороты
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ОстаткиИОборотыПоДням.ПериодОбороты
	|	КОНЕЦ КАК ПериодОбороты
	|ПОМЕСТИТЬ ОстаткиИОборотыПоДнямПодготовленные
	|ИЗ
	|	ОстаткиИОборотыПоДням КАК ОстаткиИОборотыПоДням
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация,
	|	Валюта,
	|	ПериодОстатки,
	|	ПериодОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОстаткиИОборотыПоДнямПодготовленные.Период, МНО.СеткаПериод) КАК Период,
	|	ЕСТЬNULL(ОстаткиИОборотыПоДнямПодготовленные.БанковскийСчет, МНО.БанковскийСчет) КАК БанковскийСчет,
	|	ЕСТЬNULL(ОстаткиИОборотыПоДнямПодготовленные.Организация, МНО.Организация) КАК Организация,
	|	ЕСТЬNULL(ОстаткиИОборотыПоДнямПодготовленные.Валюта, МНО.Валюта) КАК Валюта,
	|	ЕСТЬNULL(СведенияОбОстатках.СуммаОстаток, 0) + ЕСТЬNULL(ДвижениеДС.СуммаРегл, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(СведенияОбОстатках.ВалСуммаОстаток, 0) + ЕСТЬNULL(ДвижениеДС.СуммаВал, 0) КАК ВалСуммаОстаток,
	|	ЕСТЬNULL(МНО.СуммаОстаток, 0) КАК СуммаМНО
	|ИЗ
	|	ОстаткиИОборотыПоДнямПодготовленные КАК ОстаткиИОборотыПоДнямПодготовленные
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОбОстатках КАК СведенияОбОстатках
	|		ПО ОстаткиИОборотыПоДнямПодготовленные.ПериодОстатки = СведенияОбОстатках.Период
	|			И ОстаткиИОборотыПоДнямПодготовленные.БанковскийСчет = СведенияОбОстатках.БанковскийСчет
	|			И ОстаткиИОборотыПоДнямПодготовленные.Организация = СведенияОбОстатках.Организация
	|			И ОстаткиИОборотыПоДнямПодготовленные.Валюта = СведенияОбОстатках.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвижениеДС КАК ДвижениеДС
	|		ПО ОстаткиИОборотыПоДнямПодготовленные.ПериодОбороты = ДвижениеДС.Период
	|			И ОстаткиИОборотыПоДнямПодготовленные.БанковскийСчет = ДвижениеДС.БанковскийСчет
	|			И ОстаткиИОборотыПоДнямПодготовленные.Организация = ДвижениеДС.Организация
	|			И ОстаткиИОборотыПоДнямПодготовленные.Валюта = ДвижениеДС.Валюта
	|		ПОЛНОЕ СОЕДИНЕНИЕ МНО КАК МНО
	|		ПО ОстаткиИОборотыПоДнямПодготовленные.Период = МНО.СеткаПериод
	|			И ОстаткиИОборотыПоДнямПодготовленные.Организация = МНО.Организация
	|			И ОстаткиИОборотыПоДнямПодготовленные.Валюта = МНО.Валюта
	|			И ОстаткиИОборотыПоДнямПодготовленные.БанковскийСчет = МНО.БанковскийСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ
	|	СУММА(СуммаОстаток),
	|	СУММА(ВалСуммаОстаток),
	|	СУММА(СуммаМНО)
	|ПО
	|	Организация,
	|	Валюта,
	|	БанковскийСчет,
	|	Период
	|АВТОУПОРЯДОЧИВАНИЕ";

	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

// Процедура рекурсивно обходит дерево полученное компоновщиком и заполняет ДанныеФормыДерево.
// 
&НаСервере
Процедура ОбойтиСтрокиДереваСчетов(СтрокаВерх,КоллекцияЭлементовВерх,ЭлементВерх,ДанныеСчетов,ТекПозиция,ИдТекПозиция)

	Для каждого СтрокаДерева Из СтрокаВерх.Строки Цикл
		
		Если МаксУровеньДеревоСчета < СтрокаДерева.Уровень() Тогда
			МаксУровеньДеревоСчета = СтрокаДерева.Уровень();
		КонецЕсли; 
		
		// Выполним фильтрацию по счетам
		Если ВРег(Объект.РежимОтображенияСчетов) = ВРег("НеПустые") И СтрокаДерева.Уровень() <=2 Тогда
			 Если НЕ ЗначениеЗаполнено(СтрокаДерева.Сумма) Тогда
			 	Продолжить;
			 КонецЕсли; 
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.Организация) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.ВидДанных) И СтрокаДерева.Уровень()=3 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.ДокументПланирования) И СтрокаДерева.Уровень()=4 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаДерева.Уровень() <=4 Тогда
			Если СтрокаДерева.Уровень() = 0 Тогда
				
				НовыйЭлементДерева = ДобавитьСтрокуДереваСчета(КоллекцияЭлементовВерх,СтрокаДерева);				
				
				НовыйЭлементДерева.Измерение = СтрокаДерева.Организация;
				НовыйЭлементДерева.ДоступностьФлажка = Истина;
				НовыйЭлементДерева.ИмяГруппировки = "Организация";
				
			ИначеЕсли СтрокаДерева.Уровень() = 1 Тогда
				
				НовыйЭлементДерева = ДобавитьСтрокуДереваСчета(КоллекцияЭлементовВерх,СтрокаДерева);				
				
				НовыйЭлементДерева.Измерение = СтрокаДерева.ВидДенежныхСредств;
				НовыйЭлементДерева.ДоступностьФлажка = Истина;								
				НовыйЭлементДерева.ИмяГруппировки = "ВидДенежныхСредств";
				
			ИначеЕсли СтрокаДерева.Уровень() = 2 Тогда	
				
				НовыйЭлементДерева = ДобавитьСтрокуДереваСчета(КоллекцияЭлементовВерх,СтрокаДерева);				
				
				НовыйЭлементДерева.Измерение = СтрокаДерева.БанковскийСчет;
				НовыйЭлементДерева.ВалютаДенежныхСредств = СтрокаДерева.ВалютаДенежныхСредств;
				НовыйЭлементДерева.ДоступностьФлажка = ЗначениеЗаполнено(СтрокаДерева.БанковскийСчет);				
				НовыйЭлементДерева.ИмяГруппировки = "БанковскийСчет";
				
				// Заполним остатки по банковским счетам
				Если СтрокаДерева.БанковскийСчет = "Касса" Тогда
				     Ключ = СтрокаДерева.Организация.Код+"/"+СтрокаДерева.ВалютаДенежныхСредств.Код;
				Иначе	
				     Ключ = СтрокаДерева.БанковскийСчет;
				КонецЕсли;
				Периоды = ДанныеСчетов[Ключ];
				
				Если ТипЗнч(Периоды) = Тип("Структура") Тогда
					Для каждого КиЗ Из Периоды Цикл
						ТекИмя  = КиЗ.Ключ;
						СтрСумм = КиЗ.Значение;
						НовыйЭлементДерева[ТекИмя] = НовыйЭлементДерева[ТекИмя]+ СтрСумм.СуммаОстаток;
					КонецЦикла; 
				КонецЕсли;// Заполним остатки по банковским счетам 
								
			ИначеЕсли СтрокаДерева.Уровень() = 3 Тогда
				
				Если НЕ Объект.ВыводитьНеснижаемыеОстатки
					И (СтрокаДерева.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.МНО
					ИЛИ СтрокаДерева.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.ДоступныеСредства) Тогда
				
					Продолжить;
				КонецЕсли; 
				
				НовыйЭлементДерева = ДобавитьСтрокуДереваСчета(КоллекцияЭлементовВерх,СтрокаДерева);				
				
				НовыйЭлементДерева.Измерение             = СтрокаДерева.ВидДанных;
				НовыйЭлементДерева.ВалютаДенежныхСредств = ЭлементВерх.ВалютаДенежныхСредств;
				НовыйЭлементДерева.ИмяГруппировки = "ВидДанных";
				
				// Заполнить минимальные неснижаемые остатки.
				Если НовыйЭлементДерева.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.МНО Тогда
					
					Если СтрокаДерева.БанковскийСчет = "Касса" Тогда
					     Ключ = СтрокаДерева.Организация.Код+"/"+СтрокаДерева.ВалютаДенежныхСредств.Код;
					Иначе	
					     Ключ = СтрокаДерева.БанковскийСчет;
					КонецЕсли;
					Периоды = ДанныеСчетов[Ключ];
					
					Если ТипЗнч(Периоды) = Тип("Структура") Тогда
						Для каждого КиЗ Из Периоды Цикл
							
							ТекИмя  = КиЗ.Ключ;
							СтрСумм = КиЗ.Значение;
							НовыйЭлементДерева[ТекИмя] = НовыйЭлементДерева[ТекИмя]+ СтрСумм.СуммаМНО;
							
						КонецЦикла; 
					КонецЕсли; 
					
				ИначеЕсли НовыйЭлементДерева.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход 
					      ИЛИ НовыйЭлементДерева.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Поступление Тогда
					
					СтрокаБанковскийСчет = НовыйЭлементДерева.ПолучитьРодителя();
					СтрокаДенежныйПоток = НайтиСтрокуВида(СтрокаБанковскийСчет,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.ДенежныйПоток);
					Если НЕ СтрокаДенежныйПоток = Неопределено Тогда
					
						 Знак = ?(НовыйЭлементДерева.ВидДанных= Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход,-1,1);
						 СтрокаДенежныйПоток.Сумма = СтрокаДенежныйПоток.Сумма+Знак*НовыйЭлементДерева.Сумма;
						 СтрокаДенежныйПоток.СуммаФакт = СтрокаДенежныйПоток.СуммаФакт+Знак*НовыйЭлементДерева.СуммаФакт;
						 СтрокаДенежныйПоток.Отклонение = СтрокаДенежныйПоток.Отклонение+Знак*НовыйЭлементДерева.Отклонение;
					
					КонецЕсли; 
					
					Если НовыйЭлементДерева.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход Тогда
						
						НовыйЭлементДерева.ДоступностьФлажка = ЗначениеЗаполнено(НовыйЭлементДерева.БанковскийСчет);
						// Добавим группу Прогноз
						Если Объект.ВыводитьПрогнозыПлатежей Тогда
							КоллекцияЭлементовРасход = НовыйЭлементДерева.ПолучитьЭлементы(); 
							СтрокаПрогноз = ДобавитьГруппуПрогноз(КоллекцияЭлементовРасход, СтрокаДерева);
						КонецЕсли;
					КонецЕсли; 
					
				ИначеЕсли НовыйЭлементДерева.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.ДоступныеСредства Тогда 	
					
					Если СтрокаДерева.БанковскийСчет = "Касса" Тогда
					     Ключ = СтрокаДерева.Организация.Код+"/"+СтрокаДерева.ВалютаДенежныхСредств.Код;
					Иначе	
					     Ключ = СтрокаДерева.БанковскийСчет;
					КонецЕсли;
					Периоды = ДанныеСчетов[Ключ];
					
					Если ТипЗнч(Периоды) = Тип("Структура") Тогда
						
						Для каждого КиЗ Из Периоды Цикл
							
							ТекИмя  = КиЗ.Ключ;
							СтрСумм = КиЗ.Значение;
							НовыйЭлементДерева[ТекИмя] = НовыйЭлементДерева[ТекИмя]+ СтрСумм.ДоступныеСредства;
							
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли;// Заполнить минимальные неснижаемые остатки.
			ИначеЕсли СтрокаДерева.Уровень() = 4 Тогда
				
				// Создадим строку с которой будут оплаченные заявки.
				Если СтрокаДерева.Оплачено = Истина Тогда
				
					 СтрокаОплачено = НайтиСтрокуВида(ЭлементВерх,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Оплата);
					 
					 Если СтрокаОплачено = Неопределено Тогда
					 
					 	СтрокаОплачено = ДобавитьСтрокуДереваСчета(КоллекцияЭлементовВерх,СтрокаДерева);
						СтрокаОплачено.Измерение        = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Оплата;
						СтрокаОплачено.ВидДанных        = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Оплата;
						СтрокаОплачено.ВалютаДенежныхСредств = СтрокаДерева.ВалютаДенежныхСредств;
						СтрокаОплачено.ПлатежнаяПозиция 	 = Документы.бит_ПлатежнаяПозиция.ПустаяСсылка();
						СтрокаОплачено.Сумма     = 0;
						СтрокаОплачено.СуммаФакт = 0;
					 
					КонецЕсли; 
					
					КоллекцияОплачено = СтрокаОплачено.ПолучитьЭлементы();
					
					НовыйЭлементДерева = ДобавитьСтрокуДереваСчета(КоллекцияОплачено,СтрокаДерева);
					СтрокаОплачено.Сумма     = СтрокаОплачено.Сумма+СтрокаДерева.Сумма;
					СтрокаОплачено.СуммаФакт = СтрокаОплачено.СуммаФакт+СтрокаДерева.СуммаФакт;
					
				// Прогнозы оформим отдельной веткой в расходе.
				ИначеЕсли СтрокаДерева.ЭтоПрогноз = Истина Тогда
					
					СтрокаПрогноз = НайтиСтрокуВида(ЭлементВерх,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз);
					
					Если СтрокаПрогноз = Неопределено Тогда
						// Добавим группу Прогноз
						СтрокаПрогноз = ДобавитьГруппуПрогноз(КоллекцияЭлементовВерх, СтрокаДерева);
					КонецЕсли;
					
					КоллекцияПрогноз = СтрокаПрогноз.ПолучитьЭлементы();
					
					НовыйЭлементДерева = ДобавитьСтрокуДереваСчета(КоллекцияПрогноз,СтрокаДерева);
					НовыйЭлементДерева.Сумма = СтрокаДерева.СуммаПланПрогноз;
					НовыйЭлементДерева.СуммаФакт = СтрокаДерева.СуммаФактПрогноз;
					
					СтрокаПрогноз.Сумма     = СтрокаПрогноз.Сумма+СтрокаДерева.СуммаПланПрогноз;
					СтрокаПрогноз.СуммаФакт = СтрокаПрогноз.СуммаФакт+СтрокаДерева.СуммаФактПрогноз;
					
				Иначе	
					
				    НовыйЭлементДерева = ДобавитьСтрокуДереваСчета(КоллекцияЭлементовВерх,СтрокаДерева);					
					
				КонецЕсли; 
				
				Если Объект.СистемноеПредставлениеДокументовПланирования Тогда
					НовыйЭлементДерева.Измерение = СтрокаДерева.ДокументПланирования;
				Иначе
					НовыйЭлементДерева.Измерение = ПредставлениеДокументаПланирования(СтрокаДерева);
				КонецЕсли; 
				
				НовыйЭлементДерева.ВалютаДенежныхСредств = СтрокаДерева.ВалютаДенежныхСредств;
				НовыйЭлементДерева.ДатаПлатежаКрайняя    = СтрокаДерева.ПлатежнаяПозицияДатаПлатежаКрайняя;
				НовыйЭлементДерева.Оплачено              = СтрокаДерева.Оплачено;
				НовыйЭлементДерева.ЕстьПлатежныйДокумент = СтрокаДерева.ЕстьПлатежныйДокумент;
				НовыйЭлементДерева.ЕстьПлатежноеПоручение = СтрокаДерева.ЕстьПлатежноеПоручение;
				НовыйЭлементДерева.ЭтоПрогноз            		  = СтрокаДерева.ЭтоПрогноз;
				НовыйЭлементДерева.ЭтоОстатокПоНеоплаченнойЗаявке = СтрокаДерева.ЭтоОстатокПоНеоплаченнойЗаявке;
				НовыйЭлементДерева.Контрагент					  = СтрокаДерева.Контрагент;
				// Картинка по умолчанию.
				НовыйЭлементДерева.Картинка = БиблиотекаКартинок.УстановитьВремя;
				НовыйЭлементДерева.ПлатежныйДокумент = СтрокаДерева.ПлатежныйДокумент;
				
				Если СтрокаДерева.ЕстьРеестр = Истина Тогда
					НовыйЭлементДерева.Картинка = БиблиотекаКартинок.ТабличныйДокументТолькоПросмотр;
				КонецЕсли; 
				
				Если НовыйЭлементДерева.ЕстьПлатежныйДокумент = Истина
					ИЛИ НовыйЭлементДерева.ЕстьПлатежноеПоручение = Истина Тогда
				
					НовыйЭлементДерева.Картинка = БиблиотекаКартинок.ДокументОбъект;
					
					Если НовыйЭлементДерева.Оплачено Тогда
						НовыйЭлементДерева.Картинка = БиблиотекаКартинок.бит_Монеты;
					КонецЕсли; 
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(НовыйЭлементДерева.ДатаПлатежаКрайняя) Тогда
				
					НовыйЭлементДерева.ИмяДатаПлатежаКрайняя = СформироватьИмяКолонкиПериод("П",НовыйЭлементДерева.ДатаПлатежаКрайняя);
				
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(НовыйЭлементДерева.ПлатежнаяПозиция)
					 И (ЗначениеЗаполнено(НовыйЭлементДерева.БанковскийСчет) 
					 ИЛИ НовыйЭлементДерева.ВидДенежныхСредств = Перечисления.бит_ВидыДенежныхСредств.Наличные)
					 И НЕ НовыйЭлементДерева.Оплачено 
					 И НЕ НовыйЭлементДерева.ЕстьПлатежныйДокумент
					 И НЕ НовыйЭлементДерева.ЕстьПлатежноеПоручение
					 И (СтрокаДерева.СтатусЗаявки = Справочники.бит_СтатусыОбъектов.Заявка_Утверждена
					 ИЛИ (ЗначениеЗаполнено(СтрокаДерева.СостояниеОплаты) 
					 И СтрокаДерева.СостояниеОплаты = Справочники.бит_СтатусыОбъектов.ЧастичнаяОплата)) Тогда
					
					НовыйЭлементДерева.ДоступностьФлажка = Истина;
					 
				КонецЕсли; 
				
				НовыйЭлементДерева.ИмяГруппировки = "ДокументПланирования";
			КонецЕсли; 
			
			// Проверим не совпадает ли текущий элемент дерева с позицией до обновления.
			Если ИдТекПозиция = 0 
				 И НовыйЭлементДерева.Измерение = ТекПозиция.Измерение 
				 И НовыйЭлементДерева.ПлатежнаяПозиция = ТекПозиция.ПлатежнаяПозиция Тогда
			
				 ИдТекПозиция = НовыйЭлементДерева.ПолучитьИдентификатор();
			
			КонецЕсли; 
			
			КоллекцияЭлементов = НовыйЭлементДерева.ПолучитьЭлементы();
			
			ОбойтиСтрокиДереваСчетов(СтрокаДерева,КоллекцияЭлементов,НовыйЭлементДерева,ДанныеСчетов,ТекПозиция,ИдТекПозиция);
			
			
		Иначе
		   
			Если СтрокаДерева.Уровень() = 5 Тогда
				
				ИмяКолонки = СформироватьИмяКолонкиПериод("П",СтрокаДерева.Период);
				Если НЕ ЭлементВерх = Неопределено 
					И ЗначениеЗаполнено(СтрокаДерева.Сумма) 
					И ЗначениеЗаполнено(СтрокаДерева.Период)
					И НЕ (ТипЗнч(СтрокаДерева.ДокументПланирования) = Тип("ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств")
					И СтрокаДерева.ЕстьПлатежныйДокумент
					И СтрокаДерева.ЕстьПлатежноеПоручение
					И СтрокаДерева.ПлатежныйДокументПроведен)
					Тогда 
					
					ВыполнитьИерархическиеРасчеты(ЭлементВерх,ИмяКолонки,СтрокаДерева.Отклонение);
					
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // ОбойтиСтрокиДереваСчетов()

// Процедура добавляет в ДанныеФормыДерево новый элемент.
// 
// Параметры:
//  КоллекцияЭлементовВерх  - ДанныеФормыКоллекцияЭлементовДерева.
//  СтрокаДерева            - СтрокаДереваЗначений.
// 
&НаСервере
Функция ДобавитьСтрокуДереваСчета(КоллекцияЭлементовВерх,СтрокаДерева)
	
	НовыйЭлементДерева = КоллекцияЭлементовВерх.Добавить();
	НовыйЭлементДерева.ИмяДатаПлатежаКрайняя = "П_99991231";
	
	НовыйЭлементДерева.Организация           = СтрокаДерева.Организация;
	НовыйЭлементДерева.ВидДенежныхСредств    = СтрокаДерева.ВидДенежныхСредств;
	НовыйЭлементДерева.БанковскийСчет        = СтрокаДерева.БанковскийСчет;
	НовыйЭлементДерева.ДокументПланирования  = СтрокаДерева.ДокументПланирования;
	НовыйЭлементДерева.ПлатежнаяПозиция      = СтрокаДерева.ПлатежнаяПозиция;
	НовыйЭлементДерева.ВидДанных             = СтрокаДерева.ВидДанных;
	
	Если СтрокаДерева.Уровень()>2 Тогда
		
		НовыйЭлементДерева.Сумма                 = СтрокаДерева.Сумма;
		НовыйЭлементДерева.СуммаФакт             = СтрокаДерева.СуммаФакт;
		НовыйЭлементДерева.Отклонение            = СтрокаДерева.Отклонение;
		
	КонецЕсли; 
	
	Возврат НовыйЭлементДерева;
	
КонецФункции // ЗаполнитьСтрокуДерева()

&НаСервереБезКонтекста
Функция ПредставлениеДокументаПланирования(ТекущаяСтрока)

	Дата   = Формат(ТекущаяСтрока.ДокументПланированияДата, "ДФ=dd.MM.yyyy");	
	Номер  = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ТекущаяСтрока.ДокументПланированияНомер, Истина, Ложь);	
	Шаблон = Нстр("ru = '%1 № %2 от %3'");
	
	ПредставлениеСсылки = "";
	
	Если ТипЗнч(ТекущаяСтрока.ДокументПланирования) = Тип("ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств") Тогда
		
		ПредставлениеСсылки = "Поступление";
		
	ИначеЕсли ТипЗнч(ТекущаяСтрока.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая")
		  ИЛИ ТипЗнч(ТекущаяСтрока.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
		
		Если ТекущаяСтрока.ЭтоПрогноз = Истина Тогда
			ПредставлениеСсылки = "Прогноз";
		Иначе
			ПредставлениеСсылки = "Заявка";
		КонецЕсли;
	КонецЕсли; 
	
	Возврат СтрШаблон(Шаблон, ПредставлениеСсылки, Номер, Дата);
	
КонецФункции
 
// Процедура добавляет в данные формы дерево новую группировку Прогноз.
// 
// Параметры:
//  КоллекцияЭлементовРасход  - ДанныеФормыКоллекцияЭлементовДерева.
//  СтрокаДерева            - СтрокаДереваЗначений.
// 
&НаСервере
Функция ДобавитьГруппуПрогноз(КоллекцияЭлементовРасход, СтрокаДерева)
	
	СтрокаПрогноз = ДобавитьСтрокуДереваСчета(КоллекцияЭлементовРасход,СтрокаДерева);
	
	// Группа будет располагаться первой в своей ветке.
	ПозицияСтроки = КоллекцияЭлементовРасход.Индекс(СтрокаПрогноз);
	Если НЕ ПозицияСтроки = -1
		И НЕ ПозицияСтроки = 0 Тогда
		КоллекцияЭлементовРасход.Сдвинуть(ПозицияСтроки, -ПозицияСтроки);
	КонецЕсли;
	
	СтрокаПрогноз.Измерение        = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз;
	СтрокаПрогноз.ВидДанных        = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз;
	СтрокаПрогноз.ВалютаДенежныхСредств = СтрокаДерева.ВалютаДенежныхСредств;
	СтрокаПрогноз.ДокументПланирования  = Документы.бит_ЗаявкаНаРасходованиеСредствОбщая.ПустаяСсылка();
	СтрокаПрогноз.Сумма     = 0;
	СтрокаПрогноз.СуммаФакт = 0;
	
	Возврат СтрокаПрогноз;
	
КонецФункции

// Процедура выполняет расчеты в ДеревоСчета при заполнении.
// 
&НаСервере
Процедура ВыполнитьИерархическиеРасчеты(СтрокаДокумент,ИмяКолонки,Сумма)
	
	СтрокаДокумент[ИмяКолонки] = Сумма;
	
	СтрокаВидДанных = СтрокаДокумент.ПолучитьРодителя();
	
	Если НЕ СтрокаВидДанных = Неопределено Тогда
		
		// Приращение к виду данных (приходу или расходу).
		СтрокаВидДанных[ИмяКолонки] = СтрокаВидДанных[ИмяКолонки]+Сумма;
		
		// В зависимости от вида данных определим знак.
		Если СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход
			ИЛИ СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Оплата
			ИЛИ СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз Тогда
			Знак = -1;
		ИначеЕсли СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Поступление Тогда	
			Знак = +1;
		Иначе
			Знак = 0;
		КонецЕсли; 
		
		Если НЕ Знак = 0 Тогда
			
			Если СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Оплата Тогда
				СтрокаРасход = СтрокаВидДанных.ПолучитьРодителя();
				СтрокаРасход[ИмяКолонки] = СтрокаРасход[ИмяКолонки] + Сумма;
				СтрокаБанкСчет = СтрокаРасход.ПолучитьРодителя();
			ИначеЕсли СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз Тогда
				СтрокаРасход = СтрокаВидДанных.ПолучитьРодителя();
				СтрокаРасход[ИмяКолонки] = СтрокаРасход[ИмяКолонки] + Сумма;
				СтрокаБанкСчет = СтрокаРасход.ПолучитьРодителя();
			Иначе	
			   СтрокаБанкСчет = СтрокаВидДанных.ПолучитьРодителя();
			КонецЕсли; 
			
			Если НЕ СтрокаБанкСчет = Неопределено Тогда
				
				// Добавим приращение к денежному потоку.
				ВидыДанных = СтрокаБанкСчет.ПолучитьЭлементы();
				Для каждого СтрокаВидДанных  Из ВидыДанных Цикл
					Если СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.ДенежныйПоток Тогда
						СтрокаВидДанных[ИмяКолонки] = СтрокаВидДанных[ИмяКолонки]+Знак*Сумма;
					КонецЕсли; 
				КонецЦикла; // По строкам виды данных.
				
				ИмяОперативныйДень = СформироватьИмяКолонкиПериод("П",ТекущийДень);
				
				// Нарастающий итог денежного потока.
				Если (ЗначениеЗаполнено(СтрокаВидДанных.БанковскийСчет)
					ИЛИ СтрокаВидДанных.ВидДенежныхСредств = Перечисления.бит_ВидыДенежныхСредств.Наличные) 
					И ИмяКолонки>=ИмяОперативныйДень Тогда
					
					Для каждого Элемент Из КолонкиПериодов Цикл
						
						ТекИмя  = Элемент.Представление;
						Если ТекИмя > ИмяКолонки  Тогда
							// НЕ делаем повторного снижения остатка, оплаченной на текущий день, заявки.
							Если НЕ СтрокаДокумент.Оплачено Тогда
								СтрокаБанкСчет[ТекИмя] = СтрокаБанкСчет[ТекИмя]+Знак*СтрокаДокумент.Отклонение;
							КонецЕсли; 
						КонецЕсли; 
						
					КонецЦикла; 
				КонецЕсли; 
				
				Если Объект.ВыводитьНеснижаемыеОстатки Тогда
					
					Для каждого СтрокаДанных Из ВидыДанных Цикл
						
						Если СтрокаДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.ДоступныеСредства Тогда
							СтрокаДоступныеСредства = СтрокаДанных;
						ИначеЕсли СтрокаДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.МНО Тогда
							СтрокаНеснижаемыйОстаток = СтрокаДанных;
						КонецЕсли; 
					КонецЦикла;
					
					Если СтрокаДоступныеСредства <> Неопределено
						И СтрокаНеснижаемыйОстаток <> Неопределено Тогда
					
						Для каждого Элемент Из КолонкиПериодов Цикл
							ТекИмя  = Элемент.Представление;
							СтрокаДоступныеСредства[ТекИмя] = СтрокаБанкСчет[ТекИмя]-СтрокаНеснижаемыйОстаток[ТекИмя];
						КонецЦикла;
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли; // Нашли строку банковский счет.
		КонецЕсли;  // Условие на Знак.		
	КонецЕсли;   // Нашли вид данных. 

КонецПроцедуры // ВыполнитьИерархическиеРасчеты()

// Процедура выполняет действия, необходимые после изменения настроек.
// 
// Параметры:
//  СтрПар - Структура
// 
&НаСервере
Процедура ОбработкаИзмененияНастроек(СтрПар)

	ПрименитьНастройкиОбъекта(СтрПар);
	
	Если СтрПар.ИзмененЦвет Тогда
		ОбновитьДеревоСчетов();
	КонецЕсли; 

	Если СтрПар.ИзмененРазмер Тогда
		Элементы.ГруппаТекущийДокумент.Высота = Объект.ВысотаПанелиТекущийДокумент;
	КонецЕсли; 

	Если ПанельАналитическаяВидимость Тогда
		ОбновитьАналитическуюПанель();
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаИзмененияНастроек()

&НаСервере
Процедура ПрименитьНастройкиОбъекта(Настройки)
	
	НачалоПериода 	= Объект.НачалоПериода;
	КонецПериода  	= Объект.КонецПериода;
	ОперативныйДень = Объект.ОперативныйДень;
	
	ОбрОбъект = ДанныеФормыВЗначение(Настройки.ТекущийОбъект,Тип("ОбработкаОбъект.бит_РабочееМестоКазначея"));
	ЗначениеВДанныеФормы(ОбрОбъект,Объект);
	
    Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(Настройки.ТекущийОбъект.Компоновщик.ПользовательскиеНастройки);	
	Объект.КомпоновщикАнализ.ЗагрузитьПользовательскиеНастройки(Настройки.ТекущийОбъект.КомпоновщикАнализ.ПользовательскиеНастройки);
	
	Если НачалоПериода <> Объект.НачалоПериода ИЛИ КонецПериода <> Объект.КонецПериода Тогда
		ИзменитьДоступностьПриИзмененииНастроек(Истина, ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры // ПрименитьОбщиеНастройки()

&НаСервере
Функция ИзменяемыйДокументЗаблокирован(ОбъектБлокировки)

	Отказ 		 = Ложь;
	Заблокирован = Истина;
	
	Попытка
		ОбъектБлокировки.Заблокировать();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Невозможно заблокировать документ ""%1"". Операция не выполнена.'"), Строка(ОбъектБлокировки));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецПопытки;
	
	Если Отказ Тогда
		Заблокирован = Ложь;
	КонецЕсли; 
	
	Возврат Заблокирован;

КонецФункции // ИзменяемыйДокументЗаблокирован()
 
&НаСервере
Процедура ПрименитьИзмененияРеквизитовДокумента(НовыеПараметры, АктивизироватьСтроку)
	
	ИзмененПериод 		  = НовыеПараметры.ПричинаИзменения.Период;
	ИзмененБанковскийСчет = НовыеПараметры.ПричинаИзменения.БанковскийСчет;
	
	Если НовыеПараметры.ИскатьСтроки Тогда
		ОтборСтрок = НовыйОтборСтрокДереваСчетов("ДокументПланирования", НовыеПараметры.ИмяПоляДокумент, 
						НовыеПараметры.ДокументПланирования);
		Идентификатор = -1;
		НайтиСтрокуДереваСчетов(ЭтотОбъект, ДеревоСчета.ПолучитьЭлементы(), ОтборСтрок, Идентификатор);
		ТекущаяСтрока = ДеревоСчета.НайтиПоИдентификатору(Идентификатор);
	Иначе
		ТекущаяСтрока = ДеревоСчета.НайтиПоИдентификатору(НовыеПараметры.ТекущаяСтрока);
	КонецЕсли; 
	
	Записывать = Истина;
	
	Если ТекущаяСтрока.ЭтоПрогноз Тогда
		
		ДокОбъект = ТекущаяСтрока.ДокументПланирования.ПолучитьОбъект();
		Если ИзменяемыйДокументЗаблокирован(ДокОбъект) Тогда		
			Если ИзмененПериод Тогда
				ДокОбъект.ДатаРасхода = НовыеПараметры.Значение;
			КонецЕсли; 
			
			Если ИзмененБанковскийСчет Тогда
				ДокОбъект.БанковскийСчетОрганизации = НовыеПараметры.Значение;
			КонецЕсли;
		Иначе
			Записывать = Ложь;
		КонецЕсли; 
	Иначе
		ДокОбъект = ТекущаяСтрока.ПлатежнаяПозиция.ПолучитьОбъект();
		Если ИзменяемыйДокументЗаблокирован(ДокОбъект) Тогда
			Если ИзмененПериод Тогда
				ДокОбъект.ДатаРасхода = НовыеПараметры.Значение;
				
				Если СинхронизацияДатыПлатежа И ЗначениеЗаполнено(ДокОбъект.ДатаПлатежаКрайняя) Тогда 
					ДокОбъект.ДатаПлатежаКрайняя = ДокОбъект.ДатаРасхода;
				КонецЕсли;
			КонецЕсли; 
			
			Если ИзмененБанковскийСчет Тогда
				ДокОбъект.БанковскийСчетОрганизация = НовыеПараметры.Значение;
			КонецЕсли;
		Иначе
			Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДействиеВыполнено = Ложь;
	Если Записывать Тогда
		Попытка		
			Если ДокОбъект.Проведен Тогда
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Запись;			
			КонецЕсли; 
			ДокОбъект.Записать(РежимЗаписи);
			ДействиеВыполнено = Истина;
		Исключение
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Ошибка при записи документа %1 по причине %2'"),
								Строка(ДокОбъект),КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокОбъект); 
		КонецПопытки; 
		
		ДокОбъект.Разблокировать();
	КонецЕсли; 	
	
	Если ДействиеВыполнено Тогда
		
		Если ИзмененПериод Тогда
			
			Сумма = ТекущаяСтрока[НовыеПараметры.ПолеОбъектаСтарыйПериод];
			
			// Убираем сумму из верхних группировок исходной строки.
			ИзменитьВерхниеСтроки(ТекущаяСтрока, НовыеПараметры.ПолеОбъектаСтарыйПериод, 
					Сумма, -1, ТекущаяСтрока.ЭтоПрогноз);
			
			// Добавляем сумму к группировкам с учетом сдвига периода.
			ИзменитьВерхниеСтроки(ТекущаяСтрока, НовыеПараметры.ПолеОбъектаНовыйПериод, 
					Сумма,1,ТекущаяСтрока.ЭтоПрогноз);
			
		КонецЕсли; // Изменен период

		Если ИзмененБанковскийСчет Тогда
			
			ИзменитьСтрокиДерева = Истина;
			НайденаНоваяСтрока 	 = Ложь;
			
			Если НовыеПараметры.НоваяСтрока = -1 Тогда
				// На момент заполнения параметров р/счета еще не было в дереве, но,
				// возможно, дерево обновили на первой итерации. 
				Если НовыеПараметры.ИскатьСтроки Тогда
					ОтборСтрок = НовыйОтборСтрокДереваСчетов("БанковскийСчет", "БанковскийСчет", НовыеПараметры.Значение);
					НайтиСтрокуДереваСчетов(ЭтотОбъект, ДеревоСчета.ПолучитьЭлементы(), ОтборСтрок, НовыеПараметры.НоваяСтрока);
					Если НовыеПараметры.НоваяСтрока = -1 Тогда
						ОбновитьДеревоСчетов();
						ИзменитьСтрокиДерева = Ложь;
					Иначе
						НайденаНоваяСтрока = Истина;
					КонецЕсли;
				Иначе
					ОбновитьДеревоСчетов();
					ИзменитьСтрокиДерева = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ИзменитьСтрокиДерева Тогда
				Если НовыеПараметры.ИскатьСтроки И НЕ НайденаНоваяСтрока Тогда
					ОтборСтрок = НовыйОтборСтрокДереваСчетов("БанковскийСчет", "БанковскийСчет", НовыеПараметры.Значение);
					Идентификатор = -1;
					НайтиСтрокуДереваСчетов(ЭтотОбъект, ДеревоСчета.ПолучитьЭлементы(), ОтборСтрок, Идентификатор);
					НоваяСтрока = ДеревоСчета.НайтиПоИдентификатору(Идентификатор);
				Иначе
					НоваяСтрока =  ДеревоСчета.НайтиПоИдентификатору(НовыеПараметры.НоваяСтрока);
				КонецЕсли; 
				
				Если ТекущаяСтрока.ЭтоПрогноз Тогда
					СтрокаРасход = НайтиСтрокуПрогноз(НоваяСтрока, ТекущаяСтрока);
					ЭтоПрогноз = Истина;
				Иначе
					ЭтоПрогноз = Ложь;	
					СтрокаРасход = НайтиСтрокуРасход(НоваяСтрока);
				КонецЕсли;
				Если НЕ СтрокаРасход = Неопределено Тогда
					
					// Добавляем с группировку расход новую строку и переносим данные.
					РасходКоллекция = СтрокаРасход.ПолучитьЭлементы();
					НоваяСтрокаДокумент = РасходКоллекция.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумент,ТекущаяСтрока);
					Если ТипЗнч(ТекущаяСтрока.БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета")
						И ТекущаяСтрока.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
					
						НоваяСтрокаДокумент.ДоступностьФлажка = Истина;
					КонецЕсли; 
					
					Сумма = ТекущаяСтрока[НовыеПараметры.ПолеОбъектаСтарыйПериод];
					
					// Чтобы не задвоить при последующих пересчетах в дереве.
					НоваяСтрокаДокумент[НовыеПараметры.ПолеОбъектаСтарыйПериод] = 0;
					НоваяСтрокаДокумент.БанковскийСчет = СтрокаРасход.БанковскийСчет;
					
					// Выполняем расчеты в верхних группировках
				    ИзменитьВерхниеСтроки(ТекущаяСтрока,НовыеПараметры.ПолеОбъектаСтарыйПериод, 
						Сумма, -1, ЭтоПрогноз);
					ИзменитьВерхниеСтроки(НоваяСтрокаДокумент,НовыеПараметры.ПолеОбъектаНовыйПериод,
						Сумма, 1, ЭтоПрогноз);
				
					// Удаляем исходную строку
					РодительИсходная  = ТекущаяСтрока.ПолучитьРодителя();
					КоллекцияИсходная = РодительИсходная.ПолучитьЭлементы();
					ИндексИсходная = КоллекцияИсходная.Индекс(ТекущаяСтрока);
					КоллекцияИсходная.Удалить(ИндексИсходная);
					Если АктивизироватьСтроку Тогда
						Элементы.ДеревоСчета.ТекущаяСтрока = НоваяСтрокаДокумент.ПолучитьИдентификатор();
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли; 			
		КонецЕсли;
		
		Если ПанельАналитическаяВидимость Тогда
			ОбновитьАналитическуюПанель();
		КонецЕсли; 
		
	КонецЕсли; // Выполнена запись пл. позиции	

КонецПроцедуры // ПрименитьИзмененияПеретаскивания()

&НаСервере 
// Процедура выполняет пересчеты в верхних строках ДереваСчетов.
// 
// Параметры:
//  СтрокаИсходная  - ДанныеФормыЭлементДерева.
//  ИмяПериод       - Строка.
//  Сум             - Число.
//  Знак            - Число - -1,1.
// добавлено:
// 	ЭтоПрогноз		- Булево. 
// 
Процедура ИзменитьВерхниеСтроки(СтрокаИсходная, ПолеДанных, Сумма, Знак, ЭтоПрогноз = Ложь)
	
	ИмяОперДень = СформироватьИмяКолонкиПериод("П",ТекущийДень);	
	
	ИзменитьЗначение(СтрокаИсходная,ПолеДанных,Сумма,Знак);
	
	СтрокаИсходнаяВидДанных = СтрокаИсходная.ПолучитьРодителя();
	ИзменитьЗначение(СтрокаИсходнаяВидДанных,ПолеДанных,Сумма,Знак);
	
	// , т.е. мы находимся на один уровень ниже чем предполагается
	Если ЭтоПрогноз Тогда
		ИзменитьЗначение(СтрокаИсходнаяВидДанных,"Сумма",Сумма, Знак);
		
		СтрокаРасход = СтрокаИсходнаяВидДанных.ПолучитьРодителя();
		ИзменитьЗначение(СтрокаРасход,ПолеДанных,Сумма,Знак);
		
		СтрокаИсходнаяВидДанных = СтрокаРасход;
	КонецЕсли;
	
	СтрокаИсходнаяБанкСчет      = СтрокаИсходнаяВидДанных.ПолучитьРодителя();
	СтрокаИсходнаяДенежныйПоток = НайтиСтрокуВида(СтрокаИсходнаяБанкСчет,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.ДенежныйПоток);
	ИзменитьЗначение(СтрокаИсходнаяДенежныйПоток,ПолеДанных,Сумма,-Знак);
    ИзменитьЗначение(СтрокаИсходнаяДенежныйПоток,"Сумма",Сумма,-Знак);
	
	СтрокаРасход = НайтиСтрокуВида(СтрокаИсходнаяБанкСчет,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход);
    ИзменитьЗначение(СтрокаРасход,"Сумма",Сумма, Знак);
	
	Для каждого Элемент Из КолонкиПериодов Цикл
		
		ТекИмя = Элемент.Представление;
		
		Если Знак<0 Тогда
		
			флВыполнять = (ПолеДанных>=ИмяОперДень);
			
		Иначе 
			
			флВыполнять = Истина;
		
		КонецЕсли; 
		
		Если ТекИмя > ПолеДанных 
			 И ТекИмя > ИмяОперДень 
			 И ЗначениеЗаполнено(СтрокаИсходнаяБанкСчет.БанковскийСчет) 
			 И флВыполнять Тогда
			
			ИзменитьЗначение(СтрокаИсходнаяБанкСчет,ТекИмя,Сумма,-Знак);
			
		КонецЕсли; 
		
	КонецЦикла; // По периодам
	
КонецПроцедуры // ИзменитьВерхниеСтроки()

&НаСервере 
// Функция выполняет поиск строки "Расход" в дереве счетов в пределах текущего БанковскогоСчета.
// 
// Параметры:
//  ТекущаяСтрока  - ДанныеФормыЭлементДерева.
// 
// Возвращаемое значение:
//   СтрокаРасход   - ДанныеФормыЭлементДерева.
// 
Функция НайтиСтрокуРасход(ТекущаяСтрока)

	СтрокаРасход = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		Если ВРег(ТекущаяСтрока.ИмяГруппировки) = ВРег("БанковскийСчет") Тогда
			
			СтрокаРасход = НайтиСтрокуВида(ТекущаяСтрока,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход);
			
		ИначеЕсли ВРег(ТекущаяСтрока.ИмяГруппировки) = ВРег("ВидДанных") Тогда	
			
			СтрокаБанкСчет = ТекущаяСтрока.ПолучитьРодителя();
			СтрокаРасход = НайтиСтрокуВида(СтрокаБанкСчет,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход);
			
		ИначеЕсли ВРег(ТекущаяСтрока.ИмяГруппировки) = ВРег("ДокументПланирования") Тогда
			
			СтрокаВидДанных = ТекущаяСтрока.ПолучитьРодителя();
			
			Если НЕ СтрокаВидДанных = Неопределено Тогда
				
				Если СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход Тогда
					
					СтрокаРасход = СтрокаВидДанных;
					
				ИначеЕсли СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз Тогда
					СтрокаРасход = СтрокаВидДанных.ПолучитьРодителя();
				
				Иначе
					
					СтрокаБанкСчет = СтрокаВидДанных.ПолучитьРодителя();
					СтрокаРасход = НайтиСтрокуВида(СтрокаБанкСчет,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли;  // Имя группировки
		
	КонецЕсли; // Есть текущая строка 

	Возврат СтрокаРасход;
	
КонецФункции // НайтиСтрокуРасход()

// Функция выполняет поиск строки "Прогноз" в дереве счетов в пределах текущего БанковскогоСчета.
// 
// Параметры:
//  ТекущаяСтрока  - ДанныеФормыЭлементДерева.
// 
// Возвращаемое значение:
//   СтрокаРасход   - ДанныеФормыЭлементДерева.
// 
&НаСервере 
Функция НайтиСтрокуПрогноз(ТекущаяСтрока, ИсходнаяСтрока=Неопределено)

	СтрокаПрогноз = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		Если ВРег(ТекущаяСтрока.ИмяГруппировки) = ВРег("БанковскийСчет") Тогда
			
			СтрокаРасход = НайтиСтрокуВида(ТекущаяСтрока,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход);
			СтрокаПрогноз = НайтиСтрокуВида(СтрокаРасход,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз);
			
		ИначеЕсли ВРег(ТекущаяСтрока.ИмяГруппировки) = ВРег("ВидДанных") Тогда	
			
			СтрокаБанкСчет = ТекущаяСтрока.ПолучитьРодителя();
			
			СтрокаРасход = НайтиСтрокуВида(СтрокаБанкСчет,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход);
			СтрокаПрогноз = НайтиСтрокуВида(СтрокаРасход,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз);
			
		ИначеЕсли ВРег(ТекущаяСтрока.ИмяГруппировки) = ВРег("ДокументПланирования") Тогда
			
			СтрокаВидДанных = ТекущаяСтрока.ПолучитьРодителя();
			
			Если НЕ СтрокаВидДанных = Неопределено Тогда
				
				Если СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз Тогда
					
					СтрокаПрогноз = СтрокаВидДанных;
					
				ИначеЕсли СтрокаВидДанных.ВидДанных = Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход Тогда
					
					СтрокаРасход = СтрокаВидДанных;
					СтрокаПрогноз = НайтиСтрокуВида(СтрокаРасход,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз);
					
				Иначе
					
					СтрокаБанкСчет = СтрокаВидДанных.ПолучитьРодителя();
					СтрокаРасход = НайтиСтрокуВида(СтрокаБанкСчет,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Расход);
					СтрокаПрогноз = НайтиСтрокуВида(СтрокаРасход,Перечисления.бит_ВидыДанныхРабочееМестоКазначея.Прогноз);
					
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;  // Имя группировки		
	КонецЕсли; // Есть текущая строка 

	Возврат СтрокаПрогноз;
	
КонецФункции

// Функция выполняет поиск строки определенного вида данных в пределах БанковскогоСчета.
// 
// Параметры:
//  СтрокаБанковскийСчет  - ДанныеФормыЭлементДерева.
//  ВидДанных - ПеречислениеСсылка.бит_ВидыДанныхРабочееМестоКазначея.
// 
// Возвращаемое значение:
//   СтрокаВидДанных   - ДанныеФормыЭлементДерева.
// 
&НаСервере
Функция НайтиСтрокуВида(СтрокаБанкСчет,ВидДанных)

	СтрокаВидДанных = Неопределено;
	ВидыДанных = СтрокаБанкСчет.ПолучитьЭлементы();
	Для каждого ТекСтрока  Из ВидыДанных Цикл		
		Если ТекСтрока.ВидДанных = ВидДанных Тогда
		
			СтрокаВидДанных = ТекСтрока;
			Прервать;
			
		КонецЕсли; 		
	КонецЦикла;	

	Возврат СтрокаВидДанных;
	
КонецФункции // НайтиСтрокуДенежныйПоток()

// Процедура изменяет свойство Контейнера с учетом знака.
// 
// Параметры:
//  Контейнер  - Произвольный.
//  ИмяСвойства- Строка.
//  ЗначениеСвойства - Число.
//  Знак             - Число: -1,1.
// 
&НаСервере
Процедура ИзменитьЗначение(Контейнер,ИмяСвойства,ЗначениеСвойства,Знак)
	
	Если НЕ Контейнер = Неопределено Тогда
		
		 Контейнер[ИмяСвойства] = Контейнер[ИмяСвойства]+Знак*ЗначениеСвойства;
		
	КонецЕсли; 	
	
КонецПроцедуры // ИзменитьЗначение()
 
&НаСервере
Процедура ВыполнитьГрупповоеИзменениеРеквизитов(ПараметрыИзменения)
	
	// Поддерживается изменение Даты, БанковскогоСчета.
	Индекс = 0;
	Для каждого ТекущиеПараметры Из ПараметрыИзменения Цикл		
		ПрименитьИзмененияРеквизитовДокумента(ТекущиеПараметры, Индекс = ПараметрыИзменения.ВГраница());	
		Индекс = Индекс + 1;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Функция ОтборСпискаДляПереносаНаСчет(ТекстСообщения, Отказ)

	Организации = Новый Массив(); 
	Валюты 	    = Новый Массив(); 
	ВидыДС 	    = Новый Массив(); 
	
    ВыделенныеСтроки = Элементы.ДеревоСчета.ВыделенныеСтроки;	
	Для каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = ДеревоСчета.НайтиПоИдентификатору(ИдСтроки);
		Если НЕ ТекущаяСтрока = Неопределено И ТекущаяСтрока.ИмяГруппировки = "ДокументПланирования" Тогда
			Если Организации.Найти(ТекущаяСтрока.Организация) = Неопределено Тогда
				Организации.Добавить(ТекущаяСтрока.Организация);
			КонецЕсли;
			Если Валюты.Найти(ТекущаяСтрока.ВалютаДенежныхСредств) = Неопределено Тогда
				Валюты.Добавить(ТекущаяСтрока.ВалютаДенежныхСредств);
			КонецЕсли; 			
			Если ВидыДС.Найти(ТекущаяСтрока.ВидДенежныхСредств) = Неопределено Тогда
				ВидыДС.Добавить(ТекущаяСтрока.ВидДенежныхСредств);
			КонецЕсли; 			
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Диагностика ошибок.
	Если Организации.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru='Изменение организации не поддерживается!'");
		Отказ = Истина;
	КонецЕсли; 
	
	Если Валюты.Количество() > 1 Тогда
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;  
		КонецЕсли; 
		ТекстСообщения = ТекстСообщения + НСтр("ru='Изменение валюты не поддерживается!'"); 
		Отказ = Истина;
	КонецЕсли; 
	
	Если ВидыДС.Количество() > 1 Тогда
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;  
		КонецЕсли; 
		ТекстСообщения = ТекстСообщения + НСтр("ru='Изменение вида денежных средств (нал/безнал) не поддерживается!'"); 
		Отказ = Истина;
	КонецЕсли;
	
	Если Организации.Количество() = 0 ИЛИ Валюты.Количество() = 0 Тогда
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;  
		КонецЕсли; 
		ТекстСообщения = ТекстСообщения + НСтр("ru='Для текущей строки операция не поддерживается!'"); 
		Отказ = Истина;
	КонецЕсли; 
	
	Если НЕ Отказ И ВидыДС.Количество() > 0
	   И ВидыДС[0] = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Наличные") Тогда
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;  
		КонецЕсли; 
		ТекстСообщения = ТекстСообщения + НСтр("ru='Для ""наличных"" операция не поддерживается!'"); 
		Отказ = Истина;
	КонецЕсли;
	
	Отбор = Новый Структура(); 
	Если НЕ Отказ Тогда
		Отбор.Вставить("Владелец", Организации[0]);
		Отбор.Вставить("ВалютаДенежныхСредств", Валюты[0]);
	КонецЕсли; 
	
	Возврат Отбор;
	
КонецФункции // ПолучитьДоступныеСчета()

&НаСервере
Функция ПараметрыСозданияДокументовОплаты(ТекстСообщения)

	НаименованиеЗадания = НСтр("ru = 'Создание документов оплаты.'");
	ВыполняемыйМетод = "бит_Казначейство.СоздатьДокументыОплатыВФоне";
	
	ДеревоДокументов = РеквизитФормыВЗначение("ДеревоСчета");
	НайденныеСтроки  = ДеревоДокументов.Строки.НайтиСтроки(Новый Структура("ДоступностьФлажка, Выполнять", Истина, Истина), Истина);
	
	ПлатежныеПозиции = Новый Массив(); 
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(НайденнаяСтрока.ПлатежнаяПозиция) Тогда
			ПлатежныеПозиции.Добавить(НайденнаяСтрока.ПлатежнаяПозиция);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПлатежныеПозиции.Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Нет отмеченных документов планирования.'");
		Возврат Неопределено;
	КонецЕсли; 
	
	ПараметрыФормирования = бит_Казначейство.НовыеПараметрыФормированияПлатежныхДокументов();
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, Объект);
	ПараметрыФормирования.Вставить("ПлатежныеПозиции", ПлатежныеПозиции);
	ПараметрыФормирования.ДатаОплаты = ?(НЕ ЗначениеЗаполнено(ДатаОплаты), ТекущаяДатаСеанса(), ДатаОплаты);
	
	// Заполнение пераметов длительной операции.
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыФормирования, ПараметрыВыполнения);

КонецФункции

&НаСервере
Функция ПараметрыСозданияРеестраПлатеджей(СводныйРеестр, ТекстСообщения)

	НаименованиеЗадания = НСтр("ru = 'Создание реестра платежей.'");
	ВыполняемыйМетод = "Обработки.бит_РабочееМестоКазначея.СоздатьРеестрыПлатежей";
	
	ДеревоДокументов = РеквизитФормыВЗначение("ДеревоСчета");
	РеестрыОрганизаций = Новый Соответствие(); 
		
	Отказ = Ложь;
	Если СводныйРеестр Тогда
		ШаблонСообщения = Нстр("ru = '%1Нет отмеченных документов планирования.'");
	Иначе	
		ШаблонСообщения = Нстр("ru = 'Для организации ""%1"" нет отмеченных документов планирования.'");
	КонецЕсли;
	
	Фильтр = Новый Структура("ДоступностьФлажка, Выполнять", Истина, Истина);
	НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Фильтр, Истина);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если СводныйРеестр Тогда
			ТекОрганизация = Справочники.Организации.ПустаяСсылка();
		Иначе	
			ТекОрганизация = НайденнаяСтрока.Организация;
		КонецЕсли;  
		
		ПлатежныеПозиции = РеестрыОрганизаций.Получить(ТекОрганизация);
		Если ПлатежныеПозиции = Неопределено Тогда
			ПлатежныеПозиции = Новый Массив();
		КонецЕсли; 

		Если ЗначениеЗаполнено(НайденнаяСтрока.ПлатежнаяПозиция) Тогда
			ДанныеЗаполнения = Обработки.бит_РабочееМестоКазначея.НовыеДанныеЗаполненияРеестраСтрокаТаблицы();
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, НайденнаяСтрока);
			ПлатежныеПозиции.Добавить(ДанныеЗаполнения);
			РеестрыОрганизаций.Вставить(ТекОрганизация, ПлатежныеПозиции);
		КонецЕсли; 
		// Для сообщения, что по органиции нет отмеченных позиций, если отмечен уровень "Организация". 
		// Помещаем даже пустой массив.
		РеестрыОрганизаций.Вставить(ТекОрганизация, ПлатежныеПозиции);
	КонецЦикла; 
	
	Для каждого КлючЗначение Из РеестрыОрганизаций Цикл
		ПлатежныеПозиции = КлючЗначение.Значение;
		Если ПлатежныеПозиции.Количество() <> 0 Тогда
			ДанныеЗаполнения = Обработки.бит_РабочееМестоКазначея.НовыеДанныеЗаполненияРеестра();
			ДанныеЗаполнения.ОперативныйДень = Объект.ОперативныйДень;
			ДанныеЗаполнения.РежимСообщений  = Объект.РежимСообщений;
			ДанныеЗаполнения.Таблица 		 = ПлатежныеПозиции;
			РеестрыОрганизаций.Вставить(КлючЗначение.Ключ, ДанныеЗаполнения);
		Иначе
			Разделитель = ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС);
			ТекстСообщения = ТекстСообщения  + Разделитель + СтрШаблон(ШаблонСообщения, КлючЗначение.Ключ);
			Отказ = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		// Заполнение пераметов длительной операции.
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, РеестрыОрганизаций, ПараметрыВыполнения);
	КонецЕсли; 

КонецФункции

&НаКлиенте
Процедура СоздатьРеестрыПлатежей(СводныйРеестр)

	ТекстСообщения 	   = "";
	ДлительнаяОперация = ПараметрыСозданияРеестраПлатеджей(СводныйРеестр, ТекстСообщения);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Если СводныйРеестр Тогда
			ТекстЗаголовка = Нстр("ru = 'Сформировать сводный реестр.'");
		Иначе	
			ТекстЗаголовка = Нстр("ru = 'Сформировать реестры платежей.'");
		КонецЕсли; 
		ПоказатьПредупреждение(, ТекстСообщения,, ТекстЗаголовка);
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = "Создание документов"; 
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьРеестрыПлатежейЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли; 

КонецПроцедуры 

// Обраборка оповещения процедуры "СоздатьРеестрыПлатежей".
//
// Параметры:
//  Результат				 - Структура - См. общий модуль ДлительныеОпрации.
//  ДополнительныеПараметры	 - Произвольный - произвольные данные, переданные в обработку оповещения. 
//
&НаКлиенте
Процедура СоздатьРеестрыПлатежейЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		// Ничего не делать или обработать ошибку.
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при выполнении: " + Результат.КраткоеПредставлениеОшибки);
	Иначе	
		БылоДокументов = ДобавленоДокументов;
		РезультатСоздания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);	
		Если ТипЗнч(РезультатСоздания) = Тип("Структура") Тогда
			Если РезультатСоздания.Выполнено Тогда
				НовыеДокументы = РезультатСоздания.НовыеДокументы;
				СкопироватьСписокЗначений(СписокРеестры, НовыеДокументы);
				ДобавленоДокументов = СписокДокументовСписания.Количество() + СписокРеестры.Количество();
			КонецЕсли;
			Если РезультатСоздания.Сообщения.Количество() <> 0 Тогда
				ТекстСообщения = Нстр("ru = 'При выполнении произошли ошибки: '");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Для каждого Элемент Из РезультатСоздания.Сообщения Цикл
					Элемент.Сообщить();
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		Если БылоДокументов <> ДобавленоДокументов Тогда
			ОповеститьяОЗавершенииФормированияДокументов();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры 
  
// Процедура очищает дополнительные информационные поля.
// 
&НаСервере
Процедура ОчиститьИнформационныеПоля()
	
	ТекДокументШапка.ПолучитьЭлементы().Очистить();
	ТекДокументТаблица.Очистить();
	ПолеТабДокументаИнформация.Очистить();
	ПолеТабДокументаАнализ.Очистить();
	
КонецПроцедуры // ОчиститьИнформационныеПоля()

// Процедура выполняет действия при активизации строки. 
// Обновляются дополнительные информационные поля.
// 
&НаСервере
Процедура ДействияПриАктивизацииСтроки()

	ОчиститьИнформационныеПоля();
	
	// Выведем информацию о текущем документе
	Если ЗначениеЗаполнено(ТекущийДокумент) И ПанельТекущийДокументВидимость  Тогда
		
		ОбновитьТекущийДокумент();
		
	КонецЕсли; 

	// Выводим отчет в аналитическую панель
	Если ПанельАналитическаяВидимость Тогда
		
		ОбновитьАналитическуюПанель();
	
	КонецЕсли; 
	
КонецПроцедуры // ДействияПриАктивизацииСтроки()

// Процедура обновляет информационные поля, отображающие информацию о текущем документе.
// 
&НаСервере
Процедура ОбновитьТекущийДокумент()
	
	Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.бит_ПлатежнаяПозиция") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",ТекущийДокумент);
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(""Платежная позиция"" КАК СТРОКА(250)) КАК ПредставлениеДокумента,
		|	ПозицияРаспределение.Ссылка.Номер КАК Номер,
		|	ПозицияРаспределение.Ссылка.Дата КАК Дата,
		|	Заявка.ВидОперации,
		|	Заявка.ДокументОснование,
		|	Заявка.Организация,
		|	Заявка.ТипЗаявки,
		|	Заявка.ФормаОплаты,
		|	Заявка.ЭтоКазначейство,
		|	Заявка.НеВключатьВПлатежныйКалендарь,
		|	Заявка.СверхБюджета,
		|	Заявка.СуммаВключаетНДС,
		|	Заявка.ВалютаДокумента,
		|	Заявка.КурсДокумента,
		|	Заявка.Сценарий,
		|	Заявка.СтатьяОборотов,
		|	Заявка.ЦФО,
		|	Заявка.Проект,
		|	Заявка.НоменклатурнаяГруппа,
		|	Заявка.НазначениеПлатежаУпр,
		|	Заявка.Контрагент,
		|	Заявка.ДоговорКонтрагента,
		|	Заявка.Ответственный,
		|	Заявка.Комментарий,
		|	Заявка.Важность,
		|	Заявка.СуммаДокумента,
		|	Заявка.Аналитика_1,
		|	Заявка.Аналитика_2,
		|	Заявка.Аналитика_3,
		|	Заявка.Аналитика_4,
		|	Заявка.Аналитика_5,
		|	Заявка.Аналитика_6,
		|	Заявка.Аналитика_7,
		|	Заявка.Касса,
		|	Заявка.Исполнитель,
		|	ПозицияРаспределение.Ссылка.НазначениеПлатежа КАК НазначениеПлатежа,
		|	ПозицияРаспределение.Ссылка.ДатаРасхода КАК ДатаРасхода,
		|	ПозицияРаспределение.Ссылка.ДатаПлатежаКрайняя КАК ДатаПлатежаКрайняя,
		|	ПозицияРаспределение.Сумма КАК Сумма_Распределение,
		|	ПозицияРаспределение.СтавкаНДС КАК СтавкаНДС_Распределение,
		|	ПозицияРаспределение.НДС КАК НДС_Распределение,
		|	ЗаявкаРаспределение.ЦФО КАК ЦФО_Распределение,
		|	ЗаявкаРаспределение.СтатьяОборотов КАК СтатьяОборотов_Распределение,
		|	ЗаявкаРаспределение.Проект КАК Проект_Распределение,
		|	ЗаявкаРаспределение.ДоговорКонтрагента КАК ДоговорКонтрагента_Распределение,
		|	ЗаявкаРаспределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа_Распределение,
		|	ЗаявкаРаспределение.Аналитика_1 КАК Аналитика_1_Распределение,
		|	ЗаявкаРаспределение.Аналитика_2 КАК Аналитика_2_Распределение,
		|	ЗаявкаРаспределение.Аналитика_3 КАК Аналитика_3_Распределение,
		|	ЗаявкаРаспределение.Аналитика_4 КАК Аналитика_4_Распределение,
		|	ЗаявкаРаспределение.Аналитика_5 КАК Аналитика_5_Распределение,
		|	ЗаявкаРаспределение.Аналитика_6 КАК Аналитика_6_Распределение,
		|	ЗаявкаРаспределение.Аналитика_7 КАК Аналитика_7_Распределение
		|ИЗ
		|	Документ.бит_ПлатежнаяПозиция.Распределение КАК ПозицияРаспределение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК Заявка
		|		ПО ПозицияРаспределение.Ссылка.ДокументОснование = Заявка.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК ЗаявкаРаспределение
		|		ПО ПозицияРаспределение.ИД = ЗаявкаРаспределение.ИД
		|			И ПозицияРаспределение.Ссылка.ДокументОснование = ЗаявкаРаспределение.Ссылка
		|ГДЕ
		|	ПозицияРаспределение.Ссылка = &ТекущийДокумент";
		
	ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",ТекущийДокумент);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(""Планируемое поступление денежных средств"" КАК СТРОКА(250)) КАК ПредставлениеДокумента,
		|	Поступление.Номер,
		|	Поступление.Дата,
		|	Поступление.Организация,
		|	Поступление.ФормаОплаты,
		|	Поступление.ДатаПоступления,
		|	Поступление.ВалютаДокумента,
		|	Поступление.СтавкаНДС,
		|	Поступление.Сумма,
		|	Поступление.НДС,
		|	Поступление.СтатьяОборотов,
		|	Поступление.ЦФО,
		|	Поступление.Проект,
		|	Поступление.НазначениеПлатежа,
		|	Поступление.НазначениеПлатежаУпр,
		|	Поступление.Контрагент,
		|	Поступление.ДоговорКонтрагента,
		|	Поступление.Ответственный,
		|	Поступление.БанковскийСчет,
		|	Поступление.НеВключатьВПлатежныйКалендарь,
		|	Поступление.НоменклатурнаяГруппа,
		|	Поступление.ТипЗаявки,
		|	Поступление.Аналитика_1,
		|	Поступление.Аналитика_2,
		|	Поступление.Аналитика_3,
		|	Поступление.Аналитика_4,
		|	Поступление.Аналитика_5,
		|	Поступление.Аналитика_6,
		|	Поступление.Аналитика_7,
		|	Поступление.Исполнитель,
		|	Поступление.ДатаПлатежаКрайняя,
		|	Поступление.ДокументОснование,
		|	ПоступлениеРаспределение.ЦФО КАК ЦФО_Распределение,
		|	ПоступлениеРаспределение.СтатьяОборотов КАК СтатьяОборотов_Распределение,
		|	ПоступлениеРаспределение.Проект КАК Проект_Распределение,
		|	ПоступлениеРаспределение.Контрагент КАК Контрагент_Распределение,
		|	ПоступлениеРаспределение.ДоговорКонтрагента КАК ДоговорКонтрагента_Распределение,
		|	ПоступлениеРаспределение.БанковскийСчет КАК БанковскийСчет_Распределение,
		|	ПоступлениеРаспределение.НазначениеПлатежа КАК НазначениеПлатежа_Распределение,
		|	ПоступлениеРаспределение.Сумма КАК Сумма_Распределение,
		|	ПоступлениеРаспределение.СтавкаНДС КАК СтавкаНДС_Распределение,
		|	ПоступлениеРаспределение.НДС КАК НДС_Распределение,
		|	ПоступлениеРаспределение.ДатаПоступления КАК ДатаПоступления_Распределение,
		|	ПоступлениеРаспределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа_Распределение,
		|	ПоступлениеРаспределение.Аналитика_1 КАК Аналитика_1_Распределение,
		|	ПоступлениеРаспределение.Аналитика_2 КАК Аналитика_2_Распределение,
		|	ПоступлениеРаспределение.Аналитика_3 КАК Аналитика_3_Распределение,
		|	ПоступлениеРаспределение.Аналитика_4 КАК Аналитика_4_Распределение,
		|	ПоступлениеРаспределение.Аналитика_5 КАК Аналитика_5_Распределение,
		|	ПоступлениеРаспределение.Аналитика_6 КАК Аналитика_6_Распределение,
		|	ПоступлениеРаспределение.Аналитика_7 КАК Аналитика_7_Распределение,
		|	ПоступлениеРаспределение.ДатаПлатежаКрайняя КАК ДатаПлатежаКрайняя_Распределение
		|ИЗ
		|	Документ.бит_ПланируемоеПоступлениеДенежныхСредств.Распределение КАК ПоступлениеРаспределение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПланируемоеПоступлениеДенежныхСредств КАК Поступление
		|		ПО ПоступлениеРаспределение.Ссылка = Поступление.Ссылка
		|ГДЕ
		|	Поступление.Ссылка = &ТекущийДокумент
		|	И ПоступлениеРаспределение.Ссылка = &ТекущийДокумент";
		
	ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",ТекущийДокумент);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(""Прогноз платежа"" КАК СТРОКА(250)) КАК ПредставлениеДокумента,
		|	Прогноз.Номер,
		|	Прогноз.Дата,
		|	Прогноз.Организация,
		|	Прогноз.ТипЗаявки,
		|	Прогноз.ФормаОплаты,
		|	Прогноз.ЭтоКазначейство,
		|	Прогноз.НеВключатьВПлатежныйКалендарь,
		|	Прогноз.ДатаРасхода,
		|	Прогноз.ДатаПлатежаКрайняя,
		|	Прогноз.ВалютаДокумента,
		|	Прогноз.Сумма,
		|	Прогноз.СтавкаНДС,
		|	Прогноз.НДС,
		|	Прогноз.Сценарий,
		|	Прогноз.ЦФО,
		|	Прогноз.СтатьяОборотов,
		|	Прогноз.Проект,
		|	Прогноз.Контрагент,
		|	Прогноз.ДоговорКонтрагента,
		|	Прогноз.БанковскийСчетОрганизации,
		|	Прогноз.НоменклатурнаяГруппа,
		|	Прогноз.Аналитика_1,
		|	Прогноз.Аналитика_2,
		|	Прогноз.Аналитика_3,
		|	Прогноз.Аналитика_4,
		|	Прогноз.Аналитика_5,
		|	Прогноз.Аналитика_6,
		|	Прогноз.Аналитика_7,
		|	Прогноз.НазначениеПлатежа,
		|	Прогноз.НазначениеПлатежаУпр,
		|	Прогноз.Исполнитель,
		|	Прогноз.Ответственный,
		|	ПрогнозРаспределение.ЦФО КАК ЦФО_Распределение,
		|	ПрогнозРаспределение.СтатьяОборотов КАК СтатьяОборотов_Распределение,
		|	ПрогнозРаспределение.Проект КАК Проект_Распределение,
		|	ПрогнозРаспределение.ДоговорКонтрагента КАК ДоговорКонтрагента_Распределение,
		|	ПрогнозРаспределение.Сумма КАК Сумма_Распределение,
		|	ПрогнозРаспределение.СтавкаНДС КАК СтавкаНДС_Распределение,
		|	ПрогнозРаспределение.НДС КАК НДС_Распределение,
		|	ПрогнозРаспределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа_Распределение,
		|	ПрогнозРаспределение.Аналитика_1 КАК Аналитика_1_Распределение,
		|	ПрогнозРаспределение.Аналитика_2 КАК Аналитика_2_Распределение,
		|	ПрогнозРаспределение.Аналитика_3 КАК Аналитика_3_Распределение,
		|	ПрогнозРаспределение.Аналитика_4 КАК Аналитика_4_Распределение,
		|	ПрогнозРаспределение.Аналитика_5 КАК Аналитика_5_Распределение,
		|	ПрогнозРаспределение.Аналитика_6 КАК Аналитика_6_Распределение,
		|	ПрогнозРаспределение.Аналитика_7 КАК Аналитика_7_Распределение
		|ИЗ
		|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая.Распределение КАК ПрогнозРаспределение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредствОбщая КАК Прогноз
		|		ПО ПрогнозРаспределение.Ссылка = Прогноз.Ссылка
		|ГДЕ
		|	Прогноз.Ссылка = &ТекущийДокумент
		|	И ПрогнозРаспределение.Ссылка = &ТекущийДокумент";
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ТабАналитика     = Результат.Выгрузить();
	КолонкиАналитика = ТабАналитика.Колонки;
	
	СтрокаШапка = ТабАналитика[0];
	
	Если НЕ КолонкиАналитика.Найти("ПредставлениеДокумента") = Неопределено Тогда
		
		СтрокаШапка.ПредставлениеДокумента = СтрокаШапка.ПредставлениеДокумента
											+" № "
											+СтрокаШапка.Номер
											+" от "
											+СтрокаШапка.Дата;
		
	КонецЕсли; 
	
	КоличествоСтрок = ТабАналитика.Количество();
	
	КоллекцияВерх = ТекДокументШапка.ПолучитьЭлементы();
	КоллекцияВерх.Очистить();
	
	НастройкаОтображения = ПодготовитьНастройкиОтображенияШапка();
	
	Для каждого КиЗ Из НастройкаОтображения Цикл
		
		Если КоличествоСтрок > 1 И КиЗ.Ключ = "Аналитика" Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		ЭлементВерх = КоллекцияВерх.Добавить();
		ЭлементВерх.ИмяПараметра           = КиЗ.Ключ;
		ЭлементВерх.ПредставлениеПараметра = КиЗ.Ключ;
		ЭлементВерх.Жирный                 = Истина;
		
		КоллекцияГруппа = ЭлементВерх.ПолучитьЭлементы();
		
		Для каждого НастройкаПоля Из КиЗ.Значение Цикл
			
			ТекЗначение   = Неопределено;
			флЕстьКолонка = Ложь;
			Если НЕ ТабАналитика.Колонки.Найти(НастройкаПоля.Имя) = Неопределено Тогда
				
				ТекЗначение = СтрокаШапка[НастройкаПоля.Имя];
				флЕстьКолонка = Истина;
				
			КонецЕсли; 
			
			флВыводить = Истина;
			Если Найти(НастройкаПоля.УсловиеВывода,"Заполнено")>0 Тогда
				
				флВыводить = ЗначениеЗаполнено(ТекЗначение);
				
			КонецЕсли;
			
			Если Найти(НастройкаПоля.УсловиеВывода,"Шапка")>0 Тогда	 
				
				флВыводить = ФлВыводить И ?(КоличествоСтрок<=1,Истина,Ложь);
				
			КонецЕсли; 
			
			Если НЕ НастройкаПоля.ТипОбъекта = Неопределено Тогда
				
				флВыводить = флВыводить И (НастройкаПоля.ТипОбъекта = ТипЗнч(ТекущийДокумент));
				
			КонецЕсли; 
			
			Если флВыводить Тогда
				
				Элемент = КоллекцияГруппа.Добавить();
				Элемент.ИмяПараметра      = НастройкаПоля.Имя;
				Элемент.ПредставлениеПараметра = ?(ПустаяСтрока(НастройкаПоля.Синоним),НастройкаПоля.Имя,НастройкаПоля.Синоним);
				Элемент.ЗначениеПараметра = ТекЗначение;
				
				
			КонецЕсли; 
			
		КонецЦикла; // По настройкам группы
		
	КонецЦикла;// По ключам групп настройки отображения 
	
	// Выведем табличную часть, если это нужно
	Если КоличествоСтрок>1 Тогда
		
		Элементы.ГруппаТекущийДокументТабЧасть.Видимость = Истина;
		
		ТекДокументТаблица.Очистить();
		
		Для каждого СтрокаАналитика Из ТабАналитика Цикл
			
			НоваяСтрока = ТекДокументТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаАналитика);
			НоваяСтрока.Контрагент_Распределение = СтрокаАналитика.Контрагент;
			
		КонецЦикла; 
		
		
	Иначе	
		
		Элементы.ГруппаТекущийДокументТабЧасть.Видимость = Ложь;
		
	КонецЕсли; 
	
	// Выведем дополнительную информацию
	Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.бит_ПлатежнаяПозиция") Тогда
		
		Элементы.ГруппаТекущийДокументИнформация.Видимость = Истина;
		ОбработкаОбъект = Обработки.бит_ИнформационнаяПанель.Создать();
		ОбработкаОбъект.Объект = ТекущийДокумент.ДокументОснование;
		ОбработкаОбъект.ОбновитьИнформацию(ЭтотОбъект.ПолеТабДокументаИнформация);
		
	ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
		
		Элементы.ГруппаТекущийДокументИнформация.Видимость = Истина;
		ОбработкаОбъект = Обработки.бит_ИнформационнаяПанель.Создать();
		ОбработкаОбъект.Объект = ТекущийДокумент;
		ОбработкаОбъект.ОбновитьИнформацию(ЭтотОбъект.ПолеТабДокументаИнформация);
	
	Иначе
		
		Элементы.ГруппаТекущийДокументИнформация.Видимость = Ложь;
		
	КонецЕсли; 
	

КонецПроцедуры // ОбновитьТекущийДокумент()

// Конструктор структуры настройки вывода полей шапки документа.
// 
// Параметры:
//  Имя           - Строка
//  Синоним       - Строка
//  УсловиеВывода - Строка
//  ТипОбъекта    - Неопределено
// 
// Возвращаемое значение:
//   НастройкаПоля   - Структура
//
&НаСервере
Функция НастройкаПоляКонструктор(Имя,Синоним="",УсловиеВывода="",ТипОбъекта = Неопределено)
	
	НастройкаПоля = Новый Структура("Имя,Синоним,УсловиеВывода,ТипОбъекта");
	НастройкаПоля.Имя           = Имя;
	НастройкаПоля.Синоним       = Синоним;
	НастройкаПоля.УсловиеВывода = УсловиеВывода;
	НастройкаПоля.ТипОбъекта    = ТипОбъекта;
	
	Возврат НастройкаПоля;
	
КонецФункции // НастройкаПоляКонструктор()

// Функция формирует структуру, хранящую настройки отображения реквизитов шапки документа.
// 
// Возвращаемое значение:
//   НастройкиОтображения   - Структура.
// 
&НаСервере
Функция ПодготовитьНастройкиОтображенияШапка()

	НастройкаОтображения = Новый Структура;
	
	// Группа аналитика
	НастройкаГруппы = Новый Массив;
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("ЦФО",,"Заполнено/Шапка"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("СтатьяОборотов","Статья оборотов","Заполнено/Шапка"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("Проект",,"Заполнено/Шапка"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("Контрагент",,"Заполнено/Шапка"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("ДоговорКонтрагента","Договор контрагента","Заполнено/Шапка"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("НоменклатурнаяГруппа","Номенклатурная группа","Заполнено/Шапка"));
	
	// Настройки произвольных аналитик
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Для каждого КиЗ Из НастройкиИзмерений Цикл
		
	  ИмяПоля =	КиЗ.Ключ;
	  Синоним = КиЗ.Значение.Синоним;
	  НастройкаГруппы.Добавить(НастройкаПоляКонструктор(ИмяПоля,Синоним,"Заполнено/Шапка"));
	
	КонецЦикла; 
	
	НастройкаОтображения.Вставить("Аналитика",НастройкаГруппы);
	
	// Группа реквизиты
	НастройкаГруппы = Новый Массив;
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("ПредставлениеДокумента","Документ"));		
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("ДокументОснование","Документ основание","Заполнено"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("Важность",,"Заполнено"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("ТипЗаявки","Тип заявки","Заполнено",Тип("ДокументСсылка.бит_ПлатежнаяПозиция")));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("ТипЗаявки","Тип заявки","Заполнено",Тип("ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств")));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("ВидОперации","Вид операции","Заполнено"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("Сценарий",,"Заполнено"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("ДатаРасхода","Дата расхода","Заполнено"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("ДатаПлатежаКрайняя","не позднее","Заполнено"));
	
	
	НастройкаОтображения.Вставить("Реквизиты",НастройкаГруппы);
	

	// Группа прочее
	НастройкаГруппы = Новый Массив;
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("НазначениеПлатежа","Назначение платежа"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("НазначениеПлатежаУпр","Назначение платежа (упр.)"));
	НастройкаГруппы.Добавить(НастройкаПоляКонструктор("СверхБюджета","Сверх бюджета",,Тип("ДокументСсылка.бит_ПлатежнаяПозиция")));	
	
	НастройкаОтображения.Вставить("Прочее",НастройкаГруппы);
	
	Возврат НастройкаОтображения;
	
КонецФункции // ПодготовитьНастройкиОтображенияШапка()

// Процедура обновляет аналитическую панель.
// 
&НаСервере
Процедура ОбновитьАналитическуюПанель()
	
	Если ТипЗнч(ТекущиеПараметры) = Тип("Структура") 
		И ТекущиеПараметры.Свойство("ИмяГруппировки")
		И (ТекущиеПараметры.ИмяГруппировки = "Организация" 
		ИЛИ ТекущиеПараметры.ИмяГруппировки = "ВидДенежныхСредств") Тогда 
		
		ПолеТабДокументаАнализ.Очистить();
		Возврат; 
		
	КонецЕсли;
	
	СКД = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхАнализ);
	
	ПараметрНачалоПериода = НайтиПараметрДанных(Объект.КомпоновщикАнализ,"НачалоПериода");
	ПараметрКонецПериода  = НайтиПараметрДанных(Объект.КомпоновщикАнализ,"КонецПериода");
	
	Если НЕ ПараметрНачалоПериода = Неопределено Тогда
		ПараметрНачалоПериода.Значение = Объект.НачалоПериода;
	КонецЕсли; 
	
	Если НЕ ПараметрКонецПериода = Неопределено Тогда
		ПараметрКонецПериода.Значение = КонецДня(Объект.КонецПериода);
	КонецЕсли; 
	
	// Устанавливаем отборы исходя из текущего положения в дереве.
	ОтборБанковскийСчет     = Неопределено;
	ОтборВалюта             = Неопределено;
	ОтборВидДенежныхСредств = Неопределено;
	Для каждого ЭлементОтбора Из Объект.КомпоновщикАнализ.Настройки.Отбор.Элементы Цикл
		
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "БанковскийСчет" Тогда
			ОтборБанковскийСчет = ЭлементОтбора;
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "Валюта" Тогда
			ОтборВалюта = ЭлементОтбора;
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "ВидДенежныхСредств" Тогда
			ОтборВидДенежныхСредств = ЭлементОтбора;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если НЕ ОтборБанковскийСчет = Неопределено Тогда
		
		ОтборБанковскийСчет.Использование = Истина;
		ОтборБанковскийСчет.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		Если ТипЗнч(ТекущиеПараметры) = Тип("Структура") 
			  И ТекущиеПараметры.Свойство("БанковскийСчет") 
			  И ТипЗнч(ТекущиеПараметры.БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			  
			ОтборБанковскийСчет.ПравоеЗначение= ТекущиеПараметры.БанковскийСчет;
			
		Иначе	
			
		    ОтборБанковскийСчет.Использование = Ложь;			
			ОтборБанковскийСчет.ПравоеЗначение= Справочники.БанковскиеСчета.ПустаяСсылка();
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ОтборВалюта = Неопределено Тогда
		
		ОтборВалюта.Использование  = Истина;
		ОтборВалюта.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		Если ТипЗнч(ТекущиеПараметры) = Тип("Структура") 
			 И ТекущиеПараметры.Свойство("ВалютаДенежныхСредств") Тогда
			         
		  ОтборВалюта.ПравоеЗначение = ТекущиеПараметры.ВалютаДенежныхСредств;     
		  
	    Иначе	
		  ОтборВалюта.ПравоеЗначение = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ОтборВидДенежныхСредств = Неопределено Тогда
		
		Если ТипЗнч(ТекущиеПараметры) = Тип("Структура") 
			И ТекущиеПараметры.Свойство("БанковскийСчет") 
			И ТипЗнч(ТекущиеПараметры.БанковскийСчет) = Тип("Строка") Тогда	
			
			ОтборВидДенежныхСредств.Использование = Истина;
			ОтборВидДенежныхСредств.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
			ОтборВидДенежныхСредств.ПравоеЗначение= Перечисления.бит_ВидыДенежныхСредств.Наличные;		
			
		Иначе
			ОтборВидДенежныхСредств.Использование = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	// Из схемы возьмем настройки по умолчанию
	Настройки = Объект.КомпоновщикАнализ.ПолучитьНастройки();		
	
	// Проконтролируем параметры которые пользователь может менять самостоятельно.
	
	// Отключить использование периодичности нельзя.
	ПараметрПериодичность = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность"));
	
	Если НЕ ПараметрПериодичность = Неопределено
		И НЕ ПараметрПериодичность.Использование Тогда
		
		ПараметрПериодичность.Использование = Истина;
		ПараметрПериодичность.Значение = 6;
		
	КонецЕсли;
	
	// Помещаем в переменную данные о расшифровке данных.
	ДанныеРасшифровки1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Формируем макет, с помощью компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Передаем в макет компоновки схему, настройки и данные расшифровки.
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровки1);
	
	// Выполним компоновку с помощью процессора компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки1);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ПолеТабДокументаАнализ);
	
	АдресДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки1, УникальныйИдентификатор);
	
	ПолеТабДокументаАнализ.Очистить();
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры // ОбновитьАналитическуюПанель()

// Процедура разбивает платежную позиции на две.
// 
// Параметры:
//  ИдСтроки       - Число
//  СуммаНачальная - Число
//  СуммаНовая     - Число
// 
&НаСервере
Функция РазбитьПлатеж(ИдСтроки,СуммаНачальная,СуммаНовая)

	флДействиеВыполнено = Ложь;
	
	ТекущаяСтрока = ДеревоСчета.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		Если ТекущаяСтрока.ВалютаДенежныхСредств <> ТекущаяСтрока.ДокументПланирования.ВалютаДокумента Тогда
			
			ИсходнаяВалюта = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТекущаяСтрока.ВалютаДенежныхСредств, 
									ТекущаяСтрока.ПлатежнаяПозиция.ДатаРасхода);
			
			НоваяВалюта = бит_КурсыВалютКлиентСервер.СтруктураКурса(ТекущаяСтрока.ПлатежнаяПозиция.ВалютаДокумента, 
									ТекущаяСтрока.ПлатежнаяПозиция.КурсДокумента, ТекущаяСтрока.ПлатежнаяПозиция.КратностьДокумента);
			
			СуммаКОплате = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаНовая, 
									ИсходнаяВалюта, НоваяВалюта); 
			
			СуммаКОплатеНач = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаНачальная, 
									ИсходнаяВалюта, НоваяВалюта);	
		Иначе
			СуммаКОплате 	= СуммаНовая;
			СуммаКОплатеНач = СуммаНачальная;
		КонецЕсли; 

		флДействиеВыполнено = бит_Казначейство.РазбитьПлатежнуюПозицию(ТекущаяСтрока.ПлатежнаяПозиция
																		,СуммаКОплате
																		,СуммаКОплатеНач
																		,Объект.РежимСообщений);
		
		Если флДействиеВыполнено Тогда
			
			ОбновитьДеревоСчетов();
			
			
		КонецЕсли; 															 
		
	КонецЕсли; 
	
	Возврат флДействиеВыполнено;

КонецФункции // РазбитьПлатеж()

// Функция изменяет сумму в платежной позиции.
// 
// Параметры:
//  ИдСтроки       - Число
//  СуммаНачальная - Число
//  СуммаНовая     - Число
// 
&НаСервере
Функция ИзменитьПлатеж(ИдСтроки, СуммаНачальная, СуммаНовая)
	
	флДействиеВыполнено = Ложь;
	
	ТекущаяСтрока = ДеревоСчета.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		флДействиеВыполнено = бит_Казначейство.СкорректироватьСуммуПлатежнойПозиции(ТекущаяСтрока.ПлатежнаяПозиция
																					,СуммаНовая
																					,СуммаНачальная
																					,
																					,Новый Структура("ТекущаяДата", ТекущаяДата()));
		
		Если флДействиеВыполнено Тогда
			
			ОбновитьДеревоСчетов();
			
		КонецЕсли; 															 
		
	КонецЕсли; 
	
	Возврат флДействиеВыполнено;
	
КонецФункции

// Процедура отмечает платежные позиции в оперативном дне.
// 
&НаКлиенте
Процедура ОтметитьТекущие()
	
	КоллекцияОрганизации = ДеревоСчета.ПолучитьЭлементы();
	
	Для каждого ТекЭлемент Из КоллекцияОрганизации Цикл
		
		ТекЭлемент.Выполнять = Ложь;
		ОтметитьТекущиеФлажки(ТекЭлемент);
		
	КонецЦикла; 
	
КонецПроцедуры // ОтметитьТекущие()
 
 // Процедура отмечает платежные позиции в оперативном дне по коллекции элементов дерева.
 // 
&НаКлиенте
Процедура ОтметитьТекущиеФлажки(ЭлементВерх)
	
	Коллекция = ЭлементВерх.ПолучитьЭлементы();
	
	Для каждого ТекЭлемент Из Коллекция Цикл
		
		// Отмечаем платежные позиция в оперативном дне.
		
		ДатаПлатежа = ПолучитьДатуРасхода(ТекЭлемент.ПлатежнаяПозиция);
		
		Если ТекЭлемент.ДоступностьФлажка Тогда
			
			Если ТекЭлемент.ИмяГруппировки = "ДокументПланирования"
				И ДатаПлатежа = Объект.ОперативныйДень 
				И ЗначениеЗаполнено(ТекЭлемент.ПлатежнаяПозиция) Тогда
				
				ТекЭлемент.Выполнять = Истина;
				ПересчитатьЗначенияВыделенныхДокументов(ТекЭлемент.Выполнять, ТекЭлемент.Сумма, ТекЭлемент.ПлатежнаяПозиция);
				
			Иначе
				
				ТекЭлемент.Выполнять = Ложь;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		ОтметитьТекущиеФлажки(ТекЭлемент);
		
	КонецЦикла; 
	
 КонецПроцедуры // ИзменитьФлажки()

// Функция получает дату расхода Платежной позиции.
//
&НаСервере
Функция ПолучитьДатуРасхода(ПлатПозиция)

	Возврат ПлатПозиция.ДатаРасхода;
	
КонецФункции // ПолучитьДатуРасхода()

// Функция получает настройку БИТ Контроль крайней даты платежа.
//
&НаСервере
Функция ПолучитьНастройкуКонтроляДатыПлатежаКрайней(текОрганизация)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", текОрганизация);
	
	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(НачалоДня(ТекущаяДата()), , СтруктураПараметров, "Ошибки");
	
	КонтрольКрайнейДатыПлатежа = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, "КонтрольКрайнейДатыПлатежа");
	СинхронизацияДатыПлатежа = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, "СинхронизироватьДатуПлатежаИДатуНеПозднее");
	
	Возврат ?(КонтрольКрайнейДатыПлатежа = Перечисления.бит_ВидыКонтроляДатыПлатежа.Предупреждать, Истина, Ложь);
	
КонецФункции // ПолучитьНастройкуКонтроляДатыПлатежаКрайней()
 
&НаСервере
Функция ПолучитьКурсВалюты(Валюта,ДатаКурса)
	
	Структура = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта,ДатаКурса);
	
	Возврат Структура;
	
КонецФункции	

// Процедура формирует массив ИД строк, 
// по которым будет формироваться актуализация.
//
// Параметры:
//  ЭлементВерх  - ДанныеФормыЭлементДерева
//  МассивАктуализации  - Массив
//  ВсеПозиции - Булево.
//
&НаКлиенте
Процедура СформироватьМассивДляАктуализации(ЭлементВерх,МассивАктуализации, ВсеПозиции)

	Коллекция = ЭлементВерх.ПолучитьЭлементы();

	Для каждого ТекЭлемент Из Коллекция Цикл
	 
		Если (ТекЭлемент.Выполнять ИЛИ ВсеПозиции) 
		  И ТекЭлемент.ИмяГруппировки = "ДокументПланирования" Тогда
		  
			Если ЗначениеЗаполнено(ТекЭлемент.ПлатежнаяПозиция) Тогда
				
			 	МассивАктуализации.Добавить(ТекЭлемент.ПолучитьИдентификатор());

			КонецЕсли;   
		  
		КонецЕсли; 
	 
		СформироватьМассивДляАктуализации(ТекЭлемент,МассивАктуализации, ВсеПозиции);
	 
	КонецЦикла;

КонецПроцедуры // СформироватьМассивДляАктуализации()

// Процедура выполняет актуализацию позиций. 
//
// Параметры:
//  МассивАктуализации - Массив.
//
&НаСервере
Процедура ВыполнитьАктуализацию(МассивАктуализации)

	ОбновитьДерево = Ложь;
	
	Для каждого ИД Из МассивАктуализации Цикл
	
		ЭлементДерева = ДеревоСчета.НайтиПоИдентификатору(Ид);
		Если НЕ ЭлементДерева = Неопределено Тогда
			
				ДокОбъект = ЭлементДерева.ДокументПланирования.ПолучитьОбъект();
				Актуализировано = ДокОбъект.АктуализироватьПоКурсам();
				
				Если Актуализировано Тогда
				
					ОбновитьДерево = Истина;
				
				КонецЕсли; 
				
		КонецЕсли;	
			
	КонецЦикла; 

	Если ОбновитьДерево Тогда
	
		ОбновитьДеревоСчетов();
		
	КонецЕсли; 
	
КонецПроцедуры // ВыполнитьАктуализацию()

&НаКлиенте
Процедура ПоказатьСформированныеДокументы(Результат) Экспорт

	СпискиДокументов = Новый Структура; 
	СпискиДокументов.Вставить("СписокДокументовСписания", СписокДокументовСписания.ВыгрузитьЗначения());
	СпискиДокументов.Вставить("СписокРеестры",        	  СписокРеестры.ВыгрузитьЗначения());
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпискиДокументов", СпискиДокументов);
	
	ОткрытьФорму("Обработка.бит_РабочееМестоКазначея.Форма.СформированныеДокументы", ПараметрыФормы,,
		ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьяОЗавершенииФормированияДокументов()
	
	Перем Оповещение, Текст, ТекстСообщения;
	
	Текст = НСтр("ru = 'Формирование документов'");
	Если ДобавленоДокументов <> 0 Тогда
		ОбновитьДеревоСчетов();
		
		ТекстСообщения = НСтр("ru = 'Список сформированных документов.'");
		Оповещение     = Новый ОписаниеОповещения("ПоказатьСформированныеДокументы", ЭтотОбъект); 
		
		ПоказатьОповещениеПользователя(Текст, Оповещение, ТекстСообщения, БиблиотекаКартинок.Информация32);
		бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСчета,ДеревоСчета,Объект.УровеньРаскрытияСчетов);
	Иначе
		ТекстСообщения = НСтр("ru = 'Создано 0 документов.'");
		ПоказатьОповещениеПользователя(Текст,,ТекстСообщения, БиблиотекаКартинок.бит_Предупреждение32);
	КонецЕсли;

	УстановитьВидимостьДекорацияПерейтиКСфоримрованнымДокументам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьСписокЗначений(Приемник, Источник)

	Для каждого Элемент Из Источник Цикл
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), Элемент);	
	КонецЦикла; 

КонецПроцедуры 

#КонецОбласти


