
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);

	// Параметры списка входящих задач
	
	// Остановленные задачи не отображаем.
			
	эо = СписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	эо.Использование  = Истина;
	эо.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Состояние");
	эо.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	эо.ПравоеЗначение = Справочники.бит_СтатусыОбъектов.Задача_Остановлена;
	
	// Выполненные задачи не отображаем.
	эо = СписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	эо.Использование  = Истина;
	эо.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Выполнена");
	эо.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	эо.ПравоеЗначение = Истина;	
	
	// Ведущие задачи не отображаем.
	эо = СписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	эо.Использование  = Истина;
	эо.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("АлгоритмПодчиненный");
	эо.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	эо.ПравоеЗначение = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
	
	// Параметры списка исходящих задач.
	
	ТекПользователь = бит_ОбщегоНазначенияПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	
	эо = СписокЗадачИсходящие.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	эо.Использование  = Истина;
	эо.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Автор");
	эо.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	эо.ПравоеЗначение = ТекПользователь;
	
	// Параметры списка задач замещаемого.
	
	эо = СписокЗадачЗамещаемого.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	эо.Использование  = Истина;
	эо.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Заместитель");
	эо.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	эо.ПравоеЗначение = ТекПользователь;
	
	МетаЗадача = Метаданные.Задачи.бит_уп_Задача;
	
	// Добавление кнопки "Раскрасить по статусам"
	// Также добавляются процедуры: К-РаскраситьПоСтатусам(), С-ОформитьСписокДокументовПоСтатусам().
	бит_РаботаСДиалогамиСервер.ДобавитьКнопкуРаскраситьПоСтатусам(Элементы, Команды, Элементы.ФормаКоманднаяПанель, МетаЗадача);
	ОформитьСписокДокументовПоСтатусам(Элементы.РаскраситьПоСтатусам.Пометка, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадачИсходящие

&НаКлиенте
Процедура СписокЗадачИсходящиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
		
	Если Копирование Тогда
		
		Задача = Элемент.ТекущаяСтрока;
		
		Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.бит_уп_Задача") Тогда
			СтруктураДанных = СтруктураДанныхЗадачи(Задача);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗадачаКопирование", СтруктураДанных);
			
			ОткрытьФорму("Задача.бит_уп_Задача.Форма.ФормаСозданияЗадачиУправляемая", ПараметрыФормы);
		КонецЕсли;
	Иначе
		ОткрытьФорму("Задача.бит_уп_Задача.Форма.ФормаСозданияЗадачиУправляемая");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура назначается динамически действию кнопки командной панели 
// КоманднаяПанель.РаскраситьПоСтатусам
// (обработчик события "Нажатие" кнопки "РаскраситьПоСтатусам").
// 
&НаКлиенте
Процедура Подключаемый_РаскраситьПоСтатусам()
	
	Элементы.РаскраситьПоСтатусам.Пометка = Не Элементы.РаскраситьПоСтатусам.Пометка;
	ОформитьСписокДокументовПоСтатусам(Элементы.РаскраситьПоСтатусам.Пометка);	
		
КонецПроцедуры // РаскраситьПоСтатусам()

&НаКлиенте
Процедура КомандаПринять(Команда)
	
	МассивЗадач = ВыделенныеЗадачи();
	ПринятьЗадачи(МассивЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнено(Команда)
	
	МассивЗадач = ВыделенныеЗадачи();
	ВыполнитьЗадачи(МассивЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренаправить(Команда)
	
	МассивЗадач = ВыделенныеЗадачи();
	Если МассивЗадач.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПеренаправитьЗавершение", ЭтотОбъект);
		РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;				
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗадачаОснование", МассивЗадач[0]);
		ПараметрыФормы.Вставить("Режим", "ИзСписка");
		ОткрытьФорму("Задача.бит_уп_Задача.Форма.ФормаПеренаправленияЗадачиУправляемая",ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОкна);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ПеренаправитьЗавершение".
// 
// Параметры:
// РезДанные - Структура.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ПеренаправитьЗавершение(РезДанные, ДополнительныеДанные) Экспорт
	
	Элементы.СписокЗадач.Обновить();
	
КонецПроцедуры	// ПеренаправитьЗавершение

&НаКлиенте
Процедура КомандаСтруктураПодчиненности(Команда)
	
	МассивЗадач = ВыделенныеЗадачи();
	Если МассивЗадач.Количество() > 0 Тогда
	
		ОткрытьФорму("ОбщаяФорма.бит_ФормаСтруктурыПодчиненностиЗадачУправляемая"
					,Новый Структура("ЗадачаСсылка", МассивЗадач[0])
					,ЭтотОбъект);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьНаОсновании(Команда)
	
	МассивЗадач = ВыделенныеЗадачи();
	Если МассивЗадач.Количество() > 0 Тогда
		
		РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;						
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗадачаОснование", МассивЗадач[0]);
		ОткрытьФорму("Задача.бит_уп_Задача.Форма.ФормаСозданияЗадачиУправляемая",ПараметрыФормы, ЭтотОбъект,,,,,РежимОкна);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура принимает к исполнению выделенные в списке задачи. 
// 
// Параметры:
//  МассивЗадач - Массив.
// 
&НаСервере
Процедура ПринятьЗадачи(МассивЗадач)

  Для каждого Задача Из МассивЗадач Цикл
  
		Задачи.бит_уп_Задача.ПринятьЗадачу(Задача);
  
  КонецЦикла; 	
  Элементы.СписокЗадач.Обновить();
  Элементы.СписокЗадачИсходящие.Обновить();
  
КонецПроцедуры // ПринятьЗадачи()

// Процедура выполняет выделенные в списке задачи. 
// 
// Параметры:
//  МассивЗадач - Массив.
// 
&НаСервере
Процедура ВыполнитьЗадачи(МассивЗадач)

  Для каждого Задача Из МассивЗадач Цикл
  
		Задачи.бит_уп_Задача.ОтметитьВыполнение(Задача);
  
  КонецЦикла; 	
  Элементы.СписокЗадач.Обновить();
  Элементы.СписокЗадачИсходящие.Обновить();
  
КонецПроцедуры // ВыполнитьЗадачи()

// Функция получает массив выделенных задач в зависимости от текущей страницы.
// 
// Возвращаемое значение:
//  МассивЗадач - Массив.
// 
&НаКлиенте
Функция ВыделенныеЗадачи()

	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаВходящие Тогда
		
		МассивЗадач = Элементы.СписокЗадач.ВыделенныеСтроки;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаИсходящие Тогда	
		
		МассивЗадач = Элементы.СписокЗадачИсходящие.ВыделенныеСтроки;
		
	Иначе   
		
		МассивЗадач = Новый Массив;
		
	КонецЕсли; 

	Возврат МассивЗадач;
	
КонецФункции // ПолучитьМассивВыделенныхЗадач()

// Получаем структуру данных задачи для копирования.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Результат - Структура.
//
&НаСервереБезКонтекста
Функция СтруктураДанныхЗадачи(Задача)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Наименование,Описание,Предмет,Исполнитель");
	
КонецФункции // СтруктураДанныхЗадачи()

// Процедура обновляет оформление списка документов по статусам.
// 
// Параметры:
//  ТолькоОчистить - Булево 
// 
&НаСервере
Процедура ОформитьСписокДокументовПоСтатусам(ПометкаКн, ЭтоОткрытие = Ложь) Экспорт

	Если ЭтоОткрытие И Не ПометкаКн Тогда
		Возврат;	
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.Задачи.бит_уп_Задача;
	МасОбъектов = ?(ПометкаКн, бит_РаботаСДиалогамиСервер.ПолучитьМассивОбъектов(МетаданныеОбъекта), Новый Массив);
	
	// Входящий список
	бит_РаботаСДиалогамиСервер.ОформитьСписокДокументовПоСтатусам(МасОбъектов
	                                                                , ПометкаКн
																	, УсловноеОформление
																	, "СписокЗадач"
																	, "Состояние");
	
	// Исходящий список
	бит_РаботаСДиалогамиСервер.ОформитьСписокДокументовПоСтатусам(МасОбъектов
	                                                                , ПометкаКн
																	, УсловноеОформление
																	, "СписокЗадачИсходящие"
																	, "Состояние"
																	, Ложь);	
	
	Если Не ЭтоОткрытие Тогда
		// Сохранение значения пометки
		РегистрыСведений.бит_СохраненныеЗначения.СохранитьЗнч(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																	,МетаданныеОбъекта
																	,"РаскраситьПоСтатусам_Пометка"
																	,ПометкаКн);
	КонецЕсли;
															
КонецПроцедуры // ОформитьСписокДокументовПоСтатусам()

#КонецОбласти
