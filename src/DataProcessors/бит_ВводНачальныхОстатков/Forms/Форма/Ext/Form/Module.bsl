
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_вго_ПорталСверкиВГО;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	// Вызов механизма защиты
	 	
	Если фОтказ Тогда
		Возврат;	
	КонецЕсли;
	
	Если Параметры.Свойство("РегистрБухгалтерии") Тогда
		Объект.РегистрПриемник = Параметры.РегистрБухгалтерии;
		Элементы.РегистрПриемник.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	Объект.ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьЗначенияПоУмолчанию(); 
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// РегистрИсточник

&НаКлиенте
Процедура РегистрИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"        , фКэшЗначений.СписокДоступныхВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы", Объект.РегистрИсточник);
	
	// Удаление из списка регистра источника
	СписокРегистров = фКэшЗначений.СписокДоступныхРегистровИсточников;
	НайденныйЭлемент = СписокРегистров.НайтиПоЗначению(Объект.РегистрПриемник);
	Если НайденныйЭлемент <> Неопределено Тогда
	    СписокРегистров.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", СписокРегистров);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);	
	
КонецПроцедуры // РегистрИсточникНачалоВыбора()

&НаКлиенте
Процедура РегистрИсточникПриИзменении(Элемент)
	
	РегистрИсточникПриИзмененииСервер();
	
КонецПроцедуры // РегистрИсточникПриИзменении()

// Процедура обрабатывает изменения регистра - источника на сервере
//
&НаСервере
Процедура РегистрИсточникПриИзмененииСервер()
	
	фИмяРегИсточника = УстановитьИмяРегистра(Объект.РегистрИсточник);
    
    ОсновныеСчета.Очистить();
	ЗабалансовыеСчета.Очистить();
	Объект.ТаблицаДанныеТрансляции.Очистить();
		
КонецПроцедуры // РегистрИсточникПриИзмененииСервер()

// РегистрПриемник

&НаКлиенте
Процедура РегистрПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"        , фКэшЗначений.СписокДоступныхВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы", Объект.РегистрПриемник);
	
	// Удаление из списка регистра источника
	СписокРегистров = фКэшЗначений.СписокДоступныхРегистровПриемников;
	НайденныйЭлемент = СписокРегистров.НайтиПоЗначению(Объект.РегистрИсточник);
	Если НайденныйЭлемент <> Неопределено Тогда
	    СписокРегистров.Удалить(НайденныйЭлемент);
	КонецЕсли;
		
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", СписокРегистров);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);	
	
КонецПроцедуры // РегистрПриемникНачалоВыбора()

&НаКлиенте
Процедура РегистрПриемникПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрПриемник) Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо заполнить регистр приемник.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 			
	КонецЕсли; 	
	РегистрПриемникПриИзмененииСервер();
	
КонецПроцедуры // РегистрПриемникПриИзменении()

// Процедура устанавливает значение вспомогательного счета
//
// Параметры:
//  Очистить - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура УстановитьВспомогательныйСчет(Очистить = Ложь)

	ИмяПланаСчетов = Метаданные.РегистрыБухгалтерии[фИмяРегПриемника].ПланСчетов.Имя;
	
	// Ограничение типа для вспомогательного счета
	Если Очистить ИЛИ ЗначениеЗаполнено(Объект.РегистрПриемник) Тогда 	
		
		СчетПоУмолчанию = ПланыСчетов[ИмяПланаСчетов].НайтиПоКоду("000");
		Если СчетПоУмолчанию = Неопределено Тогда
			Объект.ВспомогательныйСчет = ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка();
			Элементы.ВспомогательныйСчет.ВыбиратьТип = Ложь;
		Иначе	
		    Объект.ВспомогательныйСчет = СчетПоУмолчанию;
			Элементы.ВспомогательныйСчет.ВыбиратьТип = Ложь;
		КонецЕсли;
				
	Иначе
		
		Объект.ВспомогательныйСчет = ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка();
				
	КонецЕсли;

КонецПроцедуры // УстановитьВспомогательныйСчет()

// Процедура устанавливает тип счетов приемника
//
&НаСервере
Процедура УстановитьТипСчетовПриемника()

	ИмяПланаСчетов = Метаданные.РегистрыБухгалтерии[фИмяРегПриемника].ПланСчетов.Имя;
	ТипСчета = ТипЗнч(ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка());
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипСчета);
	
	Элементы.ОсновныеСчетаСчетПриемника.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);	 

КонецПроцедуры // УстановитьТипСчетовПриемника()

// Процедура обрабатывает изменения регистра - приемника на сервере
//
&НаСервере
Процедура РегистрПриемникПриИзмененииСервер()
	
	фИмяРегПриемника = УстановитьИмяРегистра(Объект.РегистрПриемник);
	
	УстановитьПоказатели();
	УстановитьВидимостьДоступность();
	ЗаполнитьСчетаПриемника();
	ЗаполнитьДанныеПриемника();
	Объект.ТаблицаДанныеТрансляции.Очистить();
	
	УстановитьВспомогательныйСчет();
	УстановитьТипСчетовПриемника();
	
КонецПроцедуры // РегистрПриемникПриИзмененииСервер()

// ВспомогательныйСчет

&НаКлиенте
Процедура ВспомогательныйСчетОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВспомогательныйСчет(Истина);
		
КонецПроцедуры // ВспомогательныйСчетОчистка()

// ВыводитьСумму*

&НаКлиенте
Процедура ВыводитьСуммуРеглПриИзменении(Элемент)
	
	ИзменениеПоказателя("Регл");
	
КонецПроцедуры // ВыводитьСуммуРеглПриИзменении()

&НаКлиенте
Процедура ВыводитьСуммуУпрПриИзменении(Элемент)
	
	ИзменениеПоказателя("Упр");
	
КонецПроцедуры // ВыводитьСуммуУпрПриИзменении()

&НаКлиенте
Процедура ВыводитьСуммуМУПриИзменении(Элемент)
	
	ИзменениеПоказателя("МУ");
	
КонецПроцедуры // ВыводитьСуммуМУПриИзменении()

&НаКлиенте
Процедура ВыводитьСуммуСценарийПриИзменении(Элемент)
	
	ИзменениеПоказателя("Сценарий");
	
КонецПроцедуры // ВыводитьСуммуСценарийПриИзменении()

// Организация

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОсновныеСчета.Очистить();
	ЗабалансовыеСчета.Очистить();
	Объект.ТаблицаДанныеТрансляции.Очистить();
	
КонецПроцедуры // ОрганизацияПриИзмененииНаСервере()

// ДатаВводаОстатков

&НаКлиенте
Процедура ДатаВводаОстатковПриИзменении(Элемент)
	
	ДатаВводаОстатковПриИзмененииНаСервере();
	
КонецПроцедуры // ДатаВводаОстатковПриИзменении()

// Процедура обрабатывает изменения даты ввода остатков на сервере
//
&НаСервере
Процедура ДатаВводаОстатковПриИзмененииНаСервере()
	
	ОсновныеСчета.Очистить();
	ЗабалансовыеСчета.Очистить();
	Объект.ТаблицаДанныеТрансляции.Очистить();
	
КонецПроцедуры // ДатаВводаОстатковПриИзмененииНаСервере()

// Таблица ОсновныеСчета

&НаКлиенте
Процедура ОсновныеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДобавитьДокументы("ОсновныеСчета");
	
КонецПроцедуры // ОсновныеСчетаПередНачаломДобавления()

&НаКлиенте
Процедура ОсновныеСчетаПередНачаломИзменения(Элемент, Отказ)
	      	
	Если Элемент.ТекущийЭлемент.Имя <> "ОсновныеСчетаВыбрать" Тогда
		
		Отказ = Истина;
		
		Если Элемент.ТекущийЭлемент.Имя = "ОсновныеСчетаСчетПриемника" Тогда
			ПоказатьЗначение(,Элемент.ТекущиеДанные.СчетПриемника);
		Иначе	
			ПоказатьСпискиДокументов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеСчетаПередНачаломИзменения()

&НаКлиенте
Процедура ОсновныеСчетаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры // ОсновныеСчетаПередУдалением()

// Таблица ЗабалансовыеСчета

&НаКлиенте
Процедура ЗабалансовыеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДобавитьДокументы("ЗабалансовыеСчета");
	
КонецПроцедуры // ЗабалансовыеСчетаПередНачаломДобавления()

&НаКлиенте
Процедура ЗабалансовыеСчетаПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя <> "ЗабалансовыеСчетаВыбрать" Тогда
		
		Отказ = Истина;

		Если Элемент.ТекущийЭлемент.Имя = "ЗабалансовыеСчетаСчетПриемника" Тогда
			ПоказатьЗначение(,Элемент.ТекущиеДанные.СчетПриемника);
		Иначе	
			ПоказатьСпискиДокументов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗабалансовыеСчетаПередНачаломИзменения()

&НаКлиенте
Процедура ЗабалансовыеСчетаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;

КонецПроцедуры // ЗабалансовыеСчетаПередУдалением()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСпискиСчетов(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.РегистрПриемник) Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо заполнить регистр приемник.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 			
	КонецЕсли;   
	
	ЗаполнитьСчетаПриемника();
	ЗаполнитьДанныеПриемника();
	
КонецПроцедуры // ОбновитьСпискиСчетов()

&НаКлиенте
Процедура ОбновитьДанныеПриемника(Команда)
	
	ЗаполнитьДанныеПриемника();
	
КонецПроцедуры // ОбновитьДанныеПриемника()

&НаКлиенте
Процедура ЗаполнитьЧерезТрансляцию(Команда)
    
    Если НЕ ПроверкаЗаполненыРеквизиты() Тогда
        Возврат;    
    КонецЕсли; 
    
    Состояние("Выполняется трансляция.");
	ЗаполнитьЧерезТрансляциюСервер();
	
КонецПроцедуры // ЗаполнитьЧерезТрансляцию()

&НаКлиенте
Процедура СоздатьДокументы_Основные(Команда)
    
    Если НЕ ПроверкаЗаполненыРеквизиты(Истина) Тогда
        Возврат;    
    КонецЕсли;
    
	ДобавитьДокументы("ОсновныеСчета");
	
КонецПроцедуры // СоздатьДокументы_Основные()

&НаКлиенте
Процедура СоздатьДокументы_Забалансовые(Команда)
    
    Если НЕ ПроверкаЗаполненыРеквизиты(Истина) Тогда
        Возврат;    
    КонецЕсли;
    
	ДобавитьДокументы("ЗабалансовыеСчета");
	
КонецПроцедуры // СоздатьДокументы_Забалансовые()

&НаКлиенте
Процедура СоздатьДокументыВНА(Команда)
    
    Если НЕ ПроверкаЗаполненыРеквизиты(Истина) Тогда
        Возврат;    
    КонецЕсли;
    
	ВыборОС  = ВыборОСНМА <> 2;
	ВыборНМА = ВыборОСНМА <> 1;
	СоздатьДокументыВНАНаСервере(ВыборОС, ВыборНМА);
	
КонецПроцедуры // СоздатьДокументыВНА()

&НаКлиенте
Процедура ПоказатьДокументы(Команда)
    
    Если НЕ ПроверкаЗаполненыРеквизиты() Тогда
        Возврат;    
    КонецЕсли;
    
	ПоказатьСпискиДокументов();
	
КонецПроцедуры // ПоказатьДокументы()

&НаКлиенте
Процедура ПоказатьДокументыВНА(Команда)
    
    Если НЕ ПроверкаЗаполненыРеквизиты() Тогда
        Возврат;    
    КонецЕсли;
    
	ВыборОС  = ВыборОСНМА <> 2;
	ВыборНМА = ВыборОСНМА <> 1;
	ПоказатьСпискиДокументовВНА(ВыборОС, ВыборНМА);
	
КонецПроцедуры // ПоказатьДокументыВНА()

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыводитьСуммуРегл"	   , Объект.ВыводитьСуммуРегл);
	ПараметрыФормы.Вставить("ВыводитьСуммуУпр"	   , Объект.ВыводитьСуммуУпр);
	ПараметрыФормы.Вставить("ВыводитьСуммуМУ"	   , Объект.ВыводитьСуммуМУ);
	ПараметрыФормы.Вставить("ВыводитьСуммуСценарий", Объект.ВыводитьСуммуСценарий);
	ПараметрыФормы.Вставить("РегистрПриемник"	   , Объект.РегистрПриемник);
	ПараметрыФормы.Вставить("СкрыватьПустыеСтроки" , Объект.СкрыватьПустыеСтроки);
	
	ОповещениеНастройкаПоказателей = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыНастройки", ЭтотОбъект);	
	ОткрытьФорму("Обработка.бит_ВводНачальныхОстатков.Форма.ФормаНастройки", ПараметрыФормы, , , , , ОповещениеНастройкаПоказателей, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьНастройки()

// Процедура - обработчик закрытия формы настройки
//
// Параметры:
//  Результат    - Структура
//  ДопПараметры 
//
&НаКлиенте
Процедура ОбработкаЗакрытияФормыНастройки(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат <> КодВозвратаДиалога.Отмена Тогда
		
		Объект.ВыводитьСуммуРегл 	 = Результат.ВыводитьСуммуРегл;
		Объект.ВыводитьСуммуУпр 	 = Результат.ВыводитьСуммуУпр;	
	    Объект.ВыводитьСуммуМУ       = Результат.ВыводитьСуммуМУ;
		Объект.ВыводитьСуммуСценарий = Результат.ВыводитьСуммуСценарий;
		Объект.СкрыватьПустыеСтроки  = Результат.СкрыватьПустыеСтроки;
		
		УстановитьВидимостьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗакрытияФормыНастройки()

&НаКлиенте
Процедура ОсновныеСчетаУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ОсновныеСчета, "Выбрать", 1);
	
КонецПроцедуры // ОсновныеСчетаУстановитьВсе()

&НаКлиенте
Процедура ОсновныеСчетаСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ОсновныеСчета, "Выбрать", 0);
	
КонецПроцедуры // ОсновныеСчетаСнятьВсе()

&НаКлиенте
Процедура ОсновныеСчетаИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ОсновныеСчета, "Выбрать", 2);
	
КонецПроцедуры // ОсновныеСчетаИнвертировать()

&НаКлиенте
Процедура ЗабалансовыеСчетаУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ЗабалансовыеСчета, "Выбрать", 1);
	
КонецПроцедуры // ЗабалансовыеСчетаУстановитьВсе()

&НаКлиенте
Процедура ЗабалансовыеСчетаСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ЗабалансовыеСчета, "Выбрать", 0);
	
КонецПроцедуры // ЗабалансовыеСчетаСнятьВсе()

&НаКлиенте
Процедура ЗабалансовыеСчетаИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ЗабалансовыеСчета, "Выбрать", 2);
	
КонецПроцедуры // ЗабалансовыеСчетаИнвертировать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("СписокДоступныхРегистровИсточников"
						, СформироватьСписокДоступныхРегистровБухгалтерии());
	фКэшЗначений.Вставить("СписокДоступныхРегистровПриемников"
						, СформироватьСписокДоступныхРегистровБухгалтерии(Истина));
		
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	фКэшЗначений.Вставить("СписокДоступныхВидовОбъектов", СписокВидовОбъектов);
	
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("ИмяОбъекта"		   , "бит_ВводНачальныхОстатков");
	Если ЗначениеЗаполнено(Объект.РегистрПриемник) Тогда	
		фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_ВводНачальныхОстатков_" + Объект.РегистрПриемник.ИмяОбъекта);	
	Иначе
		фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_ВводНачальныхОстатков");	
	КонецЕсли; 
						
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Функция устанавливает имя регистра в реквизит формы.
//
// Параметры:
//  ОбъектРегистр  - СправочникСсылка.бит_ОбъектыСистемы.
//  
// Возвращаемое значение:
//   Строка.
//
&НаСервереБезКонтекста
Функция УстановитьИмяРегистра(ОбъектРегистр)

	Если ЗначениеЗаполнено(ОбъектРегистр) Тогда
	    ИмяРег = ОбъектРегистр.ИмяОбъекта;
	Иначе
		ИмяРег = "";
	КонецЕсли;
	
	Возврат ИмяРег;

КонецФункции // УстановитьИмяРегистра()

// Процедура устанавливает значения и видимость реквизитов ВыводитьСумму*.
//
&НаСервере
Процедура УстановитьПоказатели()

	ПриемникХозрасчетный   = фИмяРегПриемника = "Хозрасчетный";
	ПриемникМеждународный  = фИмяРегПриемника = "бит_Дополнительный_2";
	ПриемникБюджетирование = фИмяРегПриемника = "бит_Бюджетирование";
	
	Если ПриемникХозрасчетный Тогда
		Объект.ВыводитьСуммуУпр   		    = Ложь;		
		Элементы.ВыводитьСуммуУпр.Видимость = Ложь;
	Иначе
		Элементы.ВыводитьСуммуУпр.Видимость = Истина;
	КонецЕсли;
	Если ПриемникМеждународный Тогда
		Элементы.ВыводитьСуммуМУ.Видимость = Истина;
	Иначе
		Объект.ВыводитьСуммуМУ   		   = Ложь;		
		Элементы.ВыводитьСуммуМУ.Видимость = Ложь;
	КонецЕсли;
	Если ПриемникБюджетирование Тогда
		Элементы.ВыводитьСуммуСценарий.Видимость = Истина;
	Иначе
		Объект.ВыводитьСуммуСценарий   		     = Ложь;		
		Элементы.ВыводитьСуммуСценарий.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьПоказатели()

// Процедура устанавливает видимость сумм и надписей-показателей при изменении реквизитов ВыводитьСумму*.
//
// Параметры:
//  ИмяПоказателя - Строка
//
&НаСервере
Процедура ИзменениеПоказателя(ИмяПоказателя)

	ЗнчПоказателя = Объект["ВыводитьСумму" + ИмяПоказателя];
	
	Элементы["ОсновныеСчетаСумма" + ИмяПоказателя + "Дт"].Видимость   = ЗнчПоказателя;
	Элементы["ОсновныеСчетаСумма" + ИмяПоказателя + "Кт"].Видимость   = ЗнчПоказателя; 	
	Элементы["ОсновныеСчетаСумма" + ИмяПоказателя + "Дт_П"].Видимость = ЗнчПоказателя;
	Элементы["ОсновныеСчетаСумма" + ИмяПоказателя + "Кт_П"].Видимость = ЗнчПоказателя;
	
	Элементы["ЗабалансовыеСчетаСумма" + ИмяПоказателя + "Дт"].Видимость   = ЗнчПоказателя;
	Элементы["ЗабалансовыеСчетаСумма" + ИмяПоказателя + "Кт"].Видимость   = ЗнчПоказателя;	
	Элементы["ЗабалансовыеСчетаСумма" + ИмяПоказателя + "Дт_П"].Видимость = ЗнчПоказателя;
	Элементы["ЗабалансовыеСчетаСумма" + ИмяПоказателя + "Кт_П"].Видимость = ЗнчПоказателя;
	
	Элементы["ОсновныеСчетаНадпись" + ИмяПоказателя].Видимость     = ЗнчПоказателя;
	Элементы["ЗабалансовыеСчетаНадпись" + ИмяПоказателя].Видимость = ЗнчПоказателя;
	
КонецПроцедуры // ИзменениеПоказателя()

// Процедура устанавливает видимость/доступность элементов формы.
//
&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Регл");
	МассивПоказателей.Добавить("Упр");
	МассивПоказателей.Добавить("МУ");
	МассивПоказателей.Добавить("Сценарий");
	
	Для каждого ЭлПок Из МассивПоказателей Цикл
		ВыводитьПок = Объект["ВыводитьСумму" + ЭлПок];
		// Надписи
		Элементы["ОсновныеСчетаНадпись" + ЭлПок].Видимость 		= ВыводитьПок;
		Элементы["ЗабалансовыеСчетаНадпись" + ЭлПок].Видимость 	= ВыводитьПок;
		// Суммы для таблицы "ОсновныеСчета"
		Элементы["ОсновныеСчетаСумма" + ЭлПок + "Дт"].Видимость = ВыводитьПок;
		Элементы["ОсновныеСчетаСумма" + ЭлПок + "Кт"].Видимость = ВыводитьПок;
		Элементы["ОсновныеСчетаСумма" + ЭлПок + "Дт_П"].Видимость = ВыводитьПок;
		Элементы["ОсновныеСчетаСумма" + ЭлПок + "Кт_П"].Видимость = ВыводитьПок;
		// Суммы для таблицы "ЗабалансовыеСчета"
	    Элементы["ЗабалансовыеСчетаСумма" + ЭлПок + "Дт"].Видимость = ВыводитьПок;
		Элементы["ЗабалансовыеСчетаСумма" + ЭлПок + "Кт"].Видимость = ВыводитьПок;
		Элементы["ЗабалансовыеСчетаСумма" + ЭлПок + "Дт_П"].Видимость = ВыводитьПок;
		Элементы["ЗабалансовыеСчетаСумма" + ЭлПок + "Кт_П"].Видимость = ВыводитьПок;
		// Суммы для таблицы "ТаблицаДанныеТрансляции"
		Элементы["ТаблицаДанныеТрансляцииСумма" + ЭлПок + "Дт"].Видимость = ВыводитьПок;
		Элементы["ТаблицаДанныеТрансляцииСумма" + ЭлПок + "Кт"].Видимость = ВыводитьПок;
	КонецЦикла;
	
	// Данные шапки
	//ПриемникХозрасчетный   = Объект.РегистрПриемник.ИмяОбъекта = "Хозрасчетный";
	ПриемникМеждународный  = Объект.РегистрПриемник.ИмяОбъекта = "бит_Дополнительный_2";
	ПриемникБюджетирование = Объект.РегистрПриемник.ИмяОбъекта = "бит_Бюджетирование";
	
	Элементы.Сценарий.Видимость = ПриемникБюджетирование; 
	
	Элементы.СтраницаВНА.Видимость = ПриемникМеждународный;
	
КонецПроцедуры // УстановитьВидимостьДоступность()

// Функция формирует список регистров бухгалтерии.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   СписокЗначений
// 
&НаСервере
Функция СформироватьСписокДоступныхРегистровБухгалтерии(ТолькоБит = Ложь, ЭтоБюдж = Ложь)

	СписокОбъектовСистемы = Новый СписокЗначений;
	       		
	РегистрыМета = Новый Массив;
	
	Если ЭтоБюдж Тогда
		
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Бюджетирование);	
		
	Иначе	      	
	
		Если НЕ ТолькоБит И Метаданные.РегистрыБухгалтерии.Найти("Хозрасчетный") <> Неопределено Тогда
			РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный);
		КонецЕсли; 		
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_1);
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2);
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_3);
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_4);
		РегистрыМета.Добавить(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_5);
		
	КонецЕсли;
	
	Для каждого МетаОбъект Из РегистрыМета Цикл
		
		ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
		Если ЗначениеЗаполнено(ОбъектСистемы) Тогда  			
			СписокОбъектовСистемы.Добавить(ОбъектСистемы);			
		КонецЕсли; 
		
	КонецЦикла; 
		
	Возврат СписокОбъектовСистемы;
 	
КонецФункции // СформироватьСписокДоступныхРегистровБухгалтерии()

// Функция проверяет заполненность реквизитов
//
// Параметры:
//  ПроверитьВалютуМСФО - Булево (По умолчанию = Ложь).
//  
// Возвращаемое значение:
//   Булево.
//
&НаКлиенте
Функция ПроверкаЗаполненыРеквизиты(ПроверитьВалютуМСФО = Ложь)

	ЗаполненыРеквизиты = Истина;
    
    Если НЕ ЗначениеЗаполнено(Объект.РегистрИсточник) ИЛИ НЕ ЗначениеЗаполнено(Объект.РегистрПриемник) Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо заполнить регистры.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 			
	    ЗаполненыРеквизиты = Ложь;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
        ЗаполненыРеквизиты = Ложь;	
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект.Организация) Тогда
        Если ПроверитьВалютуМСФО И бит_ОбщегоНазначения.ЕстьМСФО()
            И ЗначениеЗаполнено(Объект.РегистрПриемник) И фИмяРегПриемника = "бит_Дополнительный_2" Тогда
            ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
            Если НЕ ЗначениеЗаполнено(ВалютаМСФО) Тогда
                ЗаполненыРеквизиты = Ложь;
            КонецЕсли;            
        КонецЕсли;
    КонецЕсли;
   
	Возврат ЗаполненыРеквизиты;
	
КонецФункции // ПроверкаЗаполненыРеквизиты() 
    
#Область ФормированиеТаблиц

// Функция формирует список балансовых ресурсов.
//
// Параметры:
//  ИмяРегистра - Строка
//
&НаСервере
Функция ПолучитьСписокБалансовыхРесурсов(ИмяРегистра)

	СписокРесурсов = Новый СписокЗначений;
	МетаРегБух = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	Для каждого МетаРес Из МетаРегБух.Ресурсы Цикл
		ИмяРес = МетаРес.Имя;
		Если МетаРес.Балансовый Тогда
			СписокРесурсов.Добавить(ИмяРес, ?(ИмяРес = "Сумма", "СуммаРегл", ИмяРес));
		КонецЕсли;		
	КонецЦикла;
	
	Возврат СписокРесурсов;

КонецФункции // ПолучитьСписокБалансовыхРесурсов()

// Процедура обрабатывает выборку остатка.
//
// Параметры:
//  ВыборкаГрупп
//  СчетРодитель
//
&НаСервере
Процедура ОбработатьВыборкуОстатка(ВыборкаГрупп, СчетРодитель, Группа = 1)

	Пока ВыборкаГрупп.Следующий() Цикл

		ТипЗаписи = ВыборкаГрупп.ТипЗаписи();
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоГруппировке И СчетРодитель = ВыборкаГрупп.СчетПриемника Тогда
			Продолжить;
		КонецЕсли;

		Если ВыборкаГрупп.СчетПриемникаЗабалансовый Тогда
			СтрокиОстатка = ЗабалансовыеСчета.НайтиСтроки(Новый Структура("СчетПриемника", ВыборкаГрупп.СчетПриемника));
		Иначе
			СтрокиОстатка = ОсновныеСчета.НайтиСтроки(Новый Структура("СчетПриемника", ВыборкаГрупп.СчетПриемника));
		КонецЕсли;

		Если СтрокиОстатка.Количество() > 0 Тогда
			СтрокаОстатка = СтрокиОстатка[0];
			ЗаполнитьЗначенияСвойств(СтрокаОстатка, ВыборкаГрупп);
			СтрокаОстатка.Группа = "Группа_" + Группа;
		КонецЕсли;
		
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ВыборкаГруппВетка = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "СчетПриемника");
			ОбработатьВыборкуОстатка(ВыборкаГруппВетка, ВыборкаГрупп.СчетПриемника, Группа);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетРодитель) Тогда
			Группа = Группа + 1;
		КонецЕсли; 		

	КонецЦикла;

КонецПроцедуры // ОбработатьВыборкуОстатка()

// Процедура заполняет счета приемника в таблицах ОсновныеСчета и ЗабалансовыеСчета.
//
&НаСервере
Процедура ЗаполнитьСчетаПриемника()

	ОсновныеСчета.Очистить();
	ЗабалансовыеСчета.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрПриемник) Тогда
		Возврат;
	КонецЕсли;  
	
	ДатаВводаОстатков = Новый Граница(КонецДня(Объект.ДатаВводаОстатков), ВидГраницы.Включая);
	
	МассивИсключений = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ВспомогательныйСчет) Тогда
		МассивИсключений.Добавить(Объект.ВспомогательныйСчет);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков"	, ДатаВводаОстатков);
	Запрос.УстановитьПараметр("Организация" 	, Объект.Организация);
	Запрос.УстановитьПараметр("НадписьРегл"     , "Регл.:");
	Запрос.УстановитьПараметр("НадписьУпр"      , "Упр.:");
	Запрос.УстановитьПараметр("НадписьМУ"       , "МУ.:");
	Запрос.УстановитьПараметр("НадписьСценарий" , "Сцен.:");
	Запрос.УстановитьПараметр("МассивИсключений", МассивИсключений);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовПриемник.Ссылка   КАК СчетПриемника,
	|	ПланСчетовПриемник.Наименование,
	|	ПланСчетовПриемник.Порядок  КАК Порядок,
	|	ПланСчетовПриемник.Код 		КАК Код,
	|	ПланСчетовПриемник.Валютный КАК Валютный,
	|	ПланСчетовПриемник.Забалансовый КАК Забалансовый,
	|	ПланСчетовПриемник.ЗапретитьИспользоватьВПроводках,
	|	ПланСчетовПриемник.Вид КАК СчетВид,
	|	ВЫБОР
	|		КОГДА ПланСчетовПриемник.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА 0
	|		КОГДА ПланСчетовПриемник.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинки,
	|	&НадписьРегл 	 КАК НадписьРегл,
	|	&НадписьУпр  	 КАК НадписьУпр,
	|	&НадписьМУ   	 КАК НадписьМУ,
	|	&НадписьСценарий КАК НадписьСценарий
	|ИЗ
	|	ПланСчетов." + фИмяРегПриемника + " КАК ПланСчетовПриемник
	|ГДЕ
	|	ПланСчетовПриемник.Забалансовый = ЛОЖЬ
	|   И ПланСчетовПриемник.Ссылка НЕ В(&МассивИсключений)
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетовПриемник.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовПриемник.Ссылка   КАК СчетПриемника,
	|	ПланСчетовПриемник.Наименование,
	|	ПланСчетовПриемник.Порядок  КАК Порядок,
	|	ПланСчетовПриемник.Код 		КАК Код,
	|	ПланСчетовПриемник.Валютный КАК Валютный,
	|	ПланСчетовПриемник.Забалансовый КАК Забалансовый,
	|	ПланСчетовПриемник.ЗапретитьИспользоватьВПроводках,
	|	ПланСчетовПриемник.Вид КАК СчетВид,
	|	ВЫБОР
	|		КОГДА ПланСчетовПриемник.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА 0
	|		КОГДА ПланСчетовПриемник.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинки,
	|	&НадписьРегл 	 КАК НадписьРегл,
	|	&НадписьУпр  	 КАК НадписьУпр,
	|	&НадписьМУ   	 КАК НадписьМУ,
	|	&НадписьСценарий КАК НадписьСценарий
	|ИЗ
	|	ПланСчетов." + фИмяРегПриемника + " КАК ПланСчетовПриемник
	|ГДЕ
	|	ПланСчетовПриемник.Забалансовый = ИСТИНА
	|   И ПланСчетовПриемник.Ссылка НЕ В(&МассивИсключений)
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетовПриемник.Порядок
	|";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();

	ОсновныеСчета.Загрузить(ПакетРезультатов[0].Выгрузить());
	ЗабалансовыеСчета.Загрузить(ПакетРезультатов[1].Выгрузить());
	
КонецПроцедуры // ЗаполнитьСчетаПриемника()

// Процедура заполняет суммы приемника в таблицах ОсновныеСчета и ЗабалансовыеСчета.
//
&НаСервере
Процедура ЗаполнитьДанныеПриемника()
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрПриемник) И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОсновныеСчета.Количество() = 0 И ЗабалансовыеСчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВводаОстатков = Новый Граница(КонецДня(Объект.ДатаВводаОстатков), ВидГраницы.Включая);
	//ДатаВводаОстатков = Объект.ДатаВводаОстатков + 86400;
	
	//ЭтотПриемникХозрасчетный   = фИмяРегПриемника = "Хозрасчетный";
	ЭтотПриемникМеждународный  = фИмяРегПриемника = "бит_Дополнительный_2";
	ЭтотПриемникБюджетирование = фИмяРегПриемника = "бит_Бюджетирование";
		 	
	ТекстПоля1 = "";
	ТекстПоля2 = "";
	ТекстИтоги = "";
	
	// Список балансовых ресурсов для формирования текста запроса
	СписокРесурсов = ПолучитьСписокБалансовыхРесурсов(фИмяРегПриемника);
	Окончание = "_П";

	Для каждого ЭлСпРес Из СписокРесурсов Цикл
		ИмяРес 		  = ЭлСпРес.Значение;
		ИмяРесСиноним = ЭлСпРес.Представление;
		// Формирование блоков текста запроса, относящихся к ресурсам
		ТекстПоля1 = 
				ТекстПоля1 + "
				|	 ЕСТЬNULL(ВЫБОР
				|			 	КОГДА РегБухОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|				 	ТОГДА РегБухОстатки." + ИмяРес + "РазвернутыйОстатокДт
				|			 	ИНАЧЕ РегБухОстатки." + ИмяРес + "ОстатокДт
				|		 	  КОНЕЦ, 0) КАК " + ИмяРесСиноним + "Дт,
				|	 РегБухОстатки." + ИмяРес + "РазвернутыйОстатокДт КАК " + ИмяРесСиноним + "ДтРазвернутое,
				|	 ЕСТЬNULL(ВЫБОР
				|			 	КОГДА РегБухОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|				 	ТОГДА РегБухОстатки." + ИмяРес + "РазвернутыйОстатокКт
				|			 	ИНАЧЕ РегБухОстатки." + ИмяРес + "ОстатокКт
				|		 	  КОНЕЦ, 0) КАК " + ИмяРесСиноним + "Кт,
				|	 РегБухОстатки." + ИмяРес + "РазвернутыйОстатокКт КАК " + ИмяРесСиноним + "КтРазвернутое,";
		ТекстПоля2 = 
				ТекстПоля2 + "
				|   ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "Дт, 0) КАК " + ИмяРесСиноним + "Дт" + Окончание + ",
				|	ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "Кт, 0) КАК " + ИмяРесСиноним + "Кт" + Окончание + ",
				|	ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "ДтРазвернутое, 0) КАК " + ИмяРесСиноним + "ДтРазвернутое,
				|	ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "КтРазвернутое, 0) КАК " + ИмяРесСиноним + "КтРазвернутое,
				|	ВЫБОР
				|		КОГДА ПланСчетовПриемник.Забалансовый = ЛОЖЬ
				|			ТОГДА ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "ДтРазвернутое, 0)
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК " + ИмяРесСиноним + "ДтРазвернутоеПоОсновнымСчетам,
				|	ВЫБОР
				|		КОГДА ПланСчетовПриемник.Забалансовый = ЛОЖЬ
				|			ТОГДА ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "КтРазвернутое, 0)
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК " + ИмяРесСиноним + "КтРазвернутоеПоОсновнымСчетам,
				|	ВЫБОР
				|	 	КОГДА ПланСчетовПриемник.Забалансовый = ИСТИНА
				|	 		ТОГДА ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "ДтРазвернутое, 0)
				|	 	ИНАЧЕ 0
				|	КОНЕЦ КАК " + ИмяРесСиноним + "ДтРазвернутоеПоЗабалансовымСчетам,
				|	ВЫБОР
				|		КОГДА ПланСчетовПриемник.Забалансовый = ИСТИНА
				|		 ТОГДА ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "КтРазвернутое, 0)
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК " + ИмяРесСиноним + "КтРазвернутоеПоЗабалансовымСчетам,";						
		
	      ТекстИтоги = 
		  		ТекстИтоги + "	 
				|	СУММА(" + ИмяРесСиноним + "Дт" + Окончание + "),
				|	СУММА(" + ИмяРесСиноним + "Кт" + Окончание + "),
				|	СУММА(" + ИмяРесСиноним + "ДтРазвернутое),
				| 	СУММА(" + ИмяРесСиноним + "КтРазвернутое),
				|	СУММА(" + ИмяРесСиноним + "ДтРазвернутоеПоОсновнымСчетам),
				|	СУММА(" + ИмяРесСиноним + "КтРазвернутоеПоОсновнымСчетам),
				|	СУММА(" + ИмяРесСиноним + "ДтРазвернутоеПоЗабалансовымСчетам),
				|	СУММА(" + ИмяРесСиноним + "КтРазвернутоеПоЗабалансовымСчетам),";
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаВводаОстатков);
	Запрос.УстановитьПараметр("Организация" , Объект.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовПриемник.Ссылка   	КАК СчетПриемника,
	|	ПланСчетовПриемник.Наименование,
	|	ПланСчетовПриемник.Порядок  	КАК Порядок,
	|	ПланСчетовПриемник.Код 			КАК Код,
	|	ПланСчетовПриемник.Валютный 	КАК Валютный,
	|	ПланСчетовПриемник.Забалансовый КАК Забалансовый,	
	|	ПланСчетовПриемник.Вид 			КАК СчетВид,
	|	ПланСчетовПриемник.ЗапретитьИспользоватьВПроводках
	|ПОМЕСТИТЬ ПланСчетовПрм
	|ИЗ
	|	ПланСчетов." + фИмяРегПриемника + " КАК ПланСчетовПриемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегБухОстатки.Счет 								КАК СчетПриемника,
	|	РегБухОстатки.Счет.Порядок 						КАК Порядок,
	|	РегБухОстатки.Счет.Валютный 					КАК Валютный,
	|	РегБухОстатки.Счет.Забалансовый 				КАК Забалансовый,
	|	РегБухОстатки.Счет.Вид КАК СчетВид,                              	
	// Балансовые ресурсы
	|" + ТекстПоля1 + "
	|	РегБухОстатки.Счет.ЗапретитьИспользоватьВПроводках
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии." + фИмяРегПриемника + ".Остатки(
	|		&ДатаОстатков,
	|		Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ПланСчетовПриемник.СчетПриемника ИЗ ПланСчетовПрм КАК ПланСчетовПриемник),
	|		,
	|			Организация = &Организация
	//|				" + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "И Подразделение = &Подразделение", "") + "
	|			) КАК РегБухОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегБухОстатки.Счет.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовПриемник.СчетПриемника					КАК СчетПриемника,
	|	ПланСчетовПриемник.Порядок 							КАК Порядок,
	|	ПланСчетовПриемник.Валютный 						КАК Валютный,
	|	ПланСчетовПриемник.Забалансовый 					КАК СчетПриемникаЗабалансовый,  	
	|	ПланСчетовПриемник.СчетВид 							КАК СчетВид, 	
	|" + ТекстПоля2 + "
	|	ПланСчетовПриемник.ЗапретитьИспользоватьВПроводках 	КАК ЭтоГруппа
	|ИЗ
	|	ПланСчетовПрм КАК ПланСчетовПриемник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК РегБухОстатки
	|		ПО (РегБухОстатки.СчетПриемника = ПланСчетовПриемник.СчетПриемника)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегБухОстатки.Порядок
	|ИТОГИ
	|" + ТекстИтоги + "
	|	МАКСИМУМ(Валютный),
	|	МАКСИМУМ(СчетПриемникаЗабалансовый)
	|ПО
	|	ОБЩИЕ,
	|	СчетПриемника ИЕРАРХИЯ
	|";       
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаГрупп = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "СчетПриемника");
	ОбработатьВыборкуОстатка(ВыборкаГрупп, Неопределено);

	ВыборкаОбщие = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ОБЩИЕ");
	ВыборкаОбщие.Следующий();
	Для каждого ЭлСпРес Из СписокРесурсов Цикл
		ИмяРесСиноним = ЭлСпРес.Представление;
		Элементы["ОсновныеСчета" + ИмяРесСиноним + "Дт" + Окончание].ТекстПодвала     = Формат(ВыборкаОбщие[ИмяРесСиноним + "ДтРазвернутоеПоОсновнымСчетам"], "ЧДЦ=2; ЧН=' '") ;
		Элементы["ОсновныеСчета" + ИмяРесСиноним + "Кт" + Окончание].ТекстПодвала     = Формат(ВыборкаОбщие[ИмяРесСиноним + "КтРазвернутоеПоОсновнымСчетам"], "ЧДЦ=2; ЧН=' '");
		Элементы["ЗабалансовыеСчета" + ИмяРесСиноним + "Дт" + Окончание].ТекстПодвала = Формат(ВыборкаОбщие[ИмяРесСиноним + "ДтРазвернутоеПоЗабалансовымСчетам"], "ЧДЦ=2; ЧН=' '");
		Элементы["ЗабалансовыеСчета" + ИмяРесСиноним + "Кт" + Окончание].ТекстПодвала = Формат(ВыборкаОбщие[ИмяРесСиноним + "КтРазвернутоеПоЗабалансовымСчетам"], "ЧДЦ=2; ЧН=' '");		
	КонецЦикла;
			
КонецПроцедуры // ЗаполнитьДанныеПриемника()

// Процедура заполняет суммы источника в таблицах ОсновныеСчета и ЗабалансовыеСчета.
// А также формирует таблицу данных трансляции.
//
&НаСервере
Процедура ЗаполнитьЧерезТрансляциюСервер()
	
	// Очистка таблицы с даными трансляции
	Объект.ТаблицаДанныеТрансляции.Очистить();
	
	Если ОсновныеСчета.Количество() = 0 И ЗабалансовыеСчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка старых сумм в основных таблицах
	Для каждого СтТаб Из ОсновныеСчета Цикл
		СтТаб.СуммаРеглДт 	  = 0;
		СтТаб.СуммаРеглКт 	  = 0;
	    СтТаб.СуммаУпрДт 	  = 0;
		СтТаб.СуммаУпрКт 	  = 0;
		СтТаб.СуммаМУДт  	  = 0;
		СтТаб.СуммаМУКт  	  = 0;
	    СтТаб.СуммаСценарийДт = 0;
		СтТаб.СуммаСценарийКт = 0;
	КонецЦикла;
	Для каждого СтТаб Из ЗабалансовыеСчета Цикл
		СтТаб.СуммаРеглДт 	  = 0;
		СтТаб.СуммаРеглКт 	  = 0;
	    СтТаб.СуммаУпрДт 	  = 0;
		СтТаб.СуммаУпрКт 	  = 0;
		СтТаб.СуммаМУДт  	  = 0;
		СтТаб.СуммаМУКт  	  = 0;
	    СтТаб.СуммаСценарийДт = 0;
		СтТаб.СуммаСценарийКт = 0;
	КонецЦикла;	
	
	ЭтотИсточникХозрасчетный   = фИмяРегИсточника = "Хозрасчетный";
	ЭтотИсточникМеждународный  = фИмяРегИсточника = "бит_Дополнительный_2";
	ЭтотИсточникБюджетирование = фИмяРегИсточника = "бит_Бюджетирование";
	
	//ЭтотПриемникХозрасчетный   = фИмяРегПриемника = "Хозрасчетный";
	ЭтотПриемникМеждународный  = фИмяРегПриемника = "бит_Дополнительный_2";
	ЭтотПриемникБюджетирование = фИмяРегПриемника = "бит_Бюджетирование";
		
	ДатаВводаОстатков = Объект.ДатаВводаОстатков + 86400;
	
	ТекстПоля1 = "";
	ТекстПоля2 = "";
	ТекстИтоги = "";
	
	// Список балансовых ресурсов для формирования текста запроса
	СписокРесурсов = ПолучитьСписокБалансовыхРесурсов(фИмяРегИсточника);
	
	Для каждого ЭлСпРес Из СписокРесурсов Цикл
		ИмяРес 		  = ЭлСпРес.Значение;
		ИмяРесСиноним = ЭлСпРес.Представление;
		// Формирование блоков текста запроса, относящихся к ресурсам
		ТекстПоля1 = 
				ТекстПоля1 + "	 
				|	ЕСТЬNULL(ВЫБОР
				|			 	КОГДА РегБухОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|				 	ТОГДА РегБухОстатки." + ИмяРес + "РазвернутыйОстатокДт
				|			 	ИНАЧЕ РегБухОстатки." + ИмяРес + "ОстатокДт
				|		 	 КОНЕЦ, 0) КАК " + ИмяРесСиноним + "Дт,
				|	РегБухОстатки." + ИмяРес + "РазвернутыйОстатокДт КАК " + ИмяРесСиноним + "ДтРазвернутое,
				|	ЕСТЬNULL(ВЫБОР
				|			 	КОГДА РегБухОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
				|				 	ТОГДА РегБухОстатки." + ИмяРес + "РазвернутыйОстатокКт
				|			 	ИНАЧЕ РегБухОстатки." + ИмяРес + "ОстатокКт
				|		 	 КОНЕЦ, 0) КАК " + ИмяРесСиноним + "Кт,
				|	РегБухОстатки." + ИмяРес + "РазвернутыйОстатокКт КАК " + ИмяРесСиноним + "КтРазвернутое,";
		ТекстПоля2 = 
				ТекстПоля2 + "   
				|	ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "Дт, 0) КАК " + ИмяРесСиноним + "Дт,
				|	ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "Кт, 0) КАК " + ИмяРесСиноним + "Кт,
				|	ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "ДтРазвернутое, 0) КАК " + ИмяРесСиноним + "ДтРазвернутое,
				|	ЕСТЬNULL(РегБухОстатки." + ИмяРесСиноним + "КтРазвернутое, 0) КАК " + ИмяРесСиноним + "КтРазвернутое,";						
		
	    ТекстИтоги = ТекстИтоги + "
		  	|	 СУММА(" + ИмяРесСиноним + "Дт),
			|	 СУММА(" + ИмяРесСиноним + "Кт),
			|	 СУММА(" + ИмяРесСиноним + "ДтРазвернутое),
			|	 СУММА(" + ИмяРесСиноним + "КтРазвернутое),";
	КонецЦикла;
	// Формирование блоков текста запроса, относящихся к субконто
	ТекстПоля1 = ТекстПоля1 + "
	|РегБухОстатки.Субконто1 КАК СубконтоИсточника1,
	|РегБухОстатки.Субконто2 КАК СубконтоИсточника2,
	|РегБухОстатки.Субконто3 КАК СубконтоИсточника3";
	ТекстПоля2 = ТекстПоля2 + "
	|РегБухОстатки.СубконтоИсточника1 КАК СубконтоИсточника1,
	|РегБухОстатки.СубконтоИсточника2 КАК СубконтоИсточника2,
	|РегБухОстатки.СубконтоИсточника3 КАК СубконтоИсточника3";
	Если НЕ ЭтотИсточникХозрасчетный Тогда
		ТекстПоля1 = ТекстПоля1 + ",
		|РегБухОстатки.Субконто4 КАК СубконтоИсточника4";
		ТекстПоля2 = ТекстПоля2 + ",
		|РегБухОстатки.СубконтоИсточника4 КАК СубконтоИсточника4";
	КонецЕсли;
	
	// Запрос на получение остатков по регистру-источнику
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаВводаОстатков);
	Запрос.УстановитьПараметр("Организация" , Объект.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовИсточник.Ссылка   						КАК СчетИсточника,
	|	ПланСчетовИсточник.Порядок  						КАК Порядок,
	|	ПланСчетовИсточник.Код 								КАК Код,
	|	ПланСчетовИсточник.Валютный 						КАК Валютный,
	|	ПланСчетовИсточник.Количественный 					КАК Количественный,
	|	ПланСчетовИсточник.Забалансовый 					КАК Забалансовый,
	|	ПланСчетовИсточник.Вид 								КАК СчетВид,
	|	ПланСчетовИсточник.ЗапретитьИспользоватьВПроводках
	|ПОМЕСТИТЬ ПланСчетовИст
	|ИЗ
	|	ПланСчетов." + фИмяРегИсточника + " КАК ПланСчетовИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегБухОстатки.Счет 								КАК СчетИсточника,
	|	РегБухОстатки.Счет.Порядок 						КАК Порядок,
	|	РегБухОстатки.Счет.Валютный 					КАК Валютный,
	|	РегБухОстатки.Счет.Забалансовый 				КАК Забалансовый,
	|	РегБухОстатки.Счет.Вид КАК СчетВид,
	|	РегБухОстатки.Счет.ЗапретитьИспользоватьВПроводках,
	// Валюты и валютные суммы
	|	РегБухОстатки.Валюта, 
	|   ЕСТЬNULL(ВЫБОР
	|			КОГДА РегБухОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|				ТОГДА РегБухОстатки.ВалютнаяСуммаРазвернутыйОстатокДт
	|			ИНАЧЕ РегБухОстатки.ВалютнаяСуммаОстатокДт
	|		КОНЕЦ, 0) КАК ВалютнаяСуммаДт,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РегБухОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|				ТОГДА РегБухОстатки.ВалютнаяСуммаРазвернутыйОстатокКт
	|			ИНАЧЕ РегБухОстатки.ВалютнаяСуммаОстатокКт
	|		КОНЕЦ, 0) КАК ВалютнаяСуммаКт,
	// Количество
	|   ЕСТЬNULL(ВЫБОР
	|			КОГДА РегБухОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|				ТОГДА РегБухОстатки.КоличествоРазвернутыйОстатокДт
	|			ИНАЧЕ РегБухОстатки.КоличествоОстатокДт
	|		КОНЕЦ, 0) КАК КоличествоДт,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РегБухОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|				ТОГДА РегБухОстатки.КоличествоРазвернутыйОстатокКт
	|			ИНАЧЕ РегБухОстатки.КоличествоОстатокКт
	|		КОНЕЦ, 0) КАК КоличествоКт,
	// Балансовые ресурсы и субконто
	|	" + ТекстПоля1 + "
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии." + фИмяРегИсточника + ".Остатки(
	|		&ДатаОстатков,
	|		Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ПланСчетовИст.СчетИсточника ИЗ ПланСчетовИст КАК ПланСчетовИст),
	|		,
	|			Организация = &Организация
	//|				" + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "И Подразделение = &Подразделение", "") + "
	|			) КАК РегБухОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегБухОстатки.Счет.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовИсточник.СчетИсточника					КАК СчетИсточника,
	|	ПланСчетовИсточник.Порядок 							КАК Порядок,
	|	ПланСчетовИсточник.Валютный 						КАК СчетИсточникаВалютный,
	|	ПланСчетовИсточник.Количественный					КАК СчетИсточникаКоличественный,
	|	ПланСчетовИсточник.Забалансовый 					КАК СчетИсточникаЗабалансовый,  	
	|	ПланСчетовИсточник.СчетВид 							КАК СчетВид,
	|	ПланСчетовИсточник.ЗапретитьИспользоватьВПроводках 	КАК ЭтоГруппа,
	|	РегБухОстатки.Валюта,
	|	ЕСТЬNULL(РегБухОстатки.ВалютнаяСуммаДт, 0) КАК ВалютнаяСуммаДт,
	|	ЕСТЬNULL(РегБухОстатки.ВалютнаяСуммаКт, 0) КАК ВалютнаяСуммаКт,
	|	ЕСТЬNULL(РегБухОстатки.КоличествоДт, 0)    КАК КоличествоДт,
	|	ЕСТЬNULL(РегБухОстатки.КоличествоКт, 0)    КАК КоличествоКт,
	|	" + ТекстПоля2 + "
	|ИЗ
	|	ПланСчетовИст КАК ПланСчетовИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК РегБухОстатки
	|		ПО (РегБухОстатки.СчетИсточника = ПланСчетовИсточник.СчетИсточника)
	|
	|ГДЕ
	|	РегБухОстатки.СуммаРеглДт <> 0
	|	ИЛИ РегБухОстатки.СуммаРеглКт <> 0
	|УПОРЯДОЧИТЬ ПО
	|	РегБухОстатки.Порядок, РегБухОстатки.СубконтоИсточника1, РегБухОстатки.СубконтоИсточника2, РегБухОстатки.СубконтоИсточника3
	|";       
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИст = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаИст.Следующий() Цикл
		
		СтрокаДанных = Объект.ТаблицаДанныеТрансляции.Добавить();

		ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаИст);	
		
		//----------------------------------------------------------------------------------------
		// Трансляция
		
		СтруктураСчетов	= бит_МеханизмТрансляции.КонструкторПараметровПодбораСчетов();
		СтруктураСчетов.ТекущийОбъект         = Неопределено;
		СтруктураСчетов.ОбработкаБезДокумента = Истина;
		СтруктураСчетов.Счет                  = СтрокаДанных.СчетИсточника;
		Если ЗначениеЗаполнено(СтрокаДанных.СубконтоИсточника1) Тогда
			СтруктураСчетов.Субконто1 = СтрокаДанных.СубконтоИсточника1;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДанных.СубконтоИсточника2) Тогда
			СтруктураСчетов.Субконто2 = СтрокаДанных.СубконтоИсточника2;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДанных.СубконтоИсточника3) Тогда
			СтруктураСчетов.Субконто3 = СтрокаДанных.СубконтоИсточника3;
		КонецЕсли;
		Если// НЕ ЭтотПриемникХозрасчетный И 
			ЗначениеЗаполнено(СтрокаДанных.СубконтоИсточника4) Тогда
			СтруктураСчетов.Субконто4 = СтрокаДанных.СубконтоИсточника4;
		КонецЕсли;
				
		СтруктураСчетовПриемник = бит_МеханизмТрансляции.ВыполнитьПодборСчетов(СтруктураСчетов
																				, Объект.Организация
																				, ДатаВводаОстатков
																				, фИмяРегИсточника
																				, фИмяРегПриемника);	
																				
		// Заполнение данных приемника
		Если ЗначениеЗаполнено(СтруктураСчетовПриемник.Счет) Тогда
			
			СтрокаДанных.СчетПриемника = СтруктураСчетовПриемник.Счет;
            
            СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаДанных.СчетПриемника);
            
			СтрокаДанных.СчетПриемникаЗабалансовый   = СвСч.Забалансовый;
			СтрокаДанных.СчетПриемникаВалютный	     = СвСч.Валютный;
			СтрокаДанных.СчетПриемникаКоличественный = СвСч.Количественный;
		 		
			Если НЕ СтрокаДанных.СчетПриемникаКоличественный Тогда
				СтрокаДанных.КоличествоДт = 0;
				СтрокаДанных.КоличествоКт = 0;
			КонецЕсли;
			Если СтрокаДанных.СчетПриемникаВалютный Тогда
				Если НЕ СтрокаДанных.СчетИсточникаВалютный И НЕ ЗначениеЗаполнено(СтрокаДанных.Валюта) Тогда
					СтрокаДанных.Валюта 	     = Объект.ВалютаРегламентированногоУчета;
					СтрокаДанных.ВалютнаяСуммаДт = СтрокаДанных.СуммаРеглДт;
					СтрокаДанных.ВалютнаяСуммаКт = СтрокаДанных.СуммаРеглКт;
				КонецЕсли;
			Иначе
				СтрокаДанных.Валюта 	     = Справочники.Валюты.ПустаяСсылка();
				СтрокаДанных.ВалютнаяСуммаДт = 0;
				СтрокаДанных.ВалютнаяСуммаКт = 0;
			КонецЕсли; 			
			
			Если ЭтотПриемникБюджетирование Тогда
			
				Если ЗначениеЗаполнено(СтруктураСчетовПриемник.ЦФО) Тогда
					СтрокаДанных.ЦФО = СтруктураСчетовПриемник.ЦФО;
				Иначе	
					РезМассив = бит_Бюджетирование.СвязанныеЦФОИПодразделения(Объект.Организация);		
					Если РезМассив.Количество() <> 0 Тогда  					
						Если ТипЗнч(РезМассив[0]) = Тип("СправочникСсылка.Подразделения") Тогда				
							СтрокаДанных.ЦФО = РезМассив[0];				
						КонецЕсли;  
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
					
			Если ЗначениеЗаполнено(СтруктураСчетовПриемник.Субконто1) Тогда
				СтрокаДанных.СубконтоПриемника1 = СтруктураСчетовПриемник.Субконто1;
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтруктураСчетовПриемник.Субконто2) Тогда
				СтрокаДанных.СубконтоПриемника2 = СтруктураСчетовПриемник.Субконто2;
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтруктураСчетовПриемник.Субконто3) Тогда
				СтрокаДанных.СубконтоПриемника3 = СтруктураСчетовПриемник.Субконто3;
			КонецЕсли;
			Если //НЕ ЭтотПриемникХозрасчетный И 
				ЗначениеЗаполнено(СтруктураСчетовПриемник.Субконто4) Тогда
				СтрокаДанных.СубконтоПриемника4 = СтруктураСчетовПриемник.Субконто4;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// ----------------------------------------------------------------------------------------------------
	// Перенос данных трансляции в основные таблицы
	
	Если Объект.ТаблицаДанныеТрансляции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТзДанныхТрансляции = Объект.ТаблицаДанныеТрансляции.Выгрузить();	
	ТзДанныхТрансляции.Свернуть("СчетПриемника", "СуммаРеглДт, СуммаРеглКт, СуммаУпрДт, СуммаУпрКт, СуммаМУДт, СуммаМУКт, СуммаСценарийДт, СуммаСценарийКт,
								|СуммаРеглДтРазвернутое, СуммаРеглКтРазвернутое, СуммаУпрДтРазвернутое, СуммаУпрКтРазвернутое, СуммаМУДтРазвернутое, СуммаМУКтРазвернутое, СуммаСценарийДтРазвернутое, СуммаСценарийКтРазвернутое"); 
                        
	ТекстПоля1 = "";
	ТекстПоля2 = "";
	ТекстИтоги = "";
	
	// Список балансовых ресурсов для формирования текста запроса
	СписокРесурсов = ПолучитьСписокБалансовыхРесурсов(фИмяРегПриемника);

	Для каждого ЭлСпРес Из СписокРесурсов Цикл
		ИмяРес 		  = ЭлСпРес.Значение;
		ИмяРесСиноним = ЭлСпРес.Представление;
		// Формирование блоков текста запроса, относящихся к ресурсам
		ТекстПоля1 = ТекстПоля1 + "	 
			|	ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "Дт, 0) КАК " + ИмяРесСиноним + "Дт,
			|	ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "Кт, 0) КАК " + ИмяРесСиноним + "Кт,
			|   ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "Дт, 0) КАК " + ИмяРесСиноним + "ДтРазвернутое,
			|	ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "Кт, 0) КАК " + ИмяРесСиноним + "КтРазвернутое,";
		ТекстПоля2 = ТекстПоля2 + "
			|	ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "Дт, 0) КАК " + ИмяРесСиноним + "Дт,
			|	ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "Кт, 0) КАК " + ИмяРесСиноним + "Кт,
			|   ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "Дт, 0) КАК " + ИмяРесСиноним + "ДтРазвернутое,
			|	ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "Кт, 0) КАК " + ИмяРесСиноним + "КтРазвернутое,
			|	ВЫБОР
			|	 	КОГДА ПланСчетовПриемник.Забалансовый = ЛОЖЬ
			|			ТОГДА ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "ДтРазвернутое, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК " + ИмяРесСиноним + "ДтРазвернутоеПоОсновнымСчетам,
			|	ВЫБОР
			|		КОГДА ПланСчетовПриемник.Забалансовый = ЛОЖЬ
			|			ТОГДА ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "КтРазвернутое, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК " + ИмяРесСиноним + "КтРазвернутоеПоОсновнымСчетам,
			|	ВЫБОР
			|	 	КОГДА ПланСчетовПриемник.Забалансовый = ИСТИНА
			|	 		ТОГДА ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "ДтРазвернутое, 0)
			|	 	ИНАЧЕ 0
			|	КОНЕЦ КАК " + ИмяРесСиноним + "ДтРазвернутоеПоЗабалансовымСчетам,
			|	ВЫБОР
			|		КОГДА ПланСчетовПриемник.Забалансовый = ИСТИНА
			|		 ТОГДА ЕСТЬNULL(ДанныеТр." + ИмяРесСиноним + "КтРазвернутое, 0)
			|	 ИНАЧЕ 0
			|	КОНЕЦ КАК " + ИмяРесСиноним + "КтРазвернутоеПоЗабалансовымСчетам,";						
		
	     ТекстИтоги = ТекстИтоги + "
		    |	СУММА(" + ИмяРесСиноним + "Дт),
			|	СУММА(" + ИмяРесСиноним + "Кт),
			|	СУММА(" + ИмяРесСиноним + "ДтРазвернутое),
			|	СУММА(" + ИмяРесСиноним + "КтРазвернутое),
			|	СУММА(" + ИмяРесСиноним + "ДтРазвернутоеПоОсновнымСчетам),
			|	СУММА(" + ИмяРесСиноним + "КтРазвернутоеПоОсновнымСчетам),
			|	СУММА(" + ИмяРесСиноним + "ДтРазвернутоеПоЗабалансовымСчетам),
			|	СУММА(" + ИмяРесСиноним + "КтРазвернутоеПоЗабалансовымСчетам),";
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков"	   , ДатаВводаОстатков);
	Запрос.УстановитьПараметр("Организация" 	   , Объект.Организация);
	Запрос.УстановитьПараметр("ТзДанныхТрансляции" , ТзДанныхТрансляции);  	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовПриемник.Ссылка   	КАК СчетПриемника,
	|	ПланСчетовПриемник.Порядок  	КАК Порядок,
	|	ПланСчетовПриемник.Валютный 	КАК Валютный,
	|	ПланСчетовПриемник.Забалансовый КАК Забалансовый,	
	|	ПланСчетовПриемник.Вид 			КАК СчетВид,
	|	ПланСчетовПриемник.ЗапретитьИспользоватьВПроводках
	|ПОМЕСТИТЬ ПланСчетовПрм
	|ИЗ
	|	ПланСчетов." + фИмяРегПриемника + " КАК ПланСчетовПриемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// Балансовые ресурсы
	|" + ТекстПоля1 + "
	|	ДанныеТр.СчетПриемника КАК СчетПриемника
	|ПОМЕСТИТЬ ОстаткиТрансляции
	|ИЗ
	|	&ТзДанныхТрансляции КАК ДанныеТр
	//|ГДЕ
	//|   ДанныеТр.СчетПриемника В (ВЫБРАТЬ РАЗЛИЧНЫЕ ПланСчетовПриемник.СчетПриемника ИЗ ПланСчетовПрм КАК ПланСчетовПриемник)
	|                         
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовПриемник.СчетПриемника					КАК СчетПриемника,
	|	ПланСчетовПриемник.Порядок 							КАК Порядок,
	|	ПланСчетовПриемник.Забалансовый 					КАК СчетПриемникаЗабалансовый,  	
	|" + ТекстПоля2 + "
	|	ПланСчетовПриемник.ЗапретитьИспользоватьВПроводках 	КАК ЭтоГруппа
	|ИЗ
	|	ПланСчетовПрм КАК ПланСчетовПриемник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТрансляции КАК ДанныеТр
	|		ПО (ПланСчетовПриемник.СчетПриемника = ДанныеТр.СчетПриемника)
	|
	|ИТОГИ
	|" + ТекстИтоги + "
	//|	МАКСИМУМ(Валютный)
	|	МАКСИМУМ(СчетПриемникаЗабалансовый)
	|ПО
	|	ОБЩИЕ,
	|	СчетПриемника ИЕРАРХИЯ
	|";       
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаГрупп = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "СчетПриемника");
	ОбработатьВыборкуОстатка(ВыборкаГрупп, Неопределено);

	ВыборкаОбщие = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ОБЩИЕ");
	ВыборкаОбщие.Следующий();
	Для каждого ЭлСпРес Из СписокРесурсов Цикл
		ИмяРесСиноним = ЭлСпРес.Представление;
		Элементы["ОсновныеСчета" + ИмяРесСиноним + "Дт"].ТекстПодвала     = Формат(ВыборкаОбщие[ИмяРесСиноним + "ДтРазвернутоеПоОсновнымСчетам"], "ЧДЦ=2; ЧН=' '") ;
		Элементы["ОсновныеСчета" + ИмяРесСиноним + "Кт"].ТекстПодвала     = Формат(ВыборкаОбщие[ИмяРесСиноним + "КтРазвернутоеПоОсновнымСчетам"], "ЧДЦ=2; ЧН=' '");
		Элементы["ЗабалансовыеСчета" + ИмяРесСиноним + "Дт"].ТекстПодвала = Формат(ВыборкаОбщие[ИмяРесСиноним + "ДтРазвернутоеПоЗабалансовымСчетам"], "ЧДЦ=2; ЧН=' '");
		Элементы["ЗабалансовыеСчета" + ИмяРесСиноним + "Кт"].ТекстПодвала = Формат(ВыборкаОбщие[ИмяРесСиноним + "КтРазвернутоеПоЗабалансовымСчетам"], "ЧДЦ=2; ЧН=' '");		
	КонецЦикла;	
		
КонецПроцедуры // ЗаполнитьЧерезТрансляциюСервер()

#КонецОбласти

#Область РаботаСДокументами

// Процедура Открывает формы списков документов с отборами.
//
&НаКлиенте
Процедура ПоказатьСпискиДокументов()
    
	//ЭтотПриемникХозрасчетный   = фИмяРегПриемника = "Хозрасчетный";
	ЭтотПриемникМеждународный  = фИмяРегПриемника = "бит_Дополнительный_2";
	ЭтотПриемникБюджетирование = фИмяРегПриемника = "бит_Бюджетирование";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("бит_ПомощникВводаНачальныхОстатков", Истина);
	ПараметрыФормы.Вставить("Организация"      				    , Объект.Организация);
	ПараметрыФормы.Вставить("ДатаВводаОстатков"				    , Объект.ДатаВводаОстатков);
	
	Если ЭтотПриемникБюджетирование Тогда
    	ИмяОткрываемойФормы = "Документ.бит_ОперацияБюджетирование.ФормаСписка";
		ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
 	Иначе
        ИмяОткрываемойФормы = "Документ.бит_ОперацияУправленческий.ФормаСписка";
		ПараметрыФормы.Вставить("РегистрБухгалтерии", Объект.РегистрПриемник);
	КонецЕсли;
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, , Новый УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры // ПоказатьСпискиДокументов()

// Процедура Открывает формы списков документов ВНА с отборами.
//
// Параметры:
//  ПоказатьОС  - Булево
//  ПоказатьНМА - Булево
//
&НаКлиенте
Процедура ПоказатьСпискиДокументовВНА(ПоказатьОС, ПоказатьНМА)
    
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("бит_ПомощникВводаНачальныхОстатков", Истина);
	ПараметрыФормы.Вставить("Организация"      				    , Объект.Организация);
	ПараметрыФормы.Вставить("Дата"				    		    , Объект.ДатаВводаОстатков);
	
	Если ПоказатьОС Тогда
		ОткрытьФорму("Документ.бит_му_ПринятиеКУчетуОС.ФормаСписка" , ПараметрыФормы, , Новый УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	Если ПоказатьНМА Тогда
		ОткрытьФорму("Документ.бит_му_ПринятиеКУчетуНМА.ФормаСписка", ПараметрыФормы, , Новый УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;

КонецПроцедуры // ПоказатьСпискиДокументовВНА()

// Процедура создает новые документы и заполняет из данными из таблицы данных трансляции 
// для выбранных счетов - приемников.
//
// Параметры:
//  ИмяТаблицы - Строка
//
&НаКлиенте
Процедура ДобавитьДокументы(ИмяТаблицы)
		
	СтруктураГрупп = Новый Структура;
	МассивСчетов   = Новый Массив;
	
	// Заполнение структуры массивов счетов по группам
	// Группы заполняются ранее по счетам-родителям.
	Для каждого СтрТаб Из ЭтаФорма[ИмяТаблицы] Цикл
		
		Если СтрТаб.Выбрать И СтрТаб.СчетПриемника <> Объект.ВспомогательныйСчет Тогда
			
			ТекГруппа = СтрТаб.Группа;
			Если ТекГруппа = "" Тогда
				ТекГруппа     = "ПустаяГруппа";
				СтрТаб.Группа = ТекГруппа;
			КонецЕсли;
			Если СтруктураГрупп.Свойство(ТекГруппа) Тогда
				МассивСчетов = СтруктураГрупп[ТекГруппа];
			Иначе
				МассивСчетов = Новый Массив;
			КонецЕсли;
			
			МассивСчетов.Добавить(СтрТаб.СчетПриемника);
			
			СтруктураГрупп.Вставить(ТекГруппа, МассивСчетов);  					
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если СтруктураГрупп.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;  	
		
	СоздатьНовыеДокументы(СтруктураГрупп); 	
		
КонецПроцедуры // ДобавитьДокументы()

// Процедура создает новый документ - операцию.
//
// Параметры:
//  СтруктураЗаполнения - Структура.
//  СтруктураГрупп	    - Структура.
//
&НаСервере
Процедура СоздатьНовыеДокументы(СтруктураГрупп)

	ЭтотПриемникБюджетирование = фИмяРегПриемника = "бит_Бюджетирование";
	
	// Создание документа бит_Операция*	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Организация", Объект.Организация);
	СтруктураЗаполнения.Вставить("Дата"       , Объект.ДатаВводаОстатков);
	//СтруктураЗаполнения.Вставить("Содержание" , "Ввод начальных остатков");
	
	Если ЭтотПриемникБюджетирование Тогда
		ИмяДок = "бит_ОперацияБюджетирование";
	Иначе
	    ИмяДок = "бит_ОперацияУправленческий";
		СтруктураЗаполнения.Вставить("РегистрБухгалтерии", Объект.РегистрПриемник);
	КонецЕсли;
	
	Для каждого КлЗнч Из СтруктураГрупп Цикл
		
		МассивСчетов = КлЗнч.Значение;
		
		// Формирование таблицы данных по массиву счетов
		ТаблицаДанных = СформироватьТаблицуДанныхОперации(МассивСчетов);
		Если ТаблицаДанных.Количество() = 0 Тогда
			Продолжить;		
		КонецЕсли;
		
		УпакованнаяТаблица = бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаДанных);
		Если УпакованнаяТаблица <> Неопределено Тогда
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Хранилище"		  , УпакованнаяТаблица);
			СтруктураДанных.Вставить("ОчищатьТабЧасть"	  , Истина);
			СтруктураДанных.Вставить("ДатаТрансляции"     , Объект.ДатаВводаОстатков);
			СтруктураДанных.Вставить("ДополнительныйСчет" , Объект.ВспомогательныйСчет);
			СтруктураЗаполнения.Вставить("СтруктураДанных", СтруктураДанных);
			
			// Комментарий - список счетов 			
			Если МассивСчетов.Количество() = 1 Тогда
				СодержаниеДок = "Ввод начальных остатков по счету: " + МассивСчетов[0];
			Иначе  			
				СодержаниеДок = "";
				Для каждого ЭлСчет Из МассивСчетов Цикл
					СодержаниеДок = ?(СодержаниеДок = "", "Ввод начальных остатков по счетам: " + ЭлСчет, СодержаниеДок + ", " + ЭлСчет);
				КонецЦикла;
			КонецЕсли;
			СтруктураЗаполнения.Вставить("Содержание" , СодержаниеДок);
			
		КонецЕсли; 	
		
		// Создание документа - операции
		НовыйДок = Документы[ИмяДок].СоздатьДокумент();
		НовыйДок.Заполнить(СтруктураЗаполнения);
		бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(НовыйДок, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;

	// Обновить остатки в обработке
	ЗаполнитьДанныеПриемника();
	
КонецПроцедуры // СоздатьНовыеДокументы()

// Процедура добавляет пользовательские отборы компоновщику
//
&НаСервере
Процедура ДобавитьПользовательскиеОтборы() Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Организация"		, Новый Структура("Использование, Значение", Истина, Объект.Организация));
	СтруктураОтбора.Вставить("Проведен"			, Новый Структура("Использование, Значение", Истина, Истина));
	//СтруктураОтбора.Вставить("МОЛ"				, Новый Структура("Использование, Значение", ЗначениеЗаполнено(МОЛ), МОЛ));
	//СтруктураОтбора.Вставить("Местонахождение"	, Новый Структура("Использование, Значение", ЗначениеЗаполнено(Местонахождение), Местонахождение));
	
	Отбор = Объект.Компоновщик.Настройки.Отбор;	
	Для Каждого ЭлементОтбора Из СтруктураОтбора Цикл
		
		НастройкаЭлемента = ЭлементОтбора.Значение;
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
		ДоступноеПоле = Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора);
		
		Если НЕ НастройкаЭлемента.Использование ИЛИ ДоступноеПоле = Неопределено Тогда			
			Продолжить;
		КонецЕсли; 
		
		бит_ОбщегоНазначенияКлиентСервер.УстановитьОтборУСписка(Отбор, ПолеОтбора, НастройкаЭлемента.Значение);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПользовательскиеОтборы()

// Функция получает таблицу ВНА для принятия к учету
//
// Параметры:
//  Режим  	   - ПеречислениеСсылка.бит_му_РежимыПодбораВНА.
//  ВалютаМСФО - СправочникСсылка.Вылюты.
//  
// Возвращаемое значение:
//   ТаблицаЗначений.
//
&НаСервере
Функция ПолучитьТаблицуВНАКУчету(РежимПодбора, ВалютаМСФО)

	Результат = Неопределено;
	
	ОбъектПодборВНА = Обработки.бит_му_ПодборВНА.Создать();
	ОбъектПодборВНА.Режим 			= РежимПодбора;
	ОбъектПодборВНА.Организация 	= Объект.Организация;
	ОбъектПодборВНА.ДатаНачала      = Объект.ДатаВводаОстатков;
	ОбъектПодборВНА.ДатаОкончания   = Объект.ДатаВводаОстатков;
	ОбъектПодборВНА.ВалютаДокумента = Объект.ВалютаДокументаВНА;
	
	Если РежимПодбора = Перечисления.бит_му_РежимыПодбораВНА.ПринятиеКУчетуОСПоОстаткам Тогда
		ТекстЗапроса = Обработки.бит_му_ПодборВНА.СформироватьТекстЗапросаПринятиеКУчетуОСПоОстаткам();
	Иначе	
	    ТекстЗапроса = Обработки.бит_му_ПодборВНА.СформироватьТекстЗапросаПринятиеКУчетуНМАПоОстаткам();
	КонецЕсли;                     	
	
	АдресСКД = Обработки.бит_му_ПодборВНА.ИнициализироватьСКД(ТекстЗапроса, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);	
	ОбъектПодборВНА.Компоновщик.Инициализировать(ИсточникНастроек);
	
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	ОбъектПодборВНА.Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);	
	ОбъектПодборВНА.ДобавитьПользовательскиеОтборы();
	
	ТаблицаВНА = ОбъектПодборВНА.ПолучитьТаблицуОбъектов(АдресСКД);
		
	Возврат ТаблицаВНА;
	
КонецФункции // ПолучитьТаблицуВНАКУчету()

// Процедура создает новые документы ВНА.
//
// Параметры:
//  СоздатьОС  - Булево
//  СоздатьНМА - Булево
//
&НаСервере
Процедура СоздатьДокументыВНАНаСервере(СоздатьОС, СоздатьНМА)
	
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	//Если НЕ ЗначениеЗаполнено(ВалютаМСФО) Тогда
	// 	Возврат;	
	//КонецЕсли;
	
	ВалютаДокумента = ?(ЗначениеЗаполнено(Объект.ВалютаДокументаВНА), Объект.ВалютаДокументаВНА, ВалютаМСФО);
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Организация"	  , Объект.Организация);
	СтруктураЗаполнения.Вставить("Дата"       	  , Объект.ДатаВводаОстатков);
	СтруктураЗаполнения.Вставить("ВалютаДокумента", ВалютаДокумента);
	СтруктураЗаполнения.Вставить("КорСчет"		  , Объект.ВспомогательныйСчет);
	СтруктураЗаполнения.Вставить("СчетНРП"		  , Объект.ВспомогательныйСчет);
	СтруктураЗаполнения.Вставить("Комментарий"	  , "Ввод начальных остатков");
	
	// ОС
	Если СоздатьОС Тогда
		
		РежимПодбора = Перечисления.бит_му_РежимыПодбораВНА.ПринятиеКУчетуОСПоОстаткам;
		ТаблицаВНА   = ПолучитьТаблицуВНАКУчету(РежимПодбора, ВалютаДокумента);  	                              	
		СтруктураЗаполнения.Вставить("ВидОперации", Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводНачальныхОстатковОС);
		СтруктураЗаполнения.Вставить("ТаблицаВНА" , ТаблицаВНА);    

		НовыйДок = Документы.бит_му_ПринятиеКУчетуОС.СоздатьДокумент();
		НовыйДок.Заполнить(СтруктураЗаполнения);
		бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(НовыйДок, РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;

	// НМА
	Если СоздатьНМА Тогда
		
		РежимПодбора = Перечисления.бит_му_РежимыПодбораВНА.ПринятиеКУчетуНМАПоОстаткам;
		ТаблицаВНА   = ПолучитьТаблицуВНАКУчету(РежимПодбора, ВалютаДокумента);
		СтруктураЗаполнения.Удалить("ВидОперации");
		СтруктураЗаполнения.Вставить("ТаблицаВНА", ТаблицаВНА);
		
		НовыйДок = Документы.бит_му_ПринятиеКУчетуНМА.СоздатьДокумент();
        НовыйДок.Заполнить(СтруктураЗаполнения);
		бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(НовыйДок, РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;

	// Обновление остатков
	ЗаполнитьДанныеПриемника();
	
КонецПроцедуры // СоздатьДокументыВНАНаСервере()

// Функция формирует таблицу для выгрузки в документ.
//
// Параметры:
//  МассивСчетов - Массив
//
// Возвращаемое значение:
//  ХранилищеЗначений
//
&НаСервере
Функция СформироватьТаблицуДанныхОперации(МассивСчетов)

	//ДополнитьМассивСчетовПодчиненными(МассивСчетов);
	
	ТзДанныхТрансляции = Объект.ТаблицаДанныеТрансляции.Выгрузить();
	
	МассивСтрок = Новый Массив;
	Для каждого СтрТаб Из ТзДанныхТрансляции Цикл
		Если МассивСчетов.Найти(СтрТаб.СчетПриемника) <> Неопределено Тогда
			МассивСтрок.Добавить(СтрТаб);	
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаДанных = ТзДанныхТрансляции.Скопировать(МассивСтрок
							, "СчетПриемника, СубконтоПриемника1, СубконтоПриемника2, СубконтоПриемника3, СубконтоПриемника4,
							| СуммаРеглДт, СуммаРеглКт, СуммаУпрДт, СуммаУпрКт, СуммаМУДт, СуммаМУКт, СуммаСценарийДт, СуммаСценарийКт,
							| ЦФО,
							| Валюта, ВалютнаяСуммаДт, ВалютнаяСуммаКт, КоличествоДт, КоличествоКт");
							
							
	// Убрать лишние счета из массива
	МассивСчетов = ТаблицаДанных.ВыгрузитьКолонку("СчетПриемника");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	
	Возврат ТаблицаДанных;
	
КонецФункции // СформироватьТаблицуДанныхОперации()
	
#КонецОбласти 

#Область ПроцедурыИФункцииПоРаботеСНастройками
   
// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Обработки[фКэшЗначений.ИмяОбъекта].Реквизиты Цикл
		//Если ИсключаемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
		//	Продолжить;
		//КонецЕсли; 
		СтруктураНастроек.Вставить(Реквизит.Имя, Объект[Реквизит.Имя])
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка = Неопределено)
	
	ЗначениеНастроек = Неопределено;
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		ЗначениеНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ЗначениеНастроек) Тогда
		
		Объект.ВыводитьСуммуРегл = Истина;
		
		Если ЗначениеЗаполнено(Объект.РегистрПриемник) И Элементы.РегистрПриемник.ТолькоПросмотр Тогда
			фИмяРегПриемника = УстановитьИмяРегистра(Объект.РегистрПриемник);
			УстановитьВспомогательныйСчет();
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
                            		
		ЗаполнитьЗначенияСвойств(Объект, ЗначениеНастроек);
		
		фИмяРегИсточника = УстановитьИмяРегистра(Объект.РегистрИсточник);
		фИмяРегПриемника = УстановитьИмяРегистра(Объект.РегистрПриемник);
				    				
	КонецЕсли;     	
	
	УстановитьПоказатели();
	УстановитьВидимостьДоступность();
	Объект.ТаблицаДанныеТрансляции.Очистить();
	
	Если ЗначениеЗаполнено(Объект.РегистрПриемник) Тогда
		ЗаполнитьСчетаПриемника();
		ЗаполнитьДанныеПриемника();
		УстановитьТипСчетовПриемника();
	КонецЕсли; 
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	ПрименитьНастройки(НастройкаПоУмолчанию);
      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()
     
&НаКлиенте
Процедура СохранитьНастройки(Команда)

	ПараметрыФормы = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
		
КонецПроцедуры // СохранитьНастройки()

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНастройкиОкончание", ЭтотОбъект); 
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры // ВосстановитьНастройки()

// Процедура окончание процедуры "ВосстановитьНастройки".
// 
&НаКлиенте 
Процедура ВосстановитьНастройкиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ПрименитьНастройки(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиОкончание()

#КонецОбласти

#КонецОбласти
