//ОКЕЙ Вдовиченко Г.В(СофтЛаб) 2019-09-20 (#3414)

&НаКлиенте
Перем СкрываемыеКоманды;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДокументСсылка = Неопределено;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ДокументСсылка = Параметры.Ключ;
	КонецЕсли; 
	
	Заголовок = "Бумажный документ: ";
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Заголовок = Заголовок + Документ.Номер + " от " + Документ.Дата;
		
		Если Документ.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен 
			И Не (РольДоступна("ок_ПравоРедактированияВходящегоБумажногоДокументаВСтатусеЗавершен") 
					ИЛИ РольДоступна("ПолныеПрава")) Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;	
		
	Иначе	
		Заголовок = Заголовок + "(создание)";
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-20 (#3732)
		Если Параметры.Свойство("СтруктураПолейДляПервичногоЗаполнения") Тогда
			ЗаполнитьЗначенияСвойств(Документ, Параметры.СтруктураПолейДляПервичногоЗаполнения);
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-20 (#3732)
		
		//инициализация документа
		Документ.ок_Статус = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый;
		Документ.Ответственный = Пользователи.ТекущийПользователь();
		
		Если Параметры.Свойство("ок_ДокументРодитель") И ЗначениеЗаполнено(Параметры.ок_ДокументРодитель) Тогда
			Документ.ок_ДокументРодитель = Параметры.ок_ДокументРодитель;
			РеквизитыРодителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.ок_ДокументРодитель,
																			"ДатаДокументаОтправителя,
																			|ДоговорКонтрагента,
																			|Контрагент,
																			|НомерДокументаОтправителя,
																			|Организация,
																			|СуммаДокумента,
																			|ок_НомерЗаявки,
																			|ок_Инициатор,
																			|ок_НомерВходящегоСчетаФактуры,
																			|ок_ДатаВходящегоСчетаФактуры,
																			|ок_СтавкаНДС,
																			|ок_СуммаНДС");
			ЗаполнитьЗначенияСвойств(Документ, РеквизитыРодителя);
		КонецЕсли;	
		
		Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Документ.ДокументыОснования.Очистить(); 
		КонецЕсли;	
		
	КонецЕсли;	
	
	Элементы.ДокументКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	ОтображатьВсеФайлы = Истина;
	
	ЗаполнитьФайлы();
	ЗаполнитьИсториюПереписки();
	
	Если Не Документ.Ссылка.Пустая() Тогда
		
		МассивДокументов = МассивДокументовУчета(Документ.Ссылка);
		Если МассивДокументов.Количество() > 0 Тогда 
			ДокументУчета = МассивДокументов[0];
		КонецЕсли;	
	
	КонецЕсли;	
	
	ВывестиДокументыУчета();
	
	ЗаполнитьПричиныОтклонения();
	
	РасчитатьСуммыДокумента(ЭтотОбъект, Документ);	
	
	ок_УправлениеФормами.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка); 
	
	ДатаНомерСчетаФактурыСовпадают = Ложь;
	Если Документ.ок_НомерВходящегоСчетаФактуры = Документ.НомерДокументаОтправителя
		И Документ.ок_ДатаВходящегоСчетаФактуры = Документ.ДатаДокументаОтправителя Тогда
		
		ДатаНомерСчетаФактурыСовпадают = Истина;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-08 (#3997)
	ок_ТекущийСтатусДокумента = Документ.ок_Статус;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-08 (#3997) 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановленаПрограммаОтображенияПредставленияHTML = ок_УправлениеФормамиКлиент.УстановленаПрограммаОтображенияПредставленияHTML();
	ок_УправлениеФормамиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ок_ОбменСКонтрагентамиКлиент.ОчиститьВременныйФайл(ИмяВременногоФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-08 (#3997) 
	Если ТекущийОбъект.ок_Статус <> ок_ТекущийСтатусДокумента Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РучноеИзменениеСтатуса", Истина);
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-08 (#3997)
	
	ТекущийОбъект.ок_ПричиныОтклонения.Очистить();
	Если ТекущийОбъект.ок_Проблемный Тогда
		
		Для каждого Элемент из ПричиныОтклонения Цикл
		
			Если Не Элемент.Пометка Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = ТекущийОбъект.ок_ПричиныОтклонения.Добавить();
			НоваяСтрока.Причина = Элемент.Значение;
			
		КонецЦикла;
	
	КонецЕсли;
	
	ТекущийОбъект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
	ТекущийОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ок_ДополнительныйЭД;
	ТекущийОбъект.ТипДокумента = Перечисления.ТипыЭД.Прочее;
	
	Если ДатаНомерСчетаФактурыСовпадают Тогда
		ТекущийОбъект.ок_НомерВходящегоСчетаФактуры = ТекущийОбъект.НомерДокументаОтправителя;
		ТекущийОбъект.ок_ДатаВходящегоСчетаФактуры = ТекущийОбъект.ДатаДокументаОтправителя;
	КонецЕсли;
	
	ок_УправлениеФормами.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ВывестиДокументыУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеФормой(ЭтотОбъект);
	
	Оповестить("ок_ЗаписанВходящийЭД", Документ.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Документ.ок_Проблемный Тогда
		
		УказаныПричины = Ложь;
		
		Для каждого ЭлементКоллекции из ПричиныОтклонения Цикл
			
			Если ЭлементКоллекции.Пометка Тогда
				УказаныПричины = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не	УказаныПричины Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не записан. В проблемном документе не указаны причины отклонения.");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьПредставление(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТабличныйДокумент = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьТабличныйДокументФайлаЭД(ТекущиеДанные.ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТабличныйДокумент = Неопределено Тогда
		ПоказатьПредупреждение(, "Не удалось сформировать представление");
		Возврат;
	КонецЕсли;	
		
	ТабличныйДокумент.Показать("Представление " + ТекущиеДанные.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПакет(Команда)
	
	Если Документ.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Перед добавлением файлов необходимо записать документ.");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаДобавленияФайлов", Новый Структура("МножественныйВыбор, Документ", Истина, Документ.Ссылка), ЭтотОбъект, , , , Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	Если Документ.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Перед добавлением файлов необходимо записать документ.");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаДобавленияФайлов", Новый Структура("МножественныйВыбор, Документ", Ложь, Документ.Ссылка), ЭтотОбъект, , , , Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ПрисоединенныйФайл", ТекущиеДанные.ПрисоединенныйФайл);
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры), "Вы действительно хотите удалить файл " + ТекущиеДанные.Имя + "?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНаОснованииНовыйДокумент(Команда)
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента", Новый Структура("Ключ, ок_ДокументРодитель", 
																									ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящий.ПустаяСсылка"),
																									Документ.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДокументУчета(Команда)
	
	Перем СозданныеДокументыУчета;
	
	Если Документ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ВвестиДокументУчетаНаСервере(СозданныеДокументыУчета);
	
	УправлениеФормой(ЭтотОбъект);
	
	Если СозданныеДокументыУчета.Количество() > 0 Тогда
		Элементы.ФайлыВвестиДокументУчета.Видимость = Ложь; 
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВвестиДокументУчетаНаСервере(СозданныеДокументыУчета = Неопределено)
	
	ок_ОбменСКонтрагентамиВнутренний.СоздатьДокументыУчетаЭлектронногоДокумента2019(Документ.Ссылка, "Вручную");
	
	СозданныеДокументыУчета = ок_ОбменСКонтрагентамиВнутренний.МассивДокументовУчетаВходящегоЭД(Документ.Ссылка);
	
	ВывестиДокументыУчета();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДокумент(Команда)
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента", Новый Структура("Ключ, ЗначениеКопирования", 
																									ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящий.ПустаяСсылка"),
																									Документ.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОтклоненияУстановитьПометки(Команда)
	
	ПричиныОтклонения.ЗаполнитьПометки(Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОтклоненияСнятьПометки(Команда)
	
	ПричиныОтклонения.ЗаполнитьПометки(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-11 #3997 
&НаКлиенте
Процедура ок_ИнициаторыИнициаторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) 
		И Документ.ок_Инициаторы.НайтиСтроки(Новый Структура("Инициатор", ВыбранноеЗначение)).Количество() > 0 Тогда
		
		ПоказатьПредупреждение(,"Данный инициатор уже добавлен");
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-28 (#4391)
	Если СтандартнаяОбработка 
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		
		ШаблонОшибки 		= "Согласующее лицо %1 уволен(а) от %2. Рекомендовано заменить согласующее лицо.";
		РеквизитыИнициатора = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВыбранноеЗначение, "ок_Уволен,ок_ДатаУвольнения");
		
		Если РеквизитыИнициатора.ок_Уволен Тогда
			
			ПоказатьПредупреждение(,СтрШаблон(ШаблонОшибки, ВыбранноеЗначение, Формат(РеквизитыИнициатора.ок_ДатаУвольнения,"ДФ=dd.MM.yyyy")));
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-28 (#4391)
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ИнициаторыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Копирование;
КонецПроцедуры

&НаКлиенте
Процедура ок_ТребуетсяСогласованиеФДПриИзменении(Элемент) 
	
	Если Документ.ок_ТребуетсяСогласованиеФД Тогда
		Элементы.ок_ЦФО.Видимость = Истина;	
		Элементы.ок_ФункциональныйДиректор.Видимость = Истина;
	Иначе
		Элементы.ок_ЦФО.Видимость = Ложь;	
		Элементы.ок_ФункциональныйДиректор.Видимость = Ложь;
		
		Документ.ок_ЦФО = "";	
		Документ.ок_ФункциональныйДиректор = "";
	КонецЕсли;
	
КонецПроцедуры	


&НаСервереБезКонтекста
Функция ПолучитьФД(ЦФО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СБ_СоответствиеФД_ЦФО.Инициатор КАК Инициатор
	|ИЗ
	|	РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|ГДЕ
	|	СБ_СоответствиеФД_ЦФО.ЦФО = &ЦФО";

	Запрос.УстановитьПараметр("ЦФО", ЦФО);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Инициатор;
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.ПустаяСсылка");
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ок_ЦФОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ок_ЦФОНачалоВыбораЗаершение",ЭтотОбъект);	
	ФормаВыбора = ОткрытьФорму("РегистрСведений.СБ_СоответствиеФД_ЦФО.ФормаСписка",Новый Структура("РежимВыбораТекущихДанных", Истина),ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ФормаВыбора.Элементы.РуководительФункции.Видимость = Ложь;
	ФормаВыбора.Элементы.ОтветственныйЗаКорректировкуБК.Видимость = Ложь;
	ФормаВыбора.Элементы.ОтветственныйЗаКампаниюПоНачислениюАккруалов.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ЦФОНачалоВыбораЗаершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Документ.ок_ЦФО 					= РезультатВыбора.ЦФО;
		Документ.ок_ФункциональныйДиректор 	= РезультатВыбора.Инициатор;
		
	КонецЕсли;
	
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-28 (#4391)
	Если ЗначениеЗаполнено(Документ.ок_ФункциональныйДиректор) Тогда
		
		ШаблонОшибки 		= "Согласующее лицо %1 уволен(а) от %2. Рекомендовано заменить согласующее лицо.";
		РеквизитыИнициатора = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Документ.ок_ФункциональныйДиректор, "ок_Уволен,ок_ДатаУвольнения");
		
		Если РеквизитыИнициатора.ок_Уволен Тогда
			
			ПоказатьПредупреждение(,СтрШаблон(ШаблонОшибки, Документ.ок_ФункциональныйДиректор, Формат(РеквизитыИнициатора.ок_ДатаУвольнения,"ДФ=dd.MM.yyyy")));
			
			Документ.ок_ЦФО 					= ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
			Документ.ок_ФункциональныйДиректор 	= ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЕсли;
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-28 (#4391)
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ЦФОПриИзменении(Элемент) 
	
	Если ЗначениеЗаполнено(Документ.ок_ЦФО) Тогда
		
		Документ.ок_ФункциональныйДиректор = ПолучитьФД(Документ.ок_ЦФО);
		
	Иначе
		
		Документ.ок_ФункциональныйДиректор = ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.ПустаяСсылка");
		
	КонецЕсли;
	
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-28 (#4391)
	Если ЗначениеЗаполнено(Документ.ок_ФункциональныйДиректор) Тогда
		
		ШаблонОшибки 		= "Согласующее лицо %1 уволен(а) от %2. Рекомендовано заменить согласующее лицо.";
		РеквизитыИнициатора = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Документ.ок_ФункциональныйДиректор, "ок_Уволен,ок_ДатаУвольнения");
		
		Если РеквизитыИнициатора.ок_Уволен Тогда
			
			ПоказатьПредупреждение(,СтрШаблон(ШаблонОшибки, Документ.ок_ФункциональныйДиректор, Формат(РеквизитыИнициатора.ок_ДатаУвольнения,"ДФ=dd.MM.yyyy")));
			
			Документ.ок_ЦФО 					= ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
			Документ.ок_ФункциональныйДиректор 	= ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЕсли;
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-28 (#4391)
	
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-11 (#3997) 

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997) 
&НаКлиенте
Процедура ок_СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= СписокДоступныхСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ок_СтатусАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= СписокДоступныхСтатусов(Текст);
	Элементы.Документок_Статус.СписокВыбора.Очистить();
	Если ДанныеВыбора.Количество() = 0 Тогда
		Элементы.Документок_Статус.СписокВыбора.ЗагрузитьЗначения(СписокДоступныхСтатусов().ВыгрузитьЗначения());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_СтатусОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка 	= Ложь;
		ДанныеВыбора 			= СписокДоступныхСтатусов(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокДоступныхСтатусов(Текст = Неопределено)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
	

	Возврат ДанныеВыбора;
	
КонецФункции
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 


&НаКлиенте
Процедура ФайлыПрисоединенныйФайлНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеСтроки = Элементы.Файлы.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайлаВложения(Неопределено, ДанныеСтроки.ПрисоединенныйФайл, УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-20 (#3732)
	Если Элемент.ТекущийЭлемент.Имя = "ФайлыДатаВходящегоДокумента"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ФайлыНомерВходящегоДокумента" Тогда
		
		Если ЭтаФорма.ТолькоПросмотр Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеСтроки = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ДанныеСтроки <> Неопределено Тогда

			СтруктураПараметров = Новый Структура("Ключ", ДанныеСтроки.ПрисоединенныйФайл);
		    ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыРедактированияФайла", ЭтотОбъект);    
		    ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаРедактированияПрисоединенногоФайла", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-20 (#3732)
	
	//Если Элемент.ТекущийЭлемент.Имя = "ФайлыИмя" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеСтроки = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ДанныеСтроки <> Неопределено Тогда
			ДанныеФайла = ДанныеФайлаВложения(Неопределено, ДанныеСтроки.ПрисоединенныйФайл, УникальныйИдентификатор);
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
		КонецЕсли;
	//КонецЕсли;
			
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-20 (#3732)
&НаСервере
Процедура ВыполнитьПослеЗакрытияФормыРедактированияФайла(РезультатЗакрытия, ПараметрыОповещения) 
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-20 (#3618)
	Экспорт
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-20 (#3618)
    
	Если РезультатЗакрытия = Истина Тогда
		
		ЗаполнитьФайлы();
		
    КонецЕсли;
    
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-20 (#3732)

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ДоступныеЭлементы = Новый Массив;
	
	ПрисоединенныйФайл = Неопределено;
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Расширение = "";
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПрисоединенныйФайл = ТекущиеДанные.ПрисоединенныйФайл;
		Расширение = ТекущиеДанные.Расширение;
		
		ПрисоединенныйФайлСсылка = ТекущиеДанные.ПрисоединенныйФайл;
		
	КонецЕсли;
	
	Для каждого Имя из СкрываемыеКоманды Цикл
		Элемент = Элементы.Найти(Имя);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элемент.Видимость = (ДоступныеЭлементы.Найти(Имя) <> Неопределено);
	КонецЦикла;	
	
	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСтраницы = "СтраницаПредставлениеПустая";
	Если Расширение = "pdf" Тогда
		Если УстановленаПрограммаОтображенияПредставленияHTML Тогда
			ПредставлениеФайлаHTML = "";
			Данные = ПолучитьИзВременногоХранилища(ок_ОбменСКонтрагентамиСлужебныйВызовСервера.АдресДанныхПрисоединенныйФайл(ПрисоединенныйФайл, УникальныйИдентификатор));
			Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
				ок_ОбменСКонтрагентамиКлиент.ОчиститьВременныйФайл(ИмяВременногоФайла);
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
				Данные.Записать(ИмяВременногоФайла);
				ПредставлениеФайлаHTML = ок_ОбменСКонтрагентамиКлиент.HTMLПредставлениеФайлаЭД(ИмяВременногоФайла, Расширение);
			КонецЕсли;	
			Если Не ПустаяСтрока(ПредставлениеФайлаHTML) Тогда
				ИмяСтраницы = "СтраницаПредставлениеHTML";
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли Расширение = "xml" Тогда
		УстановитьВидимость = Ложь;
		ОтобразитьПредставление(ПрисоединенныйФайл, УстановитьВидимость);
		Если УстановитьВидимость Тогда
			ИмяСтраницы = "СтраницаПредставление";
		КонецЕсли;	
	КонецЕсли;	
	
	Элементы.СтраницыПредставления.ТекущаяСтраница = Элементы.Найти(ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВсеФайлыПриИзменении(Элемент)
	
	ЗаполнитьФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументИБОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ТекстДокументИБНажатие" Тогда
		СтандартнаяОбработка = Ложь;
		ТекстДокументИБНажатие();
	ИначеЕсли НавигационнаяСсылка = "ТекстДокументИБНажатие2" Тогда
		СтандартнаяОбработка = Ложь;
		ТекстДокументИБНажатие(2);
	ИначеЕсли НавигационнаяСсылка = "ОткрытьФормуПодбора" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Документок_ПроблемныйПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументСуммаДокументаПриИзменении(Элемент)
	
	Документ.ок_СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Документ.СуммаДокумента, Истина,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Документ.ок_СтавкаНДС));
												
	РасчитатьСуммыДокумента(ЭтотОбъект, Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура Документок_СуммаНДСПриИзменении(Элемент)
	
	РасчитатьСуммыДокумента(ЭтотОбъект, Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура Документок_СтавкаНДСПриИзменении(Элемент)
	
	Документ.ок_СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Документ.СуммаДокумента, Истина,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Документ.ок_СтавкаНДС));
	
	РасчитатьСуммыДокумента(ЭтотОбъект, Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура Документок_НомерЗаявкиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Документ.ок_Инициатор) И ЗначениеЗаполнено(Документ.ок_НомерЗаявки) Тогда
		Документ.ок_Инициатор = ИнициаторЗаявки(Документ.ок_НомерЗаявки);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Документок_ДокументРодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-04 (#3816)
	//ОтборФормы = Новый Структура("Организация, Контрагент, ПрофильНастроекЭДО", Документ.Организация, Документ.Контрагент, ПредопределенноеЗначение("Справочник.ПрофилиНастроекЭДО.ПустаяСсылка"));
	ОтборФормы = Новый Структура("Организация, Контрагент, ИдентификаторОрганизации", Документ.Организация, Документ.Контрагент, "");
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-04 (#3816) 
	ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
	
	ОткрытьФорму("Документ.ЭлектронныйДокументВходящий.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Документок_СтатусПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-11 (#3997) 
	Если ЗначениеЗаполнено(Документ.Ссылка) И бит_Визирование.ОпределитьКоличествоВиз(Новый Структура("Объект", Документ.Ссылка)) > 0 Тогда
		ТекстВопроса = "Обнаружен сформированный маршрут согласования. Для изменения статуса документа на " + Документ.ок_Статус + " требуется удалить маршрут согласования. Очистить маршрут?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтменитьСогласованиеПродолжение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);		
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-11 (#3997)

КонецПроцедуры

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-22 (#3997)
&НаКлиенте
Процедура ОтменитьСогласованиеПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
    	Документ.ок_Статус = ок_ТекущийСтатусДокумента;	
    КонецЕсли;
		
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-22 (#3997) 

&НаКлиенте
Процедура ДатаНомерСчетаФактурыСовпадаютПриИзменении(Элемент)
	
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-19 (#3732)
&НаКлиенте
Процедура ИсторияПерепискиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИсторияПерепискиКомментарий" Тогда
	
		ДанныеВыбраннойСтроки = ИсторияПереписки.Получить(ВыбраннаяСтрока);
		ОткрытьЗначение(ДанныеВыбраннойСтроки.Комментарий);
	
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-19 (#3732)

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-14 (#4117)
&НаКлиенте
Процедура ОбновитьИсториюПереписки(Команда)
	ЗаполнитьИсториюПереписки();
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-14 (#4117)

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("ЕстьИзменения")
		И Результат.ЕстьИзменения Тогда
		ЗаполнитьФайлы();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	УдалитьФайлПоСсылке(ДополнительныеПараметры.ПрисоединенныйФайл);
	
	ЗаполнитьФайлы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьФайлПоСсылке(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСсылки = Ссылка.ПолучитьОбъект();
	Если Не ОбъектСсылки.ПометкаУдаления Тогда
		ОбъектСсылки.УстановитьПометкуУдаления(Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициаторЗаявки(Заявка)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка, "бит_БК_Инициатор");
КонецФункции

&НаСервере
Процедура ЗаполнитьФайлы()
	
	Файлы.Очистить();
	Если Не Документ.Ссылка.Пустая() Тогда
		
		Данные = ок_ОбменСКонтрагентамиВнутренний.ПолучитьПрисоединенныеФайлыВходящегоЭДДляОтображения(Документ.Ссылка, ОтображатьВсеФайлы);
		Если Данные <> Неопределено Тогда
			Файлы.Загрузить(Данные);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсториюПереписки()
	
	ИсторияПереписки.Очистить();
	
	Данные = РегистрыСведений.ок_ИсторияПерепискиСогласованияЭД.ПолучитьИсториюПерепискиДокумента(Документ.Ссылка);
	Если Данные <> Неопределено Тогда
		ИсторияПереписки.Загрузить(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор)
	
	ДанныеФайла = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		// Файл во временном хранилище
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаВложения);
		ДанныеФайла.Вставить("Ссылка", Неопределено);
	ИначеЕсли ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		// Файл записан в ИБ
		ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
		ДанныеФайла.Вставить("Ссылка", ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеHTML(ПрисоединенныйФайл, Расширение)
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.HTMLПредставлениеФайлаЭД(ПрисоединенныйФайл, Расширение);
		
КонецФункции

&НаСервере
Процедура ОтобразитьПредставление(ПрисоединенныйФайл, УстановитьВидимость = Ложь)
	
	ТабличныйДокумент = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьТабличныйДокументФайлаЭД(ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТабличныйДокумент <> Неопределено Тогда
		ПредставлениеФайла.Очистить();
		ПредставлениеФайла.Вывести(ТабличныйДокумент);
		УстановитьВидимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбора()
	
	Если Документ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЭлектронныйДокумент", Документ.Ссылка);
	ОткрытьФорму("Документ.ЭлектронныйДокументВходящий.Форма.ПодборДокументовУчета", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументИБНажатие(Номер = 1)
		
	Если Документ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = МассивДокументовУчета(Документ.Ссылка);
		
	Если МассивДокументов.Количество() >= 1 Тогда
		
		ПоказатьЗначение( ,МассивДокументов[Номер - 1]);
			
	Иначе
		
		ОткрытьФормуПодбора();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивДокументовУчета(ЭлектронныйДокумент)
	
	Возврат ок_ОбменСКонтрагентамиВнутренний.МассивДокументовУчетаВходящегоЭД(ЭлектронныйДокумент);
	
КонецФункции

&НаСервере
Процедура ВывестиДокументыУчета()
	
	МассивДокументов = Новый Массив;
	Если Не Документ.Ссылка.Пустая() Тогда
		МассивДокументов = МассивДокументовУчета(Документ.Ссылка);
	КонецЕсли;	
	
	КоличествоДокументов = МассивДокументов.Количество();
	
	Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Документ учета'");
	ОтображатьПодбор = Ложь;
	ПредставлениеДокументов2 = "";
	
	Если КоличествоДокументов = 0 Тогда
		
		ПредставлениеДокументов = НСтр("ru = '<Подбор>'");
		
	ИначеЕсли КоличествоДокументов <= 2  Тогда
		
		ПредставлениеДокументов = Строка(МассивДокументов[0]);			
		ОтображатьПодбор = Истина;
			
		Если КоличествоДокументов = 2  Тогда
			Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Документы учета'");
			ПредставлениеДокументов2 = Строка(МассивДокументов[1]);			
		КонецЕсли;
		
	Иначе
		
		Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Документы учета'");
		ШаблонТекста = НСтр("ru = 'Список документов (%1)'");
		ПредставлениеДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, КоличествоДокументов);
		
		ОтображатьПодбор = Истина;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		ПредставлениеДокументов, , , , "ТекстДокументИБНажатие"));
		
	Если Не ПустаяСтрока(ПредставлениеДокументов2) Тогда
		МассивСтрок.Добавить("; ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			ПредставлениеДокументов2, , , , "ТекстДокументИБНажатие2"));
	КонецЕсли;
		
	Если ОтображатьПодбор Тогда
		МассивСтрок.Добавить("   ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = '<Подбор>'"), ,
			, ,
			"ОткрытьФормуПодбора"));
	КонецЕсли;
	
	ТекстДокументИБ = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПричиныОтклонения()
	
	//ПричиныОтклонения.Очистить();
	ПричиныОтклонения = Справочники.ок_ПричиныОтклоненияДО.СписокВыбораДляФормыДокумента(Документ.Ссылка).Скопировать()
					
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.СтраницаПричиныОтклонения.Видимость = Форма.Документ.ок_Проблемный;
	Элементы.ФайлыВвестиНаОснованииНовыйДокумент.Видимость = (Не Форма.Документ.Ссылка.Пустая() И Форма.Документ.ок_Проблемный);
	Элементы.ФайлыВвестиДокументУчета.Видимость = (Не Форма.Документ.Ссылка.Пустая() 
													И (Форма.Документ.ок_ЗагружаемыеДокументы.Количество() > 0)
													И (Форма.Документ.ДокументыОснования.Количество() = 0)
													И (Форма.Документ.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован") 
													ИЛИ Форма.Документ.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен")));
													
	Элемент = Элементы.Найти("ок_СтраницаЗагружаемыеДокументы");
	Если Элемент <> Неопределено Тогда
		Элемент.ТолькоПросмотр = (МассивДокументовУчета(Форма.Документ.Ссылка).Количество() > 0);
	КонецЕсли;
	
	Элементы.ГруппаДатаНомерСчетФактура.Видимость = Не Форма.ДатаНомерСчетаФактурыСовпадают;
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-14 #3997 
	ЗначениеПоляТребуетсяСогласованиеФД = Форма.Документ.ок_ТребуетсяСогласованиеФД;
	Элементы.ок_ЦФО.Видимость =  ЗначениеПоляТребуетсяСогласованиеФД;
	Элементы.ок_ФункциональныйДиректор.Видимость =  ЗначениеПоляТребуетсяСогласованиеФД;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-14 #3997
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьСуммыДокумента(Форма, ФормаДокумент)
	
	Форма.СуммаБезНДС = ФормаДокумент.СуммаДокумента - ФормаДокумент.ок_СуммаНДС
			
КонецПроцедуры

#КонецОбласти

#Область ЗагружаемыеДокументы

&НаКлиенте
Процедура ок_ЗагружаемыеДокументыФормироватьПриИзменении(Элемент) Экспорт
	
	ок_УправлениеФормамиКлиент.ОбработатьИзменениеФлажкаЗагружаемыеДокументы(ЭтотОбъект);
	
	ок_УправлениеФормамиКлиент.ЭлектронныйДокументВходящий_ФормаДокумента_УправлениеЭлементами(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласованияПриИзменении(Элемент) Экспорт
	
	ок_УправлениеФормамиКлиент.ЭлектронныйДокументВходящий_ФормаДокумента_УправлениеЭлементами(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ок_СоздаватьУчетныйДокументКопированиемПриИзменении(Элемент) Экспорт
	
	ок_УправлениеФормамиКлиент.ЭлектронныйДокументВходящий_ФормаДокумента_УправлениеЭлементами(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ОтборФормы = Новый Структура("Организация", Документ.Организация);
	ОтборКонтрагент = Новый Структура("ВидЗагружаемогоДокумента, Формировать", ПредопределенноеЗначение("Перечисление.ок_ВидЗагружаемыхДокументовЭД.ПоступлениеДопрасходы"), Истина);
	Если ЭтотОбъект.ок_ЗагружаемыеДокументы.НайтиСтроки(ОтборКонтрагент).Количество() = 0 Тогда
		ОтборФормы.Вставить("Контрагент", Документ.Контрагент);
	КонецЕсли;	
	ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ДокументКопированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФормыВыбора = ок_УправлениеФормамиКлиент.ИмяФормыВыбораДокументаКопированияЗагружаемогоДокументаЭД(ЭтотОбъект);
	Если ИмяФормыВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Организация,Контрагент", Документ.Организация, Документ.Контрагент));
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ок_ДокументОснованиеСчетФактураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СписокДоступныхФорм = Новый СписокЗначений;
	СписокДоступныхФорм.Добавить("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", "Поступление товаров услуг");
	СписокДоступныхФорм.Добавить("Документ.ПоступлениеДопРасходов.ФормаВыбора", "Поступление допрасходов");
	СписокДоступныхФорм.Добавить("Документ.ПоступлениеНМА.ФормаВыбора", "Поступление НМА");

	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ок_ДокументОснованиеСчетФактураНачалоВыбораИзСпискаЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), СписокДоступныхФорм, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ДокументОснованиеСчетФактураНачалоВыбораИзСпискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Организация,Контрагент", Документ.Организация, Документ.Контрагент));
	
	ОткрытьФорму(Результат.Значение, ПараметрыОткрытия, ДополнительныеПараметры.Элемент);
	
КонецПроцедуры

#КонецОбласти

СкрываемыеКоманды = Новый Массив;
//СкрываемыеКоманды.Добавить("ФайлыПоказатьПредставление");
