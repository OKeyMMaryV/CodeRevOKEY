&НаКлиенте
Перем СписокПриложенийДляПечати;
&НаКлиенте
Перем WordAppl;
&НаКлиенте
Перем ExcelAppl;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокФайлов.Параметры.УстановитьЗначениеПараметра("ОсновныеТипыЭД", ОбменСКонтрагентамиСлужебный.ОсновныеТипыЭД());
	//СписокФайлов.Параметры.УстановитьЗначениеПараметра("ОтображатьВсеФайлы", ОтображатьВсеФайлы);
	
	НаправлениеДО = Неопределено;
	Параметры.Свойство("НаправлениеДО", НаправлениеДО);
	Если ТипЗнч(НаправлениеДО) = Тип("Массив")
		И НаправлениеДО.Количество() > 0 Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(НаправлениеДО);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокФайлов, "НаправлениеДО", СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	ИначеЕсли ТипЗнч(НаправлениеДО) = Тип("СписокЗначений")
		И НаправлениеДО.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокФайлов, "НаправлениеДО", НаправлениеДО, ВидСравненияКомпоновкиДанных.ВСписке,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	ИначеЕсли ТипЗнч(НаправлениеДО) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокФайлов, "НаправлениеДО", НаправлениеДО, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(НаправлениеДО),РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
	СписокАктуальныхЭлектронныхДокументов = Неопределено;
	Параметры.Свойство("СписокАктуальныхЭлектронныхДокументов", СписокАктуальныхЭлектронныхДокументов);
	Если ТипЗнч(СписокАктуальныхЭлектронныхДокументов) = Тип("Массив")
		И СписокАктуальныхЭлектронныхДокументов.Количество() > 0 Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(СписокАктуальныхЭлектронныхДокументов);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокФайлов, "Документ", СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	ИначеЕсли ТипЗнч(СписокАктуальныхЭлектронныхДокументов) = Тип("СписокЗначений")
		И СписокАктуальныхЭлектронныхДокументов.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокФайлов, "Документ", СписокАктуальныхЭлектронныхДокументов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	ИначеЕсли ТипЗнч(НаправлениеДО) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокФайлов, "Документ", СписокАктуальныхЭлектронныхДокументов, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(НаправлениеДО),РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	СписокФайлов.Параметры.УстановитьЗначениеПараметра("ОтображатьВсеФайлы", ОтображатьВсеФайлы);

	ПолучитьСписокПринтеров();
	ИнициализироватьПриложенияДляПечати();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	пОтбор = СписокФайлов.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
	ДатаВходящегоДокументаБольше = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(пОтбор.Элементы, "ДатаВходящегоДокументаБольше", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ДатаВходящегоДокументаМеньше = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(пОтбор.Элементы, "ДатаВходящегоДокументаМеньше", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДатаВходящегоДокументаБольше, "ДатаДокумента", Период.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно,, ЗначениеЗаполнено(Период.ДатаНачала));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДатаВходящегоДокументаМеньше, "ДатаДокумента", Период.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,, ЗначениеЗаполнено(Период.ДатаОкончания));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВсеФайлыПриИзменении(Элемент)
	
	СписокФайлов.Параметры.УстановитьЗначениеПараметра("ОтображатьВсеФайлы", ОтображатьВсеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбранныхЗначений = Новый СписокЗначений;
	СписокЗначений = Элемент.СписокВыбора; 

	ВыбранноеЗначение = СписокЗначений.ОтметитьЭлементы("Выберите направления ДО");
	
	Для каждого ЭлементСписка Из СписокЗначений Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокВыбранныхЗначений.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		УстановитьЭлементОтбораДинамическогоСписка("НаправлениеДО", СписокВыбранныхЗначений, ВидСравненияКомпоновкиДанных.ВСписке,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Иначе
		УстановитьЭлементОтбораДинамическогоСписка("НаправлениеДО", СписокВыбранныхЗначений, ВидСравненияКомпоновкиДанных.ВСписке,,Ложь,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбранныхЗначений = Новый СписокЗначений;
	СписокЗначений = Элемент.СписокВыбора; 

	ВыбранноеЗначение = СписокЗначений.ОтметитьЭлементы("Выберите расширение файлов ДО");
	
	Для каждого ЭлементСписка Из СписокЗначений Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокВыбранныхЗначений.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		УстановитьЭлементОтбораДинамическогоСписка("Расширение", СписокВыбранныхЗначений, ВидСравненияКомпоновкиДанных.ВСписке,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Иначе
		УстановитьЭлементОтбораДинамическогоСписка("Расширение", СписокВыбранныхЗначений, ВидСравненияКомпоновкиДанных.ВСписке,,Ложь,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокФайлов

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Попытка
		ИмяПоля = СтрЗаменить(Поле.Имя, "СписокФайлов","");
		ОткрытьЗначение(Элемент.ТекущиеДанные[ИмяПоля]);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СписокФайловПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.СписокФайлов.СоздатьЭлементыФормыПользовательскихНастроек(Элементы.ГруппаПользовательскиеНастройки,,2);
	УстановитьВидимостьНастроек(Элементы.ГруппаПользовательскиеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать_ПредварительныйПросмотр(Команда)
		
	СписокФайловНаПечать.Очистить();
	ПечатныеДокументы = Новый СписокЗначений;
	
	Для каждого ИндСтроки Из Элементы.СписокФайлов.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СписокФайлов.ДанныеСтроки(ИндСтроки);
		НовыйФайлНаПечать = СписокФайловНаПечать.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйФайлНаПечать, ДанныеСтроки);
		
	КонецЦикла; 
	
	СписокФайловНаПечать.Сортировать("Документ, ТипДокументаПриоритет");
	
	Для каждого ФайлНаПечать Из СписокФайловНаПечать Цикл
		
		ПечатныеДокументы.Вставить(0, ФайлНаПечать.ЭлектронныйДокумент, ФайлНаПечать.Имя);
	
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПечатныеДокументы", 	ПечатныеДокументы);
	СтруктураПараметров.Вставить("ВидПечати", 			"ПечататьБланк");
	СтруктураПараметров.Вставить("ИмяПринтера", 		ИмяПринтера);

	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ПредварительныйПросмотрПечатныхФорм", СтруктураПараметров,,Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать_НаПринтер(Команда)
	
	СписокФайловНаПечать.Очистить();
	ПечатныеДокументы = Новый Массив;
	
	Для каждого ИндСтроки Из Элементы.СписокФайлов.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СписокФайлов.ДанныеСтроки(ИндСтроки);
		НовыйФайлНаПечать = СписокФайловНаПечать.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйФайлНаПечать, ДанныеСтроки);
		
	КонецЦикла; 
	
	СписокФайловНаПечать.Сортировать("Документ, ТипДокументаПриоритет");
	
	Для каждого ФайлНаПечать Из СписокФайловНаПечать Цикл
	
		ПечатныеДокументы.Добавить(ФайлНаПечать.ЭлектронныйДокумент);
	
	КонецЦикла;
	
	Если ПечатныеДокументы.Количество() > 0 Тогда
		
		oLocator = Новый COMОбъект("WbemScripting.SWbemLocator");
		oService = oLocator.ConnectServer("", "", "", ""); //Задания от всех пользователей
    
	    oService.Security_.impersonationlevel = 3; //получаем необходимые права
	    oService.Security_.Privileges.AddAsString("SeLoadDriverPrivilege");
		
		WordAppl = Неопределено;
		ExcelAppl = Неопределено;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ФайлДляУдаления", Новый Массив);
		НапечататьФайлы(ПечатныеДокументы, ПараметрыВыполнения, ЭтотОбъект.УникальныйИдентификатор);
		
		Если WordAppl <> Неопределено Тогда
			WordAppl.ActiveDocument.close();
			WordAppl.Application.DisplayAlerts =-1;
			WordAppl.Application.Quit();
			WordAppl = Неопределено;
		КонецЕсли; 
		
		Если ExcelAppl <> Неопределено Тогда
			ExcelAppl.Quit();
			ExcelAppl.DisplayAlerts = 1;
			ExcelAppl = Неопределено;
		КонецЕсли;
		
		// Ожидаем завершения печати
		НаличиеPDF = Ложь;
		Для каждого ПолноеИмяФайлаДляУдаления Из ПараметрыВыполнения.ФайлДляУдаления Цикл
			Если СтрНайти(НРег(ПолноеИмяФайлаДляУдаления), ".pdf") <> 0 Тогда
				НаличиеPDF = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		ТаймаутДляПечатиPDF = ТекущаяДата() + 15;
		Пока НаличиеPDF 
			И oService.InstancesOf("Win32_PrintJob").Count = 0
			И ТекущаяДата() < ТаймаутДляПечатиPDF Цикл 
		КонецЦикла;
		ТаймаутДляПечатиPDF = ТекущаяДата() + 5;
		Пока oService.InstancesOf("Win32_PrintJob").Count > 0
			ИЛИ НаличиеPDF
				И ТекущаяДата() < ТаймаутДляПечатиPDF Цикл
		КонецЦикла;
		
		oService = Неопределено;
		oLocator = Неопределено;
		
		Попытка 
			
			Для каждого ПолноеИмяФайлаДляУдаления Из ПараметрыВыполнения.ФайлДляУдаления Цикл
				ФайлДляУдаления = Новый Файл(ПолноеИмяФайлаДляУдаления);
				Если ФайлДляУдаления.Существует() Тогда
					Если ФайлДляУдаления.ПолучитьТолькоЧтение() Тогда
				        ФайлДляУдаления.УстановитьТолькоЧтение(Ложь);
				    КонецЕсли;
					УдалитьФайлы(ПолноеИмяФайлаДляУдаления);
				КонецЕсли; 
			КонецЦикла;
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЭД(Команда)
	
	Если Элементы.СписокФайлов.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для формирования выгрузки необходимо выбрать хотя бы один документ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаВыбранныхДокументов.Очистить();
	Для каждого ИндСтроки Из Элементы.СписокФайлов.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СписокФайлов.ДанныеСтроки(ИндСтроки);
		НоваяСтрокаТЗ = ТаблицаВыбранныхДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ,ДанныеСтроки);
	КонецЦикла; 
	
	Соответствие = СформироватьФайлВыгрузки(ТаблицаВыбранныхДокументов);
	Если Соответствие.Количество() > 0 Тогда
		ПолноеИмяФайла = "";

		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбора.Заголовок = НСтр("ru = 'Выберите каталог для сохранения файла (файлов) выгрузки'");
		ДиалогВыбора.ПолноеИмяФайла = "";
		Если НЕ ДиалогВыбора.Выбрать() Тогда
			Возврат;
		КонецЕсли;

		ВсеДокументыВыгружены = Истина;
		Для Каждого Элемент Из Соответствие Цикл

			ДДВыгрузки = ПолучитьИзВременногоХранилища(Элемент.Значение);
			ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДиалогВыбора.Каталог)
				+ Элемент.Ключ.ИмяФайла;
			ДДВыгрузки.Записать(ПолноеИмяФайла);
			ЗаписанныйФайл = Новый Файл(ПолноеИмяФайла);
			ВсеДокументыВыгружены = ВсеДокументыВыгружены И ЗаписанныйФайл.Существует();
			
		КонецЦикла;
		ЕстьНевыгруженныеДокументы = НЕ ВсеДокументыВыгружены;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьФайлВыгрузки(Знач ТаблицаДокументов)
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКВыгрузке", ТаблицаДокументов.Выгрузить());
	ТипыОтветныхТитулов = Новый Массив;
	ТипыОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ТипыОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ТипыОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ТипыОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	Запрос.УстановитьПараметр("ТипыОтветныхТитулов", ТипыОтветныхТитулов);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МассивСсылок.Документ КАК Документ,
		|	МассивСсылок.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	МассивСсылок.ВидЭД КАК ВидЭД,
		|	МассивСсылок.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
		|	МассивСсылок.НомерДокумента КАК НомерДокумента,
		|	МассивСсылок.ДатаДокумента КАК ДатаДокумента,
		|	МассивСсылок.Контрагент КАК Контрагент,
		|	МассивСсылок.Организация КАК Организация,
		|	МассивСсылок.СуммаДокумента КАК СуммаДокумента,
		|	МассивСсылок.НаправлениеЭД КАК НаправлениеЭД,
		|	МассивСсылок.НомерДокументаОснования КАК НомерДокументаОснования,
		|	МассивСсылок.ДатаДокументаОснования КАК ДатаДокументаОснования
		|ПОМЕСТИТЬ ВыбранныеДокументы
		|ИЗ
		|	&ДокументыКВыгрузке КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДокументы.Документ КАК Документ,
		|	ВыбранныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ВыбранныеДокументы.ВидЭД КАК ВидЭД,
		|	ВыбранныеДокументы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
		|	ВыбранныеДокументы.НомерДокумента КАК НомерДокумента,
		|	ВыбранныеДокументы.ДатаДокумента КАК ДатаДокумента,
		|	ВыбранныеДокументы.Контрагент КАК Контрагент,
		|	ВыбранныеДокументы.Организация КАК Организация,
		|	ВыбранныеДокументы.СуммаДокумента КАК СуммаДокумента,
		|	ВыбранныеДокументы.НаправлениеЭД КАК НаправлениеЭД,
		|	ВыбранныеДокументы.НомерДокументаОснования КАК НомерДокументаОснования,
		|	ВыбранныеДокументы.ДатаДокументаОснования КАК ДатаДокументаОснования
		|ИЗ
		|	ВыбранныеДокументы КАК ВыбранныеДокументы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	Документ,
		|	ЭлектронныйДокумент
		|ИТОГИ ПО
		|	Организация,
		|	Контрагент";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатГруппировкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока РезультатГруппировкаОрганизация.Следующий() Цикл
		РезультатГруппировкаКонтрагент = РезультатГруппировкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока РезультатГруппировкаКонтрагент.Следующий() Цикл
			
			ТЗОписи = СтруктураТаблицыОписи();
			Организация = РезультатГруппировкаКонтрагент.Организация;
			Контрагент = РезультатГруппировкаКонтрагент.Контрагент;
			АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", Контрагент.УникальныйИдентификатор());
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога, "*");
			
			РезультатДетальныеЗаписи = РезультатГруппировкаКонтрагент.Выбрать();
			Пока РезультатДетальныеЗаписи.Следующий() Цикл
				СтрокаТЗОписи = ТЗОписи.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЗОписи, РезультатДетальныеЗаписи);
				УникальныйИдентификатор = РезультатДетальныеЗаписи.ЭлектронныйДокумент.УникальныйИдентификатор();
				ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(РезультатДетальныеЗаписи.ЭлектронныйДокумент, УникальныйИдентификатор);
				СтрокаТЗОписи.ИмяФайлаДанных = ДанныеФайла.ИмяФайла;
				СтрокаТЗОписи.РазмерФайлаДанных = ДанныеФайла.Размер;
				
				СвойстваДокумента = Новый Структура;
				СвойстваДокумента.Вставить("ВидЭД", РезультатДетальныеЗаписи.ВидЭД);
				СвойстваДокумента.Вставить("ТипЭлементаВерсииЭД", РезультатДетальныеЗаписи.ТипЭлементаВерсииЭД);
				СвойстваДокумента.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
				
				СтрокаТЗОписи.КНД = ОбменСКонтрагентамиПовтИсп.КНДПоВидуЭД(СвойстваДокумента);
				ДанныеЭД = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				ДанныеЭД.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
				
			КонецЦикла;
			
			Файлы = НайтиФайлы(АдресКаталога, "*");
			Если Файлы.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось выгрузить документы по Контрагенту ""%1"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Контрагент);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
				Продолжить;
			КонецЕсли;
			
			МассивИменФайлов = Новый Массив;
			Для Каждого НайденныйФайл Из Файлы Цикл
				МассивИменФайлов.Добавить(НайденныйФайл.Имя);
			КонецЦикла;
			
			РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН, КПП");
			ИНН = СокрЛП(РеквизитыКонтрагента.ИНН);
			ИДОтправителя = ИНН + ?(СтрДлина(ИНН) = 12, "", СокрЛП(РеквизитыКонтрагента.КПП));
			ИДВыгрузки = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddЧЧммсс");
			ИмяФайла = "EDI_" + ИДОтправителя + "_" + ИДВыгрузки;
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
			Контейнер = Новый ЗаписьZipФайла(АдресКаталога + ИмяФайла + ".zip");
			
			Для Каждого Файл Из Файлы Цикл
				Контейнер.Добавить(Файл.ПолноеИмя);
			КонецЦикла;
			
			Контейнер.Записать();
				
			ДДВыгрузки = Новый ДвоичныеДанные(АдресКаталога + ИмяФайла + ".zip");
			АрхивныйФайл = Новый Файл(АдресКаталога + ИмяФайла + ".zip");
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("ИмяФайла", АрхивныйФайл.Имя);
			ДанныеФайла.Вставить("ИмяБезРасширения", АрхивныйФайл.ИмяБезРасширения);
			ДанныеФайла.Вставить("Расширение", Сред(АрхивныйФайл.Расширение, 2));
			ДанныеФайла.Вставить("Размер", АрхивныйФайл.Размер());
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДДВыгрузки, Контрагент.УникальныйИдентификатор());
			
			СоответствиеДанныеФайлаАдресВХранилище.Вставить(ДанныеФайла, АдресВХранилище);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
		КонецЦикла;
	КонецЦикла;
				
	Возврат СоответствиеДанныеФайлаАдресВХранилище;			
	
КонецФункции

&НаКлиенте
Процедура КомандаВыгрузитьЭДДляФНС(Команда)
	
	Если Элементы.СписокФайлов.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для формирования выгрузки необходимо выбрать хотя бы один документ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТаблицаВыбранныхДокументов.Очистить();
	Для каждого ИндСтроки Из Элементы.СписокФайлов.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СписокФайлов.ДанныеСтроки(ИндСтроки);
		НоваяСтрокаТЗ = ТаблицаВыбранныхДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ,ДанныеСтроки);
	КонецЦикла; 
	
	Соответствие = СформироватьФайлВыгрузкиДляФНС(ТаблицаВыбранныхДокументов);
	Если Соответствие.Количество() > 0 Тогда
		ПолноеИмяФайла = "";

		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбора.Заголовок = НСтр("ru = 'Выберите каталог для сохранения файла (файлов) выгрузки'");
		ДиалогВыбора.ПолноеИмяФайла = "";
		Если НЕ ДиалогВыбора.Выбрать() Тогда
			Возврат;
		КонецЕсли;

		ВсеДокументыВыгружены = Истина;
		Для Каждого Элемент Из Соответствие Цикл

			ДДВыгрузки = ПолучитьИзВременногоХранилища(Элемент.Значение);
			ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДиалогВыбора.Каталог)
				+ Элемент.Ключ.ИмяФайла;
			ДДВыгрузки.Записать(ПолноеИмяФайла);
			ЗаписанныйФайл = Новый Файл(ПолноеИмяФайла);
			ВсеДокументыВыгружены = ВсеДокументыВыгружены И ЗаписанныйФайл.Существует();
			
		КонецЦикла;
		ЕстьНевыгруженныеДокументы = НЕ ВсеДокументыВыгружены;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьФайлВыгрузкиДляФНС(Знач ТаблицаДокументов)
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКВыгрузке", ТаблицаДокументов.Выгрузить());
	ТипыОтветныхТитулов = Новый Массив;
	ТипыОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ТипыОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ТипыОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ТипыОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	Запрос.УстановитьПараметр("ТипыОтветныхТитулов", ТипыОтветныхТитулов);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МассивСсылок.Документ,
		|	МассивСсылок.ЭлектронныйДокумент,
		|	МассивСсылок.ВидЭД,
		|	МассивСсылок.ТипЭлементаВерсииЭД,
		|	МассивСсылок.НомерДокумента,
		|	МассивСсылок.ДатаДокумента,
		|	МассивСсылок.Контрагент,
		|	МассивСсылок.Организация,
		|	МассивСсылок.СуммаДокумента,
		|	МассивСсылок.НаправлениеЭД,
		|	МассивСсылок.НомерДокументаОснования,
		|	МассивСсылок.ДатаДокументаОснования,
		|	Ложь КАК НеобходимоЗаполнитьДокументОснование
		|ПОМЕСТИТЬ ВыбранныеДокументы
		|ИЗ
		|	&ДокументыКВыгрузке КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДокументы.Документ КАК Документ,
		|	ВыбранныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ВыбранныеДокументы.ВидЭД,
		|	ВыбранныеДокументы.ТипЭлементаВерсииЭД,
		|	ВыбранныеДокументы.НомерДокумента,
		|	ВыбранныеДокументы.ДатаДокумента,
		|	ВыбранныеДокументы.Контрагент,
		|	ВыбранныеДокументы.Организация КАК Организация,
		|	ВыбранныеДокументы.СуммаДокумента,
		|	ВыбранныеДокументы.НаправлениеЭД,
		|	ВыбранныеДокументы.НомерДокументаОснования,
		|	ВыбранныеДокументы.ДатаДокументаОснования,
		|	ВыбранныеДокументы.НеобходимоЗаполнитьДокументОснование,
		|	ПодчиненныеЭД.Ссылка КАК ПодтверждениеСсылка
		|ИЗ
		|	ВыбранныеДокументы КАК ВыбранныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
		|		ПО ВыбранныеДокументы.ЭлектронныйДокумент = ПодчиненныеЭД.ЭлектронныйДокументВладелец
		|			И (ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыОтветныхТитулов))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Документ,
		|	ЭлектронныйДокумент";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Результат.СледующийПоЗначениюПоля("Организация") Цикл
		ТЗОписи = СтруктураТаблицыОписи();
		Организация = Результат.Организация;
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", Организация.УникальныйИдентификатор());
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога, "*");
		Пока Результат.СледующийПоЗначениюПоля("ЭлектронныйДокумент") Цикл
			СтрокаТЗОписи = ТЗОписи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗОписи, Результат);
			УникальныйИдентификатор = Результат.ЭлектронныйДокумент.УникальныйИдентификатор();
			ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(Результат.ЭлектронныйДокумент, УникальныйИдентификатор);
			СтрокаТЗОписи.ИмяФайлаДанных = ДанныеФайла.ИмяФайла;
			СтрокаТЗОписи.РазмерФайлаДанных = ДанныеФайла.Размер;
			
			СвойстваДокумента = Новый Структура;
			СвойстваДокумента.Вставить("ВидЭД", Результат.ВидЭД);
			СвойстваДокумента.Вставить("ТипЭлементаВерсииЭД", Результат.ТипЭлементаВерсииЭД);
			СвойстваДокумента.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
			
			СтрокаТЗОписи.КНД = ОбменСКонтрагентамиПовтИсп.КНДПоВидуЭД(СвойстваДокумента);
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДанныеЭД.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
			МассивСтруктурПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(Результат.ЭлектронныйДокумент);
			
			Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
				Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
					СтрокаТЗОписи.ИмяФайлаПодписи    = ДанныеФайла.Наименование + "SGN.sgn";
					СтруктураПодписи.Подпись.Записать(АдресКаталога + СтрокаТЗОписи.ИмяФайлаПодписи);
					СтрокаТЗОписи.РазмерФайлаПодписи = ДанныеЭД.Размер();
					Прервать;
				КонецЦикла;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось выгрузить подпись по документу ""%1"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Результат.Документ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Результат.ПодтверждениеСсылка) Тогда
				ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(Результат.ПодтверждениеСсылка, УникальныйИдентификатор);
				СтрокаТЗОписи.ИмяФайлаДанныхПодтверждения = ДанныеФайла.ИмяФайла;
				СтрокаТЗОписи.РазмерФайлаДанныхПодтверждения = ДанныеФайла.Размер;
				ДанныеЭД = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				ДанныеЭД.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
				МассивСтруктурПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(Результат.ПодтверждениеСсылка);
				
				СвойстваДокумента.Вставить("Подтверждение", Истина);
				
				СтрокаТЗОписи.КНДПодтверждения = ОбменСКонтрагентамиПовтИсп.КНДПоВидуЭД(СвойстваДокумента);
				
				Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
					Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
						СтрокаТЗОписи.ИмяФайлаПодписиПодтверждения    =  ДанныеФайла.Наименование + "SGN.sgn";
						СтруктураПодписи.Подпись.Записать(АдресКаталога + СтрокаТЗОписи.ИмяФайлаПодписиПодтверждения);
						СтрокаТЗОписи.РазмерФайлаПодписиПодтверждения = ДанныеЭД.Размер();
						Прервать;
					КонецЦикла;
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось выгрузить ответную подпись по документу ""%1"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Результат.Документ);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Файлы = НайтиФайлы(АдресКаталога, "*");
		Если Файлы.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось выгрузить документы по Организации ""%1"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
			Продолжить;
		КонецЕсли;
		
		МассивИменФайлов = Новый Массив;
		Для Каждого НайденныйФайл Из Файлы Цикл
			
			МассивИменФайлов.Добавить(НайденныйФайл.Имя);
		КонецЦикла;
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП");
		ИНН = СокрЛП(РеквизитыОрганизации.ИНН);
		ИДОтправителя = ИНН + ?(СтрДлина(ИНН) = 12, "", СокрЛП(РеквизитыОрганизации.КПП));
		ИДВыгрузки = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddЧЧммсс");
		ИмяФайла = "EDI_" + ИДОтправителя + "_" + ИДВыгрузки;
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		Контейнер = Новый ЗаписьZipФайла(АдресКаталога + ИмяФайла + ".zip");
		
		Для Каждого Файл Из Файлы Цикл
			Контейнер.Добавить(Файл.ПолноеИмя);
		КонецЦикла;
		
		Если ФайлОписанияВыгрузки(Организация, ТЗОписи, АдресКаталога) Тогда
			Контейнер.Добавить(АдресКаталога + "описание.xml");
			
			Контейнер.Записать();
			
			ДДВыгрузки = Новый ДвоичныеДанные(АдресКаталога + ИмяФайла + ".zip");
			АрхивныйФайл = Новый Файл(АдресКаталога + ИмяФайла + ".zip");
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("ИмяФайла", АрхивныйФайл.Имя);
			ДанныеФайла.Вставить("ИмяБезРасширения", АрхивныйФайл.ИмяБезРасширения);
			ДанныеФайла.Вставить("Расширение", Сред(АрхивныйФайл.Расширение, 2));
			ДанныеФайла.Вставить("Размер", АрхивныйФайл.Размер());
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДДВыгрузки, Организация.УникальныйИдентификатор());
			
			СоответствиеДанныеФайлаАдресВХранилище.Вставить(ДанныеФайла, АдресВХранилище);
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
	КонецЦикла;
	
	Возврат СоответствиеДанныеФайлаАдресВХранилище;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьНастроек(ГруппаНастроек)
	
	МассивКлонируемыхЭлементов = Новый Массив;
    Для каждого ПодчиненныйЭлемент Из ГруппаНастроек.ПодчиненныеЭлементы Цикл
        Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
            УстановитьВидимостьНастроек(ПодчиненныйЭлемент);
        Иначе
            Если СтрНайти(ПодчиненныйЭлемент.Имя, "ВидСравнения") <> 0 И ЛОЖЬ Тогда
				ПодчиненныйЭлемент.АвтоМаксимальнаяШирина = Ложь;
				ПодчиненныйЭлемент.Ширина = 3;
				МассивКлонируемыхЭлементов.Добавить(ПодчиненныйЭлемент);
			КонецЕсли;
			
			Если СтрНайти(ПодчиненныйЭлемент.Имя, "Значение") <> 0
				И ПодчиненныйЭлемент.Заголовок = "Направление ДО" Тогда
		
				ПодчиненныйЭлемент.СписокВыбора.Добавить("Входящий ЭД");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("Исходящий ЭД");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("Входящий БД");
				ПодчиненныйЭлемент.КнопкаВыпадающегоСписка = Истина;
				
				ПодчиненныйЭлемент.УстановитьДействие("НачалоВыбора", "НаправлениеДОНачалоВыбора");
				
			ИначеЕсли СтрНайти(ПодчиненныйЭлемент.Имя, "Значение") <> 0
				И ПодчиненныйЭлемент.Заголовок = "Расширение" Тогда
				
				ПодчиненныйЭлемент.СписокВыбора.Добавить("csv");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("doc");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("docx");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("html");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("jpeg");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("jpg");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("mxl");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("pdf");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("png");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("pptm");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("pptx");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("rar");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("txt");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("xls");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("xlsm");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("xlsx");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("xml");
				ПодчиненныйЭлемент.СписокВыбора.Добавить("zip");
				ПодчиненныйЭлемент.КнопкаВыпадающегоСписка = Истина;
				
				ПодчиненныйЭлемент.УстановитьДействие("НачалоВыбора", "РасширениеНачалоВыбора");
				
			КонецЕсли;
			
        КонецЕсли;
    КонецЦикла;
    Для каждого КлонируемыйЭлемент Из МассивКлонируемыхЭлементов Цикл
        Клон = Элементы.Вставить(КлонируемыйЭлемент.Имя + "Клон", ТипЗнч(КлонируемыйЭлемент), КлонируемыйЭлемент.Родитель, КлонируемыйЭлемент);
        ЗаполнитьЗначенияСвойств(Клон, КлонируемыйЭлемент, "Вид, ПоложениеЗаголовка, РастягиватьПоГоризонтали, ПутьКДанным");
        КлонируемыйЭлемент.Видимость = Ложь;
		Клон.АвтоМаксимальнаяШирина = Ложь;
		Клон.Ширина = 3;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураТаблицыОписи()
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Документ");
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("ВидЭД");
	ТЗ.Колонки.Добавить("ТипЭлементаВерсииЭД");
	ТЗ.Колонки.Добавить("КНД");
	ТЗ.Колонки.Добавить("НаправлениеЭД");
	ТЗ.Колонки.Добавить("НомерДокумента");
	ТЗ.Колонки.Добавить("ДатаДокумента");
	ТЗ.Колонки.Добавить("НомерДокументаОснования");
	ТЗ.Колонки.Добавить("ДатаДокументаОснования");
	ТЗ.Колонки.Добавить("ИмяФайлаДанных");
	ТЗ.Колонки.Добавить("ИмяФайлаПодписи");
	ТЗ.Колонки.Добавить("РазмерФайлаДанных");
	ТЗ.Колонки.Добавить("РазмерФайлаПодписи");
	ТЗ.Колонки.Добавить("КНДПодтверждения");
	ТЗ.Колонки.Добавить("ИмяФайлаДанныхПодтверждения");
	ТЗ.Колонки.Добавить("ИмяФайлаПодписиПодтверждения");
	ТЗ.Колонки.Добавить("РазмерФайлаДанныхПодтверждения");
	ТЗ.Колонки.Добавить("РазмерФайлаПодписиПодтверждения");
	
	Возврат ТЗ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлОписанияВыгрузки(Организация, ТЗОписи, АдресКаталога)
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, ИНН, КПП");
	ИНН = СокрЛП(РеквизитыОрганизации.ИНН);
	ПространствоИменСхемы = "Upload2Statements";
	Попытка
		Файл = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(АдресКаталога + "описание.xml");
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "1.03", Истина, Ошибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ДатаВыгрузки", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"), Истина, Ошибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ВремяВыгрузки", Формат(ТекущаяДатаСеанса(), "ДЛФ=T"), Истина, Ошибки);
		
		СвОрганизация = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Организация", ПространствоИменСхемы);
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвОрганизация, "Наименование", РеквизитыОрганизации.Наименование, Истина, Ошибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвОрганизация, "ИНН", РеквизитыОрганизации.ИНН, Истина, Ошибки);
		Если СтрДлина(РеквизитыОрганизации.ИНН) = 10 Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвОрганизация, "КПП", РеквизитыОрганизации.КПП, Истина, Ошибки);
		КонецЕсли;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "Организация", СвОрганизация, Истина, Ошибки);
		
		СвКонтрагенты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Контрагенты", ПространствоИменСхемы);
		Контрагент = "";
		ИДКонтрагента = "";
		Для Каждого СтрокаОписи Из ТЗОписи Цикл
			Если СтрокаОписи.Контрагент <> Контрагент Тогда
				СвКонтрагент = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Контрагенты.Контрагент", ПространствоИменСхемы);
				Контрагент = СтрокаОписи.Контрагент;
				РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "Наименование, ИНН, КПП");
				ИДКонтрагента = РеквизитыКонтрагента.ИНН + РеквизитыКонтрагента.КПП;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвКонтрагент, "Идентификатор", ИДКонтрагента, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвКонтрагент, "Наименование", РеквизитыКонтрагента.Наименование, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвКонтрагент, "ИНН", РеквизитыКонтрагента.ИНН, Истина, Ошибки);
				Если СтрДлина(РеквизитыКонтрагента.ИНН) = 10 Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвКонтрагент, "КПП", РеквизитыКонтрагента.КПП, Истина, Ошибки);
				КонецЕсли;
				СвКонтрагенты.Контрагент.Добавить(СвКонтрагент);
			КонецЕсли;
			СвДокумент = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
			
			ВидДокумента = ВидДокументаПоВидуЭД(СтрокаОписи.ВидЭД, СтрокаОписи.ТипЭлементаВерсииЭД);
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "Вид", ВидДокумента, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "КНД", СтрокаОписи.КНД, Истина, Ошибки);
			Направление = ?(СтрокаОписи.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, "0", "1");
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "Направление", Направление, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "Номер", СтрокаОписи.НомерДокумента, Истина, Ошибки);
			ДатаДок = Формат(СтрокаОписи.ДатаДокумента, "ДЛФ=D");
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "Дата", ДатаДок, Истина, Ошибки);
			Если ЗначениеЗаполнено(СтрокаОписи.ДатаДокументаОснования)
				И ЗначениеЗаполнено(СтрокаОписи.НомерДокументаОснования) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "НомерДокОсн", СтрокаОписи.НомерДокументаОснования, , Ошибки);
				ДатаДок = Формат(СтрокаОписи.ДатаДокументаОснования, "ДЛФ=D");
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ДатаДокОсн", ДатаДок, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ИдКонтрагента", ИДКонтрагента, Истина, Ошибки);
			
			СвФайл = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.ФайлДок", ПространствоИменСхемы);
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФайл,     "Имя",     СтрокаОписи.ИмяФайлаДанных, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФайл,     "Размер",  СтрокаОписи.РазмерФайлаДанных, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФайл,     "КНД",     СтрокаОписи.КНД, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлДок", СвФайл, Истина, Ошибки);
			
			СвФайл = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.ФайлЭЦП", ПространствоИменСхемы);
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаПодписи, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаПодписи, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлЭЦП", СвФайл, Истина, Ошибки);
			
			Если ЗначениеЗаполнено(СтрокаОписи.ИмяФайлаДанныхПодтверждения) Тогда
				СвФайл = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.ФайлДокПодтверждения", ПространствоИменСхемы);
				
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаДанныхПодтверждения, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаДанныхПодтверждения, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "КНД", СтрокаОписи.КНДПодтверждения, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлДокПодтверждения", СвФайл, , Ошибки);
				
				СвФайл = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.ФайлЭЦППодтверждения", ПространствоИменСхемы);
				
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаПодписиПодтверждения, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаПодписиПодтверждения, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлЭЦППодтверждения", СвФайл, , Ошибки);
			КонецЕсли;
			
			Файл.Документ.Добавить(СвДокумент);
		КонецЦикла;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "Контрагенты", СвКонтрагенты, Истина, Ошибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(Ошибки) Тогда
			ТекстОшибки = ЭлектронноеВзаимодействиеСлужебный.СоединитьОшибки(Ошибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(Файл, АдресКаталога + "описание.xml", Ложь, "windows-1251");
		Возврат Истина;
	Исключение
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебный.СоединитьОшибки(Ошибки);
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование выгрузки ЭД в 1с-Отчетность'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидДокументаПоВидуЭД(ВидЭД, ТипЭлементаВерсииЭД)
	
	ВидДокумента = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			ВидДокумента = "01";
		Иначе
			ВидДокумента = "07";
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
			ВидДокумента = "02";
		Иначе
			ВидДокумента = "06";
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
			ВидДокумента = "03";
		Иначе
			ВидДокумента = "05";
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			ВидДокумента = "04";
		Иначе
			ВидДокумента = "08";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидДокумента;
	
КонецФункции

&НаСервере
Процедура УстановитьЭлементОтбораДинамическогоСписка(ИмяПоля, ПравоеЗначение = Неопределено, ВидСравнения = Неопределено, Представление = Неопределено, Использование = Неопределено, РежимОтображения = Неопределено)
	
	Для каждого ЭлементОтбора Из СписокФайлов.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
			
			ЭлементПользовательскихНастроек = СписокФайлов.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			
			Если ЭлементПользовательскихНастроек <> Неопределено Тогда
			
				ЭлементПользовательскихНастроек.ПравоеЗначение 		= ПравоеЗначение;
				ЭлементПользовательскихНастроек.ВидСравнения 		= ВидСравнения;
				//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-25 (#3816)
				//Начиная с 8.3.13 при обращении к не используемым свойствам объектов системы компоновки данных, находящихся в пользовательских настройках, генерируется исключение.
				//ЭлементПользовательскихНастроек.Представление 		= Представление;
				//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-25 (#3816)
				ЭлементПользовательскихНастроек.Использование 		= Использование;
				ЭлементПользовательскихНастроек.РежимОтображения 	= РежимОтображения;
			
			КонецЕсли; 
			
			Прервать;
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокПринтеров()
	
	ServiceSet = GetCOMObject("winmgmts:{impersonationLevel=impersonate}!\\"+ИмяКомпьютера()+"\root\cimv2");
	PrinterSet = ServiceSet.Get("Win32_Printer");
	
	Попытка
		СписокПринтеров = ServiceSet.ExecQuery("Select * from Win32_Printer");
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ=Истина;
		возврат;
	КонецПопытки;
	
	Для Каждого ЭлементПринтер из СписокПринтеров Цикл
		Элементы.Принтер.СписокВыбора.Добавить(ЭлементПринтер.Name);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПриложенияДляПечати()
	
	СписокПриложенийДляПечати = Новый Соответствие();
	
	Попытка
		ШелСкрипт = Новый COMОбъект("WScript.Shell");
		
		СвойстваПриложения = Новый Структура("ИмяПриложения, ПутьКПриложению");
		СвойстваПриложения.ИмяПриложения = ШелСкрипт.RegRead("HKCR\.pdf\");
		ПутьКПриложению = ШелСкрипт.RegRead("HKCR\"+СвойстваПриложения.ИмяПриложения+"\Shell\Open\Command\");
		ПутьКПриложению = НРег(ПутьКПриложению);
		ПутьКПриложению = Лев(ПутьКПриложению, СтрНайти(ПутьКПриложению, ".exe") + 4);
		ПутьКПриложению = СтрЗаменить(ПутьКПриложению, """","");
		ПутьКПриложению = СокрЛП(ПутьКПриложению);
		СвойстваПриложения.ПутьКПриложению = ПутьКПриложению;
		Если СтрНайти(ПутьКПриложению, ".exe") <> 0  Тогда
			СписокПриложенийДляПечати.Вставить("pdf", СвойстваПриложения);
		Иначе
			ПутьКПриложению = ШелСкрипт.RegRead("HKCR\Software\Adobe\Acrobat\Exe\");
			ПутьКПриложению = НРег(ПутьКПриложению);
			ПутьКПриложению = Лев(ПутьКПриложению, СтрНайти(ПутьКПриложению, ".exe") + 4);
			ПутьКПриложению = СтрЗаменить(ПутьКПриложению, """","");
			ПутьКПриложению = СокрЛП(ПутьКПриложению);
			СвойстваПриложения.ПутьКПриложению = ПутьКПриложению;
			Если СтрНайти(ПутьКПриложению, ".exe") <> 0  Тогда
				СписокПриложенийДляПечати.Вставить("pdf", СвойстваПриложения);
			Иначе
				ФайлAcroRd32 = Новый Файл("C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd32.exe");
				Если ФайлAcroRd32.Существует() Тогда
					СвойстваПриложения.ПутьКПриложению = "C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd32.exe";
					СписокПриложенийДляПечати.Вставить("pdf", СвойстваПриложения);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
		
		СвойстваПриложения = Новый Структура("ИмяПриложения, ПутьКПриложению");
		СвойстваПриложения.ИмяПриложения = ШелСкрипт.RegRead("HKCR\.xls\");
		ПутьКПриложению = ШелСкрипт.RegRead("HKCR\"+СвойстваПриложения.ИмяПриложения+"\Shell\Open\Command\");
		ПутьКПриложению = НРег(ПутьКПриложению);
		ПутьКПриложению = Лев(ПутьКПриложению, СтрНайти(ПутьКПриложению, ".exe") + 4);
		ПутьКПриложению = СтрЗаменить(ПутьКПриложению, """","");
		ПутьКПриложению = СокрЛП(ПутьКПриложению);
		СвойстваПриложения.ПутьКПриложению = ПутьКПриложению;
		Если СтрНайти(ПутьКПриложению, ".exe") <> 0  Тогда
			СписокПриложенийДляПечати.Вставить("xls", СвойстваПриложения);
		КонецЕсли; 
		
		СвойстваПриложения = Новый Структура("ИмяПриложения, ПутьКПриложению");
		СвойстваПриложения.ИмяПриложения = ШелСкрипт.RegRead("HKCR\.doc\");
		ПутьКПриложению = ШелСкрипт.RegRead("HKCR\"+СвойстваПриложения.ИмяПриложения+"\Shell\Open\Command\");
		ПутьКПриложению = НРег(ПутьКПриложению);
		ПутьКПриложению = Лев(ПутьКПриложению, СтрНайти(ПутьКПриложению, ".exe") + 4);
		ПутьКПриложению = СтрЗаменить(ПутьКПриложению, """","");
		ПутьКПриложению = СокрЛП(ПутьКПриложению);
		СвойстваПриложения.ПутьКПриложению = ПутьКПриложению;
		Если СтрНайти(ПутьКПриложению, ".exe") <> 0  Тогда
			СписокПриложенийДляПечати.Вставить("doc", СвойстваПриложения);
		КонецЕсли;
		
	Исключение
	КонецПопытки;

КонецПроцедуры

#Область Печатьфайлов

&НаКлиенте
// Выполняет печать файлов на принтер.
//
// Параметры:
//  Файлы              - ОпределяемыйТип.ПрисоединенныйФайл, Массив - Ссылка или массив ссылок на объекты с файлами.
//  ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище
//                       которой будет помещен файл.
//
Процедура НапечататьФайлы(Знач Файлы, ПараметрыВыполнения, ИдентификаторФормы = Неопределено)
	
	Если ТипЗнч(Файлы) <> Тип("Массив") Тогда
		Файлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Файлы);
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("НомерФайла",   0);
	ПараметрыВыполнения.Вставить("ДанныеФайлов", Файлы);
	ПараметрыВыполнения.Вставить("ДанныеФайла",  Файлы);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", ИдентификаторФормы);
	НапечататьФайлыВыполнение(Неопределено, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
// Процедура печати Файла
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения для дальнейшего вызова.
//  ПараметрыВыполнения  - Структура - со свойствами:
//        * НомерФайла               - Число - номер текущего файла,
//        * ДанныеФайла              - Структура - данные файла,
//        * УникальныйИдентификатор  - УникальныйИдентификатор.
//
Процедура НапечататьФайлыВыполнение(ОбработчикРезультата, ПараметрыВыполнения) Экспорт
	
	ОбработкаПрерыванияПользователя();
	
	Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеФайлов.Количество() Тогда
		Возврат;
	КонецЕсли;
	ПараметрыВыполнения.ДанныеФайла = 
		РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляПечати(ПараметрыВыполнения.ДанныеФайлов[ПараметрыВыполнения.НомерФайла],
		ПараметрыВыполнения.УникальныйИдентификатор);
			
	Если НЕ ПараметрыВыполнения.ДанныеФайла.Свойство("ТабличныйДокумент") Тогда
		пТабличныйДокумент = ПечатнаяФормаЭД(ПараметрыВыполнения.ДанныеФайлов[ПараметрыВыполнения.НомерФайла]);
		Если ТипЗнч(пТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			ПараметрыВыполнения.ДанныеФайла.Вставить("ТабличныйДокумент", пТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
		
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ТабличныйДокумент") Тогда
		ПараметрыВыполнения.ДанныеФайла.ТабличныйДокумент.ИмяПринтера = ИмяПринтера;
		ПараметрыВыполнения.ДанныеФайла.ТабличныйДокумент.Напечатать();
		// переходим к печати следующего файла.
		ПараметрыВыполнения.НомерФайла = ПараметрыВыполнения.НомерФайла + 1;
		Обработчик = Новый ОписаниеОповещения("НапечататьФайлыВыполнение", ЭтотОбъект, ПараметрыВыполнения);
		ВыполнитьОбработкуОповещения(Обработчик);
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыВыполнения) = Тип("Структура")
		И ПараметрыВыполнения.Свойство("ДанныеФайла")
		И ТипЗнч(ПараметрыВыполнения.ДанныеФайла) = Тип("Структура")
		И ПараметрыВыполнения.ДанныеФайла.Свойство("ПолноеНаименованиеВерсии")
		Тогда
		
		НайденныйСимвол = СтрНайти(ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, "_",,,2);
		Если НайденныйСимвол > 0 И НайденныйСимвол < 50 Тогда
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии = Лев(ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, НайденныйСимвол);
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии = ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии + Строка(Новый УникальныйИдентификатор());
		ИначеЕсли СтрДлина(ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии) < 50 Тогда
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии = ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии + Строка(Новый УникальныйИдентификатор());	
		Иначе
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии = Лев(ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, 50);
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии = ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии + Строка(Новый УникальныйИдентификатор());	
		КонецЕсли; 
		
	КонецЕсли;
	
	Если РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Обработчик = Новый ОписаниеОповещения("НапечататьФайлПослеПолученияВерсииВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиСлужебныйКлиент.ПолучитьФайлВерсииВРабочийКаталог(
			Обработчик,
			ПараметрыВыполнения.ДанныеФайла,
			"",
			ПараметрыВыполнения.УникальныйИдентификатор);
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Необходимо подключить расширение работы с файлами подключено";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура печати Файла после получения на диск
//
// Параметры:
//  ПараметрыВыполнения  - Структура - со свойствами:
//        * НомерФайла               - Число - номер текущего файла,
//        * ДанныеФайла              - Структура - данные файла,
//        * УникальныйИдентификатор  - УникальныйИдентификатор.
//
Процедура НапечататьФайлПослеПолученияВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт

	Если Результат.ФайлПолучен Тогда
		
		Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеФайлов.Количество() Тогда
			Возврат;
		КонецЕсли;
	
		НапечататьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, Результат.ПолноеИмяФайла);
		
		ПараметрыВыполнения.ФайлДляУдаления.Добавить(Результат.ПолноеИмяФайла);
		
	КонецЕсли;

	// переходим к печати следующего файла.
	ПараметрыВыполнения.НомерФайла = ПараметрыВыполнения.НомерФайла + 1;
	Обработчик = Новый ОписаниеОповещения("НапечататьФайлыВыполнение", ЭтотОбъект, ПараметрыВыполнения);
	ВыполнитьОбработкуОповещения(Обработчик);
	
КонецПроцедуры

&НаКлиенте
// Процедура предназначена для печати файла соответствующим приложением
//
// Параметры
//  ДанныеФайла          - Структура - данные файла. Описание см. РаботаСФайлами.ДанныеФайла.
//  ИмяОткрываемогоФайла - Строка - полное имя файла.
//
Процедура НапечататьФайлПриложением(ДанныеФайла, ИмяОткрываемогоФайла)
	
	РасширенияИсключения = 
	" m3u, m4a, mid, midi, mp2, mp3, mpa, rmi, wav, wma, 
	| 3g2, 3gp, 3gp2, 3gpp, asf, asx, avi, m1v, m2t, m2ts, m2v, m4v, mkv, mov, mp2v, mp4, mp4v, mpe, mpeg, mts, vob, wm, wmv, wmx, wvx,
	| 7z, zip, rar, arc, arh, arj, ark, p7m, pak, package, 
	| app, com, exe, jar, dll, res, iso, isz, mdf, mds,
	| cf, dt, epf, erf";
	
	Расширение = НРег(ДанныеФайла.Расширение);
	
	Если СтрНайти(РасширенияИсключения, " " + Расширение + ",") > 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Печать файлов данного типа не поддерживается.'"), Расширение);
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
	
	ИначеЕсли Расширение = "grs" Тогда
		
		Схема = Новый ГрафическаяСхема;
		Схема.Прочитать(ИмяОткрываемогоФайла);
		Схема.Напечатать();;
		
	Иначе
		
		Попытка
			
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86
				Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
			КонецЕсли;
			
			НапечататьИзПриложенияПоИмениФайла(ИмяОткрываемогоФайла, Расширение);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Описание=""%1""'"),
				КраткоеПредставлениеОшибки(Инфо))); 
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выполняет печать файла внешним приложением.
//
// Параметры
//  ИмяОткрываемогоФайла - Строка - полное имя файла.
//
Процедура НапечататьИзПриложенияПоИмениФайла(ИмяОткрываемогоФайла, Расширение)
	
	Если Не ЗначениеЗаполнено(ИмяОткрываемогоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
		Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		СвойстваПриложенияДляПечати = СписокПриложенийДляПечати.Получить(НРег(Расширение));
		Если СвойстваПриложенияДляПечати <> Неопределено
			И НРег(Расширение) = "pdf" Тогда
			
			WshShell = Новый COMОбъект("WScript.Shell"); 
			WshShell.Run("""" + СвойстваПриложенияДляПечати.ПутьКПриложению + """ /N /T """ + ИмяОткрываемогоФайла+ """" + ?(ЗначениеЗаполнено(ИмяПринтера), " """ + ИмяПринтера + """", ""), 0);
			
		ИначеЕсли НРег(Расширение) = "doc"
			ИЛИ НРег(Расширение) = "docx" Тогда
			
			Если WordAppl = Неопределено Тогда
				WordAppl = Новый COMОбъект("Word.Application");
			КонецЕсли; 
			
			WordAppl.Documents.Open(ИмяОткрываемогоФайла);
			WordAppl.Documents(ИмяОткрываемогоФайла).Activate();
			WordAppl.ActivePrinter = ИмяПринтера;
			WordAppl.ActiveDocument.PrintOut();
			
		ИначеЕсли НРег(Расширение) = "xls"
			ИЛИ НРег(Расширение) = "xlsx" Тогда
			
			Если ExcelAppl = Неопределено Тогда
				ExcelAppl = Новый COMОбъект("Excel.Application");
			КонецЕсли; 
			
			ExcelAppl.Workbooks.Open(ИмяОткрываемогоФайла);
			ExcelAppl.ActiveSheet.PrintOut(,,,,ИмяПринтера);
			ExcelAppl.DisplayAlerts = 0;
			ExcelAppl.WorkBooks.Close();
			
		Иначе
		
			Shell = Новый COMОбъект("Shell.Application");
			Shell.ShellExecute(ИмяОткрываемогоФайла, "", "", "print", 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПечатнаяФормаЭД(ФайлЭлектронногоДокумента, Идентификатор = Неопределено, ПараметрыПечати = Неопределено)
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("ПечатьЭД", Истина);
	Если ПараметрыПечати <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПараметрыПечати Цикл
			ПараметрыПросмотра.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ПараметрыПросмотра.Вставить("ВыводитьПостраничныйРазделитель", Истина);
	
	СтруктураПодписей = ОбменСКонтрагентамиСлужебный.ПодписиЭДДляВыводаНаПечать(ФайлЭлектронногоДокумента);
	ПараметрыПросмотра.Вставить("СтруктураПодписей", СтруктураПодписей);
	
	ТабличныйДокумент = ОбменСКонтрагентамиВнутренний.ФайлДанныхЭД(ФайлЭлектронногоДокумента, ПараметрыПросмотра);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти


#КонецОбласти

СписокПриложенийДляПечати = Новый Соответствие;