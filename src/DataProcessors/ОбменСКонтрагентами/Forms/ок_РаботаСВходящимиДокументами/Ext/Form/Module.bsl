//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103

&НаКлиенте
Перем СкрываемыеКоманды;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Список.Параметры.УстановитьЗначениеПараметра("ВидыЭДООтражаемыеВУчете", ок_ОбменСКонтрагентамиВнутренний.ВидыЭДООтражаемыеВУчете());
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-25 (#3356)
	Если Не ок_ОбменСКонтрагентамиВнутренний.ПользовательЯвляетсяАдминистратором() Тогда
		Элемент = Элементы.Найти("СписокПодписать");
		Если Элемент <> Неопределено Тогда
			Элемент.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-25 (#3356)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-28 (#3997)
	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеЭлектронныхДокументов") Тогда
		БухгалтерИлиПолныеПрава = Истина;
	КонецЕсли;	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-28 (#3997)

	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	Если Параметры.Свойство("БумажныйДокументооборот") Тогда
		БумажныйДокументооборот = Параметры.БумажныйДокументооборот;
	КонецЕсли;	
	
	Если БумажныйДокументооборот Тогда
		Заголовок = "Входящие бумажные документы";
	КонецЕсли;
	
	Элементы.СписокСоздатьБумажныйДокумент.Видимость = БумажныйДокументооборот;
	Элементы.СписокСкопироватьДокумент.Видимость = БумажныйДокументооборот;
	Элементы.Списокок_ПричиныОтклоненияПредставление.Видимость = БумажныйДокументооборот;
	Элементы.СписокНомерДокументаОтправителя.Видимость = БумажныйДокументооборот;
	Элементы.СписокДатаДокументаОтправителя.Видимость = БумажныйДокументооборот;
	Элементы.Списокок_НомерВходящегоСчетаФактуры.Видимость = БумажныйДокументооборот;
	Элементы.Списокок_ДатаВходящегоСчетаФактуры.Видимость = БумажныйДокументооборот;
	Элементы.СписокНомер.Видимость = БумажныйДокументооборот;
	Элементы.НомерДокументаОтправителя.Видимость = БумажныйДокументооборот;
	Элементы.ок_НомерВходящегоСчетаФактуры.Видимость = БумажныйДокументооборот;
	Элементы.СписокРеестрПроблемныхДокументов.Видимость = БумажныйДокументооборот;
	
	Элементы.СписокОткрытьПакетДокумента.Видимость = Не БумажныйДокументооборот;
	Элементы.СписокКарточкаДокумента.Видимость = Не БумажныйДокументооборот;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-21 (#3816)
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-02-10 (#3623)
	////Элементы.СписокТребуетОтраженияВУчете.Видимость = Не БумажныйДокументооборот;
	////Элементы.ТребуетОтраженияВУчете.Видимость = Не БумажныйДокументооборот;
	//Элементы.СписокТребуетОтраженияВУчете.Видимость = Ложь;
	//Элементы.ТребуетОтраженияВУчете.Видимость = Ложь;
	////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-02-10 (#3623)
	Элементы.СписокТребуетОтраженияВУчете.Видимость = Не БумажныйДокументооборот;
	Элементы.ТребуетОтраженияВУчете.Видимость = Не БумажныйДокументооборот;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-21 (#3816)
	Элементы.СписокНаименование.Видимость = Не БумажныйДокументооборот;
	Элементы.СписокТипЭД.Видимость = Не БумажныйДокументооборот;
	Элементы.Списокок_ДатаРедакции.Видимость = Не БумажныйДокументооборот;
	Элементы.Списокок_ДатаРедакцииОтправленной.Видимость = Не БумажныйДокументооборот;
	Элементы.СписокНомерВерсииЭД.Видимость = Не БумажныйДокументооборот;
	Элементы.СписокУникальныйИД.Видимость = Не БумажныйДокументооборот;
	Элементы.СписокПолучить.Видимость = Не БумажныйДокументооборот;
	Элементы.СписокОбработатьСлужебныеДокументы.Видимость = Не БумажныйДокументооборот;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
																			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
																			"ПрофильНастроекЭДО", 
																			//ПредопределенноеЗначение("Справочник.ПрофилиНастроекЭДО.ПустаяСсылка"), 
																			"",
																			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
																			?(БумажныйДокументооборот, ВидСравненияКомпоновкиДанных.Равно, ВидСравненияКомпоновкиДанных.НеРавно),
																			, 
																			Истина);
	Элементы.ок_Статус.СписокВыбора.Очистить();
	Для каждого ЗначениеПеречисления Из Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота Цикл
		Если БумажныйДокументооборот Тогда
			Если ЗначениеПеречисления = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен 
				Или ЗначениеПеречисления = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		Элементы.ок_Статус.СписокВыбора.Добавить(ЗначениеПеречисления);
	КонецЦикла;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)

	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3611)
	ок_ЗакрепленныйБухгалтер = Пользователи.АвторизованныйПользователь();
	Если ЗначениеЗаполнено(ок_ЗакрепленныйБухгалтер) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_ЗакрепленныйБухгалтер", ок_ЗакрепленныйБухгалтер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_ЗакрепленныйБухгалтер));
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-01-21 (#3611)
	
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	ок_УправлениеФормами.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьДоступныеКомандыСтроки", 10);
	
	// возможно потребуется установить отборы по значениям предыдущего сеанса
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_Статус", ок_Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_Статус));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Инициатор", Инициатор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Инициатор));
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_НомерЗаявки", ок_НомерЗаявки, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_НомерЗаявки));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Контрагент", Контрагент, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Контрагент));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДоговорКонтрагента", ДоговорКонтрагента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДоговорКонтрагента));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "НомерДокументаОтправителя", НомерДокументаОтправителя, ВидСравненияКомпоновкиДанных.Содержит,, ЗначениеЗаполнено(НомерДокументаОтправителя));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_НомерВходящегоСчетаФактуры", ок_НомерВходящегоСчетаФактуры, ВидСравненияКомпоновкиДанных.Содержит,, ЗначениеЗаполнено(ок_НомерВходящегоСчетаФактуры));
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-05-13 (#3340)
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ок_ЗаписанВходящийЭД" Тогда
		ОбновитьДанныеСписка();
	КонецЕсли;	
КонецПроцедуры
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-05-13 (#3340)

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КарточкаДокумента(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ОткрытьФорму("Документ.ЭлектронныйДокументВходящий.Форма.ФормаДокумента", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура Получить(Команда)
	
	ПолучитьНовыеЭлектронныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмаНаСогласование(Команда)
	
	СоздатьПисьмаНаСогласованиеНаСервере();
	//ОтправитьНаСогласованиеВходящиеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСлужебныеДокументы(Команда)
	
	ок_ОбменСКонтрагентамиКлиент.ОбработатьСлужебныеДокументы(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаСогласование(Команда)
	
	УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование"));
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ТекстВопроса = НСтр("ru = 'Выделенные в списке документы будут отклонены. Продолжить?'");
	УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"), Истина, ТекстВопроса);
		
КонецПроцедуры

&НаКлиенте
Процедура НаПодпись(Команда)
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-26 (#4227)
	//УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"))
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстанавливаемыйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать");
	
	Если НеобходимоЗаполнитьСуммуДокумента(ТекущиеДанные.Ссылка) Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ДокументСсылка"		, ТекущиеДанные.Ссылка);
		ПараметрыОповещения.Вставить("УстанавливаемыйСтатус", УстанавливаемыйСтатус);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПроверкуЗаполненияСуммыЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения,
						"Сумма документа равна нулю, заполнить сумму?",
						РежимДиалогаВопрос.ДаНет);
						
	Иначе
		УстановитьСтатусНачало(УстанавливаемыйСтатус);
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-26 (#4227)
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	//установить статус 
	УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен"));
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)	
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-04 (#3997) 
	//УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
	ок_ОбменСКонтрагентамиКлиент.УстановитьСтатус(ЭтаФорма, ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован"));
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-04 (#3997) 
	
КонецПроцедуры

&НаКлиенте
Процедура НеСогласовать(Команда)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-04 (#3997) 
	//УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
	ок_ОбменСКонтрагентамиКлиент.УстановитьСтатус(ЭтаФорма, ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-04 (#3997) 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВУчете(Команда)
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыУчетаНаСервере(ВыделенныеСтроки);
	
	Элементы.Список.Обновить();
	СписокПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРезультатыСогласования(Команда)
	
	ПроверитьРезультатыСогласованияНаСервере();
	
КонецПроцедуры

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-27 (#3997)
&НаКлиенте
Процедура ОтменитьСогласование(Команда)	
	ок_ОбменСКонтрагентамиКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-27 (#3997)

// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
&НаКлиенте
Процедура ок_ИзменитьСтатусыДокументов(Команда)
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ок_ТекущийСтатусВыбраннойСтроки = ок_ЕдинственныйСтатусВСпискеЭлектронныхДокументов(ВыделенныеСтроки);
	Если ЗначениеЗаполнено(ок_ТекущийСтатусВыбраннойСтроки) Тогда 
		ДоступныеСтатусыСписок = Новый СписокЗначений;
		ДоступныеСтатусыСписок.ЗагрузитьЗначения(ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ДоступныеПользовательскиеПереходыСтатусаПоКнопкеИзменитьСтатус(ок_ТекущийСтатусВыбраннойСтроки));
		ОтборСтатусов = Новый Структура;
		ОтборСтатусов.Вставить("Ссылка", ДоступныеСтатусыСписок);
		ФормаВыбора = ОткрытьФорму("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Форма.ФормаВыбора", Новый Структура("Отбор", ОтборСтатусов), Элементы.Список);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В выбранных документах разный статус, выберите документы с одинаковым статусом и повторите попытку");
	КонецЕсли;
	
КонецПроцедуры
// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы
 
&НаКлиенте
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-27 (#3997)
//Процедура СписокПриАктивизацииСтроки(Элемент)
Процедура СписокПриАктивизацииСтроки(Элемент) Экспорт
	
	Если НЕ БухгалтерИлиПолныеПрава Тогда
		
		ДоступныеЭлементы = Новый Массив;
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;	
		Если ТекущиеДанные <> Неопределено 
			И ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
			ДоступныеЭлементы.Добавить("СписокСогласовать");
			ДоступныеЭлементы.Добавить("СписокНеСогласовать");
		КонецЕсли;
		
		Для каждого Имя из СкрываемыеКоманды Цикл
			Элемент = Элементы.Найти(Имя);
			Если Элемент = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Элемент.Видимость = (ДоступныеЭлементы.Найти(Имя) <> Неопределено);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-27 (#3997)	
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	//без этого некорректно меняет текущую колонку и нельзя работать с обработкой выбора
	ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиЗавершение", 0.1, Истина);
	Возврат;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	ДоступныеЭлементы = Новый Массив;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ПустаяСсылка") 
			Или ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
			ДоступныеЭлементы.Добавить("СписокОтклонить");
			ДоступныеЭлементы.Добавить("СписокНаСогласование");
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
			ДоступныеЭлементы.Добавить("СписокСогласовать");
			ДоступныеЭлементы.Добавить("СписокНеСогласовать");
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
			ДоступныеЭлементы.Добавить("СписокНаСогласование");
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
			//ДоступныеЭлементы.Добавить("СписокОтклонить");
			Если БумажныйДокументооборот Тогда
				ДоступныеЭлементы.Добавить("СписокЗавершить");
			Иначе	
				ДоступныеЭлементы.Добавить("СписокОтклонить");
			КонецЕсли;
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован") Тогда
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
			//ДоступныеЭлементы.Добавить("СписокНаПодпись");
			Если БумажныйДокументооборот Тогда
				ДоступныеЭлементы.Добавить("СписокЗавершить");
			Иначе	
				ДоступныеЭлементы.Добавить("СписокНаПодпись");
			КонецЕсли;
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать") Тогда
			ДоступныеЭлементы.Добавить("СписокПодписать");
		КонецЕсли;	
		Если ТекущиеДанные.ТребуетОтраженияВУчете 
												Тогда
			ДоступныеЭлементы.Добавить("СписокОтразитьВУчете");
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		Если ТекущиеДанные.ок_Проблемный И БумажныйДокументооборот Тогда
			ДоступныеЭлементы.Добавить("СписокВвестиНаОснованииНовыйДокумент");
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	КонецЕсли;	
	Для каждого Имя из СкрываемыеКоманды Цикл
		Элемент = Элементы.Найти(Имя);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элемент.Видимость = (ДоступныеЭлементы.Найти(Имя) <> Неопределено);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ок_СтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_Статус", ок_Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_Статус));
	
КонецПроцедуры

&НаКлиенте
Процедура ок_СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ок_Статус) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Инициатор", Инициатор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Инициатор));
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Инициатор) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТребуетОтраженияВУчетеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ТребуетОтраженияВУчете", ТребуетОтраженияВУчете, ВидСравненияКомпоновкиДанных.Равно,, ТребуетОтраженияВУчете);
	
КонецПроцедуры


//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3611)
&НаКлиенте
Процедура ок_ЗакрепленныйБухгалтерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_ЗакрепленныйБухгалтер", ок_ЗакрепленныйБухгалтер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_ЗакрепленныйБухгалтер));
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ЗакрепленныйБухгалтерОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ок_ЗакрепленныйБухгалтер) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-01-21 (#3611)

// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
&НаКлиенте
Процедура СписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ок_НовыйСтатусВыбраннойСтроки = ВыбранноеЗначение;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ок_СтатусыВходящегоЭлектронногоДокументооборота") Тогда 
		
		Если ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
				УстановитьСтатусНачало(ВыбранноеЗначение);
			Иначе
				УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
				ок_ОбменСКонтрагентамиКлиент.ОтменитьСогласование(ЭтаФорма);
			Иначе
				ок_ОбменСКонтрагентамиКлиент.УстановитьСтатус(ЭтаФорма, ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован") Тогда
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
				ок_ОбменСКонтрагентамиКлиент.ОтменитьСогласование(ЭтаФорма);
			ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать") Тогда
				УстановитьСтатусНачало(ВыбранноеЗначение);
			Иначе
				УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
				ок_ОбменСКонтрагентамиКлиент.ОтменитьСогласование(ЭтаФорма);
			ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать") Тогда
				ТекстВопроса = НСтр("ru = 'Выделенные в списке документы будут отклонены. Продолжить?'");
				УстановитьСтатусНачало(ВыбранноеЗначение, Истина, ТекстВопроса);
			Иначе
				УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать")
			Или ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен") Тогда
			УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ЗавершенБезПодписания") Тогда
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
				УстановитьСтатусНачало(ВыбранноеЗначение);	
			Иначе
				УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен") Тогда
			УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьПисьмаНаСогласованиеНаСервере()
	
	ок_ОбменСКонтрагентамиВнутренний.СоздатьПисьмаНаСогласование();
	//ок_ОбменСКонтрагентамиВнутренний.ОтправитьНаСогласованиеВходящиеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНовыеЭлектронныеДокументы()
	
	ОбменСКонтрагентамиСлужебный.ПолучитьНовыеЭлектронныеДокументы();
	
КонецПроцедуры

//&НаСервере
//Процедура ОбработатьСлужебныеЭтапы()
//	
//	ок_ОбменСКонтрагентамиВнутренний.ОбработатьСлужебныеЭтапы();
//	
//КонецПроцедуры

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-12 #3997
&НаСервереБезКонтекста
Функция ПроверитьДокументыПередСогласованием(Список)
	Возврат Обработки.ОбменСКонтрагентами.ПроверитьДокументыПередСогласованием(Список);
КонецФункции
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец  2021-01-12 #3997

&НаКлиенте
Процедура УстановитьСтатусНачало(Статус, УказатьКомментарий = Ложь, ТекстВопроса = "")
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-12 #3997
	Если Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
		Отказ = ПроверитьДокументыПередСогласованием(ВыделенныеСтроки);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;				
	КонецЕсли;	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец  2021-01-12 #3997
	
	ИмяСтатуса = Строка(Статус);
	Если ПустаяСтрока(ТекстВопроса) Тогда
		ТекстВопроса = "У выделенных в списке документов будет установлен статус ""%ИмяСтатуса%"". Продолжить?";
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяСтатуса%", ИмяСтатуса);
	КонецЕсли;	

	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки, ИмяСтатуса, Статус, УказатьКомментарий, ЗаголовокОкнаКомментария, ПредупреждениеПустогоКомментария", 
																	ВыделенныеСтроки, 
																	ИмяСтатуса, 
																	Статус, 
																	УказатьКомментарий,
																	НСтр("ru = 'Укажите причину'"),
																	НСтр("ru = 'Не указана причина!'"),
																	);
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомментарийОтказа(ВыделенныеСтроки, НовыйСтатус)
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяРеквизита = "";
	Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать")
		Или НовыйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
		ИмяРеквизита = "ок_ПричинаОтклоненияСогласования";
	КонецЕсли;	
	
	Если ИмяРеквизита = "" Тогда
		Возврат "";
	КонецЕсли;
		
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыделенныеСтроки[0], ИмяРеквизита);
	
КонецФункции

&НаСервереБезКонтекста
Функция НеобходимоУказатьКомментарий(ВыделенныеСтроки, ДополнительныеПараметры)
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Статус <> ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ТекущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыделенныеСтроки[0], "ок_Статус");
	Если ТекущийСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
		ДополнительныеПараметры.Вставить("ЗаголовокОкнаКомментария", "Укажите комментарий для согласующего");
		ДополнительныеПараметры.Вставить("ПредупреждениеПустогоКомментария", "Не указан комментарий!");
		Возврат Истина;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3367)
	ИначеЕсли ТекущийСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
		ДополнительныеПараметры.Вставить("ЗаголовокОкнаКомментария", "Укажите комментарий для согласующего");
		ДополнительныеПараметры.Вставить("ПредупреждениеПустогоКомментария", "");
		Возврат Истина;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3367)
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	//если переводим в статус на согласование, то нужно если текущий статус Не согласован, то нужно запросить новый комментарий для того чтобы указать его в письме Инициатору
	Если Не ДополнительныеПараметры.УказатьКомментарий И ДополнительныеПараметры.Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
		УказатьКомментарий = НеобходимоУказатьКомментарий(ДополнительныеПараметры.ВыделенныеСтроки, ДополнительныеПараметры);
		Если УказатьКомментарий Тогда
			ДополнительныеПараметры.Вставить("УказатьКомментарий", УказатьКомментарий);
		КонецЕсли;	
	КонецЕсли;
	
	Если ДополнительныеПараметры.УказатьКомментарий Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("УстановитьСтатусПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры), ПолучитьКомментарийОтказа(ДополнительныеПараметры.ВыделенныеСтроки, ДополнительныеПараметры.Статус), ДополнительныеПараметры.ЗаголовокОкнаКомментария, , Истина)		
	Иначе
		УстановитьСтатусПослеЗавершения(, ДополнительныеПараметры);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПослеЗавершения(Результат = "", ДополнительныеПараметры) Экспорт
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3367)
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПредупреждениеПустогоКомментария) Тогда
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3367)
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Результат) И ДополнительныеПараметры.УказатьКомментарий Тогда
		ПоказатьПредупреждение(, ДополнительныеПараметры.ПредупреждениеПустогоКомментария);
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-07-03 (#3367)
	КонецЕсли;
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-07-03 (#3367)
	
	Если ДополнительныеПараметры.Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен") Тогда
		МассивСертификатов = Неопределено;
		Сертификат = ПолучитьСертификатДокумента(ДополнительныеПараметры.ВыделенныеСтроки[0]);
		Если Сертификат <> Неопределено Тогда
			МассивСертификатов = Новый Массив;
			МассивСертификатов.Добавить(Сертификат);
		КонецЕсли;	
		ок_ОбменСКонтрагентамиКлиент.ВыполнитьЗапросСертификатаДляПодписания(ЭтотОбъект, "ПодписатьИОтправитьДокументы", ДополнительныеПараметры, МассивСертификатов);
		Возврат;
		//Для каждого Элемент из ДополнительныеПараметры.ВыделенныеСтроки Цикл
		//	Текст = Новый ТекстовыйДокумент;
		//	Текст.ДобавитьСтроку("Тест");
		//	ИмяФайла = ПолучитьИмяВременногоФайла();
		//	Текст.Записать(ИмяФайла);
		//	Файлы = Новый Массив;
		//	СписокПредставлений = Новый СписокЗначений;
		//	Файлы.Добавить(Новый Структура("Данные", Новый ДвоичныеДанные(ИмяФайла)));
		//	СписокПредставлений.Добавить("");
		//	УдалитьФайлы(ИмяФайла);
		//	Сертификат = ПолучитьСертификатДокумента(Элемент);
		//	ОписаниеДанных = Новый Структура;
		//	ОписаниеДанных.Вставить("Операция", "Подписание электронного документа");
		//	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		//	ОписаниеДанных.Вставить("ЗаголовокДанных", "Предварительное указание сертификата для подписания");
		//	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
		//	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
		//	Если Сертификат <> Неопределено Тогда
		//		МассивСертификатов = Новый Массив;
		//		МассивСертификатов.Добавить(Сертификат);
		//		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		//	КонецЕсли;	
		//	ОписаниеДанных.Вставить("НаборДанных", Файлы);
		//	ОписаниеДанных.Вставить("ПредставлениеНабора", "Предварительное указание сертификата для подписания");
		//	ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
		//	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодписатьИОтправитьДокументы", ЭтотОбъект, ДополнительныеПараметры);
		//	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
		//	
		//	//ПодписатьИОтправитьДокументы(ДополнительныеПараметры);
		//	Возврат;
		//КонецЦикла;
	КонецЕсли;	
	
	//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
	//если переводим в статус на согласование, то нужно отметить файлы к отправке
	Если ДополнительныеПараметры.Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда		
		ДополнительныеПараметры.Вставить("ЭтаФорма", ЭтаФорма);
		ДополнительныеПараметры.Вставить("МодульОбработчикаОповещения", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("ИмяОбработчикаОповещения", "ОтправитьНаСогласованиеПослеОтметкиВложений");
		ДополнительныеПараметры.Вставить("КомментарийНаСогласование", Результат);
		ок_ОбменСКонтрагентамиКлиент.ПередОтправкойФайловНаСогласование(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;	
	//ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ИмяСтатуса = ДополнительныеПараметры.ИмяСтатуса;
	
    ОчиститьСообщения();
	
    КоличествоОбработанных = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусВходящегоДокументооборота(ВыделенныеСтроки, ДополнительныеПараметры, Результат);
    ок_УправлениеФормамиКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), ИмяСтатуса);
	
	Элементы.Список.Обновить();
	СписокПриАктивизацииСтроки(Неопределено);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрисоединенныеФайлыДляПодписания(ЭлектронныйДокумент, Имена)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И ЭДПрисоединенныеФайлы.НомерЭД В(&Имена)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("Имена", Имена);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

//&НаСервереБезКонтекста
//Функция ПолучитьСертификатыПрофиля(Профиль)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	Данные.Сертификат КАК Сертификат
//		|ИЗ
//		|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Данные
//		|ГДЕ
//		|	Данные.Ссылка = &Профиль
//		|	И Данные.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)";
//	
//	Запрос.УстановитьПараметр("Профиль", Профиль);
//	
//	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сертификат");
//	
//КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСертификатДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Сертификаты.Сертификат КАК Сертификат
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		//|		ПО ЭлектронныйДокументВходящий.ПрофильНастроекЭДО = Сертификаты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК Сертификаты
		|		ПО ЭлектронныйДокументВходящий.ИдентификаторОрганизации = Сертификаты.ИдентификаторЭДО
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
		|ГДЕ
		|	ЭлектронныйДокументВходящий.Ссылка = &Ссылка
		|	И Сертификаты.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
		//|	Сертификаты.НомерСтроки";
		|	Сертификаты.ДействителенДо УБЫВ";
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Сертификат;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//&НаСервереБезКонтекста
//Функция ПолучитьПрофильДокумента(Документ)
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПрофильНастроекЭДО");

//КонецФункции

&НаКлиенте
Процедура ПодписатьИОтправитьДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Сертификат = Неопределено;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
		Сертификат = Результат.ВыбранныйСертификат.Ссылка;
	КонецЕсли;	
	
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ок_ОбменСКонтрагентамиКлиент.ПодписатьИОтправитьДокументы(Сертификат, ДополнительныеПараметры.ВыделенныеСтроки, "Входящий", ЭтотОбъект);
	
	//ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	//
	//Если ок_ОбменСКонтрагентамиКлиент.ДостаточноДанныхДляПодписанияБезЗапросаПользователя(Сертификат) Тогда
	//	ИсходящиеПараметры = Новый Структура("Профиль, Форма, ОбновитьДанныеСписка, МоментСтарта, МаксимальнаяДлительность", ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПрофильДокумента(ВыделенныеСтроки[0]), ЭтотОбъект, Ложь, ТекущаяДата(), 120);
	//	ок_ОбменСКонтрагентамиКлиент.ОбработатьСлужебныеДокументыЗавершение(Сертификат, ИсходящиеПараметры);
	//	//ОбработатьСлужебныеДокументыЗавершение(Сертификат, ПолучитьПрофильДокумента(ДополнительныеПараметры.ВыделенныеСтроки[0]));
	//КонецЕсли;	
	//
	//ДанныеФайловДляПодписания = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеВходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат);
	//Если ДанныеФайловДляПодписания = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;	
	//
	//КоличествоИсходящихДокументов = ДанныеФайловДляПодписания.Количество();
	//Ном = 0;
	//Для каждого Элемент из ДанныеФайловДляПодписания Цикл
	//	
	//	Ном = Ном + 1;
	//	Файлы = Новый Массив;
	//	СписокПредставлений = Новый СписокЗначений;
	//	Для каждого ЭлементФайла Из Элемент.Значение.ФайлыДляПодписания Цикл
	//		Файлы.Добавить(Новый Структура("Данные", ПолучитьИзВременногоХранилища(ЭлементФайла.Адрес)));
	//		СписокПредставлений.Добавить(ЭлементФайла.ИмяФайла);
	//	КонецЦикла;
	//	Если Файлы.Количество() = 0 Тогда
	//		Если Ном = КоличествоИсходящихДокументов Тогда
	//			ОбновитьДанныеСписка();
	//		КонецЕсли;	
	//		Продолжить;
	//	КонецЕсли;	
	//	ВходящийДокумент = Элемент.Ключ;
	//	ОписаниеДанных = Новый Структура;
	//	ОписаниеДанных.Вставить("Операция", "Подписание файлов");
	//	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	//	ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл(ы)");
	//	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	//	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	//	Если Сертификат <> Неопределено Тогда
	//		МассивСертификатов = Новый Массив;
	//		МассивСертификатов.Добавить(Сертификат);
	//		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
	//	КонецЕсли;	
	//	ОписаниеДанных.Вставить("НаборДанных", Файлы);
	//	ОписаниеДанных.Вставить("ПредставлениеНабора", "Файл(ы): " + Файлы.Количество());
	//	ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
	//	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ОбработчикЗавершенияПодписания", ЭтотОбъект, Новый Структура("Документ, Данные, Количество, Номер", Элемент.Ключ, Элемент.Значение, КоличествоИсходящихДокументов, Ном));
	//	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	//			
	//КонецЦикла;
	
	
	//Сертификат = Неопределено;
	//
	//Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
	//	Сертификат = Результат.ВыбранныйСертификат.Ссылка;
	//КонецЕсли;	
	//
	//Если Сертификат = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;	
	//
	//ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	//ДанныеФайловДляПодписания = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеВходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат);
	//Если ДанныеФайловДляПодписания = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;	
	//
	//Для каждого Элемент из ДанныеФайловДляПодписания Цикл
	//	
	//	Файлы = Новый Массив;
	//	СписокПредставлений = Новый СписокЗначений;
	//	Для каждого ЭлементФайла Из Элемент.Значение.ФайлыДляПодписания Цикл
	//		//Файлы.Добавить(ПолучитьИзВременногоХранилища(ЭлементФайла.Адрес));
	//		Файлы.Добавить(Новый Структура("Данные", ПолучитьИзВременногоХранилища(ЭлементФайла.Адрес)));
	//		СписокПредставлений.Добавить(ЭлементФайла.ИмяФайла);
	//	КонецЦикла;
	//	Если Файлы.Количество() = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;	
	//	ВходящийДокумент = Элемент.Ключ;
	//	//ПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВходящийДокумент, "ПрофильНастроекЭДО");
	//	//Сертификат = ПолучитьСертификатДокумента(ВходящийДокумент);
	//	ОписаниеДанных = Новый Структура;
	//	ОписаниеДанных.Вставить("Операция", "Подписание электронного документа");
	//	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	//	ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл(ы)");
	//	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	//	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	//	Если Сертификат <> Неопределено Тогда
	//		МассивСертификатов = Новый Массив;
	//		МассивСертификатов.Добавить(Сертификат);
	//		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
	//	КонецЕсли;	
	//	ОписаниеДанных.Вставить("НаборДанных", Файлы);
	//	ОписаниеДанных.Вставить("ПредставлениеНабора", "Файл(ы): " + Файлы.Количество());
	//	ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
	//	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ОбработчикЗавершенияПодписания", ЭтотОбъект, Элемент);
	//	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	//			
	//КонецЦикла;
	//
	////Для каждого Документ из ВыделенныеСтроки Цикл
	////
	////	МассивДокументов = Новый Массив;
	////	Для каждого Элемент из ДанныеФайловДляПодписания Цикл
	////		Если Элемент.Ключ <> Документ Тогда
	////			Продолжить;
	////		КонецЕсли;	
	////		Имена = Новый Массив;
	////		Для каждого ЭлементФайла Из Элемент.Значение Цикл
	////			Имена.Добавить(ЭлементФайла.ИмяФайла);
	////		КонецЦикла;
	////		Если Имена.Количество() = 0 Тогда
	////			Продолжить;
	////		КонецЕсли;	
	////		МассивЭД = ПрисоединенныеФайлыДляПодписания(Документ, Имена);
	////		Если МассивЭД.Количество() = 0 Тогда
	////			Продолжить;
	////		КонецЕсли;	
	////		МассивДокументов.Добавить(Документ);
	////		Прервать;
	////	КонецЦикла;	
	////	
	////	Если МассивДокументов.Количество() = 0 Тогда
	////		Продолжить;
	////	КонецЕсли;	
	////	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработчикЗавершенияПодписания", ЭтотОбъект, Новый Структура("ДополнительныеПараметры, ПодписанныеДокументы", ДополнительныеПараметры, МассивДокументов));
	////	ОбработчикПриПолученииПодписи = Новый ОписаниеОповещения("ОбработчикПриПолученииПодписиПодписания", ЭтотОбъект, МассивЭД);
	////	РаботаСФайламиСлужебныйКлиент.ПодписатьФайлы(МассивЭД, УникальныйИдентификатор, ОбработчикЗавершения, ОбработчикПриПолученииПодписи);
	//////	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(МассивДокументов);
	//////	Если МассивСсылок = Неопределено Тогда
	//////		Если МассивЭД = Неопределено Тогда
	//////			Возврат Неопределено;
	//////		Иначе
	//////			МассивСсылок = Новый Массив;
	//////		КонецЕсли;
	//////	КонецЕсли;
	//////
	//////	//ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить", , МассивЭД);
	//////	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "Подписать", , МассивЭД);
	////КонецЦикла;
	
КонецПроцедуры	

//&НаКлиенте
//Процедура ОбработчикЗавершенияПодписания(Результат, ДополнительныеПараметры) Экспорт
//	
//	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
//		
//		//отправить документы...
//		ДанныеДляОтправки = Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания");
//		ЗаполнитьЗначенияСвойств(ДанныеДляОтправки, ДополнительныеПараметры.Данные);
//		
//		Индекс = 0;
//		Для каждого ДанныеФайла из ДанныеДляОтправки.ФайлыДляПодписания Цикл
//			ДанныеПодписи = Результат.НаборДанных[Индекс].СвойстваПодписи.Подпись;
//			ДанныеФайла.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(ДанныеПодписи));
//			ДанныеФайла.Вставить("Сертификат", Результат.ВыбранныйСертификат.Ссылка);
//			ДанныеФайла.Вставить("Отпечаток", Результат.ВыбранныйСертификат.Отпечаток);
//			Индекс = Индекс + 1;
//		КонецЦикла;
//		
//		РезультатОтправки = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УтвердитьОтклонитьВходящийДокумент(ДополнительныеПараметры.Документ, ДанныеДляОтправки);
//		Если РезультатОтправки Тогда
//		    КоличествоОбработанных = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусВходящегоДокументооборота(ДополнительныеПараметры.Документ, Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен")));
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ДополнительныеПараметры.Номер = ДополнительныеПараметры.Количество Тогда
//		ОбновитьДанныеСписка();
//	КонецЕсли;
//	
//	//Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
//	//	
//	//	//отправить документы...
//	//	ДанныеДляОтправки = Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания");
//	//	ЗаполнитьЗначенияСвойств(ДанныеДляОтправки, ДополнительныеПараметры.Значение);
//	//	
//	//	Индекс = 0;
//	//	Для каждого ДанныеФайла из ДанныеДляОтправки.ФайлыДляПодписания Цикл
//	//		ДанныеПодписи = Результат.НаборДанных[Индекс].СвойстваПодписи.Подпись;
//	//		ДанныеФайла.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(ДанныеПодписи));
//	//		ДанныеФайла.Вставить("Сертификат", Результат.ВыбранныйСертификат.Ссылка);
//	//		ДанныеФайла.Вставить("Отпечаток", Результат.ВыбранныйСертификат.Отпечаток);
//	//		Индекс = Индекс + 1;
//	//	КонецЦикла;
//	//	
//	//	РезультатОтправки = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УтвердитьОтклонитьВходящийДокумент(ДополнительныеПараметры.Ключ, ДанныеДляОтправки);
//	//	Если РезультатОтправки Тогда
//	//	
//	//		ОчиститьСообщения();
//	//	    ИмяСтатуса = "Отправлен";
//	//	    //КоличествоОбработанных = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусВходящегоДокументооборота(ДополнительныеПараметры.ПодписанныеДокументы, ДополнительныеПараметры.ДополнительныеПараметры);
//	//	    //ок_УправлениеФормамиКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ДополнительныеПараметры.ПодписанныеДокументы.Количество(), ИмяСтатуса);
//	//	    КоличествоОбработанных = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусВходящегоДокументооборота(ДополнительныеПараметры.Ключ, Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен")));
//	//	    ок_УправлениеФормамиКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, КоличествоОбработанных, ИмяСтатуса);
//	//		
//	//		Элементы.Список.Обновить();
//	//		СписокПриАктивизацииСтроки(Неопределено);
//	//		
//	//	КонецЕсли;
//	//КонецЕсли;		
//КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыУчетаНаСервере(ВыделенныеСтроки, СпособОбработки = "СчетФактураПолученный")
	
	//по сути повторяем алгоритм процедуры СоздатьДокументУчетаНаСервере из Документ.ЭлектронныйДокументВходящий.Форма.ПодборДокументовУчета
	
	Для каждого ЭлектронныйДокумент Из ВыделенныеСтроки Цикл
		
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
		//ок_ОбменСКонтрагентамиВнутренний.СоздатьДокументыУчетаЭлектронногоДокумента(ЭлектронныйДокумент, СпособОбработки);
		ок_ОбменСКонтрагентамиВнутренний.СоздатьДокументыУчетаЭлектронногоДокумента2019(ЭлектронныйДокумент, "Вручную")
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРезультатыСогласованияНаСервере()
	
	ок_ОбменСКонтрагентамиВнутренний.ПроверитьРезультатыСогласования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСписка() Экспорт
	
	Элементы.Список.Обновить();
	СписокПриАктивизацииСтроки(Неопределено);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступныеКомандыСтроки() Экспорт
	
	СписокПриАктивизацииСтроки(Неопределено);
			
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
&НаКлиенте
Процедура СоздатьБумажныйДокумент(Команда)
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента", Новый Структура("Ключ", ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящий.ПустаяСсылка")));
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНаОснованииНовыйДокумент(Команда)
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента", Новый Структура("Ключ, ок_ДокументРодитель", 
																									ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящий.ПустаяСсылка"),
																									ВыделенныеСтроки[0]));
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДокумент(Команда)
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента", Новый Структура("Ключ, ЗначениеКопирования", 
																									ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящий.ПустаяСсылка"),
																									ВыделенныеСтроки[0]));
КонецПроцедуры

&НаКлиенте
Процедура ок_НомерЗаявкиПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_НомерЗаявки", ок_НомерЗаявки, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_НомерЗаявки));
	
КонецПроцедуры

&НаКлиенте
Процедура ок_НомерЗаявкиОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ок_НомерЗаявки) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Контрагент", Контрагент, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Контрагент));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДоговорКонтрагента", ДоговорКонтрагента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДоговорКонтрагента));
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДокументаОтправителяПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "НомерДокументаОтправителя", НомерДокументаОтправителя, ВидСравненияКомпоновкиДанных.Содержит,, ЗначениеЗаполнено(НомерДокументаОтправителя));
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДокументаОтправителяОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(НомерДокументаОтправителя) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_НомерВходящегоСчетаФактурыПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_НомерВходящегоСчетаФактуры", ок_НомерВходящегоСчетаФактуры, ВидСравненияКомпоновкиДанных.Содержит,, ЗначениеЗаполнено(ок_НомерВходящегоСчетаФактуры));
	
КонецПроцедуры

&НаКлиенте
Процедура ок_НомерВходящегоСчетаФактурыОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ок_НомерВходящегоСчетаФактуры) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеестрПроблемныхДокументов(Команда)
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_РеестрПроблемныхДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СписокДокументУчета" Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументУчета) Тогда
			
			СтандартнаяОбработка = Ложь;	
			ПоказатьЗначение(, ТекущиеДанные.ДокументУчета);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиЗавершение()
	
	ДоступныеЭлементы = Новый Массив;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ПустаяСсылка") 
			Или ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
			ДоступныеЭлементы.Добавить("СписокОтклонить");
			ДоступныеЭлементы.Добавить("СписокНаСогласование");
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
			ДоступныеЭлементы.Добавить("СписокСогласовать");
			ДоступныеЭлементы.Добавить("СписокНеСогласовать");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-28 (#3997)
			ДоступныеЭлементы.Добавить("СписокОтменитьСогласование");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-28 (#3997) 
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
			ДоступныеЭлементы.Добавить("СписокНаСогласование");
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
			//ДоступныеЭлементы.Добавить("СписокОтклонить");
			Если БумажныйДокументооборот Тогда
				ДоступныеЭлементы.Добавить("СписокЗавершить");
			Иначе	
				ДоступныеЭлементы.Добавить("СписокОтклонить");
			КонецЕсли;
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-28 (#3997)
			ДоступныеЭлементы.Добавить("СписокОтменитьСогласование");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-28 (#3997)
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован") Тогда
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
			//ДоступныеЭлементы.Добавить("СписокНаПодпись");
			Если БумажныйДокументооборот Тогда
				ДоступныеЭлементы.Добавить("СписокЗавершить");
			Иначе	
				ДоступныеЭлементы.Добавить("СписокНаПодпись");
			КонецЕсли;
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-28 (#3997)
			ДоступныеЭлементы.Добавить("СписокОтменитьСогласование");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-28 (#3997)
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать") Тогда
			ДоступныеЭлементы.Добавить("СписокПодписать");
		КонецЕсли;	
		Если ТекущиеДанные.ТребуетОтраженияВУчете
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-21 (#3816)
			////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2020-02-10 (#3623)
			//	И БумажныйДокументооборот 
			////ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2020-02-10 (#3623)
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-21 (#3816)
												Тогда
			ДоступныеЭлементы.Добавить("СписокОтразитьВУчете");
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
		Если ТекущиеДанные.ок_Проблемный И БумажныйДокументооборот Тогда
			ДоступныеЭлементы.Добавить("СписокВвестиНаОснованииНовыйДокумент");
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-22 (#3849)
		ТекстЗаголовка = "";
		Если ТекущиеДанные.НетФайла = Истина Тогда
			ТекстЗаголовка = "При получении ЭД возникли проблемы с получением файлов!";
		КонецЕсли;
		Элементы.НадписьПоОтсутсвующимФайлам.Заголовок = ТекстЗаголовка;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-22 (#3849)
	КонецЕсли;	
	Для каждого Имя из СкрываемыеКоманды Цикл
		Элемент = Элементы.Найти(Имя);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элемент.Видимость = (ДоступныеЭлементы.Найти(Имя) <> Неопределено);
	КонецЦикла;	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-29 (#3614)
&НаКлиенте
Процедура КомандаОткрытьАрхивДО(Команда)
	
	СтруктураПараметров = Новый Структура();
	
	Если НЕ БумажныйДокументооборот Тогда
	
		НаправлениеДО = Новый Массив();
		НаправлениеДО.Добавить("Входящий ЭД");
		НаправлениеДО.Добавить("Входящий БД");
		
		СтруктураПараметров.Вставить("НаправлениеДО", НаправлениеДО);
		
	КонецЕсли; 
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаАрхивДО", СтруктураПараметров);	
																									
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-29 (#3614)

//&НаКлиенте
//Процедура ОбработатьСлужебныеДокументыЗавершение(Результат, Профиль) Экспорт
//	
//	Сертификат = Неопределено;
//	
//	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
//		Сертификат = Результат.ВыбранныйСертификат.Ссылка;
//	ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда //вызов из продолжения
//		Сертификат = Результат;
//	КонецЕсли;	
//	
//	Если Сертификат = Неопределено Тогда
//		Возврат;
//	КонецЕсли;	
//	
//	Если Не ЗначениеЗаполнено(Профиль) Тогда
//		Возврат;
//	КонецЕсли;	
//	
//	Продолжать = Ложь;
//	ДанныеФайловДляПодписания = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеСлужебныхДокументовДляПодписания(Профиль, Сертификат, Продолжать);
//	Если ДанныеФайловДляПодписания = Неопределено Тогда
//		Возврат;
//	КонецЕсли;	
//	
//	КоличествоИсходящихДокументов = ДанныеФайловДляПодписания.Количество();
//	Ном = 0;
//	Для каждого Элемент из ДанныеФайловДляПодписания Цикл
//		
//		Ном = Ном + 1;
//		Файлы = Новый Массив;
//		СписокПредставлений = Новый СписокЗначений;
//		Для каждого ЭлементФайла Из Элемент.Значение.ФайлыДляПодписания Цикл
//			Файлы.Добавить(Новый Структура("Данные", ПолучитьИзВременногоХранилища(ЭлементФайла.Адрес)));
//			СписокПредставлений.Добавить(ЭлементФайла.ИмяФайла);
//		КонецЦикла;
//		Если Файлы.Количество() = 0 Тогда
//			Если Ном = КоличествоИсходящихДокументов Тогда
//				ОбновитьДанныеСписка();
//			КонецЕсли;	
//			Продолжить;
//		КонецЕсли;	
//		ВходящийДокумент = Элемент.Ключ;
//		ОписаниеДанных = Новый Структура;
//		ОписаниеДанных.Вставить("Операция", "Подписание файлов");
//		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
//		ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл(ы)");
//		ОписаниеДанных.Вставить("БезПодтверждения", Истина);
//		ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
//		Если Сертификат <> Неопределено Тогда
//			МассивСертификатов = Новый Массив;
//			МассивСертификатов.Добавить(Сертификат);
//			ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
//		КонецЕсли;	
//		ОписаниеДанных.Вставить("НаборДанных", Файлы);
//		ОписаниеДанных.Вставить("ПредставлениеНабора", "Файл(ы): " + Файлы.Количество());
//		ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
//		ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ОбработчикЗавершенияПодписанияСлужебныеДокументы", ЭтотОбъект, Новый Структура("Документ, Данные, Количество, Номер, Продолжать, Сертификат, Профиль", Элемент.Ключ, Элемент.Значение, КоличествоИсходящихДокументов, Ном, Продолжать, Сертификат, Профиль));
//		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
//				
//	КонецЦикла;
//		
//КонецПроцедуры	

//&НаКлиенте
//Процедура ОбработчикЗавершенияПодписанияСлужебныеДокументы(Результат, ДополнительныеПараметры) Экспорт
//	
//	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
//		
//		//отправить документы...
//		ДанныеДляОтправки = Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания");
//		ЗаполнитьЗначенияСвойств(ДанныеДляОтправки, ДополнительныеПараметры.Данные);
//		
//		Индекс = 0;
//		Для каждого ДанныеФайла из ДанныеДляОтправки.ФайлыДляПодписания Цикл
//			ДанныеПодписи = Результат.НаборДанных[Индекс].СвойстваПодписи.Подпись;
//			ДанныеФайла.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(ДанныеПодписи));
//			ДанныеФайла.Вставить("Сертификат", Результат.ВыбранныйСертификат.Ссылка);
//			ДанныеФайла.Вставить("Отпечаток", Результат.ВыбранныйСертификат.Отпечаток);
//			Индекс = Индекс + 1;
//		КонецЦикла;
//		
//		РезультатОтправки = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УтвердитьСлужебныйДокумент(ДополнительныеПараметры.Документ, ДанныеДляОтправки);
//	КонецЕсли;
//	
//	Если ДополнительныеПараметры.Номер = ДополнительныеПараметры.Количество Тогда
//		Если ДополнительныеПараметры.Продолжать Тогда //есть еще порции
//			ОбработатьСлужебныеДокументыЗавершение(ДополнительныеПараметры.Сертификат, ДополнительныеПараметры.Профиль);	
//		Иначе	
//			ОбновитьДанныеСписка();
//		КонецЕсли;	
//	КонецЕсли;
//	
//КонецПроцедуры

//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
&НаКлиенте
Процедура ОтправитьНаСогласованиеПослеОтметкиВложений(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ИмяСтатуса = ДополнительныеПараметры.ИмяСтатуса;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Статус", ДополнительныеПараметры.Статус);
	
    ОчиститьСообщения();
	
    КоличествоОбработанных = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусВходящегоДокументооборота(ВыделенныеСтроки, СтруктураПараметров, ДополнительныеПараметры.КомментарийНаСогласование);
    ок_УправлениеФормамиКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), ИмяСтатуса);
	
	Элементы.Список.Обновить();
	СписокПриАктивизацииСтроки(Неопределено);

КонецПроцедуры	

//ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-26 (#4227)
&НаСервереБезКонтекста
Функция НеобходимоЗаполнитьСуммуДокумента(ДокументСсылка)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ок_СуммаЗагруженаИзПакета, СуммаДокумента", Истина);
	
	НеобходимоЗаполнитьСумму = Ложь;
	
	Если Не РеквизитыДокумента.ок_СуммаЗагруженаИзПакета 
		И РеквизитыДокумента.СуммаДокумента = 0 Тогда
		
		ТекущийСтатусОбъекта = бит_Визирование.ПолучитьСтатусОбъекта(ДокументСсылка);
		
		Если ТекущийСтатусОбъекта <> ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать")
			И ТекущийСтатусОбъекта <> ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен") 
			И ТекущийСтатусОбъекта <> ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен") Тогда
			
			НеобходимоЗаполнитьСумму = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НеобходимоЗаполнитьСумму;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуЗаполненияСуммыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", ДополнительныеПараметры.ДокументСсылка);
		
		ФормаДокумента = ОткрытьФорму("Документ.ЭлектронныйДокументВходящий.Форма.ФормаДокумента", 
										ПараметрыФормы, 
										ЭтотОбъект, 
										УникальныйИдентификатор);
										
		ФормаДокумента.ТекущийЭлемент = ФормаДокумента.Элементы.СуммаДокумента;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		УстановитьСтатусНачало(ДополнительныеПараметры.УстанавливаемыйСтатус);
	КонецЕсли;
	
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-26 (#4227)

// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
&НаСервереБезКонтекста
Функция ок_ЕдинственныйСтатусВСпискеЭлектронныхДокументов(МассивДокументов)
	Возврат Документы.ЭлектронныйДокументВходящий.ЕдинственныйСтатусВСпискеЭлектронныхДокументов(МассивДокументов);	
КонецФункции

&НаСервереБезКонтекста
Функция ок_ИзменениеСтатусовДокументов(МассивДокументов, УстанавливаемыйСтатус)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Статус", УстанавливаемыйСтатус);
	Возврат Документы.ЭлектронныйДокументВходящий.ок_ИзменитьСтатусыДокументовНаСервере(МассивДокументов, ПараметрыИзменения);
	
КонецФункции	

&НаКлиенте
Процедура УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение, ЗадаватьВопрос = Истина) Экспорт
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки, Статус", ВыделенныеСтроки, ВыбранноеЗначение);
	
	Если ЗадаватьВопрос Тогда 
		ТекстВопроса = СтрШаблон("У выделенных в списке документов будет установлен статус %1. Продолжить?", ВыбранноеЗначение);
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусПоВыделеннымСтрокамЗавершение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановитьСтатусПоВыделеннымСтрокамЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры)	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПоВыделеннымСтрокамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыДокументовИзмененыУспешно = ок_ИзменениеСтатусовДокументов(ДополнительныеПараметры.ВыделенныеСтроки, ДополнительныеПараметры.Статус);
	Если СтатусыДокументовИзмененыУспешно Тогда
		Элементы.Список.Обновить();
		СписокПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры
// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)

#КонецОбласти

СкрываемыеКоманды = Новый Массив;
СкрываемыеКоманды.Добавить("СписокНаСогласование");
СкрываемыеКоманды.Добавить("СписокОтклонить");
СкрываемыеКоманды.Добавить("СписокНаПодпись");
СкрываемыеКоманды.Добавить("СписокПодписать");
СкрываемыеКоманды.Добавить("СписокСогласовать");
СкрываемыеКоманды.Добавить("СписокНеСогласовать");
СкрываемыеКоманды.Добавить("СписокОтразитьВУчете");
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-28 (#3997)
СкрываемыеКоманды.Добавить("СписокОтменитьСогласование");
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-28 (#3997) 

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
СкрываемыеКоманды.Добавить("СписокЗавершить");
СкрываемыеКоманды.Добавить("СписокВвестиНаОснованииНовыйДокумент");
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
