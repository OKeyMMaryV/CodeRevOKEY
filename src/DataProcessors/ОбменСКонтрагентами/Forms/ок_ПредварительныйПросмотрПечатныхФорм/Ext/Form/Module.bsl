&НаКлиенте
Перем СписокПриложенийДляПечати;
&НаКлиенте
Перем WordAppl;
&НаКлиенте
Перем ExcelAppl;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПечатныеДокументы 	= Параметры.ПечатныеДокументы;
	ИмяПринтера		 	= Параметры.ИмяПринтера;
	
	Заголовок = НСтр("ru = 'Печать квитанций'");
	
	// Инициализируем начальные установки
	сохрКоличествоКопий = ХранилищеОбщихНастроек.Загрузить("АрхивДО_ПредварительныйПросмотрПечатныхФорм_ПредпросмотрПечатныхЛистовКоличествоКопий");
	Если сохрКоличествоКопий = Неопределено ИЛИ сохрКоличествоКопий = 0 Тогда
		КоличествоКопий = 1;
	Иначе
		КоличествоКопий = сохрКоличествоКопий;
	КонецЕсли;
	
	ЕстьТранспортноеСообщение = Ложь;
	ВсегоОдинДокумент = ПечатныеДокументы.Количество() = 1;
	
	Для Каждого ПечатныйДокумент Из ПечатныеДокументы Цикл
		НовСтр2 = СписокОбъектовДляПечати.Добавить();
		НовСтр2.Объект = ПечатныйДокумент.Значение;
		НовСтр2.Расширение = ПечатныйДокумент.Значение.Расширение;
		                    
		//Если ПечатныйДокумент.Значение <> Неопределено Тогда 
		//	
		//	ГУИД = Новый УникальныйИдентификатор;
		//	
		//	Если ТипЗнч(ПечатныйДокумент.Значение) = Тип("Структура") Тогда
		//		
		//		ЕстьТранспортноеСообщение = Истина;
		//		
		//		ТранспортноеСообщение = ПечатныйДокумент.Значение.Отправка;
		//		ЭтоВходящийДокумент   = ТипЗнч(ТранспортноеСообщение.Получатель) = Тип("СправочникСсылка.Организации");
		//		
		//		НовСтр2.ТабличныйДокумент 		= ПоместитьВоВременноеХранилище(ПечатныйДокумент.Значение.ТабДок, ГУИД);
		//		НовСтр2.ИмяФайлаБезРасширения 	= ИмяФайлаБезРасширенияПоОтправке(ТранспортноеСообщение);
		//		НовСтр2.ПорядковыйНомер 		= КонтекстЭДОСервер.ПорядковыйНомерСообщенияВЦиклеОбмена(ЦиклОбмена, ТранспортноеСообщение);
		//		НовСтр2.Направление 			= ?(ЭтоВходящийДокумент, 1, 2);
		//		НовСтр2.Пометка					= ЭтоВходящийДокумент ИЛИ ВсегоОдинДокумент;
		//		
		//	Иначе
		//		
		//		НовСтр2.ТабличныйДокумент 		= ПоместитьВоВременноеХранилище(ПечатныйДокумент.Значение, ГУИД);
		//		НовСтр2.ИмяФайлаБезРасширения 	= КонтекстЭДОСервер.СформироватьИмяФайла(Строка(ЦиклОбмена));
		//		НовСтр2.Пометка 				= Истина;
		//		
		//	КонецЕсли; 
		//КонецЕсли;
	КонецЦикла;
	
	//Если НЕ ЕстьТранспортноеСообщение ИЛИ ВсегоОдинДокумент Тогда
	//	Элементы.ГруппаКнопок.Видимость = Ложь;
	//	Элементы.Пометка.Видимость 		= Ложь;
	//	Элементы.СписокЛистов.ПутьКДаннымКартинкиСтроки = "";
	//КонецЕсли;
	//
	//СписокОбъектовДляПечати.Сортировать("ПорядковыйНомер");
	
	СоответствиеЛистовСписку = Новый Структура;
	
	// Скрываем панель выбора документов, если документ один
	//Если ПечатныеДокументы.Количество() = 1 Тогда
	//	ЭтаФорма.Заголовок = ПечатныеДокументы[0].Представление;
	//	Элементы.СписокЛистов.Видимость = Ложь;
	//	ОсвежитьВыбранныйЛист(НовСтр2.ТабличныйДокумент, 0);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СписокОбъектовДляПечати.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Нет протоколов для печати");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ВидПечати = "ПечататьСразу" Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановленаПрограммаОтображенияПредставленияHTML = ок_УправлениеФормамиКлиент.УстановленаПрограммаОтображенияПредставленияHTML();	
	
	// Устанавливаем курсор на последний протокол
	Элементы.СписокЛистов.ТекущаяСтрока = 
		СписокОбъектовДляПечати[СписокОбъектовДляПечати.Количество()-1].ПолучитьИдентификатор();
		
	ИнициализироватьПриложенияДляПечати();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ИтоговаяТаблицаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИтоговаяТаблицаОбработкаРасшифровкиЗавершение", ЭтотОбъект, Расшифровка);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Для каждого Строка Из СписокОбъектовДляПечати Цикл
		Строка.Пометка = Истина;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВсе(Команда)
	
	Для каждого Строка Из СписокОбъектовДляПечати Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВходящие(Команда)
	
	Для каждого Строка Из СписокОбъектовДляПечати Цикл
		Строка.Пометка = Строка.Направление = 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеИсходящие(Команда)
	
	Для каждого Строка Из СписокОбъектовДляПечати Цикл
		Строка.Пометка = Строка.Направление = 2;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечать(Команда)
	
	СохранитьНастройки();
	
	ПечатныеДокументы = Новый Массив;
	
	Для Каждого Эл Из СписокОбъектовДляПечати Цикл
		Если НЕ Эл.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ПечатныеДокументы.Добавить(Эл.Объект);
	КонецЦикла;

	Если ПечатныеДокументы.Количество() > 0 Тогда
		
		oLocator = Новый COMОбъект("WbemScripting.SWbemLocator");
		oService = oLocator.ConnectServer("", "", "", ""); //Задания от всех пользователей
    
	    oService.Security_.impersonationlevel = 3; //получаем необходимые права
	    oService.Security_.Privileges.AddAsString("SeLoadDriverPrivilege");
		
		WordAppl = Неопределено;
		ExcelAppl = Неопределено;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ФайлДляУдаления", Новый Массив);
		НапечататьФайлы(ПечатныеДокументы, ПараметрыВыполнения, ЭтотОбъект.УникальныйИдентификатор);
		
		Если WordAppl <> Неопределено Тогда
			WordAppl.ActiveDocument.close();
			WordAppl.Application.DisplayAlerts =-1;
			WordAppl.Application.Quit();
			WordAppl = Неопределено;
		КонецЕсли; 
		
		Если ExcelAppl <> Неопределено Тогда
			ExcelAppl.Quit();
			ExcelAppl.DisplayAlerts = 1;
			ExcelAppl = Неопределено;
		КонецЕсли;
		
		// Ожидаем завершения печати
		НаличиеPDF = Ложь;
		Для каждого ПолноеИмяФайлаДляУдаления Из ПараметрыВыполнения.ФайлДляУдаления Цикл
			Если СтрНайти(НРег(ПолноеИмяФайлаДляУдаления), ".pdf") <> 0 Тогда
				НаличиеPDF = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		ТаймаутДляПечатиPDF = ТекущаяДата() + 15;
		Пока НаличиеPDF 
			И oService.InstancesOf("Win32_PrintJob").Count = 0
			И ТекущаяДата() < ТаймаутДляПечатиPDF Цикл 
		КонецЦикла;
		ТаймаутДляПечатиPDF = ТекущаяДата() + 5;
		Пока oService.InstancesOf("Win32_PrintJob").Count > 0
			ИЛИ НаличиеPDF
				И ТекущаяДата() < ТаймаутДляПечатиPDF Цикл
		КонецЦикла;
		
		oService = Неопределено;
		oLocator = Неопределено;
		
		Попытка 
			
			Для каждого ПолноеИмяФайлаДляУдаления Из ПараметрыВыполнения.ФайлДляУдаления Цикл
				ФайлДляУдаления = Новый Файл(ПолноеИмяФайлаДляУдаления);
				Если ФайлДляУдаления.Существует() Тогда
					Если ФайлДляУдаления.ПолучитьТолькоЧтение() Тогда
				        ФайлДляУдаления.УстановитьТолькоЧтение(Ложь);
				    КонецЕсли;
					УдалитьФайлы(ПолноеИмяФайлаДляУдаления);
				КонецЕсли; 
			КонецЦикла;
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВФорматеMicrosoftExcel(Команда)
	
	ВыгрузитьНаДиск(ТипФайлаТабличногоДокумента.XLS);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВВидеТабличныхДокументов(Команда)
	
	ВыгрузитьНаДиск(ТипФайлаТабличногоДокумента.MXL);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВФорматеAdobePDF(Команда)
	
	ВыгрузитьНаДиск(ТипФайлаТабличногоДокумента.PDF);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИмяФайлаБезРасширенияПоОтправке(Отправка)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	Сведения = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(ЦиклОбмена.Предмет);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", Ложь);
	ДополнительныеПараметры.Вставить("ПолучатьДаты", 	Ложь);
	ДополнительныеПараметры.Вставить("Отправка", 		ЦиклОбмена);
	
	ТаблицаЭтаповОтправки = КонтекстЭДОСервер.ТаблицаЭтаповОтправки(
		ЦиклОбмена.Предмет, 
		Сведения.ВидКонтролирующегоОргана, 
		ДополнительныеПараметры);
		
	Если ТаблицаЭтаповОтправки <> Неопределено И Отправка <> Неопределено Тогда
		ПодстрокиИмени = Новый Массив;
		Для каждого Этап Из ТаблицаЭтаповОтправки Цикл
			Если Этап.Протокол = Отправка Тогда
				ПодстрокиИмени.Добавить(Этап.НаименованиеПротокола);
				ПодстрокиИмени.Добавить(Сведения.Наименование);
				
				ПредставлениеПериода = "";
				Если ЗначениеЗаполнено(Сведения.ПредставлениеПериода) Тогда
					ПодстрокиИмени.Добавить(Сведения.ПредставлениеПериода);
				ИначеЕсли ЗначениеЗаполнено(Сведения.Дата) Тогда
					ПодстрокиИмени.Добавить(Сведения.Дата);
				КонецЕсли;
				
				ПодстрокиИмени.Добавить(Строка(Сведения.Организация));
					
				Прервать;
					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если ТипЗнч(ПодстрокиИмени)= Тип("Массив") И ПодстрокиИмени.Количество() = 0 ИЛИ ПодстрокиИмени = Неопределено Тогда
		ИмяФайлаБезРасширения = КонтекстЭДОСервер.СформироватьИмяФайла(Строка(ЦиклОбмена));
	Иначе
		ИмяФайлаБезРасширения = СтрСоединить(ПодстрокиИмени, " - ");
	КонецЕсли;
	
	ИмяФайлаБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаБезРасширения, "_");
	
	Возврат ИмяФайлаБезРасширения;
	
КонецФункции

&НаКлиенте
Процедура СписокЛистовПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Объект) Тогда 

		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		ДоступныеЭлементы = Новый Массив;
	
		ПрисоединенныйФайл 	= ТекущиеДанные.Объект;
		Расширение 			= ТекущиеДанные.Расширение;
		
		ИмяСтраницы = "СтраницаПредставлениеПустая";
		Если НРег(Расширение) = "pdf"
			ИЛИ НРег(Расширение) = "html"
			ИЛИ НРег(Расширение) = "doc"
			ИЛИ НРег(Расширение) = "docx"
			ИЛИ НРег(Расширение) = "xls"
			ИЛИ НРег(Расширение) = "xlsx" Тогда
			
			Если УстановленаПрограммаОтображенияПредставленияHTML Тогда
				ПредставлениеФайлаHTML = "";
				Данные = ПолучитьИзВременногоХранилища(ок_ОбменСКонтрагентамиСлужебныйВызовСервера.АдресДанныхПрисоединенныйФайл(ПрисоединенныйФайл, УникальныйИдентификатор));
				Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
					ок_ОбменСКонтрагентамиКлиент.ОчиститьВременныйФайл(ИмяВременногоФайла);
					ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
					Данные.Записать(ИмяВременногоФайла);
					ИтоговаяТаблицаHTML = HTMLПредставлениеФайлаЭД(ИмяВременногоФайла, Расширение);
				КонецЕсли;	
				Если Не ПустаяСтрока(ИтоговаяТаблицаHTML) Тогда
					ИмяСтраницы = "СтраницаПредставлениеHTML";
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли НРег(Расширение) = "xml" Тогда
			УстановитьВидимость = Ложь;
			ОтобразитьПредставление(ПрисоединенныйФайл, УстановитьВидимость);
			Если УстановитьВидимость Тогда
				ИмяСтраницы = "СтраницаПредставление";
			КонецЕсли;	
		КонецЕсли;	
		
		Элементы.СтраницыПредставления.ТекущаяСтраница = Элементы.Найти(ИмяСтраницы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ХранилищеОбщихНастроек.Сохранить("ПредварительныйПросмотрПечатныхФорм_ПредпросмотрПечатныхЛистовКоличествоКопий",, КоличествоКопий);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивОписанийФайловВыгрузки(ВФормате)
	
	СоответствиеФорматаРасширению = Новый Соответствие;
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.MXL, "mxl");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.XLS, "xls");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.PDF, "pdf");
	
	МассивОписаний = Новый Массив;
	
	Для Каждого Эл Из СписокОбъектовДляПечати Цикл
		Если Эл.Пометка Тогда
			
			ИмяОбъктаБезДвоеточий = Эл.ИмяФайлаБезРасширения;
			КороткоеИмяФайла      = ИмяОбъктаБезДвоеточий + "." + СоответствиеФорматаРасширению[ВФормате];

			ФайлТабличногоДокумента = ПолучитьИмяВременногоФайла();
			ТабличныйДокумент = ПолучитьИзВременногоХранилища(Эл.ТабличныйДокумент);
			ТабличныйДокумент.Записать(ФайлТабличногоДокумента, ВФормате); //ТипФайлаТабличногоДокумента.XLS);
			ГУИД = Новый УникальныйИдентификатор;
			ДанныеФайла = Новый ДвоичныеДанные(ФайлТабличногоДокумента);
			
			Адрес = ПоместитьВоВременноеХранилище(ДанныеФайла, ГУИД);
			
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(КороткоеИмяФайла, Адрес); 
			МассивОписаний.Добавить(ОписаниеФайла);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОписаний;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьНаДиск(ВФормате)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьНаДискЗавершение", ЭтотОбъект, ВФормате);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоВыбранныхТабличныхДокументов()
	
	Кол = 0;
	Для Каждого Стр Из СписокОбъектовДляПечати Цикл
		Кол = Кол + ?(Стр.Пометка, 1, 0);
	КонецЦикла;
	Возврат Кол;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТранспортноеСообщениеСУказаннымВложением(ЦиклОбмена, ИмяВложения)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение
		|ИЗ
		|	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		|ГДЕ
		|	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
		|	И СодержимоеТранспортныхКонтейнеров.ИмяФайла = &ИмяФайла";

	Запрос.УстановитьПараметр("ИмяФайла", ИмяВложения);
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 Возврат ВыборкаДетальныеЗаписи.ТранспортноеСообщение;
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьНаДискЗавершение(Результат, ВФормате) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если КоличествоВыбранныхТабличныхДокументов() = 0 Тогда
		ПоказатьПредупреждение(,"Выберите листы в дереве печатаемых листов!");
	Иначе
		МассивОписанийПолучаемыеФайлы = ПолучитьМассивОписанийФайловВыгрузки(ВФормате);
		
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() ИЛИ МассивОписанийПолучаемыеФайлы.Количество() > 1 Тогда
			ОперацииСФайламиЭДКОКлиент.СохранитьФайлы(МассивОписанийПолучаемыеФайлы);
		Иначе
			
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Заголовок = "Сохранение протокола";
			Диалог.ПолноеИмяФайла = МассивОписанийПолучаемыеФайлы[0].Имя;
			Диалог.ПредварительныйПросмотр = Истина;
			
			ОписаниеОповещения = Новый ОписаниеОповещения(); 
			
			НачатьПолучениеФайлов(ОписаниеОповещения, МассивОписанийПолучаемыеФайлы, Диалог);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговаяТаблицаОбработкаРасшифровкиЗавершение(Результат, Расшифровка) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТранспортноеСообщение = ТранспортноеСообщениеСУказаннымВложением(ЦиклОбмена, Расшифровка);
	Если ЗначениеЗаполнено(ТранспортноеСообщение) Тогда
		КонтекстЭДОКлиент.ПоказатьПротоколПриложениеПФР(ТранспортноеСообщение, Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПредставление(ПрисоединенныйФайл, УстановитьВидимость = Ложь)
	
	ТабличныйДокумент = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьТабличныйДокументФайлаЭД(ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТабличныйДокумент <> Неопределено Тогда
		ИтоговаяТаблица.Очистить();
		ИтоговаяТаблица.Вывести(ТабличныйДокумент);
		УстановитьВидимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция HTMLПредставлениеФайлаЭД(Источник, Расширение) Экспорт
	
	Если НРег(Расширение) = "pdf" Тогда
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-25 (#3816)
		//Возврат "<html><body><EMBED id='PDF' width=100% height=100% type=""application/pdf"" src=""" + Источник + """></EMBED></body></html>";
		ПредставлениеФайлаHTML = ок_ОбменСКонтрагентамиКлиент.HTMLПредставлениеФайлаЭД(Источник, Расширение);
		Возврат ПредставлениеФайлаHTML;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-25 (#3816) 
		
	ИначеЕсли НРег(Расширение) = "doc" 
		ИЛИ НРег(Расширение) = "docx" Тогда
		
		MSWord = Новый COMОбъект("Word.Application");  
		MSWord.Visible = Ложь;
		MSWord.Documents.Open(ИмяВременногоФайла);
		ИмяВременногоHTMLДокумента = ПолучитьИмяВременногоФайла(".html");
		MSWord.ActiveDocument.SaveAs(ИмяВременногоHTMLДокумента, 8);  
		MSWord.ActiveDocument.Close(-1);  
		MSWord.Quit();  
		Возврат HTMLПредставлениеФайлаЭД(ИмяВременногоHTMLДокумента, "html");
		
	ИначеЕсли НРег(Расширение) = "xls" 
		ИЛИ НРег(Расширение) = "xlsx" Тогда
		
		MSExcel = Новый COMОбъект("Excel.Application");  
		MSExcel.Visible = Ложь;
		КнигаExcel = MSExcel.WorkBooks.Open(ИмяВременногоФайла);
		ИмяВременногоHTMLДокумента = ПолучитьИмяВременногоФайла(".pdf");
		//КнигаExcel.SaveAs(ИмяВременногоHTMLДокумента, 46); // 46 - .xml
		//КнигаExcel.SaveAs(ИмяВременногоHTMLДокумента, 45); // 45 - .mht
		//КнигаExcel.SaveAs(ИмяВременногоHTMLДокумента, 44); // 44 - .html
		КнигаExcel.ExportAsFixedFormat(0, ИмяВременногоHTMLДокумента, 0); // pdf
		//КнигаExcel.ExportAsFixedFormat(1, ИмяВременногоHTMLДокумента, 0); // xps
		Попытка
            MSExcel.Workbooks.Close();
        Исключение
        КонецПопытки;
        Попытка
            MSExcel.Application.Quit();
        Исключение
        КонецПопытки;
        MSExcel = Неопределено;
		Возврат HTMLПредставлениеФайлаЭД(ИмяВременногоHTMLДокумента, "pdf");
		//Возврат ИмяВременногоHTMLДокумента;
	
	ИначеЕсли НРег(Расширение) = "html" Тогда
		
		ЧтениеТекста = Новый ЧтениеТекста(Источник);
		Возврат ЧтениеТекста.Прочитать();
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура КомандаВыгрузитьЭД(Команда)
	
	Для каждого СтрокаСписка Из СписокОбъектовДляПечати Цикл
		
		Если НЕ СтрокаСписка.Пометка
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаСписка.Объект) Тогда
			Продолжить;
		КонецЕсли; 
		
	
	КонецЦикла; 
	
КонецПроцедуры

#Область Печатьфайлов

&НаКлиенте
// Выполняет печать файлов на принтер.
//
// Параметры:
//  Файлы              - ОпределяемыйТип.ПрисоединенныйФайл, Массив - Ссылка или массив ссылок на объекты с файлами.
//  ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище
//                       которой будет помещен файл.
//
Процедура НапечататьФайлы(Знач Файлы, ПараметрыВыполнения, ИдентификаторФормы = Неопределено)
	
	Если ТипЗнч(Файлы) <> Тип("Массив") Тогда
		Файлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Файлы);
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("НомерФайла",   0);
	ПараметрыВыполнения.Вставить("ДанныеФайлов", Файлы);
	ПараметрыВыполнения.Вставить("ДанныеФайла",  Файлы);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", ИдентификаторФормы);
	НапечататьФайлыВыполнение(Неопределено, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
// Процедура печати Файла
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения для дальнейшего вызова.
//  ПараметрыВыполнения  - Структура - со свойствами:
//        * НомерФайла               - Число - номер текущего файла,
//        * ДанныеФайла              - Структура - данные файла,
//        * УникальныйИдентификатор  - УникальныйИдентификатор.
//
Процедура НапечататьФайлыВыполнение(ОбработчикРезультата, ПараметрыВыполнения) Экспорт
	
	ОбработкаПрерыванияПользователя();
	
	Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеФайлов.Количество() Тогда
		Возврат;
	КонецЕсли;
	ПараметрыВыполнения.ДанныеФайла = 
		РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляПечати(ПараметрыВыполнения.ДанныеФайлов[ПараметрыВыполнения.НомерФайла],
		ПараметрыВыполнения.УникальныйИдентификатор);
			
	Если НЕ ПараметрыВыполнения.ДанныеФайла.Свойство("ТабличныйДокумент") Тогда
		пТабличныйДокумент = ПечатнаяФормаЭД(ПараметрыВыполнения.ДанныеФайлов[ПараметрыВыполнения.НомерФайла]);
		Если ТипЗнч(пТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			ПараметрыВыполнения.ДанныеФайла.Вставить("ТабличныйДокумент", пТабличныйДокумент);
		КонецЕсли;
	КонецЕсли;
		
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ТабличныйДокумент") Тогда
		ПараметрыВыполнения.ДанныеФайла.ТабличныйДокумент.ИмяПринтера = ИмяПринтера;
		ПараметрыВыполнения.ДанныеФайла.ТабличныйДокумент.Напечатать();
		// переходим к печати следующего файла.
		ПараметрыВыполнения.НомерФайла = ПараметрыВыполнения.НомерФайла + 1;
		Обработчик = Новый ОписаниеОповещения("НапечататьФайлыВыполнение", ЭтотОбъект, ПараметрыВыполнения);
		ВыполнитьОбработкуОповещения(Обработчик);
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыВыполнения) = Тип("Структура")
		И ПараметрыВыполнения.Свойство("ДанныеФайла")
		И ТипЗнч(ПараметрыВыполнения.ДанныеФайла) = Тип("Структура")
		И ПараметрыВыполнения.ДанныеФайла.Свойство("ПолноеНаименованиеВерсии")
		Тогда
		
		НайденныйСимвол = СтрНайти(ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, "_",,,2);
		Если НайденныйСимвол > 0 И НайденныйСимвол < 50 Тогда
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии = Лев(ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, НайденныйСимвол);
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии = ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии + Строка(Новый УникальныйИдентификатор());
		ИначеЕсли СтрДлина(ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии) < 50 Тогда
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии = ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии + Строка(Новый УникальныйИдентификатор());	
		Иначе
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии = Лев(ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии, 50);
			ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии = ПараметрыВыполнения.ДанныеФайла.ПолноеНаименованиеВерсии + Строка(Новый УникальныйИдентификатор());	
		КонецЕсли; 
		
	КонецЕсли;
	
	Если РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Обработчик = Новый ОписаниеОповещения("НапечататьФайлПослеПолученияВерсииВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиСлужебныйКлиент.ПолучитьФайлВерсииВРабочийКаталог(
			Обработчик,
			ПараметрыВыполнения.ДанныеФайла,
			"",
			ПараметрыВыполнения.УникальныйИдентификатор);
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Необходимо подключить расширение работы с файлами подключено";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура печати Файла после получения на диск
//
// Параметры:
//  ПараметрыВыполнения  - Структура - со свойствами:
//        * НомерФайла               - Число - номер текущего файла,
//        * ДанныеФайла              - Структура - данные файла,
//        * УникальныйИдентификатор  - УникальныйИдентификатор.
//
Процедура НапечататьФайлПослеПолученияВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт

	Если Результат.ФайлПолучен Тогда
		
		Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеФайлов.Количество() Тогда
			Возврат;
		КонецЕсли;
	
		НапечататьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, Результат.ПолноеИмяФайла);
		
		ПараметрыВыполнения.ФайлДляУдаления.Добавить(Результат.ПолноеИмяФайла);
		
	КонецЕсли;

	// переходим к печати следующего файла.
	ПараметрыВыполнения.НомерФайла = ПараметрыВыполнения.НомерФайла + 1;
	Обработчик = Новый ОписаниеОповещения("НапечататьФайлыВыполнение", ЭтотОбъект, ПараметрыВыполнения);
	ВыполнитьОбработкуОповещения(Обработчик);
	
КонецПроцедуры

&НаКлиенте
// Процедура предназначена для печати файла соответствующим приложением
//
// Параметры
//  ДанныеФайла          - Структура - данные файла. Описание см. РаботаСФайлами.ДанныеФайла.
//  ИмяОткрываемогоФайла - Строка - полное имя файла.
//
Процедура НапечататьФайлПриложением(ДанныеФайла, ИмяОткрываемогоФайла)
	
	РасширенияИсключения = 
	" m3u, m4a, mid, midi, mp2, mp3, mpa, rmi, wav, wma, 
	| 3g2, 3gp, 3gp2, 3gpp, asf, asx, avi, m1v, m2t, m2ts, m2v, m4v, mkv, mov, mp2v, mp4, mp4v, mpe, mpeg, mts, vob, wm, wmv, wmx, wvx,
	| 7z, zip, rar, arc, arh, arj, ark, p7m, pak, package, 
	| app, com, exe, jar, dll, res, iso, isz, mdf, mds,
	| cf, dt, epf, erf";
	
	Расширение = НРег(ДанныеФайла.Расширение);
	
	Если СтрНайти(РасширенияИсключения, " " + Расширение + ",") > 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Печать файлов данного типа не поддерживается.'"), Расширение);
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
	
	ИначеЕсли Расширение = "grs" Тогда
		
		Схема = Новый ГрафическаяСхема;
		Схема.Прочитать(ИмяОткрываемогоФайла);
		Схема.Напечатать();;
		
	Иначе
		
		Попытка
			
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86
				Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
			КонецЕсли;
			
			НапечататьИзПриложенияПоИмениФайла(ИмяОткрываемогоФайла, Расширение);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Описание=""%1""'"),
				КраткоеПредставлениеОшибки(Инфо))); 
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выполняет печать файла внешним приложением.
//
// Параметры
//  ИмяОткрываемогоФайла - Строка - полное имя файла.
//
Процедура НапечататьИзПриложенияПоИмениФайла(ИмяОткрываемогоФайла, Расширение)
	
	Если Не ЗначениеЗаполнено(ИмяОткрываемогоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
		Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		СвойстваПриложенияДляПечати = СписокПриложенийДляПечати.Получить(НРег(Расширение));
		Если СвойстваПриложенияДляПечати <> Неопределено
			И НРег(Расширение) = "pdf" Тогда
			
			WshShell = Новый COMОбъект("WScript.Shell"); 
			WshShell.Run("""" + СвойстваПриложенияДляПечати.ПутьКПриложению + """ /N /T """ + ИмяОткрываемогоФайла+ """" + ?(ЗначениеЗаполнено(ИмяПринтера), " """ + ИмяПринтера + """", ""), 0);
			
		ИначеЕсли НРег(Расширение) = "doc"
			ИЛИ НРег(Расширение) = "docx" Тогда
			
			Если WordAppl = Неопределено Тогда
				WordAppl = Новый COMОбъект("Word.Application");
			КонецЕсли; 
			
			WordAppl.Documents.Open(ИмяОткрываемогоФайла);
			WordAppl.Documents(ИмяОткрываемогоФайла).Activate();
			WordAppl.ActivePrinter = ИмяПринтера;
			WordAppl.ActiveDocument.PrintOut();
			
		ИначеЕсли НРег(Расширение) = "xls"
			ИЛИ НРег(Расширение) = "xlsx" Тогда
			
			Если ExcelAppl = Неопределено Тогда
				ExcelAppl = Новый COMОбъект("Excel.Application");
			КонецЕсли; 
			
			ExcelAppl.Workbooks.Open(ИмяОткрываемогоФайла);
			ExcelAppl.ActiveSheet.PrintOut(,,,,ИмяПринтера);
			ExcelAppl.DisplayAlerts = 0;
			ExcelAppl.WorkBooks.Close();
			
		Иначе
		
			Shell = Новый COMОбъект("Shell.Application");
			Shell.ShellExecute(ИмяОткрываемогоФайла, "", "", "print", 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПриложенияДляПечати()
	
	СписокПриложенийДляПечати = Новый Соответствие();
	
	Попытка
		ШелСкрипт = Новый COMОбъект("WScript.Shell");
		
		СвойстваПриложения = Новый Структура("ИмяПриложения, ПутьКПриложению");
		СвойстваПриложения.ИмяПриложения = ШелСкрипт.RegRead("HKCR\.pdf\");
		ПутьКПриложению = ШелСкрипт.RegRead("HKCR\"+СвойстваПриложения.ИмяПриложения+"\Shell\Open\Command\");
		ПутьКПриложению = НРег(ПутьКПриложению);
		ПутьКПриложению = Лев(ПутьКПриложению, СтрНайти(ПутьКПриложению, ".exe") + 4);
		ПутьКПриложению = СтрЗаменить(ПутьКПриложению, """","");
		ПутьКПриложению = СокрЛП(ПутьКПриложению);
		СвойстваПриложения.ПутьКПриложению = ПутьКПриложению;
		Если СтрНайти(ПутьКПриложению, ".exe") <> 0  Тогда
			СписокПриложенийДляПечати.Вставить("pdf", СвойстваПриложения);
		Иначе
			ПутьКПриложению = ШелСкрипт.RegRead("HKCR\Software\Adobe\Acrobat\Exe\");
			ПутьКПриложению = НРег(ПутьКПриложению);
			ПутьКПриложению = Лев(ПутьКПриложению, СтрНайти(ПутьКПриложению, ".exe") + 4);
			ПутьКПриложению = СтрЗаменить(ПутьКПриложению, """","");
			ПутьКПриложению = СокрЛП(ПутьКПриложению);
			СвойстваПриложения.ПутьКПриложению = ПутьКПриложению;
			Если СтрНайти(ПутьКПриложению, ".exe") <> 0  Тогда
				СписокПриложенийДляПечати.Вставить("pdf", СвойстваПриложения);
			Иначе
				ФайлAcroRd32 = Новый Файл("C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd32.exe");
				Если ФайлAcroRd32.Существует() Тогда
					СвойстваПриложения.ПутьКПриложению = "C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd32.exe";
					СписокПриложенийДляПечати.Вставить("pdf", СвойстваПриложения);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
		
		СвойстваПриложения = Новый Структура("ИмяПриложения, ПутьКПриложению");
		СвойстваПриложения.ИмяПриложения = ШелСкрипт.RegRead("HKCR\.xls\");
		ПутьКПриложению = ШелСкрипт.RegRead("HKCR\"+СвойстваПриложения.ИмяПриложения+"\Shell\Open\Command\");
		ПутьКПриложению = НРег(ПутьКПриложению);
		ПутьКПриложению = Лев(ПутьКПриложению, СтрНайти(ПутьКПриложению, ".exe") + 4);
		ПутьКПриложению = СтрЗаменить(ПутьКПриложению, """","");
		ПутьКПриложению = СокрЛП(ПутьКПриложению);
		СвойстваПриложения.ПутьКПриложению = ПутьКПриложению;
		Если СтрНайти(ПутьКПриложению, ".exe") <> 0  Тогда
			СписокПриложенийДляПечати.Вставить("xls", СвойстваПриложения);
		КонецЕсли; 
		
		СвойстваПриложения = Новый Структура("ИмяПриложения, ПутьКПриложению");
		СвойстваПриложения.ИмяПриложения = ШелСкрипт.RegRead("HKCR\.doc\");
		ПутьКПриложению = ШелСкрипт.RegRead("HKCR\"+СвойстваПриложения.ИмяПриложения+"\Shell\Open\Command\");
		ПутьКПриложению = НРег(ПутьКПриложению);
		ПутьКПриложению = Лев(ПутьКПриложению, СтрНайти(ПутьКПриложению, ".exe") + 4);
		ПутьКПриложению = СтрЗаменить(ПутьКПриложению, """","");
		ПутьКПриложению = СокрЛП(ПутьКПриложению);
		СвойстваПриложения.ПутьКПриложению = ПутьКПриложению;
		Если СтрНайти(ПутьКПриложению, ".exe") <> 0  Тогда
			СписокПриложенийДляПечати.Вставить("doc", СвойстваПриложения);
		КонецЕсли;
		
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПечатнаяФормаЭД(ФайлЭлектронногоДокумента, Идентификатор = Неопределено, ПараметрыПечати = Неопределено)
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("ПечатьЭД", Истина);
	Если ПараметрыПечати <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПараметрыПечати Цикл
			ПараметрыПросмотра.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ПараметрыПросмотра.Вставить("ВыводитьПостраничныйРазделитель", Истина);
	
	СтруктураПодписей = ОбменСКонтрагентамиСлужебный.ПодписиЭДДляВыводаНаПечать(ФайлЭлектронногоДокумента);
	ПараметрыПросмотра.Вставить("СтруктураПодписей", СтруктураПодписей);
	
	ТабличныйДокумент = ОбменСКонтрагентамиВнутренний.ФайлДанныхЭД(ФайлЭлектронногоДокумента, ПараметрыПросмотра);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

СписокПриложенийДляПечати = Новый Соответствие;