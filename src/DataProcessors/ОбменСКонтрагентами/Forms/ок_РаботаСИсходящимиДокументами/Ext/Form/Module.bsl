//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103

&НаКлиенте
Перем СкрываемыеКоманды;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КарточкаДокумента(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаДокумента", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	//установить статус 
	УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Отправлен"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИсходящиеЭД(Команда)
	СоздатьИсходящиеЭДНаСервере();
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-29 (#3614)
&НаКлиенте
Процедура КомандаОткрытьАрхивДО(Команда)
	
	СтруктураПараметров = Новый Структура(); 
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаАрхивДО", СтруктураПараметров);	
																									
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-29 (#3614)

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	ДоступныеЭлементы = Новый Массив;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.ПустаяСсылка") 
			Или ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Подписать") Тогда
			ДоступныеЭлементы.Добавить("СписокПодписать");
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-08-20 (#4303)
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Черновик") Тогда
			ДоступныеЭлементы.Добавить("СписокНаПодпись");
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-08-20 (#4303) 
		КонецЕсли;	
	КонецЕсли;	
	Для каждого Имя из СкрываемыеКоманды Цикл
		Элемент = Элементы.Найти(Имя);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элемент.Видимость = (ДоступныеЭлементы.Найти(Имя) <> Неопределено);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаДокумента", Новый Структура("Ключ", ВыбраннаяСтрока));
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаПросмотраИсходящегоДокумента", Новый Структура("Документ", ВыбраннаяСтрока));
	
КонецПроцедуры


&НаКлиенте
Процедура ок_СтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_Статус", ок_Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_Статус));
	
КонецПроцедуры

&НаКлиенте
Процедура ок_СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ок_Статус) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьСтатусНачало(Статус, УказатьКомментарий = Ложь)
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСтатуса = Строка(Статус);
	ТекстВопроса = "У выделенных в списке документов будет установлен статус ""%ИмяСтатуса%"". Продолжить?";
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяСтатуса%", ИмяСтатуса);

	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки, ИмяСтатуса, Статус, УказатьКомментарий, ЗаголовокОкнаКомментария, ПредупреждениеПустогоКомментария", 
																	ВыделенныеСтроки, 
																	ИмяСтатуса, 
																	Статус, 
																	УказатьКомментарий,
																	"Укажите причину",
																	"Не указана причина!",
																	);
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
		
	Если ДополнительныеПараметры.Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Отправлен") Тогда
		МассивСертификатов = Неопределено;
		Сертификат = ПолучитьСертификатДокумента(ДополнительныеПараметры.ВыделенныеСтроки[0]);
		Если Сертификат <> Неопределено Тогда
			МассивСертификатов = Новый Массив;
			МассивСертификатов.Добавить(Сертификат);
		КонецЕсли;	
		ок_ОбменСКонтрагентамиКлиент.ВыполнитьЗапросСертификатаДляПодписания(ЭтотОбъект, "ПодписатьИОтправитьДокументы", ДополнительныеПараметры, МассивСертификатов);
	КонецЕсли;	
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-08-20 (#4303)
	Если ДополнительныеПараметры.Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Подписать") Тогда 
		
		Результат = УстановитьСтатусИсходящегоДокумента(ДополнительныеПараметры.ВыделенныеСтроки[0], ДополнительныеПараметры.Статус);	
		Если Результат.Свойство("Успешно")
			И Не Результат.Успешно
			И Результат.Свойство("ТекстОшибки") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);	
		КонецЕсли;
		ОбновитьДанныеСписка();
	КонецЕсли;		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-08-20 (#4303) 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСертификатДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Сертификаты.Сертификат КАК Сертификат
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий КАК Данные
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		//|		ПО Данные.ПрофильНастроекЭДО = Сертификаты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК Сертификаты
		|		ПО Данные.ИдентификаторОрганизации = Сертификаты.ИдентификаторЭДО
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
		|ГДЕ
		|	Данные.Ссылка = &Ссылка
		|	И Сертификаты.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
		//|	Сертификаты.НомерСтроки";
		|	Сертификаты.ДействителенДо УБЫВ";
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Сертификат;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПодписатьИОтправитьДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Сертификат = Неопределено;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
		Сертификат = Результат.ВыбранныйСертификат.Ссылка;
	КонецЕсли;	
	
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ок_ОбменСКонтрагентамиКлиент.ПодписатьИОтправитьДокументы(Сертификат, ДополнительныеПараметры.ВыделенныеСтроки, "Исходящий", ЭтотОбъект);
	
	//ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	//
	//Если ок_ОбменСКонтрагентамиКлиент.ДостаточноДанныхДляПодписанияБезЗапросаПользователя(Сертификат) Тогда
	//	ИсходящиеПараметры = Новый Структура("Профиль, Форма, ОбновитьДанныеСписка, МоментСтарта, МаксимальнаяДлительность", ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПрофильДокумента(ВыделенныеСтроки[0]), ЭтотОбъект, Ложь, ТекущаяДата(), 120);
	//	ок_ОбменСКонтрагентамиКлиент.ОбработатьСлужебныеДокументыЗавершение(Сертификат, ИсходящиеПараметры);
	//КонецЕсли;	
	//
	//ДанныеФайловДляПодписания = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеИсходящегоДокументаДляПодписания(ВыделенныеСтроки, Сертификат);
	//Если ДанныеФайловДляПодписания = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;	
	//
	//КоличествоИсходящихДокументов = ДанныеФайловДляПодписания.Количество();
	//Ном = 0;
	//Для каждого Элемент из ДанныеФайловДляПодписания Цикл
	//	
	//	Ном = Ном + 1;
	//	Файлы = Новый Массив;
	//	СписокПредставлений = Новый СписокЗначений;
	//	Для каждого ЭлементФайла Из Элемент.Значение.ФайлыДляПодписания Цикл
	//		Файлы.Добавить(Новый Структура("Данные", ПолучитьИзВременногоХранилища(ЭлементФайла.Адрес)));
	//		СписокПредставлений.Добавить(ЭлементФайла.ИмяФайла);
	//	КонецЦикла;
	//	Если Файлы.Количество() = 0 Тогда
	//		Если Ном = КоличествоИсходящихДокументов Тогда
	//			ОбновитьДанныеСписка();
	//		КонецЕсли;	
	//		Продолжить;
	//	КонецЕсли;	
	//	ВходящийДокумент = Элемент.Ключ;
	//	ОписаниеДанных = Новый Структура;
	//	ОписаниеДанных.Вставить("Операция", "Подписание файлов");
	//	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	//	ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл(ы)");
	//	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	//	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	//	Если Сертификат <> Неопределено Тогда
	//		МассивСертификатов = Новый Массив;
	//		МассивСертификатов.Добавить(Сертификат);
	//		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
	//	КонецЕсли;	
	//	ОписаниеДанных.Вставить("НаборДанных", Файлы);
	//	ОписаниеДанных.Вставить("ПредставлениеНабора", "Файл(ы): " + Файлы.Количество());
	//	ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
	//	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ОбработчикЗавершенияПодписания", ЭтотОбъект, Новый Структура("Документ, Данные, Количество, Номер", Элемент.Ключ, Элемент.Значение, КоличествоИсходящихДокументов, Ном));
	//	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	//			
	//КонецЦикла;
		
КонецПроцедуры	

//&НаКлиенте
//Процедура ОбработчикЗавершенияПодписания(Результат, ДополнительныеПараметры) Экспорт
//	
//	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
//		
//		//отправить документы...
//		ДанныеДляОтправки = Новый Структура("Идентификатор, Этап, Редакция, ПараметрыЭДО, ФайлыДляПодписания");
//		ЗаполнитьЗначенияСвойств(ДанныеДляОтправки, ДополнительныеПараметры.Данные);
//		
//		Индекс = 0;
//		Для каждого ДанныеФайла из ДанныеДляОтправки.ФайлыДляПодписания Цикл
//			ДанныеПодписи = Результат.НаборДанных[Индекс].СвойстваПодписи.Подпись;
//			ДанныеФайла.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(ДанныеПодписи));
//			ДанныеФайла.Вставить("Сертификат", Результат.ВыбранныйСертификат.Ссылка);
//			ДанныеФайла.Вставить("Отпечаток", Результат.ВыбранныйСертификат.Отпечаток);
//			Индекс = Индекс + 1;
//		КонецЦикла;
//		
//		РезультатОтправки = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправитьИсходящийДокумент(ДополнительныеПараметры.Документ, ДанныеДляОтправки);
//		Если РезультатОтправки Тогда
//		    КоличествоОбработанных = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусИсходящегоДокументооборота(ДополнительныеПараметры.Документ, Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Отправлен")));
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ДополнительныеПараметры.Номер = ДополнительныеПараметры.Количество Тогда
//		ОбновитьДанныеСписка();
//	КонецЕсли;	
//	
//КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСписка() Экспорт
	
	Элементы.Список.Обновить();
	СписокПриАктивизацииСтроки(Неопределено);
			
КонецПроцедуры

&НаСервере
Процедура СоздатьИсходящиеЭДНаСервере()
	
	ок_ОбменСКонтрагентамиВнутренний.СоздатьИсходящиеЭД();
	
КонецПроцедуры

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-08-20 (#4303)
&НаСервереБезКонтекста
Функция УстановитьСтатусИсходящегоДокумента(Документ, НовыйСтатус)
	
	Ответ = Новый Структура;
	Ответ.Вставить("Успешно", Истина);
	Ответ.Вставить("ТекстОшибки", "");
	
	Объект = Документ.ПолучитьОбъект();
	Объект.ок_Статус = НовыйСтатус;
	
	Попытка
		Объект.Записать(?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));		
	Исключение
		
		ШаблонОшибкиЗаписать = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Документ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Ответ.Вставить("Успешно", Ложь);
		Ответ.Вставить("ТекстОшибки", ТекстОшибки);
	
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Процедура НаПодпись(Команда)
	УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыИсходящегоЭлектронногоДокументооборота.Подписать"));
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-08-20 (#4303) 

#КонецОбласти

СкрываемыеКоманды = Новый Массив;
СкрываемыеКоманды.Добавить("СписокПодписать");
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-08-20 (#4303)
СкрываемыеКоманды.Добавить("СписокНаПодпись");
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-08-20 (#4303) 

