&НаКлиенте
Перем СкрываемыеКоманды;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БумажныйДокументооборот = Истина;
	
	Если Не ок_ОбменСКонтрагентамиВнутренний.ПользовательЯвляетсяАдминистратором() Тогда
		Элемент = Элементы.Найти("СписокПодписать");
		Если Элемент <> Неопределено Тогда
			Элемент.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-28 (#3997)
	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеЭлектронныхДокументов") Тогда
		БухгалтерИлиПолныеПрава = Истина;
	КонецЕсли;	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-28 (#3997)
	
	Элементы.СписокСоздатьБумажныйДокумент.Видимость 			= БумажныйДокументооборот;
	Элементы.СписокСкопироватьДокумент.Видимость 				= БумажныйДокументооборот;
	Элементы.Списокок_ПричиныОтклоненияПредставление.Видимость 	= БумажныйДокументооборот;
	Элементы.СписокНомерДокументаОтправителя.Видимость 			= БумажныйДокументооборот;
	Элементы.СписокДатаДокументаОтправителя.Видимость 			= БумажныйДокументооборот;
	Элементы.Списокок_НомерВходящегоСчетаФактуры.Видимость 		= БумажныйДокументооборот;
	Элементы.Списокок_ДатаВходящегоСчетаФактуры.Видимость 		= БумажныйДокументооборот;
	Элементы.СписокНомер.Видимость 								= БумажныйДокументооборот;
	Элементы.НомерДокументаОтправителя.Видимость 				= БумажныйДокументооборот;
	Элементы.ок_НомерВходящегоСчетаФактуры.Видимость 			= БумажныйДокументооборот;
	Элементы.СписокРеестрПроблемныхДокументов.Видимость 		= БумажныйДокументооборот;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
																			"ПрофильНастроекЭДО",
																			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-04 (#3816) 
																			//ПредопределенноеЗначение("Справочник.ПрофилиНастроекЭДО.ПустаяСсылка"),
																			"",
																			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-04 (#3816) 
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			Истина);
	Элементы.ок_Статус.СписокВыбора.Очистить();
	Для каждого ЗначениеПеречисления Из Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота Цикл
		Если ЗначениеПеречисления = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен 
			Или ЗначениеПеречисления = Перечисления.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать Тогда
			Продолжить;
		КонецЕсли;
		Элементы.ок_Статус.СписокВыбора.Добавить(ЗначениеПеречисления);
	КонецЦикла;	
	
	ок_ЗакрепленныйБухгалтер = Пользователи.АвторизованныйПользователь();
	Если ЗначениеЗаполнено(ок_ЗакрепленныйБухгалтер) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_ЗакрепленныйБухгалтер", ок_ЗакрепленныйБухгалтер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_ЗакрепленныйБухгалтер));
	КонецЕсли;
	
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
	ок_УправлениеФормами.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьДоступныеКомандыСтроки", 10);
	
	// возможно потребуется установить отборы по значениям предыдущего сеанса
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_Статус", ок_Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_Статус));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Инициатор", Инициатор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Инициатор));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_НомерЗаявки", ок_НомерЗаявки, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_НомерЗаявки));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Контрагент", Контрагент, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Контрагент));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДоговорКонтрагента", ДоговорКонтрагента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДоговорКонтрагента));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "НомерДокументаОтправителя", НомерДокументаОтправителя, ВидСравненияКомпоновкиДанных.Содержит,, ЗначениеЗаполнено(НомерДокументаОтправителя));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_НомерВходящегоСчетаФактуры", ок_НомерВходящегоСчетаФактуры, ВидСравненияКомпоновкиДанных.Содержит,, ЗначениеЗаполнено(ок_НомерВходящегоСчетаФактуры));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ок_ЗаписанВходящийЭД" Тогда
		ОбновитьДанныеСписка();
	КонецЕсли;	
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПисьмаНаСогласование(Команда)
	
	СоздатьПисьмаНаСогласованиеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаСогласование(Команда)
	
	УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование"));
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-04 (#3997)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
			НовыйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"); 
		Иначе
			НовыйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"); 			
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-04 (#3997)
	
	ТекстВопроса = НСтр("ru = 'Выделенные в списке документы будут отклонены. Продолжить?'");
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-04 (#3997)
	//УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"), Истина, ТекстВопроса);
	УстановитьСтатусНачало(НовыйСтатус, Истина, ТекстВопроса);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-04 (#3997)

КонецПроцедуры

&НаКлиенте
Процедура НаПодпись(Команда)
	
	УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	//установить статус 
	УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен"));
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-04 (#3997) 
	//УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
	ок_ОбменСКонтрагентамиКлиент.УстановитьСтатус(ЭтаФорма, ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован"));
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-04 (#3997)
	
КонецПроцедуры

&НаКлиенте
Процедура НеСогласовать(Команда)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-04 (#3997) 
	//УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
	ок_ОбменСКонтрагентамиКлиент.УстановитьСтатус(ЭтаФорма, ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован"));
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-04 (#3997) 
		
КонецПроцедуры                                                        

&НаКлиенте
Процедура ОтразитьВУчете(Команда)
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыУчетаНаСервере(ВыделенныеСтроки);
	
	Элементы.Список.Обновить();
	СписокПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРезультатыСогласования(Команда)
	
	ПроверитьРезультатыСогласованияНаСервере();
	
КонецПроцедуры

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-27 (#3997)
&НаКлиенте
Процедура ОтменитьСогласование(Команда)	
	ок_ОбменСКонтрагентамиКлиент.ОтменитьСогласование(ЭтаФорма);
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-27 (#3997) 

// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
&НаКлиенте
Процедура ок_ИзменитьСтатусыДокументов(Команда)
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ок_ТекущийСтатусВыбраннойСтроки = ок_ЕдинственныйСтатусВСпискеЭлектронныхДокументов(ВыделенныеСтроки);
	Если ЗначениеЗаполнено(ок_ТекущийСтатусВыбраннойСтроки) Тогда 
		ДоступныеСтатусыСписок = Новый СписокЗначений;
		ДоступныеСтатусыСписок.ЗагрузитьЗначения(ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ДоступныеПользовательскиеПереходыСтатусаПоКнопкеИзменитьСтатус(ок_ТекущийСтатусВыбраннойСтроки, Истина));
		ОтборСтатусов = Новый Структура;
		ОтборСтатусов.Вставить("Ссылка", ДоступныеСтатусыСписок);
		ФормаВыбора = ОткрытьФорму("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Форма.ФормаВыбора", Новый Структура("Отбор", ОтборСтатусов), Элементы.Список);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В выбранных документах разный статус, выберите документы с одинаковым статусом и повторите попытку");
	КонецЕсли;
	
КонецПроцедуры
// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-27 (#3997)
//Процедура СписокПриАктивизацииСтроки(Элемент)
Процедура СписокПриАктивизацииСтроки(Элемент) Экспорт
	
	Если НЕ БухгалтерИлиПолныеПрава Тогда
		
		ДоступныеЭлементы = Новый Массив;
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;	
		Если ТекущиеДанные <> Неопределено 
			И ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
			ДоступныеЭлементы.Добавить("СписокСогласовать");
			ДоступныеЭлементы.Добавить("СписокНеСогласовать");
		КонецЕсли;
		
		Для каждого Имя из СкрываемыеКоманды Цикл
			Элемент = Элементы.Найти(Имя);
			Если Элемент = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Элемент.Видимость = (ДоступныеЭлементы.Найти(Имя) <> Неопределено);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-27 (#3997)

	//без этого некорректно меняет текущую колонку и нельзя работать с обработкой выбора
	ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиЗавершение", 0.1, Истина);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_СтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_Статус", ок_Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_Статус));
	
КонецПроцедуры

&НаКлиенте
Процедура ок_СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ок_Статус) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Инициатор", Инициатор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Инициатор));
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Инициатор) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ЗакрепленныйБухгалтерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_ЗакрепленныйБухгалтер", ок_ЗакрепленныйБухгалтер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_ЗакрепленныйБухгалтер));
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ЗакрепленныйБухгалтерОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ок_ЗакрепленныйБухгалтер) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)
&НаКлиенте
Процедура СписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ок_НовыйСтатусВыбраннойСтроки = ВыбранноеЗначение;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ок_СтатусыВходящегоЭлектронногоДокументооборота") Тогда 
		
		Если ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
				УстановитьСтатусНачало(ВыбранноеЗначение);
			Иначе
				УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
				ок_ОбменСКонтрагентамиКлиент.ОтменитьСогласование(ЭтаФорма);
			Иначе
				ок_ОбменСКонтрагентамиКлиент.УстановитьСтатус(ЭтаФорма, ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован") Тогда
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
				ок_ОбменСКонтрагентамиКлиент.ОтменитьСогласование(ЭтаФорма);
			ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать") Тогда
				УстановитьСтатусНачало(ВыбранноеЗначение);
			Иначе
				УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
				ок_ОбменСКонтрагентамиКлиент.ОтменитьСогласование(ЭтаФорма);
			ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать") Тогда
				ТекстВопроса = НСтр("ru = 'Выделенные в списке документы будут отклонены. Продолжить?'");
				УстановитьСтатусНачало(ВыбранноеЗначение, Истина, ТекстВопроса);
			Иначе
				УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать")
			Или ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен") Тогда
			УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ЗавершенБезПодписания") Тогда
			Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
				УстановитьСтатусНачало(ВыбранноеЗначение);
			Иначе
				УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ок_ТекущийСтатусВыбраннойСтроки = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен") Тогда
			УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьПисьмаНаСогласованиеНаСервере()
	
	ок_ОбменСКонтрагентамиВнутренний.СоздатьПисьмаНаСогласование();
	
КонецПроцедуры

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-12 #3997
&НаСервереБезКонтекста
Функция ПроверитьДокументыПередСогласованием(Список)
	Возврат Обработки.ОбменСКонтрагентами.ПроверитьДокументыПередСогласованием(Список);
КонецФункции
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец  2021-01-12 #3997

&НаКлиенте
Процедура УстановитьСтатусНачало(Статус, УказатьКомментарий = Ложь, ТекстВопроса = "")
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-12 #3997
	Если Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
		Отказ = ПроверитьДокументыПередСогласованием(ВыделенныеСтроки);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец  2021-01-12 #3997
	
	ИмяСтатуса = Строка(Статус);
	Если ПустаяСтрока(ТекстВопроса) Тогда
		ТекстВопроса = "У выделенных в списке документов будет установлен статус ""%ИмяСтатуса%"". Продолжить?";
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяСтатуса%", ИмяСтатуса);
	КонецЕсли;	

	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки, ИмяСтатуса, Статус, УказатьКомментарий, ЗаголовокОкнаКомментария, ПредупреждениеПустогоКомментария", 
																	ВыделенныеСтроки, 
																	ИмяСтатуса, 
																	Статус, 
																	УказатьКомментарий,
																	НСтр("ru = 'Укажите причину'"),
																	НСтр("ru = 'Не указана причина!'"),
																	);
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомментарийОтказа(ВыделенныеСтроки, НовыйСтатус)
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяРеквизита = "";
	Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать")
		Или НовыйСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
		ИмяРеквизита = "ок_ПричинаОтклоненияСогласования";
	КонецЕсли;	
	
	Если ИмяРеквизита = "" Тогда
		Возврат "";
	КонецЕсли;
		
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыделенныеСтроки[0], ИмяРеквизита);
	
КонецФункции

&НаСервереБезКонтекста
Функция НеобходимоУказатьКомментарий(ВыделенныеСтроки, ДополнительныеПараметры)
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Статус <> ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ТекущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыделенныеСтроки[0], "ок_Статус");
	Если ТекущийСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
		ДополнительныеПараметры.Вставить("ЗаголовокОкнаКомментария", "Укажите комментарий для согласующего");
		ДополнительныеПараметры.Вставить("ПредупреждениеПустогоКомментария", "Не указан комментарий!");
		Возврат Истина;
	ИначеЕсли ТекущийСтатус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
		ДополнительныеПараметры.Вставить("ЗаголовокОкнаКомментария", "Укажите комментарий для согласующего");
		ДополнительныеПараметры.Вставить("ПредупреждениеПустогоКомментария", "");
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	       
	//если переводим в статус на согласование, то нужно если текущий статус Не согласован, то нужно запросить новый комментарий для того чтобы указать его в письме Инициатору
	Если Не ДополнительныеПараметры.УказатьКомментарий И ДополнительныеПараметры.Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
		УказатьКомментарий = НеобходимоУказатьКомментарий(ДополнительныеПараметры.ВыделенныеСтроки, ДополнительныеПараметры);
		Если УказатьКомментарий Тогда
			ДополнительныеПараметры.Вставить("УказатьКомментарий", УказатьКомментарий);
		КонецЕсли;	
	КонецЕсли;
	
	Если ДополнительныеПараметры.УказатьКомментарий Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("УстановитьСтатусПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры), ПолучитьКомментарийОтказа(ДополнительныеПараметры.ВыделенныеСтроки, ДополнительныеПараметры.Статус), ДополнительныеПараметры.ЗаголовокОкнаКомментария, , Истина)		
	Иначе
		УстановитьСтатусПослеЗавершения(, ДополнительныеПараметры);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПослеЗавершения(Результат = "", ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПредупреждениеПустогоКомментария) Тогда
	
		Если Результат = Неопределено Тогда
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(Результат) И ДополнительныеПараметры.УказатьКомментарий Тогда
			ПоказатьПредупреждение(, ДополнительныеПараметры.ПредупреждениеПустогоКомментария);
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДополнительныеПараметры.Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Отправлен") Тогда
		
		МассивСертификатов = Неопределено;
		Сертификат = ПолучитьСертификатДокумента(ДополнительныеПараметры.ВыделенныеСтроки[0]);
		Если Сертификат <> Неопределено Тогда
			МассивСертификатов = Новый Массив;
			МассивСертификатов.Добавить(Сертификат);
		КонецЕсли;	
		ок_ОбменСКонтрагентамиКлиент.ВыполнитьЗапросСертификатаДляПодписания(ЭтотОбъект, "ПодписатьИОтправитьДокументы", ДополнительныеПараметры, МассивСертификатов);
		
		Возврат;
		
	КонецЕсли;	
	
	//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
	//если переводим в статус на согласование, то нужно отметить файлы к отправке
	Если ДополнительныеПараметры.Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
		ДополнительныеПараметры.Вставить("ЭтаФорма", ЭтаФорма);
		ДополнительныеПараметры.Вставить("МодульОбработчикаОповещения", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("ИмяОбработчикаОповещения", "ОтправитьНаСогласованиеПослеОтметкиВложений");
		ДополнительныеПараметры.Вставить("КомментарийНаСогласование", Результат);
		ок_ОбменСКонтрагентамиКлиент.ПередОтправкойФайловНаСогласование(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;	
	//ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ИмяСтатуса = ДополнительныеПараметры.ИмяСтатуса;
	
    ОчиститьСообщения();
	
    КоличествоОбработанных = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусВходящегоДокументооборота(ВыделенныеСтроки, ДополнительныеПараметры, Результат);
    ок_УправлениеФормамиКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), ИмяСтатуса);
	
	Элементы.Список.Обновить();
	СписокПриАктивизацииСтроки(Неопределено);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрисоединенныеФайлыДляПодписания(ЭлектронныйДокумент, Имена)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И ЭДПрисоединенныеФайлы.НомерЭД В(&Имена)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("Имена", Имена);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСертификатДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Сертификаты.Сертификат КАК Сертификат
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		//ОКЕЙ Бублик А.А(СофтЛаб) Начало 2020-08-03 (#3816)
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		//|		ПО ЭлектронныйДокументВходящий.ПрофильНастроекЭДО = Сертификаты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК Сертификаты
		|		ПО ЭлектронныйДокументВходящий.ИдентификаторОрганизации = Сертификаты.ИдентификаторЭДО
		//ОКЕЙ Бублик А.А(СофтЛаб) Конец 2020-08-03 (#3816)
		|ГДЕ
		|	ЭлектронныйДокументВходящий.Ссылка = &Ссылка
		|	И Сертификаты.Сертификат <> ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		//ОКЕЙ Бублик А.А(СофтЛаб) Начало 2020-08-03 (#3816)
		//|	Сертификаты.НомерСтроки";
		|	Сертификаты.ДействителенДо УБЫВ";
		//ОКЕЙ Бублик А.А(СофтЛаб) Конец 2020-08-03 (#3816)
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Сертификат;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПодписатьИОтправитьДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Сертификат = Неопределено;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
		Сертификат = Результат.ВыбранныйСертификат.Ссылка;
	КонецЕсли;	
	
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ок_ОбменСКонтрагентамиКлиент.ПодписатьИОтправитьДокументы(Сертификат, ДополнительныеПараметры.ВыделенныеСтроки, "Входящий", ЭтотОбъект);

КонецПроцедуры	

&НаСервере
Процедура СоздатьДокументыУчетаНаСервере(ВыделенныеСтроки, СпособОбработки = "СчетФактураПолученный")
	
	//по сути повторяем алгоритм процедуры СоздатьДокументУчетаНаСервере из Документ.ЭлектронныйДокументВходящий.Форма.ПодборДокументовУчета
	Для каждого ЭлектронныйДокумент Из ВыделенныеСтроки Цикл
		
		ок_ОбменСКонтрагентамиВнутренний.СоздатьДокументыУчетаЭлектронногоДокумента2019(ЭлектронныйДокумент, "Вручную")
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРезультатыСогласованияНаСервере()
	
	ок_ОбменСКонтрагентамиВнутренний.ПроверитьРезультатыСогласования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСписка() Экспорт
	
	Элементы.Список.Обновить();
	СписокПриАктивизацииСтроки(Неопределено);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступныеКомандыСтроки() Экспорт
	
	СписокПриАктивизацииСтроки(Неопределено);
			
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБумажныйДокумент(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Ключ", ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящий.ПустаяСсылка"));
	
	СтруктураПолейДляПервичногоЗаполнения = Новый Структура();
	Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
	
		Если ЭлементОтбора.Использование = Истина
			И ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			И ЗначениеЗаполнено(ЭлементОтбора.ЛевоеЗначение)
			И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			
			эоЛевоеЗначение = Строка(ЭлементОтбора.ЛевоеЗначение);
			
			Если НРег(эоЛевоеЗначение) = "организация" Тогда
				СтруктураПолейДляПервичногоЗаполнения.Вставить(эоЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	СтруктураПараметров.Вставить("СтруктураПолейДляПервичногоЗаполнения", СтруктураПолейДляПервичногоЗаполнения);
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	УстановитьСтатусНачало(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Завершен"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНаОснованииНовыйДокумент(Команда)
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента", Новый Структура("Ключ, ок_ДокументРодитель", 
																									ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящий.ПустаяСсылка"),
																									ВыделенныеСтроки[0]));
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДокумент(Команда)
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаВходящегоБумажногоДокумента", Новый Структура("Ключ, ЗначениеКопирования", 
																									ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящий.ПустаяСсылка"),
																									ВыделенныеСтроки[0]));
КонецПроцедуры

&НаКлиенте
Процедура ок_НомерЗаявкиПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_НомерЗаявки", ок_НомерЗаявки, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ок_НомерЗаявки));
	
КонецПроцедуры

&НаКлиенте
Процедура ок_НомерЗаявкиОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ок_НомерЗаявки) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Контрагент", Контрагент, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Контрагент));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДоговорКонтрагента", ДоговорКонтрагента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДоговорКонтрагента));
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДокументаОтправителяПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "НомерДокументаОтправителя", НомерДокументаОтправителя, ВидСравненияКомпоновкиДанных.Содержит,, ЗначениеЗаполнено(НомерДокументаОтправителя));
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДокументаОтправителяОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(НомерДокументаОтправителя) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_НомерВходящегоСчетаФактурыПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ок_НомерВходящегоСчетаФактуры", ок_НомерВходящегоСчетаФактуры, ВидСравненияКомпоновкиДанных.Содержит,, ЗначениеЗаполнено(ок_НомерВходящегоСчетаФактуры));
	
КонецПроцедуры

&НаКлиенте
Процедура ок_НомерВходящегоСчетаФактурыОчистка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ок_НомерВходящегоСчетаФактуры) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеестрПроблемныхДокументов(Команда)
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_РеестрПроблемныхДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СписокДокументУчета" Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументУчета) Тогда
			
			СтандартнаяОбработка = Ложь;	
			ПоказатьЗначение(, ТекущиеДанные.ДокументУчета);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиЗавершение()
	
	ДоступныеЭлементы = Новый Массив;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.ПустаяСсылка") 
			Или ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Новый") Тогда
			ДоступныеЭлементы.Добавить("СписокОтклонить");
			ДоступныеЭлементы.Добавить("СписокНаСогласование");
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование") Тогда
			ДоступныеЭлементы.Добавить("СписокСогласовать");
			ДоступныеЭлементы.Добавить("СписокНеСогласовать");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-28 (#3997)
			ДоступныеЭлементы.Добавить("СписокОтменитьСогласование");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-28 (#3997)
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НеСогласован") Тогда
			ДоступныеЭлементы.Добавить("СписокНаСогласование");
			ДоступныеЭлементы.Добавить("СписокЗавершить");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-28 (#3997)
			ДоступныеЭлементы.Добавить("СписокОтменитьСогласование");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-28 (#3997)
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Согласован") Тогда
			ДоступныеЭлементы.Добавить("СписокЗавершить");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-28 (#3997)
			ДоступныеЭлементы.Добавить("СписокОтменитьСогласование");
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-28 (#3997)
		ИначеЕсли ТекущиеДанные.ок_Статус = ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.Подписать") Тогда
			ДоступныеЭлементы.Добавить("СписокПодписать");
		КонецЕсли;	
		Если ТекущиеДанные.ок_Проблемный Тогда
			ДоступныеЭлементы.Добавить("СписокВвестиНаОснованииНовыйДокумент");
		КонецЕсли;
	КонецЕсли;	
	Для каждого Имя из СкрываемыеКоманды Цикл
		Элемент = Элементы.Найти(Имя);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элемент.Видимость = (ДоступныеЭлементы.Найти(Имя) <> Неопределено);
	КонецЦикла;	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-29 (#3614)
&НаКлиенте
Процедура КомандаОткрытьАрхивДО(Команда)
	
	СтруктураПараметров = Новый Структура();
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаАрхивДО", СтруктураПараметров);	
																									
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-29 (#3614)

//ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2020-12-07 (#3941)
&НаКлиенте
Процедура ОтправитьНаСогласованиеПослеОтметкиВложений(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Удалить("ЭтаФорма");
	ДополнительныеПараметры.Удалить("МодульОбработчикаОповещения");
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ИмяСтатуса = ДополнительныеПараметры.ИмяСтатуса;
	
    ОчиститьСообщения();
	
    КоличествоОбработанных = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСтатусВходящегоДокументооборота(ВыделенныеСтроки, ДополнительныеПараметры, ДополнительныеПараметры.КомментарийНаСогласование);
    ок_УправлениеФормамиКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), ИмяСтатуса);
	
	Элементы.Список.Обновить();
	СписокПриАктивизацииСтроки(Неопределено);

КонецПроцедуры	
//ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2020-12-07 (#3941)

// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-14 (#4324)
&НаСервереБезКонтекста
Функция ок_ЕдинственныйСтатусВСпискеЭлектронныхДокументов(МассивДокументов)
	Возврат Документы.ЭлектронныйДокументВходящий.ЕдинственныйСтатусВСпискеЭлектронныхДокументов(МассивДокументов);	
КонецФункции

&НаСервереБезКонтекста
Функция ок_ИзменениеСтатусовДокументов(МассивДокументов, УстанавливаемыйСтатус)
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Статус", УстанавливаемыйСтатус);
	Возврат Документы.ЭлектронныйДокументВходящий.ок_ИзменитьСтатусыДокументовНаСервере(МассивДокументов, ПараметрыИзменения);
КонецФункции	

&НаКлиенте
Процедура УстановитьСтатусПоВыделеннымСтрокамБезусловно(ВыбранноеЗначение, ЗадаватьВопрос = Истина) Экспорт
	
	ВыделенныеСтроки = ок_УправлениеФормамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки, Статус", ВыделенныеСтроки, ВыбранноеЗначение);
	
	Если ЗадаватьВопрос Тогда 
		ТекстВопроса = СтрШаблон("У выделенных в списке документов будет установлен статус %1. Продолжить?", ВыбранноеЗначение);
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусПоВыделеннымСтрокамЗавершение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановитьСтатусПоВыделеннымСтрокамЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПоВыделеннымСтрокамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыДокументовИзмененыУспешно = ок_ИзменениеСтатусовДокументов(ДополнительныеПараметры.ВыделенныеСтроки, ДополнительныеПараметры.Статус);
	Если СтатусыДокументовИзмененыУспешно Тогда
		Элементы.Список.Обновить();
		СписокПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры
// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-14 (#4324)

#КонецОбласти

СкрываемыеКоманды = Новый Массив;
СкрываемыеКоманды.Добавить("СписокНаСогласование");
СкрываемыеКоманды.Добавить("СписокОтклонить");
СкрываемыеКоманды.Добавить("СписокПодписать");
СкрываемыеКоманды.Добавить("СписокСогласовать");
СкрываемыеКоманды.Добавить("СписокНеСогласовать");
СкрываемыеКоманды.Добавить("СписокОтразитьВУчете");

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-28 (#3997)
СкрываемыеКоманды.Добавить("СписокОтменитьСогласование");
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-28 (#3997)

СкрываемыеКоманды.Добавить("СписокЗавершить");
СкрываемыеКоманды.Добавить("СписокВвестиНаОснованииНовыйДокумент");
