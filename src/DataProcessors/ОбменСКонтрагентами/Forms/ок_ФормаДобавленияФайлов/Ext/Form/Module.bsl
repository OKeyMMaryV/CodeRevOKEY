//ОКЕЙ Вдовиченко Г.В(СофтЛаб) 2019-09-20 (#3414)

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МножественныйВыбор = Параметры.МножественныйВыбор;
	//НесколькоТипов = Параметры.МножественныйВыбор;
	Документ = Параметры.Документ;
	
	Элементы.ГруппаСтраницаФайлы.Видимость = МножественныйВыбор;
	
	Элементы.ГруппаСтраницаФайл.Видимость = Не НесколькоТипов И Не МножественныйВыбор;
	Элементы.ГруппаСтраницаПакет.Видимость = НесколькоТипов;
	
	Файлы.Очистить();
	Для каждого Значение Из Перечисления.ок_ТипыДокументовЭД Цикл
		НоваяСтрока = Файлы.Добавить();
		НоваяСтрока.ТипДокумента = Значение;
		Если Не МножественныйВыбор Тогда
			//НоваяСтрока.Пометка = Истина;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-21 (#3732)
			ЗаполнитьДатуНомерВхДокумента(НоваяСтрока.ТипДокумента, НоваяСтрока.ДатаВходящегоДокумента, НоваяСтрока.НомерВходящегоДокумента);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-21 (#3732)
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	СписокТипов.Очистить();
	Для каждого Значение Из Перечисления.ок_ТипыДокументовЭД Цикл
		НовыйЭлемент = СписокТипов.Добавить(Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	ОбновитьСоздатьПрисоединенныеФайлы();
	
	Закрыть(Новый Структура("ЕстьИзменения", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект);
	СтруктураИмяФайла = Новый Структура("ИмяФайла", "");
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(СтруктураИмяФайла,
											 "ИмяФайла",
											 Ложь,
											 Новый Структура("ПроверятьСуществованиеФайла", Истина),
											 Оповещение
											);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект, Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор()));
	СтруктураИмяФайла = Новый Структура("ИмяФайла", "");
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(СтруктураИмяФайла,
											 "ИмяФайла",
											 Ложь,
											 Новый Структура("ПроверятьСуществованиеФайла", Истина),
											 Оповещение
											);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ТекущиеДанные.Имя);
	
	Если НЕ Файл.Существует() Тогда
		ТекстСообщения = НСтр("ru = 'Указан неверный путь к файлу'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИмяФайла");
		Возврат;
	КонецЕсли;	
	
	ЗавершениеВыбораФайла(ТекущиеДанные.Имя, Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	Строка = Файлы[0];
	
	Если ПустаяСтрока(Строка.Имя) Тогда
		Строка.Пометка = Ложь;
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Строка.Имя);
	
	Если НЕ Файл.Существует() Тогда
		ТекстСообщения = НСтр("ru = 'Указан неверный путь к файлу'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	ЗавершениеВыбораФайла(Строка.Имя, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораФайла(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ПустаяСтрока(Результат) тогда
		Возврат;
	КонецЕсли;	
	
	Файл = Новый Файл(Результат);
	Если Не Файл.Существует() Тогда
		Сообщить("Не найден Файл: " + Результат);
		Возврат;
	КонецЕсли;
	
	//Строка = Неопределено;
	//Если ДополнительныеПараметры = Неопределено Тогда
	//	Если Файлы.Количество() > 0 Тогда
	//		Строка = Файлы[0];
	//	КонецЕсли;
	//Иначе	
	//	Строка = Файлы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	//КонецЕсли;
	//
	//Если Строка <> Неопределено Тогда
	//	Строка.Имя = Файл.Имя;
	//	Строка.ИмяБезРасширения = Файл.ИмяБезРасширения;
	//	Строка.Расширение = СтрЗаменить(Файл.Расширение, ".", "");
	//	Строка.Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Результат), УникальныйИдентификатор);
	//	Строка.Пометка = Истина;
	//КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Результат), УникальныйИдентификатор);
	
	Для каждого Строка Из Файлы Цикл
		
		Если ДополнительныеПараметры <> Неопределено 
			И Строка.ПолучитьИдентификатор() <> ДополнительныеПараметры.ИдентификаторСтроки Тогда
				Продолжить;
		КонецЕсли;
		
		Строка.Имя = Файл.Имя;
		Строка.ИмяБезРасширения = Файл.ИмяБезРасширения;
		Строка.Расширение = СтрЗаменить(Файл.Расширение, ".", "");
		Строка.Адрес = Адрес;
		
		Если Не МножественныйВыбор ИЛИ ДополнительныеПараметры <> Неопределено Тогда
			Строка.Пометка = Истина;
		КонецЕсли;	
		
	КонецЦикла	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоздатьПрисоединенныеФайлы()
	
	Для каждого Строка Из Файлы Цикл
		
		Если Не Строка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Строка.Адрес) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		Если НесколькоТипов Тогда
			
			Для каждого ЭлементТип из СписокТипов Цикл
				Если Не ЭлементТип.Пометка Тогда
					Продолжить;
				КонецЕсли;
				МассивТипов.Добавить(ЭлементТип.Значение);
			КонецЦикла;
			
		Иначе
			
			МассивТипов.Добавить(Строка.ТипДокумента);
			
		КонецЕсли;	
			
		Для каждого ТипДокумента Из МассивТипов Цикл
			
			ПрисоединенныйФайл = Неопределено;
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", "");
			Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
				ПараметрыФайла.Вставить("Автор", ПользователиКлиентСервер.ТекущийПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", Документ);
				ПараметрыФайла.Вставить("ИмяБезРасширения", Строка.ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", Строка.Расширение);
				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Строка.Адрес);
			Иначе
				ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", Строка.Адрес);
				ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", "");
				РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ПараметрыФайла);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
								
				СтруктураФайла = Новый Структура;
				СтруктураФайла.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
				СтруктураФайла.Вставить("ТипЭлементаВерсииЭД", ок_ОбменСКонтрагентамиВнутренний.ТипЭлементовВерсииЭДПоТипуДокументаОК(ТипДокумента));
				СтруктураФайла.Вставить("ок_НомерВходящегоДокумента", Строка.НомерВходящегоДокумента);
				СтруктураФайла.Вставить("ок_ДатаВходящегоДокумента", Строка.ДатаВходящегоДокумента);
				СтруктураФайла.Вставить("ок_ТипДокумента", ТипДокумента);
				ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураФайла, Ложь);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-21 (#3732)
&НаКлиенте
Процедура ФайлыПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ТекущиеДанные.Пометка Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьДатуНомерВхДокумента(ТекущиеДанные.ТипДокумента, ТекущиеДанные.ДатаВходящегоДокумента, ТекущиеДанные.НомерВходящегоДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	Если Файлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьДатуНомерВхДокумента(Файлы[0].ТипДокумента, Файлы[0].ДатаВходящегоДокумента, Файлы[0].НомерВходящегоДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуНомерВхДокумента(ТипВхДокумента, ДатаВхДокумента, НомерВхДокумента)
	
	Если ТипВхДокумента = ПредопределенноеЗначение("Перечисление.ок_ТипыДокументовЭД.Акт")
		ИЛИ ТипВхДокумента = ПредопределенноеЗначение("Перечисление.ок_ТипыДокументовЭД.Накладная")
		ИЛИ ТипВхДокумента = ПредопределенноеЗначение("Перечисление.ок_ТипыДокументовЭД.УПД") Тогда
		
		НомерДокументаОтправителя = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "НомерДокументаОтправителя");
		ДатаДокументаОтправителя = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДатаДокументаОтправителя");
		
		Если ЗначениеЗаполнено(НомерДокументаОтправителя)
			И ЗначениеЗаполнено(ДатаДокументаОтправителя) 
			И (НомерДокументаОтправителя <> НомерВхДокумента
				ИЛИ ДатаДокументаОтправителя <> ДатаВхДокумента) Тогда
				
			НомерВхДокумента = НомерДокументаОтправителя;
			ДатаВхДокумента = ДатаДокументаОтправителя;

		КонецЕсли; 
		
	ИначеЕсли ТипВхДокумента = ПредопределенноеЗначение("Перечисление.ок_ТипыДокументовЭД.СчетФактура") Тогда
		
		ок_НомерВходящегоСчетаФактуры = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ок_НомерВходящегоСчетаФактуры");
		ок_ДатаВходящегоСчетаФактуры = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ок_ДатаВходящегоСчетаФактуры");
		
		Если ЗначениеЗаполнено(ок_НомерВходящегоСчетаФактуры)
			И ЗначениеЗаполнено(ок_ДатаВходящегоСчетаФактуры) 
			И (ок_НомерВходящегоСчетаФактуры <> НомерВхДокумента
				ИЛИ ок_ДатаВходящегоСчетаФактуры <> ДатаВхДокумента) Тогда
				
			НомерВхДокумента = ок_НомерВходящегоСчетаФактуры;
			ДатаВхДокумента = ок_ДатаВходящегоСчетаФактуры;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-21 (#3732)