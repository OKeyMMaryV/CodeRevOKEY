
&НаСервере
Функция КнопкаВыполнитьНажатие_Сервер()
	// Ок Видяйкин В.И. 20170905 +
	//Возврат НЕ (Объект.Организация = Справочники.Организации.НайтиПоКоду("000000045") ИЛИ Объект.Организация = Справочники.Организации.НайтиПоКоду("000000056"))
	Возврат НЕ (Объект.Организация = Справочники.Организации.НайтиПоКоду("000000045"))
	// Ок Видяйкин В.И. 20170905 -
КонецФункции

&НаСервере
Функция КнопкаВыполнитьНажатие_Сервер_1()
    //***БИТ***Теплова***)
	
	// проверим закрыт ли период
	//++ СВВ Сапожников Вадим
	//СоответствиеГраницЗапрета = ПараметрыСеанса.бит_му_ГраницыЗапретаИзмененияДанных.Получить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГраницыЗапретаИзмененияДанных.ДатаЗапрета КАК ГраницаЗапретаИзменений
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ГраницыЗапретаИзмененияДанных
	|ГДЕ
	|	ГраницыЗапретаИзмененияДанных.Объект = &Организация
	|	И ГраницыЗапретаИзмененияДанных.Раздел = &Раздел";
	Запрос.УстановитьПараметр("Раздел", ДатыЗапретаИзмененияБП.РазделБухгалтерскийУчет().Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросВыполнить = Запрос.Выполнить();
	Если ЗапросВыполнить.Пустой() Тогда
		Граница = Дата(1,1,1);
	Иначе
		Граница = Запрос.Выполнить().Выгрузить()[0].ГраницаЗапретаИзменений;
	КонецЕсли;
	Возврат Граница;
	//-- СВВ
КонецФункции

&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Команда)
	Перем СоответствиеГраницЗапрета;
	
	//***БИТ***Теплова***(
	Если
	КнопкаВыполнитьНажатие_Сервер() Тогда
	// Ок Видяйкин В.И. 20170905 +
	//Предупреждение("Выберите организацию ""ОКЕЙ"" или ""ОКЕЙ Лоджистикс""!");
	Предупреждение("Выберите организацию ""ОКЕЙ""!");
	// Ок Видяйкин В.И. 20170905 -
		Возврат;
	КонецЕсли;
    //***БИТ***Теплова***)
	
	// проверим закрыт ли период
	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 14.09.2015 15:03:41
	//КнопкаВыполнитьНажатие_Сервер_1(СоответствиеГраницЗапрета);
	ГраницаПоОрганизации = КнопкаВыполнитьНажатие_Сервер_1();
	//-- СВВ}
	
	//Если СоответствиеГраницЗапрета <> Неопределено Тогда
	//    //***БИТ***Теплова***(
	//	//ГраницаПоОрганизации = СоответствиеГраницЗапрета[Справочники.Организации.НайтиПоКоду("000000045")];    
	//	ГраницаПоОрганизации = СоответствиеГраницЗапрета[Объект.Организация];    
		//***БИТ***Теплова***)
		Если Объект.НачПериода < ГраницаПоОрганизации Тогда
			Предупреждение("Выбранный период частично или полностью находится в закрытом периоде, выберите корректный период.");
			Возврат;
		КонецЕсли;	
	//КонецЕсли;
	
	ТекущаяСтраница = Элементы.ПанельГруппаОдин.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Группа Тогда 

		ЗагрузитьГруппу_Вызов_Функции(RecNo);
		
	ИначеЕсли ТекущаяСтраница = Элементы.Один Тогда 
		// загрузка не свернутых оборотов по RecNo
		
		ЗагрузитьПоRecNo_Вызов_Функции(RecNo);
		
	ИначеЕсли ТекущаяСтраница = Элементы.Ваучеры1 Тогда 
		
		ЗагрузитьПоВаучеру_Вызов_Функции(Ваучеры);
		
	ИначеЕсли ТекущаяСтраница = Элементы.Свернутые Тогда
		// загрузка свернутых оборотов
		
		ЗагрузитьСвернутые_Вызов_Функции();
		
	ИначеЕсли ТекущаяСтраница = Элементы.Сопоставление Тогда
		// сопоставление без загрузки из SQL
		
		ВыполнитьСопоставление_Вызов_Функции(АналитикаАксапты);
		
	ИначеЕсли ТекущаяСтраница = Элементы.НастройкиИмпорта Тогда 
		ЗаполнитьНастройки_Вызов_Функции();
	//***БИТ***Теплова*** (добавила страницу "ЗагрузкаДоговоров")
	ИначеЕсли  ТекущаяСтраница = Элементы.ЗагрузкаДоговоров Тогда  
		ПодключениеКБазе_Вызов_Функции();
		ЗагрузитьДоговора_Вызов_Функции();
	//***БИТ***Теплова***)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбПериодНажатие(Элемент)
	ДиалогРедактированияПериода = Новый ДиалогРедактированияСтандартногоПериода;	
	
	ДиалогРедактированияПериода.Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ДиалогРедактированияПериода.Период.ДатаНачала = Объект.НачПериода;
	ДиалогРедактированияПериода.Период.ДатаНачала = Объект.КонПериода;
	
	Если ДиалогРедактированияПериода.Редактировать() Тогда
		Объект.НачПериода = НачалоДня(ДиалогРедактированияПериода.Период.ДатаНачала);
		Объект.КонПериода = КонецДня(ДиалогРедактированияПериода.Период.ДатаОкончания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПриОткрытии_Сервер()
	Возврат Метаданные.РегистрыСведений.Найти("ОК_ЗагружаемыеТипыОперацийАксапты") = Неопределено
КонецФункции

&НаСервере
Функция ПриОткрытии_Сервер_1()
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Элементы.НастройкиМеханизмаИмпортаДанных.ТолькоПросмотр = Ложь;
		Элементы.НастройкиМеханизмаИмпортаДанных.Доступность	 = Истина;
	КонецЕсли;
	// Ок Видяйкин В.И. 20170905 +
	Объект.Организация = Справочники.Организации.НайтиПоКоду("000000045");
	// Ок Видяйкин В.И. 20170905 -
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ок_ТипыОперацийАксапты.Ссылка КАК ТипОперацииАксапты
	               |ИЗ
	               |	Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
	               |ГДЕ
	               |	(НЕ бит_ок_ТипыОперацийАксапты.ПометкаУдаления)
	               |	И (НЕ бит_ок_ТипыОперацийАксапты.СвернутыеОбороты)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ок_ТипыОперацийАксапты.Ссылка КАК ТипОперацииАксапты
	               |ИЗ
	               |	Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
	               |ГДЕ
	               |	(НЕ бит_ок_ТипыОперацийАксапты.ПометкаУдаления)
	               |	И бит_ок_ТипыОперацийАксапты.СвернутыеОбороты";
	
	Результат 	= Запрос.ВыполнитьПакет();
	
	ТЗРезультат = Результат[0].Выгрузить();
	ОтборГруппы	= Новый СписокЗначений;	
	ОтборГруппы.ЗагрузитьЗначения(ТЗРезультат.ВыгрузитьКолонку("ТипОперацииАксапты"));
	//++СВВ
	ЭлементОтбора = ТипыОперацийГруппы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОперацииАксапты");
	ЭлементОтбора.ПравоеЗначение = ОтборГруппы;
	//ТипыОперацийГруппы.Отбор.ТипОперацииАксапты.ВидСравнения		= ВидСравнения.ВСписке;
	//ТипыОперацийГруппы.Отбор.ТипОперацииАксапты.Значение			= ОтборГруппы;
	//ТипыОперацийГруппы.Отбор.ТипОперацииАксапты.Использование	= Истина;
	//--СВВ
	
	ОтборСвернутые	= Новый СписокЗначений;
	ТЗРезультат 	= Результат[1].Выгрузить();
	ОтборСвернутые.ЗагрузитьЗначения(ТЗРезультат.ВыгрузитьКолонку("ТипОперацииАксапты"));
	//++СВВ
	ЭлементОтбора = ТипыОперацийСвернутые.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОперацииАксапты");
	ЭлементОтбора.ПравоеЗначение = ОтборСвернутые;
	//ТипыОперацийСвернутые.Отбор.ТипОперацииАксапты.ВидСравнения	= ВидСравнения.ВСписке;
	//ТипыОперацийСвернутые.Отбор.ТипОперацииАксапты.Значение		= ОтборСвернутые;
	//ТипыОперацийСвернутые.Отбор.ТипОперацииАксапты.Использование	= Истина;
	//--СВВ
	// Ок Видяйкин В.И. 20170905 +
	Объект.Организация = Справочники.Организации.НайтиПоКоду("000000045");	
	// Ок Видяйкин В.И. 20170905 -
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если
	ПриОткрытии_Сервер() Тогда 
		Предупреждение("Данная обработка не предназначена для работы с текущей конфигурацией");
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;
	
	ПриОткрытии_Сервер_1();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельТипаОперацииУстановитьВсеСопоставление(Команда)
	
	Объект.ТипыОперацийСопоставление.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельТипаОперацииСнятьВсеСопоставление(Команда)
	
	Объект.ТипыОперацийСопоставление.ЗаполнитьПометки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанель1Заполнить(Команда)
//	Если Элементы.ТекущаяСтраница.Имя = "Свернутые" Тогда 
	ТекущаяСтраница = Элементы.ПанельГруппаОдин.ТекущаяСтраница;
	Если ТекущаяСтраница.Имя = "Свернутые" тогда
		Свернутые	= Истина;
	Иначе 
		Свернутые	= Ложь;
	КонецЕсли;
	ЗаполнитьРС_ОК_ЗагружаемыеТипыОперацийАксапты_Вызов_Функции(Свернутые);
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанель1УстановитьВсе(Команда)
//	Если Элементы.ТекущаяСтраница.Имя = "Свернутые" Тогда 
	ТекущаяСтраница = Элементы.ПанельГруппаОдин.ТекущаяСтраница;
	Если ТекущаяСтраница.Имя = "Свернутые" тогда
		Свернутые	= Истина;
	Иначе 
		Свернутые	= Ложь;
	КонецЕсли;
	ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты_Вызов_Функции(Истина, Свернутые);
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанель1СнятьВсе(Команда)
//	Если Элементы.ТекущаяСтраница.Имя = "Свернутые" Тогда 
	ТекущаяСтраница = Элементы.ПанельГруппаОдин.ТекущаяСтраница;
	Если ТекущаяСтраница.Имя = "Свернутые" тогда
		Свернутые	= Истина;
	Иначе 
		Свернутые	= Ложь;
	КонецЕсли;
	ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты_Вызов_Функции(Ложь, Свернутые);
КонецПроцедуры

&НаСервере
Функция ОрганизацияНачалоВыбораИзСписка_Сервер()
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("000000045"));
	// Ок Видяйкин В.И. 20170905 +
	//СписокОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("000000056"));
	// Ок Видяйкин В.И. 20170905 -
	Возврат СписокОрганизаций;
КонецФункции

//***БИТ***Теплова***(
&НаКлиенте
Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СписокОрг = ОрганизацияНачалоВыбораИзСписка_Сервер();
	Элемент.СписокВыбора.Очистить();
	Для Каждого тек_Значение_уник Из  СписокОрг Цикл
		Элемент.СписокВыбора.Добавить(тек_Значение_уник.Значение, тек_Значение_уник.Представление);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.СопоставленныеДоговораДляПроверки.Очистить();
	Объект.ДоговораSQL.Очистить();
	ЗаполнитьНастройки_Вызов_Функции();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельДоговораSQLПроверитьДоговора(Команда)
	ЗаполнитьНастройки_Вызов_Функции();
	ПодключениеКБазе_Вызов_Функции();
	Объект.СопоставленныеДоговораДляПроверки.Очистить();
	Объект.ДоговораSQL.Очистить();
	ЗагрузитьДоговора_Вызов_Функции(Истина);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьГруппу_Вызов_Функции(RecNo)
	_объект=РеквизитФормыВЗначение("Объект");
	_объект.ЗагрузитьГруппу(RecNo);
	ЗначениеВРеквизитФормы(_объект, "Объект");
КонецФункции

&НаСервере
Функция ЗагрузитьПоRecNo_Вызов_Функции(RecNo)
	_объект=РеквизитФормыВЗначение("Объект");
	_объект.ЗагрузитьПоRecNo(RecNo);
	ЗначениеВРеквизитФормы(_объект, "Объект");
КонецФункции

&НаСервере
Функция ЗагрузитьПоВаучеру_Вызов_Функции(Ваучеры)
	_объект=РеквизитФормыВЗначение("Объект");
	_объект.ЗагрузитьПоВаучеру(Ваучеры);
	ЗначениеВРеквизитФормы(_объект, "Объект");
КонецФункции

&НаСервере
Функция ЗагрузитьСвернутые_Вызов_Функции()
	_объект=РеквизитФормыВЗначение("Объект");
	_объект.ЗагрузитьСвернутые();
	ЗначениеВРеквизитФормы(_объект, "Объект");
КонецФункции

&НаСервере
Функция ВыполнитьСопоставление_Вызов_Функции(АналитикаАксапты)
	_объект=РеквизитФормыВЗначение("Объект");
	_объект.ВыполнитьСопоставление(АналитикаАксапты);
	ЗначениеВРеквизитФормы(_объект, "Объект");
КонецФункции

&НаСервере
Функция ЗаполнитьНастройки_Вызов_Функции()
	_объект=РеквизитФормыВЗначение("Объект");
	_объект.ЗаполнитьНастройки();
	ЗначениеВРеквизитФормы(_объект, "Объект");
КонецФункции

&НаСервере
Функция ПодключениеКБазе_Вызов_Функции()
	_объект=РеквизитФормыВЗначение("Объект");
	результат = _объект.ПодключениеКБазе();
	ЗначениеВРеквизитФормы(_объект, "Объект");
	Возврат результат;
КонецФункции

&НаСервере
Функция ЗагрузитьДоговора_Вызов_Функции(Проверка=Ложь)
	_объект=РеквизитФормыВЗначение("Объект");
	_объект.ЗагрузитьДоговора(Проверка);
	ЗначениеВРеквизитФормы(_объект, "Объект");
КонецФункции

&НаСервере
Функция ЗаполнитьРС_ОК_ЗагружаемыеТипыОперацийАксапты_Вызов_Функции(Свернутые)
	_объект=РеквизитФормыВЗначение("Объект");
	_объект.ЗаполнитьРС_ОК_ЗагружаемыеТипыОперацийАксапты(Свернутые);
	ЗначениеВРеквизитФормы(_объект, "Объект");
КонецФункции

&НаСервере
Функция ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты_Вызов_Функции(Пометка, Свернутые)
	_объект=РеквизитФормыВЗначение("Объект");
	_объект.ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты(Пометка, Свернутые);
	ЗначениеВРеквизитФормы(_объект, "Объект");
	Элементы.ТипыОперацийСвернутые.Обновить();
	Элементы.ТипыОперацийГруппы.Обновить();
КонецФункции
//***БИТ***Теплова***)


	НастройкаПериода = Новый СтандартныйПериод;
