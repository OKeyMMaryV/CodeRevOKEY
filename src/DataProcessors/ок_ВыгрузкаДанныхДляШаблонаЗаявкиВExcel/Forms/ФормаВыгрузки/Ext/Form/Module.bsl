
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-04-28 (#3630)
	ВидДокументаШаблона = 0; //ФВБ
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-04-28 (#3630)
	
	//Инициализируем отбор
	СКД = Обработки.ок_ВыгрузкаДанныхДляШаблонаЗаявкиВExcel.ПолучитьМакет("СКД_ДляОтборов");
	
	АдресКомпоновки = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);		
	
	// Инициализируем компоновщик
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресКомпоновки);
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект);
	СтруктураИмяФайла = Новый Структура("ИмяФайла","");
	// Зададим фильтр для диалога.
	ТекстФильтра = бит_ОбменДанными_Excel.ПолучитьФильтрДляВыбораФайлаExcel();
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(СтруктураИмяФайла,
											 "ИмяФайла",
											 Ложь,
											 Новый Структура("Фильтр, ПроверятьСуществованиеФайла", ТекстФильтра, Истина),
											 Оповещение
											);

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОткрытьФайл(Объект.ИмяФайла);	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередУдалением(Элемент, Отказ)
	
	Если ЭтоСлужебныйОтбор() Тогда 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьШаблон(Команда)
	
	Перем пЗначениеНастройки;
	
	стрНастройкиЗагрузкиВыгрузки = ПолучитьНастройкиЗагрузкиВыгрузки();
	
	ОткрываемыйФайл = Новый Файл(СокрЛП(Объект.ИмяФайла));
    
	Если ПустаяСтрока(Объект.ИмяФайла) ИЛИ
		НЕ ОткрываемыйФайл.Существует() 
	Тогда
		ТекстСообщения = НСтр("ru = 'Указан неверный путь к файлу'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ИмяФайла");
		Возврат;
	КонецЕсли;	
	
	Если стрНастройкиЗагрузкиВыгрузки.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить файл по причине:
											 	   					 |Не заполнены настройки выгрузки в Excel-файл.'"));
		Возврат;
	КонецЕсли;
		
	пОшибкиНастроек = "";
	пСтрокаПараметров	  = "ЦФО,Объекты,Статьи,Проекты";
	пМассивИменПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пСтрокаПараметров);
	
	Для Каждого пИмяНастройки Из пМассивИменПараметров Цикл 		
		стрНастройкиЗагрузкиВыгрузки.Свойство("ИмяЛиста_" + пИмяНастройки,пЗначениеНастройки);
		Если Не ЗначениеЗаполнено(пЗначениеНастройки) Тогда 
			пОшибкиНастроек = пОшибкиНастроек + ?(ПустаяСтрока(пОшибкиНастроек), "", Символы.ПС) + 
							  НСтр("ru = 'Не заполнена настройка с именем листа '") + пИмяНастройки;
		КонецЕсли;
	КонецЦикла;	
	
	стрНастройкиЗагрузкиВыгрузки.Свойство("ПарольКниги",пЗначениеНастройки);
	Если Не ЗначениеЗаполнено(пЗначениеНастройки) Тогда 
			пОшибкиНастроек = пОшибкиНастроек + ?(ПустаяСтрока(пОшибкиНастроек), "", Символы.ПС) + 
							  НСтр("ru = 'Не заполнена настройка пароля книги '");
		КонецЕсли;
	
	Если Не ПустаяСтрока(пОшибкиНастроек) Тогда 
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить файл по причине:'")+Символы.ПС+пОшибкиНастроек);
		Возврат;
		
	КонецЕсли;
	
	пМассивИменПараметров = ПолучитьМассивИменПараметров(стрНастройкиЗагрузкиВыгрузки);	
				
	Если пМассивИменПараметров.Количество() = 0 Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбраны справочные данные для выгрузки'"));
		Возврат;
		
	КонецЕсли;
	
	мОбновления = ПолучитьДанныеДляОбновления(стрНастройкиЗагрузкиВыгрузки,пМассивИменПараметров);
	
	Попытка
		пExcel = Новый COMОбъект("Excel.Application");
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось прочитать файл по причине
																						 |'" + ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
		
	пКнига = пExcel.WorkBooks.Open(Объект.ИмяФайла);
	Попытка
		пКнига.Unprotect(стрНастройкиЗагрузкиВыгрузки.ПарольКниги);
	Исключение
		
		ВызватьИсключение;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось прочитать файл по причине
															 |'" + ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	Для Каждого стрОбновляемогоЛиста Из мОбновления Цикл 
		
		Попытка
		
			пОбновляемыйЛист = пКнига.WorkSheets(стрОбновляемогоЛиста.ИмяЛиста);
		    
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выгрузить данные, т.к. файл не соответствует формату выгружаемых данных'"));			  

			Попытка
				пExcel.Quit();
	        	пExcel = Неопределено; 
			Исключение
				
			КонецПопытки;
			
			Возврат;
			
		КонецПопытки; 
		
		пКнига.Unprotect(стрНастройкиЗагрузкиВыгрузки.ПарольКниги);

		пОбновляемыйЛист.Visible = Истина;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-11 (#3630)
		//пОбновляемыйЛист.Activate();
		//пExcel.Range("A1").Select(); 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-11 (#3630)
		
		// Сохраняем табличный документ во временный файл
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");
		ТабДок = стрОбновляемогоЛиста.ТабДок;
		ТабДок.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX); 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-12 (#3630)
		//пExcel.CutCopyMode = False; // Сбрасываем старое копирование 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-12 (#3630)          		
		
		// Копируем первый (единственный) лист временного файла
		пКнигаОбнЛиста = пExcel.Workbooks.Open(ИмяВременногоФайла);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-11 (#3630)
		//пКнигаОбнЛиста.Worksheets(1).Cells.Select();
		//пExcel.Selection.Copy(); 
		//
		//пКнига.Activate();
		//
		//пОбновляемыйЛист.Paste(); // Вставляем содержимое 
		//		
		//пОбновляемыйЛист.Activate();
		//		
		//пExcel.Range("A1").Select(); 
		//Заменено на:
		пОбновляемыйЛист.Cells.Clear();
		пКнигаОбнЛиста.Sheets(1).Cells.Copy(пОбновляемыйЛист.Cells);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-11 (#3630)
				
	КонецЦикла;
	
	//пОбновляемыйЛист.Visible = Ложь;
	пExcel.DisplayAlerts = False; // Отключаем вывод предупреждений типа "Заменить файл?"
	пКнига.Worksheets(1).Activate(); // Активируем 1 лист из списка
	Попытка
	
		пКнига.Protect(стрНастройкиЗагрузкиВыгрузки.ПарольКниги);
	
		пКнига.Save(); 
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выгрузить данные, т.к. не удалось сохранить файл'"));			  
		
		Попытка
			пExcel.Quit();
	        пExcel = Неопределено; 
		Исключение
				
		КонецПопытки;
			
		Возврат;
		
	КонецПопытки;
	  	
	пИндекс = пКнига.Worksheets.Count;
	пКнига.Unprotect(стрНастройкиЗагрузкиВыгрузки.ПарольКниги);
	
	Пока пИндекс > 1 Цикл
		
		Если пКнига.Worksheets(пИндекс).Visible <> 0 Тогда 
			пКнига.Worksheets(пИндекс).Visible = 0;
		КонецЕсли;
		
		пИндекс = пИндекс - 1;
		
	КонецЦикла; 
	
	Попытка
	
		пКнига.Protect(стрНастройкиЗагрузкиВыгрузки.ПарольКниги);
	
		пКнига.Save(); 
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выгрузить данные, т.к. не удалось сохранить файл'"));			  
		
	КонецПопытки;
	
	пExcel.Quit();
	
	пExcel = Неопределено;    
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройки(Команда)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-04-28 (#3630)
	//ОткрытьФорму("Обработка.ок_ВыгрузкаДанныхДляШаблонаЗаявкиВExcel.Форма.ФормаНастройки",,ЭтаФорма,ЭтаФорма,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//Заменено на:
	//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-12-01 (#3790)
	//ПараметрыФормы = Новый Структура("ЭтоКорректировка", ВидДокументаШаблона = 1);
	ПараметрыФормы = Новый Структура("ЭтоКорректировка", ВидДокументаШаблона);
	//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-12-01 (#3790)
	ОткрытьФорму("Обработка.ок_ВыгрузкаДанныхДляШаблонаЗаявкиВExcel.Форма.ФормаНастройки",ПараметрыФормы,ЭтаФорма,ЭтаФорма,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-04-28 (#3630)
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьМассивИменПараметров(стрНастройкиЗагрузкиВыгрузки)
	
	пИсхНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	пСтрокаПараметров	  = "ЦФО,Объекты,Статьи,Проекты";
	пМассивИменПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пСтрокаПараметров);
	
	пИндекс = пМассивИменПараметров.Количество()-1;
	Пока пИндекс>= 0 Цикл 
		
		пИмяНастройки = пМассивИменПараметров[пИндекс];
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(пИсхНастройки, "ИмяЛиста" + пИмяНастройки, стрНастройкиЗагрузкиВыгрузки["ИмяЛиста_" + пИмяНастройки]);	
		
		пПараметр = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(пИсхНастройки, "Выгружать" + пИмяНастройки);
		Если НЕ пПараметр.Использование Тогда 
			пМассивИменПараметров.Удалить(пИндекс);
		КонецЕсли;
		
		пПараметр.Использование = Истина;
		пПараметр.Значение		= Ложь;
		пИндекс = пИндекс - 1;
		
	КонецЦикла;

	АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(пИсхНастройки,Новый УникальныйИдентификатор);
	
	Возврат пМассивИменПараметров;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеВыбораФайла(ИмяФайла, ДополнительныеПараметры) Экспорт 
	
	Если ПустаяСтрока(ИмяФайла) тогда
		Возврат;
	КонецЕсли;	
	
	Объект.ИмяФайла = ИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЛогОшибок()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(ИмяФайла)
    
    Если ПустаяСтрока(ИмяФайла) Тогда
        Возврат;
    КонецЕсли;
    
    ОткрываемыйФайл = Новый Файл(СокрЛП(ИмяФайла));
    Если ОткрываемыйФайл.Существует() Тогда
        ЗапуститьПриложение(ИмяФайла);
    КонецЕсли;
  
КонецПроцедуры

&НаКлиенте
Функция ЭтоСлужебныйОтбор()
	
	ТД = Элементы.КомпоновщикНастроекНастройкиОтбор.ТекущиеДанные;
	Если ТД = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ВыгружатьЦФО")	  ИЛИ
			ТД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ВыгружатьОбъекты") ИЛИ
		 	ТД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ВыгружатьСтатьи")  ИЛИ
		 	ТД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ВыгружатьПроекты");
		 
КонецФункции


&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ЭтоСлужебныйОтбор() Тогда 
		ОтменаРедактирования = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция МассивОбновляемыхЛистов()
	
	
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляОбновления(стрНастройкиЗагрузкиВыгрузки,пМассивИменПараметров)
	
	мЛистовДляОбновления = Новый Массив;
		
	СКД = Обработки.ок_ВыгрузкаДанныхДляШаблонаЗаявкиВExcel.ПолучитьМакет("СКД_ДляОтборов");
	
	пИсхНастройки = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновки);
	
	пКомпоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	пКомпоновщик.ЗагрузитьНастройки(пИсхНастройки);
	
	Для Каждого пИмяНастройки Из пМассивИменПараметров Цикл 
		
		пНастройки = пКомпоновщик.ПолучитьНастройки();
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(пНастройки, "Выгружать" + пИмяНастройки, Истина);
		
		Для Каждого пЭлОтбора Из пНастройки.Отбор.Элементы Цикл 
			
			пИмяПоиска = Лев(пИмяНастройки,СтрДлина(пИмяНастройки)-1);
			
			Попытка
				Если Найти(Строка(пЭлОтбора.ЛевоеЗначение), пИмяПоиска) = 0 Тогда 
					пЭлОтбора.Использование = Ложь;	
				КонецЕсли;
			Исключение
				пЭлОтбора.Использование = Ложь;	
			КонецПопытки;
		КонецЦикла;        		
		
		пТЗ = ПолучитьРезультатВыполненияКомпоновки(стрНастройкиЗагрузкиВыгрузки,пНастройки,СКД);
		
		пТабДок = Новый ТабличныйДокумент;
		
		пОбл = пТабДок.Область(1,1);
		пОбл.Текст    = "Код";
		пОбл.Шрифт 	  = Новый Шрифт(пОбл.Шрифт,,,Истина);
		
		пОбл = пТабДок.Область(1,2);	
		пОбл.Текст    = "Наименование";
		пОбл.Шрифт 	  = Новый Шрифт(пОбл.Шрифт,,,Истина);
		
		пТекСтрока = 2;
		
		Для Каждого пСтрокаДанных Из пТЗ Цикл 
			
			пОбл = пТабДок.Область(пТекСтрока,1);		
			пОбл.Текст    = пСтрокаДанных.Код;
			
			пОбл = пТабДок.Область(пТекСтрока,2);
			пОбл.Текст    = пСтрокаДанных.Наименование;
			
			пТекСтрока = пТекСтрока + 1;	
			
		КонецЦикла;                     
		мЛистовДляОбновления.Добавить(Новый Структура("ИмяЛиста,ТабДок",стрНастройкиЗагрузкиВыгрузки["ИмяЛиста_" + пИмяНастройки],пТабДок));
	КонецЦикла;
	
	Возврат мЛистовДляОбновления;
	
КонецФункции

&НаСервере
Функция ПолучитьРезультатВыполненияКомпоновки(пНастройкиXLS,Настройки,СКД)
	
	Результат = Новый ТаблицаЗначений;
		
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);   
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиЗагрузкиВыгрузки()
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-03 (#3630)
	//СписокНастроек = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаЗагрузкиДанныхЗаявкиИзExcelФайла");
	//Заменено на:
	Если ВидДокументаШаблона = 0 Тогда 
		СписокНастроек = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаЗагрузкиДанныхЗаявкиИзExcelФайла");
	//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-12-01 (#3790)
	//Иначе 
	//	СписокНастроек = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаЗагрузкиДанныхККиЗБИзExcelФайла");
	ИначеЕсли ВидДокументаШаблона = 1 Тогда 
		СписокНастроек = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаЗагрузкиДанныхККиЗБИзExcelФайла");	
	ИначеЕсли ВидДокументаШаблона = 2 Тогда
		СписокНастроек = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаЗагрузкиДанныхПТиУИзExcelФайла");
	//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-12-01 (#3790)
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-03 (#3630)
	Если СписокНастроек = Неопределено Тогда 
		Возврат Новый Структура;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого ЭлементНастройки Из СписокНастроек Цикл 
		СтруктураРезультат.Вставить(ЭлементНастройки.Представление, ЭлементНастройки.Значение);
	КонецЦикла;
	
	Возврат СтруктураРезультат;	
	
КонецФункции

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-03 (#3630)
&НаКлиенте
Процедура ВидДокументаШаблонаПриИзменении(Элемент)
	Объект.ИмяФайла = "";
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-03 (#3630)

#КонецОбласти
