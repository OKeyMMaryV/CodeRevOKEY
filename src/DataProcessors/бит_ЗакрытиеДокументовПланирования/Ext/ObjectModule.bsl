#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мЭтоРегламентнаяОперация Экспорт; // Хранит флаг выполнения регламентной операцией.


Перем мСинонимДокументаДляЗакрытия Экспорт; // Хранит синоним документа для закрытия.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет дерево значений "ДеревоВидыДокументов".
// 
// Параметры:
//  ТипДокумента - Тип("ДокументСсылка." + ИмяДокумента).
// 
Процедура ЗаполнитьВидыДокументов(ТипДокумента = Неопределено) Экспорт
    
    ДеревоВидыДокументов.Строки.Очистить();
    
    // Если колонки не были добавлены ранее, тогда.
    Если ДеревоВидыДокументов.Колонки.Количество() = 0 Тогда
        
        // Добавим колонки в дерево значений "ДеревоВидыДокументов".
        ДеревоВидыДокументов.Колонки.Добавить("Выгружать"    , Новый ОписаниеТипов("Число"));
        ДеревоВидыДокументов.Колонки.Добавить("ВидДокумента" , Новый ОписаниеТипов("Строка"));
        ДеревоВидыДокументов.Колонки.Добавить("ИмяМетаданных", Новый ОписаниеТипов("Строка"));
        ДеревоВидыДокументов.Колонки.Добавить("Картиночка");
        
    КонецЕсли;
    
    Если ТипДокумента = Неопределено Тогда
        
        // Получаем описание типов реквизита "ДокументПланирования" 
        // табличной части "ДокументыПланирования" документа "бит_ЗакрытиеЗаявок".
        ОписаниеТиповОбъектов = Метаданные.Документы.бит_ЗакрытиеЗаявок.ТабличныеЧасти.ДокументыПланирования.Реквизиты.ДокументПланирования.Тип;
        
    Иначе
        МассивТипов = Новый Массив;
        МассивТипов.Добавить(ТипДокумента);
        ОписаниеТиповОбъектов = Новый ОписаниеТипов(МассивТипов);
    КонецЕсли;
    
    // Получаем массив типов для обхода.
    ТипыОбъектовДляЗаполнения = ОписаниеТиповОбъектов.Типы();
    
    ПапкаВиды = ДеревоВидыДокументов.Строки.Добавить();
	ПапкаВиды.Выгружать = Истина;
	ПапкаВиды.ВидДокумента = "Виды";
    
	Для Каждого ТекТип Из ТипыОбъектовДляЗаполнения Цикл
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТекТип);
		
		ТекИмяОбъекта = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоОписаниюТипов(Новый ОписаниеТипов(МассивТипов),
																			   "Документы", 
																			   "ДокументСсылка").Имя;
		
        НовСтрока = ПапкаВиды.Строки.Добавить();
		НовСтрока.Выгружать = Истина;
		НовСтрока.ВидДокумента 	= СтрЗаменить(СокрЛП(ТекТип), "Документ ссылка: ", "");
        НовСтрока.ИмяМетаданных = "Документ." + ТекИмяОбъекта;
        
        НовСтрока.Картиночка = БиблиотекаКартинок.ДокументОбъект;
        
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВидыДокументов()

// Функция получает массив видов документов для отбора 
// при заполнении табличного поля "ПереченьДокументов".
// 
// Параметры;
//  Нет.
// 
// Возвращаемое значение:
//  МассивВидовДокументов - Массив.
// 
Функция ПолучитьМассивВидовДокументов(пДеревоВидыДокументов) Экспорт
	
	МассивВидовДокументов = Новый Массив;
	
	Для Каждого ВерхнийУровень Из пДеревоВидыДокументов.Строки Цикл
        Для Каждого УровеньВидыДокументов Из ВерхнийУровень.Строки Цикл
            
            Если УровеньВидыДокументов.Выгружать Тогда
                МассивВидовДокументов.Добавить(УровеньВидыДокументов.ИмяМетаданных);
            КонецЕсли;
            
        КонецЦикла;
	КонецЦикла;
	
	Возврат МассивВидовДокументов;
	
КонецФункции // ПолучитьМассивВидовДокументов()

// Функция инициализирует схему компоновки данных и пользовательские настройки.
// 
// Параметры:
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - настройки которые будут заполнены из макета СКД
// 	МассивВидовДокументов - Массив - виды документов которые надо отобрать в перечень
// 	ИнициализироватьНастройки - булево - Истина - при инициализации СКД будут обновлены пользовательские настройки
// 									при изменении видов документов обновлять настройки не надо.
// 
// Возвращаемое значение:
// 	АдресСхемыКомпоновкиДанных - строка - адрес временного хранилища, где хранится СКД.
// 
Функция ИнициализироватьКомпоновщик(пКомпоновщик, МассивВидовДокументов, ИнициализироватьНастройки=Истина) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("СКДПереченьДокументов");
	
	НаборДанныхСКД = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ТекстЗапроса = НаборДанныхСКД.Запрос;
	
	ТекстУсловия = СформироватьТекстОтбораПоТипамДокументов(МассивВидовДокументов, "бит_ПланируемыйРасходДенежныхСредств");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредств", ТекстУсловия);
	
	ТекстУсловия = СформироватьТекстОтбораПоТипамДокументов(МассивВидовДокументов, "бит_ПланируемыеЗатраты");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаЗатраты", ТекстУсловия);
	
	НаборДанныхСКД.Запрос = ТекстЗапроса;

	бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СхемаКомпоновкиДанных, 
		СхемаКомпоновкиДанных.НаборыДанных[0].Имя, 
		бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));

	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	Если ИнициализироватьНастройки Тогда
		пКомпоновщик.Инициализировать(ИсточникНастроек);
		пКомпоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции

// Функция формирует перечень документов для закрытия.
// 
// Параметры:
// 	АдресСхемыКомпоновкиДанных - Строка - адрес временного хранилища, где хранится СКД
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - пользовательские настройки
// 	СтруктураПараметров - Структура, ОбработкаОбъект - значения параметров для подстановки в СКД.
// 
// Возвращаемое значение:
// 	ТаблицаПереченьПолный - ТаблицаЗначений.
// 
Функция ЗаполнитьПереченьДокументов(АдресСхемыКомпоновкиДанных, пКомпоновщик, СтруктураПараметров) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ПараметрыСКД = пКомпоновщик.Настройки.ПараметрыДанных;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("Период"			, СтруктураПараметров.Период);
	ПараметрыСКД.УстановитьЗначениеПараметра("ПустаяДата"		, Дата("00010101"));
	ПараметрыСКД.УстановитьЗначениеПараметра("КонецПериода"		, Новый Граница(КонецДня(СтруктураПараметров.Период.ДатаОкончания), ВидГраницы.Включая));
	ПараметрыСКД.УстановитьЗначениеПараметра("ПричинаЗакрытия"	, СтруктураПараметров.ПричинаЗакрытия);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиСКД = пКомпоновщик.ПолучитьНастройки();
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
												НастройкиСКД,
												,
												,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаПереченьПолный = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаПереченьПолный);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// ПереченьДокументов.Загрузить(ТаблицаПереченьПолный);
	
	Возврат ТаблицаПереченьПолный;
	
КонецФункции

// Процедура выполняет закрытие документов планирования.
// 
// Параметры:
//  ТаблицаДокументов - ТаблицаЗначений - перечень документов.
// 	СтруктураПараметров - Структура, ОбработкаОбъект - параметры.
// 
Процедура ВыполнитьЗакрытиеДокументовПланирования(ТаблицаДокументов, СтруктураПараметров) Экспорт
	
	СписокДокументов = Новый Массив; 
	
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ПереченьДокументов", ТаблицаДокументов);
    
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	ПереченьДокументов.Организация КАК Организация,
    |	ПереченьДокументов.Документ КАК Документ,
    |	ПереченьДокументов.ПричинаЗакрытия КАК ПричинаЗакрытия,
    |	ПереченьДокументов.Закрыть КАК Закрыть
    |ПОМЕСТИТЬ ПереченьДокументов
    |ИЗ
    |	&ПереченьДокументов КАК ПереченьДокументов
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ПереченьДокументов.Организация КАК Организация,
    |	ПереченьДокументов.Документ КАК ДокументПланирования,
    |	ПереченьДокументов.ПричинаЗакрытия КАК ПричинаЗакрытия
    |ИЗ
    |	ПереченьДокументов КАК ПереченьДокументов
    |ГДЕ
    |	ПереченьДокументов.Закрыть
    |
    |СГРУППИРОВАТЬ ПО
    |	ПереченьДокументов.Организация,
    |	ПереченьДокументов.Документ,
    |	ПереченьДокументов.ПричинаЗакрытия
    |ИТОГИ ПО
    |	Организация";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат;
    КонецЕсли;
    
    ВыводитьОшибки         = СтруктураПараметров.РежимСообщений = "Все" ИЛИ СтруктураПараметров.РежимСообщений = "Ошибки";
	ВыводитьИнформацию     = СтруктураПараметров.РежимСообщений = "Все";
    ДатаДокументовЗакрытия = КонецДня(СтруктураПараметров.Период.ДатаОкончания);
    ТекущийПользователь    = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
    
    ВыборкаПоОрганизации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаПоОрганизации.Следующий() Цикл
        
        // Создадим документ "Закрытие документов планирования".
        ДокументЗакрытия = Документы.бит_ЗакрытиеЗаявок.СоздатьДокумент();
        ДокументЗакрытия.Дата        = ДатаДокументовЗакрытия;
        ДокументЗакрытия.Организация = ВыборкаПоОрганизации.Организация;
        
        ВыборкаПоДокументам = ВыборкаПоОрганизации.Выбрать();
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-02-16 (#3657)
		КоличествоДокументовПланированияЗнРДС = 0;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-02-16 (#3657)
        
        Пока ВыборкаПоДокументам.Следующий() Цикл
            
            // Добавим текущий документ планирования 
            // в табличную часть документа закрытия.
            НовСтрока = ДокументЗакрытия.ДокументыПланирования.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаПоДокументам);
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-02-16 (#3657)
			Если ТипЗнч(ВыборкаПоДокументам.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств")
				И КоличествоДокументовПланированияЗнРДС < 2 Тогда
				КоличествоДокументовПланированияЗнРДС = КоличествоДокументовПланированияЗнРДС + 1;
				Если КоличествоДокументовПланированияЗнРДС > 1 Тогда
					ДокументЗакрытия.ЦФО 			= Неопределено;
					ДокументЗакрытия.СтатьяОборотов = Неопределено;
					ДокументЗакрытия.Проект 		= Неопределено;
				Иначе
					ДокументЗакрытия.ЦФО 			= ВыборкаПоДокументам.ДокументПланирования.ЦФО;
					ДокументЗакрытия.СтатьяОборотов = ВыборкаПоДокументам.ДокументПланирования.СтатьяОборотов;
					ДокументЗакрытия.Проект 		= ВыборкаПоДокументам.ДокументПланирования.Проект;
				КонецЕсли;
			КонецЕсли;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-02-16 (#3657)
			
			Если СтруктураПараметров.ЗакрыватьЗаявкиПоПозициям Тогда
				ДобавитьЗаявкуВДокументЗакрытия(ДокументЗакрытия, ВыборкаПоДокументам);
			КонецЕсли;
			
        КонецЦикла;
        
        ДокументЗакрытия.Ответственный = ТекущийПользователь;
        
		Если мЭтоРегламентнаяОперация Тогда
			Шаблон = НСтр("ru = '===Регламентное закрытие документов ""%1""==='");
            ДокументЗакрытия.Комментарий = СтрШаблон(Шаблон, мСинонимДокументаДляЗакрытия);
        КонецЕсли;
        
        // Запишем документ закрытия.
        Попытка
            
            ДокументЗакрытия.Записать(РежимЗаписиДокумента[СтруктураПараметров.РежимЗаписи]);
            Если ВыводитьИнформацию Тогда
                ТекстСообщения = НСтр("ru='Записан документ ""%1"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ДокументЗакрытия.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументЗакрытия.Ссылка);
            КонецЕсли; 
			
			СписокДокументов.Добавить(ДокументЗакрытия.Ссылка);
			
        Исключение
            
            Если ВыводитьОшибки Тогда
				ТекстСообщения = НСтр("ru='Не удалось записать документ по причине: %1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
                ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Истина);
            КонецЕсли; 
        КонецПопытки;
    КонецЦикла; // Пока ВыборкаПоОрганизации.Следующий() Цикл.
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		ПоместитьВоВременноеХранилище(СписокДокументов, СтруктураПараметров.АдресРезультата);
	КонецЕсли; 
	
КонецПроцедуры // ВыполнитьЗакрытиеДокументовПланирования()

// Процедура настраивае обработку для выполнения регламентной операции
// и закрывает документы планирования.
// 
// Параметры:
//  ТипДокумента - Тип("ДокументСсылка." + ИмяДокумента).
// 
Процедура НастроитьОбработкуДляРегламентнойОперацииИЗакрытьДокументыПланирования(ТипДокумента) Экспорт
    
    мЭтоРегламентнаяОперация = Истина;
    
    // Заполним дерево видов документов.
    ЗаполнитьВидыДокументов(ТипДокумента);
	
	МассивВидовДокументов = ПолучитьМассивВидовДокументов(ДеревоВидыДокументов);
	
	// Инициализируем текст построителя.
	АдресСКД = ИнициализироватьКомпоновщик(КомпоновщикНастроек, МассивВидовДокументов);
	
    // Заполним значения по умолчанию.
    ПричинаЗакрытия = Справочники.бит_ПричиныЗакрытияДокументовПланированияПлатежа.Регламент;
    РежимСообщений  = "Нет";
    РежимЗаписи     = "Проведение";
    Период.ДатаОкончания = КонецДня(ТекущаяДата());
    
    // Заполним перечен документов.
	ТаблицаДокументов = ЗаполнитьПереченьДокументов(АдресСКД, КомпоновщикНастроек, ЭтотОбъект);
	
	// Установим все флаги
	Если ТаблицаДокументов.Колонки.Найти("Закрыть") = Неопределено Тогда
		ТаблицаДокументов.Колонки.Добавить("Закрыть", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ТаблицаДокументов.ЗаполнитьЗначения(Истина, "Закрыть");
	
	ПереченьДокументов.Загрузить(ТаблицаДокументов);
    
    // Выполним закрытие документов планирования.
    ВыполнитьЗакрытиеДокументовПланирования(ПереченьДокументов, ЭтотОбъект);
    
КонецПроцедуры // НастроитьОбработкуДляРегламентнойОперацииИЗакрытьДокументыПланирования()

// Функция создает структуру, хранящую настройки.
// 
// Параметры:
//   Объект
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
Функция УпаковатьНастройкиВСтруктуруМодуль(Объект) Экспорт

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Период"			, Объект.Период);
	СтруктураНастроек.Вставить("РежимСообщений"	, Объект.РежимСообщений);
	СтруктураНастроек.Вставить("РежимЗаписи"	, Объект.РежимЗаписи);
	СтруктураНастроек.Вставить("ПричинаЗакрытия", Объект.ПричинаЗакрытия);
	СтруктураНастроек.Вставить("ЗакрыватьЗаявкиПоПозициям", Объект.ЗакрыватьЗаявкиПоПозициям);
	СтруктураНастроек.Вставить("ОбновлятьДокументыПриИзмененииВидовДокументов", Объект.ОбновлятьДокументыПриИзмененииВидовДокументов);
 	  	
	СтруктураНастроек.Вставить("ПользовательскиеНастройки", Объект.КомпоновщикНастроек.ПользовательскиеНастройки);
			
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуруМодуль()

// Функция создает структуру, хранящую настройки.
// 
// Параметры:
//   Объект.
//   СтруктураНастроек - Структура.
// 
Процедура РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек) Экспорт

	СтруктураНастроек.Свойство("Период"			, Объект.Период);
	СтруктураНастроек.Свойство("РежимСообщений"	, Объект.РежимСообщений);
	СтруктураНастроек.Свойство("РежимЗаписи"	, Объект.РежимЗаписи);
	СтруктураНастроек.Свойство("ПричинаЗакрытия", Объект.ПричинаЗакрытия);
	СтруктураНастроек.Свойство("ЗакрыватьЗаявкиПоПозициям", Объект.ЗакрыватьЗаявкиПоПозициям);
	СтруктураНастроек.Свойство("ОбновлятьДокументыПриИзмененииВидовДокументов", Объект.ОбновлятьДокументыПриИзмененииВидовДокументов);
	
	// Загрузка пользовательских настроек в компоновщик.
	ПользовательскиеНастройки = СтруктураНастроек.ПользовательскиеНастройки;
	Объект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	
КонецПроцедуры // РаспоковатьНастройкиИзСтруктурыМодуль()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирует текст условия отбора по видам документов в запросе СКД.
// 
// Параметры:
//  МассивВидовДокументов - Массив.
// 
Функция СформироватьТекстОтбораПоТипамДокументов(МассивВидовДокументов, ИмяРегистра="бит_ПланируемыйРасходДенежныхСредств")
	
    Если МассивВидовДокументов.Количество() <> 0 Тогда
        
		ТекстСУсловием = "";
						  
		Для Каждого ТекВидДокумента Из МассивВидовДокументов Цикл
			
			ИмяДокумента = СтрЗаменить(ТекВидДокумента, "Документ.", "");
			НайденныйДокумент = Метаданные.Документы.Найти(ИмяДокумента);
			ДокументЯвляетсяРегистратором = НайденныйДокумент.Движения.Содержит(Метаданные.РегистрыНакопления[ИмяРегистра]);
			
			Если НЕ ДокументЯвляетсяРегистратором Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСУсловием = ТекстСУсловием + ?(ПустаяСтрока(ТекстСУсловием), "", Символы.ПС + " ИЛИ")
							 + " ДокументПланирования ССЫЛКА " + ТекВидДокумента;
		КонецЦикла;
		
		// Условие пустое, но документы есть -> для текущего регистра никакие документы не нужны.
		Если ПустаяСтрока(ТекстСУсловием) Тогда
			ТекстСУсловием = "ЛОЖЬ";
		КонецЕсли;
		
		ТекстОтбора = ТекстСУсловием;
	Иначе
		// Отбора по типам объектов нет.
		ТекстОтбора = "ЛОЖЬ";
	КонецЕсли;
	
	Возврат ТекстОтбора;
	
КонецФункции // СформироватьЗначениеПеременной_мТекущийТекстСУсловием()

// Процедура добавляет документ основания по позиции в ТЧ документа закрытия.
// 
Процедура ДобавитьЗаявкуВДокументЗакрытия(ДокументЗакрытия, ВыборкаПоДокументам)
	
	Если ТипЗнч(ВыборкаПоДокументам.ДокументПланирования) = Тип("ДокументСсылка.бит_ПлатежнаяПозиция") ИЛИ ТипЗнч(ВыборкаПоДокументам.ДокументПланирования) = Тип("ДокументСсылка.бит_РасходнаяПозиция") Тогда
		
		СтрокаПоиска = ДокументЗакрытия.ДокументыПланирования.Найти(ВыборкаПоДокументам.ДокументПланирования.ДокументОснование, "ДокументПланирования");
		
		Если СтрокаПоиска = Неопределено Тогда
			
			// Добавим текущий документ планирования 
            // в табличную часть документа закрытия.
            НовСтрока = ДокументЗакрытия.ДокументыПланирования.Добавить();
			
			НовСтрока.ДокументПланирования = ВыборкаПоДокументам.ДокументПланирования.ДокументОснование;
	        НовСтрока.ПричинаЗакрытия      = ВыборкаПоДокументам.ПричинаЗакрытия;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

мЭтоРегламентнаяОперация     = Ложь;
мСинонимДокументаДляЗакрытия = "";

#КонецОбласти

#КонецЕсли
