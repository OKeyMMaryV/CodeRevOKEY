
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	фПолноеИмяОбъекта = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтаФорма.ИмяФормы, Истина);
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ЗаполнитьВидыДокументов();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// Инициализация схемы компоновки данных
	АдресСхемыКомпоновкиДанных = ИнициализироватьКомпоновщикСервер(Объект.КомпоновщикНастроек);
	
	// Настроим отображение полей доп. аналитик в таблицах формы.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																					 ,"ПереченьДокументов"
																					 ,Неопределено
																					 ,Неопределено);
																					 
	УстановитьЗначенияПоУмолчанию();
	УстановитьОтборСформированныхДокументов(СформированныеДокументы, ДобавленныеДокументы);
	
	//ОКЕЙ Рычаков А.C. (СофтЛаб) Начало 2019-11-09 (#3524)
	Если Параметры.Свойство("ЗаявкиНаРС") Тогда
		ЗаполнитьПереченьДокументовИзПараметровОткрытия(Параметры.ЗаявкиНаРС, Параметры.ДатаНачала, Параметры.ДатаОкончания);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-02-16 (#3657)
		Если Параметры.Свойство("РежимЗаписи") Тогда
			Объект.РежимЗаписи = Параметры.РежимЗаписи;
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-02-16 (#3657)
	КонецЕсли;
	//ОКЕЙ Рычаков А.C. (СофтЛаб) Конец 2019-11-09 (#3524)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПричинаЗакрытияПриИзменении(Элемент)
	
	ПричинаУказаннаПравильно(Объект);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-02-16 (#3657)
	Если ЗначениеЗаполнено(Объект.ПричинаЗакрытия) Тогда
		
		Для Каждого СтрокаТЧ Из Объект.ПереченьДокументов Цикл
			СтрокаТЧ.ПричинаЗакрытия = Объект.ПричинаЗакрытия;
		КонецЦикла;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-02-16 (#3657)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревовидыдокументов

&НаКлиенте
Процедура ДеревоВидыДокументовВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоВидыДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные.Выгружать = 2 Тогда
		ТекущиеДанные.Выгружать = 0;
	КонецЕсли;
	
	СтрокиДерева = Объект.ДеревоВидыДокументов.ПолучитьЭлементы(); 
	
	ДеревоВидовНеПустое = СтрокиДерева.Количество() <> 0;
	
	Если Не Объект.ОбновлятьДокументыПриИзмененииВидовДокументов И ДеревоВидовНеПустое Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросПерезаполнениеПереченьДокументов",ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Перечень документов будет перезаполнен. Продолжить?'");		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
		
	Иначе	
		
		ОкончаниеДеревоВидыДокументовВыгружатьПриИзменении();
		
	КонецЕсли;	
		
КонецПроцедуры

// Процедура обработка вопроса о перезаполнении перечня документов.
// 
&НаКлиенте 
Процедура ВопросПерезаполнениеПереченьДокументов(Ответ, ДополнительныеДанные) Экспорт
	
	ТекущиеДанные = Элементы.ДеревоВидыДокументов.ТекущиеДанные;
	
	Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
		// Перечень перезаполнять не будем, значит значение флага вернем в исходное состояние.
		ТекущиеДанные.Выгружать = ?(ТекущиеДанные.Выгружать=1,0,1);
		
		Возврат;
	КонецЕсли;
	
	ОкончаниеДеревоВидыДокументовВыгружатьПриИзменении();
	
КонецПроцедуры // ВопросПерезаполнениеПереченьДокументов

// Процедура окончательные действия процедуры "ДеревоВидыДокументовВыгружатьПриИзменении".
// 
&НаКлиенте
Процедура ОкончаниеДеревоВидыДокументовВыгружатьПриИзменении()

	ТекущиеДанные = Элементы.ДеревоВидыДокументов.ТекущиеДанные;
	
	СтрокиДерева = Объект.ДеревоВидыДокументов.ПолучитьЭлементы(); 
	
	ДеревоВидовНеПустое = СтрокиДерева.Количество() <> 0;
	
	ЗначениеФлажка = ТекущиеДанные.Выгружать;
	
	ИзменитьФлажкиПотомков(ТекущиеДанные.ПолучитьЭлементы(),  ЗначениеФлажка);
	ИзменитьФлажкиРодителей(ТекущиеДанные.ПолучитьРодителя(), ТекущиеДанные.ПолучитьРодителя(), ЗначениеФлажка, ЗначениеФлажка);
	
	// Инициализируем СКД.
	АдресСхемыКомпоновкиДанных = ИнициализироватьКомпоновщикСервер(Объект.КомпоновщикНастроек, Ложь);
	
	Если Объект.ОбновлятьДокументыПриИзмененииВидовДокументов Или ДеревоВидовНеПустое Тогда
		
		Элементы.СтраницыСДокументами.ТекущаяСтраница = Элементы.СтраницаЗакрываемыеДокументы;
		ДобавленныеДокументы.Очистить();
		УстановитьОтборСформированныхДокументов(СформированныеДокументы, ДобавленныеДокументы);
		// Заполним перечень документов.
		ЗаполнитьПереченьДокументов();
	КонецЕсли;

КонецПроцедуры // ОкончаниеДеревоВидыДокументовВыгружатьПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереченьдокументов

&НаКлиенте
Процедура ПереченьДокументовПричинаЗакрытияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    ПричинаУказаннаПравильно(ТекущиеДанные);
	
КонецПроцедуры
	
#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.СтраницыСДокументами.ТекущаяСтраница = Элементы.СтраницаЗакрываемыеДокументы;

	ЗаполнитьПереченьДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	
	ВыборПериода(Объект.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСохранить(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , мКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", мКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройки",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы сохранения настроек. 
// 
&НаКлиенте
Процедура СохранитьНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		РезНастройка = Результат;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

&НаКлиенте
Процедура НастройкиВосстановить(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ТипНастройки"		 , мКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", мКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроек",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек

&НаКлиенте
Процедура УстановитьВсеВидыДокументов(Команда)
	
	ОбработатьФлагиВидовДокументов(Объект.ДеревоВидыДокументов.ПолучитьЭлементы(), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеВидыДокументов(Команда)
	
	ОбработатьФлагиВидовДокументов(Объект.ДеревоВидыДокументов.ПолучитьЭлементы(), 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеДокументы(Команда)
	
	ОбработатьФлагиДокументов(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеДокументы(Команда)
	
	ОбработатьФлагиДокументов(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗакрытие(Команда)
	
	Если Объект.ПереченьДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Закрыть", Истина);
	
	ВыбранныеСтроки = Объект.ПереченьДокументов.НайтиСтроки(СтруктураОтбора);
	
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не выбраны документы для закрытия.'");
		ПоказатьПредупреждение(,ТекстСообщения, 30);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыполнитьЗакрытие",ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Будет выполнено закрытие документов планирования. Продолжить?'");		
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , Нстр("ru = 'Закрытие документов'"));
	
КонецПроцедуры

// Процедура выполнить закрытие. 
// 
&НаКлиенте 
Процедура ЗавершениеВыполнитьЗакрытие(Ответ, ДополнительныеДанные) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	ТекстСообщения = НСтр("ru='Выполняется создание документов ""Закрытие документов планирования""...'");
	//бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	ПоказатьОповещениеПользователя(Нстр("ru = 'Создание документов'"),,ТекстСообщения); 
	
	// Выполним закрытие документов планирования.
	ВыполнитьЗакрытиеДокументовПланирования();
	ЗаполнитьПереченьДокументов();
	Элементы.СтраницыСДокументами.ТекущаяСтраница = Элементы.СтраницаСформированныеДокументы;
	
КонецПроцедуры // ЗавершениеВыполнитьЗакрытие

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	СтруктураНастроек = УпаковатьНастройкиВСтруктуру();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастроек"	  , СтруктураНастроек);
    ПараметрыФормы.Вставить("ДеревоВидыДокументов", Объект.ДеревоВидыДокументов);
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаОткрытияНастроек",ЭтаФорма);
	ОткрытьФорму("Обработка.бит_ЗакрытиеДокументовПланирования.Форма.ФормаНастройка", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура обработка открытия настроек формы.
// 
&НаКлиенте 
Процедура ОбработкаОткрытияНастроек(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
	
		УстановитьДопНастройки(РезультатВыбора);
	
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОткрытияНастроек

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура открывает форму выбора периода.
// 
// Параметры:
//  Период  - Стандартный период
// 
&НаКлиенте
Процедура ВыборПериода(Период)

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Период;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВыборПериода",ЭтаФорма);
	Диалог.Показать(Оповещение);
	 
КонецПроцедуры // ВыборПериода()

// Процедура выбора периода 
// 
&НаКлиенте 
Процедура ПоказатьВыборПериода(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
	
		Объект.Период = РезультатВыбора;
	
	КонецЕсли; 
	
КонецПроцедуры // ПоказатьВыборПериода

// Процедура устанавливает значение флага Создать для всех строк в таблице ПереченьДокументов.
// 
// Параметры:
// 	ЗначениеФлага - число - устанавливаемое значение.
// 
&НаКлиенте
Процедура ОбработатьФлагиДокументов(ЗначениеФлага)
	
	Для Каждого ТекущаяСтрока Из Объект.ПереченьДокументов Цикл
		
		Если ЗначениеФлага = 0 Тогда
			ТекущаяСтрока.Закрыть = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			ТекущаяСтрока.Закрыть = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			ТекущаяСтрока.Закрыть = НЕ ТекущаяСтрока.Закрыть;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает значение флага Создать для всех строк в таблице ДеревоВидовДокументов.
// 
// Параметры:
// 	ЗначениеФлага - число - устанавливаемое значение.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьФлагиВидовДокументов(СтрокиДерева, ЗначениеФлага)
	
	Для Каждого ТекущаяСтрока Из СтрокиДерева Цикл
		
		Если ЗначениеФлага = 0 Тогда
			ТекущаяСтрока.Выгружать = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			ТекущаяСтрока.Выгружать = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			ТекущаяСтрока.Выгружать = НЕ ТекущаяСтрока.Выгружать;
		КонецЕсли; 
		
		ОбработатьФлагиВидовДокументов(ТекущаяСтрока.ПолучитьЭлементы(), ЗначениеФлага);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура настраивает флаги для подчиненных строк. Вызывается рекурсивно.
// 
// Параметры:
// 	ЭлементыДерева - ДанныеФормыКоллекцияЭлементовДерева - подчиненные строки.
// 	ЗначениеФлажка - число - значение для установки.
// 
&НаКлиенте
Процедура ИзменитьФлажкиПотомков(ЭлементыДерева, ЗначениеФлажка)
	
	Для Каждого ТекущаяВетка Из ЭлементыДерева Цикл
		ТекущаяВетка.Выгружать = ЗначениеФлажка;
		
		ИзменитьФлажкиПотомков(ТекущаяВетка.ПолучитьЭлементы(), ЗначениеФлажка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура настраивает флаги для родительских строк. Вызывается рекурсивно.
// 
// Параметры:
// 	
&НаКлиенте
Процедура ИзменитьФлажкиРодителей(ВеткаРодитель, Ветка, ЗначениеФлажка, СостояниеРодителя)
	
	Если Ветка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Ветка.ПолучитьЭлементы();
	
	Для Каждого ТекущаяВетка Из ЭлементыРодителя Цикл
		Если НЕ ТекущаяВетка.Выгружать = ЗначениеФлажка Тогда
			СостояниеРодителя = 2;
			
			Прервать;
		КонецЕсли;
		
		ИзменитьФлажкиРодителей(ВеткаРодитель, ТекущаяВетка, ЗначениеФлажка, СостояниеРодителя);
		
		Если СостояниеРодителя = 2 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВеткаРодитель = Ветка Тогда
		ВеткаРодитель.Выгружать = СостояниеРодителя;
		
		ИзменитьФлажкиРодителей(ВеткаРодитель.ПолучитьРодителя(), ВеткаРодитель.ПолучитьРодителя(), ЗначениеФлажка, ЗначениеФлажка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаУказаннаПравильно(Контейнер)
	
	Регламент = ПредопределенноеЗначение("Справочник.бит_ПричиныЗакрытияДокументовПланированияПлатежа.Регламент");
	Если Контейнер.ПричинаЗакрытия = Регламент Тогда
        Контейнер.ПричинаЗакрытия = Неопределено;
		
		ТекстСообщения = НСтр("ru='Причина закрытия ""%1"" устанавливается только регламентной операцией!'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Регламент);
		ПоказатьПредупреждение(,ТекстСообщения,,Нстр("ru = 'Закрытие документов'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСформированныхДокументов(Список, ЗначениеОтбора)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
			"Ссылка",ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
КонецПроцедуры 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	мКэшЗначений = Новый Структура;
	
	мКэшЗначений.Вставить("ТипНастройки"	   , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	мКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_ЗакрытиеДокументовПланирования");
	
КонецПроцедуры

// Функция обращается к процедуре модуля объекта для инициализации СКД и пользовательских настроек.
// 
// Параметры:
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - пользовательские настройки.
// 
// Возвращаемое значение:
// 	АдресСКД - строка - адрес СКД во временном хранилище.
// 
&НаСервере
Функция ИнициализироватьКомпоновщикСервер(пКомпоновщик, ИнициализироватьНастройки=Истина)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ДеревоЗначенийВидыДокументов = ДанныеФормыВЗначение(Объект.ДеревоВидыДокументов, Тип("ДеревоЗначений"));
	
	МассивВидовДокументов = ОбработкаОбъект.ПолучитьМассивВидовДокументов(ДеревоЗначенийВидыДокументов);
	
	АдресСКД = ОбработкаОбъект.ИнициализироватьКомпоновщик(пКомпоновщик, МассивВидовДокументов, ИнициализироватьНастройки);
	
	Возврат АдресСКД;
	     
КонецФункции

&НаСервере
Процедура ЗаполнитьПереченьДокументов()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период"		  , Объект.Период);
	СтруктураПараметров.Вставить("ПричинаЗакрытия", Объект.ПричинаЗакрытия);
	
	ТаблицаДокументов = ОбработкаОбъект.ЗаполнитьПереченьДокументов(АдресСхемыКомпоновкиДанных, Объект.КомпоновщикНастроек, СтруктураПараметров);
	
	Объект.ПереченьДокументов.Загрузить(ТаблицаДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗакрытиеДокументовПланирования()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимСообщений"			, Объект.РежимСообщений);
	СтруктураПараметров.Вставить("Период"					, Объект.Период);
	СтруктураПараметров.Вставить("РежимЗаписи"				, Объект.РежимЗаписи);
	СтруктураПараметров.Вставить("ЗакрыватьЗаявкиПоПозициям", Объект.ЗакрыватьЗаявкиПоПозициям);
	СтруктураПараметров.Вставить("АдресРезультата",           АдресРезультата) ;
	
	ОбработкаОбъект.ВыполнитьЗакрытиеДокументовПланирования(Объект.ПереченьДокументов.Выгрузить(), СтруктураПараметров);
	
	Результат 		= ПолучитьИзВременногоХранилища(АдресРезультата);
	Для каждого Элемент Из Результат Цикл
		ДобавленныеДокументы.Добавить(Элемент);
	КонецЦикла; 
	УстановитьОтборСформированныхДокументов(СформированныеДокументы, ДобавленныеДокументы);

КонецПроцедуры

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураНастроек = ОбработкаОбъект.УпаковатьНастройкиВСтруктуруМодуль(Объект);
 			
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") 
		И СтруктураНастроек.Свойство("ПользовательскиеНастройки") Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек);
		
	Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Настройки не восстановлены.");
	КонецЕсли;  		
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(мКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	ПрименитьНастройки(НастройкаПоУмолчанию);
	
	Если Объект.РежимСообщений = "" И Объект.РежимЗаписи = "" Тогда
		
		// Если настройки нет - заполним значения по умолчанию.
		Объект.РежимСообщений = "Все";
		Объект.РежимЗаписи    = "Запись";
	 				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Период.ДатаНачала)
		И НЕ ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
		
		ПериодДень = Новый СтандартныйПериод;
		ПериодДень.Вариант = ВариантСтандартногоПериода.Сегодня;
		
		Объект.Период = ПериодДень;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-30 (#4102)
	Объект.ЗакрыватьЗаявкиПоПозициям = Истина;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-30 (#4102)
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура устанавливает настройки указанные в форме настройки.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
&НаСервере
Процедура УстановитьДопНастройки(СтруктураНастроек)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек);

КонецПроцедуры // УстановитьДопНастройки()

//ОКЕЙ Рычаков А.C. (СофтЛаб) Начало 2019-11-09 (#3524)
&НаСервере
Процедура ЗаполнитьПереченьДокументовИзПараметровОткрытия(ЗаявкиНаРС, ДатаНачала, ДатаОкончания)
		
	ТЗ = Новый таблицазначений;
    ТЗ.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств"));
    Для Каждого мЗаявкаНаРС из ЗаявкиНаРС Цикл
    	Стр = ТЗ.добавить();
        Стр.Ссылка = мЗаявкаНаРС.Ссылка;
	КонецЦикла; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ_Документы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Документов
		|ИЗ
		|	&ТЗ_Документов КАК ТЗ_Документы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Документов.Ссылка КАК Документ,
		|	ВТ_Документов.Ссылка.Организация КАК Организация,
		|	СтатусыОбъектов.Статус КАК Статус,
		|	ВТ_Документов.Ссылка.Номер КАК Номер,
		|	ВТ_Документов.Ссылка.Дата КАК Дата,
		|	ВТ_Документов.Ссылка.Контрагент КАК Контрагент,
		|	ВТ_Документов.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВТ_Документов.Ссылка.ЦФО КАК ЦФО,
		|	ВТ_Документов.Ссылка.Проект КАК Проект,
		|	ВТ_Документов.Ссылка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВТ_Документов.Ссылка.Аналитика_1 КАК Аналитика_1,
		|	ВТ_Документов.Ссылка.Аналитика_2 КАК Аналитика_2,
		|	ВТ_Документов.Ссылка.Аналитика_3 КАК Аналитика_3,
		|	ВТ_Документов.Ссылка.Аналитика_4 КАК Аналитика_4,
		|	ВТ_Документов.Ссылка.Аналитика_5 КАК Аналитика_5,
		|	ВТ_Документов.Ссылка.Аналитика_6 КАК Аналитика_6,
		|	ВТ_Документов.Ссылка.Аналитика_7 КАК Аналитика_7,
		|	ВТ_Документов.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ВТ_Документов.Ссылка.СуммаДокумента КАК СуммаОстаток,
		|	ВТ_Документов.Ссылка.ВалютаДокумента КАК ВалютаДокумента
		|ИЗ
		|	ВТ_Документов КАК ВТ_Документов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО ВТ_Документов.Ссылка = СтатусыОбъектов.Объект
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Документов.Ссылка
		|";
	
	Запрос.УстановитьПараметр("ТЗ_Документов", ТЗ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.ПереченьДокументов.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры	
//ОКЕЙ Рычаков А.C. (СофтЛаб) Конец 2019-11-09 (#3524)

#КонецОбласти