
#Область ОписаниеПеременных	

&НаКлиенте
Перем мМассивИсточники; // Хранит массив источников трансляции.

&НаКлиенте
Перем мМассивПриемники; // Хранит массив приемнико трансляции.

&НаКлиенте
Перем мТекущаяАналитика; // Хранит значение типа текущей аналитики.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_ГрупповоеРедактированиеДополнительныхАналитик;
	
	Если фОтказ Тогда	
		Возврат;    	
	КонецЕсли; 
    
    фНастройкиИзмерений = Новый Структура;
    фНастройкиИзмерений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фНастройкиИзмерений.Вставить("НастройкиАналитик" , бит_МеханизмДопИзмерений.ПолучитьНастройкиДополнительныхАналитик());

	фИспользоватьСтатьиДДС = ?(Метаданные.Константы.Найти("ИспользоватьСтатьиДвиженияДенежныхСредств") = Неопределено
								, Истина, Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Получить());
		
	Если Параметры.Свойство("МассивДокументов") Тогда
		
		// Запонение переданного перечня документов
		
		// Значения доп параметров
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить("Организация");
		ИменаПолей.Добавить("Контрагент");
		ИменаПолей.Добавить("ДоговорКонтрагента");
		ИменаПолей.Добавить("ВидОперации");
		ИменаПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивДокументов", Параметры.МассивДокументов);
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_ДополнительныеПараметрыОбъектов.Объект,
		               |	бит_ДополнительныеПараметрыОбъектов.ЗапретитьПерезаполнениеАналитик
		               |ИЗ
		               |	РегистрСведений.бит_ДополнительныеПараметрыОбъектов КАК бит_ДополнительныеПараметрыОбъектов
		               |ГДЕ
		               |	бит_ДополнительныеПараметрыОбъектов.Объект В(&МассивДокументов)";
					   
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		ДопПараметры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл			
			ДопПараметры.Вставить(Выборка.Объект, Выборка.ЗапретитьПерезаполнениеАналитик);			
		КонецЦикла; 
		
		// Заполнение табличной части документы
		Для каждого ТекДок Из Параметры.МассивДокументов Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекДок) Тогда			
				Продолжить;			
			КонецЕсли; 
			
			НоваяСтрока = Объект.Документы.Добавить();
			НоваяСтрока.Документ = ТекДок;
			НоваяСтрока.Дата     = ТекДок.Дата;
			
			МетаОбъект = ТекДок.Метаданные();
			НоваяСтрока.ИмяОбъекта = МетаОбъект.Имя;
			
			Для каждого Имя Из ИменаПолей Цикл
				
				Если бит_РаботаСМетаданными.ЕстьРеквизит(Имя, МетаОбъект) Тогда					
					НоваяСтрока[Имя] = ТекДок[Имя];					
				КонецЕсли; 
				
			КонецЦикла; 
			
			НоваяСтрока.ЗапретитьПерезаполнениеАналитик = ?(ТипЗнч(ДопПараметры[Выборка.Объект]) = Тип("Булево"), ДопПараметры[Выборка.Объект], Ложь);
			
		КонецЦикла;  // Параметры.МассивДокументов
		
		Если Параметры.Свойство("Источник") Тогда			
			НоваяСтрока = Объект.Источники.Добавить();
			НоваяСтрока.ОбъектСистемы = Параметры.Источник;			
		КонецЕсли; 
		
		Если Параметры.Свойство("Приемник") Тогда 			
			НоваяСтрока = Объект.Приемники.Добавить();
			НоваяСтрока.ОбъектСистемы = Параметры.Приемник;			
		КонецЕсли; 
		
		Если Объект.Документы.Количество() > 0 Тогда			
			Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОбработкаДокументов;			
		КонецЕсли; 
		
	КонецЕсли; 	
	
	УстановитьУсловноеОформление();
	УстановитьТекущуюСтраницуПанелиДополнительныхАналитик(Ложь);
	
	ВидимостьФлагаЗапретитьПерезаполнениеАналитик = бит_МеханизмДопИзмерений.ВключенРежимЗаполнятьВсегда();
	Элементы.ТП_ЗапретитьПерезаполнениеАналитик.Видимость       = ВидимостьФлагаЗапретитьПерезаполнениеАналитик;
	Элементы.ОВ_ЗапретитьПерезаполнениеАналитик.Видимость       = ВидимостьФлагаЗапретитьПерезаполнениеАналитик;
    Элементы.МВ_ПереключательЗПА.Видимость                      = ВидимостьФлагаЗапретитьПерезаполнениеАналитик;
	
	// Блокируем 
	Элементы.ДокументыВыборЗаписать.Видимость = Ложь;
    Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
        ПриСозданииНаСервереЕРП();
    Иначе
        ПриСозданииНаСервереБП();
    КонецЕсли;
    																						  	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереЕРП()
	
	// ++ ЕРП 
	Совместимо = Истина;
	// -- ЕРП 

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереБП()
	
	// ++ БП 	
	// Элементы "Редактировать фактические данные".
	Если Метаданные.ФункциональныеОпции.Найти("бит_ИспользоватьРучнуюКорректировкуФакта") = Неопределено Тогда
		фВидимостьРФД = Ложь;
	Иначе	
		фВидимостьРФД = ПолучитьФункциональнуюОпцию("бит_ИспользоватьРучнуюКорректировкуФакта")
		И (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("бит_ФинансистПолныеПрава"));
	КонецЕсли;    
	Элементы.ТП_РедактироватьФактическиеДанные.Видимость = фВидимостьРФД;
	Элементы.ОВ_РедактироватьФактическиеДанные.Видимость = фВидимостьРФД;
	Элементы.МВ_ПереключательРФД.Видимость               = фВидимостьРФД;
	Элементы.ДокументыПоказатьРФД.Видимость              = фВидимостьРФД;
	// -- БП 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	ПустойМассив = Новый Массив;
	УстановитьЗначенияПоУмолчанию(мМассивИсточники, мМассивПриемники);
	
	ИзменитьПризнакМодифицированностиАналитик(Ложь);
	
	ИзменитьЗаголовокКнопкиЗаписи();
	
	мНеОбрабатыватьАктивизациюСтроки = Ложь;

	Если Объект.Источники.Количество() > 0 Тогда
		
		мМассивИсточники = Новый Массив;
		Для каждого СтрокаТаблицы Из Объект.Источники Цикл		
			мМассивИсточники.Добавить(СтрокаТаблицы.ОбъектСистемы);		
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если Объект.Приемники.Количество() > 0 Тогда
		
		мМассивПриемники = Новый Массив;
		Для каждого СтрокаТаблицы Из Объект.Приемники Цикл 		
			мМассивПриемники.Добавить(СтрокаТаблицы.ОбъектСистемы);		
		КонецЦикла; 
	
	КонецЕсли; 
	
	УправлениеЭлементамиФормы(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" Тогда
		
		НайденныеДокументы = Объект.Документы.НайтиСтроки(Новый Структура("Документ", Источник));
		Для каждого СтрДок Из НайденныеДокументы Цикл
			УстановитьКартинкуПоДокументу(СтрДок.ПолучитьИдентификатор(), СтрДок.Документ);
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодДатаНачалаПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Объект.Период.ДатаНачала, 
																				Объект.Период.ДатаОкончания);
		
КонецПроцедуры // ПериодДатаНачалаПриИзменении()

&НаКлиенте
Процедура ПериодДатаОкончанияПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Объект.Период.ДатаНачала, 
																				 Объект.Период.ДатаОкончания);
		
КонецПроцедуры // ПериодДатаОкончанияПриИзменении()

&НаКлиенте
Процедура ЗапретитьПерезаполнениеАналитикПриИзменении(Элемент)
	
	ИзменитьПризнакМодифицированностиАналитик(Истина, Истина);
	
КонецПроцедуры // ЗапретитьПерезаполнениеАналитикПриИзменении()

&НаКлиенте
Процедура ОВ_РедактироватьФактическиеДанныеПриИзменении(Элемент)
	
	// Для совместимости с БП, КОРП.
    ИзменитьПризнакМодифицированностиАналитик(Истина, Истина);
    
КонецПроцедуры // ОВ_РедактироватьФактическиеДанныеПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТипыДокументов

&НаКлиенте
Процедура СписокТиповОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ИзменитьСписокТиповДокументов(Ложь);	
	
КонецПроцедуры // СписокТиповОбъектовПередНачаломДобавления()

&НаКлиенте
Процедура СписокТиповОбъектовПослеУдаления(Элемент)
	
	Если СписокТиповОбъектов.Количество() = 0 Тогда
		Объект.Документы.Очистить();
		Объект.Аналитики.Очистить();
	КонецЕсли; 
	
	ИнициализироватьСКД();
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументы

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущийДокумент = Элементы.Документы.ТекущиеДанные.Документ;
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
	 	ПоказатьЗначение(,ТекущийДокумент);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПриАктивизацииСтроки(Элемент)
	
    Если Объект.Документы.Количество() = 0
        ИЛИ СписокВыбранных.Количество() > 0
		ИЛИ Элементы.Документы.ТекущиеДанные = Неопределено
		ИЛИ Элементы.Документы.ТекущиеДанные.Документ = фТекущийОбъектСсылка Тогда
		Возврат;
    КонецЕсли;      
	
	// Используем обработчик ожидания, т.к. вызовы сервера в данном обработчике приводят к зацикливанию.
	ОтключитьОбработчикОжидания("ОжиданиеАктивизацииСтроки");
	ПодключитьОбработчикОжидания("ОжиданиеАктивизацииСтроки", 0.1, Истина);
		
КонецПроцедуры // ДокументыПриАктивизацииСтроки()

&НаКлиенте
Процедура ДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры // ДокументыПередНачаломДобавления()

&НаКлиенте
Процедура ДокументыПослеУдаления(Элемент)
	
	Объект.Аналитики.Очистить();
	
	фТекущийОбъектСсылка = Неопределено;
	
КонецПроцедуры // ДокументыПослеУдаления()

&НаКлиенте
Процедура ДокументыВыбратьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Документы.ТекущиеДанные;
	ОбъектСсылка  = ТекущиеДанные.Документ;
	
	МассивВыбранныхСтарых = СписокВыбранных.ВыгрузитьЗначения();		
	
	Если ТекущиеДанные.Выбрать Тогда
		СписокВыбранных.Добавить(ОбъектСсылка, ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		НайденныйЭлемент = СписокВыбранных.НайтиПоЗначению(ОбъектСсылка);
		Если НайденныйЭлемент <> Неопределено Тогда
			СписокВыбранных.Удалить(НайденныйЭлемент);		
		КонецЕсли;
	КонецЕсли;  	
	
	ОбработкаИзмененияСпискаВыбранных(МассивВыбранныхСтарых);
			
КонецПроцедуры // ДокументыВыбратьПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАналитики

&НаКлиенте
Процедура АналитикиПриИзменении(Элемент)
	
	ИзменитьПризнакМодифицированностиАналитик(Истина, Истина);
	фТекущийЗапретитьПерезаполнениеАналитик = Истина;
    ПереключательЗПА = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.Документы.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Ошибка добавления аналитики! Не выбран документ.'"),,,,Отказ); 
	Иначе
		Если Копирование Тогда
			Отказ = Истина;
			НоваяСтрока = Объект.Аналитики.Добавить();
			НоваяСтрока.ЗначениеАналитики = Элемент.ТекущиеДанные.ЗначениеАналитики;		
		КонецЕсли;
		
		ИзменитьПризнакМодифицированностиАналитик(Истина, Истина);
		фТекущийЗапретитьПерезаполнениеАналитик = Истина;
	КонецЕсли; 
	
КонецПроцедуры // АналитикиПередНачаломДобавления()

&НаКлиенте
Процедура АналитикиПослеУдаления(Элемент)
	
	ИзменитьПризнакМодифицированностиАналитик(Истина, Истина);
	фТекущийЗапретитьПерезаполнениеАналитик = Истина;
	
	УстановитьВидимостьДоступностьАналитик();
	
КонецПроцедуры // АналитикиПослеУдаления()

&НаКлиенте
Процедура АналитикиАналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные; 		
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	мТекущаяАналитика = ТекущиеДанные.Аналитика;
	
КонецПроцедуры // АналитикиАналитикаНачалоВыбора()

&НаКлиенте
Процедура АналитикиАналитикаПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
	МассивАналитик = Объект.Аналитики.НайтиСтроки(Новый Структура("Аналитика", ТекущиеДанные.Аналитика));	
	Если МассивАналитик.Количество() > 1 Тогда
		
		СообщитьОбОтказе(ТекущиеДанные.Аналитика);				
		ТекущиеДанные.Аналитика = мТекущаяАналитика;
		
	Иначе
		
		ТекущиеДанные.ИмяАналитики = ПолучитьИмяАналитики(ТекущиеДанные.Аналитика);
		
	КонецЕсли;
	
	ИзменитьПризнакМодифицированностиАналитик(Истина, Истина);
	фТекущийЗапретитьПерезаполнениеАналитик = Истина;
    ПереключательЗПА = 1;

КонецПроцедуры // АналитикиАналитикаПриИзменении()

&НаКлиенте
Процедура НачалоВыбораЗначенияАналитикиШапки(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;       	
	
	Если ТипЗнч(ТекущиеДанные.ЗначениеАналитики) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	
		МассивСтрок = Объект.Аналитики.НайтиСтроки(Новый Структура("Аналитика", ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.Контрагент")));	
		Если МассивСтрок.Количество() > 0 Тогда
		
			Контрагент = МассивСтрок[0].ЗначениеАналитики;			
			Если ЗначениеЗаполнено(Контрагент) Тогда
			  	СтандартнаяОбработка = Ложь;			
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Контрагент));
				ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;  			
			
		КонецЕсли; 
		
	// ++БП
	ИначеЕсли ТипЗнч(ТекущиеДанные.ЗначениеАналитики) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
	
		Организация = Элементы.Документы.ТекущиеДанные.Организация; 		
		Если ЗначениеЗаполнено(Организация) Тогда
			СтандартнаяОбработка = Ложь;		
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Организация));
			ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 		
		КонецЕсли;  			
	// --БП	
	Иначе
		
		ИмяЭлемента  = "ЗначениеАналитики";		
		ТекНастройка = фНастройкиИзмерений.НастройкиАналитик[ТекущиеДанные.ИмяАналитики];
		Если ТекНастройка = Неопределено Тогда 			
			СтандартнаяОбработка = Ложь;   			
		Иначе 					
			СтрНастройки = Новый Структура(ИмяЭлемента, ТекНастройка); 				
			бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
																  , Элемент
																  , ТекущиеДанные
																  , ИмяЭлемента
																  , СтандартнаяОбработка
																  , СтрНастройки); 			
		КонецЕсли;
					
	КонецЕсли;
		
КонецПроцедуры // АналитикиЗначениеНачалоВыбора()

&НаКлиенте
Процедура АналитикиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
    НачалоВыбораЗначенияАналитикиШапки(Элемент, ДанныеВыбора, СтандартнаяОбработка);
		
КонецПроцедуры // АналитикиЗначениеНачалоВыбора()

&НаКлиенте
Процедура АналитикиЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    НачалоВыбораЗначенияАналитикиШапки(Элемент, ДанныеВыбора, СтандартнаяОбработка);
		
КонецПроцедуры // АналитикиЗначениеАвтоПодбор()

&НаКлиенте
Процедура АналитикиЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;		
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗначениеАналитики = ТекущиеДанные.ЗначениеАналитики;	
	
	Если ЗначениеЗаполнено(ТекЗначениеАналитики) Тогда
		
		Если бит_МеханизмДопИзмеренийКлиент.ЭтотДокументОбОплатеБит(ТекЗначениеАналитики) Тогда
			
			ЗаполнениеДополнительныхАналитикПоДокументуБит(фТекущийОбъектСсылка, ТекЗначениеАналитики);
			
		КонецЕсли;			
		
	КонецЕсли;	

	ИзменитьПризнакМодифицированностиАналитик(Истина, Истина);
	фТекущийЗапретитьПерезаполнениеАналитик = Истина;
    ПереключательЗПА = 1;
	
КонецПроцедуры // АналитикиЗначениеПриИзменении()

&НаКлиенте
Процедура АналитикиЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Новый Структура;
	Контейнер.Вставить(ТекущиеДанные.ИмяАналитики, ТекущиеДанные.ЗначениеАналитики);	

	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			, Контейнер
																		   	, ТекущиеДанные.ИмяАналитики
																		   	, СтандартнаяОбработка
																		   	, фНастройкиИзмерений.НастройкиАналитик);
																		
	ТекущиеДанные.ЗначениеАналитики = Контейнер[ТекущиеДанные.ИмяАналитики];														   
		
	Если бит_МеханизмДопИзмеренийКлиент.ЭтотДокументОбОплатеБит(ТекущиеДанные.ЗначениеАналитики) Тогда
		УстановитьВидимостьДоступностьАналитик();
	КонецЕсли;

	ИзменитьПризнакМодифицированностиАналитик(Истина, Истина);
	фТекущийЗапретитьПерезаполнениеАналитик = Истина;

КонецПроцедуры // АналитикиЗначениеОчистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройки(Команда)
	
	ПоказатьНастройки();
	
КонецПроцедуры

// Процедура окончание процедуры "Настройки".
// 
&НаКлиенте 
Процедура НастройкиОкончание(СтруктураНастроек, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Заполним значения реквизитов формы документа.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек, 
			"РежимСообщений, РежимПредупреждений, РежимЗаписи, РежимЗаписиАналитик, ВестиПротоколТрансляции
			|, ОтображатьПунктРассчитатьПартииМПЗ, ВидыДополнительныхАналитикШапки, СписокКолонокТабДок");
		мМассивИсточники 			= СтруктураНастроек.МассивИсточники;
		мМассивПриемники 			= СтруктураНастроек.МассивПриемники;
		Объект.МаксимальныйРазмерПакета = СтруктураНастроек.МаксимальныйРазмерПакета;
					
	КонецЕсли;  
	
	ИзменитьЗаголовокКнопкиЗаписи();
	УстановитьВидимостьДоступностьЭлементовПодсистемыТрансляции();
    	
КонецПроцедуры // НастройкиОкончание()

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Объект);
	
КонецПроцедуры // КомандаНастроитьПериод()

&НаКлиенте
Процедура ПерейтиКОбработкеДокументов(Команда)
	
    ОчиститьСообщения();
	ОбновитьТаблицуДокументов(); 
	
	Если Объект.Документы.Количество() <> 0 Тогда
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОбработкаДокументов;
	КонецЕсли; 	
	
КонецПроцедуры // ПерейтиКОбработкеДокументов

&НаКлиенте
Процедура ОбновитьДокументы(Команда)
    
    ОчиститьСообщения();
	ОбновитьТаблицуДокументов(); 
	
КонецПроцедуры // ОбновитьДокументы()

&НаКлиенте
Процедура ОбновитьВсеАналитики(Команда)
	
	Если СписокВыбранных.Количество() > 1 Тогда		
		ПерезаполнитьГрупповыеАналитики(); 		
	Иначе                               		
		ОбновитьТаблицыАналитик(фТекущийОбъектСсылка); 				
	КонецЕсли;
	
	ИзменитьПризнакМодифицированностиАналитик(Ложь, Истина);
		 	
КонецПроцедуры // ОбновитьВсеАналитики()

&НаКлиенте
Процедура ТипыПодбор(Команда)
	
	ИзменитьСписокТиповДокументов(Истина);
	
КонецПроцедуры // ТипыПодбор()

&НаКлиенте
Процедура ТипыДобавить(Команда)
	
	ИзменитьСписокТиповДокументов(Ложь);;
	
КонецПроцедуры // ТипыДобавить()


&НаКлиенте
Процедура ДокументыСнятьВсе(Команда)
	
	МассивВыбранныхСтарых = Новый Массив(); 
	ОбработатьФлаги(0, "Документы");	
	СписокВыбранных.Очистить();	
	
	ОбработкаИзмененияСпискаВыбранных(МассивВыбранныхСтарых);
	
КонецПроцедуры // ДокументыСнятьВсе()

&НаКлиенте
Процедура ДокументыУстановитьВсе(Команда)
	
	МассивВыбранныхСтарых = СписокВыбранных.ВыгрузитьЗначения();
	
	ОбработатьФлаги(1, "Документы"); 	
	ЗаполнитьСписокВыбранных();	
		
	ОбработкаИзмененияСпискаВыбранных(МассивВыбранныхСтарых);

КонецПроцедуры // ДокументыУстановитьВсе()

&НаКлиенте
Процедура ДокументыИнвертировать(Команда)
	
	МассивВыбранныхСтарых = СписокВыбранных.ВыгрузитьЗначения();
	
	ОбработатьФлаги(2, "Документы");	
	ЗаполнитьСписокВыбранных();
		
	ОбработкаИзмененияСпискаВыбранных(МассивВыбранныхСтарых);
	
КонецПроцедуры // ДокументыИнвертировать()   

&НаКлиенте
Процедура ДтКт(Команда)
	
	ТекущиеДанные = Элементы.Документы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ТекДокументСсылка = ТекущиеДанные.Документ;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументСсылка"	   , ТекДокументСсылка);
	ПараметрыФормы.Вставить("ОткрытиеИзФормыСписка", Истина);
	
	ОткрытьФорму("Обработка.бит_РезультатПроведения.Форма", ПараметрыФормы, ТекДокументСсылка, , );
					
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюЗаполнить(Команда)
	
	ЗаполнитьДополнительныеАналитики(Команда.Имя, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчаниюДобавить(Команда)
	
	ЗаполнитьДополнительныеАналитики(Команда.Имя, Истина, Ложь);
	
КонецПроцедуры // ПоУмолчаниюДобавить()

&НаКлиенте
Процедура ПоУмолчаниюОбновить(Команда)
	
	ЗаполнитьДополнительныеАналитики(Команда.Имя, Истина, Ложь);
	
КонецПроцедуры // ПоУмолчаниюОбновить()

&НаКлиенте
Процедура ЗаполнитьВсеАналитики(Команда)
		
	ЗаполнитьДополнительныеАналитики(Команда.Имя, Истина, СписокВыбранных.Количество() = 0);
	
КонецПроцедуры // ЗаполнитьВсеАналитики()  
 
&НаКлиенте
Процедура ДействиеЗаписатьАналитики(Команда)
	
	ЗаписатьИзменения(РежимЗаписи);
	
КонецПроцедуры // ДействиеЗаписатьАналитики()

&НаКлиенте
Процедура ВыборЗаписать(Команда)
	
	ЗаписатьИзменения("ЗаписьАналитик");
	
КонецПроцедуры // ВыборЗаписать()

&НаКлиенте
Процедура ВыборПровести(Команда)
	
	ЗаписатьИзменения("ПроведениеДокумента");

КонецПроцедуры // ВыборПровести()

&НаКлиенте
Процедура ВыборВыполнитьПроведениеПоБит(Команда)
	
	ЗаписатьИзменения("ПроводитьПоРегистрамБИТ");
	
КонецПроцедуры // ВыборВыполнитьПроведениеПоБит()

&НаКлиенте
Процедура ВыборТрансляциюВыполнить(Команда)
	
	ЗаписатьИзменения("Трансляция");

КонецПроцедуры // ВыборТрансляциюВыполнить()

&НаКлиенте
Процедура ВыборТрансляциюОтменить(Команда)
	
	Если ТипЗнч(мМассивПриемники) = Тип("Массив") И мМассивПриемники.Количество() > 0 Тогда
		
		ТекстСообщения =  НСтр("ru = 'По выбранным документам будут отменены движения в регистрах: %1%. Продолжить?'");
		
		СтрРегистры = "";
		Для каждого ТекРегистр Из мМассивПриемники Цикл
			
			СтрРегистры = СтрРегистры + ?(ПустаяСтрока(СтрРегистры), "", ","+Символы.ПС)+ТекРегистр; 
			
		КонецЦикла; 
		
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрРегистры);
		
		Оповещение = Новый ОписаниеОповещения("ВопросОтменитьТрансляциюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
		
	Иначе	
		
		Оповещение = Новый ОписаниеОповещения("ВопросОтменитьТрансляциюПоОшибкеЗавершение", ЭтотОбъект); 
		СписокДействий = Новый СписокЗначений(); 
		СписокДействий.Добавить(КодВозвратаДиалога.Да, Нстр("ru = 'Показать настройки'"));
		СписокДействий.Добавить(КодВозвратаДиалога.Нет, Нстр("ru = 'Прервать'"));
		
		ТекстСообщения = Нстр("ru = 'Не указаны приемники для отмены трансляции движений!'");
		
		ПоказатьВопрос(Оповещение,ТекстСообщения, СписокДействий,, КодВозвратаДиалога.Да, Нстр("ru = 'Отмена трансляции'"));
		
	КонецЕсли; 
	
КонецПроцедуры // ВыборТрансляциюОтменить()

// Процедура обработчик оповещения "ВопросОтменитьТрансляциюПоОшибкеЗавершение".
//
// Параметры:
//  Результат		 - КодВозвратаДиалога - результат выбора.
//  Дополнительно	 - Произвольный	 - параметр конструктора Новый ОписаниеОповещения. 
//
&НаКлиенте
Процедура ВопросОтменитьТрансляциюПоОшибкеЗавершение(Результат, Дополнительно) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ПоказатьНастройки();
	КонецЕсли; 	

КонецПроцедуры

// Процедура обработчик оповещения "ВопросОтменитьТрансляциюЗавершение".
// 
// Параметры:
// Ответ                - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВопросОтменитьТрансляциюЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
	
		ЗаписатьИзменения("Отмена Трансляции");		
	
	КонецЕсли; 
	
КонецПроцедуры	// ВопросОтменитьТрансляциюЗавершение

&НаКлиенте
Процедура ВыборРассчитатьПартииМПЗ(Команда)
	
	ЗаписатьИзменения("РасчетПартийМПЗ");
	
КонецПроцедуры // ВыборРасчитатьПартииМПЗ()
    
&НаКлиенте
Процедура ПротоколТрансляцииОчистить(Команда)
	
	Если ПротоколТрансляции.КоличествоСтрок() <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПротоколТрансляцииОчиститьОкончание", ЭтотОбъект); 
		ТекстВопроса = Нстр("ru = 'Протокол трансляции будет очищен. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет); 
		
	КонецЕсли;
	 
КонецПроцедуры // ПротоколТрансляцииОчистить()

// Процедура окончание процедуры "ПротоколТрансляцииОчистить".
// 
&НаКлиенте 
Процедура ПротоколТрансляцииОчиститьОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПротоколТрансляции.Очистить();
		
	КонецЕсли; 
                
КонецПроцедуры // ПротоколТрансляцииОчиститьОкончание()


&НаКлиенте
Процедура ПоказатьЗПА(Команда)
    
    ПоказатьЗПА = НЕ ПоказатьЗПА;
    Элементы.ДокументыЗапретитьПерезаполнениеАналитик.Видимость = ПоказатьЗПА;
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРФД(Команда)
	
	// Процедура выполняется только в БП.
    ПоказатьРФД = НЕ ПоказатьРФД;
    Элементы.ДокументыРедактироватьФактическиеДанные.Видимость = ПоказатьРФД;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКартинка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыВыбрать");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыОбъектСсылка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыДата");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыНомер");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыОрганизация");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыСтатьяДвиженияДенежныхСредств");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыВидОперации");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Документы.Выбрать", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.бит_ОсновнойЭлементСписка);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОВ_АналитикиАналитика");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОВ_АналитикиЗначениеАналитики");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МВ_АналитикиАналитика");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МВ_АналитикиЗначениеАналитики");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Аналитики.ЗначениеАналитики", ВидСравненияКомпоновкиДанных.НеРавно, 
			Новый ПолеКомпоновкиДанных("Объект.Аналитики.ЗначениеАналитикиСтарое"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.бит_ОсновнойЭлементСписка);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьНастройки()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("РежимСообщений"	    	   		   , РежимСообщений);
	СтруктураНастроек.Вставить("РежимПредупреждений"	   		   , РежимПредупреждений);
	СтруктураНастроек.Вставить("РежимЗаписи"			   		   , РежимЗаписи);
	СтруктураНастроек.Вставить("РежимЗаписиАналитик"	   		   , РежимЗаписиАналитик);
	СтруктураНастроек.Вставить("МассивИсточники"		   		   , мМассивИсточники);
	СтруктураНастроек.Вставить("МассивПриемники"		   		   , мМассивПриемники);
	СтруктураНастроек.Вставить("СписокКолонокТабДок"		       , СписокКолонокТабДок);
	СтруктураНастроек.Вставить("ВестиПротоколТрансляции"	       , ВестиПротоколТрансляции);
	СтруктураНастроек.Вставить("ОтображатьПунктРассчитатьПартииМПЗ", ОтображатьПунктРассчитатьПартииМПЗ);
	СтруктураНастроек.Вставить("ВидыДополнительныхАналитикШапки"   , ВидыДополнительныхАналитикШапки);
	СтруктураНастроек.Вставить("МаксимальныйРазмерПакета"          , Объект.МаксимальныйРазмерПакета);
	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастроек", СтруктураНастроек);
	
	Оповещение = Новый ОписаниеОповещения("НастройкиОкончание", ЭтотОбъект); 
	ОткрытьФорму("Обработка.бит_ГрупповоеРедактированиеДополнительныхАналитик.Форма.ФормаНастройки", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

// Процедура открывает форму подбора типов документов //внутри модальный вызов.
// 
// Парметры:
//  Очищать - Булево
// 
&НаКлиенте
Процедура ИзменитьСписокТиповДокументов(Очищать)
	
	ДополнительныеПараметры = Новый Структура("Очищать", Очищать);
	Оповещение 				= Новый ОписаниеОповещения("ИзменитьСписокТиповДокументовОкончание", 
										ЭтотОбъект, ДополнительныеПараметры); 
	СохраненныеНастройки = Новый Структура;
	СохраненныеНастройки.Вставить("СписокТиповОбъектов",СписокТиповОбъектов);
	СохраненныеНастройки.Вставить("НастройкиОтбора",	НастройкиПодбораТиповДокументов);
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(СохраненныеНастройки, УникальныйИдентификатор));
	
	ОткрытьФорму("Обработка.бит_ГрупповоеРедактированиеДополнительныхАналитик.Форма.ФормаПодбораОбъектов",
		ПараметрыФормы,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // ИзменитьСписокТиповДокументов()

// Процедура окончание процедуры "ИзменитьСписокТиповДокументов".
// 
&НаКлиенте 
Процедура ИзменитьСписокТиповДокументовОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") И НЕ ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;	
	КонецЕсли;   	 
	
	Если ДополнительныеПараметры.Очищать = Истина Тогда
		СписокТиповОбъектов.Очистить();	
	КонецЕсли;
	
	СохраненныеНастройки = ПолучитьИзВременногоХранилища(Результат);
	
	Для каждого ЭлементСписка Из СохраненныеНастройки.СписокТиповОбъектов Цикл
		Если СписокТиповОбъектов.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
		 	СписокТиповОбъектов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ЭлементСписка.Пометка);		
		КонецЕсли;                                                                           			
	КонецЦикла;
	СписокТиповОбъектов.СортироватьПоПредставлению();
	
	НастройкиПодбораТиповДокументов = СохраненныеНастройки.НастройкиПодбораТиповДокументов; 

	// Инициализация СКД
	ИнициализироватьСКД();
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры // ИзменитьСписокТиповДокументовОкончание()

// Процедура управляет флагами в таблице.
// 
// Парметры:
//  ЗначениеФлага - Число (0 - снять флаги, 1 - установить истина, 2 - инвертировать).
//  ИмяТаблицы    - Строка.
// 
&НаКлиенте
Процедура ОбработатьФлаги(ЗначениеФлага, ИмяТаблицы)
	
	Если ИмяТаблицы = "Документы" Тогда
		Коллекция = Объект.Документы;
	Иначе	
	    Коллекция = ЭтотОбъект[ИмяТаблицы];
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Коллекция Цикл			
		СтрокаТаблицы.Выбрать = ?(ЗначениеФлага = 2, Не СтрокаТаблицы.Выбрать, ЗначениеФлага = 1);				
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьФлаги()

// Процедура выполняет управляет процедурами сохранения изменений на клиенте.
// 
// Парметры:
// 	РежимВыполнения  - Строка.
//  ОбъектыДляЗаписи - Массив (По умолчанию = Неопределено).
// 
&НаКлиенте
Процедура ЗаписатьИзменения(РежимВыполнения, ОбъектыДляЗаписи = Неопределено, Оповещения = Неопределено)
	
	Если ОбъектыДляЗаписи = Неопределено Тогда
		ОбъектыДляЗаписи = СписокВыбранных.ВыгрузитьЗначения();	
	КонецЕсли; 	
	Если ОбъектыДляЗаписи.Количество() = 0 Тогда
		ИзменитьПризнакМодифицированностиАналитик(Ложь, Истина);
		Возврат;	
	КонецЕсли;
	
	ТекстСостояния = НСтр("ru = 'Выполняется запись изменений...'");
	Состояние(ТекстСостояния);
	
	Если ОбъектыДляЗаписи.Количество() = 1 Тогда
		ТекстВопроса = СтрШаблон(Нстр("ru = 'Сохранить изменения для документа %1?'"), фТекущийОбъектСсылка);
	Иначе	
		ТекстВопроса = Нстр("ru = 'Сохранить изменения для выделенных документов?'");
	КонецЕсли; 
	
	Дополнительно = Новый Структура; 
	Дополнительно.Вставить("РежимВыполнения", РежимВыполнения);
	Дополнительно.Вставить("ОбъектыДляЗаписи",ОбъектыДляЗаписи);
	Дополнительно.Вставить("ТекстСостояния",  ТекстСостояния);
	Дополнительно.Вставить("Оповещения",	  Оповещения);
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИзмененияПродолжение", ЭтотОбъект, Дополнительно); 			
		
	Если АналитикиМодифицированы И РежимПредупреждений Тогда
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет); 							
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);	
	КонецЕсли;	
		
КонецПроцедуры // ЗаписатьИзменения()

// Обработчик завершения диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте 
Процедура ЗаписатьИзмененияПродолжение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьИзмененияОкончание(ДополнительныеДанные.РежимВыполнения, ДополнительныеДанные.ОбъектыДляЗаписи, 
			ДополнительныеДанные.ТекстСостояния, ДополнительныеДанные.Оповещения);	
	Иначе
		ИзменитьПризнакМодифицированностиАналитик(Ложь, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияОкончание(РежимВыполнения, ОбъектыДляЗаписи, ТекстСостояния, Оповещения)

	// Разбиваем выполнение на пакеты
	КоличествоОбщее = ОбъектыДляЗаписи.Количество();
	КоличествоПакетов = ?(Объект.МаксимальныйРазмерПакета = 0, 1, Цел(КоличествоОбщее/Объект.МаксимальныйРазмерПакета)+1);

	Для НомПакета = 1 По КоличествоПакетов Цикл
	 
		Если КоличествоПакетов > 1 Тогда
		 
			Состояние(ТекстСостояния, 100*НомПакета/КоличествоПакетов );
			 
			// Выделяем массив объектов текущего пакета
			ОбъектыТекущий = Новый Массив;
			ИндексНач = (НомПакета-1)*Объект.МаксимальныйРазмерПакета;
			ИндексКон = НомПакета*Объект.МаксимальныйРазмерПакета - 1;
			 
			Для й = ИндексНач По ИндексКон Цикл
				 
				Если й < КоличествоОбщее Тогда
					 
					ОбъектыТекущий.Добавить(ОбъектыДляЗаписи[й]);
					 
				КонецЕсли; 
				 
			КонецЦикла; 
			ПараметрыЗаписи = ПараметрыЗаписиИзменений(РежимВыполнения, мМассивИсточники, мМассивПриемники, ОбъектыТекущий, КоличествоОбщее);
		 
		Иначе	 
		 
			// Все действия идут одним пакетом
			ПараметрыЗаписи = ПараметрыЗаписиИзменений(РежимВыполнения, мМассивИсточники, мМассивПриемники, ОбъектыДляЗаписи, КоличествоОбщее);
			 
			 
		КонецЕсли; 
		 
		 
		ЕстьДействиеДляВыполнения = ПараметрыЗаписи.ВыполнитьПроведение 
							Или ПараметрыЗаписи.ВыполнитьТрансляцию
							Или ПараметрыЗаписи.ВыполнитьПроведениеБит
							Или ПараметрыЗаписи.ОтменитьТрансляцию
							Или ПараметрыЗаписи.РасчитатьПартииМПЗ;
							
		Если АналитикиМодифицированы Или ЕстьДействиеДляВыполнения Тогда 		
			АналитикиЗаписаны = ЗаписатьИзмененияСервер(ПараметрыЗаписи, АналитикиМодифицированы);
		КонецЕсли;			 
	 
	КонецЦикла;
	
	Если АналитикиМодифицированы И АналитикиЗаписаны Тогда		
		ИзменитьПризнакМодифицированностиАналитик(Ложь, Истина);		
	КонецЕсли;

	Если Оповещения <> Неопределено
		И Оповещения.ОповещениеЛокальное <> Неопределено Тогда
	
		ВыполнитьОбработкуОповещения(Оповещения.ОповещениеЛокальное);
		
	КонецЕсли;	
		
	Если Оповещения <> Неопределено
		И Оповещения.ОповещениеОбщее <> Неопределено Тогда	
		
		ВыполнитьОбработкуОповещения(Оповещения.ОповещениеОбщее);
	
	КонецЕсли; 
	
КонецПроцедуры // ЗаписатьИзмененияОкончание()

// Процедура-обработчик ожидания активизации строки.
// 
&НаКлиенте
Процедура ОжиданиеАктивизацииСтроки()
	
	Если СписокВыбранных.Количество() = 0 Тогда
		
		ТекущиеДанные = Элементы.Документы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		фТекущийОбъектСсылка 					= ТекущиеДанные.Документ;
		фТекущийЗапретитьПерезаполнениеАналитик = ТекущиеДанные.ЗапретитьПерезаполнениеАналитик;
        фТекущийРедактироватьФактическиеДанные  = ТекущиеДанные.РедактироватьФактическиеДанные;
	
		ОбновитьТаблицыАналитик(фТекущийОбъектСсылка);
				
	КонецЕсли; 
		
КонецПроцедуры // ОжиданиеАктивизацииСтроки()

// Процедура-обработчик ожидания активизации строки //внутри модальный вызов.
// 
// Параметры:
//   МассивВыбранныхСтарых - Массив.
// 
&НаКлиенте
Процедура ОбработкаИзмененияСпискаВыбранных(МассивВыбранныхСтарых)

	ОповещениеОбщее = Новый ОписаниеОповещения("ОбработкаИзмененияСпискаВыбранныхОкончание", ЭтотОбъект); 
	Оповещения = Новый Структура("ОповещениеОбщее, ОповещениеЛокальное", ОповещениеОбщее);
	
	МожноПерезаполнятьСписок = Истина;
	                             
	СтароеКоличествоВыбранных = МассивВыбранныхСтарых.Количество();
	НовоеКоличествоВыбранных  = СписокВыбранных.Количество();
	
	Если НовоеКоличествоВыбранных = 0 Тогда
		
		ОповещениеЛокальное = Новый ОписаниеОповещения("ЛокальноеОжиданиеАктивизацииСтрокиОкончание", ЭтотОбъект); 
		Оповещения.Вставить("ОповещениеЛокальное", ОповещениеЛокальное);
		
		Если Оповещения.ОповещениеЛокальное <> Неопределено Тогда			
			ВыполнитьОбработкуОповещения(Оповещения.ОповещениеЛокальное);				
		КонецЕсли;					
		Если Оповещения.ОповещениеОбщее <> Неопределено Тогда					
			ВыполнитьОбработкуОповещения(Оповещения.ОповещениеОбщее);			
		КонецЕсли; 
		
	Иначе
		
		Если НовоеКоличествоВыбранных = 1 Тогда
			
			ОповещениеЛокальное = Новый ОписаниеОповещения("ЛокальноеОбновлениеТаблицАналитикОкончание", ЭтотОбъект); 
			Оповещения.Вставить("ОповещениеЛокальное", ОповещениеЛокальное);
            
            ТекДокумент = СписокВыбранных[0].Значение;
			Если Оповещения.ОповещениеЛокальное <> Неопределено Тогда				
				ВыполнитьОбработкуОповещения(Оповещения.ОповещениеЛокальное);					
			КонецЕсли;						
			Если Оповещения.ОповещениеОбщее <> Неопределено Тогда						
				ВыполнитьОбработкуОповещения(Оповещения.ОповещениеОбщее);				
			КонецЕсли; 
            
            // Доступность признака РФД для конкретного документа.
            Элементы.ОВ_РедактироватьФактическиеДанные.ТолькоПросмотр = НЕ ПолучитьДоступностьРДФПоДокументу(ТекДокумент);
			
		ИначеЕсли СтароеКоличествоВыбранных <= 1 И НовоеКоличествоВыбранных > 1 Тогда
			
			ОповещениеЛокальное = Новый ОписаниеОповещения("ЛокальноеПерезаполнитьГрупповыеАналитикиОкончание", ЭтотОбъект); 
			Оповещения.Вставить("ОповещениеЛокальное", ОповещениеЛокальное);
			
			Если Оповещения.ОповещениеЛокальное <> Неопределено Тогда				
				ВыполнитьОбработкуОповещения(Оповещения.ОповещениеЛокальное);					
			КонецЕсли;						
			Если Оповещения.ОповещениеОбщее <> Неопределено Тогда					
				ВыполнитьОбработкуОповещения(Оповещения.ОповещениеОбщее);				
			КонецЕсли; 
			
            ПереключательЗПА = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура окончание процедуры "ОбработкаИзмененияСпискаВыбранных".
// 
&НаКлиенте 
Процедура ОбработкаИзмененияСпискаВыбранныхОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИзменитьПризнакМодифицированностиАналитик(Ложь, Истина);
	УстановитьТекущуюСтраницуПанелиДополнительныхАналитик();
		
КонецПроцедуры // ОбработкаИзмененияСпискаВыбранныхОкончание()

// Процедура локальное окончание процедуры "ОбработкаИзмененияСпискаВыбранных".
// 
&НаКлиенте 
Процедура ЛокальноеОжиданиеАктивизацииСтрокиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	// Обновление таблиц аналитик
	ОжиданиеАктивизацииСтроки();			
	
КонецПроцедуры // ЛокальноеОжиданиеАктивизацииСтрокиОкончание()

// Процедура локальное окончание процедуры "ОбработкаИзмененияСпискаВыбранных".
// 
&НаКлиенте 
Процедура ЛокальноеОбновлениеТаблицАналитикОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	// Обновление таблиц аналитик
	ТекущиеДанные = Объект.Документы.НайтиПоИдентификатору(СписокВыбранных[0].Представление);
	фТекущийОбъектСсылка 					= СписокВыбранных[0].Значение;			
	фТекущийЗапретитьПерезаполнениеАналитик = ТекущиеДанные.ЗапретитьПерезаполнениеАналитик;
    фТекущийРедактироватьФактическиеДанные  = ТекущиеДанные.РедактироватьФактическиеДанные;
	ОбновитьТаблицыАналитик(фТекущийОбъектСсылка);				

КонецПроцедуры // ЛокальноеОбновлениеТаблицАналитикОкончание()

// Процедура локальное окончание процедуры "ОбработкаИзмененияСпискаВыбранных".
// 
&НаКлиенте 
Процедура ЛокальноеПерезаполнитьГрупповыеАналитикиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	// Обновление таблиц аналитик
	фТекущийОбъектСсылка 					= Неопределено;
	фТекущийЗапретитьПерезаполнениеАналитик = Ложь;
	ПерезаполнитьГрупповыеАналитики();				
	
КонецПроцедуры // ЛокальноеПерезаполнитьГрупповыеАналитикиОкончание()

// Процедура обновляет таблицу документов.
// 
&НаКлиенте
Процедура ОбновитьТаблицуДокументов()
	
	// Сохраним информацию о текущем документе
	ТекущиеДанные = Элементы.Документы.ТекущиеДанные;
	ТекЗапрет = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ЗапретитьПерезаполнениеАналитик);
	
	// Очистка таблицы документов
	Объект.Документы.Очистить();
	
	// Проверка наличия выбранных типов документов.
	ЕстьВыбранныеТипы = Ложь;
	Для каждого ЭлСписка Из СписокТиповОбъектов Цикл
		Если ЭлСписка.Пометка Тогда
		 	ЕстьВыбранныеТипы = Истина;
			Прервать;		
		КонецЕсли;
	КонецЦикла;	
	
	Если ЕстьВыбранныеТипы Тогда
		
		// Обновление таблицы документов
		Попытка
			ОбновитьСервер(фТекущийОбъектСсылка, АналитикиМодифицированы, ТекЗапрет);
		Исключение
			 
			Объект.Аналитики.Очистить();
			
			ЗарегистрироватьОшибку(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = Нстр("ru = 'Не удалось обновить список документов. Подробности в Журнале регистрации.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			
		КонецПопытки;
		
		Если Объект.Документы.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Нет данных, удовлетворяющих отбору.'");
			ПоказатьПредупреждение(,ТекстСообщения);
		КонецЕсли; 

	Иначе
		Оповещение = Новый ОписаниеОповещения("ОбновитьТаблицуДокументовНетВидовДокументов", ЭтотОбъект);  
		ПоказатьПредупреждение(Оповещение,Нстр("ru = 'Заполните типы документов.'")); 
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТаблицуДокументов()

// Обработчик завершения диалога предупреждение.
//  См. Синтакс-помощник: ПоказатьПредупреждение().
//
&НаКлиенте
Процедура ОбновитьТаблицуДокументовНетВидовДокументов(Результат) Экспорт
	
	Объект.Аналитики.Очистить();
	АналитикиМодифицированы = Ложь;
	
	ТекстСообщения = Нстр("ru = 'Начните отсюда.'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СписокТиповОбъектов");

КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура ЗарегистрироватьОшибку(ТекстОшибки)

	ЗаписьЖурналаРегистрации(Нстр("ru = 'Обработка.Групповая трансляция и редактирование дополнительных аналитик'"),
		УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);

КонецПроцедуры // Зарегистрировать()
 
// Процедура выполняет заполнение дополнительных аналитик //Внутри модальный вызов!.
// 
// Параметры:
//  ИмяКоманды   		   - Строка.
//  ЗаполнятьАналитикиШаки - Булево (По умолчанию = Ложь).
//  ЗаполнятьАналитикиТч   - Булево (По умолчанию = Ложь).
// 
&НаКлиенте
Процедура ЗаполнитьДополнительныеАналитики(ИмяКоманды, ЗаполнятьАналитикиШаки = Ложь, ЗаполнятьАналитикиТч = Ложь) Экспорт
        
	Если Объект.Документы.Количество() = 0 И СписокВыбранных.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Если СписокВыбранных.Количество() = 1 Тогда
		
		Если фТекущийОбъектСсылка = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		
		Дополнительно = Новый Структура;
		Дополнительно.Вставить("ИмяКоманды", ИмяКоманды); 
		Дополнительно.Вставить("ЗаполнятьАналитикиШаки", ЗаполнятьАналитикиШаки); 
		Дополнительно.Вставить("ЗаполнятьАналитикиТч", 	 ЗаполнятьАналитикиТч); 
		Дополнительно.Вставить("ДляСписка", 			 Ложь);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДополнительныеАналитикиЗавершение", ЭтотОбъект, Дополнительно);

		Если РежимПредупреждений И ИмяКоманды <> "ПоУмолчаниюДобавить" И Объект.Аналитики.Количество() > 0 Тогда
			
			Если ИмяКоманды = "ПоУмолчаниюЗаполнить" Тогда			
				ТекстВопроса = Нстр("ru = 'Дополнительные аналитики будут очищены. Продолжить?'"); 						
			ИначеЕсли ИмяКоманды = "ПоУмолчаниюОбновить" Тогда			
				ТекстВопроса = Нстр("ru = 'Текущие значения аналитик будут перезаполнены значениями по умолчанию. Продолжить?'"); 			
			КонецЕсли;
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет); 
		Иначе
			ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
		КонецЕсли;	
			
	Иначе
		Дополнительно = Новый Структура;
		Дополнительно.Вставить("РежимЗаписи", 	   РежимЗаписи);
		Дополнительно.Вставить("ИмяКоманды", 	   ИмяКоманды);
		Дополнительно.Вставить("мМассивИсточники", мМассивИсточники);
		Дополнительно.Вставить("мМассивПриемники", мМассивПриемники);
		Дополнительно.Вставить("ДляСписка",		   Истина);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДополнительныеАналитикиЗавершение", ЭтотОбъект, Дополнительно);

		Если РежимПредупреждений Тогда
			
			ТекстСообщения = Нстр("ru = 'Для выделенных документов будут записаны аналитики'"); 
			Если РежимЗаписи = "ПроведениеДокумента" Тогда
				ТекстСообщения = ТекстСообщения + " " + Нстр("ru = 'и выполнено проведение.'"); 
			ИначеЕсли РежимЗаписи = "Трансляция" Тогда
				ТекстСообщения = ТекстСообщения + " " + Нстр("ru = 'и выполнена трансляция.'");
			ИначеЕсли РежимЗаписи = "ПроводитьПоРегистрамБИТ" Тогда
				ТекстСообщения = ТекстСообщения + " " + Нстр("ru = 'и выполнено проведение по регистрам БИТ.'");
			КонецЕсли;

			ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет); 
		Иначе
			ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
		КонецЕсли;	
	КонецЕсли;	
	
	Если СписокВыбранных.Количество() > 1 Тогда
		ПоказатьОповещениеПользователя(Нстр("ru = 'Заполнение'"),, Нстр("ru = 'Обработка завершена.'"), БиблиотекаКартинок.Информация32);	
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьДополнительныеАналитики()

// Обработчик завершения диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте 
Процедура ЗаполнитьДополнительныеАналитикиЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеДанные.ДляСписка Тогда
			ЗаполнитьАналитикиДляМножественногоВыбора(ДополнительныеДанные.РежимЗаписи, 
				ДополнительныеДанные.ИмяКоманды, ДополнительныеДанные.мМассивИсточники, 
				ДополнительныеДанные.мМассивПриемники);
		Иначе	
			ИзменитьПризнакМодифицированностиАналитик(Истина, Истина);
			фТекущийЗапретитьПерезаполнениеАналитик = Истина;
			ЗаполнитьАналитикиПоТекущемуОбъектуСервер(ДополнительныеДанные.ИмяКоманды, 
				ДополнительныеДанные.ЗаполнятьАналитикиШаки, ДополнительныеДанные.ЗаполнятьАналитикиТч);
		КонецЕсли; 
	КонецЕсли; 
                
КонецПроцедуры

// Процедура меняет заголовок кнопки записи в соответствием со значением режима записи.
// 
&НаКлиенте
Процедура ИзменитьЗаголовокКнопкиЗаписи()

	НовыйЗаголовок = Нстр("ru = 'Записать аналитики'"); 
	
	Если РежимЗаписи = "ПроведениеДокумента" Тогда
		НовыйЗаголовок = Нстр("ru = 'Провести документ'");
			
	ИначеЕсли РежимЗаписи = "Трансляция" Тогда
		НовыйЗаголовок = Нстр("ru = 'Выполнить трансляцию'");
				
	ИначеЕсли РежимЗаписи = "ПроводитьПоРегистрамБИТ" Тогда
		НовыйЗаголовок = Нстр("ru = 'Провести по регистрам БИТ'");
				
	КонецЕсли;
	
	Элементы.ОВ_АналитикиЗаписатьАналитики.Заголовок = НовыйЗаголовок;
	Элементы.МВ_АналитикиЗаписатьАналитики.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры // ИзменитьЗаголовокКнопкиЗаписи()

// Процедура выводит сообщение пользователю о неправильном вводе аналитики.
// 
// Параметры:
// 	Аналитика - ПланВидовХарактеристикСсылка.бит_ВидыДополнительныхАналитик.
// 
&НаКлиенте
Процедура СообщитьОбОтказе(Аналитика)

	Если РежимСообщений <> "Нет" Тогда
		
		ТекстСообщения = НСтр("ru = 'Запись с такими ключевыми полями существует! Аналитика: %ТекущаяАналитика%.'"); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяАналитика%", Аналитика);		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);	
		
	КонецЕсли; 

КонецПроцедуры // СообщитьОбОтказе()

// Процедура заполняет список выбранных.
// 
&НаКлиенте
Процедура ЗаполнитьСписокВыбранных()
	
	СписокВыбранных.Очистить();
	
	ВыбранныеСтроки = Объект.Документы.НайтиСтроки(Новый Структура("Выбрать", Истина));
	Для каждого СтрокаДок Из ВыбранныеСтроки Цикл 		
		СписокВыбранных.Добавить(СтрокаДок.Документ, СтрокаДок.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВыбранных()

// Процедура меняет заголовок группы доп аналитик при изменении модифицированности.
// 
// Параметры:
//  ИмяГруппы  				  - Строка.	
//  ПризнакМодифицированности - Булево.
// 
&НаКлиенте
Процедура ИзменитьЗаголовокГруппы(ИмяГруппы, ПризнакМодифицированности)

	ЗаголовокГруппы = Элементы[ИмяГруппы].Заголовок;
	
	Если ПризнакМодифицированности Тогда		
		Элементы[ИмяГруппы].Заголовок = ?(Прав(ЗаголовокГруппы, 1) = "*", ЗаголовокГруппы, ЗаголовокГруппы + " *"); 													
	Иначе		
		Элементы[ИмяГруппы].Заголовок = СтрЗаменить(ЗаголовокГруппы, " *", ""); 		
	КонецЕсли;	
	
	Если Элементы.ПанельДополнительныхАналитик.ТекущаяСтраница = Элементы.СтраницаДопАналитикиОдиночныйВыбор Тогда
		Элементы.ОВ_АналитикиЗаписатьАналитики.КнопкаПоУмолчанию = ПризнакМодифицированности;
	ИначеЕсли Элементы.ПанельДополнительныхАналитик.ТекущаяСтраница = Элементы.СтраницаДопАналитикиМножественныйВыбор Тогда 	
		Элементы.МВ_АналитикиЗаписатьАналитики.КнопкаПоУмолчанию = ПризнакМодифицированности;
	Иначе
		Элементы.ОВ_АналитикиЗаписатьАналитики.КнопкаПоУмолчанию = Ложь;
		Элементы.ОВ_АналитикиЗаписатьАналитики.КнопкаПоУмолчанию = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПризнакМодифицированностиАналитик(ПризнакМодифицированности, ПоменятьЗаголовок = Ложь, ЭтоТабЧасть = Ложь)
		
	// Модифицированность аналитик шапки 
	Если АналитикиМодифицированы = ПризнакМодифицированности Тогда
		Возврат;	
	КонецЕсли;	
	АналитикиМодифицированы = ПризнакМодифицированности;                     	
		
	Если ПоменятьЗаголовок Тогда
		ИзменитьЗаголовокГруппы("ГруппаДопАналитикиТолькоПросмотр", ПризнакМодифицированности); 			
		ИзменитьЗаголовокГруппы("ГруппаДопАналитикиОдиночныйВыбор", ПризнакМодифицированности); 			
		ИзменитьЗаголовокГруппы("ГруппаДопАналитикиМножественныйВыбор", ПризнакМодифицированности);	
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает элементам формы признаки видимость, доступность, только просмотр...
// 
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовПодсистемыТрансляции()

    ЗаполнитьКолонкиТаблицыДокументов();
    
	Элементы.СтраницаПротоколТрансляции.Видимость 		= ВестиПротоколТрансляции;	
	Элементы.ДокументыВыборРассчитатьПартииМПЗ.Видимость = ОтображатьПунктРассчитатьПартииМПЗ;
	
	Для каждого ЭлКолонка Из СписокКолонокТабДок Цикл	
		Элементы[ЭлКолонка.Значение].Видимость = ЭлКолонка.Пометка;	
	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементовПодсистемыТрансляции()
   
// Функция определяет работает ли документ с дополнительными аналитиками.
// 
// Параметры:
//  ТекущийДокумент - Документ Ссылка.
//  
// Возвращаемое значение:
//   Булево.
// 
&НаСервере
Функция ЭтотДокументРаботаетСАналитиками(ТекущийДокумент)
	
	ТипыДокументовСАналитиками = Метаданные.РегистрыСведений.бит_ДополнительныеАналитики.Измерения.Объект.Тип.Типы();
	Возврат ТипыДокументовСАналитиками.Найти(ТипЗнч(ТекущийДокумент)) <> Неопределено;
				
КонецФункции // ЭтотДокументРаботаетСАналитиками()

// Функция определяет наличие выбранного документа, работающего с дополнительными аналитиками.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   Булево
// 
&НаСервере
Функция ОпределитьНаличиеДокументаСДопАналитиками()

	ЕстьДокументСАналитиками = Ложь;
	
	Для каждого ВыбранныйЭлемент Из СписокВыбранных Цикл
		
		Если ЭтотДокументРаботаетСАналитиками(ВыбранныйЭлемент.Значение) Тогда
			ЕстьДокументСАналитиками = Истина;		
			Прервать;	
		КонецЕсли;	
		
	КонецЦикла;

	Возврат ЕстьДокументСАналитиками;
	
КонецФункции // ОпределитьНаличиеДокументаСДопАналитиками()
                   
// Процедура устанавливает связанными с аналитиками элементам формы признаки видимость
// , доступность, только просмотр...
// 
// Параметры:
//  ЕстьДокументСАналитиками - Булево.
// 
&НаСервере
Процедура УстановитьВидимостьДоступностьАналитик(ЕстьДокументСАналитиками = Неопределено)
	
    Если ЕстьДокументСАналитиками = Неопределено Тогда
		ЕстьДокументСАналитиками = ОпределитьНаличиеДокументаСДопАналитиками();
	КонецЕсли;	
	Элементы.ГруппаАналитикиДокумента.Доступность = СписокВыбранных.Количество() = 0 Или ЕстьДокументСАналитиками;
	
КонецПроцедуры // УстановитьВидимостьДоступностьАналитик()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)

	Элементы = Форма.Элементы;
	
	Элементы.КомпоновщикПользовательскиеНастройки.ТолькоПросмотр = (Форма.СписокТиповОбъектов.Количество() = 0);

КонецПроцедуры
 
// Процедура устанавливает текущую страницу панели дополнительных аналитик.
// 
// Параметры:
//  ЕстьДокументСАналитиками - Булево.
// 
&НаСервере
Процедура УстановитьТекущуюСтраницуПанелиДополнительныхАналитик(ЕстьДокументСАналитиками = Неопределено)

	Если СписокВыбранных.Количество() = 0 Тогда
		
		Элементы.ПанельДополнительныхАналитик.ТекущаяСтраница = Элементы.СтраницаДопАналитикиТолькоПросмотр;
		
	ИначеЕсли СписокВыбранных.Количество() = 1	Тогда
		
		Элементы.ПанельДополнительныхАналитик.ТекущаяСтраница = Элементы.СтраницаДопАналитикиОдиночныйВыбор;
		
	ИначеЕсли СписокВыбранных.Количество() > 1	Тогда
		
		Элементы.ПанельДополнительныхАналитик.ТекущаяСтраница = Элементы.СтраницаДопАналитикиМножественныйВыбор;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьАналитик(ЕстьДокументСАналитиками);

КонецПроцедуры // УстановитьТекущуюСтраницуПанелиДополнительныхАналитик()

&НаСервере
Процедура ОбновитьСервер(ТекДок, АналитикиМодифицированны, ТекЗапрет)
	
	ТаблицаДокументов 		 = СписокДокументов(); 
    СоответствиеЕстьРеквизит = Новый Соответствие;
	
	Для Каждого Выборка Из ТаблицаДокументов Цикл 
	 
		НоваяСтрока = Объект.Документы.Добавить();
		Для каждого Колонка Из ТаблицаДокументов.Колонки Цикл
			Поле = Колонка.Имя;
			Если Поле <> "Документ" Тогда
				Поле = СтрЗаменить(Колонка.Имя, "Документ", "");
			КонецЕсли; 
			Если НоваяСтрока.Свойство(Поле) Тогда
				НоваяСтрока[Поле] = Выборка[Колонка.Имя];
			КонецЕсли; 
		КонецЦикла; 
        
        МетаданныеДок      = Выборка.Документ.Метаданные();
        РеквизитыДокумента = МетаданныеДок.Реквизиты;
		
		// Картинки строк
		бит_РаботаСДиалогамиСервер.УстановитьКартинкиСтрокиПоДокументам(НоваяСтрока, 
			Выборка.Документ, , Выборка.ДокументПроведен, Выборка.ДокументПометкаУдаления);
        		
        // ЕстьРеквизитПлатежнаяПозиция, ЕстьРеквизитПланируемоеПоступление
        ЗнчСоотв = СоответствиеЕстьРеквизит.Получить(МетаданныеДок.Имя); 
        Если ЗнчСоотв = Неопределено Тогда        
            ЕстьРеквизитПлатежнаяПозиция       = Ложь;
            ЕстьРеквизитПланируемоеПоступление = Ложь;        
            СтруктураЕстьРеквизит = Новый Структура("ЕстьРеквизитПлатежнаяПозиция, ЕстьРеквизитПланируемоеПоступление"
                                                , ЕстьРеквизитПлатежнаяПозиция, ЕстьРеквизитПланируемоеПоступление);
            СоответствиеЕстьРеквизит.Вставить(МетаданныеДок.Имя, СтруктураЕстьРеквизит);                    
        Иначе            
            СтруктураЕстьРеквизит = ЗнчСоотв;        
        КонецЕсли;            
        НоваяСтрока.ЕстьРеквизитПлатежнаяПозиция       = СтруктураЕстьРеквизит.ЕстьРеквизитПлатежнаяПозиция;
        НоваяСтрока.ЕстьРеквизитПланируемоеПоступление = СтруктураЕстьРеквизит.ЕстьРеквизитПланируемоеПоступление;
            
    КонецЦикла;  
    	
	// Установка текущей строки
	НайденТекущий = Ложь;
	Если ТекДок <> Неопределено И Объект.Документы.Количество() > 1 Тогда
		НайденныеСтроки = Объект.Документы.НайтиСтроки(Новый Структура("Документ", ТекДок));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы.Документы.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
            фТекущийЗапретитьПерезаполнениеАналитик = НайденныеСтроки[0].ЗапретитьПерезаполнениеАналитик;
            фТекущийРедактироватьФактическиеДанные  = НайденныеСтроки[0].РедактироватьФактическиеДанные;
			НайденТекущий = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не НайденТекущий Тогда
		Объект.Аналитики.Очистить();
		АналитикиМодифицированны = Ложь;
	КонецЕсли;
	
	СписокВыбранных.Очистить();
		
КонецПроцедуры

// Процедура Процедура обновляет табличную часть "Аналитики".
// 
// Параметры:
//  ТекущийДокумент - ДокументСсылка.
// 
&НаСервере
Процедура ОбновитьТаблицыАналитик(ТекущийДокумент)

	ЕстьДокументОплатыБит 		    = Ложь;
	ЕстьТекущийДокументСАналитиками = Ложь;
	
	Объект.Аналитики.Очистить();
	
	Если Элементы.Документы.ТекущаяСтрока <> Неопределено И ТекущийДокумент <> Неопределено Тогда
		
		Если ЭтотДокументРаботаетСАналитиками(ТекущийДокумент) Тогда
					
			ЕстьТекущийДокументСАналитиками = Истина;
		     	 	        	
			// Аналитики шапки	
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Объект", ТекущийДокумент);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	бит_ДополнительныеАналитики.Аналитика,
			|	бит_ДополнительныеАналитики.ЗначениеАналитики КАК ЗначениеАналитики,
			|	бит_ДополнительныеАналитики.ЗначениеАналитики КАК ЗначениеАналитикиСтарое
			|ИЗ
			|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
			|ГДЕ
			|	бит_ДополнительныеАналитики.Объект = &Объект
			|"; 
			Результат = Запрос.Выполнить();
			
			Выборка   = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
			 
				НоваяСтрока = Объект.Аналитики.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ИмяАналитики = СокрЛП(НоваяСтрока.Аналитика.Код);
				
				Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
					Если Выборка.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция 
						И ЗначениеЗаполнено(Выборка.ЗначениеАналитики) Тогда
					    ЕстьДокументОплатыБит = Истина;		
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
			
			// ++ БП 
			// Аналитики табличной части
			бит_Казначейство.ПрочитатьРасшифровкуПлатежа(Объект, ТекущийДокумент);
			
			// Флаг "Запретить перезаполнение аналитик"
			Если ЕстьДокументОплатыБит Тогда
				Объект.Документы.НайтиПоИдентификатору(Элементы.Документы.ТекущаяСтрока).ЗапретитьПерезаполнениеАналитик = Истина;	
			КонецЕсли;
			// -- БП 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТаблицыАналитик()

// Функция получает набор записей регистра бит_ДополнительныеАналитики для объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возращаемое значение:
//  Набор записей регистра сведений бит_ДополнительныеАналитики.
// 
&НаСервере
Функция ПолучитьНаборЗаписей(ОбъектСсылка)

	НаборЗаписей = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписей.Прочитать();
	
    Возврат НаборЗаписей;
	
КонецФункции // ПолучитьНаборЗаписей()

// Функция получает имя аналитики.
// 
// Параметры:
//  ТекущаяАналитика - ПланВидовХарактеристикСсылка.бит_ВидыДополнительныхАналитик.
//  
// Возвращаемое значение:
//   Строка.
// 
&НаСервере
Функция ПолучитьИмяАналитики(ТекущаяАналитика)

	Если ЗначениеЗаполнено(ТекущаяАналитика) Тогда
	 	ИмяАналитики = СокрЛП(ТекущаяАналитика.Код);
	Иначе	
	    ИмяАналитики = "";
	КонецЕсли;	

	Возврат ИмяАналитики;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаписиИзменений(РежимВыполнения, МассивИсточники, МассивПриемники, ОбъектыДляЗаписи, КоличествоОбщее)
		
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить("ОбъектыДляЗаписи" , 		ОбъектыДляЗаписи);
	ПараметрыЗаписи.Вставить("ВыполнитьЗаписьАналитик", РежимВыполнения = "ЗаписьАналитик");
	ПараметрыЗаписи.Вставить("ВыполнитьПроведение", 	РежимВыполнения = "ПроведениеДокумента");
	ПараметрыЗаписи.Вставить("ОтменитьТрансляцию", 		РежимВыполнения = "Отмена Трансляции");
	ПараметрыЗаписи.Вставить("ВыполнитьТрансляцию", 	РежимВыполнения = "Трансляция");
	ПараметрыЗаписи.Вставить("ВыполнитьПроведениеБит", 	РежимВыполнения = "ПроводитьПоРегистрамБИТ");
	ПараметрыЗаписи.Вставить("РасчитатьПартииМПЗ", 		РежимВыполнения = "РасчетПартийМПЗ");
	ПараметрыЗаписи.Вставить("МассивИсточники",			МассивИсточники);
	ПараметрыЗаписи.Вставить("МассивПриемники",			МассивПриемники);
	ПараметрыЗаписи.Вставить("КоличествоОбщее",			КоличествоОбщее);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьАналитикиПоТекущемуОбъектуСервер(ИмяКоманды, ЗаполнятьАналитикиШаки, ЗаполнятьАналитикиТч)
	
	ЗаполнитьДополнительныеАналитикиСервер(фТекущийОбъектСсылка, ИмяКоманды, , ЗаполнятьАналитикиШаки, ЗаполнятьАналитикиТч);
	
	УстановитьВидимостьДоступностьАналитик(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАналитикиДляМножественногоВыбора(РежимЗаписи, ИмяКоманды, МассивИсточники, МассивПриемники)

	ОбъектыДляЗаписи = Новый Массив;
	ПараметрыЗаписи  = ПараметрыЗаписиИзменений(РежимЗаписи, МассивИсточники, МассивПриемники, 
							ОбъектыДляЗаписи, СписокВыбранных.Количество());
	
	Аналитики = Объект.Аналитики.Выгрузить();
	
	Для каждого ЭлСписка Из СписокВыбранных Цикл		
		ЗаполнитьДополнительныеАналитикиСервер(ЭлСписка.Значение, ИмяКоманды, ПараметрыЗаписи, Истина);					
	КонецЦикла;
	
	Объект.Аналитики.Загрузить(Аналитики);
	
	УстановитьВидимостьДоступностьАналитик();
 	  
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеАналитикиСервер(ОбъектСсылка, ИмяКоманды, ПараметрыЗаписи = Неопределено,
			ЗаполнитьШапку = Ложь, ЗаполнитьТаблицу = Ложь)
	
	// Аналитики шапки
	Если ЗаполнитьШапку Тогда
		
		ДокументОбъект = ОбъектСсылка.ПолучитьОбъект();

		Если ИмяКоманды = "ПоУмолчаниюЗаполнить" Тогда
			Объект.Аналитики.Очистить();
			бит_МеханизмДопИзмерений.ЗаполнитьДополнительныеАналитикиПоУмолчанию(ДокументОбъект, Объект.Аналитики, Истина, Ложь);
		Иначе
			
			Объект.Аналитики.Очистить();
			АналитикиОбъекта = ПолучитьНаборЗаписей(ОбъектСсылка);
			Для каждого СтрокаТаблицы Из АналитикиОбъекта Цикл
				НоваяСтрока = Объект.Аналитики.Добавить(); 
				НоваяСтрока.Аналитика 		  	    = СтрокаТаблицы.Аналитика;
				НоваяСтрока.ЗначениеАналитики 		= СтрокаТаблицы.ЗначениеАналитики;
				НоваяСтрока.ЗначениеАналитикиСтарое = СтрокаТаблицы.ЗначениеАналитики;
			КонецЦикла; 
			
			ЗначенияАналитик = бит_МеханизмДопИзмерений.ЗначенияАналитикПоУмолчанию(ДокументОбъект);
			Для каждого ЭлементСоответствия Из ЗначенияАналитик Цикл
					
				ВидАналитики 	  = ЭлементСоответствия.Ключ;	
				ЗначениеАналитики = ЭлементСоответствия.Значение;
	            Если Не ЗначениеЗаполнено(ЗначениеАналитики) Тогда
					Продолжить;			
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить("Аналитика", ВидАналитики);
				НайденныеСтроки = Объект.Аналитики.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 0 И ИмяКоманды = "ПоУмолчаниюДобавить" Тогда
					СтрокаАналитики = Объект.Аналитики.Добавить();
					СтрокаАналитики.Аналитика 		  = ВидАналитики;
					СтрокаАналитики.ЗначениеАналитики = ЗначениеАналитики;
				ИначеЕсли НайденныеСтроки.Количество() > 0 И ИмяКоманды = "ПоУмолчаниюОбновить" Тогда
					СтрокаАналитики 				  = НайденныеСтроки[0];
					СтрокаАналитики.ЗначениеАналитики = ЗначениеАналитики;
				КонецЕсли;					
			КонецЦикла; 
		КонецЕсли; 
				
		Если ПараметрыЗаписи <> Неопределено Тогда
			ОбъектыДляЗаписи = Новый Массив;
			ОбъектыДляЗаписи.Добавить(ОбъектСсылка);
			ПараметрыЗаписи.Вставить("ОбъектыДляЗаписи", ОбъектыДляЗаписи);
			ТекАналитикиЗаписаны = ЗаписатьИзмененияСервер(ПараметрыЗаписи);
		КонецЕсли;
	
	КонецЕсли;
	
	// Аналитики табличной части
	Если ЗаполнитьТаблицу Тогда
		ЗаполнитьТЧ(ОбъектСсылка);
	КонецЕсли;
		
КонецПроцедуры

// Процедура выполняет заполнение аналитик табличной части.
// 
// Параметры:
//  ОбъектСсылка 		- ДокументСсылка.
// 
&НаСервере
Процедура ЗаполнитьТЧ(ОбъектСсылка)

	ДокОбъект = ОбъектСсылка.ПолучитьОбъект();
	бит_МеханизмДопИзмерений.ЗаполнитьДополнительныеАналитикиПоУмолчанию(ДокОбъект, Объект.Аналитики, Ложь, Истина);
	
КонецПроцедуры // ЗаполнитьТЧ()

// Процедура заполняет дополнительные аналитики по платежной позиции.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.*
//  ДокументБит  - ДокументСсылка.бит_ПлатежнаяПозиция 
// 					или ДокументСсылка.бит_РасходнаяПозиция 
// 					или ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств.
// 
&НаСервере
Процедура ЗаполнениеДополнительныхАналитикПоДокументуБит(ОбъектСсылка, Знач ДокументБит)
	
	Объект.Аналитики.Очистить();
	
	Если ЭтотДокументРаботаетСАналитиками(ОбъектСсылка) Тогда
		
		НаборЗаписей = ПолучитьНаборЗаписей(ОбъектСсылка);
		
		бит_МеханизмДопИзмерений.ЗаполнитьДополнительныеАналитикиПоДокументуБит(НаборЗаписей, ОбъектСсылка, ДокументБит);
				
		Для каждого Запись Из НаборЗаписей Цикл
			СтрокаАн = Объект.Аналитики.Добавить();	
			СтрокаАн.Аналитика    			 = Запись.Аналитика;
			СтрокаАн.ИмяАналитики 			 = СокрЛП(Запись.Аналитика.Код);
			СтрокаАн.ЗначениеАналитики     	 = Запись.ЗначениеАналитики;
			СтрокаАн.ЗначениеАналитикиСтарое = Запись.ЗначениеАналитики;
		КонецЦикла;
	
	КонецЕсли;		
	
	УстановитьВидимостьДоступностьАналитик(Истина);
	 	
КонецПроцедуры // ЗаполнениеДополнительныхАналитикПоДокументуБит()


#Область СерверныеПроцедурыИФункцииПоСохранениюИзменений

// Процедура выводит информацию в журнал регистрации.
// 
// Параметры:
//  ТекстРегистрации - Строка
// 
&НаСервере
Процедура ВывестиИнформациюВЖурналРегистрации(ТекстРегистрации)

	ЗаписьЖурналаРегистрации(ТекстРегистрации, УровеньЖурналаРегистрации.Информация, Метаданные, , ТекстРегистрации);	

КонецПроцедуры // ВывестиИнформациюВЖурналРегистрации()

// Процедура выводит новую информацию в протокол трансляции или выводит сообщение пользователю.
// 
// Параметры:
//  Протокол - Строка
// 
&НаСервере
Процедура ВывестиИнформациюПоТрансляции(Протокол)

	Если ЗначениеЗаполнено(Протокол) Тогда
	
		Если ВестиПротоколТрансляции Тогда
			
			ПротоколТрансляции.ДобавитьСтроку("
				|----------------------------------------------------------------------------------------------------");
				
			ПротоколТрансляции.ДобавитьСтроку(Протокол);
			
		ИначеЕсли РежимСообщений = "Все" Тогда
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(Протокол);	
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ВывестиИнформациюПоТрансляции()

&НаСервере
Функция МассивЗакрытыхДляРедактирования(МассивИсходный)

    МассивЗакрытых = Новый Массив;
    
    Для каждого ОбъектСсылка Из МассивИсходный Цикл
       
        // Проверка на запрет редактирования.
        МетаОбъект = ОбъектСсылка.Метаданные();
        ЗапретРедактирования = бит_ДатыЗапретаРедактирования.ВыполнитьПроверкуДатыЗапретаРедактирования(МетаОбъект, ОбъектСсылка);
        Если ЗапретРедактирования Тогда
            МассивЗакрытых.Добавить(ОбъектСсылка);
        КонецЕсли;
    
    КонецЦикла;

    Возврат МассивЗакрытых;
    
КонецФункции

&НаСервере
Функция ДокументыСДоступомКРФД(МассивИсходный)

	// Для совместимости с БП, КОРП.
	
    Если фВидимостьРФД Тогда
         
        Запрос = Новый Запрос;
        Запрос.УстановитьПараметр("Регистратор", МассивИсходный);
        Запрос.УстановитьПараметр("ВидОбъекта" , Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления);
        Запрос.Текст = "
        |ВЫБРАТЬ
        |	ОбъектыСистемы.Ссылка КАК Ссылка
        |ПОМЕСТИТЬ ОбСист
        |ИЗ
        |	Справочник.бит_ОбъектыСистемы КАК ОбъектыСистемы
        |ГДЕ
        |	ОбъектыСистемы.ВидОбъекта = &ВидОбъекта
        |	И ОбъектыСистемы.ИмяОбъекта = ""бит_ОборотыПоБюджетам""
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	СоответствиеЗаписейТрансляции.Регистратор КАК Регистратор
        |ИЗ
        |	РегистрСведений.бит_СоответствиеЗаписейТрансляции КАК СоответствиеЗаписейТрансляции
        |ГДЕ
        |	СоответствиеЗаписейТрансляции.Регистратор В(&Регистратор)
        |	И СоответствиеЗаписейТрансляции.Приемник В
        |				(ВЫБРАТЬ
        |					ОбСист.Ссылка
        |				ИЗ
        |					ОбСист КАК ОбСист)
        |
        |СГРУППИРОВАТЬ ПО
        |	СоответствиеЗаписейТрансляции.Регистратор
        |";
        РезультатЗапроса = Запрос.Выполнить();
        ТаблицаРез = РезультатЗапроса.Выгрузить();
        ДоступныеДокументы = ТаблицаРез.ВыгрузитьКолонку("Регистратор");
        
    Иначе
        ДоступныеДокументы = Новый Массив;
    КонецЕсли;

    Возврат ДоступныеДокументы;

КонецФункции

&НаСервере
Функция ПолучитьДоступностьРДФПоДокументу(ДокСсылка)

    ДоступностьРДФ = Ложь;
    
    Если фВидимостьРФД Тогда
        
        МассивИсходный = Новый Массив;
        МассивИсходный.Добавить(ДокСсылка);
        МассивДоступныхРФД = ДокументыСДоступомКРФД(МассивИсходный);
        ДоступностьРДФ = МассивДоступныхРФД.Найти(ДокСсылка) <> Неопределено;
        
    КонецЕсли;

    Возврат ДоступностьРДФ;

КонецФункции // ПолучитьДоступностьРДФПоДокументу()

&НаСервере
Функция ЗаписатьИзмененияСервер(ПараметрыЗаписи, АналитикиМодифицированны = Истина)

	АналитикиЗаписаны = Истина;
	НачалоТрансляции = ТекущаяДатаСеанса();
	
	ОбъектыДляЗаписи = ПараметрыЗаписи.ОбъектыДляЗаписи;
	МассивИсточники  = ПараметрыЗаписи.МассивИсточники;
	МассивПриемники  = ПараметрыЗаписи.МассивПриемники;
	
	// Журнал регистрации и первоначальные проверки.
	Если ПараметрыЗаписи.ВыполнитьТрансляцию Или ПараметрыЗаписи.ВыполнитьПроведениеБит Тогда		
		ВывестиИнформациюВЖурналРегистрации(Нстр("ru = 'Начало выполнения групповой трансляции'")); 		
	ИначеЕсли ПараметрыЗаписи.ОтменитьТрансляцию Тогда 		
		Если ПараметрыЗаписи.МассивПриемники = Неопределено Или ПараметрыЗаписи.МассивПриемники.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Не указаны приемники для отмены трансляции движений!'")); 
			ПараметрыЗаписи.Вставить("ОтменитьТрансляцию", Ложь);
		Иначе
			ВывестиИнформациюВЖурналРегистрации(Нстр("ru = 'Начало выполнения групповой отмены трансляции'"));
		КонецЕсли;		
	ИначеЕсли ПараметрыЗаписи.РасчитатьПартииМПЗ Тогда		
		ВывестиИнформациюВЖурналРегистрации(Нстр("ru = 'Начало выполнения групповой трансляции (Расчет партий МПЗ)'"));
		ПротоколРасчетаМПЗ = "";
    КонецЕсли; 
    
    МассивЗакрытыхДляРедактирования = МассивЗакрытыхДляРедактирования(ОбъектыДляЗаписи);
      
    МножественныйВыбор = ОбъектыДляЗаписи.Количество() > 1;
	Для каждого ОбъектСсылка Из ОбъектыДляЗаписи Цикл
		
		// Проверка на запрет редактирования.
		Если МассивЗакрытыхДляРедактирования.Найти(ОбъектСсылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
        
        // Текущий документ в списке документов.
        ТекущиеДок = Объект.Документы.НайтиСтроки(Новый Структура("Документ", ОбъектСсылка));
        
		// Запись признака "ЗапретитьПерезаполнениеАналитик" в регистр сведений бит_ДополнительныеПараметрыОбъектов.
        Если бит_МеханизмДопИзмерений.ВключенРежимЗаполнятьВсегда() Тогда
            Если НЕ МножественныйВыбор ИЛИ ПереключательЗПА <> 0 Тогда
                Если МножественныйВыбор И ПереключательЗПА <> 0 Тогда
                    // Если обрабатывается множественный выбор документов, 
                    // то признак о запрете перезаполнения аналитик заполняется из реквизита ПереключательЗПА.
                    // Если переключатель стоит в положении "Не менять", то менять значение признака для документа не нужно.
                    фТекущийЗапретитьПерезаполнениеАналитик = ПереключательЗПА = 1;                                         
                КонецЕсли;          
                
                СтруктураДопПараметров = Новый Структура("ЗапретитьПерезаполнениеАналитик", фТекущийЗапретитьПерезаполнениеАналитик);
    			бит_МеханизмДопИзмерений.ЗаписатьДополнительныеПараметрыОбъекта(ОбъектСсылка, СтруктураДопПараметров);
    			    			
    			ТекущиеДок[0].ЗапретитьПерезаполнениеАналитик = фТекущийЗапретитьПерезаполнениеАналитик;
            КонецЕсли;	
        КонецЕсли;
                        
		// Запись аналитик
		Если ПараметрыЗаписи.ВыполнитьЗаписьАналитик Тогда 
			Если Не ОбъектСсылка.Проведен 
				ИЛИ (ВРег(РежимЗаписиАналитик) = ВРег("НеПерезаписывать") ИЛИ ВРег(РежимЗаписиАналитик) = ВРег("ПерезаписыватьУстановленные")) Тогда
				ЗаписатьАналитикиСервер(ОбъектСсылка, ПараметрыЗаписи);	
			Иначе 				
				Если РежимСообщений <> "Нет" Тогда
					ТекстСообщения = СтрШаблон(Нстр("ru = 'Не удалось записать аналитики для документа ""%1"", так как он проведен.'"),
										Строка(ОбъектСсылка));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;				
				Если ОбъектСсылка = фТекущийОбъектСсылка Тогда
					АналитикиЗаписаны = Ложь;
				КонецЕсли;
				Продолжить; 				
			КонецЕсли;
		Иначе
			// При всех режимах записываем аналитики, если они изменены
			Если АналитикиМодифицированны Тогда
				ЗаписатьАналитикиСервер(ОбъектСсылка, ПараметрыЗаписи);
			КонецЕсли;
		КонецЕсли; 		
		
		Если ПараметрыЗаписи.ВыполнитьПроведение Тогда 
			
			// Проведение документа
			ПровестиДокументСервер(ОбъектСсылка);
					
		ИначеЕсли ПараметрыЗаписи.ОтменитьТрансляцию Тогда
			
			// Отмена трансляции
			ОтменитьТрансляциюПроводокСервер(ОбъектСсылка, МассивПриемники);
			
		ИначеЕсли ПараметрыЗаписи.ВыполнитьТрансляцию Или ПараметрыЗаписи.ВыполнитьПроведениеБит Тогда 
			
			// Если объект не проведен
			Если ОбъектСсылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить И Не ОбъектСсылка.Проведен Тогда
				Если РежимСообщений <> "Нет" Тогда
					ТекстСообщения = Нстр("ru = 'Для выполнение процедуры необходимо провести документ %1.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ОбъектСсылка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				Продолжить;		
			КонецЕсли;
			
			ДокументОбъект = ОбъектСсылка.ПолучитьОбъект();
			Если ПараметрыЗаписи.ВыполнитьТрансляцию Тогда
				// Трансляция
				ВыполнитьТрансляциюПроводокСервер(ДокументОбъект, МассивИсточники, МассивПриемники);
			ИначеЕсли ПараметрыЗаписи.ВыполнитьПроведениеБит Тогда
			    // Проведение по регистрам Бит
				ВыполнитьПроведениеБитСервер(ДокументОбъект);
				ВыполнитьТрансляциюПроводокСервер(ДокументОбъект, МассивИсточники, МассивПриемники);
			КонецЕсли;
			
		ИначеЕсли ПараметрыЗаписи.РасчитатьПартииМПЗ Тогда
			
			РассчитатьПартииМПЗСервер(ОбъектСсылка, ПротоколРасчетаМПЗ);
			ВывестиИнформациюПоТрансляции(ПротоколРасчетаМПЗ);
						
		КонецЕсли;	
				
	КонецЦикла;
	
	// Журнал регистрации
	Если ПараметрыЗаписи.ВыполнитьТрансляцию Или ПараметрыЗаписи.ВыполнитьПроведениеБит Тогда			
		ВывестиИнформациюВЖурналРегистрации(Нстр("ru = 'Окончание выполнения групповой трансляции'"));
	ИначеЕсли ПараметрыЗаписи.ОтменитьТрансляцию Тогда	
		ВывестиИнформациюВЖурналРегистрации(Нстр("ru = 'Окончание выполнения групповой отмены трансляции'"));
	ИначеЕсли ПараметрыЗаписи.РасчитатьПартииМПЗ Тогда	
		ВывестиИнформациюВЖурналРегистрации(Нстр("ru = 'Окончание выполнения групповой трансляции (Расчет партий МПЗ)'"));
	КонецЕсли;
    
    ЗаписатьИзмененияСерверБП(МассивЗакрытыхДляРедактирования, МножественныйВыбор, НачалоТрансляции, ОбъектыДляЗаписи);
	
	Возврат АналитикиЗаписаны;

КонецФункции

&НаСервере
Процедура ЗаписатьИзмененияСерверБП(Знач МассивЗакрытыхДляРедактирования, Знач МножественныйВыбор, Знач НачалоТрансляции, Знач ОбъектыДляЗаписи)
	
	// Для совместимости с БП, КОРП.
	
	Перем ДокументовОбработано, Запись, ИнформацияПоВремениВыполнения, МассивДоступныхРФД, МенятьРФД, НаборЗаписей, ОбъектСсылка, ОкончаниеТрансляции, ТекущиеДок;
	
	// Массив документов изи выбранных, для которых доступно изменение признака РФД.
	МассивДоступныхРФД = ДокументыСДоступомКРФД(ОбъектыДляЗаписи);
	Для каждого ОбъектСсылка Из ОбъектыДляЗаписи Цикл
		
		// Проверка на запрет редактирования.
		Если МассивЗакрытыхДляРедактирования.Найти(ОбъектСсылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		// Текущий документ в списке документов.
		ТекущиеДок = Объект.Документы.НайтиСтроки(Новый Структура("Документ", ОбъектСсылка));
		
		// Запись признака "Редактировать фактические данные" в регистр сведений бит_РучнаяКорректировкаФакта.
		Если фВидимостьРФД И МассивДоступныхРФД.Найти(ОбъектСсылка) <> Неопределено Тогда            
			Если МножественныйВыбор Тогда
				// Если обрабатывается множественный выбор документов, 
				// то признак о ручной корректировке факта заполняется из реквизита ПереключательРФД, 
				// для документов, имеющих движения по регистру бит_СоответствиеЗаписейТрансляции по оборотам бюджетов.                  
				Если ПереключательРФД = 0 Тогда
					// Если переключатель стоит в положении "Не менять", то менять значение признака для документа не нужно.
					МенятьРФД = Ложь;
				Иначе
					МенятьРФД = ?(ПереключательРФД = 1, НЕ ТекущиеДок[0].РедактироватьФактическиеДанные, ТекущиеДок[0].РедактироватьФактическиеДанные); 
					Если МенятьРФД Тогда
						фТекущийРедактироватьФактическиеДанные = ПереключательРФД = 1;
					КонецЕсли;
				КонецЕсли;
			Иначе
				МенятьРФД = ТекущиеДок[0].РедактироватьФактическиеДанные <> фТекущийРедактироватьФактическиеДанные;       
			КонецЕсли;
			Если МенятьРФД Тогда
				// Запись в регистр бит_РучнаяКорректировкаФакта.
				НаборЗаписей = РегистрыСведений.бит_РучнаяКорректировкаФакта.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
				Запись = НаборЗаписей.Добавить();
				Запись.Объект   = ОбъектСсылка;
				Запись.Значение = фТекущийРедактироватьФактическиеДанные;
				НаборЗаписей.Записать();
				// Запись в текущую строку списка обработки.
				ТекущиеДок[0].РедактироватьФактическиеДанные = фТекущийРедактироватьФактическиеДанные;   
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОкончаниеТрансляции  = ТекущаяДатаСеанса();
	ДокументовОбработано = ОбъектыДляЗаписи.Количество();
	ИнформацияПоВремениВыполнения = НСтр("ru = 'Начало трансляции: %1
	|Окончание трансляции: %2
	|Количество обработанных документов: %3'");
	ИнформацияПоВремениВыполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИнформацияПоВремениВыполнения,
	НачалоТрансляции,
	ОкончаниеТрансляции,
	ДокументовОбработано);
	
	ВывестиИнформациюПоТрансляции(ИнформацияПоВремениВыполнения);

КонецПроцедуры // ЗаписатьИзмененияСервер()

// Процедура производит запись в регистр сведений бит_ДополнительныеАналитики.
// 
// Параметры:
//  ОбъектСсылка 			 - ДокументСсылка.
//  СтруктураПараметров 	 - Структура.
// 
&НаСервере
Процедура ЗаписатьАналитикиСервер(ОбъектСсылка, ПараметрыЗаписи)
	
	// ----------------------------------------------------------------------
	// Запись аналитик шапки
	
	Если ЭтотДокументРаботаетСАналитиками(ОбъектСсылка) Тогда
		НаборЗаписей = ПолучитьНаборЗаписей(ОбъектСсылка);
	Иначе
		Возврат;	
	КонецЕсли;
		
	Если РежимЗаписиАналитик = "Перезаписывать" Тогда
		
		// Перезаписывать весь набор
		
		НаборЗаписей.Очистить();
			
		Для каждого СтрокаАналитик Из Объект.Аналитики Цикл
	
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаАналитик);
			ЗаписьРегистра.Объект = ОбъектСсылка;
			СтрокаАналитик.ЗначениеАналитикиСтарое = СтрокаАналитик.ЗначениеАналитики;
	
		КонецЦикла;  	
		
	ИначеЕсли РежимЗаписиАналитик = "ПерезаписыватьУстановленные" Или РежимЗаписиАналитик = "НеПерезаписывать" Тогда
		
		// Перезаписывать установленные
		
		МассивНеПерезаписываемых = Новый Массив;
		Для каждого Запись Из НаборЗаписей Цикл
			
			МассивНеПерезаписываемых.Добавить(Запись.Аналитика);
			
			Если РежимЗаписиАналитик = "ПерезаписыватьУстановленные" Тогда
				НайденныеНовые = Объект.Аналитики.НайтиСтроки(Новый Структура("Аналитика", Запись.Аналитика));
				Если НайденныеНовые.Количество() > 0 Тогда
					Запись.ЗначениеАналитики = НайденныеНовые[0].ЗначениеАналитики; 	
					НайденныеНовые[0].ЗначениеАналитикиСтарое = НайденныеНовые[0].ЗначениеАналитики;			
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СтрокаАналитик Из Объект.Аналитики Цикл	
			Если МассивНеПерезаписываемых.Найти(СтрокаАналитик.Аналитика) = Неопределено Тогда
				ЗаписьРегистра = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаАналитик);
				ЗаписьРегистра.Объект = ОбъектСсылка;
				СтрокаАналитик.ЗначениеАналитикиСтарое = СтрокаАналитик.ЗначениеАналитики;
			Иначе
				СтрокаАналитик.ЗначениеАналитики = СтрокаАналитик.ЗначениеАналитикиСтарое;	
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
		
	НаборЗаписан = бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей, РежимСообщений);	
	
КонецПроцедуры
                    
// Процедура проводит документ.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
&НаСервере
Процедура ПровестиДокументСервер(ОбъектСсылка)

	ДокументОбъект = ОбъектСсылка.ПолучитьОбъект();	
	
	Попытка
		ДокументОбъект.Заблокировать();
		МожноЗаписатьДокумент = Истина;
	Исключение
		Если РежимСообщений <> "Нет" Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ %1 заблокирован. Проведение невозможно.'"), ОбъектСсылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
		КонецЕсли;	
		МожноЗаписатьДокумент = Ложь;
	КонецПопытки;                 
	
	Если МожноЗаписатьДокумент Тогда
			
		ПровестиУдалось = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокументОбъект, РежимЗаписиДокумента.Проведение,, РежимСообщений);
		
		ДокументОбъект.Разблокировать();
	
		Если ПровестиУдалось Тогда
			
			// Отметим в таблице "Документы", проведение документа.
			ИскомыеСтроки = Объект.Документы.НайтиСтроки(Новый Структура("Документ", ОбъектСсылка));
			бит_РаботаСДиалогамиСервер.УстановитьКартинкиСтрокиПоДокументам(ИскомыеСтроки[0], ОбъектСсылка);
		
		КонецЕсли; 

	КонецЕсли;  
	
КонецПроцедуры // ПровестиДокументСервер()

// Процедура выполняет трансляцию.
// 
// Параметры:
//  ОбъектСсылка  	- ДокументСсылка.
//  МассивПриемники - Массив.
// 
&НаСервере
Процедура ОтменитьТрансляциюПроводокСервер(ОбъектСсылка, МассивПриемники)
	
	ДокументОбъект = ОбъектСсылка.ПолучитьОбъект();
	Отказ 		   = Ложь;
	
	Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда			
		// При наличиии механизма контроля закрытого периода сохраним движения для последующего анализа.
		бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
	КонецЕсли;
	
	// Выполним отмену трансляции движений.
	Протокол = бит_МеханизмТрансляции.ОтменитьТрансляцию(ОбъектСсылка, МассивПриемники);
														   
	Если бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода() Тогда			
		// При наличиии механизма контроля закрытого периода сформируем корректирующие проводки.
		бит_КонтрольЗакрытогоПериода.КонтрольПриУдаленииПроведения(ДокументОбъект, Отказ);	
	КонецЕсли;	
	
	Если ДокументОбъект.Заблокирован() Тогда	
		 ДокументОбъект.Разблокировать(); 	
	КонецЕсли;													   
														   
	ВывестиИнформациюПоТрансляции(Протокол); 
		
КонецПроцедуры // ОтменитьТрансляциюПроводокСервер()

// Процедура выполняет трансляцию.
// 
// Параметры:
//  ОбъектСсылка  	- ДокументСсылка.
//  МассивИсточники - Массив (По умолчанию = Неопределено).
//  МассивПриемники - Массив (По умолчанию = Неопределено).
// 
&НаСервере
Процедура ВыполнитьТрансляциюПроводокСервер(ДокументОбъект, МассивИсточники = Неопределено, МассивПриемники = Неопределено)
	
	Отказ = Ложь;
	
	//БИТ Тртилек 19.06.2012
	ДокументОбъект.ДополнительныеСвойства.Вставить("бит_ДокументИзТрансляции");
	///БИТ Тртилек
	
	ИспользуетсяМеханизмКонтроляЗакрытогоПериода = бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода();
	Если ИспользуетсяМеханизмКонтроляЗакрытогоПериода Тогда			
		// При наличиии механизма контроля закрытого периода сохраним движения для последующего анализа.
		бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
	КонецЕсли;
	
	// МХО.
	бит_МеханизмХозяйственныхОперацийСервер.бит_мхо_НастраиваемыеДвиженияДокументовОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведенияДокумента.Неоперативный);
	Для каждого НаборЗаписей Из ДокументОбъект.Движения Цикл
		Если НаборЗаписей.Записывать Тогда
			ДокументОбъект.Движения.Записать();
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	// Трансляция.
	РезДанные = бит_МеханизмТрансляции.ВыполнитьТрансляцию(ДокументОбъект, МассивИсточники, МассивПриемники, Истина, Перечисления.бит_РежимыТрансляции.Ручной);
	Протокол  = РезДанные.Протокол;
														   
	Если ИспользуетсяМеханизмКонтроляЗакрытогоПериода Тогда			
		// При наличиии механизма контроля закрытого периода сформируем корректирующие проводки.
		бит_КонтрольЗакрытогоПериода.КонтрольПриОбработкеПроведения(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, Истина);	
	КонецЕсли;	
	
	Если ДокументОбъект.Заблокирован() Тогда	
		 ДокументОбъект.Разблокировать(); 	
	КонецЕсли;														   
															   
  	ВывестиИнформациюПоТрансляции(Протокол); 
		
КонецПроцедуры // ВыполнитьТрансляциюПроводокСервер()

// Процедура проводит документ в режиме «Проведение по регистрам БИТ».
// 
// 	В режиме  «Проведение по регистрам БИТ» выполняется 
//  1. трансляция по всем источникам и приемникам 
//  2. выполняются движения	по регистрам:
// 		 - бит_ДвиженияДенежныхСредств, 
// 		 - бит_ПланируемыйРасходДенежныхСредств, 
// 		 - бит_ОборотыПоБюджету. 
// 		для документов включенных в подписки: 
// 			 - бит_ОбработкаПроведенияДокументыДДС, 
// 			 - бит_ОбработкаПроведенияРасходДС, 
// 			 - бит_ОбработкаПроведенияПоступлениеДС.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
&НаСервере
Процедура ВыполнитьПроведениеБитСервер(ДокументОбъект)
	
	МетаданныеДокумента = Метаданные.Документы[ДокументОбъект.Метаданные().Имя];
	ДвиженияДокумента 	= МетаданныеДокумента.Движения;
	
	Отказ 		    = Ложь;
	РежимПроведения = РежимЗаписиДокумента.Запись; 
	
	// ++БП
	МР_ОборотыПоБюджетам   	= Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам;
	ДоступенРегистрОборотов = ДвиженияДокумента.Содержит(МР_ОборотыПоБюджетам);	
	
	// Проведения по регистру накопления бит_ОборотыПоБюджетам.
	Если ДоступенРегистрОборотов Тогда
		бит_Казначейство.бит_ОбработкаПроведенияПлатежногоДокумента(ДокументОбъект, Отказ, РежимПроведения);
 	КонецЕсли;
	
	// Метаданные регистров	
	МР_РасходыДС  				= Метаданные.РегистрыНакопления.бит_ПланируемыйРасходДенежныхСредств;
	МР_ДвиженияДС 				= Метаданные.РегистрыНакопления.бит_ДвиженияДенежныхСредств;
	МР_НезапланированныеРасходы = Метаданные.РегистрыНакопления.бит_НезапланированныеРасходы;
	МР_ПланируемыеЗатраты 		= Метаданные.РегистрыНакопления.бит_ПланируемыеЗатраты;
	
	// Определим доступность движений по регистрам.
	
	ДоступенРегистрРасходаДС     = ДвиженияДокумента.Содержит(МР_РасходыДС) 
									И ДвиженияДокумента.Содержит(МР_ДвиженияДС);
									
	ДоступенРегистрДвиженияДСПриход = Не ДвиженияДокумента.Содержит(МР_РасходыДС) 
									И ДвиженияДокумента.Содержит(МР_ДвиженияДС);
									
	ДоступенРегистрНезапланированныхРасходов = ДвиженияДокумента.Содержит(МР_НезапланированныеРасходы);
	ДоступенРегистрПланируемыхЗатрат 		 = ДвиженияДокумента.Содержит(МР_ПланируемыеЗатраты);

	// Проведения по регистрам накопления бит_ПланируемыйРасходДенежныхСредств и/или бит_ДвиженияДенежныхСредств
	// Для проведения должно быть установлено значение для аналитики "Платежная позиция".
	// РасходДоход = Расходывание.
	Если ДоступенРегистрРасходаДС Тогда
    	бит_Казначейство.бит_ОбработкаПроведенияРасходДСОбработкаПроведения(ДокументОбъект
																			, Отказ
																			, РежимПроведения
																			, Истина);
	КонецЕсли;
																		
	// Проведения по регистрам накопления бит_ДвиженияДенежныхСредств 
	// РасходДоход = Поступление.
	Если ДоступенРегистрДвиженияДСПриход Тогда
		бит_Казначейство.бит_ОбработкаПроведенияПоступлениеДСОбработкаПроведения(ДокументОбъект
																			, Отказ
																			, РежимПроведения
																			, Истина);
    КонецЕсли;
	
	// Проведения по регистрам накопления бит_НезапланированныеРасходы и бит_ПланируемыеЗатраты.
	Если ДоступенРегистрНезапланированныхРасходов И ДоступенРегистрПланируемыхЗатрат Тогда		
		бит_ДоговораСервер.бит_ОбработкаПроведенияЗатратыОбработкаПроведения(ДокументОбъект
																				, Отказ
																				, РежимПроведения);
			
	КонецЕсли;
	// --БП
	
КонецПроцедуры // ВыполнитьПроведениеБитСервер()

// Процедура выполняет расчет партий МПЗ.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
//  Протокол     - Строка.
// 
&НаСервере
Процедура РассчитатьПартииМПЗСервер(ОбъектСсылка, Протокол)
	
	ДокументОбъект = ОбъектСсылка.ПолучитьОбъект();
	Отказ 		   = Ложь;
	
	Если Не бит_ОбщегоНазначения.ЗаблокироватьОбъект(ДокументОбъект, "Все") Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДокументОбъект.Движения.Найти("бит_му_ПартииМПЗ") <> Неопределено Тогда
		
		ДокументОбъект.Движения.бит_му_ПартииМПЗ.Прочитать();
		
		Если ДокументОбъект.Движения.Найти("бит_му_ПартииМПЗСобственныхКонтрагентов") <> Неопределено Тогда
			
			ДокументОбъект.Движения.бит_му_ПартииМПЗСобственныхКонтрагентов.Прочитать();
			
			// Выполняем интелектуальную очистку. 				
			ТблДвижений = ДокументОбъект.Движения.бит_му_ПартииМПЗСобственныхКонтрагентов.Выгрузить();

			// 1. Удаляем только записи с видом движения "Приход" - это сторнирующие записи трансляции.
			Отбор       = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Приход);
			МассивСтрок = ТблДвижений.НайтиСтроки(Отбор);
			Для каждого Запись Из МассивСтрок Цикл
				ТблДвижений.Удалить(Запись);
			КонецЦикла;

			// 2. Удаляем только записи, в которых определен счет учета - это записи списания себестоимости.
			Индекс = ТблДвижений.Количество() - 1;
			Пока Индекс >= 0 Цикл
			
				Запись = ТблДвижений.Получить(Индекс);
				Если ЗначениеЗаполнено(Запись.СчетУчета) Тогда
					ТблДвижений.Удалить(Запись);
				КонецЕсли; 
				Индекс = Индекс - 1;
			КонецЦикла; 
			
			// Загружаем скоректированные движения
			ДокументОбъект.Движения.бит_му_ПартииМПЗСобственныхКонтрагентов.Загрузить(ТблДвижений);
			
			// После корректировки движений нужно выполнить запись, чтобы изменить остатки в регистре.
			ДокументОбъект.Движения.бит_му_ПартииМПЗСобственныхКонтрагентов.Записать();
			
		КонецЕсли;
		
		бит_му_МПЗ.бит_му_ОбработкаПроведенияПартииСобственныхКонтрагентовОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведенияДокумента.Неоперативный);
		
		ДокументОбъект.Движения.бит_му_ПартииМПЗ.Записать();
		
		Если ДокументОбъект.Движения.Найти("бит_му_ПартииМПЗСобственныхКонтрагентов") <> Неопределено Тогда
			ДокументОбъект.Движения.бит_му_ПартииМПЗСобственныхКонтрагентов.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументОбъект.Заблокирован() Тогда		
		 ДокументОбъект.Разблокировать();		
	КонецЕсли; 		
	
	Протокол = Протокол + Нстр("ru = 'Расчет партий МПЗ для документа %1% завершен'");	
	Протокол = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Протокол, ОбъектСсылка);
				
КонецПроцедуры // РассчитатьПартииМПЗСервер()

// Процедура устанавливает картинку длястроки таблицы документов.
// 
// Параметры:
//  Ид 			   - Число.
//  ДокументСсылка - ДокументСсылка.
// 
&НаСервере
Процедура УстановитьКартинкуПоДокументу(Ид, ДокументСсылка)
	
	СтрДок = Объект.Документы.НайтиПоИдентификатору(Ид);
	бит_РаботаСДиалогамиСервер.УстановитьКартинкиСтрокиПоДокументам(СтрДок, СтрДок.Документ);
		
КонецПроцедуры // УстановитьКартинкуПоДокументу()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииПоРаботеССкд

// Процедура меняет СКД по видам аналитик.
// 
// Параметры:
//  СКД - Схема компоновки данных.
// 
&НаСервере
Процедура ИзменитьСКД_ПоВидамАналитик(СКД)

	ВидыАалитикБыстрогоОтбора = Новый Массив; 
	ВидыАалитикБыстрогоОтбора.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ЦФО);
	ВидыАалитикБыстрогоОтбора.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.СтатьяОборотов);
	ВидыАалитикБыстрогоОтбора.Добавить(ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.Проект);
	
	НаборДанныхДокументы = СКД.НаборыДанных.Документы;
	ПоляНабораДанных     = НаборДанныхДокументы.Поля;
	
	// ++ БП 
	// Ручная корректирвка факта.
	РучнаяКорректировкаФактаРезультат = 
	"РКФ.Значение КАК РедактироватьФактическиеДанные,";
	
	РучнаяКорректировкаФактаСоединение =
	"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_РучнаяКорректировкаФакта КАК РКФ
	|	ПО РКФ.Объект = Документы.Документ}";
	
	НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, 
										"//РучнаяКорректировкаФакта.Результат", 
										РучнаяКорректировкаФактаРезультат);
										
	НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, 
										"//РучнаяКорректировкаФакта.Соединение", 
										РучнаяКорректировкаФактаСоединение);
									
	НовоеПоле = ПоляНабораДанных.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле 		  = "РедактироватьФактическиеДанные";
	НовоеПоле.ПутьКДанным = "Документ.РедактироватьФактическиеДанные";
	
	// Дополнительные параметры объектов.
	ДополнительныеПараметрыОбъектовРезультат = 
	"ДПО.ЗапретитьПерезаполнениеАналитик КАК ЗапретитьПерезаполнениеАналитик,";
	
	ДополнительныеПараметрыОбъектовСоединение =
	"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеПараметрыОбъектов КАК ДПО
	|	ПО ДПО.Объект = Документы.Документ}";
	
	НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, 
										"//ДополнительныеПараметрыОбъектов.Результат", 
										ДополнительныеПараметрыОбъектовРезультат);
										
	НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, 
										"//ДополнительныеПараметрыОбъектов.Соединение", 
										ДополнительныеПараметрыОбъектовСоединение);
										
	НовоеПоле = ПоляНабораДанных.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле 		  = "ЗапретитьПерезаполнениеАналитик";
	НовоеПоле.ПутьКДанным = "Документ.ЗапретитьПерезаполнениеАналитик";
	// -- БП 
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ВидыДополнительныхАналитик.Ссылка,
	|	бит_ВидыДополнительныхАналитик.Код 				КАК Код,
	|	бит_ВидыДополнительныхАналитик.Наименование 	КАК Наименование,
	|	бит_ВидыДополнительныхАналитик.ТипЗначения,
	|	бит_ВидыДополнительныхАналитик.Предопределенный КАК Предопределенный
	|ИЗ
	|	ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик КАК бит_ВидыДополнительныхАналитик
    |
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка 		 = РезультатЗапроса.Выбрать();
		
	// Шаблон для замены выражения "//ВыборДополнительныхАналитик.Результат".
	ШаблонПоля =
	"	ДополнительныеАналитики%1.ЗначениеАналитики КАК Поле%1,
	|//ВыборДополнительныхАналитик.Результат";
	
	// Шаблон для замены выражения "//ВыборДополнительныхАналитик.Соединение".
	ШаблонСоединения =
	"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеАналитики КАК ДополнительныеАналитики%1
	|	ПО (ДополнительныеАналитики%1.Объект = Документы.Документ
	|			И ДополнительныеАналитики%1.Аналитика = &Парам%1)}
	|//ВыборДополнительныхАналитик.Соединение";
	
	Индекс = 0;
	Пока Выборка.Следующий() Цикл
		
		Индекс 		 = Индекс + 1;
		ИмяПараметра = СтрШаблон("Парам%1", Индекс); 	
		ИмяПоля      = СтрШаблон("Поле%1", Индекс);
		ПутьКДанным  = СтрШаблон(НСтр("ru = 'Аналитики.[%1]'"), Выборка.Наименование);
		//СинонимДопАналитики = СтрШаблон(НСтр("ru = 'Аналитика: %1'"), Выборка.Наименование);
												
		НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, 
										"//ВыборДополнительныхАналитик.Результат", 
										СтрШаблон(ШаблонПоля, Индекс));
		
		НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, 
										"//ВыборДополнительныхАналитик.Соединение", 
										СтрШаблон(ШаблонСоединения, Индекс));
										
		// Поле набора данных СКД
		НовоеПоле = ПоляНабораДанных.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле 		  = ИмяПоля;
		НовоеПоле.ПутьКДанным = ПутьКДанным;
		НовоеПоле.ТипЗначения = Выборка.ТипЗначения;
		
		Если НовоеПоле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.бит_ДополнительныеЗначенияАналитик")) Тогда
			ЗначениеПараметраРедактирования = НовоеПоле.ПараметрыРедактирования.Элементы[2];
			ЗначениеПараметраРедактирования.Использование = Истина;
			ПараметрВыбораКд = ЗначениеПараметраРедактирования.Значение.Добавить();
			ПараметрВыбораКд.Имя      = "Отбор.Владелец";
			ПараметрВыбораКд.Значение = Выборка.Ссылка;	
		КонецЕсли;
			
		// Параметр СКД
		НовыйПараметр = СКД.Параметры.Добавить();
		НовыйПараметр.Имя 		  			 = ИмяПараметра;		
		НовыйПараметр.ТипЗначения 			 = Метаданные.ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.Тип;
		НовыйПараметр.Значение    			 = Выборка.Ссылка;
		НовыйПараметр.ВключатьВДоступныеПоля = Ложь;
		НовыйПараметр.Использование 		 = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		// Добавим отборы по фиксированному набору доп. аналитик.
		Если ВидыАалитикБыстрогоОтбора.Найти(Выборка.Ссылка) <> Неопределено Тогда
			ЭлементОтбора = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Ложь;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			ЭлементОтбора.ИдентификаторПользовательскойНастройки = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		КонецЕсли; 
	КонецЦикла;
		
КонецПроцедуры

// Процедура меняет СКД по выбранным типам документов.
// 
// Параметры:
//  СКД - Схема компоновки данных.
// 
&НаСервере
Процедура ИзменитьСКД_ПоВыбраннымТипамДокументов(СКД)
	
	// Поля, используемые для отборов, которые требуется удалить, 
	// если таких нет в метаданных.
	РеквизитыШапки = Новый Структура; 
	РеквизитыШапки.Вставить("ВидОперации", Ложь);
	РеквизитыШапки.Вставить("СтатьяДвиженияДенежныхСредств", Ложь);
	РеквизитыШапки.Вставить("Контрагент", Ложь);
	РеквизитыШапки.Вставить("НазначениеПлатежа", Ложь);
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		РеквизитыШапки.Вставить("Ответственный", Ложь);
		РеквизитыШапки.Вставить("ДоговорКонтрагента", Ложь);
	КонецЕсли;

	// Изменим текст запроса:
	ПодготовитьТекстЗапросаПоВыбраннымТипамДокументов(СКД.НаборыДанных.Документы.Запрос, РеквизитыШапки);	
	
	Если СписокТиповОбъектов.Количество() <> 0 Тогда
		Индекс = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Количество() - 1;
		Пока Индекс >= 0  Цикл
			ЭлементОтбора = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Получить(Индекс);
			Ключ = Строка(СКД.НастройкиПоУмолчанию.Отбор.Элементы.Получить(Индекс).ЛевоеЗначение);
			Если СтрНачинаетсяС(Ключ, "Документ.") Тогда
				Ключ = СтрЗаменить(Ключ, "Документ.","");
				Пометка = Ложь;
				Если РеквизитыШапки.Свойство(Ключ, Пометка) И Пометка = Ложь Тогда
					СКД.НастройкиПоУмолчанию.Отбор.Элементы.Удалить(Индекс);				
				КонецЕсли; 
			КонецЕсли; 
			Индекс = Индекс - 1;
		КонецЦикла;  
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ПодготовитьТекстЗапросаПоВыбраннымТипамДокументов(ТекстЗапроса, РеквизитыШапки)

	Если СписокТиповОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Описание полей, где: 
	// Значение, Представление, Пометка - это "Имя", "Синоним", "Выбор реквизитов".
	ФиксированныеПоля = Новый СписокЗначений;
	ФиксированныеПоля.Добавить("Ссылка","Документ", Истина);
	ФиксированныеПоля.Добавить("Номер", "Номер");
	ФиксированныеПоля.Добавить("Проведен", "Проведен");
	ФиксированныеПоля.Добавить("ПометкаУдаления", "ПометкаУдаления");
	ФиксированныеПоля.Добавить("Организация", "Организация", Истина);
	ФиксированныеПоля.Добавить("ВидОперации", "ВидОперации");
	ФиксированныеПоля.Добавить("Дата", "Дата");
	ФиксированныеПоля.Добавить("СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств", Истина);
	ФиксированныеПоля.Добавить("Контрагент", "Контрагент", Истина);
	ФиксированныеПоля.Добавить("СуммаДокумента", "СуммаДокумента");
	ФиксированныеПоля.Добавить("НазначениеПлатежа", "НазначениеПлатежа");
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		ФиксированныеПоля.Добавить("Ответственный", "Ответственный", Истина);
		ФиксированныеПоля.Добавить("ДоговорКонтрагента", "ДоговорКонтрагента", Истина);
	КонецЕсли; 
	
	СтрокаНеограниченнойДлинны = ОбщегоНазначения.ОписаниеТипаСтрока(0); 
	СхемаЗапроса = Новый СхемаЗапроса;
	
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Запрос.ВыбиратьРазрешенные = Истина;
	Запрос.ТаблицаДляПомещения = "ТабДокументы";
	
	// Схема не подждерживает описание расширения языка запросов для СКД.
	ОтборыСКД = Новый Массив();
	ШаблонМаркераСКД		 = "&ОтборСКД%1"; // Маркер для подстановки выражения отборов СКД.
	ШаблонВыраженияОтбораСКД = "%1%2 КАК %3"; // Пример выражения: "Ссылка.* КАК Документ"
	
	Для Каждого Элемент Из СписокТиповОбъектов Цикл
		Индекс = СписокТиповОбъектов.Индекс(Элемент);
				
		Если Индекс = 0 Тогда
			Оператор = Запрос.Операторы[0];
		Иначе	
			Оператор = Запрос.Операторы.Добавить();
			Оператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
		КонецЕсли; 

		Источник = Оператор.Источники.Добавить("Документ." + Элемент.Значение);

		Оператор.Отбор.Добавить("Дата МЕЖДУ &ДатаНачала И &ДатаОкончания");
		Оператор.Отбор.Добавить(СтрШаблон(ШаблонМаркераСКД, Индекс));
		
		Таблица  = Источник.Источник;
		ПоляОтбораСКД = Новый Массив(); 
		Для Каждого ФиксированноеПоле Из ФиксированныеПоля Цикл
			ИндексКолонки = ФиксированныеПоля.Индекс(ФиксированноеПоле);
			ДоступноеПоле = Таблица.ДоступныеПоля.Найти(ФиксированноеПоле.Значение);
			
			Если ДоступноеПоле <> Неопределено Тогда
				Если ДоступноеПоле.ТипЗначения = СтрокаНеограниченнойДлинны Тогда
					// Обрежем поля неограниченной длины.
					Выражение = СтрШаблон("ВЫРАЗИТЬ(%1 КАК Строка (210))", ДоступноеПоле.Имя);
					Оператор.ВыбираемыеПоля.Добавить(Выражение, ИндексКолонки);
				Иначе
					Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле, ИндексКолонки);
					// Заполним выражения отборов для СКД.
					ПолеСКД = СтрШаблон(ШаблонВыраженияОтбораСКД, ФиксированноеПоле.Значение, 
								?(ФиксированноеПоле.Пометка,".*" , ""), ФиксированноеПоле.Представление);
					ПоляОтбораСКД.Добавить(ПолеСКД);
				КонецЕсли; 
			Иначе	
				Оператор.ВыбираемыеПоля.Добавить("NULL", ИндексКолонки);
			КонецЕсли; 
			
			// Выявляем хотя бы одну таблицу с доступным реквизитом шапки.
			Ключ = ФиксированноеПоле.Значение;
			Если РеквизитыШапки.Свойство(Ключ) Тогда
				Если ДоступноеПоле = Неопределено Тогда
					РеквизитыШапки[Ключ] = Макс(Ложь, РеквизитыШапки[Ключ]);
				Иначе	
					РеквизитыШапки[Ключ] = Макс(Истина, РеквизитыШапки[Ключ]);
				КонецЕсли; 
			КонецЕсли; 

			Если Индекс = 0 Тогда
				Запрос.Колонки[ИндексКолонки].Псевдоним = ФиксированноеПоле.Представление;
			КонецЕсли;	
		КонецЦикла;
		
		ОтборыСКД.Добавить(ПоляОтбораСКД);
	КонецЦикла; 
	
	// Заменим "эталонный запрос".
	ИсходнаяСхема = Новый СхемаЗапроса;
	ИсходнаяСхема.УстановитьТекстЗапроса(ТекстЗапроса);
	ИсходнаяСхема.ПакетЗапросов[0].УстановитьТекстЗапроса(СхемаЗапроса.ПолучитьТекстЗапроса());
	ТекстЗапроса = ИсходнаяСхема.ПолучитьТекстЗапроса();

	// Подставляем отборы СКД.
	Индекс = ОтборыСКД.ВГраница();
	Пока Индекс > -1 Цикл
		Элемент = ОтборыСКД.Получить(Индекс);
		ТекстОтбора = Символы.ПС
					+ "{ ГДЕ " + Символы.ПС
					+ СтрСоединить(Элемент,", ") + Символы.ПС
					+ "}";
					
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И " + СтрШаблон(ШаблонМаркераСКД, Индекс), ТекстОтбора);	
		
		Индекс = Индекс -1;
	КонецЦикла; 
	
КонецПроцедуры
 
// Процедура меняет СКД по выбранным типам документов.
// 
// Параметры:
//  СКД - Схема компоновки данных.
// 
&НаСервере
Процедура ИзменитьСКД_ПоСтатьямДДС(СКД)

	Если фИспользоватьСтатьиДДС Тогда
		Возврат;
	КонецЕсли;
		
	НаборДанныхДокументы = СКД.НаборыДанных.Документы;
	ПоляНабораДанных     = НаборДанныхДокументы.Поля;
	
	НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, "НЕОПРЕДЕЛЕНО КАК СтатьяДвиженияДенежныхСредств,", "");
	НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, "(НЕОПРЕДЕЛЕНО) КАК СтатьяДвиженияДенежныхСредств,", "");
	НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, "Документы.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,", "");
	НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, "Документы.СтатьяДвиженияДенежныхСредств,", "");
	НаборДанныхДокументы.Запрос = СтрЗаменить(НаборДанныхДокументы.Запрос, "СтатьяДвиженияДенежныхСредств,", "");
	
	ПолеСтатьяДДС = ПоляНабораДанных.Найти("СтатьяДвиженияДенежныхСредств");
	Если ПолеСтатьяДДС <> Неопределено Тогда
		ПоляНабораДанных.Удалить(ПолеСтатьяДДС);		
	КонецЕсли;
	
	ПолеКД_СтатьяДДС = Новый ПолеКомпоновкиДанных("СтатьяДвиженияДенежныхСредств");
	Для каждого ЭлВыбор Из СКД.НастройкиПоУмолчанию.Выбор.Элементы Цикл
		Если ЭлВыбор.Поле = ПолеКД_СтатьяДДС Тогда
			СКД.НастройкиПоУмолчанию.Выбор.Элементы.Удалить(ЭлВыбор);
			Прервать;			
		КонецЕсли;		
	КонецЦикла;
	
	Для каждого ЭлОтбор Из СКД.НастройкиПоУмолчанию.Отбор.Элементы Цикл
		Если ЭлОтбор.ЛевоеЗначение = ПолеКД_СтатьяДДС Тогда
			СКД.НастройкиПоУмолчанию.Отбор.Элементы.Удалить(ЭлОтбор);
			Прервать;			
		КонецЕсли;		
	КонецЦикла; 			
		
КонецПроцедуры // ИзменитьСКД_ПоСтатьямДДС()

// Процедура инициализирует схему компоновки данных.
// 
&НаСервере
Процедура ИнициализироватьСКД(СохрПользовательскиеНастройки = Неопределено)

	Если СохрПользовательскиеНастройки = Неопределено Тогда
		СохрПользовательскиеНастройки = Объект.Компоновщик.ПользовательскиеНастройки;	
	КонецЕсли;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("СхемаКомпоновкиДанных");
	ИзменитьСКД_ПоСтатьямДДС(СхемаКомпоновкиДанных);
	ИзменитьСКД_ПоВидамАналитик(СхемаКомпоновкиДанных);
	ИзменитьСКД_ПоВыбраннымТипамДокументов(СхемаКомпоновкиДанных);
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	Попытка
		Объект.Компоновщик.Инициализировать(ИсточникНастроек);	
	Исключение 
		ТекстСообщения = СтрШаблон(Нстр("ru = 'Невозможно применить настройки. По причине: %1'"), 
							КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		 
	КонецПопытки;
	
	Объект.Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(СохрПользовательскиеНастройки);
	Объект.Компоновщик.Восстановить();
	
КонецПроцедуры // ИнициализироватьСКД()

&НаСервере
Функция СписокДокументов()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);	
	
	// Заполняем параметры макета компановки данных.
	Если ЗначениеЗаполнено(Объект.Период.ДатаНачала) Тогда
		ДатаНачала = Объект.Период.ДатаНачала;
	Иначе
		ДатаНачала = '2001-01-01';
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
		ДатаОкончания = Объект.Период.ДатаОкончания;
	Иначе
		ДатаОкончания = КонецДня('2030-12-31');
	КонецЕсли;
	
	ПрмНачалоПериода = Объект.Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНачала");
	ПрмКонецПериода  = Объект.Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОкончания");
	Если ПрмНачалоПериода <> Неопределено Тогда
		ПрмНачалоПериода.Значение = ДатаНачала;
		ПрмНачалоПериода.Использование = Истина;
	КонецЕсли; 
	
	Если ПрмКонецПериода <> Неопределено Тогда
		ПрмКонецПериода.Значение = ДатаОкончания;
		ПрмКонецПериода.Использование = Истина;
	КонецЕсли; 
	
	// Выполняем компановку макета МакетСКД
	// (настройки берутся из схемы компановки данных и из пользовательских настроек).
	Настройки 		  = Объект.Компоновщик.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Выполнение компоновки с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , );
	
	СписокДокументов = Новый ТаблицаЗначений;

	// Вывод таблицы   	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(СписокДокументов); 	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Возврат СписокДокументов;
	
КонецФункции // ПолучитьЗапросСКД()

// Процедура перезаполняет таблицу групповых аналитик.
// 
&НаСервере
Процедура ПерезаполнитьГрупповыеАналитики()

	Объект.Аналитики.Очистить();
	
	Для каждого ВидАн Из ВидыДополнительныхАналитикШапки Цикл
		НоваяСтрока = Объект.Аналитики.Добавить();	
		НоваяСтрока.Аналитика 		  	    = ВидАн.Значение;
		НоваяСтрока.ЗначениеАналитики       = ВидАн.Значение.ТипЗначения.ПривестиЗначение();
		НоваяСтрока.ЗначениеАналитикиСтарое = ВидАн.Значение.ТипЗначения.ПривестиЗначение();
		НоваяСтрока.ИмяАналитики            = СокрЛП(НоваяСтрока.Аналитика.Код);
	КонецЦикла;	

КонецПроцедуры // ПерезаполнитьГрупповыеАналитики()

#КонецОбласти

#Область ПроцедурыИФункцииПоРаботеСНастройками

&НаСервере
Функция СохраняемыеНастройки(МассивИсточники, МассивПриемники)

	Ключи = 
	"РежимСообщений, РежимПредупреждений, РежимЗаписи, РежимЗаписиАналитик, 
	|ВестиПротоколТрансляции, ОтображатьПунктРассчитатьПартииМПЗ,
	|МассивИсточники, МассивПриемники, 
	|Период, 
	|ПользовательскиеНастройки,
	|НастройкиПодбораТиповДокументов,
	|СписокКолонокТабДок,
	|СписокТиповОбъектов,
	|МаксимальныйРазмерПакета,
	|ВидыДополнительныхАналитикШапки";
	
	СохраняемыеНастройки = Новый Структура(Ключи);
	ЗаполнитьЗначенияСвойств(СохраняемыеНастройки, ЭтотОбъект);
	
	СохраняемыеНастройки.Вставить("Период", 				   Объект.Период);
	СохраняемыеНастройки.Вставить("ПользовательскиеНастройки", Объект.Компоновщик.ПользовательскиеНастройки);
	СохраняемыеНастройки.Вставить("МаксимальныйРазмерПакета",  Объект.МаксимальныйРазмерПакета);
	СохраняемыеНастройки.Вставить("МассивИсточники", 		   МассивИсточники);
	СохраняемыеНастройки.Вставить("МассивПриемники", 		   МассивПриемники);

	Возврат СохраняемыеНастройки;
	
КонецФункции

// Процедура заполняет дополнительные списки - настройки формы.
// 
// Параметры:
//  ЗначениеНастроек - Структура (По умолчанию = Неопределено).
// 
&НаСервере
Процедура ЗаполнитьДополнительныеСписки(ЗначениеНастроек = Неопределено)

	// Список колонок таблицы документов
	Если ЗначениеНастроек = Неопределено 
		Или Не ЗначениеНастроек.Свойство("СписокКолонокТабДок", СписокКолонокТабДок)Тогда
	
		СписокКолонокТабДок.Добавить("ДокументыОбъектСсылка"				 , Нстр("ru = 'Документ'"), Истина);
		СписокКолонокТабДок.Добавить("ДокументыДата"						 , Нстр("ru = 'Дата'"), Истина);
		СписокКолонокТабДок.Добавить("ДокументыНомер"						 , Нстр("ru = 'Номер'"), Истина);
		СписокКолонокТабДок.Добавить("ДокументыОрганизация"				     , Нстр("ru = 'Организация'"), Истина);
		СписокКолонокТабДок.Добавить("ДокументыВидОперации"				     , Нстр("ru = 'Вид операции'"), Истина);
		СписокКолонокТабДок.Добавить("ДокументыКонтрагент"					 , Нстр("ru = 'Контрагент'"), Истина);        
		Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда 		
			СписокКолонокТабДок.Добавить("ДокументыДоговорКонтрагента"		 , Нстр("ru = 'Договор контрагента'"), Истина);  		
		КонецЕсли; 
		СписокКолонокТабДок.Добавить("ДокументыСтатьяДвиженияДенежныхСредств", Нстр("ru = 'Статья ДДС'"), Истина);
        СписокКолонокТабДок.Добавить("ДокументыСуммаДокумента"               , Нстр("ru = 'Сумма'") , Истина);
        СписокКолонокТабДок.Добавить("ДокументыНазначениеПлатежа"            , Нстр("ru = 'Назначение платежа'") , Истина);
		                                       
    КонецЕсли;

	Если СписокКолонокТабДок.НайтиПоЗначению("ДокументыНазначениеПлатежа") = Неопределено Тогда
         СписокКолонокТабДок.Добавить("ДокументыНазначениеПлатежа", Нстр("ru = 'Назначение платежа'"), Истина);
    КонецЕсли;
    Если СписокКолонокТабДок.НайтиПоЗначению("ДокументыСуммаДокумента") = Неопределено Тогда
         СписокКолонокТабДок.Добавить("ДокументыСуммаДокумента", Нстр("ru = 'Сумма'") , Истина);
    КонецЕсли;

	// Список типов объектов
	Если ЗначениеНастроек <> Неопределено Тогда
		ЗначениеНастроек.Свойство("СписокТиповОбъектов", СписокТиповОбъектов);
	КонецЕсли;
		
	// Список видов дополнительных аналитик для группового режима.
	Если ЗначениеНастроек = Неопределено 
		Или Не ЗначениеНастроек.Свойство("ВидыДополнительныхАналитикШапки", ВидыДополнительныхАналитикШапки) Тогда
		
		ПвхВидовАналитик = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик;
		ВидыДополнительныхАналитикШапки.Добавить(ПвхВидовАналитик.ЦФО			, ПвхВидовАналитик.ЦФО.Наименование			  , Истина);
		ВидыДополнительныхАналитикШапки.Добавить(ПвхВидовАналитик.СтатьяОборотов, ПвхВидовАналитик.СтатьяОборотов.Наименование, Истина);
		ВидыДополнительныхАналитикШапки.Добавить(ПвхВидовАналитик.Проект		, ПвхВидовАналитик.Проект.Наименование		  , Истина);
				
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДополнительныеСписки()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  МассивИсточники - Массив.
//  МассивИсточники - Массив.
//  ВыбНастройка    - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(МассивИсточники, МассивПриемники, ВыбНастройка = Неопределено)
	
	// ВосстановленнаяНастройка - Найденное значение в структуре ЗначениеНастроек.
	Перем ВосстановленнаяНастройка;
	// ПользовательскиеНастройки используются для инициализации схемы компоновки данных.
	Перем ПользовательскиеНастройки;
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
                                
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		ЗначениеНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ЗначениеНастроек) Тогда
		
		РежимЗаписи         = "ПроводитьПоРегистрамБИТ";
		РежимСообщений 		= "Все";
		РежимЗаписиАналитик = "НеПерезаписывать";
		
		ВестиПротоколТрансляции 		   = Истина;
		ОтображатьПунктРассчитатьПартииМПЗ = Истина;
		Объект.МаксимальныйРазмерПакета	   = 100;
		
		ЗаполнитьДополнительныеСписки();
			
	ИначеЕсли ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
                            		
		ЗначениеНастроек.Свойство("РежимСообщений"	   , ВосстановленнаяНастройка);
		РежимСообщений 		= ?(ВосстановленнаяНастройка = Неопределено, "Все", ВосстановленнаяНастройка);
		
		ЗначениеНастроек.Свойство("РежимПредупреждений", ВосстановленнаяНастройка);
		РежимПредупреждений = ?(ВосстановленнаяНастройка = Неопределено, Ложь, ВосстановленнаяНастройка);
		
		ЗначениеНастроек.Свойство("РежимЗаписи"		   , ВосстановленнаяНастройка);
		РежимЗаписи    		= ?(ВосстановленнаяНастройка = Неопределено, "ПроведениеДокумента", ВосстановленнаяНастройка);
		Если РежимЗаписи = "ЗаписьАналитик" Тогда
		    // данный режим решили отключить, т.к. измененные аналитики не попадают в движения.
		    РежимЗаписи = "ПроводитьПоРегистрамБИТ";   		
		КонецЕсли; 
		
		ЗначениеНастроек.Свойство("РежимЗаписиАналитик", ВосстановленнаяНастройка);
		РежимЗаписиАналитик = ?(ВосстановленнаяНастройка = Неопределено, "НеПерезаписывать", ВосстановленнаяНастройка);
		                         		
		ЗначениеНастроек.Свойство("ВестиПротоколТрансляции", ВосстановленнаяНастройка);
		ВестиПротоколТрансляции = ?(ВосстановленнаяНастройка = Неопределено, Истина, ВосстановленнаяНастройка);
		
		ЗначениеНастроек.Свойство("ОтображатьПунктРассчитатьПартииМПЗ", ВосстановленнаяНастройка);
		ОтображатьПунктРассчитатьПартииМПЗ = ?(ВосстановленнаяНастройка = Неопределено, Истина, ВосстановленнаяНастройка);
		                             		
		ЗначениеНастроек.Свойство("МассивИсточники", МассивИсточники);
		ЗначениеНастроек.Свойство("МассивПриемники", МассивПриемники);
		                         		
		ЗначениеНастроек.Свойство("Период", Объект.Период); 		
		
		ЗначениеНастроек.Свойство("ПользовательскиеНастройки", ВосстановленнаяНастройка);
		ПользовательскиеНастройки = ?(ВосстановленнаяНастройка = Неопределено, ПользовательскиеНастройки, ВосстановленнаяНастройка);
		
		ЗначениеНастроек.Свойство("НастройкиПодбораТиповДокументов", ВосстановленнаяНастройка);
		НастройкиПодбораТиповДокументов = ?(ВосстановленнаяНастройка = Неопределено, Неопределено, ВосстановленнаяНастройка);
		
		ЗначениеНастроек.Свойство("МаксимальныйРазмерПакета", Объект.МаксимальныйРазмерПакета); 		
		
		ЗаполнитьДополнительныеСписки(ЗначениеНастроек);
		    				
	КонецЕсли;
	
	// Инициализация СКД
	ИнициализироватьСКД(ПользовательскиеНастройки);	
                               
	УстановитьВидимостьДоступностьЭлементовПодсистемыТрансляции();
                             
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию(МассивИсточники, МассивПриемники)

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта("Обработка.бит_ГрупповоеРедактированиеДополнительныхАналитик");
	
	// Установим настройку
	ПрименитьНастройки(МассивИсточники, МассивПриемники, НастройкаПоУмолчанию);
      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()
     
&НаКлиенте
Процедура СохранитьНастройки(Команда)

	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = СохраняемыеНастройки(мМассивИсточники, мМассивПриемники);
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", "Обработка.бит_ГрупповоеРедактированиеДополнительныхАналитик");
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",ПараметрыФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
		
КонецПроцедуры // СохранитьНастройки()

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)

	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", "Обработка.бит_ГрупповоеРедактированиеДополнительныхАналитик");
	
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНастройкиОкончание", ЭтотОбъект); 
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки",ПараметрыФормы,ЭтотОбъект,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры // ВосстановитьНастройки()

// Процедура окончание процедуры "ВосстановитьНастройки".
// 
&НаКлиенте 
Процедура ВосстановитьНастройкиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ПрименитьНастройки(мМассивИсточники, мМассивПриемники, РезультатВыбора);
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Обновите таблицу документов.'")); 
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиОкончание()

// Процедура создает колонки таблицы документов
//
&НаСервере
Процедура ЗаполнитьКолонкиТаблицыДокументов()

    // Новые элементы.
    МассивНовых = Новый Массив;
    МассивНовых.Добавить("ДокументыСуммаДокумента");
    МассивНовых.Добавить("ДокументыНазначениеПлатежа");     
    Для каждого ЭлМас Из МассивНовых Цикл
        // Их может не быть в сохраненном списке.
        Если СписокКолонокТабДок.НайтиПоЗначению(ЭлМас) = Неопределено Тогда
            // Удалить текущие элементы
            ТекЭлемент = Элементы.Найти(ЭлМас);
            Если ТекЭлемент <> Неопределено Тогда
                Элементы.Удалить(ТекЭлемент);
            КонецЕсли;         
        КонецЕсли;
    КонецЦикла;         
    
    Для каждого ЭлСп Из СписокКолонокТабДок Цикл
        
        ИмяЭл = ЭлСп.Значение;
        
        // Удалить текущие элементы
        ТекЭлемент = Элементы.Найти(ИмяЭл);
        Если ТекЭлемент <> Неопределено Тогда
            Элементы.Удалить(ТекЭлемент);
        КонецЕсли;         
        
         // Добавление новых элементов по списку
        НовЭл = Элементы.Добавить(ИмяЭл, Тип("ПолеФормы"), Элементы.Документы);
        
        НовЭл.Заголовок      = ЭлСп.Представление;  
        НовЭл.ПутьКДанным    = ?(ИмяЭл = "ДокументыОбъектСсылка"
                                , "Объект.Документы.Документ"
                                , "Объект.Документы." + СтрЗаменить(ЭлСп.Значение, "Документы", ""));
        НовЭл.ТолькоПросмотр = Истина;
        Если ИмяЭл = "ДокументыОбъектСсылка" Тогда
            Элементы.Переместить(НовЭл, Элементы.Документы, Элементы.ДокументыЗапретитьПерезаполнениеАналитик);
        КонецЕсли;
                                       
    КонецЦикла;	

КонецПроцедуры // ЗаполнитьКолонкиТаблицыДокументов()

#КонецОбласти  
   
#КонецОбласти
