
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Скроем элементы, связанные с механизмом трансляции, если это стандартное решение.
	Сведения = бит_ОбщегоНазначения.ПолучитьСведенияОПрограмме();		
	Если СокрЛП(Сведения.Решение_БИТ) = "S" Тогда
		
		ЭлементТрансляция = Элементы.РежимЗаписи.СписокВыбора.НайтиПоЗначению("Трансляция");
		Элементы.РежимЗаписи.СписокВыбора.Удалить(ЭлементТрансляция);
		
		Элементы.ГруппаТрансляция.Видимость = Ложь;
		
	КонецЕсли;
	
	// Восстановим значения настроек
	Если Параметры.Свойство("СтруктураНастроек") Тогда
	
		Настройки = Параметры.СтруктураНастроек;		
		РежимСообщений 		= Настройки.РежимСообщений;
	    РежимПредупреждений = Настройки.РежимПредупреждений;
		РежимЗаписи 		= Настройки.РежимЗаписи;
		РежимЗаписиАналитик = Настройки.РежимЗаписиАналитик;
		ВестиПротоколТрансляции 		   = Настройки.ВестиПротоколТрансляции;
		ОтображатьПунктРассчитатьПартииМПЗ = Настройки.ОтображатьПунктРассчитатьПартииМПЗ;
		Объект.МаксимальныйРазмерПакета = Настройки.МаксимальныйРазмерПакета;
		
		// Массивы для трансляции
		МассивИсточники = Настройки.МассивИсточники;
		МассивПриемники = Настройки.МассивПриемники;
		
		Если МассивИсточники <> Неопределено Тогда
			Источники.ЗагрузитьЗначения(МассивИсточники);
		КонецЕсли;	
		Если МассивПриемники <> Неопределено Тогда
			Приемники.ЗагрузитьЗначения(МассивПриемники);
		КонецЕсли;	

		СписокКолонокТабДок 			   = Настройки.СписокКолонокТабДок;
		текВидыДополнительныхАналитикШапки = Настройки.ВидыДополнительныхАналитикШапки;
		
	КонецЕсли;             
	                                                                         
	// Список видов дополнительных аналитик для группового режима.
	ВыборкаАналитики = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.Выбрать();	
	Пока ВыборкаАналитики.Следующий() Цикл		
		ТекВидАналитики  = ВыборкаАналитики.Ссылка;
		СохрВидАналитики = текВидыДополнительныхАналитикШапки.НайтиПоЗначению(ТекВидАналитики);
		ВидыДополнительныхАналитикШапки.Добавить(ТекВидАналитики, ТекВидАналитики.Наименование, СохрВидАналитики <> Неопределено И СохрВидАналитики.Пометка);  				
	КонецЦикла;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФормуПодбораОбъектов(Элементы.Источники);

КонецПроцедуры // ИсточникиПередНачаломДобавления()

&НаКлиенте
Процедура ИсточникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораЭлемента("Источники", ВыбранноеЗначение);
	
КонецПроцедуры // ИсточникиОбработкаВыбора()

&НаКлиенте
Процедура ПриемникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФормуПодбораОбъектов(Элементы.Приемники);

КонецПроцедуры // ПриемникиПередНачаломДобавления()

&НаКлиенте
Процедура ПриемникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораЭлемента("Приемники", ВыбранноеЗначение);
	
КонецПроцедуры // ПриемникиОбработкаВыбора()

// Процедура - обработчик события "Очистка" некоторых реквизитов формы.
// 
&НаКлиенте
Процедура РеквизитФормыОчисткаОтмена(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РеквизитФормыОчисткаОтмена()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	СтруктураНастроек = Новый Структура;
	
	ПолучитьПараметрыДляТрансляции(СтруктураНастроек);
	текВидыДополнительныхАналитикШапки = Новый СписокЗначений;
	Для каждого ЗначениеСписка Из ВидыДополнительныхАналитикШапки Цикл
	 	Если ЗначениеСписка.Пометка Тогда
		 	текВидыДополнительныхАналитикШапки.Добавить(ЗначениеСписка.Значение, ЗначениеСписка.Представление, ЗначениеСписка.Пометка);		
		КонецЕсли; 
	КонецЦикла;
	                         	
	СтруктураНастроек.Вставить("РежимСообщений"	    			   , РежимСообщений);
	СтруктураНастроек.Вставить("РежимПредупреждений"			   , РежимПредупреждений);
	СтруктураНастроек.Вставить("РежимЗаписи"	    			   , РежимЗаписи);
	СтруктураНастроек.Вставить("РежимЗаписиАналитик"			   , РежимЗаписиАналитик);
	СтруктураНастроек.Вставить("ВестиПротоколТрансляции"	       , ВестиПротоколТрансляции);
	СтруктураНастроек.Вставить("ОтображатьПунктРассчитатьПартииМПЗ", ОтображатьПунктРассчитатьПартииМПЗ);
	СтруктураНастроек.Вставить("СписокКолонокТабДок"		       , СписокКолонокТабДок);
	СтруктураНастроек.Вставить("ВидыДополнительныхАналитикШапки"   , текВидыДополнительныхАналитикШапки);
	СтруктураНастроек.Вставить("МаксимальныйРазмерПакета"   , Объект.МаксимальныйРазмерПакета);
	
	СохранитьНастройки(СтруктураНастроек);
	 
	Закрыть(СтруктураНастроек);
	
КонецПроцедуры // ОК()

&НаКлиенте
Процедура ПодборИсточников(Команда)
	
	ОткрытьФормуПодбораОбъектов(Элементы.Источники);
	
КонецПроцедуры // ПодборИсточников()
 
&НаКлиенте
Процедура ПодборПриемников(Команда)
	
	ОткрытьФормуПодбораОбъектов(Элементы.Приемники);
	
КонецПроцедуры // ПодборПриемников()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СерверныеПроцедурыИФункцииОбщегоНазначения

// Процедура выполняет подготовку данных и вызов функции трансляции из общего модуля.
// 
// Параметры:
//  СтруктураНастроек - Структура.
// 
&НаСервере
Процедура ПолучитьПараметрыДляТрансляции(СтруктураНастроек)
	
	МассивИсточники = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(Источники.ВыгрузитьЗначения());
	МассивПриемники = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(Приемники.ВыгрузитьЗначения());
	
	КолВоИсточники  = МассивИсточники.Количество();
	КолВоПриемники  = МассивПриемники.Количество();
	
	Если КолВоИсточники = 0 Тогда
		МассивИсточники = Неопределено;
	КонецЕсли;
	
	Если КолВоПриемники = 0 Тогда
		МассивПриемники = Неопределено;
	КонецЕсли;
	
	СтруктураНастроек.Вставить("МассивИсточники", МассивИсточники);
	СтруктураНастроек.Вставить("МассивПриемники", МассивПриемники);
	
КонецПроцедуры
                  
// Процедура сохраняет настройки формы в хранилища общих настроек.
// 
&НаСервере
Процедура СохранитьНастройки(СтруктураНастроек) 
	
	ХранилищеОбщихНастроек.Сохранить("Обработка.бит_ГрупповоеРедактированиеДополнительныхАналитик", "Настройки", СтруктураНастроек);	
	      
КонецПроцедуры // СохранитьНастройки()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура открывает форму подбора объектов системы.
// 
// Параметры:
//  Владелец - Элемент Формы
// 
&НаКлиенте
Процедура ОткрытьФормуПодбораОбъектов(Владелец)

	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрБухгалтерии"));
	СписокВидовОбъектов.Добавить(ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрНакопления"));

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе"     , Ложь);
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Владелец);
	
КонецПроцедуры // ОткрытьФормуПодбораОбъектов()

// Процедура обрабатывает подбор элемента массива
// не позволяет добавлять повторные элементы.
// 
// Параметры:
//  ИмяТЧ  			  - Строка
//  ВыбранноеЗначение - СправочникСсылка.бит_ОбъектыСистемы.
// 
&НаКлиенте
Процедура ОбработкаВыбораЭлемента(ИмяТЧ, ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.бит_ОбъектыСистемы") Тогда
		
		НайденнаяСтрока = ЭтаФорма[ИмяТЧ].НайтиПоЗначению(ВыбранноеЗначение);
		
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ЭтаФорма[ИмяТЧ].Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбораЭлемента() 

#КонецОбласти

#КонецОбласти
