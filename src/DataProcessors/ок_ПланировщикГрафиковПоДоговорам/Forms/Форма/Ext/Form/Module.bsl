
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сценарий = Справочники.СценарииПланирования.рс_ЭкономическийУчет;
	Список.Параметры.УстановитьЗначениеПараметра("МассивСсылок", Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортИзExcelЗавершенаЗагрузка" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("МассивОбъектов")
			И ТипЗнч(Параметр.МассивОбъектов) = Тип("Массив") Тогда
			
			ПараметрОтбора = Список.Параметры.Элементы.Найти("МассивСсылок");
			Если ПараметрОтбора = Неопределено Тогда
				Список.Параметры.УстановитьЗначениеПараметра("МассивСсылок", Параметр.МассивОбъектов);
				Возврат;
			КонецЕсли;
			
			СписокСсылок = ПараметрОтбора.Значение;
			Для Каждого СтрокаМассива Из Параметр.МассивОбъектов Цикл
				
				НайденныйЭлементСписка = СписокСсылок.НайтиПоЗначению(СтрокаМассива);
				Если НайденныйЭлементСписка = Неопределено Тогда
					СписокСсылок.Добавить(СтрокаМассива);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИмпортИзExcelУдалить" Тогда
		ОбновитьСсылкиВСписке();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Вывести(Команда)
	ТабДок = ВывестиНаСервере();
	ТабДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикиДоговоров(Команда)
	
	ОчиститьСообщения();
	Если ПроверитьЗаполнение() 
		И ПроверитьПериоды() Тогда
		ЗаполнитьГрафикиДоговоровНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДУ(Команда)
	ОткрытьФорму("Обработка.бит_ИмпортОбъектовИзExcel.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСозданныеОбъекты(Команда)
	
	ВыделенныеДокументы = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УдалитьСозданныеОбъектыЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить объекты без возможности восстановления?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
    
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСозданныеОбъектыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСозданныеОбъектыНепосредственно();

	Элементы.Список.Обновить();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСсылкиВСписке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ДополнительныеУсловияПоДоговору.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.бит_ДополнительныеУсловияПоДоговору КАК бит_ДополнительныеУсловияПоДоговору
	               |ГДЕ
	               |	бит_ДополнительныеУсловияПоДоговору.Ссылка В(&СписокСсылок)";
	
	ПараметрОтбора = Список.Параметры.Элементы.Найти("МассивСсылок");
	Если ПараметрОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокСсылок = ПараметрОтбора.Значение;
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокСсылок.Очистить();
	Пока Выборка.Следующий() Цикл
		СписокСсылок.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Список.Параметры.УстановитьЗначениеПараметра("МассивСсылок", СписокСсылок);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСуммыФактическихЗатрат(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	рс_ДокументыПоID.Документ КАК Ссылка
	|ПОМЕСТИТЬ РегистраторыТекущий
	|ИЗ
	|	РегистрСведений.рс_ДокументыПоID КАК рс_ДокументыПоID
	|ГДЕ
	|	рс_ДокументыПоID.ID В(&СписокID_Текущий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	рс_ДокументыПоID.Документ КАК Ссылка
	|ПОМЕСТИТЬ РегистраторыПлановый
	|ИЗ
	|	РегистрСведений.рс_ДокументыПоID КАК рс_ДокументыПоID
	|ГДЕ
	|	рс_ДокументыПоID.ID В(&СписокID_Плановый)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(бит_Дополнительный_2ОборотыДтКт.СуммаУпрОборот) КАК СуммаУпрОборот
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.ОборотыДтКт(
	|			&НачалоТекущего,,
	|			Регистратор,
	|			СчетДт В (&МассивСчетов7),
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 = &ОбъектСтроительства
	|				И СубконтоДт2 = &ФункцияЦФО) КАК бит_Дополнительный_2ОборотыДтКт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыТекущий КАК Регистраторы
	|		ПО бит_Дополнительный_2ОборотыДтКт.Регистратор = Регистраторы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(бит_Дополнительный_2ОборотыДтКт.СуммаУпрОборот) КАК СуммаУпрОборот
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.ОборотыДтКт(
	|			&НачалоПланового,,
	|			Регистратор,
	|			СчетДт В (&МассивСчетов7),
	|			,
	|			,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 = &ОбъектСтроительства
	|				И СубконтоДт2 = &ФункцияЦФО) КАК бит_Дополнительный_2ОборотыДтКт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыПлановый КАК Регистраторы
	|		ПО бит_Дополнительный_2ОборотыДтКт.Регистратор = Регистраторы.Ссылка";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("МассивСчетов7", СтруктураПараметров.МассивСчетов7);
	Запрос.УстановитьПараметр("ОбъектСтроительства", СтруктураПараметров.ОбъектСтроительства);
	Запрос.УстановитьПараметр("ФункцияЦФО", СтруктураПараметров.ФункцияЦФО);
	Запрос.УстановитьПараметр("СписокID_Текущий", СтруктураПараметров.СписокID_Текущий);
	Запрос.УстановитьПараметр("СписокID_Плановый", СтруктураПараметров.СписокID_Плановый);
	Запрос.УстановитьПараметр("НачалоТекущего", ТекущийПериод.ДатаНачала);
	Запрос.УстановитьПараметр("НачалоПланового", ПлановыйПериод.ДатаНачала);

	СуммыФактическихЗатрат = Новый Структура("СуммаФактЗатратЗаТекущийПериод, СуммаФактЗатратЗаПлановыйПериод",0,0);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаТекущий = ПакетЗапросов[2].Выбрать();
	Если ВыборкаТекущий.Следующий() Тогда
		СуммыФактическихЗатрат.Вставить("СуммаФактЗатратЗаТекущийПериод", ВыборкаТекущий.СуммаУпрОборот);	
	КонецЕсли;
	
	ВыборкаПлановый = ПакетЗапросов[3].Выбрать();
	Если ВыборкаПлановый.Следующий() Тогда
		СуммыФактическихЗатрат.Вставить("СуммаФактЗатратЗаПлановыйПериод", ВыборкаПлановый.СуммаУпрОборот);	
	КонецЕсли;
	
	Возврат СуммыФактическихЗатрат;
	
КонецФункции

&НаСервере
Процедура ДобавитьСуммуВСтрокуТаблицы(СтрокаГрафикаИндекс, ЭтоПлановыйПериод, Период, СуммаБезНДСУпр)
	
	Если ЭтоПлановыйПериод Тогда
		Если Период = НачалоМесяца(ПлановыйПериод.ДатаНачала) Тогда
			ГрафикиДоговоров.Получить(СтрокаГрафикаИндекс).МесяцНачалоПериодаПлановый = СуммаБезНДСУпр; 
			Возврат;
		КонецЕсли;
		
		Если Период = НачалоМесяца(ПлановыйПериод.ДатаОкончания) Тогда
			ГрафикиДоговоров.Получить(СтрокаГрафикаИндекс).МесяцКонецПериодаПлановый = СуммаБезНДСУпр; 
			Возврат;
		КонецЕсли;

	Иначе   
		Если Период = НачалоМесяца(ТекущийПериод.ДатаНачала) Тогда
			ГрафикиДоговоров.Получить(СтрокаГрафикаИндекс).МесяцНачалоПериодаТекущий = СуммаБезНДСУпр; 
			Возврат;
		КонецЕсли;
		
		Если Период = НачалоМесяца(ТекущийПериод.ДатаОкончания) Тогда
			ГрафикиДоговоров.Получить(СтрокаГрафикаИндекс).МесяцКонецПериодаТекущий = СуммаБезНДСУпр; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяКолонки = СтрШаблон("_Месяц%1%2", ?(ЭтоПлановыйПериод, "Плановый", "Текущий"), Формат(Период, "ДФ=MMyyyy"));
	
	ГрафикиДоговоров.Получить(СтрокаГрафикаИндекс)[ИмяКолонки] = СуммаБезНДСУпр;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСчетов7(СтатьяОборотов)
	
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Счет
	|ИЗ
	|	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|ГДЕ
	|	бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СчетМСФО_СтатьяОборотов)
	|	И бит_СоответствияАналитик.ПраваяАналитика_1 = &СтатьяОборотов
	|	И ПОДСТРОКА(ВЫРАЗИТЬ(бит_СоответствияАналитик.ЛеваяАналитика_1 КАК ПланСчетов.бит_Дополнительный_2).Код, 0, 1) = ""7""";
	
	Запрос.УстановитьПараметр("СтатьяОборотов", СтатьяОборотов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОчиститьТаблицуГрафикиДоговоров()
	
	ГрафикиДоговоров.Очистить();
	УдаляемыеРеквизиты = Новый Массив;
	СчетчикКолонок = 0;       
	Таблица = РеквизитФормыВЗначение("ГрафикиДоговоров");
	Пока СчетчикКолонок < Таблица.Колонки.Количество() Цикл
		Если Лев(Таблица.Колонки[СчетчикКолонок].Имя, 1) = "_" Тогда
			УдаляемыеРеквизиты.Добавить("ГрафикиДоговоров." + Таблица.Колонки[СчетчикКолонок].Имя);
			Элементы.Удалить(Элементы["ГрафикиДоговоров" + Таблица.Колонки[СчетчикКолонок].Имя]);
			Таблица.Колонки.Удалить(Таблица.Колонки[СчетчикКолонок]);
		Иначе
			СчетчикКолонок = СчетчикКолонок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Таблица, "ГрафикиДоговоров");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикиДоговоровНаСервере()
	
	ОчиститьТаблицуГрафикиДоговоров();
	
	Элементы.ГрафикиДоговоровМесяцНачалоПериодаПлановый.Заголовок = СтрШаблон("%1(Плановый)", Формат(ПлановыйПериод.ДатаНачала, "ДФ='MMMM yyyy ""г.""'"));
	Элементы.ГрафикиДоговоровМесяцКонецПериодаПлановый.Заголовок  = СтрШаблон("%1(Плановый)", Формат(ПлановыйПериод.ДатаОкончания, "ДФ='MMMM yyyy ""г.""'")); 
	Элементы.ГрафикиДоговоровМесяцНачалоПериодаТекущий.Заголовок  = СтрШаблон("%1(Текущий)", Формат(ТекущийПериод.ДатаНачала, "ДФ='MMMM yyyy ""г.""'"));
	Элементы.ГрафикиДоговоровМесяцКонецПериодаТекущий.Заголовок   = СтрШаблон("%1(Текущий)", Формат(ТекущийПериод.ДатаОкончания, "ДФ='MMMM yyyy ""г.""'")); 
	
	Таблица = РеквизитФормыВЗначение("ГрафикиДоговоров");
	
	// Плановый период
	НовыеРеквизиты = Новый Массив;
	
	КоличествоМесяцев = Месяц(ПлановыйПериод.ДатаОкончания) - Месяц(ПлановыйПериод.ДатаНачала) - 1;
	Для НомерМесяца = 1 по КоличествоМесяцев Цикл
	
		Период = ДобавитьМесяц(ПлановыйПериод.ДатаНачала, НомерМесяца);
		
		ИмяКолонки = СтрШаблон("_МесяцПлановый%1",Формат(Период, "ДФ=MMyyyy"));
		НоваяКолонка = Таблица.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2))); 

		НовыеРеквизиты.Добавить(Новый РеквизитФормы(НоваяКолонка.Имя, НоваяКолонка.ТипЗначения,"ГрафикиДоговоров"));
	
	КонецЦикла;
	
	// Текущий период
	КоличествоМесяцев = Месяц(ТекущийПериод.ДатаОкончания) - Месяц(ТекущийПериод.ДатаНачала) - 1;
	Для НомерМесяца = 1 по КоличествоМесяцев Цикл
		
		Период = ДобавитьМесяц(ТекущийПериод.ДатаНачала, НомерМесяца);
		
		ИмяКолонки = СтрШаблон("_МесяцТекущий%1",Формат(Период, "ДФ=MMyyyy"));
		НоваяКолонка = Таблица.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2)));

		НовыеРеквизиты.Добавить(Новый РеквизитФормы(НоваяКолонка.Имя, НоваяКолонка.ТипЗначения,"ГрафикиДоговоров"));
	
	КонецЦикла; 

	ИзменитьРеквизиты(НовыеРеквизиты);
	
	/// Элементы Плановый период
	КоличествоМесяцев = Месяц(ПлановыйПериод.ДатаОкончания) - Месяц(ПлановыйПериод.ДатаНачала) - 1;
	Для НомерМесяца = 1 по КоличествоМесяцев Цикл

		Период = ДобавитьМесяц(ПлановыйПериод.ДатаНачала, НомерМесяца);

		ИмяКолонки = СтрШаблон("_МесяцПлановый%1",Формат(Период, "ДФ=MMyyyy"));
		
		Родитель = Элементы.ГрафикиДоговоровГруппа4;
		ПередЭлементом = Элементы.ГрафикиДоговоровМесяцКонецПериодаПлановый;

		НовыйЭлемент = Элементы.Добавить(СтрШаблон("ГрафикиДоговоров%1", ИмяКолонки), Тип("ПолеФормы"), Элементы.ГрафикиДоговоров);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = СтрШаблон("ГрафикиДоговоров.%1", ИмяКолонки);
		НовыйЭлемент.Заголовок = СтрШаблон("%1(Плановый)",Формат(Период, "ДФ='MMMM yyyy ""г.""'"));
		
		Элементы.Переместить(НовыйЭлемент, Родитель, ПередЭлементом);
	КонецЦикла;

	/// Элементы Текущий период
	КоличествоМесяцев = Месяц(ТекущийПериод.ДатаОкончания) - Месяц(ТекущийПериод.ДатаНачала) - 1;
	Для НомерМесяца = 1 по КоличествоМесяцев Цикл

		Период = ДобавитьМесяц(ТекущийПериод.ДатаНачала, НомерМесяца);

		ИмяКолонки = СтрШаблон("_МесяцТекущий%1",Формат(Период, "ДФ=MMyyyy"));

		Родитель = Элементы.ГрафикиДоговоровГруппа3;
		ПередЭлементом = Элементы.ГрафикиДоговоровМесяцКонецПериодаТекущий;

		НовыйЭлемент = Элементы.Добавить(СтрШаблон("ГрафикиДоговоров%1", ИмяКолонки), Тип("ПолеФормы"), Элементы.ГрафикиДоговоров);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = СтрШаблон("ГрафикиДоговоров.%1", ИмяКолонки);
		НовыйЭлемент.Заголовок = СтрШаблон("%1(Текущий)",Формат(Период, "ДФ='MMMM yyyy ""г.""'"));

		Элементы.Переместить(НовыйЭлемент, Родитель, ПередЭлементом);
	КонецЦикла;

	ЗначениеВРеквизитФормы(Таблица, "ГрафикиДоговоров");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).Организация КАК Организация,
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).Организация.Код КАК Организация_код,
	|	НАЧАЛОПЕРИОДА(бит_ГрафикиДоговоров.Период, МЕСЯЦ) КАК Период,
	|	ЛОЖЬ КАК ПлановыйПериод,
	|	бит_ГрафикиДоговоров.Сценарий КАК Сценарий,
	|	бит_ГрафикиДоговоров.Сценарий.Код КАК Сценарий_код,
	|	бит_ГрафикиДоговоров.ЦФО КАК ФункцияЦФО,
	|	бит_ГрафикиДоговоров.ЦФО.Код КАК ФункцияЦФО_код,
	|	бит_ГрафикиДоговоров.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_ГрафикиДоговоров.СтатьяОборотов.Код КАК СтатьяОборотов_код,
	|	бит_ГрафикиДоговоров.Контрагент КАК Контрагент,
	|	бит_ГрафикиДоговоров.Контрагент.Код КАК Контрагент_код,
	|	бит_ГрафикиДоговоров.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).Код КАК ДоговорКонтрагента_код,
	|	бит_ГрафикиДоговоров.Аналитика_2 КАК ОбъектСтроительства,
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.Аналитика_2 КАК Справочник.ОбъектыСтроительства).Код КАК ОбъектСтроительства_код,
	|	бит_ГрафикиДоговоров.Аналитика_4 КАК ID,
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов.Код КАК ВалютаДоговора_код,
	|	бит_ГрафикиДоговоров.СтавкаНДС КАК СтавкаНДС,
	|	бит_ГрафикиДоговоров.СуммаБезНДСУпр КАК СуммаБезНДСУпр
	|ИЗ
	|	РегистрНакопления.бит_ГрафикиДоговоров КАК бит_ГрафикиДоговоров
	|ГДЕ
	|	бит_ГрафикиДоговоров.Период МЕЖДУ &НачалоТекущийПериод И &КонецТекущийПериод
	|	И бит_ГрафикиДоговоров.Сценарий = &Сценарий
	|	И НЕ ЕСТЬNULL(бит_ГрафикиДоговоров.Аналитика_4, Неопределено) = Неопределено
	|	%ДополнительныеУсловия%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).Организация,
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).Организация.Код,
	|	НАЧАЛОПЕРИОДА(бит_ГрафикиДоговоров.Период, МЕСЯЦ),
	|	ИСТИНА,
	|	бит_ГрафикиДоговоров.Сценарий,
	|	бит_ГрафикиДоговоров.Сценарий.Код,
	|	бит_ГрафикиДоговоров.ЦФО,
	|	бит_ГрафикиДоговоров.ЦФО.Код,
	|	бит_ГрафикиДоговоров.СтатьяОборотов,
	|	бит_ГрафикиДоговоров.СтатьяОборотов.Код,
	|	бит_ГрафикиДоговоров.Контрагент,
	|	бит_ГрафикиДоговоров.Контрагент.Код,
	|	бит_ГрафикиДоговоров.ДоговорКонтрагента,
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).Код,
	|	бит_ГрафикиДоговоров.Аналитика_2,
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.Аналитика_2 КАК Справочник.ОбъектыСтроительства).Код,
	|	бит_ГрафикиДоговоров.Аналитика_4,
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов,
	|	ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов.Код,
	|	бит_ГрафикиДоговоров.СтавкаНДС,
	|	бит_ГрафикиДоговоров.СуммаБезНДСУпр
	|ИЗ
	|	РегистрНакопления.бит_ГрафикиДоговоров КАК бит_ГрафикиДоговоров
	|ГДЕ
	|	бит_ГрафикиДоговоров.Период МЕЖДУ &НачалоПлановыйПериод И &КонецПлановыйПериод
	|	И бит_ГрафикиДоговоров.Сценарий = &Сценарий
	|	И НЕ ЕСТЬNULL(бит_ГрафикиДоговоров.Аналитика_4, Неопределено) = Неопределено
	|	%ДополнительныеУсловия%
	|
	|ИТОГИ
	|	МАКСИМУМ(Организация_код),
	|	МАКСИМУМ(Сценарий_код),
	|	МАКСИМУМ(ФункцияЦФО_код),
	|	МАКСИМУМ(СтатьяОборотов_код),
	|	МАКСИМУМ(Контрагент_код),
	|	МАКСИМУМ(ДоговорКонтрагента_код),
	|	МАКСИМУМ(ОбъектСтроительства_код),
	|	МАКСИМУМ(ВалютаДоговора),
	|	МАКСИМУМ(ВалютаДоговора_код),
	|	МАКСИМУМ(СтавкаНДС),
	|	СУММА(СуммаБезНДСУпр)
	|ПО
	|	Организация,
	|	Сценарий,
	|	ФункцияЦФО,
	|	СтатьяОборотов,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ОбъектСтроительства,
	|	ПлановыйПериод,
	|	Период,
	|	ID";
	
	Запрос.УстановитьПараметр("НачалоТекущийПериод", ТекущийПериод.ДатаНачала);
	Запрос.УстановитьПараметр("КонецТекущийПериод", КонецДня(ТекущийПериод.ДатаОкончания));
	Запрос.УстановитьПараметр("НачалоПлановыйПериод", ПлановыйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПлановыйПериод", КонецДня(ПлановыйПериод.ДатаОкончания));
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	ДополнительныеУсловия = "";
	Если ЗначениеЗаполнено(ФункцияЦФО) Тогда
		ДополнительныеУсловия = ДополнительныеУсловия + " И бит_ГрафикиДоговоров.ЦФО = &ЦФО";
		Запрос.УстановитьПараметр("ЦФО", ФункцияЦФО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
		ДополнительныеУсловия = ДополнительныеУсловия + " И бит_ГрафикиДоговоров.СтатьяОборотов = &СтатьяОборотов";
		Запрос.УстановитьПараметр("СтатьяОборотов", СтатьяОборотов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСтроительства) Тогда
		ДополнительныеУсловия = ДополнительныеУсловия + " И бит_ГрафикиДоговоров.Аналитика_2 = &ОбъектСтроительства";
		Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДополнительныеУсловия = ДополнительныеУсловия + " И бит_ГрафикиДоговоров.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ДополнительныеУсловия = ДополнительныеУсловия + " И бит_ГрафикиДоговоров.ДоговорКонтрагента = &Договор";
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДополнительныеУсловия = ДополнительныеУсловия + " И ВЫРАЗИТЬ(бит_ГрафикиДоговоров.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДополнительныеУсловия%", ДополнительныеУсловия);

	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ВыборкаСценарий = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		Пока ВыборкаСценарий.Следующий() Цикл
			
			ВыборкаЦФО = ВыборкаСценарий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			Пока ВыборкаЦФО.Следующий() Цикл
				
				ВыборкаСтатьяОборотов = ВыборкаЦФО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
				Пока ВыборкаСтатьяОборотов.Следующий() Цикл
					
					МассивСчетов7 = Новый Массив;
					МассивСчетов7 = ПолучитьМассивСчетов7(ВыборкаСтатьяОборотов.СтатьяОборотов);
					
					ВыборкаКонтрагент = ВыборкаСтатьяОборотов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
					Пока ВыборкаКонтрагент.Следующий() Цикл
						
						ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
						Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
							
							ВыборкаОбъектСтроительства = ВыборкаДоговорКонтрагента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
							Пока ВыборкаОбъектСтроительства.Следующий() Цикл
								
								СписокID_Текущий = Новый Массив;
								СписокID_Плановый = Новый Массив;
								СтрокаГрафика = ГрафикиДоговоров.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаГрафика, ВыборкаОбъектСтроительства);
								СтрокаГрафика.РасходДоход 				= Перечисления.бит_РасходДоход.Расходование;
								СтрокаГрафика.ФормаОплаты 				= Перечисления.бит_ВидыДенежныхСредств.Безналичные;
								СтрокаГрафика.ВидОперации				= Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику;
								СтрокаГрафика.НачалоПериодаПланирования = ПлановыйПериод.ДатаНачала;
								СтрокаГрафика.СтавкаНДС_План 			= СтрокаГрафика.СтавкаНДС;
								
								СтрокаГрафикаИндекс = ГрафикиДоговоров.Индекс(СтрокаГрафика);
								
								ВыборкаПлановыйПериод = ВыборкаОбъектСтроительства.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
								Пока ВыборкаПлановыйПериод.Следующий() Цикл
									
									// Заполнение 3й и 4й области
									Если ВыборкаПлановыйПериод.ПлановыйПериод Тогда
										СтрокаГрафика.ИтогоПлановый = ВыборкаПлановыйПериод.СуммаБезНДСУпр;
									Иначе
										СтрокаГрафика.ИтогоТекущий = ВыборкаПлановыйПериод.СуммаБезНДСУпр;
									КонецЕсли;
									
									ВыборкаПериод = ВыборкаПлановыйПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
									Пока ВыборкаПериод.Следующий() Цикл
										ДобавитьСуммуВСтрокуТаблицы(СтрокаГрафикаИндекс, ВыборкаПериод.ПлановыйПериод, ВыборкаПериод.Период, ВыборкаПериод.СуммаБезНДСУпр);
									КонецЦикла;
									
									// Заполнение 5й области
									ВыборкаID = ВыборкаПлановыйПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ID"); 
									Пока ВыборкаID.Следующий() Цикл
										
										Если НЕ ЗначениеЗаполнено(ВыборкаID.ID) Тогда
											Продолжить;
										КонецЕсли;
										
										Если ВыборкаПлановыйПериод.ПлановыйПериод Тогда
											Если СписокID_Плановый.Найти(ВыборкаID.ID) = Неопределено Тогда
												СписокID_Плановый.Добавить(ВыборкаID.ID);
												СтрокаГрафика.СписокIDЗаПлановыйПериод = СтрокаГрафика.СписокIDЗаПлановыйПериод + ВыборкаID.ID + ";"
											КонецЕсли;
										Иначе	
											Если СписокID_Текущий.Найти(ВыборкаID.ID) = Неопределено Тогда
												СписокID_Текущий.Добавить(ВыборкаID.ID);
												СтрокаГрафика.СписокIDЗаТекущийПериод = СтрокаГрафика.СписокIDЗаТекущийПериод + ВыборкаID.ID + ";"
											КонецЕсли;
										КонецЕсли; 

									КонецЦикла;
									
								КонецЦикла;
								
								СтрокаГрафика.КоличествоIDТекущегоПериода = СписокID_Текущий.Количество();
								СтрокаГрафика.КоличествоIDПлановогоПериода = СписокID_Плановый.Количество();
								
								
								СтруктураПараметров = Новый Структура;
								СтруктураПараметров.Вставить("МассивСчетов7", МассивСчетов7);
								СтруктураПараметров.Вставить("Организация", ВыборкаОрганизация.Организация);
								СтруктураПараметров.Вставить("ОбъектСтроительства", СтрокаГрафика.ОбъектСтроительства);
								СтруктураПараметров.Вставить("ФункцияЦФО", СтрокаГрафика.ФункцияЦФО);
								СтруктураПараметров.Вставить("СписокID_Текущий", СписокID_Текущий);
								СтруктураПараметров.Вставить("СписокID_Плановый", СписокID_Плановый);
								
								СуммыФактическихЗатрат = Новый Структура("СуммаФактЗатратЗаТекущийПериод, СуммаФактЗатратЗаПлановыйПериод");
								СуммыФактическихЗатрат = ПолучитьСуммыФактическихЗатрат(СтруктураПараметров);
								
								СтрокаГрафика.СуммаФактЗатратЗаТекущийПериод  = СуммыФактическихЗатрат.СуммаФактЗатратЗаТекущийПериод;
								СтрокаГрафика.СуммаФактЗатратЗаПлановыйПериод = СуммыФактическихЗатрат.СуммаФактЗатратЗаПлановыйПериод;
								
								СтрокаГрафика.БазаПланирования = СтрокаГрафика.ИтогоТекущий;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПериоды()
	
	Результат = Истина;
	
	Если Не ЗначениеЗаполнено(ТекущийПериод.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана дата начала текущего периода",,ТекущийПериод);
		Результат = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийПериод.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана дата окончания текущего периода",,ТекущийПериод);
		Результат = Ложь;
	КонецЕсли;
	
	Если ТекущийПериод.ДатаНачала > ТекущийПериод.ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата начала текущего период должна быть меньше, или рано, чем дата окончания текущего периода",,ТекущийПериод);
		Результат = Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПлановыйПериод.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана дата начала планового периода",,ПлановыйПериод);
		Результат = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлановыйПериод.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана дата окончания планового периода",,ПлановыйПериод);
		Результат = Ложь;
	КонецЕсли;
	
	Если ПлановыйПериод.ДатаНачала > ПлановыйПериод.ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата начала планового период должна быть меньше, или рано, чем дата окончания планового периода",,ПлановыйПериод);
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВывестиНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("МакетДляВыгрузки");
	
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка|Колонка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка|Колонка");
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПерваяЗапись = Истина;
	Для Каждого Группа Из Элементы.ГрафикиДоговоров.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементТаблицы Из Группа.ПодчиненныеЭлементы Цикл
			ОбластьШапка.Параметры.ТекстЗаголовка = ЭлементТаблицы.Заголовок;
			Если ПерваяЗапись Тогда
				ТабДок.Вывести(ОбластьШапка);
				ПерваяЗапись = Ложь;
			Иначе 
				ТабДок.Присоединить(ОбластьШапка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ГрафикиДоговоров Цикл
		
		ПерваяЗапись = Истина;
		Для Каждого Группа Из Элементы.ГрафикиДоговоров.ПодчиненныеЭлементы Цикл
		
			Для Каждого ЭлементТаблицы Из Группа.ПодчиненныеЭлементы Цикл
							
				ОбластьСтрока.Параметры.ТекстЗначения = СтрокаТаблицы[СтрЗаменить(ЭлементТаблицы.ПутьКДанным,"ГрафикиДоговоров.","")];
				Если ПерваяЗапись Тогда
					ТабДок.Вывести(ОбластьСтрока);
					ПерваяЗапись = Ложь;
				Иначе 
					ТабДок.Присоединить(ОбластьСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТабДок.ВставитьОбласть(ТабДок.Область("R1"),ТабДок.Область("R1"), ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);

	ПерваяОбласть = ТабДок.Область("R1C1:R1C17");
	ПерваяОбласть.Объединить();
	ПерваяОбласть.Текст = "Аналитики графиков планирования";
	ПерваяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	
	ВтораяОбласть = ТабДок.Область("R1C18:R1C28");
	ВтораяОбласть.Объединить();
	ВтораяОбласть.Текст = "Создание документов планирования";
	ВтораяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;

	КоличествоКолонокТретьейОбласти = Месяц(ТекущийПериод.ДатаОкончания) - Месяц(ТекущийПериод.ДатаНачала) + 1;
	ТретьяОбласть = ТабДок.Область("R1C29:R1C" + Строка(29 + КоличествоКолонокТретьейОбласти));
	ТретьяОбласть.Объединить();
	ТретьяОбласть.Текст = "Графики текущего периода";
	ТретьяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;

	НачальнаяКолонкаЧетвертойОбласти = 29 + КоличествоКолонокТретьейОбласти + 1;
	КоличествоКолонокЧетвертойОбласти = Месяц(ПлановыйПериод.ДатаОкончания) - Месяц(ПлановыйПериод.ДатаНачала) + 1;	
	ЧетвертаяОбласть = ТабДок.Область("R1C" + НачальнаяКолонкаЧетвертойОбласти + ":R1C" + Строка(НачальнаяКолонкаЧетвертойОбласти + КоличествоКолонокЧетвертойОбласти));
	ЧетвертаяОбласть.Объединить();
	ЧетвертаяОбласть.Текст = "Графики планового периода";
	ЧетвертаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;

	НачальнаяКолонкаПятойОбласти = НачальнаяКолонкаЧетвертойОбласти + КоличествоКолонокЧетвертойОбласти + 1;
	ПятаяОбласть = ТабДок.Область("R1C" + НачальнаяКолонкаПятойОбласти + ":R1C" + Строка(НачальнаяКолонкаПятойОбласти + 5));
	ПятаяОбласть.Объединить();
	ПятаяОбласть.Текст = "Фактические затраты";
	ПятаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
	Возврат ТабДок;
КонецФункции

&НаСервере
Процедура УдалитьСозданныеОбъектыНепосредственно()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыделенныеДокументы = Элементы.Список.ВыделенныеСтроки;
	Для Каждого СтрокаТЧ Из ВыделенныеДокументы Цикл
		
		Попытка
			СтрокаДляСообщения = Строка(СтрокаТЧ.Ссылка);
			ТекОбъект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
			ТекОбъект.Удалить();
			
			ТекстСообщения = СтрШаблон(НСтр("ru='Удален объект - %1'"), СтрокаДляСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось удалить документ - %1, по причине %2'"), СтрокаДляСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		КонецПопытки;

	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстСообщения = НСтр("ru='Удаление завершено'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти



