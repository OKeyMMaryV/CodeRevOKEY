#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция инициализирует компоновщик для получения записей 
// регистра сведений бит_фн_РегистрацияСобытийОповещений для последующей обработки.
// 
// Параметры:
//  Компоновщик              - КомпоновщикНастроекСхемыКомпоновкиДанных.
//  УникальныйИдентификатор  - УникальныйИдентификатор.
// 
// Возвращаемое значение:
//   АдресСхемыКомпоновкиДанных   - Строка.
// 
Функция ИнициализироватьКомпоновщик(Компоновщик,УникальныйИдентификатор) Экспорт

	СхемаКомпоновкиДанных = Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений.ПолучитьМакет("СхемаКомпоновкиДанных");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
    Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции // ИнициализироватьКомпоновщик()

// Функция выполняет запрос по настройке компновщика.
// 
// Параметры:
//  Компоновщик  - КомпоновщикНастроекКомпоновкиДанных.
//  АдресСхемыКомпоновкиДанных  - Строка.
//  ВидОперации  - ПеречислениеСсылка.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ВыполнитьЗапросПоНастройке(Компоновщик,АдресСхемыКомпоновкиДанных,ВидОперации)  Экспорт

	 СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);

	// Выполняем компановку макета МакетСКД
	// (настройки берутся из схемы компановки данных и из пользовательских настроек).
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки());
	
	// Получаем запрос макета компановки данных
	Запрос = Новый Запрос(МакетСКД.НаборыДанных.РегистрацияОповещений.Запрос);
	
	// Для целей оптимизации необходима группировка по НастройкамДоставки.
	Если ВидОперации = Перечисления.бит_фн_ВидыОперацийОбработкиРегистрацииОповещений.СоздатьОповещения Тогда
		Запрос.Текст = Запрос.Текст +"
									|ИТОГИ ПО
									|	ВидСобытия,
									|	Оповещение,
									|	Пользователь";
	КонецЕсли;			
	
	// Устанавливаем параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;

	Результат = Запрос.Выполнить();

	Возврат Результат;
	
КонецФункции // ВыполнитьЗапросПоНастройке()

// Процедура устанавливает отбор компоновщика по статусу в зависимости от вида операции.
// 
// Параметры:                                                  
//  Компоновщик  - КомпоновщикНастроекКомпоновкиДанных.
//  ВидОперации  - ПеречислениеСсылка.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.
// 
Процедура УстановитьОтборыКомпоновщика(Компоновщик,ВидОперации) Экспорт

    Для каждого ЭлементОтбора Из Компоновщик.Настройки.Отбор.Элементы Цикл
	
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "СтатусРегистрации" Тогда
			
			// Установим отбор по статусу в зависимости от вида операции.
			ЭлементОтбора.Использование = Истина;
			Если ВидОперации = Перечисления.бит_фн_ВидыОперацийОбработкиРегистрацииОповещений.СоздатьОповещения Тогда
				
				ЭлементОтбора.ПравоеЗначение   = Перечисления.бит_фн_СтатусыРегистрацииОповещений.Зарегистрировано;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				
			ИначеЕсли ВидОперации = Перечисления.бит_фн_ВидыОперацийОбработкиРегистрацииОповещений.УдалитьОбработанныеЗаписи Тогда
				
				ЭлементОтбора.ПравоеЗначение   = Перечисления.бит_фн_СтатусыРегистрацииОповещений.Обработано;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;				
				
			КонецЕсли; 
			
			// Синхронизируем элемент пользовательских настроек с настройкой отбора.
			ЭлементПН = бит_ОбщегоНазначенияКлиентСервер.НайтиЭлементПользовательскойНастройки(ЭлементОтбора.ИдентификаторПользовательскойНастройки
			                                                                                   ,Компоновщик);
			Если НЕ ЭлементПН = Неопределено Тогда
				
				ЭлементПН.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
				ЭлементПН.Использование  = ЭлементОтбора.Использование;
				ЭлементПН.РежимОтображения = ЭлементОтбора.РежимОтображения;
				
			КонецЕсли; 
			 
		КонецЕсли; // Отбор по статусу
		
		//ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-08 (#3334)
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Период" Тогда
			Если ВидОперации = Перечисления.бит_фн_ВидыОперацийОбработкиРегистрацииОповещений.УдалитьОбработанныеЗаписи Тогда
				ДатаОтбора = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Согласование по почте", "Дата отбора очистки сообщений", Дата('00010101'));
				Если ЗначениеЗаполнено(ДатаОтбора) Тогда
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ПравоеЗначение = ДатаОтбора;
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	    //ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-08 (#3334)
	
	КонецЦикла; // По элементам отбора
	

КонецПроцедуры // УстановитьОтборыКомпоновщика()

// Процедура обрабатываеть события оповещений и формирует сообщения.
//
// Параметры:
//  Результат			 - РезультатЗапроса	- набор данных для формирования оповещений. Необязательный. 
//  РежимСообщений		 - Строка - Режим комменитрования хода выполнения. Подробности см. бит_ОбщегоНазначения.ОпределитьРежимыВывода.
//  ЗаписыватьОповещения - Булево - Записывать поповещения пользователям. Необязательный.
//  СоздаватьОбсуждения	 - Булево - Создавать обсуждения системы взаимодействия. Необязательный.
//
Процедура ОбработатьСобытияОповещений(Результат = Неопределено, РежимСообщений = "Нет", ЗаписыватьОповещения = Истина, СоздаватьОбсуждения = Ложь) Экспорт
	
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);			
	
	КэшАдресов = Новый ТаблицаЗначений;
	КэшАдресов.Колонки.Добавить("Получатель",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КэшАдресов.Колонки.Добавить("ВидКонтактнойИнформации");
	КэшАдресов.Колонки.Добавить("Адрес");
	
	КэшАдресов.Индексы.Добавить("Получатель,ВидКонтактнойИнформации");
		
	Если Результат = Неопределено Тогда
		 Результат = ПолучитьДанныеДляОбработки(Перечисления.бит_фн_ВидыОперацийОбработкиРегистрацииОповещений.СоздатьОповещения);
	КонецЕсли; 
	
	Если Результат.Пустой() Тогда
		 ТекстСообщения = НСтр("ru = 'Нет данных для обработки!'");
		 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		 
		 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-26 (#2989)
		 //Повторное формирование записей в РС "Оповещения" для просроченных ФВБ		 
		 ПовторноСформироватьОповещенияДляПросроченных(РежимыВывода, КэшАдресов);
		 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-26 (#2989)
		 
		 Возврат;
	КонецЕсли; 
	
	ТаблицаОповещений = Результат.Выгрузить();
	//+СБ ПИскунова #2691 
	//Отправлять письмо на почту будем только тем пользователям, у которых не установлен флаг в РС Права установки Виз
	ТаблицаПользователейДокументаБК = бит_БК_Общий.ПолучитьПользователей(ТаблицаОповещений.ВыгрузитьКолонку("Объект"));
	//-СБ ПИскунова #2691
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-23 (#2879)
	ТаблицаАналитика_2_СуммаРасходов = ПолучитьДопДанныеДляСтруктурыКонтекста(ТаблицаОповещений.ВыгрузитьКолонку("Объект"));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-23 (#2879)
	ТаблицаОповещений.Свернуть("Оповещение");
	МассивОповещений  = ТаблицаОповещений.ВыгрузитьКолонку("Оповещение");
	
	СоотвТаблиц = Справочники.бит_фн_Оповещения.СформироватьТаблицыПолучателей(МассивОповещений);
	
	ВыборкаВидСобытия = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВидСобытия.Следующий() Цикл
		
		ВыборкаОповещения = ВыборкаВидСобытия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОповещения.Следующий() Цикл
			
			ТаблицаПолучатели = СоотвТаблиц[ВыборкаОповещения.Оповещение];
			
			ВыборкаПользователь = ВыборкаОповещения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПользователь.Следующий() Цикл
				
				Выборка = ВыборкаПользователь.Выбрать();
				Ошибки  = Новый Массив(); 

				Если ВыборкаВидСобытия.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ДокументыДляВизирования 
					ИЛИ ВыборкаВидСобытия.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуНачислений 
					ИЛИ ВыборкаВидСобытия.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуПлатежей 
                    ИЛИ ВыборкаВидСобытия.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ОкончаниеСрокаДействияДоговора Тогда
					
					// Для данного вида события несколько записей регистрации формируем в одно сообщение.
					СтруктураКонтекст = Новый Структура;
					СтруктураКонтекст.Вставить("ВидСобытия", ВыборкаВидСобытия.ВидСобытия);
					СтруктураКонтекст.Вставить("Получатель", Справочники.Пользователи.ПустаяСсылка());
					СтруктураКонтекст.Вставить("ВыборкаДокументов", Выборка);
					СтруктураКонтекст.Вставить("Пользователь"	  , ВыборкаПользователь.Пользователь);
										
					//+СБ Пискунова #2691 (добален параметр)
					//ОповещенияПолучателям = СформироватьОповещенияПолучателям(ТаблицаПолучатели, СтруктураКонтекст, КэшАдресов, РежимыВывода, Ошибки);
					ОповещенияПолучателям = СформироватьОповещенияПолучателям(ТаблицаПолучатели, СтруктураКонтекст, КэшАдресов, РежимыВывода, Ошибки, ТаблицаПользователейДокументаБК);
					//_СБ Пискунова #2691 (добален параметр)

					Если СоздаватьОбсуждения Тогда
						бит_фн_ОповещенияСервер.СоздатьОбсуждения(ОповещенияПолучателям);
					КонецЕсли; 
					Если ЗаписыватьОповещения Тогда
						Для каждого ПараметрыОповещения Из ОповещенияПолучателям Цикл
							ЗаписатьОповещение(ПараметрыОповещения, РежимыВывода.ВыводитьОшибки);
						КонецЦикла; 
					КонецЕсли; 
					
					Выборка.Сбросить();
					
					Если ВыборкаВидСобытия.ВидСобытия <> Перечисления.бит_фн_ВидыСобытийОповещений.ДокументыДляВизирования  Тогда
						
						СтрКонтрагент = ТаблицаПолучатели.Найти("ТекущийОбъект.Контрагент", "Получатель");
                        						
						Если СтрКонтрагент <> Неопределено Тогда
							
							ДопТаблицаПолучатели = ТаблицаПолучатели.СкопироватьКолонки();
							НоваяСтрока = ДопТаблицаПолучатели.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрКонтрагент);
						
						    // Каждой записи регистрации оповещения будет соответствовать одно сообщение.
							Пока Выборка.Следующий() Цикл
								
								СтруктураКонтекст = СформироватьСтруктуруКонтекст(Выборка);
								
								//+СБ Пискунова #2691 (добален параметр)
								//ОповещенияПолучателям = СформироватьОповещенияПолучателям(ДопТаблицаПолучатели, СтруктураКонтекст, КэшАдресов, РежимыВывода, Ошибки);
								ОповещенияПолучателям = СформироватьОповещенияПолучателям(ДопТаблицаПолучатели, СтруктураКонтекст, КэшАдресов, РежимыВывода, Ошибки, ТаблицаПользователейДокументаБК);
								//-СБ Пискунова #2691 (добален параметр)

								Если СоздаватьОбсуждения Тогда
									бит_фн_ОповещенияСервер.СоздатьОбсуждения(ОповещенияПолучателям);
								КонецЕсли;
								Если ЗаписыватьОповещения Тогда
									Для каждого ПараметрыОповещения Из ОповещенияПолучателям Цикл
										ЗаписатьОповещение(ПараметрыОповещения, РежимыВывода.ВыводитьОшибки);
									КонецЦикла; 
								КонецЕсли; 
							КонецЦикла;
							Выборка.Сбросить();
						КонецЕсли;
					КонецЕсли;

					// Отметим событие оповещения как обработанное.
					Если ЗаписыватьОповещения Тогда
						Пока Выборка.Следующий() Цикл
							ОтметитьОбработанныеОповещения(Выборка, РежимыВывода, Ошибки);
						КонецЦикла;
					КонецЕсли; 
										
				Иначе
					// Каждой записи регистрации оповещения будет соответствовать одно сообщение.
					Пока Выборка.Следующий() Цикл
						
						СтруктураКонтекст = СформироватьСтруктуруКонтекст(Выборка);
						
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-18 (#3393)
						Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета") 
						   И ЗначениеЗаполнено(Выборка.Объект.ок_ВидКорректировки)
						Тогда 
							СтруктураКонтекст = бит_Визирование.ПолучитьСтруктуруКонтекстаДляПисьма_ККЗБ(Выборка.Объект, Выборка.Оповещение.ШаблонСообщения, СтруктураКонтекст);
						КонецЕсли;     				
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-18 (#3393)
						
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-23 (#2879)
						СтрокаТаблицы = ТаблицаАналитика_2_СуммаРасходов.Найти(Выборка.Объект);
						СтруктураКонтекст.Вставить("Аналитика_2"	,?(СтрокаТаблицы = Неопределено,"",СтрокаТаблицы.Аналитика_2));
						СтруктураКонтекст.Вставить("СуммаРасходов"	,?(СтрокаТаблицы = Неопределено,"",СтрокаТаблицы.СуммаРасходов));
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-23 (#2879)
						
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-12 (#2980)
						пОтборБК = Новый Структура;
						пОтборБК.Вставить("Виза"			,	Выборка.Виза);
						пОтборБК.Вставить("Пользователь"	,	СтруктураКонтекст.Пользователь);
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-21 (#3393)
						//пОтборБК.Вставить("ЭтоЗаместитель"	,	1);
						//Заменено на:
						Если НЕ ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета") 
						    //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-01-14 (#3576)
							//ИЛИ ЗначениеЗаполнено(Выборка.Объект.ок_ВидКорректировки)
							//Заменено на:
							ИЛИ НЕ ЗначениеЗаполнено(Выборка.Объект.ок_ВидКорректировки)
							//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-01-14 (#3576)							
						Тогда
							пОтборБК.Вставить("ЭтоЗаместитель"	,	1);
						КонецЕсли;
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-21 (#3393)
						
						Если ТаблицаПользователейДокументаБК.НайтиСтроки(пОтборБК).Количество()>0 Тогда
							СтруктураКонтекст.Вставить("ИД",	 Выборка.ИД);
						КонецЕсли;
						//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-12 (#2980)
						
						//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
						//ОповещенияПолучателям = СформироватьОповещенияПолучателям(ТаблицаПолучатели, СтруктураКонтекст, КэшАдресов, РежимыВывода, Ошибки);
						//Если СоздаватьОбсуждения Тогда
						//	бит_фн_ОповещенияСервер.СоздатьОбсуждения(ОповещенияПолучателям);
						//КонецЕсли; 
						//Если ЗаписыватьОповещения Тогда
						//	Для каждого ПараметрыОповещения Из ОповещенияПолучателям Цикл
						//		ЗаписатьОповещение(ПараметрыОповещения, РежимыВывода.ВыводитьОшибки);
						//	КонецЦикла; 
						//	// Отметим событие оповещения как обработанное.
						//	ОтметитьОбработанныеОповещения(Выборка, РежимыВывода, Ошибки);
						//КонецЕсли; 
						ОповещенияПолучателям = СформироватьОповещенияПолучателям(ТаблицаПолучатели, СтруктураКонтекст, КэшАдресов, РежимыВывода, Ошибки, ТаблицаПользователейДокументаБК);
						Если СоздаватьОбсуждения Тогда
							бит_фн_ОповещенияСервер.СоздатьОбсуждения(ОповещенияПолучателям);
						КонецЕсли; 
						Если ЗаписыватьОповещения Тогда
							Для каждого ПараметрыОповещения Из ОповещенияПолучателям Цикл
								ЗаписатьОповещение(ПараметрыОповещения, РежимыВывода.ВыводитьОшибки);
							КонецЦикла; 
							// Отметим событие оповещения как обработанное.
							//+СБ. ПискуноваВ 24.05.2017 #2691
							//ОтметитьОбработанныеОповещения(Выборка, РежимыВывода, Ошибки);
							Если ТипЗнч(Выборка.Объект) = ТипЗнч(Документы.бит_ФормаВводаБюджета.ПустаяСсылка()) Тогда 
								Если Выборка.Объект.СБ_ПроцессЗапущен Тогда
									ОтметитьОбработанныеОповещения(Выборка, РежимыВывода, Ошибки);
								КонецЕсли;
							Иначе
								ОтметитьОбработанныеОповещения(Выборка, РежимыВывода, Ошибки); 
							КонецЕсли;
							//-СБ. ПискуноваВ 24.05.2017 #2691
						КонецЕсли; 						
						//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
					КонецЦикла;
				КонецЕсли; // Определена таблица получателей
			КонецЦикла; // Пользователи
		КонецЦикла; // Оповещения
	КонецЦикла; // Обход видов событий
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-26 (#2989)
	//Повторное формирование записей в РС "Оповещения" для просроченных ФВБ
	ПовторноСформироватьОповещенияДляПросроченных(РежимыВывода, КэшАдресов);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-26 (#2989)
	
КонецПроцедуры // ОбработатьСобытияОповещений()

// Процедура удаляет обработанные записи регистра бит_фн_РегистрацияСобытийОповещений.
// 
// Параметры:
//  РезультатЗапроса  - РезультатЗапроса.
//  РежимСообщений    - Строка.
// 
Процедура УдалитьОбработанныеЗаписи(РезультатЗапроса = Неопределено,РежимСообщений = "Нет") Экспорт
	
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);		
	
	Если РезультатЗапроса = Неопределено Тогда
		
		РезультатЗапроса = ПолучитьДанныеДляОбработки(Перечисления.бит_фн_ВидыОперацийОбработкиРегистрацииОповещений.УдалитьОбработанныеЗаписи);
		
	КонецЕсли; 
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для обработки!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Ном = 1;
	КоличествоЗаписей = Выборка.Количество();	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.бит_фн_РегистрацияСобытийОповещений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
		
		Попытка
			
			МенеджерЗаписи.Удалить();
			
		Исключение
			
			Если РежимыВывода.ВыводитьОшибки Тогда
			
				ТекстСообщения = НСтр("ru = 'Не удалось удалить запись о регистрации события ""%1%"" для объекта ""%2%"" за период ""%3%""!'");
				ТекстСообщения = ТекстСообщения+ОписаниеОшибки();
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
				                                                                            ,Строка(МенеджерЗаписи.ВидСобытия)
																							,Строка(МенеджерЗаписи.Объект)
																							,Строка(МенеджерЗаписи.Период));
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли; 
			
			
		КонецПопытки; 
		
		Ном = Ном+1;
		Если Ном%10 = 0 Тогда
			
			ТекстСостояния = НСтр("ru = 'Удаление обработанных записей %1% из %2%'");
			ТекстСостояния = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСостояния
																						,Строка(Ном)
																						,Строка(КоличествоЗаписей));
			бит_ОбщегоНазначения.бит_Состояние(ТекстСостояния);
			
		КонецЕсли; 
		
		
	КонецЦикла; 
	
	Если РежимыВывода.ВыводитьИнформацию Тогда
		
		ТекстСообщения = НСтр("ru = 'Удаление обработанных записей завершено.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 
	
	
КонецПроцедуры // УдалитьОбработанныеЗаписи()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает записи регистра бит_фн_Оповещения для дальнейшей обработки. 
// Используется при программном вызове действий с записями регистра.
// 
// Параметры:
//  ВидОперации  - ПеречислениеСсылка.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ПолучитьДанныеДляОбработки(ВидОперации)

 	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресСКД  = ИнициализироватьКомпоновщик(Компоновщик,Новый УникальныйИдентификатор);
	УстановитьОтборыКомпоновщика(Компоновщик,ВидОперации);
	Результат = ВыполнитьЗапросПоНастройке(Компоновщик,АдресСКД,ВидОперации);
    УдалитьИзВременногоХранилища(АдресСКД);
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеДляОбработки()

Процедура ПодготовитьВыборкуЗаписейДляОтправки(ВыборкаДокументов, ПользовательскоеУсловие)
	
	МассивТиповОбъекта = Новый Массив;
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_ФормаВводаБюджета"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_КорректировкаБюджета"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_БюджетнаяОперация"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_КорректировкаКонтрольныхЗначений"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_ПроектДоговора"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_РеестрПлатежей"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_ВерсияОтчета"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_мто_ЗаявкаНаЗакупку"));
	МассивТиповОбъекта.Добавить(Тип("ДокументСсылка.бит_мто_ЗаявкаНаПотребность"));
	
	// Подготовим таблицу значений.
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Период",       Новый ОписаниеТипов("Дата"));
	ТаблицаДокументов.Колонки.Добавить("ВидСобытия",   Новый ОписаниеТипов("ПеречислениеСсылка.бит_фн_ВидыСобытийОповещений"));	
	ТаблицаДокументов.Колонки.Добавить("Оповещение",   Новый ОписаниеТипов("СправочникСсылка.бит_фн_Оповещения"));
	ТаблицаДокументов.Колонки.Добавить("Объект",       Новый ОписаниеТипов(МассивТиповОбъекта));
	ТаблицаДокументов.Колонки.Добавить("Статус",       Новый ОписаниеТипов("СправочникСсылка.бит_СтатусыОбъектов"));
	ТаблицаДокументов.Колонки.Добавить("Виза",         Новый ОписаниеТипов("СправочникСсылка.бит_Визы"));
	ТаблицаДокументов.Колонки.Добавить("Решение",      Новый ОписаниеТипов("СправочникСсылка.бит_ВидыРешенийСогласования"));
	ТаблицаДокументов.Колонки.Добавить("Комментарий",  Новый ОписаниеТипов("Строка"));	
	ТаблицаДокументов.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаДокументов.Колонки.Добавить("Получатель",   Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	// Заполняем ТЗ по пользовательскому условию.
	Пока ВыборкаДокументов.Следующий() Цикл
		флУсловиеВыполнено = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(ПользовательскоеУсловие
																			,СформироватьСтруктуруКонтекст(ВыборкаДокументов));
		Если флУсловиеВыполнено Тогда
			НоваяСтрока = ТаблицаДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДокументов);			
		КонецЕсли; 																	  
	КонецЦикла;
	
	// Преобразуем ТЗ в выборку из запроса для формирования сообщений по шаблону.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Период КАК Период,
	|	ТаблицаДокументов.ВидСобытия КАК ВидСобытия,
	|	ТаблицаДокументов.Оповещение КАК Оповещение,
	|	ТаблицаДокументов.Объект КАК Объект,
	|	ТаблицаДокументов.Статус КАК Статус,
	|	ТаблицаДокументов.Виза КАК Виза,
	|	ТаблицаДокументов.Решение КАК Решение,
	|	ТаблицаДокументов.Комментарий КАК Комментарий,
	|	ТаблицаДокументов.Пользователь КАК Пользователь,
	|	ТаблицаДокументов.Получатель КАК Получатель
	|ПОМЕСТИТЬ ТабВрем
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВрем.Период КАК Период,
	|	ТабВрем.ВидСобытия КАК ВидСобытия,
	|	ТабВрем.Оповещение КАК Оповещение,
	|	ТабВрем.Объект КАК Объект,
	|	ТабВрем.Статус КАК Статус,
	|	ТабВрем.Виза КАК Виза,
	|	ТабВрем.Решение КАК Решение,
	|	ТабВрем.Комментарий КАК Комментарий,
	|	ТабВрем.Пользователь КАК Пользователь,
	|	ТабВрем.Получатель КАК Получатель
	|ИЗ
	|	ТабВрем КАК ТабВрем";
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
		
КонецПроцедуры

// Процедура формирует сообщения указанным получателям.
// 
// Параметры:
// 	ТаблицаПолучатели - таблица значений.
// 	СтруктураКонтекст - структура.
// 	КэшАдресов - таблицазначений.
// 	РежимыВывода - структура.
// 
//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-08-29 (#2691)
//Перенос из базы "EIS_ForTest"
//Функция СформироватьОповещенияПолучателям(ТаблицаПолучатели, СтруктураКонтекст, КэшАдресов, РежимыВывода, Ошибки)
Функция СформироватьОповещенияПолучателям(ТаблицаПолучатели, СтруктураКонтекст, КэшАдресов, РежимыВывода, Ошибки, ТаблицаПользователейДокументаБК)
//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-08-29 (#2691)

	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-03 (#4271)
	//ОповещенияПолучателям = Новый Массив();
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-03 (#4271)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-12 (#2879)
	//Если ТаблицаПолучатели = Неопределено Тогда
	//	Возврат ОповещенияПолучателям; 
	//КонецЕсли;
	//
	//Кроме = Новый Соответствие;
	//
	//Для Каждого СтрокаПолучатели Из ТаблицаПолучатели Цикл
	//	
	//	// Для определенных видов событий необходимо преобразовать выборку по пользовательскому условию.
	//	Если ЗначениеЗаполнено(СтрокаПолучатели.ПользовательскоеУсловие) Тогда
	//		Если СтруктураКонтекст.Свойство("ВыборкаДокументов") Тогда
	//			ПодготовитьВыборкуЗаписейДляОтправки(СтруктураКонтекст.ВыборкаДокументов, СтрокаПолучатели.ПользовательскоеУсловие);
	//			Если СтруктураКонтекст.ВыборкаДокументов.Количество() = 0 Тогда
	//				Продолжить;
	//			КонецЕсли;
	//		Иначе
	//			флУсловиеВыполнено = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(СтрокаПолучатели.ПользовательскоеУсловие
	//																				,СтруктураКонтекст);
	//			Если НЕ флУсловиеВыполнено Тогда
	//				Продолжить;				
	//			КонецЕсли; 																	  
	//		КонецЕсли; 
	//	КонецЕсли;
	//	
	//	ЭтоКроме = ?(СтрокаПолучатели.УсловиеВхождения = "Кроме",Истина,Ложь);
	//	
	//	// Получаем текущего пользователя различными способами.
	//	ТекущийПолучатель = Неопределено;
	//	Если ТипЗнч(СтрокаПолучатели.Получатель) = Тип("СправочникСсылка.Пользователи") 
	//		 ИЛИ ТипЗнч(СтрокаПолучатели.Получатель) = Тип("СправочникСсылка.Контрагенты") 
	//		 ИЛИ ТипЗнч(СтрокаПолучатели.Получатель) = Тип("СправочникСсылка.ФизическиеЛица") 
	//		 ИЛИ ТипЗнч(СтрокаПолучатели.Получатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	//		 
	//		 Если СтруктураКонтекст.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ДоступнаВиза 
	//			 И СтрокаПолучатели.Получатель <> СтруктураКонтекст.Пользователь Тогда
	//			 Продолжить;
	//		 КонецЕсли;
	//		 
	//		 ТекущийПолучатель = СтрокаПолучатели.Получатель;
	//			 
	//	ИначеЕсли ТипЗнч(СтрокаПолучатели.Получатель) = Тип("Строка") Тогда
	//		Если СтруктураКонтекст.Свойство("ТекущийОбъект") Тогда
	//			Если бит_ОбщегоНазначения.ЭтоСемействоБП() 
	//			   И ТипЗнч(СтруктураКонтекст.ТекущийОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	//			   	СтрокаКод = "СтруктураКонтекст.ТекущийОбъект.Владелец";
	//			Иначе
	//				СтрокаКод = "СтруктураКонтекст."+СтрокаПолучатели.Получатель;
	//			КонецЕсли;	
	//			
	//			Если СтруктураКонтекст.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ИзмененоСостояниеЗадачи 
	//				И СтрокаПолучатели.Получатель = "ТекущийОбъект.Исполнитель" 
	//				И ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураКонтекст.ТекущийОбъект, "РольИсполнителя")) Тогда
	//				ТекущийПолучатель = ВычислитьПолучателяИзмененоСостояниеЗадачи(СтруктураКонтекст.ТекущийОбъект);
	//			Иначе
	//				ТекущийПолучатель = ВычислитьПолучателя(СтруктураКонтекст, СтрокаКод);
	//			КонецЕсли;					
	//		Иначе
	//			СтрокаКод = "СтруктураКонтекст."+СтрокаПолучатели.Получатель;
	//			ТекущийПолучатель = ВычислитьПолучателя(СтруктураКонтекст,СтрокаКод);
	//		КонецЕсли;
	//	ИначеЕсли ТипЗнч(СтрокаПолучатели.Получатель) = Тип("СправочникСсылка.бит_ПользовательскиеФункции") Тогда	 
	//		ТекущийПолучатель = бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункцию(СтрокаПолучатели.Получатель,СтруктураКонтекст);
	//	КонецЕсли; 
	//	
	//	// ++ NB 
	//	// Унификация кода: ~ ТипЗнч(ТекущийПолучатель) <> Тип("Массив")
	//	ТекущийПолучатель = ПреобразоватьВМассив(ТекущийПолучатель); 
	//	// -- NB 
	//	// Проверим пользователя, на вхождение в перечень исключаемых
	//	// добавим в результирующий массив получателей.
	//	Если ТипЗнч(ТекущийПолучатель) = Тип("Массив") Тогда
	//		
	//		Для Каждого Элемент Из ТекущийПолучатель Цикл
	//			
	//			флДобавлять = ПроверитьВозможностьДобавленияПолучателя(Кроме,ЭтоКроме,Элемент);
	//			
	//			Если флДобавлять Тогда
	//				
	//				СтруктураКонтекст.Получатель = Элемент;
	//				
	//				Если СтруктураКонтекст.Свойство("ВыборкаДокументов") Тогда
	//					СтруктураКонтекст.ВыборкаДокументов.Сбросить();
	//				КонецЕсли;

	//				ТочкиДоставки = ПодготовитьТочкиДоставки(СтрокаПолучатели.ВидКонтактнойИнформации, 
	//									СтрокаПолучатели.ШаблонСообщения, СтрокаПолучатели.НастройкаДоставки,
	//									СтруктураКонтекст,КэшАдресов,РежимыВывода.ВыводитьОшибки,Ошибки); 
	//									
	//				Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
	//					ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, СтрокаПолучатели.ШаблонСообщения, 
	//											СтрокаПолучатели.НастройкаДоставки, СтруктураКонтекст, 
	//											СтрокаПолучатели.СоздаватьОбсуждение, РежимыВывода.ВыводитьОшибки);
	//					ОповещенияПолучателям.Добавить(ПараметрыОповещения);
	//				КонецЦикла; 					
	//			КонецЕсли; 
	//		КонецЦикла; 
	//	// ++ NB 
	//	// ~ ТипЗнч(ТекущийПолучатель) <> Тип("Массив")
	//	// -- NB 
	//	//ИначеЕсли ТипЗнч(ТекущийПолучатель) = Тип("СправочникСсылка.Пользователи") 
	//	//	     ИЛИ ТипЗнч(ТекущийПолучатель) = Тип("СправочникСсылка.Контрагенты")  
	//	//	     ИЛИ ТипЗнч(ТекущийПолучатель) = Тип("СправочникСсылка.ФизическиеЛица") 
	//	//	     ИЛИ ТипЗнч(ТекущийПолучатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда	
	//	//	
	//	//	флДобавлять = ПроверитьВозможностьДобавленияПолучателя(Кроме,ЭтоКроме,ТекущийПолучатель);
	//	//	Если флДобавлять Тогда
	//	//		
	//	//		СтруктураКонтекст.Получатель = ТекущийПолучатель;
	//	//		
	//	//		Если СтруктураКонтекст.Свойство("ВыборкаДокументов") Тогда
	//	//			СтруктураКонтекст.ВыборкаДокументов.Сбросить();
	//	//		КонецЕсли;
	//	//		
	//	//		ТочкиДоставки = ПодготовитьТочкиДоставки(СтрокаПолучатели.ВидКонтактнойИнформации, 
	//	//							СтрокаПолучатели.ШаблонСообщения, СтрокаПолучатели.НастройкаДоставки,
	//	//							СтруктураКонтекст,КэшАдресов,РежимыВывода.ВыводитьОшибки,Ошибки); 
	//	//							
	//	//		Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
	//	//			ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, СтрокаПолучатели.ШаблонСообщения, 
	//	//									СтрокаПолучатели.НастройкаДоставки, СтруктураКонтекст, РежимыВывода.ВыводитьОшибки);
	//	//			//ЗаписатьОповещение(ПараметрыОповещения, РежимыВывода.ВыводитьОшибки);
	//	//			ОповещенияПолучателям.Добавить(ПараметрыОповещения);
	//	//		КонецЦикла; 					
	//	//	КонецЕсли; 
	//	КонецЕсли; 
	//КонецЦикла; // По строкам таблицы получателей
	
	//+СБ Пискунова #2691
	//НайденнаяСтрока = ТаблицаПолучатели.Найти(СтруктураКонтекст.Получатель,"Получатель");
	//Если НайденнаяСтрока <> Неопределено Тогда 
	//	Если ТаблицаПользователейДокументаБК = Неопределено Тогда
	//		//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//		//ЗаписатьОповещение(Справочники.ВидыКонтактнойИнформации.EmailИнициатора
	//		//,НайденнаяСтрока.ШаблонСообщения
	//		//,НайденнаяСтрока.НастройкаДоставки
	//		//,СтруктураКонтекст
	//		//,КэшАдресов
	//		//,РежимыВывода.ВыводитьОшибки);
	//		ТочкиДоставки = ПодготовитьТочкиДоставки(Справочники.ВидыКонтактнойИнформации.EmailИнициатора, 
	//							НайденнаяСтрока.ШаблонСообщения,НайденнаяСтрока.НастройкаДоставки,
	//							СтруктураКонтекст,КэшАдресов,РежимыВывода.ВыводитьОшибки,Ошибки); 
	//							
	//		Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
	//			ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, НайденнаяСтрока.ШаблонСообщения, 
	//									НайденнаяСтрока.НастройкаДоставки, СтруктураКонтекст, 
	//									НайденнаяСтрока.СоздаватьОбсуждение, РежимыВывода.ВыводитьОшибки);
	//			ОповещенияПолучателям.Добавить(ПараметрыОповещения);
	//		КонецЦикла; 
	//		//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	//	Иначе 
	//		Отбор = Новый Структура();
	//		Отбор.Вставить("Пользователь", СтруктураКонтекст.Пользователь);	
	//		Отбор.Вставить("Объект", СтруктураКонтекст.ТекущийОбъект);
	//		//Отбор.Вставить("Виза",СтруктураКонтекст.Виза);
	//		НайденнаяСтрокаИзТаблицыПользователейПоДокументу =  ТаблицаПользователейДокументаБК.НайтиСтроки(Отбор);
	//		Если НайденнаяСтрокаИзТаблицыПользователейПоДокументу.Количество()  > 0  Тогда
	//			Для каждого Элемент из  НайденнаяСтрокаИзТаблицыПользователейПоДокументу Цикл
	//				Если Элемент.Виза = Справочники.бит_ГруппыВиз.ВсеВизы или СтруктураКонтекст.Виза = Элемент.Виза Тогда
	//					
	//					СтруктураКонтекст.Получатель = Элемент.Инициатор;
	//					//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//					//ЗаписатьОповещение(Справочники.ВидыКонтактнойИнформации.EmailИнициатора
	//					//,СтруктураКонтекст.Оповещение.ШаблонСообщения
	//					//,СтруктураКонтекст.Оповещение.НастройкаДоставки
	//					//,СтруктураКонтекст
	//					//,КэшАдресов
	//					//,РежимыВывода.ВыводитьОшибки);									
	//					ТочкиДоставки = ПодготовитьТочкиДоставки(Справочники.ВидыКонтактнойИнформации.EmailИнициатора, 
	//										СтруктураКонтекст.Оповещение.ШаблонСообщения, СтруктураКонтекст.Оповещение.НастройкаДоставки,
	//										СтруктураКонтекст,КэшАдресов,РежимыВывода.ВыводитьОшибки,Ошибки); 
	//										
	//					Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
	//						ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, СтруктураКонтекст.Оповещение.ШаблонСообщения, 
	//												СтруктураКонтекст.Оповещение.НастройкаДоставки, СтруктураКонтекст, 
	//												ЛОЖЬ, РежимыВывода.ВыводитьОшибки);
	//						ОповещенияПолучателям.Добавить(ПараметрыОповещения);
	//					КонецЦикла; 
	//					//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЕсли;
	//Иначе
	//	Отбор = Новый Структура();
	//	Отбор.Вставить("Пользователь", СтруктураКонтекст.Пользователь);	
	//	Отбор.Вставить("Объект", СтруктураКонтекст.ТекущийОбъект);
	//	Отбор.Вставить("Виза", СтруктураКонтекст.Виза);
	//	Если ТаблицаПользователейДокументаБК <> Неопределено тогда 
	//		НайденнаяСтрокаИзТаблицыПользователейПоДокументу =  ТаблицаПользователейДокументаБК.НайтиСтроки(Отбор);
	//		Если НайденнаяСтрокаИзТаблицыПользователейПоДокументу.Количество()  > 0    Тогда
	//			Для каждого Элемент из  НайденнаяСтрокаИзТаблицыПользователейПоДокументу Цикл					
	//				Если Элемент.Виза = Справочники.бит_ГруппыВиз.ВсеВизы или СтруктураКонтекст.Виза = Элемент.Виза Тогда
	//					СтруктураКонтекст.Получатель = Элемент.Инициатор;
	//					//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//					//ЗаписатьОповещение(Справочники.ВидыКонтактнойИнформации.EmailИнициатора
	//					//,СтруктураКонтекст.Оповещение.ШаблонСообщения
	//					//,СтруктураКонтекст.Оповещение.НастройкаДоставки
	//					//,СтруктураКонтекст
	//					//,КэшАдресов
	//					//,РежимыВывода.ВыводитьОшибки);		
	//					ТочкиДоставки = ПодготовитьТочкиДоставки(Справочники.ВидыКонтактнойИнформации.EmailИнициатора, 
	//										СтруктураКонтекст.Оповещение.ШаблонСообщения, СтруктураКонтекст.Оповещение.НастройкаДоставки,
	//										СтруктураКонтекст,КэшАдресов,РежимыВывода.ВыводитьОшибки,Ошибки); 
	//										
	//					Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
	//						ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, СтруктураКонтекст.Оповещение.ШаблонСообщения, 
	//												СтруктураКонтекст.Оповещение.НастройкаДоставки, СтруктураКонтекст, 
	//												ЛОЖЬ, РежимыВывода.ВыводитьОшибки);
	//						ОповещенияПолучателям.Добавить(ПараметрыОповещения);
	//					КонецЦикла; 
	//					//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	////+СБ Пискунова #2691
	//
	////+СБ. Пискунова #2691
	////перезапишем набор, если в нем есть автоматически установленные визы. 
	////Только в таком случае будет корректно отрабаьывать мех-м определения доступности
	//
	////ЭтотОбъект.Отбор.Объект.Значение
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	бит_УстановленныеВизы.Виза
	//|ИЗ
	//|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	//|ГДЕ
	//|	бит_УстановленныеВизы.СБ_УстановленаАвтоматически
	//|	И бит_УстановленныеВизы.Объект в (&Объект) ";
	//
	//Запрос.УстановитьПараметр("Объект", СтруктураКонтекст.ТекущийОбъект);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	//Только в таком случае коррректно отрабатывает механизм корректого определения доступности визы
	//	НаборЗаписей = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей(); 											
	//	НаборЗаписей.Отбор.Объект.Установить(СтруктураКонтекст.ТекущийОбъект);
	//	НаборЗаписей.Прочитать();
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-12 (#2879)
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-03 (#4271)
	Если СтруктураКонтекст.Свойство("Оповещение") И СтруктураКонтекст.Оповещение.ВидСобытия <> Перечисления.бит_фн_ВидыСобытийОповещений.ДоступнаВиза
		Или Не СтруктураКонтекст.Свойство("Оповещение") Тогда
		
		ОповещенияПолучателям = Новый Массив();
		Если ТаблицаПолучатели = Неопределено Тогда
			Возврат ОповещенияПолучателям; 
		КонецЕсли;
		
		Кроме = Новый Соответствие;
		
		Для Каждого СтрокаПолучатели Из ТаблицаПолучатели Цикл
			
			// Для определенных видов событий необходимо преобразовать выборку по пользовательскому условию.
			Если ЗначениеЗаполнено(СтрокаПолучатели.ПользовательскоеУсловие) Тогда
				Если СтруктураКонтекст.Свойство("ВыборкаДокументов") Тогда
					ПодготовитьВыборкуЗаписейДляОтправки(СтруктураКонтекст.ВыборкаДокументов, СтрокаПолучатели.ПользовательскоеУсловие);
					Если СтруктураКонтекст.ВыборкаДокументов.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					флУсловиеВыполнено = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(СтрокаПолучатели.ПользовательскоеУсловие
					,СтруктураКонтекст);
					Если НЕ флУсловиеВыполнено Тогда
						Продолжить;				
					КонецЕсли; 																	  
				КонецЕсли; 
			КонецЕсли;
			
			ЭтоКроме = ?(СтрокаПолучатели.УсловиеВхождения = "Кроме",Истина,Ложь);
			
			// Получаем текущего пользователя различными способами.
			ТекущийПолучатель = Неопределено;
			Если ТипЗнч(СтрокаПолучатели.Получатель) = Тип("СправочникСсылка.Пользователи") 
				ИЛИ ТипЗнч(СтрокаПолучатели.Получатель) = Тип("СправочникСсылка.Контрагенты") 
				ИЛИ ТипЗнч(СтрокаПолучатели.Получатель) = Тип("СправочникСсылка.ФизическиеЛица") 
				ИЛИ ТипЗнч(СтрокаПолучатели.Получатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				
				Если СтруктураКонтекст.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ДоступнаВиза 
					И СтрокаПолучатели.Получатель <> СтруктураКонтекст.Пользователь Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущийПолучатель = СтрокаПолучатели.Получатель;
				
			ИначеЕсли ТипЗнч(СтрокаПолучатели.Получатель) = Тип("Строка") Тогда
				Если СтруктураКонтекст.Свойство("ТекущийОбъект") Тогда
					Если бит_ОбщегоНазначения.ЭтоСемействоБП() 
						И ТипЗнч(СтруктураКонтекст.ТекущийОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						СтрокаКод = "СтруктураКонтекст.ТекущийОбъект.Владелец";
					Иначе
						СтрокаКод = "СтруктураКонтекст."+СтрокаПолучатели.Получатель;
					КонецЕсли;	
					
					Если СтруктураКонтекст.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ИзмененоСостояниеЗадачи 
						И СтрокаПолучатели.Получатель = "ТекущийОбъект.Исполнитель" 
						И ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураКонтекст.ТекущийОбъект, "РольИсполнителя")) Тогда
						ТекущийПолучатель = ВычислитьПолучателяИзмененоСостояниеЗадачи(СтруктураКонтекст.ТекущийОбъект);
					Иначе
						ТекущийПолучатель = ВычислитьПолучателя(СтруктураКонтекст, СтрокаКод);
					КонецЕсли;					
				Иначе
					СтрокаКод = "СтруктураКонтекст."+СтрокаПолучатели.Получатель;
					ТекущийПолучатель = ВычислитьПолучателя(СтруктураКонтекст,СтрокаКод);
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаПолучатели.Получатель) = Тип("СправочникСсылка.бит_ПользовательскиеФункции") Тогда	 
				ТекущийПолучатель = бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункцию(СтрокаПолучатели.Получатель,СтруктураКонтекст);
			КонецЕсли; 
			
			// ++ NB 
			// Унификация кода: ~ ТипЗнч(ТекущийПолучатель) <> Тип("Массив")
			ТекущийПолучатель = ПреобразоватьВМассив(ТекущийПолучатель); 
			// -- NB 
			// Проверим пользователя, на вхождение в перечень исключаемых
			// добавим в результирующий массив получателей.
			Если ТипЗнч(ТекущийПолучатель) = Тип("Массив") Тогда
				
				Для Каждого Элемент Из ТекущийПолучатель Цикл
					
					флДобавлять = ПроверитьВозможностьДобавленияПолучателя(Кроме,ЭтоКроме,Элемент);
					
					Если флДобавлять Тогда
						
						СтруктураКонтекст.Получатель = Элемент;
						
						// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-08 (#4271)
						Если ТипЗнч(Элемент) = Тип("СправочникСсылка.бит_БК_Инициаторы") Тогда
							СтруктураКонтекст.Вставить("Пользователь", Элемент.Пользователь);
						КонецЕсли;
						// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-08 (#4227)
						
						Если СтруктураКонтекст.Свойство("ВыборкаДокументов") Тогда
							СтруктураКонтекст.ВыборкаДокументов.Сбросить();
							
						КонецЕсли;
						
						ТочкиДоставки = ПодготовитьТочкиДоставки(СтрокаПолучатели.ВидКонтактнойИнформации, 
						СтрокаПолучатели.ШаблонСообщения, СтрокаПолучатели.НастройкаДоставки,
						СтруктураКонтекст,КэшАдресов,РежимыВывода.ВыводитьОшибки,Ошибки); 
						
						Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
							ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, СтрокаПолучатели.ШаблонСообщения, 
							СтрокаПолучатели.НастройкаДоставки, СтруктураКонтекст, 
							СтрокаПолучатели.СоздаватьОбсуждение, РежимыВывода.ВыводитьОшибки);
							ОповещенияПолучателям.Добавить(ПараметрыОповещения);
						КонецЦикла; 					
					КонецЕсли; 
				КонецЦикла; 
				// ++ NB 
				// ~ ТипЗнч(ТекущийПолучатель) <> Тип("Массив")
				// -- NB 
				//ИначеЕсли ТипЗнч(ТекущийПолучатель) = Тип("СправочникСсылка.Пользователи") 
				//	     ИЛИ ТипЗнч(ТекущийПолучатель) = Тип("СправочникСсылка.Контрагенты")  
				//	     ИЛИ ТипЗнч(ТекущийПолучатель) = Тип("СправочникСсылка.ФизическиеЛица") 
				//	     ИЛИ ТипЗнч(ТекущийПолучатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда	
				//	
				//	флДобавлять = ПроверитьВозможностьДобавленияПолучателя(Кроме,ЭтоКроме,ТекущийПолучатель);
				//	Если флДобавлять Тогда
				//		
				//		СтруктураКонтекст.Получатель = ТекущийПолучатель;
				//		
				//		Если СтруктураКонтекст.Свойство("ВыборкаДокументов") Тогда
				//			СтруктураКонтекст.ВыборкаДокументов.Сбросить();
				//		КонецЕсли;
				//		
				//		ТочкиДоставки = ПодготовитьТочкиДоставки(СтрокаПолучатели.ВидКонтактнойИнформации, 
				//							СтрокаПолучатели.ШаблонСообщения, СтрокаПолучатели.НастройкаДоставки,
				//							СтруктураКонтекст,КэшАдресов,РежимыВывода.ВыводитьОшибки,Ошибки); 
				//							
				//		Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
				//			ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, СтрокаПолучатели.ШаблонСообщения, 
				//									СтрокаПолучатели.НастройкаДоставки, СтруктураКонтекст, РежимыВывода.ВыводитьОшибки);
				//			//ЗаписатьОповещение(ПараметрыОповещения, РежимыВывода.ВыводитьОшибки);
				//			ОповещенияПолучателям.Добавить(ПараметрыОповещения);
				//		КонецЦикла; 					
				//	КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; // По строкам таблицы получателей
		
		Возврат ОповещенияПолучателям;
		
	Иначе
		Возврат ок_СформироватьОповещенияПолучателям(ТаблицаПолучатели, СтруктураКонтекст, КэшАдресов, РежимыВывода, Ошибки, ТаблицаПользователейДокументаБК);
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-03 (#4271)
	
КонецФункции

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-03 (#4271)
Функция ок_СформироватьОповещенияПолучателям(ТаблицаПолучатели, СтруктураКонтекст, КэшАдресов, РежимыВывода, Ошибки, ТаблицаПользователейДокументаБК)

	ОповещенияПолучателям = Новый Массив();
	
	НайденнаяСтрока = ТаблицаПолучатели.Найти(СтруктураКонтекст.Получатель,"Получатель");
	Если НайденнаяСтрока <> Неопределено Тогда 
		Если ТаблицаПользователейДокументаБК = Неопределено Тогда

			ТочкиДоставки = ПодготовитьТочкиДоставки(Справочники.ВидыКонтактнойИнформации.EmailИнициатора, 
								НайденнаяСтрока.ШаблонСообщения,НайденнаяСтрока.НастройкаДоставки,
								СтруктураКонтекст,КэшАдресов,РежимыВывода.ВыводитьОшибки,Ошибки); 
								
			Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
				ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, НайденнаяСтрока.ШаблонСообщения, 
										НайденнаяСтрока.НастройкаДоставки, СтруктураКонтекст, 
										НайденнаяСтрока.СоздаватьОбсуждение, РежимыВывода.ВыводитьОшибки);
				ОповещенияПолучателям.Добавить(ПараметрыОповещения);
			КонецЦикла; 
			
		Иначе 
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", СтруктураКонтекст.Пользователь);	
			Отбор.Вставить("Объект", СтруктураКонтекст.ТекущийОбъект);
			//Отбор.Вставить("Виза",СтруктураКонтекст.Виза);
			НайденнаяСтрокаИзТаблицыПользователейПоДокументу =  ТаблицаПользователейДокументаБК.НайтиСтроки(Отбор);
			Если НайденнаяСтрокаИзТаблицыПользователейПоДокументу.Количество()  > 0  Тогда
				Для каждого Элемент из  НайденнаяСтрокаИзТаблицыПользователейПоДокументу Цикл
					Если Элемент.Виза = Справочники.бит_ГруппыВиз.ВсеВизы или СтруктураКонтекст.Виза = Элемент.Виза Тогда
						
						СтруктураКонтекст.Получатель = Элемент.Инициатор;

						ТочкиДоставки = ПодготовитьТочкиДоставки(Справочники.ВидыКонтактнойИнформации.EmailИнициатора, 
											СтруктураКонтекст.Оповещение.ШаблонСообщения, СтруктураКонтекст.Оповещение.НастройкаДоставки,
											СтруктураКонтекст,КэшАдресов,РежимыВывода.ВыводитьОшибки,Ошибки); 
											
						Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
							ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, СтруктураКонтекст.Оповещение.ШаблонСообщения, 
													СтруктураКонтекст.Оповещение.НастройкаДоставки, СтруктураКонтекст, 
													ЛОЖЬ, РежимыВывода.ВыводитьОшибки);
							ОповещенияПолучателям.Добавить(ПараметрыОповещения);
						КонецЦикла; 
						//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", СтруктураКонтекст.Пользователь);	
		Отбор.Вставить("Объект", СтруктураКонтекст.ТекущийОбъект);
		Отбор.Вставить("Виза", СтруктураКонтекст.Виза);
		Если ТаблицаПользователейДокументаБК <> Неопределено тогда 
			НайденнаяСтрокаИзТаблицыПользователейПоДокументу =  ТаблицаПользователейДокументаБК.НайтиСтроки(Отбор);
			Если НайденнаяСтрокаИзТаблицыПользователейПоДокументу.Количество()  > 0    Тогда
				Для каждого Элемент из  НайденнаяСтрокаИзТаблицыПользователейПоДокументу Цикл					
					Если Элемент.Виза = Справочники.бит_ГруппыВиз.ВсеВизы или СтруктураКонтекст.Виза = Элемент.Виза Тогда
						СтруктураКонтекст.Получатель = Элемент.Инициатор;

						ТочкиДоставки = ПодготовитьТочкиДоставки(Справочники.ВидыКонтактнойИнформации.EmailИнициатора, 
											СтруктураКонтекст.Оповещение.ШаблонСообщения, СтруктураКонтекст.Оповещение.НастройкаДоставки,
											СтруктураКонтекст,КэшАдресов,РежимыВывода.ВыводитьОшибки,Ошибки); 
											
						Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
							ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, СтруктураКонтекст.Оповещение.ШаблонСообщения, 
													СтруктураКонтекст.Оповещение.НастройкаДоставки, СтруктураКонтекст, 
													ЛОЖЬ, РежимыВывода.ВыводитьОшибки);
							ОповещенияПолучателям.Добавить(ПараметрыОповещения);
						КонецЦикла; 
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
	//ЭтотОбъект.Отбор.Объект.Значение
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_УстановленныеВизы.Виза
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	бит_УстановленныеВизы.СБ_УстановленаАвтоматически
	|	И бит_УстановленныеВизы.Объект в (&Объект) ";
	
	Запрос.УстановитьПараметр("Объект", СтруктураКонтекст.ТекущийОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		//Только в таком случае корректно отрабатывает механизм корректного определения доступности визы
		НаборЗаписей = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей(); 											
		НаборЗаписей.Отбор.Объект.Установить(СтруктураКонтекст.ТекущийОбъект);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Возврат ОповещенияПолучателям;
	
КонецФункции
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-03 (#4271)

Функция ПреобразоватьВМассив(Значение)
	
	Если ТипЗнч(Значение) <> Тип("Массив") Тогда
		Результат = Новый Массив(); 
		Результат.Добавить(Значение);
	Иначе
		Результат = Значение;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции
 
// Процедура отмечает обработанные записи регистра.
// 
// Параметры:
// 	Выборка - ВыборкаИзРезультатаЗапроса.
// 	РежимыВывода - структура.
// 
Процедура ОтметитьОбработанныеОповещения(Выборка, РежимыВывода, Ошибки)
	
	МенеджерЗаписи = РегистрыСведений.бит_фн_РегистрацияСобытийОповещений.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
	Попытка
		
		МенеджерЗаписи.Удалить();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);			
		Если Ошибки.Количество() = 0 Тогда
			МенеджерЗаписи.СтатусРегистрации = Перечисления.бит_фн_СтатусыРегистрацииОповещений.Обработано;
		Иначе	
			МенеджерЗаписи.СтатусРегистрации = Перечисления.бит_фн_СтатусыРегистрацииОповещений.ОшибкаОтправки;
			МенеджерЗаписи.ПротоколОбработки = СтрСоединить(Ошибки,";");
			МенеджерЗаписи.ДатаОбработки     = ТекущаяДата();
		КонецЕсли; 
		МенеджерЗаписи.Записать();

	Исключение
		
		Если РежимыВывода.ВыводитьОшибки Тогда
			
			ТекстСообщения = НСтр("ru = 'Не удалось изменить статус записи о регистрации!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецПопытки;
	
КонецПроцедуры

// Функция проверяет возможность формирования сообщения данному получателю.
// 
// Параметры:
//  Кроме             - Соответствие - Хранит перечень исключаемых получателей.
//  ЭтоКроме          - Булево.
//  ТекущийПолучатель - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//   флДобавлять   - Добавлять получателя или нет.
// 
Функция ПроверитьВозможностьДобавленияПолучателя(Кроме,ЭтоКроме,ТекущийПолучатель)

	флДобавлять = Ложь;
	Если ЭтоКроме Тогда
		
		Если Кроме[ТекущийПолучатель] = Неопределено Тогда
			
			Кроме.Вставить(ТекущийПолучатель,Истина);
			
		КонецЕсли; 
	Иначе
		
		Если Кроме[ТекущийПолучатель] = Неопределено Тогда
			
			флДобавлять = Истина;
			
		КонецЕсли; 
		
	КонецЕсли; 

	Возврат флДобавлять;
	
КонецФункции // ПроверитьВозможностьДобавления()

Функция ВычислитьПолучателяИзмененоСостояниеЗадачи(ОбъектЗадача)
	
	СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектЗадача, "РольИсполнителя,ОбъектАдресации_1,ОбъектАдресации_2,ОбъектАдресации_3");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ИсполнителиЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.бит_ИсполнителиЗадач КАК бит_ИсполнителиЗадач
		|ГДЕ
		|	бит_ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	И бит_ИсполнителиЗадач.ОбъектАдресации_1 = &ОбъектАдресации_1
		|	И бит_ИсполнителиЗадач.ОбъектАдресации_2 = &ОбъектАдресации_2
		|	И бит_ИсполнителиЗадач.ОбъектАдресации_3 = &ОбъектАдресации_3";
	
	Запрос.УстановитьПараметр("ОбъектАдресации_1", СтруктураПараметров.ОбъектАдресации_1);
	Запрос.УстановитьПараметр("ОбъектАдресации_2", СтруктураПараметров.ОбъектАдресации_2);
	Запрос.УстановитьПараметр("ОбъектАдресации_3", СтруктураПараметров.ОбъектАдресации_3);
	Запрос.УстановитьПараметр("РольИсполнителя",   СтруктураПараметров.РольИсполнителя);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ПользователиМассив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ПользователиМассив.Добавить(Выборка.Исполнитель);
	КонецЦикла;
	
	Возврат ПользователиМассив;
	
КонецФункции

// Функция вычисляет получателя по переданному выражению.
// 
// Параметры:
//  СтруктураКонтекст  - Структура.
//  СтрокаКод          - Строка.
// 
// Возвращаемое значение:
//   ТекущийПользователь   - СправочникСсылка.Пользователи.
// 
Функция ВычислитьПолучателя(СтруктураКонтекст,СтрокаКод)
	
	Попытка
		
		ТекущийПолучатель = Вычислить(СтрокаКод);
		
	Исключение
		
		ТекущийПолучатель = Неопределено;
		
	КонецПопытки;
	
	

	Возврат ТекущийПолучатель;
	
КонецФункции // ВычислитьПолучателя()

// Функция формирует структуру в контексте которой происходит выполнение кода при формировании сообщений.
// 
// Параметры:
//  Выборка  - ВыборкаИзРезультатаЗапроса.
// 
// Возвращаемое значение:
//   СтруктураКонтекст   - Структура.
// 
Функция СформироватьСтруктуруКонтекст(Выборка)
	
	СтруктураКонтекст = Новый Структура;
	СтруктураКонтекст.Вставить("Период"       ,Выборка.Период);
	СтруктураКонтекст.Вставить("ВидСобытия"   ,Выборка.ВидСобытия);	
	СтруктураКонтекст.Вставить("Оповещение"   ,Выборка.Оповещение);
	СтруктураКонтекст.Вставить("ТекущийОбъект",Выборка.Объект);
	СтруктураКонтекст.Вставить("Статус"       ,Выборка.Статус);
	СтруктураКонтекст.Вставить("Виза"         ,Выборка.Виза);
	СтруктураКонтекст.Вставить("Решение"      ,Выборка.Решение);
	СтруктураКонтекст.Вставить("Комментарий"  ,Выборка.Комментарий);	
	СтруктураКонтекст.Вставить("Пользователь" ,Выборка.Пользователь);
	СтруктураКонтекст.Вставить("Получатель"   ,Справочники.Пользователи.ПустаяСсылка());
	
	Возврат СтруктураКонтекст;
	
КонецФункции // СформироватьСтруктуруКонтекст()

Функция НоваяТаблицаТочкиДоставки()

	ТочкиДоставки = Новый ТаблицаЗначений(); 
	ТочкиДоставки.Колонки.Добавить("НастройкаДоставки");
	ТочкиДоставки.Колонки.Добавить("СтруктураКонтекст");
	ТочкиДоставки.Колонки.Добавить("ШаблонСообщения");
	ТочкиДоставки.Колонки.Добавить("КоличествоБейджей");
	ТочкиДоставки.Колонки.Добавить("ВыводитьСообщения");
	ТочкиДоставки.Колонки.Добавить("АдресПолучателя");
	
	Возврат ТочкиДоставки;

КонецФункции
 
Функция ПодготовитьТочкиДоставки(ВидКонтактнойИнформации, ШаблонСообщения, НастройкаДоставки, 
				СтруктураКонтекст, КэшАдресов, ВыводитьСообщения = Ложь, Ошибки = Неопределено)

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-19 (#3348)
	Если Ошибки = Неопределено Тогда 
		Ошибки = Новый Массив;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-19 (#3348)
	
	ТочкиДоставки = НоваяТаблицаТочкиДоставки();
	
	Если Справочники.бит_фн_НастройкиДоставкиОповещений.ЭтоДоставкаЧерезПуш(НастройкаДоставки) Тогда
		// Доставка через пуш - ищем мобильное устройство пользователя.
		АдресаПолучателей = бит_фн_ОповещенияСервер.ПолучитьМобильныеУстройства(СтруктураКонтекст.Получатель, КэшАдресов);
	ИначеЕсли Справочники.бит_фн_НастройкиДоставкиОповещений.ЭтоДоставкаЧерезTelegram(НастройкаДоставки) Тогда
		// Доставка через пуш - ищем мобильное устройство пользователя.
		АдресаПолучателей = бит_фн_ОповещенияСервер.ПолучитьМобильныеУстройства(СтруктураКонтекст.Получатель, КэшАдресов, "ЧатТелеграм");
	Иначе	
		// Доставка электронной почтой - ищем адрес пользователя.
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-31 (#2975)
		//Адрес = бит_фн_ОповещенияСервер.ПолучитьАдрес(СтруктураКонтекст.Получатель,ВидКонтактнойИнформации,КэшАдресов);
		//
		//Если ПустаяСтрока(Адрес) Тогда
		//	
		//	ТекстСообщения = НСтр("ru = 'Не удалось получить %1% получателя ""%2%""!'");
		//	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
		//	                                                                            ,Строка(ВидКонтактнойИнформации)
		//																				,Строка(СтруктураКонтекст.Получатель));
		//	Если ВыводитьСообщения Тогда
		//		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			
		//	КонецЕсли; 																			
		//	Ошибки.Добавить(ТекстСообщения);
		//КонецЕсли;		
		//Заменено на:
		Если ТипЗнч(СтруктураКонтекст.Получатель) <> Тип("СписокЗначений") Тогда 
			СписокПолучателей = Новый СписокЗначений;
			СписокПолучателей.Добавить(СтруктураКонтекст.Получатель);
		Иначе
			СписокПолучателей = СтруктураКонтекст.Получатель;			
		КонецЕсли;
		Адрес = "";
		Для Каждого пПолучатель Из СписокПолучателей Цикл 
			пАдрес = СокрЛП(бит_фн_ОповещенияСервер.ПолучитьАдрес(пПолучатель.Значение,ВидКонтактнойИнформации,КэшАдресов));
			
			Если Не ПустаяСтрока(пАдрес) Тогда 
				Адрес = Адрес + ";" + пАдрес;				
			Иначе 
				ТекстСообщения = НСтр("ru = 'Не удалось получить %1% получателя ""%2%""!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
				,Строка(ВидКонтактнойИнформации)
				,Строка(пПолучатель.Значение));
				Если ВыводитьСообщения Тогда
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			
				КонецЕсли; 																			
				Ошибки.Добавить(ТекстСообщения);
			КонецЕсли;					
		КонецЦикла;
		Адрес = Сред(Адрес, 2);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-31 (#2975)
		АдресаПолучателей = Новый Массив(); 
		Если НЕ ПустаяСтрока(Адрес) Тогда
			АдресаПолучателей.Добавить(Адрес);
		КонецЕсли; 
	КонецЕсли; 
	
	//ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-03-29 (#3003)	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-11 (#3003)	
	//ИспользоватьСогласованияПоПочте = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Использовать согласования по почте");
	//Заменено на:
	ИспользоватьСогласованияПоПочте = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Использовать согласования по почте", Ложь);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-11 (#3003)
	
	Если ИспользоватьСогласованияПоПочте Тогда
		
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
		//ПочтаСогласования = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Учетная запись почты согласований");
		
		//ВставитьГиперссылки = ?((Найти(ШаблонСообщения.Сообщение_Текст, "ГиперссылкиСогласования") ИЛИ Найти(ШаблонСообщения.Сообщение_Подпись, "ГиперссылкиСогласования"))
		//И ЗначениеЗаполнено(ПочтаСогласования), Истина, Ложь);
		
		ВставитьГиперссылки = Найти(НРег(ШаблонСообщения.Сообщение_Текст + ШаблонСообщения.Сообщение_Подпись), "гиперссылк") > 0;
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
		
		Если ВставитьГиперссылки Тогда
			
			СтруктураПараметровВидыРешений = ПодготовитьСтруктуруДляОпределенияВидаРешения(СтруктураКонтекст.ТекущийОбъект);
			МассивРешений = бит_Визирование.ПолучитьСписокВозможныхРешений(СтруктураПараметровВидыРешений).ВыгрузитьЗначения();
			
			ДоступныеРешения = Новый Массив;
			
			Для Каждого ВариантРешения Из МассивРешений Цикл		
				Если ВариантРешения = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Согласовано") 
					ИЛИ ВариантРешения = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено") Тогда
					ДоступныеРешения.Добавить(ВариантРешения);		
				КонецЕсли;
			КонецЦикла;
			
			Если ДоступныеРешения.Количество() 
				 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-18 (#3003)
				 И СтруктураКонтекст.Свойство("Виза")
				 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-18 (#3003)
			Тогда
				
				СтруктураГиперссылок = ПолучитьОтветыВВидеСсылокMailto(СтруктураКонтекст, ДоступныеРешения);
				//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
				//СтруктураКонтекст.Вставить("ГиперссылкиСогласования", СтруктураГиперссылок.Текст);
				Для Каждого КлючИЗначение Из СтруктураГиперссылок Цикл
					СтруктураКонтекст.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;	
				//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-18 (#3003)
			//Иначе 
			//    СтруктураКонтекст.Вставить("ГиперссылкиСогласования", "");
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-18 (#3003)				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-03-29 (#3003)
	
	Для каждого АдресПолучателя Из АдресаПолучателей Цикл
		
		КоличествоБейджей = 0;
		НоваяСтрока = ТочкиДоставки.Добавить();
		НоваяСтрока.АдресПолучателя = АдресПолучателя;
		
		// Вычисление количества бейджей для Яблока.
		Если ТипЗнч(АдресПолучателя) = Тип("СправочникСсылка.бит_МобильныеУстройства") Тогда
			Если АдресПолучателя.ОперационнаяСистема = Перечисления.бит_МобильныеОперационныеСистемы.ios Тогда
				Если ТипЗнч(ШаблонСообщения.Бейджи) = Тип("Число") Тогда
					КоличествоБейджей = ШаблонСообщения.Бейджи;
				ИначеЕсли ТипЗнч(ШаблонСообщения.Бейджи) = Тип("Строка") Тогда 
					Попытка
						КоличествоБейджей = Вычислить(ШаблонСообщения.Бейджи);
					Исключение
						
						КоличествоБейджей = 0;
						
						ТекстЗаписиЖурнала = НСтр("ru = 'Не удалось вычислить количество бейджей! "
						+ "Выражение: %1%. Шаблон сообщения: %2%. Описание ошибки: %3%.'");
						ТекстЗаписиЖурнала = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(
						ТекстЗаписиЖурнала, ШаблонСообщения.Бейджи, Строка(ШаблонСообщения), ОписаниеОшибки());
						ЗаписьЖурналаРегистрации("ФормированиеОповещения", УровеньЖурналаРегистрации.Ошибка, 
						Метаданные.Обработки.бит_фн_ОбработкаЗаписейРегистрацииОповещений,,ТекстЗаписиЖурнала)
					КонецПопытки;
					КоличествоБейджей = КоличествоБейджей;
				КонецЕсли;  
			КонецЕсли; 
		КонецЕсли;  // вычисление бейджей для iOS

		НоваяСтрока.КоличествоБейджей = КоличествоБейджей;
		
	КонецЦикла; 

	Возврат ТочкиДоставки;
	
КонецФункции
 
Функция ЗаполнитьОповещение(ТочкаДоставки, ШаблонСообщения, НастройкаДоставки, СтруктураКонтекст, СоздаватьОбсуждение, ВыводитьСообщения)
	
	//МенеджерЗаписи = РегистрыСведений.бит_фн_Оповещения.СоздатьМенеджерЗаписи();
	ПараметрыОповещения = НовыеПараметрыОповещения();
	ПараметрыОповещения.Статус            = Перечисления.бит_фн_СтатусыОтправкиОповещений.ГотовоКОтправке;
	//+СБ Пискунова #2691
	//ПараметрыОповещения.Пользователь      = СтруктураКонтекст.Получатель;
	ПараметрыОповещения.Пользователь      = СтруктураКонтекст.Пользователь;
	//-СБ Пискунова #2691
	ПараметрыОповещения.НастройкаДоставки = НастройкаДоставки;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-01 (#2975)
	//ПараметрыОповещения.ИД                = Строка(Новый УникальныйИдентификатор);
	//Заменено на:		
	Если СтруктураКонтекст.Свойство("ИдентификаторЗаписи") Тогда 
		ПараметрыОповещения.ИД = СтруктураКонтекст.ИдентификаторЗаписи;
	Иначе
		ПараметрыОповещения.ИД = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-01 (#2975)
	ПараметрыОповещения.АдресПолучателя   = ТочкаДоставки.АдресПолучателя;
	ПараметрыОповещения.СпособТранспорта  = бит_фн_ОповещенияКлиентСервер.ОпределитьСпособТранспорта(ТочкаДоставки.АдресПолучателя);
	ПараметрыОповещения.ДатаРегистрации   = ТекущаяДата();
	
	//+СБ Пискунова 09.03.2017 #2691
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-10 (#4271)
	//ПараметрыОповещения.СБ_ФормаВводаБюджета =  СтруктураКонтекст.ТекущийОбъект;
	Если СтруктураКонтекст.Свойство("ТекущийОбъект") Тогда
		ПараметрыОповещения.СБ_ФормаВводаБюджета = СтруктураКонтекст.ТекущийОбъект;
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-10 (#4271)
	//-СБ Пискунова 09.03.2017 #2691

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-07 (#2879)		
	Если Найти(ШаблонСообщения.Сообщение_Заголовок	,"дополнительные_визы")>0 ИЛИ
		 Найти(ШаблонСообщения.Сообщение_Текст		,"дополнительные_визы")>0 ИЛИ
		 Найти(ШаблонСообщения.Сообщение_Подпись	,"дополнительные_визы")>0
	Тогда 
		СтруктураКонтекст.Вставить("ТипТекстаСообщения",ШаблонСообщения.ТипТекстаСообщения);
		бит_ФормаВводаБюджетаВызовСервера.ДополнитьСтруктураКонтекстаПисьма(СтруктураКонтекст.ТекущийОбъект,СтруктураКонтекст);
	КонецЕсли;
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-10 (#4271)
	//СтруктураКонтекст.Вставить("ДатаДокумента"		,Формат(СтруктураКонтекст.ТекущийОбъект.Дата,"ДФ=dd.MM.yyyy"));
	Если СтруктураКонтекст.Свойство("ТекущийОбъект") Тогда
		СтруктураКонтекст.Вставить("ДатаДокумента"		,Формат(СтруктураКонтекст.ТекущийОбъект.Дата,"ДФ=dd.MM.yyyy"));
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-10 (#4271)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-07 (#2879)
		
	// Обработаем старый формат сообщения
	СтруктураСообщения       = бит_фн_ОповещенияСервер.СформироватьСообщениеПоШаблону(ШаблонСообщения,СтруктураКонтекст);
	
	// Обработаем новый формат сообщения
	СтруктураСообщения.Заголовок = бит_СтрокиКлиентСервер.ОбработатьТекстШаблона(СтруктураСообщения.Заголовок	, СтруктураКонтекст);
	СтруктураСообщения.Текст 	 = бит_СтрокиКлиентСервер.ОбработатьТекстШаблона(СтруктураСообщения.Текст		, СтруктураКонтекст);
	СтруктураСообщения.Подпись 	 = бит_СтрокиКлиентСервер.ОбработатьТекстШаблона(СтруктураСообщения.Подпись	, СтруктураКонтекст);
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
	// вернем в структуру тексты сообщения
	СтруктураКонтекст.Вставить("СтруктураСообщения", СтруктураСообщения);
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	ПараметрыОповещения.Вставить("СтруктураКонтекст", СтруктураКонтекст);	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
	ПараметрыОповещения.Сообщение_Заголовок = СтруктураСообщения.Заголовок;
	ПараметрыОповещения.Сообщение_Текст     = СтруктураСообщения.Текст;
	ПараметрыОповещения.Сообщение_Подпись   = СтруктураСообщения.Подпись;

	ПараметрыОповещения.Бейджи = ТочкаДоставки.КоличествоБейджей;
	ПараметрыОповещения.ТипТекстаСообщения = ШаблонСообщения.ТипТекстаСообщения;

	ПараметрыОповещения.СоздаватьОбсуждение    = СоздаватьОбсуждение;
	ПараметрыОповещения.ДополнительныеСвойства = СтруктураКонтекст;
	
	Возврат ПараметрыОповещения;
	
КонецФункции

Функция НовыеПараметрыОповещения()
	
	ПараметрыОповещения = ""
	+ "Статус,"
	+ "Пользователь,"
	+ "НастройкаДоставки,"
	+ "ИД,"
	+ "АдресПолучателя,"
	+ "СпособТранспорта," 
	+ "ДатаРегистрации,"
	+ "Сообщение_Заголовок,"
	+ "Сообщение_Текст,"
	+ "Сообщение_Подпись,"
	+ "Бейджи,"
	+ "ТипТекстаСообщения,"
	+ "СоздаватьОбсуждение,"
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	+ "СтруктураКонтекст,"
	+ "СБ_ФормаВводаБюджета,"
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	+ "ДополнительныеСвойства";
	
	Возврат Новый Структура(ПараметрыОповещения);
	
	//МенеджерЗаписи = РегистрыСведений.бит_фн_Оповещения.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Статус            = Перечисления.бит_фн_СтатусыОтправкиОповещений.ГотовоКОтправке;
	//МенеджерЗаписи.Пользователь      = СтруктураКонтекст.Получатель;
	//МенеджерЗаписи.НастройкаДоставки = НастройкаДоставки;
	//МенеджерЗаписи.ИД                = Строка(Новый УникальныйИдентификатор);
	//МенеджерЗаписи.АдресПолучателя   = ТекТочкаДоставки;
	//МенеджерЗаписи.СпособТранспорта  = бит_фн_ОповещенияКлиентСервер.ОпределитьСпособТранспорта(ТекТочкаДоставки);
	//МенеджерЗаписи.ДатаРегистрации   = ТекущаяДата();
	//
	//// Обработаем старый формат сообщения
	//СтруктураСообщения       = бит_фн_ОповещенияСервер.СформироватьСообщениеПоШаблону(ШаблонСообщения,СтруктураКонтекст);
	//// Обработаем новый формат сообщения
	//СтруктураСообщения.Заголовок= бит_СтрокиКлиентСервер.ОбработатьТекстШаблона(СтруктураСообщения.Заголовок	, СтруктураКонтекст);
	//СтруктураСообщения.Текст 	= бит_СтрокиКлиентСервер.ОбработатьТекстШаблона(СтруктураСообщения.Текст		, СтруктураКонтекст);
	//СтруктураСообщения.Подпись 	= бит_СтрокиКлиентСервер.ОбработатьТекстШаблона(СтруктураСообщения.Подпись	, СтруктураКонтекст);
	//
	//МенеджерЗаписи.Сообщение_Заголовок = СтруктураСообщения.Заголовок;
	//МенеджерЗаписи.Сообщение_Текст     = СтруктураСообщения.Текст;
	//МенеджерЗаписи.Сообщение_Подпись   = СтруктураСообщения.Подпись;

	//МенеджерЗаписи.Бейджи = КоличествоБейджей;
	//МенеджерЗаписи.ТипТекстаСообщения = ШаблонСообщения.ТипТекстаСообщения;

КонецФункции

Функция ЗаписатьОповещение(Параметры, ВыводитьСообщения)
	
	МенеджерЗаписи = РегистрыСведений.бит_фн_Оповещения.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Параметры);
	Попытка		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-02 (#2931)
		//МенеджерЗаписи.Записать();	
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
		Если Параметры.Свойство("СтруктураКонтекст") Тогда
			СтруктураКонтекст = Параметры.СтруктураКонтекст;
		Иначе	
			МенеджерЗаписи.Записать();
			Возврат Неопределено;
		КонецЕсли;	
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
		Если СтруктураКонтекст.Свойство("НеПроверятьНаличиеЗаписи") И
			 СтруктураКонтекст.НеПроверятьНаличиеЗаписи
		Тогда
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-18 (#3393)
			Если ТипЗнч(СтруктураКонтекст.ТекущийОбъект) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета") 
				И ЗначениеЗаполнено(СтруктураКонтекст.ТекущийОбъект.ок_ВидКорректировки)	
			Тогда 
				Если ЗначениеЗаполнено(МенеджерЗаписи.ИД) Тогда
					бит_Визирование.РазместитьПечатнуюФормуВоВременныеФайлы(СтруктураКонтекст.ТекущийОбъект, МенеджерЗаписи.ИД);
				КонецЕсли;
			КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-18 (#3393)
			МенеджерЗаписи.Записать(Истина);  				
		Иначе
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-02 (#2931)
		
		//+СБ Пискунова не будем добавлять запись в РС, если она уже там есть
		//МенеджерЗаписи.Записать();
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_фн_Оповещения.Статус
		|ИЗ
		|	РегистрСведений.бит_фн_Оповещения КАК бит_фн_Оповещения
		|ГДЕ
		|	бит_фн_Оповещения.Пользователь = &Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-12 (#2980)
		|	//#УсловиеПоИД
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-12 (#2980)
		|	И бит_фн_Оповещения.СБ_ФормаВводаБюджета = &Объект";
		
		Запрос.УстановитьПараметр("Пользователь", СтруктураКонтекст.Пользователь);
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-10 (#4271)
		//Запрос.УстановитьПараметр("Объект", СтруктураКонтекст.ТекущийОбъект);
		Если СтруктураКонтекст.Свойство("ТекущийОбъект") Тогда
			Запрос.УстановитьПараметр("Объект", СтруктураКонтекст.ТекущийОбъект);
		Иначе
			Запрос.УстановитьПараметр("Объект", Неопределено);
		КонецЕсли;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-10 (#4271)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-12 (#2980)
		Если СтруктураКонтекст.Свойство("ИД") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#УсловиеПоИД", "И бит_фн_Оповещения.ИД = &ИД");
			Запрос.УстановитьПараметр("ИД"	,	Строка(СтруктураКонтекст.ИД));
			МенеджерЗаписи.ИД = Строка(СтруктураКонтекст.ИД);
		КонецЕсли;                                                                                         
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-12 (#2980)
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
		//-СБ Пискунова не будем добавлять запись в РС, если она уже там есть
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-18 (#3393)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-10 (#4271)
		Если СтруктураКонтекст.Свойство("ТекущийОбъект") Тогда
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-10 (#4271)
			Если ТипЗнч(СтруктураКонтекст.ТекущийОбъект) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета") 
				И ЗначениеЗаполнено(СтруктураКонтекст.ТекущийОбъект.ок_ВидКорректировки)	
				Тогда 
				Если ЗначениеЗаполнено(МенеджерЗаписи.ИД) Тогда
					бит_Визирование.РазместитьПечатнуюФормуВоВременныеФайлы(СтруктураКонтекст.ТекущийОбъект, МенеджерЗаписи.ИД);
				КонецЕсли;
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-18 (#3393)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-10 (#4271)
		КонецЕсли;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-10 (#4271)
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-02 (#2931)
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-02 (#2931)
	Исключение
		Если ВыводитьСообщения Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось записать оповещение с Идентификатором ""%1%""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,МенеджерЗаписи.ИД);
			ТекстСообщения = ТекстСообщения+ОписаниеОшибки();
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли; 
	КонецПопытки;
	
КонецФункции
 
#КонецОбласти

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-26 (#2989)
Процедура ПовторноСформироватьОповещенияДляПросроченных(РежимыВывода,КэшАдресов)
	
	пДатаНачалаПовторнойОтправки = НачалоДня(СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ДатаНачалаПовторнойОтправкиОповещенийПоВизам",Дата('00010101')));
	
	Если пДатаНачалаПовторнойОтправки>ТекущаяДата() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_НазначенныеЗаместители.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА бит_НазначенныеЗаместители.Виза ССЫЛКА Справочник.бит_Визы
	|			ТОГДА бит_НазначенныеЗаместители.Виза
	|		ИНАЧЕ бит_ГруппыВизВизыГруппы.Виза
	|	КОНЕЦ КАК Виза,
	|	бит_НазначенныеЗаместители.Заместитель КАК Заместитель,
	|	бит_НазначенныеЗаместители.ДатаНачала КАК ДатаНачала,
	|	бит_НазначенныеЗаместители.ДатаОкончания КАК ДатаОкончания,
	|	бит_НазначенныеЗаместители.Пользователь КАК Пользователь,
	|	бит_БК_Инициаторы.Ссылка КАК Инициатор
	|ПОМЕСТИТЬ ВТ_ЗаместителиИВизы
	|ИЗ
	|	РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
	|		ПО бит_НазначенныеЗаместители.Виза = бит_ГруппыВизВизыГруппы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
	|		ПО бит_НазначенныеЗаместители.Заместитель = бит_БК_Инициаторы.Пользователь
	|ГДЕ
	|	бит_НазначенныеЗаместители.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен)
	|	И бит_НазначенныеЗаместители.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	|	И бит_НазначенныеЗаместители.ДатаНачала <= &ТекДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_СтатусыОбъектов.Объект КАК Объект,
	|	бит_УстановленныеВизы.Виза КАК Виза,
	|	бит_УстановленныеВизы.ФизическоеЛицо КАК Инициатор,
	|	бит_УстановленныеВизы.ФизическоеЛицо.Пользователь КАК ИнициаторПользователь,
	|	бит_УстановленныеВизы.Решение КАК Решение,
	|	ВЫБОР
	|		КОГДА бит_УстановленныеВизы.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.Отклонено)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтмененнаяЗаявка,
	|	бит_УстановленныеВизы.ДатаУстановки КАК ДатаУстановки,
	|	бит_УстановленныеВизы.ДатаКрайняя КАК ДатаКрайняя
	|ПОМЕСТИТЬ ВТ1_Заявка
	|ИЗ
	|	РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|		ПО ((ВЫРАЗИТЬ(бит_СтатусыОбъектов.Объект КАК Документ.бит_ФормаВводаБюджета)) = бит_УстановленныеВизы.Объект)
	|			И (бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании))
	|			И (ВЫРАЗИТЬ(бит_СтатусыОбъектов.Объект КАК Документ.бит_ФормаВводаБюджета).Дата >= &ДатаНачалаПовторнойОтправки)
	|			И (бит_УстановленныеВизы.ДатаКрайняя <> ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтмененнаяЗаявка,
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ1_Заявка.Объект КАК Объект
	|ПОМЕСТИТЬ ВТ2_НеотмененныеЗаявки
	|ИЗ
	|	ВТ1_Заявка КАК ВТ1_Заявка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ1_Заявка.Объект
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ1_Заявка.ОтмененнаяЗаявка) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ1_Заявка.Объект КАК Объект,
	|	ВТ1_Заявка.Виза КАК Виза,
	|	ВТ1_Заявка.Инициатор КАК Инициатор,
	|	ВТ1_Заявка.ИнициаторПользователь КАК ИнициаторПользователь,
	|	ВТ1_Заявка.Решение КАК Решение,
	|	ВТ1_Заявка.ДатаУстановки КАК ДатаУстановки,
	|	ВТ1_Заявка.ДатаКрайняя КАК ДатаКрайняя
	|ПОМЕСТИТЬ ВТ3_ЗаявкиДляРегистрации
	|ИЗ
	|	ВТ1_Заявка КАК ВТ1_Заявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ2_НеотмененныеЗаявки КАК ВТ2_НеотмененныеЗаявки
	|		ПО ВТ1_Заявка.Объект = ВТ2_НеотмененныеЗаявки.Объект
	|			И (ВТ1_Заявка.ДатаУстановки = ДАТАВРЕМЯ(1, 1, 1))
	|			И (ВТ1_Заявка.ДатаКрайняя < &ТекДата)
	|			И (ВТ1_Заявка.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ1_Заявка.Объект,
	|	ВТ1_Заявка.Виза,
	|	ВТ1_Заявка.Инициатор,
	|	ВТ_ЗаместителиИВизы.Заместитель,
	|	ВТ1_Заявка.Решение,
	|	ВТ1_Заявка.ДатаУстановки,
	|	ВТ1_Заявка.ДатаКрайняя
	|ИЗ
	|	ВТ1_Заявка КАК ВТ1_Заявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ2_НеотмененныеЗаявки КАК ВТ2_НеотмененныеЗаявки
	|		ПО ВТ1_Заявка.Объект = ВТ2_НеотмененныеЗаявки.Объект
	|			И (ВТ1_Заявка.ДатаУстановки = ДАТАВРЕМЯ(1, 1, 1))
	|			И (ВТ1_Заявка.ДатаКрайняя < &ТекДата)
	|			И (ВТ1_Заявка.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
	|		ПО ВТ1_Заявка.Виза = ВТ_ЗаместителиИВизы.Виза
	|			И ВТ1_Заявка.ИнициаторПользователь = ВТ_ЗаместителиИВизы.Пользователь
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ1_Заявка.Объект,
	|	ВТ1_Заявка.Виза,
	|	ВТ1_Заявка.Инициатор,
	|	ЗаместителиЗаместителей.Заместитель,
	|	ВТ1_Заявка.Решение,
	|	ВТ1_Заявка.ДатаУстановки,
	|	ВТ1_Заявка.ДатаКрайняя
	|ИЗ
	|	ВТ1_Заявка КАК ВТ1_Заявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ2_НеотмененныеЗаявки КАК ВТ2_НеотмененныеЗаявки
	|		ПО ВТ1_Заявка.Объект = ВТ2_НеотмененныеЗаявки.Объект
	|			И (ВТ1_Заявка.ДатаУстановки = ДАТАВРЕМЯ(1, 1, 1))
	|			И (ВТ1_Заявка.ДатаКрайняя < &ТекДата)
	|			И (ВТ1_Заявка.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ЗаместителиЗаместителей
	|			ПО (ЗаместителиЗаместителей.Пользователь = ВТ_ЗаместителиИВизы.Заместитель)
	|				И (ЗаместителиЗаместителей.Виза = ВТ_ЗаместителиИВизы.Виза)
	|		ПО ВТ1_Заявка.Виза = ВТ_ЗаместителиИВизы.Виза
	|			И ВТ1_Заявка.ИнициаторПользователь = ВТ_ЗаместителиИВизы.Пользователь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Виза,                                       
	|	Инициатор,
	|	ИнициаторПользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_фн_РегистрацияСобытийОповещений.Период КАК Период,
	|	бит_фн_РегистрацияСобытийОповещений.СтатусРегистрации КАК СтатусРегистрации,
	|	бит_фн_РегистрацияСобытийОповещений.ВидСобытия КАК ВидСобытия,
	|	бит_фн_РегистрацияСобытийОповещений.Оповещение КАК Оповещение,
	|	бит_фн_РегистрацияСобытийОповещений.Объект КАК Объект,
	|	бит_фн_РегистрацияСобытийОповещений.ИД КАК ИД,
	|	бит_фн_РегистрацияСобытийОповещений.Статус КАК Статус,
	|	бит_фн_РегистрацияСобытийОповещений.Виза КАК Виза,
	|	бит_фн_РегистрацияСобытийОповещений.Решение КАК Решение,
	|	бит_фн_РегистрацияСобытийОповещений.Пользователь КАК Пользователь,
	|	бит_фн_РегистрацияСобытийОповещений.Комментарий КАК Комментарий,
	|	бит_фн_РегистрацияСобытийОповещений.ПротоколОбработки КАК ПротоколОбработки,
	|	бит_фн_РегистрацияСобытийОповещений.ДатаОбработки КАК ДатаОбработки,
	|	бит_фн_РегистрацияСобытийОповещений.ок_ДатаПовторнойОбработки КАК ок_ДатаПовторнойОбработки,
	|	бит_БК_Инициаторы.Ссылка КАК Инициатор,
	|	бит_БК_Инициаторы.Email КАК EmailИнициатора,
	|	бит_фн_РегистрацияСобытийОповещений.Оповещение.ШаблонСообщения КАК ШаблонСообщения,
	|	бит_фн_РегистрацияСобытийОповещений.Оповещение.НастройкаДоставки КАК НастройкаДоставки
	|ИЗ
	|	ВТ3_ЗаявкиДляРегистрации КАК ВТ3_ЗаявкиДляРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК бит_фн_РегистрацияСобытийОповещений
	|		ПО ВТ3_ЗаявкиДляРегистрации.Объект = бит_фн_РегистрацияСобытийОповещений.Объект
	|			И ВТ3_ЗаявкиДляРегистрации.Виза = бит_фн_РегистрацияСобытийОповещений.Виза
	|			И ВТ3_ЗаявкиДляРегистрации.ИнициаторПользователь = бит_фн_РегистрацияСобытийОповещений.Пользователь
	|			И (бит_фн_РегистрацияСобытийОповещений.СтатусРегистрации = ЗНАЧЕНИЕ(Перечисление.бит_фн_СтатусыРегистрацииОповещений.Обработано))
	|			И (бит_фн_РегистрацияСобытийОповещений.ок_ДатаПовторнойОбработки = ДАТАВРЕМЯ(1, 1, 1))
	|			И (бит_фн_РегистрацияСобытийОповещений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_Оповещения КАК бит_фн_Оповещения
	|		ПО ВТ3_ЗаявкиДляРегистрации.Объект = бит_фн_Оповещения.СБ_ФормаВводаБюджета
	|			И ВТ3_ЗаявкиДляРегистрации.ИнициаторПользователь = бит_фн_Оповещения.Пользователь
	|			И (бит_фн_Оповещения.Статус = ЗНАЧЕНИЕ(Перечисление.бит_фн_СтатусыОтправкиОповещений.Отправлено))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
	|		ПО ВТ3_ЗаявкиДляРегистрации.ИнициаторПользователь = бит_БК_Инициаторы.Пользователь
	|ИТОГИ ПО
	|	Объект");
	
	Запрос.УстановитьПараметр("ТекДата"						,	ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаНачалаПовторнойОтправки" ,   пДатаНачалаПовторнойОтправки);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаОповещений = Результат.Выгрузить();
	ТаблицаОповещений.Свернуть("Объект");
	
	ТаблицаАналитика_2_СуммаРасходов = ПолучитьДопДанныеДляСтруктурыКонтекста(ТаблицаОповещений.ВыгрузитьКолонку("Объект"));
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("СтатусРегистрации" , ПредопределенноеЗначение("Перечисление.бит_фн_СтатусыРегистрацииОповещений.Обработано"));
	СтруктураОтбор.Вставить("ВидСобытия" 		, ПредопределенноеЗначение("Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза"));
	
	СтруктураОтборВНаборе = Новый Структура("Виза,Пользователь");
	
	пДатаРег = ТекущаяДата();
		
	Ошибки = Новый Массив;
	
	ВыборкаОбъект = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъект.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаОбъект.Объект) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбор.Вставить("Объект",	ВыборкаОбъект.Объект);
		
		пНаборРСРегСобытий = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(СтруктураОтбор,"бит_фн_РегистрацияСобытийОповещений");
		
		пНаборМодифицирован = Ложь;
		
		пТабНабора = пНаборРСРегСобытий.Выгрузить();
			
		ВыборкаДетали = ВыборкаОбъект.Выбрать();
		
		Пока ВыборкаДетали.Следующий() Цикл 
			
			СтруктураОтборВНаборе.Вставить("Виза"			,	ВыборкаДетали.Виза);
			СтруктураОтборВНаборе.Вставить("Пользователь"	,	ВыборкаДетали.Пользователь);
						
			пМассивНайденныхСтрок = пТабНабора.НайтиСтроки(СтруктураОтборВНаборе);
			
			Если пМассивНайденныхСтрок.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Ошибки.Очистить();
			
			//Сформируем повторное уведомление
			СтруктураКонтекст = СформироватьСтруктуруКонтекст(ВыборкаДетали);
						
			СтрокаТаблицы = ТаблицаАналитика_2_СуммаРасходов.Найти(ВыборкаДетали.Объект);
			СтруктураКонтекст.Вставить("Аналитика_2"	,?(СтрокаТаблицы = Неопределено,"",СтрокаТаблицы.Аналитика_2));
			СтруктураКонтекст.Вставить("СуммаРасходов"	,?(СтрокаТаблицы = Неопределено,"",СтрокаТаблицы.СуммаРасходов));
			
			СтруктураКонтекст.Получатель = ВыборкаДетали.Инициатор;
			
			СтруктураКонтекст.Вставить("НеПроверятьНаличиеЗаписи", Истина);
			
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
			//ЗаписатьОповещение(Справочники.ВидыКонтактнойИнформации.EmailИнициатора
			//					,ВыборкаДетали.ШаблонСообщения
			//					,ВыборкаДетали.НастройкаДоставки
			//					,СтруктураКонтекст
			//					,КэшАдресов
			//					,РежимыВывода.ВыводитьОшибки,
			//					Ошибки);				
			СформироватьИЗаписатьСообщение(Справочники.ВидыКонтактнойИнформации.EmailИнициатора
								,ВыборкаДетали.ШаблонСообщения
								,ВыборкаДетали.НастройкаДоставки
								,СтруктураКонтекст
								,КэшАдресов
								,РежимыВывода.ВыводитьОшибки,
								Ошибки);
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
			
			Если Ошибки.Количество() > 0 Тогда 
				Продолжить;
			КонецЕсли;
			
						
			Для Каждого пНайденнаяСтрока Из пМассивНайденныхСтрок Цикл 
				пНайденнаяСтрока.ок_ДатаПовторнойОбработки = пДатаРег;
			КонецЦикла;
			
			//Зафиксируем, чтобы снова не обрабатывать			
			пНаборМодифицирован = Истина;
			
		КонецЦикла;
		
		Если пНаборМодифицирован Тогда 
			пНаборРСРегСобытий.Загрузить(пТабНабора);			
			пНаборРСРегСобытий.ОбменДанными.Загрузка = Истина;
			Попытка
			
				пНаборРСРегСобытий.Записать();
			
			Исключение
			
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-26 (#2989)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-12-08 (#3492)
// 
// _Параметры:
//  пИдентификатор - Строка.
//  СписокФайловДляОтправляемогоПисьма - Массив элементы которого Структура: ИмяФайла - Строка, Файл - ХранилищеЗначения/ДвоичныеДанные.
//
Процедура СохранитьВременныеФайлыВложений(пИдентификатор, СписокФайловДляОтправляемогоПисьма) Экспорт
	
	пНаборВрФП = РегистрыСведений.ок_ВременныеФайлыПисем.СоздатьНаборЗаписей();
	пНаборВрФП.Отбор.Идентификатор.Установить(пИдентификатор);	
	
	соотИменаФайлов = Новый Соответствие;
	
	Для Каждого Строка Из СписокФайловДляОтправляемогоПисьма Цикл
		
		Если ТипЗнч(Строка.Файл) = Тип("ДвоичныеДанные") Тогда
			пДвоичныеДанные = Строка.Файл;
		ИначеЕсли ТипЗнч(Строка.Файл) = Тип("ХранилищеЗначения") Тогда
			пДвоичныеДанные = Строка.Файл.Получить();
			Если ТипЗнч(пДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		пТекИндексИмениФайла = соотИменаФайлов.Получить(Строка.ИмяФайла);
		Если пТекИндексИмениФайла = Неопределено Тогда 			
			пТекИндексИмениФайла = 0;
		Иначе
			пТекИндексИмениФайла = пТекИндексИмениФайла + 1;
		КонецЕсли;		
		
		пЗапись = пНаборВрФП.Добавить();
		пЗапись.Идентификатор  = пИдентификатор;
		пИндексНачалаРасширения = СтрНайти(Строка.ИмяФайла, ".", НаправлениеПоиска.СКонца);
		
		Если пИндексНачалаРасширения > 0 Тогда 
			пИмяФайлаБезРасширения  = Лев(Строка.ИмяФайла,пИндексНачалаРасширения-1);
			пРасширение 			= Сред(Строка.ИмяФайла,пИндексНачалаРасширения);
		Иначе
			пИмяФайлаБезРасширения = Строка.ИмяФайла;
			пРасширение = "";
		КонецЕсли;
		пЗапись.ПолноеИмяФайла = пИмяФайлаБезРасширения + ?(пТекИндексИмениФайла = 0, "", пТекИндексИмениФайла) + пРасширение;
		
		соотИменаФайлов.Вставить(Строка.ИмяФайла, пТекИндексИмениФайла);		
		
		Если ТипЗнч(Строка.Файл) = Тип("ДвоичныеДанные") Тогда
			пЗапись.Файл		   = Новый ХранилищеЗначения(Строка.Файл);
			пДвоичныеДанные = Строка.Файл;
		ИначеЕсли ТипЗнч(Строка.Файл) = Тип("ХранилищеЗначения") Тогда
			пЗапись.Файл		   = Строка.Файл;
		КонецЕсли;
		
	КонецЦикла;
	
	Если пНаборВрФП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	пНаборВрФП.Записать();
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-23 (#2879)
Функция ПолучитьДопДанныеДляСтруктурыКонтекста(МассивОбъектов)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Объект");
	ТЗ.Колонки.Добавить("Аналитика_2");
	ТЗ.Колонки.Добавить("СуммаРасходов");
	
	Если МассивОбъектов.Количество() = 0 Тогда 
		Возврат ТЗ;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка КАК Объект,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_2 КАК Аналитика_2,
	|	СУММА(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС) КАК СуммаРасходов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ФормаВводаБюджетаБДДС.Ссылка,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект,
	|	Аналитика_2
	|ИТОГИ
	|	СУММА(СуммаРасходов)
	|ПО
	|	Объект");
	Запрос.УстановитьПараметр("МассивОбъектов"	,	МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл 
		
		СтрокаТЗ = ТЗ.Добавить();
		
		СтрокаТЗ.Объект = Выборка.Объект;
		СтрокаТЗ.СуммаРасходов = Выборка.СуммаРасходов;
		
		ВыборкаДетали = Выборка.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл 
			Если ЗначениеЗаполнено(ВыборкаДетали.Аналитика_2) Тогда 
				СтрокаТЗ.Аналитика_2 = ?(Не ЗначениеЗаполнено(СтрокаТЗ.Аналитика_2),"",СтрокаТЗ.Аналитика_2 + ", ") + Строка(ВыборкаДетали.Аналитика_2);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
			
	Возврат ТЗ;
	
КонецФункции

//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
Функция ПолучитьОтветыВВидеСсылокMailtoДляВходящегоЭД(СтруктураКонтекст, ПочтаСогласования)
	
	Результат = Новый Структура;
	Результат.Вставить("ГиперСсылкаСогласовано", 	"");
	Результат.Вставить("ГиперСсылкаОтклонено", 		"");
	
	Пользователь 	= СтруктураКонтекст.Инициатор;
	Если СтруктураКонтекст.Свойство("НомерВерсии") Тогда
		НомерВерсии		= СтруктураКонтекст.НомерВерсии;
	Иначе
		НомерВерсии		= "";
	КонецЕсли;	
	Если СтруктураКонтекст.Свойство("ДатаВерсии") 
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-09 (#3360)
		И ЗначениеЗаполнено(СтруктураКонтекст.ДатаВерсии)
		//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-09 (#3360)
		Тогда
		ДатаВерсии = Формат(Год(СтруктураКонтекст.ДатаВерсии), "ЧГ=0")  
								+ Формат(Месяц(СтруктураКонтекст.ДатаВерсии), "ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0")
								+ Формат(День(СтруктураКонтекст.ДатаВерсии), "ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0")
								+ Формат(Час(СтруктураКонтекст.ДатаВерсии), "ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0")
								+ Формат(Минута(СтруктураКонтекст.ДатаВерсии), "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0")
								+ Формат(Секунда(СтруктураКонтекст.ДатаВерсии), "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=0");
	Иначе
		ДатаВерсии = "";
	КонецЕсли;	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
	Объект 			= СтруктураКонтекст.ТекущийОбъект; 
	Виза 			= СтруктураКонтекст.Виза;
	
			
	АдресЭлектроннойПочты =	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПочтаСогласования, "АдресЭлектроннойПочты");
	
	УИЗадачи 			= Строка(Объект.УникальныйИдентификатор());
	УИПользователя 		= Строка(Пользователь.УникальныйИдентификатор());
	УИВиза 				= Строка(Виза.УникальныйИдентификатор());
	МетаданныеЗадача 	= Объект.Метаданные().Имя + "_@"; // служебный символ, чтобы корректно распарсить при получении почты (могут быть подписи в письмах, чтобы их не захватить 
		
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-20 (#3780)
	ТребуетсяЗаявка1С = Ложь;
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")		
			И Объект.ок_ТребуетсяЗаявка1С Тогда
	
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-03 (#3997)
		
		Если СтруктураКонтекст.Свойство("Шаблон") Тогда
			НаименованиеШаблона = СтруктураКонтекст.Шаблон.Наименование;
			Если НаименованиеШаблона = "Шаблон согласования входящего электронного документа (Требуется заявка 1С)"
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-27 (#4117)
				ИЛИ НаименованиеШаблона = "Шаблон повторного согласования входящего электронного документа (Не указан номер заявки)"
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-27 (#4117) 
				ИЛИ НаименованиеШаблона = "Шаблон напоминания согласования входящего электронного документа (Требуется заявка 1С)" Тогда
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-03 (#3997) 
			ТребуетсяЗаявка1С = Истина;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-03 (#3997)
			КонецЕсли;
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-03 (#3997) 
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-20 (#3780)
	
	КомментарийКИсполнению = 
			НСтр("ru = 'Впишите ваш комментарий по выполнению задачи и номер заявки в формате [Номер], например, [181200003].
			|
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-20 (#3780)
			//|Номер заявки: [ВвестиНомерЗаявки]
			|Номер заявки" + ?(ТребуетсяЗаявка1С, " (ОБЯЗАТЕЛЬНО)", "") + ": [ВвестиНомерЗаявки]
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-20 (#3780)
			|Комментарий:'");
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-09 (#3360)
	Если СтруктураКонтекст.Свойство("ЗаявкаНомер") И ЗначениеЗаполнено(СтруктураКонтекст.ЗаявкаНомер) Тогда
		КомментарийКИсполнению = СтрЗаменить(КомментарийКИсполнению, "ВвестиНомерЗаявки", СтруктураКонтекст.ЗаявкаНомер);
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-09 (#3360)
	
	ТекстОтвета = НСтр("ru = '%1
		|
		|________________________________________________
		|Это служебная информация, необходимая для выполнения задачи.
		|Не удаляйте и не изменяйте ее!
		|
		|*Задача:%2	
		|*Виза:%3
		|*Инициатор:%4
		|*Ответ:%5
		|*НомерВерсии:%6
		|*ДатаВерсии:%7
		|*МетаданныеЗадача:%8
		|
		|'");
	
	// подготовим текст для согласования
	Согласовано = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Согласовано");
	ТекстСогласовано = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОтвета,
		КомментарийКИсполнению,
		УИЗадачи,
		УИВиза,
		УИПользователя,
		Согласовано.УникальныйИдентификатор(),
		НомерВерсии,
		ДатаВерсии,
		МетаданныеЗадача);
		
	// подготовим текст для отклонения
	Отклонено = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено");
	ТекстОтклонено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОтвета,
		КомментарийКИсполнению,
		УИЗадачи,
		УИВиза,
		УИПользователя,
		Отклонено.УникальныйИдентификатор(),
		НомерВерсии,
		ДатаВерсии,
		МетаданныеЗадача);
	
	
	Результат.ГиперСсылкаСогласовано = СформироватьСсылкуMailto(АдресЭлектроннойПочты,,,
		"" + Согласовано + ": " + Строка(Объект),
		ТекстСогласовано,
		ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"),
		"" + Согласовано + "...");
		
		
	Результат.ГиперСсылкаОтклонено = СформироватьСсылкуMailto(АдресЭлектроннойПочты,,,
		"" + Отклонено + ": " + Строка(Объект),
		ТекстОтклонено,
		ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"),
		"" + Отклонено + "...");	
	
	Возврат Результат;
КонецФункции	

Функция ПолучитьОтветыВВидеСсылокMailtoДляФормыБюджета(СтруктураКонтекст, ПочтаСогласования, ДоступныеРешения)
//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
	
	Результат = Новый Структура;
	Результат.Вставить("ГиперссылкиСогласования", "");
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
	Пользователь 	= СтруктураКонтекст.Пользователь;		
	Объект 			= СтруктураКонтекст.ТекущийОбъект; 
	Виза 			= СтруктураКонтекст.Виза;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
			
	АдресЭлектроннойПочты =	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПочтаСогласования, "АдресЭлектроннойПочты");
	
	УИЗадачи = Строка(Объект.УникальныйИдентификатор());
	УИПользователя = Строка(Пользователь.УникальныйИдентификатор());
	УИВиза = Строка(Виза.УникальныйИдентификатор());
	МетаданныеЗадача = Объект.Метаданные().Имя + "_@"; // служебный символ, чтобы корректно распарсить при получении почты (могут быть подписи в письмах, чтобы их не захватить
	
	Разделитель = "";
	
	Для Каждого ВариантРешения Из ДоступныеРешения Цикл
				
		РезультатОтвета = ВариантРешения.УникальныйИдентификатор();		
		
		
		КомментарийКИсполнению = 
		НСтр("ru = 'Впишите ваш комментарий по выполнению задачи.
		|
		|Комментарий:'");
		
		
		ТекстОтвета = НСтр("ru = '%1
		|
		|________________________________________________
		|Это служебная информация, необходимая для выполнения задачи.
		|Не удаляйте и не изменяйте ее!
		|
		|*Задача:%2	
		|*Виза:%3
		|*Инициатор:%4
		|*Ответ:%5
		|*МетаданныеЗадача:%6
		|
		|'");
		
		ТекстОтвета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОтвета,
			КомментарийКИсполнению,
			УИЗадачи,
			УИВиза,
			УИПользователя,
			РезультатОтвета,
			МетаданныеЗадача);
		
		СсылкаНаОтвет = СформироватьСсылкуMailto(АдресЭлектроннойПочты,,,
		"" + ВариантРешения + ": " + Строка(Объект),
		ТекстОтвета,
		ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"),
		"" + ВариантРешения + "...");
		
		Результат.ГиперссылкиСогласования = Результат.ГиперссылкиСогласования + Разделитель + СсылкаНаОтвет;
		
		Разделитель = " / ";
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)

//ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-03-29 (#3003)
//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
//Функция ПолучитьОтветыВВидеСсылокMailto(Пользователь, Виза, ПочтаСогласования, ДоступныеРешения)
Функция ПолучитьОтветыВВидеСсылокMailto(СтруктураКонтекст, ДоступныеРешения)
//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", "");
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-13 (#3340)
	Если ТипЗнч(СтруктураКонтекст.ТекущийОбъект) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") 
	 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-21 (#3393)
	 ИЛИ ТипЗнч(СтруктураКонтекст.ТекущийОбъект) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета") 	 
	 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-21 (#3393)		
	Тогда
		ПочтаСогласования = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Учетная запись почты согласований");
		Если ТипЗнч(ПочтаСогласования) = Тип("СправочникСсылка.бит_фн_НастройкиДоставкиОповещений") Тогда
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-06-17 (#3377)
			ПочтаСогласования = Справочники.бит_фн_НастройкиДоставкиОповещений.ПолучитьЗначениеНастройки(ПочтаСогласования, "EMAILУчетнаяЗапись");
			//ПочтаСогласования = ок_ОбменСКонтрагентамиВнутренний.НастройкиДоставкиОповещений_ПолучитьЗначениеНастройки(ПочтаСогласования, "EMAILУчетнаяЗапись");
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-17 (#3377)
		КонецЕсли;	
		Если ЗначениеЗаполнено(ПочтаСогласования) Тогда
			Результат = ПолучитьОтветыВВидеСсылокMailtoДляФормыБюджета(СтруктураКонтекст, ПочтаСогласования, ДоступныеРешения);
		КонецЕсли;	
	ИначеЕсли ТипЗнч(СтруктураКонтекст.ТекущийОбъект) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ПочтаСогласования = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Учетная запись почты согласований ЭДО");
		Если ТипЗнч(ПочтаСогласования) = Тип("СправочникСсылка.бит_фн_НастройкиДоставкиОповещений") Тогда
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-06-17 (#3377)
			ПочтаСогласования = Справочники.бит_фн_НастройкиДоставкиОповещений.ПолучитьЗначениеНастройки(ПочтаСогласования, "EMAILУчетнаяЗапись");
			//ПочтаСогласования = ок_ОбменСКонтрагентамиВнутренний.НастройкиДоставкиОповещений_ПолучитьЗначениеНастройки(ПочтаСогласования, "EMAILУчетнаяЗапись");
			//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-17 (#3377)
		КонецЕсли;
		Если ЗначениеЗаполнено(ПочтаСогласования) Тогда
			Результат = ПолучитьОтветыВВидеСсылокMailtoДляВходящегоЭД(СтруктураКонтекст, ПочтаСогласования);
		КонецЕсли;	
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-13 (#3340)
	
	Возврат Результат;
	
КонецФункции

// Формирует ссылку mailto
Функция СформироватьСсылкуMailto(
	Кому = "",
	Копия = "",
	СкрытаяКопия = "",
	ТемаПисьма = "",
	ТекстПисьма = "",
	ТипТекста = Неопределено,
	Представление = "") 
	
	Если ТипТекста = Неопределено Тогда
		ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML")
	КонецЕсли;
	
	СсылкаMailto = "";
	НачатоЗаполнениеПараметров = Ложь;
	
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "to", Кому, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "cc", Копия, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "bcc", СкрытаяКопия, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "subject", ТемаПисьма, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "body", ТекстПисьма, НачатоЗаполнениеПараметров);
	
	Если Не ПустаяСтрока(СсылкаMailto) Тогда
		
		Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML") Тогда
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = СсылкаMailto;
			КонецЕсли;
			
			СсылкаMailto = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=""mailto:%1"">%2</a>", 
				СсылкаMailto,
				Представление);
			
		Иначе
			
			СсылкаMailto = "mailto:" + СсылкаMailto;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаMailto;
	
КонецФункции

// Дописывает в ссылку новый параметр, если значение параметра заполнено
Процедура ДобавитьПараметрКСсылкеMailto(СсылкаMailto, НазваниеПараметра, ЗначениеПараметра, НачатоЗаполнениеПараметров)
	
	Если ПустаяСтрока(ЗначениеПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметра = ЗакодироватьСсылкуMailto(ЗначениеПараметра);
	
	Если НазваниеПараметра = "to" Тогда
		
		СсылкаMailto = СсылкаMailto + ЗначениеПараметра;
		Возврат;
		
	КонецЕсли;
	
	Если НачатоЗаполнениеПараметров Тогда
		
		СимволРазделитель = "&";
		
	Иначе
		
		СимволРазделитель = "?";
		НачатоЗаполнениеПараметров = Истина;
		
	КонецЕсли;
	
	СсылкаMailto = СсылкаMailto + СимволРазделитель + НазваниеПараметра + "=" + ЗначениеПараметра;
	
	Возврат;
	
КонецПроцедуры

// Кодирует символы " ", ПС, "?", "&", "%"
Функция ЗакодироватьСсылкуMailto(СсылкаMailto) 
	
	ЗакодированнаяСсылкаMailto = СсылкаMailto;
	
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "%", "%25");
	
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, Символы.ПС, "%0D%0A");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, " ", "%20");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "?", "%3F");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "&", "%26");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, """", "%22");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "<", "%3C");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, ">", "%3E");
	
	Возврат ЗакодированнаяСсылкаMailto;
	
КонецФункции

Функция ПодготовитьСтруктуруДляОпределенияВидаРешения(ТекущийОбъект)  
	
	СтруктураПараметров = Новый Структура;
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаданныеОбъекта);
	СтруктураПараметров.Вставить("ОбъектСистемы",ОбъектСистемы);
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеОбъекта) Тогда
		
		СтруктураПараметров.Вставить("Организация",ТекущийОбъект.Организация);
		
	КонецЕсли; 

	Возврат СтруктураПараметров;
	
КонецФункции
//ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-03-29 (#3003)

//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
Процедура СформироватьИЗаписатьСообщение(идКонтактнойИнформации
	                          ,ШаблонСообщения
							  ,НастройкаДоставки
							  ,СтруктураКонтекст
							  ,КэшАдресов
							  ,ВыводитьСообщения = Ложь
							  ,Ошибки = Неопределено) Экспорт

	ТочкиДоставки = ПодготовитьТочкиДоставки(идКонтактнойИнформации, 
						ШаблонСообщения, НастройкаДоставки,
						СтруктураКонтекст, КэшАдресов, ВыводитьСообщения, Ошибки); 
						
	Для каждого ТочкаДоставки Из ТочкиДоставки Цикл
		ПараметрыОповещения = ЗаполнитьОповещение(ТочкаДоставки, ШаблонСообщения, 
								НастройкаДоставки, СтруктураКонтекст, 
								Ложь, ВыводитьСообщения);
		ЗаписатьОповещение(ПараметрыОповещения, ВыводитьСообщения);
	КонецЦикла; 

КонецПроцедуры
//1С-ИжТиСи, Кондратьев, 03.2020, обновление )

#КонецЕсли
