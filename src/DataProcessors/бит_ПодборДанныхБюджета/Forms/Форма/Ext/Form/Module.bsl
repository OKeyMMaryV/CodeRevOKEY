
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
 
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Не Параметры.Свойство("Команда") Тогда		
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено. 
								  |Для открытия формы можно воспользоваться командой ""Подбор"" в формах документов.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Сценарий = Параметры.Сценарий;

	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		Объект.НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Объект.КонецПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли; 
	
	ЗакрыватьПриВыборе = Ложь;
	
	ЗаполнитьКэшЗначений();
	
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	, "БДДС"
																	, фКэшЗначений.ИзмеренияДоп
																	, фКэшЗначений.НастройкиИзмерений);
	
	// Инициализация схемы компановки данных
	ИнинциализироватьСКД();
	УстановитьЗаголовокФормы(ЭтотОбъект); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБДДС

&НаКлиенте
Процедура БДДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	РезультатПодбора = Новый Массив(); 
	ПодготовитьРезультатПодбора(Элемент.ТекущиеДанные, РезультатПодбора);
	
	ОповеститьВладельцаОВыборе(РезультатПодбора, Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Описание оповещения процедуры "ВыбратьПериод".
//
// Параметры:
//  РезультатВыбора	 - 	 - 
//  ДопПараметры	 - Произвольный - дополнительные параметры.
//
&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	УстановитьЗаголовокФормы(ЭтотОбъект); 
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Отказ = НЕ ПериодЗаполненПравильно(ЭтотОбъект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	Если ПроверитьЗаполнение() Тогда
		СкрытьНастройки();
		ОбновитьДанныеБюджета();
	КонецЕсли; 
	
КонецПроцедуры // КомандаОбновить()

&НаКлиенте
Процедура БДДССнятьФлажки(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(Объект.БДДС, "Перенести", 0);	
	
КонецПроцедуры // БДДССнятьФлажки()

&НаКлиенте
Процедура БДДСУстановитьФлажки(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(Объект.БДДС, "Перенести", 1);
	
КонецПроцедуры // БДДСУстановитьФлажки()
     
&НаКлиенте
Процедура БДДСИнвертироватьФлажки(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(Объект.БДДС, "Перенести", 2);	
	
КонецПроцедуры // БДДСИнвертироватьФлажки()

&НаКлиенте
Процедура ДобавитьВДокумент(Команда)
	
	ПеренестиВДокумет(Ложь);
	
КонецПроцедуры // ПеренестиДобавить()

&НаКлиенте
Процедура ЗагрузитьВДокумент(Команда)
	
	ПеренестиВДокумет(Истина);
	
КонецПроцедуры // ПеренестиЗагрузить()

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	СкрытьНастройки();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОповеститьВладельцаОВыборе(РезультатПодбора, Загрузка)

	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("РезультатПодбора",РезультатПодбора);
	ПараметрыПередачи.Вставить("ОчиститьТаблицу", Загрузка);
	
	Оповестить("ПодборДанныхБюджета", ПараметрыПередачи, ЭтотОбъект.ВладелецФормы);
	
КонецПроцедуры // ОповеститьВладельцаОВыборе()

&НаКлиенте
Процедура ПеренестиВДокумет(ЭтоЗагрузка)
	
	РезультатПодбора = Новый Массив(); 
	
	Для каждого СтрокаТаблицы Из Объект.БДДС Цикл
		Если СтрокаТаблицы.Перенести Тогда
			 ПодготовитьРезультатПодбора(СтрокаТаблицы, РезультатПодбора);
		КонецЕсли; 
	КонецЦикла; 
	
	ОповеститьВладельцаОВыборе(РезультатПодбора, ЭтоЗагрузка);
	Закрыть();
	
КонецПроцедуры // ПеренестиДанные()

&НаКлиенте
Процедура ПодготовитьРезультатПодбора(ДанныеСтроки, РезультатПодбора)
	
	НовыеДанныеСтроки = НовыеДанныеСтроки();
	ЗаполнитьЗначенияСвойств(НовыеДанныеСтроки, ДанныеСтроки);
	РезультатПодбора.Добавить(НовыеДанныеСтроки);

КонецПроцедуры
  
&НаКлиентеНаСервереБезКонтекста 
Функция ПериодЗаполненПравильно(Форма)

	ЗаполненПравильно = Истина;
	
	Объект = Форма.Объект;
	Отказ  = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Начало периода"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", ,Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Конец периода"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.КонецПериода", ,Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НачалоПериода) И ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Если Объект.КонецПериода < Объект.НачалоПериода Тогда
			ТекстСообщения = НСтр("ru ='Период указан неверно! Дата начала больше даты окончания.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", ,Отказ);
		КонецЕсли;
	КонецЕсли; 
	
	Если Отказ Тогда
		ЗаполненПравильно = Ложь;
	КонецЕсли;  
	
	Возврат ЗаполненПравильно; 

КонецФункции // ПериодЗаполненПравильно()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)

	Объект = Форма.Объект;

	ЗаголовокОтчета = СтрШаблон(НСтр("ru = 'Подбор данных бюджета %1'"),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Объект.НачалоПериода, Объект.КонецПериода));

	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция НовыеДанныеСтроки()

	СвойстваСтроки = "Аналитика_1, Аналитика_2, Аналитика_3, Аналитика_4, Аналитика_5, Аналитика_6, Аналитика_7,
					 |БанковскийСчет, Валюта, ДоговорКонтрагента, Количество, Комментарий, Контрагент, НоменклатурнаяГруппа,
					 |Период, Проект, СтавкаНДС, СтатьяОборотов, Сумма, СуммаРегл, СуммаСценарий, СуммаУпр, ЦФО";
	
	Возврат Новый Структура(СвойстваСтроки);	

КонецФункции
 
// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	// Данные по дополнительным аналитикам
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
		
КонецПроцедуры // ЗаполнитьКэшЗначений()


// Процедура инициализирует схему компановки данных.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ИнинциализироватьСКД()

	// Инициализация схемы компановки данных
	СхемаКомпоновкиДанных = Обработки.бит_ПодборДанныхБюджета.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СхемаКомпоновкиДанных, 
		"НаборДанных",	бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
					
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	Объект.Компоновщик.Инициализировать(ИсточникНастроек);
	Объект.Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

КонецПроцедуры // ИнинциализироватьСКД()

&НаСервере
Функция ОборотыПоБюджетам()
	
	Если ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		НачалоПериода = Объект.НачалоПериода;
	Иначе	
		НачалоПериода = '2000-01-01';
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		КонецПериода = КонецДня(Объект.КонецПериода);
	Иначе	
		КонецПериода = '2030-12-31';
	КонецЕсли; 
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ПараметрыСКД = Объект.Компоновщик.ФиксированныеНастройки.ПараметрыДанных;
	ПараметрыСКД.УстановитьЗначениеПараметра("Сценарий", 	  Объект.Сценарий);
	ПараметрыСКД.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	ПараметрыСКД.УстановитьЗначениеПараметра("КонецПериода",  КонецПериода);
	
	// Формирование макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Объект.Компоновщик.ПолучитьНастройки(),,,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетСКД);

	ОборотыПоБюджетам = Новый ТаблицаЗначений(); 
	ПроцессорВывода  = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ОборотыПоБюджетам);
	ПроцессорВывода.Вывести(ПроцессорКД);
	
	Возврат ОборотыПоБюджетам;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеБюджета()
	
	ТаблицаРезультат = ОборотыПоБюджетам(); 
	Если ТаблицаРезультат.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Нет данных, удовлетворяющих отбору.'"));
	КонецЕсли; 

	Объект.БДДС.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл		
		
		НоваяСтрока = Объект.БДДС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла; 
		
КонецПроцедуры // ОбновитьДанныеБюджета() 
 
&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыПодбора.ТекущаяСтраница = Элементы.НастройкиПодбора;
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()

	Элементы.РазделыПодбора.ТекущаяСтраница = Элементы.Подбор;
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

#КонецОбласти