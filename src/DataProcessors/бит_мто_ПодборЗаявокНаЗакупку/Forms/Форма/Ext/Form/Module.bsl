
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	// Заполним структуру параметров
	фСтруктураПараметров = Новый Структура;
	Если Параметры.Свойство("СтруктураПараметров") Тогда
		Для каждого ТекПараметр Из Параметры.СтруктураПараметров Цикл
			фСтруктураПараметров.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ фСтруктураПараметров.Свойство("ИмяМакета") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	// Инициализируем настройки компоновщика
	АдресСхемыКомпоновкиДанных = Обработки.бит_мто_ПодборЗаявокНаЗакупку.ИнициализироватьКомпоновщик(Объект.Компоновщик, УникальныйИдентификатор, "СКД");
	
	Элементы.КомпоновщикПользовательскиеНастройки.РежимОтображения = РежимОтображенияНастроекКомпоновкиДанных.БыстрыйДоступ;	
	
	// Установим заголовок формы
	ЭтаФорма.АвтоЗаголовок = Ложь;
	
	УстановитьЗначенияПоУмолчанию();
	
	ЗаполнитьПользовательскиеНастройкиМакета();
	
	// Настроим отображение полей доп. аналитик в табличном поле Результат.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																							,"Товары"
																							,фКэшЗначений.ИзмеренияДоп
																							,фКэшЗначений.НастройкиИзмерений);
																							
	ВидимостьНазначенныхАналитик();
	
	// Сразу получаем результат запроса
	ПолучитьРезультатЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Ложь);
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаПриИзменении(Элемент)
	
	ИД = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииДоговора(ИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
														  	   , Элемент
															   , ТекущиеДанные
															   , ИмяАналитики
															   , СтандартнаяОбработка
															   , фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // ТоварыАналитикаНачалоВыбора()

&НаКлиенте
Процедура ТоварыАналитикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
														  	   , Элемент
															   , ТекущиеДанные
															   , ИмяАналитики
															   , СтандартнаяОбработка
															   , фКэшЗначений.НастройкиИзмерений);
                                                          
КонецПроцедуры // ТоварыАналитикаАвтоПодбор()

&НаКлиенте
Процедура ТоварыАналитикаОчистка(Элемент, СтандартнаяОбработка)
	
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Товары", "");
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			, ТекущиеДанные
																		   	, ИмяАналитики
																		   	, СтандартнаяОбработка
																		   	, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // ТоварыАналитикаОчистка()

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ПолучитьРезультатЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для каждого Строка Из Объект.Товары Цикл
	
		Строка.Изменить = Истина;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для каждого Строка Из Объект.Товары Цикл
	
		Строка.Изменить = Ложь;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьФлажки(Команда)
	
	Для каждого Строка Из Объект.Товары Цикл
	
		Строка.Изменить = НЕ Строка.Изменить;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаявки(Команда)
	
	ПеренестиЗаявки("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаявки(Команда)
	
	ПеренестиЗаявки("Загрузить");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСНастройками

// Процедура - действие команды "КомандаСохранитьНастройки".
// 
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
	
		ПараметрыФормы.Вставить("СохраненнаяНастройка",ТекущаяНастройка);
	
	КонецЕсли; 
		
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройки",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаСохранитьНастройки()

// Процедура - обработчик оповещения о закрытии формы сохранения настроек. 
// 
&НаКлиенте
Процедура СохранитьНастройки(СохрНастройка, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		
		ТекущаяНастройка = СохрНастройка;
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

// Процедура - действие команды "КомандаВосстановитьНастройки".
// 
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроек",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаВосстановитьНастройки()

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек

// Функция готовит стуктуру с настройками для сохранения.
// 
// Возвращаемое значение:
//   СтруктураНастройки   - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастройки = Новый Структура;
	
	СтруктураНастройки.Вставить("ПользовательскиеНастройки", Новый ХранилищеЗначения(Объект.Компоновщик.ПользовательскиеНастройки));
	
	Возврат СтруктураНастройки;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Функция применяет сохраненные настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Функция ПрименитьНастройки(ВыбНастройка)

	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			ПользовательскиеНастройки = СтруктураНастроек.ПользовательскиеНастройки.Получить();
			
			Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
			
			ТекущаяНастройка = ВыбНастройка;
			УстановитьЗаголовокФормыСервер();				
				
		КонецЕсли;	 
		
	КонецЕсли; 
	
КонецФункции // ПрименитьНастройки()

// Процедура устанавливает настройку либо из последних использованных, 
// 	либо из настройки по умолчанию.
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	// Получим настройку по - умолчанию и последнюю использованную.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипНастройки"			  , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	СтруктураПараметров.Вставить("НастраиваемыйОбъект"    , фКэшЗначений.НастраиваемыйОбъект);
	СтруктураПараметров.Вставить("ИспользоватьПриОткрытии", Истина);
	СохрНастройка = Справочники.бит_СохраненныеНастройки.ПолучитьНастройкуПоУмолчанию(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		
		ПрименитьНастройки(СохрНастройка);
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

#КонецОбласти 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_мто_ПодборЗаявокНаЗакупку");
	
	фКэшЗначений.Вставить("ИзмеренияДоп"       , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним"));
	фКэшЗначений.Вставить("НастройкиИзмерений" , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура выполняет запрос и заполняет табличную часть "Результат".
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ПолучитьРезультатЗапроса()

	ЭлементыУпорядочивания = Неопределено;
	Результат = Обработки.бит_мто_ПодборЗаявокНаЗакупку.ВыполнитьЗапросПоНастройке(Объект.Компоновщик, АдресСхемыКомпоновкиДанных, ЭлементыУпорядочивания);
	
	Если Результат.Количество() = 0 Тогда
	
		ТекстСообщения =  НСтр("ru = 'Нет данных, удовлетворяющих отбору'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
	КонецЕсли; 
	
	Объект.Товары.Загрузить(Результат);

	// Если не заполнена НДС подставляем 18
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
		
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		
		КонецЕсли; 
	
	КонецЦикла;
	
	// Упорядочивание
	Если ЭлементыУпорядочивания <> Неопределено Тогда
	
		Для каждого элУп Из ЭлементыУпорядочивания Цикл
		
			Если элУп.Использование Тогда
			
				Если элУп.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
				
					Объект.Товары.Сортировать(Строка(элУп.Поле)+" Возр");
					
				Иначе 	
					Объект.Товары.Сортировать(Строка(элУп.Поле)+" Убыв");
				КонецЕсли; 
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры // ПолучитьРезультатЗапроса() 

// Процедура устанавливает заголовок формы на клиенте.
// 
&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = "Подбор заявок на закупку ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтаФорма.Заголовок = "Подбор заявок на закупку";
		
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура устанавливает заголовок формы на сервере.
// 
&НаСервере
Процедура УстановитьЗаголовокФормыСервер()
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = "Подбор заявок на закупку ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтаФорма.Заголовок = "Подбор заявок на закупку";
		
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормыСервер()

// Процедура пересчитывает суммы табличной части при изменении цены или количества.
// 
&НаКлиенте
Процедура ПриИзмененииКоличествоЦена()

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Ложь);

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;

КонецПроцедуры // ПриИзмененииКоличествоЦена()

// Процедура пересчитывает суммы табличной части при изменении суммы.
// 
&НаКлиенте
Процедура ПриИзмененииСумма()

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;

	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Ложь);

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;

КонецПроцедуры // ПриИзмененииСумма()

// Процедура осуществляет расчет суммы НДС, исходя из постоянной суммы.
// 
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС = Ложь)

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(
											СтрокаТабличнойЧасти.Сумма,
											Истина,
											СуммаВключаетНДС,
											бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;

КонецПроцедуры

// Процедура обработка при изменении договора в табличной части. 
// 
&НаСервере
Процедура ПриИзмененииДоговора(ИД)

	ТекСтрока = Объект.Товары.НайтиПоИдентификатору(ИД);

	Если ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента) Тогда
	
		ТекСтрока.ВалютаДокумента = ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	КонецЕсли; 
	
КонецПроцедуры // ПриИзмененииДоговора()

// Процедура управляет видимостью полей назначенных аналитик.
// 
&НаСервере
Процедура ВидимостьНазначенныхАналитик()

	СовпадающиеАналитики = Новый Соответствие;
	
	МассивТипов = Новый Массив;
	
	Для каждого Реквизит Из Метаданные.Обработки.бит_мто_ПодборЗаявокНаЗакупку.ТабличныеЧасти.Товары.Реквизиты Цикл
	                         
		Если Найти(Реквизит.Имя, "Аналитика")=0 Тогда
		
			Для каждого ТипРек Из Реквизит.Тип.Типы() Цикл
			
				Если НЕ ТипРек = Тип("Булево")
					И НЕ ТипРек = Тип("Дата")
					И НЕ ТипРек = Тип("Строка")
					И НЕ ТипРек = Тип("Число") Тогда
					
					СтрРекв = Новый Структура("Имя, Тип", Реквизит.Имя, ТипРек);
					МассивТипов.Добавить(СтрРекв);
				
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Настр = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Для каждого Аналит Из Настр Цикл
		
		Если НЕ Аналит.Значение.ЭтоСоставнойТип Тогда 
		
			Для каждого СтрРекв Из МассивТипов Цикл
				
				ТипРек = СтрРекв.Тип;
				Если Аналит.Значение.ТипЗначения.СодержитТип(ТипРек) Тогда 
					СовпадающиеАналитики.Вставить(Аналит.Ключ, СтрРекв.Имя);
					Прервать;
				КонецЕсли;
			
			КонецЦикла; 
			
		КонецЕсли;	
			
	КонецЦикла; 
	
	Для каждого Соотв Из СовпадающиеАналитики Цикл
	
		ИмяАналитики = Соотв.Ключ; 
		Элементы["Товары"+ИмяАналитики].Видимость = Ложь;
	
	КонецЦикла; 
	
КонецПроцедуры // ВидимостьНазначенныхАналитик()

// Процедура переносит заявки на закупку.
// 
// Параметры:
//  ИмяКоманды - Строка.
// 
&НаКлиенте
Процедура ПеренестиЗаявки(ИмяКоманды)

	УпакованнаяТаблица = УпаковатьТаблицуЗначений();

	Если УпакованнаяТаблица <> Неопределено Тогда
		
		СтрПереноса = Новый Структура;
		СтрПереноса.Вставить("Хранилище", УпакованнаяТаблица);
		
		Если ИмяКоманды = "Загрузить" Тогда
		
			СтрПереноса.Вставить("ОчищатьТабЧасть", Истина);
			
		Иначе	
			СтрПереноса.Вставить("ОчищатьТабЧасть", Ложь);
		КонецЕсли; 
		
		Оповестить(фСтруктураПараметров.ИмяСобытия, СтрПереноса, ЭтаФорма.ВладелецФормы);	
		
	КонецЕсли; 
	
КонецПроцедуры // ПеренестиЗаявки()

// Процедура упаковывает в таблицу значений строки для переноса.
// 
&НаСервере
Функция УпаковатьТаблицуЗначений()

	СтрОтбора = Новый Структура("Изменить", Истина);
	СтрокиДляПереноса = Объект.Товары.НайтиСтроки(СтрОтбора);

	Если СтрокиДляПереноса.Количество() = 0 Тогда
		Возврат Неопределено;		
	КонецЕсли;	
		
	ТаблицаСтрок = Объект.Товары.Выгрузить(СтрокиДляПереноса);
	УпакованнаяТаблица = бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаСтрок);
	
	Возврат УпакованнаяТаблица;
	
КонецФункции // УпаковатьТаблицуЗначений()

// Процедура заполняет пользовательские настройки из текущего документа.
// 
&НаСервере
Процедура ЗаполнитьПользовательскиеНастройкиМакета()

	ПользоватНастройки = Объект.Компоновщик.ПолучитьНастройки();
	
	Для каждого Настр Из ПользоватНастройки.Отбор.Элементы Цикл
	
		ИмяНастройки = Строка(Настр.ЛевоеЗначение);
		
		Если ИмяНастройки = "Организация" 
			И ЗначениеЗаполнено(фСтруктураПараметров.Документ["Организация"]) Тогда
		
			Настр.Использование = Истина;
			Настр.ПравоеЗначение = фСтруктураПараметров.Документ["Организация"];
		
		КонецЕсли; 
		
		Если ИмяНастройки = "Контрагент" 
			И ЗначениеЗаполнено(фСтруктураПараметров.Документ["Контрагент"]) Тогда
		
			Настр.Использование = Истина;
			Настр.ПравоеЗначение = фСтруктураПараметров.Документ["Контрагент"];
		
		КонецЕсли; 
		
		Если ИмяНастройки = "ДоговорКонтрагента" 
			И ЗначениеЗаполнено(фСтруктураПараметров.Документ["ДоговорКонтрагента"]) Тогда
		
			Настр.Использование = Истина;
			Настр.ПравоеЗначение = фСтруктураПараметров.Документ["ДоговорКонтрагента"];
		
		КонецЕсли; 
		
		Если ИмяНастройки = "ВидОперации" 
			И ЗначениеЗаполнено(фСтруктураПараметров.Документ["ВидОперации"]) Тогда
			
			ВидОперации = фСтруктураПараметров.Документ["ВидОперации"];
			
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
			
				Настр.Использование = Истина;
				Настр.ПравоеЗначение = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Товары;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда	
				
				Настр.Использование = Истина;
				Настр.ПравоеЗначение = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда	
				
				Настр.Использование = Истина;
				Настр.ПравоеЗначение = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Оборудование;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Объект.Компоновщик.ЗагрузитьНастройки(ПользоватНастройки);
	
КонецПроцедуры // ЗаполнитьПользовательскиеНастройкиМакета()

#КонецОбласти

