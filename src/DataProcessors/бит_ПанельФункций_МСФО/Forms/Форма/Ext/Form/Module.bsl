
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 24.09.2015 13:04:02
	СхемаФинансовыеИнструменты = Обработки.бит_ПанельФункций_МСФО.ПолучитьМакет("СхемаФинансовыеИнструменты1");
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Обработка.бит_ПанельФункцийМСФО.Форма");
	СхемаОС = Обработки.бит_ПанельФункций_МСФО.ПолучитьМакет("СхемаОС");
	//-- СВВ}
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	ЭтоСемействоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	
	ПодключитьСхемы(ЭтоСемействоЕРП);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СхемаОбщиеСведенияВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	Если Найти(ИмяЭлемента, "РегистрСведений_битchr95МаскиКодов_ФормаЗаписи") Тогда
		
		ПараметрыФормы = Новый Структура;                                      
		ПараметрыФормы.Вставить("Ключ", ПолучитьКлюч());	
		ОткрытьФорму("РегистрСведений.бит_МаскиКодов.ФормаЗаписи", ПараметрыФормы);	
		
	Иначе Если Найти(ИмяЭлемента, "ВводНачальныхОстатковПоОС") Тогда		
			Форма = ПолучитьФорму("Документ.бит_му_ПринятиеКУчетуОС.Форма.ФормаСписка");	
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "ВидОперации", ПолучитьВидОперацииОС(), ВидСравненияКомпоновкиДанных.Равно,, Истина);
			Форма.Открыть();
			Иначе Если Найти(ИмяЭлемента, "ВводНачальныхОстатковПоФинансовойАренде") Тогда
				Форма = ПолучитьФорму("Документ.бит_му_ПринятиеКУчетуОС.Форма.ФормаСписка");	
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "ВидОперации", ПолучитьВидОперацииФинАренда(), ВидСравненияКомпоновкиДанных.Равно,, Истина);
				Форма.Открыть();				
				Иначе Если Найти(ИмяЭлемента, "ВводНачальныхОстатковПоФинансовымИнструментам") Тогда
					Форма = ПолучитьФорму("Документ.бит_му_ПризнаниеФинИнструментов.Форма.ФормаСписка");
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "ВидОперации", ПолучитьВидОперацииФинИнструменты(), ВидСравненияКомпоновкиДанных.Равно,, Истина);
					Форма.Открыть();					
				Иначе				
				бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидОперацииОС()

	Результат = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводНачальныхОстатковОС;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВидОперации()

&НаСервере
Функция ПолучитьВидОперацииФинАренда()

	Результат = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводОстатковОСВФинансовойАренде;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВидОперации()

&НаСервере
Функция ПолучитьВидОперацииФинИнструменты()

	Результат = Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов.ВводНачальныхОстатковКредитыЗаймыПолученные;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВидОперации()

&НаСервере
Функция ПолучитьКлюч()

	Ключ = РегистрыСведений.бит_МаскиКодов.СоздатьКлючЗаписи(Новый Структура("ОбъектСистемы, ИмяРеквизита", Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "ПланСчетов.бит_Дополнительный_2"), "Код"));

	Возврат Ключ;
	
КонецФункции // ПолучитьКлюч()

&НаКлиенте
Процедура СхемаФинансовыеИнструментыВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
КонецПроцедуры

&НаКлиенте
Процедура СхемаМПЗВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
КонецПроцедуры

&НаКлиенте
Процедура СхемаОтложенныеНалогиВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
КонецПроцедуры

&НаКлиенте
Процедура СхемаРазнесениеСальдоАктивноПассивныхСчетовВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
КонецПроцедуры

&НаКлиенте
Процедура СхемаЗакрытиеСчетовВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
КонецПроцедуры

&НаКлиенте
Процедура СхемаРегламентныеОперацииВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
КонецПроцедуры

&НаКлиенте
Процедура СхемаОтчетностьВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");	
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Форма1","_Форма");	
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Форма2","_Форма");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Форма3","_Форма");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Форма4","_Форма");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Форма5","_Форма");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Форма6","_Форма");
	
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
	
КонецПроцедуры	

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Процедура подключает макеты-схемы.
// 
// Параметры:
//  ЭтоСемействоЕРП - Булево
//
&НаСервере
Процедура ПодключитьСхемы(ЭтоСемействоЕРП)
	
	ИмяСхемыОС = ?(ЭтоСемействоЕРП, "СхемаОбщиеСведения_ЕРП", "СхемаОбщиеСведения");
	
	// Устанавливаем графические схемы
	СхемаОбщиеСведения 		   					= Обработки.бит_ПанельФункций_МСФО.ПолучитьМакет(ИмяСхемыОС);
	СхемаФинансовыеИнструменты 					= Обработки.бит_ПанельФункций_МСФО.ПолучитьМакет("СхемаФинансовыеИнструменты");
	СхемаМПЗ 				 					= Обработки.бит_ПанельФункций_МСФО.ПолучитьМакет("СхемаМПЗ");
	СхемаОтложенныеНалоги 	  					= Обработки.бит_ПанельФункций_МСФО.ПолучитьМакет("СхемаОтложенныеНалоги");
	СхемаРазнесениеСальдоАктивноПассивныхСчетов = Обработки.бит_ПанельФункций_МСФО.ПолучитьМакет("СхемаРазнесениеСальдоАктивноПассивныхСчетов");
	СхемаЗакрытиеСчетов 	 					= Обработки.бит_ПанельФункций_МСФО.ПолучитьМакет("СхемаЗакрытиеСчетов");
	СхемаРегламентныеОперации 					= Обработки.бит_ПанельФункций_МСФО.ПолучитьМакет("СхемаРегламентныеОперации");
	СхемаОтчетность 		  					= Обработки.бит_ПанельФункций_МСФО.ПолучитьМакет("СхемаОтчетность");
	
КонецПроцедуры// ПодключитьСхемы()

//ОК  Довбешка Т. 01.07.2013 Процедура открывает регистр сведений "бит_ВалютныеНеденежныеСтатьи"
&НаКлиенте
Процедура ОткрытьНастройкиМСФО(Элемент)

	Попытка
		ОткрытьФорму("РегистрСведений.бит_му_Настройки.ФормаСписка");
    Исключение
		ОбработкаИсключения(ИнформацияОбОшибке());  
	КонецПопытки;

КонецПроцедуры //ОК  Довбешка Т.

// бит_DKravchenko Процедура обрабатывает исключения (ошибки).
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке.
//
&НаКлиенте
Процедура ОбработкаИсключения(ИнформацияОбОшибке)
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		
		ПричинаОшибки = ИнформацияОбОшибке.Причина;
		
		Предупреждение(?(ПричинаОшибки.Описание = Неопределено,
						"При выполенении действия произошла ошибка.",
						ПричинаОшибки.Описание));
		
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаИсключения()

&НаКлиенте
Процедура СхемаОСВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// для дублирующихся элементов убираем номер из имени
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
КонецПроцедуры

#КонецОбласти
