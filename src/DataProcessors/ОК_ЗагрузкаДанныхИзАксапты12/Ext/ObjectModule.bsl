
// Параметры соединения с SQL
Перем Адрес;
Перем Пользователь;
Перем Пароль;
Перем БазаДанных;
Перем ПодключеноКБазе;
Перем мТаймаут;

// Почтовые параметры
Перем мСерверSMTP;
Перем мПортSMTP;
Перем мПользовательSMTP;
Перем мПарольSMTP;
Перем мОтправитель;
Перем мКому;
Перем мАутентификация;

//Перем Организация;
Перем Граница;
Перем мПоставщики;
Перем мПокупатели;
Перем ПорцияТранзакции;
Перем РБСтрокаСоединения;
Перем РБАдресСервера;
Перем мГруппаПоОрганизации;

// объекты для подключения к базе
Перем СоединениеАДО, ЗапросАДО; 

// таблица для формирования отчета об ошибках
Перем ТаблицаОшибок, мПутьСохраненияОтчетовОбОшибках;
Перем ТаблицаОшибокБезИсключений, КоличествоЗагруженных, СопоставленныеДоговора;
Перем КоличествоДокЗагруженных, ВремяНачалаЗагрузки, ВремяОкончанияЗагрузки;

////////////////////////////////////////////////////////////////////////////////////
//Загрузка
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

Процедура Загрузка(ЗагрузитьГруппу = Истина, ДатаНачала = Неопределено, ДатаОкончания = Неопределено, ТипыОпераций = Неопределено, Порция = 0, УсловиеRecNoВаучеры="", ПроверятьЗакрытыйПериод = Ложь) Экспорт
	
	ВремяНачалаЗагрузки 		= Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy hh:mm:ss"); 
	КоличествоДокЗагруженных 	= 0;
	
	Если ПроверятьЗакрытыйПериод Тогда 
		Если ДатаНачала <> Неопределено И Граница <> Неопределено Тогда
			Если ДатаНачала < Граница Тогда
				Сообщение = "Дата запрета редактирования " + Граница + ", позже периода загрузки, начинающегося с " + ДатаНачала; 
				#Если Сервер Тогда
					ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Загрузка", УровеньЖурналаРегистрации.Ошибка,,,Сообщение);
				#ИначеЕсли Клиент Тогда 
					Предупреждение(Сообщение);
				#КонецЕсли 
				//ОК_ОбщегоНазначения.ВыводСтатусаСообщения(,Сообщение);
				//Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	ДатаНачалаЗагрузки = ТекущаяДата();
	// проверим поступившие параметры
	Если ЗагрузитьГруппу Тогда
		Если ДатаНачала = Неопределено
			ИЛИ ТипЗнч(ДатаНачала) <> Тип("Дата")
			ИЛИ ДатаОкончания = Неопределено
			ИЛИ ТипЗнч(ДатаОкончания) <> Тип("Дата")
			ИЛИ ТипыОпераций = Неопределено
			ИЛИ ТипЗнч(ТипыОпераций) <> Тип("Массив")
			ИЛИ ТипыОпераций.Количество() = 0
			ИЛИ Порция <= 0
			ИЛИ ДатаНачала > ДатаОкончания Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если УсловиеRecNoВаучеры = "" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ЗагрузитьГруппу", 		ЗагрузитьГруппу);
	СтруктураНастройки.Вставить("ДатаНачала", 			ДатаНачала);
	СтруктураНастройки.Вставить("ДатаОкончания", 		ДатаОкончания);
	СтруктураНастройки.Вставить("ТипыОпераций", 		ТипыОпераций);
	СтруктураНастройки.Вставить("Порция", 				Порция);
	СтруктураНастройки.Вставить("УсловиеRecNoВаучеры", 	УсловиеRecNoВаучеры);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-26 (#4205)
	СтруктураНастройки.Вставить("МассивПропущенныхVoucher", 		Новый Массив);
	СтруктураНастройки.Вставить("МассивПовторноЗагруженныхVoucher", Новый Массив);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-26 (#4205)
	
	// Подключение к базе
	Если Не ПодключениеКБазе() Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = "Старт загрузки: " + ВремяНачалаЗагрузки;
	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Загрузка", УровеньЖурналаРегистрации.Информация,,,Сообщение);
	
	ТаблицаСтатДанных = Новый ТаблицаЗначений;
	ТаблицаСтатДанных.Колонки.Добавить("ЗагруженоДок");
	
	//Загрузка данных
	ТаблицаОшибок 				= Новый ТаблицаЗначений;
	ТаблицаОшибокБезИсключений 	= Новый ТаблицаЗначений;
	
	Если ЗагрузитьГруппу Тогда
		
		// Загрузка порциями
		ДанныеЕщеЕсть = Истина;
		ФлагиПостедОбновлены = Истина;
		Пока ДанныеЕщеЕсть Цикл 
			
			//Получение данных, сопоставление аналитики
			Данные = ПолучениеДанных(СтруктураНастройки);
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#4205)
			//ДанныеЕщеЕсть = Данные.Количество() > 0 И ФлагиПостедОбновлены;
			ДанныеЕщеЕсть = Данные.Количество() > 0;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#4205)
			Если ДанныеЕщеЕсть Тогда
				
				//Формирование данных в системе
				КоличествоЗагруженных = КоличествоЗагруженных + Данные.Количество();
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#4205)
				//ФлагиПостедОбновлены = ФормированиеДанных(Данные, ТаблицаСтатДанных, ЗагрузитьГруппу);
				ФлагиПостедОбновлены = ФормированиеДанных(Данные, ТаблицаСтатДанных, ЗагрузитьГруппу, СтруктураНастройки);
				
				Если НЕ ФлагиПостедОбновлены 
					И ТипЗнч(СтруктураНастройки) = Тип("Структура")
					И СтруктураНастройки.Свойство("МассивПропущенныхVoucher") Тогда
					
					ТабВаучеров = Данные.Скопировать(,"Voucher");
					ТабВаучеров.Свернуть("Voucher");
					
					Для каждого Voucher Из ТабВаучеров Цикл
					
						Если СтруктураНастройки.МассивПропущенныхVoucher.Найти(Voucher.Voucher) = Неопределено Тогда
							СтруктураНастройки.МассивПропущенныхVoucher.Добавить(Voucher.Voucher);
							КоличествоЗагруженных = КоличествоЗагруженных - 1;
						КонецЕсли; 
					
					КонецЦикла; 
				
				КонецЕсли; 
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#4205)
				
			КонецЕсли;

		КонецЦикла;
		
		ДатаОкончанияЗагрузки = ТекущаяДата();
		ВремяОкончанияЗагрузки = Формат(ДатаОкончанияЗагрузки, "ДФ=dd.MM.yyyy hh:mm:ss");
		
		Попытка
			
			КоличествоДокЗагруженных = ТаблицаСтатДанных.Итог("ЗагруженоДок");
    		СформироватьИПередатьОтчет(ТаблицаОшибок, СтруктураНастройки, ДатаНачалаЗагрузки, ДатаОкончанияЗагрузки);
			
		Исключение
			
			Сообщение = "Неудачный запуск отправки отчета о работе обработки загрузки из аксапты 12 (Ок)" + Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Загрузка", УровеньЖурналаРегистрации.Ошибка,,,Сообщение);
			
		КонецПопытки;
		
	Иначе
		
		//Получение данных, сопоставление аналитики
		Данные = ПолучениеДанных(СтруктураНастройки);
		
		#Если Клиент Тогда
			Если НЕ ЗагрузитьГруппу Тогда

				Для каждого Стр из Данные Цикл
					
					Если Стр.DocDate < Граница Тогда
						
						Сообщение = "Документ RecNo=" + Стр.RecNo + ", Ваучер=" + Стр.Voucher + ", находится в закрытом периоде. Обработка остановлена.";
						Предупреждение(Сообщение);
						ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Загрузка", УровеньЖурналаРегистрации.Ошибка,,,Сообщение);
						
						Возврат;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		#КонецЕсли 
		
		//Формирование данных в системе
		ФормированиеДанных(Данные, ТаблицаСтатДанных, ЗагрузитьГруппу);
		
		ДатаОкончанияЗагрузки = ТекущаяДата();
		ВремяОкончанияЗагрузки = Формат(ДатаОкончанияЗагрузки, "ДФ=dd.MM.yyyy hh:mm:ss");
		
	КонецЕсли;
	
	Сообщение = "Загружено документов - " + ТаблицаСтатДанных.Итог("ЗагруженоДок");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Загрузка", УровеньЖурналаРегистрации.Информация,,,Сообщение);
	
	Сообщение = "Окончание загрузки: " + ВремяОкончанияЗагрузки;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Загрузка", УровеньЖурналаРегистрации.Информация,,,Сообщение);
		
КонецПроцедуры

Функция ПодключениеКБазе() Экспорт
	
	//Проверка настроеки рабочей базы или копии, если указаны параметры подключения от рабочей базы, копия не должна с ними запуститься
	Если ВРег(СтрокаСоединенияИнформационнойБазы()) <> ВРег(РБСтрокаСоединения) Тогда 
		Если ВРег(Адрес) = ВРег(РБАдресСервера) Тогда
			Сообщение	= "Указаны параметры подключения к рабочей базе из копии. 
						|	Параметры рабочей базы: " + РБСтрокаСоединения + " подключается к : " + РБАдресСервера + "
						|	Параметры текущей базы: " + СтрокаСоединенияИнформационнойБазы() + " подключается к : " + Адрес + "
						|Подключение отменено.";
			ВыводСтатусаСообщения(,Сообщение);
			ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ПодключениеКБазе", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
			
			ПодключеноКБазе = Ложь;
			Возврат ПодключеноКБазе;
		
		КонецЕсли;
	КонецЕсли;
	
	// соединение с базой
	СоединениеАДО = СоздатьСоединениеАДО(); 
	Если СоединениеАДО = Неопределено Тогда 
		
		Сообщение = "Не удалось СоздатьСоединениеАДО";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ПодключениеКБазе", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		
		ПодключеноКБазе = Ложь;
		Возврат ПодключеноКБазе;
		
	КонецЕсли;
   
	ЗапросАДО = СоздатьЗапросАДО(); 
	Если ЗапросАДО = Неопределено Тогда 
		
		Сообщение = "Не удалось СоздатьЗапросАДО";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ПодключениеКБазе", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		
		ПодключеноКБазе = Ложь;
		Возврат ПодключеноКБазе;
		
	КонецЕсли; 
	
	Если Не ПодключитьсяАДОкБД(СоединениеАДО, ЗапросАДО) Тогда 
		
		Сообщение = "Не удалось ПодключитьсяАДОкБД";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ПодключениеКБазе", УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		
		ПодключеноКБазе = Ложь;
		Возврат ПодключеноКБазе;
		
	КонецЕсли; 
	
	ПодключеноКБазе = Истина;
	
	Возврат ПодключеноКБазе;
	
КонецФункции

///////////////////////
Функция ПолучениеДанных(СтруктураНастройки)
	
	// получение оборотов
	ОборотыАксапты = ПолучениеОборотов(СтруктураНастройки);
	
	// выборка аналитики
	ОборотыАксапты = ПроставитьТипыАналитики(ОборотыАксапты);
	
	// сопоставление аналитики
	СопоставленнаяАналитика = СопоставлениеАналитики(ОборотыАксапты);
	
	// проставление сопоставления
    Данные = ЗаполнитьСопоставленнуюАналитику(ОборотыАксапты, СопоставленнаяАналитика);
	
	Возврат Данные;
	
КонецФункции

Функция ПолучениеОборотов(СтруктураНастройки)
	
	//Условия запроса
	Если СтруктураНастройки.ЗагрузитьГруппу Тогда
		
		// количество проводок
		Число = СтруктураНастройки.Порция;
		ЧислоПроводок = "TOP (" + Формат(Число, "ЧГ=0") + ")";
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-10-11 (#4366)
		// Сортировка выбранного списка ваучеров по RecNo
		СортировкаПоRecNo = "ORDER BY ExportDataTo1cDocHeader.RecNo";
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-10-11 (#4366)
		
		// блок условий по типам операций
		ТипыОпераций = СтруктураНастройки.ТипыОпераций;
		Если ТипыОпераций.Количество() = 1 Тогда
			УсловияПоТипуДокумента = "DocType = " + ТипыОпераций[0].Код;
		Иначе
			УсловияПоТипуДокумента = "";
			Для каждого ТипОп из ТипыОпераций Цикл
				Если НЕ УсловияПоТипуДокумента = "" Тогда
					УсловияПоТипуДокумента = УсловияПоТипуДокумента + " or ";
				КонецЕсли;
				УсловияПоТипуДокумента = УсловияПоТипуДокумента + "DocType = " + ТипОп.Код;
			КонецЦикла;
			УсловияПоТипуДокумента = "(" + УсловияПоТипуДокумента + ")";
		КонецЕсли;
		
		// условие по периоду
		ДатаНачала 			=  Формат(СтруктураНастройки.ДатаНачала, "ДФ=""ггггММдд""");
		ДатаОкончания 		= Формат(СтруктураНастройки.ДатаОкончания, "ДФ=ггггММдд");
		УсловиеПоПериоду 	= "((DocDate>='" + ДатаНачала + "') and (DocDate<='" + ДатаОкончания + "'))";
		УсловиеPosted 		= "(Posted1C8 = 0)";
		
		ВсеУсловия = УсловияПоТипуДокумента + " and " + УсловиеПоПериоду + " and " + УсловиеPosted;
		
	Иначе
		
		ЧислоПроводок = "";
		ВсеУсловия = СтруктураНастройки.УсловиеRecNoВаучеры;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-10-11 (#4366)
		// Сортировка выбранного списка ваучеров по RecNo не требуется
		СортировкаПоRecNo = "";
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-10-11 (#4366)
		
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#4205)
	Если ТипЗнч(СтруктураНастройки) = Тип("Структура")
		И СтруктураНастройки.Свойство("МассивПропущенныхVoucher")
		И СтруктураНастройки.МассивПропущенныхVoucher.Количество() > 0 Тогда
		
		УсловияПоVoucher = "";
		Для каждого Voucher из СтруктураНастройки.МассивПропущенныхVoucher Цикл
			Если НЕ УсловияПоVoucher = "" Тогда
				УсловияПоVoucher = УсловияПоVoucher + ", ";
			КонецЕсли;
			УсловияПоVoucher = УсловияПоVoucher + "'" + Voucher + "'";
		КонецЦикла;
		
		УсловияПоVoucher = "Voucher NOT in (" + УсловияПоVoucher + ")";
		
		ВсеУсловия = ВсеУсловия + " and " + УсловияПоVoucher;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#4205)
	
	КоличествоСубконтоАксапта = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта 12", "Количество субконто Аксапта", 6);
	ТекстЗапроса_СубконтоДт = "";
	ТекстЗапроса_СубконтоКт = "";
	Для Инд = 1 По КоличествоСубконтоАксапта Цикл
	
		ТекстЗапроса_СубконтоДт = ТекстЗапроса_СубконтоДт + Символы.ПС + "ExportDataTo1CDocTrans.DimD" + Инд + ",";
		ТекстЗапроса_СубконтоКт = ТекстЗапроса_СубконтоКт + Символы.ПС + "ExportDataTo1CDocTrans.DimC" + Инд + ",";
	
	КонецЦикла; 
	
	Попытка
		
		//Формирование запроса
		ЗапросАДО.CommandText = " use " + БазаДанных + "; 
		|SELECT
		|ExportDataTo1cDocHeader.RecNo,
		|ExportDataTo1cDocHeader.Voucher,
		|ExportDataTo1cDocHeader.ReferVoucherId,
		|ExportDataTo1cDocHeader.ReferenceVoucher,
		|ExportDataTo1cDocHeader.PurchVoucher,
		|ExportDataTo1cDocHeader.ISSTORNO,
		|ExportDataTo1cDocHeader.DocDate,
		|ExportDataTo1cDocHeader.DocType, 
		|ExportDataTo1cDocHeader.Type,
		|ExportDataTo1cDocHeader.Comment_ AS Comment,
		|ExportDataTo1cDocHeader.DocumentNum,
		|ExportDataTo1cDocHeader.DocumentDate,
		|ExportDataTo1cDocHeader.Posted1C8,
		|ExportDataTo1cDocHeader.E1COrderId,
		|ExportDataTo1cDocHeader.OrderID,
		|ExportDataTo1cDocHeader.ReceiptDateFact,
		|ExportDataTo1cDocHeader.PaymReference,
		//|ExportDataTo1cDocHeader.BudgetIntID,
		|ExportDataTo1CDocTrans.RefRecNo,
		|ExportDataTo1CDocTrans.Voucher AS VoucherTrans,
		|ExportDataTo1CDocTrans.AccD," 
		+ ТекстЗапроса_СубконтоДт 
		+ "
		|ExportDataTo1CDocTrans.TypeD,
		|ExportDataTo1CDocTrans.AccC," 
		+ ТекстЗапроса_СубконтоКт 
		+ "
		|ExportDataTo1CDocTrans.TypeC,
		|ExportDataTo1CDocTrans.Amount, 
		|ExportDataTo1CDocTrans.AmountCur,
		|ExportDataTo1CDocTrans.CurrencyCode,
		|ExportDataTo1CDocTrans.Corr,
		|ExportDataTo1CDocTrans.Txt
		|FROM
		|	(SELECT
		|		" + ЧислоПроводок + "
		|		ExportDataTo1cDocHeader.RecNo
		|		FROM         ExportDataTo1cDocHeader
		|		where " + ВсеУсловия + "
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-10-11 (#4366)
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-09 (#4240)
		//|	ORDER BY ExportDataTo1cDocHeader.RecNo
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-09 (#4240)
		|	" + СортировкаПоRecNo + "
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-10-11 (#4366)
		|	) as Headers
		|	LEFT OUTER JOIN ExportDataTo1cDocHeader
		|		ON Headers.RecNo = ExportDataTo1cDocHeader.RecNo
		|	LEFT OUTER JOIN ExportDataTo1CDocTrans
		|		ON ExportDataTo1cDocHeader.RecNo = ExportDataTo1CDocTrans.RefRecNo
		|
		|ORDER BY ExportDataTo1cDocHeader.RecNo";
		
		//Выполнение запроса
		Сообщение	= "Начало загрузки документов: 	" + ТекущаяДата();
		Статус		= "Запрос к экспортным таблицам SQL";
		ВыводСтатусаСообщения(Статус, );
		
		Выборка = ЗапросАДО.Execute(); 
		
	Исключение
		
		Сообщение = "В таблицах не найдены валютные поля, запрос будет переформирован без их учета!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Загрузка", УровеньЖурналаРегистрации.Информация,,,Сообщение);

		//Формирование запроса
		ЗапросАДО.CommandText = " use " + БазаДанных + "; 
		|SELECT
		|ExportDataTo1cDocHeader.RecNo,
		|ExportDataTo1cDocHeader.Voucher,
		|ExportDataTo1cDocHeader.ReferVoucherId,
		|ExportDataTo1cDocHeader.ReferenceVoucher,
		|ExportDataTo1cDocHeader.PurchVoucher,
		|ExportDataTo1cDocHeader.ISSTORNO,
		|ExportDataTo1cDocHeader.DocDate,
		|ExportDataTo1cDocHeader.DocType, 
		|ExportDataTo1cDocHeader.Type,
		|ExportDataTo1cDocHeader.Comment_ AS Comment,
		|ExportDataTo1cDocHeader.DocumentNum,
		|ExportDataTo1cDocHeader.DocumentDate,
		|ExportDataTo1cDocHeader.Posted1C8,
		|ExportDataTo1cDocHeader.E1COrderId,
		|ExportDataTo1cDocHeader.OrderID,
		|ExportDataTo1cDocHeader.ReceiptDateFact,
		|ExportDataTo1cDocHeader.PaymReference,
		//|ExportDataTo1cDocHeader.BudgetIntID,
		|ExportDataTo1CDocTrans.RefRecNo,
		|ExportDataTo1CDocTrans.Voucher AS VoucherTrans,
		|ExportDataTo1CDocTrans.AccD," 
		+ ТекстЗапроса_СубконтоДт
		+ "
		|ExportDataTo1CDocTrans.TypeD,
		|ExportDataTo1CDocTrans.AccC," 
		+ ТекстЗапроса_СубконтоКт
		+ "
		|ExportDataTo1CDocTrans.TypeC,
		|ExportDataTo1CDocTrans.Amount,
		|ExportDataTo1CDocTrans.Corr,
		|ExportDataTo1CDocTrans.Txt
		|FROM
		|	(SELECT
		|		" + ЧислоПроводок + "
		|		ExportDataTo1cDocHeader.RecNo
		|		FROM         ExportDataTo1cDocHeader
		|		where " + ВсеУсловия + "
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-10-11 (#4366)
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-09 (#4240)
		//|	ORDER BY ExportDataTo1cDocHeader.RecNo
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-09 (#4240)
		|	" + СортировкаПоRecNo + "
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-10-11 (#4366)
		|	) as Headers
		|	LEFT OUTER JOIN ExportDataTo1cDocHeader
		|		ON Headers.RecNo = ExportDataTo1cDocHeader.RecNo
		|	LEFT OUTER JOIN ExportDataTo1CDocTrans
		|		ON ExportDataTo1cDocHeader.RecNo = ExportDataTo1CDocTrans.RefRecNo
		|
		|ORDER BY ExportDataTo1cDocHeader.RecNo";
		
		//Выполнение запроса
		Сообщение	= "Начало загрузки документов: 	" + ТекущаяДата();
		Статус		= "Запрос к экспортным таблицам SQL";
		ВыводСтатусаСообщения(Статус, );
		
		Выборка = ЗапросАДО.Execute(); 
		
	КонецПопытки;
	
    ОповеститьПользователя("Сопоставление аналитики");
	
	//Формирование таблицы для хранения и обработки результата данных
	ТабОбороты = СформироватьТаблицуОборотов();
	
	Пока Не Выборка.EOF() Цикл 
		
		НовСтр = ТабОбороты.Добавить();
		Для каждого Колонка из ТабОбороты.Колонки Цикл
			
			Попытка
				Имя = Колонка.Имя;
				НовСтр[Имя] = Выборка.Fields(Имя).Value;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		Выборка.MoveNext(); 
		
	КонецЦикла;	
	
	// Возврат Данные;
	Возврат ТабОбороты;
	
КонецФункции

Функция ПроставитьТипыАналитики(ОборотыАксапты)
	
	КоличествоСубконтоАксапта = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта 12", "Количество субконто Аксапта", 6);
	ТекстЗапроса_СубконтоДт 		= "";
	ТекстЗапроса_СубконтоКт 		= "";
	ТекстЗапроса_СубконтоДтТип1С 	= "";
	ТекстЗапроса_СубконтоКтТип1С 	= "";
	
	Для Инд = 1 По КоличествоСубконтоАксапта Цикл
	
		ТекстЗапроса_СубконтоДт = ТекстЗапроса_СубконтоДт + "
			|	ТабОА.DimD&N,";
		ТекстЗапроса_СубконтоКт = ТекстЗапроса_СубконтоКт + "
			|	ТабОА.DimC&N,";
		ТекстЗапроса_СубконтоДтТип1С = ТекстЗапроса_СубконтоДтТип1С + "
			|	ТабОА.DimD&N КАК DimD&N,
			|	ВЫБОР
			|		КОГДА бит_ок_АналитикаСчетовАксапта12ДТ.ТипСубконто&N ЕСТЬ NULL
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
			|		ИНАЧЕ бит_ок_АналитикаСчетовАксапта12ДТ.ТипСубконто&N
			|	КОНЕЦ КАК СубконтоДт&NТип1С,";
		ТекстЗапроса_СубконтоКтТип1С = ТекстЗапроса_СубконтоКтТип1С + "
			|	ТабОА.DimC&N КАК DimC&N,
			|	ВЫБОР
			|		КОГДА бит_ок_АналитикаСчетовАксапта12КТ.ТипСубконто&N ЕСТЬ NULL
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)
			|		ИНАЧЕ бит_ок_АналитикаСчетовАксапта12КТ.ТипСубконто&N
			|	КОНЕЦ КАК СубконтоКт&NТип1С,";
		
		ТекстЗапроса_СубконтоДт			= СтрЗаменить(ТекстЗапроса_СубконтоДт, 		"&N", Строка(Инд));
		ТекстЗапроса_СубконтоКт			= СтрЗаменить(ТекстЗапроса_СубконтоКт, 		"&N", Строка(Инд));
		ТекстЗапроса_СубконтоДтТип1С	= СтрЗаменить(ТекстЗапроса_СубконтоДтТип1С, "&N", Строка(Инд));
		ТекстЗапроса_СубконтоКтТип1С	= СтрЗаменить(ТекстЗапроса_СубконтоКтТип1С, "&N", Строка(Инд));
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабОА", ОборотыАксапты);

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабОА.RecNo КАК RecNo,
		|	ТабОА.Voucher КАК Voucher,
		|	ТабОА.ReferVoucherId КАК ReferVoucherId,
		|	ТабОА.ReferenceVoucher КАК ReferenceVoucher,
		|	ТабОА.PurchVoucher КАК PurchVoucher,
		|	ТабОА.ISSTORNO КАК ISSTORNO,
		|	ТабОА.DocDate КАК DocDate,
		|	ТабОА.DocType КАК DocType,
		|	ТабОА.Type КАК Type,
		|	ТабОА.Comment КАК Comment,
		|	ТабОА.DocumentNum КАК DocumentNum,
		|	ТабОА.DocumentDate КАК DocumentDate,
		|	ТабОА.E1COrderId КАК E1COrderId,
		|	ТабОА.OrderID КАК OrderID,
		|	ТабОА.ReceiptDateFact КАК ReceiptDateFact,
		|	ТабОА.PaymReference КАК PaymReference,
		|	ТабОА.Posted1С8 КАК Posted1С8,
		|	ТабОА.RefRecNo КАК RefRecNo,
		|	ТабОА.Amount КАК Amount,
		|	ТабОА.AccD КАК AccD,
		|	ТабОА.AccC КАК AccC, " 
		+ ТекстЗапроса_СубконтоДт 
		+ ТекстЗапроса_СубконтоКт 
		+ "
		//|	ТабОА.BudgetIntID КАК BudgetIntID,
		|	ТабОА.AmountCur КАК AmountCur,
		|	ТабОА.CurrencyCode КАК CurrencyCode,
		|	ТабОА.Txt КАК Txt
		|ПОМЕСТИТЬ ТабОА
		|ИЗ
		|	&ТабОА КАК ТабОА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабОА.RecNo КАК RecNo,
		|	ТабОА.Voucher КАК Voucher,
		|	ТабОА.ReferVoucherId КАК ReferVoucherId,
		|	ТабОА.ReferenceVoucher КАК ReferenceVoucher,
		|	ТабОА.PurchVoucher КАК PurchVoucher,
		|	ТабОА.ISSTORNO КАК ISSTORNO,
		|	ТабОА.DocDate КАК DocDate,
		|	ТабОА.DocType КАК DocType,
		|	ТабОА.Type КАК Type,
		|	ТабОА.Comment КАК Comment,
		|	ТабОА.DocumentNum КАК DocumentNum,
		|	ТабОА.DocumentDate КАК DocumentDate,
		|	ТабОА.E1COrderId КАК E1COrderId,
		|	ТабОА.OrderID КАК OrderID,
		|	ТабОА.ReceiptDateFact КАК ReceiptDateFact,
		|	ТабОА.PaymReference КАК PaymReference,
		|	ТабОА.Posted1С8 КАК Posted1С8,
		|	ТабОА.RefRecNo КАК RefRecNo,
		|	ТабОА.Amount КАК Amount,
		|	ТабОА.AccD КАК AccD,
		|	ТабОА.AccC КАК AccC, "
		+ ТекстЗапроса_СубконтоДтТип1С
		+ ТекстЗапроса_СубконтоКтТип1С
		+ "
		|	ТабОА.AmountCur КАК AmountCur,
		|	ТабОА.CurrencyCode КАК CurrencyCode,
		|	ТабОА.Txt КАК Txt,
		|	бит_ок_ТипыОперацийАксапты.Ссылка КАК ТипОперации1С
		|ИЗ
		|	ТабОА КАК ТабОА
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_АналитикаСчетовАксапта12 КАК бит_ок_АналитикаСчетовАксапта12ДТ
		|		ПО НЕ ТабОА.AccD В (&ТранзитныеСчета)
		|			И ТабОА.DocType = бит_ок_АналитикаСчетовАксапта12ДТ.ТипДокумента.Код
		|			И (ПОДСТРОКА(ТабОА.AccD, 1, 2) = бит_ок_АналитикаСчетовАксапта12ДТ.СчетАксапты)
		|			И (бит_ок_АналитикаСчетовАксапта12ДТ.Организация = &Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_АналитикаСчетовАксапта12 КАК бит_ок_АналитикаСчетовАксапта12КТ
		|		ПО НЕ ТабОА.AccC В (&ТранзитныеСчета)
		|			И ТабОА.DocType = бит_ок_АналитикаСчетовАксапта12КТ.ТипДокумента.Код
		|			И (ПОДСТРОКА(ТабОА.AccC, 1, 2) = бит_ок_АналитикаСчетовАксапта12КТ.СчетАксапты)
		|			И (бит_ок_АналитикаСчетовАксапта12КТ.Организация = &Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
		|		ПО ТабОА.DocType = бит_ок_ТипыОперацийАксапты.Код";	
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТранзитныеСчета", ПолуитьМассивТранзитныхСчетов());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СопоставлениеАналитики(ОборотыАксапты)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабОА", ОборотыАксапты);
	
	КоличествоСубконтоАксапта = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта 12", "Количество субконто Аксапта", 6);
	ТекстЗапроса_СубконтоДт 		= "";
	ТекстЗапроса_СубконтоКт 		= "";
	ТекстЗапроса_СубконтоДтТип1С 	= "";
	ТекстЗапроса_СубконтоКтТип1С 	= "";
	ТекстЗапроса_ТранспонированиеДт	= "";
	ТекстЗапроса_ТранспонированиеКт	= "";
	
	Для Инд = 1 По КоличествоСубконтоАксапта Цикл
	
		ТекстЗапроса_СубконтоДт = ТекстЗапроса_СубконтоДт + "
			|	ТабОА.DimDN,";
		ТекстЗапроса_СубконтоКт = ТекстЗапроса_СубконтоКт + "
			|	ТабОА.DimCN,";
		ТекстЗапроса_СубконтоДтТип1С = ТекстЗапроса_СубконтоДтТип1С + "
			|	СубконтоДтNТип1С,";
		ТекстЗапроса_СубконтоКтТип1С = ТекстЗапроса_СубконтоКтТип1С + "
			|	СубконтоКтNТип1С,";
		
		Если Инд = 1 Тогда
			ТекстЗапроса_ТранспонированиеДт = "
				|ВЫБРАТЬ
				|	ТабОА.AccD КАК Acc,
				|	ТабОА.DimD1 КАК Dim
				|ПОМЕСТИТЬ АналитикаАксапты
				|ИЗ
				|	ТабОА КАК ТабОА
				|ГДЕ
				|	ТабОА.СубконтоДт1Тип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)";
		Иначе
			ТекстЗапроса_ТранспонированиеДт = ТекстЗапроса_ТранспонированиеДт + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТабОА.AccD КАК Acc,
				|	ТабОА.DimDN КАК Dim
				|ИЗ
				|	ТабОА КАК ТабОА
				|ГДЕ
				|	ТабОА.СубконтоДтNТип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)";
		КонецЕсли; 
		
		ТекстЗапроса_ТранспонированиеКт = ТекстЗапроса_ТранспонированиеКт + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТабОА.AccC,
			|	ТабОА.DimCN
			|ИЗ
			|	ТабОА КАК ТабОА
			|ГДЕ
			|	ТабОА.СубконтоКтNТип1С <> ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка)";
		
		
		ТекстЗапроса_СубконтоДт			= СтрЗаменить(ТекстЗапроса_СубконтоДт, 			"N", Строка(Инд));
		ТекстЗапроса_СубконтоКт			= СтрЗаменить(ТекстЗапроса_СубконтоКт, 			"N", Строка(Инд));
		ТекстЗапроса_СубконтоДтТип1С	= СтрЗаменить(ТекстЗапроса_СубконтоДтТип1С, 	"N", Строка(Инд));
		ТекстЗапроса_СубконтоКтТип1С	= СтрЗаменить(ТекстЗапроса_СубконтоКтТип1С, 	"N", Строка(Инд));
		ТекстЗапроса_ТранспонированиеДт	= СтрЗаменить(ТекстЗапроса_ТранспонированиеДт,	"N", Строка(Инд));
		ТекстЗапроса_ТранспонированиеКт	= СтрЗаменить(ТекстЗапроса_ТранспонированиеКт,	"N", Строка(Инд));
		
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабОА.DocType КАК DocType,
		|	ТабОА.AccD КАК AccD,
		|	ТабОА.AccC КАК AccC, "
		+ ТекстЗапроса_СубконтоДт
		+ ТекстЗапроса_СубконтоКт
		+ ТекстЗапроса_СубконтоДтТип1С
		+ ТекстЗапроса_СубконтоКтТип1С
		+ "
		|	Истина
		|ПОМЕСТИТЬ ТабОА
		|ИЗ
		|	&ТабОА КАК ТабОА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////" 
		+ ТекстЗапроса_ТранспонированиеДт
		+ ТекстЗапроса_ТранспонированиеКт
		+ "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АналитикаАксапты.Acc КАК Acc,
		|	АналитикаАксапты.Dim КАК Dim,
		|	ПОДСТРОКА(АналитикаАксапты.Acc, 1, 2) КАК СчетВерхнегоУровня
		|ПОМЕСТИТЬ АналитикаАксаптыСгруппированная
		|ИЗ
		|	АналитикаАксапты КАК АналитикаАксапты
		|
		|СГРУППИРОВАТЬ ПО
		|	АналитикаАксапты.Acc,
		|	АналитикаАксапты.Dim,
		|	ПОДСТРОКА(АналитикаАксапты.Acc, 1, 2)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АналитикаАксаптыСгруппированная.Acc КАК Acc,
		|	АналитикаАксаптыСгруппированная.Dim КАК Dim,
		|	бит_ок_СопоставлениеАналитикиАксапты12.Аналитика1С КАК Аналитика1С,
		|	бит_ок_СопоставлениеАналитикиАксапты12.Тип1С КАК Тип1С,
		|	ВЫБОР
		|		КОГДА бит_ок_СопоставлениеАналитикиАксапты12.Аналитика1С ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеСопоставлено
		|ИЗ
		|	АналитикаАксаптыСгруппированная КАК АналитикаАксаптыСгруппированная
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитикиАксапты12 КАК бит_ок_СопоставлениеАналитикиАксапты12
		|		ПО АналитикаАксаптыСгруппированная.Dim <> """"
		|			И бит_ок_СопоставлениеАналитикиАксапты12.КодАналитикиАксапты <> """" 
		|			И АналитикаАксаптыСгруппированная.Dim = бит_ок_СопоставлениеАналитикиАксапты12.КодАналитикиАксапты
		|			И АналитикаАксаптыСгруппированная.СчетВерхнегоУровня = бит_ок_СопоставлениеАналитикиАксапты12.СчетАксапты
		|			И (бит_ок_СопоставлениеАналитикиАксапты12.Организация = &Организация)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаполнитьСопоставленнуюАналитику(ОборотыАксапты, СопоставленнаяАналитика)
	
	КоличествоСубконтоАксапта = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта 12", "Количество субконто Аксапта", 6);
	ТекстЗапроса_СубконтоДт_Dim 		= "";
	ТекстЗапроса_СубконтоКт_Dim 		= "";
	ТекстЗапроса_СубконтоДт 			= "";
	ТекстЗапроса_СубконтоКт 			= "";
	ТекстЗапроса_СубконтоДтТип1С 		= "";
	ТекстЗапроса_СубконтоКтТип1С 		= "";
	ТекстЗапроса_АналитикаДт			= "";
	ТекстЗапроса_АналитикаКт			= "";
	ТекстЗапроса_АналитикаДт_Соединение	= "";
	ТекстЗапроса_АналитикаКт_Соединение	= "";
	
	Для Инд = 1 По КоличествоСубконтоАксапта Цикл
		
		ТекстЗапроса_СубконтоДт_Dim = ТекстЗапроса_СубконтоДт_Dim + "
			|	ТабОА.DimDN КАК DimDN,";
		ТекстЗапроса_СубконтоКт_Dim = ТекстЗапроса_СубконтоКт_Dim + "
			|	ТабОА.DimCN КАК DimCN,";
		ТекстЗапроса_СубконтоДт = ТекстЗапроса_СубконтоДт + "
			|	ТабОА.DimDN КАК СубконтоАксаптаДтN,";
		ТекстЗапроса_СубконтоКт = ТекстЗапроса_СубконтоКт + "
			|	ТабОА.DimCN КАК СубконтоАксаптаКтN,";
		ТекстЗапроса_СубконтоДтТип1С = ТекстЗапроса_СубконтоДтТип1С + "
			|	СубконтоДтNТип1С,";
		ТекстЗапроса_СубконтоКтТип1С = ТекстЗапроса_СубконтоКтТип1С + "
			|	СубконтоКтNТип1С,";
		ТекстЗапроса_АналитикаДт = ТекстЗапроса_АналитикаДт + "
		    |	АналитикаДтN.Аналитика1С КАК Субконто1СДтN,";
		ТекстЗапроса_АналитикаДт = ТекстЗапроса_АналитикаДт + "
		    |	АналитикаКтN.Аналитика1С КАК Субконто1СКтN,";
		ТекстЗапроса_АналитикаДт_Соединение = ТекстЗапроса_АналитикаДт_Соединение + "
			|			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаДтN
			|			ПО ТабОА.AccD = АналитикаДтN.Acc
			|				И ТабОА.DimDN = АналитикаДтN.Dim";
		ТекстЗапроса_АналитикаКт_Соединение = ТекстЗапроса_АналитикаКт_Соединение + "
			|			ЛЕВОЕ СОЕДИНЕНИЕ Аналитика КАК АналитикаКтN
			|			ПО ТабОА.AccC = АналитикаКтN.Acc
			|				И ТабОА.DimCN = АналитикаКтN.Dim";
		
		ТекстЗапроса_СубконтоДт_Dim			= СтрЗаменить(ТекстЗапроса_СубконтоДт_Dim, 			"N", Строка(Инд));
		ТекстЗапроса_СубконтоКт_Dim			= СтрЗаменить(ТекстЗапроса_СубконтоКт_Dim, 			"N", Строка(Инд));
		ТекстЗапроса_СубконтоДт				= СтрЗаменить(ТекстЗапроса_СубконтоДт, 				"N", Строка(Инд));
		ТекстЗапроса_СубконтоКт				= СтрЗаменить(ТекстЗапроса_СубконтоКт, 				"N", Строка(Инд));
		ТекстЗапроса_СубконтоДтТип1С		= СтрЗаменить(ТекстЗапроса_СубконтоДтТип1С, 		"N", Строка(Инд));
		ТекстЗапроса_СубконтоКтТип1С		= СтрЗаменить(ТекстЗапроса_СубконтоКтТип1С, 		"N", Строка(Инд));
		ТекстЗапроса_АналитикаДт			= СтрЗаменить(ТекстЗапроса_АналитикаДт, 			"N", Строка(Инд));
		ТекстЗапроса_АналитикаКт			= СтрЗаменить(ТекстЗапроса_АналитикаКт, 			"N", Строка(Инд));
		ТекстЗапроса_АналитикаДт_Соединение	= СтрЗаменить(ТекстЗапроса_АналитикаДт_Соединение, 	"N", Строка(Инд));
		ТекстЗапроса_АналитикаКт_Соединение	= СтрЗаменить(ТекстЗапроса_АналитикаКт_Соединение, 	"N", Строка(Инд));
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабОА", ОборотыАксапты);
	Запрос.УстановитьПараметр("Аналитика", СопоставленнаяАналитика);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка КАК Ссылка,
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.НомерСтроки КАК НомерСтроки,
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.ИД КАК ИД,
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки КАК ИмяКолонки,
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.Значение КАК Значение,
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяТаблицы КАК ИмяТаблицы
		|ПОМЕСТИТЬ СчетаАХ
		|ИЗ
		|	Справочник.бит_ПравилаТрансляции.ЗначенияРеквизитов КАК бит_ПравилаТрансляцииЗначенияРеквизитов
		|ГДЕ
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка В ИЕРАРХИИ(&СсылкаНаПравило)
		|	И (бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки = ""бит_ок_ОборотыАксапты_СчетДт""
		|			ИЛИ бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки = ""бит_ок_ОборотыАксапты_СчетКт"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка КАК Ссылка,
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.НомерСтроки КАК НомерСтроки,
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.ИД КАК ИД,
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки КАК ИмяКолонки,
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.Значение КАК Значение,
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяТаблицы КАК ИмяТаблицы
		|ПОМЕСТИТЬ Счета1С
		|ИЗ
		|	Справочник.бит_ПравилаТрансляции.ЗначенияРеквизитов КАК бит_ПравилаТрансляцииЗначенияРеквизитов
		|ГДЕ
		|	бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка В ИЕРАРХИИ(&СсылкаНаПравило)
		|	И бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки = ""Хозрасчетный_Счет""
		|	И бит_ПравилаТрансляцииЗначенияРеквизитов.Значение ССЫЛКА ПланСчетов.Хозрасчетный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетаАХ.Значение КАК СчетАХ,
		|	Счета1С.Значение КАК Счет1С
		|ПОМЕСТИТЬ ВТ_Счета
		|ИЗ
		|	СчетаАХ КАК СчетаАХ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Счета1С КАК Счета1С
		|		ПО СчетаАХ.ИД = Счета1С.ИД
		|ГДЕ
		|	Счета1С.Значение.Валютный = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабОА.RecNo КАК RecNo,
		|	ТабОА.Voucher КАК Voucher,
		|	ТабОА.ReferVoucherId КАК ReferVoucherId,
		|	ТабОА.ReferenceVoucher КАК ReferenceVoucher,
		|	ТабОА.PurchVoucher КАК PurchVoucher,
		|	ТабОА.ISSTORNO КАК ISSTORNO,
		|	ТабОА.DocDate КАК DocDate,
		|	ТабОА.DocType КАК DocType,
		|	ТабОА.Type КАК Type,
		|	ТабОА.Comment КАК Comment,
		|	ТабОА.DocumentNum КАК DocumentNum,
		|	ТабОА.DocumentDate КАК DocumentDate,
		|	ТабОА.E1COrderId КАК E1COrderId,
		|	ТабОА.OrderID КАК OrderID,
		|	ТабОА.ReceiptDateFact КАК ReceiptDateFact,
		|	ТабОА.PaymReference КАК PaymReference,
		|	ТабОА.Posted1С8 КАК Posted1С8,
		|	ТабОА.RefRecNo КАК RefRecNo,
		|	ТабОА.Amount КАК Amount,
		|	ТабОА.AccD КАК AccD,
		|	ТабОА.AccC КАК AccC, " 
		+ 	ТекстЗапроса_СубконтоДт_Dim
		+ 	ТекстЗапроса_СубконтоКт_Dim
		+ 	ТекстЗапроса_СубконтоДтТип1С
		+ 	ТекстЗапроса_СубконтоКтТип1С
		+ "
		//|	ТабОА.BudgetIntID КАК BudgetIntID
		|	ТабОА.AmountCur КАК AmountCur,
		|	ТабОА.CurrencyCode КАК CurrencyCode,
		|	ТабОА.Txt КАК Txt,
		|	ТабОА.ТипОперации1С КАК ТипОперации1С
		|ПОМЕСТИТЬ ТабОА
		|ИЗ
		|	&ТабОА КАК ТабОА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Аналитика.Acc КАК Acc,
		|	Аналитика.Dim КАК Dim,
		|	Аналитика.Аналитика1С КАК Аналитика1С,
		|	Аналитика.Тип1С КАК Тип1С
		|ПОМЕСТИТЬ Аналитика
		|ИЗ
		|	&Аналитика КАК Аналитика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТабОА.RecNo) КАК RecNo,
		|	ТабОА.Voucher КАК Voucher
		|ПОМЕСТИТЬ МаксRecNo
		|ИЗ
		|	ТабОА КАК ТабОА
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабОА.Voucher
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабОА.RecNo КАК RecNo,
		|	ТабОА.Voucher КАК Voucher,
		|	ТабОА.ReferVoucherId КАК ReferVoucherId,
		|	ТабОА.ReferenceVoucher КАК ReferenceVoucher,
		|	ТабОА.PurchVoucher КАК PurchVoucher,
		|	ТабОА.ISSTORNO КАК ISSTORNO,
		|	ТабОА.DocDate КАК DocDate,
		|	ТабОА.DocType КАК DocType,
		|	ТабОА.Type КАК Type,
		|	ТабОА.Comment КАК Comment,
		|	ТабОА.DocumentNum КАК DocumentNum,
		|	ТабОА.DocumentDate КАК DocumentDate,
		|	ТабОА.E1COrderId КАК E1COrderId,
		|	ТабОА.OrderID КАК OrderID,
		|	ТабОА.ReceiptDateFact КАК ReceiptDateFact,
		|	ТабОА.PaymReference КАК PaymReference,
		|	ТабОА.Posted1С8 КАК Posted1С8,
		|	ТабОА.RefRecNo КАК RefRecNo,
		|	ТабОА.Amount КАК Сумма,
		|	ТабОА.Txt КАК Txt,
		|	ТабОА.ТипОперации1С КАК ТипОперации1С,
		|	ТабОА.AccD КАК СчетДт,
		|	ТабОА.AccC КАК СчетКт, "
		+ 	ТекстЗапроса_СубконтоДт
		+ 	ТекстЗапроса_СубконтоКт
		+ 	ТекстЗапроса_СубконтоДтТип1С
		+ 	ТекстЗапроса_СубконтоКтТип1С
		+ 	ТекстЗапроса_АналитикаДт
		+ 	ТекстЗапроса_АналитикаКт
		+ "
		//|	ТабОА.BudgetIntID КАК BudgetIntID,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_Счета_Дт.Счет1С ЕСТЬ NULL
		|			ТОГДА ТабОА.AmountCur
		|	КОНЕЦ КАК ВалютнаяСуммаДт,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_Счета_Кт.Счет1С ЕСТЬ NULL
		|			ТОГДА ТабОА.AmountCur
		|	КОНЕЦ КАК ВалютнаяСуммаКт,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_Счета_Дт.Счет1С ЕСТЬ NULL
		|			ТОГДА ТабОА.CurrencyCode
		|	КОНЕЦ КАК ВалютаДт,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_Счета_Кт.Счет1С ЕСТЬ NULL
		|			ТОГДА ТабОА.CurrencyCode
		|	КОНЕЦ КАК ВалютаКт
		|ИЗ
		|	МаксRecNo КАК МаксRecNo
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабОА КАК ТабОА "
		+ 			ТекстЗапроса_АналитикаДт_Соединение
		+ 			ТекстЗапроса_АналитикаКт_Соединение
		+ "
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счета КАК ВТ_Счета_Дт
		|			ПО ТабОА.AccD = ВТ_Счета_Дт.СчетАХ
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Счета КАК ВТ_Счета_Кт
		|			ПО ТабОА.AccC = ВТ_Счета_Кт.СчетАХ
		|		ПО МаксRecNo.RecNo = ТабОА.RecNo
		|			И МаксRecNo.Voucher = ТабОА.Voucher
		|
		|УПОРЯДОЧИТЬ ПО
		|	RecNo";	
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"); 
	Запрос.УстановитьПараметр("СсылкаНаПравило", ?(Организация = Организация_Окей, Справочники.бит_ПравилаТрансляции.НайтиПоКоду("000000025"), Справочники.бит_ПравилаТрансляции.НайтиПоКоду("000000062")));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗагрузитьКонтрагентов()
	
	Сообщение 	= "Начало загрузки контрагентов: " + ТекущаяДата();
	Статус		= "Загрузка контрагентов из SQL";
	
	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ЗагрузкаКонтрагентов", УровеньЖурналаРегистрации.Информация,,,Сообщение);
	ВыводСтатусаСообщения(Статус, Сообщение);
	
	// Получаем данные из Аксапты
	ЗапросАДО.CommandText = "select 
	|	AccountNum,
	|	Name,
	|	NameAlias,
	|	INN,
	|	recno,
	|	ParentId,
	|	InventClass,
	|	Blocked,
	|	Address,
	|	DivisionId 
	|from dbo.CustVendTable_EXT 
	|where state = 0 and name<>''";
	
	//Выполнение запроса
	Выборка = ЗапросАДО.Execute(); 
	КонтрагентыSQL.Очистить();
	
	Пока Не Выборка.EOF() Цикл 
		
		НовСтр = КонтрагентыSQL.Добавить();
		Для Каждого ЗначениеSQL из Выборка.Fields Цикл 
			НовСтр[ЗначениеSQL.Name] = ЗначениеSQL.Value;
		КонецЦикла;
		
		Выборка.MoveNext();
		
	КонецЦикла;	
	
	Если КонтрагентыSQL.Количество() = 0 Тогда
		
		Сообщение = "Таблица контрагентов пуста: " + ТекущаяДата();
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ЗагрузкаКонтрагентов", УровеньЖурналаРегистрации.Информация,,,Сообщение);
		ВыводСтатусаСообщения(, Сообщение);
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаКонтрагентовКОчистке = "";
	
	ВыводСтатусаСообщения("Сопоставление контрагентов с данными базы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыSQL.AccountNum КАК AccountNum,
		|	КонтрагентыSQL.Name КАК Name,
		|	КонтрагентыSQL.NameAlias КАК NameAlias,
		|	КонтрагентыSQL.INN КАК INN,
		|	КонтрагентыSQL.recno КАК recno,
		|	КонтрагентыSQL.ParentId КАК ParentId,
		|	КонтрагентыSQL.InventClass КАК InventClass,
		|	КонтрагентыSQL.Blocked КАК Blocked,
		|	КонтрагентыSQL.Address КАК Address,
		|	КонтрагентыSQL.DivisionId КАК DivisionId
		|ПОМЕСТИТЬ ВТ_КонтрагентыSQL
		|ИЗ
		|	&КонтрагентыSQL КАК КонтрагентыSQL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КонтрагентыSQL.AccountNum КАК AccountNum,
		|	МАКСИМУМ(ВТ_КонтрагентыSQL.recno) КАК recno
		|ПОМЕСТИТЬ ВТ_МаксRecno
		|ИЗ
		|	ВТ_КонтрагентыSQL КАК ВТ_КонтрагентыSQL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_КонтрагентыSQL.AccountNum
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КонтрагентыSQL.AccountNum КАК AccountNum,
		|	ВТ_КонтрагентыSQL.Name КАК Name,
		|	ВТ_КонтрагентыSQL.NameAlias КАК NameAlias,
		|	ВТ_КонтрагентыSQL.INN КАК INN,
		|	ВТ_КонтрагентыSQL.recno КАК recno,
		|	ВТ_КонтрагентыSQL.ParentId КАК ParentId,
		|	ВТ_КонтрагентыSQL.InventClass КАК InventClass,
		|	ВТ_КонтрагентыSQL.Blocked КАК Blocked,
		|	ВТ_КонтрагентыSQL.Address КАК Address,
		|	ВТ_КонтрагентыSQL.DivisionId КАК DivisionId,
		|	Контрагенты.Ссылка КАК КонтрагентБД,
		|	ВЫБОР
		|		КОГДА ВТ_МаксRecno.recno ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК МаксRecno
		|ИЗ
		|	ВТ_КонтрагентыSQL КАК ВТ_КонтрагентыSQL
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВТ_КонтрагентыSQL.AccountNum = Контрагенты.НомДокИмпорт
		|			И (Контрагенты.НомДокИмпорт <> """")
		|			И (Контрагенты.Ссылка В ИЕРАРХИИ (&мГруппаПоОрганизации))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксRecno КАК ВТ_МаксRecno
		|		ПО ВТ_КонтрагентыSQL.AccountNum = ВТ_МаксRecno.AccountNum
		|			И ВТ_КонтрагентыSQL.recno = ВТ_МаксRecno.recno";  
	
	Запрос.УстановитьПараметр("КонтрагентыSQL", КонтрагентыSQL);
	Запрос.УстановитьПараметр("мГруппаПоОрганизации", мГруппаПоОрганизации);
	
	СопоставленныеКонтрагенты = Запрос.Выполнить().Выгрузить();
	
	Инд			= 1;
	ВсегоСтрок	= СопоставленныеКонтрагенты.Количество();
	
	// Обходим полученные данные
	Для каждого СтрокаТЗ из СопоставленныеКонтрагенты Цикл
		
		ВыводСтатусаСообщения("Обрабатывается контрагент " + Инд + " из " + ВсегоСтрок, ,Истина);
		Инд = Инд + 1;
		
		Если СтрокаТЗ.МаксRecno Тогда  
			НачатьТранзакцию();
			
			Если ЗначениеЗаполнено(СтрокаТЗ.КонтрагентБД) Тогда  
				Контрагент 				= СтрокаТЗ.КонтрагентБД.ПолучитьОбъект();
				Контрагент.Наименование = СтрокаТЗ.Name;
				Контрагент.НаименованиеПолное = СтрокаТЗ.Name;
			Иначе
				// Не нашли - создаем нового
				Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
				Если Лев(СтрокаТЗ.AccountNum, 1) = "П" Тогда
					// Родитель - группа поставщики
					Контрагент.Родитель = мПоставщики;
				Иначе
					// Родитель - группа покупатели
					Контрагент.Родитель = мПокупатели;
				КонецЕсли;
				Контрагент.НомДокИмпорт 		= СтрокаТЗ.AccountNum;
				Контрагент.Наименование 		= СтрокаТЗ.Name;
				Контрагент.НаименованиеПолное 	= СтрокаТЗ.Name;
				Контрагент.Записать(); // Нужно записать, что бы в ГоловнойКонтрагент можно было поставить ссылку
				
			КонецЕсли;
			
			Слэш = Найти(СтрокаТЗ.INN, "/");
			Если ЗначениеЗаполнено(Слэш)Тогда
				Контрагент.ИНН = Лев(СтрокаТЗ.INN, Слэш-1);
				Контрагент.КПП = Прав(СтрокаТЗ.INN, СтрДлина(СтрокаТЗ.INN)-Слэш);
			Иначе
				Контрагент.ИНН = СтрокаТЗ.INN;
			КонецЕсли;
			
			Контрагент.ГоловнойКонтрагент = Контрагент.Ссылка; 
			Контрагент.КонтрагентОКЕЙ	= Истина;

			Если Не Контрагент.ОК_КонтрагентБК Тогда  		
				
				// Юридический адрес
				ЗаписьЮА 					= Контрагент.КонтактнаяИнформация.Добавить();
				ЗаписьЮА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				ЗаписьЮА.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				ЗаписьЮА.Представление 		= СтрокаТЗ.Address;
				
				// Фактический адрес
				ЗаписьФА 					= Контрагент.КонтактнаяИнформация.Добавить();
				ЗаписьФА.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес;
				ЗаписьФА.Вид 				= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ЗаписьФА.Представление 		= СтрокаТЗ.Address;
				
			КонецЕсли;
			
			Контрагент.Записать(); 
		
			// Сопоставление аналитики
			// Добавить в регистр сопоставления записи по счетам 60, 62, 76
			ЗаписьСопоставление60 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление60.СчетАксапты 			= "60";
			ЗаписьСопоставление60.КодАналитикиАксапты	= СтрокаТЗ.AccountNum;
			ЗаписьСопоставление60.Организация 			= Организация;
			ЗаписьСопоставление60.Аналитика1С 			= Контрагент.Ссылка;
			ЗаписьСопоставление60.Тип1С 					= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041");
			ЗаписьСопоставление60.Записать(Истина);
			
			ЗаписьСопоставление62 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление62.СчетАксапты = "62";
			ЗаписьСопоставление62.КодАналитикиАксапты	= СтрокаТЗ.AccountNum;
			ЗаписьСопоставление62.Организация 			= Организация;
			ЗаписьСопоставление62.Аналитика1С 			= Контрагент.Ссылка;
			ЗаписьСопоставление62.Тип1С 					= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041");
			ЗаписьСопоставление62.Записать(Истина);
			
			ЗаписьСопоставление76 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление76.СчетАксапты 			= "76";
			ЗаписьСопоставление76.КодАналитикиАксапты	= СтрокаТЗ.AccountNum;
			ЗаписьСопоставление76.Организация 			= Организация;
			ЗаписьСопоставление76.Аналитика1С 			= Контрагент.Ссылка;
			ЗаписьСопоставление76.Тип1С 					= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041");
			ЗаписьСопоставление76.Записать(Истина);
			
			ЗаписьСопоставление19 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление19.СчетАксапты 			= "19";
			ЗаписьСопоставление19.КодАналитикиАксапты 	= СтрокаТЗ.AccountNum;
			ЗаписьСопоставление19.Организация 			= Организация;
			ЗаписьСопоставление19.Аналитика1С 			= Контрагент.Ссылка;
			ЗаписьСопоставление19.Тип1С 		    	= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000041");
			ЗаписьСопоставление19.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		Если СтрокаКонтрагентовКОчистке = "" Тогда
			СтрокаКонтрагентовКОчистке 				= Формат(СтрокаТЗ.recno, "ЧГ=0");
		Иначе
			СтрокаКонтрагентовКОчистке 				= СтрокаКонтрагентовКОчистке + ", " + Формат(СтрокаТЗ.recno, "ЧГ=0");
		КонецЕсли; 
		
	КонецЦикла;
	
		//Удаляем записи из таблицы
	Если СтрокаКонтрагентовКОчистке <> "" Тогда
		
		//Формирование запроса
		ЗапросАДО.CommandText = "delete from dbo.CustVendTable_EXT
		|where recno in (" + СтрокаКонтрагентовКОчистке + ")";

		//Выполнение запроса
		Выборка = ЗапросАДО.Execute(); 
		
	КонецЕсли;
	
	Сообщение = "Загрузка контрагентов завершена:" + ТекущаяДата();
	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ЗагрузкаКонтрагентов", УровеньЖурналаРегистрации.Информация,,,Сообщение);
	ВыводСтатусаСообщения(, Сообщение);
	
КонецПроцедуры

Процедура ЗагрузитьДоговора(Проверка = Ложь) Экспорт
	
	Если НЕ Проверка Тогда
		Сообщение	= "Начало загрузки договоров:		" + ТекущаяДата();
		Статус		= "Загрузка договоров из SQL";
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ЗагрузкаДоговоров", УровеньЖурналаРегистрации.Информация,,,Сообщение);
		ВыводСтатусаСообщения(Статус, Сообщение);
	КонецЕсли;
	
	//Типы договоров
	ТипДоговор 				= Справочники.бит_ТипыДоговоров.НайтиПоНаименованию("Договор");
	ТипПриложениеКДоговору 	= Справочники.бит_ТипыДоговоров.НайтиПоНаименованию("Приложение к договору");
	ТипСчетДоговора 		= Справочники.бит_ТипыДоговоров.НайтиПоНаименованию("Счет договора");
	ТипСчетПриложения 		= Справочники.бит_ТипыДоговоров.НайтиПоНаименованию("Счет приложения");
	
	Если ДоговораSQL.Количество() = 0 Тогда
		
		// Получаем данные из Аксапты
		//Формирование запроса
		ЗапросАДО.CommandText = "SELECT 
		|   recno,
		|	RECID,
		|	RCONTRACTPARTNERTYPE,
		|	RCONTRACTPARTNERCODE,
		|	RCONTRACTCODE,
		|	RCONTRACTACCOUNT,
		|	RCONTRACTCODEREF,
		|	RCONTRACTACCOUNTREF,
		|	CONTRACTLEVEL,
		|	GROUP1C,
		|	RCONTRACTNUMBER,
		|	CONTRACTDATE,
		|	CONTRACTENDDATE,
		|	RCONTRACTSUBJECT,
		|	DIMENSION,
		|	CONTRACTPOSTINGPROGILE,
		|	CURRENCYCODE
		|   FROM "+БазаДанных+".dbo.ContractTable_EXT";         
		
		//Выполнение запроса
		Выборка = ЗапросАДО.Execute(); 
		
		Пока Не Выборка.EOF() Цикл 
			
			НовСтр = ДоговораSQL.Добавить();
			Для Каждого ЗначениеSQL из Выборка.Fields Цикл 
				Если ЗначениеSQL.Name = "RECID" Тогда
					НовСтр[ЗначениеSQL.Name] = Формат(ЗначениеSQL.Value, "ЧГ=0");
				Иначе	
					НовСтр[ЗначениеSQL.Name] = ЗначениеSQL.Value;
				КонецЕсли;
			КонецЦикла;
			
			Выборка.MoveNext();
			
		КонецЦикла;	
		
		Если ДоговораSQL.Количество() = 0 Тогда
			
			Сообщение	= "Таблица договоров пуста:		" + ТекущаяДата() ;
			ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ЗагрузкаДоговоров", УровеньЖурналаРегистрации.Информация,,,Сообщение);
			ВыводСтатусаСообщения(, Сообщение);
			
			Возврат;
			
		КонецЕсли;
		
		ВыводСтатусаСообщения("Сопоставление договоров с данными базы");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
            |	ДоговораSQL.RECID,
            |	ДоговораSQL.RCONTRACTPARTNERTYPE,
            |	ДоговораSQL.RCONTRACTPARTNERCODE,
            |	ДоговораSQL.RCONTRACTCODE,
            |	ДоговораSQL.RCONTRACTACCOUNT,
            |	ДоговораSQL.RCONTRACTCODEREF,
            |	ДоговораSQL.RCONTRACTACCOUNTREF,
            |	ДоговораSQL.CONTRACTLEVEL,
            |	ДоговораSQL.GROUP1C,
            |	ДоговораSQL.RCONTRACTNUMBER,
            |	ДоговораSQL.CONTRACTDATE,
            |	ДоговораSQL.CONTRACTENDDATE,
            |	ДоговораSQL.RCONTRACTSUBJECT,
            |	ДоговораSQL.DIMENSION,
            |	ДоговораSQL.CONTRACTPOSTINGPROGILE,
            |	ДоговораSQL.CURRENCYCODE,
            |	ДоговораSQL.RECNO
            |ПОМЕСТИТЬ ВТ_ДоговораSQL
            |ИЗ
            |	&ДоговораSQL КАК ДоговораSQL
            |;
            |
            |////////////////////////////////////////////////////////////////////////////////
            |ВЫБРАТЬ
            |	ВТ_ДоговораSQL.RECID КАК RECID,
            |	МАКСИМУМ(ВТ_ДоговораSQL.RECNO) КАК RECNO
            |ПОМЕСТИТЬ ВТ_МаксRecNo
            |ИЗ
            |	ВТ_ДоговораSQL КАК ВТ_ДоговораSQL
            |
            |СГРУППИРОВАТЬ ПО
            |	ВТ_ДоговораSQL.RECID
            |;
            |
            |////////////////////////////////////////////////////////////////////////////////
            |ВЫБРАТЬ
            |	МАКСИМУМ(ВТ_ДоговораSQL.CONTRACTPOSTINGPROGILE) КАК CONTRACTPOSTINGPROGILE,
            |	ВТ_ДоговораSQL.RCONTRACTPARTNERCODE
            |ПОМЕСТИТЬ ВТ_МаксПрофиль
            |ИЗ
            |	ВТ_ДоговораSQL КАК ВТ_ДоговораSQL
            |
            |СГРУППИРОВАТЬ ПО
            |	ВТ_ДоговораSQL.RCONTRACTPARTNERCODE
            |;
            |
            |////////////////////////////////////////////////////////////////////////////////
            |ВЫБРАТЬ
            |	ДоговорыКонтрагентов.Ссылка КАК Договор,
            |	Контрагенты.Ссылка КАК Контрагент,
            |	ДоговорыКонтрагентов.бит_НомерАХ,
            |	Контрагенты.НомДокИмпорт,
            |	ДоговорыКонтрагентов.бит_RECID
            |ПОМЕСТИТЬ ВТ_КонтрагентыДоговоры
            |ИЗ
            |	Справочник.Контрагенты КАК Контрагенты
            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
            |		ПО Контрагенты.Ссылка = ДоговорыКонтрагентов.Владелец
            |			И (ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ)
            |			И (ДоговорыКонтрагентов.бит_RECID <> """")
            |ГДЕ
            |	Контрагенты.ПометкаУдаления = ЛОЖЬ
            |	И Контрагенты.НомДокИмпорт <> """"
            |	И Контрагенты.Ссылка В ИЕРАРХИИ(&мГруппаПоОрганизации)
            |;
            |
            |////////////////////////////////////////////////////////////////////////////////
            |ВЫБРАТЬ
            |	Контрагенты.Ссылка КАК Контрагент,
            |	Контрагенты.НомДокИмпорт
            |ПОМЕСТИТЬ ВТ_Контрагенты
            |ИЗ
            |	Справочник.Контрагенты КАК Контрагенты
            |ГДЕ
            |	Контрагенты.ПометкаУдаления = ЛОЖЬ
            |	И Контрагенты.НомДокИмпорт <> """"
            |	И Контрагенты.Ссылка В ИЕРАРХИИ(&мГруппаПоОрганизации)
            |;
            |
            |////////////////////////////////////////////////////////////////////////////////
            |ВЫБРАТЬ РАЗЛИЧНЫЕ
            |	ВТ_ДоговораSQL.RECID,
            |	ВТ_ДоговораSQL.RCONTRACTPARTNERTYPE,
            |	ВТ_ДоговораSQL.RCONTRACTPARTNERCODE КАК RCONTRACTPARTNERCODE,
            |	ВТ_ДоговораSQL.RCONTRACTCODE,
            |	ВТ_ДоговораSQL.RCONTRACTACCOUNT КАК RCONTRACTACCOUNT,
            |	ВТ_ДоговораSQL.RCONTRACTCODEREF,
            |	ВТ_ДоговораSQL.RCONTRACTACCOUNTREF,
            |	ВТ_ДоговораSQL.CONTRACTLEVEL,
            |	ВТ_ДоговораSQL.GROUP1C КАК GROUP1C,
            |	ВТ_ДоговораSQL.RCONTRACTNUMBER,
            |	ВТ_ДоговораSQL.CONTRACTDATE,
            |	ВТ_ДоговораSQL.CONTRACTENDDATE,
            |	ВТ_ДоговораSQL.RCONTRACTSUBJECT,
            |	ВТ_ДоговораSQL.DIMENSION,
            |	ВЫБОР
            |		КОГДА ВТ_ДоговораSQL.CONTRACTPOSTINGPROGILE = """"
            |			ТОГДА ВТ_МаксПрофиль.CONTRACTPOSTINGPROGILE
            |		ИНАЧЕ ВТ_ДоговораSQL.CONTRACTPOSTINGPROGILE
            |	КОНЕЦ КАК CONTRACTPOSTINGPROGILE,
            |	ВТ_ДоговораSQL.CURRENCYCODE,
            |	СБ_СоответствиеОбъектовСтроительства.ОбъектСтроительства КАК ОбъектСтроительстваБД,
            |	ЕСТЬNULL(ВТ_КонтрагентыДоговоры.Контрагент, ВТ_Контрагенты.Контрагент) КАК КонтрагентБД,
            |	ВТ_КонтрагентыДоговоры.Договор КАК ДоговорБД,
            |	ВЫБОР
            |		КОГДА ВТ_МаксRecNo.RECNO ЕСТЬ NULL 
            |			ТОГДА ЛОЖЬ
            |		ИНАЧЕ ИСТИНА
            |	КОНЕЦ КАК МаксRecNo
            |ИЗ
            |	ВТ_ДоговораSQL КАК ВТ_ДоговораSQL
            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксПрофиль КАК ВТ_МаксПрофиль
            |		ПО ВТ_ДоговораSQL.RCONTRACTPARTNERCODE = ВТ_МаксПрофиль.RCONTRACTPARTNERCODE
            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеОбъектовСтроительства КАК СБ_СоответствиеОбъектовСтроительства
            |		ПО ВТ_ДоговораSQL.DIMENSION = СБ_СоответствиеОбъектовСтроительства.inventlocationid
            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
            |		ПО ВТ_ДоговораSQL.RCONTRACTPARTNERCODE = ВТ_Контрагенты.НомДокИмпорт
            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтрагентыДоговоры КАК ВТ_КонтрагентыДоговоры
            |		ПО ВТ_ДоговораSQL.RECID = ВТ_КонтрагентыДоговоры.бит_RECID
            |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаксRecNo КАК ВТ_МаксRecNo
            |		ПО ВТ_ДоговораSQL.RECID = ВТ_МаксRecNo.RECID
            |			И ВТ_ДоговораSQL.RECNO = ВТ_МаксRecNo.RECNO
            |
            |УПОРЯДОЧИТЬ ПО
            |	RCONTRACTPARTNERCODE,
            |	RCONTRACTACCOUNT,
            |	GROUP1C УБЫВ";  
						
		Запрос.УстановитьПараметр("мГруппаПоОрганизации", мГруппаПоОрганизации);
		
		Запрос.УстановитьПараметр("ДоговораSQL", ДоговораSQL);
		СопоставленныеДоговора 		= Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаДоговора Из СопоставленныеДоговора Цикл
			Если  СтрокаДоговора.МаксRecNo Тогда
				НовСтр = СопоставленныеДоговораДляПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДоговора);
			КонецЕсли;
		КонецЦикла;
		
   КонецЕсли;
   
	Если Проверка Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДоговоровКОчистке = "";
	
	Инд			= 1;
	ВсегоСтрок	= СопоставленныеДоговора.Количество();
	
	//Валюта
	Юань 	= Справочники.Валюты.НайтиПоКоду("156");
	Евро 	= Справочники.Валюты.НайтиПоКоду("978");
	Доллары = Справочники.Валюты.НайтиПоКоду("840");
	Рубли 	= Справочники.Валюты.НайтиПоКоду("643");
	
	// Обходим полученные данные
	Для каждого СтрокаТЗ из СопоставленныеДоговора Цикл
		
		Если НЕ СтрокаТЗ.МаксRecNo Тогда
			Продолжить;
		КонецЕсли;
		
		УдалятьИзТаблицыSQL = Истина;
		
		ВыводСтатусаСообщения("Обрабатывается договор " + Инд + " из " + ВсегоСтрок, ,Истина);
		Инд							= Инд + 1;
		
		НачатьТранзакцию();
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.КонтрагентБД) Тогда
			Сообщить("Не найден сопоставленный контрагент (НомДокИмпорт: " + СтрокаТЗ.RCONTRACTPARTNERCODE + ") для договора с номером АХ:" + СтрокаТЗ.RCONTRACTACCOUNT + ". Договор не добавлен!");
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ДоговорБД) Тогда  
			Договор 				= СтрокаТЗ.ДоговорБД.ПолучитьОбъект();
			Договор.Наименование = СтрокаТЗ.RCONTRACTNUMBER;  
			Родитель = Договор.Родитель;
			Если СтрокаТЗ.GROUP1C = "1" и НЕ ЗначениеЗаполнено(Родитель) Тогда
				Родитель = Справочники.ДоговорыКонтрагентов.СоздатьГруппу();
				Родитель.Наименование = СтрокаТЗ.RCONTRACTNUMBER;
				Родитель.Владелец = СтрокаТЗ.КонтрагентБД;
				Родитель.Записать();
			КонецЕсли;
		Иначе
			// Не нашли - создаем нового
			Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Если СтрокаТЗ.GROUP1C = "1" Тогда
				Родитель = Справочники.ДоговорыКонтрагентов.СоздатьГруппу();
				Родитель.Наименование = СтрокаТЗ.RCONTRACTNUMBER;
				Родитель.Владелец = СтрокаТЗ.КонтрагентБД;
				Родитель.Записать();
			Иначе
				ЭлементРодитель = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("бит_НомерАХ", СтрокаТЗ.RCONTRACTACCOUNTREF,, СтрокаТЗ.КонтрагентБД);
				Родитель = ЭлементРодитель.Родитель;
			КонецЕсли;
		КонецЕсли;
		
		Договор.бит_НомерАХ = СтрокаТЗ.RCONTRACTACCOUNT;
		Договор.Наименование = СтрокаТЗ.RCONTRACTNUMBER;
		Договор.Родитель = Родитель.Ссылка;
		Договор.Владелец = СтрокаТЗ.КонтрагентБД;
		Договор.Организация = Организация;
		Договор.бит_RECID = СтрокаТЗ.RECID;
		Если СтрокаТЗ.CURRENCYCODE = Лев(Рубли.Наименование, 3) Тогда
			Договор.ВалютаВзаиморасчетов = Рубли;
		ИначеЕсли СтрокаТЗ.CURRENCYCODE = Евро.Наименование Тогда
			Договор.ВалютаВзаиморасчетов = Евро;
		ИначеЕсли СтрокаТЗ.CURRENCYCODE = Доллары.Наименование Тогда
			Договор.ВалютаВзаиморасчетов = Доллары;
		ИначеЕсли СтрокаТЗ.CURRENCYCODE = Юань.Наименование Тогда
			Договор.ВалютаВзаиморасчетов = Юань;
		КонецЕсли;
		Договор.Комментарий = "Загружено из АХ";
		Если Лев(СтрокаТЗ.CONTRACTPOSTINGPROGILE, 2) = "60" Тогда
			Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		ИначеЕсли Лев(СтрокаТЗ.CONTRACTPOSTINGPROGILE, 2) = "62" Тогда
			Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Иначе
			Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;
		Договор.Дата = ?(СтрокаТЗ.CONTRACTDATE = "01.01.1900 0:00:00", Дата('00010101'), СтрокаТЗ.CONTRACTDATE);
		Договор.Номер = СтрокаТЗ.RCONTRACTNUMBER;
		Договор.СрокДействия = ?(СтрокаТЗ.CONTRACTENDDATE = "01.01.1900 0:00:00", Дата('00010101'), СтрокаТЗ.CONTRACTENDDATE);
		Договор.бит_ПредметДоговора = СтрокаТЗ.RCONTRACTSUBJECT;
		Если ЗначениеЗаполнено(СтрокаТЗ.DIMENSION) Тогда
			Договор.Объект = СтрокаТЗ.ОбъектСтроительстваБД;
			Если НЕ ЗначениеЗаполнено(Договор.Объект) Тогда
				Сообщить("Не заполнено соответствие объектов строительства для Inventlocationid=" + СтрокаТЗ.DIMENSION + ". Объект строительства не заполнен! Номер АХ договора: " + СтрокаТЗ.RCONTRACTACCOUNT);
				УдалятьИзТаблицыSQL = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТЗ.CONTRACTLEVEL = "0"  Тогда
			Договор.бит_ТипДоговора = ТипДоговор.Ссылка;
		ИначеЕсли СтрокаТЗ.CONTRACTLEVEL = "1"  Тогда
			Договор.бит_ТипДоговора = ТипПриложениеКДоговору.Ссылка;
		ИначеЕсли СтрокаТЗ.CONTRACTLEVEL = "2"  Тогда
			Договор.бит_ТипДоговора = ТипСчетПриложения.Ссылка;
		ИначеЕсли СтрокаТЗ.CONTRACTLEVEL = "3"  Тогда
			Договор.бит_ТипДоговора = ТипСчетДоговора.Ссылка;
		КонецЕсли;
		
		НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.НайтиПоНаименованию(СтрокаТЗ.RCONTRACTCODE);
		Если НЕ(ЗначениеЗаполнено(НаправлениеДоговора)) Тогда
			НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.СоздатьЭлемент();
			НаправлениеДоговора.Наименование = СтрокаТЗ.RCONTRACTCODE;
			НаправлениеДоговора.Записать();
			НаправлениеДоговора = НаправлениеДоговора.Ссылка;
		КонецЕсли;
		Договор.бит_НаправлениеДоговора = НаправлениеДоговора;
		Договор.бит_НомерАХ = СтрокаТЗ.RCONTRACTACCOUNT;
		
		Договор.СБ_ПрофильРазноски = СтрокаТЗ.CONTRACTPOSTINGPROGILE;
		
		Попытка
			Договор.Записать(); 
			СтрокаТЧ = СопоставленныеДоговораДляПроверки.Найти(СтрокаТЗ.RCONTRACTACCOUNT, "RCONTRACTACCOUNT");
			СтрокаТЧ.ДоговорБД = Договор.Ссылка;
		Исключение
			Сообщить("Не удалось добавить договор с номером АХ: " + СтрокаТЗ.RCONTRACTACCOUNT + " по причине: " + ОписаниеОшибки());
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ДоговорБД) Тогда  
			УстановкаВидовРасчетов = Документы.УстановкаВидовРасчетовПоДоговорам.СоздатьДокумент();
			УстановкаВидовРасчетов.Дата = Договор.Дата;
			УстановкаВидовРасчетов.Организация = Организация;
			УстановкаВидовРасчетов.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			НовСтрПринадлежности = УстановкаВидовРасчетов.Принадлежности.Добавить();
			НовСтрПринадлежности.Контрагент = Договор.Владелец;
			НовСтрПринадлежности.ДоговорКонтрагента = Договор.Ссылка;
			НовСтрПринадлежности.ВидРасчета = ?(СтрокаТЗ.RCONTRACTCODE = "ОС", Перечисления.ПринадлежностиРасчетовПоДоговорам.Инвестиционные, Перечисления.ПринадлежностиРасчетовПоДоговорам.Текущие);
			
			УстановкаВидовРасчетов.Записать(РежимЗаписиДокумента.Проведение);	
		КонецЕсли;
		
		// Сопоставление аналитики
		// Добавить в регистр сопоставления записи по счетам 60, 62, 76
		Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ЗаписьСопоставление60 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление60.СчетАксапты 			= "60";
			ЗаписьСопоставление60.КодАналитикиАксапты	= СтрокаТЗ.RECID;
			ЗаписьСопоставление60.Организация 			= Организация;
			ЗаписьСопоставление60.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление60.Тип1С 				= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление60.Записать(Истина);
			
			ЗаписьСопоставление76 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление76.СчетАксапты 			= "76";
			ЗаписьСопоставление76.КодАналитикиАксапты	= СтрокаТЗ.RECID;
			ЗаписьСопоставление76.Организация 			= Организация;
			ЗаписьСопоставление76.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление76.Тип1С 				= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление76.Записать(Истина);
		ИначеЕсли  Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			ЗаписьСопоставление62 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление62.СчетАксапты           = "62";
			ЗаписьСопоставление62.КодАналитикиАксапты = СтрокаТЗ.RECID;
			ЗаписьСопоставление62.Организация 			= Организация;
			ЗаписьСопоставление62.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление62.Тип1С 				= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление62.Записать(Истина);
			
			ЗаписьСопоставление76 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление76.СчетАксапты 			= "76";
			ЗаписьСопоставление76.КодАналитикиАксапты = СтрокаТЗ.RECID;
			ЗаписьСопоставление76.Организация 			= Организация;
			ЗаписьСопоставление76.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление76.Тип1С 				= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление76.Записать(Истина);
		ИначеЕсли Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее и ЗначениеЗаполнено(СтрокаТЗ.CONTRACTPOSTINGPROGILE) Тогда
			ЗаписьСопоставлениеПрочее 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставлениеПрочее.СчетАксапты           = Лев(СтрокаТЗ.CONTRACTPOSTINGPROGILE,2);
			ЗаписьСопоставлениеПрочее.КодАналитикиАксапты = СтрокаТЗ.RECID;
			ЗаписьСопоставлениеПрочее.Организация 			= Организация;
			ЗаписьСопоставлениеПрочее.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставлениеПрочее.Тип1С 				= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставлениеПрочее.Записать(Истина);
		Иначе
			ЗаписьСопоставление60 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление60.СчетАксапты 			= "60";
			ЗаписьСопоставление60.КодАналитикиАксапты = СтрокаТЗ.RECID;
			ЗаписьСопоставление60.Организация 			= Организация;
			ЗаписьСопоставление60.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление60.Тип1С 					= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление60.Записать(Истина);
			
			ЗаписьСопоставление76 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление76.СчетАксапты 			= "76";
			ЗаписьСопоставление76.КодАналитикиАксапты = СтрокаТЗ.RECID;
			ЗаписьСопоставление76.Организация 			= Организация;
			ЗаписьСопоставление76.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление76.Тип1С 					= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление76.Записать(Истина);
			
			ЗаписьСопоставление62 						= РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
			ЗаписьСопоставление62.СчетАксапты           = "62";
			ЗаписьСопоставление62.КодАналитикиАксапты = СтрокаТЗ.RECID;
			ЗаписьСопоставление62.Организация 			= Организация;
			ЗаписьСопоставление62.Аналитика1С 			= Договор.Ссылка;
			ЗаписьСопоставление62.Тип1С 					= Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000000027");
			ЗаписьСопоставление62.Записать(Истина);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
		Если НЕ УдалятьИзТаблицыSQL Тогда
				Продолжить;
		КонецЕсли;
		
		Если СтрокаДоговоровКОчистке = "" Тогда
			СтрокаДоговоровКОчистке 				= Формат(СтрокаТЗ.RECID, "ЧГ=0");
		Иначе
			СтрокаДоговоровКОчистке 				= СтрокаДоговоровКОчистке + ", " + Формат(СтрокаТЗ.RECID, "ЧГ=0");
		КонецЕсли; 
		
	КонецЦикла;
	
		//Удаляем записи из таблицы
	Если СтрокаДоговоровКОчистке <> "" Тогда
		
		//Формирование запроса
		ЗапросАДО.CommandText = "delete from "+БазаДанных+".dbo.ContractTable_EXT
		|where RECID in (" + СтрокаДоговоровКОчистке + ")";
		//Выполнение запроса
		Выборка = ЗапросАДО.Execute();
		
	КонецЕсли;
	
	ДоговораSQL.Очистить();
	СопоставленныеДоговора.Очистить();
	
	Сообщение	= "Загрузка договоров завершена:" + ТекущаяДата();
	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ЗагрузкаДоговоров", УровеньЖурналаРегистрации.Информация,,,Сообщение);
	ВыводСтатусаСообщения(, Сообщение);
	
КонецПроцедуры

///////////////////////
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#4205)
//Функция ФормированиеДанных(Данные, ТаблицаСтатДанных, ЗагрузитьГруппу = Ложь)
Функция ФормированиеДанных(Данные, ТаблицаСтатДанных, ЗагрузитьГруппу = Ложь, СтруктураНастройки = Неопределено)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#4205)
	
	// Получить элементы "Не сопоставлено"
	ТабНеСопоставлено = ПолучитьНеСопоставленные();
	
	Данные.Колонки.Добавить("ЗагруженоСОшибкой", 			Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить("Posted1C8", 					Новый ОписаниеТипов("Число"));
    Данные.Колонки.Добавить("ДокументОперацияАксапты", 		Новый ОписаниеТипов("ДокументСсылка.бит_ок_ОперацияАксапты12"));
    Данные.Колонки.Добавить("Счет", 						Новый ОписаниеТипов("СписокЗначений"));
    Данные.Колонки.Добавить("ТипАналитики", 				Новый ОписаниеТипов("СписокЗначений"));
    Данные.Колонки.Добавить("Значение", 					Новый ОписаниеТипов("СписокЗначений"));
    Данные.Колонки.Добавить("СчетБезИсключений", 			Новый ОписаниеТипов("СписокЗначений"));
    Данные.Колонки.Добавить("ТипАналитикиБезИсключений", 	Новый ОписаниеТипов("СписокЗначений"));
    Данные.Колонки.Добавить("ЗначениеБезИсключений", 		Новый ОписаниеТипов("СписокЗначений"));
	Данные.Колонки.Добавить("ВСпискеИсключений", 			Новый ОписаниеТипов("Булево"));
	
	КоличествоСубконтоАксапта = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта 12", "Количество субконто Аксапта", 6);
	
	//заполнение незаполненной аналитики справочниками "Не сопоставлено"
	Для каждого Стр из Данные Цикл
		
		Стр.Счет 			= "";
		Стр.ТипАналитики 	= "";
		Стр.Значение 		= "";
		
		//заполнение незаполненной аналитики справочниками "Не сопоставлено"
		СтруктураАналитики = Новый Структура;
		Для Инд = 1 По КоличествоСубконтоАксапта Цикл
			
			СтруктураАналитики.Вставить("СубконтоДт" + Инд + "Тип1С", "Субконто1СДт" + Инд);
			СтруктураАналитики.Вставить("СубконтоКт" + Инд + "Тип1С", "Субконто1СКт" + Инд);
			
		КонецЦикла; 
		
		Для каждого ЭлСтр из СтруктураАналитики Цикл
			
			Если ЗначениеЗаполнено(Стр[ЭлСтр.Ключ]) И НЕ ЗначениеЗаполнено(Стр[ЭлСтр.Значение]) Тогда
				
				// найти не сопоставленный
				СтрокаТабНеСопоставлено = ТабНеСопоставлено.Найти(Стр[ЭлСтр.Ключ].Наименование, "ИмяНастройки");
				Если СтрокаТабНеСопоставлено <> Неопределено Тогда
					
					ДтКт 					= ?(Найти(ЭлСтр.Ключ, "Дт") <> 0, "Дт", "Кт");
					Счет 					= Стр["Счет" + ДтКт];
					ВСпискеИсключений 		= Ложь;
					Стр[ЭлСтр.Значение] 	= СтрокаТабНеСопоставлено.Значение;
					Стр.ЗагруженоСОшибкой 	= Истина;
					
					Если НЕ ВСпискеИсключений Тогда
						Стр.СчетБезИсключений.Добавить(Счет);
						Стр.ТипАналитикиБезИсключений.Добавить(Стр[ЭлСтр.Ключ].Наименование);
						Стр.ЗначениеБезИсключений.Добавить(Стр[СтрЗаменить(ЭлСтр.Значение, "1С", "Аксапта")]);
					КонецЕсли;
					
					Стр.Счет.Добавить(Счет);
					Стр.ТипАналитики.Добавить(Стр[ЭлСтр.Ключ].Наименование);
					Стр.Значение.Добавить(Стр[СтрЗаменить(ЭлСтр.Значение, "1С", "Аксапта")]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Получение из таблицы оборотов таблицы документов
	//ТабДокументов = Данные.Скопировать(,"Voucher, ReferVoucherId, DocDate, BudgetIntID");
	//ТабДокументов.Свернуть("Voucher, ReferVoucherId, DocDate, BudgetIntID");
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-26 (#4205)
	//ТабДокументов = Данные.Скопировать(,"Voucher, ReferVoucherId, DocDate");
	//ТабДокументов.Свернуть("Voucher, ReferVoucherId, DocDate");
	ТабДокументов = Данные.Скопировать(,"Voucher, ReferVoucherId, DocDate, RecNo");
	ТабДокументов.Свернуть("Voucher, ReferVoucherId, DocDate, RecNo");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-26 (#4205)
	
	// Проверить, есть ли такие данные в базе. Если документ есть, его не нужно создавать.
	ТабДокументов = ПроверитьДокументы(ТабДокументов);
	
	// Время старта нужно для примерного вычисления скорости
	ДСтарт = ТекущаяДата();
	
	КолДок = 0;
	ДокументовВПорции = 0;
	
	Юань 	= Справочники.Валюты.НайтиПоКоду("156");
	Евро 	= Справочники.Валюты.НайтиПоКоду("978");
	Доллары = Справочники.Валюты.НайтиПоКоду("840");
	Рубли 	= Справочники.Валюты.НайтиПоКоду("643");
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#4205)
	НачатьТранзакцию();
	
	Попытка
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#4205)
	
	// создание проведение документов
	Для каждого ДокСтр Из ТабДокументов Цикл	
		
		Если ДокСтр.СуществующийДокумент = Null Тогда
			
			Док = Документы.бит_ок_ОперацияАксапты12.СоздатьДокумент();
			
		Иначе
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-24 (#4205)
			//Если ЗагрузитьГруппу Тогда
			//	
			//	Сообщение = "По Voucher, RefVoucherID и DocDate (" + ДокСтр.Voucher + "; " + ДокСтр.ReferVoucherId + "; " + ДокСтр.DocDate 
			//				+ ") найден документ Операция Аксапты 12 (" + ДокСтр.СуществующийДокумент + "), в ЕИС не будет перезаписан.";
			//	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12. ФормированиеДанных", УровеньЖурналаРегистрации.Предупреждение,,ДокСтр.СуществующийДокумент,Сообщение);
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, ДокСтр.СуществующийДокумент);
			//	
			//	Продолжить;
			//	
			//	ТекстСообщения = НСтр("ru = 'По Voucher, RefVoucherID и DocDate (%1; %2; %3) найден документ Операция Аксапты 12 (%4), в ЕИС будет перезагружен.'");
			//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			//						ДокСтр.Voucher, 
			//						ДокСтр.ReferVoucherId, 
			//						ДокСтр.DocDate, 
			//						ДокСтр.СуществующийДокумент);
			//						
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//	
			//	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12. ФормированиеДанных", УровеньЖурналаРегистрации.Предупреждение,, ДокСтр.СуществующийДокумент, ТекстСообщения);
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокСтр.СуществующийДокумент);
			//	
			//КонецЕсли;
			
			Если ТипЗнч(СтруктураНастройки) = Тип("Структура")
				И СтруктураНастройки.Свойство("МассивПовторноЗагруженныхVoucher")
				И СтруктураНастройки.МассивПовторноЗагруженныхVoucher.Найти(ДокСтр.Voucher) = Неопределено Тогда
				СтруктураНастройки.МассивПовторноЗагруженныхVoucher.Добавить(ДокСтр.Voucher);
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = 'По Voucher, RefVoucherID и DocDate (%1; %2; %3) найден документ Операция Аксапты 12 (%4), в ЕИС будет перезагружен.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
								ДокСтр.Voucher, 
								ДокСтр.ReferVoucherId, 
								ДокСтр.DocDate, 
								ДокСтр.СуществующийДокумент);
								
			ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ФормированиеДанных", УровеньЖурналаРегистрации.Предупреждение,, ДокСтр.СуществующийДокумент, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокСтр.СуществующийДокумент);
			
			бит_ОбщегоНазначения.ДобавитьЗначениеАналитики(ДокСтр.СуществующийДокумент, ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ок_ВыполнитьПовторнуюТрансляцию"), Истина);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-24 (#4205)
			
			Док = ДокСтр.СуществующийДокумент.ПолучитьОбъект();
			Док.ОборотыАксапты.Очистить();
			Док.Движения.Хозрасчетный.Очистить();
			Док.Движения.бит_Дополнительный_2.Очистить();
			флЗакрытыйПериод = ЭтоДокументЗакрытогоПериодаПоМСФО(Док, Организация);
			
			// если документ попадает в закрытый период - принудительно выполняется on-line трансляция 
			Если флЗакрытыйПериод Тогда
				Док.Движения.бит_Дополнительный_2.Прочитать();
			КонецЕсли;
			
			бтСсылкаНаДокументОперация = Документы.бит_ок_ОперацияАксапты12.ПолучитьСвязаннуюОперациюБУХ(Док.Ссылка);
			Если ЗначениеЗаполнено(бтСсылкаНаДокументОперация) Тогда
				
				Док.бтИсправление = Ложь;
				
				ДокументКорректировки = бтСсылкаНаДокументОперация.ПолучитьОбъект();
				ДокументКорректировки.ПометкаУдаления = Истина;
				
				ДвиженияОперация = ДокументКорректировки.Движения.Хозрасчетный;
				ДвиженияОперация.Очистить();
				ДвиженияОперация.Записать();
				
				ДокументКорректировки.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Voucher", ДокСтр.Voucher);
		Отбор.Вставить("ReferVoucherId", ДокСтр.ReferVoucherId);
		Отбор.Вставить("DocDate", ДокСтр.DocDate);
		
		Строки = Данные.НайтиСтроки(Отбор);
		// Определим старший RecNo - это последний документ из набора
		СтрокиRecNo = Данные.Скопировать(Строки, "RecNo");
		СтрокиRecNo.Сортировать("RecNo Убыв");
		СтаршийRecNo = СтрокиRecNo[0].RecNo;
		
		// берем наиболее актуальный документ
		// если в базе документ с более старшим RecNo, то трогать его не надо
		
		ДанныеДляЗаполненияШапки = Строки[0];
		
		// заполним шапку
		Док.Организация 				= Организация;
		Док.RecNo 						= СтаршийRecNo;
		Док.ДатаЗагрузки 				= ТекущаяДата();
		
		Док.Дата 						= ДанныеДляЗаполненияШапки.DocDate;
		Док.DocType 					= ДанныеДляЗаполненияШапки.DocType;
		Док.ТипДокумента 				= ДанныеДляЗаполненияШапки.ТипОперации1С;
		Док.Ваучер 						= ДанныеДляЗаполненияШапки.Voucher;
		Док.ВаучерИсходногоДокумента	= ДанныеДляЗаполненияШапки.ReferenceVoucher;
		Док.ReferVoucherId 				= ДанныеДляЗаполненияШапки.ReferVoucherId;
		Док.ВаучерДокументаЗакупки		= ДанныеДляЗаполненияШапки.PurchVoucher;
		Док.DocumentDate 				= ДанныеДляЗаполненияШапки.DocumentDate;
		Док.DocumentNum 				= ДанныеДляЗаполненияШапки.DocumentNum;
		Док.OrderID 					= ДанныеДляЗаполненияШапки.OrderID;
		Док.E1COrderId 					= ДанныеДляЗаполненияШапки.E1COrderId;
		Док.ReceiptDateFact 			= ДанныеДляЗаполненияШапки.ReceiptDateFact;
		Док.PaymReference 				= ДанныеДляЗаполненияШапки.PaymReference;
		Док.Комментарий 				= ДанныеДляЗаполненияШапки.Comment;
		Док.ЗагруженоСОшибкой 			= Ложь;
		Док.Сторно	 					= ДанныеДляЗаполненияШапки.ISSTORNO;
		Док.ок_СвернутыеОбороты 		= Ложь;
		
		//Док.ОК_ID_Разноска 	= Формат(ДокСтр.BudgetIntID, "ЧН=0; ЧГ=0");
		
		Для каждого Стр из Строки Цикл
			
			Если Стр.RecNo < СтаршийRecNo Тогда
				Продолжить;
			КонецЕсли;
			
			НовСтр = Док.ОборотыАксапты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			НовСтр.КомментарийПроводки = Стр.Txt;
			
			Если ЗначениеЗаполнено(Стр.ВалютаДт) Тогда
				Если Стр.ВалютаДт = Лев(Рубли.Наименование, 3) Тогда
					НовСтр.ВалютаДт = Рубли;
				ИначеЕсли Стр.ВалютаДт = Евро.Наименование Тогда
					НовСтр.ВалютаДт = Евро;
				ИначеЕсли Стр.ВалютаДт = Доллары.Наименование Тогда
					НовСтр.ВалютаДт = Доллары;
				ИначеЕсли Стр.ВалютаДт = Юань.Наименование Тогда
					НовСтр.ВалютаДт = Юань;
				КонецЕсли;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Стр.ВалютаКт) Тогда
				Если Стр.ВалютаКт = Лев(Рубли.Наименование, 3) Тогда
					НовСтр.ВалютаКт = Рубли;
				ИначеЕсли Стр.ВалютаКт = Евро.Наименование Тогда
					НовСтр.ВалютаКт = Евро;
				ИначеЕсли Стр.ВалютаКт = Доллары.Наименование Тогда
					НовСтр.ВалютаКт = Доллары;
				ИначеЕсли Стр.ВалютаКт = Юань.Наименование Тогда
					НовСтр.ВалютаКт = Юань;
				КонецЕсли;
			КонецЕсли; 
			
			Если Стр.ЗагруженоСОшибкой Тогда
				Док.ЗагруженоСОшибкой = Истина;
			КонецЕсли;
			
		КонецЦикла;                                         
		
		// запись документа
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#4205)
		//Попытка
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#4205)
			
			#Если Клиент Тогда 
				Если ПрерываниеПоCtrlBreak Тогда
					ОбработкаПрерыванияПользователя();
				КонецЕсли;
			#КонецЕсли 
			
			// вывести информацию
			ВремяРаботы = ТекущаяДата() - ДСтарт;
			Обработано = ТабДокументов.Индекс(ДокСтр);
			Скорость = Обработано / ?(ВремяРаботы = 0, 1, ВремяРаботы);
			ОповеститьПользователя("Записываю документ " + ТабДокументов.Индекс(ДокСтр) + " из " + ТабДокументов.Количество() + " - " + Формат(Скорость, "ЧДЦ=2") + " документов/с");
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#4205)
			//Если ДокументовВПорции >= ПорцияТранзакции Тогда 
			//	
			//	ЗафиксироватьТранзакцию();
			//	ДокументовВПорции = 0;
			//	
			//КонецЕсли;
			//
			//Если ДокументовВПорции = 0 тогда 
			//	
			//	НачатьТранзакцию();
			//	БлокировкаРН 	= Новый БлокировкаДанных;
			//	ОбъектРН 		= БлокировкаРН.Добавить("РегистрНакопления.бит_ок_ОборотыАксапты12");
			//	ОбъектРН.Режим 	= РежимБлокировкиДанных.Исключительный;
			//	ОбъектРН.УстановитьЗначение("Организация", Организация);
			//	БлокировкаРН.Заблокировать();
			//	
			//КонецЕсли;
			//
			//ДокументовВПорции = ДокументовВПорции + 1;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#4205)
			
			Если НЕ Док.ПометкаУдаления Тогда
				
				Док.Проведен = Истина;
				Если Док.Ссылка = Документы.бит_ок_ОперацияАксапты12.ПустаяСсылка() Тогда
					СсылкаДок = Документы.бит_ок_ОперацияАксапты12.ПолучитьСсылку(Новый УникальныйИдентификатор);
					Док.УстановитьСсылкуНового(СсылкаДок);
				Иначе
					СсылкаДок = Док.Ссылка;
				КонецЕсли;
				
				Для Каждого ТекСтрокаОборотыАксапты Из Док.ОборотыАксапты Цикл
					
					Движение = Док.Движения.бит_ок_ОборотыАксапты12.Добавить();
					ЗаполнитьЗначенияСвойств(Движение, ТекСтрокаОборотыАксапты);
					Движение.Период 		= Док.Дата;
					Движение.Организация 	= Док.Организация;
					Движение.ТипДокумента 	= Док.ТипДокумента;
					Движение.Ваучер 		= Док.Ваучер;
					Движение.DocumentNum 	= Док.DocumentNum;
					Движение.DocumentDate 	= Док.DocumentDate;
					
				КонецЦикла;
				
				//вставим дополнительное свойство, чтобы при проведении и онлайн трансляции исключить трансляцию при записи
				Док.ДополнительныеСвойства.Вставить("бит_ДокументЗагружаетсяИзАксапты",);
				Док.Записать(РежимЗаписиДокумента.Запись);
				Док.Движения.бит_ок_ОборотыАксапты12.Записать();
				
				Если ДокСтр.СуществующийДокумент <> Null Тогда
					
					Док.Движения.Хозрасчетный.Записать();   
					Док.Движения.бит_Дополнительный_2.Записать();  
					
				Иначе 
					
					Док.Движения.бит_Дополнительный_2.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
			//Проставим флаг
			Для каждого Стр из Строки Цикл
				Стр.Posted1C8 = 1;
				Стр.ДокументОперацияАксапты = Док.Ссылка;
			КонецЦикла;
			
			КолДок = КолДок + 1;
			
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#4205)
		//Исключение
		//	
		//	Сообщение = "Не удалось записать документ Операция Аксапты 12 " + Док.Ссылка + " "  + ОписаниеОшибки();
		//	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12. ФормированиеДанных", УровеньЖурналаРегистрации.Ошибка,,,Сообщение);
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, Док.Ссылка);
		//	
		//	//Проставим флаг
		//	Для каждого Стр из Строки Цикл
		//		
		//		Стр.Posted1C8 = 0;
		//		Стр.ДокументОперацияАксапты = Док.Ссылка;
		//		
		//	КонецЦикла;
		//	
		//КонецПопытки;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#4205)
		
	КонецЦикла;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#4205)
	//СтрСтат = ТаблицаСтатДанных.ДОбавить();
	//СтрСтат.ЗагруженоДок = КолДок;
	//
	//Если ТранзакцияАктивна() Тогда 
	//	ЗафиксироватьТранзакцию();
	//КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#4205)
	
	// проставление флага Posted
	СтрокаУсловиеПоRecNo = "";
	Для каждого Стр из Данные Цикл
		
		Если Стр.Posted1C8 = 1 
			И ЗначениеЗаполнено(Стр.ДокументОперацияАксапты) 
			И ТипЗнч(Стр.ДокументОперацияАксапты) = Тип("ДокументСсылка.бит_ок_ОперацияАксапты12") 
			И Стр.ДокументОперацияАксапты.Ваучер = Стр.Voucher  Тогда
			
			RecNoДляУсловия = Формат(Стр.RecNo, "ЧГ=0");
			
			Если RecNoДляУсловия = ""
				ИЛИ СтрНайти(СтрокаУсловиеПоRecNo, RecNoДляУсловия) <> 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаУсловиеПоRecNo <> "" Тогда
				СтрокаУсловиеПоRecNo = СтрокаУсловиеПоRecNo + ", ";
			КонецЕсли;
			
			СтрокаУсловиеПоRecNo = СтрокаУсловиеПоRecNo + RecNoДляУсловия;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаУсловиеПоRecNo = "(" + СтрокаУсловиеПоRecNo + ")";
	
	// если есть что проставлять, то проставим флаги Posted
	Если Не СтрокаУсловиеПоRecNo = "()" Тогда
		ПроставитьФлагPosted(СтрокаУсловиеПоRecNo);
	Иначе
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-21 (#4205)
		ЗафиксироватьТранзакцию();
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-21 (#4205)
		Возврат Ложь;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#4205)
	ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ФормированиеДанных", УровеньЖурналаРегистрации.Ошибка,,ДокСтр.СуществующийДокумент, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	СтрСтат = ТаблицаСтатДанных.ДОбавить();
	СтрСтат.ЗагруженоДок = КолДок;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#4205)
	
	// Сформировать отчет
	Отбор = Новый Структура;
	Отбор.Вставить("ЗагруженоСОшибкой", Истина);
	
	ДанныеОбОшибках = Данные.Скопировать(Отбор, "Voucher, DocType, ДокументОперацияАксапты, Счет, ТипАналитики, Значение");
	ДанныеОбОшибках.Свернуть("Voucher, DocType, ДокументОперацияАксапты, Счет, ТипАналитики, Значение");
	
	ДанныеОбОшибкахБезИсключений = Данные.Скопировать(Отбор, "Voucher, DocType, ДокументОперацияАксапты, СчетБезИсключений, ТипАналитикиБезИсключений, ЗначениеБезИсключений");
	ДанныеОбОшибкахБезИсключений.Свернуть("Voucher, DocType, ДокументОперацияАксапты, СчетБезИсключений, ТипАналитикиБезИсключений, ЗначениеБезИсключений");
	
	Если ТаблицаОшибок.Количество() = 0 Тогда
		ТаблицаОшибок = ДанныеОбОшибках.Скопировать();
	Иначе
		Для каждого СтрТабОшибок из ДанныеОбОшибках Цикл
			НовСтрТабОшибок = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрТабОшибок, СтрТабОшибок);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаОшибокБезИсключений = ДанныеОбОшибкахБезИсключений.СкопироватьКолонки();
	Для каждого СтрТабОшибокБезИсключений из ДанныеОбОшибкахБезИсключений Цикл
		Если ЗначениеЗаполнено(СтрТабОшибокБезИсключений.СчетБезИсключений) Тогда
			НовСтрТабОшибокБезИсключений = ТаблицаОшибокБезИсключений.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрТабОшибокБезИсключений, СтрТабОшибокБезИсключений);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина; 
	
КонецФункции

Функция ПроверитьДокументы(ТабДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабДок", ТабДокументов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабДок.Voucher КАК Voucher,
		|	ТабДок.ReferVoucherId КАК ReferVoucherId,
		|	ТабДок.DocDate КАК DocDate
		//|	ТабДок.BudgetIntID КАК BudgetIntID
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-26 (#4205)
		|	, ТабДок.RecNo
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-26 (#4205)
		|ПОМЕСТИТЬ ТабДок
		|ИЗ
		|	&ТабДок КАК ТабДок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабДок.Voucher КАК Voucher,
		|	ТабДок.ReferVoucherId КАК ReferVoucherId,
		|	ТабДок.DocDate КАК DocDate,
		//|	ТабДок.BudgetIntID КАК BudgetIntID,
		|	бит_ок_ОперацияАксапты.Ссылка КАК СуществующийДокумент
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-26 (#4205)
		|	, ТабДок.RecNo
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-26 (#4205)
		|ИЗ
		|	ТабДок КАК ТабДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ок_ОперацияАксапты12 КАК бит_ок_ОперацияАксапты
		|		ПО ТабДок.Voucher = бит_ок_ОперацияАксапты.Ваучер
		|			И ТабДок.ReferVoucherId = бит_ок_ОперацияАксапты.ReferVoucherId
		|			И ТабДок.DocDate = бит_ок_ОперацияАксапты.Дата
		|			И (бит_ок_ОперацияАксапты.Организация = &Организация)
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-26 (#4205)
		|УПОРЯДОЧИТЬ ПО
		|	ТабДок.RecNo
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-26 (#4205)
		|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьНеСопоставленные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки,
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение
		|ИЗ
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
		|ГДЕ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа";

	Запрос.УстановитьПараметр("Группа", "Служебные элементы Не сопоставлено");

	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ПроставитьФлагPosted(СтрокаУсловиеПоRecNo)
	
	ЗапросАДО.CommandText = "UPDATE ExportDataTo1cDocHeader set Posted1C8 = 1   
	|where RecNo in " + СтрокаУсловиеПоRecNo;                                   

	//Выполнение запроса
	ОповеститьПользователя("Проставляется флаг Posted1C8 в экспортных таблицах");
	Выборка = ЗапросАДО.Execute(); 
	
КонецФункции

Функция СформироватьИПередатьОтчет(ТаблицаОшибок, СтруктураНастройки, ДатаНачалаЗагрузки, ДатаОкончанияЗагрузки)

	// Извещение инженеров второй линии о результатах загрузки операций Аксапты в 1С EIS
	времСообщение_Заголовок = "Информация по работе обработки по загрузке данных из Аксапты 12 (Ок).";
	времТекстСообщения      = "Загрузка данных произведена. Время начала загрузки: " + ВремяНачалаЗагрузки 
													+ ". Время окончания: " + ВремяОкончанияЗагрузки 
													+ ". Загружено: " + КоличествоДокЗагруженных + " документов ""Операция Аксапты 12""";
	времСообщение_Подпись   = "Информация о работе обработки ""Загрузка данных из Аксапты 12"". Пользователь: " + бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	вхСписокПолучателей 	= бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Согласование по почте", "Список получателей протокола выполнения РЗ", Новый СписокЗначений());
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-26 (#4205)
	времТекстСообщения = времТекстСообщения + Символы.ПС;
	
	Если ТипЗнч(СтруктураНастройки) = Тип("Структура")
		И СтруктураНастройки.Свойство("МассивПропущенныхVoucher")
		И СтруктураНастройки.МассивПропущенныхVoucher.Количество() > 0 Тогда
		
		СписокВаучеровСтрокой = "";
		Для каждого Voucher Из СтруктураНастройки.МассивПропущенныхVoucher Цикл
			СписокВаучеровСтрокой = СписокВаучеровСтрокой + Voucher + ";";
		КонецЦикла; 
		
		ТекстСообщения = "Список пропущенных ваучеров (" + СтруктураНастройки.МассивПропущенныхVoucher.Количество() + "): " + СписокВаучеровСтрокой;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Загрузка", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения); 
		
		времТекстСообщения = времТекстСообщения + Символы.ПС + ТекстСообщения + Символы.ПС;
		
	КонецЕсли; 
	
	Если ТипЗнч(СтруктураНастройки) = Тип("Структура")
		И СтруктураНастройки.Свойство("МассивПовторноЗагруженныхVoucher")
		И СтруктураНастройки.МассивПовторноЗагруженныхVoucher.Количество() > 0 Тогда
		
		СписокВаучеровСтрокой = "";
		Для каждого Voucher Из СтруктураНастройки.МассивПовторноЗагруженныхVoucher Цикл
			СписокВаучеровСтрокой = СписокВаучеровСтрокой + Voucher + ";";
		КонецЦикла; 
		
		ТекстСообщения = "Список повторно загруженных ваучеров (" + СтруктураНастройки.МассивПовторноЗагруженныхVoucher.Количество() + "): " + СписокВаучеровСтрокой;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Загрузка", УровеньЖурналаРегистрации.Информация,,,ТекстСообщения); 
		
		времТекстСообщения = времТекстСообщения + Символы.ПС + ТекстСообщения + Символы.ПС;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-26 (#4205)
	
	ОК_ОбщегоНазначения.ЗапуститьОтправкуСообщения(времСообщение_Заголовок, времТекстСообщения, времСообщение_Подпись, вхСписокПолучателей);
	
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		ТаблицаТиповДокументов = ТаблицаОшибок.Скопировать(,"DocType");
		ТаблицаТиповДокументов.Свернуть("DocType");
		ТаблицаТиповДокументов.Сортировать("DocType");
	КонецЕсли;
	
	Если ТаблицаОшибокБезИсключений.Количество() <> 0 Тогда
		ТаблицаТиповДокументовБезИсключений = ТаблицаОшибокБезИсключений.Скопировать(,"DocType");
		ТаблицаТиповДокументовБезИсключений.Свернуть("DocType");
		ТаблицаТиповДокументовБезИсключений.Сортировать("DocType");
	КонецЕсли;	
		
	Макет = ПолучитьМакет("Отчет");
	ТабДок = Новый ТабличныйДокумент;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ПериодЗагрузки 	= "Загрузка выполнялась с " + Формат(ДатаНачалаЗагрузки, "ДЛФ=DDT") + " по " + Формат(ДатаОкончанияЗагрузки, "ДЛФ=DDT");
	ОбластьЗаголовок.Параметры.ЗаПериод 		= "за период с " + Формат(СтруктураНастройки.ДатаНачала, "ДФ=dd.MM.yyyy")+ " по " + Формат(СтруктураНастройки.ДатаОкончания, "ДФ=dd.MM.yyyy");
	ОбластьЗаголовок.Параметры.Организация 		= Организация;
	
	Если СтруктураНастройки.ТипыОпераций.Количество() = 1 Тогда
		
		ТекстТипыКЗагрузке = "тип операций №" + СтруктураНастройки.ТипыОпераций[0].Код;
		
	Иначе
		
		ТекстТипыКЗагрузке = "";
		Для каждого ТипОп из СтруктураНастройки.ТипыОпераций Цикл
			
			Если НЕ ТекстТипыКЗагрузке = "" Тогда
				ТекстТипыКЗагрузке = ТекстТипыКЗагрузке + ", ";
			КонецЕсли;
			ТекстТипыКЗагрузке = ТекстТипыКЗагрузке + ТипОп.Код;
			
		КонецЦикла;
		ТекстТипыКЗагрузке = "типы операций: " + ТекстТипыКЗагрузке;
		
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.ТипыКЗагрузке = ТекстТипыКЗагрузке;
	
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьDocType 			= Макет.ПолучитьОбласть("DocType");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ОбластьПодвал1 			= Макет.ПолучитьОбласть("Подвал1");
	ОбластьШапкаТаблицы1 	= Макет.ПолучитьОбласть("ШапкаТаблицы1");
	ОбластьПодвалТаблицы1 	= Макет.ПолучитьОбласть("ПодвалТаблицы1");
	ОбластьDocType1 		= Макет.ПолучитьОбласть("DocType1");
	ОбластьДетальныхЗаписей1= Макет.ПолучитьОбласть("Детали1");
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьШапкаТаблицы1);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Если ТаблицаОшибокБезИсключений.Количество() <> 0 Тогда
		
		Для каждого СтрТипДокумента из ТаблицаТиповДокументовБезИсключений Цикл
			
			ОбластьDocType.Параметры.DocType = СтрТипДокумента.DocType;
			ТабДок.Вывести(ОбластьDocType, 0, , Ложь);

			Отбор = Новый Структура;
			Отбор.Вставить("DocType", СтрТипДокумента.DocType);
			ТаблицаДокументовПоТипуБезИсключений = ТаблицаОшибокБезИсключений.Скопировать(Отбор);
			
			Для каждого СтрДок из ТаблицаДокументовПоТипуБезИсключений Цикл
				
				ОбластьДетальныхЗаписей1.Параметры.Заполнить(СтрДок);
				ОбластьДетальныхЗаписей1.Параметры.Счет 		= СтрДок.СчетБезИсключений;
				ОбластьДетальныхЗаписей1.Параметры.ТипАналитики = СтрДок.ТипАналитикиБезИсключений;
				ОбластьДетальныхЗаписей1.Параметры.Значение 	= СтрДок.ЗначениеБезИсключений;
				
				ТабДок.Вывести(ОбластьДетальныхЗаписей1, 1);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы1);
	ТабДок.Вывести(ОбластьПодвал1);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		
		Для каждого СтрТипДокумента из ТаблицаТиповДокументов Цикл
			ОбластьDocType.Параметры.DocType = СтрТипДокумента.DocType;
			ТабДок.Вывести(ОбластьDocType, 0, , Ложь);

			Отбор = Новый Структура;
			Отбор.Вставить("DocType", СтрТипДокумента.DocType);
			ТаблицаДокументовПоТипу = ТаблицаОшибок.Скопировать(Отбор);
			
			Для каждого СтрДок из ТаблицаДокументовПоТипу Цикл
				ОбластьДетальныхЗаписей.Параметры.Заполнить(СтрДок);
				ТабДок.Вывести(ОбластьДетальныхЗаписей, 1);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
	
	Если ЗначениеЗаполнено(мПутьСохраненияОтчетовОбОшибках) Тогда
		Если Прав(мПутьСохраненияОтчетовОбОшибках, 1) <> "\" Тогда
			мПутьСохраненияОтчетовОбОшибках = мПутьСохраненияОтчетовОбОшибках + "\";
		КонецЕсли;
		ИмяФайла = "ErrorReport_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_" + СтрЗаменить(Формат(ТекущаяДата(), "ДЛФ=T"), ":","") + ".xls";
		ИмяФайлаДляСохраненияОтчетовОбОшибках = мПутьСохраненияОтчетовОбОшибках + ИмяФайла;
	Иначе
		//если вдруг у нас не заполнена настройка пути сохранения файла
		ИмяФайлаДляСохраненияОтчетовОбОшибках = ПолучитьИмяВременногоФайла("xls");
	КонецЕсли;
	
	Попытка
		ТабДок.Записать(ИмяФайлаДляСохраненияОтчетовОбОшибках, ТипФайлаТабличногоДокумента.XLS);
	Исключение
		// Если такого каталога нет, не хватает прав или ещё по какой-то причине файл не сохранен
		ИмяФайлаДляСохраненияОтчетовОбОшибках = ПолучитьИмяВременногоФайла("xls");
		ТабДок.Записать(ИмяФайлаДляСохраненияОтчетовОбОшибках, ТипФайлаТабличногоДокумента.XLS);
	КонецПопытки;

КонецФункции

Функция ОтправитьСообщение(СообщениеСтруктура, НастройкиДоставки, СтруктураПараметров, ПротоколОтправки = "") Экспорт
	
	флДействиеВыполнено = Ложь;			
	Отказ = Ложь;
		
	Если НЕ Отказ Тогда
		
		// сформируем почтовый профиль
		ИПП 					= Новый ИнтернетПочтовыйПрофиль;
		ИПП.АдресСервераSMTP 	= НастройкиДоставки.АдресSMTP;   
		ИПП.ПортSMTP 			= НастройкиДоставки.ПортSMTP;
		ИПП.ПользовательSMTP 	= НастройкиДоставки.ПользовательSMTP;
		ИПП.ПарольSMTP 			= НастройкиДоставки.ПарольSMTP;
		ИПП.ИспользоватьSSLSMTP = Истина;
		
		// Создадим сообщение 
		Сообщение = Новый ИнтернетПочтовоеСообщение; 
		Сообщение.Отправитель.Адрес = НастройкиДоставки.EMailАдресОтправителя;
		Сообщение.ОбратныйАдрес.Добавить(НастройкиДоставки.EMailАдресОтправителя);
		Сообщение.Получатели.Добавить(СтруктураПараметров.АдресПолучателя);  		
		Сообщение.Тема = СообщениеСтруктура.Заголовок; 
		Сообщение.Вложения.Добавить(СообщениеСтруктура.Вложения, "Отчет об ошибках"); 
		Сообщение.Тексты.Добавить(СообщениеСтруктура.Текст + Символы.ПС + СообщениеСтруктура.Подпись); 
		
		// Подключимся и отправим сформированное сообщение
		Попытка
			
			Почта = Новый ИнтернетПочта; 
			Почта.Подключиться(ИПП); 
			Почта.Послать(Сообщение); 
			флДействиеВыполнено = Истина;
			ПротоколОтправки    = "Сообщение отправлено по адресу "
					                   +СтруктураПараметров.АдресПолучателя
									+"  "
									+ТекущаяДата()
									+".";
			
		Исключение
			
			флДействиеВыполнено = Ложь;
			ПротоколОтправки    = "Сообщение  не удалось отправить по адресу "
					                   +СтруктураПараметров.АдресПолучателя
									+"  "
									+ТекущаяДата()
									+" по причине "
									+ОписаниеОшибки()
									+".";
			
			
		КонецПопытки;
		
		Почта.Отключиться(); 
		
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ОтправкаСообщения", УровеньЖурналаРегистрации.Информация,,,ПротоколОтправки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПротоколОтправки);

	Возврат флДействиеВыполнено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////
// Сопоставление
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

Процедура Сопоставление(ДатаНачала = Неопределено, ДатаОкончания = Неопределено, Аналитика="", ТипыОпераций = Неопределено) Экспорт
	
	#Если Клиент Тогда
		Если ДатаНачала <> Неопределено И Граница <> Неопределено Тогда
			Если ДатаНачала < Граница Тогда
				Сообщение = "Выбранный период частично или полностью находится в закрытом периоде, выберите корректный период.";
				ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Сопоставление", УровеньЖурналаРегистрации.Информация,,,ПротоколОтправки);
				Предупреждение(Сообщение);
				//Возврат;
			КонецЕсли;	
		КонецЕсли;
	#КонецЕсли 

	// проверим поступившие параметры
	Если ДатаНачала = Неопределено
		ИЛИ ТипЗнч(ДатаНачала) <> Тип("Дата")
		ИЛИ ДатаОкончания = Неопределено
		ИЛИ ТипЗнч(ДатаОкончания) <> Тип("Дата")
		ИЛИ ДатаНачала > ДатаОкончания 
		ИЛИ ТипыОпераций = Неопределено
		ИЛИ ТипЗнч(ТипыОпераций) <> Тип("Массив")
		ИЛИ ТипЗнч(Аналитика) <> Тип("Строка") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСубконтоАксапта = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта 12", "Количество субконто Аксапта", 6);
	ТекстЗапроса_АналитикаДокумента					= "";
	ТекстЗапроса_АналитикаДокументаОтбор			= "";
	ТекстЗапроса_СопоставлениеАналитик				= "";
	ТекстЗапроса_СопоставлениеАналитикСоединение	= "";
	ТекстЗапроса_НовоеСопоставление					= "";
	ТекстЗапроса_НовоеСопоставлениеОтбор			= "";
	
	Для Инд = 1 По КоличествоСубконтоАксапта Цикл
		
		ТекстЗапроса_АналитикаДокумента = ТекстЗапроса_АналитикаДокумента + " 
			|	Документы.СубконтоАксаптаДтN КАК СубконтоАксаптаДтN,
			|	Документы.Субконто1СДтN КАК Субконто1СДтN,
			|	Документы.СубконтоАксаптаКтN КАК СубконтоАксаптаКтN,
			|	Документы.Субконто1СКтN КАК Субконто1СКтN,";
		
		ТекстЗапроса_АналитикаДокументаОтбор = ТекстЗапроса_АналитикаДокументаОтбор + 
			?(ТекстЗапроса_АналитикаДокументаОтбор = "", 
			"
			|		Документы.СубконтоАксаптаДтN В (&СубконтоАксапта)
			|			ИЛИ Документы.СубконтоАксаптаКтN В (&СубконтоАксапта)"
		    ,
			"
			|			ИЛИ Документы.СубконтоАксаптаДтN В (&СубконтоАксапта)
			|			ИЛИ Документы.СубконтоАксаптаКтN В (&СубконтоАксапта)"
			);
			
		ТекстЗапроса_СопоставлениеАналитик = ТекстЗапроса_СопоставлениеАналитик + "
			|	СА_ДтN.Аналитика1С КАК СА_ДтN,
			|	СА_КтN.Аналитика1С КАК СА_КтN,";
		
		ТекстЗапроса_СопоставлениеАналитикСоединение = ТекстЗапроса_СопоставлениеАналитикСоединение + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитикиАксапты12 КАК СА_ДтN
			|		ПО Документы.СубконтоАксаптаДтN = СА_ДтN.КодАналитикиАксапты
			|			И Документы.СчетДтВерхний = СА_ДтN.СчетАксапты
			|			И Документы.Организация = СА_ДтN.Организация
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитикиАксапты12 КАК СА_КтN
			|		ПО Документы.СубконтоАксаптаКтN = СА_КтN.КодАналитикиАксапты
			|			И Документы.СчетКтВерхний = СА_КтN.СчетАксапты
			|			И Документы.Организация = СА_КтN.Организация";
		
		ТекстЗапроса_НовоеСопоставление = ТекстЗапроса_НовоеСопоставление + "
			|	НовоеСопоставление.СубконтоАксаптаДтN КАК СубконтоАксаптаДтN,
			|	НовоеСопоставление.Субконто1СДтN КАК Субконто1СДтN,
			|	НовоеСопоставление.СА_ДтN КАК СА_ДтN,
			|	НовоеСопоставление.СубконтоАксаптаКтN КАК СубконтоАксаптаКтN,
			|	НовоеСопоставление.Субконто1СКтN КАК Субконто1СКтN,
			|	НовоеСопоставление.СА_КтN КАК СА_КтN,";
		
		ТекстЗапроса_НовоеСопоставлениеОтбор = ТекстЗапроса_НовоеСопоставлениеОтбор + 
			?(ТекстЗапроса_НовоеСопоставлениеОтбор = "", 
			"
			|		НовоеСопоставление.Субконто1СДтN <> НовоеСопоставление.СА_ДтN
			|			ИЛИ НовоеСопоставление.Субконто1СКтN <> НовоеСопоставление.СА_КтN"
		    ,
			"
			|			ИЛИ НовоеСопоставление.Субконто1СДтN <> НовоеСопоставление.СА_ДтN
			|			ИЛИ НовоеСопоставление.Субконто1СКтN <> НовоеСопоставление.СА_КтN"
			);
			
		ТекстЗапроса_АналитикаДокумента					= СтрЗаменить(ТекстЗапроса_АналитикаДокумента, 				"N", Строка(Инд));
		ТекстЗапроса_АналитикаДокументаОтбор			= СтрЗаменить(ТекстЗапроса_АналитикаДокументаОтбор, 		"N", Строка(Инд));
		ТекстЗапроса_СопоставлениеАналитик				= СтрЗаменить(ТекстЗапроса_СопоставлениеАналитик, 			"N", Строка(Инд));
		ТекстЗапроса_СопоставлениеАналитикСоединение	= СтрЗаменить(ТекстЗапроса_СопоставлениеАналитикСоединение, "N", Строка(Инд));
		ТекстЗапроса_НовоеСопоставление					= СтрЗаменить(ТекстЗапроса_НовоеСопоставление,				"N", Строка(Инд));
		ТекстЗапроса_НовоеСопоставлениеОтбор			= СтрЗаменить(ТекстЗапроса_НовоеСопоставлениеОтбор,			"N", Строка(Инд));
		
	КонецЦикла;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Если ТипыОпераций.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТипДокумента", ТипыОпераций);
		Запрос.УстановитьПараметр("НетОтбораПоТипуДокумента", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ТипДокумента", Неопределено);
		Запрос.УстановитьПараметр("НетОтбораПоТипуДокумента", Истина);
	КонецЕсли;
	Если СтрДлина(Аналитика) > 0 Тогда
		СубконтоАксапта = Новый Массив;
		СубконтоАксапта.Добавить(Аналитика);
		Запрос.УстановитьПараметр("СубконтоАксапта", СубконтоАксапта);
		Запрос.УстановитьПараметр("НетОтбораПоАналитике", Ложь);
	Иначе
		Запрос.УстановитьПараметр("СубконтоАксапта", Неопределено);
		Запрос.УстановитьПараметр("НетОтбораПоАналитике", Истина);
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.НомерСтроки КАК НомерСтроки,
		|	Документы.СчетДт КАК СчетДт,
		|	Документы.СчетКт КАК СчетКт,"
		+ ТекстЗапроса_АналитикаДокумента
		+ "
		|	Документы.Сумма КАК Сумма,
		|	ПОДСТРОКА(Документы.СчетДт, 1, 2) КАК СчетДтВерхний,
		|	ПОДСТРОКА(Документы.СчетКт, 1, 2) КАК СчетКтВерхний,
		|	Документы.Ссылка.Организация КАК Организация
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	Документ.бит_ок_ОперацияАксапты12.ОборотыАксапты КАК Документы
		|ГДЕ
		|	Документы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (Документы.Ссылка.ТипДокумента.Код В (&ТипДокумента)
		|			ИЛИ &НетОтбораПоТипуДокумента)
		|	И ("
		+ ТекстЗапроса_АналитикаДокументаОтбор
		+ "
		|			ИЛИ &НетОтбораПоАналитике)
		|	И Документы.Ссылка.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.НомерСтроки КАК НомерСтроки,
		|	Документы.СчетДт КАК СчетДт,
		|	Документы.СчетКт КАК СчетКт,"
		+ ТекстЗапроса_АналитикаДокумента
		+ ТекстЗапроса_СопоставлениеАналитик
		+ "
		|	Документы.Сумма КАК Сумма
		|ПОМЕСТИТЬ НовоеСопоставление
		|ИЗ
		|	Документы КАК Документы"
		+ ТекстЗапроса_СопоставлениеАналитикСоединение
		+ "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовоеСопоставление.Ссылка КАК Ссылка,
		|	НовоеСопоставление.НомерСтроки КАК НомерСтроки,
		|	НовоеСопоставление.СчетДт КАК СчетДт,
		|	НовоеСопоставление.СчетКт КАК СчетКт,"
		+ ТекстЗапроса_НовоеСопоставление
		+ "
		|	НовоеСопоставление.Сумма КАК Сумма
		|ИЗ
		|	НовоеСопоставление КАК НовоеСопоставление
		|ГДЕ
		|	("
		+ ТекстЗапроса_НовоеСопоставлениеОтбор
		+ "
		|	)
		|ИТОГИ ПО
		|	Ссылка";
					
	ОповеститьПользователя("Выполняется запрос для получения документов необходимых для пересопоставления аналитики");
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаДокументКоличество = ВыборкаДокумент.Количество();
	ОбрабатываетсяДокумент = 0;
	// Время старта нужно для примерного вычисления скорости
	ДСтарт = ТекущаяДата();
	
	МассивНеСопоставленных = ПолучитьНеСопоставленные().ВыгрузитьКолонку("Значение");
	КолДок = 0;
	СписокДокументов = "";
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		ЕстьНеСопоставленные 	= Ложь;
		ОбрабатываетсяДокумент 	= ОбрабатываетсяДокумент + 1;
		Док 					= ВыборкаДокумент.Ссылка.ПолучитьОбъект();
		
		Выборка = ВыборкаДокумент.Выбрать();
		Пока Выборка.Следующий() Цикл
			Строка = Док.ОборотыАксапты.Получить(Выборка.НомерСтроки-1);
			
			МассивСубконто = Новый Массив;
			Для Инд = 1 По КоличествоСубконтоАксапта Цикл
				
				Строка["Субконто1СДт" + Инд] = ?(Выборка["СА_Дт" + Инд] = Null ИЛИ НЕ ЗначениеЗаполнено(Строка["Субконто1СДт" + Инд]), Строка["Субконто1СДт" + Инд], Выборка["СА_Дт" + Инд]);
				Строка["Субконто1СКт" + Инд] = ?(Выборка["СА_Кт" + Инд] = Null ИЛИ НЕ ЗначениеЗаполнено(Строка["Субконто1СКт" + Инд]), Строка["Субконто1СКт" + Инд], Выборка["СА_Кт" + Инд]);
				
				МассивСубконто.Добавить(Строка["Субконто1СДт" + Инд]);
				МассивСубконто.Добавить(Строка["Субконто1СКт" + Инд]);
				
			КонецЦикла;
			
			Для каждого Эл из МассивСубконто Цикл
				НайдЭл = МассивНеСопоставленных.Найти(Эл);
				Если НайдЭл <> Неопределено Тогда
					ЕстьНеСопоставленные = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Док.ЗагруженоСОшибкой = ЕстьНеСопоставленные;
		
		// запись документа
		Попытка
			#Если Клиент Тогда 
				Если ПрерываниеПоCtrlBreak Тогда
					ОбработкаПрерыванияПользователя();
				КонецЕсли;
			#КонецЕсли 
			
			// вывести информацию
			ВремяРаботы = ТекущаяДата() - ДСтарт;
			Обработано = ОбрабатываетсяДокумент;
			Скорость = Обработано / ?(ВремяРаботы = 0, 1, ВремяРаботы);
			ОповеститьПользователя("Записываю документ " + ОбрабатываетсяДокумент + " из " + ВыборкаДокументКоличество + " - " + Формат(Скорость, "ЧДЦ=2") + " документов/с");
			
			// запись документа
			Док.Записать(РежимЗаписиДокумента.Проведение);
			КолДОк = КолДок + 1;
			СписокДокументов = СписокДокументов + Символы.ПС + Док.Ссылка;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Сопоставление", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
			СообщитьПользователю("!!!");
			
		КонецПопытки;
		
	КонецЦикла;
	
	Сообщение = "Сопоставлено документов - " + КолДок;
	Сообщение = Сообщение + СписокДокументов;
	ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Сопоставление", УровеньЖурналаРегистрации.Информация,,,Сообщение);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение); 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
// Загрузка свернутых оборотов
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

Процедура ЗагрузкаСвернутых(ДатаНачала, ДатаОкончания, ТипыОперацийКВыгрузке) Экспорт
	
	#Если Клиент Тогда
		Если ДатаНачала <> Неопределено И Граница <> Неопределено Тогда
			Если ДатаНачала < Граница Тогда
				Предупреждение("Выбранный период частично или полностью находится в закрытом периоде, выберите корректный период.");
				//Возврат;
			КонецЕсли;	
		КонецЕсли;
	#КонецЕсли 
	
	// проверим поступившие параметры
	Если ДатаНачала = Неопределено
		ИЛИ ТипЗнч(ДатаНачала) <> Тип("Дата")
		ИЛИ ДатаОкончания = Неопределено
		ИЛИ ТипЗнч(ДатаОкончания) <> Тип("Дата")
		ИЛИ ТипыОперацийКВыгрузке = Неопределено
		ИЛИ ТипЗнч(ТипыОперацийКВыгрузке) <> Тип("Массив")
		ИЛИ ТипыОперацийКВыгрузке.Количество() = 0
		ИЛИ ДатаНачала > ДатаОкончания Тогда
		Возврат;
	КонецЕсли;

	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ДатаНачала", ДатаНачала);
	СтруктураНастройки.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураНастройки.Вставить("ТипыОпераций", ТипыОперацийКВыгрузке);
	
	// Подключение к базе
	Если Не ПодключениеКБазе() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьЗаписатьДанные(СтруктураНастройки);
	
КонецПроцедуры

Функция ПолучитьЗаписатьДанные(СтруктураНастройки)

	// условие по периоду
	ДатаНачала =  Формат(СтруктураНастройки.ДатаНачала, "ДФ=""ггггММдд""");
	ДатаОкончания = Формат(СтруктураНастройки.ДатаОкончания, "ДФ=ггггММдд");

	УсловиеПоПериоду = "'" + ДатаНачала + "' and '" + ДатаОкончания + "'";

	// блок условий по типам операций
	ТипыОпераций = СтруктураНастройки.ТипыОпераций;
	Если ТипыОпераций.Количество() = 1 Тогда
		УсловияПоТипуДокумента = "'" + ТипыОпераций[0].Код + "'";
	Иначе
		УсловияПоТипуДокумента = "";
		Для каждого ТипОп из ТипыОпераций Цикл
			Если НЕ УсловияПоТипуДокумента = "" Тогда
				УсловияПоТипуДокумента = УсловияПоТипуДокумента + ", ";
			КонецЕсли;
			УсловияПоТипуДокумента = УсловияПоТипуДокумента + "'" + ТипОп.Код + "'";
		КонецЦикла;
	КонецЕсли;
	
	//ТипыСЗагрузкойОбъектов = "'270', '450', '280'";

	СтруктураТекстаПолученияОбъектаСтроительства = ПолучитьТекстВыбораОбъектаСтроительстваПоСчетамАксапты();
	
	//Формирование запроса
	ЗапросАДО.CommandText = 
		"SELECT
		|	Headers.DocDate,
		|	Headers.DocType,
		|	Trans.AccD,
		|	Trans.AccC,
		|	SUM(Trans.Amount) as Amount,
		|	" + СтруктураТекстаПолученияОбъектаСтроительства.DimC + " AS DimC1,
		|	" + СтруктураТекстаПолученияОбъектаСтроительства.DimD + " AS DimD1
		|FROM
		|		(SELECT distinct
		|			uh.Voucher,
		|			uh.ReferVoucherId,
		|			uh.DocDate,
		|			max(uh.RecNo) as RecNo
		|		FROM ["+БазаДанных+"].[dbo].[ExportDataTo1cDocHeader] uh 
		|		where
		|			uh.DocDate between " + УсловиеПоПериоду + "
		|			and uh.DocType in (" + УсловияПоТипуДокумента + ")
		|		group by
		|			Voucher,
		|			ReferVoucherId,
		|			DocDate) As UniqHeaders
		|	LEFT OUTER JOIN ["+БазаДанных+"].[dbo].[ExportDataTo1cDocHeader] AS Headers
		|	ON	UniqHeaders.RecNo = Headers.RecNo and
		|		UniqHeaders.Voucher = Headers.Voucher and
		|		UniqHeaders.ReferVoucherId = Headers.ReferVoucherId and
		|		UniqHeaders.DocDate = Headers.DocDate 
		|	LEFT OUTER JOIN ["+БазаДанных+"].[dbo].[ExportDataTo1CDocTrans] AS Trans
		|	ON	UniqHeaders.RecNo = Trans.RefRecNo and
		|		UniqHeaders.Voucher = Trans.Voucher
		|group by
		|	Headers.DocDate,
		|	Headers.DocType,
		|	Trans.AccD,
		|	Trans.AccC, 
		|	" + СтруктураТекстаПолученияОбъектаСтроительства.DimC + ",
		|	" + СтруктураТекстаПолученияОбъектаСтроительства.DimD + "
		|	
		|ORDER BY Headers.DocDate, Headers.DocType
		|";

	ОповеститьПользователя("Выполняется запрос к экспортным таблицам");
	Выборка = ЗапросАДО.Execute(); 

	//Описание типов
	ТипЧисло 	= Новый ОписаниеТипов("Число"); 
	ТипСтрока 	= Новый ОписаниеТипов("Строка");
	ТипСтрока3 	= Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3));
	ТипСтрока20 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20));
	ТипДата 	= Новый ОписаниеТипов("Дата");

	//Формирование таблицы для хранения и обработки результата данных
	ТабОбороты = Новый ТаблицаЗначений;
	ТабОбороты.Колонки.Добавить("DocDate",	ТипДата);
	ТабОбороты.Колонки.Добавить("DocType", 	ТипСтрока3);
	ТабОбороты.Колонки.Добавить("AccD", 	ТипСтрока20);
	ТабОбороты.Колонки.Добавить("AccC", 	ТипСтрока20);
	ТабОбороты.Колонки.Добавить("Amount", 	ТипЧисло);
	ТабОбороты.Колонки.Добавить("DimC1", 	ТипСтрока20);
	ТабОбороты.Колонки.Добавить("DimD1", 	ТипСтрока20);

	Пока Не Выборка.EOF() Цикл 		
		НовСтр = ТабОбороты.Добавить();
		Для каждого Колонка из ТабОбороты.Колонки Цикл
			Имя = Колонка.Имя;
			НовСтр[Имя] = Выборка.Fields(Имя).Value;
		КонецЦикла;
		Выборка.MoveNext(); 
	КонецЦикла;

	// Сопоставим типы операций 1С и найдём соответствующие документы
	ТабДатаТип = ТабОбороты.Скопировать(, "DocDate, DocType");
	ТабДатаТип.Свернуть("DocDate, DocType");

	ТабДатаТип = СопоставитьТипНайтиДокументы(ТабДатаТип);
	
	// Время старта нужно для примерного вычисления скорости
	ДСтарт = ТекущаяДата();
	ДокументовВПорции = 0;
	
	Для каждого Стр из ТабДатаТип Цикл
		
		Если ДокументовВПорции >= ПорцияТранзакции Тогда 
			ЗафиксироватьТранзакцию();
			ДокументовВПорции = 0;
		КонецЕсли;
		
		Если ДокументовВПорции = 0 тогда 
			
			НачатьТранзакцию();
			
			БлокировкаРН 	= Новый БлокировкаДанных;
			ОбъектРН 		= БлокировкаРН.Добавить("РегистрНакопления.бит_ок_ОборотыАксапты12");
			ОбъектРН.Режим 	= РежимБлокировкиДанных.Исключительный;
			ОбъектРН.УстановитьЗначение("Организация", Организация);
			
			БлокировкаРН.Заблокировать();
			
		КонецЕсли;
		
		ДокументовВПорции = ДокументовВПорции + 1;
			
		Если Стр.ОперацияАксапты = Null Тогда
			
			Док = Документы.бит_ок_ОперацияАксапты12.СоздатьДокумент();
			
		Иначе
			
			Док = Стр.ОперацияАксапты.ПолучитьОбъект();
			
			Док.ОборотыАксапты.Очистить();
			Док.Движения.Хозрасчетный.Очистить();
			Док.Движения.бит_Дополнительный_2.Очистить();  							
			
			бтСсылкаНаДокументОперация = Документы.бит_ок_ОперацияАксапты12.ПолучитьСвязаннуюОперациюБУХ(Док.Ссылка);
			
			Если ЗначениеЗаполнено(бтСсылкаНаДокументОперация) Тогда
				
				Док.бтИсправление = Ложь;
				ДокументКорректировки = бтСсылкаНаДокументОперация.ПолучитьОбъект();
				ДокументКорректировки.ПометкаУдаления = Истина;
				
				ДвиженияОперация = ДокументКорректировки.Движения.Хозрасчетный;
				ДвиженияОперация.Очистить();
				ДвиженияОперация.Записать();
				
				ДокументКорректировки.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;

		КонецЕсли;
				
        // заполним шапку
        Док.Дата 				= Стр.DocDate;
		Док.Организация 		= Организация;
		Док.ТипДокумента		= Стр.ТипОперации;
		Док.DocType 			= Стр.DocType;
		Док.ДатаЗагрузки		= ТекущаяДата();
		Док.Комментарий 		= "";
		Док.ок_СвернутыеОбороты = Истина;
		
        ОборотыАксапты = СформироватьТаблицуОборотов();
		
		Отбор = Новый Структура();
		Отбор.Вставить("DocType", Стр.DocType);
		Отбор.Вставить("DocDate", Стр.DocDate);
		
		Строки = ТабОбороты.НайтиСтроки(Отбор);
		Для каждого Строка из Строки Цикл

			НовСтр = ОборотыАксапты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Строка);
			
		КонецЦикла;
		
		//Сопоставление свернутых
		
		// выборка аналитики
		ОборотыАксапты = ПроставитьТипыАналитики(ОборотыАксапты);
	
		// сопоставление аналитики
		СопоставленнаяАналитика = СопоставлениеАналитики(ОборотыАксапты);
	
		// проставление сопоставления
		Данные = ЗаполнитьСопоставленнуюАналитику(ОборотыАксапты, СопоставленнаяАналитика);
		
		ЗагруженоСОшибкой = ПроставитьНесопоставленныеАналитики(Данные);
		Док.ЗагруженоСОшибкой = Док.ЗагруженоСОшибкой ИЛИ ЗагруженоСОшибкой;
		
		//Заполнение ТЧ документа
		Док.ОборотыАксапты.Загрузить(Данные);

		// запись документа
		Попытка
			
			#Если Клиент Тогда 
				Если ПрерываниеПоCtrlBreak Тогда
					ОбработкаПрерыванияПользователя();
				КонецЕсли;
			#КонецЕсли 
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-05 (#4157)
			//// вывести информацию
			//ВремяРаботы = ТекущаяДата() - ДСтарт;
			//Обработано 	= ТабДатаТип.Индекс(Стр);
			//Скорость 	= Обработано / ?(ВремяРаботы = 0, 1, ВремяРаботы);
			//ОповеститьПользователя("Записываю документ " + ТабДатаТип.Индекс(Стр) + " из " + ТабДатаТип.Количество() + " - " + Формат(Скорость, "ЧДЦ=2") + " документов/с");
			//
			//// запись документа
			//Док.Записать(РежимЗаписиДокумента.Проведение);
			
			// запись документа
			Док.Записать(РежимЗаписиДокумента.Проведение);
			
			// вывести информацию
			ВремяРаботы = ТекущаяДата() - ДСтарт;
			Обработано 	= ТабДатаТип.Индекс(Стр);
			Скорость 	= Обработано / ?(ВремяРаботы = 0, 1, ВремяРаботы);
			ОповеститьПользователя("Записан документ " + ТабДатаТип.Индекс(Стр) + " из " + ТабДатаТип.Количество() + " - " + Формат(Скорость, "ЧДЦ=2") + " документов/с");
			
			ТекстСообщения = "(DocDate - """ + Стр.DocDate + """, DocType - """ + Стр.DocType + """) Записан документ " + (ТабДатаТип.Индекс(Стр) + 1) + " из " + ТабДатаТип.Количество() + " - " + Док.Ссылка;
			
			ОповеститьПользователя(ТекстСообщения);
			ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ЗагрузкаСвернутых", УровеньЖурналаРегистрации.Информация,, Док.Ссылка, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Док.Ссылка);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-05 (#4157)
			
		Исключение
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-05-05 (#4157)
			//ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12. ЗагрузкаСвернутых", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
			//СообщитьПользователю("!!!");
			ТекстСообщения = "(DocDate - """ + Стр.DocDate + """, DocType - """ + Стр.DocType + """) Ошибка: " + ОписаниеОшибки();
			
			ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.ЗагрузкаСвернутых", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-05-05 (#4157)
		КонецПопытки;
		
	КонецЦикла;	
	
	Если ТранзакцияАктивна() Тогда 
		ЗафиксироватьТранзакцию();
	КонецЕсли;
		
КонецФункции

Функция СопоставитьТипНайтиДокументы(ТабДатаТип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабДатаТип", ТабДатаТип);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабДатаТип.DocType КАК DocType,
		|	ТабДатаТип.DocDate КАК DocDate
		|ПОМЕСТИТЬ ТабДатаТип
		|ИЗ
		|	&ТабДатаТип КАК ТабДатаТип
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабДатаТип.DocType КАК DocType,
		|	ТабДатаТип.DocDate КАК DocDate,
		|	бит_ок_ТипыОперацийАксапты.Ссылка КАК ТипОперации
		|ПОМЕСТИТЬ ТабДатаТипОперации
		|ИЗ
		|	ТабДатаТип КАК ТабДатаТип
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
		|		ПО ТабДатаТип.DocType = бит_ок_ТипыОперацийАксапты.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабДатаТипОперации.DocType КАК DocType,
		|	ТабДатаТипОперации.DocDate КАК DocDate,
		|	ТабДатаТипОперации.ТипОперации КАК ТипОперации,
		|	бит_ок_ОперацияАксапты.Ссылка КАК ОперацияАксапты
		|ИЗ
		|	ТабДатаТипОперации КАК ТабДатаТипОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ок_ОперацияАксапты12 КАК бит_ок_ОперацияАксапты
		|		ПО ТабДатаТипОперации.ТипОперации = бит_ок_ОперацияАксапты.ТипДокумента
		|			И (НАЧАЛОПЕРИОДА(ТабДатаТипОперации.DocDate, ДЕНЬ) = НАЧАЛОПЕРИОДА(бит_ок_ОперацияАксапты.Дата, ДЕНЬ))
		|			И (бит_ок_ОперацияАксапты.Организация = &Организация)
		|ГДЕ
		|	(бит_ок_ОперацияАксапты.ПометкаУдаления = ЛОЖЬ
		|			ИЛИ бит_ок_ОперацияАксапты.Ссылка ЕСТЬ NULL)";

	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции

/////////////////////////////////////
// Процедуры для соединения с SQL
/////////////////////////////////////

//Создать объект ADODB.Connection 
//Возврат: 
//   OLE - объект соединение или Неопределено 
Функция СоздатьСоединениеАДО() Экспорт 
	
	Перем СоединениеАДО; 
	
	Попытка 
		СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	Исключение 
		#Если Клиент Тогда 
			Сообщить("Не удалось создать объект ""ADODB.Connection""", СтатусСообщения.Важное); 
		#КонецЕсли 
		Возврат Неопределено; 
	КонецПопытки; 
	
	Возврат СоединениеАДО;
   
КонецФункции

//Создать объект ADODB.Command 
//Возврат: 
//   OLE - объект запрос или Неопределено 
Функция СоздатьЗапросАДО() Экспорт 
	
	Перем ЗапросАДО; 
	
	Попытка 
		ЗапросАДО = Новый COMОбъект("ADODB.Command");
		ЗапросАДО.CommandTimeout = ?( (НЕ ЗначениеЗаполнено(мТаймаут)) ИЛИ мТаймаут=0, 600, мТаймаут);
	Исключение 
		#Если Клиент Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать объект ""ADODB.Command""");
		#КонецЕсли 
		Возврат Неопределено; 
	КонецПопытки; 
	
	Возврат ЗапросАДО; 
	
КонецФункции

//СоединениеАДО (OLE) - соединение 
//ЗапросАДО (OLE)      - запрос 
//Возврат: 
//   Булево - удачно, нет 
Функция ПодключитьсяАДОкБД(СоединениеАДО, ЗапросАДО)
	
	СтрокаСоединения = "driver={SQL Server};server="+Адрес+";uid="+Пользователь+";pwd="+Пароль+";Database="+БазаДанных; 
	
	Попытка
		СоединениеАДО.ConnectionTimeOut = ?( (НЕ ЗначениеЗаполнено(мТаймаут)) ИЛИ мТаймаут=0, 600, мТаймаут);
		СоединениеАДО.Open(СтрокаСоединения); 
	Исключение 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось установить соединение с базой данных"); 
		Возврат Ложь; 
	КонецПопытки; 
	
	ЗапросАДО.ActiveConnection = СоединениеАДО; 
	
	Возврат Истина; 
	
КонецФункции

/////////////////////////////////////
// Сервисные процедуры
/////////////////////////////////////

Функция ОповеститьПользователя(Текст)
	
	#Если Клиент Тогда 
		Состояние(Текст);
	#КонецЕсли 
	
КонецФункции

Функция СообщитьПользователю(Текст)
	
	#Если Клиент Тогда 
		Сообщить(Текст);
	#КонецЕсли 
		
КонецФункции

Процедура ЗаполнитьНастройки() Экспорт
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"); 
	Если Организация = Организация_Окей Тогда
		ЗаполнитьНастройкиОКЕЙ();
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНастройкиОКЕЙ() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""ПараметрыЗагрузкиАксапты12"" КАК Группа,
		|	""Начало Периода"" КАК ИмяНастройки,
		|	ДАТАВРЕМЯ(2011, 1, 1) КАК Значение
		|ПОМЕСТИТЬ ВТ_ПроверяемыеНастройки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ПараметрыЗагрузкиАксапты12"",
		|	""Конец Периода"",
		|	ДАТАВРЕМЯ(2011, 12, 31)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ПараметрыЗагрузкиАксапты12"",
		|	""Порция"",
		|	""5000""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НастройкиРабочейБазы"",
		|	""РБСтрокаСоединения"",
		|	""Srvr=""""1c8-app1"""";Ref=""""EIS"""";""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НастройкиРабочейБазы"",
		|	""РБАдресСервера"",
		|	""New-sql""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Группа,
		|	ИмяНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПроверяемыеНастройки.Группа КАК Группа,
		|	ВТ_ПроверяемыеНастройки.ИмяНастройки КАК ИмяНастройки,
		|	ВТ_ПроверяемыеНастройки.Значение КАК Значение
		|ИЗ
		|	ВТ_ПроверяемыеНастройки КАК ВТ_ПроверяемыеНастройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
		|		ПО ВТ_ПроверяемыеНастройки.Группа = бит_ок_НастройкиМеханизмаИмпортаДанных.Группа
		|			И ВТ_ПроверяемыеНастройки.ИмяНастройки = бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки
		|ГДЕ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки ЕСТЬ NULL";
					
	ТЗНастройки = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаНастроек из ТЗНастройки Цикл 
		
		ДобавляемаяНастройка				= РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.СоздатьМенеджерЗаписи();
		ДобавляемаяНастройка.Группа			= СтрокаНастроек.Группа;
		ДобавляемаяНастройка.ИмяНастройки	= СтрокаНастроек.ИмяНастройки;
		ДобавляемаяНастройка.Значение		= СтрокаНастроек.Значение;
		ДобавляемаяНастройка.Записать(Истина);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

	// Параметры подключения и почтовые параметры
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки КАК ИмяНастройки,
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
		|ГДЕ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа В(&Группы)";
					
	Группы	= Новый Массив;
	Группы.Добавить("ПараметрыСоединенияSQLАксапты12");
	Группы.Добавить("ПочтовыеПараметры");
	Группы.Добавить("Организации");
	Группы.Добавить("Предопределенные группы");
	Группы.Добавить("ПараметрыЗагрузкиАксапты12");
	Группы.Добавить("НастройкиРабочейБазы");
	Запрос.УстановитьПараметр("Группы", Группы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИмяНастройки = "ИмяПользователя" Тогда
			Пользователь = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Пароль" Тогда
			Пароль = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "АдресСервера" Тогда
			Адрес = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "БазаДанных" Тогда
			БазаДанных = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПутьСохраненияОтчетовОбОшибках" Тогда
			мПутьСохраненияОтчетовОбОшибках = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Таймаут" Тогда
			мТаймаут = Выборка.Значение;
		//Почтовые параметры
		ИначеЕсли Выборка.ИмяНастройки = "СерверSMTP" Тогда
			мСерверSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПортSMTP" Тогда
			мПортSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПользовательSMTP" Тогда
			мПользовательSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПарольSMTP" Тогда
			мПарольSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Отправитель" Тогда
			мОтправитель = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Кому" Тогда
			мКому = Выборка.Значение;
		// Организации
		ИначеЕсли Выборка.ИмяНастройки = "Организация ОКЕЙ" Тогда
			Организация = Выборка.Значение;
		// Предопределенные группы
		ИначеЕсли Выборка.ИмяНастройки = "Группа контрагентов Поставщики" Тогда
			мПоставщики = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Группа контрагентов Покупатели" Тогда
			мПокупатели = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Группа для загрузки договоров" Тогда
			мГруппаПоОрганизации = Выборка.Значение;
		// Параметры загрузки из аксапты
		ИначеЕсли Выборка.ИмяНастройки = "Порция" Тогда
			Порция 		= Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Конец Периода" Тогда
			КонПериода 	= Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Начало Периода" Тогда
			НачПериода 	= Выборка.Значение;
		//Парамеры рабочей базы 
		ИначеЕсли Выборка.ИмяНастройки = "РБСтрокаСоединения" Тогда
			РБСтрокаСоединения 	= Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "РБАдресСервера" Тогда
			РБАдресСервера 	= Выборка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получить Границу запрета изменения данных
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГраницыЗапретаИзмененияДанных.ДатаЗапрета КАК ГраницаЗапретаИзменений
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ГраницыЗапретаИзмененияДанных
		|ГДЕ
		|	ГраницыЗапретаИзмененияДанных.Объект = &Организация
		|	И ГраницыЗапретаИзмененияДанных.Раздел = &Раздел";
	
	Запрос.УстановитьПараметр("Раздел", ДатыЗапретаИзмененияБП.РазделБухгалтерскийУчет().Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ЗапросВыполнить = Запрос.Выполнить();
	Если ЗапросВыполнить.Пустой() Тогда
		Граница = Неопределено;
	Иначе
		Граница = Запрос.Выполнить().Выгрузить()[0].ГраницаЗапретаИзменений;
	КонецЕсли;
	
	// Если Групп поставщиков, покупателей нет или они не заполнена, то поискать по наименованию
	// Родитель - группа поставщики
	Если Не ЗначениеЗаполнено(мПоставщики) Тогда
		мПоставщики = Справочники.Контрагенты.НайтиПоНаименованию("Поставщики (Аксапта)", Истина);
	КонецЕсли;
	// Родитель - группа покупатели
	Если Не ЗначениеЗаполнено(мПокупатели) Тогда
		мПокупатели = Справочники.Контрагенты.НайтиПоНаименованию("Покупатели (Аксапта)", Истина);
	КонецЕсли;
	
	// Заполнить страницу загрузки и сопоставления
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ок_ТипыОперацийАксапты.Код КАК Значение,
		|	бит_ок_ТипыОперацийАксапты.Наименование КАК Представление,
		|	бит_ок_ТипыОперацийАксапты.СвернутыеОбороты КАК СвернутыеОбороты,
		|	ИСТИНА КАК Пометка
		|ИЗ
		|	Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
		|ГДЕ
		|	бит_ок_ТипыОперацийАксапты.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	бит_ок_ТипыОперацийАксапты.Код";
					
	Таб = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из Таб Цикл
		
		//Если Стр.СвернутыеОбороты Тогда  
		//Иначе 		
			ТипыОперацийСопоставление.Добавить(Стр.Значение, Стр.Значение + ". " + Стр.Представление, Стр.Пометка);
		//КонецЕсли;
		
	КонецЦикла;
		
	ПрерываниеПоCtrlBreak = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиОКЕЙ_Лоджистикс() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""ПараметрыЗагрузкиАксапты12"" КАК Группа,
		|	""Начало Периода"" КАК ИмяНастройки,
		|	ДАТАВРЕМЯ(2011, 1, 1) КАК Значение
		|ПОМЕСТИТЬ ВТ_ПроверяемыеНастройки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ПараметрыЗагрузкиАксапты12"",
		|	""Конец Периода"",
		|	ДАТАВРЕМЯ(2011, 12, 31)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ПараметрыЗагрузкиАксапты12"",
		|	""Порция"",
		|	""5000""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НастройкиРабочейБазы"",
		|	""РБСтрокаСоединения"",
		|	""Srvr=""""1c8-app1"""";Ref=""""EIS"""";""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НастройкиРабочейБазы"",
		|	""РБАдресСервера"",
		|	""New-sql""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Группа,
		|	ИмяНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПроверяемыеНастройки.Группа КАК Группа,
		|	ВТ_ПроверяемыеНастройки.ИмяНастройки КАК ИмяНастройки,
		|	ВТ_ПроверяемыеНастройки.Значение КАК Значение
		|ИЗ
		|	ВТ_ПроверяемыеНастройки КАК ВТ_ПроверяемыеНастройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
		|		ПО ВТ_ПроверяемыеНастройки.Группа = бит_ок_НастройкиМеханизмаИмпортаДанных.Группа
		|			И ВТ_ПроверяемыеНастройки.ИмяНастройки = бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки
		|ГДЕ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки ЕСТЬ NULL";
					
	ТЗНастройки = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Для Каждого СтрокаНастроек из ТЗНастройки Цикл 
		
		ДобавляемаяНастройка				= РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.СоздатьМенеджерЗаписи();
		ДобавляемаяНастройка.Группа			= СтрокаНастроек.Группа;
		ДобавляемаяНастройка.ИмяНастройки	= СтрокаНастроек.ИмяНастройки;
		ДобавляемаяНастройка.Значение		= СтрокаНастроек.Значение;
		ДобавляемаяНастройка.Записать(Истина);
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();

	// Параметры подключения и почтовые параметры
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки КАК ИмяНастройки,
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
		|ГДЕ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа В(&Группы)";
					
	Группы	= Новый Массив;
	Группы.Добавить("ПараметрыСоединенияSQLАксапты12");
	Группы.Добавить("ПочтовыеПараметры");
	Группы.Добавить("Организации");
	Группы.Добавить("Предопределенные группы");
	Группы.Добавить("ПараметрыЗагрузкиАксапты12");
	Группы.Добавить("НастройкиРабочейБазы");
	Запрос.УстановитьПараметр("Группы", Группы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИмяНастройки = "ИмяПользователя Лоджистикс" Тогда
			Пользователь = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Пароль Лоджистикс" Тогда
			Пароль = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "АдресСервера Лоджистикс" Тогда
			Адрес = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "БазаДанных Лоджистикс" Тогда
			БазаДанных = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПутьСохраненияОтчетовОбОшибках Лоджистикс" Тогда
			мПутьСохраненияОтчетовОбОшибках = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Таймаут Лоджистикс" Тогда
			мТаймаут = Выборка.Значение;
		//Почтовые параметры
		ИначеЕсли Выборка.ИмяНастройки = "СерверSMTP Лоджистикс" Тогда
			мСерверSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПортSMTP Лоджистикс" Тогда
			мПортSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПользовательSMTP Лоджистикс" Тогда
			мПользовательSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "ПарольSMTP Лоджистикс" Тогда
			мПарольSMTP = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Отправитель Лоджистикс" Тогда
			мОтправитель = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Кому Лоджистикс" Тогда
			мКому = Выборка.Значение;
		// Организации
		ИначеЕсли Выборка.ИмяНастройки = "Организация Лоджистикс" Тогда
			Организация = Выборка.Значение;
		// Предопределенные группы
		ИначеЕсли Выборка.ИмяНастройки = "Группа контрагентов Поставщики Лоджистикс" Тогда
			мПоставщики = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Группа контрагентов Покупатели Лоджистикс" Тогда
			мПокупатели = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Группа для загрузки договоров Лоджистикс" Тогда
			мГруппаПоОрганизации = Выборка.Значение;
		// Параметры загрузки из аксапты
		ИначеЕсли Выборка.ИмяНастройки = "Порция Лоджистикс" Тогда
			Порция 		= Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Конец Периода Лоджистикс" Тогда
			КонПериода 	= Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Начало Периода Лоджистикс" Тогда
			НачПериода 	= Выборка.Значение;
		//Парамеры рабочей базы 
		ИначеЕсли Выборка.ИмяНастройки = "РБСтрокаСоединения Лоджистикс" Тогда
			РБСтрокаСоединения 	= Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "РБАдресСервера Лоджистикс" Тогда
			РБАдресСервера 	= Выборка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получить Границу запрета изменения данных
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГраницыЗапретаИзмененияДанных.ДатаЗапрета КАК ГраницаЗапретаИзменений
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ГраницыЗапретаИзмененияДанных
		|ГДЕ
		|	ГраницыЗапретаИзмененияДанных.Объект = &Организация
		|	И ГраницыЗапретаИзмененияДанных.Раздел = &Раздел";
	
	Запрос.УстановитьПараметр("Раздел", ДатыЗапретаИзмененияБП.РазделБухгалтерскийУчет().Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ЗапросВыполнить = Запрос.Выполнить();
	
	Если ЗапросВыполнить.Пустой() Тогда
		Граница = Неопределено;
	Иначе
		Граница = Запрос.Выполнить().Выгрузить()[0].ГраницаЗапретаИзменений;
	КонецЕсли;
	
	// Если Групп поставщиков, покупателей нет или они не заполнена, то поискать по наименованию
	// Родитель - группа поставщики
	Если Не ЗначениеЗаполнено(мПоставщики) Тогда
		мПоставщики = Справочники.Контрагенты.НайтиПоНаименованию("Поставщики (Аксапта)", Истина);
	КонецЕсли;
	// Родитель - группа покупатели
	Если Не ЗначениеЗаполнено(мПокупатели) Тогда
		мПокупатели = Справочники.Контрагенты.НайтиПоНаименованию("Покупатели (Аксапта)", Истина);
	КонецЕсли;
	
	// Заполнить страницу загрузки и сопоставления
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ок_ТипыОперацийАксапты.Код КАК Значение,
		|	бит_ок_ТипыОперацийАксапты.Наименование КАК Представление,
		|	бит_ок_ТипыОперацийАксапты.СвернутыеОбороты КАК СвернутыеОбороты,
		|	ИСТИНА КАК Пометка
		|ИЗ
		|	Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
		|ГДЕ
		|	бит_ок_ТипыОперацийАксапты.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	бит_ок_ТипыОперацийАксапты.Код";
					
	Таб = Запрос.Выполнить().Выгрузить();
	Для каждого Стр из Таб Цикл
		
		Если Стр.СвернутыеОбороты Тогда  
		Иначе 		
			ТипыОперацийСопоставление.Добавить(Стр.Значение, Стр.Значение + ". " + Стр.Представление, Стр.Пометка);
		КонецЕсли;
		
	КонецЦикла;
		
	ПрерываниеПоCtrlBreak = Истина;
	
КонецПроцедуры

Процедура ВыводСтатусаСообщения(Статус = Неопределено, Сообщение = Неопределено, ПроверятьПрерывение = Ложь) Экспорт 

	#Если Клиент Тогда
		Если Статус <> Неопределено Тогда 
			Состояние(Статус);
		КонецЕсли;
		
		Если Сообщение <> Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		КонецЕсли;
		
		Если ПроверятьПрерывение Тогда 
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
	#КонецЕсли 

КонецПроцедуры

Процедура ЗаполнитьРС_ОК_ЗагружаемыеТипыОперацийАксапты(Свернутые) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ок_ТипыОперацийАксапты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ТипыОпераций
		|ИЗ
		|	Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
		|ГДЕ
		|	НЕ бит_ок_ТипыОперацийАксапты.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТипыОпераций.Ссылка КАК ТипОперацииАксапты,
		|	ИСТИНА КАК Пометка
		|ИЗ
		|	ВТ_ТипыОпераций КАК ВТ_ТипыОпераций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОК_ЗагружаемыеТипыОперацийАксапты КАК ОК_ЗагружаемыеТипыОперацийАксапты
		|		ПО ВТ_ТипыОпераций.Ссылка = ОК_ЗагружаемыеТипыОперацийАксапты.ТипОперацииАксапты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипОперацииАксапты
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Свернутые", Свернутые);
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаНастроек из ТЗРезультат Цикл 
		
		ДобавляемаяНастройка						= РегистрыСведений.ОК_ЗагружаемыеТипыОперацийАксапты.СоздатьМенеджерЗаписи();
		ДобавляемаяНастройка.ТипОперацииАксапты		= СтрокаНастроек.ТипОперацииАксапты;
		ДобавляемаяНастройка.Пометка				= СтрокаНастроек.Пометка;
		ДобавляемаяНастройка.Записать(Истина);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты(Пометка, Свернутые) Экспорт 

	НаборЗаписей = РегистрыСведений.ОК_ЗагружаемыеТипыОперацийАксапты.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого СтрокаНЗ из НаборЗаписей Цикл 
		Если СтрокаНЗ.ТипОперацииАксапты.СвернутыеОбороты = Свернутые Тогда 
			СтрокаНЗ.Пометка = Пометка;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

Процедура ЗагрузитьГруппу(RecNo) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОК_ЗагружаемыеТипыОперацийАксапты.ТипОперацииАксапты КАК ТипОперацииАксапты
		|ИЗ
		|	РегистрСведений.ОК_ЗагружаемыеТипыОперацийАксапты КАК ОК_ЗагружаемыеТипыОперацийАксапты
		|ГДЕ
		|	ОК_ЗагружаемыеТипыОперацийАксапты.Пометка
		|	И НЕ ОК_ЗагружаемыеТипыОперацийАксапты.ТипОперацииАксапты.СвернутыеОбороты
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();	
	ТипыОперацийКВыгрузке = ТЗРезультат.ВыгрузитьКолонку("ТипОперацииАксапты");
	ЗагрузитьГруппу = Истина;
	
	Загрузка(ЗагрузитьГруппу, НачПериода, КонПериода, ТипыОперацийКВыгрузке, Порция, RecNo, Истина);

КонецПроцедуры

Процедура ЗагрузитьПоRecNo(RecNo) Экспорт 

	ЗагрузитьГруппу = Ложь;
	УсловиеПоRecNo = "RecNo = " + Формат(RecNo, "ЧН=0; ЧГ=0");
	
	Загрузка(ЗагрузитьГруппу, НачПериода, КонПериода, Неопределено, Порция, УсловиеПоRecNo);

КонецПроцедуры

Процедура ЗагрузитьПоВаучеру(Ваучеры) Экспорт

	СтрокаУсловиеПоВаучеру = "";
	Для каждого Стр из Ваучеры Цикл
		Если СтрокаУсловиеПоВаучеру <> "" Тогда
			СтрокаУсловиеПоВаучеру = СтрокаУсловиеПоВаучеру + ", ";
		КонецЕсли;
		СтрокаУсловиеПоВаучеру = СтрокаУсловиеПоВаучеру + " '" + Стр.Значение + "'";
	КонецЦикла;
	
	СтрокаУсловиеПоВаучеру = "(" + СтрокаУсловиеПоВаучеру + ")";
	
	ЗагрузитьГруппу = Ложь;
	УсловиеПоRecNo = "ExportDataTo1cDocHeader.Voucher in " + СтрокаУсловиеПоВаучеру;
	
	Загрузка(ЗагрузитьГруппу, НачПериода, КонПериода, Неопределено, Порция, УсловиеПоRecNo);

КонецПроцедуры

Процедура ЗагрузитьСвернутые() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОК_ЗагружаемыеТипыОперацийАксапты.ТипОперацииАксапты КАК ТипОперацииАксапты
		|ИЗ
		|	РегистрСведений.ОК_ЗагружаемыеТипыОперацийАксапты КАК ОК_ЗагружаемыеТипыОперацийАксапты
		|ГДЕ
		|	ОК_ЗагружаемыеТипыОперацийАксапты.Пометка
		|	И ОК_ЗагружаемыеТипыОперацийАксапты.ТипОперацииАксапты.СвернутыеОбороты
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();	
	ТипыОперацийКВыгрузке = ТЗРезультат.ВыгрузитьКолонку("ТипОперацииАксапты");
	
	ЗагрузкаСвернутых(НачПериода, КонПериода, ТипыОперацийКВыгрузке);
	
КонецПроцедуры

Процедура ВыполнитьСопоставление(АналитикаАксапты) Экспорт

	ТипыОперацийКВыгрузке = Новый Массив;
	Для каждого Эл из ТипыОперацийСопоставление Цикл
		Если Эл.Пометка Тогда
			ТипыОперацийКВыгрузке.Добавить(Эл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Сопоставление(НачПериода, КонПериода, АналитикаАксапты, ТипыОперацийКВыгрузке);

КонецПроцедуры

Функция ПроставитьНесопоставленныеАналитики(Данные) Экспорт
	
	ЗагруженоСОшибкой = Ложь;
	
	// Получить элементы "Не сопоставлено"
	ТабНеСопоставлено = ПолучитьНеСопоставленные();
	
	КоличествоСубконтоАксапта = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта 12", "Количество субконто Аксапта", 6);
	
	//заполнение незаполненной аналитики справочниками "Не сопоставлено"
	СтруктураАналитики = Новый Структура;
	Для Инд = 1 По КоличествоСубконтоАксапта Цикл
		
		СтруктураАналитики.Вставить("СубконтоДт" + Инд + "Тип1С", "Субконто1СДт" + Инд);
		СтруктураАналитики.Вставить("СубконтоКт" + Инд + "Тип1С", "Субконто1СКт" + Инд);
		
	КонецЦикла; 
		
	//заполнение незаполненной аналитики справочниками "Не сопоставлено"
	Для каждого Стр из Данные Цикл
		
		Для каждого ЭлСтр из СтруктураАналитики Цикл
			
			Если ЗначениеЗаполнено(Стр[ЭлСтр.Ключ]) И НЕ ЗначениеЗаполнено(Стр[ЭлСтр.Значение]) Тогда
				
				// найти не сопоставленный
				СтрокаТабНеСопоставлено = ТабНеСопоставлено.Найти(Стр[ЭлСтр.Ключ].Наименование, "ИмяНастройки");
				Если СтрокаТабНеСопоставлено <> Неопределено Тогда
					
					Стр[ЭлСтр.Значение] = СтрокаТабНеСопоставлено.Значение;
					ЗагруженоСОшибкой 	= Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗагруженоСОшибкой;
	
КонецФункции

// Определяет, попадает документ в закрытый период или нет по регистру международному. 
// Анализ производится по дате документа.
//
// Параметры:
// Объект - ДокументСсылка, ДокументОбъект
// Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  флЗакрытыйПериод – Булево.
//
Функция ЭтоДокументЗакрытогоПериодаПоМСФО(Объект, Организация) Экспорт
	
	флЗакрытыйПериод 	= Ложь;
	МетаданныеОбъекта 	= Объект.Метаданные();
	РегистрыКонтроля 	= Новый Соответствие;
	ОбъектСистемы 		= Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрБухгалтерии.бит_Дополнительный_2");
	ТаблицаДат 			= бит_ОбщегоНазначения.ПолучитьЗначениеПеременной("бит_НачалоОткрытогоПериода");
	
	Если ТаблицаДат.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаДат"		,ТаблицаДат);
		Запрос.УстановитьПараметр("Организация"		,Организация);
		Запрос.УстановитьПараметр("ОбъектСистемы"	,ОбъектСистемы);
		Запрос.УстановитьПараметр("ПустаяДата"		,Дата('00010101'));
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаДат.Организация КАК Организация,
			|	ТаблицаДат.ОбъектСистемы КАК ОбъектСистемы,
			|	ТаблицаДат.ДатаОткрытогоПериода КАК ДатаОткрытогоПериода
			|ПОМЕСТИТЬ ТаблицаДат
			|ИЗ
			|	&ТаблицаДат КАК ТаблицаДат
			|ГДЕ
			|	ТаблицаДат.ОбъектСистемы = &ОбъектСистемы
			|	И ТаблицаДат.ДатаОткрытогоПериода <> &ПустаяДата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	1 КАК Приоритет,
			|	ТаблицаДат.ОбъектСистемы КАК ОбъектСистемы,
			|	ТаблицаДат.ДатаОткрытогоПериода КАК ДатаОткрытогоПериода
			|ИЗ
			|	ТаблицаДат КАК ТаблицаДат
			|ГДЕ
			|	ТаблицаДат.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	0,
			|	ТаблицаДат.ОбъектСистемы,
			|	ТаблицаДат.ДатаОткрытогоПериода
			|ИЗ
			|	ТаблицаДат КАК ТаблицаДат
			|ГДЕ
			|	ТаблицаДат.Организация = &Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаДат";
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РегистрыКонтроля.Вставить(Выборка.ОбъектСистемы,Выборка.ДатаОткрытогоПериода);
			ДатаОткрытогоПериода = Выборка.ДатаОткрытогоПериода;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Если РегистрыКонтроля.Количество() > 0 Тогда
		
		Если Объект.Дата < ДатаОткрытогоПериода Тогда
			
			флЗакрытыйПериод = Истина;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат флЗакрытыйПериод;
	
КонецФункции // ЭтоДокументЗакрытогоПериода()

Функция СформироватьТаблицуОборотов()
	
	КоличествоСубконтоАксапта = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта 12", "Количество субконто Аксапта", 6);
	
	//Описание типов
	ТипЧисло 		= Новый ОписаниеТипов("Число"); 
	ТипСтрока 		= Новый ОписаниеТипов("Строка");
	ТипСтрока3 		= Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3));
	ТипСтрока20 	= Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20));
	ТипСтрока60 	= Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60));
	ТипСтрока100 	= Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
	ТипДата 		= Новый ОписаниеТипов("Дата");
	
	//Формирование таблицы для хранения и обработки результата данных
	ТабОбороты = Новый ТаблицаЗначений;
	ТабОбороты.Колонки.Добавить("RecNo", 			ТипЧисло);
	ТабОбороты.Колонки.Добавить("Voucher",			ТипСтрока20);
	ТабОбороты.Колонки.Добавить("ReferVoucherId",	ТипСтрока20);
	ТабОбороты.Колонки.Добавить("ReferenceVoucher",	ТипСтрока20);
	ТабОбороты.Колонки.Добавить("PurchVoucher",		ТипСтрока20);
	ТабОбороты.Колонки.Добавить("ISSTORNO",			ТипЧисло);
	ТабОбороты.Колонки.Добавить("DocDate",			ТипДата);
	ТабОбороты.Колонки.Добавить("DocType", 			ТипСтрока3);
	ТабОбороты.Колонки.Добавить("Type", 			ТипСтрока3);
	ТабОбороты.Колонки.Добавить("Comment", 			ТипСтрока60);
	ТабОбороты.Колонки.Добавить("DocumentNum",		ТипСтрока100);
	ТабОбороты.Колонки.Добавить("DocumentDate",		ТипДата);
	ТабОбороты.Колонки.Добавить("Posted1С8", 		ТипЧисло);
	//ТабОбороты.Колонки.Добавить("BudgetIntID", 	ТипЧисло);
	ТабОбороты.Колонки.Добавить("E1COrderId", 		ТипСтрока20);
	ТабОбороты.Колонки.Добавить("OrderID", 			ТипСтрока20);
	ТабОбороты.Колонки.Добавить("ReceiptDateFact", 	ТипДата);
	ТабОбороты.Колонки.Добавить("PaymReference", 	ТипСтрока20);
	ТабОбороты.Колонки.Добавить("RefRecNo", 		ТипЧисло);
	ТабОбороты.Колонки.Добавить("VoucherTrans", 	ТипСтрока20);
	
	ТабОбороты.Колонки.Добавить("AccD", 			ТипСтрока20);
	Для Инд = 1 По КоличествоСубконтоАксапта Цикл
		ТабОбороты.Колонки.Добавить("DimD" + Инд,	ТипСтрока20);
	КонецЦикла;
	
	ТабОбороты.Колонки.Добавить("AccC", 			ТипСтрока20);
	Для Инд = 1 По КоличествоСубконтоАксапта Цикл
		ТабОбороты.Колонки.Добавить("DimC" + Инд, 	ТипСтрока20);
	КонецЦикла;
	
	ТабОбороты.Колонки.Добавить("Amount", 			ТипЧисло);
	ТабОбороты.Колонки.Добавить("AmountCur", 		ТипЧисло);
	ТабОбороты.Колонки.Добавить("CurrencyCode", 	ТипСтрока3);
	ТабОбороты.Колонки.Добавить("Corr", 			ТипЧисло);
	ТабОбороты.Колонки.Добавить("Txt", 				ТипСтрока100);
	
	Возврат	ТабОбороты;
	
КонецФункции

Процедура СделатьЗаписьЖР(Сообщение, Уровень = Неопределено, Событие = Неопределено, ОбъектМетаданных = Неопределено, Данные = Неопределено)

	#Если Сервер Тогда
		Если Уровень = Неопределено Тогда 
			Уровень = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Загрузка данных из Аксапты 12.Обработка" 
		,Уровень 
		,
		,
		,Сообщение);
	#КонецЕсли 

КонецПроцедуры

Функция ПолучитьТекстВыбораОбъектаСтроительстваПоСчетамАксапты()
	
	СтруктураТекстаПолученияОбъектаСтроительства = Новый Структура();
	СтруктураТекстаПолученияОбъектаСтроительства.Вставить("DimC","''");
	СтруктураТекстаПолученияОбъектаСтроительства.Вставить("DimD","''");
	
	МассивСчетовАксапты = ПолучитьМассивСчетовАксаптыССубконто1ОбъектСтроительства();
	
	ТекстПолученияОбъектаСтроительства_DimC = "''";
	ТекстПолученияОбъектаСтроительства_DimD = "''";
	Если МассивСчетовАксапты.Количество() > 0 Тогда
		
		ТекстПолученияОбъектаСтроительства_DimC = "
			|CASE &ТекстВыбора
			|	ELSE ''
			|END
			|";
		
		ТекстПолученияОбъектаСтроительства_DimD = "
			|CASE &ТекстВыбора
			|	ELSE ''
			|END
			|";
		
		ТекстВыбора_DimC = "";
		ТекстВыбора_DimD = "";
		Для каждого ЭлементМассива Из МассивСчетовАксапты Цикл
			
			ТекстВыбора_DimC = ТекстВыбора_DimC + "
				|	WHEN Trans.AccC LIKE '" + ЭлементМассива + "%' 
				|		THEN Trans.DimC1";
			
			ТекстВыбора_DimD = ТекстВыбора_DimD + "
				|	WHEN Trans.AccD LIKE '" + ЭлементМассива + "%' 
				|		THEN Trans.DimD1";
			
		КонецЦикла; 
		
		Если ТекстВыбора_DimC = "" Тогда
			ТекстПолученияОбъектаСтроительства_DimC = "''";
			ТекстПолученияОбъектаСтроительства_DimD = "''";
		Иначе
			ТекстПолученияОбъектаСтроительства_DimC = СтрЗаменить(ТекстПолученияОбъектаСтроительства_DimC, "&ТекстВыбора", ТекстВыбора_DimC);
			ТекстПолученияОбъектаСтроительства_DimD = СтрЗаменить(ТекстПолученияОбъектаСтроительства_DimD, "&ТекстВыбора", ТекстВыбора_DimD);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураТекстаПолученияОбъектаСтроительства.DimC = ТекстПолученияОбъектаСтроительства_DimC;
	СтруктураТекстаПолученияОбъектаСтроительства.DimD = ТекстПолученияОбъектаСтроительства_DimD;
	
	Возврат СтруктураТекстаПолученияОбъектаСтроительства;
	
КонецФункции

Функция ПолучитьМассивСчетовАксаптыССубконто1ОбъектСтроительства()

	Если бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты12", "Загрузка свернутых оборотов с расшифровкой по счетам 10,41,20", Истина) Тогда
	
		МассивСчетовАксапты = Новый Массив();
		МассивСчетовАксапты.Добавить("10");
		МассивСчетовАксапты.Добавить("41");
		МассивСчетовАксапты.Добавить("20");
		
		Возврат МассивСчетовАксапты;
		
	КонецЕсли;
	
	ТипыСубконто1 = Новый Массив();
	ТипыСубконто1.Добавить(Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.ОбъектыСтроительства"));
	ТипыСубконто1.Добавить(Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Справочник.Склады"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ок_АналитикаСчетовАксапта12.СчетАксапты КАК СчетАксапты
		|ИЗ
		|	РегистрСведений.бит_ок_АналитикаСчетовАксапта12 КАК бит_ок_АналитикаСчетовАксапта12
		|ГДЕ
		|	бит_ок_АналитикаСчетовАксапта12.Организация = &Организация
		|	И бит_ок_АналитикаСчетовАксапта12.ТипСубконто1 В (&ТипыСубконто1)
		|	И бит_ок_АналитикаСчетовАксапта12.СчетАксапты <> """"
		|СГРУППИРОВАТЬ ПО
		|	бит_ок_АналитикаСчетовАксапта12.СчетАксапты";
	
	Запрос.УстановитьПараметр("Организация", бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"));
	Запрос.УстановитьПараметр("ТипыСубконто1", ТипыСубконто1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивСчетовАксапты = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("СчетАксапты");

	Возврат МассивСчетовАксапты;
	
КонецФункции

Функция ПолуитьМассивТранзитныхСчетов()
	
	ПараметрыЗагрузкиАксапты12_ТранзитныеСчета = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты12", "Транзитные счета", "");
	ПараметрыЗагрузкиАксапты12_ТранзитныеСчета = СтрРазделить(ПараметрыЗагрузкиАксапты12_ТранзитныеСчета, ";", Ложь);
	
	Массив_ТранзитныеСчета = Новый Массив;
	Для каждого СтрокаТранзитныйСчет Из ПараметрыЗагрузкиАксапты12_ТранзитныеСчета Цикл
		Массив_ТранзитныеСчета.Добавить(СокрЛП(СтрокаТранзитныйСчет));
	КонецЦикла; 
	
	Возврат Массив_ТранзитныеСчета;
	
КонецФункции

КоличествоЗагруженных   = 0;
бит_ЗагружатьДоговора 	= Истина;
ПорцияТранзакции		= 500;
мТаймаут 				= 0;
Организация 			= ?(ЗначениеЗаполнено(Организация), Организация, бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"));
ЗаполнитьНастройки();
ПодключеноКБазе 		= Ложь;
мАутентификация 		= 1; // 0 - без, 1 - базовая, 2 - NTLM