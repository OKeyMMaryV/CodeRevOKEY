
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПроверитьВозможностьИспользованияОбработки() Тогда 
		
		Предупреждение("Данная обработка не предназначена для работы с текущей конфигурацией");
		ЭтаФорма.Закрыть();
		Возврат;
		
	КонецЕсли;
	
	ПриОткрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПриОткрытииНаСервере()
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Элементы.НастройкиМеханизмаИмпортаДанных.ТолькоПросмотр = Ложь;
		Элементы.НастройкиМеханизмаИмпортаДанных.Доступность	= Истина;
	КонецЕсли;
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"); 
	Объект.Организация = Организация_Окей;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ок_ТипыОперацийАксапты.Ссылка КАК ТипОперацииАксапты
	               |ИЗ
	               |	Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
	               |ГДЕ
	               |	(НЕ бит_ок_ТипыОперацийАксапты.ПометкаУдаления)
	               |	И (НЕ бит_ок_ТипыОперацийАксапты.СвернутыеОбороты)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ок_ТипыОперацийАксапты.Ссылка КАК ТипОперацииАксапты
	               |ИЗ
	               |	Справочник.бит_ок_ТипыОперацийАксапты КАК бит_ок_ТипыОперацийАксапты
	               |ГДЕ
	               |	(НЕ бит_ок_ТипыОперацийАксапты.ПометкаУдаления)
	               |	И бит_ок_ТипыОперацийАксапты.СвернутыеОбороты";
	
	Результат 	= Запрос.ВыполнитьПакет();
	
	//ОтборГруппы
	ТЗРезультат = Результат[0].Выгрузить();
	ОтборГруппы	= Новый СписокЗначений;	
	ОтборГруппы.ЗагрузитьЗначения(ТЗРезультат.ВыгрузитьКолонку("ТипОперацииАксапты"));
	
	ЭлементОтбора = ТипыОперацийГруппы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТипОперацииАксапты");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение 	= ОтборГруппы;
	
	//ОтборСвернутые
	ТЗРезультат 	= Результат[1].Выгрузить();
	ОтборСвернутые	= Новый СписокЗначений;
	ОтборСвернутые.ЗагрузитьЗначения(ТЗРезультат.ВыгрузитьКолонку("ТипОперацииАксапты"));
	
	ЭлементОтбора = ТипыОперацийСвернутые.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТипОперацииАксапты");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение 	= ОтборСвернутые;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыборПериодаНажатие(Элемент)
	
	ДиалогРедактированияПериода = Новый ДиалогРедактированияСтандартногоПериода;	
	
	ДиалогРедактированияПериода.Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ДиалогРедактированияПериода.Период.ДатаНачала = Объект.НачПериода;
	ДиалогРедактированияПериода.Период.ДатаНачала = Объект.КонПериода;
	
	Если ДиалогРедактированияПериода.Редактировать() Тогда
		
		Объект.НачПериода = НачалоДня(ДиалогРедактированияПериода.Период.ДатаНачала);
		Объект.КонПериода = КонецДня(ДиалогРедактированияПериода.Период.ДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	СписокОрганизаций = ПолучитьСписокОрганизаций();
	Для Каждого ТекущаяОрганизация Из СписокОрганизаций Цикл
		
		Элемент.СписокВыбора.Добавить(ТекущаяОрганизация.Значение, ТекущаяОрганизация.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.СопоставленныеДоговораДляПроверки.Очистить();
	Объект.ДоговораSQL.Очистить();
	
	ЗаполнитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	Перем СоответствиеГраницЗапрета;
	
	Если ПроверитьОрганизацию() Тогда
		
		Предупреждение("Выберите организацию ""ОКЕЙ""!");
		Возврат;
		
	КонецЕсли;
	
	// проверим закрыт ли период
	ГраницаПоОрганизации = ПолучитьГраницуЗапретаИзменений();
	
	Если Объект.НачПериода < ГраницаПоОрганизации Тогда
		
		Предупреждение("Выбранный период частично или полностью находится в закрытом периоде, выберите корректный период.");
		Возврат;
		
	КонецЕсли;	
	
	ТекущаяСтраница = Элементы.ПанельГруппаОдин.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Группа Тогда 

		ЗагрузитьГруппу(RecNo);
		
	ИначеЕсли ТекущаяСтраница = Элементы.Один Тогда 
		
		// загрузка не свернутых оборотов по RecNo
		ЗагрузитьПоRecNo(RecNo);
		
	ИначеЕсли ТекущаяСтраница = Элементы.Ваучеры1 Тогда 
		
		ЗагрузитьПоВаучеру(Ваучеры);
		
	ИначеЕсли ТекущаяСтраница = Элементы.Свернутые Тогда
		
		ЗагрузитьСвернутые();
		
	ИначеЕсли ТекущаяСтраница = Элементы.Сопоставление Тогда
		
		// сопоставление без загрузки из SQL
		ВыполнитьСопоставление(АналитикаАксапты);
		
	ИначеЕсли ТекущаяСтраница = Элементы.НастройкиИмпорта Тогда 
		
		ЗаполнитьНастройки();
		
	ИначеЕсли ТекущаяСтраница = Элементы.ЗагрузкаДоговоров Тогда  
		
		ПодключениеКБазе();
		ЗагрузитьДоговора();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеУстановитьВсеСопоставления(Команда)
	
	Объект.ТипыОперацийСопоставление.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеСнятьВсеСопоставления(Команда)
	
	Объект.ТипыОперацийСопоставление.ЗаполнитьПометки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыОперацийЗаполнить(Команда)
	
	ТекущаяСтраница = Элементы.ПанельГруппаОдин.ТекущаяСтраница;
	Свернутые 		= ТекущаяСтраница.Имя = "Свернутые";
	
	ЗаполнитьРС_ОК_ЗагружаемыеТипыОперацийАксапты(Свернутые);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыОперацийУстановитьВсе(Команда)
	
	ТекущаяСтраница = Элементы.ПанельГруппаОдин.ТекущаяСтраница;
	Свернутые 		= ТекущаяСтраница.Имя = "Свернутые";
	
	ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты(Истина, Свернутые);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыОперацийСнятьВсе(Команда)
	
	ТекущаяСтраница = Элементы.ПанельГруппаОдин.ТекущаяСтраница;
	Свернутые 		= ТекущаяСтраница.Имя = "Свернутые";
	
	ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты(Ложь, Свернутые);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговораSQLПроверитьДоговора(Команда)
	
	ЗаполнитьНастройки();
	ПодключениеКБазе();
	
	Объект.СопоставленныеДоговораДляПроверки.Очистить();
	Объект.ДоговораSQL.Очистить();
	
	ЗагрузитьДоговора(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьСписокОрганизаций()
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"));
	
	Возврат СписокОрганизаций;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьИспользованияОбработки()
	Возврат Метаданные.РегистрыСведений.Найти("ОК_ЗагружаемыеТипыОперацийАксапты") = Неопределено
КонецФункции

&НаСервере
Функция ПроверитьОрганизацию()
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"); 
	
	Возврат Объект.Организация <> Организация_Окей;
	
КонецФункции

&НаСервере
Функция ПолучитьГраницуЗапретаИзменений()
	
	// проверим закрыт ли период
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГраницыЗапретаИзмененияДанных.ДатаЗапрета КАК ГраницаЗапретаИзменений
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ГраницыЗапретаИзмененияДанных
		|ГДЕ
		|	ГраницыЗапретаИзмененияДанных.Объект = &Организация
		|	И ГраницыЗапретаИзмененияДанных.Раздел = &Раздел";
	
	Запрос.УстановитьПараметр("Раздел", ДатыЗапретаИзмененияБП.РазделБухгалтерскийУчет().Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ЗапросВыполнить = Запрос.Выполнить();
	
	Если ЗапросВыполнить.Пустой() Тогда
		Граница = Дата(1,1,1);
	Иначе
		Граница = Запрос.Выполнить().Выгрузить()[0].ГраницаЗапретаИзменений;
	КонецЕсли;
	
	Возврат Граница;
	
КонецФункции

&НаСервере
Функция ЗагрузитьГруппу(RecNo)
	
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.ЗагрузитьГруппу(RecNo);
	ЗначениеВРеквизитФормы(_объект, "Объект");
	
КонецФункции

&НаСервере
Функция ЗагрузитьПоRecNo(RecNo)
	
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.ЗагрузитьПоRecNo(RecNo);
	ЗначениеВРеквизитФормы(_объект, "Объект");
	
КонецФункции

&НаСервере
Функция ЗагрузитьПоВаучеру(Ваучеры)
	
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.ЗагрузитьПоВаучеру(Ваучеры);
	ЗначениеВРеквизитФормы(_объект, "Объект");
	
КонецФункции

&НаСервере
Функция ЗагрузитьСвернутые()
	
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.ЗагрузитьСвернутые();
	ЗначениеВРеквизитФормы(_объект, "Объект");
	
КонецФункции

&НаСервере
Функция ВыполнитьСопоставление(АналитикаАксапты)
	
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.ВыполнитьСопоставление(АналитикаАксапты);
	ЗначениеВРеквизитФормы(_объект, "Объект");
	
КонецФункции

&НаСервере
Функция ЗаполнитьНастройки()
	
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.ЗаполнитьНастройки();
	ЗначениеВРеквизитФормы(_объект, "Объект");
	
КонецФункции

&НаСервере
Функция ПодключениеКБазе()
	
	_объект = РеквизитФормыВЗначение("Объект");
	результат = _объект.ПодключениеКБазе();
	ЗначениеВРеквизитФормы(_объект, "Объект");
	
	Возврат результат;
	
КонецФункции

&НаСервере
Функция ЗагрузитьДоговора(Проверка=Ложь)
	
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.ЗагрузитьДоговора(Проверка);
	ЗначениеВРеквизитФормы(_объект, "Объект");
	
КонецФункции

&НаСервере
Функция ЗаполнитьРС_ОК_ЗагружаемыеТипыОперацийАксапты(Свернутые)
	
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.ЗаполнитьРС_ОК_ЗагружаемыеТипыОперацийАксапты(Свернутые);
	ЗначениеВРеквизитФормы(_объект, "Объект");
	
КонецФункции

&НаСервере
Функция ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты(Пометка, Свернутые)
	
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.ПроставитьВсеФлагиРС_ОК_ЗагружаемыеТипыОперацийАксапты(Пометка, Свернутые);
	ЗначениеВРеквизитФормы(_объект, "Объект");
	
	Элементы.ТипыОперацийСвернутые.Обновить();
	Элементы.ТипыОперацийГруппы.Обновить();
	
КонецФункции

#КонецОбласти

НастройкаПериода = Новый СтандартныйПериод;
