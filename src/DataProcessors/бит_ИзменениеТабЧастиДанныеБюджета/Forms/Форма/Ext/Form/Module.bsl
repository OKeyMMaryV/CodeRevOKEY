
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("Команда") Тогда		
    	ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено. 
							  |Для открытия формы можно воспользоваться командой ""Изменить"" в формах документов.'");
   		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправленияИзменениеТабЧастиДанныеБюджета(Элементы);
	ОтобразитьДополнительныеИзмерения(Параметры.Команда);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	НовыеРеквизиты = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы("ИмяТабличнойЧасти", Новый ОписаниеТипов("Строка"));
	НовыеРеквизиты.Добавить(НовыйРеквизит);
	ИзменитьРеквизиты(НовыеРеквизиты);	
	ЭтаФорма["ИмяТабличнойЧасти"] = Параметры.ИмяТабличнойЧасти;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-24 (#3066)
	Если Параметры.Свойство("АдресАналитикиТЧ") Тогда 
		
		Элементы.АналитикиТЧГруппаПериод.Видимость = Ложь;
		Элементы.АналитикиТЧПериод.Видимость = Ложь;//Чтобы отработало условие на заполнение аналитик
		
		АналитикиТЧ = ПолучитьИзВременногоХранилища(Параметры.АдресАналитикиТЧ);
		
		Для каждого Строка Из АналитикиТЧ Цикл
			
			НоваяСтрока = Объект.АналитикиТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЦикла; 
		
		
	Иначе 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-24 (#3066)
		Если ЭтоАдресВременногоХранилища(Параметры.ТабличнаяЧасть) Тогда
			ТаблицаДокумента 	  = ПолучитьИзВременногоХранилища(Параметры.ТабличнаяЧасть);
			РеквизитыОбработки	  = Объект.АналитикиТЧ.Выгрузить().Колонки;
			ДобавляемыеРеквизиты  = Новый Массив();
			
			Для каждого Колонка Из ТаблицаДокумента.Колонки Цикл
				Если РеквизитыОбработки.Найти(Колонка.Имя) = Неопределено Тогда
					НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "Объект.АналитикиТЧ");
					ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				КонецЕсли; 
			КонецЦикла;
			Если ДобавляемыеРеквизиты.Количество() <> 0 Тогда
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);		
			КонецЕсли; 
			Объект.АналитикиТЧ.Загрузить(ТаблицаДокумента);
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-24 (#3066)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-24 (#3066)
	
	// Для ERP.
	Для каждого Элемент Из КэшЗначений.НастройкиИзмеренийБюджетирования Цикл
		Если Элементы.АналитикиТЧ.ПодчиненныеЭлементы.Найти("АналитикиТЧГруппа"+Элемент.Ключ) <> Неопределено Тогда
			Элементы.АналитикиТЧ.ПодчиненныеЭлементы["АналитикиТЧГруппа"+Элемент.Ключ].Видимость = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	// Скопируем настройку видимости колонок из оригинальной формы.
	Если ТипЗнч(Параметры.ВидимостьАналитик) = Тип("Структура") Тогда
		Для каждого КлючЗначение Из Параметры.ВидимостьАналитик Цикл
			ЭлементФормы = Элементы.Найти("АналитикиТЧ" + КлючЗначение.Ключ);
			Если ЭлементФормы <> Неопределено Тогда
				ЭлементФормы.Видимость = КлючЗначение.Значение;			
			КонецЕсли; 		
		КонецЦикла; 
	КонецЕсли;
	
	СформироватьСписокАналитик();
	НачальноеЗаполнениеАналитик();

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАналитики

&НаКлиенте
Процедура АналитикиЗначениеАналитикиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Аналитики.ТекущиеДанные;
	ТекущиеДанные.Выполнять = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикиАналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("АналитикиАналитикаНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, СписокАналитик);
	
КонецПроцедуры

// Обработчик завершения открытия формы списка значений.
//  См. Синтакс-помощник: ПоказатьВыборИзСписка().
// 
&НаКлиенте 
Процедура АналитикиАналитикаНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Аналитики.ТекущиеДанные;
	Если РезультатВыбора <> Неопределено Тогда
		ТекущиеДанные.Аналитика = РезультатВыбора.Представление;
		ТекущиеДанные.Реквизит 	= РезультатВыбора.Значение;
		ИзменениеАналитики(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикиЗначениеАналитикиНачальноеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Аналитики.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Реквизит) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеАналитикиНачальноеВзятьТекущее(ТекущиеДанные.ЗначениеАналитикиНачальное) Тогда 
		
		ОписаниеТиповАналитики = СоответствиеАналитик[ТекущиеДанные.Реквизит];
		ТекущиеДанные.ЗначениеАналитикиНачальное = ОписаниеТиповАналитики.ПривестиЗначение(ТекущиеДанные.ЗначениеАналитикиНачальное);
		ТекущийЭлемент = Элемент;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАналитикиНачальное) Тогда 
		ТекущиеДанные.ЗначениеАналитикиНачальное = СпособыИзмененияТабЧастиВсеЗначения();
	КонецЕсли; 
	
	ТекущиеДанные.Выполнять = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикиЗначениеАналитикиНачальноеОчистка(Элемент, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Аналитики.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные.ЗначениеАналитикиНачальное = СпособыИзмененияТабЧастиВсеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИнвертироватьФлажки(Команда)
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(Объект.АналитикиТЧ, "Выполнять", 2);	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(Объект.АналитикиТЧ, "Выполнять", 0);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(Объект.АналитикиТЧ, "Выполнять", 1);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТЧДокумента(Команда)
	
	ВыполнитьПерезаполнение(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТЧДокументаИЗакрыть(Команда)
	
	ВыполнитьПерезаполнение(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтобразитьДополнительныеИзмерения(ИмяДокумента)
	
	// Подготовка параметров, необходимых для отображения доп. измерений.
	ПараметрыГрупп = Новый Соответствие;
	ПараметрыПолей = Новый Соответствие;
	Для каждого ТекЭлемент Из КэшЗначений.ИзмеренияДоп Цикл
		СтруктураИмен = Новый Структура;
		СтруктураИмен.Вставить("ИмяПоля", "АналитикиТЧГруппа" + ТекЭлемент.Ключ);
		СтруктураИмен.Вставить("Префикс", "");
		СтруктураИмен.Вставить("Постфикс", "");
		
		ПараметрыГрупп.Вставить(ТекЭлемент.Ключ, СтруктураИмен);
		
		СтруктураИмен = Новый Структура;
		СтруктураИмен.Вставить("ИмяПоля", "АналитикиТЧ" + ТекЭлемент.Ключ + "_Старый");
		СтруктураИмен.Вставить("Префикс", "");
		СтруктураИмен.Вставить("Постфикс", " "+ НСтр("ru = '(старый)'"));
		
		ПараметрыПолей.Вставить(ТекЭлемент.Ключ, СтруктураИмен);
	КонецЦикла;
	
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(
		ЭтотОбъект, "АналитикиТЧ", КэшЗначений.ИзмеренияДоп, КэшЗначений.НастройкиИзмерений);
																	
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(
		ЭтотОбъект, "АналитикиТЧ", КэшЗначений.ИзмеренияДоп, КэшЗначений.НастройкиИзмерений, ПараметрыГрупп);
	
	Если ИмяДокумента <> "бит_КорректировкаБюджета" Тогда
		Для каждого Эл Из Элементы.АналитикиТЧ.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Эл) = Тип("ГруппаФормы") Тогда
				Для каждого ЭлемГруппы Из Эл.ПодчиненныеЭлементы Цикл
					Если Найти(ВРег(ЭлемГруппы.Имя), ВРег("_Старый"))>0 Тогда
						ЭлемГруппы.Видимость = Ложь;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла;
		Элементы.АналитикиТЧГруппаНадписи.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	КэшЗначений.Вставить("ИзмеренияДоп", бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	КэшЗначений.Вставить("НастройкиИзмеренийБюджетирования", бит_Бюджетирование.НастройкиИзмеренийБюджетирования());
	
КонецПроцедуры

&НаСервере
Процедура НачальноеЗаполнениеАналитик()

	ОсновныеАналитики = Новый Массив(); 
	ОсновныеАналитики.Добавить("Период");
	ОсновныеАналитики.Добавить("ЦФО");
	ОсновныеАналитики.Добавить("СтатьяОборотов");
	
	Для каждого Элемент Из ОсновныеАналитики Цикл
		ЭлементСписка = СписокАналитик.НайтиПоЗначению(Элемент); 
		Если ЭлементСписка <> Неопределено Тогда
			НоваяСтрока = Объект.Аналитики.Добавить();
			НоваяСтрока.Аналитика = ЭлементСписка.Представление;
			НоваяСтрока.Реквизит  = ЭлементСписка.Значение;
			ИзменениеАналитики(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПерезаполнение(Закрыть)

	РезультатИзменения = РезультатИзмененияТабличнойЧасти();
	Если РезультатИзменения.Успех Тогда
		Оповестить("ИзменениеТабличнойЧасти", РезультатИзменения.АдресВоВременомХранилищие, 
			ВладелецФормы.УникальныйИдентификатор);
	КонецЕсли; 

	Если РезультатИзменения.Успех И Закрыть Тогда
		Закрыть();
	КонецЕсли; 	

КонецПроцедуры

&НаСервере
Процедура СформироватьСписокАналитик()

	Контейнер = Новый Соответствие;
	СписокАналитик = Новый СписокЗначений();
	
	Если Элементы.АналитикиТЧПериод.Видимость Тогда
		СписокАналитик.Добавить("Период", "Период");
		Контейнер.Вставить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КонецЕсли;
				
	Для каждого Колонка Из КэшЗначений.НастройкиИзмеренийБюджетирования Цикл
		Если Колонка.Значение <> Неопределено Тогда
			// Список разрезов бюджета зависит от видимости колонок.
			ЭлементФормы = Элементы.Найти("АналитикиТЧ" + Колонка.Ключ);
			Если ЭлементФормы <> Неопределено И ЭлементФормы.Видимость Тогда
				СписокАналитик.Добавить(Колонка.Ключ, Колонка.Значение.Синоним);
				Контейнер.Вставить(Колонка.Ключ, Колонка.Значение.ТипЗначения);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	СоответствиеАналитик = Новый ФиксированноеСоответствие(Контейнер);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеАналитики(ИдСтроки)
	
	ТекущаяСтрока = Объект.Аналитики.НайтиПоИдентификатору(ИдСтроки);
	ДозаполнитьСтрокуАналитик(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьСтрокуАналитик(ТекущаяСтрока)

	Если ТекущаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Аналитика) Тогда
			ОписаниеТиповАналитики = СоответствиеАналитик[ТекущаяСтрока.Реквизит];
			ТекущаяСтрока.ЗначениеАналитики = ОписаниеТиповАналитики.ПривестиЗначение(ТекущаяСтрока.ЗначениеАналитики);
			ТекущаяСтрока.ЗначениеАналитикиНачальное = Перечисления.бит_СпособыИзмененияНачальногоЗначенияТабличнойЧасти.ВсеЗначения;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция РезультатИзмененияТабличнойЧасти()

	РезультатИзменения = Новый Структура;
	РезультатИзменения.Вставить("Успех", Истина);
	РезультатИзменения.Вставить("АдресВоВременомХранилищие", "");
		
	Отказ = Ложь;
	
	РеквизитыДляЗамены = Объект.Аналитики.НайтиСтроки(Новый Структура("Выполнять", Истина));
	Если РеквизитыДляЗамены.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны реквизиты для замены.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли; 
	
	СтрокиДляЗамены = Объект.АналитикиТЧ.НайтиСтроки(Новый Структура("Выполнять", Истина));
	Если СтрокиДляЗамены.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны строки для замены в табличной части.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли; 
	
	Если Отказ Тогда
		РезультатИзменения.Вставить("Успех", Ложь);
		Возврат РезультатИзменения;
	КонецЕсли; 
	
	ТаблицаДляПередачи = Новый ТаблицаЗначений;
	ТаблицаДляПередачи.Колонки.Добавить("ИД");
	ТаблицаДляПередачи.Колонки.Добавить("Реквизит");
	ТаблицаДляПередачи.Колонки.Добавить("Значение");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	ТаблицаДляПередачи.Колонки.Добавить("ИмяТабличнойЧасти");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )

	СпособыЗаполнения = Перечисления.бит_СпособыИзмененияНачальногоЗначенияТабличнойЧасти;
	
	Для каждого РеквизитДляЗамены Из РеквизитыДляЗамены Цикл
		Если НЕ ЗначениеЗаполнено(РеквизитДляЗамены.Реквизит) Тогда
			Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаДляЗамены Из СтрокиДляЗамены Цикл
			Если РеквизитДляЗамены.ЗначениеАналитикиНачальное = СпособыЗаполнения.ВсеЗначения Тогда
				
				ЗаполнитьТаблицуДляПередачи(ТаблицаДляПередачи, СтрокаДляЗамены, РеквизитДляЗамены, 
					КэшЗначений.НастройкиИзмеренийБюджетирования);
				
			ИначеЕсли РеквизитДляЗамены.ЗначениеАналитикиНачальное = СпособыЗаполнения.ПустоеЗначение
				И НЕ ЗначениеЗаполнено(СтрокаДляЗамены[РеквизитДляЗамены.Реквизит]) Тогда 
				
				ЗаполнитьТаблицуДляПередачи(ТаблицаДляПередачи, СтрокаДляЗамены, РеквизитДляЗамены, 
					КэшЗначений.НастройкиИзмеренийБюджетирования);
				
			ИначеЕсли СтрокаДляЗамены[РеквизитДляЗамены.Реквизит] = РеквизитДляЗамены.ЗначениеАналитикиНачальное Тогда 
				
				ЗаполнитьТаблицуДляПередачи(ТаблицаДляПередачи, СтрокаДляЗамены, РеквизитДляЗамены, 
					КэшЗначений.НастройкиИзмеренийБюджетирования);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	ТаблицаДляПередачи.ЗаполнитьЗначения(ЭтаФорма["ИмяТабличнойЧасти"], "ИмяТабличнойЧасти");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )	
	
	РезультатИзменения.Вставить("АдресВоВременомХранилищие", ПоместитьВоВременноеХранилище(ТаблицаДляПередачи, 
		Новый УникальныйИдентификатор()));
	
	Возврат РезультатИзменения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуДляПередачи(ТаблицаДляПередачи, СтрокаРеквизитов, Строка, ИзмеренияБюджетирования)

	Если ЗначениеЗаполнено(СтрокаРеквизитов.СтатьяОборотов) 
		И ИзмеренияБюджетирования[Строка.Реквизит] <> Неопределено Тогда
		
		Попытка
			Если НЕ СтрокаРеквизитов.СтатьяОборотов["Учет_" + Строка.Реквизит] Тогда
				Возврат;
			КонецЕсли; 
		Исключение
			// Если по такому разрезу не ведется учет, значит можно пропустить.
		КонецПопытки; 
	КонецЕсли; 
	
	СтрокаРеквизитов[Строка.Реквизит] = Строка.ЗначениеАналитики;
	
	СтрокаТЗ = ТаблицаДляПередачи.Добавить();
	СтрокаТЗ.Реквизит 	= Строка.Реквизит;
	СтрокаТЗ.ИД 		= СтрокаРеквизитов.ПолучитьИдентификатор();
	СтрокаТЗ.Значение 	= Строка.ЗначениеАналитики;

КонецПроцедуры 

&НаКлиенте 
Функция ЗначениеАналитикиНачальноеВзятьТекущее(Значение)
	
	ВзятьТекущее = (Значение = 
		ПредопределенноеЗначение("Перечисление.бит_СпособыИзмененияНачальногоЗначенияТабличнойЧасти.ТекущееЗначение"));
		
 	Возврат ВзятьТекущее;
	
КонецФункции

&НаКлиенте  
Функция СпособыИзмененияТабЧастиВсеЗначения()

	Возврат ПредопределенноеЗначение("Перечисление.бит_СпособыИзмененияНачальногоЗначенияТабличнойЧасти.ВсеЗначения");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВСтроке(ТекущаяСтрока)

	ТекущаяСтрока.НадписиНовоеЗначение = НСтр("ru = 'после изменения:'");
	ТекущаяСтрока.НадписиСтароеЗначение = НСтр("ru = 'до изменения:'");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для каждого СтрокаТаблицы Из Объект.АналитикиТЧ Цикл
		ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
	КонецЦикла; 	

КонецПроцедуры

#КонецОбласти
