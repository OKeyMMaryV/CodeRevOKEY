	
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущаяВалютаДокумента; // Хранит текущую валюту взаиморасчетов документа.

&НаКлиенте
Перем мТекущийКурсДокумента; // Хранит текущий курс документа.

&НаКлиенте
Перем мТекущаяКратностьДокумента; // Хранит текущую кратность документа.

&НаКлиенте
Перем мТекущаяФормаОплаты; // Хранит текущую форму оплаты.

&НаКлиенте
Перем мТекущийДоговорКонтрагента; // Хранит текущий договор контрагента.

&НаКлиенте
Перем мТекущаяДатаПоступления; // Хранит текущую дату поступления.

&НаКлиенте
Перем мТекущаяДатаПлатежаКрайняя; // Хранит текущую крайнюю дату платежа.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_ФормированиеПланируемыхПоступлений;
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Обработка предназначена для использования только в главном узле РИБ'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	НастроитьОформление();
	
	// Отобразим дополнительные измерения в табличных полях.
	ОтобразитьДопИзмеренияВТабличныхПолях();
	
	// Инициализация схемы компоновки данных
	АдресСхемыКомпоновкиДанных = ИнициализироватьКомпоновщикСервер(Объект.КомпоновщикНастроек);
	
	// Установим автоотметку незаполненного для полей.
	УстановитьАвтоОтметкуНезаполненногоДляПолей();
	
	УстановитьЗначенияПоУмолчанию();
	
	бит_РаботаСДиалогамиСервер.УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ОтображениеМодифицировалось Тогда
		ОтобразитьНастройки = Истина;
		
		Элементы.ФормаКомандаОтобразитьНастройки.Пометка = ОтобразитьНастройки;
		Элементы.ГруппаНастройки.Видимость 				 = ОтобразитьНастройки;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереченьДокументов

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// табличного поля "ПереченьДокументов".
// 
&НаКлиенте
Процедура ПереченьДокументовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	// Если ЗначениеЗаполнено(ТекущиеДанные.ПланируемоеПоступление) Тогда
	// 	СтруктураОтбора.Вставить("ПланируемоеПоступление", ТекущиеДанные.ПланируемоеПоступление);
	// Иначе
		СтруктураОтбора.Вставить("ПлатежнаяПозиция", ТекущиеДанные.ПлатежнаяПозиция);
	// КонецЕсли;
	
	ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
	Элементы.Распределение.ОтборСтрок = ОтборСтрок;
	
	мТекущаяВалютаДокумента    = ТекущиеДанные.ВалютаДокумента;
	мТекущийКурсДокумента      = ТекущиеДанные.КурсДокумента;
	мТекущаяКратностьДокумента = ТекущиеДанные.КратностьДокумента;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// поля ввода "ВалютаДокумента" табличного поля "ПереченьДокументов".
// 
&НаКлиенте
Процедура ПереченьДокументовВалютаДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запомним текущие значения - пригодятся для пересчета.
	мТекущаяВалютаДокумента    = ТекущиеДанные.ВалютаДокумента;
	мТекущийКурсДокумента      = ТекущиеДанные.КурсДокумента;
	мТекущаяКратностьДокумента = ТекущиеДанные.КратностьДокумента;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "ВалютаДокумента" табличного поля "ПереченьДокументов".
// 
&НаКлиенте
Процедура ПереченьДокументовВалютаДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	// Внутри Оповещение
	ИзменениеВалютыВСтроке(ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "Организация" табличного поля "ПереченьДокументов".
// 
&НаКлиенте
Процедура ПереченьДокументовОрганизацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДСтрокиДокумента = ТекущиеДанные.ПолучитьИдентификатор();
	
	ИзменениеОрганизацииДокумента(ИДСтрокиДокумента);
	                                	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// поля ввода "ФормаОплаты" табличного поля "ПереченьДокументов".
// 
&НаКлиенте
Процедура ПереченьДокументовФормаОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мТекущаяФормаОплаты = ТекущиеДанные.ФормаОплаты;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "ФормаОплаты" табличного поля "ПереченьДокументов".
// 
&НаКлиенте
Процедура ПереченьДокументовФормаОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДСтрокиДокумента = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если НЕ ТекущиеДанные.ФормаОплаты = мТекущаяФормаОплаты Тогда
		
		ИзменениеФормыОплаты(ИДСтрокиДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределение

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "Контрагент" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеКонтрагентПриИзменении(Элемент)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = ПолучитьСтрокуДокументаПоСтрокеРаспределения(СтрокаРаспределения);
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоговорКонтрагентаНаСервере(
							СтрокаРаспределения.ДоговорКонтрагента,
							СтрокаРаспределения.Контрагент,
							СтрокаДокумента.Организация, 
							мКэшЗначений.СписокВидовДоговоров,
							Неопределено);
							
	ИзменениеДоговораКонтрагентаКлиент(СтрокаДокумента, СтрокаРаспределения);						
							
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// поля ввода "ДоговорКонтрагента" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = ПолучитьСтрокуДокументаПоСтрокеРаспределения(СтрокаРаспределения);
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент);
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "ДоговорКонтрагента" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = ПолучитьСтрокуДокументаПоСтрокеРаспределения(СтрокаРаспределения);
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеДоговораКонтрагентаКлиент(СтрокаДокумента, СтрокаРаспределения);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "БанковскийСчет" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = ПолучитьСтрокуДокументаПоСтрокеРаспределения(СтрокаРаспределения);
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец"       	  , СтрокаДокумента.Организация);
	Отбор.Вставить("ВалютаДенежныхСредств", СтрокаДокумента.ВалютаДокумента);
	
	СтруктураПараметров.Вставить("ТекущийЭлемент" 	 , СтрокаРаспределения.БанковскийСчет);
	СтруктураПараметров.Вставить("Отбор"		  	 , Отбор);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе", Истина);
		
	Элемент.ВыбиратьТип = Ложь;
			
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", СтруктураПараметров, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// поля ввода "Аналитика_i" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеАналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,СтрокаРаспределения
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
															   
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеАналитикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,СтрокаРаспределения
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
                                                          
КонецПроцедуры // РаспределениеАналитикаАвтоПодбор()

// Процедура - обработчик события "Очистка" 
// поля ввода "Аналитика_i" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеАналитикаОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,СтрокаРаспределения
	                                                                       	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
																			
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "ДатаПоступления" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеДатаПоступленияПриИзменении(Элемент)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = ПолучитьСтрокуДокументаПоСтрокеРаспределения(СтрокаРаспределения);
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеДатыПоступления(СтрокаДокумента, СтрокаРаспределения);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "ДатаПлатежаКрайняя" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеДатаПлатежаКрайняяПриИзменении(Элемент)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = ПолучитьСтрокуДокументаПоСтрокеРаспределения(СтрокаРаспределения);
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКрайнейДатыПлатежа(СтрокаДокумента, СтрокаРаспределения);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "Сумма" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеСуммаПриИзменении(Элемент)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуНДСКлиент(СтрокаРаспределения);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "СтавкаНДС" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеСтавкаНДСПриИзменении(Элемент)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуНДСКлиент(СтрокаРаспределения);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "ЦФО" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеЦФОПриИзменении(Элемент)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = ПолучитьСтрокуДокументаПоСтрокеРаспределения(СтрокаРаспределения);
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый Структура("СписокСтатейПринадлежность,ЦФО,СтатьяОборотов"
										,мКэшЗначений.СписокСтатейПринадлежность
										,СтрокаРаспределения.ЦФО
										,СтрокаРаспределения.СтатьяОборотов);
										
	ИДСтрокиРаспределения = СтрокаРаспределения.ПолучитьИдентификатор();
	ИДСтрокиДокумента	  = СтрокаДокумента.ПолучитьИдентификатор();
	
	ИзменениеЦФО(СтруктураПараметров, ИДСтрокиДокумента, ИДСтрокиРаспределения);
	
	мКэшЗначений.СписокСтатейПринадлежность = СтруктураПараметров.СписокСтатейПринадлежность;
	
	// УстановитьПараметрыВыбораСтатьи(Элементы.РаспределениеСтатьяОборотов);
	
	СтруктураПараметров.Вставить("ВыводитьСообщения",Истина);	
	
	Если НЕ бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(СтруктураПараметров) Тогда
		 СтрокаРаспределения.СтатьяОборотов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// поля ввода "СтатьяОборотов" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = ПолучитьСтрокуДокументаПоСтрокеРаспределения(СтрокаРаспределения);
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДСтрокиРаспределения = СтрокаРаспределения.ПолучитьИдентификатор();
	ИДСтрокиДокумента	  = СтрокаДокумента.ПолучитьИдентификатор();
	
	мКэшЗначений.СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежности(, ИДСтрокиДокумента, ИДСтрокиРаспределения);
	
	УстановитьПараметрыВыбораСтатьи(Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// поля ввода "СтатьяОборотов" табличного поля "Распределение".
// 
&НаКлиенте
Процедура РаспределениеСтатьяОборотовПриИзменении(Элемент)
	
	СтрокаРаспределения = Элементы.Распределение.ТекущиеДанные;
	
	Если СтрокаРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = ПолучитьСтрокуДокументаПоСтрокеРаспределения(СтрокаРаспределения);
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДСтрокиРаспределения = СтрокаРаспределения.ПолучитьИдентификатор();
	
	ИзменениеСтатьиОборотов(ИДСтрокиРаспределения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - действие команды "КомандаОбновитьПереченьДокументов".
// 
&НаКлиенте
Процедура КомандаОбновитьПереченьДокументов(Команда)
	
	Если НЕ Объект.ПереченьДокументов.Количество() = 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьПереченьДокументовОкончание", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, НСтр("ru='Перечень документов будет перезаполнен. Все внесенные изменения будут потеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
		
	Иначе
	
		ОбновитьПеречень();
		
	КонецЕсли;	
		
КонецПроцедуры

// Процедура окончание процедуры "КомандаОбновитьПереченьДокументов".
// 
&НаКлиенте 
Процедура КомандаОбновитьПереченьДокументовОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОбновитьПеречень();
		
	КонецЕсли; 
	
КонецПроцедуры // КомандаОбновитьПереченьДокументовОкончание()

// Процедура - действие команды "КомандаОтобразитьНастройки".
// 
&НаКлиенте
Процедура КомандаОтобразитьНастройки(Команда)
	
	ОтображениеМодифицировалось = Истина;
	
	ОтобразитьНастройки = НЕ ОтобразитьНастройки;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - действие команды "КомандаОтобразитьРаспределение".
// 
&НаКлиенте
Процедура КомандаОтобразитьРаспределение(Команда)
	
	ОтображениеМодифицировалось = Истина;
	
	ОтобразитьРаспределение = НЕ ОтобразитьРаспределение;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - действие команды "КомандаУстановитьФлажки".
// 
&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	
	ОбработатьФлаги(1);
	
КонецПроцедуры

// Процедура - действие команды "КомандаСнятьФлажки".
// 
&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	
	ОбработатьФлаги(0);
	
КонецПроцедуры

// Процедура - действие команды "КомандаИнвертироватьФлажки".
// 
&НаКлиенте
Процедура КомандаИнвертироватьФлажки(Команда)
	
	ОбработатьФлаги(2);
	
КонецПроцедуры

// Процедура - действие команды "КомандаНастройкаПериода".
// 
&НаКлиенте
Процедура КомандаНастройкаПериода(Команда)
	
	ВыборПериода(Объект.Период);
	
КонецПроцедуры

// Процедура - действие команды "КомандаВыполнить".
// 
&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	Если Объект.ПереченьДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("КомандаВыполнитьОкончание", ЭтотОбъект); 
	ТекстВопроса = НСтр("ru='Будет выполнено создание/изменение планируемых поступлений. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
	
КонецПроцедуры

// Процедура окончание процедуры "КомандаВыполнить".
// 
&НаКлиенте 
Процедура КомандаВыполнитьОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СоздатьИзменитьПланируемыеПоступления();
		
	КонецЕсли;
                
КонецПроцедуры // КомандаВыполнитьОкончание()

// Процедура - действие команды "КомандаСинхронизировать".
// 
&НаКлиенте
Процедура КомандаСинхронизировать(Команда)
	
	Если Объект.ПереченьДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("КомандаСинхронизироватьОкончание", ЭтотОбъект); 
	ТекстВопроса = НСтр("ru='Будет выполнена синхронизация планируемых поступлений с платежными позициями. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
	
КонецПроцедуры

// Процедура окончание процедуры "КомандаСинхронизировать".
// 
&НаКлиенте 
Процедура КомандаСинхронизироватьОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СинхронизироватьВСтрокахПланируемыеПоступления();
		
	КонецЕсли;
                
КонецПроцедуры // КомандаСинхронизироватьОкончание()

// Процедура - действие команды "КомандаНастройкиСохранить".
// 
&НаКлиенте
Процедура КомандаНастройкиСохранить(Команда)
	
	ПараметрыФормы     = Новый Структура;
	
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , мКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", мКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - действие команды "КомандаНастройкиВосстановить".
// 
&НаКлиенте
Процедура КомандаНастройкиВосстановить(Команда)
	
	ПараметрыФормы     = Новый Структура;
	
	ПараметрыФормы.Вставить("ТипНастройки"		 , мКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", мКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроек",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек

// Процедура - действие команды "КомандаОткрытьНастройки".
// 
&НаКлиенте
Процедура КомандаОткрытьНастройки(Команда)
	
	СтруктураНастроек = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы = Новый Структура("СтруктураНастроек", СтруктураНастроек);

	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиОкончание",ЭтаФорма);
	ОткрытьФорму("Обработка.бит_ФормированиеПланируемыхПоступлений.Форма.ФормаНастройки",ПараметрыФормы,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура окончание процедуры "ДействияФормыНастройка".
// 
&НаКлиенте 
Процедура ОткрытьНастройкиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		УстановитьДопНастройки(РезультатВыбора);
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ОткрытьНастройкиОкончание()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает значение флага Создать для всех строк в таблице ПереченьДокументов.
// 
// Параметры:
// 	ЗначениеФлага - число - устанавливаемое значение.
// 
&НаКлиенте
Процедура ОбработатьФлаги(ЗначениеФлага)
	
	Для Каждого ТекущаяСтрока Из Объект.ПереченьДокументов Цикл
		
		Если ЗначениеФлага = 0 Тогда
			ТекущаяСтрока.Создать = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			ТекущаяСтрока.Создать = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			ТекущаяСтрока.Создать = НЕ ТекущаяСтрока.Создать;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Функция получает строки распределения для планируемого поступления.
// 
// Параметры:
// 	Распределение - 
// 	ПланируемоеПоступление - ДокументСсылка.бит_ПланируемоеПоступление.
// 	ПлатежнаяПозиция - ДокументСсылка.бит_ПлатежнаяПозиция.
// 
// Возвращаемое значение:
// 	Массив - массив строк таб.части Распределение.
// 
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокиРаспределенияДляДокумента(Распределение, ПлатежнаяПозиция)
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ПлатежнаяПозиция", ПлатежнаяПозиция);
	
	МассивСтрок = Распределение.НайтиСтроки(СтруктураОтбора);
	
	Возврат МассивСтрок;
	
КонецФункции

// Процедура обрабатывает изменение валюты документа в строке таблицы ПереченьДокументов.
// 
// Параметры:
// 	ТекущиеДанные - СтрокаТабличнойЧасти.ПереченьДокументов.
// 
&НаКлиенте
Процедура ИзменениеВалютыВСтроке(ТекущиеДанные) 
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	// Установим новый курс и кратность
	ИзменениеВалюты(ИДСтроки);
	
	// Получим для документа строки табличной части Распределение
	// СтруктураОтбора = Новый Структура;
	// 
	// Если ЗначениеЗаполнено(ТекущиеДанные.ПланируемоеПоступление) Тогда
	// 	СтруктураОтбора.Вставить("ПланируемоеПоступление", ТекущиеДанные.ПланируемоеПоступление);
	// Иначе
	// 	СтруктураОтбора.Вставить("ПлатежнаяПозиция", ТекущиеДанные.ПлатежнаяПозиция);
	// КонецЕсли;
	// 
	// МассивСтрок 			 = Объект.Распределение.НайтиСтроки(СтруктураОтбора);
	МассивСтрок = ПолучитьСтрокиРаспределенияДляДокумента(Объект.Распределение, ТекущиеДанные.ПлатежнаяПозиция);
	МассивСтрокРаспределение = Новый Массив;
	
	СуммаДокумента = 0;
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		СуммаДокумента = СуммаДокумента + ТекущаяСтрока.Сумма;
		
		МассивСтрокРаспределение.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	// Спросим, а не пересчитать ли суммы
	Если мТекущаяВалютаДокумента <> ТекущиеДанные.ВалютаДокумента
		И СуммаДокумента <> 0 Тогда
		
		ДополнительныеДанные = Новый Структура("ТекущиеДанные, МассивСтрокРаспределение", ТекущиеДанные, МассивСтрокРаспределение);
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыВСтрокеОкончание", ЭтотОбъект, ДополнительныеДанные); 
		ПоказатьВопрос(Оповещение, НСтр("ru='Изменилась валюта документа. Пересчитать суммы документа?'"), РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
		
	Иначе 
	
		мТекущаяВалютаДокумента    = ТекущиеДанные.ВалютаДокумента;
		мТекущийКурсДокумента      = ТекущиеДанные.КурсДокумента;
		мТекущаяКратностьДокумента = ТекущиеДанные.КратностьДокумента;
		
	КонецЕсли;	
		
КонецПроцедуры // ИзменениеВалютыВФорме()

// Процедура окончание процедуры "ИзменениеВалютыВСтроке".
// 
&НаКлиенте 
Процедура ИзменениеВалютыВСтрокеОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	ТекущиеДанные 				= ДополнительныеДанные.ТекущиеДанные;
	МассивСтрокРаспределение 	= ДополнительныеДанные.МассивСтрокРаспределение;
	
	ИДСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПересчитатьСуммы(ИДСтроки, МассивСтрокРаспределение, мТекущаяВалютаДокумента, мТекущийКурсДокумента, мТекущаяКратностьДокумента);	
		
	КонецЕсли; 
	
	мТекущаяВалютаДокумента    = ТекущиеДанные.ВалютаДокумента;
	мТекущийКурсДокумента      = ТекущиеДанные.КурсДокумента;
	мТекущаяКратностьДокумента = ТекущиеДанные.КратностьДокумента;
	
КонецПроцедуры // ИзменениеВалютыВСтрокеОкончание()

// Процедура заполняет значения организации, контрагента, 
// валюты по договору контрагента, если данные значения пусты.
// 
&НаКлиенте
Процедура ИзменениеДоговораКонтрагентаКлиент(СтрокаДокумента, СтрокаРаспределения)

	Если НЕ ЗначениеЗаполнено(СтрокаРаспределения.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ИДСтрокиДокумента 	  = СтрокаДокумента.ПолучитьИдентификатор();
	ИДСтрокиРаспределения = СтрокаРаспределения.ПолучитьИдентификатор();
	
	ИзменениеДоговораКонтрагента(ИДСтрокиДокумента, ИДСтрокиРаспределения, Отказ);
	
	Если Отказ = Истина Тогда
		
		СтрокаРаспределения.ДоговорКонтрагента = мТекущийДоговорКонтрагента;
		Возврат;
	
	КонецЕсли; 
	
	// Внутри Оповещение
	ИзменениеВалютыВСтроке(СтрокаДокумента);

КонецПроцедуры // ИзменениеДоговораКонтрагента()

// Функция получает строку таблицы ПереченьДокументов исходя из строки таблицы Распределение.
// 
// Параметры:
// 	СтрокаРаспределения - СтрокаТабличнойЧасти.Распределение.
// 
// Возвращаемое значение:
// 	СтрокаДокумента - Неопределено, СтрокаТабличнойЧасти.ПереченьДокументов.
// 
&НаКлиенте
Функция ПолучитьСтрокуДокументаПоСтрокеРаспределения(СтрокаРаспределения)
	
	// Найдем документ-владелец строки
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ПлатежнаяПозиция", СтрокаРаспределения.ПлатежнаяПозиция);
	
	МассивСтрок = Объект.ПереченьДокументов.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Должна быть одна строка, если больше значит ошибка.
	СтрокаДокумента = МассивСтрок[0];
	
	Возврат СтрокаДокумента;
	
КонецФункции

// Процедура выполняет действия, необходимые при изменении даты поступления.
// 
// Параметры:
//  Идентификатор - Число  
// 
&НаКлиенте
Процедура ИзменениеДатыПоступления(СтрокаДокумента, СтрокаРаспределения)
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ПланируемоеПоступление) Тогда
		ДатаДокумента = СтрокаДокумента.ПланируемоеПоступление.Дата;
	Иначе
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаПоступления", СтрокаРаспределения.ДатаПоступления);
	СтруктураПараметров.Вставить("ДатаДокумента"  , ДатаДокумента);
	
	Если НЕ бит_КазначействоКлиент.ДатаПоступленияКорректна(СтруктураПараметров,Истина) Тогда
		
		СтрокаРаспределения.ДатаПоступления = мТекущаяДатаПоступления;
		Возврат;
		
	КонецЕсли; 
	
	мТекущаяДатаПоступления = СтрокаРаспределения.ДатаПоступления;

	СтруктураПараметров.Вставить("Дата"				 , СтрокаРаспределения.ДатаПоступления);
	СтруктураПараметров.Вставить("ВидДаты"			 , "Дата поступления");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя", СтрокаРаспределения.ДатаПлатежаКрайняя);
	
	Если ЗначениеЗаполнено(СтрокаРаспределения.ДатаПлатежаКрайняя) 
		И бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Ложь) Тогда
		
		СтрокаРаспределения.ДатаПлатежаКрайняя 	= СтрокаРаспределения.ДатаПоступления;
		мТекущаяДатаПлатежаКрайняя 				= СтрокаРаспределения.ДатаПоступления;
			
	КонецЕсли;

КонецПроцедуры // ИзменениеДатыПоступления()

// Процедура выполняет действия, необходимые при изменении крайней даты платежа.
// 
// Параметры:
//  Идентификатор - Число
// 
&НаКлиенте
Процедура ИзменениеКрайнейДатыПлатежа(СтрокаДокумента, СтрокаРаспределения)

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Дата"				 , СтрокаРаспределения.ДатаПоступления);
	СтруктураПараметров.Вставить("ВидДаты"			 , "Дата поступления");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя", СтрокаРаспределения.ДатаПлатежаКрайняя);
	
	Если бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Истина) Тогда
		СтрокаРаспределения.ДатаПлатежаКрайняя = мТекущаяДатаПлатежаКрайняя;
		Возврат;
	КонецЕсли;
	
	мТекущаяДатаПлатежаКрайняя = СтрокаРаспределения.ДатаПлатежаКрайняя;

КонецПроцедуры // ИзменениеКрайнейДатыПлатежа()

// Процедура расчитывает суммму НДС.
// 
// Параметры:
//  Контейнер - Объект, Строка табличной части. 
// 
&НаКлиенте
Процедура РассчитатьСуммуНДСКлиент(СтрокаРаспределения)

	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(СтрокаРаспределения.СтавкаНДС, 
												мКэшЗначений.Перечисления.СтавкиНДС);
	
	СтрокаРаспределения.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(СтрокаРаспределения.Сумма, 
												Истина, 
												Истина, 
												СтавкаНДСЧисло);
																							
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура устанавливает отборы для статьи оборотов.
// 
// Параметры:
//   Контейнер - ПолеФормы
&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатьи(Контейнер)

	МассивПараметров = Новый Массив;
	
	ОтборРасходДоход = Новый ПараметрВыбора("Отбор.РасходДоход",мКэшЗначений.Перечисления.бит_РасходДоход.Поступление);
	ОтборТипСтатьи   = Новый ПараметрВыбора("Отбор.ТипСтатьи"  ,мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
	
	МассивПараметров.Добавить(ОтборРасходДоход);
	МассивПараметров.Добавить(ОтборТипСтатьи);

	Если ТипЗнч(мКэшЗначений.СписокСтатейПринадлежность) = Тип("СписокЗначений") Тогда
		
		ОтборСсылка = Новый ПараметрВыбора("Отбор.Ссылка", мКэшЗначений.СписокСтатейПринадлежность);
		
		МассивПараметров.Добавить(ОтборСсылка);
		
	КонецЕсли; 
	
	Контейнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры // УстановитьПараметрыВыбораСтатьи()

// Процедура открывает форму выбора периода.
// 
// Параметры:
//  Период  - Стандартный период
// 
&НаКлиенте
Процедура ВыборПериода(Период)

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Период;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВыборПериода",ЭтаФорма);
	Диалог.Показать(Оповещение);
	 
КонецПроцедуры // ВыборПериода()

// Процедура выбора периода 
// 
&НаКлиенте 
Процедура ПоказатьВыборПериода(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
	
		Объект.Период = РезультатВыбора;
	
	КонецЕсли; 
	
КонецПроцедуры // ПоказатьВыборПериода

// Процедура устанавливает отборы для договора контрагента.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент)

	СтруктураОтбора = Новый Структура;
	
	// Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	// 	СтруктураОтбора.Вставить("Владелец", Объект.Контрагент);
	// КонецЕсли;
	// 
	// Если ЗначениеЗаполнено(Объект.Организация) Тогда
	// 	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	// КонецЕсли;
	
	Если ЗначениеЗаполнено(мКэшЗначений.СписокВидовДоговоров) Тогда
		СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(мКэшЗначений.СписокВидовДоговоров.ВыгрузитьЗначения()));
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	мКэшЗначений = Новый Структура;

	// Перечисления
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("СтавкиНДС", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СтавкиНДС));
	КэшПеречисления.Вставить("бит_РасходДоход", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_ВидыДенежныхСредств", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыДенежныхСредств));
	мКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	мКэшЗначений.Вставить("Перечисление_ГрафикПлатежей"
							, Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей);
	
	// Валюта регламентированного учета
	мКэшЗначений.Вставить("мВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	// Принадлежность статей оборотов
	мКэшЗначений.Вставить("СписокСтатейПринадлежность", Новый СписокЗначений());
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_ФормированиеПланируемыхПоступлений"));
	мИзмеренияДоп       = ОбработкаОбъект.мИзмеренияДоп;
	мНастройкиИзмерений = ОбработкаОбъект.мНастройкиИзмерений;
	
	мКэшЗначений.Вставить("НастройкиИзмерений", мНастройкиИзмерений);
	мКэшЗначений.Вставить("ИзмеренияДоп"	  , мИзмеренияДоп);

	// Сформируем список доступных видов договоров.
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	бит_ДоговораСервер.ДобавитьВидДоговора(СписокВидовДоговоров, "СКомитентомНаЗакупку");
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);	
	мКэшЗначений.Вставить("СписокВидовДоговоров", СписокВидовДоговоров);
		
	мКэшЗначений.Вставить("ТипНастройки"	   , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	мКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_ФормированиеПланируемыхПоступлений");
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура УстановитьАвтоОтметкуНезаполненногоДляПолей()
	
	ПоступлениеМета = Метаданные.Документы.бит_ПланируемоеПоступлениеДенежныхСредств;
	
	Для Каждого ТекущийРеквизитШапки Из ПоступлениеМета.Реквизиты Цикл
		
		Если НЕ ТекущийРеквизитШапки.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			Продолжить;
		КонецЕсли;
		
		Колонка = Элементы.Найти("ПереченьДокументов"+ТекущийРеквизитШапки.Имя);
		
		Если Колонка = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Колонка.АвтоОтметкаНезаполненного = Истина;
	КонецЦикла;
	
	Для Каждого ТекущийРеквизитТаб Из ПоступлениеМета.ТабличныеЧасти.Распределение.Реквизиты Цикл
		
		Если НЕ ТекущийРеквизитТаб.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			Продолжить;
		КонецЕсли;
		
		Колонка = Элементы.Найти("Распределение"+ТекущийРеквизитТаб.Имя);
		
		Если Колонка = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Колонка.АвтоОтметкаНезаполненного = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДопИзмеренияВТабличныхПолях()
	
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	,"Распределение"
																	,мКэшЗначений.ИзмеренияДоп
																	,мКэшЗначений.НастройкиИзмерений);
																	
	СоответствиеИмен = Новый Соответствие;
	Для Каждого ТекущаяАналитика Из мКэшЗначений.ИзмеренияДоп Цикл
		Структура = Новый Структура;
		
		Структура.Вставить("ИмяПоля" , "Распределение"+ТекущаяАналитика.Ключ+"_Расходование");
		Структура.Вставить("Префикс" , "");
		Структура.Вставить("Постфикс", " (расходование)");
		
		СоответствиеИмен.Вставить(ТекущаяАналитика.Ключ, Структура);
	КонецЦикла;
	
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	,"Распределение"
																	,мКэшЗначений.ИзмеренияДоп
																	,мКэшЗначений.НастройкиИзмерений
																	,СоответствиеИмен);
																	
	// СоответствиеИмен = Новый Соответствие;
	// Для Каждого ТекущаяАналитика Из мКэшЗначений.ИзмеренияДоп Цикл
	// 	Структура = Новый Структура;
	// 	
	// 	Структура.Вставить("ИмяПоля" , "Распределение"+ТекущаяАналитика.Ключ+"_Эталон");
	// 	Структура.Вставить("Префикс" , "");
	// 	Структура.Вставить("Постфикс", " (эталон)");
	// 	
	// 	СоответствиеИмен.Вставить(ТекущаяАналитика.Ключ, Структура);
	// КонецЦикла;
	// 
	// бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
	// 																,"Распределение"
	// 																,мКэшЗначений.ИзмеренияДоп
	// 																,мКэшЗначений.НастройкиИзмерений
	// 																,СоответствиеИмен);																
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформление()
	
	ТабПеречень = Объект.ПереченьДокументов.Выгрузить(Новый Массив);
	КолонкиПеречня = ТабПеречень.Колонки;
	
	ЦветРазличийПолей = Новый Цвет(253,160,160);
	
	// Покрасим поля в которых значения отличаются от значений по умолчанию.
	Для Каждого ТекущаяКолонка Из КолонкиПеречня Цикл 
		
		КолонкаЭталон = КолонкиПеречня.Найти(ТекущаяКолонка.Имя+"_Эталон");
		
		Если КолонкаЭталон = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОформления.Использование = Истина;
		
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемыеПоля.Использование = Истина;
		ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("ПереченьДокументов"+ТекущаяКолонка.Имя);
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветРазличийПолей);
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ПереченьДокументов."+ТекущаяКолонка.Имя);
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПереченьДокументов."+ТекущаяКолонка.Имя+"_Эталон");
	КонецЦикла;	
	
	ТабРаспределение = Объект.Распределение.Выгрузить(Новый Массив);
	КолонкиРаспределения = ТабРаспределение.Колонки;
	
	// Покрасим поля в которых значения отличаются от значений по умолчанию.
	Для Каждого ТекущаяКолонка Из КолонкиРаспределения Цикл 
		
		КолонкаЭталон = КолонкиРаспределения.Найти(ТекущаяКолонка.Имя+"_Эталон");
		
		Если КолонкаЭталон = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОформления.Использование = Истина;
		
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемыеПоля.Использование = Истина;
		ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("Распределение"+ТекущаяКолонка.Имя);
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветРазличийПолей);
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Распределение."+ТекущаяКолонка.Имя);
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Распределение."+ТекущаяКолонка.Имя+"_Эталон");
	КонецЦикла;
	
КонецПроцедуры

// Функция обращается к процедуре модуля объекта для инициализации СКД и пользовательских настроек.
// 
// Параметры:
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - пользовательские настройки.
// 
// Возвращаемое значение:
// 	АдресСКД - строка - адрес СКД во временном хранилище.
// 
&НаСервере
Функция ИнициализироватьКомпоновщикСервер(пКомпоновщик)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	АдресСКД = ОбработкаОбъект.ИнициализироватьКомпоновщик(пКомпоновщик);
	
	Возврат АдресСКД;
	     
КонецФункции

// Процедура заполняет табличные часть ПереченьДокументов и Распределение.
// 
// Параметры:
// 	нет
// 
&НаСервере
Процедура ОбновитьПеречень()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ПараметрыСКД = Объект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("Период", Объект.Период);
	ПараметрыСКД.УстановитьЗначениеПараметра("ПустаяДата", Дата("00010101"));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиСКД = Объект.КомпоновщикНастроек.ПолучитьНастройки(); 
	
	ПараметрРежимВыбора = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РежимВыбора"));
	
	Если НЕ ПараметрРежимВыбора = Неопределено
		И НЕ ПараметрРежимВыбора.Использование Тогда
		
		ПараметрРежимВыбора.Использование = Истина;
		ПараметрРежимВыбора.Значение = "Все";
		
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
												НастройкиСКД,
												,
												,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаПереченьПолный = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаПереченьПолный);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Запомним параметры текущей строки, чтобы ее можно было потом восстановить.
	ИДТекПозиция = Элементы.ПереченьДокументов.ТекущаяСтрока;
	ПараметрыОтбора = Новый Структура;
	Если НЕ ИДТекПозиция = Неопределено Тогда
		ТекПозиция = Объект.ПереченьДокументов.НайтиПоИдентификатору(ИДТекПозиция);
		ПараметрыОтбора.Вставить("ПлатежнаяПозиция", ТекПозиция.ПлатежнаяПозиция);
	КонецЕсли;
	
	Объект.ПереченьДокументов.Загрузить(ТаблицаПереченьПолный);
	
	// Восстановим текущую строку, на которой был пользователь до перезаполнения.
	НайденныеСтроки = Объект.ПереченьДокументов.НайтиСтроки(ПараметрыОтбора);
	
	Если НЕ НайденныеСтроки.Количество() = 0 Тогда
		ИДТекПозиция = НайденныеСтроки[0].ПолучитьИдентификатор();
		Элементы.ПереченьДокументов.ТекущаяСтрока = ИДТекПозиция;
	КонецЕсли;
	
	Для Каждого СтрокаПеречня Из Объект.ПереченьДокументов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаПеречня.ПлатежнаяПозиция) Тогда	
			СтрокаПеречня.Картинка_Расходование = -1;
		ИначеЕсли СтрокаПеречня.ПлатежнаяПозиция.Проведен Тогда
			СтрокаПеречня.Картинка_Расходование = 1;
		ИначеЕсли СтрокаПеречня.ПлатежнаяПозиция.ПометкаУдаления Тогда
			СтрокаПеречня.Картинка_Расходование = 2;
		Иначе
			СтрокаПеречня.Картинка_Расходование = 0;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаПеречня.ПланируемоеПоступление) Тогда	
			СтрокаПеречня.Картинка_Поступление = -1;
		ИначеЕсли СтрокаПеречня.ПланируемоеПоступление.Проведен Тогда
			СтрокаПеречня.Картинка_Поступление  = 1;
		ИначеЕсли СтрокаПеречня.ПланируемоеПоступление.ПометкаУдаления Тогда
			СтрокаПеречня.Картинка_Поступление  = 2;
		Иначе
			СтрокаПеречня.Картинка_Поступление  = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПеречень = ТаблицаПереченьПолный.Скопировать(, "ЗаявкаНаРасходование, ПлатежнаяПозиция, ПланируемоеПоступление, СпособПолученияРеквизитов, СпособПолученияРеквизитовРасхода");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПереченьДокументов.ЗаявкаНаРасходование,
	|	ПереченьДокументов.ПлатежнаяПозиция,
	|	ПереченьДокументов.ПланируемоеПоступление,
	|	ПереченьДокументов.СпособПолученияРеквизитов,
	|	ПереченьДокументов.СпособПолученияРеквизитовРасхода
	|ПОМЕСТИТЬ ПереченьДокументов
	|ИЗ
	|	&ПереченьДокументов КАК ПереченьДокументов
	|;
	|
	// +СБ. Широков Николай. 2015-03-23. Доработка #1374
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПереченьДокументов.ПлатежнаяПозиция,
	|	ПереченьДокументов.ПланируемоеПоступление,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.ИД
	|ПОМЕСТИТЬ ОбъединениеТаблиц
	|ИЗ
	|	ПереченьДокументов КАК ПереченьДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ПланируемоеПоступлениеДенежныхСредств.Распределение КАК бит_ПланируемоеПоступлениеДенежныхСредствРаспределение
	|		ПО ПереченьДокументов.ПланируемоеПоступление = бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПереченьДокументов.ПлатежнаяПозиция,
	|	ПереченьДокументов.ПланируемоеПоступление,
	|	бит_ПлатежнаяПозицияРаспределение.ИД
	|ИЗ
	|	ПереченьДокументов КАК ПереченьДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
	|		ПО ПереченьДокументов.ПлатежнаяПозиция = бит_ПлатежнаяПозицияРаспределение.Ссылка
	|;
	// -СБ. Широков Николай
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка КАК ПлатежнаяПозиция,
	|	NULL КАК ПланируемоеПоступление,
	|	бит_ПлатежнаяПозицияРаспределение.ИД,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ЦФО,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Проект,
	|	бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяПоступления КАК СтатьяОборотов,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НоменклатурнаяГруппа,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	NULL КАК ДоговорКонтрагента,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетОрганизацияПриемник КАК БанковскийСчет,
	|	бит_ПлатежнаяПозицияРаспределение.Сумма,
	|	бит_ПлатежнаяПозицияРаспределение.СтавкаНДС,
	|	бит_ПлатежнаяПозицияРаспределение.НДС,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_1,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_2,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_3,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_4,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_5,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_6,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_7,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаРасхода КАК ДатаПоступления,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаПлатежаКрайняя,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ЦФО КАК ЦФО_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Проект КАК Проект_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов КАК СтатьяОборотов_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка.Контрагент КАК Контрагент_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ДоговорКонтрагента КАК ДоговорКонтрагента_Расходование,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетОрганизацияПриемник КАК БанковскийСчет_Расходование,
	|	бит_ПлатежнаяПозицияРаспределение.Сумма КАК Сумма_Расходование,
	|	бит_ПлатежнаяПозицияРаспределение.СтавкаНДС КАК СтавкаНДС_Расходование,
	|	бит_ПлатежнаяПозицияРаспределение.НДС КАК НДС_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_1 КАК Аналитика_1_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_2 КАК Аналитика_2_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_3 КАК Аналитика_3_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_4 КАК Аналитика_4_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_5 КАК Аналитика_5_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_6 КАК Аналитика_6_Расходование,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_7 КАК Аналитика_7_Расходование,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаРасхода КАК ДатаРасхода_Расходование,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаПлатежаКрайняя КАК ДатаПлатежаКрайняя_Расходование,
	|	ПереченьДокументов.СпособПолученияРеквизитов КАК СпособПолученияРеквизитов,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ЦФО КАК ЦФО_Эталон,
	|	бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяПоступления КАК СтатьяОборотов_Эталон,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент_Эталон,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетОрганизацияПриемник КАК БанковскийСчет_Эталон,
	|	бит_ПлатежнаяПозицияРаспределение.Сумма КАК Сумма_Эталон,
	|	бит_ПлатежнаяПозицияРаспределение.СтавкаНДС КАК СтавкаНДС_Эталон,
	|	бит_ПлатежнаяПозицияРаспределение.НДС КАК НДС_Эталон,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаРасхода КАК ДатаПоступления_Эталон,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаПлатежаКрайняя КАК ДатаПлатежаКрайняя_Эталон,
	|	""Отсутствует"" КАК БалансСтрок
	|ИЗ
	|	ПереченьДокументов КАК ПереченьДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствиеСтатейПоступленияИРасходованияДС КАК бит_СоответствиеСтатейПоступленияИРасходованияДС
	|				ПО бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов = бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяРасходования
	|			ПО бит_ПлатежнаяПозицияРаспределение.Ссылка.ДокументОснование = бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка
	|				И бит_ПлатежнаяПозицияРаспределение.ИД = бит_ЗаявкаНаРасходованиеСредствРаспределение.ИД
	|		ПО ПереченьДокументов.ПлатежнаяПозиция = бит_ПлатежнаяПозицияРаспределение.Ссылка
	|ГДЕ
	|	ПереченьДокументов.СпособПолученияРеквизитов = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка,
	|	NULL,
	|	бит_ПлатежнаяПозицияРаспределение.ИД,
	|	бит_ЦФО_Подразделения.ЦФО,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Проект,
	|	бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяПоступления,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НоменклатурнаяГруппа,
	|	бит_СобственныеКонтрагенты.Контрагент,
	|	NULL,
	|	БанковскиеСчета.Ссылка,
	|	бит_ПлатежнаяПозицияРаспределение.Сумма,
	|	бит_ПлатежнаяПозицияРаспределение.СтавкаНДС,
	|	бит_ПлатежнаяПозицияРаспределение.НДС,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_1,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_2,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_3,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_4,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_5,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_6,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_7,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаРасхода,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаПлатежаКрайняя,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ЦФО,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Проект,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НоменклатурнаяГруппа,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка.Контрагент,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ДоговорКонтрагента,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетКонтрагент,
	|	бит_ПлатежнаяПозицияРаспределение.Сумма,
	|	бит_ПлатежнаяПозицияРаспределение.СтавкаНДС,
	|	бит_ПлатежнаяПозицияРаспределение.НДС,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_1,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_2,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_3,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_4,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_5,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_6,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_7,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаРасхода,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаПлатежаКрайняя,
	|	ПереченьДокументов.СпособПолученияРеквизитов,
	|	бит_ЦФО_Подразделения.ЦФО,
	|	бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяПоступления,
	|	бит_СобственныеКонтрагенты.Контрагент,
	|	БанковскиеСчета.Ссылка,
	|	бит_ПлатежнаяПозицияРаспределение.Сумма,
	|	бит_ПлатежнаяПозицияРаспределение.СтавкаНДС,
	|	бит_ПлатежнаяПозицияРаспределение.НДС,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаРасхода,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаПлатежаКрайняя,
	|	""Отсутствует""
	|ИЗ
	|	ПереченьДокументов КАК ПереченьДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеОрганизации
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ЦФО_Подразделения КАК бит_ЦФО_Подразделения
	|					ПО бит_СобственныеОрганизации.Объект = бит_ЦФО_Подразделения.Подразделение
	|				ПО бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка.Контрагент = бит_СобственныеОрганизации.Контрагент
	|					И (бит_СобственныеОрганизации.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСобственныхКонтрагентов.Организация))
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствиеСтатейПоступленияИРасходованияДС КАК бит_СоответствиеСтатейПоступленияИРасходованияДС
	|				ПО бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов = бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяРасходования
	|			ПО бит_ПлатежнаяПозицияРаспределение.Ссылка.ДокументОснование = бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка
	|				И бит_ПлатежнаяПозицияРаспределение.ИД = бит_ЗаявкаНаРасходованиеСредствРаспределение.ИД
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты
	|			ПО бит_ПлатежнаяПозицияРаспределение.Ссылка.Организация = бит_СобственныеКонтрагенты.Объект
	|				И (бит_СобственныеКонтрагенты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСобственныхКонтрагентов.Организация))
	// +СБ. Широков Николай. 2014-10-02. ТЗ "Казначейство" 2.2.4.3. 
	|				И (бит_СобственныеКонтрагенты.СБ_Основной)
	// -СБ. Широков Николай
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|			ПО бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетКонтрагент.НомерСчета = БанковскиеСчета.НомерСчета
	|				И бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетКонтрагент.Банк = БанковскиеСчета.Банк
	|				И (бит_СобственныеОрганизации.Объект = БанковскиеСчета.Владелец)
	|		ПО ПереченьДокументов.ПлатежнаяПозиция = бит_ПлатежнаяПозицияРаспределение.Ссылка
	|ГДЕ
	|	ПереченьДокументов.СпособПолученияРеквизитов = 2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъединениеТаблиц.ПлатежнаяПозиция,
	|	ОбъединениеТаблиц.ПланируемоеПоступление,
	|	ОбъединениеТаблиц.ИД,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.ЦФО,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Проект,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.СтатьяОборотов,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.НоменклатурнаяГруппа,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Контрагент,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.ДоговорКонтрагента,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.БанковскийСчет,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Сумма,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.СтавкаНДС,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.НДС,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Аналитика_1,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Аналитика_2,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Аналитика_3,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Аналитика_4,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Аналитика_5,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Аналитика_6,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Аналитика_7,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.ДатаПоступления,
	|	бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.ДатаПлатежаКрайняя,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ЦФО,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Проект,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НоменклатурнаяГруппа,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка.Контрагент,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ПереченьДокументов.СпособПолученияРеквизитовРасхода = 1
	|			ТОГДА бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетОрганизацияПриемник
	|		КОГДА ПереченьДокументов.СпособПолученияРеквизитовРасхода = 2
	|			ТОГДА бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетКонтрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	бит_ПлатежнаяПозицияРаспределение.Сумма,
	|	бит_ПлатежнаяПозицияРаспределение.СтавкаНДС,
	|	бит_ПлатежнаяПозицияРаспределение.НДС,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_1,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_2,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_3,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_4,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_5,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_6,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_7,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаРасхода,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаПлатежаКрайняя,
	|	ПереченьДокументов.СпособПолученияРеквизитов,
	|	ВЫБОР
	|		КОГДА ПереченьДокументов.СпособПолученияРеквизитовРасхода = 1
	|			ТОГДА бит_ЗаявкаНаРасходованиеСредствРаспределение.ЦФО
	|		КОГДА ПереченьДокументов.СпособПолученияРеквизитовРасхода = 2
	|			ТОГДА бит_ЦФО_Подразделения.ЦФО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяПоступления,
	|	ВЫБОР
	|		КОГДА ПереченьДокументов.СпособПолученияРеквизитовРасхода = 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		КОГДА ПереченьДокументов.СпособПолученияРеквизитовРасхода = 2
	|			ТОГДА бит_СобственныеКонтрагенты.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПереченьДокументов.СпособПолученияРеквизитовРасхода = 1
	|			ТОГДА бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетОрганизацияПриемник
	|		КОГДА ПереченьДокументов.СпособПолученияРеквизитовРасхода = 2
	|			ТОГДА БанковскиеСчета.Ссылка
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	бит_ПлатежнаяПозицияРаспределение.Сумма,
	|	бит_ПлатежнаяПозицияРаспределение.СтавкаНДС,
	|	бит_ПлатежнаяПозицияРаспределение.НДС,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаРасхода,
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДатаПлатежаКрайняя,
	|	ВЫБОР
	|		КОГДА бит_ПлатежнаяПозицияРаспределение.Ссылка ЕСТЬ NULL 
	|			ТОГДА ""Добавлена""
	|		КОГДА бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Ссылка ЕСТЬ NULL 
	|			ТОГДА ""Отсутствует""
	|		ИНАЧЕ ""ВНаличии""
	|	КОНЕЦ
	|ИЗ
	|	ПереченьДокументов КАК ПереченьДокументов
	// +СБ. Широков Николай. 2015-03-23. Доработка #1374
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			ВЫБОР
	//|				КОГДА бит_ПлатежнаяПозиция.Ссылка ЕСТЬ NULL 
	//|					ТОГДА бит_ПлатежнаяПозицияРаспределение.Ссылка
	//|				ИНАЧЕ бит_ПлатежнаяПозиция.Ссылка
	//|			КОНЕЦ КАК ПлатежнаяПозиция,
	//|			бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Ссылка КАК ПланируемоеПоступление,
	//|			ВЫБОР
	//|				КОГДА бит_ПлатежнаяПозиция.Ссылка ЕСТЬ NULL 
	//|					ТОГДА бит_ПлатежнаяПозицияРаспределение.ИД
	//|				ИНАЧЕ бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.ИД
	//|			КОНЕЦ КАК ИД
	//|		ИЗ
	//|			Документ.бит_ПланируемоеПоступлениеДенежныхСредств.Распределение КАК бит_ПланируемоеПоступлениеДенежныхСредствРаспределение
	//|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	//|				ПО бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Ссылка.ДокументОснование = бит_ПлатежнаяПозиция.Ссылка
	//|				ПОЛНОЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
	//|				ПО бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Ссылка.ДокументОснование = бит_ПлатежнаяПозицияРаспределение.Ссылка
	//|					И бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.ИД = бит_ПлатежнаяПозицияРаспределение.ИД) КАК ОбъединениеТаблиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъединениеТаблиц
	// -СБ. Широков Николай
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПланируемоеПоступлениеДенежныхСредств.Распределение КАК бит_ПланируемоеПоступлениеДенежныхСредствРаспределение
	|			ПО ОбъединениеТаблиц.ПланируемоеПоступление = бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.Ссылка
	|				И ОбъединениеТаблиц.ИД = бит_ПланируемоеПоступлениеДенежныхСредствРаспределение.ИД
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеОрганизации
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ЦФО_Подразделения КАК бит_ЦФО_Подразделения
	|						ПО бит_СобственныеОрганизации.Объект = бит_ЦФО_Подразделения.Подразделение
	|					ПО бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка.Контрагент = бит_СобственныеОрганизации.Контрагент
	|						И (бит_СобственныеОрганизации.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСобственныхКонтрагентов.Организация))
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствиеСтатейПоступленияИРасходованияДС КАК бит_СоответствиеСтатейПоступленияИРасходованияДС
	|					ПО бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов = бит_СоответствиеСтатейПоступленияИРасходованияДС.СтатьяРасходования
	|				ПО бит_ПлатежнаяПозицияРаспределение.Ссылка.ДокументОснование = бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка
	|					И бит_ПлатежнаяПозицияРаспределение.ИД = бит_ЗаявкаНаРасходованиеСредствРаспределение.ИД
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты
	|				ПО бит_ПлатежнаяПозицияРаспределение.Ссылка.Организация = бит_СобственныеКонтрагенты.Объект
	|					И (бит_СобственныеКонтрагенты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСобственныхКонтрагентов.Организация))
	// +СБ. Широков Николай. 2014-10-02. ТЗ "Казначейство" 2.2.4.3. 
	|					И (бит_СобственныеКонтрагенты.СБ_Основной)
	// -СБ. Широков Николай
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|				ПО бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетКонтрагент.Банк = БанковскиеСчета.Банк
	|					И бит_ПлатежнаяПозицияРаспределение.Ссылка.БанковскийСчетКонтрагент.НомерСчета = БанковскиеСчета.НомерСчета
	|					И (бит_СобственныеОрганизации.Объект = БанковскиеСчета.Владелец)
	|			ПО ОбъединениеТаблиц.ПлатежнаяПозиция = бит_ПлатежнаяПозицияРаспределение.Ссылка
	|				И ОбъединениеТаблиц.ИД = бит_ПлатежнаяПозицияРаспределение.ИД
	|		ПО ПереченьДокументов.ПлатежнаяПозиция = ОбъединениеТаблиц.ПлатежнаяПозиция
	|ГДЕ
	|	ПереченьДокументов.СпособПолученияРеквизитов = 3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПереченьДокументов";
	
	Запрос.УстановитьПараметр("ПереченьДокументов", ТаблицаПеречень);
	
	Результат = Запрос.Выполнить();
	
	Объект.Распределение.Загрузить(Результат.Выгрузить());
	
	// Если нет активной строки в ПеречнеДокументов, то Распределение должно быть пустым.
	ТекущиеДанные = Элементы.ПереченьДокументов.ТекущаяСтрока;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		СтруктураОтбора = Новый Структура;
		
		СтруктураОтбора.Вставить("ПлатежнаяПозиция", Документы.бит_ПлатежнаяПозиция.ПустаяСсылка());
		
		ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		
		Элементы.Распределение.ОтборСтрок = ОтборСтрок;
		
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает новый курс и кратность для документа.
// 
// Параметры:
// 	ИДСтроки - число - идентификатор строки таблицы ПереченьДокументов.
// 
&НаСервере
Процедура ИзменениеВалюты(ИДСтроки)
	
	ТекущиеДанные = Объект.ПереченьДокументов.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПланируемоеПоступление) Тогда
		ДатаКурса = ТекущиеДанные.ПланируемоеПоступление.Дата;
	Иначе
		ДатаКурса = ТекущаяДата();
	КонецЕсли;
	
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаДокумента, ДатаКурса);
	
	ТекущиеДанные.КурсДокумента      = СтрКурса.Курс;
	ТекущиеДанные.КратностьДокумента = СтрКурса.Кратность;
	
КонецПроцедуры // ИзменениеВалютыВызовМодуля()

// Процедура расчитывает суммму НДС.
// 
// Параметры:
// 	Сумма - число - сумма, от которой будет рассчитываться НДС.
// 	СтавкаНДС - ПеречислениеСсылка.СтавкиНДС.
// 
&НаСервереБезКонтекста
Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС)

	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(СтавкаНДС, Перечисления.СтавкиНДС);
	
	НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Сумма
												,Истина
												,Истина
												,СтавкаНДСЧисло);
												
	Возврат НДС;
																							
КонецФункции // РассчитатьСуммуНДС()

// Процедура пересчитывает суммы документа.
// 
// Параметры:
// 	ИДСтрокиДокумента 		 - число - идентификатор строки таблицы ПереченьДокументов.
// 	МассивСтрокРаспределение - массив - содержит идентификаторы строк таблицы Распределение
// 										, для которых необходимо произвести расчет.
//  мТекущаяВалюта    		 - СправочникСсылка.Валюты.
//  мТекущийКурс	  		 - Число.
//  мТекущаяКратность 		 - Число.
// 
&НаСервере
Процедура ПересчитатьСуммы(ИДСтрокиДокумента, МассивСтрокРаспределение, мТекущаяВалюта, мТекущийКурс, мТекущаяКратность)

	СтрокаДокумента = Объект.ПереченьДокументов.НайтиПоИдентификатору(ИДСтрокиДокумента);
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИДСтрокиТаблицы Из МассивСтрокРаспределение Цикл
		
		СтрокаТаблицы = Объект.Распределение.НайтиПоИдентификатору(ИДСтрокиТаблицы);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
															,мТекущаяВалюта
															,СтрокаДокумента.ВалютаДокумента
															,мТекущийКурс
															,СтрокаДокумента.КурсДокумента
															,мТекущаяКратность
															,СтрокаДокумента.КратностьДокумента);
															
		СтрокаТаблицы.НДС = РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, СтрокаТаблицы.СтавкаНДС);
		
	КонецЦикла; 

КонецПроцедуры // ПересчитатьСуммы()

// Процедура обрабатывает ситуацию изменения организации документа поступления.
// 
// Параметры:
// 	нет
// 
&НаСервере
Процедура ИзменениеОрганизацииДокумента(ИДСтрокиДокумента)
	
	ТекущиеДанные = Объект.ПереченьДокументов.НайтиПоИдентификатору(ИДСтрокиДокумента);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получим для документа строки табличной части Распределение.
	МассивСтрок = ПолучитьСтрокиРаспределенияДляДокумента(Объект.Распределение, ТекущиеДанные.ПлатежнаяПозиция);
	
	Для Каждого СтрокаРаспределения Из МассивСтрок Цикл
		
		// Обработаем договор
		Если ЗначениеЗаполнено(ТекущиеДанные.Организация)
			И ЗначениеЗаполнено(СтрокаРаспределения.ДоговорКонтрагента)
			И НЕ СтрокаРаспределения.ДоговорКонтрагента.Организация = ТекущиеДанные.Организация Тогда
			
			СтрокаРаспределения.ДоговорКонтрагента = Неопределено;
			
		КонецЕсли;
		
		// Обработаем банковский счет
		СтрокаРаспределения.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		
		Если ТекущиеДанные.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
				бит_МеханизмыТиповых.УстановитьБанковскийСчет(СтрокаРаспределения.БанковскийСчет, ТекущиеДанные.Организация, 
																	ТекущиеДанные.ВалютаДокумента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет действия, необходимые при изменении формы оплаты.
// 
&НаСервере
Процедура ИзменениеФормыОплаты(ИДСтрокиДокумента)

	ТекущиеДанные = Объект.ПереченьДокументов.НайтиПоИдентификатору(ИДСтрокиДокумента);
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Получим для документа строки табличной части Распределение.
	МассивСтрок = ПолучитьСтрокиРаспределенияДляДокумента(Объект.Распределение, ТекущиеДанные.ПлатежнаяПозиция);
	
	Для Каждого СтрокаРаспределения Из МассивСтрок Цикл
		
		СтрокаРаспределения.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		
		Если ТекущиеДанные.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
				бит_МеханизмыТиповых.УстановитьБанковскийСчет(СтрокаРаспределения.БанковскийСчет, ТекущиеДанные.Организация, 
																	ТекущиеДанные.ВалютаДокумента);
			КонецЕсли;
						
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры // ИзменениеФормыОплаты()

// Процедура выполняет действия, необходимые при изменении договора контрагента.
// 
// Параметры:
//  Отказ  - Булево
// 
&НаСервере
Процедура ИзменениеДоговораКонтрагента(ИДСтрокиДокумента, ИДСтрокиРаспределения, Отказ)
	
	СтрокаДокумента 	= Объект.ПереченьДокументов.НайтиПоИдентификатору(ИДСтрокиДокумента);
	СтрокаРаспределения = Объект.Распределение.НайтиПоИдентификатору(ИДСтрокиРаспределения);
	
	Контрагент  = СтрокаРаспределения.ДоговорКонтрагента.Владелец;
    Организация = СтрокаРаспределения.ДоговорКонтрагента.Организация;
	
	Если ЗначениеЗаполнено(СтрокаРаспределения.Контрагент) 
		И СтрокаРаспределения.Контрагент <> Контрагент Тогда
		
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Организация) 
		И СтрокаДокумента.Организация <> Организация Тогда
		
    	Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаДокумента.Организация = Организация;
	
	СтрокаДокумента.ВалютаДокумента = ?(СтрокаРаспределения.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, 
										мКэшЗначений.мВалютаРеглУчета, 
										СтрокаРаспределения.ДоговорКонтрагента.ВалютаВзаиморасчетов);
						
	СтрокаРаспределения.Контрагент = Контрагент;
	
КонецПроцедуры // ИзменениеДоговораКонтрагента()

// Процедура выполняет действия на сервере, необходимые при изменении ЦФО.
// 
// Параметры:
//  СтруктураПараметров  - Структура.
// 
&НаСервере
Процедура ИзменениеЦФО(СтруктураПараметров, ИДСтрокиДокумента, ИДСтрокиРаспределения)

	СтруктураПараметров.СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежности(Истина, ИДСтрокиДокумента, ИДСтрокиРаспределения);

КонецПроцедуры // ИзменениеЦФО()

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается 
// основной договор или единственный или пустая ссылка.
// 
&НаСервереБезКонтекста
Процедура УстановитьДоговорКонтрагентаНаСервере(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено)
	
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(ДоговорКонтрагента,
													ВладелецДоговора, 
													ОрганизацияДоговора, 
													СписокВидовДоговора, 
													СтруктураПараметров);
	
КонецПроцедуры

// функция получает список статей, принадлежащих данному ЦФО.
// 
&НаСервере
Функция ПолучитьСписокСтатейПоПринадлежности(ВыводитьСообщения = Ложь, ИДСтрокиДокумента, ИДСтрокиРаспределения)

	СтрокаДокумента 	= Объект.ПереченьДокументов.НайтиПоИдентификатору(ИДСтрокиДокумента);
	СтрокаРаспределения = Объект.Распределение.НайтиПоИдентификатору(ИДСтрокиРаспределения);
	
	ПараметрЦФО = СтрокаРаспределения.ЦФО;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ПланируемоеПоступление) Тогда
		ДатаДокумента = СтрокаДокумента.ПланируемоеПоступление.Дата;
	Иначе
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
 	СтруктураПараметров = Новый Структура;
 	СтруктураПараметров.Вставить("Дата"       ,ДатаДокумента);
	СтруктураПараметров.Вставить("ЦФО"        ,ПараметрЦФО);
	СтруктураПараметров.Вставить("Организация",СтрокаДокумента.Организация);
	СтруктураПараметров.Вставить("РасходДоход",Перечисления.бит_РасходДоход.Поступление);
	СтруктураПараметров.Вставить("ТипСтатьи"  ,Перечисления.бит_ТипыСтатейОборотов.БДДС);
	
	Если ВыводитьСообщения Тогда
		СтруктураПараметров.Вставить("ВыводитьСообщения",Истина);
	КонецЕсли; 
		
	СписокСтатей = бит_Казначейство.ПолучитьСписокСтатейПоПринадлежности(СтруктураПараметров);
	
	Возврат СписокСтатей;
	
КонецФункции // ПолучитьСписокСтатейПоПринадлежности()

// Процедура выполняет действия на сервере, необходимые при изменении СтатьиОборотов.
// 
&НаСервере
Процедура ИзменениеСтатьиОборотов(ИДСтрокиРаспределения)

	СтрокаРаспределения = Объект.Распределение.НайтиПоИдентификатору(ИДСтрокиРаспределения);

	СтрокаРаспределения.СтавкаНДС = СтрокаРаспределения.СтатьяОборотов.СтавкаНДС;
	
	СтрокаРаспределения.НДС = РассчитатьСуммуНДС(СтрокаРаспределения.Сумма, СтрокаРаспределения.СтавкаНДС);
  
КонецПроцедуры // ИзменениеСтатьиОборотов()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") 
		И СтруктураНастроек.Свойство("ПользовательскиеНастройки") Тогда
		
		ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_ФормированиеПланируемыхПоступлений"));
		ОбработкаОбъект.РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек);
		
	Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Настройки не восстановлены.");
	КонецЕсли;  		
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(мКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	ПрименитьНастройки(НастройкаПоУмолчанию);
	
	Если Объект.РежимСообщений = "" И Объект.РежимЗаписи = "" Тогда
		
		// Если настройки нет - заполним значения по умолчанию.
		Объект.РежимСообщений = "Все";
		Объект.РежимЗаписи    = "Запись";
	 				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Период.ДатаНачала)
		И НЕ ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
		
		ПериодДень = Новый СтандартныйПериод;
		ПериодДень.Вариант = ВариантСтандартногоПериода.Сегодня;
		
		Объект.Период = ПериодДень;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура заполняет отмеченные планируемые поступления новыми значениями.
// 
// Параметры:
// 	нет
// 
&НаСервере
Процедура СоздатьИзменитьПланируемыеПоступления(РежимСинхронизации=Ложь)
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Создать", Истина);
	
	ОтмеченныеСтроки = Объект.ПереченьДокументов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из ОтмеченныеСтроки Цикл
		
		Если НЕ ТекущаяСтрока.УсловиеСозданияВыполняется Тогда
			Заголовок = НСтр("ru='Документ """+ТекущаяСтрока.ПланируемоеПоступление
							+""" будет помечен на удаление, т.к. не выполняются условия для его синхронизации с платежной позицией'");
			бит_ОбщегоНазначения.ИзменитьПометкуНаУдалениеУОбъекта(ТекущаяСтрока.ПланируемоеПоступление, Истина, Заголовок, Объект.РежимСообщений);
			
			Продолжить;
		КонецЕсли;
		
		Если РежимСинхронизации
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПланируемоеПоступление) Тогда
			
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПланируемоеПоступление)	
			И ТекущаяСтрока.ПлатежнаяПозиция.ПометкаУдаления Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПланируемоеПоступление) Тогда
			ПоступлениеОбъект = ТекущаяСтрока.ПланируемоеПоступление.ПолучитьОбъект();
			
			Заголовок = "Заполнение документа """+ТекущаяСтрока.ПланируемоеПоступление+""" на основании документа """+ТекущаяСтрока.ПлатежнаяПозиция+"""";
			
			РежимЗаписиДокументов = ?(ПоступлениеОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);
		Иначе
			ПоступлениеОбъект = Документы.бит_ПланируемоеПоступлениеДенежныхСредств.СоздатьДокумент();
			
			ПоступлениеОбъект.Дата = ТекущаяДата();
			
			Заголовок = "Создание документа ""Планируемое поступление"" на основании документа """+ТекущаяСтрока.ПлатежнаяПозиция+"""";
			
			РежимЗаписиДокументов = ?(ТекущаяСтрока.ПлатежнаяПозиция.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		// Синхронизируем проведение и отметку на удаление.
		Если РежимСинхронизации Тогда
			Если НЕ ТекущаяСтрока.ПлатежнаяПозиция.ПометкаУдаления = ПоступлениеОбъект.ПометкаУдаления Тогда
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ОбъектПолучен");
				
				бит_ОбщегоНазначения.ИзменитьПометкуНаУдалениеУОбъекта(ПоступлениеОбъект
																	,ТекущаяСтрока.ПлатежнаяПозиция.ПометкаУдаления
																	,Заголовок
																	,Объект.РежимСообщений
																	,СтруктураПараметров);
			КонецЕсли;
			
			Если ПоступлениеОбъект.ПометкаУдаления Тогда
				
				РежимЗаписиДокументов = РежимЗаписиДокумента.Запись;
				
			Иначе
				Если ТекущаяСтрока.ПлатежнаяПозиция.Проведен Тогда
					РежимЗаписиДокументов = РежимЗаписиДокумента.Проведение;
				ИначеЕсли НЕ ТекущаяСтрока.ПлатежнаяПозиция.Проведен
					И ПоступлениеОбъект.Проведен Тогда
					РежимЗаписиДокументов = РежимЗаписиДокумента.ОтменаПроведения;
				Иначе
					РежимЗаписиДокументов = РежимЗаписиДокумента.Запись;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		// Заполним тч Распределение
		СтрокиРаспределения = ПолучитьСтрокиРаспределенияДляДокумента(Объект.Распределение, ТекущаяСтрока.ПлатежнаяПозиция);

		Если СтрокиРаспределения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если РежимСинхронизации Тогда
			МассивКУдалению = Новый Массив;
			
			Ном=0;
			Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				Если СтрокаРаспределения.БалансСтрок = "Добавлена" Тогда
					// Этой строки нет в платежной позиции
					МассивКУдалению.Добавить(Ном);
				КонецЕсли;
				Ном = Ном+1;
			КонецЦикла;
			
			Для Каждого ЭлементКУдалению Из МассивКУдалению Цикл 
				СтрокиРаспределения.Удалить(ЭлементКУдалению);
			КонецЦикла;
		КонецЕсли;
		
		ПоступлениеОбъект.Распределение.Очистить();
		
		бит_Казначейство.ЗаполнитьПланируемоеПоступлениеПоПлатежнойПозиции(ПоступлениеОбъект, ТекущаяСтрока.ПлатежнаяПозиция, ТекущаяСтрока, СтрокиРаспределения);
		
		// +СБ. Широков Николай. 2015-03-16. Доработка #1374 
		ПоступлениеОбъект.СБ_Сценарий = ТекущаяСтрока.СБ_Сценарий;
		// -СБ. Широков Николай
		
		ПоступлениеОбъект.ДополнительныеСвойства.Вставить("ПрограммнаяЗапись");
		
		Если РежимЗаписиДокументов = РежимЗаписиДокумента.Проведение Тогда
			ЕстьНезаполненные = НЕ ПоступлениеОбъект.ПроверитьЗаполнение();
			Если ЕстьНезаполненные Тогда
				Если ПоступлениеОбъект.Проведен Тогда
					РежимЗаписиДокументов = РежимЗаписиДокумента.ОтменаПроведения;
				Иначе
					РежимЗаписиДокументов = РежимЗаписиДокумента.Запись;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПоступлениеОбъект,РежимЗаписиДокументов,Заголовок,Объект.РежимСообщений);
	КонецЦикла;
	
	ОбновитьПеречень();
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьВСтрокахПланируемыеПоступления()
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Создать", Истина);
	
	ОтмеченныеСтроки = Объект.ПереченьДокументов.НайтиСтроки(СтруктураОтбора);
	
	ТабПеречень = Объект.ПереченьДокументов.Выгрузить(Новый Массив);
	КолонкиПеречня = ТабПеречень.Колонки;
	
	ТабРаспределение = Объект.Распределение.Выгрузить(Новый Массив);
	КолонкиРаспределения = ТабРаспределение.Колонки;
	
	Для Каждого ТекущаяСтрока Из ОтмеченныеСтроки Цикл
		
		Для Каждого ТекущаяКолонка Из КолонкиПеречня Цикл
			КолонкаЭталон = КолонкиПеречня.Найти(ТекущаяКолонка.Имя+"_Эталон");
			
			Если КолонкаЭталон = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрока[ТекущаяКолонка.Имя] = ТекущаяСтрока[КолонкаЭталон.Имя];
		КонецЦикла;
		
		// Заполним тч Распределение
		СтрокиРаспределения = ПолучитьСтрокиРаспределенияДляДокумента(Объект.Распределение, ТекущаяСтрока.ПлатежнаяПозиция);

		Если СтрокиРаспределения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			Для Каждого ТекущаяКолонка Из КолонкиРаспределения Цикл
				КолонкаЭталон = КолонкиРаспределения.Найти(ТекущаяКолонка.Имя+"_Эталон");
				
				Если КолонкаЭталон = Неопределено Тогда
					
					Если СтрокаРаспределения.БалансСтрок = "Отсутствует"
						И НЕ ЗначениеЗаполнено(СтрокаРаспределения[ТекущаяКолонка.Имя])
						И НЕ ТекущаяКолонка.Имя = "ДоговорКонтрагента" Тогда
						// Такое должно быть только в том случае, если в платежной позиции 
						// есть строка, которой нет в планируемом поступлении.
						КолонкаРасходование = КолонкиРаспределения.Найти(ТекущаяКолонка.Имя+"_Расходование");
						
						Если НЕ КолонкаРасходование = Неопределено Тогда
							СтрокаРаспределения[ТекущаяКолонка.Имя] = СтрокаРаспределения[КолонкаРасходование.Имя];
						КонецЕсли;
					КонецЕсли;
					
					Продолжить;
				КонецЕсли;
				
				СтрокаРаспределения[ТекущаяКолонка.Имя] = СтрокаРаспределения[КолонкаЭталон.Имя];
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;	
	
	СоздатьИзменитьПланируемыеПоступления(Истина);
	
КонецПроцедуры

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_ФормированиеПланируемыхПоступлений"));
	СтруктураНастроек = ОбработкаОбъект.УпаковатьНастройкиВСтруктуруМодуль(Объект);
 			
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура устанавливает настройки указанные в форме настройки.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
&НаСервере
Процедура УстановитьДопНастройки(СтруктураНастроек)

	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_ФормированиеПланируемыхПоступлений"));
	ОбработкаОбъект.РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек);

КонецПроцедуры // УстановитьДопНастройки()

// Процедура управляет видимостью\доступностью элементов формы.
// 
// Параметры:
// 	нет
// 
&НаСервере
Процедура УстановитьВидимость()
	
	// Установим видимость таблицы Настройки
	Элементы.ГруппаНастройки.Видимость 				 = ОтобразитьНастройки;
	Элементы.ФормаКомандаОтобразитьНастройки.Пометка = ОтобразитьНастройки;
	
	// Установим видимость таблицы Распределение.
	Элементы.ГруппаРаспределение.Видимость 				 = ОтобразитьРаспределение;
	Элементы.ФормаКомандаОтобразитьРаспределение.Пометка = ОтобразитьРаспределение;
	
	// Отобразим эталонные значения
	ТабПеречень = Объект.ПереченьДокументов.Выгрузить(Новый Массив);
	КолонкиПеречня = ТабПеречень.Колонки;
	
	Для Каждого ТекущаяКолонка Из КолонкиПеречня Цикл 
		
		КолонкаЭталон = КолонкиПеречня.Найти(ТекущаяКолонка.Имя+"_Эталон");
		
		Если КолонкаЭталон = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = "ПереченьДокументов"+ТекущаяКолонка.Имя+"_Эталон";
		
		Если НЕ Элементы.Найти(ИмяПоля) = Неопределено Тогда
			
			Элементы[ИмяПоля].Видимость = Объект.ОтображатьЭталонныеЗначения
										И Элементы["ПереченьДокументов"+ТекущаяКолонка.Имя].Видимость;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабРаспределение = Объект.Распределение.Выгрузить(Новый Массив);
	КолонкиРаспределения = ТабРаспределение.Колонки;
	
	Для Каждого ТекущаяКолонка Из КолонкиРаспределения Цикл 
		
		КолонкаЭталон = КолонкиРаспределения.Найти(ТекущаяКолонка.Имя+"_Эталон");
		
		Если КолонкаЭталон = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = "Распределение"+ТекущаяКолонка.Имя+"_Эталон";
		
		Если НЕ Элементы.Найти(ИмяПоля) = Неопределено Тогда
			
			Элементы[ИмяПоля].Видимость = Объект.ОтображатьЭталонныеЗначения
										И Элементы["Распределение"+ТекущаяКолонка.Имя].Видимость;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
