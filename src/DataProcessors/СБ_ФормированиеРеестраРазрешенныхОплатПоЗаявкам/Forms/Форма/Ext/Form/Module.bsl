&НаСервере
Процедура ЗапросУстановитьНеПустойПараметр(префиксПараметра,параметрИмя,значение,ЗнакСравнения="=", Запрос)
	
	Условие="";
	Если ЗначениеЗаполнено(значение) Тогда
		Запрос.УстановитьПараметр(параметрИмя,значение); 
		Условие=" и "+префиксПараметра+параметрИмя+" "+ЗнакСравнения+" (&"+параметрИмя+")";
	Конецесли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &условие"+параметрИмя,условие);
	
КонецПроцедуры

&НаСервере
Функция ВходитВГруппуПользователей(ТекПользователь, НаименованиеГруппы)
	
	// 1c-izhtc ChuckNorris 09.09.2015 ( 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь = &Пользователь
	|	И СоставыГруппПользователей.ГруппаПользователей.Наименование = &НаименованиеГруппы
	|	И СоставыГруппПользователей.Используется";
	
	Запрос.УстановитьПараметр("НаименованиеГруппы", НаименованиеГруппы);
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	// 1c-izhtc ChuckNorris 09.09.2015 ) 
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//	{Формирование реестра разрешенных оплат по заявкам #3417 СофтЛаб Цветков А. 16.09.2019 

&НаСервере
Функция ЗаполнитьРеестрНаСервере2019()
	
	СчетаУчетаРасчетов = Новый Массив;
	СчетаУчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	СчетаУчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	Запрос.УстановитьПараметр("ТекущаяДатаВключая", новый граница(КонецДня(ТекущаяДата()),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаУчетаРасчетов", СчетаУчетаРасчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА бит_ОборотыПоБюджетамОбороты.Регистратор ССЫЛКА Документ.рс_ЗаявкаНаДоговор
	|			ТОГДА бит_ОборотыПоБюджетамОбороты.Регистратор.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	бит_ОборотыПоБюджетамОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫРАЗИТЬ(бит_ОборотыПоБюджетамОбороты.Регистратор КАК Документ.рс_ЗаявкаНаДоговор) КАК ЗаявкаНаДоговор,
	|	ВЫРАЗИТЬ(бит_ОборотыПоБюджетамОбороты.Регистратор КАК Документ.рс_ЗаявкаНаДоговор).ID КАК ID,
	|	СУММА(ЗаявкаНаДоговорБаза.СуммаБезНДС) КАК СуммаРегл,
	|	МАКСИМУМ(ЗаявкаНаДоговорБаза.Ссылка.СтавкаНДС) КАК СтавкаНДС
	|ПОМЕСТИТЬ ОборотыПоБюджетам
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.рс_ЭкономическийУчет)
	|				И &условиеКонтрагент
	|				И &условиеДоговорКонтрагента) КАК бит_ОборотыПоБюджетамОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.рс_ЗаявкаНаДоговор.База КАК ЗаявкаНаДоговорБаза
	|		ПО бит_ОборотыПоБюджетамОбороты.Регистратор = ЗаявкаНаДоговорБаза.Ссылка
	|			И бит_ОборотыПоБюджетамОбороты.НомерСтроки = ЗаявкаНаДоговорБаза.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА бит_ОборотыПоБюджетамОбороты.Регистратор ССЫЛКА Документ.рс_ЗаявкаНаДоговор
	|			ТОГДА бит_ОборотыПоБюджетамОбороты.Регистратор.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	бит_ОборотыПоБюджетамОбороты.ДоговорКонтрагента,
	|	бит_ОборотыПоБюджетамОбороты.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОборотыПоБюджетам.Контрагент КАК Контрагент,
	|	ОборотыПоБюджетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОборотыПоБюджетам.ЗаявкаНаДоговор КАК ЗаявкаНаДоговор,
	|	ВЫБОР
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ПоступлениеТоваровУслуг.Проведен
	|						ТОГДА ""ПТиУ "" + ПоступлениеТоваровУслуг.Номер
	|					ИНАЧЕ ""не проведен""
	|				КОНЕЦ
	|		ИНАЧЕ ""не найден""
	|	КОНЕЦ КАК ПтиУТипНомер,
	|	ВЫБОР
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ПоступлениеТоваровУслуг.Проведен
	|						ТОГДА ПоступлениеТоваровУслуг.Дата
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПТиУДата,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПТиУ,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеНайден,
	|	ВЫБОР
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL
	|			ТОГДА ПоступлениеТоваровУслуг.СуммаДокумента
	|	КОНЕЦ КАК ПТиУСуммаБезНДС,
	|	ПоступлениеТоваровУслуг.Ответственный КАК Ответственный,
	|	ОборотыПоБюджетам.ЗаявкаНаДоговор.ВалютаДокумента КАК СБ_ВалютаДокумента,
	|	ОборотыПоБюджетам.ЗаявкаНаДоговор.СтавкаНДС КАК СБ_СтавкаНДС,
	|	ОборотыПоБюджетам.ЗаявкаНаДоговор.Инициатор КАК СБ_Инициатор,
	|	ОборотыПоБюджетам.ЗаявкаНаДоговор.СуммаБезНДС КАК СуммаПоДокументу
	|ПОМЕСТИТЬ ЗакрывающиеДокументы
	|ИЗ
	|	ОборотыПоБюджетам КАК ОборотыПоБюджетам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ОборотыПоБюджетам.ID = ПоступлениеТоваровУслуг.ОК_ID_Разноска
	|
	|ГДЕ
	|	ИСТИНА
	|	И &условиеОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ПТиУ,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт
	|ПОМЕСТИТЬ Задолженость
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ТекущаяДатаВключая,
	|			Счет В ИЕРАРХИИ (&СчетаУчетаРасчетов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами),
	|			Субконто1 В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЗакрывающиеДокументы.ПТиУ
	|				ИЗ
	|					ЗакрывающиеДокументы КАК ЗакрывающиеДокументы
	|				ГДЕ
	|					НЕ ЗакрывающиеДокументы.ПТиУ ЕСТЬ NULL)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ПоступлениеТоваровУслугУслуги.Сумма) КАК Сумма,
	|	ПоступлениеТоваровУслугУслуги.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СуммыПтиУБезНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ЗакрывающиеДокументы.ПТиУ
	|			ИЗ
	|				ЗакрывающиеДокументы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугУслуги.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ИспользоватьРазрешенные = ?(ВходитВГруппуПользователей(ТекПользователь, "Операционный БК"), Ложь, Истина);
	
	Если Не ИспользоватьРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	ЗапросУстановитьНеПустойПараметр("ОборотыПоБюджетам.ЗаявкаНаДоговор.","Организация",Объект.Организация,, Запрос);
	ЗапросУстановитьНеПустойПараметр("","Контрагент",Объект.Контрагент,, Запрос);
	ЗапросУстановитьНеПустойПараметр("","ДоговорКонтрагента",Объект.Договор,, Запрос);
	
	Запрос.Выполнить();
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК ПТиУ,
	|	ХозрасчетныйОбороты.Регистратор КАК СписаниеСРасчетногоСчета,
	|	ХозрасчетныйОбороты.Регистратор.МоментВремени КАК моментвремени
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами),
	|			Субконто1 В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ЗакрывающиеДокументы.ПТиУ
	|				ИЗ
	|					ЗакрывающиеДокументы КАК ЗакрывающиеДокументы
	|				ГДЕ
	|					НЕ ЗакрывающиеДокументы.ПТиУ ЕСТЬ NULL),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|ИТОГИ ПО
	|	ПТиУ";
	
	Если Не ИспользоватьРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	рез_=Запрос.Выполнить();				 
	СписанияСРасчетногоСчетаМоментВремени=СписанияСРасчетногоСчетаМоментВремени(рез_,"Организация,Счет,ПТиУ,моментвремени");
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписанияСРасчетногоСчета.Организация КАК Организация,
	|	СписанияСРасчетногоСчета.Счет КАК Счет,
	|	СписанияСРасчетногоСчета.ПтиУ КАК ПТиУ,
	|	СписанияСРасчетногоСчета.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ПОМЕСТИТЬ СписанияСРасчетногоСчетаВТ
	|ИЗ
	|	&СписанияСРасчетногоСчета КАК СписанияСРасчетногоСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписанияСРасчетногоСчетаВТ.Организация КАК Организация,
	|	СписанияСРасчетногоСчетаВТ.Счет КАК Счет,
	|	СписанияСРасчетногоСчетаВТ.ПтиУ КАК ПтиУ,
	|	СписанияСРасчетногоСчетаВТ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СписанияСРасчетногоСчетаВТ.СписаниеСРасчетногоСчета КАК Документ.СписаниеСРасчетногоСчета).ДокументОснование ССЫЛКА Документ.ПлатежноеПоручение
	|			ТОГДА ВЫРАЗИТЬ(СписанияСРасчетногоСчетаВТ.СписаниеСРасчетногоСчета КАК Документ.СписаниеСРасчетногоСчета).ДокументОснование
	|		ИНАЧЕ ПлатежноеПоручение.Ссылка
	|	КОНЕЦ КАК ПлатежноеПоручение
	|ПОМЕСТИТЬ СписанияСРасчетногоСчета
	|ИЗ
	|	СписанияСРасчетногоСчетаВТ КАК СписанияСРасчетногоСчетаВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО СписанияСРасчетногоСчетаВТ.СписаниеСРасчетногоСчета = ПлатежноеПоручение.ДокументОснование";
	
	Если Не ИспользоватьРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	ЗАпрос.УстановитьПараметр("СписанияСРасчетногоСчета",СписанияСРасчетногоСчетаМоментВремени);
	ЗАпрос.Выполнить();
 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗакрывающиеДокументы.Контрагент КАК Контрагент,
	|	ЗакрывающиеДокументы.ДоговорКонтрагента КАК Договор,
	|	ЗакрывающиеДокументы.ЗаявкаНаДоговор КАК ЗаявкаНаДоговор,
	|	ЗакрывающиеДокументы.ПтиУТипНомер КАК ТипНомерПтиУ,
	|	ЗакрывающиеДокументы.ПТиУДата КАК ПтиУДата,
	|	ЗакрывающиеДокументы.ПТиУСуммаБезНДС КАК ПТиУСуммаБезНДС,
	|	ЗакрывающиеДокументы.ПтиУ КАК ПтиУ,
	|	ЗакрывающиеДокументы.НеНайден КАК НеНайден,
	|	ВЫБОР
	|		КОГДА НЕ СписанияСРасчетногоСчета.СписаниеСРасчетногоСчета ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА СписанияСРасчетногоСчета.СписаниеСРасчетногоСчета.Проведен
	|						ТОГДА СписанияСРасчетногоСчета.СписаниеСРасчетногоСчета.Номер
	|					ИНАЧЕ ""не проведен""
	|				КОНЕЦ
	|		ИНАЧЕ ""не найден""
	|	КОНЕЦ КАК НомерСписанияСРасчетногоСчета,
	|	ВЫБОР
	|		КОГДА НЕ СостоянияБанковскихДокументов.Состояние ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|						ТОГДА СписанияСРасчетногоСчета.ПлатежноеПоручение.Номер
	|					ИНАЧЕ ""не оплачено""
	|				КОНЕЦ
	|		ИНАЧЕ ""не найден""
	|	КОНЕЦ КАК НомерПлатежногоПоручения,
	|	ВЫБОР
	|		КОГДА НЕ СостоянияБанковскихДокументов.Состояние ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|						ТОГДА СписанияСРасчетногоСчета.ПлатежноеПоручение.Дата
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДатаПлатежногоПоручения,
	|	ВЫБОР
	|		КОГДА НЕ СостоянияБанковскихДокументов.Состояние ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|						ТОГДА ""оплачен""
	|					КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Подготовлено)
	|						ТОГДА ""подготовлено""
	|					КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.НаПодписи)
	|						ТОГДА ""на подписи""
	|					КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Отправлено)
	|						ТОГДА ""отправлено""
	|					КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Отклонено)
	|						ТОГДА ""отклонено""
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрывающиеДокументы.ПтиУТипНомер = ""не найден""
	|					ТОГДА ""не найден""
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(Задолженость.СуммаОстатокКт, 0) > 0
	|							ТОГДА ""к оплате""
	|						КОГДА ЕСТЬNULL(Задолженость.СуммаОстатокКт, 0) = 0
	|							ТОГДА ""нет задолженности""
	|						ИНАЧЕ ""не определен ""
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА ЗакрывающиеДокументы.НеНайден
	|			ТОГДА 0
	|		ИНАЧЕ Задолженость.СуммаОстатокКт
	|	КОНЕЦ КАК СуммаКОплате,
	|	ЗакрывающиеДокументы.Ответственный КАК Ответственный,
	|	ЗакрывающиеДокументы.СБ_ВалютаДокумента КАК ВалютаДокумента,
	|	ЗакрывающиеДокументы.СБ_Инициатор КАК СБ_Инициатор,
	|	ЗакрывающиеДокументы.СуммаПоДокументу
	|ПОМЕСТИТЬ ТаблицаСоСтатусами
	|ИЗ
	|	ЗакрывающиеДокументы КАК ЗакрывающиеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписанияСРасчетногоСчета КАК СписанияСРасчетногоСчета
	|		ПО ЗакрывающиеДокументы.ПтиУ = СписанияСРасчетногоСчета.ПтиУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задолженость КАК Задолженость
	|		ПО ЗакрывающиеДокументы.ПтиУ = Задолженость.ПтиУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО (СписанияСРасчетногоСчета.ПлатежноеПоручение = СостоянияБанковскихДокументов.СсылкаНаОбъект)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаСоСтатусами.ЗаявкаНаДоговор КАК Ссылка
	|ПОМЕСТИТЬ СписокНенужныхЗаявокНаДоговор
	|ИЗ
	|	ТаблицаСоСтатусами КАК ТаблицаСоСтатусами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	|		ПО ТаблицаСоСтатусами.ЗаявкаНаДоговор = бит_ЗаявкаНаРасходованиеСредств.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаСоСтатусами.Контрагент КАК Контрагент,
	|	ТаблицаСоСтатусами.Договор КАК Договор,
	|	ТаблицаСоСтатусами.ЗаявкаНаДоговор КАК ЗаявкаНаДоговор,
	|	ТаблицаСоСтатусами.ТипНомерПтиУ КАК ТипНомерПтиУ,
	|	ТаблицаСоСтатусами.ПтиУДата КАК ПтиУДата,
	|	ТаблицаСоСтатусами.ПТиУСуммаБезНДС КАК ПТиУСуммаБезНДС,
	|	ТаблицаСоСтатусами.ПтиУ КАК ПтиУ,
	|	ТаблицаСоСтатусами.НеНайден КАК НеНайден,
	|	ТаблицаСоСтатусами.НомерСписанияСРасчетногоСчета КАК НомерСписанияСРасчетногоСчета,
	|	ТаблицаСоСтатусами.НомерПлатежногоПоручения КАК НомерПлатежногоПоручения,
	|	ТаблицаСоСтатусами.ДатаПлатежногоПоручения КАК ДатаПлатежногоПоручения,
	|	ТаблицаСоСтатусами.Статус КАК Статус,
	|	ТаблицаСоСтатусами.СуммаКОплате КАК СуммаКОплате,
	|	ТаблицаСоСтатусами.Ответственный КАК Ответственный,
	|	ТаблицаСоСтатусами.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаСоСтатусами.СБ_Инициатор КАК СБ_Инициатор,
	|	ТаблицаСоСтатусами.СуммаПоДокументу
	|ПОМЕСТИТЬ ТаблицаСоСтатусамиПромежуточная
	|ИЗ
	|	ТаблицаСоСтатусами КАК ТаблицаСоСтатусами
	|ГДЕ
	|	ИСТИНА
	|	И &условиеСтатус
	|	И НЕ ТаблицаСоСтатусами.ЗаявкаНаДоговор В
	|				(ВЫБРАТЬ
	|					СписокНенужныхЗаявокНаДоговор.Ссылка
	|				ИЗ
	|					СписокНенужныхЗаявокНаДоговор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаСоСтатусами.Контрагент КАК Контрагент,
	|	ТаблицаСоСтатусами.Договор КАК Договор,
	|	ВЫРАЗИТЬ(ТаблицаСоСтатусами.Договор КАК Справочник.ДоговорыКонтрагентов).Дата КАК ДатаДоговора,
	|	ТаблицаСоСтатусами.ЗаявкаНаДоговор КАК ЗаявкаНаДоговор,
	|	ТаблицаСоСтатусами.ТипНомерПтиУ КАК ТипНомерПтиУ,
	|	ТаблицаСоСтатусами.ПтиУ КАК ПтиУ,
	|	ТаблицаСоСтатусами.ПтиУДата КАК ПтиУДата,
	|	ВЫБОР
	|		КОГДА ТаблицаСоСтатусами.НеНайден
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаСоСтатусами.СуммаКОплате
	|	КОНЕЦ КАК СуммаКОплате,
	|	ВЫБОР
	|		КОГДА ТаблицаСоСтатусами.НеНайден
	|			ТОГДА ОборотыПоБюджетам.СуммаРегл
	|		ИНАЧЕ ТаблицаСоСтатусами.СуммаПоДокументу 
	|	КОНЕЦ КАК СуммаЗакрывающегоДокумент,
	|	ТаблицаСоСтатусами.ПТиУСуммаБезНДС КАК ПТиУСуммаБезНДС,
	|	ТаблицаСоСтатусами.НомерСписанияСРасчетногоСчета КАК НомерСписанияСРасчетногоСчета,
	|	ТаблицаСоСтатусами.НомерПлатежногоПоручения КАК НомерПлатежногоПоручения,
	|	ТаблицаСоСтатусами.ДатаПлатежногоПоручения КАК ДатаПлатежногоПоручения,
	|	ТаблицаСоСтатусами.Статус КАК Статус,
	|	ТаблицаСоСтатусами.Ответственный КАК Ответственный,
	|	ТаблицаСоСтатусами.ВалютаДокумента КАК ВалютаДокумента,
	|	ОборотыПоБюджетам.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаСоСтатусами.СБ_Инициатор КАК СБ_Инициатор
	|ИЗ
	|	ТаблицаСоСтатусамиПромежуточная КАК ТаблицаСоСтатусами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыПоБюджетам КАК ОборотыПоБюджетам
	|		ПО ТаблицаСоСтатусами.ЗаявкаНаДоговор = ОборотыПоБюджетам.ЗаявкаНаДоговор
	|";
					 
	ЗапросУстановитьНеПустойПараметр("ТаблицаСоСтатусами.","Статус",Объект.СписокСтатусов," В ", Запрос);
	
	Объект.Реестр.Загрузить(Запрос.Выполнить().Выгрузить());;
		
КонецФункции

&НаКлиенте
Процедура РеестрТипНомерПтиУОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Реестр.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ПТиУ);
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

//	}Формирование реестра разрешенных оплат по заявкам #3417

&НаСервере
Функция ЗаполнитьРеестрНаСервере()
	
	//	{Формирование реестра разрешенных оплат по заявкам #3417 СофтЛаб Цветков А. 02.10.2019 
	Возврат ЗаполнитьРеестрНаСервере2019();
	//	}Формирование реестра разрешенных оплат по заявкам #3417
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Если ВходитВГруппуПользователей(ТекПользователь, "Операционный БК") Тогда
		ТекстВыбрать =  "ВЫБРАТЬ ";
	Иначе
		ТекстВыбрать = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Объект.КонецПериода);
	Запрос.УстановитьПараметр("ТекущаяДатаВключая", новый граница(КонецДня(ТекущаяДата()),ВидГраницы.Включая));
	Запрос.Текст = ТекстВыбрать + "
		|	бит_ОборотыПоБюджетамОбороты.Аналитика_2,
		|	ВЫБОР
		|		КОГДА бит_ОборотыПоБюджетамОбороты.Регистратор ССЫЛКА Документ.рс_ЗаявкаНаДоговор 
		|			ТОГДА бит_ОборотыПоБюджетамОбороты.Регистратор.Контрагент
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Контрагент,
		////-СБ Скиба С.Д.
		|	бит_ОборотыПоБюджетамОбороты.ДоговорКонтрагента,
		// 1c-izhtc ChuckNorris 10.09.2015 ( 
		//|	бит_ОборотыПоБюджетамОбороты.СуммаБезНДСРеглОборот КАК СуммаРегл,
		|	рс_ЗаявкаНаДоговорТабличнаяЧасть.СуммаБезНДС КАК СуммаРегл,
		// 1c-izhtc ChuckNorris 10.09.2015 ) 
		|	ВЫРАЗИТЬ(бит_ОборотыПоБюджетамОбороты.Регистратор КАК Документ.рс_ЗаявкаНаДоговор) КАК ЗаявкаНаДоговор
		|ПОМЕСТИТЬ ОборотыПоБюджетам
		|ИЗ
		|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.рс_ЭкономическийУчет)
		|				И &условиеКонтрагент
		|				И &условиеДоговорКонтрагента) КАК бит_ОборотыПоБюджетамОбороты
		// 1c-izhtc ChuckNorris 10.09.2015 ( 
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.рс_ЗаявкаНаДоговор.База КАК рс_ЗаявкаНаДоговорТабличнаяЧасть
		|ПО ВЫРАЗИТЬ(бит_ОборотыПоБюджетамОбороты.Регистратор КАК Документ.рс_ЗаявкаНаДоговор) = рс_ЗаявкаНаДоговорТабличнаяЧасть.Ссылка
		|И бит_ОборотыПоБюджетамОбороты.НомерСтроки = рс_ЗаявкаНаДоговорТабличнаяЧасть.НомерСтроки
		// 1c-izhtc ChuckNorris 10.09.2015 ) 
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|" + ТекстВыбрать + "
		|	ОборотыПоБюджетам.Аналитика_2,
		|	ОборотыПоБюджетам.Контрагент,
		|	ОборотыПоБюджетам.ДоговорКонтрагента,
		|	ОборотыПоБюджетам.ЗаявкаНаДоговор,
		|	ВЫБОР
		|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА ПоступлениеТоваровУслуг.Ссылка.Проведен
		|						ТОГДА ""ПТиУ "" + ПоступлениеТоваровУслуг.Ссылка.Номер
		|					ИНАЧЕ ""не проведен""
		|				КОНЕЦ
		|		ИНАЧЕ ""не найден""
		|	КОНЕЦ КАК ПтиУТипНомер,
		|	ВЫБОР
		|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА ПоступлениеТоваровУслуг.Ссылка.Проведен
		|						ТОГДА ПоступлениеТоваровУслуг.Ссылка.Дата
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПТиУДата,
		|	ПоступлениеТоваровУслуг.Ссылка КАК ПтиУ,
		|	ВЫБОР	
		|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL 
		|			ТОГДА ПоступлениеТоваровУслуг.Ссылка.СуммаДокумента
		|	КОНЕЦ КАК ПТиУСуммаБезНДС,					   
		|	ПоступлениеТоваровУслуг.Ответственный,
		|	ОборотыПоБюджетам.ЗаявкаНаДоговор.ВалютаДокумента КАК СБ_ВалютаДокумента,
		|	ОборотыПоБюджетам.ЗаявкаНаДоговор.СтавкаНДС КАК СБ_СтавкаНДС,
		|	ОборотыПоБюджетам.ЗаявкаНаДоговор.Инициатор КАК СБ_Инициатор,
		|	рс_ЗаявкаНаДоговорБаза.СтатьяОборотов КАК СБ_СтатьяОборотов 
		|ПОМЕСТИТЬ ЗакрывающиеДокументы
		|ИЗ
		|	ОборотыПоБюджетам КАК ОборотыПоБюджетам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ПО ОборотыПоБюджетам.ЗаявкаНаДоговор.ID = ПоступлениеТоваровУслуг.ОК_ID_Разноска
		////+СБ Скиба С.Д.
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.рс_ЗаявкаНаДоговор.База КАК рс_ЗаявкаНаДоговорБаза
		|		ПО ОборотыПоБюджетам.ЗаявкаНаДоговор = рс_ЗаявкаНаДоговорБаза.Ссылка
		////-СБ Скиба С.Д.
		|ГДЕ
		|	ИСТИНА
		|	И &условиеОрганизация
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|" + ТекстВыбрать + "
		|	ХозрасчетныйОстатки.Организация,
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК ПтиУ,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт
		|ПОМЕСТИТЬ Задолженость
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ТекущаяДатаВключая,
		|			,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами),
		|			Субконто1 В
		|				(ВЫБРАТЬ
		|					ЗакрывающиеДокументы.ПтиУ
		|				ИЗ
		|					ЗакрывающиеДокументы КАК ЗакрывающиеДокументы
		|				ГДЕ
		|					НЕ ЗакрывающиеДокументы.ПтиУ ЕСТЬ NULL 
		|				СГРУППИРОВАТЬ ПО
		|							ЗакрывающиеДокументы.ПтиУ)) КАК ХозрасчетныйОстатки
		|;
		//10.11.14
		|////////////////////////////////////////////////////////////////////////////////
		|" + ТекстВыбрать + "
		|	СУММА(ПоступлениеТоваровУслугУслуги.Сумма) КАК Сумма,
		 |	ПоступлениеТоваровУслугУслуги.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СуммыПтиУБезНДС
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка В (ВЫБРАТЬ ЗакрывающиеДокументы.ПтиУ ИЗ ЗакрывающиеДокументы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугУслуги.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
	Если ИмяПользователя()="Анастасия Подойницына" Тогда
		Сообщить(Запрос.Текст);
	КонецЕсли;
	
	ЗапросУстановитьНеПустойПараметр("ОборотыПоБюджетам.ЗаявкаНаДоговор.","Организация",Объект.Организация,, Запрос);
	ЗапросУстановитьНеПустойПараметр("","Контрагент",Объект.Контрагент,, Запрос);
	ЗапросУстановитьНеПустойПараметр("","ДоговорКонтрагента",Объект.Договор,, Запрос);
	
	Запрос.Выполнить();
		
	Запрос.Текст = ТекстВыбрать + "
		|	ХозрасчетныйОбороты.Организация,
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Субконто1 КАК ПтиУ,
		|	ХозрасчетныйОбороты.Регистратор КАК СписаниеСРасчетногоСчета,
		|	ХозрасчетныйОбороты.Регистратор.МоментВремени КАК моментвремени
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами),
		|			Субконто1 В
		|				(ВЫБРАТЬ
		|					ЗакрывающиеДокументы.ПтиУ
		|				ИЗ
		|					ЗакрывающиеДокументы КАК ЗакрывающиеДокументы
		|				ГДЕ
		|					НЕ ЗакрывающиеДокументы.ПтиУ ЕСТЬ NULL 
		|				СГРУППИРОВАТЬ ПО
		|							ЗакрывающиеДокументы.ПтиУ),
		|			,
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
		|ИТОГИ ПО
		|	ПтиУ";
	рез_=Запрос.Выполнить();				 
	СписанияСРасчетногоСчетаМоментВремени=СписанияСРасчетногоСчетаМоментВремени(рез_,"Организация,Счет,ПтиУ,моментвремени");
		
	Запрос.Текст = ТекстВыбрать + "
		|	СписанияСРасчетногоСчета.Организация,
		|	СписанияСРасчетногоСчета.Счет,
		|	СписанияСРасчетногоСчета.ПтиУ КАК ПтиУ,
		|	СписанияСРасчетногоСчета.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|ПОМЕСТИТЬ СписанияСРасчетногоСчетаВТ
		|ИЗ
		|	&СписанияСРасчетногоСчета КАК СписанияСРасчетногоСчета
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 
		|" + ТекстВыбрать + "
		|	СписанияСРасчетногоСчетаВТ.Организация,
		|	СписанияСРасчетногоСчетаВТ.Счет,
		|	СписанияСРасчетногоСчетаВТ.ПтиУ,
		|	СписанияСРасчетногоСчетаВТ.СписаниеСРасчетногоСчета,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(СписанияСРасчетногоСчетаВТ.СписаниеСРасчетногоСчета КАК Документ.СписаниеСРасчетногоСчета).ДокументОснование ССЫЛКА Документ.ПлатежноеПоручение
		|			ТОГДА ВЫРАЗИТЬ(СписанияСРасчетногоСчетаВТ.СписаниеСРасчетногоСчета КАК Документ.СписаниеСРасчетногоСчета).ДокументОснование
		|		ИНАЧЕ ПлатежноеПоручение.Ссылка
		|	КОНЕЦ КАК ПлатежноеПоручение
		|ПОМЕСТИТЬ СписанияСРасчетногоСчета
		|ИЗ
		|	СписанияСРасчетногоСчетаВТ КАК СписанияСРасчетногоСчетаВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|		ПО СписанияСРасчетногоСчетаВТ.СписаниеСРасчетногоСчета = ПлатежноеПоручение.ДокументОснование";
	ЗАпрос.УстановитьПараметр("СписанияСРасчетногоСчета",СписанияСРасчетногоСчетаМоментВремени);
	ЗАпрос.Выполнить();
//ЛЕВОЕ СОЕДИНЕНИЕ ТУТ
 
	Запрос.Текст = ТекстВыбрать + "
		|	ЗакрывающиеДокументы.Аналитика_2 КАК Объект,
		|	ЗакрывающиеДокументы.Контрагент,
		|	ЗакрывающиеДокументы.ДоговорКонтрагента КАК Договор,
		//|	ЗакрывающиеДокументы.СуммаЗакрывающегоДокумент КАК СуммаЗакрывающегоДокумент, //СБ Скиба С.Д.
		|	ЗакрывающиеДокументы.ЗаявкаНаДоговор,
		|	ЗакрывающиеДокументы.ПтиУТипНомер КАК ТипНомерПтиУ,
		|	ЗакрывающиеДокументы.ПТиУДата КАК ПтиУДата,
		|	ЗакрывающиеДокументы.ПТиУСуммаБезНДС КАК ПТиУСуммаБезНДС,
		|	ЗакрывающиеДокументы.ПтиУ,
		|	ВЫБОР
		|		КОГДА НЕ СписанияСРасчетногоСчета.СписаниеСРасчетногоСчета ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА СписанияСРасчетногоСчета.СписаниеСРасчетногоСчета.Проведен
		|						ТОГДА СписанияСРасчетногоСчета.СписаниеСРасчетногоСчета.Номер
		|					ИНАЧЕ ""не проведен""
		|				КОНЕЦ
		|		ИНАЧЕ ""не найден""
		|	КОНЕЦ КАК НомерСписанияСРасчетногоСчета,
		// 1c-izhtc ChuckNorris 30.11.2016 ( 
		// В документе "Платежное поручение" реквизита "Оплачено" не стало. Данные перешли в регистр сведений "Состояние банковских документов"
		//|	ВЫБОР
		//|		КОГДА НЕ СписанияСРасчетногоСчета.ПлатежноеПоручение ЕСТЬ NULL 
		//|			ТОГДА ВЫБОР
		//|					КОГДА СписанияСРасчетногоСчета.ПлатежноеПоручение.Оплачено
		//|						ТОГДА СписанияСРасчетногоСчета.ПлатежноеПоручение.Номер
		//|					ИНАЧЕ ""не оплачено""
		//|				КОНЕЦ
		//|		ИНАЧЕ ""не найден""
		//|	КОНЕЦ КАК НомерПлатежногоПоручения,
		|	ВЫБОР
		|		КОГДА НЕ СостоянияБанковскихДокументов.Состояние ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
		|						ТОГДА СписанияСРасчетногоСчета.ПлатежноеПоручение.Номер
		|					ИНАЧЕ ""не оплачено""
		|				КОНЕЦ
		|		ИНАЧЕ ""не найден""
		|	КОНЕЦ КАК НомерПлатежногоПоручения,
		//|	ВЫБОР
		//|		КОГДА НЕ СписанияСРасчетногоСчета.ПлатежноеПоручение ЕСТЬ NULL 
		//|			ТОГДА ВЫБОР
		//|					КОГДА СписанияСРасчетногоСчета.ПлатежноеПоручение.Оплачено
		//|						ТОГДА СписанияСРасчетногоСчета.ПлатежноеПоручение.Дата
		//|					ИНАЧЕ """"
		//|				КОНЕЦ
		//|		ИНАЧЕ """"
		//|	КОНЕЦ КАК ДатаПлатежногоПоручения,
		|	ВЫБОР
		|		КОГДА НЕ СостоянияБанковскихДокументов.Состояние ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
		|						ТОГДА СписанияСРасчетногоСчета.ПлатежноеПоручение.Дата
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаПлатежногоПоручения,
		//|	ВЫБОР
		//|		КОГДА НЕ СписанияСРасчетногоСчета.ПлатежноеПоручение ЕСТЬ NULL 
		//|			ТОГДА ВЫБОР
		//|					КОГДА СписанияСРасчетногоСчета.ПлатежноеПоручение.Оплачено
		//|						ТОГДА ""оплачен""
		//|					ИНАЧЕ ""не проведен""
		//|				КОНЕЦ
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА ЗакрывающиеДокументы.ПтиУТипНомер = ""не найден""
		//|					ТОГДА ""не найден""
		//|				ИНАЧЕ ВЫБОР
		//|						КОГДА ЕСТЬNULL(Задолженость.СуммаОстатокКт, 0) > 0
		//|							ТОГДА ""к оплате""
		//|						КОГДА ЕСТЬNULL(Задолженость.СуммаОстатокКт, 0) = 0
		//|							ТОГДА ""нет задолженности""
		//|						ИНАЧЕ ""не определен ""
		//|					КОНЕЦ
		//|			КОНЕЦ
		//|	КОНЕЦ КАК Статус,
		|	ВЫБОР
		|		КОГДА НЕ СостоянияБанковскихДокументов.Состояние ЕСТЬ NULL 
		|			ТОГДА 
		|				ВЫБОР
		|						КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено) ТОГДА ""оплачен""
		|						КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Подготовлено) ТОГДА ""подготовлено""
		|						КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.НаПодписи) ТОГДА ""на подписи""
		|						КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Отправлено) ТОГДА ""отправлено""
		|						КОГДА СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Отклонено) ТОГДА ""отклонено""
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЗакрывающиеДокументы.ПтиУТипНомер = ""не найден""
		|					ТОГДА ""не найден""
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ЕСТЬNULL(Задолженость.СуммаОстатокКт, 0) > 0
		|							ТОГДА ""к оплате""
		|						КОГДА ЕСТЬNULL(Задолженость.СуммаОстатокКт, 0) = 0
		|							ТОГДА ""нет задолженности""
		|						ИНАЧЕ ""не определен ""
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Статус,
		// 1c-izhtc ChuckNorris 30.11.2016 ) 
		|	ЗакрывающиеДокументы.Ответственный,
		|	ЗакрывающиеДокументы.СБ_ВалютаДокумента КАК ВалютаДокумента,
		|	ЗакрывающиеДокументы.СБ_Инициатор КАК СБ_Инициатор
		////-СБ Скиба С.Д. 
		|ПОМЕСТИТЬ ТаблицаСоСтатусами
		|ИЗ
		|	ЗакрывающиеДокументы КАК ЗакрывающиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписанияСРасчетногоСчета КАК СписанияСРасчетногоСчета
		|		ПО ЗакрывающиеДокументы.ПтиУ = СписанияСРасчетногоСчета.ПтиУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задолженость КАК Задолженость
		|		ПО ЗакрывающиеДокументы.ПтиУ = Задолженость.ПтиУ
		// 1c-izhtc ChuckNorris 30.11.2016 ( 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
		|		ПО СписанияСРасчетногоСчета.ПлатежноеПоручение = СостоянияБанковскихДокументов.СсылкаНаОбъект
		// 1c-izhtc ChuckNorris 30.11.2016 ( 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		////-СБ Скиба С.Д.
		|" + ТекстВыбрать + " РАЗЛИЧНЫЕ
		|	ТаблицаСоСтатусами.ЗаявкаНаДоговор КАК Ссылка
		|ПОМЕСТИТЬ СписокНенужныхЗаявокНаДоговор
		|ИЗ
		|	ТаблицаСоСтатусами КАК ТаблицаСоСтатусами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
		|		ПО ТаблицаСоСтатусами.ЗаявкаНаДоговор = бит_ЗаявкаНаРасходованиеСредств.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|" + ТекстВыбрать + "
		|	СУММА(ОборотыПоБюджетам.СуммаРегл) КАК СуммаПоЗаявке,
		|	ОборотыПоБюджетам.ЗаявкаНаДоговор
		|ПОМЕСТИТЬ СуммыПоЗаявкамРегистр
		|ИЗ
		|	ОборотыПоБюджетам КАК ОборотыПоБюджетам
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборотыПоБюджетам.ЗаявкаНаДоговор
		|;
		| 
		////-СБ Скиба С.Д.
		|////////////////////////////////////////////////////////////////////////////////
		|" + ТекстВыбрать + " РАЗЛИЧНЫЕ
		|	ТаблицаСоСтатусами.объект,
		|	ТаблицаСоСтатусами.Контрагент,
		|	ТаблицаСоСтатусами.Договор,
		|	ТаблицаСоСтатусами.ЗаявкаНаДоговор,
		|	ТаблицаСоСтатусами.ТипНомерПтиУ,
		|	ТаблицаСоСтатусами.ПтиУДата,
		|	ТаблицаСоСтатусами.ПТиУСуммаБезНДС,
		|	ТаблицаСоСтатусами.ПТиУ,
		|	ТаблицаСоСтатусами.НомерСписанияСРасчетногоСчета,
		|	ТаблицаСоСтатусами.НомерПлатежногоПоручения,
		|	ТаблицаСоСтатусами.ДатаПлатежногоПоручения,
		|	ТаблицаСоСтатусами.Статус,
		|	ТаблицаСоСтатусами.Ответственный,
		////+СБ Скиба С.Д.
		|	ТаблицаСоСтатусами.ВалютаДокумента,
		|	ТаблицаСоСтатусами.СБ_Инициатор
		|ПОМЕСТИТЬ ТаблицаСоСтатусамиПромежуточная
		////-СБ Скиба С.Д.
		|ИЗ
		|	ТаблицаСоСтатусами КАК ТаблицаСоСтатусами
		|ГДЕ
		|	ИСТИНА
		|	И &условиеСтатус
		////+СБ Скиба С.Д.
		|	И НЕ ТаблицаСоСтатусами.ЗаявкаНаДоговор В (ВЫБРАТЬ СписокНенужныхЗаявокНаДоговор.Ссылка ИЗ СписокНенужныхЗаявокНаДоговор)
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 
		|" + ТекстВыбрать + " 
		|	ТаблицаСоСтатусами.объект,
		|	ТаблицаСоСтатусами.Контрагент,
		|	ТаблицаСоСтатусами.Договор,
		|	ТаблицаСоСтатусами.Договор.Дата КАК ДатаДоговора,
		//|	ТаблицаСоСтатусами.СуммаЗакрывающегоДокумент, //СБ Скиба С.Д.
		
		// 1c-izhtc ChuckNorris 11.09.2015 ( 
		//|	бит_ОборотыПоБюджетам.СуммаБезНДСРегл КАК СуммаЗакрывающегоДокумент,
		|рс_ЗаявкаНаДоговорТабличнаяЧасть.СуммаБезНДС КАК СуммаЗакрывающегоДокумент,
		// 1c-izhtc ChuckNorris 11.09.2015 ) 
		
		|	ТаблицаСоСтатусами.ЗаявкаНаДоговор,
		|	ТаблицаСоСтатусами.ТипНомерПтиУ,
		|	ТаблицаСоСтатусами.ПтиУДата,
		// |	ТаблицаСоСтатусами.СуммаКОплате, //СБ Скиба С.Д.
		|	ВЫБОР
		|		КОГДА НЕ ТаблицаСоСтатусами.ПТиУ ЕСТЬ NULL 
		
		// 1c-izhtc ChuckNorris 11.09.2015 ( 
		//|			ТОГДА бит_ОборотыПоБюджетам.СуммаБезНДСРегл*СуммыПтиУБезНДС.Сумма/СуммыПоЗаявкамРегистр.СуммаПоЗаявке
		|			ТОГДА рс_ЗаявкаНаДоговорТабличнаяЧасть.СуммаБезНДС*СуммыПтиУБезНДС.Сумма/СуммыПоЗаявкамРегистр.СуммаПоЗаявке
		// 1c-izhtc ChuckNorris 11.09.2015 ) 

		|	КОНЕЦ КАК СуммаКОплате,
		// |	ВЫБОР
		//|		КОГДА НЕ ТаблицаСоСтатусами.ПТиУ ЕСТЬ NULL 
		//|			ТОГДА ТаблицаСоСтатусами.ПТиУ.СуммаВключаетНДС
		//|	КОНЕЦ КАК СуммаКОплатеСуммаВключаетНДС,
		//!!!

		// 1c-izhtc ChuckNorris 11.09.2015 ( 
		//|	бит_ОборотыПоБюджетам.СуммаБезНДСРегл
		|	рс_ЗаявкаНаДоговорТабличнаяЧасть.СуммаБезНДС КАК СуммаБезНДСРегл,
		// 1c-izhtc ChuckNorris 11.09.2015 ) 
		|	ПТиУСуммаБезНДС,
		|	СуммыПоЗаявкамРегистр.СуммаПоЗаявке,
		//!!!
		|	ТаблицаСоСтатусами.НомерСписанияСРасчетногоСчета,
		|	ТаблицаСоСтатусами.НомерПлатежногоПоручения,
		|	ТаблицаСоСтатусами.ДатаПлатежногоПоручения,
		|	ТаблицаСоСтатусами.Статус,
		|	ТаблицаСоСтатусами.Ответственный,
		|	ТаблицаСоСтатусами.ВалютаДокумента,
		|	бит_ОборотыПоБюджетам.СтавкаНДС,
		|	ТаблицаСоСтатусами.СБ_Инициатор,
		|	бит_ОборотыПоБюджетам.СтатьяОборотов
		|ИЗ
		|	ТаблицаСоСтатусамиПромежуточная КАК ТаблицаСоСтатусами
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
		|  ПО ТаблицаСоСтатусами.ЗаявкаНаДоговор=бит_ОборотыПоБюджетам.Регистратор
		|	ЛЕВОЕ СОЕДИНЕНИЕ СуммыПоЗаявкамРегистр КАК СуммыПоЗаявкамРегистр
		|  ПО ТаблицаСоСтатусами.ЗаявкаНаДоговор=СуммыПоЗаявкамРегистр.ЗаявкаНаДоговор
		//10.11.14
		|	ЛЕВОЕ СОЕДИНЕНИЕ СуммыПтиУБезНДС КАК СуммыПтиУБезНДС
		|  ПО ТаблицаСоСтатусами.ПтиУ=СуммыПтиУБезНДС.Ссылка
		// 1c-izhtc ChuckNorris 05.10.2015 ( 
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.рс_ЗаявкаНаДоговор.База КАК рс_ЗаявкаНаДоговорТабличнаяЧасть
		|ПО ТаблицаСоСтатусами.ЗаявкаНаДоговор = рс_ЗаявкаНаДоговорТабличнаяЧасть.Ссылка
		|И бит_ОборотыПоБюджетам.НомерСтроки = рс_ЗаявкаНаДоговорТабличнаяЧасть.НомерСтроки
		// 1c-izhtc ChuckNorris 05.10.2015 ) 
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СуммыПоЗаявкамРегистр
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаСоСтатусами
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаСоСтатусамиПромежуточная
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СписокНенужныхЗаявокНаДоговор";
		////-СБ Скиба С.Д.
					 
		ЗапросУстановитьНеПустойПараметр("ТаблицаСоСтатусами.","Статус",Объект.СписокСтатусов," В ", Запрос);
		Если ИмяПользователя()="Максим Калинин" тогда
			Сообщить(Запрос.Текст);
		КонецЕсли;
		
		Объект.Реестр.Загрузить(Запрос.Выполнить().Выгрузить());;
		
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеестр(Команда)
	
	Если ЗначениеЗаполнено(Объект.НачалоПериода) И ЗначениеЗаполнено(Объект.КонецПериода) И ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьРеестрНаСервере();;
	Иначе
		ПоказатьПредупреждение(, "Сначала заполните период и организацию!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	ВыбранноеЗначение = ВыбратьИзСписка(Статусы,Элемент, Статусы.Получить(0));
	
	// 1c-izhtc ChuckNorris 09.09.2015 ( 
	Если ВыбранноеЗначение = Неопределено Тогда Возврат; КонецЕсли;
	Если Объект.СписокСтатусов.НайтиПоЗначению(ВыбранноеЗначение.Значение) <> Неопределено Тогда Возврат; КонецЕсли;
	// 1c-izhtc ChuckNorris 09.09.2015 ) 
	
	Объект.СписокСтатусов.Добавить(ВыбранноеЗначение.значение);
	
КонецПроцедуры

&НаСервере
Функция СписанияСРасчетногоСчетаМоментВремени(рез_,Колонки)
	
	СписанияСРасчетногоСчета=рез_.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СписанияСРасчетногоСчета.Строки.Сортировать(Колонки);
	СписанияСРасчетногоСчетаМаксимальныйМоментВремени=рез_.Выгрузить().СкопироватьКолонки();
	
	Для Каждого стр Из СписанияСРасчетногоСчета.Строки  //по набору орг, счет, птиу максимальный момент
	Цикл
		новстр_=СписанияСРасчетногоСчетаМаксимальныйМоментВремени.Добавить();
		ЗаполнитьЗначенияСвойств(новстр_,стр.Строки[стр.Строки.Количество()-1]);
	КонецЦикла;
	
	Возврат СписанияСРасчетногоСчетаМаксимальныйМоментВремени;
	
КонецФункции

// Процедура вызывается при нажатии кнопки "ВключитьВсе" командной панели
// табличного поля "НайденныеСсылки". 
// Включает пометки у всех строк.
//
&НаКлиенте
Процедура НайденныеСсылкиВключитьВсе(Команда)

	УстановитьПометку(истина);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыключитьВсе" командной панели
// табличного поля "НайденныеСсылки". 
// Выключает пометки у всех строк.
//
&НаКлиенте
Процедура НайденныеСсылкиВыключитьВсе(Команда)
	
	УстановитьПометку(ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(значение)
	
	таб_=Объект.Реестр.Выгрузить();
	таб_.ЗаполнитьЗначения(значение, "Пометка");
	Объект.Реестр.Загрузить(таб_);
	
КонецПроцедуры

// Блок неэкспортных функций взят из общего модуля СБ_КазначействоСевер
&НаСервере
Функция ПредметОплаты(СтатьяОборотов, ВидСтатьи)

	ЗначениеПоУмолчанию = "";
	
	Если Не ЗначениеЗаполнено(СтатьяОборотов) Тогда
		Возврат ЗначениеПоУмолчанию;	
	КонецЕсли; 
	
	ОперативнаяДеятельность 	= ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка");
	ИнвестиционнаяДеятельность 	= ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность");
	
	Если ВидСтатьи = ОперативнаяДеятельность Тогда
		Возврат "услуги";
	ИначеЕсли СтатьяОборотов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗданий") Тогда	
	    Возврат "здания";
	ИначеЕсли СтатьяОборотов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗемли") Тогда	
	    Возврат "землю";
	ИначеЕсли СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокСтатейОборотов_ПриобритениеОборудования").НайтиПоЗначению(СтатьяОборотов) <> Неопределено Тогда	
	    Возврат "оборудование";
	ИначеЕсли ВидСтатьи = ИнвестиционнаяДеятельность Тогда
		Возврат "услуги";
	Иначе 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли; 

КонецФункции // ()

&НаСервере
Функция ТекстНазначенияПлатежа(Параметры)
	
	Шаблон = "Оплата за %1 по %2 № %3 от %4, в т.ч. НДС %5.";
	
	Результат = СтрЗаменить(Шаблон, 	"%1", Параметры.Предмет);
	Результат = СтрЗаменить(Результат, 	"%2", Параметры.ВидДокумента);
	Результат = СтрЗаменить(Результат, 	"%3", Параметры.НомерДокумента);
	Результат = СтрЗаменить(Результат, 	"%4", Формат(Параметры.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	//10.12.14
	Если Параметры.СтавкаНДС=ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") тогда
		Результат = СтрЗаменить(Результат, 	", в т.ч. НДС %5.", " без НДС");
	Иначе
		Результат = СтрЗаменить(Результат, 	"%5", Параметры.СуммаНДС);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ()

&НаСервере
Функция СформироватьЗаявкиНаСервере()
	
	СписокСформированныхЗаявок.Очистить();
	Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ОперативныйСценарийПланирования");

	Запрос=Новый Запрос;
	Запрос.Текст =
	//	{Формирование реестра разрешенных оплат по заявкам #3417 СофтЛаб Цветков А. 09.10.2019 
	//	"ВЫБРАТЬ
	//	|	ТЧ.Пометка,
	//	|	ТЧ.ЗаявкаНаДоговор,
	//	|	ТЧ.СтатьяОборотов,
	//	|	ТЧ.ВалютаДокумента,
	//	|	ТЧ.СуммаКОплате,
	//	|	ТЧ.СтавкаНДС,
	//	|	ТЧ.Контрагент,
	//	|	ТЧ.СБ_Инициатор,
	//	|	ТЧ.ДатаДоговора,
	//	|	ТЧ.Договор
	//	|ПОМЕСТИТЬ ТЧ 
	//	|ИЗ
	//	|	&ТЧРеестр КАК ТЧ
	//	|ГДЕ
	//	|	ТЧ.Пометка = ИСТИНА
	//	|	И ТЧ.СуммаКОплате<>0
	//	|;
	//	|ВЫБРАТЬ
	//	|	ТЧ.ЗаявкаНаДоговор,
	//	|	ТЧ.ЗаявкаНаДоговор.Инициатор КАК Инициатор,
	//	|	ТЧ.ЗаявкаНаДоговор.ДоговорКонтрагента.СБ_ПрофильРазноски КАК ПрофильРазноски,
	//	|	ВЫБОР
	//	|		КОГДА ТЧ.ЗаявкаНаДоговор.Сумма - ТЧ.ЗаявкаНаДоговор.СуммаБезНДС <> 0
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ КАК СуммаВключаетНДС,
	//	|	ТЧ.ЗаявкаНаДоговор.СтавкаНДС КАК СтавкаНДС,
	//	|	ТЧ.ЗаявкаНаДоговор.Дата КАК Дата,
	//	|	ТЧ.ЗаявкаНаДоговор.Номер КАК Номер,
	//	|	ТЧ.СтатьяОборотов,
	//	|	ТЧ.ВалютаДокумента,
	//	|	ТЧ.СуммаКОплате,
	//	|	ТЧ.СтавкаНДС,
	//	|	ТЧ.Контрагент,
	//	|	ТЧ.СБ_Инициатор,
	//	|	ТЧ.Договор,
	//	|	ТЧ.ДатаДоговора,
	//	// 1c-izhtc ChuckNorris 11.09.2015 ( 
	//	//|	СБ_СопоставлениеСтатейОборотовБДРиБДДС.СтатьяОборотовБДДС,
	//	//|	СБ_СопоставлениеСтатейОборотовБДРиБДДС.СтатьяОборотовБДДС.ВидСтатьи КАК ВидСтатьиБДДС
	//	|	бит_СоответствияАналитик.ПраваяАналитика_1 КАК СтатьяОборотовБДДС,
	//	|	бит_СоответствияАналитик.ПраваяАналитика_1.ВидСтатьи КАК ВидСтатьиБДДС
	//	// 1c-izhtc ChuckNorris 11.09.2015 ) 
	//	|ИЗ
	//	|	ТЧ КАК ТЧ
	//	// 1c-izhtc ChuckNorris 11.09.2015 ( 
	//	// СтатьяОборотовБДР --> ЛеваяАналитика_1
	//	// СтатьяОборотовБДДС ---> ПраваяАналитика_1
	//	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СопоставлениеСтатейОборотовБДРиБДДС КАК СБ_СопоставлениеСтатейОборотовБДРиБДДС
	//	//|		ПО ТЧ.СтатьяОборотов = СБ_СопоставлениеСтатейОборотовБДРиБДДС.СтатьяОборотовБДР";
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	//	|		ПО ТЧ.СтатьяОборотов = бит_СоответствияАналитик.ЛеваяАналитика_1
	//	|ГДЕ
	//	|	бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС)";
	//	// 1c-izhtc ChuckNorris 11.09.2015 ) 
		"ВЫБРАТЬ
		|	ТЧ.Пометка КАК Пометка,
		|	ТЧ.ЗаявкаНаДоговор КАК ЗаявкаНаДоговор,
		|	ТЧ.ВалютаДокумента КАК ВалютаДокумента,
		|	ТЧ.СуммаКОплате КАК СуммаКОплате,
		|	ТЧ.ПТиУ КАК ПТиУ,
		|	ТЧ.СтавкаНДС КАК СтавкаНДС,
		|	ТЧ.Контрагент КАК Контрагент,
		|	ТЧ.СБ_Инициатор КАК СБ_Инициатор,
		|	ТЧ.ДатаДоговора КАК ДатаДоговора,
		|	ТЧ.Договор КАК Договор
		|ПОМЕСТИТЬ ТЧ
		|ИЗ
		|	&ТЧРеестр КАК ТЧ
		|ГДЕ
		|	ТЧ.Пометка = ИСТИНА
		|	И ТЧ.СуммаКОплате <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ     
		|	Услуги.Ссылка КАК ПТиУ,
		|	Услуги.СчетЗатрат КАК СчетЗатрат,
		|	ВЫРАЗИТЬ(Услуги.Субконто1 КАК Справочник.СтатьиЗатрат) КАК СтатьяЗатрат,
		|	СоответствиеСтатей.СтатьяОборотов КАК СтатьяОборотовБДР,
		|	СоответствияАналитик.ПраваяАналитика_1 КАК СтатьяОборотовБДДС,
		|	СоответствияАналитик.ПраваяАналитика_1.ВидСтатьи КАК ВидСтатьиОборотовБДДС,
		|	СУММА(Услуги.Сумма + Услуги.СуммаНДС) КАК СуммаСНДС,
		|	УслугиВсего.СуммаСНДСВсего КАК СуммаСНДСВсего
		|ПОМЕСТИТЬ ВтСоответствиеСтатей
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК Услуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Услуги.Ссылка КАК Ссылка,
		|			СУММА(Услуги.Сумма + Услуги.СуммаНДС) КАК СуммаСНДСВсего
		|		ИЗ
		|			Документ.ПоступлениеТоваровУслуг.Услуги КАК Услуги
		|		ГДЕ
		|			Услуги.Ссылка В
		|					(ВЫБРАТЬ
		|						ТЧ.ПТиУ
		|					ИЗ
		|						ТЧ)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Услуги.Ссылка) КАК УслугиВсего
		|		ПО Услуги.Ссылка = УслугиВсего.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК СоответствиеСтатей
		|		ПО Услуги.Субконто1 = СоответствиеСтатей.СтатьяРегл
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК СоответствияАналитик
		|		ПО (СоответствиеСтатей.СтатьяОборотов = СоответствияАналитик.ЛеваяАналитика_1)
		|			И (СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
		|ГДЕ
		|	Услуги.Ссылка В
		|			(ВЫБРАТЬ
		|				ТЧ.ПТиУ
		|			ИЗ
		|				ТЧ)
		|	И Услуги.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
		|	И НЕ Услуги.Субконто1 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|	И НЕ СоответствиеСтатей.СтатьяОборотов = ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Услуги.Ссылка,
		|	Услуги.СчетЗатрат,
		|	ВЫРАЗИТЬ(Услуги.Субконто1 КАК Справочник.СтатьиЗатрат),
		|	СоответствиеСтатей.СтатьяОборотов,
		|	СоответствияАналитик.ПраваяАналитика_1,
		|	УслугиВсего.СуммаСНДСВсего,
		|	СоответствияАналитик.ПраваяАналитика_1.ВидСтатьи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ     
		|	Услуги.Ссылка КАК ПТиУ,
		|	Услуги.СчетЗатрат КАК СчетЗатрат,
		|	ВЫРАЗИТЬ(Услуги.Субконто2 КАК Справочник.СтатьиЗатрат) КАК СтатьяЗатрат,
		|	СоответствиеСтатей.СтатьяОборотов КАК СтатьяОборотовБДР,
		|	СоответствияАналитик.ПраваяАналитика_1 КАК СтатьяОборотовБДДС,
		|	СоответствияАналитик.ПраваяАналитика_1.ВидСтатьи КАК ВидСтатьиОборотовБДДС,
		|	СУММА(Услуги.Сумма + Услуги.СуммаНДС) КАК СуммаСНДС,
		|	УслугиВсего.СуммаСНДСВсего КАК СуммаСНДСВсего
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК Услуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Услуги.Ссылка КАК Ссылка,
		|			СУММА(Услуги.Сумма + Услуги.СуммаНДС) КАК СуммаСНДСВсего
		|		ИЗ
		|			Документ.ПоступлениеТоваровУслуг.Услуги КАК Услуги
		|		ГДЕ
		|			Услуги.Ссылка В
		|					(ВЫБРАТЬ
		|						ТЧ.ПТиУ
		|					ИЗ
		|						ТЧ)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Услуги.Ссылка) КАК УслугиВсего
		|		ПО Услуги.Ссылка = УслугиВсего.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК СоответствиеСтатей
		|		ПО Услуги.Субконто2 = СоответствиеСтатей.СтатьяРегл
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК СоответствияАналитик
		|		ПО (СоответствиеСтатей.СтатьяОборотов = СоответствияАналитик.ЛеваяАналитика_1)
		|			И (СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
		|ГДЕ
		|	Услуги.Ссылка В
		|			(ВЫБРАТЬ
		|				ТЧ.ПТиУ
		|			ИЗ
		|				ТЧ)
		|	И Услуги.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
		|	И НЕ Услуги.Субконто2 = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
		|	И НЕ СоответствиеСтатей.СтатьяОборотов = ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Услуги.Ссылка,
		|	Услуги.СчетЗатрат,
		|	ВЫРАЗИТЬ(Услуги.Субконто2 КАК Справочник.СтатьиЗатрат),
		|	СоответствиеСтатей.СтатьяОборотов,
		|	СоответствияАналитик.ПраваяАналитика_1,
		|	УслугиВсего.СуммаСНДСВсего,
		|	СоответствияАналитик.ПраваяАналитика_1.ВидСтатьи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧ.ЗаявкаНаДоговор КАК ЗаявкаНаДоговор,
		|	ВЫРАЗИТЬ(ТЧ.ЗаявкаНаДоговор КАК Документ.рс_ЗаявкаНаДоговор).Инициатор КАК Инициатор,
		|	ВЫРАЗИТЬ(ТЧ.ЗаявкаНаДоговор КАК Документ.рс_ЗаявкаНаДоговор).ДоговорКонтрагента.СБ_ПрофильРазноски КАК ПрофильРазноски,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТЧ.ЗаявкаНаДоговор КАК Документ.рс_ЗаявкаНаДоговор).Сумма - ВЫРАЗИТЬ(ТЧ.ЗаявкаНаДоговор КАК Документ.рс_ЗаявкаНаДоговор).СуммаБезНДС <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СуммаВключаетНДС,
		|	ВЫРАЗИТЬ(ТЧ.ЗаявкаНаДоговор КАК Документ.рс_ЗаявкаНаДоговор).СтавкаНДС КАК СтавкаНДС,
		|	ВЫРАЗИТЬ(ТЧ.ЗаявкаНаДоговор КАК Документ.рс_ЗаявкаНаДоговор).Дата КАК Дата,
		|	ВЫРАЗИТЬ(ТЧ.ЗаявкаНаДоговор КАК Документ.рс_ЗаявкаНаДоговор).Номер КАК Номер,
		|	ТЧ.ВалютаДокумента КАК ВалютаДокумента,
		|	ТЧ.СуммаКОплате КАК СуммаКОплате,
		|	ТЧ.ПТиУ КАК ПТиУ,
		|	ТЧ.СтавкаНДС КАК СтавкаНДС1,
		|	ТЧ.Контрагент КАК Контрагент,
		|	ТЧ.СБ_Инициатор КАК СБ_Инициатор,
		|	ТЧ.Договор КАК Договор,
		|	ТЧ.ДатаДоговора КАК ДатаДоговора,
		|	СоответствиеСтатей.СтатьяОборотовБДДС КАК СтатьяОборотовБДДС,
		|	СоответствиеСтатей.ВидСтатьиОборотовБДДС КАК ВидСтатьиБДДС,
		|	СУММА(СоответствиеСтатей.СуммаСНДС) КАК СуммаСНДС,
		|	СоответствиеСтатей.СуммаСНДСВсего КАК СуммаСНДСВсего
		|ИЗ
		|	ТЧ КАК ТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСоответствиеСтатей КАК СоответствиеСтатей
		|		ПО ТЧ.ПТиУ = СоответствиеСтатей.ПТиУ
		|СГРУППИРОВАТЬ ПО
		|	ТЧ.ЗаявкаНаДоговор,
		|	ВЫРАЗИТЬ(ТЧ.ЗаявкаНаДоговор КАК Документ.рс_ЗаявкаНаДоговор),
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТЧ.ЗаявкаНаДоговор КАК Документ.рс_ЗаявкаНаДоговор).Сумма - ВЫРАЗИТЬ(ТЧ.ЗаявкаНаДоговор КАК Документ.рс_ЗаявкаНаДоговор).СуммаБезНДС <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ТЧ.ВалютаДокумента,
		|	ТЧ.СуммаКОплате,
		|	ТЧ.ПТиУ,
		|	ТЧ.СтавкаНДС,
		|	ТЧ.Контрагент,
		|	ТЧ.СБ_Инициатор,
		|	ТЧ.Договор,
		|	ТЧ.ДатаДоговора,
		|	СоответствиеСтатей.СтатьяОборотовБДДС,
		|	СоответствиеСтатей.ВидСтатьиОборотовБДДС,
		|	СоответствиеСтатей.СуммаСНДСВсего
		|";
	//	}Формирование реестра разрешенных оплат по заявкам #3417
	
	Запрос.УстановитьПараметр("ТЧРеестр", Объект.Реестр.Выгрузить());
	РезультатСтрокаРеестра = Запрос.Выполнить();
	ВыборкаСтрокаРеестра = РезультатСтрокаРеестра.Выбрать();

	СписокЗаявокНаДоговорОтказ=Новый СписокЗначений;

	Пока ВыборкаСтрокаРеестра.Следующий() Цикл
		
		//Проверка профиля разноски
		Если ПрофильРазноскиНеСоответствует(ВыборкаСтрокаРеестра.ПрофильРазноски) тогда
			ДокЗаявкаНаДоговор=ВыборкаСтрокаРеестра.ЗаявкаНаДоговор;
			Если СписокЗаявокНаДоговорОтказ.НайтиПоЗначению(ДокЗаявкаНаДоговор)=Неопределено тогда
				Сообщить("По документу "+ДокЗаявкаНаДоговор+" документ Заявка на расходование ДС не создан. Профиль разноски не соответствует виду операции");
				СписокЗаявокНаДоговорОтказ.Добавить(ДокЗаявкаНаДоговор);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ДокументЗаявка=Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
		//ОКЕЙ Рычаков А.С.(СофтЛаб) 2019-10-29 Начало (#3423)
		ДокументЗаявка.ок_СпособСоздания = 3;
		//ОКЕЙ Рычаков А.С.(СофтЛаб) 2019-10-29 Конец (#3423)
		ДокументЗаявка.ВидОперации=Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику;
		ДокументЗаявка.Дата=ТекущаяДата();
		//	{Формирование реестра разрешенных оплат по заявкам #3417 СофтЛаб Цветков А. 16.09.2019 
		//ДокументЗаявка.ДокументОснование=ВыборкаСтрокаРеестра.ЗаявкаНаДоговор;
		Если Не ВыборкаСтрокаРеестра.ПтиУ.Пустая() Тогда
			ДокументЗаявка.ДокументОснование = ВыборкаСтрокаРеестра.ПтиУ;
			ДокументЗаявка.ДополнительныеСвойства.Вставить("НеВыполнятьДополнительныеДействияПриОтменеПроведения", Истина)
		КонецЕсли;
		//	}Формирование реестра разрешенных оплат по заявкам #3417
		ДокументЗаявка.ФормаОплаты=Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		ДокументЗаявка.ТипЗаявки=Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
		ДокументЗаявка.Важность=Перечисления.бит_Важность.Средняя;
		ДокументЗаявка.СверхБюджета=Ложь;
		ДокументЗаявка.Организация=Объект.Организация;
		ДокументЗаявка.Сценарий=Сценарий;
		ДокументЗаявка.СтатьяОборотов=ВыборкаСтрокаРеестра.СтатьяОборотовБДДС;
		ДокументЗаявка.Контрагент=ВыборкаСтрокаРеестра.Контрагент;
		ДокументЗаявка.ДоговорКонтрагента=ВыборкаСтрокаРеестра.Договор;
		ДокументЗаявка.ДатаРасхода=Объект.Период;
		
		//	{Формирование реестра разрешенных оплат по заявкам #3417 СофтЛаб Цветков А. 30.09.2019 
		//ДокументЗаявка.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ВыборкаСтрокаРеестра.СуммаКОплате
		//										,Ложь
		//										,УчетНДСПереопределяемый.ПолучитьСтавкуНДС(ВыборкаСтрокаРеестра.СтавкаНДС));
		//ДокументЗаявка.Сумма=ВыборкаСтрокаРеестра.СуммаКОплате+ДокументЗаявка.НДС;
		ДокументЗаявка.Сумма = ВыборкаСтрокаРеестра.СуммаКОплате * (ВыборкаСтрокаРеестра.СуммаСНДС/ВыборкаСтрокаРеестра.СуммаСНДСВсего);
		ДокументЗаявка.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ДокументЗаявка.Сумма
												,Истина
												,УчетНДСПереопределяемый.ПолучитьСтавкуНДС(ВыборкаСтрокаРеестра.СтавкаНДС));
		//	}Формирование реестра разрешенных оплат по заявкам #3417										
		ДокументЗаявка.ВалютаДокумента=ВыборкаСтрокаРеестра.ВалютаДокумента;
		ДокументЗаявка.СтавкаНДС=ВыборкаСтрокаРеестра.СтавкаНДС;
		
		ДокументЗаявка.ЭтоКазначейство=Ложь;
		ДокументЗаявка.НеВключатьВПлатежныйКалендарь=Истина;
		ДокументЗаявка.СБ_ПрофильРазноски=ВыборкаСтрокаРеестра.ПрофильРазноски; //Устанавливается значение из реквизита «Профиль разноски» в элементе справочника «Договоры контрагентов»
		ДокументЗаявка.СБ_Инициатор=ВыборкаСтрокаРеестра.СБ_Инициатор;
		ДокументЗаявка.Ответственный=Пользователи.ТекущийПользователь(); 
		
		//12.11.14
		ДокументЗаявка.СуммаВключаетНДС=Истина;
					
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Предмет", 		ПредметОплаты(ВыборкаСтрокаРеестра.СтатьяОборотовБДДС, ВыборкаСтрокаРеестра.ВидСтатьиБДДС));
		СтруктураПараметров.Вставить("ВидДокумента", 	"договору");
		СтруктураПараметров.Вставить("НомерДокумента",	ВыборкаСтрокаРеестра.Договор.ПолноеНаименование());
		СтруктураПараметров.Вставить("ДатаДокумента",	ВыборкаСтрокаРеестра.ДатаДоговора); //Период);
		//10.12.14
		СтруктураПараметров.Вставить("СтавкаНДС",		ДокументЗаявка.СтавкаНДС);
		СтруктураПараметров.Вставить("СуммаНДС",		Формат(ДокументЗаявка.НДС,"ЧДЦ=2; ЧГ="));
		
		ДокументЗаявка.НазначениеПлатежа=ТекстНазначенияПлатежа(СтруктураПараметров); 
		ДокументЗаявка.НазначениеПлатежаУпр=ТекстНазначенияПлатежа(СтруктураПараметров);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КурсыВалют.Курс,
			|	КурсыВалют.Кратность
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыВалют";
		Запрос.УстановитьПараметр("ВалютаДокумента", ВыборкаСтрокаРеестра.ВалютаДокумента);
		Запрос.УстановитьПараметр("ДатаДокумента", ТекущаяДата());
		РезультатКурс = Запрос.Выполнить();
		ВыборкаКурсыВалют = РезультатКурс.Выбрать();
		Пока ВыборкаКурсыВалют.Следующий() Цикл
			ДокументЗаявка.КурсДокумента=ВыборкаКурсыВалют.Курс;
			ДокументЗаявка.КратностьДокумента=ВыборкаКурсыВалют.Кратность;  
		КонецЦикла;
		
		ДокументЗаявка.ЭтоКазначейство=Ложь;
		ДокументЗаявка.НеВключатьВПлатежныйКалендарь=Истина; 
		ДокументЗаявка.Комментарий="Сформирован на основании документа ""Заявка на договор"" № "+
		ВыборкаСтрокаРеестра.Номер+" от "+ВыборкаСтрокаРеестра.Дата;
		ПроверитьИПровестиЗаявку(ВыборкаСтрокаРеестра.ЗаявкаНаДоговор,ДокументЗаявка);
		
	КонецЦикла;

КонецФункции

////+СБ Скиба С.Д.
&НаКлиенте
Процедура СформироватьЗаявки(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Период) тогда
		ПоказатьПредупреждение(, "Заполните период!");
	Иначе
		СформироватьЗаявкиНаСервере();;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИПровестиЗаявку(ДокументЗаявкаНаДоговор,ДокументЗаявка)
	
	//Проверка есть ли уже созданная заявка
	Запрос = Новый Запрос;
	Запрос.Текст =
	 "ВЫБРАТЬ
	 |	бит_ЗаявкаНаРасходованиеСредств.ПометкаУдаления,
	 |	бит_ЗаявкаНаРасходованиеСредств.Ссылка КАК РанееСозданнаяЗаявка
	 |ИЗ
	 |	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	 |ГДЕ
	 |	бит_ЗаявкаНаРасходованиеСредств.ПометкаУдаления = ЛОЖЬ
	 |	И бит_ЗаявкаНаРасходованиеСредств.ДокументОснование = &ДокументОснование
	 |	И бит_ЗаявкаНаРасходованиеСредств.СтатьяОборотов = &СтатьяОборотов
	 |	И НЕ бит_ЗаявкаНаРасходованиеСредств.Ссылка В (&СписокСформированныхЗаявок)";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументЗаявкаНаДоговор);
	Запрос.УстановитьПараметр("СтатьяОборотов", ДокументЗаявка.СтатьяОборотов);
	Запрос.УстановитьПараметр("СписокСформированныхЗаявок", СписокСформированныхЗаявок);
	РезультатПроверки = Запрос.Выполнить();
	Если РезультатПроверки.Пустой() тогда
		Попытка
			ДокументЗаявка.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить(""+ДокументЗаявка+" проведен");
			НайтиИОбновитьПлатежнуюПозицию(ДокументЗаявка,Ложь);
		Исключение
			Попытка
				ДокументЗаявка.Записать();
				Сообщить(""+ДокументЗаявка+" записан");
			Исключение
				Сообщить(""+ДокументЗаявка+" не записан!");
			КонецПопытки;
		КонецПопытки;
		Если ЗначениеЗаполнено(ДокументЗаявка.ссылка) тогда
			СписокСформированныхЗаявок.Добавить(ДокументЗаявка.ссылка);
		КонецЕсли;
	Иначе
		//Обновление уже созданной заявки
		СтрокиРезультатаПроверки=РезультатПроверки.Выгрузить();
		СписокСформированныхЗаявок.Добавить(СтрокиРезультатаПроверки[0].РанееСозданнаяЗаявка);
		
		РанееСозданнаяЗаявкаОбъект=СтрокиРезультатаПроверки[0].РанееСозданнаяЗаявка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(РанееСозданнаяЗаявкаОбъект,ДокументЗаявка,,"Номер,Дата");
		Попытка
			РанееСозданнаяЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить(""+РанееСозданнаяЗаявкаОбъект+" обновлен");
			
			//Обновление документа ПлатежнаяПозиция
			НайтиИОбновитьПлатежнуюПозицию(РанееСозданнаяЗаявкаОбъект,Истина);
		Исключение
			Попытка
				РанееСозданнаяЗаявкаОбъект.Записать();
				Сообщить(""+РанееСозданнаяЗаявкаОбъект+" обновлен но не проведен");
			Исключение
				Сообщить("Документ "+РанееСозданнаяЗаявкаОбъект+" не обновлен!");
			КонецПопытки;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// 1c-izhtc ChuckNorris 09.09.2015 ( 
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", СписокОрганизацийИзНастроекКазначейства.ВыгрузитьЗначения());
	м_Параметры = Новый Массив;
	м_Параметры.Добавить(НовыйПараметр);
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(м_Параметры);
	// 1c-izhtc ChuckNorris 09.09.2015 ) 
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Период) < НачалоДня(ТекущаяДата()) тогда
		Объект.Период=Дата(1,1,1);
		ПоказатьПредупреждение(, "Дата расхода не может быть ранее текущей даты");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрофильРазноскиНеСоответствует(ПрофильРазноски) 
	
	Если ПрофильРазноски=Null тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ВидАналитики
		|ИЗ
		|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA
		|ГДЕ
		|	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.Аналитика = &Аналитика
		|	И СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ЗначениеАналитики = &ЗначениеАналитики";

	Запрос.УстановитьПараметр("Аналитика", 			ПрофильРазноски);
	Запрос.УстановитьПараметр("ЗначениеАналитики",  ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику"));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Объект.СписокСтатусов.Очистить();
	Объект.СписокСтатусов.Добавить("к оплате");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуИзСтроки(ИсходнаяСтрокаСДатой)
	
	Попытка					
		Стр=НРег(СокрЛП(ИсходнаяСтрокаСДатой));					
		ПозицияОт=Найти(Стр,"от ");
		ДатаСтрока="";
		Если ПозицияОт>0 тогда
			ИсходнаяСтрока=СокрЛП(Сред(Стр,ПозицияОт+2));
			Для К=1 по СтрДлина(ИсходнаяСтрока) цикл
				Симв=Сред(ИсходнаяСтрока,К,1);
				Если СписокСимволовДаты.НайтиПоЗначению(Симв)<>Неопределено тогда
					ДатаСтрока=ДатаСтрока+Симв;
				Иначе
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			Если СтрДлина(ДатаСтрока)=8 тогда							
				СтрокаГод=""+?(Год("20"+Прав(ДатаСтрока,2)+"0101")<=Год(ТекущаяДата()),"20"+Прав(ДатаСтрока,2),"19"+Прав(ДатаСтрока,2));							
				Возврат Дата(СтрокаГод,Сред(ДатаСтрока,4,2),Лев(ДатаСтрока,2));
			ИначеЕсли СтрДлина(ДатаСтрока)=10 тогда
				Возврат Дата(Прав(ДатаСтрока,4),Сред(ДатаСтрока,4,2),Лев(ДатаСтрока,2));;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура НайтиИОбновитьПлатежнуюПозицию(Источник,Обновление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПодчиненныйДокумент.Ссылка КАК РанееСозданнаяПлатежнаяПозиция,
	               |	бит_СтатусыОбъектов.Статус
	               |ИЗ
	               |	Документ.бит_ПлатежнаяПозиция КАК ПодчиненныйДокумент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	               |		ПО (бит_СтатусыОбъектов.Объект = ПодчиненныйДокумент.ДокументОснование)
	               |ГДЕ
	               |	ПодчиненныйДокумент.ДокументОснование = &ДокументОснование";
								   
	Запрос.УстановитьПараметр("ДокументОснование",Источник.Ссылка);
	ВыборкаПлатежнаяПозиция=Запрос.Выполнить().Выбрать();
	Пока ВыборкаПлатежнаяПозиция.Следующий() цикл
		ПлатежнаяПозиция = ВыборкаПлатежнаяПозиция.РанееСозданнаяПлатежнаяПозиция.ПолучитьОбъект();
		
		ПлатежнаяПозиция.Распределение.Очистить();
		
		ПлатежнаяПозиция.ДополнительныеСвойства.Вставить("ПрограммнаяЗапись");
		
		ПлатежнаяПозиция.ДокументОснование=Источник.Ссылка;
		
		ПлатежнаяПозиция.Сумма= Источник.Сумма;		
				
		ПлатежнаяПозиция.Заполнить(Источник.Ссылка);

		//Находим неверно заполненную строку в распределении и исправляем НДС => изменится НДС по документу
		НекорректнаяСтрока=ПлатежнаяПозиция.Распределение.Найти(ПлатежнаяПозиция.Сумма,"Сумма");
		Если НекорректнаяСтрока<>Неопределено тогда
			НекорректнаяСтрока.НДС=Источник.НДС;
		КонецЕсли;
		ПлатежнаяПозиция.Дата=Источник.Дата;
		
		ВидыОпераций = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование; 
		
		ВидыОперацийЕстьСчет = Новый Массив;
		ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.ПеречислениеНалога);
		ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.ПереводНаДругойСчет);
		ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.ПеречислениеЗП);
		ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.ПрочееСписаниеБезналичныхДенежныхСредств);
		ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.РасчетыПоКредитамИЗаймамСКонтрагентами);
		ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.ПрочиеРасчетыСКонтрагентами);
		
		Если ВидыОперацийЕстьСчет.Найти(Источник.ВидОперации) <> Неопределено Тогда
			
			Если Источник.ДополнительныеСвойства.Свойство("СчетРСБУ") Тогда
				СчетУчетаБУ = Источник.ДополнительныеСвойства.СчетРСБУ;				
			Иначе
				СчетУчетаБУ = СБ_КазначействоСервер.СчетРСБУПоПрофилюРазноски(Источник.СБ_ПрофильРазноски);
			КонецЕсли; 
			         			         		
			Если СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПереводыВПути") // 57.01 
				ИЛИ СчетУчетаБУ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПереводыВПутиВал") // 57.21
				Тогда
				
				Если Источник.ДополнительныеСвойства.Свойство("ВидПеревода") Тогда
					ПлатежнаяПозиция.Субконто1 = Источник.ДополнительныеСвойства.ВидПеревода;	
				КонецЕсли;				
			КонецЕсли; 
			
		КонецЕсли; 
	
		РежимЗаписиПозиция = ?(ВыборкаПлатежнаяПозиция.Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Утверждена"),РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);
		
		Попытка
			ПлатежнаяПозиция.Записать(РежимЗаписиПозиция);
			Если Обновление тогда 
				Сообщить("Документ "+ПлатежнаяПозиция+" обновлен!");
			Иначе
				Сообщить("Документ "+ПлатежнаяПозиция+" записан!");
			КонецЕсли;
		Исключение
			Если Обновление тогда 
				Сообщить("Документ "+ПлатежнаяПозиция+"не обновлен!");
			Иначе
				Сообщить("Документ "+ПлатежнаяПозиция+"не записан!");
			КонецЕсли;
        КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
//////-СБ Скиба С.Д.

// 1c-izhtc ChuckNorris 09.09.2015 ( 
&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	Объект.НачалоПериода = РезультатВыбора.НачалоПериода;
	Объект.КонецПериода = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Статусы = Новый СписокЗначений;
	// 1c-izhtc ChuckNorris 30.11.2016 ( 
	//Статусы.Добавить("не найден");
	//Статусы.Добавить("не проведен");
	//Статусы.Добавить("оплачен");
	//Статусы.Добавить("нет задолженности");
	//Статусы.Добавить("к оплате");
	
	// Статусы документа "Платежное поручение"
	Статусы.Добавить("оплачен");
	Статусы.Добавить("подготовлено");
	Статусы.Добавить("на подписи");
	Статусы.Добавить("отправлено");
	Статусы.Добавить("отклонено");
	
	// Для остальных документов
	Статусы.Добавить("не найден");
	Статусы.Добавить("нет задолженности");
	Статусы.Добавить("к оплате");
	
	// 1c-izhtc ChuckNorris 30.11.2016 ) 

	СписокСимволовДаты=Новый СписокЗначений;
	СписокСимволовДаты.Добавить("0");
	СписокСимволовДаты.Добавить("1");
	СписокСимволовДаты.Добавить("2");
	СписокСимволовДаты.Добавить("3");
	СписокСимволовДаты.Добавить("4");
	СписокСимволовДаты.Добавить("5");
	СписокСимволовДаты.Добавить("6");
	СписокСимволовДаты.Добавить("7");
	СписокСимволовДаты.Добавить("8");
	СписокСимволовДаты.Добавить("9");
	СписокСимволовДаты.Добавить(".");

	СписокОрганизацийИзНастроекКазначейства = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_ФормироватьЗаявкиНаОплату");
	
КонецПроцедуры

// 1c-izhtc ChuckNorris 09.09.2015 ) 