
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	 
	
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
		
	ОбновитьНастройкиНаСервере();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МакетОтборов = ОбработкаОбъект.ПолучитьМакет("СКД_ДанныеДляЗаполнения");
	
	НастройкиОтборов = МакетОтборов.НастройкиПоУмолчанию;
  
    АдресСхемы = ПоместитьВоВременноеХранилище(МакетОтборов, УникальныйИдентификатор);
    Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтборов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтборов.Отбор,"Организация",Организация_Окей,,,Истина);
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиОтборов);
	Объект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	УстановитьНастройкиПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДанныеДляОбработкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоля = СтрЗаменить(НРег(Поле.Имя), НРег("ДанныеДляОбработки"),"");
	
	Если ИмяПоля = НРег("Выбран")
		ИЛИ ИмяПоля = НРег("Документ") Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Попытка
		
		ДанныеСтроки = Объект.ДанныеДляОбработки.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ПоказатьЗначение(, ДанныеСтроки[ИмяПоля]);
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляОбработкиДокументПриИзменении(Элемент)
	
	ДанныеДляОбработкиДокументПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеДляОбработкиДокументПриИзмененииНаСервере()
	
	ТекущаяСтрока = Элементы.ДанныеДляОбработки.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные = Объект.ДанныеДляОбработки.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаполнитьНаСервереДляСтроки(ТекущиеДанные) Тогда
		ТекущиеДанные.Документ = Новый(ТипЗнч(ТекущиеДанные.Документ));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.ДанныеДляОбработки.Количество() > 0 Тогда
	
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_Заполнить", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Табличные части будут перезаполнены. Продолжить выполнение операции?", Режим, 0);
		
	Иначе
		
		ЗаполнитьНаСервере();
		 	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса_Заполнить(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	ЗаполнитьНаСервере();
	 	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если Объект.ДанныеДляОбработки.НайтиСтроки(Новый Структура("Выбран",Истина)).Количество() Тогда
		СформироватьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПоУмолчанию()
	
	// Получим настройку по - умолчанию и последнюю использованную.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипНастройки"			  , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	СтруктураПараметров.Вставить("НастраиваемыйОбъект"    , "Обработка.ок_ВыгрузкаОперацийПоОСиНМАвAx40");
	СтруктураПараметров.Вставить("ИспользоватьПриОткрытии", Истина);
	СохрНастройка = Справочники.бит_СохраненныеНастройки.ПолучитьНастройкуПоУмолчанию(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		
		ПрименитьНастройкиЗавершениеНаСервере(СохрНастройка);
		
	КонецЕсли; 
	
	Элементы.ДанныеДляВыгрузки.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтображатьВДанныхДляВыгрузки", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)

	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки" , ПолучитьНастройкиКД(Объект.КомпоновщикНастроек));
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", "Обработка.ок_ВыгрузкаОперацийПоОСиНМАвAx40");
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
	ОбновитьНастройкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)

	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", "Обработка.ок_ВыгрузкаОперацийПоОСиНМАвAx40");
    
    Оповещение = Новый ОписаниеОповещения("ПрименитьНастройкиЗавершение", ЭтаФорма);
    ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки",ПараметрыФормы,ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте 
Процедура ПрименитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройкиЗавершениеНаСервере(Результат);
		
	КонецЕсли;	
	
	ОбновитьНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере 
Процедура ПрименитьНастройкиЗавершениеНаСервере(Результат) Экспорт
	
	СтруктураНастроек = Результат.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СтруктураНастроек);
		Объект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
				
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура СкопироватьОтборКомпоновщика(Источник, Приемник)
	
	Для Каждого ЭлементОтбора Из Источник Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
            ЗаполнитьЗначенияСвойств(Приемник.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), ЭлементОтбора);        
        Иначе
            НоваяГруппа = Приемник.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
            ЗаполнитьЗначенияСвойств(НоваяГруппа, ЭлементОтбора);
            СкопироватьОтборКомпоновщика(ЭлементОтбора.Элементы, НоваяГруппа.Элементы);
		КонецЕсли;
		
    КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	
	НастройкиПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПоУмолчаниюНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МакетОтборов = ОбработкаОбъект.ПолучитьМакет("СКД_ДанныеДляЗаполнения");
													 
	НастройкиОтборов = МакетОтборов.НастройкиПоУмолчанию;
  
    АдресСхемы = ПоместитьВоВременноеХранилище(МакетОтборов, УникальныйИдентификатор);
    Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтборов);
	      
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиОтборов);
	Объект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМетки(Команда)
	
	ИзменитьМетки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьМетки(Команда)
	
	ИзменитьМетки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМетки(Метка)
	
	Для каждого СтрокаТЧ Из Объект.ДанныеДляОбработки Цикл
		
		СтрокаТЧ.Выбран = Метка;
		
		ОбновитьПолеОтображатьВДанныхДляВыгрузки(СтрокаТЧ);
		
	КонецЦикла; 
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьНастройкиНаСервере()
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("СКД_ДанныеДляЗаполнения");
	
	Настройки = Объект.КомпоновщикНастроек.ПолучитьНастройки(); 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ОбработатьРезультат(Результат);
	
	ОбновитьНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-26 (#3816)
//Процедура ОбработатьРезультат(Результат)
Функция ОбработатьРезультат(Результат, ИзменяемаяСтрока = Неопределено)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-26 (#3816)

	Для Каждого ТекСтрока Из Результат Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ОбъектСтроительства) Тогда  //ОК Т.Довбешка  17.03.2020
			ТекСтрока.ОбъектСтроительства = ПолучитьРодителяЭлемента(ТекСтрока.ОбъектСтроительства);
		КонецЕсли;                                                   //ОК Т.Довбешка  17.03.2020
	КонецЦикла;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаДанных.Организация КАК Организация,
	                      |	ТаблицаДанных.ОбъектСтроительства КАК ОбъектСтроительства,
						  |*
	                      |ПОМЕСТИТЬ ВТ_ТаблицаДанных
	                      |ИЗ
	                      |	&ТаблицаДанных КАК ТаблицаДанных
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ТаблицаДанных.Организация КАК Организация,
	                      |	ВТ_ТаблицаДанных.ОбъектСтроительства КАК ОбъектыСтроительства,
	                      |	МИНИМУМ(СопоставлениеАналитики.КодАналитикиАксапты) КАК КодАналитикиАксапты
	                      |ПОМЕСТИТЬ ВТ_СоответствиеОбъектовСтроительства
	                      |ИЗ
	                      |	ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ок_СопоставлениеАналитики КАК СопоставлениеАналитики
	                      |		ПО ВТ_ТаблицаДанных.Организация = СопоставлениеАналитики.Организация
	                      |			И (СопоставлениеАналитики.Аналитика1С ССЫЛКА Справочник.ОбъектыСтроительства)
	                      |			И ВТ_ТаблицаДанных.ОбъектСтроительства = СопоставлениеАналитики.Аналитика1С
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_ТаблицаДанных.Организация,
	                      |	ВТ_ТаблицаДанных.ОбъектСтроительства
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
						  | ВТ_ТаблицаДанных.*,
	                      |	ВТ_СоответствиеОбъектовСтроительства.КодАналитикиАксапты КАК АналитикаОбъект
	                      |ИЗ
	                      |	ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствиеОбъектовСтроительства КАК ВТ_СоответствиеОбъектовСтроительства
	                      |		ПО ВТ_ТаблицаДанных.Организация = ВТ_СоответствиеОбъектовСтроительства.Организация
	                      |			И ВТ_ТаблицаДанных.ОбъектСтроительства = ВТ_СоответствиеОбъектовСтроительства.ОбъектыСтроительства");
	
	
	Запрос.УстановитьПараметр("ТаблицаДанных",Результат);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДанныеСОшибкой = Результат.Скопировать(Новый Структура("КоличествоЗаписейПоРегистраторуБольшеОдной", Истина));
	Для каждого СтрокаСОшибкой Из ДанныеСОшибкой Цикл
		Сообщить("В документе " + СтрокаСОшибкой.Документ + " счета или аналитики не идентичны друг другу.", СтатусСообщения.Внимание);
	КонецЦикла; 
	
	ДанныеДляЗагрузки = Результат.Скопировать(Новый Структура("КоличествоЗаписейПоРегистраторуБольшеОдной", Ложь));
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-26 (#3816)
//	Объект.ДанныеДляОбработки.Загрузить(ДанныеДляЗагрузки);
//	
//КонецПроцедуры

	Если ИзменяемаяСтрока <> Неопределено Тогда
		Если ДанныеДляЗагрузки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, ДанныеДляЗагрузки[0]);
		Иначе 
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Объект.ДанныеДляОбработки.Загрузить(ДанныеДляЗагрузки);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-26 (#3816)

&НаСервере
Функция ПолучитьРодителяЭлемента(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Родитель) Тогда 
		Возврат ПолучитьРодителяЭлемента(Элемент.Родитель);
	Иначе 
		Возврат Элемент;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Функция ЗаполнитьНаСервереДляСтроки(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("СКД_ДанныеДляЗаполнения");
	
	Настройки = Объект.КомпоновщикНастроек.ПолучитьНастройки(); 
	
	ЭлементОтбораКомпоновкиДанных = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораКомпоновкиДанных.Использование = Истина;
	ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Регистратор");
	ЭлементОтбораКомпоновкиДанных.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораКомпоновкиДанных.ПравоеЗначение= Строка.Документ;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ДанныеСОшибкой = Результат.Скопировать(Новый Структура("КоличествоЗаписейПоРегистраторуБольшеОдной", Истина));
	Для каждого СтрокаСОшибкой Из ДанныеСОшибкой Цикл
		Сообщить("В документе " + СтрокаСОшибкой.Документ + " счета или аналитики не идентичны друг другу.", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЦикла; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-26 (#3816)
	//ДанныеДляЗагрузки = Результат.Скопировать(Новый Структура("КоличествоЗаписейПоРегистраторуБольшеОдной", Ложь));
	//Если ДанныеДляЗагрузки.Количество() > 0 Тогда
	//	ЗаполнитьЗначенияСвойств(Строка, ДанныеДляЗагрузки[0]);
	//Иначе
	Если НЕ ОбработатьРезультат(Результат, Строка) Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-26 (#3816)
		Сообщить("Данные для выгрузки в Axapta по документу " + Строка.Документ + " не найдены.", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СформироватьНаСервере()
	
	СтруктураПараметровЗаполнения = Новый Структура();
	
	ОбработатьДанныеДляОбработки(Объект.ДанныеДляОбработки, СтруктураПараметровЗаполнения);
	
	ОбновитьНастройкиНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьДанныеДляОбработки(ДанныеДляОбработки, СтруктураПараметровЗаполнения)
	
	// зафиксируем начало работы РЗ
	СинонимРЗ = Метаданные.РегламентныеЗадания.ок_ВыгрузкаКонтрагентовДоговоровАксапта.Синоним;
	ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,, "Начало выгрузки");
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ок_ВыгрузкаКонтрагентовДоговоровАксапта);
	
	ИсточникЗагрузки = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты", "Источник загрузки");	
	Если Не ЗначениеЗаполнено(ИсточникЗагрузки) Тогда 
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru = 'В настройках не указан источник загрузки. Задание прервано.'"));
		Возврат;
	КонецЕсли;
	
	Организация_Окей 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	Организация_ОкейЛоджистикс	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Лоджистикс");
	НастройкиПодключения		= РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.ок_ПолучитьНастройкиПодключенияАксапта();
	СоединениеАДО 				= Неопределено;
	СтруктураПараметров			= Неопределено;
	ТЗОрганизации = ДанныеДляОбработки.Выгрузить(Новый Структура("Выбран", Истина), "Организация");
	ТЗОрганизации.Свернуть("Организация");
	МассивОрганизаций = ТЗОрганизации.ВыгрузитьКолонку("Организация");
	Для каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		
		Если СтруктураПараметров <>  Неопределено Тогда
			СтруктураПараметров.Вставить("Организация", 			ТекущаяОрганизация);
			СтруктураПараметров.Вставить("НастройкиПодключения", 	НастройкиПодключения[ТекущаяОрганизация]);
		КонецЕсли; 

		ДетальныеЗаписиПоОрганизации = ДанныеДляОбработки.НайтиСтроки(Новый Структура("Выбран, Организация", Истина, ТекущаяОрганизация));
		Для каждого ТекущиеДанныеДляОбработки Из ДетальныеЗаписиПоОрганизации Цикл
			
			Если НЕ (ЗначениеЗаполнено(ТекущиеДанныеДляОбработки.СубсчетСчета08)
					И ЗначениеЗаполнено(ТекущиеДанныеДляОбработки.СчетУчетаРасчетовСКонтрагентом6076)) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СоединениеАДО = Неопределено Тогда
			
				СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
				СоединениеАДО.ConnectionTimeOut = 20; 
				СоединениеАДО.ConnectionTimeOut = 600; 
				СоединениеАДО.CommandTimeOut = 600; 
				СоединениеАДО.CursorLocation = 3;
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ИсточникЗагрузки", 		бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты", "Источник загрузки"));
				СтруктураПараметров.Вставить("СинонимРЗ", 				СинонимРЗ);
				СтруктураПараметров.Вставить("Организация_Окей", 		Организация_Окей);
			    СтруктураПараметров.Вставить("ОбработатьПолеUE", 		бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ПараметрыЗагрузкиАксапты", "Обрабатывать поле ПересчетУЕ в договорах", Ложь));
				СтруктураПараметров.Вставить("Организация", 			ТекущаяОрганизация);
				СтруктураПараметров.Вставить("НастройкиПодключения", 	НастройкиПодключения[ТекущаяОрганизация]);
			
				Если Не ок_ПодключитьВнешнийИсточникДанных(ТекущаяОрганизация, СтруктураПараметров, СоединениеАДО) Тогда
					Возврат; // не удалось подключиться, прерываем задание
				КонецЕсли;
				
				ЗапросАДО = Новый COMОбъект("ADODB.Command");
				ЗапросАДО.ActiveConnection = СоединениеАДО;
				
			КонецЕсли; 
			
			Если НЕ ВыгрузитьДанныеВАксапта(ТекущиеДанныеДляОбработки, ЗапросАДО, СтруктураПараметров.НастройкиПодключения.БазаДанных) Тогда
				ТекстСообщения = НСтр("ru = 'Неудачная выгрузка данных по документу %1, 
				|причина: %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущиеДанныеДляОбработки.Документ, ОписаниеОшибки()); 
				ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				// Продолжаем выгрузку
				Продолжить;
			Иначе
				ТекущиеДанныеДляОбработки.Выгружен = Истина;
				ТекущиеДанныеДляОбработки.ВыгруженАктуальный = Истина;
				
				ДокументОбъект = ТекущиеДанныеДляОбработки.Документ.ПолучитьОбъект();
				ДокументОбъект.ДополнительныеСвойства.Вставить("НепроверятьОк_ВыгруженВAXAPTA_Актуальный",Истина);
				ДокументОбъект.ок_ВыгруженВAXAPTA 				= Истина;
				ДокументОбъект.ок_ВыгруженВAXAPTA_Актуальный 	= Истина;
				ДокументОбъект.ОбменДанными.Загрузка 			= Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если СоединениеАДО <> Неопределено Тогда
		СоединениеАДО.Close();
	КонецЕсли; 
	
	// зафиксируем окончание работы РЗ
	ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Информация,,,"Окончание выгрузки");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьДанныеВАксапта(ДанныеДляОбработки, ЗапросАДО, База)
	
	пInvoiceNum	 		= ДанныеДляОбработки.InvoiceNum;
	пTransDate	 		= Формат(ДанныеДляОбработки.ДатаПроводки, "ДФ=yyyy-MM-dd");
	пSourceDate	 		= Формат(ДанныеДляОбработки.ДатаНакладной, "ДФ=yyyy-MM-dd");
	пReceiptDate	 	= Формат(ДанныеДляОбработки.ДатаПолученияЗакрывающегоДокумента, "ДФ=yyyy-MM-dd");
	пAccountType	 	= ДанныеДляОбработки.ТипКонтрагента;
	пAccountNum	 		= ДанныеДляОбработки.КодКонтрагента;
	пRcontractAccount	= ДанныеДляОбработки.КодДоговора;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-16 (#МДМ)
	//пContractRecId		= ДанныеДляОбработки.УникальныйИдентификаторДоговора;
	пCONTRACTCODE1C		= ДанныеДляОбработки.УникальныйИдентификаторДоговора;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-16 (#МДМ)
	пTxt	 			= СтрЗаменить(ДанныеДляОбработки.СодержаниеПроводки,"'","''");
	пDimension	 		= СтрЗаменить(Строка(ДанныеДляОбработки.АналитикаОбъект),"'","''");
	пAmountMST	 		= СтрЗаменить(СтрЗаменить(Строка(ДанныеДляОбработки.СуммаСНДС), Символы.НПП, ""), ",", ".");
	пTaxAmount	 		= СтрЗаменить(СтрЗаменить(Строка(ДанныеДляОбработки.СуммаНДС), Символы.НПП, ""), ",", ".");
	пTaxType	 		= ДанныеДляОбработки.СтавкаНДС;
	пOffsetAccount		= ДанныеДляОбработки.СубсчетСчета08;
	пPostingProfile		= ДанныеДляОбработки.СчетУчетаРасчетовСКонтрагентом6076;
	пPosted	 			= ДанныеДляОбработки.Posted;
	пUID1C	 			= ДанныеДляОбработки.GUIDдокумента;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-21 (#МДМ)
	пMODIFIEDDATE	 	= Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
	пMODIFIEDTIME	 	= СтрЗаменить(СокрЛП(ТекущаяДата() - НачалоДня(ТекущаяДата())), Символы.НПП, "");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-21 (#МДМ)
	
	Если ДанныеДляОбработки.Выгружен Тогда
		СтрокиЗначений	= "UPDATE ["+База+"].[dbo].[E1CVENDINVOICE] SET " +
		"[InvoiceNum]	 	= '"+	пInvoiceNum			+"'
		|,[TransDate]	 	= '"+	пTransDate			+"'
		|,[SourceDate]	 	= '"+	пSourceDate			+"'
		|,[ReceiptDate]	 	= '"+	пReceiptDate		+"'
		|,[AccountType]	 	= "+	пAccountType		+"
		|,[AccountNum]	 	= '"+	пAccountNum			+"'
		|,[RcontractAccount]= '"+	пRcontractAccount	+"'
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-16 (#МДМ)
		//|,[ContractRecId]	= '"+	пContractRecId		+"'
		|,[CONTRACTCODE1C]	= '"+	пCONTRACTCODE1C		+"'
		|,[MODIFIEDDATE]	= '"+	пMODIFIEDDATE		+"'
		|,[MODIFIEDTIME]	= "+	пMODIFIEDTIME		+"
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-16 (#МДМ)
		|,[Txt]	 			= '"+	пTxt				+"'
		|,[Dimension]	 	= '"+	пDimension			+"'
		|,[AmountMST]	 	= "+	пAmountMST			+"
		|,[TaxAmount]	 	= "+	пTaxAmount			+"
		|,[TaxType]	 		= "+	пTaxType			+"
		|,[OffsetAccount]	= '"+	пOffsetAccount		+"'
		|,[PostingProfile]	= '"+	пPostingProfile		+"'
		|,[Posted]	 		= "+	пPosted				+"
		|,[UID1C]	 		= '"+	пUID1C				+"' 
		|WHERE
		|[UID1C]	 		= '"+	пUID1C				+"'
		|";
	Иначе
		ШапкаЗапросаSQLПоДанным	= "INSERT into ["+База+"].[dbo].[E1CVENDINVOICE] (" + 
		//|[RecID]
		"[InvoiceNum]
		|,[TransDate]
		|,[SourceDate]
		|,[ReceiptDate]
		|,[AccountType]
		|,[AccountNum]
		|,[RcontractAccount]
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-16 (#МДМ)
		//|,[ContractRecId]
		|,[CONTRACTCODE1C]
		|,[MODIFIEDDATE]
		|,[MODIFIEDTIME]
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-16 (#МДМ)
		|,[Txt]
		|,[Dimension]
		|,[AmountMST]
		|,[TaxAmount]
		|,[TaxType]
		|,[OffsetAccount]
		|,[PostingProfile]
		|,[Posted]
		|,[UID1C])
		|VALUES";
		
		СтрокиЗначений = ШапкаЗапросаSQLПоДанным+ "
		
		//|('"+	пRecID				+"'
		|('"+	пInvoiceNum			+"'
		|,'"+	пTransDate			+"'
		|,'"+	пSourceDate			+"'
		|,'"+	пReceiptDate		+"'
		|,"+	пAccountType		+"
		|,'"+	пAccountNum			+"'
		|,'"+	пRcontractAccount	+"'
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-16 (#МДМ)
		|,'"+	пCONTRACTCODE1C		+"'
		|,'"+	пMODIFIEDDATE		+"'
		|,"+	пMODIFIEDTIME		+"
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-16 (#МДМ)
		|,'"+	пTxt				+"'
		|,'"+	пDimension			+"'
		|,"+	пAmountMST			+"
		|,"+	пTaxAmount			+"
		|,"+	пTaxType			+"
		|,'"+	пOffsetAccount		+"'
		|,'"+	пPostingProfile		+"'
		|,"+	пPosted				+"
		|,'"+	пUID1C				+"')"; 
	
	КонецЕсли; 

	ЗапросАДО.CommandText = СтрокиЗначений;
	Попытка                                                 
		РезультатЗагрузки = ЗапросАДО.Execute();
	Исключение
		ТекстСообщения = НСтр("ru = 'При выгрузке данных в Акспата произошла ошибка: %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки()); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации("Выгрузка данных в Аксапту (ОК)", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		Возврат Ложь;	
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиКД(КомпоновщикНастроек)
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

&НаКлиенте
Функция ОбновитьПолеОтображатьВДанныхДляВыгрузки(Строка)

	Если Строка.Выбран
		И ЗначениеЗаполнено(Строка.СубсчетСчета08)
		И ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом6076) Тогда
	
		Строка.ОтображатьВДанныхДляВыгрузки = Истина;
		
	Иначе
		
		Строка.ОтображатьВДанныхДляВыгрузки = Ложь;
		
	КонецЕсли; 

КонецФункции

&НаКлиенте
Процедура ДанныеДляОбработкиВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеДляОбработки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ОбновитьПолеОтображатьВДанныхДляВыгрузки(ТекущиеДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ок_ПодключитьВнешнийИсточникДанных(Организация, СтруктураПараметров, СоединениеАДО)
	
	СинонимРЗ				= СтруктураПараметров.СинонимРЗ;
	
	// получим параметры подключения
	Если Не ТипЗнч(СтруктураПараметров.НастройкиПодключения) = Тип("Структура") Тогда	
		ТекстСообщения = НСтр("ru = 'Нет настроек для подключения к Акспата для организации %1. Задание прервано.");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация); 
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураПараметров.НастройкиПодключения.СтрокаСоединения) Тогда
		ТекстСообщения = НСтр("ru = 'Некорректные настройки для подключения к Акспата для организации %1. Не удалось определить строку соединения. Задание прервано.");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация); 
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		Возврат Ложь;	
	КонецЕсли;	 
	
	Попытка
		СоединениеАДО.Open(СтруктураПараметров.НастройкиПодключения.СтрокаСоединения);			
	Исключение 
		ТекстСообщения = НСтр("ru = 'Неудачная попытка соединения с внешним источником данных,
		|строка соединения: %1, 
		|причина: %2'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураПараметров.НастройкиПодключения.СтрокаСоединения, ОписаниеОшибки()); 
		ЗаписьЖурналаРегистрации(СинонимРЗ, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

#КонецОбласти
