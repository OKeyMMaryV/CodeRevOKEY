
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_му_УстановкаСоответствий_СтатьиРегл_ВидыЗатрат;
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	ИнинциализироватьСКД();
	        		
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСоответствий

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидЗатрат" 
// табличного поля "ДеревоСоответствий".
// 
&НаКлиенте
Процедура ДеревоСоответствийВидЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСоответствий.ТекущиеДанные;
	Если ТекущиеДанные.ВидЗатрат <> ТекущиеДанные.ПервоначальныйВидЗатрат Тогда
		ТекущиеДанные.Изменено = Истина;
	Иначе 
		ТекущиеДанные.Изменено = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ДеревоСоответствийВидЗатратПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "Обновить".
// 
&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОбновитьДанные();
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоСоответствий, ДеревоСоответствий.ПолучитьЭлементы());
	
КонецПроцедуры // КомандаОбновить()

// Процедура - обработчик команды "Записать".
// 
&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ЗаписатьИзмененияВРегистр();
	
КонецПроцедуры // КомандаЗаписать()

// Процедура - обработчик команды "Отборы".
// 
&НаКлиенте
Процедура КомандаОтборы(Команда)
	
	Элементы.ГруппаОтборы.Видимость = Не Элементы.ГруппаОтборы.Видимость;
	
КонецПроцедуры // КомандаОтборы()
       
// Процедура - обработчик команды "УстановитьЗначениеДляВыбранных".
// 
&НаКлиенте
Процедура КомандаУстановитьЗначениеДляВыбранных(Команда)
	
	Обработчик = Новый ОписаниеОповещения("КомандаУстановитьЗначениеДляВыбранныхЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Справочник.бит_му_ВидыЗатрат.ФормаВыбора",,ЭтаФорма,,,,Обработчик, Режим);
	
КонецПроцедуры // КомандаУстановитьЗначениеДляВыбранных()

// Процедура обработчик оповещения "КомандаУстановитьЗначениеДляВыбранныхЗавершение".
// 
// Параметры:
// ВидЗатрат - Произвольный
// ДопПараметры - Структура
// 
&НаКлиенте
Процедура КомандаУстановитьЗначениеДляВыбранныхЗавершение(ВидЗатрат, ДопПараметры) Экспорт
	
   	Если ВидЗатрат <> Неопределено И ВидЗатрат <> КодВозвратаДиалога.Отмена Тогда
		
		ИзменитьЗначениеДляВыбранных(ВидЗатрат);	  		
	
	КонецЕсли; 	
 
КонецПроцедуры

// Процедура - обработчик команды "ОчиститьЗначениеДляВыбранных".
// 
&НаКлиенте
Процедура КомандаОчиститьЗначениеДляВыбранных(Команда)
	
	ИзменитьЗначениеДляВыбранных(фКэшЗначений.ПустойВидЗатрат);
		
КонецПроцедуры // КомандаОчиститьЗначениеДляВыбранных()

// Процедура - обработчик команды "Проверить".
// 
&НаКлиенте
Процедура КомандаПроверить(Команда)
	
	ОткрытьФорму("Отчет.бит_му_ПроверкаСоответствийВидовЗатрат.Форма");
	
КонецПроцедуры // КомандаПроверить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура изменяет значение "ВидЗатрат" для выбранных строк.
// 
// Параметры:
//  ВидЗатрат  - СправочникСсылка.бит_му_ВидЗатрат.
// 
&НаКлиенте
Процедура ИзменитьЗначениеДляВыбранных(ВидЗатрат)

	МассивВыделенных = Элементы.ДеревоСоответствий.ВыделенныеСтроки;
	Для каждого ЭлементСо Из МассивВыделенных Цикл
		
		СтрокаДерева = ДеревоСоответствий.НайтиПоИдентификатору(ЭлементСо);
		
		Если Не СтрокаДерева.ЭтоГруппа Тогда
			
			СтрокаДерева.Изменено  = ?(СтрокаДерева.ВидЗатрат = ВидЗатрат, Ложь, Истина);
			СтрокаДерева.ВидЗатрат = ВидЗатрат;
			
		КонецЕсли;                             					
	
	КонецЦикла;	

КонецПроцедуры // ИзменитьЗначениеДляВыбранных()

// Процедура заполняет кэш значений, доступный на клиенте и на сервере.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура; 
	
	фКэшЗначений.Вставить("ПустойВидЗатрат", Справочники.бит_му_ВидыЗатрат.ПустаяСсылка());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура инициализирует схему компановки данных.
// 
// Параметры:
//  Команда  - Строка
// 
&НаСервере
Процедура ИнинциализироватьСКД()

	// Инициализация схемы компановки данных.
    ИмяМакета = ?(бит_ОбщегоНазначения.ЭтоERP() ИЛИ бит_ОбщегоНазначения.ЭтоКомплекснаяАвтоматизация(), "СхемаКомпоновкиДанныхERP", "СхемаКомпоновкиДанных");
	СхемаКомпоновкиДанных = Обработки.бит_му_УстановкаСоответствий_СтатьиРегл_ВидыЗатрат.ПолучитьМакет(ИмяМакета);
		
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	Объект.Компоновщик.Инициализировать(ИсточникНастроек);
	Объект.Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

КонецПроцедуры // ИнинциализироватьСКД()
             
// Функция получает запрос схемы компановки данных.
// 
// Параметры:
//  Нет
// Возращаемое значение:
//  Запрос
// 
&НаСервере
Функция ПолучитьЗапросСКД() Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);

	// Выполняем компановку макета МакетСКД
	// (настройки берутся из схемы компановки данных и из пользовательских настроек).
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Объект.Компоновщик.ПолучитьНастройки());

	// Получаем запрос макета компановки данных
	Запрос = Новый Запрос(МакетСКД.НаборыДанных.НаборДанных.Запрос);
	
	// Устанавливаем параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;

	Возврат Запрос;
	
КонецФункции // ПолучитьЗапросСКД()

// Процедура добавляет строку в дерево значений.
// 
// Параметры:
//  Ветка    - ДанныеФормыКоллекцияЭлементовДерева.
//  Выборка  - Выборка из результата запроса.
// 
&НаСервере
Процедура ДобавитьСтрокуДерева(Ветка, Выборка)

	СтрокаДерева = Ветка.Добавить();
   	ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
	СтрокаДерева.ПервоначальныйВидЗатрат = СтрокаДерева.ВидЗатрат;
	Если СтрокаДерева.ЭтоГруппа Тогда
		СтрокаДерева.Картинка    = БиблиотекаКартинок.бит_казна_Папка;
	Иначе	
	    СтрокаДерева.Картинка    = БиблиотекаКартинок.бит_Реквизит;
	КонецЕсли;

	ВыборкаНиз = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаНиз.Следующий() Цикл
	 
		ДобавитьСтрокуДерева(СтрокаДерева.ПолучитьЭлементы() ,ВыборкаНиз);
			  
  	КонецЦикла; 	

КонецПроцедуры // ДобавитьСтрокуДерева()

// Процедура обновляет данные.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ОбновитьДанные()

	Запрос    = ПолучитьЗапросСКД();
	Результат = Запрос.Выполнить();
	 
	Если Результат.Пустой() Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Нет данных, удовлетворяющих отбору.");
	КонецЕсли; 
	
	КореньДерева = ДеревоСоответствий.ПолучитьЭлементы();
	КореньДерева.Очистить();
	ТемпТип = Неопределено;
	 
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); 	 
	Пока Выборка.Следующий() Цикл
		
		ТипВидовЗатрат = Выборка.ТипВидовЗатрат; 
		Если ТемпТип <> ТипВидовЗатрат Тогда
			НоваяСтрокаВерх = КореньДерева.Добавить();
			НоваяСтрокаВерх.СтатьяРегл 	= ТипВидовЗатрат;
			НоваяСтрокаВерх.ЭтоГруппа 	= Истина;
			НоваяСтрокаВерх.Картинка    = БиблиотекаКартинок.ЖурналДокументов;
			ТемпТип = ТипВидовЗатрат;
		КонецЕсли;
	 
		ДобавитьСтрокуДерева(НоваяСтрокаВерх.ПолучитьЭлементы(), Выборка);
				  
  	КонецЦикла;

КонецПроцедуры // ОбновитьДанные()

// Процедура записывает измененные данные в регистр сведений.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаписатьИзмененияДляСтроки(СтрокаДерева)

	Если СтрокаДерева.ЭтоГруппа Тогда
		
		Для каждого Подстрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ЗаписатьИзмененияДляСтроки(Подстрока);
		КонецЦикла; 		
	
	Иначе
		
		Если СтрокаДерева.Изменено Тогда
			
			НаборЗаписей = РегистрыСведений.бит_му_СтатьиРегл_ВидыЗатрат.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтатьяРегл.Установить(СтрокаДерева.СтатьяРегл);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			Если ЗначениеЗаполнено(СтрокаДерева.ВидЗатрат) Тогда
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаДерева);
				Запись.ТипВидаЗатрат = ?(ТипЗнч(СтрокаДерева.СтатьяРегл) = Тип("СправочникСсылка.СтатьиЗатрат"),
										Перечисления.бит_му_ТипыВидовЗатрат.СтатьиЗатрат,
										Перечисления.бит_му_ТипыВидовЗатрат.ПрочиеДоходыРасходы);
			КонецЕсли;
									
			бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей);
			
			СтрокаДерева.Изменено = Ложь;
			СтрокаДерева.ПервоначальныйВидЗатрат = СтрокаДерева.ВидЗатрат;
			
		КонецЕсли; 		
	
	КонецЕсли;     		

КонецПроцедуры // ЗаписатьИзмененияДляСтроки()

// Процедура записывает измененные данные в регистр сведений.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаписатьИзмененияВРегистр()

	КореньДерева = ДеревоСоответствий.ПолучитьЭлементы();
	Для каждого СтрокаДерева Из КореньДерева Цикл
		ЗаписатьИзмененияДляСтроки(СтрокаДерева);
	КонецЦикла;	

КонецПроцедуры // ЗаписатьИзмененияВРегистр()

#КонецОбласти

