
#Область ОписаниеПеременных

// Хранит признак активности формы
&НаКлиенте
Перем ФормаАктивна;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	МетаданныеОбъекта = Метаданные.Обработки.бит_РедактированиеДопРеквизитовДоговора;
	
	// Вызов механизма лицензирования
	
	
	Параметры.Свойство("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		бит_ОбщегоНазначенияКлиентСервер.СообщитьОбОтказеОткрытияОбработкиСамостоятельно(МетаданныеОбъекта.Синоним, Отказ); 
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	ЗакрыватьПриЗакрытииВладельца = Истина;
	
	ДатаСведенийМУ = ТекущаяДатаСеанса();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("бит_ПроектДоговора");
	
	// Установим параметры для списка документов исков и претензий.
	УстановитьПараметрыДляСпискаТребованийИсков();

	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();

	ЗаполнитьКэшЗначений();
	
	ГрафикВыдачиТраншей.Параметры.УстановитьЗначениеПараметра("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	
	// Видимость элементов
	Элементы.ГруппаСтраницаПараметрыФинИнструментовМСФО.Видимость = мКэшЗначений.ЕстьОбъектыМСФО;
	Элементы.бит_ПодразделениеОрганизации.Видимость 			  = Не бит_ОбщегоНазначения.ЭтоУТ();
	
	УстановитьОтборДляСпискаСобытий();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-14 (#МДМ)
	УстановитьОтборДляТоварныхГрупп();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-14 (#МДМ)
	
	//СофтЛаб Начало 2019-08-14 #3419
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		Объект.ок_БанковскиеСчета.Загрузить(Объект.ДоговорКонтрагента.ок_БанковскиеСчета.Выгрузить());
		
		Параметр_Владелец 	= Новый ПараметрВыбора("Отбор.Владелец", Объект.ДоговорКонтрагента.Владелец);
		Параметр_Валюта		= Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
		
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(Параметр_Владелец);
		МассивПараметров.Добавить(Параметр_Валюта);
		
		ПараметрыВыбораБанковскихСчетов = Новый ФиксированныйМассив(МассивПараметров);
		
		Элементы.ок_БанковскиеСчетаБанковскийСчет.ПараметрыВыбора = ПараметрыВыбораБанковскихСчетов;
	
	КонецЕсли; 
	//СофтЛаб Конец 2019-08-14 #3419
	
	//СофтЛаб Начало 2019-08-10 #3486
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		Объект.ок_ИсторияСтатусов.Загрузить(Объект.ДоговорКонтрагента.ок_ИсторияСтатусов.Выгрузить());
		ИсторияСтатусов = "История"; 
		
	КонецЕсли;
	//СофтЛаб Конец 2019-08-10 #3486

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФормаАктивна = Истина;
	
	ПрочитатьДанныеДоговораКонтрагента();
	
	фКэшРеквизитов.Вставить("бит_ПроектДоговора", Объект.бит_ПроектДоговора);
	
	ИзменениеДанныхРазрешено();
	
	ПодключитьОбработчикОжидания("ПроверитьАктивностьФормы", 1, Ложь);
	
	УстановитьОтборПараметрыФинИнструментовМУ();
	
	УправлениеЭлементамиФормы();
	
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-20 (#2965)	
	ЭтотОбъект.ВладелецФормы.УИДФормыДопРеквизитов = ЭтотОбъект.УникальныйИдентификатор;
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-20 (#2965)
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-20 (#2965)	
	Возврат;
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-20 (#2965)
	
	Если Модифицированность И НЕ мКэшЗначений.ЗакрытиеФормы Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Отказ = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеДопРеквизитов",ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Дополнительные реквизиты договора ""%1%"" были изменены. Сохранить изменения?'");
		ТекстВопроса = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстВопроса, Объект.ДоговорКонтрагента);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработка вопроса изменения дополнительных реквизитов.
// 
&НаКлиенте 
Процедура ИзменениеДопРеквизитов(Ответ, ДополнительныеДанные) Экспорт
	
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-20 (#2965)	
	Возврат;
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-20 (#2965)
	
	мКэшЗначений.ЗакрытиеФормы = Истина;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#МДМ)
		//СохранитьИзменения();
		Если ВладелецФормы.Модифицированность Тогда
			СохранитьИзменения(ВладелецФормы.Объект);
		Иначе
			СохранитьИзменения();
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#МДМ)
		
		ВыполнитьПослеЗаписи();
		
		ЭтотОбъект.Закрыть();
		
		ЭтотОбъект.ВладелецФормы.Закрыть();
		
	Иначе 
	
		ЭтотОбъект.Закрыть();
		
		ЭтотОбъект.ВладелецФормы.Закрыть();
		
	КонецЕсли;	
	
КонецПроцедуры // ИзменениеДопРеквизитов()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура бит_ЦФОПриИзменении(Элемент)
	
	ПриИзмененииЦФОСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ТипДоговораПриИзменении(Элемент)
	
	бит_ТипДоговораПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ПроектДоговораПриИзменении(Элемент)
	
	СозданныйРанееДоговор = бит_ДоговораСервер.НайтиДоговорКонтрагентаПоПроектуДоговора(Объект.бит_ПроектДоговора);
	
	Если НЕ СозданныйРанееДоговор = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'На основании проекта договора ""%1%"" уже создан договор ""%2%""'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Объект.бит_ПроектДоговора, СозданныйРанееДоговор);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Объект.бит_ПроектДоговора = фКэшРеквизитов.бит_ПроектДоговора;
	КонецЕсли;
	
	фКэшРеквизитов.бит_ПроектДоговора = Объект.бит_ПроектДоговора;
	
	ПроектДоговораПриИзмененииСервер(Объект.бит_ПроектДоговора);
	
	// Устанавливаем параметры для списка требований и исков.
	УстановитьПараметрыДляСпискаТребованийИсков();
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ПроектДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.бит_ПроектДоговора);
	ПараметрыФормы.Вставить("Отбор", ПолучитьСтруктуруОтбораПроектовДоговоров());
		
	ОткрытьФорму("Документ.бит_ПроектДоговора.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура бит_СпособРасчетаФинПлатежейПриИзменении(Элемент)
	
	ЗаполнитьПараметрыФинансовогоДоговора(Объект.бит_СпособРасчетаФинПлатежей);
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ЗначенияПараметровФинДоговоров,ЗначенияПараметровФинДоговоров.ПолучитьЭлементы(),Истина);

КонецПроцедуры

&НаКлиенте
Процедура бит_НаправлениеДоговораПриИзменении(Элемент)
	
	бит_НаправлениеДоговораПриИзмененииСервер();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-14 (#МДМ)
	ПроверитьВозможностьУстановкиПризнакаИнтеграцияСAX12ВДоговоре();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-14 (#МДМ)
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСведенийМУПриИзменении(Элемент)
	
	УстановитьОтборПараметрыФинИнструментовМУ();
	
КонецПроцедуры

//СофтЛаб Начало 2019-08-10 #3486
&НаКлиенте
Процедура ИсторияСтатусовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ТЧ_ИсторияСтатусов", Объект.ок_ИсторияСтатусов);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	
	ОписаниеОповещенияРедактированиеИсторииСтатусов = Новый ОписаниеОповещения("ВыполнитьПослеРедактированиеИсторииСтатусов", ЭтаФорма);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ок_РедактированиеИсторииСтатусов", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещенияРедактированиеИсторииСтатусов);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПослеРедактированиеИсторииСтатусов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура")
		И РезультатЗакрытия.Свойство("ТЧ_ИсторияСтатусов") 
		И РезультатЗакрытия.Свойство("Модифицированность") 
		И РезультатЗакрытия.Модифицированность Тогда
		
		Модифицированность = Истина;
		
		Объект.ок_ИсторияСтатусов.Загрузить(РезультатЗакрытия.ТЧ_ИсторияСтатусов.Выгрузить());
		
		Если РезультатЗакрытия.Свойство("ПоследнийСтатус") Тогда
			
			Объект.бит_СтадияДоговора = РезультатЗакрытия.ПоследнийСтатус;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ок_БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		
		НайденныеСтроки = Объект.ок_БанковскиеСчета.НайтиСтроки(Новый Структура("БанковскийСчет", ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка")));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru='Перед добавлением новой строки необходимо заполнить предыдущий счет.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_БанковскиеСчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ок_БанковскиеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		ТекущиеДанные.БанковскийСчет = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_БанковскиеСчетаБанковскийСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ок_БанковскиеСчета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.ок_БанковскиеСчета.НайтиСтроки(Новый Структура("БанковскийСчет", ТекущиеДанные.БанковскийСчет)); 
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru='Данный счет уже добавлен в таблиную часть! Выберите другой счет.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		ТекущиеДанные.БанковскийСчет = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
//СофтЛаб Конец 2019-08-10 #3486

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияПараметровФинДоговоров

&НаКлиенте
Процедура ЗначенияПараметровФинДоговоровЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗначенияПараметровФинДоговоров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	бит_РаботаСДиалогамиКлиент.ОчисткаЗначенияПараметраСоставляющейПлатежа(ТекущиеДанные, "Параметр", "Значение", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПараметровФинДоговоровЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗначенияПараметровФинДоговоров.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатьяОборотовБДДСПоступление"	, мКэшЗначений.СтатьяОборотовБДДСПоступление);
	СтруктураПараметров.Вставить("СтатьяОборотовБДДСРасходование"	, мКэшЗначений.СтатьяОборотовБДДСРасходование);
	СтруктураПараметров.Вставить("СтатьяОборотовБДРПоступление"		, мКэшЗначений.СтатьяОборотовБДРПоступление);
	СтруктураПараметров.Вставить("СтатьяОборотовБДРРасходование"	, мКэшЗначений.СтатьяОборотовБДРРасходование);
	СтруктураПараметров.Вставить("Перечисления"						, мКэшЗначений.Перечисления);
	СтруктураПараметров.Вставить("ИмяРеквизитаЗначение"				, "Значение");
	СтруктураПараметров.Вставить("ИмяРеквизитаТипПлатежа"			, "ТипПлатежа");
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораЗначенияПараметраСоставляющейПлатежа(ЭтаФорма, Элемент, ТекущиеДанные, СтруктураПараметров, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатьиОборотов

&НаКлиенте
Процедура бит_СтатьиОборотовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.бит_СтатьиОборотов.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Если НЕ мКэшЗначений.СписокДоступныхНаправлений.Количество() = 0 Тогда 
			ТекущиеДанные.РасходДоход = мКэшЗначений.СписокДоступныхНаправлений[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бит_СтатьиОборотовПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.бит_СтатьиОборотов.ТекущиеДанные;
	
	Если НЕ Отказ Тогда
		
		Если ТекущиеДанные.СтатьяОборотов = Объект.бит_ОсновнаяСтатьяОборотов Тогда
			Объект.бит_ОсновнаяСтатьяОборотов = Неопределено;
		КонецЕсли;
		
		Если ТекущиеДанные.СтатьяОборотов = Объект.бит_ОсновнаяСтатьяОборотовБДР Тогда
			Объект.бит_ОсновнаяСтатьяОборотовБДР = Неопределено;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-18 (#МДМ)
			ОсновнаяСтатьяОборотовБДРПриИзменении();
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-18 (#МДМ)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бит_СтатьиОборотовПослеУдаления(Элемент)
	
	Если Объект.бит_СтатьиОборотов.Количество() = 0 Тогда
		Объект.бит_ОсновнаяСтатьяОборотов 	 = Неопределено;
		Объект.бит_ОсновнаяСтатьяОборотовБДР = Неопределено;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-18 (#МДМ)
		ОсновнаяСтатьяОборотовБДРПриИзменении();
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-18 (#МДМ)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бит_СтатьиОборотовРасходДоходПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.бит_СтатьиОборотов.ТекущиеДанные;
	
	// Проверим принадлежность статьи оборотов.
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(ТекущиеДанные.ПолучитьИдентификатор(), ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура бит_СтатьиОборотовСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.бит_СтатьиОборотов.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РасходДоход", ТекущиеДанные.РасходДоход);
	
	СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежности(ТекущиеДанные.ПолучитьИдентификатор(), ТекущаяДата());
    Если ТипЗнч(СписокСтатейПринадлежность) = Тип("СписокЗначений") Тогда
		СтруктураПараметров.Вставить("Ссылка", СписокСтатейПринадлежность);
	КонецЕсли;
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура бит_СтатьиОборотовСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.бит_СтатьиОборотов.ТекущиеДанные;
	
	ИзменениеСтатьиОборотов(ТекущиеДанные.ПолучитьИдентификатор());
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-14 (#МДМ)
	ПроверитьВозможностьУстановкиПризнакаИнтеграцияСAX12ВДоговоре();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-14 (#МДМ)
	
КонецПроцедуры

&НаКлиенте
Процедура бит_КураторДоговораСоСтороныКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                               , Элемент
								   , Объект
								   , Элемент.Имя
								   , мКэшЗначений.СписокВыбораТипаКуратораДоговораОтКонтрагента
								   , СтандартнаяОбработка);
								   
								   	
	Если Объект.бит_КураторДоговораСоСтороныКонтрагента <> Неопределено Тогда
		
		Если ТипЗнч(Объект.бит_КураторДоговораСоСтороныКонтрагента) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ОбъектВладелец", мКэшЗначений.Контрагент));
			ОткрытьФорму("Справочник.КонтактныеЛица.ФормаВыбора", ПараметрыФормы, Элемент);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;   
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура бит_КураторДоговораСоСтороныКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.бит_КураторДоговораСоСтороныКонтрагента = Неопределено;
	Элемент.ВыбиратьТип 					   = Истина;

КонецПроцедуры

#КонецОбласти

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-14 (#МДМ)
#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварныеГруппы

&НаКлиенте
Процедура ТоварныеГруппы_КомандаСоздать(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	
	ОписаниеОповещенияРедактированиеТоварныхГрупп = Новый ОписаниеОповещения("ВыполнитьПослеРедактированияТоварныхГрупп", ЭтаФорма);
	
	ОткрытаяФорма = ОткрытьФорму("РегистрСведений.ок_ИсторияИзмененияТоварныхГруппДоговоров.Форма.ФормаЗаписи", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещенияРедактированиеТоварныхГрупп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытаяФорма.Заголовок = Строка(Объект.ДоговорКонтрагента) + ": Товарная группа договора (Создание)";
	ОткрытаяФорма.АвтоЗаголовок = Ложь;
	
	ОткрытаяФорма.Элементы.ДоговорКонтрагента.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеГруппы_КомандаИзменить(Команда)
	
	ТекущиеДанные = Элементы.ТоварныеГруппы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 	Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ТоварнаяГруппа", 		ТекущиеДанные.ТоварнаяГруппа);
	СтруктураПараметров.Вставить("ДатаНачала", 			ТекущиеДанные.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", 		ТекущиеДанные.ДатаОкончания);
	СтруктураПараметров.Вставить("Отсрочка", 			ТекущиеДанные.Отсрочка);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 	ТекущиеДанные.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("Удалена", 			ТекущиеДанные.Удалена);
	
	ОписаниеОповещенияРедактированиеТоварныхГрупп = Новый ОписаниеОповещения("ВыполнитьПослеРедактированияТоварныхГрупп", ЭтаФорма);
	
	ОткрытаяФорма = ОткрытьФорму("РегистрСведений.ок_ИсторияИзмененияТоварныхГруппДоговоров.Форма.ФормаЗаписи", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещенияРедактированиеТоварныхГрупп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытаяФорма.Заголовок = Строка(Объект.ДоговорКонтрагента) + ": Товарная группа договора (Изменение)";
	ОткрытаяФорма.АвтоЗаголовок = Ложь;
	
	ОткрытаяФорма.Элементы.ДоговорКонтрагента.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеГруппы_КомандаИстория(Команда)
		
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 	Объект.ДоговорКонтрагента);
	
	ПараметрыВыбора = Новый Структура("Отбор", СтруктураПараметров);
	
	ОткрытаяФорма = ОткрытьФорму("РегистрСведений.ок_ИсторияИзмененияТоварныхГруппДоговоров.Форма.ФормаСписка", ПараметрыВыбора,,Объект.ДоговорКонтрагента,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытаяФорма.Заголовок = Строка(Объект.ДоговорКонтрагента) + ": История изменения товарных групп договора";
	ОткрытаяФорма.АвтоЗаголовок = Ложь;
	
	Если ОткрытаяФорма.Элементы.Найти("ФормаСоздать") <> Неопределено Тогда
		ОткрытаяФорма.Элементы.ФормаСоздать.Видимость = Ложь;
	КонецЕсли;
	Если ОткрытаяФорма.Элементы.Найти("ФормаСкопировать") <> Неопределено Тогда
		ОткрытаяФорма.Элементы.ФормаСкопировать.Видимость = Ложь;
	КонецЕсли;
	Если ОткрытаяФорма.Элементы.Найти("ФормаИзменить") <> Неопределено Тогда
		ОткрытаяФорма.Элементы.ФормаИзменить.Видимость = Ложь;
	КонецЕсли;
	Если ОткрытаяФорма.Элементы.Найти("ФормаУдалить") <> Неопределено Тогда
		ОткрытаяФорма.Элементы.ФормаУдалить.Видимость = Ложь;
	КонецЕсли;
	Если ОткрытаяФорма.Элементы.Найти("СписокКонтекстноеМенюСоздать") <> Неопределено Тогда
		ОткрытаяФорма.Элементы.СписокКонтекстноеМенюСоздать.Видимость = Ложь;
	КонецЕсли;
	Если ОткрытаяФорма.Элементы.Найти("СписокКонтекстноеМенюСкопировать") <> Неопределено Тогда
		ОткрытаяФорма.Элементы.СписокКонтекстноеМенюСкопировать.Видимость = Ложь;
	КонецЕсли;
	Если ОткрытаяФорма.Элементы.Найти("СписокКонтекстноеМенюИзменить") <> Неопределено Тогда
		ОткрытаяФорма.Элементы.СписокКонтекстноеМенюИзменить.Видимость = Ложь;
	КонецЕсли;
	Если ОткрытаяФорма.Элементы.Найти("СписокКонтекстноеМенюУдалить") <> Неопределено Тогда
		ОткрытаяФорма.Элементы.СписокКонтекстноеМенюУдалить.Видимость = Ложь;
	КонецЕсли;
	
	ОткрытаяФорма.Элементы.Список.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеГруппыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТоварныеГруппы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 	Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ТоварнаяГруппа", 		ТекущиеДанные.ТоварнаяГруппа);
	СтруктураПараметров.Вставить("ДатаНачала", 			ТекущиеДанные.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", 		ТекущиеДанные.ДатаОкончания);
	СтруктураПараметров.Вставить("Отсрочка", 			ТекущиеДанные.Отсрочка);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 	ТекущиеДанные.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("Удалена", 			ТекущиеДанные.Удалена);
	
	ОписаниеОповещенияРедактированиеТоварныхГрупп = Новый ОписаниеОповещения("ВыполнитьПослеРедактированияТоварныхГрупп", ЭтаФорма);
	
	ОткрытаяФорма = ОткрытьФорму("РегистрСведений.ок_ИсторияИзмененияТоварныхГруппДоговоров.Форма.ФормаЗаписи", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещенияРедактированиеТоварныхГрупп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытаяФорма.Заголовок = Строка(Объект.ДоговорКонтрагента) + ": Товарная группа договора (Изменение)";
	ОткрытаяФорма.АвтоЗаголовок = Ложь;
	
	ОткрытаяФорма.Элементы.ДоговорКонтрагента.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеГруппыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеРедактированияТоварныхГрупп(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	 Элементы.ТоварныеГруппы.Обновить();
	
КонецПроцедуры

#КонецОбласти
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-14 (#МДМ)

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьФактическийПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала 	= Объект.бит_ФактическоеНачало;
	Диалог.Период.ДатаОкончания = Объект.бит_ФактическоеОкончание;
	Диалог.Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
		
	ДопПараметров = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ВыборФактическогоПериодаЗавершение", ЭтотОбъект, ДопПараметров);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Процедура обработчик оповещения "ВыборФактическогоПериодаЗавершение".
//
// Параметры:
// Период 				- СтандартныйПериод.
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВыборФактическогоПериодаЗавершение(Период, ДополнительныеДанные) Экспорт

	Если Период <> Неопределено Тогда
	
		Объект.бит_ФактическоеНачало    = Период.ДатаНачала;
		Объект.бит_ФактическоеОкончание = Период.ДатаОкончания;
				
	КонецЕсли; 
	
КонецПроцедуры	// ВыборФактическогоПериодаЗавершение

&НаКлиенте
Процедура НастроитьПлановыйПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала 	= Объект.бит_НачалоПлановое;
	Диалог.Период.ДатаОкончания = Объект.бит_ОкончаниеПлановое;
	Диалог.Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
		
	ДопПараметров = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ВыборПлановогоПериодаЗавершение", ЭтотОбъект, ДопПараметров);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Процедура обработчик оповещения "ВыборПлановогоПериодаЗавершение".
//
// Параметры:
// Период 				- СтандартныйПериод.
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВыборПлановогоПериодаЗавершение(Период, ДополнительныеДанные) Экспорт

	Если Период <> Неопределено Тогда
	
		Объект.бит_НачалоПлановое    = Период.ДатаНачала;
		Объект.бит_ОкончаниеПлановое = Период.ДатаОкончания;
				
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПлановогоПериодаЗавершение

&НаКлиенте
Процедура УстановитьОсновнуюСтатьюОборотов(Команда)
	
	ТекущиеДанные = Элементы.бит_СтатьиОборотов.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		УстановитьОсновнуюСтатьюОборотовСервер(ТекущиеДанные.СтатьяОборотов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ПрочитатьДанныеДоговораКонтрагента();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсторияПлановогоОкончания(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьИсторию(Объект.ДоговорКонтрагента, "бит_ОкончаниеПлановое", "Окончание плановое", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#МДМ)
	//Модифицированность = НЕ СохранитьИзменения();
	Если ВладелецФормы.Модифицированность Тогда
		Модифицированность = НЕ СохранитьИзменения(ВладелецФормы.Объект);
	Иначе
		Модифицированность = НЕ СохранитьИзменения();
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#МДМ)
	
	ВыполнитьПослеЗаписи();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-18 (#МДМ)
	ПрочитатьДанныеДоговораКонтрагента();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-18 (#МДМ)
	
КонецПроцедуры

//СофтЛаб Начало 2019-08-14 #3419
&НаКлиенте
Процедура КомандаБанковскиеСчета_Основной(Команда)
	
	ТекущиеДанные = Элементы.ок_БанковскиеСчета.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
	
		Для каждого ТекущаяСтрока Из Объект.ок_БанковскиеСчета Цикл
		
			ТекущаяСтрока.Основной = Ложь;
		
		КонецЦикла; 
		
		ТекущиеДанные.Основной = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры
//СофтЛаб Конец 2019-08-14 #3419

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-15 (#МДМ)
&НаКлиенте
Процедура ок_РучноеИзменениеПризнакаИнтеграцияСAX12(Команда)
	
	ок_РучноеИзменениеПризнакаИнтеграцияСAX12 = НЕ ок_РучноеИзменениеПризнакаИнтеграцияСAX12;
	УправлениеЭлементамиФормы();
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-15 (#МДМ)

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КлиентскиеПроцедурыИФункции

// Процедура - обработчик ожидания. Проверяет форму на активность.
// 
&НаКлиенте
Процедура ПроверитьАктивностьФормы()
	
	Если НЕ ФормаАктивна
		И ВводДоступен() Тогда
		
		ИзменениеДанныхРазрешено();
		
	КонецЕсли;
	
	ФормаАктивна = ВводДоступен();
	
КонецПроцедуры

// Функция управляет доступностью формы на основании данных о модифицированности формы владельца.
// 
&НаКлиенте
Функция ИзменениеДанныхРазрешено()
	
	флРазрешено = Истина;
	
	Если ВладелецФормы.Модифицированность Тогда
		
		флРазрешено = Ложь;
		
	КонецЕсли;	
	
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-20 (#2965)
	//ТолькоПросмотр = НЕ флРазрешено;
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-20 (#2965)
	
	Возврат флРазрешено;
	
КонецФункции

// Выполняет необходимые действия после записи данных в форме.
// 
&НаКлиенте
Процедура ВыполнитьПослеЗаписи()
	
	ОповеститьОбИзменении(Объект.ДоговорКонтрагента);
	
	# Если НЕ ВебКлиент Тогда
		
		// В режиме ВебКлиента обновление формы владельца приводит к ошибке.
		Если НЕ ЭтаФорма.ВладелецФормы = Неопределено Тогда
			
			Попытка
				
				ЭтаФорма.ВладелецФормы.Прочитать();
				
			Исключение
				
			КонецПопытки;
			
		КонецЕсли; 
		
	# КонецЕсли 
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПараметрыФинИнструментовМУ()
	
	Если мКэшЗначений.ЕстьОбъектыМСФО Тогда
	 	ПараметрыФинИнструментовМУ.Параметры.УстановитьЗначениеПараметра("Дата", ДатаСведенийМУ);
		ПараметрыФинИнструментовМУ.Параметры.УстановитьЗначениеПараметра("ДоговорКонтрагента", Объект.ДоговорКонтрагента);	
	КонецЕсли;                                                                                                            	
	
КонецПроцедуры

// Устанавливаем отбор для списка событий. 
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаСервере
Процедура УстановитьОтборДляСпискаСобытий()

	ЭлементыОтбора = СписокСобытий.Отбор.Элементы;
    ЭлементыОтбора.Очистить();
	
	Группа = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
    Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	НовыйЭлемент = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовыйЭлемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Договор");
    НовыйЭлемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлемент.ПравоеЗначение   = Объект.ДоговорКонтрагента;
    НовыйЭлемент.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	
	НовыйЭлемент = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовыйЭлемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Договор");
    НовыйЭлемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлемент.ПравоеЗначение   = Объект.ДоговорКонтрагента.бит_ПроектДоговора;
    НовыйЭлемент.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;

	НовыйЭлемент = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовыйЭлемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Организация");
    НовыйЭлемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлемент.ПравоеЗначение   = Объект.ДоговорКонтрагента.Организация;
    НовыйЭлемент.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;	

	НовыйЭлемент = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовыйЭлемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Контрагент");
    НовыйЭлемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлемент.ПравоеЗначение   = Объект.ДоговорКонтрагента.Владелец;
    НовыйЭлемент.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	
КонецПроцедуры // УстановитьОтборДляСпискаСобытий()

#КонецОбласти

#Область СерверныеПроцедурыИФункции

// Обработка события при изменении проекта договора сервер. 
//
// Параметры:
//  ПроектДоговора - СправчоникСсылка.бит_ПроектДоговора.
//
&НаСервере
Процедура ПроектДоговораПриИзмененииСервер(ПроектДоговора)

	//Объект.бит_Ответственный = ПроектДоговора.Ответственный;
	Объект.бит_Ответственный = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.бит_ПроектДоговора, "Ответственный");
	
КонецПроцедуры // ПроектДоговораПриИзмененииСервер()

// Устанавливается значение параметра "Договор" для СписокПретензий и ИсковыеТребования.
// 
&НаСервере
Процедура УстановитьПараметрыДляСпискаТребованийИсков()
			
	СписокПретензийИсков.Параметры.УстановитьЗначениеПараметра("Договор",        Объект.ДоговорКонтрагента);
	СписокПретензийИсков.Параметры.УстановитьЗначениеПараметра("ПроектДоговора", Объект.ДоговорКонтрагента.бит_ПроектДоговора);
		
КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	мКэшЗначений = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_РасходДоход"								 , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов"						 , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_ТипыПлатежейПоФинансовымДоговорам"		 , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам));
	КэшПеречисления.Вставить("бит_АлгоритмыРасчетовПоФинДоговорам"			 , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам));
	КэшПеречисления.Вставить("бит_КонтекстыВыполненияПользовательскихФункций", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_КонтекстыВыполненияПользовательскихФункций));
	
	мКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	мКэшЗначений.Вставить("СтатьяОборотовБДДСПоступление" , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДДСПоступление);
	мКэшЗначений.Вставить("СтатьяОборотовБДДСРасходование", ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДДСРасходование);
	мКэшЗначений.Вставить("СтатьяОборотовБДРПоступление"  , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДРПоступление);
	мКэшЗначений.Вставить("СтатьяОборотовБДРРасходование" , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДРРасходование);

	мКэшЗначений.Вставить("СписокДоступныхНаправлений", СформироватьСписокДоступныхНаправлений());
	Элементы.бит_СтатьиОборотовРасходДоход.СписокВыбора.ЗагрузитьЗначения(мКэшЗначений.СписокДоступныхНаправлений.ВыгрузитьЗначения());
	
	
	мКэшЗначений.Вставить("ЕстьОбъектыМСФО", бит_ОбщегоНазначения.ЕстьОбъектыМСФО());
	
	мКэшЗначений.Вставить("ЗакрытиеФормы", Ложь);
	
	МетаданныеОбъекта = Объект.ДоговорКонтрагента.Метаданные();

	СписокТипов = бит_ОбщегоНазначения.ПодготовитьСписокВыбораТипа(МетаданныеОбъекта.Реквизиты.бит_КураторДоговораСоСтороныКонтрагента.Тип.Типы());	
	мКэшЗначений.Вставить("СписокВыбораТипаКуратораДоговораОтКонтрагента", СписокТипов);
	
	мКэшЗначений.Вставить("Контрагент", Объект.ДоговорКонтрагента.Владелец);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Переносит сделанные изменения в договор.
// 
&НаСервере
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#МДМ)
//Функция СохранитьИзменения()
Функция СохранитьИзменения(Знач ВладелецФормы_Объект = Неопределено)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#МДМ)
	
	ПараметрыПоиска = Новый Структура("СтатьяОборотов", Объект.бит_ОсновнаяСтатьяОборотов);
	РезультатПоиска = Объект.бит_СтатьиОборотов.НайтиСтроки(ПараметрыПоиска);
	Если РезультатПоиска.Количество() = 0 Тогда
		// Основаня статья оборотов была заменена или удалена.
		Объект.бит_ОсновнаяСтатьяОборотов = Неопределено;
	КонецЕсли;
	
	ОбъектДоговор = Объект.ДоговорКонтрагента.ПолучитьОбъект();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#МДМ)
	Если ВладелецФормы_Объект <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОбъектДоговор, ВладелецФормы_Объект);
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#МДМ)
	
	// 1c-izhtc spawn 15.07.15 (
	//ЗаполнитьЗначенияСвойств(ОбъектДоговор, Объект, , "бит_СтатьиОборотов");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-05 (#3487)
	//ЗаполнитьЗначенияСвойств(ОбъектДоговор, Объект, , "бит_СтатьиОборотов, бит_му_Обеспечители, бит_му_ОсновныеСредстваВЗалоге, бит_му_ПрочиеАктивыВЗалоге, СБ_ДоговорыХеджирования");
	ЗаполнитьЗначенияСвойств(ОбъектДоговор, Объект, , "бит_СтатьиОборотов, бит_му_Обеспечители, бит_му_ОсновныеСредстваВЗалоге, бит_му_ПрочиеАктивыВЗалоге, СБ_ДоговорыХеджирования, ок_БанковскиеСчета, ок_ИсторияСтатусов");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-05 (#3487)
	// 1c-izhtc spawn 15.07.15 )
	
	ОбъектДоговор.бит_СтатьиОборотов.Загрузить(Объект.бит_СтатьиОборотов.Выгрузить());
	// 1c-izhtc spawn 15.07.15 (
	ОбъектДоговор.бит_му_Обеспечители.Загрузить(Объект.бит_му_Обеспечители.Выгрузить());
	ОбъектДоговор.бит_му_ОсновныеСредстваВЗалоге.Загрузить(Объект.бит_му_ОсновныеСредстваВЗалоге.Выгрузить());
	ОбъектДоговор.бит_му_ПрочиеАктивыВЗалоге.Загрузить(Объект.бит_му_ПрочиеАктивыВЗалоге.Выгрузить());
	ОбъектДоговор.СБ_ДоговорыХеджирования.Загрузить(Объект.СБ_ДоговорыХеджирования.Выгрузить());
	// 1c-izhtc spawn 15.07.15 )
	//СофтЛаб Начало 2019-08-14 #3419
	ОбъектДоговор.ок_БанковскиеСчета.Загрузить(Объект.ок_БанковскиеСчета.Выгрузить());
	//СофтЛаб Конец 2019-08-14 #3419
	//СофтЛаб Начало 2019-08-10 #3486
	ОбъектДоговор.ок_ИсторияСтатусов.Загрузить(Объект.ок_ИсторияСтатусов.Выгрузить());
	//СофтЛаб Конец 2019-08-10 #3486
	
	УстановитьОтборДляСпискаСобытий();
	
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-20 (#2965)
	ОбъектДоговор.ДополнительныеСвойства.Вставить("ТекущийДоговорИзменен",ОбъектДоговор.Ссылка);
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-20 (#2965)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-05 (#3487)
	ОрганизацияВходитВНастройкиМеханизмаИмпортаДанных = бит_Общий.ОрганизацияВходитВНастройкиМеханизмаИмпортаДанных(ОбъектДоговор.Организация);	
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-15 (#3762)
	//Если ОрганизацияВходитВНастройкиМеханизмаИмпортаДанных
	//	И (ОбъектДоговор.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Замечания
	//		ИЛИ ОбъектДоговор.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Закрыт)
	//		И НЕ ОбъектДоговор.Ссылка.бит_СтадияДоговора = Перечисления.бит_ВидыСтадийДоговоров.Замечания
	//	И  (ОбъектДоговор.Владелец.бит_ГруппаПоставщиков = Перечисления.бит_ГруппаПоставщиков.Факторинг 
	//		Или ОбъектДоговор.Владелец.бит_ГруппаПоставщиков = Перечисления.бит_ГруппаПоставщиков.ПТов) Тогда
	ЕстьИсключения = Справочники.ДоговорыКонтрагентов.ИсключенияДляИзмененийСтатусовПоДоговорам(ОбъектДоговор);
	Если ЕстьИсключения Тогда
		//бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("У Поставщиков товаров и Факторинга закрытие или блокировка оплат устанавливается в Аксапте");	
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-15 (#3762)
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ОрганизацияВходитВНастройкиМеханизмаИмпортаДанных 
		И НЕ ОбъектДоговор.Владелец.бит_ГруппаПоставщиков = Перечисления.бит_ГруппаПоставщиков.ПТов Тогда
		ОбъектДоговор.ДополнительныеСвойства.Вставить("ВыгрузитьДоговор", Истина);
		ОбъектДоговор.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-05 (#3487)
	
	флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ОбъектДоговор, , "Ошибки");
	
	Если флВыполнено Тогда
		
		// Запишем историю изменения "периодических" реквизитов.
		СтруктураПериодическихРеквизитов = Новый Структура;
		СтруктураПериодическихРеквизитов.Вставить("бит_ОкончаниеПлановое");
		
		бит_ОбщегоНазначения.ЗаписатьИзмененияРеквизитов(ОбъектДоговор, ТекущаяДатаСеанса(), СтруктураПериодическихРеквизитов);

		// Запишем значения параметров финансового договора.
		ДеревоПараметров = РеквизитФормыВЗначение("ЗначенияПараметровФинДоговоров");
		
		бит_ДоговораСервер.ЗаписатьПараметрыФинансовогоДоговора(ОбъектДоговор.Ссылка, ДеревоПараметров);
		
	КонецЕсли;
	
	Возврат флВыполнено;
	
КонецФункции

// Перечитывает данные договора контрагента из базы и обновляет значения реквизитов обработки.
// 
&НаКлиенте
Процедура ПрочитатьДанныеДоговораКонтрагента()
	
	//СофтЛаб Начало 2019-08-14 #3419
	//// 1c-izhtc spawn 14.07.15 (
	////ЗаполнитьЗначенияСвойств(Объект, ВладелецФормы.Объект,,"бит_СтатьиОборотов");
	//ЗаполнитьЗначенияСвойств(Объект, ВладелецФормы.Объект,,"бит_СтатьиОборотов, бит_му_Обеспечители, бит_му_ОсновныеСредстваВЗалоге, бит_му_ПрочиеАктивыВЗалоге, СБ_ДоговорыХеджирования");
	//// 1c-izhtc spawn 14.07.15 )
	ЗаполнитьЗначенияСвойств(Объект, ВладелецФормы.Объект,,"бит_СтатьиОборотов, 
															|бит_му_Обеспечители, 
															|бит_му_ОсновныеСредстваВЗалоге, 
															|бит_му_ПрочиеАктивыВЗалоге, 
															|ок_БанковскиеСчета, 
															//СофтЛаб Начало 2019-08-10 #3486
															|ок_ИсторияСтатусов, 
															//СофтЛаб Конец 2019-08-10 #3486
															|СБ_ДоговорыХеджирования");
	//СофтЛаб Конец 2019-08-14 #3419
	
	Объект.бит_СтатьиОборотов.Очистить();
	// 1c-izhtc spawn 15.07.15 (
	Объект.бит_му_Обеспечители.Очистить();
	Объект.бит_му_ОсновныеСредстваВЗалоге.Очистить();
	Объект.бит_му_ПрочиеАктивыВЗалоге.Очистить();
	Объект.СБ_ДоговорыХеджирования.Очистить();
	// 1c-izhtc spawn 15.07.15 )
	
	Для Каждого ТекСтрока Из ВладелецФормы.Объект.бит_СтатьиОборотов Цикл
		НоваяСтрока = Объект.бит_СтатьиОборотов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	// 1c-izhtc spawn 15.07.15 (
	Для Каждого ТекСтрока Из ВладелецФормы.Объект.бит_му_Обеспечители Цикл
		НоваяСтрока = Объект.бит_му_Обеспечители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Для Каждого ТекСтрока Из ВладелецФормы.Объект.бит_му_ОсновныеСредстваВЗалоге Цикл
		НоваяСтрока = Объект.бит_му_ОсновныеСредстваВЗалоге.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Для Каждого ТекСтрока Из ВладелецФормы.Объект.бит_му_ПрочиеАктивыВЗалоге Цикл
		НоваяСтрока = Объект.бит_му_ПрочиеАктивыВЗалоге.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Для Каждого ТекСтрока Из ВладелецФормы.Объект.СБ_ДоговорыХеджирования Цикл
		НоваяСтрока = Объект.СБ_ДоговорыХеджирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	// 1c-izhtc spawn 15.07.15 )
	
	ЗаполнитьПараметрыФинансовогоДоговора(Объект.ДоговорКонтрагента);
		
КонецПроцедуры

// Формирует кэш значений реквизитов формы.
// 
&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидимостьФинРеквизитов()
	
	флВидимостьФинРеквизитов = Объект.бит_НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.Финансовый
							ИЛИ Объект.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
							ИЛИ Объект.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
							ИЛИ Объект.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные;
							
	Возврат флВидимостьФинРеквизитов;						
	
КонецФункции

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	// ФлВидимость = ВидимостьНоминальныхСтавок(бит_ТипДоговора);
	// ЭлементыФормы.бит_ПанельДополнительныхРеквизитов.Страницы.бит_НоминальныеСтавки.Видимость = флВидимость;
	
	флВидимостьФинРеквизитов = ПолучитьВидимостьФинРеквизитов();
	
	// ЭлементыФормы.бит_ПанельДополнительныхРеквизитов.Страницы.бит_НоминальныеСтавки.Видимость = флВидимостьФинРеквизитов
	// ИЛИ флВидимость;
	Элементы.ГруппаСтраницаПараметрыФинансовыхДоговоров.Видимость = флВидимостьФинРеквизитов;
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.бит_ЗначенияПараметровФинансовыхДоговоров) Тогда
		Элементы.бит_СпособРасчетаФинПлатежей.Доступность 	   = Истина;
		Элементы.ЗначенияПараметровФинДоговоров.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.бит_СпособРасчетаФинПлатежей.Доступность 	   = Ложь;
		Элементы.ЗначенияПараметровФинДоговоров.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Объект.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.АрендаОС 
		Или Объект.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
		Или Объект.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные
		Или Объект.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
		Или Объект.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЦенныеБумаги Тогда
		
		Элементы.ГруппаУсловияОплатыНачислений.Видимость = Ложь;
	Иначе
		
		Элементы.ГруппаУсловияОплатыНачислений.Видимость = Истина;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-15 (#МДМ)
	Организация_Окей = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ"); 
	Если Объект.ДоговорКонтрагента.Организация <> Организация_Окей Тогда
		
		Элементы.ок_ПродовольственныйДоговор.Видимость 	= Ложь;
		Элементы.ок_ИнтеграцияСAX12.Видимость 			= Ложь;
		Элементы.ок_ДоговорПоВторсырью.Видимость 		= Ложь;
		Элементы.ГруппаТоварныеГруппы.Видимость 		= Ложь;
		
	Иначе
		
		Элементы.ок_ИнтеграцияСAX12.Доступность = ок_РучноеИзменениеПризнакаИнтеграцияСAX12 ИЛИ НЕ Объект.ДоговорКонтрагента.ок_ИнтеграцияСAX12;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-15 (#МДМ)
	
КонецПроцедуры

// Функция формирует список доступных для выбора направлений в зависимости от вида договора. 
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//   СписокНаправлений - СписокЗначений.
// 
&НаСервере
Функция СформироватьСписокДоступныхНаправлений()
	
	СписокНаправлений = Новый СписокЗначений;	
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()]) Тогда
		
		Если Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПоставщиком Тогда
			СписокНаправлений.Добавить(Перечисления.бит_РасходДоход.Расходование); 				
		ИначеЕсли Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПокупателем Тогда
			СписокНаправлений.Добавить(Перечисления.бит_РасходДоход.Поступление); 				
		Иначе
			СписокНаправлений.Добавить(Перечисления.бит_РасходДоход.Расходование);
			СписокНаправлений.Добавить(Перечисления.бит_РасходДоход.Поступление);
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат СписокНаправлений;
	
КонецФункции // СформироватьСписокДоступныхНаправлений()

&НаСервере
Процедура ПриИзмененииЦФОСервер()
	
	ТекДатаОтбора = ТекущаяДатаСеанса();
	
	Для Каждого ТекСтрока Из Объект.бит_СтатьиОборотов Цикл
		
		// Проверим принадлежность статьи оборотов.
		ПроверитьПринадлежностьЦФОКСтатьеОборотов(ТекСтрока, ТекДатаОтбора);
		
		ИзменениеСтатьиОборотов(ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет принадлежность ЦФО к Статье оборотов.
// 
// Параметры:
//  Контейнер 		  - ДанныеФормыСтруктура.
//  ВыводитьСообщения - Булево.
//  ИндексСтроки	  - Число, по умолчанию Неопределено.
// 
&НаСервере 
Процедура ПроверитьПринадлежностьЦФОКСтатьеОборотов(ИДСтроки, ДатаОтбора)

	Если ТипЗнч(ИДСтроки) = Тип("Число") Тогда
		Контейнер = Объект.бит_СтатьиОборотов.НайтиПоИдентификатору(ИДСтроки);
	Иначе
		Контейнер = ИДСтроки;
	КонецЕсли;
	
	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокСтатейПоПринадлежности = ПолучитьСписокСтатейПоПринадлежности(Контейнер, ДатаОтбора);
	
	НомерСтроки = Контейнер.НомерСтроки-1;
	
	ИмяПоля = "Объект.бит_СтатьиОборотов["+НомерСтроки+"].СтатьяОборотов";
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ЦФО"						 , Объект.бит_ЦФО);
	СтруктураПараметров.Вставить("СтатьяОборотов"			 , Контейнер.СтатьяОборотов);
	СтруктураПараметров.Вставить("ИмяПоля"					 , ИмяПоля);
	СтруктураПараметров.Вставить("СписокСтатейПринадлежность", СписокСтатейПоПринадлежности);
	СтруктураПараметров.Вставить("ВыводитьСообщения"		 , Истина);	
	
	Если НЕ бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(СтруктураПараметров) Тогда
		Контейнер.СтатьяОборотов = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПроверитьПринадлежностьЦФОКСтатьеОборотов() 

// Функция получает список статей оборотов, принадлежащих данному ЦФО.
// 
// Параметры:
//  ВыводитьСообщения - Булево.
//  ИндексСтроки 	  - Число, по умолчанию Неопределено.
// 
// Возвращаемое значение:
//  СписокСтатей - СписокЗначений.
// 
&НаСервере
Функция ПолучитьСписокСтатейПоПринадлежности(ИДСтроки, ДатаОтбора)
	
	Если ТипЗнч(ИДСтроки) = Тип("Число") Тогда
		Контейнер = Объект.бит_СтатьиОборотов.НайтиПоИдентификатору(ИДСтроки);
	Иначе
		Контейнер = ИДСтроки;
	КонецЕсли;
	
	Если Контейнер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"       		, ДатаОтбора);
	СтруктураПараметров.Вставить("Организация"		, Объект.ДоговорКонтрагента.Организация);
	СтруктураПараметров.Вставить("ЦФО"        		, Объект.бит_ЦФО);
	СтруктураПараметров.Вставить("РасходДоход"		, Контейнер.РасходДоход);
	СтруктураПараметров.Вставить("ВыводитьСообщения", Истина);
	
	СписокСтатей = бит_Казначейство.ПолучитьСписокСтатейПоПринадлежности(СтруктураПараметров);
	
	Возврат СписокСтатей;
	
КонецФункции // ПолучитьСписокСтатейПоПринадлежностиМодуль()

&НаСервере
Функция ПолучитьСтруктуруОтбораПроектовДоговоров()
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Организация", Объект.ДоговорКонтрагента.Организация);
	
    ИмяКонтрагент = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
    СтруктураОтбора.Вставить("Контрагент", Объект.ДоговорКонтрагента[ИмяКонтрагент]);
	
	СтруктураОтбора.Вставить("ВидДоговора", Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()]);
	
	Возврат СтруктураОтбора;
	
КонецФункции

// Процедура заполняет дерево параметров финансового договора.
// 
&НаСервере
Процедура ЗаполнитьПараметрыФинансовогоДоговора(ИсточникЗаполнения)
	
	ДеревоПараметров = бит_ДоговораСервер.ПолучитьДеревоПараметровФинДоговоров(ИсточникЗаполнения);
	
	ЭлементыДереваВФорме = ЗначенияПараметровФинДоговоров.ПолучитьЭлементы();
	ЭлементыДереваВФорме.Очистить();
	
	Для Каждого ТекущаяВетка Из ДеревоПараметров.Строки Цикл
		
		НоваяСтрока = ЭлементыДереваВФорме.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяВетка);
		
		ЭлементыСтрокиРодителя = НоваяСтрока.ПолучитьЭлементы();
		
		Для Каждого ПодчиненнаяВетка Из ТекущаяВетка.Строки Цикл
			НоваяПодчиненнаяСтрока = ЭлементыСтрокиРодителя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПодчиненнаяСтрока, ПодчиненнаяВетка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обрабатывает изменение статьи оборотов в строке таблицы.
// 
// Параметры:
//  Контейнер - СтрокаТабличнойЧасти.бит_СтатьиОборотов.
// 
&НаСервере
Процедура ИзменениеСтатьиОборотов(ИДСтроки)

	Если ТипЗнч(ИДСтроки) = Тип("Число") Тогда
		Контейнер = Объект.бит_СтатьиОборотов.НайтиПоИдентификатору(ИДСтроки);
	Иначе
		Контейнер = ИДСтроки;
	КонецЕсли;
	
	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
    Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) Тогда
        
        Если Контейнер.СтатьяОборотов.ЭтоГруппа Тогда
			ТекстСообщения = НСтр("ru='Выбор групп статей запрещен'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Контейнер.СтатьяОборотов = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			
			Возврат;
        КонецЕсли; 
        
        Если НЕ Контейнер.СтатьяОборотов.РасходДоход = Контейнер.РасходДоход Тогда
            ВидСтатьи = ?(Контейнер.РасходДоход = Перечисления.бит_РасходДоход.Поступление, "доходную", "расходную");
			
			ТекстСообщения = НСтр("ru='Следует выбрать %1% статью'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ВидСтатьи);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Контейнер.СтатьяОборотов = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			Возврат;
        КонецЕсли; 
		
		// Если еще не указана основная статья оборотов, тогда.
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-18 (#МДМ)
		//Если Не ЗначениеЗаполнено(Объект.бит_ОсновнаяСтатьяОборотов)
		//	И Контейнер.СтатьяОборотов.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
		//	Объект.бит_ОсновнаяСтатьяОборотов = Контейнер.СтатьяОборотов;
		//КонецЕсли;
		//
		//Если Не ЗначениеЗаполнено(Объект.бит_ОсновнаяСтатьяОборотовБДР)
		//	И Контейнер.СтатьяОборотов.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДР Тогда
		//	Объект.бит_ОсновнаяСтатьяОборотовБДР = Контейнер.СтатьяОборотов;
		//КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(Объект.бит_ОсновнаяСтатьяОборотов)
				ИЛИ Объект.бит_СтатьиОборотов.НайтиСтроки(Новый Структура("СтатьяОборотов", Объект.бит_ОсновнаяСтатьяОборотов)).Количество() = 0)
			И Контейнер.СтатьяОборотов.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
			
			Объект.бит_ОсновнаяСтатьяОборотов = Контейнер.СтатьяОборотов;
			
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(Объект.бит_ОсновнаяСтатьяОборотовБДР)
				ИЛИ Объект.бит_СтатьиОборотов.НайтиСтроки(Новый Структура("СтатьяОборотов", Объект.бит_ОсновнаяСтатьяОборотовБДР)).Количество() = 0)
			И Контейнер.СтатьяОборотов.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДР Тогда
			
			Объект.бит_ОсновнаяСтатьяОборотовБДР = Контейнер.СтатьяОборотов;
			ОсновнаяСтатьяОборотовБДРПриИзмененииНаСервере();
			
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-18 (#МДМ)
		
	КонецЕсли; 
    
КонецПроцедуры // бит_ИзменениеСтатьиОборотов()

&НаСервере
Процедура УстановитьОсновнуюСтатьюОборотовСервер(СтатьяОборотов)
	
	Если НЕ ЗначениеЗаполнено(СтатьяОборотов) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатьяОборотов.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
		Объект.бит_ОсновнаяСтатьяОборотов = СтатьяОборотов;
	ИначеЕсли СтатьяОборотов.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДР Тогда 
		Объект.бит_ОсновнаяСтатьяОборотовБДР = СтатьяОборотов;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-18 (#МДМ)
		ОсновнаяСтатьяОборотовБДРПриИзмененииНаСервере();
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-18 (#МДМ)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПараметрыФинДоговора()
	
	флВидимостьФинРеквизитов = ПолучитьВидимостьФинРеквизитов();
	
	Если флВидимостьФинРеквизитов Тогда
		Возврат;
	КонецЕсли;
	
	Объект.бит_СпособРасчетаФинПлатежей = Неопределено;
	
	ЗначенияПараметровФинДоговоров.ПолучитьЭлементы().Очистить();
	
КонецПроцедуры

&НаСервере
Процедура бит_ТипДоговораПриИзмененииСервер()
	
	УправлениеЭлементамиФормы();
	
	ПроверитьПараметрыФинДоговора();
	
КонецПроцедуры

&НаСервере
Процедура бит_НаправлениеДоговораПриИзмененииСервер()
	
	УправлениеЭлементамиФормы();
	
	ПроверитьПараметрыФинДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСобытийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		
		Если Модифицированность Тогда
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#МДМ)
			//Модифицированность = НЕ СохранитьИзменения();
			Если ВладелецФормы.Модифицированность Тогда
				Модифицированность = НЕ СохранитьИзменения(ВладелецФормы.Объект);
			Иначе
				Модифицированность = НЕ СохранитьИзменения();
			КонецЕсли; 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#МДМ)
			ВыполнитьПослеЗаписи();
		КонецЕсли;
		
	Иначе

		Если Модифицированность  Тогда
			
			ТекстВопроса = НСтр("ru = 'Данные изменены. Перед началом работы с событиями данные необходимо записать. Записать?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСписокСобытийПередНачаломДобавления", ЭтотОбъект, "Добавление");
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30,,);
			
		Иначе
			
			Если Объект.бит_СуммаДоговора > 0 Тогда
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Договор", Объект.ДоговорКонтрагента);
				ПараметрыФормы.Вставить("Контрагент", ВладелецФормы.Объект.Владелец);
		        ПараметрыФормы.Вставить("Организация", ВладелецФормы.Объект.Организация);
				
				ОткрытьФорму("Документ.бит_СобытиеДоговора.Форма.ФормаДокумента", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Перед добавлением событий, необходимо ввести сумму договора.'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли;

		КонецЕсли;	

		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаКлиенте
Процедура ВопросСписокСобытийПередНачаломДобавления(Ответ, ВариантРедактирования) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#МДМ)
		//Модифицированность = НЕ СохранитьИзменения();
		Если ВладелецФормы.Модифицированность Тогда
			Модифицированность = НЕ СохранитьИзменения(ВладелецФормы.Объект);
		Иначе
			Модифицированность = НЕ СохранитьИзменения();
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#МДМ)
		ВыполнитьПослеЗаписи();

		Если ВариантРедактирования = "Добавление" Тогда
			Если Объект.бит_СуммаДоговора > 0 Тогда
			
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Договор", Объект.ДоговорКонтрагента);
				ПараметрыФормы.Вставить("Контрагент", ВладелецФормы.Объект.Владелец);
		        ПараметрыФормы.Вставить("Организация", ВладелецФормы.Объект.Организация);
				
				ОткрытьФорму("Документ.бит_СобытиеДоговора.Форма.ФормаДокумента", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Перед добавлением событий, необходимо ввести сумму договора.'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли;

		ИначеЕсли ВариантРедактирования = "Изменение" Тогда
			ТекущиеДанные = Элементы.СписокСобытий.ТекущиеДанные;
			ПоказатьЗначение(,ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВопросСписокСобытийПередНачаломДобавления()

&НаКлиенте
Процедура СписокСобытийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные изменены. Перед началом работы с событиями данные необходимо записать. Записать?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСписокСобытийПередНачаломДобавления", ЭтотОбъект, "Изменение");
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30,,);
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСобытий.ТекущиеДанные;
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
		
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СписокСобытийПередНачаломИзменения(Элемент, Отказ)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные изменены. Перед началом работы с событиями данные необходимо записать. Записать?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСписокСобытийПередНачаломДобавления", ЭтотОбъект, "Изменение");
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30,,)
	Иначе
		
		ТекущиеДанные = Элементы.СписокСобытий.ТекущиеДанные;
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);

	КонецЕсли;
		
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьИсковоеТребование(Команда)
	
	СоздатьИскПретензию("Иск");
	
КонецПроцедуры

// Создание иска или претензии.
// Параметры:
//   ВидДокумента - Строка.
// 
&НаКлиенте
Процедура СоздатьИскПретензию(ВидДокумента)

	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ изменен, перед началом добавления исков или претензий его необходимо записать. Записать?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСоздатьИскПретензию", ЭтотОбъект, ВидДокумента);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30,,НСтр("ru = 'Документ изменен'"));
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		Если ВладелецФормы.Объект.Свойство("Контрагент") Тогда
			ПараметрыФормы.Вставить("Контрагент", ВладелецФормы.Объект.Контрагент);
		Иначе
			ПараметрыФормы.Вставить("Контрагент", ВладелецФормы.Объект.Владелец);
		КонецЕсли;
        ПараметрыФормы.Вставить("Организация", ВладелецФормы.Объект.Организация);
		ПараметрыПередачи = Новый Структура("Основание", ПараметрыФормы); 
		
		Если ВидДокумента = "Иск" Тогда
			ОткрытьФорму("Документ.бит_ИсковоеТребование.Форма.ФормаДокумента", ПараметрыПередачи,,ЭтотОбъект);
		Иначе
			ОткрытьФорму("Документ.бит_Претензия.Форма.ФормаДокумента", ПараметрыПередачи,,ЭтотОбъект);
		КонецЕсли;
						
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПретензию(Команда)
	
	СоздатьИскПретензию("Претензия");
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю.
// Параметры:
//  Ответ - Строка.
//  ВидДокумента - Строка.
// 
&НаКлиенте
Процедура ВопросСоздатьИскПретензию(Ответ, ВидДокумента) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-15 (#МДМ)
		//Модифицированность = НЕ СохранитьИзменения();
		Если ВладелецФормы.Модифицированность Тогда
			Модифицированность = НЕ СохранитьИзменения(ВладелецФормы.Объект);
		Иначе
			Модифицированность = НЕ СохранитьИзменения();
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-15 (#МДМ)
		ВыполнитьПослеЗаписи();
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		Если ВладелецФормы.Объект.Свойство("Контрагент") Тогда
			ПараметрыФормы.Вставить("Контрагент", ВладелецФормы.Объект.Контрагент);
		Иначе
			ПараметрыФормы.Вставить("Контрагент", ВладелецФормы.Объект.Владелец);
		КонецЕсли;
        ПараметрыФормы.Вставить("Организация", ВладелецФормы.Объект.Организация);
		ПараметрыПередачи = Новый Структура("Основание", ПараметрыФормы);
		
		Если ВидДокумента = "Иск" Тогда
			ОткрытьФорму("Документ.бит_ИсковоеТребование.Форма.ФормаДокумента", ПараметрыПередачи,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе
			ОткрытьФорму("Документ.бит_Претензия.Форма.ФормаДокумента", ПараметрыПередачи,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

//Начало_бит_Магомедов_12.12.2012 
&НаКлиенте
Процедура бит_му_ТипКредитногоДоговораПриИзменении(Элемент)
	
	Если НЕ Объект.бит_му_Обеспечители.Количество() = 0 ИЛИ НЕ Объект.бит_му_ОсновныеСредстваВЗалоге.Количество() = 0 ИЛИ НЕ Объект.бит_му_ПрочиеАктивыВЗалоге.Количество() = 0 Тогда 
		Ответ = Вопрос("Табличные части <Обеспечители>, <Основные средства в залоге> и <Прочие активы в залоге> будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Изменение типа кредитного договора");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.бит_му_Обеспечители.Очистить();
			Объект.бит_му_ОсновныеСредстваВЗалоге.Очистить();
			Объект.бит_му_ПрочиеАктивыВЗалоге.Очистить();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	бит_УстановитьВидимостьНаСтраницеОбеспечение();
	                                     
КонецПроцедуры

Процедура бит_УстановитьВидимостьНаСтраницеОбеспечение()
	
	Если Объект.бит_му_ТипКредитногоДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеОбеспеченные") ИЛИ 
		Объект.бит_му_ТипКредитногоДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицОбеспеченные") Тогда  
		
		ВидимостьЭлементов = Истина;
		
	иначе
		
		ВидимостьЭлементов = Ложь;
		
	КонецЕсли;
	
	СписокИменОбеспечения = Новый СписокЗначений;
	СписокИменОбеспечения.Добавить("Обеспечители");
	СписокИменОбеспечения.Добавить("ОСВЗалоге");
	СписокИменОбеспечения.Добавить("ПрочиеАктивыВЗалоге");
	
	Для Каждого ТекСтрока Из СписокИменОбеспечения Цикл
		Постфикс = ?(ВидимостьЭлементов, "", "Пустая");
		Элементы["Страницы" + ТекСтрока.Значение].ТекущаяСтраница = Элементы["Страница" + ТекСтрока.Значение + Постфикс];
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ПанельДопРеквизитовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.бит_му_Обеспечение Тогда
		 бит_УстановитьВидимостьНаСтраницеОбеспечение();
	КонецЕсли;
	// +СБ. Кузнецова С. 2014-09-08 
	Если ТекущаяСтраница = Элементы.СБ_Хеджирование Тогда
		 УстановитьВидимостьНаСтраницеХеджирование();
	КонецЕсли;
	// -СБ. Кузнецова С.
	 
КонецПроцедуры

&НаКлиенте
Процедура бит_ОбеспечителиПередУдалением(Элемент, Отказ)
	
	бит_ПередУдалениемСтрокиТЧ(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ОСВЗалогеПередУдалением(Элемент, Отказ)
	
	бит_ПередУдалениемСтрокиТЧ(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ПрочиеАктивыВЗалогеПередУдалением(Элемент, Отказ)
	
	бит_ПередУдалениемСтрокиТЧ(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ПередУдалениемСтрокиТЧ(Отказ)
	
	Ответ = Вопрос("Удалить запись?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Удаление записи");
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
//Конец_бит_Магомедов_12.12.2012 

// +СБ. Кузнецова С. 2014-09-08 
&НаКлиенте
Процедура СБ_ЗахеджированоПриИзменении(Элемент)
	                                                    
	УстановитьВидимостьНаСтраницеХеджирование();
	Если Не Объект.СБ_Захеджировано Тогда
		Объект.СБ_КонтрагентХеджирования = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.СБ_ДоговорыХеджирования.Очистить();
	КонецЕсли;
	                                     
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНаСтраницеХеджирование()
	
	Постфикс=?(Объект.СБ_Захеджировано, "", "Пустая");
	Элементы.СтраницыСБ_Хеджирование.ТекущаяСтраница = Элементы["СтраницаСБ_Хеджирование"+Постфикс];
	
КонецПроцедуры

&НаКлиенте
Процедура СБ_КонтрагентХеджированияПриИзменении(Элемент)
	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Каждого	Строка Из Объект.СБ_ДоговорыХеджирования Цикл
		Если ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Строка.ДоговорХеджирования, "Владелец") <> Объект.СБ_КонтрагентХеджирования Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
		Объект.СБ_ДоговорыХеджирования.Удалить(УдаляемаяСтрока);
	КонецЦикла;
			
КонецПроцедуры
// -СБ. Кузнецова С.

//+СБ. Скиба С. 2014-09-30
&НаКлиенте
Процедура СБ_ДоговорыХеджированияДоговорХеджированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Владелец, Организация", Объект.СБ_КонтрагентХеджирования, ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "Организация"));
	ПараметрыФормы = Новый Структура("Отбор" ,Отбор);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
			
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-12-14 (#МДМ)
&НаСервере
Процедура УстановитьОтборДляТоварныхГрупп()

	ЭлементыОтбора = ТоварныеГруппы.Отбор.Элементы;
    ЭлементыОтбора.Очистить();
	
	НовыйЭлемент = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовыйЭлемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента");
    НовыйЭлемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлемент.ПравоеЗначение   = Объект.ДоговорКонтрагента;
    НовыйЭлемент.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	
	Элементы.ТоварныеГруппы.Обновить();
	
КонецПроцедуры // УстановитьОтборДляТоварныхГрупп()

&НаКлиенте
Процедура ПроверитьВозможностьУстановкиПризнакаИнтеграцияСAX12ВДоговоре()
	
	ВозможностьУстановкиПризнакаИнтеграцияСAX12 = ок_ВыгрузкаВАксапту.ПроверитьВозможностьУстановкиПризнакаИнтеграцияСAX12ВДоговоре(Объект);

	Если НЕ Объект.ок_ИнтеграцияСAX12 
		И ВозможностьУстановкиПризнакаИнтеграцияСAX12 Тогда
		
		ТекстВопроса = НСтр("ru = 'Договор удовлетворяет условиям для начала интеграции с AX12
								|Установить признак?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросУстановкиПризнакаИнтеграцияСAX12", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,);
		
	ИначеЕсли Объект.ок_ИнтеграцияСAX12 
		И НЕ ВозможностьУстановкиПризнакаИнтеграцияСAX12 Тогда
		
		ТекстСообщения = "У договора установлен признак ""Интеграция с AX12"". Выбранный реквизит не удовлетворяет условию выгрузки в AX12. Снятие признака на договоре выполняется вручную.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ВопросУстановкиПризнакаИнтеграцияСAX12(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ок_ИнтеграцияСAX12 = Истина;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте 
Процедура ОсновнаяСтатьяОборотовБДРПриИзменении()
	
	ОсновнаяСтатьяОборотовБДРПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере 
Процедура ОсновнаяСтатьяОборотовБДРПриИзмененииНаСервере()
	
	ОбновитьПризнакДоговорПоВторсырьюНаСервере();
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьПризнакДоговорПоВторсырьюНаСервере()
	
	ок_ВыгрузкаВАксапту.УстановитьПризнакДоговорПоВторсырьюПоПользовательскомуУсловию(Объект);
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-12-14 (#МДМ)

#КонецОбласти

#КонецОбласти

// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-04-06 (#2965)
&НаКлиенте
Процедура ЗаполнитьРодительскийОбъект() Экспорт
	
	ОбъектДоговор = ЭтотОбъект.ВладелецФормы.Объект;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-05 (#3487)
	//ЗаполнитьЗначенияСвойств(ОбъектДоговор, Объект, , "бит_СтатьиОборотов, бит_му_Обеспечители, бит_му_ОсновныеСредстваВЗалоге, бит_му_ПрочиеАктивыВЗалоге, СБ_ДоговорыХеджирования");
	ЗаполнитьЗначенияСвойств(ОбъектДоговор, Объект, , "бит_СтатьиОборотов, бит_му_Обеспечители, бит_му_ОсновныеСредстваВЗалоге, бит_му_ПрочиеАктивыВЗалоге, СБ_ДоговорыХеджирования, ок_БанковскиеСчета, ок_ИсторияСтатусов");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-05 (#3487)
	
	// 1c-izhtc spawn 15.07.15 )	
	ОбъектДоговор.бит_СтатьиОборотов.Очистить();
	// 1c-izhtc spawn 15.07.15 (
	ОбъектДоговор.бит_му_Обеспечители.Очистить();
	ОбъектДоговор.бит_му_ОсновныеСредстваВЗалоге.Очистить();
	ОбъектДоговор.бит_му_ПрочиеАктивыВЗалоге.Очистить();
	ОбъектДоговор.СБ_ДоговорыХеджирования.Очистить();
	// 1c-izhtc spawn 15.07.15 )
	
	Для Каждого ТекСтрока Из Объект.бит_СтатьиОборотов Цикл
		НоваяСтрока = ОбъектДоговор.бит_СтатьиОборотов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	// 1c-izhtc spawn 15.07.15 (
	Для Каждого ТекСтрока Из Объект.бит_му_Обеспечители Цикл
		НоваяСтрока = ОбъектДоговор.бит_му_Обеспечители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.бит_му_ОсновныеСредстваВЗалоге Цикл
		НоваяСтрока = ОбъектДоговор.бит_му_ОсновныеСредстваВЗалоге.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.бит_му_ПрочиеАктивыВЗалоге Цикл
		НоваяСтрока = ОбъектДоговор.бит_му_ПрочиеАктивыВЗалоге.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.СБ_ДоговорыХеджирования Цикл
		НоваяСтрока = ОбъектДоговор.СБ_ДоговорыХеджирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-05 (#3487)
	Для Каждого ТекСтрока Из Объект.ок_БанковскиеСчета Цикл
		НоваяСтрока = ОбъектДоговор.ок_БанковскиеСчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.ок_ИсторияСтатусов Цикл
		НоваяСтрока = ОбъектДоговор.ок_ИсторияСтатусов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-05 (#3487)
	
КонецПроцедуры;
// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-04-06 (#2965)
