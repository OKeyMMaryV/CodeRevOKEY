&НаКлиенте
Процедура Сформировать(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.База.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьВопросЗавершение", ЭтотОбъект), "Список документов будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СформироватьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.База.Очистить();
    Иначе
        Возврат;
    КонецЕсли;
    
    СформироватьСервер();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИПровести(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИПровестиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.База Цикл
		СтрокаТЧ.Отбор = Истина;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсе(Команда)

	Для Каждого СтрокаТЧ Из Объект.База Цикл
		СтрокаТЧ.Отбор = Ложь;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура БазаАккруалПоIDОткрытие(Элемент, СтандартнаяОбработка)
	
	
КонецПроцедуры

&НаКлиенте
Процедура БазаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "БазаАккруалПоID" Тогда
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.АккруалПоID) ИЛИ ТипЗнч(Элемент.ТекущиеДанные.АккруалПоID) = Тип("Строка") Тогда
			// Rarus-spb byse {
			ТекСтрока = Элемент.ТекущиеДанные; 
			ПараметрыОткрытия = Новый Структура("Основание",Новый Структура("Основание,ОтборПоПериоду",ТекСтрока.ДокументОснование, ТекСтрока.Период));
			Форма = ПолучитьФорму("Документ.рс_АккруалПоID.ФормаОбъекта",ПараметрыОткрытия,Элемент); 
			Форма.Объект.Дата = КонецДня(Объект.ДатаКон);
			//ЗаполнитьПоОснованию(Форма.Объект ,Элемент.ТекущиеДанные.ДокументОснование);
			//Документы.рс_АккруалПоID.ЗаполнениеПоОснованию(Форма.Объект, Элемент.ТекущиеДанные.ДокументОснование);
			// Rarus-spb byse }
			Форма.Открыть();
		Иначе
			ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.АккруалПоID);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "БазаДокументОснование" Тогда
		
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДокументОснование) Тогда
			ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.ДокументОснование);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БазаОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если Источник.ВладелецФормы.ТекущийЭлемент.Имя = "БазаАккруалПоID" Тогда
		Источник.ВладелецФормы.ТекущиеДанные.АккруалПоID = НовыйОбъект;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БазаСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	//ТекущиеДанные.СтатьяОборотов   = рс_ОбщийМодуль.ПолучитьСтатьюОборотовПоСчетуМСФО(ТекущиеДанные.Счет);
	ТекущиеДанные.СтатьяОборотов   = ПолучитьСтатьюОборотовПоСчетуМСФО(ТекущиеДанные.Счет);
	ТекущиеДанные.СчетНаименование = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Счет, "Наименование");
	
КонецПроцедуры

&НаКлиенте
Процедура БазаСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	//ТекущиеДанные.Счет = рс_ОбщийМодуль.ПолучитьСчетМСФОПоСтатьеОборотов(ТекущиеДанные.СтатьяОборотов);
	ТекущиеДанные.Счет = ПолучитьСчетМСФОПоСтатьеОборотов(ТекущиеДанные.СтатьяОборотов);
	
КонецПроцедуры

// Rarus-spb byse {
&НаСервере
Процедура СформироватьСервер( )
	Запрос = Новый Запрос;
	
	// 1c-izhtc spawn (
//	Если Объект.ВидОперации = Перечисления.рс_ВидыОперацийФормированиеАккруаловПоID.РазнесениюОборотов Тогда
//		
//		Запрос.Текст =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	бит_БК_РазнесениеОборотов.Ссылка КАК Ссылка,
//		|	бит_БК_РазнесениеОборотов.Ссылка.ID_Разнесения КАК ID_Разнесения,
//		|	бит_БК_РазнесениеОборотов.Ссылка.ВидДокумента,
//		|	бит_БК_РазнесениеОборотов.Ссылка.бит_Номер,
//		|	бит_БК_РазнесениеОборотов.Ссылка.бит_Дата,
//		|	бит_БК_РазнесениеОборотов.Ссылка.Контрагент,
//		|	бит_БК_РазнесениеОборотов.Период,
//		|	СУММА(бит_БК_РазнесениеОборотов.СуммаБезНДС) КАК СуммаБезНДС
//		|ПОМЕСТИТЬ Документы3
//		|ИЗ
//		|	Документ.бит_БК_РазнесениеОборотов.УправленческаяАналитика КАК бит_БК_РазнесениеОборотов
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_БК_РазнесениеОборотов.УправленческаяАналитика КАК Документы0
//		|		ПО бит_БК_РазнесениеОборотов.Период = Документы0.Период
//		|			И (Документы0.Ссылка = бит_БК_РазнесениеОборотов.Ссылка)
//		|ГДЕ
//		|	Документы0.Период МЕЖДУ &ДатаНач И &ДатаКон
//		|	И бит_БК_РазнесениеОборотов.Ссылка.ПометкаУдаления = ЛОЖЬ
//		|	И бит_БК_РазнесениеОборотов.Ссылка.Проведен
//		|	И бит_БК_РазнесениеОборотов.Ссылка.Организация = &Организация
//		|	И &Условие1
//		|	И &Условие2
//		|	И &Условие3
////ОК Калинин М. 240613		
//		|	И ВЫБОР КОГДА &ВидОперацииРО=неопределено ТОГДА истина ИНАЧЕ бит_БК_РазнесениеОборотов.Ссылка.ВидОперации = &ВидОперацииРО КОНЕЦ
////ОК Калинин М. 
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	бит_БК_РазнесениеОборотов.Ссылка,
//		|	бит_БК_РазнесениеОборотов.Ссылка.ID_Разнесения,
//		|	бит_БК_РазнесениеОборотов.Ссылка.ВидДокумента,
//		|	бит_БК_РазнесениеОборотов.Ссылка.бит_Номер,
//		|	бит_БК_РазнесениеОборотов.Ссылка.бит_Дата,
//		|	бит_БК_РазнесениеОборотов.Ссылка.Контрагент,
//		|	бит_БК_РазнесениеОборотов.Период
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Ссылка,
//		|	ID_Разнесения
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	РОУправленческаяАналитика.Ссылка КАК Ссылка,
//		|	МАКСИМУМ(РОУправленческаяАналитика.СтатьяОборотов) КАК СтатьяОборотов,
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РОУправленческаяАналитика.СтатьяОборотов) КАК КоличествоСтатейОборотов,
//		|	РОУправленческаяАналитика.Период
//		|ПОМЕСТИТЬ ВТСтатьиОборотов
//		|ИЗ
//		|	Документ.бит_БК_РазнесениеОборотов.УправленческаяАналитика КАК РОУправленческаяАналитика
//		|ГДЕ
//		|	(РОУправленческаяАналитика.Ссылка, РОУправленческаяАналитика.Период) В
//		|			(ВЫБРАТЬ
//		|				Документы3.Ссылка,
//		|				Документы3.Период
//		|			ИЗ
//		|				Документы3 КАК Документы3)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	РОУправленческаяАналитика.Ссылка,
//		|	РОУправленческаяАналитика.Период
//		|
//		|ИМЕЮЩИЕ
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РОУправленческаяАналитика.СтатьяОборотов) = 1
//		|
//		|ИНДЕКСИРОВАТЬ ПО
//		|	Ссылка
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	бит_БК_РазнесениеОборотов.ID_Разнесения КАК ID,
//		|	бит_БК_РазнесениеОборотов.ВидДокумента КАК ВидДокумента,
//		|	бит_БК_РазнесениеОборотов.бит_Номер КАК НомерДокумента,
//		|	бит_БК_РазнесениеОборотов.бит_Дата КАК ДатаДокумента,
//		|	бит_БК_РазнесениеОборотов.Ссылка КАК ДокументОснование,
//		|	МАКСИМУМ(""<документ не записан>"") КАК АккруалПоID,
//		|	бит_БК_РазнесениеОборотов.Контрагент,
//		|	СУММА(ВТСумма.СуммаБезНДС) КАК Сумма,
//		|	рс_АккруалПоID.Ссылка КАК АккруалСсылка,
//		|	рс_ДокументыПоID.Регистратор КАК ДокументПоID,
//		|	ВТСтатьиОборотов.СтатьяОборотов,
//		|	НАЧАЛОПЕРИОДА(бит_БК_РазнесениеОборотов.Период, МЕСЯЦ) КАК Период
//		|ИЗ
//		|	Документы3 КАК бит_БК_РазнесениеОборотов
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.рс_АккруалПоID.База КАК рс_АккруалПоID
//		|		ПО бит_БК_РазнесениеОборотов.Ссылка = рс_АккруалПоID.Ссылка.ДокументОснование
//		|			И (рс_АккруалПоID.Ссылка.ПометкаУдаления = ЛОЖЬ)
//		|			И (рс_АккруалПоID.Ссылка.Проведен = ИСТИНА)
//		|			И бит_БК_РазнесениеОборотов.Период = рс_АккруалПоID.Период
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рс_ДокументыПоID КАК рс_ДокументыПоID
//		|		ПО бит_БК_РазнесениеОборотов.ID_Разнесения = рс_ДокументыПоID.ID
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиОборотов КАК ВТСтатьиОборотов
//		|		ПО бит_БК_РазнесениеОборотов.Ссылка = ВТСтатьиОборотов.Ссылка
//		|			И бит_БК_РазнесениеОборотов.Период = ВТСтатьиОборотов.Период
//		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		|			СУММА(База.СуммаБезНДС) КАК СуммаБезНДС,
//		|			База.Ссылка КАК Ссылка,
//		|			База.Период КАК Период
//		|		ИЗ
//		|			Документ.бит_БК_РазнесениеОборотов.УправленческаяАналитика КАК База
//		|		ГДЕ
//		|			(База.Ссылка, База.Период) В
//		|					(ВЫБРАТЬ
//		|						Документы3.Ссылка,
//		|						Документы3.Период
//		|					ИЗ
//		|						Документы3 КАК Документы3)
//		|		
//		|		СГРУППИРОВАТЬ ПО
//		|			База.Ссылка,
//		|			База.Период) КАК ВТСумма
//		|		ПО бит_БК_РазнесениеОборотов.Ссылка = ВТСумма.Ссылка
//		|			И бит_БК_РазнесениеОборотов.Период = ВТСумма.Период
//		|ГДЕ
//		|	рс_АккруалПоID.Ссылка ЕСТЬ NULL 
//		|	И рс_ДокументыПоID.Регистратор ЕСТЬ NULL 
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	бит_БК_РазнесениеОборотов.ID_Разнесения,
//		|	бит_БК_РазнесениеОборотов.ВидДокумента,
//		|	бит_БК_РазнесениеОборотов.бит_Номер,
//		|	бит_БК_РазнесениеОборотов.бит_Дата,
//		|	бит_БК_РазнесениеОборотов.Ссылка,
//		|	бит_БК_РазнесениеОборотов.Контрагент,
//		|	рс_АккруалПоID.Ссылка,
//		|	рс_ДокументыПоID.Регистратор,
//		|	ВТСтатьиОборотов.СтатьяОборотов,
//		|	НАЧАЛОПЕРИОДА(бит_БК_РазнесениеОборотов.Период, МЕСЯЦ)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	бит_БК_РазнесениеОборотов.бит_Дата,
//		|	бит_БК_РазнесениеОборотов.Ссылка.МоментВремени,
//		|	Период";
//		
//	ИначеЕсли Объект.ВидОперации = Перечисления.рс_ВидыОперацийФормированиеАккруаловПоID.ЗаявкаНаДоговор Тогда
//		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документы0.Ссылка КАК Ссылка,
		|	МАКСИМУМ(Документы0.Ссылка.ID) КАК ID,
		|	МАКСИМУМ(Документы0.Ссылка.Дата) КАК Дата,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Документы0.СтатьяОборотов) = 1
		|			ТОГДА МАКСИМУМ(Документы0.СтатьяОборотов)
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК СтатьяОборотов,
		|	МАКСИМУМ(Документы0.Ссылка.Контрагент) КАК Контрагент,
		|	СУММА(Документы0.СуммаБезНДС) КАК СуммаБезНДС,
		|	Документы0.Период
		|ПОМЕСТИТЬ Документы3
		|ИЗ
		|	Документ.рс_ЗаявкаНаДоговор.База КАК Документы0
		|ГДЕ
		|	Документы0.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И Документы0.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Документы0.Ссылка.Проведен
		|	И Документы0.Ссылка.Организация = &Организация
		|	И &Условие1
		|	И &Условие2
		|	И &Условие3
		|
		|СГРУППИРОВАТЬ ПО
		|	Документы0.Ссылка,
		|	Документы0.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	рс_ЗаявкаНаДоговорБаза.ID КАК ID,
		|	МАКСИМУМ(НЕОПРЕДЕЛЕНО) КАК ВидДокумента,
		|	МАКСИМУМ("""") КАК НомерДокумента,
		|	рс_ЗаявкаНаДоговорБаза.Дата КАК ДатаДокумента,
		|	рс_ЗаявкаНаДоговорБаза.Ссылка КАК ДокументОснование,
		|	рс_ЗаявкаНаДоговорБаза.СтатьяОборотов КАК СтатьяОборотов,
		|	МАКСИМУМ(""<документ не записан>"") КАК АккруалПоID,
		|	рс_ЗаявкаНаДоговорБаза.Контрагент,
		|	СУММА(рс_ЗаявкаНаДоговорБаза.СуммаБезНДС) КАК Сумма,
		|	рс_АккруалПоID.Ссылка КАК АккруалСсылка,
		|	рс_ДокументыПоID.Регистратор КАК ДокументПоID,
		|	НАЧАЛОПЕРИОДА(рс_ЗаявкаНаДоговорБаза.Период, МЕСЯЦ) КАК Период
		|ИЗ
		|	Документы3 КАК рс_ЗаявкаНаДоговорБаза
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.рс_АккруалПоID.База КАК рс_АккруалПоID
		|		ПО рс_ЗаявкаНаДоговорБаза.Ссылка = рс_АккруалПоID.Ссылка.ДокументОснование
		|			И (рс_АккруалПоID.Ссылка.ПометкаУдаления = ЛОЖЬ)
		|			И (рс_АккруалПоID.Ссылка.Проведен = ИСТИНА)
		|			И рс_ЗаявкаНаДоговорБаза.Период = рс_АккруалПоID.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рс_ДокументыПоID КАК рс_ДокументыПоID
		|		ПО рс_ЗаявкаНаДоговорБаза.ID = рс_ДокументыПоID.ID
		|ГДЕ
		|	рс_АккруалПоID.Ссылка ЕСТЬ NULL 
		|	И рс_ДокументыПоID.Регистратор ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	рс_ЗаявкаНаДоговорБаза.ID,
		|	рс_ЗаявкаНаДоговорБаза.Дата,
		|	рс_ЗаявкаНаДоговорБаза.Ссылка,
		|	рс_ЗаявкаНаДоговорБаза.СтатьяОборотов,
		|	рс_ЗаявкаНаДоговорБаза.Контрагент,
		|	рс_АккруалПоID.Ссылка,
		|	рс_ДокументыПоID.Регистратор,
		|	НАЧАЛОПЕРИОДА(рс_ЗаявкаНаДоговорБаза.Период, МЕСЯЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	рс_ЗаявкаНаДоговорБаза.Ссылка.МоментВремени,
		|	Период";
	//КонецЕсли;
	// 1c-izhtc spawn )
	
	УстановитьПараметрыЗапроса(Запрос);
	мОбъект = РеквизитФормыВЗначение("Объект");
	мОбъект.База.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрокаЗапрос Из мОбъект.База Цикл
		Если ЗначениеЗаполнено(СтрокаЗапрос.СтатьяОборотов) Тогда
			СтрокаЗапрос.Счет 				= рс_ОбщийМодуль.ПолучитьСчетМСФОПоСтатьеОборотов(СтрокаЗапрос.СтатьяОборотов);
			СтрокаЗапрос.СчетНаименование 	= СтрокаЗапрос.Счет.Наименование;
		КонецЕсли; 		
	КонецЦикла; 	
	
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапроса (Запрос)
	Запрос.УстановитьПараметр("ДатаНач", Объект.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", Объект.ДатаКон);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Объект) Тогда
		// 1c-izhtc spawn (
		//Если Объект.ВидОперации = Перечисления.рс_ВидыОперацийФормированиеАккруаловПоID.РазнесениюОборотов Тогда
		//	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "бит_БК_РазнесениеОборотов.Ссылка.УправленческаяАналитика.Аналитика_2 = &Объект");
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "бит_БК_РазнесениеОборотов.Аналитика_2 = &Объект");
		//Иначе
		// 1c-izhtc spawn )
			//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "рс_ЗаявкаНаДоговор.Ссылка.База.Объект = &Объект");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "Документы0.Объект = &Объект");
		// 1c-izhtc spawn (
		//КонецЕсли;
		// 1c-izhtc spawn )
		Запрос.УстановитьПараметр("Объект", Объект.Объект);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФункцияЦФО) Тогда
		// 1c-izhtc spawn (
		//Если Объект.ВидОперации = Перечисления.рс_ВидыОперацийФормированиеАккруаловПоID.РазнесениюОборотов Тогда
		//	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", "бит_БК_РазнесениеОборотов.Ссылка.УправленческаяАналитика.ЦФО = &ФункцияЦФО");
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", "бит_БК_РазнесениеОборотов.ЦФО = &ФункцияЦФО");
		//Иначе
		// 1c-izhtc spawn )
			//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", "рс_ЗаявкаНаДоговор.Ссылка.База.ФункцияЦФО = &ФункцияЦФО");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", "Документы0.ФункцияЦФО = &ФункцияЦФО");
		// 1c-izhtc spawn (
		//КонецЕсли;
		// 1c-izhtc spawn )
		Запрос.УстановитьПараметр("ФункцияЦФО", Объект.ФункцияЦФО);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие2", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СтатьяОборотов) Тогда
		// 1c-izhtc spawn (
		//Если Объект.ВидОперации = Перечисления.рс_ВидыОперацийФормированиеАккруаловПоID.РазнесениюОборотов Тогда
		//	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие3", "бит_БК_РазнесениеОборотов.Ссылка.УправленческаяАналитика.СтатьяОборотов = &СтатьяОборотов");			
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие3", "бит_БК_РазнесениеОборотов.СтатьяОборотов в (&СтатьяОборотов)");
		//Иначе
		// 1c-izhtc spawn )
			//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие3", "рс_ЗаявкаНаДоговор.Ссылка.База.СтатьяОборотов = &СтатьяОборотов");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие3", "Документы0.СтатьяОборотов в (&СтатьяОборотов)");
		// 1c-izhtc spawn (
		//КонецЕсли;
		// 1c-izhtc spawn (
		Запрос.УстановитьПараметр("СтатьяОборотов", Объект.СтатьяОборотов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие3", "ИСТИНА");
	КонецЕсли;
	
	//ОК Калинин М 240613	
		Запрос.УстановитьПараметр("ВидОперацииРО", ?(ЗначениеЗаполнено(Объект.ВидОперацииРО),Объект.ВидОперацииРО,Неопределено));
	//ОК Калинин М.
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьИПровестиСервер()
	
	мОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого СтрокаТЧ Из мОбъект.База Цикл
		
		Если НЕ СтрокаТЧ.Отбор Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.АккруалПоID) ИЛИ ТипЗнч(СтрокаТЧ.АккруалПоID) = Тип("Строка") Тогда
			ДокументОбъект      = Документы.рс_АккруалПоID.СоздатьДокумент();
			ДокументОбъект.Дата = КонецДня(Объект.ДатаКон);
		Иначе
			ДокументОбъект      = СтрокаТЧ.АккруалПоID.ПолучитьОбъект();
		КонецЕсли;
		
		Ошибка = Ложь;
		//Документы.рс_АккруалПоID.ЗаполнениеПоОснованию(ДокументОбъект, СтрокаТЧ.ДокументОснование, , Ошибка);
		Документы.рс_АккруалПоID.ЗаполнениеПоОснованию(ДокументОбъект, СтрокаТЧ.ДокументОснование, , Ошибка, СтрокаТЧ.Период);
		
		Если Ошибка Тогда
			Сообщить("Строка табличной части " + СтрокаТЧ.НомерСтроки + ": аккруал по основанию " + СтрокаТЧ.ДокументОснование + " не сфомирован!");
			Продолжить;	
		КонецЕсли;
			
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			СтрокаТЧ.АккруалПоID = ДокументОбъект.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;
		
		СтрокаТЧ.Отбор = Ложь;    		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованию (Объект, Основание)
	Документы.рс_АккруалПоID.ЗаполнениеПоОснованию(Объект, Основание);
КонецПроцедуры	

&НаСервере
Функция ПолучитьСтатьюОборотовПоСчетуМСФО (Счет)
	Возврат рс_ОбщийМодуль.ПолучитьСтатьюОборотовПоСчетуМСФО(Счет);	
КонецФункции	

&НаСервере
Функция ПолучитьСчетМСФОПоСтатьеОборотов (Статья)
	Возврат рс_ОбщийМодуль.ПолучитьСчетМСФОПоСтатьеОборотов(Статья);
КонецФункции	
// Rarus-spb byse }


//ОК Калинин М. 240613  
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийФормированиеАккруаловПоID.ЗаявкаНаДоговор");
	ОбновитьВидимостьПолей();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьПолей();
	ВидОперацииПриИзменении(элементы.ВидОперацииРО)	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСписокНаименованийСтатей(Команда)
	Наименования="";
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ВвестиСписокНаименованийСтатейЗавершение", ЭтотОбъект, Новый Структура("Наименования", Наименования)), Наименования, "Наименования статей", 0, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСписокНаименованийСтатейЗавершение(Строка, ДополнительныеПараметры) Экспорт
    
    Наименования = ?(Строка = Неопределено, ДополнительныеПараметры.Наименования, Строка);
    
    мНаименования=новый Массив;
    Для Индекс=1 по СтрЧислоСтрок(Наименования) Цикл	
        СтрТекста=СтрПолучитьСтроку(Наименования,Индекс);
        мНаименования.Добавить(СтрТекста);
    КонецЦикла; 	
    
    этаформа.Объект.СтатьяОборотов=ПолучитьСтатьиПоНаименованиямСервер(мНаименования);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтатьиПоНаименованиямСервер(Наименования)
	результат=новый списокЗначений;
	запрос=новый Запрос("ВЫБРАТЬ
	                    |	бит_СтатьиОборотов.Ссылка
	                    |ИЗ
	                    |	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	                    |ГДЕ
	                    |	бит_СтатьиОборотов.Наименование В(&Наименование)");
	запрос.УстановитьПараметр("Наименование",Наименования);					
	рез=Запрос.Выполнить();
	Если не рез.Пустой() тогда
		результат.ЗагрузитьЗначения(рез.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;	
	возврат результат;
КонецФункции

&НаКлиенте
Процедура СтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭтаФорма.Объект.СтатьяОборотов.ТипЗначения=Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов");
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Элементы.ВидОперацииРО.Видимость=Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийФормированиеАккруаловПоID.ЗаявкаНаДоговор");
КонецПроцедуры  

//ОК Калинин М. 
