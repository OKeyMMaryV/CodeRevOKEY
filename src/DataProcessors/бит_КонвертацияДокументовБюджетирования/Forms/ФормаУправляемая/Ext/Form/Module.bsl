
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	КонвертироватьНастройкиФормВводаБюджета = Истина;
	КонвертироватьФормыВводаБюджетов 		= Истина;
	КонвертироватьАктуализацииБюджетов 		= Истина;
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Период.ДатаНачала) Тогда
		Объект.Период.ДатаНачала = Дата('19800101');
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
		Объект.Период.ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Объект);
	
КонецПроцедуры // КомандаНастроитьПериод()

&НаКлиенте
Процедура ВыполнитьДействия(Команда)

	Если Не ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
		Объект.Период.ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
	КонвертацияДокументовБюджетаНаСервере();  	
	     	
КонецПроцедуры // ВыполнитьДействия()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура КонвертацияДокументовБюджетаНаСервере()
	
	Если КонвертироватьФормыВводаБюджетов Тогда
		ТекстСообщения = Нстр("ru = 'Начало конвертация документов ""Формы ввода бюджета"".'");
		Протокол.ДобавитьСтроку(ТекстСообщения);
		КонвертироватьФормыВводаБюджета();
		Протокол.ДобавитьСтроку(Символы.ПС);
	КонецЕсли;
	Если КонвертироватьАктуализацииБюджетов Тогда
		ТекстСообщения = Нстр("ru = 'Начало конвертация документов ""Актуализации бюджета"".'");
		Протокол.ДобавитьСтроку(ТекстСообщения);
		КонвертироватьАктуализации();
	КонецЕсли;
		
КонецПроцедуры // КонвертацияДокументовБюджетаНаСервере()

// Выполняет конвертацию деревъев в документах бит_АктуализацияБюджета.
// 
&НаСервере
Процедура КонвертироватьАктуализации()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"   , Объект.Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.Период.ДатаОкончания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.НастройкаФормы.ТекстЗапроса КАК ТекстЗапроса,
	|	Док.НастройкаФормы КАК НастройкаФормы
	|ИЗ
	|	Документ.бит_АктуализацияБюджета КАК Док
	|ГДЕ
	|	Док.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Док.НастройкаФормы <> ЗНАЧЕНИЕ(Справочник.бит_НастройкиФормВводаБюджета.ПустаяСсылка)";	
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() Тогда	
		ТекстСообщения =  НСтр("ru = 'Не найдены документы ""Актуализации бюджета"" для конвертации.'");
		Протокол.ДобавитьСтроку(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.НастройкаФормы) Тогда		
			 Продолжить;
		КонецЕсли; 
		
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		СохраненнаяНастройка = ДокОб.ПолучитьНастройкиПостроителя();
		
		Если НЕ СохраненнаяНастройка.Свойство("НастройкиКомпоновщика") Тогда
			
			ТекстЗапроса = бит_МеханизмПолученияДанных.АдаптироватьТекстПостроителяДляКомпоновки(Выборка.ТекстЗапроса);
			
			// Конвертация отбора.
			Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
			АдресКомпоновки = Документы.бит_АктуализацияБюджета.ИнициализироватьКомпоновщикСтруктура(ТекстЗапроса, Компоновщик, Новый УникальныйИдентификатор);
			бит_МеханизмПолученияДанных.КонвертацияОтборПостроителяОтборКомпоновщика(СохраненнаяНастройка, Компоновщик, ТекстЗапроса);
			бит_ОбновлениеСПредыдущейРедакцииБФ.ПроверитьКомпоновщикФормыВвода(Компоновщик);						
			
			СтруктураНастройки = Новый Структура;
			СтруктураНастройки.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
			ДокОб.СохранитьНастройкиПостроителя(СтруктураНастройки);
			
			// Конвертация дерева.
			ТабДок = Новый ТабличныйДокумент;
			СтрПар = Новый Структура;
			СтрПар.Вставить("ВыводитьСообщения"             , Ложь);
			СтрПар.Вставить("АдресКомпоновкиСтруктура"      , АдресКомпоновки);
			СтрПар.Вставить("НастройкиКомпоновщикаСтруктура", Компоновщик.ПолучитьНастройки());
			ДокОб.ВосстановитьДеревоПоДанным(ТабДок, Выборка.НастройкаФормы, ТекстЗапроса, СтрПар); 
			ДокОб.СохранитьДерево(ТабДок);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокОб);
			
		КонецЕсли; 
	КонецЦикла; 

	ТекстСообщения =  НСтр("ru = 'Выполнена конвертация документов ""Актуализации бюджета"".'");
	Протокол.ДобавитьСтроку(ТекстСообщения);
	
КонецПроцедуры // КонвертироватьАктуализации()

// Выполняет конвертацию деревъев в документах бит_ФормаВводаБюджета.
// 
&НаСервере
Процедура КонвертироватьФормыВводаБюджета()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"   , Объект.Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.Период.ДатаОкончания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.ХранилищеДерева,
	|	Док.НастройкиПостроителя,
	|	Док.НастройкаФормы,
	|	Док.НастройкаФормы.ТекстЗапроса КАК ТекстЗапроса
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета КАК Док
	|ГДЕ
	|	Док.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда	
		ТекстСообщения =  НСтр("ru = 'Не найдены документы ""Формы ввода бюджета"" для конвертации.'");
		Протокол.ДобавитьСтроку(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Кол = Выборка.Количество();
	
	Ном = 1;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.НастройкаФормы) Тогда		
			Продолжить;		
		КонецЕсли; 
		
		ТекДерево = Выборка.ХранилищеДерева.Получить();		
		Если НЕ ТипЗнч(ТекДерево) = Тип("ТабличныйДокумент") Тогда
			
			// Выполняем конвертацию.
			ДокОб = Выборка.Ссылка.ПолучитьОбъект();
			
			СохраненнаяНастройка = ДокОб.ПолучитьНастройкиПостроителя();
			
			ТекстЗапроса = бит_МеханизмПолученияДанных.АдаптироватьТекстПостроителяДляКомпоновки(Выборка.ТекстЗапроса);
			
			// Необходимо выполнить конвертацию.
			Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
			АдресКомпоновки = Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(ТекстЗапроса, Компоновщик, Новый УникальныйИдентификатор);
			бит_МеханизмПолученияДанных.КонвертацияОтборПостроителяОтборКомпоновщика(СохраненнаяНастройка, Компоновщик, ТекстЗапроса);
			бит_ОбновлениеСПредыдущейРедакцииБФ.ПроверитьКомпоновщикФормыВвода(Компоновщик);			
			
			// Восстанавливаем дерево по данным.
			ТабДок = Новый ТабличныйДокумент;
			
			ПараметрыВосстановленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
			ПараметрыВосстановленияДерева.АдресКомпоновки		= АдресКомпоновки;
			ПараметрыВосстановленияДерева.НастройкиКомпоновщика	= Компоновщик.ПолучитьНастройки();
			
			Адрес = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			ДокОб.ВосстановитьДеревоПоДанным(Адрес,Новый УникальныйИдентификатор(), ТабДок, 
											Выборка.НастройкаФормы, ТекстЗапроса, ПараметрыВосстановленияДерева);
			
			// Сохраняем дерево в хранилище.
			ДокОб.СохранитьДерево(ТабДок);
			
			СтруктураНастройки = Новый Структура;
			СтруктураНастройки.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
			ДокОб.СохранитьНастройкиПостроителя(СтруктураНастройки);
			
			бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОб,РежимЗаписиДокумента.Запись, "", "Ошибки");
			
		КонецЕсли; // Дерево старого формата.
		
		Ном = Ном+1;
		
	КонецЦикла; // Выборка.
	
	ТекстСообщения =  НСтр("ru = 'Выполнена конвертация документов ""Формы ввода бюджета"".'");
	Протокол.ДобавитьСтроку(ТекстСообщения);
	
КонецПроцедуры // КонвертироватьФормыВводаБюджета()

#КонецОбласти
