#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБЯЗАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбязательныеПеременныеОбработкиИсточникаСправочнойИнформации



Перем ФормаСправочнойИнформации Экспорт;	// Ссылка на форму обработки справочной информации
Перем ИмяЗакладкиИсточника Экспорт;			// Имя закладки источника справочной информации
Перем ИсточникСИ Экспорт;					// Ссылка на элемент справочника бит_си_Источники
Перем НастройкиИсточника Экспорт;			// Настройки источника справочной информации


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПЕРЕМЕННЫЕ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныеПеременныеОбработкиИсточникаСправочнойИнформации



// Перем <ИмяПеременной> [Экспорт];


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ОПЦИЯМИ ЗАКЛАДКИ ИСТОЧНИКА СИ.

#Область ПроцедурыИФункцииУправленияОпциямиЗакладкиИсточникаСи



// Признак, что обработка является источником справочной информации.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Обработка является источником справочной информации.     
// 
Функция ЭтоОбработкаИсточникаСИ() Экспорт
	Возврат Ложь;
КонецФункции // ЭтоОбработкаИсточникаСИ()

// Признак, что обработка является источником справочной информации
// доступным в режиме управляемого приложения.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Обработка является источником справочной информации.     
// 
Функция ЭтоОбработкаИсточникаСИУпр() Экспорт
	Возврат Ложь;
КонецФункции // ЭтоОбработкаИсточникаСИ()

// Признак, что обработка поддерживает возможности поиска.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Обработка предоставляет возможности поиска.
// 
Функция ВозможностьПоиска() Экспорт
	Возврат Истина;
КонецФункции // ВозможностьПоиска()

// Возможность выбора нескольких разделов справочной информации на закладке поиска.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Возможен выбор нескольких разделов;
// 													 Ложь - возможен выбор только одного раздела;
// 
Функция МножественныйВыборРазделовПоиска() Экспорт
	Возврат Истина;
КонецФункции // МножественныйВыборРазделовПоиска()

// Наличие настроек источника справочной информации.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Есть настройки; Ложь - настройки отсутствуют;           
// 
Функция ЕстьНастройки() Экспорт
	Возврат Ложь;
КонецФункции // ЕстьНастройки()

// Наличие дополнительных контекстно зависимых настроек (например, для текущего пользователя).
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Есть дополнительные настройки; Ложь - дополнительные    
// 	                   	  	                       	 настройки отсутствуют;                                           
// 
Функция ЕстьНастройкиПоОбъектам() Экспорт
	Возврат Ложь;
КонецФункции // ЕстьНастройкиПоОбъектам()

// Признак необходимости обновления содержимого закладки источника при смене положения окна.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - обновлять содержимое; Ложь - не обновлять;              
// 
Функция ОбновлятьПриСменеПоложенияОкна() Экспорт
	Возврат Ложь;
КонецФункции // ОбновлятьПриСменеПоложенияОкна()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения



// Сравнивает 2 ссылки. Структура ссылки определяется разработчиком обработки источника справочной информации.
// 
// Параметры 
// 	Ссылка1            	 -	Структура              	 Ссылка для сравнения                                             
// 	Ссылка2            	 -	Структура              	 Ссылка для сравнения                                             
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - ссылки равны; Ложь - ссылки не равны;                   
// 
Функция СсылкиРавны(Ссылка1,Ссылка2) Экспорт
	Если НЕ Ссылка1 = Ссылка2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // СсылкиРавны()

// Получает дерево разделов поиска.
// 
// Параметры 
// 	СтруктураПараметров	 -	Структура              	 Параметры, необходимые для заполнения дерева разделов.            
// 		Поля 
// 			ИмяЗакладки	 -	Строка              	 Имя закладки источника СИ для которой получаем дерево разделов.
// Возвращаемое значение:
// 	Возврат ...        	 -	ДеревоЗначений         	 Дерево разделов поиска                                           
// 		Поля 
// 			Пометка			 -	Булево             	 Флаг поиска в соответствующем разделе.
// 			Раздел			 -	Строка             	 Отображаемое наименование раздела поиска.
// 			ИмяЗакладки		 -	Строка            	 Имя закладки источника СИ для которой выполняем поиск в данном разделе.
// 			ПараметрыРаздела -	Структура          	 Структура дополнительных параметров поиска.
// 
Функция ПолучитьДеревоРазделов(СтруктураПараметров) Экспорт
	ДеревоРазделов = Новый ДеревоЗначений();
	ДеревоРазделов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	ДеревоРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Строка"));
	ДеревоРазделов.Колонки.Добавить("ИмяЗакладки", Новый ОписаниеТипов("Строка"));
	ДеревоРазделов.Колонки.Добавить("ПараметрыРаздела", Новый ОписаниеТипов("Структура"));
	// Текст заполнения дерева разделов
	Возврат ДеревоРазделов;
КонецФункции // ПолучитьДеревоРазделов()

// Выполняет переход по переданной ссылке.
// 
// Параметры 
// 	СтруктураСсылки    	 -	Структура              	 Структура ссылки, состав определяется разработчиком.              
// 
Процедура ПерейтиПоСсылке(СтруктураСсылки = Неопределено) Экспорт


	#Если Клиент Тогда
	// Код перехода по ссылке
	
	// ФормаСправочнойИнформации.ЭлементыФормы[ИмяЗакладкиИсточника+"_ПолеHTML"].УстановитьТекст(ТекстСтраницы);
	#КонецЕсли
КонецПроцедуры // ПерейтиПоСсылке()

// Выполняет полнотекстовый поиск для текущего источника справочной информации.
// 
// Параметры 
// 	СтрокаПоиска       	 -	Строка                 	 Текст поискового запроса.                                         
// 	СписокРазделов     	 -	Неопределено,          	 Фильтр разделов поиска                                           
// 	                   	  	СтрокаДереваЗначений,  	                                                                  
// 	                   	  	ДеревоЗначений.         	                                                                  
// 
Процедура ВыполнитьПоиск(СтрокаПоиска, СписокРазделов = Неопределено) Экспорт
	#Если Клиент Тогда
	// Код выполнения поиска
	
	// ВремЭлементы = ФормаСправочнойИнформации.ЭлементыФормы;
	// ВремЭлементы[ИмяЗакладкиИсточника+"_ПолеРезультатПоиска"].УстановитьТекст(ТекстРезультата);
	// ВремЭлементы.ПанельРезультатов.Страницы[ИмяЗакладкиИсточника].Заголовок =
	// 	ИсточникСИ.Заголовок + 
	// 	" (" + СокрЛП(Колво) + ")";
	#КонецЕсли
	
КонецПроцедуры // ВыполнитьПоиск()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ РАЗМЕРОМ ШРИФТА.

#Область ПроцедурыИФункцииУправленияРазмеромШрифта



// Возвращает размер шрифта, относительно которого происходят изменения
// так же является размером шрифта по умолчанию.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Число                  	 Размер шрифта.
// 
Функция БазовыйРазмерШрифта() Экспорт
	Возврат 0;
КонецФункции // ОбновлятьПриСменеПоложенияОкна()

// Возвращает соответствие единиц измерения размеров шрифта и шага изменения размера.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Соответствие           	 Соответствие единиц измерения и шага размера шрифта.              
// 
Функция ПолучитьСтруктуруРазмеровИЕдиниц() Экспорт
	РазмерыИЕдиницы = Новый Соответствие();
	РазмерыИЕдиницы.Вставить("ПоУмолчанию",2);
	// РазмерыИЕдиницы.Вставить("<ед. измерения>", <шаг>);
	Возврат РазмерыИЕдиницы;
КонецФункции // ПолучитьСтруктуруРазмеровИЕдиниц()

// Возвращает базовую доступность кнопок управления размером шрифта,
// а также верхнее и нижнее ограничение на размер шрифта.
// 
// Параметры 
// 	ОграничениеМакс    	 -	Число                  	 Верхнее ограничение размера шрифта.                               
// 	ОграничениеМин     	 -	Число                  	 Нижнее ограничение размера шрифта.                                
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - кнопки размера доступны; Ложь - не доступны.             
// 
Функция ДоступностьКнопокРазмерШрифта(ОграничениеМакс, ОграничениеМин) Экспорт
	ОграничениеМакс = -2;
	ОграничениеМин = -2;
	Возврат Истина;
КонецФункции // ДоступностьКнопокРазмерШрифта()

// Обработчик изменения размера шрифта в форме справочной информации
// применяется если необходимо дополнить или заменить стандартную обработку.
// 
// Параметры 
// 	РазмерШрифта       	 -	Число                  	 Размер шрифта после изменения.                                    
// 	Изменение          	 -	Число                  	 Направление изменения: 1 - увеличить; 0 - не изменять; -1 -      
// 	                   	  	                       	 уменьшить.                                                       
// 	Открытие           	 -	Булево                 	 Признак открытия закладки: Истина - устанавливаем размер в момент
// 	                   	  	                       	 открытия закладки. Ложь - просто изменяем размер.                
// 	ПродолжитьОбработку	 -	Булево                 	 Признак продолжения обработки стандартным обработчиком формы     
// 	                   	  	                       	 справочной информации: Истина - продолжить обработку; Ложь - не  
// 	                   	  	                       	 продолжать.                                                      
// 
Процедура ИзменитьРазмерШрифта(РазмерШрифта, Изменение, Открытие, ПродолжитьОбработку=Истина) Экспорт
	// Код обработчика
	
	// ПродолжитьОбработку = Истина;
КонецПроцедуры // ИзменитьРазмерШрифта()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ ОБРАБОТКИ СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийФормыОбработкиСправочнойИнформации


// Вызывается при регистрации источника с справочнике источников справочной информации.
// 
// Параметры 
// 	ИсточникСИ         	 -	СправочникСсылка.бит_си	 Источник справочной информации, связанный с закладкой            
// 	                   	  	_Источники.             	                                                                  
// 
Процедура ОбработчикСобытияРегистрацияИсточника(ИсточникСИ) Экспорт


	#Если Клиент Тогда
	// Код обработчика
		
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияРегистрацияИсточника()

// Вызывается при открытии формы справочной информации и создании закладки текущего источника.
// 
// Параметры 
// 	ПараметрОткрытия   	 -	Произвольный           	 Дополнительный параметр, который может быть обработан в          
// 	                   	  	                       	 данной процедуре.                                                  
// 
Процедура ОбработчикСобытияПриОткрытииЗакладки(ПараметрОткрытия = Неопределено) Экспорт
	#Если Клиент Тогда
	// Код обработчика
	
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияПриОткрытииЗакладки()

// Вызывается из обработчика события "ОбработкаВыбора" формы справочной информации
// в случае если событие вызвано формой сохранения настроек.
// 
// Параметры 
// 	ОбновитьТекущуюИнформацию	 -	Булево           Истина - Обновить информацию на закладке источника; Ложь - не    
// 	                 	  	                       	 обновлять.                                                        
// 
Процедура ОбработчикСобытияПриИзмененииНастроекИсточника(ОбновитьТекущуюИнформацию = Истина) Экспорт
	ОбновитьТекущуюИнформацию = Истина;
КонецПроцедуры

// Вызывается при изменении видимости закладки источника в форме справочной информации.
// 
Процедура ОбработчикСобытияПриИзмененииВидимостиЗакладки() Экспорт
	#Если Клиент Тогда
	// Код обработчика
	
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияПриИзмененииВидимостиЗакладки()

// Вызывается при переходе на закладку текущего источника.
// 
Процедура ОбработчикСобытияПриАктивизацииСтраницы() Экспорт
	#Если Клиент Тогда
	// Код обработчика
	
	ДоступностьКнопокКоманднойПанели();
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияПриАктивизацииСтраницы()

// Вызывается из обработчика события "ОбработкаВыбора" формы справочной информации.
// 
// Параметры 
// 	ОбновитьТекущуюИнформацию	 -	Булево           Истина - Обновить информацию на закладке источника; Ложь - не    
// 	             	  	                         	  обновлять.                                                        
// 	ЗначениеВыбора     	 -	Произвольный           	 Выбранное значение; Значение параметра "ЗначениеВыбора"          
// 	                   	  	                       	  обработчика события "ОбработкаВыбора" формы справочной информации.
// 	Источник           	 -	Произвольный           	 Источник события; Значение параметра "Источник" обработчика      
// 	                   	  	                          события "ОбработкаВыбора" формы справочной информации.            
// 
Процедура ОбработчикСобытияОбработкаВыбора(ОбновитьТекущуюИнформацию, ЗначениеВыбора, Источник) Экспорт
	#Если Клиент Тогда
	// Код обработчика
	
	// ОбновитьТекущуюИнформацию = Истина;
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияОбработкаВыбора()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ HTML-ДОКУМЕНТА ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийПоляHtmlДокументаИсточникаСправочнойИнформации

// Вызывается из обработчика события "ДокументСформирован" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле HTML-документа закладки источника; Значение параметра       
// 	                   	  	                       	 "Элемент" обработчика события "ДокументСформирован" поля         
// 	                   	  	                       	 HTML-документа закладки источника СИ.                             
// 	СтруктураСсылки    	 -	Структура              	 Структура ссылки.                                                 
// 	ДобавлятьВИсторию  	 -	Булево                 	 Истина - добавить текущую ссылку в историю; Ложь - не добавлять.  
// 
Процедура ОбработчикСобытияДокументСформирован(Элемент, СтруктураСсылки = Неопределено, ДобавлятьВИсторию = Истина) Экспорт


	#Если Клиент Тогда
	// Код обработчика
	
	ДоступностьКнопокКоманднойПанели();
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияДокументСформирован()

// Вызывается из обработчика события "OnClick" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле HTML-документа закладки источника;                          
// 	                   	  	                       	 Значениепараметра"Элемент" обработчика события                   
// 	                   	  	                       	 "OnClick"поляHTML-документа закладки источника СИ.                
// 	pEvtObj            	 -	COMобъект              	 Источник события; Значение параметра "pEvtObj" обработчика       
// 	                   	  	                       	 события "OnClick" поля HTML-документа закладки источника СИ.      
// 	ПродолжитьОбработку	 -	Булево                 	 Истина - продолжить стандартную обработку; Ложь - не продолжать.  
// 
Процедура ОбработчикСобытияOnClick(Элемент, pEvtObj, ПродолжитьОбработку = Истина) Экспорт
	#Если Клиент Тогда
	СтруктураСсылки = Неопределено;
	Если pEvtObj.returnValue = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	htmlElement = pEvtObj.srcElement;
	
	Пока htmlElement <> Неопределено И ВРег(htmlElement.tagName) <> "A" Цикл
		htmlElement = htmlElement.parentElement;
	КонецЦикла;
	
	Если htmlElement = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Код обработчика
	
	Если htmlElement.protocol = "http:" Тогда
		
		ЗапуститьПриложение(ПодготовитьСтроку(htmlElement.href));
		
		pEvtObj.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияOnClick()

// Вызывается из обработчика события "OnKeyPress" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле HTML-документа закладки источника; Значение                 
// 	                   	  	                       	 параметра"Элемент" обработчика события "OnKeyPress" поля         
// 	                   	  	                       	 HTML-документа закладки источника СИ.                             
// 	pEvtObj            	 -	COMобъект              	 Источник события; Значение параметра "pEvtObj" обработчика       
// 	                   	  	                       	 события "OnKeyPress" поля HTML-документа закладки источника СИ.   
// 	ПродолжитьОбработку	 -	Булево                 	 Истина - продолжить стандартную обработку; Ложь - не продолжать.  
// 
Процедура ОбработчикСобытияOnKeyPress(Элемент, pEvtObj, ПродолжитьОбработку = Истина) Экспорт
	#Если Клиент Тогда
	// Код обработчика
	
	Если pEvtObj.returnValue = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияOnKeyPress()

// Вызывается из обработчика события "OnDragStart" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле HTML-документа закладки источника; Значение параметра       
// 	                   	  	                       	 "Элемент" обработчика события "OnDragStart" поля                  
// 	                   	  	                       	 HTML-документа закладки источника СИ.
// 	pEvtObj            	 -	COMобъект              	 Источник события; Значение параметра "pEvtObj".
// 	                   	  	                       	 обработчика события "OnDragStart" поля HTML-документа закладки
// 	                   	  	                       	 источника СИ.                                                     
// 
Процедура ОбработчикСобытияOnDragStart(Элемент, pEvtObj) Экспорт
	#Если Клиент Тогда
	// Код обработчика
	
	Если НЕ pEvtObj.srcElement = Неопределено И НРег(pEvtObj.srcElement.tagName) = "img" Тогда
		pEvtObj.returnValue = Ложь;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияOnDragStart()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ РЕЗУЛЬТАТОВ ПОИСКА ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийПоляРезультатовПоискаИсточникаСправочнойИнформации

// Вызывается из обработчика события "ДокументСформирован" поля результатов поиска источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле результатов поиска закладки поиска источника; Значение      
// 	                   	  	                       	 параметра"Элемент" обработчика события "ДокументСформирован" поля
// 	                   	  	                       	 результатов поиска закладки поиска источника.                     
// 
Процедура ОбработчикСобытияДокументСформированРезультатаПоиска(Элемент) Экспорт


	#Если Клиент Тогда
	// Код обработчика
	
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияДокументСформированРезультатаПоиска()

// Вызывается из обработчика события "OnClick" поля результатов поиска источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле результатов поиска источника. 
// 	                   	  	                       	 Значениепараметра "Элемент" обработчика события                   
// 	                   	  	                       	 "OnClick" поля результатов поиска источника СИ.
// 	pEvtObj            	 -	COMобъект              	 Источник события; Значение параметра "pEvtObj" обработчика       
// 	                   	  	                       	 события "OnClick" поля результатов поиска источника СИ.   
// 	ПродолжитьОбработку	 -	Булево                 	 Истина - продолжить стандартную обработку; Ложь - не продолжать.  
// 
Процедура ОбработчикСобытияOnClickРезультатаПоиска(Элемент, pEvtObj, ПродолжитьОбработку = Истина) Экспорт
	#Если Клиент Тогда
	СтруктураСсылки = Неопределено;
	
	Если pEvtObj.returnValue = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	htmlElement = pEvtObj.srcElement;
	
	Пока htmlElement <> Неопределено И ВРег(htmlElement.tagName) <> "A" Цикл
		htmlElement = htmlElement.parentElement;
	КонецЦикла;
	
	Если htmlElement = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Код обработчика
	
	Если htmlElement.protocol = "http:" Тогда
		
		ЗапуститьПриложение(ПодготовитьСтроку(htmlElement.href));
		
		pEvtObj.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияOnClickРезультатаПоиска()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КНОПОК ПАНЕЛИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиКнопокПанелиИсточникаСправочнойИнформации

// Управляет доступностью кнопок дополнительной командной панели на закладке источника справочной информации.
// 
Процедура ДоступностьКнопокКоманднойПанели()


	#Если Клиент Тогда
	// Код управления доступностью кнопок
	
	#КонецЕсли
КонецПроцедуры // ДоступностьКнопокКоманднойПанели()

// Вызывается из обработчика события "Нажатие" кнопки дополнительной командной панели
// на закладке источника справочной информации.
// 
// Параметры 
// 	Кнопка             	 -	КнопкаКоманднойПанели  	 Значение параметра "Кнопка" обработчика события "Нажатие" кнопки
// 	                   	  	                       	 дополнительной командной панели закладки источника СИ.            
// 
Процедура ОбработчикСобытияНажатиеКнопкиКоманднойПанели(Кнопка) Экспорт
	#Если Клиент Тогда
	Если Кнопка.Имя = "КнопкаКоманднойПанели1" Тогда
		ОбработчикСобытияКнопкаКоманднойПанели1Нажатие();
	// ИначеЕсли Кнопка.Имя = "<Имя кнопки>" Тогда
	// 	ОбработчикСобытияКнопка<ИмяКнопки>Нажатие();
	Иначе
		Возврат;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияНажатиеКнопкиКоманднойПанели()

// Обработчик события "Нажатие" кнопки "КнопкаКоманднойПанели1" дополнительной командной панели
// закладки источника справочной информации "<Имя источника>".
// 
Процедура ОбработчикСобытияКнопкаКоманднойПанели1Нажатие()
	#Если Клиент Тогда
	
	// Код обработчика
	
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияКнопкаРедактироватьСтатьюНажатие()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныеПроцедурыИФункцииОбработкиИсточникаСправочнойИнформации



// Преобразовывает web-строку в обычную. Преобразует коды символов в исходной строке в символы.
// 
// Параметры 
// 	Строка             	 -	Строка                 	 Исходная строка.                                                  
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 Преобразованная строка.                                           
// 
Функция ПодготовитьСтроку(Строка)
	
	Стр = Строка;
	
	ТабЗамены = Новый Соответствие();
	
	ТабЗамены.Вставить("%D0%B0","а");
	ТабЗамены.Вставить("%D0%B1","б");
	ТабЗамены.Вставить("%D0%B2","в");
	ТабЗамены.Вставить("%D0%B3","г");
	ТабЗамены.Вставить("%D0%B4","д");
	ТабЗамены.Вставить("%D0%B5","е");
	ТабЗамены.Вставить("%D1%91","е");
	ТабЗамены.Вставить("%D0%B6","ж");
	ТабЗамены.Вставить("%D0%B7","з");
	ТабЗамены.Вставить("%D0%B8","и");
	ТабЗамены.Вставить("%D0%B9","й");
	ТабЗамены.Вставить("%D0%BA","к");
	ТабЗамены.Вставить("%D0%BB","л");
	ТабЗамены.Вставить("%D0%BC","м");
	ТабЗамены.Вставить("%D0%BD","н");
	ТабЗамены.Вставить("%D0%BE","о");
	ТабЗамены.Вставить("%D0%BF","п");
	ТабЗамены.Вставить("%D1%80","р");
	ТабЗамены.Вставить("%D1%81","с");
	ТабЗамены.Вставить("%D1%82","т");
	ТабЗамены.Вставить("%D1%83","у");
	ТабЗамены.Вставить("%D1%84","ф");
	ТабЗамены.Вставить("%D1%85","х");
	ТабЗамены.Вставить("%D1%86","ц");
	ТабЗамены.Вставить("%D1%87","ч");
	ТабЗамены.Вставить("%D1%88","ш");
	ТабЗамены.Вставить("%D1%89","щ");
	ТабЗамены.Вставить("%D1%8A","ъ");
	ТабЗамены.Вставить("%D1%8B","ы");
	ТабЗамены.Вставить("%D1%8C","ь");
	ТабЗамены.Вставить("%D1%8D","э");
	ТабЗамены.Вставить("%D1%8E","ю");
	ТабЗамены.Вставить("%D1%8F","я");
	
	ТабЗамены.Вставить("%D0%90","А");
	ТабЗамены.Вставить("%D0%91","Б");
	ТабЗамены.Вставить("%D0%92","В");
	ТабЗамены.Вставить("%D0%93","Г");
	ТабЗамены.Вставить("%D0%94","Д");
	ТабЗамены.Вставить("%D0%95","Е");
	ТабЗамены.Вставить("%D0%81","е");
	ТабЗамены.Вставить("%D0%96","Ж");
	ТабЗамены.Вставить("%D0%97","З");
	ТабЗамены.Вставить("%D0%98","И");
	ТабЗамены.Вставить("%D0%99","Й");
	ТабЗамены.Вставить("%D0%9A","К");
	ТабЗамены.Вставить("%D0%9B","Л");
	ТабЗамены.Вставить("%D0%9C","М");
	ТабЗамены.Вставить("%D0%9D","Н");
	ТабЗамены.Вставить("%D0%9E","О");
	ТабЗамены.Вставить("%D0%9F","П");
	ТабЗамены.Вставить("%D0%A0","Р");
	ТабЗамены.Вставить("%D0%A1","С");
	ТабЗамены.Вставить("%D0%A2","Т");
	ТабЗамены.Вставить("%D0%A3","У");
	ТабЗамены.Вставить("%D0%A4","Ф");
	ТабЗамены.Вставить("%D0%A5","Х");
	ТабЗамены.Вставить("%D0%A6","Ц");
	ТабЗамены.Вставить("%D0%A7","Ч");
	ТабЗамены.Вставить("%D0%A8","Ш");
	ТабЗамены.Вставить("%D0%A9","Щ");
	ТабЗамены.Вставить("%D0%AA","Ъ");
	ТабЗамены.Вставить("%D0%AB","Ы");
	ТабЗамены.Вставить("%D0%AC","Ь");
	ТабЗамены.Вставить("%D0%AD","Э");
	ТабЗамены.Вставить("%D0%AE","Ю");
	ТабЗамены.Вставить("%D0%AF","Я");
	
	ТабЗамены.Вставить("%20"," ");
	ТабЗамены.Вставить("""","""""");
	
	Для Каждого ТекЗамена Из ТабЗамены Цикл
		Стр = СтрЗаменить(Стр, ТекЗамена.Ключ, ТекЗамена.Значение);
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции // ПодготовитьСтроку()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБЯЗАТЕЛЬНЫЙ КОД ИНИЦИАЛИЗАЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбязательныйКодИнициализацииОбработкиИсточникаСправочнойИнформации




#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЙ КОД ИНИЦИАЛИЗАЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныйКодИнициализацииОбработкиИсточникаСправочнойИнформации

#КонецОбласти



#КонецЕсли
