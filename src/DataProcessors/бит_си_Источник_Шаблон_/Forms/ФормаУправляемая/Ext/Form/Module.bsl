////////////////////////////////////////////////////////////////////////////////
// ОБЯЗАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбязательныеПеременныеОбработкиИсточникаСправочнойИнформации




#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПЕРЕМЕННЫЕ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныеПеременныеОбработкиИсточникаСправочнойИнформации



// Перем <ИмяПеременной> [Экспорт];


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения



&НаКлиенте
// Сравнивает 2 ссылки. Структура ссылки определяется разработчиком обработки источника справочной информации.
// 
// Параметры 
// 	Ссылка1            	 -	Структура              	 Ссылка для сравнения                                             
// 	Ссылка2            	 -	Структура              	 Ссылка для сравнения                                             
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - ссылки равны; Ложь - ссылки не равны;                   
// 
Функция СсылкиРавны(Ссылка1, Ссылка2) Экспорт
	Если НЕ Ссылка1 = Ссылка2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // СсылкиРавны()

&НаКлиенте
// Заполняет дерево разделов поиска
// 
// Параметры
// 
Процедура ЗаполнитьДеревоРазделов() Экспорт
	// ЗаполнитьДеревоРазделовНаСервере();
КонецПроцедуры // ЗаполнитьДеревоРазделов()

&НаКлиенте
// Выполняет переход по переданной ссылке
// 
// Параметры 
// 	СтруктураСсылки    	 -	Структура              	 Структура ссылки, состав определяется разработчиком.              
// 
Процедура ПерейтиПоСсылке(СтруктураСсылки = Неопределено) Экспорт
	
	// Код перехода по ссылке
	// ВремТекст = ПолучитьТекстПоСсылке(СтруктураСсылки);
	// ВладелецФормы[оп_ИмяЗакладкиИсточника+"_Текст"] = ВремТекст;
КонецПроцедуры // ПерейтиПоСсылке()

&НаКлиенте
// Выполняет полнотекстовый поиск для текущего источника справочной информации.
// 
// Параметры 
// 	СтрокаПоиска       	 -	Строка                 	 Текст поискового запроса.	                                         
// 
Процедура ВыполнитьПоиск(СтрокаПоиска) Экспорт
	
	// Код выполнения поиска
	
	// ТекстОшибки = "";
	// КоличествоРезультатов = 0;
	// ТекстРезультата = ПолучитьТекстРезультатовПоиска(СтрокаПоиска, КоличествоРезультатов, ТекстОшибки);
	// 
	// Если НЕ ТекстОшибки = "" Тогда
	// 	Предупреждение(ТекстОшибки, 20);
	// 	Возврат;
	// КонецЕсли;
	// 
	// Если КоличествоРезультатов = 0 Тогда
	// 	ТекстРезультата = "По запросу """ + СтрокаПоиска + """ результаты не найдены.";
	// КонецЕсли;
	// 
	// ВладелецФормы[оп_ИмяЗакладкиИсточника+"_ТекстРезультатаПоиска"] = ТекстРезультата;
	// ВладелецФормы.Элементы[оп_ИмяЗакладкиИсточника+"_РезультатыПоиска"].Заголовок =
	// 	оп_ИсточникСИЗаголовок + " (" + СокрЛП(КоличествоРезультатов) + ")";
	
КонецПроцедуры // ВыполнитьПоиск()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ РАЗМЕРОМ ШРИФТА.

#Область ПроцедурыИФункцииУправленияРазмеромШрифта



&НаКлиенте
// Возвращает размер шрифта, относительно которого происходят изменения
// так же является размером шрифта по умолчанию.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Число                  	 Размер шрифта.
// 
Функция БазовыйРазмерШрифта() Экспорт
	Возврат 0;
КонецФункции // БазовыйРазмерШрифта()

&НаКлиенте
// Возвращает соответствие единиц измерения размеров шрифта и шага изменения размера.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Соответствие           	 Соответствие единиц измерения и шага размера шрифта.              
// 
Функция ПолучитьСтруктуруРазмеровИЕдиниц() Экспорт
	РазмерыИЕдиницы = Новый Соответствие();
	РазмерыИЕдиницы.Вставить("ПоУмолчанию",2);
	// РазмерыИЕдиницы.Вставить("<ед. измерения>", <шаг>);
	Возврат РазмерыИЕдиницы;
КонецФункции // ПолучитьСтруктуруРазмеровИЕдиниц()

&НаКлиенте
// Возвращает базовую доступность кнопок управления размером шрифта,
// а также верхнее и нижнее ограничение на размер шрифта.
// 
// Параметры 
// 	ОграничениеМакс    	 -	Число                  	 Верхнее ограничение размера шрифта.                               
// 	ОграничениеМин     	 -	Число                  	 Нижнее ограничение размера шрифта.                                
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - кнопки размера доступны; Ложь - не доступны.             
// 
Функция ДоступностьКнопокРазмерШрифта(ОграничениеМакс, ОграничениеМин) Экспорт
	ОграничениеМакс = 2;
	ОграничениеМин = -2;
	Возврат Истина;
КонецФункции // ДоступностьКнопокРазмерШрифта()

&НаКлиенте
// Обработчик изменения размера шрифта в форме справочной информации
// применяется если необходимо дополнить или заменить стандартную обработку.
// 
// Параметры 
// 	РазмерШрифта       	 -	Число                  	 Размер шрифта после изменения.                                    
// 	Изменение          	 -	Число                  	 Направление изменения: 1 - увеличить; 0 - не изменять; -1 -      
// 	                   	  	                       	 уменьшить.                                                       
// 	Открытие           	 -	Булево                 	 Признак открытия закладки: Истина - устанавливаем размер в момент
// 	                   	  	                       	 открытия закладки; Ложь - просто изменяем размер.                
// 	ПродолжитьОбработку	 -	Булево                 	 Признак продолжения обработки стандартным обработчиком формы     
// 	                   	  	                       	 справочной информации: Истина - продолжить обработку; Ложь - не  
// 	                   	  	                       	 продолжать.                                                      
// 
Процедура ИзменитьРазмерШрифта(РазмерШрифта, Изменение, Открытие, ПродолжитьОбработку = Истина) Экспорт
	// Код обработчика
	
	// ПродолжитьОбработку = Истина;
КонецПроцедуры // ИзменитьРазмерШрифта()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ ОБРАБОТКИ СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийФормыОбработкиСправочнойИнформации



&НаКлиенте
// Вызывается при регистрации источника с справочнике источников справочной информации.
// 
// Параметры 
// 	ИсточникСИ         	 -	СправочникСсылка.бит_си	 Источник справочной информации, связанный с закладкой            
// 	                   	  	_Источники.             	                                                                  
// 
Процедура ОбработчикСобытияРегистрацияИсточника(ИсточникСИ) Экспорт

#КонецОбласти

	#Если Клиент Тогда
		
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияРегистрацияИсточника()

&НаКлиенте
// Вызывается при открытии формы справочной информации и создании закладки текущего источника.
// 
// Параметры 
// 	ПараметрОткрытия   	 -	Произвольный           	 Дополнительный параметр, который может быть обработан в          
// 	                   	  	                       	 данной процедуре.                                                  
// 
Процедура ОбработчикСобытияПриОткрытииЗакладки(ПараметрОткрытия = Неопределено) Экспорт
	// Код обработчика
	
КонецПроцедуры // ОбработчикСобытияПриОткрытииЗакладки()

&НаКлиенте
// Вызывается при изменении видимости закладки источника в форме справочной информации.
// 
Процедура ОбработчикСобытияПриИзмененииВидимостиЗакладки() Экспорт
	#Если Клиент Тогда
	// Код обработчика
	
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияПриИзмененииВидимостиЗакладки()

&НаКлиенте
// Вызывается при переходе на закладку текущего источника.
// 
Процедура ОбработчикСобытияПриАктивизацииСтраницы() Экспорт
	// #Если Клиент Тогда
	// ДоступностьКнопокКоманднойПанели();
	// #КонецЕсли
КонецПроцедуры // ОбработчикСобытияПриАктивизацииСтраницы()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ HTML-ДОКУМЕНТА ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийПоляHtmlДокументаИсточникаСправочнойИнформации



&НаКлиенте
// Вызывается из обработчика события "ПриНажатии" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеФормы		      	 Поле HTML-документа закладки источника;                          
// 	                   	  	                       	 Значение параметра "Элемент" обработчика события
// 	                   	  	                       	 "ПриНажатии"поляHTML-документа закладки источника СИ.
// 	ДанныеСобытия      	 -	Структура              	 Структура параметров события; Значение параметра "ДанныеСобытия"
// 	                   	  	                       	 обработчика события "ПриНажатии" поля HTML-документа закладки
// 													 источника СИ.
// 	Стандартная      	 -	Булево              	 Структура параметров события; Значение параметра "СтандартнаяОбработка"
// 	Обработка          	  	                       	 обработчика события "ПриНажатии" поля HTML-документа закладки
// 													 источника СИ.
// 	ПродолжитьОбработку	 -	Булево                 	 Истина - продолжить стандартную обработку; Ложь - не продолжать.
// 
Процедура ОбработчикСобытияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка, ПродолжитьОбработку = Истина) Экспорт
	pEvtObj = ДанныеСобытия.Event;
	СтруктураСсылки = Неопределено;
	
	Если pEvtObj.returnValue = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		htmlElement = ДанныеСобытия.Event.srcElement;
		href = ПодготовитьСтроку(ДанныеСобытия.href);
		Пока НЕ (ВРег(htmlElement.tagName) = "A" ИЛИ ВРег(htmlElement.tagName) = "BODY") Цикл
			htmlElement = htmlElement.parentElement;
		КонецЦикла;
		Если НЕ ВРег(htmlElement.tagName) = "A" Тогда
			htmlElement = Неопределено;
		КонецЕсли;
	Исключение
		htmlElement = Неопределено;
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Если htmlElement = Неопределено И href = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Код обработчика
	
	Если htmlElement.protocol = "http:" Тогда
		

#КонецОбласти

		#Если НЕ ВебКлиент Тогда
		ЗапуститьПриложение(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href));
		pEvtObj.returnValue = Ложь;
		#КонецЕсли
		 
		Возврат;
		
	КонецЕсли;
	pEvtObj.returnValue = Истина;
КонецПроцедуры // ОбработчикСобытияПриНажатии()

&НаКлиенте
// Вызывается из обработчика события "ДокументСформирован" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеФормы		      	 Поле HTML-документа закладки источника; Значение параметра       
// 	                   	  	                       	 "Элемент" обработчика события "ДокументСформирован" поля         
// 	                   	  	                       	 HTML-документа закладки источника СИ.                             
// 	СтруктураСсылки    	 -	Структура              	 Структура ссылки.                                                 
// 	ДобавлятьВИсторию  	 -	Булево                 	 Истина - добавить текущую ссылку в историю; Ложь - не добавлять.  
// 
Процедура ОбработчикСобытияДокументСформирован(Элемент, СтруктураСсылки, ДобавлятьВИсторию) Экспорт
	// Код обработчика
	
	// ДоступностьКнопокКоманднойПанели();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ РЕЗУЛЬТАТОВ ПОИСКА ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийПоляРезультатовПоискаИсточникаСправочнойИнформации



&НаКлиенте
// Вызывается из обработчика события "ДокументСформирован" поля результатов поиска источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеФормы		      	 Поле результатов поиска закладки поиска источника; Значение      
// 	                   	  	                       	 параметра"Элемент" обработчика события "ДокументСформирован" поля
// 	                   	  	                       	 результатов поиска закладки поиска источника.                     
// 
Процедура ОбработчикСобытияДокументСформированРезультатаПоиска(Элемент) Экспорт
	// Код обработчика
КонецПроцедуры // ОбработчикСобытияДокументСформированРезультатаПоиска()

&НаКлиенте
// Вызывается из обработчика события "ПриНажатии" поля результатов поиска источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеФормы		      	 Поле HTML-документа закладки источника;                          
// 	                   	  	                       	 Значение параметра "Элемент" обработчика события
// 	                   	  	                       	 "ПриНажатии" поля результатов поиска источника СИ.
// 	ДанныеСобытия      	 -	Структура              	 Структура параметров события; Значение параметра "ДанныеСобытия"
// 	                   	  	                       	 обработчика события "ПриНажатии" поля результатов поиска закладки
// 													 источника СИ.
// 	Стандартная      	 -	Булево              	 Структура параметров события; Значение параметра "СтандартнаяОбработка"
// 	Обработка          	  	                       	 обработчика события "ПриНажатии" поля результатов поиска закладки
// 													 источника СИ.
// 	ПродолжитьОбработку	 -	Булево                 	 Истина - продолжить стандартную обработку; Ложь - не продолжать.
// 
Процедура ОбработчикСобытияПриНажатииРезультатаПоиска(Элемент, ДанныеСобытия, СтандартнаяОбработка, ПродолжитьОбработку = Истина) Экспорт
	СтруктураСсылки = Неопределено;
	
	Если ДанныеСобытия.Event.returnValue = Ложь Тогда
		ПродолжитьОбработку = Ложь;
		Возврат;
	КонецЕсли;
	
	Попытка
		htmlElement = ДанныеСобытия.Event.srcElement;
		href = ПодготовитьСтроку(ДанныеСобытия.href);
		Пока НЕ (ВРег(htmlElement.tagName) = "A" ИЛИ ВРег(htmlElement.tagName) = "BODY") Цикл
			htmlElement = htmlElement.parentElement;
		КонецЦикла;
		Если НЕ ВРег(htmlElement.tagName) = "A" Тогда
			htmlElement = Неопределено;
		КонецЕсли;
	Исключение
		htmlElement = Неопределено;
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Если htmlElement = Неопределено Тогда
		ПродолжитьОбработку = Ложь;
		Возврат;
	КонецЕсли;
	
	// Код обработчика
	
	Если htmlElement.protocol = "http:" Тогда
		

#КонецОбласти

		#Если НЕ ВебКлиент Тогда
		ЗапуститьПриложение(ПодготовитьСтроку(htmlElement.href));
		ДанныеСобытия.Event.returnValue = Ложь;
		#КонецЕсли
		ПродолжитьОбработку = Ложь;
		Возврат;
		
	КонецЕсли;
	ДанныеСобытия.Event.returnValue = Истина;
КонецПроцедуры // ОбработчикСобытияПриНажатииРезультатаПоиска()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КНОПОК ПАНЕЛИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиКнопокПанелиИсточникаСправочнойИнформации



&НаКлиенте
// Вызывается из обработчика команды кнопок командной панели закладки источника справочной информации.
// 
// Параметры 
// 	Команда            	 -	КомандаФормы	      	 Обрабатываемая команда.
// 	ДобавлятьВИсторию  	 -	Булево              	 Признак необходимости добавления в историю навигации
// 													 ссылки на данные закладки после обработки команды.
// 
Процедура ОбработчикСобытияНажатиеКнопкиКоманднойПанели(Команда, ДобавлятьВИсторию = Ложь) Экспорт
	Если Команда.Имя = "Команда1" Тогда
		// 
	// ИначеЕсли Кнопка.Имя = "<Имя кнопки>" Тогда
	// 	ОбработчикСобытияКнопка<ИмяКнопки>Нажатие();
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры // ОбработчикСобытияНажатиеКнопкиКоманднойПанели()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныеЭкспортируемыеПроцедурыИФункцииОбработкиИсточникаСправочнойИнформации



&НаКлиенте
// Получает массив зарегистрированных источников справочной информации, использующих обработку с указанным именем
// (для вызова на клиенте).
// 
// Параметры 
// 	ИмяОбработки      	 -	Строка                 	 Имя обработки.
// Возвращаемое значение:
// 	Возврат ...        	 -	Массив                 	 Массив ссылок на источники справочной информации.
// 
Функция ПолучитьМассивИсточников(ИмяОбработки) Экспорт
	Возврат ПолучитьМассивИсточниковНаСервере(ИмяОбработки);
КонецФункции // ПолучитьМассивИсточников()

&НаСервере
// Получает массив зарегистрированных источников справочной информации, использующих обработку с указанным именем
// (выполняется на сервере).
// 
// Параметры 
// 	ИмяОбработки      	 -	Строка                 	 Имя обработки.
// Возвращаемое значение:
// 	Возврат ...        	 -	Массив                 	 Массив ссылок на источники справочной информации.
// 
Функция ПолучитьМассивИсточниковНаСервере(ИмяОбработки)
	ВремСписокЗакладок = Новый Массив();
	Выборка = Справочники.бит_си_Источники.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВремОбработка = бит_си_ОбщегоНазначения.ПолучитьОбработкуИсточника(Выборка.Ссылка);
		Если НЕ ВремОбработка.Метаданные().Имя = ИмяОбработки Тогда
			Продолжить;
		КонецЕсли;
		ВремСписокЗакладок.Добавить(Выборка.Ссылка);
	КонецЦикла;
	ВремОбработка = ИмяОбработки;
	
	Если ВремСписокЗакладок.Количество() = 0 Тогда
		ВремСписокЗакладок.Добавить(бит_си_ОбщегоНазначения.ЗарегистрироватьОбработкуИсточника(ВремОбработка));
	КонецЕсли;
	
	Возврат ВремСписокЗакладок;
КонецФункции // ПолучитьМассивИсточниковНаСервере()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныеПроцедурыИФункцииОбработкиИсточникаСправочнойИнформации



&НаСервереБезКонтекста
// Получает 16-ричное представление числа
// Параметры 
// 	ПарамЧисло			 -	Структура				 Число для преобразования.
// 	ДляWeb				 -	Булево					 Признак преобразования в формате для web.
// 	
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка					 16-ричное представление числа.
// 
Функция HEXЧисло(ПарамЧисло, ДляWeb = Ложь)
	РезЦел = бит_си_ОбщегоНазначения.Dec2HEX(ПарамЧисло);
	Если ДляWeb Тогда
		ВремРез = "";
		Для й = 1 По СтрДлина(РезЦел) / 2 Цикл
			ВремРез = ВремРез + "%" + Сред(РезЦел, й * 2 - 1, 2);
		КонецЦикла;
		РезЦел = ВремРез;
	КонецЕсли;
	Возврат РезЦел;
КонецФункции // HEXЧисло()

&НаСервереБезКонтекста
// Преобразовывает web-строку в обычную. Преобразует коды символов в исходной строке в символы.
// 
// Параметры 
// 	Строка             	 -	Строка                 	 Исходная строка.                                                  
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 Преобразованная строка.                                           
// 
Функция ПодготовитьСтроку(Строка)
	
	Стр = Строка;
	
	ТабЗамены = Новый Соответствие();
	Для й = 1 По 64 Цикл
		ТабЗамены.Вставить(HEXЧисло(й + 53391 + ?(й <= 48, 0, 192), Истина), Символ(1039 + й));
		ТабЗамены.Вставить("&#" + Формат(1039 + й, "ЧРГ=; ЧГ=") + ";", Символ(1039 + й));
	КонецЦикла;
	
	ТабЗамены.Вставить("%D0%81","е");
	ТабЗамены.Вставить("%D1%91","е");
	
	ТабЗамены.Вставить("&#1025;","е");
	ТабЗамены.Вставить("&#1105;","е");
	
	ТабЗамены.Вставить("%20"," ");
	ТабЗамены.Вставить("""","""""");
	
	Для Каждого ТекЗамена Из ТабЗамены Цикл
		Стр = СтрЗаменить(Стр, ТекЗамена.Ключ, ТекЗамена.Значение);
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции // ПодготовитьСтроку()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийФормыИсточникаСправочнойИнформации



&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
// 
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если НЕ Параметры.Свойство("ИсточникСИ") Тогда
		Возврат;
	КонецЕсли;
	
	оп_ИмяЗакладкиИсточника			= Параметры.ИмяЗакладкиИсточника;
	оп_ИсточникСИ					= Параметры.ИсточникСИ;
	оп_ИсточникСИЗаголовок			= Параметры.ИсточникСИЗаголовок;
	
	// Тут пишем код инициализации источника справочной информации.
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы
// 
Процедура ПриОткрытии(Отказ)
	Отказ = Истина;
КонецПроцедуры // ПриОткрытии()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБЯЗАТЕЛЬНЫЙ КОД ИНИЦИАЛИЗАЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбязательныйКодИнициализацииОбработкиИсточникаСправочнойИнформации

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЙ КОД ИНИЦИАЛИЗАЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныйКодИнициализацииОбработкиИсточникаСправочнойИнформации

#КонецОбласти


