
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_ИзменениеТабЧастиДокумента;
	
	Если Не Параметры.Свойство("Команда") Тогда		
		бит_ОбщегоНазначенияКлиентСервер.СообщитьОбОтказеОткрытияОбработкиСамостоятельно(МетаданныеОбъекта.Синоним, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОтрисоватьТабличнуюЧастьРеквизитов(Параметры.ТабличнаяЧасть.Выгрузить(), Параметры.Команда, Параметры.ИмяТабличнойЧасти);
	
	СформироватьСписокАналитик(Параметры.Команда, Параметры.ИмяТабличнойЧасти);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАналитики

&НаКлиенте
Процедура АналитикиЗначениеАналитикиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Аналитики.ТекущиеДанные;
	
	ТекущиеДанные.Выполнять = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикиАналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("АналитикиАналитикаНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, СписокАналитик);
	
КонецПроцедуры

// Процедура окончание процедуры "АналитикиАналитикаНачалоВыбора".
// 
&НаКлиенте 
Процедура АналитикиАналитикаНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Аналитики.ТекущиеДанные;
	
	Если РезультатВыбора <> Неопределено Тогда
	
		ТекущиеДанные.Аналитика = РезультатВыбора.Представление;
		ТекущиеДанные.Реквизит 	= РезультатВыбора.Значение;
		ИзменениеАналитики(ТекущиеДанные.ПолучитьИдентификатор());
	
	КонецЕсли; 
	
КонецПроцедуры // АналитикиАналитикаНачалоВыбораЗавершение()

&НаКлиенте
Процедура АналитикиЗначениеАналитикиНачальноеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Аналитики.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Реквизит) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеАналитикиНачальноеВзятьТекущее(ТекущиеДанные.ЗначениеАналитикиНачальное) Тогда 
		
		ОписаниеТиповАналитики = СоответствиеАналитик[ТекущиеДанные.Реквизит];
		ТекущиеДанные.ЗначениеАналитикиНачальное = ОписаниеТиповАналитики.ПривестиЗначение(ТекущиеДанные.ЗначениеАналитикиНачальное);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАналитикиНачальное) Тогда 
		ТекущиеДанные.ЗначениеАналитикиНачальное = СпособыИзмененияТабЧастиВсеЗначения();
	КонецЕсли; 
	
	ТекущиеДанные.Выполнять = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикиЗначениеАналитикиНачальноеОчистка(Элемент, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Аналитики.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные.ЗначениеАналитикиНачальное = СпособыИзмененияТабЧастиВсеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИнвертироватьФлажки(Команда)
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(РеквизитыТабличнойЧасти, "Выполнять", 2);	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(РеквизитыТабличнойЧасти, "Выполнять", 0);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(РеквизитыТабличнойЧасти, "Выполнять", 1);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТЧДокумента(Команда)
	
	ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
	ВыполнитьПерезаполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТЧДокументаИЗакрыть(Команда)
	
	ЭтаФорма.ЗакрыватьПриВыборе = Истина;
	ВыполнитьПерезаполнение();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьПерезаполнение()

	РезСтруктура = ПерезаполнитьТЧДокументаСервер();
	ОповеститьОВыборе(РезСтруктура);

КонецПроцедуры // ВыполнитьПерезаполнение() 

&НаСервере
Процедура СформироватьСписокАналитик(ИмяДокумента, ИмяТабличнойЧасти)

	Контейнер = Новый Соответствие;
	СписокАналитик = Новый СписокЗначений();
	
	Реквизиты = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	
	Для каждого Колонка Из Реквизиты Цикл
		
		Если (ВРег(ИмяДокумента) = ВРег("бит_му_ПринятиеКУчетуНМА")
			И ВРег(Колонка.Имя) = ВРег("НематериальныйАктив"))
			ИЛИ (ВРег(ИмяДокумента) = ВРег("бит_му_ПринятиеКУчетуОС")
			И ВРег(Колонка.Имя) = ВРег("ОсновноеСредство")) Тогда
			Продолжить;
		КонецЕсли; 
		
		СписокАналитик.Добавить(Колонка.Имя, Реквизиты[Колонка.Имя].Синоним);
		Контейнер.Вставить(Колонка.Имя, Колонка.Тип);
	КонецЦикла; 
	СоответствиеАналитик = Новый ФиксированноеСоответствие(Контейнер);
	
КонецПроцедуры // СформироватьСписокАналитик()

&НаСервере
Процедура ИзменениеАналитики(ИдСтроки)
	
	ТекущаяСтрока = Объект.Аналитики.НайтиПоИдентификатору(ИдСтроки);
	ДозаполнитьСтрокуАналитик(ТекущаяСтрока);
	
КонецПроцедуры // ИзменениеАналитики()

&НаСервере
Процедура ДозаполнитьСтрокуАналитик(ТекущаяСтрока)

	Если ТекущаяСтрока <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Реквизит) Тогда
			
			ОписаниеТиповАналитики = СоответствиеАналитик[ТекущаяСтрока.Реквизит];
			ТекущаяСтрока.ЗначениеАналитики = ОписаниеТиповАналитики.ПривестиЗначение(ТекущаяСтрока.ЗначениеАналитики);
			ТекущаяСтрока.ЗначениеАналитикиНачальное = Перечисления.бит_СпособыИзмененияНачальногоЗначенияТабличнойЧасти.ВсеЗначения;
			
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры // ДозаполнитьСтрокуАналитик()

&НаСервере
Функция ПерезаполнитьТЧДокументаСервер()

	ТаблицаДляПередачи = Новый ТаблицаЗначений;
	ТаблицаДляПередачи.Колонки.Добавить("ИД");
	ТаблицаДляПередачи.Колонки.Добавить("Реквизит");
	ТаблицаДляПередачи.Колонки.Добавить("Значение");
	
	Парам = Новый Структура("Выполнять", Истина); 
	МассивСтрок = Объект.Аналитики.НайтиСтроки(Парам);
	
	Для каждого Строка Из МассивСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Реквизит) Тогда
			Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаРеквизитов Из РеквизитыТабличнойЧасти Цикл
			
			Если НЕ СтрокаРеквизитов.Выполнять Тогда
				Продолжить;
			КонецЕсли; 
			
			Если Строка.ЗначениеАналитикиНачальное = Перечисления.бит_СпособыИзмененияНачальногоЗначенияТабличнойЧасти.ВсеЗначения Тогда
				
				ЗаполнитьТаблицуДляПередачи(ТаблицаДляПередачи, СтрокаРеквизитов, Строка);
				
			ИначеЕсли Строка.ЗначениеАналитикиНачальное = Перечисления.бит_СпособыИзмененияНачальногоЗначенияТабличнойЧасти.ПустоеЗначение
				И НЕ ЗначениеЗаполнено(СтрокаРеквизитов[Строка.Реквизит]) Тогда 
				
				ЗаполнитьТаблицуДляПередачи(ТаблицаДляПередачи, СтрокаРеквизитов, Строка);
				
			ИначеЕсли СтрокаРеквизитов[Строка.Реквизит] = Строка.ЗначениеАналитикиНачальное Тогда 
				
				ЗаполнитьТаблицуДляПередачи(ТаблицаДляПередачи, СтрокаРеквизитов, Строка);
				
			КонецЕсли; 
			
		КонецЦикла; 
	
	КонецЦикла; 
	
	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("ИмяКласса", "РезультатИзменения");
	ХранилищеДанные = бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаДляПередачи);
	РезСтруктура.Вставить("ХранилищеДанные", ХранилищеДанные);
	
	Возврат РезСтруктура;
	
КонецФункции // ПерезаполнитьТЧДокументаСервер()

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуДляПередачи(ТаблицаДляПередачи, СтрокаРеквизитов, Строка)

	СтрокаРеквизитов[Строка.Реквизит] = Строка.ЗначениеАналитики;
	
	СтрокаТЗ = ТаблицаДляПередачи.Добавить();
	СтрокаТЗ.Реквизит 	= Строка.Реквизит;
	СтрокаТЗ.ИД 		= СтрокаРеквизитов.ПолучитьИдентификатор();
	СтрокаТЗ.Значение 	= Строка.ЗначениеАналитики;

КонецПроцедуры 

&НаСервере
Процедура ОтрисоватьТабличнуюЧастьРеквизитов(ТабличнаяЧастьДокумента, ИмяДокумента, ИмяТабличнойЧасти)

	РеквизитыТабличнойЧасти.Очистить();
	
	Реквизиты = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	
	Для каждого Элемент Из Реквизиты Цикл
		Имя      = Элемент.Имя;
		Тип      = Элемент.Тип;
		Путь     = "РеквизитыТабличнойЧасти";
		Шапка    = Элемент.Синоним;
		Реквизит = Новый РеквизитФормы(Имя,Тип,Путь,Шапка);
		
		ДобавляемыеРеквизиты = Новый Массив();
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ИмяЭлемента = "РеквизитыТабличнойЧасти" + Элемент.Имя;
		
		ТекКолонка = Элементы.Добавить("РеквизитыТабличнойЧасти" + Элемент.Имя, Тип("ПолеФормы"), Элементы.РеквизитыТабличнойЧасти); 
		ТекКолонка.ПутьКДанным = "РеквизитыТабличнойЧасти." + Элемент.Имя;
		ТекКолонка.Вид		   = ВидПоляФормы.ПолеВвода;
		ТекКолонка.Заголовок   = Элемент.Синоним;

		ТекКолонка.ТолькоПросмотр = Истина;
		
	КонецЦикла; 	

	РеквизитыТабличнойЧасти.Загрузить(ТабличнаяЧастьДокумента);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеАналитикиНачальноеВзятьТекущее(ЗначениеАналитикиНачальное)

 	Возврат ЗначениеАналитикиНачальное = Перечисления.бит_СпособыИзмененияНачальногоЗначенияТабличнойЧасти.ТекущееЗначение;
	
КонецФункции

&НаСервереБезКонтекста
Функция СпособыИзмененияТабЧастиВсеЗначения()

 	Возврат Перечисления.бит_СпособыИзмененияНачальногоЗначенияТабличнойЧасти.ВсеЗначения;
	
КонецФункции

#КонецОбласти
