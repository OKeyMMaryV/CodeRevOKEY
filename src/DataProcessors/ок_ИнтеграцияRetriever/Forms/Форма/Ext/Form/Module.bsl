
#Область Команды

&НаСервере
Процедура КомандаОбновитьНаСервере()
	
	Соединение = Новый HTTPСоединение(Объект.Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	
	СоответствиеДоговоров = ПолучитьСоответствиеДоговоров(Соединение, Заголовки);
	ЗаполнитьИнтеграционнуюТаблицу(СоответствиеДоговоров, Соединение, Заголовки);
	
	ДеревоЗначений = ДанныеФормыВЗначение(ДеревоИнтеграционнойТаблицы, Тип("ДеревоЗначений"));
	ДеревоЗначений.Строки.Сортировать("Период");
	ЗначениеВДанныеФормы(ДеревоЗначений, ДеревоИнтеграционнойТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	Объект.Токен = "";
	
	КомандаОбновитьНаСервере(); 
	
	Объект.Токен = "";
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

&НаСервере
Процедура КомандаСоздатьКАНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьКА(Команда)
	
	КомандаСоздатьКАНаСервере();
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ПараметрыКонтрагента = Новый Структура();
		ПараметрыКонтрагента.Вставить("ИНН", ТекущиеДанные.ИНН);
		ПараметрыКонтрагента.Вставить("НаименованиеПолное", ТекущиеДанные.НаименованиеПолное);
		ПараметрыКонтрагента.Вставить("Комментарий", ТекущиеДанные.НаименованиеПолное);
		
		СсылкаНаКонтрагента = ДобавитьКонтрагента(ПараметрыКонтрагента);
		Если СсылкаНаКонтрагента <> Неопределено Тогда 
			ТекущиеДанные.Контрагент = СсылкаНаКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрикрепитьСсылкуККА(Команда)
		
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
			Сообщить("Контрагент не заполнен, прикрепить ссылку невозможно.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
			Сообщить("Организация не заполнена, прикрепить ссылку невозможно.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		пДоговор = ?(ЗначениеЗаполнено(ТекущиеДанные.НомерДокумента), ТекущиеДанные.Документ, ТекущиеДанные.Договор);
		
		ДоговорОрганизация = ПолучитьСвойствоОбъектаНаСервере(пДоговор, "Организация");
		Если ЗначениеЗаполнено(пДоговор) 
			И ДоговорОрганизация <> ТекущиеДанные.Организация Тогда
			Сообщить("Организация """ + ДоговорОрганизация + """ в договоре """ + пДоговор + """ не соответствует Организации """ + ТекущиеДанные.Организация + """ в данной строке, прикрепить ссылку невозможно.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДоговорВладелец = ПолучитьСвойствоОбъектаНаСервере(пДоговор, "Владелец");
		Если ЗначениеЗаполнено(пДоговор) 
			И ДоговорВладелец <> ТекущиеДанные.Контрагент Тогда
			Сообщить("Контрагент """ + ДоговорВладелец + """ в договоре """ + пДоговор + """ не соответствует Контрагенту """ + ТекущиеДанные.Контрагент + """ в данной строке, прикрепить ссылку невозможно.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДобавитьСсылкуRetrieverНаОбъект(ТекущиеДанные.Контрагент, пДоговор, ТекущиеДанные.Ссылка, ТекущиеДанные.Период, ТекущиеДанные.ПредметДоговора);
		ДобавитьИдентификаторRetrieverНаОбъект(ТекущиеДанные.Контрагент, ТекущиеДанные.ИдентификаторКонтрагент);
		ДобавитьИдентификаторRetrieverНаОбъект(ТекущиеДанные.Организация, ТекущиеДанные.НаименованиеОрганизации);
		
	КонецЕсли;
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

&НаСервере
Процедура КомандаСоздатьДоговорНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДоговор(Команда)
	
	КомандаСоздатьДоговорНаСервере();
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ЭтоДС = ЗначениеЗаполнено(ТекущиеДанные.НомерДокумента);
		
		ПараметрыКонтрагента = Новый Структура();
		ПараметрыКонтрагента.Вставить("Дата", 				?(ЭтоДС, ТекущиеДанные.ДатаДокумента, ТекущиеДанные.ДатаДоговора));
		ПараметрыКонтрагента.Вставить("Номер", 				?(ЭтоДС, ТекущиеДанные.НомерДокумента, ТекущиеДанные.НомерДоговора));
		ПараметрыКонтрагента.Вставить("Организация", 		ТекущиеДанные.Организация);
		ПараметрыКонтрагента.Вставить("Владелец", 			ТекущиеДанные.Контрагент);
		ПараметрыКонтрагента.Вставить("бит_СуммаДоговора", 	ТекущиеДанные.СуммаДоговора);
		ПараметрыКонтрагента.Вставить("Родитель", 			ТекущиеДанные.ГруппаДоговоров);
		ПараметрыКонтрагента.Вставить("Объект", 			ТекущиеДанные.ОбъектДоговора);
		ПараметрыКонтрагента.Вставить("Комментарий", 		?(ЭтоДС, ТекущиеДанные.НомерДокумента + " " + ТекущиеДанные.ДатаДокумента, ТекущиеДанные.НомерДоговора + " " + ТекущиеДанные.ДатаДоговора));
		
		СсылкаНаДоговор = ДобавитьДоговор(ПараметрыКонтрагента);
		Если СсылкаНаДоговор <> Неопределено Тогда 
			
			Если ЭтоДС Тогда
				ТекущиеДанные.Документ = СсылкаНаДоговор;
			Иначе
				ТекущиеДанные.Договор = СсылкаНаДоговор;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрикрепитьСсылкуКДоговору(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		пДоговор = ?(ЗначениеЗаполнено(ТекущиеДанные.НомерДокумента), ТекущиеДанные.Документ, ТекущиеДанные.Договор);
		
		Если НЕ ЗначениеЗаполнено(пДоговор) Тогда
			Сообщить("Договор не заполнен, прикрепить ссылку невозможно.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
			Сообщить("Контрагент не заполнен, прикрепить ссылку невозможно.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
			Сообщить("Организация не заполнена, прикрепить ссылку невозможно.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДоговорОрганизация = ПолучитьСвойствоОбъектаНаСервере(пДоговор, "Организация");
		Если ДоговорОрганизация <> ТекущиеДанные.Организация Тогда
			Сообщить("Организация """ + ДоговорОрганизация + """ в договоре """ + пДоговор + """ не соответствует Организации """ + ТекущиеДанные.Организация + """ в данной строке, прикрепить ссылку невозможно.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДоговорВладелец = ПолучитьСвойствоОбъектаНаСервере(пДоговор, "Владелец");
		Если ДоговорВладелец <> ТекущиеДанные.Контрагент Тогда
			Сообщить("Контрагент """ + ДоговорВладелец + """ в договоре """ + пДоговор + """ не соответствует Контрагенту """ + ТекущиеДанные.Контрагент + """ в данной строке, прикрепить ссылку невозможно.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДобавитьСсылкуRetrieverНаОбъект(пДоговор, ТекущиеДанные.Контрагент, ТекущиеДанные.Ссылка, ТекущиеДанные.Период, ТекущиеДанные.ПредметДоговора);
		ДобавитьСсылкуRetrieverНаОбъект(ТекущиеДанные.Контрагент, пДоговор, ТекущиеДанные.Ссылка, ТекущиеДанные.Период, ТекущиеДанные.ПредметДоговора);
		ДобавитьИдентификаторRetrieverНаОбъект(пДоговор, ТекущиеДанные.ИдентификаторДокумента);
		ДобавитьИдентификаторRetrieverНаОбъект(ТекущиеДанные.Контрагент, ТекущиеДанные.ИдентификаторКонтрагент);
		ДобавитьИдентификаторRetrieverНаОбъект(ТекущиеДанные.Организация, ТекущиеДанные.НаименованиеОрганизации);
		
	КонецЕсли;
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПометитьСтрокуКакОбработанную(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ДобавитьИдентификаторRetrieverНаОбъект(ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"), ТекущиеДанные.ИдентификаторДокумента);
		
	КонецЕсли;
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Группа 					= "ПараметрыДляИмпортаRetriver";
	ЗапросПоУмолчанию 		= "search=SearchMixed&query[6]=2018-07-11&start=0&rows=100&readable=1&format=json";
	СерверПоУмолчанию 		= "contracts.okmarket.ru/rt";
	КоличествоЗаписейОтбор 	= 20;
	
	Объект.Логин 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных(Группа, "Логин");
	Объект.Пароль 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных(Группа, "Пароль");
	Объект.Сервер 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных(Группа, "Сервер", СерверПоУмолчанию);
	Объект.ЗапросRetriver	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных(Группа, "ЗапросНаПолучениеАктуальныхДоговоров", ЗапросПоУмолчанию);
	
	КоманднаяПанель.ПодчиненныеЭлементы.ФормаКомандаОтбор.Пометка = Истина;
	СтатусДоговора = "Действует";
	
	ТипыДокументов.Добавить("1",	"1. Некоммерческий блок. Основной договор",	Истина);
	ТипыДокументов.Добавить("8",	"2. Некоммерческий блок. ДС/ПР",			Истина);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-30 (#4173)
	//ТипыДокументов.Добавить("6",	"3. Поставка КД (импорт). Договор",			Истина);
	//ТипыДокументов.Добавить("10",	"4. Поставка КД (импорт). ДС/ПР",			Ложь);
	ТипыДокументов.Добавить("5",	"3. Поставка КД. Договор",					Истина);
	ТипыДокументов.Добавить("11",	"4. Поставка КД. ДС/ПР",					Истина);
	ТипыДокументов.Добавить("6",	"5. Поставка КД (импорт). Договор",			Истина);
	ТипыДокументов.Добавить("10",	"6. Поставка КД (импорт). ДС/ПР",			Ложь);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-30 (#4173)
	
	ОбновитьОтображениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыОрганизацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	ДеревоИнтеграционнойТаблицыОрганизацияПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ДеревоИнтеграционнойТаблицыОрганизацияПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = ДеревоИнтеграционнойТаблицы.НайтиПоИдентификатору(Идентификатор);
	Если Не ТекущиеДанные = Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
		
		пДоговор = ?(ЗначениеЗаполнено(ТекущиеДанные.НомерДокумента), ТекущиеДанные.Документ, ТекущиеДанные.Договор);
		
		Если ЗначениеЗаполнено(пДоговор) 
			И пДоговор.Организация <> ТекущиеДанные.Организация Тогда
			
			пДоговор = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено 
		//СофтЛаб Начало 2019-05-21 #3350
		//И ЗначениеЗаполнено(ТекущиеДанные.ИНН) Тогда
		И (ЗначениеЗаполнено(ТекущиеДанные.ИНН)
			ИЛИ ЗначениеЗаполнено(ТекущиеДанные.НаименованиеПолное))
		Тогда
		//СофтЛаб Конец 2019-05-21 #3350
		
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора",, Элемент);

		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ИНН");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ТекущиеДанные.ИНН;
		//СофтЛаб Начало 2019-05-21 #3350
		//ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.Использование 	= ЗначениеЗаполнено(ТекущиеДанные.ИНН);
		//СофтЛаб Конец 2019-05-21 #3350
		
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	ДеревоИнтеграционнойТаблицыКонтрагентПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ДеревоИнтеграционнойТаблицыКонтрагентПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = ДеревоИнтеграционнойТаблицы.НайтиПоИдентификатору(Идентификатор);
	Если Не ТекущиеДанные = Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		
		//ТекущиеДанные.ИНН = ТекущиеДанные.Контрагент.ИНН;
		//ТекущиеДанные.НаименованиеПолное = ТекущиеДанные.Контрагент.НаименованиеПолное;
		пДоговор = ?(ЗначениеЗаполнено(ТекущиеДанные.НомерДокумента), ТекущиеДанные.Документ, ТекущиеДанные.Договор);
		
		Если ЗначениеЗаполнено(пДоговор)
			И пДоговор.Владелец <> ТекущиеДанные.Контрагент Тогда
			
			пДоговор = Неопределено;
			//ТекущиеДанные.ДополнительноеСоглашение = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыКонтрагентНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.ИНН) Тогда
		
		СтандартнаяОбработка = Ложь;

		МассивКонтрагентов = ПолучитьКонтрагентовПоИНН(ТекущиеДанные.ИНН);
		Элемент.СписокВыбора.ЗагрузитьЗначения(МассивКонтрагентов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",, Элемент);

		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ТекущиеДанные.Организация;
		ЭлементОтбора.Использование 	= ЗначениеЗаполнено(ТекущиеДанные.Организация);
		
		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ТекущиеДанные.Контрагент;
		ЭлементОтбора.Использование 	= ЗначениеЗаполнено(ТекущиеДанные.Контрагент);
		
		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Родитель");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ТекущиеДанные.ГруппаДоговоров;
		ЭлементОтбора.Использование 	= ЗначениеЗаполнено(ТекущиеДанные.ГруппаДоговоров);
		
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыДоговорПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	ДеревоИнтеграционнойТаблицыДоговорПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ДеревоИнтеграционнойТаблицыДоговорПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = ДеревоИнтеграционнойТаблицы.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	пДоговор = ?(ЗначениеЗаполнено(ТекущиеДанные.НомерДокумента), ТекущиеДанные.Документ, ТекущиеДанные.Договор);
	Если ЗначениеЗаполнено(пДоговор)
		И (пДоговор.Организация <> ТекущиеДанные.Организация
			ИЛИ пДоговор.Владелец <> ТекущиеДанные.Контрагент) Тогда
		
		Если пДоговор.Организация <> ТекущиеДанные.Организация Тогда
			Сообщить("Организация """ + пДоговор.Организация + """ в договоре """ + пДоговор + """ не соответствует Организации """ + ТекущиеДанные.Организация + """ в данной строке.", СтатусСообщения.Важное);
		КонецЕсли;
		
		Если пДоговор.Владелец <> ТекущиеДанные.Контрагент Тогда
			Сообщить("Контрагент """ + пДоговор.Владелец + """ в договоре """ + пДоговор + """ не соответствует Контрагенту """ + ТекущиеДанные.Контрагент + """ в данной строке.", СтатусСообщения.Важное);
		КонецЕсли;
		
		пДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
		//ТекущиеДанные.ДатаДоговора = пДоговор.Дата;
		//ТекущиеДанные.НомерДоговора = пДоговор.Номер;
		
	Иначе
		
		ТекущиеДанные.ГруппаДоговоров = пДоговор.Родитель;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыДополнительноеСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",, Элемент);

		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ТекущиеДанные.Организация;
		ЭлементОтбора.Использование 	= ЗначениеЗаполнено(ТекущиеДанные.Организация);
		
		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ТекущиеДанные.Контрагент;
		ЭлементОтбора.Использование 	= ЗначениеЗаполнено(ТекущиеДанные.Контрагент);
		
		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Родитель");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ТекущиеДанные.ГруппаДоговоров;
		ЭлементОтбора.Использование 	= ЗначениеЗаполнено(ТекущиеДанные.ГруппаДоговоров);
		
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыДополнительноеСоглашениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	ДеревоИнтеграционнойТаблицыДополнительноеСоглашениеПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ДеревоИнтеграционнойТаблицыДополнительноеСоглашениеПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = ДеревоИнтеграционнойТаблицы.НайтиПоИдентификатору(Идентификатор);
	Если Не ТекущиеДанные = Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.ДополнительноеСоглашение) Тогда
		
		ТекущиеДанные.ДатаДополнительногоСоглашения = ТекущиеДанные.ДополнительноеСоглашение.Дата;
		ТекущиеДанные.НомерДополнительногоСоглашения = ТекущиеДанные.ДополнительноеСоглашение.Номер;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыГруппаДоговоровНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбораГруппы",, Элемент);

		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ТекущиеДанные.Контрагент;
		ЭлементОтбора.Использование 	= ЗначениеЗаполнено(ТекущиеДанные.Контрагент);
		
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыГруппаДоговоровПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
	ДеревоИнтеграционнойТаблицыГруппаДоговоровПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ДеревоИнтеграционнойТаблицыГруппаДоговоровПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = ДеревоИнтеграционнойТаблицы.НайтиПоИдентификатору(Идентификатор);
	Если Не ТекущиеДанные = Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.ГруппаДоговоров) Тогда
		
		пДоговор = ?(ЗначениеЗаполнено(ТекущиеДанные.НомерДокумента), ТекущиеДанные.Документ, ТекущиеДанные.Договор);
		
		Если ЗначениеЗаполнено(пДоговор)
			И пДоговор.Родитель <> ТекущиеДанные.ГруппаДоговоров Тогда
			
			пДоговор = Неопределено;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДополнительноеСоглашение)
			И ТекущиеДанные.ДополнительноеСоглашение.Родитель <> ТекущиеДанные.ГруппаДоговоров Тогда
			
			ТекущиеДанные.ДополнительноеСоглашение = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаПериода(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.КомандаНастройкаПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачалоПериода = РезультатВыбора.НачалоПериода;
	КонецПериода = РезультатВыбора.КонецПериода;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеФормы()
	
	ОбновитьОтображениеФормыНаСервере();

	Элементы.ГруппаОтбор.Видимость = КоманднаяПанель.ПодчиненныеЭлементы.ФормаКомандаОтбор.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеФормыНаСервере()
	
	Для Каждого ЭлементДерева Из ДеревоИнтеграционнойТаблицы.ПолучитьЭлементы() Цикл 
		
		ЭлементДерева.ДоговорНайденПоИД		= ПолучитьОбъектПоИдентификатору(ЭлементДерева.ИдентификаторДокумента, Тип("СправочникСсылка.ДоговорыКонтрагентов")) <> Неопределено;
		ЭлементДерева.КонтрагентНайденПоИД 	= ПолучитьОбъектПоИдентификатору(ЭлементДерева.ИдентификаторКонтрагент, Тип("СправочникСсылка.Контрагенты")) <> Неопределено;
		ЭлементДерева.ОрганизацияНайденаПоИД= ПолучитьОбъектПоИдентификатору(ЭлементДерева.НаименованиеОрганизации, Тип("СправочникСсылка.Организации")) <> Неопределено;
		
		ЭлементДерева.ДоговорПрикреплен		= ПолучитьОбъектПоСсылкеRetriever(ЭлементДерева.Ссылка, Тип("СправочникСсылка.ДоговорыКонтрагентов")) <> Неопределено;
		ЭлементДерева.КонтрагентПрикреплен	= ПолучитьОбъектПоСсылкеRetriever(ЭлементДерева.Ссылка, Тип("СправочникСсылка.Контрагенты")) <> Неопределено;
		
		ЭлементДерева.ДобавленаВСистему 	= ЭлементДерева.ДоговорПрикреплен ИЛИ ЭлементДерева.КонтрагентПрикреплен;
		
		ЭлементДерева.КоличествоКонтрагентовПоИНН = ПолучитьКоличествоКонтрагентовПоИНН(ЭлементДерева.ИНН);
		
	КонецЦикла;
	
	Для Каждого ЭлементУО Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		
		Для Каждого ЭлементОтбораУО Из ЭлементУО.Отбор.Элементы Цикл
		
			Если ЭлементОтбораУО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоИнтеграционнойТаблицы.ДобавленаВСистему") Тогда
				
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", НЕ ФлагТолькоНовыеЗаписи);
				Возврат;
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектПоИдентификатору(ИдентификаторRetriever, ТипОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ок_ИдентификаторыRetriever.Объект КАК Объект,
		|	ок_ИдентификаторыRetriever.ИдентификаторRetriever КАК ИдентификаторRetriever
		|ИЗ
		|	РегистрСведений.ок_ИдентификаторыRetriever КАК ок_ИдентификаторыRetriever
		|ГДЕ
		|	ок_ИдентификаторыRetriever.ИдентификаторRetriever = &ИдентификаторRetriever
		|	И ТИПЗНАЧЕНИЯ(ок_ИдентификаторыRetriever.Объект) = &ТипОбъекта";
	
	Запрос.УстановитьПараметр("ИдентификаторRetriever", ИдентификаторRetriever);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Объект;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьОбъектПоСсылкеRetriever(СсылкаRetriever, ТипОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ок_СсылкиRetriever.Объект КАК Объект,
		|	ок_СсылкиRetriever.СсылкаRetriever КАК СсылкаRetriever,
		|	ок_СсылкиRetriever.СвязанныйОбъект КАК СвязанныйОбъект
		|ИЗ
		|	РегистрСведений.ок_СсылкиRetriever КАК ок_СсылкиRetriever
		|ГДЕ
		|	ок_СсылкиRetriever.СсылкаRetriever = &СсылкаRetriever
		|	И ТИПЗНАЧЕНИЯ(ок_СсылкиRetriever.Объект) = &ТипОбъекта";
	
	Запрос.УстановитьПараметр("СсылкаRetriever", СсылкаRetriever);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Объект;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПериодДатаОкончанияПриИзменении(Элемент)
	
	Если КонецПериода = НачалоДня(КонецПериода) Тогда
		
		КонецПериода = КонецДня(КонецПериода);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПреобразованиеДанных

&НаСервере
Функция КонтрагентПоИНН(Значение, Массив = Неопределено)

	Результат = Справочники.Контрагенты.ПустаяСсылка();
	Массив = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИНН", Значение);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	Если ТаблицаРезультата.Количество() = 1 Тогда
		Результат = ТаблицаРезультата[0].Контрагент;
	Иначе
		Массив = ТаблицаРезультата.ВыгрузитьКолонку(0);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // КонтрагентПоИНН()

&НаСервере
Функция ОрганизацияПоНаименованию(Значение)

	Результат = Справочники.Организации.ПустаяСсылка();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование = &НаименованиеПолное";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НаименованиеПолное", Значение);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.Ссылка;
	
	Возврат Результат;

КонецФункции // ОрганизацияПоНаименованию()

&НаСервере
Функция ДоговорПоОрганизацииКонтрагентуНомеруИДате(ПараметрыПоиска)

	Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Номер = &Номер
	|	И ДоговорыКонтрагентов.Дата = &Дата";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса Из ОписаниеПараметровЗапроса Цикл
		ИмяПараметра = ОписаниеПараметраЗапроса.Имя;
		Если ПараметрыПоиска.Свойство(ИмяПараметра) Тогда
			Запрос.Параметры.Вставить(ИмяПараметра, ПараметрыПоиска[ИмяПараметра]);
		КонецЕсли;
	КонецЦикла;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.Ссылка;
	
	Возврат Результат;
	
КонецФункции // ДоговорПоОрганизацииКонтрагентуНомеруИДате()

&НаСервереБезКонтекста
Функция ПолучитьСвойствоОбъектаНаСервере(Объект, Свойство)
	
	Возврат Объект[Свойство];
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоКонтрагентовПоИНН(ИНН)
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Контрагенты.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Количество;
		
	Иначе 
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентовПоИНН(ИНН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Массив.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОбъектДоговора(ОбъектДоговораRetriever)
	
	Если НЕ ЗначениеЗаполнено(ОбъектДоговораRetriever) Тогда
		
		Возврат ПолучитьОбъектДоговора("999");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыСтроительства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
		|ГДЕ
		|	НЕ ОбъектыСтроительства.ПометкаУдаления
		|	И ОбъектыСтроительства.Наименование ПОДОБНО ""%" + ОбъектДоговораRetriever + "%""";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	ИначеЕсли ОбъектДоговораRetriever <> "999" Тогда
		
		Возврат ПолучитьОбъектДоговора("999");
		
	Иначе
		
		Возврат Справочники.ОбъектыСтроительства.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеДанных

&НаКлиенте
Функция ДобавитьКонтрагента(ПараметрыКонтрагента)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", 				ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ИНН", 					ПараметрыКонтрагента.ИНН);
	ПараметрыФормы.Вставить("Наименование", 		ПараметрыКонтрагента.НаименованиеПолное);
	ПараметрыФормы.Вставить("НаименованиеПолное", 	ПараметрыКонтрагента.НаименованиеПолное);
	ПараметрыФормы.Вставить("Комментарий", 			ПараметрыКонтрагента.Комментарий);
	
	Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(Форма.Объект, ПараметрыФормы);
	
	//Форма.Элементы.ИНН.Доступность = Ложь;
	
	Форма.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		СсылкаИНН = ПолучитьСвойствоОбъектаНаСервере(Форма.Объект.Ссылка, "ИНН");
		Если СсылкаИНН <> ПараметрыКонтрагента.ИНН Тогда
			
			Сообщить("ИНН """ + СсылкаИНН + """ Созданного контрагента """ + Форма.Объект.Ссылка + """ отличается от ИНН """ + ПараметрыКонтрагента.ИНН + """ в ТЧ. Ссылка не заполнена.", СтатусСообщения.Важное);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Возврат Форма.Объект.Ссылка;
		
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции // ДобавитьКонтрагента()

&НаКлиенте
Функция ДобавитьДоговор(ПараметрыКонтрагента)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", 				ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	ПараметрыФормы.Вставить("Дата", 				ПараметрыКонтрагента.Дата);
	ПараметрыФормы.Вставить("Номер", 				ПараметрыКонтрагента.Номер);
	ПараметрыФормы.Вставить("Организация", 			ПараметрыКонтрагента.Организация);
	ПараметрыФормы.Вставить("Владелец", 			ПараметрыКонтрагента.Владелец);
	ПараметрыФормы.Вставить("бит_СуммаДоговора", 	ПараметрыКонтрагента.бит_СуммаДоговора);
	ПараметрыФормы.Вставить("Родитель", 			ПараметрыКонтрагента.Родитель);
	ПараметрыФормы.Вставить("Объект", 				ПараметрыКонтрагента.Объект);
	ПараметрыФормы.Вставить("Комментарий", 			ПараметрыКонтрагента.Комментарий);
	
	Форма = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(Форма.Объект, ПараметрыФормы);
	Форма.СформироватьНаименованиеДоговора();
	
	//Форма.Элементы.Номер.Доступность = Ложь;
	
	Форма.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		СсылкаНомер = ПолучитьСвойствоОбъектаНаСервере(Форма.Объект.Ссылка, "Номер");
		Если СсылкаНомер <> ПараметрыКонтрагента.Номер Тогда
			
			Сообщить("Номер """ + СсылкаНомер + """ созданного договора """ + Форма.Объект.Ссылка + """ отличается от номера """ + ПараметрыКонтрагента.Номер + """ в ТЧ. Ссылка не заполнена.", СтатусСообщения.Важное);
			Возврат Неопределено;
			
		КонецЕсли;
		
		Возврат Форма.Объект.Ссылка;
		
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции // ДобавитьКонтрагента()

&НаСервере
Процедура ДобавитьСсылкуRetrieverНаОбъект(Объект, СвязанныйОбъект, СсылкаRetriever, ДатаСозданияДокумента, ПредметДоговора)
	
	Попытка 
		
		НаборЗаписей = РегистрыСведений.ок_СсылкиRetriever.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаRetriever.Установить(СсылкаRetriever);
		НаборЗаписей.Отбор.Объект.Установить(Объект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			Сообщить("По данной ссылке Retriever """ + СсылкаRetriever + """ уже существует объект """ + НаборЗаписей[0].Объект + """, прикрепить ссылку невозможно.", СтатусСообщения.Важное); 
			
		Иначе
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект 					= Объект;
			НоваяЗапись.СвязанныйОбъект 		= СвязанныйОбъект;
			НоваяЗапись.СсылкаRetriever 		= СсылкаRetriever;
			НоваяЗапись.ДатаСозданияДокумента 	= ДатаСозданияДокумента;
			НоваяЗапись.ПредметДоговора 		= ПредметДоговора;
			НаборЗаписей.Записать();
			
			Если ЗначениеЗаполнено(СвязанныйОбъект) Тогда
				
				НаборЗаписей = РегистрыСведений.ок_СсылкиRetriever.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СсылкаRetriever.Установить(СсылкаRetriever);
				НаборЗаписей.Отбор.Объект.Установить(СвязанныйОбъект);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					
					НоваяЗапись = НаборЗаписей[0];
					НоваяЗапись.Объект 					= СвязанныйОбъект;
					НоваяЗапись.СвязанныйОбъект 		= Объект;
					НоваяЗапись.СсылкаRetriever 		= СсылкаRetriever;
					НоваяЗапись.ДатаСозданияДокумента 	= ДатаСозданияДокумента;
					НоваяЗапись.ПредметДоговора 		= ПредметДоговора;
					НаборЗаписей.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		Сообщить("При попытке прикрепить ссылку Retriever """ + СсылкаRetriever + """ к объекту """ + Объект + """ произошла ошибка." + Символы.ПС + ОписаниеОшибки() , СтатусСообщения.Важное); 
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИдентификаторRetrieverНаОбъект(Объект, ИдентификаторRetriever)
	
	Попытка 
		
		НаборЗаписей = РегистрыСведений.ок_ИдентификаторыRetriever.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторRetriever.Установить(ИдентификаторRetriever);
		НаборЗаписей.Отбор.Объект.Установить(Объект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			//Сообщить("По данной ссылке Retriever """ + СсылкаRetriever + """ уже существует объект """ + НаборЗаписей[0].Объект + """, прикрепить ссылку невозможно.", СтатусСообщения.Важное); 
			
		Иначе
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект = Объект;
			НоваяЗапись.ИдентификаторRetriever = ИдентификаторRetriever;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	Исключение
		
		Сообщить("При попытке прикрепить идентификатор Retriever """ + ИдентификаторRetriever + """ к объекту """ + Объект + """ произошла ошибка." + Символы.ПС + ОписаниеОшибки() , СтатусСообщения.Важное); 
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхRetriver

&НаСервере
Функция ВыполнитьАутентификацию(Соединение, Заголовки)

	РезультатАутентификации = Ложь;
	
	Если Объект.Токен = "" Тогда
		пЗапросПолученияТокена = Новый HTTPЗапрос("/api.php?action=login&lgname=" + Объект.Логин + "&format=json", Заголовки);
					
		пИмяФайлаОтвета = ПолучитьИмяВременногоФайла("json");
		
		Результат = ОтправитьДляОбработкиНаСервере(Соединение, пЗапросПолученияТокена, пИмяФайлаОтвета, "Авторизация (1)");
		Если Результат = Неопределено Тогда
			УдалитьФайлы(пИмяФайлаОтвета);
			Возврат РезультатАутентификации;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(пИмяФайлаОтвета);
		стрРезультатПолученияТокена = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		УдалитьФайлы(пИмяФайлаОтвета);
		
		Объект.Токен = стрРезультатПолученияТокена.login.token;
		Объект.Cookie = Результат.Заголовки["Set-Cookie"];
		
	КонецЕсли;
	
	пЗапросАутентификации 	= Новый HTTPЗапрос("/api.php?action=login", Заголовки);
	ТекстТелаЗапроса 		= "lgname=" + Объект.Логин + "&lgpassword=" + Объект.Пароль + "&lgtoken=" + Объект.Токен + "&format=json";
	пЗапросАутентификации.УстановитьТелоИзСтроки(ТекстТелаЗапроса,КодировкаТекста.UTF8);
	пЗапросАутентификации.Заголовки.Вставить("Connection", 		"keep-alive");
	пЗапросАутентификации.Заголовки.Вставить("Content-Type", 	"application/x-www-form-urlencoded");	
	пЗапросАутентификации.Заголовки.Вставить("Cookie",			Объект.Cookie);

	пИмяФайлаОтвета = ПолучитьИмяВременногоФайла("json");
	
	Результат = ОтправитьДляОбработкиНаСервере(Соединение, пЗапросАутентификации, пИмяФайлаОтвета, "Авторизация (2)");
	Если Результат = Неопределено Тогда
		УдалитьФайлы(пИмяФайлаОтвета);
		Возврат РезультатАутентификации;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(пИмяФайлаОтвета);
	стрРезультатАутентификации = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(пИмяФайлаОтвета);
	
	Если ТипЗнч(стрРезультатАутентификации) = Тип("Структура")
		И стрРезультатАутентификации.Свойство("login")
		И ТипЗнч(стрРезультатАутентификации.login) = Тип("Структура")
		И стрРезультатАутентификации.login.Свойство("result")
		И НРег(стрРезультатАутентификации.login.result) = "success" Тогда
		
		РезультатАутентификации = Истина;
		
	ИначеЕсли ТипЗнч(стрРезультатАутентификации) = Тип("Структура")
		И стрРезультатАутентификации.Свойство("login")
		И ТипЗнч(стрРезультатАутентификации.login) = Тип("Структура")
		И стрРезультатАутентификации.login.Свойство("result") Тогда
		
		Сообщить("Результат авторизации: """ + стрРезультатАутентификации.login.result + """");
		
	КонецЕсли;	
		
	Возврат РезультатАутентификации;
	
КонецФункции

&НаСервере
Функция ОтправитьДляОбработкиНаСервере(Соединение, пЗапрос, пИмяФайлаОтвета, ТекстТелаЗапроса = "")
	
	Результат = Неопределено;
	
	КоличествоПопыток = 1;
	ВремяОжидания = 0;
	ТекущаяПопытка = 0;
	Пока НЕ (ТекущаяПопытка = КоличествоПопыток
		ИЛИ Результат <> Неопределено) Цикл
		
		Попытка
			
			НачалоОтсчета = ТекущаяДата();
			Пока ТекущаяДата() < (НачалоОтсчета + ВремяОжидания) Цикл
			КонецЦикла;
			
			УдалитьФайлы(пИмяФайлаОтвета);
			Результат = Соединение.ОтправитьДляОбработки(пЗапрос, пИмяФайлаОтвета);
			
			Ответ = Новый ТекстовыйДокумент();
			Ответ.Прочитать(пИмяФайлаОтвета, КодировкаТекста.UTF8);
			ТекстОтвета = Ответ.ПолучитьТекст();
	
		Исключение
			
			ТекущаяПопытка = ТекущаяПопытка + 1;
			Сообщить("Выполнение запроса """ + ТекстТелаЗапроса + """ (попытка №" + ТекущаяПопытка + ")!", СтатусСообщения.Информация);
			
		КонецПопытки;
		
	КонецЦикла;
	
	//Если ТекущаяПопытка = КоличествоПопыток Тогда
	//	Сообщить("Запрос """ + ТекстТелаЗапроса + """ не выполнен!", СтатусСообщения.Важное);
	//Иначе
	//	Сообщить("Запрос """ + ТекстТелаЗапроса + """ выполнен успешно!", СтатусСообщения.Важное);
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеДоговоров(Соединение, Заголовки)
	
	СоответствиеДоговоров = Новый Соответствие;
	
	Заголовки.Вставить("format", 		"json");
	Заголовки.Вставить("Connection", 	"keep-alive");
	Заголовки.Вставить("Content-Type", 	"application/x-www-form-urlencoded");
	
	РезультатАвторизации = ВыполнитьАутентификацию(Соединение, Заголовки);
	Если НЕ РезультатАвторизации Тогда
		Сообщить("Авторизация не выполнена!", СтатусСообщения.Важное);
		Возврат СоответствиеДоговоров;
	КонецЕсли;
	
	СгенерироватьЗапрос(НачалоПериода, КонецПериода);
	
	пЗапросАутентификации = Новый HTTPЗапрос("/api.php?action=search", Заголовки);
	ТекстТелаЗапроса = Объект.ЗапросRetriver;
	пЗапросАутентификации.УстановитьТелоИзСтроки(ТекстТелаЗапроса,КодировкаТекста.UTF8);
	
	пИмяФайлаОтвета = ПолучитьИмяВременногоФайла("json");
	Результат = ОтправитьДляОбработкиНаСервере(Соединение, пЗапросАутентификации, пИмяФайлаОтвета, Объект.ЗапросRetriver);
	Если Результат = Неопределено Тогда
		УдалитьФайлы(пИмяФайлаОтвета);
		Возврат СоответствиеДоговоров;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(пИмяФайлаОтвета);
	РезультатСоответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	Если ТипЗнч(РезультатСоответствие) = Тип("Соответствие")
		И РезультатСоответствие.Получить("results") <> Неопределено
		И РезультатСоответствие["results"].Получить("docs") <> Неопределено 
		Тогда
		
		МассивИдДоговоров = ПолучитьМассивИзСоответствия(РезультатСоответствие["results"]["docs"]);
		МассивНовыхИдДоговоров = ПолучитьМассивНовыхИдДоговоров(МассивИдДоговоров);
		
		КоличествоЗаписейВсего = МассивИдДоговоров.Количество();
		КоличествоЗаписейОбработано = КоличествоЗаписейВсего - МассивНовыхИдДоговоров.Количество();
		КоличествоЗаписейПросмотренно = 0;
		КоличествоЗаписейУдовлетворяющихОтбору = ?(ФлагТолькоНовыеЗаписи, КоличествоЗаписейОбработано, 0);
		
		МассивИДДляОбхода = ?(ФлагТолькоНовыеЗаписи, МассивНовыхИдДоговоров, МассивИдДоговоров);
		
		КоличествоЗаписейОтбор = КоличествоЗаписейВсего;
		
		Для Каждого ИдДоговора Из МассивИДДляОбхода Цикл
			
			Если СоответствиеДоговоров.Количество() = КоличествоЗаписейОтбор Тогда 
				Прервать;
			КонецЕсли;
			
			КоличествоЗаписейПросмотренно = КоличествоЗаписейПросмотренно + 1;
			
			Заголовки.Вставить("format", 		"json");
			Заголовки.Вставить("Connection", 	"keep-alive");
			Заголовки.Вставить("Content-Type", 	"application/x-www-form-urlencoded");
			
			РезультатАвторизации = ВыполнитьАутентификацию(Соединение, Заголовки);
			Если НЕ РезультатАвторизации Тогда
				Сообщить("Авторизация не выполнена! (получение договора по ID)", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
	
			ДоговорПоИД = ПолучитьДоговорПоИД(Соединение, Заголовки, ИдДоговора);
			Если ДоговорПоИД <> Неопределено 
				И ТипЗнч(ДоговорПоИД) = Тип("Соответствие") 
				И ДоговорПоИД.Получить("title") <> Неопределено 
				И ДоговорПоИД.Получить("requisites") <> Неопределено
				И ДоговорПоИД.Получить("type") <> Неопределено
				Тогда
				
				type 		= ДоговорПоИД.Получить("type");
				пtitle		= ДоговорПоИД.Получить("title");
				requisites 	= ДоговорПоИД.Получить("requisites");
				ЭтоДС 		= requisites.Получить("66") <> Неопределено;
				
				Если ТипыДокументов.НайтиПоЗначению(type) = Неопределено
					ИЛИ НЕ ТипыДокументов.НайтиПоЗначению(type).Пометка Тогда
				
					Продолжить;
					
				КонецЕсли;
				
				Если requisites.Получить("6") <> Неопределено
					И requisites.Получить("7") <> Неопределено 
					И ЗначениеЗаполнено(requisites.Получить("6"))
					И ЗначениеЗаполнено(requisites.Получить("7")) Тогда
					
					Попытка 
						
						ДатаДоговора = Дата(requisites.Получить("6") + " " + requisites.Получить("7") + ":00");
						Если ДатаДоговора < НачалоПериода 
							ИЛИ ДатаДоговора > КонецПериода Тогда
							
							Продолжить;
							
						КонецЕсли;
					
					Исключение
						Продолжить;
					КонецПопытки;
						
				КонецЕсли;
				
				КоличествоЗаписейУдовлетворяющихОтбору = КоличествоЗаписейУдовлетворяющихОтбору + 1;
				
				//Контрагент
				Если ФлагТолькоНовыеЗаписи
					И requisites.Получить("45") <> Неопределено
					И ТипЗнч(requisites.Получить("45")) = Тип("Соответствие")
					И requisites.Получить("45").Получить("0") <> Неопределено Тогда
					
					ИдентификаторКонтрагент = СтрЗаменить(requisites.Получить("45").Получить("0"), Символы.НПП, "");
					ОбъектПоИдентификатору = ПолучитьОбъектПоИдентификатору(ИдентификаторКонтрагент, Тип("СправочникСсылка.Контрагенты"));
					СсылкаНаДокумент = "http://" + Объект.Сервер + "/index.php?active=true&wm=true&dbm=dcrqfllnedadcl&title=Document:" + СокрЛП(пtitle);
					ДоговорПрикреплен = ПолучитьОбъектПоСсылкеRetriever(СсылкаНаДокумент, Тип("СправочникСсылка.Контрагенты")) <> Неопределено;
					
					Если ЗначениеЗаполнено(ОбъектПоИдентификатору)
						И ДоговорПрикреплен Тогда
						КоличествоЗаписейОбработано = КоличествоЗаписейОбработано + 1;
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				Если requisites.Получить("45") = Неопределено 
					ИЛИ НЕ ЗначениеЗаполнено(requisites.Получить("45")) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если requisites.Получить("28") = Неопределено 
						ИЛИ НЕ ЗначениеЗаполнено(requisites.Получить("28"))
						ИЛИ requisites.Получить("50") = Неопределено 
						ИЛИ НЕ ЗначениеЗаполнено(requisites.Получить("50")) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ЭтоДС
					И (requisites.Получить("25") = Неопределено 
						ИЛИ НЕ ЗначениеЗаполнено(requisites.Получить("25"))
						ИЛИ requisites.Получить("66") = Неопределено 
						ИЛИ НЕ ЗначениеЗаполнено(requisites.Получить("66"))) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СоответствиеДоговоров.Вставить(пtitle, ДоговорПоИД);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СоответствиеДоговоров;
	
КонецФункции

&НаСервере
Функция ПолучитьДоговорПоИД(Соединение, Заголовки, ИдДоговора)

	РезультатСоответствие = Неопределено;
	
	пЗапросАутентификации = Новый HTTPЗапрос("/api.php?action=docexport", Заголовки);
	ТекстТелаЗапроса = "page_id=" + ИдДоговора;
	пЗапросАутентификации.УстановитьТелоИзСтроки(ТекстТелаЗапроса,КодировкаТекста.UTF8);

	//пИмяФайлаОтвета = Каталог + "\" + ТекстТелаЗапроса + ".json";
	пИмяФайлаОтвета = ПолучитьИмяВременногоФайла("json");
	
	Результат = ОтправитьДляОбработкиНаСервере(Соединение, пЗапросАутентификации, пИмяФайлаОтвета, ТекстТелаЗапроса);
	Если Результат = Неопределено Тогда
		Возврат РезультатСоответствие;
	КонецЕсли;                                             
	
	ContentType = Результат.Заголовки.Получить("Content-Type");
	Если ContentType <> Неопределено 
		И СтрНайти(ContentType, "zip") <> 0 Тогда
		
		//пИмяФайлаОтветаZIP = Каталог + "\" + ТекстТелаЗапроса + ".zip";
		пИмяФайлаОтветаZIP = ПолучитьИмяВременногоФайла("zip");
		
		ПереместитьФайл(пИмяФайлаОтвета, пИмяФайлаОтветаZIP); 
		ЧтениеZipФайла = Новый ЧтениеZipФайла(пИмяФайлаОтветаZIP);
		ЭлементZipФайла = ЧтениеZipФайла.Элементы.Найти("index");
		Если ЭлементZipФайла <> Неопределено Тогда
			
			ЧтениеZipФайла.Извлечь(ЭлементZipФайла, пИмяФайлаОтвета + "_");
			ПереместитьФайл(пИмяФайлаОтвета + "_" + "\index", пИмяФайлаОтвета); 
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(пИмяФайлаОтвета);
			РезультатСоответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
			ЧтениеJSON.Закрыть();
			
		КонецЕсли;
		
	Иначе
		
		УдалитьФайлы(пИмяФайлаОтвета);
		
	КонецЕсли;
	
	Возврат РезультатСоответствие;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИнтеграционнуюТаблицу(СоответствиеДоговоров, Соединение, Заголовки)
	
	ЭлементыДерева = ДеревоИнтеграционнойТаблицы.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	
	Для Каждого ТекДоговор Из СоответствиеДоговоров Цикл
		
		ТекущийЭлементДерева = ЭлементыДерева.Добавить();
		
		//Ссылка на документ
		ТекущийЭлементДерева.Ссылка = "http://" + Объект.Сервер + "/index.php?active=true&wm=true&dbm=dcrqfllnedadcl&title=Document:" + СокрЛП(ТекДоговор.Ключ);
		
		//Идентификатор на документ
		Если ТипЗнч(ТекДоговор.Значение) = Тип("Соответствие")
			И ТекДоговор.Значение.Получить("page_id") <> Неопределено Тогда
			
			ТекущийЭлементДерева.ИдентификаторДокумента = СтрЗаменить(Строка(ТекДоговор.Значение.Получить("page_id")), Символы.НПП, "");
			
			
		КонецЕсли;
		
		Если ТипЗнч(ТекДоговор.Значение) = Тип("Соответствие")
			И ТекДоговор.Значение.Получить("requisites") <> Неопределено 
			И ТипЗнч(ТекДоговор.Значение["requisites"]) = Тип("Соответствие") Тогда
			
			type 		= ТекДоговор.Значение["type"];
			requisites  = ТекДоговор.Значение["requisites"];
			ЭтоДС 		= requisites.Получить("66") <> Неопределено;
			
			//Период
			Если requisites.Получить("6") <> Неопределено
				И requisites.Получить("7") <> Неопределено 
				И ЗначениеЗаполнено(requisites.Получить("6"))
				И ЗначениеЗаполнено(requisites.Получить("7")) Тогда
				
				Попытка 
					ТекущийЭлементДерева.Период = Дата(requisites.Получить("6") + " " + requisites.Получить("7") + ":00");
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			//Организация
			Если requisites.Получить("43") <> Неопределено Тогда
				
				ТекущийЭлементДерева.НаименованиеОрганизации = СокрЛП(СтрЗаменить(requisites.Получить("43"), "`", "'"));
				
			КонецЕсли;
			
			//Контрагент
			Если requisites.Получить("45") <> Неопределено
				И ТипЗнч(requisites.Получить("45")) = Тип("Соответствие")
				И requisites.Получить("45").Получить("0") <> Неопределено Тогда
				
				ТекущийЭлементДерева.ИдентификаторКонтрагент = СтрЗаменить(requisites.Получить("45").Получить("0"), Символы.НПП, "");
				ДанныеПоКонтрагенту = ПолучитьДанныеПоКонтрагенту(Соединение, Заголовки, ТекущийЭлементДерева.ИдентификаторКонтрагент);
				
				//СофтЛаб Начало 2019-05-21 #3350
				Если ТипЗнч(ДанныеПоКонтрагенту) = Тип("Соответствие")
					И ДанныеПоКонтрагенту.Получить("code") <> Неопределено Тогда
					
					ТекущийЭлементДерева.ИНН 				= СокрЛП(ДанныеПоКонтрагенту.Получить("code"));
					
				ИначеЕсли ТипЗнч(ДанныеПоКонтрагенту) = Тип("Массив")
					И ДанныеПоКонтрагенту.Количество() > 0
					И ТипЗнч(ДанныеПоКонтрагенту[0]) = Тип("Соответствие")
					И ДанныеПоКонтрагенту[0].Получить("code") <> Неопределено Тогда
					
					ТекущийЭлементДерева.ИНН 				= СокрЛП(ДанныеПоКонтрагенту[0].Получить("code"));
					
				КонецЕсли;
				//СофтЛаб Конец 2019-05-21 #3350
				
				Если ТипЗнч(ДанныеПоКонтрагенту) = Тип("Соответствие")
					//СофтЛаб Начало 2019-05-21 #3350
					//И ДанныеПоКонтрагенту.Получить("code") <> Неопределено
					//СофтЛаб Конец 2019-05-21 #3350
					И ДанныеПоКонтрагенту.Получить("name") <> Неопределено Тогда
					
					//СофтЛаб Начало 2019-05-21 #3350
					//ТекущийЭлементДерева.ИНН 				= СокрЛП(ДанныеПоКонтрагенту.Получить("code"));
					//СофтЛаб Конец 2019-05-21 #3350
					ТекущийЭлементДерева.НаименованиеПолное = ДанныеПоКонтрагенту.Получить("name");
					
				ИначеЕсли ТипЗнч(ДанныеПоКонтрагенту) = Тип("Массив")
					И ДанныеПоКонтрагенту.Количество() > 0
					И ТипЗнч(ДанныеПоКонтрагенту[0]) = Тип("Соответствие")
					//СофтЛаб Начало 2019-05-21 #3350
					//И ДанныеПоКонтрагенту[0].Получить("code") <> Неопределено
					//СофтЛаб Конец 2019-05-21 #3350
					И ДанныеПоКонтрагенту[0].Получить("name") <> Неопределено Тогда
					
					//СофтЛаб Начало 2019-05-21 #3350
					//ТекущийЭлементДерева.ИНН 				= СокрЛП(ДанныеПоКонтрагенту[0].Получить("code"));
					//СофтЛаб Конец 2019-05-21 #3350
					ТекущийЭлементДерева.НаименованиеПолное = ДанныеПоКонтрагенту[0].Получить("name");
					
				КонецЕсли;
				
			КонецЕсли;
			
			//Тип договора
			Если ТипыДокументов.НайтиПоЗначению(type) <> Неопределено Тогда
			
				ТекущийЭлементДерева.ТипДоговора = Лев(ТипыДокументов.НайтиПоЗначению(type).Представление, 1);
				
			КонецЕсли;
			
			//Статус договора
			Если requisites.Получить("35") <> Неопределено Тогда
				
				ТекущийЭлементДерева.СтатусДоговора = requisites.Получить("35");
				
			КонецЕсли;
			
			//Объект Договора
			Если requisites.Получить("47") <> Неопределено
				И ТипЗнч(requisites["47"]) = Тип("Соответствие")
				И requisites["47"].Получить("0") <> Неопределено Тогда
				
				Если requisites["47"].Количество() > 1 Тогда 
					
					ТекущийЭлементДерева.ОбъектДоговора = ПолучитьОбъектДоговора("");
					
				Иначе
					
					ТекущийЭлементДерева.ОбъектДоговора = ПолучитьОбъектПоИдентификатору(requisites["47"]["0"], Тип("СправочникСсылка.ОбъектыСтроительства"));
					
				КонецЕсли;
				
			КонецЕсли;
			
			//ДатаДоговора
			Если ЭтоДС 
				И requisites.Получить("50") <> Неопределено
				И requisites.Получить("25") <> Неопределено Тогда
				
				Попытка
					ТекущийЭлементДерева.ДатаДоговора = Дата(requisites.Получить("50") + " 00:00:00");
					ТекущийЭлементДерева.ДатаДокумента = Дата(requisites.Получить("25") + " 00:00:00");
				Исключение
				КонецПопытки;
				
			ИначеЕсли requisites.Получить("50") <> Неопределено Тогда
				
				Попытка
					ТекущийЭлементДерева.ДатаДоговора = Дата(requisites.Получить("50") + " 00:00:00");
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			//НомерДоговора
			Если ЭтоДС 
				И requisites.Получить("28") <> Неопределено
				И requisites.Получить("66") <> Неопределено Тогда
				
				ТекущийЭлементДерева.НомерДоговора = СокрЛП(requisites.Получить("28"));
				ТекущийЭлементДерева.НомерДокумента = СокрЛП(requisites.Получить("66"));
				
			ИначеЕсли requisites.Получить("28") <> Неопределено Тогда
				
				ТекущийЭлементДерева.НомерДоговора = СокрЛП(requisites.Получить("28"));
				
			КонецЕсли;
			
			//ПредметДоговора
			Если requisites.Получить("29") <> Неопределено Тогда
				
				ТекущийЭлементДерева.ПредметДоговора = requisites.Получить("29");
				
			КонецЕсли;
			
			//Валюта
			Если requisites.Получить("33") <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(Справочники.Валюты.НайтиПоКоду(requisites["33"])) Тогда
					ТекущийЭлементДерева.Валюта = Справочники.Валюты.НайтиПоКоду(requisites["33"]);
				ИначеЕсли ЗначениеЗаполнено(Справочники.Валюты.НайтиПоНаименованию(requisites["33"], Истина)) Тогда
					ТекущийЭлементДерева.Валюта = Справочники.Валюты.НайтиПоНаименованию(requisites["33"], Истина);
				ИначеЕсли requisites["33"] = "$" Тогда
					ТекущийЭлементДерева.Валюта = Справочники.Валюты.НайтиПоНаименованию("USD", Истина);
				ИначеЕсли requisites["33"] = "€" Тогда
					ТекущийЭлементДерева.Валюта = Справочники.Валюты.НайтиПоНаименованию("EUR", Истина);
				ИначеЕсли requisites["33"] = "RUB" Тогда
					ТекущийЭлементДерева.Валюта = Справочники.Валюты.НайтиПоНаименованию("руб.", Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			//СуммаДоговора
			Если requisites.Получить("30") <> Неопределено Тогда
				
				ТекущийЭлементДерева.СуммаДоговора = requisites.Получить("30");
				
			КонецЕсли;
			
		КонецЕсли;
		
		НайтиСоответствия(ТекущийЭлементДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиСоответствия(ЭлементДерева)

	//Заполнение Организации
	Если НЕ ЗначениеЗаполнено(ЭлементДерева.Организация)
		И ЗначениеЗаполнено(ЭлементДерева.НаименованиеОрганизации) Тогда
		
		ЭлементДерева.Организация = ПолучитьОбъектПоИдентификатору(ЭлементДерева.НаименованиеОрганизации, Тип("СправочникСсылка.Организации"));
		Если ЗначениеЗаполнено(ЭлементДерева.Организация) Тогда
			ЭлементДерева.ОрганизацияНайденаПоИД = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭлементДерева.Организация)
		И ЗначениеЗаполнено(ЭлементДерева.НаименованиеОрганизации) Тогда
		
		ЭлементДерева.Организация = ОрганизацияПоНаименованию(ЭлементДерева.НаименованиеОрганизации);
		
	КонецЕсли;
	
	//Заполнение Контрагента
	Если ЗначениеЗаполнено(ЭлементДерева.ИдентификаторКонтрагент) Тогда
		
		ЭлементДерева.Контрагент = ПолучитьОбъектПоИдентификатору(ЭлементДерева.ИдентификаторКонтрагент, Тип("СправочникСсылка.Контрагенты"));
		Если ЗначениеЗаполнено(ЭлементДерева.Контрагент) Тогда
			ЭлементДерева.КонтрагентНайденПоИД = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭлементДерева.Контрагент)
		И ЗначениеЗаполнено(ЭлементДерева.ИНН) Тогда
		
		ЭлементДерева.Контрагент = КонтрагентПоИНН(ЭлементДерева.ИНН);
		
	КонецЕсли;
	
	//Заполнение Договора
	Если ЗначениеЗаполнено(ЭлементДерева.ИдентификаторДокумента) 
		И НЕ ЗначениеЗаполнено(ЭлементДерева.НомерДокумента) Тогда
		
		ЭлементДерева.Договор = ПолучитьОбъектПоИдентификатору(ЭлементДерева.ИдентификаторДокумента, Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		
		Если ЗначениеЗаполнено(ЭлементДерева.Договор) Тогда
			ЭлементДерева.ДоговорНайденПоИД = Истина;
			ЭлементДерева.ГруппаДоговоров = ЭлементДерева.Договор.Родитель;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭлементДерева.НомерДокумента)
		И НЕ ЗначениеЗаполнено(ЭлементДерева.Договор)
		И ЗначениеЗаполнено(ЭлементДерева.Организация)
		И ЗначениеЗаполнено(ЭлементДерева.Контрагент)
		И ЭлементДерева.КонтрагентНайденПоИД
		И ЗначениеЗаполнено(ЭлементДерева.ДатаДоговора)
		И ЗначениеЗаполнено(ЭлементДерева.НомерДоговора) Тогда
		
		ПараметрыПоиска = Новый Структура();
		ПараметрыПоиска.Вставить("Организация", ЭлементДерева.Организация);
		ПараметрыПоиска.Вставить("Контрагент", 	ЭлементДерева.Контрагент);
		ПараметрыПоиска.Вставить("Дата", 		ЭлементДерева.ДатаДоговора);
		ПараметрыПоиска.Вставить("Номер", 		ЭлементДерева.НомерДоговора);
		
		ЭлементДерева.Договор = ДоговорПоОрганизацииКонтрагентуНомеруИДате(ПараметрыПоиска);
		
	КонецЕсли;
	
	//Заполнение Документ
	Если ЗначениеЗаполнено(ЭлементДерева.ИдентификаторДокумента) 
		И ЗначениеЗаполнено(ЭлементДерева.НомерДокумента) Тогда
		
		ЭлементДерева.Документ = ПолучитьОбъектПоИдентификатору(ЭлементДерева.ИдентификаторДокумента, Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		
		Если ЗначениеЗаполнено(ЭлементДерева.Документ) Тогда
			ЭлементДерева.ДоговорНайденПоИД = Истина;
			ЭлементДерева.ГруппаДоговоров = ЭлементДерева.Документ.Родитель;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементДерева.НомерДокумента)
		И НЕ ЗначениеЗаполнено(ЭлементДерева.Документ)
		И ЗначениеЗаполнено(ЭлементДерева.Организация)
		И ЗначениеЗаполнено(ЭлементДерева.Контрагент)
		И ЭлементДерева.КонтрагентНайденПоИД
		И ЗначениеЗаполнено(ЭлементДерева.ДатаДокумента)
		И ЗначениеЗаполнено(ЭлементДерева.НомерДокумента) Тогда
		
		ПараметрыПоиска = Новый Структура();
		ПараметрыПоиска.Вставить("Организация", ЭлементДерева.Организация);
		ПараметрыПоиска.Вставить("Контрагент", 	ЭлементДерева.Контрагент);
		ПараметрыПоиска.Вставить("Дата", 		ЭлементДерева.ДатаДокумента);
		ПараметрыПоиска.Вставить("Номер", 		ЭлементДерева.НомерДокумента);
		
		ЭлементДерева.Документ = ДоговорПоОрганизацииКонтрагентуНомеруИДате(ПараметрыПоиска);
		
		Если ЗначениеЗаполнено(ЭлементДерева.Документ) Тогда
			ЭлементДерева.ГруппаДоговоров = ЭлементДерева.Документ.Родитель;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоКонтрагенту(Соединение, Заголовки, ИдКонтрагента)
	
	ДанныеПоКонтрагенту = Неопределено;
	
	РезультатАвторизации = ВыполнитьАутентификацию(Соединение, Заголовки);
	Если НЕ РезультатАвторизации Тогда
		Сообщить("Авторизация не выполнена! (получение контрагента по ID)", СтатусСообщения.Важное);
		Возврат ДанныеПоКонтрагенту;
	КонецЕсли;

	пЗапрос = Новый HTTPЗапрос("/api.php?action=contractor", Заголовки);
	ТекстТелаЗапроса = "contractor_id=" + СтрЗаменить(ИдКонтрагента, Символы.НПП, "") + "&format=json";
	пЗапрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса,КодировкаТекста.UTF8);

	//пИмяФайлаОтвета = Каталог + "\" + ТекстТелаЗапроса + ".json";
	пИмяФайлаОтвета = ПолучитьИмяВременногоФайла("json");
	
	Результат = ОтправитьДляОбработкиНаСервере(Соединение, пЗапрос, пИмяФайлаОтвета, ТекстТелаЗапроса);
	Если Результат = Неопределено Тогда
		УдалитьФайлы(пИмяФайлаОтвета);
		Возврат ДанныеПоКонтрагенту;
	КонецЕсли;                                             
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(пИмяФайлаОтвета);
	ДанныеПоКонтрагенту = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	УдалитьФайлы(пИмяФайлаОтвета);
	
	Возврат ДанныеПоКонтрагенту;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСоответствиеДоговоровИзКаталога()
	
	СоответствиеДоговоров = Новый Соответствие;
	
	файлы = НайтиФайлы("C:/Users/APozdnyakov/Desktop/Тест_Ретривер", "*.json");
	Для Каждого ТекФайл Из файлы Цикл
		
		Если СтрНайти(ТекФайл.Имя, "page_id") <> 0 Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(ТекФайл.ПолноеИмя);
			РезультатСоответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
			ЧтениеJSON.Закрыть();
			
			Если ТипЗнч(РезультатСоответствие) = Тип("Соответствие") 
				И РезультатСоответствие.Получить("title") <> Неопределено 
				Тогда
				СоответствиеДоговоров.Вставить(РезультатСоответствие["title"], РезультатСоответствие);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат СоответствиеДоговоров;
КонецФункции

&НаКлиенте
Процедура ДеревоИнтеграционнойТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоИнтеграционнойТаблицыСсылка" Тогда 
		
		ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено
			И СтрДлина(ТекущиеДанные.Ссылка) > 0 Тогда 
			
			СтандартнаяОбработка = Ложь;
			ЗапуститьПриложение(ТекущиеДанные.Ссылка);
		
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ДеревоИнтеграционнойТаблицыКонтрагент" Тогда 
		
		ТекущиеДанные = Элементы.ДеревоИнтеграционнойТаблицы.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено 
			И ЗначениеЗаполнено(ТекущиеДанные.ИНН) Тогда
			
			МассивКонтрагентов = ПолучитьКонтрагентовПоИНН(ТекущиеДанные.ИНН);
			Поле.СписокВыбора.ЗагрузитьЗначения(МассивКонтрагентов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СгенерироватьЗапрос(НачалоПериода, КонецПериода)
	
	//Объект.ЗапросRetriver = "search=SearchMixed&query[6]=""" + Формат(НачалоПериода, "ДФ=yyyy-MM-dd") + """&start=0&format=json";
	//Объект.ЗапросRetriver = "search=SearchMixed&query[6][0]=""" + Формат(НачалоПериода, "ДФ=yyyy-MM-dd") + """&query[6][1]=""" + Формат(КонецПериода, "ДФ=yyyy-MM-dd") + """&start=0&rows=10&format=json";
	//Объект.ЗапросRetriver = "search=SearchMixed"
	//										+ "&query[83]={""1"":""" + Формат(НачалоПериода, "ДФ='yyyy-MM-dd HH:mm'") + """,""2"":""" + Формат(КонецПериода, "ДФ='yyyy-MM-dd HH:mm'") + """}"
	//										+ ?(СтатусДоговора = "Все", "", "&query[67]={""1"":""" + СтатусДоговора + """}")
	//										+ "&start=0&rows=10&format=json";
	
	
	//Объект.ЗапросRetriver = "search=SearchMixed"
	//										+ "&query[83]={""1"":""2018-08-01 15:47"",""2"":""2018-08-01 15:50""}"
	//										+ ?(НЕ ЗначениеЗаполнено(СтатусДоговора) ИЛИ СтатусДоговора = "Все", "", "&query[67]={""1"":""" + СтатусДоговора + """}")
	//										+ "&start=0&rows=10&format=json";
	
	//Объект.ЗапросRetriver = "search=SearchMixed"
	//										//+ "&query[6]={""1"":""2018-08-01"",""2"":""2018-08-01""}"
	//										//+ "&query[7]=""12:08"""
	//										//+ "&query[7]={""1"":""15:47"",""2"":""15:50""}"
	//										
	//										//+ "&query{""6"":{""1"":""2018-08-01"",""2"":""2018-08-01""}}"
	//										//+ "&query[6]={""1"":""2018-08-01"",""2"":""2018-08-01""}"
	//										//+ "&query[6]=""2018-07-11""&query[7]=""15:15"""
	//										
	//										//+ "&query[83]={""1"":""2018-08-01 10:47"",""2"":""2018-08-01 18:50""}"
	//										+ ?(НЕ ЗначениеЗаполнено(СтатусДоговора) ИЛИ СтатусДоговора = "Все", "", "&query[67]={""2"":""" + СтатусДоговора + """}")
	//										//+ ?(НЕ ЗначениеЗаполнено(СтатусДоговора) ИЛИ СтатусДоговора = "Все", "", "&query[67]=""" + СтатусДоговора + """")
	//										+ "&start=0&rows=10&format=json";
	
	//Объект.ЗапросRetriver = "search=SearchMixed&query[6]={""1"":""" + Формат(НачалоПериода, "ДФ=yyyy-MM-dd") 
	//												+ """,""2"":""" + Формат(КонецПериода, "ДФ=yyyy-MM-dd") + """}
	//												|&start=0&rows=10000&format=json";

	Объект.ЗапросRetriver = "search=SearchMixed"
											+ "&query[6]={""1"":""" + Формат(НачалоПериода, "ДФ=yyyy-MM-dd") + """,""2"":""" + Формат(КонецПериода, "ДФ=yyyy-MM-dd") + """}"
											+ ?(НЕ ЗначениеЗаполнено(СтатусДоговора) ИЛИ СтатусДоговора = "Все", "", "&query[35]={""1"":""" + СтатусДоговора + """}")
											+ "&start=0&rows=10000&format=json";
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтбор(Команда)
	
	КоманднаяПанель.ПодчиненныеЭлементы.ФормаКомандаОтбор.Пометка = НЕ КоманднаяПанель.ПодчиненныеЭлементы.ФормаКомандаОтбор.Пометка;
	Элементы.ГруппаОтбор.Видимость = КоманднаяПанель.ПодчиненныеЭлементы.ФормаКомандаОтбор.Пометка;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивНовыхИдДоговоров(МассивИдДоговоров)
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(500);
    ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИдентификаторRetriever", ОписаниеСтроки);
	Для Инд = 1 По МассивИдДоговоров.Количество() Цикл 
		ТЗ.Добавить(); 
	КонецЦикла;
	ТЗ.ЗагрузитьКолонку(МассивИдДоговоров, "ИдентификаторRetriever");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ИдентификаторRetriever КАК ИдентификаторRetriever
		|ПОМЕСТИТЬ ВТ_ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ.ИдентификаторRetriever КАК ИдентификаторRetriever
		|ИЗ
		|	ВТ_ТЗ КАК ТЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_ИдентификаторыRetriever КАК ок_ИдентификаторыRetriever
		|		ПО ТЗ.ИдентификаторRetriever = ок_ИдентификаторыRetriever.ИдентификаторRetriever
		|			И (ТИПЗНАЧЕНИЯ(ок_ИдентификаторыRetriever.Объект) = ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)))
		|ГДЕ
		|	ок_ИдентификаторыRetriever.ИдентификаторRetriever ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	МассивНовыхИД = РезультатЗапроса.ВыгрузитьКолонку("ИдентификаторRetriever");
	
	Возврат МассивНовыхИД;
		
КонецФункции

&НаСервере
Функция ПолучитьМассивИзСоответствия(пСоответствие)
	
	пМассив = Новый Массив;
	Для Каждого ЭлементСоответствия Из пСоответствие Цикл
		
		пМассив.Добавить(ЭлементСоответствия.Ключ);
		
	КонецЦикла;
	
	Возврат пМассив;
	
КонецФункции

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	
	Если Элементы.ДеревоИнтеграционнойТаблицы.ТекущийЭлемент <> Неопределено Тогда
		
		ИмяПоля = СтрЗаменить(Элементы.ДеревоИнтеграционнойТаблицы.ТекущийЭлемент.Имя, "ДеревоИнтеграционнойТаблицы", "");
		КомандаСортировать(ИмяПоля, "Убыв");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	
	Если Элементы.ДеревоИнтеграционнойТаблицы.ТекущийЭлемент <> Неопределено Тогда
		
		ИмяПоля = СтрЗаменить(Элементы.ДеревоИнтеграционнойТаблицы.ТекущийЭлемент.Имя, "ДеревоИнтеграционнойТаблицы", "");
		КомандаСортировать(ИмяПоля, "Возр");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаСортировать(ИмяПоля, ВидСортировки = "Возр")
	
	ДеревоЗначений = ДанныеФормыВЗначение(ДеревоИнтеграционнойТаблицы, Тип("ДеревоЗначений"));
	ДеревоЗначений.Строки.Сортировать(ИмяПоля + " " + ВидСортировки);
	ЗначениеВДанныеФормы(ДеревоЗначений, ДеревоИнтеграционнойТаблицы);
	
КонецПроцедуры

#КонецОбласти