
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("СтруктураПозиций") Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если Параметры.СтруктураПозиций.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Отсутствуют платежные позиции для групповой оплаты!'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
  
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПозиций = Параметры.СтруктураПозиций;
	
	Для каждого Элемент Из СтруктураПозиций Цикл
		ЗаполнитьЗначенияСвойств(ДокументыДляОбработки.Добавить(), Элемент);
	КонецЦикла; 
	
	Объект.РежимЗаписи                     = Параметры.РежимЗаписи;
	Объект.РежимСообщений                  = Параметры.РежимСообщений;
	Объект.НеФормироватьПлатежныеПоручения = Параметры.НеФормироватьПлатежныеПоручения;
	Объект.НеФормироватьДокументыОплаты    = Параметры.НеФормироватьДокументыОплаты;
	Объект.ПроводитьПлатежныеПоручения 	   = Параметры.ПроводитьПлатежныеПоручения;
	Объект.ПроводитьДокументыОплаты        = Параметры.ПроводитьДокументыОплаты;
	
	ЗаполнитьКэшЗначений();
	УстановитьЗначенияПоУмолчанию();
	ОбновитьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДоУровня();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда	
		ПараметрыФормы = Новый Структура; 
		ПараметрыФормы.Вставить("СписокДокументовСписания",СписокДокументовСписания);
		Оповестить("ГрупповаяОплатаЗаявокЗавершена", ПараметрыФормы, ЭтотОбъект.ВладелецФормы);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереводокументов

&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СтрЗаменить(Поле.Имя, "ДеревоДокументов", "");
	
	ПоказатьЗначение(,ТекущиеДанные[ИмяКолонки]);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовВыполнятьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Выполнять = 2 Тогда
		ТекущиеДанные.Выполнять = 0;
	КонецЕсли;
	
	ЗначениеФлажка = ТекущиеДанные.Выполнять;
	
	ИзменитьФлажки(ТекущиеДанные.ПолучитьЭлементы(), ЗначениеФлажка);
	
	ИзменитьФлажкиРодителей(ТекущиеДанные.ПолучитьРодителя(), ТекущиеДанные.ПолучитьРодителя(), ЗначениеФлажка, ЗначениеФлажка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - действие команды "КомандаОбновить".
// 
&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОбновитьДеревоДокументов();
	РазвернутьДоУровня();
	
КонецПроцедуры

// Процедура - действие команды "КомандаУстановитьФлажки".
// 
&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	
	ИзменитьФлажки(ДеревоДокументов.ПолучитьЭлементы(), 1);
	
КонецПроцедуры

// Процедура - действие команды "КомандаСнятьФлажки".
// 
&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	
	ИзменитьФлажки(ДеревоДокументов.ПолучитьЭлементы(), 0);
	
КонецПроцедуры

// Процедура - действие команды "КомандаСоздатьДокументыОплаты".
// 
&НаКлиенте
Процедура КомандаСоздатьДокументыОплаты(Команда)
	
	ЭлементыДерева = ДеревоДокументов.ПолучитьЭлементы();
	
	ЕстьДокументыДляОплаты = Ложь;
	
	Для Каждого ТекущаяСтрока Из ЭлементыДерева Цикл
		Если НЕ ТекущаяСтрока.Выполнять = 0 Тогда
			ЕстьДокументыДляОплаты = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьДокументыДляОплаты Тогда
		СоздатьДокументыОплаты();
	Иначе		
		ТекстСообщения = НСтр("ru='Нет платежных позиций, отмеченных для оплаты!'");
		ПоказатьПредупреждение(,ТекстСообщения,, Нстр("ru = 'Создать документы'"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие команды "КомандаНастройки".
// 
&НаКлиенте
Процедура КомандаНастройки(Команда)
	
	ПараметрыФормы = Новый Структура("СтруктураНастроек", ЗаполнитьНастройки(Ложь));
	
	Оповещение = Новый ОписаниеОповещения("КомандаНастройкиОкончание", ЭтотОбъект); 
	ОткрытьФорму("Обработка.бит_ГрупповаяОплатаЗаявок.Форма.ФормаНастройки", ПараметрыФормы, 
					ЭтотОбъект,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура окончание процедуры "КомандаНастройки".
// 
&НаКлиенте 
Процедура КомандаНастройкиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		НастроитьОбработку(РезультатВыбора);
		РазвернутьДоУровня();
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкиОкончание()

// Процедура - действие команды "КомандаСохранитьНастройки".
// 
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураНастройки" , ЗаполнитьНастройки(Истина));
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - действие команды "КомандаВосстановитьНастройки".
// 
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроек",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииПоРаботеСНастройками

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция ЗаполнитьНастройки(РежимСохранения)
 			
	Возврат Обработки.бит_ГрупповаяОплатаЗаявок.ЗаполнитьНастройки(Объект,РежимСохранения);
	
КонецФункции // ПрочитатьНастройки()

&НаСервере
Процедура НастроитьОбработку(СтруктураНастроек)

	Обработки.бит_ГрупповаяОплатаЗаявок.НастроитьОбработку(Объект, СтруктураНастроек, Ложь);
	
КонецПроцедуры // УстановитьДопНастройки()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Обработки.бит_ГрупповаяОплатаЗаявок.НастроитьОбработку(Объект, СтруктураНастроек, Истина);
	Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Ошибка при восстановлении настроек.");
	КонецЕсли;  		
	
КонецПроцедуры // ПрименитьНастройки()

#КонецОбласти

&НаКлиенте
Процедура РазвернутьДоУровня()

	Уровень = ?(Объект.УровеньРаскрытияДерева = 0, 5, Объект.УровеньРаскрытияДерева);
	бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоДокументов,ДеревоДокументов, Уровень);
	
КонецПроцедуры
 
// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;	
	
	фКэшЗначений.Вставить("ЭтоБухгалтерия", бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия());	
	фКэшЗначений.Вставить("ТипНастройки"		, Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("НастраиваемыйОбъект"	, "Обработка.бит_ГрупповаяОплатаЗаявок");
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавливает значения по умолчанию.
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	ПрименитьНастройки(НастройкаПоУмолчанию);
	
	Если Объект.РежимСообщений = "" И Объект.РежимЗаписи = "" Тогда
		
		// Если настройки нет - заполним значения по умолчанию.
		Объект.РежимСообщений = "Все";
		Объект.РежимЗаписи    = "Запись";
	 				
	КонецЕсли;
      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

&НаСервере
Процедура ОбновитьДеревоДокументов()
	
	// Доступны только те виды операций, для которых возможно указание списка в таб.части РасшифровкаПлатежа.
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику);
	ВидыОпераций.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю);
	ВидыОпераций.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПрочиеРасчетыСКонтрагентами);
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		ВидыОпераций.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратЗайма);
		ВидыОпераций.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратКредита);
		ВидыОпераций.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаКонтрагенту);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыДляОбработки", РеквизитФормыВЗначение("ДокументыДляОбработки"));
	Запрос.УстановитьПараметр("МассивВидовОпераций"	,  ВидыОпераций);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета"	,  Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыДляОбработки.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
	|	ДокументыДляОбработки.ВалютаПлатежа КАК ВалютаПлатежа,
	|	ДокументыДляОбработки.СуммаКОплате КАК СуммаКОплате,
	|	ДокументыДляОбработки.СуммаКОплатеНач КАК СуммаКОплатеНач
	|ПОМЕСТИТЬ ДокументыДляОбработки
	|ИЗ
	|	&ДокументыДляОбработки КАК ДокументыДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ДокументОплаты КАК ДокументОплаты,
	|	ВложенныйЗапрос.ПлатежнаяПозиция КАК ПлатежнаяПозиция
	|ПОМЕСТИТЬ ДокументыОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		бит_ДокументыМножественнойОплаты.ДокументОплаты КАК ДокументОплаты,
	|		бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция КАК ПлатежнаяПозиция
	|	ИЗ
	|		РегистрСведений.бит_ДокументыМножественнойОплаты КАК бит_ДокументыМножественнойОплаты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляОбработки КАК ДокументыДляОбработки
	|			ПО бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция = ДокументыДляОбработки.ПлатежнаяПозиция
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		бит_ДополнительныеАналитики.Объект,
	|		бит_ДополнительныеАналитики.ЗначениеАналитики
	|	ИЗ
	|		РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляОбработки КАК ДокументыДляОбработки
	|			ПО бит_ДополнительныеАналитики.ЗначениеАналитики = ДокументыДляОбработки.ПлатежнаяПозиция) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыДляОбработки.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДокументОснование КАК Заявка,
	|	ВЫБОР
	|		КОГДА ДокументыДляОбработки.ВалютаПлатежа = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.ДокументОснование.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|						ТОГДА &ВалютаРегламентированногоУчета
	|					ИНАЧЕ Реквизиты.ВалютаДокумента
	|				КОНЕЦ
	|		ИНАЧЕ ДокументыДляОбработки.ВалютаПлатежа
	|	КОНЕЦ КАК ВалютаПлатежа,
	|	ВЫБОР
	|		КОГДА ДокументыДляОбработки.СуммаКОплате = 0
	|			ТОГДА Реквизиты.СуммаДокумента
	|		ИНАЧЕ ДокументыДляОбработки.СуммаКОплате
	|	КОНЕЦ КАК СуммаКОплате,
	|	ВЫБОР
	|		КОГДА ДокументыДляОбработки.СуммаКОплатеНач = 0
	|			ТОГДА Реквизиты.СуммаДокумента
	|		ИНАЧЕ ДокументыДляОбработки.СуммаКОплатеНач
	|	КОНЕЦ КАК СуммаКОплатеНач,
	|	Реквизиты.ДатаПлатежаКрайняя КАК ДатаПлатежаКрайняя,
	|	Реквизиты.ДатаРасхода КАК ДатаРасхода,
	|	Реквизиты.БанковскийСчетКонтрагент КАК БанковскийСчетКонтрагента,
	|	Реквизиты.БанковскийСчетОрганизация КАК БанковскийСчетОрганизации,
	|	Реквизиты.ДокументОснование.ВидОперации КАК ВидОперации,
	|	ДокументыОплаты.ДокументОплаты КАК ДокументОплаты,
	|	Реквизиты.ДокументОснование.ФормаОплаты КАК ФормаОплаты
	|ИЗ
	|	ДокументыДляОбработки КАК ДокументыДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция КАК Реквизиты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДокументыОплаты КАК ДокументыОплаты
	|			ПО Реквизиты.Ссылка = ДокументыОплаты.ПлатежнаяПозиция
	|		ПО ДокументыДляОбработки.ПлатежнаяПозиция = Реквизиты.Ссылка
	|ГДЕ
	|	Реквизиты.ДокументОснование.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные)
	|	И Реквизиты.ДокументОснование.ВидОперации В(&МассивВидовОпераций)
	|	И ДокументыОплаты.ДокументОплаты ЕСТЬ NULL
	|ИТОГИ ПО
	|	ВидОперации,
	|	Организация,
	|	БанковскийСчетОрганизации,
	|	Контрагент";
	
	ДеревоДляВывода = РеквизитФормыВЗначение("ДеревоДокументов");
	ДеревоДляВывода.Строки.Очистить();
	
	Результат = Запрос.Выполнить();
	
	ОбойтиВыборкуЗапроса(Результат, ДеревоДляВывода);
	ЗначениеВРеквизитФормы(ДеревоДляВывода, "ДеревоДокументов");
	
КонецПроцедуры

&НаСервере
Процедура ОбойтиВыборкуЗапроса(РезультатЗапрос, ДеревоДляВывода)

	Выборка = РезультатЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ДеревоДляВывода.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			СтрокаТаблицы.Группировка = Выборка[Выборка.Группировка()];
		Иначе
			СтрокаТаблицы.Группировка 		 = Выборка.ПлатежнаяПозиция;
			СтрокаТаблицы.ЦелеваяГруппировка = Истина;
		КонецЕсли; 
		
		ОбойтиВыборкуЗапроса(Выборка, СтрокаТаблицы);
	КонецЦикла; 

КонецПроцедуры

// Процедура настраивает флаги для подчиненных строк. Вызывается рекурсивно.
// 
// Параметры:
// 	ЭлементыДерева - ДанныеФормыКоллекцияЭлементовДерева - подчиненные строки.
// 	ЗначениеФлажка - число - значение для установки.
// 
&НаКлиенте
Процедура ИзменитьФлажки(ЭлементыДерева, ЗначениеФлажка)
	
	Для Каждого ТекущаяВетка Из ЭлементыДерева Цикл
		ТекущаяВетка.Выполнять = ЗначениеФлажка;
		
		ИзменитьФлажки(ТекущаяВетка.ПолучитьЭлементы(), ЗначениеФлажка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура настраивает флаги для родительских строк. Вызывается рекурсивно.
// 
// Параметры:
// 	
&НаКлиенте
Процедура ИзменитьФлажкиРодителей(ВеткаРодитель, Ветка, ЗначениеФлажка, СостояниеРодителя)
	
	Если Ветка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Ветка.ПолучитьЭлементы();
	
	Для Каждого ТекущаяВетка Из ЭлементыРодителя Цикл
		Если НЕ ТекущаяВетка.Выполнять = ЗначениеФлажка Тогда
			СостояниеРодителя = 2;
			
			Прервать;
		КонецЕсли;
		
		ИзменитьФлажкиРодителей(ВеткаРодитель, ТекущаяВетка, ЗначениеФлажка, СостояниеРодителя);
		
		Если СостояниеРодителя = 2 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВеткаРодитель = Ветка Тогда
		ВеткаРодитель.Выполнять = СостояниеРодителя;
		
		ИзменитьФлажкиРодителей(ВеткаРодитель.ПолучитьРодителя(), ВеткаРодитель.ПолучитьРодителя(), ЗначениеФлажка, ЗначениеФлажка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьСписокЗначений(Приемник, Источник)

	Для каждого Элемент Из Источник Цикл
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), Элемент);
	КонецЦикла; 

КонецПроцедуры 
 
&НаКлиенте
Процедура СоздатьДокументыОплаты()
	
	Оповещение = Новый ОписаниеОповещения("СоздатьДокументыОплатыОкончание", ЭтотОбъект); 
	ПоказатьВопрос(Оповещение, НСтр("ru='Будут созданы сводные документы оплаты по выбранным платежным позициям. Вы уверены?'"), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, Нстр("ru = 'Создать документы оплаты'")); 
	
КонецПроцедуры

// Процедура окончание процедуры "СоздатьДокументыОплаты".
// 
&НаКлиенте 
Процедура СоздатьДокументыОплатыОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	ОчиститьСообщения();
	ДлительнаяОперация = ПараметрыСозданияДокументовОплаты();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = "Создание документов"; 
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииСозданияДокументов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияДокументовОплаты()

	НаименованиеЗадания = НСтр("ru = 'Групповое создание документов оплаты.'");
	ВыполняемыйМетод = "бит_Казначейство.СоздатьДокументыОплатыВФоне";
	
	СуммаКОплате     = 0;
	ПлатежныеПозиции = Новый Массив(); 	// Платежные позиции группируются в массивы по реквизиту дерева "НомерГруппы".
	ПодготовитьСписокПлатежныхПозиций(ПлатежныеПозиции, СуммаКОплате, Объект.РежимСообщений);
	
	ПараметрыФормирования = бит_Казначейство.НовыеПараметрыФормированияПлатежныхДокументов();
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, Объект);
	
	ПараметрыФормирования.Вставить("ПлатежныеПозиции", ПлатежныеПозиции);
	ПараметрыФормирования.Вставить("СуммаПлатежныхПозиций", СуммаКОплате);
	
	// Заполнение пераметов длительной операции.
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыФормирования, ПараметрыВыполнения);

КонецФункции

&НаКлиенте
Процедура ПриЗавершенииСозданияДокументов(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при выполнении: " + Результат.КраткоеПредставлениеОшибки);
	Иначе	

		РезультатСоздания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатСоздания.Выполнено Тогда
			НовыеДокументы = РезультатСоздания.НовыеДокументы;
			СкопироватьСписокЗначений(СписокДокументовСписания, НовыеДокументы);
			ОбновитьДеревоДокументов();
		КонецЕсли; 
		Если РезультатСоздания.Сообщения.Количество() <> 0 Тогда
			ТекстСообщения = Нстр("ru = 'При выполнении произошли ошибки: '");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Для каждого Элемент Из РезультатСоздания.Сообщения Цикл
				Элемент.Сообщить();
			КонецЦикла; 
		КонецЕсли; 
		
		Если ДеревоДокументов.ПолучитьЭлементы().Количество() = 0 Тогда
			Закрыть();
		Иначе
			ПоказатьОповещениеПользователя(Нстр("ru = 'Создание документов завершено.'"),,,БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокПлатежныхПозиций(ПлатежныеПозиции, ИтогоСуммаКОплате, РежимСообщений)

	Пакет 		   = Новый Соответствие(); 
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов");
	СтрокиДерева   = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Выполнять, ЦелеваяГруппировка", 1, Истина), Истина);	
	Для Каждого ТекущаяСтрока Из СтрокиДерева Цикл
		
		Отказ = Ложь;
		ТекстСообщения = "";
		
		// Проверка заполнения банковского счета
		Если ТекущаяСтрока.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.БанковскийСчетОрганизации) Тогда
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Для платежной позиции %1 не указан банковский счет организации.'"),
								ТекущаяСтрока.ПлатежнаяПозиция);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , ,Отказ);
		ИначеЕсли Не бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия() 
			И ТекущаяСтрока.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные 
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.БанковскийСчетОрганизации) Тогда
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Для платежной позиции %1 не не указана касса организации.'"),
								ТекущаяСтрока.ПлатежнаяПозиция);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , ,Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		// Если оплачиваем не всю сумму - разобъем платежную позицию.
		Если ТекущаяСтрока.СуммаКОплате < ТекущаяСтрока.СуммаКОплатеНач Тогда
			Если ТекущаяСтрока.ВалютаПлатежа <> ТекущаяСтрока.ПлатежнаяПозиция.ВалютаДокумента Тогда
				
				ИсходнаяВалюта = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТекущаяСтрока.ВалютаПлатежа, 
				ТекущаяСтрока.ПлатежнаяПозиция.ДатаРасхода);
				
				НоваяВалюта = бит_КурсыВалютКлиентСервер.СтруктураКурса(ТекущаяСтрока.ПлатежнаяПозиция.ВалютаДокумента, 
				ТекущаяСтрока.ПлатежнаяПозиция.КурсДокумента, ТекущаяСтрока.ПлатежнаяПозиция.КратностьДокумента);
				
				СуммаКОплате = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекущаяСтрока.СуммаКОплате, 
				ИсходнаяВалюта, НоваяВалюта); 
				
				СуммаКОплатеНач = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекущаяСтрока.СуммаКОплатеНач, 
				ИсходнаяВалюта, НоваяВалюта);	
			Иначе
				СуммаКОплате 	= ТекущаяСтрока.СуммаКОплате ;
				СуммаКОплатеНач = ТекущаяСтрока.СуммаКОплатеНач;
			КонецЕсли; 
			
			ДействиеВыполнено = бит_Казначейство.РазбитьПлатежнуюПозицию(ТекущаяСтрока.ПлатежнаяПозиция,
									СуммаКОплате,СуммаКОплатеНач,РежимСообщений);
			Если НЕ ДействиеВыполнено Тогда												 
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		Пачка = Пакет.Получить(ТекущаяСтрока.НомерГруппы);
		Если Пачка = Неопределено Тогда
			Пачка = Новый Массив(); 		
		КонецЕсли; 
		Пачка.Добавить(ТекущаяСтрока.Группировка);
		Пакет.Вставить(ТекущаяСтрока.НомерГруппы, Пачка);
		
		ИтогоСуммаКОплате = ИтогоСуммаКОплате + ТекущаяСтрока.СуммаКОплате;
	КонецЦикла;

	Для каждого КлючЗначение Из Пакет Цикл
		ПлатежныеПозиции.Добавить(КлючЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
