
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	фПолноеИмяОбъекта = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтаФорма.ИмяФормы, Истина);
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// Инициализация схемы компоновки данных
	АдресСхемыКомпоновкиДанных = ИнициализироватьКомпоновщикСервер(Объект.КомпоновщикНастроек);
	
	// Настроим отображение полей доп. аналитик в таблицах формы.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																					 ,"ПереченьДокументов"
																					 ,Неопределено
																					 ,Неопределено);
																					 
	УстановитьЗначенияПоУмолчанию();
	
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Ссылки", Новый Массив());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура Обновить(Команда)
	
	ЧислоДокументов = 0;
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Ссылки", Новый Массив());
	ЗаполнитьПереченьДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	
	ВыборПериода(Объект.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСохранить(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , мКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", мКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
											
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВосстановить(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ТипНастройки"		 , мКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", мКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроек",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек

&НаКлиенте
Процедура УстановитьВсеДокументы(Команда)
	
	ОбработатьФлагиДокументов(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеДокументы(Команда)
	
	ОбработатьФлагиДокументов(0);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Если Объект.ПереченьДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Создать", Истина);
	
	ВыбранныеСтроки = Объект.ПереченьДокументов.НайтиСтроки(СтруктураОтбора);
	
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Не выбраны документы для закрытия.", 30);
		Возврат;
	КонецЕсли;
					
	ТекстВопроса = "Будет выполнено создание документов планирования. Продолжить?";
	
	ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСоздатьДокументы", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросСоздатьДокументы(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТекстСообщения = НСтр("ru='Выполняется создание документов ""Планируемое поступление денежных средств""...'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		// Выполним создание документов планирования.
		ВыполнитьСозданиеДокументовПланирования();
		
		// Изменение кода. Начало. 23.04.2014{{
		// Объект.ПереченьДокументов.Очистить();
		ЗаполнитьПереченьДокументов();
		// Изменение кода. Конец. 23.04.2014}}
		
		ТекстСообщения = НСтр("ru='Создание документов ""Планируемое поступление денежных средств"" завершено.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);

		Если ЧислоДокументов <> 0 Тогда
			Элементы.СтраницыСДокументами.ТекущаяСтраница = Элементы.СтраницаСформированныеДокументы;
		КонецЕсли; 
	
	КонецЕсли;

КонецПроцедуры // ВопросСоздатьДокументы()

// Процедура окончание процедуры "ДействияФормыНастройка".
// 
&НаКлиенте 
Процедура ОткрытьНастройкиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		УстановитьДопНастройки(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьНастройкиОкончание()


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КлиентскиеПроцедурыИФункции

// Процедура открывает форму выбора периода.
// 
// Параметры:
//  Период  - Стандартный период.
// 
&НаКлиенте
Процедура ВыборПериода(Период)

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Период;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВыборПериода",ЭтаФорма);
	Диалог.Показать(Оповещение);
	 
КонецПроцедуры // ВыборПериода()

// Процедура выбора периода. 
// 
&НаКлиенте 
Процедура ПоказатьВыборПериода(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
	
		Объект.Период = РезультатВыбора;
	
	КонецЕсли; 
	
КонецПроцедуры // ПоказатьВыборПериода

// Процедура устанавливает значение флага Создать для всех строк в таблице ПереченьДокументов.
// 
// Параметры:
// 	ЗначениеФлага - число - устанавливаемое значение.
// 
&НаКлиенте
Процедура ОбработатьФлагиДокументов(ЗначениеФлага)
	
	Для Каждого ТекущаяСтрока Из Объект.ПереченьДокументов Цикл
		
		Если ЗначениеФлага = 0 Тогда
			ТекущаяСтрока.Создать = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			ТекущаяСтрока.Создать = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			ТекущаяСтрока.Создать = НЕ ТекущаяСтрока.Создать;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура настраивает флаги для подчиненных строк. Вызывается рекурсивно.
// 
// Параметры:
// 	ЭлементыДерева - ДанныеФормыКоллекцияЭлементовДерева - подчиненные строки.
// 	ЗначениеФлажка - число - значение для установки.
// 
&НаКлиенте
Процедура ИзменитьФлажкиПотомков(ЭлементыДерева, ЗначениеФлажка)
	
	Для Каждого ТекущаяВетка Из ЭлементыДерева Цикл
		ТекущаяВетка.Выгружать = ЗначениеФлажка;
		
		ИзменитьФлажкиПотомков(ТекущаяВетка.ПолучитьЭлементы(), ЗначениеФлажка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлажкиРодителей(ВеткаРодитель, Ветка, ЗначениеФлажка, СостояниеРодителя)
	
	Если Ветка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Ветка.ПолучитьЭлементы();
	
	Для Каждого ТекущаяВетка Из ЭлементыРодителя Цикл
		Если НЕ ТекущаяВетка.Выгружать = ЗначениеФлажка Тогда
			СостояниеРодителя = 2;
			
			Прервать;
		КонецЕсли;
		
		ИзменитьФлажкиРодителей(ВеткаРодитель, ТекущаяВетка, ЗначениеФлажка, СостояниеРодителя);
		
		Если СостояниеРодителя = 2 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВеткаРодитель = Ветка Тогда
		ВеткаРодитель.Выгружать = СостояниеРодителя;
		
		ИзменитьФлажкиРодителей(ВеткаРодитель.ПолучитьРодителя(), ВеткаРодитель.ПолучитьРодителя(), ЗначениеФлажка, ЗначениеФлажка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СерверныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	мКэшЗначений = Новый Структура;
	
	мКэшЗначений.Вставить("ТипНастройки"	   , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	мКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_СозданиеПланируемыхПоступлений");
		
КонецПроцедуры

// Функция обращается к процедуре модуля объекта для инициализации СКД и пользовательских настроек.
// 
// Параметры:
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - пользовательские настройки.
// 
// Возвращаемое значение:
// 	АдресСКД - строка - адрес СКД во временном хранилище.
// 
&НаСервере
Функция ИнициализироватьКомпоновщикСервер(пКомпоновщик, ИнициализироватьНастройки=Истина)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
	АдресСКД = ОбработкаОбъект.ИнициализироватьКомпоновщик(пКомпоновщик, ИнициализироватьНастройки);
	
	Возврат АдресСКД;
	     
КонецФункции

&НаСервере
Процедура ЗаполнитьПереченьДокументов()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период"		  , Объект.Период);
	
	ТаблицаДокументов = ОбработкаОбъект.ЗаполнитьПереченьДокументов(АдресСхемыКомпоновкиДанных, Объект.КомпоновщикНастроек, СтруктураПараметров);
	
	Объект.ПереченьДокументов.Загрузить(ТаблицаДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСозданиеДокументовПланирования()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период", Объект.Период);
	СтруктураПараметров.Вставить("АдресРезультата", АдресРезультата);
	
	ОбработкаОбъект.ВыполнитьСозданиеДокументовПланирования(Объект.ПереченьДокументов.Выгрузить(), СтруктураПараметров);
	
	Результат 		= ПолучитьИзВременногоХранилища(АдресРезультата);
	ЧислоДокументов = Результат.Количество();
	СформированныеДокументы.Параметры.УстановитьЗначениеПараметра("Ссылки", Результат);
	
КонецПроцедуры

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураНастроек = ОбработкаОбъект.УпаковатьНастройкиВСтруктуруМодуль(Объект);
 			
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") 
		И СтруктураНастроек.Свойство("ПользовательскиеНастройки") Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек);
		
	Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Настройки не восстановлены.");
	КонецЕсли;  		
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(мКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	ПрименитьНастройки(НастройкаПоУмолчанию);
	
	Если НЕ ЗначениеЗаполнено(Объект.Период.ДатаНачала)
		И НЕ ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
		
		ПериодДень = Новый СтандартныйПериод;
		ПериодДень.Вариант = ВариантСтандартногоПериода.Сегодня;
		
		Объект.Период = ПериодДень;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура устанавливает настройки указанные в форме настройки.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
&НаСервере
Процедура УстановитьДопНастройки(СтруктураНастроек)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек);

КонецПроцедуры // УстановитьДопНастройки()

#КонецОбласти

#КонецОбласти
