#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мЭтоРегламентнаяОперация Экспорт; // Хранит флаг выполнения регламентной операцией.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыВосстановленияИСохраненияНастроекДляУправляемогоПриложения

// Функция создает структуру, хранящую настройки.
// 
// Параметры:
//   Объект.
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
Функция УпаковатьНастройкиВСтруктуруМодуль(Объект) Экспорт

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Период"			, Объект.Период);
 	  	
	СтруктураНастроек.Вставить("ПользовательскиеНастройки", Объект.КомпоновщикНастроек.ПользовательскиеНастройки);
			
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуруМодуль()

// Функция создает структуру, хранящую настройки.
// 
// Параметры:
//   Объект.
//   СтруктураНастроек - Структура.
// 
Процедура РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек) Экспорт

	СтруктураНастроек.Свойство("Период"			, Объект.Период);
	
	// Загрузка пользовательских настроек в компоновщик.
	ПользовательскиеНастройки = СтруктураНастроек.ПользовательскиеНастройки;
	Объект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	
КонецПроцедуры // РаспоковатьНастройкиИзСтруктурыМодуль()

#КонецОбласти

// Функция инициализирует схему компоновки данных и пользовательские настройки.
// 
// Параметры:
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - настройки которые будут заполнены из макета СКД.
// 	МассивВидовДокументов - Массив - виды документов которые надо отобрать в перечень.
// 	ИнициализироватьНастройки - булево - Истина - при инициализации СКД будут обновлены пользовательские настройки
// 									при изменении видов документов обновлять настройки не надо.
// 
// Возвращаемое значение:
// 	АдресСхемыКомпоновкиДанных - строка - адрес временного хранилища, где хранится СКД.
// 
Функция ИнициализироватьКомпоновщик(пКомпоновщик, ИнициализироватьНастройки=Истина) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("СКДПереченьДокументов");
	
	НаборДанныхСКД = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ТекстЗапроса = НаборДанныхСКД.Запрос;
		
	НаборДанныхСКД.Запрос = ТекстЗапроса;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	Если ИнициализироватьНастройки Тогда
		пКомпоновщик.Инициализировать(ИсточникНастроек);
		пКомпоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции

// Функция формирует перечень документов для закрытия.
// 
// Параметры:
// 	АдресСхемыКомпоновкиДанных - Строка - адрес временного хранилища, где хранится СКД.
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - пользовательские настройки.
// 	СтруктураПараметров - Структура, ОбработкаОбъект - значения параметров для подстановки в СКД.
// 
// Возвращаемое значение:
// 	ТаблицаПереченьПолный - ТаблицаЗначений.
// 
Функция ЗаполнитьПереченьДокументов(АдресСхемыКомпоновкиДанных, пКомпоновщик, СтруктураПараметров) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ПараметрыСКД = пКомпоновщик.Настройки.ПараметрыДанных;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("Период"			, СтруктураПараметров.Период);
	ПараметрыСКД.УстановитьЗначениеПараметра("ПустаяДата"		, Дата("00010101"));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиСКД = пКомпоновщик.ПолучитьНастройки();
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
												НастройкиСКД,
												,
												,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаПереченьПолный = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаПереченьПолный);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// ПереченьДокументов.Загрузить(ТаблицаПереченьПолный);
	
	Возврат ТаблицаПереченьПолный;
	
КонецФункции

// Процедура выполняет закрытие документов планирования.
// 
// Параметры:
//  ТаблицаДокументов - ТаблицаЗначений - перечень документов.
// 	СтруктураПараметров - Структура, ОбработкаОбъект - параметры.
// 
Процедура ВыполнитьСозданиеДокументовПланирования(ТаблицаДокументов, СтруктураПараметров) Экспорт
	
	СписокДокументов = Новый Массив; 
	
	ВыводитьОшибки         = Истина;
	ВыводитьИнформацию     = Истина;

	Для Каждого Стр Из ТаблицаДокументов Цикл
		
		Если Стр.Создать Тогда
			СчетНаОплату = Стр.Документ;
			
			ДокОбъект = Документы.бит_ПланируемоеПоступлениеДенежныхСредств.СоздатьДокумент();
			ДокОбъект.ЗаполнитьПоОснованию(СчетНаОплату);
			
			Если Не ЗначениеЗаполнено(ДокОбъект.ЦФО) Тогда
				ДокОбъект.ЦФО = Стр.ЦФО;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокОбъект.СтатьяОборотов) Тогда
				ДокОбъект.СтатьяОборотов = Стр.СтатьяОборотов;
			КонецЕсли;
			
			ДокОбъект.Дата            = ТекущаяДатаСеанса();
			ДокОбъект.ДатаПоступления = Стр.ДатаПоступления;
			                               
			ТекущийПользователь    = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			ДокОбъект.Ответственный = ТекущийПользователь;
			
			// Запишем документ закрытия.
			Попытка
				ПроверкаПроведения = ДокОбъект.ПроверитьЗаполнение();
				РежимЗаписи = ?(ПроверкаПроведения, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
				
				ТекстПроведения = ?(ПроверкаПроведения, "Проведен", "Записан");
				
				ДокОбъект.Записать(РежимЗаписи);
				Если ВыводитьИнформацию Тогда
					ТекстСообщения = НСтр("ru='%2% документ ""%1%"".'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ДокОбъект.Ссылка, ТекстПроведения);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				КонецЕсли; 

				СписокДокументов.Добавить(ДокОбъект.Ссылка);
				
			Исключение

				Если ВыводитьОшибки Тогда
					ТекстСообщения = НСтр("ru='Не удалось записать документ. %1%'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				КонецЕсли; 

			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		ПоместитьВоВременноеХранилище(СписокДокументов, СтруктураПараметров.АдресРезультата);
	КонецЕсли; 
	
КонецПроцедуры // ВыполнитьЗакрытиеДокументовПланирования()

// Процедура настраивае обработку для выполнения регламентной операции
// и закрывает документы планирования.
// 
// Параметры:
//  ТипДокумента - Тип("ДокументСсылка." + ИмяДокумента).
// 
Процедура НастроитьОбработкуДляРегламентнойОперацииИСоздатьДокументыПланирования() Экспорт
    
    мЭтоРегламентнаяОперация = Истина;
    	
	// МассивВидовДокументов = ПолучитьМассивВидовДокументов(ДеревоВидыДокументов);
	
	// Инициализируем текст построителя.
	АдресСКД = ИнициализироватьКомпоновщик(КомпоновщикНастроек);
	
    // Заполним значения по умолчанию.
    Период.ДатаОкончания = ДобавитьМесяц(КонецДня(ТекущаяДата()), 12);
    
    // Заполним перечен документов.
	ТаблицаДокументов = ЗаполнитьПереченьДокументов(АдресСКД, КомпоновщикНастроек, ЭтотОбъект);
	
	// Установим все флаги
	Если ТаблицаДокументов.Колонки.Найти("Создать") = Неопределено Тогда
		ТаблицаДокументов.Колонки.Добавить("Создать", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ТаблицаДокументов.ЗаполнитьЗначения(Истина, "Создать");
	
	ПереченьДокументов.Загрузить(ТаблицаДокументов);
    
    // Выполним закрытие документов планирования.
    ВыполнитьСозданиеДокументовПланирования(ПереченьДокументов, ЭтотОбъект);
    
КонецПроцедуры // НастроитьОбработкуДляРегламентнойОперацииИЗакрытьДокументыПланирования()

#КонецОбласти

#Область Инициализация

мЭтоРегламентнаяОперация = Ложь;

#КонецОбласти

#КонецЕсли
