
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ОбъектВизирования) Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено. "
"Для открытия формы можно воспользоваться командой ""Согласование"" в формах документов.';en='The immediate opening of this form is not provided."
"To open the form, you can use the ""Coordination"" in the forms of documents.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	РазрешеноОбновлять = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(Пользователи.ТекущийПользователь(),
		ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешитьОбновлятьПереченьВиз);
		
	Элементы.УстановленныеВизыОбновитьВизы.Видимость = РазрешеноОбновлять;
	
	Объект.ОбъектВизирования = Параметры.ОбъектВизирования;
	
	МетаОбъект = Объект.ОбъектВизирования.Метаданные();
	ВизированиеДоступно 		   = ВизированиеДоступно(Объект.ОбъектВизирования, МетаОбъект);
	ИспользуетсяВнешнееВизирование = бит_Визирование.ИспользуетсяВнешнееВизирование(МетаОбъект);
	
	//ЭтотОбъект.ТолькоПросмотр 			  = НЕ ВизированиеДоступно;
	//Элементы.ГрафическаяСхема.Доступность = ВизированиеДоступно;
	
	// Проверим, необходимо ли отображать карту маршрута вообще.
	НеОтображатьКарту = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("НеОтображатьКартуСогласования");	
	Элементы.УстановленныеВизыАлгоритмВидимость.Видимость = НЕ НеОтображатьКарту;	
	
	ОбновитьИсторию();
	
	ПодготовитьФормуНаСервере();
	
	ОбновитьДанныеЭПНаФорме(Истина);
	
	ИспользоватьЭП = бит_ЭлектронныеПодписи.ДоступенФункционалЭП();

	УстановитьВидимостьДоступность();
	
	//+СБ Пискунова 06.06.2017 #2691 
	//Добавим реквизиты на формы
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-26 (#2873)
	//ФинКонтрольРоль = ПроверитьРольФинКонтроля();
	//Если НЕ ФинКонтрольРоль Тогда  
	//Заменено на:
	МетаОбъект = Объект.ОбъектВизирования.Метаданные();
	Если бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("Документы", МетаОбъект.Имя) И
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-16 (#3393)
		//ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета")
		//Заменено на:
		(ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета")
			ИЛИ ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"))
			
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-16 (#3393)
	Тогда 
		ФинКонтрольРоль = ПроверитьРольФинКонтроля();
		Если НЕ ФинКонтрольРоль Тогда  
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-26 (#2873)
			СБ_РаботаСФормамиОбъекты.бит_УстановкаВизФормаУправляемаяПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
	//+СБ Пискунова 06.06.2017 #2691    	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-26 (#2873)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-26 (#2873)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-11 (#4054)
	Если ЭтоВходящийДокумент Тогда
		Элементы.УстановленныеВизыПроставитьВсеВизы.Видимость = Ложь;
		Элементы.УстановленныеВизыОчиститьВсеВизы.Видимость = Ложь;
		Элементы.УстановленныеВизыСоздатьЗадачу.Видимость = Ложь;
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-11 (#4054)
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	// Проверка на модифицированность набора другим пользователем.
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("Объект", Объект.ОбъектВизирования);
	
	УстановленныеВизыТек = бит_Визирование.ПрочитатьНаборВиз(СтрОтбор);
	
	//+СБ. Пискунова Виктория #2691 Будем сравнивать таблицы без даты установки
	//ТабВизыНач = УстановленныеВизыНач.Выгрузить(,"ИД, Решение, Комментарий, Пользователь, ДатаУстановки, АктивнаяВиза");
	//ТабВизыТек = УстановленныеВизыТек.Выгрузить(,"ИД, Решение, Комментарий, Пользователь, ДатаУстановки, АктивнаяВиза");
	ТабВизыНач = УстановленныеВизыНач.Выгрузить(,"ИД, Решение, Комментарий, Пользователь");
	ТабВизыТек = УстановленныеВизыТек.Выгрузить(,"ИД, Решение, Комментарий, Пользователь");
	//-СБ. Пискунова Виктория #2691 Будем сравнивать таблицы без даты установки
	
	флТаблицыИдентичны  = бит_КонтрольЗакрытогоПериода.СравнитьТаблицы(ТабВизыНач, ТабВизыТек);
	
	Если НЕ флТаблицыИдентичны Тогда
		ТекстСообщения = НСтр("ru='Визы были изменены другим пользователем, необходимо перечитать набор виз.';en='Visas have been changed by another user, you need to read a set of visas.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , ,Отказ); 
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	 
	Алгоритм = бит_Визирование.ПолучитьАлгоритмПоНаборуВиз(ТекущийОбъект);
	
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);
	
	Если флВыполнятьПоэтапно Тогда
		
		флДовыполнить = Ложь;
		УстановленныеРешения = Новый Соответствие();
		
		// Проанализируем следует ли довыполнять алгоритм визирования.
		Для каждого СтрокаТаблицы Из УстановленныеВизы Цикл
			Если СтрокаТаблицы.Решение <> СтрокаТаблицы.НачальноеРешение 
				И ЗначениеЗаполнено(СтрокаТаблицы.Решение) 
				И ЗначениеЗаполнено(СтрокаТаблицы.НачальноеРешение) Тогда
				
				флДовыполнить = Истина;
				УстановленныеРешения.Вставить(СтрокаТаблицы.ИД,СтрокаТаблицы.Решение);
			КонецЕсли; 
		КонецЦикла; 
		
		Если флДовыполнить Тогда

			// Сброс решения на пустое для очистки нижестоящих виз.
			Для каждого Запись Из ТекущийОбъект Цикл
				УстРешение = УстановленныеРешения[Запись.ИД];
				Если ЗначениеЗаполнено(УстРешение) Тогда
					Запись.Решение = Справочники.бит_ВидыРешенийСогласования.ПустаяСсылка();
				КонецЕсли; 
			КонецЦикла;
			
			бит_Визирование.ДовыполнитьАлгоритмВизирования(Объект.ОбъектВизирования,ТекущийОбъект,Ложь);
			
			// Восстановление установленных решений
			Для каждого Запись Из ТекущийОбъект Цикл
				УстРешение = УстановленныеРешения[Запись.ИД];
				Если ЗначениеЗаполнено(УстРешение) Тогда
					Запись.Решение = УстРешение;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	
	бит_Визирование.УстановитьКрайниеДатыВизирования(Объект.ОбъектВизирования,ТекущийОбъект,Ложь);
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// ПриЧтенииНаСервере может вызываться раньше ПриСозданииНаСервере
	// в этом случае реквизиты обработки еще не заполнены и ОбъектВизирования нужно определять по параметрам.
	ТекОбъектВизирования = Неопределено;	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектВизирования) Тогда
		Параметры.Свойство("ОбъектВизирования", ТекОбъектВизирования);
	Иначе
		ТекОбъектВизирования = Объект.ОбъектВизирования;
	КонецЕсли; 	
	
	// + БИТ AMerkulov 2014-06-24 /  Установка бюджетодержателя
	Если ТипЗнч(ТекОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
		бит_ФормаВводаБюджетаВызовСервера.УстановитьБюджетодержателя(ТекОбъектВизирования);
	КонецЕсли;
	// - БИТ AMerkulov 2014-06-24
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ЭтотОбъект.ВизыПользователя = бит_Визирование.ПолучитьВизыПользователя(ТекущийПользователь, 
	ТекОбъектВизирования);
	ОбъектВизирования = Неопределено;
	
	УстановленныеВизыНач.Очистить();
	
	Для каждого ЭлементКоллекции Из УстановленныеВизы Цикл
		
		ПараметрыВизы = ПараметрыВизы(ЭлементКоллекции.Объект, ЭлементКоллекции.Виза, ЭтотОбъект.ВизыПользователя);
		ЭлементКоллекции.ДоступностьВизы = ПараметрыВизы.ДоступностьВизы;
		ЭлементКоллекции.ВидВизы         = ПараметрыВизы.ВидВизы;
		ЭлементКоллекции.ВидСвязиВизы    = ПараметрыВизы.ВидСвязиВизы;
		
		Если НЕ ЗначениеЗаполнено(ОбъектВизирования) Тогда
			ОбъектВизирования = ЭлементКоллекции.Объект;
		КонецЕсли; 
		
		ЭлементКоллекции.НачальноеРешение = ЭлементКоллекции.Решение;
		
		ЗаписьНов = УстановленныеВизыНач.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНов, ЭлементКоллекции);
	КонецЦикла; 
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-09 (#3997)
	ЭтоВходящийДокумент = ТипЗнч(ТекОбъектВизирования) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий");
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-09 (#3997)
	
	РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(ОбъектВизирования);  
	
	ЭтотОбъект.Статус               = РезСтруктура.Статус;
	ЭтотОбъект.ДатаИзмененияСтатуса = РезСтруктура.Дата;
	СтруктураПараметров  = Новый Структура("Статус,ДатаИзмененияСтатуса",РезСтруктура.Статус,РезСтруктура.Дата);
	ИнформацияСтатус     = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
	ПерерисоватьАлгоритмВизирования();  
	
	УстановленныеВизы.Сортировать("КодСортировки");  
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//+СБ Пискунова 14.03.2017 #2691
	ЭтаФорма.ОбновитьОтображениеДанных();
	Модифицированность = Ложь;
	//-СБ Пискунова 14.03.2017 #2691
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Статус               = ТекущийСтатус;
	ДатаИзмененияСтатуса = ТекущаяДатаИзмененияСтатуса;	
	СтруктураПараметров  = Новый Структура("Статус,ДатаИзмененияСтатуса", ТекущийСтатус, ТекущаяДатаИзмененияСтатуса);
	ИнформацияСтатус     = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
	Элементы.УстановленныеВизыАлгоритмВидимость.Пометка = НЕ АлгоритмСкрыт;
	Если АлгоритмПоложение = 0 Тогда 
		Элементы.АлгоритмПоложение.Заголовок =  НСтр("ru='Алгоритм снизу';en='Algorithm below'");
	Иначе	
		Элементы.АлгоритмПоложение.Заголовок =  НСтр("ru='Алгоритм справа';en='Algorithm to the right'");		
	КонецЕсли; 
	
	флВидимостьАлгоритма = ОпределитьВидимостьАлгоритма();
	УстановитьВидимостьАлгоритма(флВидимостьАлгоритма);	
	
	# Если ВебКлиент Тогда
		// В вебклиенте ДвоичныеДанныеИзСтроки() вызывает ошибку.
		ИспользоватьЭП = Ложь;	
	# КонецЕсли
	
	Если ИспользоватьЭП Тогда
		ПроверитьВсеПодписи();
	КонецЕсли;
	
	//+СБ Пискунова #2691 01.03.2017 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-26 (#2873)
	Если ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-26 (#2873)
		//+СБ Пискунова #2691 01.03.2017 
		ФинКонтрольРоль = ПроверитьРольФинКонтроля();
		НаличиеОтклонений = бит_Визирование.ПроверитьОтклоненияПоВизам(Объект.ОбъектВизирования);
		// +СБ Кузнецова С. 2017-07-06 
		//Если  не НаличиеОтклонений или  мКэшЗначений.Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Согласована") или не ФинКонтрольРоль Тогда
		Если не ФинКонтрольРоль Тогда
			// -СБ Кузнецова С.
			ЭтаФорма.Элементы.УстановленныеВизы.ТолькоПросмотр = Истина;
		КонецЕсли;  	
		//-СБ Пискунова #2691 01.03.2017
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-26 (#2873)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-26 (#2873)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ДействияПослеЗаписиФорма();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДействияПослеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДействияПослеПринятияРешения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ОбработкаРасшифровки" поля табличного документа "ТабДокументАлгоритм".
// 
&НаКлиенте
Процедура ТабДокументАлгоритмОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-26 (#2873)
	//Если ТолькоПросмотр Тогда
	//Заменено на:  	
	Если ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") И
   		 (ТолькоПросмотр ИЛИ
		 Элементы.УстановленныеВизы.ТолькоПросмотр = Истина)		
	Тогда
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-26 (#2873)
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		ТекущийРисунок = Элемент.ТекущаяОбласть;
		Если Расшифровка.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие") Тогда
			
			 Если НЕ Расшифровка.Доступность Тогда
			 	Возврат;
			 КонецЕсли; 
			 
			// Выполняем поиск строки виз по ИД
			ТекущаяСтрока = Неопределено;
			СтрОтбор   	  = Новый Структура("ИД",Расшифровка.ИД);
			МассивСтрок   = УстановленныеВизы.НайтиСтроки(СтрОтбор);
			Если МассивСтрок.Количество()>0 Тогда
				ТекущаяСтрока = МассивСтрок[0];
			КонецЕсли; 
			
			Если ТекущаяСтрока <> Неопределено Тогда
				ОткрытьФормуВыбораРешения(ТекущаяСтрока);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура тдИсторияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУстановленныеВизы

&НаКлиенте
Процедура УстановленныеВизыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные      = Элементы.УстановленныеВизы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	флЭлементыДоступны = ЭлементыТаблицыДоступны(ТекущиеДанные);
	
	Для каждого ЭлементТаблицы Из Элементы.УстановленныеВизы.ПодчиненныеЭлементы Цикл
		
		Если НЕ ТипЗнч(ЭлементТаблицы) = Тип("ГруппаФормы") Тогда
			 
			Если НЕ ЭлементТаблицы.Имя = "УстановленныеВизыДобавленаВручную" Тогда
				ЭлементТаблицы.ТолькоПросмотр = НЕ флЭлементыДоступны;
			КонецЕсли; 
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-15 (#4054)
			Если ЭтоВходящийДокумент И ЭлементТаблицы.Имя = "УстановленныеВизыКомментарий" Тогда
				ЭлементТаблицы.ТолькоПросмотр = Истина;	
			КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-15 (#4054) 
		КонецЕсли; 
	
	КонецЦикла; 
	
	Элементы.УстановленныеВизыВиза.ТолькоПросмотр = НЕ ТекущиеДанные.ДобавленаВручную;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановленныеВизыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.УстановленныеВизы.ТекущиеДанные;
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.ДобавленаВручную = Истина;
		ТекущиеДанные.Объект           = Объект.ОбъектВизирования;
		ТекущиеДанные.ИД        	   = Строка(Новый УникальныйИдентификатор);
		
		ПараметрыВизы = ПараметрыВизы(Объект.ОбъектВизирования, ТекущиеДанные.Виза, ЭтотОбъект.ВизыПользователя);
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Виза) Тогда
			ТекущиеДанные.ДоступностьВизы = Истина;
		Иначе
			ТекущиеДанные.ДоступностьВизы = ПараметрыВизы.ДоступностьВизы;
		КонецЕсли;
		ТекущиеДанные.ВидВизы         = ПараметрыВизы.ВидВизы;
		ТекущиеДанные.ВидСвязиВизы    = ПараметрыВизы.ВидСвязиВизы;
		
		// BIT AMerkulov 08-02-2015 ++
		ТекущиеДанные.УстановщикРучнойВизы =  ПользователиКлиентСервер.ТекущийПользователь();
		// BIT AMerkulov 08-02-2015 --
		
	    Элементы.УстановленныеВизыВиза.ТолькоПросмотр = НЕ ТекущиеДанные.ДобавленаВручную;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановленныеВизыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.УстановленныеВизы.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ДобавленаВручную Тогда
		Отказ 		   = Истина;
		ТекстСообщения = СтрШаблон(НСтр("ru='Виза ""%1"" установлена по умолчанию и не может быть удалена.';en='Visa ""%1"" is set and can not be deleted by default.'"),
							ТекущиеДанные.Виза); 
		ПоказатьПредупреждение(,ТекстСообщения);	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановленныеВизыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановленныеВизыВизаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УстановленныеВизы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВизы = ПараметрыВизы(Объект.ОбъектВизирования, ТекущиеДанные.Виза, ЭтотОбъект.ВизыПользователя);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыВизы,, "ВремяНаУстановку");
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-04 (#3816)
	//ТекущиеДанные.ДатаКрайняя = ТекущаяДатаСеансаСервер() + ПараметрыВизы.ВремяНаУстановку * 60; 
	ТекущиеДанные.ДатаКрайняя = бит_Визирование.ПолучитьКрайнююДату(УстановленныеВизы.Отбор.Объект.Значение, ТекущаяДатаСеансаСервер(), (ТекущаяДатаСеансаСервер() + ПараметрыВизы.ВремяНаУстановку * 60));		
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-04 (#3816)
	
КонецПроцедуры

&НаСервере
Функция ТекущаяДатаСеансаСервер()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиенте
Процедура УстановленныеВизыФизическоеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//ТекущиеДанные = Элементы.УстановленныеВизы.ТекущиеДанные;
	//
	//Если ТекущиеДанные.ВидСвязиВизы = ПредопределенноеЗначение("Перечисление.бит_ВидыСвязиВиз.ЦФО") Тогда
	//	ТекОписание = Новый ОписаниеТипов(бит_ОбщегоНазначения.ПолучитьИмяТипаЦФО());
	//Иначе  
	//	ТекОписание = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	//КонецЕсли; 
	//
	//Элементы.УстановленныеВизыФизическоеЛицо.ОграничениеТипа = ТекОписание;
	//Элементы.УстановленныеВизыФизическоеЛицо.ВыбиратьТип     = Ложь;
	
	//БИТ АКриштопов 22042016 ++ Дополнения по задаче 2240
	Если ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
		//БИТ АКриштопов 04042016 ++
		ФинКонтрольРоль = ПроверитьРольФинКонтроля();
		Если НЕ ФинКонтрольРоль Тогда
			Сообщение = новый СообщениеПользователю;
			Сообщение.Текст = "Устанавливать фамилии ответственных лиц может только Фин.контролер.";
			Сообщение.Сообщить();
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		//+БИТ Сундукова 17.05.16 №2464
		ТекОписание = Новый ОписаниеТипов("СправочникСсылка.бит_БК_Инициаторы");
		Элементы.УстановленныеВизыФизическоеЛицо.ОграничениеТипа = ТекОписание;
		Элементы.УстановленныеВизыФизическоеЛицо.ВыбиратьТип     = Ложь;
		//-БИТ Сундукова 17.05.16 №2464

	КонецЕсли;
	//БИТ АКриштопов 04042016 --
	
КонецПроцедуры

&НаКлиенте
Процедура УстановленныеВизыФизическоеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УстановленныеВизы.ТекущиеДанные;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-13 (#4117)
	ТекущиеДанные.Пользователь = "";
	ТекущиеДанные.Решение = "";
	ТекущиеДанные.Комментарий = "";
	ТекущиеДанные.ДатаУстановки = Дата(1,1,1);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-13 (#4117) 
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо) 
		  И ТипЗнч(ТекущиеДанные.ФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		  
	   ТекущиеДанные.Должность = ПолучитьДолжность(Объект.ОбъектВизирования,ТекущиеДанные.ФизическоеЛицо);
	Иначе	
	   ТекущиеДанные.Должность = "";
   КонецЕсли; 
   
   // BIT AMerkulov 03-04-2015 ++
	Если ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
		Если ТекущиеДанные.Виза = ПредопределенноеЗначение("Справочник.бит_Визы.бит_БК_Бюджетодержатель") Тогда
			//БИТ АКриштопов 17052016 ++ #2463
			ОбновитьОЦР = ПроверкаОЦР(ЭтаФорма.ВладелецФормы.Объект.ОК_ОЦР);
			Если ЗначениеЗаполнено(ТекущиеДанные.Решение) Тогда
				ТекущиеДанные.Решение = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка");
			КонецЕсли;
			//ЭтаФорма.ВладелецФормы.Объект.ОК_ОЦР = ОК_ОЦР
			Если ОбновитьОЦР Тогда
				ЭтаФорма.ВладелецФормы.Объект.ОК_ОЦР = ТекущиеДанные.ФизическоеЛицо;
				ПутиКПолям=Новый Соответствие;
				ПутиКПолям.Вставить("Объект_ОЦР_ЦФО","ТекущиеДанные.ФизическоеЛицо.ЦФО");
				ПутиКПолям.Вставить("Объект_ОЦР_ОбъектСтроительства","ТекущиеДанные.ФизическоеЛицо.ОбъектСтроительства");
				ПутиКПолям.Вставить("Объект_ОЦР_Должность","ТекущиеДанные.ФизическоеЛицо.Должность");
				ПутиКПолям.Вставить("Объект_ОЦР_Email","ТекущиеДанные.ФизическоеЛицо.Email");
				ПутиКПолям.Вставить("Объект_ОЦР_Телефон","ТекущиеДанные.ФизическоеЛицо.Телефон");
				Попытка
					Для Каждого стр из ПутиКПолям Цикл	
						//РеквизитыЗначение.Вставить(стр.ключ,вычислить(стр.Значение));	
						ЭтаФорма.ВладелецФормы[стр.ключ]=вычислить(стр.Значение);
					КонецЦикла;
				Исключение
				КонецПопытки;
				ЗаписатьИзменениеОбъекта(Объект.ОбъектВизирования,ТекущиеДанные.ФизическоеЛицо);
			КонецЕсли;
			//Сообщить("Выполнено обновление ОЦР в заявке: " + ТекущаяСтрока.ФизическоеЛицо);
			//БИТ АКриштопов 17052016 -- #2463
		КонецЕсли;
	КонецЕсли;
	// BIT AMerkulov 03-04-2015 --
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-12 (#3997)
	ПараметрыВизы = ПараметрыВизы(Объект.ОбъектВизирования, ТекущиеДанные.Виза, ЭтотОбъект.ВизыПользователя);
	ТекущиеДанные.ДатаКрайняя = бит_Визирование.ПолучитьКрайнююДату(УстановленныеВизы.Отбор.Объект.Значение, ТекущаяДатаСеансаСервер(), (ТекущаяДатаСеансаСервер() + ПараметрыВизы.ВремяНаУстановку * 60));	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-12 (#3997) 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановленныеВизыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-09 (#3997)
	Если ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;	
	КонецЕсли;
	
	Если ЭтоВходящийДокумент Тогда		
		ТекущаяСтрока = УстановленныеВизы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если НЕ ТекущаяСтрока.ДоступностьВизы Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-09 (#3997) 
	
	Если Поле = Элементы.ОтображениеЭЦП Тогда
		
		ОткрытьФормуПодписи(УстановленныеВизы.НайтиПоИдентификатору(ВыбраннаяСтрока));
		
	ИначеЕсли Поле = Элементы.УстановленныеВизыРешение 
		 ИЛИ Поле = Элементы.УстановленныеВизыКомментарий Тогда
		 		 
		СтандартнаяОбработка = Ложь; 
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-15 (#4054)
		Если ЭтоВходящийДокумент Тогда
			Возврат;
		КонецЕсли;		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-15 (#4054) 
		ОткрытьФормуВыбораРешения(УстановленныеВизы.НайтиПоИдентификатору(ВыбраннаяСтрока));
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура УстановленныеВизыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	//Если ПроверитьЗаполнение() Тогда		
		Записать();
	//КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПоляФормыГрафическаяСхема

&НаКлиенте
Процедура ГрафическаяСхемаВыбор(Элемент)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли; 
	
	Если Элементы.ГрафическаяСхема.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КодТочки = Элементы.ГрафическаяСхема.ТекущийЭлемент.Имя;
	СтрокаТаблицыТочек = Неопределено;
	
	// Выполняем сканирование, что бы избежать серверного вызова при поиске в таблице.
	Для каждого СтрокаТаблицы Из ТаблицаТочкиВизы Цикл
		Если СтрокаТаблицы.КодТочки = КодТочки Тогда
			СтрокаТаблицыТочек = СтрокаТаблицы;
			Прервать;		
		КонецЕсли;
	КонецЦикла; 
	
	Если СтрокаТаблицыТочек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрокаТаблицыТочек.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие") Тогда
		Возврат;	 
	КонецЕсли;
	
	КлючЗапиписи = Неопределено;
	// Выполняем сканирование, что бы избежать серверного вызова при поиске в таблице.
	Для каждого СтрокаТаблицы Из УстановленныеВизы Цикл
		Если СтрокаТаблицы.ИД = СтрокаТаблицыТочек.ИД Тогда
			КлючЗапиписи = СтрокаТаблицы;
			Прервать;		
		КонецЕсли;
	КонецЦикла; 
	
	Если КлючЗапиписи = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФормуВыбораРешения(КлючЗапиписи);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьВизы(Команда)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли; 

	Попытка
		ОбновитьВизыСервер();
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось обновить визы по причине: %1';en='Failed to update a visa for a reason:%1'"), 
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстСообщения; 	
	КонецПопытки; 
	
	ДействияПослеЗаписиФорма();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьВсеВизы(Команда)
	
	//БИТ АКриштопов 22042016 ++ Дополнения по задаче 2240
	Если ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
		//БИТ АКриштопов 13042016 ++
		ФинКонтрольРоль = ПроверитьРольФинКонтроля();
		Если НЕ ФинКонтрольРоль Тогда 
			Попытка
				ТекИнициатор = НайтиИнициатора(ПользователиКлиент.ТекущийПользователь());
				Для каждого СтрокаТаблицы Из УстановленныеВизы Цикл
					Если ТипЗнч(СтрокаТаблицы.ФизическоеЛицо) = Тип("СправочникСсылка.бит_БК_Инициаторы") И ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицо) Тогда
						ИнициаторВизы = СтрокаТаблицы.ФизическоеЛицо;
						Если ТекИнициатор = ИнициаторВизы Тогда
							флЭлементыДоступны = ЭлементыТаблицыДоступны(СтрокаТаблицы);					
							Если флЭлементыДоступны И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение) Тогда	
								УстановитьВизу(СтрокаТаблицы);					
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Исключение
			КонецПопытки;
		Иначе
			Для каждого СтрокаТаблицы Из УстановленныеВизы Цикл
				
				флЭлементыДоступны = ЭлементыТаблицыДоступны(СтрокаТаблицы);
				
				Если флЭлементыДоступны И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение) И ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицо) Тогда
					
					УстановитьВизу(СтрокаТаблицы);
					
				КонецЕсли; 
				
			КонецЦикла;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-14 (#2880)				
			бит_Визирование.УстановитьКрайниеДатыВизирования(Объект.ОбъектВизирования,,Ложь);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-14 (#2880)				
			
		КонецЕсли;
	Иначе 
		Для каждого СтрокаТаблицы Из УстановленныеВизы Цикл
		
			флЭлементыДоступны = ЭлементыТаблицыДоступны(СтрокаТаблицы);
			
			Если флЭлементыДоступны И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение) Тогда
				УстановитьВизу(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	//БИТ АКриштопов 13042016 --
	//БИТ АКриштопов 22042016 --
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеВизы(Команда)
	
	Для каждого СтрокаТаблицы Из УстановленныеВизы Цикл
	
		флЭлементыДоступны = ЭлементыТаблицыДоступны(СтрокаТаблицы);
		
		Если флЭлементыДоступны Тогда
		
			ОчиститьВизу(СтрокаТаблицы);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПоложение(Команда)
	
	Если ЭтотОбъект.АлгоритмПоложение = 0 Тогда
		
		ЭтотОбъект.АлгоритмПоложение = 1;
		Элементы.АлгоритмПоложение.Заголовок =  НСтр("ru='Алгоритм справа';en='Algorithm to the right'");
		
	Иначе	
		
		ЭтотОбъект.АлгоритмПоложение = 0;
		Элементы.АлгоритмПоложение.Заголовок =  НСтр("ru='Алгоритм снизу';en='Algorithm below'");		
		
	КонецЕсли; 
	
	флВидимостьАлгоритма = ОпределитьВидимостьАлгоритма();	
	УстановитьВидимостьАлгоритма(флВидимостьАлгоритма);		
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмВидимость(Команда)
	
	Элементы.УстановленныеВизыАлгоритмВидимость.Пометка = НЕ Элементы.УстановленныеВизыАлгоритмВидимость.Пометка;
	
	АлгоритмСкрыт = НЕ Элементы.УстановленныеВизыАлгоритмВидимость.Пометка;
	
	флВидимостьАлгоритма = ОпределитьВидимостьАлгоритма();
	УстановитьВидимостьАлгоритма(флВидимостьАлгоритма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьСообщение(Команда)
	
	Если НЕ ПустаяСтрока(фСообщение) Тогда
		
		ОтправитьСообщение();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьСообщение(Команда)
	
	фСообщение = "";
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	
	ТекущиеДанные = Элементы.УстановленныеВизы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗадачи = ПолучитьСтруктуруЗадачи(Объект.ОбъектВизирования, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если СтруктураЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураЗадачи", СтруктураЗадачи);
	
	ОткрытьФорму("Задача.бит_уп_Задача.Форма.ФормаСозданияЗадачиУправляемая",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбзорСхемы(Команда)
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("ГрафическаяСхема", ГрафическаяСхема);
	
	ОткрытьФорму("Справочник.бит_уп_Алгоритмы.Форма.ОбзорСхемы", ПараметрыФормы, 
		ЭтотОбъект, Объект.ОбъектВизирования);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаЭЦП

&НаКлиенте
Процедура ПодписатьЭП(Команда)
	
	Если НЕ ИспользоватьЭП Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные = Элементы.УстановленныеВизы.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Решение) Тогда 
		
		ТекстСообщения = НСтр("ru='Можно подписать только визу с заполненным результатом согласования.';en='You can sign a visa only with the completed result of harmonization.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
				
	КонецЕсли;
		
	СтрокаДляКодировки = Строка(ТекущиеДанные.Виза) +  Строка(ТекущиеДанные.Пользователь) + Строка(ТекущиеДанные.Решение) +Строка(ТекущиеДанные.ДатаУстановки) + ТекущиеДанные.ИД;
		
	ДвоичныеДанныеИД = ДвоичныеДанныеИзСтроки(СтрокаДляКодировки);

	СтруктураПарметров = Новый Структура;
	СтруктураПарметров.Вставить("ДвоичныеДанныеИД", ДвоичныеДанныеИД);
	СтруктураПарметров.Вставить("Контейнер", ТекущиеДанные);
    СтруктураПарметров.Вставить("ОбъектПодписи", Объект.ОбъектВизирования);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьПродолжение",
		ЭтотОбъект, СтруктураПарметров);
		
	Если Модифицированность Тогда
		
		ТекстСообщения = НСтр("ru='Данные еще не записаны."
"Выполнение действия ""Подписать"" возможно только после записи данных.';en='Data are not yet recorded."
"Implementation of action ""sign"" is possible only after the data.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		//ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли ТекущиеДанные.ПодписанЭП Тогда
		
		СтруктураПарметров.Вставить("ВизаПодписана", Истина);
		
		ТекстСообщения = НСтр("ru='Виза уже подписана, хотите переподписать?';en='Visa has signed it or re-sign?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ОКОтмена);
	
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПродолжение(Результат, СтруктураПарметров) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		
		Возврат;
						
	КонецЕсли;
	
	Операция = НСтр("ru='Подписание визы согласования';en='The signing of the visa coordination'");

	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	ОписаниеДанных.Вставить("Операция",            Операция);
	ОписаниеДанных.Вставить("ПараметрыДополнительныхДействий", "ПодписьБИТ");

	ОписаниеДанных.Вставить("НаборДанных", Новый Массив);
	ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", СтруктураПарметров.ДвоичныеДанныеИД));
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект, СтруктураПарметров);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ЭтотОбъект , ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, СтруктураПараметров) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыПодписи = Новый Структура;
	ПараметрыПодписи.Вставить("Объект", Объект.ОбъектВизирования);
	ПараметрыПодписи.Вставить("ИД",     СтруктураПараметров.Контейнер.ИД);
	ПараметрыПодписи.Вставить("Виза",     СтруктураПараметров.Контейнер.Виза);
    ПараметрыПодписи.Вставить("СвойстваПодписи", Результат.ТекущийЭлементНабораДанных.СвойстваПодписи);

	Если СтруктураПараметров.Свойство("ВизаПодписана") Тогда
		бит_ЭлектронныеПодписи.ПроверитьУдалитьПодписьВизы(СтруктураПараметров.Контейнер.ИД, Объект.ОбъектВизирования);
	КонецЕсли;
	
	бит_ЭлектронныеПодписи.ЗанестиИнформациюОПодписи(ПараметрыПодписи);	
	
	бит_ЭлектронныеПодписи.ЗаписатьДанныеПодписиВРегистрУстановленныеВизы(СтруктураПараметров.Контейнер.ИД, Объект.ОбъектВизирования,, "Подпись");
	
	ОбновитьДанныеЭПНаФорме();
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭП(Команда)
	
	Если НЕ ИспользоватьЭП Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные = Элементы.УстановленныеВизы.ТекущиеДанные;
	
	СтрокаДляКодировки = Строка(ТекущиеДанные.Виза) +  Строка(ТекущиеДанные.Пользователь) + Строка(ТекущиеДанные.Решение) +Строка(ТекущиеДанные.ДатаУстановки) + ТекущиеДанные.ИД;
		
	ДвоичныеДанныеИД = ДвоичныеДанныеИзСтроки(СтрокаДляКодировки);

	СтруктураПарметров = Новый Структура;
	СтруктураПарметров.Вставить("ДвоичныеДанныеИД", ДвоичныеДанныеИД);
	СтруктураПарметров.Вставить("Контейнер", ТекущиеДанные);
	СтруктураПарметров.Вставить("Объект", Объект.ОбъектВизирования);
	
	Если Модифицированность Тогда
		
		ТекстСообщения = НСтр("ru='Данные еще не записаны."
"Выполнение действия ""Проверить ЭП"" возможно только после записи данных.';en='Data are not yet recorded."
"Implementation of the action ""Check EP"" is possible only after the data.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		//ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		Подпись = ПолучитьДанныеПодписи(СтруктураПарметров.Контейнер.ИД, Объект.ОбъектВизирования,"Команда" ,СтруктураПарметров.Контейнер.Виза);

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроверитьЭПЗавершение",
			ЭтотОбъект, СтруктураПарметров);
			
		Если ЗначениеЗаполнено(Подпись) Тогда
			бит_ЭлектроннаяПодписьСлужебныйКлиент.ПроверитьПодпись(ОписаниеОповещения, СтруктураПарметров.ДвоичныеДанныеИД, Подпись);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭППродолжение(Результат, СтруктураПарметров) Экспорт
		
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		РезультатПроверкиПодписи = Результат;

	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда	
		РезультатПроверкиПодписи = Не Результат.Свойство("ТекстОшибкиПроверкиПодписи");
		
	КонецЕсли;
	
	бит_ЭлектронныеПодписи.ЗаписатьДанныеПодписиВРегистрУстановленныеВизы(ДополнительныеПараметры.Контейнер.ИД, Объект.ОбъектВизирования, РезультатПроверкиПодписи, "Проверка");
		
	СтатусПроверкиПодписи = "";
	
	бит_ЭлектронныеПодписи.ОбновитьСтатусПроверкиПодписи(Результат, ДополнительныеПараметры.Контейнер.ИД, Объект.ОбъектВизирования, СтатусПроверкиПодписи);
	
	ТекстСообщения = НСтр("ru='Результат проверки подписи: %1.';en='The result of the signature verification: %1.'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, СтатусПроверкиПодписи);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

	ОбновитьДанныеЭПНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	Если НЕ ИспользоватьЭП Тогда
		Возврат;
	КонецЕсли; 
	
	ПроверитьВсеПодписи("Команда");
	
КонецПроцедуры

// Процедура проверяет все подписи в ТЧ "Установленные визы" 
//
// Параметры:
//  Параметр1 - Строка.
//
&НаКлиенте
Процедура ПроверитьВсеПодписи(ВидОбработки = Неопределено)
	
	Если Модифицированность Тогда
			
		ТекстСообщения = НСтр("ru='Данные еще не записаны."
"Выполнение действия ""Проверить все"" возможно только после записи данных.';en='Data are not yet recorded."
"Implementation of the action ""Check All"" is possible only after the data.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
	Иначе
			
		Для каждого Эл Из ЭтотОбъект.УстановленныеВизы Цикл
			
			СтрокаДляКодировки = Строка(Эл.Виза) +  Строка(Эл.Пользователь) + Строка(Эл.Решение) +Строка(Эл.ДатаУстановки) + Эл.ИД;
				
			ДвоичныеДанныеИД = ДвоичныеДанныеИзСтроки(СтрокаДляКодировки);

			СтруктураПарметров = Новый Структура;
			СтруктураПарметров.Вставить("ДвоичныеДанныеИД", ДвоичныеДанныеИД);
			СтруктураПарметров.Вставить("Контейнер", Эл);
			СтруктураПарметров.Вставить("Объект", Объект.ОбъектВизирования);
			СтруктураПарметров.Вставить("ВидОбработки", ВидОбработки);
			
			Подпись = ПолучитьДанныеПодписи(СтруктураПарметров.Контейнер.ИД, Объект.ОбъектВизирования, ВидОбработки, Эл.Виза);

			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПроверитьВсеЗавершение",
				ЭтотОбъект, СтруктураПарметров);
				
			Если ЗначениеЗаполнено(Подпись) Тогда
				бит_ЭлектроннаяПодписьСлужебныйКлиент.ПроверитьПодпись(ОписаниеОповещения, СтруктураПарметров.ДвоичныеДанныеИД, Подпись);
			КонецЕсли;

		КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры // ПроверитьВсеПодписи()

&НаКлиенте
Процедура ПроверитьВсеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		РезультатПроверкиПодписи = Результат;

	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда	
		РезультатПроверкиПодписи = Не Результат.Свойство("ТекстОшибкиПроверкиПодписи");
		
	КонецЕсли;
	
	бит_ЭлектронныеПодписи.ЗаписатьДанныеПодписиВРегистрУстановленныеВизы(ДополнительныеПараметры.Контейнер.ИД, Объект.ОбъектВизирования, РезультатПроверкиПодписи, "Проверка");
	
	СтатусПроверкиПодписи = "";
	
	бит_ЭлектронныеПодписи.ОбновитьСтатусПроверкиПодписи(Результат, ДополнительныеПараметры.Контейнер.ИД, Объект.ОбъектВизирования, СтатусПроверкиПодписи);
	
	Если ДополнительныеПараметры.ВидОбработки = "Команда" Тогда
		
		ТекстСообщения = НСтр("ru='Результат проверки подписи визы ""%1"": %2.';en='Test result visa signature ""%1"": %2.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(ДополнительныеПараметры.Контейнер.Виза), СтатусПроверкиПодписи);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

	КонецЕсли;
	
	ОбновитьДанныеЭПНаФорме();
	
КонецПроцедуры

// Процедура обновляет отображение значка подписи в строке ТЧ "Установленные визы"
//
// Параметры:
//
&НаСервере
Процедура ОбновитьДанныеЭПНаФорме(ПриСозданииНаСервере = Ложь)
	
	Если НЕ ПриСозданииНаСервере Тогда
		Прочитать();
	КонецЕсли;

	Для каждого Эл Из ЭтотОбъект.УстановленныеВизы Цикл
		
		Если Эл.ЭПДействительна И Эл.ПодписанЭП Тогда
	
			Эл.ОтображениеЭЦП = 2;
			
		ИначеЕсли Не Эл.ЭПДействительна И Эл.ПодписанЭП Тогда
			
			Эл.ОтображениеЭЦП = 3;
			
		ИначеЕсли Не Эл.ЭПДействительна И Не Эл.ПодписанЭП Тогда

			Эл.ОтображениеЭЦП = 1;
			
		Иначе
			
			Эл.ОтображениеЭЦП = 0;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ОбновитьДанныеЭПНаФорме()

// Получаем двоичные данные из строк для подписи.
//
// Параметры:
//  Стр - Строка,
//
&НаКлиентеНаСервереБезКонтекста
Функция ДвоичныеДанныеИзСтроки(Стр)
            
    HTTPЗапрос = Новый HTTPЗапрос;         
    HTTPЗапрос.УстановитьТелоИзСтроки(Стр);
    Возврат HTTPЗапрос.ПолучитьТелоКакДвоичныеДанные();
                        
КонецФункции

// Считываем данные подписи при попытке проверки ее в строке ТЧ. 
//
// Параметры:
//  ИД - Строка.
//  ОбъектПодписи -  Объект.
//
&НаСервере
Функция ПолучитьДанныеПодписи(ИД, ОбъектПодписи, ВидОбработки = Неопределено, Виза)

	Подпись = Неопределено;
	
	НаборЗаписей = РегистрыСведений.бит_ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИД.Установить(ИД);
	НаборЗаписей.Отбор.Объект.Установить(ОбъектПодписи);
	НаборЗаписей.Прочитать();
	
	Для каждого Набор ИЗ НаборЗаписей Цикл
		ДанныеПодписи = Набор.Подпись;
		Прервать;
	КонецЦикла;
	
	Попытка
		Подпись = ДанныеПодписи.Получить();
	Исключение	
		
		Если ЗначениеЗаполнено(ВидОбработки) Тогда
			
			ТекстСообщения = НСтр("ru='Результат проверки подписи визы ""%1"": Подпись не найдена.';en='The result of the signature verification visa ""%1"": Signature is not found.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Виза);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецПопытки;;
	
	Возврат Подпись;
	
КонецФункции // ПолучитьДанныеПодписи()

&НаКлиенте
Процедура ОткрытьФормуПодписи(ТекущиеДанные)
	
	ТекущиеДанные = Элементы.УстановленныеВизы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли; 

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Объект);
	ПараметрыФормы.Вставить("ИД", ТекущиеДанные.ИД);
	//ПараметрыФормы.Вставить("ПодписьПроверена", ЗначениеЗаполнено(ТекущиеДанные.ДатаПроверкиПодписи));
	//ПараметрыФормы.Вставить("ПодписьВерна", ТекущиеДанные.ПодписьВерна);
	//ПараметрыФормы.Вставить("СертификатДействителен", ТекущиеДанные.СертификатДействителен);
	Попытка
		ОткрытьФорму("РегистрСведений.бит_ЭлектронныеПодписи.ФормаЗаписи", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = НСтр("ru = '%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьФормуВыбораРешения(КлючЗапиписи)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли; 
		
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("ТекущаяСтрока", КлючЗапиписи);
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораРешения", ЭтотОбъект, Дополнительно); 
	
	ДоступныеРешения = МенюРешений.Скопировать();
	Если НЕ КлючЗапиписи.Решение.Пустая() Тогда
		ДоступныеРешения.Добавить(ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка"),
									НСтр("ru = 'Очистить решение'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("МенюРешений", ДоступныеРешения);
	ПараметрыФормы.Вставить("Комментарий", КлючЗапиписи.Комментарий);
	ПараметрыФормы.Вставить("Виза", 	   КлючЗапиписи.Виза);
	ПараметрыФормы.Вставить("Решение", 	   КлючЗапиписи.Решение);
	ПараметрыФормы.Вставить("Объект", 	   КлючЗапиписи.Объект);
	ПараметрыФормы.Вставить("ТолькоПросмотр", НЕ КлючЗапиписи.ДоступностьВизы); 
	
	ОткрытьФорму("Обработка.бит_УстановкаВиз.Форма.ВыборРешения", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,, Оповещение);

КонецПроцедуры

// Обработчик закрытия формы выбора решения.
//  См. Синтакс-помощник: ОткрытьФорму().
// 
&НаКлиенте 
Процедура ЗавершениеВыбораРешения(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = ДополнительныеДанные.ТекущаяСтрока;
	Решение 	  = Результат.Решение;
	Комментарий   = Результат.Комментарий;
	
	Записывать = Истина;
	Если ТекущаяСтрока.Решение = Решение И ТекущаяСтрока.Комментарий = Комментарий Тогда
		Записывать = Ложь;	
	КонецЕсли; 
	
	Если НЕ Записывать Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока.Комментарий = Комментарий;
	
	Если ТекущаяСтрока.Решение <> Решение Тогда
		Если Решение = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка") Тогда
			ОчиститьВизу(ТекущаяСтрока);
			Записывать = Ложь; // Записали в "ОчиститьВизу()"
		Иначе
			ТекущаяСтрока.Решение = Решение;
			УстановитьВизу(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если Записывать Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет доступны ли элементы ТаблицыФормы УстановленныеВизы.
// 
// Параметры:
//  ТекущаяСтрока  - ДанныеФормыЭлементКоллекции.
// 
// Возвращаемое значение:
//   флЭлементыДоступны   - Булево.
// 
&НаКлиенте
Функция ЭлементыТаблицыДоступны(ТекущаяСтрока)

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТекущаяСтрока.ДоступностьВизы;
	
КонецФункции

// Функция выполняет поиск строки в таблице точек по переданной точке.
// 
// Параметры:
//  Точка  - СправочникСсылка.бит_уп_ТочкиАлгоритмов.
// 
// Возвращаемое значение:
//   ТекСтрока   - СтрокаТаблицыЗначений.
// 
&НаКлиенте
Функция НайтиСтрокуТаблицыТочек(Точка)

	ТекСтрока = Неопределено;
	
	СтрОтбор = Новый Структура("Точка",Точка);
	
	РезМассив = ТаблицаТочкиВизы.НайтиСтроки(СтрОтбор);
	
	ТекСтрока = Неопределено;
	Если РезМассив.Количество()>0 Тогда
	
		ТекСтрока = РезМассив[0];
	
	КонецЕсли; 

	Возврат ТекСтрока;
	
КонецФункции // НайтиСтрокуТаблицыТочек()

// Процедура запрещает доступ к предшествующим в алгоритме точкам действия.
// Рекурсивный вызов.
// 
// Параметры:
//  Точка  - СправочникСсылка.бит_уп_ТочкиАлгоритмов.
// 
&НаКлиенте
Процедура ОбработатьВерхниеТочкиДействия(ТочкаНачальная)
	
	ТекСтрока = НайтиСтрокуТаблицыТочек(ТочкаНачальная);
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТаблицыВходящие Из ТекСтрока.ВходящиеТочки Цикл
		
		Если СтрокаТаблицыВходящие.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие") Тогда
			ИзменитьДоступность(СтрокаТаблицыВходящие.Точка);			
		Иначе
			ОбработатьВерхниеТочкиДействия(СтрокаТаблицыВходящие.Точка);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

// Процедура запрещает доступ к последующим в алгоритме точкам действия.
// Рекурсивный вызов.
// 
// Параметры:
//  Точка  - СправочникСсылка.бит_уп_ТочкиАлгоритмов.
// 
&НаКлиенте
Процедура ОбработатьНижниеТочкиДействия(ТочкаНачальная)
	
	ТекСтрока = НайтиСтрокуТаблицыТочек(ТочкаНачальная);
	
	Если ТекСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Для каждого СтрокаТаблицыИсходящие Из ТекСтрока.ИсходящиеТочки Цикл
		
		Если СтрокаТаблицыИсходящие.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие") Тогда
			
			ИзменитьДоступность(СтрокаТаблицыИсходящие.Точка);			
			
		Иначе	
			
			ОбработатьНижниеТочкиДействия(СтрокаТаблицыИсходящие.Точка);
			
		КонецЕсли; 
		
	КонецЦикла; // По исходящим точкам 
	

КонецПроцедуры // ОбработатьНижниеТочкиДействия()

// Процедура изменяет доступность строки таблицы УстановленныеВизы 
// 
// Параметры:
//  Точка  - СправочникСсылка.бит_уп_ТочкиАлгоритмов.
// 
&НаКлиенте
Процедура ИзменитьДоступность(Точка)
	
	СтрокаТаблицыТочек = НайтиСтрокуТаблицыТочек(Точка);
	Если НЕ СтрокаТаблицыТочек = Неопределено Тогда
		
		// Закрываем от редактирования соответствующую строку.
		СтрОтбор  = Новый Структура("ИД",СтрокаТаблицыТочек.ИД);
		РезМассив = УстановленныеВизы.НайтиСтроки(СтрОтбор);
		Если РезМассив.Количество()>0 Тогда
			
			//+СБ Пискунова 15.02.2016 #2691  Определим доступность для всех физ.лиц на одной визе
			//ЭлементКоллекцииВизы           = РезМассив[0];
			//ЭлементКоллекцииВизы.ДоступностьВизы = Ложь;
			Для каждого элем из  РезМассив Цикл 
				элем.ДоступностьВизы = "ЛОЖЬ";
			КонецЦикла;
			//-СБ Пискунова 15.02.2016 #2691  Определим доступность для всех физ.лиц на одной визе
			
		КонецЕсли;				
		
	КонецЕсли; 
	
КонецПроцедуры // ИзменитьДоступность()

// Процедура устанавливает отметку о визировании в переданной строке ТаблицыФормы УстановленныеВизы.
// 
// Параметры:
//  ТекущиеДаннные  - ДанныеФормыЭлементКоллекции.
// 
&НаКлиенте
Процедура УстановитьВизу(ТекущиеДанные)
	
	КлючеваяОперация = "СогласованиеУстановкаРешения";
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,, Истина);

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Виза) Тогда
		
		ТекущиеДанные.Пользователь  = ТекущийПользователь;
		ТекущиеДанные.ДатаУстановки = ТекущаяДата();
		ЭтотОбъект.Модифицированность = Истина;
		//+Сундукова 23.03.16 - пробуем найти инициатора
		Если не ЗначениеЗаполнено(текущиеДанные.ФизическоеЛицо)  тогда
			текущиеДанные.ФизическоеЛицо = НайтиИнициатора(ТекущиеДанные.Пользователь);
		КонецЕсли;
		//-Сундукова 23.03.16
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Решение) Тогда
		ТекущиеДанные.Решение = ОсновноеРешение;
	КонецЕсли; 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)
	//ОбработатьВерхниеТочкиДействия(ТекущиеДанные.ТочкаАлгоритма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
		
КонецПроцедуры

// Процедура сбрасывает отметку о визировании в переданной строке ТаблицыФормы УстановленныеВизы.
// 
// Параметры:
//  ТекущиеДаннные  - ДанныеФормыЭлементКоллекции.
// 
&НаКлиенте
Процедура ОчиститьВизу(ТекущиеДанные)

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Пользователь) Тогда
		ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Решение) Тогда
		ТекущиеДанные.Решение = Неопределено;
		
		//+СБ Пискунова 2017-07-17 #2691  Для корректной записи после использования кнопки "Очистить" 
		Если ТекущиеДанные.ФизическоеЛицо = ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.СБ_НеЗадан") Тогда
			ТекущиеДанные.ИзмененоВручнуюВТолстомКлиенте = Истина;
		КонецЕсли;
		//-СБ Пискунова 2017-07-17 #2691
		
	КонецЕсли; 
	
	ТекущиеДанные.ДатаУстановки = Дата('00010101');
	Модифицированность          = Истина;

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)
	//ОбработатьНижниеТочкиДействия(ТекущиеДанные.ТочкаАлгоритма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
	
	Записать();
	
КонецПроцедуры

// Процедура выполняет действия после записи на клиенте.
// 
// 
&НаКлиенте
Процедура ДействияПослеЗаписиФорма()
	
	# Если НЕ ВебКлиент Тогда
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-18 (#3997)
		Если ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			Возврат;
		КонецЕсли; 
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-18 (#3997) 
		
		Если НЕ ЭтотОбъект.ВладелецФормы = Неопределено И ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
			
			ОповеститьОбИзменении(ТипЗнч(Объект.ОбъектВизирования));
			Если НЕ ИспользуетсяВнешнееВизирование Тогда
				Если НЕ ЭтотОбъект.ВладелецФормы.Статус = ЭтотОбъект.Статус Тогда
					ПараметрыОповещения = Новый Структура; 
					ПараметрыОповещения.Вставить("Статус", ЭтотОбъект.Статус);
					ПараметрыОповещения.Вставить("ДатаИзмененияСтатуса", ЭтотОбъект.ДатаИзмененияСтатуса);
					//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-06-01 (#3021)
					ПараметрыОповещения.Вставить("Ссылка", ЭтаФорма.ВладелецФормы.Объект.Ссылка);
					//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-06-01 (#3021)
					Оповестить("ИзмененСтатус", ПараметрыОповещения, ВладелецФормы.УникальныйИдентификатор);  
				КонецЕсли; 
				
				//1c-izhtc spawn (
				Если ЗначениеЗаполнено(ОК_ОЦР) Тогда 
					ЭтаФорма.ВладелецФормы.Объект.ОК_ОЦР = ОК_ОЦР
				КонецЕсли;
				//1c-izhtc spawn )
				//+СБ Пискунова 19.03.2017 #2691
				Оповестить("СБ_УстановленыРешения");
				ОповеститьОбИзменении(ТипЗнч(Объект.ОбъектВизирования));
				//-СБ Пискунова 19.03.2017 #2691
				
				Если фПерепроведенОбъектВизирования Тогда
					Попытка 				
						ЭтотОбъект.ВладелецФормы.Прочитать();				
					Исключение
						// Что-то пошло не так ...
					КонецПопытки;			
					фПерепроведенОбъектВизирования = Ложь;
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли; 
		
	# КонецЕсли
	
КонецПроцедуры

// Функция определяет видим алгоритм или нет в зависимости от вида клиента и настроек формы.
// 
// Возвращаемое значение:
//   флВидимость   - Булево
// 
&НаКлиенте
Функция ОпределитьВидимостьАлгоритма()
	
	# Если НЕ ВебКлиент Тогда
		флВидимостьАлгоритма = НЕ ЭтотОбъект.АлгоритмСкрыт;	
	# КонецЕсли
	
	# Если ВебКлиент Тогда
		флВидимостьАлгоритма = Ложь;		
	# КонецЕсли
	
	Возврат флВидимостьАлгоритма;
	
КонецФункции

// Функция определяет доступность выполнения визирования для текущего объекта. 
// 
// Параметры:
//  ОбъектВизирования - ДокументСсылка.
//  МетаОбъект - ОбъектМетаданных.
// 
// Возвращаемое значение:
//  флДоступно - Булево.
//
&НаСервере
Функция ВизированиеДоступно(ОбъектВизирования, МетаОбъект) Экспорт
	
	флДоступно = Истина;	
	
	// Имена документов подсистемы Казначейство, для которых действует передача на согласование.
	ИменаКазначействоПередачаНаСогласование = Новый Массив;
	ИменаКазначействоПередачаНаСогласование.Добавить("бит_кзн_ЗаявкаНаРасходованиеСредств");
	ИменаКазначействоПередачаНаСогласование.Добавить("бит_кзн_ПланируемоеПоступлениеДенежныхСредств");
	ИменаКазначействоПередачаНаСогласование.Добавить("бит_кзн_ПлатежнаяПозиция");
	ИменаКазначействоПередачаНаСогласование.Добавить("бит_кзн_ПозицияПоступления");
	
	Если бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("Документы", МетаОбъект.Имя) 
		И МетаОбъект.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
	
	    флКазначействоПередачаНаСогласование = ?(ИменаКазначействоПередачаНаСогласование.Найти(МетаОбъект.Имя) = Неопределено, Ложь, Истина);
		флПроводитьПослеУтверждения = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения");
		
		Если флКазначействоПередачаНаСогласование Тогда
			
			// Казначейские документы ERP, для которых действует передача на согласование.
			флДоступно = ОбъектВизирования.ОтправленНаСогласование ИЛИ ОбъектВизирования.Проведен;
			
		ИначеЕсли флПроводитьПослеУтверждения И бит_РаботаСМетаданными.ЕстьРеквизит("ОтправленНаСогласование", МетаОбъект) Тогда
			
			// Документы бюджетирования, на которые действует константа бит_ПроводитьДокументыПослеУтверждения.
			флДоступно = ОбъектВизирования.ОтправленНаСогласование;
			
		Иначе	
			
			// Прочие документы.
			флДоступно = ОбъектВизирования.Проведен;
			
		КонецЕсли; 
		
	ИначеЕсли бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("Документы", МетаОбъект.Имя)
		И ТипЗнч(ОбъектВизирования) = Тип("ДокументСсылка.бит_ОперацияУправленческий") Тогда
		
		Если ОбъектВизирования.ПометкаУдаления Тогда
			флДоступно = Ложь;
		КонецЕсли;
		
	Иначе	
		
		флДоступно = Истина;
		
	КонецЕсли;	
	
	Возврат флДоступно;
	
КонецФункции // ВизированиеДоступно()

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Объект.ОбъектВизирования);  
	ТекущийСтатус = РезСтруктура.Статус;
	ТекущаяДатаИзмененияСтатуса = РезСтруктура.Дата;
	
	ОсновноеРешение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновноеРешениеСогласования", ТекущийПользователь);
	Если НЕ ЗначениеЗаполнено(ОсновноеРешение) Тогда
		ОсновноеРешение = Справочники.бит_ВидыРешенийСогласования.Согласовано;
	КонецЕсли; 
	
	ПараметрыФормированияСписка = ПараметрыФормированияСпискаРешений();
	МенюРешений = бит_Визирование.ПолучитьСписокВозможныхРешений(ПараметрыФормированияСписка);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормированияСпискаРешений()  Экспорт
	
	ПараметрыФормированияСписка = Новый Структура;
	
	МетаданныеОбъекта = Объект.ОбъектВизирования.Метаданные();
	ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаданныеОбъекта);
	ПараметрыФормированияСписка.Вставить("ОбъектСистемы",ОбъектСистемы);
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъекта) Тогда
		ПараметрыФормированияСписка.Вставить("Организация",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектВизирования, "Организация"));
	КонецЕсли; 

	Возврат ПараметрыФормированияСписка;
	
КонецФункции

// Процедура обновляет перечень виз.
// 
// 
&НаСервере
Процедура ОбновитьВизыСервер()
	
	флРазрешеноОбновлять = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(ТекущийПользователь,
		ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешитьОбновлятьПереченьВиз);
								  
	Если НЕ флРазрешеноОбновлять = Истина Тогда
		ТекстСообщения = НСтр("ru = 'У пользователя отстутствует право на принудительное обновление перечня виз.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 							  
	
	ОбъектВизированияСсылка = Объект.ОбъектВизирования;
	
	МетаданныеОбъекта = ОбъектВизированияСсылка.Метаданные();
	
	СтруктураПараметров = Новый Структура;
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация",МетаданныеОбъекта) Тогда
		
		СтруктураПараметров.Вставить("СтруктурноеПодразделение",ОбъектВизированияСсылка.Организация);
		
	КонецЕсли; 
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("ЦФО",МетаданныеОбъекта) Тогда
	
		СтруктураПараметров.Вставить("ЦФО",ОбъектВизированияСсылка.ЦФО);
	
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-13 (#3997)
	Если бит_РаботаСМетаданными.ЕстьРеквизит("ок_ЦФО",МетаданныеОбъекта) Тогда
	
		СтруктураПараметров.Вставить("ок_ЦФО",ОбъектВизированияСсылка.ок_ЦФО);
	
	КонецЕсли; 
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-13 (#3997)
	
	Если бит_ОбщегоНазначения.ОбъектПринадлежитКоллекцииМетаданных("Документы",МетаданныеОбъекта.Имя) Тогда
		
		ДатаЗаполнения = ОбъектВизированияСсылка.Дата;
		
	Иначе	
		
		ДатаЗаполнения = ТекущаяДата();
		
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	бит_Визирование.ОбновитьПереченьВиз(ОбъектВизированияСсылка,ДатаЗаполнения,СтруктураПараметров);
	
	Попытка
		ДействияПослеПринятияРешения();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());	
	КонецПопытки; 
	
	ЗафиксироватьТранзакцию();
	
	ДействияПослеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеПринятияРешения()

	ДокОбъект = Объект.ОбъектВизирования.ПолучитьОбъект();
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-27 (#3997) 
	Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ЭлектронныйДокументВходящий") Тогда
		ТекущийСтатусЭД = ДокОбъект.ок_Статус;
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-27 (#3997) 
	МетаОбъект = ДокОбъект.Метаданные();
	
	бит_Визирование.ДовыполнитьАлгоритмВизирования(ДокОбъект);
	
	Если ИспользуетсяВнешнееВизирование Тогда
		УстановитьВнешнийСтатус();
	Иначе
		
		Попытка
			
			ДокОбъект.УстановитьСтатус();
			
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-27 (#3997) 
			Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ЭлектронныйДокументВходящий") Тогда
				Если ТекущийСтатусЭД <> ДокОбъект.ок_Статус Тогда
					ДокОбъект.Записать();
				КонецЕсли;				
			КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-27 (#3997)
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-18 (#3018)
			Если ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") И
				ДокОбъект.Проведен	
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-19 (#3348)
				И УстановленныеВизы.НайтиСтроки(Новый Структура("Решение", ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено"))).Количество() = 0
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-19 (#3348)
				Тогда 
				пНаборЗаписей = РегистрыНакопления.бит_КонтрольныеЗначенияБюджетов.СоздатьНаборЗаписей();
				пНаборЗаписей.Отбор.Регистратор.Установить(Объект.ОбъектВизирования);
				пНаборЗаписей.Прочитать();
				
				Если пНаборЗаписей.Количество() > 0 Тогда 
					бит_БК_Общий.ПопыткаЗакрытияИлиВозвратаСтатусаЗаявокПоДаннымБК(пНаборЗаписей.Выгрузить(),Объект.ОбъектВизирования,"ПослеПроведения");	
				КонецЕсли;
				
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-18 (#3018)
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось изменить статус по причине: %1';en='Unable to change the status for a reason:%1'"), 
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки; 
		
		// В режиме "ПроводитьДокументыПослеУтверждения" при достижении статуса "Утвержден" документ должен провестись.
		флПроводитьПослеУтверждения    = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения");									
		фПерепроведенОбъектВизирования = бит_Визирование.ПровестиВСтатусеУтверждено(ДокОбъект, МетаОбъект, флПроводитьПослеУтверждения, "Ошибки");
		
		СтатусОбъекта		 = бит_Визирование.ПолучитьСтатусОбъекта(ДокОбъект.Ссылка);
		Статус               = СтатусОбъекта.Статус;
		ДатаИзмененияСтатуса = СтатусОбъекта.Дата;
		
		СтруктураПараметров  = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
		ИнформацияСтатус     = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЗаписиНаСервере()

    ПерерисоватьАлгоритмВизирования(Истина);
	
	ОбновитьИсторию();
	
	ОбновитьДанныеЭПНаФорме();	

КонецПроцедуры
 
&НаСервере
Процедура УстановитьВнешнийСтатус()
	
	// ++ БП 
	Совместимо = Истина;
	// -- БП 
	
КонецПроцедуры

&НаСервере
Процедура ПерерисоватьАлгоритмВизирования(СчитыватьВизы = Ложь)

	Если СчитыватьВизы Тогда
		Прочитать();
	КонецЕсли; 
	
	
	// Получим общую таблицу точек алгоритма и виз.
	ТаблицаВизы = УстановленныеВизы.Выгрузить();
	
	Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
	
	Для каждого СтрокаВизы Из ТаблицаВизы Цикл
		Если ЗначениеЗаполнено(СтрокаВизы.Алгоритм) Тогда
			Алгоритм = СтрокаВизы.Алгоритм;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	локТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы);
	
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);		
	// Определяем, какие точки алгоритма доступны.
	бит_уп_Сервер.ОпределитьДоступностьТочек(локТаблицаТочкиВизы,флВыполнятьПоэтапно);
	
	локТаблицаТочкиВизы.ЗаполнитьЗначения(0,"Обработана");
	локТаблицаТочкиВизы.ЗаполнитьЗначения(0,"СвязиОбработаны");
	
	// Заполняем таблицу в форме
	ТаблицаТочкиВизы.Загрузить(локТаблицаТочкиВизы);
	
	инд = 0;
	Для каждого СтрокаТаблицы Из локТаблицаТочкиВизы Цикл
		
		ЭлементКоллекции = ТаблицаТочкиВизы[инд];
		ЭлементКоллекции.ИсходящиеТочки.Загрузить(СтрокаТаблицы.ИсходящиеТочки);
		ЭлементКоллекции.ВходящиеТочки.Загрузить(СтрокаТаблицы.ВходящиеТочки); 		
		
		//+СБ Пискунова 15.02.2016 #2691  Определим доступность для всех физ.лиц на одной визе
		//СтрОтбор  = Новый Структура("ИД",СтрокаТаблицы.ИД);
		СтрОтбор  = Новый Структура("Виза",СтрокаТаблицы.Виза);
		//-СБ Пискунова 15.02.2016 #2691  Определим доступность для всех физ.лиц на одной визе
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)		
		Если локТаблицаТочкиВизы.Колонки.Найти("ДобавленаВручную")<>Неопределено Тогда 
			СтрОтбор.Вставить("ДобавленаВручную",СтрокаТаблицы.ДобавленаВручную);
		КонецЕсли;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-15 (#2873)
		РезМассив = УстановленныеВизы.НайтиСтроки(СтрОтбор);
		Если РезМассив.Количество()>0 Тогда
		
			//+СБ Пискунова 15.02.2016 #2691  Определим доступность для всех физ.лиц на одной визе
			//ЭлементКоллекцииВизы = РезМассив[0];
			//ЭлементКоллекцииВизы.ДоступностьВизы = СтрокаТаблицы.Доступность;
			Для каждого элем из  РезМассив Цикл 
				
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-09 (#3997)
				Если ЭтоВходящийДокумент Тогда
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-18 (#4117)					
					//элем.ДоступностьВизы = СтрокаТаблицы.АктивнаяВиза ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение);
					элем.ДоступностьВизы = СтрокаТаблицы.АктивнаяВиза ИЛИ НЕ ЗначениеЗаполнено(элем.Решение);
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-18 (#4117) 
				Иначе					
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-09 (#3997) 
					элем.ДоступностьВизы = СтрокаТаблицы.Доступность;
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-09 (#3997)	
				КонецЕсли;
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-09 (#3997)
				
			КонецЦикла;
			//-СБ Пискунова 15.02.2016 #2691  Определим доступность для всех физ.лиц на одной визе
		
		КонецЕсли; 
		
		инд = инд+1;	 
	КонецЦикла;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-26 (#2873)
	Если ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") 
	 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-15 (#3393)
	 ИЛИ ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета") 	
	 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-15 (#3393)	
	Тогда 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-26 (#2873)
		//+СБ Пискунова #2691 01.03.2017
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-15 (#3393)
		//НаличиеОтклонений = бит_Визирование.ПроверитьОтклоненияПоВизам(Объект.ОбъектВизирования);
		//Заменено на:
		НаличиеОтклонений = бит_Визирование.ПроверитьОтклоненияПоВизам(Объект.ОбъектВизирования, ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-15 (#3393)
		// +СБ Кузнецова С. 2017-07-06 
		//Если  не НаличиеОтклонений Тогда
		Если  не НаличиеОтклонений И Не ПроверитьРольФинКонтроля() Тогда
			// -СБ Кузнецова С.
			ЭтаФорма.Элементы.УстановленныеВизы.Доступность = Ложь;
		КонецЕсли;  	
		//-СБ Пискунова #2691 01.03.201	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-26 (#2873)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-26 (#2873)
	
	Если НЕ ЗначениеЗаполнено(Алгоритм) Тогда
		Возврат;
	КонецЕсли;
	
	КартаМаршрута    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Алгоритм, "КартаМаршрута");
	ГрафическаяСхема = КартаМаршрута.Получить();
	
	бит_УправлениеПроцессамиКлиентСервер.ВыделитьЭлементыПоТаблицеВиз(ГрафическаяСхема, локТаблицаТочкиВизы);
	
КонецПроцедуры
 
// Функция получает вспомогательные реквизиты визы.
// 
// Параметры:
//  ОбъектВизирования  - ДокументСсылка.
//  ТекущаяВиза        - СправочникСсылка.бит_Визы.
//  ВизыПользователя   - СписокЗначений.
// 
// Возвращаемое значение:
//   РезСтруктура   - Структура.
// 
&НаСервереБезКонтекста
Функция ПараметрыВизы(ОбъектВизирования, ТекущаяВиза, ВизыПользователя)
	
	ПараметрыВизы = ПараметрыВизыПоУмолчанию();
	
	Если НЕ ЗначениеЗаполнено(ТекущаяВиза) Тогда
		Возврат ПараметрыВизы;
	КонецЕсли;
	
	ПараметрыВизы.ДоступностьВизы = (ВизыПользователя.НайтиПоЗначению(Справочники.бит_ГруппыВиз.ВсеВизы) <> Неопределено)
										ИЛИ (ВизыПользователя.НайтиПоЗначению(ТекущаяВиза) <> Неопределено);

	ЗначениеРеквизитовВизы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяВиза, "Вид, ОбъектСвязи, ВидСвязи, ВремяНаУстановку");
	ПараметрыВизы.ВидВизы          = ЗначениеРеквизитовВизы.Вид;
	ПараметрыВизы.ФизическоеЛицо   = ЗначениеРеквизитовВизы.ОбъектСвязи;
	ПараметрыВизы.ВремяНаУстановку = ЗначениеРеквизитовВизы.ВремяНаУстановку;
	ПараметрыВизы.Должность        = ПолучитьДолжность(ОбъектВизирования, ЗначениеРеквизитовВизы.ОбъектСвязи);
	
	Возврат ПараметрыВизы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыВизыПоУмолчанию()
	
	ПараметрыВизыПоУмолчанию = Новый Структура;
	ПараметрыВизыПоУмолчанию.Вставить("ДоступностьВизы",  Ложь);
	ПараметрыВизыПоУмолчанию.Вставить("ВидВизы",          Перечисления.бит_ВидыВиз.Согласующая);
	ПараметрыВизыПоУмолчанию.Вставить("Должность",        "");
	ПараметрыВизыПоУмолчанию.Вставить("ФизическоеЛицо",   Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыВизыПоУмолчанию.Вставить("ВидСвязиВизы",     Перечисления.бит_ВидыСвязиВиз.ФизическоеЛицо);
	ПараметрыВизыПоУмолчанию.Вставить("ВремяНаУстановку", 0);
	
	Возврат ПараметрыВизыПоУмолчанию;
	
КонецФункции

// Функция получает должность физического лица.
// 
// Параметры:
//  ОбъектВизирования  - ДокументСсылка.
//  ФизическоеЛицо     - СправочникСсылка.ФизическиеЛица.
// 
// Возвращаемое значение:
//   Должность   - Строка.
// 
&НаСервереБезКонтекста
Функция ПолучитьДолжность(ОбъектВизирования,ФизическоеЛицо)

	Должность = "";
	
	Если ТипЗнч(ФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	
	   МетаданныеОбъекта = ОбъектВизирования.Метаданные();
	   
	   Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаданныеОбъекта) Тогда
		   СтруктурноеПодразделение = ОбъектВизирования.Организация;
	   ИначеЕсли бит_РаботаСМетаданными.ЕстьРеквизит("ЦФО", МетаданныеОбъекта) Тогда
		   СтруктурноеПодразделение = ОбъектВизирования.ЦФО	
	   Иначе	
		   СтруктурноеПодразделение = Неопределено;
	   КонецЕсли; 
	   
	   Если бит_ОбщегоНазначения.ОбъектПринадлежитКоллекцииМетаданных("Документы",МетаданныеОбъекта.Имя) Тогда
		   ДатаДанных = ОбъектВизирования.Дата;
	   Иначе	
		   ДатаДанных = ТекущаяДата();
	   КонецЕсли; 
	   
	   Должность      = бит_Визирование.ПолучитьДолжностиФизЛица(ФизическоеЛицо
																		   ,ОбъектВизирования.Дата
																		   ,СтруктурноеПодразделение);
	
	КонецЕсли; 
	

	Возврат Должность;
	
КонецФункции

// Процедура управляет видимостью и положением табличного документа для отображения алгоритма.
// 
&НаСервере
Процедура УстановитьВидимостьАлгоритма(ВидимостьАлгоритма)

	Если НеОтображатьКарту Тогда
		
		Элементы.ГруппаАлгоритм.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаАлгоритм.Видимость = ВидимостьАлгоритма;
		
	КонецЕсли; 
	
	Если ЭтотОбъект.АлгоритмПоложение = 0 Тогда
		 Элементы.ГруппаВерх.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Иначе	
		 Элементы.ГруппаВерх.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли; 
	
	
КонецПроцедуры // ВидимостьАлгоритма()

&НаКлиенте
Процедура КомандаОбновитьИсторию(Команда)
	
	ОбновитьИсторию();
	
КонецПроцедуры

// Процедура обновляет историю установки виз.
// 
&НаСервере
Процедура ОбновитьИсторию()

	Обработки.бит_УстановкаВиз.ВывестиИсториюВизирования(тдИстория, Объект.ОбъектВизирования);

	СоздатьКомандыУровней();
	
КонецПроцедуры // ОбновитьИсторию()

// Процедура выполняет отправку сообщения-комментария по визам. 
// 
&НаСервере
Процедура ОтправитьСообщение()

	ОблМакета = Элементы.тдИстория.ТекущаяОбласть;
	
	Если ТипЗнч(ОблМакета.Расшифровка) = Тип("Структура") И ОблМакета.Расшифровка.Свойство("Виза") Тогда
		
		ТекИД = Новый УникальныйИдентификатор;
		
		// Запись сообщения в регистр
		МенеджерЗаписи = РегистрыСведений.бит_СообщенияПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект       = Объект.ОбъектВизирования;
		МенеджерЗаписи.Виза         = ОблМакета.Расшифровка.Виза;
		МенеджерЗаписи.Пользователь = ТекущийПользователь;
		МенеджерЗаписи.ИД           = ТекИД;
		МенеджерЗаписи.ТекстСообщения = фСообщение;
		МенеджерЗаписи.Период 		= ТекущаяДатаСеанса();
		Попытка
			фСообщение = "";
			Отказ = Ложь;
			МенеджерЗаписи.Записать();
		Исключение
			ТекстСообщения =  НСтр("ru='Не удалось отправить сообщение. Описание ошибки: %1%.';en='Failed to send the message. Description of error:%1%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , ,Отказ);
		КонецПопытки;
		
		Если НЕ Отказ Тогда
			ОбновитьИсторию();
			// Поиск созданного сообщения и позиционирование на нем.
			СтрТекИД = Строка(ТекИД);
			ОблСообщения = тдИстория.Области.Найти(СтрТекИД);
			Если НЕ ОблСообщения = Неопределено Тогда
				Элементы.тдИстория.ТекущаяОбласть = ОблСообщения;
			КонецЕсли; 
		КонецЕсли; 
	Иначе	   
		ТекстСообщения =  НСтр("ru = 'Не выбрана виза для отправки сообщения. Установите курсор на визе по которой необходимо отправить сообщение.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры // ОтправитьСообщение()

// Заполняет структуру данных по задаче.
// 
// Параметры:
// 	ОбъектВизирования - ДокументСсылка.
// 	ИДСтроки - число.
// 
// Возвращаемое значение:
// 	СтруктураЗадачи - структура.
// 
&НаСервере
Функция ПолучитьСтруктуруЗадачи(ОбъектВизирования, ИДСтроки)
	
	ДанныеПоВизе = УстановленныеВизы.НайтиПоИдентификатору(ИДСтроки);
	
	Если ДанныеПоВизе = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураЗадачи = Задачи.бит_уп_Задача.СтруктураЗадачи();
	
	СтруктураЗадачи.Предмет = ОбъектВизирования;
	СтруктураЗадачи.Виза	= ДанныеПоВизе.Виза;
	// ++ БП 
	СтруктураЗадачи.Исполнитель = ОбъектВизирования.Ответственный;
	// -- БП 
	
	Возврат СтруктураЗадачи;
	
КонецФункции

&НаСервере
Процедура СоздатьКомандыУровней()
	
	КоличествоУровней = тдИстория.КоличествоУровнейГруппировокСтрок();
	
	// Очищаем существующие кнопки подменю
	КоличествоЭлементов = Элементы.ГруппаИсторияУровниГруппировок.ПодчиненныеЭлементы.Количество();
	Для н = 1 По КоличествоЭлементов Цикл
	
		инд = КоличествоЭлементов - н;
		Кнопка = Элементы.ГруппаИсторияУровниГруппировок.ПодчиненныеЭлементы[инд];
		Элементы.Удалить(Кнопка);
	
	КонецЦикла; 
	
	// Создадим команды и кнопки в подменю
	Для инд = 1 По КоличествоУровней Цикл
		
		ИмяКоманды = "ГруппаИсторияУровниГруппировок_"+инд;
		
		КомандаУровня = Команды.Найти(ИмяКоманды);
		
		Если КомандаУровня = Неопределено Тогда
			
			КомандаУровня = Команды.Добавить(ИмяКоманды);
			КомандаУровня.Действие = "ДействиеУстановитьУровеньГруппировки";
			
		КонецЕсли; 
		
		НоваяКнопка = Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"),Элементы.ГруппаИсторияУровниГруппировок);
		
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
		НоваяКнопка.Заголовок = "Уровень "+инд;
		Если инд = 2 Тогда
		
			НоваяКнопка.Пометка = Истина;
		
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеУстановитьУровеньГруппировки(Команда)
	
	КнопкиУровней = Элементы.ГруппаИсторияУровниГруппировок.ПодчиненныеЭлементы;
	
	НомПодчерк = Найти(Команда.Имя,"_");
	Если НомПодчерк > 0 Тогда
		
		НомУровняСтр = Сред(Команда.Имя,НомПодчерк+1);
		Попытка
			
			НомУровня = Число(НомУровняСтр);
			
		Исключение
			
			НомУровня = -1;
			
		КонецПопытки; 
		
		Если НомУровня > 0 Тогда
			
			тдИстория.ПоказатьУровеньГруппировокСтрок(НомУровня-1);
			
			инд = 1;
			Для каждого Кнопка Из КнопкиУровней Цикл
				
				Кнопка.Пометка = Ложь;
				
				Если инд = НомУровня Тогда
					
					Кнопка.Пометка = Истина;
					
				КонецЕсли; 
				
				инд = инд+1;
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ГруппаЭП.Видимость = ИспользоватьЭП;
	Элементы.ОтображениеЭЦП.Видимость = ИспользоватьЭП; 

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-15 (#3997)
	Если ЭтоВходящийДокумент Тогда
		Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("ДобавлениеИзменениеЭлектронныхДокументов") Тогда
			Элементы.УстановленныеВизы.КоманднаяПанель.Доступность = Ложь;
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-15 (#3997) 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УстановленныеВизы.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.ДоступностьВизы", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УстановленныеВизыИД.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.ДобавленаВручную", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.ВидВизы", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыВиз.Утверждающая);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.КрасноФиолетовый);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УстановленныеВизыИД.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.ДобавленаВручную", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.ВидВизы", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыВиз.Утверждающая);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Красный);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УстановленныеВизыИД.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.ДобавленаВручную", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.ВидВизы", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыВиз.Согласующая);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Зеленый);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УстановленныеВизыИД.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.ДобавленаВручную", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.ВидВизы", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыВиз.Согласующая);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ИзмененноеЗначениеРеквизитаФон);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УстановленныеВизыИД.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.ИД", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Белый);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.УстановленныеВизы.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"УстановленныеВизы.Решение", ВидСравненияКомпоновкиДанных.Равно, Справочники.бит_ВидыРешенийСогласования.Отклонено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
КонецПроцедуры

#КонецОбласти

//+Сундукова 23.03.16 - пробуем найти инициатора
&НаСервере
Функция НайтиИнициатора(ТекПользователь);
	Возврат справочники.бит_БК_Инициаторы.НайтиПоРеквизиту("Пользователь",ТекПользователь);
КонецФункции
//-Сундукова 23.03.16 

// + СБ Пискунова #2691 29.03.2017
&НаСервере
Функция  ПроцессЗапущен() 
	Если ТипЗнч(Объект.ОбъектВизирования) = ТипЗнч(ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка")) Тогда
		Возврат Объект.ОбъектВизирования.СБ_ПроцессЗапущен;
	Иначе 
		Возврат Ложь;
	КонецЕсли; 	
КонецФункции
// - СБ Пискунова #2691 29.03.2017

//БИТ АКриштопов 04042016 ++
Функция ПроверитьРольФинКонтроля()
	Возврат РольДоступна("бит_БК_ГлавныйБК") ИЛИ РольДоступна("ПолныеПрава");
КонецФункции
//БИТ АКриштопов 04042016 --

Процедура ЗаписатьИзменениеОбъекта(ДокСсылка, ОК_ОЦР_Нов)
	ДокОбъект = Объект.ОбъектВизирования.ПолучитьОбъект();
	ДокОбъект.ОК_ОЦР = ОК_ОЦР_Нов;
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура УстановленныеВизыФизическоеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//БИТ АКриштопов 22042016 ++ Дополнения по задаче 2240
	Если ТипЗнч(Объект.ОбъектВизирования) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
		//БИТ АКриштопов 04042016 ++
		ФинКонтрольРоль = ПроверитьРольФинКонтроля();
		Если НЕ ФинКонтрольРоль Тогда
			Сообщение = новый СообщениеПользователю;
			Сообщение.Текст = "Устанавливать фамилии ответственных лиц может только Фин.контролер.";
			Сообщение.Сообщить();
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//БИТ АКриштопов 04042016 --
	
КонецПроцедуры

//БИТ АКриштопов 17052016 ++ #2463
&НаСервере
Функция ПроверкаОЦР(ОЦРФормы) Экспорт
	ОбновитьОЦР = Истина;	
	Для Каждого ТекВиза из УстановленныеВизы Цикл
		Если ТекВиза.Виза = ПредопределенноеЗначение("Справочник.бит_Визы.бит_БК_Бюджетодержатель") Тогда
			Если ОЦРФормы = ТекВиза.ФизическоеЛицо Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ОбновитьОЦР;
КонецФункции

//+СБ Пискунова 08.02.2017 #2691 
//Решение по визе не должно быть доступно для изменения, если по ней уже есть решение
&НаСервереБезКонтекста
Функция ПроверитьУстановкуРешения(Алгоритм, Виза, Объект, ТочкаАлгоритма, ФизическоеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	бит_УстановленныеВизы.Решение
		|ИЗ
		|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
		|ГДЕ
		|	бит_УстановленныеВизы.Объект = &Объект
		|	И бит_УстановленныеВизы.Виза = &Виза
		|	И бит_УстановленныеВизы.Решение <> ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка)
		|	И бит_УстановленныеВизы.ФизическоеЛицо = &ФизическоеЛицо
		|	И бит_УстановленныеВизы.Алгоритм = &Алгоритм
		|	И бит_УстановленныеВизы.ТочкаАлгоритма = &ТочкаАлгоритма";
	
	Запрос.УстановитьПараметр("Алгоритм", Алгоритм);
	Запрос.УстановитьПараметр("Виза", Виза);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ТочкаАлгоритма", ТочкаАлгоритма);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
 	
	Если РезультатЗапроса.Пустой() Тогда
		 Возврат  Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции


&НаКлиенте
Процедура УстановленныеВизыПередНачаломИзменения(Элемент, Отказ)
	
	//+СБ Пискунова Виктория #2691 17.07.2017 Убираем ограничение
	
	//Не будем давать редактировать "Установленные визы", когда уже все визы согласованы или Когда поцесс не запущен
	//Если ТипЗнч(Объект.ОбъектВизирования) = ТипЗнч(ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка")) Тогда
	//	ПроцессЗапущенОтвет = ПроцессЗапущен();
	//	Если ПроцессЗапущенОтвет  и не ПроверитьУстановкуРешения(Элементы.УстановленныеВизы.ТекущиеДанные.Алгоритм, Элементы.УстановленныеВизы.ТекущиеДанные.Виза, Элементы.УстановленныеВизы.ТекущиеДанные.Объект, Элементы.УстановленныеВизы.ТекущиеДанные.ТочкаАлгоритма,Элементы.УстановленныеВизы.ТекущиеДанные.ФизическоеЛицо) Тогда
	//		Отказ = Ложь;
	//	ИначеЕсли не ПроцессЗапущенОтвет  или ПроверитьУстановкуРешения(Элементы.УстановленныеВизы.ТекущиеДанные.Алгоритм, Элементы.УстановленныеВизы.ТекущиеДанные.Виза, Элементы.УстановленныеВизы.ТекущиеДанные.Объект, Элементы.УстановленныеВизы.ТекущиеДанные.ТочкаАлгоритма,Элементы.УстановленныеВизы.ТекущиеДанные.ФизическоеЛицо) Тогда 
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	//-СБ Пискунова Виктория #2691 17.07.2017 Убираем ограничение

КонецПроцедуры
//-СБ Пискунова 08.02.2017 #2691
//БИТ АКриштопов 17052016 -- #2463

//bit_SVKushnirenko 31.01.2017 #2671
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//{ bit SVKushnirenko Bit 31.01.2017 #2671
	//предотвращение повторного открытия формы со старым набором данных
	Если ИмяСобытия = "бит_БК_ИзмененОЦРНаФорме" Тогда 
		
		Попытка
		
			пВладелецЕслиЕсть = ЭтаФорма.ВладелецФормы.Объект.Ссылка;
		Исключение
		
			Возврат;
		КонецПопытки; 
		
		Если Параметр.Ссылка =  пВладелецЕслиЕсть Тогда //перечитываем данные формы
			
			ЭтаФорма.Прочитать();
		КонецЕсли;
	КонецЕсли;
	//} bit SVKushnirenko Bit 31.01.2017 #2671
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-17 (#2880)

&НаКлиенте
Процедура УстановленныеВизыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И 
		 Не ЗначениеЗаполнено(Элементы.УстановленныеВизы.ТекущиеДанные.ДатаКрайняя) 
	Тогда 
	    Элементы.УстановленныеВизы.ТекущиеДанные.ДатаКрайняя = бит_Визирование.ПолучитьКрайнююДату(УстановленныеВизы.Отбор.Объект.Значение, ТекущаяДата(), (ТекущаяДата() + 86400*2));		
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-10 (#3997)
	Если НоваяСтрока И 
		 Не ЗначениеЗаполнено(Элементы.УстановленныеВизы.ТекущиеДанные.КодСортировки) 
	Тогда 
	    Элементы.УстановленныеВизы.ТекущиеДанные.КодСортировки = УстановленныеВизы.Количество();		
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-10 (#3997) 
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-17 (#2880)
