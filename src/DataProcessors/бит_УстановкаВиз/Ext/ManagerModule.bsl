#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
		
// Процедура выводит историю визирования.
// 
// Параметры:
//  ТД - ТабличныйДокумент - Табличный документ.
//  ОбъектВизирования - ДокументСсылка - Объект визирования.
// 
Процедура ВывестиИсториюВизирования(ТД, ОбъектВизирования)  Экспорт
	
	ТД.Очистить();
	
	Макет = Обработки.бит_УстановкаВиз.ПолучитьМакет("МакетИстория");
	
	ОблЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОблВиза      = Макет.ПолучитьОбласть("Виза");
	ОблШапкаТаблицы		   = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОблСообщениеЗаголовок1 = Макет.ПолучитьОбласть("СообщениеЗаголовокПервое");
	ОблСообщениеЗаголовок  = Макет.ПолучитьОбласть("СообщениеЗаголовок");
	ОблСообщениеТекст      = Макет.ПолучитьОбласть("СообщениеТекст");
	ОблСообщениеТекст2     = Макет.ПолучитьОбласть("СообщениеТекст2");
	ОблПоследняя           = Макет.ПолучитьОбласть("Последняя");
	
	
	ЦветаВидовСтрок = Новый Структура;
	ЦветаВидовСтрок.Вставить("История"	, ЦветаСтиля.бит_ФонПодписьВерна);
	ЦветаВидовСтрок.Вставить("Сообщение", ЦветаСтиля.ИзмененноеЗначениеРеквизитаФон);
	ЦветаВидовСтрок.Вставить("Задача"	, ЦветаСтиля.ФонУправляющегоПоля);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектВизирования", ОбъектВизирования);
	Запрос.УстановитьПараметр("ТекущаяДата"		 , ТекущаяДатаСеанса());
	Запрос.Текст =  "ВЫБРАТЬ
	|	бит_УстановленныеВизы.Виза,
	|	бит_УстановленныеВизы.Решение
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	бит_УстановленныеВизы.Объект = &ОбъектВизирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ИсторияИзмененияСтатусовОбъектов.Период,
	|	бит_ИсторияИзмененияСтатусовОбъектов.Объект,
	|	бит_ИсторияИзмененияСтатусовОбъектов.ВидСтатуса,
	|	бит_ИсторияИзмененияСтатусовОбъектов.Статус,
	|	бит_ИсторияИзмененияСтатусовОбъектов.Пользователь
	|ПОМЕСТИТЬ ИсторияИзмененияСтатусов
	|ИЗ
	|	РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов КАК бит_ИсторияИзмененияСтатусовОбъектов
	|ГДЕ
	|	бит_ИсторияИзмененияСтатусовОбъектов.Объект = &ОбъектВизирования
	|	И бит_ИсторияИзмененияСтатусовОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ИсторияИзмененияВиз.Период КАК Период,
	|	""История"" КАК Вид,
	|	бит_ИсторияИзмененияВиз.Объект,
	|	бит_ИсторияИзмененияВиз.Виза КАК Виза,
	|	бит_ИсторияИзмененияВиз.ИД,
	|	бит_ИсторияИзмененияВиз.Пользователь,
	|	бит_ИсторияИзмененияВиз.Комментарий,
	|	бит_ИсторияИзмененияВиз.Решение,
	|	бит_ИсторияИзмененияВиз.ДатаКрайняя,
	|	NULL КАК РезультатВыполнения,
	|	NULL КАК Состояние,
	|	ВЫБОР
	|		КОГДА бит_ИсторияИзмененияВиз.ДатаКрайняя <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА бит_ИсторияИзмененияВиз.Период = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ВЫБОР
	|								КОГДА бит_ИсторияИзмененияВиз.ДатаКрайняя < &ТекущаяДата
	|									ТОГДА ИСТИНА
	|								ИНАЧЕ ЛОЖЬ
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА бит_ИсторияИзмененияВиз.ДатаКрайняя < бит_ИсторияИзмененияВиз.Период
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочено
	|ПОМЕСТИТЬ ИсторияИзмененияВиз
	|ИЗ
	|	РегистрСведений.бит_ИсторияИзмененияВиз КАК бит_ИсторияИзмененияВиз
	|ГДЕ
	|	бит_ИсторияИзмененияВиз.Объект = &ОбъектВизирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияИзмененияВиз.Период КАК Период,
	|	NULL КАК Статус,
	|	""ИзменениеВизы"" КАК ВидИзменения,
	|	ИсторияИзмененияВиз.Виза
	|ИЗ
	|	ИсторияИзмененияВиз КАК ИсторияИзмененияВиз
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсторияИзмененияСтатусов.Период,
	|	ИсторияИзмененияСтатусов.Статус,
	|	""ИзменениеСтатуса"",
	|	NULL
	|ИЗ
	|	ИсторияИзмененияСтатусов КАК ИсторияИзмененияСтатусов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияИзмененияВиз.Период КАК Период,
	|	ИсторияИзмененияВиз.Вид,
	|	ИсторияИзмененияВиз.Объект,
	|	ИсторияИзмененияВиз.Виза КАК Виза,
	|	ИсторияИзмененияВиз.ИД,
	|	ИсторияИзмененияВиз.Пользователь,
	|	ИсторияИзмененияВиз.Комментарий,
	|	ИсторияИзмененияВиз.Решение,
	|	ИсторияИзмененияВиз.ДатаКрайняя,
	|	ИсторияИзмененияВиз.РезультатВыполнения,
	|	ИсторияИзмененияВиз.Состояние,
	|	ИсторияИзмененияВиз.Просрочено,
	|	NULL КАК Статус,
	|	NULL КАК Ссылка,
	|	NULL КАК Номер,
	|	NULL КАК Наименование
	|ИЗ
	|	ИсторияИзмененияВиз КАК ИсторияИзмененияВиз
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_СообщенияПользователей.Период,
	|	""Сообщение"",
	|	бит_СообщенияПользователей.Объект,
	|	бит_СообщенияПользователей.Виза,
	|	бит_СообщенияПользователей.ИД,
	|	бит_СообщенияПользователей.Пользователь,
	|	ВЫРАЗИТЬ(бит_СообщенияПользователей.ТекстСообщения КАК СТРОКА(1000)),
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.бит_СообщенияПользователей КАК бит_СообщенияПользователей
	|ГДЕ
	|	бит_СообщенияПользователей.Объект = &ОбъектВизирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_уп_Задача.Дата,
	|	""Задача"",
	|	бит_уп_Задача.Предмет,
	|	бит_уп_Задача.Виза,
	|	NULL,
	|	бит_уп_Задача.Автор,
	|	ВЫРАЗИТЬ(бит_уп_Задача.Описание КАК СТРОКА(1000)),
	|	NULL,
	|	NULL,
	|	ВЫРАЗИТЬ(бит_уп_Задача.РезультатВыполнения КАК СТРОКА(1000)),
	|	бит_уп_Задача.Состояние,
	|	ВЫБОР
	|		КОГДА бит_уп_Задача.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА бит_уп_Задача.ДатаОкончанияИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|							И бит_уп_Задача.ДатаОкончанияИсполнения > бит_уп_Задача.СрокИсполнения
	|						ТОГДА ИСТИНА
	|					КОГДА бит_уп_Задача.ДатаОкончанияИсполнения = ДАТАВРЕМЯ(1, 1, 1)
	|							И &ТекущаяДата > бит_уп_Задача.СрокИсполнения
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	бит_уп_Задача.Состояние,
	|	бит_уп_Задача.Ссылка,
	|	бит_уп_Задача.Номер,
	|	бит_уп_Задача.Наименование
	|ИЗ
	|	Задача.бит_уп_Задача КАК бит_уп_Задача
	|ГДЕ
	|	бит_уп_Задача.Предмет = &ОбъектВизирования
	|	И НЕ бит_уп_Задача.Виза = ЗНАЧЕНИЕ(Справочник.бит_Визы.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Виза
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсторияИзмененияСтатусов";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();				
	
	ОблЗаголовок.Параметры.Документ = ОбъектВизирования;
	ТД.Вывести(ОблЗаголовок);
	
	ТД.Вывести(ОблШапкаТаблицы);
	
	// Кешируем текущие решения для вывода
	Решения   = Новый Соответствие;
	Результат = МассивРезультатов[0];
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Решения.Вставить(Выборка.Виза, Выборка.Решение);
		
	КонецЦикла; 
	
	// Вывод истории и сообщений
	Результат = МассивРезультатов[4];
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	// Таблица хронологии изменения статусов и виз.
	РезультатХронология = МассивРезультатов[3];
	ТабХронология = РезультатХронология.Выгрузить();
	
	ВыборкаВиза = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТД.НачатьАвтогруппировкуСтрок();
	
	Пока ВыборкаВиза.Следующий() Цикл
		
		Расшифровка = Новый Структура("Виза, ИД", ВыборкаВиза.Виза,"");
		
		Выборка = ВыборкаВиза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		АктуальноеРешение = Решения[ВыборкаВиза.Виза];
		
		ОблВиза.Параметры.Виза = Строка(ВыборкаВиза.Виза)+?(ЗначениеЗаполнено(АктуальноеРешение), " - "+Строка(АктуальноеРешение),"");
		ОблВиза.Параметры.р    = Расшифровка;
		ТД.Вывести(ОблВиза, 0);
		
		инд = 1;
		Пока Выборка.Следующий() Цикл
			
			НомерПервойСтроки = ТД.ВысотаТаблицы;
			
			Расшифровка = Новый Структура("Виза, ИД", ВыборкаВиза.Виза, Выборка.ИД);			
			
			ОблМакета = ?(Выборка.Вид = "Сообщение", ОблСообщениеЗаголовок, ОблСообщениеЗаголовок1);
			ОблМакета.Параметры.Заполнить(Выборка);
			
			Если Выборка.Вид = "История" Тогда
				
				СтатусВизы = ПолучитьСтатусДляВизы(ТабХронология, Выборка);
				ОблМакета.Параметры.Статус = СтатусВизы;
				
				ОблМакета.Параметры.Решение      = ?(ЗначениеЗаполнено(Выборка.Решение), Выборка.Решение,  НСтр("ru='Решение не принято';en='No decision'"));
				
				ОблМакета.Параметры.р = Расшифровка;
				ТД.Вывести(ОблМакета, 1);
				
				Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
					
					ОблСообщениеТекст.Параметры.Комментарий = "Комментарий: " + Выборка.Комментарий;
					ОблСообщениеТекст.Параметры.р = Расшифровка;
					// Установка имени области для последующего поиска и позиционирования на сообщении.
					ОбластьЯчейки = ОблСообщениеТекст.Область(1,2,1,2);
					ОбластьЯчейки.Имя = Строка(Выборка.ИД);
					ТД.Вывести(ОблСообщениеТекст, 1);				
					
				КонецЕсли;
				
			ИначеЕсли Выборка.Вид = "Задача" Тогда
				
				ОблСообщениеТекст2.Параметры.Заполнить(Выборка);
				
				Комментарий = СтрШаблон(НСтр("ru = 'Создана задача №%1 от %2'"),
											Выборка.Номер, Выборка.Период);
				ОблСообщениеТекст2.Параметры.Комментарий = Комментарий;
				ОблСообщениеТекст2.Параметры.р = Выборка.Ссылка;
				ТД.Вывести(ОблСообщениеТекст2, 1);
				
				Комментарий = СтрШаблон(НСтр("ru = 'Автор: %1'"),
											Выборка.Пользователь);
				ОблСообщениеТекст.Параметры.Комментарий = Комментарий;
				ТД.Вывести(ОблСообщениеТекст, 2);
				
				Комментарий = СтрШаблон(НСтр("ru = 'Описание задачи: %1'"),
								?(ПустаяСтрока(Выборка.Комментарий), Выборка.Наименование, Выборка.Комментарий));
				ОблСообщениеТекст.Параметры.Комментарий = Комментарий;
				ТД.Вывести(ОблСообщениеТекст, 2);
				
				Комментарий = СтрШаблон(НСтр("ru = 'Результат выполнения задачи: %1'"),
											Выборка.РезультатВыполнения);
				ОблСообщениеТекст.Параметры.Комментарий = Комментарий;
				ТД.Вывести(ОблСообщениеТекст, 2);
				
			Иначе
				
				ОблМакета.Параметры.р = Расшифровка;
				ТД.Вывести(ОблМакета, 1);
				
				Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
					
					Комментарий = СтрШаблон(НСтр("ru = 'Сообщение: %1'"),
											Выборка.Комментарий);
					ОблСообщениеТекст.Параметры.Комментарий = Комментарий;
					ОблСообщениеТекст.Параметры.р = Расшифровка;
					// Установка имени области для последующего поиска и позиционирования на сообщении.
					ОбластьЯчейки = ОблСообщениеТекст.Область(1,2,1,2);
					ОбластьЯчейки.Имя = Строка(Выборка.ИД);
					ТД.Вывести(ОблСообщениеТекст, 1);				
					
				КонецЕсли;
			КонецЕсли; 
			
			// Изменим цвет фона
			Область = ТД.Область(НомерПервойСтроки+1,2,ТД.ВысотаТаблицы,ТД.ШиринаТаблицы);
			Область.ЦветФона = ЦветаВидовСтрок[Выборка.Вид];
			
			инд = инд +1;	
		КонецЦикла; // Выборка
		
	КонецЦикла; // ВыборкаВиза
	ТД.ЗакончитьАвтогруппировкуСтрок();
	
	ТД.Вывести(ОблПоследняя);
	
	ТД.ПоказатьУровеньГруппировокСтрок(1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает статус объекта после установки текущей визы.
// 
// Параметры:
// 	Таб - ТаблицаЗначений - таблица содержит общую хронологию изменений статусов и виз.
// 	Выборка - ВыборкаИзРезультатаЗапроса - данные по текущей визе.
// 
// Возвращаемое значение:
// 	Статус. 
// 
Функция ПолучитьСтатусДляВизы(Таб, Выборка)
	
	Статус = Неопределено;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Виза"	 , Выборка.Виза);
	СтруктураОтбора.Вставить("Период", Выборка.Период);
	
	НайденныеСтроки = Таб.НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Статус;
	КонецЕсли;
	
	НомСтроки = Таб.Индекс(НайденныеСтроки[0]);
	
	// По хронологии событий сначала происходит изменение визы и только потом статуса
	// 	если установка визы повлекла за собой изменение статуса, то этот статус надо искать следующим по оси времени.
	НомСледСтроки = НомСтроки+1; 
	Если НомСледСтроки <= Таб.Количество()-1
		И Таб[НомСледСтроки].ВидИзменения = "ИзменениеСтатуса" Тогда
		Статус = Таб[НомСледСтроки].Статус;
	КонецЕсли;
	
	// Установка визы не изменила статус объекта, следовательно статус надо искать в "прошлом".
	Если Статус = Неопределено Тогда
		Для Ном = 0 По НомСтроки Цикл
			Инд = НомСтроки-Ном;
			
			Если Таб[Инд].ВидИзменения = "ИзменениеСтатуса" Тогда
				Статус = Таб[Инд].Статус;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти
	
#КонецЕсли
