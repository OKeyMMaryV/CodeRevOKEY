//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-10-07 (#ТП_БП11_ФР10)
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы;

#КонецОбласти

//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-10-07 (#ТП_БП11_ФР10)

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-09-23 (#ТП_БП11_ФР10)
	//Объект.Организация = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("РасходыПокупателей", "ОрганизацияВозмещение");
	//Объект.НовыйПокупатель = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ПеревесАванса", "Контрагент");
	//Объект.НовыйДоговор = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ПеревесАванса", "Договор");  	
	// Заменено на:	
	Организация = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	НовыйПокупатель = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаДанныхИзКристалл", "Контрагент РозничныйСертификат");
	НовыйДоговор = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаДанныхИзКристалл", "Договор РозничныйСертификат");
	
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Перечисления.бит_ГруппаКлиентов.МАТЕРИАЛЫ);
	НовыйМассив.Добавить(Перечисления.бит_ГруппаКлиентов.СПб);
	НовыйМассив.Добавить(Перечисления.бит_ГруппаКлиентов.ПустаяСсылка());
	НовыеЗначения = Новый ФиксированныйМассив(НовыйМассив);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.бит_ГруппаКлиентов", НовыеЗначения);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.Покупатели1Покупатель.ПараметрыВыбора = НовыеПараметры;
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-09-23 (#ТП_БП11_ФР10)
	
	Дата = ТекущаяДата();  	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если Объект.Покупатели.Количество() = 0 Тогда 
	//	ТекстСообщения = НСтр("ru = 'Не установлен отбор по покупателям'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Покупатели", "Объект", Отказ);		
	//КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-10-07 (#ТП_БП11_ФР10)
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Дата");
	мКэшРеквизитовФормы.Вставить("Организация");

	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы(); 

КонецПроцедуры
//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-10-07 (#ТП_БП11_ФР10)

//&НаКлиенте
//Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
//	
//	Если ЗначениеЗаполнено(ВыбранноеЗначение)
//	  И ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") И ИсточникВыбора.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбора" Тогда 
//		
//		НайденныеСтроки = Объект.Покупатели.НайтиСтроки(Новый Структура("Покупатель", ВыбранноеЗначение));
//		Если НайденныеСтроки.Количество() = 0 Тогда 
//			СтрокаПокупатели = Объект.Покупатели.Добавить();
//			СтрокаПокупатели.Покупатель = ВыбранноеЗначение;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПеревесАвансовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПереносАвансовДокумент" Тогда
		
		ТекущиеДанные = ПереносАвансов.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Документ);	
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-10-07 (#ТП_БП11_ФР10)
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбработатьИзменениеРеквизита("Дата");
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбработатьИзменениеРеквизита("Организация");
КонецПроцедуры
//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-10-07 (#ТП_БП11_ФР10)

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьВыбрано(Команда)
	
	УстановитьСнятьВыбрано(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыбрано(Команда)
	
	УстановитьСнятьВыбрано(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ПереносАвансов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'");
		ДополнительныеПараметры = Неопределено;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да );
	Иначе
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкиДолга(Команда)
	СоздатьКорректировкиДолгаНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьСнятьВыбрано(НовоеСостояние)
	
	Если Не ПереносАвансов.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ПереносАвансов.НайтиСтроки(Новый Структура("Выбрано", Не НовоеСостояние));
	Для Каждого СтрокаПеревесАвансов Из НайденныеСтроки Цикл
		СтрокаПеревесАвансов.Выбрано = НовоеСостояние;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ПереносАвансов.Очистить();
	
	Если Не ПроверитьЗаполнение() Тогда 	
		Возврат;
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ИСТИНА КАК Выбрано,
	//	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	//	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	//	|	ХозрасчетныйОстатки.Субконто3 КАК ДокументРасчетов,
	//	|	-ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	//	|	НЕОПРЕДЕЛЕНО КАК Документ
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	//	|			&Дата,
	//	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным),
	//	|			,
	//	|			Организация = &Организация
	//	|				И (ВЫБОР КОГДА НЕ &ИспользуетсяОтборПоПокупателям
	//	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты).бит_ГруппаКлиентов = ЗНАЧЕНИЕ(Перечисление.бит_ГруппаКлиентов.РОЗНИЦА)
	//	|					ИНАЧЕ Субконто1 В (&Покупатели) КОНЕЦ)) КАК ХозрасчетныйОстатки
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Контрагент,
	//	|	ДоговорКонтрагента";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втДоговора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.бит_НаправлениеДоговора = &НаправлениеДоговора_Сертификат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Выбрано,
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК ДокументРасчетов,
	|	-ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ХозрасчетныйОстатки.Субконто3.Дата КАК ДатаАванса
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным),
	|			&МассивСубконто,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА НЕ &ИспользуетсяОтборПоПокупателям
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты).бит_ГруппаКлиентов <> ЗНАЧЕНИЕ(Перечисление.бит_ГруппаКлиентов.РОЗНИЦА)
	|					ИНАЧЕ Субконто1 В (&Покупатели)
	|				КОНЕЦ
	|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов) В
	|					(ВЫБРАТЬ
	|						втДоговора.Ссылка КАК Ссылка
	|					ИЗ
	|						втДоговора КАК втДоговора)) КАК ХозрасчетныйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента";
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата)+1);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.УстановитьПараметр("НаправлениеДоговора_Сертификат", ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("НаправленияДоговоров", "НаправлениеДоговораТОВ"));
	

	Если Покупатели.Количество() Тогда 
		Запрос.УстановитьПараметр("ИспользуетсяОтборПоПокупателям", Истина);
		Запрос.УстановитьПараметр("Покупатели", Покупатели.Выгрузить().ВыгрузитьКолонку("Покупатель"));

	Иначе
		Запрос.УстановитьПараметр("ИспользуетсяОтборПоПокупателям", Ложь);
		Запрос.УстановитьПараметр("Покупатели", Неопределено);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаПеревесАвансов = ПереносАвансов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПеревесАвансов, ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры

//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-09-23 (#ТП_БП11_ФР10)

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросРеквизитПриИзменении(Ответ, ПараметрыОповещения) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда 
		ПереносАвансов.Очистить();
		ДобавитьВКэш(ПараметрыОповещения.ИмяРеквизита);
	Иначе
		ИзвлечьИзКэша(ПараметрыОповещения.ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьИзменениеРеквизита(ИмяРеквизита)
	
	ПараметрыОповещения = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	ОповещениеВопрос = Новый ОписаниеОповещения("ВопросРеквизитПриИзменении", ЭтотОбъект, ПараметрыОповещения);
	Если ПереносАвансов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Изменен реквизит "+ИмяРеквизита+". Данные табличной части будут очищены. Продолжить?'");
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе
		ДобавитьВКэш(ИмяРеквизита);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьКорректировкиДолгаНаСервере()
	
	Если ПереносАвансов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеревесАванса.Выбрано КАК Выбрано,
		|	ПеревесАванса.Контрагент КАК Контрагент,
		|	ПеревесАванса.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПеревесАванса.Сумма КАК Сумма,
		|	ПеревесАванса.ДатаАванса КАК ДатаАванса,
		|	ПеревесАванса.ДокументРасчетов КАК ДокументРасчетов
		|ПОМЕСТИТЬ втПеревесАвансов
		|ИЗ
		|	&ПеревесАванса КАК ПеревесАванса
		|ГДЕ
		|	ПеревесАванса.Выбрано
		|	И ПеревесАванса.Сумма > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПеревесАвансов.Выбрано КАК Выбрано,
		|	втПеревесАвансов.Контрагент КАК Контрагент,
		|	втПеревесАвансов.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	втПеревесАвансов.Сумма КАК Сумма,
		|	втПеревесАвансов.ДатаАванса КАК ДатаАванса,
		|	втПеревесАвансов.ДокументРасчетов КАК ДокументРасчетов,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(втПеревесАвансов.ДатаАванса, ДЕНЬ, 1), ДЕНЬ) КАК ДатаАванса_ПлюсДень
		|ИЗ
		|	втПеревесАвансов КАК втПеревесАвансов
		|ИТОГИ ПО
		|	Контрагент,
		|	ДатаАванса";
	
	Запрос.УстановитьПараметр("ПеревесАванса", ПереносАвансов.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКонтрагент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СоответствиеКА_Дата = Новый Соответствие;
	
	
	Пока ВыборкаКонтрагент.Следующий() Цикл
			
		ВыборкаДатаАванса = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаДатаАванса.Следующий() Цикл
			
			
			ДокументКорректировкаДолга = Документы.КорректировкаДолга.СоздатьДокумент();
			ДокументКорректировкаДолга.Дата = ВыборкаДатаАванса.ДатаАванса_ПлюсДень;
			ДокументКорректировкаДолга.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;
			ДокументКорректировкаДолга.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя;
			ДокументКорректировкаДолга.КонтрагентКредитор = НовыйПокупатель;
			ДокументКорректировкаДолга.КонтрагентДебитор = ВыборкаКонтрагент.Контрагент;
			ДокументКорректировкаДолга.Организация = Организация;
			ДокументКорректировкаДолга.КурсДокумента = 1;
			ДокументКорректировкаДолга.КратностьДокумента = 1;
			ДокументКорректировкаДолга.Ответственный = Пользователи.ТекущийПользователь();
			
			ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Нстр("ru = '#Сформировано обработкой ""Перенос аванса на КА ""РОЗНИЦА СЕРТИФИКАТ"""" дата создания - %1'"), 
				ДокументКорректировкаДолга.Дата);
			ДокументКорректировкаДолга.Комментарий = ТекстКомментария;
			
			ВыборкаДетальныеЗаписи = ВыборкаДатаАванса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ДокументКорректировкаДолга.ВалютаДокумента) Тогда
					ДокументКорректировкаДолга.ВалютаДокумента = ВыборкаДетальныеЗаписи.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументКорректировкаДолга.ВалютаДокумента, ДокументКорректировкаДолга.Дата); 
				КонецЕсли;
				
				СтрокаКЗ = ДокументКорректировкаДолга.КредиторскаяЗадолженность.Добавить();
				СтрокаКЗ.ДоговорКонтрагента = ВыборкаДетальныеЗаписи.ДоговорКонтрагента;
				СтрокаКЗ.КорДоговорКонтрагента = НовыйДоговор;								
				СтрокаКЗ.Сделка = ВыборкаДетальныеЗаписи.ДокументРасчетов; 				
				СтрокаКЗ.КурсВзаиморасчетов = СтруктураКурса.Курс;
				СтрокаКЗ.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
				СтрокаКЗ.Сумма = ВыборкаДетальныеЗаписи.Сумма;
				СтрокаКЗ.СуммаНУ = ВыборкаДетальныеЗаписи.Сумма;
				СтрокаКЗ.СуммаВзаиморасчетов = ВыборкаДетальныеЗаписи.Сумма;
				СтрокаКЗ.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
				СтрокаКЗ.КорСчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным; 				
			КонецЦикла;
			
						
			Попытка
				ДокументКорректировкаДолга.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокументКорректировкаДолга.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			СоответствиеКА_Дата.Вставить(Строка(ВыборкаКонтрагент.Контрагент) + Строка(ВыборкаДатаАванса.ДатаАванса), ДокументКорректировкаДолга.Ссылка); 
		КонецЦикла;
	КонецЦикла;
	
	НайденныеСтроки = ПереносАвансов.НайтиСтроки(Новый Структура("Выбрано", Истина));
	
	Если НайденныеСтроки.Количество() <> 0 Тогда 		
		Для Каждого Стр Из НайденныеСтроки Цикл		
			Стр.Документ = СоответствиеКА_Дата.Получить(Строка(Стр.Контрагент) + Строка(Стр.ДатаАванса));
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры
//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-09-23 (#ТП_БП11_ФР10)

//&НаСервере
//Процедура СоздатьКорректировкиДолгаНаСервере()
//	
//	Если Объект.ПеревесАвансов.Количество() = 0 Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	Объект.ПеревесАвансов.Сортировать("Контрагент, ДоговорКонтрагента");
//	СтрокиПереносАвансов = Объект.ПеревесАвансов.НайтиСтроки(Новый Структура("Выбрано, Документ", Истина, Документы.КорректировкаДолга.ПустаяСсылка()));
//	
//	ТекущийКонтрагент = Неопределено;
//	ДокументКорректировкаДолга = Неопределено;
//	Для ИндексСтроки = 0 По СтрокиПереносАвансов.ВГраница() Цикл
//		СтрокаПеревесАвансов = СтрокиПереносАвансов[ИндексСтроки];
//		Если ТекущийКонтрагент <> СтрокаПеревесАвансов.Контрагент Тогда
//			
//			Если ДокументКорректировкаДолга <> Неопределено Тогда 
//				ДокументКорректировкаДолга.Записать(РежимЗаписиДокумента.Запись);
//				
//				ИндексСтрокиБезДокумента = ИндексСтроки-1;
//				Пока ИндексСтрокиБезДокумента >= 0 И СтрокиПереносАвансов[ИндексСтрокиБезДокумента].Контрагент = ТекущийКонтрагент Цикл
//					СтрокиПереносАвансов[ИндексСтрокиБезДокумента].Документ = ДокументКорректировкаДолга.Ссылка;
//					ИндексСтрокиБезДокумента = ИндексСтрокиБезДокумента - 1;
//				КонецЦикла;
//			КонецЕсли;
//			
//			ТекущийКонтрагент = СтрокаПеревесАвансов.Контрагент;

//			ДокументКорректировкаДолга = Документы.КорректировкаДолга.СоздатьДокумент();
//			
//			ДокументКорректировкаДолга.Дата = КонецДня(Объект.Дата) + 1;
//			ДокументКорректировкаДолга.Организация = Объект.Организация;
//			ДокументКорректировкаДолга.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;
//			ДокументКорректировкаДолга.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
//			ДокументКорректировкаДолга.КонтрагентКредитор = Объект.НовыйПокупатель;
//			ДокументКорректировкаДолга.ВалютаДокумента = ВалютаРегламентированногоУчета;
//			ДокументКорректировкаДолга.КурсДокумента = 1;
//			ДокументКорректировкаДолга.КратностьДокумента = 1;
//			ДокументКорректировкаДолга.Ответственный = Пользователи.ТекущийПользователь();
//			
//			ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				Нстр("ru = '#Создан автоматически обработкой ""Перенос аванса на КА ""РОЗНИЦА СЕРТИФИКАТ"""" дата создания - %1'"), 
//				ТекущаяДатаСеанса());
//			ДокументКорректировкаДолга.Комментарий = ТекстКомментария;
//			
//			ДокументКорректировкаДолга.КонтрагентДебитор = ТекущийКонтрагент;
//			
//		КонецЕсли;
//		
//		
//		СтрокаДебиторскаяЗадолженность = ДокументКорректировкаДолга.ДебиторскаяЗадолженность.Добавить();
//		СтрокаДебиторскаяЗадолженность.ДоговорКонтрагента = СтрокаПеревесАвансов.ДоговорКонтрагента;
//		 
//		СтрокаДебиторскаяЗадолженность.Сделка = СтрокаПеревесАвансов.ДокументРасчетов;
//		СтрокаДебиторскаяЗадолженность.КурсВзаиморасчетов = 1;
//		СтрокаДебиторскаяЗадолженность.КратностьВзаиморасчетов = 1;
//		СтрокаДебиторскаяЗадолженность.Сумма = СтрокаПеревесАвансов.Сумма;
//		СтрокаДебиторскаяЗадолженность.СуммаНУ = СтрокаПеревесАвансов.Сумма;
//		СтрокаДебиторскаяЗадолженность.СуммаВзаиморасчетов = СтрокаПеревесАвансов.Сумма;
//		СтрокаДебиторскаяЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
//		СтрокаДебиторскаяЗадолженность.КорСчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
//		
//		СтрокаДебиторскаяЗадолженность.КорДоговорКонтрагента = Объект.НовыйДоговор;
//		
//	КонецЦикла;
//		
//	Если ДокументКорректировкаДолга <> Неопределено Тогда 
//		ДокументКорректировкаДолга.Записать(РежимЗаписиДокумента.Запись);
//		
//		ИндексСтроки = СтрокиПереносАвансов.Количество()-1;
//		Пока ИндексСтроки >= 0 И СтрокиПереносАвансов[ИндексСтроки].Контрагент = ТекущийКонтрагент Цикл
//			СтрокиПереносАвансов[ИндексСтроки].Документ = ДокументКорректировкаДолга.Ссылка;
//			ИндексСтроки = ИндексСтроки - 1;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("бит_ГруппаКлиентов", ПредопределенноеЗначение("Перечисление.бит_ГруппаКлиентов.РОЗНИЦА")));
	//ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры



#КонецОбласти

//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-10-07 (#ТП_БП11_ФР10)
#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = ЭтотОбъект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = ЭтотОбъект[ИмяРеквизита];	
	
КонецПроцедуры

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	ЭтотОбъект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры


#КонецОбласти

//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-10-07 (#ТП_БП11_ФР10)
