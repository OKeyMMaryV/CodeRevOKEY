
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	//Блок Получение ЭД
	СтруктураПараметров = ПодготовитьСтруктуруПараметров(1);
	УстановитьЗначениеПараметраДинамическогоСписка(1);
	
	//Блок Распаковка ЭД
	СтруктураПараметров = ПодготовитьСтруктуруПараметров(2);
	УстановитьЗначениеПараметраДинамическогоСписка(2);
	
	//Блок Подписание ЭД

	СтруктураПараметров = ПодготовитьСтруктуруПараметров(3);
	УстановитьЗначениеПараметраДинамическогоСписка(3);
	
	//Блок Проверка ЭЦП
	ЗаголовокЗафиксировано = Элементы.Зафиксировано.Заголовок;
	ПолучитьПодпсииСНеВернойПодписью();
	
	//Блок проверка файлов
	СтруктураПараметров = ПодготовитьСтруктуруПараметров(4);
	УстановитьЗначениеПараметраДинамическогоСписка(4);
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-19 (#4229)
	УстановитьУсловноеОформление();
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-19 (#4229)
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПодпсииСНеВернойПодписью()
	
	КоличествоСНевернойПодписью = 0;
	Элементы.Зафиксировано.Заголовок = ЗаголовокЗафиксировано;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЭлектронныеПодписи.ПодписанныйОбъект) КАК КоличествоОбъектов
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	НЕ ЭлектронныеПодписи.ПодписьВерна";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		КоличествоСНевернойПодписью = ВыборкаДетальныеЗаписи.КоличествоОбъектов;
	
	КонецЕсли;
	
	Элементы.Зафиксировано.Заголовок = Элементы.Зафиксировано.Заголовок + " " + КоличествоСНевернойПодписью + " шт.";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметраДинамическогоСписка(Блок)
	
	ДатаЗа10Дней = НачалоДня(ТекущаяДатаСеанса() - 10*24*60*60);
	
	Если Блок = 1 Тогда
		ТабРЗПолученные.Параметры.УстановитьЗначениеПараметра("НаименованиеРЗ", Метаданные.РегламентныеЗадания.ок_ПолучениеНовыхПакетовЭД.Синоним);
		ТабРЗПолученные.Параметры.УстановитьЗначениеПараметра("За10Дней", 		ДатаЗа10Дней);
	ИначеЕсли Блок = 2 Тогда
		ТабРЗРаспакованные.Параметры.УстановитьЗначениеПараметра("НаименованиеРЗ", 	Метаданные.РегламентныеЗадания.ок_РаспаковкаПакетовЭД.Синоним);
		ТабРЗРаспакованные.Параметры.УстановитьЗначениеПараметра("За10Дней", 		ДатаЗа10Дней);
	ИначеЕсли Блок = 3 Тогда
		ТабРЗПодписание.Параметры.УстановитьЗначениеПараметра("НаименованиеРЗ", "Подписать ЭД (ОК)");
		ТабРЗПодписание.Параметры.УстановитьЗначениеПараметра("За10Дней", 		ДатаЗа10Дней);
	ИначеЕсли Блок = 4 Тогда
		ТабРЗПроверкаФайлов.Параметры.УстановитьЗначениеПараметра("НаименованиеРЗ", Метаданные.РегламентныеЗадания.ок_ПроверкаФайловЭДО.Синоним);
		ТабРЗПроверкаФайлов.Параметры.УстановитьЗначениеПараметра("За10Дней", 		ДатаЗа10Дней);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруПараметров(Блок)
	
	СтруктураПараметров = Новый Структура;
	
	Если Блок = 1 Тогда
		МетаданныеРегЗадание = Метаданные.РегламентныеЗадания.ок_ПолучениеНовыхПакетовЭД;
	ИначеЕсли Блок = 2 Тогда
		МетаданныеРегЗадание = Метаданные.РегламентныеЗадания.ок_РаспаковкаПакетовЭД;
	ИначеЕсли Блок = 3 Тогда
		МетаданныеРегЗадание = "Подписать ЭД (ОК)";
	ИначеЕсли Блок = 4 Тогда
		МетаданныеРегЗадание = Метаданные.РегламентныеЗадания.ок_ПроверкаФайловЭДО;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("МетаданныеРегЗадание", МетаданныеРегЗадание);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ОбновитьНаСервере(Блок)

	СтруктураПараметров = ПодготовитьСтруктуруПараметров(Блок);
	УстановитьЗначениеПараметраДинамическогоСписка(Блок)
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабРЗПолученныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураДляЖР = ЗаполнитьСтруктуруДляЖРПоСтроке(ВыбраннаяСтрока);
	
	Если СтруктураДляЖР.Успех Тогда
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(СтруктураДляЖР);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьПервоначальнуюСтруктуруДляЖР()
	
	СписокСеансов = Новый СписокЗначений;
	СписокСеансов.Добавить(0);
	
	СтруктураДляЖР = Новый Структура;
	СтруктураДляЖР.Вставить("Успех", 			Ложь);
	СтруктураДляЖР.Вставить("ДатаНачала", 		Дата(1,1,1));
	СтруктураДляЖР.Вставить("ДатаОкончания", 	Дата(1,1,1));
	СтруктураДляЖР.Вставить("Сеанс", 			СписокСеансов);
	СтруктураДляЖР.Вставить("Уровень", 			"Ошибка");

	Возврат СтруктураДляЖР;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ЗаполнитьСтруктуруДляЖРПоСтроке(ВыбраннаяСтрока)
	
	СтруктураДляЖР = ПодготовитьПервоначальнуюСтруктуруДляЖР();
	
	МенеджерЗаписиРС = РегистрыСведений.ок_ИнформацияПоРегламентномуЗаданию.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРС.Период 		= ВыбраннаяСтрока.Период;
	МенеджерЗаписиРС.НаименованиеРЗ = ВыбраннаяСтрока.НаименованиеРЗ;
	МенеджерЗаписиРС.Пользователь	= ВыбраннаяСтрока.Пользователь;
	МенеджерЗаписиРС.ЭтоРЗ 			= ВыбраннаяСтрока.ЭтоРЗ;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-13 (#4227)
	МенеджерЗаписиРС.ИдентификаторСеанса = ВыбраннаяСтрока.ИдентификаторСеанса;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-13 (#4227)
	МенеджерЗаписиРС.Прочитать();
	Если Не МенеджерЗаписиРС.Выбран() Или Не МенеджерЗаписиРС.ЕстьОшибки Тогда
		Возврат СтруктураДляЖР;
	КонецЕсли;
	
	СтруктураДляЖР.ДатаНачала 			= МенеджерЗаписиРС.Период - 1;
	СтруктураДляЖР.ДатаОкончания		= МенеджерЗаписиРС.ДатаОкончания + 1;
	СтруктураДляЖР.Сеанс[0].Значение	= МенеджерЗаписиРС.НомерСеанса;
	СтруктураДляЖР.Успех				= Истина;
	
	Возврат СтруктураДляЖР;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРаспаковка(Команда)
	ОбновитьНаСервере(2);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭЦП(Команда)
	ПолучитьПодпсииСНеВернойПодписью();
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксированоНажатие(Элемент)
	
	Форма = ОткрытьФорму("РегистрСведений.ЭлектронныеПодписи.ФормаСписка", ,ЭтаФорма);
	
	СтруктураДанных = Новый Структура;
	СтруктураОтбора = Новый Структура();
	
	СтруктураДанных.Вставить("Использование", 	Истина);
	СтруктураДанных.Вставить("ПравоеЗначение", 	Ложь);
	СтруктураДанных.Вставить("ЛевоеЗначение", 	"ПодписьВерна");
	СтруктураДанных.Вставить("ВидСравнения", 	ВидСравненияКомпоновкиДанных.Равно);

	СтруктураОтбора.Вставить("СтатусПакета", СтруктураДанных);
	
	УстановитьПользовательскийОтбор(Форма.Список, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПользовательскийОтбор(Список, СтруктураОтбора)
	
	ПользовательскийОтбор = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	
	Для Каждого ЭлементаОтбора Из ПользовательскийОтбор.Элементы Цикл
		ЭлементаОтбора.Использование = Ложь;
	КонецЦикла;
	
	Для Каждого ЭлементаСтруктуры Из СтруктураОтбора Цикл
		
		ЭлементОтбораПользовательский 											=  ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораПользовательский.ИдентификаторПользовательскойНастройки 	= Новый УникальныйИдентификатор();
		
		ЭлементОтбораПользовательский.ВидСравнения 		= ЭлементаСтруктуры.Значение.ВидСравнения;
		ЭлементОтбораПользовательский.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ЭлементаСтруктуры.Значение.ЛевоеЗначение);
		ЭлементОтбораПользовательский.ПравоеЗначение 	= ЭлементаСтруктуры.Значение.ПравоеЗначение;
		ЭлементОтбораПользовательский.Использование 	= ЭлементаСтруктуры.Значение.Использование;
		
	КонецЦикла;

	Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьПодписание(Команда)
	ОбновитьНаСервере(3);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПроверкаФайлов(Команда)
	ОбновитьНаСервере(4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеРЗПроверкаФайлов(Команда)
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-21 (#4163)
	Если Не ЗначениеЗаполнено(ИдентификаторРЗПроверкаФайловЭДО) Тогда
		Структура = Новый Структура("Метаданные", "ок_ПроверкаФайловЭДО");
		ЗаполнитьПараметрыРегламентногоЗадания(Структура);
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-21 (#4163)
	
	Если ЗначениеЗаполнено(ИдентификаторРЗПроверкаФайловЭДО) Тогда
		ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРЗПроверкаФайловЭДО);
		РезультатРасписания = ДиалогРасписания.ОткрытьМодально();
		Если РезультатРасписания Тогда 
			РасписаниеРЗПроверкаФайловЭДО = ДиалогРасписания.Расписание;
			ИзменитьРасписаниеРЗ(РасписаниеРЗПроверкаФайловЭДО, ИдентификаторРЗПроверкаФайловЭДО)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьРасписаниеРЗ(Расписание, Идентификатор)
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Идентификатор);
	Задание.Расписание = Расписание;
	Задание.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПакетов(Команда)
	
	Форма = ОткрытьФорму("Документ.ПакетЭД.ФормаСписка", , ЭтаФорма);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Использование", 	Истина);
	СтруктураДанных.Вставить("ПравоеЗначение", 	ПолучитьПакетыЭДБезФайлов());
	СтруктураДанных.Вставить("ЛевоеЗначение", 	"Ссылка");
	СтруктураДанных.Вставить("ВидСравнения", 	ВидСравненияКомпоновкиДанных.ВСписке);
	
	СтруктураОтбора = Новый Структура("Ссылка", СтруктураДанных);
	УстановитьПользовательскийОтбор(Форма.Список, СтруктураОтбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПакетыЭДБезФайлов(КоличествоЗаписей = Неопределено)

	СписокПакетовЭД = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ " + ?(КоличествоЗаписей = Неопределено, ""," ПЕРВЫЕ " + КоличествоЗаписей) + "
		|	ок_ЭлектронныеДокументыСОтсутствующимиФайлами.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.ок_ЭлектронныеДокументыСОтсутствующимиФайлами КАК ок_ЭлектронныеДокументыСОтсутствующимиФайлами
		|ГДЕ
		|	ок_ЭлектронныеДокументыСОтсутствующимиФайлами.Документ ССЫЛКА Документ.ПакетЭД
		|	И ок_ЭлектронныеДокументыСОтсутствующимиФайлами.Документ <> ЗНАЧЕНИЕ(Документ.ПакетЭД.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокПакетовЭД.Добавить(ВыборкаДетальныеЗаписи.Документ);
	КонецЦикла;
	
	Возврат СписокПакетовЭД;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВходящийЭДБезФайлов(КоличествоЗаписей = Неопределено)

	СписокПакетовЭД = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ " + ?(КоличествоЗаписей = Неопределено, ""," ПЕРВЫЕ " + КоличествоЗаписей) + "
		|	ок_НенайденныеФайлыЭДО.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.ок_НенайденныеФайлыЭДО КАК ок_НенайденныеФайлыЭДО
		|ГДЕ
		|	ок_НенайденныеФайлыЭДО.Документ ССЫЛКА Документ.ЭлектронныйДокументВходящий
		|	И ок_НенайденныеФайлыЭДО.Документ <> ЗНАЧЕНИЕ(Документ.ЭлектронныйДокументВходящий.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокПакетовЭД.Добавить(ВыборкаДетальныеЗаписи.Документ);
	КонецЦикла;
	
	Возврат СписокПакетовЭД;

КонецФункции

&НаКлиенте
Процедура ОткрытьАрхифЭДО(Команда)
	
	Форма = ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.АрхивЭлектронныхДокументов", , ЭтаФорма);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Использование", 	Истина);
	СтруктураДанных.Вставить("ПравоеЗначение", 	ПолучитьПакетыЭДБезФайлов());
	СтруктураДанных.Вставить("ЛевоеЗначение", 	"Ссылка");
	СтруктураДанных.Вставить("ВидСравнения", 	ВидСравненияКомпоновкиДанных.ВСписке);
	
	СтруктураОтбора = Новый Структура("Ссылка", СтруктураДанных);
	УстановитьПользовательскийОтбор(Форма.ВсеПакеты, СтруктураОтбора);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Использование", 	Истина);
	СтруктураДанных.Вставить("ПравоеЗначение", 	ПолучитьВходящийЭДБезФайлов());
	СтруктураДанных.Вставить("ЛевоеЗначение", 	"Ссылка");
	СтруктураДанных.Вставить("ВидСравнения", 	ВидСравненияКомпоновкиДанных.ВСписке);
	
	СтруктураОтбора = Новый Структура("Ссылка", СтруктураДанных);
	УстановитьПользовательскийОтбор(Форма.Список, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьZipПакетаЭД(Команда)
	
	ОбновитьZipПакетаЭДНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьZipПакетаЭДНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ок_НенайденныеФайлыЭДО.Документ КАК Документ.ПакетЭД).Получатель КАК ИДПолучателя,
		|	ВЫРАЗИТЬ(ок_НенайденныеФайлыЭДО.Документ КАК Документ.ПакетЭД).ок_УИДДокументаОператораЭДО КАК ок_УИДДокументаОператораЭДО,
		|	ок_НенайденныеФайлыЭДО.Документ КАК Документ,
		|	ВЫРАЗИТЬ(ок_НенайденныеФайлыЭДО.Документ КАК Документ.ПакетЭД).ВнешнийУИД КАК ВнешнийУИД,
		|	ВЫРАЗИТЬ(ок_НенайденныеФайлыЭДО.ПрисоединенныйФайл КАК Справочник.ПакетЭДПрисоединенныеФайлы).Наименование КАК НаименованиеФайла,
		|	ок_НенайденныеФайлыЭДО.ПрисоединенныйФайл КАК ПрисоединенныйФайл
		|ИЗ
		|	РегистрСведений.ок_НенайденныеФайлыЭДО КАК ок_НенайденныеФайлыЭДО
		|ГДЕ
		|	ок_НенайденныеФайлыЭДО.Документ ССЫЛКА Документ.ПакетЭД
		|ИТОГИ ПО
		|	ИДПолучателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновитьНаСервере(4);
		Возврат;
	КонецЕсли;
	
	ВыборкаИДПолучателя = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИДПолучателя.Следующий() Цикл
		
		ПараметрыЭДО 	= ок_ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ВыборкаИДПолучателя.ИДПолучателя);
		Соединение 		= ок_ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.ок_СпособыОбменаЭД.ЧерезОператораЭДОСбис, ПараметрыЭДО);
		
		ВыборкаДетальныеЗаписи = ВыборкаИДПолучателя.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ИмяФайла 	= ВыборкаДетальныеЗаписи.НаименованиеФайла;
			Результат 	= ок_ОбменСКонтрагентамиВнутренний.сбисОтправитьИОбработатьКоманду(Соединение, ок_ОбменСКонтрагентамиВнутренний.сбисПараметрыИнтеграции("GetMessage", ПараметрыЭДО, Новый Структура("ПараметрыЗапроса", Новый Структура("Документ", Новый Структура("Идентификатор", ВыборкаДетальныеЗаписи.ок_УИДДокументаОператораЭДО)))), ПараметрыЭДО);
			
			Если Результат = Неопределено Или Не Результат.Свойство("result") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По " + ВыборкаДетальныеЗаписи.Документ + " не удалось повторно получить данные");
				Продолжить;
			КонецЕсли;
			
			Документ 		= Результат.result;
			СобытиеНайдено 	= Ложь;
			
			Для каждого Событие из Документ.Событие Цикл
				Если Событие.Идентификатор = ВыборкаДетальныеЗаписи.ВнешнийУИД Тогда
					СобытиеНайдено = Истина;
					Маркер 					= ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Неопределено);
					ФайлЭД 					= ок_ОбменСКонтрагентамиВнутренний.ПолучитьЭДОператораЭДО(Маркер, Соединение, ПараметрыЭДО, Документ.СсылкаНаАрхив, Ложь);
					ДвоичныеДанныеЭлемента 	= Новый ДвоичныеДанные(ФайлЭД);
					АдресВХранилище 		= ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
					
					ПараметрыФайла = Новый Структура;
					ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
					ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", "");
					
					СвойстваФайла = РаботаСФайламиВТомахСлужебный.СвойстваФайлаВТоме();
					ЗаполнитьЗначенияСвойств(СвойстваФайла, ВыборкаДетальныеЗаписи.ПрисоединенныйФайл);
					
					ПутьКФайлу = РаботаСФайламиВТомахСлужебный.ПолноеИмяФайлаВТоме(СвойстваФайла);
					
					ФайлПакета = Новый Файл(ПутьКФайлу);
					Если Не ФайлПакета.Существует() Тогда
						РаботаСФайлами.ОбновитьФайл(ВыборкаДетальныеЗаписи.ПрисоединенныйФайл, ПараметрыФайла);
					КонецЕсли;
					
					МенеджерРС = РегистрыСведений.ок_НенайденныеФайлыЭДО.СоздатьМенеджерЗаписи();
					МенеджерРС.ПрисоединенныйФайл = ВыборкаДетальныеЗаписи.ПрисоединенныйФайл;
					МенеджерРС.Удалить();
					
					МенеджерРС = РегистрыСведений.ок_ЭлектронныеДокументыСОтсутствующимиФайлами.СоздатьМенеджерЗаписи();
					МенеджерРС.Документ = ВыборкаДетальныеЗаписи.Документ;
					МенеджерРС.Удалить();
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не СобытиеНайдено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По " + ВыборкаДетальныеЗаписи.Документ + " не удалось повторно получить данные");
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьНаСервере(4);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьФайлыЭДНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ок_НенайденныеФайлыЭДО.Документ КАК Документ
		|ПОМЕСТИТЬ ТабВходящиеЭД
		|ИЗ
		|	РегистрСведений.ок_НенайденныеФайлыЭДО КАК ок_НенайденныеФайлыЭДО
		|ГДЕ
		|	НЕ ВЫРАЗИТЬ(ок_НенайденныеФайлыЭДО.Документ КАК Документ.ЭлектронныйДокументВходящий).ПометкаУдаления
		|	И НЕ ВЫРАЗИТЬ(ок_НенайденныеФайлыЭДО.ПрисоединенныйФайл КАК Справочник.ЭДПрисоединенныеФайлы).ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПакетЭДЭлектронныеДокументы.ОбъектВладелец КАК ВходящийЭД,
		|	ПакетЭДЭлектронныеДокументы.Ссылка.ок_ДатаТранзакции КАК ПоследняяДатаИзменения,
		|	ПакетЭДЭлектронныеДокументы.Ссылка.ок_ДатаРедакции КАК ДатаДляВерсии,
		|	ПакетЭДЭлектронныеДокументы.Ссылка КАК ПакетЭД
		|ПОМЕСТИТЬ ТабВсехПакетовЭД
		|ИЗ
		|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабВходящиеЭД КАК ТабВходящиеЭД
		|		ПО ПакетЭДЭлектронныеДокументы.ОбъектВладелец = ТабВходящиеЭД.Документ
		|			И (НЕ ПакетЭДЭлектронныеДокументы.Ссылка.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабВсехПакетовЭД.ВходящийЭД КАК ВходящийЭД,
		|	МАКСИМУМ(ТабВсехПакетовЭД.ПоследняяДатаИзменения) КАК ПоследняяДатаИзменения,
		|	ТабВсехПакетовЭД.ДатаДляВерсии КАК ДатаДляВерсии
		|ПОМЕСТИТЬ ТабДатыПоследнихПакетовЭД
		|ИЗ
		|	ТабВсехПакетовЭД КАК ТабВсехПакетовЭД
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабВсехПакетовЭД.ВходящийЭД,
		|	ТабВсехПакетовЭД.ДатаДляВерсии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабВсехПакетовЭД.ВходящийЭД КАК ВходящийЭД,
		|	ТабВсехПакетовЭД.ПоследняяДатаИзменения КАК ПоследняяДатаИзменения,
		|	МАКСИМУМ(ТабВсехПакетовЭД.ПакетЭД) КАК ПакетЭД
		|ПОМЕСТИТЬ ТабПакетыЭДСВходящимиЭД
		|ИЗ
		|	ТабДатыПоследнихПакетовЭД КАК ТабДатыПоследнихПакетовЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабВсехПакетовЭД КАК ТабВсехПакетовЭД
		|		ПО (ТабВсехПакетовЭД.ВходящийЭД = ТабДатыПоследнихПакетовЭД.ВходящийЭД)
		|			И (ТабВсехПакетовЭД.ПоследняяДатаИзменения = ТабДатыПоследнихПакетовЭД.ПоследняяДатаИзменения)
		|			И (ТабВсехПакетовЭД.ДатаДляВерсии = ТабДатыПоследнихПакетовЭД.ДатаДляВерсии)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабВсехПакетовЭД.ВходящийЭД,
		|	ТабВсехПакетовЭД.ПоследняяДатаИзменения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабПакетыЭДСВходящимиЭД.ПакетЭД КАК ПакетЭД,
		|	ПакетЭДПрисоединенныеФайлы.Ссылка КАК ФайлЭД
		|ИЗ
		|	ТабПакетыЭДСВходящимиЭД КАК ТабПакетыЭДСВходящимиЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПакетЭДПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
		|		ПО ТабПакетыЭДСВходящимиЭД.ПакетЭД = ПакетЭДПрисоединенныеФайлы.ВладелецФайла
		|			И (НЕ ПакетЭДПрисоединенныеФайлы.ПометкаУдаления)
		|			И (ПакетЭДПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		МассивПакетовЭД = Новый Массив;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СвойстваФайла = РаботаСФайламиВТомахСлужебный.СвойстваФайлаВТоме();
			ЗаполнитьЗначенияСвойств(СвойстваФайла, ВыборкаДетальныеЗаписи.ФайлЭД);
			
			ПутьКФайлу = РаботаСФайламиВТомахСлужебный.ПолноеИмяФайлаВТоме(СвойстваФайла);
			ФайлПакета = Новый Файл(ПутьКФайлу);
			Если ФайлПакета.Существует() Тогда
				МассивПакетовЭД.Добавить(ВыборкаДетальныеЗаписи.ПакетЭД);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивПакетовЭД.Количество() > 0 Тогда
			КолРаспакованныхЭД = 0;
			
			КонтекстОперации = ЭлектронноеВзаимодействиеСлужебный.НовыйКонтекстОперации();
			КонтекстОперации.Вставить("ОбновлятьФайлЭД", Истина);
			ОбменСКонтрагентамиСлужебный.РаспаковатьПакетыЭДНаСервере(МассивПакетовЭД, 
																	КолРаспакованныхЭД, 
																	КонтекстОперации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФайлыЭД(Команда)
	ОбновитьФайлыЭДНаСервере();
	ОбновитьНаСервере(4);
КонецПроцедуры

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-19 (#4229)
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// 1. Ошибки ТабРЗПодписанные
	ЭлементУсловногоОформления = ТабРЗПодписание.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьОшибки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЛососьСветлый);
	
	// 2. Ошибки ТабРЗПолученные
	ЭлементУсловногоОформления = ТабРЗПолученные.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьОшибки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЛососьСветлый);
	
	// 3. Ошибки ТабРЗПроверкаФайлов
	ЭлементУсловногоОформления = ТабРЗПроверкаФайлов.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьОшибки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЛососьСветлый);
	
	// 4. Ошибки ТабРЗРаспакованные
	ЭлементУсловногоОформления = ТабРЗРаспакованные.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьОшибки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЛососьСветлый);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПараметрыРегламентногоЗадания(СтруктураОтбора)
	
	МассивРегЗаданиеПолучениеНовыхПакетовЭД = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураОтбора);
	
	Если МассивРегЗаданиеПолучениеНовыхПакетовЭД.Количество() > 0 Тогда
		ИдентификаторРЗПроверкаФайловЭДО 	= МассивРегЗаданиеПолучениеНовыхПакетовЭД[0].УникальныйИдентификатор;
		РасписаниеРЗПроверкаФайловЭДО 		= МассивРегЗаданиеПолучениеНовыхПакетовЭД[0].Расписание;
	КонецЕсли;
	
КонецФункции
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-19 (#4229)

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-08-26 (#4325)
&НаКлиенте
Процедура ОткрытьФормуПросмотраДатПолученияЭД(Команда)
	
	ОткрытьФорму("Обработка.ок_АРМСистемаМониторингаКонтрольныхТочекОсновныхПроцессовЮЗЭДО.Форма.ФормаПросмотраДатПолученияЭД",, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-08-26 (#4325)