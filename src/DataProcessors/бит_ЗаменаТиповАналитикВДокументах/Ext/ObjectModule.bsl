#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СоответствиеДокументов Экспорт; // Хранит имена документов в которых есть возможность использовать доп. аналитики.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения регистра бит_ОборотыПоБюджетам.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

Перем мСоответствиеДопИменАналитик; // Хранит имена дополнительных реквизитов аналитик для документов.

Перем мМассивИменОбъектовНеВклУсловияПоИзмерениям; // Сформируем массив имен объектов не включающих в текст запроса выборки условия по измерениям.

// Хранит соответствие имени объекта и префикс имени доп аналитики.
// Если у объекта указаны реквизиты с доп. аналитикой с именем бит_Аналитика_(i),
// тогда в соответствии должна быть запись: Ключ - ИмяОбъекта, Значение - "бит_".
Перем мСоотИмяОбъектаПрефиксИмениДопАналитики;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция получает документы в которых есть возможность использовать дополнительные аналитики
// 	и формирует две коллекции: 
// 			СоответствиеДокументов - Соответствие - содержит имя документа и место поиска доп. реквизитов.
// 											Ключ - имя документа.
// 											Значение - массив - место поиска ревизитов(в реквизитах или в таб.частях)
// 	и возвращаемое значение СписокДокументов.
// 
// Параметры:
//  РежимПолучения - Строка. По умолчанию "Все". Значения: / "Все" / "ДенежныеДокументы" /.
// 
// Возвращаемое значение:
// 	СписокДокументов - СписокЗначений - Значение - имя документа
// 										Представление - синоним документа.
// 
Функция ПолучитьДокументыИспользующиеДопАналитики(РежимПолучения = "Все") Экспорт
	
	СоответствиеДокументов = Новый Соответствие;
	СписокДокументов 	   = Новый СписокЗначений;
	
	ПолучатьВсе 			= ?(ВРег(РежимПолучения) = "ВСЕ"			  , Истина, Ложь);
	ТолькоДенежныеДокументы = ?(ВРег(РежимПолучения) = "ДЕНЕЖНЫЕДОКУМЕНТЫ", Истина, Ложь);
	
	Если ПолучатьВсе Тогда
		
		Для Каждого Мета из Метаданные.Справочники Цикл
			
			Массив = Новый Массив;
			
			Если Лев(Мета.Имя, 4) = "бит_" Тогда
				
				Если Мета.Реквизиты.Найти("Аналитика_1") <> Неопределено Тогда
					Массив.Добавить("Реквизиты");
				КонецЕсли;
				
				Для каждого МетаТЧ из Мета.ТабличныеЧасти Цикл
					
					Если МетаТЧ.Реквизиты.Найти("Аналитика_1") <> Неопределено Тогда
						Массив.Добавить(МетаТЧ.Имя);
					КонецЕсли;
					
				КонецЦикла;	
				
			КонецЕсли;	
			
			Если Массив.Количество() > 0 Тогда
				СоответствиеДокументов.Вставить(Мета.Имя, Массив);
				СписокДокументов.Добавить(Мета.Имя, "Справочник - " + Мета.Синоним, Истина);	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Если ПолучатьВсе Тогда
	
	Для Каждого Мета из Метаданные.Документы Цикл
		
		Массив = Новый Массив;
		
		Если Лев(Мета.Имя, 4) = "бит_" Тогда
			
			Если ПолучатьВсе Тогда
				
				Если Мета.Реквизиты.Найти("Аналитика_1") <> Неопределено Тогда
					Массив.Добавить("Реквизиты");
				КонецЕсли;
				
				Для каждого МетаТЧ из Мета.ТабличныеЧасти Цикл
					
					Если МетаТЧ.Реквизиты.Найти("Аналитика_1") <> Неопределено Тогда
						Массив.Добавить(МетаТЧ.Имя);
					КонецЕсли;
					
				КонецЦикла;	
				
			КонецЕсли; // Если ПолучатьВсе Тогда
			
		Иначе
			// Иначе, это типовой документ.
			
			МетаТабЧасти = Мета.ТабличныеЧасти;
			
			Если ПолучатьВсе Или ТолькоДенежныеДокументы Тогда
				
				// Если есть табличная часть "РасшифровкаПлатежа", тогда.
				Если Не МетаТабЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
					
					Если Не МетаТабЧасти.РасшифровкаПлатежа.Реквизиты.Найти("бит_Аналитика_1") = Неопределено Тогда
						
						Массив.Добавить("РасшифровкаПлатежа");
						
						// Добавим в соответствие: Ключ - ИмяДокумента, Значение - "бит_" (префикс).
						мСоотИмяОбъектаПрефиксИмениДопАналитики.Вставить(Мета.Имя, "бит_");
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; // Если ПолучатьВсе Или ТолькоДенежныеДокументы Тогда.
			
		КонецЕсли; // Если Лев(Мета.Имя, 4) = "бит_" Тогда
		
		Если Массив.Количество() > 0 Тогда
			СоответствиеДокументов.Вставить(Мета.Имя, Массив);
			СписокДокументов.Добавить(Мета.Имя, "Документ - " + Мета.Синоним, Истина);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции // ПолучитьДокументыИспользующиеДопАналитики()

// Процедура заменяет неопределенные или неверные типы значений дополнительных аналитик в документах 
// текущими установленными типами.
// 
Процедура ЗаменитьТипыАналитик(СписокТиповДокументов=Неопределено, РежимСообщений = "Все") Экспорт
	
	ВыводитьИнформацию  = ?(ВРег(РежимСообщений) = "ВСЕ", Истина, Ложь);
	
	мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Если СписокТиповДокументов = Неопределено Тогда  
		бит_ОбщегоНазначения.бит_Состояние("Получение списка документов использующих дополнительные аналитики");
		
		СписокТиповДокументов = ПолучитьДокументыИспользующиеДопАналитики();
	КонецЕсли;
		
	бит_ОбщегоНазначения.бит_Состояние("Формирование текста запроса");
	
	ТекстЗапроса = "";
	
	Для Каждого ТекДокумент Из СписокТиповДокументов Цикл
		
		Если ТекДокумент.Пометка Тогда
			
			ЭтоДокумент = ?(Найти(ТекДокумент.Представление, "Документ") > 0, Истина, Ложь);
			
			ДополнитьТекстЗапроса(ТекДокумент.Значение, ТекстЗапроса, ЭтоДокумент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		ТекстСообщенияПусто = Нстр("ru = 'Замена не выполнена.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщенияПусто);
		Возврат;	
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ";
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаблица.Ссылка,
	|	ВремТаблица.ЭтоДокумент,
	|	ВремТаблица.Тип
	|ИЗ
	|	ВремТаблица КАК ВремТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВремТаблица.Ссылка,
	|	ВремТаблица.ЭтоДокумент,
	|	ВремТаблица.Тип;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблица";
	
	бит_ОбщегоНазначения.бит_Состояние("Выполнение запроса");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаНачала"	 , ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	  
	бит_ОбщегоНазначения.бит_Состояние("Замена типов");
	
	КоличествоСтрок = Выборка.Количество();
	
	ВыполненоУспешно = Истина;
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Счетчик = 0;
	Пока Выборка.Следующий() Цикл
		


		#Если Клиент Тогда
			
			ОбработкаПрерыванияПользователя();
			
			Счетчик = Счетчик + 1;
			
			ТекстСостояния 	  = "ru = 'Замена типов аналитик в документах'";
			ПроцентВыполнения = Окр(Счетчик / КоличествоСтрок * 100);
			ТекстСостояния 	  = НСтр(ТекстСостояния) + " " + ПроцентВыполнения + "%";
			Состояние(ТекстСостояния);
			
		#КонецЕсли
	
		МестаПоиска 		  = СоответствиеДокументов[Выборка.Тип];
		МассивДопИменАналитик = мСоответствиеДопИменАналитик.Получить(Выборка.Тип);
		флМассивДопИменУказан = ?(Не МассивДопИменАналитик = Неопределено, Истина, Ложь);
		
		Если НЕ МестаПоиска = Неопределено Тогда
			
			ОбъектСсылка = Выборка.Ссылка;
			Объект 		 = ОбъектСсылка.ПолучитьОбъект();
			
			ИмяТекущегоОбъекта    = ОбъектСсылка.Метаданные().Имя;
			ПрефиксИмениИзмерения = мСоотИмяОбъектаПрефиксИмениДопАналитики.Получить(ИмяТекущегоОбъекта);
			ПрефиксИмениИзмерения = ?(ПрефиксИмениИзмерения = Неопределено, "", ПрефиксИмениИзмерения);
			
			ПроизведенаМодификация = Ложь;
			
			Для Каждого МестоПоиска Из МестаПоиска Цикл
				
				номИзм = 1;
				
				// Получим структуру дополнительных имен аналитик.
				ТекСтруктураДопИмен = ?(флМассивДопИменУказан И Не МассивДопИменАналитик.Получить(МестоПоиска) = Неопределено
									   ,МассивДопИменАналитик.Получить(МестоПоиска)
									   ,Неопределено);
				
				флУказанаСтруктураДопИмен = ?(Не ТекСтруктураДопИмен = Неопределено, Истина, Ложь);
				
				Для Каждого ТекущееИзмерение Из мИзмеренияДоп Цикл
					
					ТекущаяНастройка = мНастройкиИзмерений[ТекущееИзмерение.Ключ];
					
					// Получим текущее имя дополнительной аналитики.
					ТекИмяДопАналитики	      = ?(флУказанаСтруктураДопИмен, ТекСтруктураДопИмен.Получить(номИзм), Неопределено);
					флУказаноИмяДопАналитики  = ?(Не ТекИмяДопАналитики = Неопределено, Истина, Ложь);
					
					Если МестоПоиска = "Реквизиты" Тогда
						
						// Выполним модификацию аналитики шапки.
						ВыполнитьМодификациюАналитикиШапки(Объект
														  ,Выборка.Ссылка
													 	  ,ПрефиксИмениИзмерения + ТекущееИзмерение.Ключ
														  ,Выборка.Ссылка.Метаданные()
														  ,ТекущаяНастройка
														  ,ПроизведенаМодификация);
						
						// Если указано имя дополнительной аналитики, тогда.
						Если флУказаноИмяДопАналитики Тогда
							
							// Выполним модификацию дополнительной аналитики шапки.
							ВыполнитьМодификациюАналитикиШапки(Объект
															  ,Выборка.Ссылка
														 	  ,ТекИмяДопАналитики
															  ,Выборка.Ссылка.Метаданные()
															  ,ТекущаяНастройка
															  ,ПроизведенаМодификация);
							
						КонецЕсли;
						
					Иначе
						
						// Выполним модификацию аналитики ТЧ.
						ВыполнитьМодификациюАналитикиТЧ(Объект
													   ,ПрефиксИмениИзмерения + ТекущееИзмерение.Ключ
													   ,Выборка.Ссылка.Метаданные()
													   ,МестоПоиска
													   ,ТекущаяНастройка
													   ,ПроизведенаМодификация);
													   
						// Если указано имя дополнительной аналитики, тогда.
						Если флУказаноИмяДопАналитики Тогда
							
							// Выполним модификацию дополнительной аналитики ТЧ.
							ВыполнитьМодификациюАналитикиТЧ(Объект
														   ,ТекИмяДопАналитики
														   ,Выборка.Ссылка.Метаданные()
														   ,МестоПоиска
														   ,ТекущаяНастройка
														   ,ПроизведенаМодификация);
							
						КонецЕсли;
						
					КонецЕсли;
					
					номИзм = номИзм+1;
					
				КонецЦикла; // По измерениям
				
			КонецЦикла; // По местам
			
			Если ПроизведенаМодификация Тогда
				
				Если Выборка.ЭтоДокумент Тогда
					
					Если РежимЗаписи = "Запись" Тогда
						РежимЗаписиДокументов = РежимЗаписиДокумента.Запись;
					Иначе
						РежимЗаписиДокументов = ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
					КонецЕсли;
					
					ВыполненоУспешно = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(Объект, РежимЗаписиДокументов,, РежимСообщений);
					
				Иначе
					ВыполненоУспешно = бит_ОбщегоНазначения.ЗаписатьСправочник(Объект,, РежимСообщений, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыполнятьВТранзакции
				И НЕ ВыполненоУспешно Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		 
	КонецЦикла; // По документам
	
	Если ВыполнятьВТранзакции Тогда
		Если ВыполненоУспешно Тогда
			ЗафиксироватьТранзакцию();
		Иначе	
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполненоУспешно И ВыводитьИнформацию Тогда
		бит_ОбщегоНазначения.бит_Сообщить("Замена аналитик выполнена.", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры // ЗаменитьТипыАналитик()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует основной текст запроса без условий по дополнительным аналитикам.
// 
// Параметры:
// 	Документ - строка - имя документа, как оно задано в конфигураторе.
// 	ИмяТабЧасти - Строка - имя табличной части документа по которой происходит выборка.
// 	ПоместитьВоВременную - булево - Истина - в текст запроса добавляется функция ПОМЕСТИТЬ.
// 
Функция СформироватьОсновнойТекстЗапроса(Документ, ИмяТабЧасти = "", ПоместитьВоВременную = Ложь, ЭтоДокумент)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	" + Документ + ".Ссылка,
	|   " + ?(ЭтоДокумент, "ИСТИНА", "ЛОЖЬ") + " КАК ЭтоДокумент,
	|	""" + Документ + """ КАК Тип"
	+ ?(ПоместитьВоВременную, "
	| ПОМЕСТИТЬ ВремТаблица","")+
	"
	|ИЗ
	|	" + ?(ЭтоДокумент, "Документ.", "Справочник.") + Документ + ?(ПустаяСтрока(ИмяТабЧасти), "", "." + ИмяТабЧасти) + " КАК " + Документ + "
	|ГДЕ Истина";
	
	СтрокаУсловия = "";
	
	Если ЭтоДокумент Тогда
		
		Если ЗначениеЗаполнено(ДатаНачала)
			И ЗначениеЗаполнено(ДатаОкончания) Тогда
			СтрокаУсловия = СтрокаУсловия + "
											|И " + Документ + ?(ИмяТабЧасти = "", "", ".Ссылка") + ".Дата Между &ДатаНачала И &ДатаОкончания";
		ИначеЕсли ЗначениеЗаполнено(ДатаНачала)	Тогда
			СтрокаУсловия = СтрокаУсловия + "
											|И " + Документ + ?(ИмяТабЧасти = "", "", ".Ссылка") + ".Дата >= &ДатаНачала";
		ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
			СтрокаУсловия = СтрокаУсловия + "
											|И " + Документ + ?(ИмяТабЧасти = "", "", ".Ссылка") + ".Дата <= &ДатаОкончания";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + СтрокаУсловия;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьОсновнойТекстЗапроса()

// Функция проверяет наличие реквизита в документе или в его табличной части.
// 
// Параметры:
//  Документ     - Строка
//  МестоПоиска  - Строка
//  ИмяРеквизита - Строка
//  
// Возвращаемое значение:
//   Булево
// 
Функция ОтсуствуетПодходящийРеквизит(Документ, МестоПоиска, ИмяРеквизита)

	МетаданныеДокумента  = Метаданные.Документы[Документ];
	
	МестоПоискаРеквизита = ?(МестоПоиска = "Реквизиты"
							, МетаданныеДокумента.Реквизиты
							, МетаданныеДокумента.ТабличныеЧасти[МестоПоиска].Реквизиты);
	
	ОтсуствуетРеквизит = МестоПоискаРеквизита.Найти(ИмяРеквизита) = Неопределено;	

	Возврат ОтсуствуетРеквизит;
	
КонецФункции // ОтсуствуетПодходящийРеквизит()

// Процедура дополняет текст запроса выборкой из переданного документа объкта системы.
// 
// Параметры:
// 	Документ - элемент соответствия - Ключ - имя документа.
// 	ТекстЗапроса - строка - текст дополняемого запроса.
// 
Процедура ДополнитьТекстЗапроса(Документ, ТекстЗапроса, ЭтоДокумент)
	
	Массив 				  = СоответствиеДокументов[Документ];
	МассивДопИменАналитик = мСоответствиеДопИменАналитик.Получить(Документ);
	флМассивДопИменУказан = ?(Не МассивДопИменАналитик = Неопределено, Истина, Ложь);
	
	ПомещатьВоВременную = ПустаяСтрока(ТекстЗапроса);
	
	ТекстЗапросаОсн = "";
	
	Для Каждого МестоПоиска Из Массив Цикл
		
		СтрокаУсловияПоИзмерениям = "";
		СтрокаУсловияПоДопИменам  = "";
		
		ТекстИЛИ = " ИЛИ ";
		ТекстИ   = " И ";
		
		номИзм = 1;
		
		// Получим структуру дополнительных имен аналитик.
		ТекСтруктураДопИмен = ?(флМассивДопИменУказан И Не МассивДопИменАналитик.Получить(МестоПоиска) = Неопределено
							   , МассивДопИменАналитик.Получить(МестоПоиска)
							   , Неопределено);

		флУказанаСтруктураДопИмен = ?(Не ТекСтруктураДопИмен = Неопределено, Истина, Ложь);
		
		ПрефиксИмениИзмерения = мСоотИмяОбъектаПрефиксИмениДопАналитики.Получить(Документ);
		ПрефиксИмениИзмерения = ?(ПрефиксИмениИзмерения = Неопределено, "", ПрефиксИмениИзмерения);
		
		Для Каждого ТекущееИзмерение Из мИзмеренияДоп Цикл
			
			ИмяРеквизитаДок = ПрефиксИмениИзмерения + ТекущееИзмерение.Ключ;
			Если ОтсуствуетПодходящийРеквизит(Документ, МестоПоиска, ИмяРеквизитаДок) Тогда
				Прервать;			
			КонецЕсли;
			
			// Изменение кода. Начало. 26.09.2012{{
			Если номИзм > 1 Тогда
				СтрокаУсловияПоИзмерениям = СтрокаУсловияПоИзмерениям + 
											?(номИзм <= мИзмеренияДоп.Количество(), Символы.ПС + ТекстИЛИ, "");
				СтрокаУсловияПоДопИменам  = СтрокаУсловияПоДопИменам 
											+ ?(ПустаяСтрока(СтрокаУсловияПоДопИменам)
										   		, ""
										   		, ?(номИзм <= мИзмеренияДоп.Количество(), Символы.ПС + ТекстИЛИ, ""));
			КонецЕсли;
			// Изменение кода. Конец. 26.09.2012}}						   
			
			ТекущаяНастройка 		  = мНастройкиИзмерений[ТекущееИзмерение.Ключ];
			СтрокаУсловияПоИзмерениям = СтрокаУсловияПоИзмерениям + "(";
			
			// Получим текущее имя дополнительной аналитики.
			ТекИмяДопАналитики	      = ?(флУказанаСтруктураДопИмен, ТекСтруктураДопИмен.Получить(номИзм), Неопределено);
			флУказаноИмяДопАналитики  = ?(Не ТекИмяДопАналитики = Неопределено, Истина, Ложь);
				
			Если ТекущаяНастройка = Неопределено Тогда
				
				// Измерение не используется - должно быть Неопределено.
				СтрокаУсловияПоИзмерениям = СтрокаУсловияПоИзмерениям 
											+ " НЕ "
										   	+ Документ
										   	+ "."
										   	+ ИмяРеквизитаДок
										   	+ " = НЕОПРЕДЕЛЕНО ";
										   
				// Если указано имя дополнительной аналитики, тогда.
				Если флУказаноИмяДопАналитики Тогда
					
					СтрокаУсловияПоДопИменам = СтрокаУсловияПоДопИменам
												+ " НЕ "
											   	+ Документ
											   	+ "."
											  	+ ТекИмяДопАналитики
											   	+ " = НЕОПРЕДЕЛЕНО "; 
					
				КонецЕсли;
				
			Иначе
				
				МассивТипов = ТекущаяНастройка.Аналитика.ТипЗначения.Типы();
				
				ном = 1;
				Для каждого ТекущийТип Из МассивТипов Цикл
				    // Добавляем условия для каждого типа
					МассивДляОписания = Новый Массив;
					МассивДляОписания.Добавить(ТекущийТип);
					
					Описание = Новый ОписаниеТипов(МассивДляОписания);
					
					МетаданныеОбъекта = Описание.ПривестиЗначение().Метаданные();
					ИмяОбъекта        = МетаданныеОбъекта.Имя;
					ВидОбъекта        = бит_ПраваДоступа.ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);	
					ИмяОбъектаПолное  = бит_ПраваДоступа.ПолучитьПолноеИмяОбъекта(ИмяОбъекта, ВидОбъекта);
					
					СтрокаУсловияПоИзмерениям = СтрокаУсловияПоИзмерениям
												 + ?(ном > 1, ТекстИ, "") 
												+ " НЕ "
												+ Документ
												+ "."
												+ ИмяРеквизитаДок
												+ " ССЫЛКА "
												+ ИмяОбъектаПолное;
												
					// Если указано имя дополнительной аналитики, тогда.
					Если флУказаноИмяДопАналитики Тогда
						
						СтрокаУсловияПоДопИменам = СтрокаУсловияПоДопИменам
													+ ?(ном > 1, ТекстИ, "") 
												  	+ " НЕ "
												   	+ Документ
												    + "."
												    + ТекИмяДопАналитики
												   	+ " ССЫЛКА "
												   	+ ИмяОбъектаПолное;
						
					КонецЕсли;
					
					ном = ном + 1;
					
				КонецЦикла;// По типам измерения 
				
				Если ном > 2 Тогда
					// Для измерений составного типа может быть неопределено.
					
					СтрокаУсловияПоИзмерениям = СтрокаУсловияПоИзмерениям 
					                            + " И НЕ "
												+ Документ
												+ "."
												+ ИмяРеквизитаДок
												+ " = НЕОПРЕДЕЛЕНО ";
												
					// Если указано имя дополнительной аналитики, тогда.
					Если флУказаноИмяДопАналитики Тогда
						
						СтрокаУсловияПоДопИменам = СтрокаУсловияПоДопИменам 
												   + " И НЕ "
												   + Документ
												   + "."
												   + ТекИмяДопАналитики
												   + " = НЕОПРЕДЕЛЕНО ";
						
					КонецЕсли;
												
				КонецЕсли; 
				
			КонецЕсли; // Есть настройка измерения
			
			// Изменение кода. Начало. 26.09.2012{{
			// СтрокаУсловияПоИзмерениям = СтрокаУсловияПоИзмерениям + ")" + ?(номИзм < мИзмеренияДоп.Количество(), ТекстИЛИ, "");
			// СтрокаУсловияПоДопИменам  = СтрокаУсловияПоДопИменам 
			// 							+ ?(ПустаяСтрока(СтрокаУсловияПоДопИменам)
			// 							   , ""
			// 							   , ?(номИзм < мИзмеренияДоп.Количество(), ТекстИЛИ, ""));
			СтрокаУсловияПоИзмерениям = СтрокаУсловияПоИзмерениям + ")";
			// Изменение кода. Конец. 26.09.2012}}
			
			номИзм = номИзм + 1;
			
		КонецЦикла; // По измерениям
		
		Если МестоПоиска = "Реквизиты" Тогда
			ТекстЗапросаДоп = СформироватьОсновнойТекстЗапроса(Документ, , ПомещатьВоВременную, ЭтоДокумент);
			ПомещатьВоВременную = Ложь;
		Иначе
			ТекстЗапросаДоп = СформироватьОсновнойТекстЗапроса(Документ, МестоПоиска, ПомещатьВоВременную, ЭтоДокумент);
			ПомещатьВоВременную = Ложь;
		КонецЕсли;
		
		// Если для текущего объекта надо включать условие по измерениям, тогда.
		Если мМассивИменОбъектовНеВклУсловияПоИзмерениям.Найти(Документ) = Неопределено Тогда
			ТекстУсловия = " И (" + СтрокаУсловияПоИзмерениям 
						   + ?(ПустаяСтрока(СтрокаУсловияПоДопИменам), "", " ИЛИ " + СтрокаУсловияПоДопИменам) + ")";
		Иначе
			ТекстУсловия = ?(ПустаяСтрока(СтрокаУсловияПоДопИменам), "", СтрокаУсловияПоДопИменам);
			ТекстУсловия = ?(ПустаяСтрока(ТекстУсловия), "", " И (" + ТекстУсловия + ")");
		КонецЕсли;
		
		ТекстЗапросаОсн = ТекстЗапросаОсн+
							?(ПустаяСтрока(ТекстЗапросаОсн),"","
															|ОБЪЕДИНИТЬ ВСЕ ")
							+ТекстЗапросаДоп + ТекстУсловия;
							
	КонецЦикла;// По массиву документов
		
	ТекстЗапроса = ТекстЗапроса 
					+ ?(ПустаяСтрока(ТекстЗапроса), "", "
													|ОБЪЕДИНИТЬ ВСЕ ")
					+ ТекстЗапросаОсн;
	
КонецПроцедуры // ДополнитьТекстЗапроса()

// Функция формирует соответствие имен дополнительных реквизитов аналитик.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СоответствиеДопИменАналитик - Соответствие.
// 
Функция СформироватьСоответствиеДопИменАналитик()

	СоответствиеДопИменАналитик = Новый Соответствие;
	
	// Формируем имена реквизитов справочника "Настройки форм ввода бюджета".
	ИменаРеквизитов = Новый Соответствие;
	ИменаРеквизитов.Вставить(1, "Значение_Аналитика_1");
	ИменаРеквизитов.Вставить(2, "Значение_Аналитика_2");
	ИменаРеквизитов.Вставить(3, "Значение_Аналитика_3");
	ИменаРеквизитов.Вставить(4, "Значение_Аналитика_4");

	СоответствиеМест = Новый Соответствие;
	СоответствиеМест.Вставить("Реквизиты", ИменаРеквизитов);
	
	СоответствиеДопИменАналитик.Вставить("бит_НастройкиФормВводаБюджета", СоответствиеМест);
	
	// Формируем имена реквизитов ТЧ "БДДС" документа "Корректировка бюджета".
	ИменаРеквизитовТЧ = Новый Соответствие;
	ИменаРеквизитовТЧ.Вставить(1, "Аналитика_1_Старый");
	ИменаРеквизитовТЧ.Вставить(2, "Аналитика_2_Старый");
	ИменаРеквизитовТЧ.Вставить(3, "Аналитика_3_Старый");
	ИменаРеквизитовТЧ.Вставить(4, "Аналитика_4_Старый");
	ИменаРеквизитовТЧ.Вставить(5, "Аналитика_5_Старый");
	ИменаРеквизитовТЧ.Вставить(6, "Аналитика_6_Старый");
	ИменаРеквизитовТЧ.Вставить(7, "Аналитика_7_Старый");

	СоответствиеМест = Новый Соответствие;
	СоответствиеМест.Вставить("БДДС", ИменаРеквизитовТЧ);
	
	СоответствиеДопИменАналитик.Вставить("бит_КорректировкаБюджета", СоответствиеМест);
	
	// Формируем имена реквизитов ТЧ "ЗависимыеОбороты" документа "Установка зависимых оборотов".
	ИменаРеквизитовТЧ = Новый Соответствие;
	ИменаРеквизитовТЧ.Вставить(1, "Аналитика_1_Зависимый");
	ИменаРеквизитовТЧ.Вставить(2, "Аналитика_2_Зависимый");
	ИменаРеквизитовТЧ.Вставить(3, "Аналитика_3_Зависимый");
	ИменаРеквизитовТЧ.Вставить(4, "Аналитика_4_Зависимый");
	ИменаРеквизитовТЧ.Вставить(5, "Аналитика_5_Зависимый");
	ИменаРеквизитовТЧ.Вставить(6, "Аналитика_6_Зависимый");
	ИменаРеквизитовТЧ.Вставить(7, "Аналитика_7_Зависимый");

	СоответствиеМест = Новый Соответствие;
	СоответствиеМест.Вставить("ЗависимыеОбороты", ИменаРеквизитовТЧ);
	
	СоответствиеДопИменАналитик.Вставить("бит_УстановкаЗависимыхОборотов", СоответствиеМест);
	
	Возврат СоответствиеДопИменАналитик;
	
КонецФункции // СформироватьСоответствиеДопИменАналитик()

// Процедура выполняет модификацию типа аналитики шапки.
// 
// Параметры:
//  Объект 			   	   - Объект.
//  ОбъектСсылка		   - ОбъектСсылка.
//  ИмяРеквизита 		   - Строка.
//  МетаОбъекта  		   - МетаданныеОбъекта.
//  НастройкаИзмерения 	   - Структура.
//  ПроизведенаМодификация - Булево. Возвращаемый.
// 
Процедура ВыполнитьМодификациюАналитикиШапки(Объект
											, ОбъектСсылка
									  		, ИмяРеквизита
											, МетаОбъекта
											, НастройкаИзмерения
											, ПроизведенаМодификация)

	ЕстьРеквизитДокумента = бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизита, МетаОбъекта);
						
	Если ЕстьРеквизитДокумента Тогда
		
		Если НастройкаИзмерения = Неопределено
			И НЕ ОбъектСсылка[ИмяРеквизита] = Неопределено Тогда 
			
			Объект[ИмяРеквизита]   = Неопределено;
			ПроизведенаМодификация = Истина;
			
		ИначеЕсли НЕ НастройкаИзмерения = Неопределено
			И НЕ ТипЗнч(ОбъектСсылка[ИмяРеквизита]) = ТипЗнч(НастройкаИзмерения.ЗначениеПоУмолчанию) Тогда
			
			Объект[ИмяРеквизита]   = НастройкаИзмерения.ЗначениеПоУмолчанию;
			ПроизведенаМодификация = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВыполнитьМодификациюАналитикиШапки() 

// Процедура выполняет модификацию типа аналитики ТЧ.
// 
// Параметры:
//  Объект 			   	   - Объект.
//  ИмяРеквизита 		   - Строка.
//  МетаОбъекта  		   - МетаданныеОбъекта.
//  ИмяТЧ				   - Строка.
//  НастройкаИзмерения 	   - Структура.
//  ПроизведенаМодификация - Булево. Возвращаемый.
// 
Процедура ВыполнитьМодификациюАналитикиТЧ(Объект
										 , ИмяРеквизита
										 , МетаОбъекта
										 , ИмяТЧ
										 , НастройкаИзмерения
										 , ПроизведенаМодификация)

	ЕстьРеквизитТабЧасти = бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(ИмяРеквизита, МетаОбъекта, ИмяТЧ);
						
	Если ЕстьРеквизитТабЧасти Тогда
		
		Таблица = Объект[ИмяТЧ];
		
		Для Каждого ТекСтрока Из Таблица Цикл
			
			Если НастройкаИзмерения = Неопределено
				И НЕ ТекСтрока[ИмяРеквизита] = Неопределено Тогда
				
				ТекСтрока[ИмяРеквизита] = Неопределено;
				ПроизведенаМодификация  = Истина;
				
			ИначеЕсли НЕ НастройкаИзмерения = Неопределено
				И НЕ ТипЗнч(ТекСтрока[ИмяРеквизита]) = ТипЗнч(НастройкаИзмерения.ЗначениеПоУмолчанию) Тогда
				
				ТекСтрока[ИмяРеквизита] = НастройкаИзмерения.ЗначениеПоУмолчанию;
				ПроизведенаМодификация  = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьМодификациюАналитикиТЧ() 

#КонецОбласти

#Область Инициализация

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

// Сформируем соответствие доп. имен аналитик.
мСоответствиеДопИменАналитик = СформироватьСоответствиеДопИменАналитик();

// Сформируем массив имен объектов не включающих в текст запроса выборки условия по измерениям.
мМассивИменОбъектовНеВклУсловияПоИзмерениям = Новый Массив;
мМассивИменОбъектовНеВклУсловияПоИзмерениям.Добавить("бит_НастройкиФормВводаБюджета");

мСоотИмяОбъектаПрефиксИмениДопАналитики = Новый Соответствие;


#КонецОбласти

#КонецЕсли
