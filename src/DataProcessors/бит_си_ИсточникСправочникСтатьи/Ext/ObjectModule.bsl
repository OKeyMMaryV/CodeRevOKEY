#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБЯЗАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбязательныеПеременныеОбработкиИсточникаСправочнойИнформации



Перем ФормаСправочнойИнформации Экспорт;	// Ссылка на форму обработки справочной информации
Перем ИмяЗакладкиИсточника Экспорт;			// Имя закладки источника справочной информации
Перем ИсточникСИ Экспорт;					// Ссылка на элемент справочника бит_си_Источники
Перем НастройкиИсточника Экспорт;			// Настройки источника справочной информации


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПЕРЕМЕННЫЕ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныеПеременныеОбработкиИсточникаСправочнойИнформации



Перем ТекущаяСсылка; // Структура. Текущая открытая ссылка на закладке источника СИ
Перем СтатьяДляРедактирования; // Статья справки для открытия по кнопке "РедактироватьСтатью"
Перем ШаблонСтраницы; // Текст шаблона страницы вывода справочной информации
Перем БИТИнфо; // Текст дополнительной информации, выводимый внизу страницы
Перем СтатьиИМетки; // Хранит структуру соответствия статей и меток, а также ссылки на пиктограммы меток
Перем БиблиотекиJS; // Хранит структуру соответствия имен библиотек (нужны для формирования HTML-представления)
					// и путей к файлам библиотек
						 
// Перем <ИмяПеременной> [Экспорт];


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ОПЦИЯМИ ЗАКЛАДКИ ИСТОЧНИКА СИ.

#Область ПроцедурыИФункцииУправленияОпциямиЗакладкиИсточникаСи



// Признак, что обработка является источником справочной информации
// доступной в режиме обычного приложения.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Обработка является источником справочной информации.     
// 
Функция ЭтоОбработкаИсточникаСИ() Экспорт
	Возврат Истина;
КонецФункции // ЭтоОбработкаИсточникаСИ()

// Признак, что обработка является источником справочной информации
// доступной в режиме управляемого приложения.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Обработка является источником справочной информации.     
// 
Функция ЭтоОбработкаИсточникаСИУпр() Экспорт
	Возврат Истина;
КонецФункции // ЭтоОбработкаИсточникаСИУпр()

// Признак, что обработка поддерживает возможности поиска.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Обработка предоставляет возможности поиска.
// 
Функция ВозможностьПоиска() Экспорт
	Возврат Истина;
КонецФункции // ВозможностьПоиска()

// Возможность выбора нескольких разделов справочной информации на закладке поиска.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Возможен выбор нескольких разделов;
// 													 Ложь - возможен выбор только одного раздела;
// 
Функция МножественныйВыборРазделовПоиска() Экспорт
	Возврат Истина;
КонецФункции // МножественныйВыборРазделовПоиска()

// Наличие настроек источника справочной информации.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Есть настройки; Ложь - настройки отсутствуют;           
// 
Функция ЕстьНастройки() Экспорт
	Возврат Ложь;
КонецФункции // ЕстьНастройки()

// Наличие дополнительных контекстно зависимых настроек (например, для текущего пользователя).
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - Есть дополнительные настройки; Ложь - дополнительные    
// 	                   	  	                       	 настройки отсутствуют;                                           
// 
Функция ЕстьНастройкиПоОбъектам() Экспорт
	Возврат Ложь;
КонецФункции // ЕстьНастройкиПоОбъектам()

// Признак необходимости обновления содержимого закладки источника при смене положения окна.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - обновлять содержимое; Ложь - не обновлять;              
// 
Функция ОбновлятьПриСменеПоложенияОкна() Экспорт
	Возврат Истина;
КонецФункции // ОбновлятьПриСменеПоложенияОкна()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

// Сравнивает 2 ссылки. Структура ссылки определяется разработчиком обработки источника справочной информации.
// 
// Параметры 
// 	Ссылка1            	 -	Структура              	 Ссылка для сравнения                                             
// 	Ссылка2            	 -	Структура              	 Ссылка для сравнения                                             
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - ссылки равны; Ложь - ссылки не равны;                   
// 
Функция СсылкиРавны(Ссылка1,Ссылка2) Экспорт
	Если НЕ Ссылка1.Ссылка = Ссылка2.Ссылка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Ссылка1.ПараметрОткрытия = Ссылка2.ПараметрОткрытия Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции // СсылкиРавны()

// Получает дерево разделов поиска
// 
// Параметры 
// 	СтруктураПараметров	 -	Структура              	 Параметры, необходимые для заполнения дерева разделов.            
// 		Поля 
// 			ИмяЗакладки	 -	Строка              	 Имя закладки источника СИ для которой получаем дерево разделов.
// Возвращаемое значение:
// 	Возврат ...        	 -	ДеревоЗначений         	 Дерево разделов поиска                                           
// 		Поля 
// 			Пометка			 -	Булево             	 Флаг поиска в соответствующем разделе.
// 			Раздел			 -	Строка             	 Отображаемое наименование раздела поиска.
// 			ИмяЗакладки		 -	Строка            	 Имя закладки источника СИ для которой выполняем поиск в данном разделе.
// 			ПараметрыРаздела -	Структура          	 Структура дополнительных параметров поиска.
// 
Функция ПолучитьДеревоРазделов(СтруктураПараметров) Экспорт
	ДеревоРазделов = Новый ДеревоЗначений();
	ДеревоРазделов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	ДеревоРазделов.Колонки.Добавить("КартинкаРаздела", Новый ОписаниеТипов("Картинка"));
	ДеревоРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Строка"));
	ДеревоРазделов.Колонки.Добавить("ИмяЗакладки", Новый ОписаниеТипов("Строка"));
	ДеревоРазделов.Колонки.Добавить("ПараметрыРаздела", Новый ОписаниеТипов("Структура"));
	СтрокаГрупп = ДеревоРазделов.Строки.Добавить();
	СтрокаГрупп.Раздел				= "Группы статей справки";
	СтрокаГрупп.ИмяЗакладки			= СтруктураПараметров.ИмяЗакладки;
	СтрокаГрупп.ПараметрыРаздела	= Новый Структура("Ид, Ссылка", "Группы статей справки", "Группы");
	СтрокаГрупп.Пометка				= Истина;
	Выборка = Справочники.бит_си_Статьи.Выбрать(Справочники.бит_си_Статьи.ПустаяСсылка());
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СтрокаГрупп.Строки.Добавить();
		НоваяСтрока.Раздел				= Выборка.Наименование;
		НоваяСтрока.ИмяЗакладки			= СтруктураПараметров.ИмяЗакладки;
		НоваяСтрока.ПараметрыРаздела	= Новый Структура("Ид, Ссылка", Выборка.Наименование, Выборка.Ссылка);
		НоваяСтрока.Пометка				= Истина;
		ДобавитьВложенныеРазделы(НоваяСтрока);
	КонецЦикла;
	СтрокаМеток = ДеревоРазделов.Строки.Добавить();
	СтрокаМеток.Раздел				= "Метки статей справки";


	#Если Клиент Тогда
	СтрокаМеток.КартинкаРаздела		= БиблиотекаКартинок.бит_си_МеткаСтатьи;
	#КонецЕсли
	СтрокаМеток.ИмяЗакладки			= СтруктураПараметров.ИмяЗакладки;
	СтрокаМеток.ПараметрыРаздела	= Новый Структура("Ид, Ссылка", "Метки статей справки", "Метки");
	СтрокаМеток.Пометка				= Ложь;
	Выборка = Справочники.бит_си_МеткиСтатей.Выбрать(Справочники.бит_си_МеткиСтатей.ПустаяСсылка());
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЭтоГруппа Тогда
			НоваяСтрока = СтрокаМеток.Строки.Добавить();
			НоваяСтрока.Раздел				= Выборка.Наименование;
			#Если Клиент Тогда
			ВремКартинка = Выборка.Пиктограмма.Получить();
			Если ТипЗнч(ВремКартинка) = Тип("ДвоичныеДанные") Тогда
				ВремКартинка = Новый Картинка(ВремКартинка);
			ИначеЕсли НЕ ТипЗнч(ВремКартинка) = Тип("Картинка") ИЛИ ВремКартинка.Вид = ВидКартинки.Пустая Тогда
				ВремКартинка = БиблиотекаКартинок.бит_си_МеткаСтатьи;
			КонецЕсли;
			НоваяСтрока.КартинкаРаздела		= ВремКартинка;
			#КонецЕсли
			НоваяСтрока.ИмяЗакладки			= СтруктураПараметров.ИмяЗакладки;
			НоваяСтрока.ПараметрыРаздела	= Новый Структура("Ид, Ссылка", Выборка.Наименование, Выборка.Ссылка);
			НоваяСтрока.Пометка				= Ложь;
			Продолжить;
		КонецЕсли;
		СтрокаГруппы = СтрокаМеток.Строки.Добавить();
		СтрокаГруппы.Раздел				= Выборка.Наименование;
		СтрокаГруппы.ИмяЗакладки		= СтруктураПараметров.ИмяЗакладки;
		СтрокаГруппы.ПараметрыРаздела	= Новый Структура("Ид, Ссылка", Выборка.Наименование, Выборка.Ссылка);
		СтрокаГруппы.Пометка			= Ложь;
		ВыборкаМеток = Справочники.бит_си_МеткиСтатей.Выбрать(Выборка.Ссылка);
		Пока ВыборкаМеток.Следующий() Цикл
			НоваяСтрока = СтрокаГруппы.Строки.Добавить();
			НоваяСтрока.Раздел				= ВыборкаМеток.Наименование;
			#Если Клиент Тогда
			ВремКартинка = ВыборкаМеток.Пиктограмма.Получить();
			Если ТипЗнч(ВремКартинка) = Тип("ДвоичныеДанные") Тогда
				ВремКартинка = Новый Картинка(ВремКартинка);
			ИначеЕсли НЕ ТипЗнч(ВремКартинка) = Тип("Картинка") ИЛИ ВремКартинка.Вид = ВидКартинки.Пустая Тогда
				ВремКартинка = БиблиотекаКартинок.бит_си_МеткаСтатьи;
			КонецЕсли;
			НоваяСтрока.КартинкаРаздела		= ВремКартинка;
			#КонецЕсли
			НоваяСтрока.ИмяЗакладки			= СтруктураПараметров.ИмяЗакладки;
			НоваяСтрока.ПараметрыРаздела	= Новый Структура("Ид, Ссылка", ВыборкаМеток.Наименование, ВыборкаМеток.Ссылка);
			НоваяСтрока.Пометка				= Ложь;
		КонецЦикла;
	КонецЦикла;
	Возврат ДеревоРазделов;
КонецФункции // ПолучитьДеревоРазделов()

// Выполняет переход по переданной ссылке.
// 
// Параметры 
// 	СтруктураСсылки    	 -	Структура              	 Структура ссылки, состав определяется разработчиком.              
// 
Процедура ПерейтиПоСсылке(СтруктураСсылки = Неопределено) Экспорт
	#Если Клиент Тогда
	
	Если СтруктураСсылки.Ссылка = "#Главная" Тогда
		ВремПараметр = СтруктураСсылки.ПараметрОткрытия;
		ЗагрузитьГлавнуюСтраницу(ВремПараметр);
	Иначе
		ТипСсылки = "";
		Попытка
			ВремУИД = Новый УникальныйИдентификатор(СтруктураСсылки.Ссылка);
			СпрСп = Справочники.бит_си_Статьи.ПолучитьСсылку(ВремУИД);
			СпрМетка = Справочники.бит_си_МеткиСтатей.ПолучитьСсылку(ВремУИД);
		Исключение
			СпрСп = Справочники.бит_си_Статьи.НайтиПоНаименованию(СтруктураСсылки.Ссылка);
		КонецПопытки;
		Если Найти(СокрЛП(НРег(СпрСп)), "<объект не найден>") = 0 Тогда
			ТипСсылки = ?(СпрСп.ЭтоГруппа, "ГруппаСтатей", "Статья");
		ИначеЕсли Найти(СокрЛП(НРег(СпрМетка)), "<объект не найден>") = 0 Тогда
			ТипСсылки = "Метка";
		КонецЕсли;
		
		Если ТипСсылки = "ГруппаСтатей"  Тогда
			МассивОтбора = Новый Массив();
			Выборка = Справочники.бит_си_Статьи.ВыбратьИерархически(СпрСп);
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				МассивОтбора.Добавить(Выборка.Ссылка);
			КонецЦикла;
			ЗагрузитьГлавнуюСтраницу(МассивОтбора);
			СтруктураСсылки = МассивОтбора;
		ИначеЕсли ТипСсылки = "Метка" Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	УстановленныеМеткиСтатей.Статья
			               |ИЗ
			               |	РегистрСведений.бит_си_УстановленныеМеткиСтатей КАК УстановленныеМеткиСтатей
			               |ГДЕ
			               |	УстановленныеМеткиСтатей.Метка ССЫЛКА Справочник.бит_си_МеткиСтатей
			               |	И УстановленныеМеткиСтатей.Метка = &Метка";
			Запрос.УстановитьПараметр("Метка", СпрМетка);
			
			МассивОтбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статья");
			ЗагрузитьГлавнуюСтраницу(МассивОтбора);
			СтруктураСсылки = МассивОтбора;
		ИначеЕсли ТипСсылки = "Статья" Тогда
			СпрСпОб = СпрСп.ПолучитьОбъект();
								  
			ВремТекст = СпрСпОб.ЗагрузитьИзображенияИзБД();
			
			НачалоЗаголовка = Найти(НРег(ВремТекст),"</head");
			ВремТекст = Лев(ВремТекст, НачалоЗаголовка-1)
					  + "<script language=""javascript"" >"+ БиблиотекиJS.jquery +"</script>"
					  + Сред(ВремТекст, НачалоЗаголовка);
					  
			НачалоДок = Найти(НРег(ВремТекст),"<body") + Найти(Сред(НРег(ВремТекст), Найти(НРег(ВремТекст),"<body")), ">") - 1;
			
			ТекстМетки = ПолучитьHTMLТекстМеток(СтатьиИМетки, СпрСп, "заголовок");
			
			ТекРодитель = СпрСп.Родитель;
			СтрокаРодитель = "";
			Пока НЕ ТекРодитель.Пустая() Цикл
				СтрокаРодитель = "<a href=""ВнСсылка=" + СокрЛП(ТекРодитель.УникальныйИдентификатор()) +
								 """>" + СокрЛП(ТекРодитель.Наименование)+"</a>" +
								 ?(СтрокаРодитель = "",""," / ") + СтрокаРодитель;
				ТекРодитель = ТекРодитель.Родитель;
			КонецЦикла;
			
			ВремТекст = Лев(ВремТекст, НачалоДок) +
						?(СтрокаРодитель = "", "", "<div style=""font-size:8pt;"">" + СтрокаРодитель + "</div><br/>") +
						ТекстМетки +
						Сред(ВремТекст,НачалоДок + 1);
			КонецДок = Найти(НРег(ВремТекст),"</body");
			Если КонецДок = 0 Тогда
				ВремТекст = ВремТекст + "
									 |" + ПолучитьТекстСвязанныхОбъектов(СпрСп) + ПолучитьТекстДопИнфо(СпрСп) + "
									 |" + БИТИнфо;
			Иначе
				ВремТекст = Лев(ВремТекст,КонецДок-1) + "
									 |" + ПолучитьТекстСвязанныхОбъектов(СпрСп) + ПолучитьТекстДопИнфо(СпрСп) + "
									 |" + БИТИнфо + "
									 |" + Сред(ВремТекст,КонецДок);
			КонецЕсли;
			ВремЭлементы = ФормаСправочнойИнформации.ЭлементыФормы;
			ВремЭлементы[ИмяЗакладкиИсточника+"_ПолеHTML"].УстановитьТекст(ВремТекст);
			ВремЭлементы[ИмяЗакладкиИсточника+"_ПанельУправления"].Кнопки.РедактироватьСтатью.Доступность = Истина;
			ТекущаяСсылка = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия",
											СпрСп.НазваниеСтатьи,СтруктураСсылки.Ссылка,"");
			СтатьяДляРедактирования = СпрСп;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПерейтиПоСсылке()

// Выполняет полнотекстовый поиск для текущего источника справочной информации.
// 
// Параметры 
// 	СтрокаПоиска       	 -	Строка                 	 Текст поискового запроса.                                         
// 	СписокРазделов     	 -	Неопределено,          	 Фильтр разделов поиска.                                           
// 	                   	  	СтрокаДереваЗначений,  	                                                                  
// 	                   	  	ДеревоЗначений.         	                                                                  
// 
Процедура ВыполнитьПоиск(СтрокаПоиска, СписокРазделов = Неопределено) Экспорт
	#Если Клиент Тогда
	Если НЕ (ТипЗнч(СписокРазделов) = Тип("СтрокаДереваЗначений")
	 ИЛИ ТипЗнч(СписокРазделов) = Тип("ДеревоЗначений")) Тогда
		Разделы = Новый ДеревоЗначений();
	КонецЕсли;
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
		СтрОшибки = "В текущей информационной базе отключена возможность полнотекстового поиска." + Символы.ПС;
		ПоказатьПредупреждение(Неопределено, СтрОшибки + "Для включения поиска обратитесь к администратору.");
		Возврат;
	КонецЕсли;
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 2000);
	СписокПоиска.ПолучатьОписание = Ложь;
	
	МассивМД = Новый Массив();
	МассивМД.Добавить(Метаданные.Справочники.бит_си_Статьи);
	
	СписокПоиска.ОбластьПоиска = МассивМД;
	СписокПоиска.СтрокаПоиска = СтрокаПоиска;
	СписокПоиска.РазмерПорции = 2000;
	СписокПоиска.ПерваяЧасть();
	Колво = СписокПоиска.ПолноеКоличество();
	Если Колво = 0 Тогда
		ТекстРезультата = "По запросу """ + СтрокаПоиска + """ результаты не найдены.";
	КонецЕсли;
	
	Разделы = СписокРазделов.Строки.Найти("Группы статей справки", "Раздел", Ложь);
	Разделы = ?(Разделы = Неопределено, Новый ДеревоЗначений(), Разделы);
	
	СписокМеток = Новый Массив();
	ВремСписокМеток = СписокРазделов.Строки.Найти("Метки статей справки", "Раздел", Ложь);
	ВремСписокМеток = ?(ВремСписокМеток = Неопределено, Новый ДеревоЗначений(), ВремСписокМеток);
	Для Каждого ТекМетка Из ВремСписокМеток.Строки Цикл
		Если ТекМетка.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ТекМетка.ПараметрыРаздела.Ссылка.ЭтоГруппа Тогда
			СписокМеток.Добавить(ТекМетка.ПараметрыРаздела.Ссылка);
			Продолжить;
		КонецЕсли;
		Для Каждого ТекМеткаВГруппе Из ТекМетка.Строки Цикл
			Если ТекМеткаВГруппе.Пометка = Ложь Тогда
				Продолжить;
			КонецЕсли;
			СписокМеток.Добавить(ТекМеткаВГруппе.ПараметрыРаздела.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	ОтобранныеСтатьи = ПолучитьСтатьиПоОтборам();
	
	СписокСтатей = Новый ТаблицаЗначений();
	СписокСтатей.Колонки.Добавить("Статья", Новый ОписаниеТипов("СправочникСсылка.бит_си_Статьи"));
	СписокСтатей.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для инд = 0 По Колво-1 Цикл
		ТекЗначение = СписокПоиска.Получить(инд);
		Если НЕ ТипЗнч(ТекЗначение.Значение) = Тип("СправочникСсылка.бит_си_Статьи") Тогда
			Продолжить;
		КонецЕсли;	 
		НайденнаяСтатья = СписокСтатей.Найти(ТекЗначение.Значение, "Статья");
		Если НЕ НайденнаяСтатья = Неопределено Тогда
			НайденнаяСтатья.Количество = НайденнаяСтатья.Количество + 1;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОтобранныеСтатьи = Неопределено Тогда
			Если ОтобранныеСтатьи.Найти(ТекЗначение.Значение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НеВходитВОтбор = НЕ (Разделы.Строки.Количество() = 0);
		Для Каждого ТекРаздел Из Разделы.Строки Цикл
			Если НЕ ТекРаздел.Пометка Тогда
				Продолжить;
			КонецЕсли;
			Если ТекЗначение.Значение.ПринадлежитЭлементу(ТекРаздел.ПараметрыРаздела.Ссылка) Тогда
				НеВходитВОтбор = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НеВходитВОтбор Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтатья = СписокСтатей.Добавить();
		НайденнаяСтатья.Статья = ТекЗначение.Значение;
		НайденнаяСтатья.Количество = 1;
	КонецЦикла;
	
	ЗапросПоМеткам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                              |	СписокСтатей.Статья,
	                              |	СписокСтатей.Количество
	                              |ПОМЕСТИТЬ СписокСтатей
	                              |ИЗ
	                              |	&СписокСтатей КАК СписокСтатей
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                              |	СписокСтатей.Статья,
	                              |	СписокСтатей.Количество
	                              |ИЗ
	                              |	СписокСтатей КАК СписокСтатей
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_си_УстановленныеМеткиСтатей КАК УстановленныеМеткиСтатей
	                              |		ПО СписокСтатей.Статья = УстановленныеМеткиСтатей.Статья
	                              |			И (УстановленныеМеткиСтатей.Метка ССЫЛКА Справочник.бит_си_МеткиСтатей)
	                              |ГДЕ
	                              |	(УстановленныеМеткиСтатей.Метка В (&Метки)
	                              |			ИЛИ &БезМеток)");
	ЗапросПоМеткам.УстановитьПараметр("СписокСтатей", СписокСтатей);
	ЗапросПоМеткам.УстановитьПараметр("Метки", СписокМеток);
	ЗапросПоМеткам.УстановитьПараметр("БезМеток", СписокМеток.Количество() = 0);
	СписокСтатей = ЗапросПоМеткам.Выполнить().Выгрузить();
	Колво = СписокСтатей.Количество();
	Если Колво = 0 Тогда
		ТекстРезультата = "По запросу """ + СтрокаПоиска + """ результаты не найдены.";
	Иначе
		МассивСловЗапроса = бит_си_ОбщегоНазначения.СтрокаСРазделителямиВМассив(СтрокаПоиска, " ");
		ТекстРезультата = "<TABLE width=""100%"">";
		инд=0;
		Для Каждого НайденнаяСтатья Из СписокСтатей Цикл
			инд=инд+1;
			
			ТекстМетки = ПолучитьHTMLТекстМеток(СтатьиИМетки, НайденнаяСтатья.Статья, "поиск");
			
			ТекстРезультата = ТекстРезультата + "<TR><td style=""border-bottom: gray thin solid; padding-bottom: 10px;
												|padding-top: 10px;font-size:10pt"">
	                    						|"+СокрЛП(инд)+". <strong><a href=""ВнСсылка=" +
												СокрЛП(НайденнаяСтатья.Статья.УникальныйИдентификатор()) + """>" +
												СокрЛП(НайденнаяСтатья.Статья.НазваниеСтатьи)+"</a></strong>
	                    						|<div style=""text-indent:20pt;font-size:8pt;""><em>" +
												ПолучитьАнонсСтатьи(МассивСловЗапроса, НайденнаяСтатья.Статья.ТекстHTML)+"</em></div><br/>" + ТекстМетки;
												
			ТекРодитель = НайденнаяСтатья.Статья.Родитель;
			СтрокаРодитель = "";
			Пока НЕ ТекРодитель.Пустая() Цикл
				СтрокаРодитель = "<a href=""ВнСсылка=" + СокрЛП(ТекРодитель.УникальныйИдентификатор()) +
								 """>" + СокрЛП(ТекРодитель.Наименование)+"</a>" +
								 ?(СтрокаРодитель = "",""," / ") + СтрокаРодитель;
				ТекРодитель = ТекРодитель.Родитель;
			КонецЦикла;
			
			Если НЕ СтрокаРодитель = "" Тогда
				ТекстРезультата = ТекстРезультата + "<div style=""text-indent:20pt;font-size:8pt;"">" + СтрокаРодитель + "</div>";
			КонецЕсли;
			
			ТекстРезультата = ТекстРезультата + "</td></TR>";
		КонецЦикла;
		ТекстРезультата = ТекстРезультата + "</TABLE>";
	КонецЕсли;
	
	ТекстРезультата = СтрЗаменить(ШаблонСтраницы, "##Content##","
												  |" + ТекстРезультата + "
												  |" + БИТИнфо);
												  
	ВремЭлементы = ФормаСправочнойИнформации.ЭлементыФормы;
	ВремЭлементы[ИмяЗакладкиИсточника+"_ПолеРезультатПоиска"].УстановитьТекст(ТекстРезультата);
	ВремЭлементы.ПанельРезультатов.Страницы[ИмяЗакладкиИсточника].Заголовок =
		ИсточникСИ.Заголовок + " (" + СокрЛП(Колво) + ")";
	#КонецЕсли
	
КонецПроцедуры // ВыполнитьПоиск()

// Получает имя формы настройки в управляемом режиме.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 Имя формы настройки.
// 
Функция ПолучитьИмяФормыНастройкиОбработки() Экспорт
	Возврат "Обработка.бит_си_ИсточникСправочникСтатьи.Форма.ФормаНастройкиУправляемая";
КонецФункции // СсылкиРавны()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ РАЗМЕРОМ ШРИФТА.

#Область ПроцедурыИФункцииУправленияРазмеромШрифта



// Возвращает размер шрифта, относительно которого происходят изменения
// так же является размером шрифта по умолчанию.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Число                  	 Размер шрифта.
// 
Функция БазовыйРазмерШрифта() Экспорт
	Возврат 0;
КонецФункции // ОбновлятьПриСменеПоложенияОкна()

// Возвращает соответствие единиц измерения размеров шрифта и шага изменения размера.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Соответствие           	 Соответствие единиц измерения и шага размера шрифта.              
// 
Функция ПолучитьСтруктуруРазмеровИЕдиниц() Экспорт
	РазмерыИЕдиницы = Новый Соответствие();
	РазмерыИЕдиницы.Вставить("ПоУмолчанию"	, 2);
	РазмерыИЕдиницы.Вставить("pt"			, 2);
	РазмерыИЕдиницы.Вставить("FONT"			, 1);
	Возврат РазмерыИЕдиницы;
КонецФункции // ПолучитьСтруктуруРазмеровИЕдиниц()

// Возвращает базовую доступность кнопок управления размером шрифта,
// а также верхнее и нижнее ограничение на размер шрифта.
// 
// Параметры 
// 	ОграничениеМакс    	 -	Число                  	 Верхнее ограничение размера шрифта.                               
// 	ОграничениеМин     	 -	Число                  	 Нижнее ограничение размера шрифта.                                
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - кнопки размера доступны; Ложь - не доступны.             
// 
Функция ДоступностьКнопокРазмерШрифта(ОграничениеМакс, ОграничениеМин) Экспорт
	ОграничениеМакс = 3;
	ОграничениеМин = -2;
	Возврат Истина;
КонецФункции // ДоступностьКнопокРазмерШрифта()

// Обработчик изменения размера шрифта в форме справочной информации
// применяется если необходимо дополнить или заменить стандартную обработку.
// 
// Параметры 
// 	РазмерШрифта       	 -	Число                  	 Размер шрифта после изменения.                                    
// 	Изменение          	 -	Число                  	 Направление изменения: 1 - увеличить; 0 - не изменять; -1 -      
// 	                   	  	                       	 уменьшить.                                                       
// 	Открытие           	 -	Булево                 	 Признак открытия закладки: Истина - устанавливаем размер в момент
// 	                   	  	                       	 открытия закладки; Ложь - просто изменяем размер.                
// 	ПродолжитьОбработку	 -	Булево                 	 Признак продолжения обработки стандартным обработчиком формы     
// 	                   	  	                       	 справочной информации: Истина - продолжить обработку; Ложь - не  
// 	                   	  	                       	 продолжать.                                                      
// 
Процедура ИзменитьРазмерШрифта(РазмерШрифта, Изменение, Открытие, ПродолжитьОбработку=Истина) Экспорт
	ПродолжитьОбработку = Истина;
КонецПроцедуры // ИзменитьРазмерШрифта()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ ОБРАБОТКИ СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийФормыОбработкиСправочнойИнформации

// Вызывается при регистрации источника с справочнике источников справочной информации.
// 
// Параметры 
// 	ИсточникСИ         	 -	СправочникСсылка.бит_си	 Источник справочной информации, связанный с закладкой            
// 	                   	  	_Источники.             	                                                                  
// 
Процедура ОбработчикСобытияРегистрацияИсточника(ИсточникСИ) Экспорт


	#Если Клиент Тогда
		
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияРегистрацияИсточника()

// Вызывается при открытии формы справочной информации и создании закладки текущего источника.
// 
// Параметры 
// 	ПараметрОткрытия   	 -	Произвольный           	 Дополнительный параметр, который может быть обработан в          
// 	                   	  	                       	 данной процедуре.                                                  
// 
Процедура ОбработчикСобытияПриОткрытииЗакладки(ПараметрОткрытия = Неопределено) Экспорт
	#Если Клиент Тогда
	БиблиотекиJS = Новый Структура("jquery", "<!--
											 |" + ПолучитьМакет("Скрипты").ПолучитьТекст() + "// -->");
	ШаблонСтраницы = СтрЗаменить(ШаблонСтраницы, "##Libs##", "<script language=""javascript"">"+ БиблиотекиJS.jquery +"</script>");
	СтатьиИМетки = ПолучитьСтатьиИМетки();
	Если ТипЗнч(ПараметрОткрытия) = Тип("СправочникСсылка.бит_си_Статьи")
	   И НЕ ПараметрОткрытия.ЭтоГруппа Тогда
		ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия",
										ПараметрОткрытия.НазваниеСтатьи, ПараметрОткрытия);
	Иначе
		ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия",
										"Стартовая страница","#Главная", ПараметрОткрытия);
	КонецЕсли;
	ПерейтиПоСсылке(ВремСтруктура);
	#КонецЕсли
	
КонецПроцедуры // ОбработчикСобытияПриОткрытииЗакладки()

// Вызывается из обработчика события "ОбработкаВыбора" формы справочной информации
// в случае если событие вызвано формой сохранения настроек.
// 
// Параметры 
// 	ОбновитьТекущуюИнфо	 -	Булево                 	 Истина - Обновить информацию на закладке источника; Ложь - не    
// 	рмацию             	  	                       	 обновлять.                                                        
// 
Процедура ОбработчикСобытияПриИзмененииНастроекИсточника(ОбновитьТекущуюИнформацию = Истина) Экспорт
	// ОбновитьТекущуюИнформацию = Истина;
КонецПроцедуры

// Вызывается при изменении видимости закладки источника в форме справочной информации.
// 
Процедура ОбработчикСобытияПриИзмененииВидимостиЗакладки() Экспорт
	#Если Клиент Тогда
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияПриИзмененииВидимостиЗакладки()

// Вызывается при переходе на закладку текущего источника.
// 
Процедура ОбработчикСобытияПриАктивизацииСтраницы() Экспорт
	#Если Клиент Тогда
	ДоступностьКнопокКоманднойПанели();
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияПриАктивизацииСтраницы()

// Вызывается из обработчика события "ОбработкаВыбора" формы справочной информации.
// 
// Параметры 
// 	ОбновитьТекущуюИнфо	 -	Булево                 	 Истина - Обновить информацию на закладке источника; Ложь - не    
// 	рмацию             	  	                       	 обновлять.                                                        
// 	ЗначениеВыбора     	 -	Произвольный           	 Выбранное значение; Значение параметра "ЗначениеВыбора"          
// 	                   	  	                       	 обработчика события "ОбработкаВыбора" формы справочной информации.
// 	Источник           	 -	Произвольный           	 Источник события; Значение параметра "Источник" обработчика      
// 	                   	  	                       	 события "ОбработкаВыбора" формы справочной информации.            
// 
Процедура ОбработчикСобытияОбработкаВыбора(ОбновитьТекущуюИнформацию, ЗначениеВыбора, Источник) Экспорт
	#Если Клиент Тогда
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.бит_си_Статьи") Тогда
		ОбновитьТекущуюИнформацию = Истина;
	КонецЕсли;		
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияОбработкаВыбора()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ HTML-ДОКУМЕНТА ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийПоляHtmlДокументаИсточникаСправочнойИнформации

// Вызывается из обработчика события "ДокументСформирован" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле HTML-документа закладки источника; Значение параметра       
// 	                   	  	                       	 "Элемент" обработчика события "ДокументСформирован" поля         
// 	                   	  	                       	 HTML-документа закладки источника СИ.                             
// 	СтруктураСсылки    	 -	Структура              	 Структура ссылки.                                                 
// 	ДобавлятьВИсторию  	 -	Булево                 	 Истина - добавить текущую ссылку в историю; Ложь - не добавлять.  
// 
Процедура ОбработчикСобытияДокументСформирован(Элемент, СтруктураСсылки = Неопределено, ДобавлятьВИсторию = Истина) Экспорт


	#Если Клиент Тогда
	ТекстСсылки = Элемент.Документ.documentElement.innerText;
	
	Если Лев(ТекстСсылки, 10) = "Выполнить=" Тогда
		
		Попытка
			Выполнить(Сред(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(ТекстСсылки), 11));
			ПерейтиПоСсылке(СтруктураСсылки);
		Исключение
			Ошибка = ОписаниеОшибки();
			ПоказатьПредупреждение(Неопределено, "При выполении действия произошла ошибка!")
		КонецПопытки;
		
		Возврат;
		
	ИначеЕсли Лев(ТекстСсылки, 9) = "ВнСсылка=" Тогда
		
		Попытка
			ВнСсылка = Сред(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(ТекстСсылки), 10);
			ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия", "", ВнСсылка, "");
			ПерейтиПоСсылке(ВремСтруктура);
		Исключение
			Ошибка = ОписаниеОшибки();
			ПоказатьПредупреждение(Неопределено, "При выполении действия произошла ошибка!");
		КонецПопытки;
		
		Возврат;
		
	ИначеЕсли Лев(ТекстСсылки, 19) = "ОбъектКонфигурации=" Тогда
			ФормаДляОткрытия = Неопределено;
			ВнСсылка = Сред(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(ТекстСсылки), 20);
			РезСтруктура = РазобратьСсылку(ВнСсылка);
			Если НЕ ПустаяСтрока(РезСтруктура.ИмяМенеджера) И НЕ ПустаяСтрока(РезСтруктура.ИмяОбъекта) Тогда
				Менеджер = бит_си_ИсточникСправочникСтатьи.ПолучитьМенеджер(РезСтруктура.ИмяМенеджера);
				Если Менеджер <> Неопределено Тогда
					
					Если РезСтруктура.Ссылка = "ФормаСписка" Тогда
						
						ФормаДляОткрытия = Менеджер[РезСтруктура.ИмяОбъекта].ПолучитьФормуСписка();
				   
					ИначеЕсли РезСтруктура.Ссылка = "Форма" Тогда
						
						ФормаДляОткрытия = Менеджер[РезСтруктура.ИмяОбъекта].ПолучитьФорму();
						
					Иначе
						
						ВремИд = Новый УникальныйИдентификатор(РезСтруктура.Ссылка);
						ТекущаяСсылка = Менеджер[РезСтруктура.ИмяОбъекта].ПолучитьСсылку(ВремИд);
						Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
						
							ФормаДляОткрытия = ТекущаяСсылка.ПолучитьФорму();
						
						КонецЕсли; 
					КонецЕсли; 
				
				КонецЕсли; 
			
			КонецЕсли; 
			
		Попытка
			Если ФормаДляОткрытия <> Неопределено Тогда
			
				  ФормаДляОткрытия.Открыть();
			
			КонецЕсли; 
			ПерейтиПоСсылке(СтруктураСсылки);
		Исключение
			Ошибка = ОписаниеОшибки();
			ПоказатьПредупреждение(Неопределено, "При выполении действия произошла ошибка!")
		КонецПопытки;
		
	Иначе
		ДоступностьКнопокКоманднойПанели();
		СтруктураСсылки = ТекущаяСсылка;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияДокументСформирован()

// Вызывается из обработчика события "OnClick" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле HTML-документа закладки источника;                          
// 	                   	  	                       	 Значениепараметра"Элемент" обработчика события                   
// 	                   	  	                       	 "OnClick"поляHTML-документа закладки источника СИ.                
// 	pEvtObj            	 -	COMобъект              	 Источник события; Значение параметра "pEvtObj" обработчика       
// 	                   	  	                       	 события "OnClick" поля HTML-документа закладки источника СИ.      
// 	ПродолжитьОбработку	 -	Булево                 	 Истина - продолжить стандартную обработку; Ложь - не продолжать.  
// 
Процедура ОбработчикСобытияOnClick(Элемент, pEvtObj, ПродолжитьОбработку = Истина) Экспорт
	#Если Клиент Тогда
	СтруктураСсылки = Неопределено;
	Если pEvtObj.returnValue = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		htmlElement = pEvtObj.srcElement;
		Пока НЕ (ВРег(htmlElement.tagName) = "A" ИЛИ ВРег(htmlElement.tagName) = "BODY") Цикл
			htmlElement = htmlElement.parentElement;
		КонецЦикла;
		Если НЕ ВРег(htmlElement.tagName) = "A" Тогда
			htmlElement = Неопределено;
		КонецЕсли;
	Исключение
		htmlElement = Неопределено;
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Если htmlElement = Неопределено Тогда
		pEvtObj.returnValue = Ложь;
		Возврат;
	КонецЕсли;
	
	Позиция = Найти(htmlElement.href, "Выполнить=");
	
	Если Позиция > 0 Тогда
		
		Попытка
			Выполнить(Сред(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href), Позиция + 10));
		Исключение
			ПоказатьПредупреждение(Неопределено, "При выполении действия произошла ошибка!")
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Позиция = Найти(htmlElement.href, "ВнСсылка=");
	
	Если Позиция > 0 Тогда
		
		Попытка
			ВнСсылка = Сред(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href), Позиция + 9);
			ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия","",ВнСсылка, "");
			ПерейтиПоСсылке(ВремСтруктура);
		Исключение
			ПоказатьПредупреждение(Неопределено, "При выполении действия произошла ошибка!");
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	
	// Обрабатываем ссылки на списки, отчеты и обработки, а также ссылочные объекты.
	
	Позиция = Найти(htmlElement.href, "ОбъектКонфигурации=");
	
	Если Позиция > 0 Тогда
			ФормаДляОткрытия = Неопределено;
			ВнСсылка = Сред(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href), Позиция + 19);
			РезСтруктура = РазобратьСсылку(ВнСсылка);
			Если НЕ ПустаяСтрока(РезСтруктура.ИмяМенеджера) И НЕ ПустаяСтрока(РезСтруктура.ИмяОбъекта) Тогда
				Менеджер = бит_си_ИсточникСправочникСтатьи.ПолучитьМенеджер(РезСтруктура.ИмяМенеджера);
				Если Менеджер <> Неопределено Тогда
					
					Если РезСтруктура.Ссылка = "ФормаСписка" Тогда
						
						ФормаДляОткрытия = Менеджер[РезСтруктура.ИмяОбъекта].ПолучитьФормуСписка();
				   
					ИначеЕсли РезСтруктура.Ссылка = "Форма" Тогда
						
						ФормаДляОткрытия = Менеджер[РезСтруктура.ИмяОбъекта].ПолучитьФорму();
						
					Иначе
						
						ВремИд = Новый УникальныйИдентификатор(РезСтруктура.Ссылка);
						ТекущаяСсылка = Менеджер[РезСтруктура.ИмяОбъекта].ПолучитьСсылку(ВремИд);
						Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
						
							ФормаДляОткрытия = ТекущаяСсылка.ПолучитьФорму();
						
						КонецЕсли; 
					КонецЕсли; 
				
				
				КонецЕсли; 
				
			
			КонецЕсли; 
			
		Попытка
			Если ФормаДляОткрытия <> Неопределено Тогда
			
				  ФормаДляОткрытия.Открыть();
			
			КонецЕсли; 
		Исключение
			ПоказатьПредупреждение(Неопределено, "При выполении действия произошла ошибка!")
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если htmlElement.protocol = "http:" Тогда
		
		ЗапуститьПриложение(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href));
		
		pEvtObj.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	
	#КонецЕсли
	
	pEvtObj.returnValue = Истина;
	
КонецПроцедуры // ОбработчикСобытияOnClick()

// Вызывается из обработчика события "OnKeyPress" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле HTML-документа закладки источника; Значение                 
// 	                   	  	                       	 параметра"Элемент" обработчика события "OnKeyPress" поля         
// 	                   	  	                       	 HTML-документа закладки источника СИ.                             
// 	pEvtObj            	 -	COMобъект              	 Источник события; Значение параметра "pEvtObj" обработчика       
// 	                   	  	                       	 события "OnKeyPress" поля HTML-документа закладки источника СИ.   
// 	ПродолжитьОбработку	 -	Булево                 	 Истина - продолжить стандартную обработку; Ложь - не продолжать.  
// 
Процедура ОбработчикСобытияOnKeyPress(Элемент, pEvtObj, ПродолжитьОбработку = Истина) Экспорт
	#Если Клиент Тогда
	Если pEvtObj.returnValue = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияOnKeyPress()

// Вызывается из обработчика события "OnDragStart" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле HTML-документа закладки источника; Значение параметра
// 	                   	  	                       	 "Элемент" обработчика события "OnDragStart" поля
// 	                   	  	                       	 HTML-документа закладки источника СИ.
// 	pEvtObj            	 -	COMобъект              	 Источник события; Значение параметра "pEvtObj"
// 	                   	  	                       	 обработчика события "OnDragStart" поля HTML-документа закладки
// 	                   	  	                       	 источника СИ.                                                     
// 
Процедура ОбработчикСобытияOnDragStart(Элемент, pEvtObj) Экспорт
	#Если Клиент Тогда
	Если НЕ pEvtObj.srcElement = Неопределено И НРег(pEvtObj.srcElement.tagName) = "img" Тогда
		pEvtObj.returnValue = Ложь;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияOnDragStart()

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ РЕЗУЛЬТАТОВ ПОИСКА ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийПоляРезультатовПоискаИсточникаСправочнойИнформации



// Вызывается из обработчика события "ДокументСформирован" поля результатов поиска источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле результатов поиска закладки поиска источника; Значение      
// 	                   	  	                       	 параметра"Элемент" обработчика события "ДокументСформирован" поля
// 	                   	  	                       	 результатов поиска закладки поиска источника.                     
// 
Процедура ОбработчикСобытияДокументСформированРезультатаПоиска(Элемент) Экспорт


	#Если Клиент Тогда
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияДокументСформированРезультатаПоиска()

// Вызывается из обработчика события "OnClick" поля результатов поиска источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеHTMLДокумента      	 Поле результатов поиска источника. 
// 	                   	  	                       	 Значениепараметра "Элемент" обработчика события                   
// 	                   	  	                       	 "OnClick" поля результатов поиска источника СИ.
// 	pEvtObj            	 -	COMобъект              	 Источник события; Значение параметра "pEvtObj" обработчика       
// 	                   	  	                       	 события "OnClick" поля результатов поиска источника СИ.   
// 	ПродолжитьОбработку	 -	Булево                 	 Истина - продолжить стандартную обработку; Ложь - не продолжать.  
// 
Процедура ОбработчикСобытияOnClickРезультатаПоиска(Элемент, pEvtObj, ПродолжитьОбработку = Истина) Экспорт
	#Если Клиент Тогда
	СтруктураСсылки = Неопределено;
	
	Если pEvtObj.returnValue = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	htmlElement = pEvtObj.srcElement;
	
	Пока htmlElement <> Неопределено И ВРег(htmlElement.tagName) <> "A" Цикл
		htmlElement = htmlElement.parentElement;
	КонецЦикла;
	
	Если htmlElement = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = Найти(htmlElement.href, "Выполнить=");
	
	Если Позиция > 0 Тогда
		
		Попытка
			Выполнить(Сред(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href), Позиция + 10));
		Исключение
			ПоказатьПредупреждение(Неопределено, "При выполении действия произошла ошибка!")
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Позиция = Найти(htmlElement.href, "ВнСсылка=");
	
	Если Позиция > 0 Тогда
		
		Попытка
			ВнСсылка = Сред(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href), Позиция + 9);
			ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия","",ВнСсылка, "");
			ПерейтиПоСсылке(ВремСтруктура);
		Исключение
			ПоказатьПредупреждение(Неопределено, "При выполении действия произошла ошибка!");
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	
	 Если htmlElement.protocol = "http:" Тогда
		
		ЗапуститьПриложение(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href));
		
		pEvtObj.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияOnClickРезультатаПоиска()

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КНОПОК ПАНЕЛИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиКнопокПанелиИсточникаСправочнойИнформации



// Управляет доступностью кнопок дополнительной командной панели на закладке источника справочной информации.
// 
Процедура ДоступностьКнопокКоманднойПанели()


	#Если Клиент Тогда
		ВремЭлементы = ФормаСправочнойИнформации.ЭлементыФормы;
		ВремЭлементы[ИмяЗакладкиИсточника+"_ПанельУправления"].Кнопки.ВсеСоветы.Доступность = Истина;
		// Изменение кода. Начало. 23.01.2013{{
		Администрирование = бит_си_ПолныеПрава.бит_си_РольДоступна("ПолныеПрава");			
		// ВремЭлементы[ИмяЗакладкиИсточника+"_ПанельУправления"].Кнопки.РедактироватьСтатью.Доступность =
		// 	бит_си_ПолныеПрава.бит_си_РольДоступна("бит_си_Администрирование") И НЕ (СтатьяДляРедактирования = Неопределено);
		// ВремЭлементы[ИмяЗакладкиИсточника+"_ПанельУправления"].Кнопки.РедактироватьСтатью.Доступность =
		// 	бит_си_ПолныеПрава.бит_си_РольДоступна("бит_си_Администрирование");
		ВремЭлементы[ИмяЗакладкиИсточника+"_ПанельУправления"].Кнопки.РедактироватьСтатью.Доступность =
		Администрирование И НЕ (СтатьяДляРедактирования = Неопределено);
		ВремЭлементы[ИмяЗакладкиИсточника+"_ПанельУправления"].Кнопки.РедактироватьСтатью.Доступность = Администрирование;
		// Изменение кода. Конец. 23.01.2013}}	
	#КонецЕсли
КонецПроцедуры // ДоступностьКнопокКоманднойПанели()

// Вызывается из обработчика события "Нажатие" кнопки дополнительной командной панели
// на закладке источника справочной информации.
// 
// Параметры 
// 	Кнопка             	 -	КнопкаКоманднойПанели  	 Значение параметра "Кнопка" обработчика события "Нажатие" кнопки 
// 	                   	  	                       	 дополнительной командной панели закладки источника СИ.            
// 
Процедура ОбработчикСобытияНажатиеКнопкиКоманднойПанели(Кнопка) Экспорт
	#Если Клиент Тогда
	Если Кнопка.Имя = "ВсеСоветы" Тогда
		ЗагрузитьГлавнуюСтраницу("");
	ИначеЕсли Кнопка.Имя = "РедактироватьСтатью" Тогда
		ОбработчикСобытияКнопкаРедактироватьСтатьюНажатие();
	ИначеЕсли Кнопка.Имя = "РедактироватьСправку" Тогда
		ОбработчикСобытияКнопкаРедактироватьСправкуНажатие();
	Иначе
		Возврат;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияНажатиеКнопкиКоманднойПанели()

// Обработчик события "Нажатие" кнопки "РедактироватьСтатью" дополнительной командной панели
// закладки источника справочной информации "бит_си_ИсточникСправочникСтатьи".
// 
Процедура ОбработчикСобытияКнопкаРедактироватьСтатьюНажатие()
	#Если Клиент Тогда
	
	Если НЕ ТипЗнч(СтатьяДляРедактирования) = Тип("СправочникСсылка.бит_си_Статьи") Тогда
		Возврат;
	КонецЕсли;
	
	Форма = СтатьяДляРедактирования.ПолучитьФорму("ФормаЭлемента",ФормаСправочнойИнформации);
	Форма.ЗакрыватьПриВыборе = Ложь;
	Форма.ОповещатьОВыборе = Истина;
	Форма.ПанельПриОткрытии = "Редактирование";
	Если НЕ Форма.Открыта() Тогда
		Форма.Открыть();
	КонецЕсли;
	
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияКнопкаРедактироватьСтатьюНажатие()

// Обработчик события "Нажатие" кнопки "РедактироватьСправку" дополнительной командной панели
// закладки источника справочной информации "бит_си_ИсточникСправочникСтатьи".
// 
Процедура ОбработчикСобытияКнопкаРедактироватьСправкуНажатие()
	#Если Клиент Тогда
	
	Форма = ПолучитьФорму("Справочник.бит_си_Статьи.ФормаСписка");
	Если НЕ Форма.Открыта() Тогда
		Форма.Открыть();
	КонецЕсли;
	
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияКнопкаРедактироватьСтатьюНажатие()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныеПроцедурыИФункцииОбработкиИсточникаСправочнойИнформации



// Получает из текста строку заданной длины начиная с первого встретившегося слова из переданного массива.
// Позволяет получить короткий анонс найденной статьи справки.
// 
Функция ПолучитьАнонсСтатьи(МассивСловЗапроса, ПарамТекст, ДлинаАнонса = 300)
	Для Каждого ТекСлово Из МассивСловЗапроса Цикл
		Поз = Найти(ПарамТекст, ТекСлово);
		Если НЕ Поз = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Поз = ?(Поз = 0, 1, Поз);
	
	ВремПоз = 1;
	Приоритет = 1;
	Для й=1 По Поз Цикл
		Если Сред(ПарамТекст, й, 1)= ">" Тогда
			ВремПоз = Макс(ВремПоз, й + 1);
			Приоритет = 1;
		КонецЕсли;
		Если Приоритет = 1 И Сред(ПарамТекст, й, 1) = " " Тогда
			ВремПоз = Макс(ВремПоз, й + 1);
		КонецЕсли;
		Если Приоритет <= 2
		   И Сред(ПарамТекст, й, 1) = ВРег(Сред(ПарамТекст, й, 1))
		   И НЕ ВРег(Сред(ПарамТекст, й, 1)) = НРег(ВРег(Сред(ПарамТекст, й, 1))) Тогда
			ВремПоз = Макс(ВремПоз, й);
			Приоритет = 2;
		КонецЕсли;
		Если Приоритет <= 3 И Сред(ПарамТекст, й-1, 2) = ". " Тогда
			ВремПоз = Макс(ВремПоз, й + 1);
		КонецЕсли;
	КонецЦикла;
	ТекстСтатьи = Сред(ПарамТекст, ВремПоз);
	
	НормальныйТекст = "";
	Поз = Найти(ТекстСтатьи,"<");
	Пока НЕ Поз = 0 И СтрДлина(НормальныйТекст) <= ДлинаАнонса Цикл
		НормальныйТекст = СокрЛП(НормальныйТекст) + " " + Лев(ТекстСтатьи, Поз-1);
		ТекстСтатьи = Сред(ТекстСтатьи, Поз+1);
		Поз = Найти(ТекстСтатьи,">");
		ТекстСтатьи = Сред(ТекстСтатьи,Поз+1);
		Поз = Найти(ТекстСтатьи,"<");
	КонецЦикла;
	ТекстСтатьи = НормальныйТекст + " ";
	
	Поз = Найти(НормальныйТекст," ");
	
	НормальныйТекст = "";
	Пока НЕ Поз = 0 И СтрДлина(НормальныйТекст) <= ДлинаАнонса Цикл
		НормальныйТекст = СокрЛП(НормальныйТекст) + " " + Лев(ТекстСтатьи, Поз-1);
		ТекстСтатьи = Сред(ТекстСтатьи, Поз+1);
		Поз = Найти(ТекстСтатьи, " ");
	КонецЦикла;
	ТекстРезультата = НормальныйТекст;
	Для Каждого ТекСлово Из МассивСловЗапроса Цикл
		НормальныйТекст = ТекстРезультата;
		ТекстРезультата = "";
		Поз = Найти(НРег(НормальныйТекст), НРег(ТекСлово));
		Пока НЕ Поз = 0 Цикл
			ТекстРезультата = ТекстРезультата
							+ Лев(НормальныйТекст, Поз-1)
							+ "<span style=""color: red; background-color: yellow"">"
							+ Сред(НормальныйТекст, Поз, СтрДлина(ТекСлово))
							+ "</span>";
			НормальныйТекст = Сред(НормальныйТекст, Поз + СтрДлина(ТекСлово));
			Поз = Найти(НРег(НормальныйТекст), НРег(ТекСлово));
		КонецЦикла;
		ТекстРезультата = ТекстРезультата
						+ НормальныйТекст;
	КонецЦикла;
	Возврат "... " + ТекстРезультата + " ...";
КонецФункции // ПолучитьАнонсСтатьи()

// Добавляет вложенные разделы справки в дерево разделов для поиска.
// 
// Параметры 
// 	СтрокаРаздела      	 -	СтрокаДереваЗначений   	 Строка дерева разделов, для которой добавляются дочерние разделы. 
// 
Процедура ДобавитьВложенныеРазделы(СтрокаРаздела)
	Выборка = Справочники.бит_си_Статьи.Выбрать(СтрокаРаздела.ПараметрыРаздела.Ссылка);
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СтрокаРаздела.Строки.Добавить();
		НоваяСтрока.Раздел				= Выборка.Наименование;
		НоваяСтрока.ИмяЗакладки			= СтрокаРаздела.ИмяЗакладки;
		НоваяСтрока.ПараметрыРаздела	= Новый Структура("Ид, Ссылка", Выборка.Наименование, Выборка.Ссылка);
		НоваяСтрока.Пометка				= Истина;
		ДобавитьВложенныеРазделы(НоваяСтрока);
	КонецЦикла;
КонецПроцедуры // ДобавитьВложенныеРазделы()

// Разбирает текст ссылки на ИмяМенеджера, ИмяОбъекта и саму ссылку
// Используется при обработке ссылок на объекты информационной баз.
// 
// Параметры 
// 	ТекстСсылки        	 -	Строка                 	 Текст ссылки.                                                     
// Возвращаемое значение:
// 	Возврат ...        	 -	Структура              	 Структура ссылки для открытия объекта.                            
// 
Функция РазобратьСсылку(ТекстСсылки)
	
	
	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("ИмяМенеджера","");
	РезСтруктура.Вставить("ИмяОбъекта","");
	РезСтруктура.Вставить("Ссылка","");
	
	Стр = ТекстСсылки;
	
	Позиция = Найти(Стр,"@");
	
	Если Позиция>0 Тогда
	
		РезСтруктура.ИмяМенеджера = Лев(Стр,Позиция-1);
		Стр = Сред(Стр,Позиция+1);
		
		Позиция = Найти(Стр,"@");
		Если Позиция>0 Тогда
			РезСтруктура.ИмяОбъекта = Лев(Стр,Позиция-1);
			РезСтруктура.Ссылка     = Сред(Стр,Позиция+1);
		КонецЕсли; 
	
	КонецЕсли; 
	
	
    Возврат РезСтруктура;
КонецФункции // РазобратьСсылку()

// Получает массив статей, соответствующих установленным отборам для источника справочной информации.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	Массив, Неопределено   	 Массив статей; Неопределено - отборы не становлены.
// 
Функция ПолучитьСтатьиПоОтборам()
	ВремНастройки = бит_си_ПолныеПрава.ПолучитьНастройкуИсточника(ИсточникСИ);
	Если НЕ ТипЗнч(ВремНастройки) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОбъектыОтбора = "";
	Если НЕ ВремНастройки.Свойство("ОбъектыОтбора", ОбъектыОтбора) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ТипЗнч(ОбъектыОтбора) = Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	Для Каждого ТекОбъект Из ОбъектыОтбора Цикл
		ТекущийТип = ТекОбъект.МетаОбъект;
		Если ТекущийТип = "#Роль" ИЛИ ТекущийТип = "#РежимЗапуска" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивТипов.Найти(Тип(СтрЗаменить(ТекущийТип, ".", "Ссылка."))) = Неопределено Тогда
			МассивТипов.Добавить(Тип(СтрЗаменить(ТекущийТип, ".", "Ссылка.")));
		КонецЕсли;
	КонецЦикла;
	
	ТабОтборов = Новый ТаблицаЗначений();
	ТабОтборов.Колонки.Добавить("Тип", Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(200)));
	ТабОтборов.Колонки.Добавить("Объект", Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(200)));
	
	Для Каждого ТекОбъект Из ОбъектыОтбора Цикл
		ТекущийКод = ТекОбъект.КодПолученияОбъектов;
		ТекущийТип = ТекОбъект.МетаОбъект;
		Результат = Неопределено;
		Если ТекущийТип = "#РежимЗапуска" Тогда

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Результат = "Обычный";
		#Иначе
			Результат = "Управляемый";
		#КонецЕсли
		Иначе
			Попытка
				Выполнить(ТекущийКод);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			НоваяСтрока = ТабОтборов.Добавить();
			НоваяСтрока.Тип = ТекущийТип;
			НоваяСтрока.Объект = "";
		ИначеЕсли ТипЗнч(Результат) = Тип("Массив") Тогда
			Если Результат.Количество() = 0 Тогда
				НоваяСтрока = ТабОтборов.Добавить();
				НоваяСтрока.Тип = ТекущийТип;
				НоваяСтрока.Объект = "";
			КонецЕсли;
			Для Каждого ТекОбъект Из Результат Цикл
				Если ТекущийТип = "#Роль" Тогда
					Если Лев(ТекОбъект, 5) = "Роль." Тогда
						НоваяСтрока = ТабОтборов.Добавить();
						НоваяСтрока.Тип = ТекущийТип;
						НоваяСтрока.Объект = ТекОбъект;
					КонецЕсли;
				ИначеЕсли ТекущийТип = "#РежимЗапуска" Тогда
					НоваяСтрока = ТабОтборов.Добавить();
					НоваяСтрока.Тип = ТекущийТип;
					НоваяСтрока.Объект = ТекОбъект;
				ИначеЕсли ТипЗнч(ТекОбъект) = Тип(СтрЗаменить(ТекущийТип, ".", "Ссылка.")) Тогда
					НоваяСтрока = ТабОтборов.Добавить();
					НоваяСтрока.Тип = ТекущийТип;
					НоваяСтрока.Объект = ТекОбъект;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
			Если ТекущийТип = "#Роль" Тогда
				Если Лев(ТекОбъект, 5) = "Роль." Тогда
					НоваяСтрока = ТабОтборов.Добавить();
					НоваяСтрока.Тип = ТекущийТип;
					НоваяСтрока.Объект = Результат;
				КонецЕсли;
			ИначеЕсли ТекущийТип = "#РежимЗапуска" Тогда
				НоваяСтрока = ТабОтборов.Добавить();
				НоваяСтрока.Тип = ТекущийТип;
				НоваяСтрока.Объект = Результат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Результат) = Тип(СтрЗаменить(ТекущийТип, ".", "Ссылка.")) Тогда
			НоваяСтрока = ТабОтборов.Добавить();
			НоваяСтрока.Тип = ТекущийТип;
			НоваяСтрока.Объект = ТекОбъект;
		Иначе
			НоваяСтрока = ТабОтборов.Добавить();
			НоваяСтрока.Тип = ТекущийТип;
			НоваяСтрока.Объект = "";
		КонецЕсли;
	КонецЦикла;
	
	Если ТабОтборов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТабОтборов.Тип КАК Тип,
	               |	ТабОтборов.Объект КАК Объект
	               |ПОМЕСТИТЬ ТабОтборов
	               |ИЗ
	               |	&ТабОтборов КАК ТабОтборов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Статьи.Ссылка КАК Статья,
	               |	ТабОтборов.Тип КАК Тип,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА СвязанныеТипы.Статья ЕСТЬ NULL 
	               |				ТОГДА ИСТИНА
	               |			КОГДА СвязанныеОбъекты.Объект ЕСТЬ NULL 
	               |				ТОГДА ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ) КАК СоответствуетОтбору
	               |ПОМЕСТИТЬ ОтборыПоТипам
	               |ИЗ
	               |	Справочник.бит_си_Статьи КАК Статьи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТабОтборов.Тип КАК Тип,
	               |			ТабОтборов.Объект КАК Объект
	               |		ИЗ
	               |			ТабОтборов КАК ТабОтборов) КАК ТабОтборов
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СвязанныеОбъекты.Статья КАК Статья,
	               |			СвязанныеОбъекты.Тип КАК Тип,
	               |			СвязанныеОбъекты.Объект КАК Объект
	               |		ИЗ
	               |			РегистрСведений.бит_си_СвязанныеОбъекты КАК СвязанныеОбъекты
	               |		ГДЕ
	               |			СвязанныеОбъекты.ДляОтборов) КАК СвязанныеОбъекты
	               |		ПО Статьи.Ссылка = СвязанныеОбъекты.Статья
	               |			И (ТабОтборов.Тип = СвязанныеОбъекты.Тип)
	               |			И (ТабОтборов.Объект = СвязанныеОбъекты.Объект)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СвязанныеОбъекты.Статья КАК Статья,
	               |			СвязанныеОбъекты.Тип КАК Тип
	               |		ИЗ
	               |			РегистрСведений.бит_си_СвязанныеОбъекты КАК СвязанныеОбъекты
	               |		ГДЕ
	               |			СвязанныеОбъекты.ДляОтборов
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СвязанныеОбъекты.Статья,
	               |			СвязанныеОбъекты.Тип) КАК СвязанныеТипы
	               |		ПО Статьи.Ссылка = СвязанныеТипы.Статья
	               |			И (ТабОтборов.Тип = СвязанныеТипы.Тип)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Статьи.Ссылка,
	               |	ТабОтборов.Тип
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтборыПоТипам.Статья КАК Статья
	               |ИЗ
	               |	ОтборыПоТипам КАК ОтборыПоТипам
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтборыПоТипам.Статья
	               |
	               |ИМЕЮЩИЕ
	               |	МИНИМУМ(ОтборыПоТипам.СоответствуетОтбору) = ИСТИНА";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТабОтборов", ТабОтборов);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статья");
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат;
КонецФункции // ПолучитьСтатьиПоОтборам()

// Формирует стартовую страницу с содержанием справочника статей.
// Фильтрует в соответствии с переданным параметром. Если Фильтру соответствует 1 статья, то открывает ее.
// 
// Параметры 
// 	ПараметрОткрытия   	 -	Строка, Массив         	 Наименование открываемой статьи, имя метки или массив статей     
// 	                   	  	                       	 справочника.                                                      
// 
Процедура ЗагрузитьГлавнуюСтраницу(ПараметрОткрытия = "")
	
	#Если Клиент Тогда
	Если НЕ ТипЗнч(ПараметрОткрытия) = Тип("Строка") 
	   И НЕ ТипЗнч(ПараметрОткрытия) = Тип("Массив") Тогда
		ПараметрОткрытия = "";
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	МассивСсылок = Новый Массив();
	Если ТипЗнч(ПараметрОткрытия) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из ПараметрОткрытия Цикл
			Если ТипЗнч(ТекЭлемент) = Тип("Строка") Тогда
				МассивСтрок.Добавить(ТекЭлемент);
			Иначе
				МассивСсылок.Добавить(ТекЭлемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаголовокСодержания = "Разделы справочной информации";
	ТекстСодержания     = "";
	КоличествоСоветов	= 0;
	
	ОтобранныеСтатьи = ПолучитьСтатьиПоОтборам();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочнаяИнформация.Ссылка КАК Ссылка,
	|	СправочнаяИнформация.Ссылка.Порядок КАК Порядок,
	|	СправочнаяИнформация.Ссылка.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочнаяИнформация.Ссылка.Наименование КАК Наименование,
	|	Метки.ИмяМетки КАК ИмяМетки
	|ИЗ
	|	Справочник.бит_си_Статьи КАК СправочнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_си_Статьи.МестаИспользования КАК Метки
	|		ПО СправочнаяИнформация.Ссылка = Метки.Ссылка";
	
	Если ТипЗнч(ПараметрОткрытия) = Тип("Строка") И НЕ СокрЛП(ПараметрОткрытия) = "" Тогда
		ОбъектОтбора = Строка(ПараметрОткрытия);
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	(НЕ СправочнаяИнформация.НеВключатьВСодержание)
		|	И Метки.ИмяМетки В (&Наименования)
		|	И НЕ ЕСТЬNULL(Метки.ДопИнформация, Ложь)";
		
		ЛевПарам = ПараметрОткрытия;
		
		Наименования = Новый Массив();
		Наименования.Добавить(ЛевПарам);
		
		Пока НЕ Найти(ЛевПарам, ".") = 0 Цикл
			ПравПарам = ЛевПарам;
			Поз = Найти(ПравПарам, ".");
			ПозицияПоследнейТочки = Поз;
			Пока НЕ Поз = 0 Цикл
				ПравПарам = Сред(ПравПарам, Поз + 1);
				Поз = Найти(ПравПарам, ".");
				ПозицияПоследнейТочки = ПозицияПоследнейТочки + Поз;
			КонецЦикла;
		
			Если НЕ ПозицияПоследнейТочки = 0 Тогда
				ЛевПарам = Лев(ПараметрОткрытия, ПозицияПоследнейТочки - 1);
				Наименования.Добавить(ЛевПарам);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Наименования", Наименования);
	ИначеЕсли ТипЗнч(ПараметрОткрытия) = Тип("Массив") Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	(НЕ СправочнаяИнформация.НеВключатьВСодержание)
		|	И СправочнаяИнформация.Ссылка В(&Отбор)
		|	И НЕ ЕСТЬNULL(Метки.ДопИнформация, Ложь)";
		Запрос.УстановитьПараметр("Отбор", ПараметрОткрытия);
	Иначе
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	(НЕ СправочнаяИнформация.НеВключатьВСодержание)
		|	И НЕ ЕСТЬNULL(Метки.ДопИнформация, Ложь)";
	КонецЕсли;
	
	Если НЕ ОтобранныеСтатьи = Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|И СправочнаяИнформация.Ссылка В (&ОтобранныеСтатьи)";
		Запрос.УстановитьПараметр("ОтобранныеСтатьи", ОтобранныеСтатьи);
	КонецЕсли;
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправочнаяИнформация.Ссылка,
		|	СправочнаяИнформация.Ссылка.Порядок,
		|	СправочнаяИнформация.Ссылка.ЭтоГруппа,
		|	СправочнаяИнформация.Ссылка.Наименование,
		|	Метки.ИмяМетки
		|ИЗ
		|	Справочник.бит_си_Статьи КАК СправочнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_си_Статьи.МестаИспользования КАК Метки
		|		ПО СправочнаяИнформация.Ссылка = Метки.Ссылка
		|ГДЕ
		|	(НЕ СправочнаяИнформация.НеВключатьВСодержание)
		|	И Метки.ИмяМетки В (&Наименования)
		|	И НЕ ЕСТЬNULL(Метки.ДопИнформация, Ложь)";
		
		Наименования = Новый Массив();
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			ЛевПарам = ТекСтрока;
			Наименования.Добавить(ЛевПарам);
			
			Пока НЕ Найти(ЛевПарам,".") = 0 Цикл
				ПравПарам = ЛевПарам;
				Поз = Найти(ПравПарам, ".");
				ПозицияПоследнейТочки = Поз;
				Пока НЕ Поз = 0 Цикл
					ПравПарам = Сред(ПравПарам, Поз + 1);
					Поз = Найти(ПравПарам, ".");
					ПозицияПоследнейТочки = ПозицияПоследнейТочки + Поз;
				КонецЦикла;
			
				Если НЕ ПозицияПоследнейТочки = 0 Тогда
					ЛевПарам = Лев(ПараметрОткрытия, ПозицияПоследнейТочки - 1);
					Наименования.Добавить(ЛевПарам);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Наименования", Наименования);
		
		Если НЕ ОтобранныеСтатьи = Неопределено Тогда
			Запрос.Текст = Запрос.Текст +
			"
			|И СправочнаяИнформация.Ссылка В (&ОтобранныеСтатьи)";
			Запрос.УстановитьПараметр("ОтобранныеСтатьи", ОтобранныеСтатьи);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочнаяИнформация.Ссылка.Порядок,
	|	СправочнаяИнформация.Ссылка.ЭтоГруппа,
	|	СправочнаяИнформация.Ссылка.Наименование
	|
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.ЭтоГруппа) Тогда
			Продолжить;
		ИначеЕсли Выборка.ТипЗаписи() = SelectRecordType.ИтогПоГруппировке
			И Выборка.Ссылка.ЭтоГруппа Тогда
			ТекстСодержания = ТекстСодержания + "
			|</DIV>";
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка.ЭтоГруппа Тогда  // Это заголовок.
			
			НаименованиеЗаголовка = Выборка.Ссылка.Наименование;
			ТекстРаздела =  Выборка.Ссылка.ОписаниеРаздела;
			
			ТекстСодержания = ТекстСодержания + "
			|<DIV style=""text-indent: "+СокрЛП(10*Выборка.Уровень())+"pt;""><P class=""contents"">" +
			НаименованиеЗаголовка + "</P>
			|" + ТекстРаздела;
			
		ИначеЕсли Выборка.Уровень() = 0 Тогда
			
			ТекстМетки = ПолучитьHTMLТекстМеток(СтатьиИМетки, Выборка.Ссылка, "содержание");
			
			ТекстСсылки = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			ТекстСодержания = ТекстСодержания + "
			|<P class=""contents""><A href=""" + "ВнСсылка=" + ТекстСсылки + """>" + Выборка.Ссылка.НазваниеСтатьи + "</A>" +
			ТекстМетки + "</P>
			|";
			
			КоличествоСоветов = КоличествоСоветов + 1;
			
		Иначе
			
			ТекстМетки = ПолучитьHTMLТекстМеток(СтатьиИМетки, Выборка.Ссылка, "содержание");
			
			ТекстСсылки = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			ТекстСодержания = ТекстСодержания + "
			|<P class=""contents"" style=""text-indent: "+СокрЛП(10*Выборка.Уровень())+"pt;""><A href=""" +
			"ВнСсылка=" + ТекстСсылки + """>" + Выборка.Ссылка.НазваниеСтатьи + "</A>" +
			ТекстМетки + "</P>
			|";
			
			КоличествоСоветов = КоличествоСоветов + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	ВремЭлементы = ФормаСправочнойИнформации.ЭлементыФормы;
	Если КоличествоСоветов = 1 Тогда // Всего один совет показываем сразу.
		ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия",ЗаголовокСодержания,ТекстСсылки);
		ПерейтиПоСсылке(ВремСтруктура);
		ВремЭлементы[ИмяЗакладкиИсточника+"_ПанельУправления"].Кнопки.РедактироватьСтатью.Доступность =
			ПравоДоступа("Редактирование",Метаданные.Справочники.бит_си_Статьи);
	Иначе
		ТекстСодержания = СтрЗаменить(ШаблонСтраницы, "##Content##","<H1 id=title>" + ЗаголовокСодержания + "</H1>
		|" + ТекстСодержания + "
		|" + ПолучитьТекстДопИнфо(ПараметрОткрытия) + "
		|" + БИТИнфо);
		
		ВремЭлементы[ИмяЗакладкиИсточника+"_ПолеHTML"].УстановитьТекст(ТекстСодержания);
		ВремЭлементы[ИмяЗакладкиИсточника+"_ПанельУправления"].Кнопки.РедактироватьСтатью.Доступность = Ложь;
		ТекущаяСсылка = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия",
										ЗаголовокСодержания,"#Главная", ПараметрОткрытия);
		СтатьяДляРедактирования = Неопределено;
	КонецЕсли;
	
	#КонецЕсли
КонецПроцедуры // ЗагрузитьГлавнуюСтраницу()

// Выполняет код получения описания связанных объектов
// и возвращает результат (описание связанных объектов.
// 
// Параметры 
// 	КодДляВыполнения   	 -	Строка                 	 Код получения описания связанных объектов.
// 	МассивОбъектов     	 -	Массив                 	 Массив связанных объектов.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка              	 Описание связанных объектов.
// 
Функция ПолучитьРезультатВыполненияКодаСвязанныхОбъектов(Знач КодДляВыполнения, Знач МассивОбъектов = Неопределено)
	Если НЕ ЗначениеЗаполнено(КодДляВыполнения) Тогда
		Возврат "";
	КонецЕсли;
	Если МассивОбъектов = Неопределено Тогда
		Возврат "";
	ИначеЕсли НЕ ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
		ВремМассив = Новый Массив();
		ВремМассив.Добавить(МассивОбъектов);
		МассивОбъектов = ВремМассив;
	КонецЕсли;
	
	Результат = "";
	Попытка
		Выполнить(КодДляВыполнения);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат "";
	КонецПопытки;
	Возврат Результат;
КонецФункции // ПолучитьРезультатВыполненияКодаСвязанныхОбъектов()

// Возвращает HTML-текст с описанием связанных объектов.
// 
// Параметры 
// 	Параметр           	 -	Строка,СправочникСсылка	 Открываемая статьи, имя метки или массив статей справочника
// 	                   	  	"бит_си_Статьи". 	                                                                  
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 HTML-текст с описанием связанных объектов.
// 
Функция ПолучитьТекстСвязанныхОбъектов(Параметр)
	Если Параметр = "" Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ТипЗнч(НастройкиИсточника) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	ОбъектыПривязки = "";
	Если НЕ НастройкиИсточника.Свойство("ОбъектыПривязки", ОбъектыПривязки) Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ТипЗнч(ОбъектыПривязки) = Тип("ТаблицаЗначений") Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстСодержания = "";
	ВыведеноТипов = 1;
	Для Каждого ТекОбъект Из ОбъектыПривязки Цикл
		ТекущийКод = ТекОбъект.КодПолученияТекстаОбъекта;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	СвязанныеОбъекты.Объект
		                      |ИЗ
		                      |	РегистрСведений.бит_си_СвязанныеОбъекты КАК СвязанныеОбъекты
		                      |ГДЕ
		                      |	СвязанныеОбъекты.Статья = &Статья
		                      |	И СвязанныеОбъекты.Тип = &Тип
		                      |	И (НЕ СвязанныеОбъекты.ДляОтборов)");
		Запрос.УстановитьПараметр("Статья"	, Параметр);
		Запрос.УстановитьПараметр("Тип"		, ТекОбъект.МетаОбъект);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		Результат = ПолучитьРезультатВыполненияКодаСвязанныхОбъектов(ТекущийКод, МассивОбъектов);
		
		Если ТипЗнч(Результат) = Тип("Строка") И ЗначениеЗаполнено(Результат) Тогда
			ТекстСодержания = ТекстСодержания
							+ "<div style=""padding-top: 20px;width: 300 px;text-indent: 0pt;border-bottom: gray thin solid;"">
					  		  |<P style=""FONT-FAMILY: Verdana;MARGIN: 8pt 0pt; COLOR: #666666; FONT-WEIGHT: bold;FONT-SIZE: 8pt;"">
					  		  |<a id=""linkedtype" + СокрЛП(ВыведеноТипов) + "title""
							  | style=""padding-left:1px;padding-right:1px;vertical-align:middle;text-align:center;text-decoration:none;
							  |border: #666666 1px solid;FONT-FAMILY: Verdana;COLOR: #666666;FONT-SIZE: 8pt;""
					  		  |onclick=""expandit('linkedtype" + СокрЛП(ВыведеноТипов) + "title', 'linkedtype" + СокрЛП(ВыведеноТипов) + "');""
							  | href=""javascript:// "">+</a>&nbsp;" + ТекОбъект.Заголовок
							+ "</P></div><div id=""linkedtype" +
							  СокрЛП(ВыведеноТипов) + """ style=""display:none"">" + Результат + "</div>";
		Иначе
			Продолжить;
		КонецЕсли;
		ВыведеноТипов = ВыведеноТипов + 1;
	КонецЦикла;
	
	Возврат ТекстСодержания;	
КонецФункции // ПолучитьТекстСвязанныхОбъектов()

// Возвращает HTML-текст ссылок на дополнительную информацию, связанную с переданным параметром.
// 
// Параметры 
// 	Параметр           	 -	Строка,СправочникСсылка	 Открываемая статьи, имя метки или массив статей справочника      
// 	                   	  	"бит_си_Статьи", Массив. 	                                                                  
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 HTML-текст ссылок на дополнительную информацию.                   
// 
Функция ПолучитьТекстДопИнфо(Параметр)
	Если Параметр = "" Тогда
		Возврат "";
	КонецЕсли;
	МассивМеток = Новый Массив();
	Если ТипЗнч(Параметр) = Тип("СправочникСсылка.бит_си_Статьи") Тогда
		Для Каждого ТекМетка Из Параметр.МестаИспользования Цикл
			Если НЕ МассивМеток.Найти(ТекМетка.ИмяМетки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивМеток.Добавить(ТекМетка.ИмяМетки);
		КонецЦикла;
		
		ПараметрОткрытия = Новый Массив();
		ПараметрОткрытия.Добавить(Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда
		Для Каждого ТекСтатья Из Параметр Цикл
			Для Каждого ТекМетка Из ТекСтатья.МестаИспользования Цикл
				Если НЕ МассивМеток.Найти(ТекМетка.ИмяМетки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивМеток.Добавить(ТекМетка.ИмяМетки);
			КонецЦикла;
		КонецЦикла;
		ПараметрОткрытия = Параметр;
	Иначе
		ПараметрОткрытия = Параметр;
	КонецЕсли;
	
	ОтобранныеСтатьи = ПолучитьСтатьиПоОтборам();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочнаяИнформация.Ссылка КАК Ссылка,
	|	СправочнаяИнформация.ИмяМетки КАК ИмяМетки
	|ИЗ
	|	Справочник.бит_си_Статьи.МестаИспользования КАК СправочнаяИнформация";
	
	Если ТипЗнч(ПараметрОткрытия) = Тип("Строка") Тогда
		ОбъектОтбора = Строка(ПараметрОткрытия);
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	СправочнаяИнформация.ИмяМетки В (&Наименования)
		|	И СправочнаяИнформация.ДопИнформация";
		
		ЛевПарам = ПараметрОткрытия;
		
		Наименования = Новый Массив();
		Наименования.Добавить(ЛевПарам);
		
		Пока НЕ Найти(ЛевПарам,".") = 0 Цикл
			ПравПарам = ЛевПарам;
			Поз = Найти(ПравПарам,".");
			ПозицияПоследнейТочки = Поз;
			Пока НЕ Поз = 0 Цикл
				ПравПарам = Сред(ПравПарам,Поз+1);
				Поз = Найти(ПравПарам,".");
				ПозицияПоследнейТочки = ПозицияПоследнейТочки + Поз;
			КонецЦикла;
		
			Если НЕ ПозицияПоследнейТочки = 0 Тогда
				ЛевПарам = Лев(ПараметрОткрытия,ПозицияПоследнейТочки-1);
				Наименования.Добавить(ЛевПарам);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Наименования",Наименования);
	ИначеЕсли ТипЗнч(ПараметрОткрытия) = Тип("Массив") Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	СправочнаяИнформация.ИмяМетки В (&Наименования)
	  	| И НЕ СправочнаяИнформация.Ссылка В (&Отбор)";
		Запрос.УстановитьПараметр("Наименования",МассивМеток);
		Запрос.УстановитьПараметр("Отбор",ПараметрОткрытия);
	Иначе
		Возврат "";
	КонецЕсли;
	Если НЕ ОтобранныеСтатьи = Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|И СправочнаяИнформация.Ссылка В (&ОтобранныеСтатьи)";
		Запрос.УстановитьПараметр("ОтобранныеСтатьи", ОтобранныеСтатьи);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочнаяИнформация.Ссылка.Порядок,
	|	СправочнаяИнформация.Ссылка.ЭтоГруппа,
	|	СправочнаяИнформация.Ссылка.Наименование
	|
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстСодержания = "<div style=""padding-top: 50px;width: 250 px;text-indent: 0pt;border-bottom: gray thin solid;"">
					  |<p style=""FONT-FAMILY: Verdana;MARGIN: 8pt 0pt; COLOR: #666666; FONT-WEIGHT: bold;FONT-SIZE: 8pt;"">
					  |<a id=""addinfotitle"" style=""vertical-align:middle;text-align:center;
					  |border: #666666 1px solid;FONT-FAMILY: Verdana;MARGIN: 8pt 0pt; COLOR: #666666; FONT-WEIGHT: bold;
					  |FONT-SIZE: 8pt;text-decoration:none;""
					  |onclick=""expandit('addinfotitle', 'addinfo');"" href=""javascript:// "">+</a>&nbsp;См. также:</p></div>
					  |<div ID=""addinfo"" style=""display:none"">";
	ПредУровень = 0;
	КоличествоСкобок = 0;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.ЭтоГруппа) Тогда
			Продолжить;
		ИначеЕсли Выборка.Уровень() <= ПредУровень И КоличествоСкобок > 0 Тогда
		// ИначеЕсли Выборка.ТипЗаписи() = SelectRecordType.ИтогПоГруппировке
		// 	И Выборка.Ссылка.ЭтоГруппа Тогда
		    Для й = 1 По ПредУровень - Выборка.Уровень() Цикл
				ТекстСодержания = ТекстСодержания + "
													|</div>";
			КонецЦикла;
			КоличествоСкобок = 	КоличествоСкобок - (ПредУровень - Выборка.Уровень());
		// Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка.ЭтоГруппа Тогда  // Это заголовок.
			
			НаименованиеЗаголовка = Выборка.Ссылка.Наименование;
			
			ТекстСодержания = ТекстСодержания + "
			|<div style=""text-indent: " +
			СокрЛП(10*(Выборка.Уровень()+1)) +
			"pt;FONT-FAMILY: Verdana;FONT-WEIGHT: bold;FONT-SIZE: 8pt;"">
			|<P style=""MARGIN: 8pt 0pt; COLOR: #666666;"">" + НаименованиеЗаголовка + "</P>";
			КоличествоСкобок = 	КоличествоСкобок + 1;
		ИначеЕсли Выборка.Уровень() = 0 Тогда
			
			ТекстМетки = ПолучитьHTMLТекстМеток(СтатьиИМетки, Выборка.Ссылка, "допссылки");
			
			ТекстСсылки = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			ТекстСодержания = ТекстСодержания + "
			|<P style=""MARGIN: 8pt 0pt; COLOR: #666666; ""><A style=""FONT-FAMILY: Verdana;FONT-WEIGHT: normal;
			|FONT-SIZE: 8pt;color: #3366ff;"" href=""" +
			"ВнСсылка=" + ТекстСсылки + """>" + Выборка.Ссылка.НазваниеСтатьи + "</A>" +
			ТекстМетки + "</P>
			|";
			
		Иначе
			
			ТекстМетки = ПолучитьHTMLТекстМеток(СтатьиИМетки, Выборка.Ссылка, "допссылки");
			
			ТекстСсылки = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			ТекстСодержания = ТекстСодержания + "
			|<P style=""MARGIN: 8pt 0pt; COLOR: #666666; text-indent: "+СокрЛП(10*(Выборка.Уровень()+1))+"pt;"">
			|<A style=""FONT-FAMILY: Verdana;FONT-WEIGHT: normal;FONT-SIZE: 8pt;
			|color: #3366ff;"" href=""" + "ВнСсылка=" + ТекстСсылки + """>" +
			Выборка.Ссылка.НазваниеСтатьи + "</A>" +
			ТекстМетки + "</P>
			|";
			
		КонецЕсли;
		ПредУровень = Выборка.Уровень();
	КонецЦикла;
    Пока КоличествоСкобок > 0 Цикл
		ТекстСодержания = ТекстСодержания + "
											|</div>";
		КоличествоСкобок = КоличествоСкобок - 1;
	КонецЦикла;
	ТекстСодержания = ТекстСодержания + "
										|</div>";
	
	Возврат ТекстСодержания;	
КонецФункции // ПолучитьТекстДопИнфо()

// Получает структуру соответствия статей и меток, а также ссылки на пиктограммы меток.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	Структура	        	 Структура соответстви статей и меток,
// 													 а также ссылки на пиктограммы меток.
// 		Поля 
// 			СтатьиИМетки	      -	ТаблицаЗначений    	 Таблица соответствия статей и меток.
// 			Метки			      -	ТаблицаЗначений    	 Таблица меток с указанием путей к файлам пиктограмм.
// 			КартинкаПоУмолчанию   -	Строка             	 Путь к файлу пиктограммы по умолчанию.
// 						 
// 
Функция ПолучитьСтатьиИМетки()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УстановленныеМеткиСтатей.Статья КАК Статья,
	               |	УстановленныеМеткиСтатей.Метка КАК Метка
	               |ИЗ
	               |	РегистрСведений.бит_си_УстановленныеМеткиСтатей КАК УстановленныеМеткиСтатей
	               |ГДЕ
	               |	УстановленныеМеткиСтатей.Метка ССЫЛКА Справочник.бит_си_МеткиСтатей";
	ТабСтатьиИМетки = Запрос.Выполнить().Выгрузить();
	ТабСтатьиИМетки.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Строка"));
	ТабМетки = ТабСтатьиИМетки.Скопировать(,"Метка");
	ТабМетки.Свернуть("Метка");
	ТабМетки.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Строка"));
	КартинкаПоУмолчанию = ПолучитьИмяВременногоФайла("bit_h_img");
	#Если Клиент Тогда
	БиблиотекаКартинок.бит_си_МеткаСтатьи.Записать(КартинкаПоУмолчанию);
	#КонецЕсли
	Возврат Новый Структура("СтатьиИМетки, Метки, КартинкаПоУмолчанию", ТабСтатьиИМетки, ТабМетки, КартинкаПоУмолчанию);
КонецФункции // ПолучитьСтатьиИМетки()

// Получает таблицу меток для указанной статьи.
// 
// Параметры 
// 	СтруктураСтатьиИ	 -	Структура              	 Структура соответстви статей и меток,
// 	Метки                                            а также ссылки на пиктограммы меток.
// 		Поля 
// 			СтатьиИМетки	 -	ТаблицаЗначений    	 Таблица соответствия статей и меток.
// 			Метки			 -	ТаблицаЗначений    	 Таблица меток с указанием путей к файлам пиктограмм.
// 			КартинкаПоУмол   -	Строка             	 Путь к файлу пиктограммы по умолчанию.
// 			чанию			 
// 	Ссылка				-	СправочникСсылка.бит   	 Статья, для которой получаем метки
// 							_си_Статьи.
// Возвращаемое значение:
// 	Возврат ...        	 -	ДеревоЗначений         	 Дерево разделов поиска                                           
// 		Поля 
// 			Ссылка			 -	СправочникСсылка.	 Метка
// 								бит_си_МеткиСтатей.
// 			Наименование	 -	Строка             	 Наименование метки.
// 			Описание		 -	Строка            	 Описание метки.
// 			Картинка		 -	Структура          	 Путь к файлу пиктограммы метки.
// 
Функция ПолучитьМеткиСтатьи(СтруктураСтатьиИМетки, Статья)
	СтрокиМетки = СтруктураСтатьиИМетки.СтатьиИМетки.НайтиСтроки(Новый Структура("Статья", Статья));
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.бит_си_МеткиСтатей"));
	Результат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Строка"));
	Для Каждого ТекСтрока Из СтрокиМетки Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Ссылка = ТекСтрока.Метка;
		НоваяСтрока.Наименование = ТекСтрока.Метка.Наименование;
		НоваяСтрока.Описание = ТекСтрока.Метка.Описание;
		ТекМетка = СтруктураСтатьиИМетки.Метки.Найти(ТекСтрока.Метка, "Метка");
		Если ПустаяСтрока(ТекСтрока.Картинка) Тогда
			Если ПустаяСтрока(ТекМетка.Картинка) Тогда
				ВремКартинка = ТекМетка.Метка.Пиктограмма.Получить();
				Если НЕ ТипЗнч(ВремКартинка) = Тип("Картинка") ИЛИ ВремКартинка.Вид = ВидКартинки.Пустая Тогда
					ТекМетка.Картинка = СтруктураСтатьиИМетки.КартинкаПоУмолчанию;
				Иначе
					ВремПуть = ПолучитьИмяВременногоФайла("bit_h_img");
					ВремКартинка.Записать(ВремПуть);
					ТекМетка.Картинка = ВремПуть;
				КонецЕсли;
			КонецЕсли;
			ТекСтрока.Картинка = ТекМетка.Картинка;
		КонецЕсли;
		НоваяСтрока.Картинка = ТекСтрока.Картинка;
	КонецЦикла;
	Возврат Результат;
КонецФункции // ПолучитьМеткиСтатьи()

// Получает HTML-тест - представление меток для указанной статьи для вывода в форме справочной информации.
// 
// Параметры 
// 	СтруктураСтатьиИ	 -	Структура              	 Структура соответстви статей и меток,
// 	Метки                                            а также ссылки на пиктограммы меток.
// 		Поля 
// 			СтатьиИМетки	 -	ТаблицаЗначений    	 Таблица соответствия статей и меток.
// 			Метки			 -	ТаблицаЗначений    	 Таблица меток с указанием путей к файлам пиктограмм.
// 			КартинкаПоУмол   -	Строка             	 Путь к файлу пиктограммы по умолчанию.
// 			чанию			 
// 	Статья				-	СправочникСсылка.бит   	 Статья, для которой получаем метки.
// 							_си_Статьи
// 	Размещение			-	Строка				   	 Где будет размежен текст меток:
// 														содержание:	В содержании справочной информации.
// 														допссылки:	В разделе дополнительных ссылок.
// 														заголовок:	В заголовке статьи справочной информации.
// 														поиск:		В результатах поиска.
// 	ВыводПоУмолчанию	-	ПеречислениеСсылка.		 Способ отображения метки по умолчанию, если способ для метки не указан
// 							бит_си_ВыводМеток.
// 	
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка         	 		 HTML-тест - представление меток.
// 
Функция ПолучитьHTMLТекстМеток(СтруктураСтатьиИМетки,
							   Статья,
							   Знач Размещение = "содержание",
							   Знач ВыводПоУмолчанию = Неопределено)
	Если НЕ (ТипЗнч(ВыводПоУмолчанию) = Тип("ПеречислениеСсылка.бит_си_ВыводМеток")
	   И ЗначениеЗаполнено(ВыводПоУмолчанию)) Тогда
		Если НРег(Размещение) = "содержание" Тогда
			ВыводПоУмолчанию = Перечисления.бит_си_ВыводМеток.Метка;
		ИначеЕсли НРег(Размещение) = "допссылки" Тогда
			ВыводПоУмолчанию = Перечисления.бит_си_ВыводМеток.НеВыводить;
		ИначеЕсли НРег(Размещение) = "заголовок" Тогда
			ВыводПоУмолчанию = Перечисления.бит_си_ВыводМеток.Ссылка;
		ИначеЕсли НРег(Размещение) = "поиск" Тогда
			ВыводПоУмолчанию = Перечисления.бит_си_ВыводМеток.Метка;
		КонецЕсли;
	КонецЕсли;
	Метки = ПолучитьМеткиСтатьи(СтатьиИМетки, Статья);
	ТекстМетки = "";
	Для Каждого ТекМетка Из Метки Цикл
		Если НРег(Размещение) = "содержание" Тогда
			ВыводМеток = ?(ТекМетка.Ссылка.ВыводитьВСодержании.Пустая(),
						   ВыводПоУмолчанию,
						   ТекМетка.Ссылка.ВыводитьВСодержании);
		ИначеЕсли НРег(Размещение) = "допссылки" Тогда
			ВыводМеток = ?(ТекМетка.Ссылка.ВыводитьВДопСсылках.Пустая(),
						   ВыводПоУмолчанию,
						   ТекМетка.Ссылка.ВыводитьВДопСсылках);
		ИначеЕсли НРег(Размещение) = "заголовок" Тогда
			ВыводМеток = ?(ТекМетка.Ссылка.ВыводитьВЗаголовке.Пустая(),
						   ВыводПоУмолчанию,
						   ТекМетка.Ссылка.ВыводитьВЗаголовке);
		ИначеЕсли НРег(Размещение) = "поиск" Тогда
			ВыводМеток = ?(ТекМетка.Ссылка.ВыводитьВРезультатахПоиска.Пустая(),
						   ВыводПоУмолчанию,
						   ТекМетка.Ссылка.ВыводитьВРезультатахПоиска);
		Иначе
			ВыводМеток = Перечисления.бит_си_ВыводМеток.Метка;
		КонецЕсли;
		
		Если ВыводМеток = Перечисления.бит_си_ВыводМеток.НеВыводить Тогда
			Продолжить;
		КонецЕсли;
		Если ВыводМеток = Перечисления.бит_си_ВыводМеток.Ссылка Тогда
			ТекстМетки = ТекстМетки +
			"&nbsp;" + "<a href=""ВнСсылка=" + СокрЛП(ТекМетка.Ссылка.УникальныйИдентификатор()) + """>" +
			"<img alt=""" + ТекМетка.Наименование + """ title=""" +
			ТекМетка.Наименование + """ src = """ + ТекМетка.Картинка + """ />" + "</a>";
		ИначеЕсли ВыводМеток = Перечисления.бит_си_ВыводМеток.Метка Тогда
			ТекстМетки = ТекстМетки +
			"&nbsp;" + "<img alt=""" + ТекМетка.Наименование + """ title=""" +
			ТекМетка.Наименование + """ src = """ + ТекМетка.Картинка + """ />";
		КонецЕсли;
	КонецЦикла;
	Возврат ТекстМетки;
КонецФункции // ПолучитьHTMLТекстМеток()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБЯЗАТЕЛЬНЫЙ КОД ИНИЦИАЛИЗАЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбязательныйКодИнициализацииОбработкиИсточникаСправочнойИнформации




#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЙ КОД ИНИЦИАЛИЗАЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныйКодИнициализацииОбработкиИсточникаСправочнойИнформации



ШаблонСтраницы	= СтрЗаменить(ПолучитьМакет("ШаблонСтраницы").ПолучитьТекст(),
							  "##Styles##",ПолучитьМакет("Стили").ПолучитьТекст());
БИТИнфо			= ПолучитьМакет("БИТИнфо").ПолучитьТекст();
ТекущаяСсылка	= Новый Структура("Заголовок, Ссылка, ПараметрОткрытия","Разделы справочной информации","#Главная", "");


#КонецОбласти

#КонецЕсли
