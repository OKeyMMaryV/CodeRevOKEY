////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

#Область ПеременныеМодуля




#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения



&НаКлиенте
// Разбирает текст ссылки на ИмяМенеджера, ИмяОбъекта и саму ссылку
// Используется при обработке ссылок на объекты информационной базы.
// 
// Параметры 
// 	ТекстСсылки        	 -	Строка                 	 Текст ссылки.                                                     
// Возвращаемое значение:
// 	Возврат ...        	 -	Структура              	 Структура ссылки для открытия объекта.                          
// 
Функция РазобратьСсылку(ТекстСсылки)
	
	
	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("ИмяМенеджера","");
	РезСтруктура.Вставить("ИмяОбъекта","");
	РезСтруктура.Вставить("Ссылка","");
	РезСтруктура.Вставить("ИмяОбъектаДляФорм","");
	
	Стр = ТекстСсылки;
	
	Позиция = Найти(Стр,"@");
	
	Если Позиция>0 Тогда
	
		РезСтруктура.ИмяМенеджера = Лев(Стр,Позиция-1);
		Стр = Сред(Стр,Позиция+1);
		
		Позиция = Найти(Стр,"@");
		Если Позиция>0 Тогда
			РезСтруктура.ИмяОбъекта = Лев(Стр,Позиция-1);
			РезСтруктура.Ссылка     = Сред(Стр,Позиция+1);
		КонецЕсли; 
	
	КонецЕсли; 
	РезСтруктура.ИмяОбъектаДляФорм = ?(РезСтруктура.ИмяМенеджера = "Документы","Документ",
									   ?(РезСтруктура.ИмяМенеджера = "Справочники","Справочник",
									     ?(РезСтруктура.ИмяМенеджера = "ПланыВидовХарактеристик","ПланВидовХарактеристик",
										   ?(РезСтруктура.ИмяМенеджера = "ПланыВидовРасчета","ПланВидовРасчета",
										     ?(РезСтруктура.ИмяМенеджера = "ПланыСчетов","ПланСчетов",
											   ?(РезСтруктура.ИмяМенеджера = "ПланыОбмена","ПланОбмена",""))))));
	
    Возврат РезСтруктура;
КонецФункции // РазобратьСсылку()

&НаСервере
// Выполняет проверку текста кода и выводит результат в поле HTML документа.
// 
Процедура ВыполнитьПроверкуИВывестиРезультат()
	Результат = "";
	МассивОбъектов = ОбъектыПривязки.Выгрузить().ВыгрузитьКолонку("Значение");
	Попытка
		Выполнить(КодПолученияТекстаОбъекта);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	ШаблонСтраницы	= СтрЗаменить(Обработки.бит_си_ИсточникСправочникСтатьи.ПолучитьМакет("ШаблонСтраницы").ПолучитьТекст(),
								  "##Styles##", Обработки.бит_си_ИсточникСправочникСтатьи.ПолучитьМакет("Стили").ПолучитьТекст());
	БиблиотекиJS = Новый Структура("jquery", "<!--
											 |" + Обработки.бит_си_ИсточникСправочникСтатьи.ПолучитьМакет("Скрипты").ПолучитьТекст()
										   + "// -->");
	ШаблонСтраницы = СтрЗаменить(ШаблонСтраницы, "##Libs##", "<script language=""javascript"">"+ БиблиотекиJS.jquery +"</script>");
	ТекстСодержания = СтрЗаменить(ШаблонСтраницы, "##Content##","
			  		  |<div style=""padding-top: 20px;width: 300 px;text-indent: 0pt;border-bottom: gray thin solid;"">
			  		  |<P style=""FONT-FAMILY: Verdana;MARGIN: 8pt 0pt; COLOR: #666666; FONT-WEIGHT: bold;FONT-SIZE: 8pt;"">
			  		  |<a id=""linkedtype1title""
					  | style=""padding-left:1px;padding-right:1px;vertical-align:middle;text-align:center;text-decoration:none;
					  |border: #666666 1px solid;FONT-FAMILY: Verdana;COLOR: #666666;FONT-SIZE: 8pt;""
			  		  |onclick=""expandit('linkedtype1title', 'linkedtype1');""
					  | href=""javascript:// "">+</a>&nbsp;" + ЗаголовокОбъектаПривязки
					+ "</P></div><div id=""linkedtype1"" style=""display:none"">" + Результат + "</div>");
	Результат = ТекстСодержания;
КонецПроцедуры // ВыполнитьПроверкуИВывестиРезультат()

&НаСервереБезКонтекста
// Получает имя открываемой формы и при необходимости записывает открываемую ссылку.
// 
// Параметры 
// 	РезСтруктура       	 -	Структура              	 Структура ссылки.
// 	ОткрываемаяСсылка  	 -	Неопределено           	 Неопределено, при необходимости записывается ссылка.
// Возвращаемое значение:
// 	Возврат ИмяФормы   	 -	Строка              	 Имя формы для открытия.
// 	ДляОткрытия.
// 
Функция ПолучитьОткрываемойИмяФормы(РезСтруктура,ОткрываемаяСсылка = Неопределено)
	МетаданныеТипа = Метаданные[РезСтруктура.ИмяМенеджера];
	МетаданныеОбъекта = МетаданныеТипа[РезСтруктура.ИмяОбъекта];
	Если МетаданныеОбъекта = Неопределено Тогда 
		Возврат "";	
	КонецЕсли;
		
	Если РезСтруктура.Ссылка = "ФормаСписка" Тогда
		
		ИмяФормыДляОткрытия = МетаданныеОбъекта.ОсновнаяФормаСписка.Имя;
		
	ИначеЕсли РезСтруктура.Ссылка = "Форма" Тогда
		
		ИмяФормыДляОткрытия = МетаданныеОбъекта.ОсновнаяФормаОбъекта.Имя;
		
	Иначе
		
		Менеджер = бит_си_ИсточникСправочникСтатьи.ПолучитьМенеджер(РезСтруктура.ИмяМенеджера);
		ВремИд = Новый УникальныйИдентификатор(РезСтруктура.Ссылка);
		ТекущаяСсылка = Менеджер[РезСтруктура.ИмяОбъекта].ПолучитьСсылку(ВремИд);
		ОткрываемаяСсылка = ТекущаяСсылка;
		Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		
			ИмяФормыДляОткрытия = МетаданныеОбъекта.ОсновнаяФормаОбъекта.Имя;
		
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ИмяФормыДляОткрытия;
КонецФункции // ПолучитьОткрываемойИмяФормы()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.

#Область ПроцедурыОбработчикиСобытийЭлементовФормы



&НаКлиенте
// Процедура обработчик - события "ПриНачалеРедактирования" табличного поля "ОбъектыПривязки".
// 
Процедура ОбъектыПривязкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Попытка
			Элементы.ОбъектыПривязки.ТекущиеДанные.Значение = Новый (ТипОбъектаПривязки.Типы()[0]);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // ОбъектыПривязкиПриНачалеРедактирования()

&НаКлиенте
// Процедура обработчик - события "onclick" поля HTML-Документа "ПолеHTMLДокументаРезультат".
// 
Процедура РезультатПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтруктураСсылки = Неопределено;
	СтандартнаяОбработка = Ложь;
	Если ДанныеСобытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	// 
	htmlElement = ДанныеСобытия.Element;
	// 
	Пока htmlElement <> Неопределено И ВРег(htmlElement.tagName) <> "A" Цикл
		htmlElement = htmlElement.parentElement;
	КонецЦикла;
	// 
	Если htmlElement = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// 
	Позиция = Найти(htmlElement.href, "Выполнить=");
	// 
	Если Позиция > 0 Тогда
	// 
		Попытка
			Выполнить(Сред(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href), Позиция + 10));
		Исключение
			ПоказатьПредупреждение(,"При выполении действия произошла ошибка!")
		КонецПопытки;
		
		Возврат;
		
	КонецЕсли;
	
	// Обрабатываем ссылки на списки, отчеты и обработки, а также ссылочные объекты.
	
	Позиция = Найти(htmlElement.href, "ОбъектКонфигурации=");
	
	Если Позиция > 0 Тогда
			ФормаДляОткрытия = Неопределено;
			ВнСсылка = Сред(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href), Позиция + 19);
			РезСтруктура = РазобратьСсылку(ВнСсылка);
			ОткрываемаяСсылка = Неопределено;
			Если НЕ ПустаяСтрока(РезСтруктура.ИмяМенеджера) И НЕ ПустаяСтрока(РезСтруктура.ИмяОбъекта) Тогда
				ИмяФормыОткрываемой = ПолучитьОткрываемойИмяФормы(РезСтруктура,ОткрываемаяСсылка);
			
			КонецЕсли; 
			Попытка
				Если РезСтруктура.Ссылка = "ФормаСписка" Тогда
					Попытка
						ФормаДляОткрытия = ПолучитьФорму(РезСтруктура.ИмяОбъектаДляФорм+"."+РезСтруктура.ИмяОбъекта+".ФормаСписка",
														 ,
														 ЭтаФорма);
					Исключение
						ФормаДляОткрытия = ПолучитьФорму(РезСтруктура.ИмяОбъектаДляФорм + "." + РезСтруктура.ИмяОбъекта +
																													".Форма." + ИмяФормыОткрываемой,
														 ,
														 ЭтаФорма);
					КонецПопытки;
					
				Иначе
					Попытка
						ФормаДляОткрытия = ПолучитьФорму(РезСтруктура.ИмяОбъектаДляФорм+"."+РезСтруктура.ИмяОбъекта+".ФормаОбъекта",
														 Новый Структура("Ключ",ОткрываемаяСсылка),
														 ЭтаФорма);
  				    Исключение
						ФормаДляОткрытия = ПолучитьФорму(РезСтруктура.ИмяОбъектаДляФорм + "." + РезСтруктура.ИмяОбъекта +
																													".Форма." + ИмяФормыОткрываемой,
														 Новый Структура("Ключ",ОткрываемаяСсылка),
														 ЭтаФорма);
					КонецПопытки;
				КонецЕсли;
				ФормаДляОткрытия.Доступность = Ложь;
				ФормаДляОткрытия.Открыть();
				
			Исключение
				ПоказатьПредупреждение(,"При выполении действия произошла ошибка!")
			КонецПопытки;
		
		Возврат;
		
	КонецЕсли;
	
	 Если htmlElement.protocol = "http:" Тогда
		
		ЗапуститьПриложение(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(htmlElement.href));
		
		Возврат;
		
	КонецЕсли;
КонецПроцедуры // РезультатПриНажатии()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ.

#Область ПроцедурыДействияКомандныхПанелейФормы




&НаКлиенте
// Процедура обработчик - события "Нажатие" кнопки "Выполнить" командной панели "КоманднаяПанель1".
// 
Процедура ВыполнитьПроверку(Команда)
	ВыполнитьПроверкуИВывестиРезультат();
КонецПроцедуры // ВыполнитьПроверку()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ПроцедурыОбработчикиСобытийФормы



&НаКлиенте
// Процедура обработчик - события формы "ПриОткрытии".
// 
Процедура ПриОткрытии(Отказ)
	Элементы.ОбъектыПривязки.ПодчиненныеЭлементы.ОбъектыПривязкиЗначение.ОграничениеТипа = ТипОбъектаПривязки;
	Элементы.ОбъектыПривязки.ПодчиненныеЭлементы.ОбъектыПривязкиЗначение.ВыбиратьТип     = Ложь;
КонецПроцедуры // ПриОткрытии()



#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

#Область ОператорыОсновнойПрограммы

#КонецОбласти

