////////////////////////////////////////////////////////////////////////////////
// ОБЯЗАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбязательныеПеременныеОбработкиИсточникаСправочнойИнформации




#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПЕРЕМЕННЫЕ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныеПеременныеОбработкиИсточникаСправочнойИнформации



// Перем <ИмяПеременной> [Экспорт];


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения



&НаКлиенте
// Сравнивает 2 ссылки. Структура ссылки определяется разработчиком обработки источника справочной информации.
// 
// Параметры 
// 	Ссылка1            	 -	Структура              	 Ссылка для сравнения                                             
// 	Ссылка2            	 -	Структура              	 Ссылка для сравнения                                             
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - ссылки равны; Ложь - ссылки не равны;                   
// 
Функция СсылкиРавны(Ссылка1,Ссылка2) Экспорт
	Если НЕ Ссылка1.Ссылка = Ссылка2.Ссылка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Ссылка1.ПараметрОткрытия = Ссылка2.ПараметрОткрытия Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции // СсылкиРавны()

&НаКлиенте
// Заполняет дерево разделов поиска
// 
// Параметры
// 
Процедура ЗаполнитьДеревоРазделов() Экспорт
	ЗаполнитьДеревоРазделовНаСервере();
КонецПроцедуры // ЗаполнитьДеревоРазделов()

&НаКлиенте
// Выполняет переход по переданной ссылке.
// 
// Параметры 
// 	СтруктураСсылки    	 -	Структура              	 Структура ссылки, состав определяется разработчиком.              
// 
Процедура ПерейтиПоСсылке(СтруктураСсылки = Неопределено) Экспорт
	
	Если СтруктураСсылки.Ссылка = "#Главная" Тогда
		ВремПараметр = СтруктураСсылки.ПараметрОткрытия;
		ЗагрузитьГлавнуюСтраницу(ВремПараметр);
	Иначе
		ВремТекст = ПолучитьТекстПоСсылке(СтруктураСсылки);
		ВладелецФормы[оп_ИмяЗакладкиИсточника+"_Текст"] = ВремТекст;
	КонецЕсли;
КонецПроцедуры // ПерейтиПоСсылке()

&НаКлиенте
// Выполняет полнотекстовый поиск для текущего источника справочной информации.
// 
// Параметры 
// 	СтрокаПоиска       	 -	Строка                 	 Текст поискового запроса.                                         
// 
Процедура ВыполнитьПоиск(СтрокаПоиска) Экспорт
	
	ТекстОшибки = "";
	КоличествоРезультатов = 0;
	ТекстРезультата = ПолучитьТекстРезультатовПоиска(СтрокаПоиска, КоличествоРезультатов, ТекстОшибки);
	
	Если НЕ ТекстОшибки = "" Тогда
		ПоказатьПредупреждение(,ТекстОшибки, 20);
		Возврат;
	КонецЕсли;
	
	Если КоличествоРезультатов = 0 Тогда
		ТекстРезультата = "По запросу """ + СтрокаПоиска + """ результаты не найдены.";
	КонецЕсли;
	
	ВладелецФормы[оп_ИмяЗакладкиИсточника+"_ТекстРезультатаПоиска"] = ТекстРезультата;
	ВладелецФормы.Элементы[оп_ИмяЗакладкиИсточника+"_РезультатыПоиска"].Заголовок =
		оп_ИсточникСИЗаголовок + " (" + СокрЛП(КоличествоРезультатов) + ")";
	
КонецПроцедуры // ВыполнитьПоиск()

&НаСервере
// Выполняет полнотекстовый поиск статей справочной информации и возвращает текст результатов поиска.
// 
// Параметры 
// 	СтрокаПоиска       	 -	Строка                 	 Текст поискового запроса.
// 	Количество			 -	Число                 	 Количество найденных результатов.
// 	Результатов
// 	ТекстОшибки       	 -	Строка                 	 Текст сообщения об ошибке.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 Текст результатов поиска.
// 
Функция ПолучитьТекстРезультатовПоиска(СтрокаПоиска, КоличествоРезультатов = 0, ТекстОшибки = "")
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
		ТекстОшибки = "В текущей информационной базе отключена возможность полнотекстового поиска." +
					  Символы.ПС +
					  "Для включения поиска обратитесь к администратору.";
		Возврат "";
	КонецЕсли;
	
	СписокРазделов = РеквизитФормыВЗначение("оп_ДеревоРазделовПоиска");
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 2000);
	СписокПоиска.ПолучатьОписание = Ложь;
	
	МассивМД = Новый Массив();
	МассивМД.Добавить(Метаданные.Справочники.бит_си_Статьи);
	
	СписокПоиска.ОбластьПоиска = МассивМД;
	СписокПоиска.СтрокаПоиска = СтрокаПоиска;
	СписокПоиска.РазмерПорции = 2000;
	СписокПоиска.ПерваяЧасть();
	Колво = СписокПоиска.ПолноеКоличество();
	Если Колво = 0 Тогда
		ТекстРезультата = "По запросу """ + СтрокаПоиска + """ результаты не найдены.";
		ТекстРезультата = СтрЗаменить(дп_ШаблонСтраницы, "##Content##","
													 |" + ТекстРезультата + "
													 |" + дп_БИТИнфо);
		КоличествоРезультатов = 0;											 
		Возврат ТекстРезультата;
	КонецЕсли;
	
	Разделы = СписокРазделов.Строки.Найти("Группы статей справки", "Раздел", Ложь);
	Разделы = ?(Разделы = Неопределено, Новый ДеревоЗначений(), Разделы);
	
	СписокМеток = Новый Массив();
	ВремСписокМеток = СписокРазделов.Строки.Найти("Метки статей справки", "Раздел", Ложь);
	ВремСписокМеток = ?(ВремСписокМеток = Неопределено, Новый ДеревоЗначений(), ВремСписокМеток);
	Для Каждого ТекМетка Из ВремСписокМеток.Строки Цикл
		Если НЕ ТекМетка.Пометка = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ТекМетка.ПараметрыРаздела.Ссылка.ЭтоГруппа Тогда
			СписокМеток.Добавить(ТекМетка.ПараметрыРаздела.Ссылка);
			Продолжить;
		КонецЕсли;
		Для Каждого ТекМеткаВГруппе Из ТекМетка.Строки Цикл
			Если НЕ ТекМеткаВГруппе.Пометка = 1 Тогда
				Продолжить;
			КонецЕсли;
			СписокМеток.Добавить(ТекМеткаВГруппе.ПараметрыРаздела.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	ОтобранныеСтатьи = ПолучитьСтатьиПоОтборам();
	
	СписокСтатей = Новый ТаблицаЗначений();
	СписокСтатей.Колонки.Добавить("Статья", Новый ОписаниеТипов("СправочникСсылка.бит_си_Статьи"));
	СписокСтатей.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Для инд = 0 По Колво-1 Цикл
		ТекЗначение = СписокПоиска.Получить(инд);
		Если НЕ ТипЗнч(ТекЗначение.Значение) = Тип("СправочникСсылка.бит_си_Статьи") Тогда
			Продолжить;
		КонецЕсли;	 
		НайденнаяСтатья = СписокСтатей.Найти(ТекЗначение.Значение, "Статья");
		Если НЕ НайденнаяСтатья = Неопределено Тогда
			НайденнаяСтатья.Количество = НайденнаяСтатья.Количество + 1;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОтобранныеСтатьи = Неопределено Тогда
			Если ОтобранныеСтатьи.Найти(ТекЗначение.Значение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НеВходитВОтбор = НЕ (Разделы.Строки.Количество() = 0);
		Для Каждого ТекРаздел Из Разделы.Строки Цикл
			Если НЕ ТекРаздел.Пометка = 1 Тогда
				Продолжить;
			КонецЕсли;
			Если ТекЗначение.Значение.ПринадлежитЭлементу(ТекРаздел.Ссылка) Тогда
				НеВходитВОтбор = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НеВходитВОтбор Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтатья = СписокСтатей.Добавить();
		НайденнаяСтатья.Статья = ТекЗначение.Значение;
		НайденнаяСтатья.Количество = 1;
	КонецЦикла;
	
	ЗапросПоМеткам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                              |	СписокСтатей.Статья,
	                              |	СписокСтатей.Количество
	                              |ПОМЕСТИТЬ СписокСтатей
	                              |ИЗ
	                              |	&СписокСтатей КАК СписокСтатей
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                              |	СписокСтатей.Статья,
	                              |	СписокСтатей.Количество
	                              |ИЗ
	                              |	СписокСтатей КАК СписокСтатей
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_си_УстановленныеМеткиСтатей КАК УстановленныеМеткиСтатей
	                              |		ПО СписокСтатей.Статья = УстановленныеМеткиСтатей.Статья
	                              |			И (УстановленныеМеткиСтатей.Метка ССЫЛКА Справочник.бит_си_МеткиСтатей)
	                              |ГДЕ
	                              |	(УстановленныеМеткиСтатей.Метка В (&Метки)
	                              |			ИЛИ &БезМеток)");
	ЗапросПоМеткам.УстановитьПараметр("СписокСтатей", СписокСтатей);
	ЗапросПоМеткам.УстановитьПараметр("Метки", СписокМеток);
	ЗапросПоМеткам.УстановитьПараметр("БезМеток", СписокМеток.Количество() = 0);
	СписокСтатей = ЗапросПоМеткам.Выполнить().Выгрузить();
	Колво = СписокСтатей.Количество();
	КоличествоРезультатов = Колво;											 
	Если Колво = 0 Тогда
		ТекстРезультата = "По запросу """ + СтрокаПоиска + """ результаты не найдены.";
	Иначе
		МассивСловЗапроса = бит_си_ОбщегоНазначения.СтрокаСРазделителямиВМассив(СтрокаПоиска, " ");
		ТекстРезультата = "<TABLE width=""100%"">";
		инд=0;
		Для Каждого НайденнаяСтатья Из СписокСтатей Цикл
			инд=инд+1;
			
			ТекстМетки = ПолучитьHTMLТекстМеток(НайденнаяСтатья.Статья, "поиск");
			
			ТекстРезультата = ТекстРезультата + "<TR><td style=""border-bottom: gray thin solid; padding-bottom: 10px;
												|padding-top: 10px;font-size:10pt"">
	                    						|"+СокрЛП(инд)+". <strong><a href=""ВнСсылка=" +
												СокрЛП(НайденнаяСтатья.Статья.УникальныйИдентификатор()) + """>" +
												СокрЛП(НайденнаяСтатья.Статья.НазваниеСтатьи)+"</a></strong>
	                    						|<div style=""text-indent:20pt;font-size:8pt;""><em>" +
												ПолучитьАнонсСтатьи(МассивСловЗапроса, НайденнаяСтатья.Статья.ТекстHTML)+"</em></div><br/>" + ТекстМетки;
												
			ТекРодитель = НайденнаяСтатья.Статья.Родитель;
			СтрокаРодитель = "";
			Пока НЕ ТекРодитель.Пустая() Цикл
				СтрокаРодитель = "<a href=""ВнСсылка=" + СокрЛП(ТекРодитель.УникальныйИдентификатор()) +
								 """>" + СокрЛП(ТекРодитель.Наименование)+"</a>" +
								 ?(СтрокаРодитель = "",""," / ") + СтрокаРодитель;
				ТекРодитель = ТекРодитель.Родитель;
			КонецЦикла;
			
			Если НЕ СтрокаРодитель = "" Тогда
				ТекстРезультата = ТекстРезультата + "<div style=""text-indent:20pt;font-size:8pt;"">" + СтрокаРодитель + "</div>";
			КонецЕсли;
			
			ТекстРезультата = ТекстРезультата + "</td></TR>";
		КонецЦикла;
		ТекстРезультата = ТекстРезультата + "</TABLE>";
	КонецЕсли;
	
	ТекстРезультата = СтрЗаменить(дп_ШаблонСтраницы, "##Content##","
													 |" + ТекстРезультата + "
													 |" + дп_БИТИнфо);
	Возврат ТекстРезультата;
КонецФункции // ПолучитьТекстРезультатовПоиска()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ РАЗМЕРОМ ШРИФТА.

#Область ПроцедурыИФункцииУправленияРазмеромШрифта



&НаКлиенте
// Возвращает размер шрифта, относительно которого происходят изменения
// так же является размером шрифта по умолчанию.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Число                  	 Размер шрифта.
// 
Функция БазовыйРазмерШрифта() Экспорт
	Возврат 0;
КонецФункции // БазовыйРазмерШрифта()

&НаКлиенте
// Возвращает соответствие единиц измерения размеров шрифта и шага изменения размера.
// 
// Параметры 
// Возвращаемое значение:
// 	Возврат ...        	 -	Соответствие           	 Соответствие единиц измерения и шага размера шрифта.              
// 
Функция ПолучитьСтруктуруРазмеровИЕдиниц() Экспорт
	РазмерыИЕдиницы = Новый Соответствие();
	РазмерыИЕдиницы.Вставить("ПоУмолчанию"	, 2);
	РазмерыИЕдиницы.Вставить("pt"			, 2);
	РазмерыИЕдиницы.Вставить("FONT"			, 1);
	Возврат РазмерыИЕдиницы;
КонецФункции // ПолучитьСтруктуруРазмеровИЕдиниц()

&НаКлиенте
// Возвращает базовую доступность кнопок управления размером шрифта,
// а также верхнее и нижнее ограничение на размер шрифта.
// 
// Параметры 
// 	ОграничениеМакс    	 -	Число                  	 Верхнее ограничение размера шрифта.                              
// 	ОграничениеМин     	 -	Число                  	 Нижнее ограничение размера шрифта.                                
// Возвращаемое значение:
// 	Возврат ...        	 -	Булево                 	 Истина - кнопки размера доступны; Ложь - не доступны.             
// 
Функция ДоступностьКнопокРазмерШрифта(ОграничениеМакс, ОграничениеМин) Экспорт
	ОграничениеМакс = 3;
	ОграничениеМин = -2;
	Возврат Истина;
КонецФункции // ДоступностьКнопокРазмерШрифта()

&НаКлиенте
// Обработчик изменения размера шрифта в форме справочной информации
// применяется если необходимо дополнить или заменить стандартную обработку.
// 
// Параметры 
// 	РазмерШрифта       	 -	Число                  	 Размер шрифта после изменения.                                    
// 	Изменение          	 -	Число                  	 Направление изменения: 1 - увеличить; 0 - не изменять; -1 -      
// 	                   	  	                       	 уменьшить.                                                       
// 	Открытие           	 -	Булево                 	 Признак открытия закладки: Истина - устанавливаем размер в момент
// 	                   	  	                       	 открытия закладки; Ложь - просто изменяем размер.                
// 	ПродолжитьОбработку	 -	Булево                 	 Признак продолжения обработки стандартным обработчиком формы     
// 	                   	  	                       	 справочной информации: Истина - продолжить обработку; Ложь - не  
// 	                   	  	                       	 продолжать.                                                      
// 
Процедура ИзменитьРазмерШрифта(РазмерШрифта, Изменение, Открытие, ПродолжитьОбработку = Истина) Экспорт
	ПродолжитьОбработку = Истина;
КонецПроцедуры // ИзменитьРазмерШрифта()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ ОБРАБОТКИ СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийФормыОбработкиСправочнойИнформации



&НаКлиенте
// Вызывается при регистрации источника с справочнике источников справочной информации.
// 
// Параметры 
// 	ИсточникСИ         	 -	СправочникСсылка.бит_си	 Источник справочной информации, связанный с закладкой            
// 	                   	  	_Источники.             	                                                                  
// 
Процедура ОбработчикСобытияРегистрацияИсточника(ИсточникСИ) Экспорт

#КонецОбласти

	#Если Клиент Тогда
		
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияРегистрацияИсточника()

&НаКлиенте
// Вызывается при открытии формы справочной информации и создании закладки текущего источника.
// 
// Параметры 
// 	ПараметрОткрытия   	 -	Произвольный           	 Дополнительный параметр, который может быть обработан в          
// 	                   	  	                       	 данной процедуре.                                                  
// 
Процедура ОбработчикСобытияПриОткрытииЗакладки(ПараметрОткрытия = Неопределено) Экспорт
	Если ТипЗнч(ПараметрОткрытия) = Тип("СправочникСсылка.бит_си_Статьи")
	   И НЕ ЭтоГруппа(ПараметрОткрытия) Тогда
		ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия",
										ПолучитьЗаголовок(ПараметрОткрытия), ПараметрОткрытия);
	Иначе
		ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия",
										"Стартовая страница","#Главная", ПараметрОткрытия);
	КонецЕсли;
	ПерейтиПоСсылке(ВремСтруктура);
	
КонецПроцедуры // ОбработчикСобытияПриОткрытииЗакладки()

&НаКлиенте
// Вызывается при изменении видимости закладки источника в форме справочной информации.
// 
Процедура ОбработчикСобытияПриИзмененииВидимостиЗакладки() Экспорт
	#Если Клиент Тогда
	// Код обработчика
	
	#КонецЕсли
КонецПроцедуры // ОбработчикСобытияПриИзмененииВидимостиЗакладки()

&НаКлиенте
// Вызывается при переходе на закладку текущего источника.
// 
Процедура ОбработчикСобытияПриАктивизацииСтраницы() Экспорт
	// #Если Клиент Тогда
	// ДоступностьКнопокКоманднойПанели();
	// #КонецЕсли
КонецПроцедуры // ОбработчикСобытияПриАктивизацииСтраницы()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ HTML-ДОКУМЕНТА ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийПоляHtmlДокументаИсточникаСправочнойИнформации



&НаКлиенте
// Вызывается из обработчика события "ПриНажатии" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеФормы		      	 Поле HTML-документа закладки источника;                          
// 	                   	  	                       	 Значение параметра "Элемент" обработчика события
// 	                   	  	                       	 "ПриНажатии"поляHTML-документа закладки источника СИ.
// 	ДанныеСобытия      	 -	Структура              	 Структура параметров события; Значение параметра "ДанныеСобытия"
// 	                   	  	                       	 обработчика события "ПриНажатии" поля HTML-документа закладки
// 													 источника СИ.
// 	Стандартная      	 -	Булево              	 Структура параметров события; Значение параметра "СтандартнаяОбработка"
// 	Обработка          	  	                       	 обработчика события "ПриНажатии" поля HTML-документа закладки
// 													 источника СИ.
// 	ПродолжитьОбработку	 -	Булево                 	 Истина - продолжить стандартную обработку; Ложь - не продолжать.
// 
Процедура ОбработчикСобытияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка, ПродолжитьОбработку = Истина) Экспорт
	href = ПодготовитьСтроку(ДанныеСобытия.href);
	
	Если НЕ ЗначениеЗаполнено(href) Тогда
		Попытка
			ДанныеСобытия.Event.preventDefault();
		Исключение
			ДанныеСобытия.Event.returnValue = Ложь;
		КонецПопытки;
		ПродолжитьОбработку = Ложь;
		Возврат;
	КонецЕсли;
	
	Позиция = Найти(href, "Выполнить=");
	Если Позиция > 0 Тогда
		
		#Если НЕ ВебКлиент Тогда
		Попытка
			Выполнить(Сред(href, Позиция + 10));
		Исключение
			ПоказатьПредупреждение(,"При выполении действия произошла ошибка!" + ОписаниеОшибки())
		КонецПопытки;
		#КонецЕсли
		
		Попытка
			ДанныеСобытия.Event.preventDefault();
		Исключение
			ДанныеСобытия.Event.returnValue = Ложь;
		КонецПопытки;
		Возврат;
		
	КонецЕсли;
	
	Позиция = Найти(href, "ВнСсылка=");
	Если Позиция > 0 Тогда
		
		Попытка
			ВнСсылка = Сред(href, Позиция + 9);
			ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия", "", ВнСсылка, "");
			ПерейтиПоСсылке(ВремСтруктура);
		Исключение
			ПоказатьПредупреждение(,"При выполении действия произошла ошибка!" + ОписаниеОшибки());
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
		Попытка
			ДанныеСобытия.Event.preventDefault();
		Исключение
			ДанныеСобытия.Event.returnValue = Ложь;
		КонецПопытки;
		Возврат;
		
	КонецЕсли;
	
	// Обрабатываем ссылки на списки, отчеты и обработки, а также ссылочные объекты.
	
	Позиция = Найти(href, "ОбъектКонфигурации=");
	
	Если Позиция > 0 Тогда
		ФормаДляОткрытия = Неопределено;
		ВнСсылка = Сред(ПодготовитьСтроку(href), Позиция + 19);
		РезСтруктура = РазобратьСсылку(ВнСсылка);
		
		Попытка
			Если НЕ ПустаяСтрока(РезСтруктура.ИмяМенеджера) И НЕ ПустаяСтрока(РезСтруктура.ИмяОбъекта) Тогда
				Если РезСтруктура.Ссылка = "ФормаСписка" Тогда
					ФормаДляОткрытия = ПолучитьФорму(ПолучитьВидОбъекта(РезСтруктура.ИмяМенеджера) + "." +
													 РезСтруктура.ИмяОбъекта + ".ФормаСписка");
				ИначеЕсли РезСтруктура.Ссылка = "Форма" Тогда
					
					// Изменение кода. Начало. 23.06.2015{{
					Если РезСтруктура.ИмяМенеджера = "ОбщиеФормы" Тогда
						
						ФормаДляОткрытия = ПолучитьФорму("ОбщаяФорма."+РезСтруктура.ИмяОбъекта);
						
					Иначе	
					// Изменение кода. Конец. 23.06.2015}}	
							
						ФормаДляОткрытия = ПолучитьФорму(ПолучитьВидОбъекта(РезСтруктура.ИмяМенеджера) + "." +
														 РезСтруктура.ИмяОбъекта + ".Форма");
							
					КонецЕсли;
					
				Иначе
					ТекущаяСсылка = ПолучитьСсылкуПоИдентификатору(РезСтруктура.ИмяМенеджера,
																   РезСтруктура.ИмяОбъекта,
																   РезСтруктура.Ссылка);
					Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
						ФормаДляОткрытия = ПолучитьФорму(ПолучитьВидОбъекта(РезСтруктура.ИмяМенеджера) + "." +
														 РезСтруктура.ИмяОбъекта + ".ФормаОбъекта",
														 Новый Структура("Ключ", ТекущаяСсылка));
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		
			Если ФормаДляОткрытия <> Неопределено Тогда
			
				  ФормаДляОткрытия.Открыть();
			
			КонецЕсли; 
		Исключение
			Ошибка = ОписаниеОшибки();
			ПоказатьПредупреждение(,"При выполении действия произошла ошибка!
						   |Не удалось открыть объект """ + ВнСсылка + """.");
		КонецПопытки;
		
		Попытка
			ДанныеСобытия.Event.preventDefault();
		Исключение
			ДанныеСобытия.Event.returnValue = Ложь;
		КонецПопытки;
		Возврат;
		
	КонецЕсли;
	
	Если Лев(href, 5) = "http:" Тогда
		
		#Если НЕ ВебКлиент Тогда
		ЗапуститьПриложение(бит_си_ИсточникСправочникСтатьи.ПодготовитьСтроку(href));
		Попытка
			ДанныеСобытия.Event.preventDefault();
		Исключение
			ДанныеСобытия.Event.returnValue = Ложь;
		КонецПопытки;
		#КонецЕсли
		 
		Возврат;
		
	КонецЕсли;
	ДанныеСобытия.Event.returnValue = Истина;
КонецПроцедуры // ОбработчикСобытияПриНажатии()

&НаКлиенте
// Вызывается из обработчика события "ДокументСформирован" поля HTML-документа закладки источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеФормы		      	 Поле HTML-документа закладки источника; Значение параметра       
// 	                   	  	                       	 "Элемент" обработчика события "ДокументСформирован" поля         
// 	                   	  	                       	 HTML-документа закладки источника СИ.                             
// 	СтруктураСсылки    	 -	Структура              	 Структура ссылки.                                                 
// 	ДобавлятьВИсторию  	 -	Булево                 	 Истина - добавить текущую ссылку в историю; Ложь - не добавлять.  
// 
Процедура ОбработчикСобытияДокументСформирован(Элемент, СтруктураСсылки, ДобавлятьВИсторию) Экспорт
	// ДоступностьКнопокКоманднойПанели();
	СтруктураСсылки = дп_ТекущаяСсылка;
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ РЕЗУЛЬТАТОВ ПОИСКА ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийПоляРезультатовПоискаИсточникаСправочнойИнформации



&НаКлиенте
// Вызывается из обработчика события "ДокументСформирован" поля результатов поиска источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеФормы		      	 Поле результатов поиска закладки поиска источника; Значение      
// 	                   	  	                       	 параметра"Элемент" обработчика события "ДокументСформирован" поля
// 	                   	  	                       	 результатов поиска закладки поиска источника.                     
// 
Процедура ОбработчикСобытияДокументСформированРезультатаПоиска(Элемент) Экспорт
	
КонецПроцедуры // ОбработчикСобытияДокументСформированРезультатаПоиска()

&НаКлиенте
// Вызывается из обработчика события "ПриНажатии" поля результатов поиска источника справочной информации.
// 
// Параметры 
// 	Элемент            	 -	ПолеФормы		      	 Поле HTML-документа закладки источника;                          
// 	                   	  	                       	 Значение параметра "Элемент" обработчика события
// 	                   	  	                       	 "ПриНажатии" поля результатов поиска источника СИ.
// 	ДанныеСобытия      	 -	Структура              	 Структура параметров события; Значение параметра "ДанныеСобытия"
// 	                   	  	                       	 обработчика события "ПриНажатии" поля результатов поиска закладки
// 													 источника СИ.
// 	Стандартная      	 -	Булево              	 Структура параметров события; Значение параметра "СтандартнаяОбработка"
// 	Обработка          	  	                       	 обработчика события "ПриНажатии" поля результатов поиска закладки
// 													 источника СИ.
// 	ПродолжитьОбработку	 -	Булево                 	 Истина - продолжить стандартную обработку; Ложь - не продолжать.
// 
Процедура ОбработчикСобытияПриНажатииРезультатаПоиска(Элемент, ДанныеСобытия, СтандартнаяОбработка, ПродолжитьОбработку = Истина) Экспорт
	href = ПодготовитьСтроку(ДанныеСобытия.href);
	
	Если НЕ ЗначениеЗаполнено(href) Тогда
		Попытка
			ДанныеСобытия.Event.preventDefault();
		Исключение
			ДанныеСобытия.Event.returnValue = Ложь;
		КонецПопытки;
		ПродолжитьОбработку = Ложь;
		Возврат;
	КонецЕсли;
	
	Позиция = Найти(href, "ВнСсылка=");
	
	Если Позиция > 0 Тогда
		
		Попытка
			ВнСсылка = Сред(ПодготовитьСтроку(href), Позиция + 9);
			ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия","",ВнСсылка, "");
			ПерейтиПоСсылке(ВремСтруктура);
		Исключение
			ПродолжитьОбработку = Ложь;
			ПоказатьПредупреждение(,"При выполении действия произошла ошибка!");
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
		Попытка
			ДанныеСобытия.Event.preventDefault();
		Исключение
			ДанныеСобытия.Event.returnValue = Ложь;
		КонецПопытки;
		Возврат;
		
	КонецЕсли;
	
	Если Лев(href, 5) = "http:" Тогда
		

#КонецОбласти

		#Если НЕ ВебКлиент Тогда
		ЗапуститьПриложение(ПодготовитьСтроку(href));
		Попытка
			ДанныеСобытия.Event.preventDefault();
		Исключение
			ДанныеСобытия.Event.returnValue = Ложь;
		КонецПопытки;
		#КонецЕсли
		ПродолжитьОбработку = Ложь;
		Возврат;
		
	КонецЕсли;
	ДанныеСобытия.Event.returnValue = Истина;
КонецПроцедуры // ОбработчикСобытияПриНажатииРезультатаПоиска()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КНОПОК ПАНЕЛИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиКнопокПанелиИсточникаСправочнойИнформации



&НаКлиенте
// Вызывается из обработчика команды кнопок командной панели закладки источника справочной информации.
// 
// Параметры 
// 	Команда            	 -	КомандаФормы	      	 Обрабатываемая команда.
// 	ДобавлятьВИсторию  	 -	Булево              	 Признак необходимости добавления в историю навигации
// 													 ссылки на данные закладки после обработки команды.
// 
Процедура ОбработчикСобытияНажатиеКнопкиКоманднойПанели(Команда, ДобавлятьВИсторию = Ложь) Экспорт
	Если Команда.Имя = "ВсеСоветы" Тогда
		ДобавлятьВИсторию = Истина;
		ЗагрузитьГлавнуюСтраницу("");
	КонецЕсли;
КонецПроцедуры // ОбработчикСобытияНажатиеКнопкиКоманднойПанели()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныеЭкспортируемыеПроцедурыИФункцииОбработкиИсточникаСправочнойИнформации



&НаКлиенте
// Преобразовывает полное имя формы в формат используемый в привязках статей справки к объектам ИБ
// (для вызова на клиенте).
// 
// Параметры 
// 	ПарамИмяФормы      	 -	Строка                 	 Полное имя формы.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 Преобразованное имя формы.
// 
Функция ПреобразоватьИмяФормы(Знач ПарамИмяФормы) Экспорт
	Возврат ПреобразоватьИмяФормыНаСервере(ПарамИмяФормы);
КонецФункции // ПреобразоватьИмяФормы()

&НаСервере
// Преобразовывает полное имя формы в формат используемый в привязках статей справки к объектам ИБ
// (исполняется на сервере).
// 
// Параметры 
// 	ПарамИмяФормы      	 -	Строка                 	 Полное имя формы.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 Преобразованное имя формы.
// 
Функция ПреобразоватьИмяФормыНаСервере(Знач ПарамИмяФормы)
	Если Лев(ПарамИмяФормы, 11) = "ОбщаяФорма." Тогда
		Возврат ПарамИмяФормы;
	КонецЕсли;
	ПозицияГруппыФорм = Найти(ПарамИмяФормы, ".Форма.");
	Если ПозицияГруппыФорм = 0 Тогда
		ПравПарам = ПарамИмяФормы;
		Поз = Найти(ПравПарам, ".");
		ПозицияПоследнейТочки = Поз;
		Пока НЕ Поз = 0 Цикл
			ПравПарам = Сред(ПравПарам, Поз + 1);
			Поз = Найти(ПравПарам, ".");
			ПозицияПоследнейТочки = ПозицияПоследнейТочки + Поз;
		КонецЦикла;
		
		ИмяОбъекта = Лев(ПарамИмяФормы, ПозицияПоследнейТочки - 1);
		СпецФорма = Сред(ПарамИмяФормы, ПозицияПоследнейТочки + 1);
		
		ТекМетаОбъект = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
		Если ТекМетаОбъект = Неопределено Тогда
			ВремИмяФормы = ИмяОбъекта;
		Иначе
			Попытка
				ОсновнаяСпецФорма = ТекМетаОбъект["Основная" + СпецФорма];
			Исключение
				ОсновнаяСпецФорма = Неопределено;
			КонецПопытки;
			ОсновнаяСпецФормаТип = ?(ОсновнаяСпецФорма = Неопределено, "Обычная", СокрЛП(ОсновнаяСпецФорма.ТипФормы));
			Попытка
				ДополнительнаяСпецФорма = ТекМетаОбъект["Дополнительная" + СпецФорма];
			Исключение
				ДополнительнаяСпецФорма = Неопределено;
			КонецПопытки;
			ДополнительнаяСпецФормаТип = ?(ДополнительнаяСпецФорма = Неопределено, "Обычная", СокрЛП(ДополнительнаяСпецФорма.ТипФормы));
			
			Если ОсновнаяСпецФормаТип = "Управляемая" Тогда
				ВремИмяФормы = ИмяОбъекта + "." + ОсновнаяСпецФорма.Имя;
			ИначеЕсли ДополнительнаяСпецФорма = "Управляемая" Тогда
				ВремИмяФормы = ИмяОбъекта + "." + ДополнительнаяСпецФорма.Имя;
			Иначе
				ВремИмяФормы = ИмяОбъекта;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВремИмяФормы = Лев(ПарамИмяФормы, ПозицияГруппыФорм - 1) +
					   "." +
					   Сред(ПарамИмяФормы, ПозицияГруппыФорм + 7);
	КонецЕсли;
	
	Возврат ВремИмяФормы;
КонецФункции // ПреобразоватьИмяФормыНаСервере()

&НаКлиенте
// Получает массив зарегистрированных источников справочной информации, использующих обработку с указанным именем
// (для вызова на клиенте).
// 
// Параметры 
// 	ИмяОбработки      	 -	Строка                 	 Имя обработки.
// Возвращаемое значение:
// 	Возврат ...        	 -	Массив                 	 Массив ссылок на источники справочной информации.
// 
Функция ПолучитьМассивИсточников(ИмяОбработки) Экспорт
	Возврат ПолучитьМассивИсточниковНаСервере(ИмяОбработки);
КонецФункции // ПолучитьМассивИсточников()

&НаСервере
// Получает массив зарегистрированных источников справочной информации, использующих обработку с указанным именем
// (выполняется на сервере).
// 
// Параметры 
// 	ИмяОбработки      	 -	Строка                 	 Имя обработки.
// Возвращаемое значение:
// 	Возврат ...        	 -	Массив                 	 Массив ссылок на источники справочной информации.
// 
Функция ПолучитьМассивИсточниковНаСервере(ИмяОбработки)
	ВремСписокЗакладок = Новый Массив();
	Выборка = Справочники.бит_си_Источники.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВремОбработка = бит_си_ОбщегоНазначения.ПолучитьОбработкуИсточника(Выборка.Ссылка);
		// Изменение кода. Начало. 29.12.2015{{
		Если  ВремОбработка = Неопределено ИЛИ НЕ ВремОбработка.Метаданные().Имя = ИмяОбработки Тогда
		// Изменение кода. Конец. 29.12.2015}}	
			Продолжить;
		КонецЕсли;
		ВремСписокЗакладок.Добавить(Выборка.Ссылка);
	КонецЦикла;
	ВремОбработка = ИмяОбработки;
	
	Если ВремСписокЗакладок.Количество() = 0 Тогда
		ВремСписокЗакладок.Добавить(бит_си_ОбщегоНазначения.ЗарегистрироватьОбработкуИсточника(ВремОбработка));
	КонецЕсли;
	
	Возврат ВремСписокЗакладок;
КонецФункции // ПолучитьМассивИсточниковНаСервере()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныеПроцедурыИФункцииОбработкиИсточникаСправочнойИнформации



&НаКлиентеНаСервереБезКонтекста
// Получает из текста строку заданной длины начиная с первого встретившегося слова из переданного массива.
// Позволяет получить короткий анонс найденной статьи справки.
// 
Функция ПолучитьАнонсСтатьи(МассивСловЗапроса, ПарамТекст, ДлинаАнонса = 300)
	Для Каждого ТекСлово Из МассивСловЗапроса Цикл
		Поз = Найти(ПарамТекст, ТекСлово);
		Если НЕ Поз = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Поз = ?(Поз = 0, 1, Поз);
	
	ВремПоз = 1;
	Приоритет = 1;
	Для й=1 По Поз Цикл
		Если Сред(ПарамТекст, й, 1)= ">" Тогда
			ВремПоз = Макс(ВремПоз, й + 1);
			Приоритет = 1;
		КонецЕсли;
		Если Приоритет = 1 И Сред(ПарамТекст, й, 1) = " " Тогда
			ВремПоз = Макс(ВремПоз, й + 1);
		КонецЕсли;
		Если Приоритет <= 2
		   И Сред(ПарамТекст, й, 1) = ВРег(Сред(ПарамТекст, й, 1))
		   И НЕ ВРег(Сред(ПарамТекст, й, 1)) = НРег(ВРег(Сред(ПарамТекст, й, 1))) Тогда
			ВремПоз = Макс(ВремПоз, й);
			Приоритет = 2;
		КонецЕсли;
		Если Приоритет <= 3 И Сред(ПарамТекст, й-1, 2) = ". " Тогда
			ВремПоз = Макс(ВремПоз, й + 1);
		КонецЕсли;
	КонецЦикла;
	ТекстСтатьи = Сред(ПарамТекст, ВремПоз);
	
	НормальныйТекст = "";
	Поз = Найти(ТекстСтатьи,"<");
	Пока НЕ Поз = 0 И СтрДлина(НормальныйТекст) <= ДлинаАнонса Цикл
		НормальныйТекст = СокрЛП(НормальныйТекст) + " " + Лев(ТекстСтатьи, Поз-1);
		ТекстСтатьи = Сред(ТекстСтатьи, Поз+1);
		Поз = Найти(ТекстСтатьи,">");
		ТекстСтатьи = Сред(ТекстСтатьи,Поз+1);
		Поз = Найти(ТекстСтатьи,"<");
	КонецЦикла;
	ТекстСтатьи = НормальныйТекст + " ";
	
	Поз = Найти(НормальныйТекст," ");
	
	НормальныйТекст = "";
	Пока НЕ Поз = 0 И СтрДлина(НормальныйТекст) <= ДлинаАнонса Цикл
		НормальныйТекст = СокрЛП(НормальныйТекст) + " " + Лев(ТекстСтатьи, Поз-1);
		ТекстСтатьи = Сред(ТекстСтатьи, Поз+1);
		Поз = Найти(ТекстСтатьи, " ");
	КонецЦикла;
	ТекстРезультата = НормальныйТекст;
	Для Каждого ТекСлово Из МассивСловЗапроса Цикл
		НормальныйТекст = ТекстРезультата;
		ТекстРезультата = "";
		Поз = Найти(НРег(НормальныйТекст), НРег(ТекСлово));
		Пока НЕ Поз = 0 Цикл
			ТекстРезультата = ТекстРезультата
							+ Лев(НормальныйТекст, Поз-1)
							+ "<span style=""color: red; background-color: yellow"">"
							+ Сред(НормальныйТекст, Поз, СтрДлина(ТекСлово))
							+ "</span>";
			НормальныйТекст = Сред(НормальныйТекст, Поз + СтрДлина(ТекСлово));
			Поз = Найти(НРег(НормальныйТекст), НРег(ТекСлово));
		КонецЦикла;
		ТекстРезультата = ТекстРезультата
						+ НормальныйТекст;
	КонецЦикла;
	Возврат "... " + ТекстРезультата + " ...";
КонецФункции // ПолучитьАнонсСтатьи()

&НаСервере
// Проверяет, что переданный параметр является ссылкой на группу справочника.
// 
// Параметры 
// 	Ссылка		       	 -	СправочникСсылка.		Ссылка на статью справки
// 							бит_си_Статьи.
// Возвращаемое значение:
// 	Возврат...       	 -	Булево					Истина - Это группа справочника.
// 
Функция ЭтоГруппа(Ссылка)
	Попытка
		ЭтоГруппа = Ссылка.ЭтоГруппа;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат ЭтоГруппа;
КонецФункции // ЭтоГруппа()
	
&НаСервере
// Получает название статьи по переданной ссылке.
// 
// Параметры 
// 	Ссылка		       	 -	СправочникСсылка.		Ссылка на статью справки
// 							бит_си_Статьи.
// Возвращаемое значение:
// 	Возврат...       	 -	Строка					Заголовок статьи справки.
// 
Функция ПолучитьЗаголовок(Ссылка)
	Попытка
		Возврат СокрЛП(Ссылка.НазваниеСтатьи);
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции // ПолучитьЗаголовок()

&НаСервере
// Заполняет дерево разделов поиска
// 
Процедура ЗаполнитьДеревоРазделовНаСервере()
	ДеревоРазделов = Новый ДеревоЗначений();
	ДеревоРазделов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Число"));
	ДеревоРазделов.Колонки.Добавить("КартинкаРаздела", Новый ОписаниеТипов("Строка"));
	ДеревоРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Строка"));
	ДеревоРазделов.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ДеревоРазделов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("Строка, СправочникСсылка.бит_си_Статьи, СправочникСсылка.бит_си_МеткиСтатей", , Новый КвалификаторыСтроки(150)));
	КартинкаМетокПоУмолчанию = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.бит_си_МеткаСтатьи.ПолучитьДвоичныеДанные(), ЭтаФорма);
	СтрокаГрупп = ДеревоРазделов.Строки.Добавить();
	СтрокаГрупп.Раздел	= "Группы статей справки";
	СтрокаГрупп.Ид		= "Группы статей справки";
	СтрокаГрупп.Ссылка	= "Группы";
	СтрокаГрупп.Пометка	= 1;
	Выборка = Справочники.бит_си_Статьи.Выбрать(Справочники.бит_си_Статьи.ПустаяСсылка());
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СтрокаГрупп.Строки.Добавить();
		НоваяСтрока.Раздел	= Выборка.Наименование;
		НоваяСтрока.Ид		= Выборка.Наименование;
		НоваяСтрока.Ссылка	= Выборка.Ссылка;
		НоваяСтрока.Пометка	= 1;
		ДобавитьВложенныеРазделы(НоваяСтрока);
	КонецЦикла;
	СтрокаМеток = ДеревоРазделов.Строки.Добавить();
	СтрокаМеток.Раздел				= "Метки статей справки";
	СтрокаМеток.КартинкаРаздела		= КартинкаМетокПоУмолчанию;
	СтрокаМеток.Ид					= "Метки статей справки";
	СтрокаМеток.Ссылка				= "Метки";
	СтрокаМеток.Пометка				= 0;
	Выборка = Справочники.бит_си_МеткиСтатей.Выбрать(Справочники.бит_си_МеткиСтатей.ПустаяСсылка());
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЭтоГруппа Тогда
			НоваяСтрока = СтрокаМеток.Строки.Добавить();
			НоваяСтрока.Раздел				= Выборка.Наименование;
			ВремКартинка = Выборка.Пиктограмма.Получить();
			Если НЕ ТипЗнч(ВремКартинка) = Тип("ДвоичныеДанные") Тогда
				НоваяСтрока.КартинкаРаздела = КартинкаМетокПоУмолчанию;
			Иначе
				НоваяСтрока.КартинкаРаздела = ПолучитьНавигационнуюСсылку(Выборка.Ссылка, "Пиктограмма");
			КонецЕсли;
			НоваяСтрока.Ид					= Выборка.Наименование;
			НоваяСтрока.Ссылка				= Выборка.Ссылка;
			НоваяСтрока.Пометка				= 0;
			Продолжить;
		КонецЕсли;
		СтрокаГруппы = СтрокаМеток.Строки.Добавить();
		СтрокаГруппы.Раздел				= Выборка.Наименование;
		СтрокаГруппы.Ид					= Выборка.Наименование;
		СтрокаГруппы.Ссылка				= Выборка.Ссылка;
		СтрокаГруппы.Пометка				= 0;
		ВыборкаМеток = Справочники.бит_си_МеткиСтатей.Выбрать(Выборка.Ссылка);
		Пока ВыборкаМеток.Следующий() Цикл
			НоваяСтрока = СтрокаГруппы.Строки.Добавить();
			НоваяСтрока.Раздел			= ВыборкаМеток.Наименование;
			ВремКартинка = ВыборкаМеток.Пиктограмма.Получить();
			Если НЕ ТипЗнч(ВремКартинка) = Тип("ДвоичныеДанные") Тогда
				НоваяСтрока.КартинкаРаздела = КартинкаМетокПоУмолчанию;
			Иначе
				НоваяСтрока.КартинкаРаздела = ПолучитьНавигационнуюСсылку(ВыборкаМеток.Ссылка, "Пиктограмма");
			КонецЕсли;
			НоваяСтрока.Ид				= ВыборкаМеток.Наименование;
			НоваяСтрока.Ссылка			= ВыборкаМеток.Ссылка;
			НоваяСтрока.Пометка			= 0;
		КонецЦикла;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоРазделов, "оп_ДеревоРазделовПоиска");
КонецПроцедуры // ЗаполнитьДеревоРазделовНаСервере()

&НаСервере
// Добавляет вложенные разделы справки в дерево разделов для поиска.
// 
// Параметры 
// 	СтрокаРаздела      	 -	СтрокаДереваЗначений   	 Строка дерева разделов, для которой добавляются дочерние разделы. 
// 
Процедура ДобавитьВложенныеРазделы(СтрокаРаздела)
	Выборка = Справочники.бит_си_Статьи.Выбрать(СтрокаРаздела.Ссылка);
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СтрокаРаздела.Строки.Добавить();
		НоваяСтрока.Раздел	= Выборка.Наименование;
		НоваяСтрока.Ид		= Выборка.Наименование;
		НоваяСтрока.Ссылка	= Выборка.Ссылка;
		НоваяСтрока.Пометка	= 1;
		ДобавитьВложенныеРазделы(НоваяСтрока);
	КонецЦикла;
КонецПроцедуры // ДобавитьВложенныеРазделы()

&НаКлиенте
// Разбирает текст ссылки на ИмяМенеджера, ИмяОбъекта и саму ссылку
// Используется при обработке ссылок на объекты информационной базы.
// 
// Параметры 
// 	ТекстСсылки        	 -	Строка                 	 Текст ссылки.                                                     
// Возвращаемое значение:
// 	Возврат ...        	 -	Структура              	 Структура ссылки для открытия объекта.                            
// 
Функция РазобратьСсылку(ТекстСсылки)
	
	
	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("ИмяМенеджера","");
	РезСтруктура.Вставить("ИмяОбъекта","");
	РезСтруктура.Вставить("Ссылка","");
	
	Стр = ТекстСсылки;
	
	Позиция = Найти(Стр,"@");
	
	Если Позиция>0 Тогда
	
		РезСтруктура.ИмяМенеджера = Лев(Стр,Позиция-1);
		Стр = Сред(Стр,Позиция+1);
		
		Позиция = Найти(Стр,"@");
		Если Позиция>0 Тогда
			РезСтруктура.ИмяОбъекта = Лев(Стр,Позиция-1);
			РезСтруктура.Ссылка     = Сред(Стр,Позиция+1);
		КонецЕсли; 
	
	КонецЕсли; 
	
	
    Возврат РезСтруктура;
КонецФункции // РазобратьСсылку()

&НаКлиенте
// Возвращает вид обекта по текстовому представлению менеджера
// (вместо множественного числа делает единственное).
// 
// Параметры 
// 	СтрокаВида        	 -	Строка                 	 Текстовое представлению менеджера.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка              	 Вид обекта.
// 
Функция ПолучитьВидОбъекта(СтрокаВида)
	ИменаЕд = Новый Соответствие;
	ИменаЕд.Вставить("Справочники"   			, "Справочник");
	ИменаЕд.Вставить("Документы"				, "Документ");
	ИменаЕд.Вставить("ПланыВидовХарактеристик"	, "ПланВидовХарактеристик");
	ИменаЕд.Вставить("Перечисления"				, "Перечисление");
	ИменаЕд.Вставить("ПланыСчетов"				, "ПланСчетов");
	ИменаЕд.Вставить("ПланыВидовРасчета"		, "ПланВидовРасчета");
	ИменаЕд.Вставить("БизнесПроцессы"			, "БизнесПроцесс");
	ИменаЕд.Вставить("Задачи"					, "Задача");
	ИменаЕд.Вставить("ПланыОбмена"				, "ПланОбмена");
	ИменаЕд.Вставить("Обработки"				, "Обработка");
	ИменаЕд.Вставить("Отчеты"					, "Отчет");
	ИменаЕд.Вставить("РегистрыСведений"			, "РегистрСведений");
	
	Возврат ?(ИменаЕд[СтрокаВида] = Неопределено, СтрокаВида, ИменаЕд[СтрокаВида]);
КонецФункции // ПолучитьВидОбъекта()

&НаСервереБезКонтекста
// Возвращает ссылку на объект информационной базы по переданному идентификатору.
// 
// Параметры 
// 	ИмяМенеджера       	 -	Строка                 	 Тип объекта метаданных.
// 	ИмяОбъекта        	 -	Строка                 	 Имя объекта метаданных.
// 	Ид		        	 -	Строка                 	 Идентификатор объекта.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка              	 Вид обекта.
// 
Функция ПолучитьСсылкуПоИдентификатору(ИмяМенеджера, ИмяОбъекта, Ид)
	Менеджер = бит_си_ИсточникСправочникСтатьи.ПолучитьМенеджер(ИмяМенеджера);
	Если Менеджер = Неопределено Тогда
		ВидОбъекта = ИмяМенеджера;
	Иначе
		ВремИд = Новый УникальныйИдентификатор(Ид);
		ТекущаяСсылка = Менеджер[ИмяОбъекта].ПолучитьСсылку(ВремИд);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		Возврат ТекущаяСсылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // ПолучитьСсылкуПоИдентификатору()
	
&НаСервере
// Получает массив статей, соответствующих установленным отборам для источника справочной информации.
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	Массив, Неопределено   	 Массив статей; Неопределено - отборы не становлены.
// 
Функция ПолучитьСтатьиПоОтборам()
	ОбъектыОтбора = РеквизитФормыВЗначение("дп_ОбъектыОтбора");
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	Для Каждого ТекОбъект Из ОбъектыОтбора Цикл
		ТекущийТип = ТекОбъект.МетаОбъект;
		Если ТекущийТип = "#Роль" ИЛИ ТекущийТип = "#РежимЗапуска" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивТипов.Найти(Тип(СтрЗаменить(ТекущийТип, ".", "Ссылка."))) = Неопределено Тогда
			МассивТипов.Добавить(Тип(СтрЗаменить(ТекущийТип, ".", "Ссылка.")));
		КонецЕсли;
	КонецЦикла;
	
	ТабОтборов = Новый ТаблицаЗначений();
	ТабОтборов.Колонки.Добавить("Тип", Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(200)));
	ТабОтборов.Колонки.Добавить("Объект", Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(200)));
	
	Для Каждого ТекОбъект Из ОбъектыОтбора Цикл
		ТекущийКод = ТекОбъект.КодПолученияОбъектов;
		ТекущийТип = ТекОбъект.МетаОбъект;
		Результат = Неопределено;
		Если ТекущийТип = "#РежимЗапуска" Тогда

#КонецОбласти

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Результат = "Обычный";
		#Иначе
			Результат = "Управляемый";
		#КонецЕсли
		Иначе
			Попытка
				Выполнить(ТекущийКод);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			НоваяСтрока = ТабОтборов.Добавить();
			НоваяСтрока.Тип = ТекущийТип;
			НоваяСтрока.Объект = "";
		ИначеЕсли ТипЗнч(Результат) = Тип("Массив") Тогда
			Если Результат.Количество() = 0 Тогда
				НоваяСтрока = ТабОтборов.Добавить();
				НоваяСтрока.Тип = ТекущийТип;
				НоваяСтрока.Объект = "";
			КонецЕсли;
			Для Каждого ТекОбъект Из Результат Цикл
				Если ТекущийТип = "#Роль" Тогда
					Если Лев(ТекОбъект, 5) = "Роль." Тогда
						НоваяСтрока = ТабОтборов.Добавить();
						НоваяСтрока.Тип = ТекущийТип;
						НоваяСтрока.Объект = ТекОбъект;
					КонецЕсли;
				ИначеЕсли ТекущийТип = "#РежимЗапуска" Тогда
					НоваяСтрока = ТабОтборов.Добавить();
					НоваяСтрока.Тип = ТекущийТип;
					НоваяСтрока.Объект = ТекОбъект;
				ИначеЕсли ТипЗнч(ТекОбъект) = Тип(СтрЗаменить(ТекущийТип, ".", "Ссылка.")) Тогда
					НоваяСтрока = ТабОтборов.Добавить();
					НоваяСтрока.Тип = ТекущийТип;
					НоваяСтрока.Объект = ТекОбъект;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
			Если ТекущийТип = "#Роль" Тогда
				Если Лев(ТекОбъект, 5) = "Роль." Тогда
					НоваяСтрока = ТабОтборов.Добавить();
					НоваяСтрока.Тип = ТекущийТип;
					НоваяСтрока.Объект = Результат;
				КонецЕсли;
			ИначеЕсли ТекущийТип = "#РежимЗапуска" Тогда
				НоваяСтрока = ТабОтборов.Добавить();
				НоваяСтрока.Тип = ТекущийТип;
				НоваяСтрока.Объект = Результат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Результат) = Тип(СтрЗаменить(ТекущийТип, ".", "Ссылка.")) Тогда
			НоваяСтрока = ТабОтборов.Добавить();
			НоваяСтрока.Тип = ТекущийТип;
			НоваяСтрока.Объект = ТекОбъект;
		Иначе
			НоваяСтрока = ТабОтборов.Добавить();
			НоваяСтрока.Тип = ТекущийТип;
			НоваяСтрока.Объект = "";
		КонецЕсли;
	КонецЦикла;
	
	Если ТабОтборов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТабОтборов.Тип КАК Тип,
	               |	ТабОтборов.Объект КАК Объект
	               |ПОМЕСТИТЬ ТабОтборов
	               |ИЗ
	               |	&ТабОтборов КАК ТабОтборов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Статьи.Ссылка КАК Статья,
	               |	ТабОтборов.Тип КАК Тип,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА СвязанныеТипы.Статья ЕСТЬ NULL 
	               |				ТОГДА ИСТИНА
	               |			КОГДА СвязанныеОбъекты.Объект ЕСТЬ NULL 
	               |				ТОГДА ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ) КАК СоответствуетОтбору
	               |ПОМЕСТИТЬ ОтборыПоТипам
	               |ИЗ
	               |	Справочник.бит_си_Статьи КАК Статьи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТабОтборов.Тип КАК Тип,
	               |			ТабОтборов.Объект КАК Объект
	               |		ИЗ
	               |			ТабОтборов КАК ТабОтборов) КАК ТабОтборов
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СвязанныеОбъекты.Статья КАК Статья,
	               |			СвязанныеОбъекты.Тип КАК Тип,
	               |			СвязанныеОбъекты.Объект КАК Объект
	               |		ИЗ
	               |			РегистрСведений.бит_си_СвязанныеОбъекты КАК СвязанныеОбъекты
	               |		ГДЕ
	               |			СвязанныеОбъекты.ДляОтборов) КАК СвязанныеОбъекты
	               |		ПО Статьи.Ссылка = СвязанныеОбъекты.Статья
	               |			И (ТабОтборов.Тип = СвязанныеОбъекты.Тип)
	               |			И (ТабОтборов.Объект = СвязанныеОбъекты.Объект)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СвязанныеОбъекты.Статья КАК Статья,
	               |			СвязанныеОбъекты.Тип КАК Тип
	               |		ИЗ
	               |			РегистрСведений.бит_си_СвязанныеОбъекты КАК СвязанныеОбъекты
	               |		ГДЕ
	               |			СвязанныеОбъекты.ДляОтборов
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			СвязанныеОбъекты.Статья,
	               |			СвязанныеОбъекты.Тип) КАК СвязанныеТипы
	               |		ПО Статьи.Ссылка = СвязанныеТипы.Статья
	               |			И (ТабОтборов.Тип = СвязанныеТипы.Тип)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Статьи.Ссылка,
	               |	ТабОтборов.Тип
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтборыПоТипам.Статья КАК Статья
	               |ИЗ
	               |	ОтборыПоТипам КАК ОтборыПоТипам
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтборыПоТипам.Статья
	               |
	               |ИМЕЮЩИЕ
	               |	МИНИМУМ(ОтборыПоТипам.СоответствуетОтбору) = ИСТИНА";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТабОтборов", ТабОтборов);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статья");
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат;
КонецФункции // ПолучитьСтатьиПоОтборам()

&НаСервере
// Получает справочную информацию по переданной ссылке.
// 
// Параметры 
// 	СтруктураСсылки    	 -	Структура              	 Структура ссылки, состав определяется разработчиком.              
// 
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка					 Текст для отображения на закладке справочной информации.
// 
Функция ПолучитьТекстПоСсылке(СтруктураСсылки)
	ТипСсылки = "";
	Попытка
		ВремУИД = Новый УникальныйИдентификатор(СтруктураСсылки.Ссылка);
		СпрСп = Справочники.бит_си_Статьи.ПолучитьСсылку(ВремУИД);
		СпрМетка = Справочники.бит_си_МеткиСтатей.ПолучитьСсылку(ВремУИД);
	Исключение
		СпрСп = Справочники.бит_си_Статьи.НайтиПоНаименованию(СтруктураСсылки.Ссылка);
	КонецПопытки;
	Если НЕ СпрСп.ПолучитьОбъект() = Неопределено Тогда
		ТипСсылки = ?(СпрСп.ЭтоГруппа, "ГруппаСтатей", "Статья");
	ИначеЕсли НЕ СпрМетка.ПолучитьОбъект() = Неопределено Тогда
		ТипСсылки = "Метка";
	КонецЕсли;
	
	Если ТипСсылки = "ГруппаСтатей"  Тогда
		МассивОтбора = Новый Массив();
		Выборка = Справочники.бит_си_Статьи.ВыбратьИерархически(СпрСп);
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			МассивОтбора.Добавить(Выборка.Ссылка);
		КонецЦикла;
		Возврат ПолучитьТекстГлавнойСтраницы(МассивОтбора);
	ИначеЕсли ТипСсылки = "Метка" Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					   |	УстановленныеМеткиСтатей.Статья
					   |ИЗ
					   |	РегистрСведений.бит_си_УстановленныеМеткиСтатей КАК УстановленныеМеткиСтатей
					   |ГДЕ
					   |	УстановленныеМеткиСтатей.Метка ССЫЛКА Справочник.бит_си_МеткиСтатей
					   |	И УстановленныеМеткиСтатей.Метка = &Метка";
		Запрос.УстановитьПараметр("Метка", СпрМетка);
		
		МассивОтбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статья");
		Возврат ПолучитьТекстГлавнойСтраницы(МассивОтбора);
	ИначеЕсли ТипСсылки = "Статья" Тогда
		СпрСпОб = СпрСп.ПолучитьОбъект();
							  
		ВремТекст = СпрСпОб.ЗагрузитьИзображенияИзБД(ЭтаФорма.УникальныйИдентификатор);
		
		НачалоЗаголовка = Найти(НРег(ВремТекст),"</head");
		ВремТекст = Лев(ВремТекст, НачалоЗаголовка-1)
				  + "<script language=""javascript"" >"+ дп_БиблиотекиJS.jquery +"</script>"
				  + Сред(ВремТекст, НачалоЗаголовка);
				  
		НачалоДок = Найти(НРег(ВремТекст),"<body") + Найти(Сред(НРег(ВремТекст), Найти(НРег(ВремТекст),"<body")), ">") - 1;
		
		ТекстМетки = ПолучитьHTMLТекстМеток(СпрСп, "заголовок");
		
		ТекРодитель = СпрСп.Родитель;
		СтрокаРодитель = "";
		Пока НЕ ТекРодитель.Пустая() Цикл
			СтрокаРодитель = "<a href=""ВнСсылка=" + СокрЛП(ТекРодитель.УникальныйИдентификатор()) +
							 """>" + СокрЛП(ТекРодитель.Наименование)+"</a>" +
							 ?(СтрокаРодитель = "",""," / ") + СтрокаРодитель;
			ТекРодитель = ТекРодитель.Родитель;
		КонецЦикла;
		
		ВремТекст = Лев(ВремТекст, НачалоДок) +
					?(СтрокаРодитель = "", "", "<div style=""font-size:8pt;"">" + СтрокаРодитель + "</div><br/>") +
					ТекстМетки +
					Сред(ВремТекст,НачалоДок + 1);
		КонецДок = Найти(НРег(ВремТекст),"</body");
		Если КонецДок = 0 Тогда
			ВремТекст = ВремТекст + "
								 |" + ПолучитьТекстСвязанныхОбъектов(СпрСп) + ПолучитьТекстДопИнфо(СпрСп) + "
								 |" + дп_БИТИнфо;
		Иначе
			ВремТекст = Лев(ВремТекст,КонецДок-1) + "
								 |" + ПолучитьТекстСвязанныхОбъектов(СпрСп) + ПолучитьТекстДопИнфо(СпрСп) + "
								 |" + дп_БИТИнфо + "
								 |" + Сред(ВремТекст,КонецДок);
		КонецЕсли;
		дп_ТекущаяСсылка = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия",
										   СпрСп.НазваниеСтатьи, СтруктураСсылки.Ссылка, "");
										   
		// Изменение кода. Начало. 23.06.2015{{
			СсылкаКартинки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПереместитьВправо, УникальныйИдентификатор);
	        ВремТекст = СтрЗаменить(ВремТекст, "%right-arrow%", СсылкаКартинки);

		// Изменение кода. Конец. 23.06.2015}}
										   
		Возврат ВремТекст;					 
	КонецЕсли;
КонецФункции // ПолучитьТекстПоСсылке()

&НаКлиенте
// Формирует стартовую страницу с содержанием справочника статей.
// Фильтрует в соответствии с переданным параметром. Если Фильтру соответствует 1 статья, то открывает ее.
// 
// Параметры 
// 	ПараметрОткрытия   	 -	Строка, Массив         	 Наименование открываемой статьи, имя метки или массив статей     
// 	                   	  	                       	 справочника.                                                      
// 
Процедура ЗагрузитьГлавнуюСтраницу(ПараметрОткрытия = "", ТекстРезультата = Ложь)
	
	ТекстСодержания = ПолучитьТекстГлавнойСтраницы(ПараметрОткрытия);
	
	ВладелецФормы[оп_ИмяЗакладкиИсточника + "_Текст"] = ТекстСодержания;
КонецПроцедуры // ЗагрузитьГлавнуюСтраницу()

&НаСервере
// Получает текст главной страницы
// Фильтрует в соответствии с переданным параметром. Если Фильтру соответствует 1 статья, то возвращает ее текст.
// 
// Параметры 
// 	ПараметрОткрытия   	 -	Строка, Массив         	 Наименование открываемой статьи, имя метки или массив статей     
// 	                   	  	                       	 справочника.                                                      
// 
Функция ПолучитьТекстГлавнойСтраницы(ПараметрОткрытия = "")
	Если НЕ ТипЗнч(ПараметрОткрытия) = Тип("Строка") 
	   И НЕ ТипЗнч(ПараметрОткрытия) = Тип("Массив") Тогда
		ПараметрОткрытия = "";
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	МассивСсылок = Новый Массив();
	Если ТипЗнч(ПараметрОткрытия) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из ПараметрОткрытия Цикл
			Если ТипЗнч(ТекЭлемент) = Тип("Строка") Тогда
				МассивСтрок.Добавить(ТекЭлемент);
			Иначе
				МассивСсылок.Добавить(ТекЭлемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаголовокСодержания = "Разделы справочной информации";
	ТекстСодержания     = "";
	КоличествоСоветов	= 0;
	
	ОтобранныеСтатьи = Неопределено;
	ОтобранныеСтатьи = ПолучитьСтатьиПоОтборам();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочнаяИнформация.Ссылка КАК Ссылка,
	|	СправочнаяИнформация.Ссылка.Порядок КАК Порядок,
	|	СправочнаяИнформация.Ссылка.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочнаяИнформация.Ссылка.Наименование КАК Наименование,
	|	Метки.ИмяМетки КАК ИмяМетки
	|ИЗ
	|	Справочник.бит_си_Статьи КАК СправочнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_си_Статьи.МестаИспользования КАК Метки
	|		ПО СправочнаяИнформация.Ссылка = Метки.Ссылка";
	
	Если ТипЗнч(ПараметрОткрытия) = Тип("Строка") И НЕ СокрЛП(ПараметрОткрытия) = "" Тогда
		ОбъектОтбора = Строка(ПараметрОткрытия);
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	(НЕ СправочнаяИнформация.НеВключатьВСодержание)
		|	И Метки.ИмяМетки В (&Наименования)
		|	И НЕ ЕСТЬNULL(Метки.ДопИнформация, Ложь)";
		
		ЛевПарам = ПараметрОткрытия;
		
		Наименования = Новый Массив();
		Наименования.Добавить(ЛевПарам);
		
		Пока НЕ Найти(ЛевПарам, ".") = 0 Цикл
			ПравПарам = ЛевПарам;
			Поз = Найти(ПравПарам, ".");
			ПозицияПоследнейТочки = Поз;
			Пока НЕ Поз = 0 Цикл
				ПравПарам = Сред(ПравПарам, Поз + 1);
				Поз = Найти(ПравПарам, ".");
				ПозицияПоследнейТочки = ПозицияПоследнейТочки + Поз;
			КонецЦикла;
		
			Если НЕ ПозицияПоследнейТочки = 0 Тогда
				ЛевПарам = Лев(ПараметрОткрытия, ПозицияПоследнейТочки - 1);
				Наименования.Добавить(ЛевПарам);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Наименования", Наименования);
	ИначеЕсли ТипЗнч(ПараметрОткрытия) = Тип("Массив") Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	(НЕ СправочнаяИнформация.НеВключатьВСодержание)
		|	И СправочнаяИнформация.Ссылка В(&Отбор)
		|	И НЕ ЕСТЬNULL(Метки.ДопИнформация, Ложь)";
		Запрос.УстановитьПараметр("Отбор", ПараметрОткрытия);
	Иначе
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	(НЕ СправочнаяИнформация.НеВключатьВСодержание)
		|	И НЕ ЕСТЬNULL(Метки.ДопИнформация, Ложь)";
	КонецЕсли;
	
	Если НЕ ОтобранныеСтатьи = Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|И СправочнаяИнформация.Ссылка В (&ОтобранныеСтатьи)";
		Запрос.УстановитьПараметр("ОтобранныеСтатьи", ОтобранныеСтатьи);
	КонецЕсли;
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправочнаяИнформация.Ссылка,
		|	СправочнаяИнформация.Ссылка.Порядок,
		|	СправочнаяИнформация.Ссылка.ЭтоГруппа,
		|	СправочнаяИнформация.Ссылка.Наименование,
		|	Метки.ИмяМетки
		|ИЗ
		|	Справочник.бит_си_Статьи КАК СправочнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_си_Статьи.МестаИспользования КАК Метки
		|		ПО СправочнаяИнформация.Ссылка = Метки.Ссылка
		|ГДЕ
		|	(НЕ СправочнаяИнформация.НеВключатьВСодержание)
		|	И Метки.ИмяМетки В (&Наименования)
		|	И НЕ ЕСТЬNULL(Метки.ДопИнформация, Ложь)";
		
		Наименования = Новый Массив();
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			ЛевПарам = ТекСтрока;
			Наименования.Добавить(ЛевПарам);
			
			Пока НЕ Найти(ЛевПарам,".") = 0 Цикл
				ПравПарам = ЛевПарам;
				Поз = Найти(ПравПарам, ".");
				ПозицияПоследнейТочки = Поз;
				Пока НЕ Поз = 0 Цикл
					ПравПарам = Сред(ПравПарам, Поз + 1);
					Поз = Найти(ПравПарам, ".");
					ПозицияПоследнейТочки = ПозицияПоследнейТочки + Поз;
				КонецЦикла;
			
				Если НЕ ПозицияПоследнейТочки = 0 Тогда
					ЛевПарам = Лев(ПараметрОткрытия, ПозицияПоследнейТочки - 1);
					Наименования.Добавить(ЛевПарам);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Наименования", Наименования);
		
		Если НЕ ОтобранныеСтатьи = Неопределено Тогда
			Запрос.Текст = Запрос.Текст +
			"
			|И СправочнаяИнформация.Ссылка В (&ОтобранныеСтатьи)";
			Запрос.УстановитьПараметр("ОтобранныеСтатьи", ОтобранныеСтатьи);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочнаяИнформация.Ссылка.Порядок,
	|	СправочнаяИнформация.Ссылка.ЭтоГруппа,
	|	СправочнаяИнформация.Ссылка.Наименование
	|
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.ЭтоГруппа) Тогда
			Продолжить;
		ИначеЕсли Выборка.ТипЗаписи() = SelectRecordType.ИтогПоГруппировке
			И Выборка.Ссылка.ЭтоГруппа Тогда
			ТекстСодержания = ТекстСодержания + "
			|</DIV>";
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка.ЭтоГруппа Тогда  // Это заголовок.
			
			НаименованиеЗаголовка = Выборка.Ссылка.Наименование;
			ТекстРаздела =  Выборка.Ссылка.ОписаниеРаздела;
			
			ТекстСодержания = ТекстСодержания + "
			|<DIV style=""text-indent: "+СокрЛП(10*Выборка.Уровень())+"pt;""><P class=""contents"">" +
			НаименованиеЗаголовка + "</P>
			|" + ТекстРаздела;
			
		ИначеЕсли Выборка.Уровень() = 0 Тогда
			
			ТекстМетки = ПолучитьHTMLТекстМеток(Выборка.Ссылка, "содержание");
			
			ТекстСсылки = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			ТекстСодержания = ТекстСодержания + "
			|<P class=""contents""><A href=""" + "ВнСсылка=" + ТекстСсылки + """>" + Выборка.Ссылка.НазваниеСтатьи + "</A>" +
			ТекстМетки + "</P>
			|";
			
			КоличествоСоветов = КоличествоСоветов + 1;
			
		Иначе
			
			ТекстМетки = ПолучитьHTMLТекстМеток(Выборка.Ссылка, "содержание");
			
			ТекстСсылки = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			ТекстСодержания = ТекстСодержания + "
			|<P class=""contents"" style=""text-indent: "+СокрЛП(10*Выборка.Уровень())+"pt;""><A href=""" +
			"ВнСсылка=" + ТекстСсылки + """>" + Выборка.Ссылка.НазваниеСтатьи + "</A>" +
			ТекстМетки + "</P>
			|";
			
			КоличествоСоветов = КоличествоСоветов + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоСоветов = 1 Тогда // Всего один совет показываем сразу.
		ВремСтруктура = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия",ЗаголовокСодержания,ТекстСсылки);
		Возврат ПолучитьТекстПоСсылке(ВремСтруктура);
		// ВремЭлементы[ИмяЗакладкиИсточника+"_ПанельУправления"].Кнопки.РедактироватьСтатью.Доступность =
		// 	ПравоДоступа("Редактирование",Метаданные.Справочники.бит_си_Статьи);
	Иначе
		ТекстСодержания = СтрЗаменить(дп_ШаблонСтраницы, "##Content##","<H1 id=title>" + ЗаголовокСодержания + "</H1>
		|" + ТекстСодержания + "
		|" + "
		|" + дп_БИТИнфо);
		дп_ТекущаяСсылка = Новый Структура("Заголовок, Ссылка, ПараметрОткрытия",
										ЗаголовокСодержания, "#Главная", ПараметрОткрытия);
		Возврат ТекстСодержания;
	КонецЕсли;
КонецФункции // ПолучитьТекстГлавнойСтраницы()

&НаСервере
// Выполняет код получения описания связанных объектов
// и возвращает результат (описание связанных объектов.
// 
// Параметры 
// 	КодДляВыполнения   	 -	Строка                 	 Код получения описания связанных объектов.
// 	МассивОбъектов     	 -	Массив                 	 Массив связанных объектов.
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка              	 Описание связанных объектов.
// 
Функция ПолучитьРезультатВыполненияКодаСвязанныхОбъектов(Знач КодДляВыполнения, Знач МассивОбъектов = Неопределено)
	Если НЕ ЗначениеЗаполнено(КодДляВыполнения) Тогда
		Возврат "";
	КонецЕсли;
	Если МассивОбъектов = Неопределено Тогда
		Возврат "";
	ИначеЕсли НЕ ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
		ВремМассив = Новый Массив();
		ВремМассив.Добавить(МассивОбъектов);
		МассивОбъектов = ВремМассив;
	КонецЕсли;
	
	Результат = "";
	Попытка
		Выполнить(КодДляВыполнения);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат "";
	КонецПопытки;
	Возврат Результат;
КонецФункции // ПолучитьРезультатВыполненияКодаСвязанныхОбъектов()

&НаСервере
// Возвращает HTML-текст с описанием связанных объектов.
// 
// Параметры 
// 	Параметр           	 -	Строка,СправочникСсылка	 Открываемая статьи, имя метки или массив статей справочника
// 	                   	  	.бит_си_Статьи. 	                                                                  
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 HTML-текст с описанием связанных объектов.
// 
Функция ПолучитьТекстСвязанныхОбъектов(Параметр)
	Если Параметр = "" Тогда
		Возврат "";
	КонецЕсли;
	ОбъектыПривязки = РеквизитФормыВЗначение("дп_ОбъектыПривязки");
	
	ТекстСодержания = "";
	ВыведеноТипов = 1;
	Для Каждого ТекОбъект Из ОбъектыПривязки Цикл
		ТекущийКод = ТекОбъект.КодПолученияТекстаОбъекта;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	СвязанныеОбъекты.Объект
		                      |ИЗ
		                      |	РегистрСведений.бит_си_СвязанныеОбъекты КАК СвязанныеОбъекты
		                      |ГДЕ
		                      |	СвязанныеОбъекты.Статья = &Статья
		                      |	И СвязанныеОбъекты.Тип = &Тип
		                      |	И (НЕ СвязанныеОбъекты.ДляОтборов)");
		Запрос.УстановитьПараметр("Статья"	, Параметр);
		Запрос.УстановитьПараметр("Тип"		, ТекОбъект.МетаОбъект);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		Результат = ПолучитьРезультатВыполненияКодаСвязанныхОбъектов(ТекущийКод, МассивОбъектов);
		
		Если ТипЗнч(Результат) = Тип("Строка") И ЗначениеЗаполнено(Результат) Тогда
			ТекстСодержания = ТекстСодержания
							+ "<div style=""padding-top: 20px;width: 300 px;text-indent: 0pt;border-bottom: gray thin solid;"">
					  		  |<P style=""FONT-FAMILY: Verdana;MARGIN: 8pt 0pt; COLOR: #666666; FONT-WEIGHT: bold;FONT-SIZE: 8pt;"">
					  		  |<a id=""linkedtype" + СокрЛП(ВыведеноТипов) + "title""
							  | style=""padding-left:1px;padding-right:1px;vertical-align:middle;text-align:center;text-decoration:none;
							  |border: #666666 1px solid;FONT-FAMILY: Verdana;COLOR: #666666;FONT-SIZE: 8pt;""
					  		  |onclick=""expandit('linkedtype" + СокрЛП(ВыведеноТипов) + "title', 'linkedtype" + СокрЛП(ВыведеноТипов) + "');""
							  | href=""javascript:// "">+</a>&nbsp;" + ТекОбъект.Заголовок
							+ "</P></div><div id=""linkedtype" +
							  СокрЛП(ВыведеноТипов) + """ style=""display:none"">" + Результат + "</div>";
		Иначе
			Продолжить;
		КонецЕсли;
		ВыведеноТипов = ВыведеноТипов + 1;
	КонецЦикла;
	
	Возврат ТекстСодержания;	
КонецФункции // ПолучитьТекстСвязанныхОбъектов()

&НаСервере
// Возвращает HTML-текст ссылок на дополнительную информацию, связанную с переданным параметром.
// 
// Параметры 
// 	Параметр           	 -	Строка,СправочникСсылка	 Открываемая статьи, имя метки или массив статей справочника      
// 	                   	  	.бит_си_Статьи, Массив. 	                                                                  
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 HTML-текст ссылок на дополнительную информацию.                   
// 
Функция ПолучитьТекстДопИнфо(Параметр)
	Если Параметр = "" Тогда
		Возврат "";
	КонецЕсли;
	МассивМеток = Новый Массив();
	Если ТипЗнч(Параметр) = Тип("СправочникСсылка.бит_си_Статьи") Тогда
		Для Каждого ТекМетка Из Параметр.МестаИспользования Цикл
			Если НЕ МассивМеток.Найти(ТекМетка.ИмяМетки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивМеток.Добавить(ТекМетка.ИмяМетки);
		КонецЦикла;
		
		ПараметрОткрытия = Новый Массив();
		ПараметрОткрытия.Добавить(Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда
		Для Каждого ТекСтатья Из Параметр Цикл
			Для Каждого ТекМетка Из ТекСтатья.МестаИспользования Цикл
				Если НЕ МассивМеток.Найти(ТекМетка.ИмяМетки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивМеток.Добавить(ТекМетка.ИмяМетки);
			КонецЦикла;
		КонецЦикла;
		ПараметрОткрытия = Параметр;
	Иначе
		ПараметрОткрытия = Параметр;
	КонецЕсли;
	
	ОтобранныеСтатьи = ПолучитьСтатьиПоОтборам();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочнаяИнформация.Ссылка КАК Ссылка,
	|	СправочнаяИнформация.ИмяМетки КАК ИмяМетки
	|ИЗ
	|	Справочник.бит_си_Статьи.МестаИспользования КАК СправочнаяИнформация";
	
	Если ТипЗнч(ПараметрОткрытия) = Тип("Строка") Тогда
		ОбъектОтбора = Строка(ПараметрОткрытия);
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	СправочнаяИнформация.ИмяМетки В (&Наименования)
		|	И СправочнаяИнформация.ДопИнформация";
		
		ЛевПарам = ПараметрОткрытия;
		
		Наименования = Новый Массив();
		Наименования.Добавить(ЛевПарам);
		
		Пока НЕ Найти(ЛевПарам,".") = 0 Цикл
			ПравПарам = ЛевПарам;
			Поз = Найти(ПравПарам,".");
			ПозицияПоследнейТочки = Поз;
			Пока НЕ Поз = 0 Цикл
				ПравПарам = Сред(ПравПарам,Поз+1);
				Поз = Найти(ПравПарам,".");
				ПозицияПоследнейТочки = ПозицияПоследнейТочки + Поз;
			КонецЦикла;
		
			Если НЕ ПозицияПоследнейТочки = 0 Тогда
				ЛевПарам = Лев(ПараметрОткрытия,ПозицияПоследнейТочки-1);
				Наименования.Добавить(ЛевПарам);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Наименования",Наименования);
	ИначеЕсли ТипЗнч(ПараметрОткрытия) = Тип("Массив") Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	СправочнаяИнформация.ИмяМетки В (&Наименования)
	  	| И НЕ СправочнаяИнформация.Ссылка В (&Отбор)";
		Запрос.УстановитьПараметр("Наименования",МассивМеток);
		Запрос.УстановитьПараметр("Отбор",ПараметрОткрытия);
	Иначе
		Возврат "";
	КонецЕсли;
	Если НЕ ОтобранныеСтатьи = Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|И СправочнаяИнформация.Ссылка В (&ОтобранныеСтатьи)";
		Запрос.УстановитьПараметр("ОтобранныеСтатьи", ОтобранныеСтатьи);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочнаяИнформация.Ссылка.Порядок,
	|	СправочнаяИнформация.Ссылка.ЭтоГруппа,
	|	СправочнаяИнформация.Ссылка.Наименование
	|
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстСодержания = "<div style=""padding-top: 50px;width: 250 px;text-indent: 0pt;border-bottom: gray thin solid;"">
					  |<p style=""FONT-FAMILY: Verdana;MARGIN: 8pt 0pt; COLOR: #666666; FONT-WEIGHT: bold;FONT-SIZE: 8pt;"">
					  |<a id=""addinfotitle"" style=""vertical-align:middle;text-align:center;
					  |border: #666666 1px solid;FONT-FAMILY: Verdana;MARGIN: 8pt 0pt; COLOR: #666666; FONT-WEIGHT: bold;
					  |FONT-SIZE: 8pt;text-decoration:none;""
					  |onclick=""expandit('addinfotitle', 'addinfo');"" href=""javascript:// "">+</a>&nbsp;См. также:</p></div>
					  |<div ID=""addinfo"" style=""display:none"">";
	ПредУровень = 0;
	КоличествоСкобок = 0;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.ЭтоГруппа) Тогда
			Продолжить;
		ИначеЕсли Выборка.Уровень() <= ПредУровень И КоличествоСкобок > 0 Тогда
		// ИначеЕсли Выборка.ТипЗаписи() = SelectRecordType.ИтогПоГруппировке
		// 	И Выборка.Ссылка.ЭтоГруппа Тогда
			// Для й = 1 По ПредУровень - Выборка.Уровень() + 1 Цикл
		    Для й = 1 По ПредУровень - Выборка.Уровень() Цикл
				ТекстСодержания = ТекстСодержания + "
													|</div>";
			КонецЦикла;
			// КоличествоСкобок = 	КоличествоСкобок - (ПредУровень - Выборка.Уровень() + 1);
			КоличествоСкобок = 	КоличествоСкобок - (ПредУровень - Выборка.Уровень());
		// Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка.ЭтоГруппа Тогда  // Это заголовок.
			
			НаименованиеЗаголовка = Выборка.Ссылка.Наименование;
			
			ТекстСодержания = ТекстСодержания + "
			|<div style=""text-indent: " +
			СокрЛП(10*(Выборка.Уровень()+1)) +
			"pt;FONT-FAMILY: Verdana;FONT-WEIGHT: bold;FONT-SIZE: 8pt;"">
			|<P style=""MARGIN: 8pt 0pt; COLOR: #666666;"">" + НаименованиеЗаголовка + "</P>";
			КоличествоСкобок = 	КоличествоСкобок + 1;
		ИначеЕсли Выборка.Уровень() = 0 Тогда
			
			ТекстМетки = ПолучитьHTMLТекстМеток(Выборка.Ссылка, "допссылки");
			
			ТекстСсылки = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			ТекстСодержания = ТекстСодержания + "
			|<P style=""MARGIN: 8pt 0pt; COLOR: #666666; ""><A style=""FONT-FAMILY: Verdana;FONT-WEIGHT: normal;
			|FONT-SIZE: 8pt;color: #3366ff;"" href=""" +
			"ВнСсылка=" + ТекстСсылки + """>" + Выборка.Ссылка.НазваниеСтатьи + "</A>" +
			ТекстМетки + "</P>
			|";
			
		Иначе
			
			ТекстМетки = ПолучитьHTMLТекстМеток(Выборка.Ссылка, "допссылки");
			
			ТекстСсылки = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			ТекстСодержания = ТекстСодержания + "
			|<P style=""MARGIN: 8pt 0pt; COLOR: #666666; text-indent: "+СокрЛП(10*(Выборка.Уровень()+1))+"pt;"">
			|<A style=""FONT-FAMILY: Verdana;FONT-WEIGHT: normal;FONT-SIZE: 8pt;
			|color: #3366ff;"" href=""" + "ВнСсылка=" + ТекстСсылки + """>" +
			Выборка.Ссылка.НазваниеСтатьи + "</A>" +
			ТекстМетки + "</P>
			|";
			
		КонецЕсли;
		ПредУровень = Выборка.Уровень();
	КонецЦикла;
    Пока КоличествоСкобок > 0 Цикл
		ТекстСодержания = ТекстСодержания + "
											|</div>";
		КоличествоСкобок = КоличествоСкобок - 1;
	КонецЦикла;
	ТекстСодержания = ТекстСодержания + "
										|</div>";
	
	Возврат ТекстСодержания;	
КонецФункции // ПолучитьТекстДопИнфо()

&НаСервере
// Устанавливает структуру соответствия статей и меток, а также ссылки на пиктограммы меток.
// 
Процедура ПолучитьСтатьиИМетки()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УстановленныеМеткиСтатей.Статья КАК Статья,
	               |	УстановленныеМеткиСтатей.Метка КАК Метка
	               |ИЗ
	               |	РегистрСведений.бит_си_УстановленныеМеткиСтатей КАК УстановленныеМеткиСтатей
	               |ГДЕ
	               |	УстановленныеМеткиСтатей.Метка ССЫЛКА Справочник.бит_си_МеткиСтатей";
	ТабСтатьиИМетки = Запрос.Выполнить().Выгрузить();
	ТабСтатьиИМетки.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Строка"));
	ТабМетки = ТабСтатьиИМетки.Скопировать(,"Метка");
	ТабМетки.Свернуть("Метка");
	ТабМетки.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Строка"));
	дп_КартинкаМеткиПоУмолчанию = ПолучитьНавигационнуюСсылкуИнформационнойБазы() +
								  "/" +
								  ПоместитьВоВременноеХранилище(БиблиотекаКартинок.бит_си_МеткаСтатьи.ПолучитьДвоичныеДанные(),
								  								ЭтаФорма.УникальныйИдентификатор);
	
	ЗначениеВРеквизитФормы(ТабСтатьиИМетки	, "дп_СтатьиИМетки");
	ЗначениеВРеквизитФормы(ТабМетки			, "дп_Метки");
КонецПроцедуры // ПолучитьСтатьиИМетки()

&НаСервере
// Получает таблицу меток для указанной статьи.
// 
// Параметры 
// 	СтруктураСтатьиИ	 -	Структура              	 Структура соответстви статей и меток,
// 	Метки                                            а также ссылки на пиктограммы меток.
// 		Поля 
// 			СтатьиИМетки	 -	ТаблицаЗначений    	 Таблица соответствия статей и меток.
// 			Метки			 -	ТаблицаЗначений    	 Таблица меток с указанием путей к файлам пиктограмм.
// 			КартинкаПоУмол   -	Строка             	 Путь к файлу пиктограммы по умолчанию.
// 			чанию			 
// 	Ссылка				-	СправочникСсылка.бит   	 Статья, для которой получаем метки
// 							_си_Статьи.
// Возвращаемое значение:
// 	Возврат ...        	 -	ДеревоЗначений         	 Дерево разделов поиска                                           
// 		Поля 
// 			Ссылка			 -	СправочникСсылка.	 Метка
// 								бит_си_МеткиСтатей.
// 			Наименование	 -	Строка             	 Наименование метки.
// 			Описание		 -	Строка            	 Описание метки.
// 			Картинка		 -	Структура          	 Путь к файлу пиктограммы метки.
// 
Функция ПолучитьМеткиСтатьи(Статья)
	СтрокиМетки = дп_СтатьиИМетки.НайтиСтроки(Новый Структура("Статья", Статья));
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Ссылка"			, Новый ОписаниеТипов("СправочникСсылка.бит_си_МеткиСтатей"));
	Результат.Колонки.Добавить("Наименование"	, Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Описание"		, Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Картинка"		, Новый ОписаниеТипов("Строка"));
	Для Каждого ТекСтрока Из СтрокиМетки Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Ссылка = ТекСтрока.Метка;
		НоваяСтрока.Наименование = ТекСтрока.Метка.Наименование;
		НоваяСтрока.Описание = ТекСтрока.Метка.Описание;
		ТекМетка = дп_Метки.НайтиСтроки(Новый Структура("Метка", ТекСтрока.Метка))[0];
		Если ПустаяСтрока(ТекСтрока.Картинка) Тогда
			Если ПустаяСтрока(ТекМетка.Картинка) Тогда
				ВремКартинка = ТекМетка.Метка.Пиктограмма.Получить();
				Если НЕ ТипЗнч(ВремКартинка) = Тип("Картинка") ИЛИ ВремКартинка.Вид = ВидКартинки.Пустая Тогда
					ТекМетка.Картинка = дп_КартинкаМеткиПоУмолчанию;
				Иначе
					#Если ТолстыйКлиентОбычноеПриложение Тогда
					ВремПуть = ПолучитьИмяВременногоФайла("bit_h_img");
					ВремКартинка.Записать(ВремПуть);
					#Иначе
					ВремПуть = ПолучитьНавигационнуюСсылкуИнформационнойБазы() +
							   "/" +
							   ПоместитьВоВременноеХранилище(ВремКартинка, ЭтаФорма.УникальныйИдентификатор);
					#КонецЕсли
					ТекМетка.Картинка = ВремПуть;
				КонецЕсли;
			КонецЕсли;
			ТекСтрока.Картинка = ТекМетка.Картинка;
		КонецЕсли;
		НоваяСтрока.Картинка = ТекСтрока.Картинка;
	КонецЦикла;
	Возврат Результат;
КонецФункции // ПолучитьМеткиСтатьи()

&НаСервере
// Получает HTML-тест - представление меток для указанной статьи для вывода в форме справочной информации.
// 
// Параметры 
// 	СтруктураСтатьиИ	 -	Структура              	 Структура соответстви статей и меток,
// 	Метки                                            а также ссылки на пиктограммы меток.
// 		Поля 
// 			СтатьиИМетки	 -	ТаблицаЗначений    	 Таблица соответствия статей и меток.
// 			Метки			 -	ТаблицаЗначений    	 Таблица меток с указанием путей к файлам пиктограмм.
// 			КартинкаПоУмол   -	Строка             	 Путь к файлу пиктограммы по умолчанию.
// 			чанию			 
// 	Статья				-	СправочникСсылка.бит   	 Статья, для которой получаем метки
// 							_си_Статьи.
// 	Размещение			-	Строка				   	 Где будет размежен текст меток:
// 														содержание:	В содержании справочной информации
// 														допссылки:	В разделе дополнительных ссылок
// 														заголовок:	В заголовке статьи справочной информации
// 														поиск:		В результатах поиска.
// 	ВыводПоУмолчанию	-	ПеречислениеСсылка.		 Способ отображения метки по умолчанию, если способ для метки не указан
// 							бит_си_ВыводМеток.
// 	
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка         	 		 HTML-тест - представление меток.
// 
Функция ПолучитьHTMLТекстМеток(Статья,
							   Знач Размещение = "содержание",
							   Знач ВыводПоУмолчанию = Неопределено)
	Если НЕ (ТипЗнч(ВыводПоУмолчанию) = Тип("ПеречислениеСсылка.бит_си_ВыводМеток")
	   И ЗначениеЗаполнено(ВыводПоУмолчанию)) Тогда
		Если НРег(Размещение) = "содержание" Тогда
			ВыводПоУмолчанию = Перечисления.бит_си_ВыводМеток.Метка;
		ИначеЕсли НРег(Размещение) = "допссылки" Тогда
			ВыводПоУмолчанию = Перечисления.бит_си_ВыводМеток.НеВыводить;
		ИначеЕсли НРег(Размещение) = "заголовок" Тогда
			ВыводПоУмолчанию = Перечисления.бит_си_ВыводМеток.Ссылка;
		ИначеЕсли НРег(Размещение) = "поиск" Тогда
			ВыводПоУмолчанию = Перечисления.бит_си_ВыводМеток.Метка;
		КонецЕсли;
	КонецЕсли;
	ВремМетки = ПолучитьМеткиСтатьи(Статья);
	ТекстМетки = "";
	Для Каждого ТекМетка Из ВремМетки Цикл
		Если НРег(Размещение) = "содержание" Тогда
			ВыводМеток = ?(ТекМетка.Ссылка.ВыводитьВСодержании.Пустая(),
						   ВыводПоУмолчанию,
						   ТекМетка.Ссылка.ВыводитьВСодержании);
		ИначеЕсли НРег(Размещение) = "допссылки" Тогда
			ВыводМеток = ?(ТекМетка.Ссылка.ВыводитьВДопСсылках.Пустая(),
						   ВыводПоУмолчанию,
						   ТекМетка.Ссылка.ВыводитьВДопСсылках);
		ИначеЕсли НРег(Размещение) = "заголовок" Тогда
			ВыводМеток = ?(ТекМетка.Ссылка.ВыводитьВЗаголовке.Пустая(),
						   ВыводПоУмолчанию,
						   ТекМетка.Ссылка.ВыводитьВЗаголовке);
		ИначеЕсли НРег(Размещение) = "поиск" Тогда
			ВыводМеток = ?(ТекМетка.Ссылка.ВыводитьВРезультатахПоиска.Пустая(),
						   ВыводПоУмолчанию,
						   ТекМетка.Ссылка.ВыводитьВРезультатахПоиска);
		Иначе
			ВыводМеток = Перечисления.бит_си_ВыводМеток.Метка;
		КонецЕсли;
		
		Если ВыводМеток = Перечисления.бит_си_ВыводМеток.НеВыводить Тогда
			Продолжить;
		КонецЕсли;
		Если ВыводМеток = Перечисления.бит_си_ВыводМеток.Ссылка Тогда
			ТекстМетки = ТекстМетки +
			"&nbsp;" + "<a href=""ВнСсылка=" + СокрЛП(ТекМетка.Ссылка.УникальныйИдентификатор()) + """>" +
			"<img alt=""" + ТекМетка.Наименование + """ title=""" +
			ТекМетка.Наименование + """ src = """ + ТекМетка.Картинка + """ />" + "</a>";
		ИначеЕсли ВыводМеток = Перечисления.бит_си_ВыводМеток.Метка Тогда
			ТекстМетки = ТекстМетки +
			"&nbsp;" + "<img alt=""" + ТекМетка.Наименование + """ title=""" +
			ТекМетка.Наименование + """ src = """ + ТекМетка.Картинка + """ />";
		КонецЕсли;
	КонецЦикла;
	Возврат ТекстМетки;
КонецФункции // ПолучитьHTMLТекстМеток()

&НаСервереБезКонтекста
// Получает 16-ричное представление числа.
// Параметры 
// 	ПарамЧисло			 -	Структура				 Число для преобразования.
// 	ДляWeb				 -	Булево					 Признак преобразования в формате для web.
// 	
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка					 16-ричное представление числа.
// 
Функция HEXЧисло(ПарамЧисло, ДляWeb = Ложь)
	РезЦел = бит_си_ОбщегоНазначения.Dec2HEX(ПарамЧисло);
	Если ДляWeb Тогда
		ВремРез = "";
		Для й = 1 По СтрДлина(РезЦел) / 2 Цикл
			ВремРез = ВремРез + "%" + Сред(РезЦел, й * 2 - 1, 2);
		КонецЦикла;
		РезЦел = ВремРез;
	КонецЕсли;
	Возврат РезЦел;
КонецФункции // HEXЧисло()

&НаСервереБезКонтекста
// Преобразовывает web-строку в обычную. Преобразует коды символов в исходной строке в символы.
// 
// Параметры 
// 	Строка             	 -	Строка                 	 Исходная строка.                                                  
// Возвращаемое значение:
// 	Возврат ...        	 -	Строка                 	 Преобразованная строка.                                           
// 
Функция ПодготовитьСтроку(Строка) Экспорт
	
	Стр = Строка;
	
	ТабЗамены = Новый Соответствие();
	Для й = 1 По 64 Цикл
		ТабЗамены.Вставить(HEXЧисло(й + 53391 + ?(й <= 48, 0, 192), Истина), Символ(1039 + й));
		ТабЗамены.Вставить("&#" + Формат(1039 + й, "ЧРГ=; ЧГ=") + ";", Символ(1039 + й));
	КонецЦикла;
	
	ТабЗамены.Вставить("%D0%81","е");
	ТабЗамены.Вставить("%D1%91","е");
	
	ТабЗамены.Вставить("&#1025;","е");
	ТабЗамены.Вставить("&#1105;","е");
	
	ТабЗамены.Вставить("%20"," ");
	ТабЗамены.Вставить("""","""""");
	
	Для Каждого ТекЗамена Из ТабЗамены Цикл
		Стр = СтрЗаменить(Стр, ТекЗамена.Ключ, ТекЗамена.Значение);
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции // ПодготовитьСтроку()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбработчикиСобытийФормыИсточникаСправочнойИнформации



&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
// 
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если НЕ Параметры.Свойство("ИсточникСИ") Тогда
		Возврат;
	КонецЕсли;
	
	оп_ИмяЗакладкиИсточника			= Параметры.ИмяЗакладкиИсточника;
	оп_ИсточникСИ					= Параметры.ИсточникСИ;
	оп_ИсточникСИЗаголовок			= Параметры.ИсточникСИЗаголовок;
	
	ВремНастройки = бит_си_ПолныеПрава.ПолучитьТекущуюНастройкуИсточника(оп_ИсточникСИ);
	Если ТипЗнч(ВремНастройки) = Тип("Структура") Тогда
		Если ВремНастройки.Свойство("ОбъектыОтбора") Тогда
			Попытка
				ЗначениеВРеквизитФормы(ВремНастройки.ОбъектыОтбора, "дп_ОбъектыОтбора");
			Исключение
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		Если ВремНастройки.Свойство("ОбъектыПривязки") Тогда
			Попытка
				ЗначениеВРеквизитФормы(ВремНастройки.ОбъектыПривязки, "дп_ОбъектыПривязки");
			Исключение
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьСтатьиИМетки();

	ТекОбработка  = РеквизитФормыВЗначение("Объект");
	дп_БиблиотекиJS = Новый Структура("jquery", "<!--
											 |" + ТекОбработка.ПолучитьМакет("Скрипты").ПолучитьТекст() + "// -->");
	дп_ШаблонСтраницы	= СтрЗаменить(ТекОбработка.ПолучитьМакет("ШаблонСтраницы").ПолучитьТекст(),
								  "##Styles##",ТекОбработка.ПолучитьМакет("Стили").ПолучитьТекст());
	дп_ШаблонСтраницы = СтрЗаменить(дп_ШаблонСтраницы, "##Libs##", "<script language=""javascript"">"+ дп_БиблиотекиJS.jquery +"</script>");
	дп_БИТИнфо			= ТекОбработка.ПолучитьМакет("БИТИнфо").ПолучитьТекст();
	дп_ТекущаяСсылка	= Новый Структура("Заголовок, Ссылка, ПараметрОткрытия","Разделы справочной информации","#Главная", "");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы
// 
Процедура ПриОткрытии(Отказ)
	Отказ = Истина;
КонецПроцедуры // ПриОткрытии()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБЯЗАТЕЛЬНЫЙ КОД ИНИЦИАЛИЗАЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ОбязательныйКодИнициализацииОбработкиИсточникаСправочнойИнформации

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЙ КОД ИНИЦИАЛИЗАЦИИ ОБРАБОТКИ ИСТОЧНИКА СПРАВОЧНОЙ ИНФОРМАЦИИ.

#Область ДополнительныйКодИнициализацииОбработкиИсточникаСправочнойИнформации

#КонецОбласти


