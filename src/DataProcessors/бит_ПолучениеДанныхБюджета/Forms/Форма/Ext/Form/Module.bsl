
#Область ОписаниеПеременных

// Служит для передачи вида сравнения между обработчиками.
&НаКлиенте
Перем мТекущийВидСравнения;

// Служит для передачи вида параметра между обработчиками.
&НаКлиенте
Перем мТекущийВидПараметра;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ДокументЗаполнения") Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	// Кэширование значений, используемых на клиенте.
	ЗаполнитьКэшЗначений(); 
	
	// Устанавливаем режим копирования.
	Параметры.Свойство("РежимЗаполнения", Объект.РежимЗаполнения);
	Если НЕ ЗначениеЗаполнено(Объект.РежимЗаполнения) Тогда
		Объект.РежимЗаполнения = "КопированиеБюджета";
	КонецЕсли;
	
	СтрРежимы = Обработки.бит_ПолучениеДанныхБюджета.ПолучитьРежимы(Объект.РежимЗаполнения);
	
	// Инициализация компоновщика.
	Если СтрРежимы.ЭтоКопированиеБюджета Тогда
		АдресСКД = Обработки.бит_ПолучениеДанныхБюджета.ИнициализироватьКомпоновщик("СКД_Копирование", Компоновщик, УникальныйИдентификатор);
	ИначеЕсли СтрРежимы.ЭтоПланированиеДДС Тогда
		АдресСКД = Обработки.бит_ПолучениеДанныхБюджета.ИнициализироватьКомпоновщик("СКД_Копирование", Компоновщик, УникальныйИдентификатор);
	ИначеЕсли СтрРежимы.ЭтоГрафикДоговоров Тогда	
		АдресСКД = Обработки.бит_ПолучениеДанныхБюджета.ИнициализироватьКомпоновщик("СКД_ГрафикДоговоров", Компоновщик, УникальныйИдентификатор);		
	КонецЕсли; 
	
	// Восстановление настройки по-умолчанию.
	УстановитьЗначенияПоУмолчанию();
	
	Если Параметры.Свойство("ДокументЗаполнения") 
		 И ЗначениеЗаполнено(Параметры.ДокументЗаполнения) Тогда
		
		Объект.ДокументЗаполнения = Параметры.ДокументЗаполнения;
		ДатаЗаполнения = Объект.ДокументЗаполнения.Дата;
		
		Объект.ВалютаДокумента		   = Объект.ДокументЗаполнения.ВалютаДокумента;
		Объект.КурсДокумента		   = Объект.ДокументЗаполнения.КурсДокумента;
		Объект.КратностьДокумента	   = Объект.ДокументЗаполнения.КратностьДокумента;
		Объект.Сценарий 			   = Объект.ДокументЗаполнения.Сценарий;
		Объект.ПериодичностьСдвигаДат  = Объект.Сценарий.бит_Периодичность;
		Объект.ВалютаОбработки         = Объект.Сценарий.Валюта;
		Объект.ЕдиницаИзмеренияСуммДокумента = Объект.ДокументЗаполнения.ЕдиницаИзмеренияСумм;
		
		ИзменениеВалюты();
		
	ИначеЕсли СтрРежимы.ЭтоПланированиеДДС Тогда
		ПараметрыЗаполнения = Параметры.ПараметрыЗаполнения;
		
		ПараметрыЗаполнения.Свойство("ВалютаДокумента"				, Объект.ВалютаДокумента);
		ПараметрыЗаполнения.Свойство("КурсДокумента"				, Объект.КурсДокумента);
		ПараметрыЗаполнения.Свойство("КратностьДокумента"			, Объект.КратностьДокумента);
		ПараметрыЗаполнения.Свойство("ВалютаОбработки"				, Объект.ВалютаОбработки);
		ПараметрыЗаполнения.Свойство("КурсОбработки"				, Объект.КурсОбработки);
		ПараметрыЗаполнения.Свойство("КратностьОбработки"			, Объект.КратностьОбработки);
		ПараметрыЗаполнения.Свойство("ПериодичностьСдвигаДат"		, Объект.ПериодичностьСдвигаДат);
		ПараметрыЗаполнения.Свойство("СтандартныйПериод"			, Объект.СтандартныйПериод);
		ПараметрыЗаполнения.Свойство("ЕдиницаИзмеренияСуммДокумента", Объект.ЕдиницаИзмеренияСуммДокумента);
		
		// Установим отбора компоновщика.
		СтруктураОтбора = Неопределено;
		Параметры.Свойство("СтруктураОтбора", СтруктураОтбора);
		
		Если НЕ СтруктураОтбора = Неопределено Тогда
			ПараметрыСКД = Компоновщик.Настройки.ПараметрыДанных;
			Для Каждого ЭлементОтбора Из СтруктураОтбора.Параметры Цикл
				ЗначениеПараметра = ПараметрыСКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ЭлементОтбора.Ключ));
				Если НЕ ЗначениеПараметра = Неопределено Тогда
					ЗначениеПараметра.Значение = ЭлементОтбора.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ИзменениеВалюты();
		
	ИначеЕсли Параметры.Свойство("ПараметрыЗаполнения")	Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ПараметрыЗаполнения);
	Иначе
		Объект.ВалютаДокумента = Константы.бит_ВалютаУправленческогоУчета.Получить();
		СтрКурса                  = бит_КурсыВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, ТекущаяДатаСеанса());
		Объект.КурсДокумента      = СтрКурса.Курс;
		Объект.КратностьДокумента = СтрКурса.Кратность;
		Объект.ЕдиницаИзмеренияСуммДокумента = Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы;
	КонецЕсли;
	
	флЭтоФормаВВода = ?(ТипЗнч(Объект.ДокументЗаполнения) = Тип("ДокументСсылка.бит_ФормаВводаБюджета"),Истина,Ложь);
	Элементы.ИспользоватьЗначенияПоУмолчанию.Видимость = флЭтоФормаВВода;
	
	Объект.ЕдиницаИзмеренияСуммОбработки = Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы;
	Если НЕ ЗначениеЗаполнено(Объект.ПериодичностьСдвигаДат) Тогда
		Объект.ПериодичностьСдвигаДат = Перечисления.бит_ПериодичностьПланирования.Месяц;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.СтандартныйПериод) Тогда
		Если ЗначениеЗаполнено(ДатаЗаполнения) Тогда
			Объект.СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
			Объект.СтандартныйПериод.ДатаНачала    = НачалоМесяца(ДатаЗаполнения);
			Объект.СтандартныйПериод.ДатаОкончания = КонецМесяца(ДатаЗаполнения);
		Иначе	
			Объект.СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотГод;
		КонецЕсли; 
	КонецЕсли; 
	
	ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
	
	Объект.РежимСообщений = "Все";
	
	
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма, "ОборотыПоБюджетам",
		фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	
	УстановитьВидимость();
	
	// Установка заголовка формы.
	УстановитьЗаголовокФормыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		ТекстПредупреждения = "ru = 'Данная обработка вызывается программно.
									|Вручную ее вызывать запрещено.'";
		ПоказатьПредупреждение(,НСтр(ТекстПредупреждения), 30);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ФормаКомандаВидимостьНастройки.Пометка = НЕ ПанельНастройкиСкрыта;	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма, Элемент, Объект, "ИсточникДанных",
		фКэшЗначений.СписокТиповИсточникДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ИсточникДанных.ВыбиратьТип = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	ИсточникДанныхИзменение();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОбработкиПриИзменении(Элемент)
	
	ИзменениеВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтклоненияПриИзменении(Элемент)
	
	ВидОтклоненияИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтклоненияКоличестваПриИзменении(Элемент)
	
	ВидОтклоненияКоличествоИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьСдвигаДатПриИзменении(Элемент)
	
	ПериодичностьСдвигаИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОтклоненияПриИзменении(Элемент)
	
	ЗначениеОтклоненияИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОтклоненияКоличестваПриИзменении(Элемент)
	
	ЗначениеОтклоненияКоличествоИзменение();	
	
КонецПроцедуры

&НаКлиенте
Процедура СдвигДатПриИзменении(Элемент)
	
	СдвигДатИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	ИзменениеПрофиля();
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОборотыПоБюджетам

&НаКлиенте
Процедура ОборотыПоБюджетамСуммаСценарийДляЗаполненияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ОборотыПоБюджетам.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		// Получим структуру курсов валют.
		СтруктураКурсыВалют = ПолучитьСтруктуруКурсовВалют();
		// Получим размерность единицы измерения сумм документа.
		РазмерностьЕдиницы = ПолучитьРазмерностьЕдиницыИзмеренияСумм();
		РассчитатьСуммуВВалютеДокументаВСтроке(ТекДанные, СтруктураКурсыВалют, РазмерностьЕдиницы)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметры

// Процедура выполняет обновление таблицы параметров.
// 
&НаСервере
Процедура ОбновитьТаблицуПараметров()
	
	бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Объект.ИсточникДанных, ТаблицаПараметры, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;	 	
	Если НоваяСтрока И НЕ Копирование Тогда  		
		ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение;   			
	КонецЕсли; 
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	ОграничитьОписаниеТиповПараметра();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыВидПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ИД = Элементы.ТаблицаПараметры.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменитьВидПараметра(ИД, мТекущийВидПараметра);
		мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
		ОграничитьОписаниеТиповПараметра();
	КонецЕсли; 
		
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗначениеПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные        = Элементы.ТаблицаПараметры.ТекущиеДанные;	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда  		
		СтандартнаяОбработка = Ложь;			
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение Тогда		
		Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура ограничивает описание типов в строке таблица параметров.
// 
&НаКлиенте
Процедура ОграничитьОписаниеТиповПараметра()

	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда
		ОписаниеОграничение = фКэшЗначений.ОписаниеТипаСтрока;
	Иначе
		
		Если ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда  		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина; 		
		Иначе	                                                        		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Ложь;  		
		КонецЕсли; 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоступныеТипы) Тогда
			ОписаниеОграничение = Новый ОписаниеТипов(ТекущиеДанные.ДоступныеТипы, МассивТипов);
		Иначе		
			ОписаниеОграничение = Новый ОписаниеТипов(фКэшЗначений.ОписаниеПроизвольногоТипа, МассивТипов);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Ограничим тип значения.
	Элементы.ТаблицаПараметрыЗначениеПараметра.ОграничениеТипа = ОписаниеОграничение;  

КонецПроцедуры

// Процедура выполняет действия, неоходимые при изменении вида параметра.
// 
// Параметры:
//  ИД  				 - Число.
//  мТекущийВидПараметра - ПеречислениеСсылка.бит_ВидыПараметровЗапроса.
// 
&НаСервере
Процедура ИзменитьВидПараметра(ИД, мТекущийВидПараметра)

	ТекущиеДанные = ТаблицаПараметры.НайтиПоИдентификатору(ИД);
	бит_МеханизмПолученияДанных.ИзменениеВидаПараметра(ТекущиеДанные, мТекущийВидПараметра);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборВОтчете

// Процедура - обработчик события "НачалоВыбора" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВидовСравнения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВидовСравнения);
	
КонецПроцедуры
     
// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеВидСравненияПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);	

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеЗначениеПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеВидСравненияПриИзмененииСервер(Ид, мТекущийВидСравнения)
		
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеВидСравненияПриИзменении(ТекущиеДанные, мТекущийВидСравнения);	

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеЗначениеПриИзмененииСервер(Ид)
	
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеЗначениеПриИзменении(ТекущиеДанные);
		
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ОтборВОтчете.ТекущиеДанные;	
	
	Если ТекущаяСтрока.Значение = Неопределено Тогда
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	Иначе	
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеОчистка" 
// табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	
КонецПроцедуры

// Процедура заполняет таблицу отборов. 
// 
&НаСервере
Процедура ЗаполнитьТаблицуОтборов()

	ТаблицаОтборов = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(Объект.ИсточникДанных, ТаблицаОтборов);
	ЗначениеВДанныеФормы(ТаблицаОтборов, ОтборВОтчете);	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Объект, "СтандартныйПериод");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВидимостьНастройки(Команда)
	
	ЭтаФорма.ПанельНастройкиСкрыта = НЕ ЭтаФорма.ПанельНастройкиСкрыта;
	Элементы.ФормаКомандаВидимостьНастройки.Пометка = НЕ ЭтаФорма.ПанельНастройкиСкрыта;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	Если ПодтверждениеОчисткиДанных() Тогда
		ОбновитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.ОборотыПоБюджетам, "Выполнять", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.ОборотыПоБюджетам, "Выполнять", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.ОборотыПоБюджетам, "Выполнять", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавить(Команда)
	
	ОповеститьОВыбореДанных("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	ОповеститьОВыбореДанных("Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИЗаменить(Команда)
	
	ОповеститьОВыбореДанных("Заменить");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИЗаполнить(Команда)
	
	ОбновитьДанные();
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.ОборотыПоБюджетам, "Выполнять", 1);
	ОповеститьОВыбореДанных("Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИДобавить(Команда)
	
	ОбновитьДанные();
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.ОборотыПоБюджетам, "Выполнять", 1);
	ОповеститьОВыбореДанных("Добавить");
	
КонецПроцедуры

// Процедура - действие команды "КомандаСохранитьНастройки".
// 
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		ПараметрыФормы.Вставить("СохраненнаяНастройка",ТекущаяНастройка);
	КонецЕсли; 
		
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ЗакрытиеФормыСохранения", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,, ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Обработка закрытия окна формы. 
// 
// Параметры:
//  СохрНастройка - .
// 
&НаКлиенте
Процедура ЗакрытиеФормыСохранения(СохрНастройка, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		ТекущаяНастройка = СохрНастройка;
		УстановитьЗаголовокФормы();
	КонецЕсли;

КонецПроцедуры

// Процедура - действие команды "КомандаВосстановитьНастройки".
// 
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("КомандаВосстановитьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,, ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	

КонецПроцедуры

// Обработка оповещения закрытия окна формы. 
// 
// Параметры:
//  ВыбНастройка - .
// 
&НаКлиенте
Процедура КомандаВосстановитьНастройкиЗавершение(ВыбНастройка, ДопПараметры) Экспорт

	Если ЗначениеЗаполнено(ВыбНастройка) Тогда        
		ТекущаяНастройка = ВыбНастройка;
		ПрименитьНастройки(ТекущаяНастройка, Ложь);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСНастройками

// Функция готовит стуктуру с настройками для сохранения.
// 
// Возвращаемое значение:
//   СтруктураНастройки   - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастройки = Новый Структура;
	
	СтруктураНастройки.Вставить("ИсточникДанных"    , Объект.ИсточникДанных);
	СтруктураНастройки.Вставить("СтандартныйПериод" , Объект.СтандартныйПериод);
	СтруктураНастройки.Вставить("РежимСообщений"    , Объект.РежимСообщений);
	СтруктураНастройки.Вставить("ВидОтклонения"     , Объект.ВидОтклонения);
	СтруктураНастройки.Вставить("ЗначениеОтклонения", Объект.ЗначениеОтклонения);
	СтруктураНастройки.Вставить("ВидОтклоненияКоличества"     , Объект.ВидОтклоненияКоличества);
	СтруктураНастройки.Вставить("ЗначениеОтклоненияКоличества", Объект.ЗначениеОтклоненияКоличества);
	СтруктураНастройки.Вставить("ПериодичностьСдвигаДат"      , Объект.ПериодичностьСдвигаДат);
	СтруктураНастройки.Вставить("СдвигДат"                    , Объект.СдвигДат);
	СтруктураНастройки.Вставить("РежимЗаполнения"             , Объект.РежимЗаполнения);
	СтруктураНастройки.Вставить("Профиль"                     , Объект.Профиль);
	СтруктураНастройки.Вставить("РежимВыбораСуммы"            , Объект.РежимВыбораСуммы);
	СтруктураНастройки.Вставить("ЗаполнятьКомментарийКСтрокамБюджета", Объект.ЗаполнятьКомментарийКСтрокамБюджета);
	
	ТабОтбор = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	СтруктураНастройки.Вставить("ОтборВОтчете", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабОтбор));
	
	ТабПараметры = ДанныеФормыВЗначение(ТаблицаПараметры, Тип("ТаблицаЗначений"));
	СтруктураНастройки.Вставить("ТаблицаПараметры", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабПараметры));
	СтруктураНастройки.Вставить("ПользовательскиеНастройки", Новый ХранилищеЗначения(Компоновщик.ПользовательскиеНастройки));
	
	Возврат СтруктураНастройки;
	
КонецФункции

// Функция применяет сохраненные настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Функция ПрименитьНастройки(ВыбНастройка, ОткрытиеФормы)

	флВыполнено = Ложь;
	
	ДанныеНастройки = Обработки.бит_ПолучениеДанныхБюджета.ИзвлечьНастройки(ВыбНастройка, Объект);
	
	Если ДанныеНастройки.Выполнено Тогда
		
		флВыполнено = Истина;
		
		ЗначениеВДанныеФормы(ДанныеНастройки.Таблица_ОтборВОтчете, ОтборВОтчете);
		ЗначениеВДанныеФормы(ДанныеНастройки.Таблица_Параметры   , ТаблицаПараметры);
		
		СтрРежимы = Обработки.бит_ПолучениеДанныхБюджета.ПолучитьРежимы(Объект.РежимЗаполнения);
		
		Если НЕ СтрРежимы.ЭтоПолучениеБюджета И ДанныеНастройки.Свойство("ПользовательскиеНастройки") Тогда
			Если ТипЗнч(ДанныеНастройки.ПользовательскиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
				Компоновщик.ЗагрузитьПользовательскиеНастройки(ДанныеНастройки.ПользовательскиеНастройки);
			КонецЕсли; // Это пользовательские настройки.
		КонецЕсли; // НЕ СтрРежимы.ЭтоПолучениеДанных.
		ТекущаяНастройка = ВыбНастройка;
		УстановитьЗаголовокФормыСервер();				
		
	Иначе	
		Если ДанныеНастройки.КодВозврата = -1 И НЕ ОткрытиеФормы Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДанныеНастройки.СодержаниеОшибки);
		КонецЕсли; 
	КонецЕсли; 
	
	УстановитьВидимость();
	
	Возврат флВыполнено;
	 
КонецФункции

// Процедура устанавливает настройку либо из последних использованных, либо из настройки по умолчанию.
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	// Получим настройку по - умолчанию и последнюю использованну.
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда		
		ПрименитьНастройки(НастройкаПоУмолчанию, Истина);		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.РежимСообщений) Тогда 	
		Объект.РежимСообщений = "Ошибки";   	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

// Функция получает структуру курсов валют.
//
// Возвращаемое значение:
//  СтруктураКурсовВалют - Структура.
//
&НаКлиенте
Функция ПолучитьСтруктуруКурсовВалют()
	
	// Получим структуру курсов валют.
	СтруктураКурсыВалют = Новый Структура;
	
	// Сформируем структуру курсов валюты документа.
	СтруктураКурса = Новый Структура;
	СтруктураКурса.Вставить("Курс",		Объект.КурсДокумента);
	СтруктураКурса.Вставить("Кратность",Объект.КратностьДокумента);
	СтруктураКурса.Вставить("Валюта",	Объект.ВалютаДокумента);
	
	СтруктураКурсыВалют.Вставить("Документ", СтруктураКурса);
	
	// Сформируем структуру курсов валюты обработки.
	СтруктураКурса = Новый Структура;
	СтруктураКурса.Вставить("Курс",		Объект.КурсОбработки);
	СтруктураКурса.Вставить("Кратность",Объект.КратностьОбработки);
	СтруктураКурса.Вставить("Валюта",	Объект.ВалютаОбработки);
	
	СтруктураКурсыВалют.Вставить("Обработка", СтруктураКурса);
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции

// Функция получает размерность единицы измерения сумм.
// 
// Параметры:
//  ЕдиницаИзмеренияСумм - ПеречислениеСсылка.бит_ЕдиницыИзмеренияСумм.
// 
// Возвращаемое значение:
//  Коэффициент - Число.
// 
&НаКлиенте
Функция ПолучитьРазмерностьЕдиницыИзмеренияСумм()

	СоответствиеКоэффициентов = Новый Соответствие;
	СоответствиеКоэффициентов.Вставить(ПредопределенноеЗначение("Перечисление.бит_ЕдиницыИзмеренияСумм.Единицы"),	1);
	СоответствиеКоэффициентов.Вставить(ПредопределенноеЗначение("Перечисление.бит_ЕдиницыИзмеренияСумм.Тысячи"),	1000);
	СоответствиеКоэффициентов.Вставить(ПредопределенноеЗначение("Перечисление.бит_ЕдиницыИзмеренияСумм.Миллионы"),	1000000);
	
	Коэффициент = СоответствиеКоэффициентов.Получить(Объект.ЕдиницаИзмеренияСуммДокумента);
    Коэффициент = ?(Коэффициент = Неопределено, 1, Коэффициент);
	
	Возврат Коэффициент;
	
КонецФункции

// Процедура рассчитывает сумму в валюте документа в строке.
//
// Параметры:
//  ТекущаяСтрока 	    - СтрокаТабличнойЧасти.ОборотыПоБюджетам.
//  СтруктураКурсыВалют - Структура.
//  РазмерностьЕдиницы  - Число, размерность единицы измерения сумм.
//
&НаКлиенте 
Процедура РассчитатьСуммуВВалютеДокументаВСтроке(ТекущаяСтрока, СтруктураКурсыВалют, РазмерностьЕдиницы)
	
	СтруктураКурсовОбработки 	   = СтруктураКурсыВалют.Обработка;
	СтруктураКурсовВалютыДокумента = СтруктураКурсыВалют.Документ;
	
	// Расчитаем сумму в указанных единицах измерения сумм документа.
	Знаменатель = ?(РазмерностьЕдиницы = 0, 1, РазмерностьЕдиницы);	
	СуммаВЕдиницеДокумента = ТекущаяСтрока.СуммаСценарийДляЗаполнения / Знаменатель;
		
	// Рассчитаем сумму в валюте документа.
	СуммаВВалютеДокумента = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаВЕдиницеДокумента,
		СтруктураКурсовОбработки.Валюта, СтруктураКурсовВалютыДокумента.Валюта, СтруктураКурсовОбработки.Курс,
		СтруктураКурсовВалютыДокумента.Курс, СтруктураКурсовОбработки.Кратность, СтруктураКурсовВалютыДокумента.Кратность);
	
	ТекущаяСтрока.СуммаСценарийВВалютеДокумента = СуммаВВалютеДокумента;
	
КонецПроцедуры

// Процедура кеширует значения, в дальнейшем используемые на клиенте. 
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Заполним список типов для быстрого выбора составного.
	МассивТипов  = Метаданные.Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.Реквизиты.ИсточникДанных.Тип.Типы();
	СписокВыбора = бит_ОбщегоНазначения.ПодготовитьСписокВыбораТипа(МассивТипов);
	фКэшЗначений.Вставить("СписокТиповИсточникДанных", СписокВыбора);
	фКэшЗначений.Вставить("МассивВидовСравнения"	 , бит_МеханизмПолученияДанных.СформироватьСписокВыбораДляОтборовВОтчете("Массив"));
	
	фКэшЗначений.Вставить("ТекущийПользователь"		 , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	фКэшЗначений.Вставить("НастраиваемыйОбъект"		 , Метаданные.Обработки.бит_ПолучениеДанныхБюджета.ПолноеИмя());
	фКэшЗначений.Вставить("ТипНастройки"             , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	КвСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов, , КвСтроки);
	фКэшЗначений.Вставить("ОписаниеТипаСтрока", ОписаниеТипаСтрока);
	фКэшЗначений.Вставить("ОписаниеПроизвольногоТипа", бит_ОбщегоНазначения.ОписаниеПроизвольногоТипа());
	
	// Данные по дополнительным аналитикам.
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));	
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыПараметровЗапроса);
	КэшПеречисления.Вставить("бит_ВидыПараметровЗапроса", ТекПеречисление);
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры

// Обрабатывает изменение источника данных. 
// 
&НаСервере
Процедура ИсточникДанныхИзменение()
		
	ЗаполнитьТаблицуОтборов();
	ОбновитьТаблицуПараметров();
	
КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()
	
	СтрРежимы = Обработки.бит_ПолучениеДанныхБюджета.ПолучитьРежимы(Объект.РежимЗаполнения);
	
	Элементы.ГруппаОтбор.Видимость              = СтрРежимы.ЭтоПолучениеБюджета;
	Элементы.ГруппаПараметры.Видимость          = СтрРежимы.ЭтоПолучениеБюджета;
	Элементы.ИсточникДанных.Видимость           = СтрРежимы.ЭтоПолучениеБюджета;
	Элементы.НастройкаПулаПодключений.Видимость = СтрРежимы.ЭтоПолучениеБюджета;
	Элементы.ГруппаНастройкиОтборКомпоновщика.Видимость = НЕ СтрРежимы.ЭтоПолучениеБюджета;
	Элементы.ЗаполнятьКомментарийКСтрокамБюджета.Видимость = СтрРежимы.ЭтоКопированиеБюджета;
	
	Элементы.РежимСообщений.Видимость				 = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.ВидОтклонения.Видимость				 = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.ЗначениеОтклонения.Видимость			 = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.ВидОтклоненияКоличества.Видимость		 = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.ЗначениеОтклоненияКоличества.Видимость	 = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.ПериодичностьСдвигаДат.Видимость		 = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.СдвигДат.Видимость						 = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.Профиль.Видимость						 = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.ИспользоватьЗначенияПоУмолчанию.Видимость = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.ГруппаДанные.Видимость					 = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.ФормаКомандаВидимостьНастройки.Видимость = НЕ СтрРежимы.ЭтоПланированиеДДС;
	Элементы.ФормаГруппаПеренести.Видимость		 	 = СтрРежимы.ЭтоПланированиеДДС;
	Элементы.РежимВыбораСуммы.Видимость				= СтрРежимы.ЭтоГрафикДоговоров;
	
	Элементы.ГруппаНастройки.Видимость = НЕ ПанельНастройкиСкрыта;
	Элементы.ЗначениеОтклонения.Доступность           = ЗначениеЗаполнено(Объект.ВидОтклонения);
	Элементы.ЗначениеОтклоненияКоличества.Доступность = ЗначениеЗаполнено(Объект.ВидОтклоненияКоличества);
	
	Элементы.ОборотыПоБюджетамСуммаСценарийДляЗаполнения.Заголовок    =  ЗаголовокКолонкиСумм(НСтр("ru = 'Сумма'"),
		Объект.ЕдиницаИзмеренияСуммОбработки, Объект.ВалютаОбработки);
																							  
	Элементы.ОборотыПоБюджетамСуммаСценарийВВалютеДокумента.Заголовок =  ЗаголовокКолонкиСумм(НСтр("ru = 'Сумма документа'"),
		Объект.ЕдиницаИзмеренияСуммДокумента, Объект.ВалютаДокумента);	
																								 
	флРаспределение = ?(ЗначениеЗаполнено(Объект.Профиль), Истина, Ложь);
	Элементы.ОборотыПоБюджетамПроцентРаспределения.Видимость = флРаспределение;
	
КонецПроцедуры

// Функция формирует заголовок суммовой колонки с учетом единицы измерения сумм и валюты.
// 
// Параметры:
//   НазваниеКолонки - Строка.
//   ЕдиницаИзмерения - ПеречислениеСсылка.бит_ЕдиницыИзмеренияСумм.
//   Валюта - СправочникСсылка.Валюты.
// 
// Возвращаемое значение:
//  СтрЗаголовок - Строка.
// 
&НаСервере
Функция ЗаголовокКолонкиСумм(НазваниеКолонки, ЕдиницаИзмерения, Валюта)
	
	СтрШаблон = "%1% ( %2%%3% )";
	
	Если ЕдиницаИзмерения = Перечисления.бит_ЕдиницыИзмеренияСумм.Тысячи Тогда
		СтрЕдиница =  НСтр("ru = 'тыс.'")+" ";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.бит_ЕдиницыИзмеренияСумм.Миллионы Тогда
		СтрЕдиница =  НСтр("ru = 'млн.'")+" ";
	Иначе	
		СтрЕдиница = "";
	КонецЕсли; 
	
	СтрЗаголовок = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(СтрШаблон, НазваниеКолонки, СтрЕдиница, Валюта);
	Возврат СтрЗаголовок;
	
КонецФункции

// Процедура обновляет таблицу данных по источникам данных. 
// 
&НаСервере
Процедура ОбновитьДанные()

	флОК = ПроверитьЗаполнение();
	
	Если НЕ флОК Тогда
		Возврат;
	КонецЕсли; 
	
	Объект.ОборотыПоБюджетам.Очистить();
	Объект.ТаблицаРезультат.Очистить();
	
	СтрРежимы = Обработки.бит_ПолучениеДанныхБюджета.ПолучитьРежимы(Объект.РежимЗаполнения);
	
	Если НЕ СтрРежимы.ЭтоПолучениеБюджета Тогда
		
		// Получение данных с использованием СКД.
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
		ПараметрыСКД = Компоновщик.Настройки.ПараметрыДанных;
		ПараметрыСКД.УстановитьЗначениеПараметра("НачалоПериода"   , Объект.СтандартныйПериод.ДатаНачала);
		ПараметрыСКД.УстановитьЗначениеПараметра("КонецПериода"    , Объект.СтандартныйПериод.ДатаОкончания);
		Если СтрРежимы.ЭтоГрафикДоговоров Тогда
			ПараметрыСКД.УстановитьЗначениеПараметра("РежимВыбораСуммы", Объект.РежимВыбораСуммы);
		КонецЕсли; 
		ТаблицаРезультат = Обработки.бит_ПолучениеДанныхБюджета.ПолучитьДанныеСКД(СхемаКомпоновкиДанных, Компоновщик, НЕ Объект.ЗаполнятьКомментарийКСтрокамБюджета);
		
	Иначе	
		
		// Получение данных по источникам.
		ТабОтборВОтчете  = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
		ТабПараметры     = ДанныеФормыВЗначение(ТаблицаПараметры, Тип("ТаблицаЗначений"));
		
		ТаблицаРезультат = Обработки.бит_ПолучениеДанныхБюджета.ПолучитьДанные(Объект.ИсточникДанных, Объект.СтандартныйПериод,
			ТабОтборВОтчете, ТабПараметры, Объект.НастройкаПулаПодключений); 
		
	КонецЕсли; 
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		ТекстСообщения =  НСтр("ru = 'Нет данных, удовлетворяющих отбору'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли; 

	Объект.ТаблицаРезультат.Загрузить(ТаблицаРезультат);
	ВыполнитьПреобразованиеДанных();
	
КонецПроцедуры

// Процедура выполняет преобразование полученных данных 
// (сдвиг периода, отклонение суммы и количества, распределение по профилю) 
// согласно указанных в обработке настроек.
// 
&НаСервере
Процедура ВыполнитьПреобразованиеДанных()

	ОбрОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_ПолучениеДанныхБюджета"));
	ОбрОбъект.ВыполнитьПреобразованиеДанных();
	ЗначениеВДанныеФормы(ОбрОбъект, Объект);
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты обработки.
// 
&НаСервере
Процедура ИзменениеВалюты() Экспорт
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Объект.ВалютаОбработки, ДатаЗаполнения);
	Объект.КурсОбработки = СтруктураКурса.Курс;
	Объект.КратностьОбработки = СтруктураКурса.Кратность;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура обрабатывает изменение вида отклонения сумм. 
// 
&НаСервере
Процедура ВидОтклоненияИзменение()

	Если Объект.ВидОтклонения = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Абсолютное Тогда
		
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2, ДопустимыйЗнак.Любой);
		Элементы.ЗначениеОтклонения.ОграничениеТипа = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
		
		ЗначениеОтклонения = Элементы.ЗначениеОтклонения.ОграничениеТипа.ПривестиЗначение(ЗначениеОтклонения);
		
	ИначеЕсли Объект.ВидОтклонения = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Процент Тогда
		
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2, ДопустимыйЗнак.Любой);
		Элементы.ЗначениеОтклонения.ОграничениеТипа = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
		
		ЗначениеОтклонения = Элементы.ЗначениеОтклонения.ОграничениеТипа.ПривестиЗначение(ЗначениеОтклонения);
		
		Если ЗначениеОтклонения > 100 Тогда
			ЗначениеОтклонения = 100;
		ИначеЕсли ЗначениеОтклонения < -100 Тогда
			ЗначениеОтклонения = -100;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидОтклонения) Тогда
		ЗначениеОтклонения = 0;
	КонецЕсли;
	
	// Установить видимость и доступность реквизитов.
	УстановитьВидимость();
	
	СтруктураКурсыВалют = Обработки.бит_ПолучениеДанныхБюджета.ПолучитьСтруктуруКурсовВалют(Объект);
	Обработки.бит_ПолучениеДанныхБюджета.РассчитатьСуммыДляЗаполненияВОборотахПоБюджету(Объект.ОборотыПоБюджетам,
		СтруктураКурсыВалют, Объект.ЕдиницаИзмеренияСуммДокумента, Объект.ВидОтклонения, Объект.ЗначениеОтклонения);	

КонецПроцедуры

// Процедура обрабатывает изменение значение отклонения сумм.
// 
&НаСервере
Процедура ЗначениеОтклоненияИзменение()
	
	СтруктураКурсыВалют = Обработки.бит_ПолучениеДанныхБюджета.ПолучитьСтруктуруКурсовВалют(Объект);
	Обработки.бит_ПолучениеДанныхБюджета.РассчитатьСуммыДляЗаполненияВОборотахПоБюджету(Объект.ОборотыПоБюджетам,
		СтруктураКурсыВалют, Объект.ЕдиницаИзмеренияСуммДокумента, Объект.ВидОтклонения, Объект.ЗначениеОтклонения);	
	
КонецПроцедуры

// Процедура обрабатывает изменение вида отклонения количества. 
// 
&НаСервере
Процедура ВидОтклоненияКоличествоИзменение()
	
	Если Объект.ВидОтклоненияКоличества = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Абсолютное Тогда
		
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15,3, ДопустимыйЗнак.Любой);
		Элементы.ЗначениеОтклоненияКоличества.ОграничениеТипа = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
		
		Объект.ЗначениеОтклоненияКоличества = Элементы.ЗначениеОтклоненияКоличества.ОграничениеТипа.ПривестиЗначение(Объект.ЗначениеОтклоненияКоличества);
		
	ИначеЕсли Объект.ВидОтклоненияКоличества = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Процент Тогда
		
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2, ДопустимыйЗнак.Любой);
		Элементы.ЗначениеОтклоненияКоличества.ОграничениеТипа = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
		
		Объект.ЗначениеОтклоненияКоличества = Элементы.ЗначениеОтклоненияКоличества.ОграничениеТипа.ПривестиЗначение(Объект.ЗначениеОтклоненияКоличества);
		
		Если Объект.ЗначениеОтклоненияКоличества > 100 Тогда
			Объект.ЗначениеОтклоненияКоличества = 100;
		ИначеЕсли Объект.ЗначениеОтклоненияКоличества < -100 Тогда
			Объект.ЗначениеОтклоненияКоличества = -100;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидОтклоненияКоличества) Тогда
		
		Объект.ЗначениеОтклоненияКоличества = 0;
		
	КонецЕсли;
	
	// Установить видимость и доступность реквизитов.
	УстановитьВидимость();
	
	// Выполним расчет количества для заполнения.
	Обработки.бит_ПолучениеДанныхБюджета.РассчитатьКоличествоДляЗаполненияВОборотахПоБюджету(Объект.ОборотыПоБюджетам,
		Объект.ВидОтклоненияКоличества, Объект.ЗначениеОтклоненияКоличества);
	
КонецПроцедуры

// Процедура обрабатывает изменение отклонения количества. 
// 
&НаСервере
Процедура ЗначениеОтклоненияКоличествоИзменение()
	
	// Выполним расчет количества для заполнения.
	Обработки.бит_ПолучениеДанныхБюджета.РассчитатьКоличествоДляЗаполненияВОборотахПоБюджету(Объект.ОборотыПоБюджетам,
		Объект.ВидОтклоненияКоличества, Объект.ЗначениеОтклоненияКоличества);
	
КонецПроцедуры

// Процедура обрабатывает изменение периодичности сдвига. 
// 
&НаСервере
Процедура ПериодичностьСдвигаИзменение()
	
	Если ЗначениеЗаполнено(Объект.Профиль) Тогда
		// Сдвиг и распределение.
		ВыполнитьПреобразованиеДанных();
	Иначе	
		// Только сдвиг.
		ВыполнитьСдвигДатДанныхБюджета();	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обрабатывает изменения числа сдвигаемых периодов. 
// 
&НаСервере
Процедура СдвигДатИзменение()
	
	ВыполнитьСдвигДатДанныхБюджета();	
	
КонецПроцедуры

// Процедура выполняет сдвиг дат данных бюджета.
// 
&НаСервере
Процедура ВыполнитьСдвигДатДанныхБюджета() Экспорт
		
	// Выполним получение даты заполнения с учетом сдвига дат.
	Для Каждого ТекСтрока Из Объект.ОборотыПоБюджетам Цикл
		ТекСтрока.ПериодДляЗаполнения = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ТекСтрока.Период, Объект.СдвигДат,
			Объект.ПериодичностьСдвигаДат);
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует структуру результата.
// 
// Параметры:
//   Режим - Строка.
//  
// Возвращаемое значение:
//   Струкутура.
// 
&НаСервере
Функция СформироватьСтруктуруРезультата(Режим, ИдентификаторВладельца)

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("Режим"	 , Режим);
	РезСтруктура.Вставить("ИспользоватьЗначенияПоУмолчанию", Объект.ИспользоватьЗначенияПоУмолчанию);
	РезСтруктура.Вставить("Валюта",    Объект.ВалютаОбработки);
	РезСтруктура.Вставить("Курс",      Объект.КурсОбработки);
	РезСтруктура.Вставить("Кратность", Объект.КратностьОбработки);
	
	Отбор          = Новый Структура("Выполнять", Истина);
	ТаблицаБюджета = Объект.ОборотыПоБюджетам.Выгрузить(Отбор);
	РезСтруктура.Вставить("КоличествоСтрок", ТаблицаБюджета.Количество());
	АдресОборотовПоБюджетамВХранилище = ПоместитьВоВременноеХранилище(ТаблицаБюджета, ИдентификаторВладельца);
	РезСтруктура.Вставить("АдресОборотовПоБюджетам", АдресОборотовПоБюджетамВХранилище);
	
	Возврат РезСтруктура;
	
КонецФункции

// Процедура устанавливает заголовок формы на сервере.
// 
&НаСервере
Процедура УстановитьЗаголовокФормыСервер()
	
	СтрРежимы = ПолучитьРежимы(Объект.РежимЗаполнения);
	ЭтаФорма.Заголовок = СформироватьЗаголовокФормы(СтрРежимы, ТекущаяНастройка);
	
КонецПроцедуры

// Процедура обрабатывает изменение профиля. 
// Выполняется распределение полученных данных по профилю. 
// 
&НаСервере
Процедура ИзменениеПрофиля()
	
	ВыполнитьПреобразованиеДанных();	
	
КонецПроцедуры

// Процедура опововещает форму-владельца о выборе данных.
// 
// Параметры:
//  Режим - Строка.
// 
&НаКлиенте
Процедура ОповеститьОВыбореДанных(Режим)

	РезСтруктура = СформироватьСтруктуруРезультата(Режим, ВладелецФормы.УникальныйИдентификатор);
	
	Если РезСтруктура.КоличествоСтрок > 0 Тогда
		Оповестить("ПолучениеДанныхБюджета", РезСтруктура, ВладелецФормы.УникальныйИдентификатор);
	Иначе
	    ТекстСообщения =  НСтр("ru = 'Не выбраны строки для переноса в документ.'");
		ПоказатьПредупреждение(,ТекстСообщения,, НСтр("ru = 'Перенос в документ'"));
	КонецЕсли; 

КонецПроцедуры

// Функция запрашивает у пользователя подтверждение на очистку данных.
// 
// Параметры:
//   вхТекст - Строка.
// 
// Возвращаемое значение:
//  флВыполнять - Булево.
// 
&НаКлиенте
Функция ПодтверждениеОчисткиДанных(вхТекст = "")
	
	флВыполнять = Истина;
	
	Если Объект.ОборотыПоБюджетам.Количество() > 0  Тогда
		флВыполнять = Ложь;
		Если ПустаяСтрока(вхТекст) Тогда
			ТекстВопроса =  НСтр("ru = 'Данные будут очищены. Продолжить?'");
		Иначе	
			ТекстВопроса = вхТекст;
		КонецЕсли; 
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьВопросЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	КонецЕсли; 
	
	Возврат флВыполнять;
	
КонецФункции

// Процедура обработчик оповещения "КомандаОбновитьВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура КомандаОбновитьВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
	     // Выполнение по запросу от пользователя.
		 ОбновитьДанные();
	КонецЕсли; 
	
КонецПроцедуры

// Функция определяет режимы заполнения обработки.
// 
// Параметры:
//  РежимЗаполнения - Строка.
// 
// Возвращаемое значение:
//  СтрРежимы - Структура.
// 
&НаСервере
Функция ПолучитьРежимы(РежимЗаполнения)

	СтрРежимы = Обработки.бит_ПолучениеДанныхБюджета.ПолучитьРежимы(РежимЗаполнения);
	Возврат СтрРежимы;
	
КонецФункции

// Функция формирует заголовок формы обработки.
// 
// Параметры:
//  РежимЗаполнения - Строка.
//  ТекущаяНастройка - СправочникСсылка.бит_СохраненныеНастройки.
// 
// Возвращаемое значение:
//  СтрЗаголовок - Строка.
// 
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокФормы(СтрРежимы, ТекущаяНастройка)
	
	Если СтрРежимы.ЭтоКопированиеБюджета Тогда
		СтрЗаголовок =  НСтр("ru = 'Копирование данных бюджета'");
	ИначеЕсли СтрРежимы.ЭтоГрафикДоговоров Тогда	
		СтрЗаголовок =  НСтр("ru = 'Копирование данных графиков договоров'");
	Иначе	
		СтрЗаголовок =  НСтр("ru = 'Получение данных бюджета'");
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		СтрЗаголовок = СтрЗаголовок + "("+ТекущаяНастройка+")";
	КонецЕсли; 
	
	Возврат СтрЗаголовок;
	
КонецФункции

// Процедура устанавливает заголовок формы на клиенте.
// 
&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	СтрРежимы = ПолучитьРежимы(Объект.РежимЗаполнения);
	ЭтаФорма.Заголовок = СформироватьЗаголовокФормы(СтрРежимы, ТекущаяНастройка);
	
КонецПроцедуры

#КонецОбласти
