#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыИФункцииДляРаботыСоСхемойКомпоновкиДанных
	
// Процедура инициализирует компоновщик, используемый для фильтрации структуры дерева.
// 
Функция ИнициализироватьКомпоновщик(ИмяМакетаКомпоновки, Компоновщик, УникальныйИдентификатор) Экспорт
	
	АдресКомпоновки = "";
	
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	// Создаем СКД по запросу.
	СКД = Обработки.бит_ПолучениеДанныхБюджета.ПолучитьМакет(ИмяМакетаКомпоновки);
	бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СКД,
		"НаборДанных1", НастройкиИзмерений);

	АдресКомпоновки = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	// Инициализируем компоновщик.
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресКомпоновки);
	Попытка
		Компоновщик.Инициализировать(ИсточникНастроек);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось инициализировать компоновщик. Описание ошибки: %1.';
							|en = 'The linker could not be initialized. Error description: %1.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	Возврат АдресКомпоновки;
	
КонецФункции

// Процедура получает данных по источникам данных. 
// 
Функция ПолучитьДанные(ИсточникДанных, СтандартныйПериод, ОтборВОтчете, ТаблицаПараметры, НастройкаПулаПодключений) Экспорт

	ГраницаНач = СтандартныйПериод.ДатаНачала;
	ГраницаКон = Новый Граница(СтандартныйПериод.ДатаОкончания, ВидГраницы.Включая);
	
	ПараметрыЗапроса = бит_МеханизмПолученияДанных.ЗаполнитьСтруктуруПараметровИзТаблицы(ТаблицаПараметры);
	
	Если ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
		// Получим таблицу с данными по источнику данных.
		СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
		СтрПар.НастройкаПулаПодключений = НастройкаПулаПодключений;
		СтрПар.Параметры                = ПараметрыЗапроса;
		СтрПар.ОтборВОтчете             = ОтборВОтчете;
		
		ТаблицаРезультат = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ИсточникДанных, ГраницаНач, ГраницаКон, СтрПар);
	Иначе
		ПоказыватьИндикатор = НЕ бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("НеОтображатьИндикаторКомпоновкиИсточников");
		// Получим таблицу с данными по способу компоновки источников данных.
        СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоСпособуКомпоновки();
		СтрПар.НастройкаПулаПодключений = НастройкаПулаПодключений;
		СтрПар.Параметры                = ПараметрыЗапроса;		
		СтрПар.ОтборВОтчете             = ОтборВОтчете;
		СтрПар.ПоказыватьИндикатор      = ПоказыватьИндикатор;
		
		ТаблицаРезультат = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточникам(ИсточникДанных, ГраницаНач, ГраницаКон, СтрПар);
		бит_МеханизмПолученияДанных.ДополнитьРезультатИВыполнитьРасчет(ИсточникДанных, ТаблицаРезультат);
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Функция получает данные с помощью СКД.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных.
//  Компоновщик - КомпоновщикНастроекКомпоновкиДанных.
//
// Возвращаемое значение:
//  ТаблицаРезультат - ТаблицаЗначений.
//
Функция ПолучитьДанныеСКД(СхемаКомпоновкиДанных, Компоновщик, НеЗаполнятьКомментарий = Ложь) Экспорт
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиСКД = Компоновщик.ПолучитьНастройки(); 
	
	Если НеЗаполнятьКомментарий Тогда
		Для каждого эл Из НастройкиСКД.Выбор.Элементы Цикл
			Если эл.Поле = Новый ПолеКомпоновкиДанных("Комментарий") Тогда
				эл.Использование = Ложь;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиСКД,,,
													Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// удалим пустые строки.
	Если ТаблицаРезультат.Количество() > 0 Тогда
		
		Если ТаблицаРезультат.Колонки.Найти("Количество") = Неопределено Тогда
			НулевыеСтроки = ТаблицаРезультат.НайтиСтроки(Новый Структура("СуммаСценарий", 0));
		Иначе	
			НулевыеСтроки = ТаблицаРезультат.НайтиСтроки(Новый Структура("СуммаСценарий, Количество", 0, 0));
		КонецЕсли;
		
		Для каждого Стр Из НулевыеСтроки Цикл
			ТаблицаРезультат.Удалить(Стр);		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#КонецОбласти 	

#Область Расчеты

// Процедура выполняет расчет суммы для заполнения в строке ТЧ.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.ОборотыПоБюджетам.
// 
Процедура РассчитатьСуммуДляЗаполненияВСтроке(ТекущаяСтрока, ВидОтклонения, ЗначениеОтклонения) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ТекущаяСтрока.СтатьяОборотов.Учет_Сумма Тогда
		СуммаДляЗаполнения = 0;
	ИначеЕсли ВидОтклонения = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Процент Тогда
		СуммаДляЗаполнения = ТекущаяСтрока.СуммаСценарий + ТекущаяСтрока.СуммаСценарий * ЗначениеОтклонения / 100;
	ИначеЕсли ВидОтклонения = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Абсолютное Тогда
		СуммаДляЗаполнения = ТекущаяСтрока.СуммаСценарий + ЗначениеОтклонения;
	Иначе
		СуммаДляЗаполнения = ТекущаяСтрока.СуммаСценарий;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаСценарийДляЗаполнения = СуммаДляЗаполнения;
	
КонецПроцедуры

// Процедура выполняет расчет количества для заполнения в строке ТЧ.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.ОборотыПоБюджетам.
// 
Процедура РассчитатьКоличествоДляЗаполненияВСтроке(ТекущаяСтрока, ВидОтклоненияКоличества, ЗначениеОтклоненияКоличества) Экспорт
	
	Если Не ТекущаяСтрока.СтатьяОборотов.Учет_Количество Тогда
		КоличествоДляЗаполнения = 0;
	ИначеЕсли ВидОтклоненияКоличества = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Процент Тогда
		КоличествоДляЗаполнения = ТекущаяСтрока.Количество + ТекущаяСтрока.Количество * ЗначениеОтклоненияКоличества / 100;
	ИначеЕсли ВидОтклоненияКоличества = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Абсолютное Тогда
		КоличествоДляЗаполнения = ТекущаяСтрока.Количество + ЗначениеОтклоненияКоличества;
	Иначе
		КоличествоДляЗаполнения = ТекущаяСтрока.Количество;
	КонецЕсли;
	
	ТекущаяСтрока.КоличествоДляЗаполнения = КоличествоДляЗаполнения;
	
КонецПроцедуры

// Процедура рассчитывает сумму в валюте документа в строке.
// 
// Параметры:
//  ТекущаяСтрока 	    - СтрокаТабличнойЧасти.ОборотыПоБюджетам.
//  СтруктураКурсыВалют - Структура.
//  РазмерностьЕдиницы  - Число, размерность единицы измерения сумм.
// 
Процедура РассчитатьСуммуВВалютеДокументаВСтроке(ТекущаяСтрока, СтруктураКурсыВалют, РазмерностьЕдиницы) Экспорт
	
	СтруктураКурсовОбработки 	   = СтруктураКурсыВалют.Обработка;
	СтруктураКурсовВалютыДокумента = СтруктураКурсыВалют.Документ;
	
	// Расчитаем сумму в указанных единицах измерения сумм документа.
	СуммаВЕдиницеДокумента = бит_ОбщегоНазначения.ПересчитатьИзРазмерностиВРазмерность(ТекущаяСтрока.СуммаСценарийДляЗаполнения,
		1, РазмерностьЕдиницы);
		
	// Рассчитаем сумму в валюте документа.
	СуммаВВалютеДокумента = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаВЕдиницеДокумента,
		СтруктураКурсовОбработки.Валюта, СтруктураКурсовВалютыДокумента.Валюта, СтруктураКурсовОбработки.Курс,
		СтруктураКурсовВалютыДокумента.Курс, СтруктураКурсовОбработки.Кратность, СтруктураКурсовВалютыДокумента.Кратность);
	
	ТекущаяСтрока.СуммаСценарийВВалютеДокумента = СуммаВВалютеДокумента;
	
КонецПроцедуры

// Процедура выполняет расчет суммы в валюте документа из суммы сценария в строке ТЧ.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.ОборотыПоБюджетам.
// 
Процедура РассчитатьСуммуСценарийВВалютеДокументаВСтроке(ТекущаяСтрока, СтруктураКурсыВалют, ЕдиницаИзмеренияСуммДокумента) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получим размерность единицы измерения сумм документа.
	РазмерностьЕдиницы = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСуммДокумента);
	// Выполним расчет суммы в валюте документа.
	РассчитатьСуммуВВалютеДокументаВСтроке(ТекущаяСтрока, СтруктураКурсыВалют, РазмерностьЕдиницы);
	
КонецПроцедуры

// Процедура добавляет ошибку округления в последнюю строку. 
// 
Процедура СкорректироватьОшибкуОкругления(ИсходнаяСтрока, Итоги, СтрокаРаспределение, ИмяРесурса) Экспорт
	
	Дельта = ИсходнаяСтрока[ИмяРесурса] - Итоги[ИмяРесурса];
	Если Дельта <> 0 Тогда
		СтрокаРаспределение[ИмяРесурса] = СтрокаРаспределение[ИмяРесурса] + Дельта;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

// Процедура заполняет таб часть целевого документа. 
// 
// Параметры:
//  ИсточникЗаполнения - ТаблицаЗначений.
//  ПриемникЗаполнения - ТабличнаяЧасть.
//  ТипДокументаПриемника - ТипЗначения.
// 
Процедура ЗаполнитьТабЧасть(ИсточникЗаполнения, ПриемникЗаполнения, ТипДокументаПриемника = Неопределено) Экспорт
	
	Счетчик = 1;
	ЭтоФВБ = Ложь;
	Если ТипДокументаПриемника = Тип("ДокументОбъект.бит_ФормаВводаБюджета") Тогда
		ЭтоФВБ = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы Из ИсточникЗаполнения Цикл
		НоваяСтрока = ПриемникЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Период     = СтрокаТаблицы.ПериодДляЗаполнения;
		НоваяСтрока.Количество = СтрокаТаблицы.КоличествоДляЗаполнения;
		НоваяСтрока.Сумма      = СтрокаТаблицы.СуммаСценарийВВалютеДокумента;
		Если ЭтоФВБ Тогда
			НоваяСтрока.ИД = Счетчик;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заменяет строки в табличной части целевого документа по статьям оборотов и периодам.
// 
// Параметры:
//  ИсточникЗаполнения - ТаблицаЗначений.
//  ПриемникЗаполнения - ТаблицаЗначений.
//  ТипДокументаПриемника - ТипЗначения.
// 
Процедура ЗаполнитьТабЧастьСЗаменой(ИсточникЗаполнения, ПриемникЗаполнения, ТипДокументаПриемника = Неопределено) Экспорт
	
	УдалитьЗаменяемыеСтроки(ИсточникЗаполнения, ПриемникЗаполнения);
	ЗаполнитьТабЧасть(ИсточникЗаполнения, ПриемникЗаполнения, ТипДокументаПриемника); 
	
КонецПроцедуры

// Функция определяет режимы заполнения обработки.
// 
// Параметры:
//  РежимЗаполнения - Строка
// 
// Возвращаемое значение:
//  СтрРежимы - Структура.
// 
Функция ПолучитьРежимы(РежимЗаполнения) Экспорт
	
	СтрРежимы = Новый Структура;
	СтрРежимы.Вставить("ЭтоКопированиеБюджета",	?(РежимЗаполнения = "КопированиеБюджета", Истина, Ложь));
	СтрРежимы.Вставить("ЭтоГрафикДоговоров",	?(РежимЗаполнения = "ГрафикДоговоров", Истина, Ложь));
	СтрРежимы.Вставить("ЭтоПланированиеДДС",	?(РежимЗаполнения = "ПланированиеДДС", Истина, Ложь));
	СтрРежимы.Вставить("ЭтоПолучениеБюджета",	НЕ СтрРежимы.ЭтоКопированиеБюджета И НЕ СтрРежимы.ЭтоГрафикДоговоров И НЕ СтрРежимы.ЭтоПланированиеДДС);
	
	Возврат СтрРежимы;
	
КонецФункции

Функция ПолучитьСтруктуруКурсовВалют(Контейнер) Экспорт
	
	// Получим структуру курсов валют.
	СтруктураКурсыВалют = Новый Структура;
	
	// Сформируем структуру курсов валюты документа.
	СтруктураКурса = Новый Структура;
	СтруктураКурса.Вставить("Курс",		Контейнер.КурсДокумента);
	СтруктураКурса.Вставить("Кратность",Контейнер.КратностьДокумента);
	СтруктураКурса.Вставить("Валюта",	Контейнер.ВалютаДокумента);
	
	СтруктураКурсыВалют.Вставить("Документ", СтруктураКурса);
	
	// Сформируем структуру курсов валюты обработки.
	СтруктураКурса = Новый Структура;
	СтруктураКурса.Вставить("Курс",		Контейнер.КурсОбработки);
	СтруктураКурса.Вставить("Кратность",Контейнер.КратностьОбработки);
	СтруктураКурса.Вставить("Валюта",	Контейнер.ВалютаОбработки);
	
	СтруктураКурсыВалют.Вставить("Обработка", СтруктураКурса);
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции

Функция ИзвлечьНастройки(ВыбНастройка, ОбъектПриемник) Экспорт
	
	РезДанные = Новый Структура;
	РезДанные.Вставить("Выполнено",			Ложь);
	РезДанные.Вставить("КодВозврата",		0);
	РезДанные.Вставить("РежимЗаполнения",	Неопределено);
	РезДанные.Вставить("СодержаниеОшибки",	"");
	
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			Если ОбъектПриемник.РежимЗаполнения <> СтруктураНастроек.РежимЗаполнения Тогда
				РезДанные.КодВозврата		= -1;
				РезДанные.РежимЗаполнения	= ОбъектПриемник.РежимЗаполнения;
				РезДанные.СодержаниеОшибки	= НСтр("ru = 'Сохраненная настройка не предназначена для текущего варианта использования формы.'");
			Иначе	
				
				РезДанные.Выполнено = Истина;
				
				ОбъектПриемник.ИсточникДанных  				= СтруктураНастроек.ИсточникДанных;
				ОбъектПриемник.СтандартныйПериод 			= СтруктураНастроек.СтандартныйПериод;
				ОбъектПриемник.РежимСообщений    			= СтруктураНастроек.РежимСообщений;
				ОбъектПриемник.ЗначениеОтклонения			= СтруктураНастроек.ЗначениеОтклонения;
				ОбъектПриемник.ВидОтклонения     			= СтруктураНастроек.ВидОтклонения;
				ОбъектПриемник.ЗначениеОтклоненияКоличества = СтруктураНастроек.ЗначениеОтклоненияКоличества;
				ОбъектПриемник.ПериодичностьСдвигаДат       = СтруктураНастроек.ПериодичностьСдвигаДат;
				ОбъектПриемник.СдвигДат                     = СтруктураНастроек.СдвигДат;
				
				Если СтруктураНастроек.Свойство("ЗаполнятьКомментарийКСтрокамБюджета") Тогда
					ОбъектПриемник.ЗаполнятьКомментарийКСтрокамБюджета = СтруктураНастроек.ЗаполнятьКомментарийКСтрокамБюджета;
				КонецЕсли;
				
				Если СтруктураНастроек.Свойство("Профиль") Тогда
					ОбъектПриемник.Профиль = СтруктураНастроек.Профиль;
				КонецЕсли;
				
				Если СтруктураНастроек.Свойство("РежимВыбораСуммы") Тогда
					ОбъектПриемник.РежимВыбораСуммы = СтруктураНастроек.РежимВыбораСуммы;
				КонецЕсли; 
				
				Таблица_ОтборВОтчете = ?(ТипЗнч(СтруктураНастроек.ОтборВОтчете) = Тип("ТаблицаЗначений")
										, СтруктураНастроек.ОтборВОтчете
										, бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ОтборВОтчете));
				Таблица_Параметры    = ?(ТипЗнч(СтруктураНастроек.ТаблицаПараметры) = Тип("ТаблицаЗначений")
										, СтруктураНастроек.ТаблицаПараметры
										, бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ТаблицаПараметры));
				
				
				РезДанные.Вставить("Таблица_ОтборВОтчете", Таблица_ОтборВОтчете);
				РезДанные.Вставить("Таблица_Параметры", Таблица_Параметры);
				
				СтрРежимы = ПолучитьРежимы(ОбъектПриемник.РежимЗаполнения);
				
				Если НЕ СтрРежимы.ЭтоПолучениеБюджета Тогда
					// Загрузки пользовательских настроек.
					ПользовательскиеНастройки = СтруктураНастроек.ПользовательскиеНастройки.Получить();
					РезДанные.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				КонецЕсли; // НЕ СтрРежимы.ЭтоПолучениеДанных.
			КонецЕсли;  // Совпадение режимов заполнения.
		КонецЕсли;	 
	КонецЕсли; 
	
	Возврат РезДанные;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет расчет сумм для заполнения в оборотах по бюджету.
// 
Процедура РассчитатьСуммыДляЗаполненияВОборотахПоБюджету(ТаблицаОборотыПоБюджетам
	                                                     , СтруктураКурсыВалют
														 , ЕдиницаИзмеренияСуммДокумента
														 , ВидОтклонения
														 , ЗначениеОтклонения) Экспорт
	
	Если ТаблицаОборотыПоБюджетам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получим размерность единицы измерения сумм документа.
	РазмерностьЕдиницы = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСуммДокумента);
	
	// Выполним пересчет сумм для заполнения.
	Для Каждого ТекСтрока Из ТаблицаОборотыПоБюджетам Цикл
		// Рассчитаем сумму для заполнения.
		РассчитатьСуммуДляЗаполненияВСтроке(ТекСтрока, ВидОтклонения, ЗначениеОтклонения);
		// Выполним расчет суммы в валюте документа.
		РассчитатьСуммуВВалютеДокументаВСтроке(ТекСтрока, СтруктураКурсыВалют, РазмерностьЕдиницы);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет расчет количества для заполнения в оборотах по бюджету.
// 
Процедура РассчитатьКоличествоДляЗаполненияВОборотахПоБюджету(ТабОборотыПоБюджетам
	                                                          , ВидОтклоненияКоличества
															  , ЗначениеОтклоненияКоличества) Экспорт
	
	Если ТабОборотыПоБюджетам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Выполним пересчет сумм для заполнения.
	Для Каждого ТекСтрока Из ТабОборотыПоБюджетам Цикл
		// Рассчитаем количество для заполнения.
		РассчитатьКоличествоДляЗаполненияВСтроке(ТекСтрока, ВидОтклоненияКоличества, ЗначениеОтклоненияКоличества);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗаменяемыеСтроки(ИсточникЗаполнения, ПриемникЗаполнения)
	
	Если ПриемникЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = "ПериодДляЗаполнения, СтатьяОборотов";
	Группировки = ИсточникЗаполнения.Скопировать(,Шаблон);
	Группировки.Колонки["ПериодДляЗаполнения"].Имя = "Период";
	
	Шаблон = "Период, СтатьяОборотов";
	Группировки.Свернуть(Шаблон);
	
	Отбор = Новый Структура(Шаблон);
	Для Каждого СтрокаТаблицы Из Группировки Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		НайденныеСтроки = ПриемникЗаполнения.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПриемникЗаполнения.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли