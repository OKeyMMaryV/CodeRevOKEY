
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_ОчисткаКорректировочныхДвижений;
	
	// Вызов механизма защиты
	
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшированныеЗначения(мКэшЗначений);
	
	Объект.Период.ДатаНачала    = НачалоГода(ТекущаяДата());
	Объект.Период.ДатаОкончания = КонецГода(ТекущаяДата());
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "НачалоВыбора" поля ввода "ОбъектСистемы".
// 
&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(мКэшЗначений.ВидОбъектаРегистрБухгалтерии);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,Объект.ОбъектСистемы);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы",мКэшЗначений.ДоступныеОбъектыСистемы);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ОбъектСистемы".
// 
&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	ИскомыйОбъект = мКэшЗначений.ДоступныеОбъектыСистемы.НайтиПоЗначению(Объект.ОбъектСистемы);
	
	Если ИскомыйОбъект = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Неверно указан объект системы!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,"Объект.ОбъектСистемы");
		
		Объект.ОбъектСистемы = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ИнициализацияКомпоновщика();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "ВыполнитьОбработку" формы.
// 
&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан объект системы!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,"Объект.ОбъектСистемы",Отказ);
		
	Иначе
		ИскомыйОбъект = мКэшЗначений.ДоступныеОбъектыСистемы.НайтиПоЗначению(Объект.ОбъектСистемы);
		
		Если ИскомыйОбъект = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно указан объект системы!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,"Объект.ОбъектСистемы",Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьРегистраторыДляОчистки();
	
	КолВоДокументов = ТаблицаКОчистке.Количество();
	
	Если КолВоДокументов = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для очистки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Обнаружены документы ("
						+КолВоДокументов
						+") с корректировочными движениями."
						+Символы.ПС
						+"Выполнить очистку корректировочных движений?'");;
						
		Оповещение = Новый ОписаниеОповещения("ВопросВыполнитьОчистку",ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
						
	КонецЕсли;
	
КонецПроцедуры

// Процедура вопрос на выполнение очистки. 
// 
&НаКлиенте 
Процедура ВопросВыполнитьОчистку(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОчистку();		
                
КонецПроцедуры // ВопросВыполнитьОчистку

// Процедура - обработчик команды "ДействиеВыборПериода" формы.
// 
&НаКлиенте
Процедура ДействиеВыборПериода(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Объект.Период;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВыборПериода",ЭтаФорма);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Процедура выбора периода.
// 
&НаКлиенте 
Процедура ПоказатьВыборПериода(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
	
		Объект.Период = РезультатВыбора;
	
	КонецЕсли; 
	
КонецПроцедуры // ПоказатьВыборПериода

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшированныеЗначения(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	КэшированныеЗначения.Вставить("ВидОбъектаРегистрБухгалтерии", Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	
	ДоступныеОбъектыСистемы = Новый СписокЗначений;
	
	МетаРегистрыБухгалтерии = Метаданные.РегистрыБухгалтерии;
	
	Для Каждого ТекущийМетаРегистр Из МетаРегистрыБухгалтерии Цикл
		
		Если НЕ бит_РаботаСМетаданными.ЕстьРеквизит("ВидПроводки", ТекущийМетаРегистр)
			ИЛИ НЕ бит_РаботаСМетаданными.ЕстьРеквизит("ДатаФормирования", ТекущийМетаРегистр) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(ТекущийМетаРегистр);
		
		Если ЗначениеЗаполнено(ОбъектСистемы) Тогда
			
			ДоступныеОбъектыСистемы.Добавить(ОбъектСистемы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	КэшированныеЗначения.Вставить("ДоступныеОбъектыСистемы", ДоступныеОбъектыСистемы);
	
КонецПроцедуры

// Процедура выполняет инициализацию компоновщика настроек.
// 
// 
&НаСервере
Процедура ИнициализацияКомпоновщика() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРегистра.Регистратор
	|{ВЫБРАТЬ
	|	Регистратор.*}
	|ИЗ
	|	РегистрБухгалтерии."+Объект.ОбъектСистемы.ИмяОбъекта+" КАК ТаблицаРегистра
	|ГДЕ
	|	(ТаблицаРегистра.ВидПроводки = &ВидПроводкиСторно
	|			ИЛИ ТаблицаРегистра.ВидПроводки = &ВидПроводкиПрошлыйПериод)
	|	И ВЫБОР
	|			КОГДА &ДатаНачала <> &ПустаяДата
	|					И &ДатаОкончания <> &ПустаяДата
	|				ТОГДА ТаблицаРегистра.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			КОГДА &ДатаНачала = &ПустаяДата
	|					И &ДатаОкончания <> &ПустаяДата
	|				ТОГДА ТаблицаРегистра.Период <= &ДатаОкончания
	|			КОГДА &ДатаНачала <> &ПустаяДата
	|					И &ДатаОкончания = &ПустаяДата
	|				ТОГДА ТаблицаРегистра.Период >= &ДатаНачала
	|		КОНЕЦ
	|{ГДЕ
	|	ТаблицаРегистра.Организация.*}";
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя 				  = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя 						= "НаборДанных"; 
	НаборДанных.ИсточникДанных 				= "ИсточникДанных";
	НаборДанных.Запрос 						= ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей= Истина;
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Заголовок 	= "Регистратор";
	НовоеПоле.Поле 			= "Регистратор";
	НовоеПоле.ПутьКДанным 	= "Регистратор";
	
	ОтборСКД = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор;
	
	НовыйОтбор = ОтборСКД.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Организация");
	НовыйОтбор.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.Использование	= Ложь;
	НовыйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	НовыйОтбор.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор; // Это чтобы поле отображалось на форме в пользовательских настройках.
	
	// Определим структуру возвращаемой таблицы
	ГруппировкаКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ВыбранноеПоле = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Заголовок 	= "Регистратор";
	ВыбранноеПоле.Поле      	= Новый ПолеКомпоновкиДанных("Регистратор");
	
	ПолеГруппировки = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Регистратор");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	ПолеГруппировки.ТипДополнения  = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	Объект.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры // ИнициализацияЗапроса()

// Функция получает регистраторы, содержащие корректирующие проводки.
// 
// Возвращаемое значение:
//   ТаблицаРегистраторов   - ТаблицаЗначений.
// 
&НаСервере
Процедура ПолучитьРегистраторыДляОчистки() Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ПараметрыСКД = Объект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("ДатаНачала"   ,Объект.Период.ДатаНачала);
	ПараметрыСКД.УстановитьЗначениеПараметра("ДатаОкончания",Объект.Период.ДатаОкончания);
	ПараметрыСКД.УстановитьЗначениеПараметра("ПустаяДата"   ,Дата('00010101'));
	ПараметрыСКД.УстановитьЗначениеПараметра("ВидПроводкиСторно"       ,Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно);
	ПараметрыСКД.УстановитьЗначениеПараметра("ВидПроводкиПрошлыйПериод",Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
												Объект.КомпоновщикНастроек.ПолучитьНастройки(),
												,
												,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаРегистраторов = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРегистраторов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТаблицаКОчистке.Загрузить(ТаблицаРегистраторов);
	
КонецПроцедуры // ПолучитьРегистраторыДляОчистки()

// Процедура выполняет очистку корректировочных движений.
// 
// Параметры:
//  ТаблицаКОчистке  - Таблица
// 
&НаСервере
Процедура ВыполнитьОчистку() Экспорт

	КолВоДокументов = ТаблицаКОчистке.Количество();	
	
	Счетчик 		= 0;
	
	Если Объект.ВыполнятьВТранзакции Тогда
	
		НачатьТранзакцию();
	
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ТаблицаКОчистке Цикл
		
		Счетчик     = Счетчик + 1;		
		
		НаборЗаписей = РегистрыБухгалтерии[Объект.ОбъектСистемы.ИмяОбъекта].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаТаблицы.Регистратор);
		НаборЗаписей.Прочитать();
		
		КоличествоЗаписей = НаборЗаписей.Количество();
		флЗаписывать = Ложь;
		Для н = 0 По КоличествоЗаписей - 1 Цикл
			
			инд = КоличествоЗаписей - 1 - н;
			ТекущаяЗапись = НаборЗаписей[инд];
			Если ТекущаяЗапись.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод 
				 ИЛИ ТекущаяЗапись.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно Тогда
				
				НаборЗаписей.Удалить(ТекущаяЗапись);
				флЗаписывать = Истина;
				
			КонецЕсли; 
			
		КонецЦикла; // По строкам набора записей

		Если флЗаписывать Тогда
		
			НаборЗаписей.Записать();
		
		КонецЕсли; 
		
		// очистка соответствия оборотов трансляции.
		НаборЗаписей = РегистрыНакопления.бит_СоответствиеОборотовТрансляции.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаТаблицы.Регистратор);
		НаборЗаписей.Прочитать();
		
		КоличествоЗаписей = НаборЗаписей.Количество();
		флЗаписывать = Ложь;
		Для н = 0 По КоличествоЗаписей - 1 Цикл
			
			инд = КоличествоЗаписей - 1 - н;
			ТекущаяЗапись = НаборЗаписей[инд];
			Если ТекущаяЗапись.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод 
				 ИЛИ ТекущаяЗапись.ВидПроводки = Перечисления.бит_КонтрольПериодов_ВидыПроводок.Сторно Тогда
				
				НаборЗаписей.Удалить(ТекущаяЗапись);
				флЗаписывать = Истина;
				
			КонецЕсли; 
			
		КонецЦикла; // По строкам набора записей

		Если флЗаписывать Тогда
		
			НаборЗаписей.Записать();
		
		КонецЕсли; 
				
	КонецЦикла; // По регистраторам
	
	Если Объект.ВыполнятьВТранзакции Тогда
	
		ЗафиксироватьТранзакцию();
	
	КонецЕсли; 
	
	ТекстСообщения = НСтр("ru = 'Очистка корректировочных движений завершена!'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры // ВыполнитьОчистку()

#КонецОбласти

