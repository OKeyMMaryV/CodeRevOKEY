
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_НастройкаДополнительныхПравПользователей;
	
	// Вызов механизма защиты
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "Пользователь".
// 
&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	КоличствоПредыдущее = КоличествоСтрок;
	
	ЗаполнитьТаблицуПрав();
		
	// Раскрываем все уровни
	КоличествоВерхнихСтрок = ЭтаФорма.ДеревоПрав.ПолучитьЭлементы().Количество();
	Для i = 0 По (КоличествоВерхнихСтрок - 1) Цикл
		
		СтрокаДерева = ЭтаФорма.ДеревоПрав.ПолучитьЭлементы()[i];
		Элементы.ДеревоПрав.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
			
	КонецЦикла; 
	
КонецПроцедуры // ПользовательПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерева

// Процедура - обработчик события "ПриИзменении" флажка "Значение" табличного поля "ДеревоПрав".
// 
&НаКлиенте
Процедура ЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПрав.ТекущиеДанные;
	Значение = ТекущиеДанные.Значение;
	ЗафиксироватьИзменения(ТекущиеДанные.Право, Значение);
	
	ИзменитьЗначенияПодстрок(ТекущиеДанные.ПолучитьИдентификатор(), Значение);
	
	ТекущиеДанные.Изменено = Истина;
	
КонецПроцедуры // ЗначениеПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы
 
// Процедура - обработчик события "Нажатие" кнопки "Записать".
// 
&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьИзмененияВРегистр();
	
	УстановитьНеИзменено(ДеревоПрав);
	
КонецПроцедуры // Записать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура сбрасывает все значения элемента "Изменено" таблицы значений в Ложь.
// 
// Параметры:
//  СтрокаДерева  - Данные формы Дерево.
// 
&НаКлиенте
Процедура УстановитьНеИзменено(СтрокаДерева)

	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементов Цикл  
		
		Строка.Изменено = Ложь;
				
		УстановитьНеИзменено(Строка);
		
	КонецЦикла; 	

КонецПроцедуры // УстановитьНеИзменено()
            
// Процедура заполняет таблицу прав.
// 
&НаСервере
Процедура ЗаполнитьТаблицуПрав()

	ТаблицаИзменений.Очистить();
	ДанныеДерева = ЭтаФорма.ДеревоПрав.ПолучитьЭлементы();
	ДанныеДерева.Очистить();
	 	
	ВыбранныйПользователь = Объект.Пользователь;
	Если Не ЗначениеЗаполнено(ВыбранныйПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Объект.Пользователь);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПВХправ.Ссылка 			 КАК Право,
	|	ПВХправ.Ссылка.ЭтоГруппа КАК ЭтоГруппа,
	|	РегНастройки.Значение
    |
	|ИЗ  
	|	ПланВидовХарактеристик.бит_ДополнительныеПраваПользователей КАК ПВХправ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиДополнительныхПравПользователей КАК РегНастройки
	|		ПО ПВХправ.Ссылка = РегНастройки.Право
	| 		И (РегНастройки.Пользователь = &Пользователь)
    |
	|УПОРЯДОЧИТЬ ПО
	|  	Ссылка ИЕРАРХИЯ
	|";
		   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	НомерСтроки = 0;
	ДобавитьУровень(Выборка, ДеревоПрав, НомерСтроки);

	КоличествоСтрок = КоличествоСтрок + НомерСтроки;
	
	Элементы.ДеревоПрав.НачальноеОтображениеДерева    = НачальноеОтображениеДерева.РаскрыватьВсеУровни;	
	
КонецПроцедуры // ЗаполнитьТаблицуПрав() 

// Процедура заполняет значениями строку дерева.
// 
// Параметры:
//  Выборка  - Выборка из результата запроса.
//  Строка   - ДанныеФормыДерево.
// 
&НаСервереБезКонтекста
Функция ДобавитьУровень(ВыборкаУзел, Строка, НомерСтроки)
	
	Пока ВыборкаУзел.Следующий() Цикл
	
		КоллекцияЭлементов = Строка.ПолучитьЭлементы();

	    ЭлементДерева = КоллекцияЭлементов.Добавить();
	    ЗаполнитьЗначенияСвойств(ЭлементДерева, ВыборкаУзел);
		
		ЭлементДерева.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		// Картинка группы или элемента
	    Если ЭлементДерева.Право.ЭтоГруппа Тогда
	    	ЭлементДерева.Картинка = БиблиотекаКартинок.бит_Казна_Папка;
	    Иначе
	    	ЭлементДерева.Картинка = БиблиотекаКартинок.бит_Реквизит;
	  	КонецЕсли; 
		
		// Вывод подуровней
		Выборка = ВыборкаУзел.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	    ДобавитьУровень(Выборка, ЭлементДерева, НомерСтроки);
		
	КонецЦикла;
    		
КонецФункции // ДобавитьУровень() 
                         
// Процедура фиксирует изменение прав пользователя в таблице изменений.
// 
// Параметры:
//  Право    - ПланВидовХарактеристикСсылка.бит_ДополнительныеПраваПользователей.
//  Значение - Булево.
// 
&НаСервере
Процедура ЗафиксироватьИзменения(Право, Значение)

	Если Право.ЭтоГруппа Тогда
		Возврат;	
	КонецЕсли; 
	
	СтрокаЗаменена = Ложь;
	
	мТаблицаИзменений = ДанныеФормыВЗначение(ТаблицаИзменений, Тип("ТаблицаЗначений")); 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Право", Право);
	СписокСтрок = мТаблицаИзменений.НайтиСтроки(Отбор);
	Для каждого Строка Из СписокСтрок Цикл
		Строка.Значение = Значение;
		СтрокаЗаменена = Истина;
	КонецЦикла; 
	
	Если Не СтрокаЗаменена Тогда
		СтрокаИзменений = мТаблицаИзменений.Добавить();
		СтрокаИзменений.Право 	 = Право;
		СтрокаИзменений.Значение = Значение;
	КонецЕсли; 
	
	ЗначениеВДанныеФормы(мТаблицаИзменений, ТаблицаИзменений);
   	
КонецПроцедуры // ЗафиксироватьИзменения()

// Процедура записывает установленные права 
// в регистр сведений бит_НастройкиДополнительныхПравПользователей.
// 
&НаСервере
Процедура ЗаписатьИзмененияВРегистр()

	мТаблицаИзменений = ДанныеФормыВЗначение(ТаблицаИзменений, Тип("ТаблицаЗначений")); 

	Для каждого Строка Из мТаблицаИзменений Цикл
		
		МенеджерЗаписи = РегистрыСведений.бит_НастройкиДополнительныхПравПользователей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Строка);
		МенеджерЗаписи.Пользователь   = Объект.Пользователь; 
		МенеджерЗаписи.Записать();
  					
	КонецЦикла; 
	
	мТаблицаИзменений.Очистить();
	ЗначениеВДанныеФормы(мТаблицаИзменений, ТаблицаИзменений);

КонецПроцедуры // ЗаписатьИзмененияВРегистр() 

// Процедура изменяет значения прав для элементов текущей группы.
// 
// Параметры:
//  СтрокаДерева  - строка дерева значений, Ид.
//  Значение.
// 
&НаСервере
Процедура ИзменитьЗначенияПодстрок(СтрокаДерева, Значение)

	ТекСтрокаДерева = ?(ТипЗнч(СтрокаДерева) = Тип("Число")
						, ДеревоПрав.НайтиПоИдентификатору(СтрокаДерева)
						, СтрокаДерева);
		
	КоллекцияЭлементов = ТекСтрокаДерева.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементов Цикл  
		
		Строка.Значение = Значение;
		Строка.Изменено = Истина;
		
		Если Не Строка.Право.ЭтоГруппа Тогда
			ЗафиксироватьИзменения(Строка.Право, Значение);
       	КонецЕсли; 
		
		ИзменитьЗначенияПодстрок(Строка, Значение);
		
	КонецЦикла; 

КонецПроцедуры // ИзменитьЗначенияПодстрок()

#КонецОбласти

