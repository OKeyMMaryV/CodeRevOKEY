
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	МетаданныеОбъекта = Метаданные.Обработки.бит_ФормированиеРасходныхДокументов;
	
	// Вызов механизма защиты
	
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();

	// Отобразим дополнительные измерения в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	,"ПереченьДокументов"
																	,фКэшЗначений.ИзмеренияДоп
																	,фКэшЗначений.НастройкиИзмерений);

																	
	// Инициализация схемы компоновки данных
	АдресСхемыКомпоновкиДанных = ИнициализироватьКомпоновщикСервер(Объект.Компоновщик);
	
	УстановитьОтборСформированныхДокументов(СформированныеДокументы, Новый СписокЗначений());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьЗначенияПоУмолчанию();
	
	Элементы.ФормаВидимостьНастройки.Пометка = НЕ ПанельНастройкиСкрыта;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереченьДокументов

// Процедура - обработчик события "Очистка" любого поля ввода табличного поля "ПереченьДокументов".
// 
&НаКлиенте
Процедура ПереченьДокументовПолеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" любого поля ввода табличного поля "ПереченьДокументов".
// 
&НаКлиенте
Процедура ПереченьДокументовПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - действие команды "УстановитьВсе".
// 
&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	ОбработатьФлаги(1);
	
КонецПроцедуры

// Процедура - действие команды "СнятьВсе".
// 
&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ОбработатьФлаги(0);
	
КонецПроцедуры

// Процедура - действие команды "Инвертировать".
// 
&НаКлиенте
Процедура Инвертировать(Команда)
	
	ОбработатьФлаги(2);
	
КонецПроцедуры

// Процедура - действие команды "ВидимостьНастройки".
// 
&НаКлиенте
Процедура ВидимостьНастройки(Команда)
	
	ПанельНастройкиСкрыта = НЕ ПанельНастройкиСкрыта;
	
	Элементы.ФормаВидимостьНастройки.Пометка = НЕ ПанельНастройкиСкрыта;
	
	Элементы.ГруппаОтборИПорядок.Видимость = НЕ ПанельНастройкиСкрыта;
	
КонецПроцедуры

// Процедура - действие команды "ДействиеНастройкаПериод".
// 
&НаКлиенте
Процедура ДействиеНастройкаПериод(Команда)
	
	ВыборПериода(Объект.ПериодРасхода);
	
КонецПроцедуры

// Процедура - действие команды "ДействияФормыНастройка".
// 
&НаКлиенте
Процедура ДействияФормыНастройка(Команда)
	
	СтруктураНастроек = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы = Новый Структура("СтруктураНастроек", СтруктураНастроек);

	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиОкончание",ЭтаФорма);
	ОткрытьФорму("Обработка.бит_ФормированиеРасходныхДокументов.Форма.ФормаНастройки",ПараметрыФормы,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура окончание процедуры "ДействияФормыНастройка".
// 
&НаКлиенте 
Процедура ОткрытьНастройкиОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		УстановитьДопНастройки(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие команды "ДействияФормыОбновить".
// 
&НаКлиенте
Процедура ДействияФормыОбновить(Команда)
	
	Если Объект.ПереченьДокументов.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ДействияФормыОбновитьОкончание", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, НСтр("ru='Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет); 
		
	Иначе
		
		// Обновление табличных полей.
		ОбновитьПереченьДокументов();
		
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура окончание процедуры "ДействияФормыОбновить".
// 
&НаКлиенте 
Процедура ДействияФормыОбновитьОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПереченьДокументов.Очистить();
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.ГруппаПереченьДокументов;	
	
	// Обновление табличных полей.
	ОбновитьПереченьДокументов();
	
КонецПроцедуры

// Процедура - действие команды "ВсеРасходныеДокументы".
// 
&НаКлиенте
Процедура ВсеРасходныеДокументы(Команда)
	
	СоздатьРасходныеДокументы();
	
КонецПроцедуры

// Процедура - действие команды "АвансовыеОтчеты".
// 
&НаКлиенте
Процедура АвансовыеОтчеты(Команда)
	
	СоздатьРасходныеДокументы(фКэшЗначений.Перечисления.бит_ВидыРасходныхДокументов.АвансовыйОтчет);
	
КонецПроцедуры

// Процедура - действие команды "ПоступленияДопРасходов".
// 
&НаКлиенте
Процедура ПоступленияДопРасходов(Команда)
	
	СоздатьРасходныеДокументы(фКэшЗначений.Перечисления.бит_ВидыРасходныхДокументов.ПоступлениеДопРасходов);
	
КонецПроцедуры

// Процедура - действие команды "ПоступленияТоваровУслуг".
// 
&НаКлиенте
Процедура ПоступленияТоваровУслуг(Команда)
	
	СоздатьРасходныеДокументы(фКэшЗначений.Перечисления.бит_ВидыРасходныхДокументов.ПоступлениеТоваровУслуг);
	
КонецПроцедуры

// Процедура - действие команды "НастройкиСохранить".
// 
&НаКлиенте
Процедура НастройкиСохранить(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - действие команды "НастройкиВосстановить".
// 
&НаКлиенте
Процедура НастройкиВосстановить(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура НастройкиВосстановитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура открывает форму выбора периода.
// 
// Параметры:
//  Период  - Стандартный период
// 
&НаКлиенте
Процедура ВыборПериода(Период)

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Период;
	
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение",ЭтаФорма);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Процедура выбора периода 
// 
&НаКлиенте 
Процедура ВыборПериодаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
	
		Объект.ПериодРасхода = РезультатВыбора;
	
	КонецЕсли; 
	
КонецПроцедуры

// Функция обращается к процедуре модуля объекта для инициализации СКД и пользовательских настроек.
// 
// Параметры:
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - пользовательские настройки.
// 
// Возвращаемое значение:
// 	АдресСКД - строка - адрес СКД во временном хранилище.
// 
&НаСервере
Функция ИнициализироватьКомпоновщикСервер(пКомпоновщик)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	АдресСКД = ОбработкаОбъект.ИнициализироватьКомпоновщик(пКомпоновщик);
	
	Возврат АдресСКД;
	
КонецФункции

// Функция определяет, можно ли редактировать флаг "ВЗатраты" 
// в табличном поле ПереченьДокументов
// *******************************************************
// 	ВНИМАНИЕ: есть аналогичная процедура в модуле объекта
// *******************************************************
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.ПереченьДокументов.
// 
// Возвращаемое значение:
//   ФлажокДоступен   - Булево.
// 
&НаСервере
Функция ФлажокВЗатратыДоступен(Идентификатор) 
	
	// *******************************************************
	// 	ВНИМАНИЕ: есть аналогичная процедура в модуле объекта
	// *******************************************************
	
	ТекущаяСтрока = Объект.ПереченьДокументов.НайтиПоИдентификатору(Идентификатор);
	ФлажокДоступен = Ложь;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ФлажокДоступен = ТекущаяСтрока.РасходнаяПозиция.Проведен 
						 И НЕ ЗначениеЗаполнено(ТекущаяСтрока.РасходныйДокумент) 
						 И ТекущаяСтрока.СтатусЗаявки = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Утверждена;
		
	КонецЕсли; 
	
	Возврат ФлажокДоступен;
	
КонецФункции

// Функция формирует список номеров строк для которых доступно изменения поля "в затраты".
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//   СписокЗначений   - список номеров строк для которых доступно изменения поля "в затраты".
// 
&НаСервере
Функция ПолучитьСтрокиГдеФлажкиДоступны()

	Результат = Новый СписокЗначений;
	
	Для каждого СтрокаПеречня Из Объект.ПереченьДокументов Цикл
		
		Если ФлажокВЗатратыДоступен(СтрокаПеречня.ПолучитьИдентификатор()) Тогда
			Результат.Добавить(СтрокаПеречня.НомерСтроки - 1);
		КонецЕсли;
	
	КонецЦикла; 

	Возврат Результат;
	
КонецФункции

// Процедура управляет флагами в табличной части.
// 
// Параметры:
//  ЗначениеФлага - Число (0 - снять флаги, 1 - установить истина, 2 - инвертировать).
&НаКлиенте
Процедура ОбработатьФлаги(ЗначениеФлага)
	
	СписокИДСтрокГдеФлажкиДоступны = ПолучитьСтрокиГдеФлажкиДоступны();
	
	Для каждого Номер Из СписокИДСтрокГдеФлажкиДоступны Цикл
		
		СтрокаТаблицы = Объект.ПереченьДокументов[Номер.Значение];
		
		ПредыдущееЗначениеФлага = СтрокаТаблицы.ВЗатраты;
		
		Если ЗначениеФлага = 0 Тогда
			СтрокаТаблицы.ВЗатраты = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			СтрокаТаблицы.ВЗатраты = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			СтрокаТаблицы.ВЗатраты = НЕ СтрокаТаблицы.ВЗатраты;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура обращается к процедуре модуля объекта для создания расходных документов.
// 
// Параметры:
// 	ВидРасходногоДокумента - ПеречислениеСсылка.бит_ВидыРасходныхДокументов - вид создаваемых расходных документов.
// 
&НаСервере
Процедура СоздатьРасходныеДокументыСервер(ВидРасходногоДокумента)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СписокРасходныхПозиций = ОбработкаОбъект.СоздатьРасходныеДокументы(ВидРасходногоДокумента);
	Если СписокРасходныхПозиций.Количество() <> 0 Тогда
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.ГруппаСформированныеДокументы;
	КонецЕсли;
	УстановитьОтборСформированныхДокументов(СформированныеДокументы, СписокРасходныхПозиций);
	ОбновитьПереченьДокументов();
	
КонецПроцедуры

// Процедура выполняет действия необходимые для создания расходных документов.
// 
// Параметры:
// 	ВидРасходногоДокумента - ПеречислениеСсылка.бит_ВидыРасходныхДокументов - вид создаваемых расходных документов.
// 
&НаКлиенте
Процедура СоздатьРасходныеДокументы(ВидРасходногоДокумента = Неопределено)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("СоздатьРасходныеДокументыЗавершение", ЭтотОбъект, ВидРасходногоДокумента); 
	ПоказатьВопрос(Оповещение, НСтр("ru='Будут созданы расходные документы по выбранным расходным позициям. Вы уверены?'"), РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
	
КонецПроцедуры

// Процедура окончание процедуры "СоздатьРасходныеДокументы".
// 
&НаКлиенте 
Процедура СоздатьРасходныеДокументыЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет 
		ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
		
		Возврат;
	КонецЕсли; 
	
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр("ru='Выполняется создание расходных документов...'"));
	СоздатьРасходныеДокументыСервер(ДополнительныеДанные);
	
КонецПроцедуры

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_ФормированиеРасходныхДокументов"));
	СтруктураНастроек = ОбработкаОбъект.УпаковатьНастройкиВСтруктуруМодуль(Объект);
 			
	Возврат СтруктураНастроек;
	
КонецФункции

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") 
		И СтруктураНастроек.Свойство("ПользовательскиеНастройки") Тогда
		
		ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_ФормированиеРасходныхДокументов"));
		ОбработкаОбъект.РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек);
		
	Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Настройки не восстановлены.");
	КонецЕсли;  		
	
КонецПроцедуры

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	ПрименитьНастройки(НастройкаПоУмолчанию);
	
	Если Объект.РежимСообщений = "" И Объект.РежимЗаписи = "" Тогда
		
		// Если настройки нет - заполним значения по умолчанию.
		Объект.РежимСообщений = "Все";
		Объект.РежимЗаписи    = "Запись";
	 				
	КонецЕсли;
      
КонецПроцедуры

// Процедура устанавливает настройки указанные в форме настройки.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
&НаСервере
Процедура УстановитьДопНастройки(СтруктураНастроек)

	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_ФормированиеРасходныхДокументов"));
	ОбработкаОбъект.РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек);

КонецПроцедуры

&НаКлиенте
Процедура ПереченьДокументовВидРасходногоДокументаПриИзменении(Элемент)
	
	УстановитьТипВидаОперации();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипВидаОперации()
	
	ТекущиеДанные = Элементы.ПереченьДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидРасходногоДокумента = ПредопределенноеЗначение("Перечисление.бит_ВидыРасходныхДокументов.АвансовыйОтчет") Тогда
		ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийАвансовыйОтчет");
	ИначеЕсли ТекущиеДанные.ВидРасходногоДокумента = ПредопределенноеЗначение("Перечисление.бит_ВидыРасходныхДокументов.ПоступлениеТоваровУслуг") Тогда
		ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг");
	Иначе
		ОграничениеТипа = Новый ОписаниеТипов();
		ТекущиеДанные.ВидОперации = Неопределено;
	КонецЕсли;
	
	ТекущиеДанные.ВидОперации = ОграничениеТипа.ПривестиЗначение(ТекущиеДанные.ВидОперации);

КонецПроцедуры

&НаКлиенте
Процедура ПереченьДокументовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьТипВидаОперации();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСформированныхДокументов(Список, ЗначениеОтбора)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
			"РасходнаяПозиция", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
КонецПроцедуры 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	КэшПеречисления = Новый Структура;
 	КэшПеречисления.Вставить("бит_ВидыРасходныхДокументов", 
							бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыРасходныхДокументов));
							
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	фКэшЗначений.Вставить("ЭтоБухгалтерия", бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия());
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.бит_ФормированиеРасходныхДокументов"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , ОбработкаОбъект.мИзмеренияДоп);
	фКэшЗначений.Вставить("НастройкиИзмерений", ОбработкаОбъект.мНастройкиИзмерений);
	
	фКэшЗначений.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_ФормированиеРасходныхДокументов");
	
КонецПроцедуры

// Процедура обновляет табличное поле "ПереченьДокументов".
// 
&НаСервере
Процедура ОбновитьПереченьДокументов()
	
	Объект.ПереченьДокументов.Очистить();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаНачала"	, Объект.ПериодРасхода.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", Объект.ПериодРасхода.ДатаОкончания);
	
	ТаблицаПереченьДокументов = ОбработкаОбъект.ПолучитьПереченьДокументов(АдресСхемыКомпоновкиДанных, 
																		Объект.Компоновщик, 
																		СтруктураПараметров);
	
	Если ТаблицаПереченьДокументов.Количество() = 0 Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Нет данных, удовлетворяющих отбору.");
		
		Возврат;
	КонецЕсли;
	
	Объект.ПереченьДокументов.Загрузить(ТаблицаПереченьДокументов);
	
КонецПроцедуры

#КонецОбласти
