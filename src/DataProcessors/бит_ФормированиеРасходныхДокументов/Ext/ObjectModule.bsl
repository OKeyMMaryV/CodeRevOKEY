
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт; // Хранит сохраненную настройку.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения регистра ПланируемоеПоступлениеДенежныхСредств.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция определяет, можно ли редактировать флаг "ВЗатраты" 
// в табличном поле ПереченьДокументов.
// *******************************************************
// 	ВНИМАНИЕ: есть аналогичная процедура в модуле формы
// *******************************************************
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.ПереченьДокументов.
// 
// Возвращаемое значение:
//   ФлажокДоступен   - Булево.
// 
&НаСервере
Функция ФлажокВЗатратыДоступен(ТекущаяСтрока) Экспорт 
	
	// *******************************************************
	// 	ВНИМАНИЕ: есть аналогичная процедура в модуле формы
	// *******************************************************
	
	ФлажокДоступен = Ложь;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ФлажокДоступен = ТекущаяСтрока.РасходнаяПозиция.Проведен 
						 И НЕ ЗначениеЗаполнено(ТекущаяСтрока.РасходныйДокумент) 
						 И ТекущаяСтрока.СтатусЗаявки = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Утверждена;
		
	КонецЕсли; 
	
	Возврат ФлажокДоступен;
	
КонецФункции // ФлажокВЗатратыДоступен()

// Функция инициализирует схему компоновки данных и пользовательские настройки.
// 
// Параметры:
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - настройки которые будут заполнены из макета СКД.
// 
// Возвращаемое значение:
// 	АдресСхемыКомпоновкиДанных - строка - адрес временного хранилища, где хранится СКД.
// 
&НаСервере
Функция ИнициализироватьКомпоновщик(пКомпоновщик) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("СКДПереченьДокументов");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	пКомпоновщик.Инициализировать(ИсточникНастроек);
	пКомпоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции

// Функция на основании СКД формирует таблицу значений с перечнем документов
// для формирования расходных документов.
// 
// Параметры:
// 	АдресСКД - строка - адрес временного хранилища, где хранится СКД.
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - настройки установленные пользователем.
// 	СтруктураПараметров - структура - содержит произвольные параметры
// 							ключ - имя параметра
// 							значение - значение параметра
// 							(параметры ДатаНачала, ДатаОкончания - обязательны).
// 
// Возвращаемое значение:
// 	ТаблицаПереченьДокументов - таблица значений - перечень документов для формирования расходных документов.
// 
&НаСервере
Функция ПолучитьПереченьДокументов(АдресСКД, пКомпоновщик, СтруктураПараметров) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	
	ПараметрыСКД = пКомпоновщик.Настройки.ПараметрыДанных;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("ДатаНачала"   ,СтруктураПараметров.ДатаНачала);
	ПараметрыСКД.УстановитьЗначениеПараметра("ДатаОкончания",СтруктураПараметров.ДатаОкончания);
	ПараметрыСКД.УстановитьЗначениеПараметра("ПустаяДата"   ,Дата('00010101'));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
												пКомпоновщик.ПолучитьНастройки(),
												,
												,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаПереченьДокументов = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаПереченьДокументов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаПереченьДокументов;
	
КонецФункции

// Процедура выполняет создание расходных документов по расходным позициям.
// 
// Параметры:
//  ВидРасходногоДокумента  - ПеречислениеСсылка.бит_ВидыРасходныхДокументов.
// 
&НаСервере
Функция СоздатьРасходныеДокументы(ВидРасходногоДокумента) Экспорт
	
	СписокРасходныхПозиций = Новый СписокЗначений();
	Для каждого СтрокаТаблицы Из ПереченьДокументов Цикл
		
		Если НЕ СтрокаТаблицы.ВЗатраты Тогда
			Продолжить;
		КонецЕсли; 
		
		ФлажокДоступен = ФлажокВЗатратыДоступен(СтрокаТаблицы);
		Если НЕ ФлажокДоступен Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ВидРасходногоДокумента) 
			И НЕ СтрокаТаблицы.ВидРасходногоДокумента = ВидРасходногоДокумента Тогда
			
			Продолжить;
		КонецЕсли; 
		
		// Проверка заполнения вида расходного документа.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасходногоДокумента) Тогда
			Если РежимСообщений = "Все" ИЛИ РежимСообщений = "Ошибки" Тогда
				ТекстСообщения = НСтр("ru = 'Для расходной позиции ""%1"" не указан вид создаваемого расходного документа."
											+ " Ввод расходного документа невозможен.'"); 
				ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.РасходнаяПозиция); 				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Продолжить;
		ИначеЕсли (СтрокаТаблицы.ВидРасходногоДокумента = Перечисления.бит_ВидыРасходныхДокументов.ПоступлениеТоваровУслуг
			ИЛИ СтрокаТаблицы.ВидРасходногоДокумента = Перечисления.бит_ВидыРасходныхДокументов.АвансовыйОтчет) 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидОперации) Тогда 
			Если РежимСообщений = "Все" ИЛИ РежимСообщений = "Ошибки" Тогда
				ТекстСообщения = НСтр("ru = 'Для расходной позиции ""%1"" не указан вид операции расходного документа."
											+ " Ввод расходного документа невозможен.'"); 
				ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.РасходнаяПозиция); 				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		
		Если ЗначениеЗаполнено(ДатаРасхода) Тогда                                                   
			СтруктураПараметров.Вставить("ДатаРасхода", ДатаРасхода);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ДатаРасхода) Тогда
			СтруктураПараметров.Вставить("ДатаРасхода", СтрокаТаблицы.ДатаРасхода);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("НастройкиИзмерений"			  , мНастройкиИзмерений);
		
		СтруктураПолей = Новый Структура;
		
		Если НЕ СтрокаТаблицы.СодержаниеЗатрат = СтрокаТаблицы.РасходнаяПозиция.СодержаниеЗатрат Тогда
			СтруктураПолей.Вставить("СодержаниеЗатрат", "СодержаниеЗатрат");
		КонецЕсли;	
		Если НЕ СтрокаТаблицы.ВидРасходногоДокумента = СтрокаТаблицы.РасходнаяПозиция.ВидРасходногоДокумента
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.РасходныйДокумент) Тогда
			СтруктураПолей.Вставить("ВидРасходногоДокумента", "ВидРасходногоДокумента");
		КонецЕсли;	
		
		Если НЕ СтрокаТаблицы.ВидОперации = СтрокаТаблицы.РасходнаяПозиция.ВидОперации
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.РасходныйДокумент) Тогда
			СтруктураПолей.Вставить("ВидОперации", "ВидОперации");
		КонецЕсли;	
		
		// Некоторые реквизиты расходной позиции могли откорректировать в обработке, перенесем их в документ.
		ПозицияОбновлена = бит_ДоговораСервер.ЗаполнитьРасходнуюПозициюПоИсточнику(СтрокаТаблицы.РасходнаяПозиция, СтрокаТаблицы, СтруктураПолей,, РежимСообщений);
		
		Если НЕ ПозицияОбновлена Тогда
			Продолжить;
		КонецЕсли;
		
		РежимЗаписиРасходныхДокументов = ?(РежимЗаписи="Проведение", РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		бит_ДоговораСервер.СоздатьДокументЗатрат(СтрокаТаблицы.РасходнаяПозиция, РежимЗаписиРасходныхДокументов, СтруктураПараметров, РежимСообщений);
		СписокРасходныхПозиций.Добавить(СтрокаТаблицы.РасходнаяПозиция);
	КонецЦикла; 
	
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Создание расходных документов завершено.");	
	
	Возврат СписокРасходныхПозиций;
	
КонецФункции // СоздатьРасходныеДокументы()

// Функция создает структуру, хранящую настройки.
// 
// Параметры:
//   Объект.
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
Функция УпаковатьНастройкиВСтруктуруМодуль(Объект) Экспорт

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ПериодРасхода"					  , Объект.ПериодРасхода);
	СтруктураНастроек.Вставить("РежимСообщений"					  , Объект.РежимСообщений);
	СтруктураНастроек.Вставить("РежимЗаписи"					  , Объект.РежимЗаписи);
 	  	
	СтруктураНастроек.Вставить("ПользовательскиеНастройки", Объект.Компоновщик.ПользовательскиеНастройки);
			
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуруМодуль()

// Функция создает структуру, хранящую настройки.
// 
// Параметры:
//   Объект.
//   СтруктураНастроек - Структура.
// 
Процедура РаспоковатьНастройкиИзСтруктурыМодуль(Объект, СтруктураНастроек) Экспорт

	СтруктураНастроек.Свойство("ПериодРасхода"						, Объект.ПериодРасхода);
	СтруктураНастроек.Свойство("РежимСообщений"						, Объект.РежимСообщений);
	СтруктураНастроек.Свойство("РежимЗаписи"						, Объект.РежимЗаписи);
	
	// Загрузка пользовательских настроек в компоновщик.
	ПользовательскиеНастройки = СтруктураНастроек.ПользовательскиеНастройки;
	Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	
КонецПроцедуры // РаспоковатьНастройкиИзСтруктурыМодуль()

#КонецОбласти

#Область Инициализация

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

#КонецОбласти

#КонецЕсли
