
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КоличествоХранимыхВерсий = 5;
	
	//Получаем схему из макета
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	//Восстанавливаем пользовательские настройки пользователя
	Отбор = Новый Структура();
	Отбор.Вставить("КлючОбъекта", 	"ок_РабочееМестоБухгалтераПоАренде");
	Отбор.Вставить("КлючНастройки", "Основная");
	Отбор.Вставить("Пользователь", 	ПользователиСлужебный.АвторизованныйПользователь().Наименование);
	Настройки = ХранилищеПользовательскихНастроекОтчетов.Выбрать(Отбор);
	
	Если Настройки.Следующий() 
		И ТипЗнч(Настройки.Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки.Настройки);
		
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Раздел", ДатыЗапретаИзмененияБП.РазделБухгалтерскийУчет().Ссылка);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-01 (#3852)
	ВидАП		= ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда", "ВидАП", 	Неопределено);
	ПериодАП 	= ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда", "ПериодАП", 	Неопределено);
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидАП", ВидАП);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодАП",ПериодАП);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-01 (#3852)
	
	УстановитьВидимостьКнопокПереходаПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	НастройкиСКД = КомпоновщикНастроек.ПользовательскиеНастройки;
	ХранилищеПользовательскихНастроекОтчетов.Сохранить("ок_РабочееМестоБухгалтераПоАренде", "Основная", НастройкиСКД, , ПользователиСлужебный.АвторизованныйПользователь().Наименование);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КолонкаВидимостиПриИзменении(Элемент)
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	
	Если Объект.ТаблицаДокументов.Количество() > 0 Тогда
		Объект.ТаблицаДокументов.Очистить();
	КонецЕсли; 
	
	СохранитьВерсиюДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПередНачаломИзменения(Элемент, Отказ)
	
	Если Объект.ТаблицаДокументов.Количество() > 0 Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Таблица документов будет очищена
						|Продолжить выполнение операции?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДокументов

&НаКлиенте
Процедура ТаблицаДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Перемещение Тогда
		Возврат;
	КонецЕсли; 
	
	Строка_Отправитель 	= Объект.ТаблицаДокументов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	Строка_Получатель	= Объект.ТаблицаДокументов.НайтиПоИдентификатору(Строка);
	
	Строка_Авансы = Неопределено;
	Строка_Отгрузка = Неопределено;
	
	Если ЗначениеЗаполнено(Строка_Отправитель.ДокументАванса) И НЕ ЗначениеЗаполнено(Строка_Отправитель.ДокументОтгрузки) Тогда
		Строка_Авансы = Строка_Отправитель;
	ИначеЕсли ЗначениеЗаполнено(Строка_Получатель.ДокументАванса) И НЕ ЗначениеЗаполнено(Строка_Получатель.ДокументОтгрузки) Тогда
		Строка_Авансы = Строка_Получатель;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Строка_Отправитель.ДокументОтгрузки) И НЕ ЗначениеЗаполнено(Строка_Отправитель.ДокументАванса) Тогда
		Строка_Отгрузка = Строка_Отправитель;
	ИначеЕсли ЗначениеЗаполнено(Строка_Получатель.ДокументОтгрузки) И НЕ ЗначениеЗаполнено(Строка_Получатель.ДокументАванса) Тогда
		Строка_Отгрузка = Строка_Получатель;
	КонецЕсли; 
	
	Если Строка_Авансы = Неопределено
		ИЛИ Строка_Отгрузка = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные строки объединить невозможно!");
		Возврат;
	
	КонецЕсли; 
	
	//Если Строка_Авансы.Организация <> Строка_Отгрузка.Организация Тогда
	//
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У выбранных строк различается ""Организация"". Данные строки объединить невозможно!");
	//	Возврат;
	//	
	//КонецЕсли; 
	
	Если Строка_Авансы.Контрагент <> Строка_Отгрузка.Контрагент Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У выбранных строк различается ""Контрагент"". Данные строки объединить невозможно!");
		Возврат;
		
	КонецЕсли; 
	
	Если Строка_Авансы.ДоговорКонтрагента <> Строка_Отгрузка.ДоговорКонтрагента Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У выбранных строк различается ""Договор"". Данные строки объединить невозможно!");
		Возврат;
		
	КонецЕсли; 
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-13 (#НТП_МП_01)
	ОперацияАксапты = (Строка_Отгрузка.ДокументОтгрузки) = Тип("ДокументСсылка.бит_ок_ОперацияАксапты");
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-13 (#НТП_МП_01)
	
	Если Строка_Отгрузка.СуммаОтгрузки < Строка_Авансы.СуммаАванса Тогда
	
		Строка_Отгрузка.ДокументАванса 				= Строка_Авансы.ДокументАванса;
		Строка_Отгрузка.ДокументАвансаТекст			= Строка_Авансы.ДокументАвансаТекст;
		Строка_Отгрузка.СуммаАванса 				= Строка_Отгрузка.СуммаОтгрузки;
		Строка_Отгрузка.ПривязатьОтгрузкуКАвансам 	= ПолучитьЗначениеРеквизитаОбъектаНаСервере(Строка_Отгрузка.ДокументОтгрузки, "Дата") < ПолучитьЗначениеРеквизитаОбъектаНаСервере(Строка_Отгрузка.ДокументАванса, "Дата");
		Строка_Отгрузка.ПривязатьАвансыКОтгрузкам 	= НЕ Строка_Отгрузка.ПривязатьОтгрузкуКАвансам;
		
		Строка_Отгрузка.НаходитсяВЗакрытомПериодеРСБУ = Строка_Отгрузка.ПривязатьОтгрузкуКАвансам И Строка_Авансы.НаходитсяВЗакрытомПериодеРСБУ 
													ИЛИ Строка_Отгрузка.ПривязатьАвансыКОтгрузкам И Строка_Отгрузка.НаходитсяВЗакрытомПериодеРСБУ
													//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-13 (#НТП_МП_01)
													ИЛИ Строка_Отгрузка.ПривязатьАвансыКОтгрузкам И ОперацияАксапты;
													//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-13 (#НТП_МП_01)
		
		Строка_Авансы.СуммаАванса = Строка_Авансы.СуммаАванса - Строка_Отгрузка.СуммаАванса;
		
	ИначеЕсли Строка_Отгрузка.СуммаОтгрузки = Строка_Авансы.СуммаАванса Тогда
	
		Строка_Отгрузка.ДокументАванса 				= Строка_Авансы.ДокументАванса;
		Строка_Отгрузка.ДокументАвансаТекст			= Строка_Авансы.ДокументАвансаТекст;
		Строка_Отгрузка.СуммаАванса 				= Строка_Отгрузка.СуммаОтгрузки;
		Строка_Отгрузка.ПривязатьОтгрузкуКАвансам 	= ПолучитьЗначениеРеквизитаОбъектаНаСервере(Строка_Отгрузка.ДокументОтгрузки, "Дата") < ПолучитьЗначениеРеквизитаОбъектаНаСервере(Строка_Отгрузка.ДокументАванса, "Дата");
		Строка_Отгрузка.ПривязатьАвансыКОтгрузкам 	= НЕ Строка_Отгрузка.ПривязатьОтгрузкуКАвансам;
		
		Строка_Отгрузка.НаходитсяВЗакрытомПериодеРСБУ = Строка_Отгрузка.ПривязатьОтгрузкуКАвансам И Строка_Авансы.НаходитсяВЗакрытомПериодеРСБУ 
													ИЛИ Строка_Отгрузка.ПривязатьАвансыКОтгрузкам И Строка_Отгрузка.НаходитсяВЗакрытомПериодеРСБУ
													//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-13 (#НТП_МП_01)
													ИЛИ Строка_Отгрузка.ПривязатьАвансыКОтгрузкам И ОперацияАксапты;
													//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-13 (#НТП_МП_01)
													
		Объект.ТаблицаДокументов.Удалить(Строка_Авансы);
		
	ИначеЕсли Строка_Отгрузка.СуммаОтгрузки > Строка_Авансы.СуммаАванса Тогда
	
		Строка_Авансы.ДокументОтгрузки 				= Строка_Отгрузка.ДокументОтгрузки;
		Строка_Авансы.ДокументОтгрузкиТекст			= Строка_Отгрузка.ДокументОтгрузкиТекст;
		Строка_Авансы.СуммаОтгрузки 				= Строка_Авансы.СуммаАванса;
		Строка_Авансы.ПривязатьОтгрузкуКАвансам 	= ПолучитьЗначениеРеквизитаОбъектаНаСервере(Строка_Авансы.ДокументОтгрузки, "Дата") < ПолучитьЗначениеРеквизитаОбъектаНаСервере(Строка_Авансы.ДокументАванса, "Дата");
		Строка_Авансы.ПривязатьАвансыКОтгрузкам 	= НЕ Строка_Авансы.ПривязатьОтгрузкуКАвансам;
		
		Строка_Авансы.НаходитсяВЗакрытомПериодеРСБУ = Строка_Авансы.ПривязатьОтгрузкуКАвансам И Строка_Авансы.НаходитсяВЗакрытомПериодеРСБУ 
													ИЛИ Строка_Авансы.ПривязатьАвансыКОтгрузкам И Строка_Отгрузка.НаходитсяВЗакрытомПериодеРСБУ
													//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-13 (#НТП_МП_01)
													ИЛИ Строка_Авансы.ПривязатьАвансыКОтгрузкам И ОперацияАксапты;
													//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-13 (#НТП_МП_01)
		
		Строка_Отгрузка.СуммаОтгрузки = Строка_Отгрузка.СуммаОтгрузки - Строка_Авансы.СуммаАванса;
		
		Если Строка_Авансы.НомерСтроки < Строка_Отгрузка.НомерСтроки Тогда
			Объект.ТаблицаДокументов.Сдвинуть(Строка_Авансы.НомерСтроки - 1, -(Строка_Авансы.НомерСтроки - Строка_Отгрузка.НомерСтроки) - 1);
		Иначе
			Объект.ТаблицаДокументов.Сдвинуть(Строка_Авансы.НомерСтроки - 1, -(Строка_Авансы.НомерСтроки - Строка_Отгрузка.НомерСтроки));
		КонецЕсли; 
		
	КонецЕсли;
	
	
	
	СохранитьВерсиюДанных();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Команда_Обновить(Команда)
	
	Если НЕ ВыполнитьПроверкуЗаполненностиОтборов() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ОбновитьНаСервере();
	
	СохранитьВерсиюДанных(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ВыполнитьПривязку(Команда)
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обработка документов началась");
	
	ВыполнитьПривязкуНаСервере();
	
	СохранитьВерсиюДанных(Истина);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обработка документов завершена");
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ОткрытьОСВ(Команда)
	
	Если НЕ ВыполнитьПроверкуЗаполненностиОтборов() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьСтруктураПараметровДляОтчетаОСВ();
	
	ОткрытьОСВНаКлиенте(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_ПредыдущееСостояние(Команда)
	
	ЗагрузитьВерсиюДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура Команда_СледующееСостояние(Команда)
	
	ЗагрузитьВерсиюДанных(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-01 (#3852)
	ВидАП		= ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда", "ВидАП", 	Неопределено);
	ПериодАП 	= ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда", "ПериодАП", 	Неопределено);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, "ВидАП",	ВидАП);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, "ПериодАП", ПериодАП);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-01 (#3852)
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Объект.ТаблицаДокументов.Загрузить(ТЗ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаОбъектаНаСервере(Объект, ИмяРеквизита)
	
	Возврат Объект[ИмяРеквизита];
	
КонецФункции

&НаСервере
Процедура СохранитьВерсиюДанных(ОчиститьВсеВерсии = Ложь)
	
	Если ОчиститьВсеВерсии Тогда
		ТаблицаИсторииДанных.Очистить();
		ТекущаяВерсияДанных = 0;
	КонецЕсли; 
	
	ТекущаяВерсияДанных = ТекущаяВерсияДанных + 1;
	
	//Проверяем, есть ли более старшие версии данных. Если есть - очищаем.
	СтруктураОтбора = Новый Структура("НомерВерсии", ТекущаяВерсияДанных);
	НайденныеСтроки = ТаблицаИсторииДанных.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Инд = ТекущаяВерсияДанных По (ТекущаяВерсияДанных + КоличествоХранимыхВерсий - 1) Цикл
		
			СтруктураОтбора.НомерВерсии = Инд;
			НайденныеСтроки = ТаблицаИсторииДанных.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТаблицаИсторииДанных.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли;
	
	НоваяСтрока = ТаблицаИсторииДанных.Добавить();
	НоваяСтрока.НомерВерсии = ТекущаяВерсияДанных;
	НоваяСтрока.Данные.Загрузить(Объект.ТаблицаДокументов.Выгрузить());
	
	Если ТаблицаИсторииДанных.Количество() > КоличествоХранимыхВерсий Тогда
		ТаблицаИсторииДанных.Удалить(ТаблицаИсторииДанных[0]);
	КонецЕсли;
	
	УстановитьВидимостьКнопокПереходаПоСостоянию();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВерсиюДанных(Предыдущую = Истина)
	
	ПредыдущаяВерсияДанных = ТекущаяВерсияДанных;
	
	Если Предыдущую Тогда
		ТекущаяВерсияДанных = ТекущаяВерсияДанных - 1;
	Иначе
		ТекущаяВерсияДанных = ТекущаяВерсияДанных + 1;
	КонецЕсли; 
	
	СтруктураОтбора = Новый Структура("НомерВерсии", ТекущаяВерсияДанных);
	НайденныеСтроки = ТаблицаИсторииДанных.НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		НоваяСтрока = НайденныеСтроки[0];
		Объект.ТаблицаДокументов.Загрузить(НоваяСтрока.Данные.Выгрузить());
	Иначе
		ТекущаяВерсияДанных = ПредыдущаяВерсияДанных;
	КонецЕсли;
	
	УстановитьВидимостьКнопокПереходаПоСостоянию();
	
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьПривязкуНаСервере()
	
	ПривязатьОтгрузкуКАвансам(); 
	ПривязатьАвансыКОтгрузкам();
	ПривязатьАвансыОтгрузкиККорректировкеДолга();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма, Знач ПересчитатьКурсВзаиморасчетов = Ложь) Экспорт
	
	Объект = Форма.Объект;
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, Форма);
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаВалютаВзаиморасчетов     	= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		ДоговорКонтрагентаВалютаВзаиморасчетов     	= Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты") Тогда
		Если ПересчитатьКурсВзаиморасчетов Тогда
			СтрокаПлатеж.КурсВзаиморасчетов =
				?(СтрокаПлатеж.СуммаВзаиморасчетов = 0, 0, Окр(СтрокаПлатеж.СуммаПлатежа / СтрокаПлатеж.СуммаВзаиморасчетов, 4));
		Иначе
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-03 (#3816)
			//СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаПлатежа = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-03 (#3816)
											СтрокаПлатеж.СуммаВзаиморасчетов, ДоговорКонтрагентаВалютаВзаиморасчетов,
											Объект.ВалютаДокумента,
											СтрокаПлатеж.КурсВзаиморасчетов,      Форма.КурсДокумента,
											СтрокаПлатеж.КратностьВзаиморасчетов, Форма.КратностьДокумента);
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		Объект.КурсНаДатуПриобретенияРеализацииВалюты = ?(
			Объект.КурсНаДатуПриобретенияРеализацииВалюты = 0, Форма.КурсДокумента, Объект.КурсНаДатуПриобретенияРеализацииВалюты);
		Если ПересчитатьКурсВзаиморасчетов Тогда
			СтрокаПлатеж.КурсВзаиморасчетов =
				?(СтрокаПлатеж.СуммаПлатежа = 0, 0, Окр(СтрокаПлатеж.СуммаВзаиморасчетов / СтрокаПлатеж.СуммаПлатежа, 4));
		Иначе
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-03 (#3816)
			//СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-03 (#3816)
											СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
											ДоговорКонтрагентаВалютаВзаиморасчетов,
											СтрокаПлатеж.КурсВзаиморасчетов,      1,
											СтрокаПлатеж.КратностьВзаиморасчетов, 1);
		КонецЕсли;
	Иначе
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-03 (#3816)
		//СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаВзаиморасчетов = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-03 (#3816)
											СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
											ДоговорКонтрагентаВалютаВзаиморасчетов,
											Форма.КурсДокумента,      СтрокаПлатеж.КурсВзаиморасчетов,
											Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруОбъектаДляПересчетов(ДокументАванса)
	
	СтруктураОбъекта = Новый Структура();
	СтруктураОбъекта.Вставить("Объект", 			ДокументАванса);
	СтруктураОбъекта.Вставить("ВалютаДокумента", 	ДокументАванса.ВалютаДокумента);
	СтруктураОбъекта.Вставить("КурсДокумента", 		0);
	СтруктураОбъекта.Вставить("КратностьДокумента", 0);
	ПоступлениеНаРасчетныйСчетФормы.УстановитьКурсДокумента(СтруктураОбъекта);	
	
	Возврат СтруктураОбъекта;
	
КонецФункции

&НаСервере
Процедура ПривязатьОтгрузкуКАвансам()
	
	//Выбор документов аванса (ПоступлениеНаРасчетныйСчет) для обработки
	СтруктураПараметровОтбора = Новый Структура();
	СтруктураПараметровОтбора.Вставить("ПривязатьОтгрузкуКАвансам", Истина);
	СтруктураПараметровОтбора.Вставить("НаходитсяВЗакрытомПериодеРСБУ", Ложь);
	
	ДокументыДляОбработки = Объект.ТаблицаДокументов.Выгрузить(СтруктураПараметровОтбора, "ДокументАванса");
	ДокументыДляОбработки.Свернуть("ДокументАванса");
	ДокументыДляОбработки = ДокументыДляОбработки.ВыгрузитьКолонку("ДокументАванса");
	
	//Создание структур отборов для дальнейшего использования 
	СтруктураПараметровОтбора = Новый Структура();
	СтруктураПараметровОтбора.Вставить("ДокументАванса");
	СтруктураПараметровОтбора.Вставить("ПривязатьОтгрузкуКАвансам", Истина);
	СтруктураПараметровОтбора.Вставить("НаходитсяВЗакрытомПериодеРСБУ", Ложь);
	
	СтруктураПараметровОтбораТЧДокумента = Новый Структура();
	СтруктураПараметровОтбораТЧДокумента.Вставить("ДоговорКонтрагента");
	СтруктураПараметровОтбораТЧДокумента.Вставить("СпособПогашенияЗадолженности", ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать"));
	
	Для каждого ДокументАванса Из ДокументыДляОбработки Цикл
		
		Если НЕ ЗначениеЗаполнено(ДокументАванса) Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка
				
			НачатьТранзакцию();
				
			ДокументАвансаОбъект = ДокументАванса.ПолучитьОбъект();
			СтруктураОбъекта = ПолучитьСтруктуруОбъектаДляПересчетов(ДокументАванса);
			
			//Находим документы отгрузок (РеализацияТоваровУслуг) для заполнения документа ПоступлениеНаРасчетныйСчет
			СтруктураПараметровОтбора.ДокументАванса = ДокументАванса;
			СтрокиДляРаспределения = Объект.ТаблицаДокументов.Выгрузить(СтруктураПараметровОтбора);
			Для каждого ТекущаяСтрокаДляРаспределения Из СтрокиДляРаспределения Цикл
				
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-14 (#НТП_МП_04)
				//СтруктураПараметровОтбораТЧДокумента.ДоговорКонтрагента = ТекущаяСтрокаДляРаспределения.ДокументОтгрузки.ДоговорКонтрагента;
				// заменено на:
				СтруктураПараметровОтбораТЧДокумента.ДоговорКонтрагента = ТекущаяСтрокаДляРаспределения.ДоговорКонтрагента;
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-14 (#НТП_МП_04)
				СтрокиДокумента = ДокументАвансаОбъект.РасшифровкаПлатежа.НайтиСтроки(СтруктураПараметровОтбораТЧДокумента);
				
				Если СтрокиДокумента.Количество() > 0 Тогда	
					
					Для каждого СтрокаДокумента Из СтрокиДокумента Цикл
					
						Если СтрокаДокумента.СуммаПлатежа > 0 
							И СтрокаДокумента.СуммаПлатежа = ТекущаяСтрокаДляРаспределения.СуммаОтгрузки Тогда
						
							СтрокаДокумента.СпособПогашенияЗадолженности 	= ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу");
							СтрокаДокумента.Сделка 							= ТекущаяСтрокаДляРаспределения.ДокументОтгрузки;
							СтрокаДокумента.СчетУчетаРасчетовСКонтрагентом 	= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПокупателями");//62.01
							СтрокаДокумента.СчетУчетаРасчетовПоАвансам 		= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным");//62.02
							
							ТекущаяСтрокаДляРаспределения.СуммаОтгрузки = ТекущаяСтрокаДляРаспределения.СуммаОтгрузки - СтрокаДокумента.СуммаПлатежа;
							
							Прервать;
							
						ИначеЕсли СтрокаДокумента.СуммаПлатежа > 0 
							И СтрокаДокумента.СуммаПлатежа > ТекущаяСтрокаДляРаспределения.СуммаОтгрузки Тогда
							
							НоваяСтрокаТЧ = ДокументАвансаОбъект.РасшифровкаПлатежа.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаДокумента);
							
							СтрокаДокумента.СпособПогашенияЗадолженности 	= ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу");
							СтрокаДокумента.Сделка 							= ТекущаяСтрокаДляРаспределения.ДокументОтгрузки;
							СтрокаДокумента.СчетУчетаРасчетовСКонтрагентом 	= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПокупателями");//62.01
							СтрокаДокумента.СчетУчетаРасчетовПоАвансам 		= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным");//62.02
							СтрокаДокумента.СуммаПлатежа 					= ТекущаяСтрокаДляРаспределения.СуммаОтгрузки;
							
							РассчитатьСуммуВзаиморасчетов(СтрокаДокумента, СтруктураОбъекта);
							ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаДокумента);
		
							НоваяСтрокаТЧ.СуммаПлатежа = НоваяСтрокаТЧ.СуммаПлатежа - СтрокаДокумента.СуммаПлатежа;
							РассчитатьСуммуВзаиморасчетов(НоваяСтрокаТЧ, СтруктураОбъекта);
							ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПересчитатьСуммуНДС(НоваяСтрокаТЧ);
							
							ТекущаяСтрокаДляРаспределения.СуммаОтгрузки = ТекущаяСтрокаДляРаспределения.СуммаОтгрузки - СтрокаДокумента.СуммаПлатежа;
							
							Прервать;
							
						ИначеЕсли СтрокаДокумента.СуммаПлатежа > 0 
							И СтрокаДокумента.СуммаПлатежа < ТекущаяСтрокаДляРаспределения.СуммаОтгрузки Тогда
							
							СтрокаДокумента.СпособПогашенияЗадолженности 	= ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу");
							СтрокаДокумента.Сделка 							= ТекущаяСтрокаДляРаспределения.ДокументОтгрузки;
							СтрокаДокумента.СчетУчетаРасчетовСКонтрагентом 	= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПокупателями");//62.01
							СтрокаДокумента.СчетУчетаРасчетовПоАвансам 		= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным");//62.02
							
							ТекущаяСтрокаДляРаспределения.СуммаОтгрузки = ТекущаяСтрокаДляРаспределения.СуммаОтгрузки - СтрокаДокумента.СуммаПлатежа;
							
						КонецЕсли; 
					
					КонецЦикла; 
					
					Если ТекущаяСтрокаДляРаспределения.СуммаОтгрузки <> 0 Тогда
					
						ТекстСообщения = НСтр("ru = 'Для документа Аванса ""%1"" и документа Отгрузки ""%2"" не полностью выполнено разнесение суммы. Остаток %3.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
											ТекущаяСтрокаДляРаспределения.ДокументАванса, 
											ТекущаяСтрокаДляРаспределения.ДокументОтгрузки, 
											ТекущаяСтрокаДляРаспределения.СуммаОтгрузки
											);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла;
			
			ДокументАвансаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			СтрокиДляРаспределения = Объект.ТаблицаДокументов.НайтиСтроки(СтруктураПараметровОтбора);
			Для каждого ТекущаяСтрокаДляРаспределения Из СтрокиДляРаспределения Цикл
				ТекущаяСтрокаДляРаспределения.ПривязатьАвансыКОтгрузкам = Ложь;
				ТекущаяСтрокаДляРаспределения.ПривязатьОтгрузкуКАвансам = Ложь;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("Не удалось провести документ аванса ""%1"". Подробности:'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
								ДокументАванса, 
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
								);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры
 
&НаСервере
Процедура ПривязатьАвансыКОтгрузкам()
	
	//Выбор документов отгрузок (РеализацияТоваровУслуг) для обработки
	СтруктураПараметровОтбора = Новый Структура();
	СтруктураПараметровОтбора.Вставить("ПривязатьАвансыКОтгрузкам", Истина);
	СтруктураПараметровОтбора.Вставить("НаходитсяВЗакрытомПериодеРСБУ", Ложь);
	
	ДокументыДляОбработки = Объект.ТаблицаДокументов.Выгрузить(СтруктураПараметровОтбора, "ДокументОтгрузки");
	ДокументыДляОбработки.Свернуть("ДокументОтгрузки");
	ДокументыДляОбработки = ДокументыДляОбработки.ВыгрузитьКолонку("ДокументОтгрузки");
	
	//Создание структур отборов для дальнейшего использования 
	СтруктураПараметровОтбора = Новый Структура();
	СтруктураПараметровОтбора.Вставить("ДокументОтгрузки");
	СтруктураПараметровОтбора.Вставить("ПривязатьАвансыКОтгрузкам", Истина);
	СтруктураПараметровОтбора.Вставить("НаходитсяВЗакрытомПериодеРСБУ", Ложь);
	
	СтруктураПараметровОтбораТЧДокумента = Новый Структура();
	СтруктураПараметровОтбораТЧДокумента.Вставить("ДокументАванса");
	
	Для каждого ДокументОтгрузки Из ДокументыДляОбработки Цикл
		
		Если НЕ ЗначениеЗаполнено(ДокументОтгрузки) Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка 
			
			НачатьТранзакцию();
			
			ДокументОтгрузкиОбъект = ДокументОтгрузки.ПолучитьОбъект();
			ДокументОтгрузкиОбъект.СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.ПоДокументу");
			ДокументОтгрузкиОбъект.СчетУчетаРасчетовСКонтрагентом	= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПокупателями");//62.01
			ДокументОтгрузкиОбъект.СчетУчетаРасчетовПоАвансам		= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным");//62.0

			//Находим документы аванса (ПоступлениеНаРасчетныйСчет) для заполнения документа РеализацияТоваровУслуг
			СтруктураПараметровОтбора.ДокументОтгрузки = ДокументОтгрузки;
			СтрокиДляРаспределения = Объект.ТаблицаДокументов.Выгрузить(СтруктураПараметровОтбора);
			Для каждого ТекущаяСтрокаДляРаспределения Из СтрокиДляРаспределения Цикл
			
				СтруктураПараметровОтбораТЧДокумента.ДокументАванса = ТекущаяСтрокаДляРаспределения.ДокументАванса;
				СтрокиДокумента = ДокументОтгрузкиОбъект.ЗачетАвансов.НайтиСтроки(СтруктураПараметровОтбораТЧДокумента);
				
				Если СтрокиДокумента.Количество() > 0 Тогда	
					СтрокаДокумента = СтрокиДокумента[0];
				Иначе
					СтрокаДокумента = ДокументОтгрузкиОбъект.ЗачетАвансов.Добавить();
				КонецЕсли;
				
				СтрокаДокумента.ДокументАванса = ТекущаяСтрокаДляРаспределения.ДокументАванса;
				СтрокаДокумента.СуммаЗачета = ТекущаяСтрокаДляРаспределения.СуммаАванса;
				
			КонецЦикла;
			
			ДокументОтгрузкиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			Для каждого ТекущаяСтрокаДляРаспределения Из СтрокиДляРаспределения Цикл
				ТекущаяСтрокаДляРаспределения.ПривязатьАвансыКОтгрузкам = Ложь;
				ТекущаяСтрокаДляРаспределения.ПривязатьОтгрузкуКАвансам = Ложь;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
								
			ТекстСообщения = НСтр("Не удалось провести документ отгрузки ""%1"". Подробности:'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
								ДокументОтгрузки, 
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
								);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьАвансыОтгрузкиККорректировкеДолга()
	
	//Выбор документов отгрузок (РеализацияТоваровУслуг) для обработки
	СтруктураПараметровОтбора = Новый Структура();
	СтруктураПараметровОтбора.Вставить("ПривязатьАвансыКОтгрузкам", Истина);
	СтруктураПараметровОтбора.Вставить("НаходитсяВЗакрытомПериодеРСБУ", Истина);
	
	СтрокиДляОбработки_Авансы = Объект.ТаблицаДокументов.НайтиСтроки(СтруктураПараметровОтбора);
	
	СтруктураПараметровОтбора = Новый Структура();
	СтруктураПараметровОтбора.Вставить("ПривязатьОтгрузкуКАвансам", Истина);
	СтруктураПараметровОтбора.Вставить("НаходитсяВЗакрытомПериодеРСБУ", Истина);
	
	СтрокиДляОбработки_Отгрузки = Объект.ТаблицаДокументов.НайтиСтроки(СтруктураПараметровОтбора);
	
	СтрокиДляОбработки = Неопределено;
	Если СтрокиДляОбработки_Авансы.Количество() < СтрокиДляОбработки_Отгрузки.Количество() Тогда
		СтрокиДляОбработки = СтрокиДляОбработки_Отгрузки;
		Для каждого СтрокаТЧ Из СтрокиДляОбработки_Авансы Цикл
			СтрокиДляОбработки.Добавить(СтрокаТЧ);
		КонецЦикла;
	Иначе
		СтрокиДляОбработки = СтрокиДляОбработки_Авансы;
		Для каждого СтрокаТЧ Из СтрокиДляОбработки_Отгрузки Цикл
			СтрокиДляОбработки.Добавить(СтрокаТЧ);
		КонецЦикла;
	КонецЕсли; 
	
	ТаблицаСозданныхКорректировокДолга = Новый ТаблицаЗначений();
	ТаблицаСозданныхКорректировокДолга.Колонки.Добавить("Организация");
	ТаблицаСозданныхКорректировокДолга.Колонки.Добавить("Контрагент");
	ТаблицаСозданныхКорректировокДолга.Колонки.Добавить("КорректировкаДолга");
	ТаблицаСозданныхКорректировокДолга.Колонки.Добавить("КорректировкаДолгаСсылка");
	
	СтруктураОтбораКорректировокДолга = Новый Структура("Организация, Контрагент");
	
	КорректировкаДолгаОбъект = Неопределено;

	Попытка
		
		НачатьТранзакцию();

		Для каждого ТекущаяСтрокаДляОбработки Из СтрокиДляОбработки Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаДляОбработки.ДокументОтгрузки)
				ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрокаДляОбработки.ДокументАванса) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если КорректировкаДолгаОбъект = Неопределено
				ИЛИ КорректировкаДолгаОбъект.Организация <> ТекущаяСтрокаДляОбработки.ДокументАванса.Организация
				ИЛИ КорректировкаДолгаОбъект.КонтрагентКредитор <> ТекущаяСтрокаДляОбработки.ДокументАванса.Контрагент Тогда
				
				СтруктураОтбораКорректировокДолга.Организация = ТекущаяСтрокаДляОбработки.ДокументАванса.Организация;
				СтруктураОтбораКорректировокДолга.Контрагент = ТекущаяСтрокаДляОбработки.ДокументАванса.Контрагент;
			
				НайденныеСтроки = ТаблицаСозданныхКорректировокДолга.НайтиСтроки(СтруктураОтбораКорректировокДолга);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					КорректировкаДолгаОбъект = НайденныеСтроки[0].КорректировкаДолга;
				Иначе
					КорректировкаДолгаОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
					КорректировкаДолгаОбъект.Дата 					= ТекущаяДата();
					КорректировкаДолгаОбъект.ВидОперации 			= ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкаДолга.ЗачетАвансов");
					КорректировкаДолгаОбъект.ВидАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыАвансаЗадолженности.АвансыПокупателя");
					КорректировкаДолгаОбъект.ТипАвансаЗадолженности = ПредопределенноеЗначение("Перечисление.ТипыЗадолженности.СамогоКонтрагента");
					КорректировкаДолгаОбъект.Организация 			= ТекущаяСтрокаДляОбработки.ДокументАванса.Организация;
					КорректировкаДолгаОбъект.КонтрагентКредитор 	= ТекущаяСтрокаДляОбработки.ДокументАванса.Контрагент;
					//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-14 (#НТП_МП_04)
					//КорректировкаДолгаОбъект.КонтрагентДебитор 		= ТекущаяСтрокаДляОбработки.ДокументОтгрузки.Контрагент;
					// заменено на:
					КорректировкаДолгаОбъект.КонтрагентДебитор 		= ТекущаяСтрокаДляОбработки.Контрагент;
					//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-14 (#НТП_МП_04)
					КорректировкаДолгаОбъект.ВалютаДокумента 		= Константы.ВалютаРегламентированногоУчета.Получить();
					КорректировкаДолгаОбъект.Ответственный			= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
					
					СтрокаТЗ = ТаблицаСозданныхКорректировокДолга.Добавить();
					СтрокаТЗ.Организация 		= ТекущаяСтрокаДляОбработки.ДокументАванса.Организация;
					СтрокаТЗ.Контрагент 		= ТекущаяСтрокаДляОбработки.ДокументАванса.Контрагент;
					СтрокаТЗ.КорректировкаДолга = КорректировкаДолгаОбъект;
					
				КонецЕсли; 
			КонецЕсли; 
			
			НоваяСтрока_Авансы = КорректировкаДолгаОбъект.КредиторскаяЗадолженность.Добавить();
			НоваяСтрока_Авансы.ДоговорКонтрагента 		= ТекущаяСтрокаДляОбработки.ДокументАванса.ДоговорКонтрагента;
			НоваяСтрока_Авансы.КурсВзаиморасчетов 		= 1;
			НоваяСтрока_Авансы.КратностьВзаиморасчетов 	= 1;
			НоваяСтрока_Авансы.Сделка 					= ТекущаяСтрокаДляОбработки.ДокументАванса;
			НоваяСтрока_Авансы.Сумма 					= ТекущаяСтрокаДляОбработки.СуммаАванса;
			НоваяСтрока_Авансы.СуммаВзаиморасчетов 		= ТекущаяСтрокаДляОбработки.СуммаАванса;
			НоваяСтрока_Авансы.СчетУчетаРасчетов 		= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным");
			
			НоваяСтрока_Отгрузки = КорректировкаДолгаОбъект.ДебиторскаяЗадолженность.Добавить();
			НоваяСтрока_Отгрузки.ДоговорКонтрагента 	= ТекущаяСтрокаДляОбработки.ДокументАванса.ДоговорКонтрагента;
			НоваяСтрока_Отгрузки.КурсВзаиморасчетов 	= 1;
			НоваяСтрока_Отгрузки.КратностьВзаиморасчетов= 1;
			НоваяСтрока_Отгрузки.Сделка 				= ТекущаяСтрокаДляОбработки.ДокументОтгрузки;
			НоваяСтрока_Отгрузки.Сумма 					= ТекущаяСтрокаДляОбработки.СуммаОтгрузки;
			НоваяСтрока_Отгрузки.СуммаВзаиморасчетов 	= ТекущаяСтрокаДляОбработки.СуммаОтгрузки;
			НоваяСтрока_Отгрузки.СчетУчетаРасчетов 		= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПокупателями");

		КонецЦикла;
		
		Для каждого ТекущаяСтрокаКорректировокДолга Из ТаблицаСозданныхКорректировокДолга Цикл
		
			ТекущаяСтрокаКорректировокДолга.КорректировкаДолга.Записать(РежимЗаписиДокумента.Проведение);
			ТекущаяСтрокаКорректировокДолга.КорректировкаДолгаСсылка = ТекущаяСтрокаКорректировокДолга.КорректировкаДолга.Ссылка;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создан документ """ + ТекущаяСтрокаКорректировокДолга.КорректировкаДолгаСсылка + """. (Для перехода к документу нажмите дважды по строке)", ТекущаяСтрокаКорректировокДолга.КорректировкаДолгаСсылка);
			
		КонецЦикла; 
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("Не удалось создать корректировку долга. Подробности: %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
							КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
							);
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
	Для каждого ТекущаяСтрокаДляОбработки Из СтрокиДляОбработки Цикл
	
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаДляОбработки.ДокументОтгрузки)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрокаДляОбработки.ДокументАванса) Тогда
			Продолжить;
		КонецЕсли; 

		ТекущаяСтрокаДляОбработки.ПривязатьАвансыКОтгрузкам = Ложь;
		ТекущаяСтрокаДляОбработки.ПривязатьОтгрузкуКАвансам = Ложь;
		
		СтруктураОтбораКорректировокДолга.Организация = ТекущаяСтрокаДляОбработки.ДокументАванса.Организация;
		СтруктураОтбораКорректировокДолга.Контрагент = ТекущаяСтрокаДляОбработки.ДокументАванса.Контрагент;

		НайденныеСтроки = ТаблицаСозданныхКорректировокДолга.НайтиСтроки(СтруктураОтбораКорректировокДолга);

		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрокаДляОбработки.КорректировкаДолга = НайденныеСтроки[0].КорректировкаДолгаСсылка;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если (Поле.Имя = "ТаблицаДокументовДокументОтгрузки" 
				ИЛИ Поле.Имя = "ТаблицаДокументовДокументОтгрузкиТекст")
			И ЗначениеЗаполнено(ТекущиеДанные.ДокументОтгрузки) Тогда
			ОткрытьЗначение(ТекущиеДанные.ДокументОтгрузки);
		ИначеЕсли (Поле.Имя = "ТаблицаДокументовДокументАванса" 
				ИЛИ Поле.Имя = "ТаблицаДокументовДокументАвансаТекст") 
			И ЗначениеЗаполнено(ТекущиеДанные.ДокументАванса) Тогда
			ОткрытьЗначение(ТекущиеДанные.ДокументАванса);
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.КорректировкаДолга) Тогда
			ОткрытьЗначение(ТекущиеДанные.КорректировкаДолга);
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОСВНаКлиенте(СтруктураПараметров)
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками")); // 62
	//МассивСчетов.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами")); // 76
	
	Дата						= СтруктураПараметров.Дата;
	Организация					= СтруктураПараметров.Организация;
	Контрагент					= СтруктураПараметров.Контрагент;
	ДоговорКонтрагента 			= СтруктураПараметров.ДоговорКонтрагента;
	
	Отбор_Организация			= СтруктураПараметров.Отбор_Организация;
	Отбор_Контрагент			= СтруктураПараметров.Отбор_Контрагент;
	Отбор_ДоговорКонтрагента 	= СтруктураПараметров.Отбор_ДоговорКонтрагента;
	Отбор_Объект				= СтруктураПараметров.Отбор_Объект;
	Параметр_Счет				= СтруктураПараметров.Счет;
	
	НачалоПериода				= НачалоМесяца(Дата);
	КонецПериода				= КонецДня(Дата);
	ПоСубсчетам					= Истина;
	Периодичность				= 0;
	
	ИмяОтчета = "ОборотноСальдоваяВедомостьПоСчету";
	пИмяФормы = СтрШаблон("Отчет.%1.Форма.ФормаОтчета", ИмяОтчета);
	
	Если ТипЗнч(Параметр_Счет) = Тип("СписокЗначений")
		И Параметр_Счет.Количество() > 0 Тогда
		
		МассивСчетов = Параметр_Счет.ВыгрузитьЗначения();
		
	ИначеЕсли ТипЗнч(Параметр_Счет) <> Тип("СписокЗначений")
		И ЗначениеЗаполнено(Параметр_Счет) Тогда
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(Параметр_Счет);
		
	КонецЕсли; 
	
	Для каждого Счет Из МассивСчетов Цикл
		
		КлючФормы = Строка(Новый УникальныйИдентификатор());
		
	    ПользовательскиеНастройкиКомпоновкиДанных = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	    ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить("Счет"			, Счет);
		ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить("НачалоПериода"	, НачалоПериода);
	    ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить("КонецПериода"	, КонецПериода);
	    ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить("Организация"		, Организация);
		ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить("ПоСубсчетам"		, ПоСубсчетам);
		ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить("Периодичность"	, Периодичность);
		

		НовыйОтбор = ПользовательскиеНастройкиКомпоновкиДанных.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		
		НовыйОтбор.ИдентификаторПользовательскойНастройки = "Отбор";    
		Если Отбор_Организация <> Неопределено Тогда
			НовыйЭлемент = НовыйОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Отбор_Организация);
			НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация")
		КонецЕсли; 
		Если Отбор_Контрагент <> Неопределено Тогда
			НовыйЭлемент = НовыйОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Отбор_Контрагент);
			НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто1")
		КонецЕсли; 
		Если Отбор_ДоговорКонтрагента <> Неопределено Тогда
			НовыйЭлемент = НовыйОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Отбор_ДоговорКонтрагента);
			НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2")
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НовыйОтбор, "Субконто2.ок_СложныйДоговор", Истина);
		КонецЕсли; 
		Если Отбор_Объект <> Неопределено Тогда
			НовыйЭлемент = НовыйОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Отбор_Объект);
			НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.Объект")
		КонецЕсли;

		// Группировки.
		ТабличнаяЧастьГруппировка = Новый Массив;
		
		// Договоры.
		ОписаниеГруппировки = Новый Структура;
		ОписаниеГруппировки.Вставить("Использование", Истина);
		ОписаниеГруппировки.Вставить("Поле", "Субконто2.Объект");
		ОписаниеГруппировки.Вставить("Представление", "Объект");
		ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
		ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		// Контрагенты.
		ОписаниеГруппировки = Новый Структура;
		ОписаниеГруппировки.Вставить("Использование", Истина);
		ОписаниеГруппировки.Вставить("Поле", "Субконто1");
		ОписаниеГруппировки.Вставить("Представление", "Контрагенты");
		ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
		ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		// Договоры.
		ОписаниеГруппировки = Новый Структура;
		ОписаниеГруппировки.Вставить("Использование", Истина);
		ОписаниеГруппировки.Вставить("Поле", "Субконто2");
		ОписаниеГруппировки.Вставить("Представление", "Договоры");
		ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
		ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		// Документы расчетов с контрагентом.
		ОписаниеГруппировки = Новый Структура;
		ОписаниеГруппировки.Вставить("Использование", Истина);
		ОписаниеГруппировки.Вставить("Поле", "Субконто3");
		ОписаниеГруппировки.Вставить("Представление", "Документы расчетов с контрагентом");
		ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
		ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		ПользовательскиеНастройкиКомпоновкиДанных.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
		
	    НастройкиРасшифровки = Новый Структура;
	    НастройкиРасшифровки.Вставить(ИмяОтчета, ПользовательскиеНастройкиКомпоновкиДанных);
	    
	    УсловияОтбора = Новый Структура();
	    УсловияОтбора.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	        
	    ОбщиеНастройки = Новый Структура();
	    ОбщиеНастройки.Вставить("Объект"           	   , УсловияОтбора);
	    ОбщиеНастройки.Вставить("НастройкиРасшифровки" , НастройкиРасшифровки);
	    
	    АдресХранилища = ПоместитьВоВременноеХранилище(ОбщиеНастройки, Новый УникальныйИдентификатор);
		
	    ЗаполнятьТиповыеНастройки = Новый Структура;
	    ЗаполнятьТиповыеНастройки.Вставить("Отбор"          , Ложь);
	    ЗаполнятьТиповыеНастройки.Вставить("Группировка"    , Ложь);
	    ЗаполнятьТиповыеНастройки.Вставить("ВыводимыеДанные", Истина);
	    ЗаполнятьТиповыеНастройки.Вставить("Показатели"     , Истина);
		
	    ПараметрыОтчета = Новый Структура;
	    ПараметрыОтчета.Вставить("ВидРасшифровки"         , 1);
	    ПараметрыОтчета.Вставить("АдресНастроек"          , АдресХранилища);
	    ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	    ПараметрыОтчета.Вставить("ИДРасшифровки"          , ИмяОтчета);
	    ПараметрыОтчета.Вставить("РежимРасшифровки"       , Истина);
	    ПараметрыОтчета.Вставить("ЗаполняемыеНастройки"   , ЗаполнятьТиповыеНастройки);
		
		ОткрытьФорму(пИмяФормы, ПараметрыОтчета, ЭтаФорма, КлючФормы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктураПараметровДляОтчетаОСВ()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Дата", 					Неопределено);
	СтруктураПараметров.Вставить("Организация", 			Неопределено);
	СтруктураПараметров.Вставить("Контрагент", 				Неопределено);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 		Неопределено);
	СтруктураПараметров.Вставить("Объект",			 		Неопределено);
	СтруктураПараметров.Вставить("Счет",			 		Неопределено);
	
	СтруктураПараметров.Вставить("Отбор_Организация",		Неопределено);
	СтруктураПараметров.Вставить("Отбор_Контрагент",		Неопределено);
	СтруктураПараметров.Вставить("Отбор_ДоговорКонтрагента",Неопределено);
	СтруктураПараметров.Вставить("Отбор_Объект",			Неопределено);
	
	пОтбор = КомпоновщикНастроек.ПолучитьНастройки().Отбор.Элементы;
	пПараметрыДанных = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных;
	Для каждого ТекущийЭлементОтбора Из пОтбор Цикл
	
		Если НЕ ТекущийЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ТекущийЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			
			СтруктураПараметров.Организация 				= ТекущийЭлементОтбора.ПравоеЗначение;
			СтруктураПараметров.Отбор_Организация 			= ТекущийЭлементОтбора;
			
		ИначеЕсли ТекущийЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент") Тогда
			
			СтруктураПараметров.Контрагент 					= ТекущийЭлементОтбора.ПравоеЗначение;
			СтруктураПараметров.Отбор_Контрагент 			= ТекущийЭлементОтбора;
			
		ИначеЕсли ТекущийЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента") Тогда
			
			СтруктураПараметров.ДоговорКонтрагента 			= ТекущийЭлементОтбора.ПравоеЗначение;
			СтруктураПараметров.Отбор_ДоговорКонтрагента 	= ТекущийЭлементОтбора;
			
		ИначеЕсли ТекущийЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект") Тогда
			
			СтруктураПараметров.Объект 						= ТекущийЭлементОтбора.ПравоеЗначение;
			СтруктураПараметров.Отбор_Объект 				= ТекущийЭлементОтбора;
			
		ИначеЕсли ТекущийЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет") Тогда
			
			СтруктураПараметров.Счет 						= ТекущийЭлементОтбора.ПравоеЗначение;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	пПериод = пПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")).Значение;
	Если ЗначениеЗаполнено(пПериод) Тогда
		СтруктураПараметров.Дата = пПериод;
	КонецЕсли; 
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Элементы.ТаблицаДокументовОрганизация.Видимость 					= Колонка_Организация;
	Элементы.ТаблицаДокументовКонтрагент.Видимость 						= Колонка_Контрагент;
	Элементы.ТаблицаДокументовДоговорКонтрагента.Видимость 				= Колонка_ДоговорКонтрагента;
	Элементы.ТаблицаДокументовДоговорКонтрагентаОбъект.Видимость		= Колонка_Объект;
	Элементы.ТаблицаДокументовДокументАвансаНазначениеПлатежа.Видимость	= Колонка_НазначениеПлатежа;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-01 (#3852)
	Элементы.ТаблицаДокументовДокументОтгрузкиВидАП.Видимость			= Колонка_ВидАП;
	Элементы.ТаблицаДокументовДокументОтгрузкиПериодАП.Видимость		= Колонка_ПериодАП;
	Элементы.ТаблицаДокументовДокументОтгрузкиКомментарий.Видимость		= Колонка_Комментарий;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-01 (#3852)
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПроверкуЗаполненностиОтборов()
	
	РезультатПроверки = Истина;
	
	СтруктураПараметров = ПолучитьСтруктураПараметровДляОтчетаОСВ();
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Дата) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Дата"" не заполнено.");
		РезультатПроверки = Ложь;
		
	КонецЕсли; 

	Если ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента)
		И ЗначениеЗаполнено(СтруктураПараметров.Объект) 
		И ТипЗнч(СтруктураПараметров.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ТипЗнч(СтруктураПараметров.Объект) = Тип("СправочникСсылка.ОбъектыСтроительства")
		И ПолучитьЗначениеРеквизитаОбъектаНаСервере(СтруктураПараметров.ДоговорКонтрагента, "Объект") <> СтруктураПараметров.Объект Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Объект, указанный в отборе, не соответствует объекту договора.");
		РезультатПроверки = Ложь;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКнопокПереходаПоСостоянию()
	
	ПредыдущееСостояние = ТаблицаИсторииДанных.НайтиСтроки(Новый Структура("НомерВерсии", (ТекущаяВерсияДанных - 1)));
	Элементы.ТаблицаДокументовКоманда_ПредыдущееСостояние.Доступность = ПредыдущееСостояние.Количество() > 0;
	
	СледующееСостояние = ТаблицаИсторииДанных.НайтиСтроки(Новый Структура("НомерВерсии", (ТекущаяВерсияДанных + 1)));
	Элементы.ТаблицаДокументовКоманда_СледующееСостояние.Доступность = СледующееСостояние.Количество() > 0;

КонецПроцедуры

#КонецОбласти
