
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_ЗагрузкаМакетаИзФайла;
	Если НЕ ЗначениеЗаполнено(Параметры.Отчет) Тогда
		бит_ОбщегоНазначенияКлиентСервер.СообщитьОбОтказеОткрытияОбработкиСамостоятельно(МетаданныеОбъекта.Синоним, Отказ);
	КонецЕсли;	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
    Объект.Отчет                 = Параметры.Отчет;
    Объект.СтруктураИмениОбласти = Параметры.СтруктураИмениОбласти;
    
    Объект.МасштабВысота = 100;
    Объект.МасштабШирина = 100;
    
    УстановитьВидимостьЭлементовВЗависимостиОтРасширенияФайла();
    
    Объект.СоздатьСтруктуру = Истина;
    НоваяСтр = СтруктураОтчета.Добавить();
    НоваяСтр.ИмяТаблицы    = "Новая таблица";
    НоваяСтр.СтрокаКолонок = 1;
    НоваяСтр.КолонкаСтрок  = 1;
    
    Объект.ЗагружатьФормулы = Истина;
        
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
    
    Если ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
        НачатьУдалениеФайлов(Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект), ИмяВременногоФайла);
    КонецЕсли;
	УдалитьИзВременногоХранилища(АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(ДополнительныеПараметры) Экспорт
	
	Совместимо = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    Если Объект.ЗагружатьФормулы Тогда
        
        ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	    ДиалогВыбораФайла.Фильтр = "Листы Microsoft Excel (*.xls, *.xlsx)|*.xls; *.xlsx|";
        
    Иначе	
        
        ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
        ДиалогВыбораФайла.Фильтр = 
        "Все табличные документы (*.mxl, *.xls, *.xlsx)|*.mxl; *.xls; *.xlsx|
        |Таблицы Microsoft Excel (*.xls, *.xlsx)|*.xls; *.xlsx|
        |Табличные документы 1С (*.mxl)|*.mxl";
        
    КонецЕсли;
       
    ДопПараметры = Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла);
    ОповещениеВФ = Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект, ДопПараметры);
    ДиалогВыбораФайла.Показать(ОповещениеВФ);
    
КонецПроцедуры // ПутьКФайлуНачалоВыбора()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьВТабличныйДокумент(Команда)
  
    ТабДокЗагружен = Ложь;
    
    Если Объект.СоздатьСтруктуру И СтруктураОтчета.Количество() > 0 Тогда
        СтрокаСтруктурыОтчета = СтруктураОтчета[0];        
        Если СтрокаСтруктурыОтчета.СтрокаКолонок = 0 ИЛИ СтрокаСтруктурыОтчета.КолонкаСтрок = 0 Тогда
            Объект.СоздатьСтруктуру = Ложь;   
            ТекстСообщения = Нстр("ru = 'Для загрузки структуры установите параметры таблицы.'");
            бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
            Возврат;
        КонецЕсли;
    КонецЕсли;
	
	Если Объект.Расширение = "mxl" Тогда
		
		ТабДокЗагружен = ЗагрузитьТабДокИзMxl();
		Если ТабДокЗагружен Тогда
			ЗакрытьОбработку(Истина);
		КонецЕсли;
		
	ИначеЕсли Объект.Расширение = "xls" ИЛИ Объект.Расширение = "xlsx" Тогда
		
		Результат = ЗагрузитьТабДокИзExcel();
		Если Результат.ЗаданиеВыполнено Тогда
			
			ТабДокЗагружен = Истина;
			Если НЕ Результат.ЕстьОшибки Тогда
				ЗакрытьОбработку(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = Нстр("ru = 'Не указан файл.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
      
КонецПроцедуры // ЗагрузитьВТабличныйДокумент()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовВЗависимостиОтРасширенияФайла()

    Элементы.ГруппаExcel.Видимость = Объект.Расширение = "xls" ИЛИ Объект.Расширение = "xlsx";
    Элементы.ИмяЛиста.Видимость    = Элементы.ИмяЛиста.СписокВыбора.Количество() > 1;
      
КонецПроцедуры // УстановитьВидимостьЭлементовВЗависимостиОтРасширенияФайла()

&НаКлиенте
Процедура ЗакрытьОбработку(ВернутьТабДок = Ложь)

    Если ВернутьТабДок Тогда
        
        Закрыть(Объект.АдресТабДок);
        
    Иначе
        
        Закрыть();
        
    КонецЕсли;   	

КонецПроцедуры // ЗакрытьОбработку()

&НаКлиенте
Процедура ЗавершениеВыбораФайла(ВыбранныйФайл, ДопПараметры) Экспорт 
       
    Если ВыбранныйФайл = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ДиалогВыбораФайла = ДопПараметры.ДиалогВыбораФайла;
    Объект.ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
    
    Файл = Новый Файл(Объект.ПутьКФайлу);
        
    Объект.Расширение = НРег(Сред(Файл.Расширение, 2));
    
    Если Объект.Расширение <> "xls" И Объект.Расширение <> "xlsx" И Объект.Расширение <> "mxl" Тогда
        ТекстСообщения = Нстр("ru = 'Не удалось определить тип файла.'");
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
        //ЗакрытьОбработку();
        Возврат;
    КонецЕсли;
    
    ОповещениеПФ = Новый ОписаниеОповещения("ЗавершениеПомещенияФайла", ЭтотОбъект, );
    Попытка
        НачатьПомещениеФайла(ОповещениеПФ, АдресХранилища, Объект.ПутьКФайлу, Ложь, УникальныйИдентификатор);   
    Исключение
        ТекстСообщения = Нстр("ru = 'Не удалось получить доступ к файлу Excel.'");// + ОписаниеОшибки();
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
    КонецПопытки;	

КонецПроцедуры // ЗавершениеВыбораФайла()

&НаКлиенте
Процедура ЗавершениеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    
    АдресХранилища = Адрес;
    
    Если Объект.Расширение = "xls" ИЛИ Объект.Расширение = "xlsx" Тогда
                
        // Создание COM объекта Excel.
        СтруктураФайлаExcel = бит_ОбменДаннымиЭксельКлиентСервер.СоздатьПриложениеExcelСохранивНастройки();
        Если СтруктураФайлаExcel = Неопределено Тогда
            Возврат;      
        КонецЕсли;
        ExcelApplication    = СтруктураФайлаExcel.ExcelApplication;
        СохрНастройкиExcel  = СтруктураФайлаExcel.СохрНастройкиExcel;
        
        // Файл Excel
        ФайлExcel = бит_ОбменДаннымиЭксельКлиентСервер.ОткрытьФайлExcel(ExcelApplication, Объект.ПутьКФайлу);
        Если ФайлExcel = Неопределено Тогда
            Возврат;      
        КонецЕсли;
        
        // Лист
        МассивЛистовExcel = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьМассивЛистовExcel(ФайлExcel);
        Если МассивЛистовExcel = Неопределено Тогда
            Возврат;      
        КонецЕсли;
        Элементы.ИмяЛиста.СписокВыбора.ЗагрузитьЗначения(МассивЛистовExcel);
        Если МассивЛистовExcel <> Неопределено Тогда
            Объект.ИмяЛиста = МассивЛистовExcel[0];       
        КонецЕсли;        
        
        // Закрытие COM объекта Excel. 
        бит_ОбменДаннымиЭксельКлиентСервер.ЗакрытьФайлExcel(ФайлExcel);
        бит_ОбменДаннымиЭксельКлиентСервер.ЗакрытьПриложениеExcelССохраненнымиНастройками(ExcelApplication, СохрНастройкиExcel);
                 
    КонецЕсли;
    
    УстановитьВидимостьЭлементовВЗависимостиОтРасширенияФайла();
        
КонецПроцедуры // ЗавершениеПомещенияФайла()

#Область ЗагрузкаТабДок

&НаСервере
Функция ЗагрузитьТабДокИзMxl()
    
    ТабДокЗагружен = Ложь;
    
    // Извлечение файла из временного хранилище и запись его по временному пути.
	КаталогВременныхФайлов = ФайловаяСистема.СоздатьВременныйКаталог("layout");
	ИмяВременногоФайла = КаталогВременныхФайлов + Строка(Новый УникальныйИдентификатор) + ".mxl";
	ВремФайл = ПолучитьИзВременногоХранилища(АдресХранилища);
    ВремФайл.Записать(ИмяВременногоФайла);
    
    // Загрузка данных в табличный документ.
	Попытка
    
    	ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
        Объект.АдресТабДок = ПоместитьВоВременноеХранилище(ТабличныйДокумент);
        ТабДокЗагружен = Истина;
	Исключение
        ТекстСообщения = ИнформацияОбОшибке().Описание;
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
    КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйКаталог(КаталогВременныхФайлов);
	
	Возврат ТабДокЗагружен;
	
Конецфункции // ЗагрузитьТабДокИзMxl()

&НаКлиенте
Функция ЗагрузитьТабДокИзExcel()
	
	Результат = Новый Структура("ЗаданиеВыполнено, ЕстьОшибки", Ложь, Ложь);
	
	#Если НЕ ВебКлиент Тогда
		
		// Извлечение файла из временного хранилище и запись его по временному пути.
		ИмяВременногоФайла =  ПолучитьИмяВременногоФайла("mxl");
		ВремФайл = ПолучитьИзВременногоХранилища(АдресХранилища);
		ВремФайл.Записать(ИмяВременногоФайла);
		
		// В файловом режиме работы выполняем операцию непосредственно (синхронно).
		Объект.АдресТабДок = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Попытка    
			// Загрузка данных в табличный документ.
			ЗагрузитьТабличныйДокументИзФайлаExcel(ИмяВременногоФайла, Объект.АдресТабДок);
			Результат.Вставить("ЗаданиеВыполнено", Истина);                                
			Если ПолучитьИзВременногоХранилища(Объект.АдресТабДок) = Неопределено Тогда
				Результат.Вставить("ЕстьОшибки", Истина);
			КонецЕсли; 
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Результат.Вставить("ЕстьОшибки", Истина);
		КонецПопытки;
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	# КонецЕсли 
	
	Возврат Результат;
	
Конецфункции // ЗагрузитьТабДокИзExcel()

#КонецОбласти 

#Область ЗагрузитьТабличныйДокументИзФайлаExcel

// Загружает макет из Excel в табличный документ.
//
// Параметры:
//  ПутьКФайлу     - Строка - полный путь к файлу.
//  АдресРезультат - Строка.
// 
&НаКлиенте
Процедура ЗагрузитьТабличныйДокументИзФайлаExcel(ПутьКФайлу, АдресРезультат)
           
    СтруктураКолонок = Новый Структура;
    СтруктураСтрок   = Новый Структура;
        
    СтруктураПоказателей = Новый Структура;
            
    Если Объект.СоздатьСтруктуру И СтруктураОтчета.Количество() > 0 Тогда
        СтрокаСтруктурыОтчета = СтруктураОтчета[0];
        ИмяТаблицы    = СтрокаСтруктурыОтчета.ИмяТаблицы;
        СтрокаКолонок = СтрокаСтруктурыОтчета.СтрокаКолонок;
        КолонкаСтрок  = СтрокаСтруктурыОтчета.КолонкаСтрок;
    Иначе
        СтрокаКолонок = 0;
        КолонкаСтрок  = 0;
    КонецЕсли;
    Если СтрокаКолонок = 0 ИЛИ КолонкаСтрок = 0 Тогда
        Объект.СоздатьСтруктуру = Ложь;   
        ТекстСообщения = Нстр("ru = 'Структура не загружена, не установлены настройки.'");
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
    КонецЕсли;
                 
    ТабличныйДокумент = Новый ТабличныйДокумент;
		
	// Создание COM объекта Excel.
    СтруктураФайлаExcel = бит_ОбменДаннымиЭксельКлиентСервер.СоздатьПриложениеExcelСохранивНастройки();
    Если СтруктураФайлаExcel = Неопределено Тогда
        Возврат;      
    КонецЕсли;
    ExcelApplication    = СтруктураФайлаExcel.ExcelApplication;
    СохрНастройкиExcel  = СтруктураФайлаExcel.СохрНастройкиExcel;
    
    // Файл Excel
    ФайлExcel = бит_ОбменДаннымиЭксельКлиентСервер.ОткрытьФайлExcel(ExcelApplication, ПутьКФайлу);
    Если ФайлExcel = Неопределено Тогда
        Возврат;      
    КонецЕсли;
    
    ExcelApplication.Visible = Ложь;       
    
    // Лист Excel
	Если ТипЗнч(Объект.ИмяЛиста) = Тип("Строка") Тогда
		ЛистExcel = ФайлExcel.Sheets(Объект.ИмяЛиста);
	ИначеЕсли ТипЗнч(Объект.ИмяЛиста) = Тип("Число") Тогда
		ЛистExcel = ФайлExcel.Sheets.Item(Объект.ИмяЛиста);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЛистExcel.Activate();
	
	Попытка    
    	// Проверка доступа к последней ячейке
		ЛистExcel.Application.ActiveCell().SpecialCells(11).Select();  // Последняя ячейка.
    Исключение        
        ТекстСообщения = Нстр("ru = 'Ошибка при обращении к ячейкам файла Excel.'");
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецПопытки;
    
    //НачатьТранзакцию();
    Попытка
        
        первСтрока   = ЛистExcel.UsedRange.Row;
        ВсегоСтрок   = первСтрока + ЛистExcel.UsedRange.Rows.Count -1;
        первКолонка  = ЛистExcel.UsedRange.Column;
        ВсегоКолонок = первКолонка + ЛистExcel.UsedRange.Columns.Count -1;
                 	
    	КоличествоИмен = ExcelApplication.ActiveWorkbook.ActiveSheet.Names.Count;
    	ИспользованиеГлобальныхИмен = КоличествоИмен = 0 И ExcelApplication.ActiveWorkBook.Sheets.Count = 1;	
    	Если ИспользованиеГлобальныхИмен Тогда
    	    КоличествоИмен = ExcelApplication.ActiveWorkbook.Names.Count;
    	КонецЕсли;
    	
        // Определение именованных областей.
        Для Инд = 1 По КоличествоИмен Цикл
            
            ТекИмя = ?(ИспользованиеГлобальныхИмен
                        , ExcelApplication.ActiveWorkbook.Names.Item(Инд)
                        , ExcelApplication.ActiveWorkbook.ActiveSheet.Names.Item(Инд)); 
        
            Попытка
                КоличествоКолонок = ТекИмя.RefersToRange.Columns.Count;
            Исключение
                Продолжить;
            КонецПопытки;
            
            // Секции.
            Если КоличествоКолонок = 0 ИЛИ КоличествоКолонок = 256 Тогда
                КоличествоСтрок = ТекИмя.RefersToRange.Rows.Count;
                сВерх = ТекИмя.RefersToRange.Rows.Item(1).Row;
                сНиз  = ТекИмя.RefersToRange.Rows.Item(КоличествоСтрок).Row;
                Имя = СтрЗаменить(ТекИмя.Name, ExcelApplication.ActiveWorkBook.ActiveSheet.Name + "!", "");
                ТабличныйДокумент.Область(сВерх, 0, сНиз, 0).Имя = Имя;
            КонецЕсли;        
            
        КонецЦикла;		  
    	
    	ОбъединенныеОбласти = Новый СписокЗначений;
    	СкрытыеОбласти      = Новый СписокЗначений;		
    		
    	// Заполнение массивов скрытых строк, колонок.
        СкрытыеСтроки = Новый Массив(ВсегоСтрок);
    	Для нС = 1 По ВсегоСтрок Цикл
    		СкрытыеСтроки[нС - 1] = ЛистExcel.Rows.Item(нС).Hidden();
        КонецЦикла;
        СкрытыеКолонки = Новый Массив(ВсегоКолонок);
    	Для нК = 1 По ВсегоКолонок Цикл
    		СкрытыеКолонки[нК - 1] = ЛистExcel.Columns.Item(нК).Hidden();
    	КонецЦикла;
    	
    	ВсегоЯчеек = ВсегоСтрок * ВсегоКолонок;
    	сСдвиг = 0;
    	Для нС = 1 По ВсегоСтрок Цикл
            
            ЯчейкаExcel = ЛистExcel.Cells(нС, 1);
    		Если НЕ СкрытыеСтроки[нС - 1] Тогда
                
                кСдвиг = 0;
    			Для нК = 1 По ВсегоКолонок Цикл
    					
    				#Если Клиент Тогда
    				ОбработкаПрерыванияПользователя();
    				#КонецЕсли
                    					
    				ЯчейкаExcel = ЛистExcel.Cells(нС, нК);
    				АдресЯчейки = ЯчейкаExcel.Address;
                                    					
    				Если НЕ СкрытыеКолонки[нК - 1] Тогда
    			                   
                        ТекОбласть = ПолучитьТекущуюОбласть(ТабличныйДокумент, ЯчейкаExcel
                                        , ОбъединенныеОбласти
                                        , СкрытыеОбласти, СкрытыеКолонки, СкрытыеСтроки
                                        , нС, нК
                                        , сСдвиг, кСдвиг);
                        
    					// Значение.
                        УстановитьЗначениеОбласти(ТекОбласть, ЯчейкаExcel);
                        
                        // Загрузка структуры.
                        ЗагрузитьЭлементыСтруктуры(ТабличныйДокумент, ЯчейкаExcel, ТекОбласть, 
                                                  нС, нК, КолонкаСтрок, СтрокаКолонок, 
                                                  СтруктураПоказателей);
                                                					                    
                        // Оформление
                        УстановитьОформлениеОбласти(ТекОбласть, ЯчейкаExcel);
                        
                        ТекОбласть.Защита = Ложь;
                        
    				Иначе
                        
                        кСдвиг = кСдвиг + 1;
                        
                    КонецЕсли;
                    
                КонецЦикла;
                
    		Иначе
                
                сСдвиг = сСдвиг + 1;
                
            КонецЕсли;
            
    	КонецЦикла;
        
        // Создание элементов справочников:
        // бит_мпд_ТаблицыПроизвольныхОтчетов, бит_мпд_ЭлементыТаблицПроизвольныхОтчетов, бит_ПоказателиПроизвольныхОтчетов.
        СоздатьОбъектыНаСервере(ТабличныйДокумент, СтруктураСтрок, СтруктураКолонок, ИмяТаблицы, КолонкаСтрок, СтрокаКолонок, СтруктураПоказателей);
        // Запись данных о показателях в табличный документ.
        ЗаписатьПоказатели(ТабличныйДокумент); 
                
    	// Объединение ячеек.
        ОбъединитьОбласти(ТабличныйДокумент, ОбъединенныеОбласти);
        
        // Ширина колонок и высота строк.
        УстановитьРазмерыОбластей(ТабличныйДокумент, ЛистExcel, ВсегоСтрок, ВсегоКолонок);
        
        // Сохранение табличного документа во временном хранилище для дальнейшей работы.
        ХранилищеТабДок = ПолучитьХранилищеТабДок(ТабличныйДокумент);        
        СтруктураРезультат = Новый Структура;
        СтруктураРезультат.Вставить("СозданаСтруктура", Объект.СоздатьСтруктуру);
        СтруктураРезультат.Вставить("СозданыПравила"  , Объект.ЗагружатьФормулы);
        СтруктураРезультат.Вставить("МаксНомерОбласти", Объект.СтруктураИмениОбласти.МаксНомерОбласти);
        СтруктураРезультат.Вставить("ХранилищеТабДок" , ХранилищеТабДок);
        ПоместитьВоВременноеХранилище(СтруктураРезультат, АдресРезультат);
        
        //ЗафиксироватьТранзакцию();
        
    Исключение
        
        ТекстСообщения = Нстр("ru = 'При загрузке макета произошла ошибка.'");
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);        
        //ОтменитьТранзакцию();
        
    КонецПопытки;
    
	ЛистExcel.Parent.Close(Ложь);
	ЛистExcel = Неопределено;
    
    // Закрытие COM объекта Excel. 
    бит_ОбменДаннымиЭксельКлиентСервер.ЗакрытьФайлExcel(ФайлExcel);
    бит_ОбменДаннымиЭксельКлиентСервер.ЗакрытьПриложениеExcelССохраненнымиНастройками(ExcelApplication, СохрНастройкиExcel);
  
КонецПроцедуры

&НаСервере
Функция ПолучитьХранилищеТабДок(ТабличныйДокумент)

    // Сохранение табличного документа во временном хранилище для дальнейшей работы.
    Возврат Новый ХранилищеЗначения(ТабличныйДокумент);        
    
КонецФункции // ПолучитьСтруктуруРезультата()
 
#Область Области

// Устанавливает ширину колонок и высоту строк табличного документа.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, в который загружается макет.
//  ЛистExcel         - ComObject - лист Excel.
//  ВсегоСтрок        - Число - общее количество строк табличного документа.
//  ВсегоКолонок      - Число - общее количество колонок табличного документа.
// 
&НаКлиенте
Процедура УстановитьРазмерыОбластей(ТабличныйДокумент, ЛистExcel, ВсегоСтрок, ВсегоКолонок)
    
    аМасштабШирина = Объект.МасштабШирина / 100;
    аМасштабВысота = Объект.МасштабВысота / 100;
    
    // Установка ширины колонок.
    Сдвиг = 0; // Для пропуска невидимых колонок.
    Для нК = 1 По ВсегоКолонок Цикл
        ЯчейкаExcel = ЛистExcel.Cells(1, нК);
        Если ЯчейкаExcel.EntireColumn.Hidden() = 0 Тогда
            Путь = "R1C" + Формат(нК - Сдвиг, "ЧГ=0");
            ТабличныйДокумент.Область(Путь).ШиринаКолонки = ЯчейкаExcel.ColumnWidth() * аМасштабШирина;
        Иначе
            Сдвиг = Сдвиг + 1;
        КонецЕсли;
    КонецЦикла;
    
    // Установка высоты строк.
    Сдвиг = 0; // Для пропуска невидимых строк.
    Для нС = 1 По ВсегоСтрок Цикл
        ЯчейкаExcel = ЛистExcel.Cells(нС, 1);
        Если ЯчейкаExcel.EntireRow.Hidden() = 0 Тогда
            Путь = "R" + Формат(нС - Сдвиг, "ЧГ=0")+"C1";
            ТабличныйДокумент.Область(Путь).ВысотаСтроки = ЯчейкаExcel.RowHeight() * аМасштабВысота;
        Иначе
            Сдвиг = Сдвиг + 1;
        КонецЕсли;
    КонецЦикла;	

КонецПроцедуры // УстановитьРазмерыОбластей()

// Устанавливает ширину колонок и высоту строк табличного документа.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, в который загружается макет.
//  ЯчейкаExcel       - ComObject - ячейка Excel.
//
// Возвращаемое значение:
//  ОбластьТабличногоДокумента - область для загрузки.
// 
&НаКлиенте
Функция ПолучитьТекущуюОбласть(ТабличныйДокумент, ЯчейкаExcel
    , ОбъединенныеОбласти, СкрытыеОбласти, СкрытыеКолонки, СкрытыеСтроки, нС, нК, сСдвиг, кСдвиг)

    Если ЯчейкаExcel.MergeCells Тогда
        ВыделенныхСтрок   = ЯчейкаExcel.MergeArea.Rows.Count;
        ВыделенныхКолонок = ЯчейкаExcel.MergeArea.Columns.Count;
    Иначе
        ВыделенныхСтрок   = 1;
        ВыделенныхКолонок = 1;
    КонецЕсли;
    
    НачАдр = "R" + Формат(нС, "ЧГ=0") + "C" + Формат(нК, "ЧГ=0");                    
    Если (ВыделенныхСтрок > 1 ИЛИ ВыделенныхКолонок > 1) И (СкрытыеОбласти.НайтиПоЗначению(НачАдр) = Неопределено) Тогда
        
        СкрытоКолонок = ПолучитьКоличествоСкрытыхВДиапазоне(СкрытыеКолонки, нК, нК + ВыделенныхКолонок - 1);
        СкрытоСтрок	  = ПолучитьКоличествоСкрытыхВДиапазоне(СкрытыеСтроки, нС, нС + ВыделенныхСтрок - 1);
        КонСтр		  = СокрЛП(Формат(нС + ВыделенныхСтрок - 1 - СкрытоСтрок, "ЧГ=0"));
        КонСтолб	  = СокрЛП(Формат(нК + ВыделенныхКолонок - 1 - СкрытоКолонок, "ЧГ=0"));
                    
        Диапазон = НачАдр + ":R" + КонСтр + "C" + КонСтолб;
        Если ОбъединенныеОбласти.НайтиПоЗначению(Диапазон) = Неопределено Тогда
            ОбъединенныеОбласти.Добавить(Диапазон);
        КонецЕсли;
                    
        Для ИндСтр = 1 По ВыделенныхСтрок Цикл
            Для ИндКол = 1 По ВыделенныхКолонок Цикл
                Путь = "R" + Формат(нС + ИндСтр - 1, "ЧГ=0") + "C" + Формат(нК + ИндКол - 1, "ЧГ=0");
                СкрытыеОбласти.Добавить(Путь);
            КонецЦикла; 
        КонецЦикла;
        
    КонецЕсли;
    
    Путь = "R" + Формат(нС - сСдвиг, "ЧГ=0") + "C" + Формат(нК - кСдвиг, "ЧГ=0");
    Возврат ТабличныйДокумент.Область(Путь);	

КонецФункции // ПолучитьТекущуюОбласть()

// Возвращает число скрытых колонок или строк в указанном диапазоне исходной таблицы.
//
// Параметры:
//  МассивСкрытых - Масив - массив скрытых строк или колонок.
//  СчНач - Число - счетчик начало.
//  СчКон - Число - счетчик конец.
//
&НаКлиенте
Функция ПолучитьКоличествоСкрытыхВДиапазоне(МассивСкрытых, СчНач, СчКон)
	
	КоличествоСкрытых = 0;
    
    Для Сч = СчНач По СчКон Цикл
		Если МассивСкрытых[Сч - 1] <> 0 Тогда
			КоличествоСкрытых = КоличествоСкрытых + 1;
		КонецЕсли;
	КонецЦикла; 
    
    Возврат КоличествоСкрытых;
	
КонецФункции // ПолучитьКоличествоСкрытыхВДиапазоне()

// Объединяет области по ранее заполненному списку.
//
// Параметры:
//  ТабличныйДокумент   - ТабличныйДокумент - табличный документ, в который загружается макет.
//  ОбъединенныеОбласти - СписокЗначений - список требующих объединения областей.
//
&НаКлиенте
Процедура ОбъединитьОбласти(ТабличныйДокумент, ОбъединенныеОбласти)

    Для Сч = 0 По ОбъединенныеОбласти.Количество() - 1  Цикл
        
        ДиапазонОбъединения = СокрЛП(ОбъединенныеОбласти.Получить(Сч)); 
        
        Область = ТабличныйДокумент.Область(ДиапазонОбъединения);
		Область.Объединить();
        
	КонецЦикла;	

КонецПроцедуры // ОбъединитьОбласти()

#КонецОбласти

#Область Значение

// Устанавливает значение.
//
&НаКлиенте
Процедура УстановитьЗначениеОбласти(ТекОбласть, ОбластьИсточник)

    ЗначениеИсточник = ОбластьИсточник.Value;    
    Если ЗначениеЗаполнено(ЗначениеИсточник) Тогда
        
        ТипЗнчИсточник = ТипЗнч(ЗначениеИсточник);
        Если ТипЗнчИсточник = Тип("Число") ИЛИ ТипЗнчИсточник = Тип("Булево") ИЛИ ТипЗнчИсточник = Тип("Дата") Тогда
            
            ТекОбласть.СодержитЗначение = Истина;
            
            МассивТипов = Новый Массив;
            МассивТипов.Добавить(ТекОбласть);
            ТекОбласть.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
            ТекОбласть.Значение = ЗначениеИсточник;
            
        Иначе
            
            ТекОбласть.Текст = ОбластьИсточник.Text;
            
        КонецЕсли;
        
    КонецЕсли;  
        
КонецПроцедуры // УстановитьЗначениеОбласти()

#КонецОбласти

#Область Оформление

// Устанавливает оформление.
//
&НаКлиенте
Процедура УстановитьОформлениеОбласти(ТекОбласть, ОбластьИсточник)

    // Цвета фона.
    ЦветФона = ОбластьИсточник.Interior.Color;
    ТекОбласть.ЦветФона = Новый Цвет(ЦветФона % 256, Цел(ЦветФона / 256) % 256, Цел(ЦветФона / 65536) % 256);
                
    // Цвета текста.
    ЦветТекста = ОбластьИсточник.Font.Color;
    ТекОбласть.ЦветТекста = Новый Цвет(ЦветТекста % 256, Цел(ЦветТекста / 256) % 256, Цел(ЦветТекста / 65536) % 256);
    
    // Шрифт.
    УстановитьШрифт(ТекОбласть.Шрифт, ОбластьИсточник.Font);
            
    // Праметры размещения текста.
    УстановитьРазмещениеТекста(ТекОбласть, ОбластьИсточник);
                
    // Рамка.	
    УстановитьГраницу(ТекОбласть, "ГраницаСверху", ОбластьИсточник.Borders(8));
    УстановитьГраницу(ТекОбласть, "ГраницаСлева" , ОбластьИсточник.Borders(7));
    УстановитьГраницу(ТекОбласть, "ГраницаСправа", ОбластьИсточник.Borders(10));
    УстановитьГраницу(ТекОбласть, "ГраницаСнизу" , ОбластьИсточник.Borders(9));
                											
КонецПроцедуры // УстановитьОформлениеОбласти()

// Устанавливает шрифт.
//
&НаКлиенте
Процедура УстановитьШрифт(ШрифтЗагружаемый, ШрифтИсточник)

    ИмяШрифта    = СокрЛП(Строка(ШрифтИсточник.Name()));
    РазмерШрифта = ШрифтИсточник.Size();
    
    // Полужирный
    Попытка 
        Пж = Число(ШрифтИсточник.Bold());			
    Исключение 
        Пж = 0;		
    КонецПопытки;
    // Курсив
    Попытка	
        Кр = Число(ШрифтИсточник.Italic());			
    Исключение 
        Кр = 0;			
    КонецПопытки;
    // Подчеркнутый
    Попытка	
        Пч = ?(ШрифтИсточник.Underline() = 2, 1, 0);	
    Исключение 
        Пч = 0;	
    КонецПопытки;   
    
    ШрифтЗагружаемый = Новый Шрифт(ШрифтЗагружаемый, ИмяШрифта, РазмерШрифта, Пж, Кр, Пч);
							
КонецПроцедуры // УстановитьШрифт()

// Устанавливает границу - часть рамки ячейки.
//
&НаКлиенте
Функция УстановитьГраницу(ТекОбласть, ИмяГраницы, ГраницаИсточник)

    ЗначениеГраницы = ГраницаИсточник.LineStyle();
    ШиринаГраницы   = 0;
    
	Если ЗначениеГраницы = -4142 Тогда
		ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.НетЛинии;
	ИначеЕсли ЗначениеГраницы = -4118 Тогда
		ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир;
        ШиринаГраницы = 1;
	ИначеЕсли ЗначениеГраницы = -4119 Тогда
		ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Двойная;
        ШиринаГраницы = 1;
	Иначе
		ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Сплошная;
        ШиринаГраницы = ?(ГраницаИсточник.Weight = -4138, 2, 1);
    КонецЕсли;
    
    Если ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.НетЛинии Тогда
        ТекОбласть[ИмяГраницы] = Новый Линия(ТипЛинии);
    Иначе	
        ТекОбласть[ИмяГраницы] = Новый Линия(ТипЛинии, ШиринаГраницы);
    КонецЕсли;
    	
КонецФункции // УстановитьГраницу()

// Устанавливает параметры выравнивания и свойства размещения текста для области
// по свойствам соответствующей области исходной таблицы.
//
&НаКлиенте
Процедура УстановитьРазмещениеТекста(Область, ЯчейкаExcel)
	
	ГоризонтальноеВыравнивание = ЯчейкаExcel.HorizontalAlignment();
	Если ГоризонтальноеВыравнивание	= -4108 Тогда
		Область.ГоризонтальноеПоложение	= ГоризонтальноеПоложение.Центр;
	ИначеЕсли ГоризонтальноеВыравнивание = -4131 Тогда
		Область.ГоризонтальноеПоложение	= ГоризонтальноеПоложение.Лево;
	ИначеЕсли ГоризонтальноеВыравнивание = -4152 Тогда
		Область.ГоризонтальноеПоложение	= ГоризонтальноеПоложение.Право;
	ИначеЕсли ГоризонтальноеВыравнивание = 7 Тогда
		Область.ГоризонтальноеПоложение	= ГоризонтальноеПоложение.Центр;
		Область.ПоВыделеннымКолонкам = Истина;
	ИначеЕсли ГоризонтальноеВыравнивание= 1 Тогда
		Область.ПоВыделеннымКолонкам = Истина;
	КонецЕсли;
	
	ВертикальноеВыравнивание = ЯчейкаExcel.VerticalAlignment();
	Если ВертикальноеВыравнивание = -4107 Тогда
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ИначеЕсли ВертикальноеВыравнивание = -4160 Тогда
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ИначеЕсли ВертикальноеВыравнивание = -4108 Тогда
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	КонецЕсли;
	
	Если ЯчейкаExcel.WrapText() Тогда
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Иначе
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	КонецЕсли;
	
КонецПроцедуры // УстановитьРазмещениеТекста()
	
#КонецОбласти

#Область СтруктураОтчета

&НаКлиенте
Функция СформироватьУникальноеИмяОбласти(ТабДокумент, СтруктураИмениОбласти)
    
	КонтрольнаяОбласть = "ВыполнимХотябыОдинРаз";
	Пока КонтрольнаяОбласть <> Неопределено Цикл
        
        МаксНомерОбласти   = СтруктураИмениОбласти.МаксНомерОбласти + 1;
		ИмяОбласти         = бит_мпд_КлиентСервер.СформироватьИмяОбласти(СтруктураИмениОбласти.Префикс, МаксНомерОбласти, СтруктураИмениОбласти.ДлинаИмени);
		КонтрольнаяОбласть = бит_мпд_КлиентСервер.ПолучитьОбластьЯчеек(ТабДокумент, ИмяОбласти);
        
        СтруктураИмениОбласти.Вставить("МаксНомерОбласти", МаксНомерОбласти);
        
	КонецЦикла; 

    Возврат ИмяОбласти;
	
КонецФункции // СформироватьУникальноеИмяОбласти()

&НаКлиенте
Процедура ЗагрузитьЭлементыСтруктуры(ТабличныйДокумент, ЯчейкаExcel, ТекОбласть, 
            нС, нК, 
            КолонкаСтрок, СтрокаКолонок, 
            СтруктураПоказателей)

    Если (нС < СтрокаКолонок ИЛИ нК < КолонкаСтрок) Тогда 
        // Начало таблицы
        Возврат;
    КонецЕсли;
    
    Если ЯчейкаExcel.MergeCells Тогда
        // Пропуск объединенных областей.
        Возврат;        
    КонецЕсли;
            
    Если Объект.СоздатьСтруктуру И (нС = СтрокаКолонок ИЛИ нК =  КолонкаСтрок) Тогда
        Если нС = СтрокаКолонок И нК = КолонкаСтрок Тогда
            // Пропуск пересечения заголовков.
        Иначе
            // Новый элемент структуры отчета.
            СтрТаб = ТаблицаСтруктурыОтчета.Добавить();
            СтрТаб.Наименование = ТекОбласть.Текст;
            СтрТаб.ЭтоСтрока    = нК = КолонкаСтрок;
            СтрТаб.Нс           = Нс;
            СтрТаб.Нк           = Нк;
        КонецЕсли;
        
    ИначеЕсли Объект.ЗагружатьФормулы И (нС > СтрокаКолонок И нК > КолонкаСтрок) Тогда
        
        НовоеНаименование = СформироватьУникальноеИмяОбласти(ТабличныйДокумент, Объект.СтруктураИмениОбласти);
        АдресЯчейки = СтрЗаменить(ЯчейкаExcel.Address, "$", "");
        СтруктураПоказателей.Вставить(АдресЯчейки, НовоеНаименование);
            
        ФормулаИсточник = ЯчейкаExcel.Formula;
        Если ЗначениеЗаполнено(ФормулаИсточник) И Найти(ФормулаИсточник, "=") <> 0 Тогда 
            // Формулы из Excel.
            СтрФормулы = ТаблицаПоказателей.Добавить();
            СтрФормулы.Наименование = НовоеНаименование;
            СтрФормулы.ТекстФормулы = ФормулаИсточник;
            СтрФормулы.Нс           = Нс;
            СтрФормулы.Нк           = Нк;
            СтрФормулы.ЭтоФормула   = Истина;
        Иначе
            // Показатели произвольного отчета.
            СтПок = ТаблицаПоказателей.Добавить();
            СтПок.Наименование = НовоеНаименование;
            СтПок.Нс           = Нс;
            СтПок.нК           = нК;               
        КонецЕсли;       
        
    КонецЕсли;
      
КонецПроцедуры // ЗагрузитьЭлементыСтруктуры()

&НаСервере
Функция СоздатьТаблицуОтчета(ИмяТаблицы, КолонкаСтрок, СтрокаКолонок)

    НоваяТаблица  = Справочники.бит_мпд_ТаблицыПроизвольныхОтчетов.СоздатьЭлемент();
    НоваяТаблица.Владелец     = Объект.Отчет;
    НоваяТаблица.Наименование = ИмяТаблицы;
    НоваяТаблица.Верх         = КолонкаСтрок;
    НоваяТаблица.Лево         = СтрокаКолонок;
    НоваяТаблица.ВыводитьЗаголовкиКолонок = Истина;
    НоваяТаблица.ВыводитьЗаголовкиСтрок   = Истина;
    бит_ОбщегоНазначения.ЗаписатьСправочник(НоваяТаблица, , "Нет");	

    Возврат НоваяТаблица.Ссылка;
    
КонецФункции // СоздатьТаблицуОтчета()

&НаСервере
Процедура СоздатьЭлементыТаблицыОтчета(НоваяТаблица, СтруктураСтрок, СтруктураКолонок)
   
    Для каждого СтрТаб Из ТаблицаСтруктурыОтчета Цикл
        
        НовЭлТабл = Справочники.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.СоздатьЭлемент();
        НовЭлТабл.Владелец     = Объект.Отчет;
        НовЭлТабл.Наименование = СтрТаб.Наименование;
        НовЭлТабл.Таблица      = НоваяТаблица;
        НовЭлТабл.ВидЯчейки    = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение;    
        Если СтрТаб.ЭтоСтрока Тогда
            НовЭлТабл.Вид = Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Строка;
            НовЭлТабл.КодСортировки = СтруктураСтрок.Количество() + 1;
        Иначе
            НовЭлТабл.Вид = Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Колонка;
            НовЭлТабл.КодСортировки = СтруктураКолонок.Количество() + 1;
        КонецЕсли;                           
        бит_ОбщегоНазначения.ЗаписатьСправочник(НовЭлТабл, , "Нет");	
        
        Если СтрТаб.ЭтоСтрока Тогда
            СтруктураСтрок.Вставить("Строка" + СокрЛП(СтрТаб.нС), НовЭлТабл.Ссылка);
        Иначе
            СтруктураКолонок.Вставить("Колонка" + СокрЛП(СтрТаб.нК), НовЭлТабл.Ссылка);
        КонецЕсли;
        
   КонецЦикла;
    
КонецПроцедуры // СоздатьЭлементыТаблицыОтчета()

#КонецОбласти

#Область ПоказателиПроизвольныхОтчетов

&НаСервере
Процедура СоздатьПоказателиПроизвольныхОтчетов(СтруктураПоказателей, ТабличныйДокумент, СтруктураСтрок, СтруктураКолонок)

    ТаблицаПоказателей.Сортировать("ЭтоФормула");
    
    Для каждого СтПок Из ТаблицаПоказателей Цикл
        
        Путь = "R" + Формат(СтПок.нС, "ЧГ=0") + "C" + Формат(СтПок.нК , "ЧГ=0");
        ТекОбласть = ТабличныйДокумент.Область(Путь);
        
        Если Объект.СоздатьСтруктуру Тогда
            СтрокаТаблицыОтчета  = СтруктураСтрок["Строка" + СокрЛП(СтПок.Нс)];
            КолонкаТаблицыОтчета = СтруктураКолонок["Колонка" + СокрЛП(СтПок.нК)];
            Если НЕ ЗначениеЗаполнено(СтрокаТаблицыОтчета) ИЛИ НЕ ЗначениеЗаполнено(КолонкаТаблицыОтчета) Тогда
                Продолжить;    
            КонецЕсли;   
        КонецЕсли;
        
        // Показатели произвольного отчета.                    
        НовПоказатель = Справочники.бит_ПоказателиПроизвольныхОтчетов.СоздатьЭлемент();
        
        НовПоказатель.Наименование = СтПок.Наименование;
        НовПоказатель.Владелец     = Объект.Отчет;
        НовПоказатель.Код          = НовПоказатель.Наименование;
        
        Если Объект.СоздатьСтруктуру Тогда
            НовПоказатель.СтрокаТаблицыОтчета  = СтрокаТаблицыОтчета;
            НовПоказатель.КолонкаТаблицыОтчета = КолонкаТаблицыОтчета;
        КонецЕсли;
        
        Если Объект.ЗагружатьФормулы И СтПок.ЭтоФормула Тогда
        
        	НовПоказатель.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула;
            
            // Текст формулы из файла.
            ФормулаИсточник = СтрЗаменить(СтПок.ТекстФормулы, "=", "");
        
            // Конвертация формулы.
            НовПоказатель.Формула = СконвертироватьФормулуИзExcel(ФормулаИсточник, СтруктураПоказателей);
            СтПок.ТекстФормулы    = НовПоказатель.Формула;
            
        Иначе
            
            НовПоказатель.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение;
            
        КонецЕсли;
        
        ЗаписанПоказатель = бит_ОбщегоНазначения.ЗаписатьСправочник(НовПоказатель, , "Нет");        
        Если ЗаписанПоказатель Тогда        
        	СтПок.НовПоказатель = НовПоказатель.Ссылка;
        КонецЕсли;
            
    КонецЦикла;	

КонецПроцедуры // СоздатьПоказателиПроизвольныхОтчетов()

&НаКлиенте
Процедура ЗаписатьПоказатели(ТабличныйДокумент)

    Для каждого СтПок Из ТаблицаПоказателей Цикл
        
        Если ЗначениеЗаполнено(СтПок.НовПоказатель) Тогда
        
            Путь = "R" + Формат(СтПок.нС, "ЧГ=0") + "C" + Формат(СтПок.нК , "ЧГ=0");
            ТекОбласть = ТабличныйДокумент.Область(Путь);
            
            ТекОбласть.Имя = СтПок.Наименование;
            
            Если ЗначениеЗаполнено(СтПок.ТекстФормулы) Тогда
                //Если СтПок.УстановитьПримечание Тогда
                ТекОбласть.Примечание.Текст = СтПок.ТекстФормулы;
                //КонецЕсли;                
                ТекОбласть.Защита           = Истина;
            Иначе
                //Если СтПок.УстановитьПримечание Тогда
                ТекОбласть.Примечание.Текст = "(" + СтПок.Наименование + ")";
                //КонецЕсли;
            КонецЕсли;
            
        КонецЕсли;
    
    КонецЦикла;
   
КонецПроцедуры // ЗаписатьПоказатели()

#КонецОбласти

#Область Формулы

&НаСервере
Функция СконвертироватьФормулуИзExcel(ФормулаИсточник, СтруктураПоказателей)

    ФормулаРезультат = ФормулаИсточник;
    
    // Удаление пробелов
    ФормулаРезультат = СтрЗаменить(ФормулаРезультат, " ", "");
        
    // Условие ЕСЛИ: IF = ?
    ФормулаРезультат = СтрЗаменить(ФормулаРезультат, "IF", "?");
        
    // Цел: INT = ЦЕЛОЕ
    ФормулаРезультат = СтрЗаменить(ФормулаРезультат, "INT", "Цел");
        
    // Минимум: MIN = МИН
    ФормулаРезультат = СтрЗаменить(ФормулаРезультат, "MIN", "Мин");
                                            
    // КОРЕНЬ: SQRT = Sqrt
    ФормулаРезультат = СтрЗаменить(ФормулаРезультат, "SQRT", "Sqrt");
        
    // Замена функций Sum на +
    ЗаменитьФункциюСДиапозоном(ФормулаРезультат, "SUM", "+");
    
    // Максимум: MAX = МАКС
    ЗаменитьФункциюСДиапозоном(ФормулаРезультат, "MAX", ",");
    
    // Максимум: MIN = МИН
    ЗаменитьФункциюСДиапозоном(ФормулаРезультат, "MIN", ",");
    
    // Замена функций ROUND на Окр
    ФормулаРезультат = СтрЗаменить(ФормулаРезультат, "ROUND", "Окр");
        
    // Замена адресов ячеек на имена показателей.
    Для каждого КлЗнч Из СтруктураПоказателей Цикл        
        ФормулаРезультат = СтрЗаменить(ФормулаРезультат, КлЗнч.Ключ, "[" + КлЗнч.Значение + "]");        
    КонецЦикла;	
    
    Возврат ФормулаРезультат;

КонецФункции // СконвертироватьФормулуИзExcel()

&НаСервере
Процедура ЗаменитьФункциюСДиапозоном(ФормулаРезультат, СтрокаФункции, Разделитель)
    
    СтрокаФункции = СтрокаФункции + "(";
    
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ЯчейкаПервая");
	ТаблицаПараметров.Колонки.Добавить("ЯчейкаПоследняя");
	
	НачалоФункции = СтрНайти(ФормулаРезультат, СтрокаФункции);
	
	Пока НачалоФункции > 0 Цикл
	
		НайденКонецФормулы = Ложь;
		ДлинаСтроки        = СтрДлина(ФормулаРезультат);
        ТекущийИндекс      = НачалоФункции + СтрДлина(СтрокаФункции);
		НачалоДиапазона    = Истина;
        
        нЯчейка    = "";
		кЯчейка    = "";
		
		Пока НЕ НайденКонецФормулы И НачалоФункции <= ДлинаСтроки Цикл
			
			ТекСимвол = Сред(ФормулаРезультат, ТекущийИндекс, 1);
			
			Если ТекСимвол = ":" Тогда
				
				НачалоДиапазона = Ложь;
				
			ИначеЕсли ТекСимвол = "," Тогда
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				Если НачалоДиапазона Тогда
					НоваяСтрока.Начало = нЯчейка;
					НоваяСтрока.Конец  = нЯчейка;
				Иначе
					НоваяСтрока.Начало = нЯчейка;
					НоваяСтрока.Конец  = кЯчейка;
				КонецЕсли;
				
				НачалоДиапазона = Истина;
				нЯчейка = "";
				кЯчейка = "";				
				
			ИначеЕсли ТекСимвол = ")" Тогда
				
				НайденКонецФормулы = Истина;
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				Если НачалоДиапазона Тогда
					НоваяСтрока.ЯчейкаПервая    = нЯчейка;
					НоваяСтрока.ЯчейкаПоследняя = нЯчейка;
				Иначе
					НоваяСтрока.ЯчейкаПервая    = нЯчейка;
					НоваяСтрока.ЯчейкаПоследняя = кЯчейка;
				КонецЕсли;
				
			Иначе
				Если НачалоДиапазона Тогда
					нЯчейка = нЯчейка + ТекСимвол;
				Иначе
					кЯчейка = кЯчейка + ТекСимвол;
				КонецЕсли;
				
			КонецЕсли;
			
			ТекущийИндекс = ТекущийИндекс + 1;
			
		КонецЦикла;
        
        // Формирование строки замены.
		СтрокаЗамены = "";
		Для Каждого Строка Из ТаблицаПараметров Цикл
			
			Если Строка.ЯчейкаПервая = Строка.ЯчейкаПоследняя Тогда
				СтрокаЗамены = СтрокаЗамены + "+" + Строка.ЯчейкаПервая;
			Иначе
				Кн = ПолучитьКоординатыКолонки(Строка.ЯчейкаПервая);
				Кк = ПолучитьКоординатыКолонки(Строка.ЯчейкаПоследняя);
				Для Ск = Кн.Колонка По Кк.Колонка Цикл					
					Для Сн = Кн.Строка по Кк.Строка Цикл						
						СтрокаЗамены = СтрокаЗамены + Разделитель + ПолучитьИмяКолонкиПоНомеру(Ск) + Строка(Сн);						
					КонецЦикла;					
				КонецЦикла;
				
			КонецЕсли;
			
        КонецЦикла;
        
        СтрокаЗамены = "(" + Сред(СтрокаЗамены, 2) + ")";
        Если СтрокаФункции = "MAX(" Тогда
            СтрокаЗамены = "МАКС" + СтрокаЗамены;       
        КонецЕсли;
        Если СтрокаФункции = "MIN(" Тогда
            СтрокаЗамены = "МИН" + СтрокаЗамены;       
        КонецЕсли;
        
        СтрокаНаЗамену = Сред(ФормулаРезультат, НачалоФункции, ТекущийИндекс - 1);
                
		ФормулаРезультат = СтрЗаменить(ФормулаРезультат, СтрокаНаЗамену, СтрокаЗамены);
        
        // Начало нового поиска.
        НачалоФункции = СтрНайти(ФормулаРезультат, СтрокаФункции);
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаменитьФункциюСДиапозоном()

&НаСервере
Функция ПолучитьКоординатыКолонки(ИмяЯчейки)
	
	ДлинаИмени = СтрДлина(ИмяЯчейки);
	ИмяКолонки = "";
	ИмяСтроки  = "";
	
	Для Сч = 1 По ДлинаИмени Цикл
		
		ТекСимвол = Сред(ИмяЯчейки, Сч, 1);
        		
		Если СимволЧисло(ТекСимвол) Тогда
			ИмяСтроки = ИмяСтроки + ТекСимвол;
		Иначе
			ИмяКолонки = ИмяКолонки + ТекСимвол;
		КонецЕсли;
		
	КонецЦикла;
    
    ИмяКолонки = ПолучитьКоординатуКолонки(ИмяКолонки);
    
    Возврат Новый Структура("Строка, Колонка", Число(ИмяСтроки), ИмяКолонки);
	
КонецФункции // ПолучитьКоординатыКолонки()

&НаСервере
Функция СимволЧисло(Символ)
    
    Возврат СтрЧислоВхождений("1234567890", ВРег(Символ)) >0;
    
КонецФункции // СимволЧисло()

&НаСервере
Функция ПолучитьКоординатуКолонки(ИмяКолонки)
	
	КодСимволаА = КодСимвола("A");
	Если СтрДлина(ИмяКолонки) = 2 Тогда
		Координата = (КодСимвола(ИмяКолонки, 2) - КодСимволаА + 1) * 28 + (КодСимвола(ИмяКолонки, 2) - КодСимволаА);
	Иначе
		Координата = КодСимвола(ИмяКолонки, 1) - КодСимволаА + 1;
	КонецЕсли;
	
	Возврат Координата;
	
КонецФункции // ПолучитьКоординатуКолонки()

&НаСервере
Функция ПолучитьИмяКолонкиПоНомеру(КодЧисло)
	
	Символ2 = Цел(КодЧисло / 28);
	Символ1 = КодЧисло - Символ2 * 28;
	
	КодСимволаА = КодСимвола("A");
	Возврат ?(Символ2 = 0, "", Символ(КодСимволаА + Символ2 - 1)) + Символ(КодСимволаА + Символ1 - 1);
	
КонецФункции // ПолучитьИмяКолонкиПоНомеру()

#КонецОбласти

// Процедура создает элементы справочников:
// бит_мпд_ТаблицыПроизвольныхОтчетов, бит_мпд_ЭлементыТаблицПроизвольныхОтчетов, бит_ПоказателиПроизвольныхОтчетов.
&НаСервере
Процедура СоздатьОбъектыНаСервере(ТабличныйДокумент, СтруктураСтрок, СтруктураКолонок, ИмяТаблицы, КолонкаСтрок, СтрокаКолонок, СтруктураПоказателей)

    // Структура отчета.
    Если Объект.СоздатьСтруктуру И СтруктураОтчета.Количество() > 0 Тогда
        // Создание таблицы.
        НоваяТаблица = СоздатьТаблицуОтчета(ИмяТаблицы, КолонкаСтрок, СтрокаКолонок);
        СоздатьЭлементыТаблицыОтчета(НоваяТаблица, СтруктураСтрок, СтруктураКолонок);
    КонецЕсли;
    
    СоздатьПоказателиПроизвольныхОтчетов(СтруктураПоказателей, ТабличныйДокумент, СтруктураСтрок, СтруктураКолонок);                          
   
КонецПроцедуры // СоздатьОбъектыНаСервере()

#КонецОбласти

#КонецОбласти
