
#Область ОписаниеПеременных

// Хранит значение текущего пользователя
&НаКлиенте
Перем мТекущийПользователь;

// Хранит значение текущего вида настройки по ЦФО и статьям оборотов.
&НаКлиенте
Перем мТекущийВидНастройки_ЦФОиСтатьиОборотов;

// Хранит значение текущего вида настройки по проектам.
&НаКлиенте
Перем мТекущийВидНастройки_Проекты;

// Хранит значение текущего вида настройки по исполнителям.
&НаКлиенте
Перем мТекущийВидНастройки_Исполнители;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_рлс_НастройкаПравДоступаНаУровнеЗаписей;	
	// Вызов механизма защиты
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	
	АдресСхемыКомпоновки_ЦФОиСтатьиОборотов = ИнициализироватьКомпоновщик(Объект.Компоновщик_ЦФОиСтатьиОборотов
	                                                           , "СКД_ЦФОиСтатьиОборотов"
															   , УникальныйИдентификатор
															   , Объект.ВКолонках);
	
	АдресСхемыКомпоновки_Проекты = ИнициализироватьКомпоновщик(Объект.Компоновщик_Проекты
	                                                           , "СКД_Проекты"
															   , УникальныйИдентификатор);
															   
	АдресСхемыКомпоновки_Исполнители = ИнициализироватьКомпоновщик(Объект.Компоновщик_Исполнители
	                                                           , "СКД_Исполнители"
															   , УникальныйИдентификатор);
															   
	УстановитьЗначенияПоУмолчанию();
	ПоказатьТекущееДеревоЦФОиСтатейОборотов();
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьОтборов();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мТекущийПользователь 					= Объект.Пользователь;
	мТекущийВидНастройки_ЦФОиСтатьиОборотов = Объект.ВидНастройки_ЦФОиСтатьиОборотов;
	мТекущийВидНастройки_Проекты 			= Объект.ВидНастройки_Проекты;
	мТекущийВидНастройки_Исполнители 		= Объект.ВидНастройки_Исполнители;
	
	Если фОтказ Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
  				
&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Если мТекущийПользователь <> Объект.Пользователь Тогда
		ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов.ПолучитьЭлементы().Очистить();	
		ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО.ПолучитьЭлементы().Очистить();
		ДеревоПрав_Проекты.ПолучитьЭлементы().Очистить();
		ДеревоПрав_Исполнители.ПолучитьЭлементы().Очистить(); 	
	КонецЕсли;
	
	ПользовательПриИзмененииНаСервере();	
	
КонецПроцедуры // ПользовательПриИзменении()

&НаКлиенте
Процедура ВКолонкахПриИзменении(Элемент)
	
	ПоказатьТекущееДеревоЦФОиСтатейОборотов();
	
КонецПроцедуры // ВКолонкахПриИзменении()

&НаКлиенте
Процедура ВидНастройки_ЦФОиСтатьиОборотовПриИзменении(Элемент)
	
	Если мТекущийВидНастройки_ЦФОиСтатьиОборотов <> Объект.ВидНастройки_ЦФОиСтатьиОборотов Тогда
		ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов.ПолучитьЭлементы().Очистить();	
		ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО.ПолучитьЭлементы().Очистить(); 	
	КонецЕсли;
	
КонецПроцедуры // ВидНастройки_ЦФОиСтатьиОборотовПриИзменении()

&НаКлиенте
Процедура ВидНастройки_ПроектыПриИзменении(Элемент)
	
	Если мТекущийВидНастройки_Проекты <> Объект.ВидНастройки_Проекты Тогда
		ДеревоПрав_Проекты.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
КонецПроцедуры // ВидНастройки_ПроектыПриИзменении()

&НаКлиенте
Процедура ВидНастройки_ИсполнителиПриИзменении(Элемент)
	
	Если мТекущийВидНастройки_Исполнители <> Объект.ВидНастройки_Исполнители Тогда
		ДеревоПрав_Исполнители.ПолучитьЭлементы().Очистить(); 	
	КонецЕсли;
	
КонецПроцедуры // ВидНастройки_ИсполнителиПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоправПроекты

&НаКлиенте
Процедура ДеревоПрав_ПроектыЧтениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПрав_Проекты.ТекущиеДанные;
	ДеревоПравПризнакПриИзменении(ТекущиеДанные.ПолучитьИдентификатор(), "ДеревоПрав_Проекты", "Чтение");	                                       	
	
КонецПроцедуры // ДеревоПрав_ПроектыЧтениеПриИзменении()

&НаКлиенте
Процедура ДеревоПрав_ПроектыЗаписьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПрав_Проекты.ТекущиеДанные;
	ДеревоПравПризнакПриИзменении(ТекущиеДанные.ПолучитьИдентификатор(), "ДеревоПрав_Проекты", "Запись");	
			
КонецПроцедуры // ДеревоПрав_ПроектыЗаписьПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоправИсполнители

&НаКлиенте
Процедура ДеревоПрав_ИсполнителиЧтениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПрав_Исполнители.ТекущиеДанные;
	ДеревоПравПризнакПриИзменении(ТекущиеДанные.ПолучитьИдентификатор(), "ДеревоПрав_Исполнители", "Чтение");	
		
КонецПроцедуры // ДеревоПрав_ИсполнителиЧтениеПриИзменении()

&НаКлиенте
Процедура ДеревоПрав_ИсполнителиЗаписьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПрав_Исполнители.ТекущиеДанные;
	ДеревоПравПризнакПриИзменении(ТекущиеДанные.ПолучитьИдентификатор(), "ДеревоПрав_Исполнители", "Запись");                                 
		
КонецПроцедуры // ДеревоПрав_ИсполнителиЗаписьПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоправЦфоИСтатьиОборотовКолонкиЦфо

&НаКлиенте
Процедура Подключаемый_ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФОЧтениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО.ТекущиеДанные;	
	МатрицаПравПризнакПриИзменении(ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Родитель.Имя, "Чтение");
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФОЗаписьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО.ТекущиеДанные;
	МатрицаПравПризнакПриИзменении(ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Родитель.Имя, "Запись");
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоправЦфоИСтатьиОборотовКолонкиСтатьяОборотов

&НаКлиенте
Процедура Подключаемый_ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотовЧтениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов.ТекущиеДанные;	
	МатрицаПравПризнакПриИзменении(ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Родитель.Имя, "Чтение");
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотовЗаписьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов.ТекущиеДанные;
	МатрицаПравПризнакПриИзменении(ТекущиеДанные.ПолучитьИдентификатор(), Элемент.Родитель.Имя, "Запись");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ----------------------------------------------------------------------
// Обновление

&НаКлиенте
Процедура КомандаОтборы(Команда)
	
	фСкрыватьОтборы = Не фСкрыватьОтборы;
	УстановитьВидимостьОтборов();
	
КонецПроцедуры // КомандаОтборы()

&НаКлиенте
Процедура КомандаОбновитьВсеДанные(Команда)
	
	Если Не ПроверкаВсеПоляЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВсеДанные();
	
	// Разворот дерева ЦФО и статей оборотов
	ИмяДерева = ПолучитьИмяДерева(Объект.ВКолонках);
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы[ИмяДерева], ЭтаФорма[ИмяДерева].ПолучитьЭлементы(), Истина);
	
	// Разворот дерева проектов
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоПрав_Проекты, ДеревоПрав_Проекты.ПолучитьЭлементы(), Истина);
    
КонецПроцедуры // КомандаОбновитьВсеДанные()

&НаКлиенте
Процедура КомандаОбновитьДеревоЦФОиСтатьиОборотов(Команда)
	
	Если Не ПроверкаВсеПоляЗаполнены() Тогда
		Возврат;
	КонецЕсли;	
	
	ОбновитьМатрицу();
	
	Если Объект.ВКолонках = "ЦФО" Тогда
		бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО
																, ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО.ПолучитьЭлементы()
																, Истина);
	Иначе	
	    бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов
																, ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов.ПолучитьЭлементы()
																, Истина);
	КонецЕсли;											
			
КонецПроцедуры // КомандаОбновитьДеревоЦФОиСтатьиОборотов()

&НаКлиенте
Процедура КомандаОбновитьДеревоПроектов(Команда)
	
	Если Не ПроверкаВсеПоляЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДерево("Проекты");	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоПрав_Проекты, ДеревоПрав_Проекты.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры // КомандаОбновитьДеревоПроектов()

&НаКлиенте
Процедура КомандаОбновитьДеревоИсполнителей(Команда)
	
	Если Не ПроверкаВсеПоляЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДерево("Исполнители");
	
КонецПроцедуры // КомандаОбновитьДеревоИсполнителей()

&НаКлиенте
Процедура КомандаЗаполнитьНастройкиПоПринадлежностямСтатейОборотов(Команда)
	
	Отказ = Ложь;
	
	ИмяДерева = ПолучитьИмяДерева(Объект.ВКолонках);
	Если ЭтаФорма[ИмяДерева].ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Список настроек прав доступа не должен быть пустым.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.ВидНастройки_ЦФОиСтатьиОборотов <> фКэшЗначений.Перечисления.бит_рлс_ВидыНастроекПрав.Доступ Тогда
		ТекстСообщения = Нстр("ru = 'Для поля ""Вид настройки"" должно быть установлено значение ""Доступ"".'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда	
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьНастройкиПоПринадлежностямСтатейОборотов(ИмяДерева);
	
	// Разворот дерева ЦФО и статей оборотов
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы[ИмяДерева], ЭтаФорма[ИмяДерева].ПолучитьЭлементы(), Истина);
	
КонецПроцедуры // КомандаЗаполнитьНастройкиПоПринадлежностямСтатейОборотов()

// ----------------------------------------------------------------------
// Запись

&НаКлиенте
Процедура ЗаписатьИзменения_ЦФОиСтатьиОборотов(Команда)
	
	ЗаписатьИзмененияЦФОиСтатьиОборотов();
	
КонецПроцедуры // ЗаписатьИзменения_ЦФОиСтатьиОборотов()

&НаКлиенте
Процедура ЗаписатьИзменения_Проекты(Команда)
	
	ЗаписатьИзмененияПроекты();
	
КонецПроцедуры // ЗаписатьИзменения_Проекты()

&НаКлиенте
Процедура ЗаписатьИзменения_Исполнители(Команда)
	
	ЗаписатьИзмененияИсполнители();
	
КонецПроцедуры // ЗаписатьИзменения_Исполнители()

// ----------------------------------------------------------------------
// Управление флажками

&НаКлиенте
Процедура ФлажкиКолонки_СнятьВсе(Команда)  	
	              	
	НайтиКолонкуПроставитьВсеФлажкиКолонки(0);
	
КонецПроцедуры // ФлажкиКолонки_СнятьВсе()

&НаКлиенте
Процедура ФлажкиКолонки_УстановитьВсе(Команда)
	
	НайтиКолонкуПроставитьВсеФлажкиКолонки(1);
	
КонецПроцедуры // ФлажкиКолонки_УстановитьВсе()

&НаКлиенте
Процедура ФлажкиКолонки_Инвертировать(Команда)
	
	НайтиКолонкуПроставитьВсеФлажкиКолонки(2);
	
КонецПроцедуры // ФлажкиКолонки_Инвертировать()
           
&НаКлиенте
Процедура ФлажкиСтроки_СнятьВсе(Команда)
	
	НайтиСтрокуПроставитьВсеФлажкиСтроки(0);
	
КонецПроцедуры // ФлажкиСтроки_СнятьВсе()

&НаКлиенте
Процедура ФлажкиСтроки_УстановитьВсе(Команда)
	
	НайтиСтрокуПроставитьВсеФлажкиСтроки(1);
	
КонецПроцедуры // ФлажкиСтроки_УстановитьВсе()

&НаКлиенте
Процедура ФлажкиСтроки_Инвертировать(Команда)
	
	НайтиСтрокуПроставитьВсеФлажкиСтроки(2);
	
КонецПроцедуры // ФлажкиСтроки_Инвертировать()


&НаКлиенте
Процедура ФлажкиПроекты_Чтение_СнятьВсе(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Проекты", "Чтение", 0);
	
КонецПроцедуры // ФлажкиПроекты_СнятьВсе()

&НаКлиенте
Процедура ФлажкиПроекты_Чтение_УстановитьВсе(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Проекты", "Чтение", 1);
	
КонецПроцедуры // ФлажкиПроекты_УстановитьВсе()

&НаКлиенте
Процедура ФлажкиПроекты_Чтение_Инвертировать(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Проекты", "Чтение", 2);
	
КонецПроцедуры // ФлажкиПроекты_Инвертировать()

&НаКлиенте
Процедура ФлажкиПроекты_Запись_СнятьВсе(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Проекты", "Запись", 0);
	
КонецПроцедуры // ФлажкиПроекты_СнятьВсе()

&НаКлиенте
Процедура ФлажкиПроекты_Запись_УстановитьВсе(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Проекты", "Запись", 1);
	
КонецПроцедуры // ФлажкиПроекты_УстановитьВсе()

&НаКлиенте
Процедура ФлажкиПроекты_Запись_Инвертировать(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Проекты", "Запись", 2);
	
КонецПроцедуры // ФлажкиПроекты_Инвертировать()


&НаКлиенте
Процедура ФлажкиИсполнители_Чтение_СнятьВсе(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Исполнители", "Чтение", 0);
	
КонецПроцедуры // ФлажкиИсполнители_СнятьВсе()

&НаКлиенте
Процедура ФлажкиИсполнители_Чтение_УстановитьВсе(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Исполнители", "Чтение", 1);
	
КонецПроцедуры // ФлажкиИсполнители_УстановитьВсе()

&НаКлиенте
Процедура ФлажкиИсполнители_Чтение_Инвертировать(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Исполнители", "Чтение", 2);
	
КонецПроцедуры // ФлажкиИсполнители_Инвертировать()

&НаКлиенте
Процедура ФлажкиИсполнители_Запись_СнятьВсе(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Исполнители", "Запись", 0);
	
КонецПроцедуры // ФлажкиИсполнители_СнятьВсе()

&НаКлиенте
Процедура ФлажкиИсполнители_Запись_УстановитьВсе(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Исполнители", "Запись", 1);
	
КонецПроцедуры // ФлажкиИсполнители_УстановитьВсе()

&НаКлиенте
Процедура ФлажкиИсполнители_Запись_Инвертировать(Команда)
	
	ИзменитьФлаги("ДеревоПрав_Исполнители", "Запись", 2);
	
КонецПроцедуры // ФлажкиИсполнители_Инвертировать()



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

// Функция проверяет заполненность необходимых полей.
//  
// Возвращаемое значение:
//   Булево - поля заполнены
// 
&НаКлиенте
Функция ПроверкаВсеПоляЗаполнены()

	ВсеПоляЗаполнены = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
		ТекстСообщения = Нстр("ru = 'Пользователь не может быть пустым.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		ВсеПоляЗаполнены = Ложь;
	КонецЕсли;

	Возврат ВсеПоляЗаполнены;
	
КонецФункции // ПроверкаВсеПоляЗаполнены()

// ----------------------------------------------------------------------
// Управление флажками

// Процедура находит текущую колонку или группу колонок и проставляет все флажки.
// 
// Параметры:
//  ЗначениеФлага - Число
// 
&НаКлиенте
Процедура НайтиКолонкуПроставитьВсеФлажкиКолонки(ЗначениеФлага)

	ИмяДерева = ПолучитьИмяДерева(Объект.ВКолонках);
	Если ТекущийЭлемент.Имя <> ИмяДерева Тогда
		Возврат;	
	КонецЕсли;
	
	ИмяКолонки  = СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, ИмяДерева, "");
	ИмяПризнака = Прав(ИмяКолонки, 6);
	
	Если ЗначениеФлага = 2 Тогда
		
		ИнвертироватьВсеФлажкиКолонок(ИмяДерева, ИмяКолонки, ИмяПризнака);	
		
	Иначе	
		
		// МассивИменКолонок = Новый Массив;
		// МассивИменКолонок.Добавить(ИмяКолонки);
		// 
		// ЭтоДоступ = Объект.ВидНастройки_ЦФОиСтатьиОборотов = фКэшЗначений.Перечисления.бит_рлс_ВидыНастроекПрав.Доступ;
		// 
		// Если ПостфиксИмени = "Чтение" И Не ЗначениеФлага Тогда
		// 	МассивИменКолонок.Добавить(СтрЗаменить(ИмяКолонки, "Чтение", "Запись"));
		// ИначеЕсли ПостфиксИмени = "Запись" И ЗначениеФлага Тогда
		// 	МассивИменКолонок.Добавить(СтрЗаменить(ИмяКолонки, "Запись", "Чтение"));
		// КонецЕсли;
	
		ПроставитьВсеФлажкиКолонок(ИмяДерева, ИмяКолонки, ИмяПризнака, ЗначениеФлага = 1);
		
	КонецЕсли;	
	
КонецПроцедуры // НайтиКолонкуПроставитьВсеФлажкиКолонки()

// Процедура находит текущую колонку или группу колонок и проставляет все флажки.
// 
// Параметры:
//  ЗначениеФлага - Число
// 
&НаКлиенте
Процедура НайтиСтрокуПроставитьВсеФлажкиСтроки(ЗначениеФлага)

	ИмяДерева = ПолучитьИмяДерева(Объект.ВКолонках);
	Если ТекущийЭлемент.Имя <> ИмяДерева Тогда
		Возврат;	
	КонецЕсли;
	
	ИмяПризнака = Прав(СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, ИмяДерева, ""), 6);
	
	Если ЗначениеФлага = 2 Тогда
	    ИнвертироватьВсеФлажкиСтроки(ИмяДерева, ИмяПризнака);
	Иначе	
		ПроставитьВсеФлажкиСтроки(ИмяДерева, ИмяПризнака, ЗначениеФлага = 1);
	КонецЕсли;	
	
КонецПроцедуры // НайтиСтрокуПроставитьВсеФлажкиСтроки()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииОбщегоНазначения

// Процедура обрабатывает изменения типа значения поля "Пользователь".
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ПользовательПриИзмененииНаСервере()

	Если Объект.ВидНастройки_ЦФОиСтатьиОборотов = Перечисления.бит_рлс_ВидыНастроекПрав.Запрет Тогда
		ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов.ПолучитьЭлементы().Очистить();	
		ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО.ПолучитьЭлементы().Очистить(); 	
	КонецЕсли;

	Если ТипЗнч(Объект.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Объект.ВидНастройки_ЦФОиСтатьиОборотов = Перечисления.бит_рлс_ВидыНастроекПрав.Доступ;
		Элементы.ВидНастройки_ЦФОиСтатьиОборотов.Доступность = Ложь;
	Иначе
		Элементы.ВидНастройки_ЦФОиСтатьиОборотов.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПользовательПриИзменении()

// Функция получает имя текущего дерева.
// 
// Параметры:
//  Объект_ВКолонках - Строка
//  
// Возвращаемое значение:
//   Строка
// 
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяДерева(Объект_ВКолонках)
	
	ИмяДерева = ?(Объект_ВКолонках = "ЦФО", "ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО", "ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов");
	
	Возврат ИмяДерева;
	
КонецФункции // ПолучитьИмяДерева()

// Процедура заполняет кэш значений.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	КэшПеречислений = Новый Структура;
	КэшПеречислений.Вставить("бит_рлс_ВидыНастроекПрав", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_рлс_ВидыНастроекПрав));
		
	фКэшЗначений.Вставить("Перечисления", КэшПеречислений);	
	
	фКэшЗначений.Вставить("ТипНастройки"	   , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Обработка.бит_рлс_НастройкаПравДоступаНаУровнеЗаписей");
		
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавливает видимость отборов.
// 
&НаСервере
Процедура УстановитьВидимостьОтборов()

	Элементы.КомандаОтборы.Пометка 						  = Не фСкрыватьОтборы;
	Элементы.ГруппаКомпоновщикЦфоСтатьиОборотов.Видимость = Не фСкрыватьОтборы;	
	Элементы.ГруппаКомпоновщикПроекты.Видимость 		  = Не фСкрыватьОтборы;
	Элементы.ГруппаКомпоновщикИсполнители.Видимость 	  = Не фСкрыватьОтборы;

КонецПроцедуры // УстановитьВидимостьОтборов()

// Процедура отображает текущее дерево ЦФО и статей оборотов.
// 
&НаСервере
Процедура ПоказатьТекущееДеревоЦФОиСтатейОборотов()
	
	ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов.ПолучитьЭлементы().Очистить();
	ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО.ПолучитьЭлементы().Очистить();
			
	Если Объект.ВКолонках = "ЦФО" Тогда
		Элементы.ПанельНастроекПоЦФОиСтатьямОборотов.ТекущаяСтраница = Элементы.Страница_КолонкиЦФО;
	Иначе	
		Элементы.ПанельНастроекПоЦФОиСтатьямОборотов.ТекущаяСтраница = Элементы.Страница_КолонкиСтатьяОборотов;	
	КонецЕсли;					

КонецПроцедуры // ПоказатьТекущееДеревоЦФОиСтатейОборотов()
				

/////////////////////////////////////////////////////////////////
// Заполнение дерева

// Процедура инициализирует компоновщик.
// 
// Параметры:
//  Компоновщик             - КомпоновщикНастроекКомпоновкиДанных.
//  ИмяМакета 				- Строка.
//  УникальныйИдентификатор - УникальныйИндентификатор.
//  ВыводитьВКолонках 		- Строка (По умолчанию = Неопределено).
// 
&НаСервере
Функция ИнициализироватьКомпоновщик(Компоновщик, ИмяМакета, УникальныйИдентификатор, ВыводитьВКолонках = Неопределено) Экспорт

	ТекущиеНастройкиПользователя = Компоновщик.ПользовательскиеНастройки;
	
	СхемаКомпоновкиДанных = Обработки.бит_рлс_НастройкаПравДоступаНаУровнеЗаписей.ПолучитьМакет(ИмяМакета);
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
    Компоновщик.Инициализировать(ИсточникНастроек);
	Если ВыводитьВКолонках = Неопределено Или ВыводитьВКолонках = "ЦФО" Тогда
		СкдНастройкиПоУмолчанию = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;	
	Иначе	
	    СкдНастройкиПоУмолчанию = СхемаКомпоновкиДанных.ВариантыНастроек[1].Настройки;
	КонецЕсли;
	
	Компоновщик.ЗагрузитьНастройки(СкдНастройкиПоУмолчанию);
	Компоновщик.ЗагрузитьПользовательскиеНастройки(ТекущиеНастройкиПользователя);

	Возврат АдресСКД;
	
КонецФункции // ИнициализироватьКомпоновщик()

// Процедура выполняет СКД и получает дерево результата.
// 
// Параметры:
//  ИмяОбластиДоступа - Строка
// 
&НаСервере
Функция ПолучитьДеревоРезультатаВыполненияСКД(ИмяОбластиДоступа)

	СКД = ПолучитьИзВременногоХранилища(ЭтаФорма["АдресСхемыКомпоновки_" + ИмяОбластиДоступа]);
	
	СКД.Параметры.ВидНастройки.Значение 	 = Объект["ВидНастройки_" + ИмяОбластиДоступа];
	СКД.Параметры.Пользователь.Значение 	 = Объект.Пользователь;
		                                              
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД,
												  Объект["Компоновщик_" + ИмяОбластиДоступа].ПолучитьНастройки(),
												  ,
												  ,
												  Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
												  
												  
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	// Дерево для вывода на форму
	ДеревоРезультат = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	Возврат ДеревоРезультат;

КонецФункции // ПолучитьДеревоРезультатаВыполненияСКД()

// Процедура выполняет СКД и получает дерево результата.
// 
// Параметры:
//   ВеткаДереваРез   - КоллекцияСтрокДереваЗначений.
//   ВеткаДереваФормы - ДанныеФормыКоллекцияЭлементовДерева.
//   ПроектРодитель   - Справочникссылка.Проекты (По умолчанию = Неопределено).
// 
&НаСервере
Процедура ЗаполнитьДеревоПроектов(ВеткаДереваРез, ВеткаДереваФормы, ПроектРодитель = Неопределено)

	Для каждого СтрокаДереваРез Из ВеткаДереваРез Цикл
		
		ТекущийПроект = СтрокаДереваРез.Проект;
		
		Если ТекущийПроект = ПроектРодитель Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаДереваРез.Родитель, СтрокаДереваРез, "Чтение, Запись");
	
		Иначе
			
			СтрокаДереваФормы = ВеткаДереваФормы.Добавить();			
			
			Если ВеткаДереваРез.Количество() > 0 Тогда
				ЗаполнитьДеревоПроектов(СтрокаДереваРез.Строки, СтрокаДереваФормы.ПолучитьЭлементы(), ТекущийПроект);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДереваФормы, СтрокаДереваРез);
			
		КонецЕсли;		
	
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьДеревоПроектов()

// Процедура обновляет дерево настроек.
// 
// Параметры:
//  ИмяОбластиДоступа - Строка
// 
&НаСервере
Процедура ОбновитьДерево(ИмяОбластиДоступа)
	
	ДеревоРезультат = ПолучитьДеревоРезультатаВыполненияСКД(ИмяОбластиДоступа);
	ДеревоРезультат.Колонки.Добавить("Изменено", Новый ОписаниеТипов("Булево"));
		
	Если ИмяОбластиДоступа = "Проекты" Тогда
		КореньДереваФормы = ДеревоПрав_Проекты.ПолучитьЭлементы();
		КореньДереваФормы.Очистить();
		ЗаполнитьДеревоПроектов(ДеревоРезультат.Строки, КореньДереваФормы);
	Иначе
		ЗначениеВДанныеФормы(ДеревоРезультат, ЭтаФорма.ДеревоПрав_Исполнители);
	КонецЕсли;
		
КонецПроцедуры // ОбновитьДерево()


// Процедура заполняет таблицу групп колонок.
// 
// Параметры:
//  ВеткаДереваРез - КоллекцияСтрокДереваЗначений.
//  Колонки  	   - Строка.
//  СсылкаРодитель - СправочникСсылка.Подраздеения 
// 					 или СправочникСсылка.бит_СтатьиОборотов 
// 					 или ПеречислениеСсылка.бит_рлс_Все 
// 					(По умолчанию = Неопределенно)
//  ИндексФона 	   - Число (По умолчанию = 1).
// 
&НаСервере
Процедура ЗаполнитьТаблицуГруппКолонок(ВеткаДереваРез, Колонки, Строки, СсылкаРодитель = Неопределено, ИндексФона = 1)
						
	Для каждого СтрокаДереваРез Из ВеткаДереваРез Цикл
		
		Если СтрокаДереваРез[Строки] <> Неопределено Тогда
			Прервать;		
		КонецЕсли;
		
		ТекущаяСсылка = СтрокаДереваРез[Колонки];		
		Если ТекущаяСсылка = СсылкаРодитель Тогда
			Продолжить;		
		КонецЕсли;
		
		фСчКол    = фСчКол + 1;
		ИмяГруппы = Колонки + фСчКол; 		
		
		Если ТекущаяСсылка = Перечисления.бит_рлс_Все.Все Или Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда
			СтрокаТаблКолонок = фТаблицаГруппКолонок.Вставить(0);	
		Иначе	
			СтрокаТаблКолонок = фТаблицаГруппКолонок.Добавить();
		КонецЕсли;	
				
		СтрокаТаблКолонок.ИмяГруппы = ИмяГруппы;
		СтрокаТаблКолонок.Ссылка 	= ТекущаяСсылка;
		
		ПодчиненныеСтроки = СтрокаДереваРез.Строки;
		Если ПодчиненныеСтроки.Количество() > 0 И ПодчиненныеСтроки[0][Строки] = Неопределено Тогда
			ЗаполнитьТаблицуГруппКолонок(ПодчиненныеСтроки, Колонки, Строки, ТекущаяСсылка, 0);
			СтрокаТаблКолонок.ИндексФона = ИндексФона;
		Иначе
			СтрокаТаблКолонок.ИндексФона = 0;
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуГруппКолонок()

// Процедура добавляет группу колонок на форму.
// 
// Параметры:
//  ИмяРедактируемогоДерева      - Строка.
//  СтрокаТаблицыКолонок         - ДанныеФормыЭлементКоллекции.
//  Колонки 					 - Строка.
//  ОписаниеТиповКолонок 		 - ОписаниеТипов.
//  КоллекцияСуществующихКолонок - КоллекцияКолонокДереваЗначений.
// 
&НаСервере
Процедура ДобавитьГруппуКолонок(ИмяРедактируемогоДерева, СтрокаТаблицыКолонок, Колонки, ОписаниеТиповКолонок, КоллекцияСуществующихКолонок)
		
	ИмяГруппы     = СтрокаТаблицыКолонок.ИмяГруппы;
	ТекущаяСсылка = СтрокаТаблицыКолонок.Ссылка;
	Если СтрокаТаблицыКолонок.ИндексФона = 1 Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаШапкиОтчета;
	Иначе	
		ЦветФона = Неопределено;
	КонецЕсли;
	ЦветТекстаЗаголовка = Неопределено;
		
	ИмяРеквизита_Чтение = ИмяГруппы + "_Чтение";
	ИмяРеквизита_Запись = ИмяГруппы + "_Запись";
	ИмяКолонки_Чтение   = ИмяРедактируемогоДерева + ИмяГруппы + "_Чтение";
	ИмяКолонки_Запись   = ИмяРедактируемогоДерева + ИмяГруппы + "_Запись";
	
	// Заголовок группы колонок
	Если ТекущаяСсылка = Перечисления.бит_рлс_Все.Все Тогда
	 	ЗаголовокГруппы = "Все";
		ЦветТекстаЗаголовка = Новый Цвет(51, 51, 153);
	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		ЗаголовокГруппы = ?(Колонки = "ЦФО", "Пустое ЦФО", "Пустая статья оборотов");
		ЦветТекстаЗаголовка = Новый Цвет(51, 51, 153);
	Иначе	
	 	ЗаголовокГруппы = ТекущаяСсылка.Наименование;
	КонецЕсли;  	

	// Реквизиты - колонки дерева
	Если КоллекцияСуществующихКолонок.Найти(ИмяРеквизита_Чтение) = Неопределено Тогда
		НовыйРеквизитФормы_Чтение = Новый РеквизитФормы(ИмяРеквизита_Чтение, ОписаниеТиповКолонок, ИмяРедактируемогоДерева, "Чтение");
		НовыйРеквизитФормы_Запись = Новый РеквизитФормы(ИмяРеквизита_Запись, ОписаниеТиповКолонок, ИмяРедактируемогоДерева, "Запись");										
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить(НовыйРеквизитФормы_Чтение);
		МассивРеквизитов.Добавить(НовыйРеквизитФормы_Запись);
		ИзменитьРеквизиты(МассивРеквизитов);
	КонецЕсли;
	
	// Группа колонок "Чтение" и "Запись"
	НоваяГруппа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы[ИмяРедактируемогоДерева]);
	НоваяГруппа.Вид 			 = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Заголовок 		 = ЗаголовокГруппы;
	НоваяГруппа.ОтображатьВШапке = Истина;
	Если ЦветТекстаЗаголовка <> Неопределено Тогда
		НоваяГруппа.ЦветТекстаЗаголовка = ЦветТекстаЗаголовка;	
	КонецЕсли;
	// Колонка "Чтение"
	НоваяКолонка = Элементы.Добавить(ИмяКолонки_Чтение, Тип("ПолеФормы"), НоваяГруппа);				
	НоваяКолонка.Вид         	  = ВидПоляФормы.ПолеФлажка;
	НоваяКолонка.Заголовок   	  = "Чтение/Запись"; 				
	НоваяКолонка.ПутьКДанным 	  = ИмяРедактируемогоДерева + "." + ИмяРеквизита_Чтение;
	НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_" + ИмяРедактируемогоДерева + "ЧтениеПриИзменении");
	Если ЦветФона <> Неопределено Тогда
		НоваяКолонка.ЦветФона = ЦветФона;	
	КонецЕсли;
	Если ЦветТекстаЗаголовка <> Неопределено Тогда
		НоваяКолонка.ЦветТекстаЗаголовка = ЦветТекстаЗаголовка;	
	КонецЕсли;
	// Колонка "Запись"
	НоваяКолонка = Элементы.Добавить(ИмяКолонки_Запись, Тип("ПолеФормы"), НоваяГруппа);				
	НоваяКолонка.Вид         	  = ВидПоляФормы.ПолеФлажка;
	НоваяКолонка.ОтображатьВШапке = Ложь; 				
	НоваяКолонка.ПутьКДанным 	  = ИмяРедактируемогоДерева + "." + ИмяРеквизита_Запись;
	НоваяКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_" + ИмяРедактируемогоДерева + "ЗаписьПриИзменении");
	Если ЦветФона <> Неопределено Тогда
		НоваяКолонка.ЦветФона = ЦветФона;	
	КонецЕсли;
	Если ЦветТекстаЗаголовка <> Неопределено Тогда
		НоваяКолонка.ЦветТекстаЗаголовка = ЦветТекстаЗаголовка;	
	КонецЕсли;
	
КонецПроцедуры // ДобавитьГруппуКолонок()

// Процедура заполняет матрицу ЦФО и статей оборотов.
// 
// Параметры:
//  УзелДереваФормы  	   - ДанныеФормыКоллекцияЭлементовДерева.
//  СтрокиВеткиРез  	   - КоллекцияСтрокДереваЗначений.
//  Колонки 			   - Строка.
//  Строки 				   - Строка.
//  ТаблицаГруппКолонок    - ТаблицаЗначений.
//  СсылкаРодитель_Строки  - СправочникСсылка.Подраздеения 
// 							или СправочникСсылка.бит_СтатьиОборотов 
// 							или ПеречислениеСсылка.бит_рлс_Все 
// 							(По умолчанию = Неопределенно).
//  ТекущаяСтрокаФормы     - ДанныеФормыЭлементДерева (По умолчанию = Неопределено).
//  СсылкаРодитель_Колонки - СправочникСсылка.Подраздеения 
// 							или СправочникСсылка.бит_СтатьиОборотов 
// 							или ПеречислениеСсылка.бит_рлс_Все 
// 							(По умолчанию = Неопределенно).
// 
&НаСервере
Процедура ЗаполнитьСтрокиМатрицы(УзелДереваФормы, СтрокиВеткиРез, Колонки, Строки, ТаблицаГруппКолонок, СсылкаРодитель_Строки = Неопределено, ТекущаяСтрокаФормы = Неопределено, СсылкаРодитель_Колонки = Неопределено)

	Для каждого СтрокаДереваРез Из СтрокиВеткиРез Цикл
		
		// Строки
		Если СтрокаДереваРез[Колонки] = Неопределено Тогда
			
			ИмяРеквизита     = Неопределено;		
			
			ТекущаяСсылка_Строки = СтрокаДереваРез[Строки];
						
			Если ТекущаяСсылка_Строки = СсылкаРодитель_Строки Тогда				
				
				ЗаполнитьСтрокиМатрицы(ТекущаяСтрокаФормы.ПолучитьЭлементы()
											, СтрокаДереваРез.Строки
											, Колонки
											, Строки
											, ТаблицаГруппКолонок
											, ТекущаяСсылка_Строки
											, ТекущаяСтрокаФормы);
				
			Иначе
			
				СтрокаДереваФормы = УзелДереваФормы.Добавить();
				СтрокаДереваФормы[Строки] = ТекущаяСсылка_Строки;
				
				ЗаполнитьСтрокиМатрицы(СтрокаДереваФормы.ПолучитьЭлементы()
											, СтрокаДереваРез.Строки
											, Колонки
											, Строки
											, ТаблицаГруппКолонок
											, ТекущаяСсылка_Строки
											, СтрокаДереваФормы);
								
			КонецЕсли;
			
		Иначе // Колонки	
			
			ТекущаяСсылка_Колонки = СтрокаДереваРез[Колонки];
						
			НайденнаяСтрокаТаблКолонок = ТаблицаГруппКолонок.Найти(ТекущаяСсылка_Колонки, "Ссылка");
			Если НайденнаяСтрокаТаблКолонок <> Неопределено Тогда
											
				ИмяГруппы = НайденнаяСтрокаТаблКолонок.ИмяГруппы;
				ТекущаяСтрокаФормы[ИмяГруппы + "_Чтение"] = СтрокаДереваРез.Чтение;
				ТекущаяСтрокаФормы[ИмяГруппы + "_Запись"] = СтрокаДереваРез.Запись;
				
			КонецЕсли;
			
		КонецЕсли;                                   		
		
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьСтрокиМатрицы()

// Процедура обновляет дерево настроек по ЦФО и статьям оборотов.
// 
&НаСервере
Процедура ОбновитьМатрицу()
	
	ИмяРедактируемогоДерева = ?(Объект.ВКолонках = "ЦФО"
								, "ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО"
								, "ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов"); 							
								
	Строки  = ?(Объект.ВКолонках = "Статьи оборотов", "ЦФО"			  , "СтатьяОборотов");
	Колонки = ?(Объект.ВКолонках = "Статьи оборотов", "СтатьяОборотов", "ЦФО");
	
	
	ДеревоТекущее = ДанныеФормыВЗначение(ЭтаФорма[ИмяРедактируемогоДерева], Тип("ДеревоЗначений"));
		
	
	// ----------------------------------------------------------------------
	// Удаление старых элементов формы
	
	МассивУдаляемых = Новый Массив;
	Для каждого ТекКолонка Из Элементы[ИмяРедактируемогоДерева].ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ТекКолонка) = Тип("ГруппаФормы") Тогда		
			МассивУдаляемых.Добавить(ТекКолонка);	
		КонецЕсли;	
	КонецЦикла;
	Для каждого ТекКолонка Из МассивУдаляемых Цикл
		Элементы.Удалить(ТекКолонка);	
	КонецЦикла;
	
	
	// ----------------------------------------------------------------------
	// Создание колонок
	
	фСчКол = 0;
	
	ОписаниеТиповКолонок = Новый ОписаниеТипов("Булево");
	     	
	// Обновление компоновщика
	АдресСхемыКомпоновки_ЦФОиСтатьиОборотов = ИнициализироватьКомпоновщик(Объект.Компоновщик_ЦФОиСтатьиОборотов
	                                                           , "СКД_ЦФОиСтатьиОборотов"
															   , УникальныйИдентификатор
															   , Строки);									   
	
	// Выполнение СКД, получение результата														   
	ДеревоРезультат = ПолучитьДеревоРезультатаВыполненияСКД("ЦФОиСтатьиОборотов");
	
	// Заполнение таблицы групп колонок
	фТаблицаГруппКолонок.Очистить();
	ЗаполнитьТаблицуГруппКолонок(ДеревоРезультат.Строки, Колонки, Строки);
	
	// Добавление колонок
	Для каждого СтрокаТаблицыКолонок Из фТаблицаГруппКолонок Цикл
		ДобавитьГруппуКолонок(ИмяРедактируемогоДерева, СтрокаТаблицыКолонок, Колонки, ОписаниеТиповКолонок, ДеревоТекущее.Колонки);
	КонецЦикла;
	Элементы[ИмяРедактируемогоДерева].Обновить();
	
	
	// ----------------------------------------------------------------------
	// Заполнение строк
	
	// Обновление компоновщика
	АдресСхемыКомпоновки_ЦФОиСтатьиОборотов = ИнициализироватьКомпоновщик(Объект.Компоновщик_ЦФОиСтатьиОборотов
	                                                           , "СКД_ЦФОиСтатьиОборотов"
															   , УникальныйИдентификатор
															   , Колонки);									   
	
	// Выполнение СКД, получение результата														   
	ДеревоРезультат = ПолучитьДеревоРезультатаВыполненияСКД("ЦФОиСтатьиОборотов");
	                   			
	ТаблицаГруппКолонок = ДанныеФормыВЗначение(фТаблицаГруппКолонок, Тип("ТаблицаЗначений"));
	
	КореньДереваФормы = ЭтаФорма[ИмяРедактируемогоДерева].ПолучитьЭлементы();
	КореньДереваФормы.Очистить();
	
	ЗаполнитьСтрокиМатрицы(КореньДереваФормы, ДеревоРезультат.Строки, Колонки, Строки, ТаблицаГруппКолонок);
	
КонецПроцедуры // ОбновитьМатрицу()

// Процедура заполняет настройки по принадлежностям статей оборотов.
// 
// Параметры:
//   ИмяДерева - Строка
// 
&НаСервере
Процедура ЗаполнитьНастройкиПоПринадлежностямСтатейОборотов(ИмяДерева)
	
	ТаблицаГруппКолонок = ДанныеФормыВЗначение(фТаблицаГруппКолонок, Тип("ТаблицаЗначений"));
	
	ДеревоТекущее = ДанныеФормыВЗначение(ЭтаФорма[ИмяДерева], Тип("ДеревоЗначений"));	
	
	Если Объект.ВКолонках = "ЦФО" Тогда
		СтрокаИтогов = "ИТОГИ По СтатьяОборотов";
		Строки  = "СтатьяОборотов";
		Колонки = "ЦФО";
	Иначе	
	    СтрокаИтогов = "ИТОГИ По ЦФО";
		Строки  = "ЦФО";
		Колонки = "СтатьяОборотов";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегистрПринадлежность.СтатьяОборотов КАК СтатьяОборотов,
	|	РегистрПринадлежность.ЦФО 			 КАК ЦФО
	|ИЗ
	|	РегистрСведений.бит_ПринадлежностьСтатейОборотов КАК РегистрПринадлежность
	|" + СтрокаИтогов;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВерх = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);	
	Пока ВыборкаВерх.Следующий() Цикл
		
		НайденнаяСтрокаДерева = ДеревоТекущее.Строки.Найти(ВыборкаВерх[Строки], Строки, Истина);
		Если НайденнаяСтрокаДерева = Неопределено Тогда
			Продолжить;		
		КонецЕсли;
				
		Выборка = ВыборкаВерх.Выбрать();	
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыГруппКолонок = ТаблицаГруппКолонок.Найти(Выборка[Колонки], "Ссылка");
			Если СтрокаТаблицыГруппКолонок = Неопределено Тогда
				Продолжить;		
			КонецЕсли;
			ИмяГруппы = СтрокаТаблицыГруппКолонок.ИмяГруппы;
			
			НайденнаяСтрокаДерева[ИмяГруппы + "_Чтение"] = Истина;
			НайденнаяСтрокаДерева[ИмяГруппы + "_Запись"] = Истина;
			НайденнаяСтрокаДерева.Изменено = Истина;
		
		КонецЦикла;	
	
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоТекущее, ЭтаФорма[ИмяДерева]);
	
КонецПроцедуры // ЗаполнитьНастройкиПоПринадлежностямСтатейОборотов()


// Процедура обновляет все настройки.
// 
&НаСервере
Процедура ОбновитьВсеДанные()
	
	// ЦФОиСтатьиОборотов
	ОбновитьМатрицу();   	
	   
	// Проекты
	ОбновитьДерево("Проекты");	
       	
	// Исполнители
	ОбновитьДерево("Исполнители");
	
КонецПроцедуры // КомандаОбновитьВсеДанные()


/////////////////////////////////////////////////////////////////
// Изменение признаков

// Процедура заполняет признаки подчиненных строк дерева.
// 
// Параметры:
//  УзелДерева        - ДанныеФормыКоллекцияЭлементовДерева.
//  ЗначениеПризнака  - Булево.
//  МассивИменКолонок - Массив.
// 
&НаСервере
Процедура ЗаполнитьПризнакПодчиненныхСтрокДерева(УзелДерева, ЗначениеПризнака, МассивИменКолонок)

	Для каждого СтрокаДерева Из УзелДерева Цикл
		
		Для каждого ИмяПризнака Из МассивИменКолонок Цикл
			СтрокаДерева[ИмяПризнака] = ЗначениеПризнака;
		КонецЦикла;
						
		СтрокаДерева.Изменено = Истина;
		
		ЗаполнитьПризнакПодчиненныхСтрокДерева(СтрокаДерева.ПолучитьЭлементы(), ЗначениеПризнака, МассивИменКолонок);
		
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьПризнакПодчиненныхСтрокДерева()

// Процедура выполняет действия, необходимые 
// при изменении признака в дереве настроек по проектам или исполнителям.
// 
// Параметры:
//  Ид          - Строка Или ДанныеФормыЭлементДерева.
//  ИмяДерева   - Строка.
//  ИмяПризнака - Строка.
// 
&НаСервере
Процедура ДеревоПравПризнакПриИзменении(Ид, ИмяДерева, ИмяПризнака)
	
	Если ТипЗнч(Ид) = Тип("ДанныеФормыЭлементДерева") Тогда
		ТекущиеДанные = Ид;
	Иначе	
		ТекущиеДанные = ЭтаФорма[ИмяДерева].НайтиПоИдентификатору(Ид);
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	  	  
	ЭтоДоступ = ?(ИмяДерева = "ДеревоПрав_Проекты"
				, Объект.ВидНастройки_Проекты = Перечисления.бит_рлс_ВидыНастроекПрав.Доступ
				, Объект.ВидНастройки_Исполнители = Перечисления.бит_рлс_ВидыНастроекПрав.Доступ);	
	
	ТекущиеДанные.Изменено = Истина;
	ЗначениеПризнака = ТекущиеДанные[ИмяПризнака];
	
	МассивИменКолонок = Новый Массив;
	МассивИменКолонок.Добавить(ИмяПризнака);
		
	Если ИмяПризнака = "Чтение" Тогда // Если изменен признак "Чтение"
		Если (ЭтоДоступ И Не ЗначениеПризнака) Или (Не ЭтоДоступ И ЗначениеПризнака) Тогда
			МассивИменКолонок.Добавить("Запись");
			ТекущиеДанные.Запись = ЗначениеПризнака;
		КонецЕсли;
	Иначе // Если изменен признак "Запись"
		Если (ЭтоДоступ И ЗначениеПризнака) Или (Не ЭтоДоступ И Не ЗначениеПризнака) Тогда
			МассивИменКолонок.Добавить("Чтение");
			ТекущиеДанные.Чтение = ЗначениеПризнака;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПризнакПодчиненныхСтрокДерева(ТекущиеДанные.ПолучитьЭлементы(), ЗначениеПризнака, МассивИменКолонок);
	
КонецПроцедуры // ДеревоПравПризнакПриИзменении()


// Процедура добавляет строку в таблицу изменений настроек по ЦФО и статьям оборотов.
// 
// Параметры:
//  ТекущиеДанные  					    - ДанныеФормыЭлементДерева.
//  СтруктураЗаполненияТаблицыИзменений - Структура.
// 
&НаСервере
Процедура ДобавитьСтрокуИзменения(ТекущиеДанные, СтруктураЗаполненияТаблицыИзменений)
	
	ТекущиеДанные.Изменено = Истина;
	
	Если Объект.ВКолонках = "ЦФО"  Тогда
		Разделитель_1 = СтруктураЗаполненияТаблицыИзменений.ЗначениеПоТекущейГруппе;
		Разделитель_2 = ТекущиеДанные.СтатьяОборотов;
	Иначе
		Разделитель_1 = ТекущиеДанные.ЦФО;
		Разделитель_2 = СтруктураЗаполненияТаблицыИзменений.ЗначениеПоТекущейГруппе;
	КонецЕсли;
	
	НайденныеСтроки = фТаблицаИзмененийПоЦФОиСтатьямОборотов.НайтиСтроки(Новый Структура("Разделитель_1, Разделитель_2", Разделитель_1, Разделитель_2));
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаИзменений = фТаблицаИзмененийПоЦФОиСтатьямОборотов.Добавить();
		СтрокаИзменений.Разделитель_1 = Разделитель_1;
		СтрокаИзменений.Разделитель_2 = Разделитель_2;
	Иначе	
		СтрокаИзменений = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаИзменений.Чтение 		  = ТекущиеДанные[СтруктураЗаполненияТаблицыИзменений.ИмяКолонкиЧтение];
	СтрокаИзменений.Запись 		  = ТекущиеДанные[СтруктураЗаполненияТаблицыИзменений.ИмяКолонкиЗапись];	

КонецПроцедуры // ДобавитьСтрокуИзменения()

// Процедура заполняет признаки подчиненных строк 
// дерева настроек по ЦФО и статьям оборотов.
// 
// Параметры:
//  УзелДерева        					- ДанныеФормыКоллекцияЭлементовДерева.
//  ЗначениеПризнака  					- Булево.
//  МассивИменКолонок 					- Массив.
//  СтруктураЗаполненияТаблицыИзменений - Структура.
// 
&НаСервере
Процедура ЗаполнитьПризнакПодчиненныхСтрокМатрицы(УзелДерева, ЗначениеПризнака, МассивИменКолонок, СтруктураЗаполненияТаблицыИзменений)

	Для каждого СтрокаДерева Из УзелДерева Цикл
		
		Для каждого ИмяПризнака Из МассивИменКолонок Цикл
			СтрокаДерева[ИмяПризнака] = ЗначениеПризнака;
		КонецЦикла;
						
		ДобавитьСтрокуИзменения(СтрокаДерева, СтруктураЗаполненияТаблицыИзменений);
		ЗаполнитьПризнакПодчиненныхСтрокМатрицы(СтрокаДерева.ПолучитьЭлементы()
													, ЗначениеПризнака
													, МассивИменКолонок
													, СтруктураЗаполненияТаблицыИзменений);
		
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьПризнакПодчиненныхСтрокМатрицы()

// Процедура выполняет действия, необходимые при изменении признака 
// в дереве настроек по ЦФО и статьям оборотов.
// 
// Параметры:
//  Ид          - Строка.
//  ИмяГруппы   - Строка.
//  ИмяПризнака - Строка.
// 
&НаСервере
Процедура МатрицаПравПризнакПриИзменении(Ид, ИмяГруппы, ИмяПризнака)
	
	Если Объект.ВКолонках = "ЦФО" Тогда
		ТекущиеДанные = ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиЦФО.НайтиПоИдентификатору(Ид);	
	Иначе	
	    ТекущиеДанные = ДеревоПрав_ЦФОиСтатьиОборотов_КолонкиСтатьяОборотов.НайтиПоИдентификатору(Ид);	
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ИмяКолонкиЧтение = ИмяГруппы + "_Чтение";
	ИмяКолонкиЗапись = ИмяГруппы + "_Запись"; 
	
	// Таблица изменений
	ТаблицаГруппКолонок 	= ДанныеФормыВЗначение(фТаблицаГруппКолонок, Тип("ТаблицаЗначений"));
	ТекущаяКолонкаИзТаблицы = ТаблицаГруппКолонок.Найти(ИмяГруппы, "ИмяГруппы");
	СтруктураЗаполненияТаблицыИзменений = Новый Структура("ЗначениеПоТекущейГруппе, ИмяКолонкиЧтение, ИмяКолонкиЗапись"
														, ТекущаяКолонкаИзТаблицы.Ссылка, ИмяКолонкиЧтение, ИмяКолонкиЗапись);
		
	ЭтоДоступ = Объект.ВидНастройки_ЦФОиСтатьиОборотов = Перечисления.бит_рлс_ВидыНастроекПрав.Доступ;
	
	МассивИменКолонок = Новый Массив;
			
	Если ИмяПризнака = "Чтение" Тогда // Если изменен признак "Чтение"
		ЗначениеПризнака = ТекущиеДанные[ИмяКолонкиЧтение];
		МассивИменКолонок.Добавить(ИмяКолонкиЧтение);
		Если (ЭтоДоступ И Не ЗначениеПризнака) Или (Не ЭтоДоступ И ЗначениеПризнака) Тогда
			МассивИменКолонок.Добавить(ИмяКолонкиЗапись);
			ТекущиеДанные[ИмяКолонкиЗапись] = ЗначениеПризнака;
		КонецЕсли;
	Иначе // Если изменен признак "Запись"
		ЗначениеПризнака = ТекущиеДанные[ИмяКолонкиЗапись];
		МассивИменКолонок.Добавить(ИмяКолонкиЗапись);
		Если (ЭтоДоступ И ЗначениеПризнака) Или (Не ЭтоДоступ И Не ЗначениеПризнака) Тогда
			МассивИменКолонок.Добавить(ИмяКолонкиЧтение);
			ТекущиеДанные[ИмяКолонкиЧтение] = ЗначениеПризнака;
		КонецЕсли;
	КонецЕсли;	
		
	ДобавитьСтрокуИзменения(ТекущиеДанные, СтруктураЗаполненияТаблицыИзменений);

	// Изменение признаков в подчиненных строках.
	ЗаполнитьПризнакПодчиненныхСтрокМатрицы(ТекущиеДанные.ПолучитьЭлементы()
										, ЗначениеПризнака
										, МассивИменКолонок
										, СтруктураЗаполненияТаблицыИзменений);
												
КонецПроцедуры // МатрицаПравПризнакПриИзменении()

// Процедура проставляет все флажки колонки.
// 
// Параметры:
//  ИмяДерева         - Строка.
//  ИмяКолонки        - Строка.
//  ИмяПризнака       - Строка.
//  ЗначениеПризнака  - Булево.
// 
&НаСервере
Процедура ПроставитьВсеФлажкиКолонок(ИмяДерева, ИмяКолонки, ИмяПризнака, ЗначениеПризнака)
	
	ЭтоДоступ = Объект.ВидНастройки_ЦФОиСтатьиОборотов = Перечисления.бит_рлс_ВидыНастроекПрав.Доступ;
		
	МассивИменКолонок = Новый Массив;
	МассивИменКолонок.Добавить(ИмяКолонки);
			
	Если ИмяПризнака = "Чтение" Тогда // Если изменен признак "Чтение"
		Если (ЭтоДоступ И Не ЗначениеПризнака) Или (Не ЭтоДоступ И ЗначениеПризнака) Тогда
			МассивИменКолонок.Добавить(СтрЗаменить(ИмяКолонки, "Чтение", "Запись"));
		КонецЕсли;
	Иначе // Если изменен признак "Запись"
		Если (ЭтоДоступ И ЗначениеПризнака) Или (Не ЭтоДоступ И Не ЗначениеПризнака) Тогда
			МассивИменКолонок.Добавить(СтрЗаменить(ИмяКолонки, "Запись", "Чтение"));
		КонецЕсли;
	КонецЕсли;
		
	// Таблица изменений
	ТаблицаГруппКолонок 	= ДанныеФормыВЗначение(фТаблицаГруппКолонок, Тип("ТаблицаЗначений"));
	
	ИмяГруппы 							= ТекущийЭлемент.ТекущийЭлемент.Родитель.Имя;
	ТекущаяКолонкаИзТаблицы 			= ТаблицаГруппКолонок.Найти(ИмяГруппы, "ИмяГруппы");
	СтруктураЗаполненияТаблицыИзменений = Новый Структура("ЗначениеПоТекущейГруппе, ИмяКолонкиЧтение, ИмяКолонкиЗапись"
														, ТекущаяКолонкаИзТаблицы.Ссылка, ИмяГруппы + "_Чтение", ИмяГруппы + "_Запись");
	
	ЗаполнитьПризнакПодчиненныхСтрокМатрицы(ЭтаФорма[ИмяДерева].ПолучитьЭлементы()
													, ЗначениеПризнака
													, МассивИменКолонок
													, СтруктураЗаполненияТаблицыИзменений);
		 
КонецПроцедуры // ПроставитьВсеФлажкиКолонок()

// Процедура инвертирует все флажки колонки.
// 
// Параметры:
//  ИмяДерева   - Строка.
//  ИмяКолонки 	- Строка.
//  ИмяПризнака - Строка.
//  УзелДерева  - ДанныеФормыЭлементДерева (По умолчанию = Неопределено).
// 
&НаСервере
Процедура ИнвертироватьВсеФлажкиКолонок(ИмяДерева, ИмяКолонки, ИмяПризнака, УзелДерева = Неопределено)

	// Таблица изменений
	ТаблицаГруппКолонок = ДанныеФормыВЗначение(фТаблицаГруппКолонок, Тип("ТаблицаЗначений"));
	
	ИмяГруппы 							= ТекущийЭлемент.ТекущийЭлемент.Родитель.Имя;
	ТекущаяКолонкаИзТаблицы 			= ТаблицаГруппКолонок.Найти(ИмяГруппы, "ИмяГруппы");
	СтруктураЗаполненияТаблицыИзменений = Новый Структура("ЗначениеПоТекущейГруппе, ИмяКолонкиЧтение, ИмяКолонкиЗапись"
														, ТекущаяКолонкаИзТаблицы.Ссылка, ИмяГруппы + "_Чтение", ИмяГруппы + "_Запись");
	
	Если УзелДерева = Неопределено Тогда
	 	УзелДерева = ЭтаФорма[ИмяДерева];	
	КонецЕсли;
	
	ЭтоДоступ = Объект.ВидНастройки_ЦФОиСтатьиОборотов = Перечисления.бит_рлс_ВидыНастроекПрав.Доступ;
	
	Для каждого СтрокаДерева Из УзелДерева.ПолучитьЭлементы() Цикл
		
		СтрокаДерева[ИмяКолонки] = Не СтрокаДерева[ИмяКолонки];
		ЗначениеПризнака = СтрокаДерева[ИмяКолонки];
		Если ИмяПризнака = "Чтение" Тогда // Если изменен признак "Чтение"
			Если (ЭтоДоступ И Не ЗначениеПризнака) Или (Не ЭтоДоступ И ЗначениеПризнака) Тогда
				СтрокаДерева[СтрЗаменить(ИмяКолонки, "Чтение", "Запись")] = ЗначениеПризнака;
			КонецЕсли;
		Иначе // Если изменен признак "Запись"
			Если (ЭтоДоступ И ЗначениеПризнака) Или (Не ЭтоДоступ И Не ЗначениеПризнака) Тогда
				СтрокаДерева[СтрЗаменить(ИмяКолонки, "Запись", "Чтение")] = ЗначениеПризнака;
			КонецЕсли;
		КонецЕсли;
				
		ИнвертироватьВсеФлажкиКолонок(ИмяДерева, ИмяКолонки, ИмяПризнака, СтрокаДерева);
		
		ДобавитьСтрокуИзменения(СтрокаДерева, СтруктураЗаполненияТаблицыИзменений);
		
	КонецЦикла;	

КонецПроцедуры // ИнвертироватьВсеФлажкиКолонок()

// Процедура проставляет все флажки строки.
// 
// Параметры:
//  ИмяДерева 	  - Строка
//  ИмяПризнака - Строка
//  ЗначениеПризнака - Булево
// 
&НаСервере
Процедура ПроставитьВсеФлажкиСтроки(ИмяДерева, ИмяПризнака, ЗначениеПризнака)

	ТекущаяСтрокаДерева = ЭтаФорма[ИмяДерева].НайтиПоИдентификатору(ТекущийЭлемент.ТекущаяСтрока);
	
	ЭтоДоступ = Объект.ВидНастройки_ЦФОиСтатьиОборотов = Перечисления.бит_рлс_ВидыНастроекПрав.Доступ;
	
	МассивИменКолонок = Новый Массив;
	МассивИменКолонок.Добавить(ИмяПризнака);
	Если ИмяПризнака = "Чтение" Тогда
		Если (ЭтоДоступ И Не ЗначениеПризнака) Или (Не ЭтоДоступ И ЗначениеПризнака) Тогда
			МассивИменКолонок.Добавить("Запись");		
		КонецЕсли;
	Иначе
		Если (ЭтоДоступ И ЗначениеПризнака) Или (Не ЭтоДоступ И Не ЗначениеПризнака) Тогда
			МассивИменКолонок.Добавить("Чтение");
		КонецЕсли;
	КонецЕсли;	
		
	Для каждого КолонкаДерева Из ТекущийЭлемент.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(КолонкаДерева) = Тип("ГруппаФормы") Тогда
			
			ИмяГруппы = КолонкаДерева.Имя;
		 	Для каждого ТекИмяПризнака Из МассивИменКолонок Цикл
				ТекущаяСтрокаДерева[ИмяГруппы + "_" + ТекИмяПризнака] = ЗначениеПризнака;	
			КонецЦикла;
			
			МатрицаПравПризнакПриИзменении(ТекущаяСтрокаДерева.ПолучитьИдентификатор(), ИмяГруппы, ИмяПризнака);
			
		КонецЕсли;
		
	КонецЦикла;   	
	
КонецПроцедуры // ПроставитьВсеФлажкиСтроки()

// Процедура инвертирует все флажки строки.
// 
// Параметры:
//  ИмяДерева   - Строка
//  ИмяПризнака - Строка
// 
&НаСервере
Процедура ИнвертироватьВсеФлажкиСтроки(ИмяДерева, ИмяПризнака)

	СтрокаДерева = ЭтаФорма[ИмяДерева].НайтиПоИдентификатору(ТекущийЭлемент.ТекущаяСтрока);
	
	ЭтоДоступ = Объект.ВидНастройки_ЦФОиСтатьиОборотов = Перечисления.бит_рлс_ВидыНастроекПрав.Доступ;
		
	Для каждого КолонкаДерева Из ТекущийЭлемент.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(КолонкаДерева) = Тип("ГруппаФормы") Тогда
			
			ИмяГруппы  = КолонкаДерева.Имя;
			ИмяКолонки = ИмяГруппы + "_" + ИмяПризнака;
			
			СтрокаДерева[ИмяКолонки] = Не СтрокаДерева[ИмяКолонки];
			       			
			МатрицаПравПризнакПриИзменении(СтрокаДерева.ПолучитьИдентификатор(), ИмяГруппы, ИмяПризнака);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ИнвертироватьВсеФлажкиСтроки()

// Процедура изменяет флаги деревьв "Проекты" и "Исполнители".
// 
// Параметры:
//  ИмяДерева        - Строка
//  ИмяКолонки       - Строка
//  ЗначениеПризнака - Число
// 
&НаСервере
Процедура ИзменитьФлаги(ИмяДерева, ИмяКолонки, ЗначениеПризнака)

	Для каждого СтрокаДерева Из ЭтаФорма[ИмяДерева].ПолучитьЭлементы() Цикл 
		
		СтрокаДерева[ИмяКолонки] = ?(ЗначениеПризнака = 2, Не СтрокаДерева[ИмяКолонки], ЗначениеПризнака = 1);
		
		ДеревоПравПризнакПриИзменении(СтрокаДерева, ИмяДерева, ИмяКолонки);
				
	КонецЦикла;
	
КонецПроцедуры // ИзменитьФлаги()
	
/////////////////////////////////////////////////////////////////
// Запись в регистр

// Процедура производит обход ветки дерева для записи изменений в регистр сведений.
// 
// Параметры:
//  ВеткаДерева  	  - ДанныеФормыКоллекцияЭлементовДерева.
//  ВидНастройки	  - ПеречислениеСсылка.бит_рлс_ВидыНастроекПрав.
//  ВидОбласти  	  - ПеречислениеСсылка.бит_рлс_ВидыОбластейДоступа.
//  ИмяПоля           - Строка.
//  Разделитель_Номер - Строка.
// 
&НаСервере
Процедура ЗаписьИзмененийДереваВРегистр(ВеткаДерева, ВидНастройки, ВидОбласти, ИмяПоля, Разделитель_Номер)

	Для каждого СтрокаДерева Из ВеткаДерева Цикл
	
		Если СтрокаДерева.Изменено Тогда
			
			// Вносим изменения в регистр сведений
			МенеджерЗаписи = РегистрыСведений.бит_рлс_ПраваДоступа.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаДерева);
			МенеджерЗаписи.ВидОбластиДоступа  = ВидОбласти;
			МенеджерЗаписи.ВидНастройки 	  = ВидНастройки; 			
			МенеджерЗаписи.Пользователь  	  = Объект.Пользователь;
			МенеджерЗаписи[Разделитель_Номер] = СтрокаДерева[ИмяПоля];
			
			Если Не СтрокаДерева.Чтение И Не СтрокаДерева.Запись Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			СтрокаДерева.Изменено = Ложь;
			
		КонецЕсли;
		
		ЗаписьИзмененийДереваВРегистр(СтрокаДерева.ПолучитьЭлементы(), ВидНастройки, ВидОбласти, ИмяПоля, Разделитель_Номер);
	
	КонецЦикла;	

КонецПроцедуры // ЗаписьИзмененийДереваВРегистр()

// Процедура записывает изменения настроек по проектам.
// 
&НаСервере
Процедура ЗаписатьИзмененияПроекты()
	
	ЗаписьИзмененийДереваВРегистр(ДеревоПрав_Проекты.ПолучитьЭлементы()
					, Объект.ВидНастройки_Проекты
					, Перечисления.бит_рлс_ВидыОбластейДоступа.Проекты
					, "Проект"
					, "Разделитель_4");
		
КонецПроцедуры // ЗаписатьИзмененияПроекты()

// Процедура записывает изменения настроек по исполнителям.
// 
&НаСервере
Процедура ЗаписатьИзмененияИсполнители()

	ЗаписьИзмененийДереваВРегистр(ДеревоПрав_Исполнители.ПолучитьЭлементы()
					, Объект.ВидНастройки_Исполнители
					, Перечисления.бит_рлс_ВидыОбластейДоступа.Пользователи
					, "Исполнитель"
					, "Разделитель_3");
	
КонецПроцедуры // ЗаписатьИзмененияИсполнители() 

// Процедура снимает пометки изменения.
// 
// Параметры:
//  УзелДерева  - ДанныеФормыКоллекцияЭлементовДерева.
// 
&НаСервере
Процедура СнятьПометкиИзменения(УзелДерева)

	Для каждого СтрокаДерева Из УзелДерева Цикл
		СтрокаДерева.Изменено = Ложь;
		СнятьПометкиИзменения(СтрокаДерева.ПолучитьЭлементы());
	КонецЦикла;	

КонецПроцедуры // СнятьПометкиИзменения()

// Процедура записывает изменения настроек по ЦФО и статьям оборотов.
// 
&НаСервере
Процедура ЗаписатьИзмененияЦФОиСтатьиОборотов()
	
	ВидОбласти   = Перечисления.бит_рлс_ВидыОбластейДоступа.ЦФОСтатьиОборотов;
	ВидНастройки = Объект.ВидНастройки_ЦФОиСтатьиОборотов;
	
	Для каждого СтрокаИзменений Из фТаблицаИзмененийПоЦФОиСтатьямОборотов Цикл
		
		// Вносим изменения в регистр сведений
		МенеджерЗаписи = РегистрыСведений.бит_рлс_ПраваДоступа.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаИзменений);
		МенеджерЗаписи.ВидОбластиДоступа  = ВидОбласти;
		МенеджерЗаписи.ВидНастройки 	  = ВидНастройки; 		
		МенеджерЗаписи.Пользователь  	  = Объект.Пользователь;
				
		Если Не СтрокаИзменений.Чтение И Не СтрокаИзменений.Запись Тогда
			МенеджерЗаписи.Удалить();
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// Очистка таблицы с изменениями
	фТаблицаИзмененийПоЦФОиСтатьямОборотов.Очистить();
	
	// Очистка пометок изменения
	ИмяДерева = ПолучитьИмяДерева(Объект.ВКолонках);
	СнятьПометкиИзменения(ЭтаФорма[ИмяДерева].ПолучитьЭлементы());
		
КонецПроцедуры // ЗаписатьИзмененияЦФОиСтатьиОборотов() 



#КонецОбласти

#Область ПроцедурыИФункцииПоРаботеСНастройками

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("Пользователь", Объект.Пользователь);
	СтруктураНастроек.Вставить("ВКолонках"   , Объект.ВКолонках);
	
	СтруктураНастроек.Вставить("ВидНастройки_ЦФОиСтатьиОборотов", Объект.ВидНастройки_ЦФОиСтатьиОборотов);
	СтруктураНастроек.Вставить("ВидНастройки_Проекты"   		, Объект.ВидНастройки_Проекты);
	СтруктураНастроек.Вставить("ВидНастройки_Исполнители"   	, Объект.ВидНастройки_Исполнители);
	
	СтруктураНастроек.Вставить("ПользовательскиеНастройки_ЦФОиСтатьиОборотов", Объект.Компоновщик_ЦФОиСтатьиОборотов.ПользовательскиеНастройки);
	СтруктураНастроек.Вставить("ПользовательскиеНастройки_Проекты"		     , Объект.Компоновщик_Проекты.ПользовательскиеНастройки);
	СтруктураНастроек.Вставить("ПользовательскиеНастройки_Исполнители"	     , Объект.Компоновщик_Исполнители.ПользовательскиеНастройки);
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		ВидНастройкиПоУмолчанию = Перечисления.бит_рлс_ВидыНастроекПрав.Доступ;
		Объект.ВидНастройки_ЦФОиСтатьиОборотов = ВидНастройкиПоУмолчанию;
		Объект.ВидНастройки_Проекты 		   = ВидНастройкиПоУмолчанию;
		Объект.ВидНастройки_Исполнители 	   = ВидНастройкиПоУмолчанию;

		Объект.ВКолонках = "ЦФО";
		
		Возврат; 
		
	КонецЕсли;
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек);
			
		Объект.Компоновщик_ЦФОиСтатьиОборотов.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.ПользовательскиеНастройки_ЦФОиСтатьиОборотов);
		Объект.Компоновщик_Проекты.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.ПользовательскиеНастройки_Проекты);
		Объект.Компоновщик_Исполнители.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.ПользовательскиеНастройки_Исполнители);
			
	КонецЕсли;
	
	ПоказатьТекущееДеревоЦФОиСтатейОборотов();

КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	ПрименитьНастройки(НастройкаПоУмолчанию);
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройки",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
											
КонецПроцедуры // ДействияФормыНастройкиСохранить()

// Процедура - обработчик оповещения о закрытии формы сохранения настроек. 
// 
&НаКлиенте
Процедура СохранитьНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		РезНастройка = Результат;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроек",ЭтаФорма);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
											
КонецПроцедуры // ДействияФормыНастройкиВосстановить()

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек
#КонецОбласти

#КонецОбласти

