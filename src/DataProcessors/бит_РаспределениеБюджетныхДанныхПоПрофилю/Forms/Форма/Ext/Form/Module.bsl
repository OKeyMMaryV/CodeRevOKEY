
#Область ОписаниеПеременных

  // Хранит текущее значение реквизита Аналитика.
  &НаКлиенте
  Перем мТекущаяАналитика; 

  // Хранит текущее значение реквизита Профиль.
  &НаКлиенте
  Перем мТекущийПрофиль; 
  
  
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Параметры.Свойство("Вид", Объект.Вид);
	Параметры.Свойство("ИмяКолонки", фИмяКолонки);
	
	Если Параметры.Свойство("ТекущееЗначение") Тогда
		 ТекущееЗначение = Параметры.ТекущееЗначение;
		 МетаОбъект = Метаданные.НайтиПоТипу(ТипЗнч(ТекущееЗначение));
		 
		 Если НЕ МетаОбъект = Неопределено Тогда
		 	 фОбъектПодбора = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(МетаОбъект.ПолноеИмя());
		 КонецЕсли; 
	КонецЕсли; 
	
	Если Параметры.Свойство("Сценарий") Тогда
		Объект.Периодичность = Параметры.Сценарий.бит_Периодичность;
	КонецЕсли; 
	
	Если Параметры.Свойство("Отбор") И ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		УстановленныеОтборы = Новый ФиксированнаяСтруктура(Параметры.Отбор);
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(
			Элементы.БазаРаспределенияЗначениеАналитики, Параметры.Отбор);
	КонецЕсли; 
	
	Если Объект.Вид = Перечисления.бит_ВидыПрофилейРаспределения.ПоАналитике Тогда
		
		ИзмеренияБюдж = бит_Бюджетирование.НастройкиИзмеренийБюджетирования("Сценарий");
		ТекНастройки  = ИзмеренияБюдж[фИмяКолонки];
		
		Если ТипЗнч(ТекНастройки) = Тип("Структура") Тогда
			Если ЗначениеЗаполнено(ТекНастройки.Аналитика) Тогда
				Объект.Аналитика = ТекНастройки.Аналитика;
			Иначе
				Объект.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду(фИмяКолонки);
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Объект.Аналитика) Тогда
			Элементы.БазаРаспределенияЗначениеАналитики.ОграничениеТипа = Объект.Аналитика.ТипЗначения;
			бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.Профиль, Новый Структура("Аналитика, Вид", Объект.Аналитика, Объект.Вид));
		КонецЕсли; 
	Иначе	
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.Профиль, Новый Структура("Вид", Объект.Вид));
	КонецЕсли; 
	
	УправлениеЭлементамиФормы();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Проверка допустимости использования сохраненного профиля
	Если ЗначениеЗаполнено(Объект.Профиль) Тогда
	
		 Если НЕ Объект.Профиль.Вид = Объект.Вид Тогда
		 
		 	  Объект.Профиль = Неопределено;
		 
		 КонецЕсли; 
		 
		 Если НЕ Объект.Профиль.Аналитика = Объект.Аналитика Тогда
		 
		 	  Объект.Профиль = Неопределено;
		 
		 КонецЕсли; 
	
	КонецЕсли; 
	
	// Если профиль все-же подходит, тогда копируем таб. часть
	ИзменениеПрофиля(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мТекущаяАналитика = Объект.Аналитика;
	мТекущийПрофиль = Объект.Профиль;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Для каждого ЭлементСписка Из ВыбранноеЗначение Цикл
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ЗначениеАналитики", ЭлементСписка);
			
			НайденныеСтроки = Объект.БазаРаспределения.НайтиСтроки(СтрОтбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Значение %1 уже подобрано.'"), ЭлементСписка);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
			Иначе	
				НоваяСтрока = Объект.БазаРаспределения.Добавить();
				НоваяСтрока.ЗначениеАналитики = ЭлементСписка;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Функция ИзменениеПрофиля()
	
	флРазрешеноИзменение = Истина;
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Профиль) Тогда
		ПроверитьБитыеСсылки(Отказ);
		Если НЕ Отказ Тогда
			Объект.БазаРаспределения.Очистить();
			Для каждого СтрокаТаблицы Из Объект.Профиль.Профиль Цикл
				НоваяСтрока = Объект.БазаРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла; 
		Иначе
			флРазрешеноИзменение = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат флРазрешеноИзменение;
	
КонецФункции

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	флИзменениеРазрешено = ИзменениеПрофиля();
	Если НЕ флИзменениеРазрешено Тогда
		 Объект.Профиль = мТекущийПрофиль;
	КонецЕсли; 
	мТекущийПрофиль = Объект.Профиль;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаПриИзменении(Элемент)
	
	флИзменениеРазрешено = АналитикаПриИзмененииНаСервере();
	Если НЕ флИзменениеРазрешено Тогда
		 Объект.Аналитика = мТекущаяАналитика;
	КонецЕсли; 
	мТекущаяАналитика = Объект.Аналитика;
	
КонецПроцедуры

&НаСервере
Функция АналитикаПриИзмененииНаСервере()
	
	флИзменениеРазрешено = Истина;
	
	// Проверка на примитивные типы
	МассивТипов = Объект.Аналитика.ТипЗначения.Типы();
	
	СтрТипы = "";
	Для каждого ТекущийТип Из МассивТипов Цикл
		
		МассивДляОписания = Новый Массив;
		МассивДляОписания.Добавить(ТекущийТип);
		Описание = Новый ОписаниеТипов(МассивДляОписания);
		Если бит_ОбщегоНазначения.ЭтоПримитивныйТип(Описание.ПривестиЗначение()) Тогда
			СтрТипы = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(СтрТипы,Строка(ТекущийТип),", ");
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(СтрТипы) Тогда
		флИзменениеРазрещено = Ложь;
		ТекстСообщения =  НСтр("ru = 'Аналитики с примитивными типами не могут использоваться "
							+ "для профиля распределения по аналитике!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли; 
	
	// Приведение к типу выбранной аналитики
	Если ЗначениеЗаполнено(Объект.Аналитика) И флИзменениеРазрешено Тогда
		 Элементы.БазаРаспределенияЗначениеАналитики.ОграничениеТипа = Объект.Аналитика.ТипЗначения;
		 Для каждого СтрокаТаблицы Из Объект.Профиль Цикл
		 	  СтрокаТаблицы.ЗначениеАналитики = Объект.Аналитика.ТипЗначения.ПривестиЗначение(СтрокаТаблицы.ЗначениеАналитики);
		 КонецЦикла; 
	КонецЕсли; 
	
	Возврат флИзменениеРазрешено;
	
КонецФункции

&НаКлиенте
Процедура БазаРаспределенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТЧПрофиль  = Объект.БазаРаспределения;
		КолВоСтрок = ТЧПрофиль.Количество();
		Если Не КолВоСтрок = 1 Тогда
			
			МаксНомерПериода = 0;
			
			// Поиск максимального номера периода.
			Для Каждого ТекСтрока Из ТЧПрофиль Цикл
				Если МаксНомерПериода < ТекСтрока.НомерПериода Тогда
					МаксНомерПериода = ТекСтрока.НомерПериода;
				КонецЕсли;
			КонецЦикла;
			// Установим номер периода.
			Элемент.ТекущиеДанные.НомерПериода = МаксНомерПериода + 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаРаспределить(Команда)
	
	Если ВыполнитьПроверки() Тогда
		
		РезСтруктура = Новый Структура;
		РезСтруктура.Вставить("Вид", Объект.Вид);
		РезСтруктура.Вставить("ИмяКолонки", фИмяКолонки);
		РезСтруктура.Вставить("Периодичность", Объект.Периодичность);
		РезСтруктура.Вставить("БазаРаспределения", Новый Массив);
		РезСтруктура.Вставить("УдалятьИсходныеДанные", Истина);
		
		Для каждого СтрокаТаблицы Из Объект.БазаРаспределения Цикл
			МодельСтроки = Новый Структура("НомерПериода, ЗначениеАналитики, Процент");
			ЗаполнитьЗначенияСвойств(МодельСтроки, СтрокаТаблицы);
			РезСтруктура.БазаРаспределения.Добавить(МодельСтроки);								
		КонецЦикла; 
		Закрыть(РезСтруктура);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаписатьНаСервере(Кандидат)
	
	Если НЕ ЗначениеЗаполнено(Объект.Профиль) Тогда
		ПрофильОб = Справочники.бит_ПрофилиРаспределенияПоПериодам.СоздатьЭлемент();
		ПрофильОб.Наименование = Кандидат;
	Иначе	
		ПрофильОб = Объект.Профиль.ПолучитьОбъект();
	КонецЕсли; 
	
	ПрофильОб.Вид = Объект.Вид;
	ПрофильОб.Аналитика = Объект.Аналитика;
	ПрофильОб.Профиль.Очистить();
	
	Для каждого СтрокаТаблицы Из Объект.БазаРаспределения Цикл
	
		НоваяСтрока = ПрофильОб.Профиль.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	
	КонецЦикла; 
	
	ПрофильОб.Ответственный = бит_ОбщегоНазначенияПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	
	ИтоговыйПроцент = ПрофильОб.Профиль.Итог("Процент");
	
	Отказ = Ложь;
	
	Если Не ИтоговыйПроцент = 100 Тогда
		ТекстСообщения = "Сумма процентов по профилю должна равняться 100.";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Объект.Профиль", ,Отказ); 
	КонецЕсли;
	
	Если Не Отказ Тогда
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ПрофильОб, "", "Ошибки");
		Если флВыполнено И НЕ ЗначениеЗаполнено(Объект.Профиль) Тогда
			 Объект.Профиль = ПрофильОб.Ссылка;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Отказ = Ложь;
	ПроверитьБазуРаспределения(Отказ);
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("КомандаЗаписатьЗавершение", ЭтотОбъект);
	Если НЕ ЗначениеЗаполнено(Объект.Профиль) Тогда
		Наименование = СтрШаблон(НСтр("ru = 'Профиль %1 от %2'"), Объект.Аналитика, 
			ОбщегоНазначенияКлиент.ДатаСеанса());
		ПоказатьВводСтроки(Оповещение, Наименование, Нстр("ru = 'Наименование профиля'"), 100);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		КомандаЗаписатьНаСервере(Результат);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Записан профиль распределения'"));
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура КомандаРавномерно(Команда)
	
	бит_БюджетированиеКлиент.РавномерныйПрофиль(Объект.БазаРаспределения);
	
КонецПроцедуры

// Функция готовит параметры для подбора аналитик.
//
// Возвращаемое значение:
//  РезДанные - Структура.
//
&НаСервере
Функция ПодготовитьПараметрыПодбора()

	РезДанные = Новый Структура;
	РезДанные.Вставить("ОбъектыПодбора", Новый Массив);
	
	Если ЗначениеЗаполнено(Объект.Аналитика) Тогда
		
		  инд = 1;
		  МассивТипов = Объект.Аналитика.ТипЗначения.Типы();
		  Для каждого ТекТип Из МассивТипов Цикл
		  
		  	   МетаОбъект = Метаданные.НайтиПоТипу(ТекТип);
			   Если НЕ МетаОбъект = Неопределено Тогда
			   	    Имена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(МетаОбъект.ПолноеИмя());
					РезДанные.ОбъектыПодбора.Добавить(Имена);
			   КонецЕсли; 
		  КонецЦикла; 
	КонецЕсли; 

	Возврат РезДанные;
	
КонецФункции // ПодготовитьПараметрыПодбора()

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ОбъектПодбора = Неопределено;
	Если ТипЗнч(фОбъектПодбора) = Тип("Структура") Тогда
		ОбъектПодбора = фОбъектПодбора;
	Иначе	
		ПараметрыПодбора = ПодготовитьПараметрыПодбора();
		
		Если ПараметрыПодбора.ОбъектыПодбора.Количество() > 0 Тогда
			ОбъектПодбора = ПараметрыПодбора.ОбъектыПодбора[0];
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ОбъектПодбора = Неопределено Тогда
		
		ИмяФормыПодбора = ОбъектПодбора.ИмяКласса+"."+ОбъектПодбора.ИмяОбъекта+".ФормаВыбора";
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", 		Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		Если ТипЗнч(УстановленныеОтборы) = Тип("ФиксированнаяСтруктура") Тогда
			Отбор = Новый Структура; 
			Для каждого КлючЗначение Из УстановленныеОтборы Цикл
				Отбор.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			ПараметрыФормы.Вставить("Отбор", Отбор);
		КонецЕсли; 
		ОткрытьФорму(ИмяФормыПодбора,ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// БазаРаспределенияПроцент
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БазаРаспределенияПроцент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.БазаРаспределения.Процент", ВидСравненияКомпоновкиДанных.Заполнено, "");
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.БазаРаспределенияПроцент.Шрифт,,, Истина));

	Элементы.БазаРаспределенияПроцент.ШрифтЗаголовка = Новый Шрифт(Элементы.БазаРаспределенияПроцент.Шрифт,,, Истина);
	Элементы.БазаРаспределенияПроцент.ШрифтПодвала 	 = Новый Шрифт(Элементы.БазаРаспределенияПроцент.Шрифт,,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ЭтоПрофильАналитики = ?(Объект.Вид = Перечисления.бит_ВидыПрофилейРаспределения.ПоАналитике, Истина, Ложь);
	ЭтоПрофильПериода   = ?(Объект.Вид = Перечисления.бит_ВидыПрофилейРаспределения.ПоПериодам, Истина, Ложь);
	
	Элементы.Аналитика.Видимость = ЭтоПрофильАналитики;
	Элементы.БазаРаспределенияЗначениеАналитики.Видимость = ЭтоПрофильАналитики;
	Элементы.БазаРаспределенияКомандаПодбор.Видимость = ЭтоПрофильАналитики;
	
	Элементы.БазаРаспределенияНомерПериода.Видимость = ЭтоПрофильПериода;
	
КонецПроцедуры

// Процедура проверяет наличие "битых" ссылок при работе RLS. 
//
// Параметры:
//  Отказ - Булево.
//
&НаСервере
Процедура ПроверитьБитыеСсылки(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Профиль) 
		 И ЗначениеЗаполнено(Объект.Аналитика) Тогда
		
		МассивТипов = Объект.Аналитика.ТипЗначения.Типы();
		бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(Объект.Профиль, МассивТипов, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

// Функция выполняет проверки перед распределением.
//
// Возвращаемое значение:
//  флОК - Булево.
//
&НаКлиенте
Функция ВыполнитьПроверки()
	
	Отказ = Ложь;
	ПроверитьБазуРаспределения(Отказ);
	ПроверитьБитыеСсылки(Отказ);
	
	Возврат НЕ Отказ;
	
КонецФункции 

&НаКлиенте
Процедура ПроверитьБазуРаспределения(Отказ)

	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Объект.БазаРаспределения.Количество() <> 0 И Объект.БазаРаспределения.Итог("Процент") <> 100 Тогда
		ТекстСообщения = НСтр("ru = 'Сумма процентов не равна 100!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ); 
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти