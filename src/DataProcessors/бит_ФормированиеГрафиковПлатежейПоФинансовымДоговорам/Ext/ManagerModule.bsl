
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сформировать печатные формы объектов.
//
// Параметры:
//  Параметры		 - Структура		 - Параметры печати.
//  ИмяМакета		 - Строка			 - Имя макета.
//  ПараметрыПечати	 - Структура		 - Структура дополнительных параметров печати.
//  ПечатныйДокумент - ТабличныйДокумент - Возвращаемое значение.
//
Процедура Печать(Параметры, ИмяМакета, ПараметрыПечати=Неопределено, ПечатныйДокумент) Экспорт
	
	Если ИмяМакета = "ГрафикПлатежей" Тогда
		ПечатныйДокумент = СформироватьПечатнуюФормуГрафикаПлатежей("ГрафикПлатежей", Параметры);
	КонецЕсли;
	
КонецПроцедуры // Печать()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция формирует структуру колонок таблицы графика платежей
// используется как для формирования таблицы графика платежей,
// так и для формирования контекста пользовательской функции.
// 
// Параметры:
// 	нет.
// 	
// Возвращаемое значение:
// 	Структура - Структура.
// 
Функция ПолучитьСтруктуруДанныхПериодаРасчета(ПолнаяСтруктура=Истина) Экспорт
	
	Структура = Новый Структура;
	
	Обр = Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.Создать();
	
	ТЗ = Обр.ГрафикВыдачиТраншей.ВыгрузитьКолонки();
	
	Для Каждого ТекущаяКолонка Из ТЗ.Колонки Цикл
		
		Если ТекущаяКолонка.Имя = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Структура.Вставить(ТекущаяКолонка.Имя, ТекущаяКолонка.ТипЗначения);
		
	КонецЦикла;
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2);
	
	МассивТиповДоговор = Новый Массив;
	МассивТиповДоговор.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	МассивТиповДоговор.Добавить(Тип("ДокументСсылка.бит_ПроектДоговора"));
	
	// Добавим данные которые могут использоваться при расчете.
	Структура.Вставить("ДоговорКонтрагента"	, Новый ОписаниеТипов(МассивТиповДоговор));
	Структура.Вставить("Период"			 	, Новый ОписаниеТипов("Дата"));
	Структура.Вставить("ПериодОплатыПред"	, Новый ОписаниеТипов("Дата"));
	Структура.Вставить("Направление"		, Новый ОписаниеТипов("ПеречислениеСсылка.бит_РасходДоход"));
	Структура.Вставить("СтатьяОборотов"	 	, Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов"));
	Структура.Вставить("СоставляющаяПлатежа", Новый ОписаниеТипов("СправочникСсылка.бит_СоставляющиеПлатежейПоФинДоговорам"));
	Структура.Вставить("ПроцентнаяСтавка"	, Новый ОписаниеТипов("Число"));
	Структура.Вставить("Сумма"				, Новый ОписаниеТипов("Число",КвалификаторыЧисла));
	Структура.Вставить("ЗадолженностьПоОсновномуДолгу"			, Новый ОписаниеТипов("Число",КвалификаторыЧисла));
	Структура.Вставить("СвободныйОстатокЛимитаВозобновляемый"	, Новый ОписаниеТипов("Число",КвалификаторыЧисла));
	Структура.Вставить("СвободныйОстатокЛимитаНЕВозобновляемый"	, Новый ОписаниеТипов("Число",КвалификаторыЧисла));
	Структура.Вставить("ЭтоПоследнийПлатеж"	, Новый ОписаниеТипов("Булево"));
	Структура.Вставить("ОтказОтВвода"		, Новый ОписаниеТипов("Булево"));
	
	Если НЕ ПолнаяСтруктура Тогда
		Структура.Удалить("ИД");
		Структура.Удалить("ПредставлениеМесяцаПервогоПлатежа");
		Структура.Удалить("Сумма");
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

// Функция выполняет расчет количества периодов выплат.
// 
// Параметры:
// 	ПериодичностьОсновногоДолга - ПеречислениСсылка.бит_ПериодичностьВыплатПоФинансовымДоговорам.
// 	МесяцПервогоПлатежа - Дата.
// 	ДатаПогашения - Дата.
// 
// Возвращаемое значение:
// 	КоличествоПериодовВыплат - число.
// 
Функция РассчитатьКоличествоПериодовВыплат(ПериодичностьОсновногоДолга, МесяцПервогоПлатежа, ДатаПогашения) Экспорт
	
	КоличествоМесяцев = бит_Бюджетирование.РазностьДат(МесяцПервогоПлатежа, ДатаПогашения, "МЕСЯЦ") + 1;
	
	// Количество периодов рассчитываем исходя из периодичности основного долга.
	Если ПериодичностьОсновногоДолга = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежегодно Тогда
		КоличествоПериодов = КоличествоМесяцев / 12;
		КоличествоЦелыхПериодов = Цел(КоличествоПериодов);
		ВременныеОстатки = КоличествоМесяцев %12;
		Если ВременныеОстатки = 0 Тогда
			ДопПериод = 0;
		Иначе
			ДопПериод = 1;
		КонецЕсли;
		
		КоличествоПериодовВыплат = КоличествоЦелыхПериодов + ДопПериод;
	ИначеЕсли ПериодичностьОсновногоДолга = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежеквартально Тогда
		КоличествоПериодов = КоличествоМесяцев / 3;
		КоличествоЦелыхПериодов = Цел(КоличествоПериодов);
		ВременныеОстатки = КоличествоМесяцев %3;
		Если ВременныеОстатки = 0 Тогда
			ДопПериод = 0;
		Иначе
			ДопПериод = 1;
		КонецЕсли;
		
		КоличествоПериодовВыплат = КоличествоЦелыхПериодов + ДопПериод;
	ИначеЕсли ПериодичностьОсновногоДолга = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.ПриПогашении Тогда
		КоличествоПериодовВыплат = 1;
	ИначеЕсли ПериодичностьОсновногоДолга = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Единовременно Тогда
		КоличествоПериодовВыплат = 1;	
	Иначе
		КоличествоПериодовВыплат = КоличествоМесяцев;
	КонецЕсли;
	
	Возврат КоличествоПериодовВыплат;
	
КонецФункции

// Функция формирует структуру параметров составляющей платежа.
// 
// Параметры:
// 	СоставляющаяПлатежа - Строка, 
// 						  СправочникСсылка.бит_СоставляющиеПлатежейПоФинДоговорам,
// 						  ПеречислениеСсылка.бит_ТипыПлатежейПоФинансовымДоговорам 
// 								- составляющая для которой формируем параметры.
// 	ДеревоСоставляющих - ДеревоЗначений - содержит составляющие платежа.
// 
// Возвращаемое значение:
// 	ПараметрыСоставляющей - Структура.
// 
Функция ПолучитьСтруктуруПараметровРасчета(СоставляющаяПлатежа, ДеревоСоставляющих) Экспорт
	
	// Найдем общие параметры
	КоллекцияСтрок = ПолучитьСтрокиПараметровСоставляющей("Общие параметры", ДеревоСоставляющих);
	ОбщиеПараметры = ПреобразоватьПараметрыСоставляющейВСтруктуру(КоллекцияСтрок);
	
	// Для основного долга нужно найти процентную ставку из составляющей с типом "Процент".
	Если СоставляющаяПлатежа = Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг
		ИЛИ (ТипЗнч(СоставляющаяПлатежа) = Тип("СправочникСсылка.бит_СоставляющиеПлатежейПоФинДоговорам")
			И СоставляющаяПлатежа.ТипПлатежаПоФинДоговору = Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг) Тогда
			
		КоллекцияСтрок = ПолучитьСтрокиПараметровСоставляющей(Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.Проценты, ДеревоСоставляющих);
		Проценты = ПреобразоватьПараметрыСоставляющейВСтруктуру(КоллекцияСтрок);
		
		Если Проценты.Свойство("ПроцентнаяСтавка")
			И НЕ Проценты.ПроцентнаяСтавка = 0 Тогда
			
			ОбщиеПараметры.Вставить("ПроцентнаяСтавка", Проценты.ПроцентнаяСтавка);
			
		КонецЕсли;
		
	КонецЕсли;

	// Сформируем структуру параметров переданной составляющей.
	КоллекцияСтрок = ПолучитьСтрокиПараметровСоставляющей(СоставляющаяПлатежа, ДеревоСоставляющих);
	ПараметрыСоставляющей = ПреобразоватьПараметрыСоставляющейВСтруктуру(КоллекцияСтрок, ОбщиеПараметры);
	
	Возврат ПараметрыСоставляющей;
	
КонецФункции

// Функция вычисляет дату окончания выплат по погашению основного долга.
// 
// Параметры:
// 	ПараметрыОсновногоДолга - Структура - структура параметров составляющей платежа "Основной долг".
// 	ДанныеПоступления - СтрокаТабличнойЧасти - данные по траншу.
// 
// Возвращаемое значение:
// 	ПериодОкончанияВыплат - Дата - дата последнего платежа.
// 
Функция ПолучитьПериодОкончанияВыплатПоТраншу(ПараметрыОсновногоДолга, ДанныеПоступления) Экспорт
	
	// Определим когда необходимо закончить начисления
	// начисления заканчиваются тогда, когда по основному долгу совершено столько платежей,
	// сколько указано в реквизите КоличествоПериодовВыплат.
	ПараметрыПериодичности = ПолучитьПараметрыПериодичности(ПараметрыОсновногоДолга.Периодичность, 
															ДанныеПоступления.ДатаТранша, 
															ДанныеПоступления.ДатаПогашения, 
															ДанныеПоступления.МесяцПервогоПлатежа, 
															ПараметрыОсновногоДолга.ДатаПервогоПлатежа);
	
	Если ПараметрыОсновногоДолга.Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.ПриПогашении
		ИЛИ ПараметрыОсновногоДолга.Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Единовременно Тогда
		ПериодОкончанияВыплат = ПараметрыПериодичности.ПериодОплаты;
	ИначеЕсли ТипЗнч(ПараметрыПериодичности.ПериодичностьОплаты) = Тип("Число") Тогда
		ПериодОкончанияВыплат = ДобавитьМесяц(ПараметрыПериодичности.ПериодОплаты, ПараметрыПериодичности.ПериодичностьОплаты*(ДанныеПоступления.КоличествоПериодовВыплат-1));
	Иначе
		ПериодОкончанияВыплат = ДанныеПоступления.ДатаТранша;
	КонецЕсли;
	
	Возврат ПериодОкончанияВыплат;
	
КонецФункции

// Функция формирует таблицу графика платежей.
// 
// Параметры:
// 	ГрафикВыдачиТраншей - ТаблицаЗначений.
// 	ДеревоСоставляющих - ДеревоЗначений.
// 	СтруктураПараметров - Структура - доп. параметры для расчета.
// 
// Возвращаемое значение:
// 	ТаблицаПериодов - ТаблицаЗначений - график платежей.
// 
Функция СформироватьГрафикПлатежей(ГрафикВыдачиТраншей, ДеревоСоставляющих, СтруктураПараметров) Экспорт
	
	ДоговорКонтрагента	 = СтруктураПараметров.ДоговорКонтрагента;
	СуммаДоговора		 = СтруктураПараметров.СуммаДоговора;
	НаправлениеДДС		 = СтруктураПараметров.НаправлениеДДС;
	ВидГрафика			 = СтруктураПараметров.ВидГрафика;
	
	// Найдем общие параметры
	ОбщиеПараметры = ПолучитьСтруктуруПараметровРасчета("Общие параметры", ДеревоСоставляющих);
	// Найдем параметры основного долга
	ПараметрыОснДолга = ПолучитьСтруктуруПараметровРасчета(Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг, ДеревоСоставляющих);
	
	СтруктураКолонок = ПолучитьСтруктуруДанныхПериодаРасчета();
	
	// В таблице хранятся данные по платежам
	ТаблицаПериодов = Новый ТаблицаЗначений;
	// Информация по траншам - это не расчетные периоды
	// , т.к. всю необходимую информацию введет пользователь.
	ТаблицаПериодов.Колонки.Добавить("ЭтоНЕРасчетныйПериод", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТекущаяКолонка Из СтруктураКолонок Цикл
		НоваяКолонка = ТаблицаПериодов.Колонки.Добавить(ТекущаяКолонка.Ключ, ТекущаяКолонка.Значение);
	КонецЦикла;
	
	// Закэшируем параметры всех составляющих платежа.
	КэшПараметровСоставляющих = Новый Соответствие;
	
	// +СБ. Кузнецова С. 2014-11-20 
	// определим коэффициент для расчета суммы последней выплаты (если таковая установлена)
	ИтогПоТраншам = ГрафикВыдачиТраншей.Итог("СуммаТранша");
	КоэффициентТранша = 1 / ИтогПоТраншам;
	// -СБ. Кузнецова С.
	
	// Заполним таблицу датами оплат по каждой составляющей платежа.
	Для Каждого ТекущееПоступление Из ГрафикВыдачиТраншей Цикл
		
		// Определим когда необходимо закончить начисления
		// начисления заканчиваются тогда, когда по основному долгу совершено столько платежей,
		// сколько указано в реквизите КоличествоПериодовВыплат.
		ПериодОкончанияВыплат = ПолучитьПериодОкончанияВыплатПоТраншу(ПараметрыОснДолга, ТекущееПоступление);
		
		// Добавим поступление по кредиту
		НоваяСтрока = ТаблицаПериодов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущееПоступление);
		
		НоваяСтрока.ДоговорКонтрагента  = ДоговорКонтрагента;
		НоваяСтрока.Период				= ТекущееПоступление.ДатаТранша;
		НоваяСтрока.Направление 		= ПолучитьНаправлениеПлатежа(Истина, НаправлениеДДС);
		НоваяСтрока.ЭтоНЕРасчетныйПериод= Истина;
		НоваяСтрока.Сумма 				= ТекущееПоступление.СуммаТранша;
		НоваяСтрока.ЗадолженностьПоОсновномуДолгу = ТекущееПоступление.СуммаТранша;
		
		// Добавим платежи по кредиту
		Для Каждого ТекущаяСоставляющая Из ДеревоСоставляющих.Строки Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекущаяСоставляющая.СоставляющаяПлатежа) Тогда
				// Общие параметры - используются для уточнения параметров, а не для расчета.
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = ПолучитьСтруктуруПараметровРасчета(ТекущаяСоставляющая.СоставляющаяПлатежа, ДеревоСоставляющих);
			
			КэшПараметровСоставляющих.Вставить(ТекущаяСоставляющая.СоставляющаяПлатежа, СтруктураПараметров);
			
			// Параметры периодичности выплат по текущей составляющей платежа.
			ПараметрыПериодичности = ПолучитьПараметрыПериодичности(СтруктураПараметров.Периодичность, 
																	ТекущееПоступление.ДатаТранша, 
																	ПериодОкончанияВыплат, 
																	ТекущееПоступление.МесяцПервогоПлатежа, 
																	СтруктураПараметров.ДатаПервогоПлатежа);
			
			ПериодичностьОплаты = ПараметрыПериодичности.ПериодичностьОплаты;
			ПериодОплаты 		= ПараметрыПериодичности.ПериодОплаты;
			
			Если ПериодичностьОплаты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПериодОплатыПред = ТекущееПоступление.ДатаТранша;
			
			// Сформируем график платежей
			Пока НачалоМесяца(ПериодОплаты) <= НачалоМесяца(ПериодОкончанияВыплат) Цикл
				
				ЭтоДатаПогашенияТранша = НачалоМесяца(ПериодОплаты) = НачалоМесяца(ПериодОкончанияВыплат);
				
				НоваяСтрока = ТаблицаПериодов.Добавить();
				
				// Будем хранить информацию о транше, который оплачивается.
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущееПоступление);
				
				// Приведем к нужному числу в месяце
				ПериодОплаты = УточнитьДеньПериодаОплаты(ПериодОплаты, СтруктураПараметров.ДатаПервогоПлатежа);
				
				// +СБ. Кузнецова С. 2014-11-11
				Если ЭтоДатаПогашенияТранша Тогда
					Если Не (ТекущаяСоставляющая.Группировка = Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.Проценты 
						И ПериодичностьОплаты = 1 
						И НачалоМесяца(ПериодОкончанияВыплат) <> НачалоМесяца(ТекущееПоступление.ДатаПогашения)) Тогда
						ПериодОплаты = ТекущееПоступление.ДатаПогашения;
					КонецЕсли;
				КонецЕсли;
				// -СБ. Кузнецова С.
				
				НоваяСтрока.ДоговорКонтрагента  = ДоговорКонтрагента;
				НоваяСтрока.Период 				= ПериодОплаты;
				НоваяСтрока.ПериодОплатыПред 	= ПериодОплатыПред;
				НоваяСтрока.СоставляющаяПлатежа = ТекущаяСоставляющая.СоставляющаяПлатежа;
				НоваяСтрока.Направление 		= ПолучитьНаправлениеПлатежа(Ложь, НаправлениеДДС);
				НоваяСтрока.ЭтоПоследнийПлатеж  = ЭтоДатаПогашенияТранша;
				
				Если ПериодичностьОплаты <= 0 Тогда
					Прервать;
				Иначе	
					ПериодОплаты 	 = ДобавитьМесяц(ПериодОплаты, ПериодичностьОплаты);
					ПериодОплатыПред = НоваяСтрока.Период;
				КонецЕсли;
				
			КонецЦикла;
			
			// +СБ. Кузнецова С. 2014-12-10 
			Если ТекущаяСоставляющая.Группировка = Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.Проценты 
				И ПериодичностьОплаты = 1 Тогда
				
				Пока НачалоМесяца(ПериодОплаты) <= НачалоМесяца(ТекущееПоступление.ДатаПогашения) Цикл
					// расчет процентов для оставшихся до даты погашения месяцев, если поквартальный расчет основного долга закончился раньше
					
					ЭтоДатаПогашенияТранша = НачалоМесяца(ПериодОплаты) = НачалоМесяца(ТекущееПоступление.ДатаПогашения);
					
					НоваяСтрока = ТаблицаПериодов.Добавить();
					
					// будем хранить информацию о транше, который оплачивается
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущееПоступление);
					
					// приведем к нужному числу в месяце
					ПериодОплаты = УточнитьДеньПериодаОплаты(ПериодОплаты, СтруктураПараметров.ДатаПервогоПлатежа);
					// +СБ. Кузнецова С. 2014-11-11 
					Если ЭтоДатаПогашенияТранша Тогда
						ПериодОплаты = ТекущееПоступление.ДатаПогашения;
					КонецЕсли;
					// -СБ. Кузнецова С.
					
					НоваяСтрока.ДоговорКонтрагента  = ДоговорКонтрагента;
					НоваяСтрока.Период 				= ПериодОплаты;
					НоваяСтрока.ПериодОплатыПред 	= ПериодОплатыПред;
					НоваяСтрока.СоставляющаяПлатежа = ТекущаяСоставляющая.СоставляющаяПлатежа;
					НоваяСтрока.Направление 		= ПолучитьНаправлениеПлатежа(Ложь, НаправлениеДДС);
					НоваяСтрока.ЭтоПоследнийПлатеж  = ЭтоДатаПогашенияТранша;
					
					ПериодОплаты 	 = ДобавитьМесяц(ПериодОплаты, ПериодичностьОплаты);
					ПериодОплатыПред = НоваяСтрока.Период;
					
				КонецЦикла;
				
			КонецЕсли;
			// -СБ. Кузнецова С.
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаПериодов.Сортировать("Период,Направление,СоставляющаяПлатежа");
	
	// Получим номинальные ставки по договору
	ТаблицаНоминальныхСтавок = ПолучитьНаборНоминальныхСтавок(ТаблицаПериодов, ДоговорКонтрагента);
	
	// В таблицу пишутся данные о произведенных расчетах по составляющим платежа.
	ТаблицаПроизведенныеРасчеты = Новый ТаблицаЗначений;
	ТаблицаПроизведенныеРасчеты.Колонки.Добавить("ИДТранша"				, Новый ОписаниеТипов("Строка"));
	ТаблицаПроизведенныеРасчеты.Колонки.Добавить("СоставляющаяПлатежа"	, Новый ОписаниеТипов("СправочникСсылка.бит_СоставляющиеПлатежейПоФинДоговорам"));
	ТаблицаПроизведенныеРасчеты.Колонки.Добавить("Период"				, Новый ОписаниеТипов("Дата"));
	ТаблицаПроизведенныеРасчеты.Колонки.Добавить("Сумма"				, Новый ОписаниеТипов("Число"));
	
	// Хранится информация о произвольных расчетных параметрах, которые могут отличаться между периодами
	// и на основании которых могут производиться расчеты 
	// платежей (ЗадолженностьПоОсновномуДолгу, ОстатокЛимита,...).
	ДопПараметры = Новый ТаблицаЗначений;
	ДопПараметры.Колонки.Добавить("ИДТранша"		, Новый ОписаниеТипов("Строка"));
	ДопПараметры.Колонки.Добавить("ИмяПараметра"	, Новый ОписаниеТипов("Строка"));
	ДопПараметры.Колонки.Добавить("ДатаИзменения"	, Новый ОписаниеТипов("Дата"));
	ДопПараметры.Колонки.Добавить("Сумма"			, Новый ОписаниеТипов("Число"));
	ДопПараметры.Колонки.Добавить("СуммаПред"		, Новый ОписаниеТипов("Число"));
	
	СвободныйОстатокЛимитаВозобновляемый = ДопПараметры.Добавить();
	СвободныйОстатокЛимитаВозобновляемый.ИмяПараметра = "СвободныйОстатокЛимитаВозобновляемый";
	СвободныйОстатокЛимитаВозобновляемый.Сумма 		  = СуммаДоговора;
	
	СвободныйОстатокЛимитаНЕВозобновляемый = ДопПараметры.Добавить();
	СвободныйОстатокЛимитаНЕВозобновляемый.ИмяПараметра = "СвободныйОстатокЛимитаНЕВозобновляемый";
	СвободныйОстатокЛимитаНЕВозобновляемый.Сумма 		= СуммаДоговора;
	
	// +СБ. Кузнецова С. 2014-11-06 
	// найдем дату получения кредита
	ДатаПолученияКредита = '00010101';
	ГруппаОсновнойДолг		 = ДеревоСоставляющих.Строки.Найти(Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.ПогашениеОсновногоДолга);
	Если ГруппаОсновнойДолг <> Неопределено Тогда
		ПараметрДатаПолученияКредита = ГруппаОсновнойДолг.Строки.Найти(ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СБ_ДатаПолученияКредита);
		Если ПараметрДатаПолученияКредита <> Неопределено Тогда
			ДатаПолученияКредита = ПараметрДатаПолученияКредита.ЗначениеПараметра;
		КонецЕсли;
	КонецЕсли;
	// -СБ. Кузнецова С.
	
	// Произведем расчеты платежей по каждому периоду.
	Для Каждого ТекущийПериод Из ТаблицаПериодов Цикл
		
		Если ТекущийПериод.ЭтоНЕРасчетныйПериод Тогда
			
			НовыйПараметр = ДопПараметры.Добавить();
			НовыйПараметр.ИмяПараметра  = "ЗадолженностьПоОсновномуДолгу";
			НовыйПараметр.ИДТранша 		= ТекущийПериод.ИД; // Рассчитывается для каждого транша отдельно.
			НовыйПараметр.ДатаИзменения = ТекущийПериод.Период;
			НовыйПараметр.Сумма 		= ТекущийПериод.Сумма;
			
			СвободныйОстатокЛимитаВозобновляемый.Сумма = СвободныйОстатокЛимитаВозобновляемый.Сумма - ТекущийПериод.Сумма;
			СвободныйОстатокЛимитаВозобновляемый.ДатаИзменения = ТекущийПериод.Период;
			
			СвободныйОстатокЛимитаНЕВозобновляемый.Сумма = СвободныйОстатокЛимитаНЕВозобновляемый.Сумма - ТекущийПериод.Сумма;
			СвободныйОстатокЛимитаНЕВозобновляемый.ДатаИзменения = ТекущийПериод.Период;
			
			ТекущийПериод.СтатьяОборотов = ПолучитьСтатьюОборотовДляПериода(ТекущийПериод.Направление, ОбщиеПараметры, ВидГрафика);
			// Сохраним для текущего периода информацию о лимитах.
			ТекущийПериод.СвободныйОстатокЛимитаВозобновляемый	 = СвободныйОстатокЛимитаВозобновляемый.Сумма;
			ТекущийПериод.СвободныйОстатокЛимитаНЕВозобновляемый = СвободныйОстатокЛимитаНЕВозобновляемый.Сумма;
			
			// Для поступлений ничего рассчитывать не надо.
			Продолжить;
		КонецЕсли;
		
		ПараметрыСоставляющей = КэшПараметровСоставляющих[ТекущийПериод.СоставляющаяПлатежа];
		
		// Найдем информацию по основной сумме долга.
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИДТранша"		, ТекущийПериод.ИД);
		СтруктураОтбора.Вставить("ИмяПараметра"	, "ЗадолженностьПоОсновномуДолгу");
		
		ДанныеПоОсновнойСуммеДолга = ДопПараметры.НайтиСтроки(СтруктураОтбора);
		
		Если ДанныеПоОсновнойСуммеДолга.Количество() = 0 Тогда
			// Ошибка, оплачиваем тот кредит, который не брали (нет информации о поступлении ДС).
			Продолжить;
		Иначе
			Если НачалоДня(ДанныеПоОсновнойСуммеДолга[0].ДатаИзменения) = НачалоДня(ТекущийПериод.Период) Тогда
				ЗадолженностьПоОсновномуДолгу = ДанныеПоОсновнойСуммеДолга[0].СуммаПред;
			Иначе
				ЗадолженностьПоОсновномуДолгу = ДанныеПоОсновнойСуммеДолга[0].Сумма;
			КонецЕсли;
		КонецЕсли;
		
		ТекущийПериод.СтатьяОборотов 						 = ПолучитьСтатьюОборотовДляПериода(ТекущийПериод.Направление, ПараметрыСоставляющей, ВидГрафика);
		ТекущийПериод.ЗадолженностьПоОсновномуДолгу 		 = ЗадолженностьПоОсновномуДолгу;
		ТекущийПериод.СвободныйОстатокЛимитаНЕВозобновляемый = СвободныйОстатокЛимитаНЕВозобновляемый.Сумма;
		
		Если НачалоДня(СвободныйОстатокЛимитаВозобновляемый.ДатаИзменения) = НачалоДня(ТекущийПериод.Период) Тогда
			ТекущийПериод.СвободныйОстатокЛимитаВозобновляемый = СвободныйОстатокЛимитаВозобновляемый.СуммаПред;
		Иначе	
			ТекущийПериод.СвободныйОстатокЛимитаВозобновляемый = СвободныйОстатокЛимитаВозобновляемый.Сумма;
		КонецЕсли;
		
		// Добавим плавающую процентную ставку
		ДанныеПоНомСтавке = ТаблицаНоминальныхСтавок.Найти(ТекущийПериод.Период, "ПериодРасчета");
		Если ДанныеПоНомСтавке = Неопределено Тогда
			ТекущийПериод.ПроцентнаяСтавка = 0;
		Иначе
			ТекущийПериод.ПроцентнаяСтавка = ДанныеПоНомСтавке.СуммаСтавок;
		КонецЕсли;
		
		// +СБ. Кузнецова С. 2014-11-06 
		// добавим дату получения кредита в параметры составляющей (нужна для составляющей "Проценты")
		ПараметрыСоставляющей.Вставить("ДатаПолученияКредита", ДатаПолученияКредита);
		// добавим коэффициент транша в параметры составляющей (нужен для составляющей "Расчет основного долга")
		ПараметрыСоставляющей.Вставить("КоэффициентТранша", КоэффициентТранша);
		// -СБ. Кузнецова С.
		
		// Рассчитаем суммы выплаты
		Результат = РассчитатьСуммуВыплаты(ПараметрыСоставляющей.АлгоритмРасчета, ПараметрыСоставляющей, ТекущийПериод);
		
		ТекущийПериод.Сумма = Результат;
		
		// Некоторые составляющие разрешено рассчитывать за период всего один раз,
		// т.к. их расчет производится на основе общих данных
		// одинаковых для любого транша.
		РасчетЗаПериодПроизведен = Ложь;
		
		Если ТекущийПериод.СоставляющаяПлатежа.ТипПлатежаПоФинДоговору = Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.КомиссияЗаНеиспользованныйЛимит Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Период"				, НачалоМесяца(ТекущийПериод.Период));
			СтруктураОтбора.Вставить("СоставляющаяПлатежа"	, ТекущийПериод.СоставляющаяПлатежа);
			
			НайденныеСтроки = ТаблицаПроизведенныеРасчеты.НайтиСтроки(СтруктураОтбора);
			РасчетЗаПериодПроизведен = НайденныеСтроки.Количество() > 0;
		КонецЕсли;
		
		Если НЕ РасчетЗаПериодПроизведен Тогда
			НоваяСтрока = ТаблицаПроизведенныеРасчеты.Добавить();
			НоваяСтрока.Период 				= НачалоМесяца(ТекущийПериод.Период);
			НоваяСтрока.ИДТранша 			= ТекущийПериод.ИД;
			НоваяСтрока.СоставляющаяПлатежа = ТекущийПериод.СоставляющаяПлатежа;
			НоваяСтрока.Сумма 				= ТекущийПериод.Сумма;
		КонецЕсли;
		
		Если РасчетЗаПериодПроизведен Тогда
			ТекущийПериод.ОтказОтВвода = Истина;
		КонецЕсли;
		
		// Уменьшим основную сумму долга на сумму выплаты.
		Если ТекущийПериод.СоставляющаяПлатежа.ТипПлатежаПоФинДоговору = Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг Тогда
			ДанныеПоОсновнойСуммеДолга[0].СуммаПред 	 = ДанныеПоОсновнойСуммеДолга[0].Сумма;
			ДанныеПоОсновнойСуммеДолга[0].Сумма 		 = ДанныеПоОсновнойСуммеДолга[0].Сумма - ТекущийПериод.Сумма;
			ДанныеПоОсновнойСуммеДолга[0].ДатаИзменения  = ТекущийПериод.Период;
			
			СвободныйОстатокЛимитаВозобновляемый.СуммаПред 		= СвободныйОстатокЛимитаВозобновляемый.Сумма;
			СвободныйОстатокЛимитаВозобновляемый.Сумма 			= СвободныйОстатокЛимитаВозобновляемый.Сумма + ТекущийПериод.Сумма;
			СвободныйОстатокЛимитаВозобновляемый.ДатаИзменения 	= ТекущийПериод.Период;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// +СБ. Кузнецова С. 2014-11-27 
Процедура СкорректироватьГрафикПлатежей(ТаблицаПериодов, ГрафикВыдачиТраншей, ДеревоСоставляющих, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПериодов.Период КАК Период,
	|	ТаблицаПериодов.СоставляющаяПлатежа КАК СоставляющаяПлатежа,
	|	ТаблицаПериодов.ИД
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ.Период) КАК Период,
	|	ВТ.ИД КАК ИДТранша
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Период >= &Период
	|	И ВТ.СоставляющаяПлатежа = ЗНАЧЕНИЕ(Справочник.бит_СоставляющиеПлатежейПоФинДоговорам.ПогашениеОсновногоДолга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ИД";
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.СБ_ДатаНачалаРасчета);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Выборка = Запрос.Выполнить().Выгрузить();
	
	ИтогПоТраншам = ГрафикВыдачиТраншей.Итог("СуммаТранша");
	КоэффициентТранша = 1 / ИтогПоТраншам;
	
	ПараметрыОсновногоДолга = ПолучитьСтруктуруПараметровРасчета(Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.ПогашениеОсновногоДолга, ДеревоСоставляющих);
	Если Не ПараметрыОсновногоДолга.Свойство("ДатаПолученияКредита") Тогда
		ПараметрыОсновногоДолга.Вставить("ДатаПолученияКредита", '00010101');
	КонецЕсли;	
	ПараметрыОсновногоДолга.Вставить("КоэффициентТранша", КоэффициентТранша);
	ПараметрыОсновногоДолга.Вставить("КорректировкаГрафика", Истина);
		
	ПараметрыПроцентов = ПолучитьСтруктуруПараметровРасчета(Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.Проценты, ДеревоСоставляющих);
	ПараметрыПроцентов.Вставить("ДатаПолученияКредита", ПараметрыОсновногоДолга.ДатаПолученияКредита);
	ПараметрыПроцентов.Вставить("КоэффициентТранша", КоэффициентТранша);
	
	СуммаПоследнейВыплаты = 0;
	Если ПараметрыОсновногоДолга.Свойство("СБ_СуммаПоследнейВыплаты") Тогда
		СуммаПоследнейВыплаты = ПараметрыОсновногоДолга.СБ_СуммаПоследнейВыплаты;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Новый Массив;
	МассивКорректируемыхСтрок = Новый Массив;
	
	ДопПараметры = Новый ТаблицаЗначений;
	ДопПараметры.Колонки.Добавить("ИДТранша"		, Новый ОписаниеТипов("Строка"));
	ДопПараметры.Колонки.Добавить("ИмяПараметра"	, Новый ОписаниеТипов("Строка"));
	ДопПараметры.Колонки.Добавить("ДатаИзменения"	, Новый ОписаниеТипов("Дата"));
	ДопПараметры.Колонки.Добавить("Сумма"			, Новый ОписаниеТипов("Число"));
	ДопПараметры.Колонки.Добавить("СуммаПред"		, Новый ОписаниеТипов("Число"));
	
	// обработка строк
	Для Каждого СтрокаГрафика Из ТаблицаПериодов Цикл
		
		Если СтрокаГрафика.ЭтоНеРасчетныйПериод Тогда
			
			НовыйПараметр = ДопПараметры.Добавить();
			НовыйПараметр.ИмяПараметра  = "ЗадолженностьПоОсновномуДолгу";
			НовыйПараметр.ИДТранша 		= СтрокаГрафика.ИД;
			НовыйПараметр.ДатаИзменения = СтрокаГрафика.Период;
			НовыйПараметр.Сумма 		= СтруктураПараметров.СБ_СуммаКорректировки * СтрокаГрафика.Сумма * КоэффициентТранша;
			
		КонецЕсли;
		
		Если СтрокаГрафика.Период < СтруктураПараметров.СБ_ДатаНачалаРасчета 
			И Не (СтрокаГрафика.Период >= СтруктураПараметров.СБ_ДатаНачалаРасчета 
			И СтрокаГрафика.СоставляющаяПлатежа <> Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.ПогашениеОсновногоДолга) 
			И Не (СтрокаГрафика.Период >= СтруктураПараметров.СБ_ДатаНачалаРасчета 
			И СтрокаГрафика.СоставляющаяПлатежа <> Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.Проценты) Тогда
			
			//МассивСтрокДляУдаления.Добавить(СтрокаГрафика);
			
		Иначе
			
			СтрокаГрафика.Сумма = - СтрокаГрафика.Сумма;
			МассивКорректируемыхСтрок.Добавить(СтрокаГрафика);
		
		КонецЕсли; 
		
		МассивСтрокДляУдаления.Добавить(СтрокаГрафика);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	бит_ГрафикиДоговоровОбороты.Период,
	|	бит_ГрафикиДоговоровОбороты.СтатьяОборотов.РасходДоход КАК Направление,
	|	бит_ГрафикиДоговоровОбороты.СоставляющаяПлатежа,
	|	-бит_ГрафикиДоговоровОбороты.СуммаСценарийОборот КАК Сумма,
	|	бит_ГрафикиДоговоровОбороты.СтатьяОборотов
	|ИЗ
	|	РегистрНакопления.бит_ГрафикиДоговоров.Обороты(&Период, , День, ДокументРегистратор = &ДокументДопУсловий) КАК бит_ГрафикиДоговоровОбороты";
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.СБ_ДатаНачалаРасчета);
	Запрос.УстановитьПараметр("ДокументДопУсловий", СтруктураПараметров.ДокументДопУсловий);
	ТаблицаСторно = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаСторно Из ТаблицаСторно Цикл
		НоваяСтрока = ТаблицаПериодов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
	КонецЦикла;
	
	ТаблицаНоминальныхСтавок = ПолучитьНаборНоминальныхСтавок(ТаблицаПериодов, СтруктураПараметров.ДоговорКонтрагента);
	Сч = 1;
	
	Если СтруктураПараметров.СБ_СуммаКорректировки <> 0 Тогда
		Для Каждого	КорректируемаяСтрока Из МассивКорректируемыхСтрок Цикл
			
			НоваяСтрока = ТаблицаПериодов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КорректируемаяСтрока);
			
			// найдем информацию по основной сумме долга
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ИДТранша"		, НоваяСтрока.ИД);
			СтруктураОтбора.Вставить("ИмяПараметра"	, "ЗадолженностьПоОсновномуДолгу");
			
			ДанныеПоОсновнойСуммеДолга = ДопПараметры.НайтиСтроки(СтруктураОтбора);
			
			Если ДанныеПоОсновнойСуммеДолга.Количество() = 0 Тогда
				// ошибка, оплачиваем тот кредит, который не брали (нет информации о поступлении ДС)
				Продолжить;
			Иначе
				Если НачалоДня(ДанныеПоОсновнойСуммеДолга[0].ДатаИзменения) = НачалоДня(НоваяСтрока.Период) Тогда
					ЗадолженностьПоОсновномуДолгу = ДанныеПоОсновнойСуммеДолга[0].СуммаПред;
				Иначе
					ЗадолженностьПоОсновномуДолгу = ДанныеПоОсновнойСуммеДолга[0].Сумма;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.ЗадолженностьПоОсновномуДолгу 		 = ЗадолженностьПоОсновномуДолгу;
			
			// добавим плавающую процентную ставку
			ДанныеПоНомСтавке = ТаблицаНоминальныхСтавок.Найти(НоваяСтрока.Период, "ПериодРасчета");
			Если ДанныеПоНомСтавке = Неопределено Тогда
				НоваяСтрока.ПроцентнаяСтавка = 0;
			Иначе
				НоваяСтрока.ПроцентнаяСтавка = ДанныеПоНомСтавке.СуммаСтавок;
			КонецЕсли;
			
			Если НоваяСтрока.СоставляющаяПлатежа = Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.ПогашениеОсновногоДолга Тогда
				ПараметрыОсновногоДолга.Вставить("ПервоначальнаяСуммаТранша", НоваяСтрока.СуммаТранша);
				НоваяСтрока.СуммаТранша = СтруктураПараметров.СБ_СуммаКорректировки * НоваяСтрока.СуммаТранша * КоэффициентТранша;
				Если ПараметрыОсновногоДолга.Свойство("ДатаПервогоПлатежа") Тогда
					ДатаПервогоПлатежа = ПараметрыОсновногоДолга.ДатаПервогоПлатежа;
				Иначе
					ДатаПервогоПлатежа = '00010101'
				КонецЕсли;
				НачальнаяДата = Макс(ДатаПервогоПлатежа, НоваяСтрока.МесяцПервогоПлатежа, СтруктураПараметров.СБ_ДатаНачалаРасчета);
				НоваяСтрока.КоличествоПериодовВыплат = РассчитатьКоличествоПериодовВыплатДляДат(НачальнаяДата, НоваяСтрока.ДатаПогашения, ПараметрыОсновногоДолга.Периодичность);
				Результат = РассчитатьСуммуВыплаты(ПараметрыОсновногоДолга.АлгоритмРасчета, ПараметрыОсновногоДолга, НоваяСтрока);
			Иначе
				Результат = РассчитатьСуммуВыплаты(ПараметрыПроцентов.АлгоритмРасчета, ПараметрыПроцентов, НоваяСтрока);
			КонецЕсли;
			
			НоваяСтрока.Сумма = Результат;
			
			// уменьшим основную сумму долга на сумму выплаты
			Если НоваяСтрока.СоставляющаяПлатежа.ТипПлатежаПоФинДоговору = Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг Тогда
				ДанныеПоОсновнойСуммеДолга[0].СуммаПред 	 = ДанныеПоОсновнойСуммеДолга[0].Сумма;
				ДанныеПоОсновнойСуммеДолга[0].Сумма 		 = ДанныеПоОсновнойСуммеДолга[0].Сумма - НоваяСтрока.Сумма;
				ДанныеПоОсновнойСуммеДолга[0].ДатаИзменения  = НоваяСтрока.Период;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
		
	Для	Каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
		ТаблицаПериодов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	
КонецПроцедуры

Функция РассчитатьКоличествоПериодовВыплатДляДат(ДатаНач, ДатаКон, Периодичность)
	
	КоличествоМесяцев = бит_Бюджетирование.РазностьДат(ДатаНач, ДатаКон, "МЕСЯЦ") + 1;
	
	// количество периодов рассчитываем исходя из периодичности основного долга
	Если Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежегодно Тогда
		КоличествоПериодов = КоличествоМесяцев / 12;
		КоличествоЦелыхПериодов = Цел(КоличествоПериодов);
		ВременныеОстатки = КоличествоМесяцев %12;
		Если ВременныеОстатки = 0 Тогда
			ДопПериод = 0;
		Иначе
			ДопПериод = 1;
		КонецЕсли;
		
		КоличествоПериодовВыплат = КоличествоЦелыхПериодов + ДопПериод;
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежеквартально Тогда
		КоличествоПериодов = КоличествоМесяцев / 3;
		КоличествоЦелыхПериодов = Цел(КоличествоПериодов);
		ВременныеОстатки = КоличествоМесяцев %3;
		Если ВременныеОстатки = 0 Тогда
			ДопПериод = 0;
		Иначе
			ДопПериод = 1;
		КонецЕсли;
		
		КоличествоПериодовВыплат = КоличествоЦелыхПериодов + ДопПериод;
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.ПриПогашении Тогда
		КоличествоПериодовВыплат = 1;
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Единовременно Тогда
		КоличествоПериодовВыплат = 1;	
	Иначе
		КоличествоПериодовВыплат = КоличествоМесяцев;
	КонецЕсли;
	
	Возврат КоличествоПериодовВыплат
	
КонецФункции
// -СБ. Кузнецова С.

Функция ПолучитьРезультатЗапросаПоГрафикуПлатежей(ТаблицаГрафика) Экспорт
	
	МассивСоставляющих = ТаблицаГрафика.ВыгрузитьКолонку("СоставляющаяПлатежа");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСоставляющих);
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2);
	
	ТаблицаГрафика.Колонки.Добавить("ОсновнойДолг", Новый ОписаниеТипов("Число", КвалификаторыЧисла));
	ТаблицаГрафика.Колонки.Добавить("Проценты", Новый ОписаниеТипов("Число", КвалификаторыЧисла));
	
	ТекстПоляВремТаб = "";
	ТекстСуммируемыеПоля = "";
	
	СтруктураДопКолонок = Новый Структура;
	
	Для Каждого ТекущаяСоставляющая Из МассивСоставляющих Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСоставляющая)
			ИЛИ ТекущаяСоставляющая.ТипПлатежаПоФинДоговору = Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг
			ИЛИ ТекущаяСоставляющая.ТипПлатежаПоФинДоговору = Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.Проценты Тогда
			
			Продолжить;
		КонецЕсли;
		
		СинонимКолонки = Строка(ТекущаяСоставляющая);
		ИмяКолонки = "К_"+СтрЗаменить(ТРег(СинонимКолонки)," ","");
		
		СтруктураДопКолонок.Вставить(ИмяКолонки, СинонимКолонки);
		
		ТаблицаГрафика.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число", КвалификаторыЧисла));
		
		ТекстПоляВремТаб = ТекстПоляВремТаб + ",
		|	"+ИмяКолонки;
		
		ТекстСуммируемыеПоля = ТекстСуммируемыеПоля + ",
		|	СУММА(ГрафикПлатежей."+ИмяКолонки+") КАК "+ИмяКолонки;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ТаблицаГрафика Цикл
		
		Если ТекущаяСтрока.СоставляющаяПлатежа.ТипПлатежаПоФинДоговору = Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг Тогда
			ТекущаяСтрока.ОсновнойДолг = ТекущаяСтрока.Сумма;
		ИначеЕсли ТекущаяСтрока.СоставляющаяПлатежа.ТипПлатежаПоФинДоговору = Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.Проценты Тогда
			ТекущаяСтрока.Проценты = ТекущаяСтрока.Сумма;
		Иначе
			СинонимКолонки = Строка(ТекущаяСтрока.СоставляющаяПлатежа);
			ИмяКолонки = "К_"+СтрЗаменить(ТРег(СинонимКолонки)," ","");
			
			Если СтруктураДопКолонок.Свойство(ИмяКолонки) Тогда
				ТекущаяСтрока[ИмяКолонки] = ТекущаяСтрока.Сумма;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикПлатежей", ТаблицаГрафика);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГрафикПлатежей.Период,
	|	ГрафикПлатежей.Сумма,
	|	ГрафикПлатежей.ЗадолженностьПоОсновномуДолгу,
	|	ГрафикПлатежей.СоставляющаяПлатежа,
	|	ГрафикПлатежей.ОсновнойДолг,
	|	ГрафикПлатежей.Проценты
	|	// %ДополнительныеПоля%
	|ПОМЕСТИТЬ ГрафикПлатежей
	|ИЗ
	|	&ГрафикПлатежей КАК ГрафикПлатежей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикПлатежей.Период,
	|	СУММА(ГрафикПлатежей.Сумма) КАК СуммаПлатежа,
	|	МАКСИМУМ(ГрафикПлатежей.ЗадолженностьПоОсновномуДолгу) КАК ЗадолженностьПоОсновномуДолгу,
	|	СУММА(ГрафикПлатежей.ОсновнойДолг) КАК ОсновнойДолг,
	|	СУММА(ГрафикПлатежей.Проценты) КАК Проценты
	|	// %ДополнительныеСуммПоля%
	|ИЗ
	|	ГрафикПлатежей КАК ГрафикПлатежей
	|ГДЕ
	|	НЕ ГрафикПлатежей.СоставляющаяПлатежа = ЗНАЧЕНИЕ(Справочник.бит_СоставляющиеПлатежейПоФинДоговорам.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикПлатежей.Период
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	ОБЩИЕ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %ДополнительныеПоля%", ТекстПоляВремТаб);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %ДополнительныеСуммПоля%", ТекстСуммируемыеПоля);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("РезультатЗапроса", РезультатЗапроса);
	СтруктураВозврата.Вставить("СтруктураДопКолонок", СтруктураДопКолонок);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтрокиПараметровСоставляющей(СоставляющаяПлатежа, ДеревоСоставляющих)
	
	СтруктураОтбора = Новый Структура;
	
	Если ТипЗнч(СоставляющаяПлатежа) = Тип("ПеречислениеСсылка.бит_ТипыПлатежейПоФинансовымДоговорам") Тогда
		СтруктураОтбора.Вставить("ТипПлатежаПоФинДоговору", СоставляющаяПлатежа);
	ИначеЕсли ТипЗнч(СоставляющаяПлатежа) = Тип("СправочникСсылка.бит_СоставляющиеПлатежейПоФинДоговорам") Тогда
        СтруктураОтбора.Вставить("СоставляющаяПлатежа", СоставляющаяПлатежа);
	ИначеЕсли ТипЗнч(СоставляющаяПлатежа) = Тип("Строка") Тогда
		СтруктураОтбора.Вставить("СоставляющаяПлатежа", Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.ПустаяСсылка());
	КонецЕсли;
	
	НайденныеСтроки = ДеревоСоставляющих.Строки.НайтиСтроки(СтруктураОтбора);

	Если НайденныеСтроки.Количество() = 0 Тогда
		НаборСтрок = Новый Структура;
	Иначе	
		НаборСтрок = НайденныеСтроки[0].Строки;
	КонецЕсли;
	
	Возврат НаборСтрок;
	
КонецФункции

// Функция помещает параметры составляющей платежа в структуру.
// 
// Параметры:
// 	ПараметрыСоставляющей - КоллекцияСтрокДереваЗначений.
// 	ОбщиеПараметры - Структура, Неопределено - общие для всех составляющих параметры.
// 
// Возвращаемое значение:
// 	СтруктураПараметров - структура.
// 
Функция ПреобразоватьПараметрыСоставляющейВСтруктуру(ПараметрыСоставляющей, ОбщиеПараметры=Неопределено)
	
	Если ОбщиеПараметры = Неопределено Тогда
		ОбщиеПараметры = Новый Структура;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
										
	// Добавим обязательные параметры, на которые приходится опираться программно.
	СтруктураПараметров.Вставить("АлгоритмРасчета");
	СтруктураПараметров.Вставить("ТипПроцентнойСтавки"	, Перечисления.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Фиксированная);
	СтруктураПараметров.Вставить("ПроцентнаяСтавка"		, 0);
	СтруктураПараметров.Вставить("Периодичность");
	СтруктураПараметров.Вставить("ДатаПервогоПлатежа"				, Дата("00010101"));
	СтруктураПараметров.Вставить("СтатьяОборотовБДДСПоступление"	, Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	СтруктураПараметров.Вставить("СтатьяОборотовБДДСРасходование"	, Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	СтруктураПараметров.Вставить("СтатьяОборотовБДРПоступление"		, Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	СтруктураПараметров.Вставить("СтатьяОборотовБДРРасходование"	, Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	
	// Сначала заполним общие параметры
	Для Каждого ТекущийПараметр Из ОбщиеПараметры Цикл
		
		СтруктураПараметров.Вставить(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
		
	КонецЦикла;
	
	// Заполним параметрами текущей составляющей, при совпадении с общими параметрами, приоритет у текущей составляющей.
	Для Каждого ТекущийПараметр Из ПараметрыСоставляющей Цикл
		
		СтруктураПараметров.Вставить(ТекущийПараметр.Параметр.Код, ТекущийПараметр.ЗначениеПараметра);
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция приводит переданную дату к нужному числу в месяце.
// 
// Параметры:
// 	Период - Дата - дата, для которой надо указать точный день.
// 	ДатаПлатежа - Дата - дата, из которой берется номер дня в месяце.
// 
// Возвращаемое значение:
// 	ВозвращаемаяДата - Дата.
// 
Функция УточнитьДеньПериодаОплаты(Период, ДатаПлатежа)
	
	ВозвращаемаяДата = Период;
	
	Если ЗначениеЗаполнено(ДатаПлатежа) Тогда 
		
		// Получим день в который должна производиться оплата.
		ДеньДатыПлатежа = День(ДатаПлатежа);
		
		// Получим количество дней в месяце
		ПоследнийДеньМесяца = День(КонецМесяца(Период));
		
		Если ДеньДатыПлатежа > ПоследнийДеньМесяца Тогда
			ДеньДатыПлатежа = ПоследнийДеньМесяца;
		КонецЕсли;
		
		ВозвращаемаяДата = Дата(Год(Период), Месяц(Период), ДеньДатыПлатежа);
		
	КонецЕсли;
	
	Возврат ВозвращаемаяДата;
	
КонецФункции

// Функция формирует таблицу номинальных ставок по договору контрагента.
// 
// Параметры:
// 	ТаблицаПериодов    - ТаблицаЗначений 
// 							(таблица содержит периоды для которых необходимо получить номинальные ставки).
// 	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов (
// 							(договор для которого берем ставки).
// 
// Возвращаемое значение:
// 	ТаблицаСтавок - ТаблицаЗначений - содержит ставки для переданных периодов.
// 
Функция ПолучитьНаборНоминальныхСтавок(ТаблицаПериодов, ДоговорКонтрагента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПериодыРасчета"	  , ТаблицаПериодов);
	// +СБ. Кузнецова С. 2014-11-28 
	//Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Если ЗначениеЗаполнено(ДоговорКонтрагента.бит_ПроектДоговора) Тогда
		ЗначениеОтбора = ДоговорКонтрагента.бит_ПроектДоговора;
	Иначе
		ЗначениеОтбора = ДоговорКонтрагента;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ЗначениеОтбора);
	// -СБ. Кузнецова С.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПериодыРасчета.Период КАК ПериодРасчета
	|ПОМЕСТИТЬ ПериодыРасчета
	|ИЗ
	|	&ПериодыРасчета КАК ПериодыРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_му_НоминальныеСтавки.Период,
	|	бит_му_НоминальныеСтавки.ДоговорКонтрагента,
	|	бит_му_НоминальныеСтавки.Ставка,
	|	бит_му_НоминальныеСтавки.ДополнительнаяСоставляющая
	|ПОМЕСТИТЬ НоминальныеСтавки
	|ИЗ
	|	РегистрСведений.бит_му_НоминальныеСтавки КАК бит_му_НоминальныеСтавки
	|ГДЕ
	|	бит_му_НоминальныеСтавки.ДоговорКонтрагента = &ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_му_ДополнительныеСтавки.Период,
	|	бит_му_ДополнительныеСтавки.ВидСтавки,
	|	бит_му_ДополнительныеСтавки.Ставка
	|ПОМЕСТИТЬ ДополнительныеСтавки
	|ИЗ
	|	РегистрСведений.бит_му_ДополнительныеСтавки КАК бит_му_ДополнительныеСтавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРасчета.ПериодРасчета,
	|	МАКСИМУМ(НоминальныеСтавки.Период) КАК Период
	|ПОМЕСТИТЬ ПериодыОсновнойСтавки
	|ИЗ
	|	ПериодыРасчета КАК ПериодыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоминальныеСтавки КАК НоминальныеСтавки
	|		ПО ПериодыРасчета.ПериодРасчета >= НоминальныеСтавки.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыРасчета.ПериодРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыОсновнойСтавки.ПериодРасчета,
	|	ПериодыОсновнойСтавки.Период,
	|	НоминальныеСтавки.Ставка,
	|	НоминальныеСтавки.ДополнительнаяСоставляющая
	|ПОМЕСТИТЬ ДанныеОсновнойСтавки
	|ИЗ
	|	ПериодыОсновнойСтавки КАК ПериодыОсновнойСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоминальныеСтавки КАК НоминальныеСтавки
	|		ПО ПериодыОсновнойСтавки.Период = НоминальныеСтавки.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОсновнойСтавки.ПериодРасчета,
	|	МАКСИМУМ(ДополнительныеСтавки.Период) КАК Период,
	|	ДополнительныеСтавки.ВидСтавки
	|ПОМЕСТИТЬ ПериодыДополнительнойСтавки
	|ИЗ
	|	ДанныеОсновнойСтавки КАК ДанныеОсновнойСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДополнительныеСтавки КАК ДополнительныеСтавки
	|		ПО ДанныеОсновнойСтавки.ПериодРасчета >= ДополнительныеСтавки.Период
	|			И ДанныеОсновнойСтавки.ДополнительнаяСоставляющая = ДополнительныеСтавки.ВидСтавки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОсновнойСтавки.ПериодРасчета,
	|	ДополнительныеСтавки.ВидСтавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОсновнойСтавки.ПериодРасчета,
	|	ДанныеОсновнойСтавки.Период КАК ПериодОсновнойСтавки,
	|	ЕСТЬNULL(ДанныеОсновнойСтавки.Ставка, 0) КАК ОсновнаяСтавка,
	|	ДанныеОсновнойСтавки.ДополнительнаяСоставляющая,
	|	ПериодыДополнительнойСтавки.Период КАК ПериодДополнительнойСтавки,
	|	ДополнительныеСтавки.ВидСтавки,
	|	ЕСТЬNULL(ДополнительныеСтавки.Ставка, 0) КАК ДополнительнаяСтавка,
	|	ЕСТЬNULL(ДанныеОсновнойСтавки.Ставка, 0) + ЕСТЬNULL(ДополнительныеСтавки.Ставка, 0) КАК СуммаСтавок
	|ИЗ
	|	ДанныеОсновнойСтавки КАК ДанныеОсновнойСтавки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыДополнительнойСтавки КАК ПериодыДополнительнойСтавки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДополнительныеСтавки КАК ДополнительныеСтавки
	|			ПО ПериодыДополнительнойСтавки.Период = ДополнительныеСтавки.Период
	|				И ПериодыДополнительнойСтавки.ВидСтавки = ДополнительныеСтавки.ВидСтавки
	|		ПО ДанныеОсновнойСтавки.ПериодРасчета = ПериодыДополнительнойСтавки.ПериодРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыДополнительнойСтавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеОсновнойСтавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыОсновнойСтавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДополнительныеСтавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НоминальныеСтавки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыРасчета";
	
	Запрос.Текст = ТекстЗапроса;
	
	
	Результат = Запрос.Выполнить();
	
	ТаблицаСтавок = Результат.Выгрузить();
	
	Возврат ТаблицаСтавок;
	
КонецФункции // ПолучитьНаборНоминальныхСтавок()

// Функция определяет направление платежа.
// 
// Параметры:
// 	ЭтоНеРасчетныйПериод - булево 
// 							(Истина - определяем направление платежа для строки введенной в график выдачи траншей).
// 	НаправлениеДДС 		 - Строка 
// 							("Выдача", "Получение").
// 
// Возвращаемое значение:
// 	НаправлениеПлатежа - Неопределено, ПеречислениеСсылка.бит_РасходДоход.
// 
Функция ПолучитьНаправлениеПлатежа(ЭтоНеРасчетныйПериод, НаправлениеДДС)
	
	НаправлениеПлатежа = Неопределено;
	
	Если НаправлениеДДС = "Выдача" Тогда
		
		Если ЭтоНеРасчетныйПериод Тогда
			НаправлениеПлатежа = Перечисления.бит_РасходДоход.Расходование;
		Иначе
			НаправлениеПлатежа = Перечисления.бит_РасходДоход.Поступление;
		КонецЕсли;
		
	Иначе
		
		Если ЭтоНеРасчетныйПериод Тогда
			НаправлениеПлатежа = Перечисления.бит_РасходДоход.Поступление;
		Иначе
			НаправлениеПлатежа = Перечисления.бит_РасходДоход.Расходование;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаправлениеПлатежа;
	
КонецФункции

// Функция определяет статью оборотов для используемого вида графика и направления платежа.
// 
// Параметры:
// 	НаправлениеПлатежа 	  - ПеречислениеСсылка.бит_РасходДоход.
// 	ПараметрыСоставляющей - Структура 
// 							(параметры составляющей платежа откуда будем брать значение статьи оборотов).
// 	ВидГрафика 			  - ПеречислениеСсылка.бит_ТипыСтатейОборотов. 
// 
// Возвращаемое значение:
// 	СтатьяОборотовПериода - СправочникСсылка.бит_СтатьиОборотов.
// 
Функция ПолучитьСтатьюОборотовДляПериода(НаправлениеПлатежа, ПараметрыСоставляющей, ВидГрафика)
	
	СтатьяОборотовПериода = Неопределено;
	
	Если ВидГрафика = Перечисления.бит_ТипыСтатейОборотов.БДР Тогда
		
		Если НаправлениеПлатежа = Перечисления.бит_РасходДоход.Поступление Тогда 
			СтатьяОборотовПериода = ПараметрыСоставляющей.СтатьяОборотовБДРПоступление;
		Иначе
			СтатьяОборотовПериода = ПараметрыСоставляющей.СтатьяОборотовБДРРасходование;
		КонецЕсли;
		
	Иначе
		
		Если НаправлениеПлатежа = Перечисления.бит_РасходДоход.Поступление Тогда 
			СтатьяОборотовПериода = ПараметрыСоставляющей.СтатьяОборотовБДДСПоступление;
		Иначе
			СтатьяОборотовПериода = ПараметрыСоставляющей.СтатьяОборотовБДДСРасходование;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатьяОборотовПериода;
	
КонецФункции

// Функция выполняет расчет платежа.
// 
// Параметры:
// 	АлгоритмРасчета 	 - СправочникСсылка.бит_ПользовательскиеФункции
// 					  		ПеречислениеСсылка.бит_АлгоритмыРасчетовПоФинДоговорам.
// 	ПараметрыПлатежа     - Структура (параметры составляющей платежа).
// 	ДанныеПериодаРасчета - СтрокаТаблицыЗначений 
// 							(строка для которой производится расчет платежа,
// 							 содержит информацию используемую при расчете).
// 
// Возвращаемое значение:
// 	Результат - Число.
// 
Функция РассчитатьСуммуВыплаты(АлгоритмРасчета, ПараметрыПлатежа, ДанныеПериодаРасчета)
	
	Результат = 0;
	
	Если НЕ ЗначениеЗаполнено(АлгоритмРасчета) Тогда
		Результат = 0;
	ИначеЕсли ТипЗнч(АлгоритмРасчета) = Тип("СправочникСсылка.бит_ПользовательскиеФункции") Тогда
		
		// +СБ. Кузнецова С. 2014-11-20 
		Если ЗначениеЗаполнено(ДанныеПериодаРасчета.СБ_ПроцентнаяСтавкаПоТраншу) И ПараметрыПлатежа.Свойство("ПроцентнаяСтавка") Тогда
			ПараметрыПлатежа.ПроцентнаяСтавка = ДанныеПериодаРасчета.СБ_ПроцентнаяСтавкаПоТраншу;
		// +СБ. Кузнецова С. 2014-11-26 
		ИначеЕсли ПараметрыПлатежа.ТипПроцентнойСтавки = Перечисления.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Плавающая Тогда
			ПараметрыПлатежа.ПроцентнаяСтавка = ДанныеПериодаРасчета.ПроцентнаяСтавка;
		// -СБ. Кузнецова С.
		КонецЕсли;
		// -СБ. Кузнецова С.
		
		Результат = бит_ОбщегоНазначения.ВыполнитьПользовательскуюФункцию(АлгоритмРасчета, ПараметрыПлатежа, ДанныеПериодаРасчета);
		
		Если НЕ ТипЗнч(Результат) = Тип("Число") Тогда
			Результат = 0;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(АлгоритмРасчета) = Тип("ПеречислениеСсылка.бит_АлгоритмыРасчетовПоФинДоговорам") Тогда
		
		ЕстьОшибки = Ложь;
		
		// Получим процентную ставку используемую при расчете суммы процентов по кредиту
		// процентную ставку получаем как месячную ставку 
		// умноженную на фактическое количество месяцев между платежами.
		КоличествоМесяцев = бит_Бюджетирование.РазностьДат(ДанныеПериодаРасчета.ПериодОплатыПред, ДанныеПериодаРасчета.Период, "МЕСЯЦ");
			
		Если ПараметрыПлатежа.ТипПроцентнойСтавки = Перечисления.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Плавающая Тогда
			ГодоваяПроцентнаяСтавка = ДанныеПериодаРасчета.ПроцентнаяСтавка;
			// +СБ. Кузнецова С. 2014-11-06
		ИначеЕсли ЗначениеЗаполнено(ДанныеПериодаРасчета.СБ_ПроцентнаяСтавкаПоТраншу) И АлгоритмРасчета = Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетСуммыПроцентов Тогда
			ГодоваяПроцентнаяСтавка = ДанныеПериодаРасчета.СБ_ПроцентнаяСтавкаПоТраншу;
		// -СБ. Кузнецова С.
		Иначе
			ГодоваяПроцентнаяСтавка = ПараметрыПлатежа.ПроцентнаяСтавка;
		КонецЕсли;
		
		ПроцентнаяСтавка = (ГодоваяПроцентнаяСтавка / 100 / 12) * КоличествоМесяцев;
		
		Если АлгоритмРасчета = Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетСуммыОсновногоДолгаДифференцированный Тогда
			
			Если ДанныеПериодаРасчета.КоличествоПериодовВыплат = 0 Тогда
				ТекстСообщения = НСтр("ru='Ошибка при расчете выплаты по составляющей ""%1%"" за период ""%2%"": Не указано количество периодов выплат!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ДанныеПериодаРасчета.СоставляющаяПлатежа, ДанныеПериодаРасчета.Период);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЕстьОшибки);
			КонецЕсли;
			
			Если НЕ ЕстьОшибки Тогда
				// +СБ. Кузнецова С. 2014-11-05 
				//Результат = ДанныеПериодаРасчета.СуммаТранша / ДанныеПериодаРасчета.КоличествоПериодовВыплат;
				СуммаТранша = ДанныеПериодаРасчета.СуммаТранша;
				КоличествоПериодовВыплат = ДанныеПериодаРасчета.КоличествоПериодовВыплат;
				
				СуммаПоследнейВыплаты = 0;
				Если ПараметрыПлатежа.Свойство("СБ_СуммаПоследнейВыплаты") Тогда
					СуммаПоследнейВыплаты = ПараметрыПлатежа.СБ_СуммаПоследнейВыплаты;
					Если СуммаПоследнейВыплаты <> 0 Тогда
						КоличествоПериодовВыплат = ДанныеПериодаРасчета.КоличествоПериодовВыплат - 1;
						Если ПараметрыПлатежа.Свойство("КорректировкаГрафика") И ПараметрыПлатежа.КорректировкаГрафика Тогда
							СуммаТранша = ДанныеПериодаРасчета.СуммаТранша - СуммаПоследнейВыплаты * ПараметрыПлатежа.ПервоначальнаяСуммаТранша * ПараметрыПлатежа.КоэффициентТранша;
						Иначе
							СуммаТранша = ДанныеПериодаРасчета.СуммаТранша - СуммаПоследнейВыплаты * ДанныеПериодаРасчета.СуммаТранша * ПараметрыПлатежа.КоэффициентТранша;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ДанныеПериодаРасчета.ЭтоПоследнийПлатеж И СуммаПоследнейВыплаты <> 0 Тогда
					Если ПараметрыПлатежа.Свойство("КорректировкаГрафика") И ПараметрыПлатежа.КорректировкаГрафика Тогда
						Результат = СуммаПоследнейВыплаты * ПараметрыПлатежа.ПервоначальнаяСуммаТранша * ПараметрыПлатежа.КоэффициентТранша;
					Иначе
						Результат = СуммаПоследнейВыплаты * ДанныеПериодаРасчета.СуммаТранша * ПараметрыПлатежа.КоэффициентТранша;
					КонецЕсли;	
				Иначе
					Результат = СуммаТранша / КоличествоПериодовВыплат;
				КонецЕсли;
				// -СБ. Кузнецова С.
				
				Если ДанныеПериодаРасчета.ЭтоПоследнийПлатеж Тогда
					Отклонение = бит_ОбщегоНазначения.МодульЧисла(Результат - ДанныеПериодаРасчета.ЗадолженностьПоОсновномуДолгу); 
					// Отклонение меньше 10 будем считать ошибкой округления.
					Результат = ?(Отклонение>10, Результат, ДанныеПериодаРасчета.ЗадолженностьПоОсновномуДолгу);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли АлгоритмРасчета = Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетСуммыОсновногоДолгаАннуитетный Тогда	
			
			Если ПроцентнаяСтавка = 0 Тогда
				ТекстСообщения = НСтр("ru='Ошибка при расчете выплаты по составляющей ""%1%"" за период ""%2%"": Не указана процентная ставка!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ДанныеПериодаРасчета.СоставляющаяПлатежа, ДанныеПериодаРасчета.Период);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЕстьОшибки);
			КонецЕсли;
			
			Если ДанныеПериодаРасчета.КоличествоПериодовВыплат = 0 Тогда
				ТекстСообщения = НСтр("ru='Ошибка при расчете выплаты по составляющей ""%1%"" за период ""%2%"": Не указано количество периодов выплат!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ДанныеПериодаРасчета.СоставляющаяПлатежа, ДанныеПериодаРасчета.Период);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЕстьОшибки);
			КонецЕсли;
			
			Если НЕ ЕстьОшибки Тогда
				// +СБ. Кузнецова С. 2014-11-05 
				СуммаПоследнейВыплаты = 0;
				Если ПараметрыПлатежа.Свойство("СБ_СуммаПоследнейВыплаты") Тогда
					СуммаПоследнейВыплаты = ПараметрыПлатежа.СБ_СуммаПоследнейВыплаты;
					Если СуммаПоследнейВыплаты <> 0 Тогда
						ДанныеПериодаРасчета.КоличествоПериодовВыплат = ДанныеПериодаРасчета.КоличествоПериодовВыплат - 1;
						ДанныеПериодаРасчета.СуммаТранша = ДанныеПериодаРасчета.СуммаТранша - СуммаПоследнейВыплаты;
					КонецЕсли;
				КонецЕсли;
				
				Если ДанныеПериодаРасчета.ЭтоПоследнийПлатеж 
					И СуммаПоследнейВыплаты <> 0
					Тогда
					Результат = СуммаПоследнейВыплаты;
				Иначе
				// -СБ. Кузнецова С.
				ПС = ПроцентнаяСтавка;
				
				Знаменатель = Pow(1+ПС,ДанныеПериодаРасчета.КоличествоПериодовВыплат)-1;
				
				ПлатежЗаПериод = ДанныеПериодаРасчета.СуммаТранша * (ПС + (ПС / Знаменатель));
				
				ПроцентыПоКредиту = ДанныеПериодаРасчета.ЗадолженностьПоОсновномуДолгу * ПС;
				
				Результат = ПлатежЗаПериод - ПроцентыПоКредиту;
				// +СБ. Кузнецова С. 2014-11-05 
				КонецЕсли;
				// -СБ. Кузнецова С.
				
				Если ДанныеПериодаРасчета.ЭтоПоследнийПлатеж Тогда
					Отклонение = бит_ОбщегоНазначения.МодульЧисла(Результат - ДанныеПериодаРасчета.ЗадолженностьПоОсновномуДолгу); 
					// Отклонение меньше 10 будем считать ошибкой округления.
					Результат = ?(Отклонение>10, Результат, ДанныеПериодаРасчета.ЗадолженностьПоОсновномуДолгу);
				КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли АлгоритмРасчета = Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетСуммыПроцентов Тогда
			
			// +СБ. Кузнецова С. 2014-11-06 
			Если ДанныеПериодаРасчета.Период = ДанныеПериодаРасчета.МесяцПервогоПлатежа
				И НачалоМесяца(ДанныеПериодаРасчета.ДатаТранша) = НачалоМесяца(ПараметрыПлатежа.ДатаПолученияКредита)
				И ПараметрыПлатежа.ДатаПолученияКредита <> НачалоМесяца(ПараметрыПлатежа.ДатаПолученияКредита) Тогда
				// расчет процентов, исходя из неполного первого месяца
				
				КоличествоДней = День(КонецМесяца(ПараметрыПлатежа.ДатаПолученияКредита)) - День(ПараметрыПлатежа.ДатаПолученияКредита) + 1;
				ПроцентнаяСтавка = (ГодоваяПроцентнаяСтавка / 100 / 365) * КоличествоДней;
				
			ИначеЕсли ДанныеПериодаРасчета.Период = НачалоМесяца(ДанныеПериодаРасчета.ДатаПогашения)
				И ДанныеПериодаРасчета.ДатаПогашения <> КонецМесяца(ДанныеПериодаРасчета.ДатаПогашения) Тогда
				// расчет процентов, исходя из неполного последнего месяца
				
				ПроцентнаяСтавка = (ГодоваяПроцентнаяСтавка / 100 / 365) * День(ДанныеПериодаРасчета.ДатаПогашения);
				
			КонецЕсли;
			// -СБ. Кузнецова С.
			
			Результат = ДанныеПериодаРасчета.ЗадолженностьПоОсновномуДолгу * ПроцентнаяСтавка;
			
		ИначеЕсли АлгоритмРасчета = Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетКомиссииЗаВыдачу Тогда
			
			Результат = ДанныеПериодаРасчета.СуммаТранша * ПараметрыПлатежа.ПроцентнаяСтавка / 100;
			
		ИначеЕсли АлгоритмРасчета = Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетКомиссииЗаНеиспользованныйЛимитВозобновляемая Тогда
			
			Результат = ДанныеПериодаРасчета.СвободныйОстатокЛимитаВозобновляемый * ПараметрыПлатежа.ПроцентнаяСтавка / 100;
			
		ИначеЕсли АлгоритмРасчета = Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам.РасчетКомиссииЗаНеиспользованныйЛимитВозобновляемая Тогда
			
			Результат = ДанныеПериодаРасчета.СвободныйОстатокЛимитаНЕВозобновляемый * ПараметрыПлатежа.ПроцентнаяСтавка / 100;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция определяет дату первого платежа и периодичность выплат по составляющей.
// 
// Параметры:
// 	Периодичность - ПеречислениеСсылка.бит_ПериодичностьВыплатПоФинансовымДоговорам.
// 	ДатаТранша - Дата - дата поступления транша.
// 	ДатаПогашения - Дата - предполагаемая дата погашения транша.
// 	МесяцПервогоПлатежа - Дата- предполагаемый месяц первого платежа.
// 	ПервыйПлатежСоставляющей - Дата - дата первого платежа из параметров составляющей платежа.
// 
Функция ПолучитьПараметрыПериодичности(Периодичность, ДатаТранша, ДатаПогашения, МесяцПервогоПлатежа, ПервыйПлатежСоставляющей)
	
	ПараметрыПериодичности = Новый Структура("ПериодичностьОплаты, ПериодОплаты");
	
	ПериодичностьОплаты = Неопределено;
	ПериодОплаты		= Макс(НачалоМесяца(МесяцПервогоПлатежа), НачалоМесяца(ПервыйПлатежСоставляющей));
	
	Если Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Произвольно Тогда
		// Начисления производятся самостоятельно пользователем.
		ПериодичностьОплаты = Неопределено;
		
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.ПриПогашении Тогда	
		// Начисления производятся в месяц окончания выплат по кредиту.
		ПериодичностьОплаты = -1;
		ПериодОплаты = НачалоМесяца(ДатаПогашения);
		
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежемесячно Тогда
		// Начисления производятся каждый месяц начиная с месяца первого платежа.
		ПериодичностьОплаты = 1;
		
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Единовременно Тогда
		// Начисления производятся на дату первого платежа по кредиту.
		ПериодичностьОплаты = 0;
		
		Если ПервыйПлатежСоставляющей >= ДатаТранша
			И ПервыйПлатежСоставляющей <= ДатаПогашения Тогда
			
			ПериодОплаты = НачалоМесяца(ПервыйПлатежСоставляющей);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежеквартально Тогда
		// Начисления производятся каждые 3 месяца начиная с месяца даты первого платежа.
		ПериодичностьОплаты = 3;
		
	ИначеЕсли Периодичность = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежегодно Тогда	
		// Начисления производятся каждый год начиная с года даты первого платежа.
		ПериодичностьОплаты = 12;
		
	Иначе
		ПериодичностьОплаты = 1;
	КонецЕсли;
	
	ПараметрыПериодичности.ПериодичностьОплаты = ПериодичностьОплаты;
	ПараметрыПериодичности.ПериодОплаты		   = ПериодОплаты;
	
	Возврат ПараметрыПериодичности;
	
КонецФункции

// Функция формирует печатную форму заявки на оплату.
// 
// Параметры:
//  ИмяМакета			   - Строка
//  Параметры  		   - Структура.
//  СчитатьСуммуПоПлатежам - Булево. По умолчанию Ложь.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент.
// 
Функция СформироватьПечатнуюФормуГрафикаПлатежей(ИмяМакета, Параметры)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам_ГрафикПлатежей";
	
	РассчитыватьЗадолженность = ?(Параметры.Свойство("РассчитыватьЗадолженность"), Параметры.РассчитыватьЗадолженность, Ложь);
	СуммаДолга				  = ?(Параметры.Свойство("СуммаДолга"), Параметры.СуммаДолга, 0);
	КоличествоПериодовВыплат  = ?(Параметры.Свойство("КоличествоПериодовВыплат"), Параметры.КоличествоПериодовВыплат, 0);
	ПроцентнаяСтавка		  = ?(Параметры.Свойство("ПроцентнаяСтавка"), Параметры.ПроцентнаяСтавка, 0);
	СтруктураДопКолонок		  = ?(Параметры.Свойство("СтруктураДопКолонок"), Параметры.СтруктураДопКолонок, Новый Структура);
	
	РезультатЗапроса = Параметры.РезультатЗапроса;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		// Получаем макет и области.
		Макет = ПолучитьМакет(ИмяМакета);
		
		// Получаем области.
		ШапкаОсновная	  = Макет.ПолучитьОбласть("Шапка|ОсновнаяТаблица");
		ШапкаСуммаПлатежа = Макет.ПолучитьОбласть("Шапка|СуммаПлатежа");
		ШапкаДопКолонка	  = Макет.ПолучитьОбласть("Шапка|ДопКолонка");
		
		ШапкаТаблицыОсновная	= Макет.ПолучитьОбласть("ШапкаТаблицы|ОсновнаяТаблица");
		ШапкаТаблицыСуммаПлатежа= Макет.ПолучитьОбласть("ШапкаТаблицы|СуммаПлатежа");
		ШапкаТаблицыДопКолонка	= Макет.ПолучитьОбласть("ШапкаТаблицы|ДопКолонка");
		
		СтрокаТаблицыОсновная	  = Макет.ПолучитьОбласть("СтрокаТаблицы|ОсновнаяТаблица");
		СтрокаТаблицыСуммаПлатежа = Макет.ПолучитьОбласть("СтрокаТаблицы|СуммаПлатежа");
		СтрокаТаблицыДопКолонка   = Макет.ПолучитьОбласть("СтрокаТаблицы|ДопКолонка");
		
		ИтогиТаблицыОсновная     = Макет.ПолучитьОбласть("ИтогиТаблицы|ОсновнаяТаблица");
		ИтогиТаблицыСуммаПлатежа = Макет.ПолучитьОбласть("ИтогиТаблицы|СуммаПлатежа");
		ИтогиТаблицыДопКолонка   = Макет.ПолучитьОбласть("ИтогиТаблицы|ДопКолонка");
		
		// Вывод шапки
		ШапкаОсновная.Параметры.ШапкаСуммаДолга			= СуммаДолга;
		ШапкаОсновная.Параметры.ШапкаКоличествоПериодов = КоличествоПериодовВыплат;
		ШапкаОсновная.Параметры.ШапкаПроцентнаяСтавка	= ПроцентнаяСтавка;
		
		ТабличныйДокумент.Вывести(ШапкаОсновная);
		
		Для Каждого ДопКолонка Из СтруктураДопКолонок Цикл
			ТабличныйДокумент.Присоединить(ШапкаДопКолонка);
		КонецЦикла;
		
		ТабличныйДокумент.Присоединить(ШапкаСуммаПлатежа);
		
		// Вывод шапки таблицы
		ТабличныйДокумент.Вывести(ШапкаТаблицыОсновная);
		
		Для Каждого ДопКолонка Из СтруктураДопКолонок Цикл
			ШапкаТаблицыДопКолонка.Параметры.ЗаголовокДопКолонка = ДопКолонка.Значение;
			
			ТабличныйДокумент.Присоединить(ШапкаТаблицыДопКолонка);
		КонецЦикла;
		
		ТабличныйДокумент.Присоединить(ШапкаТаблицыСуммаПлатежа);
		
		// Вывод результатов
		ОбщиеИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбщиеИтоги.Следующий();
		
		ВыборкаИзЗапроса = ОбщиеИтоги.Выбрать();
		
		НомерПП = 0;
		ОстатокЗадолженности = СуммаДолга;
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл 
			
			НомерПП = НомерПП + 1;
			
			СтрокаТаблицыОсновная.Параметры.НомерПлатежа 		= НомерПП;
			СтрокаТаблицыОсновная.Параметры.ДатаПлатежа 		= ВыборкаИзЗапроса.Период;
			СтрокаТаблицыОсновная.Параметры.НачисленныеПроценты = ВыборкаИзЗапроса.Проценты;
			СтрокаТаблицыОсновная.Параметры.ОсновнойДолг 		= ВыборкаИзЗапроса.ОсновнойДолг;
			
			Если РассчитыватьЗадолженность Тогда
				СтрокаТаблицыОсновная.Параметры.Задолженность = ОстатокЗадолженности;
			Иначе
				СтрокаТаблицыОсновная.Параметры.Задолженность = ВыборкаИзЗапроса.ЗадолженностьПоОсновномуДолгу;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(СтрокаТаблицыОсновная);
			
			Для Каждого ДопКолонка Из СтруктураДопКолонок Цикл
				СтрокаТаблицыДопКолонка.Параметры.ЗначениеДопКолонка = ВыборкаИзЗапроса[ДопКолонка.Ключ];
				ТабличныйДокумент.Присоединить(СтрокаТаблицыДопКолонка);
			КонецЦикла; 
			
			СтрокаТаблицыСуммаПлатежа.Параметры.СуммаПлатежа = ВыборкаИзЗапроса.СуммаПлатежа;
			
			ТабличныйДокумент.Присоединить(СтрокаТаблицыСуммаПлатежа);
			
			ОстатокЗадолженности = ОстатокЗадолженности - ВыборкаИзЗапроса.ОсновнойДолг;
			
		КонецЦикла;
		
		// Вывод итогов
		ИтогиТаблицыОсновная.Параметры.ИтогоЗадолженность		= ОстатокЗадолженности;
		ИтогиТаблицыОсновная.Параметры.ИтогоНачисленныеПроценты = ОбщиеИтоги.Проценты;
		ИтогиТаблицыОсновная.Параметры.ИтогоОсновнойДолг		= ОбщиеИтоги.ОсновнойДолг;
		ТабличныйДокумент.Вывести(ИтогиТаблицыОсновная);
		
		Для Каждого ДопКолонка Из СтруктураДопКолонок Цикл
			ИтогиТаблицыДопКолонка.Параметры.ИтогоЗначениеДопКолонка = ОбщиеИтоги[ДопКолонка.Ключ];
			ТабличныйДокумент.Присоединить(ИтогиТаблицыДопКолонка);
		КонецЦикла;
		
		ИтогиТаблицыСуммаПлатежа.Параметры.ИтогоСуммаПлатежа = ОбщиеИтоги.СуммаПлатежа;
		ТабличныйДокумент.Присоединить(ИтогиТаблицыСуммаПлатежа);
		
	КонецЕсли; // Если Не РезультатЗапроса.Пустой() Тогда
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуЗаявкиНаОплату()

#КонецОбласти

#КонецЕсли
