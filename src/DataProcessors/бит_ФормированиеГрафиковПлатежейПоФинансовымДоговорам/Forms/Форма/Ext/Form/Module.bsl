
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	МетаданныеОбъекта = Метаданные.Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам;
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим настройки программы
	СтруктураПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(Параметры.Документ) Тогда
		СтруктураПараметров.Вставить("Организация", Параметры.Документ.Организация);
		СтруктураПараметров.Вставить("ЦФО"		  , Параметры.Документ.ЦФО);
		ДатаНастроек = Параметры.Документ.Дата;
	Иначе
		Если ТипЗнч(Параметры.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СтруктураПараметров.Вставить("Организация", Параметры.ДоговорКонтрагента.Организация);
			СтруктураПараметров.Вставить("ЦФО"		  , Параметры.ДоговорКонтрагента.бит_ЦФО);
		ИначеЕсли ТипЗнч(Параметры.ДоговорКонтрагента) = Тип("ДокументСсылка.бит_ПроектДоговора") Тогда
			СтруктураПараметров.Вставить("Организация", Параметры.ДоговорКонтрагента.Организация);
			СтруктураПараметров.Вставить("ЦФО"		  , Параметры.ДоговорКонтрагента.ЦФО);
		КонецЕсли;
		ДатаНастроек = ТекущаяДатаСеанса();
	КонецЕсли;
	
	мНастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ДатаНастроек,,СтруктураПараметров,"Ошибки");
	
	ИмяНастройкиКалендарь = ПланыВидовХарактеристик.бит_НастройкиПрограммы.Календарь;
	Объект.Календарь = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы, ИмяНастройкиКалендарь);
	
	Объект.ДоговорКонтрагента= Параметры.ДоговорКонтрагента;
	Объект.НаправлениеДДС	 = Параметры.НаправлениеДДС;
	Объект.ВидГрафика		 = Параметры.ВидГрафика;
	Объект.Документ			 = Параметры.Документ;
	// +СБ. Кузнецова С. 2014-11-27 
	Объект.СБ_ДатаНачалаРасчета 	= Параметры.ДатаНачалаРасчета;
	Объект.СБ_КорректировкаГрафика 	= Параметры.КорректировкаГрафика;
	Объект.СБ_СуммаКорректировки 	= Параметры.СуммаКорректировки;
	// -СБ. Кузнецова С.
	
	Если Параметры.Свойство("СтруктураТаблиц") Тогда
		Если Параметры.СтруктураТаблиц.Свойство("ГрафикВыдачиТраншей") Тогда
			ТаблицаВыдачиТраншей = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(Параметры.СтруктураТаблиц.ГрафикВыдачиТраншей,
																					Параметры.СтруктураТаблиц.ГрафикВыдачиТраншей_Колонки);
			
			Для Каждого ТекущаяСтрока Из ТаблицаВыдачиТраншей Цикл
				НоваяСтрока = Объект.ГрафикВыдачиТраншей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				
				НоваяСтрока.ИД = Строка(Новый УникальныйИдентификатор);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ОтобразитьГрафикВыдачиТраншей = Истина;
	ОтобразитьПараметры			  = Истина;
	
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	// Возможно с параметрами передали договор
	ПриИзмененииДоговора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	// Заполним способ расчета из договора
	ПриИзмененииДоговора();
	
	КоллекцияСоставляющих = ДеревоСоставляющих.ПолучитьЭлементы();
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоСоставляющих,КоллекцияСоставляющих,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПриИзменении(Элемент)
	
	КоллекцияСоставляющих = ДеревоСоставляющих.ПолучитьЭлементы();
	
	КоллекцияСоставляющих.Очистить();
	
	ЗаполнитьСоставляющиеПлатежа(Объект.СпособРасчета);
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоСоставляющих,КоллекцияСоставляющих,Истина);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСоставляющих

&НаКлиенте
Процедура ДеревоСоставляющихЗначениеПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСоставляющих.ТекущиеДанные;
	
	Если ТекущиеДанные.ТипПлатежаПоФинДоговору = мКэшЗначений.ТипПлатежаОсновнойДолг
		И ТекущиеДанные.Параметр = мКэшЗначений.ПараметрПериодичность Тогда
		
		мКэшЗначений.ПериодичностьОсновногоДолга = ТекущиеДанные.ЗначениеПараметра;
		
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
	ТекущиеДанные.ПараметрМодифицирован = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСоставляющихЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоСоставляющих.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатьяОборотовБДДСПоступление"	, мКэшЗначений.СтатьяОборотовБДДСПоступление);
	СтруктураПараметров.Вставить("СтатьяОборотовБДДСРасходование"	, мКэшЗначений.СтатьяОборотовБДДСРасходование);
	СтруктураПараметров.Вставить("СтатьяОборотовБДРПоступление"		, мКэшЗначений.СтатьяОборотовБДРПоступление);
	СтруктураПараметров.Вставить("СтатьяОборотовБДРРасходование"	, мКэшЗначений.СтатьяОборотовБДРРасходование);
	СтруктураПараметров.Вставить("Перечисления"						, мКэшЗначений.Перечисления);
	СтруктураПараметров.Вставить("ИмяРеквизитаЗначение"				, "ЗначениеПараметра");
	СтруктураПараметров.Вставить("ИмяРеквизитаТипПлатежа"			, "ТипПлатежаПоФинДоговору");
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораЗначенияПараметраСоставляющейПлатежа(ЭтаФорма, Элемент, ТекущиеДанные, СтруктураПараметров, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСоставляющихЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоСоставляющих.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	бит_РаботаСДиалогамиКлиент.ОчисткаЗначенияПараметраСоставляющейПлатежа(ТекущиеДанные, "Параметр", "ЗначениеПараметра", СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикВыдачиТраншей

&НаКлиенте
Процедура ГрафикВыдачиТраншейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ГрафикВыдачиТраншей.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.ИД = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыдачиТраншейДатаТраншаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикВыдачиТраншей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.МесяцПервогоПлатежа = ДобавитьМесяц(ТекущиеДанные.ДатаТранша, 1);
	
	// +СБ. Кузнецова С. 2014-11-11 
	// найдем дату первого платежа
	ДатаПервогоПлатежа = Неопределено;
	ЭлементыДерева = ДеревоСоставляющих.ПолучитьЭлементы();
	ГруппаПроценты = Неопределено;
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Группировка = ПредопределенноеЗначение("Справочник.бит_СоставляющиеПлатежейПоФинДоговорам.Проценты") Тогда
			ГруппаПроценты = ЭлементДерева;
			Продолжить;
		КонецЕсли;
	КонецЦикла;	
	Если ГруппаПроценты <> Неопределено Тогда
		ЭлементыДерева = ГруппаПроценты.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.Группировка = ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.ДатаПервогоПлатежа") Тогда
				ДатаПервогоПлатежа = ЭлементДерева.ЗначениеПараметра;
				Продолжить;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли; 	
	
	Если ДатаПервогоПлатежа <> Неопределено Тогда
		ТекущиеДанные.МесяцПервогоПлатежа = ДатаПервогоПлатежа;
	КонецЕсли;
	// -СБ. Кузнецова С.
	
	ПериодичностьПланирования = мКэшЗначений.Перечисления.бит_ПериодичностьПланирования.Месяц;
	
	ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа = бит_РаботаСДиалогамиСервер.СформироватьПредставлениеПериода(ТекущиеДанные.МесяцПервогоПлатежа, ПериодичностьПланирования);
	
	РассчитатьКоличествоПериодовВыплат(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыдачиТраншейДатаПогашенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикВыдачиТраншей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьКоличествоПериодовВыплат(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыдачиТраншейПредставлениеМесяцаПервогоПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГрафикВыдачиТраншей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТемпПредставлениеПериода = ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа;
	
	СтрПериодичность = "Месяц";
	ПериодичностьПланирования = мКэшЗначений.Перечисления.бит_ПериодичностьПланирования.Месяц;
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериода(Элемент, 
																		ЭтаФорма, 
																		СтандартнаяОбработка, 
																		ТекущиеДанные.МесяцПервогоПлатежа, 
																		СтрПериодичность, 
																		ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа);
	// Рассчитаем количество периодов выплат																	
	РассчитатьКоличествоПериодовВыплат(ТекущиеДанные);
	
	ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа = бит_РаботаСДиалогамиСервер.СформироватьПредставлениеПериода(ТекущиеДанные.МесяцПервогоПлатежа, ПериодичностьПланирования);

КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыдачиТраншейПредставлениеМесяцаПервогоПлатежаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыдачиТраншейПредставлениеМесяцаПервогоПлатежаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГрафикВыдачиТраншей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа) Тогда
		
		ПериодичностьПланирования = мКэшЗначений.Перечисления.бит_ПериодичностьПланирования.Месяц;
		
		ТекущиеДанные.МесяцПервогоПлатежа = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ТекущиеДанные.МесяцПервогоПлатежа
																					, Направление
																					, ПериодичностьПланирования);
																					
		ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа = бит_РаботаСДиалогамиСервер.СформироватьПредставлениеПериода(ТекущиеДанные.МесяцПервогоПлатежа, ПериодичностьПланирования);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикПлатежей

&НаКлиенте
Процедура ГрафикПлатежейПриАктивизацииЯчейки(Элемент)
	
	РассчитатьРезультатПоВыделеннымСтрокам();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейПослеУдаления(Элемент)
	
	ЗаполнитьИтогиПоГрафику();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейПериодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЭтоВыходной = НЕ ЭтоРабочийДень(ТекущиеДанные.Период, Объект.Календарь);
	
	ТекущиеДанные.ЭтоЗапрещенныйПериод = ТекущиеДанные.ДатаПогашения < ТекущиеДанные.Период;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ГрафикПлатежей.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Укажем параметры отбора статьи оборотов
	РасходДоход = ТекущаяСтрока.РасходДоход;
	Если ЗначениеЗаполнено(Объект.ВидГрафика) Тогда
		ТипСтатьи = Объект.ВидГрафика;
	Иначе
		ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РасходДоход", РасходДоход);
	СтруктураОтбора.Вставить("ТипСтатьи"  , ТипСтатьи);
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
		
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСуммаПриИзменении(Элемент)
	
	ЗаполнитьИтогиПоГрафику();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСоставляющаяПлатежаПриИзменении(Элемент)
	
	ЗаполнитьИтогиПоГрафику();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - действие команды "КомандаСформироватьГрафик".
// 
&НаКлиенте
Процедура КомандаСформироватьГрафик(Команда)
	
	СформироватьГрафикПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьГрафикВДокумент(Команда)
	
	ПеренестиГрафикиВДокумент("Загрузить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьГрафикВДокумент(Команда)
	
	ПеренестиГрафикиВДокумент("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиНаПредыдущийРабочий(Команда)
	
	ПеренестиПлатежиСПраздничныхДнейВРабочие(0);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиНаСледующийРабочий(Команда)
	
	ПеренестиПлатежиСПраздничныхДнейВРабочие(1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьПараметры(Команда)
	
	ОтобразитьПараметры = НЕ ОтобразитьПараметры;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьГрафикВыдачиТраншей(Команда)
	
	ОтобразитьГрафикВыдачиТраншей = НЕ ОтобразитьГрафикВыдачиТраншей;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьСоставляющиеПлатежа(Команда)
	
	ЗаписатьСоставляющиеПлатежаВДоговор();   
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьГрафикаПлатежей(Команда)
	
	ТабДок = ПечатьГрафикаПлатежей();
	
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку	   = Ложь;
	
	ТабДок.Показать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура рассчитывает сумму выделенных строк по значениям в текущей колонке в таблице ГрафикПлатежей.
// 
// Параметры:
// 	нет
// 
&НаКлиенте
Процедура РассчитатьРезультатПоВыделеннымСтрокам()
	
	Если Элементы.ГрафикПлатежей.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяКолонка = Элементы.ГрафикПлатежей.ТекущийЭлемент.Имя;
	
	ИмяПоля = СтрЗаменить(ТекущаяКолонка, "ГрафикПлатежей", "");
	
	ВыделенныеСтроки = Элементы.ГрафикПлатежей.ВыделенныеСтроки;
	
	Результат = 0;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		НайденнаяСтрока = Объект.ГрафикПлатежей.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если НайденнаяСтрока = Неопределено
			ИЛИ НЕ НайденнаяСтрока.Свойство(ИмяПоля) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(НайденнаяСтрока[ИмяПоля]) = Тип("Число") Тогда
			Результат = Результат + НайденнаяСтрока[ИмяПоля];
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПоВыделеннымСтрокам = Результат;
	
КонецПроцедуры

// Процедура рассчитывает количество периодов выплат по траншу.
// 
// Параметры:
// 	СтрокаТранша - ДанныеФормыЭлементКоллекции ГрафикВыдачиТраншей.
// 
&НаКлиенте
Процедура РассчитатьКоличествоПериодовВыплат(СтрокаТранша)
	
	// +СБ. Кузнецова С. 2014-11-11 
	//КоличествоМесяцев = бит_Бюджетирование.РазностьДат(СтрокаТранша.МесяцПервогоПлатежа, СтрокаТранша.ДатаПогашения, "МЕСЯЦ") + 1;
	
	// найдем дату первого платежа
	ДатаПервогоПлатежа = Неопределено;
	ЭлементыДерева = ДеревоСоставляющих.ПолучитьЭлементы();
	ГруппаОсновнойДолг = Неопределено;
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Группировка = ПредопределенноеЗначение("Справочник.бит_СоставляющиеПлатежейПоФинДоговорам.ПогашениеОсновногоДолга") Тогда
			ГруппаОсновнойДолг = ЭлементДерева;
			Продолжить;
		КонецЕсли;
	КонецЦикла;	
	Если ГруппаОсновнойДолг <> Неопределено Тогда
		ЭлементыДерева = ГруппаОсновнойДолг.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.Группировка = ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.ДатаПервогоПлатежа") Тогда
				ДатаПервогоПлатежа = ЭлементДерева.ЗначениеПараметра;
				Продолжить;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли; 	
	
	Если ДатаПервогоПлатежа <> Неопределено Тогда
		НачальнаяДата = Макс(ДатаПервогоПлатежа, СтрокаТранша.МесяцПервогоПлатежа);
	КонецЕсли;
	
	КоличествоМесяцев = бит_Бюджетирование.РазностьДат(НачальнаяДата, СтрокаТранша.ДатаПогашения, "МЕСЯЦ") + 1;
	// -СБ. Кузнецова С.
	
	// Количество периодов рассчитываем исходя из периодичности основного долга.
	Если мКэшЗначений.ПериодичностьОсновногоДолга = мКэшЗначений.Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежегодно Тогда
		КоличествоПериодов = КоличествоМесяцев / 12;
		КоличествоЦелыхПериодов = Цел(КоличествоПериодов);
		ВременныеОстатки = КоличествоМесяцев %12;
		Если ВременныеОстатки = 0 Тогда
			ДопПериод = 0;
		Иначе
			ДопПериод = 1;
		КонецЕсли;
		
		СтрокаТранша.КоличествоПериодовВыплат = КоличествоЦелыхПериодов + ДопПериод;
	ИначеЕсли мКэшЗначений.ПериодичностьОсновногоДолга = мКэшЗначений.Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежеквартально Тогда
		КоличествоПериодов = КоличествоМесяцев / 3;
		КоличествоЦелыхПериодов = Цел(КоличествоПериодов);
		ВременныеОстатки = КоличествоМесяцев %3;
		Если ВременныеОстатки = 0 Тогда
			ДопПериод = 0;
		Иначе
			ДопПериод = 1;
		КонецЕсли;
		
		СтрокаТранша.КоличествоПериодовВыплат = КоличествоЦелыхПериодов + ДопПериод;
	ИначеЕсли мКэшЗначений.ПериодичностьОсновногоДолга = мКэшЗначений.Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.ПриПогашении Тогда
		СтрокаТранша.КоличествоПериодовВыплат = 1;
	ИначеЕсли мКэшЗначений.ПериодичностьОсновногоДолга = мКэшЗначений.Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Единовременно Тогда
		СтрокаТранша.КоличествоПериодовВыплат = 1;	
	Иначе
		СтрокаТранша.КоличествоПериодовВыплат = КоличествоМесяцев;
	КонецЕсли;
	
КонецПроцедуры

// Процедура переносит сформированные график выдачи траншей 
// и график платежей в документ Доп.условия по договору.
// 
// Параметры:
// 	РежимПереноса - строка - (Загрузить, Добавить).
// 
&НаКлиенте
Процедура ПеренестиГрафикиВДокумент(РежимПереноса)
	
	СтруктураТаблиц = Новый Структура;
	
	// Таблицы для загрузки/добавления
	УпаковатьТаблицу(СтруктураТаблиц, "ГрафикПлатежей");
	УпаковатьТаблицу(СтруктураТаблиц, "ГрафикВыдачиТраншей");
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("СтруктураТаблиц"	, СтруктураТаблиц);
	ПараметрыОповещения.Вставить("ВидГрафика"		, Объект.ВидГрафика);
	ПараметрыОповещения.Вставить("РежимДобавления"	, РежимПереноса);
	
	Оповестить("ЗаполнитьФинансовыйГрафик", ПараметрыОповещения);
	
КонецПроцедуры

// Процедура проверяет обязательные параметры для заполнения графика платежей.
// 
// Параметры:
// 	нет
// 
&НаСервере
Функция ПроверитьОбязательныеПараметры()
	
	ЕстьОшибки = Ложь;
	
	Если Объект.ГрафикВыдачиТраншей.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не указан график выдачи траншей. Невозможно сформировать график платежей!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЕстьОшибки);
	КонецЕсли;
	
	// Найдем составляющую с типом основной долг.
	ДеревоПараметров = РеквизитФормыВЗначение("ДеревоСоставляющих");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипПлатежаПоФинДоговору", мКэшЗначений.ТипПлатежаОсновнойДолг);
	
	НайденныеСтроки = ДеревоПараметров.Строки.НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Отсутствует составляющая платежа с типом ""Основной долг"". Невозможно сформировать график платежей!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЕстьОшибки);
	КонецЕсли;	
	
	ПараметрыОснДолга = Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.ПолучитьСтруктуруПараметровРасчета(мКэшЗначений.ТипПлатежаОсновнойДолг, ДеревоПараметров);
	
	// Проверим график выдачи траншей
	Для Каждого ТекущийТранш Из Объект.ГрафикВыдачиТраншей Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущийТранш.ДатаТранша) Тогда
			ТекстСообщения = НСтр("ru='В строке № %1% графика выдачи траншей: Не указана дата транша!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекущийТранш.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЕстьОшибки);
		КонецЕсли;
		
		Если ТекущийТранш.ДатаТранша > ТекущийТранш.ДатаПогашения Тогда
			ТекстСообщения = НСтр("ru='В строке № %1% графика выдачи траншей: Дата выдачи транша превышает дату погашения транша!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекущийТранш.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЕстьОшибки);
		КонецЕсли;
		
		Если ТекущийТранш.КоличествоПериодовВыплат = 0 Тогда
			ТекстСообщения = НСтр("ru='В строке № %1% графика выдачи траншей: Количество периодов выплат не может быть равно 0!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекущийТранш.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЕстьОшибки);
		КонецЕсли;
		
		ПериодОкончанияВыплат = Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.ПолучитьПериодОкончанияВыплатПоТраншу(ПараметрыОснДолга, ТекущийТранш);
		
		Если ТекущийТранш.ДатаПогашения < ПериодОкончанияВыплат Тогда
			ТекстСообщения = НСтр("ru='В строке № %1% графика выдачи траншей: При указанном количестве периодов выплат даты платежей будут превышать дату погашения!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекущийТранш.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим составляющие платежа
	КоллекцияСоставляющих = ДеревоСоставляющих.ПолучитьЭлементы();
	
	Для Каждого ТекущаяСоставляющая Из КоллекцияСоставляющих Цикл
		НаборПараметров = ТекущаяСоставляющая.ПолучитьЭлементы();
		
		Для Каждого ТекущийПараметр Из НаборПараметров Цикл
			Если ТекущийПараметр.Обязательный
				И НЕ ЗначениеЗаполнено(ТекущийПараметр.ЗначениеПараметра) Тогда
				
				ТекстСообщения = НСтр("ru='Для составляющей платежа ""%1%"" не указано значение обязательного параметра ""%2%""!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекущаяСоставляющая.Группировка, ТекущийПараметр.Параметр);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЕстьОшибки);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Процедура заполняет график платежей.
// 
// Параметры:
// 	нет
// 
&НаСервере
Процедура СформироватьГрафикПлатежей()
	
	// Проверим обязательные параметры
	ЕстьОшибки = ПроверитьОбязательныеПараметры();
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ГрафикПлатежей.Очистить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("СуммаДоговора"	 , Объект.СуммаДоговора);
	СтруктураПараметров.Вставить("НаправлениеДДС"	 , Объект.НаправлениеДДС);
	СтруктураПараметров.Вставить("ВидГрафика"		 , Объект.ВидГрафика);
	
	ДеревоПараметров = РеквизитФормыВЗначение("ДеревоСоставляющих");
	
	ТаблицаПериодов = Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.СформироватьГрафикПлатежей(Объект.ГрафикВыдачиТраншей, ДеревоПараметров, СтруктураПараметров);
	
	// +СБ. Кузнецова С. 2014-11-27 
	Если Объект.СБ_КорректировкаГрафика Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДоговорКонтрагента"		, Объект.ДоговорКонтрагента);
		СтруктураПараметров.Вставить("СуммаДоговора"	 		, Объект.СуммаДоговора);
		СтруктураПараметров.Вставить("НаправлениеДДС"	 		, Объект.НаправлениеДДС);
		СтруктураПараметров.Вставить("ВидГрафика"		 		, Объект.ВидГрафика);
		СтруктураПараметров.Вставить("СБ_ДатаНачалаРасчета"	 	, Объект.СБ_ДатаНачалаРасчета);
		СтруктураПараметров.Вставить("СБ_КорректировкаГрафика"	, Объект.СБ_КорректировкаГрафика);
		СтруктураПараметров.Вставить("СБ_СуммаКорректировки"	, Объект.СБ_СуммаКорректировки);
		СтруктураПараметров.Вставить("ДокументДопУсловий"		, Объект.Документ);
		Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.СкорректироватьГрафикПлатежей(ТаблицаПериодов, Объект.ГрафикВыдачиТраншей, ДеревоПараметров, СтруктураПараметров);	
	КонецЕсли;	
	// -СБ. Кузнецова С.
	
	// Выведем на форму получившийся график
	Для Каждого ТекущаяСтрока Из ТаблицаПериодов Цикл
		
		Если ТекущаяСтрока.ОтказОтВвода Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект.ВидГрафика = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР
			И (Объект.НаправлениеДДС = "Получение" ИЛИ НЕ ЗначениеЗаполнено(Объект.НаправлениеДДС))
			И ТекущаяСтрока.Направление = мКэшЗначений.Перечисления.бит_РасходДоход.Поступление Тогда
			
			Продолжить;
			
		ИначеЕсли Объект.ВидГрафика = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР
			И Объект.НаправлениеДДС = "Выдача"
			И ТекущаяСтрока.Направление = мКэшЗначений.Перечисления.бит_РасходДоход.Расходование Тогда
			
			Продолжить;
			
		ИначеЕсли Объект.ВидГрафика = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР
			И ТекущаяСтрока.СоставляющаяПлатежа.ТипПлатежаПоФинДоговору = Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = Объект.ГрафикПлатежей.Добавить();
		НоваяСтрока.РасходДоход = ТекущаяСтрока.Направление;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		Если НоваяСтрока.ДатаПогашения < НоваяСтрока.Период Тогда
			НоваяСтрока.ЭтоЗапрещенныйПериод = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьИтогиПоГрафику();
	
	ПометитьПлатежиПопадающиеНаВыходной();
	
КонецПроцедуры

// Процедура заполняет таблицу с итогами по графику платежей.
// 
// Параметры:
// 	нет
// 
&НаСервере
Процедура ЗаполнитьИтогиПоГрафику()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("График", Объект.ГрафикПлатежей.Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	График.РасходДоход,
	|	График.СоставляющаяПлатежа,
	|	График.Сумма
	|ПОМЕСТИТЬ График
	|ИЗ
	|	&График КАК График
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	График.РасходДоход КАК Направление,
	|	График.СоставляющаяПлатежа,
	|	СУММА(График.Сумма) КАК Сумма
	|ИЗ
	|	График КАК График
	|
	|СГРУППИРОВАТЬ ПО
	|	График.РасходДоход,
	|	График.СоставляющаяПлатежа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Направление
	|ИТОГИ ПО
	|	Направление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ График";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЭлементыИтогов = ИтогоПоГрафику.ПолучитьЭлементы();
	ЭлементыИтогов.Очистить();
	
	Пока Выборка.Следующий() Цикл
		НовыйИтог = ЭлементыИтогов.Добавить();
		НовыйИтог.Группировка = Выборка.Направление;
		НовыйИтог.Сумма		  = Выборка.Сумма;
		
		ДеталиИтога = НовыйИтог.ПолучитьЭлементы();
		
		ВыборкаДетали = Выборка.Выбрать();
		КоличествоДеталей = ВыборкаДетали.Количество();
		
		Пока ВыборкаДетали.Следующий() Цикл
			Если КоличествоДеталей = 1
				И НЕ ЗначениеЗаполнено(ВыборкаДетали.СоставляющаяПлатежа) Тогда
				Прервать;
			КонецЕсли;
			НоваяДеталь = ДеталиИтога.Добавить();
			НоваяДеталь.Группировка = ВыборкаДетали.СоставляющаяПлатежа;
			НоваяДеталь.Сумма		= ВыборкаДетали.Сумма;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_ПериодичностьВыплатПоФинансовымДоговорам" , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам));
	КэшПеречисления.Вставить("бит_ТипыПроцентныхСтавокПоФинансовымДоговорам", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам));
	КэшПеречисления.Вставить("бит_ПериодичностьПланирования", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования));
	КэшПеречисления.Вставить("бит_РасходДоход"				, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов"		, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_АлгоритмыРасчетовПоФинДоговорам"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам));
	КэшПеречисления.Вставить("бит_ТипыПлатежейПоФинансовымДоговорам", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам));
	КэшПеречисления.Вставить("бит_КонтекстыВыполненияПользовательскихФункций", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_КонтекстыВыполненияПользовательскихФункций));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);

	КэшированныеЗначения.Вставить("ТипПлатежаОсновнойДолг", Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг);
	КэшированныеЗначения.Вставить("ТипПлатежаПроценты"	  , Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.Проценты);
	КэшированныеЗначения.Вставить("ПараметрПериодичность" , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.Периодичность);
	
	КэшированныеЗначения.Вставить("ПериодичностьОсновногоДолга" , Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежемесячно);
	
	КэшированныеЗначения.Вставить("ПустаяСтатьяОборотов", Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	
	КэшированныеЗначения.Вставить("СтатьяОборотовБДДСПоступление"  , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДДСПоступление);
	КэшированныеЗначения.Вставить("СтатьяОборотовБДДСРасходование" , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДДСРасходование);
	КэшированныеЗначения.Вставить("СтатьяОборотовБДРПоступление"   , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДРПоступление);
	КэшированныеЗначения.Вставить("СтатьяОборотовБДРРасходование"  , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДРРасходование);

	КэшированныеЗначения.Вставить("ЭтоБП", бит_ОбщегоНазначения.ЭтоСемействоБП());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура подготавливает для заполнения составляющие и параметры платежа.
// 
// Параметры:
// 	ВладелецСоставляющих - (СправочникСсылка.ДоговорКонтрагента)  - уточняет местоположение составляющих и параметров
// 						   (СправочникСсылка.бит_СпособыРасчетовГрафиковПлатежейПоФинДоговорам).
// 
&НаСервере
Процедура ЗаполнитьСоставляющиеПлатежа(ИсточникЗаполнения)
	
    Дерево = бит_ДоговораСервер.ПолучитьДеревоПараметровФинДоговоров(ИсточникЗаполнения);
	
	ЗаполнитьДеревоСоставляющих(Дерево, ДеревоСоставляющих.ПолучитьЭлементы(), мКэшЗначений);
	
КонецПроцедуры

// Процедура заполняет дерево составляющих. Выполняется рекурсивно.
// 
// Параметры:
// 	ДеревоИсточник - ДеревоЗначений - дерево на основании которого формируем ДеревоПриемник.
// 	ДеревоПриемник - ДанныеФормыКоллекцияЭлементовДерева - ДеревоСоставляющих.
// 	КэшЗначений - структура.
// 
&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоСоставляющих(ДеревоИсточник, ДеревоПриемник, КэшЗначений)
	
	Для Каждого ТекущаяСтрока Из ДеревоИсточник.Строки Цикл
		НоваяСтрока = ДеревоПриемник.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока.ТипПлатежаПоФинДоговору = ТекущаяСтрока.ТипПлатежа;
		НоваяСтрока.ЗначениеПараметра		= ТекущаяСтрока.Значение;
		
		// Запомним периодичность основного долга
		Если НоваяСтрока.ТипПлатежаПоФинДоговору = КэшЗначений.ТипПлатежаОсновнойДолг
			И НоваяСтрока.Параметр = КэшЗначений.ПараметрПериодичность Тогда
			
			КэшЗначений.ПериодичностьОсновногоДолга = НоваяСтрока.ЗначениеПараметра;
			
		КонецЕсли;
		
		ЗаполнитьДеревоСоставляющих(ТекущаяСтрока, НоваяСтрока.ПолучитьЭлементы(), КэшЗначений);
	КонецЦикла;
	
КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	// Укажем в каких единицах времени измеряется период выплаты по траншам.
	Если мКэшЗначений.ПериодичностьОсновногоДолга = мКэшЗначений.Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежегодно Тогда
		Элементы.ГрафикВыдачиТраншейКоличествоПериодовВыплат.Заголовок = "Количество периодов выплат (год)";
	ИначеЕсли мКэшЗначений.ПериодичностьОсновногоДолга = мКэшЗначений.Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежеквартально Тогда
		Элементы.ГрафикВыдачиТраншейКоличествоПериодовВыплат.Заголовок = "Количество периодов выплат (квартал)";
	ИначеЕсли мКэшЗначений.ПериодичностьОсновногоДолга = мКэшЗначений.Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежемесячно Тогда
		Элементы.ГрафикВыдачиТраншейКоличествоПериодовВыплат.Заголовок = "Количество периодов выплат (месяц)";
	Иначе
		Элементы.ГрафикВыдачиТраншейКоличествоПериодовВыплат.Заголовок = "Количество периодов выплат";	
	КонецЕсли;
	
	Элементы.ВидГрафика.ТолькоПросмотр		   = ЗначениеЗаполнено(Объект.Документ);
	Элементы.ДоговорКонтрагента.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Документ);
	
	Элементы.СуммаДоговора.ТолькоПросмотр	 = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.СпособРасчета.ТолькоПросмотр	 = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Элементы.ГрафикПлатежейГруппаДействияСГрафиком.Видимость = ЗначениеЗаполнено(Объект.Документ);
	
	Элементы.КомандаЗаписатьСоставляющиеПлатежа.Видимость = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Элементы.ГруппаПраво.Видимость 				 = ОтобразитьПараметры;
	Элементы.ГруппаГрафикВыдачиТраншей.Видимость = ОтобразитьГрафикВыдачиТраншей;
	
	Элементы.ФормаКомандаОтобразитьПараметры.Пометка			= ОтобразитьПараметры;
	Элементы.ФормаКомандаОтобразитьГрафикВыдачиТраншей.Пометка 	= ОтобразитьГрафикВыдачиТраншей;
	
	Элементы.ГруппаКалендарь.Видимость = мКэшЗначений.ЭтоБП;
	
КонецПроцедуры

// Процедура преобразует реквизит управляемой формы ДанныеФормыКоллекция в массив структур.
// 
// Параметры:
//  СтрТаблиц  - Структура
//  ИмяТаблицы - Строка
// 
&НаСервере
Процедура УпаковатьТаблицу(СтрТаблиц,ИмяТаблицы)
	
	МассивРеквизитов = Объект[ИмяТаблицы].Выгрузить().Колонки;
	
	ИменаРеквизитов = Новый Структура;
	
	Для каждого Реквизит ИЗ МассивРеквизитов Цикл
		
		ИменаРеквизитов.Вставить(Реквизит.Имя,Реквизит.ТипЗначения);
		
	КонецЦикла;
	
	СтрТаблиц.Вставить(ИмяТаблицы, бит_ОбщегоНазначенияКлиентСервер.УпаковатьДанныеФормыКоллекция(Объект[ИмяТаблицы],ИменаРеквизитов));
	СтрТаблиц.Вставить(ИмяТаблицы+"_Колонки", ИменаРеквизитов);
	
КонецПроцедуры

// Процедура инициирует запись составляющих платежа и их параметров отображенных на форме
// 	в договор (проект договора).
// 
// Параметры:
// 	нет.
// 
&НаСервере
Процедура ЗаписатьСоставляющиеПлатежаВДоговор()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДоговорКонтрагента) = Тип("ДокументСсылка.бит_ПроектДоговора") Тогда
		
		РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Объект.ДоговорКонтрагента);
		ТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
		
		СтатусУтвержден = Справочники.бит_СтатусыОбъектов.ПроектДоговора_Утвержден;
		
		Если ТекущийСтатус = СтатусУтвержден Тогда
			ТекстСообщения = НСтр("ru='Проект договора находится в статусе ""%1%"". Изменение параметров невозможно!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтатусУтвержден);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	
	ДеревоПараметров = РеквизитФормыВЗначение("ДеревоСоставляющих");
	
	ДеревоПараметров.Колонки.ЗначениеПараметра.Имя = "Значение";
	
	ДействиеВыполнено = бит_ДоговораСервер.ЗаписатьПараметрыФинансовогоДоговора(Объект.ДоговорКонтрагента, ДеревоПараметров);
	
	ДеревоПараметров.Колонки.Значение.Имя = "ЗначениеПараметра";
	
	// Снимем флаг модифицированности у параметров.
	Если ДействиеВыполнено Тогда
		
		КоллекцияСоставляющих = ДеревоСоставляющих.ПолучитьЭлементы();
		
		Для Каждого ЭлементКоллекции Из КоллекцияСоставляющих Цикл
			
			ПараметрыСоставляющей = ЭлементКоллекции.ПолучитьЭлементы();
			
			Для Каждого ТекущийПараметр Из ПараметрыСоставляющей Цикл
				
				ТекущийПараметр.ПараметрМодифицирован = Ложь;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция подготавливает параметры и инициирует формирование табличного документа передаваемого на печать.
// 
// Параметры:
// 	нет
// 
&НаСервере
Функция ПечатьГрафикаПлатежей()
	
	ТабДок = Неопределено;
	
	СуммаДолга				 = Объект.ГрафикВыдачиТраншей.Итог("СуммаТранша");
	КоличествоПериодовВыплат = Объект.ГрафикВыдачиТраншей.Итог("КоличествоПериодовВыплат");
	
	Дерево = РеквизитФормыВЗначение("ДеревоСоставляющих");
	
	ПараметрыПроцентов = Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.ПолучитьСтруктуруПараметровРасчета(Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.Проценты, Дерево);
	Если ПараметрыПроцентов.ТипПроцентнойСтавки = Перечисления.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Фиксированная Тогда
		ПроцентнаяСтавка = ПараметрыПроцентов.ПроцентнаяСтавка;
	Иначе
		ПроцентнаяСтавка = 0;
	КонецЕсли;
	
	ТаблицаГрафика = Объект.ГрафикПлатежей.Выгрузить();
	
	Структура = Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.ПолучитьРезультатЗапросаПоГрафикуПлатежей(ТаблицаГрафика);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СуммаДолга"				, СуммаДолга);
	СтруктураПараметров.Вставить("КоличествоПериодовВыплат"	, КоличествоПериодовВыплат);
	СтруктураПараметров.Вставить("ПроцентнаяСтавка"			, ПроцентнаяСтавка);
	СтруктураПараметров.Вставить("РезультатЗапроса"			, Структура.РезультатЗапроса);
	СтруктураПараметров.Вставить("СтруктураДопКолонок"		, Структура.СтруктураДопКолонок);
	
	Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.Печать(СтруктураПараметров, "ГрафикПлатежей",,ТабДок);
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииДоговора()
	
	Если ТипЗнч(Объект.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Объект.СпособРасчета = Объект.ДоговорКонтрагента.бит_СпособРасчетаФинПлатежей;
		Объект.СуммаДоговора = Объект.ДоговорКонтрагента.бит_СуммаДоговора;
	ИначеЕсли ТипЗнч(Объект.ДоговорКонтрагента) = Тип("ДокументСсылка.бит_ПроектДоговора") Тогда
		Объект.СпособРасчета = Объект.ДоговорКонтрагента.СпособРасчетаФинПлатежей;
		Объект.СуммаДоговора = Объект.ДоговорКонтрагента.СуммаВзаиморасчеты;
	КонецЕсли;
	
	// +СБ. Кузнецова С. 2014-11-27 
	Если Параметры.КорректировкаГрафика Тогда
		Объект.СуммаДоговора = Параметры.СуммаКорректировки;
	КонецЕсли;
	// -СБ. Кузнецова С.
	
	КоллекцияСоставляющих = ДеревоСоставляющих.ПолучитьЭлементы();
	
	КоллекцияСоставляющих.Очистить();
	
	ЗаполнитьСоставляющиеПлатежа(Объект.ДоговорКонтрагента);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

// Процедура переносит даты выплат с выходных дней на рабочие дни.
// 
// Параметры:
// 	РежимПереноса - число(0, 1) - определяет направление переноса.
// 
&НаСервере
Процедура ПеренестиПлатежиСПраздничныхДнейВРабочие(РежимПереноса)
	
	Если мКэшЗначений.ЭтоБП Тогда
		// Проверку выполняем только для БП, т.к. в УПП нет соответствующего справочника.
		Если НЕ ЗначениеЗаполнено(Объект.Календарь) Тогда
			
			ТекстСообщения = НСтр("ru='Не указан производственный календарь!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.Календарь");
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПлатежей = Объект.ГрафикПлатежей.Выгрузить();
	
	ТаблицаПлатежей.Сортировать("Период");
	
	МинимальнаяДата  = Дата(1,1,1);
	МаксимальнаяДата = Дата(2999,1,1);
	
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		МинимальнаяДата  = ДобавитьМесяц(ТаблицаПлатежей[0].Период, -1);
		МаксимальнаяДата = ДобавитьМесяц(ТаблицаПлатежей[ТаблицаПлатежей.Количество()-1].Период, 1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	РабочиеДни = Новый Массив;
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Запрос.УстановитьПараметр("ТаблицаПлатежей" , ТаблицаПлатежей);
	Запрос.УстановитьПараметр("Календарь"		, Объект.Календарь);
	Запрос.УстановитьПараметр("РабочиеДни"	    , РабочиеДни);
	Запрос.УстановитьПараметр("МинимальнаяДата" , МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата", МаксимальнаяДата);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПлатежей.Период
	|ПОМЕСТИТЬ ТаблицаПлатежей
	|ИЗ
	|	&ТаблицаПлатежей КАК ТаблицаПлатежей
	|;
	|";
	
	Если мКэшЗначений.ЭтоБП Тогда
		ТекстДанныеГрафика = 
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПроизводственногоКалендаря.Дата КАК ДатаКалендаря,
		|	ДанныеПроизводственногоКалендаря.ВидДня
		|ПОМЕСТИТЬ ПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &Календарь
		|	И ДанныеПроизводственногоКалендаря.ВидДня В(&РабочиеДни)
		|	И ДанныеПроизводственногоКалендаря.Дата >= &МинимальнаяДата
		|	И ДанныеПроизводственногоКалендаря.Дата <= &МаксимальнаяДата
		|;
		|";
	Иначе
		ТекстДанныеГрафика = 
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
		|	РегламентированныйПроизводственныйКалендарь.ВидДня
		|ПОМЕСТИТЬ ПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ВидДня В(&РабочиеДни)
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &МинимальнаяДата
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &МаксимальнаяДата
		|;
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстДанныеГрафика;
	ТекстЗапроса = ТекстЗапроса +
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПлатежей.Период,
	|	ЕстьNULL(МАКСИМУМ(ПроизводственныйКалендарьПредРабочий.ДатаКалендаря),ТаблицаПлатежей.Период) КАК ПредыдущийРабочий,
	|	ЕстьNULL(МИНИМУМ(ПроизводственныйКалендарьСледРабочий.ДатаКалендаря),ТаблицаПлатежей.Период) КАК СледующийРабочий
	|ИЗ
	|	ТаблицаПлатежей КАК ТаблицаПлатежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроизводственныйКалендарь КАК ПроизводственныйКалендарьПредРабочий
	|		ПО ТаблицаПлатежей.Период >= ПроизводственныйКалендарьПредРабочий.ДатаКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроизводственныйКалендарь КАК ПроизводственныйКалендарьСледРабочий
	|		ПО ТаблицаПлатежей.Период <= ПроизводственныйКалендарьСледРабочий.ДатаКалендаря
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПлатежей.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПлатежей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПроизводственныйКалендарь";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	ТаблицаПереносовДат = Результат.Выгрузить();
	
	Для Каждого ТекущаяСтрока Из Объект.ГрафикПлатежей Цикл
		
		ДанныеОПереносе = ТаблицаПереносовДат.Найти(ТекущаяСтрока.Период, "Период");
		
		Если РежимПереноса = 0 Тогда
			ТекущаяСтрока.Период = ДанныеОПереносе.ПредыдущийРабочий;
		Иначе
			ТекущаяСтрока.Период = ДанныеОПереносе.СледующийРабочий;
		КонецЕсли;
		
	КонецЦикла;
	
	ПометитьПлатежиПопадающиеНаВыходной();
	
КонецПроцедуры

// Процедура устанавливает признак выходного дня для платежей, которые в соответствии
// 	с производственным календарем попадают на выходные дни.
// 
// Параметры:
// 	нет.
// 
&НаСервере
Процедура ПометитьПлатежиПопадающиеНаВыходной()
	
	ТаблицаПлатежей = Объект.ГрафикПлатежей.Выгрузить();
	
	ТаблицаПлатежей.Сортировать("Период");
	
	МинимальнаяДата  = Дата(1,1,1);
	МаксимальнаяДата = Дата(2999,1,1);
	
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		МинимальнаяДата  = ДобавитьМесяц(ТаблицаПлатежей[0].Период, -1);
		МаксимальнаяДата = ДобавитьМесяц(ТаблицаПлатежей[ТаблицаПлатежей.Количество()-1].Период, 1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	РабочиеДни = Новый Массив;
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Запрос.УстановитьПараметр("ТаблицаПлатежей" , ТаблицаПлатежей);
	Запрос.УстановитьПараметр("Календарь"		, Объект.Календарь);
	Запрос.УстановитьПараметр("РабочиеДни"	    , РабочиеДни);
	Запрос.УстановитьПараметр("МинимальнаяДата" , МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата", МаксимальнаяДата);
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПлатежей.Период
	|ПОМЕСТИТЬ ТаблицаПлатежей
	|ИЗ
	|	&ТаблицаПлатежей КАК ТаблицаПлатежей
	|;
	|";
	
	Если мКэшЗначений.ЭтоБП Тогда
		ТекстДанныеГрафика = 
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПроизводственногоКалендаря.Дата КАК ДатаКалендаря,
		|	ДанныеПроизводственногоКалендаря.ВидДня
		|ПОМЕСТИТЬ ПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &Календарь
		|	И (НЕ ДанныеПроизводственногоКалендаря.ВидДня В (&РабочиеДни))
		|	И ДанныеПроизводственногоКалендаря.Дата >= &МинимальнаяДата
		|	И ДанныеПроизводственногоКалендаря.Дата <= &МаксимальнаяДата
		|;
		|";
	Иначе
		ТекстДанныеГрафика = 
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
		|	РегламентированныйПроизводственныйКалендарь.ВидДня
		|ПОМЕСТИТЬ ПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	(НЕ РегламентированныйПроизводственныйКалендарь.ВидДня В (&РабочиеДни))
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &МинимальнаяДата
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &МаксимальнаяДата
		|;
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстДанныеГрафика;
	ТекстЗапроса = ТекстЗапроса +
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПлатежей.Период,
	|	ПроизводственныйКалендарь.ВидДня,
	|	ПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	ТаблицаПлатежей КАК ТаблицаПлатежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО ТаблицаПлатежей.Период = ПроизводственныйКалендарь.ДатаКалендаря
	|ГДЕ
	|	(НЕ ПроизводственныйКалендарь.ДатаКалендаря ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПлатежей.Период,
	|	ПроизводственныйКалендарь.ВидДня,
	|	ПроизводственныйКалендарь.ДатаКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПлатежей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПроизводственныйКалендарь";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	// Снимем признак выходного дня у строк
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоВыходной", Истина);
	
	МассивСтрок = Объект.ГрафикПлатежей.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл 
		
		ТекущаяСтрока.ЭтоВыходной = Ложь;
		
	КонецЦикла;
	
	// Установим признак выходного дня
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Период", Выборка.Период);
		
		МассивСтрок = Объект.ГрафикПлатежей.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТекущаяСтрока Из МассивСтрок Цикл 
			
			ТекущаяСтрока.ЭтоВыходной = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет переданную дату является ли она рабочим днем.
// 
// Параметры:
// 	ДатаКалендаря - дата - дата, которую необходимо проверить.
// 
// Возвращаемое значение:
// 	ЭтоРабочийДень - булево - Истина - переданная дата относится к рабочим дням.
// 
&НаСервереБезКонтекста
Функция ЭтоРабочийДень(ДатаКалендаря, Календарь)
	
	ЭтоБП = бит_ОбщегоНазначения.ЭтоСемействоБП();
	
	Если ЭтоБП Тогда
		// Проверку выполняем только для БП, т.к. в УПП нет соответствующего справочника.
		Если НЕ ЗначениеЗаполнено(Календарь) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	РабочиеДни = Новый Массив;
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Запрос.УстановитьПараметр("РабочиеДни"	 , РабочиеДни);
	Запрос.УстановитьПараметр("Календарь"	 , Календарь);
	Запрос.УстановитьПараметр("ДатаКалендаря", ДатаКалендаря);
	
	Если ЭтоБП Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПроизводственногоКалендаря.Дата КАК ДатаКалендаря
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &Календарь
		|	И ДанныеПроизводственногоКалендаря.Дата = &ДатаКалендаря
		|	И ДанныеПроизводственногоКалендаря.ВидДня В(&РабочиеДни)";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря = &ДатаКалендаря
		|	И РегламентированныйПроизводственныйКалендарь.ВидДня В(&РабочиеДни)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ЭтоРабочийДень = Ложь;
	Иначе
		ЭтоРабочийДень = Истина;
	КонецЕсли;
	
	Возврат ЭтоРабочийДень;
	
КонецФункции

#КонецОбласти
