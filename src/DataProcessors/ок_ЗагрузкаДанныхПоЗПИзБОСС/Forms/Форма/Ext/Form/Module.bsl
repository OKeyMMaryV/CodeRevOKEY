
#Область ПеременныеФормы

// Параметры соединения с SQL
Перем Адрес;
Перем ПользовательSQL;
Перем ПарольSQL;
Перем БазаДанных;
Перем СтрокаСоединения; 
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-11 (#3782)
Перем РежимРаботыСБазойДанных; 
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-11 (#3782)

Перем СлужебныеЭлементыНеСопоставлено;
Перем КэшПоискаЗначений;

Перем Организация_ОкейЛоджистикс;
Перем Организация_Окей;
Перем Организация_ДОРИНДА;
Перем Организация_ОкейГрупп;
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация 						= Справочники.Организации.НайтиПоРеквизиту("Префикс", "ОК");
	Объект.ДатаДокумента					= ТекущаяДата();
	Объект.ПериодНачисления 				= НачалоМесяца(ТекущаяДата());
	Объект.НачисленияИУдержанияЗП 			= Истина;
	Объект.УдержанияПоИсполнительномуЛисту 	= Истина;
	Объект.РезервыОтпусков 					= Истина;
	
	Объект.ВидДвиженияМСФО 					= ?(Объект.МСФО, ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.Аккруал"), ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.РСБУ"));
	
	Объект.ОбрабатыватьДанныеПоРезервамПредыдущегоПериода = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("БОСС", "Обрабатывать данные по резервам предыдущего периода", Ложь);
	
	ОбновитьСтатусПоЗакрытымПериодам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачислениеИУдержаниеЗППриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержаниеПоИсполнительномуЛистуПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура РезервыОтпусковПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура МСФОПриИзменении(Элемент)
	
	Объект.ВидДвиженияМСФО = ?(Объект.МСФО, ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.Аккруал"), ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.РСБУ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьСтатусПоЗакрытымПериодам();
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачисленияПриИзменении(Элемент)
	ОбновитьСтатусПоЗакрытымПериодам();
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.ПериодНачисления", "ПериодНачисленияСтрокой", Модифицированность);
	ОбработатьИзменениеПериодНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Объект.ПериодНачисления), КонецМесяца(Объект.ПериодНачисления));
	ОписаниеОповещения     = Новый ОписаниеОповещения("ПериодНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбораПериода, Элементы.ПериодНачисленияСтрокой, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачисленияСтрокойНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПериодНачисления = РезультатВыбора.НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.ПериодНачисления", "ПериодНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПериодНачисленияПриИзменении", 0.3, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеОбработчикиСобытий

&НаКлиенте
Процедура ОбработчикОжиданияПериодНачисленияПриИзменении()

	ОбработатьИзменениеПериодНачисленияНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПериодНачисленияНаСервере()
	
	ОбновитьСтатусПоЗакрытымПериодам();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.НачисленияИУдержанияЗП_dbo_USER_INTEGR_PROV.Количество() > 0
		ИЛИ Объект.УдержанияПоИсполнительномуЛисту_dbo_USER_INTEGR_PROV.Количество() > 0 
		ИЛИ Объект.РезервыОтпусков_dbo_USER_INTEGR_RESERVS.Количество() > 0 Тогда
	
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_Заполнить", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Табличные части будут перезаполнены. Продолжить выполнение операции?", Режим, 0);
		
	Иначе
		
		ЗаполнитьНаСервере();
		Если Объект.НачисленияИУдержанияЗП_dbo_USER_INTEGR_PROV.Количество() > 0
			ИЛИ Объект.УдержанияПоИсполнительномуЛисту_dbo_USER_INTEGR_PROV.Количество() > 0 
			ИЛИ Объект.РезервыОтпусков_dbo_USER_INTEGR_RESERVS.Количество() > 0 Тогда
			Элементы.ФормаСформироватьОперациюБОСС.Доступность = Истина;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса_Заполнить(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	ЗаполнитьНаСервере();
	Если Объект.НачисленияИУдержанияЗП_dbo_USER_INTEGR_PROV.Количество() > 0
		ИЛИ Объект.УдержанияПоИсполнительномуЛисту_dbo_USER_INTEGR_PROV.Количество() > 0 
		ИЛИ Объект.РезервыОтпусков_dbo_USER_INTEGR_RESERVS.Количество() > 0 Тогда
		Элементы.ФормаСформироватьОперациюБОСС.Доступность = Истина;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОперациюБОСС(Команда)
	
	Если Объект.СторнируемыеДокументы.Количество() > 0 Тогда
		
		ТекстСообщения = "Табличная часть ""Документы-основания"" не пустая." + Символы.ПС;
			
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_СформироватьОперациюБОСС", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, ТекстСообщения + "Продолжить выполнение операции?", Режим, 0);
		
	Иначе
		
		//Элементы.ФормаСформироватьОперациюБОСС.Доступность = Ложь;
		СформироватьОперациюБОССНаСервере();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса_СформироватьОперациюБОСС(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	//Элементы.ФормаСформироватьОперациюБОСС.Доступность = Ложь;
	СформироватьОперациюБОССНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСторнируемыеДокументы(Команда)
	
	Если Объект.СторнируемыеДокументы.Количество() > 0 Тогда
	
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса_Заполнить_СторнируемыеДокументы", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Табличная часть ""Документы-основания"" будет перезаполнена. Продолжить выполнение операции?", Режим, 0);
		
	Иначе
		
		ЗаполнитьСторнируемыеДокументыНаСервере(); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса_Заполнить_СторнируемыеДокументы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	ЗаполнитьСторнируемыеДокументыНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСторнируемыеДокументыНаСервере()
	
	Объект.СторнируемыеДокументы.Очистить();
	
	СтруткураПараметров = Новый Структура();
	СтруткураПараметров.Вставить("Организация", 		Объект.Организация);
	СтруткураПараметров.Вставить("ПериодНачисления", 	Объект.ПериодНачисления);
	СтруткураПараметров.Вставить("ВидДвиженияМСФО", 	Объект.ВидДвиженияМСФО);
	
	ВидОперации = Новый Массив();
	Если Объект.НачисленияИУдержанияЗП Тогда
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.НачислениеИУдержаниеЗП"));
	КонецЕсли;
	Если Объект.УдержанияПоИсполнительномуЛисту Тогда
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.УдержаниеПоИсполнительномуЛисту"));
	КонецЕсли;
	Если Объект.РезервыОтпусков Тогда
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.РезервыОтпусков"));
	КонецЕсли;
	
	СтруткураПараметров.Вставить("ВидОперации", ВидОперации);
	
	МассивОперацийБОСС = НайтиДокументыОперацияБОСС_ПоРегистру(СтруткураПараметров);
	
	Для Каждого ТекДокумент Из МассивОперацийБОСС Цикл 
		
		НоваяСтрока = Объект.СторнируемыеДокументы.Добавить();
		НоваяСтрока.ДокументОснование = ТекДокумент;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УправлениеФормой()
	
	Элементы.ГруппаНачислениеИУдержаниеЗП_dbo_USER_INTEGR_PROV.Видимость 			= Объект.НачисленияИУдержанияЗП;
	Элементы.ГруппаУдержаниеПоИсполнительномуЛисту_dbo_USER_INTEGR_PROV.Видимость 	= Объект.УдержанияПоИсполнительномуЛисту;
	Элементы.ГруппаРезервыОтпусков_dbo_USER_INTEGR_RESERVS.Видимость 				= Объект.РезервыОтпусков;
	
	Элементы.ОбрабатыватьДанныеПоРезервамПредыдущегоПериода.Доступность				= Объект.РезервыОтпусков;
	Если НЕ Объект.РезервыОтпусков Тогда
		Объект.ОбрабатыватьДанныеПоРезервамПредыдущегоПериода = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Если Не ПолучитьНастройкиПодключения() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьсяКВнешнемуИсточникуДанныхMSSqlServer()Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-11 (#3782)
	//УстановитьПривилегированныйРежим(Истина);
	//
	//ЗапросПоВИД = Новый Запрос;
	//ЗапросПоВИД.Текст =     
	//	"ВЫБРАТЬ
	//	|	dbo_USER_INTEGR_PROV.Ссылка КАК Ссылка,
	//	|	dbo_USER_INTEGR_PROV.id КАК id,
	//	|	dbo_USER_INTEGR_PROV.INN КАК INN,
	//	|	dbo_USER_INTEGR_PROV.DateProv КАК DateProv,
	//	|	dbo_USER_INTEGR_PROV.Acc_dt КАК Acc_dt,
	//	|	dbo_USER_INTEGR_PROV.Acc_kt КАК Acc_kt,
	//	|	dbo_USER_INTEGR_PROV.Summa КАК Summa,
	//	|	dbo_USER_INTEGR_PROV.idSt КАК idSt,
	//	|	dbo_USER_INTEGR_PROV.idStructs КАК idStructs,
	//	|	dbo_USER_INTEGR_PROV.idObj КАК idObj,
	//	|	dbo_USER_INTEGR_PROV.idFun КАК idFun,
	//	|	dbo_USER_INTEGR_PROV.idDog КАК idDog,
	//	|	dbo_USER_INTEGR_PROV.KPP КАК KPP,
	//	|	dbo_USER_INTEGR_PROV.IFNS КАК IFNS,
	//	|	dbo_USER_INTEGR_PROV.RepPers КАК RepPers,
	//	|	dbo_USER_INTEGR_PROV.PostingDate КАК PostingDate,
	//	|	dbo_USER_INTEGR_PROV.GetRSBU КАК GetRSBU,
	//	|	ВЫБОР
	//	|		КОГДА &НачислениеИУдержаниеЗП
	//	|				И НЕ(dbo_USER_INTEGR_PROV.Acc_dt = ""70.01""
	//	|						И dbo_USER_INTEGR_PROV.Acc_kt = ""76.41"")
	//	|			ТОГДА 1
	//	|		ИНАЧЕ 2
	//	|	КОНЕЦ КАК ВидОперации
	//	|ИЗ
	//	|	ВнешнийИсточникДанных.ОК_ЗагрузкаЗнРДСизБОСС.Таблица.dbo_USER_INTEGR_PROV КАК dbo_USER_INTEGR_PROV
	//	|ГДЕ
	//	|	dbo_USER_INTEGR_PROV.INN = &Организация_ИНН
	//	|	И dbo_USER_INTEGR_PROV.PostingDate = &ДатаДокумента
	//	|	И dbo_USER_INTEGR_PROV.DateProv = &ПериодНачисления
	//	|	И (&НачислениеИУдержаниеЗП
	//	|				И НЕ(dbo_USER_INTEGR_PROV.Acc_dt = ""70.01""
	//	|						И dbo_USER_INTEGR_PROV.Acc_kt = ""76.41"")
	//	|			ИЛИ &УдержаниеПоИсполнительномуЛисту
	//	|				И dbo_USER_INTEGR_PROV.Acc_dt = ""70.01""
	//	|				И dbo_USER_INTEGR_PROV.Acc_kt = ""76.41"")
	//	|	И (dbo_USER_INTEGR_PROV.GetRSBU = 0
	//	|			ИЛИ dbo_USER_INTEGR_PROV.GetRSBU ЕСТЬ NULL
	//	|			ИЛИ dbo_USER_INTEGR_PROV.GetRSBU = НЕОПРЕДЕЛЕНО)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	dbo_USER_INTEGR_RESERVS.Ссылка,
	//	|	dbo_USER_INTEGR_RESERVS.id,
	//	|	dbo_USER_INTEGR_RESERVS.INN,
	//	|	dbo_USER_INTEGR_RESERVS.DateProv,
	//	|	dbo_USER_INTEGR_RESERVS.Acc_dt,
	//	|	dbo_USER_INTEGR_RESERVS.Acc_kt,
	//	|	dbo_USER_INTEGR_RESERVS.Summa,
	//	|	dbo_USER_INTEGR_RESERVS.idSt,
	//	|	dbo_USER_INTEGR_RESERVS.idStructs,
	//	|	dbo_USER_INTEGR_RESERVS.idObj,
	//	|	dbo_USER_INTEGR_RESERVS.idFun,
	//	|	NULL,
	//	|	NULL,
	//	|	NULL,
	//	|	NULL,
	//	|	dbo_USER_INTEGR_RESERVS.PostingDate,
	//	|	dbo_USER_INTEGR_RESERVS.GetRSBU,
	//	|	3
	//	|ИЗ
	//	|	ВнешнийИсточникДанных.ОК_ЗагрузкаЗнРДСизБОСС.Таблица.dbo_USER_INTEGR_RESERVS КАК dbo_USER_INTEGR_RESERVS
	//	|ГДЕ
	//	|	&РезервыОтпусков
	//	|	И dbo_USER_INTEGR_RESERVS.INN = &Организация_ИНН
	//	|	И dbo_USER_INTEGR_RESERVS.PostingDate = &ДатаДокумента
	//	|	И dbo_USER_INTEGR_RESERVS.DateProv = &ПериодНачисления
	//	|	И (dbo_USER_INTEGR_RESERVS.GetRSBU = 0
	//	|			ИЛИ dbo_USER_INTEGR_RESERVS.GetRSBU ЕСТЬ NULL
	//	|			ИЛИ dbo_USER_INTEGR_RESERVS.GetRSBU = НЕОПРЕДЕЛЕНО)";
	//
	//ЗапросПоВИД.УстановитьПараметр("ДатаДокумента",						Объект.ДатаДокумента);
	//ЗапросПоВИД.УстановитьПараметр("ПериодНачисления", 					Объект.ПериодНачисления);
	//ЗапросПоВИД.УстановитьПараметр("Организация_ИНН",					Объект.Организация.ИНН);
	//
	//ЗапросПоВИД.УстановитьПараметр("НачислениеИУдержаниеЗП",			Объект.НачисленияИУдержанияЗП);
	//ЗапросПоВИД.УстановитьПараметр("УдержаниеПоИсполнительномуЛисту",	Объект.УдержанияПоИсполнительномуЛисту);
	//ЗапросПоВИД.УстановитьПараметр("РезервыОтпусков",					Объект.РезервыОтпусков);
	//
	////ЗапросПоВИД.УстановитьПараметр("Перечисление_НачислениеИУдержаниеЗП",			ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.НачислениеИУдержаниеЗП"));
	////ЗапросПоВИД.УстановитьПараметр("Перечисление_УдержаниеПоИсполнительномуЛисту",	ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.УдержаниеПоИсполнительномуЛисту"));
	////ЗапросПоВИД.УстановитьПараметр("Перечисление_РезервыОтпусков",					ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.РезервыОтпусков"));
	//
	//РезультатЗапроса = ЗапросПоВИД.Выполнить();
	//тзРезультат = РезультатЗапроса.Выгрузить();
	//
	//УстановитьПривилегированныйРежим(Ложь);	
	Если РежимРаботыСБазойДанных = "запрос" Тогда
		тзРезультат = ПолучитьДанныеБОССПоЗапросу();
	Иначе
		тзРезультат = ПолучитьДанныеБОССПоВИД();
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-11 (#3782)
	
	ОбработатьРезультат(тзРезультат);
	
	ОбновитьСтатусПоЗакрытымПериодам();
	
	СтруткураПараметров = Новый Структура();
	СтруткураПараметров.Вставить("Организация", 		Объект.Организация);
	СтруткураПараметров.Вставить("ПериодНачисления", 	Объект.ПериодНачисления);
	СтруткураПараметров.Вставить("МСФО", 				Объект.МСФО);
	
	ВидОперации = Новый Массив();
	Если Объект.НачисленияИУдержанияЗП Тогда
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.НачислениеИУдержаниеЗП"));
	КонецЕсли;
	Если Объект.УдержанияПоИсполнительномуЛисту Тогда
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.УдержаниеПоИсполнительномуЛисту"));
	КонецЕсли;
	Если Объект.РезервыОтпусков Тогда
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.РезервыОтпусков"));
	КонецЕсли;
	
	СтруткураПараметров.Вставить("ВидОперации", ВидОперации);
	МассивОперацийБОСС = НайтиДокументыОперацияБОСС_ПоДокументу(СтруткураПараметров);
	
	Для Каждого ТекДокумент Из МассивОперацийБОСС Цикл 
		
		ТекстСообщения = НСтр("ru = 'Для вида операции %1 уже создан документ %2. Период РСБУ %3.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
							ТекДокумент.ВидОперации, 
							ТекДокумент, 
							?(Объект.ПериодЗакрыт_РСБУ, "Закрыт, документ будет отсторнирован", "Открыт, документ будет перезаполнен")
							);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-11 (#3782)
&НаСервере
Функция ПолучитьДанныеБОССПоВИД()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПоВИД = Новый Запрос;
	ЗапросПоВИД.Текст =     
		"ВЫБРАТЬ
		|	dbo_USER_INTEGR_PROV.Ссылка КАК Ссылка,
		|	dbo_USER_INTEGR_PROV.id КАК id,
		|	dbo_USER_INTEGR_PROV.INN КАК INN,
		|	dbo_USER_INTEGR_PROV.DateProv КАК DateProv,
		|	dbo_USER_INTEGR_PROV.Acc_dt КАК Acc_dt,
		|	dbo_USER_INTEGR_PROV.Acc_kt КАК Acc_kt,
		|	dbo_USER_INTEGR_PROV.Summa КАК Summa,
		|	dbo_USER_INTEGR_PROV.idSt КАК idSt,
		|	dbo_USER_INTEGR_PROV.idStructs КАК idStructs,
		|	dbo_USER_INTEGR_PROV.idObj КАК idObj,
		|	dbo_USER_INTEGR_PROV.idFun КАК idFun,
		|	dbo_USER_INTEGR_PROV.idDog КАК idDog,
		|	dbo_USER_INTEGR_PROV.KPP КАК KPP,
		|	dbo_USER_INTEGR_PROV.IFNS КАК IFNS,
		|	dbo_USER_INTEGR_PROV.RepPers КАК RepPers,
		|	dbo_USER_INTEGR_PROV.PostingDate КАК PostingDate,
		|	dbo_USER_INTEGR_PROV.GetRSBU КАК GetRSBU,
		|	ВЫБОР
		|		КОГДА &НачислениеИУдержаниеЗП
		|				И НЕ(dbo_USER_INTEGR_PROV.Acc_dt = ""70.01""
		|						И dbo_USER_INTEGR_PROV.Acc_kt = ""76.41"")
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ВидОперации
		|ИЗ
		|	ВнешнийИсточникДанных.ОК_ЗагрузкаЗнРДСизБОСС.Таблица.dbo_USER_INTEGR_PROV КАК dbo_USER_INTEGR_PROV
		|ГДЕ
		|	dbo_USER_INTEGR_PROV.INN = &Организация_ИНН
		|	И dbo_USER_INTEGR_PROV.PostingDate = &ДатаДокумента
		|	И dbo_USER_INTEGR_PROV.DateProv = &ПериодНачисления
		|	И (&НачислениеИУдержаниеЗП
		|				И НЕ(dbo_USER_INTEGR_PROV.Acc_dt = ""70.01""
		|						И dbo_USER_INTEGR_PROV.Acc_kt = ""76.41"")
		|			ИЛИ &УдержаниеПоИсполнительномуЛисту
		|				И dbo_USER_INTEGR_PROV.Acc_dt = ""70.01""
		|				И dbo_USER_INTEGR_PROV.Acc_kt = ""76.41"")
		|	И (dbo_USER_INTEGR_PROV.GetRSBU = 0
		|			ИЛИ dbo_USER_INTEGR_PROV.GetRSBU ЕСТЬ NULL
		|			ИЛИ dbo_USER_INTEGR_PROV.GetRSBU = НЕОПРЕДЕЛЕНО)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	dbo_USER_INTEGR_RESERVS.Ссылка,
		|	dbo_USER_INTEGR_RESERVS.id,
		|	dbo_USER_INTEGR_RESERVS.INN,
		|	dbo_USER_INTEGR_RESERVS.DateProv,
		|	dbo_USER_INTEGR_RESERVS.Acc_dt,
		|	dbo_USER_INTEGR_RESERVS.Acc_kt,
		|	dbo_USER_INTEGR_RESERVS.Summa,
		|	dbo_USER_INTEGR_RESERVS.idSt,
		|	dbo_USER_INTEGR_RESERVS.idStructs,
		|	dbo_USER_INTEGR_RESERVS.idObj,
		|	dbo_USER_INTEGR_RESERVS.idFun,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	dbo_USER_INTEGR_RESERVS.PostingDate,
		|	dbo_USER_INTEGR_RESERVS.GetRSBU,
		|	3
		|ИЗ
		|	ВнешнийИсточникДанных.ОК_ЗагрузкаЗнРДСизБОСС.Таблица.dbo_USER_INTEGR_RESERVS КАК dbo_USER_INTEGR_RESERVS
		|ГДЕ
		|	&РезервыОтпусков
		|	И dbo_USER_INTEGR_RESERVS.INN = &Организация_ИНН
		|	И dbo_USER_INTEGR_RESERVS.PostingDate = &ДатаДокумента
		|	И dbo_USER_INTEGR_RESERVS.DateProv = &ПериодНачисления
		|	И (dbo_USER_INTEGR_RESERVS.GetRSBU = 0
		|			ИЛИ dbo_USER_INTEGR_RESERVS.GetRSBU ЕСТЬ NULL
		|			ИЛИ dbo_USER_INTEGR_RESERVS.GetRSBU = НЕОПРЕДЕЛЕНО)";
	
	ЗапросПоВИД.УстановитьПараметр("ДатаДокумента",						Объект.ДатаДокумента);
	ЗапросПоВИД.УстановитьПараметр("ПериодНачисления", 					Объект.ПериодНачисления);
	ЗапросПоВИД.УстановитьПараметр("Организация_ИНН",					Объект.Организация.ИНН);
	
	ЗапросПоВИД.УстановитьПараметр("НачислениеИУдержаниеЗП",			Объект.НачисленияИУдержанияЗП);
	ЗапросПоВИД.УстановитьПараметр("УдержаниеПоИсполнительномуЛисту",	Объект.УдержанияПоИсполнительномуЛисту);
	ЗапросПоВИД.УстановитьПараметр("РезервыОтпусков",					Объект.РезервыОтпусков);
	
	РезультатЗапроса = ЗапросПоВИД.Выполнить();
	тзРезультат = РезультатЗапроса.Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат тзРезультат;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеБОССПоЗапросу()
	
	Перем Выборка;
	
	// инициализация ТЗ
	ТабРезультат = Новый ТаблицаЗначений;
	ТабРезультат.Колонки.Добавить("id");
	ТабРезультат.Колонки.Добавить("INN");
	ТабРезультат.Колонки.Добавить("DateProv");
	ТабРезультат.Колонки.Добавить("Acc_dt");
	ТабРезультат.Колонки.Добавить("Acc_kt");
	ТабРезультат.Колонки.Добавить("Summa");
	ТабРезультат.Колонки.Добавить("idSt");
	ТабРезультат.Колонки.Добавить("idStructs");
	ТабРезультат.Колонки.Добавить("idObj");
	ТабРезультат.Колонки.Добавить("idFun");
	ТабРезультат.Колонки.Добавить("idDog");
	ТабРезультат.Колонки.Добавить("KPP");
	ТабРезультат.Колонки.Добавить("IFNS");
	ТабРезультат.Колонки.Добавить("RepPers");                  
	ТабРезультат.Колонки.Добавить("PostingDate");
	ТабРезультат.Колонки.Добавить("GetRSBU");
	ТабРезультат.Колонки.Добавить("ВидОперации");
	
	ТекстЗапроса = "select
		|	[id],
		|	[INN],
		|	[DateProv],
		|	[Acc_dt],
		|	[Acc_kt],
		|	[Summa],
		|	[idSt],
		|	[idStructs],
		|	[idObj],
		|	[idFun],
		|	[idDog],
		|	[KPP],
		|	[IFNS],
		|	[RepPers],
		|	[PostingDate],
		|	[GetRSBU],
		|	CASE
		|	 when " + ?(Объект.НачисленияИУдержанияЗП, "1=1", "1=0") + " and NOT ([Acc_dt] = '70.01' and [Acc_kt] = '76.41') then 1
		|	 else 2
		|	END AS TypeOperation
		|FROM
		|	[" + БазаДанных + "].[dbo].[USER_INTEGR_PROV]
		|where
		|	[INN] = " + Объект.Организация.ИНН + "
		|	and [PostingDate] = '" + Формат(Объект.ДатаДокумента, "ДФ='yyyy-MM-dd H:mm:ss'") + "'
		|	and [DateProv] = '" + Формат(Объект.ПериодНачисления, "ДФ='yyyy-MM-dd H:mm:ss'") + "'
		|	and (" + ?(Объект.НачисленияИУдержанияЗП, "1=1", "1=0") + " and NOT ([Acc_dt] = '70.01' and [Acc_kt] = '76.41')
		|			or " + ?(Объект.УдержанияПоИсполнительномуЛисту, "1=1", "1=0") + " and [Acc_dt] = '70.01' and [Acc_kt] = '76.41')
		|	and ([GetRSBU] = 0 or [GetRSBU] IS NULL)
		|
		|UNION ALL
		|
		|select
		|	[id],
		|	[INN],
		|	[DateProv],
		|	[Acc_dt],
		|	[Acc_kt],
		|	[Summa],
		|	[idSt],
		|	[idStructs],
		|	[idObj],
		|	[idFun],
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	[PostingDate],
		|	[GetRSBU],
		|	3
		|FROM
		|	[" + БазаДанных + "].[dbo].[USER_INTEGR_RESERVS]
		|where
		|	" + ?(Объект.РезервыОтпусков, "1=1", "1=0") + "
		|	and [INN] = " + Объект.Организация.ИНН + "
		|	and [PostingDate] = '" + Формат(Объект.ДатаДокумента, "ДФ='yyyy-MM-dd H:mm:ss'") + "'
		|	and [DateProv] = '" + Формат(Объект.ПериодНачисления, "ДФ='yyyy-MM-dd H:mm:ss'") + "'
		|	and ([GetRSBU] = 0 or [GetRSBU] IS NULL)";
	
	// выполняем запрос к внешнему источнику данных,
	// заполняем таблицу значений	
	
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
	СоединениеАДО.ConnectionTimeOut = 600; 
	СоединениеАДО.CommandTimeOut = 600; 
	СоединениеАДО.CursorLocation = 3; 	
	
	Попытка
		СоединениеАДО.Open(СтрокаСоединения);			
	Исключение 
		ТекстСообщения = "Не удалось выполнить соединение с базой "+ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Загрузка данных по ЗП из БОСС",УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения); 			 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат ТабРезультат;
	КонецПопытки;
		
	ЗапросВыполенен = ВыполнитьЗапросADO(ТекстЗапроса, СоединениеАДО, Выборка);
	
	Если НЕ ЗапросВыполенен Тогда
		
		ТекстСообщения = НСтр("ru = 'Неудачная попытка выполнения запроса к внешнему источнику данных,
		|строка соединения: %1");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСоединения);
		ЗаписьЖурналаРегистрации("Загрузка данных по ЗП из БОСС", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		СоединениеАДО.Close();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат ТабРезультат;
		
	КонецЕсли;
	
	Пока Не Выборка.EOF() Цикл 
		fields = FieldsСтруктура(Выборка.Fields);
		СтрокаТаб = ТабРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, fields);	
		СтрокаТаб.ВидОперации = Число(fields.TypeOperation);
		Выборка.MoveNext(); 
	КонецЦикла;
	
	Возврат ТабРезультат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗапросADO(Запрос,СоединениеАДО,Выборка = Неопределено)
	
	РезВыполнения = Ложь;
	
	ЗапросАДО = Новый COMОбъект("ADODB.Command");
	ЗапросАДО.CommandTimeout = 600;
	ЗапросАДО.ActiveConnection=СоединениеАДО; 	
	ЗапросАДО.CommandText=Запрос; 
	Попытка
		Выборка = ЗапросАДО.Execute(); 		
		РезВыполнения = Истина;
	Исключение 
		ЗаписьЖурналаРегистрации("Загрузка данных по ЗП из БОСС", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось выполнить запрос!"+Символы.ПС+Строка(Запрос)+Символы.ПС+Строка(ОписаниеОшибки()));
	КонецПопытки; 
	
	возврат РезВыполнения;  
КонецФункции

&НаСервереБезКонтекста
Функция FieldsСтруктура(fields)
	
	РезВыполнения = новый Структура;
	Для каждого стр из fields Цикл
		
		РезВыполнения.Вставить(стр.name, ЧислоВСтроку(стр.value));
		
	КонецЦикла;
	
	Возврат РезВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЧислоВСтроку(Значение)
	
	РезВыполнения = Значение;
	
	Если ТипЗнч(Значение) = Тип("Число") тогда
		РезВыполнения = Формат(Значение, "ЧГ=0");			
	КонецЕсли;	
	
	возврат РезВыполнения;
	
КонецФункции

//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-11 (#3782)

&НаСервере
Процедура ОбработатьРезультат(Результат);

	Объект.НачисленияИУдержанияЗП_dbo_USER_INTEGR_PROV.Очистить();
	Объект.УдержанияПоИсполнительномуЛисту_dbo_USER_INTEGR_PROV.Очистить();
	Объект.РезервыОтпусков_dbo_USER_INTEGR_RESERVS.Очистить();
	
	Объект.НачисленияИУдержанияЗП_ОборотыБОСС.Очистить();
	Объект.УдержанияПоИсполнительномуЛисту_ОборотыБОСС.Очистить();
	Объект.РезервыОтпусков_ОборотыБОСС.Очистить();
	
	Объект.СторнируемыеДокументы.Очистить();
	
	Объект.ОперацияБОСС_НачисленияИУдержанияЗП 			= Неопределено;
	Объект.ОперацияБОСС_УдержанияПоИсполнительномуЛисту = Неопределено;
	Объект.ОперацияБОСС_РезервыОтпусков 				= Неопределено;
	
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("ВидОперации", 1);
	тзДляЗаполнения = Результат.Скопировать(СтруктураОтбора);
	Объект.НачисленияИУдержанияЗП_dbo_USER_INTEGR_PROV.Загрузить(тзДляЗаполнения);
	
	СтруктураОтбора.Вставить("ВидОперации", 2);
	тзДляЗаполнения = Результат.Скопировать(СтруктураОтбора);
	Объект.УдержанияПоИсполнительномуЛисту_dbo_USER_INTEGR_PROV.Загрузить(тзДляЗаполнения);
	
	СтруктураОтбора.Вставить("ВидОперации", 3);
	тзДляЗаполнения = Результат.Скопировать(СтруктураОтбора);
	Объект.РезервыОтпусков_dbo_USER_INTEGR_RESERVS.Загрузить(тзДляЗаполнения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_ок_АналитикаСчетовАксапта.СчетАксапты КАК СчетАксапты,
		|	бит_ок_АналитикаСчетовАксапта.ТипСубконто1 КАК ТипСубконто1,
		|	бит_ок_АналитикаСчетовАксапта.ТипСубконто2 КАК ТипСубконто2,
		|	бит_ок_АналитикаСчетовАксапта.ТипСубконто3 КАК ТипСубконто3,
		|	бит_ок_АналитикаСчетовАксапта.ТипСубконто4 КАК ТипСубконто4,
		|	бит_ок_АналитикаСчетовАксапта.ТипСубконто5 КАК ТипСубконто5,
		|	бит_ок_АналитикаСчетовАксапта.ТипСубконто6 КАК ТипСубконто6
		|ИЗ
		|	РегистрСведений.бит_ок_АналитикаСчетовАксапта КАК бит_ок_АналитикаСчетовАксапта
		|ГДЕ
		|	бит_ок_АналитикаСчетовАксапта.ТипДокумента.Код = ""ОБ""";
	
	РезультатЗапроса = Запрос.Выполнить();
	АналитикаСчетов = РезультатЗапроса.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиМеханизмаИмпортаДанных.Группа КАК Группа,
		|	НастройкиМеханизмаИмпортаДанных.ИмяНастройки КАК ИмяНастройки,
		|	НастройкиМеханизмаИмпортаДанных.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК НастройкиМеханизмаИмпортаДанных
		|ГДЕ
		|	НастройкиМеханизмаИмпортаДанных.Группа = ""Служебные элементы Не сопоставлено""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СлужебныеЭлементыНеСопоставлено = РезультатЗапроса.Выгрузить();	
	КэшПоискаЗначений = Новый Соответствие;
	
	Значение1С_НеСопоставлено = ПолучитьСлужебныйЭлементНеСопоставлено("Статьи затрат");
	
	Для Каждого СтрокаИнтТабл Из Результат Цикл 
		
		Если СтрокаИнтТабл.ВидОперации = 1 Тогда
			НоваяСтрокаБОСС = Объект.НачисленияИУдержанияЗП_ОборотыБОСС.Добавить();
		ИначеЕсли СтрокаИнтТабл.ВидОперации = 2 Тогда
			НоваяСтрокаБОСС = Объект.УдержанияПоИсполнительномуЛисту_ОборотыБОСС.Добавить();
		ИначеЕсли СтрокаИнтТабл.ВидОперации = 3 Тогда
			НоваяСтрокаБОСС = Объект.РезервыОтпусков_ОборотыБОСС.Добавить();
		КонецЕсли;
		
		НоваяСтрокаБОСС.id 				= СтрокаИнтТабл.id;
		
		НоваяСтрокаБОСС.СчетДт 			= СтрокаИнтТабл.Acc_dt;
		НоваяСтрокаБОСС.СчетКт 			= СтрокаИнтТабл.Acc_kt;
		НоваяСтрокаБОСС.Сумма           = СтрокаИнтТабл.Summa;
		НоваяСтрокаБОСС.ВидДвиженияМСФО = Объект.ВидДвиженияМСФО;
		
		Если ЗначениеЗаполнено(НоваяСтрокаБОСС.СчетДт)
			И СтрДлина(НоваяСтрокаБОСС.СчетДт) > 1 Тогда
			
			АналитикаСчетаДт = АналитикаСчетов.Найти(Лев(НоваяСтрокаБОСС.СчетДт, 2), "СчетАксапты");
			Если АналитикаСчетаДт <> Неопределено Тогда
				СопоставитьСубконто(НоваяСтрокаБОСС, СтрокаИнтТабл, АналитикаСчетаДт, "СубконтоБОССДт", "Субконто1СДт");
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрокаБОСС.СчетКт)
			И СтрДлина(НоваяСтрокаБОСС.СчетКт) > 1 Тогда
			
			АналитикаСчетаКт = АналитикаСчетов.Найти(Лев(НоваяСтрокаБОСС.СчетКт, 2), "СчетАксапты");
			Если АналитикаСчетаКт <> Неопределено Тогда
				СопоставитьСубконто(НоваяСтрокаБОСС, СтрокаИнтТабл, АналитикаСчетаКт, "СубконтоБОССКт", "Субконто1СКт");
			КонецЕсли;
		
		КонецЕсли;
		
		ЗначениеБОСС 				= СтрокаИнтТабл["idSt"];
		//Значение1С 				= Справочники.СтатьиЗатрат.НайтиПоКоду(ЗначениеБОСС);
		Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = Справочники.СтатьиЗатрат.НайтиПоКоду(Параметр1)", ЗначениеБОСС);
		
		//НоваяСтрокаБОСС.Содержание = "(" + ЗначениеБОСС + ") " + ?(ЗначениеЗаполнено(Значение1С), Значение1С, Значение1С_НеСопоставлено);
		НоваяСтрокаБОСС.Содержание = ?(ЗначениеЗаполнено(Значение1С), Значение1С, Значение1С_НеСопоставлено);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперациюБОССНаСервере()
	
	ОбновитьСтатусПоЗакрытымПериодам();
	
	Если НЕ ВыполнитьПроверкуСторнирующихДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	СтруткураПараметров = Новый Структура();
	СтруткураПараметров.Вставить("Организация", 		Объект.Организация);
	СтруткураПараметров.Вставить("ПериодНачисления", 	Объект.ПериодНачисления);
	СтруткураПараметров.Вставить("ДатаДокумента", 		Объект.ДатаДокумента);
	СтруткураПараметров.Вставить("МСФО", 				Объект.МСФО);
	СтруткураПараметров.Вставить("ВидДвиженияМСФО", 	Объект.ВидДвиженияМСФО);
	СтруткураПараметров.Вставить("ПериодЗакрыт_РСБУ", 	Объект.ПериодЗакрыт_РСБУ);
	СтруткураПараметров.Вставить("ПериодЗакрыт_МСФО", 	Объект.ПериодЗакрыт_МСФО);
	СтруткураПараметров.Вставить("ОбрабатыватьДанныеПоРезервамПредыдущегоПериода", Объект.ОбрабатыватьДанныеПоРезервамПредыдущегоПериода);
	
	Если Объект.НачисленияИУдержанияЗП_ОборотыБОСС.Количество() > 0 Тогда
		
		пСторнируемыеДокументы = Объект.СторнируемыеДокументы.Выгрузить();
		МассивУдаляемыхСтрок = Новый Массив();
		Для Каждого СтрокаТЗ Из пСторнируемыеДокументы Цикл
			Если СтрокаТЗ.ДокументОснование.ВидОперации <> ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.НачислениеИУдержаниеЗП") Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаДляУдаления Из МассивУдаляемыхСтрок Цикл 
			пСторнируемыеДокументы.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		СтруткураПараметров.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.НачислениеИУдержаниеЗП"));
		СтруткураПараметров.Вставить("СторнируемыеДокументы", 	пСторнируемыеДокументы);
		
		Объект.ОперацияБОСС_НачисленияИУдержанияЗП = СоздатьНовыйДокументОперацияБОСС(СтруткураПараметров, Объект.НачисленияИУдержанияЗП_ОборотыБОСС.Выгрузить());
		Если ЗначениеЗаполнено(Объект.ОперацияБОСС_НачисленияИУдержанияЗП) Тогда
			МассивIDСтрок = Объект.НачисленияИУдержанияЗП_ОборотыБОСС.Выгрузить(,"id").ВыгрузитьКолонку("id");
			УстановитьПризнакGetRSBU(МассивIDСтрок, "dbo_USER_INTEGR_PROV");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.УдержанияПоИсполнительномуЛисту_ОборотыБОСС.Количество() > 0 Тогда
		
		пСторнируемыеДокументы = Объект.СторнируемыеДокументы.Выгрузить();
		МассивУдаляемыхСтрок = Новый Массив();
		Для Каждого СтрокаТЗ Из пСторнируемыеДокументы Цикл
			Если СтрокаТЗ.ДокументОснование.ВидОперации <> ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.УдержаниеПоИсполнительномуЛисту") Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаДляУдаления Из МассивУдаляемыхСтрок Цикл 
			пСторнируемыеДокументы.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		СтруткураПараметров.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.УдержаниеПоИсполнительномуЛисту"));
		СтруткураПараметров.Вставить("СторнируемыеДокументы", 	пСторнируемыеДокументы);
		
		Объект.ОперацияБОСС_УдержанияПоИсполнительномуЛисту = СоздатьНовыйДокументОперацияБОСС(СтруткураПараметров, Объект.УдержанияПоИсполнительномуЛисту_ОборотыБОСС.Выгрузить());
		Если ЗначениеЗаполнено(Объект.ОперацияБОСС_УдержанияПоИсполнительномуЛисту) Тогда
			МассивIDСтрок = Объект.УдержанияПоИсполнительномуЛисту_ОборотыБОСС.Выгрузить(,"id").ВыгрузитьКолонку("id");
			УстановитьПризнакGetRSBU(МассивIDСтрок, "dbo_USER_INTEGR_PROV");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.РезервыОтпусков_ОборотыБОСС.Количество() > 0 Тогда
		
		пСторнируемыеДокументы = Объект.СторнируемыеДокументы.Выгрузить();
		МассивУдаляемыхСтрок = Новый Массив();
		Для Каждого СтрокаТЗ Из пСторнируемыеДокументы Цикл
			Если СтрокаТЗ.ДокументОснование.ВидОперации <> ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.РезервыОтпусков") Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаДляУдаления Из МассивУдаляемыхСтрок Цикл 
			пСторнируемыеДокументы.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		СтруткураПараметров.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.РезервыОтпусков"));
		СтруткураПараметров.Вставить("СторнируемыеДокументы", 	пСторнируемыеДокументы);
		
		Объект.ОперацияБОСС_РезервыОтпусков = СоздатьНовыйДокументОперацияБОСС(СтруткураПараметров, Объект.РезервыОтпусков_ОборотыБОСС.Выгрузить());
		Если ЗначениеЗаполнено(Объект.ОперацияБОСС_РезервыОтпусков) Тогда
			МассивIDСтрок = Объект.РезервыОтпусков_ОборотыБОСС.Выгрузить(,"id").ВыгрузитьКолонку("id");
			УстановитьПризнакGetRSBU(МассивIDСтрок, "dbo_USER_INTEGR_RESERVS");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодключитьсяКВнешнемуИсточникуДанныхMSSqlServer() 
	
	ПараметрыСоединения = ВнешниеИсточникиДанных.ОК_ЗагрузкаЗнРДСизБОСС.ПолучитьОбщиеПараметрыСоединения();
	ПараметрыСоединения.АутентификацияСтандартная 	= Истина;
	ПараметрыСоединения.АутентификацияОС 			= Ложь;
	ПараметрыСоединения.ИмяПользователя 			= ПользовательSQL;
	ПараметрыСоединения.Пароль 						= ПарольSQL;
	ПараметрыСоединения.СтрокаСоединения 			= СтрокаСоединения;
	ПараметрыСоединения.СУБД 						= "MSSQLServer";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ВнешниеИсточникиДанных.ОК_ЗагрузкаЗнРДСизБОСС.УстановитьПараметрыСоединенияСеанса(ПараметрыСоединения);
		ВнешниеИсточникиДанных.ОК_ЗагрузкаЗнРДСизБОСС.УстановитьСоединение();
		ТекстСообщения = НСтр("ru = 'Подключение к внешнему источнику данных выполнено успешно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Истина;
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		ТекстСообщения = НСтр("ru = 'Не удалось подключиться к внешнему источнику данных'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
 
КонецФункции

&НаСервере
Функция ПолучитьНастройкиПодключения() 	
	
	Отказ			= Ложь;
	ТекстСообщения	= "";
	
	Адрес 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаЗнРДСизБОСС", "Сервер");
	ПользовательSQL = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаЗнРДСизБОСС", "Логин");
	ПарольSQL 		= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаЗнРДСизБОСС", "Пароль");
	БазаДанных 		= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаЗнРДСизБОСС", "База");
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-11 (#3782)
	РежимРаботыСБазойДанных = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаЗнРДСизБОСС", "РежимРаботыСБазойДанных", "ВИД");
	РежимРаботыСБазойДанных = НРег(РежимРаботыСБазойДанных);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-11 (#3782)
	
	Если Адрес = Неопределено Тогда  
		ТекстСообщения	= ТекстСообщения + "Не указан параметр ""Сервер"" подключения." + Символы.ПС;
	КонецЕсли;
	Если ПользовательSQL = Неопределено Тогда  
		ТекстСообщения	= ТекстСообщения + "Не указан параметр ""Логин"" подключения." + Символы.ПС;
	КонецЕсли;
	Если ПарольSQL = Неопределено Тогда  
		ТекстСообщения = ТекстСообщения + "Не указан параметр ""Пароль"" подключения." + Символы.ПС;
	КонецЕсли;	
	Если БазаДанных = Неопределено Тогда  
		ТекстСообщения = ТекстСообщения + "Не указан параметр ""База"" подключения." + Символы.ПС;
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда 
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		СтрокаСоединения = "driver={SQL Server};server=" + Адрес + ";uid=" + ПользовательSQL + ";pwd=" + ПарольSQL + ";Database=" + БазаДанных;    
		
	КонецЕсли;	
	
	Возврат НЕ Отказ;

КонецФункции

&НаСервере
Процедура СопоставитьСубконто(Приемник, Источник, АналитикаСчета, ИмяРеквизитаСубконтоБОСС, ИмяРеквизитаСубконто1С)
	
	Для Инд = 1 По 6 Цикл
		
		Если ЗначениеЗаполнено(АналитикаСчета["ТипСубконто" + Инд]) Тогда
			
			СоответствиеТипуСубконто = ПолучитьСоответствиеТипуСубконто(Приемник, Источник, АналитикаСчета, АналитикаСчета["ТипСубконто" + Инд]);
			
			Если СоответствиеТипуСубконто = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Не найдено соответствие по типу субконто ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(АналитикаСчета["ТипСубконто" + Инд]));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Иначе
				
				Приемник[ИмяРеквизитаСубконтоБОСС + Инд] = СоответствиеТипуСубконто.ЗначениеБОСС;
				
				Если НЕ ЗначениеЗаполнено(СоответствиеТипуСубконто.Значение1С) Тогда
					
					Приемник[ИмяРеквизитаСубконто1С + Инд] = СоответствиеТипуСубконто.Значение1С_НеСопоставлено;
					Приемник.НеСопоставлено = Истина;
					
					ТекстСообщения = НСтр("ru = 'Не найдено значение 1С по соответствию типа ""%1"" и значения БОСС ""%2""'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(АналитикаСчета["ТипСубконто" + Инд]), СоответствиеТипуСубконто.ЗначениеБОСС);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Иначе
					Приемник[ИмяРеквизитаСубконто1С + Инд] = СоответствиеТипуСубконто.Значение1С;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеТипуСубконто(Приемник, Источник, АналитикаСчета, ТипСубконто)
	
	//Подразделение						idStructs
	//Объекты строительства				idObj
	//Статьи затрат						idSt
	//ЦФО								idFun
	//Месяцы начисления					DateProv
	//Работники организаций				RepPers
	//Договоры							idDog
	//Регистрации в налоговом органе	KPP + IFNS + INN
	//Прочие доходы и расходы			idSt

	//Перем Организация_ОкейЛоджистикс;
	//Перем Организация_Окей;
	//Перем Организация_ДОРИНДА;
	//Перем Организация_ОкейГрупп;
	
	Результат 					= Неопределено;
	ЗначениеБОСС 				= Неопределено;
	Значение1С 					= Неопределено;
	Значение1С_НеСопоставлено 	= Неопределено;
	
	Если ТипЗнч(ТипСубконто) <> Тип("СправочникСсылка.бит_ОбъектыСистемы") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипЗначенияСубконто = ТипСубконто.ТипЗначенияОбъекта.Получить();
	Если ТипЗначенияСубконто = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ЗначениеБОСС 				= Источник["idStructs"];
		Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("Подразделения организаций");
		Если Ложь И Объект.Организация = Организация_Окей И АналитикаСчета.СчетАксапты = "20" Тогда
			Значение1С 				= ВыполнитьСКэшем("РезультатВыполнения = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Параметр1)", "000000220");
		ИначеЕсли Ложь И Объект.Организация = Организация_Окей И АналитикаСчета.СчетАксапты = "26" Тогда
			Значение1С 				= ВыполнитьСКэшем("РезультатВыполнения = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Параметр1)", "000000207");
		ИначеЕсли Ложь И Объект.Организация = Организация_Окей Тогда
			Значение1С 				= ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Иначе
			Значение1С 				= ВыполнитьСКэшем("РезультатВыполнения = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(Параметр1)", ЗначениеБОСС);
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияСубконто = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		ЗначениеБОСС 				= Источник["idObj"];
		Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("Объекты строительства");
		Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Параметр1, Параметр2)", Справочники.бит_ВидыСоответствийАналитик.inventlocationid_ОбъектыСтроительства, ЗначениеБОСС);
		
	ИначеЕсли ТипЗначенияСубконто = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ЗначениеБОСС 				= Источник["idSt"];
		Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("Статьи затрат");
		Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = Справочники.СтатьиЗатрат.НайтиПоКоду(Параметр1)", ЗначениеБОСС);
		
	ИначеЕсли ТипЗначенияСубконто = Тип("СправочникСсылка.Подразделения") Тогда
		ЗначениеБОСС 				= Источник["idFun"];
		Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("ЦФО");
		Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Параметр1, Параметр2)", Справочники.бит_ВидыСоответствийАналитик.Function_ЦФО, ЗначениеБОСС);
		
	ИначеЕсли ТипЗначенияСубконто = Тип("СправочникСсылка.рс_МесяцыНачисления") Тогда
		ЗначениеБОСС 				= Источник["DateProv"];
		Значение1С_НеСопоставлено	= ПредопределенноеЗначение("Справочник.рс_МесяцыНачисления.НеCопоставлено");
		Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = Справочники.рс_МесяцыНачисления.НайтиПоРеквизиту(Параметр1, Параметр2)", "Дата", ЗначениеБОСС);
		
	ИначеЕсли ТипЗначенияСубконто = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ЗначениеБОСС 				= Источник["RepPers"];
		Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("Физические лица");
		Если Ложь И АналитикаСчета.СчетАксапты = "70" Тогда
			Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = Справочники.ФизическиеЛица.НайтиПоКоду(Параметр1)", "00000001");
		Иначе
			Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = Справочники.ФизическиеЛица.НайтиПоРеквизиту(Параметр1, Параметр2)", "ок_КодФизическогоЛицаБОСС", ЗначениеБОСС);
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияСубконто = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗначениеБОСС 				= Источник["idDog"];
		Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("Договоры контрагентов");
		Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Параметр1)", ЗначениеБОСС);
		
	ИначеЕсли ТипЗначенияСубконто = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗначениеБОСС 				= "";
		Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("Контрагенты");
		ЗначениеБОССДоговор			= Источник["idDog"];
		Значение1СДоговор 			= ВыполнитьСКэшем("РезультатВыполнения = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Параметр1)", ЗначениеБОССДоговор);
		Значение1С 					= ?(ЗначениеЗаполнено(Значение1СДоговор), Значение1СДоговор.Владелец, Неопределено);
		
	ИначеЕсли ТипЗначенияСубконто = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		ЗначениеБОСС 				= Источник["KPP"] + Источник["IFNS"] + Источник["INN"];
		Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("Регистрации в налоговом органе");
		пОрганизация 				= ?(ЗначениеЗаполнено(Объект.Организация), Объект.Организация, ВыполнитьСКэшем("РезультатВыполнения = Справочники.Организации.НайтиПоРеквизиту(Параметр1, Параметр2)", "ИНН", Источник["INN"]));
		Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Параметр1, Параметр2, Параметр3)", пОрганизация, Источник["KPP"], Источник["IFNS"]);
		
	ИначеЕсли ТипЗначенияСубконто = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		ЗначениеБОСС 				= Источник["idSt"];
		Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("Прочие доходы и расходы");
		Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду(Параметр1)", ЗначениеБОСС);
		
	ИначеЕсли ТипЗначенияСубконто = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет") Тогда
		ЗначениеБОСС 				= "";
		Значение1С_НеСопоставлено 	= "";
		Значение1С 					= ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог");
		
	ИначеЕсли Ложь И ТипЗначенияСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Если Объект.Организация = Организация_Окей И АналитикаСчета.СчетАксапты = "20" Тогда
			ЗначениеБОСС 				= "";
			Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("Номенклатурные группы");
			Значение1С 					= ВыполнитьСКэшем("РезультатВыполнения = Справочники.НоменклатурныеГруппы.НайтиПоКоду(Параметр1)", "000000209");
		КонецЕсли;
		
	ИначеЕсли Ложь И ТипЗначенияСубконто = Тип("СправочникСсылка.Резервы") Тогда
		
		ЗначениеБОСССтатьиЗатрат	= Источник["idSt"];
		Значение1ССтатьиЗатрат 		= ВыполнитьСКэшем("РезультатВыполнения = Справочники.СтатьиЗатрат.НайтиПоКоду(Параметр1)", ЗначениеБОСССтатьиЗатрат);
		
		Если Значение1ССтатьиЗатрат <> Неопределено
			И Значение1ССтатьиЗатрат .Код = "Огр-00166" Тогда
			Значение1С = ВыполнитьСКэшем("РезультатВыполнения = Справочники.Резервы.НайтиПоКоду(Параметр1)", "000000003");
		ИначеЕсли Значение1ССтатьиЗатрат <> Неопределено
			И Значение1ССтатьиЗатрат .Код = "Огр-00167" Тогда
			Значение1С = ВыполнитьСКэшем("РезультатВыполнения = Справочники.Резервы.НайтиПоКоду(Параметр1)", "00-000004");
		КонецЕсли;
		
		ЗначениеБОСС 				= "";
		Значение1С_НеСопоставлено 	= ПолучитьСлужебныйЭлементНеСопоставлено("Оценочные обязательства и резервы");
		
	КонецЕсли;
	
	Если ЗначениеБОСС <> Неопределено Тогда
		Результат = Новый Структура();
		Результат.Вставить("ЗначениеБОСС", 				ЗначениеБОСС);
		Результат.Вставить("Значение1С",				Значение1С);
		Результат.Вставить("Значение1С_НеСопоставлено",	Значение1С_НеСопоставлено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиДокументыОперацияБОСС_ПоРегистру(СтруткураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ок_ОборотыБОССОбороты.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ок_ОборотыБОСС.Обороты(
		|			,
		|			,
		|			Запись,
		|			Организация = &Организация
		|				И ПериодНачисления = &ПериодНачисления
		|				И ВидОперации В (&ВидыОпераций)
		|				И ВидДвиженияМСФО = &ВидДвиженияМСФО) КАК ок_ОборотыБОССОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ок_ОборотыБОССОбороты.Регистратор";
	
	Если ТипЗнч(СтруткураПараметров.ВидОперации) <> Тип("Массив") Тогда
		ВидыОпераций = Новый Массив();
		ВидыОпераций.Добавить(СтруткураПараметров.ВидОперации);
	Иначе
		ВидыОпераций = СтруткураПараметров.ВидОперации;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДвиженияМСФО", 	СтруткураПараметров.ВидДвиженияМСФО);
	Запрос.УстановитьПараметр("ВидыОпераций", 		ВидыОпераций);
	Запрос.УстановитьПараметр("Организация", 		СтруткураПараметров.Организация);
	Запрос.УстановитьПараметр("ПериодНачисления", 	СтруткураПараметров.ПериодНачисления);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();

	Возврат ВыборкаДетальныеЗаписи.ВыгрузитьКолонку("Регистратор");
		
КонецФункции

&НаСервереБезКонтекста
Функция НайтиДокументыОперацияБОСС_ПоДокументу(СтруткураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ок_ОперацияБОСС.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ок_ОперацияБОСС КАК ок_ОперацияБОСС
		|ГДЕ
		|	ок_ОперацияБОСС.Организация = &Организация
		|	И ок_ОперацияБОСС.ПериодНачисления = &ПериодНачисления
		|	И ок_ОперацияБОСС.ВидОперации В(&ВидыОпераций)
		|	И ок_ОперацияБОСС.МСФО = &МСФО
		|	И НЕ ок_ОперацияБОСС.ПометкаУдаления
		|	И ок_ОперацияБОСС.Проведен";
	
	Если ТипЗнч(СтруткураПараметров.ВидОперации) <> Тип("Массив") Тогда
		ВидыОпераций = Новый Массив();
		ВидыОпераций.Добавить(СтруткураПараметров.ВидОперации);
	Иначе
		ВидыОпераций = СтруткураПараметров.ВидОперации;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МСФО", 				СтруткураПараметров.МСФО);
	Запрос.УстановитьПараметр("ВидыОпераций", 		ВидыОпераций);
	Запрос.УстановитьПараметр("Организация", 		СтруткураПараметров.Организация);
	Запрос.УстановитьПараметр("ПериодНачисления", 	СтруткураПараметров.ПериодНачисления);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();

	Возврат ВыборкаДетальныеЗаписи.ВыгрузитьКолонку("Ссылка");
		
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНовыйДокументОперацияБОСС(СтруткураПараметров, ТабличнаяЧасть)

	Если НЕ СтруткураПараметров.ПериодЗакрыт_РСБУ 
		И СтруткураПараметров.СторнируемыеДокументы.Количество() > 0 Тогда
		
		Для Инд = 1 По СтруткураПараметров.СторнируемыеДокументы.Количество() - 1 Цикл
			Если НЕ СтруткураПараметров.СторнируемыеДокументы[Инд].ДокументОснование.ПометкаУдаления Тогда
				ДокументДляУдаления = СтруткураПараметров.СторнируемыеДокументы[Инд].ДокументОснование.ПолучитьОбъект();
				ДокументДляУдаления.ПометкаУдаления = Истина;
				ДокументДляУдаления.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЦикла;
		
		НовыйДокумент = СтруткураПараметров.СторнируемыеДокументы[0].ДокументОснование.ПолучитьОбъект();
		НовыйДокумент.СторнируемыеДокументы.Очистить();
		НовыйДокумент.ОборотыБОСС.Очистить();
		Если НовыйДокумент.Проведен Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	Иначе
		НовыйДокумент = Документы.ок_ОперацияБОСС.СоздатьДокумент();
		НовыйДокумент.СторнируемыеДокументы.Загрузить(СтруткураПараметров.СторнируемыеДокументы);
	КонецЕсли;
			
	НовыйДокумент.Дата 				= СтруткураПараметров.ДатаДокумента;
	НовыйДокумент.ПериодНачисления 	= СтруткураПараметров.ПериодНачисления;
	НовыйДокумент.Организация	 	= СтруткураПараметров.Организация;
	НовыйДокумент.МСФО			 	= СтруткураПараметров.МСФО;
	НовыйДокумент.ВидОперации		= СтруткураПараметров.ВидОперации;
	НовыйДокумент.Ответственный		= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	Если НовыйДокумент.МСФО Тогда
		НовыйДокумент.ДатаСторноМСФО = НачалоДня(НовыйДокумент.Дата + 60*60*24);
	КонецЕсли;
	
	НовыйДокумент.ОбрабатыватьДанныеПоРезервамПредыдущегоПериода = СтруткураПараметров.ОбрабатыватьДанныеПоРезервамПредыдущегоПериода;
	
	НовыйДокумент.ОборотыБОСС.Загрузить(ТабличнаяЧасть);
	
	Попытка
		//НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Возврат НовыйДокумент.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при проведении документ ""%1""'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьСлужебныйЭлементНеСопоставлено(ИмяНастройки)
	
	НайденнаяСтрока = СлужебныеЭлементыНеСопоставлено.Найти(ИмяНастройки, "ИмяНастройки");
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыполнитьСКэшем(ТекстОперации, Параметр1 = "", Параметр2 = "", Параметр3 = "")
	
	РезультатВыполнения = КэшПоискаЗначений.Получить(Строка(Параметр1) + Строка(Параметр2) + Строка(Параметр3));
	Если РезультатВыполнения = Неопределено Тогда
		Выполнить(ТекстОперации);
		КэшПоискаЗначений.Вставить(Строка(Параметр1) + Строка(Параметр2) + Строка(Параметр3), РезультатВыполнения);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусПоЗакрытымПериодам()
	
	метДокумента = Метаданные.Документы.ок_ОперацияБОСС;
	
	//СтруктураПроверки = Новый Структура();
	//СтруктураПроверки.Вставить("Организация", 	Объект.Организация);
	//СтруктураПроверки.Вставить("Дата", 			Объект.ПериодНачисления);
	//
	//ДатаЗапрета = бит_ДатыЗапретаРедактирования.ПолучитьДатуЗапретаРедактирования(метДокумента, СтруктураПроверки);
	//Объект.ПериодЗакрыт_РСБУ = ЗначениеЗаполнено(ДатаЗапрета);
	//
	//ОбъектСистемы_МСФО = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2);
	//СоответствиеДат_МСФО = бит_КонтрольЗакрытогоПериода.ПолучитьДатыОткрытогоПериода(Объект.Организация, ОбъектСистемы_МСФО);
	//
	//СоответствиеДат_МСФО = Новый Соответствие;
	//Если СоответствиеДат_МСФО.Количество() > 0
	//	И СоответствиеДат_МСФО.Получить(ОбъектСистемы_МСФО) < Объект.ПериодНачисления Тогда
	//	Объект.ПериодЗакрыт_МСФО = Истина;
	//Иначе
	//	Объект.ПериодЗакрыт_МСФО = Ложь;
	//КонецЕсли;
	
	РазделРСБУ = ДатыЗапретаИзмененияБП.РазделБухгалтерскийУчет().Ссылка;
	
	Объект.ПериодЗакрыт_РСБУ = НЕ Документы.ок_ОперацияБОСС.ПроверитьГраницыПериодов(Объект.ПериодНачисления, Объект.Организация, РазделРСБУ);
	Объект.ПериодЗакрыт_МСФО = НЕ Документы.ок_ОперацияБОСС.ПроверитьГраницыПериодовМСФО(Объект.ПериодНачисления, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверкуСторнирующихДокументов()
	
	Результат = Истина;
	
	СтруткураПараметров = Новый Структура();
	СтруткураПараметров.Вставить("Организация", 		Объект.Организация);
	СтруткураПараметров.Вставить("ПериодНачисления", 	Объект.ПериодНачисления);
	СтруткураПараметров.Вставить("МСФО", 				Объект.МСФО);
	
	ВидОперации = Новый Массив();
	Если Объект.НачисленияИУдержанияЗП Тогда
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.НачислениеИУдержаниеЗП"));
	КонецЕсли;
	Если Объект.УдержанияПоИсполнительномуЛисту Тогда
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.УдержаниеПоИсполнительномуЛисту"));
	КонецЕсли;
	Если Объект.РезервыОтпусков Тогда
		ВидОперации.Добавить(ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.РезервыОтпусков"));
	КонецЕсли;
	
	СтруткураПараметров.Вставить("ВидОперации", ВидОперации);
	МассивОперацийБОСС = НайтиДокументыОперацияБОСС_ПоДокументу(СтруткураПараметров);
	
	Для Каждого ТекДокумент Из МассивОперацийБОСС Цикл 
		
		Если Объект.СторнируемыеДокументы.НайтиСтроки(Новый Структура("ДокументОснование", ТекДокумент)).Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить ТЧ ""Сторнируемые документы"". Для вида операции %1 уже создан документ %2. Период РСБУ %3.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
								ТекДокумент.ВидОперации, 
								ТекДокумент, 
								?(Объект.ПериодЗакрыт_РСБУ, "Закрыт, документ будет отсторнирован", "Открыт, документ будет перезаполнен")
								);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Результат = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-11 (#3782)
&НаСервере
Процедура УстановитьПризнакGetRSBU(МассивIDСтрок, ИнтТаблица)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-11 (#3782)
	Если Не ПолучитьНастройкиПодключения() Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-11 (#3782)
	
	Если РежимРаботыСБазойДанных = "запрос" Тогда
		УстановитьПризнакGetRSBUПоВИДПоЗапросу(МассивIDСтрок, ИнтТаблица);
	Иначе
		УстановитьПризнакGetRSBUПоВИД(МассивIDСтрок, ИнтТаблица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакGetRSBUПоВИДПоЗапросу(МассивIDСтрок, ИнтТаблица)

	Если МассивIDСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ИнтТаблица = СтрЗаменить(ИнтТаблица, "dbo_", "");
	
	УсловиеПоОтоборуСтрок = "";
	Для Каждого ID Из МассивIDСтрок Цикл 
		УсловиеПоОтоборуСтрок = УсловиеПоОтоборуСтрок + ?(УсловиеПоОтоборуСтрок = "", " and (", " or ") + "[id] = " + ID;
	КонецЦикла;
	
	ТекстЗапроса = "UPDATE [dbo].[" + ИнтТаблица + "]
	|SET [GetRSBU] = 1 WHERE ([GetRSBU] = 0 or [GetRSBU] IS NULL) " + УсловиеПоОтоборуСтрок + ")";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символы.НПП, "");
	
	СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
	СоединениеАДО.ConnectionTimeOut = 20; 
	СоединениеАДО.ConnectionTimeOut = 600; 
	СоединениеАДО.CommandTimeOut = 600; 
	СоединениеАДО.CursorLocation = 3; 	
	
	Попытка
		СоединениеАДО.Open(СтрокаСоединения);			
	Исключение 
		ТекстСообщения = "Не удалось выполнить соединение с базой "+ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Загрузка данных по ЗП из БОСС",УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения); 			 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
		
	ЗапросВыполенен = ВыполнитьЗапросADO(ТекстЗапроса, СоединениеАДО);
	
	Если НЕ ЗапросВыполенен Тогда
		
		ТекстСообщения = НСтр("ru = 'Неудачная попытка выполнения запроса к внешнему источнику данных,
		|строка соединения: %1");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСоединения);
		ЗаписьЖурналаРегистрации("Загрузка данных по ЗП из БОСС", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения); 			 
		СоединениеАДО.Close();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-11 (#3782)

&НаСервереБезКонтекста
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-11 (#3782)
//Процедура УстановитьПризнакGetRSBU(МассивIDСтрок, ИнтТаблица)
Процедура УстановитьПризнакGetRSBUПоВИД(МассивIDСтрок, ИнтТаблица)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-11 (#3782)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-03-13 (#3687)
	мИзменяемыхПолей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("GetRSBU");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-03-13 (#3687)
	
	Для Каждого ID Из МассивIDСтрок Цикл 
		Запись = ВнешниеИсточникиДанных.ОК_ЗагрузкаЗнРДСизБОСС.Таблицы[ИнтТаблица].НайтиПоПолю("id", ID);
		Если ЗначениеЗаполнено(Запись)
			И Запись.GetRSBU <> 1 Тогда
			ЗаписьОбъект = Запись.ПолучитьОбъект();
			ЗаписьОбъект.GetRSBU = 1;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-03-13 (#3687)
			ЗаписьОбъект.УстановитьИзменяемыеПоля(мИзменяемыхПолей);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-03-13 (#3687)
			
			ЗаписьОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Организация_ОкейЛоджистикс 	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Лоджистикс");
Организация_Окей 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
Организация_ДОРИНДА 		= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ДОРИНДА");
Организация_ОкейГрупп 		= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Окей групп");