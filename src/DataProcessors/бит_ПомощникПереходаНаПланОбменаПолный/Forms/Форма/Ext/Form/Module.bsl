
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбменДаннымиСервер.ПроверитьВозможностьАдминистрированияОбменов();
	ЗаполнитьТаблицуЭтаповНастройки();
	ПроверитьСостояниеЭтапов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура выполняет создание и приведение в соответствие узлов плана обмена "Полный" в соответствии с переченем узлов плана обмена "Полный (БИТ)".
//
&НаСервере
Процедура ПеренестиСтруктуруУзловНаСервере()
	
	РезультатВыборкиУзлов = ПолучитьУзлыОбменаПолныйДляМодиффикации();
	ВыборкаУзлов          = РезультатВыборкиУзлов.Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаУзлов.УзелПолногоОбмена) Тогда
			УзелОбменаПолный             = ВыборкаУзлов.УзелПолногоОбмена.ПолучитьОбъект();
			СозданИзменен                = "Изменен";
		Иначе
			УзелОбменаПолный             = ПланыОбмена.Полный.СоздатьУзел();
			СозданИзменен                = "Создан";
			ВыполнялсяПереносРегистрации = Ложь;
		КонецЕсли;				
		ЗаполнитьЗначенияСвойств(УзелОбменаПолный, ВыборкаУзлов);
		УзелОбменаПолный.Записать();
		
		ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 узел обмена Полный: %2'"),
																					СозданИзменен,
																					УзелОбменаПолный.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, УзелОбменаПолный);
	КонецЦикла;
	ПроверитьСостояниеЭтапов();
	
КонецПроцедуры

// Процедура - обработчик команды формы "ПеренестиСтруктуруУзлов".
//
&НаКлиенте
Процедура ПеренестиСтруктуруУзлов(Команда)
	ПеренестиСтруктуруУзловНаСервере();
КонецПроцедуры

// Процедура копирует настройки транспорта обмена "Полный (БИТ)" и создает аналогичные настройки транспорта для узлов плана обмена "Полный".
// Сопоставление выполняется по кодам узлов планов обмена. В случае, если для узла обмена "Полный" уже существуют настройки, перезапись не выполняется.
//
&НаСервере
Процедура СкопироватьНастройкиСинхронизацииНаСервере()
	
	РезультатВыборкиНастроек = ПолучитьРезультатВыборкиНастроек();
	ВыборкаНастроек          = РезультатВыборкиНастроек.Выбрать();
	Пока ВыборкаНастроек.Следующий() Цикл
		УзелПолучательНастроек = ВыборкаНастроек.Корреспондент;
		
		НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьНаборЗаписей();
		НастройкиТранспорта.Отбор.Корреспондент.Установить(УзелПолучательНастроек);
		ЗаписьТранспорта    = НастройкиТранспорта.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьТранспорта, ВыборкаНастроек); 
		НастройкиТранспорта.Записать();
		
		ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопированы настройки транспорта для узела обмена Полный: %1'"), УзелПолучательНастроек);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, УзелПолучательНастроек);
	КонецЦикла;
	ПроверитьСостояниеЭтапов();
	
КонецПроцедуры

// Процедура - обработчик команды формы "СкопироватьНастройкиСинхронизации".
//
&НаКлиенте
Процедура СкопироватьНастройкиСинхронизации(Команда)
	СкопироватьНастройкиСинхронизацииНаСервере();
КонецПроцедуры

// Процедура выполняет перенос регистрации объектов с плана обмена "Полный(БИТ)" на план обмена "Полный"
//
&НаСервере
Процедура ПеренестиРегистрациюОбъектовНаСервере()
	
	РезультатЗапроса            = ПолучитьРезультатВыборкиУзловДляПеререгистрации();
	ВыборкаУзловПеререгистрации = РезультатЗапроса.Выбрать();
	БылиОшибки                  = Ложь;
	Пока ВыборкаУзловПеререгистрации.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			УзелЭкспорт = ВыборкаУзловПеререгистрации.УзелЭкспорт;
			УзелИмпорт  = ВыборкаУзловПеререгистрации.УзелИмпорт;
			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелЭкспорт, ВыборкаУзловПеререгистрации.НомерОтправленного + 1);
			Пока ВыборкаИзменений.Следующий() Цикл
				ЗарегистрированныеДанные = ВыборкаИзменений.Получить();
				ПланыОбмена.ЗарегистрироватьИзменения(УзелИмпорт, ЗарегистрированныеДанные);
			КонецЦикла;
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелЭкспорт);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполинить перерегистрацию данных в узел обмена ""%1"" по причине:
					|%2'"), 
					УзелИмпорт,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			БылиОшибки = Истина;
		КонецПопытки;
		
		Если БылиОшибки Тогда
			Прервать;
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполнена перерегистрация данных по узлу ""%1""'"), УзелИмпорт);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, УзелИмпорт);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнялсяПереносРегистрации = НЕ БылиОшибки;
	ПроверитьСостояниеЭтапов();
	
КонецПроцедуры

// Процедура - обработчик команды формы "ПеренестиРегистрациюОбъектов".
//
&НаКлиенте
Процедура ПеренестиРегистрациюОбъектов(Команда)
	ПеренестиРегистрациюОбъектовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСменуГлавногоУзла()
	
	ТекУзел = ПланыОбмена.ГлавныйУзел();
	Если ТипЗнч(ТекУзел) <> Тип("ПланОбменаСсылка.бит_Полный") Тогда
		ТекстСообщения = НСтр("ru = 'Тип главного узла не соответствует ожидаемому'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекУзел, "Код");
	Если ПустаяСтрока(КодУзла) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан код главного узла'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	УзелПолногоОбмена = ПланыОбмена.Полный.НайтиПоКоду(КодУзла);
	Если УзелПолногоОбмена = Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден узел плана обмена ""Полный"" с кодом %1'"),
																							КодУзла);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.УстановитьГлавныйУзел(УзелПолногоОбмена);
	ТекстСообщения = НСтр("ru = 'Главный узел изменен'");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, УзелПолногоОбмена);
	
КонецПроцедуры

&НаСервере
Процедура СменитьГлавныйУзелНаСервере()
	
	ВыполнитьСменуГлавногоУзла();
		
	ПроверитьСостояниеЭтапов();
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьГлавныйУзел(Команда)
	СменитьГлавныйУзелНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет начальное заполнение перечня выполняемых этапов синхронизации.
//
&НаСервере
Процедура ЗаполнитьТаблицуЭтаповНастройки()
	
	ЭтапыНастройки.Очистить();
	
	ДобавитьЭтапНастройки("ПереносСтруктуры", "ПеренестиСтруктуруУзлов");
	ДобавитьЭтапНастройки("КопированиеНастроекСинхронизации", "СкопироватьНастройкиСинхронизации");
	ДобавитьЭтапНастройки("ПереносРегистрацииОбъектов", "ПеренестиРегистрациюОбъектов");
	ДобавитьЭтапНастройки("СменаГлавногоУзла", "СменитьГлавныйУзел");
	
КонецПроцедуры

// Процедура добавления нового этапа в доступный перечень.
// 
// Параметры:
//  Название - Строка. Наименование этапа, должен соответствовать имени группы настроек на форме элемента.
//  Кнопка   - Строка. Наименование команды, отвечающей за вызов обработчика соответствующего этапа.
//
&НаСервере
Процедура ДобавитьЭтапНастройки(Название, Кнопка)
	
	СтрокаЭтап = ЭтапыНастройки.Добавить();
	СтрокаЭтап.Название  = Название;
	СтрокаЭтап.Кнопка    = Кнопка;
	СтрокаЭтап.Состояние = "Пустой";
	
КонецПроцедуры

// Процедура актуализирует состояние выполнения каждого из этапов.
//
&НаСервере
Процедура ПроверитьСостояниеЭтапов()
	
	Если НЕ ОбменДаннымиВключен("бит_Полный") Тогда
		ТекстСообщения = НСтр("ru = 'Обмен ""Полный (БИТ)"" не используется. Перенос настроек не возможен'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЭтап Из ЭтапыНастройки Цикл
		ПроверитьСостояниеЭтапа(СтрокаЭтап);
	КонецЦикла;
	
	ОбновитьОтображениеТекущегоСостоянияНастройки();
	
КонецПроцедуры

// Функция проверяет включение функциональной опции синхронизации данных и наличие узлов плана обмена.
// 
// Параметры:
//  ИмяПланаОбмена - Строка. Имя проверяемого плана обмена.
//
// Возвращаемое значение:
//   Булево.
//
&НаСервереБезКонтекста
Функция ОбменДаннымиВключен(ИмяПланаОбмена)
	
	Возврат ОбменДаннымиПовтИсп.ОбменДаннымиВключен(ИмяПланаОбмена);
	
КонецФункции

// Процедура актуализирует состояние этапа.
// 
// Параметры:
//  СтрокаЭтап - Строка таблицы значений. Строка таблицы Этапы, для которой необходимо актуализировать состояние.
//
&НаСервере
Процедура ПроверитьСостояниеЭтапа(СтрокаЭтап)
	
	Если СтрокаЭтап.Название = "ПереносСтруктуры" Тогда
		СтрокаЭтап.Состояние = СостояниеПереносаСтруктуры();
	ИначеЕсли СтрокаЭтап.Название = "КопированиеНастроекСинхронизации" Тогда
		СтрокаЭтап.Состояние = ПроверитьВозможностьКопированияНастроекСинхронизации();
	ИначеЕсли СтрокаЭтап.Название = "ПереносРегистрацииОбъектов" Тогда
		СтрокаЭтап.Состояние = ПроверитьВозможностьПереносаРегистрацииОбъектов();
	ИначеЕсли СтрокаЭтап.Название = "СменаГлавногоУзла" Тогда
		СтрокаЭтап.Состояние = ПроверитьВозможностьСменыГлавногоУзла();
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет состояние переноса структуры узлов.
// 
// Возвращаемое значение:
//   Строка.
//
&НаСервереБезКонтекста
Функция СостояниеПереносаСтруктуры()
	
	РезультатВыборкиУзлов = ПолучитьУзлыОбменаПолныйДляМодиффикации();
	Возврат ?(РезультатВыборкиУзлов.Пустой(), "Успешно", "Текущий");
	
КонецФункции

// Функция возвращает параметры для создания/изменения узлов плана обмена "Полный".
//
// Возвращаемое значение:
//   Результат запроса - результат запроса со списком и параметрами создаваемых/изменяемых узлов плана обмена "Полный".
//
&НаСервереБезКонтекста
Функция ПолучитьУзлыОбменаПолныйДляМодиффикации()
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
           |	бит_Полный.Ссылка,
           |	бит_Полный.Код,
           |	бит_Полный.Наименование,
           |	бит_Полный.РегистрироватьИзменения,
           |	Полный.Ссылка КАК УзелПолногоОбмена
           |ИЗ
           |	ПланОбмена.бит_Полный КАК бит_Полный
           |		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.Полный КАК Полный
           |		ПО (бит_Полный.ЭтотУзел
           |					И Полный.ЭтотУзел
           |				ИЛИ НЕ бит_Полный.ЭтотУзел
           |					И бит_Полный.Код = Полный.Код)
           |ГДЕ
           |	НЕ бит_Полный.ПометкаУдаления
           |	И (Полный.Ссылка ЕСТЬ NULL
           |			ИЛИ бит_Полный.Наименование <> Полный.Наименование
           |			ИЛИ бит_Полный.РегистрироватьИзменения <> Полный.РегистрироватьИзменения)";
	Возврат Запрос.Выполнить();
	
КонецФункции

// Функция проверяет возможность переноса настроек синхронизации.
// 
// Возвращаемое значение:
//   Строка.
//
&НаСервереБезКонтекста
Функция ПроверитьВозможностьКопированияНастроекСинхронизации()
	
	РезультатВыборкиНастроек = ПолучитьРезультатВыборкиНастроек();
	Возврат ?(РезультатВыборкиНастроек.Пустой(), "Успешно", "Текущий");
	
КонецФункции

// Функция получает настройки транспорта для копирования.
// 
// Возвращаемое значение:
//   РезультатЗапроса.
//
&НаСервереБезКонтекста
Функция ПолучитьРезультатВыборкиНастроек()
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
           |	бит_Полный.Ссылка КАК УзелИсточникНастроек,
           |	Полный.Ссылка КАК УзелПолучательНастроек
           |ПОМЕСТИТЬ УзлыИмпораЭкспорта
           |ИЗ
           |	ПланОбмена.бит_Полный КАК бит_Полный
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.Полный КАК Полный
           |		ПО бит_Полный.Код = Полный.Код
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	УзлыИмпораЭкспорта.УзелПолучательНастроек КАК Корреспондент,
           |	НастройкиТранспортаОбменаДанными.COMАутентификацияОперационнойСистемы КАК COMАутентификацияОперационнойСистемы,
           |	НастройкиТранспортаОбменаДанными.COMВариантРаботыИнформационнойБазы КАК COMВариантРаботыИнформационнойБазы,
           |	НастройкиТранспортаОбменаДанными.COMИмяИнформационнойБазыНаСервере1СПредприятия КАК COMИмяИнформационнойБазыНаСервере1СПредприятия,
           |	НастройкиТранспортаОбменаДанными.COMИмяПользователя КАК COMИмяПользователя,
           |	НастройкиТранспортаОбменаДанными.COMИмяСервера1СПредприятия КАК COMИмяСервера1СПредприятия,
           |	НастройкиТранспортаОбменаДанными.COMКаталогИнформационнойБазы КАК COMКаталогИнформационнойБазы,
           |	НастройкиТранспортаОбменаДанными.EMAILМаксимальныйДопустимыйРазмерСообщения КАК EMAILМаксимальныйДопустимыйРазмерСообщения,
           |	НастройкиТранспортаОбменаДанными.EMAILСжиматьФайлИсходящегоСообщения КАК EMAILСжиматьФайлИсходящегоСообщения,
           |	НастройкиТранспортаОбменаДанными.EMAILУчетнаяЗапись КАК EMAILУчетнаяЗапись,
           |	НастройкиТранспортаОбменаДанными.EMAILТранслитерироватьИменаФайловСообщенийОбмена КАК EMAILТранслитерироватьИменаФайловСообщенийОбмена,
           |	НастройкиТранспортаОбменаДанными.FILEКаталогОбменаИнформацией КАК FILEКаталогОбменаИнформацией,
           |	НастройкиТранспортаОбменаДанными.FILEСжиматьФайлИсходящегоСообщения КАК FILEСжиматьФайлИсходящегоСообщения,
           |	НастройкиТранспортаОбменаДанными.FILEТранслитерироватьИменаФайловСообщенийОбмена КАК FILEТранслитерироватьИменаФайловСообщенийОбмена,
           |	НастройкиТранспортаОбменаДанными.FTPСжиматьФайлИсходящегоСообщения КАК FTPСжиматьФайлИсходящегоСообщения,
           |	НастройкиТранспортаОбменаДанными.FTPСоединениеМаксимальныйДопустимыйРазмерСообщения КАК FTPСоединениеМаксимальныйДопустимыйРазмерСообщения,
           |	НастройкиТранспортаОбменаДанными.FTPСоединениеПассивноеСоединение КАК FTPСоединениеПассивноеСоединение,
           |	НастройкиТранспортаОбменаДанными.FTPСоединениеПользователь КАК FTPСоединениеПользователь,
           |	НастройкиТранспортаОбменаДанными.FTPСоединениеПорт КАК FTPСоединениеПорт,
           |	НастройкиТранспортаОбменаДанными.FTPСоединениеПуть КАК FTPСоединениеПуть,
           |	НастройкиТранспортаОбменаДанными.FTPТранслитерироватьИменаФайловСообщенийОбмена КАК FTPТранслитерироватьИменаФайловСообщенийОбмена,
           |	НастройкиТранспортаОбменаДанными.WSURLВебСервиса КАК WSURLВебСервиса,
           |	НастройкиТранспортаОбменаДанными.WSЗапомнитьПароль КАК WSЗапомнитьПароль,
           |	НастройкиТранспортаОбменаДанными.WSИмяПользователя КАК WSИмяПользователя,
           |	НастройкиТранспортаОбменаДанными.WSИспользоватьПередачуБольшогоОбъемаДанных КАК WSИспользоватьПередачуБольшогоОбъемаДанных,
           |	НастройкиТранспортаОбменаДанными.ВидТранспортаСообщенийОбменаПоУмолчанию КАК ВидТранспортаСообщенийОбменаПоУмолчанию,
           |	НастройкиТранспортаОбменаДанными.КоличествоЭлементовВТранзакцииВыгрузкиДанных КАК КоличествоЭлементовВТранзакцииВыгрузкиДанных,
           |	НастройкиТранспортаОбменаДанными.КоличествоЭлементовВТранзакцииЗагрузкиДанных КАК КоличествоЭлементовВТранзакцииЗагрузкиДанных,
           |	НастройкиТранспортаОбменаДанными.ПараметрыПодключенияВнешнейСистемы КАК ПараметрыПодключенияВнешнейСистемы
           |ИЗ
           |	УзлыИмпораЭкспорта КАК УзлыИмпораЭкспорта
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиТранспортаОбменаДанными КАК НастройкиТранспортаОбменаДанными
           |		ПО УзлыИмпораЭкспорта.УзелИсточникНастроек = НастройкиТранспортаОбменаДанными.Корреспондент
           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиТранспортаОбменаДанными КАК ТекущиеНастройкиУзлаПолучателя
           |		ПО УзлыИмпораЭкспорта.УзелПолучательНастроек = ТекущиеНастройкиУзлаПолучателя.Корреспондент
           |ГДЕ
           |	ТекущиеНастройкиУзлаПолучателя.Корреспондент ЕСТЬ NULL";
	Возврат Запрос.Выполнить();
	
КонецФункции

// Функция проверяет возможность переноса регистрации объектов.
// 
// Возвращаемое значение:
//   Строка.
//
&НаСервере
Функция ПроверитьВозможностьПереносаРегистрацииОбъектов()
	
	Если ВыполнялсяПереносРегистрации Тогда
		Возврат "Успешно";
	КонецЕсли;
	
	РезультатЗапроса = ПолучитьРезультатВыборкиУзловДляПеререгистрации();
	Возврат ?(РезультатЗапроса.Пустой(), "Пустой", "Текущий");
	
КонецФункции

// Функция возвращает соотвествие узлов планов обмена "Полный (БИТ)" и "Полный" для выполнения перерегистрации изменений.
//
// Возвращаемое значение:
//   Результат запроса - результат запроса с сопоставлением узлов.
//
&НаСервереБезКонтекста
Функция ПолучитьРезультатВыборкиУзловДляПеререгистрации()
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_Полный.Ссылка КАК УзелЭкспорт,
	               |	Полный.Ссылка КАК УзелИмпорт,
	               |	бит_Полный.НомерОтправленного КАК НомерОтправленного
	               |ИЗ
	               |	ПланОбмена.бит_Полный КАК бит_Полный
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.Полный КАК Полный
	               |		ПО бит_Полный.Код = Полный.Код
	               |			И (НЕ бит_Полный.ЭтотУзел)
	               |			И (НЕ Полный.ЭтотУзел)
	               |			И (НЕ бит_Полный.ПометкаУдаления)";
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

// Функция проверяет возможность смены главного узла.
// 
// Возвращаемое значение:
//   Строка.
//
&НаСервереБезКонтекста
Функция ПроверитьВозможностьСменыГлавногоУзла()
	
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	ТипУзла     = ТипЗнч(ГлавныйУзел);
	Если ТипУзла = Тип("ПланОбменаСсылка.бит_Полный") Тогда
		Возврат "Текущий";
	ИначеЕсли ТипУзла = Тип("ПланОбменаСсылка.Полный") Тогда
		Возврат "Успешно";
	Иначе
		Возврат "Пустой";
	КонецЕсли;
	
КонецФункции

// Процедура отображает состояние этапов.
//
&НаСервере
Процедура ОбновитьОтображениеТекущегоСостоянияНастройки()
	
	Для Каждого ЭтапНастройки Из ЭтапыНастройки Цикл
		Элементы[ЭтапНастройки.Кнопка].Доступность = (ЭтапНастройки.Состояние = "Текущий");
		Элементы["Панель" + ЭтапНастройки.Название].ТекущаяСтраница = Элементы["Страница" + ЭтапНастройки.Название + ЭтапНастройки.Состояние];
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти