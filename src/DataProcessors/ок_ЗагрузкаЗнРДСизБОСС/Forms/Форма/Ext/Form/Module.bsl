
// Параметры соединения с SQL
Перем Адрес;
Перем ПользовательSQL;
Перем ПарольSQL;
Перем БазаДанных;
Перем СтрокаСоединения;


#Область ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы
#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура СоздатьЗнРДС(Команда)
	СоздатьЗнРДСНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧ(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		Тогда
		Сообщить("Необходимо заполнить организацию");
		Возврат;
	КонецЕсли;
   	Если НЕ ЗначениеЗаполнено(Объект.Период)
		Тогда
		Сообщить("Необходимо заполнить период");
		Возврат;
	КонецЕсли;	
	Объект.ПолученныеДанные.Очистить();
	ЗаполнитьТЧНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаСервере
Процедура СоздатьЗнРДСНаСервере()
	
	//Получаем значения из РС СБ_НастройкиКазнаейства
	ВидОперации = 					СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_ВидОперации", 					Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПустаяСсылка());
	ФормаОплаты =					СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_ФормаОплаты", 					Перечисления.бит_ВидыДенежныхСредств.ПустаяСсылка());
	Статус = 						СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_Статус", 							Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	Важность = 						СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_Важность", 						Перечисления.бит_Важность.ПустаяСсылка());
	СтатьяОборотовБДДС =  			СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_СтатьяОборотовБДДС", 				Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	Валюта =  						СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_Валюта", 							Справочники.Валюты.ПустаяСсылка());
	СтавкаНДС = 					СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_СтавкаНДС", 						Перечисления.СтавкиНДС.ПустаяСсылка());
	ТипЗаявки = 					СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_ТипЗаявки", 						Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ПустаяСсылка());
	ТипПлатежа = 					СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_ТипПлатежа", 						Справочники.бит_ТипыПлатежей.ПустаяСсылка());
	ПрофильРазноски = 				СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_ПрофильРазноски", 				"");
	НеВключатьВПлатежныйКалендарь = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_НеВключатьВПлатежныйКалендарь",	Ложь);
	КазначейскаяЗаявка =  			СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_КазначейскаяЗаявка",				Ложь);
	СверхБюджета = 					СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_СверхБюджета",					Ложь);
	НаличиеДЗ = 					СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_НаличиеДЗ",						Ложь);
	ОснованиеПлатежа = 				СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_ОснованиеПлатежа",				Перечисления.бит_ОснованияПлатежа.ПустаяСсылка());
	УсловияПоКурсу = 				СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_УсловияПоКурсу",					Перечисления.бит_УсловияПоКурсу.ПустаяСсылка());
	Очередность =  					СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_Очередность",						0);
	ВидПеречисления =  				СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_БОСС_ВидПеречисления",					Перечисления.ВидыПеречисленийВБюджет.ПустаяСсылка());
	Сценарий =  					СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ОперативныйСценарийПланирования",			Справочники.СценарииПланирования.ПустаяСсылка());
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ТекущаяДата()); 
	Курс           = СтруктураКурса.Курс;
	Кратность      = СтруктураКурса.Кратность;
	
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		
	Для Каждого Строка Из  Объект.ПолученныеДанные Цикл
		
		Если ЗначениеЗаполнено(Строка.Договор) Тогда
		
			//Заполняем ЗнРДС
			Договор 									  = Строка.Договор;
			ДокументЗнРДС 								  = Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
			ДокументЗнРДС.ок_УИД_БОСС					  = Строка.УИД_БОСС;
			ДокументЗнРДС.Организация 					  = Объект.Организация;
			ДокументЗнРДС.ВидОперации 					  = ВидОперации;
			ДокументЗнРДС.ФормаОплаты 					  = ФормаОплаты;
			ДокументЗнРДС.Дата 							  = Строка.ДатаФормирования;
			ДокументЗнРДС.ДатаРасхода 					  = Строка.ДатаРасхода;
			ДокументЗнРДС.Важность 						  = Важность;
			ДокументЗнРДС.ок_СпособСоздания 			  = 8;
			ДокументЗнРДС.Сценарий 						  = Сценарий;
			ДокументЗнРДС.Контрагент 					  = Договор.Владелец;					
			ДокументЗнРДС.ДоговорКонтрагента 			  = Договор;
			ДокументЗнРДС.ВалютаДокумента 	              = Валюта;
			ДокументЗнРДС.КурсДокумента 				  = Курс;
			ДокументЗнРДС.КратностьДокумента 			  = Кратность; 
			ДокументЗнРДС.НазначениеПлатежа 			  = Договор.ок_НазначениеПлатежа;
			ДокументЗнРДС.НазначениеПлатежаУпр            = Договор.ок_НазначениеПлатежа;
			ДокументЗнРДС.ТипЗаявки 					  = ТипЗаявки;
			ДокументЗнРДС.ТипПлатежа 				      = ТипПлатежа;
			ДокументЗнРДС.СБ_ПрофильРазноски 			  = ПрофильРазноски;
			ДокументЗнРДС.Ок_ПересчетКурса 				  = Договор.Ок_ПересчетКурса;
			ДокументЗнРДС.Ответственный                   = ТекущийПользователь;
			ДокументЗнРДС.Исполнитель                     = ТекущийПользователь;
			ДокументЗнРДС.Комментарий                     = "Загружен из БОСС, " + ТекущаяДата(); 
			ДокументЗнРДС.НеВключатьВПлатежныйКалендарь   = НеВключатьВПлатежныйКалендарь;
			ДокументЗнРДС.ЭтоКазначейство 				  = КазначейскаяЗаявка;
			ДокументЗнРДС.СверхБюджета  				  = СверхБюджета;
			ДокументЗнРДС.ок_НаличиеДЗ  				  = НаличиеДЗ;
			ДокументЗнРДС.Сумма  						  = Строка.Сумма;
			ДокументЗнРДС.СтавкаНДС 					  = СтавкаНДС;
			СтавкаНДСЧисло                                = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтавкаНДС);
			ДокументЗнРДС.НДС                                      = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(ДокументЗнРДС.Сумма
																,Истина
																,Истина
																,СтавкаНДСЧисло);
																
			ДокументЗнРДС.СуммаБезНДС   				  = ДокументЗнРДС.Сумма - ДокументЗнРДС.НДС; 
			ДокументЗнРДС.СтатьяОборотов                  = СтатьяОборотовБДДС;
			
			//Определяем банковский счет
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)  //заполняется перед записью документа
			//ОсновнойСчетДоговора = Договор.ок_БанковскиеСчета.Найти(Истина, "Основной");
			//
			//Если Договор.ок_БанковскиеСчета.Количество() <> 0  Тогда
			//	Если Договор.ок_БанковскиеСчета.Количество()=1 Тогда
			//		ДокументЗнРДС.СБ_БанковскийСчетКонтрагента = Договор.ок_БанковскиеСчета[0].БанковскийСчет;
			//	ИначеЕсли Договор.ок_БанковскиеСчета.Количество() > 1  и ОсновнойСчетДоговора <> Неопределено Тогда
			//		ДокументЗнРДС.СБ_БанковскийСчетКонтрагента = ОсновнойСчетДоговора.БанковскийСчет;	
			//	Иначе 
			//		ДокументЗнРДС.СБ_БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();	
			//	КонецЕсли;
			//ИначеЕсли ЗначениеЗаполнено (Договор.Владелец.ОсновнойБанковскийСчет) Тогда
			//	ДокументЗнРДС.СБ_БанковскийСчетКонтрагента = Договор.Владелец.ОсновнойБанковскийСчет; 
			//Иначе 
			//	ДокументЗнРДС.СБ_БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
			//КонецЕсли;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
			
			//Записываем документ 
			Попытка
				ДокументЗнРДС.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить("Не удалось провести документ по строке " + Строка.НомерСтроки);
				Попытка 
					ДокументЗнРДС.Записать();
				Исключение
					Сообщить("Не удалось записать документ по строке " + Строка.НомерСтроки);
					Продолжить;
				КонецПопытки;	
			КонецПопытки;
			Строка.СозданнаяЗнРДС = ДокументЗнРДС.Ссылка;
			Сообщить("Проведен документ " + ДокументЗнРДС.Ссылка);
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧНаСервере()
	
	Если Не ПолучитьНастройкиПодключения() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьсяКВнешнемуИсточникуДанныхMSSqlServer()Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачала 		= Объект.Период.ДатаНачала;
	ДатаОкончания 	= Объект.Период.ДатаОкончания;
	
	ЗапросПоВИД = Новый Запрос;
	ЗапросПоВИД.Текст =	
		"ВЫБРАТЬ
		|	dbo_USER_INTEGR_ISP_LIST.id КАК УИД_БОССЧисло,
		|	dbo_USER_INTEGR_ISP_LIST.INN КАК INN,
		|	dbo_USER_INTEGR_ISP_LIST.DateDoc КАК ДатаФормирования,
		|	dbo_USER_INTEGR_ISP_LIST.DatePay КАК ДатаРасхода,
		|	dbo_USER_INTEGR_ISP_LIST.idDog КАК КодДоговора,
		|	dbo_USER_INTEGR_ISP_LIST.Summa КАК Сумма
		|ИЗ
		|	ВнешнийИсточникДанных.ОК_ЗагрузкаЗнРДСизБОСС.Таблица.dbo_USER_INTEGR_ISP_LIST КАК dbo_USER_INTEGR_ISP_LIST
		|ГДЕ
		|	dbo_USER_INTEGR_ISP_LIST.DateDoc МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И dbo_USER_INTEGR_ISP_LIST.INN = &ИНН";
	
	ЗапросПоВИД.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	ЗапросПоВИД.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	ЗапросПоВИД.УстановитьПараметр("ИНН", 			Объект.Организация.ИНН);
	
	ДанныеВИД = ЗапросПоВИД.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеВИД.Колонки.Добавить("УИД_БОСС", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	
	Для Каждого Строка ИЗ ДанныеВИД Цикл
		Строка.УИД_БОСС = Строка(Строка.УИД_БОССЧисло);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеВИД.УИД_БОСС КАК УИД_БОСС,
		|	ДанныеВИД.КодДоговора КАК КодДоговора,
		|	ДанныеВИД.ДатаФормирования КАК ДатаФормирования,
		|	ДанныеВИД.ДатаРасхода КАК ДатаРасхода,
		|	ДанныеВИД.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТДанныеВИД
		|ИЗ
		|	&ДанныеВИД КАК ДанныеВИД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТДанныеВИД.УИД_БОСС КАК УИД_БОСС,
		|	бит_ЗаявкаНаРасходованиеСредств.ок_УИД_БОСС КАК ок_УИД_БОСС
		|ПОМЕСТИТЬ ВТ_СтрокиДляИсключения
		|ИЗ
		|	ВТДанныеВИД КАК ВТДанныеВИД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
		|		ПО ВТДанныеВИД.УИД_БОСС = бит_ЗаявкаНаРасходованиеСредств.ок_УИД_БОСС
		|ГДЕ
		|	бит_ЗаявкаНаРасходованиеСредств.ок_УИД_БОСС <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТДанныеВИД.УИД_БОСС КАК УИД_БОСС,
		|	ВТДанныеВИД.КодДоговора КАК КодДоговора,
		|	ВТДанныеВИД.ДатаФормирования КАК ДатаФормирования,
		|	ВТДанныеВИД.ДатаРасхода КАК ДатаРасхода,
		|	ВТДанныеВИД.Сумма КАК Сумма,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.Владелец КАК Контрагент
		|ИЗ
		|	ВТДанныеВИД КАК ВТДанныеВИД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВТДанныеВИД.КодДоговора = ДоговорыКонтрагентов.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтрокиДляИсключения КАК ВТ_СтрокиДляИсключения
		|		ПО ВТДанныеВИД.УИД_БОСС = ВТ_СтрокиДляИсключения.ок_УИД_БОСС
		|ГДЕ
		|	ВТ_СтрокиДляИсключения.ок_УИД_БОСС ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ДанныеВИД", ДанныеВид);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой()Тогда
		
		Объект.ПолученныеДанные.Загрузить(Результат.Выгрузить());
		
		Для Каждого Строка Из Объект.ПолученныеДанные Цикл
			
			Если ЗначениеЗаполнено(Строка.Договор) И Строка.Договор.Организация <> Объект.Организация Тогда
				
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "По строке " + Строка.НомерСтроки + " договор " + Строка.Договор + " не соответствует организации " + Объект.Организация;
				СообщениеПользователю.КлючДанных = Строка.Договор;
				СообщениеПользователю.Сообщить();
				
				Строка.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				
			ИначеЕсли НЕ ЗначениеЗаполнено (Строка.Договор) Тогда
				
				ТекстСообщения = НСтр("ru = 'По строке %1 не найден договор с кодом %2.");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
									Строка.НомерСтроки, 
									Строка.КодДоговора
									);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет данных для загрузки.");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодключитьсяКВнешнемуИсточникуДанныхMSSqlServer() 
	
	ПараметрыСоединения = ВнешниеИсточникиДанных.ОК_ЗагрузкаЗнРДСизБОСС.ПолучитьОбщиеПараметрыСоединения();
	ПараметрыСоединения.АутентификацияСтандартная 	= Истина;
	ПараметрыСоединения.АутентификацияОС 			= Ложь;
	ПараметрыСоединения.ИмяПользователя 			= ПользовательSQL;
	ПараметрыСоединения.Пароль 						= ПарольSQL;
	ПараметрыСоединения.СтрокаСоединения 			= СтрокаСоединения;
	ПараметрыСоединения.СУБД 						= "MSSQLServer";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ВнешниеИсточникиДанных.ОК_ЗагрузкаЗнРДСизБОСС.УстановитьПараметрыСоединенияСеанса(ПараметрыСоединения);
		ВнешниеИсточникиДанных.ОК_ЗагрузкаЗнРДСизБОСС.УстановитьСоединение();
		ТекстСообщения = НСтр("ru = 'Подключение к внешнему источнику данных выполнено успешно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Истина;
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		ТекстСообщения = НСтр("ru = 'Не удалось подключиться к внешнему источнику данных'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
 
КонецФункции

&НаСервере
Функция ПолучитьНастройкиПодключения() 	
	
	Отказ			= Ложь;
	ТекстСообщения	= "";
	
	Адрес 			= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаЗнРДСизБОСС", "Сервер");
	ПользовательSQL = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаЗнРДСизБОСС", "Логин");
	ПарольSQL 		= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаЗнРДСизБОСС", "Пароль");
	БазаДанных 		= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("ЗагрузкаЗнРДСизБОСС", "База");
	
	Если Адрес = Неопределено Тогда  
		ТекстСообщения	= ТекстСообщения + "Не указан параметр ""Сервер"" подключения." + Символы.ПС;
	КонецЕсли;
	Если ПользовательSQL = Неопределено Тогда  
		ТекстСообщения	= ТекстСообщения + "Не указан параметр ""Логин"" подключения." + Символы.ПС;
	КонецЕсли;
	Если ПарольSQL = Неопределено Тогда  
		ТекстСообщения = ТекстСообщения + "Не указан параметр ""Пароль"" подключения." + Символы.ПС;
	КонецЕсли;	
	Если БазаДанных = Неопределено Тогда  
		ТекстСообщения = ТекстСообщения + "Не указан параметр ""База"" подключения." + Символы.ПС;
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда 
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		СтрокаСоединения = "driver={SQL Server};server=" + Адрес + ";uid=" + ПользовательSQL + ";pwd=" + ПарольSQL + ";Database=" + БазаДанных;    
		
	КонецЕсли;	
	
	Возврат НЕ Отказ;

КонецФункции

#КонецОбласти