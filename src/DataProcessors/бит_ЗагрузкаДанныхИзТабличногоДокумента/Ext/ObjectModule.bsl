#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

#Область Сообщения
	
// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - Строка, текст сообщения.
//  Отказ          - Булево, признак отказа (По умолчанию = Ложь).
//  Заголовок 	   - Строка, заголовок сообщения (По умолчанию = "").
//
Процедура СообщитьОбОшибке(ТекстСообщения, Отказ = Ложь, Заголовок = "") Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	Если ОкончаниеСлужебногоСообщения > 0 И НачалоСлужебногоСообщения > 0 Тогда
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1))
		                 + Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		ОбщегоНазначения.СообщитьПользователю(Заголовок);
		Заголовок = "";
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры // СообщитьОбОшибке = ОбщегоНазначения.СообщитьОбОшибке()

#КонецОбласти

#Область ОбщиеСлужебныеПроцедурыИФункции

// Функция возвращает метаданные источника данных.
//
// Возвращаемое значение:
//  Объект метаданных.
//
Функция ПолучитьМетаданныеИсточника() Экспорт
	
	Если РежимЗагрузки = "Справочник" Тогда
        
        Если Не ПустаяСтрока(ИмяСправочника) Тогда
			Возврат Метаданные.Справочники[ИмяСправочника];
		КонецЕсли; 
        
    ИначеЕсли РежимЗагрузки = "РегистрСведений" Тогда
        
        Если Не ПустаяСтрока(ИмяРегистраСведений) Тогда
			Возврат Метаданные.РегистрыСведений[ИмяРегистраСведений];
        КонецЕсли;
        
    ИначеЕсли РежимЗагрузки = "ТабличнаяЧасть" Тогда
        
        Если ЗначениеЗаполнено(СсылкаОбъекта) И ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
			Возврат СсылкаОбъекта.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
		КонецЕсли;     
        
	ИначеЕсли РежимЗагрузки = "РучнаяОперация" Тогда
                    
        Если ОбъектМетаданных = "Документ.бит_ОперацияБюджетирование" Тогда
		    Возврат Метаданные.РегистрыБухгалтерии.бит_Бюджетирование;
        ИначеЕсли ЗначениеЗаполнено(РегистрБухгалтерииДляРучнойОперации) Тогда
		    Возврат Метаданные.РегистрыБухгалтерии[РегистрБухгалтерииДляРучнойОперации.ИмяОбъекта];
        КонецЕсли;   
            
	ИначеЕсли РежимЗагрузки = "ПланСчетов" Тогда
                    
        Если Не ПустаяСтрока(ИмяПланаСчетов) Тогда
			Возврат Метаданные.ПланыСчетов[ИмяПланаСчетов];
		КонецЕсли;   
            
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьМетаданныеИсточника()

// Функция "расщепляет" строку на подстроки, используя заданный
//	разделитель. Разделитель может иметь любую длину.
//	Если в качестве разделителя задан пробел, рядом стоящие пробелы
//	считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//	игнорируются.
//	Например,
//	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов,
//	три из которых - пустые строки, а
//	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов.
//
//	Параметры:
//	 Стр         -  Строка, которую необходимо разложить на подстроки.
//						Параметр передается по значению.
//	 Разделитель - Строка -разделитель, (По умолчанию = ",").
//
//
//	Возвращаемое значение:
//	 Массив значений, элементы которого - подстроки.
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
        
        Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз-1));
			Стр = СокрЛ(Сред(Стр, Поз));
        КонецЦикла;
        
    Иначе
        
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз-1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
        КонецЦикла;
        
	КонецЕсли;
	
КонецФункции // РазложитьСтрокуВМассивПодстрок

// Процедура конвертирует старые настройки обработки.
//
Процедура КонвертироватьНастройкиОбработки() Экспорт

	ПолученноеЗначение = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", "Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента");
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегСвНастройки.ВариантНастройка	КАК ВариантНастройка
	|	
	|ИЗ
	|	РегистрСведений.бит_НастройкиДоступностиВариантовОтчетов КАК РегСвНастройки
	|ГДЕ
	|	РегСвНастройки.ВариантНастройка.КлючОбъекта = &НастраиваемыйОбъект
	|";
	Результат = Запрос.Выполнить();
			 
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураНастроек = Выборка.ВариантНастройка.ХранилищеНастроек.Получить();
		
		Если ЗначениеЗаполнено(СтруктураНастроек.РежимЗагрузки)
			И (СтруктураНастроек.РежимЗагрузки <> "Справочник" 
				ИЛИ СтруктураНастроек.РежимЗагрузки <> "РегистрСведений" 
				ИЛИ СтруктураНастроек.РежимЗагрузки <> "ТабличнаяЧасть" 
				ИЛИ СтруктураНастроек.РежимЗагрузки <> "РучнаяОперация"
				ИЛИ СтруктураНастроек.РежимЗагрузки <> "ПланСчетов") Тогда
				
			Если СтруктураНастроек.РежимЗагрузки = "ЗагрузкаСпр" ИЛИ СтруктураНастроек.РежимЗагрузки = "Справочники" Тогда
				СтруктураНастроек.Вставить("РежимЗагрузки", "Справочник");
			ИначеЕсли СтруктураНастроек.РежимЗагрузки = "ЗагрузкаРС" ИЛИ СтруктураНастроек.РежимЗагрузки = "РегистрыСведений" Тогда	
				СтруктураНастроек.Вставить("РежимЗагрузки", "РегистрСведений");
			ИначеЕсли СтруктураНастроек.РежимЗагрузки = "ЗагрузкаТч" ИЛИ СтруктураНастроек.РежимЗагрузки = "ТабличныеЧасти" Тогда	
				СтруктураНастроек.Вставить("РежимЗагрузки", "ТабличнаяЧасть");
			ИначеЕсли СтруктураНастроек.РежимЗагрузки = "ПланыСчетов" Тогда	
				СтруктураНастроек.Вставить("РежимЗагрузки", "ПланСчетов");
			ИначеЕсли СтруктураНастроек.РежимЗагрузки = "РучныеОперации" Тогда	
				СтруктураНастроек.Вставить("РежимЗагрузки", "РучнаяОперация");
			КонецЕсли;			
			
			Если СтруктураНастроек.Свойство("СохранятьТД", ПолученноеЗначение) Тогда
				СтруктураНастроек.Вставить("СохранятьТабличныйДокумент", ПолученноеЗначение);
				СтруктураНастроек.Удалить("СохранятьТД");
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ИмяТч", ПолученноеЗначение) Тогда
				СтруктураНастроек.Вставить("ИмяТабличнойЧасти", ПолученноеЗначение);
				СтруктураНастроек.Удалить("ИмяТч");
			КонецЕсли;	
			
			Если СтруктураНастроек.Свойство("РегистрБухгалтерииРо", ПолученноеЗначение) Тогда
				СтруктураНастроек.Вставить("РегистрБухгалтерииДляРучнойОперации", ПолученноеЗначение);
				СтруктураНастроек.Удалить("РегистрБухгалтерииРо");
			КонецЕсли;	
			
			СправочникОбъект = Выборка.ВариантНастройка.ПолучитьОбъект();
			СправочникОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураНастроек);
			бит_ОбщегоНазначения.ЗаписатьСправочник(СправочникОбъект, , "Нет");

		КонецЕсли;
		
	КонецЦикла; 	

КонецПроцедуры // КонвертироватьНастройкиОбработки()

#КонецОбласти

#Область ЗаполнениеТаблицыРеквизитов	

// Заполняет настройки колонок по умолчанию или по переданным настройкам.
//
// Параметры:
//  ТаблицаРеквизитов - Таблица значений.
//
Процедура ЗаполнитьНастройкиКолонок(ТаблицаРеквизитов) Экспорт
	
	СобытиеПередЗаписью          = "";
	СобытиеПриЗаписи             = "";
	СобытиеПослеДобавленияСтроки = "";
    
    ЕстьГруппы = Ложь;
    
    СтруктураУмолчаний = Неопределено;
    
	Оформление = Неопределено;
	
	ТаблицаРеквизитов.Очистить();
    
    МетаданныеИсточника = ПолучитьМетаданныеИсточника();	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    Если РежимЗагрузки = "Справочник" Тогда
        
		ЗаполнитьНастройкиКолонокСправочника(ТаблицаРеквизитов, МетаданныеИсточника);
        
    ИначеЕсли РежимЗагрузки = "РегистрСведений" Тогда
        
        ЗаполнитьНастройкиКолонокРегистраСведений(ТаблицаРеквизитов, МетаданныеИсточника);
        
    ИначеЕсли РежимЗагрузки = "ТабличнаяЧасть" Тогда
        
        ЗаполнитьНастройкиКолонокТабличнойЧасти(ТаблицаРеквизитов, МетаданныеИсточника);
    	        
    ИначеЕсли РежимЗагрузки = "РучнаяОперация" Тогда
        
        ЗаполнитьНастройкиКолонокРегистраБухгалтерии(ТаблицаРеквизитов, МетаданныеИсточника);
        
    ИначеЕсли РежимЗагрузки = "ПланСчетов" Тогда
        
        ЗаполнитьНастройкиКолонокПланаСчетов(ТаблицаРеквизитов, МетаданныеИсточника);
        
    КонецЕсли;
	
	Если Оформление <> Неопределено Тогда
        
		НомерКолонкиОформления = 0;
		нКолонки = 1;
		Для каждого Колонка Из Оформление.Колонки Цикл
			
			ТекРеквизит = ТаблицаРеквизитов.Найти(Колонка.ДанныеФлажка, "ИмяРеквизита");
			Если ТекРеквизит <> Неопределено Тогда
				Индекс = ТаблицаРеквизитов.Индекс(ТекРеквизит);
				Если Индекс >= НомерКолонкиОформления  Тогда
					
					ТекРеквизит.ШиринаКолонки = 3;
					ТаблицаРеквизитов.Сдвинуть(ТекРеквизит, НомерКолонкиОформления - Индекс);
					
					Если Колонка.Видимость И Не Колонка.Скрывать Тогда
						ТекРеквизит.Выбрать = Колонка.Видимость;
						ТекРеквизит.НомерКолонки = нКолонки;
						нКолонки = нКолонки + 1;
					КонецЕсли;
					
					НомерКолонкиОформления = НомерКолонкиОформления + 1;
					
				КонецЕсли;
			КонецЕсли;
			
			ТекРеквизит = ТаблицаРеквизитов.Найти(Колонка.Данные, "ИмяРеквизита");
			Если ТекРеквизит <> Неопределено Тогда
				Индекс = ТаблицаРеквизитов.Индекс(ТекРеквизит);
				Если Индекс >= НомерКолонкиОформления Тогда
					ТекРеквизит.ШиринаКолонки = Колонка.Ширина;
					ТаблицаРеквизитов.Сдвинуть(ТекРеквизит, НомерКолонкиОформления - Индекс);
					Если Колонка.Видимость Тогда
						ТекРеквизит.Выбрать = Колонка.Видимость;
						ТекРеквизит.НомерКолонки = нКолонки;
						нКолонки = нКолонки + 1;
					КонецЕсли;
					НомерКолонкиОформления = НомерКолонкиОформления + 1;					
				КонецЕсли;
			КонецЕсли;
				
        КонецЦикла;
        
	ИначеЕсли СтруктураУмолчаний <> Неопределено Тогда
		
		НомерКолонкиОформления = 0;
		нКолонки = 1;
		Для каждого КлючИЗначение Из СтруктураУмолчаний Цикл
			Колонка = КлючИЗначение.Значение;
			ТекРеквизит = ТаблицаРеквизитов.Найти(Колонка.ИмяРеквизита, "ИмяРеквизита");
			Если Не ТекРеквизит = Неопределено Тогда
				Индекс = ТаблицаРеквизитов.Индекс(ТекРеквизит);
				Если Индекс >= НомерКолонкиОформления Тогда
					ЗаполнитьЗначенияСвойств(ТекРеквизит, Колонка);
					
					ТаблицаРеквизитов.Сдвинуть(ТекРеквизит, НомерКолонкиОформления - Индекс);
					Если Колонка.Выбрать Тогда
						ТекРеквизит.НомерКолонки = нКолонки;
						нКолонки = нКолонки + 1;
					КонецЕсли;
					НомерКолонкиОформления = НомерКолонкиОформления + 1;					
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
		
	Иначе		 
		
		нКолонки = 1;
		Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл			
			ТекРеквизит.ВыгружатьСписки = ТекРеквизит.Выбрать И Не ТекРеквизит.Скрывать;
			ТекРеквизит.НомерКолонки = нКолонки;
			нКолонки = нКолонки + 1;			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удаление скрытых.
	УдалитьСкрытыеСтрокиИзТаблицыРеквизитов(ТаблицаРеквизитов);
		
КонецПроцедуры // ЗаполнитьНастройкиКолонок()

// Процедура удаляет скрываемые строки из таблицы реквизитов.
//
// Параметры:
//  ТаблицаРеквизитов - ДанныеФормыКоллекция.
//
Процедура УдалитьСкрытыеСтрокиИзТаблицыРеквизитов(ТаблицаРеквизитов) Экспорт

	МассивСкрываемых = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("Скрывать", Истина));
	КоличествоСкрываемых = МассивСкрываемых.Количество();
	Если КоличествоСкрываемых > 0 Тогда
		Для каждого СкрываемаяСтрока Из МассивСкрываемых Цикл
			ТаблицаРеквизитов.Удалить(СкрываемаяСтрока);	
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры

// Функция возвращает список, элементами которого выступают возможные связи по владельцу для загружаемого реквизита.
//
// Параметры:
//  ТекРеквизит         - Строка таблицы значений загружаемого реквизита.
//  ТаблицаРеквизитов   - ДанныеФормыКоллекция.
//  МетаданныеИсточника - Метаданные объекта.
//
// Возвращаемое значение:
//  Список значений; значение списка - строка имя колонки связи или ссылка на элемент связи.
//
Функция ПолучитьСвязиПоВладельцу(ТекРеквизит, ТаблицаРеквизитов, МетаданныеИсточника) Экспорт
	
	ЕстьТипСамогоОбъекта = Ложь;
	Если РежимЗагрузки = "Справочник" Тогда
		ОписаниеТиповСправочника = Тип(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(), ".", "Ссылка."));
	Иначе
		ОписаниеТиповСправочника = Неопределено;
	КонецЕсли;	 
	
	СписокВыбора = Новый СписокЗначений;
	ТипыВладельцев = Новый Соответствие;
	Для каждого ТипКолонки Из ТекРеквизит.ОписаниеТипов.Типы() Цикл
        
        Если Справочники.ТипВсеСсылки().СодержитТип(ТипКолонки) Тогда
            
            Для каждого Владелец Из Метаданные.НайтиПоТипу(ТипКолонки).Владельцы Цикл
				ТипВладельца   = Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка."));
				Если ТипыВладельцев[ТипВладельца] = Неопределено Тогда
					
					Если ТипВладельца = ОписаниеТиповСправочника Тогда						
						ЕстьТипСамогоОбъекта = Истина;						
					КонецЕсли;
					 
					ТипыВладельцев.Вставить(ТипВладельца, Владелец.ПолноеИмя());
					Для каждого КолонкаСвязиПоВладельцу Из ТаблицаРеквизитов Цикл
						Если КолонкаСвязиПоВладельцу.ОписаниеТипов.Типы()[0] = ТипВладельца Тогда
							// Возможно надо будет проходить по всем типам.
							СписокВыбора.Добавить(КолонкаСвязиПоВладельцу.ИмяРеквизита, КолонкаСвязиПоВладельцу.ИмяРеквизита);
						КонецЕсли;
                    КонецЦикла;
                    
				КонецЕсли;
            КонецЦикла;
            
		КонецЕсли;
        
    КонецЦикла;
	
    Для каждого КлючИЗначение Из ТипыВладельцев Цикл
    	СписокВыбора.Добавить(СтрЗаменить(КлючИЗначение.Значение, ".", "Ссылка."), "<" + КлючИЗначение.Значение + ">");
    КонецЦикла;
   	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСвязиПоВладельцу()

#КонецОбласти

#Область ФормированиеТабличногоДокумента
	
// Процедура формирует шапку табличного документа, в соответствии с таблицей загружаемых реквизитов.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент.
//  ТаблицаРеквизитов - ТаблицаЗначений.
//
Процедура СформироватьШапкуТабДок(ТабличныйДокумент, ТаблицаРеквизитов) Экспорт
       
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Таблица = ТаблицаРеквизитов.Скопировать();
	Таблица.Сортировать("НомерКолонки");
	нКолонки = 0;
    
    Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
		  
        Если Не ТекРеквизит.Выбрать ИЛИ ТекРеквизит.Скрывать ИЛИ ТекРеквизит.НомерКолонки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		нКолонки = нКолонки + 1;
		
		Если ТекРеквизит.ШиринаКолонки = 0 Тогда			
			ШиринаКолонки = 30;
			Если ТекРеквизит.ОписаниеТипов.Типы().Количество() = 1 Тогда                
                ПервыйТип = ТекРеквизит.ОписаниеТипов.Типы()[0];
				Если ПервыйТип = Тип("Строка") Тогда
					Если ТекРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина = 0 Тогда
						ШиринаКолонки = 50;
                    ИначеЕсли ТекРеквизит.ИмяРеквизита = "Наименование" Тогда
                        ШиринаКолонки = Мин(Макс(ТекРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина, 20), 50);
                    Иначе
						ШиринаКолонки = Мин(Макс(ТекРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина, 10), 50);
					КонецЕсли;
				ИначеЕсли ПервыйТип = Тип("Число") Тогда
					ШиринаКолонки = Макс(ТекРеквизит.ОписаниеТипов.КвалификаторыЧисла.Разрядность, 10);
				ИначеЕсли ПервыйТип = Тип("Булево") Тогда
					ШиринаКолонки = 10;
                КонецЕсли;                
			КонецЕсли;
		Иначе
			ШиринаКолонки = ТекРеквизит.ШиринаКолонки;
        КонецЕсли;
        ТекРеквизит.ШиринаКолонки = ШиринаКолонки;
				
		Область = ТабличныйДокумент.Область("R1C" + нКолонки);        
        БылТекст = Не ПустаяСтрока(Область.Текст);
		Область.Текст       = ?(БылТекст, Область.Текст + Символы.ПС, "") + ТекРеквизит.ПредставлениеРеквизита;
        Область.Расшифровка = ТекРеквизит.ИмяРеквизита;
        Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
		Область.ЦветФона    = ЦветаСтиля["ЦветФонаШапкиОтчета"];
		Область.Обвести(Линия, Линия, Линия, Линия);
		
		ОбластьКолонки = ТабличныйДокумент.Область("C" + нКолонки);
		ОбластьКолонки.ШиринаКолонки = ?(БылТекст, Макс(ОбластьКолонки.ШиринаКолонки, ШиринаКолонки), ШиринаКолонки);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьШапкуТабДок()

#Область ЗагрузкаИзОбъектовБазыВТабличныйДокумент

// Процедура загружает данные справочника в табличный документ обработки.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент.
//  ТаблицаРеквизитов - ТаблицаЗначений.
//  МассивСсылок      - Массив.
//
Процедура ЗаполнитьТабДокИзСправочника(ТабличныйДокумент, ТаблицаРеквизитов, МассивСсылок = Неопределено) Экспорт
    
    ТабличныйДокумент.Очистить();
    СформироватьШапкуТабДок(ТабличныйДокумент, ТаблицаРеквизитов);
	    
    нСтроки = ПерваяСтрокаДанныхТабличногоДокумента;
	
	ВсеДанные = МассивСсылок = Неопределено ИЛИ (МассивСсылок.Количество() = 1 И Не ЗначениеЗаполнено(МассивСсылок[0]));
	
	Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ 
    |    *
    |ИЗ
    |   Справочник.%ИмяСправочника% КАК %ИмяСправочника%
	|%Условие%
    |АВТОУПОРЯДОЧИВАНИЕ
    |";    
	Если ВсеДанные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Условие%", "");
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Условие%", "ГДЕ
															  |	  %ИмяСправочника%.Ссылка В(&МассивСсылок)");
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	КонецЕсли;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", ИмяСправочника);
    Результат = Запрос.Выполнить();        
    Выборка = Результат.Выбрать();        
	Пока Выборка.Следующий() Цикл        
    		
		нКолонки = 0;
		
		Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
			
            Если Не ТекРеквизит.Выбрать Тогда
                Продолжить;
            КонецЕсли;
				
            Если РучнаяНумерацияКолонокТабличногоДокумента Тогда
                нКолонки = ТекРеквизит.НомерКолонки;
            Иначе
                нКолонки = нКолонки + 1;
            КонецЕсли;
            
            Область = ТабличныйДокумент.Область("R" + Формат(нСтроки, "ЧГ=") + "C" + нКолонки);
            
            Значение = Выборка[ТекРеквизит.ИмяРеквизита];				
            Попытка
                Представление = Значение[ТекРеквизит.ИскатьПо];					
            Исключение					
                Представление = Значение;					
            КонецПопытки;
            
            Область.Текст       = Представление;
            Область.Расшифровка = Значение;	
                        			
		КонецЦикла;
		
		нСтроки = нСтроки + 1;
        
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьТабДокИзСправочника()

// Процедура загружает данные регистра сведений в табличный документ обработки.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент.
//  ТаблицаРеквизитов - ТаблицаЗначений.
//
Процедура ЗаполнитьТабДокИзРегистраСведений(ТабличныйДокумент, ТаблицаРеквизитов) Экспорт
    
    ТабличныйДокумент.Очистить();
    СформироватьШапкуТабДок(ТабличныйДокумент, ТаблицаРеквизитов);
    
    нСтроки = ПерваяСтрокаДанныхТабличногоДокумента;
    
    НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
    НаборЗаписей.Прочитать();
       
    Для каждого СтрРег Из НаборЗаписей Цикл
    	
    	нКолонки = 0;
    	
    	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
    		
            Если Не ТекРеквизит.Выбрать ИЛИ ТекРеквизит.Скрывать Тогда
                Продолжить;
            КонецЕсли;
    			
            Если РучнаяНумерацияКолонокТабличногоДокумента Тогда
                нКолонки = ТекРеквизит.НомерКолонки;
            Иначе
                нКолонки = нКолонки + 1;
            КонецЕсли;
            
            Область = ТабличныйДокумент.Область("R" + Формат(нСтроки, "ЧГ=") + "C" + нКолонки);
            
            Значение = СтрРег[ТекРеквизит.ИмяРеквизита];				
            Попытка
                Представление = Значение[ТекРеквизит.ИскатьПо];					
            Исключение					
                Представление = Значение;					
            КонецПопытки;
            
            Область.Текст       = Представление;
            Область.Расшифровка = Значение;	
                        			
    	КонецЦикла;
    	
    	нСтроки = нСтроки + 1;
        
    КонецЦикла;	

КонецПроцедуры // ЗаполнитьТабДокИзРегистраСведений()

// Процедура загружает данные табличной части объекта в табличный документ обработки.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент.
//  ТаблицаРеквизитов - ТаблицаЗначений.
//
Процедура ЗаполнитьТабДокИзТабличнойЧасти(ТабличныйДокумент, ТаблицаРеквизитов) Экспорт
    
    ТабличныйДокумент.Очистить();
	АвтоЦвет = бит_ОбщегоНазначения.ЦветТекстаЯчейкиТабличногоДокумента(ТабличныйДокумент);
	
    СформироватьШапкуТабДок(ТабличныйДокумент, ТаблицаРеквизитов);
	
    нСтроки = ПерваяСтрокаДанныхТабличногоДокумента;
    
    ИсточникТч = СсылкаОбъекта[ИмяТабличнойЧасти];
	Для каждого СтрокаТч Из ИсточникТч Цикл
		
		нКолонки = 0;
		
		Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
			
            Если Не ТекРеквизит.Выбрать ИЛИ ТекРеквизит.Скрывать Тогда
                Продолжить;
            КонецЕсли;
				
            Если РучнаяНумерацияКолонокТабличногоДокумента Тогда
                нКолонки = ТекРеквизит.НомерКолонки;
            Иначе
                нКолонки = нКолонки + 1;
            КонецЕсли;
            
            Область = ТабличныйДокумент.Область("R" + Формат(нСтроки, "ЧГ=") + "C" + нКолонки);
            
            Значение = СтрокаТч[ТекРеквизит.ИмяРеквизита];				
            Попытка
                Представление = Значение[ТекРеквизит.ИскатьПо];					
            Исключение					
                Представление = Значение;					
            КонецПопытки;
            
            Область.Текст       = Представление;
            Область.Расшифровка = Значение;	
            
            // Если заполнено поле связи доп. аналитики со статьей.
            Если ЗначениеЗаполнено(ТекРеквизит.СвязьАналитики_ИмяСтатьиОборотов) Тогда
                
                // Поиск статьи текущей строки.
                СтатьяСвязи = СтрокаТч[ТекРеквизит.СвязьАналитики_ИмяСтатьиОборотов];
                Если ЗначениеЗаполнено(СтатьяСвязи) Тогда
                    ВедетсяУчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяСвязи, "Учет_" + ТекРеквизит.СвязьАналитики_ИмяАналитики);
                    Если ВедетсяУчет Тогда
                        ОбъявитьОбластьДоступной(Область, АвтоЦвет, Ложь);
                    Иначе                        
                        ОбъявитьОбластьНедоступной(Область);
                    КонецЕсли;                       
                Иначе	
                    ОбъявитьОбластьНедоступной(Область);
                КонецЕсли;            	
            
            КонецЕсли;
            			
		КонецЦикла;
		
		нСтроки = нСтроки + 1;
        
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьТабДокИзТабличнойЧасти()

// Процедура загружает данные движений документа - ручной операции в табличный документ обработки.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент.
//  ТаблицаРеквизитов - ТаблицаЗначений.
//
Процедура ЗаполнитьТабДокИзРучнойОперации(ТабличныйДокумент, ТаблицаРеквизитов) Экспорт
    
    ТабличныйДокумент.Очистить();
	АвтоЦвет = бит_ОбщегоНазначения.ЦветТекстаЯчейкиТабличногоДокумента(ТабличныйДокумент);
	
    СформироватьШапкуТабДок(ТабличныйДокумент, ТаблицаРеквизитов);
	
    нСтроки = ПерваяСтрокаДанныхТабличногоДокумента;
	
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда	
		Возврат;	
	КонецЕсли;
		
	Если ОбъектМетаданных = "Документ.бит_ОперацияБюджетирование" Тогда
		ИмяРегБух = "бит_Бюджетирование";
	Иначе
		ИмяРегБух = бит_ОбщегоНазначения.ПолучитьЗначениеРеквизитаОбъекта(РегистрБухгалтерииДляРучнойОперации, "ИмяОбъекта");
	КонецЕсли;
	КоличествоСубконто = Метаданные.ПланыСчетов[ИмяРегБух].МаксКоличествоСубконто;
	
	НаборРегистра = РегистрыБухгалтерии[ИмяРегБух].СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Регистратор.Установить(СсылкаОбъекта);
	НаборРегистра.Прочитать();

	// Таблица движений документа.
	ТаблицаРегистра = НаборРегистра.Выгрузить();
	
	// Проверка видов субконто в таблице. Могут не соответствовать счету.
	Для каждого СтрокаРегистра Из ТаблицаРегистра Цикл
		
		// Проверка субконто Дт.
		Если ЗначениеЗаполнено(СтрокаРегистра.СчетДт) Тогда
			СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаРегистра.СчетДт);
			Для Сч = 1 По КоличествоСубконто Цикл					
				ВидСбТз = СтрокаРегистра["ВидСубконтоДт" + Сч]; // Вид субконто в таблице.
				ВидСбСч = СвСч["ВидСубконто" + Сч]; // Вид субконто у счета. Верное. 
				Если ВидСбТз <> ВидСбСч Тогда
					// Найдено несоответствие.
					СтрокаРегистра["СубконтоДт" + Сч] = НаборРегистра[0].СубконтоДт[ВидСбСч];
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;
		
		// Проверка субконто Кт.
		Если ЗначениеЗаполнено(СтрокаРегистра.СчетКт) Тогда
			СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаРегистра.СчетКт);
			Для Сч = 1 По КоличествоСубконто Цикл					
				ВидСбТз = СтрокаРегистра["ВидСубконтоКт" + Сч]; // Вид субконто в таблице.
				ВидСбСч = СвСч["ВидСубконто" + Сч]; // Вид субконто у счета. Верное. 
				Если ВидСбТз <> ВидСбСч Тогда
					// Найдено несоответствие.
					СтрокаРегистра["СубконтоКт" + Сч] = НаборРегистра[0].СубконтоКт[ВидСбСч];
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
	Для каждого СтрокаРегистра Из ТаблицаРегистра Цикл
				
		нКолонки = 0;
		
		Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
			
            Если Не ТекРеквизит.Выбрать ИЛИ ТекРеквизит.Скрывать Тогда
                Продолжить;
            КонецЕсли;
				
            Если РучнаяНумерацияКолонокТабличногоДокумента Тогда
                нКолонки = ТекРеквизит.НомерКолонки;
            Иначе
                нКолонки = нКолонки + 1;
            КонецЕсли;
            
            Область = ТабличныйДокумент.Область("R" + Формат(нСтроки, "ЧГ=") + "C" + нКолонки);
            
            Значение = СтрокаРегистра[ТекРеквизит.ИмяРеквизита];				
            Попытка
                Представление = Значение[ТекРеквизит.ИскатьПо];					
            Исключение					
                Представление = Значение;					
            КонецПопытки;
            
            Область.Текст       = Представление;
            Область.Расшифровка = Значение;	
            
            // Если заполнено поле связи доп. аналитики со статьей.
            Если ЗначениеЗаполнено(ТекРеквизит.СвязьАналитики_ИмяСтатьиОборотов) Тогда
                
                // Поиск статьи текущей строки.
                СтатьяСвязи = СтрокаРегистра[ТекРеквизит.СвязьАналитики_ИмяСтатьиОборотов];
                Если ЗначениеЗаполнено(СтатьяСвязи) Тогда
                    ВедетсяУчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяСвязи, "Учет_" + ТекРеквизит.СвязьАналитики_ИмяАналитики);
                    Если ВедетсяУчет Тогда
                        ОбъявитьОбластьДоступной(Область, АвтоЦвет, Ложь);
                    Иначе                        
                        ОбъявитьОбластьНедоступной(Область);
                    КонецЕсли;                       
                Иначе	
                    ОбъявитьОбластьНедоступной(Область);
                КонецЕсли;            	
            
            КонецЕсли;
            			
		КонецЦикла;
		
		нСтроки = нСтроки + 1;
        
	КонецЦикла;	
		
КонецПроцедуры // ЗаполнитьТабДокИзРучнойОперации()

// Функция определяет строку полей для создания структуры для загрузки/выгрузки планов счетов.
//
// Параметры:
//  ИмяПланаСчетов  - Строка.
//  ПометкаУдаления - Булево (По умолчанию = Истина). 
//
// Возвращаемое значение:
//  Стока.
//
Функция ОпределитьСтрокуПолейПланаСчетов(ИмяПланаСчетов, ПометкаУдаления = Истина) Экспорт
	
	Если бит_БухгалтерияСервер.ЕстьИсторическиеКурсы(ИмяПланаСчетов) Тогда
		СтрокаПолей = "Родитель,Код,Порядок,Наименование,НаименованиеПолное,Вид,Забалансовый,Валютный,Количественный,ИспользоватьИсторическиеКурсы,Группа"; 
	Иначе
		СтрокаПолей = "Родитель,Код,Порядок,Наименование,НаименованиеПолное,Вид,Забалансовый,Валютный,Количественный,Группа"; 
	КонецЕсли;
	
	Если ИмяПланаСчетов = "бит_Бюджетирование" Тогда
		СтрокаПолей = СтрокаПолей + ",ВидСубконто1,ТолькоОбороты1,ВидСубконто2,ТолькоОбороты2,ВидСубконто3,ТолькоОбороты3,ВидСубконто4,ТолькоОбороты4";
	Иначе
		СтрокаПолей = СтрокаПолей + ",ВидСубконто1,ТолькоОбороты1,Суммовой1,Количественный1,Валютный1,ВидСубконто2,ТолькоОбороты2,Суммовой2,Количественный2,Валютный2,ВидСубконто3,ТолькоОбороты3,Суммовой3,Количественный3,Валютный3,ВидСубконто4,ТолькоОбороты4,Суммовой4,Количественный4,Валютный4";
	КонецЕсли;
	
	СтрокаПолей = СтрокаПолей + ",ЗапретитьИспользоватьВПроводках";
		
    Если ПометкаУдаления Тогда
        СтрокаПолей = СтрокаПолей + ",ПометкаУдаления";
    КонецЕсли;
    
	Возврат СтрокаПолей;
	
КонецФункции // ОпределитьСтруктуруПолей()

// Процедура загружает данные плана счетов.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент.
//  ТаблицаРеквизитов - ТаблицаЗначений.
//
Процедура ЗаполнитьТабДокИзПланаСчетов(ТабличныйДокумент, ТаблицаРеквизитов) Экспорт
    
    ТабличныйДокумент.Очистить();
    СформироватьШапкуТабДок(ТабличныйДокумент, ТаблицаРеквизитов);
		
	Если Не ЗначениеЗаполнено(ИмяПланаСчетов) Тогда	
		Возврат;	
	КонецЕсли;
		
	нСтроки = ПерваяСтрокаДанныхТабличногоДокумента;
			
	ДанныеПланаСчетов = ДанныеПланаСчетов(ИмяПланаСчетов);
	
	Для каждого Выборка Из ДанныеПланаСчетов Цикл
	    		
		нКолонки = 0;
		
		Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
			
            Если Не ТекРеквизит.Выбрать Тогда
                Продолжить;
			КонецЕсли;
			
			ИмяРеквизита = ТекРеквизит.ИмяРеквизита;
							
            Если РучнаяНумерацияКолонокТабличногоДокумента Тогда
                нКолонки = ТекРеквизит.НомерКолонки;
            Иначе
                нКолонки = нКолонки + 1;
            КонецЕсли;
			
            Область = ТабличныйДокумент.Область("R" + Формат(нСтроки, "ЧГ=") + "C" + нКолонки);
			
			Значение = Выборка[ТекРеквизит.ИмяРеквизита];
			            
			Попытка
                Представление = Значение[ТекРеквизит.ИскатьПо];					
            Исключение					
                Представление = Значение;					
            КонецПопытки;
            
            Область.Текст       = Представление;
            Область.Расшифровка = Значение;	
				
		КонецЦикла;
		
		нСтроки = нСтроки + 1;
        
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабДокИзПланаСчетов()

#КонецОбласти

#КонецОбласти

#Область ВосстановлениеТабличногоДокумента
	
// Функция считывает в табличный документ данные из файла в формате TXT.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, в который необходимо прочитать данные.
//  ИмяФайла          - Строка - имя файла в формате TXT, из которого необходимо прочитать данные.
//
// Возвращаемое значение:
//  Булево (Истина, если файл прочитан).
//
Функция ПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент, ИмяФайла) Экспорт
		
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ИмяФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка открытия файла.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент.Очистить();
	Для ТекущаяСтрока = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ТекущаяКолонка = 0;
		Для каждого Значение Из РазложитьСтрокуВМассивПодстрок(ТекстовыйДокумент.ПолучитьСтроку(ТекущаяСтрока), Символы.Таб) Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") + "C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Значение;			
		КонецЦикла;		
	КонецЦикла;
        
	Возврат Истина;
	
КонецФункции // ПрочитатьТабличныйДокументИзТекста()

// Функция считывает в табличный документ данные из файла в формате dBase III (*.dbf).
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, в который необходимо прочитать данные.
//  ИмяФайла          - Строка - имя файла в формате TXT, из которого необходимо прочитать данные.
//
// Возвращаемое значение:
//  Булево (Истина, если файл прочитан).
//
Функция ПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент, ИмяФайла) Экспорт
		
	ФайлДанных  = Новый XBase;
	ФайлДанных.Кодировка = КодировкаXBase.OEM;
	Попытка
		ФайлДанных.ОткрытьФайл(ИмяФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка открытия файла.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент.Очистить();
	ТекущаяСтрока = 1;	
	
	ТекущаяКолонка = 0;
	Для каждого Поле Из ФайлДанных.поля Цикл
		ТекущаяКолонка = ТекущаяКолонка + 1;
		ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Поле.Имя;
	КонецЦикла;
		
	Рез = ФайлДанных.Первая();
	Пока Не ФайлДанных.ВКонце() Цикл
        
        ТекущаяСтрока = ТекущаяСтрока + 1;
		ТекущаяКолонка = 0;
		Для каждого Поле Из ФайлДанных.поля Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			Если Поле.Тип = "M" Тогда
				Продолжить;	
			КонецЕсли;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = ФайлДанных.ПолучитьЗначениеПоля(ТекущаяКолонка - 1);
		КонецЦикла;
		
		ФайлДанных.Следующая();
        
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПрочитатьТабличныйДокументИзDBF()

// Процедура записывает значения расшифровки в поля табличного документа.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, в который необходимо прочитать данные.
//  ТаблицаРеквизитов - ТаблицаЗначений.
//
// Возвращаемое значение:
//  Булево (Истина, если файл прочитан).
//
Процедура ЗаписатьЗначенияРасшифровкиВПоля(ТабличныйДокумент, ТаблицаРеквизитов) Экспорт
    
    МетаИсточника = ПолучитьМетаданныеИсточника();
    
    КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - ПерваяСтрокаДанныхТабличногоДокумента + 1;
        
    Для НомерСтроки = 2 По КоличествоСтрок Цикл
        
		Для каждого Колонка Из ТаблицаРеквизитов Цикл		
    		            
            Если Колонка.НомерКолонки <> 0 Тогда
            
                ТекущаяОбласть = ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C" + Формат(Колонка.НомерКолонки, "ЧГ="));
                
                Если ЗначениеЗаполнено(Колонка.ОписаниеТипов) И Строка(Колонка.ОписаниеТипов) = "Число" Тогда
                    ТекущаяОбласть.Расшифровка = Колонка.ОписаниеТипов.ПривестиЗначение(ТекущаяОбласть.Текст);              
                КонецЕсли;                	
            
            КонецЕсли;   		
            
        КонецЦикла;
        
    КонецЦикла;
            
КонецПроцедуры // ЗаписатьЗначенияРасшифровкиВПоля()

#КонецОбласти

#Область Оформление
	
// Процедура устанавливает оформление для областей доп. аналитик.
//
// Параметры:
//  РезультатВыбора		- Строка.
//  ТабличныйДокумент 	- ТабличныйДокумент.
//  ТаблицаРеквизитов 	- ДанныеФормыКоллекция.
//  ПараметрыВыбораЗнч  - Структура.
//  нС 					- Число.
//  нК 					- Число.
//  АвтоЦвет			- Цвет.
//
Процедура ОформитьДопАналитикиПоСтатье(РезультатВыбора, ТабличныйДокумент, ТаблицаРеквизитов, ПараметрыВыбораЗнч, нС, нК, АвтоЦвет) Экспорт
	
	// Область статьи оборотов в табличном документе.
    // Нужно проверить равенство Область.Текст = Область.Расшифровка.
    Если ТипЗнч(РезультатВыбора) = Тип("Строка") Тогда
    
        ОбластьСтатьи = ТабличныйДокумент.Область("R" + Формат(нС, "ЧГ=") + "C" + Формат(нК, "ЧГ="));
        // Поиск статьи оборотов
        ИскатьПо = ПараметрыВыбораЗнч.ИскатьПо;
        Если ПустаяСтрока(ИскатьПо) Тогда
            ИскатьПо = "Наименование";
        КонецЕсли;        
        Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ
        |	ТаблСтатьи.Ссылка
        |ИЗ
        |	Справочник.бит_СтатьиОборотов КАК ТаблСтатьи
        |ГДЕ";				
        Запрос.Текст = Запрос.Текст + "
        |	ТаблСтатьи." + ИскатьПо + " = &Представление";                
        Запрос.УстановитьПараметр("Представление", ОбластьСтатьи.Текст);
        РезЗапроса =  Запрос.Выполнить();
		Если РезЗапроса.Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'Не найдена статья оборотов ""%1""'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыбора);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);				
			ОформитьДопАналитикиПоСтатьеОбходАналитик(ТабличныйДокумент, ТаблицаРеквизитов, ПараметрыВыбораЗнч, АвтоЦвет, нС);
            Возврат;
		Иначе	
			Выборка = РезЗапроса.Выбрать();
			Выборка.Следующий();
			РезультатВыбора = Выборка.Ссылка;
			ОбластьСтатьи.Расшифровка = РезультатВыбора;
		КонецЕсли;
  
    КонецЕсли;
        
    // Заполнение структуры учета аналитик по статье.
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
	    МассивИменАналитик = Новый Массив;
	    Для каждого ЭлСп Из ПараметрыВыбораЗнч.СвязьАналитики_ИмяАналитики Цикл
	        МассивИменАналитик.Добавить("Учет_" + ЭлСп.Представление);    
	    КонецЦикла;
	    УчетПоАналитикам = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РезультатВыбора, МассивИменАналитик);
	КонецЕсли;

    // Обход областей аналитик.
    ОформитьДопАналитикиПоСтатьеОбходАналитик(ТабличныйДокумент, ТаблицаРеквизитов, ПараметрыВыбораЗнч, АвтоЦвет, нС, УчетПоАналитикам);
        
КонецПроцедуры // ОформитьДопАналитикиПоСтатье()

#КонецОбласти

#Область Контроль

// Процедура выполняет контроль заполнения данных табличного документа
// сообщает об ошибках и устанавливает комментарии к ошибочным ячейкам.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку.
//  ТаблицаРеквизитов - ТаблицаЗначений.
//  ТаблицаОтборов    - ТаблицаЗначений.
//
Процедура ПроверитьДанныеВТабличномДокументе(ТабличныйДокумент, ТаблицаРеквизитов, ТаблицаОтборов) Экспорт
	
	КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - ПерваяСтрокаДанныхТабличногоДокумента + 1;
        
	КоличествоОшибок = 0;
	Для К = 0  По КоличествоЭлементов - 1 Цикл
		ДанныеСтроки(ТабличныйДокумент, К + ПерваяСтрокаДанныхТабличногоДокумента, ТаблицаРеквизитов, ТаблицаОтборов, КоличествоОшибок);
    КонецЦикла;
	
	ТекстСообщения = НСтр("ru = 'Контроль заполнения завершен. Проверено строк: %1.'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоличествоЭлементов);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Если КоличествоОшибок Тогда
		ТекстСообщения = НСтр("ru = 'Выявлено ячеек, содержащих ошибки/неоднозначное представление: %1.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КоличествоОшибок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Ячеек, содержащих ошибки не выявлено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДанныеВТабличномДокументе()

// Функция формирует строку данных табличного документа
// сообщает об ошибках и устанавливает комментарии к ошибочным ячейкам.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент.
//  НомерСтроки       - Число, номер строки табличного документа.
//  ТаблицаРеквизитов - ТаблицаЗначений.
//  ТаблицаОтборов	  - ТаблицаЗначений.
//  ТекстыЯчеек       - Массив, возвращает массив текстов ячеек строки (По умолчанию = Неопределено).
//  КоличествоОшибок  - Число (По умолчанию = 0).
//  ВыводитьСообщения - Булево (По умолчанию = Истина).
//  Отказ 			  - Булево (По умолчанию = Ложь).
//
// Возвращаемое значение:
//  Структура, ключ - Имя загружаемого реквизита, Значение - Значение загружаемого реквизита.
//
Функция ДанныеСтроки(ТабличныйДокумент, НомерСтроки, ТаблицаРеквизитов, ТаблицаОтборов, КоличествоОшибок = 0, ВыводитьСообщения = Истина, Отказ = Ложь) Экспорт
	
	ДанныеСтроки = Новый Структура;	
	
	ТекстыЯчеек = Новый Массив;
	ТекстыЯчеек.Добавить(Неопределено);
	Для к = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		ТекстыЯчеек.Добавить(СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(К,"ЧГ=")).Текст));
	КонецЦикла;
	
	Сч = 0;
	ТекущаяСтрока = Новый Структура;
	Для каждого Колонка Из ТаблицаРеквизитов Цикл	
			
		Если Колонка.Выбрать И Не Колонка.Скрывать Тогда
			
			Сч = Сч + 1;
			Если Колонка.РежимЗагрузки = "Устанавливать" Тогда
				
				Результат = Колонка.ЗначениеПоУмолчанию;
				ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита, Результат);
				
			ИначеЕсли Колонка.НомерКолонки <> 0 Тогда
                
                ПровОбл = ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C" + Формат(Сч, "ЧГ="));
				Если Не ПроверитьДанныеОбласти(ПровОбл, Колонка, ТекущаяСтрока, ТаблицаОтборов, ТекстыЯчеек, ВыводитьСообщения) Тогда
					КоличествоОшибок = КоличествоОшибок + 1; 
                    Отказ = Истина;
				КонецЕсли;
				ТекущаяСтрока.Свойство(Колонка.ИмяРеквизита, Результат);
				Если Не ЗначениеЗаполнено(Результат) И ЗначениеЗаполнено(Колонка.ЗначениеПоУмолчанию) Тогда
					Результат = Колонка.ЗначениеПоУмолчанию;			
				КонецЕсли;
				
			ИначеЕсли Колонка.РежимЗагрузки = "Вычислять" Тогда
				
				Вычисление  = ВычислитьЗначениеЯчейки(Колонка.Выражение, ТекущаяСтрока, "", ТекстыЯчеек, Колонка.ЗначениеПоУмолчанию);
				Результат   = Вычисление.Результат;
				Примечание  = Вычисление.ОписаниеОшибки;
				
				Если Не ЗначениеЗаполнено(Результат) Тогда
					Результат = Колонка.ЗначениеПоУмолчанию;
				КонецЕсли;
	
				ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита, Результат);
				
				Если Не ПустаяСтрока(Примечание) Тогда
					ТекстСообщения = НСтр("ru = 'Строка [%1](%2): %3.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, НомерСтроки, Колонка.ПредставлениеРеквизита, Примечание);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					КоличествоОшибок = КоличествоОшибок + 1;
                    Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Колонка.РежимЗагрузки = "Устанавливать" И ЗначениеЗаполнено(Колонка.ЗначениеПоУмолчанию) Тогда
			
			ТекущаяСтрока.Вставить(Колонка.ИмяРеквизита, Результат);	
			
		КонецЕсли;
		
    КонецЦикла;
	
	ДанныеСтроки.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДанныеСтроки.Вставить("ТекстыЯчеек"  , ТекстыЯчеек);
	Возврат ДанныеСтроки;
	
КонецФункции // ДанныеСтроки()

#КонецОбласти

#Область ЗагрузкаДанных
	
// Функция выполняет загрузку данных из табличного документа в объект базы данных.
//
// Параметры:
//  ТД     					 - ТабличныйДокумент, у которого необходимо сформировать шапку.
//  ТР     					 - ТаблицаЗначений.
//  СтруктураНастроекКолонок - Структура:
//								СтруктураПолей - Структура
//								ТаблицаОтборов - ТаблицаЗначений.
//  ДопПараметры          	 - Структура: 
//                              НачалоТекста          - Строка,
//                              ЭтоДобавление         - Булево,
//                              ЗагрузкаИзДругойФормы - Булево.
//
// Возвращаемое значение:
//  Булево (Истина, если загрузка прошла без ошибок, Ложь - иначе).
//
Функция ЗагруженыДанные(ТД, ТР, СтруктураНастроекКолонок, ДопПараметры) Экспорт
      	    	
    Если РежимЗагрузки = "Справочник" Тогда
        Записано = ЗагруженыДанныеВРежимеСправочник(ТД, ТР, СтруктураНастроекКолонок, ДопПараметры);
    ИначеЕсли РежимЗагрузки = "ТабличнаяЧасть" Тогда 
        Записано = ЗагруженыДанныеВРежимеТабличнаяЧасть(ТД, ТР, СтруктураНастроекКолонок, ДопПараметры);
    ИначеЕсли РежимЗагрузки = "РегистрСведений" Тогда        
        Записано = ЗагруженыДанныеВРежимеРегистрСведений(ТД, ТР, СтруктураНастроекКолонок, ДопПараметры);        
    ИначеЕсли РежимЗагрузки = "РучнаяОперация" Тогда        
        Записано = ЗагруженыДанныеВРежимеЗагрузкаРО(ТД, ТР, СтруктураНастроекКолонок, ДопПараметры);        
    ИначеЕсли РежимЗагрузки = "ПланСчетов" Тогда        
        Записано = ЗагруженыДанныеВРежимеЗагрузкаПС(ТД, ТР, СтруктураНастроекКолонок, ДопПараметры);        
    КонецЕсли;
    
    Возврат Записано;
    
КонецФункции // ЗагруженыДанные)

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПреобразованиеЗначений

// Функция приводит строковое представление числа к его значению.
//
// Параметры:
//  Представление - Представление числа.
//  ОписаниеТипов - Допустимое описание типов численного значения (По умолчанию = Неопределено).
//  Примечание    - Строка (По умолчанию = "").
//
// Возвращаемое значение:
//  Значение типа число.
//
Функция ПривестиКЧислу(Представление, Знач ОписаниеТипов = Неопределено, Примечание = "")
	
	Если ОписаниеТипов = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Число");
	КонецЕсли;
	
	НРегПредставление = НРег(Представление);
	Если НРегПредставление = "да" ИЛИ НРегПредставление = "истина" ИЛИ НРегПредставление = "включено" Тогда
		Возврат 1;
	ИначеЕсли НРегПредставление = "нет" ИЛИ НРегПредставление = "ложь" ИЛИ НРегПредставление = "выключено" Тогда
		Возврат 0;
	КонецЕсли;
	
	РезультатН = СтрЗаменить(Представление, " ", "");
	Попытка
		РезультатН = Число(РезультатН);
	Исключение
		Примечание = НСтр("ru = 'Неверный формат числа'");
		Возврат 0;
	КонецПопытки;
	
	РезультатК = ОписаниеТипов.ПривестиЗначение(РезультатН);
	
	Если РезультатК <> РезультатН Тогда
		Примечание = НСтр("ru = 'Недопустимое числовое значение'");
	КонецЕсли;
	
	Возврат РезультатК;
	
КонецФункции // ПривестиКЧислу()

// Функция приводит строковое представление даты к его значению.
//
// Параметры:
//  Представление - Представление числа.
//  ТипРеквизита  - Допустимое описание типов значения типа дата.
//  Примечание    - Строка (По умолчанию = "").
//
// Возвращаемое значение:
//  Значение типа дата.
//
Функция ПривестиКДате(Представление, ТипРеквизита, Примечание = "")
	
	Результат = ТипРеквизита.ПривестиЗначение(Представление);
    
    Если Результат = '00010101' Тогда
		
		МассивЧастей = ПолучитьЧастиПредставленияДаты(Представление);
		Если ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
			
			Попытка				
				Если МассивЧастей.Количество() = 3 Тогда
					Результат = Дата(1, 1, 1, МассивЧастей[0], МассивЧастей[1], МассивЧастей[2]);
				ИначеЕсли МассивЧастей.Количество() = 6 Тогда
					Результат = Дата(1, 1, 1, МассивЧастей[3], МассивЧастей[4], МассивЧастей[5]);
				КонецЕсли;				
			Исключение
				Примечание = НСтр("ru = 'Неверный формат даты'");
			КонецПопытки;
			
		ИначеЕсли МассивЧастей.Количество() = 3 ИЛИ МассивЧастей.Количество() = 6 Тогда
			
			Если МассивЧастей[0] >= 1000 Тогда
				Временно = МассивЧастей[0];
				МассивЧастей[0] = МассивЧастей[2];
				МассивЧастей[2] = Временно;
			КонецЕсли;
			
			Если МассивЧастей[2] < 100 Тогда
				МассивЧастей[2] = МассивЧастей[2] + ?(МассивЧастей[2] < 30, 2000, 1900);
			КонецЕсли;
			
			Попытка
				Если МассивЧастей.Количество() = 3 ИЛИ ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					Результат = Дата(МассивЧастей[2], МассивЧастей[1], МассивЧастей[0]);
				Иначе
					Результат = Дата(МассивЧастей[2], МассивЧастей[1], МассивЧастей[0], МассивЧастей[3], МассивЧастей[4], МассивЧастей[5]);
				КонецЕсли;
			Исключение
				Примечание = НСтр("ru = 'Неверный формат даты'");
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПривестиКДате()

// Функция возвращает части представления даты.
//
// Параметры:
//  Представление - Представление даты.
//
// Возвращаемое значение:
//  Массив частей даты.
//
Функция ПолучитьЧастиПредставленияДаты(ЗНАЧ Представление)
	
	МассивЧастей = Новый Массив;
	НачалоЦифры = 0;
    
    Для i = 1 По СтрДлина(Представление) Цикл
		
		Символ = Сред(Представление, i ,1);
		ЭтоЦифра = Символ >= "0" И Символ <= "9";
		
		Если ЭтоЦифра Тогда
			
			Если НачалоЦифры = 0 Тогда
				НачалоЦифры = i;
			КонецЕсли;
			
		Иначе
			
			Если НачалоЦифры <> 0 Тогда
				МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры, i - НачалоЦифры)));
			КонецЕсли;
			
			НачалоЦифры = 0;
            
		КонецЕсли;
		
	КонецЦикла;
	
	Если НачалоЦифры <> 0 Тогда
		МассивЧастей.Добавить(Число(Сред(Представление, НачалоЦифры)));
	КонецЕсли;
	
	Возврат МассивЧастей;
    
КонецФункции // ПолучитьЧастиПредставленияДаты()

#КонецОбласти 

#Область События

// Функция обрабатывает событие "После добавления строки",
// определенное пользователем в форме редактирования событий.
//
// Параметры:
//  Объект         - Записываемый объект.
//  ТекущиеДанные  - Структура загруженных значений.
//  ТекстыЯчеек    - Массив текстов ячеек строки.
//
// Возвращаемое значение:
//  Истина, если в событие "После добавления строки" не был установлен Отказ.
//
Функция ОбработатьСобытиеПослеДобавленияСтроки(Объект, ТекущиеДанные, ТекстыЯчеек)
	
	Попытка		
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(СобытиеПослеДобавленияСтроки);	
	Исключение		
        СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ОбработатьСобытиеПослеДобавленияСтроки()

#КонецОбласти 

#Область ЗаполнениеТаблицыРеквизитов

// Функция возвращает список, элементами которого выступают возможные имена представления загружаемого реквизита.
//
// Параметры:
//  ТекРеквизит - Строка таблицы значений загружаемого реквизита.
//
// Возвращаемое значение:
//  Список значений; значение списка - строка имя представления.
//
Функция ПолучитьПредставленияРеквизита(ТекРеквизит)
	
	СписокВыбора = Новый СписокЗначений;
    
    ТипыРеквизита = ТекРеквизит.ОписаниеТипов.Типы();
    
    Если ТипыРеквизита.Количество() = 0 Тогда
        Возврат СписокВыбора;
    КонецЕсли;
    
    УстановимПоиск = Истина;
    Тип = ТекРеквизит.ОписаниеТипов.Типы()[0];		
    МетаданныеТипа      = Метаданные.НайтиПоТипу(Тип);
    ЭтоСправочник       = Справочники.ТипВсеСсылки().СодержитТип(Тип);
    ЭтоСчет             = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип);
    ЭтоВидХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип);
    ЭтоДокумент         = Документы.ТипВсеСсылки().СодержитТип(Тип);
        
    Если ТипыРеквизита.Количество() > 1 Тогда
        // Если все типы одинаковые, то заполняем поле "ИскатьПо".
        Для i = 1 По ТипыРеквизита.Количество() - 1 Цикл
            ТипСледующий = ТекРеквизит.ОписаниеТипов.Типы()[i];
            Если ЭтоСправочник И Не Справочники.ТипВсеСсылки().СодержитТип(ТипСледующий) 
                ИЛИ ЭтоСчет И Не ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСледующий)
                ИЛИ ЭтоВидХарактеристик И Не ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСледующий)
                ИЛИ ЭтоДокумент И Не Документы.ТипВсеСсылки().СодержитТип(ТипСледующий) Тогда
                УстановимПоиск = Ложь;
            КонецЕсли;        
        КонецЦикла;    
    КонецЕсли;
    
	Если УстановимПоиск Тогда
		
		Если ЭтоСправочник ИЛИ ЭтоСчет ИЛИ ЭтоВидХарактеристик Тогда
			
			ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
			ЕстьИмя = МетаданныеТипа.ДлинаНаименования > 0;
			
			ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,
			?(ЭтоСчет,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики));
			
			Если МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода Тогда
				
				Если ЕстьКод Тогда
					СписокВыбора.Добавить("Код", "Код");
				КонецЕсли;
				
				Если ЕстьИмя Тогда
					СписокВыбора.Добавить("Наименование", "Наименование");
				КонецЕсли;
				
			Иначе
				
				Если ЕстьИмя Тогда
					СписокВыбора.Добавить("Наименование", "Наименование");
				КонецЕсли;
				
				Если ЕстьКод Тогда
					СписокВыбора.Добавить("Код", "Код");
				КонецЕсли;
				
			КонецЕсли;
			
			Для каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
				
				Если Реквизит.Индексирование <> Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать
					И Реквизит.Тип.Типы().Количество() = 1 И Реквизит.Тип.Типы()[0] = Тип ("Строка")
				Тогда
					
					СписокВыбора.Добавить(Реквизит.Имя, ПолучитьПредставлениеРеквизита(Реквизит));
					
				КонецЕсли;
				
			КонецЦикла;
						
		ИначеЕсли ЭтоДокумент Тогда
        
            СписокВыбора.Добавить("НомерДата", НСтр("ru = 'Номер и дата'"));
            СписокВыбора.Добавить("Номер"    , НСтр("ru = 'Номер'"));
            СписокВыбора.Добавить("Дата"     , НСтр("ru = 'Дата'"));        
        		
		КонецЕсли;
		    
    КонецЕсли;
    
	Возврат СписокВыбора;
    
КонецФункции // ПолучитьПредставленияРеквизита()

// Функция возвращает список, элементами которого выступают возможные связи по типу для загружаемого реквизита.
//
// Параметры:
//  ТекРеквизит       - Строка таблицы значений загружаемого реквизита.
//  ТаблицаРеквизитов - ДанныеФормыКоллекция.
//
// Возвращаемое значение:
//  Список значений; значение списка - строка имя колонки связи или ссылка на элемент связи.
//
Функция ПолучитьСвязиПоТипу(ТекРеквизит, ТаблицаРеквизитов)
	
	СписокВыбора = Новый СписокЗначений;
	
	ВозможныеПланыСчетов = Новый Структура;
	Для каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		
		Если ПланСчетов.ВидыСубконто <> Неопределено
		   И ПланСчетов.ВидыСубконто.Тип = ТекРеквизит.ОписаниеТипов Тогда			
			ВозможныеПланыСчетов.Вставить(ПланСчетов.Имя, ПланыСчетов[ПланСчетов.Имя]);			
		КонецЕсли;
		 
	КонецЦикла;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		ТипЗНЧПланСчетов = ТипЗНЧ(ПланСчетов.Значение.ПустаяСсылка());
		Для каждого КолонкаСвязиПоТипу Из ТаблицаРеквизитов Цикл
			Если КолонкаСвязиПоТипу.ОписаниеТипов.Типы()[0] = ТипЗНЧПланСчетов Тогда
				Если Найти(ТекРеквизит.ИмяРеквизита, "СубконтоДт") <> 0 И Найти(КолонкаСвязиПоТипу.ИмяРеквизита, "СчетДт") <> 0 Тогда
					СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита, КолонкаСвязиПоТипу.ИмяРеквизита);
				ИначеЕсли Найти(ТекРеквизит.ИмяРеквизита, "СубконтоКт") <> 0 И Найти(КолонкаСвязиПоТипу.ИмяРеквизита, "СчетКт") <> 0 Тогда
					СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита, КолонкаСвязиПоТипу.ИмяРеквизита);
				ИначеЕсли Найти(ТекРеквизит.ИмяРеквизита, "Субконто") = 1 И КолонкаСвязиПоТипу.ИмяРеквизита = "СчетУчета" Тогда
					СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита, КолонкаСвязиПоТипу.ИмяРеквизита);
				ИначеЕсли Найти(ТекРеквизит.ИмяРеквизита, "КорСубконто") = 1 И КолонкаСвязиПоТипу.ИмяРеквизита = "КорСчет" Тогда
					СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита, КолонкаСвязиПоТипу.ИмяРеквизита);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СписокВыбора.Количество() = 0 Тогда
			Для каждого КолонкаСвязиПоТипу Из ТаблицаРеквизитов Цикл
				Если КолонкаСвязиПоТипу.ОписаниеТипов.Типы()[0] = ТипЗНЧПланСчетов Тогда
					СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита, КолонкаСвязиПоТипу.ИмяРеквизита);
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли; 
	КонецЦикла;
	
	Если Не ВозможныеПланыСчетов.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, НСтр("ru = '< пустое значение >'"));
	КонецЕсли;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		СписокВыбора.Добавить("ПланСчетовСсылка."+ПланСчетов.Ключ,"<"+ПланСчетов.Ключ+">");
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСвязиПоТипу()

// Функция возвращает массив возможных значений для текущей колонки по представлению.
//
// Параметры:
//  Колонка 	   - СтрокаТаблицыЗначений.
//  Представление  - Строка, по которой необходимо вернуть массив значений.
//  Примечание     - Массив текстов ячеек строки.
//  ТекущиеДанные  - Структура загруженных значений.
//  ТаблицаОтборов - ТаблицаЗначений.
//
// Возвращаемое значение:
//  Массив возможных значений.
//
Функция ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные, ТаблицаОтборов)
	
	Примечание = "";
	
	НайденныеЗначения = Новый Массив;
	
	Если ПустаяСтрока(Представление) Тогда
		
		Возврат НайденныеЗначения;
		
	Иначе
        
        СвязьПоТипу = Неопределено;
		Если Не ПустаяСтрока(Колонка.СвязьПоТипу)  Тогда
			
			Если ТипЗНЧ(Колонка.СвязьПоТипу) = Тип("Строка") Тогда
				ТекущиеДанные.Свойство(Колонка.СвязьПоТипу, СвязьПоТипу);
			Иначе
				СвязьПоТипу = Колонка.СвязьПоТипу;
            КонецЕсли;
            
			Если СвязьПоТипу <> Неопределено Тогда				
				ЭлементСвязиПоТипу = Колонка.ЭлементСвязиПоТипу;
				Если ЭлементСвязиПоТипу = 0 Тогда
					ЭлементСвязиПоТипу = 1;
				КонецЕсли;
				ВидыСубконто = СвязьПоТипу.ВидыСубконто;
				Если ЭлементСвязиПоТипу > ВидыСубконто.Количество() Тогда
					Возврат НайденныеЗначения;
				КонецЕсли;
				Тип = СвязьПоТипу.ВидыСубконто[ЭлементСвязиПоТипу-1].ВидСубконто.ТипЗначения;
			Иначе
				Тип = Колонка.ОписаниеТипов;
			КонецЕсли;
			 
		Иначе
			Тип = Колонка.ОписаниеТипов;
        КонецЕсли;
        
	КонецЕсли;
    
    ПримитивныеТипы = Новый Структура ("Число, Строка, Дата, Булево",
	                                    Тип("Число"), Тип("Строка"), Тип("Дата"), Тип("Булево"));
                                        
    ОдинТип = Тип.Типы().Количество() = 1;                                    
	Для каждого ТипРеквизита Из Тип.Типы() Цикл
		
		Если ТипРеквизита = ПримитивныеТипы.Число ИЛИ ТипРеквизита = ПримитивныеТипы.Булево Тогда
            
            Если ОдинТип Тогда
                НайденныеЗначения.Добавить(ПривестиКЧислу(Представление, Колонка.ОписаниеТипов, Примечание));
            КонецЕсли;            
            
        ИначеЕсли ТипРеквизита = ПримитивныеТипы.Строка ИЛИ ТипРеквизита = ПримитивныеТипы.Дата Тогда
            
            Если ОдинТип Тогда
                НайденныеЗначения.Добавить(ПривестиКДате(Представление, Колонка.ОписаниеТипов, Примечание));
            КонецЕсли; 
            
		Иначе
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
			
			Если Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
				
				// Это перечисление
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.НайтиПоТипу(ТипРеквизита).ПолноеИмя());
				Для каждого Перечисление Из МенеджерОбъекта Цикл
					Если Строка(Перечисление) = Представление Тогда
						НайденныеЗначения.Добавить(Перечисление);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
				
				// Это документ
				
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.НайтиПоТипу(ТипРеквизита).ПолноеИмя());
										
				ДлиннаПредставленияОбъекта = СтрДлина(МетаданныеТипа.ПредставлениеОбъекта);						
				Если Лев(Представление, ДлиннаПредставленияОбъекта) = МетаданныеТипа.ПредставлениеОбъекта Тогда
					НомерИДата = СокрЛП(Сред(Представление, ДлиннаПредставленияОбъекта+1));
					ПозицияОт = Найти(НомерИДата, " от ");
					Если Не ПозицияОт = 0 Тогда
						НомерДок = Лев(НомерИДата, ПозицияОт-1);
						Попытка
							ДатаДок = Дата(Сред(НомерИДата, ПозицияОт+4));
						Исключение
							ДатаДок = Неопределено;
						КонецПопытки;
						Если ДатаДок <> Неопределено Тогда
							НайденноеЗначение = МенеджерОбъекта.НайтиПоНомеру(НомерДок, ДатаДок);
							Если Не НайденноеЗначение.Пустая() Тогда
								НайденныеЗначения.Добавить(НайденноеЗначение);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
										
			ИначеЕсли МетаданныеТипа <> Неопределено Тогда
				
				ИскатьПо = Колонка.ИскатьПо;
				ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита);
				Если ПустаяСтрока(ИскатьПо) Тогда
					СтрокаОсновногоПредставления = Строка(МетаданныеТипа.ОсновноеПредставление);
					
					Если СтрокаОсновногоПредставления = "ВВидеКода" Тогда
						ИскатьПо = "Код";
					ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНаименования" Тогда
						ИскатьПо = "Наименование";
					ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНомера" Тогда
						ИскатьПо = "Номер";
					КонецЕсли;
				КонецЕсли;				
					
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ТекТаб.Ссылка
				|ИЗ
				|	" + МетаданныеТипа.ПолноеИмя() + " КАК ТекТаб
				|ГДЕ";				
				Запрос.Текст = Запрос.Текст + "
				|	ТекТаб." + ИскатьПо + " = &Представление";                
				Запрос.УстановитьПараметр("Представление", Представление);
				
				бит_ОбменДаннымиЭксельСервер.ИзменитьЗапросПоОтборам(Колонка.ИмяРеквизита, Запрос, ТаблицаОтборов);
												
				Выборка =  Запрос.Выполнить().Выбрать();
					
				Пока Выборка.Следующий() Цикл
					НайденныеЗначения.Добавить(Выборка.Ссылка);
                КонецЦикла;
                
			ИначеЕсли ТипРеквизита = Тип("ВидСчета") Тогда
				
				Если Представление = "Активный" Тогда				
					НайденныеЗначения.Добавить(ВидСчета.Активный);				
				ИначеЕсли Представление = "Пассивный" Тогда
					НайденныеЗначения.Добавить(ВидСчета.Пассивный);
				Иначе	
					НайденныеЗначения.Добавить(ВидСчета.АктивноПассивный);
				КонецЕсли;
				
			Иначе
                
				Примечание = НСтр("ru = 'Для колонки не определен тип значения'");
                
            КонецЕсли;
            
		КонецЕсли;
		
    КонецЦикла;
    
	Возврат НайденныеЗначения;
    
КонецФункции // ПолучитьВозможныеЗначения()

// Заполняет обязательность реквизита.
//
// Параметры:
//  ТекРеквизит - ДанныеФормыЭлементКоллекции.
//  РекИсточник - ОписаниеСтандартногоРеквизита, ОбъектМетаданных.
//
Процедура ЗаполнитьОбязательность(ТекРеквизит, РекИсточник)

    ТекРеквизит.ПроверкаЗаполнения = РекИсточник.ПроверкаЗаполнения;
    ТекРеквизит.Обязательный       = ТекРеквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку;	  
   
КонецПроцедуры // ЗаполнитьОбязательность()

// Процедура заполняет настройки связи статей оборотов и дополнительных аналитик в таблице реквизитов.
//
// Параметры:
//  МассивРеквизитовАналитик1 - Массив - массив реквизитов Аналитика_1.
//  ТаблицаРеквизитов         - ДанныеФормыКоллекция.
//  МетаданныеИсточника		  - Метаданные объекта.
//
// Возвращаемое значение:
//  Список значений; значение списка - строка имя колонки связи или ссылка на элемент связи.
//
Процедура ЗаполнитьСвязиДопАналитик(МассивРеквизитовАналитик1, ТаблицаРеквизитов, МетаданныеИсточника)

    // Данные по дополнительным аналитикам.
	НастройкиДопИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
    
    Для каждого ТекРекАн1 Из МассивРеквизитовАналитик1 Цикл
        
        ШаблонИмени  = "%Имя%";
        Если Найти(ТекРекАн1.ИмяРеквизита, "_Старый") <> 0 Тогда
            ШаблонИмени = ШаблонИмени + "_Старый";            
        КонецЕсли;
        Если Найти(ТекРекАн1.ИмяРеквизита, "бит_") <> 0 Тогда
            ШаблонИмени = "бит_" + ШаблонИмени; 
        КонецЕсли;
            
        // Статья оборотов.
        Если МетаданныеИсточника.Имя = "ГрафикНачислений" Тогда
            ИмяРеквизитаСтатьи = "СтатьяОборотовНачисления";             
        Иначе            
            ИмяРеквизитаСтатьи = СтрЗаменить(ШаблонИмени, "%Имя%", "СтатьяОборотов");
        КонецЕсли;
        
        МассивНайденныхСтатей = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизитаСтатьи));
        ЕстьСтатья = МассивНайденныхСтатей.Количество() > 0;
        Если ЕстьСтатья Тогда             
            НайденныйРеквизитСтатья = МассивНайденныхСтатей[0];
            ПредставлениеСтатьиОборотов = НайденныйРеквизитСтатья.ПредставлениеРеквизита;
        КонецЕсли;
        
        // Дополнительные аналитики.
        СписокАналитик = Новый СписокЗначений;
        Для Сч = 1 По 12 Цикл
            
            ИмяАналитикиДляПоиска = "Аналитика_" + Сч;
            ИмяАналитики = СтрЗаменить(ШаблонИмени, "%Имя%", ИмяАналитикиДляПоиска); 
            МассивНайденныхАналитик = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяАналитики));
            Если МассивНайденныхАналитик.Количество() > 0 Тогда
                НайденныйРеквизит = МассивНайденныхАналитик[0];
                СписокАналитик.Добавить(ИмяАналитики, ИмяАналитикиДляПоиска);
                // Заполнение свойств для реквизита Аналитика_№.
                НастройкаАналитики = НастройкиДопИзмерений.Получить(ИмяАналитикиДляПоиска);
                Если НастройкаАналитики = Неопределено Тогда
                    НайденныйРеквизит.Скрывать     = Истина;
					НайденныйРеквизит.Выбрать      = Ложь;
                    НайденныйРеквизит.НомерКолонки = 0;
				Иначе            
					СинонимАналитики = бит_ОбменДаннымиЭксельСервер.ДопустимоеНаименованиеКолонкиExcel(НастройкаАналитики.Синоним);
                    НайденныйРеквизит.ПредставлениеРеквизита = НайденныйРеквизит.ПредставлениеРеквизита + " (" + СинонимАналитики + ")";
                    НайденныйРеквизит.ДоступноеОписаниеТипов = НастройкаАналитики.ТипЗначения;
                    Если ЕстьСтатья Тогда
                        // Связь аналитики со статьей оборотов.
                        НайденныйРеквизит.СвязьАналитики_ИмяСтатьиОборотов           = ИмяРеквизитаСтатьи;
                        НайденныйРеквизит.СвязьАналитики_ПредставлениеСтатьиОборотов = ПредставлениеСтатьиОборотов;
                        НайденныйРеквизит.СвязьАналитики_ИмяАналитики                = ИмяАналитикиДляПоиска;
                    КонецЕсли;
                КонецЕсли;
            КонецЕсли; 
        
        КонецЦикла;
        
        Если ЕстьСтатья Тогда
            // Заполнение данных связи для реквизита СтатьяОборотов.
            НайденныйРеквизитСтатья.СвязьАналитики_ИмяАналитики = СписокАналитик;            
        КонецЕсли;
        
    КонецЦикла;

КонецПроцедуры // ЗаполнитьСвязиДопАналитик()

Функция ЭлементСвязиПоТипу(ИмяРеквизита)

	Если Найти(ИмяРеквизита, "4") <> 0 Тогда				
		ЭлементСвязиПоТипу = 4;
	ИначеЕсли Найти(ИмяРеквизита,"3") <> 0 Тогда				
		ЭлементСвязиПоТипу = 3;				
	ИначеЕсли Найти(ИмяРеквизита,"2") <> 0 Тогда				
		ЭлементСвязиПоТипу = 2;				
	Иначе				
		ЭлементСвязиПоТипу = 1;				
	КонецЕсли;
	
	Возврат ЭлементСвязиПоТипу;

КонецФункции // ЭлементСвязиПоТипу()

// Заполняет настройки колонок по умолчанию для табличной части.
//
// Параметры:
//  ТаблицаРеквизитов   - ТаблицаЗначений.
//  МетаданныеИсточника - Метаданные объекта.
//
Процедура ЗаполнитьНастройкиКолонокТабличнойЧасти(ТаблицаРеквизитов, МетаданныеИсточника)
    
    РеквизитыТч = МетаданныеИсточника.Реквизиты;
    
    // Тип реквизита дополнительной аналитики.
    ТипДопАналитик = Метаданные.ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.Тип;
    
    МассивРеквизитовАналитик1 = Новый Массив;
    
    МассивНенужных       = Новый Массив;
	МассивНеобязательных = Новый Массив;
    МассивПоУмолчанию    = Новый Массив;
    Если ОбъектМетаданных = "Документ.бит_ФормаВводаБюджета" Тогда
        // Ненужные реквизиты не выводятся в таблицу настроек.
        МассивНенужных.Добавить("ИД");
        МассивНенужных.Добавить("Измерение");
	    МассивНенужных.Добавить("Удалить_Сценарий");
	    МассивНенужных.Добавить("Служебный");
        // Значения по умолчанию из шапки.
        МассивПоУмолчанию.Добавить("ЦФО");
        МассивПоУмолчанию.Добавить("СтатьяОборотов");
        МассивПоУмолчанию.Добавить("Контрагент");
        МассивПоУмолчанию.Добавить("ДоговорКонтрагента");
        МассивПоУмолчанию.Добавить("Проект");
        МассивПоУмолчанию.Добавить("НоменклатурнаяГруппа");
        МассивПоУмолчанию.Добавить("БанковскийСчет");
        МассивПоУмолчанию.Добавить("Аналитика_1");
        МассивПоУмолчанию.Добавить("Аналитика_2");
        МассивПоУмолчанию.Добавить("Аналитика_3");
        МассивПоУмолчанию.Добавить("Аналитика_4");
        МассивПоУмолчанию.Добавить("Аналитика_5");
        МассивПоУмолчанию.Добавить("Аналитика_6");
        МассивПоУмолчанию.Добавить("Аналитика_7");
        МассивПоУмолчанию.Добавить("Аналитика_8");
        МассивПоУмолчанию.Добавить("Аналитика_9");
        МассивПоУмолчанию.Добавить("Аналитика_10");
        МассивПоУмолчанию.Добавить("Аналитика_11");
        МассивПоУмолчанию.Добавить("Аналитика_12");
	ИначеЕсли ОбъектМетаданных = "Документ.бит_ДополнительныеУсловияПоДоговору" И ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		// Направление по умолчанию.
		МассивПоУмолчанию.Добавить("РасходДоход");
	ИначеЕсли ОбъектМетаданных = "Документ.бит_му_ПринятиеКУчетуОС" И ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаОбъекта, "ВидОперации");
		Если ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводНачальныхОстатковОС
			ИЛИ ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ПринятиеКУчетуОС Тогда	
			// Реквизиты шапки.
			МассивНенужных.Добавить("СуммаВВалюте");		
			МассивНенужных.Добавить("ЭСП");
		КонецЕсли;
		Если ВидОперации <> Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводОстатковОСВФинансовойАренде Тогда
			МассивНенужных.Добавить("СуммаЗадолженности");
			МассивНенужных.Добавить("СуммаЗадолженностиВВалюте");
		КонецЕсли;
		Если ВидОперации <> Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ПринятиеКУчетуОСВФинансовойАренде Тогда
			МассивНенужных.Добавить("СуммаАвансаВВалюте");
			МассивНенужных.Добавить("СуммаАванса");
		КонецЕсли;
		МассивНеобязательных.Добавить("СчетНРП");
	КонецЕсли;
	
	Для каждого Реквизит Из РеквизитыТч Цикл
        
        ИмяРеквизита = Реквизит.Имя;
        
        Если МассивНенужных.Найти(ИмяРеквизита) <> Неопределено Тогда
            // Пропуск ненужных полей.
            Продолжить;
        КонецЕсли;
        
        ТекРеквизит                        = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать                = Истина;
		ТекРеквизит.ИмяРеквизита           = ИмяРеквизита;
        
        // Обычный реквизит.
        ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит);
		ТекРеквизит.ДоступноеОписаниеТипов = РеквизитыТч[ТекРеквизит.ИмяРеквизита].Тип;
		
		Если МассивНеобязательных.Найти(ИмяРеквизита) = Неопределено Тогда
	        ЗаполнитьОбязательность(ТекРеквизит, Реквизит);
		КонецЕсли;
	
        // Поиск реквизитов, относящихся к дополнительным аналитикам.
        Если Найти(ТекРеквизит.ИмяРеквизита, "Аналитика_1") <> 0 И Реквизит.Тип = ТипДопАналитик 
            И Найти(ТекРеквизит.ИмяРеквизита, "Аналитика_10") = 0 
            И Найти(ТекРеквизит.ИмяРеквизита, "Аналитика_11") = 0
            И Найти(ТекРеквизит.ИмяРеквизита, "Аналитика_12") = 0 Тогда            
            МассивРеквизитовАналитик1.Добавить(ТекРеквизит);                        
        КонецЕсли;		
               
    КонецЦикла;
           
    // Настройки для связей СтатьяОборотов <-> Аналитика_№.
    ЗаполнитьСвязиДопАналитик(МассивРеквизитовАналитик1, ТаблицаРеквизитов, МетаданныеИсточника);
	
	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл        
        ТекРеквизит.ОписаниеТипов = ТекРеквизит.ДоступноеОписаниеТипов;        
    КонецЦикла;
	
	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
        // ИскатьПо.
        ИмяРеквизита = ТекРеквизит.ИмяРеквизита;
		СписокВыбора = ПолучитьПредставленияРеквизита(ТекРеквизит);
		ТекРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "", СписокВыбора[0].Значение);
		// СвязьПоВладельцу.
		СписокВыбора = ПолучитьСвязиПоВладельцу(ТекРеквизит, ТаблицаРеквизитов, МетаданныеИсточника);
		ТекРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "", СписокВыбора[0].Значение);
		// СписокСвязейПоТипу.
		СписокВыбора = ПолучитьСвязиПоТипу(ТекРеквизит, ТаблицаРеквизитов);
		Если СписокВыбора.Количество() = 0 Тогда
			ТекРеквизит.СвязьПоТипу 	   = "";
			ТекРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ТекРеквизит.СвязьПоТипу 	   = СписокВыбора[0].Значение;
			ТекРеквизит.ЭлементСвязиПоТипу = ЭлементСвязиПоТипу(ИмяРеквизита);						
		КонецЕсли;        
        Если МассивПоУмолчанию.Найти(ИмяРеквизита) <> Неопределено И ЗначениеЗаполнено(СсылкаОбъекта[ИмяРеквизита]) Тогда
			ТекРеквизит.ЗначениеПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаОбъекта, ИмяРеквизита);			
			Если ОбъектМетаданных = "Документ.бит_ДополнительныеУсловияПоДоговору" И ИмяРеквизита = "РасходДоход" Тогда			
				ТекРеквизит.Обязательный = Истина;
			КонецЕсли;
        Иначе
            ТекРеквизит.ЗначениеПоУмолчанию = ТекРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
            ТекРеквизит.РежимЗагрузки = "Искать";        
        КонецЕсли;        
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНастройкиКолонокТабличнойЧасти()

// Заполняет настройки колонок по умолчанию для справочника.
//
// Параметры:
//  ТаблицаРеквизитов   - ТаблицаЗначений.
//  МетаданныеИсточника - Метаданные объекта.
//
Процедура ЗаполнитьНастройкиКолонокСправочника(ТаблицаРеквизитов, МетаданныеИсточника)
    
    ВидыИспользования = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита;
	
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
    
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		// Код.
		ТекРеквизит = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать             	 = Истина;
		ТекРеквизит.ИмяРеквизита             = "Код";
		ТекРеквизит.ПредставлениеРеквизита   = НСтр("ru = 'Код'");
		ТекРеквизит.МожетБытьПолемПоиска     = Истина;
        ТекРеквизит.ИспользованиеДляЭлемента = Истина;
        ТекРеквизит.ИспользованиеДляГруппы   = Истина;        
		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ТекРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		Иначе
			ТекРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		КонецЕсли;
		ЗаполнитьОбязательность(ТекРеквизит, МетаданныеИсточника.СтандартныеРеквизиты.Код);
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаНаименования > 0 Тогда		
		ТекРеквизит = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать             	 = Истина;
		ТекРеквизит.ИмяРеквизита             = "Наименование";
		ТекРеквизит.ПредставлениеРеквизита   = НСтр("ru = 'Наименование'");
		ТекРеквизит.МожетБытьПолемПоиска     =  Истина;
		ТекРеквизит.ДоступноеОписаниеТипов   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаНаименования));
		ТекРеквизит.ИспользованиеДляЭлемента = Истина;
        ТекРеквизит.ИспользованиеДляГруппы   = Истина;
        ЗаполнитьОбязательность(ТекРеквизит, МетаданныеИсточника.СтандартныеРеквизиты.Наименование);        
	КонецЕсли;
	
	Если МетаданныеИсточника.Владельцы.Количество() > 0 Тогда		
		ТекРеквизит = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать             	 = Истина;
		ТекРеквизит.ИмяРеквизита             = "Владелец";
		ТекРеквизит.ПредставлениеРеквизита   = НСтр("ru = 'Владелец'");
		ТекРеквизит.МожетБытьПолемПоиска     =  Истина;
        ТекРеквизит.ИспользованиеДляЭлемента = Истина;
        ТекРеквизит.ИспользованиеДляГруппы   = Истина;
        СтрокаОписанияТипов = "";			
		Для каждого Владелец Из МетаданныеИсточника.Владельцы Цикл
			СтрокаОписанияТипов = ?(ПустаяСтрока(СтрокаОписанияТипов),"", СтрокаОписанияТипов + ", ") + Владелец.ПолноеИмя();
		КонецЦикла;			
		СтрокаОписанияТипов = СтрЗаменить(СтрокаОписанияТипов, ".", "Ссылка.");
		ТекРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов(СтрокаОписанияТипов);			
	КонецЕсли;
    
	Если МетаданныеИсточника.Иерархический Тогда	        
        ТекРеквизит = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать             	 = Истина;
		ТекРеквизит.ИмяРеквизита             = "Родитель";
		ТекРеквизит.ПредставлениеРеквизита   = НСтр("ru = 'Родитель'");
		ТекРеквизит.МожетБытьПолемПоиска     = Истина;
		ТекРеквизит.ДоступноеОписаниеТипов   = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
        ТекРеквизит.ИспользованиеДляЭлемента = Истина;
        ТекРеквизит.ИспользованиеДляГруппы   = Истина;
        ЗаполнитьОбязательность(ТекРеквизит, МетаданныеИсточника.СтандартныеРеквизиты.Родитель);
        // ИерархияГруппИЭлементов.
        Если МетаданныеИсточника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда		
    		ТекРеквизит = ТаблицаРеквизитов.Вставить(0);
			ТекРеквизит.Выбрать             	 = Истина;
    		ТекРеквизит.ИмяРеквизита           = "ЭтоГруппа";
    		ТекРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Это группа'");
    		ТекРеквизит.МожетБытьПолемПоиска   = Истина;
    		ТекРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Булево");
            ЗаполнитьОбязательность(ТекРеквизит, МетаданныеИсточника.СтандартныеРеквизиты.ЭтоГруппа);            
            ЕстьГруппы = Истина;    				
        КонецЕсли;    
    КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл        
        Если Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ТекРеквизит                          = ТаблицаРеквизитов.Добавить();
			ТекРеквизит.Выбрать             	 = Истина;
			ТекРеквизит.ИмяРеквизита             = Реквизит.Имя;
			ТекРеквизит.ПредставлениеРеквизита   = ПолучитьПредставлениеРеквизита(Реквизит);
			ТекРеквизит.МожетБытьПолемПоиска     = Реквизит.Индексирование <> Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ТекРеквизит.ДоступноеОписаниеТипов   = МетаданныеИсточника.Реквизиты[ТекРеквизит.ИмяРеквизита].Тип;
            ТекРеквизит.ИспользованиеДляЭлемента = Реквизит.Использование <> ВидыИспользования.ДляГруппы;
            ТекРеквизит.ИспользованиеДляГруппы   = Реквизит.Использование <> ВидыИспользования.ДляЭлемента;
            ЗаполнитьОбязательность(ТекРеквизит, Реквизит);
        	бит_ОбменДаннымиЭксельСервер.ПроверитьДанныеПоляСАналитикой(ТекРеквизит.ИмяРеквизита, ТекРеквизит.ПредставлениеРеквизита, ТекРеквизит.ДоступноеОписаниеТипов, НастройкиИзмерений, ТекРеквизит.Выбрать);
        КонецЕсли;        
	КонецЦикла;
	
	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл        
        ТекРеквизит.ОписаниеТипов = ТекРеквизит.ДоступноеОписаниеТипов;        
    КонецЦикла;
	
	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
		// ИскатьПо.
		СписокВыбора = ПолучитьПредставленияРеквизита(ТекРеквизит);
		ТекРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "", СписокВыбора[0].Значение);
		// СвязьПоВладельцу.
		СписокВыбора = ПолучитьСвязиПоВладельцу(ТекРеквизит, ТаблицаРеквизитов, МетаданныеИсточника);
		ТекРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "", СписокВыбора[0].Значение);
		// СписокСвязейПоТипу.
		СписокВыбора = ПолучитьСвязиПоТипу(ТекРеквизит, ТаблицаРеквизитов);
		Если СписокВыбора.Количество() = 0 Тогда
			ТекРеквизит.СвязьПоТипу 	   = "";
			ТекРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ТекРеквизит.СвязьПоТипу 	   = СписокВыбора[0].Значение;
			ТекРеквизит.ЭлементСвязиПоТипу = ЭлементСвязиПоТипу(ТекРеквизит.ИмяРеквизита);		
		КонецЕсли;		
		ТекРеквизит.ЗначениеПоУмолчанию = ТекРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);		
		ТекРеквизит.РежимЗагрузки = "Искать";        
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьНастройкиКолонокСправочника()

// Заполняет настройки колонок по умолчанию для регистра сведений.
//
// Параметры:
//  ТаблицаРеквизитов   - ТаблицаЗначений.
//  МетаданныеИсточника - Метаданные объекта.
//
Процедура ЗаполнитьНастройкиКолонокРегистраСведений(ТаблицаРеквизитов, МетаданныеИсточника)
		
	Если МетаданныеИсточника.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда		
        ТекРеквизит = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать                = Истина;
		ТекРеквизит.ИмяРеквизита           = "Период";
		ТекРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Период'");
		ТекРеквизит.МожетБытьПолемПоиска   = Истина;
		ТекРеквизит.ПолеПоиска             = Истина;		
		ТекРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Дата", , , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
        ЗаполнитьОбязательность(ТекРеквизит, МетаданныеИсточника.СтандартныеРеквизиты.Период);        
    КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Измерения Цикл        
        РекИсточник = МетаданныеИсточника.Измерения[Реквизит.Имя];        
        ТекРеквизит                        = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать                = Истина;
		ТекРеквизит.МожетБытьПолемПоиска   = Истина;
		ТекРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит);        
		ТекРеквизит.ДоступноеОписаниеТипов = РекИсточник.Тип;
        ЗаполнитьОбязательность(ТекРеквизит, РекИсточник);        
    КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл        
        РекИсточник = МетаданныеИсточника.Ресурсы[Реквизит.Имя];        
        ТекРеквизит                        = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать                = Истина;
		ТекРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит);
		ТекРеквизит.ДоступноеОписаниеТипов = РекИсточник.Тип;
        ЗаполнитьОбязательность(ТекРеквизит, РекИсточник);        
    КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл        
        РекИсточник = МетаданныеИсточника.Реквизиты[Реквизит.Имя];        
        ТекРеквизит                        = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать                = Истина;
		ТекРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит);
		ТекРеквизит.ДоступноеОписаниеТипов = РекИсточник.Тип;
        ЗаполнитьОбязательность(ТекРеквизит, РекИсточник);       
    КонецЦикла;
	
	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл        
        ТекРеквизит.ОписаниеТипов = ТекРеквизит.ДоступноеОписаниеТипов;        
    КонецЦикла;	
	
	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
		// ИскатьПо.
		СписокВыбора = ПолучитьПредставленияРеквизита(ТекРеквизит);
		ТекРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "", СписокВыбора[0].Значение);
		// СвязьПоВладельцу.
		СписокВыбора = ПолучитьСвязиПоВладельцу(ТекРеквизит, ТаблицаРеквизитов, МетаданныеИсточника);
		ТекРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "", СписокВыбора[0].Значение);
		// СписокСвязейПоТипу.
		СписокВыбора = ПолучитьСвязиПоТипу(ТекРеквизит, ТаблицаРеквизитов);
		Если СписокВыбора.Количество() = 0 Тогда
			ТекРеквизит.СвязьПоТипу 	   = "";
			ТекРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ТекРеквизит.СвязьПоТипу 	   = СписокВыбора[0].Значение;
			ТекРеквизит.ЭлементСвязиПоТипу = ЭлементСвязиПоТипу(ТекРеквизит.ИмяРеквизита);	
		КонецЕсли;		
		ТекРеквизит.ЗначениеПоУмолчанию = ТекРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);		
		ТекРеквизит.РежимЗагрузки = "Искать";        
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьНастройкиКолонокРегистраСведений()

// Функция преобразует представление реквизита к разрешенному виду.
//
// Параметры: 
//  Реквизит - ОбъектМетаданных.
//
Функция ПолучитьПредставлениеРеквизита(Реквизит)

	Возврат бит_ОбменДаннымиЭксельСервер.ДопустимоеНаименованиеКолонкиExcel(Реквизит.Представление());

КонецФункции // ПолучитьПредставлениеРеквизита()

// Заполняет настройки колонок по умолчанию для регистра сведений.
//
// Параметры:
//  ТаблицаРеквизитов   - ТаблицаЗначений.
//  МетаданныеИсточника - Метаданные объекта.
//
Процедура ЗаполнитьНастройкиКолонокРегистраБухгалтерии(ТаблицаРеквизитов, МетаданныеИсточника)
	
	ИмяПланаСчетов = МетаданныеИсточника.ПланСчетов.Имя;
	ИмяВидСубконто = МетаданныеИсточника.ПланСчетов.ВидыСубконто.Имя;
	
	КоличествоСубконто = Метаданные.ПланыСчетов[ИмяПланаСчетов].МаксКоличествоСубконто;
	ОписаниеТипаПланаСчетов = Новый ОписаниеТипов("ПланСчетовСсылка." + ИмяПланаСчетов);
	ОписаниеТипаСубконто    = Метаданные.ПланыВидовХарактеристик[ИмяВидСубконто].Тип;
	
	ТекРеквизит = ТаблицаРеквизитов.Добавить();
	ТекРеквизит.Выбрать				   = Ложь;
   	ТекРеквизит.ИмяРеквизита           = "Период";
	ТекРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Период'");
	ТекРеквизит.МожетБытьПолемПоиска   = Истина;
	ТекРеквизит.ПолеПоиска             = Истина;		
	ТекРеквизит.ДоступноеОписаниеТипов = Новый ОписаниеТипов("Дата", , , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
    ЗаполнитьОбязательность(ТекРеквизит, МетаданныеИсточника.СтандартныеРеквизиты.Период);
	
	// Измерения.
	Для каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
        РекИсточник = МетаданныеИсточника.Измерения[Реквизит.Имя];
		ТекВыбрать = Реквизит.Имя <> "Организация" И Реквизит.Имя <> "Сценарий";
		Если РекИсточник.Балансовый Тогда		
			ТекРеквизит = ТаблицаРеквизитов.Добавить();
			ТекРеквизит.Выбрать 			   = ТекВыбрать;
			ТекРеквизит.МожетБытьПолемПоиска   = Истина;
			ТекРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит);        
			ТекРеквизит.ДоступноеОписаниеТипов = РекИсточник.Тип;
	        ЗаполнитьОбязательность(ТекРеквизит, РекИсточник);		
		Иначе			
			// Дт.
			ТекРеквизит = ТаблицаРеквизитов.Добавить();
			ТекРеквизит.Выбрать 			   = ТекВыбрать;
			ТекРеквизит.МожетБытьПолемПоиска   = Истина;
			ТекРеквизит.ИмяРеквизита           = Реквизит.Имя + "Дт";
			ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит) + " Дт";        
			ТекРеквизит.ДоступноеОписаниеТипов = РекИсточник.Тип;
	        ЗаполнитьОбязательность(ТекРеквизит, РекИсточник);
			// Кт.
			ТекРеквизит = ТаблицаРеквизитов.Добавить();
			ТекРеквизит.Выбрать 			   = ТекВыбрать;
			ТекРеквизит.МожетБытьПолемПоиска   = Истина;
			ТекРеквизит.ИмяРеквизита           = Реквизит.Имя + "Кт";
			ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит) + " Кт";        
			ТекРеквизит.ДоступноеОписаниеТипов = РекИсточник.Тип;
	        ЗаполнитьОбязательность(ТекРеквизит, РекИсточник);			
		КонецЕсли;	        
	КонецЦикла;
	
	ТекРеквизит = ТаблицаРеквизитов.Добавить();
	ТекРеквизит.Выбрать                = Истина;
	ТекРеквизит.МожетБытьПолемПоиска   = Истина;
	ТекРеквизит.ИмяРеквизита           = "СчетДт";
	ТекРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Счет Дт'");
	ТекРеквизит.ДоступноеОписаниеТипов = ОписаниеТипаПланаСчетов;
	ТекРеквизит.Обязательный       	   = Истина;
	
	Для СчСб = 1 По КоличествоСубконто Цикл	
		ТекРеквизит = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать                = Истина;
		ТекРеквизит.МожетБытьПолемПоиска   = Истина;
		ТекРеквизит.ИмяРеквизита           = "СубконтоДт" + СчСб;
		ТекРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Субконто Дт '")  + СчСб;
		ТекРеквизит.ДоступноеОписаниеТипов = ОписаниеТипаСубконто;
	КонецЦикла;

	ТекРеквизит = ТаблицаРеквизитов.Добавить();
	ТекРеквизит.Выбрать                = Истина;
	ТекРеквизит.МожетБытьПолемПоиска   = Истина;
	ТекРеквизит.ИмяРеквизита           = "СчетКт";
	ТекРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Счет Кт'");
	ТекРеквизит.ДоступноеОписаниеТипов = ОписаниеТипаПланаСчетов;
	ТекРеквизит.Обязательный       	   = Истина;
	
	Для СчСб = 1 По КоличествоСубконто Цикл	
		ТекРеквизит = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать                = Истина;
		ТекРеквизит.МожетБытьПолемПоиска   = Истина;
		ТекРеквизит.ИмяРеквизита           = "СубконтоКт" + СчСб;
		ТекРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Субконто Кт '")  + СчСб;
		ТекРеквизит.ДоступноеОписаниеТипов = ОписаниеТипаСубконто;
	КонецЦикла;
	
	// Ресурсы.
    Для каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
        РекИсточник = МетаданныеИсточника.Ресурсы[Реквизит.Имя];       		
		Если РекИсточник.Балансовый Тогда		
			ТекРеквизит = ТаблицаРеквизитов.Добавить();
			ТекРеквизит.Выбрать                = Истина;
			ТекРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит);
			ТекРеквизит.ДоступноеОписаниеТипов = РекИсточник.Тип;
	        ЗаполнитьОбязательность(ТекРеквизит, РекИсточник);		
		Иначе
			// Дт.
			ТекРеквизит = ТаблицаРеквизитов.Добавить();
			ТекРеквизит.Выбрать                = Истина;
			ТекРеквизит.ИмяРеквизита           = Реквизит.Имя + "Дт";
			ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит) + " Дт";
			ТекРеквизит.ДоступноеОписаниеТипов = РекИсточник.Тип;
	        ЗаполнитьОбязательность(ТекРеквизит, РекИсточник);
			// Кт.
			ТекРеквизит = ТаблицаРеквизитов.Добавить();
			ТекРеквизит.Выбрать                = Истина;
			ТекРеквизит.ИмяРеквизита           = Реквизит.Имя + "Кт";
			ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит) + " Кт";
			ТекРеквизит.ДоступноеОписаниеТипов = РекИсточник.Тип;
	        ЗаполнитьОбязательность(ТекРеквизит, РекИсточник);					
		КонецЕсли;		
    КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл        
        РекИсточник = МетаданныеИсточника.Реквизиты[Реквизит.Имя];        
        ТекРеквизит = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать                = Истина;
		ТекРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ТекРеквизит.ПредставлениеРеквизита = ПолучитьПредставлениеРеквизита(Реквизит);
		ТекРеквизит.ДоступноеОписаниеТипов = РекИсточник.Тип;
        ЗаполнитьОбязательность(ТекРеквизит, РекИсточник);        
    КонецЦикла;
	
	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл        
        ТекРеквизит.ОписаниеТипов = ТекРеквизит.ДоступноеОписаниеТипов;        
    КонецЦикла;	
		
	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
		// ИскатьПо.
		СписокВыбора = ПолучитьПредставленияРеквизита(ТекРеквизит);
		ТекРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "", СписокВыбора[0].Значение);
		// СвязьПоВладельцу.
		СписокВыбора = ПолучитьСвязиПоВладельцу(ТекРеквизит, ТаблицаРеквизитов, МетаданныеИсточника);
		ТекРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "", СписокВыбора[0].Значение);
		// СписокСвязейПоТипу.
		СписокВыбора = ПолучитьСвязиПоТипу(ТекРеквизит, ТаблицаРеквизитов);
		Если СписокВыбора.Количество() = 0 Тогда
			ТекРеквизит.СвязьПоТипу 	   = "";
			ТекРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ТекРеквизит.СвязьПоТипу        = СписокВыбора[0].Значение;
			ТекРеквизит.ЭлементСвязиПоТипу = ЭлементСвязиПоТипу(ТекРеквизит.ИмяРеквизита);		
		КонецЕсли;		
		ТекРеквизит.ЗначениеПоУмолчанию = ТекРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);		
		ТекРеквизит.РежимЗагрузки = "Искать";        
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьНастройкиКолонокРегистраБухгалтерии()

// Заполняет настройки колонок по умолчанию для плана счетов.
//
// Параметры:
//  ТаблицаРеквизитов   - ТаблицаЗначений.
//  МетаданныеИсточника - Метаданные объекта.
//
Процедура ЗаполнитьНастройкиКолонокПланаСчетов(ТаблицаРеквизитов, МетаданныеИсточника)
	
	МассивСтандартных = Новый Массив;
	МассивСтандартных.Добавить("Родитель");
	МассивСтандартных.Добавить("Код");
	МассивСтандартных.Добавить("Порядок");
	МассивСтандартных.Добавить("Наименование");
	МассивСтандартных.Добавить("Вид");
	
	Для каждого ИмяРеквизита Из МассивСтандартных Цикл 
		СтандартныйРеквизит = МетаданныеИсточника.СтандартныеРеквизиты[ИмяРеквизита];
        ТекРеквизит = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать             	 = Истина;
		ТекРеквизит.ИмяРеквизита             = ИмяРеквизита;
		ТекРеквизит.ПредставлениеРеквизита   = ИмяРеквизита;
		ТекРеквизит.МожетБытьПолемПоиска     = Истина;		
		Если ИмяРеквизита = "Код" Тогда
			ТекРеквизит.ПолеПоиска = Истина;
		КонецЕсли;
		Если ИмяРеквизита = "Родитель" Тогда
			ТекРеквизит.ДоступноеОписаниеТипов   = МетаданныеИсточника.СтандартныеРеквизиты.Код.Тип;
		Иначе	
			ТекРеквизит.ДоступноеОписаниеТипов   = СтандартныйРеквизит.Тип;
		КонецЕсли;
	    ЗаполнитьОбязательность(ТекРеквизит, СтандартныйРеквизит);
	КонецЦикла;
		
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл   
		ТекРеквизит                          = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать             	 = Реквизит.Имя <> "КодБыстрогоВыбора";
		ТекРеквизит.ИмяРеквизита             = Реквизит.Имя;
		ТекРеквизит.ПредставлениеРеквизита   = ПолучитьПредставлениеРеквизита(Реквизит);
		ТекРеквизит.МожетБытьПолемПоиска     = Реквизит.Индексирование <> Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
		ТекРеквизит.ДоступноеОписаниеТипов   = МетаданныеИсточника.Реквизиты[Реквизит.Имя].Тип;
        ЗаполнитьОбязательность(ТекРеквизит, Реквизит);      
	КонецЦикла;
	
	ИмяРеквизита = "Забалансовый";
	СтандартныйРеквизит = МетаданныеИсточника.СтандартныеРеквизиты[ИмяРеквизита];
    ТекРеквизит = ТаблицаРеквизитов.Добавить();
	ТекРеквизит.Выбрать             	 = Истина;
	ТекРеквизит.ИмяРеквизита             = ИмяРеквизита;
	ТекРеквизит.ПредставлениеРеквизита   = ИмяРеквизита;
	ТекРеквизит.МожетБытьПолемПоиска     = Истина;
	ТекРеквизит.ДоступноеОписаниеТипов   = СтандартныйРеквизит.Тип;
    ЗаполнитьОбязательность(ТекРеквизит, СтандартныйРеквизит);
		
	Для каждого Реквизит Из МетаданныеИсточника.ПризнакиУчета Цикл        
		ТекРеквизит                          = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.Выбрать             	 = Истина;
		ТекРеквизит.ИмяРеквизита             = Реквизит.Имя;
		ТекРеквизит.ПредставлениеРеквизита   = ПолучитьПредставлениеРеквизита(Реквизит);
		ТекРеквизит.ДоступноеОписаниеТипов   = МетаданныеИсточника.ПризнакиУчета[Реквизит.Имя].Тип;     
	КонецЦикла;
	
	// Таблица видов субконто.
	КоличествоСубконто = 4;
	ТипВидаСубконто = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + МетаданныеИсточника.ВидыСубконто.Имя);
	ТипБулево 		= Новый ОписаниеТипов("Булево");
	Для Сч = 1 По КоличествоСубконто  Цикл
		// Субконто.
		ТекРеквизит                          = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.ИмяТаблицы 				 = "ВидыСубконто";
		ТекРеквизит.НомерСтрокиВТаблице 	 = Сч;
		ТекРеквизит.Выбрать             	 = Истина;
		ТекРеквизит.ИмяРеквизита             = "ВидСубконто" + Сч;
		ТекРеквизит.ПредставлениеРеквизита   = НСтр("ru = 'Вид субконто'") + Символы.НПП + Сч;
		ТекРеквизит.ДоступноеОписаниеТипов   = ТипВидаСубконто;
		// Только обороты.
		ТекРеквизит                          = ТаблицаРеквизитов.Добавить();
		ТекРеквизит.ИмяТаблицы 				 = "ВидыСубконто";
		ТекРеквизит.НомерСтрокиВТаблице 	 = Сч;
		ТекРеквизит.Выбрать             	 = Истина;
		ТекРеквизит.ИмяРеквизита             = "ТолькоОбороты" + Сч;
		ТекРеквизит.ПредставлениеРеквизита   = НСтр("ru = 'Только обороты'") + Символы.НПП + Сч;
		ТекРеквизит.ДоступноеОписаниеТипов   = ТипБулево;  
		// Признаки учета субконто.
		Для каждого Реквизит Из МетаданныеИсточника.ПризнакиУчетаСубконто Цикл        
			ТекРеквизит                          = ТаблицаРеквизитов.Добавить();
			ТекРеквизит.ИмяТаблицы 				 = "ВидыСубконто";
			ТекРеквизит.НомерСтрокиВТаблице 	 = Сч;
			ТекРеквизит.Выбрать             	 = Ложь;
			ТекРеквизит.ИмяРеквизита             = Реквизит.Имя + Сч;
			ТекРеквизит.ПредставлениеРеквизита   = ПолучитьПредставлениеРеквизита(Реквизит) + Символы.НПП + Сч;
			ТекРеквизит.ДоступноеОписаниеТипов   = МетаданныеИсточника.ПризнакиУчетаСубконто[Реквизит.Имя].Тип;     
		КонецЦикла;
	КонецЦикла;
	
	// Пометка удаления.
	ТекРеквизит                          = ТаблицаРеквизитов.Добавить();
	ТекРеквизит.Выбрать             	 = Истина;
	ТекРеквизит.ИмяРеквизита             = "ПометкаУдаления";
	ТекРеквизит.ПредставлениеРеквизита   = НСтр("ru = 'Пометка удаления'");
	ТекРеквизит.ДоступноеОписаниеТипов   = Новый ОписаниеТипов("Булево");  

	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл        
        ТекРеквизит.ОписаниеТипов = ТекРеквизит.ДоступноеОписаниеТипов;        
    КонецЦикла;
	
	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
		// ИскатьПо.
		СписокВыбора = ПолучитьПредставленияРеквизита(ТекРеквизит);
		ТекРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "", СписокВыбора[0].Значение);
		// СвязьПоВладельцу.
		СписокВыбора = ПолучитьСвязиПоВладельцу(ТекРеквизит, ТаблицаРеквизитов, МетаданныеИсточника);
		ТекРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "", СписокВыбора[0].Значение);
		// СписокСвязейПоТипу.
		СписокВыбора = ПолучитьСвязиПоТипу(ТекРеквизит, ТаблицаРеквизитов);
		Если СписокВыбора.Количество() = 0 Тогда
			ТекРеквизит.СвязьПоТипу 	   = "";
			ТекРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			ТекРеквизит.СвязьПоТипу 	   = СписокВыбора[0].Значение;
			ТекРеквизит.ЭлементСвязиПоТипу = ЭлементСвязиПоТипу(ТекРеквизит.ИмяРеквизита);		
		КонецЕсли;		
		ТекРеквизит.ЗначениеПоУмолчанию = ТекРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);		
		ТекРеквизит.РежимЗагрузки = "Искать";        
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьНастройкиКолонокПланаСчетов()

#КонецОбласти

#Область Оформление

// Процедура оформляет поля с дополнительными аналитиками по статье оборотов.
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент.
//  ТаблицаРеквизитов  - ТаблицаЗначений.
//  ПараметрыВыбораЗнч - Структура.
//  АвтоЦвет		   - Цвет.
//  нС 				   - Число;
//  УчетПоАналитикам   - Структура (По умолчанию = Неопределено).
//
Процедура ОформитьДопАналитикиПоСтатьеОбходАналитик(ТабличныйДокумент, ТаблицаРеквизитов, ПараметрыВыбораЗнч, АвтоЦвет, нС, УчетПоАналитикам = Неопределено)

    // Обход областей аналитик.
    Для каждого ЭлСп Из ПараметрыВыбораЗнч.СвязьАналитики_ИмяАналитики Цикл
        
        ИмяАналитики          = ЭлСп.Значение;
        ИмяАналитикиДляПоиска = ЭлСп.Представление;
        НайденныеРеквизиты    = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяАналитики));
        
        Если НайденныеРеквизиты.Количество() > 0 Тогда
            
            КолонкаАналитики = НайденныеРеквизиты[0];
            НомерКолонкиА     = КолонкаАналитики.НомерКолонки;
            Если НомерКолонкиА = 0 Тогда
                // Этой колонки не должно быть в табличном документе.
                Продолжить;           
            КонецЕсли;
            ОбластьАналитики = ТабличныйДокумент.Область("R" + Формат(нС, "ЧГ=") + "C" + Формат(НомерКолонкиА, "ЧГ="));
            
            // Проверка настройки учета по аналитике в статье оборотов.
			Если УчетПоАналитикам <> Неопределено И УчетПоАналитикам["Учет_" + ИмяАналитикиДляПоиска]Тогда
				ОбъявитьОбластьДоступной(ОбластьАналитики, АвтоЦвет);
            Иначе
                ОбъявитьОбластьНедоступной(ОбластьАналитики);
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;	

КонецПроцедуры // ОформитьДопАналитикиПоСтатьеОбходАналитик()

// Процедура устанавливает параметры недоступной области.
//
// Параметры:
//  Область - область табличного документа.
//
Процедура ОбъявитьОбластьНедоступной(Область)
    
    Область.Текст       = "недоступно";
    Область.Расшифровка = Неопределено;
    
    Область.ЦветТекста = ЦветаСтиля.бит_ТекстНедоступнойНадписи;	

КонецПроцедуры // ОбъявитьОбластьНедоступной()

// Процедура устанавливает параметры доступной области.
//
// Параметры:
//  Область     - Область табличного документа.
//  АвтоЦвет    - Цвет.
//  ОчиститьЗнч - Булево (По умолчанию = Истина).
//
Процедура ОбъявитьОбластьДоступной(Область, АвтоЦвет, ОчиститьЗнч = Истина)

    Если ОчиститьЗнч Тогда
        Область.Текст       = "";
        Область.Расшифровка = Неопределено;
    КонецЕсли;
    
    Область.ЦветТекста = АвтоЦвет;		

КонецПроцедуры // ОбъявитьОбластьДоступной()

#КонецОбласти

#Область Контроль

// Функция вычисляет значение ячейки для режима "Вычислять"
//
// Параметры:
//  Выражение 	   - Строка - программный код, который необходимо выполнить.
//  ТекущиеДанные  - Структура загруженных значений.
//  ТекстЯчейки    - Текст текущей ячейки.
//  ТекстыЯчеек    - Массив текстов ячеек строки.
//  Результат      - Результат вычисления.
//
// Возвращаемое значение:
//  Структура, содержащая Результат и ОписаниеОшибки.
//
Функция ВычислитьЗначениеЯчейки(Знач Выражение, Знач ТекущиеДанные, Знач ТекстЯчейки, Знач ТекстыЯчеек, Знач Результат)
	
	ТекстЯчейки = СокрЛП(ТекстЯчейки);
	ОписаниеОшибки = "";
	Попытка
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Выражение);
	Исключение
        СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);
	
КонецФункции // ВычислитьЗначениеЯчейки()

// Процедура выполняет обработку области табличного документа:
// заполняет расшифровку по представлению ячейки в соответствии со структурой загружаемых реквизитов
// сообщает об ошибке и устанавливает комментарий, если ячейка содержит ошибку.
//
// Параметры:
//  Область 	   	  - Область табличного документа.
//  Колонка 	   	  - Структура, свойства, в соответствии с которыми необходимо выполнить обработку области.
//  ТекущиеДанные  	  - Структура загруженных значений.
//  ТаблицаОтборов 	  - ТаблицаЗначений.
//  ТекстыЯчеек    	  - Массив текстов ячеек строки.
//  ВыводитьСообщения - Булево (По умолчанию = Истина).
//
Функция ПроверитьДанныеОбласти(Область, Колонка, ТекущиеДанные, ТаблицаОтборов, ТекстыЯчеек, ВыводитьСообщения = Истина)
    
    Представление = Область.Текст;
	Примечание = "";
    
    Если Представление = "недоступно" Тогда
        Возврат Истина;    
    КонецЕсли;
	
	Если Колонка.РежимЗагрузки = "Вычислять" Тогда
		
		Вычисление = ВычислитьЗначениеЯчейки(Колонка.Выражение,
                                            ТекущиеДанные,
                                            Представление, 
                                            ТекстыЯчеек, 
                                            Колонка.ЗначениеПоУмолчанию);
                                            
        Если Не ПустаяСтрока(Вычисление.ОписаниеОшибки) Тогда
			Результат = Неопределено;
			Примечание = "" + Вычисление.ОписаниеОшибки;
		Иначе
			Результат = Вычисление.Результат;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Представление) Тогда
        
        Результат = Неопределено;
        
    Иначе
        
        НайденныеЗначения = ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные, ТаблицаОтборов);		
		Если НайденныеЗначения.Количество() = 0 Тогда			
			
			Если Примечание = "" Тогда
				Примечание = НСтр("ru = 'Не найден'");
			Иначе	
				Примечание = НСтр("ru = 'Не найден'") + Символы.ПС + Примечание;
			КонецЕсли;
			
			Результат = Неопределено;		
            
		ИначеЕсли НайденныеЗначения.Количество() = 1 Тогда			
            
            Результат = НайденныеЗначения[0];	
            
		Иначе
			
			ТекстПримечания = НСтр("ru = 'Неоднозначное представление. Вариантов: %1'");
			ТекстПримечания = СтрШаблон(ТекстПримечания, НайденныеЗначения.Количество());
			Если Примечание = "" Тогда
				Примечание = ТекстПримечания;
			Иначе	
				Примечание = ТекстПримечания + Символы.ПС + Примечание;
			КонецЕсли;
						
			Нашли = Ложь;
			НашлиЗначениеПоУмолчанию = Ложь;
			Для каждого НайденноеЗначение Из НайденныеЗначения Цикл
				Если НайденноеЗначение = Область.Расшифровка Тогда
					Нашли = Истина;
					Прервать;
				КонецЕсли;
				Если НайденноеЗначение = Колонка.ЗначениеПоУмолчанию Тогда
					НашлиЗначениеПоУмолчанию = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Нашли Тогда				
                НайденноеЗначение = ?(НашлиЗначениеПоУмолчанию, Колонка.ЗначениеПоУмолчанию, НайденныеЗначения[0]);					
			КонецЕсли;
            
            Результат = НайденноеЗначение;
            
        КонецЕсли;
        
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = Колонка.ЗначениеПоУмолчанию;
	КонецЕсли;
			
	ТекущиеДанные.Вставить(Колонка.ИмяРеквизита, Результат);
	
	// Проверка обязательных к заполнению.
	Если Колонка.Обязательный И Не ЗначениеЗаполнено(Результат) Тогда
		Если Примечание = "" Тогда
			Примечание = НСтр("ru = 'Значение не заполнено.'");
		Иначе	
			Примечание = НСтр("ru = 'Значение не заполнено.'") + Символы.ПС + Примечание;
		КонецЕсли;
    КонецЕсли;
    
    // Завершение.
    Область.Расшифровка      = Результат;
	Область.Примечание.Текст = Примечание;
    
	Если Не ПустаяСтрока(Примечание) И ВыводитьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Ячейка[%1](%2): %3.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Область.Имя, Колонка.ПредставлениеРеквизита, Примечание);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ПустаяСтрока(Примечание);
	
КонецФункции // ПроверитьДанныеОбласти()

#КонецОбласти

#Область ЗагрузкаИзОбъектовБазыВТабличныйДокумент

// Функция получает данные по плану счетов. 
//
// Параметры:
//  ИмяПланаСчетов - Строка.
//
// Возвращаемое значение:
//   Массив.
// 
Функция ДанныеПланаСчетов(ИмяПланаСчетов) 

	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПланСчетов.Родитель.Код КАК Родитель,
	|	ПланСчетов.Код,
	|	ПланСчетов.Порядок,
	|	ПланСчетов.Наименование,
	|	ПланСчетов.НаименованиеПолное,
	|	ПланСчетов.Вид,
	|	ПланСчетов.ЗапретитьИспользоватьВПроводках,
	|	%ДополнительныеПоля%
	|	ПланСчетов.Забалансовый,
	|	ПланСчетов.Валютный,
	|	ПланСчетов.Количественный,
	|	ПланСчетов.ПометкаУдаления,
	|	ПланСчетов.ВидыСубконто.(
	|		ПланСчетов.ВидыСубконто.ВидСубконто.Наименование КАК ВидСубконто,
	|		ПланСчетов.ВидыСубконто.НомерСтроки КАК НомерСтроки,
	|		ПланСчетов.ВидыСубконто.ТолькоОбороты КАК ТолькоОбороты%ТекстПризнаковУчетаСубконто%
	|	)
	|ИЗ
	|	ПланСчетов.%ИмяПланаСчетов% КАК ПланСчетов
	|
    |АВТОУПОРЯДОЧИВАНИЕ
	|";
	
	Если ИмяПланаСчетов = "бит_Бюджетирование" Тогда
		ТекстПризнаковУчетаСубконто = "";
	Иначе		
		ТекстПризнаковУчетаСубконто = ",
		|		ПланСчетов.ВидыСубконто.Суммовой КАК Суммовой,
		|		ПланСчетов.ВидыСубконто.Валютный КАК Валютный,
		|		ПланСчетов.ВидыСубконто.Количественный КАК Количественный";	
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстПризнаковУчетаСубконто%", ТекстПризнаковУчетаСубконто);
	
	ДополнительныеПоля = "";
	Если бит_БухгалтерияСервер.ЕстьИсторическиеКурсы(ИмяПланаСчетов) Тогда
		ДополнительныеПоля = "ПланСчетов.ИспользоватьИсторическиеКурсы,";	
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДополнительныеПоля%", ДополнительныеПоля);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПланаСчетов%", ИмяПланаСчетов);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
		
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПоляСтруктуры = ОпределитьСтрокуПолейПланаСчетов(ИмяПланаСчетов); 
	ЭтоНеБюджетирование = ИмяПланаСчетов <> "бит_Бюджетирование";
    МассивДанных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
	
		СтруктураПолей = Новый Структура(ПоляСтруктуры);
		
		ТаблицаСубконто = Выборка.ВидыСубконто.Выгрузить();
		
		Для каждого СтрокаСубконто Из ТаблицаСубконто Цикл	
			НомерСтрокиСубконто = СтрокаСубконто.НомерСтроки;
			Если НомерСтрокиСубконто <> Неопределено Тогда			
				СтруктураПолей["ВидСубконто" + НомерСтрокиСубконто]   = СтрокаСубконто.ВидСубконто;				
				СтруктураПолей["ТолькоОбороты" + НомерСтрокиСубконто] = СтрокаСубконто.ТолькоОбороты;				
				Если ЭтоНеБюджетирование Тогда
					СтруктураПолей["Суммовой" + НомерСтрокиСубконто] 	   = СтрокаСубконто.Суммовой;				
					СтруктураПолей["Количественный" + НомерСтрокиСубконто] = СтрокаСубконто.Суммовой;				
					СтруктураПолей["Валютный" + НомерСтрокиСубконто] 	   = СтрокаСубконто.Валютный;				
				КонецЕсли;
			КонецЕсли; 			
		КонецЦикла; 
		
		ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
				
		МассивДанных.Добавить(СтруктураПолей);
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции // ДанныеПланаСчетов()

#КонецОбласти

#Область ЗагрузкаИзТабличногоДокументаВОбъектыБазы

// Функция выполняет загрузку данных из табличного документа в справочник.
//
// Параметры:
//  ТабличныйДокумент        - ТабличныйДокумент, у которого необходимо сформировать шапку.
//  ТаблицаРеквизитов        - ТаблицаЗначений.
//  СтруктураНастроекКолонок - Структура:
//								СтруктураПолей - Структура
//								ТаблицаОтборов - ТаблицаЗначений.
//  ДопПараметры             - Структура: 
//                              НачалоТекста          - Строка,
//                              ЭтоДобавление         - Булево,
//                              ЗагрузкаИзДругойФормы - Булево.
//
// Возвращаемое значение:
//  Булево (Истина, если загрузка прошла без ошибок).
//
Функция ЗагруженыДанныеВРежимеСправочник(ТабличныйДокумент, ТаблицаРеквизитов, СтруктураНастроекКолонок, ДопПараметры)
										
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	МетаИсточника = ПолучитьМетаданныеИсточника();
		
	ТаблицаОтборов = СтруктураНастроекКолонок.ТаблицаОтборов.Получить();
	
    //-----------------------------------------------------------------------
	// Настройки загрузки
    
    Запрос = Неопределено;
            
    Источник = ИмяСправочника;
    
    СтрокиПоиска = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ПолеПоиска, Выбрать", Истина, Истина));
    Если СтрокиПоиска.Количество() <> 0 Тогда
        
        ТекстЗапроса =
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |Справочник.Ссылка КАК Ссылка
        |ИЗ Справочник.%ИмяСправочника% КАК Справочник
        |ГДЕ";
        
        Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
            ТекстЗапроса = ТекстЗапроса + "
            |Справочник." + СтрокаПоиска.ИмяРеквизита + " = &" + СтрокаПоиска.ИмяРеквизита + "
            |И";					
        КонецЦикла;
        
        ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 2);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяСправочника%", МетаИсточника.Имя);
		
        Запрос = Новый Запрос (ТекстЗапроса);
        
    КонецЕсли;
            
    //-----------------------------------------------------------------------
    // Загрузка данных
    
	ТекстСообщения = НСтр("ru = 'Выполняется загрузка %1 (%2).'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДопПараметры.НачалоТекста, КоличествоСтрок);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
    
    инд 	  = 0;
    Загружено = 0;
    Для К = ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
        
        инд = инд + 1;
        Отказ = Ложь;
        ДанныеСтроки  = ДанныеСтроки(ТабличныйДокумент, К, ТаблицаРеквизитов, ТаблицаОтборов);
		ТекущаяСтрока = ДанныеСтроки.ТекущаяСтрока;
		ТекстыЯчеек   = ДанныеСтроки.ТекстыЯчеек;
                         
        Объект = Неопределено;
        Если Запрос <> Неопределено Тогда
			
			СтрокаОшибок = "";
            Для каждого СтрокаПоиска Из СтрокиПоиска Цикл                
                ЗначениеРеквизита = Неопределено;                
                ТекущаяСтрока.Свойство(СтрокаПоиска.ИмяРеквизита,ЗначениеРеквизита);
                Если ПустаяСтрока(ЗначениеРеквизита) Тогда
                    СтрокаОшибок = ?(ПустаяСтрока(СтрокаОшибок),"", СтрокаОшибок + ", ") + СтрокаПоиска.ПредставлениеРеквизита;
                Иначе
                    Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита,ТекущаяСтрока[СтрокаПоиска.ИмяРеквизита]);
                КонецЕсли;                
            КонецЦикла;
            
            Если Не ПустаяСтрока(СтрокаОшибок) Тогда
				ТекстСообщения = НСтр("ru = 'Строка %1 не может быть записана. Не указано значение ключевых реквизитов: %2.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, инд, СтрокаОшибок);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
                Продолжить;
            КонецЕсли;
            
            Выборка = Запрос.Выполнить().Выбрать();
            Если Выборка.Следующий() Тогда
                Объект = Выборка.Ссылка.ПолучитьОбъект();
            КонецЕсли;
             
        КонецЕсли;
            
        ОбъектНайден = Объект <> Неопределено;
		ЭтоГруппа = Ложь;
        Если ОбъектНайден Тогда
			НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", "ЭтоГруппа"));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ТекСтр = НайденныеСтроки[0];
				ЭтоГруппа = Объект.ЭтоГруппа;
			КонецЕсли;
        Иначе               
            Если НеСоздаватьНовыхЭлементов Тогда
                Продолжить;
            Иначе                    
				НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", "ЭтоГруппа"));
				Если НайденныеСтроки.Количество() <> 0 Тогда
					ТекСтр = НайденныеСтроки[0];
					ЭтоГруппа = ВРег(ТекстыЯчеек[ТекСтр.НомерКолонки]) = "ДА" ИЛИ ВРег(ТекстыЯчеек[ТекСтр.НомерКолонки]) = "ИСТИНА";
					Если ЭтоГруппа Тогда
                        Объект = Справочники[МетаИсточника.Имя].СоздатьГруппу();
                    Иначе	
                        Объект = Справочники[МетаИсточника.Имя].СоздатьЭлемент();
                    КонецЕсли;                    	
                Иначе
					Объект = Справочники[МетаИсточника.Имя].СоздатьЭлемент();    
                КонецЕсли;
            КонецЕсли;
            
        КонецЕсли;        
        
        // Заполнение значений реквизитов.
        Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
            
			НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", КлючИЗначение.Ключ));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ТекКолонка = НайденныеСтроки[0];
			Иначе
				Продолжить;
			КонецЕсли;
            Если Не ОбъектНайден ИЛИ ТекКолонка.Выбрать Тогда
                Если (ЭтоГруппа И Не ТекКолонка.ИспользованиеДляГруппы)
                         ИЛИ (НЕ ЭтоГруппа И Не ТекКолонка.ИспользованиеДляЭлемента) Тогда
                    Продолжить;               
                КонецЕсли;
                Попытка
                    Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				Исключение
					ТекстСообщения = НСтр("ru = 'Ошибка при установки значения реквизита ""%1"".'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, КлючИЗначение.Ключ);
                    СообщитьОбОшибке(ТекстСообщения + Символы.НПП + ОписаниеОшибки());
                    Отказ = Истина;
                    Прервать;
                КонецПопытки;
            КонецЕсли;
                
        КонецЦикла;        
        
        // Запись объекта.
		Если Не Отказ И ЗаписатьОбъект(Объект, РежимЗагрузки, ОбъектНайден, ТекстыЯчеек) Тогда
			Если ОбъектНайден Тогда
				ТекстСообщения = НСтр("ru = 'Изменен элемент справочника: %1.'");
			Иначе	
				ТекстСообщения = НСтр("ru = 'Загружен элемент справочника: %1.'");
			КонецЕсли;
			ТекстСообщения = СтрШаблон(ТекстСообщения, Объект.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Загружено = Загружено + 1;
		Иначе
			Если ОбъектНайден Тогда
				ТекстСообщения = НСтр("ru = 'Объект не изменен. Элемент справочника: %1.'");
			Иначе	
				ТекстСообщения = НСтр("ru = 'Объект не загружен. Элемент справочника: %1.'");
			КонецЕсли;
			ТекстСообщения = СтрШаблон(ТекстСообщения, Объект);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
                   
       // ОбработкаПрерыванияПользователя();
        
    КонецЦикла;
     
    //-----------------------------------------------------------------------
    // Сообщения о выполнении.
            
	ТекстСообщения = НСтр("ru = 'Выполнена загрузка элементов в справочник (%1 из %2).'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, Загружено, КоличествоСтрок);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
    Возврат Истина;    
		
КонецФункции // ЗагруженыДанныеВРежимеСправочник()

// Функция выполняет загрузку данных из табличного документа в табличную часть.
//
// Параметры:
//  ТабличныйДокумент        - ТабличныйДокумент, у которого необходимо сформировать шапку.
//  ТаблицаРеквизитов        - ТаблицаЗначений.
//  СтруктураНастроекКолонок - Структура:
//								СтруктураПолей - Структура
//								ТаблицаОтборов - ТаблицаЗначений.
//  ДопПараметры             - Структура: 
//                              НачалоТекста          - Строка,
//                              ЭтоДобавление         - Булево,
//                              ЗагрузкаИзДругойФормы - Булево.
//
// Возвращаемое значение:
//  Булево (Истина, если загрузка прошла без ошибок).
//
Функция ЗагруженыДанныеВРежимеТабличнаяЧасть(ТабличныйДокумент, ТаблицаРеквизитов, СтруктураНастроекКолонок, ДопПараметры)
                                        
    НачалоТекста          = ДопПараметры.НачалоТекста;
    ЭтоДобавление         = ДопПараметры.ЭтоДобавление;
    ЗагрузкаИзДругойФормы = ДопПараметры.ЗагрузкаИзДругойФормы;
	
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	МетаИсточника = ПолучитьМетаданныеИсточника();
	
	ТаблицаОтборов = СтруктураНастроекКолонок.ТаблицаОтборов.Получить();
	
	ЗаписыватьОбъект = Истина;
	
    //-----------------------------------------------------------------------
	// Настройки загрузки.
    
    ОбъектИсточника = СсылкаОбъекта.ПолучитьОбъект();
    Источник = ОбъектИсточника[ИмяТабличнойЧасти];
    
    Если ТипЗнч(СсылкаОбъекта) = Тип("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору")
        И (ИмяТабличнойЧасти = "ГрафикПлатежей" ИЛИ ИмяТабличнойЧасти = "ГрафикНачислений") Тогда
        
        ПроверятьДокументПланирования = Истина;
        // Для таких табличных частей не очищаем существующие строки, а заменяем их соответственно номерам,
        // проверяя не заполнен ли документ планирования (если заполнен - замена не производится).
                
    Иначе
        
        ПроверятьДокументПланирования = Ложь;
        
        Если Не ЭтоДобавление Тогда
            Источник.Очистить();
        КонецЕсли;
    
    КонецЕсли;
            
    //-----------------------------------------------------------------------
    // Загрузка данных.
    
	ТекстСообщения = НСтр("ru = 'Выполняется загрузка %1 (%2).'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, НачалоТекста, КоличествоСтрок);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
    
    ОбъектНайден = Ложь;
    
    СчСтр = 0;
    Загружено = 0;
    КоличествоВИсточнике = Источник.Количество();
    Для К = ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
        
        Отказ = Ложь;
        ДанныеСтроки = ДанныеСтроки(ТабличныйДокумент, К, ТаблицаРеквизитов, ТаблицаОтборов, , , Отказ);
		ТекущаяСтрока = ДанныеСтроки.ТекущаяСтрока;
		ТекстыЯчеек   = ДанныеСтроки.ТекстыЯчеек;
        
		СтрокаДобавлена = Истина;
		
		Если ОбъектМетаданных = "Документ.бит_ФормаВводаБюджета" Тогда
			// Проверка на пустые ресурсы.
			ТекСтатья = ТекущаяСтрока.СтатьяОборотов;
			СвСтатьи  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтатья, "Учет_Сумма, Учет_Количество");
            Если СвСтатьи.Учет_Сумма И Не СвСтатьи.Учет_Количество Тогда
                Если ТекущаяСтрока.Сумма = 0 Тогда
					Отказ = Истина;	
					ТекстСообщения = НСтр("ru = 'Ошибка в строке № %1. Не заполнена сумма.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, СчСтр+1);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли; 
            ИначеЕсли Не СвСтатьи.Учет_Сумма И СвСтатьи.Учет_Количество Тогда                        
                Если ТекущаяСтрока.Количество = 0 Тогда
					Отказ = Истина;
					ТекстСообщения = НСтр("ru = 'Ошибка в строке № %1. Не заполнено количество.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, СчСтр+1);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
            Иначе                        
                Если ТекущаяСтрока.Сумма = 0 И ТекущаяСтрока.Количество = 0 Тогда
					Отказ = Истина;
					ТекстСообщения = НСтр("ru = 'Ошибка в строке № %1. Не заполнены ресурсы (сумма или количество).'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, СчСтр+1);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
            КонецЕсли;
		КонецЕсли;
		
        Если ПроверятьДокументПланирования Тогда            
            Если СчСтр < КоличествоВИсточнике Тогда
                // Поиск строки в документе по номеру.
                Объект = Источник[СчСтр];
                СтрокаДобавлена = Ложь;
                Если ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
                    // Если документ планирования заполнен в строке документа, то не перезаполняем ее.
                    СчСтр = СчСтр + 1;
					ТекстСообщения = НСтр("ru = 'Строка № %1 не изменена, так как в ней заполнен документ планирования.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, СчСтр);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
                    Продолжить;               
                КонецЕсли;
            Иначе	
                // Добавление строки в табличную часть.    
                Объект = Источник.Добавить();
            КонецЕсли; 
        Иначе	
            // Добавление строки в табличную часть.            
            Объект = Источник.Добавить();            
        КонецЕсли;
                          
        // Заполнение значений реквизитов.
        Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
            
			НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", КлючИЗначение.Ключ));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ТекКолонка = НайденныеСтроки[0];			
	            Если Не ОбъектНайден ИЛИ ТекКолонка.Выбрать Тогда
	                Попытка
	                    Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	                Исключение
	                    ТекстСообщения = НСтр("ru = 'Ошибка при установки значения реквизита ""%1"".'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, КлючИЗначение.Ключ);
                    	СообщитьОбОшибке(ТекстСообщения + Символы.НПП + ОписаниеОшибки());
	                    Отказ = Истина;
	                    Прервать;
	                КонецПопытки;
	            КонецЕсли;
			КонецЕсли;
		
        КонецЦикла;        
                    
        Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, Объект, ТекстыЯчеек) Тогда
            Отказ = Истина;
        КонецЕсли;
        
        // СчСтр идет от 0, для сообщений нужен +1.
        СчСтр = СчСтр + 1;
        Загружено = Загружено + 1;
        
        Если Не Отказ Тогда
            Если СтрокаДобавлена Тогда
				ТекстСообщения = НСтр("ru = 'Добавлена строка № %1.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, СчСтр);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
           Иначе	
				ТекстСообщения = НСтр("ru = 'Строка №: %1 изменена.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, СчСтр);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
            КонецЕсли;            
        Иначе
			ТекстСообщения = НСтр("ru = 'При добавлении строки № %1 возникли ошибки.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СчСтр);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ЗаписыватьОбъект = Ложь;
        КонецЕсли;
                   
       // ОбработкаПрерыванияПользователя();
        
    КонецЦикла;
     
    //-----------------------------------------------------------------------
    // Запись данных и сообщения о выполнении.
    
    Если ЗаписыватьОбъект Тогда
        
        Если ОбъектМетаданных = "Документ.бит_ФормаВводаБюджета" И Не ЗагрузкаИзДругойФормы Тогда
                
            Если ОбъектМетаданных = "Документ.бит_ФормаВводаБюджета" Тогда
                ОбъектИсточника.ВосстановитьДеревоПоДаннымВнеш(Истина);
            КонецЕсли;
                       
        КонецЕсли;
            
        Если ЗаписатьОбъект(ОбъектИсточника, РежимЗагрузки, ОбъектНайден) Тогда                      
            
			ТекстСообщения = НСтр("ru = 'Выполнена загрузка строк в табличную часть.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
            Возврат Истина;            
                  
        КонецЕсли;        
        
    КонецЕсли;
        
	ТекстСообщения = НСтр("ru = 'Отменена запись объекта %1.'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(ОбъектИсточника.Ссылка));
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
    Возврат Ложь;    
    		
КонецФункции // ЗагруженыДанныеВРежимеТабличнаяЧасть()

// Функция выполняет загрузку данных из табличного документа в регистр сведений.
//
// Параметры:
//  ТабличныйДокумент        - ТабличныйДокумент, у которого необходимо сформировать шапку.
//  ТаблицаРеквизитов        - ТаблицаЗначений.
//  СтруктураНастроекКолонок - Структура:
//								СтруктураПолей - Структура
//								ТаблицаОтборов - ТаблицаЗначений.
//  ДопПараметры             - Структура: 
//                              НачалоТекста          - Строка,
//                              ЭтоДобавление         - Булево,
//                              ЗагрузкаИзДругойФормы - Булево.
//
// Возвращаемое значение:
//  Булево (Истина, если загрузка прошла без ошибок).
//
Функция ЗагруженыДанныеВРежимеРегистрСведений(ТабличныйДокумент, ТаблицаРеквизитов, СтруктураНастроекКолонок, ДопПараметры)
          
    КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	МетаИсточника = ПолучитьМетаданныеИсточника();
	
	ТаблицаОтборов = СтруктураНастроекКолонок.ТаблицаОтборов.Получить();
	
	//-----------------------------------------------------------------------
	// Настройки загрузки.
	
	// Массив измерений.
    ИзмеренияРегистра = Новый Массив;
	Для каждого Колонка Из ТаблицаРеквизитов Цикл
        Если Колонка.МожетБытьПолемПоиска Тогда
            ИзмеренияРегистра.Добавить(Колонка.ИмяРеквизита);
        КонецЕсли;
    КонецЦикла;
    
    //-----------------------------------------------------------------------
    // Очистка регистра.
	Если ОчищатьРегистр Тогда
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений." + ИмяРегистраСведений);
		Блокировка.Заблокировать();
        НаборЗаписей = РегистрыСведений[ИмяРегистраСведений].СоздатьНаборЗаписей();
        НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
        НаборЗаписей.Записать();
    КонецЕсли;    
    
    //-----------------------------------------------------------------------
    // Загрузка данных.
    
	ТекстСообщения = НСтр("ru = 'Выполняется загрузка %1 (%2).'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДопПараметры.НачалоТекста, КоличествоСтрок);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
    
    инд = 0;
    Загружено = 0;
    Для К = ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
        
        инд = инд + 1;
        Отказ = Ложь;
        ДанныеСтроки  = ДанныеСтроки(ТабличныйДокумент, К, ТаблицаРеквизитов, ТаблицаОтборов);
		ТекущаяСтрока = ДанныеСтроки.ТекущаяСтрока;
		ТекстыЯчеек   = ДанныеСтроки.ТекстыЯчеек;
                
        // Создание записи в регистре.    
        Объект = РегистрыСведений[МетаИсточника.Имя].СоздатьМенеджерЗаписи();
		Для каждого КлючИЗначение Из ТекущаяСтрока Цикл	
			// Заполнение измерений.
			Если ИзмеренияРегистра.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
				Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
            КонецЕсли;            
        КонецЦикла;
        
        Если Не ЗамещатьСуществующиеЗаписи Тогда
            Объект.Прочитать();
            ОбъектНайден = Объект.Выбран();
        Иначе
            ОбъектНайден = Ложь;
        КонецЕсли;
        
        
        // Заполнение значений реквизитов.
        Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
            
			НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", КлючИЗначение.Ключ));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ТекКолонка = НайденныеСтроки[0];
	            Если Не ОбъектНайден ИЛИ ТекКолонка.Выбрать Тогда
	                Попытка
	                    Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	                Исключение
	                    ТекстСообщения = НСтр("ru = 'Ошибка при установки значения реквизита ""%1"".'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, КлючИЗначение.Ключ);
	                    СообщитьОбОшибке(ТекстСообщения + Символы.НПП + ОписаниеОшибки());
	                    Отказ = Истина;
	                    Прервать;
	                КонецПопытки;
	            КонецЕсли;
			КонецЕсли;
		
        КонецЦикла;
                
        // Запись.    
		Если Не Отказ И ЗаписатьОбъект(Объект, РежимЗагрузки, ОбъектНайден, ТекстыЯчеек) Тогда
			Если ОбъектНайден Тогда
				ТекстСообщения = НСтр("ru = 'Изменена запись № %1.'");
			Иначе	
				ТекстСообщения = НСтр("ru = 'Добавлена запись № %1.'");
			КонецЕсли;
			ТекстСообщения = СтрШаблон(ТекстСообщения, инд);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
            Загружено = Загружено + 1;
		Иначе
			Если ОбъектНайден Тогда
				ТекстСообщения = НСтр("ru = 'Запись не изменена. № записи: %1.'");
			Иначе	
				ТекстСообщения = НСтр("ru = 'Запись не загружена. № записи: %1.'");
			КонецЕсли;
			ТекстСообщения = СтрШаблон(ТекстСообщения, инд);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
        КонецЕсли;
                
       // ОбработкаПрерыванияПользователя();
        
    КонецЦикла;
     
    //-----------------------------------------------------------------------
    // Сообщения о выполнении.
    ТекстСообщения = НСтр("ru = 'Выполнена загрузка записей в регистр сведений (%1 из %2).'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, Загружено, КоличествоСтрок);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
    Возврат Истина;
    		
КонецФункции // ЗагруженыДанныеВРежимеРегистрСведений()

// Функция выполняет загрузку данных из табличного документа в ручную операцию.
//
// Параметры:
//  ТабличныйДокумент     	 - ТабличныйДокумент, у которого необходимо сформировать шапку.
//  ТаблицаРеквизитов     	 - ТаблицаЗначений.
//  СтруктураНастроекКолонок - Структура:
//								СтруктураПолей - Структура
//								ТаблицаОтборов - ТаблицаЗначений.
//  ДопПараметры          	 - Структура: 
//                              НачалоТекста          - Строка,
//                              ЭтоДобавление         - Булево,
//                              ЗагрузкаИзДругойФормы - Булево.
//
// Возвращаемое значение:
//  Булево (Истина, если загрузка прошла без ошибок).
//
Функция ЗагруженыДанныеВРежимеЗагрузкаРО(ТабличныйДокумент, ТаблицаРеквизитов, СтруктураНастроекКолонок, ДопПараметры)
										
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	МетаИсточника = ПолучитьМетаданныеИсточника();
	
	ТаблицаОтборов = СтруктураНастроекКолонок.ТаблицаОтборов.Получить();
	
    //-----------------------------------------------------------------------
	// Настройки загрузки.
         
    // Набор записей.
    ДокументОбъект = СсылкаОбъекта.ПолучитьОбъект();
    ДвиженияРо = ДокументОбъект.Движения[МетаИсточника.Имя];
    
    //-----------------------------------------------------------------------
    // Очистка регистра.
    Если ОчищатьРегистр Тогда
	    ДвиженияРо.Очистить();
        ДвиженияРо.Записывать = Истина;
    КонецЕсли;   
    
    //-----------------------------------------------------------------------
    // Загрузка данных.
    
    ТекстСообщения = НСтр("ru = 'Выполняется загрузка %1 (%2).'");
    ТекстСообщения = СтрШаблон(ТекстСообщения, ДопПараметры.НачалоТекста, КоличествоСтрок);
    ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
    
    инд = 0;
    Загружено = 0;
    Для К = ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
        
        инд = инд + 1;
        Отказ = Ложь;
        ДанныеСтроки  = ДанныеСтроки(ТабличныйДокумент, К, ТаблицаРеквизитов, ТаблицаОтборов);
		ТекущаяСтрока = ДанныеСтроки.ТекущаяСтрока;
		ТекстыЯчеек   = ДанныеСтроки.ТекстыЯчеек;
                
        // Создание записи в регистре.
        Проводка = ДвиженияРо.Добавить();
        Проводка.Активность = Истина;
        Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
			
			ИмяРеквизита = КлючИЗначение.Ключ;
			Если Найти(ИмяРеквизита, "Субконто") <> 0 
			 	ИЛИ Найти(ИмяРеквизита, "Валюта") <> 0 
				ИЛИ Найти(ИмяРеквизита, "Валютная") <> 0 
				ИЛИ Найти(ИмяРеквизита, "Количество") <> 0 Тогда
				Продолжить;		
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ТекКолонка = НайденныеСтроки[0];
	            Если ТекКолонка.Выбрать Тогда
	                Попытка				
						Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
							Проводка[ИмяРеквизита] = КлючИЗначение.Значение;						
						КонецЕсли;
					Исключение
	                    ТекстСообщения = НСтр("ru = 'Ошибка при установки значения реквизита ""%1"".'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, КлючИЗначение.Ключ);
	                    СообщитьОбОшибке(ТекстСообщения + Символы.НПП + ОписаниеОшибки());
	                    Отказ = Истина;
	                    Прервать;
	                КонецПопытки;
				КонецЕсли;
				Если ТекКолонка.РежимЗагрузки = "Устанавливать" И ЗначениеЗаполнено(ТекКолонка.ЗначениеПоУмолчанию) Тогда
					Попытка				
						Проводка[ИмяРеквизита] = ТекКолонка.ЗначениеПоУмолчанию;						
					Исключение
	                    ТекстСообщения = НСтр("ru = 'Ошибка при установки значения реквизита ""%1"".'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, КлючИЗначение.Ключ);
	                    СообщитьОбОшибке(ТекстСообщения + Символы.НПП + ОписаниеОшибки());
	                    Отказ = Истина;
	                    Прервать;
	                КонецПопытки;		
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
			
			СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			
			Если СвСч.Валютный Тогда
				Проводка.ВалютаДт 		 = ТекущаяСтрока.ВалютаДт;
				Проводка.ВалютнаяСуммаДт = ТекущаяСтрока.ВалютнаяСуммаДт;
			КонецЕсли;
			
			Если СвСч.Количественный Тогда
				Проводка.КоличествоДт = ТекущаяСтрока.КоличествоДт;		
			КонецЕсли;
			
			// Субконто.
			Для Ном = 1 По 4 Цикл		        
		        Если Ном <= СвСч.КоличествоСубконто Тогда		            
		            ВидСубконто    = СвСч["ВидСубконто" + Ном];
		            ТипЗнчСубконто = СвСч["ВидСубконто" + Ном + "ТипЗначения"];					
					Для каждого ТипСубконто Из ТипЗнчСубконто.Типы() Цикл						
						Если ТипЗнч(ТекущаяСтрока["СубконтоДт" + Ном]) = ТипЗнчСубконто.Типы()[0] Тогда
							Проводка.СубконтоДт[ВидСубконто] = ТекущаяСтрока["СубконтоДт" + Ном];
							Прервать;						
						КонецЕсли;											
					КонецЦикла;					
		        КонецЕсли;		        
			КонецЦикла;		
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		
			СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвСч.Валютный Тогда
				Проводка.ВалютаКт = ТекущаяСтрока.ВалютаКт;
				Проводка.ВалютнаяСуммаКт = ТекущаяСтрока.ВалютнаяСуммаКт;
			КонецЕсли;
			
			Если СвСч.Количественный Тогда
				Проводка.КоличествоКт = ТекущаяСтрока.КоличествоКт;		
			КонецЕсли;
			
			// Субконто
			Для Ном = 1 По 4 Цикл		        
		        Если Ном <= СвСч.КоличествоСубконто Тогда		            
		            ВидСубконто    = СвСч["ВидСубконто" + Ном];
		            ТипЗнчСубконто = СвСч["ВидСубконто" + Ном + "ТипЗначения"];					
					Для каждого ТипСубконто Из ТипЗнчСубконто.Типы() Цикл						
						Если ТипЗнч(ТекущаяСтрока["СубконтоКт" + Ном]) = ТипЗнчСубконто.Типы()[0] Тогда
							Проводка.СубконтоКт[ВидСубконто] = ТекущаяСтрока["СубконтоКт" + Ном];
							Прервать;						
						КонецЕсли;											
					КонецЦикла;					
		        КонецЕсли;		        
			КонецЦикла;
		
		КонецЕсли;
		
		// ОбработкаПрерыванияПользователя();
        
    КонецЦикла;
	
	Если Не Отказ Тогда
		ДвиженияРо.Записать();
		ТекстСообщения = НСтр("ru = 'Выполнена загрузка в ручную операцию.'");
    	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Загрузка в ручную операцию не выполнена.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
    Возврат Истина;
    		
КонецФункции // ЗагруженыДанныеВРежимеЗагрузкаРО()

// Функция выполняет загрузку данных из табличного документа в план счетов.
//
// Параметры:
//  ТабличныйДокумент     	 - ТабличныйДокумент, у которого необходимо сформировать шапку.
//  ТаблицаРеквизитов     	 - ТаблицаЗначений.
//  СтруктураНастроекКолонок - Структура:
//								СтруктураПолей - Структура
//								ТаблицаОтборов - ТаблицаЗначений.
//  ДопПараметры          	 - Структура: 
//                              НачалоТекста          - Строка,
//                              ЭтоДобавление         - Булево,
//                              ЗагрузкаИзДругойФормы - Булево.
//
// Возвращаемое значение:
//  Булево (Истина, если загрузка прошла без ошибок).
//
Функция ЗагруженыДанныеВРежимеЗагрузкаПС(ТабличныйДокумент, ТаблицаРеквизитов, СтруктураНастроекКолонок, ДопПараметры)
										
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	МетаИсточника = ПолучитьМетаданныеИсточника();
		
	ТаблицаОтборов = СтруктураНастроекКолонок.ТаблицаОтборов.Получить();
	
    //-----------------------------------------------------------------------
	// Настройки загрузки
    
    Запрос = Неопределено;
         
    СтрокиПоиска = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ПолеПоиска, Выбрать", Истина, Истина));
    Если СтрокиПоиска.Количество() <> 0 Тогда
        
        ТекстЗапроса =
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |ПланСчетов.Ссылка КАК Ссылка
        |ИЗ ПланСчетов.%ИмяПланаСчетов% КАК ПланСчетов
        |ГДЕ";
        
        Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
            ТекстЗапроса = ТекстЗапроса + "
            |ПланСчетов." + СтрокаПоиска.ИмяРеквизита + " = &" + СтрокаПоиска.ИмяРеквизита + "
            |И";					
        КонецЦикла;
        
        ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 2);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПланаСчетов%", ИмяПланаСчетов);
		
		Запрос = Новый Запрос (ТекстЗапроса);
        
    КонецЕсли;
            
    //-----------------------------------------------------------------------
    // Загрузка данных
    
	ТекстСообщения = НСтр("ru = 'Выполняется загрузка %1 (%2).'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДопПараметры.НачалоТекста, КоличествоСтрок);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
    
    инд = 0;
    Загружено = 0;
    Для К = ПерваяСтрокаДанныхТабличногоДокумента По ТабличныйДокумент.ВысотаТаблицы Цикл
        
	    инд = инд + 1;
	    Отказ = Ложь;
	    ДанныеСтроки  = ДанныеСтроки(ТабличныйДокумент, К, ТаблицаРеквизитов, ТаблицаОтборов);
	    ТекущаяСтрока = ДанныеСтроки.ТекущаяСтрока;
	    ТекстыЯчеек   = ДанныеСтроки.ТекстыЯчеек;
	                     
	    Объект = Неопределено;
	    Если Запрос <> Неопределено Тогда
			
			СтрокаОшибок = "";
	        Для каждого СтрокаПоиска Из СтрокиПоиска Цикл	            
	            ЗначениеРеквизита = Неопределено;	            
	            ТекущаяСтрока.Свойство(СтрокаПоиска.ИмяРеквизита,ЗначениеРеквизита);
	            Если ПустаяСтрока(ЗначениеРеквизита) Тогда
	                СтрокаОшибок = ?(ПустаяСтрока(СтрокаОшибок),"", СтрокаОшибок + ", ") + СтрокаПоиска.ПредставлениеРеквизита;
	            Иначе
	                Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита,ТекущаяСтрока[СтрокаПоиска.ИмяРеквизита]);
	            КонецЕсли;	            
	        КонецЦикла;
	        
	        Если Не ПустаяСтрока(СтрокаОшибок) Тогда
	    		ТекстСообщения = НСтр("ru = 'Строка %1 не может быть записана. Не указано значение ключевых реквизитов: %2.'");
	    		ТекстСообщения = СтрШаблон(ТекстСообщения, инд, СтрокаОшибок);
	    		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	            Продолжить;
	        КонецЕсли;
	        
	        Выборка = Запрос.Выполнить().Выбрать();
	        Если Выборка.Следующий() Тогда
	            Объект = Выборка.Ссылка.ПолучитьОбъект();
	        КонецЕсли;
	         
	    КонецЕсли;
	        
	    ОбъектНайден = Объект <> Неопределено;
	   	Если НЕ ОбъектНайден Тогда              
	        Если НеСоздаватьНовыхЭлементов Тогда
	            Продолжить;
			Иначе          
				Объект = ПланыСчетов[ИмяПланаСчетов].СоздатьСчет();
	        КонецЕсли;	        
	    КонецЕсли;        
		
		АрхивСубконто = Новый Массив;
		
	    // Заполнение значений реквизитов.
	    Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
						
			НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", КлючИЗначение.Ключ));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ТекКолонка = НайденныеСтроки[0];
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если Не ОбъектНайден ИЛИ ТекКолонка.Выбрать Тогда
				
				Если ЗначениеЗаполнено(ТекКолонка.ИмяТаблицы) Тогда
					// Заполнение таблицы видов субконто.
					НомерСтрокиВТаблице = ТекКолонка.НомерСтрокиВТаблице;
					Если ЗначениеЗаполнено(ТекущаяСтрока["ВидСубконто" + НомерСтрокиВТаблице]) Тогда
						Если Объект.ВидыСубконто.Количество() < НомерСтрокиВТаблице Тогда
							СтрокаСубконто = Объект.ВидыСубконто.Добавить();
						Иначе
							СтрокаСубконто = Объект.ВидыСубконто[НомерСтрокиВТаблице-1];				
						КонецЕсли;
						ИмяПараметра = СтрЗаменить(КлючИЗначение.Ключ, Строка(НомерСтрокиВТаблице), "");					
						Попытка
					        СтрокаСубконто[ИмяПараметра] = КлючИЗначение.Значение;
						Исключение
							ТекстСообщения = НСтр("ru = 'Ошибка при установки значения реквизита ""%1"" в строке видов субконто №%2.'");
							ТекстСообщения = СтрШаблон(ТекстСообщения, КлючИЗначение.Ключ, НомерСтрокиВТаблице);
					        СообщитьОбОшибке(ТекстСообщения + Символы.НПП + ОписаниеОшибки());
					        Отказ = Истина;
					        Прервать;
						КонецПопытки;
					КонецЕсли;
				Иначе				
				    Попытка
				        Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					Исключение
						ТекстСообщения = НСтр("ru = 'Ошибка при установки значения реквизита ""%1"".'");
						ТекстСообщения = СтрШаблон(ТекстСообщения, КлючИЗначение.Ключ);
				        СообщитьОбОшибке(ТекстСообщения + Символы.НПП + ОписаниеОшибки());
				        Отказ = Истина;
				        Прервать;
					КонецПопытки;					
				КонецЕсли;
				
	        КонецЕсли;
	            
	    КонецЦикла;        
	    
	    // Запись объекта.
	    Если Не Отказ И ЗаписатьОбъект(Объект, РежимЗагрузки, ОбъектНайден, ТекстыЯчеек) Тогда
			Если ОбъектНайден Тогда
				ТекстСообщения = НСтр("ru = 'Изменен счет: %1.'");
			Иначе	
				ТекстСообщения = НСтр("ru = 'Загружен счет: %1.'");
			КонецЕсли;
			ТекстСообщения = СтрШаблон(ТекстСообщения, Объект.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Загружено = Загружено + 1;
		Иначе
			Если ОбъектНайден Тогда
				ТекстСообщения = НСтр("ru = 'Объект не изменен. Счет: %1.'");
			Иначе	
				ТекстСообщения = НСтр("ru = 'Объект не загружен. Счет: %1.'");
			КонецЕсли;
			ТекстСообщения = СтрШаблон(ТекстСообщения, Объект);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	    КонецЕсли;
	               
	   // ОбработкаПрерыванияПользователя();
        
    КонецЦикла;
     
    //-----------------------------------------------------------------------
    // Сообщения о выполнении.
            
	ТекстСообщения = НСтр("ru = 'Выполнена загрузка элементов в план счетов (%1 из %2).'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, Загружено, КоличествоСтрок);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
    Возврат Истина; 
    		
КонецФункции // ЗагруженыДанныеВРежимеЗагрузкаПС()

// Функция записывает объект в информационную базу данных, используя
// события определенные пользователем в форме редактирования событий.
//
// Параметры:
//  Объект        - записываемый объект.
//  РежимЗагрузки - Строка - режим загрузки (Справочник, ТабличнаяЧасть, РегистрСведений, ПланСчетов, РучнаяОперация).
//  ОбъектНайден  - Булево.
//  ТекстыЯчеек   - Массив - массив текстов ячеек, загружаемой строки.
//
// Возвращаемое значение:
//  Истина, если объект записан, Ложь - иначе.
//
Функция ЗаписатьОбъект(Объект, РежимЗагрузки, ОбъектНайден, ТекстыЯчеек = Неопределено)
	
	Отказ = Ложь;
	НачатьТранзакцию();
	
	Попытка
		
		Если Не ПустаяСтрока(СобытиеПередЗаписью) Тогда		
			ОбщегоНазначения.ВыполнитьВБезопасномРежиме(СобытиеПередЗаписью);
		КонецЕсли;
		Объект.Записать();
		Если Не ПустаяСтрока(СобытиеПриЗаписи) Тогда		
			ОбщегоНазначения.ВыполнитьВБезопасномРежиме(СобытиеПриЗаписи);
		КонецЕсли;
		Объект.Записать();
		Если РежимЗагрузки <> "РегистрСведений" Тогда
            СтрокаРез = ОбъектыЗагруженные.Добавить();
            СтрокаРез.ЭтоНовый         = Не ОбъектНайден;
            СтрокаРез.Картинка         = ?(ОбъектНайден, 5, 4);
            СтрокаРез.ОбъектЗагрузки   = Объект.Ссылка;
            СтрокаРез.ЗаписанныйОбъект = Строка(Объект.Ссылка);           
        КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		СообщитьОбОшибке(ОписаниеОшибки());
		
	КонецПопытки;
	    	
	Возврат Не Отказ;
	
КонецФункции // ЗаписатьОбъект()

#КонецОбласти

#КонецОбласти

#КонецЕсли 
