	
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийВидСравнения; // Служит для передачи вида сравнения между обработчиками.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
       
    // Заполнение списка выбора справочника.
    СписокИмен = Элементы.ИмяСправочника.СписокВыбора;
	Для каждого МетаОб Из Метаданные.Справочники Цикл
        СписокИмен.Добавить(МетаОб.Имя, МетаОб.Представление());
    КонецЦикла;
    
    // Заполнение списка выбора регистра сведений (только для неподчиненных регистратору).
	РегистрПодчиненРегистратору = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	СписокИмен = Элементы.ИмяРегистраСведений.СписокВыбора;
	Для каждого МетаОб Из Метаданные.РегистрыСведений Цикл		
		Если МетаОб.РежимЗаписи <> РегистрПодчиненРегистратору Тогда
			СписокИмен.Добавить(МетаОб.Имя, МетаОб.Представление());
		КонецЕсли;		
	КонецЦикла;
	
	// Заполнение списка выбора планов счетов.
    СписокИмен = Элементы.ИмяПланаСчетов.СписокВыбора;
	Для каждого МетаОб Из Метаданные.ПланыСчетов Цикл
		Если Найти(МетаОб.Имя, "бит_") <> 0 Тогда
			СписокИмен.Добавить(МетаОб.Имя, МетаОб.Представление());	
		КонецЕсли;        
	КонецЦикла;
	
	АвтоЦвет = бит_ОбщегоНазначения.ЦветТекстаЯчейкиТабличногоДокумента(ТабличныйДокумент);
	
	Если Параметры.Свойство("РежимЗагрузки") Тогда
		
		Если Параметры.РежимЗагрузки = "ТабличнаяЧасть" Тогда
								
			// Загрузка табличной части.
			
            ЗагрузкаИзДругойФормы = Истина;
            
            Объект.РежимЗагрузки    = "ТабличнаяЧасть";
            Объект.ОбъектМетаданных = Параметры.ОбъектМетаданных;
            Объект.СсылкаОбъекта    = Параметры.ОбъектДляЗаполнения;
            
            ЗаполнитьСписокТабличныхЧастей();
            Объект.ИмяТабличнойЧасти = Параметры.ИмяТабЧасти;
            
            УправлениеВидимостьюДоступностью();
            
            Объект.ПерваяСтрокаДанныхТабличногоДокумента = 2;
            Объект.СохранятьТабличныйДокумент = Истина;
            
			ЗаполнитьНастройкиКолонок();
			
			ЗаполнитьТабДокИзТабличнойЧастиСервер();
			
			ТекстЗапросаОтборов = СформироватьТекстЗапросаДляОтборов(Объект.ОбъектМетаданных, ТаблицаРеквизитов);
			
			СохраненныйОбъектМетаданных = Объект.ОбъектМетаданных; 
								
		ИначеЕсли Параметры.РежимЗагрузки = "Справочник" Тогда
			
			// Загрузка справочника.
			
			ЗагрузкаИзДругойФормы = Истина;
            
            Объект.РежимЗагрузки    = "Справочник";
            Объект.ИмяСправочника = Параметры.ИмяСправочника;
                        
            УправлениеВидимостьюДоступностью();
            
            Объект.ПерваяСтрокаДанныхТабличногоДокумента = 2;
            Объект.СохранятьТабличныйДокумент            = Истина;
            
			ЗаполнитьНастройкиКолонок();
			
			// Поля поиска по умолчанию.
		    НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("МожетБытьПолемПоиска", Истина));
		    Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		        Если СтрокаТаблицы.ИмяРеквизита = "Код" ИЛИ СтрокаТаблицы.ИмяРеквизита = "Наименование" Тогда
		            СтрокаТаблицы.ПолеПоиска = Истина;       
		        КонецЕсли;
			КонецЦикла;
			
			ОбновитьТабличныйДокументСервер();
			
			ТекстЗапросаОтборов = СформироватьТекстЗапросаДляОтборов(Объект.ОбъектМетаданных, ТаблицаРеквизитов);
					
		ИначеЕсли Параметры.РежимЗагрузки = "ПланСчетов" Тогда
			
			// Загрузка плана счетов.
			
			ЗагрузкаИзДругойФормы = Истина;
            
            Объект.РежимЗагрузки  = "ПланСчетов";
            Объект.ИмяПланаСчетов = Параметры.ИмяПланаСчетов;
                         
            УправлениеВидимостьюДоступностью();
            
            Объект.ПерваяСтрокаДанныхТабличногоДокумента = 2;
            Объект.СохранятьТабличныйДокумент                           = Истина;
            
			ЗаполнитьНастройкиКолонок();
			
			ЗаполнитьТабДокИзПланаСчетовСервер();
			
		КонецЕсли;
		
	Иначе
        
        УстановитьЗначенияПоУмолчанию();
        
    КонецЕсли;
    
    СписокДоступныхРегистровБухгалтерии = бит_БухгалтерскиеОтчетыСервер.СформироватьСписокДоступныхРегистровБухгалтерииДляУправленческихОтчетов();

	УстановитьУсловноеОформлениеФормы();
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборОбъектовМетаданных" Тогда
		
		ЗагрузитьВыбранныйОбъектСистемы(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийРежимЗагрузкиИДопПараметры
	
&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
    
    Объект.ИмяСправочника       			   = Неопределено;
    Объект.ИмяРегистраСведений  			   = Неопределено;
    Объект.ОбъектМетаданных     			   = Неопределено;
    Объект.СсылкаОбъекта        			   = Неопределено;
	Объект.ИмяТабличнойЧасти    			   = Неопределено;
    СохраненныйОбъектМетаданных 			   = Неопределено;
    Объект.РегистрБухгалтерииДляРучнойОперации = Неопределено;
	Объект.ИмяПланаСчетов 					   = Неопределено;
            
    РежимЗагрузкиПриИзмененииСервер();
    
КонецПроцедуры // РежимЗагрузкиПриИзменении()

&НаКлиенте
Процедура ИмяСправочникаПриИзменении(Элемент)
    
    ИмяСправочникаПриИзмененииСервер();
    
КонецПроцедуры

&НаКлиенте
Процедура ИмяРегистраСведенийПриИзменении(Элемент)
    
    ИмяРегистраСведенийПриИзмененииСервер();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхТчНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    КоллекцииВОМ = Новый СписокЗначений;
    КоллекцииВОМ.Добавить("Справочники");
    КоллекцииВОМ.Добавить("Документы");

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоллекцииВыбираемыхОбъектовМетаданных", КоллекцииВОМ);
    ПараметрыФормы.Вставить("ВыборЕдинственного"                   , Истина);    
	ПараметрыФормы.Вставить("Заголовок"                            , НСтр("ru = 'Выбор объекта'"));
    ПараметрыФормы.Вставить("НачальноеЗначениеВыбора"              , Объект.ОбъектМетаданных);
    ОткрытьФорму("ОбщаяФорма.ВыборОбъектовМетаданных", ПараметрыФормы);
        
КонецПроцедуры // ОбъектМетаданныхНачалоВыбора()

&НаКлиенте
Процедура ОбъектМетаданныхТчПриИзменении(Элемент)
	
	ОбъектМетаданныхТчПриИзмененииСервер();
	        
КонецПроцедуры // ОбъектМетаданныхТчПриИзменении()

&НаКлиенте
Процедура ОбъектМетаданныхТчОчистка(Элемент, СтандартнаяОбработка)
    
    Объект.СсылкаОбъекта 	 = Неопределено;
    Объект.ИмяТабличнойЧасти = "";
    Элементы.СсылкаОбъектаТч.ТолькоПросмотр = Истина;
	
	ОбъектМетаданныхТчПриИзмененииСервер();
    
КонецПроцедуры // ОбъектМетаданныхТчОчистка()

&НаКлиенте
Процедура СсылкаОбъектаТчПриИзменении(Элемент)
	
	СсылкаОбъектаТчПриИзмененииСервер();
	        
КонецПроцедуры // СсылкаОбъектаТчПриИзменении()

&НаКлиенте
Процедура ИмяТабличнойЧастиПриИзменении(Элемент)
    
    ИмяТабличнойЧастиПриИзмененииСервер();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхРоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    СписокРо = Новый СписокЗначений;
    СписокРо.Добавить("Документ.бит_ОперацияБюджетирование");
	СписокРо.Добавить("Документ.бит_ОперацияУправленческий");

	ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ФильтрПоОбъектамМетаданных", СписокРо);
    ПараметрыФормы.Вставить("ВыборЕдинственного"        , Истина);    
	ПараметрыФормы.Вставить("Заголовок"                 , НСтр("ru = 'Выбор объекта'"));
    ПараметрыФормы.Вставить("НачальноеЗначениеВыбора"   , Объект.ОбъектМетаданных);
    ОткрытьФорму("ОбщаяФорма.ВыборОбъектовМетаданных", ПараметрыФормы);
        
КонецПроцедуры // ОбъектМетаданныхРоНачалоВыбора()

&НаКлиенте
Процедура ОбъектМетаданныхРоПриИзменении(Элемент)
	
	ОбъектМетаданныхРоПриИзмененииСервер();
	        
КонецПроцедуры // ОбъектМетаданныхРоПриИзменении()

&НаКлиенте
Процедура ОбъектМетаданныхРоОчистка(Элемент, СтандартнаяОбработка)
    
    Объект.СсылкаОбъекта 	 = Неопределено;
    Объект.ИмяТабличнойЧасти = "";
	
    Элементы.СсылкаОбъектаРо.ТолькоПросмотр = Истина;
	
	ОбъектМетаданныхРоПриИзмененииСервер();
	
КонецПроцедуры // ОбъектМетаданныхРоОчистка()

&НаКлиенте
Процедура СсылкаОбъектаРоПриИзменении(Элемент)
	
	СсылкаОбъектаРоПриИзмененииСервер();
	        
КонецПроцедуры // СсылкаОбъектаРоПриИзменении()

&НаКлиенте
Процедура РегистрБухгалтерииРоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрБухгалтерии"));	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Объект.РегистрБухгалтерииДляРучнойОперации);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", СписокДоступныхРегистровБухгалтерии);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);	
	
КонецПроцедуры // РегистрБухгалтерииНачалоВыбора()

&НаКлиенте
Процедура ОчищатьРегистрПриИзменении(Элемент)
    
    Если Объект.ОчищатьРегистр Тогда
        Элементы.Загрузить.Заголовок = НСтр("ru = 'Очистить и загрузить'");   
    Иначе
        Элементы.Загрузить.Заголовок = НСтр("ru = 'Загрузить'");
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ИмяПланаСчетовПриИзменении(Элемент)
    
    ИмяПланаСчетовПриИзмененииСервер();
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличныйДокумент

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
    
    Если Область.Верх = 1 Тогда    
    	Возврат;
    КонецЕсли;
    
    Если ЭтоЦветНедоступнойНадписи(Область.ЦветТекста) Тогда    
    	Область.Текст = "недоступно";
        Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
        Возврат;
    КонецЕсли;
    
    НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("НомерКолонки", Область.Лево));
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ТекущаяКолонка = НайденныеСтроки[0];
	Иначе
		ТекущаяКолонка = Неопределено;
	КонецЕсли;
	    
    // Обработка изменения значения статьи оборотов.
    Если ТекущаяКолонка <> Неопределено
        И ТекущаяКолонка.ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов")  
        И ТипЗнч(ТекущаяКолонка.СвязьАналитики_ИмяАналитики) = Тип("СписокЗначений") Тогда
		ПараметрыВыбораЗнч = Новый Структура;
		ПараметрыВыбораЗнч.Вставить("ОписаниеТипов"				 , ТекущаяКолонка.ОписаниеТипов);
		ПараметрыВыбораЗнч.Вставить("ИскатьПо"	   				 , ТекущаяКолонка.ИскатьПо);
		ПараметрыВыбораЗнч.Вставить("СвязьАналитики_ИмяАналитики", ТекущаяКолонка.СвязьАналитики_ИмяАналитики);
        ОформитьДопАналитикиПоСтатьеСервер(Область.Текст, ПараметрыВыбораЗнч, Область.Верх, Область.Лево);
    КонецЕсли;
    
КонецПроцедуры // ТабличныйДокументПриИзмененииСодержимогоОбласти()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаРеквизитов

&НаКлиенте
Процедура ТаблицаРеквизитовПриИзменении(Элемент)
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ТабличныйДокумент, "НеАктуальностьТабДок");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовВыбратьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	ТекущиеДанные.ВыгружатьСписки = ТекущиеДанные.Выбрать;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовВыгружатьСпискиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные.ВыгружатьСписки Тогда
		ТекущиеДанные.Выбрать = ТекущиеДанные.Выбрать;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовРежимЗагрузкиПриИзменении(Элемент)
         	
	ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.РежимЗагрузки) Тогда
		ТекущиеДанные.РежимЗагрузки = "Устанавливать";
	КонецЕсли;
	    
КонецПроцедуры // ТаблицаРеквизитовРежимЗагрузкиПриИзменении()

&НаКлиенте
Процедура ТаблицаРеквизитовРежимЗагрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ТаблицаРеквизитовРежимЗагрузкиОчистка()

&НаКлиенте
Процедура ТаблицаРеквизитовНомерКолонкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
    
    Если ТекущиеДанные.НомерКолонки <> 0 Тогда
		ТекущиеДанные.Выбрать = Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерКолонки = 0 И ТекущиеДанные.РежимЗагрузки = "Искать" Тогда
		ТекущиеДанные.РежимЗагрузки = "Устанавливать"
	ИначеЕсли ТекущиеДанные.НомерКолонки <> 0 И ТекущиеДанные.РежимЗагрузки = "Устанавливать" Тогда
		ТекущиеДанные.РежимЗагрузки = "Искать"
	КонецЕсли;
	
КонецПроцедуры // ТаблицаРеквизитовНомерКолонкиПриИзменении()

&НаКлиенте
Процедура ТаблицаРеквизитовЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
    
    Если ТекущиеДанные.ОписаниеТипов.Типы().Количество() = 1 Тогда
        Элемент.ВыбиратьТип = Ложь;
    Иначе	
        Элемент.ВыбиратьТип = Истина;   
        // Ограничение типов.
        СписокТипов = Новый СписокЗначений;
        СписокТипов.ЗагрузитьЗначения(ТекущиеДанные.ОписаниеТипов.Типы());
        бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                                                   ,Элемент
	                                                   ,ТекущиеДанные
	                                                   ,"ЗначениеПоУмолчанию"
													   ,СписокТипов
													   ,СтандартнаяОбработка);
    КонецЕсли;                                                   
    
    // Параметры выбора - связь по владельцу.
    СтрОтборПоВладельцу = ПолучитьПараметрыСвязиПоВладельцу(ТекущиеДанные.СвязьПоВладельцу, ТаблицаРеквизитов);    
    Если СтрОтборПоВладельцу <> Неопределено Тогда
        бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтрОтборПоВладельцу);
    КонецЕсли;
	
КонецПроцедуры // ТаблицаРеквизитовЗначениеПоУмолчаниюНачалоВыбора()

&НаКлиенте
Процедура ТаблицаРеквизитовЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	ТекущиеДанные.ЗначениеПоУмолчанию = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(Неопределено);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ТаблицаРеквизитовЗначениеПоУмолчаниюОчистка() 

&НаКлиенте
Процедура ТаблицаРеквизитовИскатьПоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
    РежимЗагрузкиИскать = ТекущиеДанные.РежимЗагрузки = "Искать";
	
	// Список выбора имен представлений для поля "Искать по".
    СписокВыбора = ПолучитьПредставленияРеквизита(ТекущиеДанные.ПолучитьИдентификатор());
    Элементы.ТаблицаРеквизитовИскатьПо.СписокВыбора.Очистить();
    Для каждого ТекущееЗначение Из СписокВыбора Цикл
        Элементы.ТаблицаРеквизитовИскатьПо.СписокВыбора.Добавить(ТекущееЗначение.Значение, ТекущееЗначение.Представление);   
    КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовСвязьПоВладельцуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
	    
    // Список выбора для поля "Связь по владельцу".
    СписокВыбора = ПолучитьСвязиПоВладельцу(ТекущиеДанные.ПолучитьИдентификатор());
    Элементы.ТаблицаРеквизитовСвязьПоВладельцу.СписокВыбора.Очистить();
    Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоВладельцу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоВладельцу) = Неопределено Тогда
    	СписокВыбора.Вставить(0, ТекущиеДанные.СвязьПоВладельцу, ТекущиеДанные.СвязьПоВладельцу);
    КонецЕсли;
    Для каждого ТекущееЗначение Из СписокВыбора Цикл
        Элементы.ТаблицаРеквизитовСвязьПоВладельцу.СписокВыбора.Добавить(ТекущееЗначение.Значение, ТекущееЗначение.Представление);   
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовСвязьПоВладельцуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
    Если ТипЗНЧ(ВыбранноеЗначение) = Тип("Строка") Тогда
        
        // Продолжение выбора значения, если связь по типу задана в форме "<СправочникСсылка.ИмяСправочника>".
        
        Если Найти(ВыбранноеЗначение, ".") <> 0 Тогда
            
            СтандартнаяОбработка = Ложь;
            
            ИмяТипа = СтрЗаменить(ВыбранноеЗначение, "<", "");
            ИмяТипа = СтрЗаменить(ИмяТипа          , ">", "");
            
            // Оповещение об окончании выбора.
            ДопПараметры = Новый Структура("ИД", Элементы.ТаблицаРеквизитов.ТекущиеДанные.ПолучитьИдентификатор());    
            ОпОповещения = Новый ОписаниеОповещения("ЗавершениеВводаЗначенияСвязиПоВладельцу", ЭтотОбъект, ДопПараметры);
    
            ОпТипПоля = Новый ОписаниеТипов(ИмяТипа);
            ПоказатьВводЗначения(ОпОповещения, , , ОпТипПоля);
                
        КонецЕсли;
        
    КонецЕсли;
	
КонецПроцедуры // ТаблицаРеквизитовСвязьПоВладельцуОбработкаВыбора()

&НаКлиенте
Процедура ЗавершениеВводаЗначенияСвязиПоВладельцу(РезультатВыбора, ДопПараметры) Экспорт

    Если РезультатВыбора <> Неопределено Тогда
        
        ТекущиеДанные = ТаблицаРеквизитов.НайтиПоИдентификатору(ДопПараметры.ИД);
        ТекущиеДанные.СвязьПоВладельцу = РезультатВыбора;
                
    КонецЕсли;	

КонецПроцедуры // ЗавершениеВводаЗначенияСвязиПоВладельцу()

&НаКлиенте
Процедура ТаблицаРеквизитовВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    ПараметрыФормы = Новый Структура("ТекстВыражения", Элементы.ТаблицаРеквизитов.ТекущиеДанные.Выражение);
    ОповещениеЗакрытия = Новый ОписаниеОповещения("ЗакрытиеФормыРедактированияВыражения", ЭтотОбъект);
    ОткрытьФорму("Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента.Форма.ФормаРедактированияВыражения", ПараметрыФормы, Элемент, , , , ОповещениеЗакрытия);
   	
КонецПроцедуры // ТаблицаРеквизитовВыражениеНачалоВыбора()

&НаКлиенте
Процедура ЗакрытиеФормыРедактированияВыражения(ТекстВыражения, ДопПараметры) Экспорт

    Если ТекстВыражения <> Неопределено Тогда
        ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
        ТекущиеДанные.Выражение = ТекстВыражения;
    КонецЕсли;	

КонецПроцедуры // ЗакрытиеФормыРедактированияВыражения()

&НаКлиенте
Процедура ТаблицаРеквизитовСвязьАналитики_ПредставлениеСтатьиОборотовПриИзменении(Элемент)
    
    ТекущиеДанные = Элементы.ТаблицаРеквизитов.ТекущиеДанные;
    
    ЭлСп = Элемент.СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьАналитики_ПредставлениеСтатьиОборотов);
    
    ТекущиеДанные.СвязьАналитики_ПредставлениеСтатьиОборотов = ЭлСп.Значение;
    ТекущиеДанные.СвязьАналитики_ПредставлениеСтатьиОборотов = ЭлСп.Представление;
    
КонецПроцедуры // ТаблицаРеквизитовСвязьАналитики_ПредставлениеСтатьиОборотовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыЗагруженные

&НаКлиенте
Процедура ОбъектыЗагруженныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ТекущиеДанные = Элементы.ОбъектыЗагруженные.ТекущиеДанные;
    ПоказатьЗначение( , ТекущиеДанные.ОбъектЗагрузки);
    
КонецПроцедуры // ОбъектыЗагруженныеВыбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОтбор

&НаКлиенте
Процедура ТаблицаОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Отказ = Истина;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборПередНачаломДобавления()

&НаКлиенте
Процедура ТаблицаОтборПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборПередУдалением()

&НаКлиенте
Процедура ТаблицаОтборПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И Не Копирование Тогда

		ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;		

		Если Копирование Тогда
			ТекущиеДанные.ПутьКДанным   = "";
			ТекущиеДанные.Представление = "";
		Иначе
			ТекущиеДанные.Использование  = Истина;  
			ТекущиеДанные.ВидСравнения   = ПолучитьВидСравненияРавно(); 
		КонецЕсли; 	
	
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаОтборПриНачалеРедактирования()

&НаКлиенте
Процедура ТаблицаОтборПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрПар = Новый Структура("ТекстЗапроса", ТекстЗапросаОтборов);				  
	бит_мпд_Клиент.ОткрытьФормуПолейПостроителя(ТекущиеДанные, "ТаблицаОтбор", "ПутьКДанным", "Отбор", "", СтрПар, Элемент);
	
КонецПроцедуры // ТаблицаОтборПредставлениеНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	СписокВидов = СформироватьСписокВыбораВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор());
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВидов.ВыгрузитьЗначения());
	
КонецПроцедуры // ТаблицаОтборВидСравненияНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	СписокВидов = СформироватьСписокВыбораВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор());
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВидов.ВыгрузитьЗначения());
	
КонецПроцедуры // ТаблицаОтборВидСравненияАвтоПодбор()

&НаКлиенте
Процедура ТаблицаОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;  	
	ИзменениеВидаСравненияСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);
	
КонецПроцедуры // ТаблицаОтборВидСравненияПриИзменении()

&НаКлиенте
Процедура ТаблицаОтборЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;	
	бит_мпд_Клиент.ТаблицаОтборЗначениеНачалоВыбора(ЭтаФорма
												, ТекущиеДанные
												, Элемент
												, ДанныеВыбора
												, СтандартнаяОбработка);
                                               	
КонецПроцедуры // ТаблицаОтборЗначениеНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		ТекущиеДанные.Использование = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборЗначениеПриИзменении()

&НаКлиенте
Процедура ТаблицаОтборИнтервалЗначенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗначениеС) И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеПо) Тогда
		ТекущиеДанные.Использование = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборЗначениеПриИзменении()

&НаКлиенте
Процедура ТаблицаОтборЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;	
	бит_мпд_Клиент.ТаблицаОтборЗначениеОчистка(ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ТаблицаОтборЗначениеОчистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандРаботаСоЗначениемВОбласти

&НаКлиенте
Процедура ВыбратьЗначение(Команда)

    ВыбратьЗначениеПоляТабличногоДокумента();

КонецПроцедуры // ВыбратьЗначение()

&НаКлиенте
Процедура ПоказатьЗначениеОбласти(Команда)
    
    ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	
	Если ТекущаяОбласть.Верх <> ТекущаяОбласть.Низ ИЛИ ТекущаяОбласть.Лево <> ТекущаяОбласть.Право Тогда
		ТекстСообщения = НСтр("ru = 'Для просмотра значения необходимо выделить только одну ячейку.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;   
       
    Значение = ТекущаяОбласть.Расшифровка;
    Если ЗначениеЗаполнено(Значение) Тогда
        ПоказатьЗначение(, Значение);
    КонецЕсли;    
    
КонецПроцедуры // ПоказатьЗначениеОбласти()

#КонецОбласти

#Область ОбработчикиКомандРаботыСФайлами

&НаКлиенте
Процедура ФайлСохранить(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Microsoft Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли    
	
	ОповещениеФСЗ = Новый ОписаниеОповещения("ФайлСохранитьЗавершение", ЭтотОбъект);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Табличный документ (*.mxl)|*.mxl|Текстовый документ(*.txt)|*.txt|'");
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;	
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОповещениеФСЗ, ДиалогВыбораФайла);
	
КонецПроцедуры // ФайлСохранить()

&НаКлиенте
Процедура ФайлСохранитьЗавершение(ВыбранныеФайлы, ДопПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда
	
		Состояние(НСтр("ru = 'Обработка файла ...'"));
        
        ПутьКФайлу = ВыбранныеФайлы[0];
            	        
        // Установка доступности всем областям.
        // В файле нет управления связями между статьями оборотов и аналитиками.
        СохраняемыйТабличныйДокумент = ПолучитьТабДокДляСохраненияВФайл();
		        
        ФайлНаДиске = Новый Файл(ПутьКФайлу);
    
        Если НРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
            
            СохраняемыйТабличныйДокумент.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.MXL);
            
        ИначеЕсли НРег(ФайлНаДиске.Расширение) = ".txt" Тогда
            
            СохраняемыйТабличныйДокумент.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.TXT);
            
        КонецЕсли;  
	
	КонецЕсли;	

КонецПроцедуры // ФайлСохранитьЗавершение

&НаКлиенте
Процедура ФайлExcelСохранитьШаблон(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Microsoft Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
	
	ОповещениеФСЗ = Новый ОписаниеОповещения("ФайлСохранитьШаблонЗавершение", ЭтотОбъект);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Сохранить табличный документ в файл Microsoft Excel'");
    ДиалогВыбораФайла.Фильтр    = НСтр("ru = 'Файл Microsoft Excel (*.xlsx)|*.xlsx|Файл Excel (*.xls)|*.xls|'");
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;	
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОповещениеФСЗ, ДиалогВыбораФайла);
	    
КонецПроцедуры // ФайлExcelСохранитьШаблон()

&НаКлиенте
Процедура ФайлСохранитьШаблонЗавершение(ВыбранныеФайлы, ДопПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда
	
		Состояние(НСтр("ru = 'Обработка файла ...'"));
        
        ПутьКФайлу = ВыбранныеФайлы[0];
            	        
        СохраняемыйТабличныйДокумент = Новый ТабличныйДокумент;
	    
	    ФайлExcelВыгрузитьСохранить(ПутьКФайлу, СохраняемыйТабличныйДокумент, Ложь);  
	
	КонецЕсли;	

КонецПроцедуры // ФайлСохранитьШаблонЗавершение

&НаКлиенте
Процедура ФайлExcelСохранитьДанные(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Microsoft Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
    	
	ОповещениеФСЗ = Новый ОписаниеОповещения("ФайлСохранитьДанныеЗавершение", ЭтотОбъект);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Сохранить табличный документ в файл Microsoft Excel'");
    ДиалогВыбораФайла.Фильтр    = НСтр("ru = 'Файл Microsoft Excel (*.xlsx)|*.xlsx|Файл Excel (*.xls)|*.xls|'");
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;	
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОповещениеФСЗ, ДиалогВыбораФайла);
	    
КонецПроцедуры // ФайлExcelСохранитьДанные()

&НаКлиенте
Процедура ФайлСохранитьДанныеЗавершение(ВыбранныеФайлы, ДопПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда
	
		Состояние(НСтр("ru = 'Обработка файла ...'"));
        
        ПутьКФайлу = ВыбранныеФайлы[0];
            	        
        СохраняемыйТабличныйДокумент = ПолучитьТабДокДляСохраненияВФайл();
	    
	    ФайлExcelВыгрузитьСохранить(ПутьКФайлу, СохраняемыйТабличныйДокумент, Истина);  
	
	КонецЕсли;	

КонецПроцедуры // ФайлСохранитьДанныеЗавершение

&НаКлиенте
Процедура ФайлЗагрузить(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Microsoft Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Прочитать табличный документ из файла'");
	ПараметрыЗагрузки.Диалог.Фильтр    = НСтр("ru = 'Табличный документ (*.mxl)|*.mxl|Текстовый документ (*.txt)|*.txt'");
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлЗагрузитьЗавершение", ЭтотОбъект, Неопределено);
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузки);
    
КонецПроцедуры // ФайлЗагрузить()

&НаКлиенте
Процедура ФайлЗагрузитьADODB(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Microsoft Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Прочитать табличный документ из файла'");
	ПараметрыЗагрузки.Диалог.Фильтр    = НСтр("ru = 'Файл Microsoft Excel (*.xls, *.xlsx)|*.xl*'");
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлЗагрузитьЗавершение", ЭтотОбъект, Неопределено);
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузки);
    
КонецПроцедуры // ФайлЗагрузитьADODB()

&НаКлиенте
Процедура ФайлЗагрузитьЗавершение(ВыбранныеФайлы, ДопПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда
	
		Состояние(НСтр("ru = 'Обработка файла ...'"));
		
		ПутьКФайлу 	   = ВыбранныеФайлы.Имя;
		АдресХранилища = ВыбранныеФайлы.Хранение;
		
        ФайлНаДиске = Новый Файл(ПутьКФайлу);
        РасширениеФайла = ФайлНаДиске.Расширение;
        
        Если НРег(РасширениеФайла) = ".xls" ИЛИ НРег(РасширениеФайла) = ".xlsx" Тогда
            ПрочитатьТабличныйДокументИзExcelADODB(ПутьКФайлу);    
        Иначе
			ФайлЗагрузитьНаСервере(РасширениеФайла, АдресХранилища);   
        КонецЕсли;  
	
	КонецЕсли;	

КонецПроцедуры // ФайлЗагрузитьЗавершение

#КонецОбласти

#Область ОбработчикиКомандСобытия

&НаКлиенте
Процедура События(Команда)
    
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("РежимЗагрузки"               , Объект.РежимЗагрузки);
    ПараметрыФормы.Вставить("СобытиеПередЗаписью"         , Объект.СобытиеПередЗаписью);
    ПараметрыФормы.Вставить("СобытиеПриЗаписи"            , Объект.СобытиеПриЗаписи);
    ПараметрыФормы.Вставить("СобытиеПослеДобавленияСтроки", Объект.СобытиеПослеДобавленияСтроки);
    
    ОповещениеЗакрытия = Новый ОписаниеОповещения("ЗакрытиеФормыРедактированияСобытий", ЭтотОбъект);
    
    ОткрытьФорму("Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента.Форма.ФормаРедактированияСобытий", ПараметрыФормы, , , , , ОповещениеЗакрытия);
   	        
КонецПроцедуры // События()

&НаКлиенте
Процедура ЗакрытиеФормыРедактированияСобытий(РезультатСобытия, ДопПараметры) Экспорт

    Если РезультатСобытия <> Неопределено Тогда
        Объект.СобытиеПередЗаписью          = РезультатСобытия.СобытиеПередЗаписью;
        Объект.СобытиеПриЗаписи             = РезультатСобытия.СобытиеПриЗаписи;
        Объект.СобытиеПослеДобавленияСтроки = РезультатСобытия.СобытиеПослеДобавленияСтроки;  
    КонецЕсли;	

КонецПроцедуры // ЗакрытиеФормыРедактированияСобытий()

#КонецОбласти

#Область ОбработчикиКомандПроверка

&НаКлиенте
Процедура Проверить(Команда)
    
    ОчиститьСообщения();
    
    Состояние(НСтр("ru = 'Выполняется контроль заполнения'"));
    
    ПроверитьСервер();
    
КонецПроцедуры // Проверить()

#КонецОбласти

#Область ОбработчикиКомандЗагрузкиДанных

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
    
    ЗагрузитьДанныеВОбъект(Ложь);		
            
КонецПроцедуры // Загрузить()

&НаКлиенте
Процедура ДобавитьДанные(Команда)
    
    ЗагрузитьДанныеВОбъект(Истина);
            
КонецПроцедуры // Загрузить()

&НаКлиенте
Процедура ЗагрузитьДанныеВОбъект(ЭтоДобавление)
    
    ОчиститьСообщения();
    Объект.ОбъектыЗагруженные.Очистить();
    
    //-----------------------------------------------------------------------
    // Первоначальные проверки
    
	Если ТаблицаРеквизитов.НайтиСтроки(Новый Структура("Выбрать", Истина)).Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Загрузка отменена. Не отмечены загружаемые реквизиты.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;	
	КоличествоСтрок = ТабличныйДокумент.ВысотаТаблицы - Объект.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	Если КоличествоСтрок <= 0 Тогда
		ТекстСообщения = НСтр("ru = 'Загрузка отменена. Не заполнены данные для загрузки.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
    
    //-----------------------------------------------------------------------
    // Запрос подтверждения пользователя
    
    Если Объект.РежимЗагрузки = "Справочник" Тогда        
		// Количество загружаемых элементов.
		НачалоТекста = Символы.НПП + НСтр("ru = 'элементов в справочник ""%1""'");
		НачалоТекста = СтрШаблон(НачалоТекста, Объект.ИмяСправочника);		
	ИначеЕсли Объект.РежимЗагрузки = "ТабличнаяЧасть" Тогда		
		Если Не ЗначениеЗаполнено(Объект.СсылкаОбъекта) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбрана ссылка.'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецЕсли;		 
        // Количество загружаемых строк.
		НачалоТекста = Символы.НПП + НСтр("ru = 'строк в табличную часть объекта.'");
	ИначеЕсли Объект.РежимЗагрузки = "РегистрСведений" Тогда		
		// Количество загружаемых записей.
		НачалоТекста = Символы.НПП + НСтр("ru = 'записей в регистр сведений ""%1""'");
		НачалоТекста = СтрШаблон(НачалоТекста, Объект.ИмяРегистраСведений);
		Если Объект.ОчищатьРегистр Тогда
            НачалоТекста = НачалоТекста + Символы.НПП + НСтр("ru = 'Существующие записи будут удалены.'");
        КонецЕсли; 
    ИначеЕсли Объект.РежимЗагрузки = "РучнаяОперация" Тогда		
		// Количество загружаемых записей.
		НачалоТекста = Символы.НПП + НСтр("ru = 'записей в документ ""%1""'");
		НачалоТекста = СтрШаблон(НачалоТекста, Объект.ОбъектМетаданных);
        Если Объект.ОчищатьРегистр Тогда
            НачалоТекста = НачалоТекста + НСтр("ru = 'Существующие записи будут удалены.'");
        КонецЕсли; 
    ИначеЕсли Объект.РежимЗагрузки = "ПланСчетов" Тогда		
		// Количество загружаемых счетов.
		НачалоТекста = Символы.НПП + НСтр("ru = 'элементов в план счетов.'");
	КонецЕсли;
    ТекстВопроса = НСтр("ru = 'Будут загружены %1 %2 Продолжить?'");
	ТекстВопроса = СтрШаблон(ТекстВопроса, КоличествоСтрок, НачалоТекста);
    ДопПараметры = Новый Структура();
    ДопПараметры.Вставить("НачалоТекста"         , НачалоТекста);
    ДопПараметры.Вставить("ЭтоДобавление"        , ЭтоДобавление);
    ДопПараметры.Вставить("ЗагрузкаИзДругойФормы", ЗагрузкаИзДругойФормы);
    ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПодтверждениеЗагрузки", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
            
КонецПроцедуры // Загрузить()

&НаКлиенте
Процедура ОповещениеПодтверждениеЗагрузки(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
    КонецЕсли;
    
    ДанныеЗагружены = ЗагрузитьДанныеСервер(ДопПараметры);     
    
	Если ДанныеЗагружены И ЗагрузкаИзДругойФормы И Объект.РежимЗагрузки = "ТабличнаяЧасть" Тогда
		ПараметрыОповещения = Новый Структура; 
		ПараметрыОповещения.Вставить("Ссылка", Объект.СсылкаОбъекта);
		ПараметрыОповещения.Вставить("ИмяТабЧасти", Объект.ИмяТабличнойЧасти);
		Оповестить("ВосстановитьЗагруженныеИзExcelДанные", ПараметрыОповещения, ВладелецФормы.УникальныйИдентификатор);
	КонецЕсли;
	
	Если Объект.РежимЗагрузки = "Справочник" И ЗначениеЗаполнено(Объект.ИмяСправочника) Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка." + Объект.ИмяСправочника));
	ИначеЕсли Объект.РежимЗагрузки = "ПланСчетов" И ЗначениеЗаполнено(Объект.ИмяПланаСчетов) Тогда
		ОповеститьОбИзменении(Тип("ПланСчетовСсылка." + Объект.ИмяПланаСчетов));		
	КонецЕсли;
    
КонецПроцедуры // ОповещениеПодтверждениеЗагрузки()

&НаСервере
Функция ЗагрузитьДанныеСервер(ДопПараметры)
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТР = РеквизитФормыВЗначение("ТаблицаРеквизитов");
		
	СтруктураНастроекКолонок = ПодготовитьДанныеДляВыгрузкиИзТабДок(Ложь);
	
    ДанныеЗагружены = ОбработкаОбъект.ЗагруженыДанные(ТабличныйДокумент, ТР, СтруктураНастроекКолонок, ДопПараметры);
    
    ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
    
    Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатЗагрузки;
    
    Возврат ДанныеЗагружены;
    
КонецФункции // ЗагрузитьДанныеСервер()

&НаКлиенте
Процедура ЗаполнитьТабДокИзСправочникаВыборочно(Команда)
    
    Если Не ЗначениеЗаполнено(Объект.ИмяСправочника) Тогда
        Возврат;
    КонецЕсли;
        
    ПараметрыФВ = Новый Структура();
    ПараметрыФВ.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
    ПараметрыФВ.Вставить("МножественныйВыбор"  , Истина);
    ПараметрыФВ.Вставить("РазрешитьВыборКорня" , Истина);
    ПараметрыФВ.Вставить("РежимВыбора"         , Истина);
    ОповещениеЗакрытияФормыВыбораСпр = Новый ОписаниеОповещения("ЗакрытиеФормыВыбораСправочника", ЭтотОбъект);
    ОткрытьФорму("Справочник." + Объект.ИмяСправочника + ".ФормаВыбора", ПараметрыФВ, , , , , ОповещениеЗакрытияФормыВыбораСпр); 
    
КонецПроцедуры // ЗаполнитьТабДокИзСправочникаВыборочно()

&НаКлиенте
Процедура ЗакрытиеФормыВыбораСправочника(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
    КонецЕсли;
    	
	ЗаполнитьТабДокИзСправочникаВыборочноСервер(Результат);
	
КонецПроцедуры // ЗакрытиеФормыВыбораСправочника()

&НаКлиенте
Процедура ЗаполнитьТабДокИзСправочникаПолностью(Команда)
    
    Если Не ЗначениеЗаполнено(Объект.ИмяСправочника) Тогда
        Возврат;
    КонецЕсли;
    	
	ЗаполнитьТабДокИзСправочникаПолностьюСервер(); 
    
КонецПроцедуры // ЗаполнитьТабДокИзСправочникаПолностью()

&НаКлиенте
Процедура ЗаполнитьТабДокИзРегистра(Команда)
    
    Если Не ЗначениеЗаполнено(Объект.ИмяРегистраСведений) Тогда
        Возврат;
    КонецЕсли;
        
    ЗаполнитьТабДокИзРегистраСервер();
    
КонецПроцедуры // ЗаполнитьТабДокИзРегистра()

&НаКлиенте
Процедура ЗаполнитьТабДокИзТабличнойЧасти(Команда)
    
    Если Не ЗначениеЗаполнено(Объект.СсылкаОбъекта) ИЛИ Не ЗначениеЗаполнено(Объект.ИмяТабличнойЧасти) Тогда
        Возврат;
    КонецЕсли;
        
    ЗаполнитьТабДокИзТабличнойЧастиСервер();
    
КонецПроцедуры // ЗаполнитьТабДокИзТабличнойЧасти()

&НаКлиенте
Процедура ЗаполнитьТабДокИзРучнойОперации(Команда)
    
    Если Не ЗначениеЗаполнено(Объект.СсылкаОбъекта) Тогда
        Возврат;
    КонецЕсли;
        
    ЗаполнитьТабДокИзРучнойОперацииСервер();
    
КонецПроцедуры // ЗаполнитьТабДокИзРучнойОперации()

&НаКлиенте
Процедура ЗаполнитьТабДокИзПланаСчетов(Команда)
    
    Если Не ЗначениеЗаполнено(Объект.ИмяПланаСчетов) Тогда
        Возврат;
    КонецЕсли;
        
    ЗаполнитьТабДокИзПланаСчетовСервер();
    
КонецПроцедуры // ЗаполнитьТабДокИзПланаСчетов()

#КонецОбласти

#Область ОбработчикиКомандКолонки

&НаКлиенте
Процедура КолонкиВыбратьВсе(Команда)
    
    Для каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл			
		СтрокаТаблицы.Выбрать 		  = Истина;
		СтрокаТаблицы.ВыгружатьСписки = Истина;
	КонецЦикла; 
    
КонецПроцедуры

&НаКлиенте
Процедура КолонкиСнятьВсе(Команда)
    
    Для каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл			
		СтрокаТаблицы.Выбрать 		  = Ложь;
		СтрокаТаблицы.ВыгружатьСписки = Ложь;
	КонецЦикла; 
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабличныйДокумент(Команда)
    
    ОбновитьТабличныйДокументСервер();
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ТабличныйДокумент);
    
КонецПроцедуры // ОбновитьТабличныйДокумент()

#КонецОбласти

#Область ОбработчикиКомандПримечания

&НаКлиенте
Функция ПоказатьОбластьПримечания(ЕстьПримечание, ТекущаяОбласть, Область)

	Если ЕстьПримечание Тогда
		ТекущаяОбласть = Область;
	Иначе
		ТекстСообщения = НСтр("ru = 'Примечание не найдено.'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;

КонецФункции // ПоказатьОбластьПримечания()

&НаКлиенте
Функция ПоискОбластиВниз(ЕстьПримечание, нТекКолонки, нТекСтроки)

    Пока Не ЕстьПримечание И нТекСтроки <= ТабличныйДокумент.ВысотаТаблицы Цикл    	
        
        Пока Не ЕстьПримечание И нТекКолонки <= ТабличныйДокумент.ШиринаТаблицы Цикл			
            
            ТекОбласть = ТабличныйДокумент.Область("R" + Формат(нТекСтроки, "ЧГ=") + "C" + Формат(нТекКолонки, "ЧГ="));
    		ЕстьПримечание = Не ПустаяСтрока(ТекОбласть.Примечание.Текст);			
    		нТекКолонки = нТекКолонки + 1;
            
    	КонецЦикла;
        
        нТекСтроки  = нТекСтроки + 1;
    	нТекКолонки = 1;        
        
    КонецЦикла;
    
    Возврат ТекОбласть;

КонецФункции // ПоискОбластиВниз()

&НаКлиенте
Функция ПоискОбластиВверх(ЕстьПримечание, нТекКолонки, нТекСтроки)

    Пока Не ЕстьПримечание И нТекСтроки > 0 Цикл
    	
    	Пока Не ЕстьПримечание И нТекКолонки > 0 Цикл			
            
            ТекОбласть = ТабличныйДокумент.Область("R" + Формат(нТекСтроки, "ЧГ=") + "C" + Формат(нТекКолонки, "ЧГ="));
    		ЕстьПримечание = Не ПустаяСтрока(ТекОбласть.Примечание.Текст);			
    		нТекКолонки = нТекКолонки - 1;
            
        КонецЦикла;
        
        нТекСтроки = нТекСтроки - 1;
        
        нТекКолонки = ТабличныйДокумент.ШиринаТаблицы;
        
    КонецЦикла;
    
    Возврат ТекОбласть;

КонецФункции // ПоискОбластиВверх()

&НаКлиенте
Процедура ПримечаниеСледующее(Команда)
    
    ТД = Элементы.ТабличныйДокумент;
    
    исхТекКолонки = ТД.ТекущаяОбласть.Лево;
    исхТекСтроки  = ТД.ТекущаяОбласть.Верх;
    
    нКонКолонки = ТабличныйДокумент.ШиринаТаблицы;
    нКонСтроки  = ТабличныйДокумент.ВысотаТаблицы;
    
    ИсходнаяВНачалеДокумента = исхТекКолонки = 1 И исхТекСтроки = 1;
    
    нТекКолонки = ТД.ТекущаяОбласть.Лево + 1;
    нТекСтроки  = ТД.ТекущаяОбласть.Верх;
    
    ЕстьПримечание = Ложь;
    
    Область = ПоискОбластиВниз(ЕстьПримечание, нТекКолонки, нТекСтроки);
    Если Не ЕстьПримечание И Не ИсходнаяВНачалеДокумента Тогда
        нТекСтроки  = 1;
        нТекКолонки = 1;
        Пока Не ЕстьПримечание И (нТекСтроки < исхТекСтроки ИЛИ нТекКолонки < исхТекКолонки) Цикл
            Область = ПоискОбластиВниз(ЕстьПримечание, нТекКолонки, нТекСтроки);
            Если нТекСтроки > нКонСтроки Тогда
                Прервать;       
            КонецЕсли;
        КонецЦикла;       
    КонецЕсли;
    
    ПоказатьОбластьПримечания(ЕстьПримечание, ТД.ТекущаяОбласть, Область);
        
КонецПроцедуры // ПримечаниеСледующее()

&НаКлиенте
Процедура ПримечаниеПредыдущее(Команда)
    
    ТД = Элементы.ТабличныйДокумент;
    
    исхТекКолонки = ТД.ТекущаяОбласть.Лево;
    исхТекСтроки  = ТД.ТекущаяОбласть.Верх;
    
    нКонКолонки = ТабличныйДокумент.ШиринаТаблицы;
    нКонСтроки  = ТабличныйДокумент.ВысотаТаблицы;
    
    ИсходнаяВКонцеДокумента  = исхТекКолонки = нКонКолонки И исхТекСтроки = нКонСтроки;
    
    нТекКолонки = ТД.ТекущаяОбласть.Лево - 1;
    нТекСтроки  = ТД.ТекущаяОбласть.Верх;
    
    ЕстьПримечание = Ложь;
    
    Область = ПоискОбластиВверх(ЕстьПримечание, нТекКолонки, нТекСтроки);
    Если Не ЕстьПримечание И Не ИсходнаяВКонцеДокумента Тогда
        нТекСтроки  = нКонСтроки;
        нТекКолонки = нКонКолонки;
        Пока Не ЕстьПримечание И (нТекСтроки > исхТекСтроки ИЛИ нТекКолонки > исхТекКолонки) Цикл
            Область = ПоискОбластиВверх(ЕстьПримечание, нТекКолонки, нТекСтроки);
            Если нТекСтроки = 0 Тогда
                Прервать;       
            КонецЕсли;
        КонецЦикла;        
    КонецЕсли;
    
    ПоказатьОбластьПримечания(ЕстьПримечание, ТД.ТекущаяОбласть, Область);
        
КонецПроцедуры // ПримечаниеПредыдущее()

#КонецОбласти

#Область ОбработчикиКомандРезультатЗагрузки

&НаКлиенте
Процедура ОбъектыВыбратьВсе(Команда)
    
    Для каждого СтрокаТаблицы Из Объект.ОбъектыЗагруженные Цикл			
		СтрокаТаблицы.Выбрать = Истина;
	КонецЦикла;
    
КонецПроцедуры // ОбъектыВыбратьВсе()

&НаКлиенте
Процедура ОбъектыСнятьВсе(Команда)
    
    Для каждого СтрокаТаблицы Из Объект.ОбъектыЗагруженные Цикл			
		СтрокаТаблицы.Выбрать = Ложь;
	КонецЦикла;
    
КонецПроцедуры // ОбъектыСнятьВсе()

&НаКлиенте
Процедура ОбъектыУдалитьНепосредственно(Команда)
    
    Оповещение = Новый ОписаниеОповещения("УдалитьОбъектыОкончание", ЭтотОбъект); 
	ПоказатьВопрос(Оповещение, НСтр("ru='Будут удалены выбранные объекты из базы. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет); 
    
КонецПроцедуры // УдалитьОбъектыНепосредственно()

&НаКлиенте
Процедура ОбъектыОчистить(Команда)
    
    Объект.ОбъектыЗагруженные.Очистить();
    
КонецПроцедуры // ОбъектыСнятьВсе()

#КонецОбласти

#Область ОбработчикиКомандОткрытияСписков

&НаКлиенте
Процедура ОткрытьСправочник(Команда)
    
	Если ЗначениеЗаполнено(Объект.ИмяСправочника) Тогда
		ОткрытьФорму("Справочник." + Объект.ИмяСправочника + ".ФормаСписка");   
    КонецЕсли;
           
КонецПроцедуры // ОткрытьСправочник()

&НаКлиенте
Процедура ОткрытьРегистрСведений(Команда)
    
    Если ЗначениеЗаполнено(Объект.ИмяРегистраСведений) Тогда
        ОткрытьФорму("РегистрСведений." + Объект.ИмяРегистраСведений + ".ФормаСписка");
    КонецЕсли;
    
КонецПроцедуры // ОткрытьРегистрСведений()

&НаКлиенте
Процедура ОткрытьСписокПланаСчетов(Команда)
    
	Если ЗначениеЗаполнено(Объект.ИмяПланаСчетов) Тогда
		ОткрытьФорму("ПланСчетов." + Объект.ИмяПланаСчетов + ".ФормаСписка");   
    КонецЕсли;
           
КонецПроцедуры // ОткрытьСписокПланаСчетов()

#КонецОбласти

&НаКлиенте
Процедура КонвертироватьНастройкиОбработки(Команда)
	
	КонвертироватьНастройкиОбработкиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции	

#Область УправлениеВнешнимВидомФормы	

&НаСервере
Процедура УправлениеВидимостьюДоступностью()

    ЭтоРежимСправочник      = Объект.РежимЗагрузки = "Справочник";
    ЭтоРежимРегистрСведений = Объект.РежимЗагрузки = "РегистрСведений";
    ЭтоРежимТабличнаяЧасть  = Объект.РежимЗагрузки = "ТабличнаяЧасть";
    ЭтоРежимРучнаяОперация  = Объект.РежимЗагрузки = "РучнаяОперация";
	ЭтоРежимПланСчетов	    = Объект.РежимЗагрузки = "ПланСчетов";
    
    Элементы.Добавить.Видимость = ЭтоРежимТабличнаяЧасть;
    
	Если ЭтоРежимСправочник Тогда
		Элементы.СтраницыДополнениеРежимаЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкаВСправочник;        
	ИначеЕсли ЭтоРежимТабличнаяЧасть Тогда
		Элементы.СтраницыДополнениеРежимаЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкаВТабличнуюЧасть; 
	ИначеЕсли ЭтоРежимРегистрСведений Тогда
		Элементы.СтраницыДополнениеРежимаЗагрузки.ТекущаяСтраница = Элементы.СтраницаЗагрузкаВРегистрСведений; 
    ИначеЕсли ЭтоРежимРучнаяОперация Тогда
		Элементы.СтраницыДополнениеРежимаЗагрузки.ТекущаяСтраница = Элементы.СтраницаРучныеОперации;
    ИначеЕсли ЭтоРежимПланСчетов Тогда
		Элементы.СтраницыДополнениеРежимаЗагрузки.ТекущаяСтраница = Элементы.СтраницаПланыСчетов;	
	Иначе
        Элементы.СтраницыДополнениеРежимаЗагрузки.ТекущаяСтраница = Элементы.СтраницаИнформация;
    КонецЕсли;
    
    Элементы.НеСоздаватьНовыхЭлементов.Видимость            = ЭтоРежимСправочник;
    Элементы.ТаблицаРеквизитовПолеПоиска.Видимость          = ЭтоРежимСправочник ИЛИ ЭтоРежимПланСчетов;
    Элементы.ТаблицаРеквизитовГруппаИспользование.Видимость = ЭтоРежимСправочник;
    Элементы.ЗаполнитьТабДокИзСправочника.Видимость         = ЭтоРежимСправочник;
    Элементы.ЗаполнитьТабДокИзРегистра.Видимость            = ЭтоРежимРегистрСведений;
	Элементы.ЗаполнитьТабДокИзТабличнойЧасти.Видимость 		= ЭтоРежимТабличнаяЧасть;
	Элементы.ЗаполнитьТабДокИзРучнойОперации.Видимость 		= ЭтоРежимРучнаяОперация;
	Элементы.ЗаполнитьТабДокИзПланаСчетов.Видимость 		= ЭтоРежимПланСчетов;
    
    Элементы.ЗамещатьСуществующиеЗаписи.Видимость = ЭтоРежимРегистрСведений;
    Элементы.ОчищатьРегистр.Видимость             = ЭтоРежимРегистрСведений;
    Если ЭтоРежимРегистрСведений И Объект.ОчищатьРегистр Тогда
        Элементы.Загрузить.Заголовок = НСтр("ru = 'Очистить и загрузить'");   
    Иначе
        Элементы.Загрузить.Заголовок = НСтр("ru = 'Загрузить'");
    КонецЕсли;    
    
    Элементы.ТаблицаРеквизитовСвязьАналитики_ПредставлениеСтатьиОборотов.Видимость = ЭтоРежимТабличнаяЧасть;
        
    Элементы.СсылкаОбъектаТч.ТолькоПросмотр = ПустаяСтрока(Объект.ОбъектМетаданных);
	Элементы.СсылкаОбъектаРо.ТолькоПросмотр = ПустаяСтрока(Объект.ОбъектМетаданных);

    Если ЗагрузкаИзДругойФормы Тогда        
        Элементы.РежимЗагрузки.Доступность 			= Ложь;
        Элементы.ИмяСправочника.ТолькоПросмотр      = Истина;
		Элементы.ОткрытьСправочник.Видимость        = Ложь;
        Элементы.ИмяРегистраСведений.ТолькоПросмотр = Истина;
        Элементы.ОбъектМетаданныхТч.ТолькоПросмотр  = Истина;
        Элементы.СсылкаОбъектаТч.ТолькоПросмотр     = Истина;
        Элементы.ИмяТабличнойЧасти.ТолькоПросмотр   = Истина;
        Элементы.ОбъектМетаданныхРо.ТолькоПросмотр  = Истина;
        Элементы.СсылкаОбъектаРо.ТолькоПросмотр     = Истина;
		Элементы.ИмяПланаСчетов.ТолькоПросмотр      = Истина;
	КонецЕсли;
	
	// Тест: Таблица отборов только для документов бит_ФормаВводаБюджета.
	Элементы.ТаблицаОтбор.Видимость = Объект.ОбъектМетаданных = "Документ.бит_ФормаВводаБюджета";
	Если Объект.РежимЗагрузки = "ТабличнаяЧасть" 
		И Объект.ОбъектМетаданных = "Документ.бит_ДополнительныеУсловияПоДоговору" 
		И (Объект.ИмяТабличнойЧасти = "ГрафикПлатежей" 
		ИЛИ Объект.ИмяТабличнойЧасти = "ГрафикНачислений") Тогда
		Элементы.Добавить.Видимость = Ложь;
	КонецЕсли;	
		
КонецПроцедуры // УправлениеВидимостьюДоступностью()

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()

	// Вся строка.
	МассивОформляемыхВсяСтрока = Новый Массив;
	МассивОформляемыхВсяСтрока.Добавить("ТаблицаРеквизитов");
		
	// Цвет текста невыбранной строки.
	СтруктураОформления = Новый Структура("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	СтруктураУсловия 	= бит_РаботаСДиалогамиСервер.ПростоеУсловие("ТаблицаРеквизитов.Выбрать", Ложь);
	СтруктураУсловногоОформления = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей", 
									СтруктураОформления, СтруктураУсловия, МассивОформляемыхВсяСтрока);
	бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, "ЦветТекстаНевыбраннойСтроки", СтруктураУсловногоОформления);				
	
	// Цвет фона для обязательных строк.
	СтруктураОформления = Новый Структура("ЦветФона", ЦветаСтиля.бит_ЦветФонаПредупреждения);
	СтруктураУсловия 	= бит_РаботаСДиалогамиСервер.ПростоеУсловие("ТаблицаРеквизитов.Обязательный", Истина);
	СтруктураУсловногоОформления = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей", 
									СтруктураОформления, СтруктураУсловия, МассивОформляемыхВсяСтрока);
	бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, "ЦветФонаОбязательнойСтроки", СтруктураУсловногоОформления);				
	
	// Полужирный шрифт для обязательных полей.
	СтруктураОформления = Новый Структура("Шрифт", ШрифтыСтиля.бит_ОсновноеИтоговоеЗначение);
	СтруктураУсловия 	= бит_РаботаСДиалогамиСервер.ПростоеУсловие("ТаблицаРеквизитов.Обязательный", Истина);
	МассивОформляемых   = Новый Массив;
	МассивОформляемых.Добавить("ТаблицаРеквизитовПредставлениеРеквизита");
	СтруктураУсловногоОформления = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей", 
									СтруктураОформления, СтруктураУсловия, МассивОформляемых);
	бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, "ШрифтОбязательныхПолей", СтруктураУсловногоОформления);				

	// Доступность изменения (через параметр "только просмотр") полей поиска.
	СтруктураОформления = Новый Структура("ТолькоПросмотр", Истина);
	СтруктураУсловия 	= бит_РаботаСДиалогамиСервер.ПростоеУсловие("ТаблицаРеквизитов.МожетБытьПолемПоиска", Ложь);
	МассивОформляемых   = Новый Массив;
	МассивОформляемых.Добавить("ТаблицаРеквизитовПолеПоиска");
	СтруктураУсловногоОформления = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей", 
									СтруктураОформления, СтруктураУсловия, МассивОформляемых);
	бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, "ТолькоПросмотрПолейПоиска", СтруктураУсловногоОформления);				
	
	// Цвет текста колонок в режиме отличном от "Искать".
	СтруктураОформления = Новый Структура("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	СтруктураУсловия 	= бит_РаботаСДиалогамиСервер.ПростоеУсловие("ТаблицаРеквизитов.РежимЗагрузки", "Искать", ВидСравненияКомпоновкиДанных.НеРавно);
	МассивОформляемых   = Новый Массив;
	МассивОформляемых.Добавить("ТаблицаРеквизитовИскатьПо");
	МассивОформляемых.Добавить("ТаблицаРеквизитовСвязьПоВладельцу");
	МассивОформляемых.Добавить("ТаблицаРеквизитовСвязьПоТипу");
	МассивОформляемых.Добавить("ТаблицаРеквизитовЭлементСвязиПоТипу");
	СтруктураУсловногоОформления = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей", 
									СтруктураОформления, СтруктураУсловия, МассивОформляемых);
	бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, "ЦветТекстаПриНеИскать", СтруктураУсловногоОформления);				

	// Видимость колонок в режиме "Вычислять".
	СтруктураОформления = Новый Структура("Видимость", Ложь);
	СтруктураУсловия 	= бит_РаботаСДиалогамиСервер.ПростоеУсловие("ТаблицаРеквизитов.РежимЗагрузки", "Вычислять");
	СтруктураУсловногоОформления = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей", 
									СтруктураОформления, СтруктураУсловия, МассивОформляемых);
	бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, "ВидимостьПриВычислить", СтруктураУсловногоОформления);				

	// Видимость колонок в режиме отличном от "Вычислять".
	СтруктураОформления = Новый Структура("Видимость", Ложь);
	СтруктураУсловия 	= бит_РаботаСДиалогамиСервер.ПростоеУсловие("ТаблицаРеквизитов.РежимЗагрузки", "Вычислять", ВидСравненияКомпоновкиДанных.НеРавно);
	МассивОформляемых   = Новый Массив;
	МассивОформляемых.Добавить("ТаблицаРеквизитовВыражение");
	СтруктураУсловногоОформления = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей", 
									СтруктураОформления, СтруктураУсловия, МассивОформляемых);
	бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, "ВидимостьПриНеВычислить", СтруктураУсловногоОформления);				
	
	// Доступность колонок в режиме "Устанавливать".
	СтруктураОформления = Новый Структура("Доступность", Ложь);
	СтруктураУсловия 	= бит_РаботаСДиалогамиСервер.ПростоеУсловие("ТаблицаРеквизитов.РежимЗагрузки", "Устанавливать");
	МассивОформляемых   = Новый Массив;
	МассивОформляемых.Добавить("ТаблицаРеквизитовСвязьПоВладельцу");
	СтруктураУсловногоОформления = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей", 
									СтруктураОформления, СтруктураУсловия, МассивОформляемых);
	бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, "ДоступностьПриУстанавливать", СтруктураУсловногоОформления);				
			
	// Видимость колонки нумерации.
	СтруктураОформления = Новый Структура("Видимость", Ложь);
	СтруктураУсловия 	= бит_РаботаСДиалогамиСервер.ПростоеУсловие("Объект.РучнаяНумерацияКолонокТабличногоДокумента", Ложь);
	МассивОформляемых   = Новый Массив;
	МассивОформляемых.Добавить("ТаблицаРеквизитовНомерКолонки");
	СтруктураУсловногоОформления = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей", 
									СтруктураОформления, СтруктураУсловия, МассивОформляемых);
	бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, "ВидимостьНумерации", СтруктураУсловногоОформления);				
					
КонецПроцедуры // УстановитьУсловноеОформлениеФормы()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбщегоНазначения	

&НаСервере
Процедура ПроверитьСервер()

    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТР = РеквизитФормыВЗначение("ТаблицаРеквизитов");
	ТО = РеквизитФормыВЗначение("ТаблицаОтбор");
    ОбработкаОбъект.ПроверитьДанныеВТабличномДокументе(ТабличныйДокумент, ТР, ТО);
   
КонецПроцедуры // ПроверитьСервер()

&НаСервере
Функция КонтрольЗаполненияСтрокиСервер(нВерх, ВыводитьСообщения = Истина)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТО = РеквизитФормыВЗначение("ТаблицаОтбор");
	ТР = РеквизитФормыВЗначение("ТаблицаРеквизитов");
	Возврат ОбработкаОбъект.ДанныеСтроки(ТабличныйДокумент, нВерх, ТР, ТО, , ВыводитьСообщения);	
        	
КонецФункции // КонтрольЗаполненияСтрокиСервер()

&НаСервере
Функция ПолучитьПараметрыВыбораЗначения(Значение, ТекущаяОбластьЛево, ТекущаяОбластьВерх)

    ПараметрыВыбораЗначения = Новый Структура;
		
	НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("НомерКолонки", ТекущаяОбластьЛево));
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ТекущаяКолонка = НайденныеСтроки[0];
		ИдКолонки = ТекущаяКолонка.ПолучитьИдентификатор();
	Иначе
		ТекущаяКолонка = Неопределено;
		ИдКолонки = Неопределено;
	КонецЕсли;
	    
    ВыборГруппы        			= Ложь;
    ЭтоСоставнойТип    			= Ложь;
    ЭтоПримитивныйТип  			= Ложь;
	ЭтоСистемноеПеречисление    = Ложь;
    СвязьПоТипу        			= Неопределено;
    СвязьПоВладельцу   			= Неопределено;
    ЭлементСвязиПоТипу 			= Неопределено;
    ИмяФормыВыбора     			= "";
	Типы			   			= Неопределено;
	ИскатьПо		   			= Неопределено;
	СвязьАналитики_ИмяАналитики = Неопределено;	
	    
    Менеджер = Неопределено;
    
    Если ТекущаяКолонка <> Неопределено  Тогда
        
        ВыборГруппы = ТекущаяКолонка.ИмяРеквизита = "Родитель";
        
        Типы 						= ТекущаяКолонка.ОписаниеТипов;
		ИскатьПо 					= ТекущаяКолонка.ИскатьПо;
		СвязьАналитики_ИмяАналитики = ТекущаяКолонка.СвязьАналитики_ИмяАналитики;
        
		ТекущаяСтрока = КонтрольЗаполненияСтрокиСервер(ТекущаяОбластьВерх, Ложь);			
        
        Если Не ПустаяСтрока(ТекущаяКолонка.СвязьПоТипу) Тогда
        	Если ТипЗНЧ(ТекущаяКолонка.СвязьПоТипу) = Тип("Строка") Тогда
        		ТекущаяСтрока.Свойство(ТекущаяКолонка.СвязьПоТипу, СвязьПоТипу);
        	Иначе
        		СвязьПоТипу = ТекущаяКолонка.СвязьПоТипу;
        	КонецЕсли;
        КонецЕсли;        
        
        Если Не ПустаяСтрока(ТекущаяКолонка.СвязьПоВладельцу) Тогда
            СвязьПоВладельцу = ТекущаяКолонка.СвязьПоВладельцу;
        КонецЕсли;
        
        ЭлементСвязиПоТипу = ?(ТекущаяКолонка.ЭлементСвязиПоТипу = 0, 1, ТекущаяКолонка.ЭлементСвязиПоТипу);
		        
        ЭтоСоставнойТип = Типы.Типы().Количество() > 1;
        
        Если Не ЭтоСоставнойТип Тогда
            
            ТекТип = Типы.Типы()[0];       
            
            ЭтоПримитивныйТип = бит_ОбщегоНазначения.ЭтоПримитивныйТип(ТекТип);
			
			Если ТекТип = Тип("ВидСчета") Тогда			
				ЭтоСистемноеПеречисление  = Истина;			
			КонецЕсли;			
            
            Если Не ЭтоПримитивныйТип И Не ЭтоСистемноеПеречисление Тогда
            
                Если ТекТип = Неопределено Тогда
                    Менеджер         = Неопределено;
                    СвязьПоТипу      = Неопределено;
                    СвязьПоВладельцу = Неопределено;
                Иначе        
                    МетаОбъекта  = Метаданные.НайтиПоТипу(ТекТип);
                    ИмяКоллекции = бит_ОбщегоНазначения.ОпределитьИмяКоллекции(МетаОбъекта);
                    Менеджер     = бит_ОбщегоНазначения.ПолучитьМенеджер(ИмяКоллекции, МетаОбъекта.Имя);            
            	КонецЕсли;
                
                Если Менеджер <> Неопределено Тогда
                    
                    Если Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда                    
                        Если ТекущаяКолонка.ИмяРеквизита = "Родитель" Тогда
                    		ИмяФормыВыбора = "Справочник." + МетаОбъекта.Имя + ".ФормаВыбораГруппы";
                        Иначе
                    		ИмяФормыВыбора = "Справочник." + МетаОбъекта.Имя + ".ФормаВыбора";
                    	КонецЕсли;                	            	
                    Иначе                	
                    	ИмяФормыВыбора = ИмяКоллекции + "." + МетаОбъекта.Имя + ".ФормаВыбора";                	
                    КонецЕсли;
                                            
                КонецЕсли;
            
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
    //----------------------------------------------------------------------
    // Связь по владельцу
    СтрОтборПоВладельцу = ПолучитьПараметрыСвязиПоВладельцу(СвязьПоВладельцу, ТаблицаРеквизитов);
        
    //----------------------------------------------------------------------
    // Возвращаемые параметры выбора
	
	ПростойВыбор = СвязьПоТипу = Неопределено И СвязьПоВладельцу = Неопределено И Не ВыборГруппы И Не ЭтоСистемноеПеречисление;
        
    ПараметрыВыбораЗначения.Вставить("ПростойВыбор"        		  , ПростойВыбор);
    ПараметрыВыбораЗначения.Вставить("ВыборГруппы"         		  , ВыборГруппы);
    ПараметрыВыбораЗначения.Вставить("ЭтоСоставнойТип"     		  , ЭтоСоставнойТип);
	ПараметрыВыбораЗначения.Вставить("ЭтоСистемноеПеречисление"   , ЭтоСистемноеПеречисление);
    ПараметрыВыбораЗначения.Вставить("СвязьПоТипу"         		  , СвязьПоТипу);
    ПараметрыВыбораЗначения.Вставить("СвязьПоВладельцу"    		  , СвязьПоВладельцу);
    ПараметрыВыбораЗначения.Вставить("СтрОтборПоВладельцу" 		  , СтрОтборПоВладельцу);
    ПараметрыВыбораЗначения.Вставить("ЭлементСвязиПоТипу"  		  , ЭлементСвязиПоТипу);
    ПараметрыВыбораЗначения.Вставить("ИмяФормыВыбора"      		  , ИмяФормыВыбора);
	ПараметрыВыбораЗначения.Вставить("ИдКолонки"      	   		  , ИдКолонки);
	ПараметрыВыбораЗначения.Вставить("ОписаниеТипов"       		  , Типы);
	ПараметрыВыбораЗначения.Вставить("ИскатьПо"       	   		  , ИскатьПо);
	ПараметрыВыбораЗначения.Вставить("СвязьАналитики_ИмяАналитики", СвязьАналитики_ИмяАналитики);
            
    Возврат ПараметрыВыбораЗначения;
    
КонецФункции // ПолучитьПараметрыВыбораЗначения()

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьПараметрыСвязиПоВладельцу(СвязьПоВладельцу, ТаблицаРеквизитов)

    СтрОтборПоВладельцу = Неопределено;
    
    Если ТипЗНЧ(СвязьПоВладельцу) = Тип("Строка") Тогда
        
        Если Не ПустаяСтрока(СвязьПоВладельцу) Тогда
        
            МассивВладельцев = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(СвязьПоВладельцу,  ",");
            
            СтрОтборПоВладельцу = Новый Структура();
            
            Для каждого ЭлВл Из МассивВладельцев Цикл
                
            	СтрокиВладельца = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", СвязьПоВладельцу));
                Если СтрокиВладельца <> Неопределено Тогда
                    МассивВладельцев = Новый Массив;
                    Для каждого ТекВл Из СтрокиВладельца Цикл
                        МассивВладельцев.Добавить(ТекВл.ЗначениеПоУмолчанию);               
                    КонецЦикла;    
                КонецЕсли;
            
            КонецЦикла;
            
            СтрОтборПоВладельцу.Вставить("Владелец", МассивВладельцев);
        
        КонецЕсли;
    
    ИначеЕсли ЗначениеЗаполнено(СвязьПоВладельцу) Тогда
        
        СтрОтборПоВладельцу = Новый Структура("Владелец", СвязьПоВладельцу);
                
    КонецЕсли;
    
    Возврат СтрОтборПоВладельцу;

КонецФункции // ПолучитьПараметрыСвязиПоВладельцу()

&НаСервере
Функция ПолучитьЗначениеРеквизитаОбъекта(СсылкаОбъекта, ИмяРеквизита)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаОбъекта, ИмяРеквизита);

КонецФункции // ПолучитьЗначениеРеквизитаОбъекта()

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренумероватьКолонки(ТаблицаРеквизитов)
    
    НомерКолонки = 1;
    
	Для каждого ТекРеквизит Из ТаблицаРеквизитов Цикл
        
        Если ТекРеквизит.Выбрать Тогда
            
            Если ТекРеквизит.НомерКолонки <> НомерКолонки Тогда
				ТекРеквизит.НомерКолонки = НомерКолонки;
			КонецЕсли;
            
            НомерКолонки = НомерКолонки + 1;
            
            Если ТекРеквизит.РежимЗагрузки = "Устанавливать" Тогда
                ТекРеквизит.РежимЗагрузки = "Искать";           
            КонецЕсли;
            
        Иначе
            
            ТекРеквизит.НомерКолонки = 0;
            
            Если ТекРеквизит.РежимЗагрузки = "Искать" Тогда
                ТекРеквизит.РежимЗагрузки = "Устанавливать";           
            КонецЕсли;           
            
		КонецЕсли;
				
	КонецЦикла;
    
КонецПроцедуры // ПеренумероватьКолонки()

#Область УдалениеОбъектов
	
&НаКлиенте
Процедура УдалитьОбъектыОкончание(Ответ, ДополнительныеДанные) Экспорт
   
    Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда		
		Возврат;                                    		
    КонецЕсли;
    
    УдалитьОбъектыСервер();
    
КонецПроцедуры // УдалитьОбъектыОкончание()

&НаСервере
Процедура УдалитьОбъектыСервер()
    
    Сч = Объект.ОбъектыЗагруженные.Количество() - 1;
    Пока Сч >= 0 Цикл
        
        СтрокаРезультат = Объект.ОбъектыЗагруженные[Сч];
        Если СтрокаРезультат.Выбрать Тогда
        
            ТекОбъект = СтрокаРезультат.ОбъектЗагрузки.ПолучитьОбъект();
						
			БлокировкаВыполнена = Истина;			
			Попытка			
				// Блокировка объекта от изменения другими режимами или пользователями.
				ТекОбъект.Заблокировать();				
			Исключение
				БлокировкаВыполнена = Ложь;
				// Предупреждение для журнала регистрации.
				СобытиеЖурналаРегистрации = НСтр("ru = 'Удаление объекта не выполнено.'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение, , ТекОбъект, ОписаниеОшибки());
			КонецПопытки;

			// Пропустить удаление объекта, если он заблокирован.
			Если БлокировкаВыполнена Тогда
				// Удаление объекта из базы.
				ТекОбъект.Удалить();
				// Удаление объекта из таблицы на форме.
				Объект.ОбъектыЗагруженные.Удалить(СтрокаРезультат);	
			КонецЕсли;            
        
        КонецЕсли;        
        
        Сч = Сч - 1;
               
    КонецЦикла;
    
    ТекстСообщения = НСтр("ru='Удаление завершено'");
    ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры // УдалитьОбъектыСервер()

#КонецОбласти

#КонецОбласти

#Область ФайлыВыгрузка

// Функция формирует табличный документ для выгрузки в файл.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ для выгрузки в файл.
//
&НаКлиенте
Функция ПолучитьТабДокДляСохраненияВФайл()

    СохраняемыйТабличныйДокумент = ТабличныйДокумент;
    НедоступнаяОбласть = СохраняемыйТабличныйДокумент.НайтиТекст("недоступно");
    Пока НедоступнаяОбласть <> Неопределено Цикл   
        // Очистка оформления для недоступных полей.
        НедоступнаяОбласть.Текст = "";
        НедоступнаяОбласть.ЦветТекста = АвтоЦвет;//Новый Цвет();
        НедоступнаяОбласть = СохраняемыйТабличныйДокумент.НайтиТекст("недоступно");          
    КонецЦикла;
    
    Возврат СохраняемыйТабличныйДокумент;

КонецФункции // ПолучитьТабДокДляСохраненияВФайл()

// Функция определяет структуру полей для загрузки/выгрузки.
//
// Возвращаемое значение:
//  Структура.
//
&НаСервере
Функция ОпределитьСтруктуруПолей() 
    
    Если Объект.РежимЗагрузки = "Справочник" Тогда            
        СтруктураОбъекта = Новый Структура("ВидОбъекта, ИмяОбъекта, ИмяТабличнойЧасти", "Справочники", Объект.ИмяСправочника);
    ИначеЕсли Объект.РежимЗагрузки = "РегистрСведений" Тогда
        СтруктураОбъекта = Новый Структура("ВидОбъекта, ИмяОбъекта, ИмяТабличнойЧасти", "РегистрыСведений", Объект.ИмяРегистраСведений);
    ИначеЕсли Объект.РежимЗагрузки = "ТабличнаяЧасть" Тогда
        СтруктураОбъекта = Новый Структура("ВидОбъекта, ИмяОбъекта, ИмяТабличнойЧасти", "", Объект.ОбъектМетаданных, Объект.ИмяТабличнойЧасти);        
    КонецЕсли;
        
    МассивИсключений = Новый Массив;
           
    СтруктураСчетовСубконто = Новый Структура;
	
	ТР = РеквизитФормыВЗначение("ТаблицаРеквизитов", Тип("ТаблицаЗначений"));	
	СтруктураПолей = бит_ОбменДаннымиЭксельСервер.ОпределитьСтруктуруПолей(СтруктураОбъекта
                                                                , МассивИсключений
                                                                , СтруктураСчетовСубконто
                                                                , ТР);
	
    МассивСкрытых = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("Скрывать", Истина));
    Для каждого СкрытоеПоле Из МассивСкрытых Цикл
        СтруктураПолей.Удалить(СкрытоеПоле.ИмяРеквизита);
    КонецЦикла;
                                                                
    Возврат СтруктураПолей;  	
	
КонецФункции // ОпределитьСтруктуруПолей()

// Функция формирует структуру выгружаемых полей 
// и заполняет при необходимости (ВыгружатьДанные = Истина) таблицу данных на форме.
//
// Параметры:
//  ВыгружатьДанные - Булево.
//
// Возвращаемое значение:
//  Структура - структура выгружаемых полей.
//
&НаСервере
Функция ПодготовитьДанныеДляВыгрузкиИзТабДок(ВыгружатьДанные)
	
	СтруктураНастроекКолонок = Новый Структура;
	СтруктураНастроекКолонок.Вставить("СтруктураПолей", ОпределитьСтруктуруПолей());
	ТО = РеквизитФормыВЗначение("ТаблицаОтбор", Тип("ТаблицаЗначений"));
	СтруктураНастроекКолонок.Вставить("ТаблицаОтборов", Новый ХранилищеЗначения(ТО));	
	    
    Если ВыгружатьДанные Тогда
        
        // Количество строк и колонок табличного документа.
        КоличествоСтрок   = ТабличныйДокумент.ВысотаТаблицы; 
        КоличествоКолонок = ТабличныйДокумент.ШиринаТаблицы;
        
        // Список колонок по табличному документу.
        СписокКолонок = Новый СписокЗначений;
        нСтроки = 1;
        Для нКолонки = 1 По КоличествоКолонок Цикл
            Область = ТабличныйДокумент.Область("R" + Формат(нСтроки, "ЧГ=") + "C" + нКолонки);
            СписокКолонок.Добавить(Область.Расшифровка, Область.Текст);
        КонецЦикла;   
        
        // Добавление реквизита формы - ТаблицаДанных. 
        МассивУдаляемых = Новый Массив();
        Для каждого ТекущийРеквизитФормы Из ПолучитьРеквизиты() Цикл
            Если ТекущийРеквизитФормы.Имя = "ТаблицаДанных" Тогда
                МассивУдаляемых.Добавить("ТаблицаДанных");           
            	Прервать;        
            КонецЕсли;   
        КонецЦикла;
        МассивДобавляемых = Новый Массив();
        МассивДобавляемых.Добавить(Новый РеквизитФормы("ТаблицаДанных", Новый ОписаниеТипов("ТаблицаЗначений")));
        Для каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
            Если Не СтрокаТаблицы.Выбрать Тогда
                Продолжить;         
			КонецЕсли;
			НовыйРеквизит = Новый РеквизитФормы(СтрокаТаблицы.ИмяРеквизита, СтрокаТаблицы.ОписаниеТипов, "ТаблицаДанных");
        	МассивДобавляемых.Добавить(НовыйРеквизит);
        КонецЦикла;
        ИзменитьРеквизиты(МассивДобавляемых, МассивУдаляемых);
        
        ЭтотОбъект.ТаблицаДанных.Очистить();   
        
        // Проверка
        Если СписокКолонок[0].Значение = Неопределено Тогда
            ТекстСообщения = НСтр("ru = 'Не удалось выгрузить табличный документ.'");
            ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);      
        КонецЕсли;
        
        // Заполнение таблицы данных.
        Для нСтроки = 2 По КоличествоСтрок Цикл
            Для нКолонки = 1 По КоличествоКолонок Цикл        
                Область = ТабличныйДокумент.Область("R" + Формат(нСтроки, "ЧГ=") + "C" + нКолонки);
                Если нКолонки = 1 Тогда
                    НовСтрока = ЭтотОбъект.ТаблицаДанных.Добавить();
                КонецЕсли;
                НовСтрока[СписокКолонок[нКолонки-1].Значение] = Область.Расшифровка;            
            КонецЦикла;        
        КонецЦикла;
    
    КонецЕсли;
    
    Возврат СтруктураНастроекКолонок;
  
КонецФункции // ПодготовитьДанныеДляВыгрузкиИзТабДок()

&НаКлиенте
Процедура ФайлExcelВыгрузитьСохранить(ПутьКФайлу, СохраняемыйТабличныйДокумент, ВыгружатьДанные)
           	
    ФайлНаДиске = Новый Файл(ПутьКФайлу);
           
    Если НРег(ФайлНаДиске.Расширение) = ".xls" Тогда		
		ТипТабДок = ТипФайлаТабличногоДокумента.XLS;               
    ИначеЕсли НРег(ФайлНаДиске.Расширение) = ".xlsx" Тогда        
        ТипТабДок =  ТипФайлаТабличногоДокумента.XLSX;          
	Иначе		
		Возврат;		
	КонецЕсли;
	
	СохраняемыйТабличныйДокумент.Записать(ПутьКФайлу, ТипТабДок);
	
	СтруктураНастроекКолонок = ПодготовитьДанныеДляВыгрузкиИзТабДок(ВыгружатьДанные);
		
	бит_ОбменДаннымиЭксельКлиентСервер.ВыгрузитьСохранитьШаблонВExcelКлиент(ПутьКФайлу, СтруктураНастроекКолонок);
        
КонецПроцедуры // ФайлExcelВыгрузитьСохранить()

#КонецОбласти

#Область ФайлыЗагрузка

// Процедура загружает данные файла в табличный документ.
//
&НаСервере
Процедура ФайлЗагрузитьНаСервере(РасширениеФайла, АдресХранилища)
    
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанные     = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайла); 
	
	ЗагружаемыйФайл = Новый Файл(ИмяВременногоФайла); 
	Если ЗагружаемыйФайл.Существует() Тогда // проверка существования файла.

		Если НРег(РасширениеФайла) = ".mxl" Тогда
			ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
		ИначеЕсли НРег(РасширениеФайла) = ".txt" Тогда
			ОбработкаОбъект.ПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент, ИмяВременногоФайла);
			ОформитьШапкуТабличногоДокумента();
		ИначеЕсли НРег(РасширениеФайла) = ".dbf" Тогда
			ОбработкаОбъект.ПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент, ИмяВременногоФайла);
		КонецЕсли;

	КонецЕсли;

	// Удаление временного файла.
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		СобытиеЖурналаРегистрации = НСтр("ru = 'Ошибка при удалении временного файла.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры // ФайлЗагрузитьНаСервере()

&НаСервере
Процедура ОчиститьТабДок()

    ТабличныйДокумент.Очистить();	

КонецПроцедуры // ОчиститьТабДок()

&НаСервере
Процедура ОформитьШапкуТабличногоДокумента()
    
    Если ТабличныйДокумент.ШиринаТаблицы <> 0 Тогда    
    
        Область = ТабличныйДокумент.Область("R1C" + 1 + ":R1C" + ТабличныйДокумент.ШиринаТаблицы);
        БылТекст = Не ПустаяСтрока(Область.Текст);
        
        Область.ЦветФона = ЦветаСтиля["ЦветФонаШапкиОтчета"];
        Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
        Область.Обвести(Линия, Линия, Линия, Линия);
		ШрифтЗаголовка = ШрифтыСтиля.бит_ОсновноеИтоговоеЗначение; // Полужирный
        Область.Шрифт  = ШрифтЗаголовка;
        
        СчКол = 1;
        Для каждого ТекущийРеквизит Из ТаблицаРеквизитов Цикл
            
            Если Не ТекущийРеквизит.Выбрать ИЛИ ТекущийРеквизит.Скрывать Тогда
                Продолжить;        
			КонецЕсли;
			
			ТипыРеквизита   = ТекущийРеквизит.ОписаниеТипов.Типы();
			КоличествоТипов = ТипыРеквизита.Количество();
            
            Если ТекущийРеквизит.Обязательный Тогда
            
                ОбластьКол = ТабличныйДокумент.Область(, СчКол, , СчКол);
                ОбластьКол.ЦветФона = WebЦвета.Розовый;
                
            ИначеЕсли КоличествоТипов > 1 Тогда
                
                ОбластьКол = ТабличныйДокумент.Область(1, СчКол, 1, СчКол);	
                ОбластьКол.ЦветФона   = WebЦвета.Хаки;
                ОбластьКол.ЦветТекста = WebЦвета.ТемноКрасный;
                
            ИначеЕсли КоличествоТипов > 0 И ТипыРеквизита[0] = Тип("Число") Тогда
                
                ОбластьКол = ТабличныйДокумент.Область(, СчКол, , СчКол);	
                ОбластьКол.ЦветФона   = WebЦвета.Голубой;
                ОбластьКол.ЦветТекста = WebЦвета.ТемноСиний; 
                
            КонецЕсли; 
            
        	СчКол = СчКол + 1;
        
        КонецЦикла;
        
   КонецЕсли;

КонецПроцедуры // ОформитьШапкуТабличногоДокумента()

&НаСервере
Процедура ЗаписатьЗначенияРасшифровкиВПоля()
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТР = РеквизитФормыВЗначение("ТаблицаРеквизитов");
    ОбработкаОбъект.ЗаписатьЗначенияРасшифровкиВПоля(ТабличныйДокумент, ТР);
   
КонецПроцедуры

&НаКлиенте
Функция СформироватьСписокКолонокИзНастроек()

    СписокКолонокИзНастроек = Новый СписокЗначений;
    
    Для каждого СтрТаб Из ТаблицаРеквизитов Цикл
        
        Если СтрТаб.Выбрать Тогда
        
            СписокКолонокИзНастроек.Добавить(СтрТаб.ИмяРеквизита, СтрТаб.ПредставлениеРеквизита);	
        
        КонецЕсли;    	
    
    КонецЦикла;
    
    Возврат СписокКолонокИзНастроек;

КонецФункции // СформироватьСписокКолонокИзНастроек()

&НаКлиенте
Функция ПроверитьШапкуИзФайла(СписокКолонокИзНастроек, ПоляНабораДанных, КоличествоКолонокExcel)

    МассивКолонокФайла = Новый Массив;
    
    МассивОшибок = Новый Массив;
    
    Для Сч = 0 По КоличествоКолонокExcel -1 Цикл
        
        Поле = ПоляНабораДанных.Item(Сч);
        ЗначениеЯчейки = СокрЛП(СтрЗаменить(Поле.Name, "#", "."));
        
        МассивКолонокФайла.Добавить(ЗначениеЯчейки);
                          
    КонецЦикла;

    Для каждого ЭлСп Из СписокКолонокИзНастроек Цикл
            
        ПредставлениеЭл = ЭлСп.Представление; 
        Если Найти(ЭлСп.Значение, "Аналитика") <> 0 Тогда        
            ПредставлениеЭл = СтрЗаменить(Сред(ПредставлениеЭл, Найти(ПредставлениеЭл, "(") + 1), ")", "");	        
        КонецЕсли;
        
        Если МассивКолонокФайла.Найти(ПредставлениеЭл) = Неопределено Тогда
            МассивОшибок.Добавить(ПредставлениеЭл);
        КонецЕсли;
                
    КонецЦикла;
        
    Если МассивОшибок.Количество() = 0 Тогда
        
        Возврат Истина;
        
    Иначе	
        
        ТекстСообщения = НСтр("ru='Не найдены колонки в файле:'");
        Для каждого ЭлМасс Из МассивОшибок  Цикл
            ТекстСообщения = ТекстСообщения + Символы.ПС + "- " + ЭлМасс;       
        КонецЦикла;
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
        Возврат Ложь;
        
    КонецЕсли;    
    
КонецФункции // ПроверитьШапкуИзФайла()

&НаКлиенте
Процедура ВывестиШапкуТабДок(СписокКолонокИзНастроек)

    Сч = 1;
    // Шапка
    Для каждого ЭлСп Из СписокКолонокИзНастроек Цикл
        
        ТекОбласть = ТабличныйДокумент.Область("R1C" + Формат(Сч, "ЧГ="));
        ТекОбласть.Текст = ЭлСп.Представление;
        ТекОбласть.Расшифровка = ЭлСп.Значение;
        ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
        ТекОбласть.ШиринаКолонки = 30;
        Сч = Сч + 1;
        
    КонецЦикла;	

    ОформитьШапкуТабличногоДокумента();
    
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьADODB(СоединениеADODB = Неопределено, НаборДанных = Неопределено)
    
    Если НаборДанных <> Неопределено Тогда
        // Закрытие набора записей.
        НаборДанных.Close();
        НаборДанных = Неопределено;
	КонецЕсли;
	    
    Если СоединениеADODB <> Неопределено Тогда
        // Закрытие соединение.
        СоединениеADODB.Close();
        СоединениеADODB = Неопределено;
    КонецЕсли;

КонецПроцедуры // ЗакрытьADODB()

&НаКлиенте
Функция ПолучитьСоединениеADODBПоСтрокеСоединения(СоединениеADODB, СтрокаСоединения)
		 
	#Если МобильныйКлиент Тогда 
		
		СоединениеПолучено = Ложь;
		ВызватьИсключение НСтр("ru = 'Работа с файлами Microsoft Excel в режиме мобильного клиента недоступна.'");
		
	#Иначе
		
	    Попытка
	        
	        // Инициализация основного объекта ADODB.Connection. Открытие соединения.
	        СоединениеADODB = Новый COMОбъект("ADODB.Connection");
	        СоединениеADODB.ConnectionString =  СтрокаСоединения;
	        СоединениеADODB.Open();
	        // Параметр для правильного определения количества строк листа.
	        СоединениеADODB.CursorLocation = 3;    // По-умолчанию 2.
	        
	        СоединениеПолучено = Истина;
	        
	    Исключение
	        
	        СоединениеПолучено = Ложь;            
	               
	    КонецПопытки;
		
	# КонецЕсли

    Возврат СоединениеПолучено;

КонецФункции // ПолучитьСоединениеADODBПоСтрокеСоединения()

&НаКлиенте
Функция ПолучитьСоединениеADODB(СоединениеADODB, СтрокаСоединения, ПутьКФайлу)

    // Первая попытка через Jet.OLEDB.4.0.
    // Jet.OLEDB.4.0 - Стандартное подключение, как правило, не требующее установки дополнительного 
	// программного обеспечения. 
    // Рекомендуется установить последний Service Pack Windows.
    СтрокаСоединения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;""";
    // Еще один вариант.
    СоединениеПолучено = ПолучитьСоединениеADODBПоСтрокеСоединения(СоединениеADODB, СтрокаСоединения);
            
    Если Не СоединениеПолучено Тогда    
              
        // Вторая попытка через ACE.OLEDB.12.0.       
        // ACE.OLEDB.12.0 - Для использования данного подключения необходимо дополнительное программное обеспечение:
        // Microsoft Access Database Engine 2010 Redistributable 32/64 bit.
        СтрокаСоединения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ПутьКФайлу) + ";Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;""";
        // Еще один вариант.
        СоединениеПолучено = ПолучитьСоединениеADODBПоСтрокеСоединения(СоединениеADODB, СтрокаСоединения);
        
    КонецЕсли;     
        
    // Вывод ошибки, если соединение не установлено.
	Если Не СоединениеПолучено Тогда    
        СоединениеADODB = Неопределено;
        ТекстСообщения = НСтр("ru = 'Подключение ADODB Connection не установлено.'");
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 	    
	КонецЕсли;
    
    Возврат СоединениеПолучено;

КонецФункции // ПолучитьСоединениеADODB()

&НаКлиенте
Функция ПолучитьНаборЗаписейADODBПоЗапросу(СоединениеADODB, НаборДанных, ТекстЗапроса, ИмяЛиста)
	
	#Если МобильныйКлиент Тогда 
		
		НаборЗаписейПолучен = Ложь;
		ВызватьИсключение НСтр("ru = 'Работа с файлами Microsoft Excel в режиме мобильного клиента недоступна.'");
		
	#Иначе
		
		Попытка
				
	        НаборДанных = Новый COMОбъект("ADODB.Recordset");
	        НаборДанных.Open(ТекстЗапроса, СоединениеADODB);
			НаборЗаписейПолучен = Истина;
	        
	        // Проверка заполненности листа.
	        // BOF - расположен ли указатель текущей записи в позиции перед первой записью объекта Recordset.
	        // EOF - расположен ли указатель текущей записи в позиции после последней записи объекта Recordset.
	        Если (НаборДанных.EOF ИЛИ НаборДанных.BOF) Тогда
	            
	            КоличествоСтрокExcel = 0;
	            
	            ТекстСообщения = НСтр("ru = '%1: не содержит данных.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяЛиста);
	            ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	            
	            ЗакрытьADODB(СоединениеADODB, НаборДанных);
	            
	            НаборЗаписейПолучен = Ложь;   
	            
	        КонецЕсли;
	        
	        // Параметры для правильного определения количества строк листа.
	        НаборДанных.AbsolutePage     = 1;
	        НаборДанных.AbsolutePosition = 1;
	        
	    Исключение
	        
	        ЗакрытьADODB(СоединениеADODB);
	               
	        ТекстСообщения = НСтр("ru = 'Не получилось открыть набор записей ADODB.'");
	        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	        
	        НаборЗаписейПолучен = Ложь;    
	        
	    КонецПопытки;

	# КонецЕсли
	
    Возврат НаборЗаписейПолучен;
    
КонецФункции // ПолучитьНаборЗаписейADODBПоЗапросу()

&НаКлиенте
Функция СформироватьТекстЗапросаSELECT(ПутьКФайлу, СписокКолонокИзНастроек = Неопределено)
    
    Если СписокКолонокИзНастроек = Неопределено Тогда
        
        // Все колонки для проверки.
        ТекстЗапроса = "SELECT * ";
        
    Иначе	
        
        ТекстЗапроса = "SELECT";
    
        Для каждого ЭлСп Из СписокКолонокИзНастроек Цикл
            
            ПредставлениеЭл = ЭлСп.Представление; 
            Если Найти(ЭлСп.Значение, "Аналитика") <> 0 Тогда        
                ПредставлениеЭл = СтрЗаменить(Сред(ПредставлениеЭл, Найти(ПредставлениеЭл, "(") + 1), ")", "");	        
            КонецЕсли;
            
            ТекстЗапроса = ТекстЗапроса + "
                        |`Данные$`.`" + ПредставлениеЭл + "`,";   
            
        КонецЦикла;
        
    КонецЕсли;
        
    ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);                    
                    ТекстЗапроса = ТекстЗапроса + "
                    |FROM `" + ПутьКФайлу + "`.`Данные$` `Данные$`";
        
    Возврат ТекстЗапроса;

КонецФункции // ПолучитьСоединениеADODBПоСтрокеСоединения()

// Функция считывает в табличный документ данные из файла в формате Excel
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла          - имя файла в формате Excel, из которого необходимо прочитать данные
//  НомерЛистаExcel   - номер листа книги Excel, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Булево (Истина, если файл прочитан, Ложь - иначе)
//
&НаКлиенте
Функция ПрочитатьТабличныйДокументИзExcelADODB(ПутьКФайлу)
       
    Перем СтрокаСоединения, СоединениеADODB, НаборДанных, ТекстЗапроса;
    Перем КоличествоКолонокExcel, Поле, Колонка, ИмяКолонки;
    Перем НоваяСтрока, НомерСтроки;
       
    Отказ = Ложь;
    ИмяЛиста = "Данные";
    
    // Список настроек колонок из таблицы реквизитов на форме обработки.
    СписокКолонокИзНастроек = СформироватьСписокКолонокИзНастроек();
        
    //----------------------------------------------------------------------------------------------------
    // Подключение к файлу через ADODB.
    
    Если Не ПолучитьСоединениеADODB(СоединениеADODB, СтрокаСоединения, ПутьКФайлу) Тогда
        Возврат Ложь; // Подключение не установлено.    
    КонецЕсли;
    
    //----------------------------------------------------------------------------------------------------
    // Проверка колонок файла.
        
    // Текст запроса по всем колонкам.
    ТекстЗапроса = СформироватьТекстЗапросаSELECT(ПутьКФайлу);
    // Создание Recordset. Дочерний объект СоединениеADODB. Набор записей по запросу.                
    Если Не ПолучитьНаборЗаписейADODBПоЗапросу(СоединениеADODB, НаборДанных, ТекстЗапроса, ИмяЛиста) Тогда
        Возврат Ложь; // Набор записей не получен.    
    КонецЕсли; 
    
    // Параметр, возвращаемый в вызывающую процедуру.
    КоличествоСтрокExcel   = НаборДанных.RecordCount;    // (+1) - учет Строки-Заголовка, которая "съедается".
    КоличествоКолонокExcel = НаборДанных.Fields.Count;
    
    // Проверка заполненности листа.
    Если КоличествоСтрокExcel = 0 Тогда

        ТекстСообщения = НСтр("ru = '%1: не содержит колонок.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяЛиста);
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
       
        ЗакрытьADODB(СоединениеADODB, НаборДанных);
        Возврат Ложь;
        
    Иначе

        Если ПроверитьШапкуИзФайла(СписокКолонокИзНастроек, НаборДанных.Fields, КоличествоКолонокExcel) Тогда
            // Все колонки найдены в файле.
            // Закрытие набора записей по всем колонкам.
            ЗакрытьADODB(Неопределено, НаборДанных);
        Иначе
            ЗакрытьADODB(СоединениеADODB, НаборДанных);
            Возврат Ложь;
        КонецЕсли;
        
    КонецЕсли;       
        
    //----------------------------------------------------------------------------------------------------
    // Загрузка файла.
        
    ТекстЗапроса = СформироватьТекстЗапросаSELECT(ПутьКФайлу, СписокКолонокИзНастроек);                        
    // Создание Recordset. Дочерний объект СоединениеADODB. Набор записей по запросу.                
    Если Не ПолучитьНаборЗаписейADODBПоЗапросу(СоединениеADODB, НаборДанных, ТекстЗапроса, ИмяЛиста) Тогда
        Возврат Ложь; // Набор записей не получен.    
    КонецЕсли;                    
    
    //----------------------------------------------------------------------------------------------------
    // Загрузка данных из файла в табличный документ.
        
    // Параметр, возвращаемый в вызывающую процедуру.
    КоличествоСтрокExcel   = НаборДанных.RecordCount + 1;    // (+1) - учет Строки-Заголовка, которая "съедается".
    КоличествоКолонокExcel = НаборДанных.Fields.Count;
    
    // Проверка заполненности листа.
    Если КоличествоСтрокExcel < 2 Тогда

        КоличествоСтрокExcel = 0;
        
        ТекстСообщения = НСтр("ru = '%1: не содержит данных.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяЛиста);
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
       
        ЗакрытьADODB(СоединениеADODB, НаборДанных);

        Возврат Ложь;    // В случае ошибки - выход.
        
    КонецЕсли;
    
    ОчиститьТабДок();
    ВывестиШапкуТабДок(СписокКолонокИзНастроек);
        
    СтрокаЗаголовка = 1; НачСтрока = 0; КонСтрока = 0;
    СчСтрок = 1;
    Пока НаборДанных.EOF() = 0 Цикл
        
        СчСтрок = СчСтрок + 1;
        
        Если СчСтрок < НачСтрока Тогда // Номер строки вне диапазона считываемых строк.
            НаборДанных.MoveNext(); // Следующая строка.
            Продолжить;
        КонецЕсли;
        
        Если КонСтрока > 0 И СчСтрок > КонСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            Прервать;
        КонецЕсли;
               
        Для Column = 1 По КоличествоКолонокExcel Цикл
            
            Поле = НаборДанных.Fields.Item(Column - 1);
                
            Если Поле.ActualSize = 0 Тогда // Пустое поле EXCEL.
                Продолжить;
            КонецЕсли;
                
            ЗначениеЯчейки = Поле.Value; // Учитывая параметр HDR=YES в строке соединения, данные считываются в соответствии с их типом.
                  
            ТекОбласть = ТабличныйДокумент.Область("R" + Формат(СчСтрок, "ЧГ=") +"C" + Формат(Column, "ЧГ="));
            ТекОбласть.Текст = ЗначениеЯчейки;
                   
        КонецЦикла;
        
        НаборДанных.MoveNext();   // Следующая строка.
        
    КонецЦикла;
    
    //----------------------------------------------------------------------------------------------------
    // Выделение области шапки
    ЗаписатьЗначенияРасшифровкиВПоля();
    
    //----------------------------------------------------------------------------------------------------
    // Закрытие соединения.
    ЗакрытьADODB(СоединениеADODB, НаборДанных);
             
	Возврат Истина;
	
КонецФункции // ПрочитатьТабличныйДокументИзExcelADODB()

#КонецОбласти 

#Область ЗаполнениеСписковВыбора	

// Функция возвращает список, элементами которого выступают возможные имена представления загружаемого реквизита.
//
// Параметры:
//  ИД - Число - идентификатор строки.
//
// Возвращаемое значение:
//  СписокЗначений - список имен представления.
//
&НаСервере
Функция ПолучитьПредставленияРеквизита(ИД)
    
    ТекущиеДанные = ТаблицаРеквизитов.НайтиПоИдентификатору(ИД);
    
    СписокВыбора = Новый СписокЗначений;
	Если ТекущиеДанные.ОписаниеТипов.Типы().Количество() = 1 Тогда
		
		Тип = ТекущиеДанные.ОписаниеТипов.Типы()[0];
		
		МетаданныеТипа      = Метаданные.НайтиПоТипу(Тип);
		ЭтоСправочник       = Справочники.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоСчет             = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип);
		ЭтоВидХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип);
		Если ЭтоСправочник ИЛИ ЭтоСчет ИЛИ ЭтоВидХарактеристик Тогда
			 
            Если МетаданныеТипа.ДлинаНаименования > 0 Тогда
                СписокВыбора.Добавить("Наименование", "Наименование");
            КонецЕсли;
            Если МетаданныеТипа.ДлинаКода > 0 Тогда
                ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,
			                                ?(ЭтоСчет, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики));
                ОчередьВСписке = ?(МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода, 0, 1);
                СписокВыбора.Вставить(ОчередьВСписке, "Код", "Код");
            КонецЕсли;
                      
            Для каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
                Если Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать Тогда
                    // Если реквизит не индексируется, тогда не добавляем его в список выбора.
                    Продолжить;
                КонецЕсли;
                Если ТекущиеДанные.ИмяРеквизита = "Родитель" 
                    И Реквизит.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
                    // Если выбор группы и реквизит недоступен для группы, тогда не добавляем его в список выбора.
                    Продолжить;
				КонецЕсли;
				ТипыРеквизита = Реквизит.Тип.Типы();
                Если ТипыРеквизита.Количество() = 1 И ТипыРеквизита[0] = Тип ("Строка") Тогда              					
                    СписокВыбора.Добавить(Реквизит.Имя, Реквизит.Представление());					
                КонецЕсли;    				
            КонецЦикла;	          
            
		КонецЕсли;
		
    КонецЕсли;
    
	Возврат СписокВыбора;
    
КонецФункции // ПолучитьПредставленияРеквизита()

&НаСервере
Функция ПолучитьСвязиПоВладельцу(ИдТекРеквизит)

    ТекРеквизит = ТаблицаРеквизитов.НайтиПоИдентификатору(ИдТекРеквизит);
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	МетаданныеИсточника = ОбработкаОбъект.ПолучитьМетаданныеИсточника();
	
    Возврат ОбработкаОбъект.ПолучитьСвязиПоВладельцу(ТекРеквизит, ТаблицаРеквизитов, МетаданныеИсточника);	

КонецФункции // ПолучитьСвязиПоВладельцу()

&НаСервере
Функция ПолучитьПоляСтатьиОборотов()

    СписокВыбора = Новый СписокЗначений;
    
    ОписаниеТипаСтатьи = Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов");
    МетаРеквизиты = Объект.СсылкаОбъекта.Метаданные().ТабличныеЧасти[Объект.ИмяТабличнойЧасти].Реквизиты;
    
    Для каждого МетаРеквизит Из МетаРеквизиты Цикл
        Если МетаРеквизит.Тип = ОписаниеТипаСтатьи Тогда
            СписокВыбора.Добавить(МетаРеквизит.Имя, МетаРеквизит.Синоним);       
        КонецЕсли;   
    КонецЦикла;
    
    Возврат СписокВыбора;

КонецФункции // ПолучитьПоляСтатьиОборотов()

#КонецОбласти

#Область ИзменениеОсновныхНастроекРежима

// Процедура заполняет список выбора элемента управления "ТабличнаяЧастьИсточника"
//
&НаСервере
Процедура ЗаполнитьСписокТабличныхЧастей()
    
    СписокТч = Элементы.ИмяТабличнойЧасти.СписокВыбора;
	СписокТч.Очистить();
    
    Если Объект.СсылкаОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
    Для каждого Тч Из Объект.СсылкаОбъекта.Метаданные().ТабличныеЧасти Цикл
		СписокТч.Добавить(Тч.Имя, Тч.Представление());
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокТабличныхЧастей()

// Процедура заполняет настройки колонок.
// 
// Параметры:
//  ЗаполнитТаблицуКолонок - Булево - нужно перезаполнить таблицу настоек колонок..
//
&НаСервере
Процедура ЗаполнитьНастройкиКолонок(ЗаполнитТаблицуКолонок = Истина)
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    
	Если ЗаполнитТаблицуКолонок Тогда       
	    МетаданныеИсточника = ОбработкаОбъект.ПолучитьМетаданныеИсточника();           
	    Если МетаданныеИсточника = Неопределено Тогда
	    	ТаблицаРеквизитов.Очистить();
		Иначе
	        ОбработкаОбъект.ЗаполнитьНастройкиКолонок(ТаблицаРеквизитов);
	    КонецЕсли;        
	Иначе
		// Удаление скрытых строк, сохраненных в старых настройках.
		ОбработкаОбъект.УдалитьСкрытыеСтрокиИзТаблицыРеквизитов(ТаблицаРеквизитов);	
	КонецЕсли;
    
    Если Объект.РежимЗагрузки = "ТабличнаяЧасть" И Объект.СсылкаОбъекта <> Неопределено Тогда
        
        // Список выбора статей оборотов - связанных с доп аналитиками.
        Если ЗначениеЗаполнено(Объект.ИмяТабличнойЧасти) Тогда
            СписокВыбора = ПолучитьПоляСтатьиОборотов();    
            Элементы.ТаблицаРеквизитовСвязьАналитики_ПредставлениеСтатьиОборотов.СписокВыбора.Очистить();
            Для каждого ТекущееЗначение Из СписокВыбора Цикл
                Элементы.ТаблицаРеквизитовСвязьАналитики_ПредставлениеСтатьиОборотов.СписокВыбора.Добавить(ТекущееЗначение.Значение, ТекущееЗначение.Представление);   
            КонецЦикла;            
        КонецЕсли;        
	КонецЕсли;
	
	СохраненныйОбъектМетаданных = Объект.ОбъектМетаданных;
               	
КонецПроцедуры // ЗаполнитьНастройкиКолонок()

// Процедура устанавливает значение по умолчанию нужному реквизиту таблицы реквизитов.
// 
// Параметры:
//  ИмяРеквизитаТабл - Строка - Имя реквизита в таблице реквизитов.
//  СсылкаОбъекта    - ЛюбаяСсылка.
//  ИмяРеквизитаОб   - Строка - Имя реквизита в объекте.
//
&НаСервере
Процедура УстановитьЗначениеПоУмолчаниюВТаблицуРеквизитов(ИмяРеквизитаТабл, СсылкаОбъекта, ИмяРеквизитаОб, УмВыбрать = Ложь)

	НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизитаТабл));
	Если НайденныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = НайденныеСтроки[0];
	СтрокаТаблицы.Выбрать 			  = УмВыбрать;
	СтрокаТаблицы.ЗначениеПоУмолчанию = ПолучитьЗначениеРеквизитаОбъекта(СсылкаОбъекта, ИмяРеквизитаОб);
	СтрокаТаблицы.РежимЗагрузки 	  = "Устанавливать";

КонецПроцедуры // УстановитьЗначениеПоУмолчаниюВТаблицуРеквизитов()

&НаСервере 
Процедура РежимЗагрузкиПриИзмененииСервер()
	
	ТабличныйДокумент.Очистить();
	ТаблицаРеквизитов.Очистить();
	ТаблицаОтбор.Очистить();
	
    УправлениеВидимостьюДоступностью();
        
    Объект.ОчищатьРегистр = Ложь;
    Элементы.Загрузить.Заголовок = "Загрузить";
    
КонецПроцедуры // РежимЗагрузкиПриИзмененииСервер()

&НаСервере
Процедура ИмяСправочникаПриИзмененииСервер()
    
    ЗаполнитьНастройкиКолонок();
        
    // Поля поиска по умолчанию.
    НайденныеСтр = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("МожетБытьПолемПоиска", Истина));
    Для каждого СтрокаТаблицы Из НайденныеСтр Цикл
        Если СтрокаТаблицы.ИмяРеквизита = "Код" ИЛИ СтрокаТаблицы.ИмяРеквизита = "Наименование" Тогда
            СтрокаТаблицы.ПолеПоиска = Истина;       
        КонецЕсли;
	КонецЦикла;
	
	ОбновитьТабличныйДокументСервер();
    
КонецПроцедуры // ИмяСправочникаПриИзмененииСервер()

&НаСервере
Процедура ИмяРегистраСведенийПриИзмененииСервер()
	
	ЗаполнитьНастройкиКолонок();
	
	ОбновитьТабличныйДокументСервер();
	    
КонецПроцедуры // ИмяРегистраСведенийПриИзмененииСервер()

&НаСервере
Процедура ОбъектМетаданныхТчПриИзмененииСервер()

	Если Объект.ОбъектМетаданных = СохраненныйОбъектМетаданных Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТаблицаРеквизитов.Очистить();
	ТаблицаОтбор.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ОбъектМетаданных) Тогда
		
		ЗаполнитьСписокТабличныхЧастей();  
		
	КонецЕсли;
	
	СохраненныйОбъектМетаданных = Объект.ОбъектМетаданных;
	
	// Тест: Таблица отборов только для ФВБ.
	Элементы.ТаблицаОтбор.Видимость = Объект.ОбъектМетаданных = "Документ.бит_ФормаВводаБюджета";
	        
КонецПроцедуры // ОбъектМетаданныхТчПриИзменении()

&НаСервере
Процедура СсылкаОбъектаТчПриИзмененииСервер()

	ТабличныйДокумент.Очистить();
	ТаблицаОтбор.Очистить();
	        
КонецПроцедуры // ОбъектМетаданныхТчПриИзменении()

&НаСервере
Процедура ОбъектМетаданныхРоПриИзмененииСервер()
	
	Если Объект.ОбъектМетаданных = СохраненныйОбъектМетаданных Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизитов.Очистить();
	ТабличныйДокумент.Очистить();
	ТаблицаОтбор.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ОбъектМетаданных) Тогда
		
	    Если Объект.ОбъектМетаданных = "Документ.бит_ОперацияБюджетирование" Тогда
			Объект.РегистрБухгалтерииДляРучнойОперации = Неопределено;
			ЗаполнитьНастройкиКолонок();
			ОбновитьТабличныйДокументСервер();
	    КонецЕсли;
	    
	КонецЕсли;
	
	СохраненныйОбъектМетаданных = Объект.ОбъектМетаданных;

КонецПроцедуры // ОбъектМетаданныхРоПриИзмененииСервер()

&НаСервере
Процедура ЗагрузитьВыбранныйОбъектСистемы(Параметр)
    
    ИмяОбъекта = Параметр[0].Значение;
    Объект.ОбъектМетаданных = ИмяОбъекта;
    
    // Привести СсылкаОбъекта к нужному типу.
    ОпТип = Новый ОписаниеТипов(СтрЗаменить(ИмяОбъекта, ".", "Ссылка."));
    Объект.СсылкаОбъекта = ОпТип.ПривестиЗначение(Неопределено);
    Элементы.СсылкаОбъектаТч.ТолькоПросмотр = Ложь;
	Элементы.СсылкаОбъектаРо.ТолькоПросмотр = Ложь;
    
    Объект.ИмяТабличнойЧасти = "";
	
    Если Объект.РежимЗагрузки = "ТабличнаяЧасть" Тогда
        
		ОбъектМетаданныхТчПриИзмененииСервер();
        
	ИначеЕсли Объект.РежимЗагрузки = "РучнаяОперация" Тогда
        
		ОбъектМетаданныхРоПриИзмененииСервер();
        
    КонецЕсли;   
    
КонецПроцедуры // ЗагрузитьВыбранныйОбъектСистемы()

&НаСервере
Процедура ИмяТабличнойЧастиПриИзмененииСервер()
    
    ЗаполнитьНастройкиКолонок();
     	
	ОбновитьТабличныйДокументСервер();
	
	ТекстЗапросаОтборов = СформироватьТекстЗапросаДляОтборов(Объект.ОбъектМетаданных, ТаблицаРеквизитов);
    
КонецПроцедуры // ИмяТабличнойЧастиПриИзмененииСервер()

&НаСервере
Процедура СсылкаОбъектаРоПриИзмененииСервер()
		
    Если ЗначениеЗаполнено(Объект.СсылкаОбъекта) Тогда
                
	    Если Объект.ОбъектМетаданных = "Документ.бит_ОперацияБюджетирование" Тогда
			
			Объект.РегистрБухгалтерииДляРучнойОперации = Неопределено; 
			
			УстановитьЗначениеПоУмолчаниюВТаблицуРеквизитов("Сценарий", Объект.СсылкаОбъекта, "Сценарий");
			
		Иначе
			
			Объект.РегистрБухгалтерииДляРучнойОперации = Объект.СсылкаОбъекта.РегистрБухгалтерии;
			
			ЗаполнитьНастройкиКолонок();
		     	
			ОбновитьТабличныйДокументСервер();
			
		КонецЕсли;
		
		УстановитьЗначениеПоУмолчаниюВТаблицуРеквизитов("Организация", Объект.СсылкаОбъекта, "Организация");
		УстановитьЗначениеПоУмолчаниюВТаблицуРеквизитов("Период"	 , Объект.СсылкаОбъекта, "Дата");
		       	                    
    КонецЕсли;
        
КонецПроцедуры // СсылкаОбъектаРоПриИзмененииСервер()

&НаСервере
Процедура ИмяПланаСчетовПриИзмененииСервер()
    
    ЗаполнитьНастройкиКолонок();
        
    // Поля поиска по умолчанию.
    НайденныеСтр = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("МожетБытьПолемПоиска", Истина));
    Для каждого СтрокаТаблицы Из НайденныеСтр Цикл
        Если СтрокаТаблицы.ИмяРеквизита = "Код" ИЛИ СтрокаТаблицы.ИмяРеквизита = "Наименование" Тогда
            СтрокаТаблицы.ПолеПоиска = Истина;       
        КонецЕсли;
	КонецЦикла;
	
	ОбновитьТабличныйДокументСервер();
    
КонецПроцедуры // ИмяПланаСчетовПриИзмененииСервер()

#КонецОбласти

#Область ЗагрузкаВТабличныйДокументДанныхИзБазы

&НаСервере
Процедура ЗаполнитьТабДокИзСправочникаВыборочноСервер(Результат)
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТзРеквизитов    = РеквизитФормыВЗначение("ТаблицаРеквизитов");
    ОбработкаОбъект.ЗаполнитьТабДокИзСправочника(ЭтотОбъект.ТабличныйДокумент, ТзРеквизитов, Результат);
	
	ОформитьШапкуТабличногоДокумента();
	
КонецПроцедуры // ЗаполнитьТабДокИзСправочникаВыборочноСервер()

&НаСервере
Процедура ЗаполнитьТабДокИзСправочникаПолностьюСервер()
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТзРеквизитов    = РеквизитФормыВЗначение("ТаблицаРеквизитов");
    ОбработкаОбъект.ЗаполнитьТабДокИзСправочника(ЭтотОбъект.ТабличныйДокумент, ТзРеквизитов);
	
	ОформитьШапкуТабличногоДокумента();
	
КонецПроцедуры // ЗаполнитьТабДокИзСправочникаПолностьюСервер()

&НаСервере
Процедура ЗаполнитьТабДокИзРегистраСервер()
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТзРеквизитов    = РеквизитФормыВЗначение("ТаблицаРеквизитов");
    ОбработкаОбъект.ЗаполнитьТабДокИзРегистраСведений(ЭтотОбъект.ТабличныйДокумент, ТзРеквизитов);
	
	ОформитьШапкуТабличногоДокумента();
	
КонецПроцедуры // ЗаполнитьТабДокИзРегистраСервер()

&НаСервере
Процедура ЗаполнитьТабДокИзТабличнойЧастиСервер()
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТзРеквизитов    = РеквизитФормыВЗначение("ТаблицаРеквизитов");
    ОбработкаОбъект.ЗаполнитьТабДокИзТабличнойЧасти(ЭтотОбъект.ТабличныйДокумент, ТзРеквизитов);
	
	ОформитьШапкуТабличногоДокумента();
	
КонецПроцедуры // ЗаполнитьТабДокИзТабличнойЧастиСервер()

&НаСервере
Процедура ЗаполнитьТабДокИзРучнойОперацииСервер()
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТзРеквизитов    = РеквизитФормыВЗначение("ТаблицаРеквизитов");
    ОбработкаОбъект.ЗаполнитьТабДокИзРучнойОперации(ЭтотОбъект.ТабличныйДокумент, ТзРеквизитов);
	
	ОформитьШапкуТабличногоДокумента();
	
КонецПроцедуры // ЗаполнитьТабДокИзРучнойОперацииСервер()

&НаСервере
Процедура ЗаполнитьТабДокИзПланаСчетовСервер()
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТзРеквизитов    = РеквизитФормыВЗначение("ТаблицаРеквизитов");
    ОбработкаОбъект.ЗаполнитьТабДокИзПланаСчетов(ЭтотОбъект.ТабличныйДокумент, ТзРеквизитов);
	
	ОформитьШапкуТабличногоДокумента();
	
КонецПроцедуры // ЗаполнитьТабДокИзПланаСчетовСервер()

#КонецОбласти 

#Область ДанныеТабличногоДокумента

&НаСервере
Процедура ОбновитьТабличныйДокументСервер()
    
	ПеренумероватьКолонки(ТаблицаРеквизитов);
    
    ТабличныйДокумент.Очистить();

    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ТзРеквизитов    = РеквизитФормыВЗначение("ТаблицаРеквизитов");
    ОбработкаОбъект.СформироватьШапкуТабДок(ТабличныйДокумент, ТзРеквизитов);
    
    Элементы.ТабличныйДокумент.Редактирование = Истина;
	
	ОформитьШапкуТабличногоДокумента();
    
КонецПроцедуры // ОбновитьТабличныйДокументСервер()

#КонецОбласти

#Область ВыборЗначенияПоляТабличногоДокумента

&НаКлиенте
Процедура ВыбратьЗначениеПоляТабличногоДокумента()

    ОчиститьСообщения();
    
    // ----------------------------------------------------------------------
    // Проверка возможности выбора значения
    
    ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	
    Если ТекущаяОбласть.Верх <> ТекущаяОбласть.Низ 
        ИЛИ ТекущаяОбласть.Лево <> ТекущаяОбласть.Право
        ИЛИ (ТекущаяОбласть.Лево = 0 И ТекущаяОбласть.Право = 0) Тогда
		ТекстСообщения = НСтр("ru = 'Для выбора значения необходимо выделить только одну ячейку.'");			 
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;   
   
    // ----------------------------------------------------------------------
    // Параметры
    
    Если ТекущаяОбласть.Текст = "недоступно" ИЛИ ТекущаяОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки Тогда
		ТекстСообщения = НСтр("ru = 'Поле недоступно.'");
		ПоказатьПредупреждение(, ТекстСообщения);
        Возврат;    
    КонецЕсли;
    
    Значение = ТекущаяОбласть.Расшифровка;
    
    ПараметрыВыбораЗнч = ПолучитьПараметрыВыбораЗначения(Значение, ТекущаяОбласть.Лево, ТекущаяОбласть.Верх);
    
    Если ПараметрыВыбораЗнч.ИдКолонки = Неопределено  Тогда
        ТекстСообщения = НСтр("ru = 'Значение данной колонки не выбирается.'");			 
		ПоказатьПредупреждение(, ТекстСообщения);
        Возврат;
    КонецЕсли;
        
	ОпТипПоля = ПараметрыВыбораЗнч.ОписаниеТипов;
        
    // Оповещение об окончании выбора
	ДопПараметры = Новый Структура("ПараметрыВыбораЗнч, ТекущаяОбласть", ПараметрыВыбораЗнч, ТекущаяОбласть);
    ОпОповещения 	     = Новый ОписаниеОповещения("ЗавершениеВводаЗначения", ЭтотОбъект, ДопПараметры);
	ОпОповещенияИзСписка = Новый ОписаниеОповещения("ЗавершениеВводаЗначенияИзСписка", ЭтотОбъект, ДопПараметры);
    
    // ----------------------------------------------------------------------
    // Выбор значения
    
    Если ПараметрыВыбораЗнч.ПростойВыбор Тогда
              
        ПоказатьВводЗначения(ОпОповещения, Значение, , ОпТипПоля);   
        
    ИначеЕсли ПараметрыВыбораЗнч.ЭтоСоставнойТип Тогда
        
        ПоказатьВводЗначения(ОпОповещения, Значение, , ОпТипПоля); 

	ИначеЕсли ПараметрыВыбораЗнч.ЭтоСистемноеПеречисление Тогда
		
		СписокДляВыбора = Новый СписокЗначений;			
		Если ПараметрыВыбораЗнч.ОписаниеТипов = Новый ОписаниеТипов("ВидСчета") Тогда
			Для каждого ЭлементВид Из ВидСчета Цикл
				СписокДляВыбора.Добавить(ЭлементВид);	
			КонецЦикла;
		КонецЕсли;
		ПоказатьВыборИзСписка(ОпОповещенияИзСписка, СписокДляВыбора);
		
    Иначе
        
        ПараметрыФормыВыбора = Новый Структура;
        Если ПараметрыВыбораЗнч.СтрОтборПоВладельцу <> Неопределено Тогда
            ПараметрыФормыВыбора.Вставить("Отбор", ПараметрыВыбораЗнч.СтрОтборПоВладельцу);       
        КонецЕсли;
        Если ЗначениеЗаполнено(Значение) Тогда
            ПараметрыФормыВыбора.Вставить("ТекущаяСтрока", Значение);      
        КонецЕсли;
        ОткрытьФорму(ПараметрыВыбораЗнч.ИмяФормыВыбора, ПараметрыФормыВыбора, , , , , ОпОповещения);
        
    КонецЕсли;
   
КонецПроцедуры // ВыбратьЗначениеПоляТабличногоДокумента()

&НаКлиенте
Процедура ЗавершениеВводаЗначения(РезультатВыбора, ДопПараметры) Экспорт

    Если РезультатВыбора <> Неопределено Тогда
        
        ТекущаяОбласть 				= ДопПараметры.ТекущаяОбласть;
		ПараметрыВыбораЗнч 			= ДопПараметры.ПараметрыВыбораЗнч;
		
		ИскатьПо 					= ПараметрыВыбораЗнч.ИскатьПо;
		СвязьАналитики_ИмяАналитики = ПараметрыВыбораЗнч.СвязьАналитики_ИмяАналитики;
		ОписаниеТипов 				= ПараметрыВыбораЗнч.ОписаниеТипов;
        
		ТекущаяОбласть.Текст = ?(ПустаяСтрока(ИскатьПо)
                                    , Строка(РезультатВыбора)
                                    , ПолучитьЗначениеРеквизитаОбъекта(РезультатВыбора, ИскатьПо));
    	ТекущаяОбласть.Расшифровка = РезультатВыбора;
        
        ОчиститьСообщения();
        
        // Обработка изменения значения статьи оборотов.
        Если ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов")  
            И ТипЗнч(СвязьАналитики_ИмяАналитики) = Тип("СписокЗначений") Тогда
            ОформитьДопАналитикиПоСтатьеСервер(РезультатВыбора, ПараметрыВыбораЗнч, ТекущаяОбласть.Верх, ТекущаяОбласть.Лево);
        КонецЕсли;
            
    КонецЕсли;	

КонецПроцедуры // ЗавершениеВводаЗначения()

&НаКлиенте
Процедура ЗавершениеВводаЗначенияИзСписка(РезультатВыбора, ДопПараметры) Экспорт

	ВыбранноеЗначение = РезультатВыбора.Значение;
    Если РезультатВыбора <> Неопределено Тогда
        
        ТекущаяОбласть 				= ДопПараметры.ТекущаяОбласть;
		ПараметрыВыбораЗнч 			= ДопПараметры.ПараметрыВыбораЗнч;
		
		ИскатьПо 					= ПараметрыВыбораЗнч.ИскатьПо;
		ОписаниеТипов 				= ПараметрыВыбораЗнч.ОписаниеТипов;
        
        ТекущаяОбласть.Текст 	   = Строка(ВыбранноеЗначение);        
		ТекущаяОбласть.Расшифровка = ВыбранноеЗначение;
        
        ОчиститьСообщения();
                    
    КонецЕсли;	

КонецПроцедуры // ЗавершениеВводаЗначенияИзСписка()

// Функция проверяет задан ли для цвета стиль бит_ТекстНедоступнойНадписи.
// 
// Возвращаемое значение:
//  Булево - это цвет недоступной надписи.
// 
&НаСервере
Функция ЭтоЦветНедоступнойНадписи(ЦветТекста)

	ЭтоЦветНедоступнойНадписи = ЦветТекста = ЦветаСтиля.бит_ТекстНедоступнойНадписи;
	
	Возврат ЭтоЦветНедоступнойНадписи;

КонецФункции // ЭтоЦветНедоступнойНадписи()

// Процедура устанавливает оформление для областей доп. аналитик.
//
// Параметры:
//  РезультатВыбора    - Произвольное значение.
//  ПараметрыВыбораЗнч - Структура.
//  нС				   - Число.
//  нК				   - Число.
//
&НаСервере
Процедура ОформитьДопАналитикиПоСтатьеСервер(РезультатВыбора, ПараметрыВыбораЗнч, нС, нК)
    
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ОбработкаОбъект.ОформитьДопАналитикиПоСтатье(РезультатВыбора, ТабличныйДокумент, ТаблицаРеквизитов, ПараметрыВыбораЗнч, нС, нК, АвтоЦвет);	

КонецПроцедуры // ОформитьДопАналитикиПоСтатьеСервер()

#КонецОбласти

#Область ТаблицаОтборов

&НаСервереБезКонтекста
Функция СформироватьТекстЗапросаДляОтборов(ОбъектМетаданных, ТаблицаРеквизитов)
	
	Если ОбъектМетаданных = "Документ.бит_ФормаВводаБюджета" Тогда
		
		Первый = Истина;
		МассивСправочников = Новый Массив;
		
		Для каждого Рек Из ТаблицаРеквизитов Цикл
			
			ИмяРеквизита = Рек.ИмяРеквизита;
			
			ТипыРеквизита = Рек.ОписаниеТипов.Типы();
			Если ТипыРеквизита.Количество() = 1 Тогда
				
				Знч = Рек.ОписаниеТипов.ПривестиЗначение(Неопределено);				
				Если бит_ОбщегоНазначения.ЗначениеПринадлежитКоллекцииМетаданных("Справочники", Знч) Тогда
					
					ИмяСправочника = Знч.Метаданные().Имя;
					Если МассивСправочников.Найти(ИмяСправочника) <> Неопределено Тогда
						Продолжить;				
					КонецЕсли;
					МассивСправочников.Добавить(ИмяСправочника);
				
					Если Первый Тогда
					
						ТекстЗапроса = 
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	ТекТаб.Ссылка КАК " + ИмяРеквизита + "
						|ИЗ
						|	Справочник." + ИмяСправочника + " КАК ТекТаб
						|{ГДЕ
						|	ТекТаб.Ссылка КАК " + ИмяРеквизита + "}
						|";	
						
						Первый = Ложь;
						
					Иначе
						
						ТекстЗапроса = ТекстЗапроса + "
						|ОБЪЕДИНИТЬ ВСЕ
						|ВЫБРАТЬ ПЕРВЫЕ 1
						|	ТекТаб.Ссылка КАК " + ИмяРеквизита + "
						|ИЗ
						|	Справочник." + ИмяСправочника + " КАК ТекТаб
						|{ГДЕ
						|	ТекТаб.Ссылка КАК " + ИмяРеквизита + "}
						|";
						
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
				
	Иначе
		
		ТекстЗапроса = "";
		
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДляОтборов()

&НаСервереБезКонтекста
Функция ПолучитьВидСравненияРавно()

	Возврат ВидСравнения.Равно;

КонецФункции // ПолучитьВидСравненияРавно()

// Процедура формирует список доступных видов сравнения в зависимости от типа значения в строке.
// 
// Параметры:
//  ИдСтроки - Число.
// 
&НаСервере
Функция СформироватьСписокВыбораВидаСравнения(ИдСтроки)
	
	ТекущиеДанные = ТаблицаОтбор.НайтиПоИдентификатору(ИдСтроки);
	СписокВидов = бит_МеханизмПолученияДанных.СписокВыбораВидаСравнения(ТекущиеДанные);
		
	Возврат СписокВидов;
	
КонецФункции // СформироватьСписокВыбораВидаСравнения()

// Процедура обрабатывает изменение вида сравнения.
// 
// Параметры:
//  ИдСтроки         - Строка.
//  ПредВидСравнения - ВидСравнения.
// 
&НаСервере
Процедура ИзменениеВидаСравненияСервер(ИдСтроки, ПредВидСравнения)
	
	ТекущиеДанные = ТаблицаОтбор.НайтиПоИдентификатору(ИдСтроки); 	
	бит_МеханизмПолученияДанных.ИзменениеВидаСравнения(ТекущиеДанные, ПредВидСравнения);
		
КонецПроцедуры // ИзменениеВидаСравненияСервер()

#КонецОбласти

#Область ПроцедурыИФункцииПоРаботеСНастройками

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

    СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Обработки.бит_ЗагрузкаДанныхИзТабличногоДокумента.Реквизиты Цикл
		СтруктураНастроек.Вставить(Реквизит.Имя, Объект[Реквизит.Имя])
    КонецЦикла;
    
    // Таблица "ТаблицаРеквизитов"
    СохраненнаяТаблицаРеквизитов = РеквизитФормыВЗначение("ТаблицаРеквизитов");
    СтруктураНастроек.Вставить("ТаблицаРеквизитов", Новый ХранилищеЗначения(СохраненнаяТаблицаРеквизитов));
	
	// Таблица "ТаблицаОтбор"
    СохраненнаяТаблицаОтборов = РеквизитФормыВЗначение("ТаблицаОтбор");
    СтруктураНастроек.Вставить("ТаблицаОтбор", Новый ХранилищеЗначения(СохраненнаяТаблицаОтборов));
    
    // Табличный документ
    Если Объект.СохранятьТабличныйДокумент Тогда
        СтруктураНастроек.Вставить("ТабличныйДокумент", Новый ХранилищеЗначения(ТабличныйДокумент));
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ТекстЗапроса", ТекстЗапросаОтборов);	
              		
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненные настройки.
// 
// Параметры:
//  ВыбраннаяНастройка - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбраннаяНастройка)

	Если Не ЗначениеЗаполнено(ВыбраннаяНастройка) Тогда	
		Возврат;     		
    КонецЕсли;
    
    Объект.ОчищатьРегистр = Ложь;
	
    СтруктураНастроек = ВыбраннаяНастройка.ХранилищеНастроек.Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
        
        Если ЗначениеЗаполнено(Объект.СсылкаОбъекта) Тогда
            ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек, , "СсылкаОбъекта");
        Иначе
            ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек);
		КонецЕсли;
		    
        // Таблица "ТаблицаРеквизитов"
        Если СтруктураНастроек.Свойство("ТаблицаРеквизитов") Тогда
    		ТаблицаРеквизитов.Очистить();
            Если СтруктураНастроек.ТаблицаРеквизитов <> Неопределено Тогда 
                ТаблицаИсточник = СтруктураНастроек.ТаблицаРеквизитов.Получить();
				НетКолонкиВС = ТаблицаИсточник.Колонки.Найти("ВыгружатьСписки") = Неопределено;
                Объект.ЕстьГруппы = ТаблицаИсточник.Найти(Новый Структура("ИмяРеквизита", "ЭтоГруппа") <> Неопределено);
                Для каждого СтрРек Из ТаблицаИсточник Цикл
                    НовСтр = ТаблицаРеквизитов.Добавить();
                	ЗаполнитьЗначенияСвойств(НовСтр, СтрРек);
					Если НетКолонкиВС Тогда
						НовСтр.ВыгружатьСписки = НовСтр.Выбрать;				
					КонецЕсли;
				КонецЦикла;				
            КонецЕсли;	
		КонецЕсли;
		
		// Таблица "ТаблицаОтбор"
		ТаблицаОтбор.Очистить();
		Если СтруктураНастроек.Свойство("ТаблицаОтбор") Тогда
    		Если СтруктураНастроек.ТаблицаОтбор <> Неопределено Тогда 
                ЗначениеВРеквизитФормы(СтруктураНастроек.ТаблицаОтбор.Получить(), "ТаблицаОтбор");
            КонецЕсли;	
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ТекстЗапроса") Тогда
			ТекстЗапросаОтборов = СтруктураНастроек.ТекстЗапроса;
		КонецЕсли;
		
        // Табличный документ
        Если СтруктураНастроек.Свойство("ТабличныйДокумент") Тогда
            ТабличныйДокумент.Очистить();
    		ТабличныйДокумент.Вывести(СтруктураНастроек.ТабличныйДокумент.Получить());
        КонецЕсли;
        
        ВыполнитьДействияПослеУстановкиНастроек();
		                		
    Иначе
		
		ТекстСообщения = НСтр("ru = 'Настройки не восстановлены.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
        
    КонецЕсли;  		
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура выполняет действия после установки настроек.
//
&НаСервере
Процедура ВыполнитьДействияПослеУстановкиНастроек()
	
	Если ПустаяСтрока(Объект.ОбъектМетаданных) Тогда
        Объект.СсылкаОбъекта = Неопределено;
	КонецЕсли; 
		
	// Изменение настроек режима.
	Если Объект.РежимЗагрузки = "ТабличнаяЧасть" Тогда
		ЗаполнитьСписокТабличныхЧастей();
		ЗаполнитьНастройкиКолонок(Ложь);
	КонецЕсли;
	СохраненныйОбъектМетаданных = Объект.ОбъектМетаданных;   
	
	УправлениеВидимостьюДоступностью();
	ТекстЗапросаОтборов = СформироватьТекстЗапросаДляОтборов(Объект.ОбъектМетаданных, ТаблицаРеквизитов);
    
КонецПроцедуры // ВыполнитьДействияПослеУстановкиНастроек()

// Процедура открывает форму восстановления настроек.
//  
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта("Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента");
	
	// Установим настройку
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда
        
        ПрименитьНастройки(НастройкаПоУмолчанию);
        
    Иначе
        
        Объект.ПерваяСтрокаДанныхТабличногоДокумента = 2;
        Объект.СохранятьТабличныйДокумент = Истина;
        
        ВыполнитьДействияПослеУстановкиНастроек();
        
    КонецЕсли;
        
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

&НаКлиенте
Процедура СохранитьНастройки(Команда)

	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", "Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента");
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
		
КонецПроцедуры // СохранитьНастройки()

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)

	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , ПредопределенноеЗначение("Перечисление.бит_ТипыСохраненныхНастроек.Обработки"));
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", "Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента");
    
    Оповещение = Новый ОписаниеОповещения("ПрименениеНастроек", ЭтаФорма);
    ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры // ВосстановитьНастройки()

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
// 
&НаКлиенте 
Процедура ПрименениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		
		ПрименитьНастройки(Результат);
		
	КонецЕсли;	
	
КонецПроцедуры // ПрименениеНастроек

&НаСервере
Процедура КонвертироватьНастройкиОбработкиСервер()

    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
    ОбработкаОбъект.КонвертироватьНастройкиОбработки();
   
КонецПроцедуры // КонвертироватьНастройкиОбработкиСервер()

#КонецОбласти

#КонецОбласти
