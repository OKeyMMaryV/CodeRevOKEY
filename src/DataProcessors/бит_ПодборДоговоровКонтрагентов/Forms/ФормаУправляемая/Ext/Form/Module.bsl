
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	// Заполним структуру параметров
	фСтруктураПараметров = Новый Структура;
	Если Параметры.Свойство("СтруктураПараметров") Тогда
		Для каждого ТекПараметр Из Параметры.СтруктураПараметров Цикл
			фСтруктураПараметров.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ фСтруктураПараметров.Свойство("ИмяМакета") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИмяМакета = фСтруктураПараметров.ИмяМакета;
	
	// Изменение кода. Начало. 11.04.2016{{
	Если ИмяМакета = "ФормированиеРезерва" Тогда
	
		ИмяМакета = "СУчетомПросрочки";
		АлгоритмПодбора = Перечисления.бит_му_АлгоритмПодбораОбесценениеДебиторскойЗадолженности.СУчетомПросрочки;
		Элементы.АлгоритмПодбора.Видимость = Истина;
		
	Иначе	
		Элементы.АлгоритмПодбора.Видимость = Ложь;
	КонецЕсли; 
	// Изменение кода. Конец. 11.04.2016}}
	
	Если ИмяМакета = "ФормированиеРезерва" Тогда
		Элементы.РезультатСчетРезерва.Видимость 			= Ложь;
	ИначеЕсли ИмяМакета = "ВозвратРезерва" Тогда
		Элементы.РезультатСчетУчета.Видимость				= Ложь;
	КонецЕсли;
	
	// Инициализируем настройки компоновщика
	АдресСхемыКомпоновкиДанных = Обработки.бит_ПодборДоговоровКонтрагентов.ИнициализироватьКомпоновщик(Объект.Компоновщик, УникальныйИдентификатор, ИмяМакета);
	
	Элементы.КомпоновщикПользовательскиеНастройки.РежимОтображения = РежимОтображенияНастроекКомпоновкиДанных.БыстрыйДоступ;	
	
	// Установим заголовок формы
	ЭтаФорма.АвтоЗаголовок = Ложь;
	ЭтаФорма.Заголовок = Метаданные.Обработки.бит_ПодборДоговоровКонтрагентов.Синоним + " - " + фСтруктураПараметров.Документ.Ссылка;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АлгоритмПодбораПриИзменении(Элемент)
	
	АлгоритмПодбораПриИзмененииСервер();
	
КонецПроцедуры

// Процедура обработчик события "ПриИзменении" поля АлгоритмПодбора.
//
&НаСервере
Процедура АлгоритмПодбораПриИзмененииСервер()

	Если АлгоритмПодбора = Перечисления.бит_му_АлгоритмПодбораОбесценениеДебиторскойЗадолженности.СУчетомПросрочки Тогда
	
		ИмяМакета = "СУчетомПросрочки";
		
	Иначе	
		ИмяМакета = "ФормированиеРезерва";
	КонецЕсли; 
	
	// Инициализируем настройки компоновщика
	АдресСхемыКомпоновкиДанных = Обработки.бит_ПодборДоговоровКонтрагентов.ИнициализироватьКомпоновщик(Объект.Компоновщик, УникальныйИдентификатор, ИмяМакета);

КонецПроцедуры // АлгоритмПодбораПриИзмененииСервер()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура-обработчик команды "Выполнить"
// 
&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ПолучитьРезультатЗапроса();
	
КонецПроцедуры

// Процедура-обработчик команды "Загрузить"
// 
&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ДобавитьВыбранныеСтроки(Истина);
	
КонецПроцедуры

// Процедура-обработчик команды "Добавить"
// 
&НаКлиенте
Процедура КомандаДобавить(Команда)
	
	ДобавитьВыбранныеСтроки(Ложь);
	
КонецПроцедуры

// Процедура-обработчик команды "Инвертировать".
// 
&НаКлиенте
Процедура КомандаИнвертировать(Команда)
	
	Для каждого ТекСтр Из Объект.Результат Цикл
		ТекСтр.Использование = НЕ ТекСтр.Использование;
	КонецЦикла;
	
КонецПроцедуры

// Процедура-обработчик команды "СнятьВсе"
// 
&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	Для каждого ТекСтр Из Объект.Результат Цикл
		ТекСтр.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Процедура-обработчик команды "УстановитьВсе".
// 
&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)

	Для каждого ТекСтр Из Объект.Результат Цикл
		ТекСтр.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет запрос и заполняет табличную часть "Результат".
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ПолучитьРезультатЗапроса()

	// Изменение кода. Начало. 11.04.2016{{
	Если АлгоритмПодбора = Перечисления.бит_му_АлгоритмПодбораОбесценениеДебиторскойЗадолженности.СУчетомПросрочки Тогда
		
		Объект.Результат.Очистить();
		Результат = Обработки.бит_ПодборДоговоровКонтрагентов.ВыполнитьЗапросСУчетомПросрочки(Объект.Компоновщик, АдресСхемыКомпоновкиДанных, фСтруктураПараметров, Объект.Результат);
		
	Иначе
		Результат = Обработки.бит_ПодборДоговоровКонтрагентов.ВыполнитьЗапросПоНастройке(Объект.Компоновщик, АдресСхемыКомпоновкиДанных, фСтруктураПараметров);
		Объект.Результат.Загрузить(Результат);
	КонецЕсли; 
	// Изменение кода. Конец. 11.04.2016}}
	
КонецПроцедуры // ПолучитьРезультатЗапроса() 

// Процедура заполняет ТЧ документа выбранными строками.
// 
// ОчищатьТабличнуюЧасть - Булево.
// 
&НаКлиенте
Процедура ДобавитьВыбранныеСтроки(ОчищатьТабличнуюЧасть)

	МассивСтрокТЧ = Новый Массив;
	
	Для каждого ТекСтр Из Объект.Результат Цикл
		Если ТекСтр.Использование Тогда
			СтрокаТЧ = Новый Структура("Контрагент, ДоговорКонтрагента, СуммаОбязательства, Процент, 
									   |СуммаРезерва, СчетУчета, СчетРезерва");
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекСтр);
			МассивСтрокТЧ.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("МассивСтрок", 			МассивСтрокТЧ);
	СтруктураРезультата.Вставить("ОчищатьТабличнуюЧасть", 	ОчищатьТабличнуюЧасть);
	
	ОповеститьОВыборе(СтруктураРезультата);

КонецПроцедуры // ДобавитьВыбранныеСтроки()

#КонецОбласти

