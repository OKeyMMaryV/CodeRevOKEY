&НаКлиенте
Перем МассивОрганизацийПериметра;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьПоляПериметра();
	
	Элементы.ТабличнаяЧастьНомерСтроки.Доступность = Ложь;
	
КонецПроцедуры

//&НаКлиенте
&НаСервере
Процедура ЗаполнитьФормуНастройками()
	
	Объект.ТабличнаяЧасть.Очистить();
	
	НаборНастроек = РегистрыСведений.бит_му_Настройки.СоздатьНаборЗаписей();
	НаборНастроек.Отбор.Группа.Установить("Обработка проведения по регистру НРП ВНА");
	НаборНастроек.Прочитать();
	
	ТаблицаИмеющихсяНастроек = НаборНастроек.Выгрузить();
	
	ТаблицаИмеющихсяНастроек.Сортировать("Значение Возр");
	
	Для Каждого Настройка Из ТаблицаИмеющихсяНастроек Цикл
		
		Если Настройка.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Настройка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ТабличнаяЧасть.Добавить();
		НоваяСтрока.Шаг = Настройка.ИмяНастройки;
				
	КонецЦикла;
	   
	Объект.ТабличнаяЧасть[0].Выполнить = Истина;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСчетВыручки()
	ОтборНастроек = Новый Структура("ИмяНастройки", "Счет выручки по услугам заказчика-застройщика");
	
	НаборЗаписейСчетВыручки = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборНастроек, "бит_му_Настройки");
	
	Если НаборЗаписейСчетВыручки.Количество() = 0 Тогда
		Сообщить("Счет выручки не найден в настройках МСФО, заполнен не будет", СтатусСообщения.Важное);
		Возврат ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	Иначе
		Возврат НаборЗаписейСчетВыручки[0].Значение;
	КонецЕсли;
КонецФункции
 
&НаСервере
Функция ПолучитьСчетВыбытия()
	ОтборНастроек = Новый Структура("ИмяНастройки", "Счет выбытия ОС МСФО");
	
	НаборЗаписейСчетВыбытия = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборНастроек, "бит_му_Настройки");
	
	Если НаборЗаписейСчетВыбытия.Количество() = 0 Тогда
		Возврат ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	Иначе
		Возврат НаборЗаписейСчетВыбытия[0].Значение;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВыполнитКоманда(Команда)
	
	Отказ = Ложь;
	
	Если Объект.СоздатьДляПериметра И НЕ ЗначениеЗаполнено(Объект.ПериметрКонсолидации) Тогда
		Сообщить("Требуется заполнить периметр консолидации");
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.СоздатьДляПериметра И НЕ (ЗначениеЗаполнено(Объект.ОрганизацияЗаказчик) И ЗначениеЗаполнено(Объект.ОрганизацияПодрядчик)) Тогда
		Сообщить("Заполните обе организации");
		Возврат;
	КонецЕсли;

	
	//Найдем счет выручки
	СчетВыручки = ПолучитьСчетВыручки();
	
	//Найдем счет выбытия
	СчетВыбытия = ПолучитьСчетВыбытия();
	
	//получим массив организаций периметра
	Если Объект.СоздатьДляПериметра Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ПериметрКонсолидации) Тогда
			Сообщить("Требуется заполнить периметр консолидации", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		МассивОрганизацийПериметра = ПолучитьМассивОрганизацийНаСервере(Объект.ПериметрКонсолидации);
		
		Если МассивОрганизацийПериметра.Количество() = 0 Тогда
			Сообщить("Для периметра: " + Объект.ПериметрКонсолидации + " не отобрано ни одной организации");
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Если Элементы.ТабличнаяЧасть.ТекущиеДанные.Выполнить = Ложь Тогда
		
		Сообщить("В текущей строке не установлен признак Выполнить. Документ создан не будет");
		Возврат;
		
	КонецЕсли;
	
	МассивСозданныхПроводок = "";
	
	Если  Элементы.ТабличнаяЧасть.ТекущиеДанные.Шаг = "Проверка документов реализации/передачи подрядчика на изменение" Тогда
		
		ПроверкаДокументовРеализацииПередачи(Отказ, МассивОрганизацийПериметра);
		
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущиеДанные.Шаг = "Анализ  документов ""Поступление товаров и услуг"" и ""Поступление доп. Расходов""" Тогда
		
		АнализДокументовПоступления(Отказ, СчетВыручки, МассивСозданныхПроводок, МассивОрганизацийПериметра);
		
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущиеДанные.Шаг = "Анализ  документов ""Принятие к учету ОС (МСФО)"" и ""Модернизация ОС (МСФО)""" Тогда
		
		АнализДокументовПринятиеМодернизация(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра);
		
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущиеДанные.Шаг = "Анализ документов ""Изменение параметров учета ОС (МСФО)""" Тогда
		
		АнализИзмененияПараметровОС(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра);
		
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущиеДанные.Шаг = "Анализ документов ""Перемещение ОС (МСФО)""" Тогда
		
		АнализПеремещениеОС(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра);
		
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущиеДанные.Шаг = "Анализ документов ""Начисление амортизации""" Тогда
		
		АнализАмортизацииОС(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра);
		
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущиеДанные.Шаг = "Анализ документов ""Выбытие ОС (МСФО)""" Тогда
		
		АнализВыбытияОС(Отказ, СчетВыбытия, МассивСозданныхПроводок, МассивОрганизацийПериметра);
		
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущиеДанные.Шаг = "Запуск проверочного отчета по Счету учета актива" Тогда
		
		ЗапуститьПроверочныеОтчеты();
		
	ИначеЕсли Элементы.ТабличнаяЧасть.ТекущиеДанные.Шаг = "Запуск проверочного отчета по Счету выручки" Тогда
		
		ЗапуститьПроверочныйОтчетПоВыручке();
		
	КонецЕсли;	 
	
	Если Не Отказ Тогда
		УсловноеОформлениеНаСервере(Элементы.ТабличнаяЧасть.ТекущиеДанные.НомерСтроки-1);
		Объект.ТабличнаяЧасть[Элементы.ТабличнаяЧасть.ТекущиеДанные.НомерСтроки-1].Сделано   = Истина;
		Объект.ТабличнаяЧасть[Элементы.ТабличнаяЧасть.ТекущиеДанные.НомерСтроки-1].СозданныеЗаписиРегистра = МассивСозданныхПроводок;
		Элементы.ДатаКон.ТолькоПросмотр = Истина;
		Элементы.ДатаНач.ТолькоПросмотр = Истина;
		Элементы.ОрганизацияЗаказчик.ТолькоПросмотр = Истина;
		Элементы.ОрганизацияПодрядчик.ТолькоПросмотр = Истина;
		Элементы.СоздатьДляПериметра.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ТабличнаяЧасть.ТекущаяСтрока = Элементы.ТабличнаяЧасть.ТекущиеДанные.НомерСтроки + 1;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивОрганизацийНаСервере(Периметр)
	
	ЗапросОрганизацийПериметра = Новый Запрос;
	ЗапросОрганизацийПериметра.Текст = "ВЫБРАТЬ
	                                   |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
	                                   |ИЗ
	                                   |	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&ДатаСреза, ПериметрКонсолидации = &Периметр) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	                                   |ГДЕ
	                                   |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ТипКонсолидации <> &ТипКонсолидации
	                                   |
	                                   |СГРУППИРОВАТЬ ПО
	                                   |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация";
	ЗапросОрганизацийПериметра.УстановитьПараметр("Периметр", Периметр);
	ЗапросОрганизацийПериметра.УстановитьПараметр("ДатаСреза", Объект.ДатаНач);
	ЗапросОрганизацийПериметра.УстановитьПараметр("ТипКонсолидации", Перечисления.бит_му_ТипыКонсолидации.Консолидирующая);
	
	Массив = Новый Массив;
	ВЫборкаОрганизаций = ЗапросОрганизацийПериметра.Выполнить().Выбрать();
	Пока ВЫборкаОрганизаций.Следующий() Цикл
		Массив.Добавить(ВыборкаОрганизаций.Организация);		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаДокументовРеализацииПередачи(Отказ, МассивОрганизацийПериметра)
	
	ПроверкаДокументовРеализацииПередачиНаСервере(Отказ, МассивОрганизацийПериметра);
	
	Если Отказ Тогда
		Ответ = Вопрос("Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаДокументовРеализацииПередачиНаСервере(Отказ, МассивОрганизацийПериметра)
	
	ЗапросДокументов = Новый Запрос();
	ЗапросДокументов.Текст = "ВЫБРАТЬ
	                         |	ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи,
	                         |	ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.бит_Сумма,
	                         |	ВЫБОР
	                         |		КОГДА ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Ссылка ССЫЛКА Документ.ОперацияБух
	                         |			ТОГДА ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаОперации
	                         |		ИНАЧЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаДокумента
	                         |	КОНЕЦ КАК СуммаДокумента,
	                         |	ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка КАК ДокументВладелец
	                         |ПОМЕСТИТЬ ВТДокументыИзТЧПоступлений
	                         |ИЗ
	                         |	Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2 КАК бит_Дополнительный_2
	                         |		ПО (бит_Дополнительный_2.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка))
	                         |			И ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи = бит_Дополнительный_2.Регистратор
	                         |ГДЕ
	                         |	ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Организация В(&ОрганизацияПодрядчик)
	                         |	И ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка.Организация В(&ОрганизацияЗаказчик)
	                         |	И ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка.Проведен = ИСТИНА
	                         |	И бит_Дополнительный_2.Период >= &ДатаНач
	                         |	И бит_Дополнительный_2.Период <= &ДатаКон
	                         |
	                         |СГРУППИРОВАТЬ ПО
	                         |	ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи,
	                         |	ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.бит_Сумма,
	                         |	ВЫБОР
	                         |		КОГДА ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Ссылка ССЫЛКА Документ.ОперацияБух
	                         |			ТОГДА ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаОперации
	                         |		ИНАЧЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаДокумента
	                         |	КОНЕЦ,
	                         |	ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка
	                         |
	                         |ОБЪЕДИНИТЬ ВСЕ
	                         |
	                         |ВЫБРАТЬ
	                         |	ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи,
	                         |	ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.бит_Сумма,
	                         |	ВЫБОР
	                         |		КОГДА ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Ссылка ССЫЛКА Документ.ОперацияБух
	                         |			ТОГДА ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаОперации
	                         |		ИНАЧЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаДокумента
	                         |	КОНЕЦ,
	                         |	ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка
	                         |ИЗ
	                         |	Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2 КАК бит_Дополнительный_2
	                         |		ПО (бит_Дополнительный_2.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка))
	                         |			И ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи = бит_Дополнительный_2.Регистратор
	                         |ГДЕ
	                         |	ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Организация В(&ОрганизацияПодрядчик)
	                         |	И ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка.Организация В(&ОрганизацияЗаказчик)
	                         |	И ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка.Проведен = ИСТИНА
	                         |	И бит_Дополнительный_2.Период >= &ДатаНач
	                         |	И бит_Дополнительный_2.Период <= &ДатаКон
	                         |
	                         |ОБЪЕДИНИТЬ ВСЕ
	                         |
	                         |ВЫБРАТЬ
	                         |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи,
	                         |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.бит_Сумма,
	                         |	ВЫБОР
	                         |		КОГДА бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Ссылка ССЫЛКА Документ.бит_ОперацияУправленческий
	                         |			ТОГДА бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаОперацииУпр
	                         |		КОГДА бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Ссылка ССЫЛКА Документ.ОперацияБух
	                         |			ТОГДА бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаОперации
	                         |		ИНАЧЕ бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаДокумента
	                         |	КОНЕЦ,
	                         |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.Ссылка
	                         |ИЗ
	                         |	Документ.бит_му_ПоступлениеТоваровУслугПоКЗ.бит_ДокументыСобственныхКонтрагентов КАК бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2 КАК бит_Дополнительный_2
	                         |		ПО (бит_Дополнительный_2.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка))
	                         |			И бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи = бит_Дополнительный_2.Регистратор
	                         |ГДЕ
	                         |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Организация В(&ОрганизацияПодрядчик)
	                         |	И бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.Ссылка.Организация В(&ОрганизацияЗаказчик)
	                         |	И бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.Ссылка.Проведен = ИСТИНА
	                         |	И бит_Дополнительный_2.Период >= &ДатаНач
	                         |	И бит_Дополнительный_2.Период <= &ДатаКон
	                         |
	                         |СГРУППИРОВАТЬ ПО
	                         |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи,
	                         |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.бит_Сумма,
	                         |	ВЫБОР
	                         |		КОГДА бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Ссылка ССЫЛКА Документ.бит_ОперацияУправленческий
	                         |			ТОГДА бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаОперацииУпр
	                         |		КОГДА бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Ссылка ССЫЛКА Документ.ОперацияБух
	                         |			ТОГДА бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаОперации
	                         |		ИНАЧЕ бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.СуммаДокумента
	                         |	КОНЕЦ,
	                         |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.Ссылка
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ВТДокументыИзТЧПоступлений.ДокументРеализацииПередачи,
	                         |	ВТДокументыИзТЧПоступлений.бит_Сумма,
	                         |	ВТДокументыИзТЧПоступлений.СуммаДокумента,
	                         |	ВТДокументыИзТЧПоступлений.ДокументВладелец,
	                         |	бит_му_НРП_ВНА.СчетВыручки,
	                         |	ВЫБОР
	                         |		КОГДА бит_Дополнительный_2ПустойВидПроводки.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка)
	                         |			ТОГДА ИСТИНА
	                         |		ИНАЧЕ ЛОЖЬ
	                         |	КОНЕЦ КАК Проведен,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.НомерСтроки КАК НомерСтроки,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.СчетКт КАК СчетКт,
	                         |	бит_му_НРП_ВНА.Субконто1СчетаВыручки,
	                         |	бит_му_НРП_ВНА.Субконто2СчетаВыручки,
	                         |	бит_му_НРП_ВНА.Субконто3СчетаВыручки,
	                         |	бит_му_НРП_ВНА.Субконто4СчетаВыручки,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт1,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт2,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт3,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт4
	                         |ИЗ
	                         |	ВТДокументыИзТЧПоступлений КАК ВТДокументыИзТЧПоступлений
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                         |		ПО ВТДокументыИзТЧПоступлений.ДокументРеализацииПередачи.Ссылка = бит_му_НРП_ВНА.ДокументРеализации
							 // --> BIT AGoncharenko CR#267 04.05.2015
							 //|			И (бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиПТиУ)
							 |			И (бит_му_НРП_ВНА.ИсточникЗаписи В (&ИсточникЗаписиПТиУ))
							 // <-- BIT AGoncharenko
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2 КАК бит_Дополнительный_2ПустойВидПроводки
	                         |		ПО ВТДокументыИзТЧПоступлений.ДокументРеализацииПередачи.Ссылка = бит_Дополнительный_2ПустойВидПроводки.Регистратор
	                         |			И (бит_Дополнительный_2ПустойВидПроводки.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка))
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(
	                         |				,
	                         |				,
	                         |				Организация В (&ОрганизацияПодрядчик)
	                         |					И Регистратор В
	                         |						(ВЫБРАТЬ
	                         |							ВТДокументыИзТЧПоступлений.ДокументРеализацииПередачи
	                         |						ИЗ
	                         |							ВТДокументыИзТЧПоступлений КАК ВТДокументыИзТЧПоступлений),
	                         |				,
	                         |				) КАК бит_Дополнительный_2ПерваяСтрокаССубконто
	                         |		ПО ВТДокументыИзТЧПоступлений.ДокументРеализацииПередачи.Ссылка = бит_Дополнительный_2ПерваяСтрокаССубконто.Регистратор
	                         |			И (бит_Дополнительный_2ПерваяСтрокаССубконто.НомерСтроки = 1)
	                         |ГДЕ
	                         |	(НЕ ВТДокументыИзТЧПоступлений.бит_Сумма = ВТДокументыИзТЧПоступлений.СуммаДокумента
	                         |			ИЛИ НЕ(бит_му_НРП_ВНА.СчетВыручки ЕСТЬ NULL 
	                         |					ИЛИ бит_Дополнительный_2ПерваяСтрокаССубконто.СчетКт = бит_му_НРП_ВНА.СчетВыручки
	                         |						И ЕСТЬNULL(бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО) = бит_му_НРП_ВНА.Субконто1СчетаВыручки
	                         |						И ЕСТЬNULL(бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО) = бит_му_НРП_ВНА.Субконто2СчетаВыручки
	                         |						И ЕСТЬNULL(бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО) = бит_му_НРП_ВНА.Субконто3СчетаВыручки
	                         |						И ЕСТЬNULL(бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт4, НЕОПРЕДЕЛЕНО) = бит_му_НРП_ВНА.Субконто4СчетаВыручки)
	                         |			ИЛИ бит_Дополнительный_2ПерваяСтрокаССубконто.НомерСтроки ЕСТЬ NULL 
	                         |			ИЛИ бит_Дополнительный_2ПустойВидПроводки.НомерСтроки ЕСТЬ NULL )
	                         |
	                         |СГРУППИРОВАТЬ ПО
	                         |	ВТДокументыИзТЧПоступлений.ДокументРеализацииПередачи,
	                         |	ВТДокументыИзТЧПоступлений.бит_Сумма,
	                         |	ВТДокументыИзТЧПоступлений.СуммаДокумента,
	                         |	ВТДокументыИзТЧПоступлений.ДокументВладелец,
	                         |	бит_му_НРП_ВНА.СчетВыручки,
	                         |	ВЫБОР
	                         |		КОГДА бит_Дополнительный_2ПустойВидПроводки.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка)
	                         |			ТОГДА ИСТИНА
	                         |		ИНАЧЕ ЛОЖЬ
	                         |	КОНЕЦ,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.НомерСтроки,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.СчетКт,
	                         |	бит_му_НРП_ВНА.Субконто2СчетаВыручки,
	                         |	бит_му_НРП_ВНА.Субконто1СчетаВыручки,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт1,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт2,
	                         |	бит_му_НРП_ВНА.Субконто3СчетаВыручки,
	                         |	бит_му_НРП_ВНА.Субконто4СчетаВыручки,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт3,
	                         |	бит_Дополнительный_2ПерваяСтрокаССубконто.СубконтоКт4";

	
	ЗапросДокументов.УстановитьПараметр("ОрганизацияПодрядчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияПодрядчик));
	ЗапросДокументов.УстановитьПараметр("ОрганизацияЗаказчик" , ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияЗаказчик));
	ЗапросДокументов.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаНач));
	ЗапросДокументов.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
	// --> BIT AGoncharenko CR#267 04.05.2015
	//ЗапросДокументов.УстановитьПараметр("ИсточникЗаписиПТиУ", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПоступлениеТоваровУслугПоступлениеДопРасходов);
	ИсточникЗаписиПТиУ = Новый Массив;
	ИсточникЗаписиПТиУ.Добавить(Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПоступлениеТоваровУслугПоступлениеДопРасходов);
	ИсточникЗаписиПТиУ.Добавить(Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПоступлениеТоваровУслугПоступлениеДопРасходов_ПередачаОС_НРП);
	// себестоимость актива не добавляем в массив так как там нет счета выручки.
	ЗапросДокументов.УстановитьПараметр("ИсточникЗаписиПТиУ", ИсточникЗаписиПТиУ);
	// <-- BIT AGoncharenko
	//++СВВ
	//ТаблицаДокументов.Загрузить(ЗапросДокументов.Выполнить().Выгрузить());
	ТаблицаРез = ЗапросДокументов.Выполнить().Выгрузить();
	//--СВВ
	
	Если ТаблицаРез.Количество() > 0 Тогда
		Для Каждого КривойДокумент Из ТаблицаРез Цикл
			Если НЕ КривойДокумент.Проведен Тогда
				Сообщить("Документ " + КривойДокумент.ДокументРеализацииПередачи + " не проведен на регистр Международный");
				Отказ = Истина;
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(КривойДокумент.ДокументРеализацииПередачи) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ
				ТипЗнч(КривойДокумент.ДокументРеализацииПередачи) = Тип("ДокументСсылка.ПередачаОС") Тогда // --> BIT AGoncharenko CR#267 25.04.2015
				Если ЗначениеЗаполнено(КривойДокумент.СчетВыручки) 
					И НЕ (КривойДокумент.СчетКт = КривойДокумент.СчетВыручки
					И КривойДокумент.СубконтоКт1 = КривойДокумент.Субконто1СчетаВыручки
					И КривойДокумент.СубконтоКт2 = КривойДокумент.Субконто2СчетаВыручки
					И КривойДокумент.СубконтоКт3 = КривойДокумент.Субконто3СчетаВыручки
					И КривойДокумент.СубконтоКт4 = КривойДокумент.Субконто4СчетаВыручки) Тогда 
					Сообщить("Данные регистра не идут с данными документа реализации: " + КривойДокумент.ДокументРеализацииПередачи + " подобранный в документ: " + КривойДокумент.ДокументВладелец + "(счет выручки и его аналитики).", СтатусСообщения.Важное);
					//Сообщить("Данные регистра не идут с данными документа реализации (счет выручки и его аналитики): " + КривойДокумент.ДокументРеализацииПередачи, СтатусСообщения.Важное);
					Отказ = Истина;
				КонецЕсли;	
			КонецЕсли;
		//КонецЦикла;
		
		//Если Отказ Тогда
		//	Возврат;
		//КонецЕсли;
		
		//Для Каждого КривойДокумент Из ТаблицаДокументов Цикл
			Если НЕ КривойДокумент.бит_Сумма = КривойДокумент.СуммаДокумента Тогда
				//Сообщить("Проверьте документ: " + КривойДокумент.ДокументРеализацииПередачи + " подобранный в документ: " + КривойДокумент.ДокументВладелец + ". Различны сумма документа и сумма в строке связанных документов.", СтатусСообщения.Важное);				
				Сообщить("Сумма на вкладке ""Реализация у собственного ЮЛ"" документа: " + КривойДокумент.ДокументВладелец + " не совпадает с суммой документа реализации в учете организации-подрядчика: " + КривойДокумент.ДокументРеализацииПередачи, СтатусСообщения.Важное); 
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры

//Документы поступления ****************************************************************************************

&НаКлиенте
Процедура АнализДокументовПоступления(Отказ, СчетВыручки, МассивСозданныхПроводок, МассивОрганизацийПериметра)
	
	АдресТаб = "";
	КолЗаписей = 0;
	
	АнализДокументовПоступленияНаСервере(Отказ, СчетВыручки, МассивСозданныхПроводок, МассивОрганизацийПериметра, АдресТаб, КолЗаписей);
	
	Если Отказ Тогда
		ОтветНаВопрос = Вопрос("Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			Отказ = Ложь;
		КонецЕсли;		
	КонецЕсли;
	Если КолЗаписей = 0 Тогда
		Возврат;
	КонецЕсли;

	СоздатьПроводкиПоДокументамПоступления(СчетВыручки, АдресТаб);
	
	Форма = ПолучитьФорму("Обработка.бит_ПроведениеПоРегиструНРПВНА.Форма.ФормаДвиженийУправляемая");
    КопироватьДанныеФормы(Объект, Форма.Объект);
	Форма.Шаг = ПредопределенноеЗначение("Перечисление.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПоступлениеТоваровУслугПоступлениеДопРасходов");
    Форма.ОткрытьМодально();
	
	МассивСозданныхПроводок = ?(Форма.МассивСозданныхПроводок = Неопределено, "", Форма.МассивСозданныхПроводок);
	
КонецПроцедуры

&НаСервере
Процедура АнализДокументовПоступленияНаСервере(Отказ, СчетВыручки, МассивСозданныхПроводок, МассивОрганизацийПериметра, АдресТаб, КолЗаписей)
	
	ЗапросДокументовПоступления = Новый Запрос;										
	ЗапросДокументовПоступления.Текст = "ВЫБРАТЬ
	                                    |	ДокументыПТиУ.Регистратор КАК ДокументВладелец,
	                                    |	ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи,
	                                    |	ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.бит_СуммаБезНДС КАК СуммаБезНДС,
	                                    |	ДокументыПТиУ.Период КАК ДатаПроводки
	                                    |ПОМЕСТИТЬ ВТДокументыРеализации
	                                    |ИЗ
	                                    |	(ВЫБРАТЬ
	                                    |		бит_Дополнительный_2ПТиУ.Регистратор КАК Регистратор,
	                                    |		МАКСИМУМ(бит_Дополнительный_2ПТиУ.Период) КАК Период
	                                    |	ИЗ
	                                    |		РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(
	                                    |				&ДатаНач,
	                                    |				&ДатаКон,
	                                    |				Организация В (&ОрганизацияЗаказчик)
	                                    |					И Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг,
	                                    |				,
	                                    |				) КАК бит_Дополнительный_2ПТиУ
	                                    |	
	                                    |	СГРУППИРОВАТЬ ПО
	                                    |		бит_Дополнительный_2ПТиУ.Регистратор) КАК ДокументыПТиУ
	                                    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
	                                    |		ПО ДокументыПТиУ.Регистратор = ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка
	                                    |ГДЕ
	                                    |	НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи ЕСТЬ NULL 
	                                    |	И ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Организация В(&ОрганизацияПодрядчик)
	                                    |
	                                    |ОБЪЕДИНИТЬ ВСЕ
	                                    |
	                                    |ВЫБРАТЬ
	                                    |	ДокументыПостДопРасх.Регистратор,
	                                    |	ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи,
	                                    |	ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.бит_СуммаБезНДС,
	                                    |	ДокументыПостДопРасх.Период
	                                    |ИЗ
	                                    |	(ВЫБРАТЬ
	                                    |		бит_Дополнительный_2ДвиженияССубконто.Регистратор КАК Регистратор,
	                                    |		МАКСИМУМ(бит_Дополнительный_2ДвиженияССубконто.Период) КАК Период
	                                    |	ИЗ
	                                    |		РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(
	                                    |				&ДатаНач,
	                                    |				&ДатаКон,
	                                    |				Организация В (&ОрганизацияЗаказчик)
	                                    |					И Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов,
	                                    |				,
	                                    |				) КАК бит_Дополнительный_2ДвиженияССубконто
	                                    |	
	                                    |	СГРУППИРОВАТЬ ПО
	                                    |		бит_Дополнительный_2ДвиженияССубконто.Регистратор) КАК ДокументыПостДопРасх
	                                    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
	                                    |		ПО ДокументыПостДопРасх.Регистратор = ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка
	                                    |ГДЕ
	                                    |	НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи ЕСТЬ NULL 
	                                    |	И ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи.Организация В(&ОрганизацияПодрядчик)
	                                    |;
	                                    |
	                                    |////////////////////////////////////////////////////////////////////////////////
	                                    |ВЫБРАТЬ
	                                    |	бит_Дополнительный_2Реализ.Регистратор,
	                                    |	МИНИМУМ(ВЫБОР
	                                    |			КОГДА бит_Дополнительный_2Реализ.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка)
	                                    |				ТОГДА ИСТИНА
	                                    |			ИНАЧЕ ЛОЖЬ
	                                    |		КОНЕЦ) КАК ПустойВидПроводки,
	                                    |	ВТДокументыРеализации.ДокументРеализацииПередачи,
	                                    |	ВТДокументыРеализации.ДокументВладелец,
	                                    |	ВТДокументыРеализации.СуммаБезНДС,
	                                    |	ВТДокументыРеализации.ДатаПроводки КАК ДатаПоступления,
	                                    |	МИНИМУМ(ВЫБОР
	                                    |			КОГДА бит_Дополнительный_2Поступл.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка)
	                                    |				ТОГДА ИСТИНА
	                                    |			ИНАЧЕ ЛОЖЬ
	                                    |		КОНЕЦ) КАК ПустойВидПроводкиПоступл,
	                                    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_Дополнительный_2Реализ.Период) КАК Период,
	                                    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_Дополнительный_2Поступл.Период) КАК ПериодПоступл,
	                                    |	МАКСИМУМ(ВЫБОР
	                                    |			КОГДА бит_Дополнительный_2Реализ.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.Сторно)
	                                    |				ТОГДА ИСТИНА
	                                    |			ИНАЧЕ ЛОЖЬ
	                                    |		КОНЕЦ) КАК СторноВидПроводки,
	                                    |	МАКСИМУМ(ВЫБОР
	                                    |			КОГДА бит_Дополнительный_2Поступл.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.Сторно)
	                                    |				ТОГДА ИСТИНА
	                                    |			ИНАЧЕ ЛОЖЬ
	                                    |		КОНЕЦ) КАК СторноВидПроводкиПоступл,
	                                    |	МАКСИМУМ(ВЫБОР
	                                    |			КОГДА бит_Дополнительный_2Реализ.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод)
	                                    |				ТОГДА ИСТИНА
	                                    |			ИНАЧЕ ЛОЖЬ
	                                    |		КОНЕЦ) КАК ПрошлыйПериодВидПроводки,
	                                    |	МАКСИМУМ(ВЫБОР
	                                    |			КОГДА бит_Дополнительный_2Поступл.ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод)
	                                    |				ТОГДА ИСТИНА
	                                    |			ИНАЧЕ ЛОЖЬ
	                                    |		КОНЕЦ) КАК ПрошлыйПериодВидПроводкиПоступл
	                                    |ИЗ
	                                    |	ВТДокументыРеализации КАК ВТДокументыРеализации
	                                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2 КАК бит_Дополнительный_2Реализ
	                                    |		ПО ВТДокументыРеализации.ДокументРеализацииПередачи = бит_Дополнительный_2Реализ.Регистратор
	                                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2 КАК бит_Дополнительный_2Поступл
	                                    |		ПО ВТДокументыРеализации.ДокументВладелец = бит_Дополнительный_2Поступл.Регистратор
	                                    |
	                                    |СГРУППИРОВАТЬ ПО
	                                    |	бит_Дополнительный_2Реализ.Регистратор,
	                                    |	ВТДокументыРеализации.ДокументРеализацииПередачи,
	                                    |	ВТДокументыРеализации.ДокументВладелец,
	                                    |	ВТДокументыРеализации.СуммаБезНДС,
	                                    |	ВТДокументыРеализации.ДатаПроводки";
	
	ЗапросДокументовПоступления.УстановитьПараметр("ОрганизацияЗаказчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияЗаказчик));
	ЗапросДокументовПоступления.УстановитьПараметр("ОрганизацияПодрядчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияПодрядчик));
	ЗапросДокументовПоступления.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаНач));
	ЗапросДокументовПоступления.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
	
	ТаблицаДокументовПоступления = ЗапросДокументовПоступления.Выполнить().Выгрузить();
	
	мКоличество = ТаблицаДокументовПоступления.Количество();
	КолЗаписей = ТаблицаДокументовПоступления.Количество();
	
	Для Сч = 1 По мКоличество Цикл 
		//Каждого СтрокаТаблицыДокументов ИЗ ТаблицаДокументовПоступления Цикл
		СтрокаТаблицыДокументов = ТаблицаДокументовПоступления[мКоличество - Сч];
		УдалитьСтроку = Ложь;
		Если (НЕ СтрокаТаблицыДокументов.ПустойВидПроводки 
			И СтрокаТаблицыДокументов.Период > 1
			И СтрокаТаблицыДокументов.СторноВидПроводки = СтрокаТаблицыДокументов.ПрошлыйПериодВидПроводки)
			ИЛИ (НЕ СтрокаТаблицыДокументов.ПустойВидПроводки
			И НЕ СтрокаТаблицыДокументов.СторноВидПроводки = СтрокаТаблицыДокументов.ПрошлыйПериодВидПроводки) Тогда
			Сообщить("У документа: " + СтрокаТаблицыДокументов.ДокументРеализацииПередачи + ", подобранного в " + СтрокаТаблицыДокументов.ДокументВладелец +  " имеются сторно проводки или проводки прошлого периода с датой, отличной от проводок открытого периода");
			Отказ = Истина;
			УдалитьСтроку = Истина;
		КонецЕсли;
		Если (НЕ СтрокаТаблицыДокументов.ПустойВидПроводкиПоступл 
			И СтрокаТаблицыДокументов.ПериодПоступл > 1
			И СтрокаТаблицыДокументов.СторноВидПроводкиПоступл = СтрокаТаблицыДокументов.ПрошлыйПериодВидПроводкиПоступл)
			ИЛИ (НЕ СтрокаТаблицыДокументов.ПустойВидПроводкиПоступл
			И НЕ СтрокаТаблицыДокументов.СторноВидПроводкиПоступл = СтрокаТаблицыДокументов.ПрошлыйПериодВидПроводкиПоступл) Тогда
			Сообщить("У документа: " + СтрокаТаблицыДокументов.ДокументВладелец +  " имеются сторно проводки или проводки прошлого периода с датой, отличной от проводок открытого периода");
			Отказ = Истина;	
			УдалитьСтроку = Истина;
		КонецЕсли;
		Если СтрокаТаблицыДокументов.Регистратор = NULL Тогда
			Сообщить("У документа: " + СтрокаТаблицыДокументов.ДокументРеализацииПередачи + " нет проводок по МСФО");
			Отказ = Истина;
			УдалитьСтроку = Истина;
		КонецЕсли;
		Если УдалитьСтроку Тогда
			 ТаблицаДокументовПоступления.Удалить(СтрокаТаблицыДокументов);
		КонецЕсли;
	КонецЦикла;
	
	АдресТаб = ПоместитьВоВременноеХранилище(ТаблицаДокументовПоступления, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПроводкиПоДокументамПоступления(СчетВыручки, АдресТаб)
	
	Если АдресТаб <> "" Тогда
		ТаблицаДокументовПоступления = ПолучитьИзВременногоХранилища(АдресТаб);
		
		Если ТаблицаДокументовПоступления.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СоздатьПроводкиПоНРПВНАШаг2(ТаблицаДокументовПоступления, СчетВыручки);
	КонецЕсли;
	
КонецПроцедуры

//Документы принятия модернизации ****************************************************************************

&НаКлиенте
Процедура АнализДокументовПринятиеМодернизация(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра)
	
	ЕстьДвижения = Ложь;
	АнализДокументовПринятиеМодернизацияНаСервере(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра, ЕстьДвижения);
	
	Если ЕстьДвижения Тогда
		Форма = ПолучитьФорму("Обработка.бит_ПроведениеПоРегиструНРПВНА.Форма.ФормаДвиженийУправляемая");
		КопироватьДанныеФормы(Объект, Форма.Объект);
		Форма.Шаг = ПредопределенноеЗначение("Перечисление.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПринятиеКУчетуОСМСФО_МодернизацияОСМСФО_НРПпоВНАРСБУ");
		Форма.ОткрытьМодально();
		
		МассивСозданныхПроводок = ?(Форма.МассивСозданныхПроводок = Неопределено, "", Форма.МассивСозданныхПроводок); 												 
	КонецЕсли; 
	
КонецПроцедуры	

&НаСервере
Процедура АнализДокументовПринятиеМодернизацияНаСервере(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра, ЕстьДвижения)
	
	ЗапросДокументовПринятияМодернизации = Новый Запрос;
	ЗапросДокументовПринятияМодернизации.Текст = "ВЫБРАТЬ
												// +СБ Кузнецова С. 2016-09-22 Redmine 2651
	                                             |	ПринятиеКУчетуОССБ_ДокументыПоступления.ДокументПоступления
	                                             |ПОМЕСТИТЬ ДокументыПоступления
	                                             |ИЗ
	                                             |	Документ.ПринятиеКУчетуОС.СБ_ДокументыПоступления КАК ПринятиеКУчетуОССБ_ДокументыПоступления
												 // +СБ Кузнецова С. 2016-11-03 Redmine 2726
												 //|ГДЕ
												 //|	ПринятиеКУчетуОССБ_ДокументыПоступления.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
												 //|	И ПринятиеКУчетуОССБ_ДокументыПоступления.Ссылка.Проведен
												 //|	И ПринятиеКУчетуОССБ_ДокументыПоступления.Ссылка.Организация В(&ОрганизацияЗаказчик)
	                                             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Обороты(&ДатаНач, &ДатаКон, Регистратор, , , Организация = &ОрганизацияЗаказчик, , ) КАК бит_Дополнительный_2Обороты
	                                             |		ПО (ПринятиеКУчетуОССБ_ДокументыПоступления.Ссылка = бит_Дополнительный_2Обороты.Регистратор)
	                                             |СГРУППИРОВАТЬ ПО
	                                             |	ПринятиеКУчетуОССБ_ДокументыПоступления.ДокументПоступления
												 // -СБ Кузнецова С.
	                                             |;
	                                             |
	                                             |////////////////////////////////////////////////////////////////////////////////
	                                             |ВЫБРАТЬ
	                                             |	ДокументыПоступления.ДокументПоступления,
	                                             |	ПоступлениеТоваровУслугОборудование.Номенклатура,
	                                             |	ПоступлениеТоваровУслугОборудование.Сумма
	                                             |ПОМЕСТИТЬ ПоступившееОборудование
	                                             |ИЗ
	                                             |	ДокументыПоступления КАК ДокументыПоступления
	                                             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	                                             |		ПО ДокументыПоступления.ДокументПоступления = ПоступлениеТоваровУслугОборудование.Ссылка
	                                             |;
	                                             |
	                                             |////////////////////////////////////////////////////////////////////////////////
												// -СБ Кузнецова С.
	                                             |ВЫБРАТЬ
	                                             |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Ссылка КАК ДокументПринятиеМодернизация,
	                                             |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.ДокументРСБУ КАК ДокументРСБУ
	                                             |ПОМЕСТИТЬ ВТДокументыРСБУ
	                                             |ИЗ
	                                             |	Документ.бит_му_ПринятиеКУчетуОС.бит_окей_СоставОсновныхСредств КАК бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств
	                                             |ГДЕ
	                                             |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                                             |	И (бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.ДокументРСБУ ССЫЛКА Документ.ПоступлениеТоваровУслуг
	                                             |			ИЛИ бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.ДокументРСБУ ССЫЛКА Документ.ПоступлениеДопРасходов)
	                                             |	И бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Ссылка.Организация В (&ОрганизацияЗаказчик)
	                                             |	И бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Ссылка.Проведен = ИСТИНА
	                                             |
	                                             |СГРУППИРОВАТЬ ПО
	                                             |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Ссылка,
	                                             |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.ДокументРСБУ
	                                             |
	                                             |ОБЪЕДИНИТЬ ВСЕ
	                                             |
	                                             |ВЫБРАТЬ
	                                             |	бит_му_МодернизацияОСОсновныеСредстваКонсолидированные.Ссылка,
	                                             |	бит_му_МодернизацияОСОсновныеСредстваКонсолидированные.ДокументРСБУ
	                                             |ИЗ
	                                             |	Документ.бит_му_МодернизацияОС.ОсновныеСредстваКонсолидированные КАК бит_му_МодернизацияОСОсновныеСредстваКонсолидированные
	                                             |ГДЕ
	                                             |	бит_му_МодернизацияОСОсновныеСредстваКонсолидированные.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                                             |	И (бит_му_МодернизацияОСОсновныеСредстваКонсолидированные.ДокументРСБУ ССЫЛКА Документ.ПоступлениеТоваровУслуг
	                                             |			ИЛИ бит_му_МодернизацияОСОсновныеСредстваКонсолидированные.ДокументРСБУ ССЫЛКА Документ.ПоступлениеДопРасходов)
	                                             |	И бит_му_МодернизацияОСОсновныеСредстваКонсолидированные.Ссылка.Организация В (&ОрганизацияЗаказчик)
	                                             |	И бит_му_МодернизацияОСОсновныеСредстваКонсолидированные.Ссылка.Проведен = ИСТИНА
	                                             |
	                                             |СГРУППИРОВАТЬ ПО
	                                             |	бит_му_МодернизацияОСОсновныеСредстваКонсолидированные.Ссылка,
	                                             |	бит_му_МодернизацияОСОсновныеСредстваКонсолидированные.ДокументРСБУ
												 // +СБ Кузнецова С. 2016-09-22 Redmine 2651
	                                             |												 
	                                             |ОБЪЕДИНИТЬ ВСЕ
	                                             |
	                                             |ВЫБРАТЬ
	                                             |	ПринятиеКУчетуОСОС.Ссылка,
	                                             |	ПоступившееОборудование.ДокументПоступления
	                                             |ИЗ
	                                             |	Документ.ПринятиеКУчетуОС.ОС КАК ПринятиеКУчетуОСОС
												 // +СБ Кузнецова С. 2016-11-03 Redmine 2726
	                                             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Обороты(&ДатаНач, &ДатаКон, Регистратор, , , Организация = &ОрганизацияЗаказчик, , ) КАК бит_Дополнительный_2Обороты
	                                             |		ПО (ПринятиеКУчетуОСОС.Ссылка = бит_Дополнительный_2Обороты.Регистратор)
												 // -СБ Кузнецова С.
	                                             |		ЛЕВОЕ СОЕДИНЕНИЕ ПоступившееОборудование КАК ПоступившееОборудование
	                                             |		ПО ПринятиеКУчетуОСОС.Ссылка.Номенклатура = ПоступившееОборудование.Номенклатура
												 // +СБ Кузнецова С. 2016-11-03 Redmine 2726
												 //|ГДЕ
												 //|	ПринятиеКУчетуОСОС.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
												 //|	И ПринятиеКУчетуОСОС.Ссылка.Организация В(&ОрганизацияЗаказчик)
												 //|	И ПринятиеКУчетуОСОС.Ссылка.Проведен = ИСТИНА
												 // -СБ Кузнецова С.
	                                             |
	                                             |СГРУППИРОВАТЬ ПО
	                                             |	ПринятиеКУчетуОСОС.Ссылка,
	                                             |	ПоступившееОборудование.ДокументПоступления
												 // -СБ Кузнецова С.
	                                             |;
	                                             |
	                                             |////////////////////////////////////////////////////////////////////////////////
	                                             |ВЫБРАТЬ
	                                             |	ВТДокументыРСБУ.ДокументПринятиеМодернизация,
	                                             |	ВТДокументыРСБУ.ДокументРСБУ,
	                                             |	бит_му_НРП_ВНА.Период,
	                                             |	бит_му_НРП_ВНА.ИсточникЗаписи,
	                                             |	бит_му_НРП_ВНА.ПриходРасход,
	                                             |	бит_му_НРП_ВНА.ДокументРеализации,
	                                             |	бит_му_НРП_ВНА.ДокументПоступления,
	                                             |	бит_му_НРП_ВНА.ОрганизацияПодрядчик,
	                                             |	бит_му_НРП_ВНА.ОрганизацияЗаказчик,
	                                             |	бит_му_НРП_ВНА.мРегистратор,
	                                             |	бит_му_НРП_ВНА.СуммаБезНДС,
	                                             |	бит_му_НРП_ВНА.СуммаАмортизации,
	                                             |	бит_му_НРП_ВНА.СчетВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.СчетУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.ДатаВвода,
	                                             |	бит_му_НРП_ВНА.ОставшийсяСПИ,
	                                             |	бит_му_НРП_ВНА.СчетРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.СчетНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.ЭлиминирующиеПроводки,
	                                             |	бит_му_НРП_ВНА.НомерЗаписи,
	                                             |	бит_му_НРП_ВНА.Ответственный
	                                             |ИЗ
	                                             |	ВТДокументыРСБУ КАК ВТДокументыРСБУ
	                                             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                                             |		ПО ВТДокументыРСБУ.ДокументРСБУ = бит_му_НРП_ВНА.ДокументПоступления
	                                             |			И (бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход))
	                                             |ГДЕ
	                                             |	бит_му_НРП_ВНА.ЭлиминирующиеПроводки = ИСТИНА
	                                             |
	                                             |СГРУППИРОВАТЬ ПО
	                                             |	ВТДокументыРСБУ.ДокументПринятиеМодернизация,
	                                             |	ВТДокументыРСБУ.ДокументРСБУ,
	                                             |	бит_му_НРП_ВНА.Период,
	                                             |	бит_му_НРП_ВНА.ИсточникЗаписи,
	                                             |	бит_му_НРП_ВНА.ПриходРасход,
	                                             |	бит_му_НРП_ВНА.ДокументРеализации,
	                                             |	бит_му_НРП_ВНА.ДокументПоступления,
	                                             |	бит_му_НРП_ВНА.ОрганизацияПодрядчик,
	                                             |	бит_му_НРП_ВНА.ОрганизацияЗаказчик,
	                                             |	бит_му_НРП_ВНА.мРегистратор,
	                                             |	бит_му_НРП_ВНА.СчетВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.СчетУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.ДатаВвода,
	                                             |	бит_му_НРП_ВНА.СчетРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.СчетНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.ЭлиминирующиеПроводки,
	                                             |	бит_му_НРП_ВНА.Ответственный,
	                                             |	бит_му_НРП_ВНА.НомерЗаписи,
	                                             |	бит_му_НРП_ВНА.ОставшийсяСПИ,
	                                             |	бит_му_НРП_ВНА.СуммаАмортизации,
	                                             |	бит_му_НРП_ВНА.СуммаБезНДС";
												 
												 
	 ЗапросДокументовПринятияМодернизации.УстановитьПараметр("ОрганизацияЗаказчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияЗаказчик));
	 ЗапросДокументовПринятияМодернизации.УстановитьПараметр("ДатаНач", Объект.ДатаНач);
	 ЗапросДокументовПринятияМодернизации.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
	 
	 ТаблицаДокументовПринятияМодернизации = ЗапросДокументовПринятияМодернизации.Выполнить().Выгрузить(); 	 
	 
	 Если ТаблицаДокументовПринятияМодернизации.Количество() = 0 Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ЕстьДвижения = Истина;
	 СоздатьПроводкиПоНРПВНАШаг3(ТаблицаДокументовПринятияМодернизации);
	
 КонецПроцедуры
 
//Ихменение параметров ОС ***********************************************************************************

&НаКлиенте
Процедура АнализИзмененияПараметровОС(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра)
	
	СтрокаОСов = "";
	ЕстьДвижения = Ложь;
	
	АнализИзмененияПараметровОСНаСервере(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра, СтрокаОСов, ЕстьДвижения);
	
	Если НЕ СтрокаОСов = "" Тогда
		Предупреждение("Существует больше одного документа изменения параметров ОС за период обработки по: " + СтрокаОСов);
	КонецЕсли;
	
	Если ЕстьДвижения Тогда
		Форма = ПолучитьФорму("Обработка.бит_ПроведениеПоРегиструНРПВНА.Форма.ФормаДвиженийУправляемая");
		КопироватьДанныеФормы(Объект, Форма.Объект);
		Форма.Шаг = ПредопределенноеЗначение("Перечисление.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовИзменениеПараметровУчетаОСМСФО");
		Форма.ОткрытьМодально();
		
		МассивСозданныхПроводок = ?(Форма.МассивСозданныхПроводок = Неопределено, "", Форма.МассивСозданныхПроводок);	
	КонецЕсли;
	
КонецПроцедуры	
	
&НаСервере
Процедура АнализИзмененияПараметровОСНаСервере(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра, СтрокаОСов, ЕстьДвижения)
	
	 ЗапросДокументовИзмененияПараметров = Новый Запрос;
	 ЗапросДокументовИзмененияПараметров.Текст = "ВЫБРАТЬ
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.ОсновноеСредство,
	                                             |	СУММА(ВЫБОР
	                                             |			КОГДА бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход)
	                                             |				ТОГДА бит_му_НРП_ВНА.СуммаБезНДС
	                                             |			ИНАЧЕ бит_му_НРП_ВНА.СуммаБезНДС * -1
	                                             |		КОНЕЦ) КАК Сумма,
	                                             |	бит_му_НРП_ВНА.ДокументРеализации,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка КАК ДокументИзменениеПараметров,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.СрокПолезногоИспользования,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.СчетУчета,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.СчетНачисленияАмортизации,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.СпособОтраженияРасходовПоАмортизации,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.НачисленнаяАмортизация,
	                                             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка) КАК КоличествоРазличных
	                                             |ПОМЕСТИТЬ ВТПриходРасход
	                                             |ИЗ
	                                             |	Документ.бит_му_ИзменениеПараметровУчетаОС.ОсновныеСредства КАК бит_му_ИзменениеПараметровУчетаОСОсновныеСредства
	                                             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                                             |		ПО бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.ОсновноеСредство = бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива
	                                             |			И (НЕ бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиНачислениеАмортизации)
	                                             |			И (НЕ бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументИзменениеПараметров)
	                                             |ГДЕ
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка.Организация В(&ОрганизацияЗаказчик)
	                                             |	И бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                                             |	И бит_му_НРП_ВНА.ОрганизацияЗаказчик В(&ОрганизацияЗаказчик)
	                                             |	И бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка.Проведен = ИСТИНА
	                                             |	И бит_му_НРП_ВНА.ОрганизацияПодрядчик В(&ОрганизацияПодрядчик)
	                                             |
	                                             |СГРУППИРОВАТЬ ПО
	                                             |	бит_му_НРП_ВНА.ДокументРеализации,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.ОсновноеСредство,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.СрокПолезногоИспользования,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.СчетУчета,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.СчетНачисленияАмортизации,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.СпособОтраженияРасходовПоАмортизации,
	                                             |	бит_му_ИзменениеПараметровУчетаОСОсновныеСредства.НачисленнаяАмортизация
	                                             |;
	                                             |
	                                             |////////////////////////////////////////////////////////////////////////////////
	                                             |ВЫБРАТЬ
	                                             |	ВТПриходРасход.ОсновноеСредство КАК ОсновноеСредство,
	                                             |	ВТПриходРасход.Сумма КАК Сумма,
	                                             |	ВТПриходРасход.ДокументРеализации КАК ДокументРеализации,
	                                             |	бит_му_НРП_ВНА.Период,
	                                             |	ВЫБОР
	                                             |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументПеремещение
	                                             |			ТОГДА 5
	                                             |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументИзменениеПараметров
	                                             |			ТОГДА 4
	                                             |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументПринятиеМодернизация
	                                             |			ТОГДА 3
	                                             |	КОНЕЦ КАК ИсточникЗаписиЧисло,
	                                             |	бит_му_НРП_ВНА.ПриходРасход,
	                                             |	бит_му_НРП_ВНА.ДокументПоступления,
	                                             |	бит_му_НРП_ВНА.ОрганизацияПодрядчик,
	                                             |	бит_му_НРП_ВНА.ОрганизацияЗаказчик,
	                                             |	бит_му_НРП_ВНА.мРегистратор,
	                                             |	бит_му_НРП_ВНА.СуммаБезНДС,
	                                             |	бит_му_НРП_ВНА.СуммаАмортизации,
	                                             |	бит_му_НРП_ВНА.СчетВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаВыручки,
	                                             |	бит_му_НРП_ВНА.СчетУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаУчетаАктива,
	                                             |	бит_му_НРП_ВНА.ДатаВвода,
	                                             |	бит_му_НРП_ВНА.ОставшийсяСПИ,
	                                             |	бит_му_НРП_ВНА.СчетРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаРасходаПоАмортизации,
	                                             |	бит_му_НРП_ВНА.СчетНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто1СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто2СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто3СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.Субконто4СчетаНакопленнойАмортизации,
	                                             |	бит_му_НРП_ВНА.ЭлиминирующиеПроводки,
	                                             |	бит_му_НРП_ВНА.НомерЗаписи,
	                                             |	бит_му_НРП_ВНА.Ответственный,
	                                             |	ВТПриходРасход.ДокументИзменениеПараметров КАК ДокументИзменениеПараметров,
	                                             |	ВТПриходРасход.СрокПолезногоИспользования,
	                                             |	ВТПриходРасход.СчетУчета,
	                                             |	ВТПриходРасход.СчетНачисленияАмортизации,
	                                             |	ВТПриходРасход.СпособОтраженияРасходовПоАмортизации,
	                                             |	ВТПриходРасход.НачисленнаяАмортизация,
	                                             |	ВТПриходРасход.КоличествоРазличных
	                                             |ИЗ
	                                             |	ВТПриходРасход КАК ВТПриходРасход
	                                             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                                             |		ПО ВТПриходРасход.ДокументРеализации = бит_му_НРП_ВНА.ДокументРеализации
	                                             |			И ВТПриходРасход.ОсновноеСредство = бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива
	                                             |			И (бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход))
	                                             |			И (бит_му_НРП_ВНА.ОрганизацияЗаказчик В (&ОрганизацияЗаказчик))
	                                             |			И (бит_му_НРП_ВНА.ОрганизацияПодрядчик В (&ОрганизацияПодрядчик))
	                                             |			И (НЕ бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиНачислениеАмортизации)
	                                             |			И (НЕ(бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументИзменениеПараметров
	                                             |					И (бит_му_НРП_ВНА.Период МЕЖДУ &ДатаНач И &ДатаКон)))
	                                             |ГДЕ
	                                             |	ВТПриходРасход.Сумма <> 0
	                                             |
	                                             |УПОРЯДОЧИТЬ ПО
	                                             |	ИсточникЗаписиЧисло УБЫВ,
	                                             |	ДокументИзменениеПараметров УБЫВ
	                                             |ИТОГИ
	                                             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументИзменениеПараметров)
	                                             |ПО
	                                             |	ОсновноеСредство,
	                                             |	ДокументРеализации
	                                             |АВТОУПОРЯДОЧИВАНИЕ";
												 
	 ЗапросДокументовИзмененияПараметров.УстановитьПараметр("ОрганизацияЗаказчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияЗаказчик));
	 ЗапросДокументовИзмененияПараметров.УстановитьПараметр("ОрганизацияПодрядчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияПодрядчик));
	 ЗапросДокументовИзмененияПараметров.УстановитьПараметр("ДатаНач", Объект.ДатаНач);
	 ЗапросДокументовИзмененияПараметров.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
	 ЗапросДокументовИзмененияПараметров.УстановитьПараметр("ИсточникЗаписиНачислениеАмортизации", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовНачислениеАмортизацииМСФО);	 
	 ЗапросДокументовИзмененияПараметров.УстановитьПараметр("ИсточникЗаписиДокументПеремещение", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПеремещениеОСМСФО);	 
	 ЗапросДокументовИзмененияПараметров.УстановитьПараметр("ИсточникЗаписиДокументИзменениеПараметров", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовИзменениеПараметровУчетаОСМСФО);	 
	 ЗапросДокументовИзмененияПараметров.УстановитьПараметр("ИсточникЗаписиДокументПринятиеМодернизация", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПринятиеКУчетуОСМСФО_МодернизацияОСМСФО_НРПпоВНАРСБУ);	 
	 
	 РезультатЗапроса = ЗапросДокументовИзмененияПараметров.Выполнить();
	 ВыборкаДокументовИзмененияПараметров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 	 
	 
	 Если РезультатЗапроса.Пустой() Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ЕстьДвижения = Истина;
	 СтрокаОСов = СоздатьПроводкиПоНРПВНАШаг4(ВыборкаДокументовИзмененияПараметров); 
	
 КонецПроцедуры
 
//Документы перемещения ОС **********************************************************************************

&НаКлиенте
Процедура АнализПеремещениеОС(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра)
	
	СтрокаОСов = "";
	ЕстьДвижения = Ложь;
	
	АнализПеремещениеОСНаСервере(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра, СтрокаОСов, ЕстьДвижения);
	
	Если НЕ СтрокаОСов = "" Тогда
		Предупреждение("Существует больше одного документа перемещения ОС за период обработки по: " + СтрокаОСов); 
	КонецЕсли;
	
	Если ЕстьДвижения Тогда
		Форма = ПолучитьФорму("Обработка.бит_ПроведениеПоРегиструНРПВНА.Форма.ФормаДвиженийУправляемая");
		КопироватьДанныеФормы(Объект, Форма.Объект);
		Форма.Шаг = ПредопределенноеЗначение("Перечисление.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПеремещениеОСМСФО");
		Форма.ОткрытьМодально();
		
		МассивСозданныхПроводок = ?(Форма.МассивСозданныхПроводок = Неопределено, "", Форма.МассивСозданныхПроводок);						 
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура АнализПеремещениеОСНаСервере(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра, СтрокаОСов, ЕстьДвижения)
	
	 ЗапросДокументовПеремещения = Новый Запрос;
	 ЗапросДокументовПеремещения.Текст = "ВЫБРАТЬ
	                                     |	бит_му_ПеремещениеОСОсновныеСредства.ОсновноеСредство,
	                                     |	СУММА(ВЫБОР
	                                     |			КОГДА бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход)
	                                     |				ТОГДА бит_му_НРП_ВНА.СуммаБезНДС
	                                     |			ИНАЧЕ бит_му_НРП_ВНА.СуммаБезНДС * -1
	                                     |		КОНЕЦ) КАК Сумма,
	                                     |	бит_му_НРП_ВНА.ДокументРеализации,
	                                     |	бит_му_ПеремещениеОСОсновныеСредства.Ссылка КАК ДокументПеремещение,
	                                     |	бит_му_ПеремещениеОСОсновныеСредства.бит_му_Объект,
	                                     |	бит_му_ПеремещениеОСОсновныеСредства.НачисленнаяАмортизация
	                                     |ПОМЕСТИТЬ ВТПриходРасход
	                                     |ИЗ
	                                     |	Документ.бит_му_ПеремещениеОС.ОсновныеСредства КАК бит_му_ПеремещениеОСОсновныеСредства
	                                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                                     |		ПО бит_му_ПеремещениеОСОсновныеСредства.ОсновноеСредство = бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива
	                                     |			И (НЕ бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументНачислениеАмортизации)
	                                     |			И (НЕ(бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументПеремещение
	                                     |					И (бит_му_НРП_ВНА.Период МЕЖДУ &ДатаНач И &ДатаКон)))
	                                     |ГДЕ
	                                     |	бит_му_ПеремещениеОСОсновныеСредства.Ссылка.Организация В(&ОрганизацияЗаказчик)
	                                     |	И бит_му_ПеремещениеОСОсновныеСредства.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                                     |	И бит_му_НРП_ВНА.ОрганизацияЗаказчик В(&ОрганизацияЗаказчик)
	                                     |	И бит_му_ПеремещениеОСОсновныеСредства.Ссылка.Проведен = ИСТИНА
	                                     |	И бит_му_НРП_ВНА.ОрганизацияПодрядчик В(&ОрганизацияПодрядчик)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	бит_му_НРП_ВНА.ДокументРеализации,
	                                     |	бит_му_ПеремещениеОСОсновныеСредства.ОсновноеСредство,
	                                     |	бит_му_ПеремещениеОСОсновныеСредства.Ссылка,
	                                     |	бит_му_ПеремещениеОСОсновныеСредства.бит_му_Объект,
	                                     |	бит_му_ПеремещениеОСОсновныеСредства.НачисленнаяАмортизация
	                                     |;
	                                     |
	                                     |////////////////////////////////////////////////////////////////////////////////
	                                     |ВЫБРАТЬ
	                                     |	ВТПриходРасход.ОсновноеСредство КАК ОсновноеСредство,
	                                     |	ВТПриходРасход.Сумма КАК Сумма,
	                                     |	ВТПриходРасход.ДокументРеализации КАК ДокументРеализации,
	                                     |	бит_му_НРП_ВНА.Период,
	                                     |	ВЫБОР
	                                     |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументПеремещение
	                                     |			ТОГДА 5
	                                     |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументИзменениеПараметров
	                                     |			ТОГДА 4
	                                     |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументПринятиеМодернизация
	                                     |			ТОГДА 3
	                                     |	КОНЕЦ КАК ИсточникЗаписиЧисло,
	                                     |	бит_му_НРП_ВНА.ПриходРасход,
	                                     |	бит_му_НРП_ВНА.ДокументПоступления КАК ДокументПоступления,
	                                     |	бит_му_НРП_ВНА.ОрганизацияПодрядчик,
	                                     |	бит_му_НРП_ВНА.ОрганизацияЗаказчик,
	                                     |	бит_му_НРП_ВНА.мРегистратор,
	                                     |	бит_му_НРП_ВНА.СуммаБезНДС,
	                                     |	бит_му_НРП_ВНА.СуммаАмортизации,
	                                     |	бит_му_НРП_ВНА.СчетВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.СчетУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.ДатаВвода,
	                                     |	бит_му_НРП_ВНА.ОставшийсяСПИ,
	                                     |	бит_му_НРП_ВНА.СчетРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.СчетНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.ЭлиминирующиеПроводки,
	                                     |	бит_му_НРП_ВНА.НомерЗаписи,
	                                     |	бит_му_НРП_ВНА.Ответственный,
	                                     |	ВТПриходРасход.ДокументПеремещение КАК ДокументПеремещение,
	                                     |	ВТПриходРасход.бит_му_Объект КАК НовыйОбъект,
	                                     |	ВТПриходРасход.НачисленнаяАмортизация
	                                     |ИЗ
	                                     |	ВТПриходРасход КАК ВТПриходРасход
	                                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                                     |		ПО ВТПриходРасход.ДокументРеализации = бит_му_НРП_ВНА.ДокументРеализации
	                                     |			И ВТПриходРасход.ОсновноеСредство = бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива
	                                     |			И (бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход))
	                                     |			И (бит_му_НРП_ВНА.ОрганизацияЗаказчик В (&ОрганизацияЗаказчик))
	                                     |			И (бит_му_НРП_ВНА.ОрганизацияПодрядчик В (&ОрганизацияПодрядчик))
	                                     |			И (НЕ бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументНачислениеАмортизации)
	                                     |			И (НЕ(бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументПеремещение
	                                     |					И (бит_му_НРП_ВНА.Период МЕЖДУ &ДатаНач И &ДатаКон)))
	                                     |ГДЕ
	                                     |	ВТПриходРасход.Сумма <> 0
	                                     |
	                                     |УПОРЯДОЧИТЬ ПО
	                                     |	ИсточникЗаписиЧисло УБЫВ,
	                                     |	ДокументПеремещение УБЫВ
	                                     |ИТОГИ
	                                     |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументПеремещение)
	                                     |ПО
	                                     |	ОсновноеСредство,
	                                     |	ДокументРеализации
	                                     |АВТОУПОРЯДОЧИВАНИЕ";
												 
	 ЗапросДокументовПеремещения.УстановитьПараметр("ОрганизацияЗаказчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияЗаказчик));
	 ЗапросДокументовПеремещения.УстановитьПараметр("ОрганизацияПодрядчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияПодрядчик));
	 ЗапросДокументовПеремещения.УстановитьПараметр("ДатаНач", Объект.ДатаНач);
	 ЗапросДокументовПеремещения.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
	 ЗапросДокументовПеремещения.УстановитьПараметр("ИсточникЗаписиДокументНачислениеАмортизации", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовНачислениеАмортизацииМСФО);
	 ЗапросДокументовПеремещения.УстановитьПараметр("ИсточникЗаписиДокументПеремещение", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПеремещениеОСМСФО);	 
	 ЗапросДокументовПеремещения.УстановитьПараметр("ИсточникЗаписиДокументИзменениеПараметров", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовИзменениеПараметровУчетаОСМСФО);	 
	 ЗапросДокументовПеремещения.УстановитьПараметр("ИсточникЗаписиДокументПринятиеМодернизация", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПринятиеКУчетуОСМСФО_МодернизацияОСМСФО_НРПпоВНАРСБУ);	 
	 
	 
	 РезультатЗапроса = ЗапросДокументовПеремещения.Выполнить();
	 ВыборкаДокументовПеремещения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 	 
	 
	 Если РезультатЗапроса.Пустой() Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ЕстьДвижения = Истина;
	 СтрокаОСов = СоздатьПроводкиПоНРПВНАШаг5(ВыборкаДокументовПеремещения);
	
 КонецПроцедуры
 
//Документы амортизации ОС **********************************************************************************

&НаКлиенте
Процедура АнализАмортизацииОС(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра)
	
	ЕстьДвижения = Ложь;
	
	АнализАмортизацииОСНаСервере(Отказ, МассивСозданныхПроводок, МассивОрганизацийПериметра, ЕстьДвижения);
	
	Если ЕстьДвижения Тогда
		Форма = ПолучитьФорму("Обработка.бит_ПроведениеПоРегиструНРПВНА.Форма.ФормаДвиженийУправляемая");
		КопироватьДанныеФормы(Объект, Форма.Объект);
		Форма.Шаг = ПредопределенноеЗначение("Перечисление.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовНачислениеАмортизацииМСФО");
		Форма.ОткрытьМодально();
		
		МассивСозданныхПроводок = ?(Форма.МассивСозданныхПроводок = Неопределено, "", Форма.МассивСозданныхПроводок);
	КонецЕсли;
	 
КонецПроцедуры	

&НаСервере
Процедура АнализАмортизацииОСНаСервере(Отказ, МассивСозданныхПроводок,МассивОрганизацийПериметра, ЕстьДвижения)
	
	 ЗапросДокументовАмортизации = Новый Запрос;
	 ЗапросДокументовАмортизации.Текст = "ВЫБРАТЬ
	                                     |	бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство,
	                                     |	СУММА(ВЫБОР
	                                     |			КОГДА бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход)
	                                     |				ТОГДА бит_му_НРП_ВНА.СуммаБезНДС
	                                     |			ИНАЧЕ бит_му_НРП_ВНА.СуммаБезНДС * -1
	                                     |		КОНЕЦ) КАК Сумма,
	                                     |	бит_му_НРП_ВНА.ДокументРеализации,
	                                     |	бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка КАК ДокументАмортизации,
	                                     |	бит_му_НачислениеАмортизацииОСОсновныеСредства.СчетНачисленияАмортизации,
	                                     |	бит_му_НачислениеАмортизацииОСОсновныеСредства.СпособОтраженияРасходовПоАмортизации
	                                     |ПОМЕСТИТЬ ВТПриходРасход
	                                     |ИЗ
	                                     |	Документ.бит_му_НачислениеАмортизацииОС.ОсновныеСредства КАК бит_му_НачислениеАмортизацииОСОсновныеСредства
	                                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                                     |		ПО бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство = бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива
	                                     |			И (НЕ бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиАнализДокументовНачислениеАмортизации)
	                                     |ГДЕ
	                                     |	бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка.Организация В(&ОрганизацияЗаказчик)
	                                     |	И бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                                     |	И бит_му_НРП_ВНА.ОрганизацияЗаказчик В(&ОрганизацияЗаказчик)
	                                     |	И бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка.Проведен = ИСТИНА
	                                     |	И бит_му_НРП_ВНА.ОрганизацияПодрядчик В(&ОрганизацияПодрядчик)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	бит_му_НРП_ВНА.ДокументРеализации,
	                                     |	бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство,
	                                     |	бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка,
	                                     |	бит_му_НачислениеАмортизацииОСОсновныеСредства.СчетНачисленияАмортизации,
	                                     |	бит_му_НачислениеАмортизацииОСОсновныеСредства.СпособОтраженияРасходовПоАмортизации
	                                     |;
										 // +СБ Кузнецова С. 2016-10-04 
	                                     |////////////////////////////////////////////////////////////////////////////////
	                                     |ВЫБРАТЬ
	                                     |	РегламентнаяОперация.Ссылка
	                                     |ПОМЕСТИТЬ ВТ_ДокНачАмортизации_РСБУ
	                                     |ИЗ
	                                     |	Документ.РегламентнаяОперация КАК РегламентнаяОперация
										 // +СБ Кузнецова С. 2016-11-07 Redmine 2726
										 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Обороты(&ДатаНач, &ДатаКон, Регистратор, , , Организация = &ОрганизацияЗаказчик, , ) КАК бит_Дополнительный_2Обороты
										 |		ПО (РегламентнаяОперация.Ссылка = бит_Дополнительный_2Обороты.Регистратор)
										 // -СБ Кузнецова С.
	                                     |ГДЕ
	                                     |	РегламентнаяОперация.Организация В(&ОрганизацияЗаказчик)
	                                     |	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС)
										 // +СБ Кузнецова С. 2016-11-07 Redmine 2726
										 //|	И РегламентнаяОперация.Дата МЕЖДУ &ДатаНач И &ДатаКон
										 // -СБ Кузнецова С.
										 // +СБ Кузнецова С. 2016-12-22 Redmine 2750 
	                                     //|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
										 // -СБ Кузнецова С.
										 // +СБ Кузнецова С. 2016-11-07 Redmine 2726
										 |СГРУППИРОВАТЬ ПО
										 |	РегламентнаяОперация.Ссылка
										 // -СБ Кузнецова С.
	                                     |;
	                                     |
	                                     |////////////////////////////////////////////////////////////////////////////////
	                                     |ВЫБРАТЬ
	                                     |	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	                                     |	СУММА(ВЫБОР
	                                     |			КОГДА бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход)
	                                     |				ТОГДА бит_му_НРП_ВНА.СуммаБезНДС
	                                     |			ИНАЧЕ бит_му_НРП_ВНА.СуммаБезНДС * -1
	                                     |		КОНЕЦ) КАК Сумма,
	                                     |	бит_му_НРП_ВНА.ДокументРеализации КАК ДокументРеализации,
	                                     |	ВТ_ДокНачАмортизации_РСБУ.Ссылка КАК ДокументАмортизации,
	                                     |	ВТ_ДокНачАмортизации_РСБУ.Ссылка.Дата КАК ДатаДокументаАмортизации,
	                                     |	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетНачисленияАмортизации,
										 // +СБ Кузнецова С. 2017-01-13 Redmine 2750
	                                     |	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетОтраженияРасходовПоАмортизации,
										 // -СБ Кузнецова С.
										 // +СБ Кузнецова С. 2017-05-04 Redmine 2802
	                                     |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК Функция,										 
										 // -СБ Кузнецова С.
	                                     |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации
	                                     |ПОМЕСТИТЬ ВТПриходРасход_РСБУ
	                                     |ИЗ
	                                     |	ВТ_ДокНачАмортизации_РСБУ КАК ВТ_ДокНачАмортизации_РСБУ
										 // +СБ Кузнецова С. 2016-11-07 Redmine 2726
										 //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, , , , &СубконтоКт, ) КАК ХозрасчетныйОборотыДтКт
										 // +СБ Кузнецова С. 2016-12-06 Redmine 2750
										 //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, &ДатаКон, Регистратор, , , , &СубконтоКт, ) КАК ХозрасчетныйОборотыДтКт
	                                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(
	                                     |							, 
	                                     |							&ДатаКон, 
	                                     |							Период = Регистратор.Дата И Регистратор ССЫЛКА Документ.РегламентнаяОперация
	                                     |								И (ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПустаяСсылка) ИЛИ ВидПроводки = ЗНАЧЕНИЕ(Перечисление.бит_КонтрольПериодов_ВидыПроводок.ПрошлыйПериод))
	                                     |								И Содержание = ""Амортизация ОС"") КАК ХозрасчетныйОборотыДтКт
										 // -СБ Кузнецова С.
										 // -СБ Кузнецова С.
	                                     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	                                     |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаКон, ) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	                                     |				ПО ОсновныеСредства.Ссылка = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	                                     |					И (СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация = &ОрганизацияЗаказчик)
										 // +СБ Кузнецова С. 2016-12-06 
										 //|			ПО (НЕ ОсновныеСредства.ОК_ПараллельныйМСФО)
										 |			ПО ХозрасчетныйОборотыДтКт.СубконтоКт1 = ОсновныеСредства.Ссылка
										 // -СБ Кузнецова С.
	                                     |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                                     |			ПО ХозрасчетныйОборотыДтКт.СубконтоКт1 = бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива
	                                     |				И (НЕ бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиАнализДокументовНачислениеАмортизации)
	                                     |		ПО ВТ_ДокНачАмортизации_РСБУ.Ссылка = ХозрасчетныйОборотыДтКт.Регистратор
	                                     |ГДЕ
	                                     |	бит_му_НРП_ВНА.ОрганизацияЗаказчик В(&ОрганизацияЗаказчик)
	                                     |	И бит_му_НРП_ВНА.ОрганизацияПодрядчик В(&ОрганизацияПодрядчик)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	бит_му_НРП_ВНА.ДокументРеализации,
	                                     |	ОсновныеСредства.Ссылка,
	                                     |	ВТ_ДокНачАмортизации_РСБУ.Ссылка,
	                                     |	ХозрасчетныйОборотыДтКт.СчетКт,
										 // +СБ Кузнецова С. 2017-01-13 Redmine 2750
	                                     |	ХозрасчетныйОборотыДтКт.СчетДт,
										 // -СБ Кузнецова С.
										 // +СБ Кузнецова С. 2017-05-04 Redmine 2802
	                                     |	ХозрасчетныйОборотыДтКт.СубконтоДт2,										 
										 // -СБ Кузнецова С.
	                                     |	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации
	                                     |;
										 // -СБ Кузнецова С.
	                                     |
	                                     |////////////////////////////////////////////////////////////////////////////////
	                                     |ВЫБРАТЬ
	                                     |	ВТПриходРасход.ОсновноеСредство КАК ОсновноеСредство,
	                                     |	ВТПриходРасход.Сумма КАК Сумма,
	                                     |	ВТПриходРасход.ДокументРеализации КАК ДокументРеализации,
	                                     |	бит_му_НРП_ВНА.Период,
	                                     |	ВЫБОР
	                                     |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументПеремещение
	                                     |			ТОГДА 5
	                                     |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументИзменениеПараметров
	                                     |			ТОГДА 4
	                                     |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументПринятиеМодернизация
	                                     |			ТОГДА 3
	                                     |	КОНЕЦ КАК ИсточникЗаписиЧисло,
	                                     |	бит_му_НРП_ВНА.ПриходРасход,
	                                     |	бит_му_НРП_ВНА.ДокументПоступления КАК ДокументПоступления,
	                                     |	бит_му_НРП_ВНА.ОрганизацияПодрядчик,
	                                     |	бит_му_НРП_ВНА.ОрганизацияЗаказчик,
	                                     |	бит_му_НРП_ВНА.мРегистратор,
	                                     |	бит_му_НРП_ВНА.СуммаБезНДС,
	                                     |	бит_му_НРП_ВНА.СуммаАмортизации,
	                                     |	бит_му_НРП_ВНА.СчетВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.СчетУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.ДатаВвода,
	                                     |	бит_му_НРП_ВНА.ОставшийсяСПИ,
	                                     |	бит_му_НРП_ВНА.СчетРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.СчетНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.ЭлиминирующиеПроводки,
	                                     |	бит_му_НРП_ВНА.НомерЗаписи,
	                                     |	бит_му_НРП_ВНА.Ответственный,
	                                     |	ВТПриходРасход.ДокументАмортизации КАК ДокументАмортизации,
	                                     |	ВТПриходРасход.СчетНачисленияАмортизации,
	                                     |	ВТПриходРасход.СпособОтраженияРасходовПоАмортизации
										 // +СБ Кузнецова С. 2016-10-04 
	                                     |,	ВТПриходРасход.ДокументАмортизации.Дата КАК ДатаДокументаАмортизации
										 // -СБ Кузнецова С.
										 // +СБ Кузнецова С. 2017-05-04 Redmine 2802
	                                     |,	ВТПриходРасход.СпособОтраженияРасходовПоАмортизации.ОсновнойСубконто2 КАК Функция
										 // -СБ Кузнецова С.
	                                     |ИЗ
	                                     |	ВТПриходРасход КАК ВТПриходРасход
	                                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                                     |		ПО ВТПриходРасход.ДокументРеализации = бит_му_НРП_ВНА.ДокументРеализации
	                                     |			И ВТПриходРасход.ОсновноеСредство = бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива
	                                     |			И (бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход))
	                                     |			И (НЕ бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиАнализДокументовНачислениеАмортизации)
	                                     |ГДЕ
	                                     |	ВТПриходРасход.Сумма <> 0
	                                     |	И бит_му_НРП_ВНА.ДокументРеализации.Дата <= ВТПриходРасход.ДокументАмортизации.Дата
	                                     |	И бит_му_НРП_ВНА.ДокументПоступления.Дата <= ВТПриходРасход.ДокументАмортизации.Дата
	                                     |
										 // +СБ Кузнецова С. 2016-10-04 
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ВТПриходРасход_РСБУ.ОсновноеСредство,
	                                     |	ВТПриходРасход_РСБУ.Сумма,
	                                     |	ВТПриходРасход_РСБУ.ДокументРеализации,
	                                     |	бит_му_НРП_ВНА.Период,
	                                     |	ВЫБОР
	                                     |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументПеремещение
	                                     |			ТОГДА 5
	                                     |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументИзменениеПараметров
	                                     |			ТОГДА 4
	                                     |		КОГДА бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументПринятиеМодернизация
	                                     |			ТОГДА 3
	                                     |	КОНЕЦ,
	                                     |	бит_му_НРП_ВНА.ПриходРасход,
	                                     |	бит_му_НРП_ВНА.ДокументПоступления,
	                                     |	бит_му_НРП_ВНА.ОрганизацияПодрядчик,
	                                     |	бит_му_НРП_ВНА.ОрганизацияЗаказчик,
	                                     |	бит_му_НРП_ВНА.мРегистратор,
	                                     |	бит_му_НРП_ВНА.СуммаБезНДС,
	                                     |	бит_му_НРП_ВНА.СуммаАмортизации,
	                                     |	бит_му_НРП_ВНА.СчетВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаВыручки,
	                                     |	бит_му_НРП_ВНА.СчетУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаУчетаАктива,
	                                     |	бит_му_НРП_ВНА.ДатаВвода,
	                                     |	бит_му_НРП_ВНА.ОставшийсяСПИ,
										 // +СБ Кузнецова С. 2017-01-13 Redmine 2750
										 //|	бит_му_НРП_ВНА.СчетРасходаПоАмортизации,
	                                     |	ВТПриходРасход_РСБУ.СчетОтраженияРасходовПоАмортизации,
										 // -СБ Кузнецова С.
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаРасходаПоАмортизации,
	                                     |	бит_му_НРП_ВНА.СчетНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто1СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто2СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто3СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.Субконто4СчетаНакопленнойАмортизации,
	                                     |	бит_му_НРП_ВНА.ЭлиминирующиеПроводки,
	                                     |	бит_му_НРП_ВНА.НомерЗаписи,
	                                     |	бит_му_НРП_ВНА.Ответственный,
	                                     |	ВТПриходРасход_РСБУ.ДокументАмортизации,
	                                     |	ВТПриходРасход_РСБУ.СчетНачисленияАмортизации,
	                                     |	ВТПриходРасход_РСБУ.СпособОтраженияРасходовПоАмортизации,
	                                     |	ВТПриходРасход_РСБУ.ДокументАмортизации.Дата КАК ДатаДокументаАмортизации
										 // +СБ Кузнецова С. 2017-05-04 Redmine 2802
	                                     |,	ВТПриходРасход_РСБУ.Функция
										 // -СБ Кузнецова С.
	                                     |ИЗ
	                                     |	ВТПриходРасход_РСБУ КАК ВТПриходРасход_РСБУ,
	                                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                                     |		ПО ВТПриходРасход_РСБУ.ДокументРеализации = бит_му_НРП_ВНА.ДокументРеализации
	                                     |			И ВТПриходРасход_РСБУ.ОсновноеСредство = бит_му_НРП_ВНА.Субконто1СчетаУчетаАктива
	                                     |			И (бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход))
	                                     |			И (НЕ бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиАнализДокументовНачислениеАмортизации)
	                                     |ГДЕ
	                                     |	ВТПриходРасход_РСБУ.Сумма <> 0
	                                     |	И бит_му_НРП_ВНА.ДокументРеализации.Дата <= ВТПриходРасход_РСБУ.ДокументАмортизации.Дата
	                                     |	И бит_му_НРП_ВНА.ДокументПоступления.Дата <= ВТПриходРасход_РСБУ.ДокументАмортизации.Дата
	                                     |
										 // -СБ Кузнецова С.
	                                     |УПОРЯДОЧИТЬ ПО
	                                     |	ВТПриходРасход.ДокументАмортизации.Дата,
	                                     |	ИсточникЗаписиЧисло УБЫВ,
	                                     |	ДокументПоступления УБЫВ
	                                     |ИТОГИ ПО
	                                     |	ОсновноеСредство,
	                                     |	ДокументРеализации,
	                                     |	ДокументАмортизации";

												 
	 ЗапросДокументовАмортизации.УстановитьПараметр("ОрганизацияЗаказчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияЗаказчик));
	 ЗапросДокументовАмортизации.УстановитьПараметр("ОрганизацияПодрядчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияПодрядчик));
	 ЗапросДокументовАмортизации.УстановитьПараметр("ДатаНач", Объект.ДатаНач);
	 ЗапросДокументовАмортизации.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
	 ЗапросДокументовАмортизации.УстановитьПараметр("ИсточникЗаписиАнализДокументовНачислениеАмортизации", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовНачислениеАмортизацииМСФО);
	 ЗапросДокументовАмортизации.УстановитьПараметр("ИсточникЗаписиДокументПеремещение", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПеремещениеОСМСФО);	 
	 ЗапросДокументовАмортизации.УстановитьПараметр("ИсточникЗаписиДокументИзменениеПараметров", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовИзменениеПараметровУчетаОСМСФО);	 
	 ЗапросДокументовАмортизации.УстановитьПараметр("ИсточникЗаписиДокументПринятиеМодернизация", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПринятиеКУчетуОСМСФО_МодернизацияОСМСФО_НРПпоВНАРСБУ);	 
	 // +СБ Кузнецова С. 2016-10-05 Redmine 2651
	 МассивСубконто = Новый Массив;
	 МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	 ЗапросДокументовАмортизации.УстановитьПараметр("СубконтоКт", МассивСубконто);	 
	 // -СБ Кузнецова С.
	 
	 
	 РезультатЗапроса = ЗапросДокументовАмортизации.Выполнить();
	 ВыборкаДокументовАмортизации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 	 
	 
	 Если РезультатЗапроса.Пустой() Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ЕстьДвижения = Истина;
	 СоздатьПроводкиПоНРПВНАШаг6(ВыборкаДокументовАмортизации);
	
КонецПроцедуры

//Документы выбытия ОС **************************************************************************************

&НаКлиенте
Процедура АнализВыбытияОС(Отказ, СчетВыбытия, МассивСозданныхПроводок, МассивОрганизацийПериметра)

	АдресТаб = "";
	ЕстьДвижения = Ложь;
	
	АнализВыбытияОСНаСервере(Отказ, СчетВыбытия, МассивСозданныхПроводок, МассивОрганизацийПериметра, АдресТаб, ЕстьДвижения);
	
	Если ЕстьДвижения Тогда
		Если НЕ ЗначениеЗаполнено(СчетВыбытия) Тогда
			Сообщить("Не указан счет выбытия. Проводки сформированы не будут");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ИнформацияОЗадвоении = Ложь;
		
		СоздатьПроводкиПоНРПВНАШаг7_1НаСервер(СчетВыбытия, МассивОрганизацийПериметра, ИнформацияОЗадвоении, АдресТаб);	 
		
		Если ИнформацияОЗадвоении Тогда
			Ответ = Вопрос("Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Объект.ТаблицаДвижений.Количество() > 0 Тогда
			Форма = ПолучитьФорму("Обработка.бит_ПроведениеПоРегиструНРПВНА.Форма.ФормаДвиженийУправляемая");
			КопироватьДанныеФормы(Объект, Форма.Объект);
			Форма.Шаг = ПредопределенноеЗначение("Перечисление.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовВыбытиеОСМСФО");
			Форма.ОткрытьМодально();		
			
			МассивСозданныхПроводок = ?(Форма.МассивСозданныхПроводок = Неопределено, "", Форма.МассивСозданныхПроводок);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры	
	
&НаСервере
Процедура АнализВыбытияОСНаСервере(Отказ, СчетВыбытия, МассивСозданныхПроводок, МассивОрганизацийПериметра, АдресТаб, ЕстьДвижения)
	
	 ЗапросДокументовВыбытия = Новый Запрос;
	 ЗапросДокументовВыбытия.Текст = "ВЫБРАТЬ
	                                 |	бит_му_ВыбытиеОСОсновныеСредства.ОсновноеСредство,
	                                 |	СУММА(ВЫБОР
	                                 |			КОГДА бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход)
	                                 |				ТОГДА бит_му_НРП_ВНА.СуммаБезНДС
	                                 |			ИНАЧЕ бит_му_НРП_ВНА.СуммаБезНДС * -1
	                                 |		КОНЕЦ) КАК Сумма,
	                                 |	бит_му_НРП_ВНА.ДокументРеализации,
	                                 |	бит_му_ВыбытиеОСОсновныеСредства.Ссылка КАК ДокументВыбытия,
	                                 |	бит_му_ВыбытиеОСОсновныеСредства.СчетКт,
	                                 |	СУММА(ВЫБОР
	                                 |			КОГДА бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход)
	                                 |				ТОГДА бит_му_НРП_ВНА.СуммаАмортизации
	                                 |			ИНАЧЕ бит_му_НРП_ВНА.СуммаАмортизации * -1
	                                 |		КОНЕЦ) КАК СуммаАмортизации,
	                                 |	ВЫБОР
	                                 |		КОГДА бит_му_ВыбытиеОСОсновныеСредства.Ссылка.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыДвиженияВыбытия.Выбытие)
	                                 |			ТОГДА бит_му_ВыбытиеОСОсновныеСредства.СубконтоКт1
	                                 |		ИНАЧЕ бит_му_ВыбытиеОСОсновныеСредства.СубконтоДт1
	                                 |	КОНЕЦ КАК Субконто1,
	                                 |	ВЫБОР
	                                 |		КОГДА бит_му_ВыбытиеОСОсновныеСредства.Ссылка.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыДвиженияВыбытия.Выбытие)
	                                 |			ТОГДА бит_му_ВыбытиеОСОсновныеСредства.СубконтоКт2
	                                 |		ИНАЧЕ бит_му_ВыбытиеОСОсновныеСредства.СубконтоДт2
	                                 |	КОНЕЦ КАК Субконто2,
	                                 |	ВЫБОР
	                                 |		КОГДА бит_му_ВыбытиеОСОсновныеСредства.Ссылка.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыДвиженияВыбытия.Выбытие)
	                                 |			ТОГДА бит_му_ВыбытиеОСОсновныеСредства.СубконтоКт3
	                                 |		ИНАЧЕ бит_му_ВыбытиеОСОсновныеСредства.СубконтоДт3
	                                 |	КОНЕЦ КАК Субконто3
	                                 |ПОМЕСТИТЬ ВТПриходРасход
	                                 |ИЗ
	                                 |	Документ.бит_му_ВыбытиеОС.ОсновныеСредства КАК бит_му_ВыбытиеОСОсновныеСредства
	                                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	                                 |		ПО бит_му_ВыбытиеОСОсновныеСредства.ОсновноеСредство = бит_му_НРП_ВНА.Субконто1СчетаНакопленнойАмортизации
	                                 |ГДЕ
	                                 |	бит_му_ВыбытиеОСОсновныеСредства.Ссылка.Организация В(&ОрганизацияЗаказчик)
	                                 |	И бит_му_ВыбытиеОСОсновныеСредства.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                                 |	И бит_му_НРП_ВНА.ОрганизацияЗаказчик В(&ОрганизацияЗаказчик)
	                                 |	И бит_му_ВыбытиеОСОсновныеСредства.Ссылка.Проведен = ИСТИНА
	                                 |	И бит_му_НРП_ВНА.ОрганизацияПодрядчик В(&ОрганизацияПодрядчик)
	                                 |	И НЕ бит_му_НРП_ВНА.ИсточникЗаписи = &ИсточникЗаписиДокументВыбытие
	                                 |
	                                 |СГРУППИРОВАТЬ ПО
	                                 |	бит_му_НРП_ВНА.ДокументРеализации,
	                                 |	бит_му_ВыбытиеОСОсновныеСредства.ОсновноеСредство,
	                                 |	бит_му_ВыбытиеОСОсновныеСредства.Ссылка,
	                                 |	бит_му_ВыбытиеОСОсновныеСредства.СчетКт,
	                                 |	ВЫБОР
	                                 |		КОГДА бит_му_ВыбытиеОСОсновныеСредства.Ссылка.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыДвиженияВыбытия.Выбытие)
	                                 |			ТОГДА бит_му_ВыбытиеОСОсновныеСредства.СубконтоКт1
	                                 |		ИНАЧЕ бит_му_ВыбытиеОСОсновныеСредства.СубконтоДт1
	                                 |	КОНЕЦ,
	                                 |	ВЫБОР
	                                 |		КОГДА бит_му_ВыбытиеОСОсновныеСредства.Ссылка.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыДвиженияВыбытия.Выбытие)
	                                 |			ТОГДА бит_му_ВыбытиеОСОсновныеСредства.СубконтоКт2
	                                 |		ИНАЧЕ бит_му_ВыбытиеОСОсновныеСредства.СубконтоДт2
	                                 |	КОНЕЦ,
	                                 |	ВЫБОР
	                                 |		КОГДА бит_му_ВыбытиеОСОсновныеСредства.Ссылка.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыДвиженияВыбытия.Выбытие)
	                                 |			ТОГДА бит_му_ВыбытиеОСОсновныеСредства.СубконтоКт3
	                                 |		ИНАЧЕ бит_му_ВыбытиеОСОсновныеСредства.СубконтоДт3
	                                 |	КОНЕЦ
	                                 |;
	                                 |
	                                 |////////////////////////////////////////////////////////////////////////////////
	                                 |ВЫБРАТЬ
	                                 |	ВТПриходРасход.ОсновноеСредство КАК ОсновноеСредство,
	                                 |	ВТПриходРасход.Сумма КАК Сумма,
	                                 |	ВТПриходРасход.ДокументРеализации КАК ДокументРеализации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Период) КАК пПериод,
	                                 |	МАКСИМУМ(ВЫБОР
	                                 |			КОГДА бит_му_НРП_ВНАПриход.ИсточникЗаписи = &ИсточникЗаписиДокументПеремещение
	                                 |				ТОГДА 5
	                                 |			КОГДА бит_му_НРП_ВНАПриход.ИсточникЗаписи = &ИсточникЗаписиДокументИзменениеПараметров
	                                 |				ТОГДА 4
	                                 |			КОГДА бит_му_НРП_ВНАПриход.ИсточникЗаписи = &ИсточникЗаписиДокументПринятиеМодернизация
	                                 |				ТОГДА 3
	                                 |			КОГДА бит_му_НРП_ВНАПриход.ИсточникЗаписи = &ИсточникЗаписиДокументВыбытие
	                                 |				ТОГДА 6
	                                 |		КОНЕЦ) КАК ИсточникЗаписиЧисло,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.ПриходРасход) КАК пПриходРасход,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.ДокументПоступления) КАК пДокументПоступления,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.ОрганизацияПодрядчик) КАК пОрганизацияПодрядчик,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.ОрганизацияЗаказчик) КАК пОрганизацияЗаказчик,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.мРегистратор) КАК пмРегистратор,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.СуммаБезНДС) КАК пСуммаБезНДС,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.СуммаАмортизации) КАК пСуммаАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.СчетВыручки) КАК пСчетВыручки,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто1СчетаВыручки) КАК пСубконто1СчетаВыручки,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто2СчетаВыручки) КАК пСубконто2СчетаВыручки,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто3СчетаВыручки) КАК пСубконто3СчетаВыручки,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто4СчетаВыручки) КАК пСубконто4СчетаВыручки,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.СчетУчетаАктива) КАК пСчетУчетаАктива,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто1СчетаУчетаАктива) КАК пСубконто1СчетаУчетаАктива,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто2СчетаУчетаАктива) КАК пСубконто2СчетаУчетаАктива,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто3СчетаУчетаАктива) КАК пСубконто3СчетаУчетаАктива,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто4СчетаУчетаАктива) КАК пСубконто4СчетаУчетаАктива,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.ДатаВвода) КАК пДатаВвода,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.ОставшийсяСПИ) КАК пОставшийсяСПИ,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.СчетРасходаПоАмортизации) КАК пСчетРасходаПоАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто1СчетаРасходаПоАмортизации) КАК пСубконто1СчетаРасходаПоАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто2СчетаРасходаПоАмортизации) КАК пСубконто2СчетаРасходаПоАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто3СчетаРасходаПоАмортизации) КАК пСубконто3СчетаРасходаПоАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто4СчетаРасходаПоАмортизации) КАК пСубконто4СчетаРасходаПоАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.СчетНакопленнойАмортизации) КАК пСчетНакопленнойАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто1СчетаНакопленнойАмортизации) КАК пСубконто1СчетаНакопленнойАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто2СчетаНакопленнойАмортизации) КАК пСубконто2СчетаНакопленнойАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто3СчетаНакопленнойАмортизации) КАК пСубконто3СчетаНакопленнойАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Субконто4СчетаНакопленнойАмортизации) КАК пСубконто4СчетаНакопленнойАмортизации,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.ЭлиминирующиеПроводки) КАК пЭлиминирующиеПроводки,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.НомерЗаписи) КАК пНомерЗаписи,
	                                 |	МАКСИМУМ(бит_му_НРП_ВНАПриход.Ответственный) КАК пОтветственный,
	                                 |	ВТПриходРасход.ДокументВыбытия КАК ДокументВыбытия,
	                                 |	ВТПриходРасход.СуммаАмортизации,
	                                 |	ВТПриходРасход.СчетКт,
	                                 |	бит_му_НРП_ВНАПриход.ИсточникЗаписи,
	                                 |	ВТПриходРасход.Субконто1,
	                                 |	ВТПриходРасход.Субконто2,
	                                 |	ВТПриходРасход.Субконто3
	                                 |ПОМЕСТИТЬ ВТПочтиИтоговая
	                                 |ИЗ
	                                 |	ВТПриходРасход КАК ВТПриходРасход
	                                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНАПриход
	                                 |		ПО ВТПриходРасход.ДокументРеализации = бит_му_НРП_ВНАПриход.ДокументРеализации
	                                 |			И (бит_му_НРП_ВНАПриход.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход))
	                                 |			И (НЕ бит_му_НРП_ВНАПриход.ИсточникЗаписи = &ИсточникЗаписиДокументНачислениеАмортизации)
	                                 |			И ВТПриходРасход.ОсновноеСредство = бит_му_НРП_ВНАПриход.Субконто1СчетаУчетаАктива
	                                 |ГДЕ
	                                 |	ВТПриходРасход.Сумма <> 0
	                                 |
	                                 |СГРУППИРОВАТЬ ПО
	                                 |	ВТПриходРасход.ОсновноеСредство,
	                                 |	ВТПриходРасход.Сумма,
	                                 |	ВТПриходРасход.ДокументРеализации,
	                                 |	ВТПриходРасход.ДокументВыбытия,
	                                 |	ВТПриходРасход.СуммаАмортизации,
	                                 |	ВТПриходРасход.СчетКт,
	                                 |	бит_му_НРП_ВНАПриход.ИсточникЗаписи,
	                                 |	ВТПриходРасход.Субконто1,
	                                 |	ВТПриходРасход.Субконто2,
	                                 |	ВТПриходРасход.Субконто3
	                                 |;
	                                 |
	                                 |////////////////////////////////////////////////////////////////////////////////
	                                 |ВЫБРАТЬ
	                                 |	ВТПочтиИтоговая.ОсновноеСредство КАК ОсновноеСредство,
	                                 |	ВТПочтиИтоговая.Сумма,
	                                 |	ВТПочтиИтоговая.ДокументРеализации КАК ДокументРеализации,
	                                 |	ВТПочтиИтоговая.пПериод,
	                                 |	ВТПочтиИтоговая.ИсточникЗаписиЧисло КАК ИсточникЗаписиЧисло,
	                                 |	ВТПочтиИтоговая.пПриходРасход,
	                                 |	ВТПочтиИтоговая.пДокументПоступления,
	                                 |	ВТПочтиИтоговая.пОрганизацияПодрядчик,
	                                 |	ВТПочтиИтоговая.пОрганизацияЗаказчик,
	                                 |	ВТПочтиИтоговая.пмРегистратор,
	                                 |	ВТПочтиИтоговая.пСуммаБезНДС,
	                                 |	ВТПочтиИтоговая.пСуммаАмортизации,
	                                 |	ВТПочтиИтоговая.пСчетВыручки,
	                                 |	ВТПочтиИтоговая.пСубконто1СчетаВыручки,
	                                 |	ВТПочтиИтоговая.пСубконто2СчетаВыручки,
	                                 |	ВТПочтиИтоговая.пСубконто3СчетаВыручки,
	                                 |	ВТПочтиИтоговая.пСубконто4СчетаВыручки,
	                                 |	ВТПочтиИтоговая.пСчетУчетаАктива,
	                                 |	ВТПочтиИтоговая.пСубконто1СчетаУчетаАктива,
	                                 |	ВТПочтиИтоговая.пСубконто2СчетаУчетаАктива,
	                                 |	ВТПочтиИтоговая.пСубконто3СчетаУчетаАктива,
	                                 |	ВТПочтиИтоговая.пСубконто4СчетаУчетаАктива,
	                                 |	ВТПочтиИтоговая.пДатаВвода,
	                                 |	ВТПочтиИтоговая.пОставшийсяСПИ,
	                                 |	ВТПочтиИтоговая.пСчетРасходаПоАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто1СчетаРасходаПоАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто2СчетаРасходаПоАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто3СчетаРасходаПоАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто4СчетаРасходаПоАмортизации,
	                                 |	ВТПочтиИтоговая.пСчетНакопленнойАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто1СчетаНакопленнойАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто2СчетаНакопленнойАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто3СчетаНакопленнойАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто4СчетаНакопленнойАмортизации,
	                                 |	ВТПочтиИтоговая.пЭлиминирующиеПроводки,
	                                 |	ВТПочтиИтоговая.пНомерЗаписи,
	                                 |	ВТПочтиИтоговая.пОтветственный,
	                                 |	ВТПочтиИтоговая.ДокументВыбытия,
	                                 |	ВТПочтиИтоговая.СуммаАмортизации,
	                                 |	ВТПочтиИтоговая.СчетКт,
	                                 |	ВТПочтиИтоговая.ИсточникЗаписи,
	                                 |	МАКСИМУМ(ЕСТЬNULL(бит_Дополнительный_2ДляПоискаНачисления.НомерСтроки, 0)) КАК НомерСтрокиНачисления,
	                                 |	ВТПочтиИтоговая.Субконто1,
	                                 |	ВТПочтиИтоговая.Субконто2,
	                                 |	ВТПочтиИтоговая.Субконто3
	                                 |ИЗ
	                                 |	ВТПочтиИтоговая КАК ВТПочтиИтоговая
	                                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(
	                                 |				,
	                                 |				,
	                                 |				Организация В (&ОрганизацияЗаказчик)
	                                 |					И Регистратор В
	                                 |						(ВЫБРАТЬ
	                                 |							ВТПриходРасход.ДокументВыбытия
	                                 |						ИЗ
	                                 |							ВТПриходРасход КАК ВТПриходРасход
	                                 |						СГРУППИРОВАТЬ ПО
	                                 |										ВТПриходРасход.ДокументВыбытия),
	                                 |				,
	                                 |				) КАК бит_Дополнительный_2ДляПоискаНачисления
	                                 |		ПО ВТПочтиИтоговая.ДокументВыбытия = бит_Дополнительный_2ДляПоискаНачисления.Регистратор
	                                 |			И (ВЫБОР
	                                 |				КОГДА бит_Дополнительный_2ДляПоискаНачисления.СубконтоКт1 ССЫЛКА Справочник.ОсновныеСредства
	                                 |					ТОГДА ВТПочтиИтоговая.ОсновноеСредство = бит_Дополнительный_2ДляПоискаНачисления.СубконтоКт1
	                                 |				КОГДА бит_Дополнительный_2ДляПоискаНачисления.СубконтоКт2 ССЫЛКА Справочник.ОсновныеСредства
	                                 |					ТОГДА ВТПочтиИтоговая.ОсновноеСредство = бит_Дополнительный_2ДляПоискаНачисления.СубконтоКт2
	                                 |				КОГДА бит_Дополнительный_2ДляПоискаНачисления.СубконтоКт3 ССЫЛКА Справочник.ОсновныеСредства
	                                 |					ТОГДА ВТПочтиИтоговая.ОсновноеСредство = бит_Дополнительный_2ДляПоискаНачисления.СубконтоКт3
	                                 |			КОНЕЦ)
	                                 |			И ВТПочтиИтоговая.пСчетРасходаПоАмортизации = бит_Дополнительный_2ДляПоискаНачисления.СчетДт
	                                 |
	                                 |СГРУППИРОВАТЬ ПО
	                                 |	ВТПочтиИтоговая.пмРегистратор,
	                                 |	ВТПочтиИтоговая.ОсновноеСредство,
	                                 |	ВТПочтиИтоговая.ДокументРеализации,
	                                 |	ВТПочтиИтоговая.пПериод,
	                                 |	ВТПочтиИтоговая.пОрганизацияЗаказчик,
	                                 |	ВТПочтиИтоговая.пОрганизацияПодрядчик,
	                                 |	ВТПочтиИтоговая.пДокументПоступления,
	                                 |	ВТПочтиИтоговая.пПриходРасход,
	                                 |	ВТПочтиИтоговая.пСчетВыручки,
	                                 |	ВТПочтиИтоговая.пСубконто1СчетаВыручки,
	                                 |	ВТПочтиИтоговая.пСубконто2СчетаВыручки,
	                                 |	ВТПочтиИтоговая.пСубконто3СчетаВыручки,
	                                 |	ВТПочтиИтоговая.пСубконто4СчетаВыручки,
	                                 |	ВТПочтиИтоговая.пСчетУчетаАктива,
	                                 |	ВТПочтиИтоговая.пСубконто1СчетаУчетаАктива,
	                                 |	ВТПочтиИтоговая.пСубконто2СчетаУчетаАктива,
	                                 |	ВТПочтиИтоговая.пСубконто3СчетаУчетаАктива,
	                                 |	ВТПочтиИтоговая.пСубконто4СчетаУчетаАктива,
	                                 |	ВТПочтиИтоговая.пДатаВвода,
	                                 |	ВТПочтиИтоговая.пСчетРасходаПоАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто1СчетаРасходаПоАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто2СчетаРасходаПоАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто3СчетаРасходаПоАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто4СчетаРасходаПоАмортизации,
	                                 |	ВТПочтиИтоговая.пСчетНакопленнойАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто1СчетаНакопленнойАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто2СчетаНакопленнойАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто3СчетаНакопленнойАмортизации,
	                                 |	ВТПочтиИтоговая.пСубконто4СчетаНакопленнойАмортизации,
	                                 |	ВТПочтиИтоговая.пЭлиминирующиеПроводки,
	                                 |	ВТПочтиИтоговая.пОтветственный,
	                                 |	ВТПочтиИтоговая.ДокументВыбытия,
	                                 |	ВТПочтиИтоговая.СчетКт,
	                                 |	ВТПочтиИтоговая.ИсточникЗаписи,
	                                 |	ВТПочтиИтоговая.Сумма,
	                                 |	ВТПочтиИтоговая.ИсточникЗаписиЧисло,
	                                 |	ВТПочтиИтоговая.пСуммаБезНДС,
	                                 |	ВТПочтиИтоговая.пСуммаАмортизации,
	                                 |	ВТПочтиИтоговая.пОставшийсяСПИ,
	                                 |	ВТПочтиИтоговая.пНомерЗаписи,
	                                 |	ВТПочтиИтоговая.СуммаАмортизации,
	                                 |	ВТПочтиИтоговая.Субконто1,
	                                 |	ВТПочтиИтоговая.Субконто2,
	                                 |	ВТПочтиИтоговая.Субконто3
	                                 |
	                                 |УПОРЯДОЧИТЬ ПО
	                                 |	ИсточникЗаписиЧисло УБЫВ
	                                 |ИТОГИ ПО
	                                 |	ОсновноеСредство,
	                                 |	ДокументРеализации";

												 
	 ЗапросДокументовВыбытия.УстановитьПараметр("ОрганизацияЗаказчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияЗаказчик));
	 ЗапросДокументовВыбытия.УстановитьПараметр("ОрганизацияПодрядчик", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияПодрядчик));
	 ЗапросДокументовВыбытия.УстановитьПараметр("ИсточникЗаписиДокументНачислениеАмортизации", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовНачислениеАмортизацииМСФО);
	 ЗапросДокументовВыбытия.УстановитьПараметр("ИсточникЗаписиДокументПеремещение", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПеремещениеОСМСФО);	 
	 ЗапросДокументовВыбытия.УстановитьПараметр("ИсточникЗаписиДокументИзменениеПараметров", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовИзменениеПараметровУчетаОСМСФО);	 
	 ЗапросДокументовВыбытия.УстановитьПараметр("ИсточникЗаписиДокументПринятиеМодернизация", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПринятиеКУчетуОСМСФО_МодернизацияОСМСФО_НРПпоВНАРСБУ);	 
	 ЗапросДокументовВыбытия.УстановитьПараметр("ИсточникЗаписиДокументВыбытие", Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовВыбытиеОСМСФО);	 	 
	 ЗапросДокументовВыбытия.УстановитьПараметр("ДатаНач", Объект.ДатаНач);
	 ЗапросДокументовВыбытия.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
	 
	 РезультатЗапроса = ЗапросДокументовВыбытия.Выполнить();
	 ВыборкаДокументовВыбытия = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 	 
	 
	 Если РезультатЗапроса.Пустой() Тогда
		 Возврат;
	 КонецЕсли;
	 
	 ЕстьДвижения = Истина;
	 //+Сундукова 18.04.16 №2381
	 //АдресТаб = ПоместитьВоВременноеХранилище(ВыборкаДокументовВыбытия, ЭтаФорма.УникальныйИдентификатор);
	 АдресТаб = ПоместитьВоВременноеХранилище(РезультатЗапроса, ЭтаФорма.УникальныйИдентификатор);
	 //-Сундукова 18.04.16 №2381
	 
КонецПроцедуры

&НаСервере
Процедура СоздатьПроводкиПоНРПВНАШаг7_1НаСервер(СчетВыбытия, МассивОрганизацийПериметра, ИнформацияОЗадвоении, АдресТаб)
	
	Если АдресТаб <> "" Тогда
		ВыборкаДокументовВыбытия = ПолучитьИзВременногоХранилища(АдресТаб);
		
		СоздатьПроводкиПоНРПВНАШаг7(ВыборкаДокументовВыбытия, СчетВыбытия, МассивОрганизацийПериметра, ИнформацияОЗадвоении);
	КонецЕсли; 

КонецПроцедуры

//Отчеты ***************************************************************************************************
&НаКлиенте
Процедура ЗапуститьПроверочныеОтчеты()
		
	ФормаПроверочногоОтчета = ПолучитьФорму("Отчет.бит_ПроверочныйОтчетНРПВНА_Шаг8.Форма.ФормаОтчетаУправляемая");
	
	ФормаПроверочногоОтчета.Отчет.ОрганизацияЗаказчик = Объект.ОрганизацияЗаказчик;
	
	ФормаПроверочногоОтчета.Отчет.ОрганизацияПодрядчик = Объект.ОрганизацияПодрядчик;
	
	ФормаПроверочногоОтчета.Отчет.ДатаНачала = Объект.ДатаНач;
	
	ФормаПроверочногоОтчета.Отчет.ДатаОкончания = Объект.ДатаКон;
	
	ФормаПроверочногоОтчета.Открыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверочныйОтчетПоВыручке()
		
	ФормаПроверочногоОтчета = ПолучитьФорму("Отчет.бит_ПроверочныйОтчетПоВыручкеШаг9.Форма.ФормаОтчетаУправляемая");
	
	Если НЕ Объект.СоздатьДляПериметра Тогда	
		ФормаПроверочногоОтчета.Отчет.ОрганизацияЗаказчик = Объект.ОрганизацияЗаказчик;	
		ФормаПроверочногоОтчета.Отчет.ОрганизацияПодрядчик = Объект.ОрганизацияПодрядчик;
	Иначе
		ФормаПроверочногоОтчета.Отчет.СоздатьДляПериметра = Истина;
		ФормаПроверочногоОтчета.Отчет.ПериметрКонсолидации = Объект.ПериметрКонсолидации;
	КонецЕсли;
	
	ФормаПроверочногоОтчета.Отчет.ДатаС = Объект.ДатаНач;
	
	ФормаПроверочногоОтчета.Отчет.ДатаПо = Объект.ДатаКон;
	
	ФормаПроверочногоОтчета.Открыть();	
	
КонецПроцедуры


//Создание проводок НРП ВНА
///////////////////////////

&НаСервере
Функция СоздатьПроводкиПоНРПВНАШаг2(ТаблицаДокументов, СчетВыручки) 
	
	Объект.ТаблицаДвижений.Очистить();
	
// +СБ Полякова Ирина. 2016-11-21 Redmine 2705
	ДопустимыеСчетаВыручки = Новый Массив;
	ДопустимыеСчетаВыручки.Добавить(ПланыСчетов.бит_Дополнительный_2.ПрочиеДоходы);
	ДопустимыеСчетаВыручки.Добавить(ПланыСчетов.бит_Дополнительный_2.ВыручкаОтРеализацииОСиПрочихАктивов);
// +СБ Полякова Ирина		

	// --> BIT AGoncharenko CR#267 26.04.2015
	//Найдем счет при продаже ОС для документа ПередачаОС
	ОтборНастроек = Новый Структура("ИмяНастройки", "Счет учета выручки при продаже ОС");
	
	НаборЗаписейСчетВыручки = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборНастроек, "бит_му_Настройки");
	
	Если НаборЗаписейСчетВыручки.Количество() = 0 Тогда
		Сообщить("Счет учета выручки при продаже ОС не найден в настройках МСФО, заполнен не будет, расчет Сумм НДС документа Передача ОС невозможен", СтатусСообщения.Важное);
		СчетВыручкиПередачаОС = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	Иначе
		СчетВыручкиПередачаОС = НаборЗаписейСчетВыручки[0].Значение;
	КонецЕсли;

	//Найдем счет учета стоимости для документа ПередачаОС
	ОтборНастроек.Вставить("ИмяНастройки", "Счет учета стоимости ОС при продаже ОС");
	
	НаборЗаписейСчетВыручки = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборНастроек, "бит_му_Настройки");
	
	Если НаборЗаписейСчетВыручки.Количество() = 0 Тогда
		Сообщить("Счет учета стоимости ОС при продаже ОС не найден в настройках МСФО, заполнен не будет, расчет Сумм НДС документа Передача ОС невозможен", СтатусСообщения.Важное);
		СчетСтоимостиОС = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	Иначе
		СчетСтоимостиОС = НаборЗаписейСчетВыручки[0].Значение;
	КонецЕсли;
	// <-- BIT AGoncharenko
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
				
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		// --> BIT AGoncharenko CR#267 26.04.2015
		Если ТипЗнч(СтрокаТаблицы.ДокументРеализацииПередачи) = Тип("ДокументСсылка.ПередачаОС") Тогда
			СоздатьПроводкиПоНРПВНАШаг2_ПередачаОС(СтрокаТаблицы, СчетВыручкиПередачаОС, СчетСтоимостиОС);
			Продолжить;
		КонецЕсли;
		// <-- BIT AGoncharenko
// +СБ Полякова Ирина. 2016-11-21 Redmine 2705	

//СчетВыручки определяется из первой проводки документа реализации
//и ограничивается значениями из массива ДопустимыеСчетаВыручки
//в противном случае проводка не добавляется
//Исключение - документ реализации Операция (Бух.). В этом случае проводка создается, но счет выручки не заполняется
		
		//НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
		//
		//НоваяЗаписьНРПВНА.Выбрать = Истина;
		//НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПоступлениеТоваровУслугПоступлениеДопРасходов;
		//НоваяЗаписьНРПВНА.ПриходРасход   = Перечисления.бит_ВидДвиженияНакопления.Приход;
		//НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДатаПоступления;
		//НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.ДокументРеализацииПередачи.Организация;
		//НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтрокаТаблицы.ДокументВладелец.Организация;
		//НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.ДокументРеализацииПередачи;
		//НоваяЗаписьНРПВНА.ДокументПоступления  = СтрокаТаблицы.ДокументВладелец;
		//НоваяЗаписьНРПВНА.СуммаБезНДС          = СтрокаТаблицы.СуммаБезНДС;
		//РеализацияОбъект = СтрокаТаблицы.ДокументРеализацииПередачи.ПолучитьОбъект(); 
		//РеализацияОбъект.Движения.бит_Дополнительный_2.Прочитать();
		//Если НЕ ТипЗнч(СтрокаТаблицы.ДокументРеализацииПередачи) = Тип("ДокументСсылка.ОперацияБух") Тогда
		//	НоваяЗаписьНРПВНА.СчетВыручки          = СчетВыручки;
		//	Если РеализацияОбъект.Движения.Количество() > 0 Тогда
		//		Для Каждого ДвижениеПоМеждународному Из РеализацияОбъект.Движения.бит_Дополнительный_2 Цикл
		//			Если ДвижениеПоМеждународному.СчетКт = СчетВыручки Тогда
		//				Для Ном = 1 По 4 Цикл
		//					ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(РеализацияОбъект.Движения.бит_Дополнительный_2[0], "Кт", Ном);
		//					Если ЗначениеЗаполнено(ТекСубконто) Тогда
		//						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = ТекСубконто;
		//					КонецЕсли;
		//				КонецЦикла;
		//				Продолжить;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//	НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
		//КонецЕсли;
		СчетВыручкиПоМеждународному = Неопределено;
		СтруктураДанныхПроводки = Новый Структура;
		
		Если ТипЗнч(СтрокаТаблицы.ДокументРеализацииПередачи) = Тип("ДокументСсылка.ОперацияБух") Тогда 
			СчетВыручкиПоМеждународному = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
		Иначе
			РеализацияОбъект = СтрокаТаблицы.ДокументРеализацииПередачи.ПолучитьОбъект(); 
			РеализацияОбъект.Движения.бит_Дополнительный_2.Прочитать();
			Для Каждого ДвижениеПоМеждународному Из РеализацияОбъект.Движения.бит_Дополнительный_2 Цикл
				
				Если СчетВыручкиПоМеждународному <> Неопределено тогда
					Прервать;
				КонецЕсли;
				
				Если ДопустимыеСчетаВыручки.Найти(ДвижениеПоМеждународному.СчетКт) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СчетВыручкиПоМеждународному = ДвижениеПоМеждународному.СчетКт;
				
				СтруктураДанныхПроводки.Вставить("ЭлиминирующиеПроводки", Истина);		
				СтруктураДанныхПроводки.Вставить("СчетВыручки", СчетВыручкиПоМеждународному);
				Для Ном = 1 По 4 Цикл
					ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(РеализацияОбъект.Движения.бит_Дополнительный_2[0], "Кт", Ном);
					Если ЗначениеЗаполнено(ТекСубконто) Тогда
						СтруктураДанныхПроводки.Вставить("Субконто" + Ном + "СчетаВыручки", ТекСубконто);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;  
		КонецЕсли;
		Если СчетВыручкиПоМеждународному <> Неопределено Тогда
			НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗаписьНРПВНА, СтруктураДанныхПроводки); //Если есть: СубконтоВыручки, СчетВыручки, ЭлиминирующиеПроводки
			
			НоваяЗаписьНРПВНА.Выбрать = Истина;
			НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПоступлениеТоваровУслугПоступлениеДопРасходов;
			НоваяЗаписьНРПВНА.ПриходРасход   = Перечисления.бит_ВидДвиженияНакопления.Приход;
			НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДатаПоступления;
			НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.ДокументРеализацииПередачи.Организация;
			НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтрокаТаблицы.ДокументВладелец.Организация;
			НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.ДокументРеализацииПередачи;
			НоваяЗаписьНРПВНА.ДокументПоступления  = СтрокаТаблицы.ДокументВладелец;
			НоваяЗаписьНРПВНА.СуммаБезНДС          = СтрокаТаблицы.СуммаБезНДС;
		КонецЕсли;
// +СБ Полякова Ирина		
		ПоступлениеОбъект = СтрокаТаблицы.ДокументВладелец.ПолучитьОбъект();
		ПоступлениеОбъект.Движения.бит_Дополнительный_2.Прочитать();
		Если ПоступлениеОбъект.Движения.Количество() > 0 Тогда
			Для Каждого ДвижениеПоМеждународному Из ПоступлениеОбъект.Движения.бит_Дополнительный_2 Цикл
				Если бит_ОбщегоНазначения.ОбъектПодчинен(ДвижениеПоМеждународному.СчетДт, ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительство) Тогда
					НоваяЗаписьНРПВНА.СчетУчетаАктива = ДвижениеПоМеждународному.СчетДт;
					Для Ном = 1 По 4 Цикл
						ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(ПоступлениеОбъект.Движения.бит_Дополнительный_2[0], "Дт", Ном);
						Если ЗначениеЗаполнено(ТекСубконто) Тогда
							НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = ТекСубконто;
						Иначе
							НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = Неопределено;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
	КонецЦикла;
	
КонецФункции

// --> BIT AGoncharenko CR#267 26.04.2015
&НаСервере
Процедура СоздатьПроводкиПоНРПВНАШаг2_ПередачаОС(СтрокаТаблицы, СчетВыручки, СчетСтоимостиОС) 
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Регистратор) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСуммДокумента = ПолучитьСтруктуруСуммПередачаОС(СтрокаТаблицы.ДокументРеализацииПередачи, СчетВыручки, СчетСтоимостиОС);
	
	// +СБ Кузнецова С. 2016-09-23 Redmine 2651
	//ПоступлениеОбъект = СтрокаТаблицы.ДокументВладелец.ПолучитьОбъект();
	//ПоступлениеОбъект.Движения.бит_Дополнительный_2.Прочитать();
	//ОбщаяСумма = 0;
	//
	//Если ПоступлениеОбъект.Движения.Количество() > 0 Тогда
	//	Для Каждого ДвижениеПоМеждународному Из ПоступлениеОбъект.Движения.бит_Дополнительный_2 Цикл
	//		Если бит_ОбщегоНазначения.ОбъектПодчинен(ДвижениеПоМеждународному.СчетДт, ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительство) Тогда
	//			ОбщаяСумма = ОбщаяСумма + ДвижениеПоМеждународному.СуммаРегл;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Для Каждого ДвижениеПоМеждународному Из ПоступлениеОбъект.Движения.бит_Дополнительный_2 Цикл
	//		Если бит_ОбщегоНазначения.ОбъектПодчинен(ДвижениеПоМеждународному.СчетДт, ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительство) Тогда
	//			
	//			Коэф = ДвижениеПоМеждународному.СуммаРегл / ?(ОбщаяСумма = 0, 1, ОбщаяСумма);
	//			
	//			// 1 строка для отражения нераспределенной прибыли
	//			НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
	//			
	//			НоваяЗаписьНРПВНА.Выбрать = Истина;
	//			НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПоступлениеТоваровУслугПоступлениеДопРасходов_ПередачаОС_НРП;
	//			НоваяЗаписьНРПВНА.ПриходРасход   = Перечисления.бит_ВидДвиженияНакопления.Приход;
	//			НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДатаПоступления;
	//			НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.ДокументРеализацииПередачи.Организация;
	//			НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтрокаТаблицы.ДокументВладелец.Организация;
	//			НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.ДокументРеализацииПередачи;
	//			НоваяЗаписьНРПВНА.ДокументПоступления  = СтрокаТаблицы.ДокументВладелец;
	//			
	//			НоваяЗаписьНРПВНА.СуммаБезНДС          = СтруктураСуммДокумента.СуммаСтроки1 * Коэф;
	//			
	//			НоваяЗаписьНРПВНА.СчетВыручки          = СчетВыручки;
	//			НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
	//			НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
	//			
	//			РеализацияОбъект = СтрокаТаблицы.ДокументРеализацииПередачи.ПолучитьОбъект(); 
	//			РеализацияОбъект.Движения.бит_Дополнительный_2.Прочитать();
	//			Если РеализацияОбъект.Движения.Количество() > 0 Тогда
	//				Для Каждого рДвижениеПоМеждународному Из РеализацияОбъект.Движения.бит_Дополнительный_2 Цикл
	//					Если рДвижениеПоМеждународному.СчетКт = СчетВыручки Тогда
	//						Для Ном = 1 По 4 Цикл
	//							ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(РеализацияОбъект.Движения.бит_Дополнительный_2[0], "Кт", Ном);
	//							Если ЗначениеЗаполнено(ТекСубконто) Тогда
	//								НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = ТекСубконто;
	//							КонецЕсли;
	//						КонецЦикла;
	//						Продолжить;
	//					КонецЕсли;
	//				КонецЦикла;
	//			КонецЕсли;
	//			
	//			НоваяЗаписьНРПВНА.СчетУчетаАктива = ДвижениеПоМеждународному.СчетДт;
	//			Для Ном = 1 По 4 Цикл
	//				ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(ДвижениеПоМеждународному, "Дт", Ном);
	//				Если ЗначениеЗаполнено(ТекСубконто) Тогда
	//					НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = ТекСубконто;
	//				Иначе
	//					НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = Неопределено;
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			// 2-я строка для отражения стоимости актива
	//			НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
	//			
	//			НоваяЗаписьНРПВНА.Выбрать = Истина;
	//			НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПоступлениеТоваровУслугПоступлениеДопРасходов_ПередачаОС_СебестоимостьАктива;
	//			НоваяЗаписьНРПВНА.ПриходРасход   = Перечисления.бит_ВидДвиженияНакопления.Приход;
	//			НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДатаПоступления;
	//			НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.ДокументРеализацииПередачи.Организация;
	//			НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтрокаТаблицы.ДокументВладелец.Организация;
	//			НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.ДокументРеализацииПередачи;
	//			НоваяЗаписьНРПВНА.ДокументПоступления  = СтрокаТаблицы.ДокументВладелец;
	//			
	//			НоваяЗаписьНРПВНА.СуммаБезНДС          = СтруктураСуммДокумента.СуммаСтроки2 * Коэф;
	//			
	//			НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Ложь;
	//			НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
	//			
	//			НоваяЗаписьНРПВНА.СчетУчетаАктива = ДвижениеПоМеждународному.СчетДт;
	//			Для Ном = 1 По 4 Цикл
	//				ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(ДвижениеПоМеждународному, "Дт", Ном);
	//				Если ЗначениеЗаполнено(ТекСубконто) Тогда
	//					НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = ТекСубконто;
	//				Иначе
	//					НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = Неопределено;
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//		КонецЕсли;
	//	КонецЦикла;
	//
	//Иначе
	// -СБ Кузнецова С.
	
	// 1 строка для отражения нераспределенной прибыли
	НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
	
	НоваяЗаписьНРПВНА.Выбрать = Истина;
	НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПоступлениеТоваровУслугПоступлениеДопРасходов_ПередачаОС_НРП;
	НоваяЗаписьНРПВНА.ПриходРасход   = Перечисления.бит_ВидДвиженияНакопления.Приход;
	НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДатаПоступления;
	НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.ДокументРеализацииПередачи.Организация;
	НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтрокаТаблицы.ДокументВладелец.Организация;
	НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.ДокументРеализацииПередачи;
	НоваяЗаписьНРПВНА.ДокументПоступления  = СтрокаТаблицы.ДокументВладелец;
	НоваяЗаписьНРПВНА.СуммаБезНДС          = СтруктураСуммДокумента.СуммаСтроки1;
	НоваяЗаписьНРПВНА.СчетВыручки          = СчетВыручки;
	НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
	НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
	
	РеализацияОбъект = СтрокаТаблицы.ДокументРеализацииПередачи.ПолучитьОбъект(); 
	РеализацияОбъект.Движения.бит_Дополнительный_2.Прочитать();
	Если РеализацияОбъект.Движения.Количество() > 0 Тогда
		Для Каждого ДвижениеПоМеждународному Из РеализацияОбъект.Движения.бит_Дополнительный_2 Цикл
			Если ДвижениеПоМеждународному.СчетКт = СчетВыручки Тогда
				Для Ном = 1 По 4 Цикл
					ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(РеализацияОбъект.Движения.бит_Дополнительный_2[0], "Кт", Ном);
					Если ЗначениеЗаполнено(ТекСубконто) Тогда
						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = ТекСубконто;
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПоступлениеОбъект = СтрокаТаблицы.ДокументВладелец.ПолучитьОбъект();
	ПоступлениеОбъект.Движения.бит_Дополнительный_2.Прочитать();
	Если ПоступлениеОбъект.Движения.Количество() > 0 Тогда
		Для Каждого ДвижениеПоМеждународному Из ПоступлениеОбъект.Движения.бит_Дополнительный_2 Цикл
			Если бит_ОбщегоНазначения.ОбъектПодчинен(ДвижениеПоМеждународному.СчетДт, ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительство) Тогда
				НоваяЗаписьНРПВНА.СчетУчетаАктива = ДвижениеПоМеждународному.СчетДт;
				Для Ном = 1 По 4 Цикл
					ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(ПоступлениеОбъект.Движения.бит_Дополнительный_2[0], "Дт", Ном);
					Если ЗначениеЗаполнено(ТекСубконто) Тогда
						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = ТекСубконто;
					Иначе
						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	// 2-я строка для отражения стоимости актива
	НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
	
	НоваяЗаписьНРПВНА.Выбрать = Истина;
	НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПоступлениеТоваровУслугПоступлениеДопРасходов_ПередачаОС_СебестоимостьАктива;
	НоваяЗаписьНРПВНА.ПриходРасход   = Перечисления.бит_ВидДвиженияНакопления.Приход;
	НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДатаПоступления;
	НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.ДокументРеализацииПередачи.Организация;
	НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтрокаТаблицы.ДокументВладелец.Организация;
	НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.ДокументРеализацииПередачи;
	НоваяЗаписьНРПВНА.ДокументПоступления  = СтрокаТаблицы.ДокументВладелец;
	НоваяЗаписьНРПВНА.СуммаБезНДС          = СтруктураСуммДокумента.СуммаСтроки2;
	НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Ложь;
	НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
	
	ПоступлениеОбъект = СтрокаТаблицы.ДокументВладелец.ПолучитьОбъект();
	ПоступлениеОбъект.Движения.бит_Дополнительный_2.Прочитать();
	Если ПоступлениеОбъект.Движения.Количество() > 0 Тогда
		Для Каждого ДвижениеПоМеждународному Из ПоступлениеОбъект.Движения.бит_Дополнительный_2 Цикл
			Если бит_ОбщегоНазначения.ОбъектПодчинен(ДвижениеПоМеждународному.СчетДт, ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительство) Тогда
				НоваяЗаписьНРПВНА.СчетУчетаАктива = ДвижениеПоМеждународному.СчетДт;
				Для Ном = 1 По 4 Цикл
					ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(ПоступлениеОбъект.Движения.бит_Дополнительный_2[0], "Дт", Ном);
					Если ЗначениеЗаполнено(ТекСубконто) Тогда
						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = ТекСубконто;
					Иначе
						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	// +СБ Кузнецова С. 2016-09-23 Redmine 2651
	//КонецЕсли;
	// -СБ Кузнецова С.

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруСуммПередачаОС(ДокументПередачаОС, СчетВыручки, СчетСтоимостиОС)

	СтруктураВозврата = Новый Структура("ДокументПередачаОС, СуммаСтроки1, СуммаСтроки2", ДокументПередачаОС, 0,0);
	
	Если СчетВыручки = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка() 
		ИЛИ СчетСтоимостиОС = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	МассивОрганизацийПериметра = ПолучитьМассивОрганизацийНаСервере(Объект.ПериметрКонсолидации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПередачаОС", ДокументПередачаОС);
	Запрос.УстановитьПараметр("Счет62301", СчетВыручки);
	Запрос.УстановитьПараметр("Счет62302", СчетСтоимостиОС);
	Запрос.УстановитьПараметр("Организация", ?(Объект.СоздатьДляПериметра, МассивОрганизацийПериметра, Объект.ОрганизацияПодрядчик));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОборотыМСФО.Регистратор КАК ДокументПередачаОС,
	               |	ЕСТЬNULL(ОборотыМСФО.ОборотДТ62302, 0) КАК СуммаСтроки2,
	               |	ЕСТЬNULL(ОборотыМСФО.ОборотКт62301, 0) - ЕСТЬNULL(ОборотыМСФО.ОборотДт62301, 0) - ЕСТЬNULL(ОборотыМСФО.ОборотДТ62302, 0) КАК СуммаСтроки1
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ОборотыДокумента.Регистратор КАК Регистратор,
	               |		СУММА(ВЫБОР
	               |				КОГДА ОборотыДокумента.СчетДт = &Счет62301
	               |					ТОГДА ОборотыДокумента.СуммаМУ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК ОборотДт62301,
	               |		СУММА(ВЫБОР
	               |				КОГДА ОборотыДокумента.СчетКт = &Счет62301
	               |					ТОГДА ОборотыДокумента.СуммаМУ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК ОборотКт62301,
	               |		СУММА(ВЫБОР
	               |				КОГДА ОборотыДокумента.СчетДт = &Счет62302
	               |					ТОГДА ОборотыДокумента.СуммаМУ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК ОборотДТ62302
	               |	ИЗ
	               |		РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(
	               |				,
	               |				,
	               |				(Регистратор, Организация) В
	               |						(ВЫБРАТЬ
	               |							&ДокументПередачаОС,
	               |							&Организация)
	               |					И (СчетДт В (&Счет62301, &Счет62302)
	               |						ИЛИ СчетКт В (&Счет62301)),
	               |				,
	               |				) КАК ОборотыДокумента
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ОборотыДокумента.Регистратор) КАК ОборотыМСФО";
				   
	Результат = Запрос.Выполнить();	

	Если Результат.Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СтруктураВозврата.СуммаСтроки1 = Выборка.СуммаСтроки1;
	СтруктураВозврата.СуммаСтроки2 = Выборка.СуммаСтроки2;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ПолучитьСтруктуруСуммПередачаОС()
// <-- BIT AGoncharenko

//&НаКлиенте
&НаСервере
Функция СоздатьПроводкиПоНРПВНАШаг3(ТаблицаДокументов) //принятие/модернизация
	
	Объект.ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		
		//создадим сторно запись
		НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗаписьНРПВНА, СтрокаТаблицы);
		НоваяЗаписьНРПВНА.ПриходРасход = Перечисления.бит_ВидДвиженияНакопления.Расход;
		НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПринятиеКУчетуОСМСФО_МодернизацияОСМСФО_НРПпоВНАРСБУ; 
		// +СБ Кузнецова С. 2016-11-03  Redmine 2726
		//НоваяЗаписьНРПВНА.Период = СтрокаТаблицы.ДокументПринятиеМодернизация.Дата; 
		// -СБ Кузнецова С.
		НоваяЗаписьНРПВНА.Ответственный  = Объект.Ответственный;
		НоваяЗаписьНРПВНА.Выбрать = Истина;
		
		// +СБ Кузнецова С. 2016-11-07 Redmine 2726
		// обход строк ТЧ "ОС" документа "Принятие к учету ОС"
		КоличествоСтрок = 1;
		Если ТипЗнч(СтрокаТаблицы.ДокументПринятиеМодернизация) = Тип("ДокументСсылка.ПринятиеКУчетуОС") 
			И СтрокаТаблицы.ДокументПринятиеМодернизация.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование 
			И СтрокаТаблицы.ДокументПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			
			КоличествоСтрок = СтрокаТаблицы.ДокументПринятиеМодернизация.ОС.Количество();
		КонецЕсли;
		
		Для Сч = 1 По КоличествоСтрок Цикл
		// -СБ Кузнецова С.
		
		//создадим приходную запись
		НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
		
		НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПринятиеКУчетуОСМСФО_МодернизацияОСМСФО_НРПпоВНАРСБУ; 
		НоваяЗаписьНРПВНА.Выбрать = Истина;
		НоваяЗаписьНРПВНА.ПриходРасход   = Перечисления.бит_ВидДвиженияНакопления.Приход;
		// +СБ Кузнецова С. 2016-11-03 Redmine 2726
		//НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДокументПринятиеМодернизация.Дата;
		НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.Период;
		// -СБ Кузнецова С.
		НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.ОрганизацияПодрядчик;
		НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтрокаТаблицы.ДокументПринятиеМодернизация.Организация;
		НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.ДокументРеализации;
		НоваяЗаписьНРПВНА.ДокументПоступления  = СтрокаТаблицы.ДокументПринятиеМодернизация;
		НоваяЗаписьНРПВНА.СуммаБезНДС          = СтрокаТаблицы.СуммаБезНДС;	
		// +СБ Кузнецова С. 2016-09-23 Redmine 2651
		Если ТипЗнч(СтрокаТаблицы.ДокументПринятиеМодернизация) = Тип("ДокументСсылка.ПринятиеКУчетуОС") 
			И СтрокаТаблицы.ДокументПринятиеМодернизация.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование 
			И СтрокаТаблицы.ДокументПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			
			// +СБ Кузнецова С. 2016-11-07 Redmine 2726
			//НоваяЗаписьНРПВНА["Субконто1СчетаУчетаАктива"] = СтрокаТаблицы.ДокументПринятиеМодернизация.Номенклатура;	
			//НоваяЗаписьНРПВНА["Актив"] = СтрокаТаблицы.ДокументПринятиеМодернизация.Номенклатура;	
			НоваяЗаписьНРПВНА["Субконто1СчетаУчетаАктива"] = СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[Сч-1].ОсновноеСредство;	
			НоваяЗаписьНРПВНА["Актив"] = СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[Сч-1].ОсновноеСредство;	
			// -СБ Кузнецова С.
			
			// +СБ Кузнецова С. 2016-10-28 Redmine 2651
			Если СтрокаТаблицы.ДокументРеализации.НДСВключенВСтоимость Тогда
				СуммаПередачи = СтрокаТаблицы.ДокументРеализации.ОС.Итог("Сумма") - СтрокаТаблицы.ДокументРеализации.ОС.Итог("СуммаНДС");
			Иначе
				СуммаПередачи = СтрокаТаблицы.ДокументРеализации.ОС.Итог("Сумма");
			КонецЕсли;
			// -СБ Кузнецова С.
			
			// +СБ Кузнецова С. 2016-11-07 Redmine 2726
			//СтрокаПередачи = СтрокаТаблицы.ДокументРеализации.ОС.Найти(СтрокаТаблицы.ДокументПринятиеМодернизация.ОС.Найти(СтрокаТаблицы.Субконто2СчетаУчетаАктива, "Объект").ОсновноеСредство.СБ_СвязанноеОС);
			СтрокаПередачи = СтрокаТаблицы.ДокументРеализации.ОС.Найти(СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[Сч-1].ОсновноеСредство.СБ_СвязанноеОС);
			// -СБ Кузнецова С.

			Если СтрокаПередачи <> Неопределено Тогда
				// +СБ Кузнецова С. 2016-10-28 
				Если СтрокаТаблицы.ДокументРеализации.НДСВключенВСтоимость Тогда
					СуммаПередачи = СтрокаПередачи.Сумма - СтрокаПередачи.СуммаНДС;
				Иначе
					СуммаПередачи = СтрокаПередачи.Сумма;
				КонецЕсли;
				// -СБ Кузнецова С.
			Иначе
				СуммаПередачи = 0;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ХозрасчетныйОборотыДтКт.СуммаОборот
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			,
			|			,
			|			Регистратор,
			|			СчетДт = &СчетДт,
			|			,
			|			СчетКт = &СчетКт,
			|			,
			|			Организация В (&Организация)
			|				И СубконтоКт1 = &ОсновноеСредство) КАК ХозрасчетныйОборотыДтКт
			|ГДЕ
			|	ХозрасчетныйОборотыДтКт.Регистратор = &ДокументПередачи";
			Запрос.Текст = ТекстЗапроса; 
			Запрос.УстановитьПараметр("СчетДт", ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
			Запрос.УстановитьПараметр("СчетКт", ПланыСчетов.Хозрасчетный.ВыбытиеОС);
			Запрос.УстановитьПараметр("Организация", Объект.ОрганизацияПодрядчик);
			// +СБ Кузнецова С. 2016-10-25 
			//Запрос.УстановитьПараметр("ОсновноеСредство", СтрокаПередачи.ОсновноеСредство);
			Запрос.УстановитьПараметр("ОсновноеСредство", ?(СтрокаПередачи = Неопределено, Неопределено, СтрокаПередачи.ОсновноеСредство));
			// -СБ Кузнецова С.
			Запрос.УстановитьПараметр("ДокументПередачи", СтрокаТаблицы.ДокументРеализации);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				СтоимостьАктива = Выборка.СуммаОборот;
			Иначе
				СтоимостьАктива = 0;
			КонецЕсли;
			
			НоваяЗаписьНРПВНА.СуммаБезНДС = СуммаПередачи - СтоимостьАктива;
		КонецЕсли;	
		// -СБ Кузнецова С.
		НоваяЗаписьНРПВНА.СчетВыручки          = СтрокаТаблицы.СчетВыручки;
		Для Ном = 1 По 4 Цикл
			НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = СтрокаТаблицы["Субконто" + Ном + "СчетаВыручки"];			
		КонецЦикла;
		
		//заполнение для принятия
		Если ТипЗнч(СтрокаТаблицы.ДокументПринятиеМодернизация) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
			// --> BIT AGoncharenko CR#267 26.04.2015
			// добавлено условие изменен порядок
			НоваяЗаписьНРПВНА.СчетУчетаАктива = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_СчетУчета;
			Для Ном = 1 По 4 Цикл
				//НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаРасходаПоАмортизации"] = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_СпособОтраженияРасходовПоАмортизации["ОсновнойСубконто" + Ном];			
				НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = СтрокаТаблицы.ДокументПринятиеМодернизация["бит_окей_Субконто" + Ном];			
			КонецЦикла;
			НоваяЗаписьНРПВНА.ДатаВвода            = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_ДатаПринятияКУчету;
			
			Если СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_НачислятьАмортизацию Тогда 
				НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_СчетНачисленнойАмортизации;
				НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_СпособОтраженияРасходовПоАмортизации.ОсновнойСчетЗатрат;
				НоваяЗаписьНРПВНА.ОставшийсяСПИ        = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_СрокПолезногоИспользования;
				
				//НоваяЗаписьНРПВНА.Субконто1СчетаНакопленнойАмортизации = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_ОсновноеСредство;
				//НоваяЗаписьНРПВНА.Субконто2СчетаНакопленнойАмортизации = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_ОсновноеСредство.Объект;
				
				УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Основные средства", СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_ОсновноеСредство); 
				УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Объект", СтрокаТаблицы.ДокументПринятиеМодернизация.бит_окей_ОсновноеСредство.Объект); 
			КонецЕсли; 
			// --> BIT AGoncharenko CR#267 26.04.2015
			// +СБ Кузнецова С. 2016-09-22 Redmine 2651
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументПринятиеМодернизация) = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
			
			// счета и субконто
			ИмяИсточника = "Хозрасчетный";
			ИмяПриемника = "бит_Дополнительный_2";
			КодПравилТрансляции = бит_МеханизмТрансляции.ПолучитьПравилаИКэш(СтрокаТаблицы.ОрганизацияЗаказчик, ИмяИсточника, ИмяПриемника, СтрокаТаблицы.ДокументПринятиеМодернизация);
			
			СтруктураСчетов = бит_МеханизмТрансляции.ВыполнитьПодборСчетаПоПравилам(Новый Структура("СчетДт, СчетКт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СубконтоДт4, СубконтоКт1, СубконтоКт2, СубконтоКт3, СубконтоКт4, ПодразделениеДт, ПодразделениеКт, Сумма", 
																						// +СБ Кузнецова С. 2016-11-07 Redmine 2726
																						//СтрокаТаблицы.ДокументПринятиеМодернизация.СчетУчета, СтрокаТаблицы.ДокументПринятиеМодернизация.СчетУчетаВнеоборотногоАктива, СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[0].ОсновноеСредство, , , , СтрокаТаблицы.ДокументПринятиеМодернизация.Номенклатура, СтрокаТаблицы.ДокументПринятиеМодернизация.Склад, , , , , СтрокаТаблицы.СуммаБезНДС), 
																						СтрокаТаблицы.ДокументПринятиеМодернизация.СчетУчета, СтрокаТаблицы.ДокументПринятиеМодернизация.СчетУчетаВнеоборотногоАктива, СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[Сч-1].ОсновноеСредство, , , , СтрокаТаблицы.ДокументПринятиеМодернизация.Номенклатура, СтрокаТаблицы.ДокументПринятиеМодернизация.Склад, , , , , СтрокаТаблицы.СуммаБезНДС), 
																						// -СБ Кузнецова С.
																						СтрокаТаблицы.ОрганизацияПодрядчик,
																						ИмяИсточника, ИмяПриемника, СтрокаТаблицы.ДокументПринятиеМодернизация, КодПравилТрансляции, Ложь);
			
			НоваяЗаписьНРПВНА.СчетУчетаАктива = СтруктураСчетов.ЗаписьПриемник.СчетДт;
			// +СБ Кузнецова С. 2016-11-07 Redmine 2726
			//НоваяЗаписьНРПВНА["Субконто1СчетаУчетаАктива"] = СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[0].ОсновноеСредство;
			НоваяЗаписьНРПВНА["Субконто1СчетаУчетаАктива"] = СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[Сч-1].ОсновноеСредство;
			// -СБ Кузнецова С.
			НоваяЗаписьНРПВНА["Субконто2СчетаУчетаАктива"] = СтрокаТаблицы.Субконто2СчетаУчетаАктива;
			НоваяЗаписьНРПВНА.ДатаВвода            = СтрокаТаблицы.ДатаВвода;  
			// +СБ Кузнецова С. 2016-11-07 Redmine 2726
			//НоваяЗаписьНРПВНА["Актив"] = СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[0].ОсновноеСредство;
			НоваяЗаписьНРПВНА["Актив"] = СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[Сч-1].ОсновноеСредство;
			// -СБ Кузнецова С.
			
			Если СтрокаТаблицы.ДокументПринятиеМодернизация.НачислятьАмортизациюБУ Тогда 
				
				СтруктураСчетов = бит_МеханизмТрансляции.ВыполнитьПодборСчетаПоПравилам(Новый Структура("СчетДт, СчетКт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СубконтоДт4, СубконтоКт1, СубконтоКт2, СубконтоКт3, СубконтоКт4, ПодразделениеДт, ПодразделениеКт, Сумма", 
																							// +СБ Кузнецова С. 2016-11-07 Redmine 2726
																							//СтрокаТаблицы.ДокументПринятиеМодернизация.СчетНачисленияАмортизации, СтрокаТаблицы.ДокументПринятиеМодернизация.СчетУчетаВнеоборотногоАктива, СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[0].ОсновноеСредство, , , , СтрокаТаблицы.ДокументПринятиеМодернизация.Номенклатура, СтрокаТаблицы.ДокументПринятиеМодернизация.Склад, , , , , СтрокаТаблицы.СуммаБезНДС), 
																							СтрокаТаблицы.ДокументПринятиеМодернизация.СчетНачисленияАмортизации, СтрокаТаблицы.ДокументПринятиеМодернизация.СчетУчетаВнеоборотногоАктива, СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[Сч-1].ОсновноеСредство, , , , СтрокаТаблицы.ДокументПринятиеМодернизация.Номенклатура, СтрокаТаблицы.ДокументПринятиеМодернизация.Склад, , , , , СтрокаТаблицы.СуммаБезНДС), 
																							// -СБ Кузнецова С.
																							СтрокаТаблицы.ОрганизацияПодрядчик,
																							ИмяИсточника, ИмяПриемника, СтрокаТаблицы.ДокументПринятиеМодернизация, КодПравилТрансляции, Ложь);
				
				
				НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = СтруктураСчетов.ЗаписьПриемник.СчетДт;
				НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = СтрокаТаблицы.СчетРасходаПоАмортизации;
				НоваяЗаписьНРПВНА.ОставшийсяСПИ        = СтрокаТаблицы.ДокументПринятиеМодернизация.СрокПолезногоИспользованияБУ;
				
				// +СБ Кузнецова С. 2016-11-07  Redmine 2726
				//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Основные средства", СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[0].ОсновноеСредство); 
				УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Основные средства", СтрокаТаблицы.ДокументПринятиеМодернизация.ОС[Сч-1].ОсновноеСредство); 
				// -СБ Кузнецова С.
				УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Объект", СтрокаТаблицы.Субконто2СчетаУчетаАктива); 
			КонецЕсли; 
			// -СБ Кузнецова С.
		//заполнение для модернизации
		Иначе
			НоваяЗаписьНРПВНА.ОставшийсяСПИ        = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_ОставшийсяСрокИспользования + 1;
			//получим параметр счет учета
			ЗапросСчетаУчета = Новый Запрос;
			ЗапросСчетаУчета.Текст = "ВЫБРАТЬ
			                         |	МАКСИМУМ(ВЫБОР
			                         |			КОГДА бит_му_ПараметрыОССрезПоследних.Параметр = &ПараметрСчетУчета
			                         |				ТОГДА бит_му_ПараметрыОССрезПоследних.ЗначениеПараметра
			                         |			ИНАЧЕ ЛОЖЬ
			                         |		КОНЕЦ) КАК СчетУчета,
			                         |	МАКСИМУМ(ВЫБОР
			                         |			КОГДА бит_му_ПараметрыОССрезПоследних.Параметр = &ПараметрСпособОтраженияРасходов
			                         |				ТОГДА бит_му_ПараметрыОССрезПоследних.ЗначениеПараметра
			                         |			ИНАЧЕ ЛОЖЬ
			                         |		КОНЕЦ) КАК СпособОтраженияРасходов,
			                         |	бит_му_ПараметрыОССрезПоследних.ОсновноеСредство,
			                         |	МАКСИМУМ(ВЫБОР
			                         |			КОГДА бит_му_ПараметрыОССрезПоследних.Параметр = &ПараметрСчетНакопленнойАмортизации
			                         |				ТОГДА бит_му_ПараметрыОССрезПоследних.ЗначениеПараметра
			                         |			ИНАЧЕ ЛОЖЬ
			                         |		КОНЕЦ) КАК СчетНакопленнойАмортизации
			                         |ПОМЕСТИТЬ ВТПараметры
			                         |ИЗ
			                         |	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
			                         |			&ДатаСреза,
			                         |			Организация = &ОрганизацияЗаказчик
			                         |				И ОсновноеСредство = &ОсновноеСредство
			                         |				И Параметр В (&ПараметрСчетУчета, &ПараметрСпособОтраженияРАсходов, &ПараметрСчетНакопленнойАмортизации)) КАК бит_му_ПараметрыОССрезПоследних
			                         |
			                         |СГРУППИРОВАТЬ ПО
			                         |	бит_му_ПараметрыОССрезПоследних.ОсновноеСредство
			                         |;
			                         |
			                         |////////////////////////////////////////////////////////////////////////////////
			                         |ВЫБРАТЬ
			                         |	ВТПараметры.СчетУчета,
			                         |	ВТПараметры.СпособОтраженияРАсходов,
			                         |	бит_му_СостоянияОС.ДатаСостояния КАК ДатаВвода,
			                         |	ВТПараметры.СчетНакопленнойАмортизации
			                         |ИЗ
			                         |	ВТПараметры КАК ВТПараметры
			                         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК бит_му_СостоянияОС
			                         |		ПО ВТПараметры.ОсновноеСредство = бит_му_СостоянияОС.ОсновноеСредство
			                         |ГДЕ
			                         |	бит_му_СостоянияОС.Состояние = &Состояние
			                         |	И бит_му_СостоянияОС.Организация = &ОрганизацияЗаказчик";
			ЗапросСчетаУчета.УстановитьПараметр("ДатаСреза", Новый Граница(СтрокаТаблицы.ДокументПринятиеМодернизация.Дата, ВидГраницы.Включая)); 									 
			ЗапросСчетаУчета.УстановитьПараметр("ОрганизацияЗаказчик", СтрокаТаблицы.ДокументПринятиеМодернизация.Организация);
			ЗапросСчетаУчета.УстановитьПараметр("ОсновноеСредство", СтрокаТаблицы.ДокументПринятиеМодернизация.бит_ОсновноеСредство);
			ЗапросСчетаУчета.УстановитьПараметр("ПараметрСчетУчета", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
			ЗапросСчетаУчета.УстановитьПараметр("ПараметрСпособОтраженияРасходов", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СпособОтраженияРасходовПоАмортизации_ОС);
			ЗапросСчетаУчета.УстановитьПараметр("ПараметрСчетНакопленнойАмортизации", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС);
			ЗапросСчетаУчета.УстановитьПараметр("Состояние", Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
			Выборка = ЗапросСчетаУчета.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НоваяЗаписьНРПВНА.СчетУчетаАктива = Выборка.СчетУчета;
				УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Основные средства", СтрокаТаблицы.ДокументПринятиеМодернизация.бит_ОсновноеСредство); 
				УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Объект", СтрокаТаблицы.ДокументПринятиеМодернизация.бит_ОсновноеСредство.Объект); 
				//НоваяЗаписьНРПВНА.Субконто1СчетаУчетаАктива = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_ОсновноеСредство; 
				//НоваяЗаписьНРПВНА.Субконто2СчетаУчетаАктива = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_ОсновноеСредство.Объект;
				НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = ?(ЗначениеЗаполнено(Выборка.СпособОтраженияРасходов), Выборка.СпособОтраженияРасходов.ОсновнойСчетЗатрат, ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
				НоваяЗаписьНРПВНА.ДатаВвода = Выборка.ДатаВвода;
				//НоваяЗаписьНРПВНА.Субконто1СчетаРасходаПоАмортизации = ?(ЗначениеЗаполнено(Выборка.СпособОтраженияРасходов), Выборка.СпособОтраженияРасходов.ОсновнойСубконто1, Неопределено);
				НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = Выборка.СчетНакопленнойАмортизации;
				//НоваяЗаписьНРПВНА.Субконто1СчетаНакопленнойАмортизации = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_ОсновноеСредство; 
				//НоваяЗаписьНРПВНА.Субконто2СчетаНакопленнойАмортизации = СтрокаТаблицы.ДокументПринятиеМодернизация.бит_ОсновноеСредство.Объект;
				УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Основные средства", СтрокаТаблицы.ДокументПринятиеМодернизация.бит_ОсновноеСредство); 
				УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Объект", СтрокаТаблицы.ДокументПринятиеМодернизация.бит_ОсновноеСредство.Объект); 
			КонецЕсли;
			
		КонецЕсли;	 
		
		НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
		НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
		
		// +СБ Кузнецова С. 2016-11-07 Redmine 2726
		КонецЦикла;
		// -СБ Кузнецова С.
	КонецЦикла;
	
КонецФункции

//&НаКлиенте
&НаСервере
Функция СоздатьПроводкиПоНРПВНАШаг4(ВыборкаДокументов) //изменение параметров ОС
	
	Объект.ТаблицаДвижений.Очистить();
	
	СтрокаОСов = "";
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументов.ОсновноеСредство) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаРеализаций = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Сообщать = Истина;
		//Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		Пока ВыборкаРеализаций.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаРеализаций.ДокументРеализации) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаРеализаций.ДокументИзменениеПараметров > 1 И Сообщать Тогда
				//Предупреждение("Существует больше одного документа изменения параметров ОС за период обработки по: " + ВыборкаРеализаций.ОсновноеСредство);
				СтрокаОСов = СтрокаОСов + Строка(ВыборкаРеализаций.ОсновноеСредство) + "; ";
				Сообщать = Ложь;
			КонецЕсли;
			
			СтрокаТаблицы = ВыборкаРеализаций.Выбрать();
			
			Сч = 0;
			
			Пока СтрокаТаблицы.Следующий() Цикл
				
				Если Сч > 0 Тогда
					Прервать;
				КонецЕсли;
				
				Сч = СтрокаТаблицы.ИсточникЗаписиЧисло;
				
				//ФактическийСрокИспользования = Неопределено;
				
				//получим параметр дата ввода
				ЗапросСчетаУчета = Новый Запрос;
				ЗапросСчетаУчета.Текст = "ВЫБРАТЬ
				|	бит_му_СостоянияОС.ДатаСостояния
				|ИЗ
				|	РегистрСведений.бит_му_СостоянияОС КАК бит_му_СостоянияОС
				|ГДЕ
				|	бит_му_СостоянияОС.Организация = &Организация
				|	И бит_му_СостоянияОС.ОсновноеСредство = &ОсновноеСредство
				|	И бит_му_СостоянияОС.Состояние = &Состояние";
				ЗапросСчетаУчета.УстановитьПараметр("Организация", СтрокаТаблицы.ДокументИзменениеПараметров.Организация); 									 
				ЗапросСчетаУчета.УстановитьПараметр("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
				ЗапросСчетаУчета.УстановитьПараметр("Состояние", Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
				Выборка = ЗапросСчетаУчета.Выполнить().Выбрать();
				ДатаПринятия = 0;
				Если Выборка.Следующий() Тогда
					ДатаПринятия = Выборка.ДатаСостояния;
					//ФактическийСрокИспользования = ОпределитьФактическийСрокИспользования(Выборка.ДатаСостояния, СтрокаТаблицы.ДокументИзменениеПараметров.Дата);
				КонецЕсли; 
				
				//создадим запись расхода
				НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗаписьНРПВНА, СтрокаТаблицы);
				НоваяЗаписьНРПВНА.Выбрать = Истина;
				НоваяЗаписьНРПВНА.ПриходРасход   = Перечисления.бит_ВидДвиженияНакопления.Расход;
				НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовИзменениеПараметровУчетаОСМСФО; 
				НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДокументИзменениеПараметров.Дата; 
				НоваяЗаписьНРПВНА.Ответственный  = Объект.Ответственный;
				//Если ТипЗнч(НоваяЗаписьНРПВНА.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
				//	//НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.СрокПолезногоИспользования - ФактическийСрокИспользования;
				//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.СрокПолезногоИспользования;
				//ИначеЕсли ТипЗнч(НоваяЗаписьНРПВНА.ДокументПоступления) = Тип("ДокументСсылка.бит_му_МодернизацияОС") ИЛИ ТипЗнч(НоваяЗаписьНРПВНА.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ПеремещениеОС") Тогда
				//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.СрокПолезногоИспользования + 1 - ОпределитьФактическийСрокИспользования(ДатаПринятия, СтрокаТаблицы.ДокументПоступления.Дата);
				//КонецЕсли;
				
				//создадим приходную запись
				НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗаписьНРПВНА, СтрокаТаблицы);
				НоваяЗаписьНРПВНА.Выбрать = Истина;
				НоваяЗаписьНРПВНА.ДокументПоступления = СтрокаТаблицы.ДокументИзменениеПараметров;
				НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовИзменениеПараметровУчетаОСМСФО; 
				НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДокументИзменениеПараметров.Дата; 
				НоваяЗаписьНРПВНА.СчетУчетаАктива = СтрокаТаблицы.СчетУчета;
				НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = СтрокаТаблицы.СчетНачисленияАмортизации;
				НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.ОсновнойСчетЗатрат;
				//НоваяЗаписьНРПВНА.Субконто1СчетаРасходаПоАмортизации = СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.ОсновнойСубконто1;
				//НоваяЗаписьНРПВНА.СуммаАмортизации         = СтрокаТаблицы.НачисленнаяАмортизация;
				Если ТипЗнч(СтрокаТаблицы.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
					//НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.СрокПолезногоИспользования - ФактическийСрокИспользования;
					НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.СрокПолезногоИспользования;
				ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументПоступления) = Тип("ДокументСсылка.бит_му_МодернизацияОС") Тогда
					//НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.СрокПолезногоИспользования + 1 - ОпределитьФактическийСрокИспользования(ДатаПринятия, СтрокаТаблицы.ДокументПоступления.Дата);
					НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.СрокПолезногоИспользования + 1 - ОпределитьФактическийСрокИспользования(ДатаПринятия, СтрокаТаблицы.ДокументИзменениеПараметров.Дата);
				ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ИзменениеПараметровУчетаОС") ИЛИ ТипЗнч(СтрокаТаблицы.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ПеремещениеОС") Тогда
					НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.СрокПолезногоИспользования + 1 - ОпределитьФактическийСрокИспользования(ДатаПринятия, СтрокаТаблицы.ДокументИзменениеПараметров.Дата);
				КонецЕсли;
				
				Для Сч = 1 По 4 Цикл
					НоваяЗаписьНРПВНА["Субконто" + Сч + "СчетаРасходаПоАмортизации"] = Неопределено;
				КонецЦикла;				
				
				НоваяЗаписьНРПВНА.Ответственный  = Объект.Ответственный;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрокаОСов;
	
КонецФункции

//&НаКлиенте
&НаСервере
Функция СоздатьПроводкиПоНРПВНАШаг5(ВыборкаДокументов) //перемещение ОС
	
	Объект.ТаблицаДвижений.Очистить();
	
	СтрокаОСов = "";
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументов.ОсновноеСредство) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаРеализаций = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Сообщать = Истина;
		//Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		Пока ВыборкаРеализаций.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаРеализаций.ДокументРеализации) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаРеализаций.ДокументПеремещение > 1 И Сообщать Тогда
				//Предупреждение("Существует больше одного документа перемещения ОС за период обработки по: " + ВыборкаРеализаций.ОсновноеСредство);
				СтрокаОСов = СтрокаОСов + Строка(ВыборкаРеализаций.ОсновноеСредство) + "; ";
				Сообщать = Ложь;
			КонецЕсли;
			
			СтрокаТаблицы = ВыборкаРеализаций.Выбрать();
			
			Сч = 0;
			
			Пока СтрокаТаблицы.Следующий() Цикл
				
				Если Сч > 0 Тогда
					Прервать;
				КонецЕсли;
				
				Сч = СтрокаТаблицы.ИсточникЗаписиЧисло;
				
				
				ФактическийСрокИспользования = Неопределено;
				
				//получим параметр дата ввода
				ЗапросСчетаУчета = Новый Запрос;
				ЗапросСчетаУчета.Текст = "ВЫБРАТЬ
				|	бит_му_СостоянияОС.ДатаСостояния,
				|	бит_му_ПараметрыОССрезПоследних.ЗначениеПараметра КАК СПИ
				|ИЗ
				|	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
				|			&ДатаСреза,
				|			Параметр = &ПараметрСрокПолезногоИспользования
				|				И Организация = &Организация
				|				И ОсновноеСредство = &ОсновноеСредство) КАК бит_му_ПараметрыОССрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК бит_му_СостоянияОС
				|		ПО бит_му_ПараметрыОССрезПоследних.ОсновноеСредство = бит_му_СостоянияОС.ОсновноеСредство
				|ГДЕ
				|	бит_му_СостоянияОС.Организация = &Организация
				|	И бит_му_СостоянияОС.Состояние = &Состояние";
				ЗапросСчетаУчета.УстановитьПараметр("Организация", СтрокаТаблицы.ДокументПеремещение.Организация); 									 
				ЗапросСчетаУчета.УстановитьПараметр("ДатаСреза", СтрокаТаблицы.ДокументПеремещение.Дата);
				ЗапросСчетаУчета.УстановитьПараметр("ПараметрСрокПолезногоИспользования", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СрокПолезногоИспользования_ОС);
				ЗапросСчетаУчета.УстановитьПараметр("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
				ЗапросСчетаУчета.УстановитьПараметр("Состояние", Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
				Выборка = ЗапросСчетаУчета.Выполнить().Выбрать();
				ДатаПринятия = 0;
				СПИ = '00010101';
				Если Выборка.Следующий() Тогда
					ДатаПринятия = Выборка.ДатаСостояния;
					СПИ = ?(ЗначениеЗаполнено(Выборка.СПИ),Выборка.СПИ, '00010101') ;
				КонецЕсли; 
				
				
				//создадим запись расхода
				НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗаписьНРПВНА, СтрокаТаблицы);		
				НоваяЗаписьНРПВНА.Выбрать = Истина;
				НоваяЗаписьНРПВНА.ПриходРасход   = Перечисления.бит_ВидДвиженияНакопления.Расход;
				НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПеремещениеОСМСФО; 
				НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДокументПеремещение.Дата; 
				НоваяЗаписьНРПВНА.Ответственный  = Объект.Ответственный;
				//Если НЕ ФактическийСрокИспользования = Неопределено Тогда
				//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СПИ - ФактическийСрокИспользования;
				//КонецЕсли;
				//Если ТипЗнч(СтрокаТаблицы.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
				//	//НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.СрокПолезногоИспользования - ФактическийСрокИспользования;
				//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СПИ;
				//ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументПоступления) = Тип("ДокументСсылка.бит_му_МодернизацияОС") ИЛИ ТипЗнч(НоваяЗаписьНРПВНА.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ПеремещениеОС") Тогда
				//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СПИ + 1 - ОпределитьФактическийСрокИспользования(ДатаПринятия, СтрокаТаблицы.ДокументПеремещение.Дата);
				//КонецЕсли;
				
				//создадим приходную запись
				НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗаписьНРПВНА, СтрокаТаблицы);
				НоваяЗаписьНРПВНА.Выбрать = Истина;
				НоваяЗаписьНРПВНА.ДокументПоступления = СтрокаТаблицы.ДокументПЕремещение;
				НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовПеремещениеОСМСФО; 
				НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДокументПеремещение.Дата;
				//НоваяЗаписьНРПВНА.СуммаАмортизации = СтрокаТаблицы.НачисленнаяАмортизация;
				УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Объект", СтрокаТаблицы.НовыйОбъект); 
				//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "Выручки", "Объект", СтрокаТаблицы.НовыйОбъект); 
				//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Объект", СтрокаТаблицы.НовыйОбъект); 
				УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Объект", СтрокаТаблицы.НовыйОбъект); 
				НоваяЗаписьНРПВНА.Ответственный  = Объект.Ответственный;
				//Для Сч = 1 По 4 Цикл
				//	НоваяЗаписьНРПВНА["Субконто" + Сч + "СчетаРасходаПоАмортизации"] = Неопределено;
				//КонецЦикла;
				
				//Если НЕ ФактическийСрокИспользования = Неопределено Тогда
				//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СПИ - ФактическийСрокИспользования;
				//КонецЕсли;
				//Если ТипЗнч(СтрокаТаблицы.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
				//	//НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.СрокПолезногоИспользования - ФактическийСрокИспользования;
				//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СПИ;
				//ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументПоступления) = Тип("ДокументСсылка.бит_му_МодернизацияОС") ИЛИ ТипЗнч(НоваяЗаписьНРПВНА.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ПеремещениеОС") Тогда
				//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СПИ + 1 - ОпределитьФактическийСрокИспользования(ДатаПринятия, СтрокаТаблицы.ДокументПеремещение.Дата);
				//КонецЕсли;				
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрокаОСов; 
	
КонецФункции

// бит_DKravchenko Функция определяет фактический срок использования ВНА (в месяцах)
// исходя из даты принятия ВНА к учету и даты выбытия.
//
// Параметры:
//   ДатаПринятияКУчету - Дата, дата принятия актива к учету.
//   ДатаВыбытия 		- Дата, дата выбытия актива.
//
// Возвращаемое значение:
//   КоличествоМесяцев - Число, число месяцев.
//
Функция ОпределитьФактическийСрокИспользования(ДатаПринятияКУчету, ДатаВыбытия) Экспорт
	
	КоличествоЛет     = Год(ДатаВыбытия) - Год(ДатаПринятияКУчету);
	КоличествоМесяцев = Месяц(ДатаВыбытия) - Месяц(ДатаПринятияКУчету);
	
	КоличествоМесяцев = КоличествоЛет * 12 + КоличествоМесяцев;
	
	Возврат КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()


//&НаКлиенте
&НаСервере
Функция СоздатьПроводкиПоНРПВНАШаг6(ВыборкаДокументов) //начисление амортизации
	
	Объект.ТаблицаДвижений.Очистить();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументов.ОсновноеСредство) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаРеализаций = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		//Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		Пока ВыборкаРеализаций.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаРеализаций.ДокументРеализации) Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаАмортизаций = ВыборкаРеализаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаАмортизаций.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(ВыборкаАмортизаций.ДокументАмортизации) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицы = ВыборкаАмортизаций.Выбрать();
				
				Сч = 0;
				
				Пока СтрокаТаблицы.Следующий() Цикл
					
					Если Сч > 0 Тогда
						Прервать;
					КонецЕсли;
					
					Сч = СтрокаТаблицы.ИсточникЗаписиЧисло;
					
					//создадим приходную запись
					НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
					НоваяЗаписьНРПВНА.Выбрать = Истина;
					НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовНачислениеАмортизацииМСФО;
					НоваяЗаписьНРПВНА.ПриходРасход = Перечисления.бит_ВидДвиженияНакопления.Приход;
					// +СБ Кузнецова С. 2016-11-07 Redmine 2726
					// +СБ Кузнецова С. 2016-12-26 Redmine 2750
					//Если ТипЗнч(СтрокаТаблицы.ДокументАмортизации) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда
					//	НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.Период; 
					//Иначе
					// -СБ Кузнецова С.
					// -СБ Кузнецова С.
					НоваяЗаписьНРПВНА.Период         = СтрокаТаблицы.ДокументАмортизации.Дата; 
					// +СБ Кузнецова С. 2016-11-07 Redmine 2726
					// +СБ Кузнецова С. 2016-12-26 Redmine 2750
					//КонецЕсли;
					// -СБ Кузнецова С.
					// -СБ Кузнецова С.
					НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.ОрганизацияПодрядчик;
					НоваяЗаписьНРПВНА.ОрганизацияЗаказчик = СтрокаТаблицы.ОрганизацияЗаказчик;
					НоваяЗаписьНРПВНА.ДокументРеализации = СтрокаТаблицы.ДокументРеализации;
					НоваяЗаписьНРПВНА.ДокументПоступления = СтрокаТаблицы.ДокументАмортизации;
					НоваяЗаписьНРПВНА.ДатаВвода = СтрокаТаблицы.ДатаВвода;
					// +СБ Кузнецова С. 2016-10-04 Redmine 2651
					Если ТипЗнч(СтрокаТаблицы.ДокументАмортизации) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда
						НоваяЗаписьНРПВНА.Актив = СтрокаТаблицы.ОсновноеСредство;

						ЗапросСчетаУчета = Новый Запрос;
						ЗапросСчетаУчета.Текст = "ВЫБРАТЬ
						|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СПИ
						|ПОМЕСТИТЬ ВТ_СПИ
						|ИЗ
						|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
						|			&ДатаСреза,
						|			Организация = &Организация
						|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	СобытияОСОрганизацийСрезПоследних.Период
						|ПОМЕСТИТЬ ВТ_ДатаВвода
						|ИЗ
						|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(
						|			&ДатаСреза,
						|			Событие = &СобытиеВводВЭксплуатацию
						|				И Организация = &Организация
						|				И ОсновноеСредство = &ОсновноеСредство) КАК СобытияОСОрганизацийСрезПоследних
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ВТ_ДатаВвода.Период КАК ДатаСостояния,
						|	ВТ_СПИ.СПИ
						|ИЗ
						|	ВТ_СПИ КАК ВТ_СПИ,
						|	ВТ_ДатаВвода КАК ВТ_ДатаВвода";
						ЗапросСчетаУчета.УстановитьПараметр("Организация", СтрокаТаблицы.ДокументАмортизации.Организация); 									 
						ЗапросСчетаУчета.УстановитьПараметр("ДатаСреза", СтрокаТаблицы.ДокументАмортизации.Дата);
						ЗапросСчетаУчета.УстановитьПараметр("СобытиеВводВЭксплуатацию", Справочники.СобытияОС.НайтиПоНаименованию("Принятие к учету с вводом в эксплуатацию"));
						ЗапросСчетаУчета.УстановитьПараметр("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
						Выборка = ЗапросСчетаУчета.Выполнить().Выбрать();
						СПИ = СтрокаТаблицы.ОставшийсяСПИ;
						ПринятиеМодернизацияКоличествоМесяцев = 0;
						Если Выборка.Следующий() Тогда
							ПринятиеМодернизацияКоличествоМесяцев = ОпределитьФактическийСрокИспользования(Выборка.ДатаСостояния, СтрокаТаблицы.ДокументПоступления.Дата);
							СПИ = ?(ЗначениеЗаполнено(Выборка.СПИ),Выборка.СПИ, СтрокаТаблицы.ОставшийсяСПИ) ;
							НоваяЗаписьНРПВНА.ДатаВвода = Выборка.ДатаСостояния;
						КонецЕсли;
					Иначе	
					// -СБ Кузнецова С.
					//получим параметр дата ввода и спи
					ЗапросСчетаУчета = Новый Запрос;
					ЗапросСчетаУчета.Текст = "ВЫБРАТЬ
					|	бит_му_СостоянияОС.ДатаСостояния,
					|	бит_му_ПараметрыОССрезПоследних.ЗначениеПараметра КАК СПИ
					|ИЗ
					|	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
					|			&ДатаСреза,
					|			Параметр = &ПараметрСрокПолезногоИспользования
					|				И Организация = &Организация
					|				И ОсновноеСредство = &ОсновноеСредство) КАК бит_му_ПараметрыОССрезПоследних
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК бит_му_СостоянияОС
					|		ПО бит_му_ПараметрыОССрезПоследних.ОсновноеСредство = бит_му_СостоянияОС.ОсновноеСредство
					|ГДЕ
					|	бит_му_СостоянияОС.Организация = &Организация
					|	И бит_му_СостоянияОС.Состояние = &Состояние";
					ЗапросСчетаУчета.УстановитьПараметр("Организация", СтрокаТаблицы.ДокументАмортизации.Организация); 									 
					ЗапросСчетаУчета.УстановитьПараметр("ДатаСреза", СтрокаТаблицы.ДокументАмортизации.Дата);
					ЗапросСчетаУчета.УстановитьПараметр("ПараметрСрокПолезногоИспользования", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СрокПолезногоИспользования_ОС);
					ЗапросСчетаУчета.УстановитьПараметр("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
					ЗапросСчетаУчета.УстановитьПараметр("Состояние", Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
					Выборка = ЗапросСчетаУчета.Выполнить().Выбрать();
					СПИ = СтрокаТаблицы.ОставшийсяСПИ;
					ПринятиеМодернизацияКоличествоМесяцев = 0;
					Если Выборка.Следующий() Тогда
						ПринятиеМодернизацияКоличествоМесяцев = ОпределитьФактическийСрокИспользования(Выборка.ДатаСостояния, СтрокаТаблицы.ДокументПоступления.Дата);
						СПИ = ?(ЗначениеЗаполнено(Выборка.СПИ),Выборка.СПИ, СтрокаТаблицы.ОставшийсяСПИ) ;
					КонецЕсли;
					// +СБ Кузнецова С. 2016-10-04 Redmine 2651
					КонецЕсли;
					// -СБ Кузнецова С.
					
					//Если ТипЗнч(СтрокаТаблицы.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
					//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СПИ;
					//	НоваяЗаписьНРПВНА.СуммаАмортизации = СтрокаТаблицы.СуммаБезНДС/?(СПИ = 0, 1, СПИ) ;
					//ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументПоступления) = Тип("ДокументСсылка.бит_му_МодернизацияОС") Тогда
					//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СПИ + 1 - ПринятиеМодернизацияКоличествоМесяцев;
					//	НоваяЗаписьНРПВНА.СуммаАмортизации = СтрокаТаблицы.СуммаБезНДС/?(НоваяЗаписьНРПВНА.ОставшийсяСПИ = 0, 1, НоваяЗаписьНРПВНА.ОставшийсяСПИ) ;
					//КонецЕсли;
					НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаТаблицы.ОставшийсяСПИ;
					// --> BIT AGoncharenko CR#267 06.05.2015
					Если СтрокаТаблицы.ОставшийсяСПИ = 0 Тогда
						НоваяЗаписьНРПВНА.СуммаАмортизации = 0;
					Иначе
						НоваяЗаписьНРПВНА.СуммаАмортизации = СтрокаТаблицы.СуммаБезНДС/?(СтрокаТаблицы.ОставшийсяСПИ = 0, 1, СтрокаТаблицы.ОставшийсяСПИ) ;
					КонецЕсли;
					// <-- BIT AGoncharenko
					// +СБ Кузнецова С. 2016-10-05 Redmine 2651 
					Если ТипЗнч(СтрокаТаблицы.ДокументАмортизации) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда
						// счета и субконто
						ИмяИсточника = "Хозрасчетный";
						ИмяПриемника = "бит_Дополнительный_2";
						КодПравилТрансляции = бит_МеханизмТрансляции.ПолучитьПравилаИКэш(СтрокаТаблицы.ОрганизацияЗаказчик, ИмяИсточника, ИмяПриемника, СтрокаТаблицы.ДокументАмортизации);
						
						Если ЗначениеЗаполнено(СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации) Тогда
							
							// +СБ Кузнецова С. 2016-12-06 Redmine 2750
							Если ТипЗнч(СтрокаТаблицы.СчетНачисленияАмортизации) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
							// -СБ Кузнецова С.
							СтруктураСчетов = бит_МеханизмТрансляции.ВыполнитьПодборСчетаПоПравилам(Новый Структура("СчетДт, СчетКт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СубконтоДт4, СубконтоКт1, СубконтоКт2, СубконтоКт3, СубконтоКт4, ПодразделениеДт, ПодразделениеКт, Сумма", 
																										СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.Способы[0].СчетЗатрат, СтрокаТаблицы.СчетНачисленияАмортизации, СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.Способы[0].Субконто1, СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.Способы[0].Субконто2, СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.Способы[0].Субконто3, , СтрокаТаблицы.ОсновноеСредство, , , , СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.Способы[0].ПодразделениеОрганизации, , СтрокаТаблицы.СуммаБезНДС), 
																										СтрокаТаблицы.ОрганизацияПодрядчик,
																										ИмяИсточника, ИмяПриемника, СтрокаТаблицы.ДокументАмортизации, КодПравилТрансляции, Ложь);
							
							НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = СтруктураСчетов.ЗаписьПриемник.СчетКт;
							// +СБ Кузнецова С. 2016-12-06 Redmine 2750
							Иначе
								НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = СтрокаТаблицы.СчетНачисленияАмортизации;
							КонецЕсли;
							// -СБ Кузнецова С.
							УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Основные средства", СтрокаТаблицы.ОсновноеСредство); 
							УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
							// +СБ Кузнецова С. 2016-12-06 Redmine 2750
							Если ТипЗнч(СтрокаТаблицы.СчетРасходаПоАмортизации) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
							// -СБ Кузнецова С.
							НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = СтруктураСчетов.ЗаписьПриемник.СчетДт;
							// +СБ Кузнецова С. 2016-12-06 Redmine 2750
							Иначе
								НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = СтрокаТаблицы.СчетРасходаПоАмортизации;
							КонецЕсли;
							// -СБ Кузнецова С.
							УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
							//+СБ Пискунова #2802 28.03.2017
							// +СБ Кузнецова С. 2017-05-04 Redmine 2802
							//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Функции", СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.ОсновнойСубконто2); 
							УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Функции", СтрокаТаблицы.Функция); 
							// -СБ Кузнецова С.
							//-СБ Пискунова #2802 28.03.2017
							УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Периоды", Справочники.рс_МесяцыНачисления.НайтиПоРеквизиту("Дата", НачалоМесяца(СтрокаТаблицы.ДокументАмортизации.Дата)));
						Иначе
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = "Для основного средства """ + СтрокаТаблицы.ОсновноеСредство + """ (код " + СтрокаТаблицы.ОсновноеСредство.Код + ") не удалось определить способ отражения расходов по амортизации! Невозможно выполнить трансляцию счетов и субконто!";
							Сообщение.Сообщить();
						КонецЕсли;
					Иначе	
					// -СБ Кузнецова С.
					НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = СтрокаТаблицы.СчетНачисленияАмортизации; 
					УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Основные средства", СтрокаТаблицы.ОсновноеСредство); 
					УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
					НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.ОсновнойСчетЗатрат;
					//НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = СтрокаТаблицы.СчетРасходаПоАмортизации;
					УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
					УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Функции", СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.ОсновнойСубконто2); 
					УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Периоды", Справочники.рс_МесяцыНачисления.НайтиПоРеквизиту("Дата", НачалоМесяца(СтрокаТаблицы.ДокументАмортизации.Дата)));
					// +СБ Кузнецова С. 2016-10-05 Redmine 2651 
					КонецЕсли;
					// -СБ Кузнецова С.
					НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
					НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

//&НаКлиенте
&НаСервере
//+Сундукова 18.04.16 №2381
//Функция СоздатьПроводкиПоНРПВНАШаг7(ВыборкаДокументов, СчетВыбытия, МассивОрганизаций, ИнформацияОЗадвоении) //выбытие
//Объект.ТаблицаДвижений.Очистить();
Функция СоздатьПроводкиПоНРПВНАШаг7(РезультатЗапроса, СчетВыбытия, МассивОрганизаций, ИнформацияОЗадвоении) //выбытие	
	Объект.ТаблицаДвижений.Очистить();
	ВыборкаДокументов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 	 	
	//-Сундукова 18.04.16 №2381
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДокументов.ОсновноеСредство) Тогда
			Продолжить;
		КонецЕсли;
		
		СообщатьОДвухВыбытиях = Истина;
		
		ВыборкаРеализаций = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		//Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		Пока ВыборкаРеализаций.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаРеализаций.ДокументРеализации) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ВыборкаРеализаций.Выбрать();
			
			Сч = 0;
			
			Пока СтрокаТаблицы.Следующий() Цикл
				
				Если Сч > 0 И Сч <> СтрокаТаблицы.ИсточникЗаписиЧисло Тогда
					Прервать;
				КонецЕсли;
				
				Сч = СтрокаТаблицы.ИсточникЗаписиЧисло;
				
				//получим параметр дата ввода и спи
				ЗапросСчетаУчета = Новый Запрос;
				ЗапросСчетаУчета.Текст = "ВЫБРАТЬ
				|	бит_му_СостоянияОС.ДатаСостояния,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА бит_му_ПараметрыОССрезПоследних.Параметр = &ПараметрСрокПолезногоИспользования
				|				ТОГДА бит_му_ПараметрыОССрезПоследних.ЗначениеПараметра
				|		КОНЕЦ) КАК СПИ,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА бит_му_ПараметрыОССрезПоследних.Параметр = &ПараметрСпособОтражения
				|				ТОГДА бит_му_ПараметрыОССрезПоследних.ЗначениеПараметра
				|		КОНЕЦ) КАК СпособОтражения,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА бит_му_ПараметрыОССрезПоследних.Параметр = &ПараметрСчетНачисленияАмортизации
				|				ТОГДА бит_му_ПараметрыОССрезПоследних.ЗначениеПараметра
				|		КОНЕЦ) КАК СчетНачисленияАмортизации,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА бит_му_ПараметрыОССрезПоследних.Параметр = &ПараметрСчетУчетаАктива
				|				ТОГДА бит_му_ПараметрыОССрезПоследних.ЗначениеПараметра
				|		КОНЕЦ) КАК СчетУчетаАктива
				|ИЗ
				|	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
				|			&ДатаСреза,
				|			(Параметр = &ПараметрСрокПолезногоИспользования
				|			ИЛИ Параметр = &ПараметрСпособОтражения
				|			ИЛИ Параметр = &ПараметрСчетНачисленияАмортизации
				|			ИЛИ Параметр = &ПараметрСчетУчетаАктива)
				|				И Организация = &Организация
				|				И ОсновноеСредство = &ОсновноеСредство) КАК бит_му_ПараметрыОССрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК бит_му_СостоянияОС
				|		ПО бит_му_ПараметрыОССрезПоследних.ОсновноеСредство = бит_му_СостоянияОС.ОсновноеСредство
				|ГДЕ
				|	бит_му_СостоянияОС.Организация = &Организация
				|	И бит_му_СостоянияОС.Состояние = &Состояние
				|
				|СГРУППИРОВАТЬ ПО
				|	бит_му_СостоянияОС.ДатаСостояния";
				ЗапросСчетаУчета.УстановитьПараметр("Организация", СтрокаТаблицы.ДокументВыбытия.Организация); 									 
				ЗапросСчетаУчета.УстановитьПараметр("ДатаСреза", СтрокаТаблицы.ДокументВыбытия.Дата);
				ЗапросСчетаУчета.УстановитьПараметр("ПараметрСрокПолезногоИспользования", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СрокПолезногоИспользования_ОС);
				ЗапросСчетаУчета.УстановитьПараметр("ПараметрСпособОтражения", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СпособОтраженияРасходовПоАмортизации_ОС);
				ЗапросСчетаУчета.УстановитьПараметр("ПараметрСчетНачисленияАмортизации", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС);
				ЗапросСчетаУчета.УстановитьПараметр("ПараметрСчетУчетаАктива", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
				ЗапросСчетаУчета.УстановитьПараметр("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
				ЗапросСчетаУчета.УстановитьПараметр("Состояние", Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
				Выборка = ЗапросСчетаУчета.Выполнить().Выбрать();
				СПИ = СтрокаТаблицы.пОставшийсяСПИ;
				ПринятиеМодернизацияКоличествоМесяцев = 0;
				СпособОтражения = Неопределено;
				СчетНачисленияАмортизации = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
				СчетУчетаАктива           = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
				Если Выборка.Следующий() Тогда
					ПринятиеМодернизацияКоличествоМесяцев = ОпределитьФактическийСрокИспользования(Выборка.ДатаСостояния, СтрокаТаблицы.пДокументПоступления.Дата);
					СПИ = ?(ЗначениеЗаполнено(Выборка.СПИ),Выборка.СПИ, СтрокаТаблицы.ОставшийсяСПИ) ;
					СпособОтражения = ?(ЗначениеЗаполнено(Выборка.СпособОтражения), Выборка.СпособОтражения, Неопределено);
					СчетНачисленияАмортизации = ?(ЗначениеЗаполнено(Выборка.СчетНачисленияАмортизации), Выборка.СчетНачисленияАмортизации, ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка()); 
					СчетУчетаАктива = ?(ЗначениеЗаполнено(Выборка.СчетУчетаАктива), Выборка.СчетУчетаАктива, ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка()); 
				КонецЕсли;
				
				
				//проверим, есть ли документы выбытия с типом перевод в предназначенные для продажи
				ТретьяЧетвертаяСтрока = Ложь;
				Если СтрокаТаблицы.ДокументВыбытия.ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.Выбытие Тогда
					ЗапросВыбытий = Новый Запрос;
					ЗапросВыбытий.Текст = "ВЫБРАТЬ
					                      |	бит_му_ВыбытиеОСОсновныеСредства.НомерСтроки,
					                      |	бит_му_ВыбытиеОСОсновныеСредства.Ссылка
					                      |ИЗ
					                      |	Документ.бит_му_ВыбытиеОС.ОсновныеСредства КАК бит_му_ВыбытиеОСОсновныеСредства
					                      |ГДЕ
					                      |	бит_му_ВыбытиеОСОсновныеСредства.ОсновноеСредство = &ОсновноеСредство
					                      |	И бит_му_ВыбытиеОСОсновныеСредства.Ссылка.Проведен = ИСТИНА
					                      |	И бит_му_ВыбытиеОСОсновныеСредства.Ссылка.Организация В(&ОрганизацияЗаказчик)
					                      |	И бит_му_ВыбытиеОСОсновныеСредства.Ссылка.ВидДвижения = &ВидДвижения";
					ЗапросВыбытий.УстановитьПараметр("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
					ЗапросВыбытий.УстановитьПараметр("ОрганизацияЗаказчик", ?(Объект.СоздатьДляПериметра, МассивОрганизаций, Объект.ОрганизацияЗаказчик));
					ЗапросВыбытий.УстановитьПараметр("ВидДвижения", Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи);
					
					РезультатПроверки = ЗапросВыбытий.Выполнить();
					Если РезультатПроверки.Пустой() Тогда
						ТретьяЧетвертаяСтрока = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Сч <> 6
					И НЕ ТретьяЧетвертаяСтрока 
					И СтрокаТаблицы.ДокументВыбытия.ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.Выбытие 
					И СообщатьОДвухВыбытиях Тогда					
					ВыборкаПроверки = РезультатПроверки.Выбрать();
					Если ВыборкаПроверки.Следующий() Тогда
						Сообщить("По основному средству: " + СтрокаТаблицы.ОсновноеСредство + " в базе содержатся два документа выбытия: " + СтрокаТаблицы.ДокументВыбытия + " и " + ВыборкаПроверки.Ссылка + ". При необходимости следует скорректировать сумму в поле ""Сумма без НДС"" по документу выбытие: " + СтрокаТаблицы.ДокументВыбытия + " на сумму аммортизации, начисленной документом выбытия: " + ВыборкаПроверки.Ссылка);
						СообщатьОДвухВыбытиях = Ложь;
						ИнформацияОЗадвоении = Истина;
					КонецЕсли;
				КонецЕсли;
				
				//создадим первую запись прихода
				Если СтрокаТаблицы.НомерСтрокиНачисления >0 Тогда
					НоваяЗаписьНРПВНА = Объект.ТаблицаДвижений.Добавить();
					НоваяЗаписьНРПВНА.Выбрать = Истина;
					НоваяЗаписьНРПВНА.Период                   = СтрокаТаблицы.ДокументВыбытия.Дата;
					НоваяЗаписьНРПВНА.ПриходРасход             = Перечисления.бит_ВидДвиженияНакопления.Приход;
					НоваяЗаписьНРПВНА.ИсточникЗаписи           = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовВыбытиеОСМСФО; 
					НоваяЗаписьНРПВНА.ОрганизацияПодрядчик     = СтрокаТаблицы.пОрганизацияПодрядчик;
					НоваяЗаписьНРПВНА.ОрганизацияЗаказчик      = СтрокаТаблицы.пОрганизацияЗаказчик;
					НоваяЗаписьНРПВНА.ДокументРеализации       = СтрокаТаблицы.ДокументРеализации;
					НоваяЗаписьНРПВНА.ДокументПоступления      = СтрокаТаблицы.ДокументВыбытия;
					НоваяЗаписьНРПВНА.ДатаВвода                = СтрокаТаблицы.пДатаВвода;
					//Если ЗначениеЗаполнено(СпособОтражения) Тогда
						//НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации  = СпособОтражения.ОсновнойСчетЗатрат;
						//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
						//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Функции", СпособОтражения.ОсновнойСубконто2); 
						//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Периоды", Справочники.рс_МесяцыНачисления.НайтиПоРеквизиту("Дата", НачалоМесяца(СтрокаТаблицы.ДокументВыбытия.Дата)));
					//КонецЕсли;
					НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = СтрокаТаблицы.пСчетРасходаПоАмортизации;
					//НоваяЗаписьНРПВНА.Субконто1СчетаРасходаПоАмортизации = СтрокаТаблицы.пСубконто1СчетаРасходаПоАмортизации;
					//НоваяЗаписьНРПВНА.Субконто2СчетаРасходаПоАмортизации = СтрокаТаблицы.пСубконто2СчетаРасходаПоАмортизации;
					//НоваяЗаписьНРПВНА.Субконто3СчетаРасходаПоАмортизации = СтрокаТаблицы.пСубконто3СчетаРасходаПоАмортизации;
					Если ЗначениеЗаполнено(СпособОтражения) Тогда
						УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
						УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Функции", СпособОтражения.ОсновнойСубконто2); 
						УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Периоды", Справочники.рс_МесяцыНачисления.НайтиПоРеквизиту("Дата", НачалоМесяца(СтрокаТаблицы.ДокументВыбытия.Дата)));
					КонецЕсли;
					УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "РасходаПоАмортизации", "Периоды", Справочники.рс_МесяцыНачисления.НайтиПоРеквизиту("Дата", НачалоМесяца(СтрокаТаблицы.ДокументВыбытия.Дата)));
					
					
					Если ЗначениеЗаполнено(СчетНачисленияАмортизации) Тогда
						//НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = СчетНачисленияАмортизации;
						НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = СтрокаТаблицы.пСчетНакопленнойАмортизации;
						//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
						//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Основные средства", СтрокаТаблицы.ОсновноеСредство);
						НоваяЗаписьНРПВНА.Субконто1СчетаНакопленнойАмортизации = СтрокаТаблицы.пСубконто1СчетаНакопленнойАмортизации;
						НоваяЗаписьНРПВНА.Субконто2СчетаНакопленнойАмортизации = СтрокаТаблицы.пСубконто2СчетаНакопленнойАмортизации;
						НоваяЗаписьНРПВНА.Субконто3СчетаНакопленнойАмортизации = СтрокаТаблицы.пСубконто3СчетаНакопленнойАмортизации;
					КонецЕсли;
					//Если ТипЗнч(СтрокаТаблицы.пДокументПоступления) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
					//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СПИ;
					//	НоваяЗаписьНРПВНА.СуммаАмортизации = СтрокаТаблицы.пСуммаБезНДС/?(СПИ = 0, 1, СПИ) ;
					//ИначеЕсли ТипЗнч(СтрокаТаблицы.пДокументПоступления) = Тип("ДокументСсылка.бит_му_МодернизацияОС") Тогда
					//	НоваяЗаписьНРПВНА.ОставшийсяСПИ = СПИ + 1 - ПринятиеМодернизацияКоличествоМесяцев;
					//	НоваяЗаписьНРПВНА.СуммаАмортизации = СтрокаТаблицы.пСуммаБезНДС/?(НоваяЗаписьНРПВНА.ОставшийсяСПИ = 0, 1, НоваяЗаписьНРПВНА.ОставшийсяСПИ) ;
					//КонецЕсли;
					//НоваяЗаписьНРПВНА.ОставшийсяСПИ            = СтрокаТаблицы.пОставшийсяСПИ;
					НоваяЗаписьНРПВНА.ОставшийсяСПИ            = СтрокаТаблицы.пОставшийсяСПИ;
					НоваяЗаписьНРПВНА.СуммаАмортизации         = СтрокаТаблицы.пСуммаБезНДС/?(СтрокаТаблицы.пОставшийсяСПИ = 0, 1, СтрокаТаблицы.пОставшийсяСПИ);
					//НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = СтрокаТаблицы.пСчетРасходаПоАмортизации;
					
					НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
					НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
				КонецЕсли;
				
				Если СтрокаТаблицы.ДокументВыбытия.ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи ИЛИ ТретьяЧетвертаяСтрока Тогда
					//создадим вторую запись прихода
					НоваяЗаписьНРПВНА                      = Объект.ТаблицаДвижений.Добавить();
					НоваяЗаписьНРПВНА.Выбрать = Истина;
					НоваяЗаписьНРПВНА.Период               = СтрокаТаблицы.ДокументВыбытия.Дата;
					НоваяЗаписьНРПВНА.ПриходРасход         = Перечисления.бит_ВидДвиженияНакопления.Приход;
					НоваяЗаписьНРПВНА.ИсточникЗаписи       = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовВыбытиеОСМСФО; 
					НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.пОрганизацияПодрядчик;
					НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтрокаТаблицы.пОрганизацияЗаказчик;
					НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.ДокументРеализации;
					НоваяЗаписьНРПВНА.ДокументПоступления  = СтрокаТаблицы.ДокументВыбытия;
					//посчитаем сумму без НДС
					//Если ТипЗнч(СтрокаТаблицы.пДокументПоступления) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
					//	НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + СтрокаТаблицы.пСуммаБезНДС/?(СПИ = 0, 1, СПИ));
					//ИначеЕсли ТипЗнч(СтрокаТаблицы.пДокументПоступления) = Тип("ДокументСсылка.бит_му_МодернизацияОС") Тогда
					//	НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + СтрокаТаблицы.пСуммаБезНДС/?(СПИ + 1 - ПринятиеМодернизацияКоличествоМесяцев = 0, 1, СПИ + 1 - ПринятиеМодернизацияКоличествоМесяцев));
					//КонецЕсли;
					НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + ?(СтрокаТаблицы.НомерСтрокиНачисления >0, СтрокаТаблицы.пСуммаБезНДС/?(СтрокаТаблицы.пОставшийсяСПИ = 0, 1, СтрокаТаблицы.пОставшийсяСПИ),0));
					НоваяЗаписьНРПВНА.СчетВыручки          = СтрокаТаблицы.пСчетвыручки;
					НоваяЗаписьНРПВНА.СчетУчетаАктива      = СчетВыбытия;
					УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
					УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Основные средства", СтрокаТаблицы.ОсновноеСредство); 
					
					Для Ном = 1 По 4 Цикл
						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = СтрокаТаблицы["пСубконто" + Ном + "СчетаВыручки"];
					КонецЦикла;
					НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
					НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
				КонецЕсли;
				
				Если СтрокаТаблицы.ДокументВыбытия.ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.Выбытие Тогда			
					//создадим третью запись прихода
					НоваяЗаписьНРПВНА                      = Объект.ТаблицаДвижений.Добавить();
					НоваяЗаписьНРПВНА.Выбрать = Истина;
					НоваяЗаписьНРПВНА.Период               = СтрокаТаблицы.ДокументВыбытия.Дата;
					НоваяЗаписьНРПВНА.ПриходРасход         = Перечисления.бит_ВидДвиженияНакопления.Приход;
					НоваяЗаписьНРПВНА.ИсточникЗаписи       = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовВыбытиеОСМСФО; 
					НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.пОрганизацияПодрядчик;
					НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтрокаТаблицы.пОрганизацияЗаказчик;
					НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.ДокументРеализации;
					НоваяЗаписьНРПВНА.ДокументПоступления  = СтрокаТаблицы.ДокументВыбытия;
					//посчитаем сумму без НДС
					//Если ТипЗнч(СтрокаТаблицы.пДокументПоступления) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
					//	НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + СтрокаТаблицы.пСуммаБезНДС/?(СПИ = 0, 1, СПИ));
					//ИначеЕсли ТипЗнч(СтрокаТаблицы.пДокументПоступления) = Тип("ДокументСсылка.бит_му_МодернизацияОС") Тогда
					//	НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + СтрокаТаблицы.пСуммаБезНДС/?(СПИ + 1 - ПринятиеМодернизацияКоличествоМесяцев = 0, 1, СПИ + 1 - ПринятиеМодернизацияКоличествоМесяцев));
					//КонецЕсли;
					//НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + ?(СтрокаТаблицы.НомерСтрокиНачисления >0, СтрокаТаблицы.пСуммаБезНДС/?(СтрокаТаблицы.пОставшийсяСПИ = 0, 1, СтрокаТаблицы.пОставшийсяСПИ), 0));
					Если Сч <> 6 Тогда
						НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + ?(СтрокаТаблицы.НомерСтрокиНачисления >0, СтрокаТаблицы.пСуммаБезНДС/?(СтрокаТаблицы.пОставшийсяСПИ = 0, 1, СтрокаТаблицы.пОставшийсяСПИ), 0));
					Иначе
						НоваяЗаписьНРПВНА.СуммаБезНДС = СтрокаТаблицы.пСуммаБезНДС;
					КонецЕсли;
					НоваяЗаписьНРПВНА.СчетВыручки          = СтрокаТаблицы.пСчетвыручки;					
					НоваяЗаписьНРПВНА.СчетУчетаАктива      = СтрокаТаблицы.СчетКт;
					//НоваяЗаписьНРПВНА.Субконто1СчетаУчетаАктива = СтрокаТаблицы.пСубконто1СчетаУчетаАктива;
					//НоваяЗаписьНРПВНА.Субконто2СчетаУчетаАктива = СтрокаТаблицы.пСубконто2СчетаУчетаАктива;
					//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
					//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Основные средства", СтрокаТаблицы.ОсновноеСредство); 					
					НоваяЗаписьНРПВНА.Субконто1СчетаУчетаАктива = СтрокаТаблицы.Субконто1;
					НоваяЗаписьНРПВНА.Субконто2СчетаУчетаАктива = СтрокаТаблицы.Субконто2;
					НоваяЗаписьНРПВНА.Субконто3СчетаУчетаАктива = СтрокаТаблицы.Субконто3;
					
					
					Для Ном = 1 По 4 Цикл
						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = СтрокаТаблицы["пСубконто" + Ном + "СчетаВыручки"];
					КонецЦикла;	
					НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
					НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
				КонецЕсли;
				
				/////////////////////////////////////////////////////
				/////////////////////////////////////////////////////
				/////////////////////////////////////////////////////
				
				Если СтрокаТаблицы.ДокументВыбытия.ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи ИЛИ ТретьяЧетвертаяСтрока Тогда
					//создадим первую расходную запись
					НоваяЗаписьНРПВНА                          = Объект.ТаблицаДвижений.Добавить();
					НоваяЗаписьНРПВНА.Выбрать = Истина;
					НоваяЗаписьНРПВНА.Период                   = СтрокаТаблицы.ДокументВыбытия.Дата;
					НоваяЗаписьНРПВНА.ПриходРасход             = Перечисления.бит_ВидДвиженияНакопления.Расход;
					НоваяЗаписьНРПВНА.ИсточникЗаписи           = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовВыбытиеОСМСФО; 
					НоваяЗаписьНРПВНА.ОрганизацияПодрядчик     = СтрокаТаблицы.пОрганизацияПодрядчик;
					НоваяЗаписьНРПВНА.ОрганизацияЗаказчик      = СтрокаТаблицы.пОрганизацияЗаказчик;
					НоваяЗаписьНРПВНА.ДокументРеализации       = СтрокаТаблицы.ДокументРеализации;
					НоваяЗаписьНРПВНА.ДокументПоступления      = СтрокаТаблицы.ДокументВыбытия;
					//посчитаем сумму без НДС			
					НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС;			
					НоваяЗаписьНРПВНА.СчетВыручки              = СтрокаТаблицы.пСчетВыручки;
					Если ЗначениеЗаполнено(СчетУчетаАктива) Тогда
						НоваяЗаписьНРПВНА.СчетУчетаАктива          = СтрокаТаблицы.пСчетУчетаАктива;
						НоваяЗаписьНРПВНА.Субконто1СчетаУчетаАктива = СтрокаТаблицы.пСубконто1СчетаУчетаАктива;
						НоваяЗаписьНРПВНА.Субконто2СчетаУчетаАктива = СтрокаТаблицы.пСубконто2СчетаУчетаАктива;
						//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
						//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Основные средства", СтрокаТаблицы.ОсновноеСредство); 
					КонецЕсли;
					НоваяЗаписьНРПВНА.СуммаАмортизации         = СтрокаТаблицы.СуммаАмортизации + ?(СтрокаТаблицы.НомерСтрокиНачисления >0, СтрокаТаблицы.пСуммаБезНДС/?(СтрокаТаблицы.пОставшийсяСПИ = 0, 1, СтрокаТаблицы.пОставшийсяСПИ), 0);
					Если ЗначениеЗаполнено(СчетНачисленияАмортизации) Тогда
						НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = СтрокаТаблицы.пСчетНакопленнойАмортизации;
						//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
						//УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "НакопленнойАмортизации", "Основные средства", СтрокаТаблицы.ОсновноеСредство); 
						НоваяЗаписьНРПВНА.Субконто1СчетаНакопленнойАмортизации = СтрокаТаблицы.пСубконто1СчетаНакопленнойАмортизации;
						НоваяЗаписьНРПВНА.Субконто2СчетаНакопленнойАмортизации = СтрокаТаблицы.пСубконто2СчетаНакопленнойАмортизации;
					КонецЕсли;
					
					Для Ном = 1 По 4 Цикл
						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = СтрокаТаблицы["пСубконто" + Ном + "СчетаВыручки"];
					КонецЦикла;
					НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
					НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
				КонецЕсли;
				
				Если СтрокаТаблицы.ДокументВыбытия.ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.Выбытие Тогда
					//создадим вторую расходную запись
					НоваяЗаписьНРПВНА                      = Объект.ТаблицаДвижений.Добавить();
					НоваяЗаписьНРПВНА.Выбрать = Истина;
					НоваяЗаписьНРПВНА.Период               = СтрокаТаблицы.ДокументВыбытия.Дата;
					НоваяЗаписьНРПВНА.ПриходРасход         = Перечисления.бит_ВидДвиженияНакопления.Расход;
					НоваяЗаписьНРПВНА.ИсточникЗаписи       = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.АнализДокументовВыбытиеОСМСФО; 
					НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = СтрокаТаблицы.пОрганизацияПодрядчик;
					НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтрокаТаблицы.пОрганизацияЗаказчик;
					НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.ДокументРеализации;
					НоваяЗаписьНРПВНА.ДокументПоступления  = СтрокаТаблицы.ДокументВыбытия;
					//посчитаем сумму без НДС
					//Если ТипЗнч(СтрокаТаблицы.пДокументПоступления) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
					//	НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + СтрокаТаблицы.пСуммаБезНДС/?(СПИ = 0, 1, СПИ));
					//ИначеЕсли ТипЗнч(СтрокаТаблицы.пДокументПоступления) = Тип("ДокументСсылка.бит_му_МодернизацияОС") Тогда
					//	НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + СтрокаТаблицы.пСуммаБезНДС/?(СПИ + 1 - ПринятиеМодернизацияКоличествоМесяцев = 0, 1, СПИ + 1 - ПринятиеМодернизацияКоличествоМесяцев));
					//КонецЕсли;
					//НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + ?(СтрокаТаблицы.НомерСтрокиНачисления >0, СтрокаТаблицы.пСуммаБезНДС/?(СтрокаТаблицы.пОставшийсяСПИ = 0, 1, СтрокаТаблицы.пОставшийсяСПИ), 0));
					Если Сч <> 6 Тогда
						НоваяЗаписьНРПВНА.СуммаБезНДС              = СтрокаТаблицы.пСуммаБезНДС - (СтрокаТаблицы.СуммаАмортизации + ?(СтрокаТаблицы.НомерСтрокиНачисления >0, СтрокаТаблицы.пСуммаБезНДС/?(СтрокаТаблицы.пОставшийсяСПИ = 0, 1, СтрокаТаблицы.пОставшийсяСПИ), 0));
					Иначе
						НоваяЗаписьНРПВНА.СуммаБезНДС = СтрокаТаблицы.пСуммаБезНДС;
					КонецЕсли;
					НоваяЗаписьНРПВНА.СчетВыручки          = СтрокаТаблицы.пСчетвыручки;
					//НоваяЗаписьНРПВНА.СчетУчетаАктива      = СтрокаТаблицы.пСчетУчетаАктива;
					//НоваяЗаписьНРПВНА.Субконто1СчетаУчетаАктива = СтрокаТаблицы.пСубконто1СчетаУчетаАктива;
					//НоваяЗаписьНРПВНА.Субконто2СчетаУчетаАктива = СтрокаТаблицы.пСубконто2СчетаУчетаАктива;
					НоваяЗаписьНРПВНА.СчетУчетаАктива      = СчетВыбытия;
					УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Объект", СтрокаТаблицы.ОсновноеСредство.Объект); 
					УстановитьСубконтоНРПВНА(НоваяЗаписьНРПВНА, "УчетаАктива", "Основные средства", СтрокаТаблицы.ОсновноеСредство); 
					
					Для Ном = 1 По 4 Цикл
						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = СтрокаТаблицы["пСубконто" + Ном + "СчетаВыручки"];
					КонецЦикла;
					НоваяЗаписьНРПВНА.Ответственный = Объект.Ответственный;
					НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура УсловноеОформлениеНаСервере(ТекНомер)
	
	мУсловноеОформление = ЭтаФорма.УсловноеОформление;
	
	мУсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = мУсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличнаяЧастьВыполнить");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТабличнаяЧасть.НомерСтроки");
	//БИТ Тртилек 18062014
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	///БИТ Тртилек
	ЭлементОтбора.ПравоеЗначение = ТекНомер+2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
			
	Для Ном = 1 По ТекНомер+1 Цикл
		ЭлементУсловногоОформленияКрасим = мУсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформленияКрасим.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличнаяЧастьНомерСтроки");
		ОформляемоеПоле = ЭлементУсловногоОформленияКрасим.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличнаяЧастьСозданныеЗаписиРегистра");
		ОформляемоеПоле = ЭлементУсловногоОформленияКрасим.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличнаяЧастьШаг");
		ОформляемоеПоле = ЭлементУсловногоОформленияКрасим.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличнаяЧастьВыполнить");
		ОформляемоеПоле = ЭлементУсловногоОформленияКрасим.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличнаяЧастьСделано");
		ЭлементОтбора = ЭлементУсловногоОформленияКрасим.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТабличнаяЧасть.НомерСтроки");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ном;
		ЭлементУсловногоОформленияКрасим.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(222,222,222));   
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидОперации(ВидОперацииСтрока)
	
	ОперацияСоздаваемогоДокумента = Неопределено;
	
	Для Каждого ВидОперации Из Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности Цикл		
		
		Если Строка(ВидОперации) = ВидОперацииСтрока Тогда 			
			
			ОперацияСоздаваемогоДокумента = ВидОперации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОперацияСоздаваемогоДокумента;
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьФормуНастройками();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗаполнитьФормуНастройками();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Объект.ТабличнаяЧасть.Очистить();
	
	ПриОткрытии(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДляПериметраПриИзменении(Элемент)
	
	УстановитьВидимостьПоляПериметра();
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоляПериметра()
	
	Элементы.ПериметрКонсолидации.Видимость = Объект.СоздатьДляПериметра;
	Элементы.ОрганизацияЗаказчик.Видимость = Не Объект.СоздатьДляПериметра;
	Элементы.ОрганизацияПодрядчик.Видимость = Не Объект.СоздатьДляПериметра;
	
КонецПроцедуры


// БИТ Тртилек 09.10.2013 Процедура устанавливает субконто на счете. Если такое субконто на счете отсутствует, 
// то ничего не делается. 
//
// Параметры:
//	Счет - Счет, к которому относится субконто
//  Название счета - название концовки счета/субконто 
//	Номер или имя установливаемого субконто
//  Значение субконто - значение устанавливаемого субконто
//
//&НаКлиенте
&НаСервере
Процедура УстановитьСубконтоНРПВНА(Строка, НазваниеСчета, ИмяСубконто, ЗначениеСубконто)

	Если Строка["Счет" + НазваниеСчета] = Неопределено ИЛИ Строка["Счет" + НазваниеСчета].Пустая() Тогда
		Возврат;
	КонецЕсли;

	ВидыСубконтоСчета = Строка["Счет" + НазваниеСчета].ВидыСубконто;	 
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
			Возврат;
		КонецЕсли;

		Строка["Субконто" + ИмяСубконто + "Счета" + НазваниеСчета] = ЗначениеСубконто;

	ИначеЕсли ТипЗнч(ИмяСубконто) = Тип("Строка") Тогда

		Для Каждого ВидСубконто Из ВидыСубконтоСчета Цикл
			Если ВидСубконто.ВидСубконто.Наименование = ИмяСубконто Тогда
				 Строка["Субконто" + ВидСубконто.НомерСтроки + "Счета" + НазваниеСчета] = ЗначениеСубконто;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьСубконтоНРПВНА()

//&НаКлиенте
&НаСервере
// бит_MZyubin Функция выполняет поиск вида субконто.
//
// Параметры:
//  ИмяПВХ  - Строка
//  ИмяСубконто - Строка
//
// Возвращаемое значение:
//  ВидСубконто - ПланВидовХарактеристикСсылка
//
Функция НайтиВидСубконто(ИмяПВХ,ИмяСубконто) Экспорт
	
	ПВХ = ПланыВидовХарактеристик[ИмяПВХ];
	
	ВидСубконто = ПВХ.ПустаяСсылка();
	
	Попытка
		
		// предопределенные субконто получаем по имени
		ВидСубконто = ПВХ[ИмяСубконто];
	
	Исключение
	
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ВидСубконто) Тогда
		
		// субконто оказалось не предопределенным
		
		Если Найти(ИмяПВХ,"бит_ВидыСубконтоДополнительные_")>0 
			 ИЛИ Найти(ИмяПВХ,"бит_ВидыСубконтоБюджетирования")>0 Тогда
			 
			 // для субконто БИТ выполняем имя записано в код
			 ВидСубконто = ПВХ.НайтиПоКоду(ИмяСубконто);
			 
		Иначе	
			
			 // другие непредопределенные субконто ищем по наименованию
			 ВидСубконто = ПВХ.НайтиПоНаименованию(ИмяСубконто);
			
		КонецЕсли; 
	
	КонецЕсли; 

	Возврат ВидСубконто;
	
КонецФункции // НайтиВидСубконто()

&НаКлиенте
Процедура ТабличнаяЧастьПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Выполнить = Истина И Элемент.ТекущиеДанные.Сделано = Истина Тогда
		//узнаем количество отмеченных шагов
		КоличествоОтмеченныхШагов = Объект.ТабличнаяЧасть.НайтиСтроки(Новый Структура("Выполнить", Истина)).Количество();
		
		ОтветНаВопрос = Вопрос("После снятия пометки на текущем шаге потребуется перевыполнить текущий и все последующие шаги. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			Для Строка = Элемент.ТекущиеДанные.НомерСтроки По КоличествоОтмеченныхШагов Цикл
				Объект.ТабличнаяЧасть[Строка-1].Выполнить = Ложь;
				Объект.ТабличнаяЧасть[Строка-1].Сделано   = Ложь;
			КонецЦикла;
			УсловноеОформлениеНаСервере(Элемент.ТекущиеДанные.НомерСтроки - 2);
			Элемент.ТекущиеДанные.Выполнить = Истина;
		КонецЕсли;
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьФормуНастройками();
	
	Объект.ДатаНач = НачалоМесяца(ТекущаяДата());
	Объект.ДатаКон = КонецМесяца(ТекущаяДата());
	Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры

