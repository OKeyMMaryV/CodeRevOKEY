
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_вго_ПорталСверкиВГО;
	фИмяОбъекта 	  = МетаданныеОбъекта.Имя;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	// Вызов механизма защиты
	
	
	Если фОтказ Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьКэшЗначений(ПолноеИмяОбъекта);
	
	// Настройки по умолчанию
	УстановитьЗначенияПоУмолчанию();
	
	// Установка периода сверки 
	бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.Период.ДатаНачала, 
															Объект.Период.ДатаОкончания, 
															ПериодичностьСверкиВГО, 
															Объект.ПредставлениеПериодаСверкиВГО);
			
	СоздатьДействияУровней();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.КомандаПанельНастроек.Пометка = Не фСкрытьПанельНастроек;
	Элементы.ГруппаНастройки.Видимость 	   = Не фСкрытьПанельНастроек;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
	Элементы["ДеревоДокументовУровень_" + фУровеньПросмотраДерева].Пометка = Истина;
	бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоДокументов, ДеревоДокументов, фУровеньПросмотраДерева);
 	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененДокументСверкиВГО" Тогда
		
		СсылкаНаДокумент = Неопределено; Организация = Неопределено; Контрагент = Неопределено;
		Параметр.Свойство("Организация", Организация);
		Параметр.Свойство("Контрагент" , Контрагент);
		Параметр.Свойство("Ссылка"     , СсылкаНаДокумент);
		Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			Возврат;
		КонецЕсли;
		СтруктураДопДанных = ПолучитьДанныеПоДокументу(СсылкаНаДокумент);
		
		Для каждого СтрокаДерева0 Из ДеревоДокументов.ПолучитьЭлементы() Цикл 					
			Для каждого СтрокаДерева1 Из СтрокаДерева0.ПолучитьЭлементы() Цикл
				
				ИдГруппы = СтрокаДерева1.ПолучитьИдентификатор();
				
				Для каждого СтрокаДерева2 Из СтрокаДерева1.ПолучитьЭлементы() Цикл
					
					Если фГруппироватьПоТипуДокументов Тогда						
						
						Для каждого СтрокаДерева3 Из СтрокаДерева2.ПолучитьЭлементы() Цикл 
							
							Если СтрокаДерева3.Ссылка1 = СсылкаНаДокумент Тогда  
								ОбновитьДанныеСтроки(СтрокаДерева3.ПолучитьИдентификатор(), СтруктураДопДанных, ИдГруппы, Организация, Контрагент, "1");	
							ИначеЕсли СтрокаДерева3.Ссылка2 = СсылкаНаДокумент Тогда
								ОбновитьДанныеСтроки(СтрокаДерева3.ПолучитьИдентификатор(), СтруктураДопДанных, ИдГруппы, Организация, Контрагент, "2");
							КонецЕсли;
												
						КонецЦикла; // СтрокаДерева3 Из СтрокаДерева2.ПолучитьЭлементы().
						
					ИначеЕсли СтрокаДерева2.Ссылка1 = СсылкаНаДокумент ИЛИ СтрокаДерева2.Ссылка2 = СсылкаНаДокумент Тогда
							
						Если СтрокаДерева2.Ссылка1 = СсылкаНаДокумент Тогда
							ОбновитьДанныеСтроки(СтрокаДерева2.ПолучитьИдентификатор(), СтруктураДопДанных, ИдГруппы, Организация, Контрагент, "1");		
						ИначеЕсли СтрокаДерева2.Ссылка2 = СсылкаНаДокумент Тогда
							ОбновитьДанныеСтроки(СтрокаДерева2.ПолучитьИдентификатор(), СтруктураДопДанных, ИдГруппы, Организация, Контрагент, "2");	
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЦикла; // СтрокаДерева2 Из СтрокаДерева1.ПолучитьЭлементы().
				
			КонецЦикла; // СтрокаДерева1 Из СтрокаДерева0.ПолучитьЭлементы()			
		КонецЦикла; // СтрокаДерева0 Из ДеревоДокументов.ПолучитьЭлементы()	
				
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РегистрБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(фКэшЗначений.ВидОбъектаРегистрБухгалтерии);	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Объект.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", фКэшЗначений.СписокДоступныхРегистров);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);
	
КонецПроцедуры // РегистрБухгалтерииНачалоВыбора()

&НаКлиенте
Процедура РегистрБухгалтерииПриИзменении(Элемент)
	
	ИзменениеРегистраБухгалтерииСервер();
		
КонецПроцедуры // РегистрБухгалтерииПриИзменении()

&НаКлиенте
Процедура ДеревоДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры // ДеревоДокументовПередНачаломДобавления()

&НаКлиенте
Процедура ДеревоДокументовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;	
	
КонецПроцедуры // ДеревоДокументовПередУдалением()

&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	            	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Номерi = Прав(Поле.Имя, 1);
	Если Номерi = "1" ИЛИ Номерi = "2" Тогда
	 	
		ТекущаяСсылка = ТекущиеДанные["Ссылка" + Номерi];	
		
		Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
			
			ПоказатьЗначение(,ТекущаяСсылка);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоДокументовВыбор()

#Область ПроцедурыИФункцииВыбораИнтервала

&НаКлиенте
Процедура ПериодДатаНачалаПриИзменении(Элемент)
	
	бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.Период.ДатаНачала, 
														Объект.Период.ДатаОкончания, 
														ПериодичностьСверкиВГО, 
														Объект.ПредставлениеПериодаСверкиВГО);
	
КонецПроцедуры // ПериодДатаНачалаПриИзменении()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериода(Элемент, 
												ЭтаФорма, 
												СтандартнаяОбработка, 
												Объект.Период.ДатаНачала, 
												ПериодичностьСверкиВГО, 
												Объект.ПредставлениеПериодаСверкиВГО);
	
	бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.Период.ДатаНачала, 
														Объект.Период.ДатаОкончания, 
														ПериодичностьСверкиВГО, 
														Объект.ПредставлениеПериодаСверкиВГО);

КонецПроцедуры // ПредставлениеПериодаСверкиВГОНачалоВыбора()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГОРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ПредставлениеПериодаСверкиВГО) Тогда
		
		Объект.Период.ДатаНачала = бит_Бюджетирование.ПолучитьПериодПоСдвигу(Объект.Период.ДатаНачала, Направление, ПериодичностьСверкиВГО);
		бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.Период.ДатаНачала, 
															Объект.Период.ДатаОкончания, 
															ПериодичностьСверкиВГО, 
															Объект.ПредставлениеПериодаСверкиВГО);
		
	КонецЕсли;	
	
КонецПроцедуры // ПредставлениеПериодаСверкиВГОРегулирование()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПредставлениеПериодаСверкиВГООчистка()
                                    
#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "Обновить".
// 
&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДерево();
	
КонецПроцедуры // Обновить()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	фСкрытьПанельНастроек = Не фСкрытьПанельНастроек;
	
	Элементы.КомандаПанельНастроек.Пометка = Не фСкрытьПанельНастроек;
	Элементы.ГруппаНастройки.Видимость 	   = Не фСкрытьПанельНастроек;	
	
КонецПроцедуры // КомандаПанельНастроек()

// Процедура - обработчик команды "ЖурналДокументовОрганизации1".
// 
&НаКлиенте
Процедура ЖурналДокументовОрганизации1(Команда)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Организация1)
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент2) Тогда
	    Возврат;	
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация" 			, ТекущиеДанные.Организация1);
	СтруктураОтбора.Вставить("Контрагент1" 			, ТекущиеДанные.Контрагент1);
	СтруктураОтбора.Вставить("Контрагент" 			, ТекущиеДанные.Контрагент2);
	СтруктураОтбора.Вставить("РегистрБухгалтерии" 	, Объект.РегистрБухгалтерии);
	СтруктураОтбора.Вставить("Сценарий" 			, Объект.Сценарий);
	СтруктураОтбора.Вставить("ДатаНачала" 			, Объект.Период.ДатаНачала);
	СтруктураОтбора.Вставить("ДатаОкончания"		, Объект.Период.ДатаОкончания);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("ЖурналДокументов.бит_вго_ДокументыПорталаСверкиВГО.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // ЖурналДокументовОрганизации1()

// Процедура - обработчик команды "ЖурналДокументовОрганизации2".
// 
&НаКлиенте
Процедура ЖурналДокументовОрганизации2(Команда)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Организация2)
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент1) Тогда
	    Возврат;	
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	// СтруктураОтбора.Вставить("Организация1", ТекущиеДанные.Организация1);
	СтруктураОтбора.Вставить("Организация" 			, ТекущиеДанные.Организация2);
	СтруктураОтбора.Вставить("Контрагент1" 			, ТекущиеДанные.Контрагент2);
	СтруктураОтбора.Вставить("Контрагент" 			, ТекущиеДанные.Контрагент1);
	СтруктураОтбора.Вставить("РегистрБухгалтерии" 	, Объект.РегистрБухгалтерии);
	СтруктураОтбора.Вставить("Сценарий" 			, Объект.Сценарий);
	СтруктураОтбора.Вставить("ДатаНачала" 			, Объект.Период.ДатаНачала);
	СтруктураОтбора.Вставить("ДатаОкончания"		, Объект.Период.ДатаОкончания);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("ЖурналДокументов.бит_вго_ДокументыПорталаСверкиВГО.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // ЖурналДокументовОрганизации2()

// Процедура - обработчик команды "ОтчетСтатусСверкиВГО".
// 
&НаКлиенте
Процедура ОтчетСтатусСверкиВГО(Команда)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация1"		 , ТекущиеДанные.Организация1);
	ПараметрыФормы.Вставить("Организация2"		 , ТекущиеДанные.Организация2);
	ПараметрыФормы.Вставить("Контрагент1" 		 , ТекущиеДанные.Контрагент1);
	ПараметрыФормы.Вставить("Контрагент2" 		 , ТекущиеДанные.Контрагент2);
	ПараметрыФормы.Вставить("Период"			 , Объект.Период);
	ПараметрыФормы.Вставить("РегистрБухгалтерии" , Объект.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("Сценарий" 			 , Объект.Сценарий);
	// ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.бит_вго_СтатусСверкиВГО.Форма.ФормаОтчетаУправляемая", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // ОтчетСтатусСверкиВГО()

// Процедура - обработчик команды "СоздатьАктСверкиВГО".
// 
&НаКлиенте
Процедура СоздатьАктСверкиВГО(Команда)
	
	 ОткрытьФормуНовогоДокумента("бит_вго_АктСверкиВГО");
	 
КонецПроцедуры // СоздатьАктСверкиВГО()

// Процедура - обработчик команды "СоздатьПодтверждениеСверкиВГО".
// 
&НаКлиенте
Процедура СоздатьПодтверждениеСверкиВГО(Команда)
	
	ОткрытьФормуНовогоДокумента("бит_вго_ПодтверждениеСверкиВГО");
	
КонецПроцедуры // СоздатьПодтверждениеСверкиВГО()

// Процедура - обработчик команды "СоздатьПротоколРасхождений".
// 
&НаКлиенте
Процедура СоздатьПротоколРасхождений(Команда)
	
	ОткрытьФормуНовогоДокумента("бит_вго_ПротоколРасхождений");
	
КонецПроцедуры // СоздатьПротоколРасхождений()

// Процедура - действие динамически создаваемых команд "ДеревоДокументовУровень_<й>". 
// Выполняется свертка/разворачивание дерева счетов. 
// 
&НаКлиенте
Процедура ДействиеДеревоДокументовУровень(Команда)
	
	КнопкиУровней = Элементы.ДеревоДокументовГруппаУровни.ПодчиненныеЭлементы;
	
	НомПодчерк = Найти(Команда.Имя, "_");
	Если НомПодчерк > 0 Тогда
	
		 НомУровняСтр = Сред(Команда.Имя, НомПодчерк + 1);
		 Попытка 			 
			 НомУровня = Число(НомУровняСтр);  		 
		 Исключение  			 
			 НомУровня = -1;    			 
		 КонецПопытки; 
		 
		 Если НомУровня > 0 Тогда
		 
		   бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоДокументов, ДеревоДокументов, НомУровня);
		   
		   инд = 1;
		   Для каждого Кнопка Из КнопкиУровней Цикл 		   
		   	   Кнопка.Пометка = Ложь;     			   
			   Если инд = НомУровня Тогда   			   
			   	  Кнопка.Пометка = Истина;  			   
			   КонецЕсли;    			   
			   инд = инд + 1;
		   КонецЦикла; 
		   
		 КонецЕсли; 
		 
		 фУровеньПросмотраДерева = НомУровня;
		 
	 КонецЕсли;
	
КонецПроцедуры // ДействиеДеревоДокументовУровень()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура открывает форму нового документа.
// 
// Параметры:
//  ИмяДокумента  - Строка
// 
&НаКлиенте
Процедура ОткрытьФормуНовогоДокумента(ИмяДокумента)
	
	СтруктураЗаполнения = Новый Структура; 
	СтруктураЗаполнения.Вставить("ДатаНачала"			, Объект.Период.ДатаНачала);
	СтруктураЗаполнения.Вставить("ДатаОкончания"		, Объект.Период.ДатаОкончания);
	СтруктураЗаполнения.Вставить("РегистрБухгалтерии"	, Объект.РегистрБухгалтерии);
	СтруктураЗаполнения.Вставить("Сценарий"				, Объект.Сценарий);
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтрНомерОрг = Прав(Элементы.ДеревоДокументов.ТекущийЭлемент.Имя, 1);
		Если СтрНомерОрг = "1" Тогда
			
			СтруктураЗаполнения.Вставить("Организация" , ТекущиеДанные.Организация1);
			СтруктураЗаполнения.Вставить("Организация1", ТекущиеДанные.Организация1);
			СтруктураЗаполнения.Вставить("Организация2", ТекущиеДанные.Организация2);
			
			СтруктураЗаполнения.Вставить("Контрагент"  , ТекущиеДанные.Контрагент2);
			СтруктураЗаполнения.Вставить("Контрагент1" , ТекущиеДанные.Контрагент1);
			СтруктураЗаполнения.Вставить("Контрагент2" , ТекущиеДанные.Контрагент2);
			
		ИначеЕсли СтрНомерОрг = "2" Тогда	
			
			СтруктураЗаполнения.Вставить("Организация" , ТекущиеДанные.Организация2);
			СтруктураЗаполнения.Вставить("Организация1", ТекущиеДанные.Организация2);
			СтруктураЗаполнения.Вставить("Организация2", ТекущиеДанные.Организация1);
			
			СтруктураЗаполнения.Вставить("Контрагент"  , ТекущиеДанные.Контрагент1);
			СтруктураЗаполнения.Вставить("Контрагент1" , ТекущиеДанные.Контрагент2);
			СтруктураЗаполнения.Вставить("Контрагент2" , ТекущиеДанные.Контрагент1);
			
		КонецЕсли;
		
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
	ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры // ОткрытьФормуНовогоДокумента()

// Процедура - обновляет дерево.
// 
&НаКлиенте
Процедура ОбновитьДерево(ВыводитьСообщения = Истина)
	
	ЕстьОшибки = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		Если ВыводитьСообщения Тогда
			ТекстСообщения = Нстр("ru = 'Не заполнен регистр бухгалтерии.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;					
		ЕстьОшибки = Истина;
	КонецЕсли;

	Если ИмяРегистраБухгалтерии = "бит_Бюджетирование" И Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Если ВыводитьСообщения Тогда
			ТекстСообщения = Нстр("ru = 'Не заполнен сценарий.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
		ЕстьОшибки = Истина;	
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;	
	КонецЕсли; 
		
	ОбновитьДеревоСервер();
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоДокументов, ДеревоДокументов, фУровеньПросмотраДерева);
	
КонецПроцедуры // ОбновитьДерево()

// Процедура обновляет данные строки.
// 
// Параметры:
//  Ид  				- Число.
//  СтруктураДопДанных 	- Структура.
//  ИдГруппы    		- Число.
//  Организация 		- СправочникСсылка.Организации.
//  Контрагент  		- СправочникСсылка.Контрагенты.
//  Номерi 				- Число. 
// 
&НаКлиенте
Процедура ОбновитьДанныеСтроки(Ид, СтруктураДопДанных, ИдГруппы, Организация, Контрагент, Номерi)

	ТекущиеДанные = ДеревоДокументов.НайтиПоИдентификатору(Ид);	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекСсылкаНаДокумент = ТекущиеДанные["Ссылка" + Номерi];
	Если Не ЗначениеЗаполнено(ТекСсылкаНаДокумент) Тогда
		Возврат;	
	КонецЕсли;	
	
	ДанныеГруппы = ДеревоДокументов.НайтиПоИдентификатору(ИдГруппы);
	Если ДанныеГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияГруппы = ДанныеГруппы["Организация" + Номерi];
	КонтрагентГруппы = ?(Номерi = "1", ДанныеГруппы.Контрагент2, ДанныеГруппы.Контрагент1);
	Если ОрганизацияГруппы <> Организация ИЛИ КонтрагентГруппы <> Контрагент Тогда  	
		// Очистка
		ТекущиеДанные["Ссылка" + Номерi]     = Неопределено;
		ТекущиеДанные["КолонкаОрг" + Номерi] = Неопределено;
	Иначе
		ТекущиеДанные["НеПроведен" + Номерi] = Не СтруктураДопДанных.Проведен;
   	 	ТекущиеДанные["Удален" + Номерi] 	 = СтруктураДопДанных.ПометкаУдаления;			
	КонецЕсли; 	
	
	// Если это документ - подтверждение сверки ВГО.
	Если ТекущиеДанные.ЭтоПодтверждениеСверки Тогда
		
		ЕстьЗакрытие = СтруктураДопДанных.Проведен;
		
		ТекущиеДанные["ЕстьЗакрытие" + Номерi] = ЕстьЗакрытие;
		ДанныеГруппы["ЕстьЗакрытие" + Номерi]  = ЕстьЗакрытие;
		
		Если ЕстьЗакрытие Тогда
			ТекущиеДанные.СуммаАбсолютногоРасхождения    = СтруктураДопДанных.СуммаАбсолютногоРасхождения;
			ТекущиеДанные.СуммаАбсолютногоРасхожденияВзм = СтруктураДопДанных.СуммаАбсолютногоРасхожденияВзм;  		
			ДанныеГруппы.СуммаАбсолютногоРасхождения     = ТекущиеДанные.СуммаАбсолютногоРасхождения;
			ДанныеГруппы.СуммаАбсолютногоРасхожденияВзм  = ТекущиеДанные.СуммаАбсолютногоРасхожденияВзм;
		Иначе
			ТекущиеДанные.СуммаАбсолютногоРасхождения    = 0;
			ТекущиеДанные.СуммаАбсолютногоРасхожденияВзм = 0;		
			ДанныеГруппы.СуммаАбсолютногоРасхождения     = 0;
			ДанныеГруппы.СуммаАбсолютногоРасхожденияВзм  = 0;  		
		КонецЕсли;
				                 	
	КонецЕсли;	
	
КонецПроцедуры // ОбновитьДанныеСтроки()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииОбщегоНазначения

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  ПолноеИмяОбъекта - Строка
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(ПолноеИмяОбъекта)

	фКэшЗначений = Новый Структура;
	                    		
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", ПолноеИмяОбъекта);
	
	ИмяСпрСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	фКэшЗначений.Вставить("ПустойСценарий", Справочники[ИмяСпрСценарии].ПустаяСсылка());

	фКэшЗначений.Вставить("ВидОбъектаРегистрБухгалтерии", Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	фКэшЗначений.Вставить("СписокДоступныхРегистров"	, бит_вго_Сервер.СформироватьСписокДоступныхРегистровБухгалтерииДляСверкиВГО());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавливает видимость, доступность элементов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьВидимостьДоступность()

	ЭтоРегистрБюдж = ИмяРегистраБухгалтерии = "бит_Бюджетирование";		
	
	Элементы.Сценарий.Видимость = ЭтоРегистрБюдж;
	
	Если ЗначениеЗаполнено(Объект.Сценарий) И Не ЭтоРегистрБюдж Тогда
		Объект.Сценарий = фКэшЗначений.ПустойСценарий;	
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоступность()

// Процедура создает кноки раскрытия/свертки уровней дерева счетов.
// 
&НаСервере
Процедура СоздатьДействияУровней()

	// Очищаем существующие кнопки подменю
	КоличествоЭлементов = Элементы.ДеревоДокументовГруппаУровни.ПодчиненныеЭлементы.Количество();
	Для н = 1 По КоличествоЭлементов Цикл
	
		инд = КоличествоЭлементов - н;
		Кнопка = Элементы.ДеревоДокументовГруппаУровни.ПодчиненныеЭлементы[инд];
		Элементы.Удалить(Кнопка);
	
	КонецЦикла; 
	
	// Создадим команды и кнопки в подменю
	Для инд = 1 По 4 Цикл
		
		ИмяКоманды = "ДеревоДокументовУровень_"+инд;
		
		КомандаУровня = Команды.Найти(ИмяКоманды);
		
		Если КомандаУровня = Неопределено Тогда
			
			КомандаУровня = Команды.Добавить(ИмяКоманды);
			КомандаУровня.Действие = "ДействиеДеревоДокументовУровень";
			
		КонецЕсли; 
		
		НоваяКнопка = Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элементы.ДеревоДокументовГруппаУровни);
		
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
		НоваяКнопка.Заголовок = "Уровень "+инд;
			
	КонецЦикла;

КонецПроцедуры // СоздатьДействияУровней()

// Процедура обрабатывает изменение регистра бухгалтерии.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ИзменениеРегистраБухгалтерииСервер()

	ИмяРегистраБухгалтерии = ?(ЗначениеЗаполнено(Объект.РегистрБухгалтерии), Объект.РегистрБухгалтерии.ИмяОбъекта, "");
	
	УстановитьВидимостьДоступность();

КонецПроцедуры // ИзменениеРегистраБухгалтерииСервер()

// Процедура добавляет строку по документу в дерево значений формы.
// 
// Параметры:
//  Номерi  				- Строка.
//  СтруктураПараметров  	- Структура.
//  МассивСтрДф 			- Массив.
//  ЗаполненыДокументы_i 	- Булево.
//  ЗаполненыДокументы_Неi 	- Булево.
// 
&НаСервере
Процедура ДобавитьСтрокуПоДокументу(Номерi, СтруктураПараметров, МассивСтрДф, ЗаполненыДокументы_i, ЗаполненыДокументы_Неi)

	ВеткаДереваТипДокФрм 	= СтруктураПараметров.ВеткаДереваТипДокФрм;
	СтрокаДереваСкд 		= СтруктураПараметров.СтрокаДереваСкд;
	СтрокаДереваФрм_Ур2 	= СтруктураПараметров.СтрокаДереваФрм_Ур2;
	ЭтоПодтверждениеСверки 	= СтруктураПараметров.ЭтоПодтверждениеСверки;
	
	ТекущаяСсылка = СтрокаДереваСкд["Ссылка" + Номерi];
	
	Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		
		ЗаполненыДокументы_i = Истина;
		
		Если ЗаполненыДокументы_Неi Тогда
			
			Если МассивСтрДф.Количество() > 0 Тогда
				СтрокаДереваФрм_Ур3 = МассивСтрДф[0];
				МассивСтрДф.Удалить(0);
			Иначе	
				СтрокаДереваФрм_Ур3 = ВеткаДереваТипДокФрм.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваФрм_Ур3, СтрокаДереваСкд);
			КонецЕсли;
		
		Иначе	
			
			СтрокаДереваФрм_Ур3 = ВеткаДереваТипДокФрм.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДереваФрм_Ур3, СтрокаДереваСкд);
			МассивСтрДф.Добавить(СтрокаДереваФрм_Ур3);
			
		КонецЕсли;
		
		СтрокаДереваФрм_Ур3["КолонкаОрг" + Номерi] = ТекущаяСсылка;
		СтрокаДереваФрм_Ур3["Ссылка" + Номерi] 	   = ТекущаяСсылка;
		СтрокаДереваФрм_Ур3["НеПроведен" + Номерi] = Не ТекущаяСсылка.Проведен;
		СтрокаДереваФрм_Ур3["Удален" + Номерi]     = ТекущаяСсылка.ПометкаУдаления; 						
		СтрокаДереваФрм_Ур3.ЭтоПодтверждениеСверки = ЭтоПодтверждениеСверки;
		
		Если ЭтоПодтверждениеСверки И СтрокаДереваСкд["ЕстьЗакрытие" + Номерi] Тогда
						
			СтрокаДереваФрм_Ур2["ЕстьЗакрытие" + Номерi] = СтрокаДереваСкд["ЕстьЗакрытие" + Номерi];
			СтрокаДереваФрм_Ур2.СуммаАбсолютногоРасхождения    = СтрокаДереваСкд.СуммаАбсолютногоРасхождения;
			СтрокаДереваФрм_Ур2.СуммаАбсолютногоРасхожденияВзм = СтрокаДереваСкд.СуммаАбсолютногоРасхожденияВзм;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуПоДокументу()

// Процедура обновляет дерево документов.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ОбновитьДеревоСервер()

	// ----------------------------------------------------------------------
	// Подготовка данных
	
	// Дерево для выгрузки данных по макету СКД
	ДеревоДокументовСкд = Новый ДеревоЗначений;
	КореньДереваСкд = ДеревоДокументовСкд.Строки;
	
	// Дерево документов на форме
	КореньДереваФрм = ДеревоДокументов.ПолучитьЭлементы();
	КореньДереваФрм.Очистить();  	

	
	// ----------------------------------------------------------------------
	// СКД
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);

	// Выполняем компановку макета МакетСКД
	// (настройки берутся из схемы компановки данных и из пользовательских настроек).
	КомпоновщикМакетаКд = Новый КомпоновщикМакетаКомпоновкиДанных;

		
	МакетСКД = КомпоновщикМакетаКд.Выполнить(СхемаКомпоновкиДанных,
											Объект.Компоновщик.ПолучитьНастройки(),
											,
											,
											Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
											
	// Заполняем параметры макета компановки данных.
	МакетСКД.ЗначенияПараметров.ДатаНачала.Значение    		   = Объект.Период.ДатаНачала;
	МакетСКД.ЗначенияПараметров.ДатаОкончания.Значение 		   = КонецДня(Объект.Период.ДатаОкончания);
	МакетСКД.ЗначенияПараметров.РегистрБухгалтерии.Значение    = Объект.РегистрБухгалтерии;
	МакетСКД.ЗначенияПараметров.Сценарий.Значение 			   = Объект.Сценарий;
	МакетСКД.ЗначенияПараметров.ВыводитьНепроведенные.Значение = фВыводитьНепроведенные;
	
	ФиксированныеПараметры = Объект.Компоновщик.ФиксированныеНастройки.ПараметрыДанных.Элементы;
	Для каждого ФиксПараметр Из ФиксированныеПараметры Цикл
		ИмяПараметра = Строка(ФиксПараметр.Параметр);
		Если МакетСКД.ЗначенияПараметров.Найти(ИмяПараметра) = Неопределено Тогда
			НовыйПараметр = МакетСКД.ЗначенияПараметров.Добавить();
			НовыйПараметр.Имя 		= ИмяПараметра;
			НовыйПараметр.Значение 	= ФиксПараметр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетСКД);
	
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоДокументовСкд);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Заполнение дерева значений
	Если КореньДереваСкд.Количество() = 0 Тогда 		
		 ТекстСообщения = НСтр("ru = 'Нет данных для вывода!'");
		 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 
		 Возврат;	
	КонецЕсли;
	
	
	// ----------------------------------------------------------------------
	// Вывод данных на форму
	
	// Цикл по организации 1
	Для каждого СтрокаДереваСкд Из КореньДереваСкд Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДереваСкд.Организация1) Тогда 
			Продолжить;		
		КонецЕсли;
		
		СтрокаДереваФрм_Ур1 = КореньДереваФрм.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДереваФрм_Ур1, СтрокаДереваСкд, ,"СуммаАбсолютногоРасхождения, СуммаАбсолютногоРасхожденияВзм");
		СтрокаОргКонтр = СтрокаДереваФрм_Ур1.Организация1;
		
		СтрокаДереваФрм_Ур1.КолонкаОрг1 = СтрокаОргКонтр;
		СтрокаДереваФрм_Ур1.ЭтоГруппаПоОрганизации = Истина;
		
		ВеткаДереваОргСкд = СтрокаДереваСкд.Строки;
		ВеткаДереваОргФрм = СтрокаДереваФрм_Ур1.ПолучитьЭлементы();
	
		
		// Цикл по контрагенту 1
		Для каждого СтрокаДереваСкд Из ВеткаДереваОргСкд Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДереваСкд.Контрагент1) Тогда
				Продолжить;		
			КонецЕсли;
			ВеткаДереваК1Скд = СтрокаДереваСкд.Строки;
			
			// Цикл по контрагенту 2
			Для каждого СтрокаДереваСкд Из ВеткаДереваК1Скд Цикл
				
				СтрокаДереваФрм_Ур2 = ВеткаДереваОргФрм.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваФрм_Ур2, СтрокаДереваСкд);
				СтрокаДереваФрм_Ур2.ЭтоГруппаПоКонтрагенту = Истина;
				
				// Колонка 1
				СтрокаОргКонтр = Строка(СтрокаДереваФрм_Ур2.Организация1) + " - " + Строка(СтрокаДереваФрм_Ур2.Контрагент1);				
				СтрокаДереваФрм_Ур2.КолонкаОрг1 = СтрокаОргКонтр;
				
				// Колонка 2
				СтрокаОргКонтр = Строка(СтрокаДереваФрм_Ур2.Организация2) + " - " + Строка(СтрокаДереваФрм_Ур2.Контрагент2);
				СтрокаДереваФрм_Ур2.КолонкаОрг2 = СтрокаОргКонтр;
								
				ВеткаДереваКтрСкд = СтрокаДереваСкд.Строки;
				ВеткаДереваКтрФрм = СтрокаДереваФрм_Ур2.ПолучитьЭлементы();
				
				ТекущаяСсылка1 = Неопределено;
				ТекущаяСсылка2 = Неопределено;
				
				// Цикл по типам документов
				Для каждого СтрокаДереваСкд Из ВеткаДереваКтрСкд Цикл
					
					ТипДокумента = СтрокаДереваСкд.ТипДокумента;
					ЭтоПодтверждениеСверки = ТипДокумента = "Подтверждение сверки ВГО";
					
					Если фГруппироватьПоТипуДокументов Тогда
						СтрокаДереваТипДокФрм  = ВеткаДереваКтрФрм.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДереваТипДокФрм, СтрокаДереваСкд, ,"СуммаАбсолютногоРасхождения, СуммаАбсолютногоРасхожденияВзм");
						СтрокаДереваТипДокФрм.КолонкаОрг1 = ТипДокумента;
						СтрокаДереваТипДокФрм.ЭтоГруппаПоТипуДокумента = Истина;
						ВеткаДереваТипДокФрм = СтрокаДереваТипДокФрм.ПолучитьЭлементы();
					Иначе	
						ВеткаДереваТипДокФрм = ВеткаДереваКтрФрм;
					КонецЕсли;
										
					ВеткаДереваТипДокСкд = СтрокаДереваСкд.Строки;
										
					МассивСтрДф = Новый Массив();
					ЗаполненыДок1 = Ложь;
					ЗаполненыДок2 = Ложь;
					
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("ВеткаДереваТипДокФрм"		, ВеткаДереваТипДокФрм);
					СтруктураПараметров.Вставить("СтрокаДереваФрм_Ур2"		, СтрокаДереваФрм_Ур2);
					СтруктураПараметров.Вставить("ЭтоПодтверждениеСверки"	, ЭтоПодтверждениеСверки);
					
					// Цикл по документам
					Для каждого СтрокаДереваСкд Из ВеткаДереваТипДокСкд Цикл
						
						СтруктураПараметров.Вставить("СтрокаДереваСкд", СтрокаДереваСкд);
						
						// Документ 1
						ДобавитьСтрокуПоДокументу("1", СтруктураПараметров, МассивСтрДф, ЗаполненыДок1, ЗаполненыДок2);
												
						// Документ 2
						ДобавитьСтрокуПоДокументу("2", СтруктураПараметров, МассивСтрДф, ЗаполненыДок2, ЗаполненыДок1);
						
					КонецЦикла;
					
				КонецЦикла;
								
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла; 	

КонецПроцедуры // ОбновитьДеревоСервер()

// Процедура инициализирует схему компоновки данных.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ИнициализироватьСКД(ЗагрузитьпользовательскиеНастройкиПоУмолчанию = Истина)

	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("МакетСКД");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
		
	Объект.Компоновщик.Инициализировать(ИсточникНастроек); 	
	Объект.Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	               
КонецПроцедуры // ИнициализироватьСКД()

#КонецОбласти

#Область ПроцедурыИФункцииПоРаботеСНастройками

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Обработки[фИмяОбъекта].Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		Если ИмяРеквизита <> "Компоновщик" Тогда
			СтруктураНастроек.Вставить(ИмяРеквизита, Объект[ИмяРеквизита]);
		КонецЕсли;			
	КонецЦикла;
	
	СтруктураНастроек.Вставить("ПользовательскиеНастройки", Объект.Компоновщик.ПользовательскиеНастройки);
	
		
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	
	СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	// Изменение кода. Начало. 09.10.2013{{
	// ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек, ,"Период");
	ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек);
	// Изменение кода. Конец. 09.10.2013}}
	
	ИзменениеРегистраБухгалтерииСервер();
	                     	
	ИнициализироватьСКД();
	Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.ПользовательскиеНастройки);
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда	
		ПрименитьНастройки(НастройкаПоУмолчанию);
	Иначе   		
		Объект.Период.Вариант   = ВариантСтандартногоПериода.ЭтотМесяц;
		ИзменениеРегистраБухгалтерииСервер();
		ИнициализироватьСКД();
	КонецЕсли;
	
	фУровеньПросмотраДерева = ?(фУровеньПросмотраДерева = 0, 4, фУровеньПросмотраДерева);
		      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	// Обработчик = Новый ОписаниеОповещения("НастройкиСохранитьЗавершение", ЭтотОбъект);
	// Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,,,);
	
КонецПроцедуры // ДействияФормыНастройкиСохранить()
										
// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки",ПараметрыФормы,ЭтаФорма,,,,Обработчик, Режим);
	
КонецПроцедуры // ДействияФормыНастройкиВосстановить()

// Процедура - завершение обработчика события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(ВыбНастройка, Параметры) Экспорт
	
    Если ЗначениеЗаполнено(ВыбНастройка) Тогда        
		
		ПрименитьНастройки(ВыбНастройка);
		
	КонецЕсли;

КонецПроцедуры

// Функция получает данные по документу.
// 
// Параметры:
//  СсылкаНаДокумент  - ДокументСсылка.бит_вго_***.
//  
// Возвращаемое значение:
//   Структура.
// 
&НаСервере
Функция ПолучитьДанныеПоДокументу(СсылкаНаДокумент)

	ДанныеПоДокументу = Новый Структура;
	
	ДанныеПоДокументу.Вставить("Проведен"		, СсылкаНаДокумент.Проведен);
	ДанныеПоДокументу.Вставить("ПометкаУдаления", СсылкаНаДокумент.ПометкаУдаления);
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.бит_вго_ПодтверждениеСверкиВГО") Тогда
		ДанныеПоДокументу.Вставить("СуммаАбсолютногоРасхождения"   , СсылкаНаДокумент.СуммаАбсолютногоРасхождения);
		ДанныеПоДокументу.Вставить("СуммаАбсолютногоРасхожденияВзм", СсылкаНаДокумент.СуммаАбсолютногоРасхожденияВзм);	
	КонецЕсли;
	 
	Возврат ДанныеПоДокументу;
	
КонецФункции // ПолучитьДанныеПоДокументу()
#КонецОбласти

#КонецОбласти