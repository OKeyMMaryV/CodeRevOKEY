#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает текст XML выгрузки шаблонов.
// 
Функция СформироватьXMLОписаниеВыгрузки(СписокКомплектов, СписокШаблонов) Экспорт
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".xml";
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Записать(ИмяВременногоФайла);
	
	// Сформируем заголовок файла обмена
	ЗаписьXML = НачатьЗаписьФайлаЭкспорта(ИмяВременногоФайла);
	// Начало записи данных
	ЗаписьXML.ЗаписатьНачалоЭлемента("V8Exch:Data");
	// Запишем все виды реквизитов движений
	ЗаписатьВидыРеквизитовДвижений(ЗаписьXML, СписокШаблонов);
	// Запишем необходимые объекты доступа (документы).
	ВидыОбъектовДоступа = Новый Массив;
	ВидыОбъектовДоступа.Добавить(Перечисления.бит_ВидыОбъектовСистемы.Документ);
	ЗаписатьОбъектыДоступа(ЗаписьXML, ВидыОбъектовДоступа);
	
	// Выгрузим выбранные комплекты
	Для Каждого Комплект Из СписокКомплектов Цикл
		Если ЗначениеЗаполнено(Комплект) Тогда
			ЗаписатьXML(ЗаписьXML, Комплект.ПолучитьОбъект());
		КонецЕсли;
	КонецЦикла;
	
	// Выгрузим выбранные шаблоны
	Для Каждого Шаблон Из СписокШаблонов Цикл
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ЗаписатьXML(ЗаписьXML, Шаблон.ПолучитьОбъект());
		КонецЕсли;
	КонецЦикла;
	
	// Выгрузим значения реквизитов движений
	НаборЗаписей = РегистрыСведений.бит_ЗначенияРеквизитовШаблонов.СоздатьНаборЗаписей();
	Для Каждого Шаблон Из СписокШаблонов Цикл
		Если ЗначениеЗаполнено(Шаблон) Тогда
			НаборЗаписей.Отбор.ШаблонДвижений.Установить(Шаблон);
			НаборЗаписей.Прочитать();
			ЗаписатьXML(ЗаписьXML, НаборЗаписей);
		КонецЕсли;
	КонецЦикла;
	
	// Закончим запись файла обмена
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	ТД.Прочитать(ИмяВременногоФайла);
	
	ТекстXML = ТД.ПолучитьТекст();
		
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТекстXML;
	
КонецФункции

// Функция выполняет начальную запись файла выгрузки.
// 
Функция НачатьЗаписьФайлаЭкспорта(ФайлВыгрузки) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлВыгрузки, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	Возврат ЗаписьXML;
	
КонецФункции

// Процедура записывает виды реквизитов в файл выгрузки.
// 
Процедура ЗаписатьВидыРеквизитовДвижений(ЗаписьXML, СписокШаблонов) Экспорт
	
	// Выберем необходимые реквизиты движений
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_ЗначенияРеквизитовШаблонов.Реквизит
	|ИЗ
	|	РегистрСведений.бит_ЗначенияРеквизитовШаблонов КАК бит_ЗначенияРеквизитовШаблонов
	|ГДЕ
	|	бит_ЗначенияРеквизитовШаблонов.ШаблонДвижений В(&СписокШаблонов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ВидыРеквизитовДвижений.Ссылка
	|ИЗ
	|	Справочник.бит_ВидыРеквизитовДвижений КАК бит_ВидыРеквизитовДвижений
	|ГДЕ
	|	бит_ВидыРеквизитовДвижений.ЭтоГруппа = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ВидыРеквизитовДвижений.Ссылка");
						  
	Запрос.УстановитьПараметр("СписокШаблонов", СписокШаблонов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Поочередно запишем их
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьXML(ЗаписьXML, Выборка.Реквизит.ПолучитьОбъект());
	КонецЦикла;
	
КонецПроцедуры

// Процедура записывает объекты доступа.
// 
Процедура ЗаписатьОбъектыДоступа(ЗаписьXML, ВидыОбъектовДоступа) Экспорт
	
	// Выберем все объекты доступа заданных видов.
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_ОбъектыСистемы.Ссылка
	|ИЗ
	|	Справочник.бит_ОбъектыСистемы КАК бит_ОбъектыСистемы
	|ГДЕ
	|	бит_ОбъектыСистемы.ВидОбъекта В(&ВидыОбъектовДоступа)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ОбъектыСистемы.Ссылка");
						  
	Запрос.УстановитьПараметр("ВидыОбъектовДоступа", ВидыОбъектовДоступа);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ЗаписатьXML(ЗаписьXML, Результат.Ссылка.ПолучитьОбъект());
	КонецЦикла;
	
КонецПроцедуры

// Процедура загружает шаблоны из файла выгрузки.
// 
Процедура ЗагрузитьШаблоны(ФайлВыгрузки, ТекстовыйДокумент = Неопределено) Экспорт
	                                  
	// Необходимо привести файл выгрузки к виду, пригодному для загрузки,
	// т.е. заменить уникальные идентификаторы исходного xml-файла
	// соответствующими существующими идентификаторами, т.к. возможны
	// ситуации переноса шаблонов между не синхронизированными по объектам
	// между собой базами.
	СообщитьВПоле(ТекстовыйДокумент, "Обработка файла перед загрузкой...");
	НовоеИмяФайла = ИсправитьФайлИмпорта(ФайлВыгрузки);
	СообщитьВПоле(ТекстовыйДокумент, "Успешно");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(НовоеИмяФайла);
	
	СообщитьВПоле(ТекстовыйДокумент, "Начало чтения файла """ + НовоеИмяФайла + """" + Строка(ТекущаяДата()) + "...");
	СообщитьВПоле(ТекстовыйДокумент, "-- Проверка заголовка файла");
	Если Не ЧтениеXML.Прочитать() Или
		ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или 
		ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD" Или 
		ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда 


		#Если Клиент Тогда
		ПоказатьПредупреждение(,"Неверный формат загружаемого файла", 10, "Ошибка загрузки!!!");
		СообщитьВПоле(ТекстовыйДокумент, "ERROR: " + "Неверный формат загружаемого файла");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	Если Не ЧтениеXML.Прочитать() Или
		ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или 
		ЧтениеXML.ЛокальноеИмя <> "Data" Или 
		ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда 
		#Если Клиент Тогда
		ПоказатьПредупреждение(,"Неверный формат файла выгрузки", 10, "Ошибка загрузки!!!");
		СообщитьВПоле(ТекстовыйДокумент, "ERROR: " + "Неверный формат загружаемого файла");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если Не ЧтениеXML.Прочитать() Тогда 
		#Если Клиент Тогда
		ПоказатьПредупреждение(,"Неверный формат файла выгрузки", 10, "Ошибка загрузки!!!");
		СообщитьВПоле(ТекстовыйДокумент, "ERROR: " + "Неверный формат загружаемого файла");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	СообщитьВПоле(ТекстовыйДокумент, "-- успешно");
	
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		Попытка
			НовЭлем = ПрочитатьXML(ЧтениеXML);
			СообщитьВПоле(ТекстовыйДокумент, "Загружен элемент: " + Строка(НовЭлем));
		Исключение
			СообщитьВПоле(ТекстовыйДокумент, "ERROR: " + ОписаниеОшибки());
		КонецПопытки;
		
		НовЭлем.ОбменДанными.Загрузка = Истина;
		
		Попытка
			НовЭлем.Записать();
		Исключение
			сообщ = ОписаниеОшибки();
			СообщитьВПоле(ТекстовыйДокумент, "ERROR: " + сообщ);
			Если Найти(сообщ, "не уникален") > 0 Тогда
				НовЭлем.УстановитьНовыйКод();
				НовЭлем.Записать();
			КонецЕсли;	
		КонецПопытки;	
	КонецЦикла;	
	
КонецПроцедуры

// Процедура выполняет вывод сообщения в поле.
// 
Процедура СообщитьВПоле(ТекстовыйДокумент, ТекстСообщения, Статус = Неопределено) Экспорт
	
	Если ТекстовыйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = ТекстовыйДокумент + Символы.ПС + ТекстСообщения;
	
КонецПроцедуры

// Функция возвращает новое имя файла выгрузки.
// 
Функция ИсправитьФайлИмпорта(ФайлВыгрузки) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
	
	ИсходныеИД = Новый ТаблицаЗначений;
	ИсходныеИД.Колонки.Добавить("ПолеСинхронизации");
	ИсходныеИД.Колонки.Добавить("ЗначениеПоля1");
	ИсходныеИД.Колонки.Добавить("ЗначениеПоля2");
	ИсходныеИД.Колонки.Добавить("ИсходныйИД");
	ИсходныеИД.Колонки.Добавить("СуществующийИД");
	
	Пока ЧтениеXML.ЛокальноеИмя <> "Data" Цикл
		ЧтениеXML.Прочитать()
	КонецЦикла;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		
			// Нас интересуют только определенные узлы 
			Если ЧтениеXML.ЛокальноеИмя = "CatalogObject.бит_ВидыРеквизитовДвижений" Тогда
				// Необходимо синхронизировать с существующими элементами по наименованию.
				НовЗапись = ИсходныеИД.Добавить();
				// Получим значение поля "Ref"
				НовЗапись.ПолеСинхронизации =	ЧтениеXML.ЛокальноеИмя;
				Новзапись.ИсходныйИД 		= 	ПолучитьЗначениеУзла(ЧтениеXML, "Ref");
				Новзапись.ЗначениеПоля1 	= 	ПолучитьЗначениеУзла(ЧтениеXML, "Description");
				Новзапись.ЗначениеПоля2 	= 	ПолучитьЗначениеУзла(ЧтениеXML, "ИмяРегистра");
			ИначеЕсли ЧтениеXML.ЛокальноеИмя = "CatalogObject.бит_ОбъектыСистемы" Тогда
				// Необходимо синхронизировать с существующими элементами по наименованию.
				НовЗапись = ИсходныеИД.Добавить();
				// Получим значение поля "Ref"
				НовЗапись.ПолеСинхронизации =	ЧтениеXML.ЛокальноеИмя;
				Новзапись.ИсходныйИД 		= 	ПолучитьЗначениеУзла(ЧтениеXML, "Ref");
				Если не ПолучитьЗначениеУзла(ЧтениеXML, "IsFolder") Тогда
					Новзапись.ЗначениеПоля1     =  ПолучитьЗначениеУзла(ЧтениеXML, "ИмяОбъектаПолное");
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ЛокальноеИмя = "CatalogObject.бит_КомплектыДвижений" Тогда
				// Необходимо синхронизировать с существующими элементами по наименованию.
				НовЗапись = ИсходныеИД.Добавить();
				// Получим значение поля "Ref"
				НовЗапись.ПолеСинхронизации =	ЧтениеXML.ЛокальноеИмя;
				Новзапись.ИсходныйИД 		= 	ПолучитьЗначениеУзла(ЧтениеXML, "Ref");
				Новзапись.ЗначениеПоля1 	= 	ПолучитьЗначениеУзла(ЧтениеXML, "УникальныйИД");
			ИначеЕсли ЧтениеXML.ЛокальноеИмя = "CatalogObject.бит_ШаблоныДвижений" Тогда
				// Необходимо синхронизировать с существующими элементами по наименованию.
				НовЗапись = ИсходныеИД.Добавить();
				// Получим значение поля "Ref"
				НовЗапись.ПолеСинхронизации =	ЧтениеXML.ЛокальноеИмя;
				Новзапись.ИсходныйИД 		= 	ПолучитьЗначениеУзла(ЧтениеXML, "Ref");
				Новзапись.ЗначениеПоля2 	= 	ПолучитьЗначениеУзла(ЧтениеXML, "IsFolder");
				Новзапись.ЗначениеПоля1 	= 	ПолучитьЗначениеУзла(ЧтениеXML, ?(Новзапись.ЗначениеПоля2, "Description", "УникальныйИД"));
				
			Иначе
				ЧтениеXML.Пропустить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Необходимо найти существующие элементы для синхронизации.
	ОпределитьСуществующиеЭлементыДляСинхронизации(ИсходныеИД);
	
	// Получим текст XML-файла
	Текст 			= Новый ЧтениеТекста(ФайлВыгрузки);
	ИсходныйТекст 	= Текст.Прочитать();
	
	// Осуществим замену найденных GUID, если не нашли - не меняем.
	ИсходныеИД.Свернуть("ИсходныйИД, СуществующийИД");
	
	Для Каждого ЭлементЗамены Из ИсходныеИД Цикл
		Если ЭлементЗамены.СуществующийИД <> Неопределено Тогда
			Если ЭлементЗамены.СуществующийИД <> ЭлементЗамены.ИсходныйИД Тогда
				ИсходныйТекст = СтрЗаменить(ИсходныйТекст, ЭлементЗамены.ИсходныйИД, ЭлементЗамены.СуществующийИД);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Текст = ИсходныйТекст;
	
	// Запишем результат в дополнительный файл
	НовоеИмяФайла =  ФайлВыгрузки + "_";
	ЗаписьНовыйФайл = Новый ЗаписьТекста(НовоеИмяФайла);
	ЗаписьНовыйФайл.Записать(Текст);
	ЗаписьНовыйФайл.Закрыть();
	
	Возврат НовоеИмяФайла;
	
КонецФункции

// Процедура определяет существующие элементы для синхронизации.
// 
Процедура ОпределитьСуществующиеЭлементыДляСинхронизации(ИсходныеИД) Экспорт
	
	Для Каждого Элемент Из ИсходныеИД цикл
		
		Если Элемент.ПолеСинхронизации = "CatalogObject.бит_ВидыРеквизитовДвижений" Тогда
			Отбор = Новый Структура("Наименование");
			Отбор.Наименование = Элемент.ЗначениеПоля1;
            Выборка = Справочники.бит_ВидыРеквизитовДвижений.Выбрать(,, Отбор);
			Элемент.СуществующийИД = Неопределено;
			Пока Выборка.Следующий() Цикл
				Если Выборка.ИмяРегистра = Элемент.ЗначениеПоля2 Тогда
					Элемент.СуществующийИД = Выборка.Ссылка.УникальныйИдентификатор();
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Элемент.ПолеСинхронизации = "CatalogObject.бит_ОбъектыСистемы" Тогда
            Выборка = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", Элемент.ЗначениеПоля1);
			Элемент.СуществующийИД = Неопределено;
			Если не Выборка.Пустая() Тогда
				Элемент.СуществующийИД = Выборка.УникальныйИдентификатор();
			КонецЕсли;
		ИначеЕсли Элемент.ПолеСинхронизации = "CatalogObject.бит_КомплектыДвижений" Тогда
			Выборка = Справочники.бит_КомплектыДвижений.НайтиПоРеквизиту("УникальныйИД", Элемент.ЗначениеПоля1);
			Элемент.СуществующийИД = Неопределено;
			Если не Выборка.Пустая() Тогда
				Элемент.СуществующийИД = Выборка.УникальныйИдентификатор();
			КонецЕсли;
		ИначеЕсли Элемент.ПолеСинхронизации = "CatalogObject.бит_ШаблоныДвижений" Тогда
			Если Элемент.ЗначениеПоля2 Тогда
				Выборка = Справочники.бит_ШаблоныДвижений.НайтиПоНаименованию(Элемент.ЗначениеПоля1, Истина);
				Элемент.СуществующийИД = Неопределено;
				Если не Выборка.Пустая() Тогда
					Элемент.СуществующийИД = Выборка.УникальныйИдентификатор();
				КонецЕсли;
			Иначе	
				Выборка = Справочники.бит_ШаблоныДвижений.НайтиПоРеквизиту("УникальныйИД", Элемент.ЗначениеПоля1);
				Элемент.СуществующийИД = Неопределено;
				Если не Выборка.Пустая() Тогда
					Элемент.СуществующийИД = Выборка.УникальныйИдентификатор();
				КонецЕсли;
			КонецЕсли;
		Иначе
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает значение узла.
// 
Функция ПолучитьЗначениеУзла(ЧтениеXML, ИмяУзла)
	Пока ЧтениеXML.Имя <> ИмяУзла Цикл
		флЧтениеВыполнено = ЧтениеXML.Прочитать();
		Если НЕ флЧтениеВыполнено Тогда
		
			Прервать;
		
		КонецЕсли; 
	КонецЦикла;
	Если ЧтениеXML.Прочитать() Тогда
		Возврат ЧтениеXML.Значение;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецЕсли
