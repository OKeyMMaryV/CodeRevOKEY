
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы обработки.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_ИмпортЭкспортШаблоновДвиженийУпр;
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним список шаблонов
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_ШаблоныДвижений.Ссылка
	|ИЗ
	|	Справочник.бит_ШаблоныДвижений КАК бит_ШаблоныДвижений");
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ШаблоныДвижений.ЗагрузитьЗначения(Результат);
	ШаблоныДвижений.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "Выбор" списка шаблонов движений.
// 
&НаКлиенте
Процедура ШаблоныДвиженийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ШаблонСсылка = ШаблоныДвижений.Получить(ВыбраннаяСтрока).Значение;
	ПоказатьЗначение(,ШаблонСсылка);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ФайлЭкспорта".
// 
&НаКлиенте
Процедура ФайлЭкспортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ФайлЭкспорта;
	
	Текст = "ru = ""Файл XML""; en = ""File XML""";
	Фильтр = НСтр(Текст)+"(*.xml)|*.xml";
	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = Нстр("ru = 'Выберите файл'");
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ФайлЭкспортаНачалоВыбораЗавершение", ЭтотОбъект));
    	
КонецПроцедуры

// Обработка оповещения процедуры "ФайлЭкспортаНачалоВыбора".
//
// Параметры:
//  ВыбранныеФайлы 	- массив 	   - массив выбранных имен файлов или Неопределено, если выбор не осуществлен. 
//  Дополнение	 	- Произвольный - произвольные данные.
//
&НаКлиенте
Процедура ФайлЭкспортаНачалоВыбораЗавершение(ВыбранныеФайлы, Дополнение) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ФайлЭкспорта = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ФайлИмпорта".
// 
&НаКлиенте
Процедура ФайлИмпортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ФайлИмпорта;
	Текст = "ru = ""Файл XML""; en = ""File XML""";
	Фильтр = НСтр(Текст)+"(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = Нстр("ru = 'Выберите файл импорта'");
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ФайлИмпортаНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогОткрытияФайла", ДиалогОткрытияФайла)));
	
КонецПроцедуры

// Обработка оповещения процедуры "ФайлИмпортаНачалоВыбора".
//
// Параметры:
//  ВыбранныеФайлы			 - Массив	 	 - массив выбранных имен файлов или Неопределено, если выбор не осуществлен. 
//  ДополнительныеПараметры	 - Произвольный	 - произвольные данные.
//
&НаКлиенте
Процедура ФайлИмпортаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		Объект.ФайлИмпорта = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "Выгрузить" формы обработки.
// 
&НаКлиенте
Процедура Выгрузить(Команда)
	
	// Определим импорт или экспорт
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭкспорт Тогда
		ВыполнитьЭкспорт();
	Иначе
		ВыполнитьИмпорт();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив отмеченных шаблонов в списке шаблонов.
// 
&НаСервере
Функция ПолучитьМассивШаблонов()
	
	МассивШаблонов = Новый Массив;
	
	Для Каждого СтрокаСписка Из ШаблоныДвижений Цикл
		
		Если СтрокаСписка.Пометка Тогда
			МассивШаблонов.Добавить(СтрокаСписка.Значение);
		КонецЕсли;
		
	КонецЦикла;

	Возврат МассивШаблонов;
	
КонецФункции

// Возвращает массив комплектов, в которые входят выбранные в списке шаблоны.
// 
&НаСервере
Функция ПолучитьМассивКомплектов()
	
	МассивКомплектов 	= Новый Массив;
	МассивШаблонов 		= ПолучитьМассивШаблонов();
	
	Если Не ВыгружатьКомплекты Тогда
		Возврат МассивКомплектов;
	КонецЕсли;
			
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_КомплектыДвиженийШаблоныДвижений.Ссылка
	|ИЗ
	|	Справочник.бит_КомплектыДвижений.ШаблоныДвижений КАК бит_КомплектыДвиженийШаблоныДвижений
	|ГДЕ
	|	бит_КомплектыДвиженийШаблоныДвижений.ШаблонДвижения В(&МассивШаблонов)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_КомплектыДвиженийШаблоныДвижений.Ссылка");
	
	Запрос.УстановитьПараметр("МассивШаблонов", МассивШаблонов);
	
	МассивКомплектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивКомплектов;
	
КонецФункции

// Выполняет экспорт данных, в соответствии с выбранными шаблонами.
// 
&НаКлиенте
Процедура ВыполнитьЭкспорт()
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЭкспорта) Тогда
		ТекстСообщения = НСтр("ru='Не выбран файл экспорта!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
		Возврат;
	КонецЕсли;
	
	ТекстXML = ПолучитьТекстXMLНаСервере();
	
	Выгрузка = Новый ТекстовыйДокумент;
	Выгрузка.УстановитьТекст(ТекстXML);
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьЭкспортЗавершение", ЭтотОбъект); 
	Выгрузка.НачатьЗапись(Оповещение, Объект.ФайлЭкспорта);
	
КонецПроцедуры

// Обработчик завершения метода "начать запись".
//  См. Синтакс-помощник: НачатьЗапись().
//
&НаКлиенте 
Процедура ВыполнитьЭкспортЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ТекстСообщения = НСтр("ru='Выгрузка успешно завершена!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры
 

// Возвращает XML-описание выгрузки.
// 
&НаСервере
Функция ПолучитьТекстXMLНаСервере()
	
	ТекстXML = Обработки.бит_ИмпортЭкспортШаблоновДвиженийУпр.СформироватьXMLОписаниеВыгрузки(ПолучитьМассивКомплектов(), ПолучитьМассивШаблонов());
	
	Возврат ТекстXML;
	
КонецФункции

// Выполняет импорт данных из указанного файла импорта.
// 
&НаКлиенте
Процедура ВыполнитьИмпорт()
	
	Если Не ЗначениеЗаполнено(Объект.ФайлИмпорта) Тогда
		
		ТекстСообщения = НСтр("ru='Не выбран файл импорта!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Проверим существование файла и в случае его отсутствия - создадим.
	Файл = Новый Файл(Объект.ФайлИмпорта);
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ВыполнитьИмпортЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

// Обработка оповещения процедуры "ВыполнитьИмпорт".
//
// Параметры:
//  Существует				 - Булево - результат записи.
//  ДополнительныеПараметры	 - Произвольный.
//
&НаКлиенте
Процедура ВыполнитьИмпортЗавершение1(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		
		ТекстСообщения = НСтр("ru='Указанный файл не найден!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.НачатьЧтение(Новый ОписаниеОповещения("ВыполнитьИмпортЗавершение", ЭтотОбъект, Новый Структура("ТекстДок", ТекстДок)), Объект.ФайлИмпорта);

КонецПроцедуры

// Обработка оповещения процедуры "ВыполнитьИмпортЗавершение1".
//
// Параметры:
//  Результат				 - Булево - результат чтения.
//  ДополнительныеПараметры	 - Произвольный. 
//
&НаКлиенте
Процедура ВыполнитьИмпортЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстДок = ДополнительныеПараметры.ТекстДок;
	
	ТекстXML = ТекстДок.ПолучитьТекст();
	
	// Все нормально, можно загружать
	ВыполнитьИмпортНаСервере(ТекстXML);
	
	ТекстСообщения = НСтр("ru='Загрузка успешно завершена!'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

// Выполняет импорт данных из указанного файла импорта на сервере.
// 
&НаСервере
Процедура ВыполнитьИмпортНаСервере(ТекстXML)
	
	// Создадим временный файл для загрузки
	КаталогВременныхФайлов = ФайловаяСистема.СоздатьВременныйКаталог("template");
	
	ИмяВременногоФайла = КаталогВременныхФайлов + Строка(Новый УникальныйИдентификатор) + ".xml";
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ТекстXML);
	ТекстДок.Записать(ИмяВременногоФайла);
	
	Обработки.бит_ИмпортЭкспортШаблоновДвиженийУпр.ЗагрузитьШаблоны(ИмяВременногоФайла, ПротоколЗагрузки);
	ФайловаяСистема.УдалитьВременныйКаталог(КаталогВременныхФайлов);
	
КонецПроцедуры

#КонецОбласти





