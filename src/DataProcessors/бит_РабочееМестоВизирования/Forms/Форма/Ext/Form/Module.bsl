	
#Область ОписаниеПеременных

&НаКлиенте
Перем УИДЗамера;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_РабочееМестоВизирования;
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	// +СБ. Широков Николай. 2014-09-26. ТЗ "Казначейство" 2.2.2.4. 
	СБ_РаботаСФормамиОбъекты.бит_РабочееМестоВизированияФормаУправляемаяПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);	
	// -СБ. Широков Николай
	
	НастройкиПанелей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПользователя",
								НСтр("ru = 'Настройки панелей РМВ'"), НастройкиПанелейПоУмолчанию(ЭтотОбъект));
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,  НастройкиПанелей);	
	
	ПодготовитьФорму();
	
	// +СБ. Широков Николай. 2014-09-26. ТЗ "Казначейство" 2.2.2.4.
	СБ_РаботаСФормамиОбъекты.бит_РабочееМестоВизированияФормаУправляемаяПриСозданииНаСервереДополнительно(ЭтаФорма, Отказ, СтандартнаяОбработка);	
	// -СБ. Широков Николай
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ И Не ЗначениеЗаполнено(АдресСхемыКомпоновкиДанных) Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	Элементы.ФормаКомандаВидимостьПанелиНастроек.Пометка  = ПанельНастройкиВидимость;
	Элементы.ФормаКомандаВидимостьАлгоритм.Пометка        = ПанельАлгоритмВидимость;
	Элементы.ФормаКомандаВизыВидимость.Пометка            = ПанельВизыВидимость;
	Элементы.ФормаКомандаИсторияСтатусовВидимость.Пометка = ПанельИсторияСтатусовВидимость;
	Элементы.ФормаКомандаВидимостьИсторияВиз.Пометка      = ПанельИсторияВизыВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		 ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПользователя",
		 	НСтр("ru = 'Настройки панелей РМВ'"), НастройкиПанелейПоУмолчанию(ЭтотОбъект));
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Решение".
//
&НаКлиенте
Процедура РешениеПриИзменении(Элемент)
	
	ИзменениеРешения();
	
КонецПроцедуры

&НаКлиенте
Процедура РешениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РешениеНачалоВыбораЗавершение", ЭтотОбъект, Элемент); 
	ПоказатьВыборИзСписка(Оповещение, ДоступныеРешения, Элемент); 
	
КонецПроцедуры

// Процедура окончание процедуры "РешениеНачалоВыбора".
// 
&НаКлиенте 
Процедура РешениеНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		Объект.Решение = РезультатВыбора.Значение;
		РешениеПриИзменении(ДополнительныеПараметры);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаРасшифровки" поля табличного документа "ТДАлгоритм".
//
&НаКлиенте
Процедура ТДАлгоритмОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "Выбор" табличного поля "НаборВизы".
//
&НаКлиенте
Процедура НаборВизыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "Выбор" табличного поля "НаборИстория".
//
&НаКлиенте
Процедура НаборИсторияИзмененияВизВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "Выбор" табличного поля "НаборИстория".
//
&НаКлиенте
Процедура НаборИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабДокументы

// Процедура - обработчик события "Выбор" табличного поля "ТабДокументы".
//
&НаКлиенте
Процедура ТабДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	 ТекущаяСтрока = ТабДокументы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	 Если НЕ ТекущаяСтрока = Неопределено Тогда
	 	ПоказатьЗначение(,ТекущаяСтрока.Ссылка);
	 КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "ТабДокументы".
//
&НаКлиенте
Процедура ТабДокументыПриАктивизацииСтроки(Элемент)
	
	флВыполнять = УстановитьВидимостьПанелиТекущегоДокумента(ЭтотОбъект);
	Если флВыполнять Тогда
		ТекущаяСтрока = Элементы.ТабДокументы.ТекущиеДанные;
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			ТекущийДокумент = ТекущаяСтрока.Ссылка;
			// Используем обработчик ожидания, т.к. вызовы сервера в данном обработчике приводят к зацикливанию.
			ОтключитьОбработчикОжидания("ОжиданиеАктивазацииСтроки");
			ПодключитьОбработчикОжидания("ОжиданиеАктивазацииСтроки",0.1,Истина);
		КонецЕсли; 
	КонецЕсли; 				
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокументыВыполнятьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТабДокументы.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
			ПересчитатьЗначенияВыделенныхДокументов(ТекущаяСтрока.Выполнять, ТекущаяСтрока.СуммаДокумента, ТекущаяСтрока.Ссылка);
		КонецЕсли; 
	КонецЕсли;
	
	// +СБ. Широков Николай. 2014-12-16. Доработка #1225
	ПодвестиИтогПоВыделенным();
	// -СБ. Широков Николай
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - действие команды "КомандаОбновить".
//
&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОчиститьСообщения();
	Отказ = НЕ ПериодЗаполненПравильно(ЭтотОбъект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ФормированиеСпискаДокументов.бит_РабочееМестоВизирования",, Ложь);
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ДлительнаяОперация = ПараметрыОбновленияМакетаДокумента();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Заполнение таблицы'");  
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииОбновленияТаблицыДокументов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
	// +СБ. Широков Николай. 2014-12-16. Доработка #1225
	СБ_СуммаВыделенных 		= 0;
	СБ_КоличествоВыделенных = 0;
	// -СБ. Широков Николай
	
КонецПроцедуры

// Процедура оповещения команды "КомандаОбновить".
//
// Параметры:
//  Результат         - Структура - См. общий модуль ДлительныеОпрации.
//  ДополнительныеПараметры   - Произвольный - произвольные данные, переданные в обработку оповещения. 
//
&НаКлиенте
Процедура ПриЗавершенииОбновленияТаблицыДокументов(Результат, ДополнительныеПараметры) Экспорт

  Если Результат = Неопределено Тогда
    Возврат;
  КонецЕсли;
  
  Если Результат.Статус = "Ошибка" Тогда
    // Ничего не делать или обработать ошибку.
    ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка при выполнении: %1'"), 
		Результат.КраткоеПредставлениеОшибки));
  Иначе
    // Загрузка данных в объект на сервере.
    ПриЗавершенииОбновленияТаблицыДокументовНаСервере(Результат.АдресРезультата);
	ОчиститьЗначенияВыделенныхДокументов();
	ЗафиксироватьДлительностьКлючевойОперации();
  КонецЕсли;

КонецПроцедуры

// Процедура - действие команды "КомандаДокументыУстановитьВсе".
// Устанавливаем все флажки.
//
&НаКлиенте
Процедура КомандаДокументыУстановитьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из ТабДокументы Цикл
		СтрокаТаблицы.Выполнять = Истина;
		ПересчитатьЗначенияВыделенныхДокументов(Истина, СтрокаТаблицы.СуммаДокумента, СтрокаТаблицы.Ссылка);
	КонецЦикла; 
	
	// +СБ. Широков Николай. 2014-12-16. Доработка #1225
	ПодвестиИтогПоВыделенным();
	// -СБ. Широков Николай
	
КонецПроцедуры

// Процедура - действие команды "КомандаДокументыСнятьВсе".
// Снимаем все флажки.
//
&НаКлиенте
Процедура КомандаДокументыСнятьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из ТабДокументы Цикл
		СтрокаТаблицы.Выполнять = Ложь;
		ПересчитатьЗначенияВыделенныхДокументов(Ложь, СтрокаТаблицы.СуммаДокумента, СтрокаТаблицы.Ссылка);
	КонецЦикла; 
	
	// +СБ. Широков Николай. 2014-12-16. Доработка #1225
	ПодвестиИтогПоВыделенным();
	// -СБ. Широков Николай
	
КонецПроцедуры

// Процедура - действие команды "КомандаДокументыИнвертировать".
// Инвертировать флажки.
//
&НаКлиенте
Процедура КомандаДокументыИнвертировать(Команда)
	
	Для Каждого СтрокаТаблицы Из ТабДокументы Цикл
		СтрокаТаблицы.Выполнять = НЕ СтрокаТаблицы.Выполнять;
	КонецЦикла; 
	
	// +СБ. Широков Николай. 2014-12-16. Доработка #1225
	ПодвестиИтогПоВыделенным();
	// -СБ. Широков Николай
	
КонецПроцедуры

// Процедура - действие команды "КомандаУстановитьРешение".
// Выполняем установку решения по отмеченным строкам таблицы документов.
//
&НаКлиенте
Процедура КомандаУстановитьРешение(Команда)
	
	КлючеваяОперация = "ПакетнаяУстановкаРешения.бит_РабочееМестоВизирования";
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,, Истина);
	
	// +СБ. Широков Николай. 2014-09-29. ТЗ "Казначейство" 2.2.2.4.
	ЭтоОтклонение 		= (Объект.Решение = ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено"));
	НоваяДатаРасхода 	= Неопределено;
	
	Если ЭтоОтклонение
		И ПустаяСтрока(Объект.Комментарий) Тогда
		
		Сообщить("Не заполнено поле ""Комментарий""!", СтатусСообщения.ОченьВажное);
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоОтклонение Тогда
		
		НоваяДатаРасхода = ВернутьТекущуюДатуСеанса();
		
		Если НЕ ВвестиДату(НоваяДатаРасхода, "Перенос даты расхода:", ЧастиДаты.Дата) Тогда
			НоваяДатаРасхода = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	// -СБ. Широков Николай
	
	Состояние(НСтр("ru = 'Установка виз...'"));	
	// +СБ. Широков Николай. 2014-09-29. ТЗ "Казначейство" 2.2.2.4.
	//УстановитьРешения();
	УстановитьРешения(НоваяДатаРасхода);
	// -СБ. Широков Николай
	ОчиститьЗначенияВыделенныхДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВвестиКомментарий(Команда)
	
	Текст        = Объект.Комментарий;
	Подсказка    = НСтр("ru = 'Введите текст комментария'");
	ДопПараметры = Новый Структура("ТекстКомментария", Текст);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("КомандаВвестиКомментарийЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПоказатьВводСтроки(ОповещениеОЗавершении, Текст, Подсказка, 300, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВвестиКомментарийЗавершение(Комментарий, ДопПараметры) Экспорт

	Если ПустаяСтрока(Комментарий) Тогда
		Объект.Комментарий = ДопПараметры.ТекстКомментария;
	Иначе
		Объект.Комментарий = Комментарий;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - действие команды "КомандаНастройки".
// Открываем форму настроек.
//
&НаКлиенте
Процедура КомандаНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОбработки", ТекущиеНастройкиОбработки());
	ПараметрыФормы.Вставить("ДоступныеРешения",	  ДоступныеРешения);
	ПараметрыФормы.Вставить("Период",			  Период);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение",ЭтотОбъект);
	ОткрытьФорму("Обработка.бит_РабочееМестоВизирования.Форма.ФормаНастройки",ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Функция ТекущиеНастройкиОбработки()
	
	Возврат Обработки.бит_РабочееМестоВизирования.ТекущиеНастройкиОбработки(Объект);
	
КонецФункции

// Процедура окончание процедуры "КомандаОткрытьНастройки".
// 
&НаКлиенте 
Процедура ОткрытьНастройкиЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") И РезультатВыбора.Команда = "ОК" Тогда
		 ПрименитьОбщиеНастройки(РезультатВыбора);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - действие команды "КомандаВидимостьНастройки".
// Включаем/выключаем видимость панели настроек.
//
&НаКлиенте
Процедура КомандаВидимостьПанелиНастроек(Команда)
	
	ПанельНастройкиВидимость = НЕ ПанельНастройкиВидимость;
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - действие команды "КомандаВидимостьАлгоритм".
//
&НаКлиенте
Процедура КомандаВидимостьАлгоритм(Команда)
	
	ПанельАлгоритмВидимость = НЕ ПанельАлгоритмВидимость;
	Элементы.ФормаКомандаВидимостьАлгоритм.Пометка = ПанельАлгоритмВидимость;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - действие команды "КомандаИсторияСтатусовВидимость".
//
&НаКлиенте
Процедура КомандаИсторияСтатусовВидимость(Команда)
	
	ПанельИсторияСтатусовВидимость = НЕ ПанельИсторияСтатусовВидимость;
	Элементы.ФормаКомандаИсторияСтатусовВидимость.Пометка = ПанельИсторияСтатусовВидимость;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - действие команды "КомандаВидимостьИсторияВиз".
//
&НаКлиенте
Процедура КомандаВидимостьИсторияВиз(Команда)
	
	ПанельИсторияВизыВидимость = НЕ ПанельИсторияВизыВидимость;
	Элементы.ФормаКомандаВидимостьИсторияВиз.Пометка = ПанельИсторияВизыВидимость;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - действие команды "КомандаВизыВидимость".
//
&НаКлиенте
Процедура КомандаВизыВидимость(Команда)
	
	ПанельВизыВидимость = НЕ ПанельВизыВидимость;
	Элементы.ФормаКомандаВизыВидимость.Пометка = ПанельВизыВидимость;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - действие команды "КомандаНастройкиСпискаДокументы".
//
&НаКлиенте
Процедура КомандаНастройкиСпискаДокументы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаНастроек",ТабДокументыНастройки);
	Оповещение = Новый ОписаниеОповещения("КомандаНастройкиСпискаДокументыЗавершение",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаНастройкиСпискаУправляемая",ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

// Процедура окончание процедуры "КомандаНастройкиСпискаДокументы".
// 
&НаКлиенте 
Процедура КомандаНастройкиСпискаДокументыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		Если РезультатВыбора.Свойство("Команда") И РезультатВыбора.Команда = "ОК" Тогда
			ПрименитьИзмененияНастроек(РезультатВыбора);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура назначается динамически действию кнопки командной панели 
// КоманднаяПанель.РаскраситьПоСтатусам
// (обработчик события "Нажатие" кнопки "РаскраситьПоСтатусам").
//
&НаКлиенте
Процедура Подключаемый_РаскраситьПоСтатусам()
	
	Элементы.РаскраситьПоСтатусам.Пометка = Не Элементы.РаскраситьПоСтатусам.Пометка;
	ОформитьСписокДокументовПоСтатусам(Элементы.РаскраситьПоСтатусам.Пометка);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Период;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

// Процедура - Выбрать период завершение
//
// Параметры:
//  РезультатВыбора	 - Структура - структура с ключами:
//  * НачалоПериода - Дата - Начало периода.
//  * КонецПериода - Дата - Конец периода.
//  ДопПараметры	 - Структура - Структура из дополнительных параметров.
//
&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Период = РезультатВыбора;
		Объект.НачалоПериода= РезультатВыбора.ДатаНачала;
		Объект.КонецПериода	= РезультатВыбора.ДатаОкончания;
		ТекущаяНастройкаПериода = ТекущаяНастройкаПериода(ЭтотОбъект);
		Если ТекущаяНастройкаПериода <> Неопределено Тогда
			ТекущаяНастройкаПериода.Значение = Период;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие команды "КомандаСохранитьНастройки".
//
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		ПараметрыФормы.Вставить("СохраненнаяНастройка",ТекущаяНастройка);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиЗавершение",ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы сохранения настроек. 
//
&НаКлиенте
Процедура СохранитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекущаяНастройка = Результат;
		УстановитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие команды "КомандаВосстановитьНастройки".
//
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПрименениеНастроекЗавершение",ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура - обработчик оповещения о закрытии формы применения настроек. 
//
&НаКлиенте 
Процедура ПрименениеНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда        
		ТекущаяНастройка = Результат;
		ПрименитьНастройки(ТекущаяНастройка);
	КонецЕсли;	
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-09-29 (#3488)
&НаКлиенте
Процедура КомандаКорректировать(Команда)
	
	ТекущиеДанные = Элементы.ТабДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("ок_НастройкиДоступностиПолейОбъектовДляРедактирования", Истина);
	ПараметрыФормы.Вставить("ок_НастройкиДоступностиПолейОбъектовДляРедактирования_Виза", ТекущиеДанные.ДоступныеНеустановленныеВизы);
	
	ОткрытьФорму("Документ.бит_ЗаявкаНаРасходованиеСредств.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				  
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-09-29 (#3488)

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеТаблицыДокументов

&НаСервере
Функция ПараметрыОбновленияМакетаДокумента()

  НаименованиеЗадания = НСтр("ru = 'Обновление таблицы документов визирования.'");
  ВыполняемыйМетод = "Обработки.бит_РабочееМестоВизирования.ПолучитьТаблицуДокументов";
  
  // Заполнение пераметов длительной операции.
  ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
  ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
  
  Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыПолученияТаблицыДокументов(), ПараметрыВыполнения);

КонецФункции

&НаСервере
Процедура ПриЗавершенииОбновленияТаблицыДокументовНаСервере(АдресРезультата)
	
	ТаблицаДокументы = ПолучитьИзВременногоХранилища(АдресРезультата);
	//++ БП
	ОбновитьТаблицуДокументовЗавершение(ТаблицаДокументы, Новый Структура);
	//-- БП
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	Период = Новый СтандартныйПериод(Объект.НачалоПериода, КонецДня(Объект.КонецПериода));
	ТекущаяНастройкаПериода = ТекущаяНастройкаПериода(ЭтотОбъект);
	Если ТекущаяНастройкаПериода <> Неопределено Тогда
		ТекущаяНастройкаПериода.Значение = Период;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиПанелейПоУмолчанию(Форма)

	Настройки = Новый Структура;
	Настройки.Вставить("ПанельАлгоритмВидимость",		Ложь);
	Настройки.Вставить("ПанельВизыВидимость",			Ложь);
	Настройки.Вставить("ПанельИсторияВизыВидимость",	Ложь);
	Настройки.Вставить("ПанельИсторияСтатусовВидимость",Ложь);
	Настройки.Вставить("ПанельНастройкиВидимость",		Ложь);
	ЗаполнитьЗначенияСвойств(Настройки, Форма);
	
	Возврат Настройки;
	
КонецФункции

// Процедура устанавливает заголовок формы.
//
&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		ЗаголовокФормы = НСтр("ru = 'Рабочее место визирования (%1)'");
		ЗаголовокФормы = СтрШаблон(ЗаголовокФормы, ТекущаяНастройка);
	Иначе	
		ЗаголовокФормы = НСтр("ru = 'Рабочее место визирования'");
	КонецЕсли; 
	ЭтотОбъект.Заголовок = ЗаголовокФормы;
	
КонецПроцедуры

// Процедура обработчик ожидания выполнения действия при активизации строки.
//
&НаКлиенте
Процедура ОжиданиеАктивазацииСтроки()

 	ДействияПриАктивизацииСтроки();
	
	// +СБ. Широков Николай. 2014-10-01. ТЗ "Казначейство" 2.2.2.4.
	//ОбновитьТекстСведенийОРасчетномСчетеКонтрагента();
	УстановитьДоступностьРеквизитовКорректировки();
	// -СБ. Широков Николай

КонецПроцедуры

// Процедура выполняет действия, необходимые при создании формы на сервере.
//
// Параметры:
// 	Нет
//
&НаСервере
Процедура ПодготовитьФорму() Экспорт

	// По умолчанию при первом запуске.
	Объект.РежимФильтраВиз = 3;
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Период.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;	
	КонецЕсли;
	Объект.НачалоПериода= Период.ДатаНачала;
	Объект.КонецПериода	= Период.ДатаОкончания;
	
	АдресСхемыКомпоновкиДанных = Обработки.бит_РабочееМестоВизирования.ИнициализироватьКомпоновщик(Объект.Компоновщик, Новый УникальныйИдентификатор);
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ТекущийПользователь", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	фКэшЗначений.Вставить("НастраиваемыйОбъект", Метаданные.Обработки.бит_РабочееМестоВизирования.ПолноеИмя());
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	
	ИнициализироватьНастройкиТабДокументы();
	
	ИнициализироватьДоступныеРешения();
	
	УстановитьЗначенияПоУмолчанию();
	
	УстановитьДекорациюРешение();	 
	
	УстановитьОтборНаборВизы(Неопределено);
	
	УстановитьОтборНаборИсторияСтатусов(Неопределено);
	
	УстановитьОтборНаборИсторияИзмененияВиз(Неопределено);
	
	ПрименитьНастройкиТаблицы();
	
	УстановитьВидимость();
	УстановитьУсловноеОФормление();
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_РабочееМестоВизирования;
	// Добавление кнопки "Раскрасить по статусам".
	// Также добавляются процедуры: К-РаскраситьПоСтатусам(), С-ОформитьСписокДокументовПоСтатусам().
	бит_РаботаСДиалогамиСервер.ДобавитьКнопкуРаскраситьПоСтатусам(Элементы, Команды, КоманднаяПанель,
																  МетаданныеОбъекта);
	ОформитьСписокДокументовПоСтатусам(Элементы.РаскраситьПоСтатусам.Пометка, Истина);	

КонецПроцедуры

// Процедура обновляет таблицу документов.
//
&НаСервере
Процедура ОбновитьТаблицу() Экспорт
	
	// Проверка возможности формирования.
	Отказ = НЕ ПериодЗаполненПравильно(ЭтотОбъект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;  
	
	//++ БП
	// Замер производительности.
	СтрРегистрация = Новый Структура;
    бит_ук_СлужебныйСервер.РегистрацияНачалоСобытияВФорме(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);
	// Замер производительности.
	//-- БП
	
	// Получим данные по настроенной СКД.
	ПараметрыПолучения = ПараметрыПолученияТаблицыДокументов();
	АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, Новый УникальныйИдентификатор); 
	Обработки.бит_РабочееМестоВизирования.ПолучитьТаблицуДокументов(ПараметрыПолучения, АдресВХранилище);
	ТаблицаДокументы = ПолучитьИзВременногоХранилища(АдресВХранилище);
	//++ БП
	ОбновитьТаблицуДокументовЗавершение(ТаблицаДокументы, СтрРегистрация);
	//-- БП
КонецПроцедуры

&НаСервере
Функция ПараметрыПолученияТаблицыДокументов()
		
	ПараметрыПолучения						= Обработки.бит_РабочееМестоВизирования.НовыеПараметрыПолученияТаблицыДокументов();
	ПараметрыПолучения.НастройкиКомпоновщика= Объект.Компоновщик.ПолучитьНастройки();
	ПараметрыПолучения.НачалоПериода		= Объект.НачалоПериода;
	ПараметрыПолучения.КонецПериода			= КонецДня(Объект.КонецПериода);
	Возврат ПараметрыПолучения;

КонецФункции

&НаСервере
//++ БП
Процедура ОбновитьТаблицуДокументовЗавершение(ТаблицаДокументы, СтрРегистрация) 
//-- БП
	Если ТаблицаДокументы.Колонки.Найти("Ссылка") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// При необходимости проведем анализ установленных виз и отфильтруем документы удовлетворяющие критериям.
	Если Объект.РежимФильтраВиз > 0 Тогда
		Обработки.бит_РабочееМестоВизирования.ВыполнитьФильтрациюТаблицыДокументов(ТаблицаДокументы
		, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
		, Объект.РежимФильтраВиз
		, Объект.КомментироватьВыполнение
		, Объект.Виза);
	КонецЕсли; 
	
	Элементы.ГруппаВизируемыеДокументы.Заголовок = СтрШаблон("Визируемые документы (%1)", ТаблицаДокументы.Количество());
	
	// Определим какие решения доступны для выбора.
	ТаблицаРешения = Обработки.бит_РабочееМестоВизирования.ПолучитьТаблицуДоступныхРешений(ТаблицаДокументы, ДоступныеРешения);
	
	// Если решение установлено, проверим доступно ли оно.
	Если ДоступныеРешения.НайтиПоЗначению(Объект.Решение) = Неопределено Тогда
		Объект.Решение = Справочники.бит_ВидыРешенийСогласования.ПустаяСсылка();
	КонецЕсли; 
	
	ЗагрузитьТаблицуДокументовВФорме(ТаблицаДокументы);
	ЗначениеВРеквизитФормы(ТаблицаРешения  , "ТабРешения");
	
	// Восстановим активную строку в таблице при необходимости.
	УстановитьТекущийДокумент();
	
	Если ТаблицаДокументы.Количество()=0 И ПанельАлгоритмВидимость Тогда
		ТабДокАлгоритм.Очистить();
		ГрафическаяСхема = Новый ГрафическаяСхема;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуДокументовВФорме(ТаблицаДокументы)
	
	ТабДокументы.Очистить();
	Для Каждого СтрокаТаблицыДокументы Из ТаблицаДокументы Цикл
		НоваяСтрока = ТабДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыДокументы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийДокумент()
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Ссылка", ТекущийДокумент);
		
		МассивСтрок = ТабДокументы.НайтиСтроки(СтрОтбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			ИД = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.ТабДокументы.ТекущаяСтрока = ИД;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзмененные(ТаблицаИзмененные)
	РежимФильтраВиз = Объект.РежимФильтраВиз;
	ВизаФильтр = Объект.Виза;
	
	// Фильтрация обновит визы в строках таблицы измененных документов.
	Если Объект.РежимФильтраВиз > 0 Тогда
			Обработки.бит_РабочееМестоВизирования.ЗаполнитьВизыВТаблицеДокументов(
			ТаблицаИзмененные,
			бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"),
			Объект.КомментироватьВыполнение,
			РежимФильтраВиз);
	КонецЕсли;
	
	Для Каждого СтрокаИзмененная Из ТаблицаИзмененные Цикл
		
		Отбор = Новый Структура("Ссылка", СтрокаИзмененная.Ссылка);
		СтрокиПоОтбору = ТабДокументы.НайтиСтроки(Отбор);
		Если СтрокиПоОтбору.Количество() > 0 Тогда
			СтрокаТаблицы = СтрокиПоОтбору[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если РежимФильтраВиз = 1 И НЕ СтрокаИзмененная.ЕстьНеустановленные
				ИЛИ РежимФильтраВиз = 2 И НЕ СтрокаИзмененная.ЕстьДоступные Тогда
			ТабДокументы.Удалить(СтрокаТаблицы);
		ИначеЕсли РежимФильтраВиз = 3 Тогда
			Если НЕ СтрокаИзмененная.ЕстьНеустановленныеДоступные Тогда
				ТабДокументы.Удалить(СтрокаТаблицы);
			Иначе
				Если ЗначениеЗаполнено(ВизаФильтр)
					И ТипЗнч(СтрокаИзмененная.ДоступныеНеустановленныеВизы) = Тип("СписокЗначений")
					И СтрокаИзмененная.ДоступныеНеустановленныеВизы.НайтиПоЗначению(ВизаФильтр) = Неопределено Тогда
					ТабДокументы.Удалить(СтрокаТаблицы);
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаИзмененная);
					СтрокаТаблицы.Выполнять = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаИзмененная);
			СтрокаТаблицы.Выполнять = Ложь;
		КонецЕсли; 
		
	КонецЦикла;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-24 (#3877)
	Элементы.ГруппаВизируемыеДокументы.Заголовок = СтрШаблон("Визируемые документы (%1)", ТабДокументы.Количество());
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-24 (#3877)
	
КонецПроцедуры

// Функция возвращает массив колонок таблицы документов не подлежащих настройке.
//
// Возвращаемое значение:
//   РезМассив   - Массив.
//
&НаСервере
Функция СформироватьМассивПостоянныхКолонок()

	РезМассив = Новый Массив;
	РезМассив.Добавить("ТабДокументыВыполнять");
	РезМассив.Добавить("ТабДокументыВычисляемые");	
	РезМассив.Добавить("ТабДокументыСлужебные");	
	РезМассив.Добавить("ТабДокументыЕстьНеустановленныеДоступные");
	РезМассив.Добавить("ТабДокументыЕстьДоступные");
	РезМассив.Добавить("ТабДокументыЕстьНеустановленные");
	РезМассив.Добавить("ТабДокументыДоступныеВизы");	
	РезМассив.Добавить("ТабДокументыПроведен");
	РезМассив.Добавить("ТабДокументыПометкаУдаления");
	РезМассив.Добавить("ТабДокументыДоступныеНеустановленныеВизы");
	Возврат РезМассив;
	
КонецФункции

// Функция возвращает массив колонок таблицы документов которые скрыты по-умолчанию.
//
// Возвращаемое значение:
//   РезМассив   - Массив.
//
&НаСервере
Функция СформироватьМассивСкрытыхКолонок()

	ИмяТабПоля = "ТабДокументы";
	РезМассив = Новый Массив;
	РезМассив.Добавить(ИмяТабПоля+"ДатаИзмененияСтатуса");
	РезМассив.Добавить(ИмяТабПоля+"НазначениеПлатежаУпр");
	РезМассив.Добавить(ИмяТабПоля+"ДатаПлатежаКрайняя");
	
	Возврат РезМассив;
	
КонецФункции

// Процедура инициализирует таблицу, используемую для хранения настроек списка документов.
//
&НаСервере
Процедура ИнициализироватьНастройкиТабДокументы()
	
	МассивПостоянных = СформироватьМассивПостоянныхКолонок();
	МассивСкрытых    = СформироватьМассивСкрытыхКолонок();
	
	// Настройки произвольных аналитик.
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	// Реквизиты формы.
	МассивРеквизитовТаблицы = ЭтаФорма.ПолучитьРеквизиты("ТабДокументы");
	
	КодСортировки = 1;
	Для Каждого РеквизитТаблицы Из МассивРеквизитовТаблицы Цикл
		
		Если РеквизитТаблицы.Имя = "ЕстьФайлы" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = РеквизитТаблицы.Путь+РеквизитТаблицы.Имя;
		
		Если МассивПостоянных.Найти(ИмяКолонки) = Неопределено Тогда
			
			НоваяСтрока = ТабДокументыНастройки.Добавить();
			НоваяСтрока.Имя           = ИмяКолонки;
			НоваяСтрока.ПутьКДанным   = РеквизитТаблицы.Путь+"."+РеквизитТаблицы.Имя;
			НоваяСтрока.Заголовок     = РеквизитТаблицы.Заголовок;
			НоваяСтрока.КодСортировки = КодСортировки;
			
			Если МассивСкрытых.Найти(ИмяКолонки) = Неопределено Тогда
				НоваяСтрока.Видимость     = Истина;
			Иначе	
				НоваяСтрока.Видимость     = Ложь;
			КонецЕсли; 
			
			Если Найти(РеквизитТаблицы.Имя,"Аналитика_")>0 Тогда
				
				// Для произвольных аналитик отдельные настройки.
				НастройкаИзмерения = НастройкиИзмерений[РеквизитТаблицы.Имя];
				
				Если НЕ НастройкаИзмерения = Неопределено Тогда
					НоваяСтрока.Заголовок = НастройкаИзмерения.Синоним;
			        НоваяСтрока.Видимость = Истина;					
				Иначе
					НоваяСтрока.Видимость = Ложь;
				КонецЕсли; 
				
			КонецЕсли; 
			
			КодСортировки = КодСортировки + 1;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура инициализирует список доступных для установки решений.
//
&НаСервере
Процедура ИнициализироватьДоступныеРешения()

	Выборка = Справочники.бит_ВидыРешенийСогласования.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДоступныеРешения.Добавить(Выборка.Ссылка);
	КонецЦикла; 

КонецПроцедуры

// Процедура устанавливает настройку либо из последних использованных, либо из настройки по умолчанию.
//
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	// Получим настройку по - умолчанию и последнюю использованну.
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбъектСистемы",Метаданные.Обработки.бит_РабочееМестоВизирования);
	СтруктураПараметров.Вставить("КлючЗначения", "ПоследниеЗначения");
	
	ПоследниеЗначения = РегистрыСведений.бит_СохраненныеЗначения.ПолучитьЗнч(фКэшЗначений.ТекущийПользователь, СтруктураПараметров);
	
	Если ТипЗнч(ПоследниеЗначения) = Тип("Структура") И ПоследниеЗначения.Свойство("Настройка") Тогда
		Настройка_Последняя = ПоследниеЗначения.Настройка;
	КонецЕсли; 

	// Установим настройку.
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда
	    ТекущаяНастройка = НастройкаПоУмолчанию;
	Иначе	
	    ТекущаяНастройка = Настройка_Последняя;
	КонецЕсли; 
	
	ПрименитьНастройки(ТекущаяНастройка);
	
КонецПроцедуры

// Процедура применяет настройки видимости/порядка колонок.
//
&НаСервере
Процедура ПрименитьНастройкиТаблицы()

	МассивПостоянных = СформироватьМассивПостоянныхКолонок();

	МассивЭлементов = Новый Массив;
	
	Для Каждого Элемент Из Элементы.ТабДокументы.ПодчиненныеЭлементы Цикл
		Если Элемент.Имя = "ТабДокументыЕстьФайлы" Тогда
			Продолжить;
		КонецЕсли; 
		МассивЭлементов.Добавить(Элемент);
	КонецЦикла; 

	КоличествоЭлементов = МассивЭлементов.Количество();
	Для н = 1 По КоличествоЭлементов Цикл
		инд = КоличествоЭлементов-н;
		Элемент  = МассивЭлементов[инд];
		
		Если НЕ МассивПостоянных.Найти(Элемент.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка
			Элементы.Удалить(Элемент);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось удалить %1'"), Элемент.Имя); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла; 
	
	Для Каждого СтрокаТаблицы Из ТабДокументыНастройки Цикл
		НоваяКолонка				= Элементы.Добавить(СтрокаТаблицы.Имя,Тип("ПолеФормы"),Элементы.ТабДокументы);
		НоваяКолонка.Вид			= ВидПоляФормы.ПолеВвода;
		НоваяКолонка.ПутьКДанным	= СтрокаТаблицы.ПутьКДанным;
		НоваяКолонка.ТолькоПросмотр	= Истина;
		НоваяКолонка.Заголовок		= СтрокаТаблицы.Заголовок;
		НоваяКолонка.Видимость		= СтрокаТаблицы.Видимость;
	КонецЦикла; 
	
	//ОКЕЙ Рычаков А.C. (СофтЛаб) Начало 2019-11-09 (#3524)
	МассивФлажков = Новый Массив;
	МассивФлажков.Добавить("ТабДокументыСверхБюджета");
	МассивФлажков.Добавить("ТабДокументыОк_ПересчетКурса");
	МассивФлажков.Добавить("ТабДокументыПриоритетОплаты");
	
	Для Каждого ТекЭлемент Из МассивФлажков Цикл
		НайденныйЭлемент = Элементы.ТабДокументы.ПодчиненныеЭлементы.Найти(ТекЭлемент); 
		Если НайденныйЭлемент <> Неопределено Тогда 
			НайденныйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;	
	КонецЦикла;	
	//ОКЕЙ Рычаков А.C. (СофтЛаб) Конец 2019-11-09 (#3524)
	
КонецПроцедуры

// Процедура выполняет установку решения по таблице документов.
//
&НаСервере
// +СБ. Широков Николай. 2014-09-29. ТЗ "Казначейство" 2.2.2.4. 
//Процедура УстановитьРешения()
Процедура УстановитьРешения(НоваяДатаРасхода = Неопределено)
// -СБ. Широков Николай

	// +СБ. Широков Николай. 2014-10-02. ТЗ "Казначейство" 2.2.2.8. 
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	// -СБ. Широков Николай

	ТаблицаДокументы = РеквизитФормыВЗначение("ТабДокументы");
	ТаблицаРешения = РеквизитФормыВЗначение("ТабРешения");
	
	СтрНастройки = Новый Структура;
	СтрНастройки.Вставить("РежимФильтраВиз"         , Объект.РежимФильтраВиз);
	СтрНастройки.Вставить("КомментироватьВыполнение", Объект.КомментироватьВыполнение);
	СтрНастройки.Вставить("Решение"                 , Объект.Решение);
	СтрНастройки.Вставить("Комментарий"             , Объект.Комментарий);
	
	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 21.10.2015 10:45:14
	//ТаблицаИзмененные = Обработки.бит_РабочееМестоВизирования.УстановитьРешенияПоТаблицеДокументов(ТаблицаДокументы, ТаблицаРешения, СтрНастройки);
	ТаблицаИзмененные = Обработки.бит_РабочееМестоВизирования.УстановитьРешенияПоТаблицеДокументов(ТаблицаДокументы, ТаблицаРешения, СтрНастройки, НоваяДатаРасхода);
	//-- СВВ}
	
	Если Объект.КомментироватьВыполнение Тогда
		ТекстСообщения = НСтр("ru = 'Обработка завершена.'"); 
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;
	
	Если ТаблицаИзмененные.Количество() > 0 Тогда
		ОбновитьИзмененные(ТаблицаИзмененные);
		УстановитьТекущийДокумент();
		// Сбросим комментарий после установки.
		Объект.Комментарий = "";
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает заголовок формы.
//
&НаСервере
Процедура УстановитьЗаголовокФормыСервер()

	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		ЗаголовокФормы = НСтр("ru = 'Рабочее место визирования (%1)'");
		ЗаголовокФормы = СтрШаблон(ЗаголовокФормы, ТекущаяНастройка);
	Иначе	
		ЗаголовокФормы = НСтр("ru = 'Рабочее место визирования'");
	КонецЕсли; 
	ЭтотОбъект.Заголовок = ЗаголовокФормы;

КонецПроцедуры

// Процедура обрабатывает изменение решения.
//
&НаСервере
Процедура ИзменениеРешения()

	УстановитьДекорациюРешение();

КонецПроцедуры

// Процедура устанавливает заголовок декорации, информирующей об очистке виз.
//
&НаСервере
Процедура УстановитьДекорациюРешение()

	Если ЗначениеЗаполнено(Объект.Решение) Тогда
		 Элементы.КомандаУстановитьРешение.Заголовок =  НСтр("ru = 'Установить решения'; en = 'Set decisions'");
	Иначе	
		 Элементы.КомандаУстановитьРешение.Заголовок =  НСтр("ru = 'Очистить решения'; en = 'Clear decisions'");
	КонецЕсли; 

КонецПроцедуры

// Процедура выполняет действия, необходимые при активизации строки таблицы документов.
// Обновляются таблицы панели "ТекущийДокумент".
//
&НаСервере
Процедура ДействияПриАктивизацииСтроки()

  Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
	  
	  флВыполнять = УстановитьВидимостьПанелиТекущегоДокумента(ЭтотОбъект);
					
		Если флВыполнять Тогда
			
			УстановитьОтборНаборВизы(ТекущийДокумент);
			УстановитьОтборНаборИсторияСтатусов(ТекущийДокумент);
			
			Элементы.НаборИсторияСтатусов.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
			
			УстановитьОтборНаборИсторияИзмененияВиз(ТекущийДокумент);
			Элементы.НаборИсторияИзмененияВиз.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("Объект",ТекущийДокумент);
			
			ТекНаборВизы = бит_Визирование.ПрочитатьНаборВиз(СтрОтбор);
			ТаблицаВизы = ТекНаборВизы.Выгрузить();
			
			ВизыПользователя = бит_Визирование.ПолучитьВизыПользователя(фКэшЗначений.ТекущийПользователь,ТекущийДокумент);
			
			ТаблицаВизы.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
			
			Для Каждого СтрокаТаблицы Из ТаблицаВизы Цикл
				СтрокаТаблицы.ДоступностьВизы = ВизыПользователя.НайтиПоЗначению(Справочники.бит_ГруппыВиз.ВсеВизы) <> Неопределено
												ИЛИ ВизыПользователя.НайтиПоЗначению(СтрокаТаблицы.Виза) <> Неопределено;
			КонецЦикла; 
			
			Алгоритм = бит_Визирование.ПолучитьАлгоритмПоНаборуВиз(ТаблицаВизы);
			
			локТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы);
			
			флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);		
			// Определяем, какие точки алгоритма доступны.
			бит_уп_Сервер.ОпределитьДоступностьТочек(локТаблицаТочкиВизы,флВыполнятьПоэтапно);
			
			локТаблицаТочкиВизы.ЗаполнитьЗначения(0,"Обработана");
			локТаблицаТочкиВизы.ЗаполнитьЗначения(0,"СвязиОбработаны");
			
			// Версия схемы = 2
			РеквизитыАлгоритма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Алгоритм, 
									"ВерсияСхемы, КартаМаршрута");
			
			Если РеквизитыАлгоритма.ВерсияСхемы = 2 Тогда
				ГрафическаяСхема = РеквизитыАлгоритма.КартаМаршрута.Получить();
				Для каждого СтрокаТаблицы Из локТаблицаТочкиВизы Цикл
					Если СтрокаТаблицы.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие Тогда
						ВыделитьЭлементСхемы(СтрокаТаблицы);
					КонецЕсли;
				КонецЦикла;
			Иначе
				бит_уп_Сервер.НарисоватьАлгоритмВизирования(ТабДокАлгоритм,Алгоритм,локТаблицаТочкиВизы);
			КонецЕсли;
			
			Элементы.ТДАлгоритм.Видимость  		= НЕ РеквизитыАлгоритма.ВерсияСхемы = 2;
			Элементы.ГрафическаяСхема.Видимость = РеквизитыАлгоритма.ВерсияСхемы = 2;
		КонецЕсли; 					
  КонецЕсли; 

  // +СБ. Широков Николай. 2014-10-01. ТЗ "Казначейство" 2.2.2.4.
  ЗаполнитьРеквизитыЗаявкиДляКорректировки();
  // -СБ. Широков Николай
  
КонецПроцедуры

&НаСервере
Процедура ВыделитьЭлементСхемы(ПараметрыТочки)
	
	Если ЗначениеЗаполнено(ПараметрыТочки.Решение) Тогда
		passageState = "1";
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыТочки.Решение) И ПараметрыТочки.Доступность Тогда
		passageState = "2";
	Иначе
		passageState = "0";
	КонецЕсли;
	
	бит_УправлениеПроцессамиКлиентСервер.ВыделитьЭлемент(ГрафическаяСхема, 
		ПараметрыТочки.ИдентификаторТочки, passageState);

КонецПроцедуры
	
// Процедура устанавливает отбор по текущему документу для набора виз.
//
// Параметры:
//  ТекущийОбъект  - ДокументСсылка.
//
&НаСервере
Процедура УстановитьОтборНаборВизы(ТекущийОбъект)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НаборВизы, "Объект", ТекущийОбъект, 
         ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ТекущийОбъект)); 

КонецПроцедуры

// Процедура устанавливает отбор по текущему документу для набора истории статусов.
//
// Параметры:
//  ТекущийОбъект  - ДокументСсылка.
//
&НаСервере
Процедура УстановитьОтборНаборИсторияСтатусов(ТекущийОбъект)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НаборИсторияСтатусов, "Объект", ТекущийОбъект, 
         ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ТекущийОбъект));
		 
КонецПроцедуры

// Процедура устанавливает отбор по текущему документу для набора истории изменения виз.
//
// Параметры:
//  ТекущийОбъект  - ДокументСсылка.
//
&НаСервере
Процедура УстановитьОтборНаборИсторияИзмененияВиз(ТекущийОбъект)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-06 (#3816)
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НаборИсторияИзмененияВиз, "Объект", ТекущийОбъект, 
	//     ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ТекущийОбъект));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НаборИсторияИзмененияВиз, "Объект", ТекущийОбъект, 
         ВидСравненияКомпоновкиДанных.Равно,, Истина);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-06 (#3816)
		 
КонецПроцедуры

// Процедура устанавливает видимость/доступность элементов формы.
//
&НаСервере
Процедура УстановитьВидимость()

	Элементы.ФормаКомандаВидимостьПанелиНастроек.Пометка= ПанельНастройкиВидимость;
	Элементы.ГруппаОтборы.Видимость						= ПанельНастройкиВидимость;
	ПанельТекущийДокументВидимость						= УстановитьВидимостьПанелиТекущегоДокумента(ЭтотОбъект);
	Элементы.ГруппаПраво.Видимость						= ПанельТекущийДокументВидимость;
	Элементы.ГруппаАлгоритм.Видимость					= ПанельАлгоритмВидимость;
	Элементы.НаборВизы.Видимость						= ПанельВизыВидимость;
	Элементы.НаборИсторияИзмененияВиз.Видимость			= ПанельИсторияВизыВидимость;
	Элементы.НаборИсторияСтатусов.Видимость				= ПанельИсторияСтатусовВидимость;
	Элементы.ТабДокументыДоступныеВизы.Видимость		= ?(Объект.РежимФильтраВиз > 1, Истина, Ложь);
	// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4. 
	Элементы.СБ_ГруппаКорректировкаДокументов.Видимость = ЭтаФорма["СБ_ПанельКорректировкаДокуменовВидимость"];
	// -СБ. Широков Николай
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьВидимостьПанелиТекущегоДокумента(ЭтотОбъект)
	
	Возврат ЭтотОбъект.ПанельАлгоритмВидимость 
	ИЛИ ЭтотОбъект.ПанельВизыВидимость 
	ИЛИ ЭтотОбъект.ПанельИсторияВизыВидимость 
	// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.
	ИЛИ ЭтотОбъект["СБ_ПанельКорректировкаДокуменовВидимость"] 
	// -СБ. Широков Николай
	ИЛИ ЭтотОбъект.ПанельИсторияСтатусовВидимость;

КонецФункции

// Процедура применяет изменения настроек видимости/порядка колонок таблицы документов.
//
&НаСервере
Процедура ПрименитьИзмененияНастроек(СтруктураПараметров)

  ТЗ = СтруктураПараметров.ТаблицаНастроек.Выгрузить();
  ТабДокументыНастройки.Загрузить(ТЗ);
  ПрименитьНастройкиТаблицы();
		
КонецПроцедуры

// Процедура применяет общие настройки к обрабоке.
//
// Параметры:
//  СтруктураПараметров  - Структура.
//
&НаСервере
Процедура ПрименитьОбщиеНастройки(СтруктураПараметров)
	
	Обработки.бит_РабочееМестоВизирования.ПрименитьНастройкиОбработки(Объект, СтруктураПараметров.НастройкиОбработки);
	
КонецПроцедуры

// Процедура обновляет оформление списка документов по статусам.
//
// Параметры:
//  ТолькоОчистить - Булево. 
//
&НаСервере
Процедура ОформитьСписокДокументовПоСтатусам(ПометкаКн,  ЭтоОткрытие = Ложь) Экспорт

	Если ЭтоОткрытие И Не ПометкаКн Тогда
		Возврат;	
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_РабочееМестоВизирования;
	
	Если ПометкаКн Тогда	
		// Только для обработки.
		МассивТипов = Метаданные.РегистрыСведений.бит_УстановленныеВизы.Измерения.Найти("Объект").Тип.Типы();
		// Обновление оформления.
		МасОбъектов = бит_РаботаСДиалогамиСервер.ПолучитьМассивОбъектов(МетаданныеОбъекта, МассивТипов);
	Иначе
		МасОбъектов = Новый Массив;
	КонецЕсли;

	бит_РаботаСДиалогамиСервер.ОформитьСписокДокументовПоСтатусам(МасОбъектов, ПометкаКн, ЭтотОбъект.УсловноеОформление, "ТабДокументы");
	
	Если Не ЭтоОткрытие Тогда
		// Сохранение значения пометки.
		РегистрыСведений.бит_СохраненныеЗначения.СохранитьЗнч(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																	,МетаданныеОбъекта
																	,"РаскраситьПоСтатусам_Пометка"
																	,ПометкаКн);
		Если ТабДокументы.Количество()>0 Тогда
			ОбновитьТаблицу();
		КонецЕсли; 															
	КонецЕсли;															

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ТекущаяНастройкаПериода(Форма)
	
	ТекущаяНастройкаПериода	= Неопределено;
	Объект			= Форма.Объект;
	Компоновщик		= Объект.Компоновщик;
	ПараметрПериод	= Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ТипЗнч(ПараметрПериод) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ТекущаяНастройкаПериода = Компоновщик.ПользовательскиеНастройки.Элементы.Найти(ПараметрПериод.ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
	Возврат ТекущаяНастройкаПериода;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПериодЗаполненПравильно(Форма)

	ЗаполненПравильно = Истина;
	
	Объект = Форма.Объект;
	Отказ  = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Начало периода'"));
		#Если Сервер Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", ,Отказ);
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", ,Отказ);			
		#КонецЕсли 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Конец периода'")); 
		#Если Сервер Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.КонецПериода", ,Отказ);
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.КонецПериода", ,Отказ);			
		#КонецЕсли 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НачалоПериода) И ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Если Объект.КонецПериода < Объект.НачалоПериода Тогда
			ТекстСообщения = НСтр("ru ='Период указан неверно. Дата начала больше даты окончания.'");
			#Если Сервер Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", ,Отказ);
			#Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.НачалоПериода", ,Отказ);			
			#КонецЕсли 
		КонецЕсли;
	КонецЕсли; 
	
	Если Отказ Тогда
		ЗаполненПравильно = Ложь;
	КонецЕсли;  
	
	Возврат ЗаполненПравильно; 

КонецФункции

// Процедура пересчитывает значения подвала. 
//
// Параметры:
//  ВыполнитьПересчет - булево.
//  СуммаДокумента - число.
//  ДокументСсылка - ДокументСсылка.бит_ПлатежнаяПозиция.
//
&НаКлиенте
Процедура ПересчитатьЗначенияВыделенныхДокументов(ВыполнитьПересчет, СуммаДокумента, ДокументСсылка)

	НайденноеЗнач = СписокДокументов.НайтиПоЗначению(ДокументСсылка);
	Если ВыполнитьПересчет
		И НайденноеЗнач <> Неопределено Тогда
	
		Возврат;
		
	ИначеЕсли НЕ ВыполнитьПересчет
		И НайденноеЗнач = Неопределено Тогда	
		
		Возврат;
		
	КонецЕсли; 
	
	Если ВыполнитьПересчет Тогда
	
		СуммыДокументовСписок.Добавить(СуммаДокумента);
		
	Иначе	
		
		ЭлементСписка = СуммыДокументовСписок.НайтиПоЗначению(СуммаДокумента);
		СуммыДокументовСписок.Удалить(ЭлементСписка);
		
	КонецЕсли; 
	
	Если ВыполнитьПересчет Тогда
	
		ВыделенныеДокументыКоличество = ВыделенныеДокументыКоличество + 1;
		ВыделенныеДокументыСумма = ВыделенныеДокументыСумма + СуммаДокумента;
		
	Иначе	

		ВыделенныеДокументыКоличество = ВыделенныеДокументыКоличество - 1;
		ВыделенныеДокументыСумма = ВыделенныеДокументыСумма - СуммаДокумента;
		
	КонецЕсли; 

	Если СуммыДокументовСписок.Количество()>0 Тогда
	
		СуммыДокументовСписок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		ВыделенныеДокументыМаксимум = Число(Строка(СуммыДокументовСписок[0]));
		
		СуммыДокументовСписок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		ВыделенныеДокументыМинимум = Число(Строка(СуммыДокументовСписок[0]));
		
	Иначе	
		ВыделенныеДокументыМаксимум = 0;
		ВыделенныеДокументыМинимум = 0;
	КонецЕсли; 
	
	Если ВыделенныеДокументыКоличество <> 0 Тогда
	
		ВыделенныеДокументыСреднее = ВыделенныеДокументыСумма/ВыделенныеДокументыКоличество;
		
	Иначе	
		ВыделенныеДокументыСреднее = 0;
	КонецЕсли; 
	
	Если ВыполнитьПересчет Тогда
	
		СписокДокументов.Добавить(ДокументСсылка);
		
	Иначе	
		ЭлементСписка = СписокДокументов.НайтиПоЗначению(ДокументСсылка);
		СписокДокументов.Удалить(ЭлементСписка);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура очищает значения выделенных документов. 
//
&НаКлиенте
Процедура ОчиститьЗначенияВыделенныхДокументов()

	ВыделенныеДокументыСумма      = 0;
	ВыделенныеДокументыКоличество = 0;
	ВыделенныеДокументыМаксимум   = 0;
	ВыделенныеДокументыМинимум    = 0;
	ВыделенныеДокументыСреднее    = 0;
	СуммыДокументовСписок         = Новый СписокЗначений;
	СписокДокументов              = Новый СписокЗначений;

КонецПроцедуры

// Функция готовит стуктуру с настройками для сохранения.
//
// Возвращаемое значение:
//   СтруктураНастройки   - Структура.
//
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтрТабДокументыНастройки = Новый Структура;
	Для Каждого СтрокаТаблицы Из ТабДокументыНастройки Цикл
		ТекСтр = Новый Структура;
		ТекСтр.Вставить("Имя",			СтрокаТаблицы.Имя);
		ТекСтр.Вставить("Заголовок",	СтрокаТаблицы.Заголовок);
		ТекСтр.Вставить("ПутьКДанным",	СтрокаТаблицы.ПутьКДанным);
		ТекСтр.Вставить("Видимость",	СтрокаТаблицы.Видимость);
		ТекСтр.Вставить("КодСортировки",СтрокаТаблицы.КодСортировки);
								  
        СтрТабДокументыНастройки.Вставить(СтрокаТаблицы.Имя,ТекСтр);								  
	КонецЦикла; 
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ТабДокументыНастройки",	СтрТабДокументыНастройки);
	СтруктураНастройки.Вставить("Решение",					Объект.Решение);
	СтруктураНастройки.Вставить("РежимФильтраВиз",			Объект.РежимФильтраВиз);
	СтруктураНастройки.Вставить("НастройкиКомпоновщика",	Объект.Компоновщик.ПользовательскиеНастройки);
	СтруктураНастройки.Вставить("КомментироватьВыполнение",	Объект.КомментироватьВыполнение);
	СтруктураНастройки.Вставить("Виза",						Объект.Виза);

	Возврат СтруктураНастройки;
	
КонецФункции

// Процедура применяет сохраненные настройки.
//
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
//
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			Для Каждого КиЗ Из СтруктураНастроек.ТабДокументыНастройки Цикл
				СтрНастроек = КиЗ.Значение;	
				СтрОтбор = Новый Структура;
				СтрОтбор.Вставить("Имя",СтрНастроек.Имя);
				МассивСтрок = ТабДокументыНастройки.НайтиСтроки(СтрОтбор);	
				
				Если МассивСтрок.Количество() > 0 Тогда
					СтрокаНастройка = МассивСтрок[0];  
					СтрокаНастройка.Видимость = ?(СтрНастроек.Видимость = "Да" 
													ИЛИ СтрНастроек.Видимость = "Yes" 
													ИЛИ СтрНастроек.Видимость = Истина, Истина, Ложь);
					
					СтрокаНастройка.КодСортировки = СтрНастроек.КодСортировки;
				КонецЕсли; 
			КонецЦикла; 
			
			ТабДокументыНастройки.Сортировать("КодСортировки");
			
			ПрименитьНастройкиТаблицы();
			
			Объект.Решение         = СтруктураНастроек.Решение;
			Объект.РежимФильтраВиз = СтруктураНастроек.РежимФильтраВиз;
			СтруктураНастроек.Свойство("Виза", Объект.Виза);
			
			Если СтруктураНастроек.Свойство("КомментироватьВыполнение") Тогда
				Объект.КомментироватьВыполнение = СтруктураНастроек.КомментироватьВыполнение;
			КонецЕсли; 
			
			Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ТекущаяНастройкаПериода = ТекущаяНастройкаПериода(ЭтотОбъект);
			Если ТекущаяНастройкаПериода <> Неопределено Тогда
				Период				= ТекущаяНастройкаПериода.Значение;
				Объект.НачалоПериода= Период.ДатаНачала;
				Объект.КонецПериода	= Период.ДатаОкончания;
			КонецЕсли;
			
			УстановитьДекорациюРешение();
			
		КонецЕсли;	 
		
	КонецЕсли; 
	
	УстановитьЗаголовокФормыСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОФормление()
	
	// НаборВизыИД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НаборВизыИД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НаборВизы.ИД", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// НаборВизыИД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НаборВизыИД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НаборВизы.ВизаВид", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыВиз.Утверждающая);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НаборВизы.ДобавленаВручную", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветОсобогоТекста);
	
	// НаборВизыИД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НаборВизыИД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НаборВизы.ВизаВид", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыВиз.Согласующая);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НаборВизы.ДобавленаВручную", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветГиперссылки);
	
	// НаборВизыИД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НаборВизыИД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НаборВизы.ВизаВид", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыВиз.Согласующая);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НаборВизы.ДобавленаВручную", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Зеленый);
	
	// НаборВизыИД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НаборВизыИД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НаборВизы.ВизаВид", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыВиз.Утверждающая);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НаборВизы.ДобавленаВручную", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.КрасноФиолетовый);
	
КонецПроцедуры
 
#КонецОбласти

&НаСервере
Функция ВернутьТекущуюДатуСеанса()
	Возврат ТекущаяДатаСеанса();
КонецФункции

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.	
&НаКлиенте
Процедура СБ_ПрофильРазноскиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СБ_КазначействоКлиент.СБ_ПрофильРазноски_НаФормеНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.	
&НаКлиенте
Процедура СБ_ПрофильРазноскиАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СБ_КазначействоКлиент.СБ_ПрофильРазноски_НаФормеАвтоПодборТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.	
&НаКлиенте
Процедура СБ_ПрофильРазноскиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	СБ_КазначействоКлиент.СБ_ПрофильРазноскиОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.	
&НаКлиенте 
Процедура СБ_БанковскийСчетКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", ЭтаФорма.СБ_Контрагент);
	//Отбор.Вставить("ВалютаДенежныхСредств", СтруктураПараметров.ВалютаДенежныхСредств);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ЭтаФорма.СБ_БанковскийСчетКонтрагент);
		
	ОткрытьФормуМодально("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.	
&НаКлиенте 
Процедура СБ_БанковскийСчетКонтрагентПриИзменении(Элемент)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СведенияОРасчетномСчетеКонтрагента(ЭтаФорма.СБ_БанковскийСчетКонтрагент));
	
//	ОбновитьТекстСведенийОРасчетномСчетеКонтрагента();
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-10-23. Заполнение профиля разноски из договора 
&НаКлиенте 
Процедура СБ_ДоговорКонтрагентаПриИзменении(Элемент)
	
	СБ_ДоговорКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры // -СБ. Широков Николай

&НаСервере
Процедура СБ_ДоговорКонтрагентаПриИзмененииНаСервере()
	
	СБ_ПрофильРазноски = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтаФорма.СБ_ДоговорКонтрагента, "СБ_ПрофильРазноски");
	
КонецПроцедуры
 
// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.	
&НаСервереБезКонтекста
Функция СведенияОРасчетномСчетеКонтрагента(БанковскийСчетКонтрагент)
	
	ДанныеСчета = Новый Структура("СБ_НомерСчета, СБ_БИК, СБ_КоррСчет");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	БанковскиеСчета.НомерСчета КАК СБ_НомерСчета,
	|	Банки.Код КАК СБ_БИК,
	|	Банки.КоррСчет КАК СБ_КоррСчет,
	|	Банки.Наименование КАК БанкНаименование,
	|	БанковскиеСчета.Банк КАК СБ_Банк
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", БанковскийСчетКонтрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеСчета;
	КонецЕсли; 	
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	
	//++ НАЧАЛО СофтЛаб 2018-08-23 3070
	ДанныеСчета.Вставить("СБ_НаименованиеКонтрагента");
	
	Если ЗначениеЗаполнено(БанковскийСчетКонтрагент.ТекстКорреспондента) Тогда
		
		ДанныеСчета.СБ_НаименованиеКонтрагента = БанковскийСчетКонтрагент.ТекстКорреспондента;
		
	Иначе
		
		ДанныеСчета.СБ_НаименованиеКонтрагента = УчетДенежныхСредствБП.НаименованиеПлательщикаПолучателяПоУмолчанию(
														БанковскийСчетКонтрагент.Владелец,
														БанковскийСчетКонтрагент,
														Ложь,
														ОбщегоНазначения.ТекущаяДатаПользователя());

	КонецЕсли;
	//-- КОНЕЦ  СофтЛаб 2018-08-23 3070
	
	Возврат ДанныеСчета;
	
КонецФункции // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.	
&НаКлиенте
Процедура ОбновитьТекстСведенийОРасчетномСчетеКонтрагента()

	Шаблон = 
	"р/с:  %1	 
	//|
	//|Банк: ""%2""
	|БИК: %4
	|к/с:  %3"; 
		
    ТекстСведений = СтрЗаменить(Шаблон, 		"%1", ЭтаФорма.СБ_НомерСчета);
	ТекстСведений = СтрЗаменить(ТекстСведений,  "%3", ЭтаФорма.СБ_КоррСчет);
	ТекстСведений = СтрЗаменить(ТекстСведений,	"%4", ЭтаФорма.СБ_БИК);
	
	//Элементы.СБ_ИнфРасчетныйСчетКонтрагента.Заголовок = ТекстСведений;
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.	
&НаКлиенте
Процедура УстановитьДоступностьРеквизитовКорректировки()

	ДоступноРедактирование 					= ЭтаФорма.СБ_ЗаявкаВСтатусеРабочий;
	ДоступноРедактированиеВсехРеквизитов 	= ДоступноРедактирование И ЭтаФорма.СБ_ДоступноРедактированиеВсехРеквизитов;
	ДоступноРедактированиеПрофиляРазноски 	= ДоступноРедактирование 
												И (ЭтаФорма.СБ_ДоступноРедактированиеПрофиляРазноски 
													ИЛИ ЭтаФорма.СБ_ДоступноРедактированиеВсехРеквизитов);
	ДоступноРедактированиеСтатьиОборотов 	= ДоступноРедактирование 
												И (ЭтаФорма.СБ_ДоступноРедактированиеСтатьиОборотов 
													ИЛИ ЭтаФорма.СБ_ДоступноРедактированиеВсехРеквизитов);
													
	ДоступноРедактированиеВсехРеквизитов	= ДоступноРедактированиеВсехРеквизитов
												ИЛИ ЭтаФорма.СБ_ЗаявкаВСтатусеЧерновик;	
	ДоступноРедактированиеПрофиляРазноски   = ДоступноРедактированиеПрофиляРазноски
												ИЛИ ЭтаФорма.СБ_ЗаявкаВСтатусеЧерновик;	
	ДоступноРедактированиеСтатьиОборотов	= ДоступноРедактированиеСтатьиОборотов
												ИЛИ ЭтаФорма.СБ_ЗаявкаВСтатусеЧерновик;	
	
	Элементы.СБ_Контрагент.ТолькоПросмотр				= НЕ ДоступноРедактированиеВсехРеквизитов;
	Элементы.СБ_ДоговорКонтрагента.ТолькоПросмотр		= НЕ ДоступноРедактированиеВсехРеквизитов;
	Элементы.СБ_БанковскийСчетКонтрагент.ТолькоПросмотр	= НЕ ДоступноРедактированиеВсехРеквизитов;
	Элементы.СБ_НазначениеПлатежа.ТолькоПросмотр		= НЕ ДоступноРедактированиеВсехРеквизитов;
	Элементы.СБ_ПрофильРазноски.ТолькоПросмотр			= НЕ ДоступноРедактированиеПрофиляРазноски;
	Элементы.СБ_СуммаДокумента.ТолькоПросмотр			= НЕ ДоступноРедактированиеВсехРеквизитов;
	Элементы.СБ_СрокИсполнения.ТолькоПросмотр			= НЕ ДоступноРедактированиеВсехРеквизитов;
	Элементы.СБ_СтатьяОборотов.ТолькоПросмотр			= НЕ ДоступноРедактированиеСтатьиОборотов;
	
	Элементы.СБ_КомандаПрименитьИзмененияДокументов.Доступность	= ДоступноРедактированиеВсехРеквизитов 
																	ИЛИ ДоступноРедактированиеПрофиляРазноски
																	ИЛИ ДоступноРедактированиеСтатьиОборотов;
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.	
&НаСервере
Процедура ЗаполнитьРеквизитыЗаявкиДляКорректировки()

	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеЗаявкиИзСтрокиТаблицы());
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4.	
&НаСервере
Функция ДанныеЗаявкиИзСтрокиТаблицы()

	ДанныеЗаявки = Новый Структура(
		"СБ_Организация,
		|СБ_Контрагент,
		|СБ_ДоговорКонтрагента,
		|СБ_ИНН,
		|СБ_КПП,
		|СБ_БанковскийСчетКонтрагент,
		|СБ_НомерСчета,
		|СБ_БИК,
		|СБ_КоррСчет,
		|СБ_ПрофильРазноски,
		|СБ_СтатьяОборотов,
		|СБ_СрокИсполнения,
		|СБ_СуммаДокумента,
		|СБ_Статус,
		|СБ_ЗаявкаВСтатусеРабочий,
		|СБ_ЗаявкаВСтатусеЧерновик,
		|СБ_ЗаявкаСсылка,
		|СБ_ПлатежнаяПозиция,
		|СБ_НазначениеПлатежа");
	
	//++ НАЧАЛО СофтЛаб 2018-08-23 3070
	ДанныеЗаявки.Вставить("СБ_НаименованиеКонтрагента");
	//-- КОНЕЦ  СофтЛаб 2018-08-23 3070
	
	ТекущаяСтрока  = Элементы.ТабДокументы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат ДанныеЗаявки;	
	КонецЕсли; 
	
	ДанныеСтроки = ТабДокументы.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат ДанныеЗаявки;	
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаявки, ДанныеСтроки);
		
		ДанныеЗаявки.СБ_Организация 		= ДанныеСтроки.Организация;
		ДанныеЗаявки.СБ_Контрагент 			= ДанныеСтроки.Контрагент;
		ДанныеЗаявки.СБ_ДоговорКонтрагента 	= ДанныеСтроки.ДоговорКонтрагента;
		ДанныеЗаявки.СБ_СуммаДокумента 		= ДанныеСтроки.СуммаДокумента;
		ДанныеЗаявки.СБ_Статус 				= ДанныеСтроки.Статус;
		ДанныеЗаявки.СБ_НазначениеПлатежа 	= ДанныеСтроки.НазначениеПлатежа;
		ДанныеЗаявки.СБ_ЗаявкаСсылка		= ДанныеСтроки.Ссылка;
		ДанныеЗаявки.СБ_СтатьяОборотов		= ДанныеСтроки.СтатьяОборотов;
		
		ДанныеЗаявки.СБ_ЗаявкаВСтатусеРабочий 	= (ДанныеЗаявки.СБ_Статус = Справочники.бит_СтатусыОбъектов.Заявка_Рабочая);
		ДанныеЗаявки.СБ_ЗаявкаВСтатусеЧерновик 	= (ДанныеЗаявки.СБ_Статус = Справочники.бит_СтатусыОбъектов.Заявка_Черновик);
		
		//++ НАЧАЛО СофтЛаб 2018-08-23 3070
		Если ЗначениеЗаполнено(ДанныеЗаявки.СБ_БанковскийСчетКонтрагент.ТекстКорреспондента) Тогда
			
			ДанныеЗаявки.СБ_НаименованиеКонтрагента = ДанныеЗаявки.СБ_БанковскийСчетКонтрагент.ТекстКорреспондента;
			
		Иначе
			
			ДанныеЗаявки.СБ_НаименованиеКонтрагента = УчетДенежныхСредствБП.НаименованиеПлательщикаПолучателяПоУмолчанию(
															ДанныеЗаявки.СБ_БанковскийСчетКонтрагент.Владелец,
															ДанныеЗаявки.СБ_БанковскийСчетКонтрагент,
															Ложь,
															ОбщегоНазначения.ТекущаяДатаПользователя());

		КонецЕсли;
		//-- КОНЕЦ  СофтЛаб 2018-08-23 3070
		
	КонецЕсли; 
	
	Возврат ДанныеЗаявки;

КонецФункции // -СБ. Широков Николай
 
// +СБ. Широков Николай. 2014-12-16. Доработка #1225
&НаКлиенте
Процедура ПодвестиИтогПоВыделенным()

	СБ_СуммаВыделенных 		= 0;
	СБ_КоличествоВыделенных = 0;
	
	Для каждого СтрокаДокумент Из ТабДокументы Цикл
	
		Если НЕ СтрокаДокумент.Выполнять Тогда
			Продолжить;
		КонецЕсли; 		
		
		СБ_СуммаВыделенных = СБ_СуммаВыделенных + СтрокаДокумент.СуммаДокумента;
		СБ_КоличествоВыделенных = СБ_КоличествоВыделенных + 1;
	
	КонецЦикла; 	

КонецПроцедуры // -СБ. Широков Николай 

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4. 
&НаСервереБезКонтекста
Процедура ИзменитьРеквизитыДокументов(ЗаявкаСсылка, ИзмененныеРеквизитыЗаявки, ПлатежнаяПозицияСсылка, ИзмененныеРеквизитыПлатежки)

	Если ЗначениеЗаполнено(ЗаявкаСсылка) И ИзмененныеРеквизитыЗаявки.Количество() > 0 Тогда
		ИзменитьРеквизитыЗаявки(ЗаявкаСсылка, ИзмененныеРеквизитыЗаявки);
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(ПлатежнаяПозицияСсылка) И ИзмененныеРеквизитыПлатежки.Количество() > 0 Тогда
		ИзменитьРеквизитыПлатежнойПозиции(ПлатежнаяПозицияСсылка, ИзмененныеРеквизитыПлатежки);
	КонецЕсли; 	

КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4. 
&НаСервереБезКонтекста
Процедура ИзменитьРеквизитыЗаявки(ЗаявкаСсылка, ИзмененныеРеквизитыЗаявки)
	
	ЗаявкаОбъект = ЗаявкаСсылка.ПолучитьОбъект();
	
	Для каждого ИзмененныйРеквизит Из ИзмененныеРеквизитыЗаявки Цикл
		
		Если ИзмененныйРеквизит.Ключ = "СБ_Контрагент" Тогда
			ЗаявкаОбъект.Контрагент = ИзмененныйРеквизит.Значение;
		ИначеЕсли ИзмененныйРеквизит.Ключ = "СБ_ДоговорКонтрагента" Тогда			
			ЗаявкаОбъект.ДоговорКонтрагента 		= ИзмененныйРеквизит.Значение;
		ИначеЕсли ИзмененныйРеквизит.Ключ = "СБ_ПрофильРазноски" Тогда			
			ЗаявкаОбъект.СБ_ПрофильРазноски = ИзмененныйРеквизит.Значение;
		ИначеЕсли ИзмененныйРеквизит.Ключ = "СБ_СрокИсполнения" Тогда			
			ЗаявкаОбъект.СБ_СрокИсполнения = ИзмененныйРеквизит.Значение;
		ИначеЕсли ИзмененныйРеквизит.Ключ = "СБ_СтатьяОборотов" Тогда			
			ЗаявкаОбъект.СтатьяОборотов = ИзмененныйРеквизит.Значение;
		ИначеЕсли ИзмененныйРеквизит.Ключ = "СБ_НазначениеПлатежа" Тогда			
			ЗаявкаОбъект.НазначениеПлатежа 		= ИзмененныйРеквизит.Значение;
			ЗаявкаОбъект.НазначениеПлатежаУпр 	= ИзмененныйРеквизит.Значение;
		ИначеЕсли ИзмененныйРеквизит.Ключ = "СБ_СуммаДокумента" Тогда			
			ЗаявкаОбъект.Сумма = ИзмененныйРеквизит.Значение;
			ЗаявкаОбъект.РассчитатьСуммуНДС(ЗаявкаОбъект);
		КонецЕсли; 
		
	КонецЦикла; 
	
	мРежимЗаписи = ?(ЗаявкаОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
	ЗаявкаОбъект.Записать(мРежимЗаписи)

КонецПроцедуры // -СБ. Широков Николай 

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4. 
&НаСервереБезКонтекста
Процедура ИзменитьРеквизитыПлатежнойПозиции(ДокументСсылка, ИзмененныеРеквизиты)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	Для каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл
		
		СтрокаРаспределение = ДокументОбъект.Распределение[0];
		
		Если ИзмененныйРеквизит.Ключ = "СБ_Контрагент" Тогда
			ДокументОбъект.Контрагент = ИзмененныйРеквизит.Значение;
		ИначеЕсли ИзмененныйРеквизит.Ключ = "СБ_БанковскийСчетКонтрагент" Тогда			
			ДокументОбъект.БанковскийСчетКонтрагент 		= ИзмененныйРеквизит.Значение;
		ИначеЕсли ИзмененныйРеквизит.Ключ = "СБ_НазначениеПлатежа" Тогда			
			ДокументОбъект.НазначениеПлатежа 		= ИзмененныйРеквизит.Значение;
		ИначеЕсли ИзмененныйРеквизит.Ключ = "СБ_СуммаДокумента" Тогда			
			
			СтрокаРаспределение.Сумма = ИзмененныйРеквизит.Значение;
			ДокументОбъект.РассчитатьСуммуНДС(СтрокаРаспределение);
			
			ДокументОбъект.Сумма 	= СтрокаРаспределение.Сумма;
			ДокументОбъект.НДС		= СтрокаРаспределение.НДС;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	мРежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
	ДокументОбъект.Записать(мРежимЗаписи)

КонецПроцедуры // -СБ. Широков Николай 

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4. 
&НаКлиенте
Функция ПроверитьИзмененияРеквизитовЗаявки(ДанныеСтроки)

	РеквизитыЗаявки = Новый Массив;
	РеквизитыЗаявки.Добавить("СБ_Контрагент");
	РеквизитыЗаявки.Добавить("СБ_ДоговорКонтрагента");
	РеквизитыЗаявки.Добавить("СБ_ПрофильРазноски");
	РеквизитыЗаявки.Добавить("СБ_СрокИсполнения");
	РеквизитыЗаявки.Добавить("СБ_СуммаДокумента");
	РеквизитыЗаявки.Добавить("СБ_НазначениеПлатежа");
	РеквизитыЗаявки.Добавить("СБ_СтатьяОборотов");
	
	ИзмененныеРеквизиты = Новый Структура;
	
	Для каждого ИмяПроверяемогоРеквизита Из РеквизитыЗаявки Цикл
		Если ДанныеСтроки[ИмяПроверяемогоРеквизита] <> ЭтаФорма[ИмяПроверяемогоРеквизита] Тогда
			ИзмененныеРеквизиты.Вставить(ИмяПроверяемогоРеквизита, ЭтаФорма[ИмяПроверяемогоРеквизита]);
		КонецЕсли; 
	КонецЦикла; 

	Возврат ИзмененныеРеквизиты
	
КонецФункции // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4. 
&НаКлиенте
Функция ПроверитьИзмененияРеквизитовПлатежнойПозиции(ДанныеСтроки)

	РеквизитыПлатежнойПозиции = Новый Массив;
	РеквизитыПлатежнойПозиции.Добавить("СБ_Контрагент");	
	РеквизитыПлатежнойПозиции.Добавить("СБ_БанковскийСчетКонтрагент");	
	РеквизитыПлатежнойПозиции.Добавить("СБ_СуммаДокумента");	
	РеквизитыПлатежнойПозиции.Добавить("СБ_НазначениеПлатежа");	
	
	ИзмененныеРеквизиты = Новый Структура;
	
	Для каждого ИмяПроверяемогоРеквизита Из РеквизитыПлатежнойПозиции Цикл
		Если ДанныеСтроки[ИмяПроверяемогоРеквизита] <> ЭтаФорма[ИмяПроверяемогоРеквизита] Тогда
			ИзмененныеРеквизиты.Вставить(ИмяПроверяемогоРеквизита, ЭтаФорма[ИмяПроверяемогоРеквизита]);
		КонецЕсли; 
	КонецЦикла; 

	Возврат ИзмененныеРеквизиты
	
КонецФункции // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4. 
&НаКлиенте
Процедура СБ_КомандаКорректироватьДокументВидимость(Команда)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-09-29 (#3488)
	Элементы.СБ_КомандаКорректироватьДокументВидимость.Пометка = Ложь;
	КомандаКорректировать(Команда);
	Возврат;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-09-29 (#3488)
	
	СБ_ПанельКорректировкаДокуменовВидимость = НЕ СБ_ПанельКорректировкаДокуменовВидимость;
	Элементы.СБ_КомандаКорректироватьДокументВидимость.Пометка = СБ_ПанельКорректировкаДокуменовВидимость;
	
	УстановитьВидимость();
	УстановитьДоступностьРеквизитовКорректировки();
	
КонецПроцедуры // -СБ. Широков Николай 

// +СБ. Широков Николай. 2014-09-30. ТЗ "Казначейство" 2.2.2.4. 
&НаКлиенте
Процедура СБ_КомандаПрименитьИзмененияДокументов(Команда)
		
	ДанныеСтроки = ДанныеЗаявкиИзСтрокиТаблицы();
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.СБ_ЗаявкаСсылка) Тогда
		Возврат;	
	КонецЕсли; 
		
	ИзмененныеРеквизитыЗаявки 	= ПроверитьИзмененияРеквизитовЗаявки(ДанныеСтроки);
	ИзмененныеРеквизитыПлатежки = ПроверитьИзмененияРеквизитовПлатежнойПозиции(ДанныеСтроки);
	
	Если ИзмененныеРеквизитыЗаявки.Количество() = 0 
		И ИзмененныеРеквизитыПлатежки.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 	
	
	ИзменитьРеквизитыДокументов(ДанныеСтроки.СБ_ЗаявкаСсылка
		, ИзмененныеРеквизитыЗаявки	
		, ДанныеСтроки.СБ_ПлатежнаяПозиция
		, ИзмененныеРеквизитыПлатежки
		);
		
	//Обновим значения в строке
	ТекущаяСтрока  = Элементы.ТабДокументы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ДанныеСтроки = ТабДокументы.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЭтаФорма);	
	
	ДанныеСтроки.Контрагент 		= ЭтаФорма.СБ_Контрагент;
	ДанныеСтроки.ДоговорКонтрагента = ЭтаФорма.СБ_ДоговорКонтрагента;
	ДанныеСтроки.СуммаДокумента 	= ЭтаФорма.СБ_СуммаДокумента;
	ДанныеСтроки.НазначениеПлатежа 	= ЭтаФорма.СБ_НазначениеПлатежа;
	ДанныеСтроки.СтатьяОборотов 	= ЭтаФорма.СБ_СтатьяОборотов;
	
	ДанныеСтроки.СБ_Контрагент_НаименованиеПолное 	= СБ_КомандаПрименитьИзмененияДокументовНаСервере(ДанныеСтроки.Контрагент);
		
КонецПроцедуры // -СБ. Широков Николай 

&НаСервере
Функция СБ_КомандаПрименитьИзмененияДокументовНаСервере(Контрагент)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "НаименованиеПолное");	
КонецФункции

//ОКЕЙ Рычаков А.C. (СофтЛаб) Начало 2019-11-09 (#3524)
&НаКлиенте
Процедура ЗакрытьЗаявки(Команда)
	
	МассивЗаявок = ТабДокументы.НайтиСтроки(Новый Структура("Выполнять", Истина));
	мЗаявки = Новый Массив;
	Для каждого Заявка Из МассивЗаявок Цикл
		мЗаявки.Добавить(Заявка.Ссылка);
	КонецЦикла;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-02-16 (#3657)
	//ПараметрыОтбора = Новый Структура("ЗаявкиНаРС, ДатаНачала, ДатаОкончания",мЗаявки, Объект.НачалоПериода, Объект.КонецПериода);
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ЗаявкиНаРС",		мЗаявки);
	ПараметрыОтбора.Вставить("ДатаНачала", 		Объект.НачалоПериода);
	ПараметрыОтбора.Вставить("ДатаОкончания", 	Объект.КонецПериода);
	ПараметрыОтбора.Вставить("РежимЗаписи", 	"Проведение");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-02-16 (#3657)
	ОткрытьФорму("Обработка.бит_ЗакрытиеДокументовПланирования.Форма.Форма", ПараметрыОтбора);
	
КонецПроцедуры
//ОКЕЙ Рычаков А.C. (СофтЛаб) Конец 2019-11-09 (#3524)