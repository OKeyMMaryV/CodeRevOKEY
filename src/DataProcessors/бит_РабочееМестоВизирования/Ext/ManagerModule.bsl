#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция инициализирует настройки компоновщика данных.
//
// Параметры:
//  Компоновщик				 - КомпоновщикНастроекКомпоновкиДанных	 - Компоновщик с настройками пользователя.
//  УникальныйИдентификатор	 - УникальныйИдентификатор				 - Уникальный идентификатора для записи во временное хранилище.
// 
// Возвращаемое значение:
//  Строка - Адрес СКД во временном хранилище.
//
Функция ИнициализироватьКомпоновщик(Компоновщик, УникальныйИдентификатор) Экспорт

	СхемаКомпоновкиДанных = Обработки.бит_РабочееМестоВизирования.ПолучитьМакет("СхемаКомпоновкиДанных");
	ТипыДокументов = ТипыДокументов();
	ОтборДокументовПоРолям(ТипыДокументов, СхемаКомпоновкиДанных);
	бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СхемаКомпоновкиДанных, 
					"НаборДанных2", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));

	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
    Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат АдресСКД;
	
КонецФункции

// Процедура получает при помощи СКД таблицу документов для дальнейшей фильтрации
//  и кладет ее по адресу временного хранилища.
//
// Параметры:
//  ПараметрыПолучения	 - Структура - см. НовыеПараметрыПолученияТаблицыДокументов().
//  АдресВХранилище		 - Строка	 - Адрес временного хранилища полученной таблицы документов.
//
Процедура ПолучитьТаблицуДокументов(ПараметрыПолучения, АдресВХранилище = "") Экспорт

	Настройки	= ПараметрыПолучения.НастройкиКомпоновщика;
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	// Получим данные по настроенной СКД.
	СКД = Обработки.бит_РабочееМестоВизирования.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	ПараметрПериод = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ПараметрыПолучения.НачалоПериода = '0001-01-01' Тогда
		НачалоПериода = ПараметрПериод.Значение.ДатаНачала;
	Иначе	
		НачалоПериода = ПараметрыПолучения.НачалоПериода;
	КонецЕсли;
	
	Если ПараметрыПолучения.КонецПериода = '0001-01-01' Тогда
		КонецПериода = ПараметрПериод.Значение.ДатаОкончания;
	Иначе	
		КонецПериода = КонецДня(ПараметрыПолучения.КонецПериода);
	КонецЕсли;
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", Новый СтандартныйПериод(НачалоПериода, КонецПериода));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Если роль ограничена добавим отбор по доступным документам.
	УстановитьОтборПоДокументам(Компоновщик, СКД);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД,
												  Настройки,
												  ,
												  ,
												  Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
												  
												  
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаДокументы);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Колонки для работы с визами.
	ТаблицаДокументы.Колонки.Добавить("ДоступныеНеустановленныеВизы", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаДокументы.Колонки.Добавить("ДоступныеНеустановленныеВизыПредставление", Новый ОписаниеТипов("Строка"));
	
	ПоместитьВоВременноеХранилище(ТаблицаДокументы, АдресВХранилище);
	
КонецПроцедуры

// Функция - Конструктор параметра функции ПолучитьТаблицуДокументов.
// 
// Возвращаемое значение:
//  Структура - параметры получения табличных документов:
//   * НастройкиКомпоновщика  - НастройкиКомпоновкиДанных  - пользовательские настройки компоновщика данных для СКД.
//   * НачалоПериода -Дата - Дата начала поиска документов.
//   * КонецПериода - Дата - Дата конца поиска документов.
//
Функция НовыеПараметрыПолученияТаблицыДокументов() Экспорт
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("НастройкиКомпоновщика",Новый НастройкиКомпоновкиДанных);
	ПараметрыПолучения.Вставить("НачалоПериода",		'0001-01-01');
	ПараметрыПолучения.Вставить("КонецПериода",			'0001-01-01');
	Возврат ПараметрыПолучения;
	
КонецФункции

// Функция получает визы всех выбранных документов. Таблица используется при анализе виз документов.
//
// Параметры:
//  МассивДокументов - Массив - Массив документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица виз документов.
//
Функция ПолучитьОбщуюТаблицуВиз(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивДокументов",МассивДокументов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_УстановленныеВизы.Объект,
	               |	бит_УстановленныеВизы.Виза,
	               |	бит_УстановленныеВизы.ИД,
	               |	бит_УстановленныеВизы.Пользователь,
	               |	бит_УстановленныеВизы.ФизическоеЛицо,
	               |	бит_УстановленныеВизы.ДобавленаВручную,
	               |	бит_УстановленныеВизы.ДатаУстановки,
	               |	бит_УстановленныеВизы.КодСортировки,
	               |	бит_УстановленныеВизы.Должность,
	               |	бит_УстановленныеВизы.Комментарий,
	               |	бит_УстановленныеВизы.Статус,
	               |	бит_УстановленныеВизы.Решение,
	               |	бит_УстановленныеВизы.Маршрут,
	               |	бит_УстановленныеВизы.Алгоритм,
	               |	бит_УстановленныеВизы.ТочкаАлгоритма,
	               |	бит_УстановленныеВизы.ДатаКрайняя,
	               |	бит_УстановленныеВизы.ВремяНаУстановку
	               |ИЗ
	               |	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	               |ГДЕ
	               |	бит_УстановленныеВизы.Объект В(&МассивДокументов)";
				   
				   
    Результат = Запрос.Выполнить();
				   
	ТаблицаВизыОбщая = Результат.Выгрузить();			   
	ТаблицаВизыОбщая.Индексы.Добавить("Объект");

	Возврат ТаблицаВизыОбщая;
	
КонецФункции

// Процедура устанавливает решения по таблице документов.
//
// Параметры:
//  ТаблицаДокументы - 	ТаблицаЗначений -  Таблица документов визирования.
//  ТабРешения		 - ТаблицаЗначений	 - ТаблицаЗначений.
//  СтрНастроек		 - 	Структура - Структура настроек.
// 
// Возвращаемое значение:
//   Булево - Решение по таблице документов.
//
Функция УстановитьРешения(ТаблицаДокументы, ТабРешения,  СтрНастроек)  Экспорт

	ТекущийПользователь  = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	ВизыРезультатОбщий   = бит_Визирование.ВыполнитьЗапросДляПолученияВизПользователя(ТекущийПользователь);
	
	ТаблицаВизыОбщая = ПолучитьОбщуюТаблицуВиз(ТаблицаДокументы.ВыгрузитьКолонку("Ссылка"));
	
	ТекНаборВизы = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	ТаблицаВизыПустая = ТекНаборВизы.Выгрузить();
	
	КэшТаблицТочек = Новый Соответствие;
	
	флНеобходимоОбновить = Ложь;
	Для Каждого СтрокаТаблицы Из ТаблицаДокументы Цикл
	
		Если СтрокаТаблицы.Выполнять Тогда
			
			Комментарий = "";
			СтрНастроек.Свойство("Комментарий", Комментарий);
			
			Если Комментарий = Неопределено Тогда
				Комментарий = СтрокаТаблицы.Комментарий;
			КонецЕсли;
			
			ПараметрыРешения = НовыеПараметрыРешения();
			ПараметрыРешения.Режим 						= "Установка";
			ПараметрыРешения.РежимФильтраВиз			= СтрНастроек.РежимФильтраВиз;
			ПараметрыРешения.ТекущийПользователь		= ТекущийПользователь;
			ПараметрыРешения.КомментироватьВыполнение	= СтрНастроек.КомментироватьВыполнение;
			ПараметрыРешения.Решение					= СтрНастроек.Решение;
			ПараметрыРешения.Комментарий				= Комментарий;
	
			флДействиеВыполнено = ОбработатьСтрокуТаблицыДокументов(СтрокаТаблицы,ТаблицаВизыОбщая,
										ТаблицаВизыПустая,ВизыРезультатОбщий,КэшТаблицТочек,ТабРешения,ПараметрыРешения);

			Если флДействиеВыполнено Тогда
				Если СтрНастроек.КомментироватьВыполнение Тогда
					ТекстСообщения =СтрШаблон(НСтр("ru = 'Обработан документ ""%1"" ...'"), СтрокаТаблицы.Ссылка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
				КонецЕсли; 
			 	флНеобходимоОбновить = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 	
	
	Возврат флНеобходимоОбновить;
	
КонецФункции

// Функция устанавливает визы по таблице документов.
//
// Параметры:
//  ТаблицаДокументы - ТаблицаЗначений -  Таблица документов визирования.
//  ТабРешения - ТаблицаЗначений - Таблица возможных решений.
//  СтруктураНастроек - Структура - Структура настроек.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица документов, у которых изменилась виза.
//
//Функция УстановитьРешенияПоТаблицеДокументов(ТаблицаДокументы, ТабРешения, СтруктураНастроек) Экспорт
Функция УстановитьРешенияПоТаблицеДокументов(ТаблицаДокументы, ТабРешения, СтруктураНастроек, НоваяДатаРасхода = Неопределено)  Экспорт
//-- СВВ}
	
	ТекущийПользователь  = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	ВизыРезультатОбщий   = бит_Визирование.ВыполнитьЗапросДляПолученияВизПользователя(ТекущийПользователь);
	
	ТаблицаВизыОбщая = ПолучитьОбщуюТаблицуВиз(ТаблицаДокументы.ВыгрузитьКолонку("Ссылка"));
	
	ТекНаборВизы = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	ТаблицаВизыПустая = ТекНаборВизы.Выгрузить();
	
	КэшТаблицТочек = Новый Соответствие();
	ИзмененныеСтроки = Новый Массив();
	
	флНеобходимоОбновить = Ложь;
	Для Каждого СтрокаТаблицы Из ТаблицаДокументы Цикл
	
		Если СтрокаТаблицы.Выполнять Тогда
			
			Комментарий = "";
			СтруктураНастроек.Свойство("Комментарий", Комментарий);
			
			Если Комментарий = Неопределено Тогда
				Комментарий = СтрокаТаблицы.Комментарий;
			КонецЕсли;
			
			ПараметрыРешения = НовыеПараметрыРешения();
			ПараметрыРешения.Режим 						= "Установка";
			ПараметрыРешения.РежимФильтраВиз			= СтруктураНастроек.РежимФильтраВиз;
			ПараметрыРешения.ТекущийПользователь		= ТекущийПользователь;
			ПараметрыРешения.КомментироватьВыполнение	= СтруктураНастроек.КомментироватьВыполнение;
			ПараметрыРешения.Решение					= СтруктураНастроек.Решение;
			ПараметрыРешения.Комментарий				= Комментарий;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-17 (#3488)
			ПараметрыРешения.НоваяДатаРасхода			= НоваяДатаРасхода;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-17 (#3488)
	
			флДействиеВыполнено = ОбработатьСтрокуТаблицыДокументов(СтрокаТаблицы,ТаблицаВизыОбщая,ТаблицаВизыПустая,
										ВизыРезультатОбщий,КэшТаблицТочек,ТабРешения,ПараметрыРешения);

             Если флДействиеВыполнено Тогда
				 // +СБ. Широков Николай. 2014-09-29. ТЗ "Казначейство" 2.2.2.4.
				 ПлатежнаяПозицияСсылка = СтрокаТаблицы.СБ_ПлатежнаяПозиция;
				 
				 Если НоваяДатаРасхода <> Неопределено
					 И ЗначениеЗаполнено(ПлатежнаяПозицияСсылка) Тогда
					 
					 ПлатежнаяПозицияОбъект = ПлатежнаяПозицияСсылка.ПолучитьОбъект();
					 ПлатежнаяПозицияОбъект.ДатаРасхода = НоваяДатаРасхода;
					 
					 ПлатежнаяПозицияОбъект.СБ_ПользовательИзменилДатуРасхода = ТекущийПользователь;
					 ПлатежнаяПозицияОбъект.ДополнительныеСвойства.Вставить("НеОсуществлятьПроверкуИзмененияДатыРасходы");
					 
					 мРежимЗаписи = ?(ПлатежнаяПозицияОбъект.Проведен
						 , РежимЗаписиДокумента.Проведение
						 , РежимЗаписиДокумента.Запись
						 );
					 
					 ПлатежнаяПозицияОбъект.Записать(мРежимЗаписи);
					 
				 КонецЕсли;
				 // -СБ. Широков Николай
				 Если СтруктураНастроек.КомментироватьВыполнение Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Обработан документ ""%1"" ...'"), СтрокаТаблицы.Ссылка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
				 КонецЕсли; 
			 	ИзмененныеСтроки.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаИзмененные = ТаблицаДокументы.Скопировать(ИзмененныеСтроки);
	
	// Сбрасываем режимы доступности виз.
	Для Каждого СтрокаТаблицыИзмененные Из ТаблицаИзмененные Цикл
		СтрокаТаблицыИзмененные.ЕстьДоступные = Ложь;
		СтрокаТаблицыИзмененные.ЕстьНеустановленные = Ложь;
		СтрокаТаблицыИзмененные.ЕстьНеустановленныеДоступные = Ложь;
	КонецЦикла;
	
	Возврат ТаблицаИзмененные;
	
КонецФункции

// Функция формирует таблицу доступности решений в зависимости от типа документа и организации.
//
// Параметры:
//  ТаблицаДокументы - ТаблицаЗначений	 - Таблица документов.
//  ДоступныеРешения - СписокЗначений	 - Список доступных решений.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица решений по документам.
//
Функция ПолучитьТаблицуДоступныхРешений(ТаблицаДокументы, ДоступныеРешения) Экспорт
	
	ДоступныеРешения.Очистить();	

	ТаблицаРешения = ТаблицаДокументы.Скопировать();
	ТаблицаРешения.Свернуть("Организация,ТипДокумента");
	
	ТаблицаРешения.Колонки.Добавить("ОбъектСистемы");
	ТаблицаРешения.Колонки.Добавить("ДоступныеРешения");

	Для Каждого СтрокаТаблицы Из ТаблицаРешения Цикл
		//++ БП
		СтрокаТаблицы.ОбъектСистемы = бит_УправлениеОбъектамиСистемы.НайтиОбъектДоступаПоТипу(СтрокаТаблицы.ТипДокумента
		                                                                                      ,Перечисления.бит_ВидыОбъектовСистемы.Документ);
		//-- БП
		СтруктураПараметров = Новый Структура("Организация,ОбъектСистемы",СтрокаТаблицы.Организация,СтрокаТаблицы.ОбъектСистемы);
		СтрокаТаблицы.ДоступныеРешения = бит_Визирование.ПолучитьСписокВозможныхРешений(СтруктураПараметров);
		
		Для Каждого Элемент Из СтрокаТаблицы.ДоступныеРешения Цикл
			Если ДоступныеРешения.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
				ДоступныеРешения.Добавить(Элемент.Значение,Элемент.Представление);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 

	Возврат ТаблицаРешения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура анализирует алгоритмы визирования и 
// права пользователя на визы и исходя из этого удаляет из ТаблицыДокументов лишние строки. 
//
// Параметры:
//  ТаблицаДокументы - ТаблицаЗначений.
//  ТекущийПользователь - СправочникСсылка.Пользователи.
//  РежимФильтраВиз - Число  - (0 - Все; 1 - Неустановленные; 2 - Доступные; 3 - ДоступныеНеустановленные).
//  КомментироватьВыполнение - Булево.
//  ВизаФильтр - СправочникСсылка.Визы.
// 
Процедура ВыполнитьФильтрациюТаблицыДокументов(ТаблицаДокументы, ТекущийПользователь, РежимФильтраВиз, КомментироватьВыполнение, ВизаФильтр = Неопределено) Экспорт

    ВизыРезультатОбщий = бит_Визирование.ВыполнитьЗапросДляПолученияВизПользователя(ТекущийПользователь);

	ТаблицаВизыОбщая = ПолучитьОбщуюТаблицуВиз(ТаблицаДокументы.ВыгрузитьКолонку("Ссылка"));
	
	ТекНаборВизы = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	ТаблицаВизыПустая = ТекНаборВизы.Выгрузить();
	
	КэшТаблицТочек = Новый Соответствие;
	
	КоличествоСтрок = ТаблицаДокументы.Количество();
	
	Для н = 1 По КоличествоСтрок Цикл
		
		инд = КоличествоСтрок-н;
		СтрокаТаблицы = ТаблицаДокументы[инд];
		
		// Проверим права просмотра данного документа.
		Если НЕ ПравоДоступа("Просмотр",СтрокаТаблицы.Ссылка.Метаданные()) Тогда
			ТаблицаДокументы.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		
		ПараметрыРешения = НовыеПараметрыРешения();
		ПараметрыРешения.Режим 						= "Анализ";
		ПараметрыРешения.РежимФильтраВиз			= РежимФильтраВиз;
		ПараметрыРешения.ТекущийПользователь		= ТекущийПользователь;
		ПараметрыРешения.КомментироватьВыполнение	= КомментироватьВыполнение;
		
		ОбработатьСтрокуТаблицыДокументов(СтрокаТаблицы,ТаблицаВизыОбщая,ТаблицаВизыПустая,ВизыРезультатОбщий,
			КэшТаблицТочек,Неопределено,ПараметрыРешения);
											  
		// Выполним фильтрацию.			
		Если РежимФильтраВиз = 1 И СтрокаТаблицы.ЕстьНеустановленные = Ложь Тогда
			ТаблицаДокументы.Удалить(СтрокаТаблицы);
		ИначеЕсли РежимФильтраВиз = 2 И СтрокаТаблицы.ЕстьДоступные = Ложь Тогда
			ТаблицаДокументы.Удалить(СтрокаТаблицы);				
		ИначеЕсли РежимФильтраВиз = 3 Тогда
			Если СтрокаТаблицы.ЕстьНеустановленныеДоступные = Ложь Тогда
				ТаблицаДокументы.Удалить(СтрокаТаблицы);
			Иначе
				Если ЗначениеЗаполнено(ВизаФильтр) 
					 И ТипЗнч(СтрокаТаблицы.ДоступныеНеустановленныеВизы) = Тип("СписокЗначений") 
					 И СтрокаТаблицы.ДоступныеНеустановленныеВизы.НайтиПоЗначению(ВизаФильтр) = Неопределено Тогда
					 
					 // Фильтрация по "своей" визе.
				     ТаблицаДокументы.Удалить(СтрокаТаблицы);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

// Процедура устанавливает доступные визы, соответствующие объектам, в строках таблицы
//
// Параметры:
//  ТаблицаДокументы - ТаблицаЗначений.
//  ТекущийПользователь - СправочникСсылка.Пользователи.
//  КомментироватьВыполнение - Булево.
// 
Процедура ЗаполнитьВизыВТаблицеДокументов(ТаблицаДокументы, ТекущийПользователь, КомментироватьВыполнение, РежимФильтраВиз) Экспорт

    ВизыРезультатОбщий = бит_Визирование.ВыполнитьЗапросДляПолученияВизПользователя(ТекущийПользователь);

	ТаблицаВизыОбщая = ПолучитьОбщуюТаблицуВиз(ТаблицаДокументы.ВыгрузитьКолонку("Ссылка"));
	
	ТекНаборВизы = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	ТаблицаВизыПустая = ТекНаборВизы.Выгрузить();
	
	КэшТаблицТочек = Новый Соответствие;
	
	КоличествоСтрок = ТаблицаДокументы.Количество();
	
	Для н = 1 По КоличествоСтрок Цикл
		
		инд = КоличествоСтрок-н;
		СтрокаТаблицы = ТаблицаДокументы[инд];
		
		// Проверим права просмотра данного документа.
		Если НЕ ПравоДоступа("Просмотр",СтрокаТаблицы.Ссылка.Метаданные()) Тогда
			ТаблицаДокументы.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли; 
		
		ПараметрыРешения = НовыеПараметрыРешения();
		ПараметрыРешения.Режим 						= "Анализ";
		ПараметрыРешения.РежимФильтраВиз			= РежимФильтраВиз;
		ПараметрыРешения.ТекущийПользователь		= ТекущийПользователь;
		ПараметрыРешения.КомментироватьВыполнение	= КомментироватьВыполнение;
		
		ОбработатьСтрокуТаблицыДокументов(СтрокаТаблицы,ТаблицаВизыОбщая,ТаблицаВизыПустая,ВизыРезультатОбщий,
			КэшТаблицТочек, Неопределено, ПараметрыРешения);
	КонецЦикла; 

КонецПроцедуры

// Фукнция получает текущие заначения реквизитов обработки для передачи в/из формы настройки
//
// Парметры:
// 	Объект - ОбработкаОбъект.
Функция ТекущиеНастройкиОбработки(Объект) Экспорт
	
	НастройкиОбработки = Новый Структура;
	НастройкиОбработки.Вставить("Компоновщик",              Объект.Компоновщик);
	НастройкиОбработки.Вставить("Решение",                  Объект.Решение);
	НастройкиОбработки.Вставить("РежимФильтраВиз",          Объект.РежимФильтраВиз);
	НастройкиОбработки.Вставить("КомментироватьВыполнение", Объект.КомментироватьВыполнение);
	НастройкиОбработки.Вставить("НачалоПериода",            Объект.НачалоПериода);
	НастройкиОбработки.Вставить("КонецПериода",             Объект.КонецПериода);
	
	Возврат НастройкиОбработки;
	
КонецФункции

// Фукнция прменяет значения полученных настройек к реквизитам обработки
//
// Парметры:
// 	Объект - ОбработкаОбъект.
// 	НастройкиОбработки - Структура.
Процедура ПрименитьНастройкиОбработки(Объект, НастройкиОбработки) Экспорт
	
	Объект.Компоновщик              = НастройкиОбработки.Компоновщик;
	Объект.Решение                  = НастройкиОбработки.Решение;
	Объект.РежимФильтраВиз          = НастройкиОбработки.РежимФильтраВиз;
	Объект.КомментироватьВыполнение = НастройкиОбработки.КомментироватьВыполнение;
	Объект.НачалоПериода            = НастройкиОбработки.НачалоПериода;
	Объект.КонецПериода             = НастройкиОбработки.КонецПериода;
	
	Объект.Компоновщик.ЗагрузитьПользовательскиеНастройки(НастройкиОбработки.Компоновщик.ПользовательскиеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает отбор фиксированной настройки только по доступным документам визирования.
//
//
Процедура УстановитьОтборПоДокументам(Компоновщик, СКД)
	
	ТипыДокументов = ТипыДокументов();
	ОтборДокументовПоРолям(ТипыДокументов, СКД);
	ОтборДокументовПоНастройкеПользователя(ТипыДокументов, СКД, Компоновщик);
	
КонецПроцедуры

Функция ТипыДокументов()
	
	ТипыДокументов = Новый Соответствие;
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств"),		"Заявки");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_РеестрПлатежей"),					"РеестрыПлатежей");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_ФормаВводаБюджета"),				"ФормыВвода");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_АктуализацияБюджета"),				"АктуализацииБюджета");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_КорректировкаБюджета"),				"КорректировкиБюджета");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая"),	"ЗаявкиОбщие");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору"),	"ДополнительныеУсловияПоДоговору");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_ВерсияОтчета"),						"ВерсияОтчета");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты"),					"ЗаявкиНаЗатраты");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_ПроектДоговора"),					"ПроектДоговора");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_КорректировкаКонтрольныхЗначений"),	"КорректировкаКонтрольныхЗначений");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_мто_ЗаявкаНаПотребность"),			"ЗаявкаНаПотребность");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_мто_ЗаявкаНаЗакупку"),				"ЗаявкаНаЗакупку");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_БюджетнаяОперация"),				"БюджетнаяОперация");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_ПротоколРасхожденийБюджета"),		"ПротоколРасхожденийБюджета");
	ТипыДокументов.Вставить(Тип("ДокументСсылка.бит_мдм_ЗаявкаНаИзменение"),			"ЗаявкиНаИзменениеНСИ");
	
	Возврат ТипыДокументов;
	
КонецФункции

Процедура ОтборДокументовПоРолям(ТипыДокументов, СКД)
	
	НедоступныеДокументы = Новый Массив();
	Для каждого КлючЗначение Из ТипыДокументов Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(КлючЗначение.Ключ);
		Если НЕ ПравоДоступа("Просмотр", ОбъектМетаданных) Тогда
			НедоступныеДокументы.Добавить(КлючЗначение.Ключ);	
			УдалитьНабор(СКД, КлючЗначение.Значение);
		КонецЕсли;  
	КонецЦикла;
	
	Если СКД.НаборыДанных.НаборДанных2.Элементы.Количество() = 0 Тогда
		ВызватьИсключение Нстр("ru = 'Нет доступных видов документов.'");
	КонецЕсли; 
	
	Для каждого Элемент Из НедоступныеДокументы Цикл
		ТипыДокументов.Удалить(Элемент);
	КонецЦикла;

КонецПроцедуры

Процедура ОтборДокументовПоНастройкеПользователя(ТипыДокументов, СКД, Компоновщик)
	
	ОтборДокументов	= ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
	Компоновщик.Настройки.Отбор,"ТипДокумента");
	
	Если ОтборДокументов.Количество() > 0 И ОтборДокументов[0].Использование Тогда
		ЗначениеОтбора = ОтборДокументов[0].ПравоеЗначение;
		Условие		   = ОтборДокументов[0].ВидСравнения;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеОтбора) Тогда
			ВызватьИсключение Нстр("ru = 'Список документов не сформирован.
										|Нельзя использовать пустой отбор по типам документов.'");
		КонецЕсли; 
		
		Если Условие = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Если ЗначениеОтбора.НайтиПоЗначению(Неопределено) <> Неопределено Тогда
				ВызватьИсключение Нстр("ru = 'Список документов не сформирован.
											|Нельзя использовать пустые значения в отбор по типам документов.'");
			КонецЕсли;
			Для каждого Элт Из ТипыДокументов Цикл
				Если ЗначениеОтбора.НайтиПоЗначению(Элт.Ключ) = Неопределено Тогда
					УдалитьНабор(СКД, Элт.Значение); 
				КонецЕсли;
			КонецЦикла; 
		ИначеЕсли Условие = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТипыДокументов.Удалить(ЗначениеОтбора);
			Для каждого Элт Из ТипыДокументов Цикл
				УдалитьНабор(СКД, Элт.Значение); 
			КонецЦикла; 
		ИначеЕсли Условие = ВидСравненияКомпоновкиДанных.НеВСписке Тогда	
			Если ЗначениеОтбора.НайтиПоЗначению(Неопределено) <> Неопределено Тогда
				ВызватьИсключение Нстр("ru = 'Список документов не сформирован.
											|Нельзя использовать пустые значения в отбор по типам документов.'");
			КонецЕсли;
			Для каждого Элт Из ТипыДокументов Цикл
				Если ЗначениеОтбора.НайтиПоЗначению(Элт.Ключ) <> Неопределено Тогда
					УдалитьНабор(СКД, Элт.Значение); 
				КонецЕсли;
			КонецЦикла; 
		ИначеЕсли Условие = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			УдалитьНабор(СКД, ТипыДокументов[ЗначениеОтбора]); 
		КонецЕсли;
		
		Если СКД.НаборыДанных.НаборДанных2.Элементы.Количество() = 0 Тогда
			ВызватьИсключение Нстр("ru = 'Нет доступных видов документов.'");
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьНабор(СКД, ИмяНабора)
	
	НаборДанных = СКД.НаборыДанных.НаборДанных2.Элементы.Найти(ИмяНабора);
	Если НЕ НаборДанных = Неопределено Тогда
		СКД.НаборыДанных.НаборДанных2.Элементы.Удалить(НаборДанных);
	КонецЕсли; 
	
КонецПроцедуры

// Функция формирует таблицу виз для документа исходя из общей таблицы виз.
// 
// Параметры:
//  ТаблицаВизы       - ТаблицаЗначений.
//  ДокументСсылка    - ДокументСсылка.
//  ТаблицаВизыОбщая  - ТаблицаЗначений.
//  ВизыПользователя  - СписокЗначений.
// 
// Возвращаемое значение:
//   флЕстьНеустановленные   - Булево.
// 
Функция ЗаполнитьТаблицуВиз(ТаблицаВизы,ДокументСсылка,ТаблицаВизыОбщая,ВизыПользователя) Экспорт

	флЕстьНеустановленные = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Объект",ДокументСсылка);
	
	МассивСтрок = ТаблицаВизыОбщая.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		НоваяСтрока = ТаблицаВизы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
	КонецЦикла; 

	ТаблицаВизы.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаВизы Цикл
		
		СтрокаТаблицы.ДоступностьВизы = (ВизыПользователя.НайтиПоЗначению(Справочники.бит_ГруппыВиз.ВсеВизы) <> Неопределено)
										ИЛИ (ВизыПользователя.НайтиПоЗначению(СтрокаТаблицы.Виза) <> Неопределено);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение) Тогда
			флЕстьНеустановленные = Истина;
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат флЕстьНеустановленные;
	
КонецФункции

// Функция проверяет возможность установки решения для данного документа.
// 
// Параметры:
//  СтрокаДокументы  - СтрокаТаблицыЗначений.
// 
// Возвращаемое значение:
//   флРазрешеноУстанавливать   - Булево.
// 
Функция ПроверитьВозможностьУстановкиРешения(СтрокаДокументы, ТабРешения, Решение, КомментироватьВыполнение)
	
	
	Если ЗначениеЗаполнено(Решение) И ТипЗнч(ТабРешения) = Тип("ТаблицаЗначений") Тогда
		
		флРазрешеноУстанавливать = Ложь;
		
		СтрОтбор = Новый Структура;
		
		МетаОбъект    = СтрокаДокументы.Ссылка.Метаданные();
		ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
		
		СтрОтбор.Вставить("ОбъектСистемы",ОбъектСистемы);
		Если ЗначениеЗаполнено(СтрокаДокументы.Организация) Тогда
			СтрОтбор.Вставить("Организация",СтрокаДокументы.Организация);
		Иначе	
			СтрОтбор.Вставить("Организация",Справочники.Организации.ПустаяСсылка());
		КонецЕсли; 
		
		МассивСтрок = ТабРешения.НайтиСтроки(СтрОтбор);
		
		Если МассивСтрок.Количество()>0 Тогда
			
			СписокРешений = МассивСтрок[0].ДоступныеРешения;
			
			Если НЕ СписокРешений.НайтиПоЗначению(Решение) = Неопределено Тогда
				
				флРазрешеноУстанавливать = Истина;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если КомментироватьВыполнение И НЕ флРазрешеноУстанавливать Тогда
			
			ТекстСообщения = НСтр("ru = 'Решение ""%1%"" не может быть установлено для документа ""%2%""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																						,Строка(Решение)
																						,Строка(СтрокаДокументы.Ссылка));
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
		
	Иначе	
		
		флРазрешеноУстанавливать = Истина;
		
	КонецЕсли; 
	
	Возврат флРазрешеноУстанавливать;
	
КонецФункции

// Процедура по строке таблицы документов выполняет анализ 
// установленных виз или установку доступных виз в зависимости от режима.
//
// Параметры:
//  СтрокаДокументы   - СтрокаТабличнойЧасти.
//  ТаблицаВизыОбщая  - ТаблицаЗначений.
//  ТаблицаВизыПустая - ТаблицаЗначений.
//  ВизыРезультатОбщий- РезультатЗапроса.
//  КэшТаблицыТочек   - Соответствие.
//  Режим			  - Строка.
//
Функция ОбработатьСтрокуТаблицыДокументов(СтрокаДокументы, ТаблицаВизыОбщая, 
			ТаблицаВизыПустая, ВизыРезультатОбщий, КэшТаблицТочек, ТабРешения, СтрПар) 

	Режим               = СтрПар.Режим;
	РежимФильтраВиз     = СтрПар.РежимФильтраВиз;
	Решение             = СтрПар.Решение;
	Комментарий         = СтрПар.Комментарий;
	ТекущийПользователь = СтрПар.ТекущийПользователь;
	КомментироватьВыполнение = СтрПар.КомментироватьВыполнение;
											  
	флДействиеВыполнено = Ложь;										  
	ВизыПользователя = бит_Визирование.ПолучитьВизыПользователя(ТекущийПользователь, СтрокаДокументы.Ссылка, ВизыРезультатОбщий);
																 
	ТаблицаВизы = ТаблицаВизыПустая.Скопировать();
	СтрокаДокументы.ЕстьНеустановленные = ЗаполнитьТаблицуВиз(ТаблицаВизы, СтрокаДокументы.Ссылка, ТаблицаВизыОбщая, ВизыПользователя);															 
	
	Если РежимФильтраВиз >1 ИЛИ Режим = "Установка" Тогда
		
		Алгоритм = бит_Визирование.ПолучитьАлгоритмПоНаборуВиз(ТаблицаВизы);
		ТаблицаТочек = КэшТаблицТочек[Алгоритм];
		Если ТаблицаТочек = Неопределено Тогда
			ТаблицаТочек = бит_уп_Сервер.ПолучитьТочкиАлгоритма(Алгоритм);
			КэшТаблицТочек.Вставить(Алгоритм,ТаблицаТочек);
		КонецЕсли; 
		
		локТаблицаТочкиВизы = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы,ТаблицаТочек,,,Истина);// -- NB Ложь
	    флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);				
		// Определяем, какие точки алгоритма доступны.
		бит_уп_Сервер.ОпределитьДоступностьТочек(локТаблицаТочкиВизы,флВыполнятьПоэтапно);
		
		// Отберем строки таблицы с доступными визами.
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Доступность",Истина);
		
		МассивСтрок = локТаблицаТочкиВизы.НайтиСтроки(СтрОтбор);
		
		Если Режим = "Анализ" Тогда
			
			// В режиме анали заполним в строке таблицы документов флаги для последующей фильтрации.
			Если МассивСтрок.Количество() > 0 Тогда
				СтрокаДокументы.ЕстьДоступные = Истина;
			КонецЕсли; 
			
			СтрокаДокументы.ДоступныеНеустановленныеВизы.Очистить();
			СтрокаДокументы.ДоступныеНеустановленныеВизыПредставление = "";
			Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение) Тогда
					СтрокаДокументы.ЕстьНеустановленныеДоступные = Истина;
					СтрокаДокументы.ДоступныеНеустановленныеВизы.Добавить(СтрокаТаблицы.Виза);
					СтрокаДокументы.ДоступныеНеустановленныеВизыПредставление = СтрокаДокументы.ДоступныеНеустановленныеВизыПредставление 
						+ ?(ПустаяСтрока(СтрокаДокументы.ДоступныеНеустановленныеВизыПредставление),"",",")
						+ СтрокаТаблицы.Виза;
				КонецЕсли; 
			КонецЦикла; 
			
		ИначеЕсли Режим = "Установка" Тогда	
			
			// В режиме установки выполним установку/очистку виз.
			МассивДоступныеПустые = Новый Массив;
			МассивДоступныеЗаполненные = Новый Массив;
			
			Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
				Если СтрокаТаблицы.Доступность Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы.Решение) Тогда
						МассивДоступныеЗаполненные.Добавить(СтрокаТаблицы.ИД);
					Иначе	
						МассивДоступныеПустые.Добавить(СтрокаТаблицы.ИД);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("Объект",СтрокаДокументы.Ссылка);
			
			ТекНаборВизы = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
			
			флРазрешеноУстанавливать = ПроверитьВозможностьУстановкиРешения(СтрокаДокументы, ТабРешения, Решение, КомментироватьВыполнение);
			
			флЕстьИзменения = Ложь;
			Для Каждого ЗаписьВизы Из ТекНаборВизы Цикл
				Если ЗначениеЗаполнено(Решение) Тогда
					Если НЕ МассивДоступныеПустые.Найти(ЗаписьВизы.ИД) = Неопределено Тогда
						Если флРазрешеноУстанавливать Тогда
							флЕстьИзменения = Истина;
							ЗаписьВизы.Решение       = Решение;
							ЗаписьВизы.Пользователь  = ТекущийПользователь;
							ЗаписьВизы.ДатаУстановки = ТекущаяДата();
							ЗаписьВизы.Комментарий   = Комментарий;
						КонецЕсли; 
					КонецЕсли; 
				Иначе	
					Если НЕ МассивДоступныеЗаполненные.Найти(ЗаписьВизы.ИД) = Неопределено Тогда
						флЕстьИзменения = Истина;
						ЗаписьВизы.Решение       = Справочники.бит_ВидыРешенийСогласования.ПустаяСсылка();
						ЗаписьВизы.Пользователь  = Справочники.Пользователи.ПустаяСсылка();
						ЗаписьВизы.ДатаУстановки = Дата('00010101');
						ЗаписьВизы.Комментарий   = Комментарий;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			Если флЕстьИзменения Тогда
				
				ДокОбъект = СтрокаДокументы.Ссылка.ПолучитьОбъект();
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-17 (#3488)
				Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредств")
					И ТипЗнч(СтрПар) = Тип("Структура")
					И СтрПар.Свойство("НоваяДатаРасхода") И СтрПар.НоваяДатаРасхода <> Неопределено Тогда
					ДокОбъект.ДатаРасхода = СтрПар.НоваяДатаРасхода;
					//ДокОбъект.ОбменДанными.Загрузка = Истина;
					мРежимЗаписи = ?(ДокОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);
					ДокОбъект.Записать(мРежимЗаписи);
				КонецЕсли; 
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-17 (#3488)
				МетаОбъект = ДокОбъект.Метаданные();
	            флПроводитьПослеУтверждения = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения");
				
				бит_Визирование.ДовыполнитьАлгоритмВизирования(СтрокаДокументы.Ссылка,ТекНаборВизы,Ложь);
				бит_Визирование.УстановитьКрайниеДатыВизирования(СтрокаДокументы.Ссылка,ТекНаборВизы,Ложь);
				
				Если ТекНаборВизы.ПроверитьЗаполнение() Тогда
					Попытка
						ТекНаборВизы.Записать();
						флДействиеВыполнено = Истина;
					Исключение
						ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка записи виз.'") + ОписаниеОшибки()); 
					КонецПопытки;
					
					ДокОбъект.УстановитьСтатус();
					бит_Визирование.ПровестиВСтатусеУтверждено(ДокОбъект, МетаОбъект, флПроводитьПослеУтверждения, "Ошибки");
				КонецЕсли;
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат флДействиеВыполнено;
	
КонецФункции

Функция НовыеПараметрыРешения()

	ПараметрыРешения = Новый Структура;
	ПараметрыРешения.Вставить("Режим", 						"");
	ПараметрыРешения.Вставить("РежимФильтраВиз",			Неопределено);
	ПараметрыРешения.Вставить("ТекущийПользователь",		Неопределено);
	ПараметрыРешения.Вставить("КомментироватьВыполнение",	Ложь);
	ПараметрыРешения.Вставить("Решение",					Неопределено);
	ПараметрыРешения.Вставить("Комментарий",				"");
	ПараметрыРешения.Вставить("НоваяДатаРасхода",			Неопределено);
	
	Возврат ПараметрыРешения;
	
КонецФункции
 
#КонецОбласти

#КонецЕсли
