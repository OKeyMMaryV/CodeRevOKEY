
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ДокументСсылка"		  , Объект.ДокументСсылка);
	Параметры.Свойство("ОткрытиеИзФормыСписка", ОткрытиеИзФормыСписка);
	
	Если Объект.ДокументСсылка = Неопределено Тогда
		фОтказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Видимость организации в БР.бит_Бюджетирование.
	Элементы.бит_БюджетированиеОрганизация.Видимость = бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация();
    
    // Видимость статьи оборотов в БР.бит_Бюджетирование.
    Если ТипЗнч(Объект.ДокументСсылка) = Тип("ДокументСсылка.бит_ПереоценкаВалютныхДенежныхСтатей") Тогда
        Элементы.бит_БюджетированиеСтатьяОборотов.Видимость = Ложь; 
        Элементы.Группабит_БюджетированиеЦфоСтатья.Заголовок = "ЦФО";
    КонецЕсли;
    	
	ОтрисоватьРезультатПроведенияСервер();
	УстановитьУсловноеОформлениеДоп2();
	
	Элементы.РучнаяКорректировка.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРучнуюКорректировкуДвижений");
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ОтрисоватьРезультатПроведенияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ мКэшЗначений.ЗакрытиеФормы Тогда
		
		Отказ = Истина;
		//ТекстСпредупржения = НСтр("ru = 'Результат проведения'"); 
		ТекстВопроса 	   = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ЗаголовокВопроса   = НСтр("ru = 'Результат проведения'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение
						,ТекстВопроса
						,РежимДиалогаВопрос.ДаНетОтмена
						,30
						,КодВозвратаДиалога.Да
						,ЗаголовокВопроса); 
						
		мКэшЗначений.ЗакрытиеФормы = Ложь;				
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ВопросПередЗакрытиемЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьИзмененияКлиент(Истина);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		мКэшЗначений.ЗакрытиеФормы = Истина;
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
                
КонецПроцедуры // ВопросПередЗакрытиемЗавершение()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поле флажка "РучнаяКорректировка".
// 
&НаКлиенте
Процедура РучнаяКорректировкаПриИзменении(Элемент)
	
	РучнаяКорректировкаПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДвижения

// Процедура - обработчик события "ПередНачаломДобавления" 
// табличной поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ 		= Истина;
	ИмяРегистра = Элемент.Имя;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Имя", ИмяРегистра);
	
	СтрокаСведений = ПолучитьСтрокуТаблицыРегистрыПоИмениГруппы(Объект.Регистры, ИмяРегистра);
	
	Если СтрокаСведений.РеквизитФормы Тогда
		Контейнер = ЭтаФорма;
	Иначе
		Контейнер = Объект;
	КонецЕсли;
	
	ДокументСсылка 			 = Объект.ДокументСсылка;
	АктивностьНовогоДвижения = ПолучитьАктивностьНовогоДвижения(ДокументСсылка);
	
	// Заполним дату и организацию для новой строки.
	НоваяСтрока = Контейнер[ИмяРегистра].Добавить();
	НоваяСтрока.Регистратор = ДокументСсылка;
	Если НЕ СтрокаСведений.ТипРегистра = "РегистрСведений" Тогда
		НоваяСтрока.Активность	= АктивностьНовогоДвижения;
	КонецЕсли;
	Если НоваяСтрока.Свойство("Период") Тогда
		НоваяСтрока.Период = Объект.Дата;
	КонецЕсли;
	
	Если ИмяРегистра = "бит_Бюджетирование" Тогда
		Если НоваяСтрока.Свойство("Сценарий") Тогда
			НоваяСтрока.Сценарий = Объект.Сценарий;
		КонецЕсли;
	Иначе
		Если НоваяСтрока.Свойство("Организация") Тогда
			НоваяСтрока.Организация = Объект.Организация;
		КонецЕсли;
	КонецЕсли;
	
	ЗафиксироватьИзменениеДвиженийРегистра(ИмяРегистра);
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" 
// табличной поля "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеПередНачаломИзменения(Элемент, Отказ)

	// Запрещаем редактировать спец-проводки механизма контроля закрытого периода.
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидПроводки) Тогда
	
		 Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры // ТабличноеПолеПередНачаломИзменения()

// Процедура - обработчик события "ПриОкончанииРедактирования" 
// табличной поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗафиксироватьИзменениеДвиженийРегистра(Элемент.Имя);
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" 
// табличной поля "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеПередУдалением(Элемент, Отказ)
	
	// Запрещаем редактировать спец-проводки механизма контроля закрытого периода.
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидПроводки) Тогда
		
		 ТекстСообщения =  НСтр("ru = 'Проводки закрытого периода удалять запрещено!'");
		 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		 Отказ = Истина;
	
	 КонецЕсли; 
	 
КонецПроцедуры // ТабличноеПолеПередУдалением()

// Процедура - обработчик события "ПослеУдаления" 
// табличной поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеПослеУдаления(Элемент)
	
	ЗафиксироватьИзменениеДвиженийРегистра(Элемент.Имя);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Период"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеПериодПриИзменении(Элемент)
	
	ИмяРегистра   = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	ТекущаяСтрока = Элементы[ИмяРегистра].ТекущиеДанные;
	Идентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВалютаДт) Тогда
		
		// Выполним расчет сумм в текущей строке.
		ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
										 ,ТекущаяСтрока.ВалютаДт
										 ,ТекущаяСтрока.ВалютнаяСуммаДт
										 ,
										 ,ИмяРегистра);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВалютаКт) Тогда
		
		// Выполним расчет сумм в текущей строке.
		ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
										 ,ТекущаяСтрока.ВалютаКт
										 ,ТекущаяСтрока.ВалютнаяСуммаКт
										 ,
										 ,ИмяРегистра
										 ,Истина);
		
	Иначе
		
		Если ИмяРегистра = "бит_Бюджетирование" Тогда
			
			// Выполним расчет сумм в текущей строке.
			ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
											 ,
											 ,ТекущаяСтрока.СуммаСценарий
											 ,"ИзменениеСуммыСценарий"
											 ,"бит_Бюджетирование");
			
			// Выполним расчет валютных сумм в текущей строке.
			ВыполнитьРасчетВалютныхСуммВТекущейСтроке(Идентификатор
													 ,
													 ,ТекущаяСтрока.СуммаСценарий
													 ,"бит_Бюджетирование");
			
		ИначеЕсли ИмяРегистра = "бит_Дополнительный_2" Тогда
			
			// Выполним расчет сумм в текущей строке.
			ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
											 ,мКэшЗначений.ВалютаМСФО
											 ,ТекущаяСтрока.СуммаМУ
											 ,"ИзменениеМУСуммы"
											 ,ИмяРегистра);
			
			// Выполним расчет валютных сумм в текущей строке.
			ВыполнитьРасчетВалютныхСуммВТекущейСтроке(Идентификатор
													 ,мКэшЗначений.ВалютаМСФО
													 ,ТекущаяСтрока.СуммаМУ
													 ,ИмяРегистра);
			
			
			
		Иначе
			
			// Выполним расчет сумм в текущей строке.
			ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
											 ,мКэшЗначений.ВалютаУпрУчета
											 ,ТекущаяСтрока.СуммаУпр
											 ,"ИзменениеУпрСуммы"
											 ,ИмяРегистра);
			
			// Выполним расчет валютных сумм в текущей строке.
			ВыполнитьРасчетВалютныхСуммВТекущейСтроке(Идентификатор
													 ,мКэшЗначений.ВалютаУпрУчета
													 ,ТекущаяСтрока.СуммаУпр
													 ,ИмяРегистра);
			
		КонецЕсли; // Если ИмяРегистра = "бит_Дополнительный_2" Тогда.
		
	КонецЕсли; // Если ЗначениеЗаполнено(ТекущаяСтрока.ВалютаДт) Тогда.
	
КонецПроцедуры // ТабличноеПолеПериодПриИзменении()

// СТОРОНА ДТ

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетДт"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеСчетДтПриИзменении(Элемент)
	
	ИмяРегистра   = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	Идентификатор = Элементы[ИмяРегистра].ТекущиеДанные.ПолучитьИдентификатор();
	
	ИзменениеСчетаТабличноеПоле(Идентификатор, ИмяРегистра, "Дт");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоДт"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеСубконтоДтПриИзменении(Элемент)
	
	ИмяРегистра 		   = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	ТекущаяСтрока    	   = Элементы[ИмяРегистра].ТекущиеДанные;
	ЗначениеСубконто 	   = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяРегистра, Элемент.Имя);
	МаксКоличествоСубконто = ПолучитьМаксКоличествоСубконтоКлиент(ИмяРегистра);
	
	ИзменениеСубконто(ТекущаяСтрока, ЗначениеСубконто, "Дт", МаксКоличествоСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоДт"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеСубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРегистра 		   = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	ТекущаяСтрока    	   = Элементы[ИмяРегистра].ТекущиеДанные;
	ЗначениеСубконто 	   = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяРегистра, Элемент.Имя);
	МаксКоличествоСубконто = ПолучитьМаксКоличествоСубконтоКлиент(ИмяРегистра);
	
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, ТекущаяСтрока, ЗначениеСубконто, "Дт", МаксКоличествоСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДт"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеВалютаДтПриИзменении(Элемент)
	
	ИмяРегистра	  = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	ТекущаяСтрока = Элементы[ИмяРегистра].ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	// Выполним расчет сумм в текущей строке.
	ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
									 ,ТекущаяСтрока.ВалютаДт
									 ,ТекущаяСтрока.ВалютнаяСуммаДт
									 ,
									 ,ИмяРегистра);
	
КонецПроцедуры

// СТОРОНА КТ

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетКт"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеСчетКтПриИзменении(Элемент)
	
	ИмяРегистра	  = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	Идентификатор = Элементы[ИмяРегистра].ТекущиеДанные.ПолучитьИдентификатор();
	
	ИзменениеСчетаТабличноеПоле(Идентификатор, ИмяРегистра, "Кт");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоКт"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеСубконтоКтПриИзменении(Элемент)
	
	ИмяРегистра			   = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	ТекущаяСтрока    	   = Элементы[ИмяРегистра].ТекущиеДанные;
	ЗначениеСубконто 	   = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяРегистра, Элемент.Имя);
	МаксКоличествоСубконто = ПолучитьМаксКоличествоСубконтоКлиент(ИмяРегистра);
	
	ИзменениеСубконто(ТекущаяСтрока, ЗначениеСубконто, "Кт", МаксКоличествоСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоКт"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеСубконтоКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРегистра			   = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	ТекущаяСтрока    	   = Элементы[ИмяРегистра].ТекущиеДанные;
	ЗначениеСубконто 	   = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяРегистра, Элемент.Имя);
	МаксКоличествоСубконто = ПолучитьМаксКоличествоСубконтоКлиент(ИмяРегистра);
	
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, ТекущаяСтрока, ЗначениеСубконто, "Кт", МаксКоличествоСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаКт"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеВалютаКтПриИзменении(Элемент)
	
	ИмяРегистра   = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	ТекущаяСтрока = Элементы[ИмяРегистра].ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	// Выполним расчет сумм в текущей строке.
	ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
									 ,ТекущаяСтрока.ВалютаКт
									 ,ТекущаяСтрока.ВалютнаяСуммаКт
									 ,
									 ,ИмяРегистра
									 ,Истина);
	
КонецПроцедуры

// СУММЫ

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаСценарий"
// в строке табличного поля "бит_Бюджетирование".
// 
&НаКлиенте
Процедура бит_БюджетированиеСуммаСценарийПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.бит_Бюджетирование.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Идентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	// Выполним расчет сумм в текущей строке.
	ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
									 ,
									 ,ТекущаяСтрока.СуммаСценарий
									 ,"ИзменениеСуммыСценарий"
									 ,"бит_Бюджетирование");
	
	// Выполним расчет валютных сумм в текущей строке.
	ВыполнитьРасчетВалютныхСуммВТекущейСтроке(Идентификатор
											 ,
											 ,ТекущаяСтрока.СуммаСценарий
											 ,"бит_Бюджетирование");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаРегл"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеСуммаРеглПриИзменении(Элемент)
	
	ИмяРегистра   = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	ТекущаяСтрока = Элементы[ИмяРегистра].ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Идентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	// Выполним расчет сумм в текущей строке.
	ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
									 ,мКэшЗначений.ВалютаРеглУчета
									 ,ТекущаяСтрока.СуммаРегл
									 ,"ИзменениеРеглСуммы"
									 ,ИмяРегистра);
	
	// Выполним расчет валютных сумм в текущей строке.
	ВыполнитьРасчетВалютныхСуммВТекущейСтроке(Идентификатор
											 ,мКэшЗначений.ВалютаРеглУчета
											 ,ТекущаяСтрока.СуммаРегл
											 ,ИмяРегистра);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаУпр"
// в строке табличного поля "бит_Бюджетирование", "бит_Дополнительный_i".
// 
&НаКлиенте
Процедура ТабличноеПолеСуммаУпрПриИзменении(Элемент)
	
	ИмяРегистра   = ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(Элемент.Имя);
	ТекущаяСтрока = Элементы[ИмяРегистра].ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Идентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	// Выполним расчет сумм в текущей строке.
	ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
									 ,мКэшЗначений.ВалютаУпрУчета
									 ,ТекущаяСтрока.СуммаУпр
									 ,"ИзменениеУпрСуммы"
									 ,ИмяРегистра);
	
	// Выполним расчет валютных сумм в текущей строке.
	ВыполнитьРасчетВалютныхСуммВТекущейСтроке(Идентификатор
											 ,мКэшЗначений.ВалютаУпрУчета
											 ,ТекущаяСтрока.СуммаУпр
											 ,ИмяРегистра);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаМУ"
// в строке табличного поля "бит_Дополнительный_2".
// 
&НаКлиенте
Процедура бит_Дополнительный_2СуммаМУПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.бит_Дополнительный_2.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Идентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	// Выполним расчет сумм в текущей строке.
	ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
									 ,мКэшЗначений.ВалютаМСФО
									 ,ТекущаяСтрока.СуммаМУ
									 ,"ИзменениеМУСуммы"
									 ,"бит_Дополнительный_2");
	
	// Выполним расчет валютных сумм в текущей строке.
	ВыполнитьРасчетВалютныхСуммВТекущейСтроке(Идентификатор
											 ,мКэшЗначений.ВалютаМСФО
											 ,ТекущаяСтрока.СуммаМУ
											 ,"бит_Дополнительный_2");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "ЗаписатьИзменения" формы.
// 
&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	
	ЗаписатьИзмененияКлиент(Ложь);
	
КонецПроцедуры

// Процедура - обработчик команды "ЗаписатьИзмененияИЗакрыть" формы.
// 
&НаКлиенте
Процедура ЗаписатьИзмененияИЗакрыть(Команда)
	
	Если ОткрытиеИзФормыСписка
		Или Не ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		ЗаписатьИЗакрыть = Истина;
	Иначе
		ЗаписатьИЗакрыть = Ложь;
	КонецЕсли;
	
	ЗаписатьИзмененияКлиент(ЗаписатьИЗакрыть);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура отрисовывает результат проведения документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ОтрисоватьРезультатПроведенияСервер()
	
	// Заполним реквизиты объекта из документа.
	ДокументСсылка = Объект.ДокументСсылка;
	МетаДокумента  = ДокументСсылка.Метаданные();
	
	Объект.Дата = ДокументСсылка.Дата;
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Сценарий", МетаДокумента) Тогда
		Объект.Сценарий = ДокументСсылка.Сценарий;
	КонецЕсли;
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаДокумента) Тогда
		Объект.Организация = ДокументСсылка.Организация;
	КонецЕсли;
	
	Если Не бит_РаботаСМетаданными.ЕстьРеквизит("РучнаяКорректировка", МетаДокумента) Тогда
		Объект.РучнаяКорректировка = Ложь;
	Иначе
		Объект.РучнаяКорректировка = ДокументСсылка.РучнаяКорректировка;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	НастроитьСвязиСубконтоИУсловноеОформлениеТаблицРегистровБухгалтерии();
	
	УправлениеЭлементамиФормы();
	
	ЗаполнитьТаблицыДвижений();
	
	НастроитьЗакладкиПанели();
	
	// Заполним заголовки страниц "бит_Дополнительный_i".
    ЗаполнитьЗаголовокСтраницДополнительныхРегистров();
	
	Если ОткрытиеИзФормыСписка
		Или Не ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		ЭтаФорма.Заголовок = "Результат проведения документа " + ДокументСсылка;
	КонецЕсли;
		
КонецПроцедуры // ОтрисоватьРезультатПроведенияСервер

&НаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка, ЭтоБюдж, ЕстьСуммаМУ)
	
	// Надписи для сумм
	Если ЭтоБюдж Тогда
		Проводка.НадписьСц = НСтр("ru = 'Сц:'");
	ИначеЕсли ЕстьСуммаМУ Тогда
		//Проводка.НадписьМУ = НСтр("ru = 'МСФО:'"); //ОК Аверьянова С. 05.05.2017 возникает ошибка из документа Операция(упр)по Журналу проводок ИК
	КонецЕсли;
	
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-03-31
	// Падает при просмотре проводок "ПоступлениеТоваровУслуг" из "бит_ГрупповоеРедактированиеДополнительныхАналитик".
	// Нет свойств "НадписьУпр, НадписьРегл, НадписьКолДт, НадписьКолКт".
	// Поместил в попытку.
	Попытка
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-03-31
	Проводка.НадписьУпр  = НСтр("ru = 'Упр:'");
	Проводка.НадписьРегл = НСтр("ru = 'Регл:'");
    
    СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
    СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
    
	//Проводка.НадписьКол  = НСтр("ru = 'Кол:'");	
	Проводка.НадписьКолДт = ?(СвСчДт.Количественный, НСтр("ru = 'Кол:'"), "");
	Проводка.НадписьКолКт = ?(СвСчКт.Количественный, НСтр("ru = 'Кол:'"), "");
	
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-03-31
	Исключение
	КонецПопытки;
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-03-31

КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	КэшированныеЗначения.Вставить("ВалютаУпрУчета" , Константы.бит_ВалютаУправленческогоУчета.Получить());
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		// Получим валюту международного учета.
		ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация,,Ложь);
	Иначе
		ВалютаМСФО = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
	// Заполним соответствие РегистрБухгалтерии - МаксКоличествоСубконто.
	СоотвРегистрыБухгалтерии = Новый Соответствие;
	
	КоллекцияРегистровБухгалтерии = Метаданные.РегистрыБухгалтерии;
	
	Для Каждого ТекРегистр Из КоллекцияРегистровБухгалтерии Цикл
		
		Если Найти(ТекРегистр.Имя, "бит_") > 0 Тогда
			СоотвРегистрыБухгалтерии.Вставить(ТекРегистр.Имя, ТекРегистр.ПланСчетов.МаксКоличествоСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
	КэшированныеЗначения.Вставить("СоотвРегистрыБухгалтерии", СоотвРегистрыБухгалтерии);
	КэшированныеЗначения.Вставить("ИзмененныеРегистры"		, Новый Структура);
	
	// Запомним значение ручной корректировки при открытии.
	КэшированныеЗначения.Вставить("РучнаяКорректировка", Объект.РучнаяКорректировка);
	
	// Закэшируем имя документа.
	ДокументСсылка = Объект.ДокументСсылка;
	МетаДокумента  = ДокументСсылка.Метаданные();
	
	КэшированныеЗначения.Вставить("ИмяДокумента", МетаДокумента.Имя);
	
	КэшированныеЗначения.Вставить("ЗакрытиеФормы", Ложь);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура настраивает связи субконто и условное оформление для таблиц регистров бухгалтерии.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура НастроитьСвязиСубконтоИУсловноеОформлениеТаблицРегистровБухгалтерии()
	
	УсловноеОформление.Элементы.Очистить();
	
	Если Не Объект.РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	СоотвРегистрыБухгалтерии = мКэшЗначений.СоотвРегистрыБухгалтерии;
	
	Для Каждого КлючЗначение Из СоотвРегистрыБухгалтерии Цикл
		
		ТекИмяРегистра 		   = КлючЗначение.Ключ;
		ПутьТекущиеДанные	   = "Элементы." + ТекИмяРегистра + ".ТекущиеДанные";
		МаксКоличествоСубконто = КлючЗначение.Значение;
		
		// Устанавливаем связи параметров выбора и связи по типу субконто.
		бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
													 ,"СчетДт"
													 ,"СубконтоДт"
													 ,МаксКоличествоСубконто
													 ,ТекИмяРегистра
													 ,ПутьТекущиеДанные);	 
													 
		бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
													 ,"СчетКт"
													 ,"СубконтоКт"
													 ,МаксКоличествоСубконто
													 ,ТекИмяРегистра
													 ,ПутьТекущиеДанные);
													 
		// Установим условное оформление для таблицы регистра.
		бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
		                                                         ,ТекИмяРегистра
																 ,"СубконтоДт"
																 ,"КоличествоДоступныхСубконтоДт"
																 ,МаксКоличествоСубконто);
																   
		бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
		                                                         ,ТекИмяРегистра
																 ,"СубконтоКт"
																 ,"КоличествоДоступныхСубконтоКт"
																 ,МаксКоличествоСубконто);
	КонецЦикла;
	
КонецПроцедуры // НастроитьСвязиСубконтоИУсловноеОформлениеТаблицРегистровБухгалтерии()

// Функция получает максимальное количество субконто плана счетов регистра бухгалтерии. Сервер.
// 
// Параметры:
//  ИмяРегистра - Строка.
// 
// Возвращаемое значение:
//  МаксКоличествоСубконто - Число.
// 
&НаСервере 
Функция ПолучитьМаксКоличествоСубконтоСервер(ИмяРегистра)
	
	МаксКоличествоСубконто = мКэшЗначений.СоотвРегистрыБухгалтерии.Получить(ИмяРегистра);
	МаксКоличествоСубконто = ?(МаксКоличествоСубконто = Неопределено, 0, МаксКоличествоСубконто);
	
	Возврат МаксКоличествоСубконто;
	
КонецФункции // ПолучитьМаксКоличествоСубконтоСервер()

// Процедура заполняет таблицы движений документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьТаблицыДвижений()
		
	Модифицированность = Ложь;
	
	Объект.Регистры.Очистить();
	
	ДокументСсылка = Объект.ДокументСсылка;
	
	ТаблицаИменРегистров = СформироватьТаблицуИменРегистровСДвижениями(ДокументСсылка);
	ТаблицаИменПуста 	 = ?(ТаблицаИменРегистров.Количество() = 0, Истина, Ложь);
	ЕстьДвижения 		 = ?(ТаблицаИменПуста, Ложь, Истина);
	
	Если Не ТаблицаИменПуста Тогда
		ТаблицаИменРегистров.Индексы.Добавить("Имя");
	КонецЕсли;
	
	ДокументОбъект 			 = ДокументСсылка.ПолучитьОбъект();
	ДвиженияДокументаОбъекта = ДокументОбъект.Движения;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	АктивностьДвижений          = Истина;
	
	Для Каждого ТекРегистр Из ДвиженияДокументаОбъекта Цикл
		
		МетаданныеРегистра = ТекРегистр.Метаданные();
		ПолноеИмяРегистра  = МетаданныеРегистра.ПолноеИмя();
		ИмяРегистра		   = МетаданныеРегистра.Имя;
		
		ЭтоРеквизитФормы = Истина;
		
		Если ИмяРегистра = "бит_Бюджетирование"
			Или ИмяРегистра = "бит_Дополнительный_1"
			Или ИмяРегистра = "бит_Дополнительный_2"
			Или ИмяРегистра = "бит_Дополнительный_3"
			Или ИмяРегистра = "бит_Дополнительный_4"
			Или ИмяРегистра = "бит_Дополнительный_5"
			Или ИмяРегистра = "СБ_КорректировкаРСБУ" Тогда
			
			ЭтоРеквизитФормы = Ложь;
			
			ЭтоБюдж 	= ИмяРегистра = "бит_Бюджетирование";
			ЕстьСуммаМУ = бит_ОбщегоНазначения.ЕстьОбъектыМСФО() 
							И бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(ИмяРегистра);
			
			Объект[ИмяРегистра].Отбор.Регистратор.Значение		= ДокументСсылка;
			Объект[ИмяРегистра].Отбор.Регистратор.Использование = Истина;
			
			// Изменение кода. Начало. 24.07.2014{{
			Попытка
				ТекРегистр.Прочитать();
			Исключение
				
				// Определим тип регистра.
				ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
				ТипРегистра  = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
				
				НоваяСтрока = Объект.Регистры.Добавить();
				НоваяСтрока.ТипРегистра  = ТипРегистра;
				НоваяСтрока.Имя 		 = ИмяРегистра;
				НоваяСтрока.Отображение  = Ложь;
				
				Продолжить;
				
			КонецПопытки;
            // Изменение кода. Конец. 24.07.2014}}
			Если ТекРегистр.Количество() = 0 Тогда
				ТекРегистр.Прочитать();
			КонецЕсли; 
			
			Если НЕ ТекРегистр.Количество() = 0 Тогда
				АктивностьДвижений = АктивностьДвижений И ТекРегистр[0].Активность;
			КонецЕсли; 
			
			Элементы["Группа" + ИмяРегистра].Картинка = ?(АктивностьДвижений, 
														БиблиотекаКартинок.бит_ЖурналПроводок, 
														БиблиотекаКартинок.бит_ЖурналПроводокНеактивный);

			ТаблицаСДвижениями = ТекРегистр.Выгрузить();
			
			ПодготовитьТаблицуДвижений(ТаблицаСДвижениями, МетаданныеРегистра);
			
			ТаблицаПриемник = Объект[ИмяРегистра];
			ТаблицаПриемник.Загрузить(ТаблицаСДвижениями);
			
            Для Каждого ТекСтрока Из ТаблицаПриемник Цикл
                СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекСтрока.СчетДт);
                СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекСтрока.СчетКт);
				ТекСтрока.КоличествоДоступныхСубконтоДт = СвСчДт.КоличествоСубконто;
				ТекСтрока.КоличествоДоступныхСубконтоКт = СвСчКт.КоличествоСубконто;
				ЗаполнитьНадписиВПроводке(ТекСтрока, ЭтоБюдж, ЕстьСуммаМУ);
				ЗаполнитьТаблицыДвиженийДоступностьПолей(ТекСтрока, "Дт");
				ЗаполнитьТаблицыДвиженийДоступностьПолей(ТекСтрока, "Кт");
			КонецЦикла;                        		
		КонецЕсли;
		
		Если ТекРегистр.Количество() = 0 Тогда
			ТекРегистр.Прочитать();
		КонецЕсли; 
		
		Если НЕ ТекРегистр.Количество() = 0 Тогда
			АктивностьДвижений = АктивностьДвижений И ТекРегистр[0].Активность;
		КонецЕсли; 

		// Определим тип регистра.
		ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
		ТипРегистра  = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
		
		НоваяСтрока = Объект.Регистры.Добавить();
		НоваяСтрока.ТипРегистра  = ТипРегистра;
		НоваяСтрока.Имя 		 = ИмяРегистра;
		НоваяСтрока.Синоним 	 = МетаданныеРегистра.Синоним;
		
		Если Не ТаблицаИменПуста Тогда
			НоваяСтрока.ЕстьДвижения = ?(Не ТаблицаИменРегистров.Найти(ПолноеИмяРегистра, "Имя") = Неопределено, Истина, Ложь);
		Иначе
			НоваяСтрока.ЕстьДвижения = Ложь;
		КонецЕсли;
		
		НоваяСтрока.Отображение  = НоваяСтрока.ЕстьДвижения;
		НоваяСтрока.Прочитан	 = Ложь;
		НоваяСтрока.РеквизитФормы = ЭтоРеквизитФормы;
		
		ГруппаРегистра = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Найти("Группа" + ИмяРегистра);
		
		Если ГруппаРегистра = Неопределено Тогда
			
			НоваяСтрока.Отрисован = Ложь;
			
			// Добавим страницу для регистра
			ГруппаПанели = Элементы.Добавить("Группа" + ИмяРегистра, Тип("ГруппаФормы"), Элементы.ГруппаСтраницы);
			ГруппаПанели.Вид 		= ВидГруппыФормы.Страница;
			ГруппаПанели.Заголовок 	= НоваяСтрока.Синоним;
			Если Не ПолучитьФункциональнуюОпцию("бит_ПРОФ")
				И Не ПолучитьФункциональнуюОпцию("бит_ФинансМСФО") Тогда
				Элементы.Переместить(ГруппаПанели, Элементы.ГруппаСтраницы, Элементы.Группабит_Бюджетирование);
			КонецЕсли;
			
			Если ТипРегистра = "РегистрНакопления" Тогда
				ГруппаПанели.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.бит_РегистрНакопленияНеактивный);
			ИначеЕсли  ТипРегистра = "РегистрБухгалтерии" Тогда	
				ГруппаПанели.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.бит_ЖурналПроводок, БиблиотекаКартинок.бит_ЖурналПроводокНеактивный);	
			Иначе	
				ГруппаПанели.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.бит_РегистрСведенийНеактивный);
			КонецЕсли; 

			// Добавим поле на страницу, т.к. если на странице ничего не будет то страница отображаться не будет
			// заполнение страницы полезными данными происходит при активизации страницы.
			ИмитацияТаблицы = Элементы.Добавить("ИмитацияТаблицы"+ИмяРегистра, Тип("ДекорацияФормы"), ГруппаПанели);
			
			// Добавим реквизит формы с набором записей регистра.
			ИмяТипаРеквизита = НоваяСтрока.ТипРегистра+"НаборЗаписей."+ИмяРегистра;
			ОписаниеТипаРеквизита = Новый ОписаниеТипов(ИмяТипаРеквизита);
			РевизитСвязиСРегистром = Новый РеквизитФормы(ИмяРегистра, ОписаниеТипаРеквизита,,НоваяСтрока.Синоним);
			
			МассивДобавляемыхРеквизитов.Добавить(РевизитСвязиСРегистром);
			
		Иначе
			НоваяСтрока.Отрисован = НЕ Элементы.Найти(ИмяРегистра) = Неопределено;
		КонецЕсли;
		
	КонецЦикла;	// Для Каждого ТекРегистр Из ДвиженияДокументаОбъекта Цикл.
	
	Если НЕ МассивДобавляемыхРеквизитов.Количество() = 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
		
КонецПроцедуры

// Процедура - Заполняет добавленные колонки таблицы.
//
// Параметры:
//  СтрокаТаблицы	 - 	Строка списка.
//  Сторона			 - 	Строка - "Дт/Кт".
//
&НаСервере
Процедура ЗаполнитьТаблицыДвиженийДоступностьПолей(СтрокаТаблицы, Сторона)
	
	ИмяПоля = СтрШаблон("Субконто" + Сторона + "1Доступность");
	Если СтрокаТаблицы.Свойство(ИмяПоля) = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	КоличествоДоступныхСубконто = СтрокаТаблицы["КоличествоДоступныхСубконто" + Сторона];
	Для Сч = 1 По КоличествоДоступныхСубконто Цикл
		СтрокаТаблицы["Субконто" + Сторона + Сч + "Доступность"] = Истина;
	КонецЦикла;
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы["Счет" + Сторона]);
    
	СтрокаТаблицы["Валютный" + Сторона + "Доступность"] 	  = СвСч.Валютный;
	СтрокаТаблицы["Количественный" + Сторона + "Доступность"] = СвСч.Количественный;
	
КонецПроцедуры // ЗаполнитьТаблицыДвижений()

// Функция получает таблицу имен регистров по которым у документа выполнены движения.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТаблицаИменРегистров - ТаблицаЗначений.
// 
// Функция определяет наличие движения по регистрам для документа
&НаСервереБезКонтекста 
Функция СформироватьТаблицуИменРегистровСДвижениями(ДокументСсылка)
	
	ТаблицаИменРегистров = Новый ТаблицаЗначений;
	МетаданныеДокумента  = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат ТаблицаИменРегистров;
	КонецЕсли;
	
	ТекстЗапроса 	  = "";
	ДвиженияДокумента = МетаданныеДокумента.Движения;
	
	ПерваяИтерация = Истина;
	Для Каждого Движение Из ДвиженияДокумента Цикл
		
		// В запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.бит_ОборотыПоБюджетам»
		// ИЗ РегистрНакопления.бит_ОборотыПоБюджетам
		// ГДЕ Регистратор = &Регистратор
		
		Если ПерваяИтерация Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() + """ КАК Имя ИЗ " 
			+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";
			
			ПерваяИтерация = Ложь;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
			|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() + """ КАК Имя ИЗ " 
			+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";

		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаИменРегистров = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаИменРегистров;			
	
КонецФункции // СформироватьТаблицуИменРегистровСДвижениями()

// Выполняет подготовку таблицы по проводкам для передачи/загрузки.
//    ПРОБЛЕМА: при выгрузке набора записей в ТЗ порядок субконто не соответствует порядку субконто на плане счетов
// 				данная процедура упорядочивает субконто и вид субконто как на плане счетов.
// 
// Параметры:
//  ТаблицаСДвижениями - ТаблицаЗначений.
//  МетаданныеРегистра - ОбъектМетаданных.
// 
&НаСервереБезКонтекста 
Процедура ПодготовитьТаблицуДвижений(ТаблицаСДвижениями, МетаданныеРегистра)
	
	МетаданныеПланаСчетов = МетаданныеРегистра.ПланСчетов;
	ИмяПВХПланаСчетов 	  = МетаданныеПланаСчетов.ВидыСубконто.Имя;
	КоличествоСубконтоПС  = МетаданныеПланаСчетов.МаксКоличествоСубконто;
	
	// Получим описание типов со всеми возможными типами субконто плана счетов.
	// Описание субконто необходимо, т.к. колонки с неопределенным типом не проходят в менеджере временных таблиц.
	МассивТипов 	= Новый Массив;
	ВыборкаСубконто = ПланыВидовХарактеристик[ИмяПВХПланаСчетов].Выбрать();
	
	Пока ВыборкаСубконто.Следующий() Цикл
		
		ТекТипыСубконто = ВыборкаСубконто.ТипЗначения.Типы();
		
		Для Каждого ТекТип Из ТекТипыСубконто Цикл
			МассивТипов.Добавить(ТекТип);
		КонецЦикла; 
		
	КонецЦикла;
	
	МассивТиповВид = Новый Массив;
	МассивТиповВид.Добавить(ТипЗнч(ВыборкаСубконто.Ссылка));
	
	ОписаниеСубконто 	= Новый ОписаниеТипов(МассивТипов);
	ОписаниеВидСубконто = Новый ОписаниеТипов(МассивТиповВид);
	
	// Создаем дополнительные колонки для упорядочения субконто и вида субконто.
	Для Ном = 1 По КоличествоСубконтоПС Цикл
		
		ТаблицаСДвижениями.Колонки.Добавить("Н_СубконтоДт" + Ном, ОписаниеСубконто);
		ТаблицаСДвижениями.Колонки.Добавить("Н_СубконтоКт" + Ном, ОписаниеСубконто);
		
		ТаблицаСДвижениями.Колонки.Добавить("Н_ВидСубконтоДт" + Ном, ОписаниеВидСубконто);
		ТаблицаСДвижениями.Колонки.Добавить("Н_ВидСубконтоКт" + Ном, ОписаниеВидСубконто);
		
	КонецЦикла;
	
	// Упорядочиваем субконто так же как они расположены в плане счетов.
	Для Каждого ТекСтрока Из ТаблицаСДвижениями Цикл
		ЗаполнитьСубконтоПоПорядку(ТекСтрока, "Дт", КоличествоСубконтоПС);
		ЗаполнитьСубконтоПоПорядку(ТекСтрока, "Кт", КоличествоСубконтоПС);		
	КонецЦикла; 

	// Удаляем лишние колонки
	// и переименовываем "буферные" колонки для использования их в запросах.
	Для Ном = 1 По КоличествоСубконтоПС Цикл
		
		// Удаляем.
		ТаблицаСДвижениями.Колонки.Удалить("СубконтоДт" + Ном);
		ТаблицаСДвижениями.Колонки.Удалить("СубконтоКт" + Ном);
		
		ТаблицаСДвижениями.Колонки.Удалить("ВидСубконтоДт" + Ном);
		ТаблицаСДвижениями.Колонки.Удалить("ВидСубконтоКт" + Ном);
		
		// Переименовываем.
		ТаблицаСДвижениями.Колонки["Н_СубконтоДт" + Ном].Имя = "СубконтоДт" + Ном;
		ТаблицаСДвижениями.Колонки["Н_СубконтоКт" + Ном].Имя = "СубконтоКт" + Ном;
		
		ТаблицаСДвижениями.Колонки["Н_ВидСубконтоДт" + Ном].Имя = "ВидСубконтоДт" + Ном;
		ТаблицаСДвижениями.Колонки["Н_ВидСубконтоКт" + Ном].Имя = "ВидСубконтоКт" + Ном;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуДвижений()

// Заполняет субконто и вид субконто в сторке ТЗ в порядке,
// соответсвующем порядку субконто на плане счетов.
// 
// Параметры:
//  СтрокаТЗ 			 - СтрокаТаблицыЗначений.
//  ДтКт 	 			 - Строка.
//  КоличествоСубконтоПС - Число.
// 
&НаСервереБезКонтекста 
Процедура ЗаполнитьСубконтоПоПорядку(СтрокаТЗ, ДтКт, КоличествоСубконтоПС)
	
	ИмяСчета = "Счет" + ДтКт;
	Счет 	 = СтрокаТЗ[ИмяСчета];
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	КолВоСубконтоСчета = СвСч.КоличествоСубконто;
	
	Для Ном = 1 По КоличествоСубконтоПС Цикл
		
		ИмяСубконто 	= "Субконто"    + ДтКт + Ном;
		ИмяВидаСубконто = "ВидСубконто" + ДтКт + Ном;
		
		ЗнСубконто  = СтрокаТЗ[ИмяСубконто];
		ВидСубконто = СтрокаТЗ[ИмяВидаСубконто];
		
		Для К = 1 По КолВоСубконтоСчета Цикл
			
			Если СвСч["ВидСубконто" + К] = ВидСубконто Тогда
				
				СтрокаТЗ["Н_Субконто"	 + ДтКт + К] = ЗнСубконто;
				СтрокаТЗ["Н_ВидСубконто" + ДтКт + К] = ВидСубконто;
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСубконтоПоПорядку()

// Функция записывает изменения в движениях. Сервер.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаСервере 
Функция ЗаписатьИзмененияСервер()
	
	ИсточникМета = Объект.ДокументСсылка.Метаданные();
	Отказ = бит_ДатыЗапретаРедактирования.ВыполнитьПроверкуДатыЗапретаРедактирования(ИсточникМета, Объект.ДокументСсылка);
	
	Если Отказ Тогда
		ДействиеВыполнено = Ложь;
	Иначе
		
		ЕстьОшибки = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Модифицированность", Истина);
		
		ИзмененныеРегистры = мКэшЗначений.ИзмененныеРегистры;
		
		НачатьТранзакцию();
		
		Для Каждого КлючЗначение Из ИзмененныеРегистры Цикл
			
			ИмяРегистра   = КлючЗначение.Ключ;
			СтрокаРегистр = ПолучитьСтрокуТаблицыРегистрыПоИмениГруппы(Объект.Регистры, ИмяРегистра);
			
			ТипРегистра = СтрокаРегистр.ТипРегистра;
			
			Если СтрокаРегистр.РеквизитФормы Тогда
				Контейнер = ЭтаФорма;
			Иначе
				Контейнер = Объект;
			КонецЕсли;
			
			Если ТипРегистра = "РегистрБухгалтерии" Тогда
				НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
				
			ИначеЕсли ТипРегистра = "РегистрНакопления" Тогда 
				НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
				
			ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
				
			КонецЕсли;
			
			НаборЗаписей.Отбор.Регистратор.Значение = Объект.ДокументСсылка;
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			ТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
			бит_РаботаСКоллекциями.ЗагрузитьВТаблицуЗначений(Контейнер[ИмяРегистра].Выгрузить(), ТаблицаДвижений);
			
			НаборЗаписей.Загрузить(ТаблицаДвижений);
			
			Если ТипРегистра = "РегистрСведений" Тогда
				НаборЗаписей.УстановитьАктивность(Истина);
			КонецЕсли;
			
			ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей, "Нет");
			
			Если Не ДействиеВыполнено Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьОшибки Тогда
			
			ЗафиксироватьТранзакцию();
			
			мКэшЗначений.ИзмененныеРегистры.Очистить();
			Модифицированность = Ложь;
			
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ДействиеВыполнено = ?(ЕстьОшибки, Ложь, Истина);
		
	КонецЕсли; 

	Возврат ДействиеВыполнено;
	
КонецФункции // ЗаписатьИзмененияСервер()

// Процедура создает и настраивает табличные поля на страницах группы ГруппаСтраницы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура НастроитьЗакладкиПанели()

	КоличествоВидимыхСтраниц = 0;
	ТекСтраница = Неопределено;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Видимость Тогда
		ТекСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	КонецЕсли;
	
	ГруппыПанели = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы;
	
	Для Каждого ТекГруппа из ГруппыПанели Цикл
		
		ИмяТекГруппы  = ТекГруппа.Имя;
		СтрокаРегистр = ПолучитьСтрокуТаблицыРегистрыПоИмениГруппы(Объект.Регистры, ИмяТекГруппы);
		
		Если ИмяТекГруппы = "СоставДвижений" 
			Или СтрокаРегистр = Неопределено Тогда
			
			ТекГруппа.Видимость = Ложь;
			
			Продолжить;
		КонецЕсли;
		
		ТекГруппа.Видимость = СтрокаРегистр.Отображение;
		
		Если СтрокаРегистр.Отображение Тогда
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекСтраница = Неопределено 
		Или Не ТекСтраница.Видимость Тогда
		
		Для Каждого ТекГруппа Из ГруппыПанели Цикл
			
			Если ТекГруппа.Видимость Тогда
				
				Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекГруппа;
				ЗаполнитьСтраницу(ТекГруппа);
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ЗаполнитьСтраницу(ТекСтраница);
	КонецЕсли;
		
КонецПроцедуры

// Функция получает строку таблицы Регистры по имени группы (страницы) 
// на которой отображаються движения.
// 
// Параметры:
//  ИмяГруппы - Строка. Имя регистра.
// 
// Возвращаемое значение:
//  СтрокаРегистр - СтрокаТаблицыЗначений.Регистры.
// 
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуТаблицыРегистрыПоИмениГруппы(ТабРегистры, ИмяГруппы)
	
	СтрокаРегистр = Неопределено;
	
	ИмяРегистра = СтрЗаменить(ИмяГруппы, "Группа", "");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", ИмяРегистра);
	
	НайденныеСтроки = ТабРегистры.НайтиСтроки(Отбор);
	
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		СтрокаРегистр = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат СтрокаРегистр;
	
КонецФункции // ПолучитьСтрокуТаблицыРегистрыПоИмениГруппы()

// 
&НаСервере 
Процедура ЗаполнитьСтраницу(пСтраница)
	
	Если ТипЗнч(пСтраница) = Тип("Строка") Тогда
		Страница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Иначе
		Страница = пСтраница;
	КонецЕсли;
	
	ИмяТекГруппы  = Страница.Имя;
	СтрокаРегистр = ПолучитьСтрокуТаблицыРегистрыПоИмениГруппы(Объект.Регистры, ИмяТекГруппы);
	
	Если СтрокаРегистр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРегистр.Отображение 
		И Не СтрокаРегистр.Отрисован Тогда
		
		ПолеРегистра = Элементы.Добавить(СтрокаРегистр.Имя, Тип("ТаблицаФормы"), Страница);
		    
		ПолеРегистра.ПутьКДанным = СтрокаРегистр.Имя;
		
		ЭтаФорма[СтрокаРегистр.Имя].Отбор.Регистратор.Значение 		= Объект.ДокументСсылка;
		ЭтаФорма[СтрокаРегистр.Имя].Отбор.Регистратор.Использование = Истина;
		
		Если СтрокаРегистр.ТипРегистра = "РегистрБухгалтерии" Тогда
			
			// Регистр бухгалтерии имеет специфичную структуру, расположение колонок в строку будет не читабельным.
			ЗаполнитьКолонкиРегистраБухгалтерии(СтрокаРегистр, ПолеРегистра);
			
		Иначе
			// От таблицы нам нужен набор колонок
			ТаблицаРегистра = ЭтаФорма[СтрокаРегистр.Имя].Выгрузить();
			
			Для Каждого ТекущаяКолонка Из ТаблицаРегистра.Колонки Цикл
				
				Если ТекущаяКолонка.Имя = "МоментВремени"
					ИЛИ ТекущаяКолонка.Имя = "ИсходныйНомерСтроки" Тогда
					
					Продолжить;
				КонецЕсли;
				
				КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+ТекущаяКолонка.Имя, Тип("ПолеФормы"), ПолеРегистра);
				КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+"."+ТекущаяКолонка.Имя;
				
				Если ТекущаяКолонка.Имя = "Активность" Тогда
					КолонкаПоляРегистра.Вид = ВидПоляФормы.ПолеФлажка;	
				Иначе
					КолонкаПоляРегистра.Вид = ВидПоляФормы.ПолеВвода;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаРегистр.ТипРегистра = "РегистрНакопления" Тогда
				Если Метаданные.РегистрыНакопления[СтрокаРегистр.Имя].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
					// КолонкаВидДвижения = ПолеРегистра.Колонки.Вставить(1, "Вид движения");
					// КолонкаВидДвижения.Имя = "ВидДвиженияРегистраНакопления";
					// КолонкаВидДвижения.УстановитьЭлементУправления(Тип("ПолеВвода"));
					// КолонкаВидДвижения.Данные = "ВидДвижения";
					// КолонкаВидДвижения.ЭлементУправления.КнопкаВыбора = Истина;
					// КолонкаВидДвижения.ЭлементУправления.ВыбиратьТип = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Элементы[СтрокаРегистр.Имя+"Регистратор"].Видимость = Ложь;
			Элементы[СтрокаРегистр.Имя+"НомерСтроки"].Видимость = Ложь;
			
			Если СтрокаРегистр.ТипРегистра = "РегистрСведений" Тогда
				Если НЕ Метаданные.РегистрыСведений[СтрокаРегистр.Имя].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					// Элементы[СтрокаРегистр.Имя+"Период"].Видимость = Ложь;
				КонецЕсли;
			Иначе
				// Элементы[СтрокаРегистр.Имя+"Период"].Видимость = Ложь;
			КонецЕсли;
			                        			
			Если СтрокаРегистр.Имя <> "бит_ЗначенияПроизвольныхПараметровРегистратор" Тогда
				// Отобразим доп.измерения бюджетирования
				бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма, СтрокаРегистр.Имя);
			КонецЕсли;   			
			
		КонецЕсли;
		
		// Заполним поле регистра
		НаборЗаписейРегистра = РеквизитФормыВЗначение(СтрокаРегистр.Имя);
		НаборЗаписейРегистра.Прочитать();
		ЗначениеВРеквизитФормы(НаборЗаписейРегистра, СтрокаРегистр.Имя);
		
		СтрокаРегистр.Отрисован = Истина;
		СтрокаРегистр.Прочитан  = Истина;
		
		// Установим действия для таблицы
		ПолеРегистра.УстановитьДействие("ПередНачаломДобавления"	, "ТабличноеПолеПередНачаломДобавления");
		ПолеРегистра.УстановитьДействие("ПриОкончанииРедактирования", "ТабличноеПолеПриОкончанииРедактирования");
		ПолеРегистра.УстановитьДействие("ПослеУдаления"				, "ТабличноеПолеПослеУдаления");
		
	КонецЕсли;
		
	Если СтрокаРегистр.Отображение 
		И Не СтрокаРегистр.Прочитан Тогда
		
		Если СтрокаРегистр.РеквизитФормы Тогда
			НаборЗаписейРегистра = РеквизитФормыВЗначение(СтрокаРегистр.Имя);
			НаборЗаписейРегистра.Прочитать();
			ЗначениеВРеквизитФормы(НаборЗаписейРегистра, СтрокаРегистр.Имя);
		КонецЕсли;
		СтрокаРегистр.Прочитан = Истина;
		
	КонецЕсли;
	
	Если СтрокаРегистр.Отображение 
		И СтрокаРегистр.Отрисован Тогда
		
		Элементы[ИмяТекГруппы].ТолькоПросмотр = Не Объект.РучнаяКорректировка;
		
		ПолеИмитацияТаблицы = Элементы.Найти("ИмитацияТаблицы"+СтрокаРегистр.Имя);
		Если НЕ ПолеИмитацияТаблицы = Неопределено Тогда
			ПолеИмитацияТаблицы.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет колонки таблицы связанной с регистром бухгалтерии
// 	структура регистра специфична, поэтому и расположение колонок имеет свои особенности.
// 
// Параметры:
// 	СтрокаРегистр - данные по выводимому регистру.
// 	ПолеРегистра - элемент формы.
// 
&НаСервере
Процедура ЗаполнитьКолонкиРегистраБухгалтерии(СтрокаРегистр, ПолеРегистра)
	
	МетаРегистр = Метаданные.РегистрыБухгалтерии[СтрокаРегистр.Имя];
	
	МассивБалансовыхИзмерений 	= Новый Массив;
	МассивНеБалансовыхИзмерений = Новый Массив;
	МассивБалансовыхРесурсов 	= Новый Массив;
	МассивНеБалансовыхРесурсов 	= Новый Массив;
	МассивРеквизитов 			= Новый Массив;
	
	ИзмерениеВалюта = Неопределено;
	
	// Измерения
	Для Каждого ТекущееИзмерение Из МетаРегистр.Измерения Цикл
		
		Если ТекущееИзмерение.Балансовый Тогда
			МассивБалансовыхИзмерений.Добавить(ТекущееИзмерение);
		Иначе
			МассивНеБалансовыхИзмерений.Добавить(ТекущееИзмерение);
			
			Если ТекущееИзмерение.Имя = "Валюта" Тогда
				ИзмерениеВалюта = ТекущееИзмерение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Ресурсы
	Для Каждого ТекущийРесурс Из МетаРегистр.Ресурсы Цикл
		
		Если ТекущийРесурс.Балансовый Тогда
			МассивБалансовыхРесурсов.Добавить(ТекущийРесурс);
		Иначе
			МассивНеБалансовыхРесурсов.Добавить(ТекущийРесурс);
		КонецЕсли;
		
	КонецЦикла;
	
	// Реквизиты
	Для Каждого ТекущийРеквизит Из МетаРегистр.Реквизиты Цикл
		
		МассивРеквизитов.Добавить(ТекущийРеквизит);
		
	КонецЦикла;
	
	ПоддержкаКорреспонденции = МетаРегистр.Корреспонденция;
	
	ПланСчетовРегистра = МетаРегистр.ПланСчетов;
	
	МаксКоличествоСубконто = ПланСчетовРегистра.МаксКоличествоСубконто;
	
	// Заполняем таблицу по частям
	
	// 1 (Период, НомерСтроки, Регистратор, балансовые измерения).
	
	КолонкаГруппаНачалоПоляРегистра = Элементы.Добавить("Группа"+СтрокаРегистр.Имя+"Начало", Тип("ГруппаФормы"), ПолеРегистра);
	КолонкаГруппаНачалоПоляРегистра.Вид 		= ВидГруппыФормы.ГруппаКолонок;
	КолонкаГруппаНачалоПоляРегистра.Группировка = ГруппировкаКолонок.Вертикальная;
	
		КолонкаГруппаПериодНомерПоляРегистра = Элементы.Добавить("Группа"+СтрокаРегистр.Имя+"ПериодНомер", Тип("ГруппаФормы"), КолонкаГруппаНачалоПоляРегистра);
		КолонкаГруппаПериодНомерПоляРегистра.Вид 		 = ВидГруппыФормы.ГруппаКолонок;
		КолонкаГруппаПериодНомерПоляРегистра.Группировка = ГруппировкаКолонок.Горизонтальная;
	
			КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+"Период", Тип("ПолеФормы"), КолонкаГруппаПериодНомерПоляРегистра);
			КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+".Период";
			
			КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+"НомерСтроки", Тип("ПолеФормы"), КолонкаГруппаПериодНомерПоляРегистра);
			КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+".НомерСтроки";
			
		КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+"Регистратор", Тип("ПолеФормы"), КолонкаГруппаНачалоПоляРегистра);
		КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+".Регистратор";
			
		Для Каждого ТекущееИзмерение Из МассивБалансовыхИзмерений Цикл
			
			КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+ТекущееИзмерение.Имя, Тип("ПолеФормы"), КолонкаГруппаНачалоПоляРегистра);
			КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+"."+ТекущееИзмерение.Имя;
			
		КонецЦикла;
			
	МассивСторонПроводки = Новый Массив;
	
	Если ПоддержкаКорреспонденции Тогда
		МассивСторонПроводки.Добавить("Дт");
		МассивСторонПроводки.Добавить("Кт");
	Иначе
		МассивСторонПроводки.Добавить("");
	КонецЕсли;
	
	Для Каждого СторонаПроводки Из МассивСторонПроводки Цикл
		
		// 2,5 (Счет, Не балансовые измерения)
		
		КолонкаГруппаСчетРегистра = Элементы.Добавить("Группа"+СтрокаРегистр.Имя+"Счет"+СторонаПроводки, Тип("ГруппаФормы"), ПолеРегистра);
		КолонкаГруппаСчетРегистра.Вид 		  = ВидГруппыФормы.ГруппаКолонок;
		КолонкаГруппаСчетРегистра.Группировка = ГруппировкаКолонок.Вертикальная;
		
		КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+"Счет"+СторонаПроводки, Тип("ПолеФормы"), КолонкаГруппаСчетРегистра);
		КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+".Счет"+СторонаПроводки;
		
		Для Каждого ТекущееИзмерение Из МассивНеБалансовыхИзмерений Цикл
			
			Если ТекущееИзмерение = ИзмерениеВалюта Тогда
				// Валюта отображается в другой группе
				Продолжить;
			КонецЕсли;
			
			КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+ТекущееИзмерение.Имя+СторонаПроводки, Тип("ПолеФормы"), КолонкаГруппаСчетРегистра);
			КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+"."+ТекущееИзмерение.Имя+СторонаПроводки;
			
		КонецЦикла;
		
		// 3,6 (Субконто)
		
		КолонкаГруппаСубконтоРегистра = Элементы.Добавить("Группа"+СтрокаРегистр.Имя+"Субконто"+СторонаПроводки, Тип("ГруппаФормы"), ПолеРегистра);
		КолонкаГруппаСубконтоРегистра.Вид 		  = ВидГруппыФормы.ГруппаКолонок;
		КолонкаГруппаСубконтоРегистра.Группировка = ГруппировкаКолонок.Вертикальная;
		
		Для Ном = 1 по МаксКоличествоСубконто Цикл
			
			КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+"Субконто"+СторонаПроводки+Ном, Тип("ПолеФормы"), КолонкаГруппаСубконтоРегистра);
			КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+".Субконто"+СторонаПроводки+Ном;
			
		КонецЦикла;
		
		// 4,7 (Количество, Валюта, Вал.сумма - не балансовые ресурсы).
		
		КолонкаГруппаПоказателиРегистра = Элементы.Добавить("Группа"+СтрокаРегистр.Имя+"Показатели"+СторонаПроводки, Тип("ГруппаФормы"), ПолеРегистра);
		КолонкаГруппаПоказателиРегистра.Вид 		= ВидГруппыФормы.ГруппаКолонок;
		КолонкаГруппаПоказателиРегистра.Группировка = ГруппировкаКолонок.Вертикальная;	
		
		// Валюта
		Если НЕ ИзмерениеВалюта = Неопределено Тогда
			КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+ИзмерениеВалюта.Имя+СторонаПроводки, Тип("ПолеФормы"), КолонкаГруппаПоказателиРегистра);
			КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+"."+ИзмерениеВалюта.Имя+СторонаПроводки;
		КонецЕсли;
			
		Для Каждого ТекущийРесурс Из МассивНеБалансовыхРесурсов Цикл
			
			КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+ТекущийРесурс.Имя+СторонаПроводки, Тип("ПолеФормы"), КолонкаГруппаПоказателиРегистра);
			КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+"."+ТекущийРесурс.Имя+СторонаПроводки;
			
		КонецЦикла;
		
	КонецЦикла; // Стороны проводки
	
	// 8 (Сумма - балансовые ресурсы)
	
	КолонкаГруппаСуммыРегистра = Элементы.Добавить("Группа"+СтрокаРегистр.Имя+"Суммы", Тип("ГруппаФормы"), ПолеРегистра);
	КолонкаГруппаСуммыРегистра.Вид 		= ВидГруппыФормы.ГруппаКолонок;
	КолонкаГруппаСуммыРегистра.Группировка = ГруппировкаКолонок.Вертикальная;
	
	Для Каждого ТекущийРесурс Из МассивБалансовыхРесурсов Цикл
		
		КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+ТекущийРесурс.Имя, Тип("ПолеФормы"), КолонкаГруппаСуммыРегистра);
		КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+"."+ТекущийРесурс.Имя;
		
	КонецЦикла;
	
	// 9 (Содержание - реквизиты)
	
	КолонкаГруппаОкончаниеРегистра = Элементы.Добавить("Группа"+СтрокаРегистр.Имя+"Окончание", Тип("ГруппаФормы"), ПолеРегистра);
	КолонкаГруппаОкончаниеРегистра.Вид 		   = ВидГруппыФормы.ГруппаКолонок;
	КолонкаГруппаОкончаниеРегистра.Группировка = ГруппировкаКолонок.Вертикальная;
	
	Для Каждого ТекущийРеквизит Из МассивРеквизитов Цикл
		
		КолонкаПоляРегистра = Элементы.Добавить(СтрокаРегистр.Имя+ТекущийРеквизит.Имя, Тип("ПолеФормы"), КолонкаГруппаОкончаниеРегистра);
		КолонкаПоляРегистра.ПутьКДанным = СтрокаРегистр.Имя+"."+ТекущийРеквизит.Имя;
		
		МассивТиповРеквизита = ТекущийРеквизит.Тип.Типы();
		
		Если МассивТиповРеквизита.Количество() = 1
			И МассивТиповРеквизита[0] = Тип("Булево") Тогда
			
			КолонкаПоляРегистра.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обрабатывает изменение счета в табличном поле.
// 
// Параметры:
//  Идентификатор - Число. Индентификатор строки табличной части.
//  ИмяРегистра   - Строка.
//  ДтКт          - Строка. "Дт", "Кт".
// 
&НаСервере
Процедура ИзменениеСчетаТабличноеПоле(Идентификатор, ИмяРегистра, ДтКт)
	
	ТекущаяСтрока 	  	   = Объект[ИмяРегистра].НайтиПоИдентификатору(Идентификатор);
	ТекущийСчет			   = ТекущаяСтрока["Счет" + ДтКт];
	МаксКоличествоСубконто = ПолучитьМаксКоличествоСубконтоСервер(ИмяРегистра);
	НастройкиСубконто 	   = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущийСчет, МаксКоличествоСубконто);
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "Субконто" + ДтКт);

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущийСчет);
    
	Если Не СвСч.Количественный
		И ЗначениеЗаполнено(ТекущаяСтрока["Количество" + ДтКт]) Тогда
		ТекущаяСтрока["Количество" + ДтКт] = 0;
	КонецЕсли;
	
	Если Не СвСч.Валютный Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока["Валюта" + ДтКт]) Тогда
			ТекущаяСтрока["Валюта" + ДтКт] = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока["ВалютнаяСумма" + ДтКт]) Тогда
			ТекущаяСтрока["ВалютнаяСумма" + ДтКт] = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	// Приведем значение видов субконто.
    КолВоСубконтоСчета = СвСч.КоличествоСубконто;
	
	Для Ном = 1 По МаксКоличествоСубконто Цикл
		
		ИмяРеквизитаВидаСубконто = "ВидСубконто" + ДтКт + Ном;
		
		Если Ном <= КолВоСубконтоСчета Тогда
			
			НовыйВид = СвСч["ВидСубконто" + Ном];
			
			Если Не ТекущаяСтрока[ИмяРеквизитаВидаСубконто] = НовыйВид Тогда
				ТекущаяСтрока[ИмяРеквизитаВидаСубконто] = НовыйВид;
			КонецЕсли;
			
		Иначе
            
            ТекущаяСтрока[ИмяРеквизитаВидаСубконто] = Неопределено;
            
        КонецЕсли;
		
	КонецЦикла;
	
	// Запишем количество доступных субконто счета.
	ТекущаяСтрока["КоличествоДоступныхСубконто" + ДтКт] = КолВоСубконтоСчета;
	
КонецПроцедуры // ИзменениеСчетаТабличноеПоле()

// Процедура обрабатывает изменение субконто.
// 
// Параметры:
//  Контейнер        	   - Произвольный.
//  ЗначениеСубконто 	   - Произвольный. Текущее значение субконто.
//  ДтКт             	   - Строка. "Дт", "Кт".
//  МаксКоличествоСубконто - Число.
// 
&НаКлиенте
Процедура ИзменениеСубконто(Контейнер, ЗначениеСубконто, ДтКт, МаксКоличествоСубконто)

	ПрефиксСубконто   = "Субконто" + ДтКт;
	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер
																				,ПрефиксСубконто
																				,МаксКоличествоСубконто);
	
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто
													 ,ПрефиксСубконто
													 ,ЗначениеСубконто
													 ,МаксКоличествоСубконто);
	
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто
															,Контейнер
															,ПрефиксСубконто
															,""
															,МаксКоличествоСубконто);																   
	
КонецПроцедуры // ИзменениеСубконто()

// Процедура обрабатывает начало выбора субконто.
// 
// Параметры:
//  Элемент                - ЭлементУправления.
//  СтандартнаяОбработка   - Булево.
//  Контейнер              - Произвольный.
//  ЗначениеСубконто       - Произвольный.
//  ДтКт              	   - Строка. "Дт", "Кт".
//  МаксКоличествоСубконто - Число.
// 
&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент
							  ,СтандартнаяОбработка
							  ,Контейнер
							  ,ЗначениеСубконто
							  ,ДтКт
							  ,МаксКоличествоСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                    ,
																						,"Субконто" + ДтКт
																						,ЗначениеСубконто
																						,МаксКоличествоСубконто);
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		ТипЭлемента = ТипЗнч(ЗначениеСубконто);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Владелец");
		
		Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			
			СтандартнаяОбработка = Ложь;
			ФормаВыбора = ПолучитьФорму("Справочник.БанковскиеСчета.ФормаВыбора",, Элемент);
			
		ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			
			СтандартнаяОбработка = Ложь;
			ФормаВыбора = ПолучитьФорму("Справочник.ПодразделенияОрганизаций.ФормаВыбора",, Элемент);
			
		ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			СтандартнаяОбработка = Ложь;
			ФормаВыбора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",, Элемент);
			
			СтруктураОтбора.Вставить("Организация");
			
		КонецЕсли;
		
		Если СтандартнаяОбработка Тогда 
			// Установим параметры выбора субконто.
			бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
		Иначе
			
			// Установим отбор в списке.
			Для Каждого КлючЗначение Из СтруктураОтбора Цикл
				
				ИмяПоляОтбора = КлючЗначение.Ключ;
				
				Если СтруктураПараметров.Свойство(ИмяПоляОтбора) Тогда
					бит_ОбщегоНазначенияКлиентСервер.УстановитьОтборУСписка(ФормаВыбора.Список.Отбор
																		   ,Новый ПолеКомпоновкиДанных(ИмяПоляОтбора)
																		   ,СтруктураПараметров[ИмяПоляОтбора]
																		   ,ВидСравненияКомпоновкиДанных.Равно);
				КонецЕсли;
				
			КонецЦикла;
			
			ФормаВыбора.ЗакрыватьПриВыборе			  = Истина;
			ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Истина;
			
			ФормаВыбора.Открыть();
			
			// Позиционируемся в списке на текущем значении.
			ФормаВыбора.Элементы.Список.ТекущаяСтрока = ЗначениеСубконто;
			
		КонецЕсли; // Если СтандартнаяОбработка Тогда 
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ЗначениеОрганизация = Объект.Организация;
		Иначе
			ЗначениеОрганизация = Неопределено;
		КонецЕсли;
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                   ,СтандартнаяОбработка
																	   ,ЗначениеСубконто
																	   ,ЗначениеОрганизация
																	   ,СтруктураПараметров);
	КонецЕсли; // Если УправляемоеПриложение Тогда
	
КонецПроцедуры // НачалоВыбораСубконто()

// Функция получает значение субконто в табличном поле исходя из имени элемента 
// и имени табличного поля. 
// Значение получается исходя из предположения что ИмяЭлементаУправления = ИмяТабличногоПоля+ИмяРеквизита.
// 
// Параметры:
//  ТекущаяСтрока     - ДанныеФормыКоллекция.
//  ИмяТабличногоПоля - Строка.
//  ИмяЭлемента       - Строка.
// 
// Возвращаемое значение:
//  ЗначениеСубконто - Произвольный.
// 
&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяТабличногоПоля, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		ИмяРеквизита     = СтрЗаменить(ИмяЭлемента, ИмяТабличногоПоля, "");
		ЗначениеСубконто = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 
	
	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

// Пересчет валютной суммы в основную по курсу на указанную дату.
// 
// Параметры:
//  ВалютнаяСумма - Число.
//  Валюта        - СправочникСсылка.Валюты.
//  Дата          - Дата.
// 
// Возвращаемое значение:
//  Сумма - Число.
// 
&НаСервереБезКонтекста 
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата)

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / Запись.Кратность;
	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

// Процедура выполняет расчет сумм в текущей строке.
// 
// Параметры:
//  Идентификатор 	   - Число. Индентификатор строки табличной части.
//  ВалютаДляПересчета - СправочникСсылка.Валюты.
//  СуммаДляПересчета  - Число.
//  Действие           - Строка. По умолчанию "".
//  ИмяРегистра        - Строка.
// 
//  ПроверятьВалютностьСчетаДт - Булево. По умолчанию Ложь.
// 
&НаСервере 
Процедура ВыполнитьРасчетСуммВТекущейСтроке(Идентификатор
										   ,ВалютаДляПересчета = Неопределено
										   ,СуммаДляПересчета
										   ,Действие = ""
										   ,ИмяРегистра
										   ,ПроверятьВалютностьСчетаДт = Ложь)
	
	ТекущаяСтрока = Объект[ИмяРегистра].НайтиПоИдентификатору(Идентификатор);
    
    СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДт);
    
	Если ПроверятьВалютностьСчетаДт
		И СвСчДт.Валютный Тогда
		// Расчет не требуеться.
		Возврат;
	КонецЕсли;
	
	Если Действие = "ИзменениеСуммыСценарий" Тогда
		ВалютаДляПересчета = ТекущаяСтрока.Сценарий.Валюта;
	КонецЕсли;
	
	СуммаДляПересчета = ?(Не ТипЗнч(СуммаДляПересчета) = Тип("Число"), 0, СуммаДляПересчета);
	
	// Получим период движения.
	ПериодДвижения = ТекущаяСтрока.Период;
	
	КурсКратностьВалютыСтроки = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДляПересчета, ПериодДвижения);
	
	Если Не Действие = "ИзменениеРеглСуммы"
		И Не (Действие = "ИзменениеУпрСуммы" 
			  И (ИмяРегистра = "бит_Бюджетирование" Или ИмяРегистра = "бит_Дополнительный_2")
			  И ТекущаяСтрока.СуммаРегл <> 0)Тогда
	
		ТекущаяСтрока.СуммаРегл = ПересчетСуммыПоКурсу(СуммаДляПересчета, ВалютаДляПересчета, ПериодДвижения);
		
	КонецЕсли;
	
	Если Не Действие = "ИзменениеУпрСуммы"
		И Не (Действие = "ИзменениеРеглСуммы" И ТекущаяСтрока.СуммаУпр <> 0) Тогда
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
			КурсКратностьВалютыУпрУчета = бит_КурсыВалют.ПолучитьКурсВалюты(мКэшЗначений.ВалютаУпрУчета, ПериодДвижения);
			
			ТекущаяСтрока.СуммаУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
																					 ВалютаДляПересчета, мКэшЗначений.ВалютаУпрУчета,
																					 КурсКратностьВалютыСтроки.Курс, КурсКратностьВалютыУпрУчета.Курс,
																					 КурсКратностьВалютыСтроки.Кратность, КурсКратностьВалютыУпрУчета.Кратность);
																					 
		Иначе
			ТекущаяСтрока.СуммаУпр = 0;
		КонецЕсли;	
			
	КонецЕсли;
	
	Если ИмяРегистра = "бит_Бюджетирование" 
		И Не ((Действие = "ИзменениеРеглСуммы" Или Действие = "ИзменениеУпрСуммы")
			  И ТекущаяСтрока.СуммаСценарий <> 0) Тогда
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
			ВалютаСценария = ТекущаяСтрока.Сценарий.Валюта;
			
			КурсКратностьВалютыСценария = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария, ПериодДвижения);
			ТекущаяСтрока.СуммаСценарий = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
																						 ВалютаДляПересчета, ВалютаСценария,
																						 КурсКратностьВалютыСтроки.Курс, КурсКратностьВалютыСценария.Курс,
																						 КурсКратностьВалютыСтроки.Кратность, КурсКратностьВалютыСценария.Кратность);
																					 
		Иначе
			ТекущаяСтрока.СуммаСценарий = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим наличие ресурса с именем "СуммаМУ".
	ЕстьРесурсСуммаМУ = бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(ИмяРегистра);
	
	Если ЕстьРесурсСуммаМУ 
		И Не ((Действие = "ИзменениеРеглСуммы" Или Действие = "ИзменениеУпрСуммы")
			  И ТекущаяСтрока.СуммаМУ <> 0) Тогда
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
			КурсКратностьВалютыМеждУчета = бит_КурсыВалют.ПолучитьКурсВалюты(мКэшЗначений.ВалютаМСФО, ПериодДвижения);
			
			ТекущаяСтрока.СуммаМУ = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
																					ВалютаДляПересчета, мКэшЗначений.ВалютаМСФО,
																					КурсКратностьВалютыСтроки.Курс, КурсКратностьВалютыМеждУчета.Курс,
																					КурсКратностьВалютыСтроки.Кратность, КурсКратностьВалютыМеждУчета.Кратность);
																					 
		Иначе
			ТекущаяСтрока.СуммаМУ = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьРасчетСуммВТекущейСтроке()

// Процедура выполняет расчет валютных сумм в текущей строке.
// 
// Параметры:
//  Идентификатор 	   - Число. Индентификатор строки табличной части.
//  ВалютаДляПересчета - СправочникСсылка.Валюты.
//  СуммаДляПересчета  - Число.
//  ИмяРегистра        - Строка.
// 
&НаСервере 
Процедура ВыполнитьРасчетВалютныхСуммВТекущейСтроке(Идентификатор
												   ,ВалютаДляПересчета = Неопределено
												   ,СуммаДляПересчета
												   ,ИмяРегистра)
	
	ТекущаяСтрока = Объект[ИмяРегистра].НайтиПоИдентификатору(Идентификатор);
	
	// Получим период движения.
	ПериодДвижения = ТекущаяСтрока.Период;
	
	Если ВалютаДляПересчета = Неопределено
		И ИмяРегистра = "бит_Бюджетирование" Тогда
		ВалютаДляПересчета = ТекущаяСтрока.Сценарий.Валюта;
	КонецЕсли;
    
    СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДт);
    СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетКт);
    
	Если СвСчДт.Валютный 
		И ТекущаяСтрока.ВалютнаяСуммаДт = 0 Тогда

		КурсКратностьВалютыСтроки    = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущаяСтрока.ВалютаДт, ПериодДвижения);
		КурсКратностьВалютыПересчета = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДляПересчета, ПериодДвижения);
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
			ТекущаяСтрока.ВалютнаяСуммаДт = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
																							ВалютаДляПересчета, ТекущаяСтрока.ВалютаДт,
																							КурсКратностьВалютыПересчета.Курс, КурсКратностьВалютыСтроки.Курс,
																							КурсКратностьВалютыПересчета.Кратность, КурсКратностьВалютыСтроки.Кратность);
																							
		Иначе
			ТекущаяСтрока.ВалютнаяСуммаДт = 0;
		КонецЕсли;	
		
	ИначеЕсли Не СвСчДт.Валютный
		И СвСчКт.Валютный
		И ТекущаяСтрока.ВалютнаяСуммаКт = 0 Тогда

		КурсКратностьВалютыСтроки    = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущаяСтрока.ВалютаКт, ПериодДвижения);
		КурсКратностьВалютыПересчета = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДляПересчета, ПериодДвижения);
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
			ТекущаяСтрока.ВалютнаяСуммаКт = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
																							ВалютаДляПересчета, ТекущаяСтрока.ВалютаКт,
																							КурсКратностьВалютыПересчета.Курс, КурсКратностьВалютыСтроки.Курс,
																							КурсКратностьВалютыПересчета.Кратность, КурсКратностьВалютыСтроки.Кратность);
																							
		Иначе
			ТекущаяСтрока.ВалютнаяСуммаКт = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьРасчетВалютныхСуммВТекущейСтроке()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	ЭтоУправляемоеПриложение = ?(ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение
								,Истина
								,Ложь);
	
	ДокументСсылка 		= Объект.ДокументСсылка;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если Не бит_РаботаСМетаданными.ЕстьРеквизит("РучнаяКорректировка", МетаданныеДокумента) Тогда
		РучнаяКорректировкаДоступна = Ложь;
		
	ИначеЕсли РольДоступна("ПолныеПрава") 
		Или РольДоступна("бит_ФинансистПолныеПрава") 
		Или РольДоступна("бит_му_ПолныеПрава") Тогда 
		
		Если ДокументСсылка.Проведен 
			Или Объект.РучнаяКорректировка 
			Или МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
			
			РучнаяКорректировкаДоступна = Истина;
			
		Иначе
			РучнаяКорректировкаДоступна = Ложь;
		КонецЕсли;
		
	Иначе
		РучнаяКорректировкаДоступна = Ложь;
	КонецЕсли;
	
	Если ЭтоУправляемоеПриложение 
		И Не ОткрытиеИзФормыСписка Тогда
		
		Элементы.ЗаписатьИзменения.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		Элементы.ЗаписатьИзмененияИЗакрыть.Видимость   = Ложь;
		Элементы.ЗаписатьИзмененияИЗакрыть.Доступность = Ложь;
		
	Иначе
		
		Элементы.ЗаписатьИзменения.Отображение = ОтображениеКнопки.Картинка;
		
		Элементы.ЗаписатьИзмененияИЗакрыть.Видимость   = РучнаяКорректировкаДоступна;
		Элементы.ЗаписатьИзмененияИЗакрыть.Доступность = РучнаяКорректировкаДоступна И Объект.РучнаяКорректировка;
		
	КонецЕсли;
	
	Элементы.ЗаписатьИзменения.Видимость   = РучнаяКорректировкаДоступна;
	Элементы.ЗаписатьИзменения.Доступность = РучнаяКорректировкаДоступна И Объект.РучнаяКорректировка;
	Элементы.РучнаяКорректировка.Видимость = РучнаяКорректировкаДоступна;
	
	Если Не ЕстьДвижения Тогда
		ЭтаФорма.Ширина = 75;
		ЭтаФорма.Высота = 20;
	КонецЕсли;
	
КонецПроцедуры // УправлениеЭлементамиФормы()

#КонецОбласти

#Область ПрочиеСерверныеПроцедурыИФункции

// Процедура заполняет заголовки группы "Группабит_Дополнительный_i".
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьЗаголовокСтраницДополнительныхРегистров()
	
    ГруппыПанели = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы;
    МетаданныеРБ = Метаданные.РегистрыБухгалтерии;
    ФормаСписка  = Перечисления.бит_ВидыФормОбъекта.Списка;
    
    Для Ном = 1 По 5 Цикл
        
        ТекущаяГруппа = ГруппыПанели["Группабит_Дополнительный_" + Ном];
        
        // Если текущая страница видима, тогда заполним заголовок.
        Если ТекущаяГруппа.Видимость Тогда
            
            // Получаем метаданные текущего регистра бухгалтерии.
            ТекМетаданныеРБ = МетаданныеРБ["бит_Дополнительный_" + Ном];
            СвойстваОбъекта = Новый Структура("Заголовок");
            
            // Получим заголовок для страницы.
            бит_НазначениеСинонимовОбъектов.ВывестиЗаголовокФормы(ТекМетаданныеРБ, СвойстваОбъекта, ФормаСписка);
            
            // Установим заголовок.
            ТекущаяГруппа.Заголовок = ?(ЗначениеЗаполнено(СвойстваОбъекта.Заголовок), СвойстваОбъекта.Заголовок, ТекМетаданныеРБ.Синоним);
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры // ЗаполнитьЗаголовокСтраницДополнительныхРегистров()

// Процедура обрабатывает изменение поле флажка "РучнаяКорректировка". Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура РучнаяКорректировкаПриИзмененииСервер()
	
	Модифицированность	= Истина;
	РучнаяКорректировка = Объект.РучнаяКорректировка;
	
	Для Каждого ТекСтрока Из Объект.Регистры Цикл
		
		// Регистры отрисованные программно не дадим корректировать руками.
		Если ТекСтрока.Отображение 
			И ТекСтрока.Отрисован Тогда
			
			Элементы["Группа" + ТекСтрока.Имя].ТолькоПросмотр = Не РучнаяКорректировка;
			
			Если Не РучнаяКорректировка Тогда
				// Надо перезаполнить таблицу.
				ТекСтрока.Прочитан = Истина;
			КонецЕсли;
			
		ИначеЕсли Не РучнаяКорректировка Тогда
			ТекСтрока.Прочитан = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если это отмена ручной корректировки, тогда.
	Если мКэшЗначений.РучнаяКорректировка
		И Не Объект.РучнаяКорректировка Тогда
		// Кнопки записи доступны.
		ДоступностьКнопокЗаписи = Истина;
	Иначе
		ДоступностьКнопокЗаписи = РучнаяКорректировка;
	КонецЕсли;
	
	Элементы.ЗаписатьИзмененияИЗакрыть.Доступность = ДоступностьКнопокЗаписи;
	Элементы.ЗаписатьИзменения.Доступность 		   = ДоступностьКнопокЗаписи;
	
	НастроитьСвязиСубконтоИУсловноеОформлениеТаблицРегистровБухгалтерии();
	
КонецПроцедуры // РучнаяКорректировкаПриИзмененииСервер()

// Функция выполняет синхронизацию реквизита документа РучнаяКорректировка.
// 
// Параметры:
//  СинхронизацияВыполненаИзФормы - Булево.
//  ЗаписатьИЗакрыть              - Булево.
// 
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаСервере 
Функция СинхронизироватьРучнуюКорректировку(СинхронизацияВыполненаИзФормы, ЗаписатьИЗакрыть)
	
	Если СинхронизацияВыполненаИзФормы Тогда
		ДействиеВыполнено = Истина;
	Иначе
		
		ДокументОбъект 	  = Объект.ДокументСсылка.ПолучитьОбъект();
		ДействиеВыполнено = бит_ОбщегоНазначения.ВыполнитьСинхронизациюРучнойКорректировки(ДокументОбъект
																						  ,Объект.РучнаяКорректировка);
	КонецЕсли;
	
	Если ЗаписатьИЗакрыть Тогда
		Возврат ДействиеВыполнено;
	КонецЕсли;
	
	ОтменаРучнойКорректировки = Не Объект.ДокументСсылка.РучнаяКорректировка;
	
	Если ДействиеВыполнено
		И ОтменаРучнойКорректировки Тогда
		
		УправлениеЭлементамиФормы();
		ЗаполнитьТаблицыДвижений();
		НастроитьЗакладкиПанели();
		
		// Заполним заголовки страниц "бит_Дополнительный_i".
		ЗаполнитьЗаголовокСтраницДополнительныхРегистров();
		
	КонецЕсли;
	
	Возврат ДействиеВыполнено;
	
КонецФункции // СинхронизироватьРучнуюКорректировку()

// Функция получает активность для нового движения.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  Результат - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьАктивностьНовогоДвижения(ДокументСсылка)
	
	МетаДокумент = ДокументСсылка.Метаданные();
	
	ПроведениеРазрешено = МетаДокумент.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
	Если ПроведениеРазрешено Тогда
		АктивностьНовогоДвижения = ?(ДокументСсылка.Проведен, Истина, Ложь);
	Иначе
		АктивностьНовогоДвижения = Истина;
	КонецЕсли;
	
	Возврат АктивностьНовогоДвижения;
	
КонецФункции // ПолучитьАктивностьНовогоДвижения()

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЗаполнитьСтраницу(ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРегистров(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Регистры", Объект.Регистры);
	
	Оповещение = Новый ОписаниеОповещения("НастройкаРегистровОкончание", ЭтотОбъект); 
	ОткрытьФорму("Обработка.бит_РезультатПроведения.Форма.ФормаНастройки", ПараметрыФормы,ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура окончание процедуры "НастройкаРегистров".
// 
&НаКлиенте 
Процедура НастройкаРегистровОкончание(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СтруктураРезультат) = Тип("Структура") Тогда
		
		Для Каждого ТекРегистр Из СтруктураРезультат.СписокРегистров Цикл
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Имя", ТекРегистр.Значение);
			
			МассивСтрок = Объект.Регистры.НайтиСтроки(СтруктураОтбора);
			
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из МассивСтрок Цикл
				ТекСтрока.Отображение = ТекРегистр.Пометка;
			КонецЦикла;
			
		КонецЦикла;
		
		НастроитьЗакладкиПанели();
		
	КонецЕсли;
	
КонецПроцедуры // НастройкаРегистровОкончание()

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Процедура записывает изменения в движениях. Клиент.
// 
// Параметры:
//  ЗаписатьИЗакрыть - Булево. По умолчанию Истина.
// 
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаКлиенте 
Процедура ЗаписатьИзмененияКлиент(ЗаписатьИЗакрыть)
	
	// ДействиеВыполнено = Ложь;
	
	// Если значение ручной корректировки было изменено, тогда.
	Если Не мКэшЗначений.РучнаяКорректировка = Объект.РучнаяКорректировка Тогда
		
		ЗаголовокВопроса = НСтр("ru = 'Результат проведения'");
		
		ОтменаРучнойКорректировки = ?(мКэшЗначений.РучнаяКорректировка
									  И Не Объект.РучнаяКорректировка, Истина, Ложь);
		
		Если ОтменаРучнойКорректировки Тогда
			
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗаписатьИзмененияКлиентОкончание", ЭтотОбъект, ЗаписатьИЗакрыть); 
			ТекстВопроса = НСтр("ru = 'Ручная корректировка движений документа отменена.
								 |Восстановить движения сформированные автоматически?'");
								 
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30,, ЗаголовокВопроса);					 
								 
			// Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30,, ЗаголовокВопроса);
			// 
			// Если Не Ответ = КодВозвратаДиалога.Да Тогда
			// 	Возврат;
			// КонецЕсли;
			
		Иначе	
			ЛокальноеОкончаниеЗаписатьИзмененияКлиент(ЗаписатьИЗакрыть);
		КонецЕсли;
		
	Иначе	
		ОкончаниеЗаписатьИзмененияКлиент();
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьИзмененияКлиент()

// Процедура окончание процедуры "ЗаписатьИзмененияКлиент".
// 
&НаКлиенте
Процедура ОкончаниеЗаписатьИзмененияКлиент()

	ДействиеВыполнено = ЗаписатьИзмененияСервер();

	Если ДействиеВыполнено Тогда
		
		мКэшЗначений.ЗакрытиеФормы = Истина;
		ЭтаФорма.Закрыть();
	
	КонецЕсли; 
	
КонецПроцедуры // ОкончаниеЗаписатьИзмененияКлиент()

// Процедура локальное окончание процедуры "ЗаписатьИзмененияКлиент".
// 
&НаКлиенте 
Процедура ЛокальноеОкончаниеЗаписатьИзмененияКлиент(ЗаписатьИЗакрыть)
	
	ОтменаРучнойКорректировки = ?(мКэшЗначений.РучнаяКорректировка
								  И Не Объект.РучнаяКорректировка, Истина, Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект.ДокументСсылка);
	
	ИмяДокумента   = "Документ." + мКэшЗначений.ИмяДокумента + ".ФормаОбъекта";
	ФормаДокумента = ПолучитьФорму(ИмяДокумента, ПараметрыФормы);
	ФормаОткрыта   = ?(ФормаДокумента.Открыта(), Истина, Ложь);
	
	// Синхронизацию ручной корректировки выполняем из формы обработки.
	СинхронизацияВыполненаИзФормы = Ложь;
	СинхронизацияВыполнена = СинхронизироватьРучнуюКорректировку(СинхронизацияВыполненаИзФормы, ЗаписатьИЗакрыть);
	
	Если Не СинхронизацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	// ДействиеВыполнено = Истина;
	
	//1c-izhtc spawn (
	Если ФормаОткрыта Тогда 
		ФормаДокумента.Прочитать();
	КонецЕсли;
	//1c-izhtc spawn )
	
	// Ручная корректировка синхронизирована - закэшируем новое значение.
	мКэшЗначений.РучнаяКорректировка = Объект.РучнаяКорректировка;
	
	Если ОтменаРучнойКорректировки Тогда
		
		мКэшЗначений.ИзмененныеРегистры.Очистить();
		Модифицированность = Ложь;
		
		мКэшЗначений.ЗакрытиеФормы = Истина;
		ЭтаФорма.Закрыть();
		
	Иначе
		
		ОкончаниеЗаписатьИзмененияКлиент();
		
	КонецЕсли;	
		
КонецПроцедуры // ЛокальноеОкончаниеЗаписатьИзмененияКлиент()

// Процедура окончание вопроса в процедуре "ЗаписатьИзмененияКлиент".
// 
&НаКлиенте 
Процедура ВопросЗаписатьИзмененияКлиентОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЛокальноеОкончаниеЗаписатьИзмененияКлиент(ДополнительныеДанные);
		
	КонецЕсли; 
                
КонецПроцедуры // ВопросЗаписатьИзмененияКлиентОкончание()

// Функция получает имя регистра бухгалтерии из имени элемента.
// 
// Параметры:
//  ИмяЭлемента - Строка.
// 
// Возвращаемое значение:
//  ИмяДополнительногоРегистра - Строка.
// 
&НаКлиенте 
Функция ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента(ИмяЭлемента)
	
	Если Найти(ИмяЭлемента, "бит_Дополнительный") > 0 Тогда
		ДлиннаИмени = СтрДлина("бит_Дополнительный") + 2;
	ИначеЕсли Найти(ИмяЭлемента, "СБ_КорректировкаРСБУ") > 0 Тогда
		ДлиннаИмени = СтрДлина("СБ_КорректировкаРСБУ");
	Иначе
		ДлиннаИмени = СтрДлина("бит_Бюджетирование");
	КонецЕсли;
	
	ИмяДополнительногоРегистра = Лев(ИмяЭлемента, ДлиннаИмени);
	
	Возврат ИмяДополнительногоРегистра;
	
КонецФункции // ПолучитьИмяРегистраБухгалтерииИзИмениЭлемента();

// Процедура фиксирует изменение движений регистра.
// 
// Параметры:
//  ИмяРегистра - Строка.
// 
&НаКлиенте 
Процедура ЗафиксироватьИзменениеДвиженийРегистра(ИмяРегистра)
	
	Модифицированность = Истина;
	
	мКэшЗначений.ИзмененныеРегистры.Вставить(ИмяРегистра);
	
КонецПроцедуры // ЗафиксироватьИзменениеДвиженийРегистра()

// Функция получает максимальное количество субконто плана счетов регистра бухгалтерии. Клиент.
// 
// Параметры:
//  ИмяРегистра - Строка.
// 
// Возвращаемое значение:
//  МаксКоличествоСубконто - Число.
// 
&НаКлиенте 
Функция ПолучитьМаксКоличествоСубконтоКлиент(ИмяРегистра)
	
	МаксКоличествоСубконто = мКэшЗначений.СоотвРегистрыБухгалтерии.Получить(ИмяРегистра);
	МаксКоличествоСубконто = ?(МаксКоличествоСубконто = Неопределено, 0, МаксКоличествоСубконто);
	
	Возврат МаксКоличествоСубконто;
	
КонецФункции // ПолучитьМаксКоличествоСубконтоКлиент()

&НаСервере
Процедура УстановитьУсловноеОформлениеДоп2()
	
	УсловноеОформление.Элементы.Очистить();

	Для Сч = 1 По 4 Цикл

		///////////////////////
		// Субконто Дт
		
		// Не показываем субконто совсем, если его нет на счете, чтобы не занимать строку на экране,
		// в том числе и первое субконто, т.к. первой строкой идет счет, 
		// который есть всегда, то и колонка тоже будет отображаться всегда.
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2СубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.бит_Дополнительный_2.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
		
		// Пустое субконто в виде "<...>"

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2СубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.бит_Дополнительный_2.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.бит_Дополнительный_2.СубконтоДт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
	

		///////////////////////
		// Субконто Кт
		
		// Не показываем субконто совсем, если его нет на счете, чтобы не занимать строку на экране,
		// в том числе и первое субконто, т.к. первой строкой идет счет, 
		// который есть всегда, то и колонка тоже будет отображаться тоже всегда.

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2СубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.бит_Дополнительный_2.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		
		// Пустое субконто в виде "<...>"
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2СубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.бит_Дополнительный_2.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.бит_Дополнительный_2.СубконтоКт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;


	////////////////////////
	//// ПодразделениеДт

	//ЭлементУО = УсловноеОформление.Элементы.Добавить();

	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеДт");

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"ХозрасчетныйНаборЗаписей.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"ХозрасчетныйНаборЗаписей.ПодразделениеДт", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	//// ХозрасчетныйПодразделениеДт

	//ЭлементУО = УсловноеОформление.Элементы.Добавить();

	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеДт");

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"ХозрасчетныйНаборЗаписей.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	////////////////////////
	//// ПодразделениеКт

	//ЭлементУО = УсловноеОформление.Элементы.Добавить();

	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеКт");

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"ХозрасчетныйНаборЗаписей.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"ХозрасчетныйНаборЗаписей.ПодразделениеКт", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	//// ХозрасчетныйПодразделениеКт

	//ЭлементУО = УсловноеОформление.Элементы.Добавить();

	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеКт");

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"ХозрасчетныйНаборЗаписей.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	//////////////////////
	// Количество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2НадписьКолДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2КоличествоДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.бит_Дополнительный_2.КоличественныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"Объект.бит_Дополнительный_2.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйНадписьКоличествоКт, ХозрасчетныйКоличествоКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2НадписьКолКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2КоличествоКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.бит_Дополнительный_2.КоличественныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"Объект.бит_Дополнительный_2.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	//////////////////////
	// Валюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2ВалютаДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2ВалютнаяСуммаДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.бит_Дополнительный_2.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2ВалютаКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "бит_Дополнительный_2ВалютнаяСуммаКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.бит_Дополнительный_2.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//// КнигаУчетаДоходовИРасходовДоходТорговыйСбор
	//
	//ЭлементУО = УсловноеОформление.Элементы.Добавить();

	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаУчетаДоходовИРасходовДоходТорговыйСбор");

	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	//	"РаздельныйУчетУСНТорговыйСбор", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
