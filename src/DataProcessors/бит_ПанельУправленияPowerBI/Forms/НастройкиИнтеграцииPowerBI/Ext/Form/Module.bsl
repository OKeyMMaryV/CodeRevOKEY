
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек	= бит_PowerBIСлужебный.ПолучитьНастройикPowerBI();
	ДатаНачала			= СтруктураНастроек.ДатаНачала;
	ДатаОкончания		= СтруктураНастроек.ДатаОкончания;
	
	Если НЕ ПустаяСтрока(СтруктураНастроек.FTPАдрес) Тогда
		Элементы.ПараметрыFTPСоединение.Заголовок = СтруктураНастроек.FTPАдрес;
	КонецЕсли;
	
	// Обновление состояния элементов.
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьФайловогоКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаОкончания)
		И ДатаНачала > ДатаОкончания Тогда
		ДатаНачала = Дата(1,1,1);	
	КонецЕсли; 
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачала)
		И ДатаОкончания < ДатаНачала Тогда
		ДатаОкончания = Дата(1,1,1);	
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВыгрузкуПоРасписаниюPowerBIПриИзменении(Элемент)
	
	ОчиститьСообщения();
	Если бит_PowerBIВызовСервера.ПолучитьЛицензиюPowerBI() = Ложь Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПредставлениеОбъекта", "Выгружать файлы на FTP по расписанию");
		ОткрытьФорму("Обработка.бит_ПанельУправленияPowerBI.Форма.ПредупреждениеСистемыЛицензирования", ПараметрыФормы);
		НаборКонстант.бит_ИспользоватьВыгрузкуПоРасписаниюPowerBI = НЕ НаборКонстант.бит_ИспользоватьВыгрузкуПоРасписаниюPowerBI;
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьПараметрыFTPСоединения(Команда)
	
	ОчиститьСообщения();
	Если бит_PowerBIВызовСервера.ПолучитьЛицензиюPowerBI() = Ложь Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПредставлениеОбъекта", "Параметры FTP-соединения");
		ОткрытьФорму("Обработка.бит_ПанельУправленияPowerBI.Форма.ПредупреждениеСистемыЛицензирования", ПараметрыФормы);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НастроитьПараметрыFTPСоединенияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.бит_ПанельУправленияPowerBI.Форма.НастройкиFTPCоединения", , ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыFTPСоединенияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) Тогда
		Элементы.ПараметрыFTPСоединение.Заголовок = НСтр("ru='Параметры FTP-соединения';en='Parameters of FTP-connections'");
	Иначе
		Элементы.ПараметрыFTPСоединение.Заголовок = Результат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", ПолучитьИдентификаторРегламентногоЗадания());
	ПараметрыФормы.Вставить("Действие",      "Изменить");
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлыВручную(Команда)
	
	ОчиститьСообщения();
	ИдентификаторЗадания = Неопределено;
	ПодключитьОбработчикОжидания("ВыгрузитьФайлыВручнуюНаFTP", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = ДатаНачала;
	Диалог.Период.ДатаОкончания = ДатаОкончания;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		ДатаНачала = Период.ДатаНачала;
		ДатаОкончания  = Период.ДатаОкончания;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ДатаНачала,	Ложь);
		Подключаемый_ПриИзмененииРеквизита(Элементы.ДатаОкончания, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ВыборКаталога.Каталог = КаталогФайлов;
	ВыборКаталога.Показать(Новый ОписаниеОповещения("КаталогФайловЗавершениеВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		КаталогФайлов = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлыВКаталог(Команда)
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(КаталогФайлов) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле" , "Заполнение", "Каталог файлов обмена");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КаталогФайлов");
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	ПодключитьОбработчикОжидания("ВыгрузитьФайлыВЛокальныйКаталог", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, НеобходимоОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если НеобходимоОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "ДатаНачала"
		ИЛИ РеквизитПутьКДанным = "ДатаОкончания" Тогда
		
		ЗначениеКонстанты = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
		СтруктураНастроек = бит_PowerBIСлужебный.ПолучитьНастройикPowerBI();
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЗначениеКонстанты);
		Константы.бит_НастройкиPowerBI.Установить(Новый ХранилищеЗначения(СтруктураНастроек));
		
		Возврат "";
	КонецЕсли;
	
	// Сохранение значений реквизитов, не связанных с константами напрямую.
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере 
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.бит_ИспользоватьВыгрузкуПоРасписаниюPowerBI" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.НастроитьРасписание.Доступность = НаборКонстант.бит_ИспользоватьВыгрузкуПоРасписаниюPowerBI;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьИдентификаторРегламентногоЗадания();
	
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное("бит_ВыгрузкаФайловPowerBI");
	Возврат РегЗадание.УникальныйИдентификатор;
	
КонецФункции


&НаКлиенте
Процедура УстановитьВидимостьФайловогоКаталога()
	
#Если Не ВебКлиент Тогда
	// В тонком и толстом клиентах расширение подключено всегда.
	Элементы.КаталогФайлов.Видимость = Истина;
	Возврат;
#КонецЕсли

	// Поле ввода файлового каталога видимо, если подключено расширение работы с файлами.
	ТекстСообщения = НСтр("ru='Для обмена с банками файлами рекомендуется установить расширение для веб-клиента 1С:Предприятие.';en='For exchanging files with banks recommend that you install the extension for Web client 1C: Enterprise.'");
	Обработчик = Новый ОписаниеОповещения("УстановитьВидимостьФайловогоКаталогаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьФайловогоКаталогаЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Элементы.КаталогФайлов.Видимость = Подключено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлыВручнуюНаFTP()
	
	МассивСообщений = Неопределено;
	ДлительнаяОперация = ВыгрузитьФайлыВручнуюНаFTPСервер();
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		АдресХраненияРезультата = ДлительнаяОперация.АдресРезультата;
		ДлительнаяОперация.Свойство("Сообщения", МассивСообщений);
		//ЗаписатьРезультатВыгрузкиВФайлы();
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииОперацииВыгрузкиFTP", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция ВыгрузитьФайлыВручнуюНаFTPСервер()
	
	АдресХраненияРезультата = "";
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЭтоКоманда", Истина);	
	
	ИмяПроцедуры = "бит_PowerBIСлужебный.ВыгрузитьФайлыPowerBI";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Ручная выгрузка данных Power BI на FTP-сервер';en='Manual unloading of Power BI data to FTP-server'");
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьФайлыВЛокальныйКаталог()
	
	МассивСообщений = Неопределено;
	ДлительнаяОперация = ВыгрузитьФайлыВЛокальныйКаталогСервер();
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		АдресХраненияРезультата = ДлительнаяОперация.АдресРезультата;
		ДлительнаяОперация.Свойство("Сообщения", МассивСообщений);
		ЗаписатьРезультатВыгрузкиВФайлы();
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииОперацииВыгрузки", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьФайлыВЛокальныйКаталогСервер()
	
	АдресХраненияРезультата = "";
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СписокАдресов", ПолучитьСписокАдресов());	
	
	ИмяПроцедуры = "бит_PowerBIСлужебный.ПодготовитьФайлыPowerBIКлиент";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Выгрузка данных Power BI';en='Upload data Power BI'");
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция ПолучитьСписокАдресов();
	
	СписокЗаданий = бит_PowerBIСлужебный.ПолучитьСписокЗаданий();
	Для Каждого Задание Из СписокЗаданий Цикл
		Задание.Представление = ПоместитьВоВременноеХранилище("",УникальныйИдентификатор);
	КонецЦикла;
    Возврат СписокЗаданий;
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииОперацииВыгрузкиFTP(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выгрузка данных завершена неудачно. Отсутствует результат выгрузки.';en='Upload data failed. No discharge result.'"));
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Если Результат.КраткоеПредставлениеОшибки = "Не удалось получить лицензию Power BI." Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПредставлениеОбъекта", "Выгрузить файлы вручную");
			ОткрытьФорму("Обработка.бит_ПанельУправленияPowerBI.Форма.ПредупреждениеСистемыЛицензирования", ПараметрыФормы);
		Иначе
			ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		КонецЕсли;
	Иначе	
		ИдентификаторЗадания = Неопределено;
		ТекстОповещения = НСтр("ru='Выгрузка файлов Power BI на FTP завершена.';en='Uploading files is completed Power BI to FTP.'");
		ПоказатьОповещениеПользователя(НСтр("ru='Интеграция с Power BI';en='Integration with Power BI'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОперацииВыгрузки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выгрузка данных завершена неудачно. Отсутствует результат выгрузки.';en='Upload data failed. No discharge result.'"));
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Если Результат.КраткоеПредставлениеОшибки = "Не удалось получить лицензию Power BI." Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПредставлениеОбъекта", "Выгрузить файлы в каталог");
			ОткрытьФорму("Обработка.бит_ПанельУправленияPowerBI.Форма.ПредупреждениеСистемыЛицензирования", ПараметрыФормы);
		Иначе
			ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		КонецЕсли;
	Иначе	
		АдресХраненияРезультата = Результат.АдресРезультата;
		ЗаписатьРезультатВыгрузкиВФайлы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультатВыгрузкиВФайлы()
	
	ОповещениеПолученФайл = Новый ОписаниеОповещения("ПолученФайлВыгрузки", ЭтотОбъект);
	Результат = ПолучитьИзВременногоХранилища(АдресХраненияРезультата);
	Если Результат = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выгрузка данных завершена неудачно. Отсутствует результат выгрузки.';en='Upload data failed. No discharge result.'"));
	Иначе
		ПолучаемыеФайлы = Новый Массив;
		Для Каждого ФайлВыгрузки Из Результат Цикл
			ФайлВыгрузки = Новый ОписаниеПередаваемогоФайла(ФайлВыгрузки.Ключ, ФайлВыгрузки.Значение);
			ПолучаемыеФайлы.Добавить(ФайлВыгрузки);
		КонецЦикла;
		НачатьПолучениеФайлов(ОповещениеПолученФайл, ПолучаемыеФайлы, КаталогФайлов, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученФайлВыгрузки(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выгрузка данных завершена неудачно. Отсутствует результат выгрузки.';en='Upload data failed. No discharge result.'"));
	КонецЕсли;
	ИдентификаторЗадания = Неопределено;
	УдалитьИзВременногоХранилища(АдресХраненияРезультата);
	Для Каждого Файл Из ПолученныеФайлы Цикл
		УдалитьИзВременногоХранилища(Файл.Хранение);
	КонецЦикла;
	ТекстОповещения = НСтр("ru='Выгрузка файлов Power BI в локальный каталог завершена.';en='Unloading Power BI files to a local directory is completed.'");
	ПоказатьОповещениеПользователя(НСтр("ru='Интеграция с Power BI';en='Integration with Power BI'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти
