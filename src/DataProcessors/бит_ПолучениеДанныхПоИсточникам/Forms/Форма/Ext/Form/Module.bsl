
#Область ОписаниеПеременных

// Служит для передачи вида сравнения между обработчиками.
&НаКлиенте
Перем мТекущийВидСравнения;
// Служит для передачи вида параметра между обработчиками.
&НаКлиенте
Перем мТекущийВидПараметра;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	ПолноеИмяОбъекта = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтаФорма.ИмяФормы, Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	// Кэширование значений, используемых на клиенте.
	ЗаполнитьКэшЗначений();      
	
	// Восстановление настройки по-умолчанию
	УстановитьЗначенияПоУмолчанию();	
	
	Параметры.Свойство("Организация"          , Объект.Организация);
	Параметры.Свойство("Сценарий"             , Объект.Сценарий);
	Параметры.Свойство("ЦФО"                  , Объект.ЦФО);
	Параметры.Свойство("ВалютаДокумента"      , Объект.ВалютаДокумента);
	Параметры.Свойство("КурсДокумента"        , Объект.КурсДокумента);
	Параметры.Свойство("КратностьДокумента"   , Объект.КратностьДокумента);
	Параметры.Свойство("ИмяЗаполняемойТаблицы", Объект.ИмяЗаполняемойТаблицы);
	
	Если Параметры.Свойство("Дата") Тогда
		
		Объект.СтандартныйПериод.ДатаНачала    = НачалоМесяца(Параметры.Дата);
		Объект.СтандартныйПериод.ДатаОкончания = КонецМесяца(Параметры.Дата);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ФормаКомандаВидимостьНастройки.Пометка = НЕ ПанельНастройкиСкрыта;
	УстановитьВидимость();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                                                   ,Элемент
	                                                   ,Объект
	                                                   ,"ИсточникДанных"
													   ,фКэшЗначений.СписокТиповИсточникДанных
													   ,СтандартнаяОбработка);
	
	
КонецПроцедуры // ИсточникДанныхНачалоВыбора()

&НаКлиенте
Процедура ИсточникДанныхОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ИсточникДанных.ВыбиратьТип = Истина;
	
КонецПроцедуры // ИсточникДанныхОчистка()

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	ИсточникДанныхИзменение();	
	
КонецПроцедуры // ИсточникДанныхПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборвотчете

// Процедура - обработчик события "НачалоВыбора" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВидовСравнения); 
	
КонецПроцедуры // ОтборВОтчетеВидСравненияНачалоВыбора()

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВидовСравнения);
	
КонецПроцедуры // ОтборВОтчетеВидСравненияАвтоПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеВидСравненияПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеЗначениеПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеВидСравненияПриИзмененииСервер(Ид, мТекущийВидСравнения)
		
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеВидСравненияПриИзменении(ТекущиеДанные, мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеЗначениеПриИзмененииСервер(Ид)
	
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеЗначениеПриИзменении(ТекущиеДанные);
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ОтборВОтчете.ТекущиеДанные;	
	
	Если ТекущаяСтрока.Значение = Неопределено Тогда
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
		
	Иначе	
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОтборВОтчетеПриОкончанииРедактирования()

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеОчистка" 
// табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	
КонецПроцедуры // ОтборВОтчетеЗначениеОчистка()

// Процедура заполняет таблицу отборов. 
// 
&НаСервере
Процедура ЗаполнитьТаблицуОтборов()

	ТаблицаОтборов = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(Объект.ИсточникДанных, ТаблицаОтборов);
	ЗначениеВДанныеФормы(ТаблицаОтборов, ОтборВОтчете);	

КонецПроцедуры // ЗаполнитьТаблицуОтборов()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметры

// Процедура выполняет обновление таблицы параметров.
// 
&НаСервере
Процедура ОбновитьТаблицуПараметров()
	
	бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Объект.ИсточникДанных, ТаблицаПараметры, Ложь);
	
КонецПроцедуры // ОбновитьТаблицуПараметров()

// Процедура - обработчик события "ПриНачалеРедактирования" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;	 	
	
	Если НоваяСтрока И НЕ Копирование Тогда  		
		ТекущиеДанные.ВидПараметра = ПредопределенноеЗначение("Перечисление.бит_ВидыПараметровЗапроса.Значение");   			
	КонецЕсли; 
	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	ОграничитьОписаниеТиповПараметра();
	
КонецПроцедуры // ТаблицаПараметрыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыВидПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИД = Элементы.ТаблицаПараметры.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменитьВидПараметра(ИД, мТекущийВидПараметра);
		
		мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
		
		ОграничитьОписаниеТиповПараметра();
				
	КонецЕсли; 
		
КонецПроцедуры // ТаблицаПараметрыВидПараметраПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗначениеПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные        = Элементы.ТаблицаПараметры.ТекущиеДанные;	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	Если мТекущийВидПараметра = ПредопределенноеЗначение("Перечисление.бит_ВидыПараметровЗапроса.Выражение") Тогда  		
		СтандартнаяОбработка = Ложь;			
	КонецЕсли;

КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраНачалоВыбора()

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПараметра = ПредопределенноеЗначение("Перечисление.бит_ВидыПараметровЗапроса.Значение") Тогда		
		Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраОчистка()

// Процедура ограничивает описание типов в строке таблица параметров.
// 
&НаКлиенте
Процедура ОграничитьОписаниеТиповПараметра()

	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если мТекущийВидПараметра = ПредопределенноеЗначение("Перечисление.бит_ВидыПараметровЗапроса.Выражение") Тогда
			
		ОписаниеОграничение = фКэшЗначений.ОписаниеТипаСтрока;
		
	Иначе
		
		Если ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда  		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина; 		
		Иначе	                                                        		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Ложь;  		
		КонецЕсли; 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоступныеТипы) Тогда
			ОписаниеОграничение = Новый ОписаниеТипов(ТекущиеДанные.ДоступныеТипы, МассивТипов);
		Иначе		
			ОписаниеОграничение = Новый ОписаниеТипов(фКэшЗначений.ОписаниеПроизвольногоТипа, МассивТипов);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Ограничим тип значения
	Элементы.ТаблицаПараметрыЗначениеПараметра.ОграничениеТипа = ОписаниеОграничение;  

КонецПроцедуры // ОграничитьОписаниеТиповПараметра()

// Процедура выполняет действия, неоходимые при изменении вида параметра.
// 
// Параметры:
//  ИД  				 - Число.
//  мТекущийВидПараметра - ПеречислениеСсылка.бит_ВидыПараметровЗапроса.
// 
&НаСервере
Процедура ИзменитьВидПараметра(ИД, мТекущийВидПараметра)

	ТекущиеДанные = ТаблицаПараметры.НайтиПоИдентификатору(ИД);
	бит_МеханизмПолученияДанных.ИзменениеВидаПараметра(ТекущиеДанные, мТекущийВидПараметра);

КонецПроцедуры // ИзменитьВидПараметра()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаданные

&НаКлиенте
Процедура ТаблицаДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Исключения = Новый Массив;
	Исключения.Добавить("ТаблицаДанныеВыполнять");
	Исключения.Добавить("ТаблицаДанныеПериод");
	
	Если Исключения.Найти(Поле.Имя) = Неопределено Тогда
		
		ИмяРеквизита = СтрЗаменить(Поле.Имя, "ТаблицаДанные_","");
		ТекСтрока = Элементы.ТаблицаДанные.ТекущиеДанные;
		ТекЗначение = ТекСтрока[ИмяРеквизита];
		
		Если ЗначениеЗаполнено(ТекЗначение) Тогда
		
			ПоказатьЗначение(,ТекЗначение);
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаДанныеВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВидимостьНастройки(Команда)
	
	ЭтаФорма.ПанельНастройкиСкрыта = НЕ ЭтаФорма.ПанельНастройкиСкрыта;
	Элементы.ФормаКомандаВидимостьНастройки.Пометка = НЕ ЭтаФорма.ПанельНастройкиСкрыта;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	Если ПодтверждениеОчисткиДанных() Тогда
		
		ОбновитьДанные();
		
	КонецЕсли; 
	
КонецПроцедуры // КомандаОбновить()

&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаДанные, "Выполнять", 1);
	
КонецПроцедуры // КомандаУстановитьВсе()

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаДанные, "Выполнять", 0);
	
КонецПроцедуры // КомандаСнятьВсе()

&НаКлиенте
Процедура КомандаИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаДанные, "Выполнять", 2);
	
КонецПроцедуры // КомандаИнвертировать()

&НаКлиенте
Процедура КомандаДобавить(Команда)
	
	ОповеститьОВыбореДанных("Добавить");
	
КонецПроцедуры // КомандаДобавить()

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	ОповеститьОВыбореДанных("Заполнить");
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Объект, "СтандартныйПериод");
	
КонецПроцедуры // КомандаНастроитьПериод()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСНастройками

// Процедура - действие команды "КомандаСохранитьНастройки".
// 
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда	
		ПараметрыФормы.Вставить("СохраненнаяНастройка", ТекущаяНастройка);  	
	КонецЕсли; 
		
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ЗакрытиеФормыСохранения", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,, ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаСохранитьНастройки()

// Обработка закрытия окна формы. 
// 
// Параметры:
//  СохрНастройка - .
// 
&НаКлиенте
Процедура ЗакрытиеФормыСохранения(СохрНастройка, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		
		ТекущаяНастройка = СохрНастройка;
		УстановитьЗаголовокФормы();
		
	КонецЕсли;

КонецПроцедуры // ЗакрытиеФормыСохранения()

// Процедура - действие команды "КомандаВосстановитьНастройки".
// 
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ЗакрытиеФормаЗагрузки", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,, ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры // КомандаВосстановитьНастройки()

// Обработка оповещения закрытия окна формы. 
// 
// Параметры:
//  ВыбНастройка - .
// 
&НаКлиенте
Процедура ЗакрытиеФормаЗагрузки(ВыбНастройка, ДопПараметры) Экспорт

	Если ЗначениеЗаполнено(ВыбНастройка) Тогда        
		
		ПрименитьНастройки(ТекущаяНастройка);
		
	КонецЕсли;

КонецПроцедуры // ЗакрытиеФормаЗагрузки()

// Функция готовит стуктуру с настройками для сохранения.
// 
// Возвращаемое значение:
//   СтруктураНастройки   - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастройки = Новый Структура;
	
	СтруктураНастройки.Вставить("ИсточникДанных"    , Объект.ИсточникДанных);
	СтруктураНастройки.Вставить("СтандартныйПериод" , Объект.СтандартныйПериод);
	
	ТабОтбор = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	СтруктураНастройки.Вставить("ОтборВОтчете", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабОтбор));
	
	ТабПараметры = ДанныеФормыВЗначение(ТаблицаПараметры, Тип("ТаблицаЗначений"));
	СтруктураНастройки.Вставить("ТаблицаПараметры", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабПараметры));
	
	Возврат СтруктураНастройки;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Функция применяет сохраненные настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Функция ПрименитьНастройки(ВыбНастройка)

	флВыполнено = Ложь;
	
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			флВыполнено = Истина;
			
			Объект.ИсточникДанных  = СтруктураНастроек.ИсточникДанных;
			Объект.СтандартныйПериод = СтруктураНастроек.СтандартныйПериод;
			
			Таблица_ОтборВОтчете = ?(ТипЗнч(СтруктураНастроек.ОтборВОтчете) = Тип("ТаблицаЗначений")
										, СтруктураНастроек.ОтборВОтчете
										, бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ОтборВОтчете));
			Таблица_Параметры    = ?(ТипЗнч(СтруктураНастроек.ТаблицаПараметры) = Тип("ТаблицаЗначений")
										, СтруктураНастроек.ТаблицаПараметры
										, бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ТаблицаПараметры));
			
			ЗначениеВДанныеФормы(Таблица_ОтборВОтчете, ОтборВОтчете);
			ЗначениеВДанныеФормы(Таблица_Параметры   , ТаблицаПараметры);
			
			ТекущаяНастройка = ВыбНастройка;
			УстановитьЗаголовокФормыСервер();				
			
		КонецЕсли;	 
		
	КонецЕсли; 
	
	УстановитьВидимость();
	 
	 Возврат флВыполнено;
	 
КонецФункции // ПрименитьНастройки()

// Процедура устанавливает настройку либо из последних использованных, либо из настройки по умолчанию.
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	// Получим настройку по - умолчанию и последнюю использованну.
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда 		
		ПрименитьНастройки(НастройкаПоУмолчанию);    		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Функция запрашивает у пользователя подтверждение на очистку данных.
// 
// Параметры:
//   вхТекст - Строка
// 
// Возвращаемое значение:
//  флВыполнять - Булево.
// 
&НаКлиенте
Функция ПодтверждениеОчисткиДанных(вхТекст = "")
	
	флВыполнять = Истина;
	
	Если ТаблицаДанные.Количество() > 0  Тогда
		
		флВыполнять = Ложь;

		Если ПустаяСтрока(вхТекст) Тогда
			ТекстВопроса =  НСтр("ru = 'Данные будут очищены. Продолжить?'");
		Иначе	
			ТекстВопроса = вхТекст;
		КонецЕсли; 
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьВопросЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	
	КонецЕсли; 
	
	Возврат флВыполнять;
	
КонецФункции // ПодтверждениеОчисткиДанных()

// Процедура обработчик оповещения "КомандаОбновитьВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура КомандаОбновитьВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
	     // Выполнение по запросу от пользователя
		 ОбновитьДанные();
	
	КонецЕсли; 
	
КонецПроцедуры	// КомандаОбновитьВопросЗавершение

// Процедура опововещает форму-владельца о выборе данных.
// 
// Параметры:
//  Режим - Строка.
// 
&НаКлиенте
Процедура ОповеститьОВыбореДанных(Режим)

	РезСтруктура = СформироватьСтруктуруРезультата(Режим);
	
	Если РезСтруктура.КоличествоСтрок > 0 Тогда
		
		ОповеститьОВыборе(РезСтруктура);
		
	Иначе
		
	    ТекстСообщения =  НСтр("ru = 'Не выбраны строки для переноса в документ.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 

КонецПроцедуры // ОповеститьОВыбореДанных()

// Функция формирует заголовок формы обработки.
// 
// Параметры:
//  ТекущаяНастройка - СправочникСсылка.бит_СохраненныеНастройки.
// 
// Возвращаемое значение:
//  СтрЗаголовок - Строка.
// 
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокФормы(ТекущаяНастройка)

	СтрЗаголовок =  НСтр("ru = 'Получение данных по источникам'");

	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		СтрЗаголовок = СтрЗаголовок + "("+ТекущаяНастройка+")";
	
	КонецЕсли; 
	
	Возврат СтрЗаголовок;
	
КонецФункции // СформироватьЗаголовокФормы()

// Процедура устанавливает заголовок формы на клиенте.
// 
&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	ЭтаФорма.Заголовок = СформироватьЗаголовокФормы(ТекущаяНастройка);
	
КонецПроцедуры // УстановитьЗаголовокФормы()

#КонецОбласти

#Область ПрочиеСерверныеПроцедурыИФункции

// Процедура кеширует значения, в дальнейшем используемые на клиенте. 
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Заполним список типов для быстрого выбора составного.
	МассивТипов  = Метаданные.Обработки.бит_ПолучениеДанныхПоИсточникам.Реквизиты.ИсточникДанных.Тип.Типы();
	СписокВыбора = бит_ОбщегоНазначения.ПодготовитьСписокВыбораТипа(МассивТипов);
	фКэшЗначений.Вставить("СписокТиповИсточникДанных", СписокВыбора);
	фКэшЗначений.Вставить("МассивВидовСравнения"	 , бит_МеханизмПолученияДанных.СформироватьСписокВыбораДляОтборовВОтчете("Массив"));
	
	фКэшЗначений.Вставить("ТекущийПользователь"		 , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	фКэшЗначений.Вставить("НастраиваемыйОбъект"		 , Метаданные.Обработки.бит_ПолучениеДанныхПоИсточникам.ПолноеИмя());
	фКэшЗначений.Вставить("ТипНастройки"             , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	КвСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов, , КвСтроки);
	фКэшЗначений.Вставить("ОписаниеТипаСтрока", ОписаниеТипаСтрока);
	фКэшЗначений.Вставить("ОписаниеПроизвольногоТипа", бит_ОбщегоНазначения.ОписаниеПроизвольногоТипа());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавливает значения параметров и значения отборов по определенному имени.
// Используется при открытии из операции для установки отборов по сценарию или организации.
// 
// Параметры:
//  Имя - Строка.
//  ЗначениеОтбора - Произвольный.
// 
&НаСервере
Процедура УстановитьОбязательныеОтборы(Имя, ЗначениеОтбора)
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		СтрОтбор = Новый Структура("ИмяПараметра", Имя);
		
		МассивСтрок = ТаблицаПараметры.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			СтрокаТаблицы.ЗначениеПараметра = ЗначениеОтбора;
			
		КонецЦикла; 
		
		СтрОтбор = Новый Структура("Имя", Имя);
		
		МассивСтрок = ОтборВОтчете.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			СтрокаТаблицы.Значение = ЗначениеОтбора;
			СтрокаТаблицы.Использование = Истина;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьОбязательныеОтборы()

// Обрабатывает изменение источника данных. 
// 
&НаСервере
Процедура ИсточникДанныхИзменение()
	
	ЗаполнитьТаблицуОтборов();
	ОбновитьТаблицуПараметров();
	
	УстановитьОбязательныеОтборы("Сценарий"   , Объект.Сценарий);
	УстановитьОбязательныеОтборы("Организация", Объект.Организация);
	УстановитьОбязательныеОтборы("ЦФО", Объект.ЦФО);
	
КонецПроцедуры // ИсточникДанныхИзменение()

// Процедура удаляет динамически созданные реквизиты и элементы формы.
// 
&НаСервере
Процедура УдалитьДинамическиеЭлементы()
	
	// Удаление "динамически созданных" реквизитов.
	МассивРеквизитов = ПолучитьРеквизиты("ТаблицаДанные");
	
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого РеквФормы Из МассивРеквизитов Цикл
		
		Если НЕ ВРег(РеквФормы.Имя) = ВРег("Выполнять") Тогда
			
			УдаляемыеРеквизиты.Добавить(РеквФормы.Путь+"."+РеквФормы.Имя);
			
		КонецЕсли; 
		
	КонецЦикла; // МассивРеквизитов
	
	ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	
	// Удаление "динамически созданных" элементов управления.	
	УдаляемыеЭлементы = Новый Массив;
	Для каждого ЭлФормы Из Элементы.ТаблицаДанные.ПодчиненныеЭлементы Цикл
		
		Если НЕ ВРег(ЭлФормы.Имя) = ВРег("ТаблицаДанныеВыполнять") Тогда
			
			// Удаляем динамические элементы шапки
			УдаляемыеЭлементы.Добавить(ЭлФормы);
			
			
		КонецЕсли; 
		
	КонецЦикла; // Элементы
	
	Для каждого ЭлФормы Из УдаляемыеЭлементы Цикл
		
		Элементы.Удалить(ЭлФормы);
		
	КонецЦикла; 
	
КонецПроцедуры // УдалитьДинамическиеЭлементы()

// Процедура добавляет реквизиты и элементы управления.
// 
&НаСервере
Процедура ДобавитьДинамическиеЭлементы(ТаблицаРезультат)
	
	// Динамическое создание реквизитов таблицы и колонок таблицы.
	ДобавляемыеРеквизиты = Новый Массив;		
	Для каждого ТекКолонка Из ТаблицаРезультат.Колонки Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(ТекКолонка.Имя, ТекКолонка.ТипЗначения, "ТаблицаДанные", ТекКолонка.Заголовок);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла; 
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для каждого ТекКолонка Из ТаблицаРезультат.Колонки Цикл
		
		ЭУ = Элементы.Добавить(ТекКолонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаДанные);
		ЭУ.ПутьКДанным = "ТаблицаДанные."+ТекКолонка.Имя;		
		ЭУ.Вид         = ВидПоляФормы.ПолеВвода;
		ЭУ.ТолькоПросмотр = Истина;
		
	КонецЦикла; 
	
	
КонецПроцедуры // ДобавитьДинамическиеЭлементы()

// Процедура обновляет таблицу данных по источникам данных. 
// 
&НаСервере
Процедура ОбновитьДанные()

	флОК = ПроверитьЗаполнение();
	
	Если НЕ флОК Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ТабОтборВОтчете  = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	ТабПараметры     = ДанныеФормыВЗначение(ТаблицаПараметры, Тип("ТаблицаЗначений"));
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВалютаОтчета"   , Объект.ВалютаДокумента);
	ДопПараметры.Вставить("КурсОтчета"     , Объект.КурсДокумента);
	ДопПараметры.Вставить("КратностьОтчета", Объект.КратностьДокумента);
	
	ТаблицаРезультат = Обработки.бит_ПолучениеДанныхПоИсточникам.ПолучитьДанные(Объект.ИсточникДанных
	                                                                                     , Объект.СтандартныйПериод
																						 , ТабОтборВОтчете
																						 , ТабПараметры
																						 , Объект.НастройкаПулаПодключений
																						 , ДопПараметры); 
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		
		ТекстСообщения =  НСтр("ru = 'Нет данных, удовлетворяющих отбору'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли; 

	ТаблицаДанные.Очистить();
	
	// Удаление реквизитов и колонок таблицы
	УдалитьДинамическиеЭлементы();
	
	// Динамическое создание реквизитов таблицы и колонок таблицы.
	ДобавитьДинамическиеЭлементы(ТаблицаРезультат);
	
	// Заполнение ТаблицаДанные
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
	
		НоваяСтрока = ТаблицаДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	
	КонецЦикла; 
	
КонецПроцедуры // ОбновитьДанные()

// Функция формирует структуру результата.
// 
// Параметры:
//   Режим - Строка
//  
// Возвращаемое значение:
//   Струкутура
// 
&НаСервере
Функция СформироватьСтруктуруРезультата(Режим)

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("Режим"	 , Режим);
	РезСтруктура.Вставить("ИмяКласса", "РезультатПолученияДанныхПоИсточникам");
	РезСтруктура.Вставить("ИмяЗаполняемойТаблицы", Объект.ИмяЗаполняемойТаблицы);
	
	МассивСтрок = Новый Массив;
	
	НайденныеСтроки = ТаблицаДанные.НайтиСтроки(Новый Структура("Выполнять", Истина));
	КолСтрок = НайденныеСтроки.Количество();
	РезСтруктура.Вставить("КоличествоСтрок", КолСтрок);
	
	Если КолСтрок > 0 Тогда
		ТабЗнДанные = ТаблицаДанные.Выгрузить(НайденныеСтроки);
	Иначе
		ТабЗнДанные = Неопределено;
	КонецЕсли;	
	
	ХранилищеДанные = бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабЗнДанные);
	РезСтруктура.Вставить("ХранилищеДанные", ХранилищеДанные);
		              
	Возврат РезСтруктура;
	
КонецФункции // СформироватьСтруктуруРезультата()

// Процедура устанавливает заголовок формы на сервере.
// 
&НаСервере
Процедура УстановитьЗаголовокФормыСервер()
	
	ЭтаФорма.Заголовок = СформироватьЗаголовокФормы(ТекущаяНастройка);
	
КонецПроцедуры // УстановитьЗаголовокФормыСервер()

// упрвляет видимостью элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()

	Элементы.ГруппаПараметры.Видимость = НЕ ПанельНастройкиСкрыта;

КонецПроцедуры // УстановитьВидимость()

#КонецОбласти

#КонецОбласти
