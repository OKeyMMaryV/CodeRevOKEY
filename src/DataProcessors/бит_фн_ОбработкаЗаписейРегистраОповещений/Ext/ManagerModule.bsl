#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция инициализирует компоновщик для получения записей 
// регистра сведений бит_фн_Оповещения для последующей обработки.
// 
// Параметры:
//  Компоновщик              - КомпоновщикНастроекСхемыКомпоновкиДанных.
//  УникальныйИдентификатор  - УникальныйИдентификатор.
// 
// Возвращаемое значение:
//   АдресСхемыКомпоновкиДанных   - Строка.
// 
//Функция ИнициализироватьКомпоновщик(Компоновщик,УникальныйИдентификатор) Экспорт
Функция ИнициализироватьКомпоновщик(Компоновщик,УникальныйИдентификатор	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-08-13 (#3231)	
	////ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-08 (#3334)
	//, ВидОперации) 
	////ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-08 (#3334)
	//Заменено на:
	, ВидОперации = Неопределено) 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-08-13 (#3231)
	Экспорт

	СхемаКомпоновкиДанных = Обработки.бит_фн_ОбработкаЗаписейРегистраОповещений.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-12 (#2984)
	пИзменяемыйНабор = СхемаКомпоновкиДанных.НаборыДанных.Найти("Оповещения");
	пКоличествоЗаписейДляОбработки = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("КоличествоЗаписейВПорцииДляОтправки");
	Если пИзменяемыйНабор<>Неопределено И ЗначениеЗаполнено(пКоличествоЗаписейДляОбработки) 
		 //ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-08 (#3334)
		 И ВидОперации <> Перечисления.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.Удалить
		 //ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-08 (#3334)
	Тогда 
		пИзменяемыйНабор.Запрос = СтрЗаменить(пИзменяемыйНабор.Запрос,"//#КоличествоЗаписейДляОбработки"," ПЕРВЫЕ " + Строка(пКоличествоЗаписейДляОбработки));
	КонецЕсли;
	//#КоличествоЗаписейДляОбработки
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-12 (#2984)
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
    Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции // ИнициализироватьКомпоновщик()

// Процедура устанавливает отбор компоновщика по статусу в зависимости от вида операции.
// 
// Параметры:                                                  
//  Компоновщик  - КомпоновщикНастроекКомпоновкиДанных.
//  ВидОперации  - ПеречислениеСсылка.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.
// 
Процедура УстановитьОтборыКомпоновщика(Компоновщик,ВидОперации) Экспорт

    Для каждого ЭлементОтбора Из Компоновщик.Настройки.Отбор.Элементы Цикл
	
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Статус" Тогда
			
			// Установим отбор по статусу в зависимости от вида операции.
			ЭлементОтбора.Использование = Истина;
			Если ВидОперации = Перечисления.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.ОтправитьОповещения Тогда
				
				ЭлементОтбора.ПравоеЗначение   = Перечисления.бит_фн_СтатусыОтправкиОповещений.ГотовоКОтправке;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				
			ИначеЕсли ВидОперации = Перечисления.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.Удалить Тогда
				
				ЭлементОтбора.ПравоеЗначение   = Перечисления.бит_фн_СтатусыОтправкиОповещений.Отправлено;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
				
			ИначеЕсли ВидОперации = Перечисления.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.ИзменитьСтатус Тогда	 
				
				ЭлементОтбора.ПравоеЗначение   = Перечисления.бит_фн_СтатусыОтправкиОповещений.ОшибкаОтправки;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
				
			КонецЕсли; 
			
			// Синхронизируем элемент пользовательских настроек с настройкой отбора.
			ЭлементПН = бит_ОбщегоНазначенияКлиентСервер.НайтиЭлементПользовательскойНастройки(ЭлементОтбора.ИдентификаторПользовательскойНастройки
			                                                                                   ,Компоновщик);
			Если НЕ ЭлементПН = Неопределено Тогда
				
				ЭлементПН.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
				ЭлементПН.Использование  = ЭлементОтбора.Использование;
				ЭлементПН.РежимОтображения = ЭлементОтбора.РежимОтображения;
				
			КонецЕсли; 
			 
		КонецЕсли; // Отбор по статусу
		
		//ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-08 (#3334)
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "ДатаОтправки" Тогда
			Если ВидОперации = Перечисления.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.Удалить Тогда
				ДатаОтбора = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Согласование по почте", "Дата отбора очистки сообщений", Дата('00010101'));
				Если ЗначениеЗаполнено(ДатаОтбора) Тогда
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ПравоеЗначение = ДатаОтбора;
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-08 (#3334)
	
	КонецЦикла; // По элементам отбора
	

КонецПроцедуры // УстановитьОтборыКомпоновщика()

// Функция выполняет запрос по настройке компновщика.
// 
// Параметры:
//  Компоновщик  - КомпоновщикНастроекКомпоновкиДанных.
//  АдресСхемыКомпоновкиДанных  - Строка.
//  ВидОперации  - ПеречислениеСсылка.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ВыполнитьЗапросПоНастройке(Компоновщик,АдресСхемыКомпоновкиДанных,ВидОперации)  Экспорт

	 СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);

	// Выполняем компановку макета МакетСКД
	// (настройки берутся из схемы компановки данных и из пользовательских настроек).
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки());
	
	// Получаем запрос макета компановки данных
	Запрос = Новый Запрос(МакетСКД.НаборыДанных.Оповещения.Запрос);
	
	Если ВидОперации = Перечисления.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.ОтправитьОповещения Тогда
		
		// Для целей оптимизации необходима группировка по НастройкамДоставки.
		Запрос.Текст = Запрос.Текст +"
		        |ИТОГИ ПО
                |	НастройкаДоставки";
	
	КонецЕсли; 
	
	// Устанавливаем параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;

	Результат = Запрос.Выполнить();

	Возврат Результат;
	
КонецФункции // ВыполнитьЗапросПоНастройке()

// Процедура отправляет оповещения.
// 
// Параметры:
//  Результат      - РезультатЗапроса.
//  РежимСообщений - Строка.
// 
Процедура ОтправитьОповещения(Результат = Неопределено,РежимСообщений = "Нет")  Экспорт
	
 РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);	
	
 Если Результат = Неопределено Тогда
	 
	 Результат = ПолучитьДанныеДляОбработки(Перечисления.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.ОтправитьОповещения);
 
 КонецЕсли; 	
 
 ВыборкаНастройкаДоставки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
 
 Пока ВыборкаНастройкаДоставки.Следующий() Цикл
	 
	// Получим обработку доставки и настройки доставки.
	ОбработкаДоставки = бит_фн_ОповещенияСервер.ПолучитьОбработкуДоставки(ВыборкаНастройкаДоставки.ОбработкаДоставки); 
	НастройкиДоставки = бит_фн_ОповещенияСервер.ПолучитьСтруктуруНастроекДоставки(ВыборкаНастройкаДоставки.НастройкаДоставки.НастройкиДоставки);
	
	Если НЕ ОбработкаДоставки = Неопределено Тогда
		
		Выборка = ВыборкаНастройкаДоставки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = НСтр("ru = 'Выполняется отправка сообщения %1% по адресу %2%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Выборка.ИД,Выборка.АдресПолучателя);
			бит_ОбщегоНазначения.бит_Состояние(ТекстСообщения);
			
			// Подготовим структуру сообщений и структуру параметров для отправки.
			СтруктураСообщения = Новый Структура;
			СтруктураСообщения.Вставить("Заголовок",Выборка.Сообщение_Заголовок);
			СтруктураСообщения.Вставить("Текст"    ,Выборка.Сообщение_Текст);
			СтруктураСообщения.Вставить("Подпись"  ,Выборка.Сообщение_Подпись);
			СтруктураСообщения.Вставить("Бейджи"   ,Выборка.Бейджи);
			//+СБ Пискунова #2691 10.03.2017
			СтруктураСообщения.Вставить("СБ_ФормаВводаБюджета"   ,Выборка.СБ_ФормаВводаБюджета); 
			//-СБ Пискунова #2691 10.03.2017
			
			СтруктураСообщения.Вставить("ТипТекстаСообщения",Выборка.ТипТекстаСообщения);
			
			СтруктураПараметров = Новый Структура("АдресПолучателя",Выборка.АдресПолучателя);
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-01 (#2975)
			Если ВыборкаНастройкаДоставки.НастройкаДоставки = 
				 СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаДоставки_ДляОтправкиПисемИзТонкойФормыФВБ")
			Тогда 
			
			    АдресЭлПочтыОтправителя = ПолучитьАдресЭлПочтыИнициатора(Выборка.Пользователь);
				
				Если Не ПустаяСтрока(АдресЭлПочтыОтправителя) Тогда 
					СтруктураПараметров.Вставить("EMailАдресОтправителя"	,	АдресЭлПочтыОтправителя);
				КонецЕсли;							    		
				
				ИнициаторEmail = "";
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	бит_ФормаВводаБюджета.бит_БК_Инициатор.Email КАК ИнициаторEmail
				|ИЗ
				|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
				|ГДЕ
				|	бит_ФормаВводаБюджета.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", Выборка.СБ_ФормаВводаБюджета);					
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда 
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
						ИнициаторEmail = СокрЛП(ВыборкаДетальныеЗаписи.ИнициаторEmail);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ИнициаторEmail) Тогда 
					СтруктураПараметров.Вставить("ИнициаторEmail"	,	ИнициаторEmail);
				КонецЕсли;
								
				//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-02-01 (#3103)
				//СтруктураПараметров.Вставить("ИдентификаторДляВложений", Выборка.ИД);
				//ОКЕЙ Наумов А.Н..(СофтЛаб) Конец 2018-02-01 (#3103)
				
			КонецЕсли;								
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-01 (#2975)
			
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-02-01 (#3103)
			СтруктураПараметров.Вставить("ИдентификаторДляВложений", Выборка.ИД);
			//ОКЕЙ Наумов А.Н..(СофтЛаб) Конец 2018-02-01 (#3103)
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-15 (#3778)
			СтруктураПараметров.Вставить("НастройкаДоставки", ВыборкаНастройкаДоставки.НастройкаДоставки);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-15 (#3778)
			
			ПротоколОтправки    = "";
			флДействиеВыполнено = ОбработкаДоставки.ОтправитьСообщение(СтруктураСообщения
			                                                           ,НастройкиДоставки
																	   ,СтруктураПараметров
																	   ,ПротоколОтправки);
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-08 (#2984)
			Если Не флДействиеВыполнено Тогда 
								
				пМассивТекстовОшибокИсключений = Новый Массив;
				пМассивТекстовОшибокИсключений.Добавить(НСтр("ru = 'Произошла ошибка при работе с SMTP. Код ошибки: 25 (Отказ в установлении соединения со стороны сервера.)'"));
				
				пИсключение = Ложь;
				
				Для каждого пТекстОшибкиИсключение Из пМассивТекстовОшибокИсключений Цикл
					
					Если СтрНайти(ПротоколОтправки,пТекстОшибкиИсключение,НаправлениеПоиска.СКонца)<>0 Тогда 
						пИсключение = Истина;
						Прервать;
					КонецЕсли;					
						
				КонецЦикла; 
				
				Если пИсключение Тогда 
					Продолжить; //оставляем запись без изменений
				КонецЕсли;				
				
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-08 (#2984)
			
			// Зарегистрируем результаты отправки сообщения.
			МенеджерЗаписи = РегистрыСведений.бит_фн_Оповещения.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
			
			Попытка
			
				МенеджерЗаписи.Удалить();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
				Если флДействиеВыполнено  Тогда
				     МенеджерЗаписи.Статус = Перечисления.бит_фн_СтатусыОтправкиОповещений.Отправлено;
				Иначе	
				     МенеджерЗаписи.Статус = Перечисления.бит_фн_СтатусыОтправкиОповещений.ОшибкаОтправки;
				КонецЕсли; 
				МенеджерЗаписи.ПротоколОтправки = ПротоколОтправки; 
				МенеджерЗаписи.ДатаОтправки     = ТекущаяДата();
				МенеджерЗаписи.Записать();
				
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-11 (#4085) 
				Если флДействиеВыполнено Тогда //Статус = Отправлено
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-11 (#4085)
				
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-03 (#3997) 
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("ИД", Выборка.ИД);
					Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	бит_фн_Оповещения.ИД КАК ИД
					|ИЗ
					|	РегистрСведений.бит_фн_Оповещения КАК бит_фн_Оповещения
					|ГДЕ
					|	бит_фн_Оповещения.Статус = ЗНАЧЕНИЕ(Перечисление.бит_фн_СтатусыОтправкиОповещений.ГотовоКОтправке)
					|	И бит_фн_Оповещения.ИД = &ИД";
					
					Если Запрос.Выполнить().Пустой() Тогда
					
						НаборВремФайлов = РегистрыСведений.ок_ВременныеФайлыПисем.СоздатьНаборЗаписей();
						НаборВремФайлов.Отбор.Идентификатор.Установить(Выборка.ИД);
						НаборВремФайлов.Записать();
							
					КонецЕсли;
					//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-03 (#3997) 
					
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-11 (#4085)	
				КонецЕсли;	
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-11 (#4085)
			Исключение
				
				Если РежимыВывода.ВыводитьОшибки Тогда
					
					ТекстСообщения = НСтр("ru = 'Не удалось изменить статус оповещения с Идентификатором ""%1%""!'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,МенеджерЗаписи.ИД);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
					
				КонецЕсли; 
				
			КонецПопытки;
				
		КонецЦикла; // По детальным записям
		
	КонецЕсли; // Удалось получить обработку отправки
 	 
 КонецЦикла; // По настройкам доставки

 Если РежимыВывода.ВыводитьИнформацию Тогда
	 
	 ТекстСообщения = НСтр("ru = 'Отправка оповещений завершена.'");
	 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	 
 КонецЕсли; 
 
КонецПроцедуры // ОтправитьОповещения()

// Процедура выполняет удаление оповещений из регистра сведений бит_фн_Оповщения.
// 
// Параметры:
//  РезультатЗапроса  - РезультатЗапроса.
//  РежимСообщений    - Строка.
// 
Процедура УдалитьОповещения(РезультатЗапроса = Неопределено,РежимСообщений = "Нет") Экспорт
	
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	
	Если РезультатЗапроса = Неопределено Тогда
		
		РезультатЗапроса = ПолучитьДанныеДляОбработки(Перечисления.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.Удалить);
		
	КонецЕсли; 	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Ном = 1;
	КоличествоЗаписей = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
	
		МенеджерЗаписи = РегистрыСведений.бит_фн_Оповещения.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
		
		Попытка
			
			МенеджерЗаписи.Удалить();
		
		Исключение
			
			Если РежимыВывода.ВыводитьОшибки Тогда
			
				ТекстСообщения = НСтр("ru = 'Не удалось удалить запись об оповещении с Идентификатором ""%1%""!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,МенеджерЗаписи.ИД);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли; 
			
		КонецПопытки; 
		
		Ном = Ном+1;
		Если Ном%10 = 0 Тогда
			
			 ТекстСостояния = НСтр("ru = 'Удаление оповещений %1% из %2%'");
			 ТекстСостояния = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСостояния
			                                                                              ,Строка(Ном)
																						  ,Строка(КоличествоЗаписей));
			 бит_ОбщегоНазначения.бит_Состояние(ТекстСостояния);
			 
		КонецЕсли; 
	КонецЦикла; // По выборке
	
	Если РежимыВывода.ВыводитьИнформацию Тогда
		
		ТекстСообщения = НСтр("ru = 'Удаление оповещений завершено.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 
	
КонецПроцедуры // УдалитьОповещения()

// Процедура выполняет изменение статусов оповещений в регистре бит_фн_Оповещения.
// 
// Параметры:
// Параметры:
//  РезультатЗапроса  - РезультатЗапроса.
//  СтатусНовый       - ПеречислениеСсылка.бит_фн_СтатусыОтправкиОповещений.
//  РежимСообщения    - Строка.
// 
Процедура ИзменитьСтатусОповещений(РезультатЗапроса = Неопределено,СтатусНовый,РежимСообщений = "Нет") Экспорт
	
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);	
	
	Если РезультатЗапроса = Неопределено Тогда
		
		РезультатЗапроса = ПолучитьДанныеДляОбработки(Перечисления.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.ИзменитьСтатус);
		
	КонецЕсли; 	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Ном = 1;
	КоличествоЗаписей = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
	
		МенеджерЗаписи = РегистрыСведений.бит_фн_Оповещения.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
		
		Попытка
			
			МенеджерЗаписи.Удалить();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка);
			МенеджерЗаписи.Статус = СтатусНовый;
			МенеджерЗаписи.Записать();
			
		Исключение
			
			Если РежимыВывода.ВыводитьОшибки Тогда
			
				ТекстСообщения = НСтр("ru = 'Не удалось изменить статус оповещния с Идентификатором ""%1%""!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,МенеджерЗаписи.ИД);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли; 
			
		КонецПопытки; 
		
		Ном = Ном+1;
		Если Ном%10 = 0 Тогда
			
			 ТекстСостояния = НСтр("ru = 'Изменение статусов оповещений %1% из %2%'");
			 ТекстСостояния = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСостояния
			                                                                              ,Строка(Ном)
																						  ,Строка(КоличествоЗаписей));
			 бит_ОбщегоНазначения.бит_Состояние(ТекстСостояния);
			 
		КонецЕсли; 
	КонецЦикла; // По выборке
	
	Если РежимыВывода.ВыводитьИнформацию Тогда
		
		ТекстСообщения = НСтр("ru = 'Изменение статусов оповещений завершено.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 
	
	
КонецПроцедуры // ИзменитьСтатусОповещений() 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает записи регистра бит_фн_Оповещения для дальнейшей обработки. 
// Используется при программном вызове действий с записями регистра.
// 
// Параметры:
//  ВидОперации  - ПеречислениеСсылка.бит_фн_ВидыОперацийОбработкиЗаписейРегистраОповещений.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ПолучитьДанныеДляОбработки(ВидОперации)

 	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	//ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-08 (#3334)
	//АдресСКД  = ИнициализироватьКомпоновщик(Компоновщик,Новый УникальныйИдентификатор);
	АдресСКД  = ИнициализироватьКомпоновщик(Компоновщик, Новый УникальныйИдентификатор, ВидОперации); 	
	//ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-08 (#3334)
	УстановитьОтборыКомпоновщика(Компоновщик,ВидОперации);
	Результат = ВыполнитьЗапросПоНастройке(Компоновщик,АдресСКД,ВидОперации);
    УдалитьИзВременногоХранилища(АдресСКД);
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеДляОбработки()

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-06 (#2975)
Функция ПолучитьАдресЭлПочтыИнициатора(Пользователь = Неопределено) Экспорт
	
	АдресЭП = "";
	
	Если Пользователь = Неопределено Тогда 
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Первые 1
	|	бит_БК_Инициаторы.Ссылка КАК Ссылка,
	|	бит_БК_Инициаторы.Email КАК Email
	|ИЗ
	|	Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
	|ГДЕ
	|	бит_БК_Инициаторы.Пользователь = &Пользователь");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	пВыборкаОтправитель = Запрос.Выполнить().Выбрать();
	Если пВыборкаОтправитель.Следующий() Тогда 
		АдресЭП = СокрЛП(пВыборкаОтправитель.Email);
	КонецЕсли;
	
	Возврат АдресЭП;		
		
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-06 (#2975)

#КонецОбласти

#КонецЕсли
