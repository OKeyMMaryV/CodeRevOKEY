
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	// Проверим наличие ключа СтруктураПараметров в параметрах формы.
	// При отсутствии не будем запускать подбор.
	Если Не Параметры.Свойство("СтруктураПараметров") Тогда
		фОтказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Изменение кода. Начало. 15.04.2016{{
	АлгоритмПодбора = Перечисления.бит_му_АлгоритмПодбораНачислениеРезерваПоМПЗ.СУчетомПросрочки;
	
	// Инициализируем настройки компоновщика
	АдресСхемыКомпоновкиДанных = Обработки.бит_ПодборНоменклатуры.ИнициализироватьКомпоновщик(Объект.Компоновщик, УникальныйИдентификатор, "СУчетомПросрочки");
	// Изменение кода. Конец. 15.04.2016}}
	
	Элементы.КомпоновщикПользовательскиеНастройки.РежимОтображения = РежимОтображенияНастроекКомпоновкиДанных.БыстрыйДоступ;	
	
	// Заполним структуру параметров
	Если Параметры.Свойство("СтруктураПараметров") Тогда
		фСтруктураПараметров = Новый Структура;
		Для каждого ТекПараметр Из Параметры.СтруктураПараметров Цикл
			фСтруктураПараметров.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установим заголовок формы
	ЭтаФорма.АвтоЗаголовок = Ложь;
	ЭтаФорма.Заголовок = Метаданные.Обработки.бит_ПодборНоменклатуры.Синоним + " - " + фСтруктураПараметров.Документ.Ссылка;
    
    Элементы.РезультатНоменклатурнаяГруппа.Видимость = НЕ бит_ОбщегоНазначения.ЭтоСемействоERP();
    
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		
		Отказ = Истина;
		
		ТекстПредупреждения = "ru = 'Данная обработка вызывается программно.
									|Вручную ее вызывать запрещено.'";
		ПоказатьПредупреждение(,НСтр(ТекстПредупреждения), 30);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АлгоритмПодбораПриИзменении(Элемент)
	
	АлгоритмПодбораПриИзмененииСервер();
	
КонецПроцедуры

// Процедура обработчик события "ПриИзменении" поля АлгоритмПодбора.
//
&НаСервере
Процедура АлгоритмПодбораПриИзмененииСервер()

	Если АлгоритмПодбора = Перечисления.бит_му_АлгоритмПодбораНачислениеРезерваПоМПЗ.СУчетомПросрочки Тогда
	
		ИмяМакета = "СУчетомПросрочки";
		
	Иначе	
		ИмяМакета = "СхемаКомпоновкиДанных";
	КонецЕсли; 
	
	// Инициализируем настройки компоновщика
	АдресСхемыКомпоновкиДанных = Обработки.бит_ПодборНоменклатуры.ИнициализироватьКомпоновщик(Объект.Компоновщик, УникальныйИдентификатор, ИмяМакета);

КонецПроцедуры // АлгоритмПодбораПриИзмененииСервер()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура-обработчик команды "Выполнить"
// 
&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ПолучитьРезультатЗапроса();
	
КонецПроцедуры

// Процедура-обработчик команды "Загрузить"
// 
&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ДобавитьВыбранныеСтроки(Истина);
	
КонецПроцедуры

// Процедура-обработчик команды "Добавить"
// 
&НаКлиенте
Процедура КомандаДобавить(Команда)
	
	ДобавитьВыбранныеСтроки(Ложь);
	
КонецПроцедуры

// Процедура-обработчик команды "Инвертировать".
// 
&НаКлиенте
Процедура КомандаИнвертировать(Команда)
	
	Для каждого ТекСтр Из Объект.Результат Цикл
		ТекСтр.Использование = НЕ ТекСтр.Использование;
	КонецЦикла;
	
КонецПроцедуры

// Процедура-обработчик команды "СнятьВсе"
// 
&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	Для каждого ТекСтр Из Объект.Результат Цикл
		ТекСтр.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Процедура-обработчик команды "УстановитьВсе".
// 
&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)

	Для каждого ТекСтр Из Объект.Результат Цикл
		ТекСтр.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет запрос и заполняет табличную часть "Результат".
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ПолучитьРезультатЗапроса()

	// Изменение кода. Начало. 15.04.2016{{
	Если АлгоритмПодбора = Перечисления.бит_му_АлгоритмПодбораНачислениеРезерваПоМПЗ.Простой Тогда
	
		Результат = Обработки.бит_ПодборНоменклатуры.ВыполнитьЗапросПоНастройке(Объект.Компоновщик, АдресСхемыКомпоновкиДанных, фСтруктураПараметров);
		Объект.Результат.Загрузить(Результат);
		
	Иначе	
		Объект.Результат.Очистить();
		Результат = Обработки.бит_ПодборНоменклатуры.ВыполнитьЗапросСУчетомПросрочки(Объект.Компоновщик, АдресСхемыКомпоновкиДанных, фСтруктураПараметров, Объект.Результат);
	КонецЕсли; 
	// Изменение кода. Конец. 15.04.2016}}
	
КонецПроцедуры // ПолучитьРезультатЗапроса() 

// Процедура заполняет ТЧ документа выбранными строками.
// 
// ОчищатьТабличнуюЧасть - Булево.
// 
&НаКлиенте
Процедура ДобавитьВыбранныеСтроки(ОчищатьТабличнуюЧасть)

	МассивСтрокТЧ = Новый Массив;
	
	Для каждого ТекСтр Из Объект.Результат Цикл
		Если ТекСтр.Использование Тогда
			СтрокаТЧ = Новый Структура("Номенклатура, Склад, Количество, ЕдиницаИзмерения, 
									   |СебестоимостьЕдиницы, Себестоимость, СчетУчета, СчетРезерва, Резерв");
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекСтр);
			МассивСтрокТЧ.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("МассивСтрок", 			МассивСтрокТЧ);
	СтруктураРезультата.Вставить("ОчищатьТабличнуюЧасть", 	ОчищатьТабличнуюЧасть);
	
	ОповеститьОВыборе(СтруктураРезультата);

КонецПроцедуры // ДобавитьВыбранныеСтроки()

#КонецОбласти

