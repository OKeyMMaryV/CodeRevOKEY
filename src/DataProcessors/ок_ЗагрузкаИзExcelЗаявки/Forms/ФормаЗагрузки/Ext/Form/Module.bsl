&НаКлиенте
Перем пExcel;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-04-28 (#3630)
	ок_УправлениеФормами.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Параметры.Свойство("ВидКорректировки"	   , ЭтотОбъект["ВидКорректировки"]);
	Параметры.Свойство("ФункциональныйДиректор", ЭтотОбъект["ФункциональныйДиректор"]);
	Параметры.Свойство("Сценарий"			   , ЭтотОбъект["Сценарий"]);
	
	Если ЗначениеЗаполнено(ЭтотОбъект["ВидКорректировки"]) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Загрузка из excel ККЗиБ (Окей)'");
		ЭтотОбъект["ДоступныеЦФО"].ЗагрузитьЗначения(Параметры.ДоступныеЦФО);
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-04-28 (#3630)
	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	//
	//на форме:
	//добавлены реквизиты: ТаблицаБДДС.бит_БК_ВалютаДоговора, ТаблицаБДДС.бит_БК_Курс, ТаблицаБДДС.бит_БК_Кратность
	//
	//убраны из шапки валюта и ЦФО, они теперь в табличной части
	//пСтрокаИменНастроек 	= "ИмяЯчейки_ВалютаДокумента,ИмяЯчейки_КомпанияПлательщик,ИмяЯчейки_ПредполагаемыйКонтрагент,ИмяЯчейки_РазмерПредоплаты,ИмяЯчейки_ФормаОплаты,ИмяЯчейки_ЦФО,ИмяЯчейки_ЦельРасходов";
	//пСтрокаИменРеквизитов 	= "бит_БК_ВалютаДокумента,бит_БК_Организация,бит_БК_ПредпологаемыйКонтрагент,ОК_РазмерПредоплаты,ОК_БК_ФормаОплаты,бит_БК_ЦФО,бит_БК_Цель";
	пСтрокаИменНастроек 	= "ИмяЯчейки_КомпанияПлательщик,ИмяЯчейки_ПредполагаемыйКонтрагент,ИмяЯчейки_РазмерПредоплаты,ИмяЯчейки_ФормаОплаты,ИмяЯчейки_ЦельРасходов";
	пСтрокаИменРеквизитов 	= "бит_БК_Организация,бит_БК_ПредпологаемыйКонтрагент,ОК_РазмерПредоплаты,ОК_БК_ФормаОплаты,бит_БК_Цель";
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
			
	пДокМД = Метаданные.Документы.бит_ФормаВводаБюджета;
	                                      
	мИменаНастроек   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пСтрокаИменНастроек);
	мИменаРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пСтрокаИменРеквизитов);
	
	пИндекс = мИменаНастроек.Количество()-1;
		
	Пока пИндекс >=0 Цикл 
		
		пСтрокаТРШ = ТаблицаРеквизитовШапки.Добавить();
		пСтрокаТРШ.ИмяНастройки = мИменаНастроек[пИндекс];
		пСтрокаТРШ.ИмяРеквизитаДокумента = мИменаРеквизитов[пИндекс];
		пМДРекДок = пДокМД.Реквизиты.Найти(мИменаРеквизитов[пИндекс]);
		Если пМДРекДок <> Неопределено Тогда 
			пСтрокаТРШ.Значение = пМДРекДок.Тип.ПривестиЗначение();
		КонецЕсли;
		
		пТипЗначения = ТипЗнч(пСтрокаТРШ.Значение);
		
		пПредставлениеТипа = СтрЗаменить(ОбщегоНазначения.СтроковоеПредставлениеТипа(пТипЗначения), "Ссылка.",".");
		Если Найти(пПредставлениеТипа,"Справочник.")>0 ИЛИ Найти(пПредставлениеТипа,"Перечисление.")>0 Тогда 
			
			пСтрокаТРШ.ИмяТаблицыВЗапрос = пПредставлениеТипа;
			
		КонецЕсли;		
		
		пИндекс = пИндекс - 1;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтотОбъект);
	СтруктураИмяФайла = Новый Структура("ИмяФайла","");
	// Зададим фильтр для диалога.
	ТекстФильтра = бит_ОбменДанными_Excel.ПолучитьФильтрДляВыбораФайлаExcel();
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(СтруктураИмяФайла,
											 "ИмяФайла",
											 Ложь,
											 Новый Структура("Фильтр, ПроверятьСуществованиеФайла", ТекстФильтра, Истина),
											 Оповещение
											);

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОткрытьФайл(Объект.ИмяФайла);	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	ОткрываемыйФайл = Новый Файл(СокрЛП(Объект.ИмяФайла));
    
	Если ПустаяСтрока(Объект.ИмяФайла) ИЛИ
		 НЕ ОткрываемыйФайл.Существует()		
	Тогда
		ТекстСообщения = НСтр("ru = 'Указан неверный путь к файлу'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИмяФайла");
		Возврат;
	КонецЕсли;	
	
	Попытка
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-04 (#3630)
		//ЗагрузитьДанныеИзExcel();			
		//Заменено на:
		Если ЗначениеЗаполнено(ЭтотОбъект["ВидКорректировки"]) Тогда 
			ЗагрузитьДанныеККЗиБИзExcel();
		Иначе 
			ЗагрузитьДанныеИзExcel();			
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-04 (#3630)		
	Исключение   
		
		Если пExcel<>Неопределено Тогда 
			пExcel.Application.Quit();
		КонецЕсли;
		пExcel = Неопределено;
		Возврат;
		
	КонецПопытки;
		
	Если ТаблицаОшибок.Количество()>0 Тогда 
		ВывестиЛогКлиент();
		
		пОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПоОшибкам",ЭтотОбъект);
		ПоказатьВопрос(пОповещениеОтвет, НСтр("ru = 'Файл прочитан с ошибками, будут загружены только корректные данные. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;		
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-05 (#3630)
	//ЗаполнитьТЧБДДСДокумента();
	//Заменено на:
	Если ЗначениеЗаполнено(ЭтотОбъект["ВидКорректировки"]) Тогда 
		ЗаполнитьТЧСуммаКорректировкиДокумента();
	Иначе
		ЗаполнитьТЧБДДСДокумента();
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-05 (#3630)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьОтветПоОшибкам(парРезультат, парДопПараметры) Экспорт
	
	Если парРезультат<>КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-05 (#3630)
	//ЗаполнитьТЧБДДСДокумента();
	//Заменено на:
	Если ЗначениеЗаполнено(ЭтотОбъект["ВидКорректировки"]) Тогда 
		ЗаполнитьТЧСуммаКорректировкиДокумента();
	Иначе
		ЗаполнитьТЧБДДСДокумента();
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-05 (#3630)
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЛогКлиент()
		
	ТаблицаОшибок.Сортировать("НомерСтрокиФайла Возр");
	
	пТабДокумент = СформироватьЛогНаСервере();
		
	пТабДокумент.Показать("Лог ошибок загрузки файла","Лог ошибок загрузки файла",Истина);
	
КонецПроцедуры

&НаСервере
Функция СформироватьЛогНаСервере()
	
	пТабДокумент = Новый ТабличныйДокумент;
	пМакет = обработки.ок_ЗагрузкаИзExcelЗаявки.ПолучитьМакет("МакетЛогаОшибок");
	
	пОбластьШапка = пМакет.ПолучитьОбласть("Шапка");
	пТабДокумент.Вывести(пОбластьШапка);
	
	пОбластьСтрока = пМакет.ПолучитьОбласть("СтрокаФайла");
	
	пНПП = 1;
	
	Для Каждого пСтрокаТО Из ТаблицаОшибок Цикл 
		пОбластьСтрока.Параметры.Заполнить(пСтрокаТО);
		пОбластьСтрока.Параметры.НомерПП = пНПП;
		пТабДокумент.Вывести(пОбластьСтрока);
		пНПП = пНПП+1;
	КонецЦикла;
		
	пТабДокумент.АвтоМасштаб		 = Истина;
	пТабДокумент.ОтображатьСетку	 = Ложь;
	пТабДокумент.ТолькоПросмотр		 = Истина;
	пТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат пТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеВыбораФайла(ИмяФайла, ДополнительныеПараметры) Экспорт 
	
	Если ПустаяСтрока(ИмяФайла) тогда
		Возврат;
	КонецЕсли;	
	
	Объект.ИмяФайла = ИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЛогОшибок()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(ИмяФайла)
    
    Если ПустаяСтрока(ИмяФайла) Тогда
        Возврат;
    КонецЕсли;
    
    ОткрываемыйФайл = Новый Файл(СокрЛП(ИмяФайла));
    Если ОткрываемыйФайл.Существует() Тогда
        ЗапуститьПриложение(ИмяФайла);
    КонецЕсли;
  
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-04 (#3630)
&НаКлиенте
Процедура ЗагрузитьДанныеККЗиБИзExcel()
	
	Перем пКодПроекта,пКодОбъекта,пКодСтатьи;
	
	ТаблицаОшибок.Очистить();
	ТаблицаСуммыКорректировок.Очистить();
	
	стрНастройкиЗагрузки = ПолучитьНастройкиЗагрузки();
	
	Если стрНастройкиЗагрузки.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось прочитать файл по причине:
											 	   					 |Не заполнены настройки чтения Excel-файла.'"));
		Возврат;
	КонецЕсли;
	
	
	//Чтение файла начало
	Попытка
		пExcel = Новый COMОбъект("Excel.Application");
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось прочитать файл по причине
																						 |'" + ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
		
	пКнига = пExcel.WorkBooks.Open(Объект.ИмяФайла); 
	
	Если Не стрНастройкиЗагрузки.Свойство("ИмяЛиста_Данные") Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не уадлось прочитать файл по причине
											 	   |Не заполнена настройки ""Имя листа данных"".'"));
		пExcel.Application.Quit();	
		Возврат;
	КонецЕсли;
	
	пЛистСДанными  = пКнига.WorkSheets(стрНастройкиЗагрузки.ИмяЛиста_Данные);
	пЛистЦФО	   = пКнига.WorkSheets(стрНастройкиЗагрузки.ИмяЛиста_ЦФО);
	пЛистОбъекты   = пКнига.WorkSheets(стрНастройкиЗагрузки.ИмяЛиста_Объекты);
	пЛистПроекты   = пКнига.WorkSheets(стрНастройкиЗагрузки.ИмяЛиста_Проекты);
	пЛистСтатьи	   = пКнига.WorkSheets(стрНастройкиЗагрузки.ИмяЛиста_Статьи);
	пЛистСлужебный = пКнига.WorkSheets("Не загружаемые");
	
	пКэшОбъектов = Новый Соответствие;
	пКэшПроектов = Новый Соответствие;
	пКэшСтатей 	 = Новый Соответствие;
	пКэшЦФО 	 = Новый Соответствие;
		
	мДанныеПоискаНаСервере = Новый Массив;
	
	пВсегоСтрок = пЛистСДанными.Cells(1,1).SpecialCells(11).Row;
	
	пСтрокаНачалаМногострочнойЧасти = стрНастройкиЗагрузки.НомерСтрокиШапкиТабЧасти + 1;
	
	мДанныеПоискаНаСервере.Очистить();
		
	Для НомерСтроки = пСтрокаНачалаМногострочнойЧасти по пВсегоСтрок Цикл
		
		стрПрочитаннаяСтрока = Новый Структура;
		
		пКодПроекта = Неопределено;
		пКодОбъекта = Неопределено;
		пКодСтатьи	= Неопределено;
			
		пПериод			  = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_МесяцНачисления).Value;
		пОбъект			  = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_Объект).Value;
		пСтатья			  = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_СтатьяОборотов).Value;
		пПроект			  = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_Проект).Value;
		пСтоимостьБезНДС  = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_СтоимостьБезНДС).Value;
				
		пКодЦФО = Неопределено;
		
		пЦФО = Неопределено;
		Если ЗначениеЗаполнено(стрНастройкиЗагрузки.НомерКолонки_ЦФО) Тогда
			пЦФО = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_ЦФО).Value;
		КонецЕсли;	
		
		пОшибкиСтроки = "";
		
		Если Не ЗначениеЗаполнено(пПериод) И
			 Не ЗначениеЗаполнено(пОбъект) И
			 Не ЗначениеЗаполнено(пСтатья) И
			 Не ЗначениеЗаполнено(пПроект) И
			 Не ЗначениеЗаполнено(пЦФО) И
			 Не ЗначениеЗаполнено(пСтоимостьБезНДС)			 
		Тогда 				
			Прервать; //Конец многострочной части
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пЦФО) Тогда
			пКодЦФО = пКэшЦФО.Получить(пЦФО);
			Если пКодЦФО = Неопределено Тогда 
				пКодЦФО = ПолучитьКодСДругихЛистовExcel(пЦФО, пЛистЦФО, 2, , 0, "Некорректное значение в ""ЦФО""");
				Если ЗначениеЗаполнено(пКодЦФО) Тогда 
					пКэшЦФО.Вставить(пЦФО, пКодЦФО);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		стрПрочитаннаяСтрока.Вставить("ЦФО", пКодЦФО);
		стрПрочитаннаяСтрока.Вставить("Период"			,	пПериод);
		     
		//Определение кода объекта строительства
		Если Не ПустаяСтрока(пОбъект) Тогда
			пКодОбъекта = пКэшОбъектов.Получить(пОбъект);
			Если пКодОбъекта = Неопределено Тогда 
				
				пКодОбъекта = ПолучитьКодСДругихЛистовExcel(пОбъект, пЛистОбъекты, 2, 1, НомерСтроки, "Некорректное значение в поле ""Объект""");
				
				Если НЕ ПустаяСтрока(пКодОбъекта) Тогда 
					пКэшОбъектов.Вставить(пОбъект, пКодОбъекта);
				КонецЕсли;
				
			КонецЕсли;		
		КонецЕсли;
		стрПрочитаннаяСтрока.Вставить("Объект"			,	пКодОбъекта);
		
		//Определение кода статьи оборотов
		Если Не ПустаяСтрока(пСтатья) Тогда
			пКодСтатьи = пКэшСтатей.Получить(пСтатья);
			Если пКодСтатьи= Неопределено Тогда 
				
				пКодСтатьи = ПолучитьКодСДругихЛистовExcel(пСтатья, пЛистСтатьи, 2, 1, НомерСтроки, "Некорректное значение в поле ""Статья""");
				
				Если НЕ ПустаяСтрока(пКодСтатьи) Тогда 
					пКэшСтатей.Вставить(пСтатья, пКодСтатьи);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		стрПрочитаннаяСтрока.Вставить("Статья"			,	пКодСтатьи);
		
		//Определение кода проекта		
		Если Не ПустаяСтрока(пПроект) Тогда 
			пКодПроекта = пКэшПроектов.Получить(пПроект);
			Если пКодПроекта= Неопределено Тогда 
				
				пКодПроекта = ПолучитьКодСДругихЛистовExcel(пПроект, пЛистПроекты, 2, 1, НомерСтроки,"Некорректное значение в поле ""Проект""");
				
				Если НЕ ПустаяСтрока(пКодПроекта) Тогда 
					пКэшПроектов.Вставить(пПроект, пКодПроекта);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		стрПрочитаннаяСтрока.Вставить("Проект"			,	пКодПроекта);
		стрПрочитаннаяСтрока.Вставить("Сумма"			,	пСтоимостьБезНДС);
		стрПрочитаннаяСтрока.Вставить("НомерСтрокиФайла",	НомерСтроки);
		
		мДанныеПоискаНаСервере.Добавить(стрПрочитаннаяСтрока);
		
	КонецЦикла;
	
	ЗагрузитьДанныеККЗиБИзExcelНаСервере(мДанныеПоискаНаСервере);	
	   	
	пExcel.Application.Quit();	
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-04 (#3630)

&НаКлиенте
Процедура ЗагрузитьДанныеИзExcel()
	
	Перем пКодПроекта,пКодОбъекта,пКодЕдИзм,пКодСтатьи;
	
	ТаблицаОшибок.Очистить();
	ТаблицаБДДС.Очистить();
	
	стрНастройкиЗагрузки = ПолучитьНастройкиЗагрузки();
	
	Если стрНастройкиЗагрузки.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось прочитать файл по причине:
											 	   					 |Не заполнены настройки чтения Excel-файла.'"));
		Возврат;
	КонецЕсли;
	
	
	//Чтение файла начало
	Попытка
		пExcel = Новый COMОбъект("Excel.Application");
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось прочитать файл по причине
																						 |'" + ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
		
	пКнига = пExcel.WorkBooks.Open(Объект.ИмяФайла); 
	
	Если Не стрНастройкиЗагрузки.Свойство("ИмяЛиста_Данные") Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не уадлось прочитать файл по причине
											 	   |Не заполнена настройки ""Имя листа данных"".'"));
		пExcel.Application.Quit();	
		Возврат;
	КонецЕсли;
	
	пЛистСДанными  = пКнига.WorkSheets(стрНастройкиЗагрузки.ИмяЛиста_Данные);
	пЛистЦФО	   = пКнига.WorkSheets(стрНастройкиЗагрузки.ИмяЛиста_ЦФО);
	пЛистОбъекты   = пКнига.WorkSheets(стрНастройкиЗагрузки.ИмяЛиста_Объекты);
	пЛистПроекты   = пКнига.WorkSheets(стрНастройкиЗагрузки.ИмяЛиста_Проекты);
	пЛистСтатьи	   = пКнига.WorkSheets(стрНастройкиЗагрузки.ИмяЛиста_Статьи);
	пЛистСлужебный = пКнига.WorkSheets("Не загружаемые");
	
	пКэшОбъектов = Новый Соответствие;
	пКэшПроектов = Новый Соответствие;
	пКэшСтатей 	 = Новый Соответствие;
	пКэшЕдИзм 	 = Новый Соответствие;
	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	пКэшВалюта 	 = Новый Соответствие;
	пКэшЦФО 	 = Новый Соответствие;
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
		
	мДанныеПоискаНаСервере = Новый Массив;
		
	//Читаем значения реквизитов шапки	
	ОшибкиЗаполнения = Ложь;
	Для Каждого пСтрокаТРШ Из ТаблицаРеквизитовШапки Цикл 
		
		пИмяОблВExcel = "";
		стрНастройкиЗагрузки.Свойство(пСтрокаТРШ.ИмяНастройки, пИмяОблВExcel);
		
		Если Не ЗначениеЗаполнено(пИмяОблВExcel) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена настройка """+пСтрокаТРШ.ИмяНастройки+"""'"));
			ОшибкиЗаполнения = Истина;
		ИначеЕсли Не ОшибкиЗаполнения Тогда 				
			Попытка
				Обл = пЛистСДанными.Range(пИмяОблВExcel);
				пЗначениеЯчейки = Обл.Value;
				
				Если ПустаяСтрока(Строка(пЗначениеЯчейки)) Тогда 
					
					//Если пСтрокаТРШ.ИмяНастройки <> "ИмяЯчейки_ПредполагаемыйКонтрагент" Тогда 
					//
					//	пСтрокаОшибки = ТаблицаОшибок.Добавить();
					//	пСтрокаОшибки.РасшифровкаОшибки = НСтр("ru = 'Не удалось прочитать значение в области """+пИмяОблВExcel+""" по причине: указано пустое значение'");
					//	
					//КонецЕсли;
					
					Продолжить;
				КонецЕсли;
									
				Если ПустаяСтрока(пСтрокаТРШ.ИмяТаблицыВЗапрос) Тогда 
					Если пСтрокаТРШ.ИмяРеквизитаДокумента = "ОК_РазмерПредоплаты" Тогда 
						Попытка
						
							пСтрокаТРШ.Значение = Число(пЗначениеЯчейки);
						
						Исключение
							
							пСтрокаОшибки = ТаблицаОшибок.Добавить();
							пСтрокаОшибки.ЗначениеВФайле = пЗначениеЯчейки;
							пСтрокаОшибки.РасшифровкаОшибки = НСтр("ru = 'Некорректное значение в области ""Размер предоплаты""'");					
							
							пСтрокаТРШ.Значение = 0;
							
						КонецПопытки;
						
						Если пСтрокаТРШ.Значение > 100 ИЛИ
							 пСтрокаТРШ.Значение < 0
						Тогда 
							
							пСтрокаТРШ.Значение = 0;
							
							пСтрокаОшибки = ТаблицаОшибок.Добавить();
							пСтрокаОшибки.ЗначениеВФайле = пЗначениеЯчейки;
							пСтрокаОшибки.РасшифровкаОшибки = НСтр("ru = 'Некорректное значение в области ""Размер предоплаты""'");					
							
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;
						
					    пСтрокаТРШ.Значение = пЗначениеЯчейки;
					
				ИначеЕсли пСтрокаТРШ.ИмяНастройки = "ИмяЯчейки_ФормаОплаты" Тогда 
					
					пФормаОплаты = Неопределено;
					
					Выполнить("пФормаОплаты = ПредопределенноеЗначение("""+"Перечисление.бит_ВидыДенежныхСредств."+СокрЛП(пЗначениеЯчейки)+""")");
					
					Если пФормаОплаты = Неопределено Тогда 
						пСтрокаОшибки = ТаблицаОшибок.Добавить();
						пСтрокаОшибки.ЗначениеВФайле = пЗначениеЯчейки;
						пСтрокаОшибки.РасшифровкаОшибки = НСтр("ru = 'Некорректное значение в области ""Форма оплаты""'");					
					Иначе
						пСтрокаТРШ.Значение = пФормаОплаты;
					КонецЕсли;
				Иначе                           	
					
					пКодНайденного = "";
					Если пСтрокаТРШ.ИмяНастройки = "ИмяЯчейки_КомпанияПлательщик" Тогда   //Организация
						
						пКодНайденного = ПолучитьКодСДругихЛистовExcel(пЗначениеЯчейки, пЛистСлужебный, 2, , 0, "Некорректное значение в области ""Компания-плательщик""");
											
						Если ПустаяСтрока(пКодНайденного) Тогда
							Продолжить;
						КонецЕсли;	
						
					ИначеЕсли пСтрокаТРШ.ИмяНастройки = "ИмяЯчейки_ЦФО" Тогда //ЦФО
						
						пКодНайденного = ПолучитьКодСДругихЛистовExcel(пЗначениеЯчейки, пЛистЦФО, 2, , 0, "Некорректное значение в ""Центр функциональной ответственности""");
											
						Если ПустаяСтрока(пКодНайденного) Тогда
							Продолжить;
						КонецЕсли;							
						
					ИначеЕсли пСтрокаТРШ.ИмяНастройки = "ИмяЯчейки_ВалютаДокумента" Тогда //Валюта документа
						
						пКодНайденного = ПолучитьКодСДругихЛистовExcel(пЗначениеЯчейки, пЛистСлужебный, 11, 10, 0, "Некорректное значение в области ""Валюта документа""");
											
						Если ПустаяСтрока(пКодНайденного) Тогда
							Продолжить;
						КонецЕсли;
												
					КонецЕсли;
					
					стрШапки = Новый Структура("Код,ИмяТипа");					
					стрШапки.Вставить("Код"				,	пКодНайденного);
					стрШапки.Вставить("ИмяТипа" 		,	пСтрокаТРШ.ИмяТаблицыВЗапрос);
					стрШапки.Вставить("Идентификатор" 	,	пСтрокаТРШ.ПолучитьИдентификатор());
					
					мДанныеПоискаНаСервере.Добавить(стрШапки);
					
				КонецЕсли;			
				
			Исключение
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.РасшифровкаОшибки = НСтр("ru = 'Не удалось прочитать значение в области """+пИмяОблВExcel+""" по причине:
													  		|'") + ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;		
	КонецЦикла;
	
	ЗаполнитьДанныеТаблицыШапки(мДанныеПоискаНаСервере);	
	
	Если ОшибкиЗаполнения Тогда 
		пExcel.Application.Quit();	
		Возврат;
	КонецЕсли;
	
	пВсегоСтрок = пЛистСДанными.Cells(1,1).SpecialCells(11).Row;
	
	пСтрокаНачалаМногострочнойЧасти = стрНастройкиЗагрузки.НомерСтрокиШапкиТабЧасти + 1;
	
	мДанныеПоискаНаСервере.Очистить();
		
	Для НомерСтроки = пСтрокаНачалаМногострочнойЧасти по пВсегоСтрок Цикл
		
		стрПрочитаннаяСтрока = Новый Структура;
		
		пКодПроекта = Неопределено;
		пКодОбъекта = Неопределено;
		пКодЕдИзм 	= Неопределено;
		пКодСтатьи	= Неопределено;
			
		пПериод			  = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_МесяцНачисления).Value;
		пОбъект			  = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_Объект).Value;
		пСтатья			  = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_СтатьяОборотов).Value;
		пПроект			  = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_Проект).Value;
		пНаименование     = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_Наименование).Value;
		пЕдиницаИзмерения = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_ЕдиницаИзмерения).Value;
		пСтавкаНДС        = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_СтавкаНДС).Value;
		пКоличество       = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_Количество).Value;
		пЦенаБезНДС       = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_ЦенаБезНДС).Value;
		пЦенаСНДС         = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_ЦенаСНДС).Value;
		пСтоимостьБезНДС  = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_СтоимостьБезНДС).Value;
		
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		пКодВалюта = Неопределено;
		пКодЦФО = Неопределено;
		пВалюта = Неопределено;
		Если ЗначениеЗаполнено(стрНастройкиЗагрузки.НомерКолонки_Валюта) Тогда
			пВалюта	= пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_Валюта).Value;
		КонецЕсли;	
		пЦФО = Неопределено;
		Если ЗначениеЗаполнено(стрНастройкиЗагрузки.НомерКолонки_ЦФО) Тогда
			пЦФО = пЛистСДанными.Cells(НомерСтроки,стрНастройкиЗагрузки.НомерКолонки_ЦФО).Value;
		КонецЕсли;	
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
		
		пОшибкиСтроки = "";
		
		Если Не ЗначениеЗаполнено(пПериод) И
			 Не ЗначениеЗаполнено(пОбъект) И
			 Не ЗначениеЗаполнено(пСтатья) И
			 Не ЗначениеЗаполнено(пПроект) И
			 //ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
			 Не ЗначениеЗаполнено(пВалюта) И
			 Не ЗначениеЗаполнено(пЦФО) И
			//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
			 Не ЗначениеЗаполнено(пНаименование) И
			 Не ЗначениеЗаполнено(пЕдиницаИзмерения) И
			 Не ЗначениеЗаполнено(пСтавкаНДС) И
			 Не ЗначениеЗаполнено(пКоличество) И
			 Не ЗначениеЗаполнено(пЦенаБезНДС) И
			 Не ЗначениеЗаполнено(пЦенаСНДС) И
			 Не ЗначениеЗаполнено(пСтоимостьБезНДС)			 
		Тогда 				
			Прервать; //Конец многострочной части
		КонецЕсли;
		
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		Если ЗначениеЗаполнено(пВалюта) Тогда
			пКодВалюта = пКэшВалюта.Получить(пВалюта);
			Если пКодВалюта = Неопределено Тогда 
				пКодВалюта = ПолучитьКодСДругихЛистовExcel(пВалюта, пЛистСлужебный, 11, 10, 0, "Некорректное значение в области ""Валюта документа""");
				Если ЗначениеЗаполнено(пКодВалюта) Тогда 
					пКэшВалюта.Вставить(пВалюта, пКодВалюта);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		стрПрочитаннаяСтрока.Вставить("Валюта", пКодВалюта);
		
		Если ЗначениеЗаполнено(пЦФО) Тогда
			пКодЦФО = пКэшЦФО.Получить(пЦФО);
			Если пКодЦФО = Неопределено Тогда 
				пКодЦФО = ПолучитьКодСДругихЛистовExcel(пЦФО, пЛистЦФО, 2, , 0, "Некорректное значение в ""Центр функциональной ответственности""");
				Если ЗначениеЗаполнено(пКодЦФО) Тогда 
					пКэшЦФО.Вставить(пЦФО, пКодЦФО);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		стрПрочитаннаяСтрока.Вставить("ЦФО", пКодЦФО);
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
		
		стрПрочитаннаяСтрока.Вставить("Период"			,	пПериод);
		     
		//Определение кода объекта строительства
		Если Не ПустаяСтрока(пОбъект) Тогда
			пКодОбъекта = пКэшОбъектов.Получить(пОбъект);
			Если пКодОбъекта = Неопределено Тогда 
				
				пКодОбъекта = ПолучитьКодСДругихЛистовExcel(пОбъект, пЛистОбъекты, 2, 1, НомерСтроки, "Некорректное значение в поле ""Объект""");
				
				Если НЕ ПустаяСтрока(пКодОбъекта) Тогда 
					пКэшОбъектов.Вставить(пОбъект, пКодОбъекта);
				КонецЕсли;
				
			КонецЕсли;		
		КонецЕсли;
		стрПрочитаннаяСтрока.Вставить("Объект"			,	пКодОбъекта);
		
		//Определение кода статьи оборотов
		Если Не ПустаяСтрока(пСтатья) Тогда
			пКодСтатьи = пКэшСтатей.Получить(пСтатья);
			Если пКодСтатьи= Неопределено Тогда 
				
				пКодСтатьи = ПолучитьКодСДругихЛистовExcel(пСтатья, пЛистСтатьи, 2, 1, НомерСтроки, "Некорректное значение в поле ""Статья""");
				
				Если НЕ ПустаяСтрока(пКодСтатьи) Тогда 
					пКэшСтатей.Вставить(пСтатья, пКодСтатьи);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		стрПрочитаннаяСтрока.Вставить("Статья"			,	пКодСтатьи);
		
		//Определение кода проекта		
		Если Не ПустаяСтрока(пПроект) Тогда 
			пКодПроекта = пКэшПроектов.Получить(пПроект);
			Если пКодПроекта= Неопределено Тогда 
				
				пКодПроекта = ПолучитьКодСДругихЛистовExcel(пПроект, пЛистПроекты, 2, 1, НомерСтроки,"Некорректное значение в поле ""Проект""");
				
				Если НЕ ПустаяСтрока(пКодПроекта) Тогда 
					пКэшПроектов.Вставить(пПроект, пКодПроекта);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		стрПрочитаннаяСтрока.Вставить("Проект"			,	пКодПроекта);
		
		
		стрПрочитаннаяСтрока.Вставить("Наименование"	,	пНаименование);
		                                                 
		//Определение единицы измерения
		Если Не ПустаяСтрока(пЕдиницаИзмерения) Тогда 
			пКодЕдИзм = пКэшЕдИзм.Получить(пЕдиницаИзмерения);
			Если пКодЕдИзм= Неопределено Тогда 
				
				пКодЕдИзм = ПолучитьКодСДругихЛистовExcel(пЕдиницаИзмерения, пЛистСлужебный, 7, 6, НомерСтроки, "Некорректное значение в поле ""Единица измерения""");
				
				Если НЕ ПустаяСтрока(пКодЕдИзм) Тогда 
					пКэшЕдИзм.Вставить(пЕдиницаИзмерения, пКодЕдИзм);
				КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;

		стрПрочитаннаяСтрока.Вставить("ЕдиницаИзмерения"			,	пКодЕдИзм);
		
		стрПрочитаннаяСтрока.Вставить("СтавкаНДС"					,	пСтавкаНДС);
		стрПрочитаннаяСтрока.Вставить("Количество"					,	пКоличество);
		стрПрочитаннаяСтрока.Вставить("бит_БК_ЦенаВВалютеБезНДС"	,	пЦенаБезНДС);
		стрПрочитаннаяСтрока.Вставить("бит_БК_ЦенаВВалютеСНДС"		,	пЦенаСНДС);
		стрПрочитаннаяСтрока.Вставить("бит_БК_СуммаВВалютеБезНДС"	,	пСтоимостьБезНДС);
		стрПрочитаннаяСтрока.Вставить("НомерСтрокиФайла"			,	НомерСтроки);
		
		мДанныеПоискаНаСервере.Добавить(стрПрочитаннаяСтрока);
		
	КонецЦикла;
	
	ЗаполнитьТЧНаСервере(мДанныеПоискаНаСервере);	
	   	
	пExcel.Application.Quit();	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодСДругихЛистовExcel(парЗначениеЯчейки, парЛист, парКолонкаПоиска, парКолонкаСКодом = 1, парНомерСтроки, парРасшифровкаОшибки = "")
	
	Попытка
		//пЗначениеНаЛисте = парЛист.Columns(парДиапазонПоиска).find(Строка(парЗначениеЯчейки));
		пКодНайденного = парЛист.Cells(пExcel.Application.WorksheetFunction.Match(парЗначениеЯчейки,парЛист.Columns(парКолонкаПоиска), 0),парКолонкаСКодом).Value; //по точному совпадению
	Исключение
	КонецПопытки;
			
	Если НЕ ЗначениеЗаполнено(пКодНайденного) Тогда
		Если ПустаяСтрока(парРасшифровкаОшибки) Тогда 
			Возврат "";
		КонецЕсли;

		пСтрокаОшибки = ТаблицаОшибок.Добавить();
		пСтрокаОшибки.НомерСтрокиФайла  = парНомерСтроки; 
		пСтрокаОшибки.ЗначениеВФайле    = парЗначениеЯчейки; 
		пСтрокаОшибки.РасшифровкаОшибки = НСтр("ru = '"+парРасшифровкаОшибки+"'");		
	КонецЕсли;	
	
	Возврат пКодНайденного;
	
КонецФункции

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-04 (#3630)
&НаСервере
Процедура ЗагрузитьДанныеККЗиБИзExcelНаСервере(парДанныеИзФайла)
	
	пМассивКодовОбъектов		 = Новый Массив;
	пМассивКодовСтатей 			 = Новый Массив;
	пМассивКодовПроектов		 = Новый Массив;
	пМассивКодовЕдиницИзмерения  = Новый Массив;	
	
	пКопияТаблицы = ТаблицаСуммыКорректировок.Выгрузить();
	пКопияТаблицы.Колонки.Добавить("КодОбъекта", Новый ОписаниеТипов("Строка"));
	пКопияТаблицы.Колонки.Добавить("КодСтатьи" , Новый ОписаниеТипов("Строка"));
	пКопияТаблицы.Колонки.Добавить("КодПроекта", Новый ОписаниеТипов("Строка"));
	пКопияТаблицы.Колонки.Добавить("КодЦФО"	   , Новый ОписаниеТипов("Строка"));
	
	ВидСтатьиИнвест = ЭтотОбъект["Сценарий"] = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест"); 
	
	пСоответствиеСтавокНДС = Новый Соответствие;
	
	Для Каждого стрПрочитаннаяСтрока Из парДанныеИзФайла Цикл 
		
		пОшибки = "";
		
		пСтрокаТЧ = пКопияТаблицы.Добавить();
			
		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.Период) Тогда			
			Если ТипЗнч(стрПрочитаннаяСтрока.Период) <> Тип("Дата") Тогда 
				Попытка
					пСтрокаТЧ.Период = НачалоМесяца(Дата(стрПрочитаннаяСтрока.Период));				
				Исключение
					
					пСтрокаОшибки = ТаблицаОшибок.Добавить();
					пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
					пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.Период;
					пСтрокаОшибки.РасшифровкаОшибки   = "Некорректное значение в поле ""Период""";			
					
				КонецПопытки;				
			Иначе 
				пСтрокаТЧ.Период = НачалоМесяца(стрПрочитаннаяСтрока.Период); 
				Если ЭтотОбъект["ВидКорректировки"] = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") 
				   И (пСтрокаТЧ.Период>КонецГода(ТекущаяДата()) ИЛИ пСтрокаТЧ.Период<НачалоГода(ТекущаяДата()))
				Тогда 
					пСтрокаТЧ.Период = Неопределено;
					пСтрокаОшибки = ТаблицаОшибок.Добавить();
					пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
					пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.Период;
					пСтрокаОшибки.РасшифровкаОшибки   = "Некорректное значение в поле ""Период"". Корректировка между разными годами запрещена";
				КонецЕсли;
								
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.ЦФО) Тогда					
			пСтрокаТЧ.КодЦФО = стрПрочитаннаяСтрока.ЦФО;
		Иначе
			пСтрокаОшибки = ТаблицаОшибок.Добавить();
			пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
			пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.ЦФО;
			пСтрокаОшибки.РасшифровкаОшибки   = "Не заполнена обязательная аналитика - ЦФО";
		КонецЕсли; 
				
		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.Объект) Тогда					
			пСтрокаТЧ.КодОбъекта = стрПрочитаннаяСтрока.Объект;
			пМассивКодовОбъектов.Добавить(стрПрочитаннаяСтрока.Объект);
		Иначе
			пСтрокаОшибки = ТаблицаОшибок.Добавить();
			пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
			пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.Объект;
			пСтрокаОшибки.РасшифровкаОшибки   = "Не заполнена обязательная аналитика - Объект";
		КонецЕсли; 

		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.Статья) Тогда	
			пСтрокаТЧ.КодСтатьи = стрПрочитаннаяСтрока.Статья;
			пМассивКодовСтатей.Добавить(стрПрочитаннаяСтрока.Статья);
		Иначе
			пСтрокаОшибки = ТаблицаОшибок.Добавить();
			пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
			пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.Статья;
			пСтрокаОшибки.РасшифровкаОшибки   = "Не заполнена обязательная аналитика - Статья оборотов";
		КонецЕсли;
			
		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.Проект)
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-19 (#4390)
		//   И ВидСтатьиИнвест
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-19 (#4390)
		Тогда					
			пСтрокаТЧ.КодПроекта = стрПрочитаннаяСтрока.Проект;
			пМассивКодовПроектов.Добавить(стрПрочитаннаяСтрока.Проект);
		ИначеЕсли ВидСтатьиИнвест Тогда 
			пСтрокаОшибки = ТаблицаОшибок.Добавить();
			пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
			пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.Проект;
			пСтрокаОшибки.РасшифровкаОшибки   = "Не заполнена обязательная аналитика - Проект";
		КонецЕсли; 
				
		Попытка
		
			пСтрокаТЧ.Сумма	= Число(стрПрочитаннаяСтрока.Сумма);
			Если пСтрокаТЧ.Сумма = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.Сумма;
				пСтрокаОшибки.РасшифровкаОшибки   = "Некорректное значение в поле ""Сумма""";
			КонецЕсли;
						
		Исключение
			пСтрокаОшибки = ТаблицаОшибок.Добавить();
			пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
			пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.Сумма;
			пСтрокаОшибки.РасшифровкаОшибки   = "Некорректное значение в поле ""Сумма""";
			
		КонецПопытки;
		
		пСтрокаТЧ.НомерСтрокиФайла   = стрПрочитаннаяСтрока.НомерСтрокиФайла;			
		
	КонецЦикла;	
				
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СтатьиОборотов.Ссылка КАК Ссылка,
	|	бит_СтатьиОборотов.Код КАК Код,
	|	бит_СтатьиОборотов.ок_ВозможнаКорректировкаБюджета КАК ВозможнаКоррекировка,
	|	ВЫБОР
	|		КОГДА бит_СтатьиОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА Истина
	|		КОГДА бит_СтатьиОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.Выручка)
	|			ТОГДА Ложь
	|	КОНЕЦ КАК ВидСтатьиИнвест
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|ГДЕ
	|	бит_СтатьиОборотов.Код В(&КодыСтатей)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_СтатьиОборотов.Ссылка,
	|	бит_СтатьиОборотов.Код,
	|	бит_СтатьиОборотов.ок_ВозможнаКорректировкаБюджета,
	|	ВЫБОР
	|		КОГДА бит_СтатьиОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Заявка_Инвест)
	|		КОГДА бит_СтатьиОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.Выручка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Заявка_У)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыСтроительства.Ссылка КАК Ссылка,
	|	ОбъектыСтроительства.Код КАК Код,
	|	ОбъектыСтроительства.ок_ВозможнаКорректировкаБюджета КАК ВозможнаКоррекировка
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	ОбъектыСтроительства.Код В(&КодыОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСтроительства.Ссылка,
	|	ОбъектыСтроительства.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проекты.Ссылка КАК Ссылка,
	|	Проекты.Код КАК Код,
	|	Проекты.ок_ВозможнаКорректировкаБюджета КАК ВозможнаКоррекировка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Код В(&КодыПроектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Проекты.Ссылка,
	|	Проекты.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Подразделения.Ссылка КАК Ссылка,
	|	Подразделения.Код КАК Код,
	|	ВЫБОР
	|		КОГДА ДоступныеЦФО.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Недоступно
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подразделения КАК ДоступныеЦФО
	|		ПО Подразделения.Ссылка = ДоступныеЦФО.Ссылка 
	|			И ДоступныеЦФО.Ссылка В(&ДоступныеЦФО)
	|ГДЕ
	|	Подразделения.Код В(&КодЦФО)";
	Запрос.УстановитьПараметр("КодЦФО", пКопияТаблицы.ВыгрузитьКолонку("КодЦФО"));
	Запрос.УстановитьПараметр("КодыОбъектов", пМассивКодовОбъектов);
	Запрос.УстановитьПараметр("КодыПроектов", пМассивКодовПроектов);
	Запрос.УстановитьПараметр("КодыСтатей"	, пМассивКодовСтатей);
	Запрос.УстановитьПараметр("ДоступныеЦФО", ЭтотОбъект["ДоступныеЦФО"]);
		
	пПакетЗапрос = Запрос.ВыполнитьПакет();
	
	пВыгрузкаСтатьи  = пПакетЗапрос[0].Выгрузить();
	пВыгрузкаОбъекты = пПакетЗапрос[1].Выгрузить();
	пВыгрузкаПроекты = пПакетЗапрос[2].Выгрузить();
	пВыгрузкаЦФО 	 = пПакетЗапрос[3].Выгрузить();
		
	стрПоиска = Новый Структура("Код");
	
	Для Каждого пСтрокаКопииТаблицы Из пКопияТаблицы Цикл 
		
		Если Не ПустаяСтрока(пСтрокаКопииТаблицы.КодЦФО) Тогда 
			стрПоиска.Код = пСтрокаКопииТаблицы.КодЦФО;			
			пНайденныеЭлементы = пВыгрузкаЦФО.НайтиСтроки(стрПоиска);
			Если пНайденныеЭлементы.Количество() = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = пСтрокаКопииТаблицы.КодЦФО;
				пСтрокаОшибки.РасшифровкаОшибки   = "Не найден ЦФО по коду из файла";
			Иначе
				Если пНайденныеЭлементы[0].Недоступно Тогда 
					пСтрокаОшибки = ТаблицаОшибок.Добавить();
					пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
					пСтрокаОшибки.ЗначениеВФайле      = пСтрокаКопииТаблицы.КодЦФО;
					пСтрокаОшибки.РасшифровкаОшибки   = "ЦФО недоступно для выбранного в документе Функционального директора";
				Иначе
					пСтрокаКопииТаблицы.ЦФО = пНайденныеЭлементы[0].Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(пСтрокаКопииТаблицы.КодОбъекта) Тогда 
					
			стрПоиска.Вставить("Код"			,	пСтрокаКопииТаблицы.КодОбъекта);			
			
			пНайденныеЭлементы = пВыгрузкаОбъекты.НайтиСтроки(стрПоиска);
			Если пНайденныеЭлементы.Количество() = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодОбъекта);
				пСтрокаОшибки.РасшифровкаОшибки   = "Не найден Объект по коду из файла";
			Иначе
				Если НЕ пНайденныеЭлементы[0].ВозможнаКоррекировка Тогда 
					пСтрокаОшибки = ТаблицаОшибок.Добавить();
					пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
					пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодОбъекта);
					пСтрокаОшибки.РасшифровкаОшибки   = "Корректировка по Объекту запрещена";
				Иначе 
					пСтрокаКопииТаблицы.Аналитика_2 = пНайденныеЭлементы[0].Ссылка;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(пСтрокаКопииТаблицы.КодСтатьи) Тогда 
			
			стрПоиска.Вставить("Код"			,	пСтрокаКопииТаблицы.КодСтатьи);		
			
			пНайденныеЭлементы = пВыгрузкаСтатьи.НайтиСтроки(стрПоиска);
			Если пНайденныеЭлементы.Количество() = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодСтатьи);
				пСтрокаОшибки.РасшифровкаОшибки   = "Не найдена Статья оборотов по коду из файла";
			ИначеЕсли ВидСтатьиИнвест<>пНайденныеЭлементы[0].ВидСтатьиИнвест Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодСтатьи);
				пСтрокаОшибки.РасшифровкаОшибки   = "Статья оборотов не соответствует выбранному виду корректировки и сценарию документа";
			Иначе
				Если НЕ пНайденныеЭлементы[0].ВозможнаКоррекировка Тогда 
					пСтрокаОшибки = ТаблицаОшибок.Добавить();
					пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
					пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодОбъекта);
					пСтрокаОшибки.РасшифровкаОшибки   = "Корректировка по Статье оборотов запрещена";
				Иначе 
					пСтрокаКопииТаблицы.СтатьяОборотов = пНайденныеЭлементы[0].Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(пСтрокаКопииТаблицы.КодПроекта) 
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-19 (#4390)
		//   И ВидСтатьиИнвест
		// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-19 (#4390)
		Тогда 
			
			стрПоиска.Вставить("Код"			,	пСтрокаКопииТаблицы.КодПроекта);
						
			пНайденныеЭлементы = пВыгрузкаПроекты.НайтиСтроки(стрПоиска);
			Если пНайденныеЭлементы.Количество() = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодПроекта);
				пСтрокаОшибки.РасшифровкаОшибки   = "Не найден Проект по коду из файла";
			Иначе
				Если НЕ пНайденныеЭлементы[0].ВозможнаКоррекировка Тогда 
					пСтрокаОшибки = ТаблицаОшибок.Добавить();
					пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
					пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодОбъекта);
					пСтрокаОшибки.РасшифровкаОшибки   = "Корректировка по Проекту запрещена";
				Иначе 
					пСтрокаКопииТаблицы.Проект = пНайденныеЭлементы[0].Ссылка;
				КонецЕсли;				
			КонецЕсли;
			
		КонецЕсли;         		
		
		пСтрокаСумКорр = ТаблицаСуммыКорректировок.Добавить();
		
		ЗаполнитьЗначенияСвойств(пСтрокаСумКорр, пСтрокаКопииТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-04 (#3630)

&НаСервере
Процедура ЗаполнитьТЧНаСервере(парДанныеИзФайла)
	
	пМассивКодовОбъектов		 = Новый Массив;
	пМассивКодовСтатей 			 = Новый Массив;
	пМассивКодовПроектов		 = Новый Массив;
	пМассивКодовЕдиницИзмерения  = Новый Массив;	
	
	пКопияТаблицы = ТаблицаБДДС.Выгрузить();
	пКопияТаблицы.Колонки.Добавить("КодОбъекта", Новый ОписаниеТипов("Строка"));
	пКопияТаблицы.Колонки.Добавить("КодСтатьи" , Новый ОписаниеТипов("Строка"));
	пКопияТаблицы.Колонки.Добавить("КодПроекта", Новый ОписаниеТипов("Строка"));
	пКопияТаблицы.Колонки.Добавить("КодЕдИзм"  , Новый ОписаниеТипов("Строка"));
	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	пКопияТаблицы.Колонки.Добавить("КодВалюта" , Новый ОписаниеТипов("Строка"));
	пКопияТаблицы.Колонки.Добавить("КодЦФО"	   , Новый ОписаниеТипов("Строка"));
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
	
	пСоответствиеСтавокНДС = Новый Соответствие;
	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	пСоответствиеСтавокНДС.Вставить("20"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	пСоответствиеСтавокНДС.Вставить("20%"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	пСоответствиеСтавокНДС.Вставить("0,2"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	пСоответствиеСтавокНДС.Вставить("0,20"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	пСоответствиеСтавокНДС.Вставить("20 %"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
	
	пСоответствиеСтавокНДС.Вставить("18"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
	пСоответствиеСтавокНДС.Вставить("18%"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
	пСоответствиеСтавокНДС.Вставить("0,18"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
	пСоответствиеСтавокНДС.Вставить("18 %"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
	
	пСоответствиеСтавокНДС.Вставить("Без НДС"	,ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	
	пСоответствиеСтавокНДС.Вставить("10"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
	пСоответствиеСтавокНДС.Вставить("0,1"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
	пСоответствиеСтавокНДС.Вставить("10%"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
	пСоответствиеСтавокНДС.Вставить("10 %"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
		
	пСоответствиеСтавокНДС.Вставить("0,1"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
	пСоответствиеСтавокНДС.Вставить("0%"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));	
	пСоответствиеСтавокНДС.Вставить("0"			,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
	пСоответствиеСтавокНДС.Вставить("0 %"		,ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));	
	
	Для Каждого стрПрочитаннаяСтрока Из парДанныеИзФайла Цикл 
		
		пОшибки = "";
		
		пСтрокаТЧ = пКопияТаблицы.Добавить();
			
		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.Период) Тогда			
			Если ТипЗнч(стрПрочитаннаяСтрока.Период) <> Тип("Дата") Тогда 
				Попытка
				    //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-11 (#3017)
					//пСтрокаТЧ.Период = Дата(стрПрочитаннаяСтрока.Период);
					//Заменено на:
					пСтрокаТЧ.Период = НачалоМесяца(Дата(стрПрочитаннаяСтрока.Период));
					//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-11 (#3017)
				
				Исключение
					
					пСтрокаОшибки = ТаблицаОшибок.Добавить();
					пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
					пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.Период;
					пСтрокаОшибки.РасшифровкаОшибки   = "Некорректное значение в поле ""Месяц начисления""";			
					
				КонецПопытки;				
			Иначе 
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-11 (#3017)
				//пСтрокаТЧ.Период = стрПрочитаннаяСтрока.Период;      			
				//Заменено на:
				пСтрокаТЧ.Период = НачалоМесяца(стрПрочитаннаяСтрока.Период);  
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-11 (#3017)
			КонецЕсли;
			
		КонецЕсли; 
		
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.ЦФО) Тогда					
			пСтрокаТЧ.КодЦФО = стрПрочитаннаяСтрока.ЦФО;
		КонецЕсли; 
		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.Валюта) Тогда					
			пСтрокаТЧ.КодВалюта = стрПрочитаннаяСтрока.Валюта;
		КонецЕсли; 
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
		
		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.Объект) Тогда					
			пСтрокаТЧ.КодОбъекта = стрПрочитаннаяСтрока.Объект;
			пМассивКодовОбъектов.Добавить(стрПрочитаннаяСтрока.Объект);
		КонецЕсли; 

		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.Статья) Тогда	
			пСтрокаТЧ.КодСтатьи = стрПрочитаннаяСтрока.Статья;
			пМассивКодовСтатей.Добавить(стрПрочитаннаяСтрока.Статья);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.ЕдиницаИзмерения) Тогда								
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-21 (#3086)
			//пСтрокаТЧ.КодЕдИзм = стрПрочитаннаяСтрока.ЕдиницаИзмерения;
			//Заменено на:			
			пСтрокаТЧ.КодЕдИзм = СокрЛП(стрПрочитаннаяСтрока.ЕдиницаИзмерения);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-21 (#3086)
			пМассивКодовЕдиницИзмерения.Добавить(стрПрочитаннаяСтрока.ЕдиницаИзмерения);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.Проект) Тогда					
			пСтрокаТЧ.КодПроекта = стрПрочитаннаяСтрока.Проект;
			пМассивКодовПроектов.Добавить(стрПрочитаннаяСтрока.Проект);
		КонецЕсли; 
				
		пСтрокаТЧ.бит_БК_НаименованиеОборудования = стрПрочитаннаяСтрока.Наименование;		
		пСтрокаТЧ.ОК_НоменклатураПроизв			  = стрПрочитаннаяСтрока.Наименование;		
		
		пСтавкаНДС = пСоответствиеСтавокНДС.Получить(СокрЛП(стрПрочитаннаяСтрока.СтавкаНДС));
		
		Если ЗначениеЗаполнено(пСтавкаНДС) Тогда			
							
			пСтрокаТЧ.СтавкаНДС = пСтавкаНДС;  			
			
		Иначе 
			
			Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.СтавкаНДС) Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.СтавкаНДС;
				пСтрокаОшибки.РасшифровкаОшибки   = "Некорректное значение в поле ""Ставка НДС""";
			КонецЕсли;
			
		КонецЕсли; 
		
		Попытка
		
			пСтрокаТЧ.Количество		 = Число(стрПрочитаннаяСтрока.Количество);
		
		Исключение
			Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.Количество) Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.Количество;
				пСтрокаОшибки.РасшифровкаОшибки   = "Некорректное значение в поле ""Количество""";
			КонецЕсли;
		КонецПопытки;
		
		Попытка
		
			пСтрокаТЧ.бит_БК_ЦенаВВалютеСНДС    = Число(стрПрочитаннаяСтрока.бит_БК_ЦенаВВалютеСНДС);		
		
		Исключение
			Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.бит_БК_ЦенаВВалютеСНДС) Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.бит_БК_ЦенаВВалютеСНДС;
				пСтрокаОшибки.РасшифровкаОшибки   = "Некорректное значение в поле ""Цена с НДС""";
			КонецЕсли;			
		КонецПопытки;
		
		Попытка
		
			пСтрокаТЧ.бит_БК_ЦенаВВалютеБезНДС    = Число(стрПрочитаннаяСтрока.бит_БК_ЦенаВВалютеБезНДС);		
		
		Исключение
			Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.бит_БК_ЦенаВВалютеБезНДС) Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.бит_БК_ЦенаВВалютеБезНДС;
				пСтрокаОшибки.РасшифровкаОшибки   = "Некорректное значение в поле ""Цена без НДС""";
			КонецЕсли;			
		КонецПопытки;
			
		
		Попытка
		
			пСтрокаТЧ.бит_БК_СуммаВВалютеБезНДС	= Число(стрПрочитаннаяСтрока.бит_БК_СуммаВВалютеБезНДС);
						
		Исключение
			Если ЗначениеЗаполнено(стрПрочитаннаяСтрока.бит_БК_СуммаВВалютеБезНДС) Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = стрПрочитаннаяСтрока.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = стрПрочитаннаяСтрока.бит_БК_СуммаВВалютеБезНДС;
				пСтрокаОшибки.РасшифровкаОшибки   = "Некорректное значение в поле ""Стоимость без  НДС""";
			КонецЕсли;			
		КонецПопытки;
		
		пСтрокаТЧ.НомерСтрокиФайла   = стрПрочитаннаяСтрока.НомерСтрокиФайла;			
		
	КонецЦикла;	
	
	мдСправочники = Метаданные.Справочники;
	пДлинаКодаЕдИзм = мдСправочники.КлассификаторЕдиницИзмерения.ДлинаКода;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СтатьиОборотов.Ссылка КАК Ссылка,
	|	бит_СтатьиОборотов.Код КАК Код,
	|	бит_СтатьиОборотов.ВидСтатьи КАК ВидСтатьи,
	|	ВЫБОР
	|		КОГДА бит_СтатьиОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Заявка_Инвест)
	|		КОГДА бит_СтатьиОборотов.ВидСтатьи = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.Выручка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Заявка_У)
	|	КОНЕЦ КАК Сценарий
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|ГДЕ
	|	бит_СтатьиОборотов.Код В(&КодыСтатей)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_СтатьиОборотов.Ссылка,
	|	бит_СтатьиОборотов.Код,
	|	бит_СтатьиОборотов.ВидСтатьи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыСтроительства.Ссылка КАК Ссылка,
	|	ОбъектыСтроительства.Код КАК Код
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	ОбъектыСтроительства.Код В(&КодыОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыСтроительства.Ссылка,
	|	ОбъектыСтроительства.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проекты.Ссылка КАК Ссылка,
	|	Проекты.Код КАК Код
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Код В(&КодыПроектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Проекты.Ссылка,
	|	Проекты.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
	|	КлассификаторЕдиницИзмерения.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.Код В(&КодЕдИзм)
	|
	|СГРУППИРОВАТЬ ПО
	|	КлассификаторЕдиницИзмерения.Ссылка,
	|	КлассификаторЕдиницИзмерения.Код";
	
	Запрос.УстановитьПараметр("КодЕдИзм"	, пМассивКодовЕдиницИзмерения);
	Запрос.УстановитьПараметр("КодыОбъектов", пМассивКодовОбъектов);
	Запрос.УстановитьПараметр("КодыПроектов", пМассивКодовПроектов);
	Запрос.УстановитьПараметр("КодыСтатей"	, пМассивКодовСтатей);
	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Подразделения.Ссылка КАК Ссылка,
	|	Подразделения.Код КАК Код
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.Код В(&КодЦФО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Валюты.Ссылка КАК Ссылка,
	|	Валюты.Код КАК Код
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код В(&КодВалюта)";
	Запрос.УстановитьПараметр("КодЦФО", пКопияТаблицы.ВыгрузитьКолонку("КодЦФО"));
	Запрос.УстановитьПараметр("КодВалюта", пКопияТаблицы.ВыгрузитьКолонку("КодВалюта"));
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
	
	пПакетЗапрос = Запрос.ВыполнитьПакет();
	
	пВыгрузкаСтатьи  = пПакетЗапрос[0].Выгрузить();
	пВыгрузкаОбъекты = пПакетЗапрос[1].Выгрузить();
	пВыгрузкаПроекты = пПакетЗапрос[2].Выгрузить();
	пВыгрузкаЕдИзм   = пПакетЗапрос[3].Выгрузить();
	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	пВыгрузкаЦФО = пПакетЗапрос[4].Выгрузить();
	пВыгрузкаВалюта = пПакетЗапрос[5].Выгрузить();
	ДатаКурсаВалюты = ТекущаяДатаСеанса();
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-21 (#3086)
	Для Каждого пСтрокаЕдИзм Из пВыгрузкаЕдИзм Цикл 
		пСтрокаЕдИзм.Код = СокрЛП(пСтрокаЕдИзм.Код);
	КонецЦикла;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-21 (#3086)	
	
	стрПоиска = Новый Структура("Код");
	
	Для Каждого пСтрокаКопииТаблицы Из пКопияТаблицы Цикл 
		
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		Если Не ПустаяСтрока(пСтрокаКопииТаблицы.КодЦФО) Тогда 
			стрПоиска.Код = пСтрокаКопииТаблицы.КодЦФО;			
			пНайденныеЭлементы = пВыгрузкаЦФО.НайтиСтроки(стрПоиска);
			Если пНайденныеЭлементы.Количество() = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = пСтрокаКопииТаблицы.КодЦФО;
				пСтрокаОшибки.РасшифровкаОшибки   = "Не найден ЦФО по коду из файла";
			Иначе
				пСтрокаКопииТаблицы.ЦФО = пНайденныеЭлементы[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
		Если Не ПустаяСтрока(пСтрокаКопииТаблицы.КодВалюта) Тогда 
			стрПоиска.Код = пСтрокаКопииТаблицы.КодВалюта;			
			пНайденныеЭлементы = пВыгрузкаВалюта.НайтиСтроки(стрПоиска);
			Если пНайденныеЭлементы.Количество() = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = пСтрокаКопииТаблицы.КодВалюта;
				пСтрокаОшибки.РасшифровкаОшибки   = "Не найдена Валюта по коду из файла";
			Иначе
				пСтрокаКопииТаблицы.бит_БК_ВалютаДоговора = пНайденныеЭлементы[0].Ссылка;
			КонецЕсли;
			Если ЗначениеЗаполнено(пСтрокаКопииТаблицы.бит_БК_ВалютаДоговора) Тогда
				ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(пСтрокаКопииТаблицы.бит_БК_ВалютаДоговора, ДатаКурсаВалюты);
				пСтрокаКопииТаблицы.бит_БК_Курс = ДанныеКурса.Курс;
				пСтрокаКопииТаблицы.бит_БК_Кратность = ДанныеКурса.Кратность;
			КонецЕсли;
			Если пСтрокаКопииТаблицы.бит_БК_Курс = 0 Тогда  
				пСтрокаКопииТаблицы.бит_БК_Курс = 1; 
			КонецЕсли;
			Если пСтрокаКопииТаблицы.бит_БК_Кратность = 0 Тогда  
				пСтрокаКопииТаблицы.бит_БК_Кратность = 1; 
			КонецЕсли;
		КонецЕсли;
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
		
		Если Не ПустаяСтрока(пСтрокаКопииТаблицы.КодОбъекта) Тогда 
					
			стрПоиска.Вставить("Код"			,	пСтрокаКопииТаблицы.КодОбъекта);			
			
			пНайденныеЭлементы = пВыгрузкаОбъекты.НайтиСтроки(стрПоиска);
			Если пНайденныеЭлементы.Количество() = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодОбъекта);
				пСтрокаОшибки.РасшифровкаОшибки   = "Не найден объект строительства по коду из файла";
			Иначе
				пСтрокаКопииТаблицы.Аналитика_2 = пНайденныеЭлементы[0].Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(пСтрокаКопииТаблицы.КодСтатьи) Тогда 
			
			стрПоиска.Вставить("Код"			,	пСтрокаКопииТаблицы.КодСтатьи);		
			
			пНайденныеЭлементы = пВыгрузкаСтатьи.НайтиСтроки(стрПоиска);
			Если пНайденныеЭлементы.Количество() = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодСтатьи);
				пСтрокаОшибки.РасшифровкаОшибки   = "Не найдена статья оборотов по коду из файла";
			Иначе
				пСтрокаКопииТаблицы.СтатьяОборотов = пНайденныеЭлементы[0].Ссылка;
				пСтрокаКопииТаблицы.ВидСтатьи	   = пНайденныеЭлементы[0].ВидСтатьи;
				пСтрокаКопииТаблицы.Сценарий	   = пНайденныеЭлементы[0].Сценарий;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(пСтрокаКопииТаблицы.КодПроекта) Тогда 
			
			стрПоиска.Вставить("Код"			,	пСтрокаКопииТаблицы.КодПроекта);
						
			пНайденныеЭлементы = пВыгрузкаПроекты.НайтиСтроки(стрПоиска);
			Если пНайденныеЭлементы.Количество() = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодПроекта);
				пСтрокаОшибки.РасшифровкаОшибки   = "Не найден проект по коду из файла";
			Иначе
				пСтрокаКопииТаблицы.Проект = пНайденныеЭлементы[0].Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(пСтрокаКопииТаблицы.КодЕдИзм) Тогда 
			
			стрПоиска.Вставить("Код"			,	пСтрокаКопииТаблицы.КодЕдИзм);				
			пНайденныеЭлементы = пВыгрузкаЕдИзм.НайтиСтроки(стрПоиска);
			
			Если пНайденныеЭлементы.Количество() = 0 Тогда
				
			КонецЕсли;
			
			Если пНайденныеЭлементы.Количество() = 0 Тогда 
				пСтрокаОшибки = ТаблицаОшибок.Добавить();
				пСтрокаОшибки.НомерСтрокиФайла    = пСтрокаКопииТаблицы.НомерСтрокиФайла;
				пСтрокаОшибки.ЗначениеВФайле      = СокрЛП(пСтрокаКопииТаблицы.КодЕдИзм);
				пСтрокаОшибки.РасшифровкаОшибки   = "Не найдена единица измерения по коду из файла";
			Иначе
				пСтрокаКопииТаблицы.бит_БК_ЕдиницаИзмерения = пНайденныеЭлементы[0].Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		пСтрокаБДДС = ТаблицаБДДС.Добавить();
		
		ЗаполнитьЗначенияСвойств(пСтрокаБДДС, пСтрокаКопииТаблицы);
		
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		//пСтрокаБДДС.ЦФО				   = ТаблицаРеквизитовШапки.НайтиСтроки(Новый Структура("ИмяРеквизитаДокумента","бит_БК_ЦФО"))[0].Значение;
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
		пСтрокаБДДС.бит_БК_Организация = ТаблицаРеквизитовШапки.НайтиСтроки(Новый Структура("ИмяРеквизитаДокумента","бит_БК_Организация"))[0].Значение;		

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТаблицыШапки(мДанныеПоискаНаСервере)
	
	Перем пЭлемент;				
	
	Для Каждого пЭлМассива Из мДанныеПоискаНаСервере Цикл 
		
		Выполнить("пЭлемент = "+СтрЗаменить(пЭлМассива.ИмяТипа, "Справочник.", "Справочники.") + ".НайтиПоКоду(""" + пЭлМассива.Код + """)");
		
		пСтрокаДанных = ТаблицаРеквизитовШапки.НайтиПоИдентификатору(пЭлМассива.Идентификатор);
		
		Если пЭлемент = Неопределено ИЛИ пСтрокаДанных = Неопределено Тогда 
			
			пСтрокаОшибки = ТаблицаОшибок.Добавить();
			пСтрокаОшибки.РасшифровкаОшибки = НСтр("ru = 'Не найден элемент справочника """+СтрЗаменить(пЭлМассива.ИмяТипа, "Справочник.", "")+" с кодом "+пЭлМассива.Код);
			
		Иначе 
			пСтрокаДанных.Значение = пЭлемент;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНастройкиЗагрузки()
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-04 (#3630)
	//СписокНастроек = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаЗагрузкиДанныхЗаявкиИзExcelФайла");
	//Заменено на:
	Если ЗначениеЗаполнено(ЭтотОбъект["ВидКорректировки"]) Тогда 
		СписокНастроек = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаЗагрузкиДанныхККиЗБИзExcelФайла");
	Иначе	
		СписокНастроек = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("НастройкаЗагрузкиДанныхЗаявкиИзExcelФайла");
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-04 (#3630)
	
	
	Если СписокНастроек = Неопределено Тогда 
		Возврат новый Структура;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого ЭлементНастройки Из СписокНастроек Цикл 
		СтруктураРезультат.Вставить(ЭлементНастройки.Представление, ЭлементНастройки.Значение);
	КонецЦикла;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-04 (#3630)
	Если ЗначениеЗаполнено(ЭтотОбъект["ВидКорректировки"]) Тогда Возврат СтруктураРезультат КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-04 (#3630)
	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	//добавим инициируем колонки нового формата, чтобы загрузка не отваливалась пока настройки не сделали
	НовыеКолонкиФормата201811 = Новый Массив;
	НовыеКолонкиФормата201811.Добавить("НомерКолонки_Валюта");
	НовыеКолонкиФормата201811.Добавить("НомерКолонки_ЦФО");
	Для каждого НоваяКолонка из НовыеКолонкиФормата201811 Цикл
		Если Не СтруктураРезультат.Свойство(НоваяКолонка) Тогда
			СтруктураРезультат.Вставить(НоваяКолонка, 0);
		КонецЕсли;	
	КонецЦикла;
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)	
	
	Возврат СтруктураРезультат;	
	
КонецФункции

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-05 (#3630)
&НаКлиенте
Процедура ЗаполнитьТЧСуммаКорректировкиДокумента()
		
	Закрыть(ПолучитьАдресНаСервере());
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-05 (#3630)

&НаКлиенте
Процедура ЗаполнитьТЧБДДСДокумента()
		
	пПараметрыШапки = Новый Структура;
	
	Для Каждого пРеквизитШапки Из ТаблицаРеквизитовШапки Цикл 
		пПараметрыШапки.Вставить(пРеквизитШапки.ИмяРеквизитаДокумента,пРеквизитШапки.Значение);		
	КонецЦикла;
	
	//Устанавлиаем флаг загрузки
	пПараметрыШапки.Вставить("бит_БК_ЗагрузкаИзExcel", Истина);
		
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	//пСтруктураКурса = ПолучитьКурсы(пПараметрыШапки["бит_БК_ВалютаДокумента"], ТекущаяДата());
	//пПараметрыШапки.Вставить("бит_БК_КурсДокумента"		, пСтруктураКурса.Курс);	
	//пПараметрыШапки.Вставить("бит_БК_КратностьДокумента", пСтруктураКурса.Кратность);
	пПараметрыШапки.Вставить("бит_БК_ЦФО", ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка"));	
	пПараметрыШапки.Вставить("бит_БК_ВалютаДокумента", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));	
	пПараметрыШапки.Вставить("бит_БК_КурсДокумента", 1);	
	пПараметрыШапки.Вставить("бит_БК_КратностьДокумента", 1);
	Если ТаблицаБДДС.Количество() > 0 Тогда
		пПараметрыШапки.Вставить("бит_БК_ЦФО", ТаблицаБДДС[0].ЦФО);	
		пПараметрыШапки.Вставить("бит_БК_ВалютаДокумента", ТаблицаБДДС[0].бит_БК_ВалютаДоговора);	
		пПараметрыШапки.Вставить("бит_БК_КурсДокумента", ТаблицаБДДС[0].бит_БК_Курс);	
		пПараметрыШапки.Вставить("бит_БК_КратностьДокумента", ТаблицаБДДС[0].бит_БК_Кратность);
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
	
	Если пПараметрыШапки.Свойство("бит_БК_ЦФО") Тогда 
		пПараметрыШапки.Вставить("ЦФО"						, пПараметрыШапки.бит_БК_ЦФО);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ПараметрыШапки, АдресТаблицаДанных", пПараметрыШапки, ПолучитьАдресНаСервере());
	
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсы(парВалюта, парПериод)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(парВалюта, парПериод);
	
КонецФункции

&НаСервере
Функция ПолучитьАдресНаСервере()
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-05-05 (#3630)
	//Возврат ПоместитьВоВременноеХранилище(ТаблицаБДДС.Выгрузить(), Новый УникальныйИдентификатор);
	//Заменено на:
	Если ЗначениеЗаполнено(ЭтотОбъект["ВидКорректировки"]) Тогда 
		Возврат ПоместитьВоВременноеХранилище(ТаблицаСуммыКорректировок.Выгрузить(), Новый УникальныйИдентификатор);
	Иначе 
		Возврат ПоместитьВоВременноеХранилище(ТаблицаБДДС.Выгрузить(), Новый УникальныйИдентификатор);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-05-05 (#3630)	
КонецФункции


#КонецОбласти
