        
////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПЕРЕМЕННЫЕ

// Хранит значение текущего параметра
&НаКлиенте
Перем мТекущийПараметр;

// Хранит значение текущей даты начала
&НаКлиенте
Перем мТекущийПериод_ДатаНачала;

// Хранит значение текущей даты окончания
&НаКлиенте
Перем мТекущийПериод_ДатаОкончания;

// Хранит значение текущего сценария
&НаКлиенте
Перем мТекущийСценарий;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// бит_ASubbotina Процедура выполняет действия, необходимые при изменения периода
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура ИзменениеПериодаКлиент()

	Если Объект.Период.ДатаНачала <> мТекущийПериод_ДатаНачала 
		ИЛИ Объект.Период.ДатаОкончания <> мТекущийПериод_ДатаОкончания Тогда
	
		ИзменениеПериодаСервер();	
	
	КонецЕсли;	
	
	мТекущийПериод_ДатаНачала    = Объект.Период.ДатаНачала;
	мТекущийПериод_ДатаОкончания = Объект.Период.ДатаОкончания;
	
КонецПроцедуры // ИзменениеПериодаКлиент()

// бит_ASubbotina Процедура выполняет действия, необходимые при изменения сценария
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура ИзменениеСценарияКлиент()

	Если Объект.Сценарий <> мТекущийСценарий Тогда
	
		ИзменениеСценарияСервер();	
	
	КонецЕсли;	
	
	мТекущийСценарий = Объект.Сценарий;
	
КонецПроцедуры // ИзменениеСценарияКлиент()

// бит_ASubbotina Процедура устанавливает картинку строки таблицы
//
// Параметры:
//  СтрокаТаблицы  - ДанныеФормыЭлементКоллекции
//
&НаКлиенте
Процедура УстановитьКартинкуСтроки(СтрокаТаблицы)

	Если СтрокаТаблицы.ПометкаНаУдаление Тогда
		СтрокаТаблицы.Картинка = БиблиотекаКартинок.бит_казна_НетЗначений;
	ИначеЕсли СтрокаТаблицы.ЭтоНоваяСтрока Тогда
		СтрокаТаблицы.Картинка = БиблиотекаКартинок.бит_казна_НовЗначение;
	ИначеЕсли СтрокаТаблицы.Изменено Тогда
		СтрокаТаблицы.Картинка = БиблиотекаКартинок.Изменить;
	Иначе
		СтрокаТаблицы.Картинка = БиблиотекаКартинок.бит_Реквизит;
	КонецЕсли;

КонецПроцедуры // УстановитьКартинкуСтроки()

// бит_ASubbotina Функция определяет изменены ли данные в строке
//
// Параметры:
//  ТекущиеДанные  - ДанныеФормыКоллекция
//  
// Возвращаемое значение:
//   Булево
//
&НаКлиенте
Функция ПолучитьПризнакИзменений(ТекущиеДанные)

	Изменено = Ложь;
	
	Если ТекущиеДанные.Период <> ТекущиеДанные.Старое_Период 
		ИЛИ ТекущиеДанные.Сценарий <> ТекущиеДанные.Старое_Сценарий
		ИЛИ ТекущиеДанные.Аналитика_1 <> ТекущиеДанные.Старое_Аналитика_1 
		ИЛИ ТекущиеДанные.Аналитика_2 <> ТекущиеДанные.Старое_Аналитика_2 
		ИЛИ ТекущиеДанные.Аналитика_3 <> ТекущиеДанные.Старое_Аналитика_3 
		ИЛИ ТекущиеДанные.Аналитика_4 <> ТекущиеДанные.Старое_Аналитика_4 
		ИЛИ ТекущиеДанные.ЗначениеПараметра <> ТекущиеДанные.Старое_ЗначениеПараметра 
		ИЛИ ТекущиеДанные.ЕдиницаИзмерения <> ТекущиеДанные.Старое_ЕдиницаИзмерения Тогда
		
		Изменено = Истина;	
	
	КонецЕсли;              	

	Возврат Изменено;
	
КонецФункции // ПолучитьПризнакИзменений()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// бит_ASubbotina Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	мТекущийПараметр = Объект.Параметр;
	мТекущийСценарий = Объект.Сценарий;
	мТекущийПериод_ДатаНачала    = Объект.Период.ДатаНачала;
	мТекущийПериод_ДатаОкончания = Объект.Период.ДатаОкончания;
	                       		
КонецПроцедуры // ПриОткрытии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ
         
// бит_ASubbotina Процедура - обработчик события "Нажатие" кнопки "ДействиеНастройкаПериода".
//
&НаКлиенте
Процедура КомандаНастройкаПериода(Команда)
	
	// 1С-ИжТиСи Полина 6.10.2015 (
	//бит_ОтчетыКлиент.НастроитьПериод(Объект.НастройкаПериода, Объект.Период);
	КонецПериода = ?(Объект.Период.ДатаОкончания = '0001-01-01', Объект.Период.ДатаОкончания, КонецДня(Объект.Период.ДатаОкончания));
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.Период.ДатаНачала, Объект.Период.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.КомандаНастройкаПериода, , , , ОписаниеОповещения);
	//ИзменениеПериодаКлиент();
	// 1С-ИжТиСи Полина 6.10.2015 )
	
КонецПроцедуры // КомандаНастройкаПериода()

// 1С-ИжТиСи Полина 6.10.2015 (
&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.Период.ДатаНачала = РезультатВыбора.НачалоПериода;
	Объект.Период.ДатаОкончания = РезультатВыбора.КонецПериода;
	
	ИзменениеПериодаКлиент();

КонецПроцедуры
// 1С-ИжТиСи Полина 6.10.2015 )

// бит_ASubbotina Процедура - обработчик команды "Обновить".
//
&НаКлиенте
Процедура Обновить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Параметр) Тогда
		ТекстСообщения = Нстр("ru = 'Заполните значения параметра.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстСообщения = Нстр("ru = 'Заполните значения периода.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;
	
	ОбновитьТаблицыНаФорме();
	
КонецПроцедуры // Обновить()

// бит_ASubbotina Процедура - обработчик команды "Записать".
//
&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьВсеИзменения();
		
КонецПроцедуры // Записать()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
       
// бит_ASubbotina Процедура - обработчик события "ПриИзменении" поля ввода "Параметр".
//
&НаКлиенте
Процедура ПараметрПриИзменении(Элемент)
	
	Если Объект.Параметр <> мТекущийПараметр Тогда
	
		ИзменениеПараметраСервер();	
	
	КонецЕсли;	
	
	мТекущийПараметр = Объект.Параметр;
		
КонецПроцедуры // ПараметрПриИзменении()

// бит_ASubbotina Процедура - обработчик события "Очистка" поля ввода "Параметр".
//
&НаКлиенте
Процедура ПараметрОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПараметрОчистка()

// бит_ASubbotina Процедура - обработчик события "ПриИзменении" поля ввода "Период".
//
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ИзменениеПериодаКлиент();
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Объект.Период.ДатаНачала, 
																				Объект.Период.ДатаОкончания);
	
КонецПроцедуры // ПериодПриИзменении()

// бит_ASubbotina Процедура - обработчик события "ПриИзменении" поля ввода "Сценарий".
//
&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ИзменениеСценарияКлиент();
	
КонецПроцедуры // СценарийПриИзменении()

// бит_ASubbotina Процедура - обработчик события "Очистка" поля ввода "Сценарий".
//
&НаКлиенте
Процедура СценарийОчистка(Элемент, СтандартнаяОбработка)
	
	ИзменениеСценарияКлиент();
	
КонецПроцедуры // СценарийОчистка()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ "ЗначенияПараметров" и её элементов

// бит_ASubbotina Процедура - обработчик события "ПриНачалеРедактирования" 
// табличной поля "Распределение".
//
&НаКлиенте
Процедура ЗначенияПараметровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЗначенияПараметров.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные
																		   ,фКэшЗначений.ИзмеренияДоп
																		   ,фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры // ЗначенияПараметровПриНачалеРедактирования()

// бит_ASubbotina Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ЗначенияПараметров".
//
&НаКлиенте
Процедура ЗначенияПараметровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	НоваяСтрока = Объект.ЗначенияПараметров.Добавить();
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.ЗначенияПараметров.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	Иначе
		НоваяСтрока.ЕдиницаИзмерения = Объект.ЕдиницаИзмерения;	
		Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
			НоваяСтрока.Сценарий = Объект.Сценарий;		
		КонецЕсли;
		НоваяСтрока.ЗначениеПараметра = фЗначениеПараметраПоУмолчанию;
		НоваяСтрока.Период 		   = Объект.Период.ДатаОкончания;
	КонецЕсли;
	 	
	НоваяСтрока.ЭтоНоваяСтрока    = Истина;
	НоваяСтрока.Изменено          = Ложь;
	НоваяСтрока.ПометкаНаУдаление = Ложь;
	УстановитьКартинкуСтроки(НоваяСтрока);
			
	Элементы.ЗначенияПараметров.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры // ЗначенияПараметровПередНачаломДобавления()

// бит_ASubbotina Процедура - обработчик события "ПередУдалением" табличного поля "ЗначенияПараметров".
//
&НаКлиенте
Процедура ЗначенияПараметровПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Для каждого ВыделеннаяСтрока Из Элементы.ЗначенияПараметров.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ЗначенияПараметров.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если СтрокаТаблицы.ЭтоНоваяСтрока Тогда   		
			Объект.ЗначенияПараметров.Удалить(СтрокаТаблицы);   	
		Иначе  			
			СтрокаТаблицы.ПометкаНаУдаление = Не СтрокаТаблицы.ПометкаНаУдаление;
			УстановитьКартинкуСтроки(СтрокаТаблицы);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗначенияПараметровПередУдалением()

 
// бит_ASubbotina Процедура - обработчик события "ПриИзменении" любого поля ввода таблицы "ЗначенияПараметров".
//
&НаКлиенте
Процедура ЗначенияПараметровРеквизитПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗначенияПараметров.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоНоваяСтрока Тогда
		ТекущиеДанные.Изменено = ПолучитьПризнакИзменений(ТекущиеДанные);	
	КонецЕсли;
	УстановитьКартинкуСтроки(ТекущиеДанные);
	
КонецПроцедуры // ЗначенияПараметровРеквизитПриИзменении()

// бит_ASubbotina Процедура - обработчик события "ПриИзменении" полей ввода "Период".
// в строке табличной части "ЗначенияПараметров".
//
&НаКлиенте
Процедура ЗначенияПараметровПериодПриИзменении(Элемент)

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗначенияПараметров.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда
		ТекущиеДанные.Период = Объект.Период.ДатаОкончания;
	КонецЕсли;
		
	Если Не ТекущиеДанные.ЭтоНоваяСтрока Тогда
		ТекущиеДанные.Изменено = ПолучитьПризнакИзменений(ТекущиеДанные);
	КонецЕсли;
	УстановитьКартинкуСтроки(ТекущиеДанные);
	
КонецПроцедуры // ЗначенияПараметровПериодПриИзменении()

// бит_ASubbotina Процедура - обработчик события "НачалоВыбора" полей ввода "Аналитика_i" (i от 1 до 4).
// в строке табличной части "ЗначенияПараметров".
//
&НаКлиенте
Процедура ЗначенияПараметровАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗначенияПараметров.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ЗначенияПараметров", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // ЗначенияПараметровАналитика_НачалоВыбора()

// бит_ASubbotina Процедура - обработчик события "Очистка" полей ввода "Аналитика_i" (i от 1 до 4).
// в строке табличной части "ЗначенияПараметров".
//
&НаКлиенте
Процедура ЗначенияПараметровАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗначенияПараметров.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ЗначенияПараметров", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
	                                                                       	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // ЗначенияПараметровАналитика_Очистка()

// бит_ASubbotina Процедура - обработчик события "ПриИзменении" полей ввода "ЕдиницаИзмерения".
// в строке табличной части "ЗначенияПараметров".
//
&НаКлиенте
Процедура ЗначенияПараметровЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗначенияПараметров.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЕдиницаИзмерения <> Объект.ЕдиницаИзмерения Тогда
			ТекстСообщения = Нстр("ru = 'Значение единицы измерения не соответствует значению, задонному для параметра по умолчанию (" + Объект.ЕдиницаИзмерения+ ").'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
		Если Не ТекущиеДанные.ЭтоНоваяСтрока Тогда
			ТекущиеДанные.Изменено = ПолучитьПризнакИзменений(ТекущиеДанные);
		КонецЕсли;
		УстановитьКартинкуСтроки(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры // ЗначенияПараметровЕдиницаИзмеренияПриИзменении()

// бит_ASubbotina Процедура - обработчик события "Очистка" полей ввода "ЕдиницаИзмерения".
// в строке табличной части "ЗначенияПараметров".
//
&НаКлиенте
Процедура ЗначенияПараметровЕдиницаИзмеренияОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ЗначенияПараметровЕдиницаИзмеренияОчистка()


////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// бит_ASubbotina Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.Обработки.бит_РедактированиеЗначенийПроизвольныхПараметров;
	
	// Вызов механизма защиты
	бит_ЛицензированиеБФCервер.ПроверитьВозможностьРаботы(ЭтаФорма, МетаданныеОбъекта.ПолноеИмя(), фОтказ);
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	фДоступноеКоличествоИзмерений = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоИзмеренийПроизвольныхПараметров();
	
	фЗначениеПараметраПоУмолчанию = Неопределено;
	
	Объект.Период.Вариант		  = ВариантСтандартногоПериода.ЭтотГод;		
	//бит_РаботаСДиалогамиКлиент.ИнициализироватьНастройкуПериода(Объект.НастройкаПериода, Объект.Период);
	
	ЗаполнитьКэшЗначений();
	
	УстановитьВидимость();
		
КонецПроцедуры // ПриСозданииНаСервере()


////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
                             
// бит_ASubbotina Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Формирование струткуры измерений
	ИзмеренияДоп = Новый Структура;
	Для i = 1 По фДоступноеКоличествоИзмерений Цикл
		ИзмеренияДоп.Вставить("Аналитика_" + Строка(i), "Аналитика " + Строка(i));
	КонецЦикла; 
	
	НастройкиИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиИзмеренийПроизвольногоПараметра(Объект.Параметр);
	
	фКэшЗначений.Вставить("ИзмеренияДоп"	  , ИзмеренияДоп);	
	фКэшЗначений.Вставить("НастройкиИзмерений", НастройкиИзмерений);     	
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// бит_ASubbotina Процедура управляет видимостью и доступностью элементов формы
//
// Параметры:
//  Нет
//
&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоЧисло = Ложь;
	СтрокаФормат = "";
	
	Если ЗначениеЗаполнено(Объект.Параметр) Тогда		
		ТипЗначенияПараметра = Объект.Параметр.ТипЗначения;
		ЭтоЧисло = ТипЗначенияПараметра.СодержитТип(Тип("Число"));
	КонецЕсли;
	
	ОтображатьСценарий = Не ЗначениеЗаполнено(Объект.Сценарий);
	
	// Видимость колонок
	Элементы.ЗначенияПараметровЕдиницаИзмерения.Видимость = ЭтоЧисло;
	Элементы.ЗначенияПараметровСценарий.Видимость 		  = ОтображатьСценарий;
	
	
	// Если значение параметра - число
	Если ЭтоЧисло Тогда		
		
		// Формат для чисел
		КоличествоЗнаков  = ТипЗначенияПараметра.КвалификаторыЧисла.Разрядность;
		Точность          = ТипЗначенияПараметра.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		ПредставлениеНуля = "0";
		Для i = 1 По Точность Цикл 		
			ПредставлениеНуля = ПредставлениеНуля + ?(ПредставлениеНуля = "0", ",0", "0");			
		КонецЦикла;   			
		СтрокаФормат      = "ЧЦ=" + КоличествоЗнаков + "; ЧДЦ=" + Точность + "; ЧН=" + ПредставлениеНуля;
		
		// Доступность единицы измерения
		ЭтоКлассификатор = ТипЗнч(Объект.Параметр.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения");
		Элементы.ЗначенияПараметровЕдиницаИзмерения.ТолькоПросмотр = ЭтоКлассификатор;
		
	КонецЕсли; 
	
	Элементы.ЗначенияПараметровЗначениеПараметра.Формат 			  = СтрокаФормат;
	Элементы.ЗначенияПараметровЗначениеПараметра.ФорматРедактирования = СтрокаФормат;
		
КонецПроцедуры // УстановитьВидимость()

// бит_ASubbotina Процедура обновляет таблицу значений
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ОбновитьТаблицуЗначений()

	Объект.ЗначенияПараметров.Очистить();
	Если ЗначениеЗаполнено(Объект.Параметр) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Период.ДатаОкончания) Тогда
			Объект.Период.ДатаОкончания = ?(Объект.Период.ДатаНачала < ТекущаяДата(), ТекущаяДата(), КонецДня(Объект.Период.ДатаНачала));		
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Параметр"     , Объект.Параметр);
		Запрос.УстановитьПараметр("НачалоПериода", Объект.Период.ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода" , Объект.Период.ДатаОкончания);
		ТекстЗапроса = "
		|ВЫБРАТЬ
        |	бит_ЗначенияПараметров.Параметр,
		|	бит_ЗначенияПараметров.Период,
        |	бит_ЗначенияПараметров.Сценарий,
        |	бит_ЗначенияПараметров.ЕдиницаИзмерения,
        |	бит_ЗначенияПараметров.Аналитика_1,
        |	бит_ЗначенияПараметров.Аналитика_2,
        |	бит_ЗначенияПараметров.Аналитика_3,
        |	бит_ЗначенияПараметров.Аналитика_4,
        |	бит_ЗначенияПараметров.ЗначениеПараметра,
		|	бит_ЗначенияПараметров.Период 				КАК Старое_Период,
        |	бит_ЗначенияПараметров.Сценарий 			КАК Старое_Сценарий,
        |	бит_ЗначенияПараметров.ЕдиницаИзмерения 	КАК Старое_ЕдиницаИзмерения,
        |	бит_ЗначенияПараметров.Аналитика_1 			КАК Старое_Аналитика_1,
        |	бит_ЗначенияПараметров.Аналитика_2 			КАК Старое_Аналитика_2,
        |	бит_ЗначенияПараметров.Аналитика_3 			КАК Старое_Аналитика_3,
        |	бит_ЗначенияПараметров.Аналитика_4 			КАК Старое_Аналитика_4,
        |	бит_ЗначенияПараметров.ЗначениеПараметра 	КАК Старое_ЗначениеПараметра
        |ИЗ
        |	РегистрСведений.бит_ЗначенияПроизвольныхПараметров КАК бит_ЗначенияПараметров
        |ГДЕ
        |	бит_ЗначенияПараметров.Параметр = &Параметр
		|	И бит_ЗначенияПараметров.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|%ДопУсловие%
	    |УПОРЯДОЧИТЬ ПО 
		|	бит_ЗначенияПараметров.Период ВОЗР
		|"; 		
		
		ТекстДопУсловия = "";
		Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
			ТекстДопУсловия = ТекстДопУсловия + "
			|	И бит_ЗначенияПараметров.Сценарий = &Сценарий ";
			Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ДопУсловие%", ТекстДопУсловия);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Объект.ЗначенияПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Картинка = БиблиотекаКартинок.бит_Реквизит;
					
		КонецЦикла;		
	
	КонецЕсли;    	

КонецПроцедуры // ОбновитьТаблицуЗначений()

// бит_ASubbotina Процедура обновляет таблицу значений и таблицу истории значений
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ОбновитьТаблицыНаФорме()
	
	ОбновитьТаблицуЗначений();
		
	УстановитьВидимость();

КонецПроцедуры // ОбновитьТаблицыНаФорме()

// бит_ASubbotina Процедура выполняет действия, необходимые при изменения параметра
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ИзменениеПараметраСервер()

	ТекПараметр = Объект.Параметр;
		
	Если ЗначениеЗаполнено(ТекПараметр) Тогда
		
			НастройкиИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиИзмеренийПроизвольногоПараметра(ТекПараметр);
			фКэшЗначений.Вставить("НастройкиИзмерений", НастройкиИзмерений);
			
			// Настроим отображение полей доп. аналитик в табличном поле Распределение.
			бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																			 			,"ЗначенияПараметров"
																						,фКэшЗначений.ИзмеренияДоп
																						,фКэшЗначений.НастройкиИзмерений);
																						
			ЭтоЧисло = ТекПараметр.ТипЗначения.СодержитТип(Тип("Число"));
			Если ЭтоЧисло Тогда
				Объект.ЕдиницаИзмерения = ТекПараметр.ЕдиницаИзмерения;
			Иначе
				Объект.ЕдиницаИзмерения = Неопределено;
			КонецЕсли;

			// Определим значение по умолчанию
			фЗначениеПараметраПоУмолчанию = Объект.Параметр.ТипЗначения.ПривестиЗначение();
	
	КонецЕсли;
	
	ОбновитьТаблицыНаФорме();

КонецПроцедуры // ИзменениеПараметраСервер()

// бит_ASubbotina Процедура выполняет действия, необходимые при изменения периода
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ИзменениеПериодаСервер()

	ОбновитьТаблицыНаФорме();

КонецПроцедуры // ИзменениеПериодаСервер()

// бит_ASubbotina Процедура выполняет действия, необходимые при изменения сценария
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ИзменениеСценарияСервер()

	ОбновитьТаблицыНаФорме();
	
КонецПроцедуры // ИзменениеСценарияСервер()

// бит_ASubbotina Процедура записывает значения параметров
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ЗаписатьВсеИзменения()

	Если Не ЗначениеЗаполнено(Объект.Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.ЗначенияПараметров Цикл
		
		Если (СтрокаТаблицы.Изменено ИЛИ СтрокаТаблицы.ПометкаНаУдаление) 
			И Не СтрокаТаблицы.ЭтоНоваяСтрока Тогда
			
			// Удаление
			МенеджерЗаписи = РегистрыСведений.бит_ЗначенияПроизвольныхПараметров.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Параметр 		= Объект.Параметр;
			МенеджерЗаписи.Период 			= СтрокаТаблицы.Старое_Период;
			МенеджерЗаписи.Сценарий 		= СтрокаТаблицы.Старое_Сценарий;
			МенеджерЗаписи.Аналитика_1 		= СтрокаТаблицы.Старое_Аналитика_1;
			МенеджерЗаписи.Аналитика_2 		= СтрокаТаблицы.Старое_Аналитика_2;
			МенеджерЗаписи.Аналитика_3 		= СтрокаТаблицы.Старое_Аналитика_3;
			МенеджерЗаписи.Аналитика_4 		= СтрокаТаблицы.Старое_Аналитика_4;
			МенеджерЗаписи.ЕдиницаИзмерения = СтрокаТаблицы.Старое_ЕдиницаИзмерения;			
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Удалить();
			
		КонецЕсли;
		
		Если СтрокаТаблицы.Изменено ИЛИ СтрокаТаблицы.ЭтоНоваяСтрока Тогда
				
			// Запись
			МенеджерЗаписи = РегистрыСведений.бит_ЗначенияПроизвольныхПараметров.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Параметр 		 = Объект.Параметр;
			МенеджерЗаписи.Период 			 = СтрокаТаблицы.Период;
			МенеджерЗаписи.Сценарий 		 = СтрокаТаблицы.Сценарий;
			МенеджерЗаписи.Аналитика_1 		 = СтрокаТаблицы.Аналитика_1;
			МенеджерЗаписи.Аналитика_2 		 = СтрокаТаблицы.Аналитика_2;
			МенеджерЗаписи.Аналитика_3 		 = СтрокаТаблицы.Аналитика_3;
			МенеджерЗаписи.Аналитика_4 		 = СтрокаТаблицы.Аналитика_4;
			МенеджерЗаписи.ЕдиницаИзмерения  = СтрокаТаблицы.ЕдиницаИзмерения;
			МенеджерЗаписи.ЗначениеПараметра = СтрокаТаблицы.ЗначениеПараметра;
            Попытка
				МенеджерЗаписи.Записать();
			Исключение
			КонецПопытки;
						
		КонецЕсли; 		
	
	КонецЦикла;

	ОбновитьТаблицуЗначений();
	
КонецПроцедуры // ЗаписатьВсеИзменения()   
