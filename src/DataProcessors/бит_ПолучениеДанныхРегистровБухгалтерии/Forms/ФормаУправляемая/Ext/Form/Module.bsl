
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийОбъектСистемы; // Хранит текущий объект системы.

&НаКлиенте
Перем мТекущийВидСравнения; // Служит для передачи вида сравнения между обработчиками.

&НаКлиенте
Перем мТекущийВидПараметра; // Служит для передачи вида параметра между обработчиками.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
    //МетаданныеОбъекта = Метаданные.Обработки.бит_ПолучениеДанныхРегистровБухгалтерии;
	
	// Кэширование значений, используемых на клиенте.
	ЗаполнитьКэшЗначений();      
		
	// Анализ параметров формы.
	Если Не Параметры.ЭтоЗаполнениеИзДокументаОперации Тогда
		// Восстановление настроек при необходимости.
		УстановитьЗначенияПоУмолчанию();   		
	КонецЕсли;        	 
	
	Параметры.Свойство("ОбъектСистемы", Объект.ОбъектСистемы);
	Если Параметры.Свойство("ИмяОбъектаСистемы") Тогда		
			Объект.ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное"
																				   , Параметры.ИмяОбъектаСистемы);   		
	КонецЕсли;
																			   
	Если Параметры.Свойство("ДокументЗаполнения") Тогда
		
		Объект.ДокументЗаполнения = Параметры.ДокументЗаполнения;
		ДатаЗаполнения = Объект.ДокументЗаполнения.Дата;
		
		Если ЗначениеЗаполнено(Объект.ДокументЗаполнения) Тогда
		
		  МетаОбъект = Объект.ДокументЗаполнения.Метаданные();
		  Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаОбъект) Тогда  		  
		  	  Объект.Организация = Объект.ДокументЗаполнения.Организация;   		  
		  КонецЕсли; 		  
		  Если бит_РаботаСМетаданными.ЕстьРеквизит("Сценарий", МетаОбъект) Тогда   		  
		  	  Объект.Сценарий = Объект.ДокументЗаполнения.Сценарий;    		  
		  КонецЕсли; 		  
		  
		КонецЕсли; 
		
	Иначе
		
		Параметры.Свойство("Сценарий"     , Объект.Сценарий);
		Параметры.Свойство("Организация"  , Объект.Организация);
		Параметры.Свойство("ДатаДок"      , ДатаЗаполнения)
		
	КонецЕсли; 
	
	ТекРежим = "Групповой";
	Если Параметры.Свойство("Режим") Тогда		
		ТекРежим = Параметры.Режим; 		
	КонецЕсли;
	
	флЭтоОдиночный = ?(ВРег(ТекРежим) = ВРег("Одиночный"), Истина, Ложь);
	
	Если ЗначениеЗаполнено(ДатаЗаполнения) Тогда
		
		Объект.СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		Объект.СтандартныйПериод.ДатаНачала    = НачалоМесяца(ДатаЗаполнения);
		Объект.СтандартныйПериод.ДатаОкончания = КонецМесяца(ДатаЗаполнения);
		
	Иначе	
		
		Объект.СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотГод;
		
	КонецЕсли; 
	
	ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
	
	Если ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		
		Элементы.ОбъектСистемы.ТолькоПросмотр = Истина;
		ОбновитьСтруктуруТаблицыДанных();
		
	КонецЕсли; 	
	
	// Видимость в зависимости от режима
	Элементы.ГруппаСозданныеОбъекты.Видимость               = НЕ флЭтоОдиночный;
	Элементы.ТаблицаДанныеКомандаСоздатьДокументы.Видимость = НЕ флЭтоОдиночный;
	Элементы.ТаблицаДанныеГруппаПеренести.Видимость         = флЭтоОдиночный;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мТекущийОбъектСистемы = Объект.ОбъектСистемы;
	
	Элементы.ФормаКомандаВидимостьНастройки.Пометка       = НЕ ПанельНастройкиСкрыта;	
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	Если ПодтверждениеОчисткиДанных(, "ОбъектСистемыВопросЗавершение") Тогда
		
		// Безусловное выполнение
        ОбъектСистемыИзменение(); 
		мТекущийОбъектСистемы = Объект.ОбъектСистемы;			
		
	КонецЕсли; 
	
КонецПроцедуры // ОбъектСистемыПриИзменении()

// Процедура обработчик оповещения "ОбъектСистемыВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ОбъектСистемыВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Выполнение после подтверждения пользователя.
		ОбъектСистемыИзменение(); 
		мТекущийОбъектСистемы = Объект.ОбъектСистемы;				
		
	Иначе	
		
		Объект.ОбъектСистемы = мТекущийОбъектСистемы;		
		
	КонецЕсли; 
	
КонецПроцедуры	// ОбъектСистемыВопросЗавершение

&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(фКэшЗначений.ВидОбъектаРБ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,Объект.ОбъектСистемы);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент);
	
КонецПроцедуры // ОбъектСистемыНачалоВыбора()

&НаКлиенте
Процедура ИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                                                   ,Элемент
	                                                   ,Объект
	                                                   ,"ИсточникДанных"
													   ,фКэшЗначений.СписокТиповИсточникДанных
													   ,СтандартнаяОбработка);
	
	
КонецПроцедуры // ИсточникДанныхНачалоВыбора()

&НаКлиенте
Процедура ИсточникДанныхОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ИсточникДанных.ВыбиратьТип = Истина;
	
КонецПроцедуры // ИсточникДанныхОчистка()

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	ИсточникДанныхИзменение();	
	
КонецПроцедуры // ИсточникДанныхПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДанные

&НаКлиенте
Процедура ТаблицаДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Исключения = Новый Массив;
	Исключения.Добавить("ТаблицаДанныеВыполнять");
	Исключения.Добавить("ТаблицаДанныеПериод");
	
	Если Исключения.Найти(Поле.Имя) = Неопределено Тогда
		
		ИмяРеквизита = СтрЗаменить(Поле.Имя, "ТаблицаДанные_","");
		ТекСтрока = Элементы.ТаблицаДанные.ТекущиеДанные;
		ТекЗначение = ТекСтрока[ИмяРеквизита];
		
		Если ЗначениеЗаполнено(ТекЗначение) Тогда
		
			ПоказатьЗначение(,ТекЗначение);
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаДанныеВыбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСозданныеОбъекты

&НаКлиенте
Процедура СозданныеОбъектыСозданныйОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка =  Ложь;
	
КонецПроцедуры // СозданныеОбъектыСозданныйОбъектНачалоВыбора()

&НаКлиенте
Процедура СозданныеОбъектыСозданныйОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка =  Ложь;
	
КонецПроцедуры // СозданныеОбъектыСозданныйОбъектОчистка()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборВОтчете

// Процедура - обработчик события "НачалоВыбора" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВидовСравнения); 
	
КонецПроцедуры // ОтборВОтчетеВидСравненияНачалоВыбора()

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВидовСравнения);
	
КонецПроцедуры // ОтборВОтчетеВидСравненияАвтоПодбор()
     
// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеВидСравненияПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеЗначениеПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеВидСравненияПриИзмененииСервер(Ид, мТекущийВидСравнения)
		
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеВидСравненияПриИзменении(ТекущиеДанные, мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеЗначениеПриИзмененииСервер(Ид)
	
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеЗначениеПриИзменении(ТекущиеДанные);
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ОтборВОтчете.ТекущиеДанные;	
	
	Если ТекущаяСтрока.Значение = Неопределено Тогда
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
		
	Иначе	
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОтборВОтчетеПриОкончанииРедактирования()

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеОчистка" 
// табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	
КонецПроцедуры // ОтборВОтчетеЗначениеОчистка()

// Процедура заполняет таблицу отборов. 
// 
&НаСервере
Процедура ЗаполнитьТаблицуОтборов()

	ТаблицаОтборов = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(Объект.ИсточникДанных, ТаблицаОтборов);
	ЗначениеВДанныеФормы(ТаблицаОтборов, ОтборВОтчете);	

КонецПроцедуры // ЗаполнитьТаблицуОтборов()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметры

// Процедура выполняет обновление таблицы параметров.
// 
&НаСервере
Процедура ОбновитьТаблицуПараметров()
	
	бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Объект.ИсточникДанных, ТаблицаПараметры, Ложь);
	
КонецПроцедуры // ОбновитьТаблицуПараметров()

// Процедура - обработчик события "ПриНачалеРедактирования" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;	 	
	
	Если НоваяСтрока И НЕ Копирование Тогда  		
		ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение;   			
	КонецЕсли; 
	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	ОграничитьОписаниеТиповПараметра();
	
КонецПроцедуры // ТаблицаПараметрыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыВидПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИД = Элементы.ТаблицаПараметры.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменитьВидПараметра(ИД, мТекущийВидПараметра);
		
		мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
		
		ОграничитьОписаниеТиповПараметра();
				
	КонецЕсли; 
		
КонецПроцедуры // ТаблицаПараметрыВидПараметраПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗначениеПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные        = Элементы.ТаблицаПараметры.ТекущиеДанные;	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда  		
		СтандартнаяОбработка = Ложь;			
	КонецЕсли;

КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраНачалоВыбора()

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение Тогда		
		Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраОчистка()

// Процедура ограничивает описание типов в строке таблица параметров.
// 
&НаКлиенте
Процедура ОграничитьОписаниеТиповПараметра()

	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда
			
		ОписаниеОграничение = фКэшЗначений.ОписаниеТипаСтрока;
		
	Иначе
		
		Если ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда  		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина; 		
		Иначе	                                                        		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Ложь;  		
		КонецЕсли; 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоступныеТипы) Тогда
			ОписаниеОграничение = Новый ОписаниеТипов(ТекущиеДанные.ДоступныеТипы, МассивТипов);
		Иначе		
			ОписаниеОграничение = Новый ОписаниеТипов(фКэшЗначений.ОписаниеПроизвольногоТипа, МассивТипов);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Ограничим тип значения
	Элементы.ТаблицаПараметрыЗначениеПараметра.ОграничениеТипа = ОписаниеОграничение;  

КонецПроцедуры // ОграничитьОписаниеТиповПараметра()

// Процедура выполняет действия, неоходимые при изменении вида параметра.
// 
// Параметры:
//  ИД  				 - Число.
//  мТекущийВидПараметра - ПеречислениеСсылка.бит_ВидыПараметровЗапроса.
// 
&НаСервере
Процедура ИзменитьВидПараметра(ИД, мТекущийВидПараметра)

	ТекущиеДанные = ТаблицаПараметры.НайтиПоИдентификатору(ИД);
	бит_МеханизмПолученияДанных.ИзменениеВидаПараметра(ТекущиеДанные, мТекущийВидПараметра);

КонецПроцедуры // ИзменитьВидПараметра()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	Если ПодтверждениеОчисткиДанных(,"КомандаОбновитьВопросЗавершение") Тогда
         // Безусловное выполнение
		 ОбновитьДанные();
		
	КонецЕсли;	
	
КонецПроцедуры // КомандаОбновить()

// Процедура обработчик оповещения "КомандаОбновитьВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура КомандаОбновитьВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
	     // Выполнение по запросу от пользователя
		 ОбновитьДанные();
	
	КонецЕсли; 
	
КонецПроцедуры	// КомандаОбновитьВопросЗавершение

&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаДанные, "Выполнять", 1);
	
КонецПроцедуры // КомандаУстановитьВсе()

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаДанные, "Выполнять", 0);
	
КонецПроцедуры // КомандаСнятьВсе()

&НаКлиенте
Процедура КомандаИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаДанные, "Выполнять", 2);
	
КонецПроцедуры // КомандаИнвертировать()

&НаКлиенте
Процедура КомандаОбновитьСтруктуру(Команда)
	
	ОбновитьСтруктуруТаблицыДанных();
	
КонецПроцедуры // КомандаОбновитьСтруктуру()

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Объект, "СтандартныйПериод");
	
КонецПроцедуры // КомандаНастроитьПериод()

&НаКлиенте
Процедура КомандаДобавить(Команда)
	
	ОповеститьОВыбореДанных("Добавить");
	
КонецПроцедуры // КомандаДобавить()

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	ОповеститьОВыбореДанных("Заполнить");
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
Процедура СозданныеОбъектыУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.СозданныеОбъекты, "Выполнять", 1);
	
КонецПроцедуры // СозданныеОбъектыУстановитьВсе()

&НаКлиенте
Процедура СозданныеОбъектыСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.СозданныеОбъекты, "Выполнять", 0);
	
КонецПроцедуры // СозданныеОбъектыСнятьВсе()

&НаКлиенте
Процедура СозданныеОбъектыИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.СозданныеОбъекты, "Выполнять", 2);
	
КонецПроцедуры // СозданныеОбъектыИнвертировать()

&НаКлиенте
Процедура СозданныеОбъектыУдалить(Команда)
	
	Если Объект.СозданныеОбъекты.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Удалить объекты без возможности восстановления?'");
	
	ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСозданныеОбъектыУдалить", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	
КонецПроцедуры // СозданныеОбъектыУдалить()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросСозданныеОбъектыУдалить(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		УдалитьСозданныеОбъекты();
		
		// Добавление кода. Начало. 05.06.2012{{
		Попытка
			ЭтаФорма.ВладелецФормы.Элементы.Список.Обновить();
		Исключение 	
		КонецПопытки;   	
		// Добавление кода. Конец. 05.06.2012}}

	КонецЕсли;

КонецПроцедуры // ВопросСозданныеОбъектыУдалить()

&НаКлиенте
Процедура СозданныеОбъектыОчистить(Команда)
	
	Если Объект.СозданныеОбъекты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Список созданных объектов будет очищен. Продолжить?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСозданныеОбъектыОчистить", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
						
	КонецЕсли;
	
КонецПроцедуры // СозданныеОбъектыОчистить()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросСозданныеОбъектыОчистить(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.СозданныеОбъекты.Очистить();
	КонецЕсли;

КонецПроцедуры // ВопросСозданныеОбъектыОчистить()

&НаКлиенте
Процедура КомандаВидимостьНастройки(Команда)
	
	ЭтаФорма.ПанельНастройкиСкрыта = НЕ ЭтаФорма.ПанельНастройкиСкрыта;
	Элементы.ФормаКомандаВидимостьНастройки.Пометка = НЕ ЭтаФорма.ПанельНастройкиСкрыта;
	
	УстановитьВидимость();
	
КонецПроцедуры // КомандаВидимостьНастройки()

&НаКлиенте
Процедура КомандаСоздатьДокументы(Команда)
	
	ТекстСостояние =  НСтр("ru = 'Создание документов'");
	Состояние(ТекстСостояние);
	СоздатьДокументы();
	
	// Добавление кода. Начало. 05.06.2012{{
	Попытка
		ЭтаФорма.ВладелецФормы.Элементы.Список.Обновить();
	Исключение 	
	КонецПопытки;   	
	// Добавление кода. Конец. 05.06.2012}}
	
КонецПроцедуры // КомандаСоздатьДокументы()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает заголовок формы.
// 
&НаКлиенте
Процедура УстановитьЗаголовокФормы()

	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = "Получение данных регистров бухгалтерии ("+ТекущаяНастройка+")";
		
		
	Иначе	
		
		ЭтаФорма.Заголовок = "Получение данных регистров бухгалтерии";
		
		
	КонецЕсли; 

КонецПроцедуры // УстановитьЗаголовокФормы()

// Функция запрашивает у пользователя подтверждение на очистку данных.
// 
// Параметры:
//   вхТекст - Строка
// 
// Возвращаемое значение:
//  флВыполнять - Булево.
// 
&НаКлиенте
Функция ПодтверждениеОчисткиДанных(вхТекст = "", ИмяОповещения)
	
	флВыполнять = Истина;
	
	Если ТаблицаДанные.Количество() > 0  Тогда
		
		флВыполнять = Ложь;
		Если ПустаяСтрока(вхТекст) Тогда
			ТекстВопроса =  НСтр("ru = 'Данные будут очищены. Продолжить?'");
		Иначе	
			ТекстВопроса = вхТекст;
		КонецЕсли; 
		
		Оповещение = Новый ОписаниеОповещения(ИмяОповещения,ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
				
	КонецЕсли; 
	
	Возврат флВыполнять;
	
КонецФункции // ПодтверждениеОчисткиДанных()

// Процедура опововещает форму-владельца о выборе данных.
// 
// Параметры:
//  Режим - Строка.
// 
&НаКлиенте
Процедура ОповеститьОВыбореДанных(Режим)

	// Изменение кода. Начало. 05.06.2012{{
	РезСтруктура = СформироватьСтруктуруРезультата(Режим);
	// Изменение кода. Конец. 05.06.2012}}
    
    Если РезСтруктура.ЕстьДанные Тогда
        ОповеститьОВыборе(РезСтруктура);
    Иначе	
        ТекстСообщения =  НСтр("ru = 'Нет выбранных данных'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);        	
    КонецЕсли;	

КонецПроцедуры // ОповеститьОВыбореДанных()

// Процедура кеширует значения, в дальнейшем используемые на клиенте. 
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	фКэшЗначений.Вставить("ВидОбъектаРБ", Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	
	// Заполним список типов для быстрого выбора составного.
	МассивТипов  = Метаданные.Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.Реквизиты.ИсточникДанных.Тип.Типы();
	СписокВыбора = бит_ОбщегоНазначения.ПодготовитьСписокВыбораТипа(МассивТипов);
	фКэшЗначений.Вставить("СписокТиповИсточникДанных", СписокВыбора);
	фКэшЗначений.Вставить("МассивВидовСравнения"	 , бит_МеханизмПолученияДанных.СформироватьСписокВыбораДляОтборовВОтчете("Массив"));
	
	фКэшЗначений.Вставить("ТекущийПользователь"		 , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	фКэшЗначений.Вставить("НастраиваемыйОбъект"		 , Метаданные.Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.ПолноеИмя());
	фКэшЗначений.Вставить("ТипНастройки"             , Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	КвСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов, , КвСтроки);
	фКэшЗначений.Вставить("ОписаниеТипаСтрока", ОписаниеТипаСтрока);
	фКэшЗначений.Вставить("ОписаниеПроизвольногоТипа", бит_ОбщегоНазначения.ОписаниеПроизвольногоТипа());
	
	
	// Перечисления
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыПараметровЗапроса);
	КэшПеречисления.Вставить("бит_ВидыПараметровЗапроса", ТекПеречисление);
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура обрабатывает изменение объекта системы.
// 
&НаСервере
Процедура ОбъектСистемыИзменение()
	
	ОбновитьСтруктуруТаблицыДанных();
	УстановитьВидимость();
	
КонецПроцедуры // ОбъектСистемыИзменение()

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаНастройки.Видимость = НЕ ПанельНастройкиСкрыта;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура создает реквизиты и элементы управления таблицы данных 
// в зависимости от выбранного регистра. 
// 
// 
&НаСервере
Процедура ОбновитьСтруктуруТаблицыДанных()

	ТаблицаДанные.Очистить();
	
	УдалитьДинамическиеЭлементы();
	
	ИмяРегистра = Объект.ОбъектСистемы.ИмяОбъекта;
	
	МетаРегистр = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	
	МассивБалансовыхИзмерений 	= Новый Массив;
	МассивНеБалансовыхИзмерений = Новый Массив;
	МассивБалансовыхРесурсов 	= Новый Массив;
	МассивНеБалансовыхРесурсов 	= Новый Массив;
	
	ИзмерениеВалюта = Неопределено;
	
	// Измерения
	Для Каждого ТекущееИзмерение Из МетаРегистр.Измерения Цикл
		
		Если ТекущееИзмерение.Балансовый Тогда
			МассивБалансовыхИзмерений.Добавить(ТекущееИзмерение);
		Иначе
			МассивНеБалансовыхИзмерений.Добавить(ТекущееИзмерение);
			
			Если ТекущееИзмерение.Имя = "Валюта" Тогда
				ИзмерениеВалюта = ТекущееИзмерение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Ресурсы
	Для Каждого ТекущийРесурс Из МетаРегистр.Ресурсы Цикл
		
		Если ТекущийРесурс.Балансовый Тогда
			МассивБалансовыхРесурсов.Добавить(ТекущийРесурс);
		Иначе
			МассивНеБалансовыхРесурсов.Добавить(ТекущийРесурс);
		КонецЕсли;
		
	КонецЦикла;
	
	ПоддержкаКорреспонденции = МетаРегистр.Корреспонденция;
	
	ПланСчетовРегистра = МетаРегистр.ПланСчетов;
	ТипСчет = Новый ОписаниеТипов("ПланСчетовСсылка."+ПланСчетовРегистра.Имя);
	ТипСубконто = ПланСчетовРегистра.ВидыСубконто.Тип;
	
	МаксКоличествоСубконто = ПланСчетовРегистра.МаксКоличествоСубконто;
	
	ИмяТаблицы = "ТаблицаДанные";
	
	СтороныПроводки = Новый Массив;
	СтороныПроводки.Добавить("Дт");
	СтороныПроводки.Добавить("Кт");
	
	// Балансовые измерения
	ДобавитьРеквизитыПоКоллекции(МассивБалансовыхИзмерений, ИмяТаблицы, Элементы.ТаблицаДанныеГруппаПериод);
	
	// Счета и небалансовые измерения
	Для каждого ДтКт Из СтороныПроводки Цикл
		
		Коллекция = Новый Массив;
		
		ТекОписание = ОписаниеРеквизита("Счет"+ДтКт, "Счет "+ДтКт, ТипСчет);
		Коллекция.Добавить(ТекОписание);
		
		Для каждого Мета Из МассивНеБалансовыхИзмерений Цикл
			
			Если Мета.Имя = "Валюта" Тогда
				
				Продолжить;
				
			КонецЕсли; 		
			
			ТекОписание = ОписаниеРеквизита(Мета.Имя+ДтКт, Мета.Синоним+" "+ДтКт, Мета.Тип);
			Коллекция.Добавить(ТекОписание);
			
		КонецЦикла; 
		
		Группа = Элементы["ТаблицаДанныеГруппаСчет"+ДтКт];
		ДобавитьРеквизитыПоКоллекции(Коллекция, ИмяТаблицы, Группа);
		
	КонецЦикла; // СтороныПроводки
	
	// Субконто
	Для каждого ДтКт Из СтороныПроводки Цикл
		
		Коллекция = Новый Массив;
		
		Для н = 1 По МаксКоличествоСубконто Цикл
			
			Имя = "Субконто"+ДтКт+н;
			Синоним = "Субконто "+ДтКт+" "+н;
			ТекОписание = ОписаниеРеквизита(Имя, Синоним, ТипСубконто);
			
			Коллекция.Добавить(ТекОписание);
			
		КонецЦикла; 
		
		Группа = Элементы["ТаблицаДанныеГруппаСубконто"+ДтКт];
		ДобавитьРеквизитыПоКоллекции(Коллекция, ИмяТаблицы, Группа);
		
	КонецЦикла; // СтороныПроводки
	
	// Валюта, валютная сумма, количество
	Для каждого ДтКт Из СтороныПроводки Цикл
	
		Коллекция = Новый Массив;
		
		Мета = МетаРегистр.Ресурсы.Найти("Количество");
		ДобавитьНебалансовоеПоле(Коллекция, Мета, ДтКт);
		Мета = МетаРегистр.Измерения.Найти("Валюта");
		ДобавитьНебалансовоеПоле(Коллекция, Мета, ДтКт);
		Мета = МетаРегистр.Ресурсы.Найти("ВалютнаяСумма");
		ДобавитьНебалансовоеПоле(Коллекция, Мета, ДтКт);
		
		Группа = Элементы["ТаблицаДанныеГруппаВалюта"+ДтКт];
		ДобавитьРеквизитыПоКоллекции(Коллекция, ИмяТаблицы, Группа);
		
	КонецЦикла;  // СтороныПроводки
	
	// Балансовые ресурсы
	ДобавитьРеквизитыПоКоллекции(МассивБалансовыхРесурсов, ИмяТаблицы, Элементы.ТаблицаДанныеГруппаРесурсы);	
	
	// Небалансовые ресурсы
	Для каждого ДтКт Из СтороныПроводки Цикл
		
		Коллекция = Новый Массив;
		
		Для каждого Мета Из МассивНеБалансовыхРесурсов Цикл
			
			Если Мета.Имя = "Количество" ИЛИ Мета.Имя = "ВалютнаяСумма" Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			ДобавитьНебалансовоеПоле(Коллекция, Мета, ДтКт);
			
		КонецЦикла; 
		
		Группа = Элементы["ТаблицаДанныеГруппаРесурсы"+ДтКт];
		ДобавитьРеквизитыПоКоллекции(Коллекция, ИмяТаблицы, Группа);
		
	КонецЦикла;  // СтороныПроводки
	
	// Реквизиты
	ДобавитьРеквизитыПоКоллекции(МетаРегистр.Реквизиты, ИмяТаблицы, Элементы.ТаблицаДанныеГруппаРеквизиты);
	
КонецПроцедуры // СоздатьСтруктуруТаблицыДанных()

// Процедура добавляет небалансовые поля в коллекцию реквизитов.
// 
// Параметры:
//  Коллекция - Массив
//  Мета - ОбъектМетаданных
//  ДтКт - Строка
// 
&НаСервере
Процедура ДобавитьНебалансовоеПоле(Коллекция, Мета, ДтКт)
	
	Если НЕ Мета = Неопределено И Мета.Балансовый = Ложь Тогда
		
		ТекОписание = ОписаниеРеквизита(Мета.Имя+ДтКт, Мета.Синоним+" "+ДтКт, Мета.Тип);
		Коллекция.Добавить(ТекОписание);
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьНебалансовоеПоле()

// Конструктор структуры описания реквизита.
// 
// Параметры:
//  Имя - Строка
//  Синоним - Строка
//  Тип - ОписаниеТипов
// 
// Возвращаемое значение:
//  СтрОписание - Структура.
// 
&НаСервере
Функция ОписаниеРеквизита(Имя, Синоним, Тип)

	СтрОписание = Новый Структура;
	СтрОписание.Вставить("Имя", Имя);
	СтрОписание.Вставить("Синоним", Синоним);
	СтрОписание.Вставить("Тип", Тип);

	Возврат СтрОписание;
	
КонецФункции // ОписаниеРеквизита()

// Процедура добавляет реквизиты формы по коллекции регистра.
// 
// Параметры:
//  Коллекция - Массив.
//  ИмяТаблицы - Строка.
//  ЭлементРодитель - ЭлементФормы.
// 
&НаСервере
Процедура ДобавитьРеквизитыПоКоллекции(Коллекция, ИмяТаблицы, ЭлементРодитель)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для каждого МетаРеквизит Из Коллекция Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(МетаРеквизит.Имя, МетаРеквизит.Тип, ИмяТаблицы, МетаРеквизит.Синоним);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла; 
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для каждого МетаРеквизит Из Коллекция Цикл
		
		ИмяЭлемента = ИмяТаблицы+"_"+МетаРеквизит.Имя;
		ПутьКДанным = ИмяТаблицы+"."+МетаРеквизит.Имя;
		ДобавитьПолеФормы(ИмяЭлемента, ПутьКДанным, ЭлементРодитель);
		
	КонецЦикла; 
	
КонецПроцедуры // ДобавитьРеквизитыПоКоллекции()

// Функция добавляет поле формы на форму.
// 
// Параметры:
//  Имя - Строка.
//  ПутьКДанным - Строка.
//  ЭлементКонтейнер     - ЭлементФормы.
// 
// Возвращаемое значение:
//  ЭУ - ПолеФормы.
// 
&НаСервере
Функция ДобавитьПолеФормы(Имя, ПутьКДанным, ЭлементКонтейнер = Неопределено)
	
	ЭУ = Элементы.Добавить(Имя, Тип("ПолеФормы"), ЭлементКонтейнер);
	ЭУ.ПутьКДанным = ПутьКДанным;		
	ЭУ.Вид         = ВидПоляФормы.ПолеВвода;
	
	Возврат ЭУ;
	
КонецФункции // ДобавитьПолеФормы()

// Функция возвращает массив имен реквизитов которые всегда присутствуют в таблице данных.
// 
// Возвращаемое значение:
//  ПостоянныеРеквизиты - Массив.
// 
&НаСервере
Функция ПостоянныеРеквизитыТаблицыДанных()

	ПостоянныеРеквизиты = Новый Массив;
	
	ПостоянныеРеквизиты.Добавить("Выполнять");
	ПостоянныеРеквизиты.Добавить("Период");

	Возврат ПостоянныеРеквизиты;
	
КонецФункции // ПостоянныеРеквизитыТаблицыДанных()

// Процедура удаляет динамически созданные реквизиты и элементы формы.
// 
&НаСервере
Процедура УдалитьДинамическиеЭлементы()
	
	ИмяТаблицы = "ТаблицаДанные";
	ПостояннныеРеквизиты = ПостоянныеРеквизитыТаблицыДанных();
	
	// Удаление "динамически созданных" реквизитов.
	МассивРеквизитов = ПолучитьРеквизиты(ИмяТаблицы);
	
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого РеквФормы Из МассивРеквизитов Цикл
		
		Если ПостояннныеРеквизиты.Найти(РеквФормы.Имя) = Неопределено Тогда
			
			ПутьКДанным = РеквФормы.Путь+"."+РеквФормы.Имя;
			УдаляемыеРеквизиты.Добавить(ПутьКДанным);
			
		КонецЕсли; 
		
	КонецЦикла; // МассивРеквизитов
	
	ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	
	// Удаление "динамически созданных" элементов управления.	
	УдаляемыеЭлементы = Новый Массив;
	Для каждого ЭлФормы Из Элементы Цикл
		
		Если ТипЗнч(ЭлФормы) = Тип("ПолеФормы") Тогда
			
			Если Найти(ЭлФормы.Имя, ИмяТаблицы+"_") > 0  Тогда
				
				УдаляемыеЭлементы.Добавить(ЭлФормы);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; // Элементы
	
	Для каждого ЭлФормы Из УдаляемыеЭлементы Цикл
		
		Элементы.Удалить(ЭлФормы);
		
	КонецЦикла; 
	
КонецПроцедуры // УдалитьДинамическиеЭлементы()

// Процедура обновляет таблицу данных по источникам данных. 
// 
&НаСервере
Процедура ОбновитьДанные()

	флОК = ПроверитьЗаполнение();
	
	Если НЕ флОК Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ТабОтборВОтчете  = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	ТабПараметры     = ДанныеФормыВЗначение(ТаблицаПараметры, Тип("ТаблицаЗначений"));
	
	ТаблицаРезультат = Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.ПолучитьДанные(Объект.ИсточникДанных
	                                                                                     , Объект.СтандартныйПериод
																						 , ТабОтборВОтчете
																						 , ТабПараметры
																						 , Объект.НастройкаПулаПодключений); 
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		
		ТекстСообщения =  НСтр("ru = 'Нет данных, удовлетворяющих отбору'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли; 

	ТаблицаДанные.Очистить();
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
	
		НоваяСтрока = ТаблицаДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	
	КонецЦикла; 
	
КонецПроцедуры // ОбновитьДанные()

// Обрабатывает изменение источника данных. 
// 
&НаСервере
Процедура ИсточникДанныхИзменение()
	
	Если НЕ ИсточникПоВыбранномуРегистру() Тогда
		
		ТекстСообщения =  НСтр("ru = 'Выбранный источник ""%1%"" не извлекает данные из регистра ""%2%""!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Объект.ИсточникДанных, Объект.ОбъектСистемы);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли;
	
	ЗаполнитьТаблицуОтборов();
	ОбновитьТаблицуПараметров();
	
	УстановитьОбязательныеОтборы("Сценарий"   , Объект.Сценарий);
	УстановитьОбязательныеОтборы("Организация", Объект.Организация);
	
КонецПроцедуры // ИсточникДанныхИзменение()

// Функция проверяет используется ли выбранный регистр.
// 
// Возвращаемое значение:
//  флОК - Булево.
// 
&НаСервере
Функция ИсточникПоВыбранномуРегистру()

	флОК = Истина;
	
	Если ТипЗнч(Объект.ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") 
		  И ЗначениеЗаполнено(Объект.ИсточникДанных) Тогда
	
		ТекстЗапроса = Объект.ИсточникДанных.ЗапросБД.ТекстЗапроса;
		
		Если Найти(ТекстЗапроса, Объект.ОбъектСистемы.ИмяОбъекта) = 0 Тогда
		
			флОК = Ложь;
		
		КонецЕсли; 
	
	КонецЕсли; 

	Возврат флОК;
	
КонецФункции // ИсточникПоВыбранномуРегистру()

// Процедура устанавливает значения параметров и значения отборов по определенному имени.
// Используется при открытии из операции для установки отборов по сценарию или организации.
// 
// Параметры:
//  Имя - Строка.
//  ЗначениеОтбора - Произвольный.
// 
&НаСервере
Процедура УстановитьОбязательныеОтборы(Имя, ЗначениеОтбора)
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		СтрОтбор = Новый Структура("ИмяПараметра", Имя);
		
		МассивСтрок = ТаблицаПараметры.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			СтрокаТаблицы.ЗначениеПараметра = ЗначениеОтбора;
			
		КонецЦикла; 
		
		СтрОтбор = Новый Структура("Имя", Имя);
		
		МассивСтрок = ОтборВОтчете.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			СтрокаТаблицы.Значение = ЗначениеОтбора;
			СтрокаТаблицы.Использование = Истина;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьОбязательныеОтборы()

// Процедура устанавливает заголовок формы.
// 
&НаСервере
Процедура УстановитьЗаголовокФормыСервер()

	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
		
		ЭтаФорма.Заголовок = "Получение данных регистров бухгалтерии ("+ТекущаяНастройка+")";
				
	Иначе	
		
		ЭтаФорма.Заголовок = "Получение данных регистров бухгалтерии";
				
	КонецЕсли; 

КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура удаляет загруженные объекты.
// 
&НаСервере
Процедура УдалитьСозданныеОбъекты()
	
	// На только что созданные объекты не может быть ссылок. 
	// При необходимости, если были загружены неверные данные можно их удалить.
	
	КоличествоСтрок = Объект.СозданныеОбъекты.Количество();
	
	Для Ном = 1 По КоличествоСтрок Цикл
		
		ТекНом    = КоличествоСтрок-Ном;
		ТекСтрока = Объект.СозданныеОбъекты[ТекНом];
		
		Если ТекСтрока.Выполнять Тогда
			
			Попытка
				
				// Удаление объекта
				СтрокаДляСообщения = Строка(ТекСтрока.СозданныйОбъект);
				ТекОбъект = ТекСтрока.СозданныйОбъект.ПолучитьОбъект();
				ТекОбъект.Удалить();
				
				// Удаление строки ТабЧасти
				Объект.СозданныеОбъекты.Удалить(ТекСтрока);
				
				Если Объект.РежимСообщений = "Все" Тогда
					
					ТекстСообщения = НСтр("ru = 'Удален объект %1%.'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаДляСообщения);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
					
				КонецЕсли; 
				
			Исключение
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла; // КоличествоСтрок
	
КонецПроцедуры // УдалитьСозданныеОбъекты()

// Процедура выполняет создание операция, по данным полученным по источникам.
// 
&НаСервере
Процедура СоздатьДокументы()

	ТабВрем = ДанныеФормыВЗначение(ТаблицаДанные, Тип("ТаблицаЗначений"));	
	Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.СоздатьДокументы(ТабВрем, Объект.СозданныеОбъекты, Объект.ОбъектСистемы, Объект.РежимСообщений);	

	ТекстСообщения =  НСтр("ru = 'Создание документов завершено.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
  
КонецПроцедуры // СоздатьДокументы()

// Функция формирует структуру результата.
// 
// Параметры:
//   Режим - Строка
//  
// Возвращаемое значение:
//   Струкутура
// 
&НаСервере
Функция СформироватьСтруктуруРезультата(Режим)

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("Режим"	 , Режим);
	РезСтруктура.Вставить("ИмяКласса", "РезультатПолученияДанных");
	
	МассивСтрок = Новый Массив;
	
	НайденныеСтроки = ТаблицаДанные.НайтиСтроки(Новый Структура("Выполнять", Истина));
    Если НайденныеСтроки.Количество() > 0 Тогда
        РезСтруктура.Вставить("ЕстьДанные", Истина);
		ТабЗнДанные = ТаблицаДанные.Выгрузить(НайденныеСтроки);
    Иначе
        РезСтруктура.Вставить("ЕстьДанные", Ложь);
		ТабЗнДанные = Неопределено;
	КонецЕсли;	
	
	ХранилищеДанные = бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабЗнДанные);
	РезСтруктура.Вставить("ХранилищеДанные", ХранилищеДанные);
		              
	Возврат РезСтруктура;
	
КонецФункции // СформироватьСтруктуруРезультата()

#Область РаботаСНастройками



// Процедура - действие команды "КомандаСохранитьНастройки".
// 
&НаКлиенте
Процедура КомандаСохранитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(ТекущаяНастройка) Тогда
	
		ПараметрыФормы.Вставить("СохраненнаяНастройка",ТекущаяНастройка);
	
	КонецЕсли; 
												
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ЗакрытиеФормыСохранения", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения", ПараметрыФормы, ЭтаФорма,,,, ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаСохранитьНастройки()

// Обработка закрытия окна формы. 
// 
// Параметры:
//  СохрНастройка - .
// 
&НаКлиенте
Процедура ЗакрытиеФормыСохранения(СохрНастройка, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СохрНастройка) Тогда
		
		ТекущаяНастройка = СохрНастройка;
		УстановитьЗаголовокФормы();
		
	КонецЕсли;

КонецПроцедуры // ЗакрытиеФормыСохранения()

// Процедура - действие команды "КомандаВосстановитьНастройки".
// 
&НаКлиенте
Процедура КомандаВосстановитьНастройки(Команда)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ЗакрытиеФормаЗагрузки", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма,,,, ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры // КомандаВосстановитьНастройки()

// Обработка оповещения закрытия окна формы. 
// 
// Параметры:
//  ВыбНастройка - .
// 
&НаКлиенте
Процедура ЗакрытиеФормаЗагрузки(ВыбНастройка, ДопПараметры) Экспорт

	Если ЗначениеЗаполнено(ВыбНастройка) Тогда        
		
		ТекущаяНастройка = ВыбНастройка;
		ПрименитьНастройки(ТекущаяНастройка);
		
	КонецЕсли;

КонецПроцедуры // ЗакрытиеФормаЗагрузки()

// Функция готовит стуктуру с настройками для сохранения.
// 
// Возвращаемое значение:
//   СтруктураНастройки   - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастройки = Новый Структура;
	
	СтруктураНастройки.Вставить("ОбъектСистемы"    , Объект.ОбъектСистемы);
	СтруктураНастройки.Вставить("ИсточникДанных"   , Объект.ИсточникДанных);
	СтруктураНастройки.Вставить("СтандартныйПериод", Объект.СтандартныйПериод);
	СтруктураНастройки.Вставить("РежимСообщений"   , Объект.РежимСообщений);
	
	// Изменение кода. Начало. 05.06.2012{{
	ТабОтбор = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	СтруктураНастройки.Вставить("ОтборВОтчете", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабОтбор));
	
	ТабПараметры = ДанныеФормыВЗначение(ТаблицаПараметры, Тип("ТаблицаЗначений"));
	СтруктураНастройки.Вставить("ТаблицаПараметры", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабПараметры));
    // Изменение кода. Конец. 05.06.2012}}
	
	Возврат СтруктураНастройки;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненные настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			Объект.ОбъектСистемы   = СтруктураНастроек.ОбъектСистемы;
			Объект.ИсточникДанных  = СтруктураНастроек.ИсточникДанных;
			Объект.СтандартныйПериод = СтруктураНастроек.СтандартныйПериод;
			Объект.РежимСообщений    = СтруктураНастроек.РежимСообщений;
			
			// Изменение кода. Начало. 05.06.2012{{
			Таблица_ОтборВОтчете = ?(ТипЗнч(СтруктураНастроек.ОтборВОтчете) = Тип("ТаблицаЗначений")
										, СтруктураНастроек.ОтборВОтчете
										, бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ОтборВОтчете));
			Таблица_Параметры    = ?(ТипЗнч(СтруктураНастроек.ТаблицаПараметры) = Тип("ТаблицаЗначений")
										, СтруктураНастроек.ТаблицаПараметры
										, бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ТаблицаПараметры));
			
			ЗначениеВДанныеФормы(Таблица_ОтборВОтчете, ОтборВОтчете);
			ЗначениеВДанныеФормы(Таблица_Параметры   , ТаблицаПараметры);
			// Изменение кода. Конец. 05.06.2012}}
			
			ОбъектСистемыИзменение();
			// ИсточникДанныхИзменение();
			
		КонецЕсли;	 
		
	КонецЕсли; 
	
	 УстановитьЗаголовокФормыСервер();
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура устанавливает настройку либо из последних использованных, либо из настройки по умолчанию.
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	// Получим настройку по - умолчанию и последнюю использованну.
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда		
		ПрименитьНастройки(НастройкаПоУмолчанию);		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.РежимСообщений) Тогда 	
		Объект.РежимСообщений = "Ошибки";	
	КонецЕсли; 
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()



#КонецОбласти

#КонецОбласти

