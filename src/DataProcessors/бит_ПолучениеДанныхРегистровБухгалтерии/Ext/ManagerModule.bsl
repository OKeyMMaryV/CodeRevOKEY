#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс
	
// Процедура заполняет движения операции по данным, полученным из источника.
// 
// Параметры:
//  ХранилищеДанные    - ТаблицаЗначений ИЛИ ХранилищеЗначений.
//  НаборЗаписей 	   - НаборЗаписей.<ИмяРегистраБухгалтерии>.
//  КоличествоСубконто - Число.
//  ИмяРегистра		   - Строка (По умолчанию = Неопределено)
// 						(Необезательный, если ХранилищеДанные типа ТаблицаЗначений 
// 						и НаборЗаписей типа НаборЗаписей.<ИмяРегистраБухгалтерии>).
// 
Процедура ЗаполнитьДвижения(ХранилищеДанные, НаборЗаписей, КоличествоСубконто, ИмяРегистра = Неопределено)  Экспорт
	
	// Данные заполнения - таблица значений  	
	Если ТипЗнч(ХранилищеДанные) = Тип("ТаблицаЗначений") Тогда
		ДанныеЗаполнения = ХранилищеДанные;
	Иначе                                  		
		ДанныеЗаполнения = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ХранилищеДанные);
	КонецЕсли;
	
	// Активность проводок
	Активность = ?(НаборЗаписей.Количество() > 0, НаборЗаписей[0].Активность, Истина);	
	
	Для каждого СтрокаДанные Из ДанныеЗаполнения Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаДанные);
		Запись.Активность = Активность;
						
		// Заполнение субконто
		Для Ном = 1 по КоличествоСубконто Цикл
			
			ЗначениеАналитикиДт = СтрокаДанные["СубконтоДт" + Ном];
			ЗначениеАналитикиКт = СтрокаДанные["СубконтоКт" + Ном];
			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Ном, ЗначениеАналитикиДт);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Ном, ЗначениеАналитикиКт);
			
		КонецЦикла;
		
	КонецЦикла; // ЗначениеВыбора.Данные
	          
КонецПроцедуры // ЗаполнитьДвижения()

// Процедура заполняет движения операции по данным, полученным из источника.
// 
// Параметры:
//  ХранилищеДанные    - ТаблицаЗначений ИЛИ ХранилищеЗначений.
//  НаборЗаписей 	   - ДанныеФормыСтруктураСКоллекцией.
//  КоличествоСубконто - Число.
// 
Процедура ЗаполнитьДвиженияХоз(ХранилищеДанные, НаборЗаписей, КоличествоСубконто)  Экспорт
	
	// Данные заполнения - таблица значений  	
	Если ТипЗнч(ХранилищеДанные) = Тип("ТаблицаЗначений") Тогда
		ДанныеЗаполнения = ХранилищеДанные;
	Иначе                                  		
		ДанныеЗаполнения = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ХранилищеДанные);
    КонецЕсли;
    
    Если ДанныеЗаполнения = Неопределено Тогда
        Возврат;
    КонецЕсли;    
	
	// Активность проводок
	Активность = ?(НаборЗаписей.Количество() > 0, НаборЗаписей[0].Активность, Истина);	
	
	Для каждого СтрокаДанные Из ДанныеЗаполнения Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаДанные);
		Запись.Активность = Активность;
								
	КонецЦикла; // ЗначениеВыбора.Данные
	          
КонецПроцедуры // ЗаполнитьДвиженияХоз()

// Процедура создает операции с данными, 
// 
// Параметры:
//  ТаблицаДанные    - ТаблицаЗначений.
//  СозданныеОбъекты - ТабличнаяЧасть.
//  ОбъектСистемы    - СправочникСсылка.бит_ОбъектыСистемы.
//  РежимСообщений   - Строка.
// 
Процедура СоздатьДокументы(ТаблицаДанные, СозданныеОбъекты, ОбъектСистемы, РежимСообщений="Ошибки")  Экспорт

	КоличествоСубконто = Метаданные.РегистрыБухгалтерии[ОбъектСистемы.ИмяОбъекта].ПланСчетов.МаксКоличествоСубконто;

	флЭтоБюджетирование = ?(ВРег(ОбъектСистемы.ИмяОбъекта) = ВРег("бит_Бюджетирование"), Истина, Ложь);
	флЭтоБУ = ?(ВРег(ОбъектСистемы.ИмяОбъекта) = ВРег("Хозрасчетный"), Истина, Ложь);

	ИмяИзмерения = ?(флЭтоБюджетирование, "Сценарий", "Организация");

	ТаблицаДанныеЗаполнения = ТаблицаДанные.СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТабВрем", ТаблицаДанные);
	Запрос.Текст = "ВЫБРАТЬ *
	               |ПОМЕСТИТЬ ТабВрем
	               |ИЗ
	               |	&ТабВрем КАК ТабВрем
				   |ГДЕ
				   | ТабВрем.Выполнять
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ *
		           |ИЗ
	               |	ТабВрем КАК ТабВрем
	               |ИТОГИ ПО
	               |	%ИмяИзмерения%,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТабВрем";
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИзмерения%", ИмяИзмерения); 			   
				   
	Результат = Запрос.Выполнить();
	
	ВыборкаИзмерение = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИзмерение.Следующий() Цикл
	
		ВыборкаПериод = ВыборкаИзмерение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаПериод.Следующий() Цикл
			 
			 
			Если флЭтоБюджетирование Тогда

				ДокОпер = Документы.бит_ОперацияБюджетирование.СоздатьДокумент();

			ИначеЕсли флЭтоБУ Тогда

				ДокОпер = Документы.ОперацияБух.СоздатьДокумент();
				ДокОпер.СпособЗаполнения = "Вручную";

			Иначе	

				ДокОпер = Документы.бит_ОперацияУправленческий.СоздатьДокумент();
				ДокОпер.РегистрБухгалтерии = ОбъектСистемы;

			КонецЕсли; 
				
			ДокОпер.Дата = ВыборкаПериод.Период;
			ДокОпер.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
			ДокОпер[ИмяИзмерения] = ВыборкаПериод[ИмяИзмерения];
			ДокОпер.УстановитьНовыйНомер();

			НаборЗаписей = ДокОпер.Движения[ОбъектСистемы.ИмяОбъекта];
			НаборЗаписей.Записывать = Истина;

			ТаблицаДанныеЗаполнения.Очистить();
			 
		 	Выборка = ВыборкаПериод.Выбрать();
			 
			Пока Выборка.Следующий() Цикл
			 
				НоваяСтрока = ТаблицаДанныеЗаполнения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
			КонецЦикла; // Выборка
			 
			Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.ЗаполнитьДвижения(ТаблицаДанныеЗаполнения, НаборЗаписей, КоличествоСубконто);
			  
			Если ТипЗнч(ДокОпер) = Тип("ДокументОбъект.ОперацияБух") Тогда
				  
				// В типовом документе операция в модуле объекта нет процедуры, 
				// вычисляющей сумму операции - выполним вычисления здесь.  
				ДокОпер.СуммаОперации = ТаблицаДанныеЗаполнения.Итог("Сумма");

			КонецЕсли; 
			  
			флВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОпер,РежимЗаписиДокумента.Запись,"", РежимСообщений);

			Если флВыполнено Тогда

				СтрОб = СозданныеОбъекты.Добавить();
				СтрОб.СозданныйОбъект = ДокОпер.Ссылка;

			КонецЕсли; 
			  
		 КонецЦикла; // ВыборкаПериод
	
	КонецЦикла; // ВыборкаИзмерение

КонецПроцедуры // СоздатьДокументы()

// Процедура получает данных по источникам данных. 
// 
Функция ПолучитьДанные(ИсточникДанных, СтандартныйПериод, ОтборВОтчете, ТаблицаПараметры, НастройкаПулаПодключений) Экспорт

	ГраницаНач = СтандартныйПериод.ДатаНачала;
	ГраницаКон = Новый Граница(СтандартныйПериод.ДатаОкончания, ВидГраницы.Включая);
	
	ПараметрыЗапроса = бит_МеханизмПолученияДанных.ЗаполнитьСтруктуруПараметровИзТаблицы(ТаблицаПараметры);
	
	
	Если ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
		
		// Получим таблицу с данными по источнику данных.
		СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
		СтрПар.НастройкаПулаПодключений = НастройкаПулаПодключений;
		СтрПар.Параметры                = ПараметрыЗапроса;
		СтрПар.ОтборВОтчете             = ОтборВОтчете;
		
		ТаблицаРезультат = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ИсточникДанных
																				,ГраницаНач
																				,ГраницаКон
																				,СтрПар);
	Иначе
		
		ПоказыватьИндикатор = НЕ бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("НеОтображатьИндикаторКомпоновкиИсточников");
		// Получим таблицу с данными по способу компоновки источников данных.
        СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоСпособуКомпоновки();
		СтрПар.НастройкаПулаПодключений = НастройкаПулаПодключений;
		СтрПар.Параметры                = ПараметрыЗапроса;		
		СтрПар.ОтборВОтчете             = ОтборВОтчете;
		СтрПар.ПоказыватьИндикатор      = ПоказыватьИндикатор;
		
		ТаблицаРезультат = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточникам(ИсточникДанных
																				 ,ГраницаНач
																				 ,ГраницаКон
																				 ,СтрПар);
																			
		бит_МеханизмПолученияДанных.ДополнитьРезультатИВыполнитьРасчет(ИсточникДанных, ТаблицаРезультат);
		
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции // ПолучитьДанные()

#КонецОбласти
 
#КонецЕсли
