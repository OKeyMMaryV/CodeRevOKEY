
&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьНаСервере()
	Если не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Если НачалоДня(Объект.ДатаРасхода) = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя()) Тогда
		Запрос.УстановитьПараметр("ДатаРасхода",   Неопределено);
	Иначе	
		Запрос.УстановитьПараметр("ДатаРасхода", КонецДня(Объект.ДатаРасхода));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("ВидАналитики", Справочники.бит_ВидыСоответствийАналитик.НайтиПоНаименованию("СоответствиеБСч_ПодотчетникаБСч_Организации"));
	Запрос.УстановитьПараметр("УчаствуетВФОрмированииЗнРДС", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ок_УчаствуетВФОрмированииЗнРДС"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ПланируемыйРасходДенежныхСредствОстатки.ДокументПланирования КАК ДокументОснование,
	               |	бит_ПланируемыйРасходДенежныхСредствОстатки.Организация КАК Организация,
	               |	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_5 КАК ПодотчетноеЛицо,
	               |	бит_ПланируемыйРасходДенежныхСредствОстатки.СтатьяОборотов КАК СтатьяОборотов,
	               |	бит_ПланируемыйРасходДенежныхСредствОстатки.СуммаОстаток КАК СуммаОстаток
	               |ПОМЕСТИТЬ ВТ_Остатки
	               |ИЗ
	               |	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Остатки(
	               |			&ДатаРасхода,
	               |			Организация = &Организация
	               |				И Валюта = &Валюта
	               |				И (ВЫРАЗИТЬ(Аналитика_5 КАК Справочник.ФизическиеЛица)) <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |				И ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредствОбщая) КАК бит_ПланируемыйРасходДенежныхСредствОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Остатки.ДокументОснование КАК ДокументОснование,
	               |	ВТ_Остатки.Организация КАК Организация,
	               |	ВТ_Остатки.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	               |	ВТ_Остатки.СтатьяОборотов КАК СтатьяОборотов,
	               |	ВТ_Остатки.СуммаОстаток КАК СуммаОстаток,
	               |	ФизическиеЛица.ОсновнойБанковскийСчет КАК ОсновнойБанковскийСчет,
	               |	МИНИМУМ(БанковскиеСчета.Ссылка) КАК БанковскийСчет
	               |ПОМЕСТИТЬ ВТ_БанковскиеСчетаФизЛицПредв
	               |ИЗ
	               |	ВТ_Остатки КАК ВТ_Остатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ПО ВТ_Остатки.ПодотчетноеЛицо = ФизическиеЛица.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |		ПО ВТ_Остатки.ПодотчетноеЛицо = БанковскиеСчета.Владелец
	               |			И (НЕ БанковскиеСчета.ПометкаУдаления)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Остатки.ДокументОснование,
	               |	ВТ_Остатки.Организация,
	               |	ВТ_Остатки.ПодотчетноеЛицо,
	               |	ВТ_Остатки.СтатьяОборотов,
	               |	ВТ_Остатки.СуммаОстаток,
	               |	ФизическиеЛица.ОсновнойБанковскийСчет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_БанковскиеСчетаФизЛицПредв.ДокументОснование КАК ДокументОснование,
	               |	ВТ_БанковскиеСчетаФизЛицПредв.Организация КАК Организация,
	               |	ВТ_БанковскиеСчетаФизЛицПредв.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	               |	ВТ_БанковскиеСчетаФизЛицПредв.СтатьяОборотов КАК СтатьяОборотов,
	               |	ВТ_БанковскиеСчетаФизЛицПредв.СуммаОстаток КАК СуммаОстаток,
	               |	ВЫБОР
	               |		КОГДА ВТ_БанковскиеСчетаФизЛицПредв.ОсновнойБанковскийСчет <> ЗНАЧЕНИЕ(справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_БанковскиеСчетаФизЛицПредв.ОсновнойБанковскийСчет
	               |		ИНАЧЕ ВТ_БанковскиеСчетаФизЛицПредв.БанковскийСчет
	               |	КОНЕЦ КАК БанковскийСчетПодотчетногоЛица,
	               |	ВЫБОР
	               |		КОГДА ВТ_БанковскиеСчетаФизЛицПредв.ОсновнойБанковскийСчет <> ЗНАЧЕНИЕ(справочник.БанковскиеСчета.ПустаяСсылка)
	               |			ТОГДА ВТ_БанковскиеСчетаФизЛицПредв.ОсновнойБанковскийСчет.Банк
	               |		ИНАЧЕ ВТ_БанковскиеСчетаФизЛицПредв.БанковскийСчет.Банк
	               |	КОНЕЦ КАК БанкПодотчетногоЛица
	               |ПОМЕСТИТЬ ВТ_БанковскиеСчетаФизЛиц
	               |ИЗ
	               |	ВТ_БанковскиеСчетаФизЛицПредв КАК ВТ_БанковскиеСчетаФизЛицПредв
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_БанковскиеСчетаФизЛиц.ДокументОснование КАК ДокументОснование,
	               |	ВТ_БанковскиеСчетаФизЛиц.Организация КАК Организация,
	               |	ВТ_БанковскиеСчетаФизЛиц.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	               |	ВТ_БанковскиеСчетаФизЛиц.СтатьяОборотов КАК СтатьяОборотов,
	               |	ВТ_БанковскиеСчетаФизЛиц.СуммаОстаток КАК СуммаОстаток,
	               |	ВТ_БанковскиеСчетаФизЛиц.БанковскийСчетПодотчетногоЛица КАК БанковскийСчетПодотчетногоЛица,
	               |	ВТ_БанковскиеСчетаФизЛиц.БанкПодотчетногоЛица КАК БанкПодотчетногоЛица,
	               |	МИНИМУМ(ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_2 КАК Справочник.БанковскиеСчета)) КАК БанковскийСчетПолучатель,
	               |	ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.Контрагенты) КАК БанкПолучатель
	               |ПОМЕСТИТЬ ВТ_ДобавленБанковскийСчетПолучатель
	               |ИЗ
	               |	ВТ_БанковскиеСчетаФизЛиц КАК ВТ_БанковскиеСчетаФизЛиц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	               |		ПО (бит_СоответствияАналитик.ВидСоответствия = &ВидАналитики)
	               |			И ВТ_БанковскиеСчетаФизЛиц.БанкПодотчетногоЛица = бит_СоответствияАналитик.ЛеваяАналитика_2
	               |			И ВТ_БанковскиеСчетаФизЛиц.Организация = бит_СоответствияАналитик.ЛеваяАналитика_1
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_БанковскиеСчетаФизЛиц.ДокументОснование,
	               |	ВТ_БанковскиеСчетаФизЛиц.Организация,
	               |	ВТ_БанковскиеСчетаФизЛиц.ПодотчетноеЛицо,
	               |	ВТ_БанковскиеСчетаФизЛиц.СтатьяОборотов,
	               |	ВТ_БанковскиеСчетаФизЛиц.СуммаОстаток,
	               |	ВТ_БанковскиеСчетаФизЛиц.БанковскийСчетПодотчетногоЛица,
	               |	ВТ_БанковскиеСчетаФизЛиц.БанкПодотчетногоЛица,
	               |	ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.Контрагенты)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДобавленБанковскийСчетПолучатель.ДокументОснование КАК ПрогнозПлатежа,
	               |	ВТ_ДобавленБанковскийСчетПолучатель.Организация КАК Организация,
	               |	ВТ_ДобавленБанковскийСчетПолучатель.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	               |	ВТ_ДобавленБанковскийСчетПолучатель.СтатьяОборотов КАК СтатьяБДДС,
	               |	ВТ_ДобавленБанковскийСчетПолучатель.СуммаОстаток КАК СуммаКВыплате,
	               |	ВТ_ДобавленБанковскийСчетПолучатель.БанковскийСчетПодотчетногоЛица КАК БанковскийСчетПодотчетногоЛица,
	               |	ВТ_ДобавленБанковскийСчетПолучатель.БанкПодотчетногоЛица КАК БанкПодотчетногоЛица,
	               |	ВТ_ДобавленБанковскийСчетПолучатель.БанковскийСчетПолучатель КАК БанковскийСчетПолучатель,
	               |	ДополнительныеСведения.Значение КАК УчаствуетВФормированииЗнРДС,
	               |	ВТ_ДобавленБанковскийСчетПолучатель.БанкПолучатель КАК БанкПолучатель,
	               |	ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_3 КАК Справочник.БанковскиеСчета) КАК БанковскийСчетАналитика3
	               |ИЗ
	               |	ВТ_ДобавленБанковскийСчетПолучатель КАК ВТ_ДобавленБанковскийСчетПолучатель
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ВТ_ДобавленБанковскийСчетПолучатель.БанковскийСчетПолучатель = ДополнительныеСведения.Объект
	               |			И (ДополнительныеСведения.Свойство = &УчаствуетВФОрмированииЗнРДС)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	               |		ПО (ВТ_ДобавленБанковскийСчетПолучатель.БанкПодотчетногоЛица = бит_СоответствияАналитик.ЛеваяАналитика_2)
	               |			И (ВТ_ДобавленБанковскийСчетПолучатель.Организация = бит_СоответствияАналитик.ЛеваяАналитика_1)
	               |			И (бит_СоответствияАналитик.ВидСоответствия = &ВидАналитики)
	               |			И (ВТ_ДобавленБанковскийСчетПолучатель.БанковскийСчетПолучатель = бит_СоответствияАналитик.ПраваяАналитика_2)";
	Объект.ДанныеДляЗаполненияЗаявок.Загрузить(Запрос.Выполнить().Выгрузить());
	
конецпроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
КонецПроцедуры


&НаКлиенте
Процедура СоздатьЗнРДС(Команда)
	ЕстьОшибки = Ложь;
	МассивСообщений = Новый Массив;
	ПроверитьДанныеДляСозданияЗаявок(ЕстьОшибки,МассивСообщений);
	ПроверитьПраваНаПечать(ЕстьОшибки,МассивСообщений);
	Если ЕстьОшибки Тогда
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = "";        
		Для Каждого СообщениеОбОшибке из МассивСообщений Цикл
		ТекстСообщения = ТекстСообщения+СообщениеОбОшибке+символы.ПС;	
		КонецЦикла; 
		Сообщение.Текст  =ТекстСообщения;        
		Сообщение.Сообщить();
		возврат;
	КонецЕсли;
	РезультатСозданияЗаявок = СоздатьЗаявкиНаСервере(МассивСообщений);
	МассивФайловВедомостей = ОбработатьФайлыВедомостей(РезультатСозданияЗаявок.МассивТабДок);
	ПараметрыПисьма = Новый Структура;
	РезультатСозданияЗаявок.Вставить("Вложения",МассивФайловВедомостей);
	РезультатСозданияЗаявок.Вставить("Тема", "Выплата подотчетным лицам через банк");
	РезультатСозданияЗаявок.Вставить("Текст", РезультатСозданияЗаявок.ТекстПисьма);
	
	МассивСообщений.Добавить("Формирование документов завершено");
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = "";        
		Для Каждого СообщениеОбОшибке из МассивСообщений Цикл
		ТекстСообщения = ТекстСообщения+СообщениеОбОшибке+символы.ПС;	
		КонецЦикла; 
		Сообщение.Текст  =ТекстСообщения;        
		Сообщение.Сообщить();
	

	ОткрытьФорму("ОбщаяФорма.ОтправкаСообщения",РезультатСозданияЗаявок);
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаявкиНаСервере(МассивСообщений)
	ВыбранныеСтроки = Объект.ДанныеДляЗаполненияЗаявок.НайтиСтроки(Новый Структура("Выбран", Истина));
	ТабДанныеДляСозданияЗаявок = Объект.ДанныеДляЗаполненияЗаявок.Выгрузить(ВыбранныеСтроки);
	ДанныеПоЗаявке = ТабДанныеДляСозданияЗаявок.Скопировать();
	//ДанныеПоЗаявке.Свернуть("Организация,БанкПолучатель,БанковскийСчетПолучатель,СтатьяБДДС");
	ДанныеПоЗаявке.Свернуть("Организация,БанкПолучатель,БанковскийСчетПолучатель,БанковскийСчетАналитика3,СтатьяБДДС");
	МассивТабДок = Новый Массив;
	ТекстПисьма = "";
	Для каждого СтрокаЗаявки из ДанныеПоЗаявке цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Организация", СтрокаЗаявки.Организация);
		ПараметрыОтбора.Вставить("БанковскийСчетПолучатель", СтрокаЗаявки.БанковскийСчетПолучатель);
		ПараметрыОтбора.Вставить("БанкПолучатель", СтрокаЗаявки.БанкПолучатель);
		ПараметрыОтбора.Вставить("СтатьяБДДС", СтрокаЗаявки.СтатьяБДДС);
		ПараметрыОтбора.Вставить("Выбран", Истина);
		ДанныеТабличнойЧастиЗаявки = Объект.ДанныеДляЗаполненияЗаявок.НайтиСтроки(ПараметрыОтбора);
		
		//НомерВедомости = ПолучитьДопСведение(СтрокаЗаявки.БанковскийСчетПолучатель, "ок_НомерВедомости");
		НомерВедомости = ПолучитьДопСведение(СтрокаЗаявки.БанковскийСчетАналитика3, "ок_НомерВедомости");
		НомерВедомости = ?(ЗначениеЗаполнено(НомерВедомости),НомерВедомости,0)+1;
		ИмяПечатнойФормы = ПолучитьДопСведение(СтрокаЗаявки.БанковскийСчетПолучатель, "ок_ИмяПечатнойФормы");
		ЗаявкаСсылка = СоздатьИЗаполнитьЗаявку(СтрокаЗаявки, ДанныеТабличнойЧастиЗаявки, НомерВедомости, МассивСообщений);
		
		//ЗаписатьДопСведение(Новый Структура("ИмяРегистра,Объект,Свойство,Значение", "ДополнительныеСведения",СтрокаЗаявки.БанковскийСчетПолучатель,
		//					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ок_НомерВедомости"), НомерВедомости));
		ЗаписатьДопСведение(Новый Структура("ИмяРегистра,Объект,Свойство,Значение", "ДополнительныеСведения",СтрокаЗаявки.БанковскийСчетАналитика3,
						ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ок_НомерВедомости"), НомерВедомости));
		ЗаписатьДопСведение(Новый Структура("ИмяРегистра,Объект,Аналитика,ЗначениеАналитики", "бит_ДополнительныеАналитики",ЗаявкаСсылка,
							ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("Номер_Ведомости"), НомерВедомости));

		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ЗаявкаСсылка);
		ТабДокПечатнойФормы = Неопределено;
		Если ВРег(ИмяПечатнойФормы) = "ВЕДОМОСТЬ_СБЕРБАНК" Тогда
		ТабДокПечатнойФормы = Обработки.ок_ПечатьВедомостиДляЗнРДСПоФормеБанка.ПечатьВедомостьСбербанк(МассивОбъектов, Новый СписокЗначений);
		ИначеЕсли ВРег(ИмяПечатнойФормы) = "ВЕДОМОСТЬ_РОСБАНК" Тогда
		ТабДокПечатнойФормы = Обработки.ок_ПечатьВедомостиДляЗнРДСПоФормеБанка.ПечатьВедомостьРосбанк(МассивОбъектов, Новый СписокЗначений);
		ИначеЕсли ВРег(ИмяПечатнойФормы) = "ВЕДОМОСТЬ_РАЙФФАЙЗЕНБАНК" Тогда
		ТабДокПечатнойФормы = Обработки.ок_ПечатьВедомостиДляЗнРДСПоФормеБанка.ПечатьВедомостьРайффайзенБанк(МассивОбъектов, Новый СписокЗначений);
		КонецЕсли;
		Если ТабДокПечатнойФормы<>Неопределено Тогда
			НазваниеФайла = ""+ЗаявкаСсылка.Получатель + " "+ НомерВедомости+ " выплата под отчет";
			НазваниеФайла = СтрЗаменить(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НазваниеФайла), ".", "_");
			АдресВХранилище = ПоместитьФайлВХранилище(ТабДокПечатнойФормы,ЗаявкаСсылка, НазваниеФайла);
			МассивТабДок.Добавить(новый структура("ДокументСсылка, ИмяФайла, АдресВХранилище",	ЗаявкаСсылка, НазваниеФайла, АдресВХранилище));
			ТекстПисьма = ТекстПисьма+ЗаявкаСсылка.Получатель+ " "+НомерВедомости+ " "+ЗаявкаСсылка.Сумма+символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	ТекстПисьма = Лев(ТекстПисьма, СтрДлина(ТекстПисьма)-1);
	РезультатСозданияЗаявок = Новый Структура;
	РезультатСозданияЗаявок.Вставить("МассивТабДок", МассивТабДок);
	РезультатСозданияЗаявок.Вставить("ТекстПисьма", ТекстПисьма);

	Возврат РезультатСозданияЗаявок; 
	
КонецФункции
&НаСервере
Процедура ПроверитьДанныеДляСозданияЗаявок(ЕстьОшибки,МассивСообщенийОбОшибках)
	ВыбранныеСтроки = Объект.ДанныеДляЗаполненияЗаявок.НайтиСтроки(Новый Структура("Выбран", Истина));
	МассивКолонокДляЗаполнения = Новый Массив;
	МассивКолонокДляЗаполнения.Добавить("Организация");
	МассивКолонокДляЗаполнения.Добавить("ПодотчетноеЛицо");
	МассивКолонокДляЗаполнения.Добавить("БанкПодотчетногоЛица");
	МассивКолонокДляЗаполнения.Добавить("БанкПолучатель");
	МассивКолонокДляЗаполнения.Добавить("СтатьяБДДС");
	МассивКолонокДляЗаполнения.Добавить("СуммаКВыплате");
	МассивКолонокДляЗаполнения.Добавить("ПрогнозПлатежа");
	МассивКолонокДляЗаполнения.Добавить("БанковскийСчетПолучатель");

	Для каждого строка из ВыбранныеСтроки цикл
		Для каждого ИмяКолонки из МассивКолонокДляЗаполнения цикл
			Если не ЗначениеЗаполнено(строка[ИмяКолонки]) Тогда
				ЕстьОшибки = Истина;
				МассивСообщенийОбОшибках.Добавить("В строке номер "+строка.НомерСтроки+" не заполнено значение "+ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		Если не строка.УчаствуетВФормированииЗнРДС Тогда
			ЕстьОшибки = Истина;
			МассивСообщенийОбОшибках.Добавить("В строке номер "+строка.НомерСтроки+" банковский счет не участвует в создании ЗнРДС");
		КонецЕсли;
		Если ЗначениеЗаполнено(строка.ЗаявкаНаРасходованиеДС) Тогда
			ЕстьОшибки = Истина;
			МассивСообщенийОбОшибках.Добавить("В строке номер "+строка.НомерСтроки+" уже создана ЗнРДС "+строка.ЗаявкаНаРасходованиеДС); 
		КонецЕсли;

	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПраваНаПечать(ЕстьОшибки,МассивСообщенийОбОшибках)
	ЕстьПраво = ПравоДоступа("Использование", Метаданные.Обработки.ок_ПечатьВедомостиДляЗнРДСПоФормеБанка);
	Если не ЕстьПраво Тогда
		ЕстьОшибки = Истина;
		МассивСообщенийОбОшибках.добавить("Нет прав на печать ведомостей по формам банков. Формирование ЗнРДС невозможно!");
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция СоздатьИЗаполнитьЗаявку(СтрокаЗаявки, ДанныеТабличнойЧастиЗаявки, НомерВедомости, МассивСообщений)
		СБ_ПрофильРазноски = ПолучитьПрофильРазноски();
		
		ок_НеСоздаватьПлатежноеПоручение = ПолучитьДопСведение(СтрокаЗаявки.БанковскийСчетПолучатель, "ок_ИсключитьФормированиеПП");
		
		ДокЗаявка  = Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
		ДокЗаявка.Дата = ТекущаяДата();
		ДокЗаявка.УстановитьНовыйНомер();
		ДокЗаявка.Организация = СтрокаЗаявки.Организация;
		ДокЗаявка.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		ДокЗаявка.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику;
		ДокЗаявка.ок_СпособСоздания = 11;
		ДокЗаявка.Важность = Перечисления.бит_Важность.Средняя;
		ДокЗаявка.ВалютаДокумента = Объект.Валюта;
		ДокЗаявка.КурсДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Объект.ДатаРасхода).Курс;
		ДокЗаявка.КратностьДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Объект.ДатаРасхода).Кратность;
		ДокЗаявка.ДатаРасхода = Объект.ДатаРасхода;
		ДокЗаявка.Получатель = СтрокаЗаявки.БанкПолучатель;
		ДокЗаявка.СБ_БанковскийСчетКонтрагента = СтрокаЗаявки.БанковскийСчетПолучатель;
		ДокЗаявка.ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
		ДокЗаявка.ТипПлатежа = Справочники.бит_ТипыПлатежей.НайтиПоНаименованию("Оплата");
		ДокЗаявка.Сценарий = Справочники.СценарииПланирования.НайтиПоНаименованию("Оперативное планирование денежных средств");
		ДокЗаявка.СБ_ПрофильРазноски = СБ_ПрофильРазноски;
		ДокЗаявка.ОК_НеФормироватьПлатежноеПоручение =  ок_НеСоздаватьПлатежноеПоручение;
		ДокЗаявка.УдалитьНазначениеПлатежаУпр = "Выплата подотчет согласно ведомости № "+НомерВедомости+" от "+ДокЗаявка.Дата+", НДС не облагается";
		ДокЗаявка.Комментарий = "Создано автоматически с помощью обработки";
		ДокЗаявка.НазначениеПлатежа = "Выплата подотчет согласно ведомости № "+НомерВедомости+" от "+ДокЗаявка.Дата+", НДС не облагается";
		ДокЗаявка.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		ДокЗаявка.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Если ДанныеТабличнойЧастиЗаявки.количество() = 1 Тогда
			ДокЗаявка.СтатьяОборотов =  ДанныеТабличнойЧастиЗаявки[0].СтатьяБДДС;
			ДокЗаявка.Аналитика_5 =  ДанныеТабличнойЧастиЗаявки[0].ПодотчетноеЛицо;
		КонецЕсли;
		
		Для каждого СтрокаТЧ из ДанныеТабличнойЧастиЗаявки цикл
			НоваяСтрока = ДокЗаявка.Распределение.Добавить();
			НоваяСтрока.СтатьяОборотов = СтрокаТЧ.СтатьяБДДС;
			НоваяСтрока.Аналитика_5 = СтрокаТЧ.ПодотчетноеЛицо;
			НоваяСтрока.Сумма = СтрокаТЧ.СуммаКВыплате;
			НоваяСтрока.ок_ПрогнозПлатежа = СтрокаТЧ.ПрогнозПлатежа;
		КонецЦикла;
		ДокЗаявка.Сумма = ДокЗаявка.Распределение.Итог("Сумма");
		
		Попытка
			ДокЗаявка.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ДокЗаявка.Записать(РежимЗаписиДокумента.Запись);
			МассивСообщений.добавить(ОписаниеОшибки());
		КонецПопытки;
		Для каждого СтрокаИсходныхДанных из ДанныеТабличнойЧастиЗаявки цикл
			СтрокаИсходныхДанных.ЗаявкаНаРасходованиеДС = ДокЗаявка.Ссылка;
		КонецЦикла;
		Возврат ДокЗаявка.Ссылка;	
КонецФункции

&НаСервере
Процедура ПолучитьПарольДляВедомости(Password)
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	СБ_НастройкиКазначейства.Значение КАК Значение
	                |ИЗ
	                |	РегистрСведений.СБ_НастройкиКазначейства КАК СБ_НастройкиКазначейства
	                |ГДЕ
	                |	СБ_НастройкиКазначейства.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор","ПарольВедомостей");
	Выборка = Запрос.Выполнить().Выбрать();
	Если выборка.Количество() Тогда
		Выборка.Следующий();
		Password = Выборка.Значение;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДопСведение(ОбъектСсылка, Имя)
	ДопСведение = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект = &Объект
	               |	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",Имя));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() Тогда
		Выборка.Следующий();
		ДопСведение = Выборка.Значение;
	КонецЕсли;
	Возврат ДопСведение;
КонецФункции

Процедура ЗаписатьДопСведение(ПараметрыЗаписи)  // Объект,Свойство,Значение
	ЗаписьРегистра = РегистрыСведений[ПараметрыЗаписи.ИмяРегистра].СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ПараметрыЗаписи);
	ЗаписьРегистра.Прочитать();
	ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ПараметрыЗаписи);
	ЗаписьРегистра.Записать();
КонецПроцедуры

Функция ПолучитьПрофильРазноски()
	ПрофильРазноски = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.Аналитика КАК Аналитика
	               |ИЗ
	               |	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA
	               |ГДЕ
	               |	СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход)
	               |	И СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA.ЗначениеАналитики = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		выборка.Следующий();
		ПрофильРазноски = Выборка.аналитика;
	КонецЕсли;
	Возврат ПрофильРазноски;
КонецФункции

&НаКлиенте
Функция ОбработатьФайлыВедомостей(МассивТабДок)
	МассивФайловВедомостей = Новый Массив;
	Password = "";
	ПолучитьПарольДляВедомости(Password);
	Для каждого строка из МассивТабДок цикл
		СохраненныйФайл = ПолучитьИзВременногоХранилища(строка.АдресВХранилище);
		
		Если СохраненныйФайл <> Неопределено Тогда 
		
		//ИмяФайла = ПолучитьИмяВременногоФайла(".xlsx");
		//СохраненныйФайл.Записать(ИмяФайла);
		//
		//ОбъектЭксел = Новый COMОбъект("Excel.Application");
		//ФайлЧтение = ОбъектЭксел.WorkBooks.Open(ИмяФайла);
		//ЛистЧтения = ФайлЧтение.Sheets(1);
		//ЛистЧтения.Protect();    
		//FullName = ОбъектЭксел.ActiveWorkbook.FullName;            
		//ОбъектЭксел.DisplayAlerts = false;
		//
		//ОбъектЭксел.ActiveWorkbook.SaveAs(FullName, 51, Password); // 18 - xls 97-2003; 51 - xlsx 2007-2013    
		//ОбъектЭксел.Workbooks.Close();
		//ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		//АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, новый УникальныйИдентификатор);
		Вложение = Новый Структура;
		Вложение.Вставить("Представление", строка.ИмяФайла+".xlsx");
		//Вложение.Вставить("АдресВоВременномХранилище", АдресФайла);
		Вложение.Вставить("АдресВоВременномХранилище", строка.АдресВХранилище);
		МассивФайловВедомостей.Добавить(Вложение);
		
		ИмяФайла = ПолучитьИмяВременногоФайла(".xlsx");
		СохраненныйФайл.Записать(ИмяФайла);
		
		ОбъектЭксел = Новый COMОбъект("Excel.Application");
		ФайлЧтение = ОбъектЭксел.WorkBooks.Open(ИмяФайла);
		ЛистЧтения = ФайлЧтение.Sheets(1);
		ЛистЧтения.Protect(Password);
		FullName = ОбъектЭксел.ActiveWorkbook.FullName;            
		ОбъектЭксел.DisplayAlerts = false;
		ОбъектЭксел.ActiveWindow.DisplayWorkbookTabs = 1; 
		ОбъектЭксел.ActiveWindow.TabRatio = 0.6;
		ОбъектЭксел.ActiveWorkbook.SaveAs(FullName, 51); // 18 - xls 97-2003; 51 - xlsx 2007-2013    
		ОбъектЭксел.Workbooks.Close();
		ОбъектЭксел.Application.Quit();
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, новый УникальныйИдентификатор);
		ПрикрепитьФайл(строка.ДокументСсылка, строка.ИмяФайла+".xlsx", АдресФайла);
		УдалитьФайлы( ИмяФайла);

		КонецЕсли;
	КонецЦикла;
	Возврат МассивФайловВедомостей;		
КонецФункции
&НаСервере
Функция ПоместитьФайлВХранилище(ТабДок,ДокументСсылка, НазваниеФайла)
	ВременныйФайл = ПолучитьИмяВременногоФайла(".xlsx");
	ТабДок.Записать(ВременныйФайл, ТипФайлаТабличногоДокумента.xlsx);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВременныйФайл);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, новый УникальныйИдентификатор);
	//ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	//ПараметрыФайла.Автор = ПараметрыСеанса.ТекущийПользователь.Наименование;
	//ПараметрыФайла.ВладелецФайлов = ДокументСсылка;
	//ПараметрыФайла.ИмяБезРасширения = НазваниеФайла;
	//ПараметрыФайла.РасширениеБезТочки = "xlsx";
	//РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище);
	УдалитьФайлы(ВременныйФайл);

Возврат АдресВХранилище;
КонецФункции

&НаСервере
Процедура ПрикрепитьФайл(ДокументСсылка, НазваниеФайла, АдресВХранилище)
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.Автор = ПараметрыСеанса.ТекущийПользователь.Наименование;
	ПараметрыФайла.ВладелецФайлов = ДокументСсылка;
	ПараметрыФайла.ИмяБезРасширения = НазваниеФайла;
	ПараметрыФайла.РасширениеБезТочки = "xlsx";
	РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище);

КонецПроцедуры
