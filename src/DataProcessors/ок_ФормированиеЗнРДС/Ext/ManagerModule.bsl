
Процедура ФормированиеЗнРДС_ОбработатьДанныеДляЗаполненияЗаявок(ДанныеДляЗаполненияЗаявок, РеестрОшибок, СтруктураПараметровЗаполнения, пОшибки, КоличествоДокументовВТранзакции = 1) Экспорт
	
	СписокСценариев = Новый Массив();
	СписокСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У"));
	СписокСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест"));
	
	СписокСценариевКонтролируемых = Новый Массив();
	СписокСценариевКонтролируемых.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_У"));
	СписокСценариевКонтролируемых.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_И"));
	
	СтруктураПараметров_ДанныеКЗБ = Новый Структура();
	СтруктураПараметров_ДанныеКЗБ.Вставить("ДокументРасчетов");
	СтруктураПараметров_ДанныеКЗБ.Вставить("Контрагент");
	СтруктураПараметров_ДанныеКЗБ.Вставить("ДоговорКонтрагента");
	СтруктураПараметров_ДанныеКЗБ.Вставить("Аналитика_1");
	СтруктураПараметров_ДанныеКЗБ.Вставить("Сценарий_У", ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У"));
	СтруктураПараметров_ДанныеКЗБ.Вставить("Сценарий_И", ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест"));
	СтруктураПараметров_ДанныеКЗБ.Вставить("СценарийКонтролируемый_У", ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_У"));
	СтруктураПараметров_ДанныеКЗБ.Вставить("СценарийКонтролируемый_И", ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_И"));
	
	МассивСозданныхДокументов 		= Новый Массив;
	СозданоДокументовВТранзакции 	= 0;
	
	Копия_ДанныеДляЗаполненияЗаявок = СкопироватьДанные(ДанныеДляЗаполненияЗаявок, Истина);
	Копия_РеестрОшибок				= СкопироватьДанные(РеестрОшибок, Ложь);
	
	ТекущиеДанныеДляЗаполненияЗаявок = Неопределено;
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-05 (#НТП_БП12_ФР04)
	ВалютаРегУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();				
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-05 (#НТП_БП12_ФР04)
	
	Для каждого ТекущиеДанныеДляЗаполненияЗаявок Из ДанныеДляЗаполненияЗаявок Цикл
	
		Если НЕ ТекущиеДанныеДляЗаполненияЗаявок.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров_ДанныеКЗБ, ТекущиеДанныеДляЗаполненияЗаявок);
		СтруктураПараметров_ДанныеКЗБ.Аналитика_1 = ТекущиеДанныеДляЗаполненияЗаявок.ФВБ;
		
		ДанныеКЗБ = ФормированиеЗнРДС_ПолучитьДанныеКЗБ(СтруктураПараметров_ДанныеКЗБ);
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-15 (#3758)
		//СуммаОстаток = ТекущиеДанныеДляЗаполненияЗаявок.СуммаКт;
		Если СтруктураПараметровЗаполнения.Свойство("ЭтоНеБК")
			И СтруктураПараметровЗаполнения.ЭтоНеБК Тогда
			СуммаОстаток = ТекущиеДанныеДляЗаполненияЗаявок.СуммаКОплате;
		Иначе
			СуммаОстаток = ТекущиеДанныеДляЗаполненияЗаявок.СуммаКт;
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-15 (#3758)
		
		СтруктураПоследнейЗаписи = Новый Структура();
		СтруктураПоследнейЗаписи.Вставить("КоличествоФВБ", 					0);
		СтруктураПоследнейЗаписи.Вставить("КоличествоСтатейОборотовБДДС", 	0);
		СтруктураПоследнейЗаписи.Вставить("ИндФВБ", 						0);
		СтруктураПоследнейЗаписи.Вставить("ИндСтатейОборотовБДДС", 			0);
		СтруктураПоследнейЗаписи.Вставить("Сумма", 							0);
		
		СтруктураОтбора_РеестрОшибок = Новый Структура();
		СтруктураОтбора_РеестрОшибок.Вставить("Контрагент");
		СтруктураОтбора_РеестрОшибок.Вставить("СчетБУ");
		СтруктураОтбора_РеестрОшибок.Вставить("ДоговорКонтрагента");
		СтруктураОтбора_РеестрОшибок.Вставить("ДокументРасчетов");
		СтруктураОтбора_РеестрОшибок.Вставить("Ответственный");
		СтруктураОтбора_РеестрОшибок.Вставить("Причина");
		
		Если ДанныеКЗБ.Пустой() Тогда
		
			пТекстОшибки = НСтр("ru = 'Строка(%2): Не удалось создать документ по причине: %1'");
			пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, "Отсутствуют данные в РН ""Контрольные значения бюджетов (БИТ)""",
																								 ТекущиеДанныеДляЗаполненияЗаявок.НомерСтроки);
			пОшибки = пОшибки + ?(ПустаяСтрока(пОшибки), "", Символы.ПС) + пТекстОшибки;
			ТекущиеДанныеДляЗаполненияЗаявок.КодОшибки = 1;
			
		КонецЕсли; 
		
		ВыборкаФВБ = ДанныеКЗБ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СтруктураПоследнейЗаписи.КоличествоФВБ = ВыборкаФВБ.Количество();
		Пока ВыборкаФВБ.Следующий() Цикл
			
			СтруктураПоследнейЗаписи.ИндФВБ = СтруктураПоследнейЗаписи.ИндФВБ + 1;
			
			Если НЕ ТранзакцияАктивна() Тогда
			
				Копия_ДанныеДляЗаполненияЗаявок = СкопироватьДанные(ДанныеДляЗаполненияЗаявок, Истина);
				Копия_РеестрОшибок				= СкопироватьДанные(РеестрОшибок, Ложь);
			
				НачатьТранзакцию();
				
				СозданоДокументовВТранзакции = 0;
				МассивСозданныхДокументов.Очистить();
							
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора_РеестрОшибок, ТекущиеДанныеДляЗаполненияЗаявок);
			СтруктураОтбора_РеестрОшибок.Причина = Перечисления.ок_ПричиныОтказаСозданияЗнРДС.ВыявленыРасхожденияПоАналитикамБК;
			СтруктураОтбора_РеестрОшибок.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			
			НайденныеСтроки = РеестрОшибок.НайтиСтроки(СтруктураОтбора_РеестрОшибок);
			
			Если ВыборкаФВБ.РазницаБезНДС < 0 Тогда
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрокаОшибок = РеестрОшибок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОшибок, ТекущиеДанныеДляЗаполненияЗаявок);
					НоваяСтрокаОшибок.Причина = Перечисления.ок_ПричиныОтказаСозданияЗнРДС.ВыявленыРасхожденияПоАналитикамБК;
					НоваяСтрокаОшибок.Ответственный = ?(НоваяСтрокаОшибок.ДокументРасчетов = Неопределено, Неопределено, НоваяСтрокаОшибок.ДокументРасчетов.Ответственный);
				КонецЕсли; 
				
				Продолжить;
				
			Иначе
				
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					РеестрОшибок.Удалить(НайденнаяСтрока);
				КонецЦикла; 
				
			КонецЕсли;
			
			ВыборкаСтатьиОборотовБДДС = ВыборкаФВБ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтруктураПоследнейЗаписи.КоличествоСтатейОборотовБДДС = ВыборкаСтатьиОборотовБДДС.Количество();
			Пока ВыборкаСтатьиОборотовБДДС.Следующий() Цикл
				
				СтруктураПоследнейЗаписи.ИндСтатейОборотовБДДС = СтруктураПоследнейЗаписи.ИндСтатейОборотовБДДС + 1;
				
				Если (ВыборкаСтатьиОборотовБДДС.СуммаКонтрольСНДС - ВыборкаСтатьиОборотовБДДС.СуммаИсполнениеСНДС) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоэффициентСуммыОплаты = СуммаОстаток / (ВыборкаФВБ.СуммаКонтрольСНДС - ВыборкаФВБ.СуммаИсполнениеСНДС);
				Если КоэффициентСуммыОплаты <= 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				Если НЕ ТранзакцияАктивна() Тогда
			
					Копия_ДанныеДляЗаполненияЗаявок = СкопироватьДанные(ДанныеДляЗаполненияЗаявок, Истина);
					Копия_РеестрОшибок				= СкопироватьДанные(РеестрОшибок, Ложь);
				
					НачатьТранзакцию();
					
					СозданоДокументовВТранзакции = 0;
					МассивСозданныхДокументов.Очистить();
								
				КонецЕсли; 
				
				ДокЗаявка 			= Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
				РучноеЗаполнение 	= Ложь;
				ДокЗаявка.СтавкаНДС = ПолучитьСтавкуНДСИзДокумента(ТекущиеДанныеДляЗаполненияЗаявок.ДокументРасчетов);
				
				Если НЕ ЗначениеЗаполнено(ДокЗаявка.СтавкаНДС) Тогда
					РучноеЗаполнение = Истина;
				КонецЕсли; 
				
				ВыборкаДетальныеЗаписи = ВыборкаСтатьиОборотовБДДС.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					СуммаОплаты 	  = Окр(ВыборкаДетальныеЗаписи.РазницаСНДС * КоэффициентСуммыОплаты, 2);
					СуммаОплатыБезНДС = Окр(ВыборкаДетальныеЗаписи.РазницаБезНДС * КоэффициентСуммыОплаты, 2);
					
					НоваяСтр 					  = ДокЗаявка.Распределение.Добавить();
					НоваяСтр.ЦФО 				  = ВыборкаДетальныеЗаписи.ЦФО;				
					НоваяСтр.Проект 			  = ВыборкаДетальныеЗаписи.Проект;
					НоваяСтр.СтатьяОборотов 	  = ВыборкаДетальныеЗаписи.СтатьяОборотовБДДС;		
					НоваяСтр.Ок_СтатьяОборотовБДР = ВыборкаДетальныеЗаписи.СтатьяОборотовБДР;
					НоваяСтр.ДоговорКонтрагента   = ВыборкаДетальныеЗаписи.ДоговорКонтрагента;
					НоваяСтр.Аналитика_1 		  = ВыборкаДетальныеЗаписи.Аналитика_1;
					НоваяСтр.Аналитика_2 		  = ВыборкаДетальныеЗаписи.Аналитика_2;
					НоваяСтр.СтавкаНДС 			  = ДокЗаявка.СтавкаНДС;
					НоваяСтр.СуммаБезНДС          = СуммаОплатыБезНДС;
					НоваяСтр.Сумма 				  = СуммаОплаты;
					НоваяСтр.НДС  				  = СуммаОплаты - СуммаОплатыБезНДС;
					
					ДокЗаявка.УстановитьИДСтроки(НоваяСтр);
			
				КонецЦикла;
				
				Итого_Сумма 		= ДокЗаявка.Распределение.Итог("Сумма");
				Итого_СуммаБезНДС 	= ДокЗаявка.Распределение.Итог("СуммаБезНДС");
				Итого_НДС 			= ДокЗаявка.Распределение.Итог("НДС");
				
				ДокЗаявка.СуммаВключаетНДС 	   		= Истина;
				ДокЗаявка.Сумма 					= Итого_Сумма;
				
				СтруктураПоследнейЗаписи.Сумма = СтруктураПоследнейЗаписи.Сумма + Итого_Сумма;
				
				//Выравнивание распределения
				Если СтруктураПоследнейЗаписи.КоличествоФВБ = СтруктураПоследнейЗаписи.ИндФВБ
					И СтруктураПоследнейЗаписи.КоличествоСтатейОборотовБДДС = СтруктураПоследнейЗаписи.ИндСтатейОборотовБДДС
					И СтруктураПоследнейЗаписи.Сумма <> СуммаОстаток Тогда
					
					СтрокаДляКорректировкиРаспределения = ДокЗаявка.Распределение[ДокЗаявка.Распределение.Количество() - 1];
					СтрокаДляКорректировкиРаспределения.Сумма = СтрокаДляКорректировкиРаспределения.Сумма + (СуммаОстаток - СтруктураПоследнейЗаписи.Сумма);
					ДокЗаявка.Сумма = ДокЗаявка.Сумма + (СуммаОстаток - СтруктураПоследнейЗаписи.Сумма);
					
					РассчитатьСуммуНДС(СтрокаДляКорректировкиРаспределения);
					РассчитатьСуммуБезНДС(СтрокаДляКорректировкиРаспределения);
					
				КонецЕсли; 
				
				РассчитатьСуммуНДС(ДокЗаявка);
				РассчитатьСуммуБезНДС(ДокЗаявка);
				
				//Если ДокЗаявка.Сумма <> Итого_Сумма  
				//	И ДокЗаявка.Распределение.Количество() > 0 Тогда

				//	СтрокаДляКорректировкиРаспределения = ДокЗаявка.Распределение[ДокЗаявка.Распределение.Количество() - 1];
				//	СтрокаДляКорректировкиРаспределения.Сумма = СтрокаДляКорректировкиРаспределения.Сумма + (СуммаОстаток - Итого_Сумма);
				//
				//КонецЕсли;
				//
				//Если ДокЗаявка.СуммаБезНДС <> Итого_СуммаБезНДС  
				//	И ДокЗаявка.Распределение.Количество() > 0 Тогда

				//	СтрокаДляКорректировкиРаспределения = ДокЗаявка.Распределение[ДокЗаявка.Распределение.Количество() - 1];
				//	СтрокаДляКорректировкиРаспределения.СуммаБезНДС = СтрокаДляКорректировкиРаспределения.СуммаБезНДС + (ДокЗаявка.СуммаБезНДС - Итого_СуммаБезНДС);
				//
				//КонецЕсли; 
				//
				//Если ДокЗаявка.НДС <> Итого_НДС
				//	И ДокЗаявка.Распределение.Количество() > 0 Тогда

				//	СтрокаДляКорректировкиРаспределения = ДокЗаявка.Распределение[ДокЗаявка.Распределение.Количество() - 1];
				//	СтрокаДляКорректировкиРаспределения.НДС = СтрокаДляКорректировкиРаспределения.НДС + (ДокЗаявка.НДС - Итого_НДС);
				//
				//КонецЕсли;				
				
				ДокЗаявка.СуммаВзаиморасчеты 		= ДокЗаявка.Сумма;
				ДокЗаявка.СуммаРегл 				= ДокЗаявка.Сумма; 
				ДокЗаявка.СуммаУпр 					= ДокЗаявка.Сумма; 
				ДокЗаявка.СуммаДокумента 			= ДокЗаявка.Сумма; 
				ДокЗаявка.НДСВзаиморасчеты 			= ДокЗаявка.НДС;
				ДокЗаявка.НДСУпр 					= ДокЗаявка.НДС;
				ДокЗаявка.НДСРегл 					= ДокЗаявка.НДС;
				
				ВидОперации 	= ЗаполнитьСписокПрофилейРазноскиНаСервере(ТекущиеДанныеДляЗаполненияЗаявок.СчетБУ, "ВидОперацииЗаявкаНаРасход");
				ПрофильРазноски = ЗаполнитьСписокПрофилейРазноскиНаСервере(ТекущиеДанныеДляЗаполненияЗаявок.СчетБУ, "Код");
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-03-31 (#НТП_БП12_ФР01)
				//СтруктураВалюты = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанныеДляЗаполненияЗаявок.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());	
				// Заменено на:
				Если ТипЗнч(СтруктураПараметровЗаполнения) = Тип("Структура") 
					И СтруктураПараметровЗаполнения.Свойство("ДатаРасхода") Тогда
					
					СтруктураВалюты = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанныеДляЗаполненияЗаявок.ок_ВалютаВзаиморасчетов, СтруктураПараметровЗаполнения.ДатаРасхода);		
				Иначе
					СтруктураВалюты = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанныеДляЗаполненияЗаявок.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());		
				КонецЕсли;
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-03-31 (#НТП_БП12_ФР01)
				
				ДокЗаявка.ДокументОснование    			= ТекущиеДанныеДляЗаполненияЗаявок.ДокументРасчетов;
				ДокЗаявка.Дата 				   			= ТекущаяДата();
				ДокЗаявка.Сценарий			   			= ПолучитьСценарийЗнРДСПоСтатьеОборотовБДДС(ВыборкаСтатьиОборотовБДДС.СтатьяОборотовБДДС);
				ДокЗаявка.ДатаРасхода 		   			= СтруктураПараметровЗаполнения.ДатаРасхода;			
				ДокЗаявка.ТипПлатежа 		   			= Справочники.бит_ТипыПлатежей.НайтиПоНаименованию("Оплата");		
				ДокЗаявка.Контрагент 		   			= ТекущиеДанныеДляЗаполненияЗаявок.Контрагент;		
				ДокЗаявка.ДоговорКонтрагента   			= ТекущиеДанныеДляЗаполненияЗаявок.ДоговорКонтрагента;		
				ДокЗаявка.СБ_ПрофильРазноски   			= ?(ПрофильРазноски = Неопределено, "", ПрофильРазноски);
				ДокЗаявка.Организация		   			= ТекущиеДанныеДляЗаполненияЗаявок.Организация;		 
				ДокЗаявка.СБ_Инициатор 		   			= ТекущиеДанныеДляЗаполненияЗаявок.ФВБ.бит_БК_Инициатор;				    
				ДокЗаявка.ВидОперации 		   			= ?(ВидОперации = Неопределено, ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику"), ВидОперации);
				ДокЗаявка.ФормаОплаты 		   			= ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные");
				ДокЗаявка.ТипЗаявки 		   			= ПредопределенноеЗначение("Перечисление.бит_ТипыЗаявокНаРасходованиеСредств.Плановая");
				ДокЗаявка.Важность 			   			= ?(ТекущиеДанныеДляЗаполненияЗаявок.ВысокийПриоритетДляОплаты, ПредопределенноеЗначение("Перечисление.бит_Важность.Высокая"), ПредопределенноеЗначение("Перечисление.бит_Важность.Средняя"));
				ДокЗаявка.ВалютаДокумента	   			= ТекущиеДанныеДляЗаполненияЗаявок.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ДокЗаявка.КурсДокумента		   			= СтруктураВалюты.Курс;
				ДокЗаявка.КратностьДокумента   			= СтруктураВалюты.Кратность;
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629) //заполняется перед записью документа
				//ДокЗаявка.СБ_БанковскийСчетКонтрагента 	= ПолучитьОсновнойБанковскийСчет(ДокЗаявка.ДоговорКонтрагента);
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
				
				ДокЗаявка.Аналитика_1 		   			= ДокЗаявка.Распределение[0].Аналитика_1;
				ДокЗаявка.Аналитика_2 					= ДокЗаявка.Распределение[0].Аналитика_2;
				ДокЗаявка.ЦФО 				   			= ДокЗаявка.Распределение[0].ЦФО;				
				ДокЗаявка.СтатьяОборотов	   			= ДокЗаявка.Распределение[0].СтатьяОборотов;
				ДокЗаявка.Проект			   			= ДокЗаявка.Распределение[0].Проект;
				ДокЗаявка.Ок_СтатьяОборотовБДР 			= ДокЗаявка.Распределение[0].Ок_СтатьяОборотовБДР;
				ДокЗаявка.Ок_ПересчетКурса     			= ТекущиеДанныеДляЗаполненияЗаявок.ДоговорКонтрагента.Ок_ПересчетКурса;
				ДокЗаявка.ок_НаличиеДЗ					= ?(ТекущиеДанныеДляЗаполненияЗаявок.ДоступноеСальдо < ДокЗаявка.Сумма, Истина, Ложь);
				ДокЗаявка.ЭтоКазначейство				= Ложь;
				ДокЗаявка.НеВключатьВПлатежныйКалендарь	= Истина;
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-15 (#3758)
				//ДокЗаявка.ок_СпособСоздания				= 1;
				Если СтруктураПараметровЗаполнения.Свойство("ЭтоНеБК")
					И СтруктураПараметровЗаполнения.ЭтоНеБК Тогда
					ДокЗаявка.ок_СпособСоздания			= 10;
				Иначе
					ДокЗаявка.ок_СпособСоздания			= 1;
				КонецЕсли; 
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-15 (#3758)
				ДокЗаявка.ок_СозданОбработкой			= Истина;
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-26 (#НТП_БП12_ФР04)
				ДокЗаявка.ок_НалоговыйАгент				= ДокЗаявка.ДоговорКонтрагента.УчетАгентскогоНДС;
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-26 (#НТП_БП12_ФР04)
				
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
				//ДокЗаявка.НазначениеПлатежа 			= СформироватьНазначениеПлатежа(ДокЗаявка);
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("ДокументОснование", 	ДокЗаявка.ДокументОснование);
				СтруктураПараметров.Вставить("ДоговорКонтрагента", 	ДокЗаявка.ДоговорКонтрагента);
				СтруктураПараметров.Вставить("СтатьяОборотов", 		ДокЗаявка.СтатьяОборотов);
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-29 (#НТП_БП12_ФР04)
				//СтруктураПараметров.Вставить("НДС", 				ДокЗаявка.НДС);
				// Заменено на:
				Если ВалютаРегУчета <> ДокЗаявка.ВалютаДокумента Тогда
					// ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-10-26 (#4412)
					//НДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДокЗаявка.НДС
					//															   , ДокЗаявка.ВалютаДокумента
					//															   , ВалютаРегУчета
					//															   , ДокЗаявка.КурсДокумента
					//															   , 1
					//															   , ДокЗаявка.КратностьДокумента
					//															   , 1);
					ДокЗаявка.СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДокЗаявка.Сумма
																				   , ДокЗаявка.ВалютаДокумента
																				   , ВалютаРегУчета
																				   , ДокЗаявка.КурсДокумента
																				   , 1
																				   , ДокЗаявка.КратностьДокумента
																				   , 1);
																				   
					ДокЗаявка.НДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДокЗаявка.НДС
																				   , ДокЗаявка.ВалютаДокумента
																				   , ВалютаРегУчета
																				   , ДокЗаявка.КурсДокумента
																				   , 1
																				   , ДокЗаявка.КратностьДокумента
																				   , 1);
					НДСРегл = ДокЗаявка.НДСРегл;
					// ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-10-26 (#4412)
				Иначе
					НДСРегл	= ДокЗаявка.НДС;															   
				КонецЕсли;
																			   
				СтруктураПараметров.Вставить("НДС", 				?(ДокЗаявка.ок_НалоговыйАгент, 0, НДСРегл));
				//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-29 (#НТП_БП12_ФР04)
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-08 (#4337)
				СтруктураПараметров.Вставить("ДокументОбъект", ДокЗаявка);
				// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-08 (#4337)
				
				ДокЗаявка.НазначениеПлатежа 			= Документы.бит_ЗаявкаНаРасходованиеСредств.СформироватьНазначениеПлатежа(СтруктураПараметров);
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
				ДокЗаявка.НазначениеПлатежаУпр			= ДокЗаявка.НазначениеПлатежа;
				ДокЗаявка.Комментарий 					= "Создано автоматически с помощью обработки";
				
				ДокЗаявка.Исполнитель					= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
				ДокЗаявка.Ответственный					= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
				
				СтатьяОборотов = ДокЗаявка.СтатьяОборотов;
				СтавкаНДС = ДокЗаявка.СтавкаНДС;
				
				Попытка
					
					ДокЗаявка.ДополнительныеСвойства.Вставить("СозданоОбработкой_ФормированиеЗнРДС", Истина);
					ДокЗаявка.ДополнительныеСвойства.Вставить("ВыводитьСообщениеОбОшибкеЧерезВызватьИсключение", Истина);
					ДокЗаявка.Записать(РежимЗаписиДокумента.Проведение);
					
					//Добавить документ в ТЧ и произвести расчеты по сумма, добавить сумму ЗнРДС и минусовать доступное сальдо
					СтруктураПараметровДляОбновления = Новый Структура();
					СтруктураПараметровДляОбновления.Вставить("Организация", 		ТекущиеДанныеДляЗаполненияЗаявок.Организация);
					СтруктураПараметровДляОбновления.Вставить("Контрагент", 		ТекущиеДанныеДляЗаполненияЗаявок.Контрагент);
					СтруктураПараметровДляОбновления.Вставить("ДоговорКонтрагента", ТекущиеДанныеДляЗаполненияЗаявок.ДоговорКонтрагента);
					СтруктураПараметровДляОбновления.Вставить("ДокументРасчетов", 	ТекущиеДанныеДляЗаполненияЗаявок.ДокументРасчетов);
					СтруктураПараметровДляОбновления.Вставить("СчетБУ", 			ТекущиеДанныеДляЗаполненияЗаявок.СчетБУ);
					СтруктураПараметровДляОбновления.Вставить("НомерСтроки", 		ТекущиеДанныеДляЗаполненияЗаявок.НомерСтроки);
					СтруктураПараметровДляОбновления.Вставить("ЗнРДС", 				ДокЗаявка.Ссылка);
					// ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-10-26 (#4412)
					//СтруктураПараметровДляОбновления.Вставить("СуммаДокумента", 	ДокЗаявка.Сумма);
					СтруктураПараметровДляОбновления.Вставить("СуммаДокумента", 	ДокЗаявка.СуммаРегл + ДокЗаявка.НДСРегл);
					// ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-10-26 (#4412)
					
					ОбновитьТаблицуДанныхДляЗаполненияЗаявок(ДанныеДляЗаполненияЗаявок, СтруктураПараметровДляОбновления);
					
					СозданоДокументовВТранзакции = СозданоДокументовВТранзакции + 1;
					МассивСозданныхДокументов.Добавить(ТекущиеДанныеДляЗаполненияЗаявок.ДокументРасчетов);
					
					Если СозданоДокументовВТранзакции >= КоличествоДокументовВТранзакции
						И ТранзакцияАктивна() Тогда
						ЗафиксироватьТранзакцию();
					КонецЕсли; 
					
				Исключение
					
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли; 
					
					ИнфоОшибка = ИнформацияОбОшибке();
					ТекстОшибки = "";
					Если ИнфоОшибка.Причина <> Неопределено Тогда
						Если ИнфоОшибка.Причина.Причина <> Неопределено Тогда
							ТекстОшибки = ТекстОшибки + Символы.ПС + ИнфоОшибка.Причина.Причина.Описание;
						Иначе
							ТекстОшибки = ТекстОшибки + Символы.ПС + ИнфоОшибка.Причина.Описание;
						КонецЕсли; 
					Иначе
						ТекстОшибки = ИнфоОшибка.Описание;
					КонецЕсли; 
					
					пТекстОшибки = НСтр("ru = 'Строка(%4): Не удалось создать документ по статье оборотов %1 и ставке НДС %2 по причине: %3'");
					пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, СтатьяОборотов,
																										 СтавкаНДС,
																										 ТекстОшибки,
																										 ТекущиеДанныеДляЗаполненияЗаявок.НомерСтроки);
					пОшибки = пОшибки + ?(ПустаяСтрока(пОшибки), "", Символы.ПС) + пТекстОшибки;																												 
					
					ТекстОтменыСозданныхЗаявок = "";
					//Для каждого ЭлементМассива Из МассивСозданныхДокументов Цикл
					//	ТекстОтменыСозданныхЗаявок = ТекстОтменыСозданныхЗаявок + Символы.ПС + ЭлементМассива;
					//КонецЦикла; 
					
					Если ТекстОтменыСозданныхЗаявок <> "" Тогда
					
						пОшибки = пОшибки + Символы.ПС + "Отменено создание ЗнРДС по документам расчетов:" + ТекстОтменыСозданныхЗаявок;
					
					КонецЕсли; 
					
					//ВосстановитьДанные(ДанныеДляЗаполненияЗаявок, Копия_ДанныеДляЗаполненияЗаявок);
					//ВосстановитьДанные(РеестрОшибок, Копия_РеестрОшибок);
					//ОбновитьТекстГиперссылок(ДанныеДляЗаполненияЗаявок);
					
				КонецПопытки;
				
			КонецЦикла;
		КонецЦикла;
	
		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
	ОбновитьТекстГиперссылок(ДанныеДляЗаполненияЗаявок);
	
КонецПроцедуры

Функция ПолучитьСписокСчетовДЗ() Экспорт

	СписокСчетов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_СписокСчетовПроверкиДЗ", Неопределено);
	Если СписокСчетов = Неопределено Тогда
		СписокСчетов = Новый СписокЗначений();
	КонецЕсли; 
	Возврат СписокСчетов;
	
КонецФункции

Функция ПолучитьОсновнойБанковскийСчет(Договор) Экспорт
	
	Если Договор.ок_БанковскиеСчета.Количество() = 1 Тогда
		Возврат Договор.ок_БанковскиеСчета[0].БанковскийСчет;
	КонецЕсли; 
	
	НайденныеСтроки = Договор.ок_БанковскиеСчета.НайтиСтроки(Новый Структура("Основной", Истина));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].БанковскийСчет;
	КонецЕсли;
	
	Если Договор.ок_БанковскиеСчета.Количество() > 1 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	БанковскийСчет = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(Договор.Владелец);
	Возврат БанковскийСчет;
	
КонецФункции

Функция СформироватьНазначениеПлатежа(ДокументЗаявка) Экспорт

	НазначениеПлатежа = "";
	
	Если ТипЗнч(ДокументЗаявка.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И ДокументЗаявка.ДокументОснование.Услуги.Количество() > 0 Тогда
		
		НазначениеПлатежа = НазначениеПлатежа + "Оплата за " + ДокументЗаявка.ДокументОснование.Услуги[0].Содержание;
		
	ИначеЕсли ТипЗнч(ДокументЗаявка.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И ДокументЗаявка.ДокументОснование.Товары.Количество() > 0 Тогда
		
		НазначениеПлатежа = НазначениеПлатежа + "Оплата за ТМЦ";
		
	ИначеЕсли ТипЗнч(ДокументЗаявка.ДокументОснование) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	
		//Если вид – операционная деятельность
		Если ДокументЗаявка.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
		
			НазначениеПлатежа = НазначениеПлатежа + "Оплата за работы (услуги)";
			
		//Если вид – инвестиционная деятельность
		ИначеЕсли ДокументЗаявка.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			
			Если ДокументЗаявка.СтатьяОборотов.Код = "000000371" Тогда
				НазначениеПлатежа = НазначениеПлатежа + "Оплата за здания";
			ИначеЕсли ДокументЗаявка.СтатьяОборотов.Код = "000000372" Тогда
				НазначениеПлатежа = НазначениеПлатежа + "Оплата за землю";
			ИначеЕсли ДокументЗаявка.СтатьяОборотов.Код = "000000374"
				ИЛИ ДокументЗаявка.СтатьяОборотов.Код = "000000375" Тогда
				НазначениеПлатежа = НазначениеПлатежа + "Оплата за оборудование";
			Иначе
				НазначениеПлатежа = НазначениеПлатежа + "Оплата за работы (услуги)";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НазначениеПлатежа = НазначениеПлатежа + " по " + ДокументЗаявка.ДоговорКонтрагента.Наименование + ", в т.ч. " + ?(ДокументЗаявка.НДС = 0, "Без НДС", "НДС " + ДокументЗаявка.НДС);
	
	Возврат НазначениеПлатежа
																							
КонецФункции

Процедура ОбновитьТаблицуДанныхДляЗаполненияЗаявок(ДанныеДляЗаполненияЗаявок, СтруктураПараметровДляОбновления) Экспорт
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Организация", СтруктураПараметровДляОбновления.Организация);
	СтруктураОтбора.Вставить("Контрагент", 	СтруктураПараметровДляОбновления.Контрагент);
	СтруктураОтбора.Вставить("Выбран", 		Истина);
	
	пДоступноеСальдо = 0;
	пСуммаСформированныхЗнРДС = 0;
	
	НайденныеСтроки = ДанныеДляЗаполненияЗаявок.НайтиСтроки(СтруктураОтбора);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если НайденнаяСтрока.СформированныеЗнРДС.Количество() > 0
			И НайденнаяСтрока.ДокументРасчетов <> СтруктураПараметровДляОбновления.ДокументРасчетов Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока.ДоступноеСальдо 		 = НайденнаяСтрока.ДоступноеСальдо - СтруктураПараметровДляОбновления.СуммаДокумента;
		НайденнаяСтрока.СуммаСформированныхЗнРДС = НайденнаяСтрока.СуммаСформированныхЗнРДС + СтруктураПараметровДляОбновления.СуммаДокумента;
		
		пДоступноеСальдо = НайденнаяСтрока.ДоступноеСальдо;
		пСуммаСформированныхЗнРДС = НайденнаяСтрока.СуммаСформированныхЗнРДС;
		
		Если НайденнаяСтрока.ДоговорКонтрагента = СтруктураПараметровДляОбновления.ДоговорКонтрагента
			И НайденнаяСтрока.ДокументРасчетов = СтруктураПараметровДляОбновления.ДокументРасчетов Тогда
		
			НоваяСтрокаЗнРДС = НайденнаяСтрока.СформированныеЗнРДС.Добавить();
			НоваяСтрокаЗнРДС.ЗнРДС 			= СтруктураПараметровДляОбновления.ЗнРДС;
			НоваяСтрокаЗнРДС.НаличиеДЗ 		= СтруктураПараметровДляОбновления.ЗнРДС.ок_НаличиеДЗ;
			НоваяСтрокаЗнРДС.СуммаДокумента = СтруктураПараметровДляОбновления.СуммаДокумента;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Организация", СтруктураПараметровДляОбновления.Организация);
	СтруктураОтбора.Вставить("Контрагент", 	СтруктураПараметровДляОбновления.Контрагент);
	СтруктураОтбора.Вставить("Выбран", 		Ложь);
	
	НайденныеСтроки = ДанныеДляЗаполненияЗаявок.НайтиСтроки(СтруктураОтбора);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если НайденнаяСтрока.НомерСтроки <= СтруктураПараметровДляОбновления.НомерСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если НайденнаяСтрока.СформированныеЗнРДС.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока.ДоступноеСальдо 		 = пДоступноеСальдо;
		НайденнаяСтрока.СуммаСформированныхЗнРДС = пСуммаСформированныхЗнРДС;
		
	КонецЦикла;
	
	ОбновитьНаличиеДЗ(ДанныеДляЗаполненияЗаявок);
	
КонецПроцедуры

Функция СкопироватьДанные(Знач Данные, ЭтоДанныеДляЗаполненияЗаявок = Ложь) Экспорт
	
	Результат = Данные;
	Если ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
	
		Результат = Данные.Скопировать();
	
	ИначеЕсли ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
		
		Если ЭтоДанныеДляЗаполненияЗаявок Тогда
		
			Результат = Новый Структура("ДанныеФормыКоллекция, СформированныеЗнРДС", Данные.Выгрузить(), Новый Массив());
			Для каждого ТекущаяСтрока Из Данные Цикл
			
				Результат.СформированныеЗнРДС.Добавить(ТекущаяСтрока.СформированныеЗнРДС.Выгрузить());
			
			КонецЦикла; 
			
		Иначе
			
			Результат = Новый Структура("ДанныеФормыКоллекция", Данные.Выгрузить());
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Процедура ВосстановитьДанные(Источник, Знач Приемнок) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ТаблицаЗначений")
		И ТипЗнч(Источник) = Тип("ТаблицаЗначений") Тогда
	
		Источник = Приемнок;
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыКоллекция")
		И ТипЗнч(Приемнок) = Тип("Структура")
		И Приемнок.Свойство("ДанныеФормыКоллекция") Тогда
		
		Источник.Загрузить(Приемнок.ДанныеФормыКоллекция);
		
		Если Приемнок.Свойство("СформированныеЗнРДС") Тогда
			Для Инд = 0 По Источник.Количество() - 1 Цикл
				ТекущаяСтрока = Источник[Инд];
				ТекущаяСтрока.СформированныеЗнРДС.Загрузить(Приемнок.СформированныеЗнРДС[Инд]);
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ФормированиеЗнРДС_ОбработатьРеестрОшибок(РеестрОшибок) Экспорт
	
	ТаблицаГруппировокПричина = РеестрОшибок.Скопировать(,"ДоговорКонтрагента, Причина");
	ТаблицаГруппировокПричина.Свернуть("ДоговорКонтрагента, Причина");
	ТаблицаГруппировокДоговор = ТаблицаГруппировокПричина.Скопировать(,"ДоговорКонтрагента");
	ТаблицаГруппировокДоговор.Свернуть("ДоговорКонтрагента");
	
	МассивСтатусов = Новый Массив();
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Задача_Создана"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Задача_Принята"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Задача_Остановлена"));
	
	Для каждого ТекущаяГруппировка Из ТаблицаГруппировокДоговор Цикл
		
		СоздаватьЗадачу = Ложь;
		
		СтруктураЗадачи = Задачи.бит_уп_Задача.СтруктураЗадачи();
		СтруктураЗадачи.Предмет	 = ТекущаяГруппировка.ДоговорКонтрагента;
		СтруктураЗадачи.Важность = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыВажностиЗадач.Средняя");
		СтруктураЗадачи.Вставить("Состояние", ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Задача_Создана"));
		
		//!!!!!!Добавить пересчет только рабочих дней!!!!!!
		СтруктураЗадачи.СрокИсполнения  = КонецДня(ТекущаяДата() + СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_КоличествоРабочихДнейИсполненияЗадачи", 0) * 60*60*24);

		Исполнитель 	= Неопределено;
		Описание 		= "<HTML><HEAD><META content=""text/html; charset=utf-8"" http-equiv=Content-Type><META name=GENERATOR content=""MSHTML 11.00.9600.19431""></HEAD><BODY>";
	
		Описание 		= Описание + "<TABLE cellSpacing=0 cellPadding=5 border=1 style=""font-size:.7em""><TBODY>" + Символы.ПС;
		Описание 		= Описание + HTML_ДобавитьСтрокуВТаблицу(РеестрОшибок.Колонки);
		
		ГруппировкаПричины = ТаблицаГруппировокПричина.НайтиСтроки(Новый Структура("ДоговорКонтрагента", ТекущаяГруппировка.ДоговорКонтрагента));
		Для каждого ТекущаяПричина Из ГруппировкаПричины Цикл
			
			Задача = НайтиЗадачуПоОбъекту(ТекущаяГруппировка.ДоговорКонтрагента, Строка(ТекущаяПричина.Причина), МассивСтатусов);
			Если Задача <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			СоздаватьЗадачу = Истина;
			
			СтруктураЗадачи.Наименование = ?(СтруктураЗадачи.Наименование = "" ИЛИ СтруктураЗадачи.Наименование = Неопределено, "", СтруктураЗадачи.Наименование + ", ") + Строка(ТекущаяПричина.Причина);
			
			ДетальныеЗаписи = РеестрОшибок.НайтиСтроки(Новый Структура("ДоговорКонтрагента, Причина", ТекущаяГруппировка.ДоговорКонтрагента, ТекущаяПричина.Причина));
			Для каждого СтрокаДЗ Из ДетальныеЗаписи Цикл
				
				Описание = Описание + Символы.ПС + HTML_ДобавитьСтрокуВТаблицу(РеестрОшибок.Колонки, СтрокаДЗ);
				Если ЗначениеЗаполнено(СтрокаДЗ.Ответственный) Тогда
					Исполнитель = СтрокаДЗ.Ответственный;
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НЕ СоздаватьЗадачу Тогда
			Продолжить;
		КонецЕсли;
		
		Описание 				 = Описание + Символы.ПС + "</TBODY></TABLE>";
		Описание 				 = Описание + "</BODY></HTML>";
		СтруктураЗадачи.Описание = Описание;
		
		Если Исполнитель = Неопределено Тогда
			Исполнитель = ПолучитьПоследнегоОтветственногоПоДоговору(ТекущаяГруппировка.ДоговорКонтрагента);
		КонецЕсли;
		СтруктураЗадачи.Исполнитель = Исполнитель;
		
		Если СтруктураЗадачи.Исполнитель = Неопределено Тогда
			СтруктураЗадачи.РольИсполнителя = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_РуководительГруппыУчета", Неопределено);;
			СтруктураЗадачи.СпособАдресации = 1;
		Иначе
			СтруктураЗадачи.СпособАдресации = 0;
		КонецЕсли;
		
		МаксКоличествоОбъектов = бит_уп_Сервер.МаксимальноеКоличествоОбъектовАдресации();	
		
		ЗадачаСсылка = Задачи.бит_уп_Задача.СоздатьНовуюЗадачу(СтруктураЗадачи, МаксКоличествоОбъектов, "все");
		
	КонецЦикла;
	
КонецПроцедуры

Функция HTML_ДобавитьСтрокуВТаблицу(Колонки, ЗначенияКолонок = Неопределено) Экспорт
	
	СтрокаТаблицы = "	<tr>";
	Для каждого ТекущаяКолонка Из Колонки Цикл
		
		Если ТекущаяКолонка.Имя = "НомерСтроки"
			ИЛИ ТекущаяКолонка.Имя = "ИсходныйНомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = СтрокаТаблицы + Символы.ПС + "		<td>" + ?(ЗначенияКолонок = Неопределено, ТекущаяКолонка.Имя, ЗначенияКолонок[ТекущаяКолонка.Имя]) + "</td>";
	
	КонецЦикла; 
	СтрокаТаблицы = СтрокаТаблицы + Символы.ПС + "	</tr>";
	
	Возврат СтрокаТаблицы;
	
КонецФункции

Функция ФормированиеЗнРДС_ПолучитьДанныеКЗБ(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Контрагент КАК Контрагент,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов КАК СтатьяОборотовБДР,
		|	бит_СоответствияАналитик.ПраваяАналитика_1 КАК СтатьяОборотовБДДС,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО КАК ЦФО,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Проект КАК Проект,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.БанковскийСчет КАК БанковскийСчет,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1 КАК Аналитика_1,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_2 КАК Аналитика_2,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_3 КАК Аналитика_3,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_4 КАК Аналитика_4,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_5 КАК Аналитика_5,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_6 КАК Аналитика_6,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_7 КАК Аналитика_7,
		|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольОборот) КАК СуммаКонтрольБезНДС,
		|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот) КАК СуммаИсполнениеБезНДС,
		|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольОборот - бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот) КАК РазницаБезНДС,
		|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.КоличествоСценарийКонтрольОборот) КАК КоличествоКонтроль,
		|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.КоличествоСценарийИсполнениеОборот) КАК КоличествоИсполнение,
		|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольСНДСОборот) КАК СуммаКонтрольСНДС,
		|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеСНДСОборот) КАК СуммаИсполнениеСНДС,
		|	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольСНДСОборот - бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеСНДСОборот) КАК РазницаСНДС
		|ИЗ
		|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Аналитика_1 = &Аналитика_1
		|				И (Сценарий = &Сценарий_У
		|						И СценарийКонтролируемый = &СценарийКонтролируемый_У
		|					ИЛИ Сценарий = &Сценарий_И
		|						И СценарийКонтролируемый = &СценарийКонтролируемый_И)) КАК бит_КонтрольныеЗначенияБюджетовОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
		|		ПО (бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
		|			И бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов = бит_СоответствияАналитик.ЛеваяАналитика_1
		|ГДЕ
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.ДоговорКонтрагента,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Проект,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.НоменклатурнаяГруппа,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Контрагент,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.БанковскийСчет,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_2,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_3,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_4,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_5,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_6,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_7,
		|	бит_СоответствияАналитик.ПраваяАналитика_1
		|ИТОГИ
		|	СУММА(СуммаКонтрольБезНДС),
		|	СУММА(СуммаИсполнениеБезНДС),
		|	СУММА(РазницаБезНДС),
		|	СУММА(КоличествоКонтроль),
		|	СУММА(КоличествоИсполнение),
		|	СУММА(СуммаКонтрольСНДС),
		|	СУММА(СуммаИсполнениеСНДС),
		|	СУММА(РазницаСНДС)
		|ПО
		|	Аналитика_1,
		|	СтатьяОборотовБДДС";
	
	Запрос.УстановитьПараметр("Регистратор", 				СтруктураПараметров.ДокументРасчетов);
	Запрос.УстановитьПараметр("Контрагент", 				СтруктураПараметров.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", 		СтруктураПараметров.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Аналитика_1", 				СтруктураПараметров.Аналитика_1);
	Запрос.УстановитьПараметр("Сценарий_У", 				СтруктураПараметров.Сценарий_У);
	Запрос.УстановитьПараметр("Сценарий_И", 				СтруктураПараметров.Сценарий_И);
	Запрос.УстановитьПараметр("СценарийКонтролируемый_У",	СтруктураПараметров.СценарийКонтролируемый_У);
	Запрос.УстановитьПараметр("СценарийКонтролируемый_И", 	СтруктураПараметров.СценарийКонтролируемый_И);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьПоследнегоОтветственногоПоДоговору(ТекущийДоговор) Экспорт
	
	Ответственный = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслуг.Ответственный КАК Ответственный
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Проведен
		|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
		|	И ПоступлениеТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И ПоступлениеТоваровУслуг.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.Пустаяссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоступлениеТоваровУслуг.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ТекущийДоговор);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Ответственный = ВыборкаДетальныеЗаписи.Ответственный;
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции
	
Функция НайтиЗадачуПоОбъекту(Объект, Наименование, МассивСтатусов) Экспорт
	
	РезЗадача = Неопределено;
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Наименование", 	"%" + Наименование + "%");
	Запрос.УстановитьПараметр("Предмет", 		Объект);
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_уп_Задача.Ссылка КАК Ссылка
	               |ИЗ
	               |	Задача.бит_уп_Задача КАК бит_уп_Задача
	               |ГДЕ
	               |	бит_уп_Задача.Предмет = &Предмет
	               |	И бит_уп_Задача.Состояние В(&МассивСтатусов)
	               |	И бит_уп_Задача.Наименование ПОДОБНО &Наименование
	               |	И НЕ бит_уп_Задача.ПометкаУдаления";
				   
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		РезЗадача = Выборка.Ссылка;
	
	КонецЕсли; 
				   
	
	Возврат РезЗадача;
	
КонецФункции

Функция ПолучитьСписокСчетов() Экспорт

	СписокСчетов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_СписокСчетовВзаиморасчетовДляФормированияЗнРДС", Неопределено);
	Если СписокСчетов = Неопределено Тогда
		СписокСчетов = Новый СписокЗначений();
	КонецЕсли; 
	Возврат СписокСчетов;
	
КонецФункции

Функция ПолучитьСтатусыЗаявокДляИсключений() Экспорт

	СтатусыЗаявокДляИсключений = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_СтатусыЗаявокДляИсключений", Неопределено);
	Если СтатусыЗаявокДляИсключений = Неопределено Тогда
		СтатусыЗаявокДляИсключений = Новый СписокЗначений();
	КонецЕсли; 
	Возврат СтатусыЗаявокДляИсключений;

КонецФункции

Функция ПолучитьСписокДоступныхОрганизаций() Экспорт
	
	СписокДоступныхОрганизаций = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_ФормироватьЗаявкиНаОплату", Неопределено);
	Если СписокДоступныхОрганизаций = Неопределено Тогда
		СписокДоступныхОрганизаций = Новый СписокЗначений();
	КонецЕсли; 
	Возврат СписокДоступныхОрганизаций;
	
КонецФункции

Функция ПолучитьСценарийЗнРДСПоСтатьеОборотовБДДС(СтатьяОборотовБДДС) Экспорт
	
	СценарийЗнРДС = Неопределено;
	
	//Если вид – операционная деятельность, то сценарий – Заявка на оплату У
	Если СтатьяОборотовБДДС.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
	
		СценарийЗнРДС = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования", Неопределено);
		
	//Если вид – инвестиционная деятельность, то сценарий – Заявка на оплату И
	ИначеЕсли СтатьяОборотовБДДС.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
		
		СценарийЗнРДС = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования", Неопределено);
		
	КонецЕсли;
	
	Возврат СценарийЗнРДС;
	
КонецФункции

Функция ЗаполнитьСписокПрофилейРазноскиНаСервере(СчетРСБУ, ИмяПараметра) Экспорт
	
	//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-06-17 (#НТП-МП-02)
	#Область СтарыйКод
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Сопоставление.Аналитика КАК Код,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход)
	//|				ТОГДА Сопоставление.НаименованиеАналитики
	//|		КОНЕЦ) КАК Наименование,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход)
	//|				ТОГДА Сопоставление.ЗначениеАналитики
	//|		КОНЕЦ) КАК ВидОперацииЗаявкаНаРасход,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.СчетРСБУ)
	//|				ТОГДА Сопоставление.ЗначениеАналитики
	//|		КОНЕЦ) КАК СчетРСБУ,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииПоступлениеДС)
	//|				ТОГДА Сопоставление.ЗначениеАналитики
	//|		КОНЕЦ) КАК ВидОперацииПоступлениеДС,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_AXAPTA)
	//|				ТОГДА Сопоставление.ЗначениеАналитики
	//|		КОНЕЦ) КАК ПрофильРазноски_AXAPTA,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_1С)
	//|				ТОГДА Сопоставление.ЗначениеАналитики
	//|		КОНЕЦ) КАК ПрофильРазноски_1С,
	//|	МАКСИМУМ(ВЫБОР
	//|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ТипКонтрагента)
	//|				ТОГДА Сопоставление.ЗначениеАналитики
	//|		КОНЕЦ) КАК ТипКонтрагента,
	//|	Сопоставление.Аналитика КАК ПрежнийКод,
	//|	ИСТИНА КАК ЗаписьСуществует
	//|ИЗ
	//|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК Сопоставление
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК СписокПрофилей
	//|		ПО Сопоставление.Аналитика = СписокПрофилей.Аналитика
	//|			И (СписокПрофилей.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход))
	//|ГДЕ
	//|	Сопоставление.ВидАналитики В(&АналитикиПоПрофилюРазноски)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Сопоставление.Аналитика,
	//|	Сопоставление.Аналитика
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Код";
	//
	//Запрос.УстановитьПараметр("АналитикиПоПрофилюРазноски",	ВидыАналитикПоПрофилюРазноски());
	//Запрос.УстановитьПараметр("АналитикиПоПрофилюРазноски",	ВидыАналитикПоПрофилюРазноски());
	//
	//СписокПрофилиРазноски = Запрос.Выполнить().Выгрузить();
	//НайденныеСтроки = СписокПрофилиРазноски.НайтиСтроки(Новый Структура("СчетРСБУ", СчетРСБУ));
	//Если НайденныеСтроки.Количество() > 0 Тогда
	//
	//	Возврат НайденныеСтроки[0][ИмяПараметра];
	//
	//КонецЕсли; 
	#КонецОбласти
	#Область НовыйКод
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сопоставление.Аналитика КАК Код,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход)
	|				ТОГДА Сопоставление.НаименованиеАналитики
	|		КОНЕЦ) КАК Наименование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход)
	|				ТОГДА Сопоставление.ЗначениеАналитики
	|		КОНЕЦ) КАК ВидОперацииЗаявкаНаРасход,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.СчетРСБУ)
	|				ТОГДА Сопоставление.ЗначениеАналитики
	|		КОНЕЦ) КАК СчетРСБУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииПоступлениеДС)
	|				ТОГДА Сопоставление.ЗначениеАналитики
	|		КОНЕЦ) КАК ВидОперацииПоступлениеДС,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_AXAPTA)
	|				ТОГДА Сопоставление.ЗначениеАналитики
	|		КОНЕЦ) КАК ПрофильРазноски_AXAPTA,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_1С)
	|				ТОГДА Сопоставление.ЗначениеАналитики
	|		КОНЕЦ) КАК ПрофильРазноски_1С,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ТипКонтрагента)
	|				ТОГДА Сопоставление.ЗначениеАналитики
	|		КОНЕЦ) КАК ТипКонтрагента,
	|	Сопоставление.Аналитика КАК ПрежнийКод,
	|	ИСТИНА КАК ЗаписьСуществует
	|ИЗ
	|	РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК Сопоставление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК СписокПрофилей
	|		ПО Сопоставление.Аналитика = СписокПрофилей.Аналитика
	|			И (СписокПрофилей.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ВидОперацииЗаявкаНаРасход))
	|ГДЕ
	|	Сопоставление.ВидАналитики В(&АналитикиПоПрофилюРазноски)
	|
	|СГРУППИРОВАТЬ ПО
	|	Сопоставление.Аналитика,
	|	Сопоставление.Аналитика
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.СчетРСБУ)
	|				ТОГДА Сопоставление.ЗначениеАналитики
	|		КОНЕЦ) = &СчетРСБУ И
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Сопоставление.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.ПрофильРазноски_1С)
	|				ТОГДА Сопоставление.ЗначениеАналитики
	|		КОНЕЦ) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Запрос.УстановитьПараметр("АналитикиПоПрофилюРазноски",	ВидыАналитикПоПрофилюРазноски());
	Запрос.УстановитьПараметр("СчетРСБУ", СчетРСБУ);
	
	РезЗапроса = Запрос.Выполнить();
	ВыборкаРез = РезЗапроса.Выбрать();
	
	Если ВыборкаРез.Следующий() Тогда
		Возврат ВыборкаРез[ИмяПараметра];
	КонецЕсли;
	
	#КонецОбласти
	//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-06-17 (#НТП-МП-02)
	
	Возврат Неопределено;
	
КонецФункции

Функция ВидыАналитикПоПрофилюРазноски() Экспорт
 
	ВидыАналитик = Перечисления.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA;

	АналитикиПоПрофилюРазноски = Новый Массив;
	АналитикиПоПрофилюРазноски.Добавить(ВидыАналитик.ВидОперацииЗаявкаНаРасход);
	АналитикиПоПрофилюРазноски.Добавить(ВидыАналитик.ВидОперацииПоступлениеДС);
	АналитикиПоПрофилюРазноски.Добавить(ВидыАналитик.ПрофильРазноски_1С);
	АналитикиПоПрофилюРазноски.Добавить(ВидыАналитик.СчетРСБУ);

	Возврат АналитикиПоПрофилюРазноски;
	
КонецФункции

Процедура РассчитатьСуммуНДС(Контейнер,ИзменятьСумму = ложь) Экспорт

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДСЧисло = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС);
	
	Если ИзменятьСумму тогда
		Контейнер.НДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.СуммаБезНДС
																	  	,Истина
																		,Ложь
																		,СтавкаНДСЧисло);
		Контейнер.Сумма = Контейнер.СуммаБезНДС + Контейнер.НДС;
	Иначе
		Контейнер.НДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
																		  	,Истина
																			,Истина
																			,СтавкаНДСЧисло);
																							
	 	Контейнер.СуммаБезНДС = Контейнер.Сумма - Контейнер.НДС;
	КонецЕсли;			
	
КонецПроцедуры

Процедура РассчитатьСуммуБезНДС(Контейнер) Экспорт

	Контейнер.СуммаБезНДС = Контейнер.Сумма - Контейнер.НДС;
																							
КонецПроцедуры

Функция ПолучитьСтавкуНДСИзДокумента(ДокументРасчетов) Экспорт
	
	МД = ДокументРасчетов.Метаданные();
	
	РеквизитСтавкаНДС = МД.Реквизиты.Найти("СтавкаНДС");
	Если РеквизитСтавкаНДС <> Неопределено Тогда
		Возврат ДокументРасчетов.СтавкаНДС;
	КонецЕсли;
	
	МассивСтавокНДС = Новый Массив;
	
	Для каждого ТекущаяТЧ Из МД.ТабличныеЧасти Цикл
	
		РеквизитСтавкаНДС = ТекущаяТЧ.Реквизиты.Найти("СтавкаНДС");
		Если РеквизитСтавкаНДС <> Неопределено Тогда
			
			Для каждого СтрокаТЧ Из ДокументРасчетов[ТекущаяТЧ.Имя] Цикл
			
				Если ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС)
					И МассивСтавокНДС.Найти(СтрокаТЧ.СтавкаНДС) = Неопределено Тогда
				
					МассивСтавокНДС.Добавить(СтрокаТЧ.СтавкаНДС);
				
				КонецЕсли; 
			
			КонецЦикла; 
			
		КонецЕсли;
	
	КонецЦикла; 
	
	Если МассивСтавокНДС.Количество() = 1 Тогда
		
		Возврат МассивСтавокНДС[0];
		
	Иначе
		
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
		
	КонецЕсли; 
	
КонецФункции

Процедура ОбновитьНаличиеДЗ(ДанныеДляЗаполненияЗаявок) Экспорт
	
	Для каждого СтрокаТЧ Из ДанныеДляЗаполненияЗаявок Цикл
		
		СтрокаТЧ.ок_НаличиеДЗ = Ложь;
		
		Для каждого ТекущийЗнРДС Из СтрокаТЧ.СформированныеЗнРДС Цикл
		
			СтрокаТЧ.ок_НаличиеДЗ = СтрокаТЧ.ок_НаличиеДЗ ИЛИ ТекущийЗнРДС.ЗнРДС.ок_НаличиеДЗ;
			
			Если СтрокаТЧ.ок_НаличиеДЗ Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьТекстГиперссылок(ДанныеДляЗаполненияЗаявок) Экспорт
	
	Для каждого СтрокаТЧ Из ДанныеДляЗаполненияЗаявок Цикл
		
		СтрокаТЧ.ГиперссылкаСформированныеЗнРДС = "";
		
		Для каждого СтрокаТЗ_ЗнРДС Из СтрокаТЧ.СформированныеЗнРДС Цикл
		
			СтрокаТЧ.ГиперссылкаСформированныеЗнРДС = СтрокаТЧ.ГиперссылкаСформированныеЗнРДС + ?(СтрокаТЧ.ГиперссылкаСформированныеЗнРДС = "", "", ", ") + "№" + СтрокаТЗ_ЗнРДС.ЗнРДС.Номер + " от " + Формат(СтрокаТЗ_ЗнРДС.ЗнРДС.Дата, "ДФ=dd.MM.yyyy");
		
		КонецЦикла; 
		
		Если СтрокаТЧ.ГиперссылкаСформированныеЗнРДС = "" Тогда
		
			СтрокаТЧ.ГиперссылкаСформированныеЗнРДС = "Нет сформированных ЗнРДС";
		
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьНастройкиКД(КомпоновщикНастроек) Экспорт
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-18 (#3758)
Процедура ФормированиеЗнРДСНеБК_ОбработатьДанныеДляЗаполненияЗаявок(ДанныеДляЗаполненияЗаявок, РеестрОшибок, СтруктураПараметровЗаполнения, пОшибки, КоличествоДокументовВТранзакции = 1) Экспорт
	
	МассивСозданныхДокументов 		= Новый Массив;
	СозданоДокументовВТранзакции 	= 0;
	ВалютаРегламентированногоУчета	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Копия_ДанныеДляЗаполненияЗаявок = СкопироватьДанные(ДанныеДляЗаполненияЗаявок, Истина);
	Копия_РеестрОшибок				= СкопироватьДанные(РеестрОшибок, Ложь);
	
	СтруктураОтборов = Новый Структура(); 
	СтруктураОтборов.Вставить("Выбран", Истина);
	
	ТЗ_ДокументРасчетов = ДанныеДляЗаполненияЗаявок.Выгрузить(СтруктураОтборов, "ДокументРасчетов");
	ТЗ_ДокументРасчетов.Свернуть("ДокументРасчетов");
	
	РаспределенныеДанныеПоСтатьямБДДС = ФормированиеЗнРДСНеБК_ПолучитьРаспределенныеДанныеПоСтатьямБДДС(ТЗ_ДокументРасчетов);
	
	ДокументыРасчетовДляРаспределения = РаспределенныеДанныеПоСтатьямБДДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ДокументыРасчетовДляРаспределения.Следующий() Цикл
		
		СтруктураОтборов = Новый Структура(); 
		СтруктураОтборов.Вставить("Выбран", Истина);
		СтруктураОтборов.Вставить("ДокументРасчетов", ДокументыРасчетовДляРаспределения.ДокументРасчетов);
	
		НайденныеСтроки = ДанныеДляЗаполненияЗаявок.НайтиСтроки(СтруктураОтборов);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные по документу расчетов """ + ДокументыРасчетовДляРаспределения.ДокументРасчетов + """ не обработаны!"); 
			Продолжить;
		
		КонецЕсли; 
		
		Если ДокументыРасчетовДляРаспределения.СуммаПоДокументу = NULL Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные по документу расчетов """ + ДокументыРасчетовДляРаспределения.ДокументРасчетов + """ не обработаны!"); 
			Продолжить;
		
		КонецЕсли; 
		
		ТекущиеДанныеДляЗаполненияЗаявок = НайденныеСтроки[0];
		
		СуммаОстаток = ТекущиеДанныеДляЗаполненияЗаявок.СуммаКОплате;
		
		СтруктураПоследнейЗаписи = Новый Структура();
		СтруктураПоследнейЗаписи.Вставить("КоличествоСтатейОборотовБДДС", 	0);
		СтруктураПоследнейЗаписи.Вставить("ИндСтатейОборотовБДДС", 			0);
		СтруктураПоследнейЗаписи.Вставить("Сумма", 							0);
		
		Если НЕ ТранзакцияАктивна() Тогда
		
			Копия_ДанныеДляЗаполненияЗаявок = СкопироватьДанные(ДанныеДляЗаполненияЗаявок, Истина);
			Копия_РеестрОшибок				= СкопироватьДанные(РеестрОшибок, Ложь);
		
			НачатьТранзакцию();
			
			СозданоДокументовВТранзакции = 0;
			МассивСозданныхДокументов.Очистить();
						
		КонецЕсли;
		
		//Получить по документу расчетов разбивку по статьям БДДС
		ВыборкаСтатьиОборотовБДДС = ДокументыРасчетовДляРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СтруктураПоследнейЗаписи.КоличествоСтатейОборотовБДДС = ВыборкаСтатьиОборотовБДДС.Количество();
		
		Пока ВыборкаСтатьиОборотовБДДС.Следующий() Цикл
				
			СтруктураПоследнейЗаписи.ИндСтатейОборотовБДДС = СтруктураПоследнейЗаписи.ИндСтатейОборотовБДДС + 1;
			
			Если НЕ ТранзакцияАктивна() Тогда
		
				Копия_ДанныеДляЗаполненияЗаявок = СкопироватьДанные(ДанныеДляЗаполненияЗаявок, Истина);
				Копия_РеестрОшибок				= СкопироватьДанные(РеестрОшибок, Ложь);
			
				НачатьТранзакцию();
				
				СозданоДокументовВТранзакции = 0;
				МассивСозданныхДокументов.Очистить();
							
			КонецЕсли; 
			
			ДокЗаявка 			= Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
			РучноеЗаполнение 	= Ложь;
			ДокЗаявка.СтавкаНДС = ПолучитьСтавкуНДСИзДокумента(ТекущиеДанныеДляЗаполненияЗаявок.ДокументРасчетов);
			
			Если НЕ ЗначениеЗаполнено(ДокЗаявка.СтавкаНДС) Тогда
				РучноеЗаполнение = Истина;
			КонецЕсли; 
			
			ВыборкаДетальныеЗаписи = ВыборкаСтатьиОборотовБДДС.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				СуммаОплаты 	  = Окр(ТекущиеДанныеДляЗаполненияЗаявок.СуммаКОплате * ВыборкаДетальныеЗаписи.КоэффициентСуммыОплаты, 2);
				
				НоваяСтр 					  = ДокЗаявка.Распределение.Добавить();
				НоваяСтр.СтатьяОборотов 	  = ВыборкаДетальныеЗаписи.СтатьяОборотовБДДС;		
				НоваяСтр.Ок_СтатьяОборотовБДР = ВыборкаДетальныеЗаписи.СтатьяОборотовБДР;
				НоваяСтр.ДоговорКонтрагента   = ТекущиеДанныеДляЗаполненияЗаявок.ДоговорКонтрагента;
				НоваяСтр.СтавкаНДС 			  = ДокЗаявка.СтавкаНДС;
				НоваяСтр.Сумма 				  = СуммаОплаты;
				
				РассчитатьСуммуНДС(НоваяСтр);
				
				ДокЗаявка.УстановитьИДСтроки(НоваяСтр);
		
			КонецЦикла;
			
			Итого_Сумма 		= ДокЗаявка.Распределение.Итог("Сумма");
			Итого_СуммаБезНДС 	= ДокЗаявка.Распределение.Итог("СуммаБезНДС");
			Итого_НДС 			= ДокЗаявка.Распределение.Итог("НДС");
			
			ДокЗаявка.СуммаВключаетНДС 	   		= Истина;
			ДокЗаявка.Сумма 					= Итого_Сумма;
			
			СтруктураПоследнейЗаписи.Сумма = СтруктураПоследнейЗаписи.Сумма + Итого_Сумма;
			
			//Выравнивание распределения
			Если СтруктураПоследнейЗаписи.КоличествоСтатейОборотовБДДС = СтруктураПоследнейЗаписи.ИндСтатейОборотовБДДС
				И СтруктураПоследнейЗаписи.Сумма <> СуммаОстаток Тогда
				
				СтрокаДляКорректировкиРаспределения = ДокЗаявка.Распределение[ДокЗаявка.Распределение.Количество() - 1];
				СтрокаДляКорректировкиРаспределения.Сумма = СтрокаДляКорректировкиРаспределения.Сумма + (СуммаОстаток - СтруктураПоследнейЗаписи.Сумма);
				ДокЗаявка.Сумма = ДокЗаявка.Сумма + (СуммаОстаток - СтруктураПоследнейЗаписи.Сумма);
				
				РассчитатьСуммуНДС(СтрокаДляКорректировкиРаспределения);
				
			КонецЕсли; 
			
			РассчитатьСуммуНДС(ДокЗаявка);
			
			ДокЗаявка.СуммаВзаиморасчеты 		= ДокЗаявка.Сумма;
			//ДокЗаявка.СуммаРегл 				= ДокЗаявка.Сумма; 
			ДокЗаявка.СуммаУпр 					= ДокЗаявка.Сумма; 
			ДокЗаявка.СуммаДокумента 			= ДокЗаявка.Сумма; 
			ДокЗаявка.НДСВзаиморасчеты 			= ДокЗаявка.НДС;
			ДокЗаявка.НДСУпр 					= ДокЗаявка.НДС;
			ДокЗаявка.НДСРегл 					= ДокЗаявка.НДС;
			
			
			
			ВидОперации 	= ЗаполнитьСписокПрофилейРазноскиНаСервере(ТекущиеДанныеДляЗаполненияЗаявок.СчетБУ, "ВидОперацииЗаявкаНаРасход");
			ПрофильРазноски = ЗаполнитьСписокПрофилейРазноскиНаСервере(ТекущиеДанныеДляЗаполненияЗаявок.СчетБУ, "Код");			
			СтруктураВалюты = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанныеДляЗаполненияЗаявок.ВалютаВзаиморасчетов, СтруктураПараметровЗаполнения.ДатаРасхода);
			
			ДокЗаявка.ДокументОснование    			= ТекущиеДанныеДляЗаполненияЗаявок.ДокументРасчетов;
			ДокЗаявка.Дата 				   			= ТекущаяДата();
			ДокЗаявка.Сценарий			   			= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ОперативныйСценарийПланирования", Неопределено);
			ДокЗаявка.ДатаРасхода 		   			= СтруктураПараметровЗаполнения.ДатаРасхода;			
			ДокЗаявка.ТипПлатежа 		   			= Справочники.бит_ТипыПлатежей.НайтиПоНаименованию("Оплата");		
			ДокЗаявка.Контрагент 		   			= ТекущиеДанныеДляЗаполненияЗаявок.Контрагент;		
			ДокЗаявка.ДоговорКонтрагента   			= ТекущиеДанныеДляЗаполненияЗаявок.ДоговорКонтрагента;		
			ДокЗаявка.СБ_ПрофильРазноски   			= ?(ПрофильРазноски = Неопределено, "", ПрофильРазноски);
			ДокЗаявка.Организация		   			= ТекущиеДанныеДляЗаполненияЗаявок.Организация;
			ДокЗаявка.ВидОперации 		   			= ?(ВидОперации = Неопределено, ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику"), ВидОперации);
			ДокЗаявка.ФормаОплаты 		   			= ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные");
			ДокЗаявка.ТипЗаявки 		   			= ПредопределенноеЗначение("Перечисление.бит_ТипыЗаявокНаРасходованиеСредств.Плановая");
			ДокЗаявка.Важность 			   			= ?(ТекущиеДанныеДляЗаполненияЗаявок.ВысокийПриоритетДляОплаты, ПредопределенноеЗначение("Перечисление.бит_Важность.Высокая"), ПредопределенноеЗначение("Перечисление.бит_Важность.Средняя"));
			ДокЗаявка.ВалютаДокумента	   			= ТекущиеДанныеДляЗаполненияЗаявок.ВалютаВзаиморасчетов;
			ДокЗаявка.КурсДокумента		   			= СтруктураВалюты.Курс;
			ДокЗаявка.КратностьДокумента   			= СтруктураВалюты.Кратность;
			
			ДокЗаявка.Аналитика_1 		   			= ДокЗаявка.Распределение[0].Аналитика_1;
			ДокЗаявка.Аналитика_2 					= ДокЗаявка.Распределение[0].Аналитика_2;
			ДокЗаявка.ЦФО 				   			= ДокЗаявка.Распределение[0].ЦФО;				
			ДокЗаявка.СтатьяОборотов	   			= ДокЗаявка.Распределение[0].СтатьяОборотов;
			ДокЗаявка.Проект			   			= ДокЗаявка.Распределение[0].Проект;
			ДокЗаявка.Ок_СтатьяОборотовБДР 			= ДокЗаявка.Распределение[0].Ок_СтатьяОборотовБДР;
			ДокЗаявка.Ок_ПересчетКурса     			= ТекущиеДанныеДляЗаполненияЗаявок.ДоговорКонтрагента.Ок_ПересчетКурса;
			ДокЗаявка.ЭтоКазначейство				= Ложь;
			ДокЗаявка.НеВключатьВПлатежныйКалендарь	= Истина;
			ДокЗаявка.ок_СпособСоздания				= 10;
			ДокЗаявка.ок_СозданОбработкой			= Истина;
			
			ДокЗаявка.СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДокЗаявка.Сумма
																			 , ДокЗаявка.ВалютаДокумента
																			 , ВалютаРегламентированногоУчета
																			 , СтруктураВалюты.Курс
																			 , 1
																			 , СтруктураВалюты.Кратность
																			 , 1);
																			 
			ДокЗаявка.НДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДокЗаявка.НДС
																			 , ДокЗаявка.ВалютаДокумента
																			 , ВалютаРегламентированногоУчета
																			 , СтруктураВалюты.Курс
																			 , 1
																			 , СтруктураВалюты.Кратность
																			 , 1);
																			 
			ДокЗаявка.ок_НаличиеДЗ = ?(ТекущиеДанныеДляЗаполненияЗаявок.ДоступноеСальдо < ДокЗаявка.СуммаРегл, Истина, Ложь);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ДокументОснование", 	ДокЗаявка.ДокументОснование);
			СтруктураПараметров.Вставить("ДоговорКонтрагента", 	ДокЗаявка.ДоговорКонтрагента);
			СтруктураПараметров.Вставить("СтатьяОборотов", 		ДокЗаявка.СтатьяОборотов);
			СтруктураПараметров.Вставить("НДС", 				ДокЗаявка.НДС);
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-08 (#4337)
			СтруктураПараметров.Вставить("ДокументОбъект", ДокЗаявка);
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-08 (#4337)
			
			ДокЗаявка.НазначениеПлатежа 			= Документы.бит_ЗаявкаНаРасходованиеСредств.СформироватьНазначениеПлатежа(СтруктураПараметров);
			ДокЗаявка.НазначениеПлатежаУпр			= ДокЗаявка.НазначениеПлатежа;
			ДокЗаявка.Комментарий 					= "Создано автоматически с помощью обработки";
			
			ДокЗаявка.Исполнитель					= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			ДокЗаявка.Ответственный					= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			
			СтатьяОборотов = ДокЗаявка.СтатьяОборотов;
			СтавкаНДС = ДокЗаявка.СтавкаНДС;
			
			Попытка
				
				ДокЗаявка.ДополнительныеСвойства.Вставить("СозданоОбработкой_ФормированиеЗнРДС", Истина);
				ДокЗаявка.ДополнительныеСвойства.Вставить("ВыводитьСообщениеОбОшибкеЧерезВызватьИсключение", Истина);
				Если ЗначениеЗаполнено(ВыборкаСтатьиОборотовБДДС.СтатьяОборотовБДДС) Тогда
					
					ДокЗаявка.Записать(РежимЗаписиДокумента.Проведение);
					
				Иначе
					
					ДокЗаявка.ДополнительныеСвойства.Вставить("ДокументЗагруженСОшибкой");
					ДокЗаявка.Комментарий = ДокЗаявка.Комментарий + Символы.ПС + "Не удалось определить статью БДДС.";
					ДокЗаявка.Записать(РежимЗаписиДокумента.Запись);
					
					МенеджерЗаписи = РегистрыСведений.бит_СтатусыОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект                     = ДокЗаявка.Ссылка;
					МенеджерЗаписи.ДатаИзмененияСтатуса       = ТекущаяДата();
					МенеджерЗаписи.ВидСтатуса                 = Перечисления.бит_ВидыСтатусовОбъектов.Статус;
					МенеджерЗаписи.Пользователь               = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
					МенеджерЗаписи.Статус                     = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатусЗаявки_Ошибка", Неопределено);
					МенеджерЗаписи.Записать();

				КонецЕсли; 
				
				//Добавить документ в ТЧ и произвести расчеты по сумма, добавить сумму ЗнРДС и минусовать доступное сальдо
				СтруктураПараметровДляОбновления = Новый Структура();
				СтруктураПараметровДляОбновления.Вставить("Организация", 		ТекущиеДанныеДляЗаполненияЗаявок.Организация);
				СтруктураПараметровДляОбновления.Вставить("Контрагент", 		ТекущиеДанныеДляЗаполненияЗаявок.Контрагент);
				СтруктураПараметровДляОбновления.Вставить("ДоговорКонтрагента", ТекущиеДанныеДляЗаполненияЗаявок.ДоговорКонтрагента);
				СтруктураПараметровДляОбновления.Вставить("ДокументРасчетов", 	ТекущиеДанныеДляЗаполненияЗаявок.ДокументРасчетов);
				СтруктураПараметровДляОбновления.Вставить("СчетБУ", 			ТекущиеДанныеДляЗаполненияЗаявок.СчетБУ);
				СтруктураПараметровДляОбновления.Вставить("НомерСтроки", 		ТекущиеДанныеДляЗаполненияЗаявок.НомерСтроки);
				СтруктураПараметровДляОбновления.Вставить("ЗнРДС", 				ДокЗаявка.Ссылка);
				СтруктураПараметровДляОбновления.Вставить("СуммаДокумента", 	ДокЗаявка.СуммаРегл);
				
				ОбновитьТаблицуДанныхДляЗаполненияЗаявок(ДанныеДляЗаполненияЗаявок, СтруктураПараметровДляОбновления);
				
				СозданоДокументовВТранзакции = СозданоДокументовВТранзакции + 1;
				МассивСозданныхДокументов.Добавить(ТекущиеДанныеДляЗаполненияЗаявок.ДокументРасчетов);
				
				Если СозданоДокументовВТранзакции >= КоличествоДокументовВТранзакции
					И ТранзакцияАктивна() Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
			Исключение
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли; 
				
				ИнфоОшибка = ИнформацияОбОшибке();
				ТекстОшибки = "";
				Если ИнфоОшибка.Причина <> Неопределено Тогда
					Если ИнфоОшибка.Причина.Причина <> Неопределено Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС + ИнфоОшибка.Причина.Причина.Описание;
					Иначе
						ТекстОшибки = ТекстОшибки + Символы.ПС + ИнфоОшибка.Причина.Описание;
					КонецЕсли; 
				Иначе
					ТекстОшибки = ИнфоОшибка.Описание;
				КонецЕсли; 
				
				пТекстОшибки = НСтр("ru = 'Строка(%4): Не удалось создать документ по статье оборотов %1 и ставке НДС %2 по причине: %3'");
				пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, СтатьяОборотов,
																									 СтавкаНДС,
																									 ТекстОшибки,
																									 ТекущиеДанныеДляЗаполненияЗаявок.НомерСтроки);
				пОшибки = пОшибки + ?(ПустаяСтрока(пОшибки), "", Символы.ПС) + пТекстОшибки;																												 
				
				ТекстОтменыСозданныхЗаявок = "";
				
				Если ТекстОтменыСозданныхЗаявок <> "" Тогда
				
					пОшибки = пОшибки + Символы.ПС + "Отменено создание ЗнРДС по документам расчетов:" + ТекстОтменыСозданныхЗаявок;
				
				КонецЕсли; 
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
	ОбновитьТекстГиперссылок(ДанныеДляЗаполненияЗаявок);
	
КонецПроцедуры

Функция ФормированиеЗнРДСНеБК_ПолучитьРаспределенныеДанныеПоСтатьямБДДС(ТЗ_ДокументРасчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ_ДокументРасчетов.ДокументРасчетов КАК ДокументРасчетов
		|ПОМЕСТИТЬ ВТ_ДокументыРасчетов
		|ИЗ
		|	&ТЗ_ДокументРасчетов КАК ТЗ_ДокументРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка КАК ДокументРасчетов,
		|	ПоступлениеТоваровУслугОборудование.ок_СтатьяОборотов КАК СтатьяОборотовБДР,
		|	ПоступлениеТоваровУслугОборудование.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТ_СтатьиБДРПоДокументуРасчетов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
		|ГДЕ
		|	ПоступлениеТоваровУслугОборудование.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ДокументыРасчетов.ДокументРасчетов
		|			ИЗ
		|				ВТ_ДокументыРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.ок_СтатьяОборотов,
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Сумма
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК ПоступлениеТоваровУслугОбъектыСтроительства
		|ГДЕ
		|	ПоступлениеТоваровУслугОбъектыСтроительства.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ДокументыРасчетов.ДокументРасчетов
		|			ИЗ
		|				ВТ_ДокументыРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка,
		|	ПоступлениеТоваровУслугТовары.ок_СтатьяОборотов,
		|	ПоступлениеТоваровУслугТовары.Сумма
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ДокументыРасчетов.ДокументРасчетов
		|			ИЗ
		|				ВТ_ДокументыРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Ссылка,
		|	ПоступлениеТоваровУслугУслуги.ок_СтатьяОборотов,
		|	ПоступлениеТоваровУслугУслуги.Сумма
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ДокументыРасчетов.ДокументРасчетов
		|			ИЗ
		|				ВТ_ДокументыРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка,
		|	ПоступлениеТоваровУслугАгентскиеУслуги.ок_СтатьяОборотов,
		|	ПоступлениеТоваровУслугАгентскиеУслуги.Сумма
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.АгентскиеУслуги КАК ПоступлениеТоваровУслугАгентскиеУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугАгентскиеУслуги.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ДокументыРасчетов.ДокументРасчетов
		|			ИЗ
		|				ВТ_ДокументыРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка,
		|	ПоступлениеНМАНематериальныеАктивы.ок_СтатьяОборотов,
		|	ПоступлениеНМАНематериальныеАктивы.Сумма
		|ИЗ
		|	Документ.ПоступлениеНМА.НематериальныеАктивы КАК ПоступлениеНМАНематериальныеАктивы
		|ГДЕ
		|	ПоступлениеНМАНематериальныеАктивы.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ДокументыРасчетов.ДокументРасчетов
		|			ИЗ
		|				ВТ_ДокументыРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеДопРасходовТовары.Ссылка,
		|	ПоступлениеДопРасходовТовары.ок_СтатьяОборотов,
		|	ПоступлениеДопРасходовТовары.Сумма
		|ИЗ
		|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
		|ГДЕ
		|	ПоступлениеДопРасходовТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ДокументыРасчетов.ДокументРасчетов
		|			ИЗ
		|				ВТ_ДокументыРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеДенежныхДокументовДенежныеДокументы.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка),
		|	ПоступлениеДенежныхДокументовДенежныеДокументы.Сумма
		|ИЗ
		|	Документ.ПоступлениеДенежныхДокументов.ДенежныеДокументы КАК ПоступлениеДенежныхДокументовДенежныеДокументы
		|ГДЕ
		|	ПоступлениеДенежныхДокументовДенежныеДокументы.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ДокументыРасчетов.ДокументРасчетов
		|			ИЗ
		|				ВТ_ДокументыРасчетов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументыРасчетов.ДокументРасчетов,
		|	ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка),
		|	1
		|ИЗ
		|	ВТ_ДокументыРасчетов КАК ДокументыРасчетов
		|ГДЕ
		|	НЕ ДокументыРасчетов.ДокументРасчетов ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|	И НЕ ДокументыРасчетов.ДокументРасчетов ССЫЛКА Документ.ПоступлениеНМА
		|	И НЕ ДокументыРасчетов.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДопРасходов
		|	И НЕ ДокументыРасчетов.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДенежныхДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатьиБДРПоДокументуРасчетов.ДокументРасчетов КАК ДокументРасчетов,
		|	СУММА(СтатьиБДРПоДокументуРасчетов.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТ_СуммаПоДокументуРасчетов
		|ИЗ
		|	ВТ_СтатьиБДРПоДокументуРасчетов КАК СтатьиБДРПоДокументуРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатьиБДРПоДокументуРасчетов.ДокументРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиБДРПоДокументуРасчетов.ДокументРасчетов КАК ДокументРасчетов,
		|	СтатьиБДРПоДокументуРасчетов.СтатьяОборотовБДР КАК СтатьяОборотовБДР,
		|	ВЫБОР
		|		КОГДА СтатьиБДРПоДокументуРасчетов.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДенежныхДокументов
		|			ТОГДА &СтатьяБДДСДляПоступленияДенежныхДокументов
		|		ИНАЧЕ ЕСТЬNULL(бит_СоответствияАналитик.ПраваяАналитика_1, ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))
		|	КОНЕЦ КАК СтатьяОборотовБДДС,
		|	СУММА(СтатьиБДРПоДокументуРасчетов.Сумма) КАК Сумма,
		|	МАКСИМУМ(СуммаПоДокументуРасчетов.Сумма) КАК СуммаПоДокументу,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СуммаПоДокументуРасчетов.Сумма) <> 0
		|			ТОГДА СУММА(СтатьиБДРПоДокументуРасчетов.Сумма) / МАКСИМУМ(СуммаПоДокументуРасчетов.Сумма)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоэффициентСуммыОплаты
		|ПОМЕСТИТЬ ВТ_СтатьиБДДСПоДокументуРасчетов
		|ИЗ
		|	ВТ_СтатьиБДРПоДокументуРасчетов КАК СтатьиБДРПоДокументуРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
		|		ПО (бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
		|			И СтатьиБДРПоДокументуРасчетов.СтатьяОборотовБДР = бит_СоответствияАналитик.ЛеваяАналитика_1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаПоДокументуРасчетов КАК СуммаПоДокументуРасчетов
		|		ПО СтатьиБДРПоДокументуРасчетов.ДокументРасчетов = СуммаПоДокументуРасчетов.ДокументРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатьиБДРПоДокументуРасчетов.ДокументРасчетов,
		|	СтатьиБДРПоДокументуРасчетов.СтатьяОборотовБДР,
		|	ВЫБОР
		|		КОГДА СтатьиБДРПоДокументуРасчетов.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДенежныхДокументов
		|			ТОГДА &СтатьяБДДСДляПоступленияДенежныхДокументов
		|		ИНАЧЕ ЕСТЬNULL(бит_СоответствияАналитик.ПраваяАналитика_1, ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыРасчетов.ДокументРасчетов КАК ДокументРасчетов,
		|	СтатьиБДДСПоДокументуРасчетов.СтатьяОборотовБДДС КАК СтатьяОборотовБДДС,
		|	СтатьиБДДСПоДокументуРасчетов.СтатьяОборотовБДР КАК СтатьяОборотовБДР,
		|	СтатьиБДДСПоДокументуРасчетов.Сумма КАК Сумма,
		|	СтатьиБДДСПоДокументуРасчетов.СуммаПоДокументу КАК СуммаПоДокументу,
		|	СтатьиБДДСПоДокументуРасчетов.КоэффициентСуммыОплаты КАК КоэффициентСуммыОплаты
		|ИЗ
		|	ВТ_ДокументыРасчетов КАК ДокументыРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьиБДДСПоДокументуРасчетов КАК СтатьиБДДСПоДокументуРасчетов
		|		ПО ДокументыРасчетов.ДокументРасчетов = СтатьиБДДСПоДокументуРасчетов.ДокументРасчетов
		|ИТОГИ
		|	МАКСИМУМ(СуммаПоДокументу),
		|	СУММА(КоэффициентСуммыОплаты)
		|ПО
		|	ДокументРасчетов,
		|	СтатьяОборотовБДДС";
	
	Запрос.УстановитьПараметр("ТЗ_ДокументРасчетов", 		ТЗ_ДокументРасчетов);
	Запрос.УстановитьПараметр("СтатьяБДДСДляПоступленияДенежныхДокументов", СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_ФормированиеЗнРДС_СтатьяБДДСДляПоступленияДенежныхДокументов", Неопределено));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-18 (#3758)