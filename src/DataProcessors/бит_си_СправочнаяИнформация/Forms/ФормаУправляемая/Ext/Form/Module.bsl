////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

#Область ПеременныеМодуля



&НаКлиенте
Перем ОбработчикиЗакладок;		// Структура - Хранит ссылки на формы обработчиков закладок.

// Размер шрифта HTML документов.
&НаКлиенте
Перем СоответствиеРазмерШрифта;	// Соответствие - Хранит соответствие закладок
								// и текущего размера шрифта для каждой из них
&НаКлиенте
Перем СоответствиеИстория;		// Соответствие - Хранит историю перемещения по страницам
								// для каждой закладки
&НаКлиенте
Перем СостояниеФормы;			// Структура - Хранит текущее состояние окна справочной
								// информации, используется для проверки изменения
								// состояния и необходимости обновления содержимого закладок.
								

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения



&НаСервере
// Функция получает список общих настроек.
// 
// Параметры: 
// Возвращаемое значение:
// 	Возврат СтруктураОтображаемыхЗначений	 -	Структура         	 Структура общих настроек.
// 
Функция ПолучитьОписаниеНастроек()
	УстановитьПривилегированныйРежим(Истина);
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("СправочнаяИнформация",
														 "СправочнаяИнформация",,
														 СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор));
	УстановитьПривилегированныйРежим(Ложь);
	Возврат СтруктураНастроек;
КонецФункции // ПолучитьОписаниеНастроек()

&НаСервере
// Функция получает список общих настроек.
// 
// Параметры: 
// Возвращаемое значение:
// 	Возврат СтруктураОтображаемыхЗначений	 -	Структура         	 Структура общих настроек.
// 
Функция ПолучитьЗначениеНастройки(ИмяНастройки, СтруктураНастроек = Неопределено)
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = ПолучитьОписаниеНастроек();
	КонецЕсли;
	Если НЕ ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗначениеНастройки = Неопределено;
	Если НЕ СтруктураНастроек.Свойство(ИмяНастройки, ЗначениеНастройки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
КонецФункции // ПолучитьОписаниеНастроек()

&НаСервере
// Процедура устанавливает описание настроек.
// 
// Параметры: 
// 	Настройка		   	 -	Строка                          Имя настройки.
// 	Объект			   	 -	Строка                          Имя объекта.
// 	СтруктураНастроек 	 -	Структура                       Структура сохраняемых настроек.
// 
Процедура УстановитьОписаниеНастроек(СтруктураНастроек)
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеОбщихНастроек.Сохранить("СправочнаяИнформация",
	             					 "СправочнаяИнформация", 
									 СтруктураНастроек,
						             ,
						             СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор));
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // УстановитьОписаниеНастроек()

&НаСервере
// Помещает указанную картинку из библиотеки во временное хранилище и возвращает адрес.
// 
// Параметры: 
// 	ИмяКартинки		   	 -	Строка                          Имя картинки в библиотеке.
// 
// Возвращаемое значение:
// 	Возврат...			 -	Строка				         	Адрес во временном хранилище.
Функция ПолучитьАдресКартинки(ИмяКартинки)
	Возврат ПоместитьВоВременноеХранилище(БиблиотекаКартинок[ИмяКартинки].ПолучитьДвоичныеДанные(), ЭтаФорма);
КонецФункции // ПолучитьАдресКартинки()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ОТОБРАЖЕНИЕМ.

#Область ПроцедурыИФункцииУправленияОтображением



&НаКлиенте
// Управляет доступностью кнопок изменения размеров шрифта.
// Вызывается при изменении размеров шрифта и переключении закладок
// источников справочной информации.
// 
Процедура ДоступностьКнопокРазмерШрифта()
	ТекСтраница = Элементы.ПанельРазделов.ТекущаяСтраница;
	

#КонецОбласти

	#Если ВебКлиент Тогда
	Элементы.ФормаУменьшитьШрифт.Видимость = Ложь;
	Элементы.ФормаУвеличитьШрифт.Видимость = Ложь;
	Возврат;
	#Иначе
		
	Если ТекСтраница = Неопределено Тогда
		Элементы.ФормаУменьшитьШрифт.Доступность = Ложь;
		Элементы.ФормаУвеличитьШрифт.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	// Для закладок поиска и "Нет Источников" кнопки размера шрифта не доступны.
	Если ТекСтраница.Имя = "Поиск"
	 ИЛИ ТекСтраница.Имя = "НетИсточников" Тогда
		Элементы.ФормаУменьшитьШрифт.Доступность = Ложь;
		Элементы.ФормаУвеличитьШрифт.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	ТекЗакладка = Закладки[ТекСтраница.Имя];
	ТекОбработчик = ОбработчикиЗакладок[ТекСтраница.Имя];
	
	// Доступность и ограничение размеров по умолчанию.
	ДоступностьДляИсточника = Истина;
	ОграничениеМакс = 4;
	ОграничениеМин = -2;
	
	// Проверяем доступность кнопок размеров шрифта для текущего источника.
	Попытка
		ДоступностьДляИсточника = ТекОбработчик.ДоступностьКнопокРазмерШрифта(ОграничениеМакс,
																			  ОграничениеМин);
	Исключение
	КонецПопытки;
	Если НЕ ДоступностьДляИсточника Тогда 
		Элементы.ФормаУменьшитьШрифт.Доступность = Ложь;
		Элементы.ФормаУвеличитьШрифт.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	РазмерШрифта = СоответствиеРазмерШрифта.Получить(ТекЗакладка.Источник);
	РазмерШрифта = ?(ТипЗнч(РазмерШрифта) = Тип("Число"), РазмерШрифта, 0);
	Элементы.ФормаУменьшитьШрифт.Доступность = (РазмерШрифта > ОграничениеМин);
	Элементы.ФормаУвеличитьШрифт.Доступность = (РазмерШрифта < ОграничениеМакс);
	#КонецЕсли
КонецПроцедуры // ДоступностьКнопокРазмерШрифта()

&НаКлиенте
// Получает структуру размера шрифта из строки вида <Размер><Единица измерения размера>.
// 
// Параметры 
// 	РазмерСтрокой      	 -	Строка                 	 Строка размера вида <Размер><Единица измерения размера>.          
// Возвращаемое значение:
// 	Возврат ...        	 -	Структура              	 Размер шрифта.                                                    
// 		Поля:
// 			Размер		 -	Число					 Размер.
// 			Размерность	 -	Строка					 Единица измерения размера.
// 
Функция ПолучитьРазмерШрифта(РазмерСтрокой)
	ЧисловаяЧасть     = "";
	РазмерностьШрифта = "";
	Для а = 1 По СтрДлина(РазмерСтрокой) Цикл
		
		Символ     = Сред(РазмерСтрокой, а, 1);
		КодСимвола = КодСимвола(Символ);
		Если (КодСимвола >= 48 И КодСимвола <= 57) ИЛИ КодСимвола = 46 Тогда
			ЧисловаяЧасть = ЧисловаяЧасть + Символ;
		Иначе
			РазмерностьШрифта = РазмерностьШрифта + Символ;
		КонецЕсли; 
		
	КонецЦикла;
	Возврат (Новый Структура("Размер, Размерность",
							 ?(ЧисловаяЧасть = "", 0, Число(ЧисловаяЧасть)),
							 ?(РазмерностьШрифта = "", "pt", РазмерностьШрифта)));
КонецФункции // ПолучитьРазмерШрифта()

&НаКлиенте
// Возвращает шаг изменения размера шрифта для указанной единицы.
// Может использовать переданное соответствие единиц и размеров
// или получает такое соответствие из обработки текущего источника
// Результат по умолчанию 2.
// 
// Параметры 
// 	Единица            	 -	Строка                 	 Единица для которой необходимо получить шаг изменения размера.    
// 	РазмерыИЕдиницы    	 -	Соответствие           	 Соответствие единиц измерения и шага изменения размера.           
// Возвращаемое значение:
// 	Возврат ...        	 -	Число                  	 Значение шага изменения размера шрифта; значение по умолчанию 2.  
// 
Функция ШагИзмененияРазмеровШрифта(Единица = "", РазмерыИЕдиницы = Неопределено)
	ТекСтраница = Элементы.ПанельРазделов.ТекущаяСтраница;
	ТекОбработчик = ОбработчикиЗакладок[ТекСтраница.Имя];
	Если НЕ ТипЗнч(РазмерыИЕдиницы) = Тип("Соответствие") Тогда
		// Получаем соответствие единиц и размеров из обработки текущего источника.
		Попытка
			РазмерыИЕдиницы = ТекОбработчик.ПолучитьСтруктуруРазмеровИЕдиниц();
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если ВРег(Единица) = "FONT" Тогда
		Возврат ?(РазмерыИЕдиницы[Единица] = Неопределено, 1, РазмерыИЕдиницы[Единица]);
	ИначеЕсли ТипЗнч(РазмерыИЕдиницы) = Тип("Соответствие") Тогда
		Возврат ?(РазмерыИЕдиницы[Единица] = Неопределено,
				  ?(РазмерыИЕдиницы["ПоУмолчанию"] = Неопределено, 2, РазмерыИЕдиницы["ПоУмолчанию"]),
				  РазмерыИЕдиницы[Единица]);
	КонецЕсли;
	Возврат 2;
КонецФункции // ШагИзмененияРазмеровШрифта()

&НаКлиенте
// Изменяет размер шрифта элемента HTML-документа и его дочерних элементо.
// 
// Параметры 
// 	Элемент          	 -	COMОбъект              	 Элемент, для которого выполняется изменение размера шрифта.
// 	Изменение          	 -	Число                  	 На сколько шагов нужно изменить размер шрифта.
// 	РазмерыИЕдиницы    	 -	Соответствие           	 Соответствие единиц измерения и шага изменения размера.           
// 
Процедура УстановитьШрифтДочернихЭлементов(Элемент, Изменение, РазмерыИЕдиницы)
	КоличествоЭлементов = Элемент.childNodes.length;
	Для й = 0 По КоличествоЭлементов - 1 Цикл
		ТекЭлемент = Элемент.childNodes.item(й);
		Если НЕ ТекЭлемент.nodeType = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьШрифтДочернихЭлементов(ТекЭлемент, Изменение, РазмерыИЕдиницы);
		
		ЭтоТэгШрифта = (ВРег(ТекЭлемент.tagName) = "FONT");
		Попытка
			ТекРазмер = ПолучитьРазмерШрифта(?(ЭтоТэгШрифта, ТекЭлемент.Size, ТекЭлемент.style.fontSize));
		Исключение
			Продолжить;
		КонецПопытки;
		Если ТекРазмер.Размер = 0 Тогда
			Продолжить;
		КонецЕсли;
		ВремИзменение = Изменение *
						ШагИзмененияРазмеровШрифта(?(ЭтоТэгШрифта, "FONT", ТекРазмер.Размерность),
												   РазмерыИЕдиницы);
		Если ТекРазмер.Размер + ВремИзменение < 1 Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоТэгШрифта Тогда
			ТекЭлемент.Size = Формат(ТекРазмер.Размер + ВремИзменение,"ЧРД=.");
		Иначе
			ТекЭлемент.style.fontSize = Формат(ТекРазмер.Размер + ВремИзменение,"ЧРД=.") + ТекРазмер.Размерность;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УстановитьШрифтДочернихЭлементов()

&НаКлиенте
// Изменяет размер шрифта HTML-документа на текущей закладке источника.
// 
// Параметры 
// 	Изменение          	 -	Число                  	 Направление изменения 1 - Увеличение; -1 - Уменьшение; 0 - не    
// 	                   	  	                       	 изменять.                                                         
// 	Открытие           	 -	Булево                 	 Истина - Первое открытие закладки источника, устанавливаем       
// 	                   	  	                       	 сохраненный размер шрифта; Ложь - изменяем размер.                
// 
Процедура ИзменитьРазмерШрифта(Изменение = 0, Открытие = Ложь)
	ТекСтраница = Элементы.ПанельРазделов.ТекущаяСтраница;
	
	Если ТекСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтраница.Имя = "Поиск"
	 ИЛИ ТекСтраница.Имя = "НетИсточников" Тогда
		Возврат;
	КонецЕсли;
	ТекЗакладка = Закладки[ТекСтраница.Имя];
	ТекОбработчик = ОбработчикиЗакладок[ТекСтраница.Имя];
	ТекДокумент = Элементы[ТекСтраница.Имя+"_ПолеHTML"].Документ;
	
	БазовыйРазмер = 0;
	Попытка
		БазовыйРазмер = ТекОбработчик.БазовыйРазмерШрифта();
	Исключение
	КонецПопытки;
	РазмерШрифта = СоответствиеРазмерШрифта.Получить(ТекЗакладка.Источник);
	РазмерШрифта = ?(ТипЗнч(РазмерШрифта) = Тип("Число"), РазмерШрифта, 0) + Изменение;
	
	ПолеРазмера = ТекДокумент.getElementById("tmpFontSize");
	Если НЕ ПолеРазмера = Неопределено Тогда
		Если Число(ПолеРазмера.value) = РазмерШрифта Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПродолжитьОбработку = Истина;
	Попытка
		ТекОбработчик.ИзменитьРазмерШрифта(РазмерШрифта,
										   Изменение,
										   Открытие,
										   ПродолжитьОбработку);
	Исключение
	КонецПопытки;
	
	РазмерыИЕдиницы = Неопределено;
	Если ПродолжитьОбработку И НЕ (БазовыйРазмер = РазмерШрифта И Открытие) Тогда
		УстановитьШрифтДочернихЭлементов(ТекДокумент.body, ?(Открытие, РазмерШрифта, Изменение), РазмерыИЕдиницы);
		
		КоличествоТаблиц = ТекДокумент.styleSheets.length;
		Для й=0 По КоличествоТаблиц - 1 Цикл
			КоличествоПравил = ТекДокумент.styleSheets.item(й).rules.length;
			Для к = 0 По КоличествоПравил - 1 Цикл
				Попытка
					ТекРазмер = ПолучитьРазмерШрифта(ТекДокумент.styleSheets.item(й).rules.item(к).style.fontSize);
				Исключение
					Продолжить;
				КонецПопытки;
				Если ТекРазмер.Размер = 0 Тогда
					Продолжить;
				КонецЕсли;
				ВремИзменение = ?(Открытие, РазмерШрифта, Изменение) *
								ШагИзмененияРазмеровШрифта(ТекРазмер.Размерность, РазмерыИЕдиницы);
				ТекДокумент.styleSheets.item(й).rules.item(к).style.fontSize = Формат(ТекРазмер.Размер + ВремИзменение,"ЧРД=.") +
																			   ТекРазмер.Размерность;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СоответствиеРазмерШрифта.Вставить(ТекЗакладка.Источник, РазмерШрифта);
	
	Если ПолеРазмера = Неопределено Тогда
		ПолеРазмера = ТекДокумент.createElement("input");
		ПолеРазмера.setAttribute("type", "hidden");
		ПолеРазмера.setAttribute("id", "tmpFontSize");
		ПолеРазмера.setAttribute("value", "0");
		ТекДокумент.body.insertBefore(ПолеРазмера, ТекДокумент.body.firstChild);
	КонецЕсли;
	ПолеРазмера.value = РазмерШрифта;
	
	ДоступностьКнопокРазмерШрифта();
	
КонецПроцедуры // ИзменитьРазмерШрифта()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ЗАКЛАДКАМИ.

#Область ПроцедурыИФункцииУправленияЗакладками



&НаСервере
// Добавляет закладку источника в окно справочной информации.
// 
// Параметры 
// 	ИсточникСИ         	 -	СправочникСсылка.бит_си	 Источник справочной информации                                   
// 	                   	  	_Источники.             	                                                                  
// 	ВидимостьЗакладки  	 -	Булево                 	 Истина - Закладка видна после добавления; Ложь - закладка не     
// 	                   	  	                       	 видна; По умолчанию - Истина.                                     
// Возвращаемое значение:
// 	Возврат ...        	 -	СтраницаПанели         	 Добавленная закладка.                                             
// 
Функция ДобавитьЗакладкуИсточника(ИсточникСИ, ВидимостьЗакладки = Истина)
	ТекОбработка = бит_си_ОбщегоНазначения.ПолучитьОбработкуИсточника(ИсточникСИ);
	Если ТекОбработка = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.КлючДанных = ИсточникСИ;
		Сообщение.УстановитьДанные(ИсточникСИ);
		Сообщение.Текст	 = "Не удалось подключить источник справочной информации """ +
						   ИсточникСИ.Наименование +
						   """! Проверьте настройки источника.";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;	
	ЭтоОбработкаИсточника = Ложь;
	Попытка
		ЭтоОбработкаИсточника = ТекОбработка.ЭтоОбработкаИсточникаСИУпр();
	Исключение
	КонецПопытки;
	Если НЕ ЭтоОбработкаИсточника Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерЗакладки = Элементы.ПанельРазделов.ПодчиненныеЭлементы.Количество();
	ИмяЗакладки = "Источник" + СокрЛП(НомерЗакладки);
		
	СтруктураЗакладки = Новый Структура();
	СтруктураЗакладки.Вставить("Источник"				, ИсточникСИ);
	СтруктураЗакладки.Вставить("ЗаголовокИсточника"		, ИсточникСИ.Заголовок);
	ВремПараметрОткрытия = Неопределено;
	Параметры.Свойство("ПараметрОткрытия"				, ВремПараметрОткрытия);
	СтруктураЗакладки.Вставить("ПараметрОткрытия"		, ВремПараметрОткрытия);
	СтруктураЗакладки.Вставить("ВидимостьПоУмолчанию"	, ИсточникСИ.ВидимостьПоУмолчанию);
	СтруктураЗакладки.Вставить("Номер"					, НомерЗакладки);
	СтруктураЗакладки.Вставить("ОбработкаИмя"			, ТекОбработка.Метаданные().ПолноеИмя());
	// СтруктураЗакладки.Вставить("Настройки"				, бит_си_ПолныеПрава.ПолучитьТекущуюНастройкуИсточника(ИсточникСИ));
	СтруктураЗакладки.Вставить("ВозможностьПоиска"		, Ложь);
	Попытка
		СтруктураЗакладки.ВозможностьПоиска = ТекОбработка.ВозможностьПоиска();
	Исключение
	КонецПопытки;
	СтруктураЗакладки.Вставить("МножественныйВыборРазделовПоиска"		, Ложь);
	Попытка
		СтруктураЗакладки.МножественныйВыборРазделовПоиска = ТекОбработка.МножественныйВыборРазделовПоиска();
	Исключение
	КонецПопытки;
	СтруктураЗакладки.Вставить("ЕстьНастройки"			, Ложь);
	Попытка
		СтруктураЗакладки.ЕстьНастройки = ТекОбработка.ЕстьНастройки();
	Исключение
	КонецПопытки;
	СтруктураЗакладки.Вставить("ЕстьНастройкиПоОбъектам", Ложь);
	Попытка
		СтруктураЗакладки.ЕстьНастройкиПоОбъектам = ТекОбработка.ЕстьНастройкиПоОбъектам();
	Исключение
	КонецПопытки;
	СтруктураЗакладки.Вставить("ДобавлятьВИсторию"		, Ложь);
	СтруктураЗакладки.Вставить("История"				, Новый Массив());
	СтруктураЗакладки.Вставить("Позиция"				, -1);
		
	Закладки.Вставить(ИмяЗакладки, СтруктураЗакладки);
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяЗакладки + "_Текст", Новый ОписаниеТипов("Строка")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяЗакладки + "_ТекстРезультатаПоиска", Новый ОписаниеТипов("Строка")));
	ИзменитьРеквизиты(МассивРеквизитов);
	Закладка = Элементы.Вставить(ИмяЗакладки,
								 Тип("ГруппаФормы"),
								 Элементы.ПанельРазделов,
								 Элементы.Поиск);
	Закладка.Вид		= ВидГруппыФормы.Страница;
	Закладка.Заголовок	= ИсточникСИ.Заголовок;
	
	Закладка.Картинка	= БиблиотекаКартинок.бит_ОПрограмме;
		
	ПанельЗакладки = Элементы.Добавить(ИмяЗакладки + "_КоманднаяПанель", Тип("ГруппаФормы"), Закладка);
	ПанельЗакладки.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	ПолеHTML = Элементы.Добавить(ИмяЗакладки + "_ПолеHTML", Тип("ПолеФормы"), Закладка);
	ПолеHTML.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеHTML.Вид				= ВидПоляФормы.ПолеHTMLДокумента;
	ПолеHTML.ПутьКДанным		= ИмяЗакладки + "_Текст";
	ПолеHTML.УстановитьДействие("ПриНажатии", "Закладка_ПолеHTMLПриНажатии");
	ПолеHTML.УстановитьДействие("ДокументСформирован", "Закладка_ПолеHTMLДокументСформирован");
	
	// КартинкаЗаголовкаСИ = ИсточникСИ.КартинкаЗаголовкаСИ.Получить();
	// КартинкаЗаголовкаСИ = ?(ТипЗнч(КартинкаЗаголовкаСИ) = Тип("Картинка"),КартинкаЗаголовкаСИ,Новый Картинка());
	
	Если СтруктураЗакладки.ВозможностьПоиска Тогда							
		ЗакладкаПоиска = Элементы.Вставить(ИмяЗакладки + "_РезультатыПоиска",
										   Тип("ГруппаФормы"),
										   Элементы.ПанельРезультатов);
		ЗакладкаПоиска.Вид			= ВидГруппыФормы.Страница;
		ЗакладкаПоиска.Заголовок	= ИсточникСИ.Заголовок;
		ЗакладкаПоиска.Картинка		= БиблиотекаКартинок.бит_ОПрограмме;
			
		ПолеHTML = Элементы.Добавить(ИмяЗакладки + "_РезультатыПоискаПолеHTML", Тип("ПолеФормы"), ЗакладкаПоиска);
		ПолеHTML.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеHTML.Вид				= ВидПоляФормы.ПолеHTMLДокумента;
		ПолеHTML.ПутьКДанным		= ИмяЗакладки + "_ТекстРезультатаПоиска";
		ПолеHTML.УстановитьДействие("ПриНажатии", "ПолеРезультатовПоискаПриНажатии");
		ПолеHTML.УстановитьДействие("ДокументСформирован", "ПолеРезультатовПоискаСформирован");
	КонецЕсли;
	КомандаОткрытьЗакрыть = Команды.Добавить(ИмяЗакладки + "_ОткрытьЗакрыть");
	КомандаОткрытьЗакрыть.Действие = "ОткрытьЗакрытьЗакладку";
	КомандаОткрытьЗакрыть.Заголовок = ИсточникСИ.Заголовок;
	КнопкаРаздела = Элементы.Вставить(ИмяЗакладки + "_ОткрытьЗакрыть",
									  Тип("КнопкаФормы"),
									  Элементы.ВидимостьЗакладок,
									  Элементы.ГруппаПоиск);
	КнопкаРаздела.Пометка = ВидимостьЗакладки;
	КнопкаРаздела.ИмяКоманды = ИмяЗакладки + "_ОткрытьЗакрыть";
	
	Закладка.Видимость			= ВидимостьЗакладки;
	
	Возврат ИмяЗакладки;
КонецФункции // ДобавитьЗакладкуИсточника()

&НаКлиенте
// Обходит закладки и устанавливает активной первую видимую из них.
// 
Процедура УстановитьТекущуюЗакладкуРаздела()
	Для Каждого ТекЗакладка Из Элементы.ПанельРазделов.ПодчиненныеЭлементы Цикл
		Если ТекЗакладка.Видимость Тогда
			Элементы.ПанельРазделов.ТекущаяСтраница = ТекЗакладка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УстановитьТекущуюЗакладкуРаздела()

&НаКлиенте
// Процедура-обработчик события "ПриСменеСтраницы" панели "ПанельРазделов"
// Вызывается при смене текущей закладки.
// 
Процедура ПанельРазделовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗаполнитьКнопкиИстории();
	Если ТекущаяСтраница.Имя = "Поиск" Тогда
		ОбновитьРазделыПоиска();
		УстановитьВидСтрокиПоиска();
		ПодключитьОбработчикОжидания("УстановитьВидСтрокиПоиска", 0.1, Истина);
		ДоступностьКнопокРазмерШрифта();
		Возврат;
	Иначе
	КонецЕсли;
	
	ЭтаФорма.Заголовок = Элементы.ПанельРазделов.ТекущаяСтраница.Заголовок;
	ДоступностьКнопокРазмерШрифта();
КонецПроцедуры // ПанельРазделовПриСменеСтраницы()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ КОМАНДНЫМИ ПАНЕЛЯМИ ИСТОЧНИКОВ.

#Область ПроцедурыИФункцииУправленияКоманднымиПанелямиИсточников



&НаСервере
// Заполняет панель управления источника из переданной структуры с описанием кнопок командной панели.
// 
// Параметры 
// 	ИмяЗакладки		   	-	Строка 					Имя закладки источника справочной информации.
// 	КнопкиКомандной		-	Структура				Структура, содержащая описание кнопок командной панели.
// 	Панели.
// 
Процедура ЗаполнитьКоманднуюПанельЗакладки(ИмяЗакладки, КнопкиКоманднойПанели)
	Если НЕ ТипЗнч(КнопкиКоманднойПанели) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекКнопка Из КнопкиКоманднойПанели Цикл
		ВремИмяКоманды = ИмяЗакладки +
						 ТекКнопка.Ключ +
						 "_" +
						 СтрЗаменить(СокрЛП(Новый УникальныйИдентификатор()), "-", "");
		Если НЕ Команды.Найти(ВремИмяКоманды) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
        Команда = Команды.Добавить(ВремИмяКоманды);
		// Команда = Команды.Добавить(ИмяЗакладки + ТекКнопка.Ключ);
		Команда.Действие = "ОбработкаКомандыПанелиЗакладки";
		
		Кнопка = Элементы.Добавить(ВремИмяКоманды,
								   Тип("КнопкаФормы"),
								   Элементы[ИмяЗакладки + "_КоманднаяПанель"]);
		Кнопка.ИмяКоманды	= ВремИмяКоманды;
		// Кнопка = Элементы.Добавить(ИмяЗакладки + ТекКнопка.Ключ,
		// 						   Тип("КнопкаФормы"),
		// 						   Элементы[ИмяЗакладки + "_КоманднаяПанель"]);
		// Кнопка.ИмяКоманды	= ИмяЗакладки + ТекКнопка.Ключ;
		Кнопка.Заголовок	= ТекКнопка.Значение.Заголовок;
		Кнопка.Картинка		= ТекКнопка.Значение.Картинка;
		Кнопка.Отображение	= ТекКнопка.Значение.Отображение;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьКоманднуюПанельЗакладки

&НаКлиенте
// Процедура-обработчик команд кнопок командной панели закладки.
// Передает управление процедуре "ОбработчикСобытияНажатиеКнопкиКоманднойПанели"
// обработки источника.
// 
Процедура ОбработкаКомандыПанелиЗакладки(Команда)
	ИмяЗакладки = ЭтаФорма.ПодчиненныеЭлементы.ПанельРазделов.ТекущаяСтраница.Имя;
	ИмяКоманды = Сред(Команда.Имя,
					  СтрДлина(ИмяЗакладки) + 1,
					  СтрДлина(Команда.Имя) - СтрДлина(ИмяЗакладки) - 33);
	ТекКоманда = ОбработчикиЗакладок[ИмяЗакладки].Команды.Найти(ИмяКоманды);

	ОбработчикиЗакладок[ИмяЗакладки].ОбработчикСобытияНажатиеКнопкиКоманднойПанели(ТекКоманда,
																						 Закладки[ИмяЗакладки].ДобавлятьВИсторию);
КонецПроцедуры // ОбработкаКомандыПанелиЗакладки()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ НАВИГАЦИЕЙ.

#Область ПроцедурыИФункцииУправленияНавигацией



&НаКлиенте
// Добавляет в историю посещенных ссылок источника, переданную ссылку.
// Ссылка передается в виде структуры определяемой в обработке источника.
// 
// Параметры 
// 	ИсточникСИ         	 -	СправочникСсылка.бит_си	 Источник справочной информации                                   
// 	                   	  	_Источники.             	                                                                  
// 	СтруктураСсылки    	 -	Структура              	 Структура ссылки для добавления в историю.                        
// 
Процедура ДобавитьВИсторию(ИмяЗакладки, СтруктураСсылки)
	Если СтруктураСсылки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗакладка = Закладки[ИмяЗакладки];
	ТекОбработчик = ОбработчикиЗакладок[ИмяЗакладки];
	Если НЕ ТекЗакладка.Позиция = -1
	   И НЕ ТекОбработчик.СсылкиРавны(СтруктураСсылки, ТекЗакладка.История[ТекЗакладка.Позиция]) Тогда
		Пока ТекЗакладка.История.Количество() - 1 > ТекЗакладка.Позиция Цикл
			ТекЗакладка.История.Удалить(ТекЗакладка.Позиция +1 );
		КонецЦикла;
	КонецЕсли;
	Если НЕ СтруктураСсылки.Свойство("Прокрутка") Тогда
		СтруктураСсылки.Вставить("Прокрутка", 0);
	КонецЕсли;
	Если ТекЗакладка.История.Количество() = 0 Тогда
		ТекЗакладка.История.Добавить(СтруктураСсылки);
		ТекЗакладка.Позиция = ТекЗакладка.Позиция + 1;
	ИначеЕсли НЕ ТекОбработчик.СсылкиРавны(СтруктураСсылки, ТекЗакладка.История[ТекЗакладка.Позиция]) Тогда
		ТекЗакладка.История.Добавить(СтруктураСсылки);
		ТекЗакладка.Позиция = ТекЗакладка.Позиция + 1;
	КонецЕсли;
	ЗаполнитьКнопкиИстории();
	
	Закладки[ИмяЗакладки].ДобавлятьВИсторию = Ложь;
КонецПроцедуры // ДобавитьВИсторию()

&НаСервере
// Заполняет кнопки навигации по истории посещенных ссылок для текущей закладки источника.
// Управляет доступностью кнопок истории.
// 
Процедура ЗаполнитьКнопкиИстории() Экспорт
	МассивУдаляемых = Новый Массив();
	Для Каждого ТекЭлемент Из ЭтаФорма.Элементы.ГруппаИсторияСледующие.ПодчиненныеЭлементы Цикл
		МассивУдаляемых.Добавить(ТекЭлемент);
	КонецЦикла;
	Для Каждого ТекЭлемент Из ЭтаФорма.Элементы.ГруппаИсторияПредыдущие.ПодчиненныеЭлементы Цикл
		МассивУдаляемых.Добавить(ТекЭлемент);
	КонецЦикла;
	Для Каждого ТекЭлемент Из МассивУдаляемых Цикл
		ТекКоманда = ЭтаФорма.Команды.Найти(ТекЭлемент.ИмяКоманды);
		Элементы.Удалить(ТекЭлемент);
		Если НЕ ТекКоманда = Неопределено Тогда
			ЭтаФорма.Команды.Удалить(ТекКоманда);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ФормаИсторияОбновить.Доступность = Истина;
	Если Элементы.ПанельРазделов.ТекущаяСтраница.Имя = "Поиск"
	 ИЛИ Элементы.ПанельРазделов.ТекущаяСтраница.Имя = "НетИсточников" Тогда
		// Элементы.ГруппаИсторияВперед.Доступность = Ложь;
		// Элементы.ГруппаИсторияНазад.Доступность = Ложь;
		Элементы.ФормаИсторияВперед.Видимость = Ложь;
		Элементы.ФормаИсторияНазад.Видимость = Ложь;
		Элементы.ФормаИсторияОбновить.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	ТекИстория = Закладки[Элементы.ПанельРазделов.ТекущаяСтраница.Имя].История;
	ТекПозиция = Закладки[Элементы.ПанельРазделов.ТекущаяСтраница.Имя].Позиция;
	Если ТекПозиция = -1 Тогда
		// Элементы.ГруппаИсторияВперед.Доступность = Ложь;
		// Элементы.ГруппаИсторияНазад.Доступность = Ложь;
		Элементы.ФормаИсторияВперед.Видимость = Ложь;
		Элементы.ФормаИсторияНазад.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	// Элементы.ГруппаИсторияВперед.Доступность = НЕ (ТекПозиция = ТекИстория.Количество()-1);
	// Элементы.ГруппаИсторияНазад.Доступность = НЕ (ТекПозиция = 0);
	Элементы.ФормаИсторияВперед.Видимость = НЕ (ТекПозиция = ТекИстория.Количество()-1);
	Элементы.ФормаИсторияНазад.Видимость = НЕ (ТекПозиция = 0);
	Для й  = 0 По ТекИстория.Количество()-1 Цикл
		Если й = ТекПозиция Тогда
			Продолжить;
		КонецЕсли;
		ТекКоманда = ЭтаФорма.Команды.Добавить("История_" + СокрЛП(й));
		ТекКоманда.Действие = "СдвинутьИсториюНажатие";
		Если й < ТекПозиция Тогда
			Если ЭтаФорма.Элементы.ГруппаИсторияПредыдущие.ПодчиненныеЭлементы.Количество() = 0 Тогда
				ТекЭлемент = ЭтаФорма.Элементы.Добавить("История_" + СокрЛП(й),
											   Тип("КнопкаФормы"),
											   ЭтаФорма.Элементы.ГруппаИсторияПредыдущие);
			Иначе
				ТекЭлемент = ЭтаФорма.Элементы.Вставить("История_" + СокрЛП(й),
											   Тип("КнопкаФормы"),
											   ЭтаФорма.Элементы.ГруппаИсторияПредыдущие,
											   ЭтаФорма.Элементы.ГруппаИсторияПредыдущие.ПодчиненныеЭлементы[0]);
			КонецЕсли;
		ИначеЕсли й > ТекПозиция Тогда
			ТекЭлемент = ЭтаФорма.Элементы.Добавить("История_" + СокрЛП(й),
										   Тип("КнопкаФормы"),
										   ЭтаФорма.Элементы.ГруппаИсторияСледующие);
		КонецЕсли;
		ТекЭлемент.Заголовок = ТекИстория[й].Заголовок;
		ТекЭлемент.ИмяКоманды = "История_" + СокрЛП(й);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьКнопкиИстории()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОИСКОМ

#Область ПроцедурыИФункцииУправленияПоиском



&НаКлиенте
// Обработчик команды "Выполнить поиск"
// 
Процедура ВыполнитьПоиск(Команда)
	Если СтрокаПоиска = "Введите ваш запрос" 
	   И Элементы.СтрокаПоиска.ЦветТекста = Новый Цвет(172,172,172) Тогда
	   СтрокаПоиска = "";
	КонецЕсли;

	Для Каждого ТекЗакладка Из Закладки Цикл
		Для Каждого ТекРаздел Из РазделыПоиска.ПолучитьЭлементы() Цикл
			Если ТекРаздел.ИмяЗакладки = ТекЗакладка.Ключ Тогда
				ОбновитьПометкиРазделаПоиска(ТекЗакладка.Ключ, ТекРаздел);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТекЗакладка.Значение.ВозможностьПоиска Тогда
			ОбработчикиЗакладок[ТекЗакладка.Ключ].ВыполнитьПоиск(СтрокаПоиска);
		КонецЕсли;
	КонецЦикла;
	Если Элементы.ПанельРезультатов.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Элементы.ПанельРезультатов.ТекущаяСтраница = Элементы.ПанельРезультатов.ПодчиненныеЭлементы[0];
	КонецЕсли;
КонецПроцедуры // ВыполнитьПоиск()

&НаКлиенте
// Обработчик события "ДокументСформирован" поля HTML результата поиска для каждого источника.
// Обработка события может быть дополнительно переопределена в процедуре
// "ОбработчикСобытияДокументСформированРезультатаПоиска" обработки источника.
// 
Процедура ПолеРезультатовПоискаСформирован(Элемент)
	Поз = Найти(Элемент.Имя,"_РезультатыПоискаПолеHTML");
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяЗакладки = Лев(Элемент.Имя, Поз - 1);
	
	// Передаем параметры события обработчику из обработки источника.
	Попытка
		ОбработчикиЗакладок[ИмяЗакладки].ОбработчикСобытияДокументСформированРезультатаПоиска(Элемент);
	Исключение
	КонецПопытки;
КонецПроцедуры // ПолеРезультатовПоискаДокументСформирован()

&НаКлиенте
// Обработчик события "ПриНажатии" поля HTML результата поиска для каждого источника.
// Обрабатывает нажатие мышью на в поле результатов поиска.
// Обработка события может быть дополнительно переопределена в процедуре
// "ОбработчикСобытияOnClickРезультатаПоиска" обработки источника.
// 
Процедура ПолеРезультатовПоискаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Поз = Найти(Элемент.Имя,"_РезультатыПоискаПолеHTML");
	Если Поз = 0 Тогда
		ДанныеСобытия.Event.returnValue = Ложь;
		Возврат;
	КонецЕсли;
	ИмяЗакладки = Лев(Элемент.Имя,Поз-1);
		
	Закладки[ИмяЗакладки].ДобавлятьВИсторию = Истина;
	ПродолжитьОбработку = Истина;
	
	// Передаем параметры события обработчику из обработки источника.
	Попытка
		ОбработчикиЗакладок[ИмяЗакладки].ОбработчикСобытияПриНажатииРезультатаПоиска(Элемент,
																						   ДанныеСобытия,
																						   СтандартнаяОбработка,
																						   ПродолжитьОбработку);
	Исключение
	КонецПопытки;
	Если НЕ ПродолжитьОбработку Тогда
		Возврат;
	КонецЕсли;

	Элементы[ИмяЗакладки].Видимость = Истина;
	Элементы[ИмяЗакладки + "_ОткрытьЗакрыть"].Пометка = Истина;
	
	Элементы.ПанельРазделов.ТекущаяСтраница = Элементы[ИмяЗакладки];
	
	Элементы.НетИсточников.Видимость = Ложь;
КонецПроцедуры // ПолеРезультатовПоискаПриНажатии()

&НаКлиенте
// Устанавливает вид и содержание строки поиска в зависимости от ее активности
// для повышения usability.
// Вызывается через обработчик ожидания.
// 
Процедура УстановитьВидСтрокиПоиска()
	Если НЕ Элементы.ПанельРазделов.ТекущаяСтраница.Имя = "Поиск" Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаПоиска = "Введите ваш запрос"
	   И НЕ ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска Тогда
		ПодключитьОбработчикОжидания("УстановитьВидСтрокиПоиска",0.1,Истина);
		Возврат;
	КонецЕсли;	
	Если НЕ ПустаяСтрока(СтрокаПоиска)
	   И НЕ СтрокаПоиска = "Введите ваш запрос" Тогда
		Элементы.СтрокаПоиска.ЦветТекста = Новый Цвет(0,0,0);
		Возврат;
	КонецЕсли;
	Если ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска Тогда
		СтрокаПоиска = "";
		Элементы.СтрокаПоиска.ЦветТекста = Новый Цвет(0,0,0);
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = "Введите ваш запрос";
	Элементы.СтрокаПоиска.ЦветТекста = Новый Цвет(172,172,172);
КонецПроцедуры // УстановитьВидСтрокиПоиска()

&НаКлиенте
// Рекурсивно заполняет дерево разделов поиска из переданного дерева разделов
// и устанавливает пометки выбора разделов.
// 
// Параметры 
// 	ИмяЗакладки        	 -	Строка					 Имя закладки для которой заполняется дерево разделов.
// 	СтрокаПриемник     	 -	ДанныеФормыЭлемент		 Строка результирующего дерева
// 							Дерева.
// 	СтрокаИсточник     	 -	ДанныеФормыЭлемент		 Строка исходного дерева
// 							Дерева.
// 	КартинкаРаздела    	 -	Строка					 Адрес картинки раздела во временном хранилище.
// 	ПоУмолчанию.
// 
Процедура СкопироватьСтрокиДереваРазделов(ИмяЗакладки, СтрокаПриемник, СтрокаИсточник, КартинкаРазделаПоУмолчанию = "")
	
	// Проверяем возможность выбора нескольких разделов одного уровня
	// для проверки вызываем функцию из обработки источника.
	ТолькоОдинРаздел = НЕ Закладки[ИмяЗакладки].МножественныйВыборРазделовПоиска;
	Если КартинкаРазделаПоУмолчанию = "" Тогда
		КартинкаРазделаПоУмолчанию = ПолучитьАдресКартинки("СправочникОбъект");
	КонецЕсли;
	Для Каждого ТекСтрока Из СтрокаИсточник.ПолучитьЭлементы() Цикл
		НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Пометка				= ТекСтрока.Пометка;
		Если ТекСтрока.КартинкаРаздела = "" Тогда
			НоваяСтрока.КартинкаРаздела = КартинкаРазделаПоУмолчанию;
		Иначе
			НоваяСтрока.КартинкаРаздела	= ТекСтрока.КартинкаРаздела;
		КонецЕсли;
		НоваяСтрока.Раздел				= ТекСтрока.Раздел;
		НоваяСтрока.ИмяЗакладки			= ИмяЗакладки;
		НоваяСтрока.ПараметрыРаздела	= ТекСтрока.ПолучитьИдентификатор();
		СкопироватьСтрокиДереваРазделов(ИмяЗакладки, НоваяСтрока, ТекСтрока, КартинкаРазделаПоУмолчанию);
		
		// Далее для увеличения быстродействия в Веб-клиенте закоментировано,
		// т.к. обычно все пометки устанавливаются правильно в форме обработки источника,
		// но для общего случая пусть останется, чтобы не вспоминать.
		
		// //Установим флажки для подчиненных разделов
		// Если НЕ НоваяСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
		// 	УстановитьФлажкиПодчиненных(НоваяСтрока, НоваяСтрока.Пометка);
		// КонецЕсли;
		// Если ТолькоОдинРаздел Тогда
		// 	// Установим флажки для соседних разделов (одного уровня)
		// 	УстановитьФлажкиСоседей(НоваяСтрока);
		// КонецЕсли;
		//// Установим флажки для родительских разделов
		// УстановитьФлажкиРодителей(НоваяСтрока, ТолькоОдинРаздел);
	КонецЦикла;
КонецПроцедуры // СкопироватьСтрокиДереваРазделов()

&НаКлиенте
// Проверяет установленные пометки для всех строк, дочерних для переданной.
// 
// Параметры 
// 	Строка             	 -	ДанныеФормыДерево,    	 Строка дерева значений для проверки                              
// 	                   	  	ДанныеФормыЭлемент
// 							Дерева.
// Возвращаемое значение:
// 	Возврат ...        	 -	Число                  	 0 - пометки у дочерних строк не установлены; 1 - пометки         
// 	                   	  	                       	 установлены у всех дочерних строк; 2 - пометки установлены у     
// 	                   	  	                       	 части дочерних строк.                                            
// 
Функция ФлагВыборкаПодчиненных(Строка)
	Флаг = 0;
	ВсеФлажки = Истина;
	ЕстьФлажки = Ложь;
	Для Каждого ТекСтрока Из Строка.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтрока.Пометка = 1 Тогда
			ВсеФлажки = Ложь;
		КонецЕсли;
			
		Если НЕ ТекСтрока.Пометка = 0 Тогда
			ЕстьФлажки = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ВсеФлажки Тогда
		Возврат 1;
	ИначеЕсли ЕстьФлажки Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ФлагВыборкаПодчиненных()

&НаКлиенте
// Снимает пометки для соседних с переданной строк дерева если в текущей строке пометка установлена.
// Используется в случае когда установлен признак пометки только одного раздела для источника.
// 
// Параметры 
// 	Строка             	 -	ДанныеФормыЭлемент    	 Строка для проверки флажков соседей                              
// 							Дерева.
// 
Процедура УстановитьФлажкиСоседей(Строка)
	Если Строка.ПолучитьРодителя() = Неопределено ИЛИ Строка.Пометка = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекРодитель = Строка.ПолучитьРодителя();
	Для Каждого ТекСосед Из ТекРодитель.ПолучитьЭлементы() Цикл
		Если ТекСосед = Строка Тогда
			Продолжить;
		КонецЕсли;
		ТекСосед.Пометка = 0;
		Если НЕ Элементы.РазделыПоиска.ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
			// Устанавливаем пометки для дочерних строк
			УстановитьФлажкиПодчиненных(ТекСосед,0);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УстановитьФлажкиСоседей()

&НаКлиенте
// Устанавливает пометки для родительских строк переданной строки.
// 
// Параметры 
// 	Строка             	 -	ДанныеФормыЭлемент    	 Строка, для родителей которой будут изменены пометки
// 							Дерева.
// 	ТолькоОдинРаздел   	 -	Булево                 	 Признак, что возможна пометка только для одного раздела источника.
// 
Процедура УстановитьФлажкиРодителей(Строка, ТолькоОдинРаздел)
	ТекСтрока = Строка;
	Пока НЕ ТекСтрока.ПолучитьРодителя() = Неопределено Цикл
		ТекСтрока = ТекСтрока.ПолучитьРодителя();
		ТекСтрока.Пометка = ФлагВыборкаПодчиненных(ТекСтрока);
		Если ТолькоОдинРаздел Тогда
			// Установим флажки для соседних разделов (одного уровня).
			УстановитьФлажкиСоседей(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УстановитьФлажкиРодителей()

&НаКлиенте
// Устанавливает пометки для подчиненных строк переданной строки.
// 
// Параметры 
// 	Строка             	 -	ДанныеФормыЭлемент    	 Строка для подчиненных которой устанавливаем пометки
// 							Дерева.
// 	ЗначениеФлажка     	 -	Число                  	 0 - Пометка не установлена; 1 - пометка установлена.              
// 
Процедура УстановитьФлажкиПодчиненных(Строка, ЗначениеФлажка)
	Для Каждого ТекСтрока Из Строка.ПолучитьЭлементы() Цикл
		ТекСтрока.Пометка = ЗначениеФлажка;
		УстановитьФлажкиПодчиненных(ТекСтрока, ЗначениеФлажка);
	КонецЦикла;
КонецПроцедуры // УстановитьФлажкиПодчиненных()

&НаКлиенте
// Рекурсивно заполняет дерево разделов поиска из переданного дерева разделов
// и устанавливает пометки выбора разделов.
// 
Процедура ОбновитьПометкиРазделаПоиска(ИмяЗакладки, СтрокаИсточник)
	СтрокаПриемник = Неопределено;
	Если НЕ СтрокаИсточник.ПолучитьРодителя() = Неопределено Тогда
		СтрокаПриемник =
			ОбработчикиЗакладок[ИмяЗакладки].оп_ДеревоРазделовПоиска.НайтиПоИдентификатору(СтрокаИсточник.ПараметрыРаздела);
	КонецЕсли;
	Если НЕ СтрокаПриемник = Неопределено Тогда
		СтрокаПриемник.Пометка = СтрокаИсточник.Пометка;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из СтрокаИсточник.ПолучитьЭлементы() Цикл
		ОбновитьПометкиРазделаПоиска(ИмяЗакладки, ТекСтрока);
	КонецЦикла;
КонецПроцедуры // ОбновитьПометкиРазделаПоиска()

&НаКлиенте
// Обработчик события "ПриИзменении" колонки "Пометка" дерева разделов поиска.
// 
Процедура РазделыПоискаПометкаПриИзменении(Элемент)
	ТолькоОдинРаздел = НЕ Закладки[Элементы.РазделыПоиска.ТекущиеДанные.ИмяЗакладки].МножественныйВыборРазделовПоиска;
	Если Элементы.РазделыПоиска.ТекущиеДанные.Пометка = 2 Тогда
		Элементы.РазделыПоиска.ТекущиеДанные.Пометка = 0;
	ИначеЕсли Элементы.РазделыПоиска.ТекущиеДанные.Пометка = 1
			И ТолькоОдинРаздел
			И НЕ Элементы.РазделыПоиска.ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		Элементы.РазделыПоиска.ТекущиеДанные.Пометка = 0;
		Возврат;
	КонецЕсли;
	Если НЕ Элементы.РазделыПоиска.ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		УстановитьФлажкиПодчиненных(Элементы.РазделыПоиска.ТекущиеДанные,
									Элементы.РазделыПоиска.ТекущиеДанные.Пометка);
	КонецЕсли;
	Если ТолькоОдинРаздел Тогда
		УстановитьФлажкиСоседей(Элементы.РазделыПоиска.ТекущиеДанные);
	КонецЕсли;
	УстановитьФлажкиРодителей(Элементы.РазделыПоиска.ТекущиеДанные, ТолькоОдинРаздел);
КонецПроцедуры // РазделыПоискаПометкаПриИзменении()

&НаКлиенте
// Обновляет дерево разделов поиска. Заполняет дерево разделов для каждого источника,
// вызывая функцию "ПолучитьДеревоРазделов" обработки источника.
// 
// Параметры 
// 	ОбновлятьВсе       	 -	Булево                 	 Истина - очищать и заново запрашивать дерево разделов для каждого
// 	                   	  	                       	 источника; Ложь - запрашивать дерево разделов только когда оно не
// 	                   	  	                       	 заполнено для источника; Значение по умолчанию - Ложь.            
// 
Процедура ОбновитьРазделыПоиска(ОбновлятьВсе = Ложь)
	ДобавленныеИсточники = Новый Массив();
	КартинкаРазделаПоУмолчанию = ПолучитьАдресКартинки("СправочникОбъект");
	Для Каждого ТекЗакладка Из Закладки Цикл
		Если НЕ ДобавленныеИсточники.Найти(ТекЗакладка.Значение.Источник) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ТекЗакладка.Значение.ВозможностьПоиска Тогда
			Продолжить;
		КонецЕсли;
		
		// Состояние("Обновление разделов поиска """ + ТекЗакладка.Значение.Источник.Заголовок+"""...");
		ДобавленныеИсточники.Добавить(ТекЗакладка.Значение.Источник);
		НоваяСтрока = Неопределено;
		Для Каждого ТекРаздел Из РазделыПоиска.ПолучитьЭлементы() Цикл
			Если ТекЗакладка.Ключ = ТекРаздел.ИмяЗакладки Тогда
				НоваяСтрока = ТекРаздел;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = РазделыПоиска.ПолучитьЭлементы().Добавить();
			НоваяСтрока.КартинкаРаздела = ПолучитьНавигационнуюСсылку(ТекЗакладка.Значение.Источник, "КартинкаЗаголовкаСИ");
			НоваяСтрока.Раздел = ТекЗакладка.Значение.ЗаголовокИсточника;
			НоваяСтрока.ИмяЗакладки = ТекЗакладка.Ключ;
		ИначеЕсли ОбновлятьВсе Тогда
			НоваяСтрока.ПолучитьЭлементы().Очистить();
		ИначеЕсли НЕ НоваяСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		// Запрашиваем дерево разделов поиска из обработки источника.
		Попытка
			ОбработчикиЗакладок[ТекЗакладка.Ключ].ЗаполнитьДеревоРазделов();
		Исключение
		КонецПопытки;
		СкопироватьСтрокиДереваРазделов(ТекЗакладка.Ключ,
										НоваяСтрока,
										ОбработчикиЗакладок[ТекЗакладка.Ключ].оп_ДеревоРазделовПоиска,
										КартинкаРазделаПоУмолчанию);
		НоваяСтрока.Пометка = ФлагВыборкаПодчиненных(НоваяСтрока);
		Элементы.РазделыПоиска.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), истина);
	КонецЦикла;
КонецПроцедуры // ОбновитьРазделыПоиска()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СОБЫТИЙ ПОЛЯ HTML-ДОКУМЕНТОВ.

#Область ПроцедурыИФункцииОбработкиСобытийПоляHtmlДокументов


&НаКлиенте
// Обработчик события "ПриНажатии" поля формы (Поля HTML-документа).
// 
Процедура Закладка_ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Поз = Найти(Элемент.Имя,"_ПолеHTML");
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяЗакладки = Лев(Элемент.Имя, Поз - 1);
	
	ПродолжитьОбработку = Истина;
	Закладки[ИмяЗакладки].ДобавлятьВИсторию = Истина;

	// Передаем параметры события обработчику из обработки источника.
	Попытка
		// Сообщить("Нач: " + ТекущаяДата());
		ОбработчикиЗакладок[ИмяЗакладки].ОбработчикСобытияПриНажатии(Элемент,
																	 ДанныеСобытия,
																	 СтандартнаяОбработка,
																	 ПродолжитьОбработку);
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Если НЕ ПродолжитьОбработку Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // Закладка_ПолеHTMLПриНажатии()

&НаКлиенте
// Обработчик события "ДокументСформирован" поля формы (Поля HTML-документа).
// 
Процедура Закладка_ПолеHTMLДокументСформирован(Элемент)
	ИмяЭлемента = Элемент.Имя;
	Поз = Найти(ИмяЭлемента,"_ПолеHTML");
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяЗакладки = Лев(ИмяЭлемента, Поз-1);
	ТекЗакладка = Закладки[ИмяЗакладки];
	
	Если Элементы[ИмяЭлемента].Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Элементы[ИмяЭлемента].Документ.readystate = "complete" Тогда
		Возврат;
	КонецЕсли;
	


	#Если НЕ ВебКлиент Тогда
	ИзменитьРазмерШрифта(0, Истина);
	#КонецЕсли
	
	СтруктураСсылки = ?(ТекЗакладка.Позиция = -1, Неопределено, ТекЗакладка.История[ТекЗакладка.Позиция]);
	
	// Передаем параметры события обработчику из обработки источника.
	Попытка
		ОбработчикиЗакладок[ИмяЗакладки].ОбработчикСобытияДокументСформирован(Элемент,
																			  СтруктураСсылки,
																			  Закладки[ИмяЗакладки].ДобавлятьВИсторию);
	Исключение
	КонецПопытки;
	Если Закладки[ИмяЗакладки].ДобавлятьВИсторию И НЕ СтруктураСсылки = Неопределено Тогда
		ДобавитьВИсторию(ИмяЗакладки, СтруктураСсылки);
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
	Если Элементы[ИмяЭлемента].Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы[ИмяЭлемента].Документ.compatMode = "CSS1Compat" Тогда
		Элементы[ИмяЭлемента].Документ.documentElement.scrollTop =
			?(ТекЗакладка.Позиция = -1, 0, ТекЗакладка.История[ТекЗакладка.Позиция].Прокрутка);
	Иначе
		Элементы[ИмяЭлемента].Документ.body.scrollTop =
			?(ТекЗакладка.Позиция = -1, 0, ТекЗакладка.История[ТекЗакладка.Позиция].Прокрутка);
	КонецЕсли;
	Попытка
	 	ДобавитьОбработчик Элементы[ИмяЭлемента].Документ.parentWindow.onscroll, Закладка_ПолеHTMLonscroll;
	Исключение    	
	КонецПопытки;	
	
	#КонецЕсли

КонецПроцедуры // Закладка_ПолеHTMLДокументСформирован()

&НаКлиенте
// Обработчик события "onscroll" HTML-документа.
// 
Процедура Закладка_ПолеHTMLonscroll()
	ТекЭлемент = Элементы[Элементы.ПанельРазделов.ТекущаяСтраница.Имя + "_ПолеHTML"];
	ТекЗакладка = Закладки[Элементы.ПанельРазделов.ТекущаяСтраница.Имя];
	Если ТекЭлемент.Документ.compatMode = "CSS1Compat" Тогда
		ТекЗакладка.История[ТекЗакладка.Позиция].Прокрутка = ТекЭлемент.Документ.documentElement.scrollTop;
	Иначе
		ТекЗакладка.История[ТекЗакладка.Позиция].Прокрутка = ТекЭлемент.Документ.body.scrollTop;
	КонецЕсли;
КонецПроцедуры // Закладка_ПолеHTMLonscroll()

&НаКлиенте
// Обработчик события "ПриНажатии" поля HTML "НетИсточников".
// 
Процедура НетИсточников_ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		Попытка
			ДанныеСобытия.Event.preventDefault();
		Исключение
			ДанныеСобытия.Event.returnValue = Ложь;
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Позиция = Найти(ДанныеСобытия.href, "ОткрытьИсточник=");
	
	Если Позиция > 0 Тогда
		ИмяЗакладки = Сред(ДанныеСобытия.href, Позиция + 16);
		Попытка
			Элементы[ИмяЗакладки].Видимость = Истина;
			Элементы[ИмяЗакладки + "_ОткрытьЗакрыть"].Пометка = Истина;
			Элементы.ПанельРазделов.ТекущаяСтраница = Элементы[ИмяЗакладки];
			ЗаполнитьКнопкиИстории();
			ОбработчикиЗакладок[ИмяЗакладки].ОбработчикСобытияПриАктивизацииСтраницы();
			ДоступностьКнопокРазмерШрифта();
			Элементы.НетИсточников.Видимость = Ложь;
			// Элементы.ПанельРезультатов.ТекущаяСтраница = Элементы.ПанельРезультатов.ПодчиненныеЭлементы[0];
		Исключение
			// Предупреждение("При выполении действия произошла ошибка!").
		КонецПопытки;
		
		// ДанныеСобытия.Event.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Позиция = Найти(ДанныеСобытия.href, "ЗарегистрироватьИсточник=");
	
	Если Позиция > 0 Тогда
		
		Попытка
			ИмяЗакладки = ЗарегистрироватьОбработкуИсточника(Сред(ДанныеСобытия.href, Позиция + 25));
			Если ИмяЗакладки = "" Тогда
				ДанныеСобытия.Event.returnValue = Ложь;
				Возврат;
			КонецЕсли;
			
			СтруктураОбработчика = Новый Структура("Форма");
			ВремПараметры = Новый Структура("ИмяЗакладкиИсточника, ИсточникСИ, ИсточникСИЗаголовок",
											ИмяЗакладки,
											Закладки[ИмяЗакладки].Источник,
											Закладки[ИмяЗакладки].ЗаголовокИсточника);
			СтруктураОбработчика = ПолучитьФорму(Закладки[ИмяЗакладки].ОбработкаИмя + ".Форма.ФормаУправляемая",
												 ВремПараметры,
												 ЭтаФорма,
												 Истина);
			
			ОбработчикиЗакладок.Вставить(ИмяЗакладки, СтруктураОбработчика);
			КнопкиЗакладки = Новый Структура();
			Для Каждого ТекКнопка Из СтруктураОбработчика.КоманднаяПанель.ПодчиненныеЭлементы Цикл
				Если НЕ ТипЗнч(ТекКнопка) = Тип("КнопкаФормы") Тогда
					Продолжить;
				КонецЕсли;
				КнопкаЗакладки = Новый Структура("Имя, Заголовок, Картинка, Отображение",
												 ТекКнопка.Имя,
												 ТекКнопка.Заголовок,
												 ТекКнопка.Картинка,
												 ТекКнопка.Отображение);
				КнопкиЗакладки.Вставить(ТекКнопка.Имя, КнопкаЗакладки);
			КонецЦикла;
			ЗаполнитьКоманднуюПанельЗакладки(ИмяЗакладки, КнопкиЗакладки);
			Закладки[ИмяЗакладки].ДобавлятьВИсторию = Истина;
			СтруктураОбработчика.ОбработчикСобытияПриОткрытииЗакладки(Закладки[ИмяЗакладки].ПараметрОткрытия);
		
			НетИсточников_ПолеHTMLЗаполнение();
			
			Элементы.НетИсточников.Видимость = Ложь;
			Элементы[ИмяЗакладки].Видимость = Истина;
			Элементы[ИмяЗакладки + "_ОткрытьЗакрыть"].Пометка = Истина;
			Элементы.ПанельРазделов.ТекущаяСтраница = Элементы[ИмяЗакладки];
			Попытка
				СтруктураОбработчика.ОбработчикСобытияРегистрацияИсточника(Закладки[ИмяЗакладки].Источник);
			Исключение
			КонецПопытки;
			Элементы.ПанельРезультатов.ТекущаяСтраница = Элементы.ПанельРезультатов.ПодчиненныеЭлементы[0];
		Исключение
			// Предупреждение("При выполении действия произошла ошибка!");
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
		Попытка
			ДанныеСобытия.Event.preventDefault();
		Исключение
			ДанныеСобытия.Event.returnValue = Ложь;
		КонецПопытки;
		Возврат;
		
	КонецЕсли;
	
	Попытка
		ДанныеСобытия.Event.preventDefault();
	Исключение
		ДанныеСобытия.Event.returnValue = Ложь;
	КонецПопытки;
КонецПроцедуры // НетИсточников_ПолеHTMLПриНажатии()

&НаСервере
// Выполняет регистрацию обработки источника в справочнике источников справочной информации.
// 
// Параметры 
// 	ИмяОбработки     	 -	Строка		    	 Имя обработки, источника справочной информации.
// 
Функция ЗарегистрироватьОбработкуИсточника(ИмяОбработки)
	НовыйИсточник = бит_си_ОбщегоНазначения.ЗарегистрироватьОбработкуИсточника(ИмяОбработки);
	ИмяЗакладки = "";
	Если ТипЗнч(НовыйИсточник) = Тип("СправочникСсылка.бит_си_Источники") Тогда
		ИмяЗакладки = ДобавитьЗакладкуИсточника(НовыйИсточник, НовыйИсточник.ВидимостьПоУмолчанию);
	КонецЕсли;	
	Возврат ИмяЗакладки;
КонецФункции // ЗарегистрироватьОбработкуИсточника()

&НаСервере
// Выполняет заполнение поля HTML "НетИсточников", ссылками на элементы справочника "Источники"
// для открытия соответствующих закладок, а также ссылками на обработки источников справочной информации
// встроенные в конфигурацию для создания соответствующих источников в справочнике и открытия.
// 
Процедура НетИсточников_ПолеHTMLЗаполнение()
	ЗаголовокСодержания = "Не выбраны источники справочной информации";
	ТекстИсточники     = "";
	ТекстОбработки     = "";
	
	МассивИсточников = Новый Массив();
	Для Каждого ТекЗакладка Из Элементы.ПанельРазделов.ПодчиненныеЭлементы Цикл
		Если ТекЗакладка.Имя = "Поиск" ИЛИ ТекЗакладка.Имя = "НетИсточников" Тогда
			Продолжить;
		КонецЕсли;
		ВремОбработка = Закладки[ТекЗакладка.Имя].Источник.Обработка.Получить();
		Если ТипЗнч(ВремОбработка) = Тип("Строка") Тогда
			МассивИсточников.Добавить(ВремОбработка);
		КонецЕсли;
		Если ТекстИсточники = "" Тогда
			ТекстИсточники = ТекстИсточники + "
			|<P class=""contents"">Зарегистрированные источники</P><DIV class=""contents"" style=""text-indent: 10pt;"">";
		КонецЕсли;
		ТекстИсточники = ТекстИсточники + "
		|<P><A href=""" + "ОткрытьИсточник=" + ТекЗакладка.Имя + """>" + ТекЗакладка.Заголовок + "</A></P>
		|";
	КонецЦикла;
	Если НЕ ТекстИсточники = "" Тогда
		ТекстИсточники = ТекстИсточники + "
		|</DIV>";
	КонецЕсли;
	
	Для Каждого ВремОбработка Из Метаданные.Обработки Цикл
		Если НЕ Лев(ВремОбработка.Имя,15) = "бит_си_Источник" Тогда
			Продолжить;
		КонецЕсли;
		ВремОбработкаОбъект = Обработки[ВремОбработка.Имя].Создать();
		Попытка
			Если НЕ ВремОбработкаОбъект.ЭтоОбработкаИсточникаСИУпр() Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		Если НЕ МассивИсточников.Найти(ВремОбработка.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТекстОбработки = "" Тогда
			ТекстОбработки = ТекстОбработки + "
			|<P class=""contents"">Доступные источники (не зарегистрированные)</P>
			|<DIV class=""contents"" style=""text-indent: 10pt;"">";
		КонецЕсли;
		ТекстОбработки = ТекстОбработки + "
		|<P><A href=""" + "ЗарегистрироватьИсточник=" +
		СокрЛП(ВремОбработка.Имя) + """>" +
		СокрЛП(ВремОбработка.Представление()) + "</A></P>
		|";
	КонецЦикла;
	Если НЕ ТекстОбработки = "" Тогда
		ТекстОбработки = ТекстОбработки + "
		|</DIV>";
	КонецЕсли;
	ШаблонСтраницы	= Обработки.бит_си_СправочнаяИнформация.ПолучитьМакет("ШаблонСтраницы").ПолучитьТекст();
	ШаблонСтраницы	= СтрЗаменить(ШаблонСтраницы,"##Styles##", Обработки.бит_си_СправочнаяИнформация.ПолучитьМакет("Стили").ПолучитьТекст());
	БИТИнфо			= Обработки.бит_си_СправочнаяИнформация.ПолучитьМакет("БИТИнфо").ПолучитьТекст();
	
	ТекстСодержания = СтрЗаменить(ШаблонСтраницы, "##Content##","<H1 id=title>" + ЗаголовокСодержания + "</H1>
	|" + ТекстИсточники + ТекстОбработки + "
	|" + БИТИнфо);
	
	НетИсточников_Текст = ТекстСодержания;
КонецПроцедуры // НетИсточников_ПолеHTMLЗаполнение()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КНОПОК КОМАНДНОЙ ПАНЕЛИ

#Область ОбработчикиКнопокКоманднойПанели



&НаКлиенте
// Процедура-обработчик команд кнопок:
// 		"ИсторияВперед"
// 		"ИсторияНазад"
// 		"ИсторияОбновить"
// 		кнопок перехода по ссылке в истории (вперед или назад).
// 
Процедура СдвинутьИсториюНажатие(Команда)
	ИмяЗакладки = Элементы.ПанельРазделов.ТекущаяСтраница.Имя;
	ТекЗакладка = Закладки[ИмяЗакладки];
	
	// ТекСтраница = ЭлементыФормы.ПанельРазделов.ТекущаяСтраница;
	
	Если ТекЗакладка.Позиция = -1 Тогда
		Возврат;
	КонецЕсли;
	Если Лев(Команда.Имя,8) = "История_" Тогда
		// Обрабатываем нажатие на кнопку перехода по ссылке в истории (вперед или назад).
		ТекЗакладка.Позиция = Число(Сред(Команда.Имя,9));
	ИначеЕсли Команда.Имя = "ИсторияНазад" Тогда
		ТекЗакладка.Позиция = ТекЗакладка.Позиция - 1;
	ИначеЕсли Команда.Имя = "ИсторияВперед" Тогда
		ТекЗакладка.Позиция = ТекЗакладка.Позиция + 1;
	ИначеЕсли Команда.Имя = "ИсторияОбновить" Тогда
	Иначе
		Возврат;
	КонецЕсли;
	// Тут нам не надо добавлять в историю ссылку на которую мы переходим, т.к. она уже там.
	Закладки[ИмяЗакладки].ДобавлятьВИсторию = Ложь;
	ОбработчикиЗакладок[ИмяЗакладки].ПерейтиПоСсылке(ТекЗакладка.История[ТекЗакладка.Позиция]);
	ЗаполнитьКнопкиИстории();
КонецПроцедуры // СдвинутьИсториюНажатие()

&НаКлиенте
// Обработчик команд изменения размеров шрифта.
// 
Процедура ИзменитьШрифт(Команда)
	Если Команда.Имя = "УвеличитьШрифт" Тогда
		ИзменитьРазмерШрифта(1);
	ИначеЕсли Команда.Имя = "УменьшитьШрифт" Тогда
		ИзменитьРазмерШрифта(-1);
	КонецЕсли;
КонецПроцедуры // ИзменитьШрифт()

&НаКлиенте
// Обработчик команды "Печать"
// 
Процедура Печать(Команда)
	ТекСтраница = Элементы.ПанельРазделов.ТекущаяСтраница;
	Если ТекСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтраница.Имя = "Поиск" Тогда
		ВремИмя = Элементы.ПанельРезультатов.ТекущаяСтраница.Имя + "_ПолеРезультатПоиска";
	Иначе
		ВремИмя = ТекСтраница.Имя + "_ПолеHTML";
	КонецЕсли;
	Элементы[ВремИмя].Документ.execCommand("Print");
КонецПроцедуры // Печать()

&НаКлиенте
// Обработчик команд "Закладки_ЗакрытьТекущую" и "<ИмяЗакладки>_ОткрытьЗакрыть".
// 
Процедура ОткрытьЗакрытьЗакладку(Команда)
	
	ИмяЗакладки = ?(Команда.Имя = "Закладки_ЗакрытьТекущую",
					Элементы.ПанельРазделов.ТекущаяСтраница.Имя,
					Лев(Команда.Имя, Найти(Команда.Имя, "_") - 1));
					
	ИмяКоманды  = ?(Команда.Имя = "Закладки_ЗакрытьТекущую",
					ИмяЗакладки + "_ОткрытьЗакрыть",
					Команда.Имя);
					
	Если ИмяЗакладки = "НетИсточников" Тогда
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;
	
	Элементы[ИмяКоманды].Пометка = НЕ Элементы[ИмяКоманды].Пометка;
	Если ИмяЗакладки = "Поиск" Тогда
		Элементы.ФормаПоиск.Пометка = Элементы[ИмяКоманды].Пометка;
	КонецЕсли;
	Элементы[ИмяЗакладки].Видимость = Элементы[ИмяКоманды].Пометка;
	Если Элементы[ИмяКоманды].Пометка Тогда
		Элементы.ПанельРазделов.ТекущаяСтраница = Элементы[ИмяЗакладки];
		Элементы.НетИсточников.Видимость = (ИмяЗакладки = "Поиск" И Элементы.НетИсточников.Видимость);
		Если ИмяЗакладки = "Поиск" Тогда
			ОбновитьРазделыПоиска();
			УстановитьВидСтрокиПоиска();
			ПодключитьОбработчикОжидания("УстановитьВидСтрокиПоиска", 0.1, Истина);
			ДоступностьКнопокРазмерШрифта();
		КонецЕсли;
	Иначе
		НетИсточников = Истина;
		Для Каждого ТекЗакладка Из Элементы.ПанельРазделов.ПодчиненныеЭлементы Цикл
			Если ТекЗакладка.Имя = "НетИсточников" Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ Элементы.ПанельРазделов.ТекущаяСтраница.Видимость Тогда
				Элементы.ПанельРазделов.ТекущаяСтраница = ТекЗакладка;
			КонецЕсли;
			НетИсточников = Мин(НетИсточников, НЕ (ТекЗакладка.Видимость) ИЛИ ТекЗакладка.Имя = "Поиск"); 
		КонецЦикла;
		Элементы.НетИсточников.Видимость = НетИсточников;
		Если НетИсточников Тогда
			НетИсточников_ПолеHTMLЗаполнение();
			Элементы.ПанельРазделов.ТекущаяСтраница = Элементы.НетИсточников;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьКнопкиИстории();
	Если НЕ (ИмяЗакладки = "Поиск" ИЛИ ИмяЗакладки = "НетИсточников") Тогда
		ОбработчикиЗакладок[ИмяЗакладки].ОбработчикСобытияПриИзмененииВидимостиЗакладки();
	КонецЕсли;
КонецПроцедуры // ОткрытьЗакрытьЗакладку()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы



&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
// 
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	СтруктураНастроек = ПолучитьОписаниеНастроек();
	
	СохраненноеЗначение_ВидимостьЗакладок = ПолучитьЗначениеНастройки("бит_си_ВидимостьЗакладок", СтруктураНастроек);
	
	Закладки = Новый Структура();
	НетИсточников = Истина;
	ВыборкаЗакладок = Справочники.бит_си_Источники.Выбрать(,,,"Порядок");
	Пока ВыборкаЗакладок.Следующий() Цикл
		Если ТипЗнч(СохраненноеЗначение_ВидимостьЗакладок) = Тип("Соответствие") Тогда
			Попытка
				ВидимостьЗакладки = (СохраненноеЗначение_ВидимостьЗакладок.Получить(ВыборкаЗакладок.Ссылка) = Истина);
			Исключение
				ВидимостьЗакладки = ВыборкаЗакладок.ВидимостьПоУмолчанию;
			КонецПопытки;
		Иначе
			ВидимостьЗакладки = ВыборкаЗакладок.ВидимостьПоУмолчанию;
		КонецЕсли;
		Если ТипЗнч(Параметры.СписокЗакладок) = Тип("Массив") Тогда
			ВидимостьЗакладки = НЕ (Параметры.СписокЗакладок.Найти(ВыборкаЗакладок.Ссылка) = Неопределено);
		КонецЕсли;
		
		НоваяЗакладка = ДобавитьЗакладкуИсточника(ВыборкаЗакладок.Ссылка, ВидимостьЗакладки);
		НетИсточников = Мин(НетИсточников, НЕ ВидимостьЗакладки); 
		
	КонецЦикла;
	Если ТипЗнч(СохраненноеЗначение_ВидимостьЗакладок) = Тип("Соответствие") Тогда
		Попытка
			ВидимостьЗакладки = (СохраненноеЗначение_ВидимостьЗакладок.Получить("Поиск") = Истина);
		Исключение
			ВидимостьЗакладки = Ложь;
		КонецПопытки;
	Иначе
		ВидимостьЗакладки = Ложь;
	КонецЕсли;
	Элементы.Поиск.Видимость = ВидимостьЗакладки;
	Элементы.ФормаПоиск.Пометка = ВидимостьЗакладки;
	Элементы.Поиск_ОткрытьЗакрыть.Пометка = ВидимостьЗакладки;
	
	Элементы.НетИсточников.Видимость = НетИсточников;
	Если НетИсточников Тогда
		НетИсточников_ПолеHTMLЗаполнение();
		Элементы.ПанельРазделов.ТекущаяСтраница = Элементы.НетИсточников;
	ИначеЕсли Элементы.ПанельРезультатов.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Элементы.ПанельРезультатов.ТекущаяСтраница = Элементы.ПанельРезультатов.ПодчиненныеЭлементы[0];
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы
// 
Процедура ПриОткрытии(Отказ)
	
	СтруктураНастроек = ПолучитьОписаниеНастроек();
	
	СоответствиеРазмерШрифта = ПолучитьЗначениеНастройки("СоответствиеРазмерШрифта", СтруктураНастроек);
	Если НЕ ТипЗнч(СоответствиеРазмерШрифта) = Тип("Соответствие") Тогда
		СоответствиеРазмерШрифта = Новый Соответствие();
	КонецЕсли;
	
	ОбработчикиЗакладок = Новый Структура();
	Для Каждого ТекЗакладка Из Закладки Цикл
		
		ВремПараметры = Новый Структура("ИмяЗакладкиИсточника, ИсточникСИ, ИсточникСИЗаголовок",
										ТекЗакладка.Ключ,
										ТекЗакладка.Значение.Источник,
										ТекЗакладка.Значение.ЗаголовокИсточника);
		ВремФорма = ПолучитьФорму(ТекЗакладка.Значение.ОбработкаИмя + ".Форма.ФормаУправляемая",
								  ВремПараметры,
								  ЭтаФорма,
								  Истина);
			
		ОбработчикиЗакладок.Вставить(ТекЗакладка.Ключ, ВремФорма);
		
		ТекЗакладка.Значение.ДобавлятьВИсторию = Истина;
		
		КнопкиЗакладки = Новый Структура();
		Для Каждого ТекКнопка Из ВремФорма.КоманднаяПанель.ПодчиненныеЭлементы Цикл
			Если НЕ ТипЗнч(ТекКнопка) = Тип("КнопкаФормы") Тогда
				Продолжить;
			КонецЕсли;
			КнопкаЗакладки = Новый Структура("Имя, Заголовок, Картинка, Отображение",
											 ТекКнопка.Имя,
											 ТекКнопка.Заголовок,
											 ТекКнопка.Картинка,
											 ТекКнопка.Отображение);
			КнопкиЗакладки.Вставить(ТекКнопка.Имя, КнопкаЗакладки);
		КонецЦикла;
		ЗаполнитьКоманднуюПанельЗакладки(ТекЗакладка.Ключ, КнопкиЗакладки);
		ОбработчикиЗакладок[ТекЗакладка.Ключ].ОбработчикСобытияПриОткрытииЗакладки(ТекЗакладка.Значение.ПараметрОткрытия);
	КонецЦикла;
	
	УстановитьТекущуюЗакладкуРаздела();
	ЭтаФорма.Заголовок = Элементы.ПанельРазделов.ТекущаяСтраница.Заголовок;
	ДоступностьКнопокРазмерШрифта();
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы
// 
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
	     Возврат;	
	КонецЕсли; 
	// Сохранение настроек.
	
	ВидимыеЗакладки = Новый Соответствие();
	
	Для Каждого ТекЗакладка Из Закладки Цикл
		ВидимыеЗакладки.Вставить(ТекЗакладка.Значение.Источник, Элементы[ТекЗакладка.Ключ].Видимость);
	КонецЦикла;
	ВидимыеЗакладки.Вставить("Поиск", Элементы.Поиск.Видимость);
	
	СтруктураНастроек = Новый Структура("СоответствиеРазмерШрифта, бит_си_ВидимостьЗакладок",
										СоответствиеРазмерШрифта,
										ВидимыеЗакладки);
	УстановитьОписаниеНастроек(СтруктураНастроек);
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
// 
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "бит_си_ОбновлениеСодержимого" Тогда
		Если НЕ ТипЗнч(Параметр) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		ЕстьСписокЗакладок = Параметр.Свойство("СписокЗакладок");
		ПараметрОткрытия = Неопределено;
		Параметр.Свойство("ПараметрОткрытия", ПараметрОткрытия);
		Для Каждого ТекЗакладка Из Закладки Цикл
			Если ЕстьСписокЗакладок Тогда
				Если Параметр.СписокЗакладок.Найти(ТекЗакладка.Значение.Источник) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ТекЗакладка.Значение.ДобавлятьВИсторию = Истина;
				Элементы[ТекЗакладка.Ключ].Видимость = Истина;
				Элементы.ПанельРазделов.ТекущаяСтраница = Элементы[ТекЗакладка.Ключ];
				Элементы.НетИсточников.Видимость	= Ложь;
				ТекЗакладка.Значение.ПараметрОткрытия = ПараметрОткрытия;
				ОбработчикиЗакладок[ТекЗакладка.Ключ].ОбработчикСобытияПриОткрытииЗакладки(ТекЗакладка.Значение.ПараметрОткрытия);
			Иначе
				ТекЗакладка.Значение.ПараметрОткрытия = ПараметрОткрытия;
				ОбработчикиЗакладок[ТекЗакладка.Ключ].ОбработчикСобытияПриОткрытииЗакладки(ТекЗакладка.Значение.ПараметрОткрытия);
			КонецЕсли;
		КонецЦикла;
		ЭтаФорма.Заголовок = Элементы.ПанельРазделов.ТекущаяСтраница.Заголовок;
		ДоступностьКнопокРазмерШрифта();
	КонецЕсли;
КонецПроцедуры // ОбработкаОповещения()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОСНОВНОЙ ПРОГРАММЫ

#Область РазделОсновнойПрограммы

#КонецОбласти


