
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	ЭтоСемействоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	
	ПодключитьСхемы(ЭтоСемействоЕРП);
	
	УправлениеВидимостьюЭлементов(ЭтоСемействоЕРП);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СхемаМеханизмТрансляцииВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
КонецПроцедуры

&НаКлиенте
Процедура СхемаМХОВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
КонецПроцедуры

&НаКлиенте
Процедура СхемаПроформыВыбор(Элемент)
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");
	Если Найти(ИмяЭлемента, "_ПроизвольнаяФорма") <> 0 Тогда	
		ПараметрыФормы = Новый Структура();
	    ПараметрыФормы.Вставить("Назначение", "ПроизвольнаяФорма");
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ПроизвольнаяФорма","_ФормаСписка");	
	иначе 
		ПараметрыФормы = Неопределено;
	КонецЕсли;
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина), ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	// Для дублирующихся элементов убираем номер из имени.
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ФормаСписка1","_ФормаСписка");	
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Форма1","_Форма");
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуПоИмени(ИмяЭлемента, Новый Структура("ПреобразоватьИзИмени",Истина));
	
КонецПроцедуры	

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Процедура управляет видимостью элементов формы.
// 
// Параметры:
//  ЭтоСемействоЕРП - Булево
//
&НаСервере
Процедура УправлениеВидимостьюЭлементов(ЭтоСемействоЕРП)
	
	Если ЭтоСемействоЕРП Тогда
		
		// Вкладка "Механизм трансляции"
		Элементы.Отчет_битchr95СоответствиеАналитикФикс_Форма.Видимость 							   = Ложь;
		Элементы.РегистрСведений_битchr95СтатьиОборотовchr95СтатьиРегл_ФормаСписка.Видимость 		   = Ложь;
		Элементы.РегистрСведений_битchr95СтатьиОборотовchr95НоменклатурныеГруппы_ФормаСписка.Видимость = Ложь;
		Элементы.РегистрСведений_битchr95ЦФОchr95Подразделения_ФормаСписка.Видимость 				   = Ложь;
		
	КонецЕсли; 	 
	
КонецПроцедуры // УправлениеВидимостьюЭлементов()

// Процедура подключает макеты-схемы.
// 
// Параметры:
//  ЭтоСемействоЕРП - Булево
//
&НаСервере
Процедура ПодключитьСхемы(ЭтоСемействоЕРП)
	
	// Устанавливаем графические схемы
	СхемаМеханизмТрансляции = Обработки.бит_ПанельФункций_ПреобразованиеДанных.ПолучитьМакет("СхемаМеханизмТрансляции");
	СхемаМХО 				= Обработки.бит_ПанельФункций_ПреобразованиеДанных.ПолучитьМакет("СхемаМХО");
	СхемаПроформы 			= Обработки.бит_ПанельФункций_ПреобразованиеДанных.ПолучитьМакет("СхемаПроформы");
	
КонецПроцедуры// ПодключитьСхемы()

#КонецОбласти
