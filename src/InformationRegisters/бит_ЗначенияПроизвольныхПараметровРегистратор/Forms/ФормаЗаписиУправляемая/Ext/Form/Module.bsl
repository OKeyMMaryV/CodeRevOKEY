
#Область ОписаниеПеременных

// Хранит текущий редактируемый параметр
&НаКлиенте
Перем мТекущийПараметр;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.бит_ЗначенияПроизвольныхПараметровРегистратор;
	
	// Вызов механизма защиты
    	
	
	бит_РаботаСДиалогамиСервер.ФормаЗаписиРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	Если Параметры.Ключ.Пустой() Тогда
	
		бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(Запись, 
																		фКэшЗначений.ИзмеренияДоп, 
																		фКэшЗначений.НастройкиИзмерений);
	
	КонецЕсли;
	
		
	// Настроим отображение полей доп. аналитик в форме.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ЭтаФорма
																				 ,фКэшЗначений.ИзмеренияДоп
																				 ,фКэшЗначений.НастройкиИзмерений);
																				 
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "Параметр".
// 
&НаКлиенте
Процедура ПараметрПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.Параметр) И Запись.Параметр <> мТекущийПараметр Тогда
	
		ИзменениеПараметраСервер();	
	
	КонецЕсли;	
	
	мТекущийПараметр = Запись.Параметр;
	
КонецПроцедуры // ПараметрПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода "Параметр".
// 
&НаКлиенте
Процедура ПараметрОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПараметрОчистка()
    
// Процедура - обработчик события "ПриИзменении" поля ввода "ЕдиницаИзмерения".
// 
&НаКлиенте
Процедура ЕдиницаИзмеренияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ЕдиницаИзмеренияОчистка()

// Процедура - обработчик события "НачалоВыбора" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,Запись
															   ,Элемент.Имя
															   ,СтандартнаяОбработка
															   ,фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // Аналитика_НачалоВыбора()

// Процедура - обработчик события "Очистка" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,Запись
	                                                                       	,Элемент.Имя
																		   	,СтандартнаяОбработка
																		   	,фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // Аналитика_Очистка()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Формирование струткуры измерений
	КоличествоИзмерений = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоИзмеренийПроизвольныхПараметров();
	ИзмеренияДоп = Новый Структура;
	Для i = 1 По КоличествоИзмерений Цикл
		ИзмеренияДоп.Вставить("Аналитика_" + Строка(i), "Аналитика " + Строка(i));
	КонецЦикла; 
	НастройкиИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиИзмеренийПроизвольногоПараметра(Запись.Параметр);
	
	фКэшЗначений.Вставить("ИзмеренияДоп"	  , ИзмеренияДоп);	
	фКэшЗначений.Вставить("НастройкиИзмерений", НастройкиИзмерений);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляет видимостью и доступностью элементов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ЭтоЧисло = Ложь;
	Если ЗначениеЗаполнено(Запись.Параметр) Тогда		
		ТипЗначенияПараметра = Запись.Параметр.ТипЗначения;
		ЭтоЧисло = ТипЗначенияПараметра.СодержитТип(Тип("Число"));		
	КонецЕсли;
	
	Элементы.ЕдиницаИзмерения.Видимость = ЭтоЧисло;              
	
	ЭтоВалюта = ТипЗнч(Запись.ЕдиницаИзмерения) = Тип("СправочникСсылка.Валюты");
	Элементы.ЕдиницаИзмерения.ТолькоПросмотр    = Не ЭтоВалюта; 
	
КонецПроцедуры // УстановитьВидимостьДоступность()

// Процедура выполняет действия, необходимые при изменения параметра.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ИзменениеПараметраСервер()

	ТекПараметр = Запись.Параметр;
	Если ЗначениеЗаполнено(ТекПараметр) Тогда
		
			НастройкиИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиИзмеренийПроизвольногоПараметра(ТекПараметр);
			фКэшЗначений.Вставить("НастройкиИзмерений", НастройкиИзмерений);
			
			бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ЭтаФорма
																					 ,фКэшЗначений.ИзмеренияДоп
																					 ,фКэшЗначений.НастройкиИзмерений);
			бит_МеханизмДопИзмерений.ОчиститьЗначенияНеподходящихТипов(Запись, 
																	фКэшЗначений.ИзмеренияДоп,
																	фКэшЗначений.НастройкиИзмерений);
			бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(Запись, 
																		фКэшЗначений.ИзмеренияДоп, 
																		фКэшЗначений.НастройкиИзмерений);
			
		ЭтоЧисло = ТекПараметр.ТипЗначения.СодержитТип(Тип("Число"));
		Если ЭтоЧисло Тогда
			Если Не ЗначениеЗаполнено(Запись.ЕдиницаИзмерения) 
				 ИЛИ ТипЗнч(Запись.ЕдиницаИзмерения) <> ТипЗнч(ТекПараметр.ЕдиницаИзмерения) Тогда
					Запись.ЕдиницаИзмерения = ТекПараметр.ЕдиницаИзмерения;
			КонецЕсли;
		Иначе
			Запись.ЕдиницаИзмерения = Неопределено;
		КонецЕсли;
		 		
	КонецЕсли;
	
	УстановитьВидимостьДоступность();	 

КонецПроцедуры // ИзменениеПараметраСервер()

#КонецОбласти

