#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция получает значения параметров на дату по структуре отбора.
// 
// Параметры:
//  Период  		 - Дата
//  СтруктураОтбора  - Структура.
//  
// Возвращаемое значение:
//   Результат - РезультатЗапроса.
// 
Функция ПолучитьРезультатЗапросаЗначенийПараметров(Период, СтруктураОтбора) Экспорт

	РезультатЗапроса = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗначенияПрПараметров.Период,
	|	ЗначенияПрПараметров.Параметр,
	|	ЗначенияПрПараметров.Сценарий,
	|	ЗначенияПрПараметров.ЕдиницаИзмерения,
	|	ЗначенияПрПараметров.Аналитика_1,
	|	ЗначенияПрПараметров.Аналитика_2,
	|	ЗначенияПрПараметров.Аналитика_3,
	|	ЗначенияПрПараметров.Аналитика_4,
	|	ЗначенияПрПараметров.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.бит_ЗначенияПроизвольныхПараметровРегистратор.СрезПоследних(
	|			&Период,
	|			%Условие%) КАК ЗначенияПрПараметров
	|";
	
	// Заполним текст условия и параметры запроса по структуре отбора.
	ТекстУсловия = "";
	Для каждого ПараметрОтбора Из СтруктураОтбора Цикл
		
		ИмяПараметра 	  = ПараметрОтбора.Ключ;
		ЗначениеПараметра = ПараметрОтбора.Значение;
		
		Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
			СтрокаУсловия = ИмяПараметра + " В(&" + ИмяПараметра + ")";
		Иначе	
		    СтрокаУсловия = ИмяПараметра + " = &" + ИмяПараметра;
		КонецЕсли;
		
		ТекстУсловия  = ТекстУсловия + ?(ТекстУсловия = "", СтрокаУсловия, " И " + СтрокаУсловия);
	
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", ТекстУсловия);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьРезультатЗапросаЗначенийПараметров()

// Функция получает значения параметров на дату по структуре отбора.
// 
// Параметры:
//  Период  		 - Дата
//  СтруктураОтбора  - Структура.
//  
// Возвращаемое значение:
//   ЗначениеПараметра - Любое значение.
// 
Функция ПолучитьЗначениеПараметраПоОтбору(Период, Параметр, СтруктураОтбора) Экспорт

	СтруктураОтбора.Вставить("Параметр", Параметр);
	РезультатЗапроса = ПолучитьРезультатЗапросаЗначенийПараметров(Период, СтруктураОтбора);
	Если РезультатЗапроса.Пустой() Тогда
		
		РезультатЗапроса = Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗначениеПараметра = Выборка.ЗначениеПараметра;
	
	КонецЕсли;

	Возврат ЗначениеПараметра;
	
КонецФункции // ПолучитьЗначениеПараметраПоОтбору()

// Получает значение нормы для документов бюджетирования.
// 
// Параметры:
//   ВидПараметра - ПланВидовХарактеристикСсылка.бит_ВидыПроизвольныхПараметров
//   Период - Дата
//   Сценарий - СправочникСсылка.СценарииПланирования
//   Отбор - Массив.
// 
// Возвращаемое значение:
//  ЗначениеНормы - Число.
// 
Функция ПолучитьЗначениеНормы(ВидПараметра, Период, Сценарий, Отбор, СтрКурсаДок) Экспорт

	ЗначениеНормы = 0;
	
	ИмяСпрСц = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	ПустойСц = Справочники[ИмяСпрСц].ПустаяСсылка();
	
	СписокСценариев = Новый СписокЗначений;
	СписокСценариев.Добавить(Сценарий);
	СписокСценариев.Добавить(ПустойСц);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ВидПараметра", ВидПараметра);
	Запрос.УстановитьПараметр("СписокСценариев", СписокСценариев);
	Запрос.УстановитьПараметр("ПустойСценарий", ПустойСц);
	Для каждого эо Из Отбор Цикл
		
		// Установка параметров для отбора
		Запрос.УстановитьПараметр("Зн_"+эо.Имя,эо.Значение);
		ПустоеЗначение = Неопределено;
		Если ЗначениеЗаполнено(эо.Значение) Тогда
		
			 ТекТип = ТипЗнч(Эо.Значение);
			 ТекМассив = Новый Массив;
			 ТекМассив.Добавить(ТекТип);
			 ТекОписание = Новый ОписаниеТипов(ТекМассив);
			 ПустоеЗначение = ТекОписание.ПривестиЗначение();
		
		КонецЕсли; 
		Запрос.УстановитьПараметр("Пустое_"+эо.Имя, ПустоеЗначение);
		
	КонецЦикла; 
		
	// Извлекаем значение параметра
	// заполненный сценарий имеет больший приоритет перед пустым
	// заполненная аналитика имеет больший приоритет перед пустой.
	Шаблон = "ВЫБРАТЬ
	         |	ЗнчПараметров.Параметр,
	         |	ЗнчПараметров.ЕдиницаИзмерения,
	         |	ЗнчПараметров.Аналитика_1 КАК Аналитика_1,
	         |	ЗнчПараметров.Аналитика_2 КАК Аналитика_2,
	         |	ЗнчПараметров.Аналитика_3 КАК Аналитика_3,
	         |	ЗнчПараметров.Аналитика_4 КАК Аналитика_4,
	         |	ЗнчПараметров.ЗначениеПараметра КАК ЗначениеПараметра,
	         |	ВЫБОР
	         |		КОГДА ЗнчПараметров.Сценарий = &ПустойСценарий
	         |			ТОГДА 2
	         |		ИНАЧЕ 1
	         |	КОНЕЦ КАК Приоритет
	         |ИЗ
	         |	РегистрСведений.бит_ЗначенияПроизвольныхПараметровРегистратор.СрезПоследних(&Период, Сценарий В (&СписокСценариев)) КАК ЗнчПараметров
	         |ГДЕ
	         |	ЗнчПараметров.Параметр = &ВидПараметра
			 |{%Для Каждого ЭлементОтбора ИЗ Отбор ЦИКЛ%}
	         | И (ЗнчПараметров.{%ЭлементОтбора.Имя%} = &Зн_{%ЭлементОтбора.Имя%} 
			 |     ИЛИ ЗнчПараметров.{%ЭлементОтбора.Имя%} = &Пустое_{%ЭлементОтбора.Имя%}
			 |     ИЛИ ЗнчПараметров.{%ЭлементОтбора.Имя%}.Ссылка ЕСТЬ NULL)
	         |{%КонецЦикла%}			 			 
	         |
	         |УПОРЯДОЧИТЬ ПО
	         |	Приоритет,
	         |	Аналитика_1 УБЫВ,
	         |	Аналитика_2 УБЫВ,
	         |	Аналитика_3 УБЫВ,
	         |	Аналитика_4 УБЫВ
	         |АВТОУПОРЯДОЧИВАНИЕ";
	
				   
   СтрКонтекст = Новый Структура("Отбор", Отбор);
   Запрос.Текст = бит_СтрокиКлиентСервер.ОбработатьТекстШаблона(Шаблон,СтрКонтекст);
   
   Результат = Запрос.Выполнить();
   
   Выборка = Результат.Выбрать();
   
   Если Выборка.Следующий() Тогда
	   
	   СтрКурсаПарам = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, Выборка.ЕдиницаИзмерения, Период);
	   
	   ЗначениеНормы = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.ЗначениеПараметра
																			   , Выборка.ЕдиницаИзмерения
	                                                                           , СтрКурсаДок.Валюта	
																			   , СтрКурсаПарам.Курс																			   
																			   , СтрКурсаДок.Курс
																			   , СтрКурсаПарам.Кратность																			   
																			   , СтрКурсаДок.Кратность);
	   
	   
	   
   КонецЕсли; 
   
   Если НЕ ТипЗнч(ЗначениеНормы) = Тип("Число") Тогда
	   
	   ЗначениеНормы = 0;
	   
   КонецЕсли; 
	
	Возврат ЗначениеНормы;
	
КонецФункции // ПолучитьЗначениеНормы()

#КонецОбласти

#КонецЕсли
