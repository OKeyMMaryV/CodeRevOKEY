
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.бит_му_УчетнаяПолитика;
    
    бит_РаботаСДиалогамиСервер.ФормаСпискаРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	фНастройкиФормыВосстановлены = Ложь;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РедактироватьГруппуНастроек = ?(фНастройкиФормыВосстановлены, РедактироватьГруппуНастроек, Истина);
	Элементы.ФормаРедактироватьЗаписьГруппуЗаписей.Пометка = РедактироватьГруппуНастроек;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["РедактироватьГруппуНастроек"] <> Неопределено Тогда
		фНастройкиФормыВосстановлены = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
	     Возврат;	
	КонецЕсли; 
	 
	// Для обеспечения обновления кэша на клиенте.
	бит_ОбщегоНазначенияКлиент.УдалитьЗначениеКэша("бит_му_УчетнаяПолитика");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактироватьГруппуНастроек Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		ОткрытьФормуРедактированияГруппыНастроек(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если РедактироватьГруппуНастроек
		И НЕ Копирование Тогда
		
		Отказ = Истина;
		
		ОткрытьФормуРедактированияГруппыНастроек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если РедактироватьГруппуНастроек Тогда
		
		Отказ = Истина;
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		ОткрытьФормуРедактированияГруппыНастроек(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
    
    ПроверитьВозможностьУдалениеЗаписей(Отказ);
        	
КонецПроцедуры // СписокПередУдалением()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактироватьЗаписьГруппуЗаписей(Команда)
	
	РедактироватьГруппуНастроек = НЕ РедактироватьГруппуНастроек;
	
	Элементы.ФормаРедактироватьЗаписьГруппуЗаписей.Пометка = РедактироватьГруппуНастроек;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияГруппыНастроек(ТекущиеДанные=Неопределено)
	
	ПараметрыФормы = Новый Структура;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПараметрыФормы.Вставить("Период", ТекущаяДата());
	Иначе
		ПараметрыФормы.Вставить("Период", ТекущиеДанные.Период);
		ПараметрыФормы.Вставить("Организация", ТекущиеДанные.Организация);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуРедактированияГруппыНастроекЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.бит_му_УчетнаяПолитика.Форма.ФормаРедактированияНастроекУправляемая"
	, ПараметрыФормы
	, ЭтаФорма
	,
	,
	,
	, Обработчик,);
	
КонецПроцедуры

// Процедура - завершение открытия формы редактирования группы настроек.
// 
&НаКлиенте
Процедура ОткрытьФормуРедактированияГруппыНастроекЗавершение(Результат, Параметры) Экспорт
	
	Элементы.Список.Обновить();	
	
КонецПроцедуры

// Процедура проверяет возможность удаления записей и удаляет доступные.
//
// Параметры:
//  Отказ - Булево
//
&НаСервере
Процедура ПроверитьВозможностьУдалениеЗаписей(Отказ)
	
	МассивУдаляемых = Новый Массив;
	ПараметрВалютаМУ = ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.ВалютаМеждународногоУчета;
	
	Для каждого ТекКлючЗаписи Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Если НЕ ТекКлючЗаписи.Пустой() И ТекКлючЗаписи.Настройка = ПараметрВалютаМУ Тогда
			
			// Проверка есть ли движения МУ.
			// Если движения есть - нельзя удалять запись о валюте МУ.
			ВозможноУдаление = НЕ бит_му_ОбщегоНазначения.ЕстьДвиженияПоМУ(ТекКлючЗаписи.Организация);
			
			ТекстСообщения = НСтр("ru='Для организации ""%1%"" обнаружены движения по международному учету. Удаление невозможно!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекКлючЗаписи.Организация);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			
		Иначе
			
			// Заполнение массива записей доступных для удаления
			МассивУдаляемых.Добавить(ТекКлючЗаписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		
		// Если в массиве выделенных строк оказались неудаляемые, то удалим остальные принудительно.
		Для каждого ТекКлючЗаписи Из МассивУдаляемых Цикл
			
			// Удаление доступных записей
			ОднаЗапись = РегистрыСведений.бит_му_УчетнаяПолитика.СоздатьМенеджерЗаписи();
			ОднаЗапись.Период      = ТекКлючЗаписи.Период;
			ОднаЗапись.Организация = ТекКлючЗаписи.Организация;
			ОднаЗапись.Настройка   = ТекКлючЗаписи.Настройка;
			ОднаЗапись.Прочитать();
			Если ОднаЗапись.Выбран() Тогда
				ОднаЗапись.Удалить();
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьУдалениеЗаписей()

#КонецОбласти
