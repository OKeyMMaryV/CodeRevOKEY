
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = Параметры.Организация;
	Период 		= Параметры.Период;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Возврат;	
	КонецЕсли; 
		
	ОбновитьДеревоНастроек(); 
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.бит_му_УчетнаяПолитика, Пользователи.ТекущийПользователь()) Тогда
		Элементы.Записать.Доступность              = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьДеревоНастроек();
	РазвернутьДеревоНастроек();
	
КонецПроцедуры // ПериодПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДеревоНастроек();
	РазвернутьДеревоНастроек();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура выполяет действия, необходимые при изменении значения настройки.
// 
// Параметры:
//  ТекущиеДанные
// 
&НаКлиенте
Процедура ОбработкаИзмененияЗначенияНастройки(ТекущиеДанные)

	ТекущееИзменено = ТекущиеДанные.Изменено;
	
	Если ТекущиеДанные.ЗначениеНастройки = ТекущиеДанные.ПервоначальноеЗначение Тогда
		
		ТекущиеДанные.Изменено = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ЗначениеНастройки) 
		ИЛИ ТекущиеДанные.ЗначениеНастройки = 0 
		ИЛИ ТекущиеДанные.ЗначениеНастройки = Ложь Тогда	
		
		ТекущиеДанные.Изменено = Истина;
		
	Иначе
		
		ТекстСообщения = Нстр("ru = 'Новое значение настройки не может быть пустым.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		ТекущиеДанные.ЗначениеНастройки = ТекущиеДанные.ПервоначальноеЗначение;
		
		ТекущиеДанные.Изменено = Ложь;
		
	КонецЕсли;       
	
	Если ТекущееИзменено И Не ТекущиеДанные.Изменено Тогда // Изменили значение с "Истина" на "Ложь"
		КоличествоИзмененных = КоличествоИзмененных - 1;	
	ИначеЕсли Не ТекущееИзменено И ТекущиеДанные.Изменено Тогда // Изменили значение с "Ложь" на "Истина"
		КоличествоИзмененных = КоличествоИзмененных + 1;	
	КонецЕсли;	

	// Изменение кода. Начало. 08.04.2016{{
	Если ТекущиеДанные.Изменено Тогда
	
		ПроверитьЗаполнениеКалендаря(ТекущиеДанные.ЗначениеНастройки);
		
	КонецЕсли; 
	// Изменение кода. Конец. 08.04.2016}}
	
КонецПроцедуры // ОбработкаИзмененияЗначенияНастройки() 

// Процедура разворачивает дерево настроек.
// 
// Параметры:
//  Нет
// 
&НаКлиенте
Процедура РазвернутьДеревоНастроек()

	СтрокиДерева = ДеревоНастроек.ПолучитьЭлементы();
	Для каждого Стр Из СтрокиДерева Цикл
		Идентификатор = Стр.ПолучитьИдентификатор();
	    Элементы.ДеревоНастроек.Развернуть(Идентификатор, Истина);
	КонецЦикла;	

КонецПроцедуры // РазвернутьДеревоНастроек()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастроек

&НаКлиенте
Процедура ДеревоНастроекЗначениеНастройкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные   = Элементы.ДеревоНастроек.ТекущиеДанные;
		
	Если ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.СпособОценкиМПЗ") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоНастроекЗначениеНастройкиНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
        
        СписокВыбораСпособаОценкиМПЗ = Новый СписокЗначений;
	    СписокВыбораСпособаОценкиМПЗ.Добавить(ПредопределенноеЗначение("Перечисление.бит_СпособыОценки.ФИФО"));
	    СписокВыбораСпособаОценкиМПЗ.Добавить(ПредопределенноеЗначение("Перечисление.бит_СпособыОценки.ПоСредней"));
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбораСпособаОценкиМПЗ);
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоНастроекЗначениеНастройкиНачалоВыбора()

// Процедура - завершение обработки выбора реквизита "ЗначениеНастройки" табличного поля "ДеревоНастроек".
// 
&НаКлиенте
Процедура ДеревоНастроекЗначениеНастройкиНачалоВыбораЗавершение(ВыбранныйСпособ, ТекущиеДанные) Экспорт
	
	Если ВыбранныйСпособ <> Неопределено Тогда
		
		ТекущиеДанные.ЗначениеНастройки = ВыбранныйСпособ.Значение;
		ОбработкаИзмененияЗначенияНастройки(ТекущиеДанные);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЗначениеНастройкиПриИзменении(Элемент)
	
	ТекущиеДанные   = Элементы.ДеревоНастроек.ТекущиеДанные;
	ОбработкаИзмененияЗначенияНастройки(ТекущиеДанные); 
		
КонецПроцедуры // ДеревоНастроекЗначениеНастройкиПриИзменении()

&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные   = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	// Изменение кода. Начало. 14.04.2014{{
	Если ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.СчетНераспределеннойПрибыли") 
		ИЛИ ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.СчетГотовойПродукции")
		ИЛИ ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.ПромежуточныйСчетДляКонсолидации") Тогда
		
		УстановитьПараметрыВыбораДляСчетов();
		
	Иначе 
		Элементы.ДеревоНастроекЗначениеНастройки.ПараметрыВыбора = Новый ФиксированныйМассив(новый массив);
		
	КонецЕсли;
	// Изменение кода. Конец. 14.04.2014}}
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Если КоличествоИзмененных = 0 Тогда 
		
		ОбновитьДеревоНастроек();
		РазвернутьДеревоНастроек(); 
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьЗавершение", ЭтотОбъект);
		ТекстВопроса = Нстр("ru = 'При обновлении несохраненные настройки будут потеряны. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 10);
		
	КонецЕсли;
		
КонецПроцедуры // Обновить()

// Процедура - завершение обработки команды "Обновить".
// 
&НаКлиенте
Процедура КомандаОбновитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьДеревоНастроек ();
	КонецЕсли;
	
	РазвернутьДеревоНастроек(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
    
    ЗаписатьНастройки(Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьНастройки(Ложь); 	
	
КонецПроцедуры // Записать()

&НаКлиенте
Процедура ЗаписатьНастройки(НужноЗакрыть)
	
    // Изменение кода. Начало. 08.04.2016{{
	Если ПустойКалендарь Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо выбрать производственный календарь!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	// Изменение кода. Конец. 08.04.2016}}
	
	Если КоличествоИзмененных > 0 Тогда
		
		МожноЗакрыть = ВыполнитьЗаписьНастроек();
		// Для обеспечения обновления кэша на клиенте.
		бит_ОбщегоНазначенияКлиент.УдалитьЗначениеКэша("бит_му_УчетнаяПолитика");
		
	Иначе
		
		ТекстСообщения = Нстр("ru = 'Настройки не изменены.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		МожноЗакрыть = Истина;
		
	КонецЕсли; 	
	
	Если НужноЗакрыть И МожноЗакрыть Тогда
		Закрыть();
    КонецЕсли;
    
КонецПроцедуры // ЗаписатьНастройки()

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры // Отмена()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ДеревоНастроекЗначениеНастройки);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура обновляет дерево настроек.
// 
// Параметры:
// 
&НаСервере
Процедура ОбновитьДеревоНастроек()

	КореньДерева = ДеревоНастроек.ПолучитьЭлементы();
	КореньДерева.Очистить();
	
	КоличествоИзмененных = 0;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"	   , Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Настройки.Ссылка КАК Настройка,
	               |	Настройки.ЭтоГруппа,
	               |	УчетнаяПолитика.ЗначениеНастройки,
	               |	УчетнаяПолитика.ЗначениеНастройки КАК ПервоначальноеЗначение
	               |ИЗ
	               |	ПланВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики КАК Настройки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитика
	               |		ПО Настройки.Ссылка = УчетнаяПолитика.Настройка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Настройки.Наименование ИЕРАРХИЯ";
	Результат = Запрос.Выполнить();
	
	ВыборкаВерх = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДобавитьВеткуДерева(КореньДерева, ВыборкаВерх);
	      
	РазрешеноРедактироватьВалютуМСФО = бит_му_ОбщегоНазначения.ЕстьДвиженияПоМУ(Организация);
	РазрешеноРедактироватьПромежуточныйСчетДляКонсолидации = РегистрыСведений.бит_му_УчетнаяПолитика.РазрешеноРедактироватьПромежуточныйСчетДляКонсолидации(Организация);

КонецПроцедуры // ОбновитьДеревоНастроек()

// Процедура добавляет строки в дерево настроек для текущей группы.
// 
// Параметры:
//  Выборка
// 
&НаСервере
Процедура ДобавитьВеткуДерева(ВеткаДерева, ВыборкаВерх)

	Пока ВыборкаВерх.Следующий() Цикл
		
		СтрокаДерева = ВеткаДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, ВыборкаВерх);
				
		Если ВыборкаВерх.ЭтоГруппа Тогда
			
			Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			ДобавитьВеткуДерева(СтрокаДерева.ПолучитьЭлементы(), Выборка);
			
		КонецЕсли;
			
	КонецЦикла;		

КонецПроцедуры // ДобавитьВеткуДерева()

&НаСервере
Функция ВыполнитьЗаписьНастроек()
	
	УдалосьЗаписать = Истина;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		
		ТекстСообщения = Нстр("ru = 'Не заполнено значение реквизита ""Период""!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		УдалосьЗаписать =  Ложь;
		
	Иначе
			
		ЗаписатьНастройкиДляВеткиДерева(ДеревоНастроек.ПолучитьЭлементы(), УдалосьЗаписать);
				
	КонецЕсли;
	
	Возврат УдалосьЗаписать;
	
КонецФункции // ВыполнитьЗаписьНастроек()

// Процедура записывает настройки для ветки дерева.
// 
// Параметры:
//  Параметр1  - Тип_описание
//  Параметр2  - Тип_описание
// 
&НаСервере
Процедура ЗаписатьНастройкиДляВеткиДерева(ВеткаДерева, УдалосьЗаписать)

	Для Каждого ТекСтрока Из ВеткаДерева Цикл
			
		Если ТекСтрока.ЭтоГруппа Тогда
			
			ЗаписатьНастройкиДляВеткиДерева(ТекСтрока.ПолучитьЭлементы(), УдалосьЗаписать);
			
		ИначеЕсли ТекСтрока.Изменено Тогда
			
			МенеджерЗаписи = РегистрыСведений.бит_му_УчетнаяПолитика.СоздатьМенеджерЗаписи();
					
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекСтрока);
			МенеджерЗаписи.Период		= ?(ТекСтрока.Настройка = ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.ВалютаМеждународногоУчета,
											ДАТА('19800101'),
											Период);
			МенеджерЗаписи.Организация 	= Организация;
					
			// Попытаемся записать менеджер записи.
			ОтказЗаписи = Ложь;
			
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				ТекстСообщения = "Не удалось записать значение настройки """ + ТекСтрока.Настройка + """: ";
				бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + ОписаниеОшибки(), ОтказЗаписи);
			КонецПопытки;
			
			Если УдалосьЗаписать И ОтказЗаписи Тогда
				УдалосьЗаписать = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;  	

КонецПроцедуры // ЗаписатьНастройкиДляВеткиДерева()

// Функция проверяет на заполненность настройку производственного
// календаря. 
//
&НаСервере
Функция ПроверитьЗаполнениеКалендаря(ЗначениеНастройки)

	Если ЗначениеЗаполнено(ЗначениеНастройки)
		И ТипЗнч(ЗначениеНастройки) = Тип("СправочникСсылка.ПроизводственныеКалендари") Тогда
	
		ПустойКалендарь = Ложь;
		ТекущийКалендарьЗаполнен = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеНастройки)
		И (ЗначениеНастройки = Перечисления.бит_му_РасчетРезервовДебиторскойЗадолженности.БезУчетаВыходных
		ИЛИ ЗначениеНастройки = Перечисления.бит_му_РасчетРезервовМПЗ.БезУчетаВыходных) Тогда	
		
		ПустойКалендарь = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеНастройки)
		И (ЗначениеНастройки = Перечисления.бит_му_РасчетРезервовДебиторскойЗадолженности.СУчетомВыходных
		ИЛИ ЗначениеНастройки = Перечисления.бит_му_РасчетРезервовМПЗ.СУчетомВыходных) Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период"	   , Период);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Настройки.Ссылка КАК Настройка,
		|	Настройки.ЭтоГруппа,
		|	УчетнаяПолитика.ЗначениеНастройки,
		|	УчетнаяПолитика.ЗначениеНастройки КАК ПервоначальноеЗначение
		|ИЗ
		|	ПланВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики КАК Настройки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитика
		|		ПО Настройки.Ссылка = УчетнаяПолитика.Настройка
	    |
		|УПОРЯДОЧИТЬ ПО
		|	Настройки.Наименование ИЕРАРХИЯ
		|";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если ЗначениеЗаполнено(Выборка.Настройка.ТипЗначения)
				И Выборка.Настройка.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПроизводственныеКалендари")
				И НЕ ЗначениеЗаполнено(Выборка.ЗначениеНастройки)
				И НЕ ТекущийКалендарьЗаполнен Тогда
			
				ТекстСообщения = Нстр("ru = 'Необходимо выбрать производственный календарь!'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				ПустойКалендарь = Истина;
				
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецФункции // ПроверитьЗаполнениеКалендаря()

#КонецОбласти
