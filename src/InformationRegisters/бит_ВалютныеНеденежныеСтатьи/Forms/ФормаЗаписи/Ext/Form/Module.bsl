
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Если это открытие существующей записи, тогда.
	Если Не Параметры.Ключ.Пустой()
		И Не ЗначениеЗаполнено(фОбъектСистемыИзСписка) Тогда
		
		Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ТаблицаФормы") 
			И ЭтаФорма.ВладелецФормы.Родитель.фФормаСпискаОткрытаСОтбором Тогда
			Элементы.ОбъектСистемы.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.бит_ВалютныеНеденежныеСтатьи;
	
	// Вызов механизма защиты.
		
	
	бит_РаботаСДиалогамиСервер.ФормаЗаписиРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ЗначенияЗаполнения.Свойство("ОбъектСистемы", фОбъектСистемыИзСписка);
	
	Если Параметры.Ключ.Пустой()
		И Не Значениезаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Если ЗначениеЗаполнено(фОбъектСистемыИзСписка) Тогда
			Запись.ОбъектСистемы = фОбъектСистемыИзСписка;
		Иначе
			// Для новой записи заполним объект системы из настроек пользователя.
			ПолучаемаяНастройка  = ПланыВидовХарактеристик.бит_НастройкиПользователей.ОсновнойРегистрБухгалтерииУУ;
			Запись.ОбъектСистемы = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(ПолучаемаяНастройка);
		КонецЕсли;
		
		// Приведем тип значения счета.
		ПривестиТипЗначенияСчета();
		
	КонецЕсли;
	
	// Заполним значения реквизитов формы.
	МетаРегБухБюджетирование = Метаданные.РегистрыБухгалтерии.бит_Бюджетирование;	
	фРегБухБюджетирование    = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегБухБюджетирование);
	
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() Тогда
		МетаРегБухМеждународный = Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2;
		фРегБухМеждународный    = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегБухМеждународный);
	КонецЕсли;
	
	// Сформируем список регистров бухгалтерии для выбора.
	ВидОбъектаРегБух = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии;
	
	фСписокРегистров = бит_УправленческийУчет.СформироватьСписокОбъектовДляВыбора(ВидОбъектаРегБух, "бит_Дополнительный");
	фСписокРегистров.Добавить(фРегБухБюджетирование
							 ,"Журнал проводок (бюджетирование)"
							 ,
							 ,БиблиотекаКартинок.РегистрБухгалтерии);
	
	// Отсортируем список регистров для выбора.
	фСписокРегистров.СортироватьПоПредставлению();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	УстановитьПараметрыВыбораДляСчетов();

КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "НачалоВыбора" поля ввода "ОбъектСистемы".
// 
&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	ИзменениеОбъектСистемыСервер();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ОбъектСистемы".
// 
&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбъектСистемыНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, фСписокРегистров, Элемент, фСписокРегистров.НайтиПоЗначению(Запись.ОбъектСистемы));
	
КонецПроцедуры

// Процедура - завершение обработчика события "НачалоВыбора" поля ввода "ОбъектСистемы".
// 
&НаКлиенте
Процедура ОбъектСистемыНачалоВыбораЗавершение(ВыбранноеЗначение, Парамтры)Экспорт
	
   Если Не ВыбранноеЗначение = Неопределено Тогда
		
		Запись.ОбъектСистемы = ВыбранноеЗначение.Значение;
		ИзменениеОбъектСистемыСервер();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОбъектСистемы.Видимость = Не ЗначениеЗаполнено(фОбъектСистемыИзСписка);
	
	ОбъектСистемы = Запись.ОбъектСистемы;
	
	Элементы.Счет.ТолькоПросмотр = Не ЗначениеЗаполнено(ОбъектСистемы);
	
	// Управление видимостью флагов настройки ресурсов.
	Элементы.СуммаСценарий.Видимость = ОбъектСистемы = фРегБухБюджетирование;
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() Тогда
		Элементы.СуммаМУ.Видимость = ОбъектСистемы = фРегБухМеждународный;	
	КонецЕсли;                                                                                    	
	
КонецПроцедуры // УправлениеЭлементамиФормы()

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.Счет);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура обрабатывает изменение объекта системы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ИзменениеОбъектСистемыСервер()
	
	Если Запись.СуммаСценарий И Не Запись.ОбъектСистемы = фРегБухБюджетирование Тогда
		Запись.СуммаСценарий = Ложь;
	КонецЕсли;
	
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() Тогда
		Если Запись.СуммаМУ И Не Запись.ОбъектСистемы = фРегБухМеждународный Тогда
			Запись.СуммаМУ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Приведем тип значения счета.
	ПривестиТипЗначенияСчета();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры // ИзменениеОбъектСистемыСервер()

// Процедура приводит тип значения счета к типу плана счетов выбранного регистра бухгалтерии.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ПривестиТипЗначенияСчета()
	
	Если Не ЗначениеЗаполнено(Запись.ОбъектСистемы) Тогда
		Запись.Счет = Неопределено;
	Иначе
		
		// Получим пустую ссылку плана счетов выбранного регистра бухгалтерии.
		ИмяРегБух 	     = Запись.ОбъектСистемы.ИмяОбъекта;
		ИмяПланаСчетов   = Метаданные.РегистрыБухгалтерии[ИмяРегБух].ПланСчетов.Имя;
		СчетПустаяСсылка = ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка();
		
		Если Запись.Счет = Неопределено Тогда
			Запись.Счет = СчетПустаяСсылка;
		Иначе
			
			Если Не ТипЗнч(Запись.Счет) = ТипЗнч(СчетПустаяСсылка) Тогда
				
				// Найдем счет по коду ранее выбранного счета.
				СчетДляЗамены = ПланыСчетов[ИмяПланаСчетов].НайтиПоКоду(Запись.Счет.Код);
				
				Если ЗначениеЗаполнено(СчетДляЗамены) Тогда
					Запись.Счет = СчетДляЗамены;
				Иначе
					Запись.Счет = СчетПустаяСсылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; // Если Не ЗначениеЗаполнено(ОбъектСистемы) Тогда.
	
КонецПроцедуры // ПривестиТипЗначенияСчета()

#КонецОбласти

