
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.бит_МаскиКодов;
	       	
	Если Не Параметры.ЗначениеКопирования.Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	бит_РаботаСДиалогамиСервер.ФормаЗаписиРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	бит_РаботаСДиалогамиСервер.ФормаЗаписиРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);
	
	ЗаполнитьКэшЗначений();
	
	фЭтоПланСчетов = ЗначениеЗаполнено(Запись.ОбъектСистемы) 
					 И Запись.ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.ПланСчетов;
	УстановитьВидимостьДоступность();
	
	Если Не Параметры.Ключ.Пустой() Тогда
		УстановитьДлинуКода();
		ОпределитьКоличествоЗначимыхСимволов();
		УстановитьДоступностьФлагаАвтозаполнения();
	КонецЕсли;
	
	МассивРазделителей = бит_БухгалтерияКлиентСервер.ПолучитьМассивДоступныхРазделителейМасокПлановСчетов();
	фСтрокаРазделителей = "";
	Для каждого ТекРазделитель Из МассивРазделителей Цикл
	 	фСтрокаРазделителей = ?(фСтрокаРазделителей = "", "", ", ") + """" + ТекРазделитель + """";
	КонецЦикла;  	
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Запись.МаскаКода = Лев(Запись.МаскаКода, ДлинаКода); 
	
	Если Запись.МаскаКода = "" Тогда		
		ЗаполнитьМаскуКодаПоУмолчанию();
		МаскаНеКорректна = Ложь;    		
	КонецЕсли;
	
	// Если план счетов пуст, то текущая маска автоматически меняется
	// Нет необходимости конвертировать.
	Если Не ЕстьОбъектыДляКонвертации(Запись.ОбъектСистемы) Тогда
		Запись.МаскаТекущая = Запись.МаскаКода;	
	КонецЕсли;
	
	Если МаскаНеКорректна Тогда
		
		ТекстСообщения = Нстр("ru = 'Маска может состоять только из значимых символов ""@"" и разделителей '") + фСтрокаРазделителей;// ""."", ""/"", ""-"", ""_"".'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
		
	Иначе
		
		Если Запись.МаскаКода <> Запись.МаскаТекущая Тогда
			ОповеститьОЗаписиНового(Запись.ИсходныйКлючЗаписи);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если фЭтоПланСчетов Тогда
		Возврат; 	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , фКэшЗначений.СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", фКэшЗначений.ДоступныеОбъектыСистемы);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Запись.ОбъектСистемы);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);
	
КонецПроцедуры // ОбъектСистемыНачалоВыбора

&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	ЗаполнитьДанныеФормыПоУмолчанию();	
		
КонецПроцедуры // ОбъектСистемыПриИзменении()

&НаКлиенте
Процедура ОбъектСистемыОчистка(Элемент, СтандартнаяОбработка)
	
	Если фЭтоПланСчетов Тогда
	 	СтандартнаяОбработка = Ложь;
	КонецЕсли;   	
	
КонецПроцедуры // ОбъектСистемыОчистка()

&НаКлиенте
Процедура ИмяРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	Если ЗначениеЗаполнено(Запись.ОбъектСистемы) Тогда
		УстановитьДанныеВыбораИмяРеквизита(Запись.ОбъектСистемы, ДанныеВыбора);
	Иначе
		ТекстСообщения = Нстр("ru = 'Выберите объект системы.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;
		
КонецПроцедуры // ИмяРеквизитаНачалоВыбора()

&НаКлиенте
Процедура ИмяРеквизитаПриИзменении(Элемент)
	
	ЗаполнитьДанныеФормыПоУмолчанию();
		
КонецПроцедуры // ИмяРеквизитаПриИзменении()

&НаКлиенте
Процедура МаскаКодаПриИзменении(Элемент)
	
	Если СтрДлина(СокрЛП(Запись.МаскаКода)) > ДлинаКода Тогда
		ТекстСообщения = Нстр("ru = 'Длина кода не должна превышать %1%'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ДлинаКода);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Запись.МаскаКода = Лев(Запись.МаскаКода, ДлинаКода);
	КонецЕсли;
	
	Маска = Запись.МаскаКода;
	МаскаНеКорректна = Ложь;
	
	МсКоличествоЗначимых   = СтрЧислоВхождений(Маска, "@");
	КоличествоРазделителей = бит_БухгалтерияКлиентСервер.ПолучитьКоличествоРазделителейМаски(Маска);
		
	Если СтрДлина(Маска) > 0 Тогда
		
		Если СтрДлина(Маска) > (МсКоличествоЗначимых + КоличествоРазделителей) Тогда
			// Запись.МаскаКода = Запись.МаскаТекущая;
			ТекстСообщения = Нстр("ru = 'Маска может состоять только из значимых символов ""@"" и разделителей '") + фСтрокаРазделителей;// ""."", ""/"", ""-"", ""_"".'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			МаскаНеКорректна = Истина;
		КонецЕсли;	
		Если фЭтоПланСчетов И МсКоличествоЗначимых < КоличествоЗначимыхСимволов Тогда
			ТекстСообщения = Нстр("ru = 'Маска плана счетов некорректна - недостаточно значимых символов.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			// МаскаНеКорректна = Истина;	
		КонецЕсли;
			 	
	КонецЕсли;
	
КонецПроцедуры // МаскаКодаПриИзменении() 

&НаКлиенте
Процедура МаскаКодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьМаскуКодаПоУмолчанию();
	               		
КонецПроцедуры // МаскаКодаОчистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КонвертироватьКоды(Команда)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Элемент будет записан перед конвертацией. Продолжить?'");
	
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗаверщитьКонвертироватьКоды", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса,РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	Иначе
		
		КонвертироватьКодыНаСервере();

	КонецЕсли;
		
КонецПроцедуры // КонвертироватьКоды()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  ДопПараметры - Структура.
// 
&НаКлиенте
Процедура ВопросЗаверщитьКонвертироватьКоды(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		КонвертироватьКодыНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ВопросЗаверщитьКонвертироватьКоды()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	ВидОбъекта_Спр = Перечисления.бит_ВидыОбъектовСистемы.Справочник;
	МассивТиповСправочников = Новый Массив;
	МассивТиповСправочников.Добавить("СправочникСсылка.бит_СтатьиОборотов");
    МассивТиповСправочников.Добавить(бит_ОбщегоНазначения.ПолучитьИмяТипаЦФО());
    Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
        МассивТиповСправочников.Добавить(бит_ОбщегоНазначения.ПолучитьИмяТипаПроекты());
    КонецЕсли;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(ВидОбъекта_Спр);
	фКэшЗначений.Вставить("СписокВидовОбъектов", СписокВидовОбъектов);
	
	ДоступныеОбъектыСистемы = Новый СписокЗначений;
	Для каждого ЭлТип Из МассивТиповСправочников Цикл
		НайдОбъект = бит_УправлениеОбъектамиСистемы.НайтиОбъектДоступаПоТипу(Тип(ЭлТип), ВидОбъекта_Спр);
		Если ЗначениеЗаполнено(НайдОбъект) Тогда
		 	ДоступныеОбъектыСистемы.Добавить(НайдОбъект);		
		КонецЕсли;                                       		
	КонецЦикла;
	фКэшЗначений.Вставить("ДоступныеОбъектыСистемы", ДоступныеОбъектыСистемы);
 
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура УстановитьВидимостьДоступность()

	Если фЭтоПланСчетов Тогда
		Элементы.ОбъектСистемы.ТолькоПросмотр = Истина;
		Элементы.ИмяРеквизита.ТолькоПросмотр  = Истина;
	КонецЕсли;
	Если Не ПустаяСтрока(Запись.МаскаТекущая) Тогда
		Элементы.ОбъектСистемы.ТолькоПросмотр = Истина;
		Элементы.ИмяРеквизита.ТолькоПросмотр  = Истина;
	КонецЕсли;	

КонецПроцедуры // УстановитьВидимостьДоступность()

&НаСервере
Процедура УстановитьДлинуКода()

	Если Не (ЗначениеЗаполнено(Запись.ОбъектСистемы) И ЗначениеЗаполнено(Запись.ИмяРеквизита)) Тогда
		Возврат;	
	КонецЕсли;
	
	ТекОбъектСистемы = Запись.ОбъектСистемы;
	ИмяОбъекта       = ТекОбъектСистемы.ИмяОбъекта;
	
	Если фЭтоПланСчетов Тогда
		МетаОбъекта = Метаданные.ПланыСчетов.Найти(ИмяОбъекта);	
	ИначеЕсли ТекОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда
		МетаОбъекта = Метаданные.Справочники.Найти(ИмяОбъекта);				
	КонецЕсли;
	
	Если МетаОбъекта <> Неопределено Тогда
	  		
		Если СокрЛП(Запись.ИмяРеквизита) = "Код" Тогда
			
			ДлинаКода = МетаОбъекта.ДлинаКода;
			
		Иначе	
			
			МетаРеквизит = МетаОбъекта.Реквизиты.Найти(Запись.ИмяРеквизита);
			Если МетаРеквизит <> Неопределено Тогда		
				
				ДлинаКода = МетаРеквизит.Тип.КвалификаторыСтроки.Длина;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры // УстановитьДлинуКода()

&НаСервере
Процедура ЗаполнитьМаскуКодаПоУмолчанию()

	Если Не ЗначениеЗаполнено(Запись.ОбъектСистемы) Или Не ЗначениеЗаполнено(Запись.ИмяРеквизита) Тогда
		Возврат;	
	КонецЕсли;
	
	Запись.МаскаКода = РегистрыСведений.бит_МаскиКодов.ПолучитьМаскуКодаПоУмолчанию(Запись.ОбъектСистемы, Запись.ИмяРеквизита);

КонецПроцедуры // ЗаполнитьМаскуКодаПоУмолчанию()

&НаСервере
Процедура ОпределитьКоличествоЗначимыхСимволов()
	
	Если Не ЗначениеЗаполнено(Запись.ОбъектСистемы) Или Не ЗначениеЗаполнено(Запись.ИмяРеквизита) Тогда
		Возврат;	
	КонецЕсли;
	
	ТекИмяОбъекта   = Запись.ОбъектСистемы.ИмяОбъекта;	
	ТекИмяРеквизита = Запись.ИмяРеквизита;
	ТекВидОбъекта   = Запись.ОбъектСистемы.ВидОбъекта;
	
	Если ТекВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.ПланСчетов Тогда
		ТекИмяВидаОбъекта = "ПланСчетов";
		ТекИмяМетаданных  = "ПланыСчетов";
	ИначеЕсли ТекВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда	
		ТекИмяВидаОбъекта = "Справочник";
		ТекИмяМетаданных  = "Справочники";
	КонецЕсли;    	
	
	ТекстВыборки = "";
	ТекстУсловия = "";
	
	МетаданныеОбъекта = Метаданные[ТекИмяМетаданных][ТекИмяОбъекта];
	ДлинаРеквизита = ?(ТекИмяРеквизита = "Код"
					, МетаданныеОбъекта.ДлинаКода
					, МетаданныеОбъекта.Реквизиты[ТекИмяРеквизита].Тип.КвалификаторыСтроки.Длина);
					
	Для i = 1 По ДлинаРеквизита Цикл
		ТекстВыборки = ТекстВыборки + "
					   |	ПОДСТРОКА(ТаблОбъекта." + ТекИмяРеквизита + ", " + i + ", 1) КАК ТекРеквизит" + i + ",";		
		ТекстУсловия = "
					   |	ТекРеквизит" + i + " УБЫВ" + ?(i = 1, "", ",") + ТекстУсловия;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|   " + ТекстВыборки + "
	|	ТаблОбъекта." + ТекИмяРеквизита + "
	|ИЗ
	|	" + ТекИмяВидаОбъекта + "." + ТекИмяОбъекта + " КАК ТаблОбъекта
    |
	|УПОРЯДОЧИТЬ ПО
	|   " + ТекстУсловия + "
	|";
	Результат = Запрос.Выполнить();
	
	Маска = Запись.МаскаТекущая;
	
	Если Результат.Пустой() Тогда 
		
		КоличествоЗначимыхСимволов = 0;
		
	Иначе	
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
				         		
		СтрокаКод = Выборка[ТекИмяРеквизита]; 		
		
		Если СтрДлина(Маска) = 0 Тогда
			
			КоличествоЗначимыхСимволов = СтрДлина(СтрокаКод);
			
		Иначе	
			
			МсКоличествоЗначимых   = СтрЧислоВхождений(Маска, "@");
			МсКоличествоНезначимых = СтрДлина(Маска) - (МсКоличествоЗначимых);
			
			КоличествоЗначимыхСимволов = СтрДлина(СтрокаКод) - МсКоличествоНезначимых;
			
		КонецЕсли;
	 		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьКоличествоЗначимыхСимволов() 

&НаСервере
Процедура УстановитьДоступностьФлагаАвтозаполнения()
                    	
	Если СокрЛП(Запись.ИмяРеквизита) = "Код" Тогда
		
		ТекМод = Модифицированность;
		
		Запись.Автозаполнение 			    = Ложь;	
		Элементы.Автозаполнение.Доступность = Ложь;
		
		Модифицированность = ТекМод;
		
	Иначе
		
		Элементы.Автозаполнение.Доступность = Истина;
		
	КонецЕсли;	

КонецПроцедуры // УстановитьДоступностьФлагаАвтозаполнения()

&НаСервере
Процедура ЗаполнитьДанныеФормыПоУмолчанию()

	Если Не (ЗначениеЗаполнено(Запись.ОбъектСистемы) И ЗначениеЗаполнено(Запись.ИмяРеквизита)) Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьДлинуКода();
	
	ЗаполнитьМаскуКодаПоУмолчанию();
	Если ПустаяСтрока(Запись.МаскаТекущая) Тогда
		Запись.МаскаТекущая = Запись.МаскаКода;	
	КонецЕсли;                                 	
	
	ОпределитьКоличествоЗначимыхСимволов();
	
	УстановитьДоступностьФлагаАвтозаполнения();

КонецПроцедуры // ЗаполнитьМаскуКодаПоУмолчанию()

&НаСервере
Функция ЕстьОбъектыДляКонвертации(ТекОбъектСистемы)

	Если ТекОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.ПланСчетов Тогда 		
		Выборка = ПланыСчетов[ТекОбъектСистемы.ИмяОбъекта].Выбрать();	            		
	ИначеЕсли ТекОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда 		
		Выборка = Справочники[ТекОбъектСистемы.ИмяОбъекта].Выбрать();  	
	КонецЕсли;  	

	ЕстьОбъекты = Выборка.Следующий();
	
	Возврат ЕстьОбъекты;
	
КонецФункции // ЕстьОбъектыДляКонвертации()

&НаСервере
Процедура УстановитьДанныеВыбораИмяРеквизита(ТекОбъектСистемы, ДанныеВыбора)

	ДанныеВыбора = Новый СписокЗначений;
	
	Если ТекОбъектСистемы.ИмяОбъектаПолное = "Справочник.бит_СтатьиОборотов" 
		ИЛИ ТекОбъектСистемы.ИмяОбъектаПолное = "Справочник." + бит_ОбщегоНазначения.ПолучитьИмяСправочникаЦФО() 
        ИЛИ ТекОбъектСистемы.ИмяОбъектаПолное = "Справочник." + бит_ОбщегоНазначения.ПолучитьИмяСправочникаПроекты() Тогда
		ДанныеВыбора.Добавить("Кодификатор");
	ИначеЕсли Лев(ТекОбъектСистемы.ИмяОбъектаПолное, 10) = "ПланСчетов" Тогда
		ДанныеВыбора.Добавить("Код");
	КонецЕсли; 

КонецПроцедуры // УстановитьДанныеВыбораИмяРеквизита()

&НаСервере
Процедура КонвертироватьКодыНаСервере()
	
	МассивВыделенных = Новый Массив;
	МассивВыделенных.Добавить(Запись);
	РегистрыСведений.бит_МаскиКодов.КонвертироватьКоды(МассивВыделенных);
	Запись.МаскаТекущая = Запись.МаскаКода;
		
КонецПроцедуры // КонвертироватьКодыНаСервере()

#КонецОбласти
