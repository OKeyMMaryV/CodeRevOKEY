
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Запись.Ответственный) Тогда
		Запись.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	КонецЕсли; 
	
	ЗаполнитьЗначенияЗаписиПоПараметрам();
	
	ВыполненаПроверкаАссортимента = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ТоварнаяГруппа.Доступность = НЕ ЗначениеЗаполнено(Запись.ТоварнаяГруппа);
	ЭтаФорма.Модифицированность = НЕ ЗначениеЗаполнено(Запись.ТоварнаяГруппа);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ВыполненаПроверкаАссортимента Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗаписьМодифицирована() Тогда
		
		Отказ = Истина;
		ЭтаФорма.Модифицированность = Ложь;
		ЭтаФорма.Закрыть();
		
	Иначе
		
		Если Запись.Удалена Тогда
			
			Отказ = Истина;
			ВыполнитьПоискАссортиментаВDAX12();
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЗаписьМодифицирована()
	
	ЗаписьМодифицирована = ЭтаФорма.Модифицированность;
	
	Если ЗаписьМодифицирована
		И ЗначениеЗаполнено(Запись.ДоговорКонтрагента)
		И ЗначениеЗаполнено(Запись.ТоварнаяГруппа) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ок_ИсторияИзмененияТоварныхГруппДоговоровСрезПоследних.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ок_ИсторияИзмененияТоварныхГруппДоговоровСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа,
			|	ок_ИсторияИзмененияТоварныхГруппДоговоровСрезПоследних.ДатаНачала КАК ДатаНачала,
			|	ок_ИсторияИзмененияТоварныхГруппДоговоровСрезПоследних.ДатаОкончания КАК ДатаОкончания,
			|	ок_ИсторияИзмененияТоварныхГруппДоговоровСрезПоследних.Отсрочка КАК Отсрочка,
			|	ок_ИсторияИзмененияТоварныхГруппДоговоровСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ок_ИсторияИзмененияТоварныхГруппДоговоровСрезПоследних.Удалена КАК Удалена,
			|	ок_ИсторияИзмененияТоварныхГруппДоговоровСрезПоследних.Ответственный КАК Ответственный
			|ИЗ
			|	РегистрСведений.ок_ИсторияИзмененияТоварныхГруппДоговоров.СрезПоследних(
			|			,
			|			ДоговорКонтрагента = &ДоговорКонтрагента
			|				И ТоварнаяГруппа = &ТоварнаяГруппа) КАК ок_ИсторияИзмененияТоварныхГруппДоговоровСрезПоследних";
		
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Запись.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("ТоварнаяГруппа", Запись.ТоварнаяГруппа);
		
		РезультатЗапроса = Запрос.Выполнить();
		НайденнаяЗапись = РезультатЗапроса.Выбрать();
		
		Если НайденнаяЗапись.Следующий() Тогда
			
			Если НайденнаяЗапись.ДатаНачала 		= Запись.ДатаНачала
				И НайденнаяЗапись.ДатаОкончания 	= Запись.ДатаОкончания
				И НайденнаяЗапись.Отсрочка 			= Запись.Отсрочка
				И НайденнаяЗапись.ЕдиницаИзмерения 	= Запись.ЕдиницаИзмерения
				И НайденнаяЗапись.Удалена 			= Запись.Удалена Тогда
			
				ЗаписьМодифицирована = Ложь;
			
			КонецЕсли; 
		
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ЗаписьМодифицирована;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТоварнаяГруппаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура УдаленаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Запись.ДатаОкончания) Тогда
		Запись.ДатаОкончания = ТекущаяДата();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсрочкаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УправлениеФормой()
	
	Если ЗначениеЗаполнено(Запись.ТоварнаяГруппа) Тогда
	
		ЗначенияРеквизитов = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Запись.ТоварнаяГруппа, "ЕдиницаИзмерения, ЕстьОтсрочка, ЛимитОтсрочки");
	
		Элементы.Отсрочка.АвтоОтметкаНезаполненного 		= ЗначенияРеквизитов.ЕстьОтсрочка ИЛИ ЗначениеЗаполнено(Запись.ЕдиницаИзмерения);
		Элементы.ЕдиницаИзмерения.АвтоОтметкаНезаполненного = ЗначенияРеквизитов.ЕстьОтсрочка ИЛИ ЗначениеЗаполнено(Запись.Отсрочка);
		Элементы.ДатаОкончания.АвтоОтметкаНезаполненного 	= Запись.Удалена = Истина;
		
		Если НЕ Элементы.Отсрочка.АвтоОтметкаНезаполненного Тогда
			Элементы.Отсрочка.ОтметкаНезаполненного = Ложь;
		КонецЕсли; 
		Если НЕ Элементы.ЕдиницаИзмерения.АвтоОтметкаНезаполненного Тогда
			Элементы.ЕдиницаИзмерения.ОтметкаНезаполненного = Ложь;
		КонецЕсли; 
		Если НЕ Элементы.ДатаОкончания.АвтоОтметкаНезаполненного Тогда
			Элементы.ДатаОкончания.ОтметкаНезаполненного = Ложь;
		КонецЕсли; 
		
		
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ЛимитОтсрочки)
			И Запись.Отсрочка > ЗначенияРеквизитов.ЛимитОтсрочки Тогда
			Запись.Отсрочка = 0;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ЕдиницаИзмерения)
			И Запись.ЕдиницаИзмерения <> ЗначенияРеквизитов.ЕдиницаИзмерения Тогда
			Запись.ЕдиницаИзмерения = ЗначенияРеквизитов.ЕдиницаИзмерения;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.ЛимитОтсрочки)
			И ЗначениеЗаполнено(ЗначенияРеквизитов.ЕдиницаИзмерения) Тогда
			Элементы.ЛимитОтсрочки.Заголовок = ПолучитьТекстовоеПредставлениеЛимита(ЗначенияРеквизитов.ЛимитОтсрочки, ЗначенияРеквизитов.ЕдиницаИзмерения);
			Элементы.Отсрочка.МаксимальноеЗначение = ЗначенияРеквизитов.ЛимитОтсрочки;
			Элементы.ЕдиницаИзмерения.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ЛимитОтсрочки.Заголовок 			= "(Лимит отсрочки - не задан)";
			Элементы.Отсрочка.МаксимальноеЗначение 		= 999;
			Элементы.ЕдиницаИзмерения.ТолькоПросмотр 	= Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.Отсрочка.АвтоОтметкаНезаполненного 		= Ложь;
		Элементы.ЕдиницаИзмерения.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДатаОкончания.АвтоОтметкаНезаполненного 	= Ложь;
		
		Элементы.Отсрочка.ОтметкаНезаполненного 			= Ложь;
		Элементы.ЕдиницаИзмерения.ОтметкаНезаполненного 	= Ложь;
		Элементы.ДатаОкончания.ОтметкаНезаполненного 		= Ложь;
		
		Запись.Отсрочка 		= Неопределено;
		Запись.ЕдиницаИзмерения = Неопределено;
		Запись.ДатаОкончания 	= Неопределено;
		
		Элементы.ЛимитОтсрочки.Заголовок 			= "(Лимит отсрочки - не задан)";
		Элементы.Отсрочка.МаксимальноеЗначение 		= 999;
		Элементы.ЕдиницаИзмерения.ТолькоПросмотр 	= Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияЗаписиПоПараметрам()
	
	МетаданныеРегистра = Метаданные.Регистрысведений.ок_ИсторияИзмененияТоварныхГруппДоговоров;
	
	Для Каждого ЭлементСтруктуры Из МетаданныеРегистра.Измерения Цикл
	
		Если Параметры.Свойство(ЭлементСтруктуры.Имя)
			И Запись[ЭлементСтруктуры.Имя] <> Параметры[ЭлементСтруктуры.Имя] Тогда
		
			Запись[ЭлементСтруктуры.Имя] = Параметры[ЭлементСтруктуры.Имя];
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из МетаданныеРегистра.Ресурсы Цикл
	
		Если Параметры.Свойство(ЭлементСтруктуры.Имя)
			И Запись[ЭлементСтруктуры.Имя] <> Параметры[ЭлементСтруктуры.Имя] Тогда
		
			Запись[ЭлементСтруктуры.Имя] = Параметры[ЭлементСтруктуры.Имя];
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из МетаданныеРегистра.Реквизиты Цикл
	
		Если Параметры.Свойство(ЭлементСтруктуры.Имя)
			И Запись[ЭлементСтруктуры.Имя] <> Параметры[ЭлементСтруктуры.Имя] Тогда
		
			Запись[ЭлементСтруктуры.Имя] = Параметры[ЭлементСтруктуры.Имя];
		
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстовоеПредставлениеЛимита(ЛимитОтсрочки, ЕдиницаИзмерения)
	
	Результат = "(Лимит отсрочки - ";
	
	Если ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.бит_ТипыДнейСобытия.Календарные") Тогда
		
		Результат = Результат + ПолучитьСклоненияСтрокиПоЧислу("", ЛимитОтсрочки, "календарный день", "ЧС=Количественное", "ПД=Именительный")[0];
		
	Иначе
		
		Результат = Результат + ПолучитьСклоненияСтрокиПоЧислу("", ЛимитОтсрочки, "рабочий день", "ЧС=Количественное", "ПД=Именительный")[0];
	
	КонецЕсли;
	
	Возврат Результат + ")";
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоискАссортиментаВDAX12()
	
	// 1. Запуск фонового задания на сервере.
	ДлительнаяОперация = ок_ВыгрузкаВАксапту.ДлительныеОперации_ВыполнитьПоискАссортимента(Запись.ДоговорКонтрагента, Запись.ТоварнаяГруппа, УникальныйИдентификатор);
	 
	// 2. Подключение обработчика завершения фонового задания.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = "Выполняется проверка ассортимента.";
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Интервал = 1;

	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииПоискаАссортимента", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);

 КонецПроцедуры

// 3. Обработка результата выполнения фонового задания.
&НаКлиенте
Процедура ПриЗавершенииПоискаАссортимента(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда // Пользователь отменил задание.
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;

	РезультатПроверкиАссортимента = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	УдалитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверкиАссортимента = Истина Тогда
		
		ВыполненаПроверкаАссортимента = Истина;
		Записать();
		Закрыть();
		
	Иначе
		
		Если ТипЗнч(Результат) = Тип("Структура")
			И Результат.Свойство("Сообщения")
			и (ТипЗнч(Результат.Сообщения) = Тип("ФиксированныйМассив")
				ИЛИ ТипЗнч(Результат.Сообщения) = Тип("Массив")) Тогда
			
			Для Каждого ТекущееСообщение Из Результат.Сообщения Цикл
			
				Если ТипЗнч(ТекущееСообщение) = Тип("СообщениеПользователю") Тогда
					ТекущееСообщение.Сообщить();
				КонецЕсли; 
			
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти