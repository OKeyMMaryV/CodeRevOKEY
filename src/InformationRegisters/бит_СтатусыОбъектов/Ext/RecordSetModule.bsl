#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ПолучитьФункциональнуюОпцию("бит_ИспользоватьМеханизмОповещений") Тогда
		ТаблицаОповещений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_фн_АктивныеОповещения");
	Иначе
		ТаблицаОповещений = Неопределено;
	КонецЕсли; 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2931)
	ТипОбъекта = ТипЗнч(Отбор.Объект.Значение);
	ЗаписыватьВРСИстИзмСтатусов = Метаданные.РегистрыСведений.бит_ИсторияИзмененияСтатусовОбъектов.Измерения.Объект.Тип.СодержитТип(ТипОбъекта);
	ЗаписыватьВРСРегИзмОбъектов = Метаданные.РегистрыСведений.бит_РегистрацияИзмененийОбъектов.Измерения.Объект.Тип.СодержитТип(ТипОбъекта);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2931)
		
	Для каждого Запись Из ЭтотОбъект Цикл
		
		// Сохраним историю изменения статусов
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2931)
		//// Сохраним историю изменения статусов
		//СохранитьИсторию(Запись);
		//Заменено на:
		Если ЗаписыватьВРСИстИзмСтатусов ИЛИ
			 ЗаписыватьВРСРегИзмОбъектов
		Тогда
		    		
			// Сохраним историю изменения статусов
			СохранитьИсторию(Запись,ЗаписыватьВРСИстИзмСтатусов,ЗаписыватьВРСРегИзмОбъектов);				
		
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2931)
		
		Если Не ТаблицаОповещений = Неопределено Тогда
			// Зарегистрируем события для последующих оповещений.
			ЗарегистироватьСобытияОповещений(Запись,ТаблицаОповещений);
		КонецЕсли; 
	КонецЦикла;// По набору записей 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура сохраняет историю изменения статусов.
// 
// Параметры:
//  Запись - РегистрСведенийЗапис.бит_СтатусыОбъектов.
// 
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2931)
//Процедура СохранитьИсторию(Запись)
//Заменено на:
Процедура СохранитьИсторию(Запись,ЗаписыватьВРСИстИзмСтатусов,ЗаписыватьВРСРегИзмОбъектов)
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2931)

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2931)
	Если ЗаписыватьВРСИстИзмСтатусов Тогда 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2931)
	
	// Сохраним историю изменения статуса.
	МенеджерЗаписи = РегистрыСведений.бит_ИсторияИзмененияСтатусовОбъектов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись);
	МенеджерЗаписи.Период  = ТекущаяДата();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2931)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2931)
	
    Попытка
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2931)
		Если ЗаписыватьВРСИстИзмСтатусов Тогда 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2931)
		МенеджерЗаписи.Записать();
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2931)
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2931)
		
		//bit auavseenkov++{
		УстановитьПривилегированныйРежим(Истина);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-13 (#2931)
		Если ЗаписыватьВРСРегИзмОбъектов Тогда 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-13 (#2931)
		МенеджерЗаписейИзмОб = РегистрыСведений.бит_РегистрацияИзмененийОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписейИзмОб.Объект = Запись.Объект;  
		МенеджерЗаписейИзмОб.ДатаИзменения = ТекущаяДата();
		МенеджерЗаписейИзмОб.Новый = Ложь;
		МенеджерЗаписейИзмОб.Записать();
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2931)
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2931)
		УстановитьПривилегированныйРежим(Ложь);
		//}--
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось сохранить историю изменения статуса объекта ""%Объект%""!'")
		                 + " "
						 + ОписаниеОшибки();
		СтрЗамена      = Новый Структура("Объект", Строка(Запись.Объект));
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ЗаполнитьПараметрыСтроки(ТекстСообщения, СтрЗамена);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);		
		
		ЗаписьЖурналаРегистрации("бит_Визирование", 
							УровеньЖурналаРегистрации.Ошибка,, 
							МенеджерЗаписи, 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры // СохранитьИсторию()

// Процедура регистрирует события для последующих оповещений.
// 
// Параметры:
//  Запись            - РегистрСведенийЗапис.бит_СтатусыОбъектов.
//  ТаблицаОповещений - ТаблицаЗначений.
// 
Процедура ЗарегистироватьСобытияОповещений(Запись,ТаблицаОповещений)
	
	Если НЕ ЗначениеЗаполнено(Запись.Объект) Тогда	
		Возврат;	
	КонецЕсли; 
	
	// Обработаем оповещения.
	Если НЕ ЭтотОбъект.ДополнительныеСвойства.Свойство("бит_ОтключитьРегистрациюОповещений") Тогда
		
		ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Запись.Объект.Метаданные());
		
		СтрОтбор = Новый Структура("ВидСобытия,ОбъектСистемы"
									, Перечисления.бит_фн_ВидыСобытийОповещений.УстановленСтатус
									, ОбъектСистемы);
		
		МассивОповещений = ТаблицаОповещений.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаОповещения Из МассивОповещений Цикл
			
			флСоответствует = Ложь;
			// Проверим "быстрые" условия.
			Если НЕ ЗначениеЗаполнено(СтрокаОповещения.Статус) Тогда				
				флСоответствует = Истина;				
			ИначеЕсли СтрокаОповещения.Статус = Запись.Статус Тогда				
				флСоответствует = Истина;				
			КонецЕсли; 
			
			// Если задано пользовательское условие, проверим его.
			Если флСоответствует И ЗначениеЗаполнено(СтрокаОповещения.ПользовательскоеУсловие) Тогда
				
				СтруктураКонтекст = Новый Структура("ТекущийОбъект,Статус", Запись.Объект, Запись.Статус);
				
				флСоответствует = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(СтрокаОповещения.ПользовательскоеУсловие
				                                                                 , СтруктураКонтекст);
				
			КонецЕсли; 
			
			Если флСоответствует Тогда
				
				бит_фн_ОповещенияСервер.ЗарегистрироватьСобытиеДляОповещений(Перечисления.бит_фн_ВидыСобытийОповещений.УстановленСтатус, 
					СтрокаОповещения.Оповещение, Запись.Объект,,,Запись.Статус);
				
            КонецЕсли;  // Событие соответствует отборам
                
        КонецЦикла; // По массиву оповещений
        
	КонецЕсли; // Есть оповещения, нужно выполнять регистрацию.
	
КонецПроцедуры // ЗарегистироватьСобытияОповещений()

#КонецОбласти

#КонецЕсли
