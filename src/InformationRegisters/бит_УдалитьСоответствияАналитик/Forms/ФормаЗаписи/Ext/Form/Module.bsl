
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиСервер.ФормаЗаписиРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);

	ЗаполнитьКэшЗначений();	
	
	УстановитьВидимость();
	
	Если Параметры.Ключ.Пустой() И ЗначениеЗаполнено(Запись.ВидСоответствия) Тогда		
		ПривестиТипыАналитик();		
	КонецЕсли; 
	
	УстановитьПараметрыВыбора();
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидСоответствияПриИзменении(Элемент)
	
	ИзменениеВидаСоответствия();
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяЭлемента  = Элемент.Имя;
	ТекПараметры = фКэшЗначений.ПараметрыАналитик[ИмяЭлемента];
	ТекНастройка = фКэшЗначений.НастройкиАналитик[ТекПараметры.ИмяАналитики];
	Если ТекНастройка = Неопределено Тогда 			
		СтандартнаяОбработка = Ложь;   			
	Иначе 					
		СтрНастройки = Новый Структура(ИмяЭлемента, ТекНастройка); 				
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
															  , Элемент
															  , Запись
															  , ИмяЭлемента
															  , СтандартнаяОбработка
															  , СтрНастройки); 			
	КонецЕсли;
														  
КонецПроцедуры

&НаКлиенте
Процедура АналитикаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Запись[Элемент.Имя]  = Неопределено;
	Запись[Элемент.Имя]  = ПривестиТипАналитики(фКэшЗначений.ПараметрыАналитик, Элемент.Имя, Запись[Элемент.Имя]);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	// Настройки всех дополнительных аналитик.
	фКэшЗначений.Вставить("НастройкиАналитик", бит_МеханизмДопИзмерений.ПолучитьНастройкиДополнительныхАналитик());
	
	фКэшЗначений.Вставить("ПараметрыАналитик", Новый Структура);
	ЗаполнитьПараметрыАналитик();
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавливает параметры выбора для левой и правой аналитик 
// в зависимости от Вида соответствия.
// 
&НаСервере
Процедура УстановитьПараметрыВыбора()

	Если Запись.ВидСоответствия.Предопределенный 
		И Запись.ВидСоответствия.Код = "СтатьиОборотовБДР_СтатьиОборотовБДДС" Тогда
		
		// Для левой аналитики.
		МассивПараметровЛев = Новый Массив;
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтатьи", Перечисления.бит_ТипыСтатейОборотов.БДР);
		МассивПараметровЛев.Добавить(НовыйПараметр);
		ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровЛев);            
		Элементы.ЛеваяАналитика_1.ПараметрыВыбора = ПараметрыВыбора;
		
		// Для правой аналитики.
		МассивПараметровПрав = Новый Массив;
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтатьи", Перечисления.бит_ТипыСтатейОборотов.БДДС);
		МассивПараметровПрав.Добавить(НовыйПараметр);
		ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровПрав);            
		Элементы.ПраваяАналитика_1.ПараметрыВыбора = ПараметрыВыбора;
		
	Иначе
		
		// Для левой аналитики.
		ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);            
		Элементы.ЛеваяАналитика_1.ПараметрыВыбора = ПараметрыВыбора;
		
		// Для правой аналитики.
		ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);            
		Элементы.ПраваяАналитика_1.ПараметрыВыбора = ПараметрыВыбора;
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПараметрыВыбора()

// Процедура устанавливает видимость поля аналитики.
// 
// Параметры:
//  Префикс - Строка
//  Номер - Число
// 
&НаСервере
Процедура УстановитьВидимостьПоляАналитики(Префикс, Номер)
	
	ИмяАналитики = Префикс + "_" + Номер;
	ВидСоответствия = Запись.ВидСоответствия[ИмяАналитики];
	Элементы[ИмяАналитики].Видимость = ЗначениеЗаполнено(ВидСоответствия);
    
    Если ЗначениеЗаполнено(ВидСоответствия) Тогда		
		Элементы[ИмяАналитики].Заголовок = СокрЛП(ВидСоответствия.Наименование);		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьВидимостьПоляАналитики()

// Процедура управляет видимостью/доступностью элементов формы. 
// 
&НаСервере
Процедура УстановитьВидимость()

	МаксКолАналитик = Справочники.бит_ВидыСоответствийАналитик.МаксКоличествоАналитик();
	
	Для й = 1 По МаксКолАналитик Цикл
		
		УстановитьВидимостьПоляАналитики("ЛеваяАналитика" , й);
		УстановитьВидимостьПоляАналитики("ПраваяАналитика", й);		
		
	КонецЦикла; 

КонецПроцедуры // УстановитьВидимость()


// Функция подготавливает параметры аналитики.
// 
// Параметры:
//  ИмяАналитики - Строка
//  Номер - Число
// 
// Возвращаемое значение:
//  СтрПар - Структура.
// 
&НаСервере
Функция ПодготовитьПараметрыАналитики(ИмяАналитики, Номер)
	
	ТекАналитика = Запись.ВидСоответствия[ИмяАналитики];
	СтрПар = Новый Структура;
	Если ЗначениеЗаполнено(ТекАналитика) Тогда
		СтрПар.Вставить("ИмяАналитики"	 , СокрЛП(ТекАналитика.Код));
		//СтрПар.Вставить("КоличествоТипов", ТекАналитика.ТипЗначения.Типы().Количество());
		СтрПар.Вставить("ТипЗначения"	 , ТекАналитика.ТипЗначения);
	Иначе
		СтрПар.Вставить("ИмяАналитики"	 , Неопределено);
		//СтрПар.Вставить("КоличествоТипов", 0);
		СтрПар.Вставить("ТипЗначения"	 , Новый ОписаниеТипов("Неопределено"));
	КонецЕсли; 
	
	Возврат СтрПар;
	
КонецФункции // ПодготовитьПараметрыАналитик()

// Процедура заполняет параметры аналитик соответствия. 
// 
&НаСервере
Процедура ЗаполнитьПараметрыАналитик()
	
	фКэшЗначений.ПараметрыАналитик = Новый Структура;
	
	МаксКолАналитик = Справочники.бит_ВидыСоответствийАналитик.МаксКоличествоАналитик();
	
	Для й = 1 По МаксКолАналитик Цикл
		
		ИмяАналитики = "ЛеваяАналитика_" + й;
		СтрПар = ПодготовитьПараметрыАналитики(ИмяАналитики, й);
		фКэшЗначений.ПараметрыАналитик.Вставить(ИмяАналитики, СтрПар);
		
		ИмяАналитики = "ПраваяАналитика_" + й;
		СтрПар = ПодготовитьПараметрыАналитики(ИмяАналитики, й);		
		фКэшЗначений.ПараметрыАналитик.Вставить(ИмяАналитики, СтрПар);
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьПараметрыАналитик()

// Процедура обрабатывает изменение вида соответствия. 
// 
&НаСервере
Процедура ИзменениеВидаСоответствия()
	
	ЗаполнитьПараметрыАналитик();	
	УстановитьВидимость();
	ПривестиТипыАналитик();
	УстановитьПараметрыВыбора();
	
КонецПроцедуры // ИзменениеВидаСоответствия()

// Функция приводит тип аналитики согласно настройке вида соответствия.
// 
// Параметры:
//  ПараметрыАналитик - Структура
//  ИмяПоля - Строка
//  ИсходноеЗначение - Произвольный
// 
// Возвращаемое значение:
//  Результат - Произвольный.
// 
&НаКлиентеНаСервереБезКонтекста
Функция ПривестиТипАналитики(ПараметрыАналитик, ИмяПоля, ИсходноеЗначение)

	Результат = ПараметрыАналитик[ИмяПоля].ТипЗначения.ПривестиЗначение(ИсходноеЗначение);

	Возврат Результат;
	
КонецФункции // ПривестиТипАналитики()

// Процедура приводит типы аналитик согласно настройке вида соответствия.
// 
&НаСервере
Процедура ПривестиТипыАналитик()
	
	МаксКолАналитик = Справочники.бит_ВидыСоответствийАналитик.МаксКоличествоАналитик();
	
	Для й = 1 По МаксКолАналитик Цикл
		
		ИмяАналитики = "ЛеваяАналитика_" + й;
		Запись[ИмяАналитики] = ПривестиТипАналитики(фКэшЗначений.ПараметрыАналитик, ИмяАналитики, Запись[ИмяАналитики]);
		
		ИмяАналитики = "ПраваяАналитика_" + й;
		Запись[ИмяАналитики] = ПривестиТипАналитики(фКэшЗначений.ПараметрыАналитик, ИмяАналитики, Запись[ИмяАналитики]);
		
	КонецЦикла; 
	
КонецПроцедуры // ПривестиТипыАналитик()

#КонецОбласти
