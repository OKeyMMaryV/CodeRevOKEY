
#Область ОписаниеПеременных

&НаКлиенте
Перем СоответствиеВидовИТипов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТолькоПросмотр = Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
	
	УстановитьУсловноеОформление();
	
	Элементы.ГруппаОжидание.Видимость = Ложь;
	
	Параметры.Свойство("Организация"              , Организация);
	Параметры.Свойство("Контрагент"               , Контрагент);
	Параметры.Свойство("ИдентификаторКонтрагента" , ИдентификаторКонтрагента);
	Параметры.Свойство("ИдентификаторОрганизации" , ИдентификаторОрганизации);
	
	СоздатьНовыйПоИдентификаторам = Неопределено;
	Создание = Неопределено;
	НеОпределятьТипНастройкиПриЧтении = Ложь;
	
	Если Параметры.Свойство("СоздатьНовыйПоИдентификаторам"  , СоздатьНовыйПоИдентификаторам) Тогда
		
		Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Организация);
		Если СоздатьНовыйПоИдентификаторам Тогда
			ТипНастройки = 2;
		Иначе
			ТипНастройки = 1;
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Создание"  , Создание) Тогда
		
		Элементы.Организация.ТолькоПросмотр = Ложь;
		Элементы.Контрагент.ТолькоПросмотр = Ложь;
		ТипНастройки = 0;
		
	Иначе
		
		ОпределятьТипНастройкиПриЧтении = Истина;
	КонецЕсли;
	
	СоответствиеВидовИТипов = Новый Соответствие;
	ЗаполнитьПоШаблонуНаСервере("ПервоначальноеЗаполнение", СоответствиеВидовИТипов);
	АдресСоответствияВидовИТипов  = ПоместитьВоВременноеХранилище(СоответствиеВидовИТипов,УникальныйИдентификатор);
	
	Элементы.ГруппаОжиданиеУдаления.Видимость = Ложь;
	
	ЗагрузитьТекущиеНастройкиНаСервере();
	
	//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103
	ок_УправлениеФормами.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103

	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879)	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиПолученияЭлектронныхДокументов.ок_ИдентификаторУчастникаОбмена КАК ок_ИдентификаторУчастникаОбмена
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя";
	
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("Отправитель", Контрагент);
	Запрос.УстановитьПараметр("Получатель", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ок_ИдентификаторУчастникаОбмена = ВыборкаДетальныеЗаписи.ок_ИдентификаторУчастникаОбмена;
	КонецЕсли;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствияВидовИТипов) Тогда
		СоответствиеВидовИТипов = ПолучитьИзВременногоХранилища(АдресСоответствияВидовИТипов);
	КонецЕсли;

	ВывестиПредставленияТиповДокументов();
	ОбновитьДоступностьИдентификаторов();
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879)
	СформироватьТекстИнформацияПоИДКонтрагента();
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ИдентификаторОрганизации) <> ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Нужно либо указать оба идентификатора (для частной настройки), либо не указывать ни одного (для частной)'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Настройки отражения в учете не сохранены. Завершить работу с программой?'")
		Иначе
			Описание = Новый ОписаниеОповещения("ПередЗакрытиемОкнаФормы", ЭтотОбъект);
			ПоказатьВопрос(Описание, НСтр("ru = 'Настройки отражения в учете изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПриИзмененииОрганизации(Элемент)
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879)
	ИдентификаторОрганизации = "";
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)
	
	ЗагрузитьТекущиеНастройкиНаСервере();
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879)
	СформироватьТекстИнформацияПоИДКонтрагента();
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879)
	ИдентификаторКонтрагента = "";
	ок_ИдентификаторУчастникаОбмена = "";
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)
	
	ЗагрузитьТекущиеНастройкиНаСервере();
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879)
	СформироватьТекстИнформацияПоИДКонтрагента();
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)
КонецПроцедуры

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879)

&НаКлиенте
Процедура ИдентификаторОрганизацииПриИзменении(Элемент)
	ок_ИдентификаторУчастникаОбмена = "";
	СформироватьТекстИнформацияПоИДКонтрагента();
КонецПроцедуры


&НаКлиенте
Процедура ИдентификаторКонтрагентаПриИзменении(Элемент)
	ок_ИдентификаторУчастникаОбмена = "";
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстИнформацияПоИДКонтрагента()
	
	Если ЗначениеЗаполнено(Контрагент)
		И Элементы.ИдентификаторКонтрагента.СписокВыбора.Количество() = 0
		И ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УчетнаяЗаписьПоКастомизированномуЭДО(ИдентификаторОрганизации) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН, КПП");
		ИдентификаторЭДО = СокрЛП(СтруктураРеквизитов.ИНН) + "_" + СокрЛП(СтруктураРеквизитов.КПП);
		НЗАбонентыЭДО = РегистрыСведений.АбонентыЭДО.СоздатьНаборЗаписей();
		НЗАбонентыЭДО.Отбор.ИдентификаторЭДО.Установить(ИдентификаторЭДО);
		НЗАбонентыЭДО.Прочитать();
		Если НЗАбонентыЭДО.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По выбранному контрагенту необходимо сформировать идентификатор", , "ИдентификаторКонтрагента");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеДокументы

&НаКлиенте
Процедура ВходящиеДокументыПредставлениеСпособаОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ВходящиеДокументы.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВходящиеДокументыТипДокументаПредставлениеНачалоВыбораЗавершить", ЭтотОбъект, ТекСтрока);
		Если ТекСтрока.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПрикладнойЭД") Тогда
			ВидЭлектронногоДокумента = ТекСтрока.ПрикладнойВидЭД;
		Иначе
			ВидЭлектронногоДокумента = ТекСтрока.ВидДокумента;
		КонецЕсли;
		ПоказатьВыборИзСписка(ОписаниеОповещения, СоответствиеВидовИТипов.Получить(ВидЭлектронногоДокумента),
			Элементы.ВходящиеДокументыПредставлениеСпособаОбработки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыТипДокументаПредставлениеНачалоВыбораЗавершить(ВыбранныйЭлемент, ТекСтрока) Экспорт 
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда
		ТекСтрока.СпособОбработки = ВыбранныйЭлемент.Значение;
		ТекСтрока.ПредставлениеСпособаОбработки = ВыбранныйЭлемент.Представление;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ЗаполнитьПоШаблонуНаСервере(Сред(Команда.Имя,10), СоответствиеВидовИТипов);
	ВывестиПредставленияТиповДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если СохранитьНастройки() Тогда
		Модифицированность = Ложь;
		Заголовок = ПолучитьЗаголовокОкна();
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение:'"),, НСтр("ru = 'Настройки успешно сохранены'"), БиблиотекаКартинок.Успешно32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если СохранитьНастройки() Тогда
		Модифицированность = Ложь;
		Заголовок = ПолучитьЗаголовокОкна();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Описание = Новый ОписаниеОповещения("ПослеВопросаУдаленияНастройки", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Сейчас будет удалена настройка отражения в учете.
                         |Продолжить?'");
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-08-05 (#3821) 
&НаКлиенте
Процедура ок_КомандаПолучениеЭДПоКонтрагенту(Команда)
	
	СписокПолей = Новый Массив;
	
	ПеремИдентификаторОрганизации = ИдентификаторОрганизации;
	ПеремИдентификаторКонтрагента = ИдентификаторКонтрагента;
	
	Если (ПустаяСтрока(ПеремИдентификаторОрганизации) 
			Или ПустаяСтрока(ПеремИдентификаторКонтрагента)) 
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
	Тогда
	    СтруктураРезультат = ПолучитьДоступныеИдентификаторыЭДО(Организация, Контрагент);
		
		Если ПустаяСтрока(ПеремИдентификаторОрганизации) Тогда
			ПеремИдентификаторОрганизации = СтруктураРезультат.ПеремИдентификаторОрганизации;
		КонецЕсли;
		
		Если ПустаяСтрока(ПеремИдентификаторКонтрагента) Тогда
			ПеремИдентификаторКонтрагента = СтруктураРезультат.ПеремИдентификаторКонтрагента;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ПустаяСтрока(ПеремИдентификаторОрганизации) Тогда
		СписокПолей.Добавить("Идентификатор организации");
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		СписокПолей.Добавить("Контрагент");
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Организация) Тогда
		СписокПолей.Добавить("Организация");	
	КонецЕсли;
	
	Если СписокПолей.Количество() > 0 Тогда
		ИмяПоля = "";
		Для Каждого ЭлементаМассива Из СписокПолей Цикл
			ИмяПоля = ИмяПоля + ЭлементаМассива + Символы.ПС;
		КонецЦикла;
		ОбщегоНазначенияСлужебныйКлиентСервер.СообщитьПользователю("По текущей настройке не заполнено(ы) поле(я) " + Символы.ПС + ИмяПоля, Неопределено, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ОбщегоНазначенияСлужебныйКлиентСервер.СообщитьПользователю("Сохраните настройку", Неопределено, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ИдентификаторОрганизации, ИдентификаторКонтрагента, Контрагент, Организация", ПеремИдентификаторОрганизации, ПеремИдентификаторКонтрагента, Контрагент, Организация);
	
	ОткрытьФорму("РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Форма.ok_ПолучитьЭДПоКонтрагенту", ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступныеИдентификаторыЭДО(Организация, Контрагент)
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ПеремИдентификаторОрганизации", "");
	СтруктураРезультат.Вставить("ПеремИдентификаторКонтрагента", "");
	
	Идентификаторы = ОбменСКонтрагентамиСлужебный.ДоступныеИдентификаторыЭДО(Организация, Контрагент);
	
	Если Идентификаторы.ИдентификаторыОтправителя.Количество() = 1 Тогда
		СтруктураРезультат.ПеремИдентификаторОрганизации = Идентификаторы.ИдентификаторыОтправителя[0].Значение;
	КонецЕсли;
	Если Идентификаторы.ИдентификаторыПолучателя.Количество() = 1 Тогда
		СтруктураРезультат.ПеремИдентификаторКонтрагента = Идентификаторы.ИдентификаторыПолучателя[0].Значение;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-08-05 (#3821) 

//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879)
&НаКлиенте
Процедура ок_ДобавитьИдентификаторКонтрагента(Команда)
	
	Если Не ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УчетнаяЗаписьПоКастомизированномуЭДО(ИдентификаторОрганизации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По данной настройке нельзя сформировать идентификатор контрагента");
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан контрагент. Операция не выполнена");
		Возврат;
	КонецЕсли;
	
	ок_ДобавитьИдентификаторКонтрагентаНаСервере(Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ок_ДобавитьИдентификаторКонтрагентаНаСервере(Контрагент)
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН, КПП, НаименованиеПолное, Наименование");
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов.ИНН) Или Не ЗначениеЗаполнено(СтруктураРеквизитов.КПП) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проверьте ИНН/КПП контрагента. Операция не выполнена");
		Возврат;
	КонецЕсли;
	
	ИдентификаторЭДО = СокрЛП(СтруктураРеквизитов.ИНН) + "_" + СокрЛП(СтруктураРеквизитов.КПП);
	
	НЗАбонентыЭДО = РегистрыСведений.АбонентыЭДО.СоздатьНаборЗаписей();
	НЗАбонентыЭДО.Отбор.ИдентификаторЭДО.Установить(ИдентификаторЭДО);
	НЗАбонентыЭДО.Прочитать();
	Если НЗАбонентыЭДО.Количество() = 0 Тогда
		НоваяСтрокаНабора 						= НЗАбонентыЭДО.Добавить();
		НоваяСтрокаНабора.ИдентификаторЭДО 		= ИдентификаторЭДО;
		НоваяСтрокаНабора.ИНН 					= СокрЛП(СтруктураРеквизитов.ИНН);
		НоваяСтрокаНабора.КПП 					= СокрЛП(СтруктураРеквизитов.КПП);
		НоваяСтрокаНабора.КраткоеОписание 		= СокрЛП(СтруктураРеквизитов.Наименование);
		НоваяСтрокаНабора.ПодробноеОписание 	= СокрЛП(СтруктураРеквизитов.НаименованиеПолное);
		НЗАбонентыЭДО.Записать();
		
		ИдентификаторКонтрагента = ИдентификаторЭДО;
		
		Если ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
			Значение = Элементы.ИдентификаторКонтрагента.СписокВыбора.НайтиПоЗначению(ИдентификаторКонтрагента);
			Если Значение = Неопределено Тогда 
				Элементы.ИдентификаторКонтрагента.СписокВыбора.Добавить(ИдентификаторКонтрагента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьТекстИнформацияПоИДКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАбонентыЭДО(Команда)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ИНН",ПолучитьИННКонтрагента(Контрагент)));
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияАбонетовЭДО", ЭтаФорма);
	
	ОткрытьФорму("РегистрСведений.АбонентыЭДО.ФормаСписка", ПараметрыОткрытия, ЭтаФорма, , , ,ОбработкаОповещения , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИННКонтрагента(Контрагент)
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН");
	
	Возврат СтруктураРеквизитов.ИНН;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияАбонетовЭДО(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыполнитьПоискИДКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискИДКонтрагента()

	Идентификаторы = ОбменСКонтрагентамиСлужебный.ДоступныеИдентификаторыЭДО(Организация, Контрагент);
	
	Элементы.ИдентификаторКонтрагента.РежимВыбораИзСписка = Идентификаторы.ИдентификаторыПолучателя.Количество() > 0;
	Элементы.ИдентификаторКонтрагента.СписокВыбора.Очистить();
	Для Каждого СтрокаТЧ Из Идентификаторы.ИдентификаторыПолучателя Цикл
		Элементы.ИдентификаторКонтрагента.СписокВыбора.Добавить(СтрокаТЧ.Значение, СтрокаТЧ.Представление);
	КонецЦикла;

	Если ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
		Значение = Элементы.ИдентификаторКонтрагента.СписокВыбора.НайтиПоЗначению(ИдентификаторКонтрагента);
		Если Значение = Неопределено Тогда 
			Элементы.ИдентификаторКонтрагента.СписокВыбора.Добавить(ИдентификаторКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИДИзСбис(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(ИдентификаторОрганизации)
		И ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
		
		Ответ = "";
		Результат = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьИдентификаторУчастникаОбмена(ИдентификаторОрганизации, Новый Структура("ИдентификаторКонтрагента, Контрагент", ИдентификаторКонтрагента, Контрагент), Ответ);
		Если Не Результат Тогда
			Сообщить("Не удалось получить идентификатор участника обмена" + ?(ПустаяСтрока(Ответ), "", ": " + Ответ));
		Иначе
			ЭтотОбъект["ок_ИдентификаторУчастникаОбмена"] = Ответ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Включен расширенный режим>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиОтправки.РасширенныйРежим");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиОтправкиСпособОбмена");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Знач ИмяШаблона, СоответствиеВидовИТипов)
	
	ТаблицаПредопределенногоПрофиля = ОбменСКонтрагентамиСлужебный.ТаблицаПредопределенногоПрофиля(ИмяШаблона);
	ТаблицаПредопределенногоПрофиля.Сортировать("ВидДокумента");
	ВходящиеДокументы.Загрузить(ТаблицаПредопределенногоПрофиля);
	ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов)

	СоответствиеВидовИТипов.Очистить();
	Для Каждого СтрокаВидаЭД Из ВходящиеДокументы Цикл
		ВидЭД = СтрокаВидаЭД.ВидДокумента;
		Если ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
			ВидЭД = СтрокаВидаЭД.ПрикладнойВидЭД;
		КонецЕсли;
		СписокВыбора = ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(ВидЭД, Истина,
			НСтр("ru = 'Автоматически'") + " - ");
		СоответствиеВидовИТипов.Вставить(ВидЭД, СписокВыбора);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредставленияТиповДокументов()
	
	Для Каждого СтрокаВидаЭД Из ВходящиеДокументы Цикл
		ВидЭД = СтрокаВидаЭД.ВидДокумента;
		Если ЗначениеЗаполнено(СтрокаВидаЭД.ПрикладнойВидЭД) Тогда
			ВидЭД = СтрокаВидаЭД.ПрикладнойВидЭД;
		КонецЕсли;
		СписокВыбора = СоответствиеВидовИТипов.Получить(ВидЭД);
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(СтрокаВидаЭД.СпособОбработки);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаВидаЭД.ПредставлениеСпособаОбработки = ЭлементСписка.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТекущиеНастройкиНаСервере(НеПроверять = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента КАК ВидДокумента,
		|	НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки КАК СпособОбработки,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки КАК НеПредлагатьСохранятьНастройки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя";
	
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("Отправитель", Контрагент);
	Запрос.УстановитьПараметр("Получатель", Организация);
	
	РезультатыЗапроса = Запрос.Выполнить();
	
	// Проверяем настройку на "Общую" для организации
	Если НеПроверять И РезультатыЗапроса.Пустой() Тогда
		Запрос.УстановитьПараметр("ИдентификаторОтправителя", "");
		ИдентификаторКонтрагента = "";
		РезультатыЗапроса = Запрос.Выполнить();
	КонецЕсли;

	Если РезультатыЗапроса.Пустой() Тогда
		Шаблон = НСтр("ru = '%1 (Создание)'");
		Заголовок = СтрШаблон(Шаблон, ПолучитьЗаголовокОкна());
	Иначе
		Если ОпределятьТипНастройкиПриЧтении Тогда
			ОпределитьТипСуществующейНастройки(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ИдентификаторОрганизации = ВыборкаДетальныеЗаписи.ИдентификаторПолучателя;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ВидДокумента"    , ВыборкаДетальныеЗаписи.ВидДокумента   );
		Отбор.Вставить("ПрикладнойВидЭД" , ВыборкаДетальныеЗаписи.ПрикладнойВидЭД);
		
		НайденныеСтроки = ВходящиеДокументы.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВыборкаДетальныеЗаписи.Количество() <> ВходящиеДокументы.Количество() Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Идентификаторы = ОбменСКонтрагентамиСлужебный.ДоступныеИдентификаторыЭДО(Организация, Контрагент);
	
	Элементы.ИдентификаторОрганизации.РежимВыбораИзСписка = Идентификаторы.ИдентификаторыОтправителя.Количество() > 0;
	Элементы.ИдентификаторОрганизации.СписокВыбора.Очистить();
	Для Каждого СтрокаТЧ Из Идентификаторы.ИдентификаторыОтправителя Цикл
		Элементы.ИдентификаторОрганизации.СписокВыбора.Добавить(СтрокаТЧ.Значение, СтрокаТЧ.Представление);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		Значение = Элементы.ИдентификаторОрганизации.СписокВыбора.НайтиПоЗначению(ИдентификаторОрганизации);
		Если Значение = Неопределено Тогда 
			Элементы.ИдентификаторОрганизации.СписокВыбора.Добавить(ИдентификаторОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ИдентификаторКонтрагента.РежимВыбораИзСписка = Идентификаторы.ИдентификаторыПолучателя.Количество() > 0;
	Элементы.ИдентификаторКонтрагента.СписокВыбора.Очистить();
	Для Каждого СтрокаТЧ Из Идентификаторы.ИдентификаторыПолучателя Цикл
		Элементы.ИдентификаторКонтрагента.СписокВыбора.Добавить(СтрокаТЧ.Значение, СтрокаТЧ.Представление);
	КонецЦикла;

	Если ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
		Значение = Элементы.ИдентификаторКонтрагента.СписокВыбора.НайтиПоЗначению(ИдентификаторКонтрагента);
		Если Значение = Неопределено Тогда 
			Элементы.ИдентификаторКонтрагента.СписокВыбора.Добавить(ИдентификаторКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
	ЕстьРеквизиты = Ложь;
	Для Каждого РеквизитФормы ИЗ ПолучитьРеквизиты() Цикл
		Если РеквизитФормы.Имя = "ок_ПериодыДействияВходящие" Тогда
			ЕстьРеквизиты = Истина
		КонецЕсли;
	КонецЦикла;	
	Если ЕстьРеквизиты Тогда	
		ок_УправлениеФормой();
	КонецЕсли;	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьИдентификаторов()
	
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
	Если Не ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УчетнаяЗаписьПоКастомизированномуЭДО(ИдентификаторОрганизации) Тогда
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879) 
		Элементы.ИдентификаторКонтрагента.ТолькоПросмотр = ТипНастройки = 1;
		Элементы.ИдентификаторОрганизации.ТолькоПросмотр = ТипНастройки = 1;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
	КонецЕсли;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879) 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьТипСуществующейНастройки(Форма)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторКонтрагента) И ЗначениеЗаполнено(Форма.ИдентификаторОрганизации) Тогда
		Форма.ТипНастройки = 2;
	Иначе 
		Форма.ТипНастройки = 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СохранитьНастройки()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//Результат = СохранитьДанныеВРегистре(ВходящиеДокументы, Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента);
	Результат = СохранитьДанныеВРегистре(ВходящиеДокументы, Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента, 
						ЭтаФорма["ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования"], ЭтаФорма["ок_ПериодыДействияВходящие"],
						//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879) 
						ок_ИдентификаторУчастникаОбмена);
						//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)
						
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	Если Результат Тогда
		ОпределятьТипНастройкиПриЧтении = Истина;
		ОпределитьТипСуществующейНастройки(ЭтотОбъект);
		ОбновитьДоступностьИдентификаторов();
		
		Оповестить("ОбновитьТекущиеДелаЭДО");
		ТекстЗаголовка = НСтр("ru = 'Успех'");
		ТекстСообщения = НСтр("ru = 'Настройки получения сохранены успешно'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьДанныеВРегистре(Знач ВходящиеДокументы, Знач Получатель,
//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (	
//	Знач Отправитель, Знач ИдентификаторПолучателя, Знач ИдентификаторОтправителя)
	Знач Отправитель, Знач ИдентификаторПолучателя, Знач ИдентификаторОтправителя, 
	Знач ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования, Знач ПериодыДействия,
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879)
	Знач ок_ИдентификаторУчастникаОбмена)
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )

	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиПолученияЭлектронныхДокументов");
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель"              , Получатель);
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель"             , Отправитель);
		ЭлементБлокировкиДанных.УстановитьЗначение("ИдентификаторОтправителя", ИдентификаторОтправителя);
		ЭлементБлокировкиДанных.УстановитьЗначение("ИдентификаторПолучателя" , ИдентификаторПолучателя);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ок_ПериодыДействияСоглашений");
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель", Получатель);
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель" , Отправитель);
		ЭлементБлокировкиДанных.УстановитьЗначение("Входящий"    , Истина);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )

		БлокировкаДанных.Заблокировать();
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-10-01 (#3879)
		УчетнаяЗаписьПоКастомизированномуЭДО = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УчетнаяЗаписьПоКастомизированномуЭДО(ИдентификаторПолучателя);
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-10-01 (#3879)
		
		Если ЗначениеЗаполнено(ИдентификаторОтправителя)
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
			И Не УчетнаяЗаписьПоКастомизированномуЭДО
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
			Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки КАК СпособОбработки
			|ИЗ
			|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
			|ГДЕ
			|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
			|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
			|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """"
			|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"";
			
			Запрос.УстановитьПараметр("Отправитель", Отправитель);
			Запрос.УстановитьПараметр("Получатель", Получатель);
			
			Если Запрос.Выполнить().Пустой() Тогда
				
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нельзя создать настройку получения по идентификаторам, без общей настойки по организации
					|Сначала добавьте настройку по организации'"));
				ОтменитьТранзакцию();
				Возврат Ложь;
				
			КонецЕсли;
		КонецЕсли;
		
		Ответ = Истина;
				
		ТаблицаВходящиеДокументы = ВходящиеДокументы.Выгрузить();
		
		ТаблицаВходящиеДокументы.Колонки.Добавить("Получатель");
		ТаблицаВходящиеДокументы.ЗаполнитьЗначения(Получатель, "Получатель");
		
		ТаблицаВходящиеДокументы.Колонки.Добавить("Отправитель");
		ТаблицаВходящиеДокументы.ЗаполнитьЗначения(Отправитель, "Отправитель");
		
		ТаблицаВходящиеДокументы.Колонки.Добавить("ИдентификаторПолучателя");
		ТаблицаВходящиеДокументы.ЗаполнитьЗначения(ИдентификаторПолучателя, "ИдентификаторПолучателя");
		
		ТаблицаВходящиеДокументы.Колонки.Добавить("ИдентификаторОтправителя");
		ТаблицаВходящиеДокументы.ЗаполнитьЗначения(ИдентификаторОтправителя, "ИдентификаторОтправителя");
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		ТаблицаВходящиеДокументы.Колонки.Добавить("ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования");
		ТаблицаВходящиеДокументы.ЗаполнитьЗначения(ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования, "ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования");
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-30 (#3879)
		ТаблицаВходящиеДокументы.Колонки.Добавить("ок_ИдентификаторУчастникаОбмена");
		ТаблицаВходящиеДокументы.ЗаполнитьЗначения(ок_ИдентификаторУчастникаОбмена, "ок_ИдентификаторУчастникаОбмена");
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-30 (#3879)
		
		НаборЗаписей = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Получатель.Установить(Получатель);
		НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
		НаборЗаписей.Отбор.ИдентификаторОтправителя.Установить(ИдентификаторОтправителя);
		НаборЗаписей.Отбор.ИдентификаторПолучателя.Установить(ИдентификаторПолучателя);
		НаборЗаписей.Загрузить(ТаблицаВходящиеДокументы);
		
		
		НаборЗаписей.Записать();
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		НаборЗаписей = РегистрыСведений.ок_ПериодыДействияСоглашений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(Получатель);
		НаборЗаписей.Отбор.Получатель.Установить(Отправитель);
		НаборЗаписей.Отбор.Входящий.Установить(Истина);
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
		НаборЗаписей.Отбор.ИдентификаторОтправителя.Установить(ИдентификаторПолучателя);
		НаборЗаписей.Отбор.ИдентификаторПолучателя.Установить(ИдентификаторОтправителя);
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
		Для Каждого СтрокаТаблицы ИЗ ПериодыДействия Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Отправитель = Получатель; 
			НоваяЗапись.Получатель = Отправитель;
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
			НоваяЗапись.ИдентификаторОтправителя = ИдентификаторПолучателя;
			НоваяЗапись.ИдентификаторПолучателя = ИдентификаторОтправителя;
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
			НоваяЗапись.Входящий = Истина;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		КонецЦикла;	
		НаборЗаписей.Записать();
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
		//СоглашениеСтруктура = Новый Структура("Отправитель, Получатель", Получатель, Отправитель);
		СоглашениеСтруктура = Новый Структура("Отправитель, 
												|Получатель,
												|ИдентификаторОтправителя,
												|ИдентификаторПолучателя",
		
												Получатель, 
												Отправитель,
												ИдентификаторПолучателя,
												ИдентификаторОтправителя);
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
		РегистрыСведений.ок_ИсторияСоглашенияОбИспользованииЭД.ОбновитьИсторию(СоглашениеСтруктура);
		
		//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-10-01 (#3879)
		Если УчетнаяЗаписьПоКастомизированномуЭДО Тогда
			Набор = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьНаборЗаписей();
			Набор.Отбор.Контрагент.Установить(Отправитель);
			Набор.Прочитать();
			
			Если Не ЗначениеЗаполнено(Набор)
				ИЛИ Набор[0].Состояние <> Перечисления.СостоянияКонтрагентаБЭД.НастроенЭДО Тогда 
				
				СтруктураРеквизитовКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отправитель, "ИНН, КПП");
				
				Набор.Очистить();
				Состояние = Набор.Добавить();
				Состояние.Контрагент = Отправитель;
				Состояние.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НастроенЭДО;
				Состояние.ИНН = СтруктураРеквизитовКонтрагента.ИНН;
				Состояние.КПП = СтруктураРеквизитовКонтрагента.КПП;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			КонецЕсли;
		КонецЕсли;
		//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-10-01 (#3879)
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Сохранение настроек входящих документов'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КраткийТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, КраткийТекстОшибки, "ОбменСКонтрагентами");
		
		Ответ = Ложь;
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокОкна()

	Возврат НСтр("ru = 'Настройка отражения документов в учете'");

КонецФункции

&НаКлиенте
Процедура ПослеВопросаУдаленияНастройки(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Организация"             , Организация);
	ПараметрыПроцедуры.Вставить("Контрагент"              , Контрагент);
	ПараметрыПроцедуры.Вставить("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	ПараметрыПроцедуры.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	ДлительнаяОперация = НачатьУдалениеНастроекОтправкиНаСервере(УникальныйИдентификатор, ПараметрыПроцедуры);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		Элементы.ГруппаОжиданиеУдаления.Видимость = Истина;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Описание = Новый ОписаниеОповещения("ПриЗавершенииУдаленияНастроекОтправки", ЭтаФорма);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьУдалениеНастроекОтправкиНаСервере(Знач УникальныйИдентификатор, Знач ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление настройки отправки электронных документов'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.УдалитьНастройкиОтраженияЭДО",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииУдаленияНастроекОтправки(Результат, ДополнительныеПараметры) Экспорт
	
	ТолькоПросмотр = Ложь;
	Элементы.ГруппаОжиданиеУдаления.Видимость = Ложь;

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ТекстСообщения = НСтр("ru = 'Во время удаления настройки отражения в учете произошла ошибка.'");
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Удаление настройки отражения в учет ЭДО'"),
			Результат.ПодробноеПредставлениеОшибки, ТекстСообщения);
			
		Возврат;
	КонецЕсли;
	
	Если ПолучитьИзВременногоХранилища(Результат.АдресРезультата) = Истина Тогда
		
		Оповестить("ОбновитьСостояниеЭД");
		Оповестить("ОбновитьТекущиеДелаЭДО");
		Закрыть();
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Во время удаления настройки отражения в учет произошла ошибка.
                               |Подробнее см. в журнале регистрации.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемОкнаФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть(Элементы.ФормаЗаписатьИЗакрыть);
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОК

//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103

&НаСервере
Процедура ок_УправлениеФормой(ДополнительныеПараметры = Неопределено) Экспорт
	
	ОсобоеОтображение = ЗначениеЗаполнено(РегистрыСведений.УчетныеЗаписиЭДО.ЗначениеРеквизитаРегистра(Организация, "ок_СпособОбменаЭД"));
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования");
	Для каждого Имя Из ИменаЭлементов Цикл
		Элемент = Элементы.Найти(Имя);
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = ОсобоеОтображение;
		КонецЕсли;	
	КонецЦикла;
	
	Если ОсобоеОтображение И ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ИзменятьСпособОтраженияВходящих") И ДополнительныеПараметры.ИзменятьСпособОтраженияВходящих Тогда
		УстанавливаемоеЗначение = "Вручную";
		Для каждого Строка из ВходящиеДокументы Цикл
			Если Строка.СпособОбработки = УстанавливаемоеЗначение Тогда
				Продолжить;
			КонецЕсли;	
			Строка.СпособОбработки = УстанавливаемоеЗначение;
			Строка.ПредставлениеСпособаОбработки = "Вручную в форме электронного документа";
		КонецЦикла;
	КонецЕсли;	
	
	Если ОсобоеОтображение Тогда
		НастройкаЭДО = Новый Структура("ИдентификаторОтправителя, ИдентификаторПолучателя", ИдентификаторОрганизации, ИдентификаторКонтрагента);
		ПоследниеПериодыДействия = ок_ОбменСКонтрагентамиВнутренний.ПоследниеПериодыДействияСоглашенияОбИспользованияЭД(НастройкаЭДО, ЭтотОбъект["ок_ПериодыДействияВходящие"], "");
		ЭтотОбъект.ок_ТекстПериодыДействияВходящие = "Входящий ЭДО: с <" + Формат(ПоследниеПериодыДействия.ДатаНачала, "ДФ=dd.MM.yyyy; ДП='не указано'") + "> по <" + Формат(ПоследниеПериодыДействия.ДатаОкончания, "ДФ=dd.MM.yyyy; ДП='не указано'") + ">";
		//ЭтотОбъект.ок_ТекстПериодыДействияИсходящие = "Исходящий ЭДО: с <" + Формат(ПоследниеПериодыДействия.ДатаНачалаИсходящие, "ДФ=dd.MM.yyyy; ДП='не указано'") + "> по <" + Формат(ПоследниеПериодыДействия.ДатаОкончанияИсходящие, "ДФ=dd.MM.yyyy; ДП='не указано'") + ">";
	КонецЕсли;	
	
КонецПроцедуры	

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-10-02 (#3337)

&НаКлиенте
Процедура ок_ТекстПериодыДействияВходящиеНажатие(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("ИмяТабличнойЧасти, ТолькоПросмотр, ПериодыДействия", "ок_ПериодыДействияВходящие", ТолькоПросмотр, ок_УпаковатьТаблицу("ок_ПериодыДействияВходящие"));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ок_ТекстПериодыДействияНажатиеЗавершение", ЭтотОбъект, ПараметрыОткрытия);
	
	ОткрытьФорму("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.Форма.ок_ФормаРедактированияПериодыДействия", ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ок_УпаковатьТаблицу(ИмяТабличнойЧасти)
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить());
	
КонецФункции	

&НаКлиенте
Процедура ок_ТекстПериодыДействияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяТабличнойЧасти].Очистить();
	Для каждого Строка из Результат Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ДополнительныеПараметры.ИмяТабличнойЧасти].Добавить(), Строка);
	КонецЦикла;	
	
	Модифицированность = Истина;
	
	ок_УправлениеФормой();
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-17 (#3377)

//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103

//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
&НаКлиенте
Процедура ок_ИдентификаторОрганизацииПриИзменении(Элемент) Экспорт
	
	ок_УправлениеФормой();	
	
КонецПроцедуры

//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )

#КонецОбласти

