#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс
	
// Функция инициализирует структуру параметров, используемую для передачи данных о заместителе.
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
Функция КонструкторПараметрыНазначенияЗаместителя() Экспорт

	РезСтр = Новый Структура("ИмяКласса
	                           |,ОбластьЗамещения
							   |,Пользователь
							   |,Состояние
							   |,Виза
							   |,ПользовательскоеУсловие
							   |,РольИсполнителя
							   |,Заместитель
							   |,ПередаватьПраваРЛС
							   |,ДатаНачала
							   |,ДатаОкончания","ПараметрыНазначенияЗаместителя");
	
	МаксКоличествоОбъектов = бит_уп_Сервер.МаксимальноеКоличествоОбъектовАдресации();
	
	Для н = 1 По МаксКоличествоОбъектов Цикл
	
		РезСтр.Вставить("ОбъектАдресации_"+н);
	
	КонецЦикла;

	Возврат РезСтр;
	
КонецФункции // КонструкторСтруктурыЗаместителя()

// Процедура определяет текущую область замещения.
// 
// Параметры:
//   СтрПар- Структура.ПараметрыНазначенияЗаместителя
// 
Процедура ОпределитьОбластьЗамещения(СтрПар) Экспорт

	Если ЗначениеЗаполнено(СтрПар.РольИсполнителя) Тогда
		
		СтрПар.ОбластьЗамещения = "Роли";
		
	ИначеЕсли ЗначениеЗаполнено(СтрПар.Виза) Тогда	
		
		СтрПар.ОбластьЗамещения = "Визы";
		
	Иначе
		
		СтрПар.ОбластьЗамещения = "";
		
	КонецЕсли; 

КонецПроцедуры // ОпределитьОбластьЗамещения()

// Функция определяет состояние для записи о назначении заместителя.
// 
// Параметры:
//    ДатаНачала - Дата
// 
// Возвращаемое значение:
//  ТекСостояние - ПеречислениеСсылка.бит_СостоянияЗаместителей.
// 
Функция ОпределитьСостояниеЗамещения(ДатаНачала, ДатаОкончания, ТекДата) Экспорт
	
	ТекСостояние = Перечисления.бит_СостоянияЗаместителей.Ожидание;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ ДатаНачала <= ТекДата Тогда
		
		ТекСостояние = Перечисления.бит_СостоянияЗаместителей.Назначен;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДатаОкончания) И КонецДня(ДатаОкончания) < ТекДата Тогда
		
		ТекСостояние = Перечисления.бит_СостоянияЗаместителей.ЗамещениеЗавершено;
		
	КонецЕсли; 
	
	Возврат ТекСостояние;
	
КонецФункции // ОпределитьСостояние()

// Функция проверяет необходимо ли выполнить назначение заместителя 
// в регистрах бит_ПраваУстановкиВиз и бит_ИсполнителиЗадач.
// 
// Параметры:
//  СтрПар - Структура.ПараметрыНазначенияЗаместителя
//  КоличествоНазначенных - Число.
// 
// Возвращаемое значение:
//  флНеобходимо - Булево.
// 
Функция НеобходимоНазначитьЗаместителя(СтрПар, КоличествоНазначенных) Экспорт

	флНеобходимо = Ложь;
	
	Если КоличествоНазначенных = 0 Тогда
	
		Если НЕ ЗначениеЗаполнено(СтрПар.ДатаНачала) ИЛИ СтрПар.ДатаНачала <= ТекущаяДата() Тогда
		
			флНеобходимо = Истина;
		
		КонецЕсли; 
	
	КонецЕсли; 

	Возврат флНеобходимо;
	
КонецФункции // НеобходимоНазначитьЗаместителя()

// Процедура назначает заместителей в регистры бит_ПраваУстановкиВиз и бит_ИсполнителиЗадач.
// 
// Параметры:
//  СтрПар - Структура.ПараметрыНазначенияЗаместителя.
// 
Функция НазначитьЗаместителя(СтрПар, Протокол = "")  Экспорт

	флВыполнено = Ложь;
	
 	ОпределитьОбластьЗамещения(СтрПар);
	
	ТабЗам = ПолучитьНазначенныхЗаместителей(СтрПар);
	КоличествоЗаписей = ТабЗам.Количество();
	
	
	Если НеобходимоНазначитьЗаместителя(СтрПар, КоличествоЗаписей) Тогда
		
		Если СтрПар.ОбластьЗамещения = "Визы" Тогда
			
			МенеджерЗаписи = РегистрыСведений.бит_ПраваУстановкиВиз.СоздатьМенеджерЗаписи();
		    ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрПар);					
			МенеджерЗаписи.Пользователь = СтрПар.Заместитель;			
			
		ИначеЕсли СтрПар.ОбластьЗамещения = "Роли" Тогда	
			
			МенеджерЗаписи = РегистрыСведений.бит_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
		    ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрПар);					
			МенеджерЗаписи.Исполнитель = СтрПар.Заместитель;
			
		КонецЕсли; 
		
		МенеджерЗаписи.Замещаемый = СтрПар.Пользователь;
		
		Попытка
		
			МенеджерЗаписи.Записать();
			флВыполнено = Истина;
			
			ТекстСообщения = НСтр("ru = 'Установлен заместитель ""%1%"" пользователю ""%2%"" по области замещения ""%3%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
			                                                                             , СтрПар.Заместитель
																						 , СтрПар.Пользователь
																						 , СтрПар.ОбластьЗамещения
																						 , ОписаниеОшибки());
			
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось установить заместителя ""%1%"" пользователю ""%2%"" по области замещения ""%3%""! Описание ошибки: ""%4%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
			                                                                             , СтрПар.Заместитель
																						 , СтрПар.Пользователь
																						 , СтрПар.ОбластьЗамещения
																						 , ОписаниеОшибки());
																						 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																			 
			
		КонецПопытки;
		
		Если флВыполнено И СтрПар.ПередаватьПраваРЛС Тогда
			бит_ПраваДоступа.ОбработатьНастройкиРЛСПользователя(СтрПар.Пользователь, СтрПар.Заместитель);
		КонецЕсли;

		Протокол = Протокол +?(ПустаяСтрока(Протокол),"",Символы.ПС) + ТекстСообщения;
		
	КонецЕсли; 

КонецФункции // НазначитьЗаместителя()

// Функция удаляет назначенных заместителей из регистров 
// бит_ПраваУстановкиВиз, бит_ИсполнителиЗадач.
// 
// Параметры:
//  СтрПар - Структура.ПараметрыНазначенияЗаместителя.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция УдалитьНазначениеЗаместителей(СтрПар, Протокол = "") Экспорт

	//+СБ Пискунова 14.03.2017 #2691
	УстановитьПривилегированныйРежим(Истина);
	//-СБ Пискунова 14.03.2017 #2691

	флВыполнено = Истина;
	
	ТабЗам = ПолучитьНазначенныхЗаместителей(СтрПар);
	
	Для каждого СтрокаТаблицы Из ТабЗам Цикл
	
		Если СтрПар.ОбластьЗамещения = "Визы" Тогда
			
			МенеджерЗаписи = РегистрыСведений.бит_ПраваУстановкиВиз.СоздатьМенеджерЗаписи();
			
		ИначеЕсли СтрПар.ОбластьЗамещения = "Роли" Тогда
			
			МенеджерЗаписи = РегистрыСведений.бит_ИсполнителиЗадач.СоздатьМенеджерЗаписи();
			
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
		
		Попытка
		
			МенеджерЗаписи.Удалить();
			
			ТекстСообщения = НСтр("ru = 'Удален заместитель ""%1%"" пользователя ""%2%"" по области замещения ""%3%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
			                                                                             , СтрПар.Заместитель
																						 , СтрПар.Пользователь
																						 , СтрПар.ОбластьЗамещения
																						 , ОписаниеОшибки());
			
			
		Исключение
			
			флВыполнено = Ложь;
			
			ТекстСообщения = НСтр("ru = 'Не удалось удалить заместителя ""%1%"" пользователя ""%2%"" по области замещения ""%3%""! Описание ошибки: ""%4%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
			                                                                             , СтрПар.Заместитель
																						 , СтрПар.Пользователь
																						 , СтрПар.ОбластьЗамещения
																						 , ОписаниеОшибки());
																						 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																			 
			
			
		КонецПопытки;
		
		Если флВыполнено Тогда
			бит_ПраваДоступа.УдалитьПраваРЛСЗаместителя(СтрПар.Пользователь, СтрПар.Заместитель);
		КонецЕсли;
		
		Протокол = Протокол +?(ПустаяСтрока(Протокол),"",Символы.ПС) + ТекстСообщения;
		
	КонецЦикла; 
	
	//+СБ Пискунова 14.03.2017 #2691
	УстановитьПривилегированныйРежим(Ложь);
	//-СБ Пискунова 14.03.2017 #2691

	Возврат флВыполнено;
	
КонецФункции // УдалитьНазначениеЗаместителей()

// Функция получает назначенных заместителей.
// 
// Параметры:
//  СтрПар - Структура
// 
// Возвращаемое значение:
//  ТабЗам - ТаблицаЗначений.
// 
Функция ПолучитьНазначенныхЗаместителей(СтрПар) Экспорт

	ТабЗам = Новый ТаблицаЗначений;
	
	ОпределитьОбластьЗамещения(СтрПар);
	
	Если СтрПар.ОбластьЗамещения = "Визы" Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Виза", СтрПар.Виза);
		Запрос.УстановитьПараметр("Заместитель", СтрПар.Заместитель);
		Запрос.УстановитьПараметр("Пользователь", СтрПар.Пользователь);
		
		Если ЗначениеЗаполнено(СтрПар.ПользовательскоеУсловие) Тогда
		
			Запрос.УстановитьПараметр("ПользовательскоеУсловие", СтрПар.ПользовательскоеУсловие);
			
		Иначе
			
			Запрос.УстановитьПараметр("ПользовательскоеУсловие", Справочники.бит_ПользовательскиеУсловия.ПустаяСсылка());
		
		КонецЕсли; 
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_ПраваУстановкиВиз.Пользователь,
		               |	бит_ПраваУстановкиВиз.Виза,
		               |	бит_ПраваУстановкиВиз.ПользовательскоеУсловие,
		               |	бит_ПраваУстановкиВиз.Замещаемый
		               |ИЗ
		               |	РегистрСведений.бит_ПраваУстановкиВиз КАК бит_ПраваУстановкиВиз
		               |ГДЕ
		               |	бит_ПраваУстановкиВиз.Виза = &Виза
		               |	И бит_ПраваУстановкиВиз.Пользователь = &Заместитель
		               |	И бит_ПраваУстановкиВиз.Замещаемый = &Пользователь
		               |	И бит_ПраваУстановкиВиз.ПользовательскоеУсловие = &ПользовательскоеУсловие";
					   
					   
		Результат = Запрос.Выполнить();
		
		ТабЗам = Результат.Выгрузить();
		
	ИначеЕсли СтрПар.ОбластьЗамещения = "Роли" Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РольИсполнителя", СтрПар.РольИсполнителя);
		
	    МаксКоличествоОбъектов = бит_уп_Сервер.МаксимальноеКоличествоОбъектовАдресации();
		Для н = 1 По МаксКоличествоОбъектов Цикл
		
			Запрос.УстановитьПараметр("ОбъектАдресации_"+н, СтрПар["ОбъектАдресации_"+н]);
		
		КонецЦикла; 
		
		Запрос.УстановитьПараметр("Заместитель", СтрПар.Заместитель);
		Запрос.УстановитьПараметр("Пользователь", СтрПар.Пользователь);		
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_ИсполнителиЗадач.РольИсполнителя,
		               |	бит_ИсполнителиЗадач.Исполнитель,
		               |	бит_ИсполнителиЗадач.ОбъектАдресации_1,
		               |	бит_ИсполнителиЗадач.ОбъектАдресации_2,
		               |	бит_ИсполнителиЗадач.ОбъектАдресации_3,
		               |	бит_ИсполнителиЗадач.Замещаемый
		               |ИЗ
		               |	РегистрСведений.бит_ИсполнителиЗадач КАК бит_ИсполнителиЗадач
		               |ГДЕ
		               |	бит_ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		               |	И бит_ИсполнителиЗадач.ОбъектАдресации_1 = &ОбъектАдресации_1
		               |	И бит_ИсполнителиЗадач.ОбъектАдресации_2 = &ОбъектАдресации_2
		               |	И бит_ИсполнителиЗадач.ОбъектАдресации_3 = &ОбъектАдресации_3
		               |	И бит_ИсполнителиЗадач.Исполнитель = &Заместитель
		               |	И бит_ИсполнителиЗадач.Замещаемый = &Пользователь";
					   
		Результат = Запрос.Выполнить();
		
		ТабЗам = Результат.Выгрузить();
		
	КонецЕсли; 

	Возврат ТабЗам;
	
КонецФункции // ЗаместительНазначен()

// Функция получает сведения о назначенном заместителе.
// 
// Параметры:
//   СтрПар- Структура.ПараметрыНазначенияЗаместителя
// 
// 
Процедура ПолучитьСведенияПоЗаместителю(СтрПар) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", СтрПар.Пользователь);
	Запрос.УстановитьПараметр("Заместитель", СтрПар.Заместитель);
	Запрос.Текст ="ВЫБРАТЬ
	              |	бит_НазначенныеЗаместители.Пользователь,
	              |	бит_НазначенныеЗаместители.Состояние,
	              |	бит_НазначенныеЗаместители.Виза,
	              |	бит_НазначенныеЗаместители.ПользовательскоеУсловие,
	              |	бит_НазначенныеЗаместители.РольИсполнителя,
	              |	бит_НазначенныеЗаместители.ОбъектАдресации_1,
	              |	бит_НазначенныеЗаместители.ОбъектАдресации_2,
	              |	бит_НазначенныеЗаместители.ОбъектАдресации_3,
	              |	бит_НазначенныеЗаместители.Заместитель,
	              |	бит_НазначенныеЗаместители.ДатаНачала,
	              |	бит_НазначенныеЗаместители.ДатаОкончания
	              |ИЗ
	              |	РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
	              |ГДЕ
	              |	бит_НазначенныеЗаместители.Пользователь = &Пользователь
	              |	И бит_НазначенныеЗаместители.Заместитель = &Заместитель"; 
	
				  
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтрПар.ДатаНачала = Выборка.ДатаНачала;
		СтрПар.ДатаОкончания = Выборка.ДатаОкончания;
		СтрПар.Состояние = Выборка.Состояние;
	
	КонецЕсли; 
				  
	
КонецПроцедуры // ПолучитьСведенияПоЗаместителю()

// Функция формирует представление периода замещения.
// 
// Параметры:
//   СтрПар- Структура.ПараметрыНазначенияЗаместителя
// 
// Возвращаемое значение:
//  ПредставлениеПериода - Строка.
// 
Функция ПредставлениеПериодаЗамещения(СтрПар) Экспорт
	
	Если СтрПар.ДатаНачала = Неопределено Тогда
	
		 ПолучитьСведенияПоЗаместителю(СтрПар);
	
	КонецЕсли; 
	
	ПредставлениеПериода =  НСтр("ru = 'Без ограничения'");
	
	Если ЗначениеЗаполнено(СтрПар.ДатаНачала) И ЗначениеЗаполнено(СтрПар.ДатаОкончания) Тогда
		
		ПредставлениеПериода =  НСтр("ru = 'На период с %1% по %2%'");
        ПредставлениеПериода = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ПредставлениеПериода
		                                                              , Формат(СтрПар.ДатаНачала,"ДФ=dd.MM.yyyy")
																	  , Формат(СтрПар.ДатаОкончания,"ДФ=dd.MM.yyyy"));
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрПар.ДатаНачала) И ЗначениеЗаполнено(СтрПар.ДатаОкончания) Тогда
		
		ПредставлениеПериода =  НСтр("ru = 'По %1%'");
        ПредставлениеПериода = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ПредставлениеПериода, Формат(СтрПар.ДатаОкончания,"ДФ=dd.MM.yyyy"));
		
	ИначеЕсли ЗначениеЗаполнено(СтрПар.ДатаНачала) И НЕ ЗначениеЗаполнено(СтрПар.ДатаОкончания) Тогда
		
		ПредставлениеПериода =  НСтр("ru = 'С %1%'");
        ПредставлениеПериода = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ПредставлениеПериода, Формат(СтрПар.ДатаНачала,"ДФ=dd.MM.yyyy"));		
		
	КонецЕсли; 
	
	Возврат ПредставлениеПериода;
	
КонецФункции // ПредставлениеПериодаЗамещения()

#КонецОбласти

#КонецЕсли
