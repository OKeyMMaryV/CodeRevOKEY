&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//для копии сбрасываем номер строки
	Если Параметры.ЗначениеКопирования <> Неопределено Тогда 
		Объект.НомерЗаписи = 0;
	КонецЕсли;
	//БИТ Тртилек
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	///БИТ Тртилек
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СчетВыручкиПриИзменении(Элементы.СчетВыручки);
	СчетНакопленнойАмортизацииПриИзменении(Элементы.СчетНакопленнойАмортизации);
	СчетРасходаПоАмортизацииПриИзменении(Элементы.СчетРасходаПоАмортизации);
	СчетУчетаАктиваПриИзменении(Элементы.СчетУчетаАктива);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.ДокументПоступления) = Тип("ДокументСсылка.бит_му_МодернизацияОС") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Документ.бит_му_МодернизацияОС.ФормаВыбора",,Элемент,"ДокументСсылка.бит_му_МодернизацияОС");
		НовыйОтбор = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидОперации");
		НовыйОтбор.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС");
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ФормаВыбора.Открыть();
		
	ИначеЕсли ТипЗнч(Объект.ДокументПоступления) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Документ.бит_му_ПринятиеКУчетуОС.ФормаВыбора",,Элемент, "ДокументСсылка.бит_му_ПринятиеКУчетуОС");
		НовыйОтбор = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидОперации");
		НовыйОтбор.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС");
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ФормаВыбора.Открыть();

	КонецЕсли;
	
КонецПроцедуры

// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
&НаСервере
Процедура ПриВыбореСчетаВТабличномПоле(Счет, Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, 
	Субконто3, ЭлементДиалогаСубконто3, Субконто4, ЭлементДиалогаСубконто4, Подразделение = Неопределено, ЭлементДиалогаПодразделение = Неопределено, 
	ЭлементДиалогаСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ, ТолькоПросмотрПартииУСН = Истина) Экспорт
	
	ЭлементыСубконто = Новый Структура(
		"Субконто1,ЭлементДиалогаСубконто1,Субконто2,ЭлементДиалогаСубконто2,Субконто3,ЭлементДиалогаСубконто3, Субконто4,ЭлементДиалогаСубконто4", 
		Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3, Субконто4, ЭлементДиалогаСубконто4);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		
		Если ТипЗнч(ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч]) = Тип("ПолеФормы") Тогда
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		Иначе
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ЭлементУправления.ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		КонецЕсли; 
			
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 4 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
	Если ЭлементДиалогаПодразделение <> Неопределено Тогда
		ЭлементДиалогаПодразделение.ТолькоПросмотр = НЕ Счет.УчетПоПодразделениям;
	КонецЕсли;
	
	Если ЭлементДиалогаСчет <> Неопределено Тогда
		ЭлементДиалогаСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;

	Если Не Субконто1 = ЭлементыСубконто.Субконто1 Тогда
		Субконто1 = ЭлементыСубконто.Субконто1;
	КонецЕсли;
	Если Не Субконто2 = ЭлементыСубконто.Субконто2 Тогда
		Субконто2 = ЭлементыСубконто.Субконто2;
	КонецЕсли;
	Если Не Субконто3 = ЭлементыСубконто.Субконто3 Тогда
		Субконто3 = ЭлементыСубконто.Субконто3;
	КонецЕсли;
	
	Если Не Субконто4 = ЭлементыСубконто.Субконто4 Тогда
		Субконто4 = ЭлементыСубконто.Субконто4;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

&НаСервере
Процедура СчетВыручкиПриИзменении_Сервер()
	ПриВыбореСчетаВТабличномПоле(Объект.СчетВыручки, 
		Объект.Субконто1СчетаВыручки, Элементы.Субконто1СчетаВыручки,
		Объект.Субконто2СчетаВыручки, Элементы.Субконто2СчетаВыручки,
		Объект.Субконто3СчетаВыручки, Элементы.Субконто3СчетаВыручки,
		Объект.Субконто4СчетаВыручки, Элементы.Субконто4СчетаВыручки);
КонецПроцедуры

&НаСервере
Процедура СчетУчетаАктиваПриИзменении_Сервер()
	
	ПриВыбореСчетаВТабличномПоле(Объект.СчетУчетаАктива, 
		Объект.Субконто1СчетаУчетаАктива, Элементы.Субконто1СчетаУчетаАктива,
		Объект.Субконто2СчетаУчетаАктива, Элементы.Субконто2СчетаУчетаАктива,
		Объект.Субконто3СчетаУчетаАктива, Элементы.Субконто3СчетаУчетаАктива,
		Объект.Субконто4СчетаУчетаАктива, Элементы.Субконто4СчетаУчетаАктива);
	
КонецПроцедуры

&НаСервере
Процедура СчетРасходаПоАмортизацииПриИзменении_Сервер()
	
	ПриВыбореСчетаВТабличномПоле(Объект.СчетРасходаПоАмортизации, 
		Объект.Субконто1СчетаРасходаПоАмортизации, Элементы.Субконто1СчетаРасходаПоАмортизации,
		Объект.Субконто2СчетаРасходаПоАмортизации, Элементы.Субконто2СчетаРасходаПоАмортизации,
		Объект.Субконто3СчетаРасходаПоАмортизации, Элементы.Субконто3СчетаРасходаПоАмортизации,
		Объект.Субконто4СчетаРасходаПоАмортизации, Элементы.Субконто4СчетаРасходаПоАмортизации);
	
КонецПроцедуры

&НаСервере
Процедура СчетНакопленнойАмортизацииПриИзменении_Сервер()
	
	ПриВыбореСчетаВТабличномПоле(Объект.СчетНакопленнойАмортизации, 
		Объект.Субконто1СчетаНакопленнойАмортизации, Элементы.Субконто1СчетаНакопленнойАмортизации,
		Объект.Субконто2СчетаНакопленнойАмортизации, Элементы.Субконто2СчетаНакопленнойАмортизации,
		Объект.Субконто3СчетаНакопленнойАмортизации, Элементы.Субконто3СчетаНакопленнойАмортизации,
		Объект.Субконто4СчетаНакопленнойАмортизации, Элементы.Субконто4СчетаНакопленнойАмортизации);
	
КонецПроцедуры



&НаКлиенте
Процедура СчетВыручкиПриИзменении(Элемент)
	СчетВыручкиПриИзменении_Сервер();	
	//ПриВыбореСчетаВТабличномПоле(Объект.СчетВыручки, 
	//	Объект.Субконто1СчетаВыручки, Элементы.Субконто1СчетаВыручки,
	//	Объект.Субконто2СчетаВыручки, Элементы.Субконто2СчетаВыручки,
	//	Объект.Субконто3СчетаВыручки, Элементы.Субконто3СчетаВыручки,
	//	Объект.Субконто4СчетаВыручки, Элементы.Субконто4СчетаВыручки);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаАктиваПриИзменении(Элемент)
	СчетУчетаАктиваПриИзменении_Сервер();
	//ПриВыбореСчетаВТабличномПоле(Объект.СчетУчетаАктива, 
	//	Объект.Субконто1СчетаУчетаАктива, Элементы.Субконто1СчетаУчетаАктива,
	//	Объект.Субконто2СчетаУчетаАктива, Элементы.Субконто2СчетаУчетаАктива,
	//	Объект.Субконто3СчетаУчетаАктива, Элементы.Субконто3СчетаУчетаАктива,
	//	Объект.Субконто4СчетаУчетаАктива, Элементы.Субконто4СчетаУчетаАктива);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетРасходаПоАмортизацииПриИзменении(Элемент)
	СчетРасходаПоАмортизацииПриИзменении_Сервер();
	//ПриВыбореСчетаВТабличномПоле(Объект.СчетРасходаПоАмортизации, 
	//	Объект.Субконто1СчетаРасходаПоАмортизации, Элементы.Субконто1СчетаРасходаПоАмортизации,
	//	Объект.Субконто2СчетаРасходаПоАмортизации, Элементы.Субконто2СчетаРасходаПоАмортизации,
	//	Объект.Субконто3СчетаРасходаПоАмортизации, Элементы.Субконто3СчетаРасходаПоАмортизации,
	//	Объект.Субконто4СчетаРасходаПоАмортизации, Элементы.Субконто4СчетаРасходаПоАмортизации);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНакопленнойАмортизацииПриИзменении(Элемент)
	СчетНакопленнойАмортизацииПриИзменении_Сервер();
	//ПриВыбореСчетаВТабличномПоле(Объект.СчетНакопленнойАмортизации, 
	//	Объект.Субконто1СчетаНакопленнойАмортизации, Элементы.Субконто1СчетаНакопленнойАмортизации,
	//	Объект.Субконто2СчетаНакопленнойАмортизации, Элементы.Субконто2СчетаНакопленнойАмортизации,
	//	Объект.Субконто3СчетаНакопленнойАмортизации, Элементы.Субконто3СчетаНакопленнойАмортизации,
	//	Объект.Субконто4СчетаНакопленнойАмортизации, Элементы.Субконто4СчетаНакопленнойАмортизации);
	
КонецПроцедуры