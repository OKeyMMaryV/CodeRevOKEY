#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.бит_му_СтатьиРегл_ВидыЗатрат;
	
	// Вызов механизма защиты
	
	
	бит_РаботаСДиалогамиСервер.ФормаЗаписиРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьКэшЗначений();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
// 
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Статья 		= ТекущийОбъект.СтатьяРегл;
	ВидЗатрат 	= ТекущийОбъект.ВидЗатрат; 
	Если Не Параметры.Ключ.Пустой() Тогда
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРегл", Статья);
	Запрос.УстановитьПараметр("ВидЗатрат" , ВидЗатрат);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА РегистрСтатьиВиды.ВидЗатрат = &ВидЗатрат
	|	ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|КОНЕЦ КАК ВидЗатратСовпадает
	|ИЗ
	|	РегистрСведений.бит_му_СтатьиРегл_ВидыЗатрат КАК РегистрСтатьиВиды
	|ГДЕ
	|	РегистрСтатьиВиды.СтатьяРегл = &СтатьяРегл
	|";
	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Не Выборка.ВидЗатратСовпадает Тогда
			ТекстСообщения = Нстр("ru = 'Запись по статье """ + Статья + """ уже существует.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Отказ = Истина;
		Иначе
			ТекстКлючевыхПолей = Строка(Статья) + " - " + Строка(ВидЗатрат);
			ТекстСообщения = Нстр("ru = 'Запись по таким ключевым полям существует (" + ТекстКлючевыхПолей + ").'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "НачалоВыбора" поля ввода "СтатьяРегл".
// 
&НаКлиенте
Процедура СтатьяРеглНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
	СписокТипов.Добавить(Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРеглНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокТипов);

КонецПроцедуры // СтатьяРеглНачалоВыбора()

// Процедура - завершение обработчика события "НачалоВыбора" поля ввода "СтатьяРегл".
// 
&НаКлиенте
Процедура СтатьяРеглНачалоВыбораЗавершение(ВыбранныйТип, Элемент) Экспорт
	
    Если ВыбранныйТип <> Неопределено Тогда
		
		МассивТипов = Новый Массив;
  		МассивТипов.Добавить(ВыбранныйТип.Значение);
 		Описание = Новый ОписаниеТипов(МассивТипов);
        Элемент.ОграничениеТипа = Описание;

		Элемент.ВыбиратьТип = Ложь;
		
 	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "СтатьяРегл".
// 
&НаКлиенте
Процедура СтатьяРеглПриИзменении(Элемент)
	
	Статья = Запись.СтатьяРегл;
	
	Если ЗначениеЗаполнено(Статья) Тогда
		
		Если ТипЗнч(Статья) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			Запись.ТипВидаЗатрат = фКэшЗначений.Перечисления.бит_му_ТипыВидовЗатрат.СтатьиЗатрат;
		ИначеЕсли ТипЗнч(Статья) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда	
		    Запись.ТипВидаЗатрат = фКэшЗначений.Перечисления.бит_му_ТипыВидовЗатрат.ПрочиеДоходыРасходы;
		КонецЕсли; 
		
	Иначе
		
		Запись.ТипВидаЗатрат = фКэшЗначений.ПустойТипВидовЗатрат;
		
	КонецЕсли;	
	
КонецПроцедуры // СтатьяРеглПриИзменении()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	КэшПеречисления = Новый Структура;
	
	КэшПеречисления.Вставить("бит_му_ТипыВидовЗатрат", 
							бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ТипыВидовЗатрат));
							
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	фКэшЗначений.Вставить("ПустойТипВидовЗатрат", Перечисления.бит_му_ТипыВидовЗатрат.ПустаяСсылка());

КонецПроцедуры // ЗаполнитьКэшЗначений()

#КонецОбласти

