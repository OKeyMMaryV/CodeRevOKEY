
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мТекущаяМодельУчета = Запись.МодельУчета;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КлассПриИзменении(Элемент)
	
	ЗаполнитьВидКласса();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельУчетаПриИзменении(Элемент)
	
	ПриИзмененииМоделиУчета();
	
	// ФКэшРеквизитов.МодельУчета = Запись.МодельУчета;
	
КонецПроцедуры

&НаКлиенте
Процедура МодельУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мТекущаяМодельУчета = Запись.МодельУчета;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиСервер.ФормаЗаписиРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);
	
	ЗаполнитьВидКласса();
	
	УправлениеЭлементамиФормы();
	
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("МодельУчета");
	
	ЗаполнитьКэшРеквизитовФормы();
	
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	Если НЕ Параметры.Ключ.Пустой()
		И бит_му_ВНА.ЕстьОбъектыКласса(Запись.Класс,Запись.Организация) Тогда
		
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.Класс.ТолькоПросмотр       = Истина;
		
	КонецЕсли;
	
	// Изменение кода. Начало. 03.04.2014{{
	УстановитьПараметрыВыбораДляСчетов();
    // Изменение кода. Конец. 03.04.2014}}

КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.СчетУчета);
	МассивЭлементов.Добавить(Элементы.СчетНачисленияАмортизации);
	МассивЭлементов.Добавить(Элементы.СчетРезерваПереоценки);
	МассивЭлементов.Добавить(Элементы.СчетСниженияСтоимости);
    МассивЭлементов.Добавить(Элементы.СчетРасходовОтОбесценения);
	МассивЭлементов.Добавить(Элементы.СчетДоходовОтОбесценения);

	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура заполняет кэш значений необходимый для работы на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	КэшПеречисления = Новый Структура;
	
	КэшПеречисления.Вставить("бит_му_МоделиУчетаВНА", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_МоделиУчетаВНА));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры

// Формирует кэш значений реквизитов формы.
// 
&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Запись[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Если ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность 
		ИЛИ Запись.МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПоПервоначальнойСтоимости Тогда
		
		Элементы.СчетРезерваПереоценки.ТолькоПросмотр = Истина;
	Иначе
		Элементы.СчетРезерваПереоценки.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	Если ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность 
		И Запись.МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости Тогда
		
		Элементы.СчетНачисленияАмортизации.ТолькоПросмотр = Истина;
		//БИТ Тртилек К.И.
		Элементы.НачислятьАмортизацию.ТолькоПросмотр	   = Истина;
		Элементы.СпособОтраженияРасходовПоАмортизации.ТолькоПросмотр = Истина;
		Элементы.МетодНачисленияАмортизации.ТолькоПросмотр = Истина;
		//БИТ Тртилек К.И.
	Иначе
		Элементы.СчетНачисленияАмортизации.ТолькоПросмотр = Ложь;
		//БИТ Тртилек К.И.
		Элементы.НачислятьАмортизацию.ТолькоПросмотр	   = Ложь;
		Элементы.СпособОтраженияРасходовПоАмортизации.ТолькоПросмотр = Ложь;
		Элементы.МетодНачисленияАмортизации.ТолькоПросмотр = Ложь;
		//БИТ Тртилек К.И.
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет вид класса ВНА.
// 
&НаСервере
Процедура ЗаполнитьВидКласса()
	
	Если ТипЗнч(Запись.Класс) = Тип("СправочникСсылка.бит_му_КлассыОсновныхСредств") Тогда
		ВидКласса = Запись.Класс.ВидКласса;
	ИначеЕсли ТипЗнч(Запись.Класс) = Тип("СправочникСсылка.бит_му_КлассыНМА") Тогда
		ВидКласса = НСтр("ru='Нематериальные активы");
	Иначе	
		ВидКласса = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМоделиУчета()
	
	Если Запись.МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПоПервоначальнойСтоимости 
		И фКэшРеквизитов.МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости Тогда
		
		Если бит_му_ВНА.ЕстьОбъектыКласса(Запись.Класс,Запись.Организация) Тогда
			
			Если ЗначениеЗаполнено(Запись.Организация) Тогда
				НачалоСообщения= НСтр("ru='Для организации ""%1%"" в '");
			Иначе
				НачалоСообщения= НСтр("ru='В '");
			КонецЕсли;
			
			ОкончаниеСообщения = НСтр("ru='системе зарегистрированы объекты класса ""%2%"". Изменение модели учета ""по переоцененной стоимости"" запрещено!'");
			ТекстСообщения = НачалоСообщения + ОкончаниеСообщения;
			
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Запись.Организация, Запись.Класс);
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Запись.МодельУчета = фКэшРеквизитов.МодельУчета;
			
		 КонецЕсли; 
	
	КонецЕсли; 
	
	Если ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность 
		ИЛИ Запись.МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПоПервоначальнойСтоимости Тогда
		
		Запись.СчетРезерваПереоценки = Неопределено;
	КонецЕсли;
	
	Если ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность 
		И Запись.МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости Тогда
		
		Запись.СчетНачисленияАмортизации = Неопределено;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

//БИТ Тртилек 04.09.2012 Проверка заполнения полей
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Запись.НачислятьАмортизацию Тогда
		Если НЕ ЗначениеЗаполнено(Запись.СчетНачисленияАмортизации) Тогда
			Предупреждение("Требуется заполнить Счет начисления амортизации в текущей строке", 4);
			Отказ = Истина;
		КонецЕсли;                                                                        
		
		Если НЕ ЗначениеЗаполнено(Запись.СпособОтраженияРасходовПоАмортизации) Тогда
			Предупреждение("Требуется заполнить Способ отражения амортизации в текущей строке", 4);
			Отказ = Истина;
		КонецЕсли;         
		
		Если НЕ ЗначениеЗаполнено(Запись.МетодНачисленияАмортизации) Тогда
			Предупреждение("Требуется заполнить Метод начисления амортизации в текущей строке", 4);
			Отказ = Истина;
		КонецЕсли;         
	КонецЕсли;
КонецПроцедуры
///БИТ Тртилек 04.09.2012