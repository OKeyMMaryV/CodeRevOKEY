#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Функция инициализирует структуру параметров, используемую для передачи данных о заместителе.
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
Функция КонструкторПараметрыНазначенияЗаместителя() Экспорт

	Конструктор = Новый Структура("ИмяКласса
	                           |,ОбластьЗамещения
							   |,Пользователь
							   |,Состояние
							   |,Заместитель
							   |,ДатаНачала
							   |,ДатаОкончания","ПараметрыНазначенияЗаместителя");
	
	Возврат Конструктор;
	
КонецФункции // КонструкторСтруктурыЗаместителя()

// Функция определяет состояние для записи о назначении заместителя.
// 
// Параметры:
//    ДатаНачала    - Дата - Дата начала действия записи.
//    ДатаОкончания - Дата - Дата окончания действия записи.
//    ТекДата       - Дата - Текущая дата.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.бит_СостоянияЗаместителей - текущее состояние замещения.
// 
Функция ОпределитьСостояниеЗамещения(ДатаНачала, ДатаОкончания, ТекДата) Экспорт
	
	ТекСостояние = Перечисления.бит_СостоянияЗаместителей.Ожидание;
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ ДатаНачала <= ТекДата Тогда
		ТекСостояние = Перечисления.бит_СостоянияЗаместителей.Назначен;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДатаОкончания) И КонецДня(ДатаОкончания) < ТекДата Тогда
		ТекСостояние = Перечисления.бит_СостоянияЗаместителей.ЗамещениеЗавершено;
	КонецЕсли; 
	
	Возврат ТекСостояние;
	
КонецФункции // ОпределитьСостояние()

// Функция проверяет, необходимо ли выполнить назначение заместителя 
// в регистрах бит_ПраваУстановкиВиз и бит_ИсполнителиЗадач.
// 
// Параметры:
//  СтруктураПараметров - Структура - Параметры назначения заместителя.
//  КоличествоНазначенных - Число - Количество назначенных заместителей.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция НеобходимоНазначитьЗаместителя(СтруктураПараметров, КоличествоНазначенных) Экспорт

	НеобходимоНазначить = Ложь;
	
	Если КоличествоНазначенных = 0 Тогда
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаНачала) ИЛИ СтруктураПараметров.ДатаНачала <= ТекущаяДата() Тогда
			НеобходимоНазначить = Истина;
		КонецЕсли; 
	КонецЕсли; 

	Возврат НеобходимоНазначить;
	
КонецФункции // НеобходимоНазначитьЗаместителя()

// Процедура назначает заместителей в регистры бит_ПраваУстановкиВиз и бит_ИсполнителиЗадач.
// 
// Параметры:
//  СтруктураПараметров - Структура - Параметры назначения заместителя.
// 
Процедура НазначитьЗаместителя(СтруктураПараметров)  Экспорт

	НазначениеВыполнено = Ложь;
		
	ТаблицаЗаместителей = ПолучитьНазначенныхЗаместителей(СтруктураПараметров);
	КоличествоЗаписей   = ТаблицаЗаместителей.Количество();
	
	Если НеобходимоНазначитьЗаместителя(СтруктураПараметров, КоличествоЗаписей) Тогда
		
		МенеджерЗаписи = РегистрыСведений.бит_ЗаместителиПоЗадачам.СоздатьМенеджерЗаписи();
	    ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураПараметров);					
		МенеджерЗаписи.Исполнитель = СтруктураПараметров.Заместитель;
		МенеджерЗаписи.Пользователь = СтруктураПараметров.Пользователь;
		
		Попытка
		
			МенеджерЗаписи.Записать();
			НазначениеВыполнено = Истина;
			
			ТекстСообщения = НСтр("ru = 'Установлен заместитель ""%1"" пользователю ""%2"" по области замещения ""%3"".'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, 
			                           СтруктураПараметров.Заместитель, 
									   СтруктураПараметров.Пользователь, 
									   СтруктураПараметров.ОбластьЗамещения, 
									   ОписаниеОшибки());
			
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось установить заместителя ""%1"" пользователю ""%2"" по области замещения ""%3""! Описание ошибки: ""%4"".'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, 
			                           СтруктураПараметров.Заместитель, 
									   СтруктураПараметров.Пользователь, 
									   СтруктураПараметров.ОбластьЗамещения, 
									   ОписаниеОшибки());
																						 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																			 
			
		КонецПопытки;
				
	КонецЕсли; 

КонецПроцедуры // НазначитьЗаместителя()

// Функция удаляет назначенных заместителей из регистров 
// бит_ПраваУстановкиВиз, бит_ИсполнителиЗадач.
// 
// Параметры:
//  СтруктураПараметров - Структура - Параметры назначения заместителя.
// 
// Возвращаемое значение:
//  Булево - Истина, если заместители удалены.
// 
Функция УдалитьНазначениеЗаместителей(СтруктураПараметров) Экспорт

	УдалениеВыполнено = Истина;
	
	ТаблицаЗаместителей = ПолучитьНазначенныхЗаместителей(СтруктураПараметров);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗаместителей Цикл
	
		МенеджерЗаписи = РегистрыСведений.бит_ЗаместителиПоЗадачам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
		
		Попытка
		
			МенеджерЗаписи.Удалить();
			
			ТекстСообщения = НСтр("ru = 'Удален заместитель ""%1"" пользователя ""%2"" по области замещения ""%3"".'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, 
			                           СтруктураПараметров.Заместитель, 
									   СтруктураПараметров.Пользователь, 
									   СтруктураПараметров.ОбластьЗамещения, 
									   ОписаниеОшибки());
			
			
		Исключение
			
			УдалениеВыполнено = Ложь;
			
			ТекстСообщения = НСтр("ru = 'Не удалось удалить заместителя ""%1"" пользователя ""%2"" по области замещения ""%3""! Описание ошибки: ""%4"".'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, 
			                           СтруктураПараметров.Заместитель, 
									   СтруктураПараметров.Пользователь, 
									   СтруктураПараметров.ОбластьЗамещения, 
									   ОписаниеОшибки());
																						 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);																			 
			
		КонецПопытки;
						
	КонецЦикла; 

	Возврат УдалениеВыполнено;
	
КонецФункции // УдалитьНазначениеЗаместителей()

// Функция получает назначенных заместителей.
// 
// Параметры:
//  СтруктураПараметров - Структура - Параметры назначения заместителя
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными о назначенных заместителях.
// 
Функция ПолучитьНазначенныхЗаместителей(СтруктураПараметров) Экспорт

	ТаблицаЗаместителей = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Назначен",     Перечисления.бит_СостоянияЗаместителей.Назначен);
	Запрос.УстановитьПараметр("Заместитель",  СтруктураПараметров.Заместитель);
	Запрос.УстановитьПараметр("Пользователь", СтруктураПараметров.Пользователь);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаместителиПоЗадачам.Пользователь,
	               |	ЗаместителиПоЗадачам.Заместитель
	               |ИЗ
	               |	РегистрСведений.бит_ЗаместителиПоЗадачам КАК ЗаместителиПоЗадачам
	               |ГДЕ
	               |	ЗаместителиПоЗадачам.Состояние = &Назначен
	               |	И ЗаместителиПоЗадачам.Пользователь = &Пользователь
	               |	И ЗаместителиПоЗадачам.Заместитель = &Заместитель";
				   
				   
	Результат = Запрос.Выполнить();
	ТаблицаЗаместителей = Результат.Выгрузить();
	Возврат ТаблицаЗаместителей;
	
КонецФункции

// Процедура заполняет сведения о назначенном заместителе в структуре параметров.
// 
// Параметры:
//   СтруктураПараметров - Структура - Параметры назначения заместителя
// 
Процедура ПолучитьСведенияПоЗаместителю(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", СтруктураПараметров.Пользователь);
	Запрос.УстановитьПараметр("Заместитель", СтруктураПараметров.Заместитель);
	Запрос.Текст ="ВЫБРАТЬ
	              |	ЗаместителиПоЗадачам.Пользователь КАК Пользователь,
	              |	ЗаместителиПоЗадачам.Состояние КАК Состояние,
	              |	ЗаместителиПоЗадачам.Заместитель КАК Заместитель,
	              |	ЗаместителиПоЗадачам.ДатаНачала КАК ДатаНачала,
	              |	ЗаместителиПоЗадачам.ДатаОкончания КАК ДатаОкончания
	              |ИЗ
	              |	РегистрСведений.бит_ЗаместителиПоЗадачам КАК ЗаместителиПоЗадачам
	              |ГДЕ
	              |	ЗаместителиПоЗадачам.Пользователь = &Пользователь
	              |	И ЗаместителиПоЗадачам.Заместитель = &Заместитель"; 
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураПараметров.ДатаНачала = Выборка.ДатаНачала;
		СтруктураПараметров.ДатаОкончания = Выборка.ДатаОкончания;
		СтруктураПараметров.Состояние = Выборка.Состояние;
	КонецЕсли; 
	
КонецПроцедуры // ПолучитьСведенияПоЗаместителю()

// Функция формирует представление периода замещения.
// 
// Параметры:
//  СтруктураПараметров - Структура - Параметры назначения заместителя.
// 
// Возвращаемое значение:
//  Строка - ПредставлениеПериода.
// 
Функция ПредставлениеПериодаЗамещения(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.ДатаНачала = Неопределено Тогда
		 ПолучитьСведенияПоЗаместителю(СтруктураПараметров);
	КонецЕсли; 
	
	ПредставлениеПериода = НСтр("ru = 'Без ограничения'");
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаНачала) И ЗначениеЗаполнено(СтруктураПараметров.ДатаОкончания) Тогда
		
		ПредставлениеПериода = НСтр("ru = 'На период с %1 по %2'");
        ПредставлениеПериода = СтрШаблон(ПредставлениеПериода, 
		                                 Формат(СтруктураПараметров.ДатаНачала,"ДФ=dd.MM.yyyy"), 
										 Формат(СтруктураПараметров.ДатаОкончания,"ДФ=dd.MM.yyyy"));
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаНачала) И ЗначениеЗаполнено(СтруктураПараметров.ДатаОкончания) Тогда
		
		ПредставлениеПериода = НСтр("ru = 'По %1'");
        ПредставлениеПериода = СтрШаблон(ПредставлениеПериода, Формат(СтруктураПараметров.ДатаОкончания,"ДФ=dd.MM.yyyy"));
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ДатаНачала) И НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаОкончания) Тогда
		
		ПредставлениеПериода = НСтр("ru = 'С %1'");
        ПредставлениеПериода = СтрШаблон(ПредставлениеПериода, Формат(СтруктураПараметров.ДатаНачала,"ДФ=dd.MM.yyyy"));		
		
	КонецЕсли; 
	
	Возврат ПредставлениеПериода;
	
КонецФункции // ПредставлениеПериодаЗамещения()

#КонецОбласти

#КонецЕсли
