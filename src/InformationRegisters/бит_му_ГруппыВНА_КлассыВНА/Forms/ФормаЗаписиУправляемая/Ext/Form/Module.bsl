
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОпределитьВидВНА();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.бит_му_ГруппыВНА_КлассыВНА;
	
	// Вызов механизма защиты
	
	
	бит_РаботаСДиалогамиСервер.ФормаЗаписиРегистраПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним список типов для быстрого выбора составных типов.
	МассивТипов  = Метаданные.РегистрыСведений.бит_му_ГруппыВНА_КлассыВНА.Измерения.ГруппаВНА.Тип.Типы();
	СписокТиповГруппаВНА = бит_ОбщегоНазначения.ПодготовитьСписокВыбораТипа(МассивТипов);
	
	МассивТипов  = Метаданные.РегистрыСведений.бит_му_ГруппыВНА_КлассыВНА.Ресурсы.КлассВНА.Тип.Типы();
	СписокТиповКлассВНА = бит_ОбщегоНазначения.ПодготовитьСписокВыбораТипа(МассивТипов);
	
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаВНАНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	    Если Запись.ГруппаВНА = Неопределено Тогда
			  // Если класс ВНА выбран тип выбирать не нужно.
			 Если ВидВНА = мКэшЗначений.Перечисления.бит_му_ВидыВНА.ОС Тогда
				
				 Запись.ГруппаВНА = мКэшЗначений.ПустаяГруппаОС;
				 Элемент.ВыбиратьТип = Ложь;
			 
			 ИначеЕсли ВидВНА = мКэшЗначений.Перечисления.бит_му_ВидыВНА.НМА Тогда	
				 
				 Запись.ГруппаВНА = мКэшЗначений.ПустойВидНМА;
				 Элемент.ВыбиратьТип = Ложь;
				 
			 КонецЕсли; 
		
		КонецЕсли; 
	
		бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                                                   ,Элемент
	                                                   ,Запись
	                                                   ,"ГруппаВНА"
													   ,СписокТиповГруппаВНА
													   ,СтандартнаяОбработка);

	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВНАПриИзменении(Элемент)
	
	ОпределитьВидВНА();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВНАОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыбиратьТип = Истина;
	ОпределитьВидВНА(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КлассВНАНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Запись.КлассВНА = Неопределено Тогда
	    // Если класс ВНА выбран тип выбирать не нужно.
		Если ВидВНА = мКэшЗначений.Перечисления.бит_му_ВидыВНА.ОС Тогда
			
			 Запись.КлассВНА     = мКэшЗначений.ПустойКлассОС;
			 Элемент.ВыбиратьТип = Ложь;
			
		ИначеЕсли ВидВНА = мКэшЗначений.Перечисления.бит_му_ВидыВНА.НМА Тогда	
			
			Запись.КлассВНА     = мКэшЗначений.ПустойКлассНМА;
			Элемент.ВыбиратьТип = Ложь;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                                                   ,Элемент
	                                                   ,Запись
	                                                   ,"КлассВНА"
													   ,СписокТиповКлассВНА
													   ,СтандартнаяОбработка);
	
	
КонецПроцедуры

&НаКлиенте
Процедура КлассВНАПриИзменении(Элемент)
	
	ОпределитьВидВНА();
	
КонецПроцедуры

&НаКлиенте
Процедура КлассВНАОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыбиратьТип = Истина;	
	ОпределитьВидВНА(,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВНАПриИзменении(Элемент)
	
	// Если класс/группа не соответствуют виду ВНА устанавливаем пустые значения соответсвующие виду ВНА.
	Если ВидВНА = мКэшЗначений.Перечисления.бит_му_ВидыВНА.ОС Тогда
		
		 Если ТипЗнч(Запись.ГруппаВНА) = Тип("ПеречислениеСсылка.ВидыНМА") Тогда
		 
		 	Запись.ГруппаВНА = мКэшЗначений.ПустаяГруппаОС;
		 
		 КонецЕсли; 
		 
		 Если ТипЗнч(Запись.КлассВНА) = Тип("СправочникСсылка.бит_му_КлассыНМА") Тогда
		 
		 	 Запись.КлассВНА = мКэшЗначений.ПустойКлассОС;
		 
		 КонецЕсли; 
		 
	ИначеЕсли ВидВНА = мКэшЗначений.Перечисления.бит_му_ВидыВНА.НМА Тогда	
		
		 Если ТипЗнч(Запись.ГруппаВНА) = Тип("ПеречислениеСсылка.ГруппыОС") Тогда
		 
		 	Запись.ГруппаВНА = мКэшЗначений.ПустойВидНМА;
		 
		 КонецЕсли; 

        Если ТипЗнч(Запись.КлассВНА) = Тип("СправочникСсылка.бит_му_КлассыОсновныхСредств") Тогда
		 
		 	 Запись.КлассВНА = мКэшЗначений.ПустойКлассНМА;
		 
		 КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОпределитьВидВНА(ОчищенаГруппаВНА = Ложь, ОчищенКлассВНА = Ложь)
	
	флЗаполненаГруппаВНА = ЗначениеЗаполнено(Запись.ГруппаВНА) И НЕ ОчищенаГруппаВНА;
	флЗаполненКлассВНА   = ЗначениеЗаполнено(Запись.КлассВНА)  И НЕ ОчищенКлассВНА;
	
	Если флЗаполненаГруппаВНА Тогда
		
		Если ТипЗнч(Запись.ГруппаВНА) = Тип("ПеречислениеСсылка.ГруппыОС")  Тогда
			
			ВидВНА = мКэшЗначений.Перечисления.бит_му_ВидыВНА.ОС;
			
		ИначеЕсли ТипЗнч(Запись.ГруппаВНА) = Тип("ПеречислениеСсылка.ВидыНМА") Тогда
			
			ВидВНА = мКэшЗначений.Перечисления.бит_му_ВидыВНА.НМА;
			
		КонецЕсли; 
		
	ИначеЕсли флЗаполненКлассВНА Тогда
		
		Если ТипЗнч(Запись.КлассВНА) = Тип("СправочникСсылка.бит_му_КлассыОсновныхСредств") Тогда
			
			ВидВНА = мКэшЗначений.Перечисления.бит_му_ВидыВНА.ОС;
		     
		ИначеЕсли ТипЗнч(Запись.КлассВНА) = Тип("СправочникСсылка.бит_му_КлассыНМА") Тогда	
			
			ВидВНА = мКэшЗначений.Перечисления.бит_му_ВидыВНА.НМА;
		
		КонецЕсли; 
		
	Иначе
		
		ВидВНА = Неопределено;
		
	КонецЕсли; 
	
КонецПроцедуры // ОпределитьВидВНА()

&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшЗначений)

 КэшЗначений = Новый Структура;
 
 // Кэшируем перечисления
 КэшПеречисления = Новый Структура;
 
 ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыВНА);
 КэшПеречисления.Вставить("бит_му_ВидыВНА",ТекПеречисление);
 
 КэшЗначений.Вставить("Перечисления",КэшПеречисления);

 // Кешируем пустые значения групп/классов
 КэшЗначений.Вставить("ПустаяГруппаОС",Перечисления.ГруппыОС.ПустаяСсылка());
 КэшЗначений.Вставить("ПустойВидНМА"  ,Перечисления.ВидыНМА.ПустаяСсылка());
 КэшЗначений.Вставить("ПустойКлассОС" ,Справочники.бит_му_КлассыОсновныхСредств.ПустаяСсылка());
 КэшЗначений.Вставить("ПустойКлассНМА",Справочники.бит_му_КлассыНМА.ПустаяСсылка());

КонецПроцедуры // ЗаполнитьКэшЗначений()

#КонецОбласти

