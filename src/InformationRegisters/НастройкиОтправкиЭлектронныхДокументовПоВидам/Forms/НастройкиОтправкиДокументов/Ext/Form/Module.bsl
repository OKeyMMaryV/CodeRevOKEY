
#Область ОписаниеПеременных

&НаКлиенте
Перем НастройкаРегламентаЭДО;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПравоНастройкиОбмена = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
	ЕстьПравоОбработкиЭД     = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоОбработкиЭД();
	ЕстьПравоЧтенияЭД        = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоЧтенияЭД();
	
	ИспользуютсяДоговорыКонтрагентов = ОбменСКонтрагентамиПовтИсп.ИспользуютсяДоговорыКонтрагентов();
	
	ТолькоПросмотр = Не ЕстьПравоНастройкиОбмена;
	
	Элементы.ФормаОтправитьКаталогПоСоглашению.Видимость    = ЕстьПравоОбработкиЭД;
	Элементы.ФормаСформироватьСоглашениеПоШаблону.Видимость = ЕстьПравоОбработкиЭД;
	Элементы.ФормаОткрытьЭлектронныеДокументы.Видимость     = ЕстьПравоЧтенияЭД;
	Элементы.ДоговорКонтрагента.Видимость                   = ИспользуютсяДоговорыКонтрагентов;
	Элементы.ДекорацияСтатусПриглашения.Видимость           = ИспользуютсяДоговорыКонтрагентов;
	
	УстановитьУсловноеОформление();
	
	Элементы.ГруппаОжидание.Видимость = Ложь;
	Элементы.ГруппаОжиданиеУдаления.Видимость = Ложь;
		
	ПодготовитьФормуНаСервере(Параметры);
	
	УстановитьКлючНастройкиОтправки(ЭтотОбъект);
	
	//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103
	ок_УправлениеФормами.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Настройки отправки не сохранены. Завершить работу с программой?'")
		Иначе
			Описание = Новый ОписаниеОповещения("ПередЗакрытиемОкнаФормы", ЭтотОбъект);
			ПоказатьВопрос(Описание, НСтр("ru = 'Настройки отправки изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ОбновитьТекущиеДелаЭДО"
		Или ИмяСобытия = "ОбновитьСостояниеПриглашений")
		И НастройкаРегламентаЭДО <> Истина Тогда
		
		ПроверитьРасширенныйРежимИЗаполнитьСтатусыПриглашений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РеквизитыДляУдаления = Новый Массив;
	
	Если РасширенныйРежим Тогда
		РеквизитыДляУдаления.Добавить("ИдентификаторОтправителя");
		РеквизитыДляУдаления.Добавить("ИдентификаторПолучателя");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, РеквизитыДляУдаления);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетнаяЗаписьКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-29 (#3879)
	Если Не ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УчетнаяЗаписьПоКастомизированномуЭДО(ИдентификаторОтправителя) Тогда
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-29 (#3879)
		ОткрытьФормуВыбораУчетныхЗаписей();
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-29 (#3879)
	Иначе
		ДанныеВыбора  = Элементы.УчетнаяЗаписьКонтрагента.СписокВыбора;
	КонецЕсли;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-29 (#3879)	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-29 (#3879)
	Если Не ок_ОбменСКонтрагентамиСлужебныйВызовСервера.УчетнаяЗаписьПоКастомизированномуЭДО(ИдентификаторОтправителя) Тогда
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-29 (#3879)
		ОткрытьФормуВыбораУчетныхЗаписей();
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-29 (#3879)
	Иначе
		ДанныеВыбора = Элементы.УчетнаяЗаписьОрганизации.СписокВыбора;
	КонецЕсли;
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-29 (#3879)
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУПДПриИзменении(Элемент)
	УстановитьОтборПоУПД_УКД(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУКДПриИзменении(Элемент)
	УстановитьОтборПоУПД_УКД(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Модифицированность = Истина;
	ЗаполнитьИдентификаторыЭДО();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
	ЭтаФорма["ПризнакИзмененияКонтрагента"] = Истина;
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
	
	Модифицированность = Истина;
	ЗаполнитьИдентификаторыЭДО();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СтатусПодключенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(ИдентификаторОтправителя)
		Или ПустаяСтрока(ИдентификаторПолучателя) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Необходимо записать изменения в настройке отправки.
                             |Продолжить?'");
		
		Описание = Новый ОписаниеОповещения("ПослеВопросаНажатиеСтатусПодключения", ЭтотОбъект);
		ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОткрытьПриглашение(ИдентификаторОтправителя, ИдентификаторПолучателя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Организация, Контрагент", Организация, Контрагент);
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуВыбораДоговора(
		ПараметрыФормы, Элемент, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсходящиеДокументы

&НаКлиенте
Процедура ИсходящиеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		Или Не ЕстьПравоНастройкиОбмена Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ИсходящиеДокументыДополнительныеНастройки Тогда
		ОткрытьФормуРедактированияРегламентаЭДО(ТекущиеДанные);
	ИначеЕсли Поле = Элементы.ИсходящиеДокументыСтатусПриглашения Тогда
		ОткрытьПриглашение(ТекущиеДанные.ИдентификаторОтправителя, ТекущиеДанные.ИдентификаторПолучателя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения("НажатиеЗаписать", ЭтотОбъект, Новый Структура);
	ВыполняемоеОповещение.ДополнительныеПараметры.Вставить("ОповещениеКоманды", ВыполняемоеОповещение);
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения("НажатиеЗаписатьИЗакрыть", ЭтотОбъект, Новый Структура);
	ВыполняемоеОповещение.ДополнительныеПараметры.Вставить("ОповещениеКоманды", ВыполняемоеОповещение);
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКаталогПоСоглашению(Команда)
	ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьКаталогТоваров(
		Организация, Контрагент, ДоговорКонтрагента, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныеДокументы(Команда)
	НастройкиЭДОСсылка = СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, ДоговорКонтрагента);
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьДеревоЭД(НастройкиЭДОСсылка, Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСоглашениеПоШаблону(Команда)
	ОбменСКонтрагентамиСлужебныйКлиент.СформироватьСоглашениеПоШаблону(
		Организация, Контрагент, ДоговорКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасширенныйРежим(Команда)
	
	Если РасширенныйРежим Тогда
		
		Описание = Новый ОписаниеОповещения("ИзменитьРасширенныйРежимПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Описание, НСтр("ru = 'Изменения расширенного режима будут очищены.
                                       |Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		РасширенныйРежим = Не РасширенныйРежим;
		ПроверитьРасширенныйРежимИЗаполнитьСтатусыПриглашений();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	УдалитьНастройкуОтправки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОформлениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеДокументы.ЦветГиперссылки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ИсходящиеДокументыСтатусПриглашения");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходящиеДокументы.ЦветГиперссылки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ИсходящиеДокументыСтатусПриглашения");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.УчетнаяЗаписьКонтрагента.Видимость            = Не Форма.РасширенныйРежим;
	Элементы.УчетнаяЗаписьОрганизации.Видимость            = Не Форма.РасширенныйРежим;
	Элементы.СтатусПриглашения.Видимость                   = Не Форма.РасширенныйРежим;
	Элементы.ФормаРасширенныйРежим.Пометка                 = Форма.РасширенныйРежим;
	Элементы.ИсходящиеДокументыСтатусПриглашения.Видимость = Форма.РасширенныйРежим;
	
	ДоступенВыборУчетныхЗаписей = ЗначениеЗаполнено(Форма.Организация) И ЗначениеЗаполнено(Форма.Контрагент);
	Элементы.УчетнаяЗаписьОрганизации.Доступность = ДоступенВыборУчетныхЗаписей;
	Элементы.УчетнаяЗаписьКонтрагента.Доступность = ДоступенВыборУчетныхЗаписей;
	
	Если ДоступенВыборУчетныхЗаписей Тогда
		ПодсказкаВводаУчетныхЗаписей = НСтр("ru = 'Выберите учетную запись'");
	Иначе 
		ПодсказкаВводаУчетныхЗаписей = "";
	КонецЕсли;
	Элементы.УчетнаяЗаписьОрганизации.ПодсказкаВвода = ПодсказкаВводаУчетныхЗаписей;
	Элементы.УчетнаяЗаписьКонтрагента.ПодсказкаВвода = ПодсказкаВводаУчетныхЗаписей;
	
	УстановитьОтборПоУПД_УКД(Форма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоУПД_УКД(Форма)

	Элементы = Форма.Элементы;
	
	Для Каждого СтрокаТЧ Из Форма.ИсходящиеДокументы Цикл
		
		СтрокаТЧ.Отображать = Истина;
		
		Если Форма.ИспользоватьУПД
			И (СтрокаТЧ.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.ТОРГ12Продавец")
				Или СтрокаТЧ.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура")
				Или СтрокаТЧ.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель")
				Или СтрокаТЧ.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктНаПередачуПрав")) Тогда
				
			СтрокаТЧ.Отображать = Ложь;
		ИначеЕсли Не Форма.ИспользоватьУПД
			И СтрокаТЧ.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.УПД") Тогда
			СтрокаТЧ.Отображать = Ложь;
		КонецЕсли;
		
		Если Форма.ИспользоватьУКД
			И (СтрокаТЧ.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура")
				Или СтрокаТЧ.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель")) Тогда
				
			СтрокаТЧ.Отображать = Ложь;
		ИначеЕсли Не Форма.ИспользоватьУКД
			И СтрокаТЧ.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыЭД.УКД") Тогда
			СтрокаТЧ.Отображать = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ИсходящиеДокументы.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Отображать", Истина));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПредставлениеСтатусаПриглашения(СтатусПриглашений)
	
	
	Результат = Новый Структура("ТекстЗаголовка, ЦветСсылки");
	Результат.ТекстЗаголовка = Строка(СтатусПриглашений);
	Результат.ЦветСсылки = 0;
	
	Если СтатусПриглашений = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ПустаяСсылка")
		ИЛИ СтатусПриглашений = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяОтправить") Тогда
		Результат.ТекстЗаголовка = НСтр("ru = 'Отправить приглашение'");
	ИначеЕсли СтатусПриглашений = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Отклонено")
			Или СтатусПриглашений = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Ошибка") Тогда
			
			Результат.ЦветСсылки = 1;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнициализацияФормы

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(Знач ПараметрыФормы)
	ПараметрыФормы.Свойство("Организация" , Организация);
	ПараметрыФормы.Свойство("Контрагент"  , Контрагент);
	ПараметрыФормы.Свойство("Договор"     , ДоговорКонтрагента);
	
	Если ПараметрыФормы.Свойство("Ключ") Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Если ТипЗнч(ПараметрыФормы.Ключ) = Тип("СправочникСсылка.НастройкиЭДО") Тогда
				Организация = ПараметрыФормы.Ключ.Организация;
			Иначе
				Организация = ПараметрыФормы.Ключ.Отправитель;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Если ТипЗнч(ПараметрыФормы.Ключ) = Тип("СправочникСсылка.НастройкиЭДО") Тогда
				Контрагент = ПараметрыФормы.Ключ.Контрагент;
			Иначе
				Контрагент = ПараметрыФормы.Ключ.Получатель;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Если ТипЗнч(ПараметрыФормы.Ключ) = Тип("СправочникСсылка.НастройкиЭДО") Тогда
				ДоговорКонтрагента = ПараметрыФормы.Ключ.ДоговорКонтрагента;
			Иначе
				ДоговорКонтрагента = ПараметрыФормы.Ключ.Договор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СоздатьПоДоговору = Неопределено;
	Создание          = Неопределено;
	Если ПараметрыФормы.Свойство("СоздатьПоДоговору"  , СоздатьПоДоговору) Тогда
		
		Элементы.ДоговорКонтрагента.ТолькоПросмотр = СоздатьПоДоговору = Ложь;
		Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Организация);
		
	ИначеЕсли ПараметрыФормы.Свойство("Создание"  , Создание) И Создание Тогда
		
		Элементы.ДоговорКонтрагента.ТолькоПросмотр = Ложь;
		Элементы.Организация.ТолькоПросмотр        = Ложь;
		Элементы.Контрагент.ТолькоПросмотр         = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(ПараметрыФормы)
	
	ФорматыЭД.Загрузить(ОбменСКонтрагентамиСлужебный.ФорматыЭлектронныхДокументов());
	
	ТолькоПросмотр = Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам);
	
	ЗаполнитьРеквизитыФормы(ПараметрыФормы);
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД
		И НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ТаблицаНастроек = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНастройкиОтправкиДокументов();
	ТаблицаНастроек.Колонки.Добавить("ЭтоНовыйВидЭД", Новый ОписаниеТипов("Булево"));
	
	НастройкиОтправки = ОбменСКонтрагентамиСлужебный.ТекущиеНастройкиОтправкиЭлектронныхДокументовПоВидам(
		Организация, Контрагент, ДоговорКонтрагента, ТаблицаНастроек);
	
	ПолучитьУПД_УКД();
	ЗаполнитьПредставлениеНастроек(ЭтотОбъект, ТаблицаНастроек, НастройкиОтправки);
	ИсходящиеДокументы.Загрузить(ТаблицаНастроек);
	
	РасширенныйРежим = ПроверитьРасширенныйРежимИЗаполнитьСтатусыПриглашений();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеНастроек(Форма, НастройкиПоУмолчанию, Знач ТекущиеНастройки)
	
	СтрокаСЗаполненнымиДанными = Неопределено;
	Для Каждого ТекСтрока Из НастройкиПоУмолчанию Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("ВидДокумента"    , ТекСтрока.ВидДокумента);
		Отбор.Вставить("ПрикладнойВидЭД" , ТекСтрока.ПрикладнойВидЭД);
		
		СтрокиТаблицы = ТекущиеНастройки.НайтиСтроки(Отбор);
		
		Если СтрокиТаблицы.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокиТаблицы[0]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ИдентификаторОтправителя) И ЗначениеЗаполнено(ТекСтрока.ИдентификаторПолучателя) Тогда
			СтрокаСЗаполненнымиДанными = ТекСтрока;
		КонецЕсли;
		ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Форма, ТекСтрока);
		
	КонецЦикла;
	
	Если СтрокаСЗаполненнымиДанными <> Неопределено Тогда
		Отбор = Новый Структура("ИдентификаторОтправителя, ИдентификаторПолучателя", "", "");
		СтрокиСНезаполненнымиИдентификаторами = НастройкиПоУмолчанию.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из СтрокиСНезаполненнымиИдентификаторами Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаСЗаполненнымиДанными, "ИдентификаторОтправителя, ИдентификаторПолучателя, СпособОбменаЭД");
		КонецЦикла;
	КонецЕсли;
	
	НастройкиПоУмолчанию.Сортировать("Приоритет");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтатусПриглашения(Знач ИдентификаторОтправителя, Знач ИдентификаторПолучателя)
	
	СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить;
	
	ДанныеПриглашения = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ДанныеПриглашения(
							ИдентификаторОтправителя, ИдентификаторПолучателя);
							
	Если ЗначениеЗаполнено(ДанныеПриглашения) Тогда
		СтатусПодключения = ДанныеПриглашения.Статус;
	КонецЕсли;
	
	Возврат СформироватьПредставлениеСтатусаПриглашения(СтатусПодключения);
	
КонецФункции

&НаСервере
Процедура ПолучитьУПД_УКД()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиОтправкиЭлектронныхДокументов.ИспользоватьУПД КАК ИспользоватьУПД,
		|	НастройкиОтправкиЭлектронныхДокументов.ИспользоватьУКД КАК ИспользоватьУКД
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиОтправкиЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиОтправкиЭлектронныхДокументов.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Отправитель", Организация);
	Запрос.УстановитьПараметр("Получатель", Контрагент);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеУчетныхЗаписей

&НаКлиенте
Процедура ОткрытьФормуВыбораУчетныхЗаписей()
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ПриЗавершенииВыбораУченыхЗаписей", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отправитель"             , Организация);
	ПараметрыОткрытия.Вставить("Получатель"              , Контрагент);
	ПараметрыОткрытия.Вставить("ДоговорКонтрагента"      , ДоговорКонтрагента);
	ПараметрыОткрытия.Вставить("ИдентификаторПолучателя" , ИдентификаторПолучателя);
	ПараметрыОткрытия.Вставить("ИдентификаторОтправителя", ИдентификаторОтправителя);
	ПараметрыОткрытия.Вставить("ВыборУчетныхЗаписей"     , Истина);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаОбменаСКонтрагентом", ПараметрыОткрытия,
		УникальныйИдентификатор,,,, Описание, режимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступныеИдентификаторы()
	
	Элементы.УчетнаяЗаписьОрганизации.СписокВыбора.Очистить();
	Элементы.УчетнаяЗаписьКонтрагента.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Контрагент) Тогда
		ДоступныеИдентификаторы = ОбменСКонтрагентамиСлужебный.ДоступныеИдентификаторыЭДО(Организация, Контрагент);
		
		Для Каждого Идентификатор Из ДоступныеИдентификаторы.ИдентификаторыОтправителя Цикл
			
			Элементы.УчетнаяЗаписьОрганизации.СписокВыбора.Добавить(Идентификатор.Значение, Идентификатор.Представление);
			
		КонецЦикла;
		
		Для Каждого Идентификатор Из ДоступныеИдентификаторы.ИдентификаторыПолучателя Цикл
			
			Элементы.УчетнаяЗаписьКонтрагента.СписокВыбора.Добавить(Идентификатор.Значение, Идентификатор.Представление);
			
		КонецЦикла;
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
	ЕстьРеквизиты = Ложь;
	Для Каждого РеквизитФормы ИЗ ПолучитьРеквизиты() Цикл
		Если РеквизитФормы.Имя = "ок_ПериодыДействияИсходящие" Тогда
			ЕстьРеквизиты = Истина
		КонецЕсли;
	КонецЦикла;	
	Если ЕстьРеквизиты Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		                      |ИЗ
		                      |	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		                      |ГДЕ
		                      |	УчетныеЗаписиЭДО.Организация = &Организация
		                      |	И НЕ УчетныеЗаписиЭДО.ок_СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)");
		Запрос.УстановитьПараметр("Организация", Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ИдентификаторОтправителя = Выборка.ИдентификаторЭДО;
		КонецЕсли;	
		ок_УправлениеФормой();
		Если ЭтаФорма["ПризнакИзмененияКонтрагента"] Тогда
			ИдентификаторПолучателяТекст = Контрагент.ИНН + "_" + Контрагент.КПП; 
			Если НЕ ИдентификаторПолучателя = ИдентификаторПолучателяТекст Тогда
				Если Элементы.УчетнаяЗаписьКонтрагента.СписокВыбора.НайтиПоЗначению(ИдентификаторПолучателяТекст) = Неопределено Тогда					
					Элементы.УчетнаяЗаписьКонтрагента.СписокВыбора.Добавить(ИдентификаторПолучателяТекст);
				КонецЕсли;	
				ИдентификаторПолучателя = ИдентификаторПолучателяТекст;
			КонецЕсли;	
			ЭтаФорма["ПризнакИзмененияКонтрагента"] = Ложь;
		КонецЕсли;			
	КонецЕсли;	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииВыбораУченыхЗаписей(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеПриИзмененииИдентификаторов(Результат);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПриИзмененииИдентификаторов(Результат)
	
	ИдентификаторОтправителя = ВРег(Результат.ИдентификаторОрганизации);
	ИдентификаторПолучателя  = ВРег(Результат.ИдентификаторКонтрагента);
	СпособОбмена             = ПолучитьСпособОбменаУчетнойЗаписи(ИдентификаторОтправителя);
	
	Если Не РасширенныйРежим Тогда
		Таблица = ИсходящиеДокументы.Выгрузить();
		Таблица.ЗаполнитьЗначения(ИдентификаторОтправителя, "ИдентификаторОтправителя");
		Таблица.ЗаполнитьЗначения(ИдентификаторПолучателя , "ИдентификаторПолучателя");
		Таблица.ЗаполнитьЗначения(СпособОбмена,             "СпособОбменаЭД");
		ИсходящиеДокументы.Загрузить(Таблица);
	КонецЕсли;
	
	ОбновитьФорматыКонтрагента();
	
	СтруктураСтатусПодключения = ПолучитьСтатусПриглашения(ИдентификаторОтправителя, ИдентификаторПолучателя);
	СтатусПриглашения = СтруктураСтатусПодключения.ТекстЗаголовка;
	
	Если СтруктураСтатусПодключения.ЦветСсылки = 0 Тогда
		Элементы.СтатусПриглашения.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
	ИначеЕсли СтруктураСтатусПодключения.ЦветСсылки = 1 Тогда
		Элементы.СтатусПриглашения.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
	ок_УправлениеФормой()
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеРегламентаЭДО

&НаКлиенте
Процедура ОткрытьФормуРедактированияРегламентаЭДО(ТекущиеДанные)
	
	НастройкаРегламентаЭДО = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииРедактированияРегламентаЭДО", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отправитель"             , Организация);
	ПараметрыОткрытия.Вставить("Получатель"              , Контрагент);
	ПараметрыОткрытия.Вставить("ДоговорКонтрагента"      , ДоговорКонтрагента);
	ПараметрыОткрытия.Вставить("ИдентификаторПолучателя" , ТекущиеДанные.ИдентификаторПолучателя);
	ПараметрыОткрытия.Вставить("ИдентификаторОтправителя", ТекущиеДанные.ИдентификаторОтправителя);
	ПараметрыОткрытия.Вставить("МаршрутПодписания"       , ТекущиеДанные.МаршрутПодписания);
	ПараметрыОткрытия.Вставить("ВидЭД"                   , ТекущиеДанные.ВидДокумента);
	ПараметрыОткрытия.Вставить("Формат"                  , ТекущиеДанные.ВерсияФормата);
	ПараметрыОткрытия.Вставить("ТребуетсяИзвещение"      , ТекущиеДанные.ТребуетсяИзвещениеОПолучении);
	ПараметрыОткрытия.Вставить("ТребуетсяПодтверждение"  , ТекущиеДанные.ТребуетсяОтветнаяПодпись);
	ПараметрыОткрытия.Вставить("ВыгружатьДопСведения"    , ТекущиеДанные.ВыгружатьДополнительныеСведения);
	ПараметрыОткрытия.Вставить("ЗаполнениеКодаТовара"    , ТекущиеДанные.ЗаполнениеКодаТовара);
	ПараметрыОткрытия.Вставить("ПрикладнойВидЭД"         , ТекущиеДанные.ПрикладнойВидЭД);
	ПараметрыОткрытия.Вставить("НастройкаРегламентаЭДО"  , Истина);
	ПараметрыОткрытия.Вставить("СкрыватьНастройкиТранспорта", Не РасширенныйРежим);
	ПараметрыОткрытия.Вставить("ВерсияФорматаУстановленаВручную" , ТекущиеДанные.ВерсияФорматаУстановленаВручную);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаОбменаСКонтрагентом", ПараметрыОткрытия,
		УникальныйИдентификатор,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииРедактированияРегламентаЭДО(Результат, ТекущиеДанные) Экспорт
	
	НастройкаРегламентаЭДО = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВерсияФормата = Результат.НастройкиРегламента.ВерсияФормата;
	ТекущиеДанные.ИдентификаторОтправителя = Результат.НастройкиРегламента.ИдентификаторОрганизации;
	ТекущиеДанные.ИдентификаторПолучателя = Результат.НастройкиРегламента.ИдентификаторКонтрагента;
	ТекущиеДанные.МаршрутПодписания = Результат.НастройкиРегламента.МаршрутПодписания;
	ТекущиеДанные.ТребуетсяОтветнаяПодпись = Результат.НастройкиРегламента.ТребуетсяПодтверждение;
	ТекущиеДанные.ТребуетсяИзвещениеОПолучении = Результат.НастройкиРегламента.ТребуетсяИзвещение;
	ТекущиеДанные.ВыгружатьДополнительныеСведения = Результат.НастройкиРегламента.ВыгружатьДополнительныеСведения;
	ТекущиеДанные.ПрикладнойВидЭД = Результат.НастройкиРегламента.ПрикладнойВидЭД;
	ТекущиеДанные.ВидДокумента = Результат.НастройкиРегламента.ВидЭД;
	ТекущиеДанные.ЗаполнениеКодаТовара = Результат.НастройкиРегламента.ЗаполнениеКодаТовара;
	ТекущиеДанные.СпособОбменаЭД = ПолучитьСпособОбменаУчетнойЗаписи(ТекущиеДанные.ИдентификаторОтправителя);
	ТекущиеДанные.ВерсияФорматаУстановленаВручную = Результат.НастройкиРегламента.ВерсияФорматаУстановленаВручную;
	
	ЗаполнитьПредставлениеРегламентаЭДОВСтроке(ЭтотОбъект, ТекущиеДанные);
	
	ОбновитьФорматыКонтрагента();
	
	СтруктураСтатусПодключения = ПолучитьСтатусПриглашения(ТекущиеДанные.ИдентификаторОтправителя, ТекущиеДанные.ИдентификаторПолучателя);
	ТекущиеДанные.СтатусПриглашенияПредставление = СтруктураСтатусПодключения.ТекстЗаголовка;
	ТекущиеДанные.ЦветГиперссылки = СтруктураСтатусПодключения.ЦветСсылки;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборПодходящихИдентификаторовЭДО

&НаКлиенте
Процедура ИзменитьРасширенныйРежимПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РасширенныйРежим Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьИдентификаторыЭДО();

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИдентификаторыЭДО()
	
	ОбновитьДоступныеИдентификаторы();
	
	ИдентификаторыОтправителя = Элементы.УчетнаяЗаписьОрганизации.СписокВыбора.ВыгрузитьЗначения();
	ИдентификаторыПолучателя  = Элементы.УчетнаяЗаписьКонтрагента.СписокВыбора.ВыгрузитьЗначения();
	
	Если ЗначениеЗаполнено(ИдентификаторыОтправителя) И ЗначениеЗаполнено(ИдентификаторыПолучателя) Тогда
		
		Элементы.ДекорацияНадпись.Заголовок = НСтр("ru = 'Ожидается получение данных по совместимости идентификаторов ЭДО'");
		Элементы.ГруппаОжидание.Видимость = Истина;
		
		Элементы.ФормаРасширенныйРежим.Доступность = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ПодобратьПодходящиеИдентификаторыЭДОЗавершение", ЭтотОбъект);
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ИдентификаторыОтправителя", ИдентификаторыОтправителя);
		ПараметрыПроцедуры.Вставить("ИдентификаторыПолучателя",  ИдентификаторыПолучателя);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительнаяОперация = ПодобратьПодходящиеИдентификаторыЭДО(ПараметрыПроцедуры, УникальныйИдентификатор);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьПодходящиеИдентификаторыЭДО(Знач ПараметрыПроцедуры,Знач УникальныйИдентификатор)
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подбор подходящих идентификаторов ЭДО'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.ПолучитьЛучшуюПоРейтингуСвязкуИдентификаторовЭДО", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПодобратьПодходящиеИдентификаторыЭДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
				
		УстановитьИдентификаторыЭДО(Результат.АдресРезультата);
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Во время выбора подходящих учетных записей произошла ошибка.
                                                                |Подробнее см. в журнале регистрации.'"));
		
	КонецЕсли;
	
	Элементы.ГруппаОжидание.Видимость = Ложь;
	Элементы.ФормаРасширенныйРежим.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификаторыЭДО(АдресРезультата)
	
	Идентификаторы = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не найден идентификатор Абонента ЭДО'"));
		Возврат;
	КонецЕсли;
	
	РасширенныйРежим = Ложь;
	ИдентификаторОтправителя = Врег(Идентификаторы.ИдентификаторОтправителя);
	ИдентификаторПолучателя = ВРег(Идентификаторы.ИдентификаторПолучателя);
	СпособОбменаЭД = ПолучитьСпособОбменаУчетнойЗаписи(ИдентификаторОтправителя);
	
	Таблица = ИсходящиеДокументы.Выгрузить();
	Таблица.ЗаполнитьЗначения(ИдентификаторОтправителя, "ИдентификаторОтправителя");
	Таблица.ЗаполнитьЗначения(ИдентификаторПолучателя , "ИдентификаторПолучателя");
	Таблица.ЗаполнитьЗначения(СпособОбменаЭД          , "СпособОбменаЭД");
	ИсходящиеДокументы.Загрузить(Таблица);
	
	ОбновитьФорматыКонтрагента();
	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
	                      |ИЗ
	                      |	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	                      |ГДЕ
	                      |	УчетныеЗаписиЭДО.Организация = &Организация
						  |	И НЕ УчетныеЗаписиЭДО.ок_СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)
	                      |	И УчетныеЗаписиЭДО.ИдентификаторЭДО = &ИдентификаторыОтправителя");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИдентификаторыОтправителя", ИдентификаторОтправителя);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаИсходящиеДокументы = ИсходящиеДокументы.Выгрузить();
		ТаблицаИсходящиеДокументы.ЗаполнитьЗначения(Перечисления.СтатусыПриглашений.ПустаяСсылка(), "СтатусПриглашения");
		ТаблицаИсходящиеДокументы.Индексы.Добавить("ИдентификаторОтправителя, ИдентификаторПолучателя");
		ИмяПоляСтатус = "СтатусПриглашения";
		ИсходныеДанные = Новый ТаблицаЗначений;
		ИсходныеДанные.Колонки.Добавить("ИдентификаторОрганизации");
		ИсходныеДанные.Колонки.Добавить("ИдентификаторКонтрагента");
		ИсходныеДанные.Колонки.Добавить("ОператорЭДО");
		ИсходныеДанные.Колонки.Добавить(ИмяПоляСтатус);
		ИсходныеДанные.Колонки.Добавить("Оформление");

		Отбор = Новый Структура();
		Отбор.Вставить("ИдентификаторОтправителя", ИдентификаторОтправителя);
		Отбор.Вставить("ИдентификаторПолучателя" , ИдентификаторПолучателя);
		
		НайденныеСтроки = ТаблицаИсходящиеДокументы.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			СтрокаТЧ.СтатусПриглашения = Перечисления.СтатусыПриглашений.Принято;
			
			СтруктураСтатусПодключения = СформироватьПредставлениеСтатусаПриглашения(СтрокаТЧ.СтатусПриглашения);
			
			СтрокаТЧ.СтатусПриглашенияПредставление = СтруктураСтатусПодключения.ТекстЗаголовка;
			СтрокаТЧ.ЦветГиперссылки = СтруктураСтатусПодключения.ЦветСсылки;
			
			НоваяСтрока = ИсходныеДанные.Добавить();
			НоваяСтрока.ИдентификаторОрганизации = ИдентификаторОтправителя;
			НоваяСтрока.ИдентификаторКонтрагента = ИдентификаторПолучателя;
			НоваяСтрока[ИмяПоляСтатус] = СтрокаТЧ.СтатусПриглашения;
			
		КонецЦикла;
					
		ОбменСКонтрагентамиСлужебный.ЗаменитьПредставлениеСтатусовПриглашений(ИсходныеДанные, ИмяПоляСтатус);
		
		ТаблицаИсходящиеДокументы.ЗагрузитьКолонку(ИсходныеДанные.ВыгрузитьКолонку("СтатусПриглашения"), "СтатусПриглашенияПредставление");
		
		ИсходящиеДокументы.Загрузить(ТаблицаИсходящиеДокументы);
					
		СтатусПриглашения = Перечисления.СтатусыПриглашений.Принято;
		
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
	
	ОбновитьДоступныеИдентификаторы();
	
	ПроверитьРасширенныйРежимИЗаполнитьСтатусыПриглашений();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Процедура НажатиеЗаписать(ПропуститьПроверки, ДополнительныеПараметры) Экспорт

	Модифицированность = НЕ НачатьСохраненияНастроек(ПропуститьПроверки, ДополнительныеПараметры.ОповещениеКоманды);

КонецПроцедуры

&НаКлиенте
Процедура НажатиеЗаписатьИЗакрыть(ПропуститьПроверки, ДополнительныеПараметры) Экспорт

	Если НачатьСохраненияНастроек(ПропуститьПроверки, ДополнительныеПараметры.ОповещениеКоманды) Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаНажатиеСтатусПодключения(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать(Неопределено);
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьПриглашение(ИдентификаторОтправителя, ИдентификаторПолучателя);
	
КонецПроцедуры

&НаКлиенте
Функция НачатьСохраненияНастроек(ПропуститьПроверки = Ложь, ОповещениеКоманды = Неопределено)
	
	Если Не ПропуститьПроверки Тогда
		// Выполняем серверный вызов, так как нужно проверить валидность маршрута и в случае ошибок спросить у пользователя,
		// записывать ли его.
		ЕстьОшибкиЗаполнения = Ложь;
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
		Если Не НастройкаВалидирована(ЕстьОшибкиЗаполнения, КонтекстОперации) Тогда
			Если Не ЕстьОшибкиЗаполнения Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОЗаписиПолученОтвет", ЭтотОбъект,
					Новый Структура("ОповещениеКоманды, КонтекстОперации", ОповещениеКоманды, КонтекстОперации));
				ТекстВопроса = НСтр("ru = 'Обнаружены возможные ошибки в настройках маршрутов. Продолжить запись?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, 
					НСтр("ru = 'Настройка некорректна'"));
			КонецЕсли;
				
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
	//Результат = ЗаписатьНастройки(Организация, Контрагент, ДоговорКонтрагента, ИсходящиеДокументы, ИспользоватьУКД, ИспользоватьУПД);
	Результат = ЗаписатьНастройки(Организация, Контрагент, ДоговорКонтрагента, ИсходящиеДокументы, ИспользоватьУКД, ИспользоватьУПД, ЭтаФорма["ок_ИдентификаторУчастникаОбмена"], 
		ЭтаФорма["ок_ПериодыДействияИсходящие"], ИдентификаторОтправителя
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
		,ИдентификаторПолучателя);
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
	
	Если Результат Тогда
		Модифицированность = Ложь;
		УстановитьКлючНастройкиОтправки(ЭтотОбъект);
		Оповестить("ОбновитьТекущиеДелаЭДО", Контрагент, Организация);
		ТекстЗаголовка = НСтр("ru = 'Успех'");
		ТекстСообщения = НСтр("ru = 'Настройки отправки сохранены успешно'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВопросОЗаписиПолученОтвет(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеКоманды, Истина);
	Иначе 
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(ДополнительныеПараметры.КонтекстОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкаВалидирована(ЕстьОшибкиЗаполнения = Ложь, КонтекстОперации = Неопределено)
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибкиЗаполнения = Истина;	
	КонецЕсли;
	
	ЕстьОшибкиВЗависимыхНастройках = Ложь;
	Если Не ЕстьОшибкиЗаполнения Тогда
		// Проверим, что все указанные маршруты возможно выполнить
		ПроверитьСоответствиеСертификатовМаршрутам(ЕстьОшибкиВЗависимыхНастройках, КонтекстОперации);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибкиЗаполнения И Не ЕстьОшибкиВЗависимыхНастройках;

КонецФункции

&НаСервере
Процедура ПроверитьСоответствиеСертификатовМаршрутам(Отказ, КонтекстОперации)
	
	// Подготовим соответствие наборов сертификатов учетным записям
	ИспользованныеУчетныеЗаписи = ИсходящиеДокументы.Выгрузить(, "ИдентификаторОтправителя").ВыгрузитьКолонку("ИдентификаторОтправителя");
	
	НаборыСертификатовУчетныхЗаписей = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетныеЗаписи", ИспользованныеУчетныеЗаписи);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО КАК УчетнаяЗапись,
	|	СертификатыУчетныхЗаписейЭДО.Сертификат КАК Сертификат
	|ИЗ
	|	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
	|ГДЕ
	|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО В(&УчетныеЗаписи)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетнаяЗапись,
	|	Сертификат
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаУчетныхЗаписей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	Пока ВыборкаУчетныхЗаписей.Следующий() Цикл
		СертификатыУчетныхЗаписей = Новый Массив;
		ИдентификаторНабора = "ИД_";
		Выборка = ВыборкаУчетныхЗаписей.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если СертификатыУчетныхЗаписей.Найти(Выборка.Сертификат) = Неопределено Тогда
				СертификатыУчетныхЗаписей.Добавить(Выборка.Сертификат);
				ИдентификаторНабора = ИдентификаторНабора + Строка(Выборка.Сертификат.УникальныйИдентификатор());
			КонецЕсли; 
		КонецЦикла;
		
		ИдентификаторНабора = СтрЗаменить(ИдентификаторНабора, "-", "_");
		СтруктураОписанияНабораСертификатов = Новый Структура("ИдентификаторНабора, Сертификаты", 
			ИдентификаторНабора, СертификатыУчетныхЗаписей);
		НаборыСертификатовУчетныхЗаписей.Вставить(ВыборкаУчетныхЗаписей.УчетнаяЗапись, СтруктураОписанияНабораСертификатов);
	КонецЦикла;
	
	// Подготовим уникальные комбинации значений наборов сертификатов, маршрутов и видов ЭД.
	УникальныеПараметрыПроверки = Новый Структура;
	Для Каждого СтрокаИсходящегоДокумента Из ИсходящиеДокументы Цикл
		Если СтрокаИсходящегоДокумента.Формировать Тогда
			МаршрутПодписания 	     = СтрокаИсходящегоДокумента.МаршрутПодписания;
			ВидЭД				     = СтрокаИсходящегоДокумента.ВидДокумента;
			УчетнаяЗаписьНастроекЭДО = СтрокаИсходящегоДокумента.ИдентификаторОтправителя;
			
			ПараметрыНабораСертификатов = НаборыСертификатовУчетныхЗаписей[ИдентификаторОтправителя];
			Если ПараметрыНабораСертификатов <> Неопределено Тогда
				ИдентификаторМаршрута   = СтрЗаменить(Строка(МаршрутПодписания.УникальныйИдентификатор()), "-", "_");
				ИдентификаторПараметров = ПараметрыНабораСертификатов.ИдентификаторНабора + Строка(ИдентификаторМаршрута);
				
				СтруктураОписанияПараметров = Неопределено;
				Если Не УникальныеПараметрыПроверки.Свойство(ИдентификаторПараметров, СтруктураОписанияПараметров) Тогда
					СтруктураОписанияПараметров = Новый Структура;
					СтруктураОписанияПараметров.Вставить("Сертификаты",       ПараметрыНабораСертификатов.Сертификаты);
					СтруктураОписанияПараметров.Вставить("МаршрутПодписания", МаршрутПодписания);
					СтруктураОписанияПараметров.Вставить("ВидыЭД",            Новый Массив);
					УникальныеПараметрыПроверки.Вставить(ИдентификаторПараметров, СтруктураОписанияПараметров);
				КонецЕсли;
				СтруктураОписанияПараметров.ВидыЭД.Добавить(ВидЭД);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеНастройки = Новый Структура("Отправитель, Получатель, Договор");
	ОписаниеНастройки.Отправитель = Организация;
	ОписаниеНастройки.Получатель  = Контрагент;
	ОписаниеНастройки.Договор     = ДоговорКонтрагента;
	НастройкаОбмена = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументов.СоздатьКлючЗаписи(ОписаниеНастройки);
	ПредставлениеНастройки = ОбменСКонтрагентамиСлужебный.ПредставлениеНастройкиОтправкиЭлектронныхДокументов(ОписаниеНастройки);
	
	// Проверим валидность каждого набора параметров проверки
	Для Каждого НаборПараметровПроверки Из УникальныеПараметрыПроверки Цикл
		МаршрутПодписания = НаборПараметровПроверки.Значение.МаршрутПодписания;
		Сертификаты       = НаборПараметровПроверки.Значение.Сертификаты;
		ВидыЭД            = НаборПараметровПроверки.Значение.ВидыЭД;
		
		РезультатыПроверки = ЭлектронноеВзаимодействиеСлужебный.РезультатыПроверкиМаршрутаПоПараметрамНастройки(
			МаршрутПодписания, Сертификаты, ВидыЭД);
			
		ЭлектронноеВзаимодействиеСлужебный.ВывестиРезультатыПроверкиМаршрута(РезультатыПроверки, 
			НастройкаОбмена, МаршрутПодписания, Отказ,, ПредставлениеНастройки, КонтекстОперации);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
//Функция ЗаписатьНастройки(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента, Знач ИсходящиеДокументы, Знач ИспользоватьУКД, Знач ИспользоватьУПД)
Функция ЗаписатьНастройки(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента, Знач ИсходящиеДокументы, Знач ИспользоватьУКД, Знач ИспользоватьУПД, 
	Знач ок_ИдентификаторУчастникаОбмена, Знач ПериодыДействия, Знач ИдентификаторОтправителя
	//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
	, Знач ИдентификаторПолучателя
	//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
	)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )	
	
	ИсходящиеДокументы = ИсходящиеДокументы.Выгрузить();
	
	ИсходящиеДокументы.Колонки.Добавить("Отправитель");
	ИсходящиеДокументы.ЗаполнитьЗначения(Организация, "Отправитель");
	
	ИсходящиеДокументы.Колонки.Добавить("Получатель");
	ИсходящиеДокументы.ЗаполнитьЗначения(Контрагент, "Получатель");
	
	ИсходящиеДокументы.Колонки.Добавить("Договор");
	ИсходящиеДокументы.ЗаполнитьЗначения(ДоговорКонтрагента, "Договор");
		
	// Подготовим таблицу уникальных пар идентификаторов для создания приглашений.
	Идентификаторы = ИсходящиеДокументы.Скопировать(, "ИдентификаторОтправителя, ИдентификаторПолучателя");
	Идентификаторы.Свернуть("ИдентификаторОтправителя, ИдентификаторПолучателя");
	ИдентификаторыОтфильтрованные = Идентификаторы.СкопироватьКолонки();
	Для Каждого СтрокаИдентификатора Из Идентификаторы Цикл
		Если ЗначениеЗаполнено(СтрокаИдентификатора.ИдентификаторОтправителя)
			И ЗначениеЗаполнено(СтрокаИдентификатора.ИдентификаторПолучателя) Тогда
		
			НоваяСтрока = ИдентификаторыОтфильтрованные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИдентификатора);
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам");
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировкиДанных.УстановитьЗначение("Договор"    , ДоговорКонтрагента);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ок_ПериодыДействияСоглашений");
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировкиДанных.УстановитьЗначение("Входящий"    , Ложь);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )

		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументов");
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировкиДанных.УстановитьЗначение("Договор"    , ДоговорКонтрагента);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		
		Если ИдентификаторыОтфильтрованные.Количество() Тогда
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами");
			ЭлементБлокировкиДанных.ИсточникДанных = ИдентификаторыОтфильтрованные;
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ИдентификаторОрганизации", "ИдентификаторОтправителя");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ИдентификаторКонтрагента", "ИдентификаторПолучателя");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
			                      |ИЗ
			                      |	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
			                      |ГДЕ
			                      |	УчетныеЗаписиЭДО.Организация = &Организация
								  |	И НЕ УчетныеЗаписиЭДО.ок_СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)
			                      |	И УчетныеЗаписиЭДО.ИдентификаторЭДО = &ИдентификаторыОтправителя");
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ИдентификаторыОтправителя", ИдентификаторОтправителя);
			ЭтоОбменСБИС = НЕ Запрос.Выполнить().Пустой();			
			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыОтфильтрованные);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Идентификаторы.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
			|	Идентификаторы.ИдентификаторПолучателя КАК ИдентификаторПолучателя
			|ПОМЕСТИТЬ Идентификаторы
			|ИЗ
			|	&Идентификаторы КАК Идентификаторы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Идентификаторы.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
			|	Идентификаторы.ИдентификаторПолучателя КАК ИдентификаторПолучателя
			|ИЗ
			|	Идентификаторы КАК Идентификаторы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
			|		ПО Идентификаторы.ИдентификаторОтправителя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
			|			И Идентификаторы.ИдентификаторПолучателя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
			|ГДЕ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус ЕСТЬ NULL";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.НовыйСтатусПриглашения(Выборка.ИдентификаторОтправителя,
					//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО (
					//Выборка.ИдентификаторПолучателя, Перечисления.СтатусыПриглашений.ТребуетсяОтправить, Контрагент,
					Выборка.ИдентификаторПолучателя, ?(ЭтоОбменСБИС, Перечисления.СтатусыПриглашений.Принято, Перечисления.СтатусыПриглашений.ТребуетсяОтправить), Контрагент,
					//1С-ИжТиСи, Кондратьев, 03.2020, Обновление ЭДО )
					ОбменСКонтрагентамиСлужебный.СтандартныйШаблонПриглашения());
			КонецЦикла;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отправитель.Установить(Организация);
		НаборЗаписей.Отбор.Получатель.Установить(Контрагент);
		НаборЗаписей.Отбор.Договор.Установить(ДоговорКонтрагента);
		НаборЗаписей.Загрузить(ИсходящиеДокументы);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		НаборЗаписей.Отправитель = Организация;
		НаборЗаписей.Получатель  = Контрагент;
		НаборЗаписей.Договор = ДоговорКонтрагента;
		НаборЗаписей.Прочитать();
		НаборЗаписей.ИспользоватьУПД = ИспользоватьУПД;
		НаборЗаписей.ИспользоватьУКД = ИспользоватьУКД;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		НаборЗаписей.ок_ИдентификаторУчастникаОбмена = ок_ИдентификаторУчастникаОбмена;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО )
		НаборЗаписей.Записать();
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		Если ЭтоОбменСБИС Тогда
			НаборЗаписей = РегистрыСведений.ок_ПериодыДействияСоглашений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Отправитель.Установить(Организация);
			НаборЗаписей.Отбор.Получатель.Установить(Контрагент);
			НаборЗаписей.Отбор.Договор.Установить(ДоговорКонтрагента);
			НаборЗаписей.Отбор.Входящий.Установить(Ложь);
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
			НаборЗаписей.Отбор.ИдентификаторОтправителя.Установить(ИдентификаторОтправителя);
			НаборЗаписей.Отбор.ИдентификаторПолучателя.Установить(ИдентификаторПолучателя);
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
			Для Каждого СтрокаТаблицы ИЗ ПериодыДействия Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Отправитель = Организация; 
				НоваяЗапись.Получатель = Контрагент;
				НоваяЗапись.Входящий = Ложь;
				//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879) 
				НоваяЗапись.ИдентификаторОтправителя = ИдентификаторОтправителя;
				НоваяЗапись.ИдентификаторПолучателя = ИдентификаторПолучателя;
				//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
			КонецЦикла;	
			НаборЗаписей.Записать();
			
			//ОКЕЙ Бублик А.А.(СофтЛаб) Начало 2020-09-28 (#3879)
			//СоглашениеСтруктура = Новый Структура("Отправитель, Получатель", Организация, Контрагент);
			СоглашениеСтруктура = Новый Структура("Отправитель, 
												|Получатель,
												|ИдентификаторОтправителя,
												|ИдентификаторПолучателя",
		
												Организация, 
												Контрагент,
												ИдентификаторОтправителя,
												ИдентификаторПолучателя);
			//ОКЕЙ Бублик А.А.(СофтЛаб) Конец 2020-09-28 (#3879)
			РегистрыСведений.ок_ИсторияСоглашенияОбИспользованииЭД.ОбновитьИсторию(СоглашениеСтруктура);
			
			Набор = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьНаборЗаписей();
			Набор.Отбор.Контрагент.Установить(Контрагент);
			Набор.Прочитать();
			
			Если Не ЗначениеЗаполнено(Набор)
				ИЛИ Набор[0].Состояние <> Перечисления.СостоянияКонтрагентаБЭД.НастроенЭДО Тогда 
				
				Набор.Очистить();
				Состояние = Набор.Добавить();
				Состояние.Контрагент = Контрагент;
				Состояние.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НастроенЭДО;
				Состояние.ИНН = Контрагент.ИНН;
				Состояние.КПП = Контрагент.КПП;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			КонецЕсли;

		КонецЕсли;	
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление ЭДО (
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Сохранение настроек отправки ЭДО'");
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			НСтр("ru = 'Не удалось сохранить Настройки отправки
                  |Подробнее см. в журнале регистрации.'"));
			
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаНаОбъектНастройкиЭДО(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента)
	Возврат ОбменСКонтрагентамиСлужебный.СсылкаНаОбъектНастройкиЭДО(Организация, Контрагент, ДоговорКонтрагента);
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемОкнаФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть(Элементы.ФормаЗаписатьИЗакрыть);
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпособОбменаУчетнойЗаписи(Знач ИдентификаторОтправителя)
	
	Данные = РегистрыСведений.УчетныеЗаписиЭДО.ДанныеУчетнойЗаписиЭДОПоИдентификатору(ИдентификаторОтправителя);
	
	Если ЗначениеЗаполнено(Данные) Тогда
		Возврат Данные.СпособОбменаЭД;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьРасширенныйРежимИЗаполнитьСтатусыПриглашений()

	Таблица = ИсходящиеДокументы.Выгрузить(, "ИдентификаторОтправителя, ИдентификаторПолучателя");
	Таблица.Свернуть("ИдентификаторОтправителя, ИдентификаторПолучателя");
	
	ИдентификаторОтправителя = ВРег(Таблица[0].ИдентификаторОтправителя);
	ИдентификаторПолучателя  = ВРег(Таблица[0].ИдентификаторПолучателя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИдентификаторы.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ТаблицаИдентификаторы.ИдентификаторПолучателя КАК ИдентификаторПолучателя
		|ПОМЕСТИТЬ ТаблицаИдентификаторы
		|ИЗ
		|	&Идентификаторы КАК ТаблицаИдентификаторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИдентификаторы.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ТаблицаИдентификаторы.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК СтатусПриглашения,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ОператорЭДО КАК ОператорЭДО
		|ИЗ
		|	ТаблицаИдентификаторы КАК ТаблицаИдентификаторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО ТаблицаИдентификаторы.ИдентификаторОтправителя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
		|			И ТаблицаИдентификаторы.ИдентификаторПолучателя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента";
	
	Запрос.УстановитьПараметр("Идентификаторы", Таблица);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТаблицаИсходящиеДокументы = ИсходящиеДокументы.Выгрузить();
	ТаблицаИсходящиеДокументы.ЗаполнитьЗначения(Перечисления.СтатусыПриглашений.ПустаяСсылка(), "СтатусПриглашения");
	ТаблицаИсходящиеДокументы.Индексы.Добавить("ИдентификаторОтправителя, ИдентификаторПолучателя");
	
	ИмяПоляСтатус = "СтатусПриглашения";
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ИдентификаторОрганизации");
	ИсходныеДанные.Колонки.Добавить("ИдентификаторКонтрагента");
	ИсходныеДанные.Колонки.Добавить("ОператорЭДО");
	ИсходныеДанные.Колонки.Добавить(ИмяПоляСтатус);
	ИсходныеДанные.Колонки.Добавить("Оформление");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("ИдентификаторОтправителя", ВыборкаДетальныеЗаписи.ИдентификаторОтправителя);
		Отбор.Вставить("ИдентификаторПолучателя" , ВыборкаДетальныеЗаписи.ИдентификаторПолучателя);
		
		НайденныеСтроки = ТаблицаИсходящиеДокументы.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			СтрокаТЧ.СтатусПриглашения = ВыборкаДетальныеЗаписи.СтатусПриглашения;
			
			СтруктураСтатусПодключения = СформироватьПредставлениеСтатусаПриглашения(СтрокаТЧ.СтатусПриглашения);
			
			СтрокаТЧ.СтатусПриглашенияПредставление = СтруктураСтатусПодключения.ТекстЗаголовка;
			СтрокаТЧ.ЦветГиперссылки = СтруктураСтатусПодключения.ЦветСсылки;
			
			НоваяСтрока = ИсходныеДанные.Добавить();
			НоваяСтрока.ИдентификаторОрганизации = ВыборкаДетальныеЗаписи.ИдентификаторОтправителя;
			НоваяСтрока.ИдентификаторКонтрагента = ВыборкаДетальныеЗаписи.ИдентификаторПолучателя;
			НоваяСтрока.ОператорЭДО = ВыборкаДетальныеЗаписи.ОператорЭДО;
			НоваяСтрока[ИмяПоляСтатус] = СтрокаТЧ.СтатусПриглашения;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбменСКонтрагентамиСлужебный.ЗаменитьПредставлениеСтатусовПриглашений(ИсходныеДанные, ИмяПоляСтатус);
	
	ТаблицаИсходящиеДокументы.ЗагрузитьКолонку(ИсходныеДанные.ВыгрузитьКолонку("СтатусПриглашения"), "СтатусПриглашенияПредставление");
	
	ИсходящиеДокументы.Загрузить(ТаблицаИсходящиеДокументы);
	
	Если Таблица.Количество() = 1 Тогда
		
		ОбновитьДоступныеИдентификаторы();
		
		СтатусПриглашения = ТаблицаИсходящиеДокументы[0].СтатусПриглашенияПредставление;
		
		Если ИсходящиеДокументы[0].ЦветГиперссылки = 0 Тогда
			Элементы.СтатусПриглашения.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
		ИначеЕсли ИсходящиеДокументы[0].ЦветГиперссылки = 1 Тогда
			Элементы.СтатусПриглашения.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Таблица.Количество() > 1;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Форма, СтрокаТаблицы)
	
	Строки = Форма.ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", СтрокаТаблицы.ВерсияФормата));
	
	МассивСтрок = Новый Массив;
	Если Строки.Количество() > 0 Тогда
		МассивСтрок.Добавить(Строки[0].ПредставлениеФормата);
	Иначе
		МассивСтрок.Добавить(НСтр("ru = 'Произвольный документ'"));
	КонецЕсли;
	
	МассивСтрок.Добавить(?(СтрокаТаблицы.ТребуетсяОтветнаяПодпись, НСтр("ru = 'с ответной подписью'"), НСтр("ru = 'без ответной подписи'")));
	
	СтрокаТаблицы.ДополнительныеНастройки = СтрСоединить(МассивСтрок,", ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриглашение(ВыбранныйИдентификаторОрганизации, ВыбранныйИдентификаторКонтрагента)
	
	Если Не ЗначениеЗаполнено(Организация)
		Или Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = ОбменСКонтрагентамиСлужебныйКлиент.КлючЗаписиПриглашения(
		ВыбранныйИдентификаторОрганизации, ВыбранныйИдентификаторКонтрагента);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Контрагент",  Контрагент);
	ОткрытьФорму("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ФормаЗаписи",
		ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКлючНастройкиОтправки(Форма)
	Форма.КлючНастройкиОтправки = Новый ФиксированнаяСтруктура("Отправитель, Получатель, Договор",
		Форма.Организация, Форма.Контрагент, Форма.ДоговорКонтрагента);
КонецПроцедуры

&НаКлиенте
Функция КлючНастройкиОтправкиПустой()
	Возврат НЕ (ЗначениеЗаполнено(КлючНастройкиОтправки.Отправитель)
		ИЛИ ЗначениеЗаполнено(КлючНастройкиОтправки.Получатель)
		ИЛИ ЗначениеЗаполнено(КлючНастройкиОтправки.Договор));
КонецФункции

&НаСервере
Процедура ОбновитьФорматыКонтрагента()
	
	Если Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ИсходящиеДокументы.Выгрузить();
	Настройки.Свернуть("ИдентификаторПолучателя");
	НаборИдентификаторовКонтрагентов = Настройки.ВыгрузитьКолонку("ИдентификаторПолучателя");
	
	ПоддерживаемыеФорматы = ОбменСКонтрагентамиСлужебный.ПоддерживаемыеФорматыКонтрагента(НаборИдентификаторовКонтрагентов);
	
	Для каждого СтрокаНастроек Из ИсходящиеДокументы Цикл
		
		Если СтрокаНастроек.ВерсияФорматаУстановленаВручную Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура("ИдентификаторКонтрагента,ВидЭД", СтрокаНастроек.ИдентификаторПолучателя, СтрокаНастроек.ВидДокумента);
		НайденныеСтроки = ПоддерживаемыеФорматы.НайтиСтроки(ОтборСтрок);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаФормата = НайденныеСтроки[0];
		Если СтрокаФормата <> Неопределено И СтрокаФормата.Формат <> СтрокаНастроек.ВерсияФормата Тогда
			СтрокаНастроек.ВерсияФормата = СтрокаФормата.Формат;
			ЗаполнитьПредставлениеРегламентаЭДОВСтроке(ЭтотОбъект, СтрокаНастроек);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеНастройкиОбмена

&НаКлиенте
Процедура УдалитьНастройкуОтправки()
	
	ВидыДокументов = Неопределено;
	Если КлючНастройкиОтправкиПустой()
		ИЛИ ЗначениеЗаполнено(КлючНастройкиОтправки.Договор) Тогда
		ТекстВопроса = НСтр("ru = 'Удалить настройку обмена с контрагентом?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Настройка обмена с контрагентом будет удалена. Отправка электронных документов контрагенту будет невозможна.
			|Продолжить?'");
		ВидыДокументов = ВидыДокументовДляРазрываПриглашенийПередУдалением(КлючНастройкиОтправки);
	КонецЕсли;
	
	Если ВидыДокументов = Неопределено Тогда
		Описание = Новый ОписаниеОповещения("УдалитьНастройкуОтправкиПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Для удаления настройки необходимо вначале разорвать приглашение.'");
		
		Для Каждого СтрокаКоллекции Из ИсходящиеДокументы Цикл
			
			Если ЗначениеЗаполнено(СтрокаКоллекции.ПрикладнойВидЭД) Тогда
				ВидДокумента = СтрокаКоллекции.ПрикладнойВидЭД;
			Иначе
				ВидДокумента = СтрокаКоллекции.ВидДокумента;
			КонецЕсли;
			
			Если ВидыДокументов.Найти(ВидДокумента) <> Неопределено Тогда
				
				РеквизитФормы = ?(Не РасширенныйРежим, "СтатусПриглашения",
					СтрШаблон("ИсходящиеДокументы[%1].СтатусПриглашенияПредставление", ИсходящиеДокументы.Индекс(СтрокаКоллекции)));
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , РеквизитФормы);
				
				Если Не РасширенныйРежим Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыДокументовДляРазрываПриглашенийПередУдалением(Знач КлючНастройкиОтправки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ПрикладнойВидЭД КАК ПрикладнойВидДокумента
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
		|			И НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято))
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Отправитель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Получатель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Отправитель", КлючНастройкиОтправки.Отправитель);
	Запрос.УстановитьПараметр("Получатель", КлючНастройкиОтправки.Получатель);
	Запрос.УстановитьПараметр("Договор", КлючНастройкиОтправки.Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыДокументов = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДокумента = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
			ВидыДокументов.Добавить(Выборка.ПрикладнойВидДокумента);
		Иначе
			ВидыДокументов.Добавить(Выборка.ВидДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыДокументов;
	
КонецФункции

&НаКлиенте
Процедура УдалитьНастройкуОтправкиПослеВопроса(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Если КлючНастройкиОтправкиПустой() Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Организация"       , КлючНастройкиОтправки.Отправитель);
	ПараметрыПроцедуры.Вставить("Контрагент"        , КлючНастройкиОтправки.Получатель);
	ПараметрыПроцедуры.Вставить("ДоговорКонтрагента", КлючНастройкиОтправки.Договор);
	
	ДлительнаяОперация = НачатьУдалениеНастроекОтправкиНаСервере(УникальныйИдентификатор, ПараметрыПроцедуры);
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		Элементы.ГруппаОжиданиеУдаления.Видимость = Истина;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Описание = Новый ОписаниеОповещения("УдалитьНастройкуОтправкиЗавершение", ЭтаФорма);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьУдалениеНастроекОтправкиНаСервере(Знач УникальныйИдентификатор, Знач ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление настройки отправки электронных документов'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.УдалитьНастройкиОтправкиЭДО",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура УдалитьНастройкуОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТолькоПросмотр = Ложь;
	Элементы.ГруппаОжиданиеУдаления.Видимость = Ложь;

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ТекстСообщения = НСтр("ru = 'Во время удаления настройки отправки произошла ошибка.'");
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Удаление настройки отправки ЭДО'"),
			Результат.ПодробноеПредставлениеОшибки, ТекстСообщения);
			
		Возврат;
	КонецЕсли;
	
	Если ПолучитьИзВременногоХранилища(Результат.АдресРезультата) = Истина Тогда
		
		Оповестить("ОбновитьТекущиеДелаЭДО");
		Закрыть();
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Во время удаления настройки отправки произошла ошибка.
                               |Подробнее см. в журнале регистрации.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОК

//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103

&НаСервере
Процедура ок_УправлениеФормой(ДополнительныеПараметры = Неопределено) Экспорт
	
	ОсобоеОтображение = ЗначениеЗаполнено(РегистрыСведений.УчетныеЗаписиЭДО.ЗначениеРеквизитаРегистра(ИдентификаторОтправителя, "ок_СпособОбменаЭД"));
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("ок_АвтоматическиСоздаватьДокументПоступленияПослеСогласования");
	ИменаЭлементов.Добавить("ок_ИдентификаторУчастникаОбмена");
	ИменаЭлементов.Добавить("ок_ПроверитьИдентификаторУчастникаОбмена");
	Для каждого Имя Из ИменаЭлементов Цикл
		Элемент = Элементы.Найти(Имя);
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = ОсобоеОтображение;
		КонецЕсли;	
	КонецЦикла;
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("ЭДО");
	Для каждого Имя Из ИменаЭлементов Цикл
		Элемент = Элементы.Найти(Имя);
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Не ОсобоеОтображение;
		КонецЕсли;	
	КонецЦикла;
	//
	//Если ЗначениеЗаполнено(Объект.Ссылка) И ОсобоеОтображение И ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
	//	Элемент = Элементы.Найти("ПрофильНастроекЭДО");
	//	Если Элемент <> Неопределено Тогда
	//		Элемент.Доступность = Ложь;
	//	КонецЕсли;	
	//КонецЕсли;	
	//
	//
	//Если ОсобоеОтображение Тогда
	//	Элемент = Элементы.Найти("ИдентификаторОрганизации");
	//	Если Элемент <> Неопределено Тогда
	//		Элемент.ТолькоПросмотр = Ложь;
	//	КонецЕсли;	
	//КонецЕсли;	
	
	Если ОсобоеОтображение Тогда
		НастройкаЭДО = Новый Структура("ИдентификаторОтправителя, ИдентификаторПолучателя", ИдентификаторОтправителя, ИдентификаторПолучателя);
		ПоследниеПериодыДействия = ок_ОбменСКонтрагентамиВнутренний.ПоследниеПериодыДействияСоглашенияОбИспользованияЭД(НастройкаЭДО, ЭтотОбъект["ок_ПериодыДействияИсходящие"], "Исходящие");
		//ЭтотОбъект.ок_ТекстПериодыДействияВходящие = "Входящий ЭДО: с <" + Формат(ПоследниеПериодыДействия.ДатаНачала, "ДФ=dd.MM.yyyy; ДП='не указано'") + "> по <" + Формат(ПоследниеПериодыДействия.ДатаОкончания, "ДФ=dd.MM.yyyy; ДП='не указано'") + ">";
		ЭтотОбъект.ок_ТекстПериодыДействияИсходящие = "Исходящий ЭДО: с <" + Формат(ПоследниеПериодыДействия.ДатаНачалаИсходящие, "ДФ=dd.MM.yyyy; ДП='не указано'") + "> по <" + Формат(ПоследниеПериодыДействия.ДатаОкончанияИсходящие, "ДФ=dd.MM.yyyy; ДП='не указано'") + ">";
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ок_ПроверитьИдентификаторУчастникаОбмена(Команда) Экспорт
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = "";
	Результат = ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьИдентификаторУчастникаОбмена(ИдентификаторОтправителя, Новый Структура("ИдентификаторКонтрагента, Контрагент", ИдентификаторПолучателя, Контрагент), Ответ);
	Если Не Результат Тогда
		Сообщить("Не удалось получить идентификатор участника обмена" + ?(ПустаяСтрока(Ответ), "", ": " + Ответ));
	Иначе
		ЭтотОбъект["ок_ИдентификаторУчастникаОбмена"] = Ответ;
	КонецЕсли;	
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-10-02 (#3337)

&НаКлиенте
Процедура ок_ТекстПериодыДействияИсходящиеНажатие(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("ИмяТабличнойЧасти, ТолькоПросмотр, ПериодыДействия", "ок_ПериодыДействияИсходящие", ТолькоПросмотр, ок_УпаковатьТаблицу("ок_ПериодыДействияИсходящие"));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ок_ТекстПериодыДействияНажатиеЗавершение", ЭтотОбъект, ПараметрыОткрытия);
	
	ОткрытьФорму("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.Форма.ок_ФормаРедактированияПериодыДействия", ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ок_УпаковатьТаблицу(ИмяТабличнойЧасти)
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить());
	
КонецФункции	

&НаКлиенте
Процедура ок_ТекстПериодыДействияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяТабличнойЧасти].Очистить();
	Для каждого Строка из Результат Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ДополнительныеПараметры.ИмяТабличнойЧасти].Добавить(), Строка);
	КонецЦикла;	
	
	Модифицированность = Истина;
	
	ок_УправлениеФормой();
	
КонецПроцедуры
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-06-17 (#3377)

//ОК(СофтЛаб) Вдовиченко Г.В. 20181101 №3103

#КонецОбласти

