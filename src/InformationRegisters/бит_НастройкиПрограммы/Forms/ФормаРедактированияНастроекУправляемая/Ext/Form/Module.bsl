
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийПериод; // Хранит значение периода.

&НаКлиенте
Перем мТекущееПодразделение; // Хранит значение подразделения.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Период", Период);
	Параметры.Свойство("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если СтруктурноеПодразделение <> Неопределено Тогда
		Элементы.СтруктурноеПодразделение.ВыбиратьТип = Ложь
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	ЗаполнитьДеревоНастроек();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Запомним текущие значения реквизитов.
	мТекущийПериод 		  = Период;
	мТекущееПодразделение = СтруктурноеПодразделение;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Проверим были ли внесены изменения в дереве настроек.
    Если ПроверитьНаличиеИзмененийВДеревеНастроек() И НЕ фКэшЗначений.ФлагЗакрытия Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемОкончание", ЭтотОбъект, Отказ); 
		ТекстСообщения = НСтр("ru='Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
	фКэшЗначений.ФлагЗакрытия = Ложь;
	
КонецПроцедуры // ПередЗакрытием()

// Процедура окончание процедуры "ПередЗакрытием".
// 
&НаКлиенте 
Процедура ПередЗакрытиемОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Выполним запись настроек.
		ВыполнитьЗаписьНастроек(ДополнительныеДанные);
		фКэшЗначений.ФлагЗакрытия = Истина;
		ЭтаФорма.Закрыть();
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		фКэшЗначений.ФлагЗакрытия = Истина;
		ЭтаФорма.Закрыть();
		
	КонецЕсли; 
                
КонецПроцедуры // ПередЗакрытиемОкончание()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтруктурноеПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	Если СтруктурноеПодразделение = Неопределено Тогда
		
		СтандартнаяОбработка        = Ложь;
		
		Оп = Новый ОписаниеОповещения("СтруктурноеПодразделениеНачалоВыбора_Завершение", ЭтотОбъект,  Элемент);
		ЭтотОбъект.ПоказатьВыборИзСписка(Оп, фКэшЗначений.СписокТиповПодразделение);
		
	КонецЕсли; // Текущее значение неопределено.

КонецПроцедуры // НачалоВыбораСоставного()

// Процедура завершает выбор составного типа из списка в управляемой форме. 
//
&НаКлиенте
Процедура СтруктурноеПодразделениеНачалоВыбора_Завершение(ВыбранныйЭлемент, ЭлементВладелец) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
        
        // Устанавливаем выбранный тип.
        МассивТипов = Новый Массив;
        МассивТипов.Добавить(ВыбранныйЭлемент.Значение);
        Описание = Новый ОписаниеТипов(МассивТипов);
        СтруктурноеПодразделение = Описание.ПривестиЗначение();	
        ЭлементВладелец.ВыбиратьТип = Ложь;
               
    КонецЕсли;
      
	УстановитьВидимость();
	
КонецПроцедуры // ВыбратьТипСоставнойАналитики_Завершение()

&НаКлиенте
Процедура СтруктурноеПодразделениеПриИзменении(Элемент)
	
	Если мТекущееПодразделение = СтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьНаличиеИзмененийВДеревеНастроек() Тогда
		
		Оповещение = Новый ОписаниеОповещения("СтруктурноеПодразделениеПриИзмененииОкончание", ЭтотОбъект); 
		ТекстСообщения = НСтр("ru='Будет выполнено перезаполнение настроек. Текущие изменения будут потеряны. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения,РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		// Заполним дерево настроек.
		ЗаполнитьДеревоНастроек();    		
		мТекущееПодразделение = СтруктурноеПодразделение;
		УстановитьВидимость();
	
	КонецЕсли;
	
КонецПроцедуры // СтруктурноеПодразделениеПриИзменении()

// Процедура окончание процедуры "СтруктурноеПодразделениеПриИзменении".
// 
&НаКлиенте 
Процедура СтруктурноеПодразделениеПриИзмененииОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Заполним дерево настроек.
		ЗаполнитьДеревоНастроек();    		
		
	Иначе
		СтруктурноеПодразделение = мТекущееПодразделение;
	КонецЕсли; 
	
	мТекущееПодразделение = СтруктурноеПодразделение;
	
	УстановитьВидимость();
	
КонецПроцедуры // СтруктурноеПодразделениеПриИзмененииОкончание()

&НаКлиенте
Процедура СтруктурноеПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтруктурноеПодразделение = Неопределено;
	
	Если ПроверитьНаличиеИзмененийВДеревеНастроек() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("СтруктурноеПодразделениеОчисткаОкончание", ЭтотОбъект); 
		ТекстСообщения = НСтр("ru='Будет выполнено перезаполнение настроек. Текущие изменения будут потеряны. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения,РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		// Заполним дерево настроек.
		ЗаполнитьДеревоНастроек();   		
			
		УстановитьВидимость();
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурноеПодразделениеОчистка()

// Процедура окончание процедуры "СтруктурноеПодразделениеОчистка".
// 
&НаКлиенте 
Процедура СтруктурноеПодразделениеОчисткаОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Заполним дерево настроек.
		ЗаполнитьДеревоНастроек();   		
		
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры // СтруктурноеПодразделениеОчисткаОкончание()

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Если мТекущийПериод = Период Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьНаличиеИзмененийВДеревеНастроек() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ПериодПриИзмененииОкончание", ЭтотОбъект); 
		ТекстСообщения = НСтр("ru='Будет выполнено перезаполнение настроек. Текущие изменения будут потеряны. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения,РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		// Заполним дерево настроек.
		ЗаполнитьДеревоНастроек(); 		
			
		мТекущийПериод = Период;
		
		бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоНастроек, ДеревоНастроек.ПолучитьЭлементы());
		
	КонецЕсли;
	
КонецПроцедуры // ПериодПриИзменении()

// Процедура окончание процедуры "ПериодПриИзменении".
// 
&НаКлиенте 
Процедура ПериодПриИзмененииОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Заполним дерево настроек.
		ЗаполнитьДеревоНастроек(); 		
		
	Иначе 	
		Период = мТекущийПериод;
	КонецЕсли; 
	
	мТекущийПериод = Период;
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоНастроек, ДеревоНастроек.ПолучитьЭлементы());
	
КонецПроцедуры // ПериодПриИзмененииОкончание()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастроек

&НаКлиенте
Процедура ДеревоНастроекЗначениеНастройкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные; 	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НастройкаИзменена = Истина;
	
КонецПроцедуры // ДеревоНастроекЗначениеНастройкиПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	// Выполним запись настроек.
	ВыполнитьЗаписьНастроек();
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.бит_НастройкиПрограммы"));
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоНастроек, ДеревоНастроек.ПолучитьЭлементы());
	
КонецПроцедуры // Записать()

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	
	// Выполним запись настроек.
	ВыполнитьЗаписьНастроек(Отказ);
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.бит_НастройкиПрограммы"));
	
	Если Не Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьИЗакрыть()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает текст заголовка элементов формы.
// 
&НаКлиенте
Процедура УстановитьВидимость()
	
	ТипЗначенияСтрПодразделения = ТипЗнч(СтруктурноеПодразделение);
	
	Если ТипЗначенияСтрПодразделения = Тип("СправочникСсылка.Организации") Тогда
		ТекстЗаголовка = НСтр("ru = 'Организация'");
	ИначеЕсли ТипЗначенияСтрПодразделения = Тип(фКэшЗначений.ИмяТипаЦФО) Тогда
		ТекстЗаголовка = НСтр("ru = 'ЦФО'");
	ИначеЕсли ТипЗначенияСтрПодразделения = Тип("СправочникСсылка.бит_ГруппыСтруктурныхПодразделений")	Тогда
		ТекстЗаголовка = НСтр("ru = 'Группа стр. подразделений'");			 
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Структурное подразделение'");
	КонецЕсли; 
	
	Элементы.СтруктурноеПодразделение.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура заполняет кэш значений, используемый при работе с формой.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	Измерения = Метаданные.РегистрыСведений.бит_НастройкиПрограммы.Измерения;
	
	МассивТипов = Измерения.СтруктурноеПодразделение.Тип.Типы();
	
	СписокТиповПодразделение = Новый СписокЗначений;
	СписокТиповПодразделение.ЗагрузитьЗначения(МассивТипов);
	
	фКэшЗначений.Вставить("СписокТиповПодразделение", СписокТиповПодразделение);
	
	ИмяТипаЦФО = бит_ОбщегоНазначения.ПолучитьИмяТипаЦФО();
	
	фКэшЗначений.Вставить("ИмяТипаЦФО", ИмяТипаЦФО);
	
	фКэшЗначений.Вставить("ФлагЗакрытия", Ложь);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Функция проверяет, были ли изменения настроек в дереве.
// 
&НаСервере
Функция ПроверитьНаличиеИзмененийВДеревеНастроек()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоНастроек", Тип("ДеревоЗначений"));
	
	НайденнаяСтрока = ДеревоЗначений.Строки.Найти(Истина, "НастройкаИзменена", Истина);
	
	ЕстьИзмененные = НЕ НайденнаяСтрока = Неопределено;
	
	Возврат ЕстьИзмененные;
	
КонецФункции // ПроверитьНаличиеИзмененийВДеревеНастроек()

// Процедура выполняет заполнение дерева настроек.
// 
&НаСервере
Процедура ЗаполнитьДеревоНастроек()
	
	ДеревоНастроек.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_НастройкиПрограммы.Ссылка КАК Настройка,
	|	бит_НастройкиПрограммыСрезПоследних.ЗначениеНастройки,
	|	бит_НастройкиПрограммы.ЭтоГруппа
	|ИЗ
	|	ПланВидовХарактеристик.бит_НастройкиПрограммы КАК бит_НастройкиПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НастройкиПрограммы.СрезПоследних(&ПериодРегистра, СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК бит_НастройкиПрограммыСрезПоследних
	|		ПО бит_НастройкиПрограммы.Ссылка = бит_НастройкиПрограммыСрезПоследних.Настройка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Настройка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ПериодРегистра", Период);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	ДобавитьГруппировкуВДеревоНастроек(Результат, ДеревоНастроек);
	
КонецПроцедуры // ЗаполнитьДеревоНастроек()

// Выводит группировку в дерево настроек с иерархией элементов. Рекурсивный вызов.
// 
// Параметры:
//  ВыборкаВерхняя - РезультатЗапроса или ВыборкаИзРезультатаЗапроса.
//  СтрокиДерева   - Коллекция строк дерева значений.
// 
&НаСервере
Процедура ДобавитьГруппировкуВДеревоНастроек(ВыборкаВерхняя, СтрокиДерева)
	
	Выборка = ВыборкаВерхняя.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЭлементыДерева = СтрокиДерева.ПолучитьЭлементы();
	
    Пока Выборка.Следующий() Цикл
        
        ТекСтрока = ЭлементыДерева.Добавить();
		
		ТекСтрока.Настройка			= Выборка.Настройка;
		ТекСтрока.ЗначениеНастройки = Выборка.ЗначениеНастройки;
		ТекСтрока.ЭтоГруппа			= Выборка.ЭтоГруппа;
        
        ДобавитьГруппировкуВДеревоНастроек(Выборка, ТекСтрока);
        
    КонецЦикла;
	
КонецПроцедуры // ДобавитьГруппировкуВДеревоНастроек()

// процедура выполняет запись настроек.
// 
// Параметры:
//  Отказ - Булево.
// 
&НаСервере
Процедура ВыполнитьЗаписьНастроек(Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		
		ТекстСообщения = НСтр("ru='Не заполнено значение реквизита ""Период""!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, ЭтаФорма,"Период",Отказ);
		
		Возврат;
	КонецЕсли;
	
	// Выполним запись настроек.
	ВыполнитьЗаписьНастроекГруппировки(ДеревоНастроек, Отказ);
	
	Если Не Отказ Тогда
		// Заполним дерево настроек.
		ЗаполнитьДеревоНастроек();
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьЗаписьНастроек()

// Процедура выполняет запись настроек группировки. Рекурсивный вызов.
// 
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.
//  СтрокиДерева - Коллекция строк дерева значений.
// 
&НаСервере
Процедура ВыполнитьЗаписьНастроекГруппировки(СтрокиДерева, Отказ)
	
	ЭлементыДерева = СтрокиДерева.ПолучитьЭлементы();
	
	Для Каждого ТекСтрока Из ЭлементыДерева Цикл
		
		Если ТекСтрока.ЭтоГруппа Тогда
			
			ВыполнитьЗаписьНастроекГруппировки(ТекСтрока, Отказ);
			
		ИначеЕсли ТекСтрока.НастройкаИзменена Тогда
			
			МенеджерЗаписи = РегистрыСведений.бит_НастройкиПрограммы.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Период					= Период;
			МенеджерЗаписи.СтруктурноеПодразделение = СтруктурноеПодразделение;
			МенеджерЗаписи.Настройка 				= ТекСтрока.Настройка;
			МенеджерЗаписи.ЗначениеНастройки		= ТекСтрока.ЗначениеНастройки;
			
			// Попытаемся записать менеджер записи.
			ОтказЗаписи = Ложь;
			
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать значение настройки ""%1%"": %2%'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекСтрока.Настройка, ОписаниеОшибки());
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ОтказЗаписи);
			КонецПопытки;
			
			Если Не Отказ И ОтказЗаписи Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьЗаписьНастроекГруппировки()

#КонецОбласти
