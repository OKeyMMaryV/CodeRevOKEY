&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ЭлементыФормы.РегистрСведенийСписок.НастройкаПорядка.Аналитика1С.Доступность = Истина;	
	
КонецПроцедуры

&НаСервере
Функция ДействияФормыЗагрузитьАналитику_Сервер(Отказ)
	// Подключение к базе
	ЗапросАДО = ПодключениеКБазе();
	Если ЗапросАДО = Неопределено Тогда
		Отказ = Истина;
		Сообщить("Не установлено подключение");
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСтрока50 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50));
	ТипСтрока500 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(500));
	
	// Получение данных
	//Формирование запроса по статьям затрат
	ЗапросАДО.CommandText = "SELECT num, [description]
	//|  FROM [HyperOk_New].[dbo].[dimensions] (nolock) //***БИТ***Теплова***
	|  FROM ["+БазаДанных+"].[dbo].[dimensions] (nolock)  
	|where dataareaid = 'dat'
	|and dimensioncode = 3";
	
	//Выполнение запроса
	Выборка = ЗапросАДО.Execute(); 
	
	ТабСтатьиЗатрат = Новый Массив;
	МассивСтатейЗатрат = Новый Массив;
	
	Пока Не Выборка.EOF() Цикл 
	   //Сообщить(Выборка.Fields("RecNo").Value);
	   ТабСтатьиЗатрат.Добавить(Новый Структура("num,description", Выборка.Fields("num").Value, Выборка.Fields("description").Value));
	   МассивСтатейЗатрат.Добавить(Выборка.Fields("num").Value);
	   Выборка.MoveNext();
	КонецЦикла;	
	
	//Формирование запроса по статьям ДДС
	ЗапросАДО.CommandText = "SELECT num, [description]
	//|  FROM [HyperOk_New].[dbo].[dimensions] (nolock)  //***БИТ***Теплова***
	|  FROM ["+БазаДанных+"].[dbo].[dimensions] (nolock)  
	|where dataareaid = 'dat'
	|and dimensioncode = 2";
	
	//Выполнение запроса
	Выборка = ЗапросАДО.Execute(); 
	
	ТабСтатьиДДС = Новый Массив;
	МассивСтатейДДС = Новый Массив;
	
	Пока Не Выборка.EOF() Цикл 
	   //Сообщить(Выборка.Fields("RecNo").Value);
	   ТабСтатьиДДС.Добавить(Новый Структура("num,description", Выборка.Fields("num").Value, Выборка.Fields("description").Value));
	   МассивСтатейДДС.Добавить(Выборка.Fields("num").Value);
	   Выборка.MoveNext();
	КонецЦикла;	
	
	// Убрать те статьи которые уже есть в регистре

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ок_СопоставлениеАналитикиАксапты12.КодАналитикиАксапты
	               |ИЗ
	               |	РегистрСведений.бит_ок_СопоставлениеАналитикиАксапты12 КАК бит_ок_СопоставлениеАналитикиАксапты12
	               |ГДЕ
	               |	(бит_ок_СопоставлениеАналитикиАксапты12.КодАналитикиАксапты В (&СтатьиЗатрат)
	               |			ИЛИ бит_ок_СопоставлениеАналитикиАксапты12.КодАналитикиАксапты В (&СтатьиДДС))
	               |	И бит_ок_СопоставлениеАналитикиАксапты12.Организация = &Организация"; //***БИТ***Теплова***
	Запрос.УстановитьПараметр("СтатьиЗатрат", МассивСтатейЗатрат);
	Запрос.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
	Запрос.УстановитьПараметр("Организация", Организация);  //***БИТ***Теплова***
	МассивИсключений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодАналитикиАксапты");
	
	Возврат Новый Структура("ТабСтатьиЗатрат,ТабСтатьиДДС,МассивИсключений", ТабСтатьиЗатрат, ТабСтатьиДДС, МассивИсключений);
КонецФункции

&НаСервере
Функция ДействияФормыЗагрузитьАналитику_Сервер_1(ДанныеДляСозданияЗаписей)
		
	Для каждого текЭлемент из ДанныеДляСозданияЗаписей.МассивКодовСтатейЗатрат Цикл
		Запись = РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
		//***БИТ***Теплова***(
		//Запись.Организация = Справочники.Организации.НайтиПоКоду("000000045"); // ОКЕЙ
		Запись.Организация = Организация; // ОКЕЙ
		//***БИТ***Теплова***)
		Запись.КодАналитикиАксапты = текЭлемент;
		//Запись.Прочитать();
		Попытка
			Запись.Записать();
		Исключение
			Сообщить("Не удалось создать запись для " + текЭлемент);
		КонецПопытки;
	КонецЦикла;
	
	Для каждого текЭлемент из ДанныеДляСозданияЗаписей.МассивКодовСтатейДДС Цикл
		Запись = РегистрыСведений.бит_ок_СопоставлениеАналитикиАксапты12.СоздатьМенеджерЗаписи();
		//***БИТ***Теплова***(
		//Запись.Организация = Справочники.Организации.НайтиПоКоду("000000045"); // ОКЕЙ
		Запись.Организация = Организация; // ОКЕЙ
		//***БИТ***Теплова***)
		Запись.КодАналитикиАксапты = текЭлемент;
		//Запись.Прочитать();
		Попытка
			Запись.Записать();
		Исключение
			Сообщить("Не удалось создать запись для " + текЭлемент);
		КонецПопытки;
	КонецЦикла;
	
КонецФункции


&НаКлиенте
Процедура ДействияФормыЗагрузитьАналитику(Команда)
	Перем ТабСтатьиЗатрат, НовСтр, ТабСтатьиДДС, МассивИсключений;
	 //***БИТ***Теплова***(
	Форма = ПолучитьФорму("РегистрСведений.бит_ок_СопоставлениеАналитикиАксапты12.Форма.ФормаВыбораОрганизации",, ЭтаФорма);
	Организация = Форма.ОткрытьМодально();
		//Возврат;
	ЗаполнитьНастройки();
	//***БИТ***Теплова***)

	Отказ = Ложь;
	стМассивыАналитик = ДействияФормыЗагрузитьАналитику_Сервер(Отказ);
	Если Отказ = Истина Тогда
		Возврат
	КонецЕсли;
		
	//Вывод окна выбора
	Форма = ПолучитьФорму("РегистрСведений.бит_ок_СопоставлениеАналитикиАксапты12.Форма.ФормаВыбораСтатейЗатратИДДСДляДобавления",, ЭтаФорма);
	
	Для каждого Стр из стМассивыАналитик.ТабСтатьиЗатрат Цикл
		Если стМассивыАналитик.МассивИсключений.Найти(Стр.num) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = Форма.СтатьиЗатрат.Добавить();
		НовСтр.Код = Стр.num;
		НовСтр.Описание = Стр.description;
	КонецЦикла;
	
	Для каждого Стр из стМассивыАналитик.ТабСтатьиДДС Цикл
		Если стМассивыАналитик.МассивИсключений.Найти(Стр.num) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = Форма.СтатьиДДС.Добавить();
		НовСтр.Код = Стр.num;
		НовСтр.Описание = Стр.description;
	КонецЦикла;
	
	ДанныеДляСозданияЗаписей = Форма.ОткрытьМодально();
	
	Если ДанныеДляСозданияЗаписей <> Неопределено Тогда
		//Создание данных в регистрах
		ДействияФормыЗагрузитьАналитику_Сервер_1(ДанныеДляСозданияЗаписей);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодключениеКБазе()
	
	// соединение с базой
	СоединениеАДО = СоздатьСоединениеАДО(); 
	Если СоединениеАДО = Неопределено Тогда 
	   Сообщить("Не удалось СоздатьСоединениеАДО", СтатусСообщения.Важное); 
	   Возврат Неопределено; 
	КонецЕсли; 
	ЗапросАДО = СоздатьЗапросАДО(); 
	Если ЗапросАДО = Неопределено Тогда 
	   Сообщить("Не удалось СоздатьЗапросАДО", СтатусСообщения.Важное); 
	   Возврат Неопределено; 
	КонецЕсли; 
	Если Не ПодключитьсяАДОкБД(СоединениеАДО, ЗапросАДО) Тогда 
	   Сообщить("Не удалось ПодключитьсяАДОкБД", СтатусСообщения.Важное); 
	   Возврат Неопределено; 
	КонецЕсли; 
	
	ПодключеноКБазе = Истина;
	Возврат ЗапросАДО;
	
КонецФункции

/////////////////////////////////////
// Процедуры для соединения с SQL
/////////////////////////////////////

//Создать объект ADODB.Connection 
//Возврат: 
//   OLE - объект соединение или Неопределено 
&НаСервере
Функция СоздатьСоединениеАДО() Экспорт 
   Перем СоединениеАДО; 
   Попытка 
      СоединениеАДО = Новый COMОбъект("ADODB.Connection"); 
   Исключение 
      Сообщить("Не удалось создать объект ""ADODB.Connection""", СтатусСообщения.Важное); 
      Возврат Неопределено; 
   КонецПопытки; 
   //СоединениеАДО.ConnectionTimeOut = 20; 
   //СоединениеАДО.ConnectionTimeOut = 600; 
   //СоединениеАДО.CommandTimeOut = 600; 
   //СоединениеАДО.CursorLocation       = 3; 
   Возврат СоединениеАДО; 
КонецФункции //СоздатьСоединениеАДО() 

//Создать объект ADODB.Command 
//Возврат: 
//   OLE - объект запрос или Неопределено 
&НаСервере
Функция СоздатьЗапросАДО() Экспорт 
   Перем ЗапросАДО; 
   Попытка 
      ЗапросАДО = Новый COMОбъект("ADODB.Command");
	  ЗапросАДО.CommandTimeout = 500;
   Исключение 
      #Если Клиент Тогда 
      Сообщить("Не удалось создать объект ""ADODB.Command""", СтатусСообщения.Важное); 
      #КонецЕсли 
      Возврат Неопределено; 
   КонецПопытки; 
   Возврат ЗапросАДО; 
КонецФункции //СоздатьЗапросАДО() 

//СоединениеАДО (OLE) - соединение 
//ЗапросАДО (OLE)      - запрос 
//Возврат: 
//   Булево - удачно, нет 
&НаСервере
Функция ПодключитьсяАДОкБД(СоединениеАДО, ЗапросАДО)
	
   СтрокаСоединения = "driver={SQL Server};server="+Адрес+";uid="+Пользователь+";pwd="+Пароль+";Database="+БазаДанных; 
   //СтрокаСоединения = "driver=SQLOLEDB.1;server="+Адрес+";uid="+Пользователь+";pwd="+Пароль+";Database="+БазаДанных +";Connection Timeout=300"; 
   
   
   Попытка
	  СоединениеАДО.ConnectionTimeOut = 600;
	  //СоединениеАДО.CommandTimeOut = 600;
      СоединениеАДО.Open(СтрокаСоединения); 
   Исключение 
      Сообщить("Не удалось установить соединение с базой данных", СтатусСообщения.Важное); 
      Возврат Ложь; 
   КонецПопытки; 
    
   ЗапросАДО.ActiveConnection = СоединениеАДО; 
    
   Возврат Истина; 
    
КонецФункции // ПодключитьсяАДОкБД()

&НаСервере
Процедура ЗаполнитьНастройки()
	Если Организация = Справочники.Организации.НайтиПоКоду("000000045") Тогда
	    ЗаполнитьНастройкиОКЕЙ();
	ИначеЕсли Организация = Справочники.Организации.НайтиПоКоду("000000056") Тогда
		ЗаполнитьНастройкиОКЕЙ_Лоджистикс();
	Иначе
		//Предупреждение("Выберите организацию ""ОКЕЙ"" или ""ОКЕЙ Лоджистикс""!");
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОКЕЙ()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки,
	               |	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение
	               |ИЗ
	               |	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	               |ГДЕ
	               |	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа";
	Запрос.УстановитьПараметр("Группа", "ПараметрыСоединенияSQL");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИмяНастройки = "ИмяПользователя" Тогда
			Пользователь = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Пароль" Тогда
			Пароль = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "АдресСервера" Тогда
			Адрес = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "БазаДанных" Тогда
			БазаДанных = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОКЕЙ_Лоджистикс()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки,
	               |	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение
	               |ИЗ
	               |	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	               |ГДЕ
	               |	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа";
	Запрос.УстановитьПараметр("Группа", "ПараметрыСоединенияSQL");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИмяНастройки = "ИмяПользователя Лоджистикс" Тогда
			Пользователь = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "Пароль Лоджистикс" Тогда
			Пароль = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "АдресСервера Лоджистикс" Тогда
			Адрес = Выборка.Значение;
		ИначеЕсли Выборка.ИмяНастройки = "БазаДанных Лоджистикс" Тогда
			БазаДанных = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


//Параметры для соединения с SQL
//ЗаполнитьНастройки();  ***БИТ***Теплова***
ПодключеноКБазе = Ложь;