
#Область ОбработчикиСобытий

Функция GetServiceInfo(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/service_info/'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		Данные 		= ИнформацияОСервисе();
		Результат	= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода ServiceInfo.
										|Результат: %1'"); 
			ТекстСообщения = СтрШаблон(ТекстСообщения, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода ServiceInfo.
									|Описание ошибки: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция Ping(Запрос)
	
	Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
		ИмяСобытия = НСтр("ru = 'approval/v1/ping/'");
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода Ping.'");
		ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);
	КонецЕсли; 
	
	Возврат СформироватьОтветJSON("pong");
	
КонецФункции

Функция GetObjectTypes(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/object_types/'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		Данные 		= ПолучитьТипыОбъектовВизирования();
		Результат	= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода ObjectTypes.
										|Результат: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода ObjectTypes.
									|Описание ошибки: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция GetAssignmentOfAdditionalMeasurements(Запрос)

	ИмяСобытия = НСтр("ru = 'approval/v1/additional_measurements'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		Данные		= ПолучитьНазначенияДополнительныхИзмерений();
		Результат	= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода AssignmentOfAdditionalMeasurements.'");
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода AssignmentOfAdditionalMeasurements.
									|Описание ошибки: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция GetObjects(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/objects'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);
		Данные			= ПолучитьОбъекты(ПолученныеДанные);		
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода Objects.
										|Параметры: %1
										|Результат: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода Objects.
									|Параметры: %1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	   	   
	Возврат Результат;   
	   
КонецФункции

Функция SetDecisionList(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/decision_list'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);
		Данные			= УстановитьРешения(ПолученныеДанные.Objects, ПолученныеДанные.Decision);
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода DecisionList.
										|Параметры: %1
										|Результат: %2'");		
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода DecisionList.
									|Параметры: %1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);				
		Результат = Ложь;
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции

Функция GetObjectFileData(Запрос)

	ИмяСобытия = НСтр("ru = 'approval/v1/object_file_data'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);
		FileData		= ПолучитьДанныеФайлаОбъекта(ПолученныеДанные.Name, ПолученныеДанные.ID);		
		Результат		= СформироватьОтветJSON(FileData);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода ObjectFileData.
										|Параметры: %1
										|Результат: %2'");	
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка метода GetObjectFileData.
									|Параметры: %1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция RefreshToken(Запрос)
		
	ИмяСобытия = НСтр("ru = 'approval/v1/refresh_token'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);
		Данные			= ЗарегистрироватьУстройство(ПолученныеДанные.Token, ПолученныеДанные.DeviceId,
														ПолученныеДанные.OS, ПолученныеДанные.UserName);
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода RefreshToken.
										|Параметры: %1
										|Результат: %2'");	
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 		
	Исключение
		Результат = Новый Структура("code, message, error");
		Результат.code		= "500";
		Результат.message	= "Server error.";
		Результат.error		= "500";
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода RefreshToken.
									|Параметры: %1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);					
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

Функция GetAssignmentOfAdditionalMeasurementsForObjects(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/measurements_for_objects'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);
		Данные			= ПолучитьОбъектыСДопИзмерениями(ПолученныеДанные);
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода AssignmentOfAdditionalMeasurementsForObjects.
										|Параметры: %1
										|Результат: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода AssignmentOfAdditionalMeasurementsForObjects.
									|Параметры: %1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция GetTasks(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/tasks'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);
		Данные			= ПолучитьЗадачи(ПолученныеДанные.User);
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода Tasks.
										|Параметры: %1
										|Результат: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода Tasks.
									|Параметры: %1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция Task(Запрос)
	
	ИмяСобытия	= НСтр("ru = 'approval/v1/task'");
	Action		= Запрос.ПараметрыURL.Получить("Action");
	Результат	= Неопределено;
	Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода Task.
									|Действие: %1'");	
		ТекстСообщения = СтрШаблон(ТекстСообщения, Action); 
		ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
	КонецЕсли;
	
	Если СтрСравнить(Action, "accept") = 0 Тогда	
		Результат = AcceptTask(Запрос);		
	ИначеЕсли СтрСравнить(Action, "perform") = 0 Тогда
		Результат = PerformTask(Запрос);
	ИначеЕсли СтрСравнить(Action, "update") = 0 Тогда
		Результат = SaveTask(Запрос);
	ИначеЕсли СтрСравнить(Action, "create") = 0 Тогда
		Результат = CreateTask(Запрос); 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция AcceptTask(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/task/accept'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);	
		Данные			= ПринятьЗадачу(ПолученныеДанные.ID, ПолученныеДанные.Result);		
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода AcceptTask.
										|Параметры: %1
										|Результат: %2'");	
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода AcceptTask.
									|Параметры: %1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);				
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция PerformTask(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/task/perform'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);					
		Данные			= ВыполнитьЗадачу(ПолученныеДанные.ID, ПолученныеДанные.Result);
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода PerformTask.
										|Параметры: %1
										|Результат: %2'");	
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода PerformTask.
									|Параметры: %1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);				
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция SaveTask(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/task/update'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);					
		Данные			= ЗаписатьЗадачу(ПолученныеДанные.ID, ПолученныеДанные.Result);
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода SaveTask.
										|Параметры: %1
										|Результат: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода SaveTask.
									|Параметры: %1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);						
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция CreateTask(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/task/create'");
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);					
		Данные			= СоздатьЗадачу(ПолученныеДанные);
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда			
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода CreateTask.
										|Параметры: %1
										|Результат: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода CreateTask.
									|Параметры: %1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);		
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция GetObjectsForApproval(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/objects_for_approval'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);					
		Данные			= ПолучитьОбъектыВизирования(ПолученныеДанные.User, ПолученныеДанные.Objects, ПолученныеДанные.DateStart, ПолученныеДанные.DateFinish);		
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода GetObjectsForApproval.
										|Параметры: %1
										|Результат: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода GetObjectsForApproval.
									|Параметры: %1
									|Описание ошибки: %2'");	
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция GetUsers(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/users'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		Данные		= ПолучитьПользователей();
		Результат	= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода Users.
										|Результат: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода Users.
									|Описание ошибки: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

Функция GetApprovalDecisions(Запрос)

	ИмяСобытия = НСтр("ru = 'approval/v1/approval_decisions'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);							
		Данные			= ВидыРешенийСогласования(ПолученныеДанные);
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода ApprovalDecisions.
										|Результат: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода ApprovalDecisions.
									|Описание ошибки: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;	

КонецФункции 

Функция GetObjectTable(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/object_table'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);					
		Данные			= СформироватьТабличнуюЧастьHTML(ПолученныеДанные);		
		Результат		= СформироватьОтветHTML(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода GetObjectTable.
										|Параметры: %1
										|Результат: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода GetObjectTable.
									|Параметры: %1
									|Описание ошибки: %2'");	
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

Функция GetInternalObjectTable(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/internal_object_table'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);					
		Данные			= ДанныеТабличнойЧасти(ПолученныеДанные);		
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода GetInternalObjectTable.
										|Параметры: %1
										|Результат: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода GetInternalObjectTable.
									|Параметры: %1
									|Описание ошибки: %2'");	
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

Функция SetDecisionsInternalObjectTable(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/object_table_decisions'");
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);					
		Данные			= УстановитьРешенияПоСтрокам(ПолученныеДанные);		
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода SetDecisionsInternalObjectTable.
										|Параметры: %1
										|Результат: %2'");		
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода SetDecisionsInternalObjectTable.
									|Параметры: %1
									|Описание ошибки: %2'");		
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

Функция GetApprovalHistory(Запрос)	
	
	ИмяСобытия = НСтр("ru = 'approval/v1/approval_history'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);					
		Данные			= ИсторияВизирования(ПолученныеДанные.Id, ПолученныеДанные.Name);		
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода GetApprovalHistory.
										|Параметры: %1
										|Результат: %2'");		
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода GetApprovalHistory.
									|Параметры: %1
									|Описание ошибки: %2'");		
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

Функция GetBudgetBalances(Запрос)

	ИмяСобытия = НСтр("ru = 'approval/v1/budget_balances'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);
		
		Данные			= ПолучитьОстаткиПоБюджету(ПолученныеДанные);
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода BudgetBalances.
										|Результат: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода BudgetBalances.
									|Описание ошибки: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;	

КонецФункции 

Функция HistoryApproval(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/history_approval'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);					
		Данные			= ПолучитьИсториюВизированияОбъектов(ПолученныеДанные);		
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода HistoryApproval.
										|Параметры: %1
										|Результат: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода HistoryApproval.
									|Параметры: %1
									|Описание ошибки: %2'");	
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Функция GetStatuses(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/Get_Statuses'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON	= Запрос.ПолучитьТелоКакСтроку();
		Данные		= ПолучитьСтатусы();		
		Результат	= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода GetStatuses.
										|Параметры: %1
										|Результат: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода GetStatuses.
									|Параметры: %2
									|Описание ошибки: %2'");	
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Функция SetDecisionListDifferentStatuses(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/DecisionListDifferentStatuses'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);
		Данные			= УстановитьРешенияГрупповое(ПолученныеДанные);
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода SetDecisionListDifferentStatuses.
										|Параметры: %1
										|Результат: %2'");		
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода SetDecisionListDifferentStatuses.
									|Параметры:%1
									|Описание ошибки: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);				
		Результат = Ложь;
	КонецПопытки;	
	
	Возврат Результат;

КонецФункции

Функция GetObject(Запрос)
	
	ИмяСобытия = НСтр("ru = 'approval/v1/object'", ОбщегоНазначения.КодОсновногоЯзыка());
	Попытка
		ЗапросJSON		= Запрос.ПолучитьТелоКакСтроку();
		ПолученныеДанные= ЗначениеИзСтрокиJSON(ЗапросJSON);					
		Данные			= ПолучитьОбъектПоИдентификатору(ПолученныеДанные);		
		Результат		= СформироватьОтветJSON(Данные);
		Если Константы.бит_РежимОтладкиВебСервисов.Получить() Тогда
			ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода GetObject.
										|Параметры: %1
										|Результат: %2'");		
			ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, Результат); 
			ЗарегистрироватьИнформацию(ИмяСобытия, ТекстСообщения);				
		КонецЕсли; 
	Исключение
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода GetObject.
									|Параметры: %1
									|Описание ошибки: %2'");		
		ТекстСообщения = СтрШаблон(ТекстСообщения, ЗапросJSON, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Визирование

Функция ПолучитьТипыОбъектовВизирования()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыВизирования.ОбъектСистемы КАК ОбъектСистемы,
	|	ОбъектыВизирования.ОбъектСистемы.Наименование КАК Наименование,
	|	ОбъектыВизирования.ОбъектСистемы.ИмяОбъектаПолное КАК ИмяОбъектаПолное,
	|	ОбъектыВизирования.Синоним КАК Синоним,
	|	ДопАналитики.Аналитика КАК Аналитика
	|ИЗ
	|	РегистрСведений.бит_ОбъектыМобильногоВизирования КАК ОбъектыВизирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначениеДополнительныхАналитик КАК ДопАналитики
	|		ПО ОбъектыВизирования.ОбъектСистемы = ДопАналитики.Объект
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Аналитика)
	|ПО
	|	ОбъектСистемы";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаОбъектСистемы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	ФильтрПоОтображениюОстатков = ПолучитьСписокТиповОбъектовДляОтображенияОстатков(ЭтоЕРП);
	ФильтрПоОтображениюТабЧастей = ПолучитьСписокТиповОбъектовДляОтображенияТабличныхЧастей(ЭтоЕРП);
	
	МассивОбъектов = Новый Массив;
	Пока ВыборкаОбъектСистемы.Следующий() Цикл
		
		ОбъектСистемы = Новый Структура;
		ОбъектСистемы.Вставить("Name");
		ОбъектСистемы.Вставить("Title");
		ОбъектСистемы.Вставить("Synonim");
		ОбъектСистемы.Вставить("ShowBudgetBalances");
		ОбъектСистемы.Вставить("ShowTabularSection");
		ОбъектСистемы.Вставить("Properties");
		
		ИмяОбъекта = ВыборкаОбъектСистемы.ИмяОбъектаПолное;
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "Документ.", "ДокументСсылка.");
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "Справочник.", "СправочникСсылка.");
		
		ОбъектСистемы.Name = ИмяОбъекта;
		ОбъектСистемы.Title	= ВыборкаОбъектСистемы.Наименование;
		ОбъектСистемы.ShowBudgetBalances = ФильтрПоОтображениюОстатков.Найти(ИмяОбъекта) <> Неопределено;
		ОбъектСистемы.ShowTabularSection = ФильтрПоОтображениюТабЧастей.Найти(ИмяОбъекта) <> Неопределено;
		
		МассивАналитик	= Новый Массив;
		ВыборкаДЗ		= ВыборкаОбъектСистемы.Выбрать();
		Пока ВыборкаДЗ.Следующий() Цикл
			Синоним = ВыборкаДЗ.Синоним;
			Если ЗначениеЗаполнено(ВыборкаДЗ.Аналитика) Тогда
				АналитикаСсылка		= ВыборкаДЗ.Аналитика;
				УИДСтрока			= Строка(АналитикаСсылка.УникальныйИдентификатор());
				АналитикаСтруктура	= Новый Структура("Id, Description", УИДСтрока, СокрЛП(АналитикаСсылка.Наименование));
				МассивАналитик.Добавить(АналитикаСтруктура);
			КонецЕсли;
		КонецЦикла;
		ОбъектСистемы.Synonim	= Синоним;
		ОбъектСистемы.Properties= МассивАналитик;
		МассивОбъектов.Добавить(ОбъектСистемы);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивОбъектов;
	
КонецФункции

Функция ПолучитьОбъекты(МассивДанных)
	
	Если НЕ ТипЗнч(МассивДанных) = Тип("Массив") Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);	
    ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	
	РезультатМассив	= Новый Массив;
	Для каждого Строка Из МассивДанных Цикл
		ТипОбъекта				= Строка.ObjectType;
		МассивIDs				= Строка.IDsArray;
		РезультатМассивОбъектов	= Новый Массив;
		Для каждого СтрокаId Из МассивIDs Цикл
			
			ОбъектСсылка = ПолучитьСсылку(ТипОбъекта, СтрокаId);
			Если ОбъектСсылка = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			МетаОбъект		= ОбъектСсылка.Метаданные();
			СтатусСтруктура	= бит_Визирование.ПолучитьСтатусОбъекта(ОбъектСсылка);
			Статус			= Строка(СтатусСтруктура.Статус);
			
			ЭлементСтруктура = Новый Структура;
			ЭлементСтруктура.Вставить("ID",	СтрокаId); 
			ЭлементСтруктура.Вставить("Date",				Формат(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Дата"), "ДЛФ=D"));
			ЭлементСтруктура.Вставить("Number",				ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Номер"));
			ЭлементСтруктура.Вставить("Company",			Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Организация"))); 
			ЭлементСтруктура.Вставить("Department",			Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "ЦФО"))); 
			ЭлементСтруктура.Вставить("TurnoverItem",		Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "СтатьяОборотов")));
			ЭлементСтруктура.Вставить("Project",			Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Проект")));
			ЭлементСтруктура.Вставить("Partner",			Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Контрагент")));
			ЭлементСтруктура.Вставить("Contract",			Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "ДоговорКонтрагента")));
			ЭлементСтруктура.Вставить("PaymentDate",		Формат(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "ДатаРасхода"), "ДЛФ=D"));
			ЭлементСтруктура.Вставить("Amount",				Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "СуммаДокумента")));
			ЭлементСтруктура.Вставить("Currency",			Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "ВалютаДокумента")));
			ЭлементСтруктура.Вставить("ManagerialPurpose",	Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "НазначениеПлатежаУпр")));
			ЭлементСтруктура.Вставить("Status",				Строка(Статус));
			ЭлементСтруктура.Вставить("ResponsiblePerson",	Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Ответственный")));
			Если ЭтоЕРП Тогда
				ЭлементСтруктура.Вставить("Executor",		Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Инициатор")));
			Иначе	
				ЭлементСтруктура.Вставить("Executor",		Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Исполнитель")));
			КонецЕсли;
			ЭлементСтруктура.Вставить("Scenario",			Строка(ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Сценарий")));
			ЭлементСтруктура.Вставить("Comment",			ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Комментарий"));
			
			OverBudget	= ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, "Сверхбюджета");
			ЭлементСтруктура.Вставить("OverBudget",			?(ТипЗнч(OverBudget) = Тип("Булево"), OverBudget, Ложь));
			ЭлементСтруктура.Вставить("AvailableVisas",		СформироватьДоступныеВизы(ОбъектСсылка));
			РезультатМассивОбъектов.Добавить(ЭлементСтруктура);
		КонецЦикла;
		
		РезультатСтруктура = Новый Структура("ObjectType, ObjectsArray", ТипОбъекта, РезультатМассивОбъектов);
		РезультатМассив.Добавить(РезультатСтруктура);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатМассив;
	
КонецФункции

// Функция устанавливает решения по указанным объектам.
//
// Параметры:
//   Objects - Строка - Имена типов объектов визирования
//   Decision - Строка
//
// Возвращаемое значение:
//  флНеобходимоОбновить - Булево 
// ИЛИ
// список Id документов с пустыми комментариями, если установлена необходимость заполнения Комментария
Функция УстановитьРешения(Objects, Decision)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	флНеобходимоОбновить = Ложь;
	Если ЗначениеЗаполнено(Decision) Тогда		
		Решение = Справочники.бит_ВидыРешенийСогласования.НайтиПоНаименованию(Decision);		
	Иначе			
		Решение = Справочники.бит_ВидыРешенийСогласования.ПустаяСсылка();		
	КонецЕсли; 
	
	// Инициализация таблицы документов.
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Выполнять",			Новый ОписаниеТипов("Булево"));
	ТаблицаДокументы.Колонки.Добавить("ЕстьНеустановленные",Новый ОписаниеТипов("Булево"));
	ТаблицаДокументы.Колонки.Добавить("Ссылка");
	ТаблицаДокументы.Колонки.Добавить("ТипДокумента");
	ТаблицаДокументы.Колонки.Добавить("Организация",		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДокументы.Колонки.Добавить("Комментарий",		Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("Id",					Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("ПолноеИмяОбъекта",	Новый ОписаниеТипов("Строка"));
	
	ОбъектВизирования 	= Неопределено;
	
	// Разбор полученных данных и заполнение таблицы документов.
	Если Решение.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Решение ""%1"" не найдено.'; en = 'Решение ""%1"" не найдено.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Decision); 
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Для каждого Модель Из Objects Цикл
		МенеджерКоллекции 	= бит_ОбщегоНазначения.ПолучитьМенеджер(Модель.CollectionName);
		МенеджерОбъекта		= МенеджерКоллекции[Модель.ObjectName];
		Ссылка 				= МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(Модель.ID));
		ОбъектВизирования 	= Ссылка;
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			МетаОбъект 						= Ссылка.Метаданные();
			НоваяСтрока 					= ТаблицаДокументы.Добавить();
			НоваяСтрока.Выполнять 			= Истина;
			НоваяСтрока.ЕстьНеустановленные = Истина;
			НоваяСтрока.Ссылка 				= Ссылка;
			НоваяСтрока.ТипДокумента 		= ТипЗнч(Ссылка);
			НоваяСтрока.Комментарий			= Модель.Comment;
			НоваяСтрока.Id					= Модель.Id;
			НоваяСтрока.ПолноеИмяОбъекта	= Ссылка.Метаданные().ПолноеИмя();
			
			Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаОбъект) Тогда
				НоваяСтрока.Организация = Ссылка.Организация;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; // Массив для обработки.
	
	// Проверяем установлен ли комментарий, либо создана ли задача.
	МассивСПустымиКомментариями = Новый Массив;
	ТекНаборВизы		= РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	ТаблицаВизыПустая 	= ТекНаборВизы.Выгрузить();
	ТаблицаВизыОбщая 	= Обработки.бит_РабочееМестоВизирования.ПолучитьОбщуюТаблицуВиз(ТаблицаДокументы.ВыгрузитьКолонку("Ссылка"));
	Для Каждого Строка Из ТаблицаДокументы Цикл
		Если НеобходимКомментарийЗадачаПолнаяПроверка(Строка.Организация, Строка.ПолноеИмяОбъекта, Решение) Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Комментарий) Тогда
				Виза = ПолучитьТекущуюВизу(Строка.Ссылка, ТаблицаВизыОбщая, ТаблицаВизыПустая);
				Если НЕ ЕстьЗадачиПоДокументу(Строка.Ссылка, Виза) Тогда
					МассивСПустымиКомментариями.Добавить(Новый Структура("Id", Строка.Id));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСПустымиКомментариями.Количество() > 0 Тогда
		Возврат МассивСПустымиКомментариями;	
	КонецЕсли;
	
	// Подготовка параметров.
	ДоступныеРешения = Новый СписокЗначений;
	ТаблицаРешения = Обработки.бит_РабочееМестоВизирования.ПолучитьТаблицуДоступныхРешений(ТаблицаДокументы, ДоступныеРешения);
	
	СтрНастройки = Новый Структура;
	СтрНастройки.Вставить("РежимФильтраВиз",			3);
	СтрНастройки.Вставить("КомментироватьВыполнение",	Ложь);
	СтрНастройки.Вставить("Решение",					Решение);
	
	// Выполнение установки решений.
	флНеобходимоОбновить= Обработки.бит_РабочееМестоВизирования.УстановитьРешения(ТаблицаДокументы, ТаблицаРешения, СтрНастройки);
	
	// Получить визы доступные после установки.
	ТекПользователь 	= Пользователи.ТекущийПользователь();
	СтруктураОтбор 		= Новый Структура("Объект", ОбъектВизирования);
	НаборВиз 			= бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	ТаблицаВизы			= НаборВиз.Выгрузить();
	СписокДоступныхВиз 	= ДоступныеВизы(ОбъектВизирования);
	РезСтрока 			= СериализоватьСписокВиз(СписокДоступныхВиз);
	ИмяСобытия			= НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода DecisionList'");
	ЗарегистрироватьИнформацию(ИмяСобытия, РезСтрока);				
	
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат РезСтрока;
	
КонецФункции

Функция УстановитьРешенияПоСтрокам(ПолученныеДанные)
	
	Возврат Истина;
	
КонецФункции
 
Функция ПолучитьТекущуюВизу(ДокументСсылка, ТаблицаВизыОбщая, ТаблицаВизыПустая)
	
	ТекущийПользователь  	= Пользователи.ТекущийПользователь();
	МассивДоступныеПустые	= ПолучитьМассивДоступныхВиз(ТекущийПользователь, ДокументСсылка, ТаблицаВизыОбщая, ТаблицаВизыПустая);	
	
	ТекущаяВиза = Неопределено;
	Если МассивДоступныеПустые.Количество() > 0 Тогда
		ТекущаяВиза = МассивДоступныеПустые[0];
	КонецЕсли;
	
	Возврат ТекущаяВиза;
	
КонецФункции

Функция ЗарегистрироватьУстройство(Token, DeviceId, OS, UserName)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекПользователь	= НайтиПользователя(UserName);
	МобУстройство	= Справочники.бит_МобильныеУстройства.НайтиПоРеквизиту("ИД", DeviceId);
	
	Если НЕ ЗначениеЗаполнено(МобУстройство) Тогда
		// Создаем новое мобильное устройство.
		МобУстройствоОб 		= Справочники.бит_МобильныеУстройства.СоздатьЭлемент();
		МобУстройствоОб.ИД 		= DeviceId;
		МобУстройствоОб.Токен 	= Token;
		
		Если НЕ Метаданные.Перечисления.бит_МобильныеОперационныеСистемы.ЗначенияПеречисления.Найти(OS)= Неопределено Тогда			
			ОС = Перечисления.бит_МобильныеОперационныеСистемы[OS];			
		Иначе			
			ОС = Перечисления.бит_МобильныеОперационныеСистемы.android;			
		КонецЕсли;
		
		МобУстройствоОб.ОперационнаяСистема =  ОС;
		МобУстройствоОб.Наименование = Строка(ОС) + " " + Строка(DeviceId);			
		МобУстройствоОб.ДатаРегистрации = ТекущаяДатаСеанса();
		МобУстройствоОб.УстановитьНовыйКод();
		
		флУстройствоСоздано	= бит_ОбщегоНазначения.ЗаписатьСправочник(МобУстройствоОб,"","Ошибки",Истина);
		
		Если флУстройствоСоздано Тогда			
			МобУстройство = МобУстройствоОб.Ссылка;			
		КонецЕсли; 
	Иначе	
		// Устройство было создано ранее.
		МобУстройствоОб 				= МобУстройство.ПолучитьОбъект();
		МобУстройствоОб.Токен 			= Token;
		МобУстройствоОб.ПометкаУдаления = Ложь;
		ЗаписатьТокен 					= бит_ОбщегоНазначения.ЗаписатьСправочник(МобУстройствоОб, "", "Ошибки", Истина);
		флУстройствоСоздано 			= Истина;
	КонецЕсли; 

	флУстройствоНазначено = Ложь;
	Если ЗначениеЗаполнено(ТекПользователь) Тогда
		Если флУстройствоСоздано Тогда
			
			// Назначим устройство пользователю.
			МенеджерЗаписи = РегистрыСведений.бит_УстройстваПользователей.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь		= ТекПользователь;
			МенеджерЗаписи.Устройство		= МобУстройство;
			МенеджерЗаписи.ДатаПодключения	= ТекущаяДатаСеанса();
			
			Попытка
				МенеджерЗаписи.Записать();
				флУстройствоНазначено 	= Истина;
			Исключение
				
				ИмяСобытия = НСтр("ru = 'Регистрация устройства пользователя из мобильного приложения'", ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстСообщения = НСтр("ru = 'Ошибка назначения устройства пользователю.
											|Описание ошибки: %1'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);					
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли; 
	
	РезультатСтруктура = Новый Структура("code, message, error");
	
	Если флУстройствоСоздано И флУстройствоНазначено Тогда
		РезультатСтруктура.code		= "200";
		РезультатСтруктура.message	= "New device created and assigned to user.";
		РезультатСтруктура.error	= "0";
	ИначеЕсли НЕ флУстройствоСоздано Тогда
		РезультатСтруктура.code		= "500";
		РезультатСтруктура.message	= "Cannot create device.";
		РезультатСтруктура.error	= "1";
	ИначеЕсли НЕ флУстройствоНазначено Тогда	
		РезультатСтруктура.code		= "500";
		Если НЕ ЗначениеЗаполнено(ТекПользователь) Тогда
			РезультатСтруктура.message	= "Cannot find the user.";
			РезультатСтруктура.error	= "2";			
		Иначе	
			РезультатСтруктура.message	= "Cannot assign device to user.";
			РезультатСтруктура.error	= "3";
		КонецЕсли; 
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат РезультатСтруктура;
	
КонецФункции

// Функция получает объекты визирования с помощью обработки бит_РабочееМестоВизирования.
//
// Параметры:
//   User - Строка - Пользователь для которого получаем список объектов визирования
//   Objects - Строка - Имена типов объектов визирования, которые анализируем
//   DateStart - ДатаВремя
//   DateFinish - ДатаВремя
//
// Возвращаемое значение:
//  ЗначениеСписок - ОбъектXDTO.
Функция ПолучитьОбъектыВизирования(User, Objects, DateStart, DateFinish)
  
	ТекПользователь	= НайтиПользователя(User);
	DateStart		= СтрокаВДату(DateStart);
	DateFinish		= КонецДня(СтрокаВДату(DateFinish));
	
	Если НЕ ЗначениеЗаполнено(ТекПользователь) Тогда
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода GetObjectsForApproval.
									|Не удалось найти пользователя по имени: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, User);
		ИмяСобытия = НСтр("ru = 'approval/v1/objects_for_approval'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);	
	КонецЕсли; 
    
    ПараметрыСеанса.бит_ИдентификаторСеанса = Новый УникальныйИдентификатор;						 			
	
	ОбъектыСистемы = Новый СписокЗначений;	
	Если ТипЗнч(Objects) = Тип("Строка") И НЕ ПустаяСтрока(Objects) Тогда
		МассивТипов = бит_ОбщегоНазначенияКлиентСервер.ПолучитьТипыИзСтроки(Objects);
		Если МассивТипов.Количество()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		ТипыОбъектов = Новый СписокЗначений();
		ТипыОбъектов.ЗагрузитьЗначения(МассивТипов);
	КонецЕсли; 
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, Новый УникальныйИдентификатор); 
	МатрицаДоступа = Обработки.бит_КонсольОперативногоВизирования.МатрицаДоступа();
	ТипыОбъектовВизирования = Метаданные.ОпределяемыеТипы.бит_ОбъектыВизирования.Тип;
	ДанныеТабличногоДокумента = Новый ТаблицаЗначений();
	ДанныеТабличногоДокумента.Колонки.Добавить("Обрабатывать",		Новый ОписаниеТипов("Булево"));
	ДанныеТабличногоДокумента.Колонки.Добавить("ОбъектВизирования", ТипыОбъектовВизирования);
	ДанныеТабличногоДокумента.Колонки.Добавить("ИД",				ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ДанныеТабличногоДокумента.Колонки.Добавить("Виза",				Новый ОписаниеТипов("СправочникСсылка.бит_Визы"));
	ДанныеТабличногоДокумента.Колонки.Добавить("Организация",		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеТабличногоДокумента.Колонки.Добавить("ОбъектСистемы",		Новый ОписаниеТипов("СправочникСсылка.бит_ОбъектыСистемы"));
	ДанныеТабличногоДокумента.Колонки.Добавить("НомерПП",			ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ДанныеТабличногоДокумента.Колонки.Добавить("ПринятоеРешение",	Новый ОписаниеТипов("СправочникСсылка.бит_ВидыРешенийСогласования"));
	
	ПараметрыПолучения = Обработки.бит_КонсольОперативногоВизирования.НовыеПараметрыЗаполненияТаблицыВизирования();
	ПараметрыПолучения.МатрицаДоступа			= МатрицаДоступа;
	ПараметрыПолучения.ДанныеТабличногоДокумента= ДанныеТабличногоДокумента;
	ПараметрыПолучения.ТипРезультата			= Новый ОписаниеТипов("ТаблицаЗначений");
	ПараметрыПолучения.ЭтоМобильноеПриложение	= Истина;
	ПараметрыПолучения.ТипыОбъектовВизирования	= ТипыОбъектов;

	Обработки.бит_КонсольОперативногоВизирования.ЗаполнитьТаблицуВизирования(ПараметрыПолучения, АдресВХранилище);	
	
	Результат = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ТаблицаДокументов = Результат.Результат;
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение сведений о прикрепленных файлах.
	ПрикрепленныеФайлы	= Новый Соответствие;
	флЕстьФайлыБСП		= бит_РаботаСМетаданными.ЕстьСправочник("ВерсииФайлов") И бит_РаботаСМетаданными.ЕстьСправочник("Файлы");
	
	Если флЕстьФайлыБСП Тогда
		  МассивДокументов 		= ТаблицаДокументов.ВыгрузитьКолонку("ОбъектВизирования");
		  МассивДокументов 		= бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивДокументов);
		  ПрикрепленныеФайлы	= ПолучитьИнформациюФайлов(МассивДокументов);
	КонецЕсли;  // Есть подсистема файлов БСП.
	
	РезультатМассив	= Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОбъектВизирования) Тогда	
			Продолжить;		
		КонецЕсли; 
		Element = ЗаполнитьОбъектВизирования(СтрокаТаблицы, ПрикрепленныеФайлы);
		РезультатМассив.Добавить(Element);		
	КонецЦикла; 
			
	УстановитьПривилегированныйРежим(Ложь);
  
  	Возврат РезультатМассив;
  	
КонецФункции
 
Функция ЗаполнитьОбъектВизирования(СтрокаТаблицы, ПрикрепленныеФайлы, ЭтоЗадача = Ложь)
	
	СтрВизы = "";
	ВизаИД = "";
	Для каждого Виза Из СтрокаТаблицы.ВизаСмешанная Цикл
		СтрВизы = СтрВизы +?(ПустаяСтрока(СтрВизы),"",", ")+ Строка(Виза);
		Если ЗначениеЗаполнено(Виза) Тогда			
			ВизаИД = XMLСтрока(Виза);			
		КонецЕсли; 
	КонецЦикла; 

	ЭтоЕРП		= бит_ОбщегоНазначения.ЭтоСемействоERP();
	МетаОбъект 	= СтрокаТаблицы.ОбъектВизирования.Метаданные();
	Имена 		= бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(МетаОбъект.ПолноеИмя());
	
	ObjectModel	= Новый Структура("ID, ObjectName, CollectionName");
	ObjectModel.ID             	= XMLСтрока(СтрокаТаблицы.ОбъектВизирования);
	ObjectModel.ObjectName     	= Имена.ИмяОбъекта;
	ObjectModel.CollectionName 	= Имена.ИмяКоллекции;
	
	ObjectInfo = Новый Структура;
	ObjectInfo.Вставить("Company",			Строка(СтрокаТаблицы.Организация));
	ObjectInfo.Вставить("Department",		СтрСоединить(СтрокаТаблицы.ЦФОСмешанная, ", "));
	ObjectInfo.Вставить("TurnoverItem",		СтрСоединить(СтрокаТаблицы.СтатьяОборотовСмешанная, ", "));
	ObjectInfo.Вставить("Partner",			Строка(СтрокаТаблицы.ОбъектВизированияКонтрагентОбъекта));
	
	Если ЭтоЕРП Тогда
		ObjectInfo.Вставить("Executor",		Строка(СтрокаТаблицы.Инициатор));
	Иначе	
		ObjectInfo.Вставить("Project",		Строка(СтрокаТаблицы.ОбъектВизированияПроектОбъекта));
		ObjectInfo.Вставить("Contract",		Строка(СтрокаТаблицы.ОбъектВизированияДоговорКонтрагентаОбъекта));
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектВизированияДатаРасходаОбъекта) Тогда
			ObjectInfo.Вставить("PaymentDate", ?(ЭтоЗадача, СтрокаТаблицы.ОбъектВизированияДатаРасходаОбъекта, Формат(СтрокаТаблицы.ОбъектВизированияДатаРасходаОбъекта, "ДЛФ=D")));
		Иначе
			ObjectInfo.Вставить("PaymentDate", "");
		КонецЕсли;
		ObjectInfo.Вставить("Executor",		Строка(СтрокаТаблицы.ОбъектВизированияИсполнительОбъекта));
	КонецЕсли;
	
	ObjectInfo.Вставить("Amount",			Формат(СтрокаТаблицы.СуммаДокумента, "ЧГ="));
	ObjectInfo.Вставить("Currency",			Строка(СтрокаТаблицы.ВалютаДокумента));
	ObjectInfo.Вставить("ManagerialPurpose",Строка(СтрокаТаблицы.ОбъектВизированияНазначениеПлатежаУпрОбъекта));
	ObjectInfo.Вставить("OverBudget",		?(ЗначениеЗАполнено(СтрокаТаблицы.ОбъектВизированияОбъектСверхБюджета),СтрокаТаблицы.ОбъектВизированияОбъектСверхБюджета,Ложь));
	ObjectInfo.Вставить("Status",			Строка(СтрокаТаблицы.Статус));
	ObjectInfo.Вставить("ResponsiblePerson",Строка(СтрокаТаблицы.ОбъектВизированияОтветственныйОбъекта));
	ObjectInfo.Вставить("Scenario",			Строка(СтрокаТаблицы.ОбъектВизированияСценарийОбъекта));
	ObjectInfo.Вставить("Comment",			СтрокаТаблицы.ОбъектВизированияКомментарийОбъекта);
	ObjectInfo.Вставить("Date",				?(ЭтоЗадача, СтрокаТаблицы.ОбъектВизированияДатаОбъекта, Формат(СтрокаТаблицы.ОбъектВизированияДатаОбъекта, "ДЛФ=D")));
	ObjectInfo.Вставить("Number",			СтрокаТаблицы.ОбъектВизированияНомерОбъекта);
	ObjectInfo.Вставить("AdditionalProps",	ПолучитьМассивДополнительныхРеквизитовОбъекта(СтрокаТаблицы.ОбъектВизирования));
	ObjectInfo.Вставить("UseInternalTables",ИспользоватьВнутреннююТаблицу(СтрокаТаблицы.ОбъектВизирования));
	
	Element = Новый Структура;		
	Element.Вставить("Visas",              	СтрВизы);
	Element.Вставить("VisasID",           	ВизаИД);		
	Element.Вставить("ObjectModel",        	ObjectModel);
	Element.Вставить("ObjectInfo",			ObjectInfo);
	Element.Вставить("ApplicationReestr",	Неопределено);
	Element.Вставить("Files",				Неопределено);
	
	// Данные реестра платежей.
	Если ЭтоЕРП Тогда
		Если Имена.ИмяОбъекта = Метаданные.Документы.бит_кзн_РеестрПлатежей.Имя Тогда
			ApplicationReestr = Новый Структура("ID, Number, Date, Company, Comment, Applications");
			ApplicationReestr.ID 		= XMLСтрока(СтрокаТаблицы.ОбъектВизирования);
			ApplicationReestr.Number 	= СтрокаТаблицы.ОбъектВизированияНомерОбъекта;
			ApplicationReestr.Date   	= СтрокаТаблицы.ОбъектВизированияДатаОбъекта;
			ApplicationReestr.Company   = Строка(СтрокаТаблицы.Организация);
			ApplicationReestr.Comment   = СтрокаТаблицы.ОбъектВизированияКомментарийОбъекта;
			ApplicationReestr.Applications	= Новый Массив;
			Для каждого СтрокаРеестр Из СтрокаТаблицы.ОбъектВизирования.ТаблицаПлатежи Цикл
				ApplicationRow	= Новый Структура("RowNumber, ApplicationID, ApplicationPresentation, Amount, Currency");
				ApplicationRow.RowNumber           		= СтрокаРеестр.НомерСтроки;
				ApplicationRow.ApplicationID       		= XMLСтрока(СтрокаРеестр.ПлатежнаяПозиция);
				ApplicationRow.ApplicationPresentation	= Строка(СтрокаРеестр.ПлатежнаяПозиция);
				ApplicationRow.Amount   				= Формат(СтрокаРеестр.СуммаКОплате, "ЧГ=");
				ApplicationRow.Currency 				= Строка(СтрокаРеестр.ВалютаПлатежа);
				ApplicationReestr.Applications.Add(ApplicationRow);
			КонецЦикла; 
			Element.ApplicationReestr	= ApplicationReestr;
		КонецЕсли;
	Иначе
		Если Имена.ИмяОбъекта = Метаданные.Документы.бит_РеестрПлатежей.Имя Тогда
			ApplicationReestr = Новый Структура("ID, Number, Date, Company, Comment, Applications");
			ApplicationReestr.ID 		= XMLСтрока(СтрокаТаблицы.ОбъектВизирования);
			ApplicationReestr.Number 	= СтрокаТаблицы.ОбъектВизированияНомерОбъекта;
			ApplicationReestr.Date   	= СтрокаТаблицы.ОбъектВизированияДатаОбъекта;
			ApplicationReestr.Company 	= Строка(СтрокаТаблицы.Организация);
			ApplicationReestr.Comment 	= СтрокаТаблицы.ОбъектВизированияКомментарийОбъекта;
			ApplicationReestr.Applications	= Новый Массив;
			Для каждого СтрокаРеестр Из СтрокаТаблицы.ОбъектВизирования.Заявки Цикл
				ApplicationRow	= Новый Структура("RowNumber, ApplicationID, ApplicationPresentation, Amount, Currency");
				ApplicationRow.RowNumber           		= СтрокаРеестр.НомерСтроки;
				ApplicationRow.ApplicationID       		= XMLСтрока(СтрокаРеестр.Заявка);
				ApplicationRow.ApplicationPresentation	= Строка(СтрокаРеестр.Заявка);
				ApplicationRow.Amount   				= Формат(СтрокаРеестр.Сумма, "ЧГ=");
				ApplicationRow.Currency 				= Строка(СтрокаРеестр.Валюта);
				ApplicationReestr.Applications.Add(ApplicationRow);
			КонецЦикла; 
			Element.ApplicationReestr = ApplicationReestr;
		КонецЕсли;      
	КонецЕсли; // ЭтоERP.
	
	// Данные о файлах.
	МассивФайлов	= ПрикрепленныеФайлы[СтрокаТаблицы.ОбъектВизирования];
	Element.Files	= Новый Массив;
	Если ТипЗнч(МассивФайлов) = Тип("Массив") Тогда
		Для каждого ДанныеФайла Из МассивФайлов Цикл
			FileInfo = Новый Структура;
			FileInfo.Вставить("Name",		ДанныеФайла.Наименование);
			FileInfo.Вставить("DateChanged",ДанныеФайла.ДатаМодификацииФайла);
			FileInfo.Вставить("ID",  		ДанныеФайла.ИдФайла);
			FileInfo.Вставить("VersionID",  ДанныеФайла.ИдВерсии);
			FileInfo.Вставить("Ext",		ДанныеФайла.Расширение);
			FileInfo.Вставить("Size",		ДанныеФайла.Размер);
			Element.Files.Добавить(FileInfo);
		КонецЦикла; //МассивФайлов.
	КонецЕсли; // Есть прикрепленные файлы.
	
	Возврат Element;
	
КонецФункции

Функция ОбъектВизирования(СтрокаТаблицы, ПрикрепленныеФайлы, ЭтоЗадача = Ложь)
	
	СтрВизы = "";
	ВизаИД = "";
	Для каждого Виза Из СтрокаТаблицы.ДоступныеНеустановленныеВизы Цикл
		СтрВизы = СтрВизы +?(ПустаяСтрока(СтрВизы),"",", ")+ Строка(Виза);
		Если ЗначениеЗаполнено(Виза.Значение) Тогда			
			ВизаИД = Строка(Виза.Значение.УникальныйИдентификатор());			
		КонецЕсли; 
	КонецЦикла; 
	
	ЭтоЕРП		= бит_ОбщегоНазначения.ЭтоСемействоERP();
	МетаОбъект 	= СтрокаТаблицы.Ссылка.Метаданные();
	Имена 		= бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(МетаОбъект.ПолноеИмя());
	
	ObjectModel	= Новый Структура("ID, ObjectName, CollectionName");
	ObjectModel.ID             	= Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
	ObjectModel.ObjectName     	= Имена.ИмяОбъекта;
	ObjectModel.CollectionName 	= Имена.ИмяКоллекции;
	
	ObjectInfo	= Новый Структура;
	ObjectInfo.Вставить("Company",			Строка(СтрокаТаблицы.Организация));
	ObjectInfo.Вставить("Department",		Строка(СтрокаТаблицы.ЦФО));
	ObjectInfo.Вставить("TurnoverItem",		Строка(СтрокаТаблицы.СтатьяОборотов));
	ObjectInfo.Вставить("Partner",			Строка(СтрокаТаблицы.Контрагент));
	
	Если ЭтоЕРП Тогда
		ObjectInfo.Вставить("Executor",		Строка(СтрокаТаблицы.Инициатор));
	Иначе	
		ObjectInfo.Вставить("Project",		Строка(СтрокаТаблицы.Проект));
		ObjectInfo.Вставить("Contract",		Строка(СтрокаТаблицы.ДоговорКонтрагента));
		ObjectInfo.Вставить("PaymentDate",	?(ЭтоЗадача, СтрокаТаблицы.ДатаРасхода, Формат(СтрокаТаблицы.ДатаРасхода, "ДЛФ=D")));
		ObjectInfo.Вставить("Executor",		Строка(СтрокаТаблицы.Исполнитель));
	КонецЕсли;
	
	ObjectInfo.Вставить("Amount",			Формат(СтрокаТаблицы.СуммаДокумента, "ЧГ="));
	ObjectInfo.Вставить("Currency",			Строка(СтрокаТаблицы.ВалютаДокумента));
	ObjectInfo.Вставить("ManagerialPurpose",Строка(СтрокаТаблицы.НазначениеПлатежаУпр));
	ObjectInfo.Вставить("OverBudget",		?(ТипЗнч(СтрокаТаблицы.Сверхбюджета) = Тип("Булево"), СтрокаТаблицы.Сверхбюджета, Ложь));
	ObjectInfo.Вставить("Status",			Строка(СтрокаТаблицы.Статус));
	ObjectInfo.Вставить("ResponsiblePerson",Строка(СтрокаТаблицы.Ответственный));
	ObjectInfo.Вставить("Scenario",			Строка(СтрокаТаблицы.Сценарий));
	ObjectInfo.Вставить("Comment",			?(бит_РаботаСМетаданными.ЕстьРеквизит("Комментарий", МетаОбъект), СтрокаТаблицы.Ссылка.Комментарий, ""));
	ObjectInfo.Вставить("Date",				?(ЭтоЗадача, СтрокаТаблицы.Ссылка.Дата, Формат(СтрокаТаблицы.Ссылка.Дата, "ДЛФ=D")));
	ObjectInfo.Вставить("Number",			СтрокаТаблицы.Ссылка.Номер);
	ObjectInfo.Вставить("AdditionalProps",	ПолучитьМассивДополнительныхРеквизитовОбъекта(СтрокаТаблицы.Ссылка));
	ObjectInfo.Вставить("UseInternalTables",ИспользоватьВнутреннююТаблицу(СтрокаТаблицы.Ссылка));
	
	Element		= Новый Структура("Visas, VisasID, ObjectModel, ObjectInfo, ApplicationReestr, Files");		
	
	Element.Visas              	= СтрВизы;
	Element.VisasID            	= ВизаИД;		
	Element.ObjectModel        	= ObjectModel;
	Element.ObjectInfo         	= ObjectInfo;
	
	// Данные реестра платежей
	Если ЭтоЕРП Тогда
		
		Если Имена.ИмяОбъекта = Метаданные.Документы.бит_кзн_РеестрПлатежей.Имя Тогда
			
			ApplicationReestr	= Новый Структура("ID, Number, Date, Company, Comment, Applications");
			
			ТекДокСсылка 				= СтрокаТаблицы.Ссылка;
			ApplicationReestr.ID 		= Строка(ТекДокСсылка.УникальныйИдентификатор());
			ApplicationReestr.Number 	= ТекДокСсылка.Номер;
			ApplicationReestr.Date   	= ТекДокСсылка.Дата;
			ApplicationReestr.Company   = Строка(ТекДокСсылка.Организация);
			ApplicationReestr.Comment   = ТекДокСсылка.Комментарий;
			
			ApplicationReestr.Applications	= Новый Массив;
			
			Для каждого СтрокаРеестр Из ТекДокСсылка.ТаблицаПлатежи Цикл
				
				ApplicationRow	= Новый Структура("RowNumber, ApplicationID, ApplicationPresentation, Amount, Currency");
				
				ApplicationRow.RowNumber           		= СтрокаРеестр.НомерСтроки;
				ApplicationRow.ApplicationID       		= Строка(СтрокаРеестр.ПлатежнаяПозиция.УникальныйИдентификатор());
				ApplicationRow.ApplicationPresentation	= Строка(СтрокаРеестр.ПлатежнаяПозиция);
				ApplicationRow.Amount   				= Формат(СтрокаРеестр.СуммаКОплате, "ЧГ=");
				ApplicationRow.Currency 				= Строка(СтрокаРеестр.ВалютаПлатежа);
				
				ApplicationReestr.Applications.Add(ApplicationRow);
				
			КонецЦикла; 
			
			Element.ApplicationReestr	= ApplicationReestr;
			
		КонецЕсли;
	Иначе
		Если Имена.ИмяОбъекта = Метаданные.Документы.бит_РеестрПлатежей.Имя Тогда
			
			ApplicationReestr	= Новый Структура("ID, Number, Date, Company, Comment, Applications");
			
			ТекДокСсылка 				= СтрокаТаблицы.Ссылка;
			ApplicationReestr.ID 		= Строка(ТекДокСсылка.УникальныйИдентификатор());
			ApplicationReestr.Number 	= ТекДокСсылка.Номер;
			ApplicationReestr.Date   	= ТекДокСсылка.Дата;
			ApplicationReestr.Company 	= Строка(ТекДокСсылка.Организация);
			ApplicationReestr.Comment 	= ТекДокСсылка.Комментарий;
			
			ApplicationReestr.Applications	= Новый Массив;
			
			Для каждого СтрокаРеестр Из ТекДокСсылка.Заявки Цикл
				
				ApplicationRow	= Новый Структура("RowNumber, ApplicationID, ApplicationPresentation, Amount, Currency");
				
				ApplicationRow.RowNumber           	= СтрокаРеестр.НомерСтроки;
				ApplicationRow.ApplicationID       	= Строка(СтрокаРеестр.Заявка.УникальныйИдентификатор());
				ApplicationRow.ApplicationPresentation	= Строка(СтрокаРеестр.Заявка);
				ApplicationRow.Amount   				= Формат(СтрокаРеестр.Сумма, "ЧГ=");
				ApplicationRow.Currency 				= Строка(СтрокаРеестр.Валюта);
				
				ApplicationReestr.Applications.Add(ApplicationRow);
				
			КонецЦикла; 
			
			Element.ApplicationReestr = ApplicationReestr;
			
		КонецЕсли;
		
	КонецЕсли; // ЭтоERP
	
	// Данные о файлах
	МассивФайлов	= ПрикрепленныеФайлы[СтрокаТаблицы.Ссылка];
	
	Element.Files	= Новый Массив;
	
	Если ТипЗнч(МассивФайлов) = Тип("Массив") Тогда
		
		Для каждого ДанныеФайла Из МассивФайлов Цикл
			
			FileInfo	= Новый Структура("Name, DateChanged, ID, VersionID, Ext, Size");
			
			FileInfo.Name 		= ДанныеФайла.Наименование;
			FileInfo.DateChanged= ДанныеФайла.ДатаМодификацииФайла;
			FileInfo.ID 		= ДанныеФайла.ИдФайла;
			FileInfo.VersionID	= ДанныеФайла.ИдВерсии;
			FileInfo.Ext 		= ДанныеФайла.Расширение;
			FileInfo.Size 		= ДанныеФайла.Размер;
			
			Element.Files.Добавить(FileInfo);
			
		КонецЦикла; //МассивФайлов
		
	КонецЕсли; // Есть прикрепленные файлы
	
	Возврат Element;

КонецФункции

// Функция получает историю визирования с помощью обработки бит_РабочееМестоВизирования.
//
// Параметры:
//  User		 - Строка	 - Пользователь для которого получаем список объектов визирования
//  Objects		 - Строка	 - Имена типов объектов визирования, которые анализируем
//  DateStart	 - 			 - ДатаВремя
//  DateFinish	 - 			 - ДатаВремя
//  Status		 - 			 - Статус документа
// 
// Возвращаемое значение:
//  ЗначениеСписок - ОбъектXDTO.
//
Функция ПолучитьИсториюВизированияОбъектов(ПараметрыОбъекта)
	
	User		= ПараметрыОбъекта.User;
	Objects		= ПараметрыОбъекта.Objects;
	DateStart	= ПараметрыОбъекта.DateStart;
	DateFinish	= ПараметрыОбъекта.DateFinish;
	Status		= ПараметрыОбъекта.Status;
  
	ТекПользователь = НайтиПользователя(User);
	
	DateStart =	СтрокаВДату(DateStart);
	DateFinish=	КонецДня(СтрокаВДату(DateFinish));
	Если НЕ ЗначениеЗаполнено(ТекПользователь) Тогда
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода HistoryApproval.
									|Не удалось найти пользователя по имени: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, User);
		ИмяСобытия = НСтр("ru = 'approval/v1/HistoryApproval'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);	
	КонецЕсли; 
    
    ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
    ПараметрыСеанса.бит_ИдентификаторСеанса = Новый УникальныйИдентификатор;						 			
	
	СписокТипов = Новый СписокЗначений;	
	Если ТипЗнч(Objects) = Тип("Строка") И НЕ ПустаяСтрока(Objects) Тогда
		
		МассивТипов = бит_ОбщегоНазначенияКлиентСервер.ПолучитьТипыИзСтроки(Objects);
		Если МассивТипов.Количество()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Для каждого ТекТип Из МассивТипов Цикл	
			СписокТипов.Добавить(ТекТип);		
		КонецЦикла; 
	
	КонецЕсли;
	
	СписокСтатусов = Новый СписокЗначений;
	Если ТипЗнч(Status) = Тип("Строка") И НЕ ПустаяСтрока(Status) Тогда
		
		МассивТипов =СтрРазделить(Status, ",", Ложь);
		Если МассивТипов.Количество() = 0 Тогда
			СписокСтатусов.Добавить(Status);
		КонецЕсли;
		
		Для каждого ТекТип Из МассивТипов Цикл	
			СписокСтатусов.Добавить(ТекТип);		
		КонецЦикла; 
	
	КонецЕсли;
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных; 
	Обработки.бит_РабочееМестоВизирования.ИнициализироватьКомпоновщик(Компоновщик, Новый УникальныйИдентификатор);
	
	Если СписокТипов.Количество() > 0 Тогда
		эоКомп = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эоКомп.Использование  = Истина;				   
		эоКомп.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		эоКомп.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТипДокумента");
		эоКомп.ПравоеЗначение = СписокТипов;
	КонецЕсли;
	Если СписокСтатусов.Количество() > 0 Тогда
		эоКомп = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эоКомп.Использование  = Истина;				   
		эоКомп.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		Полестатус = Новый ПолеКомпоновкиДанных("Статус.Наименование");
		эоКомп.ЛевоеЗначение  = Полестатус;
		эоКомп.ПравоеЗначение = СписокСтатусов;
	КонецЕсли; 
	
	ПараметрыПолучения 	= Обработки.бит_РабочееМестоВизирования.НовыеПараметрыПолученияТаблицыДокументов();
	ПараметрыПолучения.НастройкиКомпоновщика= Компоновщик.ПолучитьНастройки();
	ПараметрыПолучения.НачалоПериода		= DateStart;
	ПараметрыПолучения.КонецПериода			= DateFinish;
	
	АдресВХранилище 	= ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, Новый УникальныйИдентификатор); 
	Обработки.бит_РабочееМестоВизирования.ПолучитьТаблицуДокументов(ПараметрыПолучения, АдресВХранилище);
	ТаблицаДокументов 	= ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Обработки.бит_РабочееМестоВизирования.ВыполнитьФильтрациюТаблицыДокументов(ТаблицаДокументов, ТекПользователь, 2, Ложь);
	
	// Получение сведений о прикрепленных файлах.
	ПрикрепленныеФайлы = Новый Соответствие;
	флЕстьФайлыБСП = бит_РаботаСМетаданными.ЕстьСправочник("ВерсииФайлов") И бит_РаботаСМетаданными.ЕстьСправочник("Файлы");
	
	Если флЕстьФайлыБСП Тогда
		МассивДокументов = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
		МассивДокументов = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивДокументов);
		ПрикрепленныеФайлы = ПолучитьИнформациюФайлов(МассивДокументов);
	КонецЕсли;  // Есть подсистема файлов БСП.
	
	ТекстСообщения = НСтр("ru = 'Документы визирования: %1'; en = 'Documents sight: %1'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ТаблицаДокументов.Количество()); 
	РезСтр = ТекстСообщения + Символы.ПС;
	
	РезультатМассив	= Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда	
			Продолжить;		
		КонецЕсли;
		// Извлекаем историю визирования.
		
		СтрВизы = "";
		ВизаИД = "";
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", СтрокаТаблицы.Ссылка);
		Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
		
		Запрос.Текст 	= 
		"ВЫБРАТЬ
		|	ИсторияВиз.Период КАК Период,
		|	ИсторияВиз.Объект КАК Объект,
		|	ИсторияВиз.Виза КАК Виза,
		|	ИсторияВиз.ИД КАК ИД,
		|	ИсторияВиз.Пользователь КАК Пользователь,
		|	ИсторияВиз.Комментарий КАК Комментарий,
		|	ИсторияВиз.Решение КАК Решение,
		|	ИсторияВиз.ДатаКрайняя КАК ДатаКрайняя
		|ИЗ
		|	РегистрСведений.бит_ИсторияИзмененияВиз КАК ИсторияВиз
		|ГДЕ
		|	ИсторияВиз.Объект = &Объект
		|	И ИсторияВиз.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Результат 		= Запрос.Выполнить();
		Выборка 		= Результат.Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Продолжить;
		КонецЕСли;
		VisaHistory = Новый Структура("Row");
		Визы = Новый Массив();
		StatusDate = '00010101';
		Пока Выборка.Следующий() Цикл
			Если StatusDate = '00010101' Тогда
				StatusDate = Формат(Выборка.Период,"ДЛФ=D");
			КонецЕсли;
			
			Visa = Новый Структура;
			Visa.Вставить("Period",		Выборка.Период);
			Visa.Вставить("User",		Строка(Выборка.Пользователь));
			Visa.Вставить("Visa",		Строка(Выборка.Виза));
			Visa.Вставить("Decision",	Строка(Выборка.Решение));
			Visa.Вставить("Comment",	Выборка.Комментарий);
			Визы.Добавить(Visa);
			СтрВизы = СтрВизы +?(ПустаяСтрока(СтрВизы),"",", ")+ Строка(Выборка.Виза);
			
			Если ЗначениеЗаполнено(Выборка.Виза) Тогда			
				 ВизаИД = Строка(Выборка.Виза.УникальныйИдентификатор());			
			КонецЕсли;
		КонецЦикла;	
		VisaHistory.Row = Визы;

		
		МетаОбъект 	= СтрокаТаблицы.Ссылка.Метаданные();
		Имена 		= бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(МетаОбъект.ПолноеИмя());
		
		ObjectModel					= Новый Структура("ID, ObjectName, CollectionName");
		ObjectModel.ID             	= Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		ObjectModel.ObjectName     	= Имена.ИмяОбъекта;
		ObjectModel.CollectionName 	= Имена.ИмяКоллекции;
		
		ObjectInfo	= Новый Структура("Company, Department, TurnoverItem, Project, Partner, Contract, PaymentDate, Amount, Currency, ManagerialPurpose, OverBudget, Status, StatusDate, Agreed, ResponsiblePerson, Scenario, Comment, Date, Number, AdditionalProps, UseInternalTables");
		ObjectInfo.Company      	= Строка(СтрокаТаблицы.Организация);
		ObjectInfo.Department   	= Строка(СтрокаТаблицы.ЦФО);
		ObjectInfo.TurnoverItem 	= Строка(СтрокаТаблицы.СтатьяОборотов);
		ObjectInfo.Project      	= Строка(СтрокаТаблицы.Проект);
		ObjectInfo.Partner      	= Строка(СтрокаТаблицы.Контрагент);
		ObjectInfo.Contract     	= Строка(СтрокаТаблицы.ДоговорКонтрагента);
		ObjectInfo.PaymentDate		= Формат(СтрокаТаблицы.ДатаРасхода, "ДЛФ=D");
		ObjectInfo.Amount           = Формат(СтрокаТаблицы.СуммаДокумента, "ЧГ=");
		ObjectInfo.Currency         = Строка(СтрокаТаблицы.ВалютаДокумента);
		ObjectInfo.ManagerialPurpose= Строка(СтрокаТаблицы.НазначениеПлатежаУпр);
		ObjectInfo.OverBudget       = ?(ТипЗнч(СтрокаТаблицы.Сверхбюджета) = Тип("Булево"), СтрокаТаблицы.Сверхбюджета, Ложь);
		ObjectInfo.Status           = Строка(СтрокаТаблицы.Статус);
		ObjectInfo.StatusDate       = Формат(StatusDate,"ДЛФ=D");
		
		Если СтрокаТаблицы.Статус.Наименование = "Проверен"
			ИЛИ СтрокаТаблицы.Статус.Наименование  = "Утвержден"
			ИЛИ СтрокаТаблицы.Статус.Наименование  = "Закрыта"
			ИЛИ СтрокаТаблицы.Статус.Наименование  = "Исполнена"
			ИЛИ СтрокаТаблицы.Статус.Наименование  = "Утверждена"
			ИЛИ СтрокаТаблицы.Статус.Наименование  = "Оплачена"
			ИЛИ СтрокаТаблицы.Статус.Наименование  = "Выполнена" Тогда
			
			ObjectInfo.Agreed = Истина;
		Иначе 
			ObjectInfo.Agreed = Ложь;
		КонецЕсли;
		
		ObjectInfo.ResponsiblePerson= Строка(СтрокаТаблицы.Ответственный);
		ObjectInfo.Scenario         = Строка(СтрокаТаблицы.Сценарий);
	    ObjectInfo.Comment 			= ?(бит_РаботаСМетаданными.ЕстьРеквизит("Комментарий", МетаОбъект), СтрокаТаблицы.Ссылка.Комментарий, "");
		ObjectInfo.Date    			= Формат(СтрокаТаблицы.Ссылка.Дата, "ДЛФ=D");
		ObjectInfo.Number  			= СтрокаТаблицы.Ссылка.Номер;
		ObjectInfo.AdditionalProps	= ПолучитьМассивДополнительныхРеквизитовОбъекта(СтрокаТаблицы.Ссылка);
		ObjectInfo.UseInternalTables	= ИспользоватьВнутреннююТаблицу(СтрокаТаблицы.Ссылка);
		
		Element		= Новый Структура("Visas, VisasID, ObjectModel, ObjectInfo, VisaHistory ,ApplicationReestr, Files");		
		
		Element.Visas              	= СтрВизы;
		Element.VisasID            	= ВизаИД;		
		Element.ObjectModel        	= ObjectModel;
		Element.ObjectInfo         	= ObjectInfo;
		Element.VisaHistory         = VisaHistory;
		
		Если ЭтоЕРП Тогда
			РеестрПлатежейИмя = Метаданные.Документы.бит_кзн_РеестрПлатежей.Имя
		Иначе
			РеестрПлатежейИмя = Метаданные.Документы.бит_РеестрПлатежей.Имя;
		КонецЕсли;
        
		// Данные реестра платежей.
		Если ЭтоЕРП Тогда
			
			Если Имена.ИмяОбъекта = Метаданные.Документы.бит_кзн_РеестрПлатежей.Имя Тогда
				
				ApplicationReestr	= Новый Структура("ID, Number, Date, Company, Comment, Applications");
				
				ТекДокСсылка 				= СтрокаТаблицы.Ссылка;
				ApplicationReestr.ID 		= Строка(ТекДокСсылка.УникальныйИдентификатор());
				ApplicationReestr.Number 	= ТекДокСсылка.Номер;
				ApplicationReestr.Date   	= ТекДокСсылка.Дата;
				ApplicationReestr.Company   = Строка(ТекДокСсылка.Организация);
				ApplicationReestr.Comment   = ТекДокСсылка.Комментарий;
				ApplicationReestr.Applications	= Новый Массив;
				
				Для каждого СтрокаРеестр Из ТекДокСсылка.ТаблицаПлатежи Цикл
					
					ApplicationRow	= Новый Структура("RowNumber, ApplicationID, ApplicationPresentation, Amount, Currency");
					
					ApplicationRow.RowNumber           		= СтрокаРеестр.НомерСтроки;
					ApplicationRow.ApplicationID       		= Строка(СтрокаРеестр.ПлатежнаяПозиция.УникальныйИдентификатор());
					ApplicationRow.ApplicationPresentation	= Строка(СтрокаРеестр.ПлатежнаяПозиция);
					ApplicationRow.Amount   				= Формат(СтрокаРеестр.СуммаКОплате, "ЧГ=");
					ApplicationRow.Currency 				= Строка(СтрокаРеестр.ВалютаПлатежа);
					
					ApplicationReestr.Applications.Add(ApplicationRow);
					
				КонецЦикла; 
				
				Element.ApplicationReestr	= ApplicationReestr;
				
			КонецЕсли;
		Иначе
			
			Если Имена.ИмяОбъекта = РеестрПлатежейИмя Тогда
				
				ApplicationReestr	= Новый Структура("ID, Number, Date, Company, Comment, Applications");
				
				ТекДокСсылка 				= СтрокаТаблицы.Ссылка;
				ApplicationReestr.ID 		= Строка(ТекДокСсылка.УникальныйИдентификатор());
				ApplicationReestr.Number 	= ТекДокСсылка.Номер;
				ApplicationReestr.Date   	= ТекДокСсылка.Дата;
				ApplicationReestr.Company 	= Строка(ТекДокСсылка.Организация);
				ApplicationReestr.Comment 	= ТекДокСсылка.Комментарий;
				
				ApplicationReestr.Applications	= Новый Массив;
				
				Для каждого СтрокаРеестр Из ТекДокСсылка.Заявки Цикл
					
					ApplicationRow	= Новый Структура("RowNumber, ApplicationID, ApplicationPresentation, Amount, Currency");
					
					ApplicationRow.RowNumber           	= СтрокаРеестр.НомерСтроки;
					ApplicationRow.ApplicationID       	= Строка(СтрокаРеестр.Заявка.УникальныйИдентификатор());
					ApplicationRow.ApplicationPresentation	= Строка(СтрокаРеестр.Заявка);
					ApplicationRow.Amount   				= Формат(СтрокаРеестр.Сумма, "ЧГ=");
					ApplicationRow.Currency 				= Строка(СтрокаРеестр.Валюта);
					
					ApplicationReestr.Applications.Add(ApplicationRow);
					
				КонецЦикла; 
				
				Element.ApplicationReestr = ApplicationReestr;
				
			КонецЕсли;
		КонецЕсли; // ЭтоERP.
		
		// Данные о файлах.
		МассивФайлов	= ПрикрепленныеФайлы[СтрокаТаблицы.Ссылка];
		Element.Files	= Новый Массив;
		Если ТипЗнч(МассивФайлов) = Тип("Массив") Тогда
			Для каждого ДанныеФайла Из МассивФайлов Цикл
				
				FileInfo			= Новый Структура("Name, DateChanged, ID, VersionID, Ext, Size");
				FileInfo.Name 		= ДанныеФайла.Наименование;
				FileInfo.DateChanged= ДанныеФайла.ДатаМодификацииФайла;
				FileInfo.ID 		= ДанныеФайла.ИдФайла;
				FileInfo.VersionID	= ДанныеФайла.ИдВерсии;
				FileInfo.Ext 		= ДанныеФайла.Расширение;
				FileInfo.Size 		= ДанныеФайла.Размер;
				
				Element.Files.Добавить(FileInfo);
			КонецЦикла;
		КонецЕсли;
		
		РезультатМассив.Добавить(Element);		
		РезСтр = РезСтр + Строка(СтрокаТаблицы.Ссылка) + Символы.ПС;
		
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
  
  	Возврат РезультатМассив;
  	
КонецФункции

Функция ПолучитьСтатусы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Статусы.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.бит_ОбъектыМобильногоВизирования КАК ОбъектыВизирования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_СтатусыОбъектов КАК Статусы
	|		ПО ОбъектыВизирования.ОбъектСистемы = Статусы.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПереченьСтатусов = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Переченьстатусов.Добавить(Выборка.Наименование);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПереченьСтатусов;
	
КонецФункции

Функция ДоступныеВизы(ОбъектВизирования)
	
	СписокДоступныхВиз = Новый СписокЗначений;
	
	// Получить визы доступные после установки.
    ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь");
	
	СтруктураОтбор = Новый Структура("Объект", ОбъектВизирования);
	НаборВизы = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	ТаблицаВизы = НаборВизы.Выгрузить();
	ТаблицаВизы.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
	
	СписокВиз = бит_Визирование.ПолучитьВизыПользователя(ТекПользователь, ОбъектВизирования);
	
	Для каждого СтрокаВизы Из ТаблицаВизы Цикл
		флДоступно = Ложь;
		Если НЕ СписокВиз.НайтиПоЗначению(Справочники.бит_ГруппыВиз.ВсеВизы)= Неопределено Тогда
			флДоступно = Истина;
		ИначеЕсли НЕ СписокВиз.НайтиПоЗначению(СтрокаВизы.Виза)= Неопределено Тогда	
			флДоступно = Истина;
		КонецЕсли; 
		
		Если флДоступно Тогда
			 СтрокаВизы.ДоступностьВизы = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	// Определим, какие визы доступны исходя из структуры алгоритма.
	Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
	Для каждого СтрокаВизы Из ТаблицаВизы Цикл
		Если ЗначениеЗаполнено(СтрокаВизы.Алгоритм) Тогда
			Алгоритм = СтрокаВизы.Алгоритм;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	локТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы);
	
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);		
	бит_уп_Сервер.ОпределитьДоступностьТочек(локТаблицаТочкиВизы,флВыполнятьПоэтапно);

	Для каждого СтрокаТаблицы Из локТаблицаТочкиВизы Цикл
	
		Если ЗначениеЗаполнено(СтрокаТаблицы.Виза) 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Решение) 
			И СтрокаТаблицы.Доступность Тогда
		
			  СписокДоступныхВиз.Добавить(СтрокаТаблицы.Виза);
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат СписокДоступныхВиз;
	
КонецФункции

Функция ВидыРешенийСогласования(МассивДанных)

	Если НЕ ТипЗнч(МассивДанных) = Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;		

	Запрос = Новый Запрос;
	
	ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	Если ЭтоЕРП Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРешенийСогласования.ОбъектСистемы КАК ОбъектСистемы,
		|	ВидыРешенийСогласования.Организация КАК Организация,
		|	ВидыРешенийСогласования.ВидРешения КАК ВидРешения,
		|	ЛОЖЬ КАК НеобходимКомментарийЗадача
		|ИЗ
		|	РегистрСведений.бит_НазначениеВидовРешенийСогласования КАК ВидыРешенийСогласования
		|ГДЕ
		|	ИСТИНА
		|	И НЕ ВидыРешенийСогласования.ВидРешения.Отключено
		|	И &ДопУсловие
		|ИТОГИ ПО
		|	ОбъектСистемы,
		|	Организация";
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРешенийСогласования.ОбъектСистемы КАК ОбъектСистемы,
		|	ВидыРешенийСогласования.Организация КАК Организация,
		|	ВидыРешенийСогласования.ВидРешения КАК ВидРешения,
		|	ВидыРешенийСогласования.НеобходимКомментарийЗадача КАК НеобходимКомментарийЗадача
		|ИЗ
		|	РегистрСведений.бит_НазначениеВидовРешенийСогласования КАК ВидыРешенийСогласования
		|ГДЕ
		|	ИСТИНА
		|	И НЕ ВидыРешенийСогласования.ВидРешения.Отключено
		|	И &ДопУсловие
		|ИТОГИ ПО
		|	ОбъектСистемы,
		|	Организация";
	КонецЕсли;
		
	Если МассивДанных.Количество() > 0 Тогда
		МассивОбъектов		= ПолучитьМассивОбъектов(МассивДанных);	
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		
		Запрос.Текст 		= СтрЗаменить(Запрос.Текст, "&ДопУсловие","ВидыРешенийСогласования.ОбъектСистемы В(&МассивОбъектов)");	
	Иначе
		Запрос.Текст 		= СтрЗаменить(Запрос.Текст, "И &ДопУсловие","");	
	КонецЕсли;
	
	РезультатЗапроса		= Запрос.Выполнить();
	
	ВыборкаОбъектСистемы	= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РезультатМассив			= Новый Массив;
	
	Пока ВыборкаОбъектСистемы.Следующий() Цикл
		
		Object				= Новый Структура("Id, Description, Organizations");
		Object.Id      	 	= Строка(ВыборкаОбъектСистемы.ОбъектСистемы.УникальныйИдентификатор());
		Object.Description	= Строка(ВыборкаОбъектСистемы.ОбъектСистемы);
		
		ВыборкаОрганизация 	= ВыборкаОбъектСистемы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		МассивОрганизаций	= Новый Массив;
		
		Пока ВыборкаОрганизация.Следующий() Цикл
						
			Выборка			= ВыборкаОрганизация.Выбрать();			
			МассивРешений	= Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				Decision					= Новый Структура("Id, Description, NeedCommentOrTask");				
				Decision.Id	 				= Строка(Выборка.ВидРешения.УникальныйИдентификатор());
				Decision.Description        = Строка(Выборка.ВидРешения);
				Decision.NeedCommentOrTask  = Выборка.НеобходимКомментарийЗадача;				
				
				МассивРешений.Добавить(Decision);				
				
			КонецЦикла;
			
			Organization				= Новый Структура("Id, Description, Decisions");
			Organization.Id 			= Строка(ВыборкаОрганизация.Организация.УникальныйИдентификатор());
			Organization.Description	= Строка(ВыборкаОрганизация.Организация);
			Organization.Decisions		= МассивРешений;
			
			МассивОрганизаций.Добавить(Organization);
			
		КонецЦикла;
		
		Object.Organizations	= МассивОрганизаций;
		
		РезультатМассив.Добавить(Object);
		
	КонецЦикла;
		
	Возврат РезультатМассив;
	
КонецФункции 

Функция ИсторияВизирования(Ид, Имя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получаем ссылку на документ.
	ДокМенеджер 	= Документы[Имя];
	УИД 			= Новый УникальныйИдентификатор(Ид);
	ДокСсылка 		= ДокМенеджер.ПолучитьСсылку(УИД);
	
	// Извлекаем историю визирования.
	Запрос 			= Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ДокСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияВизирования.Период КАК Период,
	|	ИсторияВизирования.Объект КАК Объект,
	|	ИсторияВизирования.Виза КАК Виза,
	|	ИсторияВизирования.ИД КАК ИД,
	|	ИсторияВизирования.Пользователь КАК Пользователь,
	|	ИсторияВизирования.Комментарий КАК Комментарий,
	|	ИсторияВизирования.Решение КАК Решение,
	|	ИсторияВизирования.ДатаКрайняя КАК ДатаКрайняя
	|ИЗ
	|	РегистрСведений.бит_ИсторияИзмененияВиз КАК ИсторияВизирования
	|ГДЕ
	|	ИсторияВизирования.Объект = &Объект";
	
	Результат 		= Запрос.Выполнить();
	Выборка 		= Результат.Выбрать();
	
	РезультатМассив	= Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Record			= Новый Структура("Period, User, Visa, Decision, Comment");
		
		Record.Period 	= Выборка.Период;
		Record.User 	= Строка(Выборка.Пользователь);
		Record.Visa 	= Строка(Выборка.Виза);
		Record.Decision = Строка(Выборка.Решение);
		Record.Comment 	= Строка(Выборка.Комментарий);
		
		РезультатМассив.Добавить(Record);
		
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатМассив;
	
КонецФункции

Функция ПолучитьМассивДоступныхВиз(ТекущийПользователь, ДокументСсылка, ТаблицаВизыОбщая, ТаблицаВизыПустая)
	
	ВизыРезультатОбщий   = бит_Визирование.ВыполнитьЗапросДляПолученияВизПользователя(ТекущийПользователь);	
	
	КэшТаблицТочек = Новый Соответствие;
	
	ВизыПользователя = бит_Визирование.ПолучитьВизыПользователя(ТекущийПользователь
																,ДокументСсылка
																,ВизыРезультатОбщий);
	
	ТаблицаВизы = ТаблицаВизыПустая.Скопировать();
		
	ЕстьНеустановленные = Обработки.бит_РабочееМестоВизирования.ЗаполнитьТаблицуВиз(ТаблицаВизы
																					,ДокументСсылка
																					,ТаблицаВизыОбщая
																					,ВизыПользователя);
	
	Алгоритм = бит_Визирование.ПолучитьАлгоритмПоНаборуВиз(ТаблицаВизы);
	
	ТаблицаТочек = КэшТаблицТочек[Алгоритм];
	
	Если ТаблицаТочек = Неопределено Тогда
		
		ТаблицаТочек = бит_уп_Сервер.ПолучитьТочкиАлгоритма(Алгоритм);
		КэшТаблицТочек.Вставить(Алгоритм,ТаблицаТочек);
		
	КонецЕсли; 
	
	локТаблицаТочкиВизы  = бит_уп_Сервер.ПолучитьТаблицуТочек(Алгоритм,ТаблицаВизы,ТаблицаТочек);
	
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(Алгоритм);				
	// Определяем, какие точки алгоритма доступны.
	бит_уп_Сервер.ОпределитьДоступностьТочек(локТаблицаТочкиВизы,флВыполнятьПоэтапно);
	
	// Отберем строки таблицы с доступными визами.
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("Доступность",Истина);
	
	МассивСтрок = локТаблицаТочкиВизы.НайтиСтроки(СтрОтбор);
	
	МассивДоступныеПустые = Новый Массив;
	
	Для каждого строка Из МассивСтрок Цикл
		
		Если строка.Доступность Тогда
			
			Если НЕ ЗначениеЗаполнено(строка.Решение) Тогда
				МассивДоступныеПустые.Добавить(строка.Виза);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат МассивДоступныеПустые;
	
КонецФункции

Функция СформироватьДоступныеВизы(ДокументСсылка)

	ТекНаборВизы 		= РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	ТаблицаВизыПустая 	= ТекНаборВизы.Выгрузить();
	
	МассивСсылок		= Новый Массив;
	МассивСсылок.Добавить(ДокументСсылка);
	
	ТаблицаВизыОбщая 	= Обработки.бит_РабочееМестоВизирования.ПолучитьОбщуюТаблицуВиз(МассивСсылок);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ДоступныеВизы		= ПолучитьМассивДоступныхВиз(ТекущийПользователь, ДокументСсылка, ТаблицаВизыОбщая, ТаблицаВизыПустая);	
	
	РезультатМассив		= Новый Массив;
	
	Для каждого виза Из ДоступныеВизы Цикл
	
		ВизаСтруктура				= Новый Структура("Id, Description");
		ВизаСтруктура.Id			= Строка(виза.УникальныйИдентификатор());
		ВизаСтруктура.Description   = виза.Наименование;
		
		РезультатМассив.Добавить(ВизаСтруктура);
		
	КонецЦикла;

	Возврат РезультатМассив;
	
КонецФункции

#КонецОбласти

#Область Задачи

Функция ЕстьЗадачиПоДокументу(Ссылка, Виза)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Задача.Ссылка КАК Ссылка,
	|	Задача.Предмет КАК Предмет
	|ИЗ
	|	Задача.бит_уп_Задача КАК Задача
	|ГДЕ
	|	Задача.Виза = &Виза
	|	И Задача.Предмет = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка"	, Ссылка);
	Запрос.УстановитьПараметр("Виза"	, Виза);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПолучитьЗадачи(User)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ТекПользователь = НайтиПользователя(User);
	
	Если НЕ ЗначениеЗаполнено(ТекПользователь) Тогда
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода Tasks.
									|Не удалось найти пользователя по имени: %1'");		
		ТекстСообщения = СтрШаблон(ТекстСообщения, User);
		ИмяСобытия = НСтр("ru = 'approval/v1/tasks'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
	КонецЕсли; 
	
	ТипыОбъектовВизирования = ТипыОбъектов();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекПользователь", ТекПользователь);
	Запрос.УстановитьПараметр("ТипыОбъектовВизирования", ТипыОбъектовВизирования);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""MyTasks"" КАК Direction,
	|	ЗадачаПоИсполнителю.Ссылка КАК Ref,
	|	ЗадачаПоИсполнителю.Выполнена КАК IsCompleted,
	|	ЗадачаПоИсполнителю.Номер КАК Number,
	|	ЗадачаПоИсполнителю.Состояние КАК State,
	|	ЕСТЬNULL(ЗадачаПоИсполнителю.Состояние.Наименование, """") КАК StateName,
	|	ЗадачаПоИсполнителю.Дата КАК Date,
	|	ЗадачаПоИсполнителю.СрокИсполнения КАК Deadline,
	|	ЗадачаПоИсполнителю.Наименование КАК Name,
	|	ЗадачаПоИсполнителю.Автор КАК Author,
	|	ЕСТЬNULL(ЗадачаПоИсполнителю.Автор.Наименование, """") КАК AuthorName,
	|	ЗадачаПоИсполнителю.Исполнитель КАК Responsible,
	|	ЕСТЬNULL(ЗадачаПоИсполнителю.Исполнитель.Наименование, """") КАК ResponsibleName,
	|	ЗадачаПоИсполнителю.Важность КАК Importance,
	|	ЗадачаПоИсполнителю.Описание КАК Description,
	|	ЗадачаПоИсполнителю.РезультатВыполнения КАК Result,
	|	ЗадачаПоИсполнителю.Предмет КАК Object
	|ПОМЕСТИТЬ ВсеЗадачи
	|ИЗ
	|	Задача.бит_уп_Задача.ЗадачиПоИсполнителю(
	|			&ТекПользователь,
	|			Выполнена = ЛОЖЬ
	|				И АлгоритмПодчиненный = ЗНАЧЕНИЕ(Справочник.бит_уп_Алгоритмы.ПустаяСсылка)
	|				И Состояние <> ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Задача_Остановлена)) КАК ЗадачаПоИсполнителю
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""TasksFromMe"",
	|	Задача.Ссылка,
	|	Задача.Выполнена,
	|	Задача.Номер,
	|	Задача.Состояние,
	|	ЕСТЬNULL(Задача.Состояние.Наименование, """"),
	|	Задача.Дата,
	|	Задача.СрокИсполнения,
	|	Задача.Наименование,
	|	Задача.Автор,
	|	ЕСТЬNULL(Задача.Автор.Наименование, """"),
	|	Задача.Исполнитель,
	|	ЕСТЬNULL(Задача.Исполнитель.Наименование, """"),
	|	Задача.Важность,
	|	Задача.Описание,
	|	Задача.РезультатВыполнения,
	|	Задача.Предмет
	|ИЗ
	|	Задача.бит_уп_Задача КАК Задача
	|ГДЕ
	|	Задача.Автор = &ТекПользователь
	|	И Задача.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.бит_уп_Процесс.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеЗадачи.Object КАК Object
	|ИЗ
	|	ВсеЗадачи КАК ВсеЗадачи
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВсеЗадачи.Object) В (&ТипыОбъектовВизирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЗадачи.Direction КАК Direction,
	|	ВсеЗадачи.Ref КАК Ref,
	|	ВсеЗадачи.IsCompleted КАК IsCompleted,
	|	ВсеЗадачи.Number КАК Number,
	|	ВсеЗадачи.State КАК State,
	|	ВсеЗадачи.StateName КАК StateName,
	|	ВсеЗадачи.Date КАК Date,
	|	ВсеЗадачи.Deadline КАК Deadline,
	|	ВсеЗадачи.Name КАК Name,
	|	ВсеЗадачи.Author КАК Author,
	|	ВсеЗадачи.AuthorName КАК AuthorName,
	|	ВсеЗадачи.Responsible КАК Responsible,
	|	ВсеЗадачи.ResponsibleName КАК ResponsibleName,
	|	ВсеЗадачи.Importance КАК Importance,
	|	ВсеЗадачи.Description КАК Description,
	|	ВсеЗадачи.Result КАК Result,
	|	ВсеЗадачи.Object КАК Object
	|ИЗ
	|	ВсеЗадачи КАК ВсеЗадачи";
				   
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ОбъектыЗадач = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Object");
	РеквизитыОбъектовЗадач = Новый ТаблицаЗначений;
	Если ОбъектыЗадач.Количество() > 0 Тогда
		РеквизитыОбъектовЗадач = РеквизитыОбъектов(ОбъектыЗадач, ТекПользователь);	
		// Получение сведений о прикрепленных файлах.
		ПрикрепленныеФайлы 	= Новый Соответствие;
		флЕстьФайлыБСП 		= бит_РаботаСМетаданными.ЕстьСправочник("ВерсииФайлов") И бит_РаботаСМетаданными.ЕстьСправочник("Файлы");
		Если флЕстьФайлыБСП Тогда
			ПрикрепленныеФайлы	= ПолучитьИнформациюФайлов(ОбъектыЗадач);
		КонецЕсли;  // Есть подсистема файлов БСП.
	КонецЕсли;
	
	РезультатМассив = Новый Массив;
	Выборка			= РезультатЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МетаОбъект 					= Выборка.Ref.Метаданные();
		Имена 						= бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(МетаОбъект.ПолноеИмя());
		
		ObjectModel	= Новый Структура("ID, ObjectName, CollectionName");
		ObjectModel.ID             	= XMLСтрока(Выборка.Ref);
		ObjectModel.ObjectName     	= Имена.ИмяОбъекта;
		ObjectModel.CollectionName 	= Имена.ИмяКоллекции;
		
		Task = Новый Структура;
		Task.Вставить("ObjectModel",	ObjectModel);
		Task.Вставить("Direction",		Выборка.Direction);
		Task.Вставить("IsCompleted",	Выборка.IsCompleted);
		Task.Вставить("Number",			Выборка.Number);
		Task.Вставить("State",			Выборка.StateName);
		Task.Вставить("Date",			Выборка.Date);
		Task.Вставить("Deadline",		Выборка.Deadline);
		Task.Вставить("Name",			Выборка.Name);
		Task.Вставить("Author",			Выборка.AuthorName);
		Task.Вставить("Responsible",	Выборка.ResponsibleName);
		Task.Вставить("Importance",		Строка(Выборка.Importance));
		Task.Вставить("Description",	Выборка.Description);
		Task.Вставить("Result",			Выборка.Result);
		Task.Вставить("Object",			Строка(Выборка.Object));
		Task.Вставить("RelatedDocument",Неопределено);
		
		Если ЗначениеЗаполнено(Выборка.Object)
			И РеквизитыОбъектовЗадач.Количество() > 0 Тогда
			
			ОбъектЗадачи = РеквизитыОбъектовЗадач.Найти(Выборка.Object ,"Ссылка");
			Если ОбъектЗадачи <> Неопределено Тогда
				Task.RelatedDocument = ОбъектВизирования(ОбъектЗадачи, ПрикрепленныеФайлы, Истина);
			КонецЕсли;
		КонецЕсли;
		
		РезультатМассив.Добавить(Task);		
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат РезультатМассив;
	
КонецФункции

Функция РеквизитыОбъектов(ОбъектыЗадач, ТекПользователь)
	
	СКД = Обработки.бит_РабочееМестоВизирования.ПолучитьМакет("СхемаКомпоновкиДанныхМобильноеПриложение");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	Настройки = КомпоновщикНастроек.Настройки;	
	
	ОтборДокументов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Настройки.Отбор, "Ссылка");	
	Если ОтборДокументов.Количество() > 0 И ОтборДокументов[0].Использование Тогда
		ОтборДокументов[0].ПравоеЗначение = ОбъектыЗадач;
	КонецЕсли;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РеквизитыОбъектовЗадач = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РеквизитыОбъектовЗадач);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	РеквизитыОбъектовЗадач.Колонки.Добавить("ДоступныеНеустановленныеВизы", Новый ОписаниеТипов("СписокЗначений"));
	РеквизитыОбъектовЗадач.Колонки.Добавить("ДоступныеНеустановленныеВизыПредставление", Новый ОписаниеТипов("Строка"));

	Обработки.бит_РабочееМестоВизирования.ВыполнитьФильтрациюТаблицыДокументов(РеквизитыОбъектовЗадач, ТекПользователь, 3, Ложь);
	Возврат РеквизитыОбъектовЗадач;
	
КонецФункции

Функция ПринятьЗадачу(ID, Result)
	
	Результат		= Ложь;	
	ЗадачаСсылка 	= Задачи.бит_уп_Задача.ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
	Если ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		Структура = Новый Структура;
		Если ЗначениеЗаполнено(Result) Тогда		
			Структура.Вставить("РезультатВыполнения", Result);		
		КонецЕсли; 		
		Результат = Задачи.бит_уп_Задача.ПринятьЗадачу(ЗадачаСсылка,,Структура);		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗадачу(ID, Result)
	
	флВыполнено		= Ложь;	
	ЗадачаСсылка 	= Задачи.бит_уп_Задача.ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
	Если ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		СтрПар = Новый Структура;
		Если ЗначениеЗаполнено(Result) Тогда		
			СтрПар.Вставить("РезультатВыполнения", Result);		
		КонецЕсли; 
		флВыполнено = Задачи.бит_уп_Задача.ОтметитьВыполнение(ЗадачаСсылка,,,СтрПар);		
	КонецЕсли; 
	
	Возврат флВыполнено;
	
КонецФункции

Функция ЗаписатьЗадачу(ID, Result)
	
	флВыполнено 	= Ложь;	
	ЗадачаСсылка 	= Задачи.бит_уп_Задача.ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
	Если ЗначениеЗаполнено(ЗадачаСсылка) И ЗначениеЗаполнено(Result) Тогда
		ЗадачаОб = ЗадачаСсылка.ПолучитьОбъект();
		ЗадачаОб.РезультатВыполнения = Result;
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьЗадачу(ЗадачаОб);
	КонецЕсли; 
	
	Возврат флВыполнено;
	
КонецФункции

Функция СоздатьЗадачу(ПараметрыЗадачи)
	
	Name		= ПараметрыЗадачи.Name;
	Description	= ПараметрыЗадачи.Description;
	Importance	= ПараметрыЗадачи.Importance;
	Deadline	= ПараметрыЗадачи.Deadline;
	Responsible	= ПараметрыЗадачи.Responsible;
	ObjectName	= ПараметрыЗадачи.ObjectName;
	ObjectID	= ПараметрыЗадачи.ObjectID;
	VisaID		= ПараметрыЗадачи.VisaID;
	
	УстановитьПривилегированныйРежим(Истина);
	
	флВыполнено = Ложь;
	
	// Попытаемся найти ответственного по строке.
	ОтветственныйСсылка = НайтиПользователя(Responsible);	
	Если НЕ ЗначениеЗаполнено(ОтветственныйСсылка) Тогда
		// Ответственный был указан неверно - ставим ответственным самого пользователя.
		ОтветственныйСсылка = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь");
	КонецЕсли; 
	
	Попытка
		Важность = Перечисления.бит_уп_ВидыВажностиЗадач[Importance];
	Исключение
		// Не удалось определить - по умолчанию.
		Важность = Перечисления.бит_Важность.Средняя;
	КонецПопытки;
	
	Попытка
		Срок = Дата(Deadline);
	Исключение
		// Не удалось определить - по умолчанию
		Срок = НачалоДня(КонецДня(ТекущаяДатаСеанса())+1);
	КонецПопытки;
	
	Предмет = Неопределено;
	Если ЗначениеЗаполнено(ObjectName) И ЗначениеЗаполнено(ObjectID) Тогда
		Если бит_РаботаСМетаданными.ОбъектПринадлежитКоллекцииМетаданных("Документы",ObjectName) Тогда
			Предмет = Документы[ObjectName].ПолучитьСсылку(Новый УникальныйИдентификатор(ObjectID));
		КонецЕсли;	
	КонецЕсли; 
	
	Виза = Справочники.бит_Визы.ПустаяСсылка();
	Если ЗначениеЗаполнено(VisaID) Тогда
		Виза = Справочники.бит_Визы.ПолучитьСсылку(Новый УникальныйИдентификатор(VisaID));
	КонецЕсли; 
	
	СтрЗадача = Задачи.бит_уп_Задача.СтруктураЗадачи();
	СтрЗадача.Наименование    = Name;
	СтрЗадача.Описание        = Description;
	СтрЗадача.Важность        = Важность;
	СтрЗадача.Исполнитель     = ОтветственныйСсылка;
	СтрЗадача.СрокИсполнения  = Срок;
	СтрЗадача.СпособАдресации = 0;
	СтрЗадача.Предмет         = Предмет;
	СтрЗадача.Виза            = Виза;
	
	МаксКоличествоОбъектов = бит_уп_Сервер.МаксимальноеКоличествоОбъектовАдресации();	
	ЗадачаСсылка = Задачи.бит_уп_Задача.СоздатьНовуюЗадачу(СтрЗадача, МаксКоличествоОбъектов);
	флВыполнено = ?(ЗначениеЗаполнено(ЗадачаСсылка), Истина, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат флВыполнено;
	
КонецФункции

#КонецОбласти

#Область Файлы

// Функция получает данные файла, прикрепленного к объекту.
Функция ПолучитьДанныеФайлаОбъекта(ИмяОбъекта, ID)
	
    ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	Если НЕ ЭтоЕРП И ВРег(ИмяОбъекта) = ВРег(Метаданные.Документы.бит_ПроектДоговора.Имя) Тогда
		ФайлСсылка 			= Справочники.Файлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
	Иначе	
		ИмяХранилищаФайлов 	= ИмяОбъекта+"ПрисоединенныеФайлы";
		ФайлСсылка 			= Справочники[ИмяХранилищаФайлов].ПолучитьСсылку(Новый УникальныйИдентификатор(ID));
	КонецЕсли;
	FileData	= ИзвлечьДанныеФайла(ФайлСсылка, ID);
	
	Возврат FileData;
	
КонецФункции 

// Извлекает данные файла и упаковывает их в Base64 строку.
Функция ИзвлечьДанныеФайла(ФайлСсылка, ID)

	FileData	= Новый Структура("ID, VersionID, Data, Message, StatusCode");
	
	Если СсылкаДоступна(ФайлСсылка) Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(ФайлСсылка);		
		ДвДанные 	= ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);		
		Если ТипЗнч(ДвДанные) = Тип("ДвоичныеДанные") Тогда
			FileData.ID 		= ID;
			FileData.VersionID 	= Строка(ФайлСсылка.УникальныйИдентификатор());
			FileData.Data 		= Base64Строка(ДвДанные);
			FileData.Message 	= "OK";
			FileData.StatusCode = 200;
		Иначе	
			FileData.Message = "Cannot get file data";
			FileData.StatusCode = 500;
		КонецЕсли; 
		
	Иначе	
		ТекстСообщения 		= "Cannot find file by ID %1%";
		ТекстСообщения 		= бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ID);
		FileData.Message	= ТекстСообщения;
		FileData.StatusCode = 404;
	КонецЕсли; 
	
	Возврат FileData;
	
КонецФункции

// Функция получает информацию о файлах, прикрепленных к документам.
Функция ПолучитьИнформациюФайлов(МассивДокументов)
	
	ПрикрепленныеФайлы = Новый Соответствие;
	
	// Группируем ссылки по именам объектов.
	СсылкиПоТипам = СгруппироватьОбъектыПоТипам(МассивДокументов);
	
	// Собираем запрос к справочникам-хранилищам файлов.
	ШаблонЗапросаНачало = "
	|ВЫБРАТЬ
	|	Файлы_1.ВладелецФайла КАК ВладелецФайла,
	|	Файлы_1.Ссылка КАК Файл,
	|	Файлы_1.Наименование КАК Наименование,
	|	Файлы_1.ДатаМодификацииУниверсальная КАК ДатаМодификацииФайла,
	|	Файлы_1.Расширение КАК Расширение,
	|	Файлы_1.Размер КАК Размер
	|ИЗ
	|	Справочник.%ИмяТаблицы% КАК Файлы_1
	|ГДЕ
	|	Файлы_1.ВладелецФайла В(&МассивСсылок_1)
	|";
	
	
	ШаблонЗапросаОбъеденить = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Файлы_%Номер%.ВладелецФайла,
	|	Файлы_%Номер%.Ссылка,
	|	Файлы_%Номер%.Наименование,
	|	Файлы_%Номер%.ДатаМодификацииУниверсальная,
	|	Файлы_%Номер%.Расширение,
	|	Файлы_%Номер%.Размер
	|ИЗ
	|	Справочник.%ИмяТаблицы% КАК Файлы_%Номер%
	|ГДЕ
	|	Файлы_%Номер%.ВладелецФайла В(&МассивСсылок_%Номер%)
	|";
	
	ШаблонЗапросаИтоги = "
	|ИТОГИ ПО
	|	ВладелецФайла";
	
	ТекстЗапроса = "";
	
	Запрос = Новый Запрос;
	Ном = 1;
	
	Для Каждого КиЗ Из СсылкиПоТипам Цикл
		
		ИмяСпрФайлы = КиЗ.Ключ+"ПрисоединенныеФайлы";

		
		Если Метаданные.Справочники.Найти(ИмяСпрФайлы) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;	

		
		ИмяПараметра = "МассивСсылок_"+Ном;
		Запрос.УстановитьПараметр(ИмяПараметра, КиЗ.Значение);
		Если Ном = 1 Тогда
			
			ТекстЗапроса = ШаблонЗапросаНачало;

			
		КонецЕсли;	
		
		Если Ном > 1 Тогда
			
			ТекстЗапроса = ТекстЗапроса + ШаблонЗапросаОбъеденить;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Номер%", Ном);
			
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяСпрФайлы);
		
		
		Ном = Ном + 1;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		ТекстЗапроса = ТекстЗапроса + ШаблонЗапросаИтоги;
		
		Запрос.Текст = ТекстЗапроса;
		
		// Получаем файлы и подготавливаем результирующие данные.
		Результат = Запрос.Выполнить();
		
		ВыборкаВерх = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВерх.Следующий() Цикл
			
			Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			МассивФайлов = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				ДанныеФайла = Новый Структура;
				ДанныеФайла.Вставить("Размер"              , Выборка.Размер);
				ДанныеФайла.Вставить("Расширение"          , Выборка.Расширение);
				ДанныеФайла.Вставить("Наименование"        , Выборка.Наименование);
				ДанныеФайла.Вставить("ДатаМодификацииФайла", Выборка.ДатаМодификацииФайла);
				ДанныеФайла.Вставить("ИдФайла"             , Строка(Выборка.Файл.УникальныйИдентификатор()));
				ДанныеФайла.Вставить("ИдВерсии"            , Строка(Выборка.Файл.УникальныйИдентификатор()));
				
				МассивФайлов.Добавить(ДанныеФайла);
				
			КонецЦикла; // Выборка
			
			ПрикрепленныеФайлы.Вставить(ВыборкаВерх.ВладелецФайла, МассивФайлов);
			
		КонецЦикла;  // ВыборкаВерх
		
	КонецЕсли;
	
	// ПроектДоговора остался на старом механизме.
	МассивПроектДоговора = Неопределено;
    ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	Если НЕ ЭтоЕРП Тогда
		Если СсылкиПоТипам.Свойство(Метаданные.Документы.бит_ПроектДоговора.Имя, МассивПроектДоговора) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивДокументов", МассивПроектДоговора);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Файлы.Ссылка,
			|	Файлы.ВладелецФайла КАК ВладелецФайла,
			|	Файлы.ТекущаяВерсия,
			|	Файлы.Наименование,
			|	Файлы.Расширение КАК Расширение,
			|	Файлы.Размер КАК Размер,
			|	Файлы.ДатаМодификацииУниверсальная КАК ДатаМодификацииФайла
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла В(&МассивДокументов)
			|ИТОГИ ПО
			|	ВладелецФайла";
			
			
			Результат = Запрос.Выполнить();
			ВыборкаВерх = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВерх.Следующий() Цикл
				
				Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				МассивФайлов = Новый Массив;
				
				Пока Выборка.Следующий() Цикл
					
					ДанныеФайла = Новый Структура;
					ДанныеФайла.Вставить("Размер"              , Выборка.Размер);
					ДанныеФайла.Вставить("Расширение"          , Выборка.Расширение);
					ДанныеФайла.Вставить("Наименование"        , Выборка.Наименование);
					ДанныеФайла.Вставить("ДатаМодификацииФайла", Выборка.ДатаМодификацииФайла);
					ДанныеФайла.Вставить("ИдФайла"             , Строка(Выборка.Ссылка.УникальныйИдентификатор()));
					ДанныеФайла.Вставить("ИдВерсии"            , Строка(Выборка.ТекущаяВерсия.УникальныйИдентификатор()));
					
					МассивФайлов.Добавить(ДанныеФайла);
					
				КонецЦикла; // Выборка.
				
				ПрикрепленныеФайлы.Вставить(ВыборкаВерх.ВладелецФайла, МассивФайлов);
				
			КонецЦикла; // ВыборкаВерх.
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ПрикрепленныеФайлы;
	
КонецФункции

// Группирует массив объектов по типам объектов.
Функция СгруппироватьОбъектыПоТипам(МассивДокументов)
	
	СсылкиПоТипам = Новый Структура;
	Для Каждого ТекДок Из МассивДокументов Цикл
		ИмяДок = ТекДок.Метаданные().Имя;
		Если СсылкиПоТипам.Свойство(ИмяДок) Тогда
			СсылкиПоТипам[ИмяДок].Добавить(ТекДок);
		Иначе
			СсылкиПоТипам.Вставить(ИмяДок, Новый Массив);
			СсылкиПоТипам[ИмяДок].Добавить(ТекДок);
		КонецЕсли;	  
	КонецЦикла;	  
	
	Возврат СсылкиПоТипам;
	
КонецФункции

#КонецОбласти

#Область ДопИзмерения

Функция ПолучитьНазначенияДополнительныхИзмерений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДопИзмерения.ИмяИзмерения КАК ИмяИзмерения,
	|	ДопИзмерения.Синоним КАК Синоним,
	|	ДопИзмерения.Аналитика КАК Аналитика
	|ИЗ
	|	РегистрСведений.бит_НазначениеДополнительныхИзмерений КАК ДопИзмерения";
	
	РезультатЗапроса 	= Запрос.Выполнить();
	
	Выборка 			= РезультатЗапроса.Выбрать();	
	МассивИзмерений 	= Новый Массив;	
	
	Пока Выборка.Следующий() Цикл
		ИзмерениеСтруктура	= Новый Структура("Name, Description", Выборка.ИмяИзмерения, Выборка.Синоним);
		МассивИзмерений.Добавить(ИзмерениеСтруктура);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивИзмерений;
	
КонецФункции

Функция ПолучитьОбъектыСДопИзмерениями(СтруктураДанных)
	
	Если НЕ ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	МассивДанных = Неопределено;
	СтруктураДанных.Свойство("ObjectTypes", МассивДанных);
	
	РезультатМассив	= Новый Массив;

	Для каждого строка Из МассивДанных Цикл
		
		ТипОбъекта		= строка.ObjectType;
		МассивДокументов= строка.DocsArray;
		МассивАналитик	= строка.AnalyticsArray;
		ИмяДокумента 	= СтрЗаменить(ТипОбъекта, "ДокументСсылка.", "");
		МассивДокументовСсылки 	= Новый Массив;
		
		Для каждого ДокументId Из МассивДокументов Цикл
			ДокументУИД		= Новый УникальныйИдентификатор(ДокументId);			
			ДокументСсылка 	= Документы[ИмяДокумента].ПолучитьСсылку(ДокументУИД);
			МассивДокументовСсылки.Добавить(ДокументСсылка);
		КонецЦикла;
		
		МассивАналитикСуществующих	= ПолучитьМассивСуществующихАналитик(ИмяДокумента, МассивАналитик);
		
		CформироватьДанныеПоДопИзмерениям(ТипОбъекта, ИмяДокумента, МассивДокументовСсылки, МассивАналитикСуществующих, РезультатМассив);
		
	КонецЦикла;
	
	Возврат РезультатМассив;
	
КонецФункции

Функция ПолучитьМассивСуществующихАналитик(ИмяДокумента, МассивАналитик)

	МетаДокумента 				= Метаданные.Документы[ИмяДокумента];	
	МассивАналитикСуществующих 	= Новый Массив;
	Для каждого ИмяАналитики Из МассивАналитик Цикл
		Если МетаДокумента.Реквизиты.Найти(ИмяАналитики) <> Неопределено Тогда					
			МассивАналитикСуществующих.Добавить(ИмяАналитики);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивАналитикСуществующих;
	
КонецФункции

Процедура CформироватьДанныеПоДопИзмерениям(ТипОбъекта, ИмяДокумента, МассивДокументовСсылки, МассивАналитик, РезультатМассив)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументовСсылки);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|	&СписокАналитик
	|ИЗ
	|	Документ.&ИмяДокумента КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|ИТОГИ ПО
	|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", ИмяДокумента);
	Если МассивАналитик.Количество() = 0 Тогда
	    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокАналитик", "");	
	Иначе		
		СписокАналитик	= " , ";
		Для Каждого ИмяАналитики Из МассивАналитик Цикл
			СписокАналитик = СписокАналитик + "Документ." + ИмяАналитики + ", ";
		КонецЦикла;
		СписокАналитик	= Сред(СписокАналитик, 0, СтрДлина(СписокАналитик) - 2);
		ТекстЗапроса	= СтрЗаменить(ТекстЗапроса, "&СписокАналитик", СписокАналитик);	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылка.Следующий() Цикл
		СсылкаУИД = ВыборкаСсылка.Ссылка.УникальныйИдентификатор();
		МассивАналитикОтвет = Новый Массив;
		ВыборкаДЗ = ВыборкаСсылка.Выбрать();
		Пока ВыборкаДЗ.Следующий() Цикл
			Для Каждого ИмяАналитики Из МассивАналитик Цикл
				ЗначениеАналитики = ВыборкаДЗ[ИмяАналитики];
				Если НЕ ЗначениеЗаполнено(ЗначениеАналитики) Тогда
					Продолжить;
				КонецЕсли;
				СтруктураАналитика = Новый Структура("Name, Value", ИмяАналитики, ЗначениеАналитики.Description);				
				МассивАналитикОтвет.Добавить(СтруктураАналитика);
			КонецЦикла;
		КонецЦикла;
		СтруктураОтвет = Новый Структура("ObjectType, Id, Analytics", ТипОбъекта, Строка(СсылкаУИД), МассивАналитикОтвет);
		РезультатМассив.Добавить(СтруктураОтвет);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Пользователи

// Функция выполняет поиск пользователя по имени.
//
// Параметры:
//  ИмяПользователя - Строка
//
// Возвращаемое значение:
//  ИмяПользователя - СправочникСсылка.Пользователи.
Функция НайтиПользователя(ИмяПользователя)
	
	НайденныйПользователь = Справочники.Пользователи.ПустаяСсылка();
	
	Если НЕ Метаданные.ОбщиеМодули.Найти("Пользователи") = Неопределено Тогда
		НайденныйПользователь = Пользователи.НайтиПоИмени(ИмяПользователя);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НайденныйПользователь) Тогда
		НайденныйПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(НайденныйПользователь) Тогда
		ПользовательИБ =  ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		Если НЕ ПользовательИБ = Неопределено Тогда			
			НайденныйПользователь =Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ПользовательИБ.УникальныйИдентификатор);	
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат НайденныйПользователь;
	
КонецФункции

Функция ПолучитьПользователей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(Пользователи.Подразделение.Наименование, """") КАК ПодразделениеНаименование,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен";
	
	РезультатЗапроса	= Запрос.Выполнить();	
	Выборка 			= РезультатЗапроса.Выбрать();
	РезультатМассив		= Новый Массив;

	Пока Выборка.Следующий() Цикл
		ПользовательСсылка	= Выборка.Ссылка;
		ПользовательИБ		= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);		
		// Если у пользователя нет доступа в базу,
		// тогда пропускаем его.
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		User				= Новый Структура("Id, Name, Department");
		User.Name			= ПользовательИБ.Имя;						
		User.Id 			= Строка(ПользовательСсылка.УникальныйИдентификатор());		
		User.Department		= Выборка.ПодразделениеНаименование; 
		РезультатМассив.Добавить(User);
	КонецЦикла;
		
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат РезультатМассив;
	
КонецФункции

#КонецОбласти

#Область ФормированиеТабличныхЧастейHTML

Функция СформироватьТабличнуюЧастьHTML(ПолученныеДанные)

	Если НЕ ТипЗнч(ПолученныеДанные) = Тип("Структура") Тогда
		Возврат "";
	КонецЕсли;
	
	ТипОбъекта = ПолученныеДанные.ObjectType;
	IdОбъекта = ПолученныеДанные.ID;				
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектСсылка = ПолучитьСсылку(ТипОбъекта, IdОбъекта);
	Если ОбъектСсылка = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Объект в системе не найден.'; en = 'An object was not found in the system.'");
		Возврат ТекстСообщения;
	КонецЕсли;	
	
	ШапкаHTMLДокумента	= СформироватьШапкуHTML(Строка(ОбъектСсылка));
	BodyHTMLДокумента	= ПолучитьBodyHTMLДокумента(ОбъектСсылка);
	Результат			= ШапкаHTMLДокумента + Символы.ПС +  BodyHTMLДокумента;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;

КонецФункции 

Функция СформироватьШапкуHTML(Заголовок)

	Шапка =
	"<!DOCTYPE html>
	|<html>
	|<head>
	|<meta charset=""utf-8"">
	|<title>%1</title>
	|%2
	|<!--[if lt IE 9]>      
	|<script src=""http://html5shiv.googlecode.com/svn/trunk/html5.js""></script
	|<![endif]-->
	|</head>";
	
	Стили = СформироватьСтили();
	Шапка = СтрШаблон(Шапка, Заголовок, Стили);

	Возврат Шапка;
	
КонецФункции 

Функция СформироватьСтили()

	ОписаниеСтилей =
	"<style>
	|table {
	|  border-collapse: collapse; 
	|  line-height: 1.1;
	|  font-family: ""Lucida Sans Unicode"", ""Lucida Grande"", sans-serif;
	|  color: #0C213B;
	|}
	|th {
	|  padding: 10px; 
	|  border: 1px solid grey;
	|  background: lightgrey;
	|}
	|td {
	|  font-size: 0.8em;
	|  padding: 5px 7px;
	|  border: 1px solid grey;
	|}
	|</style>";	

	Возврат ОписаниеСтилей;						
						
КонецФункции 

Функция ПолучитьBodyHTMLДокумента(ОбъектСсылка)

	МетаОбъект			= ОбъектСсылка.Метаданные();
	
	ТелоHTMLДокумента	= "<body>" + Символы.ПС;
	
	ИсключитьСтолбцы	= Новый Массив;
	ИсключитьСтолбцы.Добавить("ИД");
	ИсключитьСтолбцы.Добавить("ИД_Прогноз");
	ИсключитьСтолбцы.Добавить("ИДВладельца");
	ИсключитьСтолбцы.Добавить("КоэффициентРаспределения");
	ИсключитьСтолбцы.Добавить("УдалитьНазначениеПлатежа");
	ИсключитьСтолбцы.Добавить("Расчетная");
	ИсключитьСтолбцы.Добавить("Удалить_Сценарий");
	ИсключитьСтолбцы.Добавить("Служебный");
	
	МассивИменТабличныхЧастей	= Новый Массив;
	
    ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	
	Если НЕ ЭтоЕРП И (ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") 
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая")) Тогда
		
		МассивИменТабличныхЧастей.Добавить("Распределение");		
		СформироватьBodyHTMLДокумента(ОбъектСсылка, МетаОбъект, МассивИменТабличныхЧастей, ТелоHTMLДокумента, ИсключитьСтолбцы);
	ИначеЕсли ЭтоЕРП 
		И (ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_кзн_ЗаявкаНаРасходованиеСредств")
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_кзн_ПланируемоеПоступлениеДенежныхСредств")) Тогда
		
		СформироватьBodyHTMLТабличнойЧасти(ОбъектСсылка, МетаОбъект, "Платежи", ТелоHTMLДокумента, ИсключитьСтолбцы);
	ИначеЕсли ЭтоЕРП И ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_кзн_РеестрПлатежей") Тогда
		
		МассивИменТабличныхЧастей.Добавить("ТаблицаПлатежи");		
		СформироватьBodyHTMLДокумента(ОбъектСсылка, МетаОбъект, МассивИменТабличныхЧастей, ТелоHTMLДокумента, ИсключитьСтолбцы);		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_АктуализацияБюджета")
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") 
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_КорректировкаБюджета") Тогда
		
		МассивИменТабличныхЧастей.Добавить("БДДС");		
		СформироватьBodyHTMLДокумента(ОбъектСсылка, МетаОбъект, МассивИменТабличныхЧастей, ТелоHTMLДокумента, ИсключитьСтолбцы);		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_ВерсияОтчета") Тогда
		
		МассивИменТабличныхЧастей.Добавить("ПараметрыХранение");		
		СформироватьBodyHTMLДокумента(ОбъектСсылка, МетаОбъект, МассивИменТабличныхЧастей, ТелоHTMLДокумента, ИсключитьСтолбцы);		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору") Тогда
		
		МассивИменТабличныхЧастей.Добавить("ГрафикПлатежей");		
		МассивИменТабличныхЧастей.Добавить("ГрафикНачислений");		
		МассивИменТабличныхЧастей.Добавить("ГрафикВыдачиТраншей");		
		СформироватьBodyHTMLДокумента(ОбъектСсылка, МетаОбъект, МассивИменТабличныхЧастей, ТелоHTMLДокумента, ИсключитьСтолбцы);		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_КорректировкаКонтрольныхЗначений") Тогда
		
		МассивИменТабличныхЧастей.Добавить("СуммыКорректировок");		
		СформироватьBodyHTMLДокумента(ОбъектСсылка, МетаОбъект, МассивИменТабличныхЧастей, ТелоHTMLДокумента, ИсключитьСтолбцы);		
	ИначеЕсли НЕ ЭтоЕРП И ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_ПроектДоговора") Тогда
		
		МассивИменТабличныхЧастей.Добавить("СтатьиОборотов");		
		СформироватьBodyHTMLДокумента(ОбъектСсылка, МетаОбъект, МассивИменТабличныхЧастей, ТелоHTMLДокумента, ИсключитьСтолбцы);		
	ИначеЕсли НЕ ЭтоЕРП И ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_РеестрПлатежей") Тогда
		
		МассивИменТабличныхЧастей.Добавить("Заявки");		
		СформироватьBodyHTMLДокумента(ОбъектСсылка, МетаОбъект, МассивИменТабличныхЧастей, ТелоHTMLДокумента, ИсключитьСтолбцы);		
	КонецЕсли;	

	ТелоHTMLДокумента	= 	ТелоHTMLДокумента + "</body>" + Символы.ПС + "</html>";
	
	Возврат ТелоHTMLДокумента;
	
КонецФункции 

Процедура СформироватьBodyHTMLДокумента(ОбъектСсылка, МетаОбъект, МассивИменТабличныхЧастей, ТелоHTMLДокумента, ИсключитьСтолбцы)
		
	ДопАналитикиСтруктура	= ПолучитьСтруктуруСДопАналитиками();
	
	// Формируем заголовки
	
	ТелоHTMLДокумента	= ТелоHTMLДокумента + "<h2>" + Строка(ОбъектСсылка) + "</h2>" + Символы.ПС;
	
	Для каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
		
		Попытка
			МетаТабличнаяЧасть	= МетаОбъект.ТабличныеЧасти[ИмяТабличнойЧасти];
		Исключение
			Инфо = НСтр("ru = 'Табличной части с именем ""%1"" не существует.'; en = 'The table part named ""%1"" does not exist.'");
			Инфо = СтрШаблон(Инфо, МетаТабличнаяЧасть.Синоним);
			ТелоHTMLДокумента	= ТелоHTMLДокумента + "<h3>" + Инфо + "</h3>" + Символы.ПС;
			Возврат;
		КонецПопытки;
		
		ТелоHTMLДокумента	= ТелоHTMLДокумента + "<h3>" + МетаТабличнаяЧасть.Синоним + "</h3>" + Символы.ПС;	
		ТелоHTMLДокумента	= ТелоHTMLДокумента + "<table>" + Символы.ПС;
		
		// Формируем заголовок табличной части
		
		ЗаголовокТаблицы	= "<tr>" + Символы.ПС;
		
		Для каждого метаРеквизит Из МетаТабличнаяЧасть.Реквизиты Цикл			
			
			ИмяКолонки = метаРеквизит.Синоним;
			
			Если НЕ ИсключитьСтолбцы.Найти(метаРеквизит.Имя) = Неопределено Тогда
				Продолжить;				
			КонецЕсли;
			
			// Игнорируем столбцы, оканчивающиеся на "_Старый" 
			Если НЕ СтрНайти(метаРеквизит.Имя, "_Старый") = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			НайденнаяАналитика = Неопределено;
			ДопАналитикиСтруктура.Свойство(метаРеквизит.Имя, НайденнаяАналитика);
			
			Если НЕ НайденнаяАналитика = Неопределено Тогда
				
				Если НайденнаяАналитика.Используется Тогда
					ИмяКолонки	= НайденнаяАналитика.Синоним;					
				Иначе
					Продолжить;	
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаголовокТаблицы = ЗаголовокТаблицы + "<th>" + ИмяКолонки + "</th>" + Символы.ПС;			
			
		КонецЦикла;
		
		ЗаголовокТаблицы	= ЗаголовокТаблицы + "</tr>" + Символы.ПС;
		
		ТелоHTMLДокумента	= ТелоHTMLДокумента + ЗаголовокТаблицы;
		
		// Формируем данные табличной части
		
		ДанныеТаблицы		= "";
		
		Для Каждого строка Из ОбъектСсылка[ИмяТабличнойЧасти] Цикл
			
			ДанныеТаблицы	= ДанныеТаблицы + "<tr>" + Символы.ПС;
			
			Для каждого метаРеквизит Из МетаТабличнаяЧасть.Реквизиты Цикл
				
				Если НЕ ИсключитьСтолбцы.Найти(метаРеквизит.Имя) = Неопределено Тогда
					Продолжить;				
				КонецЕсли;
				
				// Игнорируем столбцы, оканчивающиеся на "_Старый" 
				Если НЕ СтрНайти(метаРеквизит.Имя, "_Старый") = 0 Тогда
					Продолжить;	
				КонецЕсли;
				
				НайденнаяАналитика	= Неопределено;
				ДопАналитикиСтруктура.Свойство(метаРеквизит.Имя, НайденнаяАналитика);
				
				Если НЕ НайденнаяАналитика = Неопределено И НЕ НайденнаяАналитика.Используется Тогда
					Продолжить;	
				КонецЕсли;
				
				ДанныеКолонки	= строка[метаРеквизит.Имя];				
				
				ДанныеТаблицы	= ДанныеТаблицы + "<td>" + ДанныеКолонки + "</td>" + Символы.ПС;			
				
			КонецЦикла;
			
			ДанныеТаблицы	= ДанныеТаблицы + "</tr>" + Символы.ПС;
			
		КонецЦикла;
		
		ТелоHTMLДокумента	= ТелоHTMLДокумента + ДанныеТаблицы;		
		ТелоHTMLДокумента	= ТелоHTMLДокумента + "</table>" + Символы.ПС;
		ТелоHTMLДокумента	= ТелоHTMLДокумента + "</br>" + Символы.ПС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьBodyHTMLТабличнойЧасти(ОбъектСсылка, МетаОбъект, ИмяТабличнойЧасти, ТелоHTMLДокумента, ИсключитьСтолбцы)
		
	ДопАналитикиСтруктура	= ПолучитьСтруктуруСДопАналитиками();
	
	// Формируем заголовки.
	ТелоHTMLДокумента	= ТелоHTMLДокумента + "<h2>" + Строка(ОбъектСсылка) + "</h2>" + Символы.ПС;
	ТелоHTMLДокумента	= ТелоHTMLДокумента + "<h3>" + ИмяТабличнойЧасти + "</h3>" + Символы.ПС;	
	ТелоHTMLДокумента	= ТелоHTMLДокумента + "<table>" + Символы.ПС;
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("ДатаПлан",			НСтр("ru = 'Дата платежа'; en = 'Дата платежа'"));
	СтруктураТЧ.Вставить("ДатаПланКрайняя",		НСтр("ru = 'Не позднее'; en = 'Не позднее'"));
	СтруктураТЧ.Вставить("СуммаДокумента",		НСтр("ru = 'Сумма платежа'; en = 'Сумма платежа'"));
	СтруктураТЧ.Вставить("Контрагент",			НСтр("ru = 'Контрагент'; en = 'Контрагент'"));
	СтруктураТЧ.Вставить("ЦФО",					НСтр("ru = 'ЦФО'; en = 'ЦФО'"));
	СтруктураТЧ.Вставить("СтатьяОборотов",		НСтр("ru = 'Статья оборотов'; en = 'Статья оборотов'"));
	СтруктураТЧ.Вставить("БанковскийСчет",		НСтр("ru = 'Банковский счет'; en = 'Банковский счет'"));
	СтруктураТЧ.Вставить("Касса",				НСтр("ru = 'Касса'; en = 'Касса'"));
	СтруктураТЧ.Вставить("Аналитика_1",			НСтр("ru = 'Аналитика_1'; en = 'Аналитика_1'"));
	СтруктураТЧ.Вставить("Аналитика_2",			НСтр("ru = 'Аналитика_2'; en = 'Аналитика_2'"));
	СтруктураТЧ.Вставить("Аналитика_3",			НСтр("ru = 'Аналитика_3'; en = 'Аналитика_3'"));
	СтруктураТЧ.Вставить("Аналитика_4",			НСтр("ru = 'Аналитика_4'; en = 'Аналитика_4'"));
	СтруктураТЧ.Вставить("Аналитика_5",			НСтр("ru = 'Аналитика_5'; en = 'Аналитика_5'"));
	СтруктураТЧ.Вставить("Аналитика_6",			НСтр("ru = 'Аналитика_6'; en = 'Аналитика_6'"));
	СтруктураТЧ.Вставить("Аналитика_7",			НСтр("ru = 'Аналитика_7'; en = 'Аналитика_7'"));
	СтруктураТЧ.Вставить("Аналитика_8",			НСтр("ru = 'Аналитика_8'; en = 'Аналитика_8'"));
	СтруктураТЧ.Вставить("Аналитика_9",			НСтр("ru = 'Аналитика_9'; en = 'Аналитика_9'"));
	СтруктураТЧ.Вставить("Аналитика_10",		НСтр("ru = 'Аналитика_10'; en = 'Аналитика_10'"));
	СтруктураТЧ.Вставить("Аналитика_11",		НСтр("ru = 'Аналитика_11'; en = 'Аналитика_11'"));
	СтруктураТЧ.Вставить("Аналитика_12",		НСтр("ru = 'Аналитика_12'; en = 'Аналитика_12'"));
	СтруктураТЧ.Вставить("СверхБюджета",		НСтр("ru = 'Сверх бюджета'; en = 'Сверх бюджета'"));
	СтруктураТЧ.Вставить("Дата",				НСтр("ru = 'Дата'; en = 'Дата'"));
	СтруктураТЧ.Вставить("Номер",				НСтр("ru = 'Номер'; en = 'Номер'"));
	СтруктураТЧ.Вставить("Ответственный",		НСтр("ru = 'Ответственный'; en = 'Ответственный'"));
	СтруктураТЧ.Вставить("ВидПлана",			НСтр("ru = 'Вид плана'; en = 'Вид плана'"));
	СтруктураТЧ.Вставить("ВалютаДокумента",		НСтр("ru = 'Валюта'; en = 'Валюта'"));
	СтруктураТЧ.Вставить("Статус",				НСтр("ru = 'Статус'; en = 'Статус'"));
	СтруктураТЧ.Вставить("ДатаИзмененияСтатуса",НСтр("ru = 'Дата изменения статуса'; en = 'Дата изменения статуса'"));
	СтруктураТЧ.Вставить("КурсДокумента",		НСтр("ru = 'Курс'; en = 'Курс'"));
	СтруктураТЧ.Вставить("ПометкаУдаления",		НСтр("ru = 'Пометка удаления'; en = 'Пометка удаления'"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабДок.ДатаПлан КАК ДатаПлан,
	|	ТабДок.ДатаПланКрайняя КАК ДатаПланКрайняя,
	|	ТабДок.СуммаДокумента КАК СуммаДокумента,
	|	ТабДок.Контрагент КАК Контрагент,
	|	ТабДок.ЦФО КАК ЦФО,
	|	ТабДок.СтатьяОборотов КАК СтатьяОборотов,
	|	ТабДок.БанковскийСчет КАК БанковскийСчет,
	|	ТабДок.Касса КАК Касса,
	|	ТабДок.Аналитика_1 КАК Аналитика_1,
	|	ТабДок.Аналитика_2 КАК Аналитика_2,
	|	ТабДок.Аналитика_3 КАК Аналитика_3,
	|	ТабДок.Аналитика_4 КАК Аналитика_4,
	|	ТабДок.Аналитика_5 КАК Аналитика_5,
	|	ТабДок.Аналитика_6 КАК Аналитика_6,
	|	ТабДок.Аналитика_7 КАК Аналитика_7,
	|	ТабДок.Аналитика_8 КАК Аналитика_8,
	|	ТабДок.Аналитика_9 КАК Аналитика_9,
	|	ТабДок.Аналитика_10 КАК Аналитика_10,
	|	ТабДок.Аналитика_11 КАК Аналитика_11,
	|	ТабДок.Аналитика_12 КАК Аналитика_12,
	|	ТабДок.СверхБюджета КАК СверхБюджета,
	|	ТабДок.Дата КАК Дата,
	|	ТабДок.Номер КАК Номер,
	|	ТабДок.Ответственный КАК Ответственный,
	|	ТабДок.ВидПлана КАК ВидПлана,
	|	ТабДок.ВалютаДокумента КАК ВалютаДокумента,
	|	ТабСтатусы.Статус КАК Статус,
	|	ТабСтатусы.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса,
	|	ТабДок.КурсДокумента КАК КурсДокумента,
	|	ТабДок.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	&ТабДок КАК ТабДок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК ТабСтатусы
	|		ПО ТабДок.Ссылка = ТабСтатусы.Объект
	|			И (ТабСтатусы.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	|ГДЕ
	|	ТабДок.ДокументПланирования = &ДокументПланирования";
	
	Если ТипЗнч(ОбъектСсылка) = ТИп("ДокументСсылка.бит_кзн_ЗаявкаНаРасходованиеСредств") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "&ТабДок", "Документ.бит_кзн_ПлатежнаяПозиция");
	Иначе	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "&ТабДок", "Документ.бит_кзн_ПозицияПоступления");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "ТабДок.СверхБюджета КАК СверхБюджета,", "");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПланирования", ОбъектСсылка);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Выборка	= Результат.Выбрать();
	
	// Формируем заголовок табличной части.
	ЗаголовокТаблицы	= "<tr>" + Символы.ПС;
	Для каждого Колонка Из Результат.Колонки Цикл			
		Если НЕ ИсключитьСтолбцы.Найти(Колонка.Имя) = Неопределено Тогда
			Продолжить;				
		КонецЕсли;
		// Игнорируем столбцы, оканчивающиеся на "_Старый" 
		Если НЕ СтрНайти(Колонка.Имя, "_Старый") = 0 Тогда
			Продолжить;	
		КонецЕсли;
		ИмяКолонки = СтруктураТЧ[Колонка.Имя];
		НайденнаяАналитика = Неопределено;
		ДопАналитикиСтруктура.Свойство(Колонка.Имя, НайденнаяАналитика);
		Если НЕ НайденнаяАналитика = Неопределено Тогда
			Если НайденнаяАналитика.Используется Тогда
				ИмяКолонки	= НайденнаяАналитика.Синоним;					
			Иначе
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
		ЗаголовокТаблицы = ЗаголовокТаблицы + "<th>" + ИмяКолонки + "</th>" + Символы.ПС;			
	КонецЦикла;
	
	ЗаголовокТаблицы	= ЗаголовокТаблицы + "</tr>" + Символы.ПС;
	ТелоHTMLДокумента	= ТелоHTMLДокумента + ЗаголовокТаблицы;
	
	// Формируем данные табличной части.
	ДанныеТаблицы = "";
	Пока Выборка.Следующий() Цикл
		ДанныеТаблицы	= ДанныеТаблицы + "<tr>" + Символы.ПС;
		Для каждого Колонка Из Результат.Колонки Цикл
			Если НЕ ИсключитьСтолбцы.Найти(Колонка.Имя) = Неопределено Тогда
				Продолжить;				
			КонецЕсли;
			// Игнорируем столбцы, оканчивающиеся на "_Старый". 
			Если НЕ СтрНайти(Колонка.Имя, "_Старый") = 0 Тогда
				Продолжить;	
			КонецЕсли;
			НайденнаяАналитика	= Неопределено;
			ДопАналитикиСтруктура.Свойство(Колонка.Имя, НайденнаяАналитика);
			Если НЕ НайденнаяАналитика = Неопределено И НЕ НайденнаяАналитика.Используется Тогда
				Продолжить;	
			КонецЕсли;
			ДанныеКолонки	= Выборка[Колонка.Имя];				
			ДанныеТаблицы	= ДанныеТаблицы + "<td>" + Строка(ДанныеКолонки) + "</td>" + Символы.ПС;			
		КонецЦикла;
		ДанныеТаблицы	= ДанныеТаблицы + "</tr>" + Символы.ПС;
	КонецЦикла;
	
	ТелоHTMLДокумента	= ТелоHTMLДокумента + ДанныеТаблицы;		
	ТелоHTMLДокумента	= ТелоHTMLДокумента + "</table>" + Символы.ПС;
	ТелоHTMLДокумента	= ТелоHTMLДокумента + "</br>" + Символы.ПС;
	
КонецПроцедуры

Функция ПолучитьСписокТиповОбъектовДляОтображенияТабличныхЧастей(ЭтоЕРП)

	СписокТиповОбъектов	= Новый Массив;
	СписокТиповОбъектов.Добавить("ДокументСсылка.бит_АктуализацияБюджета");
	СписокТиповОбъектов.Добавить("ДокументСсылка.бит_ВерсияОтчета");
	СписокТиповОбъектов.Добавить("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору");
	СписокТиповОбъектов.Добавить("ДокументСсылка.бит_КорректировкаБюджета");
	СписокТиповОбъектов.Добавить("ДокументСсылка.бит_КорректировкаКонтрольныхЗначений");
	СписокТиповОбъектов.Добавить("ДокументСсылка.бит_ФормаВводаБюджета");
	Если ЭтоЕРП Тогда
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_кзн_ЗаявкаНаРасходованиеСредств");
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_кзн_ПланируемоеПоступлениеДенежныхСредств");
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_кзн_РеестрПлатежей");
	Иначе	
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_РеестрПлатежей");
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств");
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая");
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_ПроектДоговора");
	КонецЕсли;

	Возврат СписокТиповОбъектов;
	
КонецФункции 

#КонецОбласти

#Область ОстаткиПоБюджету

Функция ПолучитьОстаткиПоБюджету(ПолученныеДанные)

	Если НЕ ТипЗнч(ПолученныеДанные) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипДокумента			= ПолученныеДанные.ObjectType;
	УникальныйИдентификатор	= Новый УникальныйИдентификатор(ПолученныеДанные.Id);
	ОбъектСсылка			= Документы[ТипДокумента].ПолучитьСсылку(УникальныйИдентификатор);	
	ТабличныйДокумент		= Новый ТабличныйДокумент;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Неопределено;	
	КонецЕсли;		
	
	ОбработкаОбъект			= Обработки.бит_ИнформационнаяПанель.Создать();
	ОбработкаОбъект.Объект	= ОбъектСсылка;	
		
    ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	Если ЭтоЕРП Тогда
		Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_кзн_ЗаявкаНаРасходованиеСредств") Тогда
			ДеревоИнформация = ОбработкаОбъект.ПолучитьИнформациюПоЗаявке();
		ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_пз_ЗаявкаНаЗатраты") Тогда
			ДеревоИнформация = ОбработкаОбъект.ПолучитьИнформациюПоЗаявкеНаЗатраты();
		Иначе	
			ТекстСообщения = НСтр("ru = 'По данному объекту нет дополнительной информации.';
									|en = 'There is no additional information on this property.'");
			Возврат ТекстСообщения;
		КонецЕсли;
	Иначе	
		Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
			ДеревоИнформация = ОбработкаОбъект.ПолучитьИнформациюПоОбщейЗаявке();
		ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
			ДеревоИнформация = ОбработкаОбъект.ПолучитьИнформациюПоЗаявке();
		ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			ДеревоИнформация = ОбработкаОбъект.ПолучитьИнформациюПоЗаявкеНаЗатраты();
		ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_мто_ЗаявкаНаЗакупку") Тогда
			ДеревоИнформация = ОбработкаОбъект.ПолучитьИнформациюПоЗаявкеНаЗакупку();
		Иначе	
			ТекстСообщения = НСтр("ru = 'По данному объекту нет дополнительной информации.';
									|en = 'There is no additional information on this property.'");
			Возврат ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
	РезультатМассив	= Новый Массив;
	Для Каждого Строка Из ДеревоИнформация.Строки Цикл	
		
		Если Строка.ИмяПараметра = НСтр("ru = 'Суммы документа'; en = 'Суммы документа'") Тогда
			Name		= "DocumentSums";					
			Description	= Строка.ИмяПараметра;
		ИначеЕсли Строка.ИмяПараметра = НСтр("ru = 'Сведения об оплате'; en = 'Сведения об оплате'") Тогда
			Name		= "PaymentDetails";					
			Description	= Строка.ИмяПараметра;
		ИначеЕсли СтрНайти(Строка.ИмяПараметра, "Остатки") <> 0 Тогда
			Name		= "Balances";					
			Description	= Строка.ИмяПараметра;
		Иначе
			Продолжить;			
		КонецЕсли;
		
		Раздел			= Новый Структура("Name, Description, Details", Name, Description);
		ДеталиМассив	= Новый Массив;
		
		Для Каждого строка2 Из Строка.Строки Цикл
			Если строка2.ЭтоГруппа Тогда
				СтатьиОборотов	=	Новый Массив;
				Для Каждого строка3 Из строка2.Строки Цикл
					Entry		=	 Новый Структура("Name, Value", строка3.ИмяПараметра, Строка(строка3.ЗначениеПараметра));						
					СтатьиОборотов.Добавить(Entry);
				КонецЦикла;
				Detail			=	 Новый Структура("Name, Entries", строка2.ИмяПараметра, СтатьиОборотов);
			Иначе
				Detail			=	 Новый Структура("Name, Value", строка2.ИмяПараметра, Строка(строка2.ЗначениеПараметра));
			КонецЕсли;
			ДеталиМассив.Добавить(Detail);
		КонецЦикла;
		
		Раздел.Details	= ДеталиМассив;
		РезультатМассив.Добавить(Раздел);
		
	КонецЦикла;
	
	Возврат РезультатМассив;
	
КонецФункции 

Функция ПолучитьСписокТиповОбъектовДляОтображенияОстатков(ЭтоЕРП)

	СписокТиповОбъектов	= Новый Массив;
	Если ЭтоЕРП Тогда
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_кзн_ЗаявкаНаРасходованиеСредств");
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_пз_ЗаявкаНаЗатраты");
	Иначе	
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая");
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств");
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_ЗаявкаНаЗатраты");
		СписокТиповОбъектов.Добавить("ДокументСсылка.бит_мто_ЗаявкаНаЗакупку");
	КонецЕсли;	
	
	Возврат СписокТиповОбъектов;
	
КонецФункции 

#КонецОбласти

Функция СериализоватьСписокВиз(СписокВиз)
	
	Визы = СписокВиз.ВыгрузитьЗначения();
	РезСтрока = СтрСоединить(Визы, ",");
	
	Возврат РезСтрока;
	
КонецФункции

Функция ИнформацияОСервисе()
	
	УстановитьПривилегированныйРежим(Истина);
	СисИнфо 								= бит_ОбщегоНазначения.ПолучитьСведенияОПрограмме();
	СведенияСтруктура 						= Новый Структура("ServiceVersion, ConfigurationName, ConfigurationVersion");
	СведенияСтруктура.ServiceVersion 		= ВерсияСервиса();
	СведенияСтруктура.ConfigurationName 	= СисИнфо.Имя_1С;
	СведенияСтруктура.ConfigurationVersion 	= СисИнфо.НомерРелиза_1С;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СведенияСтруктура;
	
КонецФункции

Функция ПолучитьСтруктуруСДопАналитиками()
	
	ДопАналитикиМассив		= ПолучитьНазначенияДополнительныхИзмерений();
	МаксКолвоДопАналитик	= бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	ДопАналитикиСтруктура	= Новый Структура;
		
	Для н = 1 По МаксКолвоДопАналитик Цикл
		АналитикаСтруктура	= Новый Структура("Синоним, Используется", "", Ложь);
		ДопАналитикиСтруктура.Вставить("Аналитика_"+н, АналитикаСтруктура);
	КонецЦикла;
	
	Для каждого аналитика Из ДопАналитикиМассив Цикл
		Если НЕ ДопАналитикиСтруктура.Свойство(аналитика) = Неопределено Тогда
			ДопАналитикиСтруктура[аналитика.Name].Синоним		= аналитика.Description;
			ДопАналитикиСтруктура[аналитика.Name].Используется	= Истина;			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДопАналитикиСтруктура;
	
КонецФункции

Функция ПолучитьМассивДополнительныхРеквизитовОбъекта(ОбъектСсылка)
	
	МетаОбъект		=	ОбъектСсылка.Метаданные();
	РезультатМассив	=	Новый Массив;
	ИмяТаблицы		=	"ДополнительныеРеквизиты";
	МетаТаблица		= 	МетаОбъект.ТабличныеЧасти.Найти(ИмяТаблицы);
	Если НЕ МетаТаблица = Неопределено Тогда
		Для каждого строка Из ОбъектСсылка[ИмяТаблицы] Цикл
				Property				=	Новый Структура("Id, Description, Value");
				Property.Id            	=   Строка(строка.Свойство.УникальныйИдентификатор());
				Property.Description    =  	строка.Свойство.Заголовок;
				Property.Value          =	Строка(строка.Значение);
				РезультатМассив.Добавить(Property);
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатМассив;

КонецФункции 

Функция ИспользоватьВнутреннююТаблицу(ОбъектСсылка)
	
	Результат = Ложь;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_РеестрПлатежей") Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
 
Функция ВерсияСервиса()
	
	Возврат "1.1.1.0";
	
КонецФункции

Процедура ЗарегистрироватьИнформацию(ИмяСобытия, ТекстИнформации = "")
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,
		Метаданные.HTTPСервисы.bit_ApprovalServiceNew,, ТекстИнформации);
	
КонецПроцедуры

Процедура ЗарегистрироватьОшибку(ИмяСобытия, ТекстОшибки = "")
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
		Метаданные.HTTPСервисы.bit_ApprovalServiceNew,, ТекстОшибки);
	
КонецПроцедуры

Функция ЗначениеИзСтрокиJSON(Значение)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Значение);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОтветJSON(ПередаваемыеДанные)

	СтрокаДляОтвета	= СформироватьJSON(ПередаваемыеДанные);
	Ответ			= Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/JSON; charset=utf-8"); 
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);	
	
	Возврат Ответ;
	
КонецФункции

Функция СформироватьJSON(ПередаваемыеДанные)

	ЗаписьJSON 			= Новый ЗаписьJSON;
	ПараметрыЗаписиJSON	= Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON); 
	ЗаписатьJSON(ЗаписьJSON, ПередаваемыеДанные); 
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Возврат СтрокаДляОтвета;
	
КонецФункции

Функция СформироватьОтветHTML(ТелоДокумента)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "text/html; charset=utf-8"); 
	Ответ.УстановитьТелоИзСтроки(ТелоДокумента, КодировкаТекста.UTF8);	
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьСсылку(ТипОбъекта, ИД)
	
	ПозицияРазделителя 	= Найти(ТипОбъекта, ".");
	
	Если НЕ ПозицияРазделителя = 0 Тогда
		ТипОбъекта		= Сред(ТипОбъекта, ПозицияРазделителя+1, СтрДлина(ТипОбъекта));
	КонецЕсли;
	
	Попытка
		УИД				= Новый УникальныйИдентификатор(ИД);			
		ОбъектСсылка 	= Документы[ТипОбъекта].ПолучитьСсылку(УИД);	
		ДокументОбъект	= ОбъектСсылка.ПолучитьОбъект();
	Исключение
		ДокументОбъект	= Неопределено;
	КонецПопытки;
		
	Если ДокументОбъект = Неопределено Тогда
		ОбъектСсылка	=	Неопределено;
	КонецЕсли;
	
	Возврат ОбъектСсылка;
	
КонецФункции

Функция ПолучитьЗначениеРеквизита(ОбъектСсылка, МетаОбъект, ИмяРеквизита)
	
	МетаРеквизит = МетаОбъект.Реквизиты.Найти(ИмяРеквизита);
	Если МетаРеквизит = Неопределено Тогда
		Попытка
			МетаРеквизит = МетаОбъект.СтандартныеРеквизиты[ИмяРеквизита];	
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	
	Возврат ?(МетаРеквизит = Неопределено, "", ОбъектСсылка[ИмяРеквизита]);
	
КонецФункции

// Функция реализует проверку настройки "Необходим комментарий или задача" по всем вариантам
Функция НеобходимКомментарийЗадачаПолнаяПроверка(Организация, ПолноеИмяОбъекта, ВидРешения)
	
	ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ПолноеИмяОбъекта);
	
	// 1. Организация, ОбъектСистемы, ВидРешения - все реквизиты заполнены	
	
	РезультатСтруктура = НеобходимКомментарийЗадача(Организация, ОбъектСистемы, ВидРешения);	

	Если РезультатСтруктура.ЗаписьСуществует Тогда
		Возврат РезультатСтруктура.НеобходимКомментарийЗадача; 
	КонецЕсли;
	
	// 2. ОбъектСистемы, ВидРешения - реквизиты заполнены, Организация - незаполнена
	
	РезультатСтруктура = НеобходимКомментарийЗадача(Справочники.Организации.ПустаяСсылка(), 
													ОбъектСистемы, 
													ВидРешения);	

	Если РезультатСтруктура.ЗаписьСуществует Тогда
		Возврат РезультатСтруктура.НеобходимКомментарийЗадача; 
	КонецЕсли;
	
	// 3. Организация, ВидРешения - реквизиты заполнены, ОбъектСистемы - незаполнен
	
	РезультатСтруктура = НеобходимКомментарийЗадача(Организация, 
													Справочники.бит_ОбъектыСистемы.ПустаяСсылка(), 
													ВидРешения);	

	Если РезультатСтруктура.ЗаписьСуществует Тогда
		Возврат РезультатСтруктура.НеобходимКомментарийЗадача; 
	КонецЕсли;
	
	// 4. ВидРешения - реквизит заполнены, Организация, ОбъектСистемы - незаполнены
	
	РезультатСтруктура = НеобходимКомментарийЗадача(Справочники.Организации.ПустаяСсылка(), 
													Справочники.бит_ОбъектыСистемы.ПустаяСсылка(), 
													ВидРешения);	

	Если РезультатСтруктура.ЗаписьСуществует Тогда
		Возврат РезультатСтруктура.НеобходимКомментарийЗадача; 
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция проверяет значение на "битую" ссылку.
// 
// Параметры:
//  ЗначениеДляПроверки  - Произвольный.
// 
// Возвращаемое значение:
//   ЗначениеДоступно   - Булево.
// 
Функция СсылкаДоступна(ЗначениеДляПроверки)
	
	ЗначениеДоступно = Истина;
	
	Если ЗначениеЗаполнено(ЗначениеДляПроверки) 
		И НЕ бит_ОбщегоНазначения.ЭтоПримитивныйТип(ЗначениеДляПроверки) Тогда
		
		Попытка
			ТекОбъект = ЗначениеДляПроверки.ПолучитьОбъект();
			Если ТекОбъект = Неопределено Тогда
				ЗначениеДоступно = Ложь;
			КонецЕсли; 
		Исключение
			ЗначениеДоступно = Ложь;
		КонецПопытки;
		
	КонецЕсли; 
	
	Возврат ЗначениеДоступно;
	
КонецФункции

// Функция проверяет установку настройки "Необходим комментарий или задача"
// Возвращает структуру "ЗаписьСуществует, НеобходимКомментарийЗадача"
Функция НеобходимКомментарийЗадача(Организация, ОбъектСистемы, ВидРешения)

	Запрос = Новый Запрос;
	ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	Если ЭтоЕРП Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРешенийСогласования.Организация КАК Организация,
		|	ВидыРешенийСогласования.ОбъектСистемы КАК ОбъектСистемы,
		|	ВидыРешенийСогласования.ВидРешения КАК ВидРешения,
		|	ЛОЖЬ КАК НеобходимКомментарийЗадача
		|ИЗ
		|	РегистрСведений.бит_НазначениеВидовРешенийСогласования КАК ВидыРешенийСогласования
		|ГДЕ
		|	ВидыРешенийСогласования.Организация = &Организация
		|	И ВидыРешенийСогласования.ОбъектСистемы = &ОбъектСистемы
		|	И ВидыРешенийСогласования.ВидРешения = &ВидРешения";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРешенийСогласования.Организация КАК Организация,
		|	ВидыРешенийСогласования.ОбъектСистемы КАК ОбъектСистемы,
		|	ВидыРешенийСогласования.ВидРешения КАК ВидРешения,
		|	ВидыРешенийСогласования.НеобходимКомментарийЗадача КАК НеобходимКомментарийЗадача
		|ИЗ
		|	РегистрСведений.бит_НазначениеВидовРешенийСогласования КАК ВидыРешенийСогласования
		|ГДЕ
		|	ВидыРешенийСогласования.Организация = &Организация
		|	И ВидыРешенийСогласования.ОбъектСистемы = &ОбъектСистемы
		|	И ВидыРешенийСогласования.ВидРешения = &ВидРешения";
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВидРешения"		, ВидРешения);
	Запрос.УстановитьПараметр("ОбъектСистемы"	, ОбъектСистемы);
	Запрос.УстановитьПараметр("Организация"		, Организация);
	
	РезультатТЗ			 = Запрос.Выполнить().Выгрузить();	
	ЗаписьСуществует	 = РезультатТЗ.Количество() > 0;
	НеобходимКомментарий = ?(ЗаписьСуществует, РезультатТЗ[0].НеобходимКомментарийЗадача, Ложь);
	РезультатСтруктура	 = Новый Структура("ЗаписьСуществует, НеобходимКомментарийЗадача", ЗаписьСуществует, НеобходимКомментарий);
	
	Возврат РезультатСтруктура;	
	
КонецФункции

Функция ПолучитьМассивОбъектов(МассивИменОбъектов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИменОбъектов", МассивИменОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыСистемы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_ОбъектыСистемы КАК ОбъектыСистемы
	|ГДЕ
	|	ОбъектыСистемы.ИмяОбъекта В(&МассивИменОбъектов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	РезультатМассив		= Новый Массив;
	РезультатМассив.Добавить(Справочники.бит_ОбъектыСистемы.ПустаяСсылка());
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатМассив.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат РезультатМассив;
	
КонецФункции

Функция УстановитьРешенияГрупповое(Objects)

	УстановитьПривилегированныйРежим(Истина);	
	
	флНеобходимоОбновить = Ложь;
	// Инициализация таблицы документов.
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Выполнять",			Новый ОписаниеТипов("Булево"));
	ТаблицаДокументы.Колонки.Добавить("ЕстьНеустановленные",Новый ОписаниеТипов("Булево"));
	ТаблицаДокументы.Колонки.Добавить("Ссылка");
	ТаблицаДокументы.Колонки.Добавить("ТипДокумента");
	ТаблицаДокументы.Колонки.Добавить("Организация",		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДокументы.Колонки.Добавить("Комментарий",		Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("Id",					Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("ПолноеИмяОбъекта",	Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("Решение",			Новый ОписаниеТипов("СправочникСсылка.бит_ВидыРешенийСогласования"));
	
	ОбъектВизирования 	= Неопределено;
	
	// Разбор полученных данных и заполнение таблицы документов.
	ТаблицаРешений = Новый ТаблицаЗначений;
	ТаблицаРешений.Колонки.Добавить("Решение", Новый ОписаниеТипов("СправочникСсылка.бит_ВидыРешенийСогласования"));
	Для каждого Модель Из Objects Цикл
		Если ЗначениеЗаполнено(Модель.Decision) Тогда		
			Решение = Справочники.бит_ВидыРешенийСогласования.НайтиПоНаименованию(Модель.Decision);	
		Иначе			
			Решение = Справочники.бит_ВидыРешенийСогласования.ПустаяСсылка();		
		КонецЕсли;
		Если Решение.Пустая() Тогда		
			ТекстСообщения = НСтр("ru = 'Решение ""%1"" не найдено.'; en = 'Решение ""%1"" не найдено.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Модель.Decision); 
			Возврат ТекстСообщения;
		КонецЕсли;

		МенеджерКоллекции 	= бит_ОбщегоНазначения.ПолучитьМенеджер(Модель.CollectionName);
		МенеджерОбъекта   	= МенеджерКоллекции[Модель.ObjectName];
		Ссылка 				= МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(Модель.ID));
		ОбъектВизирования 	= Ссылка;
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			
			НоваяСтрокаРешение 				= ТаблицаРешений.Добавить();
			НоваяСтрокаРешение.Решение 		= Решение;

			НоваяСтрока 					= ТаблицаДокументы.Добавить();
			НоваяСтрока.Выполнять 			= Истина;
			НоваяСтрока.ЕстьНеустановленные = Истина;
			НоваяСтрока.Ссылка 				= Ссылка;
			НоваяСтрока.ТипДокумента 		= ТипЗнч(Ссылка);
			НоваяСтрока.Комментарий			= Модель.Comment;
			НоваяСтрока.Id					= Модель.Id;
			НоваяСтрока.ПолноеИмяОбъекта	= Ссылка.Метаданные().ПолноеИмя();
			НоваяСтрока.Решение				= Решение;

			МетаОбъект = Ссылка.Метаданные();
			Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаОбъект) Тогда
				НоваяСтрока.Организация = Ссылка.Организация;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаРешений.Свернуть("Решение");
	
	// Проверяем установлен ли комментарий, либо создана ли задача.
	МассивСПустымиКомментариями = Новый Массив;
	ТекНаборВизы		= РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	ТаблицаВизыПустая 	= ТекНаборВизы.Выгрузить();
	ТаблицаВизыОбщая	= Обработки.бит_РабочееМестоВизирования.ПолучитьОбщуюТаблицуВиз(ТаблицаДокументы.ВыгрузитьКолонку("Ссылка"));
	
	Для Каждого строка Из ТаблицаДокументы Цикл
		Если НеобходимКомментарийЗадачаПолнаяПроверка(строка.Организация, строка.ПолноеИмяОбъекта, строка.Решение) Тогда
			Если НЕ ЗначениеЗаполнено(строка.Комментарий) Тогда
				Виза = ПолучитьТекущуюВизу(строка.Ссылка, ТаблицаВизыОбщая, ТаблицаВизыПустая);
				Если НЕ ЕстьЗадачиПоДокументу(строка.Ссылка, Виза) Тогда
					МассивСПустымиКомментариями.Добавить(Новый Структура("Id", строка.Id));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСПустымиКомментариями.Количество() > 0 Тогда
		Возврат МассивСПустымиКомментариями;	
	КонецЕсли;
	
	// Подготовка параметров.
	ДоступныеРешения 	= Новый СписокЗначений;
	ТаблицаРешения 		= Обработки.бит_РабочееМестоВизирования.ПолучитьТаблицуДоступныхРешений(ТаблицаДокументы, ДоступныеРешения);
	Для каждого СтрРешение Из ТаблицаРешений Цикл
		СтрНастройки = Новый Структура;
		СтрНастройки.Вставить("РежимФильтраВиз",			3);
		СтрНастройки.Вставить("КомментироватьВыполнение",	Ложь);
		СтрНастройки.Вставить("Решение",					СтрРешение.Решение);
		Отбор = Новый Структура;
		Отбор.Вставить("Решение", СтрРешение.Решение);
		ИтоговаяТаблицаДокументов = ТаблицаДокументы.Скопировать(Отбор);
		флНеобходимоОбновить= Обработки.бит_РабочееМестоВизирования.УстановитьРешения(ИтоговаяТаблицаДокументов, ТаблицаРешения, СтрНастройки);
	КонецЦикла;	
	
	// Получить визы доступные после установки.
	ТекПользователь 	= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь");
	СтруктураОтбор 		= Новый Структура("Объект", ОбъектВизирования);
	НаборВиз 			= бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	ТаблицаВизы 		= НаборВиз.Выгрузить();
	СписокДоступныхВиз 	= ДоступныеВизы(ОбъектВизирования);
	РезСтрока 			= СериализоватьСписокВиз(СписокДоступныхВиз);
	ИмяСобытия = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Вызов метода SetDecisionListDifferentStatuses'");
	ЗарегистрироватьИнформацию(ИмяСобытия, РезСтрока);				
	
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат РезСтрока;
	
КонецФункции

Функция ДанныеТабличнойЧасти(ПолученныеДанные = Неопределено) 
	
	Если НЕ ТипЗнч(ПолученныеДанные) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипОбъекта = ПолученныеДанные.ObjectType;
	IdОбъекта = ПолученныеДанные.ID;				
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектСсылка = ПолучитьСсылку(ТипОбъекта, IdОбъекта);
	Если ОбъектСсылка = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;	
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектСсылка)
		И ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.бит_РеестрПлатежей") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	бит_РеестрПлатежейЗаявки.Заявка КАК Заявка,
		|	бит_РеестрПлатежейЗаявки.Оплачено КАК Оплачено,
		|	бит_РеестрПлатежейЗаявки.ФормаОплаты КАК ФормаОплаты,
		|	бит_РеестрПлатежейЗаявки.Организация КАК Организация,
		|	бит_РеестрПлатежейЗаявки.БанковскийСчетОрганизация КАК БанковскийСчетОрганизация,
		|	бит_РеестрПлатежейЗаявки.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
		|	бит_РеестрПлатежейЗаявки.ВалютаДокумента КАК ВалютаДокумента,
		|	бит_РеестрПлатежейЗаявки.Сумма КАК Сумма,
		|	бит_РеестрПлатежейЗаявки.СуммаОстаток КАК СуммаОстаток,
		|	бит_РеестрПлатежейЗаявки.Валюта КАК Валюта,
		|	бит_РеестрПлатежейЗаявки.СуммаКОплатеНач КАК СуммаКОплатеНач,
		|	бит_РеестрПлатежейЗаявки.СуммаКОплате КАК СуммаКОплате
		|ИЗ
		|	Документ.бит_РеестрПлатежей.Заявки КАК бит_РеестрПлатежейЗаявки
		|ГДЕ
		|	бит_РеестрПлатежейЗаявки.Ссылка = &Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Результат;
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеСтроки = Новый Массив();
			
			// Заявка.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 0; 
			ПарамтрыКолонки.Title = НСтр("ru = 'Заявка'; en = 'Request'"); 
			ПарамтрыКолонки.Value = Строка(Выборка.Заявка);
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			// Оплачено.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 2; 
			ПарамтрыКолонки.Title = НСтр("ru = 'В оплату'; en = 'Pay'"); 
			ПарамтрыКолонки.Value = ?(Выборка.Оплачено,"true", "false");
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			// ФормаОплаты.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 0; 
			ПарамтрыКолонки.Title = НСтр("ru = 'Форма оплаты'; en = 'Payment Method'"); 
			ПарамтрыКолонки.Value = Строка(Выборка.ФормаОплаты);
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			// Организация.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 0; 
			ПарамтрыКолонки.Title = НСтр("ru = 'Организация'; en = 'Organization'"); 
			ПарамтрыКолонки.Value = Строка(Выборка.Организация);
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			// БанковскийСчетОрганизация.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 0; 
			ПарамтрыКолонки.Title = НСтр("ru = 'Банковский счет / Касса'; en = 'Bank account / Cash account'"); 
			ПарамтрыКолонки.Value = Строка(Выборка.БанковскийСчетОрганизация);
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			// ПлатежнаяПозиция.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 0; 
			ПарамтрыКолонки.Title = НСтр("ru = 'Платежная позиция'; en = 'Payment record'"); 
			ПарамтрыКолонки.Value = Строка(Выборка.ПлатежнаяПозиция);
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			// ВалютаДокумента.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 0; 
			ПарамтрыКолонки.Title = НСтр("ru = 'Валюта'; en = 'Currency'"); 
			ПарамтрыКолонки.Value = Строка(Выборка.ВалютаДокумента);
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			// Сумма.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 0; 
			ПарамтрыКолонки.Title = НСтр("ru = 'Сумма'; en = 'Amount'"); 
			ПарамтрыКолонки.Value = Строка(Выборка.Сумма);
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			// СуммаОстаток.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 0; 
			ПарамтрыКолонки.Title = НСтр("ru = 'Сумма остаток'; en = 'Amount balance'"); 
			ПарамтрыКолонки.Value = Строка(Выборка.СуммаОстаток);
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			// СуммаКОплатеНач.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 0; 
			ПарамтрыКолонки.Title = НСтр("ru = 'Сумма (план)'; en = 'Total (Schedule)'"); 
			ПарамтрыКолонки.Value = Строка(Выборка.СуммаКОплатеНач);
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			// СуммаКОплате.
			ПарамтрыКолонки = НовыйПарамтрыКолонки();
			ПарамтрыКолонки.Id = XMLСтрока(Выборка.Заявка);
			ПарамтрыКолонки.Type = 1; 
			ПарамтрыКолонки.Title = НСтр("ru = 'Сумма к оплате'; en = 'Amount payable'"); 
			ПарамтрыКолонки.Value = Строка(Выборка.СуммаКОплате);
			ДанныеСтроки.Добавить(ПарамтрыКолонки);
			
			Результат.Добавить(ДанныеСтроки);
		КонецЦикла; 
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;
	
КонецФункции

Функция НовыйПарамтрыКолонки()
	
	ПараметрыКолонки = Новый Структура;
	ПараметрыКолонки.Вставить("Id",		"");
	ПараметрыКолонки.Вставить("Type",	0);
	ПараметрыКолонки.Вставить("Title",	"");
	ПараметрыКолонки.Вставить("Value",	"");
	
	Возврат ПараметрыКолонки;	
	
КонецФункции
 

Функция ПолучитьОбъектПоИдентификатору(ПараметрыОбъекта)
	
	Ид				= ПараметрыОбъекта.ID;
	Имя				= ПараметрыОбъекта.ObjectName;
	ИмяПользователя	= ПараметрыОбъекта.User;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекПользователь = НайтиПользователя(ИмяПользователя);
	Если НЕ ЗначениеЗаполнено(ТекПользователь) Тогда
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода GetObject.
									|Не удалось найти пользователя по имени: %1'");		
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяПользователя);
		ИмяСобытия = НСтр("ru = 'approval/v1/object'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
	КонецЕсли; 
	
	Результат = Неопределено;
	
	// Получаем ссылку.
	Если НЕ ЗначениеЗаполнено(Имя) Тогда
		ТекстСообщения = НСтр("ru = 'HTTP-сервис bit_ApprovalServiceNew. Ошибка метода GetObject.
									|Пустое значение обязательного параметра ObjectName'");		
		ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяПользователя);
		ИмяСобытия = НСтр("ru = 'approval/v1/object'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗарегистрироватьОшибку(ИмяСобытия, ТекстСообщения);			
		Возврат Результат;
	КонецЕсли;
	
	Если ЭтоСправочник(Имя) Тогда
		МенеджерОбъекта = Справочники[Имя];
	Иначе
		МенеджерОбъекта = Документы[Имя];
	КонецЕсли;
	
	УИД = Новый УникальныйИдентификатор(Ид);
	СсылкаОбъекта = МенеджерОбъекта.ПолучитьСсылку(УИД);
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаОбъекта) Тогда
		Объекты = Новый Массив();
		Объекты.Добавить(СсылкаОбъекта);
		РеквизитыОбъектов = РеквизитыОбъектов(Объекты, ТекПользователь);	
		// Получение сведений о прикрепленных файлах.
		ПрикрепленныеФайлы 	= Новый Соответствие;
		флЕстьФайлыБСП 		= бит_РаботаСМетаданными.ЕстьСправочник("ВерсииФайлов") И бит_РаботаСМетаданными.ЕстьСправочник("Файлы");
		Если флЕстьФайлыБСП Тогда
			ПрикрепленныеФайлы	= ПолучитьИнформациюФайлов(Объекты);
		КонецЕсли;  // Есть подсистема файлов БСП.
		
		ЗаявкаНаРС = РеквизитыОбъектов.Найти(СсылкаОбъекта, "Ссылка");
		Если ЗаявкаНаРС <> Неопределено Тогда
			Результат = ОбъектВизирования(ЗаявкаНаРС, ПрикрепленныеФайлы);
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоСправочник(Значение)
	
	Результат = Ложь;
	ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	Если ЭтоЕРП Тогда
		СправочникиВизирования = Новый Массив();
		СправочникиВизирования.Добавить("ДоговорыКонтрагентов");
		СправочникиВизирования.Добавить("ДоговорыКредитовИДепозитов");
		СправочникиВизирования.Добавить("ДоговорыЛизинга");
		СправочникиВизирования.Добавить("СоглашенияСКлиентами");
		СправочникиВизирования.Добавить("СоглашенияСПоставщиками");
		Если СправочникиВизирования.Найти(Значение) <> Неопределено Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыОбъектов()
	
	ТипыОбъектовВизирования = Новый Массив();
	ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_ФормаВводаБюджета"));
	ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_АктуализацияБюджета"));
	ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_КорректировкаБюджета"));
	ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_ВерсияОтчета"));
	ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_КорректировкаКонтрольныхЗначений"));
	ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору"));
	ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_БюджетнаяОперация"));
	ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_ПротоколРасхожденийБюджета"));
	ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_мдм_ЗаявкаНаИзменение"));
	
	ЭтоЕРП = бит_ОбщегоНазначения.ЭтоСемействоERP();
	Если ЭтоЕРП Тогда
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_кзн_ЗаявкаНаРасходованиеСредств"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_кзн_ПланируемоеПоступлениеДенежныхСредств"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_кзн_ЗаявкаНаПеремещениеДенежныхСредств"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_кзн_РеестрПлатежей"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_кзн_ЗаявкаНаПереводСредствВДругуюОрганизацию"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_пз_ЗаявкаНаЗатраты"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_пз_СводнаяЗаявкаНаЗатраты"));
		ТипыОбъектовВизирования.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		ТипыОбъектовВизирования.Добавить(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"));
		ТипыОбъектовВизирования.Добавить(Тип("СправочникСсылка.ДоговорыЛизинга"));
		ТипыОбъектовВизирования.Добавить(Тип("СправочникСсылка.СоглашенияСКлиентами"));
		ТипыОбъектовВизирования.Добавить(Тип("СправочникСсылка.СоглашенияСПоставщиками"));
	Иначе	
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_РеестрПлатежей"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_ПроектДоговора"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_мто_ЗаявкаНаПотребность"));
		ТипыОбъектовВизирования.Добавить(Тип("ДокументСсылка.бит_мто_ЗаявкаНаЗакупку"));
	КонецЕсли;
	
	Возврат ТипыОбъектовВизирования;
	
КонецФункции
 
Функция СтрокаВДату(Знач Значение)
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		Значение = Лев(Значение, 10);
		Значение = СтроковыеФункцииКлиентСервер.СтрокаВДату(Значение);
	Иначе
		Значение = Дата('0001.01.01');
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции 

#КонецОбласти