
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// --------Отчеты-----------> 
	
	Перем КлючТекущихНастроек;
	
	Если Не Параметры.Свойство("НастраиваемыйОбъект") Тогда
		        		
		КлючОбъекта 		= Параметры.КлючОбъекта;
		КлючТекущихНастроек = Параметры.КлючТекущихНастроек;		
	 
		ТипНастройки 		= Перечисления.бит_ТипыСохраненныхНастроек.Отчеты;
		НастраиваемыйОбъект = КлючОбъекта;
				
		РаботаЧерезМенеджер = Истина;
		
		ПроверитьВозможностьСохраненияНастройки(КлючОбъекта, Отказ);
		Если Отказ Тогда
			Возврат;				
		КонецЕсли;
				
	// --------Отчеты-----------|
	
	Иначе
		
		НастраиваемыйОбъект = Параметры.НастраиваемыйОбъект;
		
		Если Параметры.Свойство("ТипНастройки") Тогда
			 ТипНастройки = Параметры.ТипНастройки;
	    КонецЕсли; 
		
		Если Параметры.Свойство("СтруктураНастройки") Тогда
			СтруктураНастройки = Параметры.СтруктураНастройки;
		КонецЕсли; 
		
		Если Параметры.Свойство("СохраненнаяНастройка") Тогда
		
			СохраненнаяНастройка    = Параметры.СохраненнаяНастройка;
			НаименованиеНастройки   = СохраненнаяНастройка.Наименование;
			ИспользоватьПриОткрытии = СохраненнаяНастройка.ИспользоватьПриОткрытии;
			
		КонецЕсли;
	
	КонецЕсли;
		
	ЗаполнитьКэшЗначений();
		
	ОбновитьТаблицуНастроек();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДекорациюНастройка();
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеНастройкиОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьТекущуюНастройку();	
 	
КонецПроцедуры // НаименованиеНастройкиОчистка()

&НаКлиенте
Процедура НаименованиеНастройкиПриИзменении(Элемент)
	
	СтрокаДоступна  = Истина;
	НайденнаяСтрока = Неопределено;
	
	Если ПустаяСтрока(НаименованиеНастройки) Тогда
		
		ОчиститьТекущуюНастройку();	
		
	Иначе
		
		Если фСписокНеДоступныхИмен.НайтиПоЗначению(НаименованиеНастройки) <> Неопределено Тогда
			
			ТекстСообщения = Нстр("ru = 'Указанная настройка существует. Доступ на ее изменение отсуствует.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
									
			СтрокаДоступна = Ложь;
			
		Иначе
			
			ИдНайденной = НайтиСтрокуСохраненнойНастройкиВТаблице();
			Если ИдНайденной <> Неопределено Тогда
				НайденнаяСтрока = ТаблицаСохраненныеНастройки.НайтиПоИдентификатору(ИдНайденной);			
			КонецЕсли;
			
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда 		
			ОчиститьТекущуюНастройку(Не СтрокаДоступна);		  
	    Иначе   		  
		  	СохраненнаяНастройка = НайденнаяСтрока.СохраненнаяНастройка; 		  			  
		КонецЕсли; 
		
	КонецЕсли; 
	
	УстановитьДекорациюНастройка();
	
КонецПроцедуры // НаименованиеНастройкиПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСохраненныеНастройки

&НаКлиенте
Процедура ТаблицаСохраненныеНастройкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТаблицаСохраненныеНастройки.ТекущиеДанные;
	
	НаименованиеНастройки   = ТекущаяСтрока.СохраненнаяНастройка;
	ИспользоватьПриОткрытии = ТекущаяСтрока.ИспользоватьПриОткрытии;
	СохраненнаяНастройка    = ТекущаяСтрока.СохраненнаяНастройка;
	
	УстановитьДекорациюНастройка();
	
КонецПроцедуры // ТаблицаСохраненныеНастройкиВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	Если ПустаяСтрока(НаименованиеНастройки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указано наименование сохраняемой настройки!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,"НаименованиеНастройки");
		Возврат;
	
	КонецЕсли; 
	
	СтруктураРезультата = СоздатьОбновитьНастройку();
	РезНастройка 	    = СтруктураРезультата.РезНастройка;
	КлючТекНастройки    = СтруктураРезультата.КлючНастройки;
	
	Если Не ЗначениеЗаполнено(РезНастройка) Тогда
		Если Не СтруктураРезультата.ИзменениеДоступно Тогда
			ТекстСообщения = Нстр("ru = 'Недостаточно прав для изменения настройки.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат;
		КонецЕсли;
		Закрыть();
	КонецЕсли; 	
			
	// --------Отчеты----------->
	Если РаботаЧерезМенеджер Тогда
		
		// КлючТекНастройки = СтруктураРезультата.КлючНастройки;
		Если ЗначениеЗаполнено(КлючТекНастройки) Тогда
			
			// Оповещение формы отчета
			НомерРазделителя = Найти(НастраиваемыйОбъект, "/");
			СтрКлючОбъекта = ?(НомерРазделителя = 0, НастраиваемыйОбъект, Лев(НастраиваемыйОбъект, НомерРазделителя -1));
			Оповестить("СохраненаНастройка_" + СтрКлючОбъекта, КлючТекНастройки);
			
			ВыборНастроек = Новый ВыборНастроек(КлючТекНастройки);
						
			Закрыть(ВыборНастроек);
			
		Иначе
		
			Закрыть();

		КонецЕсли;
		       	
	// --------Отчеты-----------|
	
	Иначе
		
		Если ТипНастройки = фКэшЗначений.Перечисления.бит_ТипыСохраненныхНастроек.НастройкиПанелиИндикаторов 
			ИЛИ ТипНастройки = фКэшЗначений.Перечисления.бит_ТипыСохраненныхНастроек.Обработки
			ИЛИ ТипНастройки = фКэшЗначений.Перечисления.бит_ТипыСохраненныхНастроек.Отчеты Тогда
			
			// Оповещение формы отчета
			Если ЗначениеЗаполнено(КлючТекНастройки) Тогда
				НомерРазделителя = Найти(НастраиваемыйОбъект, "/");
				СтрКлючОбъекта = ?(НомерРазделителя = 0, НастраиваемыйОбъект, Лев(НастраиваемыйОбъект, НомерРазделителя -1));
				Оповестить("СохраненаНастройка_" + СтрКлючОбъекта, КлючТекНастройки);
			КонецЕсли;
	
			Закрыть(РезНастройка);
			
		Иначе	
			
			ВыборНастроек = Новый ВыборНастроек();
			ВыборНастроек.КлючНастроек = РезНастройка.Код;
			
			Закрыть(ВыборНастроек);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СохранитьНастройку()

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОбновитьТаблицуНастроек();
	
КонецПроцедуры // КомандаОбновить()

&НаКлиенте
Процедура КомандаИспользоватьПриОткрытии(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСохраненныеНастройки.ТекущиеДанные;
    Если ТекущиеДанные = Неопределено Тогда
	 	Возврат;
	КонецЕсли;
	
	ИзменитьИспользоватьПриОткрытии(ТекущиеДанные.ПолучитьИдентификатор());	   
	
КонецПроцедуры // КомандаИспользоватьПриОткрытии()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	КэшПеречислений = Новый Структура;
	КэшПеречислений.Вставить("бит_ТипыСохраненныхНастроек", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСохраненныхНастроек));
	
	ФКэшЗначений.Вставить("Перечисления", КэшПеречислений);	

КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Функция СоздатьЭлементСправочникаСохрНастройки(ТекПользователь)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеНастройки"  , НаименованиеНастройки);
	СтруктураПараметров.Вставить("ТипНастройки"			  , ТипНастройки);
	СтруктураПараметров.Вставить("НастраиваемыйОбъект"	  , НастраиваемыйОбъект);
	СтруктураПараметров.Вставить("Ответственный"		  , ТекПользователь);
	СтруктураПараметров.Вставить("СтруктураНастройки"	  , СтруктураНастройки);
	
	РезНастройка = Справочники.бит_СохраненныеНастройки.СоздатьНастройку(СтруктураПараметров);
	
	Если РезНастройка <> Неопределено  Тогда
		// Запись настроек доступности по умолчанию (РегистрыСведений.бит_НастройкиДоступностиВариантовОтчетов).
		бит_ОтчетыСервер.ЗаписьНабораНастроекДоступности(РезНастройка.Ссылка, ТекПользователь);
	КонецЕсли;
	
	СохраненнаяНастройка = РезНастройка;
	
	Возврат РезНастройка;
	
КонецФункции // СоздатьЭлементСправочникаСохрНастройки()

&НаСервере
Функция ОбновитьНастройку(ТекПользователь)

	УстановитьПривилегированныйРежим(Истина);
		
	СпрОб = СохраненнаяНастройка.ПолучитьОбъект();
	СпрОб.Наименование            = НаименованиеНастройки;
	СпрОб.ИспользоватьПриОткрытии = ИспользоватьПриОткрытии;
	
	Если ТипНастройки = Перечисления.бит_ТипыСохраненныхНастроек.НастройкиПанелиИндикаторов 
		ИЛИ ТипНастройки = Перечисления.бит_ТипыСохраненныхНастроек.Обработки 
		ИЛИ ТипНастройки = Перечисления.бит_ТипыСохраненныхНастроек.Отчеты Тогда
	
		СпрОб.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураНастройки);
	
	КонецЕсли; 
	
	флДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОб, , "Ошибки"); 	
	Если флДействиеВыполнено Тогда 		
		РезНастройка = СпрОб.Ссылка;		
	Иначе	  		
		РезНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();  		
	КонецЕсли;   	

	УстановитьПривилегированныйРежим(Ложь); 	

	Возврат РезНастройка;
	
КонецФункции // ОбновитьНастройку()

&НаСервере
Функция СоздатьОбновитьНастройку()
	
	СтруктураРезультата = Новый Структура;
	ИзменениеДоступно 	= Истина;
	РезНастройка 		= Неопределено;
	
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	                  	
	Если ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
		
		Если фСписокНеИзменяемыхНастроек.НайтиПоЗначению(СохраненнаяНастройка.КлючНастройки) = Неопределено Тогда
	    	РезНастройка = ОбновитьНастройку(ТекПользователь);
		Иначе  		
			ИзменениеДоступно = Ложь;
		КонецЕсли;
		
	Иначе	
		
		РезНастройка = СоздатьЭлементСправочникаСохрНастройки(ТекПользователь);
				
	КонецЕсли; 
	
	Если РезНастройка <> Неопределено Тогда
		бит_ОтчетыСервер.ИзменитьИспользоватьПриОткрытии(РезНастройка, ИспользоватьПриОткрытии, ТекПользователь);	
	КонецЕсли;
	
	КлючНастройки = ?(ЗначениеЗаполнено(РезНастройка), РезНастройка.КлючНастройки, Неопределено);
		
	СтруктураРезультата.Вставить("РезНастройка"		, РезНастройка);
	СтруктураРезультата.Вставить("ИзменениеДоступно", ИзменениеДоступно);
	СтруктураРезультата.Вставить("КлючНастройки"	, КлючНастройки);

	Возврат СтруктураРезультата;
	
КонецФункции // СоздатьОбновитьНастройку()

&НаСервере
Процедура ОбновитьТаблицуНастроек()

	НомерРазделителя 			= Найти(НастраиваемыйОбъект, "/");
	ЕстьРазделитель 			= НомерРазделителя <> 0;
	ПолноеИмяОтчета  			= ?(ЕстьРазделитель, Лев(НастраиваемыйОбъект, НомерРазделителя-1), НастраиваемыйОбъект);
	СтруктураДоступности 	   	= бит_ОтчетыСервер.ПроверитьДоступностьВариантовНастроек(ПолноеИмяОтчета, ЕстьРазделитель);
	фСписокНеДоступныхНастроек  = СтруктураДоступности.СписокНеДоступныхНастроек;
	фСписокНеИзменяемыхНастроек = СтруктураДоступности.СписокНеИзменяемыхНастроек;
	КлючНастройкиПоУмолчанию 	= бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(НастраиваемыйОбъект, Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипНастройки"	   , ТипНастройки);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Запрос.Текст = "
	|ВЫБРАТЬ
    |	бит_СохраненныеНастройки.Ссылка,
    |	бит_СохраненныеНастройки.Наименование,
	|	бит_СохраненныеНастройки.Ответственный,
    |	бит_СохраненныеНастройки.КлючНастройки
    |ИЗ
    |	Справочник.бит_СохраненныеНастройки КАК бит_СохраненныеНастройки
    |ГДЕ
    |	бит_СохраненныеНастройки.ТипНастройки = &ТипНастройки
    |	И бит_СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
    |
    |УПОРЯДОЧИТЬ ПО
    |	бит_СохраненныеНастройки.Наименование
    |АВТОУПОРЯДОЧИВАНИЕ
	|";
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ТаблицаСохраненныеНастройки.Очистить();
	Пока Выборка.Следующий() Цикл
		
		Если фСписокНеДоступныхНастроек.НайтиПоЗначению(Выборка.КлючНастройки) <> Неопределено Тогда
			фСписокНеДоступныхИмен.Добавить(Выборка.Наименование);
			Продолжить;		
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСохраненныеНастройки.Добавить();
		НоваяСтрока.СохраненнаяНастройка = Выборка.Ссылка;
		НоваяСтрока.Ответственный 		 = Выборка.Ответственный;
		
		НоваяСтрока.ИспользоватьПриОткрытии = Выборка.КлючНастройки = КлючНастройкиПоУмолчанию;
	
	КонецЦикла; 

КонецПроцедуры // ОбновитьТаблицуНастроек()

&НаСервере
Процедура ИзменитьИспользоватьПриОткрытии(ИдСтроки)
   
	ТекущиеДанные = ТаблицаСохраненныеНастройки.НайтиПоИдентификатору(ИдСтроки);
	Если ТекущиеДанные <> Неопределено Тогда

		бит_ОтчетыСервер.ИзменитьИспользоватьПриОткрытии(ТекущиеДанные.СохраненнаяНастройка, ИспользоватьПриОткрытии);
		ОбновитьТаблицуНастроек(); 		

	КонецЕсли;

КонецПроцедуры // ИзменитьИспользоватьПриОткрытии()

&НаСервере
Функция НайтиСтрокуСохраненнойНастройкиВТаблице()

	НайденнаяСтрока = Неопределено;
	
	Для каждого СтрокаТаблицы Из ТаблицаСохраненныеНастройки Цикл
			
		Если Строка(СтрокаТаблицы.СохраненнаяНастройка) = НаименованиеНастройки Тогда
		
			НайденнаяСтрока 	    = СтрокаТаблицы.ПолучитьИдентификатор();
			ИспользоватьПриОткрытии = НайденнаяСтрока.ИспользоватьПриОткрытии;
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла; 

	Возврат НайденнаяСтрока;
	
КонецФункции // НайтиСтрокуСохраненнойНастройкиВТаблице()

&НаСервере
Процедура ПроверитьВозможностьСохраненияНастройки(Знач КлючОбъекта, Отказ)
	
	МассивПути = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(КлючОбъекта, "/");
	Если МассивПути.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	КлючОбъекта  = МассивПути[0];
	КлючВарианта = МассивПути[1];
		
	Если КлючОбъекта = "Отчет.бит_ПланФактныйАнализУниверсальный" Тогда
		
		// Список сценариев очень сильно влияет на структуру Отчета. 
		// А структура - это и есть вариант. 
		// Поэтому список сценариев сохраняется в варианте. 
		// В предопределенном варианте изменения сохранить нельзя. 
		// Поэтому сохранять настройки (то есть отборы, условное оформление, и т д...) сохранять 
		// для предопределенного варианта бессмысленно.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КлючОбъекта" , КлючОбъекта);
		Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
		Запрос.Текст = "
		|ВЫБРАТЬ
        |	бит_ВариантыОтчетов.Ссылка,
        |	бит_ВариантыОтчетов.ТипВарианта
        |ИЗ
        |	Справочник.бит_ВариантыОтчетов КАК бит_ВариантыОтчетов
        |ГДЕ
        |	бит_ВариантыОтчетов.КлючОбъекта = &КлючОбъекта
		|	И бит_ВариантыОтчетов.КлючВарианта = &КлючВарианта
		|";
		Результат = Запрос.Выполнить();			
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 			
			
			Если Выборка.ТипВарианта = Перечисления.бит_ТипыВариантовОтчетов.Предопределенный Тогда
				
				ТекстСообщения = Нстр("ru = 'В данном отчете не предусмотрено сохранение настройки для предопределенного варианта. Сохраните пользовательский вариант.'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
					
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры // ПроверитьВозможностьСохраненияНастройки()

&НаКлиенте
Процедура ОчиститьТекущуюНастройку(ОчищатьНаименование = Истина)

	 СохраненнаяНастройка    = Неопределено;
	 ИспользоватьПриОткрытии = Ложь;

	 Если ОчищатьНаименование Тогда
		 
		 НаименованиеНастройки = "";
		 
	 КонецЕсли; 
	 
	УстановитьДекорациюНастройка();	 
	 
КонецПроцедуры // ОчиститьТекущуюНастройку()

&НаКлиенте
Процедура УстановитьДекорациюНастройка()

	Если ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
	   ТекстНастройкаСтараяНовая = "Существующая настройка";
	Иначе	
	   ТекстНастройкаСтараяНовая = "Новая настройка";
	КонецЕсли; 
	
КонецПроцедуры // УстановитьДекорациюНастройка()

#КонецОбласти
