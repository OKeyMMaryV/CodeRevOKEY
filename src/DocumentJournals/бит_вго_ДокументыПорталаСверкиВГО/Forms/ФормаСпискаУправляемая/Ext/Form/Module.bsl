#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МетаРегистрируемыеДокументы = Метаданные.ЖурналыДокументов.бит_вго_ДокументыПорталаСверкиВГО.РегистрируемыеДокументы;	
	Для каждого МетаРегистрируемогоДок Из МетаРегистрируемыеДокументы Цикл
		СписокТиповДокументов.Добавить(МетаРегистрируемогоДок.Имя, МетаРегистрируемогоДок.Синоним); 	
	КонецЦикла;
	
	// Отборы.
	СтруктураОтбора = Параметры.Отбор;
	
	Если СтруктураОтбора.Количество() > 0 Тогда
		
		ЭлементыОтбораСписка = Список.Отбор.Элементы;
		ПолеКдДата = Новый ПолеКомпоновкиДанных("Дата");
		
		// Собственный контрагент.
		ЗначениеЭлементаОтбора = СтруктураОтбора.Контрагент1;
		ПолеКд = Новый ПолеКомпоновкиДанных("Контрагент1");
		
		ГруппаОтбора = ЭлементыОтбораСписка.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбора.Использование = Истина; 		
		
			НовыйЭлемент = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ЛевоеЗначение  = ПолеКд;
			НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлемент.ПравоеЗначение = ЗначениеЭлементаОтбора;
			НовыйЭлемент.Использование 	= Истина;
			
			НовыйЭлемент = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ЛевоеЗначение 	= ПолеКд;
			НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
			НовыйЭлемент.Использование 	= Истина;         		                    		       
				
		// Период - Дата начала.
		ЗначениеЭлементаОтбора = СтруктураОтбора.ДатаНачала;
		ПолеКд 	   = Новый ПолеКомпоновкиДанных("ДатаНачала");
				
		ГруппаОтбора = ЭлементыОтбораСписка.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбора.Использование = Истина;
		
			НовыйЭлемент = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ЛевоеЗначение  = ПолеКд;
			НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			НовыйЭлемент.ПравоеЗначение = ЗначениеЭлементаОтбора;
			НовыйЭлемент.Использование 	= Истина;
			
			ПодГруппаОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ПодГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			ПодГруппаОтбора.Использование = Истина;
								
				НовыйЭлемент = ПодГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ЛевоеЗначение 	= ПолеКд;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
				НовыйЭлемент.Использование 	= Истина;
				
				НовыйЭлемент = ПодГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ЛевоеЗначение 	= ПолеКдДата;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				НовыйЭлемент.ПравоеЗначение	= ЗначениеЭлементаОтбора;
				НовыйЭлемент.Использование 	= Истина;
				
		// Период - Дата окончания.
		ЗначениеЭлементаОтбора = СтруктураОтбора.ДатаОкончания;
		ПолеКд 	   = Новый ПолеКомпоновкиДанных("ДатаОкончания");
				
		ГруппаОтбора = ЭлементыОтбораСписка.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбора.Использование = Истина;
		
			НовыйЭлемент = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ЛевоеЗначение  = ПолеКд;
			НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			НовыйЭлемент.ПравоеЗначение = ЗначениеЭлементаОтбора;
			НовыйЭлемент.Использование 	= Истина;
			
			ПодГруппаОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ПодГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			ПодГруппаОтбора.Использование = Истина;
								
				НовыйЭлемент = ПодГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ЛевоеЗначение 	= ПолеКд;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
				НовыйЭлемент.Использование 	= Истина;
				
				НовыйЭлемент = ПодГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ЛевоеЗначение 	= ПолеКдДата;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				НовыйЭлемент.ПравоеЗначение	= ЗначениеЭлементаОтбора;
				НовыйЭлемент.Использование 	= Истина;
		
				
		// Структура отборов для создания документов.
		фСтруктураОтбора  = Новый Структура;
		Для каждого КлЗнч Из СтруктураОтбора Цикл
			фСтруктураОтбора.Вставить(КлЗнч.Ключ, КлЗнч.Значение);		
		КонецЦикла;
		
		// Удалим лишние элементы из структуры отбора.
		СтруктураОтбора.Удалить("Контрагент1");
		СтруктураОтбора.Удалить("ДатаНачала"); 
		СтруктураОтбора.Удалить("ДатаОкончания"); 
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование = Истина 
		И фСтруктураОтбора <> Неопределено И фСтруктураОтбора.Количество() > 0 Тогда
	
		Отказ = Истина;	
		
		Оповещение = Новый ОписаниеОповещения("СписокПередНачаломДобавленияЗавершение",ЭтотОбъект);
		СписокТиповДокументов.ПоказатьВыборЭлемента(Оповещение, "Выбор типа документа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура СписокПередНачаломДобавленияЗавершение(ВыбранныйТипДокумента, ДополнительныеДанные) Экспорт
	
	Если ВыбранныйТипДокумента <> Неопределено Тогда
		
		ИмяДокумента = ВыбранныйТипДокумента.Значение;
		
		СтруктураЗаполнения = фСтруктураОтбора;   			
		Если ИмяДокумента = "бит_вго_ПодтверждениеСверкиВГО" Тогда	
			СтруктураЗаполнения.Вставить("Организация1", фСтруктураОтбора.Организация);
			СтруктураЗаполнения.Вставить("Контрагент1" , фСтруктураОтбора.Контрагент1);
			СтруктураЗаполнения.Вставить("Организация2", бит_ОбщегоНазначения.ПолучитьСобственнуюОрганизациюПоКонтрагенту(фСтруктураОтбора.Контрагент));
			СтруктураЗаполнения.Вставить("Контрагент2" , фСтруктураОтбора.Контрагент);
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
		ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;  
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

