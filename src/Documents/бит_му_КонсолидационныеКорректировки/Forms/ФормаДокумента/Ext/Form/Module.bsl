
#Область ОписаниеПеременных

&НаСервере
Перем мПротоколЗаполнения; // Хранит структуру для формирования протокола заполнения документа.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполняем кэш значений	
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	ЗаполнитьСписокОрганизаций();
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_му_КонсолидационныеКорректировки"));
	фПротоколЗаполнения = ДокументОбъект.ПротоколЗаполнения.Получить();
	
	УстановитьПараметрыВыбораДляСчетов();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Установить заголовок формы
	УстановитьЗаголовокФормыДокумента();
	
	ОбъектСистемыПриИзменении(Элементы.ОбъектСистемы);
	
	ЗаполнитьДеревоСоставНРП();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПротоколЗаполнения = Новый ХранилищеЗначения(фПротоколЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы статус документа.
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_КонсолидационныеКорректировки";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериметрКонсолидацииПриИзменении(Элемент)
	
	ЗаполнитьСписокОрганизаций();
	
	Если Элементы.Организация.СписокВыбора.Количество() = 1 Тогда
		Объект.Организация = Элементы.Организация.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериметрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Периметр) И (Объект.Периметр <> ВыбранноеЗначение) Тогда
		
		Текст = "ru = 'При изменении периметра консолидации табличные части документа будут очищены! Продолжить?'";
		Оповещение = Новый ОписаниеОповещения("ВопросОбОчисткеТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр(Текст), РежимДиалогаВопрос.ДаНет, 0);
				
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения "ВопросОбОчисткеТабличнойЧастиЗавершение".
// 
&НаКлиенте
Процедура ВопросОбОчисткеТабличнойЧастиЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект.Гудвилл.Очистить();
	Объект.СоставНРП.Очистить();
	ЗаполнитьДеревоСоставНРП();
	Объект.Капитал.Очистить();

КонецПроцедуры // ВопросОбОчисткеТабличнойЧастиЗавершение() 

&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(мКэшЗначений.ВидОбъекта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Объект.ОбъектСистемы);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", мКэшЗначений.ДоступныеОбъектыСистемы);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		ОграничениеТипа = Новый ОписаниеТипов("ПланСчетовСсылка." + ПолучитьИмяПланаСчетов(Объект.ОбъектСистемы));
	Иначе
		ОграничениеТипа = Новый ОписаниеТипов();
	КонецЕсли;
	
	Элементы.СчетВспомогательный.ОграничениеТипа 					= ОграничениеТипа;
	Элементы.СчетГудвилла.ОграничениеТипа							= ОграничениеТипа;
	Элементы.СчетСписанияОбесцененияГудвилла.ОграничениеТипа 		= ОграничениеТипа;
	Элементы.СписокСчетовНРПСчет.ОграничениеТипа					= ОграничениеТипа;
	Элементы.СписокСчетовАкционерногоКапиталаСчет.ОграничениеТипа 	= ОграничениеТипа;
	Элементы.СписокСчетовЭмиссионногоДоходаСчет.ОграничениеТипа		= ОграничениеТипа;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСистемыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ОбъектСистемы) И (Объект.ОбъектСистемы <> ВыбранноеЗначение) Тогда
		
		Текст = "ru = 'При изменении регистра бухгалтерии счета учета в документе будут очищены! Продолжить?'";
		Оповещение = Новый ОписаниеОповещения("ВопросОбОчисткеСчетовВДокументеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр(Текст), РежимДиалогаВопрос.ДаНет, 0);
				
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения "ВопросОбОчисткеСчетовВДокументеЗавершение".
// 
&НаКлиенте
Процедура ВопросОбОчисткеСчетовВДокументеЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект.СчетВспомогательный 				= Неопределено;
	Объект.СчетГудвилла						= Неопределено;
	Объект.СчетСписанияОбесцененияГудвилла	= Неопределено;
	Объект.ОсновнойСчетНПР					= Неопределено;
	Объект.СписокСчетовНРП.Очистить();
	Объект.СписокСчетовАкционерногоКапитала.Очистить();
	Объект.СписокСчетовЭмиссионногоДохода.Очистить();

КонецПроцедуры // ВопросОбОчисткеСчетовВДокументеЗавершение() 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставНРП

// Процедура - обработчик события "ПриАктивизацииЯчейки" табличного поля "СоставНРП".
// 
&НаКлиенте
Процедура СоставНРППриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.СоставНРП.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементДерева = Элементы.СоставНРП.ТекущийЭлемент;
	
	Если ТекущийЭлементДерева.Имя = "СоставНРПСумма" Тогда
		Если (ТекущиеДанные.ПолучитьЭлементы().Количество() > 0) ИЛИ (ТекущиеДанные.Аналитика = мКэшЗначений.Составляющие["ОбесценениеГудвилла"])
			ИЛИ (ТекущиеДанные.Аналитика = мКэшЗначений.Составляющие["Итого"])
		Тогда
			ТекущийЭлементДерева.ТолькоПросмотр = Истина;
		Иначе
			ТекущийЭлементДерева.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма" табличного поля "СоставНРП".
// 
&НаКлиенте
Процедура СоставНРПСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставНРП.ТекущиеДанные;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	ПосчитатьИтогиДляВеткиДерева(Родитель);
	
	Если ТипЗнч(ТекущиеДанные.Аналитика) = Тип("СправочникСсылка.Организации") Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СоставляющаяНРП", Родитель.Аналитика);
		ПараметрыОтбора.Вставить("Организация", 	ТекущиеДанные.Аналитика);
	Иначе
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СоставляющаяНРП", ТекущиеДанные.Аналитика);
		ПараметрыОтбора.Вставить("Организация", 	мКэшЗначений.ОрганизацияПустаяСсылка);
	КонецЕсли;
	
	НайденныеСтроки = Объект.СоставНРП.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = Объект.СоставНРП.Добавить();
		НоваяСтрока.СоставляющаяНРП = ПараметрыОтбора.СоставляющаяНРП;
		НоваяСтрока.Организация		= ПараметрыОтбора.Организация;
		
		НайденныеСтроки.Добавить(НоваяСтрока);
	КонецЕсли;
	
	НайденныеСтроки[0].Сумма = ТекущиеДанные.Сумма;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаВыборПериода(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала 	= Объект.ДатаНач;
	Диалог.Период.ДатаОкончания = Объект.ДатаКон;
	Диалог.Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
	
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Процедура обработчик оповещения "ВыборПериодаЗавершение".
// 
// Параметры:
// Период - СтандартныйПериод
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВыборПериодаЗавершение(Период, ДополнительныеДанные) Экспорт

	Если НЕ Период = Неопределено Тогда
	
		Объект.ДатаНач = Период.ДатаНачала;
		Объект.ДатаКон = Период.ДатаОкончания;
	
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПериодаЗавершение

&НаКлиенте
Процедура ЗаполнитьНРП(Команда)
	
	Флаг = Истина;
	
	Если Объект.СоставНРП.Количество() > 0 Тогда
		Флаг = Ложь;
		Текст = "ru = 'Очистить таблицу ""Состав НРП""?'";
		Оповещение = Новый ОписаниеОповещения("ВопросОбОчисткеТаблицыСоставНРПЗавершение", ЭтотОбъект); 		
		ПоказатьВопрос(Оповещение, НСтр(Текст), РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;
	
	Если Флаг Тогда		
		ЗаполнитьСоставНПРНаСервере();
		
		// Обновим дерево значений
		ЗаполнитьДеревоСоставНРП();
		
		Если Объект.СоставНРП.Количество() > 0 Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик оповещения "ВопросОбОчисткеТаблицыСоставНРПЗавершение".
// 
&НаКлиенте
Процедура ВопросОбОчисткеТаблицыСоставНРПЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Объект.СоставНРП.Очистить();
	Модифицированность = Истина;

	ЗаполнитьСоставНПРНаСервере();
	
	// Обновим дерево значений
	ЗаполнитьДеревоСоставНРП();
	
	Если Объект.СоставНРП.Количество() > 0 Тогда
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры // ВопросОбОчисткеТаблицыСоставНРПЗавершение()

// Процедура заполняет дерево значений "СоставНР" на основе табличной части.
// 
// Параметры:
//  Параметр1 - нет.
// 
&НаКлиенте
Процедура ЗаполнитьДеревоСоставНРП()

	Соотв = Новый Соответствие;
	
	ЭлементыДерева = СоставНРП.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	// Заполним дерево элементами первого уровня.
	Для каждого ТекСоставляющаяНРП Из мКэшЗначений.Составляющие Цикл
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.Аналитика = ТекСоставляющаяНРП.Значение;
		Соотв.Вставить(СтрокаНовая.Аналитика, СтрокаНовая);
	КонецЦикла;
	
	// Заполним дерево дочерними элементами из табличной части.
	Для каждого ТекСтр Из Объект.СоставНРП Цикл
		Ветка = Соотв[ТекСтр.СоставляющаяНРП];
		
		Если ЗначениеЗаполнено(ТекСтр.Организация) Тогда			
			СтрокаНовая = Ветка.ПолучитьЭлементы().Добавить();
			СтрокаНовая.Аналитика = ТекСтр.Организация;
		Иначе
			СтрокаНовая = Ветка;
		КонецЕсли;
		
		СтрокаНовая.Сумма	  = ТекСтр.Сумма;
	КонецЦикла;
	
	// Развернем все элементы дерева
	ЭлементыДерева = СоставНРП.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Элементы.СоставНРП.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
		ПосчитатьИтогиДляВеткиДерева(Элемент);		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДеревоСоставНРП() 

&НаКлиенте
Процедура ЗаполнитьКапитал(Команда)
	
	ЗаполнитьТабличнуюЧастьКапитал(Элементы.КапиталОрганизация.СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьСчетНПРОсновным(Команда)
	
	ТекущиеДанные = Элементы.СписокСчетовНРП.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОсновнойСчетНПР = ТекущиеДанные.Счет;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура заполняет список доступных для выбора организаций.
// 
// Параметры:
//  нет.
// 
&НаСервере
Процедура ЗаполнитьСписокОрганизаций()

	СоставПериметраКонсолидации = ПолучитьСоставПериметраКонсолидации(Объект.Периметр, Объект.Дата, мКэшЗначений.ТипКонсолидирующая);
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(СоставПериметраКонсолидации);
	
	СоставПериметраКонсолидации = ПолучитьСоставПериметраКонсолидации(Объект.Периметр, Объект.Дата, мКэшЗначений.ТипОбычная);
	Элементы.ГудвиллОрганизация.СписокВыбора.ЗагрузитьЗначения(СоставПериметраКонсолидации);
	
	СоставПериметраКонсолидации = ПолучитьСоставПериметраКонсолидации(Объект.Периметр, Объект.Дата, мКэшЗначений.ТипОбычная, Истина);
	Элементы.КапиталОрганизация.СписокВыбора.ЗагрузитьЗначения(СоставПериметраКонсолидации);

КонецПроцедуры // ЗаполнитьСписокОрганизаций()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)

	КэшированныеЗначения = Новый Структура;
 
	мКэшЗначений.Вставить("ПредставлениеОбъекта",  				Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	мКэшЗначений.Вставить("ВидОбъекта",	  		   				Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	
	мКэшЗначений.Вставить("ТипОбычная", 						Перечисления.бит_му_ТипыКонсолидации.Обычная);
	мКэшЗначений.Вставить("ТипКонсолидирующая", 				Перечисления.бит_му_ТипыКонсолидации.Консолидирующая);
	                                                	
	мКэшЗначений.Вставить("МетодПолнаяКонсолидация", 			Перечисления.бит_му_МетодыКонсолидации.ПолнаяКонсолидация);
	мКэшЗначений.Вставить("МетодДолевоеУчастие", 				Перечисления.бит_му_МетодыКонсолидации.ДолевоеУчастие);
	мКэшЗначений.Вставить("МетодПропорциональнаяКонсолидация", 	Перечисления.бит_му_МетодыКонсолидации.ПропорциональнаяКонсолидация);
	
	мКэшЗначений.Вставить("ОрганизацияПустаяСсылка",			Справочники.Организации.ПустаяСсылка());
	
	// Составляющие НРП
	Составляющие = Новый Структура;
	
	Для каждого ТекСтр Из Метаданные.Перечисления.бит_му_СоставляющиеНРП.ЗначенияПеречисления Цикл
		Составляющие.Вставить(ТекСтр.Имя, Перечисления.бит_му_СоставляющиеНРП[ТекСтр.Имя]);
	КонецЦикла;
	
	мКэшЗначений.Вставить("Составляющие", Составляющие);
	
	мКэшЗначений.Вставить("Составляющие", Составляющие);
	
	// Список выбора доступных регистров бухгалтерии.
	ДоступныеОбъектыСистемы = Новый СписокЗначений;
	
	Для каждого ТекРегистр Из Метаданные.Документы.бит_му_КонсолидационныеКорректировки.Движения Цикл

		МетаОбъект = ТекРегистр;
		ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);

		Если ЗначениеЗаполнено(ОбъектСистемы) Тогда				
			ДоступныеОбъектыСистемы.Добавить(ОбъектСистемы);
		КонецЕсли; 
		
	КонецЦикла;
	
	ДоступныеОбъектыСистемы.СортироватьПоЗначению();
	
	КэшированныеЗначения.Вставить("ДоступныеОбъектыСистемы", ДоступныеОбъектыСистемы);	
	
КонецПроцедуры

// Функция получает состав периметра консолидации на указанную дату.
// 
// Параметры:
//  ПериметрКонсолидации - СправочникСсылка.бит_му_ПериметрыКонсолидации.
//  Период - Дата.
// 	ТипКонсолидации - ПеречислениеСсылка.бит_му_ТипыКонсолидации.
// 	ОтборПоФлагуОсуществляетКонтрольПериметра - Булево.
// 	МетодКонсолидации - ПеречислениеСсылка.бит_му_МетодыКонсолидации.
// 
// Возвращаемое значение:
//  Результат - ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьСоставПериметраКонсолидации(ПериметрКонсолидации, Период, ТипКонсолидации, 
		ОтборПоФлагуОсуществляетКонтрольПериметра = Ложь, МетодКонсолидации = Неопределено)
	
	Возврат ПолучитьСоставПериметраКонсолидацииВсеПоля(ПериметрКонсолидации, Период, ТипКонсолидации, 
				ОтборПоФлагуОсуществляетКонтрольПериметра, МетодКонсолидации).ВыгрузитьКолонку("Организация");
	
КонецФункции

// Функция получает состав периметра консолидации на указанную дату.
// 
// Параметры:
//  ПериметрКонсолидации - СправочникСсылка.бит_му_ПериметрыКонсолидации.
//  Период - Дата.
// 	ТипКонсолидации - ПеречислениеСсылка.бит_му_ТипыКонсолидации.
// 	ОтборПоФлагуОсуществляетКонтрольПериметра - Булево.
// 	МетодКонсолидации - ПеречислениеСсылка.бит_му_МетодыКонсолидации.
// 
// Возвращаемое значение:
//  Результат - Массив.
// 
&НаСервере
Функция ПолучитьСоставПериметраКонсолидацииВсеПоля(ПериметрКонсолидации, Период, ТипКонсолидации = Неопределено, 
		ОтборПоФлагуОсуществляетКонтрольПериметра = Ложь, МетодКонсолидации = Неопределено)

	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация,
				   |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ТипКонсолидации,
				   |	бит_му_СоставПериметровКонсолидацииСрезПоследних.МетодКонсолидации,
				   |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ОсуществляетКонтрольПериметра
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&Период, ПериметрКонсолидации = &ПериметрКонсолидации) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	               |ГДЕ
	               |	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Период
	               |			ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))"
				   + ?(НЕ ОтборПоФлагуОсуществляетКонтрольПериметра, "", "
				   |	И бит_му_СоставПериметровКонсолидацииСрезПоследних.ОсуществляетКонтрольПериметра")
				   + ?(МетодКонсолидации = Неопределено, "", "
				   |	И бит_му_СоставПериметровКонсолидацииСрезПоследних.МетодКонсолидации = &МетодКонсолидации")
				   + ?(ТипКонсолидации = Неопределено, "", "
				   |	И бит_му_СоставПериметровКонсолидацииСрезПоследних.ТипКонсолидации = &ТипКонсолидации") + "
	               |УПОРЯДОЧИТЬ ПО
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация.Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", 				Период);
	Запрос.УстановитьПараметр("ТипКонсолидации",		ТипКонсолидации);
	Запрос.УстановитьПараметр("МетодКонсолидации",		МетодКонсолидации);
	Запрос.УстановитьПараметр("ПериметрКонсолидации", 	ПериметрКонсолидации);
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // ПолучитьСоставПериметраКонсолидации()

// Функция получает имя плана счетов для указанного регистра.
// 
// Параметры:
//  ОбъектСистемыСсылка - СправочникСсылка.бит_ОбъектыСистемы.
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
&НаСервереБезКонтекста
Функция ПолучитьИмяПланаСчетов(ОбъектСистемыСсылка)

	Возврат Метаданные.РегистрыБухгалтерии[ОбъектСистемыСсылка.ИмяОбъекта].ПланСчетов.Имя;
	
КонецФункции

// Процедура заполняет табличную часть "СоставНПР".
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьСоставНПРНаСервере()

	мПротоколЗаполнения = Неопределено;

	СоставПериметра = ПолучитьСоставПериметраКонсолидацииВсеПоля(Объект.Периметр, Объект.Дата);
	
	МатеринскиеКомпании 	= Новый Массив;
	ЭлиминирующиеКомпании 	= Новый Массив;
	
	Для каждого ТекСтр Из СоставПериметра Цикл
		
		// 
		Если ТекСтр.ОсуществляетКонтрольПериметра Тогда
			МатеринскиеКомпании.Добавить(ТекСтр.Организация);
			Продолжить;
		КонецЕсли;
		
		// 
		Если ТекСтр.ТипКонсолидации = мКэшЗначений.ТипКонсолидирующая Тогда
			ЭлиминирующиеКомпании.Добавить(ТекСтр.Организация);
			Продолжить;
		КонецЕсли;
		
		Если ТекСтр.МетодКонсолидации = мКэшЗначений.МетодПолнаяКонсолидация Тогда
		
			// Расчет составляющей НРП "НРПДочернейКомпании".
			СоставляющаяНРП = мКэшЗначений.Составляющие["НРПДочернейКомпании"];
			СуммаОборотовНРП = ПолучитьСуммуОборотаНРП(ТекСтр.Организация, мКэшЗначений.МетодПолнаяКонсолидация, СоставляющаяНРП);
			ДобавитьСтрокуСоставНРП(СоставляющаяНРП, ТекСтр.Организация, СуммаОборотовНРП);
			
		ИначеЕсли ТекСтр.МетодКонсолидации = мКэшЗначений.МетодДолевоеУчастие Тогда
		
			// Расчет составляющей НРП "НРПАссоциированнойКомпании".
			СоставляющаяНРП = мКэшЗначений.Составляющие["НРПАссоциированнойКомпании"];
			СуммаОборотовНРП = ПолучитьСуммуОборотаНРП(ТекСтр.Организация, мКэшЗначений.МетодДолевоеУчастие, СоставляющаяНРП);
			ДобавитьСтрокуСоставНРП(СоставляющаяНРП, ТекСтр.Организация, СуммаОборотовНРП);
			
		ИначеЕсли ТекСтр.МетодКонсолидации = мКэшЗначений.МетодПропорциональнаяКонсолидация Тогда
		
			// Расчет составляющей НРП "НРПСовместноКонтролируемойКомпании".
			СоставляющаяНРП = мКэшЗначений.Составляющие["НРПСовместноКонтролируемойКомпании"];
			СуммаОборотовНРП = ПолучитьСуммуОборотаНРП(ТекСтр.Организация, мКэшЗначений.МетодПропорциональнаяКонсолидация, СоставляющаяНРП);
			ДобавитьСтрокуСоставНРП(СоставляющаяНРП, ТекСтр.Организация, СуммаОборотовНРП);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Расчет составляющей НРП "НРПМатеринскойКомпании".
	СоставляющаяНРП = мКэшЗначений.Составляющие["НРПМатеринскойКомпании"];
	ТаблицаОстатковНРП = ПолучитьОстатокНРП(МатеринскиеКомпании, СоставляющаяНРП);
	
	Для каждого ТекСтр Из ТаблицаОстатковНРП Цикл	
		ДобавитьСтрокуСоставНРП(СоставляющаяНРП, ТекСтр.Организация, ТекСтр.Сумма);
	КонецЦикла;
	
	// Расчет составляющей НРП "ОбесценениеГудвилла".
	Для каждого ТекСтр Из Объект.Гудвилл Цикл
		ДобавитьСтрокуСоставНРП(мКэшЗначений.Составляющие["ОбесценениеГудвилла"], ТекСтр.Организация, ТекСтр.НаДатуПриобретения - ТекСтр.НаДатуОкончания);
	КонецЦикла;
	
	// Расчет составляющей НРП "УдалениеНереализованнойПрибылиГруппы".
	СоставляющаяНРП = мКэшЗначений.Составляющие["УдалениеНереализованнойПрибылиГруппы"];
	ТаблицаОстатковНРП = ПолучитьОстатокНРП(ЭлиминирующиеКомпании, СоставляющаяНРП);
	
	Для каждого ТекСтр Из ТаблицаОстатковНРП Цикл	
		ДобавитьСтрокуСоставНРП(СоставляющаяНРП, ТекСтр.Организация, ТекСтр.Сумма);
	КонецЦикла;
	
	// Сформируем протокол заполнения документа
	фПротоколЗаполнения = Документы.бит_му_КонсолидационныеКорректировки.СформироватьПротоколЗаполненияДокумента(мПротоколЗаполнения);
	
КонецПроцедуры // ЗаполнитьСоставНПРНаСервере() 

// Функция получает сумму оборота за указанный период.
// 
// Параметры:
// 	ДатаНач - Дата.
// 	ДатаКон - Дата.
// 	Организация - СправочникСсылка.Организации.
// 	СписокСчетов - Массив.
// 	РегистрБухгалтерии - Строка.
// 
// Возвращаемое значение:
//  Результат - Число.
// 
&НаСервереБезКонтекста
Функция ПолучитьСуммуОборотаНРПЗаПериод(ДатаНач, ДатаКон, Организация, СписокСчетов, РегистрБухгалтерии)
	
	Результат = 0;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РегистрБухгалтерии.СуммаУпрОборот КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии." + РегистрБухгалтерии + ".Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК РегистрБухгалтерии";
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("ДатаНач",		ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",		ДатаКон);
	Запрос.УстановитьПараметр("СписокСчетов",	СписокСчетов);
	Запрос.УстановитьПараметр("Организация",	Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Сумма;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает строку из таблицы значений.
// 
// Параметры:
//  СоставляющаяНРП - ПеречислениеСсылка.бит_му_СоставляющиеНРП.
//  Организация - СправочникСсылка.Организации.
// 
// Возвращаемое значение:
//  Результат - Строка таблицы значений.
// 
&НаСервере
Функция ПолучитьСтрокуПротоколаЗаполнения(СоставляющаяНРП, Организация)

	Если мПротоколЗаполнения = Неопределено Тогда
		мПротоколЗаполнения = Новый ТаблицаЗначений;
		мПротоколЗаполнения.Колонки.Добавить("СоставляющаяНРП");
		мПротоколЗаполнения.Колонки.Добавить("СуммаОборот");
		мПротоколЗаполнения.Колонки.Добавить("СуммаРезультат");
		мПротоколЗаполнения.Колонки.Добавить("ПодчиненныеДанные");
	КонецЕсли;
	
	ТекСтрокаПротоколаПоСоставляющейНРП = мПротоколЗаполнения.Найти(СоставляющаяНРП, "СоставляющаяНРП");
	Если ТекСтрокаПротоколаПоСоставляющейНРП = Неопределено Тогда
    	ТекСтрокаПротоколаПоСоставляющейНРП = мПротоколЗаполнения.Добавить();
		ТекСтрокаПротоколаПоСоставляющейНРП.СоставляющаяНРП = СоставляющаяНРП;
	КонецЕсли;
	
	Если ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные = Неопределено Тогда
		ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные = Новый ТаблицаЗначений;
		ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Колонки.Добавить("Организация");
		ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Колонки.Добавить("СуммаОборот");
		ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Колонки.Добавить("СуммаРезультат");
		ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Колонки.Добавить("ПодчиненныеДанные");
	КонецЕсли;
	
	ТекСтрокаПротоколаПоОрганизации = ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Найти(Организация, "Организация");	
	Если ТекСтрокаПротоколаПоОрганизации = Неопределено Тогда
		ТекСтрокаПротоколаПоОрганизации = ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Добавить();
		ТекСтрокаПротоколаПоОрганизации.Организация = Организация;
	КонецЕсли;		
	
	Если ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные = Неопределено Тогда
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные = Новый ТаблицаЗначений;
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Колонки.Добавить("ДатаНач");
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Колонки.Добавить("ДатаКон");
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Колонки.Добавить("Доля");
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Колонки.Добавить("СуммаОборот");
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Колонки.Добавить("СуммаРезультат");
	КонецЕсли;

	Возврат ТекСтрокаПротоколаПоОрганизации;
	
КонецФункции // ПолучитьСтрокуПротоколаЗаполнения()

// Функция возвращает обороты НРП.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации.
// 	МетодКонсолидации - ПеречислениеСсылка.бит_му_МетодыКонсолидации.
// 	СоставляющаяНРП - ПеречислениеСсылка.бит_му_СоставляющиеНРП.
// 
// Возвращаемое значение:
//  Результат - Число.
// 
&НаСервере
Функция ПолучитьСуммуОборотаНРП(Организация, МетодКонсолидации, СоставляющаяНРП)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",		КонецДня(Объект.ДатаКон));
	Запрос.УстановитьПараметр("СписокСчетов",		Объект.СписокСчетовНРП.Выгрузить().ВыгрузитьКолонку("Счет"));
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Периметр",			Объект.Периметр);
	Запрос.УстановитьПараметр("МетодКонсолидации",	МетодКонсолидации);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МУ_ОБОРОТЫ.Период КАК Период,
	               |	МУ_ОБОРОТЫ.Организация,
	               |	МУ_ОБОРОТЫ.СуммаУпрОборот
	               |ПОМЕСТИТЬ ТаблицаОбороты
	               |ИЗ
	               |	РегистрБухгалтерии." + Объект.ОбъектСистемы.ИмяОбъекта + ".Обороты(, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК МУ_ОБОРОТЫ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаМертвыхПериодов.Период КАК ДатаОкончания,
	               |	ТаблицаМертвыхПериодов.ДатаПовторногоВхода
	               |ПОМЕСТИТЬ МертвыеПериоды
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПериодыВыхода.Период КАК Период,
	               |		ЕСТЬNULL(МИНИМУМ(АктивныеПериоды.Период), &КонецПериода) КАК ДатаПовторногоВхода
	               |	ИЗ
	               |		РегистрСведений.бит_му_СоставПериметровКонсолидации КАК ПериодыВыхода
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				бит_му_СоставПериметровКонсолидации.Период КАК Период
	               |			ИЗ
	               |				РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
	               |			ГДЕ
	               |				бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации = &Периметр
	               |				И бит_му_СоставПериметровКонсолидации.Организация = &Организация
	               |				И бит_му_СоставПериметровКонсолидации.МетодКонсолидации = &МетодКонсолидации) КАК АктивныеПериоды
	               |			ПО ПериодыВыхода.Период < АктивныеПериоды.Период
	               |	ГДЕ
	               |		ПериодыВыхода.ПериметрКонсолидации = &Периметр
	               |		И ПериодыВыхода.Организация = &Организация
	               |		И ПериодыВыхода.Период <= &КонецПериода
	               |		И ПериодыВыхода.МетодКонсолидации <> &МетодКонсолидации
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ПериодыВыхода.Период
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ПериодыВыхода.ДатаОкончания,
	               |		МИНИМУМ(АктивныеПериоды.Период)
	               |	ИЗ
	               |		РегистрСведений.бит_му_СоставПериметровКонсолидации КАК ПериодыВыхода
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				бит_му_СоставПериметровКонсолидации.Период КАК Период
	               |			ИЗ
	               |				РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
	               |			ГДЕ
	               |				бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации = &Периметр
	               |				И бит_му_СоставПериметровКонсолидации.Организация = &Организация
	               |				И бит_му_СоставПериметровКонсолидации.МетодКонсолидации = &МетодКонсолидации) КАК АктивныеПериоды
	               |			ПО ПериодыВыхода.ДатаОкончания < АктивныеПериоды.Период
	               |	ГДЕ
	               |		ПериодыВыхода.ПериметрКонсолидации = &Периметр
	               |		И ПериодыВыхода.Организация = &Организация
	               |		И ПериодыВыхода.Период <= &КонецПериода
	               |		И ПериодыВыхода.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	               |		И ПериодыВыхода.МетодКонсолидации = &МетодКонсолидации
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ПериодыВыхода.ДатаОкончания) КАК ТаблицаМертвыхПериодов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	бит_му_СоставПериметровКонсолидации.Период,
	               |	бит_му_СоставПериметровКонсолидации.Организация,
	               |	бит_му_СоставПериметровКонсолидации.ПолнаяДоляВладения КАК ПолнаяДоляВладения
	               |ПОМЕСТИТЬ ПараметрыПериметра
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
	               |ГДЕ
	               |	бит_му_СоставПериметровКонсолидации.Организация = &Организация
	               |	И бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации = &Периметр
	               |	И бит_му_СоставПериметровКонсолидации.Период <= &КонецПериода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВложенныйЗапрос.Период
	               |ПОМЕСТИТЬ Периоды
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НАЧАЛОПЕРИОДА(ПараметрыПериметра.Период, МЕСЯЦ) КАК Период
	               |	ИЗ
	               |		ПараметрыПериметра КАК ПараметрыПериметра
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		НАЧАЛОПЕРИОДА(ТаблицаОбороты.Период, МЕСЯЦ)
	               |	ИЗ
	               |		ТаблицаОбороты КАК ТаблицаОбороты) КАК ВложенныйЗапрос
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатыПараметров.Период КАК Период,
	               |	ВЫБОР
	               |		КОГДА МертвыеПериоды.ДатаОкончания ЕСТЬ NULL 
	               |			ТОГДА ПараметрыПериметра.ПолнаяДоляВладения
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПолнаяДоляВладения,
	               |	ВЫБОР
	               |		КОГДА МертвыеПериоды.ДатаОкончания ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК МертвыйПериод
	               |ПОМЕСТИТЬ ТаблицаПроценты
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Периоды.Период КАК Период,
	               |		МАКСИМУМ(ПараметрыПериметра.Период) КАК ПериодПараметры
	               |	ИЗ
	               |		Периоды КАК Периоды
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыПериметра КАК ПараметрыПериметра
	               |			ПО Периоды.Период >= ПараметрыПериметра.Период
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Периоды.Период) КАК ДатыПараметров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыПериметра КАК ПараметрыПериметра
	               |		ПО ДатыПараметров.ПериодПараметры = ПараметрыПериметра.Период
	               |		ЛЕВОЕ СОЕДИНЕНИЕ МертвыеПериоды КАК МертвыеПериоды
	               |		ПО ДатыПараметров.Период >= МертвыеПериоды.ДатаОкончания
	               |			И ДатыПараметров.Период < МертвыеПериоды.ДатаПовторногоВхода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДатыПараметров.Период,
	               |	ДатыПараметров.ПериодПараметры,
	               |	ВЫБОР
	               |		КОГДА МертвыеПериоды.ДатаОкончания ЕСТЬ NULL 
	               |			ТОГДА ПараметрыПериметра.ПолнаяДоляВладения
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА МертвыеПериоды.ДатаОкончания ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОбороты.Период КАК Период,
	               |	ТаблицаОбороты.Организация,
	               |	ТаблицаОбороты.СуммаУпрОборот
	               |ИЗ
	               |	ТаблицаОбороты КАК ТаблицаОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МертвыеПериоды.ДатаОкончания КАК ДатаОкончания,
	               |	МертвыеПериоды.ДатаПовторногоВхода
	               |ИЗ
	               |	МертвыеПериоды КАК МертвыеПериоды
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаОкончания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПараметрыПериметра.Период КАК Период,
	               |	ПараметрыПериметра.Организация,
	               |	ПараметрыПериметра.ПолнаяДоляВладения
	               |ИЗ
	               |	ПараметрыПериметра КАК ПараметрыПериметра
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Периоды.Период КАК Период
	               |ИЗ
	               |	Периоды КАК Периоды
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПроценты.Период КАК Период,
	               |	ТаблицаПроценты.ПолнаяДоляВладения,
	               |	ТаблицаПроценты.МертвыйПериод
	               |ИЗ
	               |	ТаблицаПроценты КАК ТаблицаПроценты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОбороты.Период КАК Период,
	               |	ТаблицаОбороты.СуммаУпрОборот,
	               |	ЕСТЬNULL(ТаблицаПроценты.ПолнаяДоляВладения, 0) КАК ПолнаяДоляВладения,
	               |	ТаблицаОбороты.СуммаУпрОборот * ЕСТЬNULL(ТаблицаПроценты.ПолнаяДоляВладения, 0) / 100 КАК СуммаРезультат
	               |ИЗ
	               |	ТаблицаОбороты КАК ТаблицаОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроценты КАК ТаблицаПроценты
	               |		ПО ТаблицаОбороты.Период = ТаблицаПроценты.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПараметрыПериметра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Периоды
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаПроценты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ МертвыеПериоды";
				   
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРезультат = МассивРезультатов[10].Выгрузить();
	СуммаРезультат = ТаблицаРезультат.Итог("СуммаРезультат");
	
	МертвыеПериоды = МассивРезультатов[6].Выгрузить();
	МертвыеПериоды.Свернуть("ДатаОкончания");
	МертвыеПериоды.Колонки.Добавить("СуммаРезультат");
	
	// Посчитаем суммы оборотов в "мертвых" периодах.
	Для каждого ТекСтр Из МертвыеПериоды Цикл
		Если ТекСтр.ДатаОкончания = НачалоМесяца(ТекСтр.ДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		
		Сумма = ПолучитьСуммуОборотаНРПЗаПериод(НачалоМесяца(ТекСтр.ДатаОкончания), ТекСтр.ДатаОкончания, Организация, Запрос.Параметры.СписокСчетов, Объект.ОбъектСистемы.ИмяОбъекта);		
		ТекСтр.СуммаРезультат 	= Сумма;
		СуммаРезультат 			= СуммаРезультат - Сумма;
	КонецЦикла;
	
	// Сформируем структуру для протокола заполнения документа.
	ТекСтрокаПротоколаПоОрганизации = ПолучитьСтрокуПротоколаЗаполнения(СоставляющаяНРП, Организация);

	ТекДоля = Неопределено;  ТекДатаНач = Неопределено;  ТекСуммаУпрОборот = 0;  ТекСуммаУпрРезультат = 0;
	
	Для каждого ТекСтр Из ТаблицаРезультат Цикл
		
		Индекс = ТаблицаРезультат.Индекс(ТекСтр);
		Если Индекс < (ТаблицаРезультат.Количество() - 1) Тогда
			ПериодСлед = ТаблицаРезультат.Получить(Индекс + 1).Период;
		Иначе
			ПериодСлед = КонецМесяца(Объект.ДатаКон) + 1;
		КонецЕсли;
		
		Если ТекСтр.ПолнаяДоляВладения = ТекДоля Тогда
			// Проверим мертвые периоды
			СтрокаПериодов = ДатаВходитВМертвыеПериоды(ТекСтр.Период, ПериодСлед, МертвыеПериоды);
			Если СтрокаПериодов <> Неопределено Тогда
				СтрокаПериодов.СуммаРезультат = СтрокаПериодов.СуммаРезультат*ТекДоля/100;
				ТекСуммаУпрОборот 		= ТекСуммаУпрОборот + СтрокаПериодов.СуммаРезультат;
				ТекСуммаУпрРезультат 	= ТекСуммаУпрРезультат + СтрокаПериодов.СуммаРезультат;
				
				// Добавим строку в протокол заполнения
				НоваяСтрока = ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Добавить();
				НоваяСтрока.ДатаНач 		= ТекДатаНач;
				НоваяСтрока.ДатаКон 		= СтрокаПериодов.ДатаОкончания;
				НоваяСтрока.Доля			= ТекДоля;
				НоваяСтрока.СуммаОборот 	= ТекСуммаУпрОборот;
				НоваяСтрока.СуммаРезультат 	= ТекСуммаУпрРезультат;
				
				ТекДоля = Неопределено;  ТекДатаНач = Неопределено;  ТекСуммаУпрОборот = 0;  ТекСуммаУпрРезультат = 0;
			Иначе
				ТекСуммаУпрОборот 		= ТекСуммаУпрОборот + ТекСтр.СуммаУпрОборот;
				ТекСуммаУпрРезультат 	= ТекСуммаУпрРезультат + ТекСтр.СуммаРезультат;
			КонецЕсли;
		Иначе
			Если (ТекДоля <> Неопределено) И (ТекДоля <> 0) Тогда
				// Добавим строку в протокол заполнения
				НоваяСтрока = ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Добавить();
				НоваяСтрока.ДатаНач 		= ТекДатаНач;
				НоваяСтрока.ДатаКон 		= ТекСтр.Период - 1;
				НоваяСтрока.Доля			= ТекДоля;
				НоваяСтрока.СуммаОборот 	= ТекСуммаУпрОборот;
				НоваяСтрока.СуммаРезультат 	= ТекСуммаУпрРезультат;
			КонецЕсли;
			
			ТекДоля 					= ТекСтр.ПолнаяДоляВладения;
			ТекДатаНач 					= ТекСтр.Период;
			
			// Проверим мертвые периоды
			СтрокаПериодов = ДатаВходитВМертвыеПериоды(ТекСтр.Период, ПериодСлед, МертвыеПериоды);
			Если СтрокаПериодов <> Неопределено Тогда
				СтрокаПериодов.СуммаРезультат = СтрокаПериодов.СуммаРезультат*ТекДоля/100;
				ТекСуммаУпрОборот 	 	= СтрокаПериодов.СуммаРезультат;
				ТекСуммаУпрРезультат 	= СтрокаПериодов.СуммаРезультат;
				
				// Добавим строку в протокол заполнения
				НоваяСтрока = ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Добавить();
				НоваяСтрока.ДатаНач 		= ТекДатаНач;
				НоваяСтрока.ДатаКон 		= СтрокаПериодов.ДатаОкончания;
				НоваяСтрока.Доля			= ТекДоля;
				НоваяСтрока.СуммаОборот 	= ТекСуммаУпрОборот;
				НоваяСтрока.СуммаРезультат 	= ТекСуммаУпрРезультат;
				
				ТекДоля = Неопределено;  ТекДатаНач = Неопределено;  ТекСуммаУпрОборот = 0;  ТекСуммаУпрРезультат = 0;
			Иначе			
				ТекСуммаУпрОборот 		= ТекСтр.СуммаУпрОборот;
				ТекСуммаУпрРезультат 	= ТекСтр.СуммаРезультат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если (ТекДоля <> Неопределено) И (ТекДоля <> 0) Тогда		
		// Добавим строку в протокол заполнения
		НоваяСтрока = ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Добавить();
		НоваяСтрока.ДатаНач 		= ТекДатаНач;
		НоваяСтрока.ДатаКон 		= ТекСтр.Период - 1;
		НоваяСтрока.Доля			= ТекДоля;
		НоваяСтрока.СуммаОборот 	= ТекСуммаУпрОборот;
		НоваяСтрока.СуммаРезультат 	= ТекСуммаУпрРезультат;
	КонецЕсли;
	
	// Посчитаем итог для организации
	ТекСтрокаПротоколаПоОрганизации.СуммаОборот 	= ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Итог("СуммаОборот");
	ТекСтрокаПротоколаПоОрганизации.СуммаРезультат 	= ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Итог("СуммаРезультат");
	
	Возврат СуммаРезультат;
	
КонецФункции

// Функция определяет, попадает ли указанная дата в "мертвые" периоды.
// 
// Параметры:
// 	Период - Дата.
// 	ПериодСлед - Дата.
// 	ТаблицаЗначенийПериоды - ТаблицаЗначений.
// 
// Возвращаемое значение:
//  Результат - Строка таблицы значений.
// 
&НаСервере
Функция ДатаВходитВМертвыеПериоды(Период, ПериодСлед, ТаблицаЗначенийПериоды)
	
	Для каждого ТекСтр Из ТаблицаЗначенийПериоды Цикл
		Если ТекСтр.ДатаОкончания = НачалоМесяца(ТекСтр.ДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ((Период < ТекСтр.ДатаОкончания) И ((ПериодСлед > ТекСтр.ДатаОкончания))) Тогда
			Возврат ТекСтр;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает остатки НРП.
// 
// Параметры:
// 	МатеринскиеКомпании - массив элементов СправочникСсылка.Организации.
//  СоставляющаяНРП - ПеречислениеСсылка.бит_му_СоставляющиеНРП.
// 
// Возвращаемое значение:
//  Результат - ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьОстатокНРП(МатеринскиеКомпании, СоставляющаяНРП)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РегистрБухгалтерии.СуммаУпрОстаток КАК Сумма,
	               |	Организации.Ссылка КАК Организация
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии." + Объект.ОбъектСистемы.ИмяОбъекта + ".Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация В (&МатеринскиеКомпании)) КАК РегистрБухгалтерии
	               |		ПО Организации.Ссылка = РегистрБухгалтерии.Организация
	               |ГДЕ
	               |	Организации.Ссылка В(&МатеринскиеКомпании)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДатаКон",			 КонецДня(Объект.ДатаКон));
	Запрос.УстановитьПараметр("МатеринскиеКомпании", МатеринскиеКомпании);
	Запрос.УстановитьПараметр("СписокСчетов",		 Объект.СписокСчетовНРП.Выгрузить().ВыгрузитьКолонку("Счет"));
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтр Из ТаблицаРезультат Цикл
		
		// 
		ТекСтрокаПротоколаПоОрганизации = ПолучитьСтрокуПротоколаЗаполнения(СоставляющаяНРП, ТекСтр.Организация);
		
		// Добавим строку в протокол заполнения
		НоваяСтрока = ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Добавить();
		НоваяСтрока.ДатаКон 		= КонецДня(Объект.ДатаКон);
		НоваяСтрока.СуммаОборот 	= ТекСтр.Сумма;
		НоваяСтрока.СуммаРезультат 	= ТекСтр.Сумма;
		
		// Посчитаем итог для организации
		ТекСтрокаПротоколаПоОрганизации.СуммаОборот 	= ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Итог("СуммаОборот");
		ТекСтрокаПротоколаПоОрганизации.СуммаРезультат 	= ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Итог("СуммаРезультат");
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// процедура заполняет табличную часть "Капитал".
// 
// Параметры:
//  СписокОрганизаций - Массив.
// 
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьКапитал(СписокОрганизаций)

	ТекстЗапроса = "ВЫБРАТЬ
	               |	РегистрБухгалтерии.СуммаУпрОстаток КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА РегистрБухгалтерии.Счет В ИЕРАРХИИ (&СписокСчетовАкционерногоКапитала)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.бит_му_СоставляющиеКапитала.АкционерныйКапитал)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.бит_му_СоставляющиеКапитала.ЭмиссионныйДоход)
	               |	КОНЕЦ КАК СоставляющаяКапитала,
	               |	РегистрБухгалтерии.Счет,
	               |	РегистрБухгалтерии.Организация
	               |ИЗ
	               |	РегистрБухгалтерии." + Объект.ОбъектСистемы.ИмяОбъекта + ".Остатки(
	               |			&ДатаКон,
	               |			Счет В ИЕРАРХИИ (&СписокСчетовАкционерногоКапитала)
	               |				ИЛИ Счет В ИЕРАРХИИ (&СписокСчетовЭмиссионногоДохода),
	               |			,
	               |			Организация В (&СписокОрганизаций)) КАК РегистрБухгалтерии";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДатаКон",			 				КонецДня(Объект.ДатаКон));
	Запрос.УстановитьПараметр("СписокОрганизаций",					СписокОрганизаций);
	Запрос.УстановитьПараметр("СписокСчетовАкционерногоКапитала", 	Объект.СписокСчетовАкционерногоКапитала.Выгрузить().ВыгрузитьКолонку("Счет"));
	Запрос.УстановитьПараметр("СписокСчетовЭмиссионногоДохода", 	Объект.СписокСчетовЭмиссионногоДохода.Выгрузить().ВыгрузитьКолонку("Счет"));
	
	Результат = Запрос.Выполнить().Выгрузить();
	Объект.Капитал.Загрузить(Результат);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьКапитал()

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.СчетВспомогательный);
	МассивЭлементов.Добавить(Элементы.СчетГудвилла);
	МассивЭлементов.Добавить(Элементы.СчетСписанияОбесцененияГудвилла);
	МассивЭлементов.Добавить(Элементы.СписокСчетовНРПСчет);
	МассивЭлементов.Добавить(Элементы.СписокСчетовАкционерногоКапиталаСчет);
	МассивЭлементов.Добавить(Элементы.СписокСчетовЭмиссионногоДоходаСчет);
	МассивЭлементов.Добавить(Элементы.КапиталСчет);

	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура устанавливает заголовок формы документа.
// 
&НаКлиенте
Процедура УстановитьЗаголовокФормыДокумента()

 	СтруктураЗаголовка = Новый Структура;
 	СтруктураЗаголовка.Вставить("ЭтоНовый"            , Параметры.Ключ.Пустая());
 	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
 	СтруктураЗаголовка.Вставить("ДокументПроведен"    , Объект.Проведен);
 
 	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма,СтруктураЗаголовка);

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура добавляет новую строку в ТЧ "СоставНРП".
// 
// Параметры:
//  СоставляющаяНРП - ПеречислениеСсылка.бит_му_СоставляющиеНРП.
//  Организация - СправочникСсылка.Организации.
//  Сумма - Число.
//
&НаСервере
Процедура ДобавитьСтрокуСоставНРП(СоставляющаяНРП, Организация, Сумма)

	НоваяСтрока = Объект.СоставНРП.Добавить();
	НоваяСтрока.СоставляющаяНРП = СоставляющаяНРП;
	НоваяСтрока.Организация		= Организация;
	НоваяСтрока.Сумма			= Сумма;

КонецПроцедуры // ДобавитьСтрокуСоставНРП() 

// Процедура вычисляет итог суммы для указанной ветки.
// 
// Параметры:
//  Ветка - ДанныеФормыДерево.
// 
&НаКлиенте
Процедура ПосчитатьИтогиДляВеткиДерева(Ветка)

	// Посчитаем итоги
	Если Ветка <> Неопределено Тогда
		ДочерниеЭлементы = Ветка.ПолучитьЭлементы();
	
		Если ДочерниеЭлементы.Количество() > 0 Тогда
			Сумма = 0;
			Для каждого ТекСтр Из ДочерниеЭлементы Цикл
				Сумма = Сумма + ТекСтр.Сумма;
			КонецЦикла;
			Ветка.Сумма = Сумма;
		КонецЕсли;
	КонецЕсли;
	
	// Обновим сумму для строки "Итого"
	СуммаИтого 	   = 0;
	ЭлементыДерева = СоставНРП.ПолучитьЭлементы();
	
	Для каждого ТекСтр Из ЭлементыДерева Цикл
		Если ТекСтр.Аналитика = мКэшЗначений.Составляющие["Итого"] Тогда
			СоставляющаяИтого = ТекСтр;
		Иначе
			СуммаИтого = СуммаИтого + ТекСтр.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	СоставляющаяИтого.Сумма = СуммаИтого;
	Объект.СуммаНПРИтого 	= СуммаИтого;

КонецПроцедуры // ПосчитатьИтогиДляВеткиДерева()


#КонецОбласти
