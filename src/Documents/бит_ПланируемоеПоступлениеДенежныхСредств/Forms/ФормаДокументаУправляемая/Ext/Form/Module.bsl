
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущаяДата; // Хранит текущую дату документа.
&НаКлиенте
Перем мТекущаяДатаПоступления; // Хранит текущую дату поступления.
&НаКлиенте
Перем мТекущаяДатаПлатежаКрайняя; // Хранит текущую крайнюю дату платежа.
&НаКлиенте
Перем мТекущаяВалютаДокумента; // Хранит текущую валюту взаиморасчетов.
&НаКлиенте
Перем мТекущийКурсДокумента; // Хранит текущий курс документа.
&НаКлиенте
Перем мТекущаяКратностьДокумента; // Хранит текущую кратность документа.
&НаКлиенте
Перем мСписокВалют; // Хранит список доступных для выбора валют.
&НаКлиенте
Перем мТекущийДоговорКонтрагента; // Хранит текущий договор контрагента.
&НаКлиенте
Перем мФормироватьНПУпрАвтоматически; // Хранит признак, того что НазначениеПлатежаУпр следует заполняет автоматически.
&НаКлиенте
Перем мДокументОснование; // Хранит значение документа основания.
&НаКлиенте
Перем мОграничениеТипов; // Хранит значение ограничения типов для основания..
&НаКлиенте
Перем мФормаОплаты; // Хранит значение формы оплаты.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПланируемоеПоступлениеДенежныхСредств"));
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументЗаявка, МассивТипов, Отказ);
    Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	Если Объект.Распределение.Количество() = 0 Тогда
		Объект.Распределение.Добавить();
		УстановитьИДСтроки(Объект.Распределение[0].ИД);
	КонецЕсли;

	// Заполним текст про график платежей.
	ЗаполнитьТекстПроГрафикПлатежей();
	
	// Рассчитаем сумму без НДС для отображения на форме.
	ЭтаФорма.СуммаБезНДС = РассчитатьСуммуБезНДС(Объект.Сумма, Объект.НДС);
	
	// Вызов механизма разделения прав доступа
	// бит_ПраваДоступа.ПередОткрытиемФормы(Отказ,СтандартнаяОбработка,ЭтотОбъект,ЭтаФорма);	
																
	// Настроим отображение полей доп. аналитик в форме.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ЭтаФорма
																	,мКэшЗначений.ИзмеренияДоп
																	,мКэшЗначений.НастройкиИзмерений);
	// Отобразим дополнительные измерения в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	,"Распределение"
																	,мКэшЗначений.ИзмеренияДоп
																	,мКэшЗначений.НастройкиИзмерений);
																	
																	
																	// Показ расшифровки платежа списком	
    Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаСписок.Пометка = (Объект.Распределение.Количество() > 1);
	

	// Установить видимость реквизитов и заголовков колонок.	
	УстановитьВидимость();
	
	бит_РаботаСДиалогамиСервер.УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы);
	УстановитьСостояниеДокумента();
	
// +СБ. Широков Николай. 2014-09-10. ТЗ "Казначейство" 2.2.4.1. 
    //СБ_КазначействоКлиент.бит_ПланируемоеПоступлениеДенежныхСредствФормаДокументаПриОткрытии(ЭтаФорма);
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.бит_ПланируемоеПоступлениеДенежныхСредств.ФормаДокументаУправляемая");

// -СБ. Широков Николай

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// Запомним текущие значения реквизитов
	мДокументОснование 			= Объект.ДокументОснование;
	мТекущаяДата 			    = Объект.Дата;
	мТекущаяДатаПоступления 	= Объект.ДатаПоступления;
	мТекущаяДатаПлатежаКрайняя 	= Объект.ДатаПлатежаКрайняя;
	мТекущаяВалютаДокумента    	= Объект.ВалютаДокумента;
	мТекущийКурсДокумента      	= Объект.КурсДокумента;
	мТекущаяКратностьДокумента 	= Объект.КратностьДокумента;
	мТекущийДоговорКонтрагента 	= Объект.ДоговорКонтрагента;
		
	// Вычислим значение флага автоформирования назначения платежа.
	УстановитьФлагФормироватьНПУпрАвтоматически();   
	
	
	// Установим отбор для статей оборотов	
	УстановитьПараметрыВыбораСтатьи(Элементы.СтатьяОборотов);

	// Проверка возможности редактирования исполнителя.
	Элементы.Исполнитель.ТолькоПросмотр = мКэшЗначений.РольДоступна.ИсполнительКазначейства;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Оставим только те разрезы, которые указаны в статье оборотов.
	НастроитьВидимостьАналитикБюджетирования();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.мСписок = Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаСписок.Пометка;	
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();	

КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ПланируемоеПоступлениеДенежныхСредств";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента()
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГиперссылкаГрафикПлатежейНажатие(Элемент)
	
	// Откроем график платежей.
    бит_КазначействоКлиент.ОткрытьГрафикПлатежей(Объект, ЭтаФорма);
	
КонецПроцедуры // ГиперссылкаГрафикПлатежейНажатие()

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мДокументОснование = Объект.ДокументОснование;
	мОграничениеТипов  = Элемент.ОграничениеТипа;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		// Ограничение типа не меняем для поля, если оно заполнено
		// Запрещаем выбирать тип повторно.
		Элемент.ВыбиратьТип = Ложь;
		
	Иначе

		// Формируем список выбора ограничений типа, если поле ДокументОснование не заполнено.
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		СписокТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РеализацияОтгруженныхТоваров"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		
		// Пока поле документ основание нельзя редактировать, поэтому закомментирован код.
		// Код переделать.	
		// Оповещение = Новый ОписаниеОповещения("ДокументОснованиеНачалоВыбораОкончание", ЭтотОбъект); 
		// ВыбранныйТип = ЭтаФорма.ПоказатьВыборИзСписка(СписокТипов);
		
		// // Устанавливаем ограничение типа для поля ДокументОснование, если тип выбран.
		// Если ВыбранныйТип <> Неопределено Тогда 	
		// 	МассивТипов = Новый Массив;
		//  	МассивТипов.Добавить(ВыбранныйТип.Значение);
		// 	Описание = Новый ОписаниеТипов(МассивТипов);
		// 	Элемент.ОграничениеТипа = Описание;
		// КонецЕсли;	
		// 
		// // Запрещаем выбирать тип.
		// Элемент.ВыбиратьТип = Ложь;
		
	КонецЕсли; 	
	
КонецПроцедуры // ДокументОснованиеНачалоВыбора()

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Разрешено = ПроверитьВозможностьЗаполненияДокументаПоОснованию(мДокументОснование);
	Если Не Разрешено Тогда
		Объект.ДокументОснование = мДокументОснование;
		Элемент.ОграничениеТипа = мОграничениеТипов; 
		Возврат;	
	КонецЕсли;
	
	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаСписок.Пометка = (Объект.Распределение.Количество() > 1); 
	УстановитьВидимость();
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыВФорме();
	
	ИзменениеДаты();
	
КонецПроцедуры // ДатаПриИзменении()
      
&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
		
	ИзменениеДатыПоступления();
	
КонецПроцедуры // ДатаПоступленияПриИзменении()

&НаКлиенте
Процедура ДатаПлатежаКрайняяПриИзменении(Элемент)
	
	ИзменениеКрайнейДатыПлатежа();
	
КонецПроцедуры // ДатаПлатежаКрайняяПриИзменении()


&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыВФорме();
	
КонецПроцедуры // ДатаПлатежаКрайняяПриИзменении()

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	РассчитатьСуммуНДСКлиент(Объект);
	РассчитатьСуммуБезНДСКлиент();
	
КонецПроцедуры // СуммаПриИзменении()

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	РассчитатьСуммуНДСКлиент(Объект);
	РассчитатьСуммуБезНДСКлиент();

КонецПроцедуры // СтавкаНДСПриИзменении()


&НаКлиенте
Процедура ФормаОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мФормаОплаты = Объект.ФормаОплаты;
	
КонецПроцедуры // ФормаОплатыНачалоВыбора()

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	Если Объект.ФормаОплаты <> мФормаОплаты Тогда
		
		ИзменениеФормыОплаты();
		УстановитьВидимость();	
	
	КонецЕсли; 	
	
КонецПроцедуры // ФормаОплатыПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзменениеОрганизации();
		
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец"       	  , Объект.Организация);
	Отбор.Вставить("ВалютаДенежныхСредств", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ТекущийЭлемент" , Объект.БанковскийСчет);
	СтруктураПараметров.Вставить("Отбор", Отбор);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе", Истина);
		
	Элемент.ВыбиратьТип = Ложь;
	
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", СтруктураПараметров, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры // БанковскийСчетНачалоВыбора()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ИзменениеКонтрагента();
	
	// Могли поменять договор.
	ИзменениеДоговораКонтрагентаКлиент();
	УстановитьВидимость();

КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ИзменениеДоговораКонтрагентаКлиент();
	
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаПриИзменении(Элемент)
	
	Если мФормироватьНПУпрАвтоматически Тогда
	
		Объект.НазначениеПлатежаУпр = Объект.НазначениеПлатежа;
	
	КонецЕсли; 

КонецПроцедуры // НазначениеПлатежаПриИзменении()

&НаКлиенте
Процедура НазначениеПлатежаУпрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Формирование списка выбора.
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Объект.НазначениеПлатежа);

КонецПроцедуры // НазначениеПлатежаУпрНачалоВыбора()

&НаКлиенте
Процедура НазначениеПлатежаУпрАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	// Формирование списка выбора.
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Объект.НазначениеПлатежа);
	
КонецПроцедуры // НазначениеПлатежаУпрАвтоПодбор()

&НаКлиенте
Процедура НазначениеПлатежаУпрПриИзменении(Элемент)
	
	УстановитьФлагФормироватьНПУпрАвтоматически();

КонецПроцедуры // НазначениеПлатежаУпрПриИзменении()
          

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура("СписокСтатейПринадлежность,ЦФО,СтатьяОборотов"
										,мКэшЗначений.СписокСтатейПринадлежность
										,Объект.ЦФО
										,Объект.СтатьяОборотов);
								 
	ИзменениеЦФО(СтруктураПараметров);
	мКэшЗначений.СписокСтатейПринадлежность = СтруктураПараметров.СписокСтатейПринадлежность;
	
	УстановитьПараметрыВыбораСтатьи(Элементы.СтатьяОборотов);
	
	СтруктураПараметров.Вставить("ВыводитьСообщения",Истина);	
	
	Если НЕ бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(СтруктураПараметров) Тогда
		 Объект.СтатьяОборотов = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ЦФОПриИзменении()

&НаКлиенте
Процедура СтатьяОборотовПриИзменении(Элемент)
	
    ИзменениеСтатьиОборотов();	
	ЭтаФорма.СуммаБезНДС = РассчитатьСуммуБезНДС(Объект.Сумма, Объект.НДС);

КонецПроцедуры // СтатьяОборотовПриИзменении()

// Процедура - обработчик события "НачалоВыбора" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,Объект
															   ,Элемент.Имя
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодбор" полей ввода "Аналитика_i" (i от 1 до 4).
//
&НаКлиенте
Процедура Аналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,Объект
															   ,Элемент.Имя
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,Объект
	                                                                       	,Элемент.Имя
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределение

&НаКлиенте
Процедура РаспределениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Распределение.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		УстановитьИДСтроки(ТекущаяСтрока.ИД);
	КонецЕсли;
	
	мТекущаяДатаПоступления    = ТекущаяСтрока.ДатаПоступления;
	мТекущаяДатаПлатежаКрайняя = ТекущаяСтрока.ДатаПлатежаКрайняя;
	мТекущийДоговорКонтрагента = ТекущаяСтрока.ДоговорКонтрагента;	
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущаяСтрока = Элементы.Распределение.ТекущиеДанные;
		
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущаяСтрока,
															мКэшЗначений.ИзмеренияДоп,
															мКэшЗначений.НастройкиИзмерений);
		
	КонецЕсли;
	 	
КонецПроцедуры // РаспределениеПриНачалеРедактирования()

&НаКлиенте
Процедура РаспределениеПередУдалением(Элемент, Отказ)
	
	Если Объект.Распределение.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // РаспределениеПередУдалением()

&НаКлиенте
Процедура РаспределениеДатаПоступленияПриИзменении(Элемент)
	
	Идентификатор = Элементы.Распределение.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеДатыПоступления(Идентификатор);
	
КонецПроцедуры // РаспределениеДатаПоступленияПриИзменении()

&НаКлиенте
Процедура РаспределениеДатаПлатежаКрайняяПриИзменении(Элемент)
	
	Идентификатор = Элементы.Распределение.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеКрайнейДатыПлатежа(Идентификатор);

КонецПроцедуры // РаспределениеДатаПлатежаКрайняяПриИзменении()

&НаКлиенте
Процедура РаспределениеСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Распределение.ТекущиеДанные;
	РассчитатьСуммуНДСКлиент(ТекущаяСтрока);
	
КонецПроцедуры // РаспределениеСуммаПриИзменении()

&НаКлиенте
Процедура РаспределениеСтавкаНДСПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.Распределение.ТекущиеДанные;
	РассчитатьСуммуНДСКлиент(ТекущаяСтрока);
	
КонецПроцедуры // РаспределениеСтавкаНДСПриИзменении()

&НаКлиенте
Процедура РаспределениеБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец"       	  , Объект.Организация);
	Отбор.Вставить("ВалютаДенежныхСредств", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ТекущийЭлемент" 	 , ТекущиеДанные.БанковскийСчет);
	СтруктураПараметров.Вставить("Отбор"		 	 , Отбор);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе", Истина);
		
	Элемент.ВыбиратьТип = Ложь;
	
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", СтруктураПараметров, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
КонецПроцедуры // РаспределениеБанковскийСчетНачалоВыбора()

&НаКлиенте
Процедура РаспределениеКонтрагентПриИзменении(Элемент)
	
	Идентификатор = Элементы.Распределение.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеКонтрагента(Идентификатор);
	
	ИзменениеДоговораКонтрагента(Ложь, Идентификатор);
	
КонецПроцедуры // РаспределениеКонтрагентПриИзменении()

&НаКлиенте
Процедура РаспределениеДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
		
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = Элемент.Родитель.ТекущиеДанные.ПолучитьИдентификатор();
 	Отказ = Ложь;	
	
	ИзменениеДоговораКонтрагента(Отказ, Идентификатор);
	
	Если Отказ = Истина Тогда
		
		ТекущиеДанные.ДоговорКонтрагента = мТекущийДоговорКонтрагента;
		Возврат;
	
	КонецЕсли; 
	
	мТекущийДоговорКонтрагента = ТекущиеДанные.ДоговорКонтрагента;
	
КонецПроцедуры // РаспределениеДоговорКонтрагентаПриИзменении()

&НаКлиенте
Процедура РаспределениеДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЦФОПриИзменении(Элемент)
	
	Строка = Элемент.Родитель.ТекущиеДанные;
	Идентификатор = Элементы.Распределение.ТекущиеДанные.ПолучитьИдентификатор();
	СтруктураПараметров = Новый Структура("СписокСтатейПринадлежность, ЦФО, СтатьяОборотов"
										,мКэшЗначений.СписокСтатейПринадлежность
										,Строка.ЦФО
										,Строка.СтатьяОборотов);
								 
	ИзменениеЦФО(СтруктураПараметров, Идентификатор);
	мКэшЗначений.СписокСтатейПринадлежность = СтруктураПараметров.СписокСтатейПринадлежность;
	
	СтруктураПараметров.Вставить("ВыводитьСообщения",Истина);	
	
	Если НЕ бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(СтруктураПараметров) Тогда
		 Строка.СтатьяОборотов = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // РаспределениеЦФОПриИзменении()

&НаКлиенте
Процедура РаспределениеСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Идентификатор = Элементы.Распределение.ТекущиеДанные.ПолучитьИдентификатор();
	мКэшЗначений.СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежности(, Идентификатор);
	УстановитьПараметрыВыбораСтатьи(Элемент);

КонецПроцедуры // РаспределениеСтатьяОборотовНачалоВыбора()

&НаКлиенте
Процедура РаспределениеСтатьяОборотовПриИзменении(Элемент)
	
	Идентификатор = Элементы.Распределение.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСтатьиОборотов(Идентификатор);	
		
КонецПроцедуры // РаспределениеСтатьяОборотовПриИзменении()

&НаКлиенте
Процедура РаспределениеПослеУдаления(Элемент)
	
	НастроитьВидимостьАналитикБюджетирования();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей ввода "Аналитика_<N>".
// 
&НаКлиенте
Процедура Распределение_Аналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
	
	
КонецПроцедуры // Распределение_Аналитика_НачалоВыбора()

// Процедура - обработчик события "АвтоПодбор" полей ввода "Аналитика_<N>".
//
&НаКлиенте
Процедура Распределение_Аналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);

КонецПроцедуры

// Процедура - обработчик события "Очистка" полей ввода "Аналитика_<N>".
// 
&НаКлиенте
Процедура Распределение_Аналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
	                                                                       	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
	
	
КонецПроцедуры // Распределение_Аналитика_Очистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ДействияФормыСписок(Команда)
	
	Кнопка = Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаСписок;
		
	Если Кнопка.Пометка  Тогда
		
		Если  Объект.Распределение.Количество() > 1 Тогда
			
			Оповещение = Новый ОписаниеОповещения("УдалениеТабЧасти", ЭтотОбъект); 
			ТекстВопроса = "Все строки табличной части, кроме первой, будут удалены.
							|Продолжить?";
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);				
							
		Иначе
			
			Кнопка.Пометка = НЕ Кнопка.Пометка;

			СинхронизироватьРеквизиты("Шапка");
			
			мСтрокаРаспределение 	   = Объект.Распределение[0];
			мТекущаяДатаПоступления    = мСтрокаРаспределение.ДатаПоступления;
			мТекущаяДатаПлатежаКрайняя = мСтрокаРаспределение.ДатаПлатежаКрайняя;
			мТекущийДоговорКонтрагента = мСтрокаРаспределение.ДоговорКонтрагента;
			
		КонецЕсли;	
			
	Иначе
		
		Кнопка.Пометка = НЕ Кнопка.Пометка;

		СинхронизироватьРеквизиты("Строка");
			
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыСписок()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	мКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
    мКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);

	// Перечисления
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("СтавкиНДС", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СтавкиНДС));
	КэшПеречисления.Вставить("бит_РасходДоход", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_ВидыДенежныхСредств", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыДенежныхСредств));
	мКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	// Доступные роли
	КэшРольДоступна = Новый Структура;
	РольДоступнаИсполнительКазначейства = бит_ОбщегоНазначения.РольДоступнаРлс();
	КэшРольДоступна.Вставить("ИсполнительКазначейства", РольДоступнаИсполнительКазначейства);
    мКэшЗначений.Вставить("РольДоступна", КэшРольДоступна);
	
	мКэшЗначений.Вставить("Перечисление_ГрафикПлатежей"
							, Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей);
	
	// Валюта регламентированного учета
	мКэшЗначений.Вставить("мВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	// Принадлежность статей оборотов
	мКэшЗначений.Вставить("СписокСтатейПринадлежность", ПолучитьСписокСтатейПоПринадлежности());
	
	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПланируемоеПоступлениеДенежныхСредств"));
	мКэшЗначений.Вставить("ИзмеренияДоп"      , ДокументЗаявка.мИзмеренияДоп);
	мКэшЗначений.Вставить("НастройкиИзмерений", ДокументЗаявка.мНастройкиИзмерений);
	
	// Сформируем список доступных видов договоров.
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	бит_ДоговораСервер.ДобавитьВидыДоговоровНаЗакупку(СписокВидовДоговоров);	
	мКэшЗначений.Вставить("СписокВидовДоговоров", СписокВидовДоговоров);
	
    //мКэшЗначений.Вставить("ЕстьСправочникКассы", Метаданные.Справочники.Найти("Кассы") <> Неопределено);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()


// Процедура осуществляет управление видимостью/доступностью реквизитов формы.
// 
&НаСервере
Процедура УстановитьВидимость()

	Если Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаСписок.Пометка Тогда 
		Элементы.ПанельОсновная.ПодчиненныеЭлементы.Поступление.Видимость = Ложь;
		Элементы.ПанельОсновная.ПодчиненныеЭлементы.Список.Видимость      = Истина;
	Иначе
		Элементы.ПанельОсновная.ПодчиненныеЭлементы.Поступление.Видимость = Истина;
		Элементы.ПанельОсновная.ПодчиненныеЭлементы.Список.Видимость      = Ложь;
	КонецЕсли;

	ЭтоГрафикПлатежей = (Объект.ТипЗаявки = мКэшЗначений.Перечисление_ГрафикПлатежей);
	
	// Если тип "График платежей", тогда запретим его редактирование.
	Элементы.ТипЗаявки.ТолькоПросмотр = ЭтоГрафикПлатежей;
	
	Элементы.НадписьГрафикПлатежей.Видимость     = ЭтоГрафикПлатежей;
	Элементы.ГиперссылкаГрафикПлатежей.Видимость = ЭтоГрафикПлатежей;
	
	Элементы.БанковскийСчет.Заголовок = НСтр("ru = 'Банковский счет'");
    Если Объект.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда
        Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
            Объект.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
        КонецЕсли;
        Элементы.БанковскийСчет.Видимость 			   = Ложь;
        Элементы.РаспределениеБанковскийСчет.Видимость = Ложь;  			
    Иначе
        Элементы.БанковскийСчет.Видимость 			   = Истина;
        Элементы.РаспределениеБанковскийСчет.Видимость = Истина;
    КонецЕсли;
	
	НастроитьВидимостьАналитикБюджетирования();

КонецПроцедуры // УстановитьВидимость()

// Функция получает список статей оборотов, принадлежащих данному ЦФО.
// 
// Параметры:
//  ВыводитьСообщения - Булево.
// 
// Возвращаемое значение:
//  СписокЗначений.
// 
&НаСервере
Функция ПолучитьСписокСтатейПоПринадлежности(ВыводитьСообщения = Ложь, Идентификатор = Неопределено)

	Если Идентификатор <> Неопределено Тогда
		ТекущаяСтрока = Объект.Распределение.НайтиПоИдентификатору(Идентификатор);
		НомерСтроки = ТекущаяСтрока.НомерСтроки - 1;
    Иначе
		НомерСтроки = Неопределено;	
	КонецЕсли; 
	
		
	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПланируемоеПоступлениеДенежныхСредств"));
	СписокСтатей = ДокументЗаявка.ПолучитьСписокСтатейПоПринадлежностиМодуль(, НомерСтроки);

    Возврат СписокСтатей;
	
КонецФункции // ПолучитьСписокСтатейПоПринадлежности()


// Процедура проверяет возможность заполнения документа по основанию.
// 
// Параметры:
//  ДокументСсылка.
// 
&НаСервере
Функция ПроверитьВозможностьЗаполненияДокументаПоОснованию(мДокументОснование)

	Основание = Объект.ДокументОснование;
	ДокументЗаявка = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_ПланируемоеПоступлениеДенежныхСредств"));
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат Истина;
	КонецЕсли; 

	Разрешено = бит_Казначейство.ПроверитьВозможностьЗаполненияДокументаПоОснованию(ДокументЗаявка, Основание, "бит_ПланируемоеПоступлениеДенежныхСредств");
	Если Не Разрешено Тогда
		Объект.ДокументОснование = мДокументОснование;
		Возврат Ложь;
	КонецЕсли; 
	
	ДокументЗаявка.ЗаполнитьПоОснованию(Основание);
	ЗначениеВДанныеФормы(ДокументЗаявка,Объект);
	
	мДокументОснование = Основание;

	Возврат Истина;

КонецФункции // ПроверитьВозможностьЗаполненияДокументаПоОснованию()

// Процедура выполняет действия на сервере, 
// необходимые при смене страницы основной панели. 
// 
// Параметры:
//  Строка.
// 
&НаСервере
Процедура СинхронизироватьРеквизиты(ШапкаСтрока)
	
	ДокументЗаявка = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_ПланируемоеПоступлениеДенежныхСредств"));
	ДокументЗаявка.СинхронизироватьРеквизитыШапкиИСтроки(0, ШапкаСтрока);
	ЗначениеВДанныеФормы(ДокументЗаявка,Объект);
	
	// Рассчитаем сумму без НДС для отображения на форме.
	ЭтаФорма.СуммаБезНДС = РассчитатьСуммуБезНДС(Объект.Сумма, Объект.НДС);
	
	УстановитьВидимость();
	
КонецПроцедуры // СинхронизироватьРеквизиты()


// Процедура расчитывает суммму НДС.
// 
// 
&НаСерверебезКонтекста
Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС)// Контейнер)

	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(СтавкаНДС, Перечисления.СтавкиНДС);
	
	НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Сумма
												,Истина
												,Истина
												,СтавкаНДСЧисло);
												
	Возврат НДС;
																							
КонецФункции // РассчитатьСуммуНДС()

// Процедура расчитывает суммму без НДС.
// 
&НаСерверебезКонтекста
Функция РассчитатьСуммуБезНДС(Сумма, НДС)

	СуммаБезНДС = Сумма - НДС;
	Возврат СуммаБезНДС;
	
КонецФункции // РассчитатьСуммуБезНДС()

// Процедура пересчитывает суммы документа при необходимости.
// 
// Параметры:
//  мТекущаяВалюта    - СправочникСсылка.Валюты.
//  мТекущийКурс	  - Число.
//  мТекущаяКратность - Число.
// 
&НаСервере
Процедура ПересчитатьСуммы( мТекущаяВалюта, мТекущийКурс, мТекущаяКратность)

	Объект.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.Сумма
															,мТекущаяВалюта
															,Объект.ВалютаДокумента
															,мТекущийКурс
															,Объект.КурсДокумента
															,мТекущаяКратность
															,Объект.КратностьДокумента);
															
	Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
		
		СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
															,мТекущаяВалюта
															,Объект.ВалютаДокумента
															,мТекущийКурс
															,Объект.КурсДокумента
															,мТекущаяКратность
															,Объект.КратностьДокумента);
															
		СтрокаТаблицы.НДС = РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, СтрокаТаблицы.СтавкаНДС);
		
	КонецЦикла; 
		 
	Объект.НДС 	 		 = РассчитатьСуммуНДС(Объект.Сумма, Объект.СтавкаНДС);
	ЭтаФорма.СуммаБезНДС = РассчитатьСуммуБезНДС(Объект.Сумма, Объект.НДС); 	

КонецПроцедуры // ПересчитатьСуммы()


// Заполняет текст про график платежей в форме документа.
// 
&НаСервере
Процедура ЗаполнитьТекстПроГрафикПлатежей()

	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПланируемоеПоступлениеДенежныхСредств"));
	Ссылка = ДокументЗаявка.Ссылка;
	
    Если Объект.ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей Тогда
        
        ДокГрафикПлатежей = бит_Казначейство.НайтиДокументГрафикаПлатежей(Ссылка);
        
        Если ЗначениеЗаполнено(ДокГрафикПлатежей) Тогда
            
            Элементы.ГиперссылкаГрафикПлатежей.Заголовок   = Строка(ДокГрафикПлатежей);
            Элементы.ГиперссылкаГрафикПлатежей.ГиперСсылка = Истина;
			Элементы.ТипЗаявки.Видимость = Ложь;
            
        Иначе
            Элементы.ГиперссылкаГрафикПлатежей.Заголовок   = "Не найден";
            Элементы.ГиперссылкаГрафикПлатежей.ГиперСсылка = Ложь;
        КонецЕсли;
        
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьТекстПроГрафикПлатежей()


// Процедура вызывает процедуру модуля объекта для выполнения действий,
// необходимых при изменении валюты.
// 
&НаСервере
Процедура ИзменениеВалюты()
 		
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента      = СтрКурса.Курс;
	Объект.КратностьДокумента = СтрКурса.Кратность;
	
КонецПроцедуры // ИзменениеВалютыВызовМодуля()

// Процедура выполняет действия, необходимые при изменении формы оплаты.
// 
&НаСервере
Процедура ИзменениеФормыОплаты()

	Объект.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		
	Если Объект.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			бит_МеханизмыТиповых.УстановитьБанковскийСчет(Объект.БанковскийСчет, Объект.Организация, 
																	мКэшЗначений.мВалютаРеглУчета);
		КонецЕсли;
	
	КонецЕсли; 
	
	// Проверим по табличной части принадлежность к организации БанковскихСчетов.
	Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
		
		СтрокаТаблицы.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		
		Если Объект.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
			
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				бит_МеханизмыТиповых.УстановитьБанковскийСчет(СтрокаТаблицы.БанковскийСчет, Объект.Организация, 
																	мКэшЗначений.мВалютаРеглУчета);
			КонецЕсли;
																
		КонецЕсли;
							
	КонецЦикла;
	
	// Если не список
	Если Объект.Распределение.Количество() = 1 Тогда
		Объект.БанковскийСчет = Объект.Распределение[0].БанковскийСчет;  
	КонецЕсли;
 
КонецПроцедуры // ИзменениеФормыОплаты()

// Процедура выполняет действия, необходимые при изменении организации.
// 
&НаСервере
Процедура ИзменениеОрганизации()
	
	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПланируемоеПоступлениеДенежныхСредств"));
	// Выполняем общие действия для всех документов при изменении Организация.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументЗаявка, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументЗаявка,Объект);
		
	// Проверим по табличной части принадлежность к организации БанковскихСчетов.
	Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
		
		СтрокаТаблицы.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		
		Если Объект.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
			
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				бит_МеханизмыТиповых.УстановитьБанковскийСчет(СтрокаТаблицы.БанковскийСчет, Объект.Организация, 
																	мКэшЗначений.мВалютаРеглУчета);
			КонецЕсли;
																
		КонецЕсли;
							
	КонецЦикла; 
	
	// Если не список
	Если Объект.Распределение.Количество() = 1 Тогда
		Объект.БанковскийСчет = Объект.Распределение[0].БанковскийСчет;    
	КонецЕсли;

КонецПроцедуры // ИзменениеОрганизации()

// Процедура выполняет действия, необходимые при изменении контрагента.
// 
&НаСервере
Процедура ИзменениеКонтрагента(Идентификатор = Неопределено)

	Контейнер = ?(Идентификатор = Неопределено, Объект, Объект.Распределение.НайтиПоИдентификатору(Идентификатор));

	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(
							Контейнер.ДоговорКонтрагента,
							Контейнер.Контрагент,
							Объект.Организация, 
							мКэшЗначений.СписокВидовДоговоров,
							Неопределено);
 	
КонецПроцедуры // ИзменениеКонтрагента()

// Процедура выполняет действия, необходимые при изменении договора контрагента.
// 
// Параметры:
//  Булево.
// 
&НаСервере
Процедура ИзменениеДоговораКонтрагента(Отказ, Идентификатор = Неопределено)

	Контейнер = ?(Идентификатор = Неопределено, Объект, Объект.Распределение.НайтиПоИдентификатору(Идентификатор));
	
	Контрагент  = Контейнер.ДоговорКонтрагента.Владелец;
    Организация = Контейнер.ДоговорКонтрагента.Организация;
	
	Если ЗначениеЗаполнено(Контейнер.Контрагент) И Контейнер.Контрагент <> Контрагент Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Организация) И Объект.Организация <> Организация Тогда
    	Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Изменение валюты и организации документы только при изменении договора контрагента 
	// на странице "Поступление".
	Если Идентификатор = Неопределено Тогда
		
		Объект.Организация = Организация;
	
		Объект.ВалютаДокумента = ?(Объект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, 
							мКэшЗначений.мВалютаРеглУчета, 
							Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	КонецЕсли;
						
	Контейнер.Контрагент = Контрагент;
	
	Если НЕ ЗначениеЗаполнено(Контейнер.ЦФО) 
		И ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента.бит_ЦФО) Тогда
		Контейнер.ЦФО = Контейнер.ДоговорКонтрагента.бит_ЦФО; 
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Контейнер.СтатьяОборотов) 
		И ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотов) Тогда
		Если Контейнер.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотов.РасходДоход = Перечисления.бит_РасходДоход.Поступление Тогда
			Контейнер.СтатьяОборотов = Контейнер.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотов;
			НастроитьВидимостьАналитикБюджетирования();
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Контейнер.Проект) 
		И ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента.бит_Проект) Тогда
		Контейнер.Проект = Контейнер.ДоговорКонтрагента.бит_Проект;
	КонецЕсли;

	
КонецПроцедуры // ИзменениеДоговораКонтрагента()
						

// Процедура выполняет действия на сервере, необходимые при изменении ЦФО.
// 
// Параметры:
//  Структура.
// 
&НаСервере
Процедура ИзменениеЦФО(СтруктураПараметров, Идентификатор = Неопределено)

	СтруктураПараметров.СписокСтатейПринадлежность =   ПолучитьСписокСтатейПоПринадлежности(Истина, Идентификатор);

КонецПроцедуры // ИзменениеЦФО()

// Процедура выполняет действия на сервере, необходимые при изменении СтатьиОборотов.
// 
&НаСервере
Процедура ИзменениеСтатьиОборотов(Идентификатор = Неопределено)

	Контейнер = ?(Идентификатор = Неопределено, Объект, Объект.Распределение.НайтиПоИдентификатору(Идентификатор));

	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПланируемоеПоступлениеДенежныхСредств"));

	Контейнер.СтавкаНДС 	   = ?(Идентификатор = Неопределено,
						ДокументЗаявка.СтатьяОборотов.СтавкаНДС,
						Контейнер.СтатьяОборотов.СтавкаНДС);
						
	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС,
												мКэшЗначений.Перечисления.СтавкиНДС);
	
	Контейнер.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
												,Истина
												,Истина
												,СтавкаНДСЧисло);
												
	Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) Тогда
		
		НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(Контейнер.СтатьяОборотов);
		бит_Бюджетирование.УстановитьИспользованиеАналитики(Контейнер, НастройкиСтатьи, мКэшЗначений.ИзмеренияДоп);
		
	КонецЕсли; 											
											
	НастроитьВидимостьАналитикБюджетирования();
  
КонецПроцедуры // ИзменениеСтатьиОборотов()

&НаСервере
Функция ПолучитьМассивСтатейОборотов()
	
	МассивСтатей = Объект.Распределение.Выгрузить().ВыгрузитьКолонку("СтатьяОборотов");
	
	Возврат МассивСтатей;
	
КонецФункции

// Процедура настраивает видимость элементов формы в соответствии с используемыми разрезами бюджетирования
// 	в статье оборотов.
// 
// Параметры:
// 	СтатьяОборотовИсточник 	   - СправочникСсылка.бит_СтатьиОборотов. 
// 					(статья оборотов, в соответствии с которой будет настраиваться видимость элементов формы).
// 	ТекущаяФорма 			   - Управляемая форма (форма для которой настраивается видимость элементов формы).
//  Измерения          		   - Структура (измерения регистра бит_ОборотыПоБюджетам).
//  НастройкиИзмерений 		   - Соответствие (настройки используемых дополнительных измерений).
//  СоответствиеИмен   		   - Сответствие 
// 					(соответствие имен измерений регистра и имен элементов управления на форме)
// 									Ключ 	 - Строка 	 (имя измерения в регистре)
// 									Значение - Структура (ИмяПоляВвода).
//  МассивИсключаемыхИзмерений - Массив (имена измерений для которых настройку видимости устанавливать не надо).
// 
&НаСервере
Процедура НастроитьВидимостьАналитикБюджетирования()
	
	НастройкиИзмерений = Неопределено;
	
	Если Элементы.ФормаСписок.Пометка Тогда
		МассивСтатей = ПолучитьМассивСтатейОборотов();
		Префикс = "Распределение";
	Иначе
		МассивСтатей = Новый Массив;
		МассивСтатей.Добавить(Объект.СтатьяОборотов);
		Префикс = "";
	КонецЕсли;
	
	МассивИсключаемыхИзмерений = Новый Массив;
	МассивИсключаемыхИзмерений.Добавить("Организация");
	МассивИсключаемыхИзмерений.Добавить("Сценарий");
	МассивИсключаемыхИзмерений.Добавить("ЦФО");
	МассивИсключаемыхИзмерений.Добавить("СтатьяОборотов");
	МассивИсключаемыхИзмерений.Добавить("Проект");
	МассивИсключаемыхИзмерений.Добавить("Контрагент");
	МассивИсключаемыхИзмерений.Добавить("ДоговорКонтрагента");
	МассивИсключаемыхИзмерений.Добавить("ФизическоеЛицо");
	МассивИсключаемыхИзмерений.Добавить("БанковскийСчет");
	
	НастройкаВидимости = бит_Бюджетирование.ПолучитьНастройкуВидимостиКолонок(МассивСтатей, НастройкиИзмерений);
	
	Для Каждого ТекИзмерение Из МассивИсключаемыхИзмерений Цикл
		
		Если НЕ НастройкаВидимости.Свойство(ТекИзмерение) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаВидимости.Удалить(ТекИзмерение);
		
	КонецЦикла;
	
	бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы, НастройкаВидимости, Префикс);
	
	// Изменение кода. Начало. 19.05.2015{{
	Документы.бит_ЗаявкаНаРасходованиеСредств.ВидимостьНазначенныхАналитик(ЭтаФорма);
	// Изменение кода. Конец. 19.05.2015}}
	
КонецПроцедуры


// Процедура Устанавливает ид строки табличной части.
// 
// Параметры:
//  ТекущаяСтрока_ИД - Строка - СтрокаТабличнойЧасти.ИД.
// 
&НаСервереБезКонтекста 
Процедура УстановитьИДСтроки(ТекущаяСтрока_ИД)

	ТекущаяСтрока_ИД = Строка(Новый УникальныйИдентификатор());

КонецПроцедуры // УстановитьИДСтроки()
                                                                                         
#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанавливает отборы для статьи оборотов.
// 
// Параметры:
//   Контейнер - ПолеФормы.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатьи(Контейнер)

	МассивПараметров = Новый Массив;
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтатьи",мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
	МассивПараметров.Добавить(НовыйПараметр);

	Если ТипЗнч(мКэшЗначений.СписокСтатейПринадлежность) = Тип("СписокЗначений") Тогда
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", мКэшЗначений.СписокСтатейПринадлежность);
		МассивПараметров.Добавить(НовыйПараметр);
		
	КонецЕсли; 
	
	Контейнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры // УстановитьПараметрыВыбораСтатьи()
      
// Процедура определяет, следует ли формировать назначение платежа упр. автоматически.
// 
&НаКлиенте
Процедура УстановитьФлагФормироватьНПУпрАвтоматически()

	Если ПустаяСтрока(Объект.НазначениеПлатежаУпр) 
		 ИЛИ Объект.НазначениеПлатежа = Объект.НазначениеПлатежаУпр Тогда
		мФормироватьНПУпрАвтоматически = Истина;
	Иначе
		мФормироватьНПУпрАвтоматически = Ложь;
	КонецЕсли; 

КонецПроцедуры // УстановитьФлагФормироватьНПУпрАвтоматически()


// Процедура выполняет действия, необходимые при изменении даты.
// 
&НаКлиенте
Процедура ИзменениеДаты()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	
	Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
		
		СтруктураПараметров.Вставить("ДатаПоступления", СтрокаТаблицы.ДатаПоступления);
		
		Если НЕ бит_КазначействоКлиент.ДатаПоступленияКорректна(СтруктураПараметров,Истина) Тогда
		
			Объект.Дата = мТекущаяДата;
			Возврат;
		
		КонецЕсли; 
	
		мТекущаяДата = Объект.Дата;	
		
	КонецЦикла;
 		
КонецПроцедуры // ИзменениеДаты()

// Процедура выполняет действия, необходимые при изменении даты поступления.
// 
// Параметры:
//  Идентификатор - Число.  
// 
&НаКлиенте
Процедура ИзменениеДатыПоступления(Идентификатор = Неопределено)
	
	Контейнер = ?(Идентификатор = Неопределено, Объект, Объект.Распределение.НайтиПоИдентификатору(Идентификатор));

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаПоступления", Контейнер.ДатаПоступления);
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	Если НЕ бит_КазначействоКлиент.ДатаПоступленияКорректна(СтруктураПараметров,Истина) Тогда
		
		Контейнер.ДатаПоступления = мТекущаяДатаПоступления;
		Возврат;
		
	КонецЕсли; 
	
	мТекущаяДатаПоступления = Контейнер.ДатаПоступления;

	СтруктураПараметров.Вставить("Дата", Контейнер.ДатаПоступления);
	СтруктураПараметров.Вставить("ВидДаты", "Дата поступления");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя",Контейнер.ДатаПлатежаКрайняя);
	Если ЗначениеЗаполнено(Контейнер.ДатаПлатежаКрайняя) 
		И бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Ложь) Тогда
		
		Контейнер.ДатаПлатежаКрайняя 	= Контейнер.ДатаПоступления;
		мТекущаяДатаПлатежаКрайняя 		= Контейнер.ДатаПоступления;
			
	КонецЕсли;

КонецПроцедуры // ИзменениеДатыПоступления()

// Процедура выполняет действия, необходимые при изменении крайней даты платежа.
// 
// Параметры:
//  Идентификатор - Число.
// 
&НаКлиенте
Процедура ИзменениеКрайнейДатыПлатежа(Идентификатор = Неопределено)

	Контейнер = ?(Идентификатор = Неопределено, Объект, Объект.Распределение.НайтиПоИдентификатору(Идентификатор));

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата",Контейнер.ДатаПоступления);
	СтруктураПараметров.Вставить("ВидДаты", "Дата поступления");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя",Контейнер.ДатаПлатежаКрайняя);
	
	Если бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Истина) Тогда
		Контейнер.ДатаПлатежаКрайняя = мТекущаяДатаПлатежаКрайняя;
		Возврат;
	КонецЕсли;
	
	мТекущаяДатаПлатежаКрайняя = Контейнер.ДатаПлатежаКрайняя;

КонецПроцедуры // ИзменениеКрайнейДатыПлатежа()

// Процедура обрабатывает изменение валюты документа в форме документа.
// 
&НаКлиенте
Процедура ИзменениеВалютыВФорме() 
	
	ИзменениеВалюты();
	
	// Спросим, а не пересчитать ли суммы
	Если мТекущаяВалютаДокумента <> Объект.ВалютаДокумента И Объект.Сумма <> 0 Тогда
	
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыОповещение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать сумму документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
						
	Иначе
		
		мТекущаяВалютаДокумента    = Объект.ВалютаДокумента;
		мТекущаяКратностьДокумента = Объект.КратностьДокумента;
		мТекущийКурсДокумента      = Объект.КурсДокумента;
		
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеВалютыВФорме()

// Процедура обработчик оповещения "ИзменениеВалютыОповещение".
// 
// Параметры:
// Ответ                - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ИзменениеВалютыОповещение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПересчитатьСуммы(мТекущаяВалютаДокумента, мТекущийКурсДокумента, мТекущаяКратностьДокумента);
			
	КонецЕсли;
	
	мТекущаяВалютаДокумента    = Объект.ВалютаДокумента;
	мТекущаяКратностьДокумента = Объект.КратностьДокумента;
	мТекущийКурсДокумента      = Объект.КурсДокумента;
	
КонецПроцедуры // ИзменениеВалютыОповещение

// Процедура расчитывает суммму НДС.
// 
// Параметры:
//  Контейнер - Объект, Строка табличной части.
// 
&НаКлиенте
Процедура РассчитатьСуммуНДСКлиент(Контейнер)
	
	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС, 
												мКэшЗначений.Перечисления.СтавкиНДС);
	
	Контейнер.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма, 
												Истина, 
												Истина, 
												СтавкаНДСЧисло);
																							
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура расчитывает суммму без НДС.
// 
&НаКлиенте
Процедура РассчитатьСуммуБезНДСКлиент()
													
	ЭтаФорма.СуммаБезНДС = Объект.Сумма - Объект.НДС;

																							
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура заполняет значения организации, контрагента, 
// валюты по договору контрагента, если данные значения пусты.
// 
&НаКлиенте
Процедура ИзменениеДоговораКонтрагентаКлиент()

	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;	
	ИзменениеДоговораКонтрагента(Отказ);
	
	Если Отказ = Истина Тогда
		
		Объект.ДоговорКонтрагента = мТекущийДоговорКонтрагента;
		Возврат;
	
	КонецЕсли; 
	
	ИзменениеВалютыВФорме();

КонецПроцедуры // ИзменениеДоговораКонтрагента()

// Процедура устанавливает отборы для договора контрагента.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить("Владелец", Объект.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мКэшЗначений.СписокВидовДоговоров) Тогда
		СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(мКэшЗначений.СписокВидовДоговоров.ВыгрузитьЗначения()));
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы
                
// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("ЭтоНовый"            , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"    , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма, СтруктураЗаголовка);
                
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()
   
#КонецОбласти

// Процедура обработчик оповещения "УдалениеТабЧасти".
// 
// Параметры:
// Ответ                - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура УдалениеТабЧасти(Ответ, ДополнительныеДанные) Экспорт
	
	Кнопка = Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаСписок;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	Пока Объект.Распределение.Количество() > 1 Цикл
		СтрокаУдаления = Объект.Распределение[1];
		Объект.Распределение.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;

	СинхронизироватьРеквизиты("Шапка");
	
	мСтрокаРаспределение 	   = Объект.Распределение[0];
	мТекущаяДатаПоступления    = мСтрокаРаспределение.ДатаПоступления;
	мТекущаяДатаПлатежаКрайняя = мСтрокаРаспределение.ДатаПлатежаКрайняя;
	мТекущийДоговорКонтрагента = мСтрокаРаспределение.ДоговорКонтрагента;
	
	УстановитьВидимость();
	
КонецПроцедуры // УдалениеТабЧасти
 
&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти
