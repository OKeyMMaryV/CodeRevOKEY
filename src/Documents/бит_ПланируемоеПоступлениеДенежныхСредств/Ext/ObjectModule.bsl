#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мИменаРеквизитов; // Хранит имена реквизитов шапки и табличной части для синхронизации.

Перем мСписок Экспорт; // Определяет способ редактирования документа - в списке или нет.

Перем мПометкаИзГрафикаПлатажей Экспорт; // Опеределяет выполнение пометки на удаление из графика платежей.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения регистра ПланируемоеПоступлениеДенежныхСредств.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

Перем мЕстьСправочникКассы Экспорт; // Хранит признак того, что в конфигурации есть справочник кассы.

#КонецОбласти
	
#Область ПрограммныйИнтерфейс

// Процедура заполняет документ по основанию.
//
// Параметры:
//  Основание - ДокументСсылка - Ссылка на документ-основание.
// 
Процедура ЗаполнитьПоОснованию(Основание) Экспорт

	// Устанавливаем вид основной панели - список.
	мСписок = Истина;
	Распределение.Очистить();
	
	// Устанавливаем значения реквизитов шапки
	ТипЗаявки 			= Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
	ДокументОснование 	= Основание.Ссылка;
	Организация 		= Основание.Организация;

	Если Основание.Метаданные().Реквизиты.Найти("ВалютаДокумента") <> Неопределено
		И Основание.Метаданные().Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено
		И Основание.Метаданные().Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено Тогда
		
		ВалютаДокумента 	= Основание.ВалютаДокумента;
		КурсДокумента 		= Основание.КурсВзаиморасчетов;
		КратностьДокумента  = Основание.КратностьВзаиморасчетов;
		
	ИначеЕсли Основание.Метаданные().Реквизиты.Найти("ДокументОтгрузки") <> Неопределено И Основание.ДокументОтгрузки <> Неопределено Тогда
		
		ВалютаДокумента 	= Основание.ДокументОтгрузки.ВалютаДокумента;
		КурсДокумента 		= Основание.ДокументОтгрузки.КурсВзаиморасчетов;
		КратностьДокумента  = Основание.ДокументОтгрузки.КратностьВзаиморасчетов;
		
	КонецЕсли;
	
		
	// Записываем дополнительные аналитики в таблицу.
	ТаблицаАналитик = бит_Казначейство.ЗаполнитьТаблицуАналитик(ЭтотОбъект, ДокументОснование, мНастройкиИзмерений); 
	
	Результат = бит_Казначейство.ПолучитьРезультатЗапросаПоСуммам(Основание); 
		
	Если Результат.Пустой() Тогда
		
		НоваяСтрока = ДобавитьСтрокуРаспределения(Основание, ТаблицаАналитик); 
		
	Иначе	
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); 
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДобавитьСтрокуРаспределения(Основание, ТаблицаАналитик);
							
			НоваяСтрока.Сумма 				= Выборка.Сумма;
			НоваяСтрока.СтавкаНДС 			= Выборка.СтавкаНДС;
			НоваяСтрока.НДС 				= Выборка.СуммаНДС;
						
		КонецЦикла;
		
	КонецЕсли; 
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ТаблицаРаспределения = Распределение.Выгрузить();
		ТаблицаРаспределения.Колонки.НДС.Имя = "СуммаНДС";
		ТаблицаРаспределенияСУчетомОплат = СтатусыДокументов.ТаблицаСуммКОплатеВРазрезеСтавокНДС(
				Новый Структура("Основание, ДатаОснования, Организация", Основание, Основание.Дата, Основание.Организация),
				ТаблицаРаспределения);
		ТаблицаРаспределенияСУчетомОплат.Колонки.СуммаНДС.Имя = "НДС";
		Распределение.Загрузить(ТаблицаРаспределенияСУчетомОплат);
		
		Если ЗначениеЗаполнено(ТаблицаАналитик) Тогда
			Для Каждого Аналитика Из ТаблицаАналитик Цикл
				Если ТипЗнч(Аналитика.Значение) = Тип("СправочникСсылка.бит_СтатьиОборотов") Тогда
					СтатьяОборотов = Аналитика.Значение;
					Если СтатьяОборотов.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда
						ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные;
					Иначе
						ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		Иначе	
			ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		КонецЕсли;
	КонецЕсли;
	
	Если Распределение.Количество() > 0 Тогда
		СтрокаРаспределение = Распределение[0];
		МассивИсключ = Новый Массив;
		СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Шапка",МассивИсключ);
	КонецЕсли;
		
	// Инициализация доп измерений для общей формы и для списка.
	Если Распределение.Количество() > 1 Тогда
		Для каждого Строка Из Распределение Цикл
			бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(Строка,мИзмеренияДоп,мНастройкиИзмерений);
		КонецЦикла;
	Иначе 
		бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ЭтотОбъект,мИзмеренияДоп,мНастройкиИзмерений);	
		мСписок = Ложь;
	КонецЕсли;

	Исполнитель   = Пользователи.ТекущийПользователь();
	Ответственный = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновнойОтветственный", Исполнитель);

КонецПроцедуры // бит_ЗаполнитьПоОснованию()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Основание)

	Если ЭтоНовый() Тогда
		
		// Если (Основание <> Неопределено) Тогда
		Если ЗначениеЗаполнено(Основание) И ЭтотОбъект.Метаданные().Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
			бит_Казначейство.ПроверитьВозможностьЗаполненияДокументаПоОснованию(ЭтотОбъект, Основание, ЭтотОбъект.Метаданные().Имя);
			ЗаполнитьПоОснованию(Основание); 
		Иначе

			 // Заполнить реквизиты значениями по умолчанию.
			СуммаВключаетНДС = Истина;
			Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
				ВалютаДокумента      = мВалютаРегламентированногоУчета;
				КурсДокумента        = 1;
				КратностьДокумента   = 1;			
			КонецЕсли; 
			ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
			ТипЗаявки   = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
			бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект,Пользователи.ТекущийПользователь(),
				Неопределено,"ПоступлениеБДДС");
		
			ИзменениеСтатьиОборотовМодуль();
			
			// Проверим принадлежность ЦФО к статье оборотов.
			СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежностиМодуль();
			СтруктураПараметров = Новый Структура("СписокСтатейПринадлежность,ЦФО,СтатьяОборотов"
												 ,СписокСтатейПринадлежность
												 ,ЦФО
												 ,СтатьяОборотов);
												 
			Если НЕ бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(СтруктураПараметров) Тогда
				СтатьяОборотов = Справочники.бит_СтатьиОборотов.ПустаяСсылка();			
			КонецЕсли; 
			
			
			// Проверим корректность направления и типа статьи.
			СтруктураПараметров = Новый Структура("СтатьяОборотов,РасходДоход,ТипСтатьи"
												   ,СтатьяОборотов
												   ,Перечисления.бит_РасходДоход.Поступление
												   ,Перечисления.бит_ТипыСтатейОборотов.БДДС);
												   
			Если НЕ бит_Казначейство.СтатьяОборотовКорректна(СтруктураПараметров) Тогда
		  		СтатьяОборотов = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			КонецЕсли; 											   
					
			бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ЭтотОбъект,мИзмеренияДоп,мНастройкиИзмерений);

			Если ТипЗнч(Основание) = Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание);
		    КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	// ПроверкаРеквизитов(Отказ,Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Упр,Регл,Взаиморасчеты"));
	
	ТаблицаПоступление = ПодготовитьТаблицуПланируемоеПоступление();
	
	// Выполним движения
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоступление,СтруктураКурсыВалют,Отказ,Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
// +СБ. Широков Николай. 2014-09-22. ТЗ "Казначейство" 2.2.4.1. 
    ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ЦФО");
    ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Распределение.ЦФО");
// -СБ. Широков Николай	
	мСписок = ?(Распределение.Количество()>1,Истина,Ложь);
	
	МассивКУдалению = Новый Массив;
	
	// Если строка одна, то проверяем реквизиты шапки, если несколько - то таблицу Распределение.
	Для Ном = 0 По ПроверяемыеРеквизиты.ВГраница() Цикл
		
		Если Найти(ПроверяемыеРеквизиты[Ном], "Распределение.") = 0 Тогда
			ЕстьСоответствиеРеквизитов = мИменаРеквизитов.Свойство(ПроверяемыеРеквизиты[Ном]);
			Если мСписок
				И ЕстьСоответствиеРеквизитов Тогда
				
				МассивКУдалению.Добавить(Ном);
			
			КонецЕсли;	
		Иначе
			Если НЕ мСписок Тогда
				МассивКУдалению.Добавить(Ном);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Ном = 0 По МассивКУдалению.ВГраница() Цикл 
		ПроверяемыеРеквизиты.Удалить(МассивКУдалению[МассивКУдалению.ВГраница()-Ном]);
	КонецЦикла;
	
	// Обязательные измерения из разряда дополнительных.
	СтруктураОбязательныхПолей = Новый Структура;
	
	Для каждого КлючИЗначение Из мНастройкиИзмерений Цикл
	
		ИмяИзмерения = КлючИЗначение.Ключ;
		Настройка    = КлючИЗначение.Значение;
		
		Если Настройка.Обязательное Тогда
			
			ТекстСообщения = "Не заполнено значение реквизита """+Настройка.Синоним+"""!";
		    СтруктураОбязательныхПолей.Вставить(ИмяИзмерения,ТекстСообщения);	
		
		КонецЕсли; 
	
	КонецЦикла;
	
	бит_ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
 
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
    Если ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей 
        И Не мПометкаИзГрафикаПлатажей Тогда
        // Проверим возможность выполнения действия.
        бит_Казначейство.ПроверитьВозможностьЗаписиДокументаПланирования(ЭтотОбъект, Отказ);
    КонецЕсли;
    
	Если Не Отказ Тогда
		ПересчитатьСуммы();
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);

	Если РольДоступна("бит_рлс_ФинансистЦФО") Тогда
		// Проверка на наличие недопустимых ЦФО
		Заголовок = "Проверка прав доступа:";	
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект,Распределение,"Распределение",Заголовок,Отказ);
	Иначе
		// Проверка на наличие недопустимых пар ЦФО/СтатьяОборотов.
		Заголовок = "Проверка прав доступа:";	
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект,Распределение,"Распределение",Заголовок,Отказ);
	КонецЕсли;

КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	// Если тип документа "График платежей", тогда.
	Если ОбъектКопирования.ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей Тогда
		ТекстСообщения = СтрШаблон(Нстр("ru = 'Копирование документа ""%1"": 
						|Копировать документ с типом ""График платежей"" запрещено!'"), ОбъектКопирования.Ссылка); 
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	 // Заполнить реквизиты значениями по умолчанию.
	 бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
	    										   ,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
	    										   ,ОбъектКопирования
	    										   ,"ПолучениеБДДС");

	
	  ДатаПоступления	    = Дата('00010101');
	  ДатаПлатежаКрайняя 	= Дата('00010101');
	  ИзменениеВалюты();
	  // Изменение кода. Начало. 31.01.2018{{
	  //ИзменениеСтатьиОборотовМодуль();
	  // Изменение кода. Конец. 31.01.2018}}
	  ДокументОснование = Неопределено;
	  
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция получает список статей, принадлежащих данному ЦФО.
// 
Функция ПолучитьСписокСтатейПоПринадлежностиМодуль(ВыводитьСообщения = Ложь, Идентификатор = Неопределено) Экспорт

	Если Идентификатор = Неопределено Тогда              	
		ПараметрЦФО = ЦФО;
	Иначе 
		ПараметрЦФО = Распределение[Идентификатор].ЦФО;	
	КонецЕсли; 
	
 	СтруктураПараметров = Новый Структура;
 	СтруктураПараметров.Вставить("Дата"       ,Дата);
	СтруктураПараметров.Вставить("ЦФО"        ,ПараметрЦФО);
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("РасходДоход",Перечисления.бит_РасходДоход.Поступление);
	СтруктураПараметров.Вставить("ТипСтатьи"  ,Перечисления.бит_ТипыСтатейОборотов.БДДС);
	
	Если ВыводитьСообщения Тогда
		СтруктураПараметров.Вставить("ВыводитьСообщения",Истина);
	КонецЕсли; 
		
	СписокСтатей = бит_Казначейство.ПолучитьСписокСтатейПоПринадлежности(СтруктураПараметров);
	
	Возврат СписокСтатей;
	
КонецФункции // ПолучитьСписокСтатейПоПринадлежности()

// Процедура обрабатывает изменение ставки НДС.
// 
Процедура ИзменениеСтатьиОборотовМодуль() Экспорт

	СтавкаНДС = СтатьяОборотов.СтавкаНДС;
	РассчитатьСуммуНДСМодуль();

КонецПроцедуры // ИзменениеСтатьиОборотовМодуль()

// Процедура рассчитывает сумму НДС.
// 
// Параметры:
// 	Контейнер - Неопределено, СтрокаТабличнойЧасти, ДокументОбъект.бит_ПланируемыеПоступлениеДенежныхСредств.
// 
Процедура РассчитатьСуммуНДСМодуль(Контейнер=Неопределено) Экспорт

	Если Контейнер = Неопределено Тогда
		Контейнер = ЭтотОбъект;
	КонецЕсли;
	
	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС,Перечисления.СтавкиНДС);
	
	Контейнер.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
												,Истина
												,Истина
												,СтавкаНДСЧисло);
																							
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалюты() Экспорт
	
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтрКурса.Курс;
	КратностьДокумента = СтрКурса.Кратность;
	
КонецПроцедуры // ИзменениеВалюты()

// Процедура выполняет пересчет сумм документа в разные валюты.
// 
Процедура ПересчитатьСуммы() Экспорт

	Если Распределение.Количество()= 0 Тогда
		СтрокаРаспределение = Распределение.Добавить();
		УстановитьИДСтроки(СтрокаРаспределение);
	Иначе
		СтрокаРаспределение = Распределение[0];
	КонецЕсли; 
	
	Если мСписок = Неопределено Тогда
		мСписок = ?(Распределение.Количество()>1,Истина,Ложь);
	КонецЕсли; 
	
	Если мСписок Тогда
		Если Распределение.Количество() > 1 Тогда
			МассивИсключений = Новый Массив;
			МассивИсключений.Добавить("Сумма");
			МассивИсключений.Добавить("НДС");	
		КонецЕсли; 		
		СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Шапка",МассивИсключений);
		Сумма = Распределение.Итог("Сумма");
		НДС   = Распределение.Итог("НДС");			
	Иначе	
		СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Строка",МассивИсключений);		
	КонецЕсли; 
	
  	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Регл,Упр"));
  
  	ИменаРеквизитов = Новый Массив;
  	ИменаРеквизитов.Добавить("Сумма");
  	ИменаРеквизитов.Добавить("НДС");
  
  	бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(ЭтотОбъект,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);

	// Для отображения суммы в структуре подчиненности.
	СуммаДокумента = Сумма;
	
КонецПроцедуры // ПересчитатьСуммы()

// Процедура Устанавливает ИД строки табличной части.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.
// 
Процедура УстановитьИДСтроки(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.ИД = Строка(Новый УникальныйИдентификатор());

КонецПроцедуры // УстановитьИДСтроки()

// Процедура синхронизирует реквизиты шапки документа и строки табличной части.
// 
// Параметры:
//  СтрокаТабличнойЧасти - СтрокаТабличнойЧасти.Распределение.
//  ИмяПриемника         - Строка: "Шапка", "Строка".
// 
Процедура СинхронизироватьРеквизитыШапкиИСтроки(СтрокаТабличнойЧасти,ИмяПриемника,МассивИсключений=Неопределено) Экспорт

	Если МассивИсключений = Неопределено Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти = Распределение[0];
	
	Для каждого КлючИСтруктура Из мИменаРеквизитов Цикл
		
		Если МассивИсключений.Найти(КлючИСтруктура.Ключ)<>Неопределено Тогда
		
			 Продолжить;
		
		КонецЕсли; 
		
		ИмяРеквизитаШапка = КлючИСтруктура.Ключ;
		ИмяРеквизитаСтрока= КлючИСтруктура.Значение;		
		ЗначениеШапка     = ЭтотОбъект[ИмяРеквизитаШапка];
		ЗначениеСтрока    = СтрокаТабличнойЧасти[ИмяРеквизитаСтрока];
		
		Если ЗначениеШапка <> ЗначениеСтрока Тогда
			
			Если ВРег(ИмяПриемника) = "ШАПКА" Тогда
				
				ЭтотОбъект[ИмяРеквизитаШапка] = СтрокаТабличнойЧасти[ИмяРеквизитаСтрока];
				
			ИначеЕсли ВРег(ИмяПриемника) = "СТРОКА" Тогда	
				
				СтрокаТабличнойЧасти[ИмяРеквизитаСтрока] = ЭтотОбъект[ИмяРеквизитаШапка];
				
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры // СинхронизироватьРеквизитыШапкиИСтроки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДокумента

// Функция Добавляет строку распределения и заполняет некоторые реквизиты.
// 
// Возвращаемое значение:
//   НоваяСтрока - Строка табличной части.
// 
Функция ДобавитьСтрокуРаспределения(Основание, ТаблицаАналитик)

	НоваяСтрока = Распределение.Добавить();
	УстановитьИДСтроки(НоваяСтрока);
	
	// Изменение кода. Начало. 12.12.2016{{
	Для каждого СтрАналитика Из ТаблицаАналитик Цикл
		
		Если ВРег(СтрАналитика.Имя) = ВРег("СтатьяОборотов")
			И бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия()
			И ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И бит_РаботаСМетаданными.ЕстьПредопределенныйЭлемент("Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС") Тогда
		
			СтатьяОборотов = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС
																								,СтрАналитика.Значение);
			Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
			
				НоваяСтрока[СтрАналитика.Имя] = СтатьяОборотов;
			
			КонецЕсли;
		Иначе	
			НоваяСтрока[СтрАналитика.Имя] = СтрАналитика.Значение;
		КонецЕсли; 
	КонецЦикла; 
	// Изменение кода. Конец. 12.12.2016}}
	
	НоваяСтрока.Контрагент  		= Основание.Контрагент;
	НоваяСтрока.ДоговорКонтрагента 	= Основание.ДоговорКонтрагента;
	
	Если Основание.Метаданные().Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда		
		НоваяСтрока.БанковскийСчет = Основание.СтруктурнаяЕдиница; 		
	ИначеЕсли Основание.Метаданные().Реквизиты.Найти("БанковскийСчетОрганизации") <> Неопределено Тогда
		НоваяСтрока.БанковскийСчет = Основание.БанковскийСчетОрганизации;		
	ИначеЕсли Основание.Метаданные().Реквизиты.Найти("ДокументОтгрузки") <> Неопределено И Основание.ДокументОтгрузки <> Неопределено Тогда		
		НоваяСтрока.БанковскийСчет = Основание.ДокументОтгрузки.БанковскийСчетОрганизации;		
	КонецЕсли; 
	
	Если бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия()
		И ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		СрокОплатыПоДоговору = НоваяСтрока.ДоговорКонтрагента.СрокОплаты;
		
		ПредполагаемаяДатаПоступления = Основание.Дата + СрокОплатыПоДоговору*60*60*24;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДатаПоступления", ПредполагаемаяДатаПоступления);
		СтруктураПараметров.Вставить("ДатаДокумента"  , Дата);
		
		Если бит_Казначейство.ДатаПоступленияКорректна(СтруктураПараметров,Ложь) Тогда
			НоваяСтрока.ДатаПоступления = ПредполагаемаяДатаПоступления;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции // ДобавитьСтрокуРаспределения()

#КонецОбласти

#Область ПроведениеДокумента

// Процедура выполняет проверку заполнения шапки и таб. частей
// процедуру в последующем надо УДАЛИТЬ, т.к. проверка реквизитов выполняется в процедуре ОбработкаПроверкиЗаполнения.
// 
// Параметры:
//  Отказ     - Булево.
//  Заголовок - Строка.
//
Процедура ПроверкаРеквизитов(Отказ,Заголовок) Экспорт

	// Проверим заполнение шапки
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Организация");
	СтруктураОбязательныхПолей.Вставить("ЦФО");
	СтруктураОбязательныхПолей.Вставить("СтатьяОборотов");
	СтруктураОбязательныхПолей.Вставить("ДатаПоступления");
	СтруктураОбязательныхПолей.Вставить("ВалютаДокумента");
	СтруктураОбязательныхПолей.Вставить("КурсДокумента");
	СтруктураОбязательныхПолей.Вставить("КратностьДокумента");
	СтруктураОбязательныхПолей.Вставить("Сумма");
	СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	
	бит_РаботаСМетаданными.ПроверитьЗаполнениеШапки(ЭтотОбъект,  СтруктураОбязательныхПолей,   Отказ, Заголовок);
	
	// Проверим заполнение табличной части распределение.
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ЦФО");
	СтруктураОбязательныхПолей.Вставить("СтатьяОборотов");
	СтруктураОбязательныхПолей.Вставить("ДатаПоступления");
	СтруктураОбязательныхПолей.Вставить("Сумма");
	СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	
	бит_РаботаСМетаданными.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект,"Распределение",  СтруктураОбязательныхПолей,   Отказ, Заголовок);
	
	// Обязательные измерения из разряда дополнительных.
	СтруктураОбязательныхПолей = Новый Структура;
	
	Для каждого КлючИЗначение Из мНастройкиИзмерений Цикл
	
		ИмяИзмерения = КлючИЗначение.Ключ;
		Настройка    = КлючИЗначение.Значение;
		
		Если Настройка.Обязательное Тогда
			
			ТекстСообщения = "Не заполнено значение реквизита """+Настройка.Синоним+"""!";
		    СтруктураОбязательныхПолей.Вставить(ИмяИзмерения,ТекстСообщения);	
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	бит_РаботаСМетаданными.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект,"Распределение", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Функция готовит таблицу планируемого поступления для проведения.
// 
// Возвращаемое значение:
//   Таблица   - ТаблицаЗначений
// 
Функция ПодготовитьТаблицуПланируемоеПоступление()

	Запрос = Новый Запрос;
	Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ТабРаспределение.ДатаПоступления 			КАК Период,
    |	ПланируемоеПоступление.Организация,
    |	ТабРаспределение.ЦФО,
    |	ТабРаспределение.СтатьяОборотов,
    |	ТабРаспределение.Проект,
    |	ТабРаспределение.Контрагент,
    |	ТабРаспределение.ДоговорКонтрагента,
    |	ТабРаспределение.БанковскийСчет,
    |	ТабРаспределение.НоменклатурнаяГруппа,
    |	ТабРаспределение.НазначениеПлатежа,
	|	ТабРаспределение.Аналитика_1,
	|	ТабРаспределение.Аналитика_2,
	|	ТабРаспределение.Аналитика_3,
	|	ТабРаспределение.Аналитика_4,
	|	ТабРаспределение.Аналитика_5,
	|	ТабРаспределение.Аналитика_6,
	|	ТабРаспределение.Аналитика_7,
    |	ТабРаспределение.Сумма,
    |	ТабРаспределение.СтавкаНДС,
    |	ТабРаспределение.НДС,
    |	ПланируемоеПоступление.ВалютаДокумента 	КАК Валюта,
    |	ПланируемоеПоступление.Ссылка 			КАК ДокументПланирования,
    |	ПланируемоеПоступление.ФормаОплаты 		КАК ВидДенежныхСредств
    |ИЗ
    |	Документ.бит_ПланируемоеПоступлениеДенежныхСредств.Распределение КАК ТабРаспределение
    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПланируемоеПоступлениеДенежныхСредств КАК ПланируемоеПоступление
    |		ПО ТабРаспределение.Ссылка = ПланируемоеПоступление.Ссылка
    |ГДЕ
    |	ТабРаспределение.Ссылка = &Ссылка
    |	И ПланируемоеПоступление.Ссылка = &Ссылка";
    
    Запрос.УстановитьПараметр("Ссылка",Ссылка);
    
    Результат = Запрос.Выполнить();
    
    Таблица = Результат.Выгрузить();
	
	Возврат Таблица;

КонецФункции // ПодготовитьТаблицуПланируемоеПоступление()

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоступление,СтруктураКурсыВалют,Отказ,Заголовок)
	
	 // Движения по регистру бит_ПланируемоеПоступлениеДенежныхСредств.
	 
	ТаблицаДвижений = Движения.бит_ПланируемоеПоступлениеДенежныхСредств.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаПоступление Цикл
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений,СтрокаТаблицы);
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвижений,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
		
	КонецЦикла; 
	
	Движения.бит_ПланируемоеПоступлениеДенежныхСредств.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_ПланируемоеПоступлениеДенежныхСредств.ДобавитьДвижение();
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мИменаРеквизитов = Новый Структура;
мИменаРеквизитов.Вставить("ЦФО"                 , "ЦФО");
мИменаРеквизитов.Вставить("СтатьяОборотов"      , "СтатьяОборотов");
мИменаРеквизитов.Вставить("Проект"              , "Проект");
мИменаРеквизитов.Вставить("Контрагент"          , "Контрагент");
мИменаРеквизитов.Вставить("ДоговорКонтрагента"  , "ДоговорКонтрагента");
мИменаРеквизитов.Вставить("БанковскийСчет"      , "БанковскийСчет");
мИменаРеквизитов.Вставить("НазначениеПлатежа"   , "НазначениеПлатежа");
мИменаРеквизитов.Вставить("Сумма"               , "Сумма");
мИменаРеквизитов.Вставить("СтавкаНДС"           , "СтавкаНДС");
мИменаРеквизитов.Вставить("НДС"                 , "НДС");
мИменаРеквизитов.Вставить("ДатаПоступления"     , "ДатаПоступления");
мИменаРеквизитов.Вставить("ДатаПлатежаКрайняя"  , "ДатаПлатежаКрайняя");
мИменаРеквизитов.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");

МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
Для н = 1 По МаксКолвоДопАналитик Цикл
	мИменаРеквизитов.Вставить("Аналитика_"+н	, "Аналитика_"+н);
КонецЦикла;

мПометкаИзГрафикаПлатажей = Ложь;

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

мЕстьСправочникКассы = Метаданные.Справочники.Найти("Кассы") <> Неопределено;

#КонецОбласти

#КонецЕсли
