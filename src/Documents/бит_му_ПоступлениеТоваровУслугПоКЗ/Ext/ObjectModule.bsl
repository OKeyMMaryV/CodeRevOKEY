#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мУдалятьГраницу;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура обрабатывает изменение валюты документа.
//
// Параметры:
//  Нет.
//
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
//
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
//
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,ПользователиКлиентСервер.ТекущийПользователь()
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// бит_SNovikov Процедура заполняет новый документ.
//
// Параметры:
//  Основание – ДокументСсылка.ПоступлениеТоваровУслуг.
//
Процедура ЗаполнитьНаОснованииПоступленияТоваровУслугПоКЗ(Основание)

	ДокументОснование = Основание;	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	СкопироватьТовары(Основание);
	СкопироватьСопоставленные(Основание);
	ВидОперации = Перечисления.бит_му_ВидыОперацийПТиУПоКЗ.Сторно;
	ВидДвижения = ?(Основание.ВидДвижения = Перечисления.БИТ_ВидыДвиженияМСФО.Аккруал, Перечисления.БИТ_ВидыДвиженияМСФО.СторноАккруала, Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО);
	СуммаДокумента = -Основание.СуммаДокумента;
	
КонецПроцедуры // ЗаполнитьНаОснованииПоступленияТоваровУслуг()

// Процедура выполняет копирование табличной части "Товары" из документа основания.
//
Процедура СкопироватьТовары(ДокументОснование)
		
	СтруктураСчетов = Новый Структура("Счет");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаДокументОснование", ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументОснование.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	               |	ДокументОснование.Сумма * -1 КАК Сумма,
	               |	ДокументОснование.СчетУчета КАК СчетУчета,
	               |	ДокументОснование.Субконто1 КАК Субконто1,
	               |	ДокументОснование.Субконто2 КАК Субконто2,
	               |	ДокументОснование.Субконто3 КАК Субконто3,
	               |	ДокументОснование.Субконто4 КАК Субконто4,
	               |	ДокументОснование.Содержание
	               |ИЗ
	               |	Документ.бит_му_ПоступлениеТоваровУслугПоКЗ.Товары КАК ДокументОснование
	               |ГДЕ
	               |	ДокументОснование.Ссылка = &СсылкаДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
 	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		
		СтрокаТабличнойЧасти.Сумма = Выборка.Сумма;
		
		СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Содержание + " - Сторно";
																	  
	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

// Процедура выполняет копирование табличной части "бит_ДокументыСобственныхКонтрагентов" из документа основания.
//
Процедура СкопироватьСопоставленные(ДокументОснование)
		
	СтруктураСчетов = Новый Структура("Счет");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаДокументОснование", ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументОснование.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи,
	               |	ДокументОснование.ДатаДокументаРеализацииПередачи,
	               |	ДокументОснование.бит_Сумма КАК бит_Сумма,
	               |	ДокументОснование.бит_СуммаБезНДС КАК бит_СуммаБезНДС
	               |ИЗ
	               |	Документ.бит_му_ПоступлениеТоваровУслугПоКЗ.бит_ДокументыСобственныхКонтрагентов КАК ДокументОснование
	               |ГДЕ
	               |	ДокументОснование.Ссылка = &СсылкаДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
 	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = бит_ДокументыСобственныхКонтрагентов.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
																			  
	КонецЦикла;

КонецПроцедуры // СкопироватьСопоставленные()

//БИТ Тртилек 15.08.2013 в процедуре проверяется равенство суммарных значений в обеих табличных частях
Функция ПроверитьРавенствоСумм()
	
	СуммаПоТоварам = Товары.Итог("Сумма");
	СуммаПоСвязанным = бит_ДокументыСобственныхКонтрагентов.Итог("бит_СуммаБезНДС") * ?(ВидОперации = Перечисления.бит_му_ВидыОперацийПТиУПоКЗ.Сторно, -1, 1);
	
	Если НЕ СуммаПоТоварам = СуммаПоСвязанным Тогда
		Сообщить("Итоговая сумма на вкладке ""Реализация от собственного ЮЛ"" не совпадает с суммой в табличной части документа. Документ проведен не будет", СтатусСообщения.Важное);
	КонецЕсли;
	
	Возврат НЕ СуммаПоТоварам = СуммаПоСвязанным;
	
КонецФункции //ПроверитьРавенствоСумм()

//БИТ Тртилек 15.08.2013 в процедуре проверяется - оттранслированы ли все связанные документы
Функция ПроверитьНаОттранслированностьДокументов(Отказ)
	
	
	Для Каждого СобственныйДокумент Из бит_ДокументыСобственныхКонтрагентов Цикл
		
		СобственныйДокументОбъект = СобственныйДокумент.ДокументРеализацииПередачи.ПолучитьОбъект();
		Если НЕ СобственныйДокументОбъект.Движения.Найти("Хозрасчетный") = Неопределено Тогда
			СобственныйДокументОбъект.Движения.Хозрасчетный.Прочитать();
		КонецЕсли;
		СобственныйДокументОбъект.Движения.бит_Дополнительный_2.Прочитать();
		
		Если НЕ СобственныйДокументОбъект.Движения.Найти("Хозрасчетный") = Неопределено Тогда
			Если СобственныйДокументОбъект.Движения.Хозрасчетный.Количество() > 0 И СобственныйДокументОбъект.Движения.бит_Дополнительный_2.Количество() = 0 Тогда
				
				Отказ = Истина;
				Сообщить("Документ не проведется, т.к. документ: " + СобственныйДокумент.ДокументРеализацииПередачи + " не оттранслирован");
				
			КонецЕсли;		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции //ПроверитьНаОттранслированностьДокументов()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция готовит таблицы документа для проведения.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
//
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЧасть.Сумма,
	               |	ТабЧасть.СчетУчета,
	               |	ТабЧасть.Субконто1 КАК Субконто1,
	               |	ТабЧасть.Субконто2 КАК Субконто2,
	               |	ТабЧасть.Субконто3 КАК Субконто3,
	               |	ТабЧасть.Субконто4 КАК Субконто4,
	               |	ТабЧасть.Содержание
	               |ИЗ
	               |	Документ.бит_му_ПоступлениеТоваровУслугПоКЗ.Товары КАК ТабЧасть
	               |ГДЕ
	               |	ТабЧасть.Ссылка = &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоТовары = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Товары", ТаблицаПоТовары);
	
	//добавим таблицу по связанным документам
	ЗапросСвязанных = Новый Запрос;
	ЗапросСвязанных.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК Документ,
	               |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДатаДокументаРеализацииПередачи КАК ДатаДокумента,
	               |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.бит_Сумма КАК Сумма,
	               |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.бит_СуммаБезНДС КАК СуммаБезНДС
	               |ИЗ
	               |	Документ.бит_му_ПоступлениеТоваровУслугПоКЗ.бит_ДокументыСобственныхКонтрагентов КАК бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов
	               |ГДЕ
	               |	бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоСвязанным = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц.Вставить("Связанные", ТаблицаПоСвязанным);	
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура выполняет движения по регистрам.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ)
	
	ТаблицаДанных = СтруктураТаблиц.Товары;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Формируем проводку по поступлению товаров, если необходимо
		// ДТ СчетУчета КТ СчетВзаиморасчетов Сумма.
		СформироватьЗаписьПоПоступлениюТоваров(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
						
	КонецЦикла;
		
	ТаблицаСвязанных = СтруктураТаблиц.Связанные;
	
	//Найдем встречную организацию
	ОтборПоКонтрагенту = Новый Структура("Контрагент, ВидСвязи");
	ОтборПоКонтрагенту.Контрагент = Контрагент;
	ОтборПоКонтрагенту.ВидСвязи = Перечисления.бит_ВидыСобственныхКонтрагентов.Организация;
	
	НаборЗаписейВстречныхОрганизаций = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборПоКонтрагенту, "бит_СобственныеКонтрагенты");
	
	Если НаборЗаписейВстречныхОрганизаций.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(НаборЗаписейВстречныхОрганизаций[0].Объект) Тогда
		Сообщить("Для контрагента: " + Контрагент.Наименование + " не указана организация в регистре ""Собственные контрагенты"". Подбор не возможен", СтатусСообщения.Важное);
		ВстречнаяОрганизация = Справочники.Организации.ПустаяСсылка();
	Иначе
		ВстречнаяОрганизация = НаборЗаписейВстречныхОрганизаций[0].Объект;
	КонецЕсли;
	
	//Найдем счет выручки
	ОтборНастроек = Новый Структура("ИмяНастройки", "Счет выручки по услугам заказчика-застройщика");
	
	НаборЗаписейСчетВыручки = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборНастроек, "бит_му_Настройки");
	
	Если НаборЗаписейСчетВыручки.Количество() = 0 Тогда
		Сообщить("Счет выручки не найден в настройках МСФО, заполнен не будет", СтатусСообщения.Важное);
		СчетВыручки = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	Иначе
		СчетВыручки = НаборЗаписейСчетВыручки[0].Значение;
	КонецЕсли;
	
	// --> BIT AGoncharenko CR#303 28.05.2015
	//Найдем счет при продаже ОС для документа ПередачаОС
	ОтборНастроек = Новый Структура("ИмяНастройки", "Счет учета выручки при продаже ОС");
	
	НаборЗаписейСчетВыручки = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборНастроек, "бит_му_Настройки");
	
	Если НаборЗаписейСчетВыручки.Количество() = 0 Тогда
		Сообщить("Счет учета выручки при продаже ОС не найден в настройках МСФО, заполнен не будет, расчет Сумм НДС документа Передача ОС невозможен", СтатусСообщения.Важное);
		СчетВыручкиПередачаОС = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	Иначе
		СчетВыручкиПередачаОС = НаборЗаписейСчетВыручки[0].Значение;
	КонецЕсли;

	//Найдем счет учета стоимости для документа ПередачаОС
	ОтборНастроек.Вставить("ИмяНастройки", "Счет учета стоимости ОС при продаже ОС");
	
	НаборЗаписейСчетВыручки = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборНастроек, "бит_му_Настройки");
	
	Если НаборЗаписейСчетВыручки.Количество() = 0 Тогда
		Сообщить("Счет учета стоимости ОС при продаже ОС не найден в настройках МСФО, заполнен не будет, расчет Сумм НДС документа Передача ОС невозможен", СтатусСообщения.Важное);
		СчетСтоимостиОС = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	Иначе
		СчетСтоимостиОС = НаборЗаписейСчетВыручки[0].Значение;
	КонецЕсли;
	// <-- BIT AGoncharenko	
	
	//получим первую строку товаров
	ПерваяСтрокаТоваров = Неопределено;
	Если СтруктураТаблиц.Товары.Количество() > 0 Тогда
		ПерваяСтрокаТоваров = СтруктураТаблиц.Товары[0];
	КонецЕсли;
	
	//очистим имеющиеся записи
	НаборЗаписейНРПВНА = РегистрыСведений.бит_му_НРП_ВНА.СоздатьНаборЗаписей();
	НаборЗаписейНРПВНА.Отбор.мРегистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	НаборЗаписейНРПВНА.Записать();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСвязанных Цикл
		
		// --> BIT AGoncharenko CR#303 28.05.2015
		//СФормироватьЗаписьПоНРПВНА(СтруктураШапкиДокумента, СтрокаТаблицы, ВстречнаяОрганизация, СчетВыручки, ПерваяСтрокаТоваров);
		Если ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ПередачаОС") Тогда	
			СФормироватьЗаписьПоНРПВНА_ПередачаОС(СтруктураШапкиДокумента, СтрокаТаблицы, СчетВыручкиПередачаОС, СчетСтоимостиОС, ВстречнаяОрганизация, ПерваяСтрокаТоваров);
		Иначе
			СФормироватьЗаписьПоНРПВНА(СтруктураШапкиДокумента, СтрокаТаблицы, ВстречнаяОрганизация, СчетВыручки, ПерваяСтрокаТоваров);
		КонецЕсли;
		// <-- BIT AGoncharenko							
	КонецЦикла;	
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение ДТ СчетУчета КТ СчетВзаиморасчетов Сумма.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьЗаписьПоПоступлениюТоваров(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтрокаТаблицы.СчетУчета
										 ,СтруктураШапкиДокумента.СчетВзаиморасчетов
										 ,СтрокаТаблицы.Сумма
										 ,СтрокаТаблицы.Содержание);
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);
	
	Запись.ВидДвиженияМСФО = СтруктураШапкиДокумента.ВидДвижения;
	
	// Заполним аналитику счета Дт учета.
	Для Сч = 1 По 4 Цикл
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Сч, СтрокаТаблицы["Субконто" + Сч]);	
	КонецЦикла;
	
	// Заполним аналитику счета Кт учета.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты", Контрагент);	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов" , ДоговорКонтрагента);	
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СформироватьЗаписьПоПоступлениюТоваров()

// Процедура формирует движение по регистру НРПВНА
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтрокаТаблицы 			- Строка таблицы значений. 
Процедура СФормироватьЗаписьПоНРПВНА(СтруктураШапкиДокумента, СтрокаТаблицы, ВстречнаяОрганизация, СчетВыручки, ПерваяСтрокаТоваров)
	
	НоваяЗаписьНРПВНА = РегистрыСведений.бит_му_НРП_ВНА.СоздатьМенеджерЗаписи();
	
	
	// --> BIT AGoncharenko CR#303 28.05.2015
	Если НЕ (ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ОперацияБух") ИЛИ ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.бит_ОперацияУправленческий"))  Тогда
		ИсточникЗаписи_НРП_ВНА = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.ПроведениеДокументаПоступленияКапитальныхЗатратМСФО_НРП;
	Иначе 
		ИсточникЗаписи_НРП_ВНА = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.ПроведениеДокументаПоступленияКапитальныхЗатратМСФО_СебестоимостьАктива;
	КонецЕсли;
	
	//НоваяЗаписьНРПВНА.ИсточникЗаписи       = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.ПроведениеДокументаПоступленияКапитальныхЗатратМСФО;
	НоваяЗаписьНРПВНА.ИсточникЗаписи       = ИсточникЗаписи_НРП_ВНА;
	// <-- BIT AGoncharenko	
	
	НоваяЗаписьНРПВНА.ПриходРасход         = Перечисления.бит_ВидДвиженияНакопления.Приход;
	НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтруктураШапкиДокумента.Организация;
	НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = ВстречнаяОрганизация;
	НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.Документ;
	НоваяЗаписьНРПВНА.ДокументПоступления  = СтруктураШапкиДокумента.Ссылка;
	НоваяЗаписьНРПВНА.Период               = СтруктураШапкиДокумента.Ссылка.Дата;
	НоваяЗаписьНРПВНА.СуммаБезНДС          = СтрокаТаблицы.СуммаБезНДС*?(ВидОперации = Перечисления.бит_му_ВидыОперацийПТиУПоКЗ.Сторно, -1, 1);
	НоваяЗаписьНРПВНА.мРегистратор          = СтруктураШапкиДокумента.Ссылка;
	Если НЕ (ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ОперацияБух") ИЛИ ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.бит_ОперацияУправленческий"))  Тогда
		Если ЗначениеЗаполнено(СчетВыручки) Тогда
			НоваяЗаписьНРПВНА.СчетВыручки          = СчетВыручки;
			РеализацияОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект(); 
			РеализацияОбъект.Движения.бит_Дополнительный_2.Прочитать();
			Если РеализацияОбъект.Движения.Количество() > 0 Тогда
				Для Каждого ДвижениеПоМеждународному Из РеализацияОбъект.Движения.бит_Дополнительный_2 Цикл
					Если ДвижениеПоМеждународному.СчетКт = СчетВыручки Тогда
						Для Ном = 1 По 4 Цикл
							ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(РеализацияОбъект.Движения.бит_Дополнительный_2[0], "Кт", Ном);
							Если ЗначениеЗаполнено(ТекСубконто) Тогда
								НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = ТекСубконто;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
	КонецЕсли;
	Если НЕ ПерваяСтрокаТоваров = Неопределено Тогда
		НоваяЗаписьНРПВНА.СчетУчетаАктива = ПерваяСтрокаТоваров.СчетУчета;
		Для Сч = 1 По 4 Цикл
			НоваяЗаписьНРПВНА["Субконто" + Сч + "СчетаУчетаАктива"] = ПерваяСтрокаТоваров["Субконто" + Сч];	
		КонецЦикла;
	КонецЕсли;
	
	НоваяЗаписьНРПВНА.Ответственный = Ответственный;
	НоваяЗаписьНРПВНА.Записать();
	
КонецПроцедуры // СФормироватьЗаписьПоНРПВНА()


// --> BIT AGoncharenko CR#303 28.05.2015
Процедура СФормироватьЗаписьПоНРПВНА_ПередачаОС(СтруктураШапкиДокумента, СтрокаТаблицы, СчетВыручки, СчетСтоимостиОС, ВстречнаяОрганизация, ПерваяСтрокаТоваров) 
	
	СтруктураСуммДокумента = ПолучитьСтруктуруСуммПередачаОС(СтрокаТаблицы.Документ, СчетВыручки, СчетСтоимостиОС, ВстречнаяОрганизация);
	
	// 1 строка для отражения нераспределенной прибыли
	НоваяЗаписьНРПВНА = РегистрыСведений.бит_му_НРП_ВНА.СоздатьМенеджерЗаписи();
	
	НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.ПроведениеДокументаПоступленияКапитальныхЗатратМСФО_НРП;
	НоваяЗаписьНРПВНА.ПриходРасход         = Перечисления.бит_ВидДвиженияНакопления.Приход;
	НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтруктураШапкиДокумента.Организация;
	НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = ВстречнаяОрганизация;
	НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.Документ;
	НоваяЗаписьНРПВНА.ДокументПоступления  = СтруктураШапкиДокумента.Ссылка;
	НоваяЗаписьНРПВНА.Период               = СтруктураШапкиДокумента.Ссылка.Дата;
	НоваяЗаписьНРПВНА.мРегистратор         = СтруктураШапкиДокумента.Ссылка;
	НоваяЗаписьНРПВНА.СуммаБезНДС          = СтруктураСуммДокумента.СуммаСтроки1;
	НоваяЗаписьНРПВНА.СчетВыручки          = СчетВыручки;
	НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Истина;
	НоваяЗаписьНРПВНА.Ответственный 		= Ответственный;
	
	РеализацияОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект(); 
	РеализацияОбъект.Движения.бит_Дополнительный_2.Прочитать();
	Если РеализацияОбъект.Движения.Количество() > 0 Тогда
		Для Каждого ДвижениеПоМеждународному Из РеализацияОбъект.Движения.бит_Дополнительный_2 Цикл
			Если ДвижениеПоМеждународному.СчетКт = СчетВыручки Тогда
				Для Ном = 1 По 4 Цикл
					ТекСубконто = бит_МеханизмТрансляции.ЗначениеСубконто(РеализацияОбъект.Движения.бит_Дополнительный_2[0], "Кт", Ном);
					Если ЗначениеЗаполнено(ТекСубконто) Тогда
						НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = ТекСубконто;
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НЕ ПерваяСтрокаТоваров = Неопределено Тогда
		НоваяЗаписьНРПВНА.СчетУчетаАктива = ПерваяСтрокаТоваров.СчетУчета;
		Для Сч = 1 По 4 Цикл
			НоваяЗаписьНРПВНА["Субконто" + Сч + "СчетаУчетаАктива"] = ПерваяСтрокаТоваров["Субконто" + Сч];	
		КонецЦикла;
	КонецЕсли;
	
	НоваяЗаписьНРПВНА.Записать();
	
	
	// 2-я строка для отражения стоимости актива
	НоваяЗаписьНРПВНА = РегистрыСведений.бит_му_НРП_ВНА.СоздатьМенеджерЗаписи();
	
	НоваяЗаписьНРПВНА.ИсточникЗаписи = Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.ПроведениеДокументаПоступленияКапитальныхЗатратМСФО_СебестоимостьАктива;
	НоваяЗаписьНРПВНА.ПриходРасход         = Перечисления.бит_ВидДвиженияНакопления.Приход;
	НоваяЗаписьНРПВНА.ОрганизацияЗаказчик  = СтруктураШапкиДокумента.Организация;
	НоваяЗаписьНРПВНА.ОрганизацияПодрядчик = ВстречнаяОрганизация;
	НоваяЗаписьНРПВНА.ДокументРеализации   = СтрокаТаблицы.Документ;
	НоваяЗаписьНРПВНА.ДокументПоступления  = СтруктураШапкиДокумента.Ссылка;
	НоваяЗаписьНРПВНА.Период               = СтруктураШапкиДокумента.Ссылка.Дата;
	НоваяЗаписьНРПВНА.мРегистратор         = СтруктураШапкиДокумента.Ссылка;
	НоваяЗаписьНРПВНА.СуммаБезНДС          = СтруктураСуммДокумента.СуммаСтроки2;
	НоваяЗаписьНРПВНА.ЭлиминирующиеПроводки = Ложь;
	НоваяЗаписьНРПВНА.Ответственный 		= Ответственный;
	
	Если НЕ ПерваяСтрокаТоваров = Неопределено Тогда
		НоваяЗаписьНРПВНА.СчетУчетаАктива = ПерваяСтрокаТоваров.СчетУчета;
		Для Сч = 1 По 4 Цикл
			НоваяЗаписьНРПВНА["Субконто" + Сч + "СчетаУчетаАктива"] = ПерваяСтрокаТоваров["Субконто" + Сч];	
		КонецЦикла;
	КонецЕсли;
	
	НоваяЗаписьНРПВНА.Записать();

КонецПроцедуры

Функция ПолучитьСтруктуруСуммПередачаОС(ДокументПередачаОС, СчетВыручки, СчетСтоимостиОС, ВстречнаяОрганизация)

	СтруктураВозврата = Новый Структура("ДокументПередачаОС, СуммаСтроки1, СуммаСтроки2", ДокументПередачаОС, 0,0);
	
	Если СчетВыручки = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка() 
		ИЛИ СчетСтоимостиОС = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПередачаОС", ДокументПередачаОС);
	Запрос.УстановитьПараметр("Счет62301", СчетВыручки);
	Запрос.УстановитьПараметр("Счет62302", СчетСтоимостиОС);
	Запрос.УстановитьПараметр("Организация", ВстречнаяОрганизация);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОборотыМСФО.Регистратор КАК ДокументПередачаОС,
	               |	ЕСТЬNULL(ОборотыМСФО.ОборотДТ62302, 0) КАК СуммаСтроки2,
	               |	ЕСТЬNULL(ОборотыМСФО.ОборотКт62301, 0) - ЕСТЬNULL(ОборотыМСФО.ОборотДт62301, 0) - ЕСТЬNULL(ОборотыМСФО.ОборотДТ62302, 0) КАК СуммаСтроки1
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ОборотыДокумента.Регистратор КАК Регистратор,
	               |		СУММА(ВЫБОР
	               |				КОГДА ОборотыДокумента.СчетДт = &Счет62301
	               |					ТОГДА ОборотыДокумента.СуммаМУ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК ОборотДт62301,
	               |		СУММА(ВЫБОР
	               |				КОГДА ОборотыДокумента.СчетКт = &Счет62301
	               |					ТОГДА ОборотыДокумента.СуммаМУ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК ОборотКт62301,
	               |		СУММА(ВЫБОР
	               |				КОГДА ОборотыДокумента.СчетДт = &Счет62302
	               |					ТОГДА ОборотыДокумента.СуммаМУ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) КАК ОборотДТ62302
	               |	ИЗ
	               |		РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(
	               |				,
	               |				,
	               |				(Регистратор, Организация) В
	               |						(ВЫБРАТЬ
	               |							&ДокументПередачаОС,
	               |							&Организация)
	               |					И (СчетДт В (&Счет62301, &Счет62302)
	               |						ИЛИ СчетКт В (&Счет62301)),
	               |				,
	               |				) КАК ОборотыДокумента
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ОборотыДокумента.Регистратор) КАК ОборотыМСФО";
				   
	Результат = Запрос.Выполнить();	

	Если Результат.Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СтруктураВозврата.СуммаСтроки1 = Выборка.СуммаСтроки1;
	СтруктураВозврата.СуммаСтроки2 = Выборка.СуммаСтроки2;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ПолучитьСтруктуруСуммПередачаОС()
// <-- BIT AGoncharenko


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_му_ПоступлениеТоваровУслугПоКЗ") И ДанныеЗаполнения.ВидОперации = Перечисления.бит_му_ВидыОперацийПТиУПоКЗ.Обычный Тогда
		
		ПервоначальноеЗаполнениеДокумента();
		
		ЗаполнитьНаОснованииПоступленияТоваровУслугПоКЗ(ДанныеЗаполнения);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПервоначальноеЗаполнениеДокумента();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Подсчитаем и запишем сумму документа.
	СуммаДокумента = Товары.Итог("Сумма");
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
	мУдалятьГраницу = не ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, "", ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Если мУдалятьГраницу Тогда
		бит_му_МПЗ.УдалитьРегистрациюДокументаВПоследовательностях(ЭтотОбъект, Истина);
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	//ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	//проверим равенство сумм в табличной части товары и в связанных документах
	Отказ = ПроверитьРавенствоСумм();
	
	//проверим - все ли документы с вкладки связанных документов оттранслированы
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийПТиУПоКЗ.Обычный Тогда
		Отказ = ПроверитьНаОттранслированностьДокументов(Отказ);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ВидДвижения", ВидДвижения);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ);
	КонецЕсли;                                                                 	
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения"
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	//бит_VAlekseev добавление кода. Начало: 24.09.2010
	бит_му_МПЗ.УдалитьРегистрациюДокументаВПоследовательностях(ЭтотОбъект, Истина);
	//бит_VAlekseev добавление кода Конец
	
	//очистим имеющиеся записи НРП ВНА
	НаборЗаписейНРПВНА = РегистрыСведений.бит_му_НРП_ВНА.СоздатьНаборЗаписей();
	НаборЗаписейНРПВНА.Отбор.мРегистратор.Установить(Ссылка);
	НаборЗаписейНРПВНА.Записать();
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения"
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
			
		ПроверяемыеРеквизиты.Добавить("СчетВзаиморасчетов");
		ПроверяемыеРеквизиты.Добавить("Товары.СчетУчета");		
			
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

#КонецЕсли