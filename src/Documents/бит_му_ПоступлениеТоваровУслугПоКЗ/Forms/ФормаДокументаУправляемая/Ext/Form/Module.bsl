
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущие значения реквизитов формы. Клиент.
&НаКлиенте 
Перем мКэшРеквизитовФормы;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция выполняет вызов серверной функции по синхронизации значения реквизита РучнаяКорректировка
// при корректировки движений через обработку "Результат проведения".
//
// Параметры:
//  РучнаяКорректировка - Булево.
//
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаКлиенте 
Функция ВыполнитьСинхронизациюРучнойКорректировки(РучнаяКорректировка) Экспорт
	
	ДействиеВыполнено = СинхронизироватьРучнуюКорректировку(РучнаяКорректировка);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	Возврат ДействиеВыполнено;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КЭШЕМ РЕКВИЗИТОВ ФОРМЫ

// Процедура заполняет кэш реквизитов формы данными объекта.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает отборы для договора контрагента.
//
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", фСписокВидовДоговоров);
		КонецЕсли;
	КонецЕсли;

	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура формирует список доступных видов договоров.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
	
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура обрабатывает изменение валюты документа. Клиент.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И Не Объект.СуммаДокумента = 0 Тогда
	
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыКлиент", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;
		
КонецПроцедуры // ИзменениеВалютыКлиент()

// бит_AMuntyan Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ – Строка.
//
&НаКлиенте
Процедура ВопросИзменениеВалютыКлиент(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		ТабличнаяЧасть = Объект.Товары;
		
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			
			СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
			
		КонецЦикла;
		
		// Подсчитаем и запишем сумму документа.
		СуммаДокумента = Объект.Товары.Итог("Сумма");

	КонецЕсли;

	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ВопросИзменениеВалютыКлиент()

// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
//
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
//
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	// Установим отбор для договора контрагента.
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
	
КонецПроцедуры // НачалоВыбораДоговораКлиент()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устнавливает заголовок формы документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура выполняет заполнение в форме документа валюту МСФО.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ИзменениеКонтрагента();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ИзменениеДоговораСервер(Объект.ДоговорКонтрагента, Объект.Контрагент);
	
	ИзменениеВалютыКлиент();	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораДоговораКлиент(Элемент, Объект.ДоговорКонтрагента, Объект.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "Товары"
&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// СчетУчета
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, ТекущиеДанные.СчетУчета, "", Истина, Истина);
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Субконто4", "Субконто1", "Субконто2", "Субконто3", "Субконто4");
	ПоляОбъекта.Вставить("Организация"  , Объект.Организация);
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные.СчетУчета, ТекущиеДанные, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДвиженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.Аккруал"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО"));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДвиженияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Текст = НРег(Текст);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоСимволов = СтрДлина(Текст);
	Если Сред(Текст, 1, КоличествоСимволов) = Сред("аккруал", 1, КоличествоСимволов) Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.Аккруал"));
	КонецЕсли;
	Если Сред(Текст, 1, КоличествоСимволов) = Сред("корректировкамсфо", 1, КоличествоСимволов) Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДвиженияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Текст = НРег(Текст);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоСимволов = СтрДлина(Текст);
	Если Сред(Текст, 1, КоличествоСимволов) = Сред("аккруал", 1, КоличествоСимволов) Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.Аккруал"));
	КонецЕсли;
	Если Сред(Текст, 1, КоличествоСимволов) = Сред("корректировкамсфо", 1, КоличествоСимволов) Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО"));
	КонецЕсли;

	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ НА СЕРВЕРЕ

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Вызов механизма защиты.
	бит_ЛицензированиеБФCервер.ПроверитьВозможностьРаботы(ЭтаФорма, МетаданныеОбъекта.ПолноеИмя(), Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	// АДАПТАЦИЯ УПП
	Если фКэшЗначений.ЭтоУппКа Тогда 		
		
		Элементы.ТоварыХарактеристикаНоменклатуры.Видимость = Истина;
		Элементы.ТоварыСерияНоменклатуры.Видимость			= Истина;
		
	КонецЕсли;
		
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПТиУПоКЗ.ПустаяСсылка() Тогда
		Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПТиУПоКЗ.Обычный;
	КонецЕсли;
	
	Элементы.ФормаСоздатьНаОсновании.Доступность = Объект.Проведен;
	Элементы.ФормаДокументбит_му_ПоступлениеТоваровУслугПоКЗСоздатьНаОсновании.Заголовок = "Сторно";
	
	// установка параметров выбора для Договоров
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДоговорКонтрагента, "Объект.Контрагент");
	
	УстановитьДоступностьСубконто();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьДокументы(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьДокументыЗавершение", ЭтотОбъект), "Будет очищена табличная часть. Выполнить очистку?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.бит_ДокументыСобственныхКонтрагентов.Очистить();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументы(Команда)
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("РеализацияТоваровУслуг", "Реализация товаров и услуг");
	СписокТипов.Добавить("ОперацияБух", "Операция (бухгалтерский и налоговый учет)");	
	СписокТипов.Добавить("ОперацияУпр", "Операция (управленческий учет)");
	
	СписокТипов.Добавить("ПередачаОС", "Передача ОС");	// --> BIT AGoncharenko CR#303 27.05.2015
	
	СписокТипов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПодобратьДокументыЗавершение", ЭтотОбъект), "Выберите вид документа");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументыЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
    
    ВыбранныйЭлемент = ВыбранныйЭлемент1;
    Если ВыбранныйЭлемент = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    
    АдресТЗТаблицаДокументов = СформироватьЗапросДляСобственныхКонтрагентов(ВыбранныйЭлемент.Значение);
    
    Если АдресТЗТаблицаДокументов =ЛОЖЬ Тогда
        Сообщить("Документы сформированы не будут", СтатусСообщения.Важное);
        Возврат;
    КонецЕсли;
    
    ПараметрыФормы = Новый Структура("АдресТЗТаблицаДокументов", АдресТЗТаблицаДокументов);

    ОткрытьФорму("ОбщаяФорма.бит_ФормаПодбораСобственныхКонтрагентов", ПараметрыФормы, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаСервере	
Функция  СформироватьЗапросДляСобственныхКонтрагентов(ТипДокумента)
	
	Запрос = Новый Запрос;
	Если ТипДокумента = "РеализацияТоваровУслуг" Тогда 
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслуг.Ссылка
		               |ПОМЕСТИТЬ ВТ_Документы
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |ГДЕ
		               |	РеализацияТоваровУслуг.Организация = &Организация
		               |	И РеализацияТоваровУслуг.Контрагент В ИЕРАРХИИ(&Контрагент)
		               |	И РеализацияТоваровУслуг.Проведен = ИСТИНА
		               |	И РеализацияТоваровУслуг.Склад В(&Склад)
		               |	И НЕ РеализацияТоваровУслуг.Ссылка В
		               |				(ВЫБРАТЬ
		               |					ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		               |		
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |				ВЫБРАТЬ
		               |					ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		               |		
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |				ВЫБРАТЬ
		               |					бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.бит_му_ПоступлениеТоваровУслугПоКЗ.бит_ДокументыСобственныхКонтрагентов КАК бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка)
		               |	И НЕ РеализацияТоваровУслуг.Ссылка В (&МассивТекДокументовПередачи)
		               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Данные.Ссылка,
		               |	СУММА(Данные.СуммаНДС) КАК СуммаНДС
		               |ПОМЕСТИТЬ ВТ_СуммаНДС
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ВТ_Документы.Ссылка КАК Ссылка,
		               |		ЕСТЬNULL(РеализацияТоваровУслугТовары.СуммаНДС, 0) КАК СуммаНДС
		               |	ИЗ
		               |		ВТ_Документы КАК ВТ_Документы
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		               |			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугТовары.Ссылка
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ВТ_Документы.Ссылка,
		               |		ЕСТЬNULL(РеализацияТоваровУслугУслуги.СуммаНДС, 0)
		               |	ИЗ
		               |		ВТ_Документы КАК ВТ_Документы
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		               |			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугУслуги.Ссылка
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ВТ_Документы.Ссылка,
		               |		ЕСТЬNULL(РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС, 0)
		               |	ИЗ
		               |		ВТ_Документы КАК ВТ_Документы
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
		               |			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугАгентскиеУслуги.Ссылка) КАК Данные
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Данные.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Документы.Ссылка КАК Документ,
		               |	ВТ_Документы.Ссылка.СуммаДокумента КАК СуммаДокумента,
		               |	ВТ_Документы.Ссылка.СуммаДокумента - ВТ_СуммаНДС.СуммаНДС КАК СуммаБезНДС,
		               |	ЛОЖЬ КАК Выбрать
		               |ИЗ
		               |	ВТ_Документы КАК ВТ_Документы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДС КАК ВТ_СуммаНДС
		               |		ПО ВТ_Документы.Ссылка = ВТ_СуммаНДС.Ссылка";

	
	ИначеЕсли ТипДокумента = "ОперацияБух" Тогда 
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
		               |	0 КАК СуммаБезНДС,
		               |	ЛОЖЬ КАК Выбрать,
		               |	ХозрасчетныйДвиженияССубконто.Регистратор.СуммаОперации КАК СуммаДокумента
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		               |			&ДатаНач,
		               |			&ДатаКон,
		               |			Регистратор ССЫЛКА Документ.ОперацияБух
		               |				И Регистратор.ПометкаУдаления = ЛОЖЬ
		               |				И Организация = &Организация
		               |				И ВЫБОР
		               |					КОГДА ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
		               |						ТОГДА Субконто1 В (&Контрагент)
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |				И ВЫБОР
		               |					КОГДА ВидКорСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства)
		               |						ТОГДА КорСубконто1 В ИЕРАРХИИ (&Объект)
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ,
		               |			,
		               |			) КАК ХозрасчетныйДвиженияССубконто
		               |ГДЕ
		               |	НЕ ХозрасчетныйДвиженияССубконто.Регистратор В
		               |				(ВЫБРАТЬ
		               |					ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		               |		
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |				ВЫБРАТЬ
		               |					ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка)
		               |	И НЕ ХозрасчетныйДвиженияССубконто.Регистратор В (&МассивТекДокументовПередачи)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ХозрасчетныйДвиженияССубконто.Регистратор,
		               |	ХозрасчетныйДвиженияССубконто.Регистратор.СуммаОперации";
		
	ИначеЕсли ТипДокумента = "ОперацияУпр" Тогда 
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	бит_Дополнительный_2ДвиженияССубконто.Регистратор КАК Документ,
		               |	0 КАК СуммаБезНДС,
		               |	ЛОЖЬ КАК Выбрать,
		               |	бит_Дополнительный_2ДвиженияССубконто.Регистратор.СуммаОперацииМУ КАК СуммаДокумента
		               |ИЗ
		               |	РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(
		               |			&ДатаНач,
		               |			&ДатаКон,
		               |			Регистратор ССЫЛКА Документ.бит_ОперацияУправленческий
		               |				И Организация = &Организация
		               |				И ВЫБОР
		               |					КОГДА ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты)
		               |						ТОГДА Субконто1 В (&Контрагент)
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |				И ВЫБОР
		               |					КОГДА ВидКорСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Объект)
		               |						ТОГДА КорСубконто1 В ИЕРАРХИИ (&Объект)
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ,
		               |			,
		               |			) КАК бит_Дополнительный_2ДвиженияССубконто
		               |ГДЕ
		               |	НЕ бит_Дополнительный_2ДвиженияССубконто.Регистратор В
		               |				(ВЫБРАТЬ
		               |					ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		               |		
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |				ВЫБРАТЬ
		               |					ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка)
		               |	И НЕ бит_Дополнительный_2ДвиженияССубконто.Регистратор В (&МассивТекДокументовПередачи)
		               |	И бит_Дополнительный_2ДвиженияССубконто.Регистратор.ПометкаУдаления = ЛОЖЬ
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	бит_Дополнительный_2ДвиженияССубконто.Регистратор,
		               |	бит_Дополнительный_2ДвиженияССубконто.Регистратор.СуммаОперацииМУ";
					   
		// --> BIT AGoncharenko CR#303 27.05.2015
	ИначеЕсли ТипДокумента = "ПередачаОС" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПередачаОС.Ссылка
		               |ПОМЕСТИТЬ ВТ_Документы
		               |ИЗ
		               |	Документ.ПередачаОС КАК ПередачаОС
		               |ГДЕ
		               |	ПередачаОС.Организация = &Организация
		               |	И ПередачаОС.Контрагент В ИЕРАРХИИ(&Контрагент)
		               |	И ПередачаОС.Проведен = ИСТИНА
		               |	И НЕ ПередачаОС.Ссылка В
		               |				(ВЫБРАТЬ
		               |					ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		               |		
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |				ВЫБРАТЬ
		               |					ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		               |		
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |				ВЫБРАТЬ
		               |					бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.бит_му_ПоступлениеТоваровУслугПоКЗ.бит_ДокументыСобственныхКонтрагентов КАК бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ бит_му_ПоступлениеТоваровУслугПоКЗбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка)
		               |	И НЕ ПередачаОС.Ссылка В (&МассивТекДокументовПередачи)
		               |	И ПередачаОС.Дата МЕЖДУ &ДатаНач И &ДатаКон
		               |	И ПередачаОС.Ссылка В
		               |			(ВЫБРАТЬ
		               |				ПередачаОСОС.Ссылка
		               |			ИЗ
		               |				Документ.ПередачаОС.ОС КАК ПередачаОСОС
		               |			ГДЕ
		               |				(ПередачаОСОС.ОсновноеСредство.Объект В (&ОбъектыСубконто1)
		               |					ИЛИ ПередачаОСОС.ОсновноеСредство.Объект В (&ОбъектыСубконто2)))
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Данные.Ссылка,
		               |	СУММА(Данные.СуммаНДС) КАК СуммаНДС
		               |ПОМЕСТИТЬ ВТ_СуммаНДС
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ВТ_Документы.Ссылка КАК Ссылка,
		               |		ЕСТЬNULL(ПередачаОСОС.СуммаНДС, 0) КАК СуммаНДС
		               |	ИЗ
		               |		ВТ_Документы КАК ВТ_Документы
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаОС.ОС КАК ПередачаОСОС
		               |			ПО ВТ_Документы.Ссылка = ПередачаОСОС.Ссылка) КАК Данные
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Данные.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Документы.Ссылка КАК Документ,
		               |	ВТ_Документы.Ссылка.СуммаДокумента КАК СуммаДокумента,
		               |	ВТ_Документы.Ссылка.СуммаДокумента - ВТ_СуммаНДС.СуммаНДС КАК СуммаБезНДС,
		               |	ЛОЖЬ КАК Выбрать
		               |ИЗ
		               |	ВТ_Документы КАК ВТ_Документы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДС КАК ВТ_СуммаНДС
		               |		ПО ВТ_Документы.Ссылка = ВТ_СуммаНДС.Ссылка";

		ОбъектыСубконто1 = Неопределено;
		ОбъектыСубконто2 = Неопределено;
		ВыгрузитьКолонкиТоваровВМассивы(ОбъектыСубконто1, ОбъектыСубконто2);
		
		Запрос.УстановитьПараметр("ОбъектыСубконто1",ОбъектыСубконто1);
		Запрос.УстановитьПараметр("ОбъектыСубконто2",ОбъектыСубконто2);
	// <-- BIT AGoncharenko
				   

	КонецЕсли;	
	
	//Найдем встречную организацию
	ОтборПоКонтрагенту = Новый Структура("Контрагент, ВидСвязи");
	ОтборПоКонтрагенту.Контрагент = Объект.Контрагент;
	ОтборПоКонтрагенту.ВидСвязи = Перечисления.бит_ВидыСобственныхКонтрагентов.Организация;
	
	НаборЗаписейВстречныхОрганизаций = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборПоКонтрагенту, "бит_СобственныеКонтрагенты");
	
	Если НаборЗаписейВстречныхОрганизаций.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(НаборЗаписейВстречныхОрганизаций[0].Объект) Тогда
		Сообщить("Для контрагента: " + Объект.Контрагент.Наименование + " не указана организация в регистре ""Собственные контрагенты"". Подбор не возможен", СтатусСообщения.Важное);
		Возврат ЛОЖЬ;
	Иначе
		ВстречнаяОрганизация = НаборЗаписейВстречныхОрганизаций[0].Объект;
	КонецЕсли;
	
	//Найдем встречные контрагенты
	ЗапросВстречныхКонтрагентов = Новый Запрос;
	ЗапросВстречныхКонтрагентов.Текст = "ВЫБРАТЬ
										|	бит_СобственныеКонтрагенты.Контрагент
										|ИЗ
										|	РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты
										|ГДЕ
										|	бит_СобственныеКонтрагенты.Объект = &Организация
										|	И бит_СобственныеКонтрагенты.ВидСвязи = &ВидСвязи";
	ЗапросВстречныхКонтрагентов.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросВстречныхКонтрагентов.УстановитьПараметр("ВидСвязи", Перечисления.бит_ВидыСобственныхКонтрагентов.Организация);
	
	РезультатЗапросаВстерчныхКонтрагентов = ЗапросВстречныхКонтрагентов.Выполнить();
	
	Если Не РезультатЗапросаВстерчныхКонтрагентов.Пустой() Тогда
		МассивВстречныхКонтрагентов = РезультатЗапросаВстерчныхКонтрагентов.Выгрузить().ВыгрузитьКолонку("Контрагент");
	Иначе
		Сообщить("Для организации: " + Объект.Организация.Наименование + " не найдены контрагенты в регистре ""Собственные контрагенты"". Подбор не возможен", СтатусСообщения.Важное);
		Возврат ЛОЖЬ
	КонецЕсли;
	
	//подберем масив объектов из тч
	МассивОбъектов = Новый Массив;
	МассивОбъектовДляСкладов = Новый Массив;
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл		
		Если ТипЗнч(СтрокаТоваров.Субконто1) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			ВерхнийУровеньРодитель = СтрокаТоваров.Субконто1;
			Пока ЗначениеЗаполнено(ВерхнийУровеньРодитель.Родитель) Цикл
				ВерхнийУровеньРодитель = ВерхнийУровеньРодитель.Родитель;
			КонецЦикла;
			МассивОбъектов.Добавить(ВерхнийУровеньРодитель);
		ИначеЕсли  ТипЗнч(СтрокаТоваров.Субконто2) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			ВерхнийУровеньРодитель = СтрокаТоваров.Субконто2;
			Пока ЗначениеЗаполнено(ВерхнийУровеньРодитель.Родитель) Цикл
				ВерхнийУровеньРодитель = ВерхнийУровеньРодитель.Родитель;
			КонецЦикла;
			МассивОбъектов.Добавить(ВерхнийУровеньРодитель);
		КонецЕсли;
	КонецЦикла;

	
	//подберем масив складов из тч
	ЗапросСкладов = Новый Запрос;
	ЗапросСкладов.Текст ="ВЫБРАТЬ
	                     |	Склады.Ссылка КАК Склады
	                     |ИЗ
	                     |	Справочник.Склады КАК Склады
	                     |ГДЕ
	                     |	Склады.Объект В(&МассивОбъектов)" ;
	ЗапросСкладов.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ТаблицаСкладов = ЗапросСкладов.Выполнить().Выгрузить();
	МассивСкладов = ТаблицаСкладов.ВыгрузитьКолонку("Склады");
					   
	Запрос.УстановитьПараметр("Контрагент"   , МассивВстречныхКонтрагентов);				   
	Запрос.УстановитьПараметр("Организация"  , ВстречнаяОрганизация);
	////изменить пустую ссылку///////////////////////////////////////////////////////
	Запрос.УстановитьПараметр("Склад"        , МассивСкладов);
	Запрос.УстановитьПараметр("Объект"       , МассивОбъектов);
	Запрос.УстановитьПараметр("ДатаНач"      , НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон"      , КонецМесяца(Объект.Дата));
	
	МассивТекДокументовПередачи = ВыгрузитьСобственныхНаСервере();;
	Запрос.УстановитьПараметр("МассивТекДокументовПередачи",МассивТекДокументовПередачи);
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	//
	Возврат ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

// --> BIT AGoncharenko CR#303 28.05.2015
&НаСервере
Процедура ВыгрузитьКолонкиТоваровВМассивы(ОбъектыСубконто1, ОбъектыСубконто2)
	
	ТоварыВременнаяТаблица = Объект.Товары.Выгрузить(,"Субконто1, Субконто2");
	ОбъектыСубконто1 = ТоварыВременнаяТаблица.ВыгрузитьКолонку("Субконто1");
	ОбъектыСубконто2 = ТоварыВременнаяТаблица.ВыгрузитьКолонку("Субконто2");
	
КонецПроцедуры

// <-- BIT AGoncharenko


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция выполняет синхронизацию значения реквизита РучнаяКорректировка
// при корректировки движений через обработку "Результат проведения".
//
// Параметры:
//  РучнаяКорректировка - Булево.
//
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаСервере 
Функция СинхронизироватьРучнуюКорректировку(РучнаяКорректировка)
	
	ДокументОбъект 	  = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДействиеВыполнено = бит_ОбщегоНазначения.ВыполнитьСинхронизациюРучнойКорректировки(ДокументОбъект
																					  ,РучнаяКорректировка);
	
	Если ДействиеВыполнено Тогда
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	Иначе
		ДокументОбъект = Неопределено;
	КонецЕсли;
	
	Возврат ДействиеВыполнено;
	
КонецФункции // СинхронизироватьРучнуюКорректировку()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  КэшированныеЗначения - Структура.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	// бит_IDotsenko адаптация для ERP. Начало. 18.03.2014{{
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()]));
	// бит_IDotsenko адаптация для ERP. Конец. 18.03.2014}}
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	// Сформируем список доступных валют.
	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
	
	фКэшЗначений.Вставить("ЭтоУппКа", бит_ОбщегоНазначения.ЭтоКомплекснаяАвтоматизация());
	
	фКэшЗначений.Вставить("ПустойСклад", Справочники.Склады.ПустаяСсылка());
		
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура получает и записывает валюту международного учета в кэш значений.
//
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура обрабатывает изменение валюты документа.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	УстановитьДоступностьСубконто();
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
//
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
//
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// бит_MZyubin Процедура обрабатывает изменение контрагента. 
//
&НаСервере
Процедура ИзменениеКонтрагента()

	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента
														  ,Объект.Контрагент
														  ,Объект.Организация
														  ,фСписокВидовДоговоров);
	
	
	// Могли поменять договор.
	ИзменениеДоговораСервер(Объект.ДоговорКонтрагента, Объект.Контрагент);

КонецПроцедуры // ИзменениеКонтрагента()

// Процедура обрабатывает изменение договора. Сервер.
//
// Параметры:
//  Договор				- СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
//
&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли; 
	
	Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);

	СписокВалют = Новый СписокЗначений;
	
	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);	
	
	Объект.ВалютаДокумента = бит_КурсыВалют.ПолучитьВалютуДоговораКонтрагента(Объект.ДоговорКонтрагента);
	
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
	
КонецПроцедуры // ИзменениеДоговораСервер()

&НаСервере
Функция ВыгрузитьСобственныхНаСервере()
	
	Возврат Объект.бит_ДокументыСобственныхКонтрагентов.Выгрузить(, "ДокументРеализацииПередачи");
	
КонецФункции

&НаКлиенте
Процедура СобственныеРеализацииПередачиПриАктивизацииПоля(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "СобственныеРеализацииПередачиСумма" ИЛИ Элемент.ТекущийЭлемент.Имя = "СобственныеРеализацииПередачиСуммаБезНДС" Тогда
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		ТипДокумента = ТипЗнч(Элемент.ТекущиеДанные.ДокументРеализацииПередачи);
		Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеРеализацииПередачиДокументРеализацииПЕредачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("РеализацияТоваровУслуг", "Реализация товаров и услуг");
	СписокТипов.Добавить("ОперацияБух", "Операция (бухгалтерский и налоговый учет)");	
	СписокТипов.Добавить("бит_ОперацияУправленческий", "Операция (управленческий учет)");
	СписокТипов.Добавить("ПередачаОС", "Передача ОС"); // --> BIT AGoncharenko CR#303 28.05.2015
	
	СписокТипов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("СобственныеРеализацииПередачиДокументРеализацииПЕредачиНачалоВыбораЗавершение", ЭтотОбъект), "Выберите вид документа");
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеРеализацииПередачиДокументРеализацииПЕредачиНачалоВыбораЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
    
    ВыбранныйЭлемент = ВыбранныйЭлемент1;
    Если ВыбранныйЭлемент = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    
    Отбор = Новый Структура;
    
    //Найдем встречную организацию
    СобственныеРеализацииПередачиДокументРеализацииПЕредачиНачалоВыбораНаСервере(Объект.Контрагент, Отбор);
    
    ПараметрыФормы = Новый Структура("Отбор", Отбор);
    ОткрытьФорму("Документ."+ВыбранныйЭлемент.Значение+".ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("СобственныеРеализацииПередачиДокументРеализацииПЕредачиНачалоВыбораЗавершениеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура СобственныеРеализацииПередачиДокументРеализацииПЕредачиНачалоВыбораЗавершениеЗавершение(Результат, ДополнительныеПараметры1) Экспорт
    
    ВыбранныйДокумент = Результат;
    
    Если НЕ ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
        Возврат;
    КонецЕсли;
    
    Элементы.СобственныеРеализацииПередачи.ТекущиеДанные.ДокументРеализацииПередачи = ВыбранныйДокумент;
    Элементы.СобственныеРеализацииПередачи.ТекущиеДанные.ДатаДокументаРеализацииПередачи = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "Дата");
    Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
        Элементы.СобственныеРеализацииПередачи.ТекущиеДанные.бит_Сумма = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "СуммаДокумента");
        СуммаНДС =  ПолучитьИтог(ВыбранныйДокумент, "Товары", "СуммаНДС") + ПолучитьИтог(ВыбранныйДокумент, "Услуги", "СуммаНДС");
        Элементы.СобственныеРеализацииПередачи.ТекущиеДанные.бит_СуммаБезНДС = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "СуммаДокумента") - СуммаНДС;
    ИначеЕсли ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ОперацияБух") Тогда
        Элементы.СобственныеРеализацииПередачи.ТекущиеДанные.бит_Сумма = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "СуммаОперации");
    ИначеЕсли ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.бит_ОперацияУправленческий") Тогда
        Элементы.СобственныеРеализацииПередачи.ТекущиеДанные.бит_Сумма = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "СуммаОперацииМУ");
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНРПВНА(Команда)
	
	Отбор = Новый Структура("мРегистратор", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.бит_му_НРП_ВНА.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");

КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетВидыСубконтоКоличество(Счет)
	Возврат Счет.ВидыСубконто.Количество();
КонецФункции

&НаСервереБезКонтекста
Функция СобственныеРеализацииПередачиДокументРеализацииПЕредачиНачалоВыбораНаСервере(Контрагент, Отбор)
	ОтборПоКонтрагенту = Новый Структура("Контрагент, ВидСвязи");
	ОтборПоКонтрагенту.Контрагент = Контрагент;
	ОтборПоКонтрагенту.ВидСвязи = Перечисления.бит_ВидыСобственныхКонтрагентов.Организация;
	
	НаборЗаписейВстречныхОрганизаций = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборПоКонтрагенту, "бит_СобственныеКонтрагенты");
	
	Если НаборЗаписейВстречныхОрганизаций.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(НаборЗаписейВстречныхОрганизаций[0].Объект) Тогда
		Сообщить("Для контрагента: " + ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Контрагент, "Наименование") + " не указана организация в регистре ""Собственные контрагенты"". В форме выбора отбор установлен не будет", СтатусСообщения.Важное);
	Иначе
		ВстречнаяОрганизация = НаборЗаписейВстречныхОрганизаций[0].Объект;
		Отбор.Вставить("Организация", ВстречнаяОрганизация);
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИтог(ДокументСсылка, ИмяТЧ, ИмяПоля)
	Возврат ДокументСсылка[ИмяТЧ].Итог(ИмяПоля);
КонецФункции

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для каждого Проводка Из Объект.Товары Цикл
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Субконто4", "Субконто1", "Субконто2", "Субконто3", "Субконто4");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетУчета, Проводка, ПоляОбъекта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьДоступностьСубконто();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)

	СтрокаТовары = Элементы.Товары.ТекущиеДанные;
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтотОбъект, СтрокаТовары.СчетУчета,   "",   Истина, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Постфикс = "", ЕстьПодразделение, ЭтоТаблица = Ложь)
	
	ПоляФормы = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Субконто4",
		"ТоварыСубконто" + Постфикс + "1",
		"ТоварыСубконто" + Постфикс + "2",
		"ТоварыСубконто" + Постфикс + "3",
		"ТоварыСубконто" + Постфикс + "4");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, Неопределено, ЭтоТаблица);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)
	
	СтрокаТовары = Форма.Объект.Товары.НайтиПоИдентификатору(Форма.Элементы.Товары.ТекущаяСтрока);
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТовары, "Субконто%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТовары, "Субконто%Индекс%", "ТоварыСубконто%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, Объект, ШаблонИмяПоляОбъекта)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 4 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация",    Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета",      Объект.СчетУчета);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Процедура ТоварыСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтрокаТовары = Элементы.Товары.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтотОбъект, СтрокаТовары, "Субконто%Индекс%");
	ПараметрыДокумента.Вставить("СчетУчета", СтрокаТовары.СчетУчета);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();
	
	УстановитьУсловноеОформлениеТоварыОбщее();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()
	
	// Субконто БУ и НУ
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	Для Сч = 1 По 4 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Товары.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
	// Субконто БУ
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Субконто1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Субконто2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Субконто3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Субконто4Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыОбщее()
	
	// Субконто БУ
	
	Для Сч = 1 По 4 Цикл
		
		// Пустое субконто в виде <...>
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			"Объект.Товары.Субконто" + Сч + "Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Товары.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры
