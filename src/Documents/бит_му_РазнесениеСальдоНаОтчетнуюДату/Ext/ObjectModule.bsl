#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконтоМУ; // Хранит количество субконто МУ.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	// ШАБЛОН
	// ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр, Регл, МУ, Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
               
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// ШАБЛОН
	//// Подсчитаем и запишем сумму документа.
	// СуммаДокумента = <ИмяТабличнойЧасти>.Итог("Сумма");
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		// бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда.
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура заполняет реквизиты строки: СубконтоА_№  и СубконтоП_№.
// 
// Параметры:
//  СтрокаРазнесения - ДанныеФормыЭлементКоллекции.
//  ИмяСчета		 - Строка.
// 
Процедура ЗаполнитьСубконтоПростыхСчетов(СтрокаРазнесения, ИмяСчета = Неопределено) Экспорт

	Для i = 1 По мКоличествоСубконтоМУ Цикл
		
		ИмяСубконто = "Субконто_" + Строка(i);
		ЗначениеСубконто = СтрокаРазнесения[ИмяСубконто];
		
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
						
			ТипЗначенияСубконто = ТипЗнч(ЗначениеСубконто);
			
			Для iН = 1 По мКоличествоСубконтоМУ Цикл
				
				Если ИмяСчета = Неопределено ИЛИ ИмяСчета = "СчетА" Тогда
					ИмяСубконтоА = "СубконтоА_" + Строка(iН);
					Если ТипЗначенияСубконто = ТипЗнч(СтрокаРазнесения[ИмяСубконтоА]) Тогда
						СтрокаРазнесения[ИмяСубконтоА] = ЗначениеСубконто;				
					КонецЕсли;
				КонецЕсли;
				
				Если ИмяСчета = Неопределено ИЛИ ИмяСчета = "СчетП" Тогда
					ИмяСубконтоП = "СубконтоП_" + Строка(iН);
					Если ТипЗначенияСубконто = ТипЗнч(СтрокаРазнесения[ИмяСубконтоП]) Тогда
						СтрокаРазнесения[ИмяСубконтоП] = ЗначениеСубконто;				
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
					
		КонецЕсли;
	
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьСубконтоПростыхСчетов()

// Процедура обрабатывает изменение счета БУ в табличном поле.
// 
// Параметры:
//  ТекущиеДанные  			- ДанныеФормыЭлементКоллекции 
//								или ДокументТабличнаяЧастьСтрока.бит_му_РазнесениеСальдоНаОтчетнуюДату.Разнесение.
//  ИмяСубконто 			- Строка.
//  ИмяСчета    			- Строка.
//  ИмяКоличестваДоступных 	- Строка.
//
Процедура ИзменениеСчетаТабличноеПолеМУ(ТекущиеДанные, ИмяСубконто, ИмяСчета, ИмяКоличестваДоступных) Экспорт
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущиеДанные[ИмяСчета], мКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущиеДанные, НастройкиСубконто, ИмяСубконто);
	
	Если ИмяСчета <> "СчетАП" Тогда
		ЗаполнитьСубконтоПростыхСчетов(ТекущиеДанные, ИмяСчета);	
	КонецЕсли;
	
КонецПроцедуры // ИзменениеСчетаВТабличномПолеМУ()

// Процедура заполняет табличную часть "ДанныеРеклассификации".
// 
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура ЗаполнитьТчРазнесение() Экспорт
Процедура ЗаполнитьТчРазнесение(КоличествоСубконто=1) Экспорт
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	ТекНастройкаРазнесения = НастройкаРазнесения;
    
    Если ТекНастройкаРазнесения.Разнесение.Количество() = 0 Тогда
        // Если в настройке не заполнена табличная часть, то не получится сформировать запрос.
        Возврат;    
    КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//РезультатЗапроса = ПолучитьРезультатЗапросаДляЗаполненияТч(ТекНастройкаРазнесения);
	РезультатЗапроса = ПолучитьРезультатЗапросаДляЗаполненияТч(ТекНастройкаРазнесения,КоличествоСубконто);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Новая строка табличной части.
		СтрокаРазнесения = Разнесение.Добавить();
		
		// Заполним счета.
		СтрокаРазнесения.СчетАП = Выборка.СчетАП;
		СтрокаРазнесения.СчетА  = Выборка.СчетА;
		СтрокаРазнесения.СчетП  = Выборка.СчетП;
		
		//Идентификатор     = СтрокаРазнесения.ПолучитьИдентификатор();
		ИзменениеСчетаТабличноеПолеМУ(СтрокаРазнесения, "Субконто_" , "СчетАП", "КоличествоДоступныхСубконтоАП");
		ИзменениеСчетаТабличноеПолеМУ(СтрокаРазнесения, "СубконтоА_", "СчетА" , "КоличествоДоступныхСубконтоА");
		ИзменениеСчетаТабличноеПолеМУ(СтрокаРазнесения, "СубконтоП_", "СчетП" , "КоличествоДоступныхСубконтоП");
		
		// Заполним значения строки тч.
		ЗаполнитьЗначенияСвойств(СтрокаРазнесения, Выборка, , "СчетАП, СчетА, СчетП");
		ЗаполнитьСубконтоПростыхСчетов(СтрокаРазнесения);
		
		// ВалютаДт, ВалютаКт.
		СтрокаРазнесения.ВалютаДт = Выборка.Валюта;		
		СтрокаРазнесения.ВалютаКт = Выборка.Валюта;		
		
		//БИТ Тртилек 28.06.2012
		СтрокаРазнесения.ВидДвижения = Перечисления.БИТ_ВидыДвиженияМСФО.РСБУ;
		///БИТ Тртилек
		
	КонецЦикла;				

КонецПроцедуры // ЗаполнитьТчРазнесение()

// Процедура заполняет документ.
// 
// Параметры:
//  Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, Организация, НастройкаРазнесения.
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	// Получим валюту международного учета.
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	ИзменениеВалютыМодуль();
	
	// Заполняет табличную часть "Разнесение".
	ЗаполнитьТчРазнесение();	

КонецПроцедуры // ЗаполнитьДокумент()


// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабЧасть.НомерСтроки,
	|	ТабЧасть.СчетАП,
	|	ТабЧасть.Субконто_1,
	|	ТабЧасть.Субконто_2,
	|	ТабЧасть.Субконто_3,
	|	ТабЧасть.Субконто_4,
	|	ТабЧасть.ВалютаДт,
	|	ТабЧасть.ВалютнаяСуммаДт,
	|	ТабЧасть.СальдоДт,
	|	ТабЧасть.ВалютаКт,
	|	ТабЧасть.ВалютнаяСуммаКт,
	|	ТабЧасть.СальдоКт,
	|	ТабЧасть.СчетА,
	|	ТабЧасть.СубконтоА_1,
	|	ТабЧасть.СубконтоА_2,
	|	ТабЧасть.СубконтоА_3,
	|	ТабЧасть.СубконтоА_4,
	|	ТабЧасть.СчетП,
	|	ТабЧасть.СубконтоП_1,
	|	ТабЧасть.СубконтоП_2,
	|	ТабЧасть.СубконтоП_3,
	|	ТабЧасть.СубконтоП_4,
	|	ТабЧасть.СуммаРеглДт,
	|	ТабЧасть.СуммаРеглКт,
	|	ТабЧасть.СуммаУпрДт,
	|	ТабЧасть.СуммаУпрКт,
	|	ТабЧасть.КоличествоДт,
	|	ТабЧасть.КоличествоКт
	//БИТ Тртилек 28.06.2012
	|	,ТабЧасть.ВидДвижения
	///БИТ Тртилек	
	|ИЗ
	|	Документ.бит_му_РазнесениеСальдоНаОтчетнуюДату.Разнесение КАК ТабЧасть
	|ГДЕ
	|	ТабЧасть.Ссылка = &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРазнесение = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Разнесение", ТаблицаРазнесение);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Функция формирует строки запроса для субконто.
// 
// Параметры:
//  Счетчик  			  - Число.
//  ТекУровеньДетализации - Число.
//  
// Возвращаемое значение:
//   Струткура (СтрокаВыбораСубконто, СтрокаГруппировкиПоСубконто).
// 
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Функция ПолучитьСтрокиЗапросаПоСубконто(Счетчик, ТекУровеньДетализации)
Функция ПолучитьСтрокиЗапросаПоСубконто(Счетчик, ТекУровеньДетализации, КоличествоСубконто=1)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	СтрокаВыбораСубконто 		= ""; 
	СтрокаГруппировкиПоСубконто = "";
	
	Для i = 1 По мКоличествоСубконтоМУ Цикл
		
		Стрi = Строка(i);
		
		СтрокаПредставления = ?(Счетчик = 1," КАК Субконто_" + Стрi + ",", ",");
		
		Если i > ТекУровеньДетализации Тогда
			
			СтрокаВыбораСубконто = СтрокаВыбораСубконто + "
			|	NULL " + СтрокаПредставления;
			
		Иначе	
			
			СтрокаВыбораСубконто = СтрокаВыбораСубконто + "
			|	бит_му_Остатки.Субконто" + Стрi + СтрокаПредставления;
			
			//БИТ Тртилек 03092013 для последнего субконто уберем запятую
			//СтрокаГруппировкиПоСубконто = СтрокаГруппировкиПоСубконто + "
			//|	бит_му_Остатки.Субконто" + Стрi + ",";
			Если i = 1 Тогда 
				СтрокаГруппировкиПоСубконто = СтрокаГруппировкиПоСубконто + "
				|,";
			КонецЕсли;
			
			Если НЕ i = КоличествоСубконто Тогда
				СтрокаГруппировкиПоСубконто = СтрокаГруппировкиПоСубконто + "
				|	бит_му_Остатки.Субконто" + Стрi + ",";
			Иначе
				СтрокаГруппировкиПоСубконто = СтрокаГруппировкиПоСубконто + "
				|	бит_му_Остатки.Субконто" + Стрi;
			КонецЕсли;
			///БИТ Тртилек
			
		КонецЕсли;	
		
	КонецЦикла;
		
	СтруктураСтрок = Новый Структура("СтрокаВыбораСубконто, СтрокаГруппировкиПоСубконто", 
									СтрокаВыбораСубконто, СтрокаГруппировкиПоСубконто);

	Возврат СтруктураСтрок;
	
КонецФункции // ПолучитьСтрокиПоСубконто()

// Функция формирует результат запроса для заполнения табличной части.
// 
// Параметры:
//  НастройкаРазнесения - СправочникСсылка.бит_му_НастройкиРазнесенияСальдо.
//  
// Возвращаемое значение:
//   Результат выполнения запроса.
// 
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Функция ПолучитьРезультатЗапросаДляЗаполненияТч(НастройкаРазнесения)
Функция ПолучитьРезультатЗапросаДляЗаполненияТч(НастройкаРазнесения, КоличествоСубконто=1)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	Результат = Неопределено;
		
	Запрос = Новый Запрос;
	//БИТ Тртилек 28.06.2012
	//Запрос.УстановитьПараметр("Дата"	   , Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Дата"	   , Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	//БИТ Тртилек	
	Запрос.УстановитьПараметр("Организация", Организация);
	// Запрос.УстановитьПараметр("ВалютаМСФО" , фКэшЗначений.ВалютаМСФО);
	
	Счетчик 	 = 1;
	ТекстЗапроса = "";
	Для каждого СтрокаНастройки Из НастройкаРазнесения.Разнесение Цикл
		
		СтрокаСчетчик = Строка(Счетчик);
		
		// Данные из строки настройки.
		ТекУровеньДетализации = СтрокаНастройки.УровеньДетализации;
		ТекСчетАП 			  = СтрокаНастройки.СчетАП;
		ТекСчетА 			  = СтрокаНастройки.СчетА;
		ТекСчетП 			  = СтрокаНастройки.СчетП;
		
		// Имена параметров УровеньДетализации_№ и Счет_№.
		ИмяПараметраУровеньДетализации = "УровеньДетализации_" + СтрокаСчетчик;
		ИмяПараметраСчетАП 			   = "СчетАП_" + СтрокаСчетчик;
		ИмяПараметраСчетА 			   = "СчетА_"  + СтрокаСчетчик;
		ИмяПараметраСчетП 			   = "СчетП_"  + СтрокаСчетчик;
		
		// Параметры запроса.
		Запрос.УстановитьПараметр(ИмяПараметраУровеньДетализации, ТекУровеньДетализации);
		Запрос.УстановитьПараметр(ИмяПараметраСчетАП			, ТекСчетАП);
		Запрос.УстановитьПараметр(ИмяПараметраСчетА				, ТекСчетА);
		Запрос.УстановитьПараметр(ИмяПараметраСчетП				, ТекСчетП);
		
		// Строки текста запроса для выбора и группировки субконто.
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//СтрукутраСтрок = ПолучитьСтрокиЗапросаПоСубконто(Счетчик, ТекУровеньДетализации);
		СтрукутраСтрок = ПолучитьСтрокиЗапросаПоСубконто(Счетчик, ТекУровеньДетализации, КоличествоСубконто);
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		СтрокаВыбораСубконто 		= СтрукутраСтрок.СтрокаВыбораСубконто; 
		СтрокаГруппировкиПоСубконто = СтрукутраСтрок.СтрокаГруппировкиПоСубконто;
		
		// Текст запроса - ВЫБРАТЬ.
		Если Счетчик = 1 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ	
			|	&" + ИмяПараметраУровеньДетализации + " 	 КАК УровеньДетализации,
			|	бит_му_Остатки.Счет							 КАК СчетАП,
			|	&" + ИмяПараметраСчетА + "					 КАК СчетА,
			|	&" + ИмяПараметраСчетП + "					 КАК СчетП,
			|	бит_му_Остатки.Организация					 КАК Организация,
			|	" + СтрокаВыбораСубконто + "
			|	СУММА(бит_му_Остатки.СуммаМУОстатокДт)  	 КАК СальдоДт,
			|	СУММА(бит_му_Остатки.СуммаМУОстатокКт)  	 КАК СальдоКт,
			//БИТ Тртилек 03092013 для не валютных счетов не будем вытягивать валюту иначе сальдо разбивается на ДтКт
			//|	ЕСТЬNULL(бит_му_Остатки.Валюта, Значение(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
			|" + ?(ТекСчетАП.Валютный, "ЕСТЬNULL(бит_му_Остатки.Валюта, Значение(Справочник.Валюты.ПустаяСсылка)) КАК Валюта," , "Значение(Справочник.Валюты.ПустаяСсылка) КАК Валюта,") + "			
			///БИТ Тртилек			
			|	СУММА(бит_му_Остатки.ВалютнаяСуммаОстатокДт) КАК ВалютнаяСуммаДт,
			|	СУММА(бит_му_Остатки.ВалютнаяСуммаОстатокКт) КАК ВалютнаяСуммаКт,
			|	СУММА(бит_му_Остатки.СуммаРеглОстатокДт) 	 КАК СуммаРеглДт,
			|	СУММА(бит_му_Остатки.СуммаРеглОстатокКт) 	 КАК СуммаРеглКт,
			|	СУММА(бит_му_Остатки.СуммаУпрОстатокДт) 	 КАК СуммаУпрДт,
			|	СУММА(бит_му_Остатки.СуммаУпрОстатокКт) 	 КАК СуммаУпрКт,
			|	СУММА(бит_му_Остатки.КоличествоОстатокДт) 	КАК КоличествоДт,
			|	СУММА(бит_му_Остатки.КоличествоОстатокКт) 	КАК КоличествоКт
			|"; 		
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ	
			|	&" + ИмяПараметраУровеньДетализации + ",
			|	бит_му_Остатки.Счет,
			|	&" + ИмяПараметраСчетА + ",
			|	&" + ИмяПараметраСчетП + ",
			|	бит_му_Остатки.Организация,
			|	" + СтрокаВыбораСубконто + "
			|	СУММА(бит_му_Остатки.СуммаМУОстатокДт),
			|	СУММА(бит_му_Остатки.СуммаМУОстатокКт),
			//БИТ Тртилек 03092013 для не валютных счетов не будем вытягивать валюту иначе сальдо разбивается на ДтКт
			//|	ЕСТЬNULL(бит_му_Остатки.Валюта, Значение(Справочник.Валюты.ПустаяСсылка)),
			|" + ?(ТекСчетАП.Валютный, "ЕСТЬNULL(бит_му_Остатки.Валюта, Значение(Справочник.Валюты.ПустаяСсылка)) КАК Валюта," , "Значение(Справочник.Валюты.ПустаяСсылка) КАК Валюта,") + "
			///БИТ Тртилек
			|	СУММА(бит_му_Остатки.ВалютнаяСуммаОстатокДт),
			|	СУММА(бит_му_Остатки.ВалютнаяСуммаОстатокКт),
			|	СУММА(бит_му_Остатки.СуммаРеглОстатокДт),
			|	СУММА(бит_му_Остатки.СуммаРеглОстатокКт),
			|	СУММА(бит_му_Остатки.СуммаУпрОстатокДт),
			|	СУММА(бит_му_Остатки.СуммаУпрОстатокКт),
			|	СУММА(бит_му_Остатки.КоличествоОстатокДт),
			|	СУММА(бит_му_Остатки.КоличествоОстатокКт)
			|";
		КонецЕсли;
		
		// Текст запроса - ИЗ, СГРУППИРОВАТЬ. 
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(&Дата, Счет = &" + ИмяПараметраСчетАП + ", , Организация = &Организация) КАК бит_му_Остатки
        |
		|СГРУППИРОВАТЬ ПО
		|	бит_му_Остатки.Организация,
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-03 (#3816)
		//|	бит_му_Остатки.Счет,
		|	бит_му_Остатки.Счет
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-03 (#3816)
		|	" + СтрокаГруппировкиПоСубконто + "	
		//БИТ Тртилек 03092013 для не валютных счетов не будем вытягивать валюту иначе сальдо разбивается на ДтКт
		//|	ЕСТЬNULL(бит_му_Остатки.Валюта, Значение(Справочник.Валюты.ПустаяСсылка))
		|" + ?(ТекСчетАП.Валютный, ",ЕСТЬNULL(бит_му_Остатки.Валюта, Значение(Справочник.Валюты.ПустаяСсылка))" , "") + "			
		///БИТ Тртилек 
		|"; 		
		
		// Увеличение счетчика.
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьРезультатЗапросаДляЗаполненияТч()

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаДанных = СтруктураТаблиц.Разнесение;
	
	Движения.бит_Дополнительный_2.Записывать = Истина;
	Движения.бит_Дополнительный_2.Очистить();
	
	Содержание = "Разнесение сальдо активно-пассивных счетов";
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// -----------------------------------------------------------------
		// ДТ СчетА КТ СчетАП - СальдоДт, ВалютнаяСуммаДт...  		
		Если СтрокаТаблицы.СальдоДт <> 0 ИЛИ СтрокаТаблицы.ВалютнаяСуммаДт <> 0 Тогда
			СформироватьЗаписи("Дт", СтрокаТаблицы, Содержание, СтруктураШапкиДокумента, СтруктураКурсыВалют);
			СформироватьЗаписи("Дт", СтрокаТаблицы, Содержание, СтруктураШапкиДокумента, СтруктураКурсыВалют, Истина);
		КонецЕсли;                    	
		       		 		
		// -----------------------------------------------------------------
		// ДТ СчетАП КТ СчетП - СальдоКт, ВалютнаяСуммаКт...   			
		Если СтрокаТаблицы.СальдоКт <> 0 ИЛИ СтрокаТаблицы.ВалютнаяСуммаКт <> 0 Тогда
			СформироватьЗаписи("Кт", СтрокаТаблицы, Содержание, СтруктураШапкиДокумента, СтруктураКурсыВалют);
			СформироватьЗаписи("Кт", СтрокаТаблицы, Содержание, СтруктураШапкиДокумента, СтруктураКурсыВалют, Истина);
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение.
// 
// Параметры:
//  ПостфиксРесурсов 		- Строка.
//  СтрокаТаблицы 			- Строка таблицы значений.
//  Содержание 				- Строка.
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют 	- Структура.
//  ЭтоСторно				- Булево.
// 
Процедура СформироватьЗаписи(ПостфиксРесурсов, СтрокаТаблицы, Содержание, СтруктураШапкиДокумента, СтруктураКурсыВалют, ЭтоСторно = Ложь)
	
	// Изменение кода. Начало. 11.02.2016{{
	Если ЭтоСторно И НЕ ЗначениеЗаполнено(ДатаСторно) Тогда
		// Не делаем проводку на дату сторно, если ДатаСторно не заполнена.
		Возврат;
	КонецЕсли;
	// Изменение кода. Конец. 11.02.2016}}
		
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	Запись.Активность  = Истина;
	Запись.Организация = СтруктураШапкиДокумента.Организация;
	Запись.Период      = ?(ЭтоСторно, ДатаСторно, Дата);
	Запись.Содержание  = Содержание;
			
	Если ПостфиксРесурсов = "Дт" Тогда
		
		Запись_СчетДт = СтрокаТаблицы.СчетА;
		Запись_СчетКт = СтрокаТаблицы.СчетАП;
		
		ИмяСубконтоДт = "СубконтоА_";
		ИмяСубконтоКт = "Субконто_";
		
		Запись_Валюта        = СтрокаТаблицы.ВалютаДт;
		Запись_ВалютнаяСумма = СтрокаТаблицы.ВалютнаяСуммаДт;
				
		Запись_Количество    = СтрокаТаблицы.КоличествоДт;
		
		Запись_СуммаМУ   = СтрокаТаблицы.СальдоДт;
		Запись_СуммаРегл = СтрокаТаблицы.СуммаРеглДт;
		Запись_СуммаУпр  = СтрокаТаблицы.СуммаУпрДт;
					
	Иначе	
		
		Запись_СчетДт 		 = СтрокаТаблицы.СчетАП;
		Запись_СчетКт 		 = СтрокаТаблицы.СчетП;
		
		ИмяСубконтоДт = "Субконто_";
		ИмяСубконтоКт = "СубконтоП_";
		
		Запись_Валюта        = СтрокаТаблицы.ВалютаКт;
		Запись_ВалютнаяСумма = СтрокаТаблицы.ВалютнаяСуммаКт;
				
		Запись_Количество    = СтрокаТаблицы.КоличествоКт;
		
		Запись_СуммаМУ   = СтрокаТаблицы.СальдоКт;
		Запись_СуммаРегл = СтрокаТаблицы.СуммаРеглКт;
		Запись_СуммаУпр  = СтрокаТаблицы.СуммаУпрКт;
		
	КонецЕсли;
	
	// Счета.
	Запись.СчетДт = Запись_СчетДт;
	Запись.СчетКт = Запись_СчетКт;
    СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетДт);
    СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетКт);
	
	// Если это сторно - то суммы должны быть противоположными.
	Если ЭтоСторно Тогда 	
		Запись_ВалютнаяСумма = - Запись_ВалютнаяСумма;
		Запись_Количество    = - Запись_Количество;
		Запись_СуммаМУ   	 = - Запись_СуммаМУ;
		Запись_СуммаРегл 	 = - Запись_СуммаРегл;
		Запись_СуммаУпр  	 = - Запись_СуммаУпр;
	КонецЕсли;
	
	// Основные ресурсы
	Запись.СуммаМУ   	 = Запись_СуммаМУ;
	Запись.СуммаРегл 	 = Запись_СуммаРегл;
	Запись.СуммаУпр  	 = Запись_СуммаУпр;
	
	// Валюта и валютная сумма.
	Если СвСчДт.Валютный Тогда
		Запись.ВалютаДт        = Запись_Валюта;
		Запись.ВалютнаяСуммаДт = Запись_ВалютнаяСумма;
	КонецЕсли;   
	Если СвСчКт.Валютный Тогда
		Запись.ВалютаКт        = Запись_Валюта;
		Запись.ВалютнаяСуммаКт = Запись_ВалютнаяСумма;
	КонецЕсли;

	// Количесвто.
	Если СвСчДт.Количественный Тогда   		
		Запись.КоличествоДт = Запись_Количество;      		
	КонецЕсли; 
	Если СвСчКт.Количественный Тогда   		
		Запись.КоличествоКт = Запись_Количество;         		
	КонецЕсли;
	
	//БИТ Тртилек 28.06.2012 ВидДвижения
	Запись.ВидДвиженияМСФО = СтрокаТаблицы.ВидДвижения;
	///БИТ Тртилек
	
	// Заполнение аналитик.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись, СтрокаТаблицы, ИмяСубконтоДт, ИмяСубконтоКт, мКоличествоСубконтоМУ);
		
КонецПроцедуры // СформироватьЗаписи()

#КонецОбласти

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
