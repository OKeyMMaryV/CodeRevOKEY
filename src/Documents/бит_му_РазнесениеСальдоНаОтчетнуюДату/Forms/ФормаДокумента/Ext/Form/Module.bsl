
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

&НаКлиенте 
Перем мСчетАП; // Хранит текущие значения Счета А/П.

&НаКлиенте 
Перем мСчетА; // Хранит текущие значения Счета А.

&НаКлиенте 
Перем мСчетП; // Хранит текущие значения Счета П.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	// Кешируем количество субконто и оформляем
	фКоличествоСубконтоМУ = 4;	
	ОформитьСубконто();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли; 
	
	// Изменение кода. Начало. 03.04.2014{{
	УстановитьПараметрыВыбораДляСчетов();
    // Изменение кода. Конец. 03.04.2014}}

	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	// Изменение кода. Начало. 11.02.2016{{
	//Если ЭтоНовый Тогда
	//	Сутки = 24*60*60;
	//	Объект.ДатаСторно = НачалоДня(Объект.Дата + Сутки);		
	//КонецЕсли;
	// Изменение кода. Конец. 11.02.2016}}.
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	мКэшРеквизитовФормы.Вставить("Дата");
	мКэшРеквизитовФормы.Вставить("ДатаСторно");
	мКэшРеквизитовФормы.Вставить("Организация");
	мКэшРеквизитовФормы.Вставить("НастройкаРазнесения");

	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ВосстановитьНастройкиДоступныхСубконто();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьНастройкиДоступныхСубконто();	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_РазнесениеСальдоНаОтчетнуюДату";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИмяРеквизита = "Организация";
	
	Если Объект[ИмяРеквизита] <> мКэшРеквизитовФормы[ИмяРеквизита] Тогда
		
		Если Объект.Разнесение.Количество() <> 0 Тогда
						  
			ТекстВопроса = НСтр("ru = 'Изменилась организация документа. Табличная часть ""Разнесение"" будет очищена. Продолжить?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОрганизацияПриИзменении", ЭтотОбъект, ИмяРеквизита);
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			
		Иначе
			
			//1c-izhtc spawn (
			ВопросОрганизацияПриИзменении(КодВозвратаДиалога.Да, ИмяРеквизита);
			//1c-izhtc spawn )
			
			ИзменениеОрганизацииКлиент();
			
		КонецЕсли;    	
		
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросОрганизацияПриИзменении(Ответ, ИмяРеквизита) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Разнесение.Очистить();
				
		ИзменениеОрганизацииКлиент();	
				
	Иначе
		
		ИзвлечьИзКэша(ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры // ВопросОрганизацияПриИзменении()

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИмяРеквизита = "Дата";
	
	Если Объект[ИмяРеквизита] <> мКэшРеквизитовФормы[ИмяРеквизита] Тогда
		
		Если Проверка_ДатыКорректны() Тогда
			
			Если Объект.Разнесение.Количество() <> 0 Тогда
				ТекстВопроса = НСтр("ru = 'Изменилась дата документа. Табличная часть ""Разнесение"" будет очищена. Продолжить?'");
				ОповещениеВопрос = Новый ОписаниеОповещения("ВопросДатаПриИзменении", ЭтотОбъект, ИмяРеквизита);  				
				ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			КонецЕсли;
			
			ДобавитьВКэш(ИмяРеквизита);
			
		Иначе
			
			ИзвлечьИзКэша(ИмяРеквизита);
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ        - Строка.
//  ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ВопросДатаПриИзменении(Ответ, ИмяРеквизита) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Разнесение.Очистить();

		ИзменениеВалютыКлиент();
		
		ДобавитьВКэш(ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры // ВопросДатаПриИзменении()

&НаКлиенте
Процедура ДатаСторноПриИзменении(Элемент)
	
	ИмяРеквизита = "ДатаСторно";
	
	Если Проверка_ДатыКорректны() Тогда
		ДобавитьВКэш(ИмяРеквизита);
	Иначе
		ИзвлечьИзКэша(ИмяРеквизита);
	КонецЕсли;                      
	
КонецПроцедуры // ДатаСторноПриИзменении()

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

&НаКлиенте
Процедура НастройкаРазнесенияПриИзменении(Элемент)
	
	ИмяРеквизита = "НастройкаРазнесения";
	
	Если Объект[ИмяРеквизита] <> мКэшРеквизитовФормы[ИмяРеквизита] Тогда
		
		Если Объект.Разнесение.Количество() <> 0 Тогда

			ТекстВопроса = НСтр("ru = 'Изменилась настройка разнесения. Табличная часть ""Разнесение"" будет очищена. Продолжить?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросНастройкаРазнесенияПриИзменении", ЭтотОбъект, ИмяРеквизита);
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			
		КонецЕсли;    	
		
	КонецЕсли;
	
КонецПроцедуры // НастройкаРазнесенияПриИзменении()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ        - Строка.
//  ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ВопросНастройкаРазнесенияПриИзменении(Ответ, ИмяРеквизита) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Разнесение.Очистить();
		ДобавитьВКэш(ИмяРеквизита);
		
	Иначе	
		ИзвлечьИзКэша(ИмяРеквизита);			
	КонецЕсли;

КонецПроцедуры // ВопросНастройкаРазнесенияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазнесение

&НаКлиенте
Процедура РазнесениеСчетАПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РазнесениеСчетАПНачалоВыбора()

&НаКлиенте
Процедура РазнесениеСчетАППриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разнесение.ТекущиеДанные;
	Ид = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если Не СчетКорректен(ТекущиеДанные.СчетАП, ВидСчета.АктивноПассивный, Ид) Тогда
		
		ТекстСообщения = Нстр("ru = 'Ошибка выбора счета. Счет А/П должен быть активно-пассивным и не забалансовым, а также должны совпадать признаки валютного учета у всех счетов в строке.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		ТекущиеДанные.СчетАП = мСчетАП;
		
	Иначе
	
		Идентификатор     = Элементы.Разнесение.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменениеСчетаТабличноеПолеМУ(Идентификатор, "Субконто_", "СчетАП", "КоличествоДоступныхСубконтоАП");
		
	КонецЕсли;
	
КонецПроцедуры // РазнесениеСчетАППриИзменении()

&НаКлиенте
Процедура РазнесениеСчетАНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Разнесение.ТекущиеДанные;	
	мСчетА = ТекущиеДанные.СчетА;
	
	ОткрытьФормуВыбораСчета(Элемент, ВидСчета.Активный);	
	
КонецПроцедуры // РазнесениеСчетАНачалоВыбора()

&НаКлиенте
Процедура РазнесениеСчетАПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разнесение.ТекущиеДанные;
	Ид = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если Не СчетКорректен(ТекущиеДанные.СчетА, ВидСчета.Активный, Ид) Тогда
		
		ТекстСообщения = Нстр("ru = 'Ошибка выбора счета. Счет А должен быть активным и не забалансовым, а также должны совпадать признаки валютного учета у всех счетов в строке.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		ТекущиеДанные.СчетА = мСчетА;
		
	Иначе
	
		Идентификатор     = Элементы.Разнесение.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменениеСчетаТабличноеПолеМУ(Идентификатор, "СубконтоА_", "СчетА", "КоличествоДоступныхСубконтоА");
		
	КонецЕсли;
	
КонецПроцедуры // РазнесениеСчетАПриИзменении()

&НаКлиенте
Процедура РазнесениеСчетПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Разнесение.ТекущиеДанные;	
	мСчетП = ТекущиеДанные.СчетП;
	
	ОткрытьФормуВыбораСчета(Элемент, ВидСчета.Пассивный);	
	
КонецПроцедуры // РазнесениеСчетПНачалоВыбора()

&НаКлиенте
Процедура РазнесениеСчетППриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разнесение.ТекущиеДанные;
	Ид = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если Не СчетКорректен(ТекущиеДанные.СчетП, ВидСчета.Пассивный, Ид) Тогда
		
		ТекстСообщения = Нстр("ru = 'Ошибка выбора счета. Счет П должен быть пассивным и не забалансовым, а также должны совпадать признаки валютного учета у всех счетов в строке.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		ТекущиеДанные.СчетП = мСчетП;
		
	Иначе
	
		Идентификатор     = Элементы.Разнесение.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменениеСчетаТабличноеПолеМУ(Идентификатор, "СубконтоП_", "СчетП", "КоличествоДоступныхСубконтоП");
		
	КонецЕсли;
	
КонецПроцедуры // РазнесениеСчетППриИзменении()

&НаКлиенте
Процедура РазнесениеСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные     = Элементы.Разнесение.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, "Разнесение", Элемент.Имя);		
	ИзменениеСубконтоМУ(Элементы.Разнесение.ТекущиеДанные, ЗначениеСубконто, "Субконто_");
	
КонецПроцедуры // РазнесениеСубконтоПриИзменении()

&НаКлиенте
Процедура РазнесениеСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные     = Элементы.Разнесение.ТекущиеДанные;
	
	ИмяСубконто = СтрЗаменить(Элемент.Имя, "Разнесение", "");
	ИмяСубконто = Лев(ИмяСубконто, СтрДлина(ИмяСубконто)-1);
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, "Разнесение", Элемент.Имя);		
	НачалоВыбораСубконтоМУ(Элемент, СтандартнаяОбработка, ТекущиеДанные, ЗначениеСубконто, ИмяСубконто);
	
КонецПроцедуры // РазнесениеСубконтоНачалоВыбора()

&НаКлиенте
Процедура РазнесениеСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Разнесение.ТекущиеДанные;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, "Разнесение", Элемент.Имя);
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "Субконто_"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // РазнесениеСубконтоАвтоПодбор()
												 
&НаКлиенте
Процедура РазнесениеСубконтоА_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Разнесение.ТекущиеДанные;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, "Разнесение", Элемент.Имя);
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоА_"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // РазнесениеСубконтоА_АвтоПодбор()

&НаКлиенте
Процедура РазнесениеСубконтоП_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Разнесение.ТекущиеДанные;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, "Разнесение", Элемент.Имя);
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоП_"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // РазнесениеСубконтоП_АвтоПодбор()

&НаКлиенте
Процедура РазнесениеРеквизитНачалоВыбораОтмена(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РазнесениеРеквизитНачалоВыбораОтмена()

&НаКлиенте
Процедура РазнесениеРеквизитОчисткаОтмена(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РазнесениеРеквизитОчисткаОтмена()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура Заполнить(Команда)
	
	// Проверка заполненности настройки разнесения.
	Если Не ЗначениеЗаполнено(Объект.НастройкаРазнесения) Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо заполнить настройку разнесения.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// 
	Если Объект.Разнесение.Количество() > 0 Тогда
					  
		ТекстВопроса = НСтр("ru = 'Табличная часть ""Разнесение"" будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗаполнить", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьТабличнуюЧастьПоНастройке();

	КонецЕсли;
	
КонецПроцедуры // Заполнить()

// Обработка оповещения вопроса пользовтелю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросЗаполнить(Ответ, ДопПарметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Разнесение.Очистить();	
		ЗаполнитьТабличнуюЧастьПоНастройке();
	КонецЕсли; 
	
КонецПроцедуры // ВопросЗаполнить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
	
КонецПроцедуры // УправлениеЭлементамиФормы()
											   
// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
		
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений();
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура заполняет настройку разнесения по организации.
// 
&НаСервере
Процедура ЗаполнитьНастройкуРазнесения()

	Организация = Объект.Организация;
	Если Не ЗначениеЗаполнено(Организация) ИЛИ ЗначениеЗаполнено(Объект.НастройкаРазнесения) Тогда
		Возврат;			
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.бит_му_НазначенияНастроекРазнесенияСальдо.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ПерваяЗапись = НаборЗаписей[0];
		Объект.НастройкаРазнесения = ПерваяЗапись.НастройкаРазнесенияСальдо;	
	КонецЕсли;                                                              	

КонецПроцедуры // ЗаполнитьНастройкуРазнесения()

// Процедура получает и записывает валюту международного учета в кэш значений.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	фКэшЗначений.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
&НаСервере 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

// Процедура обрабатывает изменение валюты документа.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// ВосстановитьНастройкиДоступныхСубконто();
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений();
	
	Если // Не ЗначениеЗаполнено(Объект.ВалютаДокумента) И.
		ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();	
	
	ЗаполнитьНастройкуРазнесения();
	
	// ВосстановитьНастройкиДоступныхСубконто();
	
КонецПроцедуры // ИзменениеОрганизацииСервер()
                   
// Функция проверяет корректность выбранного счета.
// 
// Параметры:
//  Счет  - ПланСчетовСсылка.бит_Дополнительный_2.
//  Вид   - СистемныеПеречисления.ВидСчета.
//  
// Возвращаемое значение:
//   Булево.
// 
&НаСервере
Функция СчетКорректен(Счет, Вид, Ид)

	СчетКорректен = Истина;
	
	Если ЗначениеЗаполнено(Счет) Тогда
        
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);         
		Если СвСч.Вид <> Вид ИЛИ СвСч.Забалансовый Тогда	
            
            СчетКорректен = Ложь;			
		
        Иначе
            
    		ТекущиеДанные = Объект.Разнесение.НайтиПоИдентификатору(Ид);
            		
            Если ЗначениеЗаполнено(ТекущиеДанные.СчетАП) Тогда
                СвСчАП = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетАП);
    			ВалютныйСчет = СвСчАП.Валютный;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ТекущиеДанные.СчетА) Тогда
                СвСчА = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетА);
    			Если ВалютныйСчет = Неопределено Тогда
    				ВалютныйСчет = СвСчА.Валютный;
    			ИначеЕсли ВалютныйСчет <> СвСчА.Валютный Тогда
    				СчетКорректен = Ложь;
    			КонецЕсли;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ТекущиеДанные.СчетП) Тогда
                СвСчП = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетП);
    			Если ВалютныйСчет <> СвСчП.Валютный Тогда
    				СчетКорректен = Ложь;
    			КонецЕсли;
            КонецЕсли;
            
        КонецЕсли;
			
	КонецЕсли;

	Возврат СчетКорректен;
	
КонецФункции // СчетКорректен()  

#КонецОбласти

#Область СерверныеПроцедурыИФункцииПоРаботеССубконто

// Функция подсчитывает количество доступных субконто в строке тч.
// 
// Параметры:
//  СтрокаТаблицы. 
//  ИмяСчета  			   - Строка.
//  ИмяКоличестваДоступных - Строка.
//  
&НаСервере
 Процедура ПодсчитатьКоличествоДоступныхСубконто(СтрокаТаблицы, ИмяСчета, ИмяКоличестваДоступных)

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы[ИмяСчета]);
    
	СтрокаТаблицы[ИмяКоличестваДоступных] 
			= Мин(СвСч.КоличествоСубконто, СтрокаТаблицы.УровеньДетализации);
 	
КонецПроцедуры // ПодсчитатьКоличествоДоступныхСубконто()
    
// Процедура осуществляет устанавливает связи параметров выбора и связи по типу субконто,
// восстанавливает настройки субконто, задает настройки оформления для полей субконто.
// 
&НаСервере 
Процедура ОформитьСубконтоПоСчету(ИмяСчета, ИмяСубконто, ИмяКоличестваДоступных)
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	 											  ,ИмяСчета
												  ,ИмяСубконто
												  ,фКоличествоСубконтоМУ
												  ,"Разнесение"
												  ,"Элементы.Разнесение.ТекущиеДанные");
												  
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	Для каждого СтрокаТаблицы Из Объект.Разнесение Цикл
		ПодсчитатьКоличествоДоступныхСубконто(СтрокаТаблицы, ИмяСчета, ИмяКоличестваДоступных);
	КонецЦикла; 

	// Настройки оформления для полей субконто.
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   ,"Разнесение"
															   ,ИмяСубконто
															   ,ИмяКоличестваДоступных
															   //БИТ Тртилек 30.07.2012
															   //,фКоличествоСубконтоМУ);
															   ,фКоличествоСубконтоМУ
															   ,Новый Цвет(255,255,255)
															   ,
															   ,"");
															   ///БИТ Тртилек
	
КонецПроцедуры // ОформитьСубконто()

// Процедура осуществляет устанавливает связи параметров выбора и связи по типу субконто,
// восстанавливает настройки субконто, задает настройки оформления для полей субконто.
// 
&НаСервере 
Процедура ОформитьСубконто()
	
	// Удалим из условного оформления элементы по представлению "Оформление субконто таблицы".
	МассивУдаляемых = Новый Массив;
	Для каждого ЭлементУо Из УсловноеОформление.Элементы Цикл	
		Если ЭлементУо.Представление = "Оформление субконто таблицы" Тогда
			МассивУдаляемых.Добавить(ЭлементУо);
		КонецЕсли;	
	КонецЦикла;
	Для каждого ЭлементУо Из МассивУдаляемых Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУо); 	
	КонецЦикла;
	
	ОформитьСубконтоПоСчету("СчетАП", "Субконто_" , "КоличествоДоступныхСубконтоАП");
	ОформитьСубконтоПоСчету("СчетА" , "СубконтоА_", "КоличествоДоступныхСубконтоА");
	ОформитьСубконтоПоСчету("СчетП" , "СубконтоП_", "КоличествоДоступныхСубконтоП");
	
КонецПроцедуры // ОформитьСубконто()

// Процедура восстанавливает настройки субконто в зависимости от счетов учета.
// 
&НаСервере
Процедура ВосстановитьНастройкиДоступныхСубконто()

	Для каждого СтрокаТаблицы Из Объект.Разнесение Цикл
		
		ПодсчитатьКоличествоДоступныхСубконто(СтрокаТаблицы, "СчетАП", "КоличествоДоступныхСубконтоАП");
		ПодсчитатьКоличествоДоступныхСубконто(СтрокаТаблицы, "СчетА" , "КоличествоДоступныхСубконтоА");
		ПодсчитатьКоличествоДоступныхСубконто(СтрокаТаблицы, "СчетП" , "КоличествоДоступныхСубконтоП");
		
	КонецЦикла;	

КонецПроцедуры // ВосстановитьНастройкиДоступныхСубконто()

// Процедура обрабатывает изменение счета БУ в табличном поле.
// 
// Параметры:
//  Идентификатор  - Число - Индентификатор строки табличной части.
//  ИмяСубконто 			- Строка.
//  ИмяСчета    			- Строка.
//  ИмяКоличестваДоступных 	- Строка.
//
&НаСервере
Процедура ИзменениеСчетаТабличноеПолеМУ(Идентификатор, ИмяСубконто, ИмяСчета, ИмяКоличестваДоступных)
	
	ТекущиеДанные = Объект.Разнесение.НайтиПоИдентификатору(Идентификатор);
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеСчетаТабличноеПолеМУ(ТекущиеДанные, ИмяСубконто, ИмяСчета, ИмяКоличестваДоступных);
	
	ПодсчитатьКоличествоДоступныхСубконто(ТекущиеДанные, ИмяСчета, ИмяКоличестваДоступных);
		
КонецПроцедуры // ИзменениеСчетаВТабличномПолеМУ()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииЗаполненияТабличнойЧасти

// Процедура заполняет табличную часть по настройке.
// 
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоНастройке()

	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ДокументОбъект.ЗаполнитьТчРазнесение();
	ДокументОбъект.ЗаполнитьТчРазнесение(фКоличествоСубконтоМУ);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);     	

	ВосстановитьНастройкиДоступныхСубконто();
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоНастройке()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанвливает параметры выбора для элементов формы. 
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.РазнесениеСчетАП);
	МассивЭлементов.Добавить(Элементы.РазнесениеСчетА);
	МассивЭлементов.Добавить(Элементы.РазнесениеСчетП);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура открывает форму выбора счета с отбором.
// 
// Параметры:
//  Элемент.
//  Вид  - Тип_описание.
// 
&НаКлиенте
Процедура ОткрытьФормуВыбораСчета(Элемент, Вид)

	Отбор = Новый Структура;
	Отбор.Вставить("Вид"		 , Вид);
	Отбор.Вставить("Забалансовый", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("ПланСчетов.бит_Дополнительный_2.Форма.ФормаВыбора", 
						ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	

КонецПроцедуры // ОткрытьФормуВыбораСчета()
					
// Процедура обрабатывает изменение валюты документа. Клиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");
	
КонецПроцедуры // ИзменениеВалютыКлиент()
      
// Функция проверяет корректность даты документа и даты сторно.
//  
// Возвращаемое значение:
//   Булево.
// 
&НаКлиенте
Функция Проверка_ДатыКорректны()

	// Изменение кода. Начало. 11.02.2016{{
	Если ЗначениеЗаполнено(Объект.ДатаСторно) Тогда 	
		ДатыКорректны = Объект.Дата <= Объект.ДатаСторно;
	Иначе	
	    ДатыКорректны = Истина;
	КонецЕсли;
	// Изменение кода. Конец. 11.02.2016}}
	
	Если Не ДатыКорректны Тогда
		ТекстСообщения = Нстр("ru = 'Дата документа не может быть больше даты сторно.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;

	Возврат ДатыКорректны;
	
КонецФункции // Проверка_ДатыКорректны()

// Функция получает значение субконто в табличном поле исходя из имени элемента и имени табличного поля.
// Значение получается исходя из предположения что ИмяЭлементаУправления = ИмяТабличногоПоля+ИмяРеквизита.
// 
// Параметры:
//  ТекущаяСтрока      - ДанныеФормыКоллекция.
//  ИмяТабличногоПоля  - Строка.
//  ИмяЭлемента        - Строка.
//  ЗначениеСубконто   - Произвольный.
// 
// Возвращаемое значение:
//  Произвольный.
// 
&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяТабличногоПоля, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяТабличногоПоля = "Разнесение";
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента, ИмяТабличногоПоля, "");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

// Процедура обрабатывает изменение субконто МУ.
// 
// Параметры:
//  Контейнер        - Произвольный.
//  ЗначениеСубконто - Произвольный - Текущее значение субконто.
// 
&НаКлиенте
Процедура ИзменениеСубконтоМУ(Контейнер, ЗначениеСубконто, ИмяСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, ИмяСубконто , фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, ИмяСубконто, ЗначениеСубконто  , фКоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, ИмяСубконто, ""  , фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

// Процедура обрабатывает начало выбора субконто МУ.
// 
// Параметры:
//  Элемент              - ЭлементУправления.
//  СтандартнаяОбработка - Булево.
//  Контейнер            - Произвольный.
//  ЗначениеСубконто     - Произвольный.
// 
&НаКлиенте
Процедура НачалоВыбораСубконтоМУ(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто, ИмяСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,ИмяСубконто
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

// Процедура обработка изменения поля ввода "Организация".
// 
&НаКлиенте
Процедура ИзменениеОрганизацииКлиент()
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента), Истина, Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
	ДобавитьВКэш("Организация");
	
КонецПроцедуры // ИзменениеОрганизацииКлиент()

#КонецОбласти

#КонецОбласти
