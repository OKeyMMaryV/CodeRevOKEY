#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мНастройкиПрограммы Экспорт; // Хранит настройки БИТ.

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

Перем мБылПроведен Экспорт; // Служит для передачи признака проведения между обработчиками.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения регистра ПланируемоеПоступлениеДенежныхСредств.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

Перем мВидыОпераций Экспорт; // ХранитВидыОпераций.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	мБылПроведен = Проведен;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("ЦФО"		  ,ЦФО);

	мНастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Дата,,СтруктураПараметров,"Ошибки");
	
    // Синхронизируем пометку на удаление у документов планирования.
    бит_Казначейство.СинхронизацияПометкиНаУдалениеУДокументовПланирования(ЭтотОбъект, Отказ);
	// Синхронизируем пометку на удаление у документов планирования по табличной части ГрафикНачислений.
	бит_ДоговораСервер.СинхронизацияПометкиНаУдалениеУДокументовПланирования(ЭтотОбъект, Отказ);
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли;
	
	// Подготовим массив типов для проверки.
	МассивТипов = ПодготовитьМассивТиповДляПроверки();
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
	// Rarus-spb byse {
	// Установим ID из Заявок на договор
	Для Каждого СтрокаТЧ Из ГрафикНачислений Цикл
		Если ТипЗнч(СтрокаТЧ.ДокументПланирования) = Тип ("ДокументСсылка.рс_ЗаявкаНаДоговор") И ЗначениеЗаполнено(СтрокаТЧ.ДокументПланирования) Тогда
			СтрокаТЧ.Аналитика_4 = СтрокаТЧ.ДокументПланирования.ID;
		КонецЕсли;
	КонецЦикла;
	// Rarus-spb byse }
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		УстановитьСтатус();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив();
	
	Если ФормироватьДвижения
		ИЛИ НЕ ЗначениеЗаполнено(ПроектДоговора) Тогда
		ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	// Уберем проверку реквизита "Период", если это необходимо.
	Если ПроверитьТЧГрафикПлатежей() Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ГрафикПлатежей.Период"));
	КонецЕсли;
	
	// Установка настроек обязательности реквизитов.
	Если Метаданные().Реквизиты.Найти("ХозяйственнаяОперация") = Неопределено Тогда
		ХозяйственнаяОперация = Неопределено;	
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц Тогда
		НепроверяемыеРеквизиты.Добавить("Получатель");
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек, ХозяйственнаяОперация); 
	
КонецПроцедуры

Функция  ПроверитьТЧГрафикПлатежей()

	Результат = Ложь;
	
	Для Каждого Стр Из ГрафикПлатежей Цикл
		Если ЗначениеЗаполнено(Стр.Событие) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(Ложь, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	

	ИсточникПроводок = ОпределитьИсточникПроводок();
    // Документ по МСФО проводим только для некоторых видов операций.
	Если НЕ ПустаяСтрока(ИсточникПроводок) Тогда
	
		ПроверитьРавенстроСумм(СтруктураТаблиц);
	
	КонецЕсли; 
	
	ПроверкаЗаполнения(Отказ);
	
	Если Не Отказ Тогда
		
		// Получим курсы валют, неоходимые для выполнения пересчетов.
		ВидыКурсов = Новый Структура("Взаиморасчеты, Регл, Упр, Сценарий, Документ");
		СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, ИсточникПроводок, СтруктураКурсыВалют, Отказ, Заголовок);
		
		Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ мБылПроведен Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Организация);
			СтруктураПараметров.Вставить("ЦФО",ЦФО);		
			бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
			
		КонецЕсли; 
		
		УстановитьСтатус(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получает курсы валют необходимые при пересчетах для формирования движений.
// 
// Параметры:
//  ДокументОбъект  - ДокументОбъект.
// 
// Возвращаемое значение:
//   СтруктураКурсыВалют   - Структура.
//   ДатаКурсов - Дата.
//   ВидыКурсов - Структура.
// 
Функция ПолучитьКурсыВалют(ВидыКурсов, ДатаКурса)

	СтруктураКурсыВалют = Новый Структура;
	
	МетаданныеДокумента = Метаданные();
	
	// Курс документа.
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Документ") Тогда
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит("ВалютаДокумента",МетаданныеДокумента) 
			И бит_РаботаСМетаданными.ЕстьРеквизит("КурсДокумента",МетаданныеДокумента)
			И бит_РаботаСМетаданными.ЕстьРеквизит("КратностьДокумента",МетаданныеДокумента) Тогда
			
			СтрКурса = Новый Структура;
			СтрКурса.Вставить("Курс"     ,КурсДокумента);
			СтрКурса.Вставить("Кратность",КратностьДокумента);
			СтрКурса.Вставить("Валюта"   ,ВалютаДокумента);
			СтруктураКурсыВалют.Вставить("Документ",СтрКурса);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Курс упр. учета.
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Упр") Тогда	
		
		Валюта = Константы.бит_ВалютаУправленческогоУчета.Получить();
		СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта,ДатаКурса, "бит_КурсыСценариевПланирования", Сценарий);
		СтрКурса.Вставить("Валюта",Валюта);
		СтруктураКурсыВалют.Вставить("Упр",СтрКурса);
		
	КонецЕсли;
	
	// Курс сценария.
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Сценарий") Тогда
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит("Сценарий",МетаданныеДокумента) Тогда 
			
			Валюта = Сценарий.Валюта;
			СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта,ДатаКурса, "бит_КурсыСценариевПланирования", Сценарий);

			СтрКурса.Вставить("Валюта",Валюта);
			СтруктураКурсыВалют.Вставить("Сценарий",СтрКурса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Валюта регламентированного учета.
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Регл") Тогда
		
		СтрКурса = Новый Структура;
		СтрКурса.Вставить("Курс",1);
		СтрКурса.Вставить("Кратность",1);
		СтрКурса.Вставить("Валюта",Константы.ВалютаРегламентированногоУчета.Получить());
		СтруктураКурсыВалют.Вставить("Регл",СтрКурса);
	
	КонецЕсли;
	
	// Курс взаиморасчетов.
	
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Взаиморасчеты") Тогда
		СтрКурса = бит_КурсыВалют.ПолучитьКурсВзаиморасчетовПоДокументу(ЭтотОбъект,МетаданныеДокумента,ДатаКурса);
		СтруктураКурсыВалют.Вставить("Взаиморасчеты",СтрКурса);
	КонецЕсли; // Свойство("Взаиморасчеты").
	
	Возврат СтруктураКурсыВалют;

КонецФункции

// Функция готовит таблицу БДДС для проведения.
// 
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуГрафиковДоговоров(ТаблицаДанных)
	
	СтруктураКурсыВалют = бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария(ЭтотОбъект,Дата, Новый Структура("Документ, Регл, Упр, Сценарий"));
	
	// Получим таблицу периодов.
	КурсыПоПериодам = Неопределено;
	
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		
		ТаблицаПериодов = ТаблицаДанных.Скопировать();
		ТаблицаПериодов.Свернуть("Период");
		
		// Установим настройки для получения курсов по периодам.
		СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Сценарий,ВалютаДокумента);
		
		// Получим курсы по периодам.
		КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов,Сценарий,СтруктураПараметров);
		
	КонецЕсли;
	
	бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаДанных,КурсыПоПериодам,СтруктураКурсыВалют, "СуммаБезНДС");
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	Если НЕ Отказ Тогда
		
		// Очистим визы.
		бит_Визирование.ОчиститьВсеВизыБезусловно(Ссылка);
				
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	// Очистим табличную часть "ГрафикПлатежей".
	ГрафикПлатежей.Очистить();
	ГрафикПлатежейАктуализирован = Ложь;
	
	// Очистим табличную часть "ГрафикНачислений".
	//ОК Калинин М. 270813 очищать только ДокументПланирования,Аналитика_4
	//ГрафикНачислений.Очистить();
	ГрафикНачисленийАктуализирован = Ложь;
	таб_=ГрафикНачислений.Выгрузить();
	таб_.ЗаполнитьЗначения(Документы.рс_ЗаявкаНаДоговор.ПустаяСсылка(),"ДокументПланирования");
	таб_.ЗаполнитьЗначения(0,"Аналитика_4");
	// Ок Видяйкин В. 20170526 + (Реквизит "Аналитика_1" должен быть одного типа!)
	таб_.ЗаполнитьЗначения(Документы.бит_ФормаВводаБюджета.ПустаяСсылка(),"Аналитика_1");
	// Ок Видяйкин В. 20170526 -
	ГрафикНачислений.Загрузить(таб_);
	//ОК Калинин М.
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
			
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_ПроектДоговора") Тогда
		
		Если НЕ ДанныеЗаполнения.Проведен Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя создать документ ""Дополнительные условия по договору"" на основании НЕ проведенного проекта договора.'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		ЗаполнитьНаОснованииПроектаДоговора(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда 	
		Если ДанныеЗаполнения.Свойство("ДоговорКонтрагента") 
			И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
			ЗаполнитьПоДоговору(ДанныеЗаполнения.ДоговорКонтрагента);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли; 
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЭкспортныеПроцедурыИФункции

// Процедура устанавливает статус документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено) Экспорт
	
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
	
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
		
		Если вхРежимЗаписи = Неопределено Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			РежимЗаписи = вхРежимЗаписи;
		КонецЕсли;
		 
		// Вычислим переменные, необходимые для установки статуса.
	    ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);				
		
		// Определим статус.		
	    Статус = ОпределитьСтатус(мТекущийСтатус, ВсеВизыПолучены, ЕстьОтклонено, РежимЗаписи);
		
		// Если статус изменился - запишем его.
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,мТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				мТекущийСтатус 		  = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
			КонецЕсли; 	
			
		КонецЕсли;
	
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.				
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
			
        РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа.
//
// Параметры:
//  Нет.
//
Процедура ИзменениеВалюты() Экспорт
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
    
    КурсДокумента      = СтрКурса.Курс;
    КратностьДокумента = СтрКурса.Кратность;
    
КонецПроцедуры

// Процедура расчитывает суммму НДС.
//
// Параметры:
//  Контейнер - СтрокаТабличнойЧасти, ЭтотОбъект.
//
Процедура РассчитатьСуммуНДС(Контейнер, РеквизитСумма = "Сумма", РеквизитНДС = "НДС", пСуммаВключаетНДС = Истина, РеквизитСтавка="СтавкаНДС") Экспорт

    Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Контейнер[РеквизитСтавка]) Тогда
		Контейнер[РеквизитСтавка] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контейнер.СтатьяОборотов, "СтавкаНДС");
	КонецЕсли; 
	
	Контейнер[РеквизитНДС] = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер[РеквизитСумма]
        											   ,Истина
        											   ,пСуммаВключаетНДС
        											   ,бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Контейнер[РеквизитСтавка]));
													   
    Если РеквизитСумма = "Сумма" Тогда
		Контейнер.СуммаБезНДС = Контейнер.Сумма - Контейнер[РеквизитНДС];
	ИначеЕсли РеквизитСумма = "СуммаБезНДС" Тогда
		Контейнер.Сумма = Контейнер.СуммаБезНДС + Контейнер[РеквизитНДС];	
	КонецЕсли; 												
		
КонецПроцедуры

#КонецОбласти

#Область ФормированиеГрафикаПлатежейИГрафикаНачислений

// Формирует структуру значений параметров графика.
// Без привязки имени элемента структуры к конкретному графику.
//
Функция ПолучитьЗначенияРеквизитовШапкиТаблицы(ИмяГрафика) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	
	Если ИмяГрафика = "ГрафикПлатежей" Тогда
		СтруктураРеквизитов.Вставить("СтатьяОборотов", СтатьяОборотов);
		СтруктураРеквизитов.Вставить("Периодичность", Периодичность);
		СтруктураРеквизитов.Вставить("ДатаНачала", ДатаНачала);
		СтруктураРеквизитов.Вставить("ДатаОкончания", ДатаОкончания);
		СтруктураРеквизитов.Вставить("СуммаПриход", СуммаПриход);
		СтруктураРеквизитов.Вставить("СуммаНДСПриход", СуммаНДСПриход);
		СтруктураРеквизитов.Вставить("СуммаРасход", СуммаРасход);
		СтруктураРеквизитов.Вставить("СуммаНДСРасход", СуммаНДСРасход);
		СтруктураРеквизитов.Вставить("СтавкаНДС", СтавкаНДС);
	Иначе
		СтруктураРеквизитов.Вставить("СтатьяОборотов", СтатьяОборотовНачисления);
		СтруктураРеквизитов.Вставить("Периодичность", ПериодичностьНачисления);
		СтруктураРеквизитов.Вставить("ДатаНачала", ДатаНачалаНачисления);
		СтруктураРеквизитов.Вставить("ДатаОкончания", ДатаОкончанияНачисления);
		СтруктураРеквизитов.Вставить("СуммаПриход", СуммаПриходНачисления);
		СтруктураРеквизитов.Вставить("СуммаНДСПриход", СуммаНДСПриходНачисления);
		СтруктураРеквизитов.Вставить("СуммаРасход", СуммаРасходНачисления);
		СтруктураРеквизитов.Вставить("СуммаНДСРасход", СуммаНДСРасходНачисления);
		СтруктураРеквизитов.Вставить("СтавкаНДС", СтавкаНДСНачисления);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Переносит значения параметров графика из структуры в объект.
//
Процедура ИзменитьЗначенияРеквизитовШапкиТаблицы(СтруктураРеквизитов, ИмяГрафика) Экспорт
	
	Если ИмяГрафика = "ГрафикПлатежей" Тогда
		СтатьяОборотов = СтруктураРеквизитов.СтатьяОборотов;
		Периодичность = СтруктураРеквизитов.Периодичность;
		ДатаНачала = СтруктураРеквизитов.ДатаНачала;
		ДатаОкончания = СтруктураРеквизитов.ДатаОкончания;
		СуммаПриход = СтруктураРеквизитов.СуммаПриход;
		СуммаНДСПриход = СтруктураРеквизитов.СуммаНДСПриход;
		СуммаРасход = СтруктураРеквизитов.СуммаРасход;
		СуммаНДСРасход = СтруктураРеквизитов.СуммаНДСРасход;
		СтавкаНДС = СтруктураРеквизитов.СтавкаНДС;
	Иначе
		СтатьяОборотовНачисления = СтруктураРеквизитов.СтатьяОборотов;
		ПериодичностьНачисления = СтруктураРеквизитов.Периодичность;
		ДатаНачалаНачисления = СтруктураРеквизитов.ДатаНачала;
		ДатаОкончанияНачисления = СтруктураРеквизитов.ДатаОкончания;
		СуммаПриходНачисления = СтруктураРеквизитов.СуммаПриход;
		СуммаНДСПриходНачисления = СтруктураРеквизитов.СуммаНДСПриход;
		СуммаРасходНачисления = СтруктураРеквизитов.СуммаРасход;
		СуммаНДСРасходНачисления = СтруктураРеквизитов.СуммаНДСРасход;
		СтавкаНДСНачисления = СтруктураРеквизитов.СтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру значений для заполнения строк графика платежей.
//
// Параметры:
//   Нет.
//  
// Возвращаемое значение:
//   Структура.
//
Функция СформироватьСтруктуруДанныхГрафика(ИмяГрафика) Экспорт
	
	СтруктураДанных = Новый Структура;
	
	Если ИмяГрафика = "ГрафикПлатежей" Тогда
		
		Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;	
		КонецЕсли; 
		
		СтруктураДанных.Вставить("СтатьяОборотов", СтатьяОборотов);
		СтруктураДанных.Вставить("СтавкаНДС"     , СтавкаНДС);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(СтавкаНДСНачисления) Тогда
			СтавкаНДСНачисления = Перечисления.СтавкиНДС.БезНДС;	
		КонецЕсли;
		
		СтруктураДанных.Вставить("СтатьяОборотовНачисления", СтатьяОборотовНачисления);
		СтруктураДанных.Вставить("СтавкаНДС"     , СтавкаНДСНачисления);
		
	КонецЕсли;

    СтруктураДанных.Вставить("ЦФО"                 , ЦФО);

	Возврат СтруктураДанных;
	
КонецФункции

// Процедура формирует график.
//
Процедура СформироватьГрафик(ИмяГрафика, СпособЗаполнения="Пропорционально", ЗаменитьГрафик=Истина, СтруктураПараметров=Неопределено) Экспорт
	
	РеквизитыШапкиТаблицы = ПолучитьЗначенияРеквизитовШапкиТаблицы(ИмяГрафика);
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	ЗначСтатьяОборотов = ?(СтруктураПараметров.Свойство("СтатьяОборотов"), СтруктураПараметров.СтатьяОборотов, Неопределено);
	ЗначРасходДоход = ?(СтруктураПараметров.Свойство("РасходДоход"), СтруктураПараметров.РасходДоход, Неопределено);
	
	Если НЕ ЗаменитьГрафик Тогда
		// Если производится  добавление данных, а не замена - сохраним текущие строки.
		СохраненныеСтроки = ЭтотОбъект[ИмяГрафика].Выгрузить();	
	КонецЕсли;
	
	// Очистим график платежей.
	ЭтотОбъект[ИмяГрафика].Очистить();
	
	Если НЕ ЗначениеЗаполнено(РеквизитыШапкиТаблицы.Периодичность) Тогда
		ТекстСообщения = НСтр("ru='Не заполнено значение реквизита ""Периодичность"".'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		 
		Возврат;
	КонецЕсли;
	
	// Получим массив периодов.
	МассивПериодов = Документы.бит_ДополнительныеУсловияПоДоговору.ПолучитьПериоды(
		РеквизитыШапкиТаблицы.Периодичность, РеквизитыШапкиТаблицы.ДатаНачала, РеквизитыШапкиТаблицы.ДатаОкончания);
	
	КоличествоПериодов = МассивПериодов.Количество();
	
	Если КоличествоПериодов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем структуру значений для заполнения строк графика.
	СтруктураДанных = СформироватьСтруктуруДанныхГрафика(ИмяГрафика);
	
	// При необходимости переопределим некоторые значения.
	Если НЕ ЗначСтатьяОборотов = Неопределено Тогда
		Если ИмяГрафика = "ГрафикНачислений" Тогда
			СтруктураДанных.Вставить("СтатьяОборотовНачисления", ЗначСтатьяОборотов);
		Иначе
			СтруктураДанных.Вставить("СтатьяОборотов", ЗначСтатьяОборотов);
		КонецЕсли;
	КонецЕсли;
	
	СтатьяИзмерения = ?(ИмяГрафика = "ГрафикНачислений", СтруктураДанных.СтатьяОборотовНачисления, СтруктураДанных.СтатьяОборотов);
	Если СтатьяИзмерения["Учет_Проект"] Тогда
		СтруктураДанных.Вставить("Проект", Проект);
	КонецЕсли;
	Если СтатьяИзмерения["Учет_НоменклатурнаяГруппа"] Тогда
		СтруктураДанных.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	КонецЕсли;
	
	МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для н = 1 По МаксКолвоДопАналитик Цикл
		Если СтатьяИзмерения["Учет_Аналитика_"+н] Тогда			
			СтруктураДанных.Вставить("Аналитика_"+н, ЭтотОбъект["Аналитика_"+н]);
		КонецЕсли;
	КонецЦикла;
	
	// Если сумма прихода не равна нулю, тогда сформируем график прихода.
	Если (ЗначРасходДоход = Неопределено ИЛИ ЗначРасходДоход = Перечисления.бит_РасходДоход.Поступление) 
		И НЕ РеквизитыШапкиТаблицы.СуммаПриход = 0 Тогда
		
		СтруктураДанных.Вставить("РасходДоход", Перечисления.бит_РасходДоход.Поступление);
		СтруктураДанных.Вставить("Сумма"	  , РеквизитыШапкиТаблицы.СуммаПриход);
		СтруктураДанных.Вставить("НДС"  	  , РеквизитыШапкиТаблицы.СуммаНДСПриход);
		
		// Заполним график прихода.
		Для Ном = 1 По КоличествоПериодов Цикл
			
			НовСтрока = ЭтотОбъект[ИмяГрафика].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтруктураДанных);
			НовСтрока.Период = МассивПериодов[Ном - 1];
			Если СтруктураПараметров.Свойство("НазначениеПлатежа") Тогда
				НовСтрока.НазначениеПлатежа = СтруктураПараметров.НазначениеПлатежа;
			КонецЕсли;
			
		КонецЦикла;
		
		// Распределить суммы документа по графику.
		РаспределитьСуммыДокументаПоГрафику(ИмяГрафика, РеквизитыШапкиТаблицы, Перечисления.бит_РасходДоход.Поступление, СпособЗаполнения);
		
	КонецЕсли;
	
	// Если сумма расхода не равна нулю, тогда сформируем график расхода.
	Если (ЗначРасходДоход = Неопределено ИЛИ ЗначРасходДоход = Перечисления.бит_РасходДоход.Расходование) 
		И РеквизитыШапкиТаблицы.СуммаРасход <> 0 Тогда
		
		СтруктураДанных.Вставить("РасходДоход", Перечисления.бит_РасходДоход.Расходование);
		СтруктураДанных.Вставить("Сумма"	  , РеквизитыШапкиТаблицы.СуммаРасход);
		СтруктураДанных.Вставить("НДС"  	  , РеквизитыШапкиТаблицы.СуммаНДСРасход);
		
		// Заполним график расхода.
		Для Ном = 1 По КоличествоПериодов Цикл
			
			НовСтрока = ЭтотОбъект[ИмяГрафика].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтруктураДанных);
			НовСтрока.Период = МассивПериодов[Ном - 1];
			Если СтруктураПараметров.Свойство("НазначениеПлатежа") Тогда
				НовСтрока.НазначениеПлатежа = СтруктураПараметров.НазначениеПлатежа;
			КонецЕсли;

		КонецЦикла;
		
		// Распределить суммы документа по графику начислений.
		РаспределитьСуммыДокументаПоГрафику(ИмяГрафика, РеквизитыШапкиТаблицы, Перечисления.бит_РасходДоход.Расходование, СпособЗаполнения);
		
	КонецЕсли;
	
	// Добавим ранее сохраненные строки.
	Если Не ЗаменитьГрафик Тогда	
		Для Каждого СтрокаСохр Из СохраненныеСтроки Цикл
			СтруктураОтбора = ПодготовитьСтруктуруОтбора();
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаСохр);
			
			Если ИмяГрафика = "ГрафикПлатежей" Тогда
				СтруктураОтбора.Вставить("СтатьяОборотов", СтрокаСохр.СтатьяОборотов);
			Иначе	
				СтруктураОтбора.Вставить("СтатьяОборотовНачисления", СтрокаСохр.СтатьяОборотовНачисления);
			КонецЕсли;
			
			НайденныеСтроки = ЭтотОбъект[ИмяГрафика].НайтиСтроки(СтруктураОтбора); 
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НовСтрока = ЭтотОбъект[ИмяГрафика].Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаСохр);
			Иначе
				НовСтрока = НайденныеСтроки[0];
				НовСтрока.Сумма = НовСтрока.Сумма + СтрокаСохр.Сумма;
				РассчитатьСуммуНДС(НовСтрока);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	ЭтотОбъект[ИмяГрафика].Сортировать("Период");
	
	// Заменим период в шапке на актуальный.
	Если НЕ ЭтотОбъект[ИмяГрафика].Количество() = 0 Тогда
		НомерПоследнейСтроки = ЭтотОбъект[ИмяГрафика].Количество()-1;
		
		РеквизитыШапкиТаблицы.ДатаНачала    = ЭтотОбъект[ИмяГрафика][0].Период;
		РеквизитыШапкиТаблицы.ДатаОкончания = ЭтотОбъект[ИмяГрафика][НомерПоследнейСтроки].Период;
	КонецЕсли;
	
	ИзменитьЗначенияРеквизитовШапкиТаблицы(РеквизитыШапкиТаблицы, ИмяГрафика);
	
КонецПроцедуры

// Процедура распределяет суммы документа по графику начислений.
//
// Параметры:
//  Направление - ПеречислениеСсылка.бит_РасходДоход.
//  ВидРасчета  - Строка.
//
Процедура РаспределитьСуммыДокументаПоГрафику(ИмяГрафика, РеквизитыШапкиТаблицы, Направление, СпособЗаполнения = "Пропорционально") Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РасходДоход", Направление);
	
	СтрокиДляИзменения = ЭтотОбъект[ИмяГрафика].НайтиСтроки(СтруктураОтбора);
	
	Если СтрокиДляИзменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСумм = Новый Массив;
	МассивСуммНДС = Новый Массив;
		
	Если Направление = Перечисления.бит_РасходДоход.Расходование Тогда
		СуммаДокумента = РеквизитыШапкиТаблицы.СуммаРасход;
		РассчитатьСуммуНДС(РеквизитыШапкиТаблицы, "СуммаРасход", "СуммаНДСРасход", , "СтавкаНДС");
		СуммаНДС = РеквизитыШапкиТаблицы.СуммаНДСРасход;
	Иначе
		СуммаДокумента = РеквизитыШапкиТаблицы.СуммаПриход;
		РассчитатьСуммуНДС(РеквизитыШапкиТаблицы, "СуммаПриход", "СуммаНДСПриход", , "СтавкаНДС");
		СуммаНДС = РеквизитыШапкиТаблицы.СуммаНДСПриход;
	КонецЕсли;
	
	Если СуммаДокумента > 0 Тогда
			
		Если СпособЗаполнения = "Пропорционально" 
			ИЛИ СпособЗаполнения = "Периодическое заполнение"
			ИЛИ СпособЗаполнения = "Распределение" Тогда
			
			Кол_Во = СтрокиДляИзменения.Количество();
			
			Для Ном = 1 По Кол_Во Цикл
				МассивСумм.Добавить(1);
				МассивСуммНДС.Добавить(1);
			КонецЦикла;
				
		ИначеЕсли СпособЗаполнения = "ПоКоэффициенту" Тогда
			
			Для Каждого ТекСтрока Из СтрокиДляИзменения Цикл
				МассивСумм.Добавить(ТекСтрока.КоэффициентРаспределения);
				МассивСуммНДС.Добавить(ТекСтрока.КоэффициентРаспределения);
			КонецЦикла;
			
			// Проверим наличие хоть одной суммы в массиве.
			// Если в массиве не указана ни одна сумма. 
			// Тогда заполним суммы по умолчанию значением 1.
			// Для возможности равномерного распределения.
			// Суммы документа по строкам графика.
			ПроверитьНаличиеСуммВМассиве_ПриОтсутствииЗаполнить(МассивСумм);
			ПроверитьНаличиеСуммВМассиве_ПриОтсутствииЗаполнить(МассивСуммНДС);
			
		КонецЕсли;
		 
		СуммаДляРасчета = ?(СпособЗаполнения = "Периодическое заполнение", 
						СуммаДокумента * МассивСумм.Количество(),
						СуммаДокумента);
		СуммаДляРасчетаНДС = ?(СпособЗаполнения = "Периодическое заполнение", 
						СуммаНДС * МассивСуммНДС.Количество(),
						СуммаНДС);
						
		МассивСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаДляРасчета, МассивСумм);
		МассивСуммНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаДляРасчетаНДС, МассивСуммНДС);
		
		Счетчик = 0;
		// Запишем рассчитанные суммы.
		Для Каждого ТекСтрока Из СтрокиДляИзменения Цикл
			
			ТекСтрока.Сумма = МассивСумм[Счетчик];
			// Изменение кода. Начало. 28.02.2018{{
			Если МассивСуммНДС=Неопределено Тогда
				ТекСтрока.НДС = 0;
			Иначе
				ТекСтрока.НДС = МассивСуммНДС[Счетчик];
			КонецЕсли; 
			// Изменение кода. Конец. 28.02.2018}}
			ТекСтрока.СуммаБезНДС = ТекСтрока.Сумма - ТекСтрока.НДС;
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
	КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументовПланирования

// Процедура выполняет запись/проведение/отмену проведения документа.
// 
// Параметры:
//  ТекущийОбъект  - ДокументОбъект,СправочникОбъект.
//  РежимЗаписи    - РежимЗаписиДокумента.
//  Заголовок      - Строка.
//  РежимСообщений - Строка: "Нет","Все","Ошибки".
// 	ЗаписыватьПередПроведением - булево.
// 	ОшибкиВЖурналРегистрации - булево.
// 
// Возвращаемое значение:
//   Булево - действие выполнено.
// 
Функция ЗаписатьПровестиДокумент(ТекущийОбъект, РежимЗаписи, Заголовок = "", РежимСообщений = "Все", ЗаписыватьПередПроведением=Истина, ОшибкиВЖурналРегистрации = Ложь) Экспорт

	ДействиеВыполнено  = Ложь;
	
	ВыводитьОшибки     = РежимСообщений = "Все" ИЛИ РежимСообщений = "Ошибки";
	ВыводитьИнформацию = РежимСообщений = "Все";
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись 
		ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Проведение И ЗаписыватьПередПроведением) Тогда
		
		Попытка
			
			ТекущийОбъект.Записать(РежимЗаписиДокумента.Запись);
			ДействиеВыполнено = Истина;
			Если ВыводитьИнформацию Тогда
				ТекстСообщения = Нстр("ru = 'Записан документ ""%1"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущийОбъект.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
			
		Исключение
			
			ДействиеВыполнено = Ложь;						
			Если ВыводитьОшибки Тогда
				ТекстСообщения = Нстр("ru = 'Не удалось записать документ ""%1"".
											|%2'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущийОбъект.Ссылка, ОписаниеОшибки());
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
			
			Если ОшибкиВЖурналРегистрации Тогда
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'БИТ.ОшибкаЗаписиДокумента'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Информация,,,ТекстСообщения); 
				
			КонецЕсли; 
			
		КонецПопытки;
		
	КонецЕсли; 
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Попытка
			
			ТекущийОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДействиеВыполнено = Истина;
			Если ВыводитьИнформацию Тогда
				ТекстСообщения = Нстр("ru = 'Проведен документ ""%1"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущийОбъект.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
			
		Исключение
			
			ДействиеВыполнено = Ложь;						
			Если ВыводитьОшибки Тогда
				ТекстСообщения = Нстр("ru = 'Не удалось провести документ ""%1"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущийОбъект.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
			
			Если ОшибкиВЖурналРегистрации Тогда
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'БИТ.ОшибкаПроведенияДокумента'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Информация,,,ТекстСообщения); 
				
			КонецЕсли; 
			
		КонецПопытки;
		
	КонецЕсли; 


	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Попытка
			
			ТекущийОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДействиеВыполнено = Истина;
			Если ВыводитьИнформацию Тогда
				ТекстСообщения = Нстр("ru = 'Отменено проведение документа ""%1"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущийОбъект.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);				
			КонецЕсли; 	
			
		Исключение
			
			ДействиеВыполнено = Ложь;						
			Если ВыводитьОшибки Тогда
				ТекстСообщения = Нстр("ru = 'Не удалось отменить проведение документа ""%1"".'") + Символы.ПС + ОписаниеОшибки();
				ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущийОбъект.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
			
		КонецПопытки;
		
	КонецЕсли; 
	
	Возврат ДействиеВыполнено;
	
КонецФункции

// Функция формирует дерево документов планирования.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	ДеревоДокументов - дерево значений.	
//
Функция ДокументыПланирования() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования КАК ДокументПланированияСсылка,
	|	ТИПЗНАЧЕНИЯ(бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования) КАК ТипДокумента
	|ИЗ
	|	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикПлатежей КАК бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей
	|ГДЕ
	|	бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.Ссылка = &ТекущийДокумент
	|	И НЕ бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования В (&МассивПустыхСсылок)
	//ОК Довбешка Т. 09.12.2013
	|	И НЕ бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования.ПометкаУдаления
	//ОК Довбешка Т.	
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования,
	|	ТИПЗНАЧЕНИЯ(бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.ДокументПланирования,
	|	ТИПЗНАЧЕНИЯ(бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.ДокументПланирования)
	|ИЗ
	|	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикНачислений КАК бит_ДополнительныеУсловияПоДоговоруГрафикНачислений
	|ГДЕ
	|	бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.Ссылка = &ТекущийДокумент
	|	И НЕ бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.ДокументПланирования В (&МассивПустыхСсылок)
	//ОК Довбешка Т. 09.12.2013
	|	И НЕ бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.ДокументПланирования.ПометкаУдаления
	//ОК Довбешка Т.	
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.ДокументПланирования,
	|	ТИПЗНАЧЕНИЯ(бит_ДополнительныеУсловияПоДоговоруГрафикНачислений.ДокументПланирования)
	|ИТОГИ ПО
	|	ТипДокумента";
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	
	МассивПустыхСсылок = Новый Массив;
	МассивПустыхСсылок.Добавить(Неопределено);
	
	МетаОбъектТабЧасти = Метаданные().ТабличныеЧасти;
	
	МетаРеквизитыПлатежей = МетаОбъектТабЧасти.ГрафикПлатежей.Реквизиты; 
	Для Каждого ТекущийТип Из МетаРеквизитыПлатежей.ДокументПланирования.Тип.Типы() Цикл
		МассивТипов.Добавить(ТекущийТип);
		
		Массив = Новый Массив;
		Массив.Добавить(ТекущийТип);
		ОписаниеТипа = Новый ОписаниеТипов(Массив);
		
		МассивПустыхСсылок.Добавить(ОписаниеТипа.ПривестиЗначение());
	КонецЦикла;
	
	МетаРеквизитыНачислений = МетаОбъектТабЧасти.ГрафикНачислений.Реквизиты; 
	Для Каждого ТекущийТип Из МетаРеквизитыНачислений.ДокументПланирования.Тип.Типы() Цикл
		МассивТипов.Добавить(ТекущийТип);
		
		Массив = Новый Массив;
		Массив.Добавить(ТекущийТип);
		ОписаниеТипа = Новый ОписаниеТипов(Массив);
		
		МассивПустыхСсылок.Добавить(ОписаниеТипа.ПривестиЗначение());
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТекущийДокумент"	  , Ссылка);
	Запрос.УстановитьПараметр("МассивПустыхСсылок", МассивПустыхСсылок);
	
	Результат = Запрос.Выполнить();
	
	ДеревоДокументов = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоДокументов.Колонки.Добавить("Выполнять",            Новый ОписаниеТипов("Число"));
	ДеревоДокументов.Колонки.Добавить("ДокументПланирования", Новый ОписаниеТипов(МассивТипов));
	ДеревоДокументов.Колонки.Добавить("КартинкаПроведен");
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого ТекущийУзел Из ДеревоДокументов.Строки Цикл
		// Для ролей ИсполнительКазначейства и ИсполнительПоЗаявкамНаЗатраты.
		// Могут отображаться битые ссылки в документах планирования.
		ОбъектМета = Метаданные.НайтиПоТипу(ТекущийУзел.ТипДокумента);
		Если НЕ ОбъектМета = Неопределено
			И НЕ ПравоДоступа("Просмотр", ОбъектМета) Тогда
			СтрокиКУдалению.Добавить(ТекущийУзел);
			Продолжить;
		КонецЕсли;
		
		ТекущийУзел.ДокументПланирования = ТекущийУзел.ТипДокумента;
		Для Каждого ТекущаяСтрока Из ТекущийУзел.Строки Цикл
			ТекущаяСтрока.ДокументПланирования = ТекущаяСтрока.ДокументПланированияСсылка;		
			ДокументПланированияПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.ДокументПланирования,"Проведен");
			Если ДокументПланированияПроведен Тогда 	
				ТекущаяСтрока.КартинкаПроведен = БиблиотекаКартинок.ДокументПроведенКоннекторНиз;
			Иначе
				ТекущаяСтрока.КартинкаПроведен = БиблиотекаКартинок.ДокументЗаписанКоннекторНиз;
			КонецЕсли; 		
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СтрокиКУдалению Цикл
		ДеревоДокументов.Строки.Удалить(ТекСтрока);
	КонецЦикла;
	
	Возврат ДеревоДокументов;
	
КонецФункции

// Функция проверяет заполненность реквизитов документа обязательных для создания документов планирования. 
//
// Параметры:
//  СерияДокументов - Булево, признак создания серии (пакета) документов.
//
// Возвращаемое значение:
//  ЗначенияЗаполнены - Булево.
//
Функция РеквизитыЗаполненыДляСозданияДокументовПланирования(ИмяГрафика, ВидДокумента, СтрокиКОбработке, РежимСообщений) Экспорт
    
    Отказ = Ложь;
	
	Заголовок = НСтр("ru = '«%1» - создание документов планирования:'");
    Заголовок = СтрШаблон(Заголовок, Строка(Ссылка));
	
	СтруктураОбязательныхПолей = Новый Структура;
    СтруктураОбязательныхПолей.Вставить("Организация");
    СтруктураОбязательныхПолей.Вставить("ВалютаДокумента");
	СтруктураОбязательныхПолей.Вставить("КурсДокумента");
	СтруктураОбязательныхПолей.Вставить("КратностьДокумента");
	
	ОтборСтрокРасхода = Новый Структура("РасходДоход", Перечисления.бит_РасходДоход.Расходование);
	ЗаписиРасходаЕсть = Не ЭтотОбъект[ИмяГрафика].НайтиСтроки(ОтборСтрокРасхода).Количество() = 0;
	
	// Если это поступление и вид договора контрагента "Прочее".
	Если ИмяГрафика = "ГрафикПлатежей" Тогда
		
		Если ВидДокумента = "бит_ЗаявкаНаРасходованиеСредств" Тогда
			СтруктураОбязательныхПолей.Вставить("Контрагент");
			СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		КонецЕсли;
		
		Если РасходДоход = Перечисления.бит_РасходДоход.Поступление 
			И НЕ бит_ОбщегоНазначения.ЭтоСемействоERP()
			И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее
			И ЗаписиРасходаЕсть Тогда
			СтруктураОбязательныхПолей.Вставить("ВидОперацииРасходование");
		КонецЕсли;
	КонецЕсли;
    
    бит_РаботаСМетаданными.ПроверитьЗаполнениеШапки(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Заполним массив обязательных полей в строках для создания документов планирования.
	СписокПолейДляПланирования = Новый Структура;
	СписокПолейДляПланирования.Вставить("Период"     , НСтр("ru = 'Период'"));
	СписокПолейДляПланирования.Вставить("РасходДоход", НСтр("ru = 'Направление'"));
	СписокПолейДляПланирования.Вставить("ЦФО"        , НСтр("ru = 'ЦФО'"));
	СписокПолейДляПланирования.Вставить("Сумма"      , НСтр("ru = 'Сумма'"));
	СписокПолейДляПланирования.Вставить("СтавкаНДС"  , НСтр("ru = 'Ставка НДС'"));
	
	Если ИмяГрафика = "ГрафикНачислений" Тогда
		СписокПолейДляПланирования.Вставить("СтатьяОборотовНачисления", НСтр("ru = 'Статья оборотов'"));
	Иначе
		СписокПолейДляПланирования.Вставить("СтатьяОборотов", НСтр("ru = 'Статья оборотов'"));
	КонецЕсли;	

	// Добавим обязательные измерения в список полей для планирования.
	Для каждого КлючИЗначение Из мНастройкиИзмерений Цикл
		
		ИмяИзмерения = КлючИЗначение.Ключ;
		Настройка    = КлючИЗначение.Значение;
		
		Если Настройка.Обязательное Тогда
			СписокПолейДляПланирования.Вставить(ИмяИзмерения, Настройка.Синоним);	
		КонецЕсли; 
		
	КонецЦикла;

	Для Каждого ТекущаяСтрока Из СтрокиКОбработке Цикл
		
		Если НЕ ЗначенияВлияющиеНаФормированиеДокументаПланированияЗаполнены(ИмяГрафика, СписокПолейДляПланирования, ТекущаяСтрока, РежимСообщений) Тогда
			Отказ = Истина;
		КонецЕсли;	
		
	КонецЦикла;
	
    ЗначенияЗаполнены = Не Отказ;
    
    Возврат ЗначенияЗаполнены;
    
КонецФункции

// Процедура создает документы планирования по графику платежей.
//
// Параметры:
//  РежимЗаписи    - РежимЗаписиДокумента.
//  РежимСообщений - Строка: "Нет", "Все", "Ошибки".
//
Процедура СоздатьДокументыПланирования(ИмяГрафика, МассивСтрок, ВидДокументаПланирования, РежимЗаписи, РежимСообщений) Экспорт
    
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаГрафик = ЭтотОбъект[ИмяГрафика].ВыгрузитьКолонки();
	
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
		НоваяСтрока = ТаблицаГрафик.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	КонецЦикла;
	
	НайденнаяКолонка = ТаблицаГрафик.Колонки.Найти("СтатьяОборотовНачисления");
	Если НЕ НайденнаяКолонка = Неопределено Тогда
		НайденнаяКолонка.Имя = "СтатьяОборотов";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыбранныеСтроки", ТаблицаГрафик);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	// Строки с одним периодом будем оформлять одним документом планирования.
	ТекстЗапроса = 
    "ВЫБРАТЬ
    |	ВыбранныеСтроки.НомерСтроки КАК НомерСтроки,
    |	ВыбранныеСтроки.Период КАК Период,
    |	ВыбранныеСтроки.РасходДоход КАК РасходДоход,
    |	ВыбранныеСтроки.ЦФО КАК ЦФО,
    |	ВыбранныеСтроки.СтатьяОборотов КАК СтатьяОборотов,
    |	ВыбранныеСтроки.Проект КАК Проект,
    |	ВыбранныеСтроки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
    |	ВыбранныеСтроки.Аналитика_1 КАК Аналитика_1,
    |	ВыбранныеСтроки.Аналитика_2 КАК Аналитика_2,
    |	ВыбранныеСтроки.Аналитика_3 КАК Аналитика_3,
    |	ВыбранныеСтроки.Аналитика_4 КАК Аналитика_4,
    |	ВыбранныеСтроки.Аналитика_5 КАК Аналитика_5,
    |	ВыбранныеСтроки.Аналитика_6 КАК Аналитика_6,
    |	ВыбранныеСтроки.Аналитика_7 КАК Аналитика_7,
    |	ВыбранныеСтроки.Сумма КАК Сумма,
    |	ВыбранныеСтроки.СтавкаНДС КАК СтавкаНДС,
    |	ВыбранныеСтроки.НДС КАК НДС,
    |	ВыбранныеСтроки.ДокументПланирования КАК ДокументПланирования,
    |	ВыбранныеСтроки.НазначениеПлатежа КАК НазначениеПлатежа
    |ПОМЕСТИТЬ ВыбранныеСтроки
    |ИЗ
    |	&ВыбранныеСтроки КАК ВыбранныеСтроки
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТаблицаГрафик.НомерСтроки КАК НомерСтроки,
    |	ВЫБОР
    |		КОГДА ТаблицаГрафик.Период < &ТекущаяДата
    |			ТОГДА &ТекущаяДата
    |		ИНАЧЕ ТаблицаГрафик.Период
    |	КОНЕЦ КАК Период,
    |	ТаблицаГрафик.РасходДоход КАК РасходДоход,
    |	ТаблицаГрафик.ЦФО КАК ЦФО,
    |	ТаблицаГрафик.СтатьяОборотов КАК СтатьяОборотов,
    |	ТаблицаГрафик.Проект КАК Проект,
    |	ТаблицаГрафик.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
    |	ТаблицаГрафик.Аналитика_1 КАК Аналитика_1,
    |	ТаблицаГрафик.Аналитика_2 КАК Аналитика_2,
    |	ТаблицаГрафик.Аналитика_3 КАК Аналитика_3,
    |	ТаблицаГрафик.Аналитика_4 КАК Аналитика_4,
    |	ТаблицаГрафик.Аналитика_5 КАК Аналитика_5,
    |	ТаблицаГрафик.Аналитика_6 КАК Аналитика_6,
    |	ТаблицаГрафик.Аналитика_7 КАК Аналитика_7,
    |	ТаблицаГрафик.Сумма КАК Сумма,
    |	ТаблицаГрафик.СтавкаНДС КАК СтавкаНДС,
    |	ТаблицаГрафик.НДС КАК НДС,
    |	ТаблицаГрафик.ДокументПланирования КАК ДокументПланирования,
    |	ТаблицаГрафик.НазначениеПлатежа КАК НазначениеПлатежа
    |ИЗ
    |	ВыбранныеСтроки КАК ТаблицаГрафик
    |
    |УПОРЯДОЧИТЬ ПО
    |	НомерСтроки
    |ИТОГИ ПО
    |	&СтрИтоги
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |УНИЧТОЖИТЬ ВыбранныеСтроки";
	
	Если НеОбъединятьДокументыПоДате И ИмяГрафика = "ГрафикПлатежей" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрИтоги", "РасходДоход");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрИтоги", "РасходДоход, Период");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
    РезультатЗапроса = Запрос.Выполнить();
	
	// Получим структуру значений для заполнения шапки документов планирования.
	СтруктураЗначений = ЗначенияДляЗаполненияШапкиДокументовПланирования(ИмяГрафика);
	
	СтруктураЗначений.Вставить("ВидДокументаПланирования", ВидДокументаПланирования);
	
	ВыборкаПоНаправлению = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РасходДоход");
    
	Пока ВыборкаПоНаправлению.Следующий() Цикл
		
		Если НеОбъединятьДокументыПоДате И ИмяГрафика = "ГрафикПлатежей" Тогда
			
			ВыборкаСтрок = ВыборкаПоНаправлению.Выбрать();
						
			Пока ВыборкаСтрок.Следующий() Цикл
				
				МассивСтрокДляДокумента = Новый Массив;

				// Если не указан документ планирования и заполнены значения.
				Если Не ЗначениеЗаполнено(ВыборкаСтрок.ДокументПланирования) Тогда
					
					ИндексСтроки = ВыборкаСтрок.НомерСтроки - 1;
					МассивСтрокДляДокумента.Добавить(ЭтотОбъект[ИмяГрафика][ИндексСтроки]);
					
				КонецЕсли;
				
				СтруктураЗначений.Вставить("ПараметрРасходДоход", ВыборкаСтрок.РасходДоход);
				СтруктураЗначений.Вставить("ПараметрПериод", ВыборкаСтрок.Период);
				
				// Создадим документ планирования.
				СоздатьДокументПланирования(МассивСтрокДляДокумента, СтруктураЗначений, РежимЗаписи, РежимСообщений);

			КонецЦикла;
			
		Иначе
			
			ВыборкаПоПериоду = ВыборкаПоНаправлению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
			
			Пока ВыборкаПоПериоду.Следующий() Цикл
				
				ВыборкаСтрок = ВыборкаПоПериоду.Выбрать();
				
				МассивСтрокДляДокумента = Новый Массив;
				
				Пока ВыборкаСтрок.Следующий() Цикл
					
					// Если не указан документ планирования и заполнены значения.
					Если Не ЗначениеЗаполнено(ВыборкаСтрок.ДокументПланирования) Тогда
						
						ИндексСтроки = ВыборкаСтрок.НомерСтроки - 1;
						МассивСтрокДляДокумента.Добавить(ЭтотОбъект[ИмяГрафика][ИндексСтроки]);
						
					КонецЕсли;
					
				КонецЦикла;
				
				СтруктураЗначений.Вставить("ПараметрРасходДоход", ВыборкаПоПериоду.РасходДоход);
				СтруктураЗначений.Вставить("ПараметрПериод", ВыборкаПоПериоду.Период);
				
				// Создадим документ планирования.
				СоздатьДокументПланирования(МассивСтрокДляДокумента, СтруктураЗначений, РежимЗаписи, РежимСообщений);
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
    
	// Если были добавлены ссылки на документы планирования в табличную часть "Графики платежей".
	Если Модифицированность() Тогда
		// Запишем документ.
		бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ЭтотОбъект, РежимЗаписиДокумента.Запись,, "Ошибки")
	КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область РаботаСФинансовымиГрафиками

Функция ЭлементыФинДоговораДоступны() Экспорт
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЭлементыФинДоговораДоступны = ДоговорКонтрагента.бит_НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.Финансовый
									ИЛИ ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
									ИЛИ ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
									ИЛИ ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные;
	Иначе
		ЭлементыФинДоговораДоступны = ПроектДоговора.НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.Финансовый
									ИЛИ ПроектДоговора.ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
									ИЛИ ПроектДоговора.ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
									ИЛИ ПроектДоговора.ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные;							
	КонецЕсли;
	
	ЭтоУУ = бит_ЛицензированиеБФCервер.СборкаДоступна("УУ");
	
	Результат = ЭтоУУ И ЭлементыФинДоговораДоступны;
	
	Возврат Результат;							
	
КонецФункции

// Функция получает периодичность выплат по составляющей платежа ОсновнойДолг.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	ПериодичностьОсновногоДолга.
//
Функция ПолучитьПериодичностьСоставляющейОсновнойДолг() Экспорт
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Договор = ДоговорКонтрагента;
	Иначе
		Договор = ПроектДоговора;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.СоставляющаяПлатежа,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.Параметр,
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
	|ГДЕ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента = &Договор
	|	И бит_ЗначенияПараметровФинансовыхДоговоров.СоставляющаяПлатежа.ТипПлатежаПоФинДоговору = &ТипПлатежаОснДолг
	|	И бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = &ПараметрПериодичность";
	
	Запрос.УстановитьПараметр("Договор"					, Договор);
	Запрос.УстановитьПараметр("ТипПлатежаОснДолг"		, Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг);
	Запрос.УстановитьПараметр("ПараметрПериодичность"	, ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.Периодичность);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПериодичностьОсновногоДолга = Выборка.ЗначениеПараметра;
	Иначе
		ПериодичностьОсновногоДолга = Неопределено;
	КонецЕсли;
	
	Возврат ПериодичностьОсновногоДолга;
	
КонецФункции

// Процедура заполняет график выдачи траншей в документе.
//
Процедура ЗаполнитьГрафикВыдачиТраншей() Экспорт
	
	ГрафикВыдачиТраншей.Очистить();	
	
	Если НЕ ЭлементыФинДоговораДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	// +СБ. Кузнецова С. 2014-11-24 
	//Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	//	пДатаТранша = ДоговорКонтрагента.Дата;
	//Иначе
	//	пДатаТранша = ПроектДоговора.ДатаДоговора;
	//КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра КАК ЗначениеПараметра
	               |ИЗ
	               |	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
	               |ГДЕ
	               |	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента = &ДоговорКонтрагента
	               |	И бит_ЗначенияПараметровФинансовыхДоговоров.СоставляющаяПлатежа = ЗНАЧЕНИЕ(Справочник.бит_СоставляющиеПлатежейПоФинДоговорам.ПогашениеОсновногоДолга)
	               |	И бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СБ_ДатаПолученияКредита)";
	
	//+СБ ПИскунова 22-09-2016 #2390
	//Заменила отбор по договору контрагента, так как данные должны браться из Проекта Договора с закладки Параметры фин.договоров
	//Запрос.УстановитьПараметр("ДоговорКонтрагента", ЭтотОбъект.ДоговорКонтрагента);
	Если ЗначениеЗаполнено(ЭтотОбъект.ПроектДоговора) Тогда
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ЭтотОбъект.ПроектДоговора);
	Иначе
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ЭтотОбъект.ДоговорКонтрагента);
	КонецЕсли;
	// -СБ ПИскунова 22-09-2016 #2390
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		пДатаТранша = Выборка.ЗначениеПараметра;
	Иначе
	// -СБ. Кузнецова С.	
		// если не указана дата договора, то график заполнять не будем
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			пДатаТранша = ДоговорКонтрагента.Дата;
		Иначе
			пДатаТранша = ПроектДоговора.ДатаДоговора;
		КонецЕсли;
	// +СБ. Кузнецова С. 2014-11-24
	КонецЕсли;
	// -СБ. Кузнецова С.
	
	Если НЕ ЗначениеЗаполнено(пДатаТранша) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ГрафикВыдачиТраншей.Добавить();
	// +СБ. Кузнецова С. 2014-11-24 
	НоваяСтрока.ДатаТранша 	  = пДатаТранша;
	// -СБ. Кузнецова С.
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		// +СБ. Кузнецова С. 2014-11-24
		//НоваяСтрока.ДатаТранша 	  = ДоговорКонтрагента.Дата;
		// -СБ. Кузнецова С.
		НоваяСтрока.ДатаПогашения = ДоговорКонтрагента.СрокДействия;
		НоваяСтрока.СуммаТранша   = ДоговорКонтрагента.бит_СуммаДоговора;
	Иначе
		// +СБ. Кузнецова С. 2014-11-24
		//НоваяСтрока.ДатаТранша 	  = ПроектДоговора.ДатаДоговора;
		// -СБ. Кузнецова С.
		НоваяСтрока.ДатаПогашения = ПроектДоговора.СрокДействия;
		НоваяСтрока.СуммаТранша   = ПроектДоговора.СуммаВзаиморасчеты;
	КонецЕсли;
	
	//+СБ Пискунова В 21-09-2016  #2390
	//НоваяСтрока.МесяцПервогоПлатежа = ДобавитьМесяц(НоваяСтрока.ДатаТранша, 1);
	//При заполнении ТЧ  в качестве месяца первого платежа - значение параметра "Дата первого платежа" из группы "проценты"
	//НоваяСтрока.МесяцПервогоПлатежа = ДобавитьМесяц(НоваяСтрока.ДатаТранша, 1);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
	|ГДЕ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И бит_ЗначенияПараметровФинансовыхДоговоров.СоставляющаяПлатежа = ЗНАЧЕНИЕ(Справочник.бит_СоставляющиеПлатежейПоФинДоговорам.Проценты)
	|	И бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.ДатаПервогоПлатежа)";
	
	//+СБ ПИскунова 21-09-2016 #2390
	//Запрос.УстановитьПараметр("ДоговорКонтрагента", ЭтотОбъект.ДоговорКонтрагента);
	Если ЗначениеЗаполнено(ЭтотОбъект.ПроектДоговора) Тогда
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ЭтотОбъект.ПроектДоговора);
	Иначе
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ЭтотОбъект.ДоговорКонтрагента);
	КонецЕсли;
	// -СБ Пискунова В 21-09-2016  #2390
	
	ПериодичностьПланирования = Перечисления.бит_ПериодичностьПланирования.Месяц;
	
	НоваяСтрока.ПредставлениеМесяцаПервогоПлатежа = бит_РаботаСДиалогамиСервер.СформироватьПредставлениеПериода(НоваяСтрока.МесяцПервогоПлатежа, ПериодичностьПланирования);
	
	
	ПериодичностьОсновногоДолга = ПолучитьПериодичностьСоставляющейОсновнойДолг();
	// +СБ. Кузнецова С. 2014-11-24 
	НачальнаяДата = НоваяСтрока.МесяцПервогоПлатежа;																													
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра
	               |ИЗ
	               |	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
	               |ГДЕ
	               |	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента = &ДоговорКонтрагента
	               |	И бит_ЗначенияПараметровФинансовыхДоговоров.СоставляющаяПлатежа = &СоставляющаяПлатежа
	               |	И бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = &Параметр";
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СоставляющаяПлатежа", Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.ПогашениеОсновногоДолга);
	Запрос.УстановитьПараметр("Параметр", ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.ДатаПервогоПлатежа);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		НачальнаяДата = Макс(НоваяСтрока.МесяцПервогоПлатежа, Выборка.ЗначениеПараметра);
	КонецЕсли;
	// -СБ. Кузнецова С.	
	КоличествоПериодов = Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.РассчитатьКоличествоПериодовВыплат(ПериодичностьОсновногоДолга,
																														НоваяСтрока.МесяцПервогоПлатежа, 
																														НоваяСтрока.ДатаПогашения);
	НоваяСтрока.КоличествоПериодовВыплат = КоличествоПериодов;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедуры


// Функция возвращает массив типов для проверки.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  МассивТипов - Массив.
//
Функция ПодготовитьМассивТиповДляПроверки() Экспорт

	// Получим массив основных типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Получим дополнительные типы для проверки.
	ТипыДокументов = Метаданные().ТабличныеЧасти.ГрафикПлатежей.Реквизиты.ДокументПланирования.Тип.Типы();
	
	Для Каждого ТекТип Из ТипыДокументов Цикл
		МассивТипов.Добавить(ТекТип);
	КонецЦикла;

	ТипыДокументов = Метаданные().ТабличныеЧасти.ГрафикНачислений.Реквизиты.ДокументПланирования.Тип.Типы();
	
	Для Каждого ТекТип Из ТипыДокументов Цикл
		МассивТипов.Добавить(ТекТип);
	КонецЦикла;
	
	Возврат МассивТипов;
	
КонецФункции

// Функция определяет необходимо ли обязательно формировать движения документа.
//
// Возвращаемое значение:
//   флФормироватьДвижения   - Булево.
//
Функция ОбязательноФормироватьДвижения() Экспорт

	// Изменение кода. Начало. 20.01.2017{{
    Если Метаданные().Реквизиты.Найти("ХозяйственнаяОперация") = Неопределено Тогда
        ЭтаОперацияДляАрендыОС       = ВидОперации = мВидыОпераций.ОплатаПоставщику;
        ЭтоОперацияДляКредитовЗаймов = ВидОперации = мВидыОпераций.ВозвратЗайма ИЛИ ВидОперации = мВидыОпераций.ВозвратКредита ИЛИ ВидОперации = мВидыОпераций.ВыдачаЗаймаКонтрагенту;
    КонецЕсли;
    
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда	
		Если ЭтаОперацияДляАрендыОС  
		  	И ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.АрендаОС Тогда
			
			флФормироватьДвижения = Истина;
			
		ИначеЕсли ЭтоОперацияДляКредитовЗаймов
			       И (ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные
			           ИЛИ ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные) Тогда	
				  
			флФормироватьДвижения = Истина;
	// Изменение кода. Конец. 20.01.2017}}
    		
    	ИначеЕсли РасходДоход = Перечисления.бит_РасходДоход.Поступление 
    		      И ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные  Тогда
    			  
    		флФормироватьДвижения = Истина;	
    		
        ИначеЕсли РасходДоход = Перечисления.бит_РасходДоход.Поступление  
    	  	      И ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЦенныеБумаги Тогда
    		
    		флФормироватьДвижения = Истина;		
    		
    			  
    	Иначе
    		
    		флФормироватьДвижения = Ложь;
    		
        КонецЕсли;
    
    Иначе
		
		флФормироватьДвижения = Ложь;
		
	КонецЕсли;

	Возврат флФормироватьДвижения;
	
КонецФункции

// Функция готовит таблицы документа для проведения.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
//
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЧасть.Объект КАК Объект,
	               |	ТабЧасть.Период КАК Период,
	               |	СУММА(ТабЧасть.Сумма) КАК СуммаПлатежа
	               |ИЗ
	               |	Документ.бит_ДополнительныеУсловияПоДоговору.ПообъектныйГрафикПлатежей КАК ТабЧасть
	               |ГДЕ
	               |	ТабЧасть.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТабЧасть.Объект,
	               |	ТабЧасть.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Объект,
	               |	Период";
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПоПообъектномуГрафикуПлатежей = РезультатЗапроса.Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЧасть.Период КАК Период,
	               |	СУММА(ТабЧасть.СуммаБезНДС) КАК СуммаПлатежа
	               |ИЗ
	               |	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикПлатежей КАК ТабЧасть
	               |ГДЕ
	               |	ТабЧасть.Ссылка = &Ссылка
	               |	И ТабЧасть.Период > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТабЧасть.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПоГрафикуПлатежей = РезультатЗапроса.Выгрузить();

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГрафикПлатежей.Период КАК Период,
	               |	ГрафикПлатежей.Ссылка.Сценарий КАК Сценарий,
	               |	ГрафикПлатежей.ЦФО КАК ЦФО,
	               |	ГрафикПлатежей.СтатьяОборотов КАК СтатьяОборотов,
	               |	ГрафикПлатежей.СтатьяОборотов.ТипСтатьи КАК ТипСтатьи,
	               |	ГрафикПлатежей.Ссылка.Контрагент КАК Контрагент,
	               |	ГрафикПлатежей.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ГрафикПлатежей.Проект КАК Проект,
	               |	ГрафикПлатежей.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ГрафикПлатежей.Аналитика_1 КАК Аналитика_1,
	               |	ГрафикПлатежей.Аналитика_2 КАК Аналитика_2,
	               |	ГрафикПлатежей.Аналитика_3 КАК Аналитика_3,
	               |	ГрафикПлатежей.Аналитика_4 КАК Аналитика_4,
	               |	ГрафикПлатежей.Аналитика_5 КАК Аналитика_5,
	               |	ГрафикПлатежей.Аналитика_6 КАК Аналитика_6,
	               |	ГрафикПлатежей.Аналитика_7 КАК Аналитика_7,
	               |	ГрафикПлатежей.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(ГрафикПлатежей.Сумма) КАК Сумма,
	               |	СУММА(ГрафикПлатежей.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(ГрафикПлатежей.НДС) КАК НДС,
	               |	ГрафикПлатежей.РасходДоход КАК РасходДоход,
	               |	ГрафикПлатежей.СтатьяОборотов.РасходДоход КАК РасходДоходСтатьиОборотов,
	               |	ГрафикПлатежей.СоставляющаяПлатежа КАК СоставляющаяПлатежа,
	               |	ГрафикПлатежей.Ссылка.ПроектДоговора КАК ПроектДоговора,
	               |	0 КАК СуммаРегл,
	               |	0 КАК СуммаУпр,
	               |	0 КАК СуммаСценарий,
	               |	0 КАК СуммаБезНДСРегл,
	               |	0 КАК СуммаБезНДСУпр,
	               |	0 КАК СуммаБезНДССценарий,
	               |	ГрафикПлатежей.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент
				   // +СБ. Кузнецова С. 2014-11-12 
				   |,	ГрафикПлатежей.Ссылка.Дата КАК СБ_ДатаДокумента
				   // -СБ. Кузнецова С.				   
	               |ИЗ
	               |	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикПлатежей КАК ГрафикПлатежей
	               |ГДЕ
	               |	ГрафикПлатежей.Ссылка = &Ссылка
	               |	И ГрафикПлатежей.Период > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГрафикПлатежей.Ссылка.Сценарий,
	               |	ГрафикПлатежей.ЦФО,
	               |	ГрафикПлатежей.СтатьяОборотов,
	               |	ГрафикПлатежей.СтавкаНДС,
	               |	ГрафикПлатежей.Проект,
	               |	ГрафикПлатежей.НоменклатурнаяГруппа,
	               |	ГрафикПлатежей.Ссылка.ДоговорКонтрагента,
	               |	ГрафикПлатежей.Аналитика_1,
	               |	ГрафикПлатежей.Аналитика_2,
	               |	ГрафикПлатежей.Аналитика_3,
	               |	ГрафикПлатежей.Аналитика_4,
	               |	ГрафикПлатежей.Аналитика_5,
	               |	ГрафикПлатежей.Аналитика_6,
	               |	ГрафикПлатежей.Аналитика_7,
	               |	ГрафикПлатежей.Ссылка.Контрагент,
	               |	ГрафикПлатежей.РасходДоход,
	               |	ГрафикПлатежей.Период,
	               |	ГрафикПлатежей.СтатьяОборотов.ТипСтатьи,
	               |	ГрафикПлатежей.СтатьяОборотов.РасходДоход,
	               |	ГрафикПлатежей.СоставляющаяПлатежа,
	               |	ГрафикПлатежей.Ссылка.ПроектДоговора,
	               |	ГрафикПлатежей.СтатьяОборотов.ЭтоКоэффициент
				   // +СБ. Кузнецова С. 2014-11-12 
				   |,	ГрафикПлатежей.Ссылка.Дата
				   // -СБ. Кузнецова С.				   
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГрафикНачислений.Период,
	               |	ГрафикНачислений.Ссылка.Сценарий,
	               |	ГрафикНачислений.ЦФО,
	               |	ГрафикНачислений.СтатьяОборотовНачисления,
	               |	ГрафикНачислений.СтатьяОборотовНачисления.ТипСтатьи,
	               |	ГрафикНачислений.Ссылка.Контрагент,
	               |	ГрафикНачислений.Ссылка.ДоговорКонтрагента,
	               |	ГрафикНачислений.Проект,
	               |	ГрафикНачислений.НоменклатурнаяГруппа,
	               |	ГрафикНачислений.Аналитика_1,
	               |	ГрафикНачислений.Аналитика_2,
	               |	ГрафикНачислений.Аналитика_3,
	               |	ГрафикНачислений.Аналитика_4,
	               |	ГрафикНачислений.Аналитика_5,
	               |	ГрафикНачислений.Аналитика_6,
	               |	ГрафикНачислений.Аналитика_7,
	               |	ГрафикНачислений.СтавкаНДС,
	               |	СУММА(ГрафикНачислений.Сумма),
	               |	СУММА(ГрафикНачислений.СуммаБезНДС),
	               |	СУММА(ГрафикНачислений.НДС),
	               |	ГрафикНачислений.РасходДоход,
	               |	ГрафикНачислений.СтатьяОборотовНачисления.РасходДоход,
	               |	ГрафикНачислений.СоставляющаяПлатежа,
	               |	ГрафикНачислений.Ссылка.ПроектДоговора,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ГрафикНачислений.СтатьяОборотовНачисления.ЭтоКоэффициент
				   // +СБ. Кузнецова С. 2014-11-12
				   |,	ГрафикНачислений.Ссылка.Дата КАК СБ_ДатаДокумента
				   // -СБ. Кузнецова С.
	               |ИЗ
	               |	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикНачислений КАК ГрафикНачислений
	               |ГДЕ
	               |	ГрафикНачислений.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГрафикНачислений.Период,
	               |	ГрафикНачислений.Ссылка.Сценарий,
	               |	ГрафикНачислений.Ссылка.ДоговорКонтрагента,
	               |	ГрафикНачислений.ЦФО,
	               |	ГрафикНачислений.РасходДоход,
	               |	ГрафикНачислений.СтатьяОборотовНачисления,
	               |	ГрафикНачислений.Ссылка.Контрагент,
	               |	ГрафикНачислений.НоменклатурнаяГруппа,
	               |	ГрафикНачислений.Проект,
	               |	ГрафикНачислений.СтавкаНДС,
	               |	ГрафикНачислений.Аналитика_1,
	               |	ГрафикНачислений.Аналитика_2,
	               |	ГрафикНачислений.Аналитика_3,
	               |	ГрафикНачислений.Аналитика_4,
	               |	ГрафикНачислений.Аналитика_5,
	               |	ГрафикНачислений.Аналитика_6,
	               |	ГрафикНачислений.Аналитика_7,
	               |	ГрафикНачислений.СтатьяОборотовНачисления.ТипСтатьи,
	               |	ГрафикНачислений.СтатьяОборотовНачисления.РасходДоход,
	               |	ГрафикНачислений.СоставляющаяПлатежа,
	               |	ГрафикНачислений.Ссылка.ПроектДоговора,
	               |	ГрафикНачислений.СтатьяОборотовНачисления.ЭтоКоэффициент
				   // +СБ. Кузнецова С. 2014-11-12
				   |,	ГрафикНачислений.Ссылка.Дата
				   // -СБ. Кузнецова С.
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		ТаблицаПоГрафикамДоговоров = ПодготовитьТаблицуГрафиковДоговоров(РезультатЗапроса.Выгрузить());
	Иначе
		ТаблицаПоГрафикамДоговоров = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.Ссылка КАК Ссылка,
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.Ссылка.Организация КАК Организация,
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.Ссылка.Контрагент КАК Контрагент,
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.Ссылка.ПроектДоговора КАК ПроектДоговора,
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.ДатаТранша КАК Период,
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.ДатаТранша КАК ДатаТранша,
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.ДатаПогашения КАК ДатаПогашения,
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.СуммаТранша КАК Сумма,
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.МесяцПервогоПлатежа КАК МесяцПервогоПлатежа,
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.КоличествоПериодовВыплат КАК КоличествоПериодовВыплат
				   // +СБ. Кузнецова С. 2014-11-06
				   |,	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.СБ_ПроцентнаяСтавкаПоТраншу
				   // -СБ. Кузнецова С.
	               |ИЗ
	               |	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикВыдачиТраншей КАК бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей
	               |ГДЕ
	               |	бит_ДополнительныеУсловияПоДоговоруГрафикВыдачиТраншей.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПоГрафикуВыдачиТраншей = РезультатЗапроса.Выгрузить();
	
	БДРПланируетсяСНДС = бит_ОбщегоНазначенияПовтИсп.ЗначениеПеременной("бит_БДРПланируетсяСНДС");
	Запрос.УстановитьПараметр("БДРПланируетсяСНДС", БДРПланируетсяСНДС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ГрафикПлатежей.Период КАК Период,
	               |	ГрафикПлатежей.Ссылка.Сценарий КАК Сценарий,
	               |	ГрафикПлатежей.ЦФО КАК ЦФО,
	               |	ГрафикПлатежей.СтатьяОборотов КАК СтатьяОборотов,
	               |	ГрафикПлатежей.СтатьяОборотов.ТипСтатьи КАК ТипСтатьи,
	               |	ГрафикПлатежей.Ссылка.Контрагент КАК Контрагент,
	               |	ГрафикПлатежей.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ГрафикПлатежей.Проект КАК Проект,
	               |	ГрафикПлатежей.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ГрафикПлатежей.Аналитика_1 КАК Аналитика_1,
	               |	ГрафикПлатежей.Аналитика_2 КАК Аналитика_2,
	               |	ГрафикПлатежей.Аналитика_3 КАК Аналитика_3,
	               |	ГрафикПлатежей.Аналитика_4 КАК Аналитика_4,
	               |	ГрафикПлатежей.Аналитика_5 КАК Аналитика_5,
	               |	ГрафикПлатежей.Аналитика_6 КАК Аналитика_6,
	               |	ГрафикПлатежей.Аналитика_7 КАК Аналитика_7,
	               |	ГрафикПлатежей.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(ГрафикПлатежей.Сумма) КАК Сумма,
	               |	СУММА(ГрафикПлатежей.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(ГрафикПлатежей.НДС) КАК НДС,
	               |	ГрафикПлатежей.РасходДоход КАК РасходДоход,
	               |	ГрафикПлатежей.СтатьяОборотов.РасходДоход КАК РасходДоходСтатьиОборотов,
	               |	ГрафикПлатежей.СоставляющаяПлатежа КАК СоставляющаяПлатежа,
	               |	ГрафикПлатежей.Ссылка.ПроектДоговора КАК ПроектДоговора
	               |ИЗ
	               |	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикПлатежей КАК ГрафикПлатежей
	               |ГДЕ
	               |	ГрафикПлатежей.Ссылка = &Ссылка
	               |	И ГрафикПлатежей.Период > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГрафикПлатежей.Ссылка.Сценарий,
	               |	ГрафикПлатежей.ЦФО,
	               |	ГрафикПлатежей.СтатьяОборотов,
	               |	ГрафикПлатежей.СтавкаНДС,
	               |	ГрафикПлатежей.Проект,
	               |	ГрафикПлатежей.НоменклатурнаяГруппа,
	               |	ГрафикПлатежей.Ссылка.ДоговорКонтрагента,
	               |	ГрафикПлатежей.Аналитика_1,
	               |	ГрафикПлатежей.Аналитика_2,
	               |	ГрафикПлатежей.Аналитика_3,
	               |	ГрафикПлатежей.Аналитика_4,
	               |	ГрафикПлатежей.Аналитика_5,
	               |	ГрафикПлатежей.Аналитика_6,
	               |	ГрафикПлатежей.Аналитика_7,
	               |	ГрафикПлатежей.Ссылка.Контрагент,
	               |	ГрафикПлатежей.РасходДоход,
	               |	ГрафикПлатежей.Период,
	               |	ГрафикПлатежей.СтатьяОборотов.ТипСтатьи,
	               |	ГрафикПлатежей.СтатьяОборотов.РасходДоход,
	               |	ГрафикПлатежей.СоставляющаяПлатежа,
	               |	ГрафикПлатежей.Ссылка.ПроектДоговора
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГрафикНачислений.Период,
	               |	ГрафикНачислений.Ссылка.Сценарий,
	               |	ГрафикНачислений.ЦФО,
	               |	ГрафикНачислений.СтатьяОборотовНачисления,
	               |	ГрафикНачислений.СтатьяОборотовНачисления.ТипСтатьи,
	               |	ГрафикНачислений.Ссылка.Контрагент,
	               |	ГрафикНачислений.Ссылка.ДоговорКонтрагента,
	               |	ГрафикНачислений.Проект,
	               |	ГрафикНачислений.НоменклатурнаяГруппа,
	               |	ГрафикНачислений.Аналитика_1,
	               |	ГрафикНачислений.Аналитика_2,
	               |	ГрафикНачислений.Аналитика_3,
	               |	ГрафикНачислений.Аналитика_4,
	               |	ГрафикНачислений.Аналитика_5,
	               |	ГрафикНачислений.Аналитика_6,
	               |	ГрафикНачислений.Аналитика_7,
	               |	ГрафикНачислений.СтавкаНДС,
	               |	СУММА(ВЫБОР
	               |			КОГДА &БДРПланируетсяСНДС = ИСТИНА
	               |				ТОГДА ГрафикНачислений.Сумма
	               |			ИНАЧЕ ГрафикНачислений.СуммаБезНДС
	               |		КОНЕЦ),
	               |	СУММА(ГрафикНачислений.СуммаБезНДС),
	               |	СУММА(ГрафикНачислений.НДС),
	               |	ГрафикНачислений.РасходДоход,
	               |	ГрафикНачислений.СтатьяОборотовНачисления.РасходДоход,
	               |	ГрафикНачислений.СоставляющаяПлатежа,
	               |	ГрафикНачислений.Ссылка.ПроектДоговора
	               |ИЗ
	               |	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикНачислений КАК ГрафикНачислений
	               |ГДЕ
	               |	ГрафикНачислений.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГрафикНачислений.Период,
	               |	ГрафикНачислений.Ссылка.Сценарий,
	               |	ГрафикНачислений.Ссылка.ДоговорКонтрагента,
	               |	ГрафикНачислений.ЦФО,
	               |	ГрафикНачислений.РасходДоход,
	               |	ГрафикНачислений.СтатьяОборотовНачисления,
	               |	ГрафикНачислений.Ссылка.Контрагент,
	               |	ГрафикНачислений.НоменклатурнаяГруппа,
	               |	ГрафикНачислений.Проект,
	               |	ГрафикНачислений.СтавкаНДС,
	               |	ГрафикНачислений.Аналитика_1,
	               |	ГрафикНачислений.Аналитика_2,
	               |	ГрафикНачислений.Аналитика_3,
	               |	ГрафикНачислений.Аналитика_4,
	               |	ГрафикНачислений.Аналитика_5,
	               |	ГрафикНачислений.Аналитика_6,
	               |	ГрафикНачислений.Аналитика_7,
	               |	ГрафикНачислений.СтатьяОборотовНачисления.ТипСтатьи,
	               |	ГрафикНачислений.СтатьяОборотовНачисления.РасходДоход,
	               |	ГрафикНачислений.СоставляющаяПлатежа,
	               |	ГрафикНачислений.Ссылка.ПроектДоговора
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДляКонтрольныхЗначений = РезультатЗапроса.Выгрузить();
	
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаПоПообъектномуГрафикуПлатежей", ТаблицаПоПообъектномуГрафикуПлатежей);
	СтруктураТаблиц.Вставить("ТаблицаПоГрафикуПлатежей"			   , ТаблицаПоГрафикуПлатежей);
	СтруктураТаблиц.Вставить("ТаблицаПоГрафикамДоговоров"		   , ТаблицаПоГрафикамДоговоров);
	СтруктураТаблиц.Вставить("ТаблицаПоГрафикуВыдачиТраншей"	   , ТаблицаПоГрафикуВыдачиТраншей);
	СтруктураТаблиц.Вставить("ТаблицаДляКонтрольныхЗначений"	   , ТаблицаДляКонтрольныхЗначений);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокументаСобытий

// Процедура записывает движения по регистру накопления бит_му_ФинансовыеГрафики.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют     - Структура.
//  ИзПообъектного 			- Булево.
//
Процедура ДвижениеПоРегиструНакопленияФинансовыеГрафики(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, ИзПообъектного = Истина)

	Если ИзПообъектного Тогда
		ТаблицаДанных = СтруктураТаблиц.ТаблицаПоПообъектномуГрафикуПлатежей;
	Иначе
		ТаблицаДанных = СтруктураТаблиц.ТаблицаПоГрафикуПлатежей;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация",        СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Валюта",             СтруктураШапкиДокумента.ВалютаДокумента);
	СтруктураПараметров.Вставить("Контрагент",         СтруктураШапкиДокумента.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	НаборЗаписей    = Движения.бит_му_ФинансовыеГрафики;
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("СуммаПлатежаУпр");
	МассивИсключений.Добавить("СуммаПлатежаСценарий");
		
	ВзаиморасчетыКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
	                                                           СтруктураШапкиДокумента.Дата);
	ДокументКурс = СтруктураКурсыВалют.Документ;
	РеглКурс     = СтруктураКурсыВалют.Регл;
	ПараметрыТекущегоКурса = бит_КурсыВалютКлиентСервер.СтруктураКурса(ДокументКурс.Валюта, ДокументКурс.Курс,
		ДокументКурс.Кратность);
	
	Для Каждого ТекСтрокаГрафика Из ТаблицаДанных Цикл
		
		Запись = ТаблицаДвижений.Добавить();
		
		СтруктураПараметров.Вставить("Период"		, ТекСтрокаГрафика.Период);
		СтруктураПараметров.Вставить("СуммаПлатежа" , ТекСтрокаГрафика.СуммаПлатежа);
		Если ИзПообъектного Тогда
			СтруктураПараметров.Вставить("Объект"	, ТекСтрокаГрафика.Объект);
		Иначе
			СтруктураПараметров.Вставить("Объект"	, СтруктураШапкиДокумента.ДоговорКонтрагента);
		КонецЕсли;  		
		
        ЗаполнитьЗначенияСвойств(Запись, СтруктураПараметров);
				
		// Сформируем массив имен источника.
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("СуммаПлатежа");
		
		Если Сценарий.ИспользоватьКурсыСценария Тогда
			
			// Получим курсы валют, неоходимые для выполнения пересчетов.
			ВидыКурсов = Новый Структура("Взаиморасчеты, Регл, Упр, Сценарий, Документ");

			СтруктураКурсыВалют = ПолучитьКурсыВалют(ВидыКурсов, ТекСтрокаГрафика.Период);
			
			// Выполним расчет сумм "Регламентного и управленческого учета".
			бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров ,Запись ,МассивИмен
												   ,СтруктураКурсыВалют ,СтруктураКурсыВалют.Документ, МассивИсключений);
		
		
		Иначе
			ПараметрыНовогоКурса = бит_КурсыВалютКлиентСервер.СтруктураКурса(РеглКурс.Валюта, РеглКурс.Курс,
				РеглКурс.Кратность);
				
			Запись.СуммаПлатежаРегл = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекСтрокаГрафика.СуммаПлатежа,
				ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
				
			ПараметрыНовогоКурса = бит_КурсыВалютКлиентСервер.СтруктураКурса(ВзаиморасчетыКурс.Валюта, ВзаиморасчетыКурс.Курс,
				ВзаиморасчетыКурс.Кратность);
				
			Запись.СуммаПлатежаВзаиморасчеты = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекСтрокаГрафика.СуммаПлатежа,
				ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ДобавитьДвижение();
	
	ПараметрыФинИнструментов = Новый Структура;
	ПараметрыФинИнструментов.Вставить("СтавкаНДСПоДоговору", СтруктураШапкиДокумента.СтавкаНДС);
	
	НаборЗаписей = Движения.бит_му_ПараметрыФинИнструментов;
	
	бит_му_ФинИнструменты.ЗаписатьПараметры(НаборЗаписей, СтруктураШапкиДокумента, ПараметрыФинИнструментов);
	
КонецПроцедуры

// Процедура выполняет движения по регистру бит_КонтрольныеЗначенияБюджетов.
// И осуществляет контроль по бюджету.
//
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  ТаблицаРасход            - ТаблицаЗначений.
//  Отказ                    - Булево.
//  Заголовок                - Строка.
//
Процедура ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаДляКонтроляИсходная,Отказ,Заголовок)
	
	Если НеКонтролироватьПоБюджету Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("РасходДоходСтатьиОборотов", Перечисления.бит_РасходДоход.Расходование);
	
	ТаблицаДляКонтроля = ТаблицаДляКонтроляИсходная.Скопировать(ОтборСтрок);
	
	
	КонтролироватьБюджет = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьГрафикиДоговоровПоБюджету);
	пПериодичность       = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(Сценарий);	
	
	Если ТаблицаДляКонтроля.Количество()>0 Тогда
		
		пДатаНачала    = ТаблицаДляКонтроля[0].Период;
		пДатаОкончания = ТаблицаДляКонтроля[ТаблицаДляКонтроля.Количество()-1].Период;
		
	Иначе
		
		пДатаНачала    = Дата;
		пДатаОкончания = Дата;
		
	КонецЕсли;
	
	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(пДатаНачала,пПериодичность);
	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(пДатаОкончания,пПериодичность);
	
	ТаблицаДляКонтроля.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТаблицаДляКонтроля.ЗаполнитьЗначения(0,"Количество");	
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сценарий");
	МассивИсключений.Добавить("СтатьяОборотов");
	МассивИсключений.Добавить("БанковскийСчет");
	
	ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,мНастройкиИзмерений);
		
	ВалютаСценария    = Сценарий.Валюта;
	
	Если Сценарий.ИспользоватьКурсыСценария Тогда
						
		Для каждого СтрокаТаблицы Из ТаблицаДляКонтроля Цикл
			
			СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария, СтрокаТаблицы.Период, "бит_КурсыСценариевПланирования", Сценарий);	
			
			СтруктураДокумент = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, СтрокаТаблицы.Период, "бит_КурсыСценариевПланирования", Сценарий);	

		    СтрокаТаблицы.Сумма     = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
																					,ВалютаДокумента
																					,ВалютаСценария
																					,СтруктураДокумент.Курс
																					,СтруктураСценарий.Курс
																					,КратностьДокумента
																					,СтруктураСценарий.Кратность);
			
		КонецЦикла; 

		
	Иначе
		
		бит_КонтрольПоБюджету.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,пПериодичность);

		СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария,Дата);		
		
		Для каждого СтрокаТаблицы Из ТаблицаДляКонтроля Цикл
		
			СтрокаТаблицы.Сумма     = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
																					,ВалютаДокумента
																					,ВалютаСценария
																					,КурсДокумента
																					,СтруктураСценарий.Курс
																					,КратностьДокумента
																					,СтруктураСценарий.Кратность);
			
		КонецЦикла; 
																			
	КонецЕсли;
		
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий"                     ,Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
	СтруктураПараметров.Вставить("РежимКонтроля"                ,"ГрафикиДоговоров");
		
	
	ТекстЗапроса = бит_КонтрольПоБюджету.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	
	МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
	Запрос.УстановитьПараметр("Сценарий"      ,Сценарий);
	Запрос.УстановитьПараметр("СценарийКонтролируемый", Перечисления.бит_РежимыКонтроляПоБюджету.ГрафикиДоговоров);
	Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
	Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
	
	бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
	
	
	Результат = Запрос.Выполнить();
	
	НаборЗаписей = Движения.бит_КонтрольныеЗначенияБюджетов;    
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля"   ,ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий"            ,Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьБюджет",КонтролироватьБюджет);
	СтруктураПараметров.Вставить("СверхБюджета"        ,СверхБюджета);
	СтруктураПараметров.Вставить("РежимКонтроля"       ,"ГрафикиДоговоров");
	СтруктураПараметров.Вставить("Объект",			   Ссылка);
	
	флОтказДоПроверки = Отказ;
	
	бит_КонтрольПоБюджету.ОбработатьРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок);
	
	Если флОтказДоПроверки Тогда
		
		Отказ = Истина;
		
	КонецЕсли; 
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.бит_РежимыКонтроляПоБюджету.ГрафикиДоговоров,"СценарийКонтролируемый");
	
	НаборЗаписей.мПериод          = СтруктураШапкиДокумента.Дата;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ДобавитьДвижение();
	
КонецПроцедуры

// Процедура выполняет движения по регистрам.
//
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, ИсточникПроводок, СтруктураКурсыВалют, Отказ, Заголовок)
	
	Движения.бит_ГрафикиДоговоров.Записывать = Истина;
	
	Если ИсточникПроводок = "ИзПообъектногоГрафика" Тогда
		
		ДвижениеПоРегиструНакопленияФинансовыеГрафики(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют);
		
	ИначеЕсли ИсточникПроводок = "ИзОбщегоГрафика" Тогда
		
		ДвижениеПоРегиструНакопленияФинансовыеГрафики(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Ложь);
		
	КонецЕсли;
	
	ТаблицаДвижений = Движения.бит_ГрафикиДоговоров.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("СуммаВзаиморасчеты");
	МассивИсключений.Добавить("СуммаБезНДСВзаиморасчеты");
	
	// Сформируем массив имен источника.
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	МассивИмен.Добавить("СуммаБезНДС");
	
	Для каждого СтрокаТаблицы Из СтруктураТаблиц.ТаблицаПоГрафикамДоговоров Цикл
	
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) И ЗначениеЗаполнено(СтрокаТаблицы.ПроектДоговора) Тогда
			НоваяСтрока.ДоговорКонтрагента = СтрокаТаблицы.ПроектДоговора;
		КонецЕсли;
		
		Если Не Сценарий.ИспользоватьКурсыСценария Тогда
			бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтрокаТаблицы, НоваяСтрока, МассивИмен, СтруктураКурсыВалют, СтруктураКурсыВалют.Документ, МассивИсключений);
		КонецЕсли;
		
	КонецЦикла; 
	
	// Заполним измерение ДокументРегистратор, используемое для увеличения скорости работы отчетов по данному регистру.
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументРегистратор");
	
	Движения.бит_ГрафикиДоговоров.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_ГрафикиДоговоров.ДобавитьДвижение();
	Движения.бит_ГрафикиДоговоров.Записать();
	
	// Контроль суммы превышения по договору.
	Если Не ЭтоФинансовыйДоговор() Тогда
		бит_ДоговораСервер.ПровестиКонтрольСумм(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Регистр накопления бит_ТраншиПоФинансовымДоговорам.
	
	ТаблицаДвижений = Движения.бит_ТраншиПоФинансовымДоговорам.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаТаблицы Из СтруктураТаблиц.ТаблицаПоГрафикуВыдачиТраншей Цикл
	
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		
		НоваяСтрока.ДоговорКонтрагента = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента),СтрокаТаблицы.ДоговорКонтрагента,СтрокаТаблицы.ПроектДоговора);
		
	КонецЦикла; 
	
	Движения.бит_ТраншиПоФинансовымДоговорам.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_ТраншиПоФинансовымДоговорам.ДобавитьДвижение();
	
	ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента, СтруктураТаблиц.ТаблицаДляКонтрольныхЗначений, Отказ, Заголовок);
	
КонецПроцедуры

// Функция определяет является ли договор финансовым.
//
// Возвращаемое значение:
//  Результат - Булево.
//
Функция ЭтоФинансовыйДоговор()

	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда   
		
		Если ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.АрендаОС 
			Или ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
			Или ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные
			Или ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
			Или ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЦенныеБумаги 
			ИЛИ ДоговорКонтрагента.бит_НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.Финансовый Тогда
			
			Результат = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроектДоговора) Тогда
		
		Если ПроектДоговора.ТипДоговора = Справочники.бит_ТипыДоговоров.АрендаОС 
			Или ПроектДоговора.ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
			Или ПроектДоговора.ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные
			Или ПроектДоговора.ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
			Или ПроектДоговора.ТипДоговора = Справочники.бит_ТипыДоговоров.ЦенныеБумаги 
			ИЛИ ПроектДоговора.НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.Финансовый Тогда

			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования=Неопределено)
	
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	КонецЕсли;
		
	Если НЕ ОбъектКопирования = Неопределено Тогда
		ПроектДоговора 			 = Неопределено;
		СверхБюджета 			 = Ложь;
		НеКонтролироватьПоБюджету= Ложь;
		
		ИзменениеВалюты();
	КонецЕсли;
	
	СуммаВключаетНДС = Истина;
	
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = Перечисления.бит_ПериодичностьПланирования.Месяц;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПериодичностьНачисления) Тогда
		ПериодичностьНачисления = Перечисления.бит_ПериодичностьПланирования.Месяц;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДатаСеанса();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецГода(ДатаНачала);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаНачисления) Тогда
		ДатаНачалаНачисления = ТекущаяДатаСеанса();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОкончанияНачисления) Тогда
		ДатаОкончанияНачисления = КонецГода(ДатаНачалаНачисления);
	КонецЕсли;
	
	Если РасходДоход = Перечисления.бит_РасходДоход.Поступление Тогда
		ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПустаяСсылка();
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, ТекущийПользователь, ОбъектКопирования,, Ложь);

	// Инициализируем значения доп. измерений.
	бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ЭтотОбъект, мИзмеренияДоп, мНастройкиИзмерений);
	
КонецПроцедуры

// Процедура проверяет равенство итоговых сумм по пообъектному графику платежей.
// И основному графику платежей.
//
// Параметры:
//  СтруктураТаблиц  - ТаблицаЗначений.
//
Процедура ПроверитьРавенстроСумм(СтруктураТаблиц)

    Если Метаданные().Реквизиты.Найти("ХозяйственнаяОперация") = Неопределено Тогда
        ЭтаОперацияДляАрендыОС       = ВидОперации = мВидыОпераций.ОплатаПоставщику;
    КонецЕсли;
    
	Если (ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.АрендаОС И ЭтаОперацияДляАрендыОС) 
		ИЛИ (ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЦенныеБумаги 
		     И РасходДоход = Перечисления.бит_РасходДоход.Поступление) Тогда
			
		ТаблицаПоОсновному    = СтруктураТаблиц.ТаблицаПоГрафикуПлатежей;
		ТаблицаПоПообъектному = СтруктураТаблиц.ТаблицаПоПообъектномуГрафикуПлатежей;
		
		СуммаПоОсновному    = ТаблицаПоОсновному.Итог("СуммаПлатежа");
		СуммаПоПообъектному = ТаблицаПоПообъектному.Итог("СуммаПлатежа");
		
		Если СуммаПоОсновному <> СуммаПоПообъектному Тогда
			ТестСуммаПоОсновному    = Формат(СуммаПоОсновному, "ЧЦ=15; ЧДЦ=2; ЧН=0");
			ТестСуммаПоПообъектному = Формат(СуммаПоПообъектному, "ЧЦ=15; ЧДЦ=2; ЧН=0");
			ТекстСообщения = Нстр("ru = 'Итоговая сумма без НДС пообъектного графика «%1» не равна итоговой сумме без ндс графика платежей «%2»!'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ТестСуммаПоПообъектному, ТестСуммаПоОсновному); 
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаЗаполнения(Отказ)
	
	// реквизиты таб.части ПообъектныйГрафикПлатежей.
	НайденнаяСтрока = ПообъектныйГрафикПлатежей.Найти(Дата("00010101"), "Период");
	
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru='В пообъектном графике платежей присутствуют строки с незаполненным периодом'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
	КонецЕсли;
	
	Для Каждого СтрокаОбъекта Из ПообъектныйГрафикПлатежей Цикл
		Если Не ЗначениеЗаполнено(СтрокаОбъекта.Объект) Тогда
			ТекстСообщения = НСтр("ru = 'В пообъектном графике платежей присутствуют группы с незаполненным объектом'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет таблицу-источник проводок.
// Если источник не определен - отказ от проведения.
//
// Параметры:
//  Нет.
//  
// Возвращаемое значение:
//   Строка ("ИзПообъектногоГрафика" или "ИзОбщегоГрафика").
//
Функция ОпределитьИсточникПроводок()
	
	Если Метаданные().Реквизиты.Найти("ХозяйственнаяОперация") = Неопределено Тогда
        ЭтаОперацияДляАрендыОС       = ВидОперации = мВидыОпераций.ОплатаПоставщику;
        ЭтоОперацияДляКредитовЗаймов = ВидОперации = мВидыОпераций.ВозвратЗайма ИЛИ ВидОперации = мВидыОпераций.ВозвратКредита ИЛИ ВидОперации = мВидыОпераций.ВыдачаЗаймаКонтрагенту;
    КонецЕсли;
    
    Если ЭтаОперацияДляАрендыОС  
		И ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.АрендаОС Тогда
		
		ИсточникПроводок = "ИзПообъектногоГрафика";
		
	ИначеЕсли ЭтоОперацияДляКредитовЗаймов
		И (ДоговорКонтрагента.бит_ТипДоговора  = Справочники.бит_ТипыДоговоров.ЗаймыПолученные
		ИЛИ ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные) Тогда
		
		ИсточникПроводок = "ИзОбщегоГрафика";
    
	ИначеЕсли РасходДоход = Перечисления.бит_РасходДоход.Поступление 
		И ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные Тогда
		
		ИсточникПроводок = "ИзОбщегоГрафика";
		
	ИначеЕсли РасходДоход = Перечисления.бит_РасходДоход.Поступление
		      И ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЦенныеБумаги Тогда
		
		ИсточникПроводок = "ИзПообъектногоГрафика";			
		
	ИначеЕсли ФормироватьДвижения Тогда
		
		ИсточникПроводок = "ИзОбщегоГрафика";
		
	Иначе	
		
		ИсточникПроводок = "";
		
	КонецЕсли;
	
	Возврат ИсточникПроводок;
	
КонецФункции

// Процедура заполняет договор контрагента.
//
// Параметры:
//  ПроектДоговора  			     - ДокументСсылка.бит_ПроектДоговора.
//  ДоговорыСоздаютсяИзДопСоглашений - Булево.
//
Процедура ДоговорКонтрагента(ПроектДоговора, ДоговорыСоздаютсяИзДопСоглашений)

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ДоговорКонтрагента = бит_ДоговораСервер.НайтиДоговорКонтрагентаПоПроектуДоговора(ПроектДоговора);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента)  
		И ЗначениеЗаполнено(ПроектДоговора.ОсновнойДоговор) // Это доп. соглашение 
		И Не ДоговорыСоздаютсяИзДопСоглашений Тогда
		ДоговорКонтрагента(ПроектДоговора.ОсновнойДоговор, ДоговорыСоздаютсяИзДопСоглашений);
	КонецЕсли;	

КонецПроцедуры

// Процедура заполняет текущий документ в соответствии с переданным документом ПроектДоговора.
//
// Параметры:
//	Основание - ДокументСсылка.бит_ПроектДоговора.
//
Процедура ЗаполнитьНаОснованииПроектаДоговора(Основание)
	
	Организация 	= Основание.Организация;
	Контрагент 		= Основание.Контрагент;
	Сценарий 		= Основание.Сценарий;
	ЦФО 			= Основание.ЦФО;
	Проект 			= Основание.Проект;
	ПроектДоговора 	= Основание;
	
	ДоговорКонтрагента(Основание, Константы.бит_СоздаватьДоговорыКонтрагентовИзДопСоглашений.Получить());
	
	ВалютаДокумента = ?(Основание.РасчетыВУсловныхЕдиницах, мВалютаРегламентированногоУчета, Основание.ВалютаВзаиморасчетов);
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		КурсДокумента 			= 1;
		КратностьДокумента		= 1;
	Иначе
		КурсДокумента 			= Основание.КурсВзаиморасчетов;
		КратностьДокумента		= Основание.КратностьВзаиморасчетов;
	КонецЕсли;
	
	// Курс получаем на дату документа Доп.условия по договору.
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДатаСеанса());
	
	пСуммаВзаиморасчеты = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Основание.СуммаВзаиморасчеты,
																		Основание.ВалютаВзаиморасчетов,
																		ВалютаДокумента,
																		Основание.КурсВзаиморасчетов,
																		СтруктураКурса.Курс,
																		Основание.КратностьВзаиморасчетов,
																		СтруктураКурса.Кратность);
																		
	пСуммаНДСВзаиморасчеты = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Основание.СуммаНДСВзаиморасчеты,
																		Основание.ВалютаВзаиморасчетов,
																		ВалютаДокумента,
																		Основание.КурсВзаиморасчетов,
																		СтруктураКурса.Курс,
																		Основание.КратностьВзаиморасчетов,
																		СтруктураКурса.Кратность);
	
	// Заполним реквизиты связанные с видом договора.
	Если Основание.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ Основание.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				
		ФормаОплаты				= Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		РасходДоход				= Перечисления.бит_РасходДоход.Расходование;
		
		СуммаРасход 			= пСуммаВзаиморасчеты;
		СуммаРасходНачисления 	= пСуммаВзаиморасчеты;
		СуммаНДСРасход			= пСуммаНДСВзаиморасчеты;
		СуммаНДСРасходНачисления= пСуммаНДСВзаиморасчеты;
		
	ИначеЕсли Основание.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИЛИ Основание.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		ИЛИ бит_ДоговораСервер.ЭтоВидДоговораСКомитентомНаЗакупку(Основание.ВидДоговора) Тогда
				
		ФормаОплаты				= Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		РасходДоход				= Перечисления.бит_РасходДоход.Поступление;
		СуммаПриход 			= пСуммаВзаиморасчеты;
		СуммаПриходНачисления 	= пСуммаВзаиморасчеты;
		СуммаНДСПриход			= пСуммаНДСВзаиморасчеты;
		СуммаНДСПриходНачисления= пСуммаНДСВзаиморасчеты;
		
	Иначе
				
		ФормаОплаты				= Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		РасходДоход				= Перечисления.бит_РасходДоход.Расходование;
		
		СуммаРасход 			= пСуммаВзаиморасчеты;
		СуммаРасходНачисления 	= пСуммаВзаиморасчеты;
		СуммаНДСРасход			= пСуммаНДСВзаиморасчеты;
		СуммаНДСРасходНачисления= пСуммаНДСВзаиморасчеты;
		
	КонецЕсли;
	
	// +СБ. Кузнецова С. 2014-11-12 
	Если Основание.ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные Или Основание.ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные Тогда
		ЭтотОбъект.ВидОперации 				= Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами;
	КонецЕсли;
	// -СБ. Кузнецова С.
	
	Периодичность 			= Перечисления.бит_ПериодичностьПланирования.Месяц;
	ПериодичностьНачисления 	= Перечисления.бит_ПериодичностьПланирования.Месяц;
	
	пДатаНачала = Основание.ДатаДоговора;
	
	// +СБ. Кузнецова С. 2014-11-24 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра
	               |ИЗ
	               |	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
	               |ГДЕ
	               |	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента = &ДоговорКонтрагента
	               |	И бит_ЗначенияПараметровФинансовыхДоговоров.СоставляющаяПлатежа = ЗНАЧЕНИЕ(Справочник.бит_СоставляющиеПлатежейПоФинДоговорам.ПогашениеОсновногоДолга)
	               |		И бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СБ_ДатаПолученияКредита)";
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ЭтотОбъект.ДоговорКонтрагента);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		пДатаНачала = Выборка.ЗначениеПараметра;
	КонецЕсли;
	// -СБ. Кузнецова С.	
	
	Если ЗначениеЗаполнено(Основание.СрокДействия) Тогда
		пДатаОкончания = Основание.СрокДействия;
	ИначеЕсли ЗначениеЗаполнено(Основание.ДатаДоговора) Тогда
		пДатаОкончания = КонецГода(Основание.ДатаДоговора);
	Иначе
		пДатаОкончания = Дата("00010101");
	КонецЕсли;
	
	ДатаНачала 				= пДатаНачала;
	ДатаОкончания 			= пДатаОкончания;
	ДатаНачалаНачисления 	= пДатаНачала;
	ДатаОкончанияНачисления 	= пДатаОкончания;
	
	СтатьяОборотов 			= Основание.ОсновнаяСтатьяОборотов;
	СтатьяОборотовНачисления = Основание.ОсновнаяСтатьяОборотовБДР;
	
	// Заполним таб.часть график выдачи траншей.
	ЗаполнитьГрафикВыдачиТраншей();
	
КонецПроцедуры

Процедура ЗаполнитьПоДоговору(ДоговорКонтрагента)
	
	ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ЭтоГруппа");
	
	Если ЭтоГруппа Тогда
		ТекстСообщения = НСтр("ru = 'Дополнительные условия по договору запрещено создавать на основании группы справочника.
									|Выберите договор. Для раскрытия группы используйте клавиши Ctrl и стрелку вниз'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",      ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Организация КАК Организация,
		|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
		|	ДоговорыКонтрагентов.бит_ЦФО КАК ЦФО,
		|	ДоговорыКонтрагентов.бит_Проект КАК Проект,
		|	ДоговорыКонтрагентов.бит_ОсновнаяСтатьяОборотов КАК СтатьяОборотов,
		|	ДоговорыКонтрагентов.бит_ОсновнаяСтатьяОборотовБДР КАК СтатьяОборотовНачисления,
		|	ДоговорыКонтрагентов.бит_НачалоПлановое КАК ДатаНачала,
		|	ДоговорыКонтрагентов.бит_ОкончаниеПлановое КАК ДатаОкончания,
		|	ДоговорыКонтрагентов.бит_НачалоПлановое КАК ДатаНачалаНачисления,
		|	ДоговорыКонтрагентов.бит_ОкончаниеПлановое КАК ДатаОкончанияНачисления,
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаДокумента,
		|	ДоговорыКонтрагентов.бит_СуммаДоговора КАК СуммаРасход
		|ПОМЕСТИТЬ ДанныеДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &ДоговорКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДоговора.Организация КАК Организация,
		|	ДанныеДоговора.Контрагент КАК Контрагент,
		|	ДанныеДоговора.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДанныеДоговора.ЦФО КАК ЦФО,
		|	ДанныеДоговора.Проект КАК Проект,
		|	ДанныеДоговора.СтатьяОборотов КАК СтатьяОборотов,
		|	ДанныеДоговора.СтатьяОборотовНачисления КАК СтатьяОборотовНачисления,
		|	ДанныеДоговора.ДатаНачала КАК ДатаНачала,
		|	ДанныеДоговора.ДатаОкончания КАК ДатаОкончания,
		|	ДанныеДоговора.ДатаНачалаНачисления КАК ДатаНачалаНачисления,
		|	ДанныеДоговора.ДатаОкончанияНачисления КАК ДатаОкончанияНачисления,
		|	ДанныеДоговора.ВалютаДокумента КАК ВалютаДокумента,
		|	ДанныеДоговора.СуммаРасход КАК СуммаРасход,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК КурсДокумента,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК КратностьДокумента
		|ИЗ
		|	ДанныеДоговора КАК ДанныеДоговора
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&ДатаДокумента,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						ДанныеДоговора.ВалютаДокумента КАК ВалютаДокумента
		|					ИЗ
		|						ДанныеДоговора КАК ДанныеДоговора)) КАК КурсыВалютСрезПоследних
		|		ПО ДанныеДоговора.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта";
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет заполненность обязательных значений для создания документа планирования. 
//
// Параметры;
//  СтрокаСДанными - СтрокаТабличнойЧасти.ГрафикПлатежей, ВыборкаИзРезультатаЗапроса.
//  РежимСообщений - Строка: "Нет", "Все", "Ошибки".
//
// Возвращаемое значение:
//  ЗначенияЗаполнены - Булево.
//
Функция ЗначенияВлияющиеНаФормированиеДокументаПланированияЗаполнены(ИмяГрафика, СписокПолей, СтрокаСДанными, РежимСообщений)
    
    ЗначенияЗаполнены = Истина;
	
	НазваниеТабличнойЧасти = "";
	Если ИмяГрафика = "ГрафикПлатежей" Тогда
		НазваниеТабличнойЧасти = НСтр("ru = 'График платежей'");
	Иначе  
        НазваниеТабличнойЧасти = НСтр("ru = 'График начислений'");
	КонецЕсли;
	
    Заголовок = НСтр("ru='Создание документа планирования для строки номер ""%1"" табличной части %2:'");
	Заголовок = СтрШаблон(Заголовок, СтрокаСДанными.НомерСтроки, НазваниеТабличнойЧасти);
	
    СтрокаНачСообщения = НСтр("ru='В строке номер ""%1"" табличной части %2: Не заполнено значение реквизита ""'");
	СтрокаНачСообщения = СтрШаблон(СтрокаНачСообщения, СтрокаСДанными.НомерСтроки, НазваниеТабличнойЧасти);
	
    Для Каждого КлючЗначение Из СписокПолей Цикл
        
        Если Не ЗначениеЗаполнено(СтрокаСДанными[КлючЗначение.Ключ]) Тогда
            
            Если РежимСообщений = "Все" Или РежимСообщений = "Ошибки" Тогда
                бит_ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачСообщения + КлючЗначение.Значение + """.",, Заголовок);
            КонецЕсли;
            
            ЗначенияЗаполнены = Ложь;
            
        КонецЕсли;
        
    КонецЦикла;
	
    Возврат ЗначенияЗаполнены;
    
КонецФункции

// Процедура проверяет наличие указанной суммы в массиве хоть одной.
// При отсутствии заполняет массив значением 1.
//
// Параметры:
//  МассивСумм - Массив.
//
Процедура ПроверитьНаличиеСуммВМассиве_ПриОтсутствииЗаполнить(МассивСумм)
    
    ВГПСуммаЕсть = Ложь;
    
    // Проверим наличие хоть одной указанной суммы в массиве.
    Для Каждого ТекСумма Из МассивСумм Цикл
        
        Если ЗначениеЗаполнено(ТекСумма) Тогда
            ВГПСуммаЕсть = Истина;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    // Если не указана ни одна сумма, тогда заполним суммы по умолчанию значением 1.
    Если Не ВГПСуммаЕсть Тогда
        
        Кол_Во = МассивСумм.Количество();
        
        Для Ном = 1 По Кол_Во Цикл
            МассивСумм[Ном - 1] = 1;
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры

Функция ПодготовитьСтруктуруОтбора()
	
	Возврат Новый Структура("РасходДоход, Период, СтавкаНДС, ЦФО, Проект, НоменклатурнаяГруппа, Аналитика_1, Аналитика_2,Аналитика_3,Аналитика_4,Аналитика_5,Аналитика_6,Аналитика_7");
	
КонецФункции

// Процедура создает документ планирования.
//
// Параметры:
//  СтрокаСДаннымиШапки - СтрокаТабличнойЧасти.ГрафикПлатежей, ВыборкаИзРезультатаЗапроса.
//  СтрокаСДанными      - СтрокаТабличнойЧасти.ГрафикПлатежей, ВыборкаИзРезультатаЗапроса.
//  СтруктураЗначений   - Структура.
//
//  РежимЗаписи    - РежимЗаписиДокумента.
//  РежимСообщений - Строка: "Нет", "Все", "Ошибки".
//
Процедура СоздатьДокументПланирования(МассивСтрокДляДокумента, СтруктураЗначений, РежимЗаписи, РежимСообщений)
    
    Если МассивСтрокДляДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураЗначений.Свойство("ПараметрРасходДоход")
		ИЛИ НЕ СтруктураЗначений.Свойство("ПараметрПериод") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Если направление - "Расходование".
	Если СтруктураЗначений.ПараметрРасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
		
		Если СтруктураЗначений.ВидДокументаПланирования = "бит_ЗаявкаНаЗатраты" Тогда
			
			Для Каждого ТекСтрока Из МассивСтрокДляДокумента Цикл
				
				// Создадим документ "Заявка на затраты".
				ДокументПланирования = Документы.бит_ЗаявкаНаЗатраты.СоздатьДокумент();
				
				ДокументПланирования.СуммаВключаетНДС = СуммаВключаетНДС;
				ДокументПланирования.ДатаРасхода = СтруктураЗначений.ПараметрПериод;
				
				ЗаполнитьЗначенияСвойств(ДокументПланирования, СтруктураЗначений);
				ЗаполнитьЗначенияСвойств(ДокументПланирования, ТекСтрока);
				
				ДокументПланирования.Дата				= ТекущаяДатаСеанса();
				ДокументПланирования.СуммаНДС			= ТекСтрока.НДС;
				ДокументПланирования.СтатьяОборотов		= ТекСтрока.СтатьяОборотовНачисления;
				ДокументПланирования.СодержаниеЗатрат	= ТекСтрока.НазначениеПлатежа;
				
				// Запишем созданный документ.
				ДействиеВыполнено = ЗаписатьПровестиДокумент(ДокументПланирования, РежимЗаписи,, РежимСообщений);
				Если НЕ ДокументПланирования.ЭтоНовый() Тогда
					
					// Запишем ссылку на документ в строки графика начислений.
					ТекСтрока.ДокументПланирования = ДокументПланирования.Ссылка;
					
					// Заполним визы.
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("СтруктурноеПодразделение", ДокументПланирования.Организация);
					СтруктураПараметров.Вставить("ЦФО"					   , ДокументПланирования.ЦФО);		
					
					// Установим статус.
					ДокументПланирования.УстановитьСтатус();
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе	
			Если СтруктураЗначений.ВидДокументаПланирования = "бит_ЗаявкаНаРасходованиеСредств" Тогда
				ДокументПланирования = Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
				
				// BF-2913
				Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц Тогда
					ДокументПланирования.Получатель = Получатель;
				КонецЕсли; 
			ИначеЕсли СтруктураЗначений.ВидДокументаПланирования = "бит_ЗаявкаНаРасходованиеСредствОбщая" Тогда
				ДокументПланирования = Документы.бит_ЗаявкаНаРасходованиеСредствОбщая.СоздатьДокумент();
			Иначе
				ТекстСообщения = НСтр("ru='Не указан вид создаваемого документа расхода.'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			// Заполним шапку документа.
			МетаДокументПланирования = ДокументПланирования.Метаданные();
			
			Если бит_РаботаСМетаданными.ЕстьРеквизит("ВидОперации", МетаДокументПланирования) Тогда
				Если РасходДоход = Перечисления.бит_РасходДоход.Поступление Тогда
					ДокументПланирования.ВидОперации = ВидОперацииРасходование;
				Иначе
					ДокументПланирования.ВидОперации = ВидОперации;
				КонецЕсли;
			КонецЕсли;
			
			Если бит_РаботаСМетаданными.ЕстьРеквизит("СуммаВключаетНДС", МетаДокументПланирования) Тогда
				ДокументПланирования.СуммаВключаетНДС = СуммаВключаетНДС;
			КонецЕсли;
			
			ДокументПланирования.ДатаРасхода = СтруктураЗначений.ПараметрПериод;
			
			ЗаполнитьЗначенияСвойств(ДокументПланирования, СтруктураЗначений);
			ДокументПланирования.Дата = ТекущаяДатаСеанса();
			
			НазначениеПлатежа = "";
			
			// Заполним табличную часть "Распределение".
			Для каждого ТекСтрока Из МассивСтрокДляДокумента Цикл
				
				НовСтрока = ДокументПланирования.Распределение.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
				НовСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
				
				Если ЗначениеЗаполнено(НазначениеПлатежа) И ЗначениеЗаполнено(ТекСтрока.НазначениеПлатежа) Тогда 
					НазначениеПлатежа = НазначениеПлатежа + " ,";
				КонецЕсли;
				НазначениеПлатежа = НазначениеПлатежа + ТекСтрока.НазначениеПлатежа;
				
			КонецЦикла;
			
			Если СтруктураЗначений.ВидДокументаПланирования = "бит_ЗаявкаНаРасходованиеСредств" Тогда
				КолонкиГруппировок = "ЦФО,СтатьяОборотов,ВидПлатежаПоКредитамЗаймам,Проект,ДоговорКонтрагента,СтавкаНДС,
									|НоменклатурнаяГруппа,ИД,Аналитика_1,Аналитика_2,Аналитика_3,Аналитика_4,Аналитика_5,
									|Аналитика_6,Аналитика_7,ИД_Прогноз";
			Иначе
				КолонкиГруппировок = "ЦФО,СтатьяОборотов,Проект,ДоговорКонтрагента,СтавкаНДС,НоменклатурнаяГруппа,
									|Аналитика_1,Аналитика_2,Аналитика_3,Аналитика_4,Аналитика_5,Аналитика_6,Аналитика_7,ИД";
			КонецЕсли;
			КолонкиСуммирования = "Сумма, НДС";
			ДокументПланирования.Распределение.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
			
			Для каждого Стр Из ДокументПланирования.Распределение Цикл
				ДокументПланирования.УстановитьИДСтроки(Стр);
			КонецЦикла;
			
			// Назначение платежа.
			ДокументПланирования.НазначениеПлатежа    = НазначениеПлатежа;
			ДокументПланирования.НазначениеПлатежаУпр = НазначениеПлатежа;
			
			// Синхронизируем значение первой строки с шапкой документа.
			СтрокаДляСинхронизации = ДокументПланирования.Распределение[0];
			ДокументПланирования.СинхронизироватьРеквизитыШапкиИСтроки(СтрокаДляСинхронизации, "Шапка");
			
			// Запишем созданный документ.
			ДействиеВыполнено = ЗаписатьПровестиДокумент(ДокументПланирования, РежимЗаписи,, РежимСообщений);
			Если НЕ ДокументПланирования.ЭтоНовый() Тогда
				
				// Запишем ссылку на документ в строки графика платежей.
				Для Каждого ТекСтрока Из МассивСтрокДляДокумента Цикл
					ТекСтрока.ДокументПланирования = ДокументПланирования.Ссылка;
				КонецЦикла;
				
				// Если это заявка или прогноз.
				// Заполним визы.
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("СтруктурноеПодразделение", ДокументПланирования.Организация);
				Если ДокументПланирования.Распределение.Количество() > 1 Тогда
					СтруктураПараметров.Вставить("ЦФО", ДокументПланирования.Распределение[0].ЦФО);		
				Иначе	
					СтруктураПараметров.Вставить("ЦФО", ДокументПланирования.ЦФО);		
				КонецЕсли; 
				
				// Установим статус.
				ДокументПланирования.УстановитьСтатус();
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		// Создадим документ "Планируемое поступление денежных средств".
		ДокументПланирования = Документы.бит_ПланируемоеПоступлениеДенежныхСредств.СоздатьДокумент();
		
		// Заполним шапку документа.
		ДокументПланирования.ДатаПоступления = СтруктураЗначений.ПараметрПериод;
		ЗаполнитьЗначенияСвойств(ДокументПланирования, СтруктураЗначений);
		ДокументПланирования.Дата = ТекущаяДатаСеанса();
		
		НазначениеПлатежа = "";
		
		// Заполним табличную часть "Распределение".
		Для Каждого ТекСтрока Из МассивСтрокДляДокумента Цикл
			
			НовСтрока = ДокументПланирования.Распределение.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
			НовСтрока.Контрагент         = Контрагент;
			НовСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
			НовСтрока.ДатаПоступления    = СтруктураЗначений.ПараметрПериод;
			
			Если ЗначениеЗаполнено(НазначениеПлатежа) И ЗначениеЗаполнено(ТекСтрока.НазначениеПлатежа) Тогда 
				НазначениеПлатежа = НазначениеПлатежа + " ,";
			КонецЕсли;
			НазначениеПлатежа = НазначениеПлатежа + ТекСтрока.НазначениеПлатежа;
			
		КонецЦикла;
		
		КолонкиГруппировок = "ЦФО,СтатьяОборотов,Проект,Контрагент,ДоговорКонтрагента,БанковскийСчет,НазначениеПлатежа,
							|СтавкаНДС,ДатаПоступления,НоменклатурнаяГруппа,Аналитика_1,Аналитика_2,Аналитика_3,
							|Аналитика_4,Аналитика_5,Аналитика_6,Аналитика_7,ДатаПлатежаКрайняя,ИД,УдалитьНазначениеПлатежа";
		КолонкиСуммирования = "Сумма, НДС";
		ДокументПланирования.Распределение.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
		Для каждого Стр Из ДокументПланирования.Распределение Цикл
			ДокументПланирования.УстановитьИДСтроки(Стр);
		КонецЦикла;
		
		// Назначение платежа.
		ДокументПланирования.НазначениеПлатежа    = НазначениеПлатежа;
		ДокументПланирования.НазначениеПлатежаУпр = НазначениеПлатежа;
		
		// Синхронизируем значение первой строки с шапкой документа.
		СтрокаДляСинхронизации = ДокументПланирования.Распределение[0];
		ДокументПланирования.СинхронизироватьРеквизитыШапкиИСтроки(СтрокаДляСинхронизации, "Шапка");
		
		// Запишем созданный документ.
		ДействиеВыполнено = ЗаписатьПровестиДокумент(ДокументПланирования, РежимЗаписи,, РежимСообщений);
		Если НЕ ДокументПланирования.ЭтоНовый() Тогда
			
			// Запишем ссылку на документ в строки графика платежей.
			Для Каждого ТекСтрока Из МассивСтрокДляДокумента Цикл
				ТекСтрока.ДокументПланирования = ДокументПланирования.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры

// Функция получает структуру значений для заполнения шапки.
// Создаваемых документов планирования. 
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  СтруктураЗначений - Структура.
//
Функция ЗначенияДляЗаполненияШапкиДокументовПланирования(ИмяГрафика)
    
    СтруктураЗначений = Новый Структура;
	
	Если ИмяГрафика = "ГрафикПлатежей" Тогда
		СтруктураЗначений.Вставить("ТипЗаявки", Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей);
	Иначе
		СтруктураЗначений.Вставить("ТипЗаявки", Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикНачислений);
	КонецЕсли;
	
    СтруктураЗначений.Вставить("Дата"              , Дата);
    СтруктураЗначений.Вставить("ФормаОплаты"       , ФормаОплаты); 
    СтруктураЗначений.Вставить("Важность"          , Перечисления.бит_Важность.Средняя);
    СтруктураЗначений.Вставить("Организация"       , Организация);
    СтруктураЗначений.Вставить("Сценарий"          , Сценарий);
    СтруктураЗначений.Вставить("Контрагент"        , Контрагент);
    СтруктураЗначений.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
    СтруктураЗначений.Вставить("ВалютаДокумента"   , ВалютаДокумента);
	СтруктураЗначений.Вставить("КурсДокумента"     , КурсДокумента);
	СтруктураЗначений.Вставить("КратностьДокумента", КратностьДокумента);        
	Если бит_ОбщегоНазначения.ПолучитьТекущегоПользователя() = Справочники.Пользователи.НайтиПоНаименованию("<Не указан>") Тогда
		СтруктураЗначений.Вставить("Исполнитель"   , Ответственный);
	Иначе		
		СтруктураЗначений.Вставить("Исполнитель"   , бит_ОбщегоНазначения.ПолучитьТекущегоПользователя());
	КонецЕсли;
    СтруктураЗначений.Вставить("Ответственный"     , Ответственный);
    
    Возврат СтруктураЗначений;
    
КонецФункции

// Функция реализует алгоритм определения статуса объекта по-умолчанию.
//
Функция ОпределитьСтатус(НачальныйСтатус, ВсеВизыПолучены, ЕстьОтклонено, вхРежимЗаписи)

    РезСтатус = НачальныйСтатус;
    
    Если вхРежимЗаписи = РежимЗаписиДокумента.Проведение 
        ИЛИ (вхРежимЗаписи = РежимЗаписиДокумента.Запись И Проведен) Тогда
        РезСтатус = Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Рабочий;
    Иначе
        РезСтатус = Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Черновик;
    КонецЕсли; 
    
    Если РезСтатус = Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Рабочий 
        ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Утвержден 
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Отклонен Тогда
		
		Если ЕстьОтклонено Тогда
			
			РезСтатус = Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Отклонен;
			
		Иначе	
			
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Утвержден;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Рабочий;
			КонецЕсли; 
			
		КонецЕсли;
        
    КонецЕсли; 
    
    Возврат РезСтатус;
    
КонецФункции

#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мНастройкиПрограммы = Новый Соответствие;

мВидыОпераций = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование;

мРежимОбновленияВиз    = Константы.бит_РежимОбновленияПеречняВиз.Получить();

// Получаем статус и дату изменения статуса для документа.
РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);

мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

#КонецОбласти

#КонецЕсли