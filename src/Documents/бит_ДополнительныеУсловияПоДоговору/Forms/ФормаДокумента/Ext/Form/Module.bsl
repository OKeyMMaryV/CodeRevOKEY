
#Область ОписаниеПеременных

&НаКлиенте
Перем РедактируемоеПоле; // Хранит имя поля редактируемое в данный момент в таблице.

&НаКлиенте
Перем ФормаМодифицированна; // Хранит значение модифицированности формы перед началом редактирования строки в таблице.

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.бит_ДополнительныеУсловияПоДоговору.ФормаДокументаУправляемая");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И ЗначениеЗаполнено(Объект.ПроектДоговора) Тогда		
		ТекстСообщения = НСтр("ru='Нельзя копировать документ ""Дополнительные условия по договору"" созданный на основании проекта договора'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);  		
	КонецЕсли;	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	МассивТипов.Добавить(Тип("ДокументСсылка.бит_ПроектДоговора"));	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ); 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Параметры.Ключ.Пустая(); 	
	Если ЭтоНовый Тогда		
		СформироватьДеревоВидовОпераций();  		
	КонецЕсли;
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("Организация");
	фКэшРеквизитов.Вставить("Контрагент");
	фКэшРеквизитов.Вставить("ДоговорКонтрагента");
	фКэшРеквизитов.Вставить("ВалютаДокумента");
	фКэшРеквизитов.Вставить("КурсДокумента");
	фКэшРеквизитов.Вставить("КратностьДокумента");
	фКэшРеквизитов.Вставить("Периодичность");
	фКэшРеквизитов.Вставить("ПериодичностьНачисления");
	фКэшРеквизитов.Вставить("ДатаНачала");
	фКэшРеквизитов.Вставить("ДатаОкончания");
	фКэшРеквизитов.Вставить("ДатаНачалаНачисления");
	фКэшРеквизитов.Вставить("ДатаОкончанияНачисления");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	ИначеЕсли ЗначениеЗаполнено(Объект.ПроектДоговора) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПроектДоговора, "ВидДоговора");
	Иначе
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();	
	КонецЕсли; 
	фКэшРеквизитов.Вставить("ВидДоговораКонтрагента", ВидДоговора);
														
	фКэшРеквизитов.Вставить("бит_ТипДоговора", Объект.ДоговорКонтрагента.бит_ТипДоговора);
	
	ЗаполнитьКэшЗначений();
	
	ВосстановитьНастройкиПользователяДляДокумента();
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура. 
	УстановитьПодменюВыбораВидаОперации();
																				   
	// Восстановим в форме пообъектный график платежей.
	ВосстановитьПообъектныйГрафикПлатежей(ЭтоНовый);
	
	ОбновитьДокументыПланирования();
	
    //ОК Довбешка Т. 09.12.2013
	ОбновитьГрафикНачислений();
    //ОК Довбешка Т.
	
	// Настроим отображение полей доп. аналитик в форме.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ЭтотОбъект
																				 ,мКэшЗначений.ИзмеренияДоп
																				 ,мКэшЗначений.НастройкиИзмерений);

	// Настроим отображение полей доп. аналитик в табличном поле ГрафикПлатежей.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект
																			 			,"ГрафикПлатежей"
																						,мКэшЗначений.ИзмеренияДоп
																						,мКэшЗначений.НастройкиИзмерений);
																						
	// Настроим отображение полей доп. аналитик в табличном поле ГрафикНачислений.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект
																			 			,"ГрафикНачислений"
																						,мКэшЗначений.ИзмеренияДоп
																						,мКэшЗначений.НастройкиИзмерений);																					
																					 
	бит_РаботаСДиалогамиСервер.УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы);
	
	// Для ролей ИсполнительКазначейства и ИсполнительПоЗаявкамНаЗатраты 
	// могут отображаться битые ссылки в документах планирования.
	Элементы.ГрафикНачисленийДокументПланирования.Видимость = мКэшЗначений.ЕстьПравоПросмотрЗаявкаНаЗатраты;
		
	УправлениеЭлементамиФормы();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда

			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
				
			Иначе 
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", ДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			КонецЕсли;	
				
		Иначе
			
			ПриОткрытииПромежуточная(Отказ);
			ПриОткрытииОкончание();
			
		КонецЕсли;
						
	Иначе
		
		ПриОткрытииОкончание();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаполнитьФинансовыйГрафик" Тогда
		
		ЗаполнитьФинансовыйГрафик(Параметр);
		
	ИначеЕсли ИмяСобытия = "ВыбратьПериодЗавершение" И Источник = УникальныйИдентификатор Тогда	
		
		Если Параметр.Видпериода = "ПериодПлатежей" Тогда
			ВыборПериодаГрафикПлатежейЗавершение(Параметр.Результат, Неопределено);
		Иначе	
			ВыборПериодаГрафикНачисленийЗавершение(Параметр.Результат, Неопределено);
		КонецЕсли;
		
    ИначеЕсли ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор  Тогда    
        
        ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УстановитьНастройкиДоступностиЭлементов();	
        
    ИначеЕсли ИмяСобытия = "ВосстановитьЗагруженныеИзExcelДанные" И Источник = УникальныйИдентификатор Тогда
        
        ВосстановитьЗагруженныеИзExcelДанные(Параметр.ИмяТабЧасти, Параметр.Ссылка);
        
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьПообъектныйГрафикПлатежей(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров); 
		
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
	КонецЕсли; 
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	ОбновитьДокументыПланирования();
	
	УправлениеЭлементамиФормы();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если Настройки["РежимЗаписи"] = "" Тогда
		Настройки["РежимЗаписи"] = "Запись";
	КонецЕсли;
	
	Если Настройки["РежимСообщений"] = "" Тогда
		Настройки["РежимСообщений"] = "Ошибки";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["РежимЗаписи"] = "" Тогда
		Настройки["РежимЗаписи"] = "Запись";
	КонецЕсли;
	
	Если Настройки["РежимСообщений"] = "" Тогда
		Настройки["РежимСообщений"] = "Ошибки";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ГрафикПлатежейСкрытьПоказатьПараметрыГрафикаПлатежей.Пометка = ОтображатьПараметрыГрафикаПлатежей;
	Элементы.ГрафикНачисленийСкрытьПоказатьПараметрыГрафикаНачислений.Пометка = ОтображатьПараметрыГрафикаНачислений;
	
	Элементы.ГруппаПараметрыГрафикаПлатежейШапка.Видимость = Элементы.ГрафикПлатежейСкрытьПоказатьПараметрыГрафикаПлатежей.Пометка;
	Элементы.ГруппаПараметрыГрафикаНачислений.Видимость    = Элементы.ГрафикНачисленийСкрытьПоказатьПараметрыГрафикаНачислений.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ДополнительныеУсловияПоДоговору";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Сохраним договор контрагента, возможно понадобится к нему вернуться.
	фКэшРеквизитов.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
    ОпределитьСписокДоступныхВидовДоговоровПоОперации(Объект.ВидОперации, Объект.РасходДоход, мКэшЗначений);
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорКонтрагентаПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда 		
		Объект.ВалютаДокумента = ВыбранноеЗначение;
		ВалютаДокументаПриИзмененииКлиент();  		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	
	ЦФОПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяОборотовПриИзменении(Элемент)
	
	СтатьяОборотовПриИзмененииСервер("СтатьяОборотов");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС;
	
	СтатьяОборотовНачалоВыбораКлиент(Элемент, Объект, ТипСтатьи);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяОборотовНачисленияПриИзменении(Элемент)
	
	СтатьяОборотовПриИзмененииСервер("СтатьяОборотовНачисления");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяОборотовНачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР;
	
	СтатьяОборотовНачалоВыбораКлиент(Элемент, Объект, ТипСтатьи);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьДвиженияПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,Объект
															   ,Элемент.Имя
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
															   
КонецПроцедуры

// Процедура - обработчик события "Очистка" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,Объект
	                                                                       	,Элемент.Имя
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
																			
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	Если Не Объект.ГрафикПлатежей.Количество() = 0
        И Не фКэшРеквизитов.Периодичность = Объект.Периодичность Тогда
		
		ТекстВопроса = НСтр("ru='Изменилась периодичность графика платежей. Перезаполнить график платежей?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПерезаполнитьГрафик", ЭтотОбъект, "ГрафикПлатежей"),ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.нет);
				
	Иначе
		
		фКэшРеквизитов.Периодичность = Объект.Периодичность;
		
    КонецЕсли;
    	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьНачисленияПриИзменении(Элемент)
	
	Если Не Объект.ГрафикНачислений.Количество() = 0
        И Не фКэшРеквизитов.ПериодичностьНачисления = Объект.ПериодичностьНачисления Тогда
		
		ТекстВопроса = НСтр("ru='Изменилась периодичность графика начислений. Перезаполнить график начислений?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПерезаполнитьГрафик", ЭтотОбъект, "ГрафикНачислений"),ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.нет);
		
	Иначе
		
		фКэшРеквизитов.ПериодичностьНачисления = Объект.ПериодичностьНачисления;

    КонецЕсли;
    	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииПериодаГрафикаКлиент("ГрафикПлатежей");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииПериодаГрафикаКлиент("ГрафикПлатежей");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаНачисленияПриИзменении(Элемент)
	
	ПриИзмененииПериодаГрафикаКлиент("ГрафикНачислений");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияНачисленияПриИзменении(Элемент)
	
	ПриИзмененииПериодаГрафикаКлиент("ГрафикНачислений");
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	РассчитатьСуммуНДС(Объект, "СуммаПриход", "СуммаНДСПриход");
	РассчитатьСуммуНДС(Объект, "СуммаРасход", "СуммаНДСРасход");
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСНачисленияПриИзменении(Элемент)
	
	РассчитатьСуммуНДС(Объект, "СуммаПриходНачисления", "СуммаНДСПриходНачисления", , "СтавкаНДСНачисления");
	РассчитатьСуммуНДС(Объект, "СуммаРасходНачисления", "СуммаНДСРасходНачисления", , "СтавкаНДСНачисления");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриходПриИзменении(Элемент)
	
	Направление = мКэшЗначений.Перечисления.бит_РасходДоход.Поступление;
	
	СуммаВШапкеГрафикаПриИзмененииКлиент("ГрафикПлатежей", Направление, "СуммаПриход", "СуммаНДСПриход");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаРасходПриИзменении(Элемент)
	
	Направление = мКэшЗначений.Перечисления.бит_РасходДоход.Расходование;
	
	СуммаВШапкеГрафикаПриИзмененииКлиент("ГрафикПлатежей", Направление, "СуммаРасход", "СуммаНДСРасход");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриходНачисленияПриИзменении(Элемент)
	
	Направление = мКэшЗначений.Перечисления.бит_РасходДоход.Поступление;
	
	СуммаВШапкеГрафикаПриИзмененииКлиент("ГрафикНачислений", Направление, "СуммаПриходНачисления", "СуммаНДСПриходНачисления");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаРасходНачисленияПриИзменении(Элемент)
	
	Направление = мКэшЗначений.Перечисления.бит_РасходДоход.Расходование;
	
	СуммаВШапкеГрафикаПриИзмененииКлиент("ГрафикНачислений", Направление, "СуммаРасходНачисления", "СуммаНДСРасходНачисления");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииРасходованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивОпераций = Новый Массив;	
    
    Если Объект.РасходДоход = мКэшЗначений.Перечисления.бит_РасходДоход.Поступление Тогда
        
        ПеречислениеМенеджер = мКэшЗначений.Перечисления.бит_ВидыОперацийЗаявкаНаРасходование;
        
        МассивОпераций.Добавить(ПеречислениеМенеджер.ОплатаПоставщику);
        МассивОпераций.Добавить(ПеречислениеМенеджер.ВозвратДенежныхСредствПокупателю);
		//МассивОпераций.Добавить(ПеречислениеМенеджер.РасчетыПоКредитамИЗаймамСКонтрагентами);
        
        Если Объект.ФормаОплаты = мКэшЗначений.Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
            МассивОпераций.Добавить(ПеречислениеМенеджер.ПрочиеРасчетыСКонтрагентами);
        КонецЕсли;
        
    КонецЕсли;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивОпераций);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ВРег(ТекущаяСтраница.Имя) =  ВРег("ГруппаГрафикПлатежей")
		ИЛИ ВРег(ТекущаяСтраница.Имя) =  ВРег("ГруппаГрафикНачислений")Тогда
		ОФормитьТаблицу(СтрЗаменить(ТекущаяСтраница.Имя, "Группа",""));
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "АвтоПодбор" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,Объект
															   ,Элемент.Имя
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
                                                               
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикПлатежей

&НаКлиенте
Процедура ГрафикПлатежейПриИзменении(Элемент)
	
	ПересчитатьИтогиГрафиков("ГрафикПлатежей");
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установка флажка в колонке Выполнять влечет за собой установку модифицированности формы (особенность платформы)
	// что неверно, т.к. колонка это реквизит формы, а не объекта
	// - поэтому ПриОкончанииРедактирования уберем признак модифицированности.
	РедактируемоеПоле = Элемент.ТекущийЭлемент.Имя;
	ФормаМодифицированна = Модифицированность;
	
	Если НоваяСтрока
		И НЕ Копирование Тогда
		
		ТекущиеДанные.РасходДоход          = Объект.РасходДоход;
		ТекущиеДанные.ЦФО                  = Объект.ЦФО;
		ТекущиеДанные.СтатьяОборотов       = Объект.СтатьяОборотов;
		Если УчетПоИзмерению(ТекущиеДанные.СтатьяОборотов, "Учет_Проект")  Тогда
			ТекущиеДанные.Проект               = Объект.Проект;
		КонецЕсли;
		Если УчетПоИзмерению(ТекущиеДанные.СтатьяОборотов, "Учет_НоменклатурнаяГруппа")  Тогда
			ТекущиеДанные.НоменклатурнаяГруппа = Объект.НоменклатурнаяГруппа;
		КонецЕсли;
				
		Для н = 1 По мКэшЗначений.МаксКолвоДопАналитик Цикл
			Если УчетПоИзмерению(ТекущиеДанные.СтатьяОборотов, "Учет_Аналитика_"+н) Тогда
				ТекущиеДанные["Аналитика_"+н]  = Объект["Аналитика_"+н];
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные.СтавкаНДС            = Объект.СтавкаНДС;
		
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, мКэшЗначений.ИзмеренияДоп, мКэшЗначений.НастройкиИзмерений);
		
		ОФормитьТаблицу("ГрафикПлатежей", ТекущиеДанные.СтатьяОборотов);
		
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.ДокументПланирования = Неопределено;
		ТекущиеДанные.НазначениеПлатежа    = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УчетПоИзмерению(СтатьяОборотов, Измерение)
	
	Возврат СтатьяОборотов[Измерение];	
	
КонецФункции

&НаКлиенте
Процедура ГрафикПлатежейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если РедактируемоеПоле = "ГрафикПлатежейВыполнять"
		И ФормаМодифицированна = Ложь Тогда
		
		Модифицированность = Ложь;
	КонецЕсли;
		
	
	// Установим видимость поля выбора "ВидОперацииРасходование".
	УстановитьВидимостьПоляВыбора_ВидОперацииРасходование();
	
	// Пометим даты попадающие на выходной.
	ПометитьПлатежиПопадающиеНаВыходной("ГрафикПлатежей");
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ПересчитатьИтогиГрафиков("ГрафикПлатежей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейПередУдалением(Элемент, Отказ)
	
	Если Элемент.ВыделенныеСтроки.Количество()>1 Тогда
		Отказ = Истина;
		Индекс = Элемент.ВыделенныеСтроки.ВГраница();
		Пока Индекс > -1 Цикл
			Идентификатор = Элемент.ВыделенныеСтроки[Индекс];
			ТекущаяСтрока = Объект.ГрафикПлатежей.НайтиПоИдентификатору(Идентификатор);
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.ДокументПланирования) Тогда
				Объект.ГрафикПлатежей.Удалить(ТекущаяСтрока);
			КонецЕсли; 
			Индекс = Индекс-1;
		КонецЦикла; 
	Иначе
		ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	    Если ТекущиеДанные = Неопределено Тогда
	        Возврат;
	    КонецЕсли;
	    
	    Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
			ТекстСообщения = НСтр("ru='Для данной строки сформирован документ планирования. Удаление строки невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	    КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейПослеУдаления(Элемент)
	
	// Установим видимость поля выбора "ВидОперацииРасходование".
	УстановитьВидимостьПоляВыбора_ВидОперацииРасходование();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейРасходДоходОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейЦФОПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	
	ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС;
	
	ЦФОПриИзмененииВСтрокеСервер("ГрафикПлатежей", ТекущиеДанные.ПолучитьИдентификатор(), "СтатьяОборотов", ТипСтатьи);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	
	СтатьяОборотовПриИзмененииВСтрокеСервер("ГрафикПлатежей", ТекущиеДанные.ПолучитьИдентификатор(), "СтатьяОборотов");
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	
	ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС;
	
	СтатьяОборотовНачалоВыбораКлиент(Элемент, ТекущиеДанные, ТипСтатьи);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ГрафикПлатежей", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
	                                                                       	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
																			
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ГрафикПлатежей", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
															   
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные, "СуммаБезНДС", , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейДокументПланированияПриИзменении(Элемент)
	
	// Обновим документы планирования.
	ОбновитьДокументыПланирования();
	
	// Установить видимость реквизитов.
	УправлениеЭлементамиФормы();
	
КонецПроцедуры
           
&НаКлиенте
Процедура ГрафикПлатежейНаименованиеСобытияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	ПоказатьЗначение(,ТекущиеДанные.Событие);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейАналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ГрафикПлатежей", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
															   
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикНачислений

&НаКлиенте
Процедура ГрафикНачисленийПриИзменении(Элемент)
	
	ПересчитатьИтогиГрафиков("ГрафикНачислений");
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установка флажка в колонке Выполнять влечет за собой установку модифицированности формы (особенность платформы)
	// что неверно, т.к. колонка это реквизит формы, а не объекта
	// - поэтому ПриОкончанииРедактирования уберем признак модифицированности.
	РедактируемоеПоле = Элемент.ТекущийЭлемент.Имя;
	ФормаМодифицированна = Модифицированность;
	
	Если НоваяСтрока
		И НЕ Копирование Тогда
		
		ТекущиеДанные.РасходДоход          = Объект.РасходДоход;
		ТекущиеДанные.ЦФО                  = Объект.ЦФО;
		ТекущиеДанные.СтатьяОборотовНачисления = Объект.СтатьяОборотовНачисления;
		Если УчетПоИзмерению(ТекущиеДанные.СтатьяОборотовНачисления, "Учет_Проект")  Тогда
			ТекущиеДанные.Проект               = Объект.Проект;
		КонецЕсли;
		Если УчетПоИзмерению(ТекущиеДанные.СтатьяОборотовНачисления, "Учет_НоменклатурнаяГруппа")  Тогда
			ТекущиеДанные.НоменклатурнаяГруппа = Объект.НоменклатурнаяГруппа;
		КонецЕсли;
		
		Для н = 1 По мКэшЗначений.МаксКолвоДопАналитик Цикл
			Если УчетПоИзмерению(ТекущиеДанные.СтатьяОборотовНачисления, "Учет_Аналитика_"+н) Тогда
				ТекущиеДанные["Аналитика_"+н]  = Объект["Аналитика_"+н];
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные.СтавкаНДС            = Объект.СтавкаНДСНачисления;		
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, мКэшЗначений.ИзмеренияДоп, мКэшЗначений.НастройкиИзмерений);
		ОФормитьТаблицу("ГрафикНачислений", ТекущиеДанные.СтатьяОборотовНачисления);
		
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.ДокументПланирования = Неопределено;
		ТекущиеДанные.НазначениеПлатежа    = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если РедактируемоеПоле = "ГрафикНачисленийВыполнять"
		И ФормаМодифицированна = Ложь Тогда
		
		Модифицированность = Ложь;
	КонецЕсли;
	
	// Пометим даты попадающие на выходной	
	//ОК Калинин М. 160413
	//ПометитьПлатежиПопадающиеНаВыходной("ГрафикНачислений");
 	ПересчетИтоговыхСуммГрафикаНачислений(Истина);
	//ОК Калинин М.
	
    //{begin  Санникова Н.В. ошибка обновления 29.09.2020 
	//Если НоваяСтрока И ОтменаРедактирования Тогда
	//	ПересчитатьИтогиГрафиков("ГрафикНачислений");
	//КонецЕсли;
	// Санникова Н.В. ошибка обновления 29.09.2020 end}
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийПередУдалением(Элемент, Отказ)
	
	Если Элемент.ВыделенныеСтроки.Количество()>1 Тогда
		Отказ = Истина;
		Индекс = Элемент.ВыделенныеСтроки.ВГраница();
		Пока Индекс > -1 Цикл
			Идентификатор = Элемент.ВыделенныеСтроки[Индекс];
			ТекущаяСтрока = Объект.ГрафикНачислений.НайтиПоИдентификатору(Идентификатор);
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.ДокументПланирования) Тогда
				Объект.ГрафикНачислений.Удалить(ТекущаяСтрока);
			КонецЕсли; 
			Индекс = Индекс-1;
		КонецЦикла; 
	Иначе
		ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	    Если ТекущиеДанные = Неопределено Тогда
	        Возврат;
	    КонецЕсли;
	    
	    Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
			ТекстСообщения = НСтр("ru='Для данной строки сформирован документ планирования. Удаление строки невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийРасходДоходОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийЦФОПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	
	ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР;
	
	ЦФОПриИзмененииВСтрокеСервер("ГрафикНачислений", ТекущиеДанные.ПолучитьИдентификатор(), "СтатьяОборотовНачисления", ТипСтатьи);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийСтатьяОборотовНачисленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	
	СтатьяОборотовПриИзмененииВСтрокеСервер("ГрафикНачислений", ТекущиеДанные.ПолучитьИдентификатор(), "СтатьяОборотовНачисления");
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийСтатьяОборотовНачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	
	ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР;
	
	СтатьяОборотовНачалоВыбораКлиент(Элемент, ТекущиеДанные, ТипСтатьи);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ГрафикНачислений", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
															   
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ГрафикНачислений", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
	                                                                       	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
																			
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные, "СуммаБезНДС", , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийДокументПланированияПриИзменении(Элемент)
	
	// Обновим документы планирования.
	ОбновитьДокументыПланирования();
	
	// Установить видимость реквизитов.
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНачисленийАналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ГрафикНачислений", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
															   
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыПланирования

&НаКлиенте
Процедура ДокументыПланированияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДокументыПланированияДокументПланирования" Тогда
		Стр = ДокументыПланирования.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если НЕ Стр = Неопределено
			И НЕ ТипЗнч(Стр.ДокументПланирования) = Тип("Строка") Тогда
			ПоказатьЗначение(,Стр.ДокументПланирования);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПланированияВыполнятьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыПланирования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// затемненный флажок устанавливается только программно.
	Если ТекущиеДанные.Выполнять = 2 Тогда
		ТекущиеДанные.Выполнять = 0;
	КонецЕсли;
	
	ИзменитьФлажкиДерево(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Выполнять);
	
	ИзменитьФлажкиРодителей(ТекущиеДанные.ПолучитьРодителя(), ТекущиеДанные.Выполнять);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикВыдачиТраншей

&НаКлиенте
Процедура ГрафикВыдачиТраншейДатаТраншаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикВыдачиТраншей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикВыдачиТраншейДатаТраншаПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыдачиТраншейДатаПогашенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикВыдачиТраншей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикВыдачиТраншейДатаПогашенияПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыдачиТраншейПредставлениеМесяцаПервогоПлатежаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыдачиТраншейПредставлениеМесяцаПервогоПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГрафикВыдачиТраншей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТемпПредставлениеПериода = ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа;
	
	СтрПериодичность = "Месяц";
	ПериодичностьПланирования = мКэшЗначений.Перечисления.бит_ПериодичностьПланирования.Месяц;
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериода(Элемент, 
												ЭтотОбъект, 
												СтандартнаяОбработка, 
												ТекущиеДанные.МесяцПервогоПлатежа, 
												СтрПериодичность, 
												ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа);
												
	ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа = бит_РаботаСДиалогамиСервер.СформироватьПредставлениеПериода(ТекущиеДанные.МесяцПервогоПлатежа, ПериодичностьПланирования);

КонецПроцедуры

&НаКлиенте
Процедура ГрафикВыдачиТраншейПредставлениеМесяцаПервогоПлатежаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГрафикВыдачиТраншей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа) Тогда
		
		ПериодичностьПланирования = мКэшЗначений.Перечисления.бит_ПериодичностьПланирования.Месяц;
		
		ТекущиеДанные.МесяцПервогоПлатежа = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ТекущиеДанные.МесяцПервогоПлатежа
																					, Направление
																					, ПериодичностьПланирования);
																					
		ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа = бит_РаботаСДиалогамиСервер.СформироватьПредставлениеПериода(ТекущиеДанные.МесяцПервогоПлатежа, ПериодичностьПланирования);
		
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПообъектныйГрафик

&НаКлиенте
Процедура ПообъектныйГрафикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элементы.ПообъектныйГрафик.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	// Копирование.
	Если Копирование Тогда
		
		Отказ = Истина;
		
		Если РодительСтроки = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		
		РодительСтроки.Сумма = РодительСтроки.Сумма + ТекущиеДанные.Сумма;
		
		КоллекцияСтрок = РодительСтроки.ПолучитьЭлементы();	
		
		НовСтрока = КоллекцияСтрок.Добавить();
		НовСтрока.Сумма = ТекущиеДанные.Сумма;
		
	Иначе 
	
		// Добавление.
		Если НЕ РодительСтроки = Неопределено Тогда
			Отказ = Истина;
			
			КоллекцияСтрок = РодительСтроки.ПолучитьЭлементы();	
			НовСтрока = КоллекцияСтрок.Добавить();
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НЕ НовСтрока = Неопределено Тогда
		Элементы.ПообъектныйГрафик.ТекущаяСтрока = НовСтрока;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПообъектныйГрафикПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПообъектныйГрафик.ТекущиеДанные;
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	ТекущиеДанные.ЭтоВерхнийУровень = РодительСтроки = Неопределено;
	
	Если НоваяСтрока 
		И НЕ Копирование Тогда
		
		ЗаполнитьОбъектВПообъектномГрафике(ТекущиеДанные.ПолучитьИдентификатор()); 
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПообъектныйГрафикПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ПообъектныйГрафик.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	ИмяКолонки = СтрЗаменить(ИмяКолонки, "ПообъектныйГрафик", "");
	
	Если НЕ РодительСтроки = Неопределено 
		И (ИмяКолонки = "Объект" ИЛИ ИмяКолонки = "КоэффициентРаспределения") Тогда
		
		Отказ = Истина;
		
	ИначеЕсли РодительСтроки = Неопределено 
		И НЕ ИмяКолонки = "Объект" 
		И НЕ ИмяКолонки = "КоэффициентРаспределения" Тогда
		
			Отказ = Истина;
			ЗаполнитьГрафикПоОбъектуКлиент(ТекущиеДанные);
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПообъектныйГрафикПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ПообъектныйГрафик.ТекущиеДанные;
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	Если НЕ РодительСтроки = Неопределено Тогда
		
	    РодительСтроки.Сумма = РодительСтроки.Сумма - ТекущиеДанные.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПообъектныйГрафикОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПообъектныйГрафик.ТекущиеДанные;
	
	ЗаполнитьОбъектВПообъектномГрафике(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПообъектныйГрафикОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПообъектныйГрафик.ТекущиеДанные;
	
	ЗаполнитьОбъектВПообъектномГрафике(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПообъектныйГрафикСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПообъектныйГрафик.ТекущиеДанные;
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительСтроки = Неопределено Тогда
		СтрокаРодитель = ТекущиеДанные;
	Иначе
		СтрокаРодитель = РодительСтроки;
	КонецЕсли;
	
	ПосчитатьОбщуюСуммуПоОбъекту(СтрокаРодитель.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьСобытие(Команда)
	
	ТекущиеДанные = Элементы.ГрафикПлатежей.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные) <> Тип("Неопределено") Тогда
		
		Если ПроверкаСобытия(ТекущиеДанные.СостояниеСобытия, ТекущиеДанные.Событие) Тогда
		
			ТекущаяСтрока = Элементы.ГрафикПлатежей.ТекущаяСтрока;
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеФормыВыбораДаты", ЭтотОбъект, ТекущаяСтрока);
			ОткрытьФорму("Документ.бит_СобытиеДоговора.Форма.ФормаДатыВыполнения",,ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)

	Если Команда = Неопределено
		ИЛИ (НЕ ДокументыПланирования.ПолучитьЭлементы().Количество() = 0) Тогда
		Возврат;
	КонецЕсли; 
	
	// Запомним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации; 
	ПредыдущийФормаОплаты = Объект.ФормаОплаты;
	ПредыдущееНаправление = Объект.РасходДоход;
	
	ИмяКоманды = Команда.Имя;
	ИмяКнопки  = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция    = Найти(ИмяКнопки, "_");
	
	Если НЕ Позиция = 0 Тогда
		
		ИмяПодменю      = Лев(ИмяКнопки , Позиция - 1);
		ИмяВидаОперации = Сред(ИмяКнопки, Позиция + 1);
		
		Объект.ВидОперации = мКэшЗначений.Перечисления.бит_ВидыОперацийЗаявкаНаРасходование[ИмяВидаОперации];
		Объект.ФормаОплаты = мКэшЗначений.Перечисления.бит_ВидыДенежныхСредств[ИмяПодменю];
		Объект.РасходДоход = мКэшЗначений.Перечисления.бит_РасходДоход.Расходование
		
	Иначе
		
		Объект.ВидОперации = Неопределено;
		Объект.ФормаОплаты = мКэшЗначений.Перечисления.бит_ВидыДенежныхСредств[ИмяКнопки];
		Объект.РасходДоход = мКэшЗначений.Перечисления.бит_РасходДоход.Поступление;
		
	КонецЕсли;
	
	// Если операция, форма оплаты и направление не поменялись, тогда выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации
		И ПредыдущийФормаОплаты = Объект.ФормаОплаты
		И ПредыдущееНаправление = Объект.РасходДоход Тогда 
		
		Возврат;
	КонецЕсли;
	
	// Определим список видов договоров доступных после изменения вида операции.
	ОпределитьСписокДоступныхВидовДоговоровПоОперации(Объект.ВидОперации, Объект.РасходДоход, мКэшЗначений);
	
	ТекстВопроса = "";
	
	// Проверим вид операции договора, зачистим при необходимости.
	флОчиститьДоговор = Ложь;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
	
		Если мКэшЗначений.СписокВидовДоговоров.НайтиПоЗначению(фКэшРеквизитов.ВидДоговораКонтрагента) = Неопределено Тогда
			 флОчиститьДоговор = Истина;
		КонецЕсли;	
	
	КонецЕсли; 
	
	Если флОчиститьДоговор Тогда
		ТекстСообщения = НСтр("ru='Вид договора не соответствует виду операции. Договор будет очищен.'");
		ТекстВопроса = ТекстВопроса + Символы.ПС + ТекстСообщения;
	КонецЕсли;
	
	Если НЕ ПредыдущееНаправление = Объект.РасходДоход Тогда
		ТекстСообщения = НСтр("ru='Изменилось направление с %1% на %2%. Строки графиков не соответствующие новому направлению будут очищены.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ПредыдущееНаправление, Объект.РасходДоход);
		ТекстВопроса = ТекстВопроса + Символы.ПС + ТекстСообщения;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("флОчиститьДоговор", флОчиститьДоговор);
		ДопПараметры.Вставить("ПредыдущийВидОперации", ПредыдущийВидОперации);
		ДопПараметры.Вставить("ПредыдущийФормаОплаты", ПредыдущийФормаОплаты);
		ДопПараметры.Вставить("ПредыдущееНаправление", ПредыдущееНаправление);
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОчищенияДанныхПриУстановкеОперации", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если флОчиститьДоговор Тогда
			Объект.ДоговорКонтрагента = Неопределено;
			
			ДоговорКонтрагентаПриИзмененииСервер();
		Иначе
			ОчиститьНедоступныеСуммыИСтрокиГрафиков();
		КонецЕсли;
		
		// Проверим принадлежность ЦФО к статье оборотов.
		ЦФОПриИзмененииСервер();
		
		Объект.ФормироватьДвижения = ОбязательноФормироватьДвиженияПоМСФО();
		
		Модифицированность = Истина;
		
		// Установить видимость реквизитов по виду операции.
		УправлениеЭлементамиФормы();

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.ДатаНачала);
	ПараметрыПередачи.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	ПараметрыПередачи.Вставить("ВидПериода", 	"ПериодПлатежей");
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);
	
КонецПроцедуры

// Процедура обработчик оповещения "ВыборПериодаГрафикПлатежейЗавершение".
//
// Параметры:
// Период 				- СтандартныйПериод
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВыборПериодаГрафикПлатежейЗавершение(Период, ДополнительныеДанные)

	Если Период <> Неопределено Тогда
	
		Объект.ДатаНачала    = Период.ДатаНачала;
		Объект.ДатаОкончания = Период.ДатаОкончания;
		
		ПриИзмененииПериодаГрафикаКлиент("ГрафикПлатежей");
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаНачисления(Команда)
		
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.ДатаНачалаНачисления);
	ПараметрыПередачи.Вставить("ДатаОкончания", Объект.ДатаОкончанияНачисления);
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	ПараметрыПередачи.Вставить("ВидПериода", 	"ПериодНачислений");
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);

КонецПроцедуры

// Процедура обработчик оповещения "ВыборПериодаГрафикНачисленийЗавершение".
//
// Параметры:
// Период 				- СтандартныйПериод
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВыборПериодаГрафикНачисленийЗавершение(Период, ДополнительныеДанные)

	Если Период <> Неопределено Тогда
	
		Объект.ДатаНачалаНачисления    = Период.ДатаНачала;
		Объект.ДатаОкончанияНачисления = Период.ДатаОкончания;
		
		ПриИзмененииПериодаГрафикаКлиент("ГрафикНачислений");
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПиктограммыДокуменов(Команда)
	
	ОбновитьПиктограммыДокуменовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериодаГрафикаКлиент(ИмяГрафика)
	
	Если ИмяГрафика = "ГрафикПлатежей" Тогда
		ИмяДатаНачала = "ДатаНачала";
		ИмяДатаОкончания = "ДатаОкончания";
	Иначе
		ИмяДатаНачала = "ДатаНачалаНачисления";
		ИмяДатаОкончания = "ДатаОкончанияНачисления";
	КонецЕсли;
	
	Если Объект[ИмяДатаНачала] > Объект[ИмяДатаОкончания]
		И Объект[ИмяДатаОкончания]<> Дата('00010101') Тогда
		ТекстСообщения = НСтр("ru = '""Дата окончания"" установлена ранее чем ""Дата начала""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		Объект[ИмяДатаОкончания] = Объект[ИмяДатаНачала];
	КонецЕсли;
	
	Если НЕ Объект[ИмяГрафика].Количество() = 0
        И (НЕ фКэшРеквизитов[ИмяДатаНачала] = Объект[ИмяДатаНачала]
		ИЛИ НЕ фКэшРеквизитов[ИмяДатаОкончания] = Объект[ИмяДатаОкончания]) Тогда
        
        ТекстВопроса = "Изменился период. Перезаполнить график?"; 
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяДатаНачала",    ИмяДатаНачала);
		ДопПараметры.Вставить("ИмяДатаОкончания", ИмяДатаНачала);
		ДопПараметры.Вставить("ИмяГрафика",       ИмяГрафика);
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросПриИзмененииПериодаГрафика", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		фКэшРеквизитов[ИмяДатаНачала]    = Объект[ИмяДатаНачала];
		фКэшРеквизитов[ИмяДатаОкончания] = Объект[ИмяДатаОкончания];

    КонецЕсли;
    
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//  ДопПараметры - Структура.
//
&НаКлиенте
Процедура ВопросПриИзмененииПериодаГрафика(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		ПриИзмененииПериодаСервер(ДопПараметры.ИмяГрафика);
		
	КонецЕсли;

	фКэшРеквизитов[ДопПараметры.ИмяДатаНачала]    = Объект[ДопПараметры.ИмяДатаНачала];
	фКэшРеквизитов[ДопПараметры.ИмяДатаОкончания] = Объект[ДопПараметры.ИмяДатаОкончания];

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиПлатежи(Команда)
	
	ИзменитьФлажки("ГрафикПлатежей", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиПлатежи(Команда)
	
	ИзменитьФлажки("ГрафикПлатежей", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиНачисления(Команда)
	
	ИзменитьФлажки("ГрафикНачислений", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиНачисления(Команда)
	
	ИзменитьФлажки("ГрафикНачислений", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДокументы(Команда)
	
	ИзменитьФлажкиДерево(ДокументыПланирования.ПолучитьЭлементы(), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиДокументы(Команда)
	
	ИзменитьФлажкиДерево(ДокументыПланирования.ПолучитьЭлементы(), 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументыПланирования(Команда)
	
	Если ДокументыПланирования.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Документ изменен. 
		|Для установки пометки на удаление документов планирования его необходимо записать.
		|Записать?'");
		
		ОповещениеУстановкаПометокНаУдаление = Новый ОписаниеОповещения("ВопросУстановкаПометокНаУдаление", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеУстановкаПометокНаУдаление, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
	Иначе
		
		ТекстВопроса = НСтр("ru='После пометки на удаление ссылки на документы планирования в таблицах ""График платежей"", ""График начислений""
                  | и ""Документы планирования"" будут очищены. Продолжить?'");
				  
		ОповещениеВопросОчисткаСсылок = Новый ОписаниеОповещения("ВопросОчисткаСсылок", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопросОчисткаСсылок, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
				
	КонецЕсли;
	 	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоНастройкеExcel(Команда)
	
	ОткрытьФормуЗагрузкиДанныхИзExcel("ГрафикПлатежей");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЧерезТабДокГрафикНачислений(Команда)
    
    ОткрытьФормуЗагрузкиДанныхЧерезТабДок("ГрафикНачислений");
    
КонецПроцедуры // ЗагрузитьЧерезТабДокГрафикНачислений()

&НаКлиенте
Процедура ЗагрузитьЧерезТабДокГрафикПлатежей(Команда)
    
    ОткрытьФормуЗагрузкиДанныхЧерезТабДок("ГрафикПлатежей");
	
КонецПроцедуры // ЗагрузитьЧерезТабДокГрафикПлатежей()

&НаКлиенте
Процедура ЗагрузитьЧерезТабДокПообъектныйГрафик(Команда)
    
    ОткрытьФормуЗагрузкиДанныхЧерезТабДок("ПообъектныйГрафикПлатежей");
	
КонецПроцедуры // ЗагрузитьЧерезТабДокПообъектныйГрафик()

&НаКлиенте
Процедура РаспределитьПропорциональноПлатежи(Команда)
	
	Если Объект.ГрафикПлатежей.Количество() = 0 Тогда
        // Распределять не по чему.
        Возврат;
    КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Будет выполнено пропорциональное распределение сумм документа по графику платежей. Продолжить?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("График", "ГрафикПлатежей");
	ДопПараметры.Вставить("МетодРаспределения", "Пропорционально");
	
	ОпопвещениеВопрос = Новый ОписаниеОповещения("ВопросРаспределитьПлатежиНачисления", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОпопвещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоКоэффициентуПлатежи(Команда)
	
	Если Объект.ГрафикПлатежей.Количество() = 0 Тогда
        // Распределять не по чему.
        Возврат;
    КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Будет выполнено распределение сумм документа по коэффициентам графика платежей. Продолжить?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("График", "ГрафикПлатежей");
	ДопПараметры.Вставить("МетодРаспределения", "ПоКоэффициенту"); 
	
	ОпопвещениеВопрос = Новый ОписаниеОповещения("ВопросРаспределитьПлатежиНачисления", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОпопвещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПропорциональноНачисления(Команда)
	
	Если Объект.ГрафикНачислений.Количество() = 0 Тогда
        // Распределять не по чему.
        Возврат;
    КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Будет выполнено пропорциональное распределение сумм документа по графику начислений. Продолжить?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("График", "ГрафикНачислений");
	ДопПараметры.Вставить("МетодРаспределения", "Пропорционально");
	
	ОпопвещениеВопрос = Новый ОписаниеОповещения("ВопросРаспределитьПлатежиНачисления", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОпопвещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоКоэффициентуНачисления(Команда)
	
	Если Объект.ГрафикНачислений.Количество() = 0 Тогда
        // Распределять не по чему.
        Возврат;
    КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Будет выполнено распределение сумм документа по коэффициентам графика начислений. Продолжить?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("График", "ГрафикНачислений");
	ДопПараметры.Вставить("МетодРаспределения", "ПоКоэффициенту"); 
	
	ОпопвещениеВопрос = Новый ОписаниеОповещения("ВопросРаспределитьПлатежиНачисления", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОпопвещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафикуНачислений(Команда)
	
	ЗаполнитьГрафикПриемникПоГрафикуИсточнику("ГрафикПлатежей", "ГрафикНачислений");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафикуПлатежей(Команда)
	
	ЗаполнитьГрафикПриемникПоГрафикуИсточнику("ГрафикНачислений", "ГрафикПлатежей");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФинансовыйГрафикПлатежей(Команда)
	
	ОткрытьОбработкуФормированиеФинансовыхГрафиков(мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФинансовыйГрафикНачислений(Команда)
	
	ОткрытьОбработкуФормированиеФинансовыхГрафиков(мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПланированияПлатежей(Команда)
	
	СоздатьДокументыПланированияКлиент("ГрафикПлатежей", "бит_ЗаявкаНаРасходованиеСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПрогнозированияПлатежей(Команда)
	
	СоздатьДокументыПланированияКлиент("ГрафикПлатежей", "бит_ЗаявкаНаРасходованиеСредствОбщая");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПланированияНачислений(Команда)
	
	СоздатьДокументыПланированияКлиент("ГрафикНачислений", "бит_ЗаявкаНаЗатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьГрафикПлатежей(Команда)
	
	СоздатьИзменитьГрафикКлиент("ГрафикПлатежей");
    
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьГрафикНачислений(Команда)
	
	СоздатьИзменитьГрафикКлиент("ГрафикНачислений");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбъект(Команда)
	
	СтрокиГрафика = ПообъектныйГрафик.ПолучитьЭлементы();
	
	НоваяСтрока = СтрокиГрафика.Добавить();
	НоваяСтрока.ЭтоВерхнийУровень = Истина;
	
	ИДНоваяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗаполнитьОбъектВПообъектномГрафике(ИДНоваяСтрока);
	
	Элементы.ПообъектныйГрафик.ТекущаяСтрока = ИДНоваяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьПообъектныйГрафик(Команда)
	
	ТекущиеДанные = Элементы.ПообъектныйГрафик.ТекущиеДанные;
	
	СтрокаГрафика = ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
		
		Если НЕ РодительСтроки = Неопределено Тогда
			СтрокаГрафика = РодительСтроки;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьГрафикПоОбъектуКлиент(СтрокаГрафика);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоНастройкеExcelПообъектныйГрафик(Команда)
	
	ОткрытьФормуЗагрузкиДанныхИзExcel("ПообъектныйГрафикПлатежей");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнвентарныеНомераПообъектныйГрафик(Команда)
	
	КоллекцияСтрокДерева = ПообъектныйГрафик.ПолучитьЭлементы();
	
	Если КоллекцияСтрокДерева.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	МассивОС = Новый Массив;
	
	Для Каждого СтрокаГрафика Из КоллекцияСтрокДерева Цикл
		
		Если ТипЗнч(СтрокаГрафика.Объект) = Тип("СправочникСсылка.ОсновныеСредства") 
			И МассивОС.Найти(СтрокаГрафика.Объект) = Неопределено Тогда
			
		    МассивОС.Добавить(СтрокаГрафика.Объект);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если МассивОС.Количество() > 0 Тогда
	
		СоответствиеОС = ПолучитьИнвентарныеНомераОС(МассивОС);	
		
		Для Каждого СтрокаГрафика Из КоллекцияСтрокДерева Цикл
			
			Если ТипЗнч(СтрокаГрафика.Объект) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
				
				ИнвентарныйНомер = СоответствиеОС.Получить(СтрокаГрафика.Объект);
				
				Если НЕ СтрокаГрафика.ИнвентарныйНомер = ИнвентарныйНомер Тогда
					СтрокаГрафика.ИнвентарныйНомер = ИнвентарныйНомер;				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОбщемуГрафику(Команда)
	
	ЗаполнитьПоОбщемуГрафикуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзПообъектногоГрафика(Команда)
	
	Если Не Объект.ГрафикПлатежей.Количество() = 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'График платежей будет перезаполнен. Продолжить?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗаполнитьИзПообъектногоГрафика", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
										
	Иначе
		
		ЗаполнитьИзПообъектногоГрафикаСервер();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросЗаполнитьИзПообъектногоГрафика(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьИзПообъектногоГрафикаСервер();									
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура СкрытьПоказатьПараметрыГрафикаПлатежей(Команда)
	
	Элементы.ГрафикПлатежейСкрытьПоказатьПараметрыГрафикаПлатежей.Пометка = НЕ Элементы.ГрафикПлатежейСкрытьПоказатьПараметрыГрафикаПлатежей.Пометка;
	
	Элементы.ГруппаПараметрыГрафикаПлатежейШапка.Видимость = Элементы.ГрафикПлатежейСкрытьПоказатьПараметрыГрафикаПлатежей.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПараметрыГрафикаНачислений(Команда)
	
	Элементы.ГрафикНачисленийСкрытьПоказатьПараметрыГрафикаНачислений.Пометка = НЕ Элементы.ГрафикНачисленийСкрытьПоказатьПараметрыГрафикаНачислений.Пометка;
	
	Элементы.ГруппаПараметрыГрафикаНачислений.Видимость = Элементы.ГрафикНачисленийСкрытьПоказатьПараметрыГрафикаНачислений.Пометка;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимЗаписи", РежимЗаписи);
	ПараметрыФормы.Вставить("РежимСообщений", РежимСообщений);
	ПараметрыФормы.Вставить("ОтображатьПараметрыГрафикаНачислений", ОтображатьПараметрыГрафикаНачислений);
	ПараметрыФормы.Вставить("ОтображатьПараметрыГрафикаПлатежей", ОтображатьПараметрыГрафикаПлатежей);
	
	ОпопвещениеЗакрытиеФормыНастройки = Новый ОписаниеОповещения("ЗакрытиеФормыНастройки", ЭтотОбъект);
	
	ОткрытьФорму("Документ.бит_ДополнительныеУсловияПоДоговору.Форма.ФормаНастройкаУправляемая", ПараметрыФормы, ЭтотОбъект,,,,ОпопвещениеЗакрытиеФормыНастройки, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

// Обработка оповещения закрытия формы пользователем. 
//
// Параметры:
//  ЗначенияНастроек - Строка.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте
Процедура ЗакрытиеФормыНастройки(ЗначенияНастроек, ДополнительныеПараметры) Экспорт
		
	Если ТипЗнч(ЗначенияНастроек) = Тип("Структура") Тогда
		ЗначенияНастроек.Свойство("РежимЗаписи", РежимЗаписи);
		ЗначенияНастроек.Свойство("РежимСообщений", РежимСообщений);
		ЗначенияНастроек.Свойство("ОтображатьПараметрыГрафикаНачислений", ОтображатьПараметрыГрафикаНачислений);
		ЗначенияНастроек.Свойство("ОтображатьПараметрыГрафикаПлатежей", ОтображатьПараметрыГрафикаПлатежей);
	КонецЕсли;	
	
	Элементы.ГрафикПлатежейСкрытьПоказатьПараметрыГрафикаПлатежей.Пометка = ОтображатьПараметрыГрафикаПлатежей;
	Элементы.ГрафикНачисленийСкрытьПоказатьПараметрыГрафикаНачислений.Пометка = ОтображатьПараметрыГрафикаНачислений;
	
	Элементы.ГруппаПараметрыГрафикаПлатежейШапка.Видимость = Элементы.ГрафикПлатежейСкрытьПоказатьПараметрыГрафикаПлатежей.Пометка;
	Элементы.ГруппаПараметрыГрафикаНачислений.Видимость    = Элементы.ГрафикНачисленийСкрытьПоказатьПараметрыГрафикаНачислений.Пометка;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросПерезаполнитьГрафик(Ответ, ДополнительныеПараметры) Экспорт

	График = ДополнительныеПараметры;
		
	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		ПриИзмененииПериодаСервер(График);
		
	КонецЕсли;
	
	фКэшРеквизитов.Периодичность = Объект.Периодичность;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПлатежиПеренестиНаСледующийРабочийДень(Команда)
	
	ПеренестиПлатежиСПраздничныхДнейВРабочие("ГрафикПлатежей", 1);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПлатежиПеренестиНаПредыдущийРабочийДень(Команда)
	
	ПеренестиПлатежиСПраздничныхДнейВРабочие("ГрафикПлатежей", 0);

КонецПроцедуры

&НаКлиенте
Процедура КомандаНачисленияПеренестиНаПредыдущийРабочийДень(Команда)
	
	ПеренестиПлатежиСПраздничныхДнейВРабочие("ГрафикНачислений", 0);

КонецПроцедуры

&НаКлиенте
Процедура КомандаНачиселнияПеренестиНаСледующийРабочийДень(Команда)
	
	ПеренестиПлатежиСПраздничныхДнейВРабочие("ГрафикНачислений", 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Функция СформироватьСписокДоступныхВалют(ПроектДоговора)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПроектДоговора);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_ПроектДоговора.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	бит_ПроектДоговора.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	Документ.бит_ПроектДоговора КАК бит_ПроектДоговора
		|ГДЕ
		|	бит_ПроектДоговора.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();	
	СписокВалют = Новый СписокЗначений;	
	
	Пока Выборка.Следующий() Цикл
		СписокВалют.Добавить(Выборка.ВалютаВзаиморасчетов);
		Если Выборка.РасчетыВУсловныхЕдиницах Тогда
			СписокВалют.Добавить(ВалютаРегламентированногоУчета);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат СписокВалют;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	мКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	мКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	КэшПеречисления = Новый Структура;
	
	КэшПеречисления.Вставить("бит_РасходДоход"					   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов"		   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.ВидыДоговоровКонтрагентов));
	КэшПеречисления.Вставить("бит_ВидыОперацийЗаявкаНаРасходование", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование));
	КэшПеречисления.Вставить("бит_ВидыДенежныхСредств"			   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыДенежныхСредств));
    КэшПеречисления.Вставить("бит_ТипыСтатейОборотов"			   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_ПериодичностьПланирования"	   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования));
	
	мКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	СтруктураСтатусов = Новый Структура;
	СтруктураСтатусов.Вставить("ДополнительныеУсловияПоДоговору_Утвержден", Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Утвержден);
	
	мКэшЗначений.Вставить("СтатусыДокумента", СтруктураСтатусов);
	
	// Сформируем список доступных валют.
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ЗначениеЗаполнено(Объект.ПроектДоговора) Тогда
		СписокВалют = СформироватьСписокДоступныхВалют(Объект.ПроектДоговора);
	Иначе
		СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);
	КонецЕсли; 	
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());

	мКэшЗначений.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации(Объект.ВидОперации, Объект.РасходДоход, мКэшЗначений);
	
	мКэшЗначений.Вставить("ИзмеренияДоп"      , ДокументОбъект.мИзмеренияДоп);
	мКэшЗначений.Вставить("НастройкиИзмерений", ДокументОбъект.мНастройкиИзмерений);
	
	КолАн = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	мКэшЗначений.Вставить("МаксКолвоДопАналитик", КолАн);
	
	мКэшЗначений.Вставить("ПериодичностьСоставляющейОсновнойДолг", ОпределитьПериодичностьСоставляющейОсновнойДолг());
	
	мКэшЗначений.Вставить("ТипПлатежаОсновнойДолг", Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.ОсновнойДолг);
	мКэшЗначений.Вставить("ТипПлатежаПроценты"	  , Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам.Проценты);
	мКэшЗначений.Вставить("ПараметрПериодичность" , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.Периодичность);
	
	мКэшЗначений.Вставить("ПериодичностьОсновногоДолга" , Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежемесячно);
	
	// Чтобы не возникало ошибок, проверим, достаточно ли у текущего пользователя прав 
	// на просмотр определенных типов документов.
	МетаЗаявкаНаРасходДС = Метаданные.Документы.бит_ЗаявкаНаРасходованиеСредств;
	МетаЗаявкаНаЗатраты	 = Метаданные.Документы.бит_ЗаявкаНаЗатраты;
	
	мКэшЗначений.Вставить("ЕстьПравоПросмотрЗаявкаНаРасходДС", ПравоДоступа("Просмотр", МетаЗаявкаНаРасходДС));
	мКэшЗначений.Вставить("ЕстьПравоПросмотрЗаявкаНаЗатраты" , ПравоДоступа("Просмотр", МетаЗаявкаНаЗатраты));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуНовогоПриОткрытииСервер()
	
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	Если ЗначениеЗаполнено(Объект.РасходДоход) Тогда
		СтрРасходДоход = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_РасходДоход,Объект.РасходДоход);
	Иначе	
		СтрРасходДоход = "Расходование";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяОборотов) Тогда
		ВидСтатьи = "ОсновнаяСтатья" + СтрРасходДоход + "БДДС";
		Объект.СтатьяОборотов = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(ВидСтатьи, ТекущийПользователь);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяОборотовНачисления) Тогда
		ВидСтатьи = "ОсновнаяСтатья" + СтрРасходДоход + "БДР";
		Объект.СтатьяОборотовНачисления = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(ВидСтатьи, ТекущийПользователь);
	КонецЕсли;
	
	СтатьяОборотовПриИзмененииСервер("СтатьяОборотов");
	СтатьяОборотовПриИзмененииСервер("СтатьяОборотовНачисления");
	
	ЦФОПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// видимость/доступность параметров графиков платежей и начислений.
	
	Элементы.ГруппаПараметрыГрафикаНачислений.Видимость    = Элементы.ГрафикНачисленийСкрытьПоказатьПараметрыГрафикаНачислений.Пометка;
	Элементы.ГруппаПараметрыГрафикаПлатежейШапка.Видимость = Элементы.ГрафикПлатежейСкрытьПоказатьПараметрыГрафикаПлатежей.Пометка;

    ЭлементыПриходаДоступны = ЭлементыУказанногоНаправленияДоступны(Перечисления.бит_РасходДоход.Поступление);
    ЭлементыРасходаДоступны = ЭлементыУказанногоНаправленияДоступны(Перечисления.бит_РасходДоход.Расходование);
	
    Элементы.СуммаПриход.Доступность			= ЭлементыПриходаДоступны;
    Элементы.СуммаПриходНачисления.Доступность	= ЭлементыПриходаДоступны;
    
    Элементы.СуммаНДСПриход.Доступность			  = ЭлементыПриходаДоступны;
    Элементы.СуммаНДСПриходНачисления.Доступность = ЭлементыПриходаДоступны;
    
    Элементы.СуммаРасход.Доступность       	   = ЭлементыРасходаДоступны;
    Элементы.СуммаРасходНачисления.Доступность = ЭлементыРасходаДоступны;
    
    Элементы.СуммаНДСРасход.Доступность		      = ЭлементыРасходаДоступны;
    Элементы.СуммаНДСРасходНачисления.Доступность = ЭлементыРасходаДоступны;
	
	Элементы.ГрафикПлатежейРасходДоход.Видимость   = ЭлементыПриходаДоступны И ЭлементыРасходаДоступны;
	Элементы.ГрафикНачисленийРасходДоход.Видимость = ЭлементыПриходаДоступны И ЭлементыРасходаДоступны;
	
	УстановитьВидимостьПоляВыбора_ВидОперацииРасходование();

	// видимость/доступность реквизитов шапки.
	
	ФинансовыйДоговор  = Объект.ДоговорКонтрагента.бит_НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.Финансовый
							ИЛИ Объект.ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
							ИЛИ Объект.ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
							ИЛИ Объект.ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные;

	Элементы.ПодменюПечатьОбычное_ГрафикПлатежей.Видимость = ФинансовыйДоговор;
	
	// график начислений и проект договора доступен только для решения УУ.
	ЭтоУУ =  бит_ЛицензированиеБФCервер.СборкаДоступна("УУ");
	
	Элементы.ПроектДоговора.Видимость 			 = ЭтоУУ;
	Элементы.ГруппаГрафикНачислений.Видимость 	 = ЭтоУУ;
	Элементы.НеКонтролироватьПоБюджету.Видимость = ЭтоУУ;
	Элементы.СверхБюджета.Видимость				 = ЭтоУУ;

	Элементы.ФормироватьДвижения.Доступность = НЕ ДокументОбъект.ОбязательноФормироватьДвижения();
	
	Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = Объект.ФормироватьДвижения
															ИЛИ НЕ ЗначениеЗаполнено(Объект.ПроектДоговора);
															
	Элементы.ДоговорКонтрагента.ОтметкаНезаполненного = Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного
															И НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);

	ЭлементыФормыДоступны = (ДокументыПланирования.ПолучитьЭлементы().Количество() = 0);
	
	Элементы.СверхБюджета.Доступность 			   = ЭлементыФормыДоступны;
	Элементы.НеКонтролироватьПоБюджету.Доступность = ЭлементыФормыДоступны;

	МассивНеРедактируемыхЭлементов = ПолучитьМассивНередактируемыхЭлементовФормы();
	
	Для Каждого ТекЭлемент Из МассивНеРедактируемыхЭлементов Цикл
		
		Если ТекЭлемент = "ВидОперацииРасходование" Тогда
			
			ОтборСтрокРасхода = Новый Структура("РасходДоход", Перечисления.бит_РасходДоход.Расходование);
			СтрокиДляПроверки = Объект.ГрафикПлатежей.НайтиСтроки(ОтборСтрокРасхода);
			
			ДокументыРасходаЕсть = Ложь;
			
			Для Каждого ТекСтрока Из СтрокиДляПроверки Цикл
				
				Если ЗначениеЗаполнено(ТекСтрока.ДокументПланирования) Тогда
					ДокументыРасходаЕсть = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Элементы[ТекЭлемент].ТолькоПросмотр = Не ЭлементыФормыДоступны И ЗначениеЗаполнено(Объект.ВидОперацииРасходование)
													   И ДокументыРасходаЕсть;
		Иначе
			Элементы[ТекЭлемент].ТолькоПросмотр = Не ЭлементыФормыДоступны;
		КонецЕсли;
		
	КонецЦикла;
	
	// видимость/доступность команд формы.
	
	Элементы.НастройкаПериода.Доступность 			= ЭлементыФормыДоступны;
	Элементы.НастройкаПериодаНачисления.Доступность = ЭлементыФормыДоступны;
	
	Элементы.ГрафикПлатежейСоздатьИзменитьГрафикПлатежей.Доступность      = ЭлементыФормыДоступны;
	Элементы.ГрафикПлатежейЗаполнитьИзПообъектногоГрафика.Доступность 	  = ЭлементыФормыДоступны;
	Элементы.ГрафикПлатежейРаспределитьПропорциональноПлатежи.Доступность = ЭлементыФормыДоступны;
	Элементы.ГрафикПлатежейРаспределитьПоКоэффициентуПлатежи.Доступность  = ЭлементыФормыДоступны;
	Элементы.ГрафикПлатежейЗаполнитьПоГрафикуНачислений.Доступность       = ЭлементыФормыДоступны;
	Элементы.ГрафикПлатежейЗаполнитьПоГрафикуНачислений.Доступность 	  = ЭлементыФормыДоступны;
	Элементы.ГрафикПлатежейЗагрузитьПоНастройкеExcel.Доступность 		  = ЭлементыФормыДоступны;
	
	Элементы.ГрафикПлатежейЗаполнитьПоГрафикуНачислений.Видимость = ЭтоУУ;
	
	Элементы.ПообъектныйГрафикСоздатьИзменитьПообъектныйГрафик.Доступность= ЭлементыФормыДоступны;
	Элементы.ПообъектныйГрафикЗаполнитьПоОбщемуГрафику.Доступность		  = ЭлементыФормыДоступны;
	Элементы.ПообъектныйГрафикДобавитьОбъект.Доступность 				  = ЭлементыФормыДоступны;
	Элементы.ПообъектныйГрафикЗагрузитьПоНастройкеExcelПообъектныйГрафик.Доступность = ЭлементыФормыДоступны;
															
	Элементы.ГрафикНачисленийСоздатьИзменитьГрафикНачислений.Доступность       = ЭлементыФормыДоступны;
	Элементы.ГрафикНачисленийЗаполнитьПоГрафикуПлатежей.Доступность			   = ЭлементыФормыДоступны;
	Элементы.ГрафикНачисленийРаспределитьПропорциональноНачисления.Доступность = ЭлементыФормыДоступны;
	Элементы.ГрафикНачисленийРаспределитьПоКоэффициентуНачисления.Доступность  = ЭлементыФормыДоступны;

	// Редактирование документов планирования разрешено только в утвержденном статусе.
	Статус_Утвержден        = Справочники.бит_СтатусыОбъектов.ДополнительныеУсловияПоДоговору_Утвержден;
	ДокПланированияДоступны = Статус = Статус_Утвержден;
	
	Элементы.ГрафикПлатежейДокументПланирования.ТолькоПросмотр   = НЕ ДокПланированияДоступны;
	Элементы.ГрафикНачисленийДокументПланирования.ТолькоПросмотр = НЕ ДокПланированияДоступны;
	
	// видимость/доступность пообъектного графика.
	
	// Видимость пообъектного графика.
	Если (Объект.ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.АрендаОС 
		И Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику) 
		ИЛИ (Объект.ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЦенныеБумаги 
		И Объект.РасходДоход = Перечисления.бит_РасходДоход.Поступление) Тогда
		
		флВидимостьПообъектногоГрафика = Истина;
		
	Иначе	
		
		флВидимостьПообъектногоГрафика = Ложь;
		
	КонецЕсли;
	
	Элементы.ГруппаПообъектныйГрафикПлатежей.Видимость = флВидимостьПообъектногоГрафика;
	
	Элементы.ПообъектныйГрафик.ТолькоПросмотр = Не ЭлементыФормыДоступны;
	
	// видимость/доступность элементов настройки финансовых графиков.
	
	ЭлементыФинДоговораДоступны = ДокументОбъект.ЭлементыФинДоговораДоступны();
								
	Элементы.ГруппаГрафикВыдачиТраншей.Видимость = ЭлементыФинДоговораДоступны;
	Элементы.ГрафикПлатежейСоставляющаяПлатежа.Видимость   = ЭлементыФинДоговораДоступны;								
	Элементы.ГрафикНачисленийСоставляющаяПлатежа.Видимость = ЭлементыФинДоговораДоступны;
	Элементы.ГрафикПлатежейВидПлатежаПоКредитамЗаймам.Видимость = Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратЗайма 
	                                                                 ИЛИ Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратКредита; 
	
	Если мКэшЗначений.ПериодичностьСоставляющейОсновнойДолг = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежегодно Тогда
		Элементы.ГрафикВыдачиТраншейКоличествоПериодовВыплат.Заголовок = "Количество периодов выплат (год)";
	ИначеЕсли мКэшЗначений.ПериодичностьСоставляющейОсновнойДолг = Перечисления.бит_ПериодичностьВыплатПоФинансовымДоговорам.Ежеквартально Тогда
		Элементы.ГрафикВыдачиТраншейКоличествоПериодовВыплат.Заголовок = "Количество периодов выплат (квартал)";
	Иначе
		Элементы.ГрафикВыдачиТраншейКоличествоПериодовВыплат.Заголовок = "Количество периодов выплат (месяц)";
	КонецЕсли;
	
	// установим пользовательские настройки доступности элементов управления.
	УстановитьНастройкиДоступностиЭлементов();
	
	Элементы.ГрафикПлатежейЗаполнитьПоДогворуССобытиями.Доступность			   = ЭлементыФормыДоступны;

	// установим видимость колонки "Событие".
	Если ЗначениеЗаполнено(Объект.ПроектДоговора) Тогда
		Если ЕстьСобытияДоговора(Объект.ПроектДоговора) И Не НедопустимыйТип(Объект.ПроектДоговора.ТипДоговора) Тогда
			Элементы.ГрафикПлатежейГруппаСобытие.Видимость = Истина;
			Элементы.ГрафикПлатежейЗаполнитьПоДогворуССобытиями.Видимость = Истина;
			Элементы.ГрафикПлатежейПериод.АвтоОтметкаНезаполненного = Ложь;
			Элементы.ГрафикПлатежейВыолнитьСобытие.Видимость = Истина;
		Иначе
			Элементы.ГрафикПлатежейГруппаСобытие.Видимость = Ложь;
			Элементы.ГрафикПлатежейЗаполнитьПоДогворуССобытиями.Видимость = Ложь;
			Элементы.ГрафикПлатежейПериод.АвтоОтметкаНезаполненного = Истина;
			Элементы.ГрафикПлатежейВыолнитьСобытие.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если ЕстьСобытияДоговора(Объект.ДоговорКонтрагента) И Не НедопустимыйТип(Объект.ДоговорКонтрагента.бит_ТипДоговора) Тогда
			Элементы.ГрафикПлатежейГруппаСобытие.Видимость = Истина;
			Элементы.ГрафикПлатежейЗаполнитьПоДогворуССобытиями.Видимость = Истина;
			Элементы.ГрафикПлатежейПериод.АвтоОтметкаНезаполненного = Ложь;
			Элементы.ГрафикПлатежейВыолнитьСобытие.Видимость = Истина;
		Иначе
			Элементы.ГрафикПлатежейГруппаСобытие.Видимость = Ложь;
			Элементы.ГрафикПлатежейЗаполнитьПоДогворуССобытиями.Видимость = Ложь;
			Элементы.ГрафикПлатежейПериод.АвтоОтметкаНезаполненного = Истина;
			Элементы.ГрафикПлатежейВыолнитьСобытие.Видимость = Ложь;
		КонецЕсли;
	//Иначе
	//	Элементы.ГрафикПлатежейГруппаСобытие.Видимость = Истина;
	//	Элементы.ГрафикПлатежейЗаполнитьПоДогворуССобытиями.Видимость = Истина;
	//	Элементы.ГрафикПлатежейПериод.АвтоОтметкаНезаполненного = Ложь;
	//	Элементы.ГрафикПлатежейВыолнитьСобытие.Видимость = Истина;
	КонецЕсли;
	
	// Вывод информации по актуализации графиков.
	Если Объект.ГрафикПлатежейАктуализирован И Объект.Проведен Тогда
		Элементы.ГрафикПлатежейАктуализирован.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ГрафикПлатежейАктуализирован.ТолькоПросмотр = Ложь;
	КонецЕсли; 
	Если Объект.ГрафикНачисленийАктуализирован И Объект.Проведен Тогда
		Элементы.ГрафикНачисленийАктуализирован.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ГрафикНачисленийАктуализирован.ТолькоПросмотр = Ложь;
	КонецЕсли; 
	
	Элементы.Получатель.Видимость 
		= Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц; 
	
	// Изменение кода. Начало. 29.10.2015{{
	Документы.бит_ДополнительныеУсловияПоДоговору.ВидимостьНазначенныхАналитик(ЭтотОбъект);
	// Изменение кода. Конец. 29.10.2015}}

КонецПроцедуры

&НаСервере
Функция НедопустимыйТип(ТипДоговора)

	Результат = Ложь;
	
	Если ТипДоговора = Справочники.бит_ТипыДоговоров.АрендаОС 
		Или ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
		Или ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные
		Или ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
		Или ТипДоговора = Справочники.бит_ТипыДоговоров.ЦенныеБумаги 
		Или ТипДоговора = Справочники.бит_НаправленияДоговоров.Финансовый Тогда

        Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Результат - Строка.
//
&НаСервере
Функция ЕстьСобытияДоговора(Договор)

	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_СобытиеДоговора.Ссылка) КАК КолвоСобытий
		|ИЗ
		|	Документ.бит_СобытиеДоговора КАК бит_СобытиеДоговора
		|ГДЕ
		|	бит_СобытиеДоговора.Договор = &Договор
		|	И бит_СобытиеДоговора.Организация = &Организация
		|	И бит_СобытиеДоговора.Контрагент = &Контрагент";

	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если Выборка.КолвоСобытий > 0 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
		
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтотОбъект, Объект, Статус);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьМассивНередактируемыхЭлементовФормы()
    
    МассивЭлементов = Новый Массив;
    МассивЭлементов.Добавить("Дата");
    МассивЭлементов.Добавить("Организация");
    МассивЭлементов.Добавить("Сценарий");
    МассивЭлементов.Добавить("Контрагент");
    МассивЭлементов.Добавить("ДоговорКонтрагента");
    МассивЭлементов.Добавить("ЦФО");
    МассивЭлементов.Добавить("СтатьяОборотов");
	МассивЭлементов.Добавить("СтатьяОборотовНачисления");
    МассивЭлементов.Добавить("Проект");
    МассивЭлементов.Добавить("НоменклатурнаяГруппа");
	
	МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для н = 1 По МаксКолвоДопАналитик Цикл
		МассивЭлементов.Добавить("Аналитика_"+н);
	КонецЦикла;
	
	МассивЭлементов.Добавить("Периодичность");
	МассивЭлементов.Добавить("ПериодичностьНачисления");
    МассивЭлементов.Добавить("ДатаНачала");
    МассивЭлементов.Добавить("ДатаОкончания");
	МассивЭлементов.Добавить("ДатаНачалаНачисления");
    МассивЭлементов.Добавить("ДатаОкончанияНачисления");
    МассивЭлементов.Добавить("ВалютаДокумента");
    МассивЭлементов.Добавить("КурсДокумента");
    МассивЭлементов.Добавить("СтавкаНДС");
	МассивЭлементов.Добавить("СтавкаНДСНачисления");
    МассивЭлементов.Добавить("СуммаПриход");
	МассивЭлементов.Добавить("СуммаПриходНачисления");
    МассивЭлементов.Добавить("СуммаНДСПриход");
	МассивЭлементов.Добавить("СуммаНДСПриходНачисления");
    МассивЭлементов.Добавить("СуммаРасход");
	МассивЭлементов.Добавить("СуммаРасходНачисления");
    МассивЭлементов.Добавить("СуммаНДСРасход");  
	МассивЭлементов.Добавить("СуммаНДСРасходНачисления");  
    МассивЭлементов.Добавить("Ответственный");
    МассивЭлементов.Добавить("ВидОперацииРасходование");
    
    Возврат МассивЭлементов;
    
КонецФункции

&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"					   , Объект.ЦФО);		
	
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУказанныеСтрокиВТабЧасти(СтрокиДляУдаления, ИмяТабличнойЧасти)
	
	Для Каждого СтрокаКУдалению Из СтрокиДляУдаления Цикл
		
		Объект[ИмяТабличнойЧасти].Удалить(СтрокаКУдалению);
		
	КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура ОчиститьНедоступныеСуммыИСтрокиГрафиков()
	
	// Необходимо удалить неразрешенное направление.
	Если Объект.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
		НаправлениеДляУдаления   = Перечисления.бит_РасходДоход.Поступление;
		ИмяНаправленияДляОчистки = "приход";
	Иначе
		НаправлениеДляУдаления   = Перечисления.бит_РасходДоход.Расходование;
		ИмяНаправленияДляОчистки = "расход";
	КонецЕсли;
	
	// Получим записи для удаления из графика платежей.
	СтрокиГПДляУдаления = Объект.ГрафикПлатежей.НайтиСтроки(Новый Структура("РасходДоход", НаправлениеДляУдаления));
	СтрокиГНДляУдаления = Объект.ГрафикНачислений.НайтиСтроки(Новый Структура("РасходДоход", НаправлениеДляУдаления));
	
	// Очистим недоступные суммы документа.
    Объект["Сумма"    + ИмяНаправленияДляОчистки] = 0;
    Объект["СуммаНДС" + ИмяНаправленияДляОчистки] = 0;
	Объект["Сумма"    + ИмяНаправленияДляОчистки+"Начисления"] = 0;
    Объект["СуммаНДС" + ИмяНаправленияДляОчистки+"Начисления"] = 0;
	
	Если НЕ Объект.СтатьяОборотов = Объект.РасходДоход Тогда
		Объект.СтатьяОборотов = Неопределено;
	КонецЕсли;
	
	Если НЕ Объект.СтатьяОборотовНачисления = Объект.РасходДоход Тогда
		Объект.СтатьяОборотовНачисления = Неопределено;
	КонецЕсли;
	
	ВидОперацииРасходование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПустаяСсылка();
	
	// недоступные записи графика платежей.
	УдалитьУказанныеСтрокиВТабЧасти(СтрокиГПДляУдаления, "ГрафикПлатежей");
	УдалитьУказанныеСтрокиВТабЧасти(СтрокиГНДляУдаления, "ГрафикНачислений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры

// Процедура расчитывает суммму НДС.
//
// Параметры:
//  Контейнер - СтрокаТабличнойЧасти, ЭтотОбъект.
//
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуНДС(Контейнер, РеквизитСумма = "Сумма", РеквизитНДС = "НДС", пСуммаВключаетНДС = Истина, РеквизитСтавка="СтавкаНДС")

    Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Контейнер[РеквизитНДС] = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер[РеквизитСумма]
        											   ,Истина
        											   ,пСуммаВключаетНДС
        											   ,бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Контейнер[РеквизитСтавка]));
													   
    Если РеквизитСумма = "Сумма" Тогда
		Контейнер.СуммаБезНДС = Контейнер.Сумма - Контейнер[РеквизитНДС];
	ИначеЕсли РеквизитСумма = "СуммаБезНДС" Тогда
		Контейнер.Сумма = Контейнер.СуммаБезНДС + Контейнер[РеквизитНДС];	
	КонецЕсли; 												
		
КонецПроцедуры

&НаСервере
Процедура ПосчитатьОбщуюСуммуПоОбъекту(ИДСтрокаРодитель)

	Если ТипЗнч(ИДСтрокаРодитель) = Тип("Число") Тогда
		СтрокаРодитель = ПообъектныйГрафик.НайтиПоИдентификатору(ИДСтрокаРодитель);
	Иначе
		СтрокаРодитель = ИДСтрокаРодитель;
	КонецЕсли;
	
	СуммаОбщая = 0;
	
	ПодчиненныеСтроки = СтрокаРодитель.ПолучитьЭлементы();
	
	Для Каждого СтрокаГрафика Из ПодчиненныеСтроки Цикл
		СуммаОбщая = СуммаОбщая + СтрокаГрафика.Сумма;	
	КонецЦикла; 
	
	СтрокаРодитель.Сумма = СуммаОбщая;	

КонецПроцедуры

// Процедура обрабатывает изменение валюты документа в форме документа.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ПересчитатьСуммыДокумента() 
	
	// Пересчет для шапки.
	Объект.СуммаПриход = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаПриход
			                                                      ,фКэшРеквизитов.ВалютаДокумента
																  ,Объект.ВалютаДокумента
																  ,фКэшРеквизитов.КурсДокумента
																  ,Объект.КурсДокумента
																  ,фКэшРеквизитов.КратностьДокумента
																  ,Объект.КратностьДокумента);
																  
	Объект.СуммаРасход = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаРасход
			                                                      ,фКэшРеквизитов.ВалютаДокумента
																  ,Объект.ВалютаДокумента
																  ,фКэшРеквизитов.КурсДокумента
																  ,Объект.КурсДокумента
																  ,фКэшРеквизитов.КратностьДокумента
																  ,Объект.КратностьДокумента);
	
	РассчитатьСуммуНДС(Объект, "СуммаПриход", "СуммаНДСПриход");
	РассчитатьСуммуНДС(Объект, "СуммаРасход", "СуммаНДСРасход");
	
	Объект.СуммаПриходНачисления = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаПриходНачисления
			                                                      ,фКэшРеквизитов.ВалютаДокумента
																  ,Объект.ВалютаДокумента
																  ,фКэшРеквизитов.КурсДокумента
																  ,Объект.КурсДокумента
																  ,фКэшРеквизитов.КратностьДокумента
																  ,Объект.КратностьДокумента);
																  
	Объект.СуммаРасходНачисления = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаРасходНачисления
			                                                      ,фКэшРеквизитов.ВалютаДокумента
																  ,Объект.ВалютаДокумента
																  ,фКэшРеквизитов.КурсДокумента
																  ,Объект.КурсДокумента
																  ,фКэшРеквизитов.КратностьДокумента
																  ,Объект.КратностьДокумента);
	
	РассчитатьСуммуНДС(Объект, "СуммаПриходНачисления", "СуммаНДСПриходНачисления", , "СтавкаНДСНачисления");
	РассчитатьСуммуНДС(Объект, "СуммаРасходНачисления", "СуммаНДСРасходНачисления", , "СтавкаНДСНачисления");
	
	// Пересчет для графика платежей.
	Для каждого СтрокаТаблицы Из Объект.ГрафикПлатежей Цикл
		СтрокаТаблицы.СуммаБезНДС = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС
        			                                                          ,фКэшРеквизитов.ВалютаДокумента
        																	  ,Объект.ВалютаДокумента
        																	  ,фКэшРеквизитов.КурсДокумента
        																	  ,Объект.КурсДокумента
        																	  ,фКэшРеквизитов.КратностьДокумента
        																	  ,Объект.КратностьДокумента);
	    РассчитатьСуммуНДС(СтрокаТаблицы, "СуммаБезНДС", , Ложь);
	КонецЦикла;
	
	// Пересчет для графика начислений.
	Для каждого СтрокаТаблицы Из Объект.ГрафикНачислений Цикл
		СтрокаТаблицы.СуммаБезНДС = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС
        			                                                          ,фКэшРеквизитов.ВалютаДокумента
        																	  ,Объект.ВалютаДокумента
        																	  ,фКэшРеквизитов.КурсДокумента
        																	  ,Объект.КурсДокумента
        																	  ,фКэшРеквизитов.КратностьДокумента
        																	  ,Объект.КратностьДокумента);
	    РассчитатьСуммуНДС(СтрокаТаблицы, "СуммаБезНДС", , Ложь);
	КонецЦикла;
	
	// Пересчет для пообъектного графика.
	ДеревоПообъектногоГрафика = ПообъектныйГрафик.ПолучитьЭлементы();
	
	Для Каждого СтрокаРодитель Из ДеревоПообъектногоГрафика Цикл
		
		СтрокиГрафикаОбъекта = СтрокаРодитель.ПолучитьЭлементы();
		
		Для Каждого СтрокаГрафика Из СтрокиГрафикаОбъекта Цикл
			СтрокаГрафика.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаГрафика.Сумма
        			                                                          ,фКэшРеквизитов.ВалютаДокумента
        																	  ,Объект.ВалютаДокумента
        																	  ,фКэшРеквизитов.КурсДокумента
        																	  ,Объект.КурсДокумента
        																	  ,фКэшРеквизитов.КратностьДокумента
        																	  ,Объект.КратностьДокумента);
		КонецЦикла;
		
		ПосчитатьОбщуюСуммуПоОбъекту(СтрокаРодитель);
		
	КонецЦикла; 
    
КонецПроцедуры

&НаСервере
Функция ЭлементыУказанногоНаправленияДоступны(Направление)
	
	ЭлементыДоступны = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорСВидомПрочее = Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	Иначе
		ДоговорСВидомПрочее = Объект.ПроектДоговора[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	КонецЕсли;

	ЭлементыДоступны = Объект.РасходДоход = Направление
                       ИЛИ ДоговорСВидомПрочее;
	
	Возврат ЭлементыДоступны;
	
КонецФункции

&НаСервере
Функция ОбязательноФормироватьДвиженияПоМСФО() 

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Результат = ДокументОбъект.ОбязательноФормироватьДвижения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОпределитьПериодичностьСоставляющейОсновнойДолг()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Результат = ДокументОбъект.ПолучитьПериодичностьСоставляющейОсновнойДолг();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГрафикВыдачиТраншей()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ЗаполнитьГрафикВыдачиТраншей();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации(ВидОперации, РасходДоход, КэшЗначений)
	
	СписокВидовДоговоров = Новый СписокЗначений;
    ВидыДоговоровКонтрагентов = КэшЗначений.Перечисления.ВидыДоговоровКонтрагентов;	
	
	Если ВидОперации = КэшЗначений.Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
		
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
		
        Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда		
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(СписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомиссионеромНаЗакупку");
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(СписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");			
		КонецЕсли;
        
	ИначеЕсли ВидОперации = КэшЗначений.Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику Тогда
		
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
		
        Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда		
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(СписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомиссионеромНаЗакупку");
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(СписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");						
		КонецЕсли;
        
	ИначеЕсли РасходДоход = КэшЗначений.Перечисления.бит_РасходДоход.Поступление Тогда
		
        СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПокупателем);
        СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
        СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);
		
        Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда		
			СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(СписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомиссионеромНаЗакупку");
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(СписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");		
		КонецЕсли;						
        
    Иначе
		
        Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда		
			СписокВидовДоговоров.Добавить(КэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.Прочее);		
		КонецЕсли; 
		
	КонецЕсли; 
	
	КэшЗначений.Вставить("СписокВидовДоговоров", СписокВидовДоговоров);
	
КонецПроцедуры

&НаСервере
Функция СформироватьДеревоВидовОпераций()

	пДеревоВидовОпераций = Новый ДеревоЗначений;
	пДеревоВидовОпераций.Колонки.Добавить("ВидОперации");
	
	// Расходование.
    ВеткаРасходование = пДеревоВидовОпераций.Строки.Добавить();
    ВеткаРасходование.ВидОперации = Перечисления.бит_РасходДоход.Расходование;
    
    ПеречислениеМенеджер = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование;
	
	// Расходование - Безналичные.
    МассивИсключений = Новый Массив;
    МассивИсключений.Добавить(ПеречислениеМенеджер.ПеречислениеНалога);
    МассивИсключений.Добавить(ПеречислениеМенеджер.ПереводНаДругойСчет);
    МассивИсключений.Добавить(ПеречислениеМенеджер.ПеречислениеЗП);
    МассивИсключений.Добавить(ПеречислениеМенеджер.ПеречислениеДенежныхСредствПодотчетнику);
	//МассивИсключений.Добавить(ПеречислениеМенеджер.ПрочееСписаниеБезналичныхДенежныхСредств);
	МассивИсключений.Добавить(ПеречислениеМенеджер.ВыдачаЗаймаРаботнику);
	МассивИсключений.Добавить(ПеречислениеМенеджер.ВыплатаЗаработнойПлатыРаботнику);
	МассивИсключений.Добавить(ПеречислениеМенеджер.ВыплатаДепонентов);
	МассивИсключений.Добавить(ПеречислениеМенеджер.ПеречислениеСотрудникуПоДоговоруПодряда);
	МассивИсключений.Добавить(ПеречислениеМенеджер.СнятиеНаличных);
	МассивИсключений.Добавить(ПеречислениеМенеджер.ПеречислениеДивидендов);
	
	// Получим имя документа по списанию денежных средств со счета.
	ИмяДокументаПоСписаниюДС = бит_ОбщегоНазначения.ПолучитьИмяДокументаПоСписаниюДС();
	
    СоответствиеКонтроль = бит_Казначейство.СформироватьСоответствияВидовОперацииЗаявки(ИмяДокументаПоСписаниюДС);									
    ДобавитьВеткуДереваВидыОпераций(ВеткаРасходование
                                    ,СоответствиеКонтроль
                                    ,Перечисления.бит_ВидыДенежныхСредств.Безналичные
                                    ,Перечисления.бит_ВидыОперацийЗаявкаНаРасходование
                                    ,МассивИсключений);
									
	// Расходование - Наличные.								
    МассивИсключений = Новый Массив;
    МассивИсключений.Добавить(ПеречислениеМенеджер.ПеречислениеЗП);
    МассивИсключений.Добавить(ПеречислениеМенеджер.ПеречислениеДенежныхСредствПодотчетнику);
    МассивИсключений.Добавить(ПеречислениеМенеджер.ИнкассацияДенежныхСредств);
    МассивИсключений.Добавить(ПеречислениеМенеджер.ВзносНаличнымиВБанк);
    МассивИсключений.Добавить(ПеречислениеМенеджер.ПрочееСписаниеБезналичныхДенежныхСредств);
	МассивИсключений.Добавить(ПеречислениеМенеджер.ВыплатаЗаработнойПлатыРаботнику);
	МассивИсключений.Добавить(ПеречислениеМенеджер.ВыплатаДепонентов);
    МассивИсключений.Добавить(ПеречислениеМенеджер.ВыдачаЗаймаРаботнику);
    МассивИсключений.Добавить(ПеречислениеМенеджер.ПеречислениеСотрудникуПоДоговоруПодряда);
    МассивИсключений.Добавить(ПеречислениеМенеджер.ПеречислениеДивидендов);
	
    СоответствиеКонтроль = бит_Казначейство.СформироватьСоответствияВидовОперацииЗаявки("РасходныйКассовыйОрдер");	
    ДобавитьВеткуДереваВидыОпераций(ВеткаРасходование
                                    ,СоответствиеКонтроль
                                    ,Перечисления.бит_ВидыДенежныхСредств.Наличные
                                    ,Перечисления.бит_ВидыОперацийЗаявкаНаРасходование
                                    ,МассивИсключений);
									
	// Поступление.
    ВеткаПоступление = пДеревоВидовОпераций.Строки.Добавить();
    ВеткаПоступление.ВидОперации = Перечисления.бит_РасходДоход.Поступление;
    
    НовСтрока = ВеткаПоступление.Строки.Добавить();
    НовСтрока.ВидОперации = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
    
    НовСтрока = ВеткаПоступление.Строки.Добавить();
    НовСтрока.ВидОперации = Перечисления.бит_ВидыДенежныхСредств.Наличные;
    
	ЗначениеВРеквизитФормы(пДеревоВидовОпераций, "ДеревоВидовОпераций");

КонецФункции

&НаСервере
Процедура УстановитьПодменюВыбораВидаОперации()
	
	СоотвИсключений = Новый Соответствие;
	
	// Расходование.
    МассивИсключений = Новый Массив;
    МассивИсключений.Добавить("ПеречислениеНалога");
    МассивИсключений.Добавить("ПереводНаДругойСчет");
    МассивИсключений.Добавить("ПеречислениеЗП");
    МассивИсключений.Добавить("ПеречислениеДенежныхСредствПодотчетнику");
	//МассивИсключений.Добавить("ПрочееСписаниеБезналичныхДенежныхСредств");
    МассивИсключений.Добавить("ВыдачаЗаймаРаботнику");
	МассивИсключений.Добавить("ВыплатаЗаработнойПлатыРаботнику");
	МассивИсключений.Добавить("ВыплатаДепонентов");
	МассивИсключений.Добавить("ПеречислениеСотрудникуПоДоговоруПодряда");
	МассивИсключений.Добавить("СнятиеНаличных");
	МассивИсключений.Добавить("ПеречислениеДивидендов");
	
    СоотвИсключений.Вставить("Безналичные", МассивИсключений);
    
    МассивИсключений = Новый Массив;
    МассивИсключений.Добавить("ПеречислениеЗП");
    МассивИсключений.Добавить("ПеречислениеДенежныхСредствПодотчетнику");
    МассивИсключений.Добавить("ИнкассацияДенежныхСредств");
    МассивИсключений.Добавить("ВзносНаличнымиВБанк");
    МассивИсключений.Добавить("ПрочееСписаниеБезналичныхДенежныхСредств");
	МассивИсключений.Добавить("ВыплатаЗаработнойПлатыРаботнику");
	МассивИсключений.Добавить("ВыплатаДепонентов");
	МассивИсключений.Добавить("ВыдачаЗаймаРаботнику");
    МассивИсключений.Добавить("ПеречислениеСотрудникуПоДоговоруПодряда");
    МассивИсключений.Добавить("ПеречислениеДивидендов");
    
    СоотвИсключений.Вставить("Наличные", МассивИсключений);
    
	бит_Казначейство.УстановитьПодменюВыбораВидаОперацииЗаявкиУправляемоеПриложение(ЭтотОбъект
																				   ,Элементы.ПодменюВидаОперацииРасходование
																				   ,Объект.ВидОперации.Метаданные().ЗначенияПеречисления
																				   ,"ДействияФормыДействиеУстановитьОперацию",
																				   СоотвИсключений);
	
	// Поступление.
    ИмяЗначенияПеречисления = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ВидыДенежныхСредств,
																					Перечисления.бит_ВидыДенежныхСредств.Безналичные);
    
	ИмяКнопки = "Поступление_" + ИмяЗначенияПеречисления;
	ИмяКоманды = "Команда_" + ИмяЗначенияПеречисления;
	
	КомандаУстановитьОперацию = Команды.Добавить(ИмяКоманды);
	КомандаУстановитьОперацию.Действие = "ДействияФормыДействиеУстановитьОперацию";
	
	КнопкаГруппыПодменю = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ПодменюВидаОперацииПоступление);
	КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
	КнопкаГруппыПодменю.Заголовок  = Перечисления.бит_ВидыДенежныхСредств.Безналичные;																			   
	
	ИмяЗначенияПеречисления = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ВидыДенежныхСредств,
																					Перечисления.бит_ВидыДенежныхСредств.Наличные);
    
	ИмяКнопки = "Поступление_" + ИмяЗначенияПеречисления;
	ИмяКоманды = "Команда_" + ИмяЗначенияПеречисления;
	
	КомандаУстановитьОперацию = Команды.Добавить(ИмяКоманды);
	КомандаУстановитьОперацию.Действие = "ДействияФормыДействиеУстановитьОперацию";
	
	КнопкаГруппыПодменю = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ПодменюВидаОперацииПоступление);
	КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
	КнопкаГруппыПодменю.Заголовок  = Перечисления.бит_ВидыДенежныхСредств.Наличные;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВеткуДереваВидыОпераций(ДеревоВидыОпераций, СоответствиеКонтроль, ВидОперацииГруппа, 
                                          ОбъектЗаполнения, МассивИсключений)

    // Добавляем строку верхнего уровня.
	СтрокаГруппа = ДеревоВидыОпераций.Строки.Добавить();
	СтрокаГруппа.ВидОперации = ВидОперацииГруппа;

	// Заполняем пункты.							
	Для Каждого ЗначениеПеречисления Из ОбъектЗаполнения Цикл
		
		Если СоответствиеКонтроль[ЗначениеПеречисления] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ МассивИсключений.Найти(ЗначениеПеречисления) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаГруппа.Строки.Добавить();
		НоваяСтрока.ВидОперации = ЗначениеПеречисления;
		
	КонецЦикла; // по объектам заполнения.

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокСтатейПоПринадлежности(Объект, Контейнер, ТипСтатьи, ВыводитьСообщения = Ложь)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"       		, Объект.Дата);
	СтруктураПараметров.Вставить("Организация"		, Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"        		, Контейнер.ЦФО);
	СтруктураПараметров.Вставить("РасходДоход"		, Контейнер.РасходДоход);
	СтруктураПараметров.Вставить("ТипСтатьи"  		, ТипСтатьи);
	СтруктураПараметров.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	СписокСтатей = бит_Казначейство.ПолучитьСписокСтатейПоПринадлежности(СтруктураПараметров);
	
	Возврат СписокСтатей;
	
КонецФункции

&НаСервере 
Процедура ПроверитьПринадлежностьЦФОКСтатьеОборотов(Контейнер, ИмяРеквизитаСтатьяОборотов, ТипСтатьи, ВыводитьСообщения = Ложь)

	СписокСтатейПоПринадлежности = ПолучитьСписокСтатейПоПринадлежности(Объект, Контейнер, ТипСтатьи);
	
	Если ТипЗнч(Контейнер) = Тип("ДанныеФормыСтруктура") Тогда
		ИмяПоля = "Объект."+ИмяРеквизитаСтатьяОборотов;
	Иначе
		НомерСтроки = Контейнер.НомерСтроки-1;
		
		Если ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
			ИмяПоля = "Объект.ГрафикПлатежей["+НомерСтроки+"]."+ИмяРеквизитаСтатьяОборотов;
		Иначе
			ИмяПоля = "Объект.ГрафикНачислений["+НомерСтроки+"]."+ИмяРеквизитаСтатьяОборотов;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ЦФО"						 , Контейнер.ЦФО);
	СтруктураПараметров.Вставить("СтатьяОборотов"			 , Контейнер[ИмяРеквизитаСтатьяОборотов]);
	СтруктураПараметров.Вставить("ИмяПоля"					 , ИмяПоля);
	СтруктураПараметров.Вставить("СписокСтатейПринадлежность", СписокСтатейПоПринадлежности);
	СтруктураПараметров.Вставить("ВыводитьСообщения"		 , ВыводитьСообщения);	
	
	Если Не бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(СтруктураПараметров) Тогда
		Контейнер[ИмяРеквизитаСтатьяОборотов] = Неопределено;
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииЦФО(Контейнер, ИмяРеквизитаСтатьяОборотов, ТипСтатьи)
	
	// Проверим принадлежность ЦФО к статье оборотов.
	ПредыдущаяСтатья = Контейнер[ИмяРеквизитаСтатьяОборотов];
	
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(Контейнер, ИмяРеквизитаСтатьяОборотов, ТипСтатьи, Истина);
	
	Если НЕ ПредыдущаяСтатья = Контейнер[ИмяРеквизитаСтатьяОборотов] Тогда
		ПриИзмененииСтатьиОборотов(Контейнер, ИмяРеквизитаСтатьяОборотов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидПлатежаПоСтатьеОборотов(ТекущиеДанные)

	// Изменение кода. Начало. 29.09.2015{{
	Если бит_РаботаСМетаданными.ЕстьПредопределенныйЭлемент("Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотов_ВидыПлатежей") Тогда

		ТекущиеДанные.ВидПлатежаПоКредитамЗаймам = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотов_ВидыПлатежей
																						,ТекущиеДанные.СтатьяОборотов);
																																														
	КонецЕсли;
	// Изменение кода. Конец. 29.09.2015}}

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатьиОборотов(Контейнер, ИмяРеквизитаСтатьяОборотов)

    Если ЗначениеЗаполнено(Контейнер[ИмяРеквизитаСтатьяОборотов]) Тогда
        
        Если Контейнер[ИмяРеквизитаСтатьяОборотов].ЭтоГруппа Тогда
			
			ТекстСообщения = НСтр("ru='Выбор групп статей запрещен.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Контейнер[ИмяРеквизитаСтатьяОборотов] = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			
			Возврат;
			
        КонецЕсли; 
        
        Если НЕ Контейнер[ИмяРеквизитаСтатьяОборотов].РасходДоход = Контейнер["РасходДоход"] Тогда
			
			ВидСтатьи = ?(Контейнер["РасходДоход"] = Перечисления.бит_РасходДоход.Поступление, "доходную", "расходную");
			
			ТекстСообщения = НСтр("ru='Следует выбрать %1% статью.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ВидСтатьи);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 
			
			Контейнер[ИмяРеквизитаСтатьяОборотов] = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			
			Возврат;
			
        КонецЕсли; 
        
		Если ИмяРеквизитаСтатьяОборотов = "СтатьяОборотов"
			И НЕ Контейнер[ИмяРеквизитаСтатьяОборотов].ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
			
			ТекстСообщения = НСтр("ru='Следует выбрать статью БДДС.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			 
			Контейнер[ИмяРеквизитаСтатьяОборотов] = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			
			Возврат;
			
		ИначеЕсли ИмяРеквизитаСтатьяОборотов = "СтатьяОборотовНачисления"
			И НЕ Контейнер[ИмяРеквизитаСтатьяОборотов].ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДР Тогда
			
			ТекстСообщения = НСтр("ru='Следует выбрать статью БДР.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			 
			Контейнер[ИмяРеквизитаСтатьяОборотов] = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			
			Возврат;	
			
        КонецЕсли; 
        
	КонецЕсли; 
    
	Если ЗначениеЗаполнено(Контейнер[ИмяРеквизитаСтатьяОборотов])
		И ИмяРеквизитаСтатьяОборотов = "СтатьяОборотов" Тогда
        
        Контейнер.СтавкаНДС = Контейнер[ИмяРеквизитаСтатьяОборотов].СтавкаНДС;
        
        Если ТипЗнч(Контейнер) = Тип("ДанныеФормыСтруктура") Тогда
            РассчитатьСуммуНДС(Объект, "СуммаПриход", "СуммаНДСПриход");
            РассчитатьСуммуНДС(Объект, "СуммаРасход", "СуммаНДСРасход");
        Иначе
            РассчитатьСуммуНДС(Контейнер);
		КонецЕсли;
		
    ИначеЕсли ЗначениеЗаполнено(Контейнер[ИмяРеквизитаСтатьяОборотов])
		И ИмяРеквизитаСтатьяОборотов = "СтатьяОборотовНачисления" Тогда
		
		Если ТипЗнч(Контейнер) = Тип("ДанныеФормыСтруктура") Тогда 
			
			Контейнер.СтавкаНДСНачисления = Контейнер[ИмяРеквизитаСтатьяОборотов].СтавкаНДС;
			
			РассчитатьСуммуНДС(Объект, "СуммаПриходНачисления", "СуммаНДСПриходНачисления",,"СтавкаНДСНачисления");
            РассчитатьСуммуНДС(Объект, "СуммаРасходНачисления", "СуммаНДСРасходНачисления",,"СтавкаНДСНачисления");
		Иначе
			Контейнер.СтавкаНДС = Контейнер[ИмяРеквизитаСтатьяОборотов].СтавкаНДС;
			
            РассчитатьСуммуНДС(Контейнер);
        КонецЕсли;    
    КонецЕсли;

	Если ТипЗнч(Контейнер) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		 ИД = Контейнер.ПолучитьИдентификатор();
		
	Иначе	
		
		ИД = Неопределено;
		
	КонецЕсли; 
	
	СтатьяНачисления = Ложь;
	Если СтрНайти(ИмяРеквизитаСтатьяОборотов, "Начисления") > 0 Тогда
		СтатьяНачисления = Истина;
	КонецЕсли;
	
	ИзменениеСтатьиОборотовСервер(ИД, СтатьяНачисления);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСтатьиОборотовСервер(ИД, СтатьяНачисления)

	Если СтатьяНачисления Тогда
		График = "ГрафикНачислений";
		Статья = "СтатьяОборотовНачисления";
	Иначе
		График = "ГрафикПлатежей";
		Статья = "СтатьяОборотов";
	КонецЕсли;
	
	Если ТипЗнч(ИД) = Тип("Число") Тогда
		
		Контейнер = Объект[График].НайтиПоИдентификатору(ИД);
		
	Иначе	
		
		Контейнер = Объект;
		
	КонецЕсли; 

	Если ЗначениеЗаполнено(Контейнер[Статья]) Тогда
		
		НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(Контейнер[Статья]);
		бит_Бюджетирование.УстановитьИспользованиеАналитики(Контейнер, НастройкиСтатьи, мКэшЗначений.ИзмеренияДоп);
		
	КонецЕсли; 
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоляВыбора_ВидОперацииРасходование()
	
	// Указан договор с видом Прочее.
	Если Не бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда	
		ДоговорСВидомПрочее = Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	Иначе
		ДоговорСВидомПрочее = Ложь;
	КонецЕсли; 
	
	// в документе указано направление Поступление.
    Направление_Поступление = Объект.РасходДоход = Перечисления.бит_РасходДоход.Поступление;
	
	// в таблице есть строки с направлением Расходование.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РасходДоход", Перечисления.бит_РасходДоход.Расходование);
	
	НайденныеСтроки = Объект.ГрафикПлатежей.НайтиСтроки(СтруктураОтбора);
	
	ЗаписиРасходаЕсть = НЕ НайденныеСтроки.Количество() = 0;
	
	// определим значение видимости элемента.
	ОтобразитьВидОперацииРасходование = Направление_Поступление И ДоговорСВидомПрочее И ЗаписиРасходаЕсть;
	
    Элементы.ВидОперацииРасходование.Видимость = ОтобразитьВидОперацииРасходование;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаСервер(ИмяГрафика)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.СформироватьГрафик(ИмяГрафика);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Если ИмяГрафика = "ГрафикПлатежей" Тогда
		УстановитьВидимостьПоляВыбора_ВидОперацииРасходование();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммыДокументаПоГрафикуСервер(ИмяГрафика, Направление, СпособЗаполнения = "Пропорционально")
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	РеквизитыШапкиГрафика = ДокументОбъект.ПолучитьЗначенияРеквизитовШапкиТаблицы(ИмяГрафика);
	
	ДокументОбъект.РаспределитьСуммыДокументаПоГрафику(ИмяГрафика, РеквизитыШапкиГрафика, Направление, СпособЗаполнения);
	
	ДокументОбъект.ИзменитьЗначенияРеквизитовШапкиТаблицы(РеквизитыШапкиГрафика, ИмяГрафика);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыПланирования()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоДокументов = ДокументОбъект.ДокументыПланирования();
	ДеревоДокументовПланирования = РеквизитФормыВЗначение("ДокументыПланирования");
	ДеревоДокументовПланирования.Строки.Очистить();
	ДеревоДокументовПланирования = ДеревоДокументов.Скопировать();
	ЗначениеВРеквизитФормы(ДеревоДокументовПланирования, "ДокументыПланирования");
		
КонецПроцедуры

&НаСервере
Функция ЗаписатьПровестиДокумент()
	
	Если Объект.Проведен Тогда
		РежимЗаписиДок = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписиДок = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// Запишем документ.
	ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокументОбъект, РежимЗаписиДок,, "Ошибки");
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат ДействиеВыполнено;
	
КонецФункции

&НаСервере
Процедура УдалитьДокументыПланированияНаСервере()
	
	ДеревоДокументовПланирования = РеквизитФормыВЗначение("ДокументыПланирования");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выполнять", 1);
	
	МассивДокументов = ДеревоДокументовПланирования.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
    Если МассивДокументов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не указаны документы для удаления!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
    КонецЕсли;
    
	Для Каждого ДокументКУдалению Из МассивДокументов Цикл
		
		Если ТипЗнч(ДокументКУдалению.ДокументПланирования) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		
		Если ТипЗнч(ДокументКУдалению.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			СтруктураПараметров.Вставить("ЭтоПометкаИзГрафикаНачислений");
		Иначе
			СтруктураПараметров.Вставить("ЭтоПометкаИзГрафикаПлатажей");
		КонецЕсли;
		
		// Пометим на удаление текущий документ планирования.
		Если бит_ОбщегоНазначения.ИзменитьПометкуНаУдалениеУОбъекта(ДокументКУдалению.ДокументПланирования, Истина,,, СтруктураПараметров) Тогда
			
			// Удалим ссылки на документ планирования в документе.
			УдалитьСсылкиНаДокументПланированияВДокументе(ДокументКУдалению.ДокументПланирования);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Запишем документ.
	ДокументЗаписан = ЗаписатьПровестиДокумент();
	
	Если ДокументЗаписан Тогда
		Записать();
		ОбновитьДокументыПланирования();
	КонецЕсли;
	
	// Установить видимость реквизитов.
    УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСсылкиНаДокументПланированияВДокументе(ДокПланирования)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ДокументПланирования", ДокПланирования);
	
	СтрокиДляОчистки 		   = Объект.ГрафикПлатежей.НайтиСтроки(СтруктураОтбора);
	СтрокиДляОчисткиНачисления = Объект.ГрафикНачислений.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекСтрока Из СтрокиДляОчистки Цикл
		ТекСтрока.ДокументПланирования = Неопределено;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СтрокиДляОчисткиНачисления Цикл
		ТекСтрока.ДокументПланирования = Неопределено;
		// Rarus-spb byse 2013.01.10 {
        ТекСтрока.Аналитика_4 = "";		
		// Rarus-spb byse 2013.01.10 }		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммыДокументаПоГрафику(ИмяГрафика, СпособЗаполнения="Пропорционально")
	
	// Распределить суммы документа по графику платежей.
    РаспределитьСуммыДокументаПоГрафикуСервер(ИмяГрафика, Перечисления.бит_РасходДоход.Поступление, СпособЗаполнения);
	РаспределитьСуммыДокументаПоГрафикуСервер(ИмяГрафика, Перечисления.бит_РасходДоход.Расходование, СпособЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикПриемникПоГрафикуИсточнику(ИмяГрафикаПриемника, ИмяГрафикаИсточника)
	
	ТаблицаДляОбработки = Объект[ИмяГрафикаИсточника].Выгрузить();
	
	ТаблицаДляОбработки.ЗаполнитьЗначения(Неопределено, "ДокументПланирования");
	
	СтруктураИмен = Новый Структура;
	СтруктураИмен.Вставить("ГрафикПлатежей_Статья"	, "СтатьяОборотов");
	СтруктураИмен.Вставить("ГрафикНачислений_Статья", "СтатьяОборотовНачисления");
	СтруктураИмен.Вставить("ГрафикПлатежей_НДС"		, "СтавкаНДС");
	СтруктураИмен.Вставить("ГрафикНачислений_НДС"	, "СтавкаНДСНачисления");
	
	ИмяСтатьиИсточник = СтруктураИмен[ИмяГрафикаИсточника+"_Статья"];
	ИмяСтатьиПриемник = СтруктураИмен[ИмяГрафикаПриемника+"_Статья"];
	ИмяСтавкаНДСПриемник = СтруктураИмен[ИмяГрафикаПриемника+"_НДС"];
	
	ТаблицаДляОбработки.Колонки[ИмяСтатьиИсточник].Имя = ИмяСтатьиПриемник;
	
	Для Каждого ТекущаяСтрока Из ТаблицаДляОбработки Цикл
		
		Если ТекущаяСтрока[ИмяСтатьиПриемник].РасходДоход = Объект[ИмяСтатьиПриемник].РасходДоход Тогда
			ТекущаяСтрока[ИмяСтатьиПриемник] = Объект[ИмяСтатьиПриемник];
		Иначе
			ТекущаяСтрока[ИмяСтатьиПриемник] = Неопределено;
		КонецЕсли;
		
		// При одинаковых значениях ставок НДС нет смысла делать обратный пересчет, теряются копейки.
		ПересчитатьСуммы = Истина;
		Если ТекущаяСтрока.СтавкаНДС = Объект[ИмяСтавкаНДСПриемник]
			ИЛИ (ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 И Объект[ИмяСтавкаНДСПриемник] = Перечисления.СтавкиНДС.НДС10_110)
			ИЛИ (Объект[ИмяСтавкаНДСПриемник] = Перечисления.СтавкиНДС.НДС10 И ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110)
			ИЛИ (ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 И Объект[ИмяСтавкаНДСПриемник] = Перечисления.СтавкиНДС.НДС18_118)
			ИЛИ (Объект[ИмяСтавкаНДСПриемник] = Перечисления.СтавкиНДС.НДС18 И ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
			ИЛИ (ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 И Объект[ИмяСтавкаНДСПриемник] = Перечисления.СтавкиНДС.НДС20_120)
			ИЛИ (Объект[ИмяСтавкаНДСПриемник] = Перечисления.СтавкиНДС.НДС20 И ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
			ИЛИ (ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС И Объект[ИмяСтавкаНДСПриемник] = Перечисления.СтавкиНДС.НДС0)
			ИЛИ (Объект[ИмяСтавкаНДСПриемник] = Перечисления.СтавкиНДС.БезНДС И ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Тогда
			
			ПересчитатьСуммы = Ложь;	
		КонецЕсли; 
		
		ТекущаяСтрока.СтавкаНДС = Объект[ИмяСтавкаНДСПриемник];
		
		Если ПересчитатьСуммы Тогда
		
			РассчитатьСуммуНДС(ТекущаяСтрока, "СуммаБезНДС",,Ложь);
		
		КонецЕсли; 
		
	КонецЦикла;
	
	// Пересчитаем итоговые суммы.
	Если ИмяГрафикаПриемника = "ГрафикНачислений" И Объект.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
			
		Объект.СуммаРасходНачисления    = ТаблицаДляОбработки.Итог("Сумма");
		Объект.СуммаНДСРасходНачисления = ТаблицаДляОбработки.Итог("НДС");
		Объект.ДатаНачалаНачисления     = Объект.ДатаНачала;
		Объект.ДатаОкончанияНачисления  = Объект.ДатаОкончания;
		
	ИначеЕсли ИмяГрафикаПриемника = "ГрафикНачислений" И Объект.РасходДоход = Перечисления.бит_РасходДоход.Поступление Тогда	
		
		Объект.СуммаПриходНачисления    = ТаблицаДляОбработки.Итог("Сумма");
		Объект.СтатьяОборотовНачисления = ТаблицаДляОбработки.Итог("НДС");
        Объект.ДатаНачалаНачисления     = Объект.ДатаНачала;
		Объект.ДатаОкончанияНачисления  = Объект.ДатаОкончания;

	ИначеЕсли ИмяГрафикаПриемника = "ГрафикПлатежей" И Объект.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
			
		Объект.СуммаРасход    = ТаблицаДляОбработки.Итог("Сумма");
		Объект.СуммаНДСРасход = ТаблицаДляОбработки.Итог("НДС");
		Объект.ДатаНачала     = Объект.ДатаНачалаНачисления;
		Объект.ДатаОкончания  = Объект.ДатаОкончанияНачисления;

	ИначеЕсли ИмяГрафикаПриемника = "ГрафикПлатежей" И Объект.РасходДоход = Перечисления.бит_РасходДоход.Поступление Тогда	
		
		Объект.СуммаПриход    = ТаблицаДляОбработки.Итог("Сумма");
		Объект.СуммаНДСПриход = ТаблицаДляОбработки.Итог("НДС");
        Объект.ДатаНачала     = Объект.ДатаНачалаНачисления;
		Объект.ДатаОкончания  = Объект.ДатаОкончанияНачисления;

	КонецЕсли;
	
	Объект[ИмяГрафикаПриемника].Загрузить(ТаблицаДляОбработки);
	
	ПометитьПлатежиПопадающиеНаВыходной(ИмяГрафикаПриемника);
	
	ОФормитьТаблицу(ИмяГрафикаПриемника);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФинансовыйГрафик(Параметр)
	
	ТаблицаВыдачиТраншей = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(Параметр.СтруктураТаблиц.ГрафикВыдачиТраншей,Параметр.СтруктураТаблиц.ГрафикВыдачиТраншей_Колонки);
		
	Объект.ГрафикВыдачиТраншей.Загрузить(ТаблицаВыдачиТраншей);
	
	ТаблицаПлатежей = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(Параметр.СтруктураТаблиц.ГрафикПлатежей,Параметр.СтруктураТаблиц.ГрафикПлатежей_Колонки);
	
	ТаблицаКОбработкеГрафикПлатежей = Ложь;
	Если Параметр.ВидГрафика = Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
		ТаблицаКОбработке               = Объект.ГрафикПлатежей;
		ТаблицаКОбработкеГрафикПлатежей = Истина;
		ИмяГрафика = "ГрафикПлатежей";
	Иначе
		ТаблицаКОбработке = Объект.ГрафикНачислений;
		ИмяГрафика = "ГрафикНачислений";
	КонецЕсли;
	
	Если Параметр.РежимДобавления = "Загрузить" Тогда
		
		МассивКУдалению = Новый Массив;
		
		Для Каждого ТекущаяСтрока Из ТаблицаКОбработке Цикл
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДокументПланирования) Тогда
				МассивКУдалению.Добавить(ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекущаяСтрока Из МассивКУдалению Цикл
			ТаблицаКОбработке.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаПлатежей Цикл
		
		НоваяСтрока = ТаблицаКОбработке.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		Если Параметр.ВидГрафика = Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
			НоваяСтрока.СтатьяОборотов 	= ТекущаяСтрока.СтатьяОборотов;
			НоваяСтрока.СтавкаНДС 		= НоваяСтрока.СтатьяОборотов.СтавкаНДС;
		Иначе
			НоваяСтрока.СтатьяОборотовНачисления = ТекущаяСтрока.СтатьяОборотов;
			НоваяСтрока.СтавкаНДС 				 = НоваяСтрока.СтатьяОборотовНачисления.СтавкаНДС;
		КонецЕсли;	
		
		НоваяСтрока.ЦФО 	= Объект.ЦФО;
		НоваяСтрока.Проект 	= Объект.Проект;
		НоваяСтрока.НоменклатурнаяГруппа = Объект.НоменклатурнаяГруппа;
		
		// Изменение кода. Начало. 29.09.2015{{
		Если бит_РаботаСМетаданными.ЕстьПредопределенныйЭлемент("Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотов_ВидыПлатежей") И ТаблицаКОбработкеГрафикПлатежей Тогда
	
			НоваяСтрока.ВидПлатежаПоКредитамЗаймам = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотов_ВидыПлатежей
																							,НоваяСтрока.СтатьяОборотов);
																																															
		КонецЕсли;
		// Изменение кода. Конец. 29.09.2015}}
		
		Для н = 1 По мКэшЗначений.МаксКолвоДопАналитик Цикл
			НоваяСтрока["Аналитика_"+н]  = Объект["Аналитика_"+н];
		КонецЦикла;
		
		РассчитатьСуммуНДС(НоваяСтрока);
		
	КонецЦикла;
	
	ОФормитьТаблицу(ИмяГрафика);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыПланированияСервер(ИмяГрафика, ВидДокумента)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выполнять", Истина);
	
	НайденныеСтроки = Объект[ИмяГрафика].НайтиСтроки(СтруктураОтбора);
	
	// Проверим заполненность реквизитов шапки документа.
    Если Не ДокументОбъект.РеквизитыЗаполненыДляСозданияДокументовПланирования(ИмяГрафика, ВидДокумента, НайденныеСтроки, РежимСообщений) Тогда
        Возврат;
    КонецЕсли;

	
	ДокументОбъект.СоздатьДокументыПланирования(ИмяГрафика, НайденныеСтроки, ВидДокумента, РежимЗаписиДокумента[РежимЗаписи], РежимСообщений);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоПериодовВыплат(СтрокаТранша)
	
	СтрокаТранша.КоличествоПериодовВыплат = Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.РассчитатьКоличествоПериодовВыплат(мКэшЗначений.ПериодичностьСоставляющейОсновнойДолг,
																										СтрокаТранша.МесяцПервогоПлатежа, 
																										СтрокаТранша.ДатаПогашения);
																										
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначенияРеквизитовШапкиТаблицыСервер(ИмяГрафика)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураРеквизитов = ДокументОбъект.ПолучитьЗначенияРеквизитовШапкиТаблицы(ИмяГрафика);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаСервере
Процедура СоздатьИзменитьГрафикСервер(ИмяГрафика, РеквизитыШапкиТаблицы, СпособЗаполнения="Пропорционально", ЗаменитьГрафик=Истина, СтруктураПараметров=Неопределено)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ИзменитьЗначенияРеквизитовШапкиТаблицы(РеквизитыШапкиТаблицы, ИмяГрафика);
	
	ДокументОбъект.СформироватьГрафик(ИмяГрафика, СпособЗаполнения, ЗаменитьГрафик, СтруктураПараметров);
	
	СтруктураРеквизитов = ДокументОбъект.ПолучитьЗначенияРеквизитовШапкиТаблицы(ИмяГрафика);
	
	Если Не бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		ДоговорПрочее = ДокументОбъект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	Иначе
		ДоговорПрочее = Ложь;
	КонецЕсли;
	
	// Пересчитаем итоговые суммы.
	Если ДоговорПрочее ИЛИ ДокументОбъект.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
		Отбор = Новый Структура("РасходДоход", Перечисления.бит_РасходДоход.Расходование);
		ТаблицаСумм	= ДокументОбъект[ИмяГрафика].Выгрузить(Отбор,"Сумма, НДС");
		РеквизитыШапкиТаблицы.СуммаРасход    = ТаблицаСумм.Итог("Сумма");
		РеквизитыШапкиТаблицы.СуммаНДСРасход = ТаблицаСумм.Итог("НДС");
	КонецЕсли;
	
	Если ДоговорПрочее ИЛИ ДокументОбъект.РасходДоход = Перечисления.бит_РасходДоход.Поступление Тогда
		Отбор = Новый Структура("РасходДоход", Перечисления.бит_РасходДоход.Поступление);
		ТаблицаСумм	   = ДокументОбъект[ИмяГрафика].Выгрузить(Отбор,"Сумма, НДС");
		РеквизитыШапкиТаблицы.СуммаПриход    = ТаблицаСумм.Итог("Сумма");
		РеквизитыШапкиТаблицы.СуммаНДСПриход = ТаблицаСумм.Итог("НДС");
	КонецЕсли;
	
	Если ВРег(ИмяГрафика) = ВРег("ГрафикПлатежей") Тогда
		Если Не ЗначениеЗаполнено(ДокументОбъект.СтатьяОборотов) Тогда
			РеквизитыШапкиТаблицы.СтатьяОборотов = СтруктураПараметров.СтатьяОборотов;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ДокументОбъект.СтатьяОборотовНачисления) Тогда
			РеквизитыШапкиТаблицы.СтатьяОборотов = СтруктураПараметров.СтатьяОборотов;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.ИзменитьЗначенияРеквизитовШапкиТаблицы(РеквизитыШапкиТаблицы, ИмяГрафика);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	// Установим видимость поля выбора "ВидОперацииРасходование".
	УстановитьВидимостьПоляВыбора_ВидОперацииРасходование();
	
	// помечаем строки с периодом попадающим на выходной.
    ПометитьПлатежиПопадающиеНаВыходной(ИмяГрафика);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьПлатежиПопадающиеНаВыходной(ИмяГрафика)
	
	// получаем пройзводственный календарь.
	мНастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Объект.Дата,,,"Ошибки");
	ИмяНастройкиКалендарь = ПланыВидовХарактеристик.бит_НастройкиПрограммы.Календарь;
	Календарь = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы, ИмяНастройкиКалендарь);

	ТаблицаПлатежей = Объект[ИмяГрафика].Выгрузить();
	
	ТаблицаПлатежей.Сортировать("Период");
	
	МинимальнаяДата  = Дата(1,1,1);
	МаксимальнаяДата = Дата(2999,1,1);
	
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		МинимальнаяДата  = ДобавитьМесяц(ТаблицаПлатежей[0].Период, -1);
		МаксимальнаяДата = ДобавитьМесяц(ТаблицаПлатежей[ТаблицаПлатежей.Количество()-1].Период, 1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	РабочиеДни = Новый Массив;
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Запрос.УстановитьПараметр("ТаблицаПлатежей" , ТаблицаПлатежей);
	Запрос.УстановитьПараметр("Календарь"		, Календарь);
	Запрос.УстановитьПараметр("РабочиеДни"	    , РабочиеДни);
	Запрос.УстановитьПараметр("МинимальнаяДата" , МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата", МаксимальнаяДата);
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПлатежей.Период
	|ПОМЕСТИТЬ ТаблицаПлатежей
	|ИЗ
	|	&ТаблицаПлатежей КАК ТаблицаПлатежей
	|;
	|";
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() 
		ИЛИ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		ТекстДанныеГрафика = 
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПроизводственногоКалендаря.Дата КАК ДатаКалендаря,
		|	ДанныеПроизводственногоКалендаря.ВидДня
		|ПОМЕСТИТЬ ПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &Календарь
		|	И (НЕ ДанныеПроизводственногоКалендаря.ВидДня В (&РабочиеДни))
		|	И ДанныеПроизводственногоКалендаря.Дата >= &МинимальнаяДата
		|	И ДанныеПроизводственногоКалендаря.Дата <= &МаксимальнаяДата
		|;
		|";
	Иначе
		ТекстДанныеГрафика = 
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
		|	РегламентированныйПроизводственныйКалендарь.ВидДня
		|ПОМЕСТИТЬ ПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	(НЕ РегламентированныйПроизводственныйКалендарь.ВидДня В (&РабочиеДни))
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &МинимальнаяДата
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &МаксимальнаяДата
		|;
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстДанныеГрафика;
	ТекстЗапроса = ТекстЗапроса +
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПлатежей.Период,
	|	ПроизводственныйКалендарь.ВидДня,
	|	ПроизводственныйКалендарь.ДатаКалендаря
	|ИЗ
	|	ТаблицаПлатежей КАК ТаблицаПлатежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО ТаблицаПлатежей.Период = ПроизводственныйКалендарь.ДатаКалендаря
	|ГДЕ
	|	(НЕ ПроизводственныйКалендарь.ДатаКалендаря ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПлатежей.Период,
	|	ПроизводственныйКалендарь.ВидДня,
	|	ПроизводственныйКалендарь.ДатаКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПлатежей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПроизводственныйКалендарь";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	// снимем признак выходного дня у строк.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоВыходной", Истина);
	
	МассивСтрок = Объект[ИмяГрафика].НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл 
		
		ТекущаяСтрока.ЭтоВыходной = Ложь;
		
	КонецЦикла;
	
	// установим признак выходного дня.
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Период", Выборка.Период);
		
		МассивСтрок = Объект[ИмяГрафика].НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ТекущаяСтрока Из МассивСтрок Цикл 
			
			ТекущаяСтрока.ЭтоВыходной = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектВПообъектномГрафике(ИДСтроки)
	
	ТекущиеДанные = ПообъектныйГрафик.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЦенныеБумаги Тогда
		
		ТекущиеДанные.Объект = Справочники.ЦенныеБумаги.ПустаяСсылка();
		
	Иначе
		
		ТекущиеДанные.Объект = Справочники.ОсновныеСредства.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикПоОбъектуСервер(ИДСтроки, СтруктураПараметров)
	
	СтрокаОбъект = ПообъектныйГрафик.НайтиПоИдентификатору(ИДСтроки);
	
	Если СтрокаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоГрафика = РеквизитФормыВЗначение("ПообъектныйГрафик");
	
	СтрокаОбъектаВДереве = ДеревоГрафика.Строки.Найти(СтрокаОбъект.Объект, "Объект");
	
	пОбъект		   = СтруктураПараметров.Объект;
	пПериодичность = СтруктураПараметров.Периодичность;
	пДатаНачала    = СтруктураПараметров.ДатаНачала;
	пДатаОкончания = СтруктураПараметров.ДатаОкончания;
	пСумма		   = СтруктураПараметров.Сумма;
	пРежим 		   = СтруктураПараметров.Режим;
	пЗаменитьСуществующий = СтруктураПараметров.ЗаменитьСуществующий;
	
	Объект.ДатаНачала    = Мин(пДатаНачала	  , Объект.ДатаНачала);
	Объект.ДатаОкончания = Макс(пДатаОкончания, Объект.ДатаОкончания);
	
	// Сформируем массив дат платежей.
	МассивПериодов = Документы.бит_ДополнительныеУсловияПоДоговору.ПолучитьПериоды(пПериодичность, пДатаНачала, пДатаОкончания);
	КоличествоПериодов = МассивПериодов.Количество();
	Если КоличествоПериодов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определим сумму одного платежа.
	Если пРежим = "Распределение" Тогда
		СуммаСтроки = пСумма / КоличествоПериодов;	
		СуммаОбщая  = пСумма;
	Иначе
		СуммаСтроки = пСумма;
		СуммаОбщая  = пСумма * КоличествоПериодов;
	КонецЕсли;
	
	СтрокаОбъектаВДереве.Объект = пОбъект;
	СтрокаОбъектаВДереве.Сумма  = СтрокаОбъектаВДереве.Сумма + СуммаОбщая;
	
	Если ТипЗнч(пОбъект) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		СтрокаОбъектаВДереве.ИнвентарныйНомер = ПолучитьИнвентарныеНомераОС(пОбъект);
	КонецЕсли;
	
			
	// Заполним график для объекта.
	Для Ном = 1 По КоличествоПериодов Цикл
		
		Период = МассивПериодов[Ном - 1];
		
		Если пЗаменитьСуществующий Тогда
			НовСтрока = СтрокаОбъектаВДереве.Строки.Добавить();
		Иначе
			НайденнаяСтрока = СтрокаОбъектаВДереве.Строки.Найти(Период, "Период");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				НовСтрока = НайденнаяСтрока;
			Иначе
				НовСтрока = СтрокаОбъектаВДереве.Строки.Добавить();
			КонецЕсли;
		КонецЕсли; 
		
		НовСтрока.Сумма  = НовСтрока.Сумма + СуммаСтроки;
		НовСтрока.Период = Период;
		
	КонецЦикла;  
	
	СтрокаОбъектаВДереве.Строки.Сортировать("Период");
	
	ЗначениеВРеквизитФормы(ДеревоГрафика, "ПообъектныйГрафик");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнвентарныеНомераОС(ТемпОС)

	ЭтоМассив = ТипЗнч(ТемпОС) = Тип("Массив");
	
	Если ЭтоМассив Тогда
		СведенияОС = Новый Соответствие;
		МассивОС = ТемпОС;
	Иначе	
		СведенияОС = Неопределено;
	    МассивОС = Новый Массив;
		МассивОС.Добавить(ТемпОС);
	КонецЕсли;
	
	// Получим сведения по ОС.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаСведений", КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("МассивОС"	, МассивОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОС.ОсновноеСредство,
	|	СведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, 
	|												ОсновноеСредство В (&МассивОС)) КАК СведенияОС
	|";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если ЭтоМассив Тогда
		
		Пока Выборка.Следующий() Цикл
			СведенияОС.Вставить(Выборка.ОсновноеСредство, Выборка.ИнвентарныйНомер);	
		КонецЦикла;
		
	ИначеЕсли Не Результат.Пустой() Тогда	
		
		Выборка.Следующий();
		СведенияОС = Выборка.ИнвентарныйНомер;
		
	КонецЕсли;   		
		
		
	Возврат СведенияОС;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОбщемуГрафикуСервер()
	
	СтрокиГрафика = ПообъектныйГрафик.ПолучитьЭлементы();
	
	СуммаКоэффициентов = 0;
	
	Для Каждого ТекСтрока Из СтрокиГрафика Цикл
		
		СуммаКоэффициентов = СуммаКоэффициентов + ТекСтрока.КоэффициентРаспределения;
		
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Не заданы коэффициенты распределения для объектов.'");
	    бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
		
	СохранитьПообъектныйГрафикПлатежей(Объект);
	
	ТаблицаПообъектный = Объект.ПообъектныйГрафикПлатежей.Выгрузить(, "Объект, КоэффициентРаспределения");
	ТаблицаПообъектный.Свернуть("Объект", "КоэффициентРаспределения");
			
	ТаблицаОбщийГрафик = Объект.ГрафикПлатежей.Выгрузить(, "Период, СуммаБезНДС");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПообъектный", ТаблицаПообъектный);
	Запрос.УстановитьПараметр("ТаблицаОбщийГрафик", ТаблицаОбщийГрафик);
	Запрос.УстановитьПараметр("СуммаКоэффициентов", СуммаКоэффициентов);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пообъектный.Объект КАК Объект,
	|	Пообъектный.КоэффициентРаспределения КАК Коэффициент
	|ПОМЕСТИТЬ ТабЧастьПообъектный
	|ИЗ
	|	&ТаблицаПообъектный КАК Пообъектный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщийГрафик.Период КАК Период,
	|	ОбщийГрафик.СуммаБезНДС КАК Сумма
	|ПОМЕСТИТЬ ТабЧастьГрафик
	|ИЗ
	|	&ТаблицаОбщийГрафик КАК ОбщийГрафик
	|ГДЕ
	|	ОбщийГрафик.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабЧастьПообъектный.Объект КАК Объект,
	|	ТабЧастьПообъектный.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ Коэффициенты
	|ИЗ
	|	ТабЧастьПообъектный КАК ТабЧастьПообъектный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Коэффициенты.Объект КАК Объект,
	|	ТабЧастьГрафик.Период КАК Период,
	|	Коэффициенты.Коэффициент КАК КоэффициентРаспределения,
	|	ТабЧастьГрафик.Сумма * Коэффициенты.Коэффициент / &СуммаКоэффициентов КАК Сумма
	|ИЗ
	|	ТабЧастьГрафик КАК ТабЧастьГрафик,
	|	Коэффициенты КАК Коэффициенты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ
	|	МАКСИМУМ(КоэффициентРаспределения),
	|	СУММА(Сумма)
	|ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабЧастьПообъектный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабЧастьГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Коэффициенты";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияОбъектов = ПообъектныйГрафик.ПолучитьЭлементы();
	
	КоллекцияОбъектов.Очистить();
	
	МассивОС = ПолучитьМассивОсновныхСредств(ТаблицаПообъектный);
	СоответствиеОС = ПолучитьИнвентарныеНомераОС(МассивОС);
	
	ВыборкаОбъектов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		УзелДерева = КоллекцияОбъектов.Добавить();
		
		ЗаполнитьЗначенияСвойств(УзелДерева, ВыборкаОбъектов);
		
		УзелДерева.ЭтоВерхнийУровень = Истина;
		
		Если ТипЗнч(УзелДерева.Объект) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			УзелДерева.ИнвентарныйНомер = СоответствиеОС.Получить(УзелДерева.Объект);
		КонецЕсли;
		
		Выборка = ВыборкаОбъектов.Выбрать();
		
		КоллекцияСтрок = УзелДерева.ПолучитьЭлементы();
		
		Пока Выборка.Следующий() Цикл
					
			СтрокаГрафика  = КоллекцияСтрок.Добавить();
			СтрокаГрафика.Период = Выборка.Период;
			СтрокаГрафика.Сумма  = Выборка.Сумма;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПообъектныйГрафикПлатежей(ДокОбъект)
	
	ДокОбъект.ПообъектныйГрафикПлатежей.Очистить();
	
	СтрокиГрафика = ПообъектныйГрафик.ПолучитьЭлементы();
	
	Для Каждого СтрокаОбъекта Из СтрокиГрафика Цикл
		
		ТекОбъект   = СтрокаОбъекта.Объект;
		Коэффициент = СтрокаОбъекта.КоэффициентРаспределения;
		
		ПодчиненныеСтроки = СтрокаОбъекта.ПолучитьЭлементы();
		
		Если ПодчиненныеСтроки.Количество() = 0 
			И ЗначениеЗаполнено(ТекОбъект) Тогда
			НовСтрока = ДокОбъект.ПообъектныйГрафикПлатежей.Добавить();
			НовСтрока.Объект 				   = ТекОбъект;
			НовСтрока.КоэффициентРаспределения = Коэффициент;		
		КонецЕсли;
		
		Для Каждого СтрокаГрафика Из ПодчиненныеСтроки Цикл
							
			НовСтрока = ДокОбъект.ПообъектныйГрафикПлатежей.Добавить();	
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаГрафика);
			НовСтрока.Объект 				   = ТекОбъект;
			НовСтрока.КоэффициентРаспределения = Коэффициент;
			Коэффициент = 0;
			
		КонецЦикла;		
	
	КонецЦикла;		
	 	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивОсновныхСредств(ТаблицаОбъектов = Неопределено)

	МассивОС 		 = Новый Массив;
	ИзТабличнойЧасти = ТаблицаОбъектов = Неопределено;
	
	Если ИзТабличнойЧасти И Объект.ПообъектныйГрафикПлатежей.Количество() <> 0 Тогда
			
		// Заполним массив ОС из пообъектного графика.
		СоответствиеОС = Новый Соответствие;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТабЧасть.Объект
		|ИЗ
		|	Документ.бит_ДополнительныеУсловияПоДоговору.ПообъектныйГрафикПлатежей КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Объект
		|";              		
		Результат = Запрос.Выполнить();	
		
		Выборка = Результат.Выбрать();  		
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
				МассивОС.Добавить(Выборка.Объект);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивОС;

КонецФункции

&НаСервере
Процедура ВосстановитьПообъектныйГрафикПлатежей(ИзПообъектногоГрафикаПлатежей = Ложь)
	
	Если Объект.ПообъектныйГрафикПлатежей.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
		
 	Запрос = Новый Запрос;
	
	Если Не ИзПообъектногоГрафикаПлатежей Тогда
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТабЧасть.Объект КАК Объект,
		|	ТабЧасть.Период,
		|	ТабЧасть.Сумма КАК Сумма,
		|	ТабЧасть.КоэффициентРаспределения КАК КоэффициентРаспределения
		|ИЗ
		|	Документ.бит_ДополнительныеУсловияПоДоговору.ПообъектныйГрафикПлатежей КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка = &Ссылка
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(КоэффициентРаспределения)
		|ПО
		|	Объект
		|";
		
		МассивОС = ПолучитьМассивОсновныхСредств();
		
	Иначе
				
		ТаблицаПообъектныйГрафикПлатежей = Объект.ПообъектныйГрафикПлатежей.Выгрузить();
				
		Запрос.УстановитьПараметр("ТаблицаПообъектныйГрафикПлатежей", ТаблицаПообъектныйГрафикПлатежей);
																		   
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТабЧасть.Объект КАК Объект,
		|	ТабЧасть.Период,
		|	ТабЧасть.Сумма КАК Сумма,
		|	ТабЧасть.КоэффициентРаспределения КАК КоэффициентРаспределения
		|ПОМЕСТИТЬ ПообъектныйГрафикПлатежей
		|ИЗ
		|	&ТаблицаПообъектныйГрафикПлатежей КАК ТабЧасть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПообъектныйГрафикПлатежей.Объект КАК Объект,
		|	ПообъектныйГрафикПлатежей.Период,
		|	ПообъектныйГрафикПлатежей.Сумма КАК Сумма,
		|	ПообъектныйГрафикПлатежей.КоэффициентРаспределения КАК КоэффициентРаспределения
		|ИЗ
		|	ПообъектныйГрафикПлатежей КАК ПообъектныйГрафикПлатежей
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(КоэффициентРаспределения)
		|ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПообъектныйГрафикПлатежей
		|";
		
		МассивОС = ТаблицаПообъектныйГрафикПлатежей.ВыгрузитьКолонку("Объект");
		
	КонецЕсли;
	
	СоответствиеОС = ПолучитьИнвентарныеНомераОС(МассивОС);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаГруппа = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	СтрокиГрафика = ПообъектныйГрафик.ПолучитьЭлементы();
	
	Пока ВыборкаГруппа.Следующий() Цикл
		
		// Добавим строку с объектом.
		СтрокаОбъект = СтрокиГрафика.Добавить();
		
		СтрокаОбъект.Объект 				  = ВыборкаГруппа.Объект;
		СтрокаОбъект.Сумма  				  = ВыборкаГруппа.Сумма;
		СтрокаОбъект.КоэффициентРаспределения = ВыборкаГруппа.КоэффициентРаспределения;
		СтрокаОбъект.ЭтоВерхнийУровень = Истина;
		
		Если ТипЗнч(СтрокаОбъект.Объект) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			СтрокаОбъект.ИнвентарныйНомер = СоответствиеОС.Получить(СтрокаОбъект.Объект);	
		КонецЕсли;   		
		
		// Заполним график для объекта.
		Выборка = ВыборкаГруппа.Выбрать();
		
		СтрокиОбъекта = СтрокаОбъект.ПолучитьЭлементы();
		
		Пока Выборка.Следующий() Цикл
			НовСтрока = СтрокиОбъекта.Добавить();
			НовСтрока.Сумма  = Выборка.Сумма;
			НовСтрока.Период = Выборка.Период;
		КонецЦикла;
	
	КонецЦикла;
 
КонецПроцедуры

// Процедура заполняет элемент формы ГрафикПлатежей
// по табличной части ПообъектныйГрафикПлатежей.
//
// Параметры:
//  ОбъектДляЗаполнения - ДанныеФормыСтруктура.
//  
&НаСервере
Процедура ВосстановитьЗагруженныеИзExcelДанные(ИмяТабЧасти, Знач ОбъектДляЗаполнения = Неопределено)
	 		
	Если ТипЗнч(ОбъектДляЗаполнения) = Тип("ДанныеФормыСтруктура") Тогда
	 	ОбъектДляЗаполнения_Объект = ДанныеФормыВЗначение(ОбъектДляЗаполнения, Тип("ДокументОбъект.бит_ДополнительныеУсловияПоДоговору"));
    ИначеЕсли ТипЗнч(ОбъектДляЗаполнения) = Тип("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору") Тогда
        ОбъектДляЗаполнения_Объект = ОбъектДляЗаполнения.ПолучитьОбъект();
    Иначе
		ОбъектДляЗаполнения_Объект = ОбъектДляЗаполнения;
	КонецЕсли;
	ЗначениеВДанныеФормы(ОбъектДляЗаполнения_Объект, Объект);
	
	Если ИмяТабЧасти = "ПообъектныйГрафикПлатежей" Тогда
		ПообъектныйГрафик.ПолучитьЭлементы().Очистить();
		ВосстановитьПообъектныйГрафикПлатежей(Истина);
	КонецЕсли;
	 
КонецПроцедуры

// Процедура формирует график платежей из пообъектного графика.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура СформироватьГрафикПлатежейИзПообъектногоГрафика()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// Очистим старый график.
	Объект.ГрафикПлатежей.Очистить();
	
  	// Заполним структуру основных данных.
	СтруктураДанных = ДокументОбъект.СформироватьСтруктуруДанныхГрафика("ГрафикПлатежей");
	
	ТаблицаГрафиков = Объект.ПообъектныйГрафикПлатежей.Выгрузить();
	ТаблицаГрафиков.Свернуть("Период", "Сумма");
	ТаблицаГрафиков.Сортировать("Период");
	
	Для Каждого СтрокаТаблицы Из ТаблицаГрафиков Цикл
	
		НовСтрока = Объект.ГрафикПлатежей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(НовСтрока, СтруктураДанных);
		
		НовСтрока.СуммаБезНДС = СтрокаТаблицы.Сумма;
				
		РассчитатьСуммуНДС(НовСтрока,"СуммаБезНДС" , , Ложь);	
		НовСтрока.Сумма = НовСтрока.СуммаБезНДС + НовСтрока.НДС;

		Если Объект.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
			НовСтрока.РасходДоход = Перечисления.бит_РасходДоход.Расходование;
		Иначе
			НовСтрока.РасходДоход = Перечисления.бит_РасходДоход.Поступление;
		КонецЕсли;
	
	КонецЦикла; 
	
	// Пересчитаем итоговые суммы для шапки.
	Если Объект.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
		Объект.СуммаРасход = Объект.ГрафикПлатежей.Итог("Сумма");
		РассчитатьСуммуНДС(Объект, "СуммаРасход", "СуммаНДСРасход");
	Иначе
		Объект.СуммаПриход = Объект.ГрафикПлатежей.Итог("Сумма");
		РассчитатьСуммуНДС(Объект, "СуммаПриход", "СуммаНДСПриход");
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиПользователяДляДокумента()
	
	РежимЗаписи = "Запись";
	РежимСообщений = "Ошибки";
	ОтображатьПараметрыГрафикаНачислений = Истина;
	ОтображатьПараметрыГрафикаПлатежей = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзПообъектногоГрафикаСервер()
	
	СохранитьПообъектныйГрафикПлатежей(Объект);
			
	СформироватьГрафикПлатежейИзПообъектногоГрафика();	
	
	ОФормитьТаблицу("ГрафикПлатежей");
	
КонецПроцедуры

&НаСервере
Процедура УпаковатьТаблицу(ИмяТаблицы, СтрТаблиц)
	
	МассивРеквизитов = Объект[ИмяТаблицы].Выгрузить().Колонки;
	ИменаРеквизитов  = Новый Структура;
	Для каждого Реквизит ИЗ МассивРеквизитов Цикл
		
		ИменаРеквизитов.Вставить(Реквизит.Имя,Реквизит.ТипЗначения);
		
	КонецЦикла;
	СтрТаблиц.Вставить(ИмяТаблицы, бит_ОбщегоНазначенияКлиентСервер.УпаковатьДанныеФормыКоллекция(Объект[ИмяТаблицы],ИменаРеквизитов));
	СтрТаблиц.Вставить(ИмяТаблицы+"_Колонки", ИменаРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ФункционалАктуализацииГрафиковДоговоров
	
&НаКлиенте
Процедура АктуализироватьГрафикПлатежей(Команда)
	
	ОповещениеЗакртиеФормыНастройкиАктуализации = Новый ОписаниеОповещения("ЗакрытиеФормыНастройкиАктуализации", ЭтотОбъект);
	
	ОткрытьФорму("Документ.бит_ДополнительныеУсловияПоДоговору.Форма.ФормаНастройкаГрафикаАктуализации",,,,,, ОповещениеЗакртиеФормыНастройкиАктуализации, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  ПараметрыАктуализации   - Строка.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте
Процедура ЗакрытиеФормыНастройкиАктуализации(ПараметрыАктуализации, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыАктуализации) = Тип("Структура") Тогда
		Если Объект.ГрафикПлатежей.Количество() > 0 Тогда
			Если ПроверитьТЧГрафикПлатежей() Тогда
				ТекстВопроса = НСтр("ru = 'По строкам графика были созданы документы планирования, они будут помечены на удаление или закрыты. Продолжить?'"); 
				
				ПоказатьВопрос(Новый ОписаниеОповещения("ВопросАктуализацияГрафика",ЭтотОбъект, ПараметрыАктуализации),ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
			Иначе
				
				АктуализироватьГрафик(ПараметрыАктуализации);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросАктуализацияГрафика(Ответ, ПараметрыАктуализации) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		АктуализироватьГрафик(ПараметрыАктуализации);
	Иначе
		Возврат;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ПроверитьТЧГрафикПлатежей()

	Результат = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования) КАК КолвоДокументов
		|ИЗ
		|	Документ.бит_ДополнительныеУсловияПоДоговору.ГрафикПлатежей КАК бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|		ПО бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.ДокументПланирования = бит_СтатусыОбъектов.Объект
		|			И (бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Утверждена)
		|				ИЛИ бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Отклонена)
		|				ИЛИ бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Черновик)
		|				ИЛИ бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Рабочая)
		|				ИЛИ бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ЧастичнаяОплата)
		|				ИЛИ бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ЗаявкаОбщая_Утверждена)
		|				ИЛИ бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ЗаявкаОбщая_Отклонен)
		|				ИЛИ бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ЗаявкаОбщая_Черновик)
		|				ИЛИ бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ЗаявкаОбщая_Рабочая))
		|ГДЕ
		|	бит_ДополнительныеУсловияПоДоговоруГрафикПлатежей.Ссылка = &ДокСсылка";
		
	Запрос.УстановитьПараметр("ДокСсылка", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Если Выборка.КолвоДокументов > 0 Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработатьГрафик(ТабЧастьГрафик, ПараметрыАктуализации, ВыходныеПараметры)

	МассивДокументовНаЗакрытие     = Новый Массив;
	МассивСтрокДляУдаления         = Новый Массив;	
    МассивДокументовНаУДаление     = Новый Массив;

	СуммаВУдаленныхСтроках = 0;
	СуммаПараметр          = 0;
	СуммаДоАктуализации = ТабЧастьГрафик.Итог("Сумма");
	
	// выберим документы на удаление и на закрытие.
	Индекс = 0;
	Пока Индекс < ТабЧастьГрафик.Количество() Цикл
		
		СтрокаТаблицы = ТабЧастьГрафик[Индекс];
		
		Действие = ДействиеСДокументомПланирования(СтрокаТаблицы.ДокументПланирования);

		Если СтрокаТаблицы.Период < ПараметрыАктуализации.ДатаАктуализации Тогда
						
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования) Тогда
				ТабЧастьГрафик.Удалить(СтрокаТаблицы);
				СуммаВУдаленныхСтроках = СуммаВУдаленныхСтроках + СтрокаТаблицы.Сумма;
				Индекс = Индекс -1;
			Иначе
				
				Если ВРег(Действие) = ВРег("Удалить") Тогда
					
					Если МассивДокументовНаУДаление.Найти(СтрокаТаблицы.ДокументПланирования) = Неопределено Тогда
						МассивДокументовНаУДаление.Добавить(СтрокаТаблицы.ДокументПланирования);
						МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
					КонецЕсли; 
					
					ТабЧастьГрафик.Удалить(СтрокаТаблицы);
		        	СуммаВУдаленныхСтроках = СуммаВУдаленныхСтроках + СтрокаТаблицы.Сумма;
					Индекс = Индекс -1;
					
				ИначеЕсли ВРег(Действие) = ВРег("Закрыть") Тогда
					Если МассивДокументовНаЗакрытие.Найти(СтрокаТаблицы.ДокументПланирования) = Неопределено Тогда
						МассивДокументовНаЗакрытие.Добавить(СтрокаТаблицы.ДокументПланирования);
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
		Иначе
		
			Если ВРег(Действие) = ВРег("Удалить") Тогда
				Если МассивДокументовНаУДаление.Найти(СтрокаТаблицы.ДокументПланирования) = Неопределено Тогда
					МассивДокументовНаУДаление.Добавить(СтрокаТаблицы.ДокументПланирования);
					МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
				КонецЕсли;  
				
			ИначеЕсли ВРег(Действие) = ВРег("Закрыть") Тогда
				Если МассивДокументовНаЗакрытие.Найти(СтрокаТаблицы.ДокументПланирования) = Неопределено Тогда
					МассивДокументовНаЗакрытие.Добавить(СтрокаТаблицы.ДокументПланирования);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс +1;
		
	КонецЦикла;
	
	// удалим и закроем документы.
	УдалитьЗакрытьДокументы(МассивСтрокДляУдаления, МассивДокументовНаЗакрытие);
		
	// актуализируем график.
	СуммаДляРаспределенияМинус = 0;
	СуммаДляРаспределенияПлюс  = 0;
	
	КоличествоСтрокДляРаспределения = 0;
	
	МассивДокументовИсключение = новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТабЧастьГрафик Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования) и МассивДокументовИсключение.Найти(СтрокаТаблицы.ДокументПланирования) = Неопределено Тогда
			СуммаРегл = ПолучитьДанныеПоДокументу(СтрокаТаблицы.ДокументПланирования);
			Если Объект.ВалютаДокумента = мКэшЗначений.ВалютаРегламентированногоУчета Тогда
				СуммаДляОпераций = СуммаРегл;
			Иначе
				СуммаДляОпераций = Окр(СуммаРегл/Объект.КурсДокумента, 2);
			КонецЕсли;
			
			Если СуммаДляОпераций <> СтрокаТаблицы.Сумма Тогда

				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ДокументПланирования", СтрокаТаблицы.ДокументПланирования);
				
				МассивСтрИсключений = Новый Массив;
				
				МассивРезультат = ТабЧастьГрафик.НайтиСтроки(СтруктураОтбора);
				
				ДалееУдаляем = Ложь;
				Если МассивРезультат.Количество() > 0 Тогда
					Для Каждого Элем Из МассивРезультат Цикл
						
						СтавкаНДС = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Элем.СтавкаНДС);
						
						Если Элем.Сумма > СуммаДляОпераций Тогда
							
							СуммаДляРаспределенияПлюс  = СуммаДляРаспределенияПлюс + Элем.Сумма - СуммаДляОпераций;

							Элем.Сумма       = СуммаДляОпераций;                           
							Элем.СуммаБезНДС = СуммаДляОпераций - СуммаДляОпераций * СтавкаНДС/120;
							Элем.НДС         = СуммаДляОпераций - Элем.СуммаБезНДС;
							
							СуммаДляОпераций = 0;
							
							МассивСтрИсключений.Добавить(Элем);
							ДалееУдаляем = Истина;
							Прервать;
						ИначеЕсли Элем = МассивРезультат[МассивРезультат.Количество()-1] И СуммаДляОпераций > Элем.Сумма Тогда
							
							СуммаДляРаспределенияМинус = СуммаДляРаспределенияМинус + СуммаДляОпераций - Элем.Сумма;

							Элем.Сумма       = СуммаДляОпераций;                           
							Элем.СуммаБезНДС = СуммаДляОпераций - СуммаДляОпераций * СтавкаНДС/120;
							Элем.НДС         = СуммаДляОпераций - Элем.СуммаБезНДС;

							МассивСтрИсключений.Добавить(Элем);
							
							СуммаДляОпераций = 0;
						Иначе						
							МассивСтрИсключений.Добавить(Элем);
							СуммаДляОпераций = СуммаДляОпераций - Элем.Сумма;
						КонецЕсли;
						
					КонецЦикла;
					
					Если ДалееУдаляем Тогда
						Для Каждого Элем из МассивРезультат Цикл
							Если МассивСтрИсключений.Найти(Элем) = Неопределено Тогда
								Если Элем.Период < ПараметрыАктуализации.ДатаАктуализации Тогда
									СуммаВУдаленныхСтроках = СуммаВУдаленныхСтроках + Элем.Сумма;
									ТабЧастьГрафик.Удалить(Элем);
								Иначе
									Если ТипЗнч(Элем.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
										Элем.ДокументПланирования = Документы.бит_ЗаявкаНаРасходованиеСредств.ПустаяСсылка();
									ИначеЕсли ТипЗнч(Элем.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
										Элем.ДокументПланирования = Документы.бит_ЗаявкаНаРасходованиеСредствОбщая.ПустаяСсылка();
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					МассивДокументовИсключение.Добавить(Элем.ДокументПланирования);
					
				КонецЕсли;

				Если СуммаДляОпераций > 0 Тогда
					СуммаДляРаспределенияМинус = СуммаДляРаспределенияМинус + СуммаДляОпераций;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования) И СтрокаТаблицы.Период >= ПараметрыАктуализации.ДатаАктуализации Тогда
			КоличествоСтрокДляРаспределения = КоличествоСтрокДляРаспределения + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщаяСуммаДляРаспределения = СуммаДляРаспределенияПлюс - СуммаДляРаспределенияМинус + СуммаВУдаленныхСтроках;
	
	Если ПараметрыАктуализации.ВариантАктуализации = Перечисления.бит_ВариантыАктуализации.КорректировкаСКонцаГрафика И ОбщаяСуммаДляРаспределения <> 0 Тогда
		
		СуммаСравнения =  ОбщаяСуммаДляРаспределения * (-1);
        Индекс = ТабЧастьГрафик.Количество()-1;
		
		Пока Индекс >=0 И СуммаСравнения <> 0 Цикл
			
			СтавкаНДС = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(ТабЧастьГрафик[Индекс].СтавкаНДС);
			
			Если ОбщаяСуммаДляРаспределения > 0 И НЕ ЗначениеЗаполнено(ТабЧастьГрафик[Индекс].ДокументПланирования) Тогда
				ТабЧастьГрафик[Индекс].Сумма       = ТабЧастьГрафик[Индекс].Сумма + ОбщаяСуммаДляРаспределения;
				ТабЧастьГрафик[Индекс].Ндс         = ТабЧастьГрафик[Индекс].Сумма * СтавкаНДС/120;
		        ТабЧастьГрафик[Индекс].СуммаБезНДС = ТабЧастьГрафик[Индекс].Сумма - ТабЧастьГрафик[Индекс].Ндс;
				Прервать;
			ИначеЕсли ОбщаяСуммаДляРаспределения < 0 Тогда
				Если НЕ ЗначениеЗаполнено(ТабЧастьГрафик[Индекс].ДокументПланирования) Тогда
					Если СуммаСравнения >= ТабЧастьГрафик[Индекс].Сумма Тогда
						СуммаСравнения = СуммаСравнения - ТабЧастьГрафик[Индекс].Сумма;
						ТабЧастьГрафик.Удалить(Индекс);
					Иначе
						СуммаОстаток    = ТабЧастьГрафик[Индекс].Сумма - СуммаСравнения;
						ТабЧастьГрафик[Индекс].Сумма       = СуммаОстаток;
						ТабЧастьГрафик[Индекс].НДС         = ТабЧастьГрафик[Индекс].Сумма * СтавкаНДС/120;
						ТабЧастьГрафик[Индекс].СуммаБезНДС = ТабЧастьГрафик[Индекс].Сумма - ТабЧастьГрафик[Индекс].НДС;
						СуммаСравнения = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Индекс = Индекс -1;
		КонецЦикла;
		
	ИначеЕсли ПараметрыАктуализации.ВариантАктуализации = Перечисления.бит_ВариантыАктуализации.КорректировкаСНачалаГрафика Тогда

		Индекс = 0; 
		
		Пока Индекс < ТабЧастьГрафик.Количество() И ОбщаяСуммаДляРаспределения <> 0 Цикл

			СтавкаНДС = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(ТабЧастьГрафик[Индекс].СтавкаНДС);

			Если ОбщаяСуммаДляРаспределения > 0 И НЕ ЗначениеЗаполнено(ТабЧастьГрафик[Индекс].ДокументПланирования) Тогда
				ТабЧастьГрафик[Индекс].Сумма       = ТабЧастьГрафик[Индекс].Сумма + ОбщаяСуммаДляРаспределения;
				ТабЧастьГрафик[Индекс].Ндс         = ТабЧастьГрафик[Индекс].Сумма * СтавкаНДС/120;
		        ТабЧастьГрафик[Индекс].СуммаБезНДС = ТабЧастьГрафик[Индекс].Сумма - ТабЧастьГрафик[Индекс].Ндс;
				Прервать;
			ИначеЕсли ОбщаяСуммаДляРаспределения < 0 Тогда
				Если НЕ ЗначениеЗаполнено(ТабЧастьГрафик[Индекс].ДокументПланирования) Тогда
					
					СуммаМинус = ОбщаяСуммаДляРаспределения * (-1);
					Если СуммаМинус >= ТабЧастьГрафик[Индекс].Сумма Тогда
						СуммаМинус = СуммаМинус - ТабЧастьГрафик[Индекс].Сумма;
						ОбщаяСуммаДляРаспределения = ОбщаяСуммаДляРаспределения + ТабЧастьГрафик[Индекс].Сумма; 
						ТабЧастьГрафик.Удалить(Индекс);
						Индекс = Индекс -1;
					Иначе
						СуммаОстаток    = ТабЧастьГрафик[Индекс].Сумма - СуммаМинус;
						ТабЧастьГрафик[Индекс].Сумма       = СуммаОстаток;
						ТабЧастьГрафик[Индекс].НДС         = ТабЧастьГрафик[Индекс].Сумма * СтавкаНДС/120;
						ТабЧастьГрафик[Индекс].СуммаБезНДС = ТабЧастьГрафик[Индекс].Сумма - ТабЧастьГрафик[Индекс].НДС;
						ОбщаяСуммаДляРаспределения = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Индекс = Индекс +1;
		КонецЦикла;
		
	Иначе 
		Для Каждого СтрокаТаблицы Из ТабЧастьГрафик Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования) И СтрокаТаблицы.Период >= ПараметрыАктуализации.ДатаАктуализации Тогда
				СтавкаНДС = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);

				СтрокаТаблицы.Сумма       = СтрокаТаблицы.Сумма + ОбщаяСуммаДляРаспределения / КоличествоСтрокДляРаспределения;
				СтрокаТаблицы.НДС         = СтрокаТаблицы.Сумма * СтавкаНДС/120;
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СуммаДоАктуализации <> ТабЧастьГрафик.Итог("Сумма") Тогда
		СуммаДобавить = СуммаДоАктуализации - ТабЧастьГрафик.Итог("Сумма");
		Для Каждого СтрокаТаблицы Из ТабЧастьГрафик Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования) Тогда
				СтрокаТаблицы.Сумма       = СтрокаТаблицы.Сумма + СуммаДобавить;
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС + СуммаДобавить;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьФинГрафик(ТабЧастьГрафик, ПараметрыАктуализации, ВыходныеПараметры)

	Статья = ПолучитьСтатьюКредита();
	
	МассивДокументовНаЗакрытие     = Новый Массив;
	МассивСтрокДляУдаления         = Новый Массив;	
    МассивДокументовНаУДаление     = Новый Массив;

	СуммаВУдаленныхСтроках     = 0;

	// выберим документы на удаление и на закрытие.
	Индекс = 0;
	Пока Индекс < ТабЧастьГрафик.Количество() Цикл
		
		СтрокаТаблицы = ТабЧастьГрафик[Индекс];
		Если Индекс = ТабЧастьГрафик.Количество() - 1 Тогда
			ДатаПогашения = ТабЧастьГрафик[Индекс].Период;
		КонецЕсли;
		
		Если СтрокаТаблицы.СтатьяОборотов = Статья Тогда
			Индекс = Индекс +1;
			Продолжить;
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования) Тогда
			ТабЧастьГрафик.Удалить(СтрокаТаблицы);
			Если СтрокаТаблицы.СоставляющаяПлатежа <> Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.Проценты И СтрокаТаблицы.СоставляющаяПлатежа <> Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.КомиссияЗаВыдачу Тогда
				СуммаВУдаленныхСтроках = СуммаВУдаленныхСтроках + СтрокаТаблицы.Сумма;
			КонецЕсли;
			
			Индекс = Индекс -1;
		Иначе
			
			Действие = ДействиеСДокументомПланирования(СтрокаТаблицы.ДокументПланирования);

			Если ВРег(Действие) = ВРег("Удалить") Тогда
				
				Если МассивДокументовНаУДаление.Найти(СтрокаТаблицы.ДокументПланирования) = Неопределено Тогда
					МассивДокументовНаУДаление.Добавить(СтрокаТаблицы.ДокументПланирования);
					МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
				КонецЕсли; 
				
				ТабЧастьГрафик.Удалить(СтрокаТаблицы);
	        	Если СтрокаТаблицы.СоставляющаяПлатежа <> Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.Проценты И СтрокаТаблицы.СоставляющаяПлатежа <> Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.КомиссияЗаВыдачу Тогда
					СуммаВУдаленныхСтроках = СуммаВУдаленныхСтроках + СтрокаТаблицы.Сумма;
				КонецЕсли;
				
				Индекс = Индекс -1;
				 
			ИначеЕсли ВРег(Действие) = ВРег("Закрыть") Тогда
				Если МассивДокументовНаЗакрытие.Найти(СтрокаТаблицы.ДокументПланирования) = Неопределено Тогда
					МассивДокументовНаЗакрытие.Добавить(СтрокаТаблицы.ДокументПланирования);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
				
		Индекс = Индекс +1;
		
	КонецЦикла;
	
	// удалим и закроем документы.
	УдалитьЗакрытьДокументы(МассивСтрокДляУдаления, МассивДокументовНаЗакрытие);
		
	// актуализируем график.
	СуммаДляРаспределенияМинус = 0;
	СуммаДляРаспределенияПлюс  = 0;
		
	Для Каждого СтрокаТаблицы Из ТабЧастьГрафик Цикл
		Если СтрокаТаблицы.СтатьяОборотов = Статья Тогда
			Продолжить;
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования)  Тогда
				
				Если СтрокаТаблицы.Период > ПараметрыАктуализации.ДатаАктуализации Тогда
					ПараметрыАктуализации.ДатаАктуализации = ДобавитьМесяц(СтрокаТаблицы.Период,1);
				КонецЕсли;

				СуммаРегл = ПолучитьДанныеПоДокументу(СтрокаТаблицы.ДокументПланирования);
				Если Объект.ВалютаДокумента = мКэшЗначений.ВалютаРегламентированногоУчета Тогда
					СуммаДляОпераций = СуммаРегл;
				Иначе
					СуммаДляОпераций = Окр(СуммаРегл/Объект.КурсДокумента, 2);
				КонецЕсли;
				
				Если СуммаДляОпераций <> СтрокаТаблицы.Сумма Тогда
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("ДокументПланирования", СтрокаТаблицы.ДокументПланирования);
					
					ОбщаяСуммаПоДокументуПланирования = 0;
					
					МассивРезультат = Объект.ГрафикПлатежей.НайтиСтроки(СтруктураОтбора);
					Если МассивРезультат.Количество() > 0 Тогда
						ОбщаяСуммаПоДокументуПланирования = 0;
						Для Каждого Элем Из МассивРезультат Цикл
							ОбщаяСуммаПоДокументуПланирования = ОбщаяСуммаПоДокументуПланирования + Элем.Сумма;
						КонецЦикла;
					КонецЕсли;

					СтавкаНДС = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
					
					Если СтрокаТаблицы.СоставляющаяПлатежа = Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.КомиссияЗаВыдачу Тогда
						СтрокаТаблицы.Сумма       = СуммаДляОпераций;                           
						СтрокаТаблицы.СуммаБезНДС = СуммаДляОпераций - СуммаДляОпераций * СтавкаНДС/120;
						СтрокаТаблицы.НДС         = СуммаДляОпераций - СтрокаТаблицы.СуммаБезНДС;
						
					    Продолжить;
						
					ИначеЕсли СтрокаТаблицы.СоставляющаяПлатежа = Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.Проценты Тогда
						Если СтрокаТаблицы.Сумма > СуммаДляОпераций Тогда
							СтрокаТаблицы.Сумма       = СуммаДляОпераций;                           
							СтрокаТаблицы.СуммаБезНДС = СуммаДляОпераций - СуммаДляОпераций * СтавкаНДС/120;
							СтрокаТаблицы.НДС         = СуммаДляОпераций - СтрокаТаблицы.СуммаБезНДС;
						КонецЕсли;

						Продолжить;
					Иначе
						СуммаПроцентов = ОбщаяСуммаПоДокументуПланирования - СтрокаТаблицы.Сумма;
						
						СтрокаТаблицы.Сумма       = СуммаДляОпераций - СуммаПроцентов;                           
						СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.Сумма * СтавкаНДС/120;
						СтрокаТаблицы.НДС         = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаБезНДС;

					КонецЕсли;
					
										
					Если ОбщаяСуммаПоДокументуПланирования <> СуммаДляОпераций Тогда
						Если СуммаДляОпераций < СтрокаТаблицы.Сумма Тогда
							СуммаДляРаспределенияПлюс  = СуммаДляРаспределенияПлюс + СтрокаТаблицы.Сумма - СуммаДляОпераций;
						Иначе
							СуммаДляРаспределенияМинус = СуммаДляРаспределенияМинус + СуммаДляОпераций - СтрокаТаблицы.Сумма;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
								
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщаяСуммаДляРаспределения = СуммаДляРаспределенияПлюс - СуммаДляРаспределенияМинус + СуммаВУдаленныхСтроках;
	
	Если ПараметрыАктуализации.ВариантАктуализации = Перечисления.бит_ВариантыАктуализации.КорректировкаСКонцаГрафика И ОбщаяСуммаДляРаспределения <> 0 Тогда
		
		Если ОбщаяСуммаДляРаспределения < 0 Тогда

			СуммаСравнения =  ОбщаяСуммаДляРаспределения * (-1);
	        Индекс = ТабЧастьГрафик.Количество()-1;
			
			Пока Индекс >=0 И СуммаСравнения <> 0 Цикл
				СтавкаНДС = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Объект.ГрафикПлатежей[Индекс].СтавкаНДС);
				
				Если Не ЗначениеЗаполнено(ТабЧастьГрафик[Индекс].ДокументПланирования) И ТабЧастьГрафик[Индекс].СоставляющаяПлатежа = Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.ПогашениеОсновногоДолга Тогда
					Если СуммаСравнения >= ТабЧастьГрафик[Индекс].Сумма Тогда
						СуммаСравнения = СуммаСравнения - ТабЧастьГрафик[Индекс].Сумма;
						ТабЧастьГрафик.Удалить(Индекс);
					Иначе
						СуммаОстаток    = ТабЧастьГрафик[Индекс].Сумма - СуммаСравнения;
						ДатаПогашения   = ТабЧастьГрафик[Индекс].Период;
						СуммаСравнения  = 0;
					КонецЕсли;
				КонецЕсли;
					
				Индекс = Индекс -1;
			КонецЦикла;
		
		    ОбщаяСуммаДляРаспределения = 0;
	    КонецЕсли;
	
	КонецЕсли;
	
	Индекс        = 0;
	СуммаПараметр = ОбщаяСуммаДляРаспределения;
	
	Пока Индекс < ТабЧастьГрафик.Количество() Цикл
		
		Если ТабЧастьГрафик[Индекс].СоставляющаяПлатежа = Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.КомиссияЗаВыдачу ИЛИ 
		     ТабЧастьГрафик[Индекс].СтатьяОборотов = Статья Тогда
			 
			Индекс = Индекс + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТабЧастьГрафик[Индекс].ДокументПланирования)  Тогда
			СуммаПараметр = ?(ТабЧастьГрафик[Индекс].СоставляющаяПлатежа = Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.Проценты, СуммаПараметр, СуммаПараметр + ТабЧастьГрафик[Индекс].Сумма);
			ТабЧастьГрафик.Удалить(Индекс);
			Индекс = Индекс -1;
		КонецЕсли;
		
		Индекс = Индекс +1; 
	КонецЦикла;
				
	ВыходныеПараметры.Вставить("Сумма", СуммаПараметр);
	ВыходныеПараметры.Вставить("ДатаПогашения", ДатаПогашения);

КонецПроцедуры

&НаСервере
Функция ПолучитьСтатьюКредита()

	Статья = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Если Объект.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	бит_ЗначенияПараметровФинансовыхДоговоров.Параметр КАК Параметр,
			|	бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра КАК СтатьяОборотов
			|ИЗ
			|	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
			|ГДЕ
			|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента = &Договор
			|	И (бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДДСПоступление)
			|			ИЛИ бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДРПоступление))";

	Иначе	
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	бит_ЗначенияПараметровФинансовыхДоговоров.Параметр КАК Параметр,
			|	бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра КАК СтатьяОборотов
			|ИЗ
			|	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
			|ГДЕ
			|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента = &Договор
			|	И (бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДДСРасходование)
			|			ИЛИ бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДРРасходование))";
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Договор", Объект.ДоговорКонтрагента);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Статья = Выборка.СтатьяОборотов; 
	КонецЦикла;

	Возврат Статья;
	
КонецФункции 

&НаСервере
Функция ЭтоФинансовыйДоговор(ДоговорКонтрагента)

	СтруктураЗначений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, 
	                                                                "бит_НаправлениеДоговора,бит_ТипДоговора,бит_СпособРасчетаФинПлатежей");
	
	Возврат ЗначениеЗаполнено(СтруктураЗначений.бит_СпособРасчетаФинПлатежей) И 
	                       (СтруктураЗначений.бит_НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.Финансовый
							ИЛИ СтруктураЗначений.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
							ИЛИ СтруктураЗначений.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
							ИЛИ СтруктураЗначений.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные);

КонецФункции 

// Процедура производит актуализацию графика платежей и графика начислений.
//
&НаСервере
Процедура АктуализироватьГрафик(ПараметрыАктуализации)
	
	ВыходныеПараметры = Новый Структура;
	
	ФинансовыйДоговор  = ЭтоФинансовыйДоговор(Объект.ДоговорКонтрагента);
							
	ТЧПлатежи = Объект.ГрафикПлатежей;
	Если ФинансовыйДоговор Тогда
		ОбработатьФинГрафик(ТЧПлатежи, ПараметрыАктуализации, ВыходныеПараметры);
	Иначе
		ОбработатьГрафик(ТЧПлатежи, ПараметрыАктуализации, ВыходныеПараметры);
	КонецЕсли;
	Объект.ГрафикПлатежейАктуализирован = Истина;
	
	Если ПараметрыАктуализации.АктуализироватьГрафикНачислений Тогда
		ТЧНачисления = Объект.ГрафикНачислений;
		Если ТЧНачисления.Количество() > 0 Тогда
			ОбработатьГрафик(ТЧНачисления, ПараметрыАктуализации, ВыходныеПараметры);
			Объект.ГрафикНачисленийАктуализирован = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ФинансовыйДоговор И ТЧПлатежи.Количество() > 0 Тогда
		
		Если Объект.РасходДоход = мКэшЗначений.Перечисления.бит_РасходДоход.Поступление Тогда
		    НаправлениеДДС = "Выдача";
		Иначе
			НаправлениеДДС = "Получение";
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДоговорКонтрагента", ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),Объект.ДоговорКонтрагента,Объект.ПроектДоговора));
		СтруктураПараметров.Вставить("НаправлениеДДС"	, НаправлениеДДС);
		СтруктураПараметров.Вставить("ВидГрафика"		, мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
		СтруктураПараметров.Вставить("СуммаДоговора"    , ВыходныеПараметры.Сумма);

		ДеревоНаФорме = ДеревоСоставляющих.ПолучитьЭлементы();
		ДеревоНаФорме.Очистить();
		
		Дерево = бит_ДоговораСервер.ПолучитьДеревоПараметровФинДоговоров(Объект.ДоговорКонтрагента);
		ЗаполнитьДеревоСоставляющих(Дерево, ДеревоНаФорме, мКэшЗначений);
		ДеревоПараметров = РеквизитФормыВЗначение("ДеревоСоставляющих");
		
		КоличествоПериодов = бит_Бюджетирование.РазностьДат(НачалоМесяца(ПараметрыАктуализации.ДатаАктуализации), НачалоМесяца(ВыходныеПараметры.ДатаПогашения), "МЕСЯЦ") + 1;

		АктуализированыйГрафик = Объект.ГрафикВыдачиТраншей.Выгрузить();
		АктуализированыйГрафик.Очистить();
		
		НоваяСтрока                          = АктуализированыйГрафик.Добавить();
		НоваяСтрока.СуммаТранша              = ВыходныеПараметры.Сумма;
		НоваяСтрока.ДатаТранша               = НачалоМесяца(ПараметрыАктуализации.ДатаАктуализации);
		НоваяСтрока.ДатаПогашения            = ВыходныеПараметры.ДатаПогашения;
	    НоваяСтрока.МесяцПервогоПлатежа      = ПараметрыАктуализации.ДатаАктуализации;
		НоваяСтрока.КоличествоПериодовВыплат = КоличествоПериодов;

		// получим таблицу периодов для заполенения графика платежей.
		ТаблицаПериодов = ПолучитьТаблицуПериодов(АктуализированыйГрафик, ДеревоПараметров, СтруктураПараметров);
		
		СтатьяКредита = ПолучитьСтатьюКредита();
				
		Индекс = 0;
		Пока Индекс < ТаблицаПериодов.Количество() Цикл
			
			Стр = ТаблицаПериодов[Индекс];
			
			МассивРезультат = Новый Массив;
			СтруктураОтбора = Новый Структура;

			Если Стр.СтатьяОборотов = СтатьяКредита Тогда
	        	СтруктураОтбора.Вставить("СтатьяОборотов", СтатьяКредита);
			ИначеЕсли Стр.СоставляющаяПлатежа = Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.КомиссияЗаВыдачу Тогда
				СтруктураОтбора.Вставить("СоставляющаяПлатежа", Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.КомиссияЗаВыдачу);
			Иначе
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			МассивРезультат = Объект.ГрафикПлатежей.НайтиСтроки(СтруктураОтбора);
			Если МассивРезультат.Количество() > 0 Тогда
				ТаблицаПериодов.Удалить(Стр);
				Индекс = Индекс -1;
			КонецЕсли;

			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		// выведем на форму получившийся график.
		Для Каждого ТекущаяСтрока Из ТаблицаПериодов Цикл
			
			Если ТекущаяСтрока.ОтказОтВвода Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыходныеПараметры.ДатаПогашения < ТекущаяСтрока.Период Тогда
				Прервать;
			КонецЕсли;

			НоваяСтрока = Объект.ГрафикПлатежей.Добавить();
			НоваяСтрока.РасходДоход = ТекущаяСтрока.Направление;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			//Если Параметр.ВидГрафика = Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
				НоваяСтрока.СтатьяОборотов 	= ТекущаяСтрока.СтатьяОборотов;
				НоваяСтрока.СтавкаНДС 		= НоваяСтрока.СтатьяОборотов.СтавкаНДС;
			//Иначе
			//	НоваяСтрока.СтатьяОборотовНачисления = ТекущаяСтрока.СтатьяОборотов;
			//	НоваяСтрока.СтавкаНДС 				 = НоваяСтрока.СтатьяОборотовНачисления.СтавкаНДС;
			//КонецЕсли;	
			
			НоваяСтрока.ЦФО 	= Объект.ЦФО;
			НоваяСтрока.Проект 	= Объект.Проект;
			НоваяСтрока.НоменклатурнаяГруппа = Объект.НоменклатурнаяГруппа;
			
			Для н = 1 По мКэшЗначений.МаксКолвоДопАналитик Цикл
				НоваяСтрока["Аналитика_"+н]  = Объект["Аналитика_"+н];
			КонецЦикла;
			
			РассчитатьСуммуНДС(НоваяСтрока);

		КонецЦикла;
				
		ПеренестиПлатежиСПраздничныхДнейВРабочие("ГрафикПлатежей", 1);

	КонецЕсли;
	
	ОФормитьТаблицу("ГрафикПлатежей");
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПериодов(АктуализированыйГрафик, ДеревоПараметров, СтруктураПараметров)
	
	ПараметрыДанных = СтруктураПараметров;
	
	ДатаАктуализации   = АктуализированыйГрафик[0].МесяцПервогоПлатежа;
	КоличествоПериодов = АктуализированыйГрафик[0].КоличествоПериодовВыплат;
	ДатаПогашения      = АктуализированыйГрафик[0].ДатаПогашения;  
	
	ТаблицаПериодов = Обработки.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.СформироватьГрафикПлатежей(АктуализированыйГрафик, ДеревоПараметров, ПараметрыДанных);
	
	СтатьяКредита = ПолучитьСтатьюКредита();
			
	Индекс = 0;
	Пока Индекс < ТаблицаПериодов.Количество() Цикл
		
		Стр = ТаблицаПериодов[Индекс];
		
		МассивРезультат = Новый Массив;
		СтруктураОтбора = Новый Структура;

		Если Стр.СтатьяОборотов = СтатьяКредита Тогда
        	СтруктураОтбора.Вставить("СтатьяОборотов", СтатьяКредита);
		ИначеЕсли Стр.СоставляющаяПлатежа = Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.КомиссияЗаВыдачу Тогда
			СтруктураОтбора.Вставить("СоставляющаяПлатежа", Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.КомиссияЗаВыдачу);
		Иначе
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		МассивРезультат = Объект.ГрафикПлатежей.НайтиСтроки(СтруктураОтбора);
		Если МассивРезультат.Количество() > 0 Тогда
			ТаблицаПериодов.Удалить(Стр);
			Индекс = Индекс -1;
		КонецЕсли;

		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если ТаблицаПериодов.Количество() > 0 И КоличествоПериодов>0 Тогда
		
		Для Каждого Стр Из ТаблицаПериодов Цикл
			Если Стр.Период < ДатаАктуализации И Стр.СоставляющаяПлатежа <> Справочники.бит_СоставляющиеПлатежейПоФинДоговорам.КомиссияЗаВыдачу Тогда
				АктуализированыйГрафик[0].МесяцПервогоПлатежа      = НачалоМесяца(ДобавитьМесяц(ДатаАктуализации, 1));
				АктуализированыйГрафик[0].КоличествоПериодовВыплат = бит_Бюджетирование.РазностьДат(НачалоМесяца(ДобавитьМесяц(ДатаАктуализации, 1)), НачалоМесяца(ДатаПогашения), "МЕСЯЦ") + 1;
				ТаблицаПериодов = ПолучитьТаблицуПериодов(АктуализированыйГрафик, ДеревоПараметров, СтруктураПараметров);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// Процедура оформляет табличное поле.
// 
// Параметры:
//  ИмяТаблицы 		- Строка
//  СтатьяОборотов 	- СправочникСсылка.бит_СтатьиОборотов.
// 
&НаСервере
Процедура ОФормитьТаблицу(ПрефиксТаблицы, СтатьяОборотов = Неопределено) 
	
	// ----------------------------------------------------------------------
	// Оформление реквизитов строк по статьям оборотов.
	УдалитьСтароеОформление = Ложь;
	ПрефиксКонтейнера = "Объект.";
	ИмяРеквизитаСтатья = ?(ПрефиксТаблицы = "ГрафикПлатежей", "СтатьяОборотов", "СтатьяОборотовНачисления");
	
	Если СтатьяОборотов = Неопределено Тогда
	
		УдалитьСтароеОформление = Истина;
	
		// Формирование массива статей, по которым нужно добавить элементы УО.
		ТаблицаПоиска = Объект[ПрефиксТаблицы].Выгрузить();
		МассивСтатей = ТаблицаПоиска.ВыгрузитьКолонку(ИмяРеквизитаСтатья);
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
				
	Иначе // Работаем только с одной статьей оборотов.		
		
		МассивСтатей = Новый Массив; 		
		МассивСтатей.Добавить(СтатьяОборотов);
		
	КонецЕсли;	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОтметитьОбязательныеРазрезыСтатей", Истина);
	
	бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление, МассивСтатей, УдалитьСтароеОформление, ПрефиксКонтейнера, ПрефиксТаблицы, "", ,,ДопПараметры, ИмяРеквизитаСтатья);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗакрытьДокументы(МассивСтрокДляУдаления, МассивДокументовНаЗакрытие)

	// удалим ненужные документы.
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		УдалитьДокументыПланированияНаСервереАктуализация(МассивСтрокДляУдаления);
	КонецЕсли;
	
	// закроем документы.
	Если МассивДокументовНаЗакрытие.Количество() > 0 Тогда
			
		ДокЗакрытия = Документы.бит_ЗакрытиеЗаявок.СоздатьДокумент();
		Для Каждого ДокументСсылка Из МассивДокументовНаЗакрытие Цикл
			
			ДокЗакрытия.Заполнить(ДокументСсылка);
			
			ТекстСообщения = НСтр("ru = 'Документ """+ Строка(ДокументСсылка)+""" закрыт.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЦикла;
		ДокЗакрытия.Дата        = ТекущаяДатаСеанса();
		ДокЗакрытия.Организация = Объект.Организация;
		ДокЗакрытия.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоСоставляющих(ДеревоИсточник, ДеревоПриемник, КэшЗначений)
	
	Для Каждого ТекущаяСтрока Из ДеревоИсточник.Строки Цикл
		НоваяСтрока = ДеревоПриемник.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока.ТипПлатежаПоФинДоговору = ТекущаяСтрока.ТипПлатежа;
		НоваяСтрока.ЗначениеПараметра		= ТекущаяСтрока.Значение;
		
		// запомним периодичность основного долга.
		Если НоваяСтрока.ТипПлатежаПоФинДоговору = КэшЗначений.ТипПлатежаОсновнойДолг
			И НоваяСтрока.Параметр = КэшЗначений.ПараметрПериодичность Тогда
			
			КэшЗначений.ПериодичностьОсновногоДолга = НоваяСтрока.ЗначениеПараметра;
			
		КонецЕсли;
		
		ЗаполнитьДеревоСоставляющих(ТекущаяСтрока, НоваяСтрока.ПолучитьЭлементы(), КэшЗначений);
	КонецЦикла;
	
КонецПроцедуры

// Функция получает данные производственного календаря.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Календарь.
//
&НаСервере
Функция ПолучитьДанныеПроизводственногоКалендаря()

	Календарь = Неопределено;
	
	// получим настройки программы.
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"		  , Объект.ЦФО);
	ДатаНастроек = Объект.Дата;
	
	мНастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ДатаНастроек,,СтруктураПараметров,"Ошибки");
	
	ИмяНастройкиКалендарь = ПланыВидовХарактеристик.бит_НастройкиПрограммы.Календарь;
	Календарь = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы, ИмяНастройкиКалендарь);

	Возврат Календарь;
	
КонецФункции

// Функция определяет, какое следует выполнить действие с документом.
//
// Параметры:
//
//
// Возвращаемое значение:
//  Результат - Строка.
//
&НаСервере
Функция ДействиеСДокументомПланирования(Док)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Док) Тогда
		
		Запрос = Новый Запрос;
		
		Если ТипЗнч(Док) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	бит_ПланируемыеЗатратыОстаткиИОбороты.СуммаРеглРасход КАК СуммаРасход,
				|	бит_ПланируемыеЗатратыОстаткиИОбороты.СуммаРеглКонечныйОстаток КАК СуммаРеглКонечныйОстаток,
				|	бит_СтатусыОбъектов.Статус КАК Статус
				|ПОМЕСТИТЬ СуммыПоДокументу
				|ИЗ
				|	РегистрНакопления.бит_ПланируемыеЗатраты.ОстаткиИОбороты(, , , , ДокументПланирования.ДокументОснование = &ДокументПланирования) КАК бит_ПланируемыеЗатратыОстаткиИОбороты
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
				|		ПО бит_ПланируемыеЗатратыОстаткиИОбороты.ДокументПланирования.ДокументОснование.Ссылка = бит_СтатусыОбъектов.Объект
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА СуммыПоДокументу.СуммаРасход = 0
				|			ТОГДА ""Удалить""
				|		КОГДА СуммыПоДокументу.СуммаРасход > 0
				|				И СуммыПоДокументу.СуммаРеглКонечныйОстаток > 0
				|				И СуммыПоДокументу.Статус <> ЗНАЧЕНИЕ(Справочник.бит_статусыОбъектов.ЗаявкаНаЗатраты_Закрыта)
				|			ТОГДА ""Закрыть""
				|		ИНАЧЕ ""Пропуск""
				|	КОНЕЦ КАК Действие
				|ИЗ
				|	СуммыПоДокументу КАК СуммыПоДокументу";
			Запрос.УстановитьПараметр("ДокументПланирования", Док);

			
		ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЕСТЬNULL(ПланируемыйРасходДС.СуммаКонечныйОстаток, 0) КАК СуммаКонечныйОстаток,
				|	ЕСТЬNULL(ПланируемыйРасходДС.СуммаРасход, 0) КАК СуммаРасход
				|ПОМЕСТИТЬ Данные
				|ИЗ
				|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.ОстаткиИОбороты(, , , , ДокументПланирования = &ДокументПланирования) КАК ПланируемыйРасходДС
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Данные.СуммаКонечныйОстаток > 0
				|			ТОГДА ВЫБОР
				|					КОГДА Данные.СуммаРасход > 0
				|						ТОГДА ""Закрыть""
				|					ИНАЧЕ ""Удалить""
				|				КОНЕЦ
				|		КОГДА Данные.СуммаКонечныйОстаток = 0
				|				И Данные.СуммаРасход = 0
				|			ТОГДА ""Удалить""
				|		ИНАЧЕ ""Пропуск""
				|	КОНЕЦ КАК Действие
				|ИЗ
				|	Данные КАК Данные";

			Запрос.УстановитьПараметр("ДокументПланирования", Док);
			
		ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(ЕСТЬNULL(бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.СуммаРеглПриход, 0)) КАК СуммаРеглПриход,
				|	ЕСТЬNULL(бит_СтатусыОбъектов.Статус, 0) КАК Статус,
				|	бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка
				|ПОМЕСТИТЬ ОборотыПоПрогнозу
				|ИЗ
				|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая КАК бит_ЗаявкаНаРасходованиеСредствОбщая
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.ОстаткиИОбороты(, , , , ДокументПланирования = &Док) КАК бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
				|			ПО бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.ДокументПланирования = бит_СтатусыОбъектов.Объект
				|		ПО бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.ДокументПланирования = бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ЕСТЬNULL(бит_СтатусыОбъектов.Статус, 0),
				|	бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СУММА(ЕСТЬNULL(бит_ДвиженияДенежныхСредствОбороты.СуммаРеглОборот, 0)) КАК СуммаРеглОборот
				|ПОМЕСТИТЬ ФактПоПрогнозу
				|ИЗ
				|	РегистрНакопления.бит_ДвиженияДенежныхСредств.Обороты(, , , ДокументПланирования.ДокументОснование.ДокументОснование = &Док) КАК бит_ДвиженияДенежныхСредствОбороты
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ОборотыПоПрогнозу.СуммаРеглПриход <= ФактПоПрогнозу.СуммаРеглОборот
				|				ИЛИ ОборотыПоПрогнозу.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ЗаявкаОбщая_закрыта)
				|			ТОГДА ""Пропуск""
				|		КОГДА ФактПоПрогнозу.СуммаРеглОборот > 0
				|				И ОборотыПоПрогнозу.Статус <> ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ЗаявкаОбщая_закрыта)
				|				И ОборотыПоПрогнозу.СуммаРеглПриход > ФактПоПрогнозу.СуммаРеглОборот
				|			ТОГДА ""Закрыть""
				|		ИНАЧЕ ""Удалить""
				|	КОНЕЦ КАК Действие
				|ИЗ
				|	ОборотыПоПрогнозу КАК ОборотыПоПрогнозу,
				|	ФактПоПрогнозу КАК ФактПоПрогнозу";

			Запрос.УстановитьПараметр("Док", Док);

		ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств") Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЕСТЬNULL(СУММА(бит_ДвиженияДенежныхСредствОбороты.СуммаРеглОборот), 0) КАК СуммаРеглФакт
				|ПОМЕСТИТЬ СуммаФакт
				|ИЗ
				|	РегистрНакопления.бит_ДвиженияДенежныхСредств.Обороты(, , , ДокументПланирования = &Объект) КАК бит_ДвиженияДенежныхСредствОбороты
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА СуммаФакт.СуммаРеглФакт = 0
				|			ТОГДА ""Удалить""
				|		ИНАЧЕ ""Пропуск""
				|	КОНЕЦ КАК Действие
				|ИЗ
				|	СуммаФакт КАК СуммаФакт";

			Запрос.УстановитьПараметр("Объект", Док);
			
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
			Результат = "Удалить";
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий(); 
			Результат = Выборка.Действие;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция вычислеяет сумму факта по документу.
//
&НаСервере
Функция ПолучитьДанныеПоДокументу(ДокументПланирования)
	
	СуммаРегл = 0;
	
	Если ДокументПланирования <> Неопределено Тогда
		
		Запрос = Новый Запрос;

		Если ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
		
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДвиженияДенежныхСредств.СуммаРеглОборот КАК СуммаРегл
				|ИЗ
				|	РегистрНакопления.бит_ДвиженияДенежныхСредств.Обороты(, , , ДокументПланирования.ДокументОснование.ДокументОснование = &ДокументПланирования) КАК ДвиженияДенежныхСредств";

			Запрос.УстановитьПараметр("ДокументПланирования", ДокументПланирования);
			
		ИначеЕсли ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДвиженияДенежныхСредств.СуммаРеглОборот КАК СуммаРегл
				|ИЗ
				|	РегистрНакопления.бит_ДвиженияДенежныхСредств.Обороты(, , , ДокументПланирования = &ДокументПланирования) КАК ДвиженияДенежныхСредств
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	ДвиженияДенежныхСредств.СуммаРеглОборот
				|ИЗ
				|	РегистрНакопления.бит_ДвиженияДенежныхСредств.Обороты(, , , ДокументПланирования.ДокументОснование = &ДокументПланирования) КАК ДвиженияДенежныхСредств";

			Запрос.УстановитьПараметр("ДокументПланирования", ДокументПланирования);

		ИначеЕсли ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПланируемыеЗатраты.СуммаРеглРасход КАК СуммаРегл
				|ИЗ
				|	РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(, , Регистратор, ДокументПланирования.ДокументОснование = &ДокументПланирования) КАК ПланируемыеЗатраты
				|ГДЕ
				|	ПланируемыеЗатраты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ПланируемыеЗатраты.СуммаРеглРасход
				|ИЗ
				|	РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(, , Регистратор, ДокументПланирования.ДокументОснование = &ДокументПланирования) КАК ПланируемыеЗатраты
				|ГДЕ
				|	ПланируемыеЗатраты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ПланируемыеЗатраты.СуммаРеглРасход
				|ИЗ
				|	РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(, , Регистратор, ДокументПланирования.ДокументОснование = &ДокументПланирования) КАК ПланируемыеЗатраты
				|ГДЕ
				|	ПланируемыеЗатраты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг";

			Запрос.УстановитьПараметр("ДокументПланирования", ДокументПланирования);

		ИначеЕсли ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств") Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДвиженияДенежныхСредств.СуммаРеглОборот КАК СуммаРегл
				|ИЗ
				|	РегистрНакопления.бит_ДвиженияДенежныхСредств.Обороты(, , , ДокументПланирования = &ДокументПланирования) КАК ДвиженияДенежныхСредств";

			Запрос.УстановитьПараметр("ДокументПланирования", ДокументПланирования);

		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();

		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий(); 
			СуммаРегл = Выборка.СуммаРегл;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаРегл;
	
КонецФункции

&НаСервере
Процедура УдалитьДокументыПланированияНаСервереАктуализация(МассивДокументов)
	
	Если МассивДокументов = Неопределено Тогда
		ДеревоДокументовПланирования = РеквизитФормыВЗначение("ДокументыПланирования");
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Выполнять", 1);
		
		МассивДокументов = ДеревоДокументовПланирования.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	КонецЕсли;
	
    Если МассивДокументов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не указаны документы для удаления!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
    КонецЕсли;
    
	Для Каждого ДокументКУдалению Из МассивДокументов Цикл
		
		Если ТипЗнч(ДокументКУдалению.ДокументПланирования) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		
		Если ТипЗнч(ДокументКУдалению.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			СтруктураПараметров.Вставить("ЭтоПометкаИзГрафикаНачислений");
		Иначе
			СтруктураПараметров.Вставить("ЭтоПометкаИзГрафикаПлатажей");
		КонецЕсли;
		
		// Пометим на удаление текущий документ планирования.
		Если бит_ОбщегоНазначения.ИзменитьПометкуНаУдалениеУОбъекта(ДокументКУдалению.ДокументПланирования, Истина,,, СтруктураПараметров) Тогда
			
			// Удалим ссылки на документ планирования в документе.
			УдалитьСсылкиНаДокументПланированияВДокументе(ДокументКУдалению.ДокументПланирования);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Запишем документ.
	ДокументЗаписан = ЗаписатьПровестиДокумент();
	
	Если ДокументЗаписан Тогда
		Записать();
		ОбновитьДокументыПланирования();
	КонецЕсли;
	
	// Установить видимость реквизитов.
    УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗавершениеВыбораИзСписка",ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеОЗакрытии, мКэшЗначений.СписокВалют, Элемент);
		
КонецПроцедуры

// Обработка оповещения окончания выбора валюты. 
//
// Параметры:
//  ВыбранныйЭлемент - СправочникСсылка.Валюты.
//
&НаКлиенте
Процедура ЗавершениеВыбораИзСписка(ВыбранныйЭлемент, ДопПараметры) Экспорт

	Если ВыбранныйЭлемент <> Неопределено Тогда   		
		Объект.ВалютаДокумента = ВыбранныйЭлемент.Значение; 		
		ВалютаДокументаПриИзмененииКлиент();   		
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДогворуССобытиями(Команда)
	
	Если Объект.ГрафикПлатежей.Количество() > 0 Тогда
		ТекстВопроса = "График будет перезаполнен. Продолжить?";
		ОповещениеВопросПользователю = Новый ОписаниеОповещения("ВопросЗаполнитьПоДогворуССобытиями", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопросПользователю , ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьПоДоговору();

	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Параметр1 - Строка.
//
&НаКлиенте
Процедура ВопросЗаполнитьПоДогворуССобытиями(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ГрафикПлатежей.Очистить();
		
	    ЗаполнитьПоДоговору();
		
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет данные по договору. 
//
// Параметры:
//
&НаСервере
Процедура ЗаполнитьПоДоговору()
		
	СуммаДоговора = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	бит_СобытиеДоговора.ВидСуммы,
			|	бит_СобытиеДоговора.Сумма,
			|	бит_СобытиеДоговора.Процент,
			|	бит_СобытиеДоговора.ПорядокВыполнения,
			|	бит_СобытиеДоговора.Наименование,
			|	бит_СобытиеДоговора.Состояние,
			|	бит_СобытиеДоговора.ДатаВыполнения,
			|	бит_СобытиеДоговора.ТипДней,
			|	бит_СобытиеДоговора.Продолжительнось,
			|	бит_СобытиеДоговора.Ссылка
			|ИЗ
			|	Документ.бит_СобытиеДоговора КАК бит_СобытиеДоговора
			|ГДЕ
			|	бит_СобытиеДоговора.Организация = &Организация
			|	И бит_СобытиеДоговора.Контрагент = &Контрагент
			|	И бит_СобытиеДоговора.Договор = &Договор
			|	И бит_СобытиеДоговора.Проведен = ИСТИНА";

	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	
	Если ЗначениеЗаполнено(Объект.ПроектДоговора) Тогда
	
		Запрос.УстановитьПараметр("Договор", Объект.ПроектДоговора);
		
		СуммаДоговора = Объект.ПроектДоговора.СуммаВзаиморасчеты;
		
    Иначе 

		Запрос.УстановитьПараметр("Договор", Объект.ДоговорКонтрагента);
		
		СуммаДоговора = Объект.ДоговорКонтрагента.бит_СуммаДоговора;
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.ГрафикПлатежей.Добавить();
		
		НоваяСтрока.РасходДоход          = Объект.РасходДоход;
		НоваяСтрока.ЦФО                  = Объект.ЦФО;
		НоваяСтрока.СтатьяОборотов       = Объект.СтатьяОборотов;
		НоваяСтрока.Проект               = Объект.Проект;
		НоваяСтрока.НоменклатурнаяГруппа = Объект.НоменклатурнаяГруппа;
		
		Если Выборка.ВидСуммы = Перечисления.бит_ВидыСуммСобытийДоговоров.Процент Тогда
			НоваяСтрока.Сумма = СуммаДоговора / 100 * Выборка.Процент;
		Иначе
			НоваяСтрока.Сумма                = Выборка.Сумма;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаВыполнения) Тогда
			НоваяСтрока.Период = ВычислитьДатуПоФормулеСобытия(Выборка.ТипДней, Выборка.ДатаВыполнения, Выборка.Продолжительнось);
		КонецЕсли;
		
		НоваяСтрока.Событие              = Выборка.Ссылка;
		НоваяСтрока.НаименованиеСобытия  = Выборка.Наименование;
		НоваяСтрока.СтавкаНДС            = Объект.СтавкаНДС;
		НоваяСтрока.СостояниеСобытия     = Выборка.Состояние;
		
		РассчитатьСуммуНДС(НоваяСтрока);
		
		Для н = 1 По мКэшЗначений.МаксКолвоДопАналитик Цикл
			НоваяСтрока["Аналитика_"+н]  = Объект["Аналитика_"+н];
		КонецЦикла;
		
		бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока, мКэшЗначений.ИзмеренияДоп, мКэшЗначений.НастройкиИзмерений);

	КонецЦикла;	

	ОФормитьТаблицу("ГрафикПлатежей");
	
КонецПроцедуры

// Проверяет данные по событию. 
//
// Параметры:
//  СостояниеСобытия - Перечисление.
//  Событие          - ДокументСсылка.
//
&НаСервере
Функция ПроверкаСобытия(СостояниеСобытия, Событие)

	Результат = Истина;
	
	Если СостояниеСобытия = Перечисления.бит_СостоянияВыполненияСобытия.Выполнено Тогда
		ТекстСообщения = НСтр("ru = 'Событие в текущей строке уже выполнено.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Результат = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Событие.СобытиеКонтроль) И Событие.СобытиеКонтроль.Состояние = Перечисления.бит_СостоянияВыполненияСобытия.НеВыполнено Тогда
		ТекстСообщения = НСтр("ru = 'Это событие может быть выполнено только после выполнения события """+ Событие.СобытиеКонтроль.Наименование + """.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Обработка события закрытия формы выбора даты. 
//
// Параметры:
//  Параметр1 - Строка.
//
&НаКлиенте
Процедура ЗакрытиеФормыВыбораДаты(ДатаВыполнения, ТекущаяСтрока) Экспорт

	Если ЗначениеЗаполнено(ДатаВыполнения) Тогда
		ВыполнитьСобытиеСервер(ТекущаяСтрока, ДатаВыполнения);
	КонецЕсли;
	  
КонецПроцедуры

// Выполняет действия при выполнении события. 
//
// Параметры:
//  Параметр1 - Строка.
//
&НаСервере
Процедура ВыполнитьСобытиеСервер(ТекущаяСтрока, ДатаВыполнения)
	
	ТекущиеДанные = Объект.ГрафикПлатежей.НайтиПоИдентификатору(ТекущаяСтрока);
	
	//  устанавливаем значение в текущий документя "Событие".
	ДокСобытие = ТекущиеДанные.Событие.ПолучитьОбъект();
	//Если ЗначениеЗаполнено(ДокСобытие.СобытиеКонтроль) 
	// И ДокСобытие.СобытиеКонтроль.Состояние = Перечисления.бит_СостоянияВыполненияСобытия.НеВыполнено Тогда
	//	ТекстСообщения = "Это событие может быть выполнено только после выполнения события """
	//                    + ДокСобытие.СобытиеКонтроль.Наименование + """.";
	//	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	//	Возврат;
	//КонецЕсли;
	
    ДокСобытие.ДатаВыполнения = ДатаВыполнения;
	ДокСобытие.Состояние = Перечисления.бит_СостоянияВыполненияСобытия.Выполнено;
	ДокСобытие.Записать();
	
	ТипДней           = ДокСобытие.ТипДней;
	Продолжительнось  = ДокСобытие.Продолжительнось;
						
	Период = ВычислитьДатуПоФормулеСобытия(ТипДней, ДатаВыполнения, Продолжительнось);
	
	// изменяем ТЧ доп. условий по договору и проводим документ по регистрам.
	ТекущиеДанные.СостояниеСобытия = Перечисления.бит_СостоянияВыполненияСобытия.Выполнено;
	ТекущиеДанные.Период = Период;

	ЗаписьВыполнена = ЗаписатьПровестиДокумент();

	Если Не ЗаписьВыполнена Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет дату события по формуле.
//
// Параметры:
//  ТипДней - перечисление
//  Датавыполнения - Дата
//  Продолжительность - число
//
// Возвращаемое значение:
//  Период - Дата.
//
&НаСервере
Функция ВычислитьДатуПоФормулеСобытия(ТипДней, ДатаВыполнения, Продолжительнось)

	Период = Дата(1,1,1);
	
	Если ТипДней = Перечисления.бит_ТипыДнейСобытия.Рабочие Тогда
		ТекстУсловие = "(ДанныеПроизводственногоКалендаря.ВидДня = Значение(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) 
		                | ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = Значение(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)) И
						| (ДанныеПроизводственногоКалендаря1.ВидДня = Значение(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) 
		                | ИЛИ ДанныеПроизводственногоКалендаря1.ВидДня = Значение(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))";
	Иначе
		ТекстУсловие = "Истина";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПроизводственногоКалендаря1.Дата) КАК КолвоДней
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря1
		|		ПО ДанныеПроизводственногоКалендаря.Дата >= ДанныеПроизводственногоКалендаря1.Дата
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата > &ДатаВыполнения
		|	И ДанныеПроизводственногоКалендаря1.Дата > &ДатаВыполнения
		|	И &Условие
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПроизводственногоКалендаря.Дата";

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловие);
	
	Запрос.УстановитьПараметр("ДатаВыполнения", ДатаВыполнения);

	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если Продолжительнось = 0 Тогда
		Период = ДатаВыполнения;
		
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КолвоДней", Продолжительнось);
		
		РезультатЗапроса.Сбросить();
		
		Пока РезультатЗапроса.НайтиСледующий(СтруктураПоиска) Цикл
			Период = РезультатЗапроса.Дата;
		КонецЦикла;
		
	КонецЕсли;

	Возврат Период;
	
КонецФункции

&НаСервере
Процедура ПеренестиПлатежиСПраздничныхДнейВРабочие(График, РежимПереноса)
	
	Календарь = ПолучитьДанныеПроизводственногоКалендаря();

	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		// проверку выполняем только для БП, т.к. в УПП нет соответствующего справочника.
		Если НЕ ЗначениеЗаполнено(Календарь) Тогда
			
			ТекстСообщения = НСтр("ru='Не указан производственный календарь!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.Календарь");
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаГрафика = Объект[График].Выгрузить();
	
	ТаблицаГрафика.Сортировать("Период");
	
	МинимальнаяДата  = Дата(1,1,1);
	МаксимальнаяДата = Дата(2999,1,1);
	
	Если ТаблицаГрафика.Количество() > 0 Тогда
		МинимальнаяДата  = ДобавитьМесяц(ТаблицаГрафика[0].Период, -1);
		МаксимальнаяДата = ДобавитьМесяц(ТаблицаГрафика[ТаблицаГрафика.Количество()-1].Период, 1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	РабочиеДни = Новый Массив;
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	РабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Запрос.УстановитьПараметр("ТаблицаГрафика" , ТаблицаГрафика);
	Запрос.УстановитьПараметр("Календарь"		, Календарь);
	Запрос.УстановитьПараметр("РабочиеДни"	    , РабочиеДни);
	Запрос.УстановитьПараметр("МинимальнаяДата" , МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата", МаксимальнаяДата);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаГрафика.Период
	|ПОМЕСТИТЬ ТаблицаГрафика
	|ИЗ
	|	&ТаблицаГрафика КАК ТаблицаГрафика
	|;
	|";
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() 
		ИЛИ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		ТекстДанныеГрафика = 
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПроизводственногоКалендаря.Дата КАК ДатаКалендаря,
		|	ДанныеПроизводственногоКалендаря.ВидДня
		|ПОМЕСТИТЬ ПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &Календарь
		|	И ДанныеПроизводственногоКалендаря.ВидДня В(&РабочиеДни)
		|	И ДанныеПроизводственногоКалендаря.Дата >= &МинимальнаяДата
		|	И ДанныеПроизводственногоКалендаря.Дата <= &МаксимальнаяДата
		|;
		|";
	Иначе
		ТекстДанныеГрафика = 
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
		|	РегламентированныйПроизводственныйКалендарь.ВидДня
		|ПОМЕСТИТЬ ПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ВидДня В(&РабочиеДни)
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &МинимальнаяДата
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря <= &МаксимальнаяДата
		|;
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстДанныеГрафика;
	ТекстЗапроса = ТекстЗапроса +
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаГрафика.Период,
	|	ЕстьNULL(МАКСИМУМ(ПроизводственныйКалендарьПредРабочий.ДатаКалендаря),ТаблицаГрафика.Период) КАК ПредыдущийРабочий,
	|	ЕстьNULL(МИНИМУМ(ПроизводственныйКалендарьСледРабочий.ДатаКалендаря),ТаблицаГрафика.Период) КАК СледующийРабочий
	|ИЗ
	|	ТаблицаГрафика КАК ТаблицаГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроизводственныйКалендарь КАК ПроизводственныйКалендарьПредРабочий
	|		ПО ТаблицаГрафика.Период >= ПроизводственныйКалендарьПредРабочий.ДатаКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроизводственныйКалендарь КАК ПроизводственныйКалендарьСледРабочий
	|		ПО ТаблицаГрафика.Период <= ПроизводственныйКалендарьСледРабочий.ДатаКалендаря
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаГрафика.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПроизводственныйКалендарь";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	ТаблицаПереносовДат = Результат.Выгрузить();
	
	Для Каждого ТекущаяСтрока Из Объект[График] Цикл
		
		ДанныеОПереносе = ТаблицаПереносовДат.Найти(ТекущаяСтрока.Период, "Период");
		
		Если РежимПереноса = 0 Тогда
			ТекущаяСтрока.Период = ДанныеОПереносе.ПредыдущийРабочий;
		Иначе
			ТекущаяСтрока.Период = ДанныеОПереносе.СледующийРабочий;
		КонецЕсли;
		
	КонецЦикла;
	
	ПометитьПлатежиПопадающиеНаВыходной(График);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Проверяет заполненность реквизитов документа подлежащих частичной или полной очистке.
// При смене направления в документе.
//
&НаКлиенте
Функция ЕстьДанныеДляОчистки()
	
	Результат = Ложь;
	
	Если Объект.ГрафикПлатежей.Количество() > 0
		ИЛИ Объект.ГрафикНачислений.Количество() > 0
		ИЛИ НЕ Объект.СуммаПриход = 0
		ИЛИ НЕ Объект.СуммаПриходНачисления = 0 
		ИЛИ НЕ Объект.СуммаРасход = 0 
		ИЛИ НЕ Объект.СуммаРасходНачисления = 0 Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент)
	
	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить(бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента(), Объект.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если ЗначениеЗаполнено(мКэшЗначений.СписокВидовДоговоров) Тогда
			СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(мКэшЗначений.СписокВидовДоговоров.ВыгрузитьЗначения()));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПроектДоговора) Тогда
		СтруктураОтбора.Вставить("бит_ПроектДоговора", Объект.ПроектДоговора);
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры

// Процедура устанавливает отборы для статьи оборотов.
//
// Параметры:
//  Контейнер - ПолеФормы.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатьиОборотов(Элемент, СтруктураПараметров)

	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("РасходДоход"	, СтруктураПараметров.РасходДоход);
	СтруктураОтбора.Вставить("ТипСтатьи"	, СтруктураПараметров.ТипСтатьи);
	
	Если ТипЗнч(СтруктураПараметров.СписокСтатейПринадлежность) = Тип("СписокЗначений") Тогда
		СтруктураОтбора.Вставить("Ссылка", СтруктураПараметров.СписокСтатейПринадлежность);
	КонецЕсли;
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлажки(ИмяТаблицы, ЗначениеФлажка)
	
	Для Каждого ТекСтрока Из Объект[ИмяТаблицы] Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ДокументПланирования) Тогда
			ТекСтрока.Выполнять = ЗначениеФлажка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значение флажка в нужное состояние в дереве. Вызывается рекурсивно.
//
// Параметры:
//	ЭлементыДерева - ДанныеФормыДерево.
//	ЗначениеФлажка - булево.
//
&НаКлиенте
Процедура ИзменитьФлажкиДерево(ЭлементыДерева, ЗначениеФлажка)
	
	Для Каждого ТекущаяВетка Из ЭлементыДерева Цикл
		
		ТекущаяВетка.Выполнять = ЗначениеФлажка;
		
		ИзменитьФлажкиДерево(ТекущаяВетка.ПолучитьЭлементы(), ЗначениеФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура настраивает флаги для родительских строк. Вызывается рекурсивно.
//
// Параметры:
//	
&НаКлиенте
Процедура ИзменитьФлажкиРодителей(ВеткаРодитель, ЗначениеФлажка)
	
	Если ВеткаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = ВеткаРодитель.ПолучитьЭлементы();
	
	СостояниеРодителя = ЗначениеФлажка;
	
	Для Каждого ТекущаяВетка Из ЭлементыРодителя Цикл
		Если НЕ ТекущаяВетка.Выполнять = ЗначениеФлажка Тогда
			СостояниеРодителя = 2;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВеткаРодитель.Выполнять = СостояниеРодителя;
	
	ИзменитьФлажкиРодителей(ВеткаРодитель.ПолучитьРодителя(), ЗначениеФлажка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиДанныхИзExcel(ИмяТаблицы)
	
	Если Параметры.Ключ.Пустая() Тогда  		
		ТекстПредупреждения = НСтр("ru = 'Данные еще не записаны. Выполнение действия ""Загрузить по настройке"" возможно только после записи данных.'");       		
		ПоказатьПредупреждение(,ТекстПредупреждения,30);
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ЗакрытиеФормыЗагрузкиДанныхИзExcel", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТабЧасти"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("ОбъектДляЗаполнения", Объект);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаЗагрузкиДанныхИзExcelУправляемая", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
    		
КонецПроцедуры

&НаКлиенте
// Обработка оповещения закрытия формы загрузки данных из Excel. 
//
// Параметры:
//  Резульат - Строка.
//
Процедура ЗакрытиеФормыЗагрузкиДанныхИзExcel(Результат, ДополнительныеПараметры) Экспорт
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ПообъектныйГрафик, ПообъектныйГрафик.ПолучитьЭлементы(), Истина);

КонецПроцедуры 

&НаКлиенте
// Процедура открывает форму обработки бит_ЗагрузкаДанныхИзТабличногоДокумента проверяя записан ли документ. 
//
// Параметры:
//  ДополнительныеПараметры - Структура.
//
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДок(ИмяТаблицы)
    
    ДопПараметры = Новый Структура("ИмяТаблицы", ИмяТаблицы);
       
    Если Параметры.Ключ.Пустая() Тогда  
        
        ТекстВопроса = НСтр("ru='Данные еще не записаны. 
		|Выполнение действия ""Загрузить через табличный документ"" возможно только после записи данных.
		|Записать?'");				
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗаписатьДокументДляЗагрузкиЧерезТД", ЭтотОбъект, ДопПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        
    Иначе
        
        ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание(ДопПараметры);
        
    КонецЕсли;	
		
КонецПроцедуры // ОткрытьФормуЗагрузкиДанныхЧерезТабДок()

&НаКлиенте
// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Результат               - Строка.
//  ДополнительныеПараметры - Структура.
//
Процедура ВопросЗаписатьДокументДляЗагрузкиЧерезТД(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
   	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
        
        ЗаписьВыполнена = ЗаписатьПровестиДокумент();
        
        Если ЗаписьВыполнена Тогда
            
            // Флаг модифицированности автоматически не снимается.
            ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание(ДополнительныеПараметры);
            
        КонецЕсли;
    
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
// Процедура открывает форму обработки бит_ЗагрузкаДанныхИзТабличногоДокумента. 
//
// Параметры:
//  ДополнительныеПараметры - Структура.
//
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание(ДополнительныеПараметры)

    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимЗагрузки"		 , "ТабличнаяЧасть");
    ПараметрыФормы.Вставить("ОбъектМетаданных"   , "Документ.бит_ДополнительныеУсловияПоДоговору");
    ПараметрыФормы.Вставить("ОбъектДляЗаполнения", Объект.Ссылка);
    ПараметрыФормы.Вставить("ИмяТабЧасти"        , ДополнительныеПараметры.ИмяТаблицы);
    
    ОткрытьФорму("Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента.Форма"
                    , ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
  	                   
КонецПроцедуры // ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание() 

&НаКлиенте
Процедура ОткрытьОбработкуФормированиеФинансовыхГрафиков(ВидГрафика)
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Перед созданием финансового графика документ необходимо записать!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если Объект.РасходДоход = мКэшЗначений.Перечисления.бит_РасходДоход.Поступление Тогда
		НаправлениеДДС = "Выдача";
	Иначе
		НаправлениеДДС = "Получение";
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура;
	
	УпаковатьТаблицу("ГрафикВыдачиТраншей",СтруктураТаблиц);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДоговорКонтрагента", ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),Объект.ДоговорКонтрагента,Объект.ПроектДоговора));
	ПараметрыФормы.Вставить("НаправлениеДДС"	, НаправлениеДДС);
	ПараметрыФормы.Вставить("ВидГрафика"		, ВидГрафика);
	ПараметрыФормы.Вставить("Документ"			, Объект.Ссылка);
	ПараметрыФормы.Вставить("СтруктураТаблиц"	, СтруктураТаблиц);
	
	ОткрытьФорму("Обработка.бит_ФормированиеГрафиковПлатежейПоФинансовымДоговорам.Форма",ПараметрыФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Выполняет необходимые проверки и инициирует создание документов планирования для графика.
//
// Параметры:
//	ИмяГрафика - строка.
//	ВидДокумента - Строка.
&НаКлиенте
Процедура СоздатьДокументыПланированияКлиент(ИмяГрафика, ВидДокумента)
	
	Статус_Утвержден = мКэшЗначений.СтатусыДокумента.ДополнительныеУсловияПоДоговору_Утвержден;
	
	Если НЕ Статус = Статус_Утвержден Тогда
		ТекстСообщения = НСтр("ru='Создание документов планирования разрешено в утвержденном документе (статус ""%1%"")'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Статус_Утвержден);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
    
    Если Объект[ИмяГрафика].Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='График не заполнен. Нет данных для создания документов планирования!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
        Возврат;
    КонецЕсли;
	
	ЕстьДокументы = Ложь;
	Для Каждого Стр Из Объект[ИмяГрафика] Цикл
		Если Стр.Выполнять Тогда
			ЕстьДокументы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьДокументы Тогда
		ТекстСообщения = НСтр("ru='Выберите строки по которым необходимо сформировать документы.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
        Возврат;
    КонецЕсли;
		
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выполнять", Истина);
	
	НайденныеСтроки = Объект[ИмяГрафика].НайтиСтроки(СтруктураОтбора);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НайденныеСтроки", НайденныеСтроки);
	ДопПараметры.Вставить("ИмяГрафика",      ИмяГрафика);
	ДопПараметры.Вставить("ВидДокумента",    ВидДокумента);

	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Документ изменен. 
		|Для создания документов планирования его необходимо записать.
		|Записать?'");
		
				
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗаписатьДокумент",ЭтотОбъект, ДопПараметры),ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
	Иначе	
		
		Если ВидДокумента = "бит_ЗаявкаНаРасходованиеСредствОбщая" Тогда
			ВидДокументаВопрос = "прогнозирования";
		Иначе
			ВидДокументаВопрос = "планирования";
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru='Для выбранных строк графика будут созданы документы %1%. Продолжить?'");
		ТекстВопроса = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстВопроса, ВидДокументаВопрос);
		
		
		ОповещениеСозданиеДокументов = Новый ОписаниеОповещения("ВопросСозданиеДокументовПланирования", ЭтотОбъект, ДопПараметры);
		
	    ПоказатьВопрос(ОповещениеСозданиеДокументов, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Результат - Строка.
//  ДополнительныеПараметры - Структура.
//
Процедура ВопросЗаписатьДокумент(Результат, ДополнительныеПараметры) Экспорт

    НайденныеСтроки = ДополнительныеПараметры.НайденныеСтроки;
	ВидДокумента    = ДополнительныеПараметры.ВидДокумента;
	
	Ответ = Результат;

	ЗаписьВыполнена = Ложь;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписьВыполнена = ЗаписатьПровестиДокумент();
		
		// после записи флажки слетают, установим их заново.
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			ТекСтрока.Выполнять = Истина;
		КонецЦикла;
	КонецЕсли;

	Если НЕ ЗаписьВыполнена Тогда
		Возврат;
	КонецЕсли;

	// флаг модифицированности автоматически не снимается.
	Модифицированность = НЕ ЗаписьВыполнена;
	
	Если ВидДокумента = "бит_ЗаявкаНаРасходованиеСредствОбщая" Тогда
		ВидДокументаВопрос = "прогнозирования";
	Иначе
		ВидДокументаВопрос = "планирования";
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Для выбранных строк графика будут созданы документы %1%. Продолжить?'");
	ТекстВопроса = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстВопроса, ВидДокументаВопрос);
	
	ОповещениеСозданиеДокументов = Новый ОписаниеОповещения("ВопросСозданиеДокументовПланирования", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОповещениеСозданиеДокументов, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	                   
КонецПроцедуры 

&НаКлиенте
// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Результат - Строка.
//  ДополнительныеПараметры - Структура.
//
Процедура ВопросСозданиеДокументовПланирования(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяГрафика      = ДополнительныеПараметры.ИмяГрафика;
    ВидДокумента    = ДополнительныеПараметры.ВидДокумента;

	Ответ = Результат;
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Выполняется создание документов планирования...'"); 
    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	// Создадим документы планирования.
	СоздатьДокументыПланированияСервер(ИмяГрафика, ВидДокумента);
	
	ТекстСообщения = НСтр("ru = 'Создание документов планирования завершено.'"); 
    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
    
    // Обновим документы планирования.
	ОбновитьДокументыПланирования();
    
    // Установить видимость реквизитов.
	УправлениеЭлементамиФормы();

КонецПроцедуры

// Выполняет необходимые действия для создания графика.
//
// Параметры:
//	ИмяГрафика - строка.
//
&НаКлиенте
Процедура СоздатьИзменитьГрафикКлиент(ИмяГрафика)
	
	РеквизитыШапкиТаблицы = ПолучитьЗначенияРеквизитовШапкиТаблицыСервер(ИмяГрафика);
	
	Если ИмяГрафика = "ГрафикПлатежей" Тогда
		ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС;
	Иначе
		ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР;
	КонецЕсли;
	
	Если Не бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		ДоговорПрочее = фКэшРеквизитов.ВидДоговораКонтрагента = мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	Иначе	
		ДоговорПрочее = Ложь;
	КонецЕсли;
	
	Если ДоговорПрочее Тогда
		
		СуммаГрафика = Новый Структура;
		СуммаГрафика.Вставить("СуммаПриход", РеквизитыШапкиТаблицы.СуммаПриход);
		СуммаГрафика.Вставить("СуммаРасход", РеквизитыШапкиТаблицы.СуммаРасход);
		СуммаГрафика.Вставить("РасходДоход", Объект.РасходДоход);
		
	ИначеЕсли Объект.РасходДоход = мКэшЗначений.Перечисления.бит_РасходДоход.Расходование Тогда
		СуммаГрафика = РеквизитыШапкиТаблицы.СуммаРасход;
	Иначе
		СуммаГрафика = РеквизитыШапкиТаблицы.СуммаПриход;
	КонецЕсли;
	
	ПараметрыПринадлежностиСтатей = Новый Структура;
	ПараметрыПринадлежностиСтатей.Вставить("Дата"       	  , Объект.Дата);
	ПараметрыПринадлежностиСтатей.Вставить("ЦФО"        	  , Объект.ЦФО);
	ПараметрыПринадлежностиСтатей.Вставить("Организация"	  , Объект.Организация);
	ПараметрыПринадлежностиСтатей.Вставить("РасходДоход"	  , Объект.РасходДоход);
	ПараметрыПринадлежностиСтатей.Вставить("ТипСтатьи"  	  , ТипСтатьи);
	ПараметрыПринадлежностиСтатей.Вставить("ВыводитьСообщения", Истина);
	
	СтруктураОтбораСтатей = Новый Структура;
	СтруктураОтбораСтатей.Вставить("РасходДоход", Объект.РасходДоход);
	СтруктураОтбораСтатей.Вставить("ТипСтатьи"	, ТипСтатьи);
	СтруктураОтбораСтатей.Вставить("ОрганизацияОтбор", Объект.Организация);
    СтруктураОтбораСтатей.Вставить("ДатаОтбор"       , Объект.Дата);
    СтруктураОтбораСтатей.Вставить("ЦФОДляОтбора"    , Объект.ЦФО);
	
	СтруктураПараметровНастройки = Новый Структура;
	СтруктураПараметровНастройки.Вставить("СтатьяОборотов"					, РеквизитыШапкиТаблицы.СтатьяОборотов);
	СтруктураПараметровНастройки.Вставить("РасходДоход"						, Объект.РасходДоход);
	СтруктураПараметровНастройки.Вставить("ПараметрыПринадлежностиСтатей"	, ПараметрыПринадлежностиСтатей);
	СтруктураПараметровНастройки.Вставить("СтруктураОтбораСтатей"			, СтруктураОтбораСтатей);
	
	// Откроем дополнительную форму и получим данные для формирования графика.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала"		 , РеквизитыШапкиТаблицы.ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончания"		 , РеквизитыШапкиТаблицы.ДатаОкончания);
	ПараметрыФормы.Вставить("Периодичность"		 , РеквизитыШапкиТаблицы.Периодичность);
	ПараметрыФормы.Вставить("СтавкаНДС"			 , РеквизитыШапкиТаблицы.СтавкаНДС);
	ПараметрыФормы.Вставить("Сумма"				 , СуммаГрафика);
	ПараметрыФормы.Вставить("ВидГрафика"		 , "Общий");
	ПараметрыФормы.Вставить("СтруктураПараметров", СтруктураПараметровНастройки);
	ПараметрыФормы.Вставить("ИмяГрафика"         , ИмяГрафика);
								
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяГрафика", ИмяГрафика);
	ДопПараметры.Вставить("РеквизитыШапкиТаблицы", РеквизитыШапкиТаблицы);
	
	ОповещениеЗакрытияФормы = Новый ОписаниеОповещения("ЗакрытиеФормыНастройкиГрафика", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаНастройкиПообъектногоГрафика", ПараметрыФормы,,,,,ОповещениеЗакрытияФормы,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

// Обработка оповещения закрытия формы пользователем. 
//
// Параметры:
//  Результат - Строка.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте
Процедура ЗакрытиеФормыНастройкиГрафика(Результат, ДополнительныеПараметры) Экспорт

	ИмяГрафика            = ДополнительныеПараметры.ИмяГрафика;
	РеквизитыШапкиТаблицы = ДополнительныеПараметры.РеквизитыШапкиТаблицы;
	
	ПараметрыЗаполнения = Результат;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитыШапкиТаблицы.Периодичность = ПараметрыЗаполнения.Периодичность;
	РеквизитыШапкиТаблицы.ДатаНачала    = ПараметрыЗаполнения.ДатаНачала;
	РеквизитыШапкиТаблицы.ДатаОкончания = ПараметрыЗаполнения.ДатаОкончания;
	РеквизитыШапкиТаблицы.СтавкаНДС     = ПараметрыЗаполнения.СтавкаНДС;
	
	пСтатьяОборотов = ?(ПараметрыЗаполнения.Свойство("СтатьяОборотов"), ПараметрыЗаполнения.СтатьяОборотов, РеквизитыШапкиТаблицы.СтатьяОборотов);
	пРасходДоход = ?(ПараметрыЗаполнения.Свойство("РасходДоход"), ПараметрыЗаполнения.РасходДоход, Объект.РасходДоход);
	пЗаменитьСуществующий = ПараметрыЗаполнения.ЗаменитьСуществующий;
	
	ДополнительныеПараметры.Вставить("пСтатьяОборотов",       пСтатьяОборотов);
	ДополнительныеПараметры.Вставить("пРасходДоход",          пРасходДоход);
    ДополнительныеПараметры.Вставить("пЗаменитьСуществующий", пЗаменитьСуществующий);
	ДополнительныеПараметры.Вставить("РеквизитыШапкиТаблицы", РеквизитыШапкиТаблицы);
	ДополнительныеПараметры.Вставить("ПараметрыЗаполнения",   ПараметрыЗаполнения);
	
	ОповещениеВопросПользователю = Новый ОписаниеОповещения("ВопросГрафикБудетПерезаполнен", ЭтотОбъект, ДополнительныеПараметры);
	Если пЗаменитьСуществующий И Объект[ИмяГрафика].Количество() <> 0 Тогда
		ПоказатьВопрос(ОповещениеВопросПользователю ,НСтр("ru = 'График будет перезаполнен. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеВопросПользователю, КодВозвратаДиалога.Да);
	КонецЕсли;
		
КонецПроцедуры 

// Обработка оповещения закрытия формы пользователем. 
//
// Параметры:
//  Результат - Строка.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте
Процедура ВопросГрафикБудетПерезаполнен(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяГрафика            = ДополнительныеПараметры.ИмяГрафика;
	РеквизитыШапкиТаблицы = ДополнительныеПараметры.РеквизитыШапкиТаблицы;
	пСтатьяОборотов       = ДополнительныеПараметры.пСтатьяОборотов;
	пРасходДоход          = ДополнительныеПараметры.пРасходДоход;
	пЗаменитьСуществующий = ДополнительныеПараметры.пЗаменитьСуществующий;
    ПараметрыЗаполнения   = ДополнительныеПараметры.ПараметрыЗаполнения;

	Ответ = Результат;
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если пРасходДоход = мКэшЗначений.Перечисления.бит_РасходДоход.Расходование Тогда
		РеквизитыШапкиТаблицы.СуммаРасход = ПараметрыЗаполнения.Сумма;
	Иначе
		РеквизитыШапкиТаблицы.СуммаПриход = ПараметрыЗаполнения.Сумма;
	КонецЕсли;	
	
	пРежим = ПараметрыЗаполнения.Режим;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатьяОборотов"   , пСтатьяОборотов);
	СтруктураПараметров.Вставить("РасходДоход"      , пРасходДоход);
	СтруктураПараметров.Вставить("НазначениеПлатежа", ПараметрыЗаполнения.НазначениеПлатежа);
	
	СоздатьИзменитьГрафикСервер(ИмяГрафика, РеквизитыШапкиТаблицы, пРежим, пЗаменитьСуществующий, СтруктураПараметров);
	
	ОФормитьТаблицу(ИмяГрафика);
	
КонецПроцедуры

// Процедура добавляет в дерево график платежей по одному объекту
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ЗаполнитьГрафикПоОбъектуКлиент(ТекущиеДанные)
	
	// Выберем данные для передачи в форму настройки пообъектного графика.
	Если ТекущиеДанные = Неопределено Тогда
		ТекОбъект 	 = Неопределено;
		СуммаГрафика = 0;
	Иначе
		Если ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
			ТекОбъект = ТекущиеДанные.Объект;		
		Иначе
			ТекОбъект = Неопределено;
		КонецЕсли;
		СуммаГрафика = ТекущиеДанные.Сумма;
	КонецЕсли;	
	
	
	// Откроем дополнительную форму и получим данные для формирования графика по одному объекту.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала", Объект.ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	ПараметрыФормы.Вставить("Периодичность", Объект.Периодичность);
	ПараметрыФормы.Вставить("Объект", ТекОбъект);
	ПараметрыФормы.Вставить("Сумма", СуммаГрафика);
	ПараметрыФормы.Вставить("ВидГрафика", "Объектный");
	ПараметрыФормы.Вставить("ТипДоговора", фКэшРеквизитов.бит_ТипДоговора);
		
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ЗакрытиеФормыНасйтрокиПообъектногоГрафика", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаНастройкиПообъектногоГрафика",ПараметрыФормы,,,,,ОповещениеЗакрытиеФормы);
	
КонецПроцедуры

// Обработка оповещения закрытия формы. 
//
// Параметры:
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура ЗакрытиеФормыНасйтрокиПообъектногоГрафика(СтруктураПараметров, ДопПараметры) Экспорт

	Если СтруктураПараметров = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	пОбъект = СтруктураПараметров.Объект;
	пЗаменитьСуществующий = СтруктураПараметров.ЗаменитьСуществующий;
	
	// возможно строка с выбранным объектом уже существует.
	СтрокаВыбранногоОбъекта = Неопределено;
	
	СтрокиГрафика = ПообъектныйГрафик.ПолучитьЭлементы();
	
	Для Каждого ТекСтрока Из СтрокиГрафика Цикл
		
		Если пОбъект = ТекСтрока.Объект Тогда
			
			СтрокаВыбранногоОбъекта = ТекСтрока;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаВыбранногоОбъекта = Неопределено Тогда
		СтрокаВыбранногоОбъекта = СтрокиГрафика.Добавить();
		СтрокаВыбранногоОбъекта.ЭтоВерхнийУровень = Истина;
		
		ИДСтроки = СтрокаВыбранногоОбъекта.ПолучитьИдентификатор();
	    ЗаполнитьГрафикПоОбъектуСервер(ИДСтроки, СтруктураПараметров);

	Иначе	
		
		Если пЗаменитьСуществующий Тогда
			
			ТекстВопроса = Нстр("ru = 'Заменить текущий график для объекта %1% ?'");
			ТекстВопроса = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстВопроса, пОбъект); 
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
			ДопПараметры.Вставить("СтрокаВыбранногоОбъекта", СтрокаВыбранногоОбъекта);
			
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗаменитьСуществующийОповещение", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
						
		Иначе
			
			ИДСтроки = СтрокаВыбранногоОбъекта.ПолучитьИдентификатор();
	        ЗаполнитьГрафикПоОбъектуСервер(ИДСтроки, СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросЗаменитьСуществующийОповещение(Ответ, ДопПараметры) Экспорт

	СтруктураПараметров     = ДопПараметры.СтруктураПараметров;
	СтрокаВыбранногоОбъекта = ДопПараметры.СтрокаВыбранногоОбъекта;

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		СтрокаВыбранногоОбъекта.ПолучитьЭлементы().Очистить();
		СтрокаВыбранногоОбъекта.Сумма = 0;
		
		ИДСтроки = СтрокаВыбранногоОбъекта.ПолучитьИдентификатор();
        ЗаполнитьГрафикПоОбъектуСервер(ИДСтроки, СтруктураПараметров);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиГрафиков(ИмяТабЧасти)
	
	ТаблицаДляОбработки = Объект[ИмяТабЧасти];
	Если ИмяТабЧасти = "ГрафикНачислений"
		И Объект.РасходДоход = ПредопределенноеЗначение("Перечисление.бит_РасходДоход.Расходование") Тогда
		
		Объект.СуммаРасходНачисления    = ТаблицаДляОбработки.Итог("Сумма");
		Объект.СуммаНДСРасходНачисления = ТаблицаДляОбработки.Итог("НДС");
	ИначеЕсли ИмяТабЧасти = "ГрафикНачислений"
		И Объект.РасходДоход = ПредопределенноеЗначение("Перечисление.бит_РасходДоход.Поступление") Тогда	
		
		Объект.СуммаПриходНачисления    = ТаблицаДляОбработки.Итог("Сумма");
		Объект.СтатьяОборотовНачисления = ТаблицаДляОбработки.Итог("НДС");
	ИначеЕсли ИмяТабЧасти = "ГрафикПлатежей"
		И Объект.РасходДоход = ПредопределенноеЗначение("Перечисление.бит_РасходДоход.Расходование") Тогда
		
		Объект.СуммаРасход    = ТаблицаДляОбработки.Итог("Сумма");
		Объект.СуммаНДСРасход = ТаблицаДляОбработки.Итог("НДС");
	ИначеЕсли ИмяТабЧасти = "ГрафикПлатежей"
		И Объект.РасходДоход = ПредопределенноеЗначение("Перечисление.бит_РасходДоход.Поступление") Тогда	
		
		Объект.СуммаПриход    = ТаблицаДляОбработки.Итог("Сумма");
		Объект.СуммаНДСПриход = ТаблицаДляОбработки.Итог("НДС");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначенияПоОбработкеСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзмененииКлиент()
	
	ОрганизацияПриИзмененииСервер();
    УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);	
		
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзмененииКлиент()
	
	Если фКэшРеквизитов.ВалютаДокумента <> Объект.ВалютаДокумента 
		И (Объект.СуммаПриход <> 0 ИЛИ Объект.СуммаРасход <> 0 ИЛИ Объект.СуммаПриходНачисления <> 0 ИЛИ Объект.СуммаРасходНачисления <> 0) Тогда
		
		ТекстВопроса = "Изменилась валюта документа. Пересчитать суммы документа?";
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросВалютаДокументаПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	Иначе
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
		
		фКэшРеквизитов.ВалютаДокумента    = Объект.ВалютаДокумента;
		фКэшРеквизитов.КратностьДокумента = Объект.КратностьДокумента;
		фКэшРеквизитов.КурсДокумента      = Объект.КурсДокумента;

	КонецЕсли;	
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//  ДопПараметры - Неопределено.
//
&НаКлиенте
Процедура ВопросВалютаДокументаПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВалютаДокументаПриИзмененииСервер();
	Иначе
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;

	фКэшРеквизитов.ВалютаДокумента    = Объект.ВалютаДокумента;
	фКэшРеквизитов.КратностьДокумента = Объект.КратностьДокумента;
	фКэшРеквизитов.КурсДокумента      = Объект.КурсДокумента;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииКлиент()
	
	Если НЕ Объект.Контрагент = фКэшРеквизитов.Контрагент 
		И ЕстьДанныеДляОчистки() Тогда
			
		ТекстВопроса = "При изменении контрагента будет изменен договор 
						| и удалены данные табличных частей не соответствующие виду договора. Продолжить?";
						
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросКонтрагентПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	    
	Иначе
		
		КонтрагентПриИзмененииСервер();
		УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросКонтрагентПриИзменении(Ответ, Доппараметры) Экспорт

	Если Не Ответ = КодВозвратаДиалога.Да Тогда
	        
		Объект.Контрагент = фКэшРеквизитов.Контрагент;
        
	Иначе
		
		КонтрагентПриИзмененииСервер();
		УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииКлиент()
	
	Если ЕстьДанныеДляОчистки() Тогда
			
		ТекстВопроса = "При изменении договора контрагента будут удалены данные табличных частей не соответствующие виду договора. Продолжить?";
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросДоговорКонтрагентаПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60,КодВозвратаДиалога.Нет); 
	    	    
	Иначе
		
		ДоговорКонтрагентаПриИзмененииСервер();
		
	КонецЕсли;
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросДоговорКонтрагентаПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДоговорКонтрагентаПриИзмененииСервер();
		
	Иначе
		
		Объект.ДоговорКонтрагента = фКэшРеквизитов.ДоговорКонтрагента;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатьяОборотовНачалоВыбораКлиент(Элемент, Контейнер, ТипСтатьи)
	
	СписокСтатейПоПринадлежности = ПолучитьСписокСтатейПоПринадлежности(Объект, Контейнер, ТипСтатьи);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РасходДоход", Контейнер.РасходДоход);
	СтруктураПараметров.Вставить("ТипСтатьи", ТипСтатьи);
	СтруктураПараметров.Вставить("СписокСтатейПринадлежность", СписокСтатейПоПринадлежности);
	
	УстановитьПараметрыВыбораСтатьиОборотов(Элемент, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВШапкеГрафикаПриИзмененииКлиент(ИмяГрафика, Направление, ИмяРеквизитаСумма, ИмяРеквизитаНДС)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
		ПолучитьСтавкуНДСизСтатьи(Объект.СтатьяОборотов, Объект.СтавкаНДС);
	КонецЕсли; 
	
	РассчитатьСуммуНДС(Объект, ИмяРеквизитаСумма, ИмяРеквизитаНДС);

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("РасходДоход", Направление);
		
    НайденныеСтроки = Объект[ИмяГрафика].НайтиСтроки(СтруктураОтбора);
	
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		
		ТекстВопроса = НСтр("ru='Изменилась общая сумма по графику. Пересчитать суммы в графике?'");
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяГрафика", ИмяГрафика);
		ДопПараметры.Вставить("Направление", Направление);
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСуммаВШапкеГрафикаПриИзменении", ЭтотОбъект, ДопПараметры);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет); 
		
	Иначе
			    
	    // Установить видимость реквизитов.
	    УправлениеЭлементамиФормы();
		
    КонецЕсли;  
	
КонецПроцедуры

// Обработка опопвещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//  ДопПараметры - Структура
//
&НаКлиенте
Процедура ВопросСуммаВШапкеГрафикаПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		РаспределитьСуммыДокументаПоГрафикуСервер(ДопПараметры.ИмяГрафика, ДопПараметры.Направление);
	КонецЕсли;

	// Установить видимость реквизитов.
	УправлениеЭлементамиФормы();

КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//  ДопПараметры - Структура.
//
&НаКлиенте
Процедура ВопросОчищенияДанныхПриУстановкеОперации(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Объект.ВидОперации = ДопПараметры.ПредыдущийВидОперации;
		Объект.ФормаОплаты = ДопПараметры.ПредыдущийФормаОплаты;
		Объект.РасходДоход = ДопПараметры.ПредыдущееНаправление;
		
		ОпределитьСписокДоступныхВидовДоговоровПоОперации(Объект.ВидОперации, Объект.РасходДоход, мКэшЗначений);
		
	Иначе
		
		Если ДопПараметры.флОчиститьДоговор Тогда
			Объект.ДоговорКонтрагента = Неопределено;
			
			ДоговорКонтрагентаПриИзмененииСервер();
		Иначе
			ОчиститьНедоступныеСуммыИСтрокиГрафиков();
		КонецЕсли;
		
		// Проверим принадлежность ЦФО к статье оборотов.
		ЦФОПриИзмененииСервер();
		
		Объект.ФормироватьДвижения = ОбязательноФормироватьДвиженияПоМСФО();
		
		Модифицированность = Истина;
		
		// Установить видимость реквизитов по виду операции.
		УправлениеЭлементамиФормы();
		
	КонецЕсли;

КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросУстановкаПометокНаУдаление(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписьВыполнена = ЗаписатьПровестиДокумент();
	КонецЕсли;
	
	Если НЕ ЗаписьВыполнена Тогда
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru='После пометки на удаление ссылки на документы планирования в таблицах ""График платежей"", ""График начислений""
                  | и ""Документы планирования"" будут очищены. Продолжить?'");
				  
	ОповещениеВопросОчисткаСсылок = Новый ОписаниеОповещения("ВопросОчисткаСсылок", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеВопросОчисткаСсылок, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);

КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросОчисткаСсылок(Ответ, Доппараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
        УдалитьДокументыПланированияНаСервере();;
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросРаспределитьПлатежиНачисления(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
        РаспределитьСуммыДокументаПоГрафику(ДопПараметры.График, ДопПараметры.МетодРаспределения);
    КонецЕсли;;	

КонецПроцедуры

// Процедура окончание выбора вида операции.
//
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
	
	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если НЕ СтруктураПараметров = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров, "ВидОперации,РасходДоход,ФормаОплаты");																		   
	КонецЕсли;
	
	// при поступлении вид операции может быть не заполнен, в других случаях заполняем.
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации)
		И НЕ Объект.РасходДоход = мКэшЗначений.Перечисления.бит_РасходДоход.Поступление Тогда
		
		Объект.ВидОперации = мКэшЗначений.Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику;
		Объект.ФормаОплаты = мКэшЗначений.Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		Объект.РасходДоход = мКэшЗначений.Перечисления.бит_РасходДоход.Расходование;
		
	КонецЕсли;
	
	ЗаполнитьШапкуНовогоПриОткрытииСервер();
	
	// Определим список видов договоров доступных после изменения вида операции.
	ОпределитьСписокДоступныхВидовДоговоровПоОперации(Объект.ВидОперации, Объект.РасходДоход, мКэшЗначений);
	
	// Проверим вид операции договора, зачистим при необходимости.
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		ИЛИ ЗначениеЗаполнено(Объект.ПроектДоговора) Тогда
	
		Если мКэшЗначений.СписокВидовДоговоров.НайтиПоЗначению(фКэшРеквизитов.ВидДоговораКонтрагента) = Неопределено Тогда
			 ТекстСообщения = НСтр("ru='Вид договора не соответствует виду операции.'");
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		КонецЕсли;	
	
	КонецЕсли; 
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		ЭтотОбъект.Закрыть();
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет окончательные операции по открытию формы. 
//
&НаКлиенте
Процедура ПриОткрытииОкончание()

	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьСтавкуНДСизСтатьи(СтатьяОборотов, СтавкаНДС)

	СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяОборотов, "СтавкаНДС");

КонецПроцедуры

&НаСервере
Процедура ОбновитьПиктограммыДокуменовНаСервере()

	Для Каждого ТекущийУзел Из ДокументыПланирования.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяСтрока Из ТекущийУзел.ПолучитьЭлементы() Цикл
			ДокументПланированияПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.ДокументПланирования,"Проведен");
			Если ДокументПланированияПроведен Тогда 	
				ТекущаяСтрока.КартинкаПроведен = БиблиотекаКартинок.ДокументПроведенКоннекторНиз;
			Иначе
				ТекущаяСтрока.КартинкаПроведен = БиблиотекаКартинок.ДокументЗаписанКоннекторНиз;
			КонецЕсли; 		
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры


#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначенияПоОбработкеСобытийЭлементовФормыНаСервере

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	
	ПересчитатьСуммыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОчиститьНедоступныеСуммыИСтрокиГрафиков();
	
    // Выполняем общие действия для всех документов при изменении Организация.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(Объект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
    
    КонтрагентПриИзмененииСервер();
	
    фКэшРеквизитов.ДоговорКонтрагента     = Объект.ДоговорКонтрагента;
	фКэшРеквизитов.ВидДоговораКонтрагента = Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()];
	фКэшРеквизитов.бит_ТипДоговора        = Объект.ДоговорКонтрагента.бит_ТипДоговора;
	фКэшРеквизитов.Организация	 	      = Объект.Организация;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	// Выполняем общие действия для всех документов при изменении Контрагент.
    бит_БухгалтерияСервер.ПриИзмененииЗначенияКонтрагента(Объект, мКэшЗначений.СписокВидовДоговоров);
	
	// Могли поменять договор.
	ДоговорКонтрагентаПриИзмененииСервер();
	
	фКэшРеквизитов.Контрагент = Объект.Контрагент;
		
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииСервер()
	
	// Проверим возможность указания сумм документа и графика платежей для договора.
	ОчиститьНедоступныеСуммыИСтрокиГрафиков();
	
	ОпределитьСписокДоступныхВидовДоговоровПоОперации(Объект.ВидОперации, Объект.РасходДоход, мКэшЗначений);
	
	фКэшРеквизитов.Контрагент		  = Объект.Контрагент;
	фКэшРеквизитов.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	фКэшРеквизитов.ВидДоговораКонтрагента = Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()];
	фКэшРеквизитов.бит_ТипДоговора = Объект.ДоговорКонтрагента.бит_ТипДоговора;
	
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		УправлениеЭлементамиФормы();
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Объект.ДоговорКонтрагента.Организация;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
        ИмяКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
        Объект.Контрагент = Объект.ДоговорКонтрагента[ИмяКонтрагента];
	КонецЕсли; 
	
	Объект.ВалютаДокумента   = ?(Объект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
								    ,мКэшЗначений.ВалютаРегламентированногоУчета
								    ,Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов);	
	
	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
	
	// Пересчитаем суммы в соответствии с новой валютой и курсом.
	ВалютаДокументаПриИзмененииСервер();
	
	Объект.ФормироватьДвижения = ОбязательноФормироватьДвиженияПоМСФО();
	
	// Заполним статьи оборотов в шапке по приоритету - сначала из договора
	// , если там не указаны, то из настроек пользователя.
	Если Объект.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотов.РасходДоход = Объект.РасходДоход Тогда	
		Объект.СтатьяОборотов = Объект.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотов;
	КонецЕсли;

	Если Объект.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотовБДР.РасходДоход = Объект.РасходДоход Тогда
		Объект.СтатьяОборотовНачисления = Объект.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотовБДР;
	КонецЕсли;
	
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	Если ЗначениеЗаполнено(Объект.РасходДоход) Тогда
		СтрРасходДоход = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_РасходДоход,Объект.РасходДоход);
	Иначе	
		СтрРасходДоход = "Расходование";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяОборотов) Тогда
		ВидСтатьи = "ОсновнаяСтатья" + СтрРасходДоход + "БДДС";
		Объект.СтатьяОборотов = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(ВидСтатьи, ТекущийПользователь);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяОборотовНачисления) Тогда
		ВидСтатьи = "ОсновнаяСтатья" + СтрРасходДоход + "БДР";
		Объект.СтатьяОборотовНачисления = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(ВидСтатьи, ТекущийПользователь);
	КонецЕсли;
	
	Объект.ЦФО    = ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента.бит_ЦФО)
					, Объект.ДоговорКонтрагента.бит_ЦФО
					, бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновноеЦФО", ТекущийПользователь));
	Объект.Проект = ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента.бит_Проект)
					, Объект.ДоговорКонтрагента.бит_Проект
					, бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойПроект", ТекущийПользователь));
	
	пДатаНачала = Объект.ДоговорКонтрагента.Дата;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.СрокДействия) Тогда
		пДатаОкончания = Объект.ДоговорКонтрагента.СрокДействия;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорКонтрагента.Дата) Тогда
		пДатаОкончания = КонецГода(Объект.ДоговорКонтрагента.Дата);
	Иначе
		пДатаОкончания = Дата("00010101");
	КонецЕсли;
	
	Объект.ДатаНачала			   = пДатаНачала;
	Объект.ДатаОкончания 		   = пДатаОкончания;
	Объект.ДатаНачалаНачисления    = пДатаНачала;
	Объект.ДатаОкончанияНачисления = пДатаОкончания;
	
	// заполним суммы в параметрах графиков.
	Курс 	  = 0;
	Кратность = 0;
	УстановитьКурсКратностьДокумента(Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата(), Курс, Кратность);
	
	пСуммаВзаиморасчеты = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.ДоговорКонтрагента.бит_СуммаДоговора,
																		Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов,
																		Объект.ВалютаДокумента,
																		Курс,
																		Объект.КурсДокумента,
																		Кратность,
																		Объект.КратностьДокумента);
																		
	Если ЭлементыУказанногоНаправленияДоступны(Перечисления.бит_РасходДоход.Расходование) Тогда
		
		Объект.СуммаРасход 		  	 = пСуммаВзаиморасчеты;
		Объект.СуммаРасходНачисления = пСуммаВзаиморасчеты;
		
	КонецЕсли;
	
	Если ЭлементыУказанногоНаправленияДоступны(Перечисления.бит_РасходДоход.Поступление) Тогда
		
		Объект.СуммаПриход 		  	 = пСуммаВзаиморасчеты;
		Объект.СуммаПриходНачисления = пСуммаВзаиморасчеты;
		
	КонецЕсли;
	
	// заодно рассчитаются суммы НДС.
	ПриИзмененииСтатьиОборотов(Объект, "СтатьяОборотов");
	ПриИзмененииСтатьиОборотов(Объект, "СтатьяОборотовНачисления");
	
	// определим периодичность расчета основного долга по фин. договору.
	мКэшЗначений.ПериодичностьСоставляющейОсновнойДолг = ОпределитьПериодичностьСоставляющейОсновнойДолг();
	
	ЗаполнитьГрафикВыдачиТраншей();
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииСервер()
	
	УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	
	Если НЕ фКэшРеквизитов.ВалютаДокумента = Объект.ВалютаДокумента Тогда
		ПересчитатьСуммыДокумента();
	КонецЕсли;
	
	фКэшРеквизитов.ВалютаДокумента    = Объект.ВалютаДокумента;
	фКэшРеквизитов.КратностьДокумента = Объект.КратностьДокумента;
	фКэшРеквизитов.КурсДокумента      = Объект.КурсДокумента;
	
КонецПроцедуры

&НаСервере
Процедура ЦФОПриИзмененииСервер()
	
	ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС;
	
	ПриИзмененииЦФО(Объект, "СтатьяОборотов", ТипСтатьи);
	
	ТипСтатьи = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР;
	
	ПриИзмененииЦФО(Объект, "СтатьяОборотовНачисления", ТипСтатьи);
	
КонецПроцедуры

&НаСервере
Процедура ЦФОПриИзмененииВСтрокеСервер(ИмяТаблицы, ИДСтроки, ИмяРеквизитаСтатьяОборотов, ТипСтатьи)
	
	ТекущиеДанные = Объект[ИмяТаблицы].НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЦФО(ТекущиеДанные, ИмяРеквизитаСтатьяОборотов, ТипСтатьи);
	
КонецПроцедуры

&НаСервере
Процедура СтатьяОборотовПриИзмененииСервер(ИмяРеквизитаСтатьяОборотов)
	
	ПриИзмененииСтатьиОборотов(Объект, ИмяРеквизитаСтатьяОборотов);
	
КонецПроцедуры

&НаСервере
Процедура СтатьяОборотовПриИзмененииВСтрокеСервер(ИмяТаблицы, ИДСтроки, ИмяРеквизитаСтатьяОборотов)
	
	ТекущиеДанные = Объект[ИмяТаблицы].НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииСтатьиОборотов(ТекущиеДанные, ИмяРеквизитаСтатьяОборотов);
	
	Если ИмяТаблицы = "ГрафикПлатежей" Тогда
		ЗаполнитьВидПлатежаПоСтатьеОборотов(ТекущиеДанные);
	КонецЕсли;
	
	ОФормитьТаблицу(ИмяТаблицы, ТекущиеДанные[ИмяРеквизитаСтатьяОборотов]);
	
КонецПроцедуры

&НаСервере
Процедура ГрафикВыдачиТраншейДатаТраншаПриИзмененииСервер(ИДСтроки)
	
	ТекущиеДанные = Объект.ГрафикВыдачиТраншей.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.МесяцПервогоПлатежа = ДобавитьМесяц(ТекущиеДанные.ДатаТранша, 1);
	
	ПериодичностьПланирования = Перечисления.бит_ПериодичностьПланирования.Месяц;
	
	ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа = бит_РаботаСДиалогамиСервер.СформироватьПредставлениеПериода(ТекущиеДанные.МесяцПервогоПлатежа, ПериодичностьПланирования);
	
	РассчитатьКоличествоПериодовВыплат(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ГрафикВыдачиТраншейДатаПогашенияПриИзмененииСервер(ИДСтроки)
	
	ТекущиеДанные = Объект.ГрафикВыдачиТраншей.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьКоличествоПериодовВыплат(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

// +СБ. Кузнецова С. 2014-11-24 
&НаКлиенте
Процедура ГрафикВыдачиТраншейМесяцПервогоПлатежаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикВыдачиТраншей.ТекущиеДанные;
	
	ПериодичностьПланирования = ПредопределенноеЗначение("Перечисление.бит_ПериодичностьПланирования.Месяц");
	
	ТекущиеДанные.ПредставлениеМесяцаПервогоПлатежа = бит_РаботаСДиалогамиСервер.СформироватьПредставлениеПериода(ТекущиеДанные.МесяцПервогоПлатежа, ПериодичностьПланирования);
	
КонецПроцедуры
// -СБ. Кузнецова С.

// rarus olegkr {
// процедура создания заявки на договор
&НаКлиенте
Процедура рс_СоздатьЗаявкуНаДоговор(Команда)
	
	Если НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(Неопределено, "Вводить заявки можно только на основании проведенного документа!");
		Возврат;
	КонецЕсли;
	
	рс_СоздатьЗаявкуНаДоговорНаСервере();
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура рс_СоздатьЗаявкуНаДоговорНаСервере()
	// Rarus-spb byse 2012.12.20 {
	мСсылка = Новый Структура;
	Для Каждого мРекв Из Объект.Ссылка.Метаданные().Реквизиты Цикл
		мСсылка.Вставить(мРекв.Имя,Объект[мРекв.Имя]);	
	КонецЦикла;	
	мСсылка.Вставить("Ссылка",Объект.Ссылка);
	// Rarus-spb byse 2012.12.20 }
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выполнять", Истина);
	
	НайденныеСтроки = Объект.ГрафикНачислений.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл 
		
		НовыйДокумент = Документы.рс_ЗаявкаНаДоговор.СоздатьДокумент();
		// Rarus-spb byse 2012.12.20 {
		мСтрокиТЧ = Новый Массив;
		мСтрока  = Новый Структура;
		Для Каждого мРекв Из Объект.Ссылка.Метаданные().ТабличныеЧасти.ГрафикНачислений.Реквизиты Цикл
			мСтрока.Вставить(мРекв.Имя,СтрокаТЧ[мРекв.Имя]);
		КонецЦикла;
		мСтрокиТЧ.Добавить(мСтрока);
		мСсылка.Вставить("НомерЗаявки",СтрокаТЧ.Аналитика_1);
		//Документы.рс_ЗаявкаНаДоговор.ЗаполнениеПоОснованию(НовыйДокумент, Ссылка, СтрокаТЧ);
		Документы.рс_ЗаявкаНаДоговор.ЗаполнениеПоОснованию(НовыйДокумент, мСсылка, мСтрокиТЧ);
		// Rarus-spb byse 2012.12.20 }
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		СтрокаТЧ.ДокументПланирования = НовыйДокумент.Ссылка;
		СтрокаТЧ.Выполнять = Ложь;
		
	КонецЦикла;
		
	УправлениеЭлементамиФормы();
	
КонецПроцедуры
// rarus olegkr }

// Rarus-spb byse {

// Запускаем обработку распределения по периодам
//
&НаКлиенте
Процедура рс_РаспределитьГрафикНачислений(Команда)
	
	//Если Модифицированность Тогда
	//	
	//	ТекстВопроса = НСтр("ru='Документ изменен. 
	//	|Для продолжения его необходимо записать.
	//	|Записать?'");
	//	ПоказатьВопрос(Новый ОписаниеОповещения("рс_РаспределитьГрафикНачисленийВопросЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//    Возврат;

	//КонецЕсли;
	
	рс_РаспределитьГрафикНачисленийФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура рс_РаспределитьГрафикНачисленийВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаписьВыполнена = ЗаписатьПровестиДокумент();
    КонецЕсли;
    
    Если НЕ ЗаписьВыполнена Тогда
        Возврат;
    КонецЕсли;
    
    рс_РаспределитьГрафикНачисленийФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура рс_РаспределитьГрафикНачисленийФрагмент()
    
    ЗначенияЗаполнения = Новый Структура("ИмяТЧ, ИмяКолонкиСуммы, СтруктураНаименованийКолонок");
    
    ЗначенияЗаполнения.ИмяТЧ = "ГрафикНачислений";
    
    //ОК Калинин М. 130513
    //Обработка.ИмяКолонкиСуммы = "СуммаБезНДС";
    ЗначенияЗаполнения.ИмяКолонкиСуммы = "Сумма";
    //ОК Калинин М. 
    
    СтруктураНаименований = Новый Структура;
    Для Каждого Колонка Из Элементы.ГрафикНачислений.ПодчиненныеЭлементы Цикл
        СтруктураНаименований.Вставить(Колонка.Имя,Колонка.Заголовок);
    КонецЦикла;	       
    
    ЗначенияЗаполнения.СтруктураНаименованийКолонок = СтруктураНаименований;
    
    АдресТЗ = ПоместитьГрафикНачислений();
    
    ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, АдресТЗ, КомпенсироватьПогрешностьОкругления", ЗначенияЗаполнения, АдресТЗ, Ложь);
    ОткрытьФорму("Обработка.рс_Распределить.Форма", ПараметрыФормы,,,,, Новый ОписаниеОповещения("рс_РаспределитьГрафикНачисленийЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура рс_РаспределитьГрафикНачисленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	АдресРезультат = Результат;
    
    рс_РаспределитьГрафикНачисленийНаСервере(АдресРезультат);
    
    //ОК Калинин М. 130513
    ГрафикНачисленийПриОкончанииРедактирования(неопределено,неопределено,неопределено);
    //ОК Калинин М.

КонецПроцедуры

&НаСервере
Процедура рс_РаспределитьГрафикНачисленийНаСервере(АдресРезультат)
	
	СтруктураРезультат = ПолучитьИзВременногоХранилища(АдресРезультат);
	
	бит_БК_ЗагрузитьРезультатыРаспределить(СтруктураРезультат.ВозвращаемоеЗначение, "ГрафикНачислений");
	
	//ОК Калинин М. 130513 пересчет в процедуре бит_БК_ЗагрузитьРезультатыРаспределить и только соответсвующим выбраным в форме обработки
	//чтобы не перезатирать скорректированые раннее в связи с погрешностями округления
	//Для Каждого СтрокаТЧ Из ГрафикНачислений Цикл           		
	//	РассчитатьСуммуНДС(СтрокаТЧ,"СуммаБезНДС" , , Ложь);			
	//КонецЦикла;	
	//ОК Калинин М. 
	
	//ОК Калинин М. 130513 скорректируем результат согласно исходной таблице за счет погрешности в последней строке набора (из полученой таблицы) соотвествующему каждой строке исходной таблице.	
	ГрафикНачисленийБыло=СтруктураРезультат.РаспределяемаяТаблица;
	если типзнч(ГрафикНачисленийБыло)=тип("ТаблицаЗначений") тогда
	для каждого строкабыло_ из  ГрафикНачисленийБыло 
	цикл
		номерпоследнеполученойстроки_=строкабыло_.ПолученныеСтроки.Количество();
		//номерСтрокиПринимаемойПогрешность=кратностьТаблиц_*ГрафикНачисленийБыло.Индекс(строкабыло_);//текущаястрока * кратность
		таблСПогрешностью=СтруктураРезультат.РаспределяемаяТаблица.СкопироватьКолонки();//СерединаТаблицы(ГрафикНачислений.Выгрузить(),строкабыло_.ПолученныеСтрокиНомера[0],строкабыло_.ПолученныеСтрокиНомера[номерпоследнеполученойстроки_-1]);
		для каждого стр_ из строкабыло_.ПолученныеСтроки
		цикл
			ЗаполнитьЗначенияСвойств(таблСПогрешностью.Добавить(),СтруктураРезультат.ВозвращаемоеЗначение[стр_].СтрокаПолучаемойТаблицы);
		КонецЦикла;
		
		ПеренестиПогрешностьВСтроку(СтруктураРезультат.ВозвращаемоеЗначение[строкабыло_.ПолученныеСтроки[номерпоследнеполученойстроки_-1]].СтрокаПолучаемойТаблицы,новый структура("СуммаБезНДС,НДС,Сумма"),строкабыло_,таблСПогрешностью);		
	КонецЦикла;	
	конецесли;  
	//ОК Калинин М. 
	
	//мСтрокиКУдалению = Новый Массив;
	//
	//Для Каждого мСтрока Из мВыбранныеСтрокиГрафикаНачислений Цикл
	//	Попытка
	//		мНомер = мСтрока.НомерСтроки;
	//	Исключение
	//		мСтрокиКУдалению.Добавить(мСтрока);
	//	КонецПопытки;		
	//КонецЦикла;	
	//
	//Для Каждого мСтрокаКУдалению из мСтрокиКУдалению Цикл
	//	мВыбранныеСтрокиГрафикаНачислений.Удалить(мВыбранныеСтрокиГрафикаНачислений.Найти(мСтрокаКУдалению));
	//КонецЦикла;	
	
КонецПроцедуры

// Rarus-spb byse {
// Требуется для распределения по периодам
Процедура бит_БК_ЗагрузитьРезультатыРаспределить(Таблица, ИмяТЧ) Экспорт
	ТЧ = Объект[ИмяТЧ];	
	Если Таблица.Количество() = 0 тогда
		Возврат;
	КонецЕсли;		
	ТЧ.Очистить();
	Для Каждого ТекСтрока Из Таблица Цикл
		НовСтрока = ТЧ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтрока);  
		//ОК Калинин М. 270513
		ТекСтрока.СтрокаПолучаемойТаблицы=НовСтрока;
		//ОК Калинин М.
		
		//ОК Калинин М. 130513
		//НовСтрока.СуммаБезНДС = ТекСтрока.РаспределеннаяСумма;
		Если  ТекСтрока.Выполнять тогда 
			НовСтрока.Сумма = ТекСтрока.РаспределеннаяСумма;
			РассчитатьСуммуНДС(НовСтрока,"Сумма" , , Истина);
		КонецЕсли;
		//ОК Калинин М. 
	КонецЦикла;
	//
	//Если ИмяТЧ = "УправленческаяАналитика" Тогда 
	//	ПересчитатьСуммыУправленческаяАналитика("СуммаБезНДС");
	//ИначеЕсли ИмяТЧ = "КонтрольБюджета" Тогда 
	//	ПересчитатьСуммыКонтрольБюджета("СуммаБезНДС");
	//КонецЕсли;
	//ЗаполнитьПредставлениеПериодаРегистрацииВТЧ();
КонецПроцедуры
// Rarus-spb byse }

&НаСервере
Функция ПоместитьГрафикНачислений()
	Возврат ПоместитьВоВременноеХранилище(Объект.ГрафикНачислений.Выгрузить(), УникальныйИдентификатор);
КонецФункции

// Процедура создает документы "Заявка на договор" по периодам 
//
&НаКлиенте
Процедура рс_СоздатьПоПериодам (Команда)
	Если НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(Неопределено, "Вводить заявки можно только на основании проведенного документа!");
		Возврат;
	КонецЕсли;
	
	// Выбор варианта группировки 
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить("Месяц"  , "По месяцам");
	СписокОтветов.Добавить("Квартал", "По кварталам");
	СписокОтветов.Добавить("Год"    , "За год" );
	СписокОтветов.Добавить("Период" , "За весь период");
	СписокОтветов.Добавить("Отмена" , "Отмена");
	ПоказатьВопрос(Новый ОписаниеОповещения("рс_СоздатьПоПериодамЗавершение", ЭтотОбъект), "Выберите настройку группировки строк документа по периодам:",СписокОтветов);
	
КонецПроцедуры

&НаКлиенте
Процедура рс_СоздатьПоПериодамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;	
    
    Если Ответ = "Отмена" Тогда
        Возврат;
    КонецЕсли;	
    
    рс_СоздатьПоПериодамНаСервере(Ответ);
    
    Записать();

КонецПроцедуры

&НаСервере
Процедура рс_СоздатьПоПериодамНаСервере(Ответ)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выполнять", Истина);
	
	ВыбСтроки = Объект.ГрафикНачислений.Выгрузить(СтруктураОтбора);
	
	ВыбСтроки.Колонки.Добавить("ПериодГруппировка", Новый ОписаниеТипов("Дата"));
	Для Каждого СтрокаТЧ Из ВыбСтроки Цикл
		Если Ответ = "Месяц" Тогда
			СтрокаТЧ.ПериодГруппировка = НачалоМесяца(СтрокаТЧ.Период);
		ИначеЕсли Ответ = "Квартал" Тогда	
			СтрокаТЧ.ПериодГруппировка = НачалоКвартала(СтрокаТЧ.Период);
		ИначеЕсли Ответ = "Год" Тогда		
			СтрокаТЧ.ПериодГруппировка = НачалоГода(СтрокаТЧ.Период);
		ИначеЕсли Ответ = "Период" Тогда
			СтрокаТЧ.ПериодГруппировка = '00010101';
		КонецЕсли;	
	КонецЦикла;	
	// Выбор варианта группировки	
	
	// Переименуем колонки
	ВыбСтроки.Колонки.Аналитика_1.Имя              = "НомерЗаявки";
	ВыбСтроки.Колонки.Аналитика_2.Имя              = "Объект";
	ВыбСтроки.Колонки.Аналитика_3.Имя              = "ВариантБюджета";
	ВыбСтроки.Колонки.ЦФО.Имя                      = "ФункцияЦФО";
	ВыбСтроки.Колонки.СтатьяОборотовНачисления.Имя = "СтатьяОборотов";
	
	КлючиУникальности = ВыбСтроки.Скопировать();
	КлючиУникальности.Колонки.Удалить("НомерСтроки");
	
	// Те реквизиты, что есть в ТЧ "База" документа "рс_ЗаявкаНаДоговор" 
	// могут быть неуникальными, остальные должны быть уникальными в пределах 1 документа
	Мета    = Документы.рс_ЗаявкаНаДоговор.ПустаяСсылка().Метаданные().ТабличныеЧасти.База.Реквизиты;
	МетаДок = Документы.рс_ЗаявкаНаДоговор.ПустаяСсылка().Метаданные().Реквизиты;
	
	СтрокаСвернуть  = "";
	СтруктураПоиска = Новый Структура;
	
	Для Каждого Колонка Из ВыбСтроки.Колонки Цикл
		Если Мета.Найти(Колонка.Имя) <> Неопределено И Колонка.Имя <> "ПериодГруппировка" Тогда
			КлючиУникальности.Колонки.Удалить(КлючиУникальности.Колонки[Колонка.Имя]);
		// Если нет такого реквизита в документе, то и нам он незачем	
		ИначеЕсли МетаДок.Найти(Колонка.Имя) = Неопределено И Колонка.Имя <> "НомерСтроки" И Колонка.Имя <> "ПериодГруппировка" Тогда
			КлючиУникальности.Колонки.Удалить(КлючиУникальности.Колонки[Колонка.Имя]);
		// Все остальные колонки будем сворачивать	
		ИначеЕсли Колонка.Имя <> "НомерСтроки" Тогда
			СтрокаСвернуть = СтрокаСвернуть + ?(ПустаяСтрока(СтрокаСвернуть),"",",") + Колонка.Имя;
			СтруктураПоиска.Вставить(Колонка.Имя);
		КонецЕсли;	
	КонецЦикла;
	
	// Получим все уникальные комбинации Периодов, ставок НДС, заявок и прочей шушеры.
	КлючиУникальности.Свернуть(СтрокаСвернуть);
	
	// Теперь собственно можно создавать документы
	мСсылка = Новый Структура;
	Для Каждого мРекв Из Объект.Ссылка.Метаданные().Реквизиты Цикл
		мСсылка.Вставить(мРекв.Имя,Объект[мРекв.Имя]);	
	КонецЦикла;	
	мСсылка.Вставить("Ссылка",Объект.Ссылка);    
	
	
	Для Каждого СтрокаКлюч Из КлючиУникальности Цикл
		НовыйДокумент = Документы.рс_ЗаявкаНаДоговор.СоздатьДокумент();

		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаКлюч);
		
		// То, что вошло в ключ уникальности - в реквизиты документа
		Для Каждого Эл Из СтруктураПоиска Цикл
			мСсылка.Вставить(Эл.Ключ,Эл.Значение);
		КонецЦикла;	
		
		мСтрокиТЧ     = Новый Массив;
		ИскомыеСтроки = ВыбСтроки.НайтиСтроки(СтруктураПоиска);
		Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл
			мСтрока = Новый Структура;
			Для Каждого мРекв Из Мета Цикл
				мСтрока.Вставить(мРекв.Имя,ИскомаяСтрока[мРекв.Имя]);
			КонецЦикла;
			мСтрокиТЧ.Добавить(мСтрока);
		КонецЦикла;	
		
		Документы.рс_ЗаявкаНаДоговор.ЗаполнениеПоОснованию(НовыйДокумент, мСсылка, мСтрокиТЧ);
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
		// Установим созданный документ в ТЧ "График начислений"
		Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл
			СтрокаТЧ                      = Объект.ГрафикНачислений[ИскомаяСтрока.НомерСтроки - 1];
			СтрокаТЧ.ДокументПланирования = НовыйДокумент.Ссылка;
			СтрокаТЧ.Выполнять			  = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

//ОК Калинин М. 160413
&НаСервере
Процедура ПересчетИтоговыхСуммГрафикаНачислений(фПриОкончанииРедактирования = Ложь)
	
	ДоговорПрочее = Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	
	Если ДоговорПрочее ИЛИ Объект.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
		Отбор = Новый Структура("РасходДоход", Перечисления.бит_РасходДоход.Расходование);
		ТаблицаСумм	   = Объект.ГрафикНачислений.Выгрузить(Отбор,"Сумма, НДС");
    	Объект.СуммаРасходНачисления    = ТаблицаСумм.Итог("Сумма");
		Объект.СуммаНДСРасходНачисления = ТаблицаСумм.Итог("НДС");
 	КонецЕсли;
	Если ДоговорПрочее ИЛИ Объект.РасходДоход = Перечисления.бит_РасходДоход.Поступление Тогда
		Отбор = Новый Структура("РасходДоход", Перечисления.бит_РасходДоход.Поступление);
		ТаблицаСумм	   = Объект.ГрафикНачислений.Выгрузить(Отбор,"Сумма, НДС");
		Объект.СуммаПриходНачисления    = ТаблицаСумм.Итог("Сумма");
		Объект.СуммаНДСПриходНачисления = ТаблицаСумм.Итог("НДС");
 	КонецЕсли;
	
	Если фПриОкончанииРедактирования Тогда 
		// Пометим даты попадающие на выходной
		ПометитьПлатежиПопадающиеНаВыходной("ГрафикНачислений");
	КонецЕсли;
	
КонецПроцедуры	 

&НаСервере
Процедура ПеренестиПогрешностьВСтроку(строка,поля,строкабыло_,ПолученнаяТаб)
	для каждого стр из поля
	цикл
		погрешщность=строкабыло_[стр.ключ]-ПолученнаяТаб.итог(стр.ключ);
		строка[стр.ключ]=строка[стр.ключ]+погрешщность;
	КонецЦикла;
КонецПроцедуры	

&НаСервере
Функция СерединаТаблицы(таб,номерС,номерПо)
	Если номерПо>таб.Количество() тогда		
		возврат неопределено;
	КонецЕсли;	
	рез=таб.СкопироватьКолонки();
	для  сч=номерС по номерПо
	цикл      		
		ЗаполнитьЗначенияСвойств(рез.Добавить(),таб[сч]); 
	КонецЦикла;
	возврат рез;
КонецФункции	
//ОК Калинин М.

//БИТ Тртилек 05112013 по ОК Калинин М. 250613
&НаКлиенте
Процедура КонтекстноеМенюЗаполнитьКолонку(Команда)
	табличноеПоле=этаформа.ТекущийЭлемент;
	
	КолонкаИмя = СтрЗаменить(табличноеПоле.ТекущийЭлемент.Имя, табличноеПоле.Имя, "");
	ТекущееЗначение = табличноеПоле.ТекущиеДанные[КолонкаИмя];
	Для Каждого ТекСтрока Из Объект[табличноеПоле.Имя] Цикл
		ТекСтрока[КолонкаИмя] = ТекущееЗначение;
		//+Сундукова 31.03.2016 чтобы при заполнении Ставки НДС перезаполнялась так же и сумма
		Если КолонкаИмя= 	"СтавкаНДС" тогда
			РассчитатьСуммуНДС(ТекСтрока);
		//СофтЛаб Начало 2019-07-06 #3375
		ИначеЕсли КолонкаИмя = "Сумма" Тогда
			РассчитатьСуммуНДС(ТекСтрока);
		ИначеЕсли КолонкаИмя = "НДС" тогда
			ТекСтрока.Сумма = ТекСтрока.СуммаБезНДС + ТекСтрока.НДС;
		ИначеЕсли КолонкаИмя = "СуммаБезНДС" тогда
			РассчитатьСуммуНДС(ТекСтрока, "СуммаБезНДС", , Ложь);
		//СофтЛаб Конец 2019-07-06 #3375
		КонецЕсли;
		//-Сундукова
	КонецЦикла;
	
	//Если табличноеПоле.Данные="КонтрольБюджета" и КолонкаИмя = "СуммаБезНДС" Тогда
	//	КонтрольБюджетаСуммаБезНДСПриИзменении(неопределено);
	//ИначеЕсли табличноеПоле.Данные="УправленческаяАналитика" и КолонкаИмя = "СуммаБезНДС" Тогда
	//	//УправленческаАналитикаСуммаБезНДСПриИзменении(неопределено);		
	//КонецЕсли;
	КонецПроцедуры

//bit avseenkov ++ 02.03.2015
&НаКлиенте
Процедура ИнициаторПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		фЕстьЗаявки = ИнициаторПриИзмененииНаСервере(Объект.Ссылка);
		Если фЕстьЗаявки Тогда 
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ИнициаторПриИзмененииВопросЗавершение", ЭтотОбъект), НСтр("ru = 'Имеется созданные заявки на договор, изменить инициатора в созданных заявках за период';"
			), Режим, 0);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПриИзмененииВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    ПеременнаяТипаСтандартныйПериод = Новый СтандартныйПериод;
    Диалог = Новый ДиалогРедактированияСтандартногоПериода();
    Диалог.Период = ПеременнаяТипаСтандартныйПериод;
    Диалог.Показать(Новый ОписаниеОповещения("ИнициаторПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("Диалог, ПеременнаяТипаСтандартныйПериод", Диалог, ПеременнаяТипаСтандартныйПериод)));

КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПриИзмененииЗавершение(Период, ДополнительныеПараметры) Экспорт
    
    Диалог = ДополнительныеПараметры.Диалог;
    ПеременнаяТипаСтандартныйПериод = ДополнительныеПараметры.ПеременнаяТипаСтандартныйПериод;
	
    Если Период <> Неопределено Тогда 
        ПеременнаяТипаСтандартныйПериод = Диалог.Период;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ПеременнаяТипаСтандартныйПериод.ДатаОкончания)  Тогда 
        ДатаОкончания = Дата(3000,1,1);
    Иначе 
        ДатаОкончания =  КонецДня(ПеременнаяТипаСтандартныйПериод.ДатаОкончания);
    КонецЕсли;
    
    ИнициаторПриИзмененииНаСервере(Объект.Ссылка, Ложь, Объект.Инициатор, ПеременнаяТипаСтандартныйПериод.ДатаНачала, ДатаОкончания);
    
    Записать();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициаторПриИзмененииНаСервере(ссылка, фПроверка = Истина, Инициатор = "", ДатаНачала = "", ДатаОкончания = "")
	Если Ссылка.Инициатор <> Инициатор  Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	рс_ЗаявкаНаДоговор.Ссылка
		|ИЗ
		|	Документ.рс_ЗаявкаНаДоговор КАК рс_ЗаявкаНаДоговор
		|ГДЕ
		|	рс_ЗаявкаНаДоговор.ДокументОснование = &ссылка";
		
		Запрос.УстановитьПараметр("ссылка", ссылка);
		
		Если фПроверка Тогда 
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда 
				Возврат Истина;
			КонецЕсли;
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|	И рс_ЗаявкаНаДоговор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
			
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);

			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Док = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
				Док.Инициатор = Инициатор;
				Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ОбновитьГрафикНачислений()
	
	Для каждого Строка Из Объект.ГрафикНачислений Цикл
	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-16 (#3162)		
		//Если Не Строка.ДокументПланирования.Пустая() Тогда
		//Заменено на:
		Если ЗначениеЗаполнено(Строка.ДокументПланирования) Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-16 (#3162)
		
			Если Строка.ДокументПланирования.ПометкаУдаления Тогда
			
				Строка.ДокументПланирования = Документы.рс_ЗаявкаНаДоговор.ПустаяСсылка();
				
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЦикла; 
	    
КонецПроцедуры // ОбновитьГрафикНачислений()

&НаКлиенте
Процедура ГрафикНачисленийПослеУдаления(Элемент)
	//ОК Калинин М. 160413
 	ПересчетИтоговыхСуммГрафикаНачислений();
	//ОК Калинин М.
КонецПроцедуры

#КонецОбласти