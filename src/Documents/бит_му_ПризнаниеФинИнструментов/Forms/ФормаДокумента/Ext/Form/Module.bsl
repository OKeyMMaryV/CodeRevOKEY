
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем виды операций для группы подменю.
	Для каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов[ИмяЗначенияПеречисления];
		
		ИмяКнопки = ИмяЗначенияПеречисления;
		
		ИмяКоманды = "Команда_" + ИмяКнопки;
		
		// Добавляем новую команду обработки выбора вида операции.
		КомандаУстановитьОперацию = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
		КомандаУстановитьОперацию.Действие = "ДействияФормыДействиеУстановитьОперацию";
		
		КнопкаГруппыПодменю = ЭтотОбъект.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭтотОбъект.Элементы.ПодменюВидаОперации);
		КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
		КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
			
	КонецЦикла;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	// Кешируем количество субконто
	КоличествоСубконтоМУ = 4;
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"КорСчет"
												   ,"КорСубконто"
												   ,КоличествоСубконтоМУ
												   ,"Распределение"
												   ,"Элементы.Распределение.ТекущиеДанные");	 
	 
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
    Для каждого СтрокаТаблицы Из Объект.Распределение Цикл	
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.КорСчет);
		СтрокаТаблицы.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;
	КонецЦикла; 											   
	
	УсловноеОформление.Элементы.Очистить();

	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"Распределение"
	                                                           ,"КорСубконто"
															   ,"КоличествоДоступныхСубконто"
															   ,КоличествоСубконтоМУ);
															   
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетДоходов", "СубконтоДоходов", КоличествоСубконтоМУ);
	 
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, КоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");
															   
															   
    // Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();	
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Способ = ДокОбъект.ОпределитьСпособПолученияНоминальнойСтавки();
	РассчитыватьНоминальнуюСтавку = ?(Способ=Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.Расчет,Истина,Ложь);	
	
	бит_РаботаСДиалогамиСервер.УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы);
	
	УстановитьПараметрыВыбораДляСчетов();
	
	// Установка параметров выбора для Договоров.
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДоговорКонтрагента, "Объект.Контрагент");
	
	Если ЭтоКредиторскаяИлиДебиторскаяЗадолженность(Объект.ВидОперации, фКэшЗначений) Тогда		
		Если Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ИзменениеДоговораСервер(Объект.ДоговорКонтрагента, Объект.Контрагент, Ложь);
			ЗаполнитьРаспределениеСервер(); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Изменение кода. Начало. 11.03.2015{{
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда

			Объект.ВидОперации = Неопределено;
			СформироватьДеревоВидовОпераций();
			
			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
				
			Иначе 
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", ДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			КонецЕсли;	
				
		Иначе
			
			ПриОткрытииПромежуточная(Отказ);
			ПриОткрытииОкончание();
			
		КонецЕсли;
						
	Иначе
		
		ПриОткрытииОкончание();
		
	КонецЕсли;
	// Изменение кода. Конец. 11.03.2015}}
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ПризнаниеФинИнструментов";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация, , Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "СтавкаЭСП".
// 
&НаКлиенте
Процедура СтавкаЭСППриИзменении(Элемент)
	
	РассчитатьСправедливуюНоминальнуюСтоимость();
	
	// Надпись "Задана вручную"
	Объект.ЗаданаВручнуюСтавкаЭсп = Истина;
	Элементы.НадписьЗаданаВручнуюЭсп.Видимость = Объект.ЗаданаВручнуюСтавкаЭсп;
	
	ЗапроситьОбновлениеДанных();
	
КонецПроцедуры // СтавкаЭСППриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СтавкаНоминальная".
// 
&НаКлиенте
Процедура СтавкаНоминальнаяПриИзменении(Элемент)
	
	// Надпись "Задана вручную"
	Объект.ЗаданаВручнуюСтавкаНом = Истина;
	Элементы.НадписьЗаданаВручнуюНом.Видимость = Объект.ЗаданаВручнуюСтавкаНом;
	
КонецПроцедуры // СтавкаНоминальнаяПриИзменении()

&НаКлиенте
Процедура СправедливаяСтоимостьПриИзменении(Элемент)
	
	ЗапроситьОбновлениеДанных();
	
КонецПроцедуры // СправедливаяСтоимостьПриИзменении()

&НаКлиенте
Процедура НоминальнаяСуммаОбязательстваПриИзменении(Элемент)
	
	ЗапроситьОбновлениеДанных();
	
КонецПроцедуры // НоминальнаяСуммаОбязательстваПриИзменении()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
// 
&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)

	// Сохраним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации; 
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, 	"_");
	ИмяПодменю      = Лев(ИмяКнопки, 	Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки, 	Позиция + 1);
	
	Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов[ИмяВидаОперации];
	
	// Если операция не поменялась, то выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
		
	// Определим список доступных видов и типов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
																
	ОбработатьИзменениеВидаОперацииСервер();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	флТекДоговор = Объект.ДоговорКонтрагента;
	
	ИзменениеКонтрагентаСервер();   	
	
	// Если ЭтоКредиторскаяИлиДебиторскаяЗадолженность(Объект.ВидОперации, фКэшЗначений) Тогда.
	Если флТекДоговор <> Объект.ДоговорКонтрагента Тогда
		ИзменениеДоговораКонтрагента();
	Иначе
		УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ИзменениеДоговораКонтрагента();	
	
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораДоговораКлиент(Элемент, Объект.ДоговорКонтрагента, Объект.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидКредитаЗайма".
// 
&НаКлиенте
Процедура ВидКредитаЗаймаПриИзменении(Элемент)
	
   УправлениеЭлементамиФормыСервер();	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СпособОтраженияДисконта".
// 
&НаКлиенте
Процедура СпособОтраженияДисконтаПриИзменении(Элемент)
	
	УправлениеЭлементамиФормыСервер();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетДоходов".
// 
&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	
	ИзменениеСчетДоходов();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоДоходов_<i>".
// 
&НаКлиенте
Процедура СубконтоДоходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконтоДоходов(Объект, ЗначениеСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоДоходов_<i>".
// 
&НаКлиенте
Процедура СубконтоДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконтоДоходов(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто);
   
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоДоходов"
													 , ЗначениеСубконто
													 , КоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // СубконтоДоходовАвтоПодбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределение

&НаКлиенте
Процедура РаспределениеКоэффициентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Сумма = (Объект.НоминальнаяСуммаОбязательства - Объект.СправедливаяСтоимость) * ТекущиеДанные.Коэффициент;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаВыполнитьРасчетСтавок(Команда)
	
	ТекстСообщения = НСтр("ru = 'Данные формы будут обновлены. Продолжить?'");
	ОповещениеВопрос = Новый ОписаниеОповещения("ВопросКомандаВыполнитьРасчетСтавок", ЭтотОбъект, Команда);
	
	ПоказатьВопрос(ОповещениеВопрос, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
			
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ – Строка.
// 
&НаКлиенте
Процедура ВопросКомандаВыполнитьРасчетСтавок(Ответ, Команда) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
	
		РассчитатьЗначенияСтавок();	
		
		Объект.ЗаданаВручнуюСтавкаНом = Ложь;
		Объект.ЗаданаВручнуюСтавкаЭсп = Ложь;
		
		// Надписи "Задана вручную"
		Элементы.НадписьЗаданаВручнуюЭсп.Видимость = Объект.ЗаданаВручнуюСтавкаЭсп;
		Элементы.НадписьЗаданаВручнуюНом.Видимость = Объект.ЗаданаВручнуюСтавкаНом;
		
		КомандаОбновитьРаспределение(Команда);

	КонецЕсли;

КонецПроцедуры // ВопросКомандаВыполнитьРасчетСтавок()

&НаКлиенте
Процедура КомандаОбновитьРаспределение(Команда)
	
	Если Объект.Распределение.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Табличная часть «Распределение» будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросКомандаОбновитьРаспределение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстСообщения, РежимДиалогаВопрос.ДаНет ,15 ,КодВозвратаДиалога.Нет);
				
	Иначе
		
		ЗаполнитьРаспределениеСервер();

	КонецЕсли;

КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ – Строка.
// 
&НаКлиенте
Процедура ВопросКомандаОбновитьРаспределение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Распределение.Очистить();

		ЗаполнитьРаспределениеСервер();

	КонецЕсли;

КонецПроцедуры // ВопросКомандаОбновитьРаспределение()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	// Адаптация для ERP. Начало. 18.03.2014{{
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов"				  ,	бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()]));
	// Адаптация для ERP. Конец. 18.03.2014}}
	КэшПеречисления.Вставить("бит_му_ВидыКредитовЗаймов"				  ,	бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыКредитовЗаймов));
	КэшПеречисления.Вставить("бит_му_ВидыОперацийПризнаниеФинИнструментов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	// Типы договоров
	фКэшЗначений.Вставить("ТипДоговораЗаймыПолученные"	, Справочники.бит_ТипыДоговоров.ЗаймыПолученные);
	фКэшЗначений.Вставить("ТипДоговораКредитыПолученные", Справочники.бит_ТипыДоговоров.КредитыПолученные);
	фКэшЗначений.Вставить("ТипДоговораЗаймыВыданные"	, Справочники.бит_ТипыДоговоров.ЗаймыВыданные);
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура обрабатывает изменение вида операции.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ОбработатьИзменениеВидаОперацииСервер()

	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов; 	
	СтруктураОпераций = Документы.бит_му_ПризнаниеФинИнструментов.СформироватьСтуктуруВидовОпераций(Объект.ВидОперации);
	
	// Скроем/отобразим реквизиты в зависимости от вида операции.
	Если СтруктураОпераций.ЭтоДебиторскаяЗадолженность ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		Объект.ВидКредитаЗайма 	= Неопределено;
	КонецЕсли;
	
	// Очистим табличную часть "Распределение", если необходимо.
	ВидыДоговоровКонтрагентов = фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов;
	
	Если СтруктураОпераций.ЭтоДебиторскаяЗадолженность И (Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПокупателем) Тогда
	ИначеЕсли СтруктураОпераций.ЭтоКредиторскаяЗадолженность И (Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПоставщиком) Тогда
	Иначе
		Если Объект.Распределение.Количество() > 0 Тогда
			Объект.Распределение.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьСоответствиеДоговораИВидаОперации();
	
	// Изменение кода. Начало. 04.02.2014{{
	ПерезаполнятьБезусловно = Истина;
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.УстановитьСчетаРасчетов(ПерезаполнятьБезусловно);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	// Изменение кода. Конец. 04.02.2014}}
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	Модифицированность = Истина;

КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер() 

// Формирует список видов операций для выбора вида операции перед созданием документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура СформироватьДеревоВидовОпераций()

	ЭлементыДерева = ДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = ЭлементыДерева.Добавить();
	СтрокаНовая.ВидОперации = НСтр("ru = 'Доступные виды операций'");
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекСтр Из фКэшЗначений.Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов Цикл
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекСтр.Значение;
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

// Процедура получает и записывает валюту международного учета в кэш значений.
// 
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Способ = ДокументОбъект.ОпределитьСпособПолученияНоминальнойСтавки();
	РассчитыватьНоминальнуюСтавку = ?(Способ=Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.Расчет,Истина,Ложь);		
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	бит_БухгалтерияСервер.ПроверитьСоответствиеОрганизации(Объект, "СубконтоДоходов", КоличествоСубконтоМУ, НСтр("ru = 'В документе'"));	 
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// Процедура обрабатывает изменение контрагента. 
// 
&НаСервере
Процедура ИзменениеКонтрагентаСервер()

	СтруктураДополнительныхПараметров = Новый Структура;
	
	Если СписокТиповДоговоров.Количество() >0 Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗначениеОтбора", 		СписокТиповДоговоров);
		СтруктураОтбора.Вставить("ВидСравненияОтбора",	ВидСравнения.ВСписке);
		
		СтруктураДополнительныхПараметров.Вставить("бит_ТипДоговора", СтруктураОтбора);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента
														  ,Объект.Контрагент
														  ,Объект.Организация
														  ,СписокВидовДоговоров
														  ,СтруктураДополнительныхПараметров);
	
	
КонецПроцедуры // ИзменениеКонтрагентаСервер()

// Процедура обрабатывает изменение договора. Сервер.
// 
// Параметры:
//  Договор				- СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 	ИзмениласьВалюта - Булево.
// 
&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец, ИзмениласьВалюта = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ИзменениеДоговораСервер(Договор, Контрагент_Владелец, ИзмениласьВалюта);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	УправлениеЭлементамиФормыСервер();	
	
КонецПроцедуры // ИзменениеДоговораСервер()

// Процедура рассчитывает значения ставок.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура РассчитатьЗначенияСтавок()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.УстановитьСчетаРасчетов();
	
	ДокументОбъект.РассчитатьЗначенияСтавок();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	УправлениеЭлементамиФормыСервер();
	
КонецПроцедуры // РассчитатьЗначенияСтавок() 

// Процедура заполняет табличную часть "Распределение".
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьРаспределениеСервер()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_Дополнительный_2Обороты.КорСчет,
	               |	бит_Дополнительный_2Обороты.КорСубконто1,
	               |	бит_Дополнительный_2Обороты.КорСубконто2,
	               |	бит_Дополнительный_2Обороты.КорСубконто3,
	               |	бит_Дополнительный_2Обороты.КорСубконто4,
	               |	СУММА(ВЫБОР
	               |			КОГДА &Сторона = ""Дт""
	               |				ТОГДА бит_Дополнительный_2Обороты.СуммаРеглОборотДт * &Коэффициент
	               |			КОГДА &Сторона = ""Кт""
	               |				ТОГДА бит_Дополнительный_2Обороты.СуммаРеглОборотКт * &Коэффициент
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаОборот
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
	               |			,
	               |			&ДатаКон,
	               |			,
	               |			Счет = &Счет,
	               |			&МассивСубконто,
	               |			Организация = &Организация
	               |				И Субконто1 = &Контрагент
	               |				И Субконто2 = &ДоговорКонтрагента,
	               |			(НЕ КорСчет В ИЕРАРХИИ (&СчетаИсключения)),
	               |			) КАК бит_Дополнительный_2Обороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_Дополнительный_2Обороты.КорСубконто1,
	               |	бит_Дополнительный_2Обороты.КорСубконто2,
	               |	бит_Дополнительный_2Обороты.КорСубконто3,
	               |	бит_Дополнительный_2Обороты.КорСубконто4,
	               |	бит_Дополнительный_2Обороты.КорСчет
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ВЫБОР
	               |			КОГДА &Сторона = ""Дт""
	               |				ТОГДА бит_Дополнительный_2Обороты.СуммаРеглОборотДт * &Коэффициент
	               |			КОГДА &Сторона = ""Кт""
	               |				ТОГДА бит_Дополнительный_2Обороты.СуммаРеглОборотКт * &Коэффициент
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) <> 0";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДатаКон",			Объект.Дата);
	Запрос.УстановитьПараметр("Счет",				Объект.СчетКраткосрочныхОбязательств);
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",			Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Коэффициент",		ПолучитьКоэффициентВалют(Объект));
	Запрос.УстановитьПараметр("СчетаИсключения",	Объект.СчетаИсключения.Выгрузить().ВыгрузитьКолонку("Счет"));
	
	// Параметр - массив субконто
	ВидыСубконто = ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ВидыСубконто.Контрагенты);
	МассивСубконто.Добавить(ВидыСубконто.ДоговорыКонтрагентов);
	
	Запрос.УстановитьПараметр("МассивСубконто", 	МассивСубконто);
	
	// Параметр - возвращать обороты по дебету или по кредиту.
	ВидыДоговоровКонтрагентов = фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов;
	ВидыОпераций			  = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов;

	Если (Объект.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность) И (Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПокупателем) Тогда
		Запрос.УстановитьПараметр("Сторона", "Дт");
	ИначеЕсли (Объект.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность) И (Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПоставщиком) Тогда
		Запрос.УстановитьПараметр("Сторона", "Кт");
	Иначе
		Запрос.УстановитьПараметр("Сторона", "");
	КонецЕсли;
	
	Объект.Распределение.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ВычислитьСуммыРаспределения();
	
	// Обновим оформление субконто
    Для каждого ТекСтр Из Объект.Распределение Цикл
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекСтр.КорСчет);
		ТекСтр.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРаспределениеСервер()

// Процедура вычисляет суммы в табличной части "Распределение".
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ВычислитьСуммыРаспределения()

	Распределение = Объект.Распределение.Выгрузить();

	МассивОборотов = Распределение.ВыгрузитьКолонку("СуммаОборот");
	
	МассивКоэффициентов = бит_ОбщегоНазначения.РаспределитьПропорционально(1, МассивОборотов);
	Если МассивКоэффициентов <> Неопределено Тогда
		Распределение.ЗагрузитьКолонку(МассивКоэффициентов, "Коэффициент");
	Иначе
		Распределение.Колонки.Удалить("Коэффициент");
	КонецЕсли;
	
	МассивСумм = бит_ОбщегоНазначения.РаспределитьПропорционально(Объект.НоминальнаяСуммаОбязательства - Объект.СправедливаяСтоимость, МассивОборотов);
	Если МассивСумм <> Неопределено Тогда
		Распределение.ЗагрузитьКолонку(МассивСумм, "Сумма");
	Иначе
		Распределение.Колонки.Удалить("Сумма");
	КонецЕсли;
	
	Объект.Распределение.Загрузить(Распределение);

КонецПроцедуры // ВычислитьСуммыРаспределения() 

// Функция возвращает коэффициент пересчета сумм из валюты регламентированного учета в валюту документа.
// 
&НаСервере 
Функция ПолучитьКоэффициентВалют(Документ)
	
	ВидыКурсов			= Новый Структура("Упр,Регл,МУ,Документ");
	ДокументОбъект 		= РеквизитФормыВЗначение("Объект");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ДокументОбъект, ДокументОбъект.Дата, ВидыКурсов);
	
	КурсыРегл  	= СтруктураКурсыВалют.Регл;
	КурсыДок 	= СтруктураКурсыВалют.Документ;

	Коэффициент = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(1, КурсыРегл.Валюта, 		КурсыДок.Валюта,
																	 КурсыРегл.Курс, 		КурсыДок.Курс,
																	 КурсыРегл.Кратность, 	КурсыДок.Кратность);
																	 
	Возврат Коэффициент;
	
КонецФункции

&НаСервере
Процедура РассчитатьСправедливуюНоминальнуюСтоимость(СтруктураКурсыВалют = Неопределено,РассчитыватьНоминальную = Истина)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.РассчитатьСправедливуюНоминальнуюСтоимость(СтруктураКурсыВалют, РассчитыватьНоминальную);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры // РассчитатьСправедливуюСтоимость()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

// Процедура обрабатывает изменение счета "СчетДоходов".
// 
&НаСервере
Процедура ИзменениеСчетДоходов()

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, КоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоДоходов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");

КонецПроцедуры // ИзменениеСчетДоходов()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов – Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.СчетДолгосрочныхОбязательств);
	МассивЭлементов.Добавить(Элементы.СчетКраткосрочныхОбязательств);
	МассивЭлементов.Добавить(Элементы.СчетДолгосрочныхАктивов);
	МассивЭлементов.Добавить(Элементы.СчетКраткосрочныхАктивов);
	МассивЭлементов.Добавить(Элементы.СчетДолгосрочныхПроцентов);
	МассивЭлементов.Добавить(Элементы.СчетКраткосрочныхПроцентов);
	МассивЭлементов.Добавить(Элементы.СчетРаспределяемыхПлатежей);
	МассивЭлементов.Добавить(Элементы.СчетРезерва);
	МассивЭлементов.Добавить(Элементы.СчетДоходов);
	МассивЭлементов.Добавить(Элементы.СчетаИсключенияСчет);
	МассивЭлементов.Добавить(Элементы.РаспределениеКорСчет);

	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура устанавливает отборы для договора контрагента.
// 
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если СписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(СписокВидовДоговоров.ВыгрузитьЗначения()));
		КонецЕсли;
	    Если СписокТиповДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("бит_ТипДоговора", СписокТиповДоговоров);
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);

	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура формирует список доступных видов договоров.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
	ВидыОпераций				= фКэшЗначений.Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов;
	ВидыДоговоровКонтрагентов 	= фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов;
	
	СписокВидовДоговоров.Очистить();
												   
	Если Объект.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомитентом);
		
        Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда			
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(СписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомиссионеромНаЗакупку");
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(СписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");				
			СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);		
		КонецЕсли;
		
		СписокТиповДоговоров.Очистить();
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
		
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
		СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомитентом);
		
        Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда			
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(СписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомиссионеромНаЗакупку");
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(СписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");				
			СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);		
		КонецЕсли;
		
		СписокТиповДоговоров.Очистить();
		
	ИначеЕсли (Объект.ВидОперации = ВидыОпераций.ПризнаниеКредитовЗаймовПолученных) ИЛИ (Объект.ВидОперации = ВидыОпераций.ВводНачальныхОстатковКредитыЗаймыПолученные) Тогда
		
		Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда			
			СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);		
		КонецЕсли;
		
		СписокТиповДоговоров.Очистить();
		СписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораЗаймыПолученные);
		СписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораКредитыПолученные);
		
	ИначеЕсли (Объект.ВидОперации = ВидыОпераций.ПризнаниеЗаймовВыданных) ИЛИ (Объект.ВидОперации = ВидыОпераций.ВводНачальныхОстатковЗаймыВыданные) Тогда
		
		Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда			
			СписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);		
		КонецЕсли; 
	    		
		СписокТиповДоговоров.Очистить();
		СписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораЗаймыВыданные);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура проверяет соответствует ли текущий договор контрагента выбранному виду операции.
// 
// Параметры:
// 	нет
// 
&НаСервере
Процедура ПроверитьСоответствиеДоговораИВидаОперации()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйВидДоговора = СписокВидовДоговоров.НайтиПоЗначению(Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()]);
	НайденныйТипДоговора = СписокТиповДоговоров.НайтиПоЗначению(Объект.ДоговорКонтрагента.бит_ТипДоговора);
	
	Если (НайденныйВидДоговора = Неопределено И СписокВидовДоговоров.Количество() > 0)
		ИЛИ (НайденныйТипДоговора = Неопределено И СписокТиповДоговоров.Количество() > 0) Тогда
		
		ТекстСообщения = НСтр("ru='Договор контрагента не соответствует текущему виду операции. Договор будет очищен.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "ДоговорКонтрагента");
		
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента
		И ((Объект.СправедливаяСтоимость <> 0) ИЛИ (Объект.НоминальнаяСуммаОбязательства <> 0)) Тогда
					  
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать сумму документа?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыКлиент", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли; 
		
КонецПроцедуры // ИзменениеВалютыКлиент()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ – Строка.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыКлиент(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		Объект.СправедливаяСтоимость = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СправедливаяСтоимость
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
		Объект.НоминальнаяСуммаОбязательства = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.НоминальнаяСуммаОбязательства
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
		ТаблицаОбъекта = Объект.Распределение;
		
		// Выполним пересчет сумм строк табличной части.
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			СтрокаТаблицы.СуммаОборот = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаОборот
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
			СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
		КонецЦикла;
																			 
	КонецЕсли;

	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");
		
КонецПроцедуры // ВопросИзменениеВалютыКлиент()

// Процедура - обрабатывает изменение поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ИзменениеДоговораКонтрагента()
	
	ИзмениласьВалюта 	   = Ложь;	
	ИзменениеДоговораСервер(Объект.ДоговорКонтрагента, Объект.Контрагент, ИзмениласьВалюта);
	
	Если ИзмениласьВалюта Тогда
		ИзменениеВалютыКлиент();
	КонецЕсли;
	
	// Изменение кода. Начало. 16.12.2013{{
	Если Объект.Распределение.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Табличная часть «Распределение» будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеДоговораКонтрагента", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьРаспределениеСервер();
	    		
		УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);
	
	КонецЕсли;
	// Изменение кода. Конец. 16.12.2013}}
	
КонецПроцедуры // ИзменениеДоговораКонтрагента()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ – Строка.
// 
&НаКлиенте
Процедура ВопросИзменениеДоговораКонтрагента(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
	
		Объект.Распределение.Очистить();

		ЗаполнитьРаспределениеСервер();
	    		
		УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);

	КонецЕсли;

КонецПроцедуры // ВопросИзменениеДоговораКонтрагента()

// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
// 
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	// Установим отбор для договора контрагента.
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
	
КонецПроцедуры // НачалоВыбораДоговораКлиент()

&НаКлиенте
Процедура ИзменениеСубконтоДоходов(Контейнер, ЗначениеСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "СубконтоДоходов", КоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "СубконтоДоходов", ЗначениеСубконто, КоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "СубконтоДоходов", "", КоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоСубконтоДоходов()

&НаКлиенте
Процедура НачалоВыбораСубконтоДоходов(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоДоходов"
																						  ,ЗначениеСубконто
																						  ,КоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконтоДоходов()

// Функция проверяет вид операции.
// 
// Параметры:
//  ТекВидОперации
//  
// Возвращаемое значение:
//   Булево
// 
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоКредиторскаяИлиДебиторскаяЗадолженность(ТекВидОперации, фКэшЗначений)

	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов;
	Результат = ТекВидОперации = ВидыОпераций.ДебиторскаяЗадолженность 
				Или ТекВидОперации = ВидыОпераций.КредиторскаяЗадолженность;

	Возврат Результат;
	
КонецФункции // ()

// Процедура спрашивает обновить данные или нет и обновляет, если нужно.
// 
&НаКлиенте
Процедура ЗапроситьОбновлениеДанных()

	Если ЭтоКредиторскаяИлиДебиторскаяЗадолженность(Объект.ВидОперации, фКэшЗначений) Тогда
	
		Если мКэшРеквизитовФормы.СправедливаяСтоимость = Объект.СправедливаяСтоимость 
			И мКэшРеквизитовФормы.НоминальнаяСуммаОбязательства = Объект.НоминальнаяСуммаОбязательства Тогда
			Возврат;
		КонецЕсли;
	
		Если Объект.Распределение.Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Табличная часть «Распределение» будет перезаполнена. Продолжить?'");
			ОбработчикВО = Новый ОписаниеОповещения("ЗапроситьОбновлениеДанных_Завершение", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикВО, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
				
		КонецЕсли;
		
		ДобавитьВКэш("СправедливаяСтоимость");
		ДобавитьВКэш("НоминальнаяСуммаОбязательства");
	
	КонецЕсли;
			
КонецПроцедуры // ЗапроситьОбновлениеДанных()

// Процедура спрашивает обновить данные или нет и обновляет, если нужно.
// 
&НаКлиенте
Процедура ЗапроситьОбновлениеДанных_Завершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРаспределениеСервер();	
			
	КонецЕсли;
	
КонецПроцедуры // ЗапроситьОбновлениеДанных_Завершение()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормыСервер()
	
	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов;
	
	СтруктураОпераций = Документы.бит_му_ПризнаниеФинИнструментов.СформироватьСтуктуруВидовОпераций(Объект.ВидОперации);
	
	// Скроем/отобразим реквизиты в зависимости от вида операции.
	Если СтруктураОпераций.ЭтоДебиторскаяЗадолженность ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		ВидимостьЭлементов = Ложь;
	Иначе
		ВидимостьЭлементов = Истина;
	КонецЕсли;
	
	Элементы.СтавкаНоминальная.Видимость 			= ВидимостьЭлементов;
	Элементы.ВидКредитаЗайма.Видимость 				= ВидимостьЭлементов;
	Элементы.СчетДолгосрочныхПроцентов.Видимость	= ВидимостьЭлементов;
	Элементы.СчетКраткосрочныхПроцентов.Видимость	= ВидимостьЭлементов;
	Элементы.СчетРаспределяемыхПлатежей.Видимость	= ВидимостьЭлементов;
	
	// Скроем/отобразим реквизиты счетов активов/обязательств.
	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные ИЛИ СтруктураОпераций.ЭтоДебиторскаяЗадолженность ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		ВидимостьОбязательств = Истина;
	Иначе
		ВидимостьОбязательств = Ложь;
	КонецЕсли;
	
	Элементы.СчетДолгосрочныхАктивов.Видимость	 		= НЕ ВидимостьОбязательств;
	Элементы.СчетКраткосрочныхАктивов.Видимость 		= НЕ ВидимостьОбязательств;
	Элементы.СчетДолгосрочныхОбязательств.Видимость 	= ВидимостьОбязательств;
	Элементы.СчетКраткосрочныхОбязательств.Видимость	= ВидимостьОбязательств;
	
	// Изменим заголовки сумм
	Элементы.СправедливаяСтоимость.Заголовок = НСтр("ru = 'Справедливая стоимость'");
	
	Если ВидимостьОбязательств Тогда
		Если СтруктураОпераций.ЭтоДебиторскаяЗадолженность ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
			Элементы.СправедливаяСтоимость.Заголовок			= НСтр("ru = 'Справедливая стоимость (долгосрочная)");
			Элементы.НоминальнаяСуммаОбязательства.Заголовок 	= НСтр("ru = 'Номинальная сумма обязательств (долгосрочная)");
		Иначе
			Элементы.НоминальнаяСуммаОбязательства.Заголовок 	= НСтр("ru = 'Номинальная сумма обязательств");
		КонецЕсли;
	Иначе
		Элементы.НоминальнаяСуммаОбязательства.Заголовок = НСтр("ru = 'Номинальная сумма активов");
	КонецЕсли;
	
	// Скроем/отобразим реквизиты для ввода начальных остатков.
	Если Объект.ВидОперации = ВидыОпераций.ВводНачальныхОстатковКредитыЗаймыПолученные Тогда
		ВводНачальныхОстатков 	= Истина;
	Иначе
		ВводНачальныхОстатков 	= Ложь;
	КонецЕсли;
	
	Элементы.НоминальнаяСуммаПроцентов.Видимость = ВводНачальныхОстатков;
	
	// Скроем/отобразим реквизит способ отражения расходов.
	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные Тогда
		ВидимостьСпособОтраженияРасходов = Истина;
	Иначе
		ВидимостьСпособОтраженияРасходов = Ложь;
	КонецЕсли;
	
	Элементы.СпособОтраженияРасходов.Видимость = ВидимостьСпособОтраженияРасходов;
	
	// Скроем/отобразим табличную часть "Распределение".
	ВидыДоговоровКонтрагентов = фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов;
	
	Если СтруктураОпераций.ЭтоДебиторскаяЗадолженность И (Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПокупателем) Тогда
		РаспределениеВидимость = Истина;
	ИначеЕсли СтруктураОпераций.ЭтоКредиторскаяЗадолженность И (Объект.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПоставщиком) Тогда
		РаспределениеВидимость = Истина;
	Иначе
		РаспределениеВидимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаРаспределение.Видимость 	= РаспределениеВидимость;
	Элементы.СчетРезерва.Видимость			= НЕ РаспределениеВидимость;
	
	// Надписи "Задана вручную"
	Элементы.НадписьЗаданаВручнуюЭсп.Видимость = Объект.ЗаданаВручнуюСтавкаЭсп;
	Элементы.НадписьЗаданаВручнуюНом.Видимость = Объект.ЗаданаВручнуюСтавкаНом;
	
	// Видимость параметров дисконта
	МодельДокумента = Новый Структура("ВидКредитаЗайма,СпособОтраженияДисконта", Объект.ВидКредитаЗайма, Объект.СпособОтраженияДисконта);
	ПараметрыУправления = Документы.бит_му_ПризнаниеФинИнструментов.ВычислитьПараметрыУправления(МодельДокумента, СтруктураОпераций);
	
	Элементы.СпособОтраженияДисконта.Видимость = ПараметрыУправления.ОтображатьСпособОтраженияДисконта;
	Элементы.ГруппаПараметрыДисконта.Видимость = ПараметрыУправления.ОтображатьПараметрыДисконта;
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);

КонецПроцедуры // УправлениеЭлементамиФормыСервер()

// Процедура окончание выбора вида операции.
// 
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если (ТипЗнч(СтруктураПараметров) = Тип("Структура")) И СтруктураПараметров.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = СтруктураПараметров.ВидОперации;																		   
	Иначе
		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов.ПризнаниеКредитовЗаймовПолученных;
	КонецЕсли;
	
	ОбработатьИзменениеВидаОперацииСервер();
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;

КонецПроцедуры // ПриОткрытииПромежуточная()

// Процедура выполняет окончательные операции по открытию формы. 
// 
&НаКлиенте
Процедура ПриОткрытииОкончание()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	мКэшРеквизитовФормы.Вставить("СправедливаяСтоимость");
	мКэшРеквизитовФормы.Вставить("НоминальнаяСуммаОбязательства");
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Определим список доступных видов и типов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();
	
	Если Параметры.Ключ.Пустая() Тогда
		ПроверитьСоответствиеДоговораИВидаОперации();	 
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);

КонецПроцедуры // ПриОткрытииОкончание()


#КонецОбласти

#КонецОбласти
