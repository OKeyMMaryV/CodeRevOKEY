#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
// 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору") Тогда
		
		Организация 		= ДанныеЗаполнения.Организация;
		Контрагент 			= ДанныеЗаполнения.Контрагент;
		ДоговорКонтрагента 	= ДанныеЗаполнения.ДоговорКонтрагента;
		
		Если ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
			ИЛИ ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные Тогда
			
			ВидОперации = Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов.ПризнаниеКредитовЗаймовПолученных;
		ИначеЕсли ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные Тогда
			
			ВидОперации = Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов.ПризнаниеЗаймовВыданных;
		КонецЕсли;
		
		ИзменениеДоговораСервер(ДоговорКонтрагента, Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании".
// 
Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Запишем сумму документа.
	СуммаДокумента = СправедливаяСтоимость;
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("СпособРасчетаЭСП", ОпределитьСпособРасчетаЭСП()); 		
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ,Взаиморасчеты");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения".
// 
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СтруктураОпераций   = Документы.бит_му_ПризнаниеФинИнструментов.СформироватьСтуктуруВидовОпераций(ВидОперации);
	ПараметрыУправления = Документы.бит_му_ПризнаниеФинИнструментов.ВычислитьПараметрыУправления(ЭтотОбъект, СтруктураОпераций);

	Если СтруктураОпераций.ЭтоЗаймыВыданные ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетДолгосрочныхОбязательств"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетКраткосрочныхОбязательств"));
	КонецЕсли;
	
	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные ИЛИ СтруктураОпераций.ЭтоДебиторскаяЗадолженность ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетДолгосрочныхАктивов"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетКраткосрочныхАктивов"));
	КонецЕсли;
	
	Если СтруктураОпераций.ЭтоДебиторскаяЗадолженность ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетДолгосрочныхПроцентов"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетКраткосрочныхПроцентов"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетРаспределяемыхПлатежей"));
	КонецЕсли;
	
	ВидыДоговоровКонтрагентов = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()];
	
	Если СтруктураОпераций.ЭтоДебиторскаяЗадолженность И (ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПокупателем) Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетРезерва"));
	ИначеЕсли СтруктураОпераций.ЭтоКредиторскаяЗадолженность И (ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПоставщиком) Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетРезерва"));
	КонецЕсли;
	
	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные Тогда
		ПроверяемыеРеквизиты.Добавить("ВидКредитаЗайма");
	КонецЕсли;
	
	Если ПараметрыУправления.ОтображатьСпособОтраженияДисконта Тогда
		ПроверяемыеРеквизиты.Добавить("СпособОтраженияДисконта");
	КонецЕсли; 
	
	Если ПараметрыУправления.ОтображатьПараметрыДисконта Тогда
		ПроверяемыеРеквизиты.Добавить("СчетДоходов");
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Получает способ расчета ЭСП в зависимости от вида операции и организации.
// 
// Возвращаемое значение:
//  СпособРасчетаЭСП – ПеречислениеСсылка.бит_му_СпособыРасчетаЭСП.
// 
Функция ОпределитьСпособРасчетаЭСП() Экспорт
	
	СтруктураОпераций = Документы.бит_му_ПризнаниеФинИнструментов.СформироватьСтуктуруВидовОпераций(ВидОперации);
	
	ВидНастройкиСпособаРасчетаЭСП = "Общая";
	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные Тогда
		
		ВидНастройкиСпособаРасчетаЭСП = "КредитыЗаймы";
		
	КонецЕсли;
	
	СпособРасчетаЭСП = бит_му_ОбщегоНазначения.ПолучитьСпособРасчетаЭСП(Организация, ,ВидНастройкиСпособаРасчетаЭСП);	

	Возврат СпособРасчетаЭСП;
	
КонецФункции // ОпределитьСпособРасчетаЭСП()

// Извлекает значение настройки "СпособПолученияНоминальнойСтавки" из учетной политики.
// 
// Возвращаемое значение:
//  Способ – ПеречислениеСсылка.бит_му_СпособыПолученияНоминальнойСтавки.
// 
Функция ОпределитьСпособПолученияНоминальнойСтавки() Экспорт
	
	Способ = бит_му_ОбщегоНазначения.СпособПолученияНоминальнойСтавки(Организация);;
	
	Возврат Способ;
	
КонецФункции // ОпределитьСпособРасчетаНоминальнойСтавки()

// Процедура обрабатывает изменение договора. Сервер.
// 
// Параметры:
//  Договор				- СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 	ИзмениласьВалюта - Булево.
// 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец, ИзмениласьВалюта = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Договор.Организация;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);
		Контрагент = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор); 
	КонецЕсли;
	
	Если ВалютаДокумента <> Договор.ВалютаВзаиморасчетов Тогда
		ИзмениласьВалюта 		= Истина;
		
		ВалютаДокумента = бит_КурсыВалют.ПолучитьВалютуДоговораКонтрагента(Договор);
		
		ИзменениеВалютыМодуль();							
									  
	КонецЕсли;
	
	ПерезаполнятьБезусловно = Истина;
	УстановитьСчетаРасчетов(ПерезаполнятьБезусловно);
	
	РассчитатьЗначенияСтавок();	
	
КонецПроцедуры // ИзменениеДоговораСервер()

// Процедура устанавливает счета расчетов значениями из регистра.
// 
// Параметры:
// 	нет
// 
Процедура УстановитьСчетаРасчетов(ПерезаполнятьБезусловно=Ложь) Экспорт
	
	СтруктураСчетов = бит_му_ОбщегоНазначения.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	// Изменение кода. Начало. 04.02.2014{{
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов;
	
	Если ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		
		Если НЕ ЗначениеЗаполнено(СчетДолгосрочныхОбязательств) И НЕ ПерезаполнятьБезусловно Тогда
			СчетДолгосрочныхОбязательств  = СтруктураСчетов.СчетДолгосрочныхОбязательств;
		ИначеЕсли ПерезаполнятьБезусловно Тогда
			СчетДолгосрочныхОбязательств  = СтруктураСчетов.СчетДолгосрочныхОбязательств;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетКраткосрочныхОбязательств) И НЕ ПерезаполнятьБезусловно Тогда
			СчетКраткосрочныхОбязательств = СтруктураСчетов.СчетКраткосрочныхОбязательств;
		ИначеЕсли ПерезаполнятьБезусловно Тогда
	        СчетКраткосрочныхОбязательств = СтруктураСчетов.СчетКраткосрочныхОбязательств;
		КонецЕсли;	

	ИначеЕсли ВидОперации = ВидыОпераций.ВводНачальныхОстатковЗаймыВыданные ИЛИ ВидОперации = ВидыОпераций.ПризнаниеЗаймовВыданных Тогда
		
		Если НЕ ЗначениеЗаполнено(СчетДолгосрочныхАктивов) И НЕ ПерезаполнятьБезусловно Тогда
			СчетДолгосрочныхАктивов  = СтруктураСчетов.СчетДолгосрочныхОбязательств;
		ИначеЕсли ПерезаполнятьБезусловно Тогда
 	        СчетДолгосрочныхАктивов  = СтруктураСчетов.СчетДолгосрочныхОбязательств;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетКраткосрочныхАктивов) И НЕ ПерезаполнятьБезусловно Тогда
			СчетКраткосрочныхАктивов = СтруктураСчетов.СчетКраткосрочныхОбязательств;
		ИначеЕсли ПерезаполнятьБезусловно Тогда
	        СчетКраткосрочныхАктивов = СтруктураСчетов.СчетКраткосрочныхОбязательств;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации = ВидыОпераций.КредиторскаяЗадолженность 
			ИЛИ ВидОперации = ВидыОпераций.ВводНачальныхОстатковКредитыЗаймыПолученные
			ИЛИ ВидОперации = ВидыОпераций.ПризнаниеКредитовЗаймовПолученных Тогда
			
		Если НЕ ЗначениеЗаполнено(СчетДолгосрочныхОбязательств) И НЕ ПерезаполнятьБезусловно Тогда	
			СчетДолгосрочныхОбязательств = СтруктураСчетов.СчетКредиторскойЗадолженностиДолгосрочной;
		ИначеЕсли ПерезаполнятьБезусловно Тогда
			СчетДолгосрочныхОбязательств = СтруктураСчетов.СчетКредиторскойЗадолженностиДолгосрочной;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетКраткосрочныхОбязательств) И НЕ ПерезаполнятьБезусловно Тогда
			СчетКраткосрочныхОбязательств = СтруктураСчетов.СчетКредиторскойЗадолженностиКраткосрочной;
		ИначеЕсли ПерезаполнятьБезусловно Тогда
			СчетКраткосрочныхОбязательств = СтруктураСчетов.СчетКредиторскойЗадолженностиКраткосрочной;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетДолгосрочныхПроцентов) И НЕ ПерезаполнятьБезусловно Тогда
		СчетДолгосрочныхПроцентов = СтруктураСчетов.СчетДолгосрочныхПроцентов;
	ИначеЕсли ПерезаполнятьБезусловно Тогда
		СчетДолгосрочныхПроцентов = СтруктураСчетов.СчетДолгосрочныхПроцентов;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетКраткосрочныхПроцентов) И НЕ ПерезаполнятьБезусловно Тогда
		СчетКраткосрочныхПроцентов = СтруктураСчетов.СчетКраткосрочныхПроцентов;
	ИначеЕсли ПерезаполнятьБезусловно Тогда
		СчетКраткосрочныхПроцентов = СтруктураСчетов.СчетКраткосрочныхПроцентов;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетРаспределяемыхПлатежей) И НЕ ПерезаполнятьБезусловно Тогда
		СчетРаспределяемыхПлатежей = СтруктураСчетов.СчетРаспределяемыхПлатежей;
	ИначеЕсли ПерезаполнятьБезусловно Тогда
		СчетРаспределяемыхПлатежей = СтруктураСчетов.СчетРаспределяемыхПлатежей;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетРезерва) И НЕ ПерезаполнятьБезусловно Тогда
		СчетРезерва	= СтруктураСчетов.СчетРезерва;
	ИначеЕсли ПерезаполнятьБезусловно Тогда
		СчетРезерва	= СтруктураСчетов.СчетРезерва;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СпособОтраженияРасходов) И НЕ ПерезаполнятьБезусловно Тогда
		СпособОтраженияРасходов = СтруктураСчетов.СпособОтраженияРасходовПоАмортизации;
	ИначеЕсли ПерезаполнятьБезусловно Тогда
		СпособОтраженияРасходов = СтруктураСчетов.СпособОтраженияРасходовПоАмортизации;
	КонецЕсли;
	// Изменение кода. Конец. 04.02.2014}}
	
КонецПроцедуры

// Процедура рассчитывает значения ставок.
// 
// Параметры:
//  Нет.
// 
Процедура РассчитатьЗначенияСтавок() Экспорт

	ВидыОпераций = Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов;
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов 			= Новый Структура("Упр,Регл,МУ,Документ,Взаиморасчеты");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, Дата, ВидыКурсов);
	
	Способ = ОпределитьСпособПолученияНоминальнойСтавки();
	флРассчитыватьНоминальнуюСтавку = ?(Способ=Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.Расчет,Истина,Ложь);
	
	// Рыночная ставка
	ЧислоДней = (ДоговорКонтрагента.бит_ОкончаниеПлановое - ДоговорКонтрагента.бит_НачалоПлановое)/24/60/60;
	СтавкаЭСП = бит_му_ФинИнструменты.ПолучитьРыночнуюСтавку(Дата, ЧислоДней,ВалютаДокумента);
	
	Если ВидОперации <> ВидыОпераций.ДебиторскаяЗадолженность Тогда
		
		// НоминальнаяСтавка
		Если флРассчитыватьНоминальнуюСтавку Тогда
			СтавкаНоминальная = РасчитатьСтавку(НоминальнаяСуммаОбязательства);
		Иначе	
			ДанныеПоНоминальнойСтавке = бит_му_ФинИнструменты.ПолучитьДанныеПоНоминальнойСтавке(Дата, ДоговорКонтрагента);	
			СтавкаНоминальная = ДанныеПоНоминальнойСтавке.Ставка;
		КонецЕсли; 
		
		// Отклонение ставок
		ОтклонениеСтавок = 0;
		Если СтавкаЭСП <> 0 Тогда
			ОтклонениеСтавок = (СтавкаЭСП - СтавкаНоминальная) / СтавкаЭСП * 100;
		КонецЕсли;
		
		Если ОтклонениеСтавок < 0 Тогда
			ОтклонениеСтавок = - ОтклонениеСтавок;
		КонецЕсли;
		
		// Вид кредита или займа
		Если ОтклонениеСтавок <= 10 Тогда
			ВидКредитаЗайма = Перечисления.бит_му_ВидыКредитовЗаймов.Рыночный;
		Иначе
			ВидКредитаЗайма = Перечисления.бит_му_ВидыКредитовЗаймов.Нерыночный;
		КонецЕсли;
		
	КонецЕсли;

	РассчитатьСправедливуюНоминальнуюСтоимость(СтруктураКурсыВалют,НЕ флРассчитыватьНоминальнуюСтавку);
	
КонецПроцедуры // РассчитатьЗначенияСтавок() 

// Процедура рассчитывает справедливую стоимость согласно эффективной процентной ставке.
// 
// Параметры:
//  СтруктураКурсыВалют     - Структура.
//  РассчитыватьНоминальную - Булево.
// 
Процедура РассчитатьСправедливуюНоминальнуюСтоимость(СтруктураКурсыВалют = Неопределено,РассчитыватьНоминальную = Истина) Экспорт

	ВидыОпераций = Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов;	
	
	СтруктураОпераций = Документы.бит_му_ПризнаниеФинИнструментов.СформироватьСтуктуруВидовОпераций(ВидОперации);	
	
	Если СтруктураКурсыВалют = Неопределено Тогда
		
		// Получим курсы валют, неоходимые для выполнения пересчетов.
		ВидыКурсов 			= Новый Структура("Документ,Взаиморасчеты");
		СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, Дата, ВидыКурсов);
		
	КонецЕсли; 

    // Справедливая стоимость
	НачалоДолгосрочнойЧасти = Неопределено;
	Если ВидОперации = ВидыОпераций.ПризнаниеКредитовЗаймовПолученных Тогда
	    ДатаНачала = бит_му_ОбщегоНазначения.ОпределитьНачалоГрафика(ДоговорКонтрагента,Дата);		
	ИначеЕсли СтруктураОпераций.ЭтоДебиторскаяЗадолженность ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		ДатаНачала = Неопределено;
	    ДатаНачала = бит_му_ОбщегоНазначения.ОпределитьНачалоГрафика(ДоговорКонтрагента,Дата);		
	    СледМесяц  = НачалоМесяца(КонецМесяца(Дата)+1);		
		НачалоДолгосрочнойЧасти = ДобавитьМесяц(СледМесяц,12);
	Иначе
	    ДатаНачала = бит_му_ОбщегоНазначения.ОпределитьНачалоГрафика(ДоговорКонтрагента,Дата);
	КонецЕсли;
	
	СпособРасчетаЭСП = ОпределитьСпособРасчетаЭСП();
	
	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		
		// Расчет по дням
		СтрПар = Новый Структура;
		СтрПар.Вставить("РежимКорректировки");
		СтрПар.Вставить("Периодичность", "День");
		ДатаНачалаПоДням = КонецДня(ДобавитьМесяц(ДатаНачала, 12))+1;		
		ТаблицаПлатежи = бит_му_ОбщегоНазначения.ПолучитьТаблицуПлатежей(ДоговорКонтрагента, ДоговорКонтрагента, ДатаНачалаПоДням, Ложь, СтрПар);

		ПараметрыФункции = Новый Массив;
		
		Для каждого СтрокаТаблицы Из ТаблицаПлатежи Цикл
			
			Коэф    = СтрокаТаблицы.СуммаПлатежаВзаиморасчеты;
			Степень = (НачалоДня(СтрокаТаблицы.ДатаПлатежа)-НачалоДня(ДатаНачала))/(86400*365);
			
			ПарамСлагаемого = бит_му_ОбщегоНазначения.ПараметрыСтепеннойФункции(Коэф, Степень);
			ПараметрыФункции.Добавить(ПарамСлагаемого);
			
		КонецЦикла; 
		
		Аргумент = (1/(1 + СтавкаЭСП/100));
		
		СправедливаяСтоимость = бит_му_ОбщегоНазначения.СтепеннаяФункция(ПараметрыФункции, Аргумент);
		
		МассивПлатежей = ТаблицаПлатежи.ВыгрузитьКолонку("СуммаПлатежаРегл");
		
	Иначе
		
		// Расчет по месяцам
		СтрПар = Новый Структура;
		СтрПар.Вставить("Взаиморасчеты");
		СтрПар.Вставить("РежимКорректировки");
		Если ЗначениеЗаполнено(НачалоДолгосрочнойЧасти) Тогда
			
			СтрПар.Вставить("НачалоДолгосрочнойЧасти",НачалоДолгосрочнойЧасти);
					
		КонецЕсли; 
		
		МассивПлатежей = бит_му_ОбщегоНазначения.СформироватьМассивПлатежей(ДоговорКонтрагента
		                                                                     ,ДоговорКонтрагента
																			 ,ДатаНачала
																			 ,Истина
																			 ,СтрПар);
																			 
		Аргумент       = (1/(1 + СтавкаЭСП/(100*12)));
		СправедливаяСтоимость 		 = бит_му_ОбщегоНазначения.АлгебраическаяФункция(МассивПлатежей, Аргумент);
	
	КонецЕсли; 
	
	СправедливаяСтоимость = бит_КурсыВалют.ПересчитатьВалютаДокумента(СправедливаяСтоимость,"Взаиморасчеты",СтруктураКурсыВалют);
	
	Если РассчитыватьНоминальную Тогда
		
		// Номинальная сумма обязательства или актива.
		Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные  Тогда
			
			НоминальнаяСуммаОбязательства = ПолучитьСуммуОстатка(СчетДолгосрочныхОбязательств);
			НоминальнаяСуммаОбязательства = бит_КурсыВалют.ПересчитатьВалютаДокумента(НоминальнаяСуммаОбязательства, "Регл", СтруктураКурсыВалют);				
			
		ИначеЕсли СтруктураОпераций.ЭтоЗаймыВыданные Тогда
			
			НоминальнаяСуммаОбязательства = ПолучитьСуммуОстатка(СчетДолгосрочныхАктивов);
			НоминальнаяСуммаОбязательства = бит_КурсыВалют.ПересчитатьВалютаДокумента(НоминальнаяСуммаОбязательства, "Регл", СтруктураКурсыВалют);		
			
		ИначеЕсли СтруктураОпераций.ЭтоДебиторскаяЗадолженность ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		 	
		 	НоминальнаяСуммаОбязательства = бит_ОбщегоНазначенияКлиентСервер.ИтогПоМассиву(МассивПлатежей);
		 	НоминальнаяСуммаОбязательства = бит_КурсыВалют.ПересчитатьВалютаДокумента(НоминальнаяСуммаОбязательства
											 , "Взаиморасчеты", СтруктураКурсыВалют);
			
		ИначеЕсли (ВидОперации = ВидыОпераций.ВводНачальныхОстатковКредитыЗаймыПолученные) 
			ИЛИ (ВидОперации = ВидыОпераций.ВводНачальныхОстатковЗаймыВыданные) Тогда
			
			// Номинальная сумма процентов	
			НоминальнаяСуммаПроцентов = ПолучитьСуммуОстатка(СчетКраткосрочныхПроцентов);
			НоминальнаяСуммаПроцентов = бит_КурсыВалют.ПересчитатьВалютаДокумента(НоминальнаяСуммаПроцентов,"Регл", СтруктураКурсыВалют);
			
		Иначе
			
			НоминальнаяСуммаОбязательства = ПолучитьСуммуОстатка(СчетДолгосрочныхОбязательств);
			НоминальнаяСуммаОбязательства = бит_КурсыВалют.ПересчитатьВалютаДокумента(НоминальнаяСуммаОбязательства, "Регл", СтруктураКурсыВалют);		
			
		КонецЕсли;
			
	КонецЕсли; 
	
КонецПроцедуры // РассчитатьСправедливуюСтоимость()

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЧасть.НомерСтроки,
	               |	ТабЧасть.КорСчет,
	               |	ТабЧасть.КорСубконто1,
	               |	ТабЧасть.КорСубконто2,
	               |	ТабЧасть.КорСубконто3,
	               |	ТабЧасть.КорСубконто4,
	               |	ТабЧасть.СуммаОборот,
	               |	ТабЧасть.Коэффициент,
	               |	ТабЧасть.Сумма
	               |ИЗ
	               |	Документ.бит_му_ПризнаниеФинИнструментов.Распределение КАК ТабЧасть
	               |ГДЕ
	               |	ТабЧасть.Ссылка = &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоРаспределение = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Распределение", ТаблицаПоРаспределение);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возращает сумму остатка на указанном счете.
// 
// Параметры:
// 	Счет - ПланСчетовСсылка.бит_Дополнительный_2.
// 
// Возвращаемое значение:
//  Результат – Число.
// 
Функция ПолучитьСуммуОстатка(Счет)

	Результат = 0;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЕСТЬNULL(бит_Дополнительный_2Остатки.СуммаРеглОстаток, 0) КАК СуммаРеглОстаток,
	               |	ЕСТЬNULL(бит_Дополнительный_2Остатки.СуммаРеглОстатокДт, 0) КАК СуммаРеглОстатокДт,
	               |	ЕСТЬNULL(бит_Дополнительный_2Остатки.СуммаРеглОстатокКт, 0) КАК СуммаРеглОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |			&Дата,
	               |			Счет = &Счет,
	               |			&МассивСубконто,
	               |			Организация = &Организация
	               |				И Субконто1 = &ДоговорКонтрагента) КАК бит_Дополнительный_2Остатки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ДоговорыКонтрагентов);
	
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("Счет", 				Счет);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("МассивСубконто",		МассивСубконто);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Счет.Вид = ВидСчета.Активный Тогда
			Результат = Выборка.СуммаРеглОстатокДт;
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			Результат = Выборка.СуммаРеглОстатокКт;
		Иначе
			Результат = Выборка.СуммаРеглОстаток;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ПолучитьСуммуОстатка()

// Процедура расчитывает эффективную ставку процента для указанной строки.
// 
Функция РасчитатьСтавку(Стоимость, Отказ = Ложь)

	СпособРасчетаЭСП = ОпределитьСпособРасчетаЭСП();
	
	МассивПлатежей = Новый Массив;
	ТаблицаПлатежи = Новый ТаблицаЗначений;
	
	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		
		// По дням
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Периодичность", "День");
		ТаблицаПлатежи = бит_му_ОбщегоНазначения.ПолучитьТаблицуПлатежей(ДоговорКонтрагента, ДоговорКонтрагента,, Ложь, СтруктураПараметров);
		
	Иначе	
		
		// По месяцам
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Взаиморасчеты");
		МассивПлатежей = бит_му_ОбщегоНазначения.СформироватьМассивПлатежей(ДоговорКонтрагента,ДоговорКонтрагента, Дата,Истина,СтруктураПараметров);
		
	КонецЕсли; 
		
	Если МассивПлатежей.Количество() > 0 ИЛИ ТаблицаПлатежи.Количество() > 0 Тогда
		
		Отказ = Ложь;
		
		Если Стоимость < 0 Тогда
			ТекстСообщения = Нстр("ru = 'При расчете ставки обнаружена нулевая стоимость.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Отказ = Истина;	
		КонецЕсли; 
						 
		Если Не Отказ Тогда
			
			СтрПар = Новый Структура;
			СтрПар.Вставить("СпособРасчета" , СпособРасчетаЭСП);
			СтрПар.Вставить("ТаблицаПлатежи", ТаблицаПлатежи);
			СтрПар.Вставить("МассивПлатежи" , МассивПлатежей);
			СтрПар.Вставить("Стоимость"     , Стоимость);
			СтрПар.Вставить("Точность"      , 0.000000000001); 
			СтрПар.Вставить("ПервыйПериод"  , Дата);
			
			РезСтавка = бит_му_ОбщегоНазначения.ВычислитьЭСП(СтрПар);
			
			Если РезСтавка < 0 Тогда
				
				ТекстСообщения =  НСтр("ru = 'Получена отрицательная процентная ставка! Проверьте дату документа и даты платежей документе ""Дополнительные условия по договору"", а также стоимости платежей.'");			   
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);							   
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения =  НСтр("ru = 'По договору не сформирован график платежей! График может быть заполнен в документе ""Дополнительные условия по договору"".'");			   
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);							   
		
		РезСтавка = 0;
		
	КонецЕсли;

	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоМесяцам Тогда
		РезСтавка = РезСтавка*12;
	КонецЕсли;
	
	Возврат РезСтавка;
	
КонецФункции // РасчитатьСтавку()

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
												
	Дата = КонецДня(ТекущаяДатаСеанса());
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
		СпособОтраженияДисконта = Перечисления.бит_му_СпособыОтраженияДисконта.НаСчетДоходов;
		
		ВидОперации = Неопределено;
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Процедура выполняет проверку данных документа.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок)
	
	// Нельзя признавать один и тот же фин. инструмент (договор) дважды.
	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_СобытияФинИнструментовСрезПоследних.Регистратор
	               |ИЗ
	               |	РегистрСведений.бит_му_СобытияФинИнструментов.СрезПоследних(
	               |			,
	               |			ДоговорКонтрагента = &ДоговорКонтрагента
	               |				И Организация = &Организация
	               |				И Событие = ЗНАЧЕНИЕ(Перечисление.бит_му_СобытияФинИнструментов.Признание)) КАК бит_му_СобытияФинИнструментовСрезПоследних";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		СтрокаСообщения = НСтр("ru = 'Проведение документа невозможно, существуют документы признания, проведенные по договору ""%1%"":'") + Символы.ПС; 
		
		Пока Выборка.Следующий() Цикл
			СтрокаСообщения = СтрокаСообщения + Выборка.Регистратор;
		КонецЦикла;
		
		СтрокаСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(СтрокаСообщения, СтруктураШапкиДокумента.ДоговорКонтрагента);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(СтрокаСообщения, , , Отказ);
		
	КонецЕсли;		
	
КонецПроцедуры // ПроверкаДанных()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	СформироватьДвижениеПоРегиструПараметров(СтруктураШапкиДокумента);
	
	ВидыДоговоровКонтрагентов = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()];
	ВидыОпераций 			  = Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов;
	
	Если (СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность) И (ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПокупателем) Тогда
		СформироватьПроводкуПоЭффектуОтсрочки(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Истина);
		
	ИначеЕсли (СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность) И (ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()] = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()].СПоставщиком) Тогда
		СформироватьПроводкуПоЭффектуОтсрочки(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Ложь);
		
	Иначе
		СформироватьПроводкуПоРезерву(СтруктураШапкиДокумента, СтруктураКурсыВалют);
	КонецЕсли;
	
	СформироватьПроводкуПоРеклассификации(СтруктураШапкиДокумента, СтруктураКурсыВалют);
	
	СформироватьДвиженияПоФинансовымНачислениям(СтруктураШапкиДокумента, СтруктураКурсыВалют);
	
	// Запишем событие
	НоваяЗапись = Движения.бит_му_СобытияФинИнструментов.Добавить();
	НоваяЗапись.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
	НоваяЗапись.Организация			= СтруктураШапкиДокумента.Организация;
	НоваяЗапись.Период				= СтруктураШапкиДокумента.Дата;
	НоваяЗапись.Событие				= Перечисления.бит_му_СобытияФинИнструментов.Признание;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение по регистру сведений "бит_му_ПараметрыФинИнструментов".
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
Процедура СформироватьДвижениеПоРегиструПараметров(СтруктураШапкиДокумента)
	
	СписокПараметров = Новый СписокЗначений;
	
	СтруктураОпераций = Документы.бит_му_ПризнаниеФинИнструментов.СформироватьСтуктуруВидовОпераций(ВидОперации);
	ПараметрыУправления = Документы.бит_му_ПризнаниеФинИнструментов.ВычислитьПараметрыУправления(ЭтотОбъект, СтруктураОпераций);

	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные ИЛИ СтруктураОпераций.ЭтоДебиторскаяЗадолженность ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		СписокПараметров.Добавить("СчетДолгосрочныхОбязательств");
		СписокПараметров.Добавить("СчетКраткосрочныхОбязательств");
	КонецЕсли;
	
	Если СтруктураОпераций.ЭтоЗаймыВыданные Тогда
		СписокПараметров.Добавить("СчетДолгосрочныхАктивов");
		СписокПараметров.Добавить("СчетКраткосрочныхАктивов");
	КонецЕсли;
	
	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные ИЛИ СтруктураОпераций.ЭтоЗаймыВыданные Тогда
		СписокПараметров.Добавить("СчетДолгосрочныхПроцентов");
		СписокПараметров.Добавить("СчетКраткосрочныхПроцентов");
		СписокПараметров.Добавить("ВидКредитаЗайма");
		СписокПараметров.Добавить("СпособОтраженияРасходов");
		СписокПараметров.Добавить("СчетРаспределяемыхПлатежей");
	КонецЕсли;
	
	Если ПараметрыУправления.ОтображатьСпособОтраженияДисконта Тогда
		 СписокПараметров.Добавить("СпособОтраженияДисконта");
	КонецЕсли; 
	
	СписокПараметров.Добавить("СчетРезерва");
	СписокПараметров.Добавить("СпособРасчетаЭСП");	
	
	СтруктураПараметров = Новый Структура;
	
	Для каждого ТекПараметр Из СписокПараметров Цикл	
		СтруктураПараметров.Вставить(ТекПараметр.Значение, СтруктураШапкиДокумента[ТекПараметр.Значение]);		
	КонецЦикла;
	
	НаборЗаписей = Движения.бит_му_ПараметрыФинИнструментов;
	
	бит_му_ФинИнструменты.ЗаписатьПараметры(НаборЗаписей, СтруктураШапкиДокумента, СтруктураПараметров);
	
КонецПроцедуры // СформироватьДвижениеПоРегиструПараметров()

// Процедура формирует проводку по эффекту отсрочки.
// Дт СчетДолгосрочныхОбязательств Кт КорСчет
// или
// Дт КорСчет Кт СчетДолгосрочныхОбязательств.
// 
// Параметры:
//  СтруктураШапкиДокумента 	- Структура.
//  СтруктураТаблиц 			- Структура.
//  СтруктураКурсыВалют 		- Структура.
// 	ЭтоДебиторскаяЗадолженность - Булево.
// 
Процедура СформироватьПроводкуПоЭффектуОтсрочки(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, ЭтоДебиторскаяЗадолженность)
	
	Для каждого ТекСтр Из СтруктураТаблиц.Распределение Цикл
		
		Если ЭтоДебиторскаяЗадолженность Тогда
			СчетДт = ТекСтр.КорСчет;	СчетКт = СтруктураШапкиДокумента.СчетДолгосрочныхОбязательств;
		Иначе
			СчетДт = СтруктураШапкиДокумента.СчетДолгосрочныхОбязательств;	СчетКт = ТекСтр.КорСчет;
		КонецЕсли;
		
		Если ТекСтр.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Движения.бит_Дополнительный_2.Добавить();
		
		// Заполнение атрибутов записи.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
		СтруктураПараметров.Вставить("Валюта",      СтруктураШапкиДокумента.ВалютаДокумента);
		СтруктураПараметров.Вставить("СчетДт",      СчетДт);
		СтруктураПараметров.Вставить("СчетКт",      СчетКт);
		СтруктураПараметров.Вставить("Сумма",       ТекСтр.Сумма);
		СтруктураПараметров.Вставить("Содержание",  "Эффект отсрочки");
											 
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
		
		// Заполним аналитику счета Дт и Кт.
		Если ЭтоДебиторскаяЗадолженность Тогда
			Для Н = 1 По мКоличествоСубконтоМУ Цикл
				бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Н, ТекСтр["КорСубконто" + Н]);
			КонецЦикла;
			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтруктураШапкиДокумента.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтруктураШапкиДокумента.ДоговорКонтрагента);			
			
		Иначе			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтруктураШапкиДокумента.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			Для Н = 1 По мКоличествоСубконтоМУ Цикл
				бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Н, ТекСтр["КорСубконто" + Н]);
			КонецЦикла;
		КонецЕсли;
		
		// Выполним валютные пересчеты.
		бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьПроводкуПоЭффектуОтсрочки()

// Процедура формирует проводку Дт Счет резерва Кт Счет долгосрочных обязательств.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьПроводкуПоРезерву(СтруктураШапкиДокумента, СтруктураКурсыВалют)
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов;
	
	СтруктураОпераций   = Документы.бит_му_ПризнаниеФинИнструментов.СформироватьСтуктуруВидовОпераций(ВидОперации);
	ПараметрыУправления = Документы.бит_му_ПризнаниеФинИнструментов.ВычислитьПараметрыУправления(ЭтотОбъект, СтруктураОпераций);

	// Кредит или займ с рыночными условиями проводку не формирует.
	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные ИЛИ СтруктураОпераций.ЭтоЗаймыВыданные Тогда
		Если ВидКредитаЗайма = Перечисления.бит_му_ВидыКредитовЗаймов.Рыночный Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Определим номинальную сумму для проводки
	Если (ВидОперации = ВидыОпераций.ПризнаниеКредитовЗаймовПолученных) ИЛИ (ВидОперации = ВидыОпераций.ПризнаниеЗаймовВыданных) Тогда
		НоминальнаяСумма = НоминальнаяСуммаОбязательства;
		
	ИначеЕсли (ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность) ИЛИ (ВидОперации = ВидыОпераций.КредиторскаяЗадолженность) Тогда
		НоминальнаяСумма = НоминальнаяСуммаОбязательства;
		
	ИначеЕсли (ВидОперации = ВидыОпераций.ВводНачальныхОстатковКредитыЗаймыПолученные) ИЛИ (ВидОперации = ВидыОпераций.ВводНачальныхОстатковЗаймыВыданные) Тогда
		НоминальнаяСумма = НоминальнаяСуммаОбязательства + НоминальнаяСуммаПроцентов;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Определим сумму и счета проводки
	Если СправедливаяСтоимость < НоминальнаяСумма Тогда
		СуммаПроводки = НоминальнаяСумма - СправедливаяСтоимость;
		Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные 
			 ИЛИ СтруктураОпераций.ЭтоДебиторскаяЗадолженность 
			 ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
			 
			 СчетДт = СчетДолгосрочныхОбязательств;	
			 
			 Если ПараметрыУправления.ПроводкаПоДисконтуНаСчетДоходов Тогда
				 
				 СчетКт = СтруктураШапкиДокумента.СчетДоходов;
				 
			 Иначе	
				 
				 СчетКт = СтруктураШапкиДокумента.СчетРезерва;
				 
			 КонецЕсли; 
				 
			
		ИначеЕсли СтруктураОпераций.ЭтоЗаймыВыданные Тогда
			
			СчетДт = СчетРезерва;
			СчетКт = СчетДолгосрочныхАктивов;
			
		Иначе
			
			СчетДт = СчетДолгосрочныхАктивов;			
			СчетКт = СчетРезерва; 
			
		КонецЕсли;
	Иначе
		СуммаПроводки = СправедливаяСтоимость - НоминальнаяСумма;
		Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные 
			 ИЛИ СтруктураОпераций.ЭтоДебиторскаяЗадолженность 
			 ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
			 
			СчетДт = СчетРезерва;			 
			СчетКт = СчетДолгосрочныхОбязательств; 
			
		ИначеЕсли СтруктураОпераций.ЭтоЗаймыВыданные Тогда
			
			СчетДт = СчетДолгосрочныхАктивов;
			СчетКт = СчетРезерва;
			
		Иначе
			
			СчетДт = СчетРезерва;			
			СчетКт = СчетДолгосрочныхАктивов; 
			
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаПроводки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ПризнаниеКредитовЗаймовПолученных 
		ИЛИ СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ВводНачальныхОстатковКредитыЗаймыПолученные Тогда
	
		СодержаниеПроводки = "Признание дисконта";
		
	Иначе
		
		СодержаниеПроводки = "Начисление резерва";
	
	КонецЕсли; 
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      СтруктураШапкиДокумента.ВалютаДокумента);
	СтруктураПараметров.Вставить("СчетДт",      СчетДт);
	СтруктураПараметров.Вставить("СчетКт",      СчетКт);
	СтруктураПараметров.Вставить("Сумма",       СуммаПроводки);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеПроводки);
		
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтруктураШапкиДокумента.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	Если ПараметрыУправления.ПроводкаПоДисконтуНаСчетДоходов Тогда
		
		Для й = 1 По мКоличествоСубконтоМУ Цикл
			
		   ИмяРеквизита = "СубконтоДоходов"+й;	
		   бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, й, СтруктураШапкиДокумента[ИмяРеквизита]);
		
		КонецЦикла; 
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтруктураШапкиДокумента.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтруктураШапкиДокумента.ДоговорКонтрагента);		
		
	Иначе	
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтруктураШапкиДокумента.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтруктураШапкиДокумента.ДоговорКонтрагента);
		
	КонецЕсли; 
	
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СформироватьПроводкуПоРезерву()

// Процедура формирует проводки реклассификации.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьПроводкуПоРеклассификации(СтруктураШапкиДокумента, СтруктураКурсыВалют)
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийПризнаниеФинИнструментов;
	
	Если СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		СчетДт = СчетДолгосрочныхОбязательств; 		СчетКт = СчетКраткосрочныхОбязательств;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
		СчетДт = СчетКраткосрочныхОбязательств; 	СчетКт = СчетДолгосрочныхОбязательств;

	Иначе
		Возврат;
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.НоминальнаяСуммаОбязательства = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      СтруктураШапкиДокумента.ВалютаДокумента);
	СтруктураПараметров.Вставить("СчетДт",      СчетДт);
	СтруктураПараметров.Вставить("СчетКт",      СчетКт);
	СтруктураПараметров.Вставить("Сумма",       СтруктураШапкиДокумента.НоминальнаяСуммаОбязательства);
	СтруктураПараметров.Вставить("Содержание",  "Реклассификация");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтруктураШапкиДокумента.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтруктураШапкиДокумента.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтруктураШапкиДокумента.ДоговорКонтрагента);			
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СформироватьПроводкуПоРеклассификации()

// Процедура формирует движения по регистру накоплений "бит_му_ФинансовыеНачисления".
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьДвиженияПоФинансовымНачислениям(СтруктураШапкиДокумента, СтруктураКурсыВалют)
	
	ВидыИсточниковЗадолженности = Перечисления.бит_му_ВидыИсточниковЗадолженности;
	
	СтруктураОпераций = Документы.бит_му_ПризнаниеФинИнструментов.СформироватьСтуктуруВидовОпераций(ВидОперации);
	
	// Определим вид источника задолженности
	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные Тогда
		
		ВидИсточникаЗадолженности = ВидыИсточниковЗадолженности.КредитыЗаймы;
		
	ИначеЕсли СтруктураОпераций.ЭтоДебиторскаяЗадолженность Тогда
		
		ВидИсточникаЗадолженности = ВидыИсточниковЗадолженности.ДебиторскаяЗадолженность;
		
	ИначеЕсли СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		
		ВидИсточникаЗадолженности = ВидыИсточниковЗадолженности.КредиторскаяЗадолженность;
		
	ИначеЕсли СтруктураОпераций.ЭтоЗаймыВыданные Тогда
		
		ВидИсточникаЗадолженности = ВидыИсточниковЗадолженности.ЗаймыВыданные;
		
	Иначе
		Возврат
	КонецЕсли;
	
	ДатаНачалаГрафика = бит_му_ОбщегоНазначения.ОпределитьНачалоГрафика(СтруктураШапкиДокумента.ДоговорКонтрагента,СтруктураШапкиДокумента.Дата);
	
	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные ИЛИ СтруктураОпераций.ЭтоЗаймыВыданные Тогда
	
		// По номинальной ставке
		НоминальныеСтавки 	= бит_му_ФинИнструменты.ПолучитьНаборНоминальныхСтавок(ДоговорКонтрагента);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Дата"                     ,ДатаНачалаГрафика);
		СтруктураПараметров.Вставить("Организация"              ,СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("Контрагент"               ,СтруктураШапкиДокумента.Контрагент);
		СтруктураПараметров.Вставить("ДоговорКонтрагента"       ,СтруктураШапкиДокумента.ДоговорКонтрагента);
		СтруктураПараметров.Вставить("Объект"                   ,СтруктураШапкиДокумента.ДоговорКонтрагента);
		СтруктураПараметров.Вставить("ВариантРасчетаПроцентов"  ,Перечисления.бит_му_ВариантыРасчетаФинансовыхПроцентов.Постоплата);
		СтруктураПараметров.Вставить("ВидСтавки"                ,Перечисления.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента);
		СтруктураПараметров.Вставить("ВидИсточникаЗадолженности",ВидИсточникаЗадолженности);
		
		// Для расчета по дням используется годовая ставка, для расчета по-месяцам используется месячная ставка.
		ТекСтавка = ?(СтруктураШапкиДокумента.СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням, СтавкаНоминальная, СтавкаНоминальная/12);
		СтруктураПараметров.Вставить("Ставка"                   ,ТекСтавка);
		СтруктураПараметров.Вставить("НоминальныеСтавки"        ,НоминальныеСтавки);
		СтруктураПараметров.Вставить("Стоимость"                ,НоминальнаяСуммаОбязательства);
		СтруктураПараметров.Вставить("СпособРасчетаЭСП"         ,СтруктураШапкиДокумента.СпособРасчетаЭСП);
		
		Если СтруктураШапкиДокумента.СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
			
			СтруктураПараметров.Вставить("Периодичность", "День");
			
		КонецЕсли; 
		
		// Набор записей регистра бит_му_ФинансовыеНачисления.
		НаборЗаписей = Движения.бит_му_ФинансовыеНачисления;
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		
		бит_му_ОбщегоНазначения.СформироватьТаблицуФинансовыхНачислений(ТаблицаДвижений
																		 ,СтруктураПараметров
																		 ,СтруктураКурсыВалют);
		
		// Запись проводок в регистр
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;														
		НаборЗаписей.ДобавитьДвижение();
		
	КонецЕсли;
	
	Если СтруктураОпераций.ЭтоКредитыЗаймыПолученные ИЛИ СтруктураОпераций.ЭтоЗаймыВыданные Тогда
		Если ВидКредитаЗайма = Перечисления.бит_му_ВидыКредитовЗаймов.Рыночный Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// По эффективной ставке
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"                     ,ДатаНачалаГрафика);
	СтруктураПараметров.Вставить("Организация"              ,СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Контрагент"               ,СтруктураШапкиДокумента.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента"       ,СтруктураШапкиДокумента.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Объект"                   ,СтруктураШапкиДокумента.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ВариантРасчетаПроцентов"  ,Перечисления.бит_му_ВариантыРасчетаФинансовыхПроцентов.Постоплата);
	СтруктураПараметров.Вставить("ВидСтавки"                ,Перечисления.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента);
	СтруктураПараметров.Вставить("ВидИсточникаЗадолженности",ВидИсточникаЗадолженности);
	
	// Для расчета по дням используется годовая ставка, для расчета по-месяцам используется месячная ставка.
	ТекСтавка = ?(СтруктураШапкиДокумента.СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням, СтавкаЭСП, СтавкаЭСП/12);
	СтруктураПараметров.Вставить("Ставка"                   ,ТекСтавка);
	СтруктураПараметров.Вставить("Стоимость"                ,СправедливаяСтоимость);
	СтруктураПараметров.Вставить("СпособРасчетаЭСП"         ,СтруктураШапкиДокумента.СпособРасчетаЭСП);
	
	Если СтруктураШапкиДокумента.СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
	
		СтруктураПараметров.Вставить("Периодичность", "День");
	
	КонецЕсли; 
	
	Если СтруктураОпераций.ЭтоДебиторскаяЗадолженность ИЛИ СтруктураОпераций.ЭтоКредиторскаяЗадолженность Тогда
		
		// До начала долгосрочной части начисляем только проценты.
		СледМесяц               = НачалоМесяца(КонецМесяца(Дата)+1);		
		НачалоДолгосрочнойЧасти = ДобавитьМесяц(СледМесяц,12);
		СтруктураПараметров.Вставить("НачалоДолгосрочнойЧасти",НачалоДолгосрочнойЧасти);
		
	КонецЕсли; 
	
	
	// Набор записей регистра бит_му_ФинансовыеНачисления.
	НаборЗаписей = Движения.бит_му_ФинансовыеНачисления;
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	
	бит_му_ОбщегоНазначения.СформироватьТаблицуФинансовыхНачислений(ТаблицаДвижений
	                                                                 ,СтруктураПараметров
																	 ,СтруктураКурсыВалют);
	
	// Запись проводок в регистр
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;														
	НаборЗаписей.ДобавитьДвижение();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
