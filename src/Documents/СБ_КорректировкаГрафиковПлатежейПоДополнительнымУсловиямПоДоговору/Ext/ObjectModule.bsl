// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = Новый Структура; // 1c-izhtc, ChuckNorris, 21.08.2015
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_ДополнительныеУсловияПоДоговору.Сценарий,
	               |	бит_ДополнительныеУсловияПоДоговору.Сценарий.Валюта КАК ВалютаСценария,
	               |	бит_ДополнительныеУсловияПоДоговору.ЦФО,
	               |	бит_ДополнительныеУсловияПоДоговору.Ссылка КАК ДокументРегистратор,
	               |	бит_ДополнительныеУсловияПоДоговору.Контрагент,
	               |	бит_ДополнительныеУсловияПоДоговору.ДоговорКонтрагента,
	               |	бит_ДополнительныеУсловияПоДоговору.Проект,
	               |	бит_ДополнительныеУсловияПоДоговору.НоменклатурнаяГруппа,
				   // 1c-izhtc, ChuckNorris, 21.08.2015 ( 
	               |	бит_ДополнительныеУсловияПоДоговору.Аналитика_5,
				   // 1c-izhtc, ChuckNorris, 21.08.2015 ) 
	               |	бит_ДополнительныеУсловияПоДоговору.Аналитика_1,
	               |	бит_ДополнительныеУсловияПоДоговору.Аналитика_2,
	               |	бит_ДополнительныеУсловияПоДоговору.Аналитика_3,
	               |	бит_ДополнительныеУсловияПоДоговору.Аналитика_4,
	               |	бит_ДополнительныеУсловияПоДоговору.Дата КАК СБ_ДатаДокумента
	               |ИЗ
	               |	Документ.бит_ДополнительныеУсловияПоДоговору КАК бит_ДополнительныеУсловияПоДоговору
	               |ГДЕ
	               |	бит_ДополнительныеУсловияПоДоговору.ДоговорКонтрагента = &ДоговорКонтрагента
	               |	И бит_ДополнительныеУсловияПоДоговору.Проведен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	бит_ДополнительныеУсловияПоДоговору.Дата УБЫВ"; 
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);			   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		бит_ОбщегоНазначения.СообщитьОбОшибке("Не найден документ ""Дополнительные условия по договору""!", Отказ, Заголовок, СтатусСообщения.Важное); // 1c-izhtc, ChuckNorris, 21.08.2015
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СтруктураШапкиДокумента.Вставить("Сценарий"				, Выборка.Сценарий);
	СтруктураШапкиДокумента.Вставить("ЦФО"					, Выборка.ЦФО);
	СтруктураШапкиДокумента.Вставить("ДокументРегистратор"	, Выборка.ДокументРегистратор);
	СтруктураШапкиДокумента.Вставить("Проект"				, Выборка.Проект);
	СтруктураШапкиДокумента.Вставить("НоменклатурнаяГруппа"	, Выборка.НоменклатурнаяГруппа);
	// 1c-izhtc, ChuckNorris, 21.08.2015 ( 
	//СтруктураШапкиДокумента.Вставить("Номенклатура"			, Выборка.Номенклатура);
	СтруктураШапкиДокумента.Вставить("Аналитика_5"			, Выборка.Аналитика_5);
	// 1c-izhtc, ChuckNorris, 21.08.2015 ) 	
	СтруктураШапкиДокумента.Вставить("Аналитика_1"			, Выборка.Аналитика_1);
	СтруктураШапкиДокумента.Вставить("Аналитика_2"			, Выборка.Аналитика_2);
	СтруктураШапкиДокумента.Вставить("Аналитика_3"			, Выборка.Аналитика_3);
	СтруктураШапкиДокумента.Вставить("Аналитика_4"			, Выборка.Аналитика_4);
	//СтруктураШапкиДокумента.Вставить("СБ_ДатаДокумента"		, Выборка.СБ_ДатаДокумента);
	СтруктураШапкиДокумента.Вставить("СБ_ДатаДокумента"		, Дата);
	СтруктураШапкиДокумента.Вставить("ВалютаСценария"		, Выборка.ВалютаСценария);
	// 1c-izhtc, ChuckNorris, 24.08.2015 ( 
	СтруктураШапкиДокумента.Вставить("Контрагент"			, Контрагент);
	СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
	// 1c-izhtc, ChuckNorris, 24.08.2015 ) 
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоКорректировке) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ТаблицаКорректировки".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Период" 		    , "Период");
	СтруктураПолей.Вставить("СтатьяОборотов"	, "СтатьяОборотов");
	СтруктураПолей.Вставить("ТипСтатьи"    		, "СтатьяОборотов.ТипСтатьи");
	СтруктураПолей.Вставить("СтавкаНДС"    		, "СтатьяОборотов.СтавкаНДС");
	СтруктураПолей.Вставить("СоставляющаяПлатежа", "СоставляющаяПлатежа");
	СтруктураПолей.Вставить("СуммаСтарая"   	, "СуммаСтарая");
	СтруктураПолей.Вставить("СуммаНовая"   		, "СуммаНовая");

	РезультатЗапросаПоКорректировке = УчетОС.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТаблицаКорректировки", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоКорректировке = РезультатЗапросаПоКорректировке.Выгрузить();
	
КонецПроцедуры // ПодготовитьТаблицыДокумента()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКорректировке, Отказ, Заголовок);

	ГрафикиДоговоров = Движения.бит_ГрафикиДоговоров;
	ГрафикиДоговоров.Записывать = Истина;
	
	СтруктураСумм = Новый Структура("СуммаРегл, СуммаБезНДСРегл, СуммаУпр, СуммаБезНДСУпр, СуммаСценарий, СуммаБезНДССценарий");
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Регл, Упр, Сценарий");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, Дата, ВидыКурсов);
	
	Валюта = СтруктураШапкиДокумента.ВалютаСценария;
		
	СтрКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта)); // 1c-izhtc, ChuckNorris, 21.08.2015
	
	СтрКурса.Вставить("Валюта",Валюта);
	СтруктураКурсыВалют.Вставить("Сценарий",СтрКурса);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоКорректировке Цикл
		
		// расход
		НоваяСтрока = ГрафикиДоговоров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураШапкиДокумента);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СуммаНДССценарий = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаСтарая,
        											   Истина,
        											   УчетНДСПереопределяемый.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
													   
		СтруктураСумм.СуммаСценарий = СтрокаТаблицы.СуммаСтарая;
		СтруктураСумм.СуммаБезНДССценарий = СтрокаТаблицы.СуммаСтарая - СуммаНДССценарий;
		
		СтруктураСумм.СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтруктураСумм.СуммаСценарий
																		  ,СтруктураКурсыВалют.Сценарий.Валюта
																		  ,СтруктураКурсыВалют.Регл.Валюта
																		  ,СтруктураКурсыВалют.Сценарий.Курс
																		  ,СтруктураКурсыВалют.Регл.Курс
																		  ,СтруктураКурсыВалют.Сценарий.Кратность
																		  ,СтруктураКурсыВалют.Регл.Кратность);
		
		СтруктураСумм.СуммаБезНДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтруктураСумм.СуммаБезНДССценарий
																		  ,СтруктураКурсыВалют.Сценарий.Валюта
																		  ,СтруктураКурсыВалют.Регл.Валюта
																		  ,СтруктураКурсыВалют.Сценарий.Курс
																		  ,СтруктураКурсыВалют.Регл.Курс
																		  ,СтруктураКурсыВалют.Сценарий.Кратность
																		  ,СтруктураКурсыВалют.Регл.Кратность);
																		  
		СтруктураСумм.СуммаУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтруктураСумм.СуммаСценарий
																		  ,СтруктураКурсыВалют.Сценарий.Валюта
																		  ,СтруктураКурсыВалют.Упр.Валюта
																		  ,СтруктураКурсыВалют.Сценарий.Курс
																		  ,СтруктураКурсыВалют.Упр.Курс
																		  ,СтруктураКурсыВалют.Сценарий.Кратность
																		  ,СтруктураКурсыВалют.Упр.Кратность);
		
		СтруктураСумм.СуммаБезНДСУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтруктураСумм.СуммаБезНДССценарий
																		  ,СтруктураКурсыВалют.Сценарий.Валюта
																		  ,СтруктураКурсыВалют.Упр.Валюта
																		  ,СтруктураКурсыВалют.Сценарий.Курс
																		  ,СтруктураКурсыВалют.Упр.Курс
																		  ,СтруктураКурсыВалют.Сценарий.Кратность
																		  ,СтруктураКурсыВалют.Упр.Кратность);
																		  
		Для Каждого Ресурс Из СтруктураСумм Цикл
        	НоваяСтрока[Ресурс.Ключ] = - Ресурс.Значение;
		КонецЦикла;
		
		Если СуммаЗадолженностиНовая <> 0 Тогда
			// приход
			НоваяСтрока = ГрафикиДоговоров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураШапкиДокумента);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			СуммаНДССценарий = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаНовая,
	        											   Истина,
	        											   УчетНДСПереопределяемый.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
														   
			СтруктураСумм.СуммаСценарий = СтрокаТаблицы.СуммаНовая;
			СтруктураСумм.СуммаБезНДССценарий = СтрокаТаблицы.СуммаНовая - СуммаНДССценарий;
			
			СтруктураСумм.СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтруктураСумм.СуммаСценарий
																			  ,СтруктураКурсыВалют.Сценарий.Валюта
																			  ,СтруктураКурсыВалют.Регл.Валюта
																			  ,СтруктураКурсыВалют.Сценарий.Курс
																			  ,СтруктураКурсыВалют.Регл.Курс
																			  ,СтруктураКурсыВалют.Сценарий.Кратность
																			  ,СтруктураКурсыВалют.Регл.Кратность);
			
			СтруктураСумм.СуммаБезНДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтруктураСумм.СуммаБезНДССценарий
																			  ,СтруктураКурсыВалют.Сценарий.Валюта
																			  ,СтруктураКурсыВалют.Регл.Валюта
																			  ,СтруктураКурсыВалют.Сценарий.Курс
																			  ,СтруктураКурсыВалют.Регл.Курс
																			  ,СтруктураКурсыВалют.Сценарий.Кратность
																			  ,СтруктураКурсыВалют.Регл.Кратность);
																			  
			СтруктураСумм.СуммаУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтруктураСумм.СуммаСценарий
																			  ,СтруктураКурсыВалют.Сценарий.Валюта
																			  ,СтруктураКурсыВалют.Упр.Валюта
																			  ,СтруктураКурсыВалют.Сценарий.Курс
																			  ,СтруктураКурсыВалют.Упр.Курс
																			  ,СтруктураКурсыВалют.Сценарий.Кратность
																			  ,СтруктураКурсыВалют.Упр.Кратность);
			
			СтруктураСумм.СуммаБезНДСУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтруктураСумм.СуммаБезНДССценарий
																			  ,СтруктураКурсыВалют.Сценарий.Валюта
																			  ,СтруктураКурсыВалют.Упр.Валюта
																			  ,СтруктураКурсыВалют.Сценарий.Курс
																			  ,СтруктураКурсыВалют.Упр.Курс
																			  ,СтруктураКурсыВалют.Сценарий.Кратность
																			  ,СтруктураКурсыВалют.Упр.Кратность);
																			  
			Для Каждого Ресурс Из СтруктураСумм Цикл
	        	НоваяСтрока[Ресурс.Ключ] = Ресурс.Значение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоКорректировке;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// 1c-izhtc, ChuckNorris, 21.08.2015 ( 
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда Возврат; КонецЕсли;
	// 1c-izhtc, ChuckNorris, 21.08.2015 ) 		

    ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоКорректировке);
	
		// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКорректировке, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры // ОбработкаУдаленияПроведения()

// 1c-izhtc, ChuckNorris, 21.08.2015 ( 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры
// 1c-izhtc, ChuckNorris, 21.08.2015 )