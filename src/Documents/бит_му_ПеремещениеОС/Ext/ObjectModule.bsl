#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//Начало_бит_Магомедов_20.07.2012 
// Хранит валюту международного учета
Перем мВалютаМеждУчета Экспорт;

// Хранит количество субконто международного учета в документа
Перем мКоличествоСубконтоМУ Экспорт;
//Конец_бит_Магомедов_20.07.2012 

#Область ОбработчикиСобытий

 // Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	//Начало_бит_Магомедов_20.07.2012 
	СтруктураКурсыВалют     = СформироватьСтруктуруКурсовВалют(СтруктураШапкиДокумента,Отказ,Заголовок);
	//Конец_бит_Магомедов_20.07.2012 
	
	СтруктураТаблиц = ПодготовитьТаблицыДокумента();	
	
	ПроверкаТаблицыОС(СтруктураТаблиц.ОС,СтруктураШапкиДокумента,Отказ,Заголовок);
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		//Начало_бит_Магомедов_20.07.2012
		//ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураТаблиц,Отказ,Заголовок);
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураТаблиц,Отказ,Заголовок,СтруктураКурсыВалют);
		//Конец_бит_Магомедов_20.07.2012	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
 
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверим наличие дублей в табличной части "Основные средства".	
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство");
	
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
	                                                                  , "ОсновныеСредства"
																	  , СтруктураОбязательныхПолей
																	  , Отказ);
																	  
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция - Заполнить параметры подбора.
// 
// Возвращаемое значение:
//  ПараметрыФормы - структура.
//
Функция ЗаполнитьПараметрыПодбора() Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Организация"		, Организация);                             
	ПараметрыФормы.Вставить("Режим"				, Перечисления.бит_му_РежимыПодбораВНА.ПеремещениеОС);
	ПараметрыФормы.Вставить("ДатаНачала"		, НачалоМесяца(Дата));
	ПараметрыФормы.Вставить("ДатаОкончания"		, КонецМесяца(Дата));
	ПараметрыФормы.Вставить("МОЛ"				, МОЛ);
	ПараметрыФормы.Вставить("Местонахождение"	, Подразделение);
	//БИТ Тртилек 31102013 добавим отбор по виду класса
	ПараметрыФормы.Вставить("ВидКласса"         , Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства);
	///БИТ Тртилек 31102013

	Возврат ПараметрыФормы;
	
КонецФункции

// Процедура - Заполнить основные средства.
//
// Параметры:
//  ВыбранноеЗначение.
//
Процедура ЗаполнитьОсновныеСредства(ВыбранноеЗначение) Экспорт

	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов,ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ВНА);
		
		МассивСтрок = ОсновныеСредства.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = ОсновныеСредства.Добавить();
			НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ВНА;
			ПараметрыОС = ПолучитьПараметрыОС(НоваяСтрока.ОсновноеСредство);
			ЗаполнитьСтрокуТЧПоДанным(НоваяСтрока,ПараметрыОС);
			
			// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-11-05 (#4338) 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Местонахождение, МОЛ");
			// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-11-05 (#4338) 
			
			//БИТ Тртилек 31102013
			ПараметрыОбъектов = ПолучитьПараметры(СтрокаТаблицы.ВНА);
			
			СтрокаДанных = ПараметрыОбъектов[СтрокаТаблицы.ВНА]; 					   
			
			Если СтрокаДанных <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных);						
				
				//обходим 4 субконто, ищем Объект
				Для сч = 1 по мКоличествоСубконтоМУ Цикл 
					Если ТипЗнч(СтрокаДанных["СубконтоУчета"+сч]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда 
						НоваяСтрока.бит_му_Объект_старый = СтрокаДанных["СубконтоУчета"+сч];
						//НоваяСтрока.бит_му_Объект		   = СтрокаДанных["СубконтоУчета"+сч];
						Прервать;
					КонецЕсли;
				КонецЦикла;
				//Объект новый берем из элемента ОС
				НоваяСтрока.бит_му_Объект = СтрокаТаблицы.ВНА.Объект;
				
			Иначе
				Сообщить("Данное основное средство не было принято к учету документом ""Принятие к учету ОС МСФО"" для организации: " + Организация.Наименование, СтатусСообщения.Важное);
				//Элемент.Значение = Справочники.ОсновныеСредства.ПустаяСсылка();
				
			КонецЕсли;
			///БИТ Тртилек
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Основное средство ""%1%"" инв. № %2%  уже подобрано в строке № %3%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																		,СтрокаТаблицы.ВНА
																		,СтрокаТаблицы.ИнвентарныйНомер
																		,НайденнаяСтрока.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
		
	КонецЦикла; // По строкам таблицы данных

КонецПроцедуры

// Функция готовит таблицы документа для проведения.
// 
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицыДокумента()  Экспорт
	
	СтруктураТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка"             ,Ссылка);
	Запрос.УстановитьПараметр("ПустоеФизЛицо"      ,Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеПодразделение",Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("СостояниеПринято"   ,Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("СостояниеВыбыло"    ,Перечисления.бит_му_СостоянияОС.СнятоСУчета);
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ТабЧасть.ОсновноеСредство,
	                |	ТабЧасть.НомерСтроки,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.Местонахождение_старый = ТабЧасть.Местонахождение
	                |			ТОГДА &ПустоеПодразделение
	                |		ИНАЧЕ ТабЧасть.Местонахождение
	                |	КОНЕЦ КАК Местонахождение,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.МОЛ = ТабЧасть.МОЛ_Старый
	                |			ТОГДА &ПустоеФизЛицо
	                |		ИНАЧЕ ТабЧасть.МОЛ
	                |	КОНЕЦ КАК МОЛ,
	                |	Принятые.ДатаСостояния КАК ДатаПринятия,
	                |	Выбывшие.ДатаСостояния КАК ДатаВыбытия
					//Начало_бит_Магомедов_20.07.2012
					|	,ТабЧасть.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
					|	ТабЧасть.НачисленнаяАмортизация КАК НачисленнаяАмортизация,
					|	ТабЧасть.СуммаОбесценения,
					|	ТабЧасть.СчетУчета,
					|	ТабЧасть.СчетНачисленияАмортизации,
					|	ТабЧасть.СчетСниженияСтоимости,
					|	ТабЧасть.бит_му_Объект,
					|	ТабЧасть.бит_му_Объект_старый,
					|	Значение(Перечисление.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО) КАК ВидДвиженияМСФО
					//Конец_бит_Магомедов_20.07.2012
	                |ИЗ
	                |	Документ.бит_му_ПеремещениеОС.ОсновныеСредства КАК ТабЧасть
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК Принятые
	                |		ПО ТабЧасть.ОсновноеСредство = Принятые.ОсновноеСредство
	                |			И ТабЧасть.Ссылка.Организация = Принятые.Организация
	                |			И (Принятые.Состояние = &СостояниеПринято)
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК Выбывшие
	                |		ПО ТабЧасть.ОсновноеСредство = Выбывшие.ОсновноеСредство
	                |			И ТабЧасть.Ссылка.Организация = Выбывшие.Организация
	                |			И (Выбывшие.Состояние = &СостояниеВыбыло)
	                |ГДЕ
	                |	ТабЧасть.Ссылка = &Ссылка
	                |	И (ТабЧасть.Местонахождение_старый <> ТабЧасть.Местонахождение
					//Начало_бит_Магомедов_20.07.2012
					|			ИЛИ ТабЧасть.бит_му_Объект_старый <> ТабЧасть.бит_му_Объект
					//Конец_бит_Магомедов_20.07.2012
	                |			ИЛИ ТабЧасть.МОЛ_Старый <> ТабЧасть.МОЛ)";
					
	РезТаблица = Запрос.Выполнить().Выгрузить();
	
	СтруктураТаблиц.Вставить("ОС",РезТаблица);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицуБДДС()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыОС(ОсновноеСредство)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     ,Организация);
	СтруктураПараметров.Вставить("ОсновноеСредство",ОсновноеСредство);
	СтруктураПараметров.Вставить("МоментВремени"   ,?(ЭтоНовый(),КонецДня(Дата),МоментВремени()));
	
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Местонахождение_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.МОЛ_ОС);
	
	СтруктураПараметров.Вставить("ПараметрыВНА",ПараметрыВНА);
	
	РезЗначения = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров,"Соответствие");
	
	Возврат РезЗначения;

КонецФункции // ПолучитьПараметрыОС()

Процедура ЗаполнитьСтрокуТЧПоДанным(ТекущаяСтрока,РезЗначения)
	
	Если РезЗначения <> Неопределено 
		И ТекущаяСтрока <> Неопределено Тогда
		
		ПараметрыОС = РезЗначения[ТекущаяСтрока.ОсновноеСредство];
		
		Если ПараметрыОС <> Неопределено Тогда
			
			Для каждого КиЗ Из ПараметрыОС Цикл
				
				ТекущееЗначение    = КиЗ.Значение;
				Параметр           = КиЗ.Ключ;
				ИмяПараметра       = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПолучитьИмяПредопределенного(Параметр); 
				ИмяРеквизита       = СтрЗаменить(ИмяПараметра,"_ОС","");
				ИмяРеквизитаСтарый = ИмяРеквизита+"_Старый";
				
				ТекущаяСтрока[ИмяРеквизита]        = ТекущееЗначение;
				ТекущаяСтрока[ИмяРеквизитаСтарый]  = ТекущееЗначение;
				
			КонецЦикла; // По параметрам 	
			
		КонецЕсли; // Есть параметры
		
	КонецЕсли; 

КонецПроцедуры 

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования=Неопределено)
	
	// Заполним шапку документа значениями по умолчанию.
    бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);
	
	// Изменения кода. Начало: 26.01.2017  {{ 
	Если НЕ ОбъектКопирования = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;  
	// Изменения кода. Конец 26.01.2017  }} 
	
КонецПроцедуры

// Процедура проверят таблицу ОС на наличие принятые либо выбывшие ОС.
// 
// Параметры:
//  ТаблицаОС  - ТаблицаЗначений
//  Отказ      - Булево
//  Заголовок  - Строка
// 
Процедура ПроверкаТаблицыОС(ТаблицаОС,СтруктураШапкиДокумента,Отказ,Заголовок)

	КолонкиТаблицы = ТаблицаОС.Колонки;
	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл
		
		бит_му_ВНА.ПроверитьСтрокуТаблицыОС(СтрокаТаблицы,КолонкиТаблицы,СтруктураШапкиДокумента,Отказ,Заголовок);
		
	КонецЦикла; 

КонецПроцедуры // ПроверкаТаблицыОС()

// Процедура выполняет движения по регистрам.
//                
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураТаблиц,Отказ,Заголовок)
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураТаблиц,Отказ,Заголовок,СтруктураКурсыВалют)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	// Движения по регистру сведений бит_му_ПараметрыОС.
	КолонкиТаблицы = СтруктураТаблиц.ОС.Колонки;
	ТаблицаДанных  = СтруктураТаблиц.ОС;
	НаборЗаписей   = Движения.бит_му_ПараметрыОС;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ВидыПараметров = бит_му_ВНА.ПолучитьВидыПараметров(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ОсновныеСредства);
	ВидыПараметров = бит_му_ВНА.ПолучитьВидыПараметров(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.МестонахождениеОС);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )	
	бит_му_ВНА.ЗаписатьПараметрыВНА(НаборЗаписей,СтруктураШапкиДокумента,ТаблицаДанных,ВидыПараметров,"ОС");
	
	//Начало_бит_Магомедов_20.07.2012
	// по регистру бухгалтерии бит_Дополнительный_2
	СтруктураЗаписи = Новый Структура("Счет, ОбъектДт, ОбъектКт, Содержание, Сумма");
	Для Каждого  СтрокаТаблицы Из ТаблицаДанных Цикл
		
		//по счету учета
		СтруктураЗаписи.Счет = СтрокаТаблицы.СчетУчета;
		СтруктураЗаписи.Содержание = "Перемещение ОС (балансовая стоимость)"; 
		СтруктураЗаписи.ОбъектДт = СтрокаТаблицы.бит_му_Объект;
		СтруктураЗаписи.ОбъектКт = СтрокаТаблицы.бит_му_Объект_старый;
		СтруктураЗаписи.Сумма = СтрокаТаблицы.ПервоначальнаяСтоимость;
		
		СоздатьЗаписьПоРегиструБухгалтерии(СтруктураШапкиДокумента,СтрокаТаблицы,СтруктураКурсыВалют, СтруктураЗаписи);
		
		//по счету амортизации
		Если НЕ СтрокаТаблицы.НачисленнаяАмортизация = 0 Тогда
			
			СтруктураЗаписи.Счет = СтрокаТаблицы.СчетНачисленияАмортизации;
			СтруктураЗаписи.Содержание = "Перемещение ОС (накопленная амортизация)"; 
			СтруктураЗаписи.ОбъектДт = СтрокаТаблицы.бит_му_Объект_старый;
			СтруктураЗаписи.ОбъектКт = СтрокаТаблицы.бит_му_Объект;
			СтруктураЗаписи.Сумма = СтрокаТаблицы.НачисленнаяАмортизация;
			
			СоздатьЗаписьПоРегиструБухгалтерии(СтруктураШапкиДокумента,СтрокаТаблицы,СтруктураКурсыВалют, СтруктураЗаписи);
			
			
		КонецЕсли;
		
		//по счету снижения
		Если НЕ СтрокаТаблицы.СуммаОбесценения = 0 Тогда
			
			СтруктураЗаписи.Счет = СтрокаТаблицы.СчетСниженияСтоимости;
			СтруктураЗаписи.Содержание = "Перемещение ОС (накопленный убыток)"; 
			СтруктураЗаписи.ОбъектДт = СтрокаТаблицы.бит_му_Объект_старый;
			СтруктураЗаписи.ОбъектКт = СтрокаТаблицы.бит_му_Объект;
			СтруктураЗаписи.Сумма = СтрокаТаблицы.СуммаОбесценения;

			СоздатьЗаписьПоРегиструБухгалтерии(СтруктураШапкиДокумента,СтрокаТаблицы,СтруктураКурсыВалют, СтруктураЗаписи);
			
		КонецЕсли; 
		
	КонецЦикла;
	//Конец_бит_Магомедов_20.07.2012 
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

//Начало_бит_Магомедов_20.07.2012 
// бит_MZyubin Процедура формирует проводку по формированию резерва/возврату обесценения ОС
//
// Параметры:
//  СтруктураШапкиДокумента  – Структура
//  СтрокаТаблицы            - СтрокаТаблицыЗначений
//  ВалютаМУ                 - СправочникСсылка.Валюты
//  СтруктураКурсыВалют      - Структура
//                
Процедура СоздатьЗаписьПоРегиструБухгалтерии(СтруктураШапкиДокумента,СтрокаТаблицы,СтруктураКурсыВалют, СтруктураЗаписи)

	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// заполнение атрибутов записи	
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										   ,СтруктураШапкиДокумента.Организация
										   ,СтруктураШапкиДокумента.Дата
										   ,мВалютаМеждУчета
										   ,
										   ,
										   ,СтруктураЗаписи.Сумма
										   ,СтруктураЗаписи.Содержание);
										   
										   
	
	СтруктураПараметров["СчетДт"]  = СтруктураЗаписи.Счет;
	СтруктураПараметров["СчетКт"]  = СтруктураЗаписи.Счет;
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	//заполнение субконто
		//Дт
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["СчетДт"]
	                                            ,Запись["СубконтоДт"]
												,"ОсновныеСредства"
												,СтрокаТаблицы.ОсновноеСредство);		
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["СчетДт"]
	                                            ,Запись["СубконтоДт"]
												,"Объект"
												,СтруктураЗаписи.ОбъектДт);
		//Кт											
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["СчетКт"]
	                                            ,Запись["СубконтоКт"]
												,"ОсновныеСредства"
												,СтрокаТаблицы.ОсновноеСредство);		
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["СчетКт"]
	                                            ,Запись["СубконтоКт"]
												,"Объект"
												,СтруктураЗаписи.ОбъектКт); 
												
	//
	Запись.ВидДвиженияМСФО = СтрокаТаблицы.ВидДвиженияМСФО;
	
	// выполнение валютных пересчетов	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
													,Запись
													,МассивИмен
													,СтруктураКурсыВалют
													,СтруктураКурсыВалют.Документ);
													
	
КонецПроцедуры //СоздатьЗаписьПоСписаниюАмортизации()
//Конец_бит_Магомедов_20.07.2012 

//Начало_бит_Магомедов_20.07.2012 
// бит_MZyubin Функция получает параметры ОС для массива ОС или одного основного средства
//
// Параметры:
//  МассивОС  – Массив
//
// Возвращаемое значение:
// ПараметрыОС - Соответствие
//
Функция ПолучитьПараметры(ПереченьОбъектов)   Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"  ,Организация);
	СтруктураПараметров.Вставить("Дата"         ,Дата);
	СтруктураПараметров.Вставить("ЭтоНовый"     ,ЭтоНовый());
	СтруктураПараметров.Вставить("МоментВремени",Новый МоментВремени(Дата));
	СтруктураПараметров.Вставить("ВидДвижения"  ,Перечисления.бит_му_ВидыДвиженияОбесценения.ФормированиеРезерва);
	
	Параметры = бит_му_ВНА.ПолучитьПараметрыДляОбесцененияВНА(ПереченьОбъектов,СтруктураПараметров);
	
	Возврат Параметры;

КонецФункции //ПолучитьПараметрыОС()

// бит_MZyubin Функция получает курсы валют, необходимые для выполнения валютных пересчетов 
//
// Параметры:
//  СтруктураШапкиДокумента  – Структура
//  Отказ                    - Булево
//  Заголовок                - Строка
//
Функция СформироватьСтруктуруКурсовВалют(СтруктураШапкиДокумента,Отказ,Заголовок) 
	
	// получим курсы валют, неоходимые для выполнения пересчетов
	ВидыКурсов = Новый Структура("Упр,Регл,МУ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата,ВидыКурсов);
	СтруктураКурсыВалют.Вставить("Документ",СтруктураКурсыВалют.МУ);
	
	СтрКурсов = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	Если НЕ ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		
		ТекстСообщения = "Для организации """+СтруктураШапкиДокумента.Организация+""" не указана валюта международного учета!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,,Заголовок,Отказ);
		
	КонецЕсли; 
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции //СформироватьСтруктуруКурсовВалют()

мКоличествоСубконтоМУ = 4;
//Конец_бит_Магомедов_20.07.2012

#КонецЕсли
