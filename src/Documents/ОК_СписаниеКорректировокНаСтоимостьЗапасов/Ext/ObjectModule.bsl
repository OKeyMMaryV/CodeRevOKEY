Функция ДобавитьОстаткиИОборотыВЗапрос(Запрос,счет,КромеВидДвиженияМСФО_,Субконто2=Неопределено)
	вт="ОстаткиИОборотыСчет"+строка(счет.код);
	Запрос.Текст ="ВЫБРАТЬ
	              |	ОстаткиИОбороты.Субконто1,
	              |	ОстаткиИОбороты.Счет,
	              |	СУММА(ОстаткиИОбороты.СуммаМУНачальныйОстатокДт) КАК НачальныйОстатокДт,
	              |	СУММА(ОстаткиИОбороты.СуммаМУНачальныйОстатокКт) КАК НачальныйОстатокКт,
	              |	СУММА(ОстаткиИОбороты.СуммаМУКонечныйОстатокДт) КАК КонечныйОстатокДт,
	              |	СУММА(ОстаткиИОбороты.СуммаМУКонечныйОстатокКт) КАК КонечныйОстатокКт,
	              |	СУММА(ОстаткиИОбороты.СуммаМУОборотДт) КАК ОборотДт,
	              |	СУММА(ОстаткиИОбороты.СуммаМУОборотКт) КАК ОборотКт,
	              |	ОстаткиИОбороты.СуммаМУНачальныйОстаток КАК НачальныйОстаток,
	              |	ОстаткиИОбороты.СуммаМУКонечныйОстаток КАК КонечныйОстаток,
	              |	ОстаткиИОбороты.СуммаМУОборот КАК Оборот
	              |ПОМЕСТИТЬ ОстаткиИОборотыСчетХХХ
	              |ИЗ
	              |	РегистрБухгалтерии.бит_Дополнительный_2.ОстаткиИОбороты(
	              |			&ДатаНач,
	              |			&ДатаКон,
	              |			,
	              |			,
	              |			Счет В ИЕРАРХИИ (&Счет),
	              |			&Субконто,
	              |			Организация = &Организация
	              |				И &УсловиеСубконто2
	              |				И ВЫБОР
	              |					КОГДА &ВидДвиженияМСФО = НЕОПРЕДЕЛЕНО
	              |						ТОГДА ИСТИНА
	              |					ИНАЧЕ не ВидДвиженияМСФО = &ВидДвиженияМСФО
	              |				КОНЕЦ) КАК ОстаткиИОбороты
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ОстаткиИОбороты.Субконто1,
	              |	ОстаткиИОбороты.Счет,
	              |	ОстаткиИОбороты.СуммаМУНачальныйОстаток,
	              |	ОстаткиИОбороты.СуммаМУКонечныйОстаток,
	              |	ОстаткиИОбороты.СуммаМУОборот";
	Запрос.текст=СтрЗаменить(Запрос.Текст,"ОстаткиИОборотыСчетХХХ",вт);
	Запрос.УстановитьПараметр("Счет",Счет ); 
	субконто=Новый СписокЗначений;
	субконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Объект);
	Если не Субконто2=Неопределено Тогда
		субконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2[Субконто2.метаданные().имя]);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"&УсловиеСубконто2","выбор когда &Субконто2=Неопределено тогда истина иначе Субконто2 = &Субконто2 конец");
		Запрос.УстановитьПараметр("Субконто2",Субконто2);
	Иначе
		Запрос.УстановитьПараметр("УсловиеСубконто2",истина);
	КонецЕсли;	
	Запрос.УстановитьПараметр("Субконто",субконто); 
	Запрос.УстановитьПараметр("ВидДвиженияМСФО",КромеВидДвиженияМСФО_);
	
	Запрос.Выполнить();
	Возврат вт;		  
КонецФункции

Функция ПодставитьЗначенияОперандов(формула,источник) 
	выражение=формула.выражение;
	
	Для Каждого операнд Из формула.операнды
	Цикл
		выражение=СтрЗаменить(выражение,операнд.Ключ,Формат(вычислить("источник."+операнд.Ключ),"ЧРД=.; ЧН=0; ЧГ="));		
	КонецЦикла;		
	
	Возврат выражение;
КонецФункции

Функция СтруктураФОрмулы(формула) 
	СтруктураФормулы=Новый Структура("Выражение,Операнды");
	ОперандыСтр=формула;
	
	операндыСтр=СтрЗаменить(операндыСтр,"(",",");
	операндыСтр=СтрЗаменить(операндыСтр,")",",");
	операндыСтр=СтрЗаменить(операндыСтр,"+",",");
	операндыСтр=СтрЗаменить(операндыСтр,"*",",");
	операндыСтр=СтрЗаменить(операндыСтр,"-",",");
	операндыСтр=СтрЗаменить(операндыСтр,"/",",");
	
	Возврат Новый Структура("Выражение,Операнды",формула,Новый Структура(""+операндыСтр+""));
КонецФункции	

Процедура РасчитатьСРасшифровкой(стр,формула,источник) 
	Попытка
		стр.Расшифровка=ПодставитьЗначенияОперандов(формула,источник);
		стр.сумма=вычислить(стр.Расшифровка);
	Исключение
		стр.Расшифровка=стр.Расшифровка+"	"+ОписаниеОшибки();
		//БИТ АКриштопов 30032016 ++
		Если источник.Счет1_Оборот > 0 Тогда
			стр.сумма=источник.Счет1_Оборот;
		Иначе
			стр.сумма=0;
		КонецЕсли;
		//БИТ АКриштопов 30032016 --
	КонецПопытки;	
КонецПроцедуры	

Процедура ЗаполнитьТаблицу() Экспорт 
	СоответствиеСчета=ЗаполнитьСоответствиеСчета();
	
		//Д СчЗатрат-((Дебетовый об. сч. СчЗатрат+ Сн сч. СчЗапасов) /( Дебетовый об. сч. СчЗапасов+ Сн сч. СчЗапасов)* Кредитовый об. сч. СчЗапасов))
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Организация",Организация);
	

	Если Не ЗначениеЗаполнено(СоответствиеСчета[СчетМСФО]) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задано соответствие для счета "+строка(СчетМСФО.Код)+"	"+ строка(СчетМСФО.Наименование));
		Возврат;
	КонецЕсли;	
	
	ВТ1=ДобавитьОстаткиИОборотыВЗапрос(Запрос,СчетМСФО,перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО);
	ВТ2=ДобавитьОстаткиИОборотыВЗапрос(Запрос,СоответствиеСчета[СчетМСФО].Счет,Неопределено,СоответствиеСчета[СчетМСФО].ТипЗатрат);
	ВТ3=ДобавитьОстаткиИОборотыВЗапрос(Запрос,ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду("21301"),Неопределено);

	Запрос.Текст ="ВЫБРАТЬ
	              |	ЕСТЬNULL(ОстаткиИОбороты1.Субконто1, ЕСТЬNULL(ОстаткиИОбороты2.Субконто1, ОстаткиИОбороты3.Субконто1)) КАК Субконто1,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты1.НачальныйОстатокДт, 0)) КАК Счет1_НачальныйОстатокДт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты1.НачальныйОстатокКт, 0)) КАК Счет1_НачальныйОстатокКт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты1.КонечныйОстатокДт, 0)) КАК Счет1_КонечныйОстатокДт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты1.КонечныйОстатокКт, 0)) КАК Счет1_КонечныйОстатокКт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты1.ОборотДт, 0)) КАК Счет1_ОборотДт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты1.ОборотКт, 0)) КАК Счет1_ОборотКт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты1.НачальныйОстаток, 0)) КАК Счет1_НачальныйОстаток,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты1.КонечныйОстаток, 0)) КАК Счет1_КонечныйОстаток,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты1.Оборот, 0)) КАК Счет1_Оборот,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты2.НачальныйОстатокДт, 0)) КАК Счет2_НачальныйОстатокДт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты2.НачальныйОстатокКт, 0)) КАК Счет2_НачальныйОстатокКт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты2.КонечныйОстатокДт, 0)) КАК Счет2_КонечныйОстатокДт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты2.КонечныйОстатокКт, 0)) КАК Счет2_КонечныйОстатокКт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты2.ОборотДт, 0)) КАК Счет2_ОборотДт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты2.ОборотКт, 0)) КАК Счет2_ОборотКт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты2.НачальныйОстаток, 0)) КАК Счет2_НачальныйОстаток,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты2.КонечныйОстаток, 0)) КАК Счет2_КонечныйОстаток,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты2.Оборот, 0)) КАК Счет2_Оборот,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты3.НачальныйОстатокДт, 0)) КАК Счет3_НачальныйОстатокДт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты3.НачальныйОстатокКт, 0)) КАК Счет3_НачальныйОстатокКт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты3.КонечныйОстатокДт, 0)) КАК Счет3_КонечныйОстатокДт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты3.КонечныйОстатокКт, 0)) КАК Счет3_КонечныйОстатокКт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты3.ОборотДт, 0)) КАК Счет3_ОборотДт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты3.ОборотКт, 0)) КАК Счет3_ОборотКт,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты3.НачальныйОстаток, 0)) КАК Счет3_НачальныйОстаток,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты3.КонечныйОстаток, 0)) КАК Счет3_КонечныйОстаток,
	              |	СУММА(ЕСТЬNULL(ОстаткиИОбороты3.Оборот, 0)) КАК Счет3_Оборот
	              |ИЗ
	              |	вт1 КАК ОстаткиИОбороты1
	              |		ПОЛНОЕ СОЕДИНЕНИЕ вт2 КАК ОстаткиИОбороты2
	              |		ПО ОстаткиИОбороты1.Субконто1 = ОстаткиИОбороты2.Субконто1
	              |		ПОЛНОЕ СОЕДИНЕНИЕ вт3 КАК ОстаткиИОбороты3
	              |		ПО ОстаткиИОбороты1.Субконто1 = ОстаткиИОбороты3.Субконто1
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ЕСТЬNULL(ОстаткиИОбороты1.Субконто1, ЕСТЬNULL(ОстаткиИОбороты2.Субконто1, ОстаткиИОбороты3.Субконто1))";	
	
	Запрос.УстановитьПараметр("СчетМСФО",СчетМСФО ); 
	
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"вт1",вт1);
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"вт2",вт2);
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"вт3",вт3);	
	
	РезультатЗапроса = Запрос.Выполнить();
	таб_=РезультатЗапроса.Выгрузить();
	
	формула=СтруктураФормулы("Счет1_ОборотДт-(Счет3_ОборотКт*(Счет1_ОборотДт+Счет2_НачальныйОстаток))/(Счет3_ОборотДт+Счет3_НачальныйОстаток)");
	
	Таблица.Очистить();
	Для Каждого стр Из таб_	Цикл
		нов=Таблица.Добавить();
	    нов.Объект=стр.Субконто1;		
		РасчитатьСРасшифровкой(нов,формула,стр);		
	КонецЦикла;		
КонецПроцедуры

Процедура ДвиженияПоРегистрам(Отказ, Заголовок);
	//Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//					|	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Объект,
	//					|	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Сумма,
	//					|	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка.Дата,
	//					|	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка.Организация,
	//					|	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка.ВидДвиженияМСФО,
	//					|	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка.бит_БК_ЦФО,
	//					|	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка.Период,
	//					|	ВложенныйЗапрос.Номенклатура
	//					|ИЗ
	//					|	Документ.ОК_СписаниеКорректировокНаСтоимостьЗапасов.Таблица КАК ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица,
	//					|	(ВЫБРАТЬ
	//					|		Номенклатура.Ссылка КАК Номенклатура
	//					|	ИЗ
	//					|		Справочник.Номенклатура КАК Номенклатура
	//					|	ГДЕ
	//					|		Номенклатура.Наименование = ""Товарчик"") КАК ВложенныйЗапрос
	//					|ГДЕ
	//					|	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка = &Ссылка");
	
	//ОК Довбешка Т. 08.10.2014 
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Объект,
	                    |	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Сумма,
	                    |	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка.Дата,
	                    |	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка.Организация,
	                    |	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка.ВидДвиженияМСФО,
	                    |	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка.бит_БК_ЦФО,
	                    |	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка.Период,
	                    |	ВложенныйЗапрос.Номенклатура
	                    |ИЗ
	                    |	Документ.ОК_СписаниеКорректировокНаСтоимостьЗапасов.Таблица КАК ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица,
	                    |	(ВЫБРАТЬ
	                    |		Номенклатура.Ссылка КАК Номенклатура
	                    |	ИЗ
	                    |		Справочник.Номенклатура КАК Номенклатура
	                    |	ГДЕ
	                    |		Номенклатура.Код = ""00000039522"") КАК ВложенныйЗапрос
	                    |ГДЕ
	                    |	ОК_СписаниеКорректировокНаСтоимостьЗапасовТаблица.Ссылка = &Ссылка");
	//ОК Довбешка Т.
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);			 
	таблицаДокумента=Запрос.Выполнить().Выгрузить();
	
	Движения.бит_Дополнительный_2.Записывать = Истина;
	Движения.бит_Дополнительный_2.Очистить();

	СоответствиеСчета=ЗаполнитьСоответствиеСчета();

	Для Каждого СтрокаТаблицы Из таблицаДокумента Цикл
		Если СтрокаТаблицы.сумма=0 тогда
			Продолжить;	
		КонецЕсли;
		Запись = Движения.бит_Дополнительный_2.Добавить();
		Запись.Организация = Организация;
		Запись.Период      = Дата;
		Запись.Активность = Истина;
		//Запись.Содержание=Содержание;
		Запись.ВидДвиженияМСФО = СтрокаТаблицы.ВидДвиженияМСФО;
		
		Если СтрокаТаблицы.сумма>0 тогда
			                         			
			Запись.СчетДт = СоответствиеСчета[СчетМСФО].Счет;
			Запись.СчетКт = СчетМСФО;

			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Номенклатура"	   , СтрокаТаблицы.Номенклатура);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Объект"	   , СтрокаТаблицы.Объект);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ОК_ТипыЗатратВключаемыхВСтоимостьТоваров"	   , СоответствиеСчета[СчетМСФО].ТипЗатрат);
	
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Объект"	   , СтрокаТаблицы.Объект );
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Функции"	   , СтрокаТаблицы.бит_БК_ЦФО);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Периоды"	   , СтрокаТаблицы.Период);

				
			Запись.СуммаРегл  	= СтрокаТаблицы.Сумма;
		иначе
			
			Запись.СчетДт = СчетМСФО;
			Запись.СчетКт = СоответствиеСчета[СчетМСФО].Счет;

			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Объект"	   , СтрокаТаблицы.Объект);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Функции"	   , СтрокаТаблицы.бит_БК_ЦФО);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Периоды"	   , СтрокаТаблицы.Период);

			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Номенклатура"	   , СтрокаТаблицы.Номенклатура );
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Объект"	   , СтрокаТаблицы.Объект);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ОК_ТипыЗатратВключаемыхВСтоимостьТоваров"	   , СоответствиеСчета[СчетМСФО].ТипЗатрат);

			
			Запись.СуммаРегл  	= -СтрокаТаблицы.Сумма;
		КонецЕсли;	 
		
		Запись.СуммаУпр   = Запись.СуммаРегл ;
		Запись.СуммаМУ    = Запись.СуммаРегл ;
 
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок Для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проведение
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ОбщегоНазначенияБПВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
КонецПроцедуры

Процедура СоответствиеСчетаВставить(СоответствиеСчета,СчетЗатрат,СчетЗапасов,ТипЗатратНаименование)
	СоответствиеСчета.Вставить(
	ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду(СчетЗатрат),
	Новый Структура("Счет,ТипЗатрат",
	ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду(СчетЗапасов),
	Справочники.ОК_ТипыЗатратВключаемыхВСтоимостьТоваров.НайтиПоНаименованию(ТипЗатратНаименование)));
КОнецПроцедуры

Функция ЗаполнитьСоответствиеСчета() 
	СоответствиеСчета=Новый Соответствие;

	СоответствиеСчетаВставить(СоответствиеСчета,"71501","21304",?(Организация.Наименование="ООО ""Вендор""","Обработка товаров (внешняя)","Обработка товаров (внешняя)"));
	//ОК+ Аверьянова #AT-1189227# от 28.05.2014
	//СоответствиеСчетаВставить(СоответствиеСчета,"71502",?(Организация.Наименование="ОКЕЙ Лоджистикс","21307","21304"),"Затраты на доставку");
	СоответствиеСчетаВставить(СоответствиеСчета,"71502","21304","Затраты на доставку");
	// #AT-1189227# продолжение от 10.06.2014 
	//СоответствиеСчетаВставить(СоответствиеСчета,"71510","21307","Затраты на таможенные услуги - с 2013 г.");
	//СоответствиеСчетаВставить(СоответствиеСчета,"71511","21307","Затраты на таможенные платежи - с 2013 г.");
	// #AT-1189227# продолжение от 04.08.2014 
	//СоответствиеСчетаВставить(СоответствиеСчета,"71510","21304","Затраты на таможенные услуги - с 2013 г.");
	//СоответствиеСчетаВставить(СоответствиеСчета,"71511","21304","Затраты на таможенные платежи - с 2013 г."); 
	СоответствиеСчетаВставить(СоответствиеСчета,"71510","21307","Затраты на таможенные услуги - с 2013 г.");
	СоответствиеСчетаВставить(СоответствиеСчета,"71511","21307","Затраты на таможенные платежи - с 2013 г."); 
	//ОК- Аверьянова
	
	СоответствиеСчетаВставить(СоответствиеСчета,"71504","21304","Затраты на хранение товара");
	СоответствиеСчетаВставить(СоответствиеСчета,"71506","21304","Выручка от логистических услуг");
	СоответствиеСчетаВставить(СоответствиеСчета,"71601","21305","Защитные материалы");
	СоответствиеСчетаВставить(СоответствиеСчета,"71602","21305","Упаковка");
	СоответствиеСчетаВставить(СоответствиеСчета,"71603","21305","Элементы ценников");
	
	Возврат СоответствиеСчета;
КонецФункции