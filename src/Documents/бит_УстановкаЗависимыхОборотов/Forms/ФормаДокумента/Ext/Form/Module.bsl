
#Область ОписаниеПеременных

&НаКлиенте 
Перем мТекФункции; // Хранит текущие значения функций. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли; 
	
	ЗаполнитьКэшЗначений();
	
	// Подготовка параметров, необходимых для отображения доп. измерений.
	СоответствиеИмен = Новый Соответствие;
	Для каждого ТекЭлемент Из фКэшЗначений.ИзмеренияДоп Цикл
		СтруктураИмен = Новый Структура("ИмяПоля, Префикс, Постфикс", "ЗависимыеОбороты" + ТекЭлемент.Ключ + "_Зависимый", "", " зависимый");
		СоответствиеИмен.Вставить(ТекЭлемент.Ключ, СтруктураИмен);
	КонецЦикла;
	
	// Элементы управления для измерений несуществующих в смежном решении	
	// создаются программно для унификации кода.
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправленияУстановкаЗависимыхОборотов(Элементы);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправленияУстановкаЗависимыхОборотовДеревоЗависимостей(Элементы, ЭтотОбъект);
	
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, 
		"ДеревоЗависимостей", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"ЗависимыеОбороты", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"ЗависимыеОбороты", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений, СоответствиеИмен);		
	
	// Установить активный реквизит.
	СтруктураРеквизитов = Новый Структура("Сценарий");
	бит_РаботаСДиалогамиСервер.АктивизироватьРеквизитВФорме(Объект, ЭтаФорма, СтруктураРеквизитов);
	
	// Определение Ид ЗависимыхОборотов для установки в новой строке.
	фИдЗависимыеОбороты = бит_Бюджетирование.ОпределитьТекущийИД(Объект.ЗависимыеОбороты.Выгрузить(), "ИД");
	
	// Структуры соответствия реквизитов дерева и табличной части.
	ЗаполнитьСтруктурыРеквизитов();
	
	ОбновитьДеревоЗависимостей();
	
	// При необходимости позиционируемся на указанной строке;
	Инд = Параметры.НомерТекущейСтроки - 1;
	Если Инд >= 0 И Инд <= Объект.ЗависимыеОбороты.Количество()-1 Тогда 		
		СтрокаТаблицы = Объект.ЗависимыеОбороты[Инд];  		
		ВеткаДерева = ДеревоЗависимостей.ПолучитьЭлементы();
		ИдентификаторСтроки = НайтиСтрокуДерева(ВеткаДерева, СтрокаТаблицы.ИД);
		Если ИдентификаторСтроки <> Неопределено Тогда
			Элементы.ДеревоЗависимостей.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;		
	КонецЕсли;
	
	// Оформление таблиц.
	ОФормитьТаблицу("ДеревоЗависимостей");
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	                     
	мТекФункции = Новый Структура;
	мТекФункции.Вставить("ФункцияСумма"		, фКэшЗначений.ПустаяФункция);
	мТекФункции.Вставить("ФункцияКоличество", фКэшЗначений.ПустаяФункция);
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоЗависимостей, ДеревоЗависимостей.ПолучитьЭлементы(), Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбратьПериодЗавершение" И Источник = УникальныйИдентификатор Тогда	
		РедактированиеПериодаЗавершение(Параметр.Результат, Неопределено);
	ИначеЕсли ИмяСобытия = "Запись_СтатьиОборотов" Тогда
		ОбработатьоповещениеОбИзмененииСтатьиОборотов(Источник);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_УстановкаЗависимыхОборотов";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьКоэффициентыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКРедактированиюКоэффицентов();	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗначений

&НаКлиенте
Процедура ДеревоЗависимостейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДеревоЗависимостейКодификатор ИЛИ Поле = Элементы.ДеревоЗависимостейТипСтатьиОборотов Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗависимостейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элементы.ДеревоЗависимостей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекУровеньСтроки = ТекущиеДанные.УровеньСтроки;
		Отказ = Истина;
		Если Не (ТекУровеньСтроки = 0 И Копирование) Тогда 		
			Если Копирование Тогда
				СкопироватьСтрокуДерева(ТекущиеДанные.ПолучитьИдентификатор());
			Иначе
				
				ВеткаДерева = ТекущиеДанные.ПолучитьЭлементы();
				НоваяСтрока = ВеткаДерева.Добавить(); 				
				НовИдентификатор = НоваяСтрока.ПолучитьИдентификатор();
				
				НоваяСтрока.УровеньСтроки = ТекУровеньСтроки + 1;
				УстановитьНовыйИд(НовИдентификатор);
				Элементы.ДеревоЗависимостей.ТекущаяСтрока = НовИдентификатор;
				ЗаполнитьСтрокуЗависимыхОборотов(НовИдентификатор);
				
			КонецЕсли;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Копирование Тогда
		бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоЗависимостей ,ДеревоЗависимостей.ПолучитьЭлементы() ,Истина);
	КонецЕсли; 

	
КонецПроцедуры

// Процедура выполняет копирование строки дерева с подчиненными строками. 
// 
// Параметры:
//  ИдСтроки - Число
// 
&НаСервере
Процедура СкопироватьСтрокуДерева(ИдСтроки)
	
	ТекущаяСтрока = ДеревоЗависимостей.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		Если НЕ СтрокаРодитель = Неопределено Тогда
			
			// Копирование текущей строки.
			ТекущаяКоллекция = СтрокаРодитель.ПолучитьЭлементы();
			
			НоваяСтрока = ТекущаяКоллекция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			НовИд = НоваяСтрока.ПолучитьИдентификатор();
			УстановитьНовыйИд(НовИд);
			ЗаполнитьСтрокуЗависимыхОборотов(НовИд);
			
			Элементы.ДеревоЗависимостей.ТекущаяСтрока = НовИд;			
			
			// Копирование подчиненных строк.
			СкопироватьПодчиненныеСтроки(ТекущаяСтрока, НоваяСтрока);
			
		КонецЕсли; 
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура выполняет копирование подчиненных строк дерева. 
// 
// Параметры:
//  СтрокаИсточник - ДанныеФормыЭлементДерева.
//  СтрокаПриемник - ДанныеФормыЭлементДерева.
// 
&НаСервере
Процедура СкопироватьПодчиненныеСтроки(СтрокаИсточник, СтрокаПриемник)

	КоллекцияИсточник = СтрокаИсточник.ПолучитьЭлементы();
	КоллекцияПриемник = СтрокаПриемник.ПолучитьЭлементы();
	Для каждого ТекСтрока Из КоллекцияИсточник Цикл
		НоваяСтрока = КоллекцияПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		УстановитьНовыйИд(НоваяСтрока.ПолучитьИдентификатор());
		ЗаполнитьСтрокуЗависимыхОборотов(НоваяСтрока.ПолучитьИдентификатор());
		СкопироватьПодчиненныеСтроки(ТекСтрока, НоваяСтрока);
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗависимостейПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЗависимостей.ТекущиеДанные;
	Если ТекущиеДанные.УровеньСтроки = 0 Тогда    	
		Отказ = Истина;    	
	КонецЕсли; 
	
	Если Не Отказ Тогда   		
		НайтиУдалитьСтрокиТаблицы(ТекущиеДанные.ПолучитьИдентификатор()); 		
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗависимостейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЗависимостей.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, 
																фКэшЗначений.ИзмеренияДоп, 
																фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
	мТекФункции.ФункцияСумма      = ТекущиеДанные.ФункцияСумма;
	мТекФункции.ФункцияКоличество = ТекущиеДанные.ФункцияКоличество;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗависимостейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанные = Элементы.ДеревоЗависимостей.ТекущиеДанные;
		ЗаполнитьСтрокуЗависимыхОборотов(ТекущиеДанные.ПолучитьИдентификатор());	
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры
             
&НаКлиенте
Процедура ДеревоЗависимостейСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗависимостей.ТекущиеДанные;
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, 
																фКэшЗначений.ИзмеренияДоп, 
																фКэшЗначений.НастройкиИзмерений);
	ИзменениеСтатьиОборотов(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗависимостейФункцияСуммаПриИзменении(Элемент)
	
	ПроверитьКонтекстФункции("ФункцияСумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗависимостейФункцияКоличествоПриИзменении(Элемент)
	
	ПроверитьКонтекстФункции("ФункцияКоличество");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПодключаемыеКомандыЭлементовТаблицФормы

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, ИмяПоля,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
	
#КонецОбласти 

&НаКлиенте
Процедура КомандаНастройкиПериода(Команда)
	
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.ДатаНачала);
	ПараметрыПередачи.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУровеньВниз(Команда)
	
	ТекущаяСтрока   = Элементы.ДеревоЗависимостей.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено 
		  Тогда
		  
	    РодительСтроки = ТекущаяСтрока.ПолучитьРодителя();
		Если РодительСтроки = Неопределено Тогда
			РодительСтроки = ДеревоЗависимостей;
		КонецЕсли;	
		
		КоллекцияРодитель = РодительСтроки.ПолучитьЭлементы();
		Если КоллекцияРодитель.Количество()>=2  Тогда
		
			ТекущийИндекс = КоллекцияРодитель.Индекс(ТекущаяСтрока);
			ТекущийИндекс = ТекущийИндекс-1;
			
			Если ТекущийИндекс >= 0 Тогда
			  	
			  СкопироватьИерархию(КоллекцияРодитель[ТекущийИндекс],ТекущаяСтрока);
		      КоллекцияРодитель.Удалить(КоллекцияРодитель.Индекс(ТекущаяСтрока));
			  
			  Модифицированность = Истина;

			КонецЕсли; 
			
		КонецЕсли; 
		 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУровеньВверх(Команда)
	
	ТекущаяСтрока   = Элементы.ДеревоЗависимостей.ТекущиеДанные;
	РодительСтроки = ТекущаяСтрока.ПолучитьРодителя();
	Если ТекущаяСтрока <> Неопределено 
		 И РодительСтроки <> Неопределено Тогда
		 
		 Если РодительСтроки.УровеньСтроки > 0 Тогда
			 
			РодительРодителя = РодительСтроки.ПолучитьРодителя();

			Если РодительРодителя <> Неопределено  Тогда

				ИндексВставки = РодительРодителя.ПолучитьЭлементы().Индекс(РодительСтроки)+1;
				СкопироватьИерархию(РодительРодителя, ТекущаяСтрока, ИндексВставки, Истина);

			Иначе	

				ИндексВставки = ДеревоЗависимостей.ПолучитьЭлементы().Индекс(РодительСтроки)+1;			
				СкопироватьИерархию( ДеревоЗависимостей, ТекущаяСтрока, ИндексВставки, Истина);

			КонецЕсли; 

			КоллекцияРодитель = РодительСтроки.ПолучитьЭлементы();
			КоллекцияРодитель.Удалить(КоллекцияРодитель.Индекс(ТекущаяСтрока));
			
			Модифицированность = Истина;

		 КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаКлиенте 
Процедура РедактированиеПериодаЗавершение(ПериодРезультат, ДополнительныеДанные)

	Если ПериодРезультат <> Неопределено Тогда
	
		Объект.ДатаНачала    = ПериодРезультат.ДатаНачала;
		Объект.ДатаОкончания = ПериодРезультат.ДатаОкончания;
		
		ЭтотОбъект.Модифицированность = Истина; 		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект." + МетаданныеОбъекта.Имя));
		
	// Пустая пользовательская функция.
	фКэшЗначений.Вставить("ПустаяФункция", Справочники.бит_ПользовательскиеФункции.ПустаяСсылка());	
	
	// Настройки из модуля объекта.
	фКэшЗначений.Вставить("Измерения"		  , ДокументОбъект.мИзмерения);
	фКэшЗначений.Вставить("ИзмеренияДоп"	  , ДокументОбъект.мИзмеренияДоп);
	фКэшЗначений.Вставить("НастройкиИзмерений", ДокументОбъект.мНастройкиИзмерений);
	                 	      
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуДерева(ВеткаДерева, ИскомыйИД)

	Результат = Неопределено;
	
	Для каждого СтрокаДерева Из ВеткаДерева Цикл
		
		Если СтрокаДерева.ИД = ИскомыйИД Тогда
			Результат = СтрокаДерева.ПолучитьИдентификатор();
			Прервать;
		Иначе	
			ВеткаДерева = СтрокаДерева.ПолучитьЭлементы();
			Результат = НайтиСтрокуДерева(ВеткаДерева, ИскомыйИД);
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктурыРеквизитов()
 
 	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все", "имя");
	фРеквизитыСтроки   = Новый Структура;
	фРеквизитыРодителя = Новый Структура;
	
	// Измерения бюджетирования.
	Для каждого КлючИЗначение Из Измерения Цикл
		
		ИмяИзмерения = КлючИЗначение.Ключ;
		
		Если ИмяИзмерения = "Сценарий" Тогда		
			Продолжить;  		
		КонецЕсли; 
		
		фРеквизитыРодителя.Вставить(ИмяИзмерения,ИмяИзмерения);
		фРеквизитыСтроки.Вставить(ИмяИзмерения	,ИмяИзмерения + "_Зависимый");
		       	
	КонецЦикла; 
	
	// Специфические реквизиты зависимых оборотов.
	фРеквизитыСтроки.Вставить("ПрофильРаспределения",	"ПрофильРаспределения");
	фРеквизитыСтроки.Вставить("КоэффициентКоличество",	"КоэффициентКоличество");
	фРеквизитыСтроки.Вставить("КоэффициентСумма",		"КоэффициентСумма");
	фРеквизитыСтроки.Вставить("РеквизитКоличество",		"РеквизитКоличество");
	фРеквизитыСтроки.Вставить("РеквизитСумма",			"РеквизитСумма");
	фРеквизитыСтроки.Вставить("ФункцияСумма",			"ФункцияСумма");
	фРеквизитыСтроки.Вставить("ФункцияКоличество",		"ФункцияКоличество");
	фРеквизитыСтроки.Вставить("УчетСумма",				"УчетСумма");
	фРеквизитыСтроки.Вставить("УчетКоличество",			"УчетКоличество");
	
КонецПроцедуры

&НаСервере
Процедура ОФормитьТаблицу(ПрефиксТаблицы, СтатьяОборотов = Неопределено) 
	
	УдалитьСтароеОформление = Ложь;
	
	Если СтатьяОборотов = Неопределено Тогда
	
		УдалитьСтароеОформление = Истина;
	
		// Формирование массива статей, по которым нужно добавить элементы УО.
		ТаблицаЗо = Объект.ЗависимыеОбороты.Выгрузить();
		МассивСтатей = ТаблицаЗо.ВыгрузитьКолонку("СтатьяОборотов");
		Для каждого ЭлементМассиваЗависимых Из ТаблицаЗо.ВыгрузитьКолонку("СтатьяОборотов_Зависимый") Цикл
			МассивСтатей.Добавить(ЭлементМассиваЗависимых);  		
		КонецЦикла;
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		
		фСписокСтатей.ЗагрузитьЗначения(МассивСтатей);
		
	Иначе // Работаем только с одной статьей оборотов.		
		
		МассивСтатей = Новый Массив;
		
		НайденноеЗначение = фСписокСтатей.НайтиПоЗначению(СтатьяОборотов);
		Если НайденноеЗначение = Неопределено Тогда 			
			
			МассивСтатей.Добавить(СтатьяОборотов);
			фСписокСтатей.Добавить(СтатьяОборотов);
		
		КонецЕсли;  		
		
	КонецЕсли;	
	
	бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление, МассивСтатей, УдалитьСтароеОформление, "", ПрефиксТаблицы, "");
		
КонецПроцедуры

// Процедура выполняет проверку пригодности использования пользовательской функции 
// для расчета зависимых оборотов. 
// 
// Параметры:
//  ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ПроверитьКонтекстФункции(ИмяРеквизита)
	
	ТекущиеДанные = Элементы.ДеревоЗависимостей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные[ИмяРеквизита]) Тогда 
		
		Если Не КонтекстФункцииКорректен(ТекущиеДанные.ПолучитьИдентификатор(), ИмяРеквизита) Тогда
			
			ТекущиеДанные[ИмяРеквизита] = мТекФункции[ИмяРеквизита];
			
			ТекстСообщения = НСтр("ru = 'Для подбора доступны только пользовательские функции контекста ""Зависимые обороты"".'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		КонецЕсли;
		
	КонецЕсли; 
	
	мТекФункции[ИмяРеквизита] = ТекущиеДанные[ИмяРеквизита];
	
КонецПроцедуры

// Процедура копирует строку дерева значений вместе с подчиненными строками. Рекурсия.
// 
// Параметры:
//  СтрокаРодитель    - СтрокаДереваЗначений - Строка дерева, которой подчиняется строка копирования.
//  СтрокаКопирования - СтрокаДереваЗначений - копируемая строка дерева.
// 
&НаКлиенте
Процедура СкопироватьИерархию(СтрокаРодитель,СтрокаКопирования, ИндексВставки = Неопределено, УровеньВверх = Ложь)
	
	Если ТипЗнч(ИндексВставки) = Тип("Число") Тогда
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Вставить(ИндексВставки);
	Иначе	
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	Если СтрокаКопирования.УровеньСтроки = 2 и УровеньВверх Тогда 
		
		СвойстваИсключения = "РеквизитСумма, РеквизитКоличество, КоэффициентСумма, КоэффициентКоличество, ФункцияСумма, ФункцияКоличество";
		
	Иначе
		
		СвойстваИсключения = "";
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКопирования,,СвойстваИсключения);
	
	Если УровеньВверх Тогда
		НоваяСтрока.УровеньСтроки = СтрокаКопирования.УровеньСтроки - 1;
	Иначе
		НоваяСтрока.УровеньСтроки = СтрокаКопирования.УровеньСтроки + 1;
	КонецЕсли;

	Для каждого СтрокаПодчиненная Из СтрокаКопирования.ПолучитьЭлементы() Цикл
		
		СкопироватьИерархию(НоваяСтрока, СтрокаПодчиненная,,УровеньВверх);
		
	КонецЦикла; 
	
	НайтиУдалитьСтрокиТаблицы(СтрокаКопирования.ПолучитьИдентификатор());
	
	ЗаполнитьСтрокуЗависимыхОборотов(НоваяСтрока.ПолучитьИдентификатор());

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

&НаСервере
Процедура СинхронизироватьРеквизитыТаблицыИДерева(ИдТекущейСтрокиТч, ИдТекущейСтрокиДерева, Реквизиты, Приемник)
	
	ТекущиеДанныеТч 	= Объект.ЗависимыеОбороты.НайтиПоИдентификатору(ИдТекущейСтрокиТч);	
	ТекущиеДанныеДерева = ДеревоЗависимостей.НайтиПоИдентификатору(ИдТекущейСтрокиДерева);	
	Если ТекущиеДанныеТч = Неопределено ИЛИ ТекущиеДанныеДерева = Неопределено Тогда 		
		Возврат;    		
	КонецЕсли;
	
 	Для каждого КлючИЗначение Из Реквизиты Цикл
	 
		ИмяРеквДерево  = КлючИЗначение.Ключ;
	 	ИмяРеквТаблица = КлючИЗначение.Значение;
	 
	 	ЗначениеТаблица = ТекущиеДанныеТч[ИмяРеквТаблица];
	 	ЗначениеДерево  = ТекущиеДанныеДерева[ИмяРеквДерево];
		
		Если ЗначениеТаблица <> ЗначениеДерево Тогда
		 
		 	Если Приемник = "Таблица" Тогда
			 	ТекущиеДанныеТч[ИмяРеквТаблица] 	= ЗначениеДерево;
		 	ИначеЕсли Приемник = "Дерево" Тогда	
			 	ТекущиеДанныеДерева[ИмяРеквДерево]  = ЗначениеТаблица;
		 	КонецЕсли; 
		 
	 	КонецЕсли; 
	 
 	КонецЦикла; 	
 
КонецПроцедуры

&НаСервере
Процедура ИзменениеСтатьиОборотов(ИдТекущейСтроки, ЗаполнятьПоУмолчанию = Истина)

	ТекущиеДанныеДерева = ДеревоЗависимостей.НайтиПоИдентификатору(ИдТекущейСтроки);	
	Если ТекущиеДанныеДерева = Неопределено Тогда 		
		Возврат;    		
	КонецЕсли;
	
	СтатьяОборотов = ТекущиеДанныеДерева.СтатьяОборотов;
	ТекущиеДанныеДерева.УчетСумма = СтатьяОборотов.Учет_Сумма;
	ТекущиеДанныеДерева.УчетКоличество = СтатьяОборотов.Учет_Количество;
	
	Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
		
		ТекущиеДанныеДерева.Кодификатор = ?(ЗначениеЗаполнено(ТекущиеДанныеДерева.СтатьяОборотов.Кодификатор)
											,ТекущиеДанныеДерева.СтатьяОборотов.Кодификатор
											,ТекущиеДанныеДерева.СтатьяОборотов.Код);
		
		ТекущиеДанныеДерева.ТипСтатьиОборотов   = ТекущиеДанныеДерева.СтатьяОборотов.ТипСтатьи;
		
		Если ТекущиеДанныеДерева.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Тогда
			Если ЗаполнятьПоУмолчанию Тогда

				Если ТекущиеДанныеДерева.УчетКоличество Тогда
					ТекущиеДанныеДерева.КоэффициентКоличество = Объект.КоэффициентКоличество;
					ТекущиеДанныеДерева.РеквизитКоличество = Перечисления.бит_РеквизитыДляРасчетаЗависимостей.Количество;
				Иначе
					ТекущиеДанныеДерева.КоэффициентКоличество = 0;
					ТекущиеДанныеДерева.РеквизитКоличество = Перечисления.бит_РеквизитыДляРасчетаЗависимостей.ПустаяСсылка();
				КонецЕсли;
				
				Если ТекущиеДанныеДерева.УчетСумма Тогда
					ТекущиеДанныеДерева.КоэффициентСумма = Объект.КоэффициентСумма;
					ТекущиеДанныеДерева.РеквизитСумма = Перечисления.бит_РеквизитыДляРасчетаЗависимостей.Сумма
				Иначе
					ТекущиеДанныеДерева.КоэффициентСумма = 0;
					ТекущиеДанныеДерева.РеквизитСумма = Перечисления.бит_РеквизитыДляРасчетаЗависимостей.ПустаяСсылка();
				КонецЕсли;
								
			КонецЕсли; 
		КонецЕсли; 
		
		бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанныеДерева, фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
		
	    НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(ТекущиеДанныеДерева.СтатьяОборотов);
		
	    бит_Бюджетирование.УстановитьИспользованиеАналитики(ТекущиеДанныеДерева, НастройкиСтатьи, фКэшЗначений.Измерения);
		
	КонецЕсли;
	
	ОФормитьТаблицу("ДеревоЗависимостей", СтатьяОборотов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоРодителю(ИдТекСтрокиДерева, ТекИД_Родитель)

	// Текущая строка дерева.
	СтрокаВерх = ДеревоЗависимостей.НайтиПоИдентификатору(ИдТекСтрокиДерева);
	Если СтрокаВерх = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	ВеткаДереваВерх = СтрокаВерх.ПолучитьЭлементы();
		
	// Добавление подчиненных строк.
	НайденныеСтрокиЗвОб = Объект.ЗависимыеОбороты.НайтиСтроки(Новый Структура("ИД_Родитель", ТекИД_Родитель));
	Если НайденныеСтрокиЗвОб.Количество() > 0 Тогда
		
		НовыйУровень = СтрокаВерх.УровеньСтроки + 1;
					
		Для каждого СтрокаТаблицыЗвОб Из НайденныеСтрокиЗвОб Цикл
			
			СтрокаДерева 	 = ВеткаДереваВерх.Добавить();
			ТекИдентификатор = СтрокаДерева.ПолучитьИдентификатор();
			
			СтрокаДерева.УровеньСтроки = НовыйУровень;
			СтрокаДерева.ИД 		   = СтрокаТаблицыЗвОб.ИД;
			СинхронизироватьРеквизитыТаблицыИДерева(СтрокаТаблицыЗвОб.ПолучитьИдентификатор(), ТекИдентификатор, фРеквизитыСтроки, "Дерево");
			
			// Если есть следующий уровень подчиненных.
			НайденныеСтрокиРодителиЗвОб = Объект.ЗависимыеОбороты.НайтиСтроки(Новый Структура("ИД_Родитель", СтрокаТаблицыЗвОб.ИД));
			Если НайденныеСтрокиРодителиЗвОб.Количество() > 0 Тогда     			
				
				СтрокаДерева.ЕстьПодчиненные = Истина;
				
				СтрокаРодительЗаОб = НайденныеСтрокиРодителиЗвОб[0];
				СинхронизироватьРеквизитыТаблицыИДерева(СтрокаРодительЗаОб.ПолучитьИдентификатор(), ТекИдентификатор, фРеквизитыРодителя, "Дерево");
				ИзменениеСтатьиОборотов(ТекИдентификатор, Ложь);
				
				ЗаполнитьДеревоПоРодителю(ТекИдентификатор, СтрокаРодительЗаОб.Ид_Родитель);
				
			Иначе
				
				ИзменениеСтатьиОборотов(ТекИдентификатор, Ложь);
				
			КонецЕсли; 			
	
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЗависимостей()
	
	ДеревоЗависимостей.ПолучитьЭлементы().Очистить();
	
	// Корень дерева.
	КореньДерева = ДеревоЗависимостей.ПолучитьЭлементы();
	
	// Нулевая строка "Статьи".
	СтрокаВерх = КореньДерева.Добавить();	
	СтрокаВерх.Кодификатор = "Статьи";
 	ВеткаДереваВерх = СтрокаВерх.ПолучитьЭлементы();
	
	ТаблицаСтрокЗо = Объект.ЗависимыеОбороты.Выгрузить();
	ИдСтрок 	= ТаблицаСтрокЗо.ВыгрузитьКолонку("ИД");
	ТаблицаСтрокЗо.Свернуть("ИД_Родитель");
	ИдРодителей = ТаблицаСтрокЗо.ВыгрузитьКолонку("ИД_Родитель");
	
	// Для всех строк-родителей. 
	Для каждого ИдРодитель Из ИдРодителей Цикл
		
		// Если строка подчинена не "нулевой строке".
		Если ИдСтрок.Найти(ИдРодитель) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Запись строк дерева первого уровня.
		НайденныеСтрокиРодителиЗвОб = Объект.ЗависимыеОбороты.НайтиСтроки(Новый Структура("ИД_Родитель", ИдРодитель));
		Если НайденныеСтрокиРодителиЗвОб.Количество() > 0 Тогда
		
			СтрокаРодительЗаОб = НайденныеСтрокиРодителиЗвОб[0];
			
			СтрокаДерева 	 = ВеткаДереваВерх.Добавить();
			ТекИдентификатор = СтрокаДерева.ПолучитьИдентификатор();
			
			СтрокаДерева.УровеньСтроки   = 1;
			СтрокаДерева.ИД = СтрокаРодительЗаОб.ИД_Родитель;
			СтрокаДерева.ЕстьПодчиненные = Истина;
			СинхронизироватьРеквизитыТаблицыИДерева(СтрокаРодительЗаОб.ПолучитьИдентификатор(), ТекИдентификатор, фРеквизитыРодителя, "Дерево");
			ИзменениеСтатьиОборотов(ТекИдентификатор, Ложь); 		
					
			ЗаполнитьДеревоПоРодителю(ТекИдентификатор, СтрокаРодительЗаОб.Ид_Родитель);
			
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

// Процедура создает строку табличной части ЗависимыеОбороты 
// по данным строки дерева и по данным родителя строки дерева.
// 
// Параметры:
//  ИдТекСтрокиДерева - Число.
// 
&НаСервере
Процедура ЗаполнитьСтрокуЗависимыхОборотов(ИдТекСтрокиДерева)
	
	// Текущая строка дерева.
	ТекСтрокаДерева = ДеревоЗависимостей.НайтиПоИдентификатору(ИдТекСтрокиДерева);
	Если ТекСтрокаДерева = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	ТекВеткаДерева = ТекСтрокаДерева.ПолучитьЭлементы();
	
	СтрокаРодитель = ТекСтрокаДерева.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	

	Если ТекСтрокаДерева.УровеньСтроки > 1 Тогда
		 
		// Поиск по ИД или создание новой строки в табличной части ЗависимыеОбороты.
		 
		НайденныеСтрокиТаблицыЗо = Объект.ЗависимыеОбороты.НайтиСтроки(Новый Структура("ИД", ТекСтрокаДерева.ИД));
		Если НайденныеСтрокиТаблицыЗо.Количество() = 0 Тогда
			
			СтрокаТаблицыЗо = Объект.ЗависимыеОбороты.Добавить();
			СтрокаТаблицыЗо.ИД 			= ТекСтрокаДерева.ИД;
			СтрокаТаблицыЗо.ИД_Родитель = СтрокаРодитель.ИД;	 	
		 
		Иначе
			
			СтрокаТаблицыЗо = НайденныеСтрокиТаблицыЗо[0];	
			
		КонецЕсли;
		 		 
		// Синхронизация значений текущей строки дерева и строки табличной части.
		СинхронизироватьРеквизитыТаблицыИДерева(СтрокаТаблицыЗо.ПолучитьИдентификатор()
		 										, ТекСтрокаДерева.ПолучитьИдентификатор()
												, фРеквизитыСтроки
												, "Таблица");
		 
		// Синхронизация значений строки-родителя дерева и строки табличной части.
		СинхронизироватьРеквизитыТаблицыИДерева(СтрокаТаблицыЗо.ПолучитьИдентификатор()
		 										, СтрокаРодитель.ПолучитьИдентификатор()
												, фРеквизитыРодителя
												, "Таблица");
		 
	КонецЕсли; 	 
	 
	Для каждого СтрокаДерева Из ТекВеткаДерева Цикл  	 
		ЗаполнитьСтрокуЗависимыхОборотов(СтрокаДерева.ПолучитьИдентификатор());  	 
	КонецЦикла; 
	 
КонецПроцедуры

// Процедура выполняет поиск строк табличной части ЗависимыеОбороты
// ,соответствующей строке дерева значений и удаляет найденные строки.
// 
// Параметры:
//  ИдТекСтрокиДерева - Число.
// 
&НаСервере
Процедура НайтиУдалитьСтрокиТаблицы(ИдТекСтрокиДерева)

	// Текущая строка дерева.
	СтрокаВерх = ДеревоЗависимостей.НайтиПоИдентификатору(ИдТекСтрокиДерева);
	Если СтрокаВерх = Неопределено Тогда
		Возврат;		
	КонецЕсли;
		
	НайденныеСтрокиТаблицыЗо = Объект.ЗависимыеОбороты.НайтиСтроки(Новый Структура("ИД", СтрокаВерх.ИД));
	Для каждого СтрокаТаблицаЗо Из НайденныеСтрокиТаблицыЗо Цикл
		ИндексУдаляемой = Объект.ЗависимыеОбороты.Индекс(СтрокаТаблицаЗо);
		Объект.ЗависимыеОбороты.Удалить(ИндексУдаляемой);	
	КонецЦикла;
	
	Для каждого СтрокаДерева Из СтрокаВерх.ПолучитьЭлементы() Цикл 		
		 НайтиУдалитьСтрокиТаблицы(СтрокаДерева.ПолучитьИдентификатор()); 		
	КонецЦикла;	

КонецПроцедуры

// Устанавливает Ид в строке таб. части БДДС.
// 
// Параметры:
//  ИдТекСтрокиДерева - Число
// 
&НаСервере
Процедура УстановитьНовыйИд(ИдТекСтрокиДерева)
	
	ТекущаяСтрока = ДеревоЗависимостей.НайтиПоИдентификатору(ИдТекСтрокиДерева);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ТекущаяСтрока.ИД = Строка(Новый УникальныйИдентификатор);
	Для каждого СтрокаДерева Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
		УстановитьНовыйИД(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла; 
	 
КонецПроцедуры

// Функция проверяет контекст функции.
// 
// Параметры:
//  ИдТекСтрокиДерева - Число
//  ИмяРеквизита	  - Строка
//  
// Возвращаемое значение:
//   Булево
// 
&НаСервере
Функция КонтекстФункцииКорректен(ИдТекСтрокиДерева, ИмяРеквизита)

	Результат = Ложь;
	
	ТекущаяСтрока = ДеревоЗависимостей.НайтиПоИдентификатору(ИдТекСтрокиДерева);
	Если ТекущаяСтрока <> Неопределено Тогда
		Результат = ТекущаяСтрока[ИмяРеквизита].Контекст = Перечисления.бит_КонтекстыВыполненияПользовательскихФункций.ЗависимыеОбороты;			
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПерейтиКРедактированиюКоэффицентов()

	Оповещение = Новый ОписаниеОповещения("ПерейтиКРедактированиюКоэффицентовЗавершение", ЭтотОбъект); 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоэффициентКоличество"	, Объект.КоэффициентКоличество);
	ПараметрыФормы.Вставить("КоэффициентСумма"		, Объект.КоэффициентСумма);
	ОткрытьФорму("Документ.бит_УстановкаЗависимыхОборотов.Форма.Коэффициенты", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);

КонецПроцедуры 

// Процедура окончание процедуры "ПерейтиКРедактированиюКоэффицентов". 
//
// Параметры:
//  Результат – Структура.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте 
Процедура ПерейтиКРедактированиюКоэффицентовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Объект, Результат);
	Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);
	
	ПерезаполнитьДеревоЗависимостей();
    Элементы.ДеревоЗависимостей.Развернуть(ДеревоЗависимостей.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДеревоЗависимостей()
	
	Для каждого СтрокаЗависимых Из Объект.ЗависимыеОбороты Цикл
		Если СтрокаЗависимых.УчетКоличество Тогда
			СтрокаЗависимых.КоэффициентКоличество = Объект.КоэффициентКоличество;
		Иначе
			СтрокаЗависимых.КоэффициентКоличество = 0;
		КонецЕсли;
		Если СтрокаЗависимых.УчетСумма Тогда
			СтрокаЗависимых.КоэффициентСумма = Объект.КоэффициентСумма;
		Иначе
			СтрокаЗависимых.КоэффициентСумма = 0;
		КонецЕсли;
	КонецЦикла; 
	ОбновитьДеревоЗависимостей();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект 	 = Форма.Объект;
	Элементы = Форма.Элементы;
	Форма.НадписьКоэффициенты = СформироватьНадписьКоэффициенты(Объект.КоэффициентКоличество, Объект.КоэффициентСумма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьКоэффициенты(КоэффициентКоличество, КоэффициентСумма)

	Шаблон = Нстр("ru = 'Коэффициенты: количество %1; сумма %2'");	
	ТекстСообщения = СтрШаблон(Шаблон, Формат(КоэффициентКоличество, "ЧЦ=10; ЧДЦ=4; ЧН=0,0000"),
								Формат(КоэффициентСумма, "ЧЦ=10; ЧДЦ=4; ЧН=0,0000"));
	Возврат ТекстСообщения;
	
КонецФункции 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	СведеньяОСтатьяхОборотов = ПолучитьСведенияОСтатьяхОборотов(
					ОбщегоНазначения.ВыгрузитьКолонку(Объект.ЗависимыеОбороты, "СтатьяОборотов_Зависимый", Истина));
					
	Для каждого СтрокаТаблицы Из Объект.ЗависимыеОбороты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяОборотов_Зависимый) Тогда
			СтрокаТаблицы.УчетКоличество= Ложь;
			СтрокаТаблицы.УчетСумма		= Ложь;
		Иначе
			СведенияОСтатье = СведеньяОСтатьяхОборотов.Получить(СтрокаТаблицы.СтатьяОборотов_Зависимый);
			Если СведенияОСтатье <> Неопределено Тогда
				СтрокаТаблицы.УчетКоличество= СведенияОСтатье.Учет_Количество;
				СтрокаТаблицы.УчетСумма		= СведенияОСтатье.Учет_Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведенияОСтатьяхОборотов(Знач СписокСтатей)
	
	ИменаРеквизитов = "Учет_Количество, Учет_Сумма";
	
	СписокСтатейБезПустыхЗначений = ОбщегоНазначения.СкопироватьРекурсивно(СписокСтатей);
	//ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(СписокСтатейБезПустыхЗначений);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(СписокСтатейБезПустыхЗначений,
		Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	СведеньяОСтатьяхОборотов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокСтатейБезПустыхЗначений, ИменаРеквизитов);
	
	Возврат СведеньяОСтатьяхОборотов;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьоповещениеОбИзмененииСтатьиОборотов(СтатьяОборотов);
	
	ПараметрыОтбора = Новый Структура("СтатьяОборотов_Зависимый", СтатьяОборотов);
	СтрокиДляАктуализации = Объект.ЗависимыеОбороты.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиДляАктуализации.Количество() > 0 Тогда
		СведенияОСтатье = ПолучитьСведенияОСтатьеОборотов(СтатьяОборотов);
		Для каждого СтрокаТаблицы Из СтрокиДляАктуализации Цикл
			Если СведенияОСтатье <> Неопределено Тогда
				СтрокаТаблицы.УчетКоличество= СведенияОСтатье.Учет_Количество;
				СтрокаТаблицы.УчетСумма		= СведенияОСтатье.Учет_Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведенияОСтатьеОборотов(СтатьяОборотов)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтатьяОборотов, "Учет_Количество, Учет_Сумма");
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Нулевой уровень дерева.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКодификатор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейТипСтатьиОборотов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейСтатьяОборотов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейПрофильРаспределения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейРеквизитСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКоэффициентСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейФункцияСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейРеквизитКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКоэффициентКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейФункцияКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейЦФО");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоЗависимостей.УровеньСтроки", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветЛинииОтчета);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Первый уровень дерева.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКодификатор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейТипСтатьиОборотов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейСтатьяОборотов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейПрофильРаспределения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейРеквизитСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКоэффициентСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейФункцияСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейРеквизитКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКоэффициентКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейФункцияКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейЦФО");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоЗависимостей.УровеньСтроки", ВидСравненияКомпоновкиДанных.Равно, 1);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаШапкиОтчета);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейПрофильРаспределения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейРеквизитСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКоэффициентСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейФункцияСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейРеквизитКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКоэффициентКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейФункцияКоличество");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоЗависимостей.УровеньСтроки", ВидСравненияКомпоновкиДанных.Равно, 1);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Нет учета по сумме. 
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейРеквизитСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКоэффициентСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейФункцияСумма");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоЗависимостей.УровеньСтроки", ВидСравненияКомпоновкиДанных.Больше, 1);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоЗависимостей.УчетСумма", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Нет учета по количеству. 
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейРеквизитКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКоэффициентКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейФункцияКоличество");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоЗависимостей.УровеньСтроки", ВидСравненияКомпоновкиДанных.Больше, 1);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоЗависимостей.УчетКоличество", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Шрифт подчиненных строк.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКодификатор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейТипСтатьиОборотов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейСтатьяОборотов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейПрофильРаспределения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейРеквизитСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКоэффициентСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейФункцияСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейРеквизитКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейКоэффициентКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейФункцияКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейЦФО");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоЗависимостейИД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоЗависимостей.УровеньСтроки", ВидСравненияКомпоновкиДанных.Больше, 1);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДеревоЗависимостей.ЕстьПодчиненные", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина));
	
КонецПроцедуры 

#КонецОбласти
