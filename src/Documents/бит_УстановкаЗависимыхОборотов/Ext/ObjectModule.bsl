#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем мИзмерения Экспорт; // Хранит измерения бюджетирования.
Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения бюджетирования.
Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		ДатаНачала = Дата;
		// Заполнение шапки.
		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект,
			бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), Неопределено);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	ПривестиЗначенияВТаблице();
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	ПроверкаРеквизитов(Отказ,Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ТаблицаЗависимостей = ПодготовитьТаблицуЗависимостей();
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаЗависимостей,Отказ,Заголовок);
	КонецЕсли;
    
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет проверку заполнения шапки и таб. частей.
//
// Параметры:
//  Отказ		 - Булево.
//  Заголовок	 - Строка.
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок)
	
	// Проверка заполнения коэффициентов и реквизитов для расчета зависимых оборотов.
	Для каждого СтрокаТаблицы Из ЗависимыеОбороты Цикл
	
		Если СтрокаТаблицы.КоэффициентКоличество = 0 
		 	И СтрокаТаблицы.КоэффициентСумма = 0 
		 	И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ФункцияКоличество) 
		 	И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ФункцияСумма) Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке № %1% табличной части ""Зависимые обороты""  не указан ни коэффициент для суммы, ни коэффициент для количества, 
		                         |ни пользовательские функции для расчета.'");
		  	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.НомерСтроки);
		  	бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);

		КонецЕсли;

		Если СтрокаТаблицы.КоэффициентКоличество <> 0 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.РеквизитКоличество) Тогда

		   	ТекстСообщения = НСтр("ru = 'В строке № %1% табличной части ""Зависимые обороты""  не указан реквизит для расчета количества.'");
		  	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.НомерСтроки);
		  	бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);

		КонецЕсли; 

		Если СтрокаТаблицы.КоэффициентСумма <> 0 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.РеквизитСумма) Тогда

		   	ТекстСообщения = НСтр("ru = 'В строке № %1% табличной части ""Зависимые обороты""  не указан реквизит для расчета суммы.'");
		  	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.НомерСтроки);
		  	бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);

		КонецЕсли;		  
		 
	КонецЦикла; 
	
	// Проверка на зацикливание.
	Если НЕ Отказ Тогда
		Реквизиты = Новый Структура();
		Реквизиты.Вставить("Сценарий", Сценарий);
		Реквизиты.Вставить("ДатаНачала", ДатаНачала);
		Реквизиты.Вставить("Ссылка", Ссылка);
		Документы.бит_УстановкаЗависимыхОборотов.ПроверитьтЗацикливаниеТаблицы(Реквизиты, Заголовок, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПривестиЗначенияВТаблице()

	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	ИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	
	Для каждого Запись Из ЗависимыеОбороты Цикл
		Для каждого КлючИЗначение Из ИзмеренияДоп Цикл
			
			ИмяИзмерения = КлючИЗначение.Ключ;
			Если ИмяИзмерения = "Валюта" Или ИмяИзмерения = "Сценарий" Тогда
				Продолжить;		
			КонецЕсли;

			ТекущаяНастройка  = НастройкиИзмерений[ИмяИзмерения];
			
			ИмяКолонки = ИмяИзмерения;
			ПривестиЗначениеВСтрокеТаблицы(Запись, ИмяКолонки, ТекущаяНастройка);
			
			ИмяКолонки = ИмяИзмерения + "_Зависимый";
			ПривестиЗначениеВСтрокеТаблицы(Запись, ИмяКолонки, ТекущаяНастройка);
		КонецЦикла; // По дополнительным измерениям.
	КонецЦикла; // По записям набора.

КонецПроцедуры

Процедура ПривестиЗначениеВСтрокеТаблицы(Знач Запись, Знач ИмяКолонки, Знач ТекущаяНастройка)
	
	ЗначениеИзмерения = Запись[ИмяКолонки];
	Если НЕ ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
		// Согласно стандарту пустые значения составного типа - приводим к неопределено.
		Запись[ИмяКолонки] = Неопределено;
	Иначе	
		Если ТекущаяНастройка = Неопределено Тогда
			Если ЗначениеИзмерения <> Неопределено Тогда
				// Настройки нет - приводим к неопределено.
				Запись[ИмяКолонки] = Неопределено;
			КонецЕсли; 
		Иначе	
			Если НЕ ТекущаяНастройка.Аналитика.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеИзмерения)) Тогда
				// Тип значения не соответствует настройке доп. измерения - приводим к неопределено.
				Запись[ИмяКолонки] = Неопределено
			КонецЕсли; 
		КонецЕсли; // Заполнена настройка для измерения. 
	КонецЕсли; // Заполнено значение измерения.

КонецПроцедуры

// Функция получает таблицу зависимых оборотов по табличной части.
// 
// Возвращаемое значение:
//  ТаблицаЗависимостей - ТаблицаЗначений.
//
Функция ПодготовитьТаблицуЗависимостей()

	ТекстПолей = "";
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл		
		
		ИмяИзмерения = ТекИзмерение.Имя;
		Если ИмяИзмерения = "Валюта" Или ИмяИзмерения = "Сценарий" Тогда
			Продолжить;		
		КонецЕсли;
		
		// Поля запроса.
		ТекстПолей = ТекстПолей + "
					|бит_УстановкаЗависимыхОборотовЗависимыеОбороты." + ИмяИзмерения + ",
					|бит_УстановкаЗависимыхОборотовЗависимыеОбороты." + ИмяИзмерения + "_Зависимый,";
	КонецЦикла;
				
	Запрос = Новый Запрос;
	Запрос.Текст =  "
	|ВЫБРАТЬ
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.Ссылка.ДатаНачала КАК Период,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.Ссылка.Сценарий,
	|   " + ТекстПолей + "	
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.ПрофильРаспределения,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.КоэффициентКоличество,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.КоэффициентСумма,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.РеквизитКоличество,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.РеквизитСумма,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.ФункцияКоличество,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.ФункцияСумма,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.ИД,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.ИД_Родитель,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.Ссылка.ДатаОкончания,
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.бит_УстановкаЗависимыхОборотов.ЗависимыеОбороты КАК бит_УстановкаЗависимыхОборотовЗависимыеОбороты
	|ГДЕ
	|	бит_УстановкаЗависимыхОборотовЗависимыеОбороты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ
	|";
					
	Запрос.УстановитьПараметр("Ссылка", Ссылка);				

	ТаблицаЗависимостей = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗависимостей;
	
КонецФункции
 
// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаЗависимостей,Отказ,Заголовок)
	
	// Движения по регистру зависимые обороты.
	НаборЗаписей = Движения.бит_ЗависимыеОбороты;
	Для Каждого СтрокаТаблицы Из ТаблицаЗависимостей Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область Инициализация

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним");
мИзмерения          = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные"  , "Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

#КонецОбласти

#КонецЕсли
