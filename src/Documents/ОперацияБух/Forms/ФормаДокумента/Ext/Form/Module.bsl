&НаКлиенте
Перем ИдентификаторСтрокиПроводки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-13 (#3051)
	ЗаполнитьКэшЗначений();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-13 (#3051)
	
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.ОперацияБух.ФормаДокумента");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента("НезаписанныйДокумент");
		ПодготовитьФормуНаСервере(Параметры.ЗначениеКопирования);
		ЗаполнитьДвижения(Параметры.ЗначенияЗаполнения);
	КонецЕсли;

	//При открытии из журнала проводок активизируем выбранную строку
	Если ЗначениеЗаполнено(Параметры.ПараметрТекущаяСтрока) Тогда
		Элементы.Хозрасчетный.ТекущаяСтрока  = Параметры.ПараметрТекущаяСтрока-1;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-13 (#3051)	
	Если ЗначениеЗаполнено(Объект.Ссылка) И
		 фКэшЗначений.Свойство("АналитикаНомерЗаявки")
	Тогда 
		
		ок_ФВБ = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Объект.Ссылка,
									   	   фКэшЗначений.АналитикаНомерЗаявки, ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));																			
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-13 (#3051)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-19 (#3051)
	Если Элементы.Найти("бит_ОборотыПоБюджетам") <> Неопределено Тогда 
		// Отображение дополнительных измерений в табличных полях.
		бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																		, "бит_ОборотыПоБюджетам"
																		, фКэшЗначений.ИзмеренияДоп
																		, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-19 (#3051)	
	
	УстановитьУсловноеОформление();
	
	// бит_Финанс добавление кода. Начало. 23.09.2016{{
	бит_УстановитьДействияФормы();
	// бит_Финанс добавление кода. Конец. 23.09.2016}}
	
	//ОК Ванюков К. +// запрет на редактирование операций, введенных вручную, созданных механизмом сторнирования в операции аксапты // 2012-03-26
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-04 (#3124)
	//Если не РольДоступна("ПолныеПрава") Тогда 
	//Запрос = Новый Запрос;				
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//               |	бит_ок_ОперацияАксапты.Ссылка
	//               |ИЗ
	//               |	Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
	//               |ГДЕ
	//               |	бит_ок_ОперацияАксапты.бтИсправление
	//               |	И бит_ок_ОперацияАксапты.бтСсылкаНаДокументОперация = &Ссылка
	//               |	И бит_ок_ОперацияАксапты.бтСсылкаНаДокументОперация <> &ПустаяСсылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	//Запрос.УстановитьПараметр("ПустаяСсылка", Документы.ОперацияБух.ПустаяСсылка());
	//
	//Заменено на:
	Если Не УправлениеДоступом.ЕстьРоль("ПолныеПрава") И
		ЗначениеЗаполнено(Объект.Ссылка)
		Тогда 
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	бит_ок_ОперацияАксапты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперацияБух КАК ОперацияБух
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
		|		ПО ОперацияБух.СторнируемыйДокумент = бит_ок_ОперацияАксапты.Ссылка
		|			И (бит_ок_ОперацияАксапты.бтИсправление)
		|ГДЕ
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
		//|	ОперацияБух.Ссылка = &Ссылка");
		|	ОперацияБух.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ок_ОперацияАксапты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперацияБух КАК ОперацияБух
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ок_ОперацияАксапты12 КАК бит_ок_ОперацияАксапты
		|		ПО ОперацияБух.СторнируемыйДокумент = бит_ок_ОперацияАксапты.Ссылка
		|			И (бит_ок_ОперацияАксапты.бтИсправление)
		|ГДЕ
		|	ОперацияБух.Ссылка = &Ссылка");
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-04 (#3124)
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			ТолькоПросмотр	= Истина;
		КонецЕсли;
	КонецЕсли;	
	//ОК Ванюков К. -
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-06 (#3051)
	ЗаполнитьКэшЗначений();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И
		 фКэшЗначений.Свойство("АналитикаНомерЗаявки")
	Тогда 
		
		ок_ФВБ = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Объект.Ссылка,
									   	   фКэшЗначений.АналитикаНомерЗаявки, ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));																			
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-06 (#3051)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере(ТекущийОбъект.Ссылка);
	УстановитьСостояниеДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//ОКЕЙ Наумов А.Н. (СофтЛаб) Начало 2019-09-20 (#3493)
	ок_УправлениеФормами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	//ОКЕЙ Наумов А.Н. (СофтЛаб) Начало 2019-09-20 (#3493)
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Запись") Тогда
		КлючеваяОперация = "ЗаписьОперацияБух";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-27 (#3076)
	Если ЗначениеЗаполнено(Объект.Ссылка) И
		 Объект.СБ_ВыгруженВAXAPTA_Актуальный И
		 НеСтроковыеДанныеДокументаИзменены() 
	Тогда 
		Объект.СБ_ВыгруженВAXAPTA_Актуальный = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У документа сброшен признак выгрузки в AXAPTA. Требуется перевыгрузить документ'"));
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-27 (#3076)
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб) 2020-11-02 Начало (#3936)
	Если Не Отказ
		И ТипЗнч(Объект.СторнируемыйДокумент) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
		И Не Объект.СторнируемыйДокумент.Пустая() 
		И Объект.СуммаОперации <> 0 И Объект.СуммаОперации *-1 <> бит_ОбщегоНазначения.ПолучитьЗначениеРеквизитаОбъекта(Объект.СторнируемыйДокумент,"СуммаДокумента") Тогда
		Ответ = Вопрос("Сумма сторнируемого документа «Списание с расчетного счета» отличается от суммы в документе «Операция БУХ». Продолжить?",РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда 
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	//ОКЕЙ Рычаков А.С.(СофтЛаб) 2020-11-02 Конец (#3936)
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда
			НаборЗаписей = РеквизитФормыВЗначение(СтрокаРегистра.Имя + "НаборЗаписей");
			ТаблицаДвижений = НаборЗаписей.Выгрузить();
			ТекущийОбъект.Движения[СтрокаРегистра.Имя].Загрузить(ТаблицаДвижений);
			СтрокаРегистра.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// бит_Финанс добавление кода. Начало: 27.03.2017 # BF-377 {{
	Если НЕ Отказ Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("бит_РучнаяКорректировкаФакта", ЭтотОбъект["бит_РучнаяКорректировкаФакта"]);
	КонецЕсли; 
	// бит_Финанс добавление кода конец }}  
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-23 (#3051)
	Если фКэшЗначений.Свойство("АналитикаНомерЗаявки")	Тогда 
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ок_ФВБ"	 , ок_ФВБ);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Аналитика", фКэшЗначений.АналитикаНомерЗаявки);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-23 (#3051)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-15 (#3270)
	Если ЗначениеЗаполнено(Объект.СторнируемыйДокумент) И
		 ТипЗнч(Объект.СторнируемыйДокумент) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
	Тогда 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-05 (#3445)
		//ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатьиБДДС", ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Выгрузить().ВыгрузитьКолонку("СтатьяБДДС"));
		//Заменено на:
		мНайденныеСтрокиРегистра = Регистры.НайтиСтроки(Новый Структура("Имя,ЕстьРеквизит","бит_ОборотыПоБюджетам",Истина));
		Если мНайденныеСтрокиРегистра.Количество()>0 Тогда 
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатьиБДДС", ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Выгрузить().ВыгрузитьКолонку("СтатьяБДДС"));
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-05 (#3445)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-15 (#3270)	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Очистим значения параметров типовой операции
	НаборЗаписей = РегистрыСведений.ЗначенияПараметровТиповойОперации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Операция.Установить(ТекущийОбъект.Ссылка);
	
	Если ТекущийОбъект.СпособЗаполнения = "ТиповаяОперация" Тогда
		// Заполнить значения параметров типовой операции
		Для Каждого СтрокаПараметров Из ПараметрыТиповойОперации Цикл
			Запись				 = НаборЗаписей.Добавить();
			Запись.Организация	 = ТекущийОбъект.Организация;
			Запись.Операция		 = ТекущийОбъект.Ссылка;
			Запись.Параметр		 = СтрокаПараметров.Параметр;
			Запись.Значение		 = ЭтотОбъект[СтрокаПараметров.ИмяРеквизита];
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Записать();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// бит_Финанс изменения кода. Начало: 27.03.2017  {{ BF-794
	// После записи документа движения могут быть транслированны в другие регистры.
	// Нужно изменить форму
	ПодготовитьФормуНаСервере(ТекущийОбъект.Ссылка);
	//ЗаполнитьДобавленныеКолонкиТаблиц();
	// бит_Финанс изменения кода. Конец 27.03.2017  }} BF-794
	
	УстановитьСостояниеДокумента();
	
	//БИТ Тртилек 08.12.2011
	бит_ЗаполнениеСубконтоРБП();
	///БИТ Тртилек
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ИзменениеОперацииБух");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-08-29 (#3077)
	Если Объект.СБ_ВыгруженВAXAPTA_Актуальный Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ экспортирован в AXAPTA. 
		|Его изменение приведет к необходимости повторной выгрузки. 
		|Продолжить?'");
		
		ДополнительныеСвойства = Новый Структура("Отказ", Отказ);
		Оповещение = Новый ОписаниеОповещения("ПродолжениеРаботыПользователяПослеВыгрузкиАксапту", ЭтаФорма, ДополнительныеСвойства);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
		 	
	КонецЕсли; 
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-08-29 (#3077)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-10 (#3124)
	УстановитьОграничениеНаТипСторнируемогоДокумента();	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-10 (#3124)
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-10 (#3816)
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = УникальныйИдентификатор Тогда
		Если ИмяСобытия = "ИзменениеТабличнойЧасти" Тогда
			
			ПерезаполнитьТабличнуюЧасть(Параметр);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-10 (#3816)

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ХозрасчетныйНаборЗаписей.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Указанные в проводках расчетные счета, договоры, подразделения, документы будут очищены. 
			|Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПриИзменииОрганизацииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ПриИзменииОрганизацииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	 
КонецПроцедуры

&НаКлиенте
Процедура СторнируемыйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите организацию.'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторнируемыйДокументПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-30 (#3051)
		ок_ФВБ = ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-30 (#3051)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-12 (#3148)
		Объект.ОК_ID_Разноска = "";
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-12 (#3148)
		
		Возврат;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-13 (#3051)
	Иначе 
		
		ТипСторнируемогоДокумента = ТипЗнч(Объект.СторнируемыйДокумент);
		
		Если фКэшЗначений.ОписаниеТиповДопАналитик.СодержитТип(ТипСторнируемогоДокумента) И НЕ 
			 ТипСторнируемогоДокумента = Тип("ДокументСсылка.бит_ок_ОперацияАксапты")
			 //ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
			 И НЕ ТипСторнируемогоДокумента = Тип("ДокументСсылка.бит_ок_ОперацияАксапты12")
			 //ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
		Тогда 
		
		Если НЕ фКэшЗначений.Свойство("АналитикаНомерЗаявки") Тогда 			
			фКэшЗначений.Вставить("АналитикаНомерЗаявки", ПолучитьАналитикуНомерЗаявки());
		КонецЕсли;
			
			ок_ФВБ = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Объект.СторнируемыйДокумент,
																		   фКэшЗначений.АналитикаНомерЗаявки, ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));																	
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
		//ИначеЕсли ТипСторнируемогоДокумента = Тип("ДокументСсылка.бит_ок_ОперацияАксапты") Тогда 
		ИначеЕсли ТипСторнируемогоДокумента = Тип("ДокументСсылка.бит_ок_ОперацияАксапты") 
			ИЛИ ТипСторнируемогоДокумента = Тип("ДокументСсылка.бит_ок_ОперацияАксапты12") Тогда 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
				
			ок_ФВБ = ПолучитьНомерЗаявкиАксапты(Объект.СторнируемыйДокумент);
			
		КонецЕсли;														
															
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-13 (#3051)
		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-12 (#3148)
		Объект.ОК_ID_Разноска = ПолучитьID_РазноскаПоСторнируемомуДокументу(Объект.СторнируемыйДокумент);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-12 (#3148)		
	КонецЕсли;

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-07 (#3118)
	ПроверитьПовторноеИспользованиеСторнируемогоДокументаНаКлиенте();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-07 (#3118)
	
	Если ЕстьДвижения() Тогда
		ТекстВопроса = НСтр("ru = 'Существующие проводки и движения регистров будут очищены.
			|Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("СторнируемыйДокументПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе
		СформироватьДвиженияСторноНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХозрасчетный

&НаКлиенте
Процедура ХозрасчетныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	ИдСтроки      = Элементы.Хозрасчетный.ТекущаяСтрока;
	
	Если ИдСтроки <> ИдентификаторСтрокиПроводки Тогда
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ХозрасчетныйСубконтоДт1", "ХозрасчетныйСубконтоДт2", "ХозрасчетныйСубконтоДт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ХозрасчетныйСубконтоКт1", "ХозрасчетныйСубконтоКт2", "ХозрасчетныйСубконтоКт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "", Ложь);
		
		ИдентификаторСтрокиПроводки = ИдСтроки;
	
	КонецЕсли;
	
	// Сначала выполняем общие действия для всех регистров
	Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВПроводке(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ПересчитатьСуммуОперации(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйПослеУдаления(Элемент)

	ПересчитатьСуммуОперации(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетДтПриИзменении(Элемент)

	ОбработатьИзменениеСчета(ЭтотОбъект, "Дт");

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетКтПриИзменении(Элемент)

	ОбработатьИзменениеСчета(ЭтотОбъект, "Кт");

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютаДтПриИзменении(Элемент)

	//СБ Ванюков К. + /Пусть все суммы пересчитываются
	ТД = Элементы.Хозрасчетный.ТекущиеДанные;
	
	//СБ Ванюков К. + /Пусть все суммы пересчитываются
	Если не ТД.ВалютаДт.Пустая() и не ТД.ВалютнаяСуммаДт = 0  тогда  
		ТД.СуммаВРДт = ?(не ЗначениеЗаполнено(ТД.СуммаВРДт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Объект.Дата));
		ТД.СуммаВРКт = ?(не ЗначениеЗаполнено(ТД.СуммаВРКт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Объект.Дата));
		ТД.СуммаНУДт = ?(не ЗначениеЗаполнено(ТД.СуммаНУДт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Объект.Дата));
		ТД.СуммаНУКт = ?(не ЗначениеЗаполнено(ТД.СуммаНУКт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Объект.Дата));
		ТД.СуммаПРДт = ?(не ЗначениеЗаполнено(ТД.СуммаПРДт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Объект.Дата));
		ТД.СуммаПРКт = ?(не ЗначениеЗаполнено(ТД.СуммаПРКт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Объект.Дата));
	КонецЕсли;

	ПересчитатьСуммуОперации(ЭтотОбъект);
	//СБ Ванюков К. -	
	РасчетСуммы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютнаяСуммаДтПриИзменении(Элемент)
	
	РасчетСуммы(Истина);
	ПересчитатьСуммуОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютаКтПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетДт);
		Если СвойстваСчета.Валютный Тогда
			Возврат; // Если оба счета валютные, сумма пересчитывается при изменении счета Дт
		КонецЕсли;
	КонецЕсли;

	//СБ Ванюков К. +
	ТД = ТекущиеДанные;
	Если не ТД.ВалютаКт.Пустая() и не ТД.ВалютнаяСуммаКт = 0 тогда  
		ТД.СуммаВРДт = ?(не ЗначениеЗаполнено(ТД.СуммаВРДт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Объект.Дата));
		ТД.СуммаВРКт = ?(не ЗначениеЗаполнено(ТД.СуммаВРКт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Объект.Дата));
		ТД.СуммаНУДт = ?(не ЗначениеЗаполнено(ТД.СуммаНУДт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Объект.Дата));
		ТД.СуммаНУКт = ?(не ЗначениеЗаполнено(ТД.СуммаНУКт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Объект.Дата));
		ТД.СуммаПРДт = ?(не ЗначениеЗаполнено(ТД.СуммаПРДт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Объект.Дата));
		ТД.СуммаПРКт = ?(не ЗначениеЗаполнено(ТД.СуммаПРКт),0,ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Объект.Дата));
	КонецЕсли;

	ПересчитатьСуммуОперации(ЭтотОбъект);
	//СБ Ванюков К. -	
	РасчетСуммы(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйВалютнаяСуммаКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетДт);
		Если СвойстваСчета.Валютный Тогда
			Возврат; // Если оба счета валютные, сумма пересчитывается при изменении счета Дт
		КонецЕсли;
	КонецЕсли;
	
	РасчетСуммы(Ложь);
	ПересчитатьСуммуОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСуммаПриИзменении(Элемент)
	
	РасчетСуммы();
	ПересчитатьСуммуОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУниверсальные

// Общая процедура для всех регистров. Устанавливает период и организацию в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-13 (#3087)
	//Если Элемент.ТекущиеДанные.Свойство("Период") Тогда
	//Заменено на:
	Если Элемент.Имя <> "бит_ОборотыПоБюджетам" И
		 Элемент.ТекущиеДанные.Свойство("Период") Тогда	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-13 (#3087)
		Элемент.ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;
	
	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Организация")
			И ЗначениеЗаполнено(Объект.Организация) Тогда
		Элемент.ТекущиеДанные.Организация = Объект.Организация;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Свойство("НоменклатурнаяГруппа") И Элемент.ТекущиеДанные.Свойство("ХарактерДеятельности") Тогда
		Элемент.ТекущиеДанные.НоменклатурнаяГруппа = ИПОсновнаяНоменклатурнаяГруппа;
		Элемент.ТекущиеДанные.ХарактерДеятельности = ИПОсновнойХарактерДеятельности;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование
		И Элемент.ТекущиеДанные.Свойство("Валюта")
		И Элемент.ТекущиеДанные.Свойство("ОтражениеВУСН") Тогда // Регистр накопления "Расходы при УСН".
		
		Элемент.ТекущиеДанные.Валюта        = ВалютаРегламентированногоУчета;
		Элемент.ТекущиеДанные.ОтражениеВУСН = ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСоставРегистров(Команда)

	АдресСпискаРегистров = ПодготовитьСписокРегистровДляНастройки();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСпискаРегистров", АдресСпискаРегистров);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьСоставРегистровЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ОперацияБух.Форма.ФормаНастройки", СтруктураПараметров, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАктивностьДвижений(Команда)

	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , 
			НСтр("ru = 'Операция помечена на удаление, поэтому переключить активность нельзя.
        	|Снимите пометку удаления.'"));
		Возврат;
	КонецЕсли;
	
	ПереключитьАктивностьДвиженийНаСервере();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ИзменениеРеквизитов

&НаСервере
Процедура ПриИзменииОрганизацииНаСервере()
	
	ТипыСвязанныеСОрганизацией = БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией();
	
	Для каждого Проводка Из ХозрасчетныйНаборЗаписей Цикл
		
		Для Инд = 1 по 3 Цикл
			ЗначениеСубконто = Проводка["СубконтоДт" + Инд];
			Если ЗначениеЗаполнено(ЗначениеСубконто)
				И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ЗначениеСубконто));
				ОписаниеТипаСубконто = Новый ОписаниеТипов(МассивТипов);
				Проводка["СубконтоДт" + Инд] = ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 1 по 3 Цикл
			ЗначениеСубконто = Проводка["СубконтоКт" + Инд];
			Если ЗначениеЗаполнено(ЗначениеСубконто)
				И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ЗначениеСубконто));
				ОписаниеТипаСубконто = Новый ОписаниеТипов(МассивТипов);
				Проводка["СубконтоКт" + Инд] = ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Проводка.ПодразделениеДт) Тогда
			Проводка.ПодразделениеДт = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Проводка.ПодразделениеКт) Тогда
			Проводка.ПодразделениеКт = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущаяОрганизация = Объект.Организация;
	НастроитьФормуПоОрганизацииПериоду();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-31 (#3051)
	мНайденныеСтрокиРегистра = Регистры.НайтиСтроки(Новый Структура("Имя","бит_ОборотыПоБюджетам"));
	Если ЗначениеЗаполнено(ок_ФВБ) И
		 мНайденныеСтрокиРегистра.Количество()>0 И
		 мНайденныеСтрокиРегистра[0].Отображение И
		 ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Количество()>0
	Тогда 
		Для Каждого пДвижениеОпБ Из ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"] Цикл 
		    пДвижениеОпБ.бит_БК_Организация = ТекущаяОрганизация;
		КонецЦикла;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-31 (#3051)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура("Организация,СчетУчета,ОстаткиОбороты",
		Форма.Объект.Организация, ТекущиеДанные[ИмяПоляСчетУчета], "Кт");
	ТипыДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы();
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипыДоговора.Найти(ТипПоля) <> Неопределено Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "", ОчищатьСвязанныеСубконто = Истина)
	
	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.ХозрасчетныйНаборЗаписей.НайтиПоИдентификатору(ИдСтроки);
	
	Если ДтКт <> "Кт" Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
		
		Если ОчищатьСвязанныеСубконто Тогда
			ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
		Иначе
			ЗначенияСубконтоСтрокиТаблицы = Новый Структура("СубконтоДт1,СубконтоДт2,СубконтоДт3");
			ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, ЗначенияСубконтоСтрокиТаблицы, "СубконтоДт%Индекс%", "ХозрасчетныйСубконтоДт%Индекс%", ПараметрыДокумента);
			
	КонецЕсли;
	Если ДтКт <> "Дт" Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
		
		Если ОчищатьСвязанныеСубконто Тогда
			ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
		Иначе
			ЗначенияСубконтоСтрокиТаблицы = Новый Структура("СубконтоКт1,СубконтоКт2,СубконтоКт3");
			ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, ЗначенияСубконтоСтрокиТаблицы, "СубконтоКт%Индекс%", "ХозрасчетныйСубконтоКт%Индекс%", ПараметрыДокумента);
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, Элемент, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.Хозрасчетный.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтотОбъект, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСчета(Форма, ДтКт)

	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.ХозрасчетныйНаборЗаписей.НайтиПоИдентификатору(ИдСтроки);
	
	ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
	ПоляФормы.Субконто1 = "ХозрасчетныйСубконто" + ДтКт + "1";
	ПоляФормы.Субконто2 = "ХозрасчетныйСубконто" + ДтКт + "2";
	ПоляФормы.Субконто3 = "ХозрасчетныйСубконто" + ДтКт + "3";
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(СтрокаТаблицы["Счет" + ДтКт], Форма, ПоляФормы, Неопределено, Истина, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Подразделение,Валютный,Количественный,Организация");
	ПоляОбъекта.Субконто1      = "Субконто" + ДтКт + "1";
	ПоляОбъекта.Субконто2      = "Субконто" + ДтКт + "2";
	ПоляОбъекта.Субконто3      = "Субконто" + ДтКт + "3";
	ПоляОбъекта.Подразделение  = "Подразделение" + ДтКт;
	ПоляОбъекта.Валютный       = "Валютный" + ДтКт;
	ПоляОбъекта.Количественный = "Количественный" + ДтКт;
	ПоляОбъекта.Организация    = Форма.Объект.Организация;
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы["Счет" + ДтКт], СтрокаТаблицы, ПоляОбъекта, Истина, , Ложь);
	
	ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт);
	
	ЗаполнитьНадписиВПроводке(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипРесурсовПроводки(Форма, ДтКт)

	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.ХозрасчетныйНаборЗаписей.НайтиПоИдентификатору(ИдСтроки);
		
	ОписаниеСуммы      = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ОписаниеКоличества = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы["Счет"+ДтКт]);
	
	Если ДанныеСчета.Количественный Тогда
		СтрокаТаблицы["Количество"+ДтКт] = ОписаниеКоличества.ПривестиЗначение(СтрокаТаблицы["Количество"+ДтКт]);
	Иначе
		СтрокаТаблицы["Количество"+ДтКт] = NULL;
	КонецЕсли;
	Если ДанныеСчета.Валютный Тогда
		СтрокаТаблицы["ВалютнаяСумма"+ДтКт] = ОписаниеСуммы.ПривестиЗначение(СтрокаТаблицы["ВалютнаяСумма"+ДтКт]);
	Иначе
		СтрокаТаблицы["ВалютнаяСумма"+ДтКт] = NULL;
	КонецЕсли;
	Если ДанныеСчета.НалоговыйУчет Тогда
		СтрокаТаблицы["СуммаНУ"+ДтКт] = ОписаниеСуммы.ПривестиЗначение(СтрокаТаблицы["СуммаНУ"+ДтКт]);
		СтрокаТаблицы["СуммаПР"+ДтКт] = ОписаниеСуммы.ПривестиЗначение(СтрокаТаблицы["СуммаПР"+ДтКт]);
		СтрокаТаблицы["СуммаВР"+ДтКт] = ОписаниеСуммы.ПривестиЗначение(СтрокаТаблицы["СуммаВР"+ДтКт]);
	Иначе
		СтрокаТаблицы["СуммаНУ"+ДтКт] = NULL;
		СтрокаТаблицы["СуммаПР"+ДтКт] = NULL;
		СтрокаТаблицы["СуммаВР"+ДтКт] = NULL;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПоляОбъектаДт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Подразделение, Валютный, Количественный",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3", "ПодразделениеДт", "ВалютныйДт", "КоличественныйДт");
	ПоляОбъектаКт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Подразделение, Валютный, Количественный",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3", "ПодразделениеКт", "ВалютныйКт", "КоличественныйКт");

	Для каждого Проводка Из ХозрасчетныйНаборЗаписей Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъектаДт, Ложь);
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъектаКт, Ложь);
		ЗаполнитьНадписиВПроводке(Проводка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	НастроитьФормуПоОрганизацииПериоду();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДвижений

&НаСервере
Функция ЕстьДвижения()

	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит
			И ЭтотОбъект[СтрокаРегистра.Имя + "НаборЗаписей"].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура НастроитьСоставРегистровЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатДействийПользователя = РезультатЗакрытия;
	
	// Обработаем результат действий пользователя
	Если ТипЗнч(РезультатДействийПользователя) = Тип("СписокЗначений")
	   И РезультатДействийПользователя.Количество() <> 0 Тогда
	   
		Модифицированность = Истина;
		ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтрисовкаФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();


	// Субконто
	Для Сч = 1 По 3 Цикл

		// Видимость СубконтоДт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


		// Выделение не заполненного СубконтоДт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоДт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		

		// Видимость СубконтоКт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		

		// Выделение не заполненного СубконтоКт
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоКт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;

	// ПодразделениеДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеДт", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	// ХозрасчетныйПодразделениеДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ПодразделениеКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеКт", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	// ХозрасчетныйПодразделениеКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Количество и валюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйКоличествоДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйНадписьКоличествоДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.КоличественныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйКоличествоКт, ХозрасчетныйНадписьКоличествоКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйКоличествоКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйНадписьКоличествоКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.КоличественныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйВалютаДт, ХозрасчетныйВалютнаяСуммаДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютаДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютнаяСуммаДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйВалютаКт, ХозрасчетныйВалютнаяСуммаКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютаКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютнаяСуммаКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(ДокументДвижений)

	НастроитьФормуПоОрганизацииПериоду();
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущаяОрганизация = Объект.Организация;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МетаданныеОперации = Объект.Ссылка.Метаданные();
	ЗаполнитьТаблицуРегистров(МетаданныеОперации);
	Если ЗначениеЗаполнено(ДокументДвижений) Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСДвижениями = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
			ДокументДвижений, ДокументДвижений.Метаданные().Движения);
		УстановитьПривилегированныйРежим(Ложь);
		//1c-izhtc spawn 18.08.15 (
		//ОК+ Аверьянова 24012018 - вставлена попытка-исключение для обхода ошибки при записи документа  AT-1634538,AT-1634307,AT-1634203
		Попытка
		//ОК-	
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		//ОК Ванюков К. +// Из регистров бухгалтерии должен копироваться только хозрасчетный // 2012-02-27
	        мРегистрыКУдалению = Новый Массив;
			Для Каждого текРегистр ИЗ РегистрыСДвижениями Цикл 
				Если текРегистр = "бит_Бюджетирование" 
					или текРегистр = "бит_Дополнительный_1"
					или текРегистр = "бит_Дополнительный_2"
					или текРегистр = "бит_Дополнительный_3"
					или текРегистр = "бит_Дополнительный_4"
					или текРегистр = "бит_Дополнительный_5"
					или текРегистр = "бит_СоответствиеЗаписейТрансляции"
			//Начало изменений Широков Н. <SoftBalance> 10/09/13-19:36 
					или текРегистр = "СБ_КорректировкаРСБУ"
			//Конец изменений Широков Н. 
					Тогда 
					мРегистрыКУдалению.Добавить(текРегистр);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого текРегистр ИЗ мРегистрыКУдалению Цикл 
				РегистрыСДвижениями.Удалить(РегистрыСДвижениями.Найти(текРегистр));
			КонецЦикла;
		//ОК Ванюков К. -		
		КонецЕсли;
		//ОК+ Аверьянова 24012018
		Исключение
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());   
		КонецПопытки;  
		//ОК-
		//1c-izhtc spawn 18.08.15 )		
	Иначе
		РегистрыСДвижениями = Новый Массив;
	КонецЕсли;
	
	// Восстановим доп реквизиты и их значения
	Если (Объект.СпособЗаполнения = "ТиповаяОперация") И ЗначениеЗаполнено(Объект.ТиповаяОперация) Тогда
		
		// Нарисуем реквизиты на форме
		ДобавитьЭлементыПараметрыТиповойОперации();
		
		// Заполним параметры
		Если НЕ Объект.Ссылка.Пустая() Тогда
			ВосстановитьЗначенияПараметровТиповойОперации(Объект.Ссылка);
		ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВосстановитьЗначенияПараметровТиповойОперации(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(ДокументДвижений);
	СоздатьЭлементыФормы();
	
	// бит_Финанс добавление кода. Начало: 27.03.2017 # BF-377 {{
	бит_УстановитьВозможностьРедактированияЗаписейФакта();
	// бит_Финанс добавление кода конец }} 
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЭтоСторно = Найти(Объект.СпособЗаполнения, "Сторно") > 0;
	Элементы.СторнируемыйДокумент.Видимость = ЭтоСторно;
	Элементы.ГруппаТиповаяОперация.Видимость = (Объект.СпособЗаполнения = "ТиповаяОперация");
	
	Если ЭтоСторно Тогда
		ОграничитьТипыСторнируемогоДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента(СтрокаУказаниеСтатуса = Неопределено)
	
	Если СтрокаУказаниеСтатуса = "НезаписанныйДокумент" Тогда
		СостояниеДокумента = 0;	
	ИначеЕсли Объект.ПометкаУдаления Тогда
		СостояниеДокумента = 2;
	ИначеЕсли НЕ АктивностьДвижений Тогда
		СостояниеДокумента = 11;
	Иначе
		СостояниеДокумента = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента)
	
	Регистры.Очистить();
	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРегистра     = Регистры.Добавить();
		СтрокаРегистра.Имя = МетаданныеРегистра.Имя;
		
		ПолноеИмя    = МетаданныеРегистра.ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		СтрокаРегистра.ТипРегистра      = ТипРегистра;
		СтрокаРегистра.Синоним          = МетаданныеРегистра.Синоним;
		СтрокаРегистра.ПравоНаИзменение = ПравоДоступа("Изменение", МетаданныеРегистра);
		
	КонецЦикла;
	
	// Сначала показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями)

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			СтрокаРегистра.Отображение = Истина;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-09 (#3051)
		ИначеЕсли СтрокаРегистра.Имя = "бит_КонтрольныеЗначенияБюджетов" Тогда
			СтрокаРегистра.Отображение = Ложь;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-09 (#3051)			
		Иначе
			Отбор = Новый Структура("Имя", СтрокаРегистра.Имя);
			ДобавленПользователем = Объект.ТаблицаРегистровНакопления.НайтиСтроки(Отбор).Количество() > 0
				ИЛИ Объект.ТаблицаРегистровСведений.НайтиСтроки(Отбор).Количество() > 0;
			СтрокаРегистра.Отображение = РегистрыСДвижениями.Найти(СтрокаРегистра.Имя) <> Неопределено
				ИЛИ ДобавленПользователем;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()
	
	// бит_Финанс добавление кода. Начало: 27.03.2017 # BF-377 {{
	бит_СоздатьРеквизитыФормыНачало();
	// бит_Финанс добавление кода конец }}  
	
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			СтрокаРегистра.ЕстьРеквизит = Истина;
			Продолжить;
		КонецЕсли;
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		Если (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			ТипРеквизита  = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-14 (#3270)
			Если СтрокаРегистра.Имя = "бит_ОборотыПоБюджетам" Тогда
				ТипРеквизитаКолонки  = Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов");
				НовыйРеквизитКолонки = Новый РеквизитФормы("СтатьяБДДС", ТипРеквизитаКолонки, "бит_ОборотыПоБюджетамНаборЗаписей", НСтр("ru = 'Статья БДДС'"), Истина);
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизитКолонки);				
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-14 (#3270)
			
		ИначеЕсли НЕ (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		СтрокаРегистра.ЕстьРеквизит = СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 
		ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПрочитатьДвиженияДокумента(ДокументДвижений)
	
	АктивностьДвижений = Истина;
	
	фЭтоКопирование = Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования); //1c-izhtc spawn 18.08.15
	
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если ЗначениеЗаполнено(ДокументДвижений)
			И ДокументДвижений <> Объект.Ссылка Тогда
			Если НЕ СтрокаРегистра.ПравоНаИзменение Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//1c-izhtc spawn 18.08.15 (
		Если фЭтоКопирование Тогда 
		//ОК Ванюков К. +// Из регистров бухгалтерии должен копироваться только хозрасчетный // 2012-02-27
			Если СтрокаРегистра.Имя = "бит_Бюджетирование" 
				или СтрокаРегистра.Имя = "бит_Дополнительный_1"
				или СтрокаРегистра.Имя = "бит_Дополнительный_2"
				или СтрокаРегистра.Имя = "бит_Дополнительный_3"
				или СтрокаРегистра.Имя = "бит_Дополнительный_4"
				или СтрокаРегистра.Имя = "бит_Дополнительный_5"
				или СтрокаРегистра.Имя = "бит_СоответствиеЗаписейТрансляции"
		//Начало изменений Широков Н. <SoftBalance> 10/09/13-19:36 
				или СтрокаРегистра.Имя = "СБ_КорректировкаРСБУ"
		//Конец изменений Широков Н. 
				Тогда 
				Продолжить;
			КонецЕсли;
		//ОК Ванюков К. -		
		КонецЕсли;
		//1c-izhtc spawn 18.08.15 )		
		
		Если СтрокаРегистра.Отображение Тогда
			ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
			НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
			// бит_Финанс изменение кода. Начало. 03.04.2018 BF-2078 {{
			// НаборЗаписей.Прочитать();
			Попытка
				НаборЗаписей.Прочитать();
			Исключение
				СтрокаРегистра.Отображение = Ложь;
				Продолжить;
			КонецПопытки;
			// бит_Финанс изменение кода. Конец. 03.04.2018}}
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-25 (#3147)
			Если СтрокаРегистра.Имя = "бит_ОборотыПоБюджетам" И 
				 ТипЗнч(ДокументДвижений) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") 				 
			Тогда 
				пТаблицаДвижений = НаборЗаписей.Выгрузить();
				пТаблицаДвижений.ЗаполнитьЗначения(Объект.Дата, "Период");
				НаборЗаписей.Загрузить(пТаблицаДвижений);
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-25 (#3147)
			
			ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
			Если ДокументДвижений = Объект.Ссылка Тогда
				СтрокаРегистра.Записывать = ЭтотОбъект[ИмяРеквизита].Количество() > 0;
				Если СтрокаРегистра.Записывать Тогда
					АктивностьДвижений = АктивностьДвижений И ЭтотОбъект[ИмяРеквизита][0].Активность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// бит_Финанс добавление кода. Начало: 27.03.2017 # BF-377 {{
	бит_ПрочитатьДвиженияДокументаЗавершение(ДокументДвижений);
	// бит_Финанс добавление кода конец }}  
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	Элементы.ФормаПереключитьАктивностьДвижений.Заголовок = ?(АктивностьДвижений, 
		НСтр("ru='Выключить активность движений'"), НСтр("ru='Включить активность движений'"));
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			Элементы.ГруппаХозрасчетный.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено 
			И СтрокаРегистра.Отображение Тогда

			//Найдем группу, перед которой будем вставлять новую группу
			СледующаяГруппа = Неопределено;
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда
					СледующаяГруппа = Элементы["Группа" + Строка.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров, СледующаяГруппа);
			
			ТекГруппа.Заголовок      = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
			ТекТаблица.ПутьКДанным = ПутьКДаннымТаблицы;
			ТекГруппа.ПутьКДаннымЗаголовка = ПутьКДаннымТаблицы + ".КоличествоСтрок";
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;

			РеквизитыНабораЗаписей = ЭтотОбъект[ПутьКДаннымТаблицы].Выгрузить(Новый Массив);

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-06 (#3051)
			//Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
			//Заменено на:			
			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено И
				 СтрокаРегистра.Имя <> "бит_ОборотыПоБюджетам"
			Тогда		
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-06 (#3051)
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("ИсходныйНомерСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("ИсходныйНомерСтроки");
			КонецЕсли;
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
			Если РеквизитыНабораЗаписей.Колонки.Найти("Сценарий") <> Неопределено И
				 СтрокаРегистра.Имя = "бит_ОборотыПоБюджетам" Тогда		
				РеквизитыНабораЗаписей.Колонки.Удалить("Сценарий");
			КонецЕсли;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)
			
			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
				Если КолонкаРеквизита.Имя = "НомерСтроки" Тогда
					ТекКолонка.Ширина = 2;
				ИначеЕсли КолонкаРеквизита.Имя = "ВидДвижения" Тогда
					ТекКолонка.Ширина = 15;
				КонецЕсли;
				
				Если СтрокаРегистра.Имя = "НДСРаздельныйУчет"
					И КолонкаРеквизита.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС") Тогда
					
					НовыйПараметр = Новый ПараметрВыбора("ОграничениеСпискаВыбора", "НеОграничивать");
					НовыйМассив = Новый Массив();
					НовыйМассив.Добавить(НовыйПараметр);
					НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив); 
					ТекКолонка.ПараметрыВыбора = НовыеПараметры;
					
				КонецЕсли; 
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-19 (#3051)
				Если СтрокаРегистра.Имя = "бит_ОборотыПоБюджетам" Тогда 
					
					Если СтрНайти(КолонкаРеквизита.Имя, "Сумма", НаправлениеПоиска.СНачала) > 0 Тогда 
						ТекКолонка.УстановитьДействие("ПриИзменении","Подключаемый_бит_ОборотыПоБюджетам_ПриИзмененииСумм");
					КонецЕсли;
					
					
					Если КолонкаРеквизита.Имя = "Сценарий" Тогда 
						ТекКолонка.УстановитьДействие("ПриИзменении","Подключаемый_бит_ОборотыПоБюджетам_ПриИзмененииСценария");
					КонецЕсли;
					
					Если КолонкаРеквизита.Имя = "Валюта" Тогда 
						ТекКолонка.УстановитьДействие("ПриИзменении","Подключаемый_бит_ОборотыПоБюджетам_ПриИзмененииВалюты");
					КонецЕсли;
					
					Если КолонкаРеквизита.Имя = "Сумма" Тогда 
						ТекКолонка.Заголовок = НСтр("ru = 'Сумма без НДС'"); 
					КонецЕсли;
					
					Если КолонкаРеквизита.Имя = "СтавкаНДС" Тогда 
						ТекКолонка.УстановитьДействие("ПриИзменении","Подключаемый_бит_ОборотыПоБюджетам_ПриИзмененииСтавкиНДС");
					КонецЕсли;					
					
				КонецЕсли;				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-19 (#3051)				
				
			КонецЦикла;
			
			// +СБ Кузнецова С. 2016-07-22 Redmine 2567
			Если СтрокаРегистра.Имя = "бит_Дополнительный_2" Тогда
				
				ГруппаСубконтоДт = Элементы.Вставить("ГруппаСубконтоДт", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2СчетКт);
				
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоДт1, ГруппаСубконтоДт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоДт2, ГруппаСубконтоДт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоДт3, ГруппаСубконтоДт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоДт4, ГруппаСубконтоДт);
				
				ГруппаКоличествоВалютаДт = Элементы.Вставить("ГруппаКоличествоВалютаДт", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2СчетКт);
			
				Элементы.Переместить(Элементы.бит_Дополнительный_2КоличествоДт, ГруппаКоличествоВалютаДт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВалютаДт, ГруппаКоличествоВалютаДт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВалютнаяСуммаДт, ГруппаКоличествоВалютаДт);
				
				ГруппаСубконтоКт = Элементы.Вставить("ГруппаСубконтоКт", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2СуммаМУ);
				
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоКт1, ГруппаСубконтоКт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоКт2, ГруппаСубконтоКт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоКт3, ГруппаСубконтоКт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоКт4, ГруппаСубконтоКт);
				
				ГруппаКоличествоВалютаКт = Элементы.Вставить("ГруппаКоличествоВалютаКт", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2СуммаМУ);
			
				Элементы.Переместить(Элементы.бит_Дополнительный_2КоличествоКт, ГруппаКоличествоВалютаКт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВалютаКт, ГруппаКоличествоВалютаКт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВалютнаяСуммаКт, ГруппаКоличествоВалютаКт);
				
				ГруппаСуммы = Элементы.Вставить("ГруппаСуммы", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2Содержание);
				
				Элементы.Переместить(Элементы.бит_Дополнительный_2СуммаМУ, ГруппаСуммы);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СуммаУпр, ГруппаСуммы);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СуммаРегл, ГруппаСуммы);
				
				ГруппаСодержание = Элементы.Вставить("ГруппаСодержание", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2ВидПроводки);
				ГруппаСодержание.Видимость = Ложь;
				
				Элементы.Переместить(Элементы.бит_Дополнительный_2Содержание, ГруппаСодержание);
				Элементы.Переместить(Элементы.бит_Дополнительный_2НомерЖурнала, ГруппаСодержание);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВидПроводки, ГруппаСодержание);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ДатаФормирования, ГруппаСодержание);
				
				Элементы.бит_Дополнительный_2Содержание.Ширина = 2;
				Элементы.бит_Дополнительный_2НомерЖурнала.Ширина = 2;
				Элементы.бит_Дополнительный_2ВидПроводки.Ширина = 2;
				Элементы.бит_Дополнительный_2ДатаФормирования.Ширина = 2;
				
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВидДвиженияМСФО, ТекТаблица);
				Элементы.бит_Дополнительный_2ВидДвиженияМСФО.Ширина = 2;
				
			ИначеЕсли СтрокаРегистра.Имя = "СБ_КорректировкаРСБУ" Тогда
				
				СБ_ГруппаСчетДт = Элементы.Вставить("СБ_ГруппаСчетДт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСубконтоДт1);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСчетДт, СБ_ГруппаСчетДт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУПодразделениеДт, СБ_ГруппаСчетДт);
				
				СБ_ГруппаСубконтоДт = Элементы.Вставить("СБ_ГруппаСубконтоДт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСчетКт);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоДт1, СБ_ГруппаСубконтоДт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоДт2, СБ_ГруппаСубконтоДт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоДт3, СБ_ГруппаСубконтоДт);
				
				СБ_ГруппаКоличествоВалютаДт = Элементы.Вставить("СБ_ГруппаКоличествоВалютаДт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСчетКт);
			
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУКоличествоДт, СБ_ГруппаКоличествоВалютаДт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУВалютаДт, СБ_ГруппаКоличествоВалютаДт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУВалютнаяСуммаДт, СБ_ГруппаКоличествоВалютаДт);
				
				СБ_ГруппаСчетКт = Элементы.Вставить("СБ_ГруппаСчетКт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСубконтоКт1);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСчетКт, СБ_ГруппаСчетКт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУПодразделениеКт, СБ_ГруппаСчетКт);
				
				СБ_ГруппаСубконтоКт = Элементы.Вставить("СБ_ГруппаСубконтоКт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСумма);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоКт1, СБ_ГруппаСубконтоКт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоКт2, СБ_ГруппаСубконтоКт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоКт3, СБ_ГруппаСубконтоКт);
				
				СБ_ГруппаКоличествоВалютаКт = Элементы.Вставить("СБ_ГруппаКоличествоВалютаКт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСумма);
			
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУКоличествоКт, СБ_ГруппаКоличествоВалютаКт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУВалютаКт, СБ_ГруппаКоличествоВалютаКт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУВалютнаяСуммаКт, СБ_ГруппаКоличествоВалютаКт);
				
				СБ_ГруппаСуммаСодержание = Элементы.Добавить("СБ_ГруппаСуммаСодержание", Тип("ГруппаФормы"), ТекТаблица);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСумма, СБ_ГруппаСуммаСодержание);
				
				СБ_ГруппаДанныеКорректировки = Элементы.Добавить("СБ_ГруппаДанныеКорректировки", Тип("ГруппаФормы"), ТекТаблица);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСодержание, СБ_ГруппаДанныеКорректировки);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУНеКорректироватьСтоимостьАвтоматически, СБ_ГруппаДанныеКорректировки);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУФиксировать, СБ_ГруппаДанныеКорректировки);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУПериодКорректировки, СБ_ГруппаДанныеКорректировки);
				
			КонецЕсли;
			// -СБ Кузнецова С.			

			УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(СтрокаРегистра.Имя);
			
			ТекГруппа.ТолькоПросмотр = НЕ СтрокаРегистра.ПравоНаИзменение;
			
		ИначеЕсли ТекГруппа <> Неопределено И НЕ СтрокаРегистра.Отображение Тогда
			
			Элементы.Удалить(ТекГруппа);
			СтрокаРегистра.Отрисован = Ложь;
			
		ИначеЕсли ТекГруппа <> Неопределено И СтрокаРегистра.Отображение Тогда
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;
			
			ТекГруппа.ТолькоПросмотр = НЕ СтрокаРегистра.ПравоНаИзменение;
			
		КонецЕсли;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-14 (#3270)
		Если СтрокаРегистра.Имя = "бит_ОборотыПоБюджетам" И
			 СтрокаРегистра.ЕстьРеквизит
		Тогда
			
			пЭлСтатьяБДДС = Элементы.Найти("бит_ОборотыПоБюджетамСтатьяБДДС");
			пЭтоСписание = ЗначениеЗаполнено(Объект.СторнируемыйДокумент) И
						   ТипЗнч(Объект.СторнируемыйДокумент) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета");
			
			Если пЭлСтатьяБДДС = Неопределено Тогда 
				пЭлСтатьяБДДС = Элементы.Добавить("бит_ОборотыПоБюджетамСтатьяБДДС", Тип("ПолеФормы"), Элементы["бит_ОборотыПоБюджетам"]);
					                                                  
				пЭлСтатьяБДДС.ПутьКДанным = Элементы["бит_ОборотыПоБюджетам"].ПутьКДанным + ".СтатьяБДДС";					
				пЭлСтатьяБДДС.Вид	      = ВидПоляФормы.ПолеВвода;
			КонецЕсли;											
						
			пЭлСтатьяБДДС.Заголовок   = НСтр("ru = 'Статья БДДС'");			
			
			МассивПараметровБДДС = Новый Массив;
			
			НовыйПараметрБДДС = Новый ПараметрВыбора("Отбор.ТипСтатьи"	, ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС"));
			
			МассивПараметровБДДС.Добавить(НовыйПараметрБДДС);
			
			пЭлСтатьяБДДС.ПараметрыВыбора			   = Новый ФиксированныйМассив(МассивПараметровБДДС);
			
			пЭлСтатьяБДДС.Видимость = пЭтоСписание;
			
			пЭлСтатьяБДР = Элементы["бит_ОборотыПоБюджетамСтатьяОборотов"];
			
			Элементы.Переместить(пЭлСтатьяБДДС, пЭлСтатьяБДДС.Родитель, пЭлСтатьяБДР);
			
			пЭлСтатьяБДР.Заголовок = ?(пЭтоСписание, НСтр("ru = 'Статья БДР'"), НСтр("ru = 'Статья оборотов'"));
			
			МассивПараметровБДР = Новый Массив;
			
			Если пЭтоСписание Тогда 
				НовыйПараметрБДР = Новый ПараметрВыбора("Отбор.ТипСтатьи"	, ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДР"));					
				МассивПараметровБДР.Добавить(НовыйПараметрБДР);
			КонецЕсли;
			
			пЭлСтатьяБДР.ПараметрыВыбора			   = Новый ФиксированныйМассив(МассивПараметровБДР);
			
			пЭлСтатьяБДР.УстановитьДействие("ПриИзменении","Подключаемый_бит_ОборотыПоБюджетам_ПриИзмененииСтатьиБДР");
			
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-14 (#3270)		

	КонецЦикла;

	//Если отображается не более одного регистра - прячем заголовок у панели регистров
	Если Регистры.НайтиСтроки(Новый Структура("Отображение", Истина)).Количество() <= 1 И НЕ Объект.СпособЗаполнения = "ТиповаяОперация" Тогда
		Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;

	// БитФинанс добавление кода. Начало: 27.03.2017 # BF-377 {{
	бит_СоздатьЭлементыФормыЗавершение();
	// БитФинанс добавление кода конец }} 
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДвижения()

	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда
			ЭтотОбъект[СтрокаРегистра.Имя + "НаборЗаписей"].Очистить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДвижения(ЗначенияЗаполнения)
	
	Если НЕ ЗначенияЗаполнения.Свойство("Хозрасчетный") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураПроводки Из ЗначенияЗаполнения.Хозрасчетный Цикл
		
		НоваяПроводка = ХозрасчетныйНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, СтруктураПроводки);
		Если НЕ СтруктураПроводки.Свойство("Активность") Тогда
			НоваяПроводка.Активность = Истина;
		КонецЕсли;
		
		Элементы.Хозрасчетный.ТекущаяСтрока = НоваяПроводка.ПолучитьИдентификатор();
		ОбработатьИзменениеСчета(ЭтотОбъект, "Дт");
		ОбработатьИзменениеСчета(ЭтотОбъект, "Кт");
		УстановитьТипРесурсовПроводки(ЭтотОбъект, "Дт");
		УстановитьТипРесурсовПроводки(ЭтотОбъект, "Кт");
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область Сторнирование

&НаСервере
Процедура СформироватьДвиженияСторноНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДвижения();
	Объект.ТаблицаРегистровНакопления.Очистить();
	Объект.ТаблицаРегистровСведений.Очистить();
	
	РегистрыИсключения = Новый Структура;
	Для каждого Регистр Из Метаданные.РегистрыСведений Цикл
		РегистрыИсключения.Вставить(Регистр.Имя); // Регистры сведений не сторнируются
	КонецЦикла;
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
		Объект.СторнируемыйДокумент, Объект.СторнируемыйДокумент.Метаданные().Движения, РегистрыИсключения);
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(Объект.СторнируемыйДокумент);
	СторнироватьДвижения();
	СоздатьЭлементыФормы();
	
	ПересчитатьСуммуОперации(ЭтотОбъект);
	Объект.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сторно документа ""%1""'"),
		Строка(Объект.СторнируемыйДокумент));

    ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура СторнироватьДвижения()
	
	Для каждого СтрокаРегистра Из Регистры Цикл

		Если НЕ СтрокаРегистра.ЕстьРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита       = СтрокаРегистра.Имя + "НаборЗаписей";
		МетаданныеРегистра = РеквизитФормыВЗначение(ИмяРеквизита).Метаданные();

		Для каждого Движение Из ЭтотОбъект[ИмяРеквизита] Цикл

			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
					Если Ресурс.ПризнакУчета = Неопределено Тогда
						Движение[Ресурс.Имя] = - Движение[Ресурс.Имя];
					Иначе
						Если ЗначениеЗаполнено(Движение[Ресурс.Имя + "Дт"]) Тогда
							Движение[Ресурс.Имя + "Дт"] = - Движение[Ресурс.Имя + "Дт"];
						КонецЕсли;
						Если ЗначениеЗаполнено(Движение[Ресурс.Имя + "Кт"]) Тогда
							Движение[Ресурс.Имя + "Кт"] = - Движение[Ресурс.Имя + "Кт"];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
					Движение[Ресурс.Имя] = - Движение[Ресурс.Имя];
				КонецЦикла;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СторнируемыйДокументПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьДвиженияСторноНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьТипыСторнируемогоДокумента()
	
	// Сторнировать можно только документы, которые делают движения по регистрам накопления или бухгалтерии.
	МассивТипов = Новый Массив;
	ВсеРегистрыНакопления  = Метаданные.РегистрыНакопления;
	ВсеРегистрыБухгалтерии = Метаданные.РегистрыБухгалтерии;
	Для каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		ВключитьТип = Ложь;
		Для каждого ДвижениеДокумента Из ОбъектМетаданных.Движения Цикл
			Если ВсеРегистрыНакопления.Содержит(ДвижениеДокумента)
				ИЛИ ВсеРегистрыБухгалтерии.Содержит(ДвижениеДокумента) Тогда
				ВключитьТип = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ВключитьТип Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка." + ОбъектМетаданных.Имя));
		КонецЕсли;
	КонецЦикла;
	Элементы.СторнируемыйДокумент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПроводками

&НаКлиенте
Функция СтруктураДанныхПроводки(ТекущиеДанные)

	СтруктураПроводки = Новый Структура("НомерСтроки,СчетДт,ПодразделениеДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|КоличествоДт,ВалютаДт,ВалютнаяСуммаДт,
		|СчетКт,ПодразделениеКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|КоличествоКт,ВалютаКт,ВалютнаяСуммаКт,
		|Сумма,Содержание,СуммаНУДт,СуммаПРДт,СуммаВРДт,СуммаНУКт,СуммаПРКт,СуммаВРКт");
	ЗаполнитьЗначенияСвойств(СтруктураПроводки, ТекущиеДанные);

	Возврат СтруктураПроводки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуОперации(Форма)
	
	Форма.Объект.СуммаОперации = Форма.ХозрасчетныйНаборЗаписей.Итог("Сумма");

КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыПоСтрокеНаСервере(Проводка, Знач Дата, Знач ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если ПересчетСуммыПоКурсуДт = Истина Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Проводка.ВалютнаяСуммаДт, Проводка.ВалютаДт, Дата);
	ИначеЕсли ПересчетСуммыПоКурсуДт = Ложь Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Проводка.ВалютнаяСуммаКт, Проводка.ВалютаКт, Дата);
	КонецЕсли;
	
	ВедетсяНалоговыйУчетДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт).НалоговыйУчет;
	ВедетсяНалоговыйУчетКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт).НалоговыйУчет;
	ОтразитьНепринимаемыеДоходыИРасходы(Проводка, ВедетсяНалоговыйУчетДт, ВедетсяНалоговыйУчетКт);
	
	Если ВедетсяНалоговыйУчетДт Тогда
		Проводка.СуммаНУДт = Проводка.Сумма - Проводка.СуммаПРДт - Проводка.СуммаВРДт;
	КонецЕсли;
	
	Если ВедетсяНалоговыйУчетКт Тогда
		Проводка.СуммаНУКт = Проводка.Сумма - Проводка.СуммаПРКт - Проводка.СуммаВРКт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммы(ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные     = Элементы.Хозрасчетный.ТекущиеДанные;
	СтруктураПроводки = СтруктураДанныхПроводки(ТекущиеДанные);
	
	ПересчитатьСуммыПоСтрокеНаСервере(СтруктураПроводки, Объект.Дата, ПересчетСуммыПоКурсуДт);
	
	ЗаполнитьЗначенияСвойств(Элементы.Хозрасчетный.ТекущиеДанные, СтруктураПроводки);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьНепринимаемыеДоходыИРасходы(СтруктураПроводки, ВедетсяНалоговыйУчетДт, ВедетсяНалоговыйУчетКт)

	ОтразитьНеПринимаемыеДоходы = ВедетсяНалоговыйУчетКт И ОпределитьНеПринимаемыеДоходы(СтруктураПроводки);
	Если ОтразитьНеПринимаемыеДоходы Тогда
		СтруктураПроводки.СуммаПРКт = СтруктураПроводки.Сумма;
	КонецЕсли;

	ОтразитьНеПринимаемыеРасходы = ВедетсяНалоговыйУчетДт И ОпределитьНеПринимаемыеРасходы(СтруктураПроводки);
	Если ОтразитьНеПринимаемыеРасходы Тогда
		СтруктураПроводки.СуммаПРДт = СтруктураПроводки.Сумма;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОпределитьНеПринимаемыеДоходы(СтруктураПроводки)

	Если Не ЗначениеЗаполнено(СтруктураПроводки.СчетКт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураПроводки.СчетКт <> ПланыСчетов.Хозрасчетный.ПустаяСсылка()
		И БухгалтерскийУчетПовтИсп.СчетВИерархии(СтруктураПроводки.СчетКт, ПланыСчетов.Хозрасчетный.ПрочиеДоходы) Тогда
		Для С=1 По 3 Цикл
			Субконто = СтруктураПроводки["СубконтоКт" + С];
			Если ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				РеквизитыСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субконто, "ЭтоГруппа,ПринятиеКналоговомуУчету");
				Если РеквизитыСубконто.ПринятиеКналоговомуУчету = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ РеквизитыСубконто.ЭтоГруппа
					И Субконто <> Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка() И 
					НЕ РеквизитыСубконто.ПринятиеКналоговомуУчету Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаСервере
Функция ОпределитьНеПринимаемыеРасходы(СтруктураПроводки)

	Если Не ЗначениеЗаполнено(СтруктураПроводки.СчетДт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для С=1 По 3 Цикл
		Субконто = СтруктураПроводки["СубконтоДт" + С];
		Если ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		
			РеквизитыСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субконто, 
				"ЭтоГруппа, ВидРасходовНУ, ВидДеятельностиДляНалоговогоУчетаЗатрат, Представление");
			
			Если РеквизитыСубконто.ВидДеятельностиДляНалоговогоУчетаЗатрат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если РеквизитыСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
		
			Если РеквизитыСубконто.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				// Расходы на строительство объектов основных средств, не относятся к расходам по производству и реализации
				Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СтруктураПроводки.СчетДт, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) Тогда
					Возврат Ложь;
				КонецЕсли;
				ОтнесениеКЕНВД = РеквизитыСубконто.ВидДеятельностиДляНалоговогоУчетаЗатрат;
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
					Отказ = Истина;
					ШаблонСообщения = НСтр("ru='%1 - неправильно указана: для непринимаемых расходов (%2).
						|Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым - это не имеет смысла для расчета налоговой базы и не поддерживается программой.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						РеквизитыСубконто.Представление,
						ОтнесениеКЕНВД);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "Хозрасчетный[" + Формат(СтруктураПроводки.НомерСтроки, "ЧГ=0") + "].СчетКт", "Объект", Отказ);
					Возврат Ложь;
				КонецЕсли;
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты Тогда
					Отказ = Истина;
					ШаблонСообщения = НСтр("ru='%1 - неправильно указана: для непринимаемых расходов (%2).
						|Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым - это не имеет смысла для расчета налоговой базы и не поддерживается программой.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						РеквизитыСубконто.Представление,
						ОтнесениеКЕНВД);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "Хозрасчетный[" + Формат(СтруктураПроводки.НомерСтроки, "ЧГ=0") + "].СчетКт", "Объект", Отказ);
					Возврат Ложь;
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		
			РеквизитыСубконто = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Субконто,
				"ЭтоГруппа, ПринятиеКналоговомуУчету, ВидДеятельностиДляНалоговогоУчетаЗатрат, Представление");
				
			Если РеквизитыСубконто.ВидДеятельностиДляНалоговогоУчетаЗатрат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			Если РеквизитыСубконто.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
		
			Если Субконто <> Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка()
					И НЕ РеквизитыСубконто.ПринятиеКналоговомуУчету Тогда
				ОтнесениеКЕНВД = РеквизитыСубконто.ВидДеятельностиДляНалоговогоУчетаЗатрат;
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
					Отказ = Истина;
					ШаблонСообщения = НСтр("ru='СтруктураПроводки %1: неправильно указана статья затрат для непринимаемых расходов (%2).
						|Расходы, не учитываемые для целей налогообложения, не следует относить к деятельности, облагаемой ЕНВД, - это не имеет смысла для расчета налоговой базы и не поддерживается программой.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						СтруктураПроводки.Содержание,
						ОтнесениеКЕНВД);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "Хозрасчетный[" + Формат(СтруктураПроводки.НомерСтроки, "ЧГ=0") + "].СчетКт", "Объект", Отказ);
					Возврат Ложь;
				КонецЕсли;
				Если ОтнесениеКЕНВД = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты Тогда
					Отказ = Истина;
					ШаблонСообщения = НСтр("ru='СтруктураПроводки %1: неправильно указана статья затрат для непринимаемых расходов (%2).
						|Расходы, не учитываемые для целей налогообложения, не следует относить к распределяемым - это не имеет смысла для расчета налоговой базы и не поддерживается программой.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						СтруктураПроводки.Содержание,
						ОтнесениеКЕНВД);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "Хозрасчетный[" + Формат(СтруктураПроводки.НомерСтроки, "ЧГ=0") + "].СчетКт", "Объект", Отказ);
					Возврат Ложь;
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ПересчетСуммыПоКурсу(Знач ВалютнаяСумма, Знач Валюта, Знач Дата)

	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);

	Сумма = ?(СтруктураКурса.Кратность = 0, 0, Окр(ВалютнаяСумма * СтруктураКурса.Курс / СтруктураКурса.Кратность, 2));
	Возврат Сумма;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка)
	
	Проводка.НадписьНУ = НСтр("ru = 'НУ:'");
	Проводка.НадписьПР = НСтр("ru = 'ПР:'");
	Проводка.НадписьВР = НСтр("ru = 'ВР:'");
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

КонецПроцедуры

#КонецОбласти

#Область НастройкаСоставаРегистров

&НаСервере
Функция ПодготовитьСписокРегистровДляНастройки()

	// Актуализируем информацию о наличии движений
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.ЕстьРеквизит Тогда 
			СтрокаРегистра.ЕстьДвижения = ЭтотОбъект[СтрокаРегистра.Имя + "НаборЗаписей"].Количество() > 0;
		КонецЕсли;
	КонецЦикла;
	
	// Поместим таблицу Регистры во временное хранилище
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Регистры"), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя)
	
	Для каждого ИзмененныйРегистр Из РезультатДействийПользователя Цикл
		
		ИмяРегистра = ИзмененныйРегистр.Значение;
		
		РезультатПоиска = Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		Если РезультатПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРегистра = РезультатПоиска[0];
		
		СтрокаРегистра.Отображение = ИзмененныйРегистр.Пометка;
		
		Если НЕ СтрокаРегистра.Отображение Тогда
			Если СтрокаРегистра.ЕстьРеквизит Тогда
				ЭтотОбъект[ИмяРегистра + "НаборЗаписей"].Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ОбновляемаяТаблица = Объект.ТаблицаРегистровНакопления;
		Иначе
			ОбновляемаяТаблица = Объект.ТаблицаРегистровСведений;
		КонецЕсли;
		
		СтрокиТаблицы = ОбновляемаяТаблица.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		
		ЕстьВТаблице = СтрокиТаблицы.Количество() > 0;
		
		Если СтрокаРегистра.Отображение И НЕ ЕстьВТаблице Тогда
			НоваяСтрока     = ОбновляемаяТаблица.Добавить();
			НоваяСтрока.Имя = ИмяРегистра;
		ИначеЕсли НЕ СтрокаРегистра.Отображение И ЕстьВТаблице Тогда
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				ОбновляемаяТаблица.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
	СоздатьРеквизитыФормы();
	СоздатьЭлементыФормы();

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПереключитьАктивностьДвиженийНаСервере()
	
	НоваяАктивность = НЕ АктивностьДвижений;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если НЕ СтрокаРегистра.ЕстьРеквизит Тогда
			Продолжить;
		КонецЕсли;
		ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
		
		НаборЗаписей = РеквизитФормыВЗначение(ПутьКДаннымТаблицы);
		НаборЗаписей.УстановитьАктивность(НоваяАктивность);
		ЗначениеВРеквизитФормы(НаборЗаписей, ПутьКДаннымТаблицы);
		
		ТекГруппа = Элементы["Группа" + СтрокаРегистра.Имя];
		Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			ТекГруппа.Картинка = ?(НоваяАктивность, 
				БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Элементы.ФормаПереключитьАктивностьДвижений.Заголовок = ?(НоваяАктивность, 
		НСтр("ru='Выключить активность движений'"), НСтр("ru='Включить активность движений'"));
	
	АктивностьДвижений = НоваяАктивность;
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОрганизацииПериоду()
	
	ПериодДок   = Объект.Дата;
	ПериодФО    = Объект.Дата;
	Организация = Объект.Организация;
	
	// При переходе с ОСН на УСН в "Операциях (БУ и НУ)", введенных первым днем периода применения УСН,
	// требуется показывать суммы налогового учета по налогу на прибыль для просмотра и редактирования пользователем
	// результатов операции "Очистка остатков НУ" Помощника по переходу на УСН
	Если УчетУСН.ЭтоПервыйДеньПримененияУСНПослеУплатыНалогаНаПрибыль(Организация, ПериодДок) Тогда
		ПериодФО = НачалоДня(ПериодДок) - 1;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикНДФЛ(Организация, ПериодДок)
		И НЕ УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, ПериодДок) Тогда
		
		ИПОсновнаяНоменклатурнаяГруппа = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Организация, ПериодДок);
		ИПОсновнойХарактерДеятельности = УчетнаяПолитика.ОсновнойХарактерДеятельности(Организация, ПериодДок);
		
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Организация, ПериодФО);
	
	ПоляРазниц = Новый Массив;
	ПоляРазниц.Добавить(Элементы.ХозрасчетныйНадписьПР);
	ПоляРазниц.Добавить(Элементы.ХозрасчетныйНадписьВР);
	ПоляРазниц.Добавить(Элементы.ХозрасчетныйСуммаПРДт);
	ПоляРазниц.Добавить(Элементы.ХозрасчетныйСуммаВРДт);
	ПоляРазниц.Добавить(Элементы.ХозрасчетныйСуммаПРКт);
	ПоляРазниц.Добавить(Элементы.ХозрасчетныйСуммаВРКт);
	
	ПоляЗаголовков = Новый Структура;
	ПоляЗаголовков.Вставить("Дт", Элементы.ХозрасчетныйГруппаНалоговыйУчетДт);
	ПоляЗаголовков.Вставить("Кт", Элементы.ХозрасчетныйГруппаНалоговыйУчетКт);
	
	НалогНаПрибыльБухгалтерскийУчет.НастроитьПоляУчетаРазниц(ПоляРазниц, ПоляЗаголовков, ПериодДок, Организация);
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(ИмяРегистра)
	
	ЭлементКонтрагент         = Элементы.Найти(ИмяРегистра + "Контрагент");
	ЭлементДоговорКонтрагента = Элементы.Найти(ИмяРегистра + "ДоговорКонтрагента");
	ЭлементПатент             = Элементы.Найти(ИмяРегистра + "Патент");
	
	Если ЭлементДоговорКонтрагента <> Неопределено Тогда
		СвязиПараметровДоговор = Новый Массив;
		СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));		
		Если ЭлементКонтрагент <> Неопределено Тогда			
			СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы."+ИмяРегистра+".ТекущиеДанные.Контрагент"));
		КонецЕсли; 
		ЭлементДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровДоговор);
	КонецЕсли; 

	Если ЭлементПатент <> Неопределено Тогда
		СвязиПараметровПатент = Новый Массив;
		СвязиПараметровПатент.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		ЭлементПатент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровПатент);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораКолонокСпискаРегистра()

&НаКлиенте
Процедура ВопросПриИзменииОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзменииОрганизацииНаСервере();
	Иначе
		Объект.Организация = ТекущаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-12 (#3148)
&НаСервереБезКонтекста
Функция ПолучитьID_РазноскаПоСторнируемомуДокументу(СторнируемыйДокумент)
	
	мдСторнируемогоДокумента = СторнируемыйДокумент.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОК_ID_Разноска", мдСторнируемогоДокумента) Тогда 
		Возврат СторнируемыйДокумент.ОК_ID_Разноска;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-25 (#3147)
	//Иначе
	//	Возврат "";		
	//Заменено на:
	
	ИначеЕсли ТипЗнч(СторнируемыйДокумент) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда 
		пПлатежнаяПозиция = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(СторнируемыйДокумент,
									   	   ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция"), ПредопределенноеЗначение("Документ.бит_ПлатежнаяПозиция.ПустаяСсылка"));
		Если ЗначениеЗаполнено(пПлатежнаяПозиция) Тогда 
			Если ЗначениеЗаполнено(пПлатежнаяПозиция.ДокументОснование) Тогда 
				Возврат пПлатежнаяПозиция.ДокументОснование.ОК_ID_Разноска_ДокОснования;				
			КонецЕсли;
		КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-25 (#3147)	
	
	КонецЕсли;

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-25 (#3147)
	Возврат "";		
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-25 (#3147)
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-12 (#3148)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-14 (#3270)
&НаСервере
Процедура ЗаполнитьДвиженияПоОПБ(ДокументДвижений)
	
	НаборОПБ = ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"];
	НаборОПБ.Очистить();
	
	ОбСистемы_ОПБ = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрНакопления.бит_ОборотыПоБюджетам");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ОборотыПоБюджетам.Период КАК Период,
	|	бит_ОборотыПоБюджетам.Регистратор КАК Регистратор,
	|	бит_ОборотыПоБюджетам.НомерСтроки КАК НомерСтроки,
	|	бит_ОборотыПоБюджетам.Активность КАК Активность,
	|	бит_ОборотыПоБюджетам.Сценарий КАК Сценарий,
	|	бит_ОборотыПоБюджетам.ЦФО КАК ЦФО,
	|	бит_ОборотыПоБюджетам.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_ОборотыПоБюджетам.Валюта КАК Валюта,
	|	бит_ОборотыПоБюджетам.Контрагент КАК Контрагент,
	|	бит_ОборотыПоБюджетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	бит_ОборотыПоБюджетам.Проект КАК Проект,
	|	бит_ОборотыПоБюджетам.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	бит_ОборотыПоБюджетам.БанковскийСчет КАК БанковскийСчет,
	|	бит_ОборотыПоБюджетам.Аналитика_1 КАК Аналитика_1,
	|	бит_ОборотыПоБюджетам.Аналитика_2 КАК Аналитика_2,
	|	бит_ОборотыПоБюджетам.Аналитика_3 КАК Аналитика_3,
	|	бит_ОборотыПоБюджетам.Аналитика_4 КАК Аналитика_4,
	|	бит_ОборотыПоБюджетам.Аналитика_5 КАК Аналитика_5,
	|	бит_ОборотыПоБюджетам.Аналитика_6 КАК Аналитика_6,
	|	бит_ОборотыПоБюджетам.Аналитика_7 КАК Аналитика_7,
	|	бит_ОборотыПоБюджетам.Количество КАК Количество,
	|	бит_ОборотыПоБюджетам.Сумма КАК Сумма,
	|	бит_ОборотыПоБюджетам.СуммаРегл КАК СуммаРегл,
	|	бит_ОборотыПоБюджетам.СуммаУпр КАК СуммаУпр,
	|	бит_ОборотыПоБюджетам.СуммаСценарий КАК СуммаСценарий,
	|	бит_ОборотыПоБюджетам.СуммаСНДС КАК СуммаСНДС,
	|	бит_ОборотыПоБюджетам.СуммаСНДСРегл КАК СуммаСНДСРегл,
	|	бит_ОборотыПоБюджетам.СуммаСНДСУпр КАК СуммаСНДСУпр,
	|	бит_ОборотыПоБюджетам.СуммаСНДССценарий КАК СуммаСНДССценарий,
	|	бит_ОборотыПоБюджетам.СтавкаНДС КАК СтавкаНДС,
	|	бит_ОборотыПоБюджетам.Комментарий КАК Комментарий,
	|	бит_ОборотыПоБюджетам.бит_БК_Организация КАК бит_БК_Организация,
	|	бит_ОборотыПоБюджетам.МоментВремени КАК МоментВремени,
	|	бит_ОборотыПоБюджетам.СтатьяОборотов.ТипСтатьи КАК ТипСтатьиОборотов
	|ПОМЕСТИТЬ ВТ0_ДвиженияДокумента
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	|ГДЕ
	|	бит_ОборотыПоБюджетам.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	ТипСтатьиОборотов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПоБДР.Период КАК Период,
	|	ДвиженияПоБДР.Регистратор КАК Регистратор,
	|	ДвиженияПоБДР.НомерСтроки КАК НомерСтроки,
	|	ДвиженияПоБДР.Активность КАК Активность,
	|	ДвиженияПоБДР.Сценарий КАК Сценарий,
	|	ДвиженияПоБДР.ЦФО КАК ЦФО,
	|	ДвиженияПоБДР.СтатьяОборотов КАК СтатьяОборотов,
	|	ДвиженияПоБДР.Валюта КАК Валюта,
	|	ДвиженияПоБДР.Контрагент КАК Контрагент,
	|	ДвиженияПоБДР.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДвиженияПоБДР.Проект КАК Проект,
	|	ДвиженияПоБДР.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ДвиженияПоБДР.БанковскийСчет КАК БанковскийСчет,
	|	ДвиженияПоБДР.Аналитика_1 КАК Аналитика_1,
	|	ДвиженияПоБДР.Аналитика_2 КАК Аналитика_2,
	|	ДвиженияПоБДР.Аналитика_3 КАК Аналитика_3,
	|	ДвиженияПоБДР.Аналитика_4 КАК Аналитика_4,
	|	ДвиженияПоБДР.Аналитика_5 КАК Аналитика_5,
	|	ДвиженияПоБДР.Аналитика_6 КАК Аналитика_6,
	|	ДвиженияПоБДР.Аналитика_7 КАК Аналитика_7,
	|	ДвиженияПоБДР.Количество КАК Количество,
	|	ДвиженияПоБДР.Сумма КАК Сумма,
	|	ДвиженияПоБДР.СуммаРегл КАК СуммаРегл,
	|	ДвиженияПоБДР.СуммаУпр КАК СуммаУпр,
	|	ДвиженияПоБДР.СуммаСценарий КАК СуммаСценарий,
	|	ДвиженияПоБДР.СуммаСНДС КАК СуммаСНДС,
	|	ДвиженияПоБДР.СуммаСНДСРегл КАК СуммаСНДСРегл,
	|	ДвиженияПоБДР.СуммаСНДСУпр КАК СуммаСНДСУпр,
	|	ДвиженияПоБДР.СуммаСНДССценарий КАК СуммаСНДССценарий,
	|	ДвиженияПоБДР.СтавкаНДС КАК СтавкаНДС,
	|	ДвиженияПоБДР.Комментарий КАК Комментарий,
	|	ДвиженияПоБДР.бит_БК_Организация КАК бит_БК_Организация,
	|	ДвиженияПоБДДС.СтатьяОборотов КАК СтатьяБДДС
	|ИЗ
	|	ВТ0_ДвиженияДокумента КАК ДвиженияПоБДР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствиеЗаписейТрансляции.СрезПоследних(
	|				&Дата,
	|				Источник = &Источник
	|					И Приемник = &Приемник
	|					И Регистратор = &Регистратор) КАК СоответствиеБДР_БДДС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ0_ДвиженияДокумента КАК ДвиженияПоБДДС
	|			ПО СоответствиеБДР_БДДС.НомерСтрокиПриемника = ДвиженияПоБДДС.НомерСтроки
	|		ПО ДвиженияПоБДР.НомерСтроки = СоответствиеБДР_БДДС.НомерСтрокиИсточника
	|ГДЕ
	|	ДвиженияПоБДР.ТипСтатьиОборотов = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДР)
	|	И ДвиженияПоБДДС.ТипСтатьиОборотов = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.БДДС)";
	
	Запрос.УстановитьПараметр("Дата"		, ДокументДвижений.Дата);
	Запрос.УстановитьПараметр("Источник"	, ОбСистемы_ОПБ);
	Запрос.УстановитьПараметр("Приемник"	, ОбСистемы_ОПБ);
	Запрос.УстановитьПараметр("Регистратор" , ДокументДвижений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		нСтрока = НаборОПБ.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, ВыборкаДетальныеЗаписи);
	КонецЦикла;		
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-14 (#3270)

#КонецОбласти

#КонецОбласти

#Область ТиповыеОперации

&НаКлиенте
Процедура ТиповаяОперацияПриИзменении(Элемент)

	ДобавитьЭлементыПараметрыТиповойОперации();

КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыПараметрыТиповойОперации()

	ТиповаяОперация = Объект.ТиповаяОперация;
	ТипыСвязанныеСОрганизацией = БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией();
	
	//Служебные массивы для процедуры ИзменитьРеквизиты
	УдаляемыеРеквизиты	 = Новый Массив;
	ДобавляемыеРеквизиты = Новый Массив;
	
	// Удалим предыдущие реквизиты и элементы
	Для Каждого Параметр Из ПараметрыТиповойОперации Цикл
		Элементы.Удалить(Элементы["Поле"+Параметр.ИмяРеквизита]);
		УдаляемыеРеквизиты.Добавить(Параметр.ИмяРеквизита);
	КонецЦикла;
	
	ПараметрыТиповойОперации.Очистить();
	
	// Подготовим параметры, которые используются для текущей операции.
	ТаблицаПараметровТиповойОперации = ПараметрыТиповойОперации(ТиповаяОперация);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПараметровТиповойОперации Цикл
		// Добавляем новый Параметр в форму
		ИмяРеквизита = "ПараметрТиповойОперации" + СтрокаТаблицы.ПорядокПараметра;
		ТипРеквизита = СтрокаТаблицы.ОписаниеТипаРеквизита.Получить();
		Реквизит	 = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , СтрокаТаблицы.Наименование, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		// Добавляем связь параметра и реквизита формы
		СтрокаПараметров				 = ПараметрыТиповойОперации.Добавить();
		СтрокаПараметров.Параметр		 = СтрокаТаблицы.Ссылка;
		СтрокаПараметров.ИмяРеквизита	 = "ПараметрТиповойОперации"+СтрокаТаблицы.ПорядокПараметра;
	КонецЦикла;
	
	// Добавляем новые реквизиты и удаляем старые.
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	//Отрисуем новые поля ввода на форме
	Для Каждого СтрокаТаблицы Из ТаблицаПараметровТиповойОперации Цикл
		
		РодительПоля		 = Элементы.ГруппаПараметрыТиповойОперации;
		ИмяРеквизита		 = "ПараметрТиповойОперации"+СтрокаТаблицы.ПорядокПараметра;
		ТипРеквизита		 = СтрокаТаблицы.ОписаниеТипаРеквизита.Получить();
		// Добавляем новый элемент
		Элемент				 = Элементы.Добавить("Поле"+ИмяРеквизита, Тип("ПолеФормы"), РодительПоля);
		Элемент.Вид			 = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным	 = ИмяРеквизита;
		// Установим расширенную подсказку или подсказку ввода
		РасширеннаяПодсказка = СтрокаТаблицы.Подсказка;
		Если НЕ ПустаяСтрока(РасширеннаяПодсказка) Тогда
			МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РасширеннаяПодсказка, " ");
			Если МассивСлов.Количество() > 5 ИЛИ ТипРеквизита.СодержитТип(Тип("Число")) ИЛИ ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
				Элемент.РасширеннаяПодсказка.Заголовок	 = РасширеннаяПодсказка;
				Элемент.ОтображениеПодсказки			 = ОтображениеПодсказки.Кнопка;
			Иначе
				Элемент.ПодсказкаВвода					 = РасширеннаяПодсказка;
			КонецЕсли;
		КонецЕсли;
		// Установить связь параметров выбора
		МассивСвязейПараметровВыбора = Новый Массив;
		
		// Связь по владельцу
		Если СтрокаТаблицы.ПорядокВладельца <> 0 Тогда
			ИмяПараметраВладельца = "ПараметрТиповойОперации"+СтрокаТаблицы.ПорядокВладельца;
			// Проверим есть ли такой реквизит на форме.
			СтруктураПоиска = Новый Структура("ИмяРеквизита", ИмяПараметраВладельца);
			МассивСтрок = ПараметрыТиповойОперации.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() <> 0 Тогда
				НоваяСвязь	 = Новый СвязьПараметраВыбора("Отбор.Владелец", ИмяПараметраВладельца);
				МассивСвязейПараметровВыбора.Добавить(НоваяСвязь);
			КонецЕсли;
		КонецЕсли;
		// Связь по организации
		Для Каждого ТипЭлемента Из ТипРеквизита.Типы() Цикл
			Если ТипыСвязанныеСОрганизацией.СодержитТип(ТипЭлемента) Тогда
				Если ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") ИЛИ ТипЭлемента = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
					НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация");
				Иначе
					НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
				КонецЕсли;
				МассивСвязейПараметровВыбора.Добавить(НоваяСвязь);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьЗначенияПараметровТиповойоперации(ДокументОперация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПараметров", ПараметрыТиповойОперации.Выгрузить());
	Запрос.УстановитьПараметр("Операция", ДокументОперация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПараметров.Параметр,
		|	ТаблицаПараметров.ИмяРеквизита
		|ПОМЕСТИТЬ ВТ_ТаблицаПараметров
		|ИЗ
		|	&ТаблицаПараметров КАК ТаблицаПараметров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПараметров.ИмяРеквизита,
		|	ЗначенияПараметровТиповойОперации.Значение КАК Значение
		|ИЗ
		|	ВТ_ТаблицаПараметров КАК ВТ_ТаблицаПараметров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПараметровТиповойОперации КАК ЗначенияПараметровТиповойОперации
		|		ПО ВТ_ТаблицаПараметров.Параметр = ЗначенияПараметровТиповойОперации.Параметр
		|ГДЕ
		|	ЗначенияПараметровТиповойОперации.Операция = &Операция";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭтотОбъект[Выборка.ИмяРеквизита] = Выборка.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыТиповойОперации(Владелец)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыТиповойОперации.Ссылка,
	|	ПараметрыТиповойОперации.Наименование КАК Наименование,
	|	ПараметрыТиповойОперации.ОписаниеТипаРеквизита,
	|	ПараметрыТиповойОперации.ПорядокПараметра,
	|	ПараметрыТиповойОперации.Подсказка,
	|	ВЫБОР
	|		КОГДА ПараметрыТиповойОперации.СвязьПоВладельцу <> ЗНАЧЕНИЕ(Справочник.ПараметрыТиповойОперации.ПустаяСсылка)
	|			ТОГДА ПараметрыТиповойОперации.СвязьПоВладельцу.ПорядокПараметра
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокВладельца
	|ИЗ
	|	Справочник.ПараметрыТиповойОперации КАК ПараметрыТиповойОперации
	|ГДЕ
	|	ПараметрыТиповойОперации.Владелец = &Владелец
	|	И ПараметрыТиповойОперации.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрыТиповойОперации.ПорядокПараметра";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Функция ЭтоПараметр(Значение)

	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ПараметрыТиповойОперации");

КонецФункции

&НаСервере
Функция ЭтоПериодическийОстаточныйРегистр(ТипРегистра, ИмяРегистра)
	
	Если ТипРегистра = Перечисления.ТипыРегистров.РегистрНакопления Тогда
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
		ПериодическийОстаточныйРегистр = МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	Иначе
		МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
		ПериодическийОстаточныйРегистр = (МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
	КонецЕсли;
	
	Возврат ПериодическийОстаточныйРегистр;
	
КонецФункции

&НаСервере
Функция ПредыдущиеЗначенияРесурсов(ИмяРегистра, ТаблицаАналитикиДвижения);
	
	СтруктураОтбораИзмерений = Новый Структура;
	СтруктураОтбораИзмерений.Вставить("ТипПоляРегистра", Перечисления.ТипыПолейРегистра.Измерение);
	СтрокиИзмерений = ТаблицаАналитикиДвижения.НайтиСтроки(СтруктураОтбораИзмерений);
	
	// Получим структуру измерений
	СтруктураИзмерений = Новый Структура;
	Для Каждого Измерение Из СтрокиИзмерений Цикл;
		Значение = Измерение.Значение;
		Если ЭтоПараметр(Значение) Тогда
			Если НЕ Значение.ПометкаУдаления Тогда
				Значение = ЭтотОбъект["ПараметрТиповойОперации"+Значение.ПорядокПараметра];
			КонецЕсли;
		КонецЕсли;
		СтруктураИзмерений.Вставить(Измерение.Аналитика, Значение);
	КонецЦикла;
	
	// Добавим организацию в структуру измерений
	Если Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("Организация") <> Неопределено Тогда
		СтруктураИзмерений.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	СтруктураОтбораРесурсов = Новый Структура;
	СтруктураОтбораРесурсов.Вставить("ТипПоляРегистра", Перечисления.ТипыПолейРегистра.Ресурс);
	СтруктураОтбораРесурсов.Вставить("НеИзменятьЗначение", Истина);
	СтрокиРесурсов = ТаблицаАналитикиДвижения.Скопировать(СтруктураОтбораРесурсов);
	
	// Получим Структуру ресурсов
	СтруктураРесурсов = Новый Структура;
	
	Для Каждого Поле Из СтрокиРесурсов Цикл
		СтруктураРесурсов.Вставить(Поле.Аналитика);
	КонецЦикла;
	
	Если СтруктураРесурсов.Количество() > 0 Тогда
		ТаблицаСрезПоследних = РегистрыСведений[ИмяРегистра].СрезПоследних(Объект.Дата, СтруктураИзмерений);
		// Заполним структуру значениями
		Если ТаблицаСрезПоследних.Количество()>0 Тогда
			СтрокаТаблицы = ТаблицаСрезПоследних[0];
			ЗаполнитьЗначенияСвойств(СтруктураРесурсов, СтрокаТаблицы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРесурсов;
	
КонецФункции

&НаСервере
Процедура СформироватьДвиженияПоТиповойОперацииСервер()

	ТиповаяОперация = Объект.ТиповаяОперация;
	// Очистим движения
	ОчиститьДвижения();
	Объект.ТаблицаРегистровНакопления.Очистить();
	Объект.ТаблицаРегистровСведений.Очистить();
	
	Объект.Содержание = ТиповаяОперация.Наименование;
	
	// Заполним список регистров накопления и сведений
	СписокРегистров = ТиповаяОперация.ДвиженияРегистров.Выгрузить(,"ИмяРегистра, ТипРегистра");
	СписокРегистров.Свернуть("ИмяРегистра, ТипРегистра");
	
	ОбновимОтображениеРегистров(СписокРегистров);
	
	// Заполним регистр бухгалтерии
	Проводки = ХозрасчетныйНаборЗаписей;
	
	// Получим колонки аналитики регистра бухгалтерия
	КолонкиХозрасчетный = ТиповаяОперация.Хозрасчетный.ВыгрузитьКолонки();
	КолонкиХозрасчетный.Колонки.Удалить("НомерСтроки");
	
	Для Каждого СтрокаТаблицыХозрасчетный ИЗ ТиповаяОперация.Хозрасчетный Цикл
		Проводка = Проводки.Добавить();
		Проводка.Активность = Истина;
		Для Каждого Колонка из КолонкиХозрасчетный.Колонки Цикл
			ИмяКолонки	 = Колонка.Имя;
			Значение	 = СтрокаТаблицыХозрасчетный[ИмяКолонки];
			// Если это параметр, то берем значение из формы
			Если ЭтоПараметр(Значение) Тогда
				ИмяПараметра = "ПараметрТиповойОперации" + Значение.ПорядокПараметра;
				Если НЕ Значение.ПометкаУдаления Тогда
					Значение	 = ЭтотОбъект[ИмяПараметра];
				КонецЕсли;
			// Проверим значение, выбранное в типовой операции, на соответствие организации
			Иначе
				ТипЭлемента = ТипЗнч(Значение);
				Если ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") ИЛИ ТипЭлемента = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
					Если Значение.Владелец <> Объект.Организация Тогда
						Значение = Неопределено;
					КонецЕсли;
				ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Если Значение.Организация <> Объект.Организация Тогда
						Значение = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Установим значение
			Проводка[ИмяКолонки] = Значение;
		КонецЦикла;
	КонецЦикла;
	ЗаполнитьДобавленныеКолонкиТаблиц();

	// Заполним регистры накопления и сведений
	Для Каждого СтрокаСписокРегистров Из СписокРегистров Цикл
		
		// Если на форме нет этого элемента, то не заполняем движение
		Если Элементы.Найти(СтрокаСписокРегистров.ИмяРегистра) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Нет прав на регистр - не формируется запись
		ОписаниеРегистра = Регистры.НайтиСтроки(Новый Структура("Имя", СтрокаСписокРегистров.ИмяРегистра));
		Если ОписаниеРегистра.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли НЕ ОписаниеРегистра[0].ПравоНаИзменение Тогда
			Продолжить;
		КонецЕсли;
		
		// Подготовим структуру отбора
		СтруктураРегистра = Новый Структура;
		СтруктураРегистра.Вставить("ИмяРегистра", СтрокаСписокРегистров.ИмяРегистра);
		СтруктураРегистра.Вставить("ТипРегистра", СтрокаСписокРегистров.ТипРегистра);
		
		ПериодическийОстаточныйРегистр = ЭтоПериодическийОстаточныйРегистр(СтруктураРегистра.ТипРегистра, СтруктураРегистра.ИмяРегистра);
		
		Движение		 = РеквизитФормыВЗначение(СтруктураРегистра.ИмяРегистра+"НаборЗаписей");
		СтрокиДвижения	 = ТиповаяОперация.ДвиженияРегистров.Выгрузить(СтруктураРегистра);
		
		СтрокиОтбораДвижения = СтрокиДвижения.Скопировать(,"НомерДвижения, ВидДвиженияРегистраНакопления");
		СтрокиОтбораДвижения.Свернуть("НомерДвижения, ВидДвиженияРегистраНакопления");
		Для Каждого СтрокаОтбора Из СтрокиОтбораДвижения Цикл
			НоваяЗапись = Движение.Добавить();
			// Установим актуальность и вид движения у регистра накопления
			Если СтруктураРегистра.ТипРегистра = Перечисления.ТипыРегистров.РегистрНакопления Тогда
				НоваяЗапись.Активность = Истина;
				Если ПериодическийОстаточныйРегистр Тогда
					Если СтрокаОтбора.ВидДвиженияРегистраНакопления Тогда
						ВидДвижения = ВидДвиженияНакопления.Приход;
					Иначе
						ВидДвижения = ВидДвиженияНакопления.Расход;
					КонецЕсли;
					НоваяЗапись.ВидДвижения = ВидДвижения;
				КонецЕсли;
			КонецЕсли;
			
			// Скопируем таблицу с требуемым номером движения
			ТаблицаАналитикиДвижения = СтрокиДвижения.Скопировать(Новый Структура("НомерДвижения", СтрокаОтбора.НомерДвижения));
			
			// Получим структуру предыдущих значений по срезу последних у периодического регистра сведений
			Если СтруктураРегистра.ТипРегистра = Перечисления.ТипыРегистров.РегистрСведений И ПериодическийОстаточныйРегистр Тогда
				ПредыдущиеЗначенияРесурсов = ПредыдущиеЗначенияРесурсов(СтруктураРегистра.ИмяРегистра, ТаблицаАналитикиДвижения);
			КонецЕсли;
			
			Для Каждого АналитикаДвижения Из ТаблицаАналитикиДвижения Цикл
				Значение = АналитикаДвижения.Значение;
				Если АналитикаДвижения.НеИзменятьЗначение Тогда
					Значение = ПредыдущиеЗначенияРесурсов[АналитикаДвижения.Аналитика];
				ИначеЕсли ЭтоПараметр(Значение) Тогда
					ИмяПараметра = "ПараметрТиповойОперации"+Значение.ПорядокПараметра;
					Если НЕ Значение.ПометкаУдаления Тогда
						Значение = ЭтотОбъект[ИмяПараметра];
					КонецЕсли;
				Иначе
					
					ТипЭлемента = ТипЗнч(Значение);
					
					Если ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") ИЛИ ТипЭлемента = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
						Если Значение.Владелец <> Объект.Организация Тогда
							Значение = Неопределено;
						КонецЕсли;
					ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						Если Значение.Организация <> Объект.Организация Тогда
							Значение = Неопределено;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				НоваяЗапись[АналитикаДвижения.Аналитика] = Значение;
			КонецЦикла;
		КонецЦикла;
		ЗначениеВРеквизитФормы(Движение, СтруктураРегистра.ИмяРегистра+"НаборЗаписей");
	КонецЦикла;
	
	ПересчитатьСуммуОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновимОтображениеРегистров(СписокРегистров)
	
	Для Каждого СтрокаРегистра Из Регистры Цикл
		
		ИмяРегистра = СтрокаРегистра.Имя;
		
		РезультатПоиска = СписокРегистров.НайтиСтроки(Новый Структура("ИмяРегистра", ИмяРегистра));
		Если РезультатПоиска.Количество() = 0 Тогда
			Пометка = Ложь;
		Иначе
			Пометка = Истина;
		КонецЕсли;
		
		СтрокаРегистра.Отображение = Пометка;
		
		Если НЕ СтрокаРегистра.Отображение Тогда
			Если СтрокаРегистра.ЕстьРеквизит Тогда
				ЭтотОбъект[ИмяРегистра + "НаборЗаписей"].Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			ОбновляемаяТаблица = Объект.ТаблицаРегистровНакопления;
		Иначе
			ОбновляемаяТаблица = Объект.ТаблицаРегистровСведений;
		КонецЕсли;
		
		СтрокиТаблицы = ОбновляемаяТаблица.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
		
		ЕстьВТаблице = СтрокиТаблицы.Количество() > 0;
		
		Если СтрокаРегистра.Отображение И НЕ ЕстьВТаблице Тогда
			НоваяСтрока     = ОбновляемаяТаблица.Добавить();
			НоваяСтрока.Имя = ИмяРегистра;
		ИначеЕсли НЕ СтрокаРегистра.Отображение И ЕстьВТаблице Тогда
			Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				ОбновляемаяТаблица.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	СоздатьРеквизитыФормы();
	СоздатьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТиповойОперации(Команда)
	
	СформироватьДвиженияПоТиповойОперацииСервер();
	Элементы.ПанельРегистров.ТекущаяСтраница = Элементы.ГруппаХозрасчетный;
	
КонецПроцедуры

#КонецОбласти

#Область БИТ_Финанс

// БитФинанс Процедура переопределяет типовые события формы.
//
&НаСервере
Процедура бит_УстановитьДействияФормы()

	События = Новый Массив;
	События.Добавить("ОбработкаВыбора");
	
	бит_РаботаСДиалогамиСервер.ВыполнитьПерехватСобытий(ЭтаФорма, События, "бит_Обработчики");
	
КонецПроцедуры // Бит_УстановитьДействияФормы()

// бит_Финанс Процедура заполняет движения.
// 
// Параметры:
//  ВыбранноеЗначение - Структура
//  ОчищатьДанные     - Булево
// 
&НаСервере
Процедура бит_ЗаполнитьДвиженияПоВыбраннымДанным(ВыбранноеЗначение, ОчищатьДанные)

	Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
        ХозрасчетныйНаборЗаписей = Объект.Движения.Хозрасчетный;   
    КонецЕсли; 
    
    Если ОчищатьДанные Тогда					
		ХозрасчетныйНаборЗаписей.Очистить();
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	ИмяТипаОбъекта = "ДокументОбъект." + МетаданныеОбъекта.Имя;

	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип(ИмяТипаОбъекта));
	
	КоличествоСубконто = Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПланСчетов.МаксКоличествоСубконто;
	
	Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.ЗаполнитьДвиженияХоз(ВыбранноеЗначение.ХранилищеДанные
																		, ХозрасчетныйНаборЗаписей
																		, КоличествоСубконто);
                                                                        
    Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
        ЗначениеВДанныеФормы(ДокОбъект, Объект);
        ЗаполнитьДобавленныеКолонкиТаблиц();
    КонецЕсли;
                         
КонецПроцедуры // Бит_ЗаполнитьДвиженияПоВыбраннымДанным()

// бит_Финанс Процедура получает код выполнения типового обработчика.
// 
&НаСервере
Функция бит_ПолучитьКодВыполненияТиповогоОбработчика()

	КодВыполнения = "";
	
	СтруктураТиповыхОбработчиков = ЭтаФорма.бит_Обработчики.Форма;

	Если СтруктураТиповыхОбработчиков.Свойство("бит_Типовой_ОбработкаВыбора") Тогда
		КодВыполнения = СтруктураТиповыхОбработчиков.бит_Типовой_ОбработкаВыбора + "(ВыбранноеЗначение, ИсточникВыбора)";
	КонецЕсли;
	
	Возврат КодВыполнения;

КонецФункции // Бит_ПолучитьКодВыполненияТиповогоОбработчика()
      
// бит_Финанс Процедура переопределяет типовой обработчик события формы "ОбработкаВыбора". 
//
&НаКлиенте
Процедура бит_ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	// Вызываем типовой обработчик.  	
	КодВыполнения = бит_ПолучитьКодВыполненияТиповогоОбработчика();
	Если НЕ ПустаяСтрока(КодВыполнения) Тогда
		Выполнить(КодВыполнения);
    КонецЕсли; 
    
    Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
        ХозрасчетныйНаборЗаписей = Объект.Движения.Хозрасчетный;   
    КонецЕсли;
		
	Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ВыбранноеЗначение, "РезультатПолученияДанных") Тогда
		
		Если ВыбранноеЗначение.Режим = "Заполнить" 
			И ХозрасчетныйНаборЗаписей.Количество() > 0 Тогда 
			
			// В режиме заполнения существующие данные следует очистить.
            ДопПараметры = Новый Структура;
            ДопПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			ДопПараметры.Вставить("ИмяПроцедурыВозврата", "бит_ОтветНаПотверждениеОчистки");
			бит_РаботаСДиалогамиКлиент.ЗапросПодтвержденияОчисткиДанных(ЭтаФорма, ДопПараметры);
            
        Иначе
            
            бит_ЗаполнитьДвиженияПоВыбраннымДанным(ВыбранноеЗначение, Ложь);
            
		КонецЕсли; // Режим заполнения	
		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-06 (#3087)
	ИначеЕсли бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ВыбранноеЗначение, "РезультатИзменения") Тогда
		
		ПерезаполнитьТабличнуюЧасть(ВыбранноеЗначение.ХранилищеДанные);
		
		Модифицированность = Истина;		
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-06 (#3087)
	
	КонецЕсли;
	
	 Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
        //ОбновитьИтогиПоДокументу(ЭтотОбъект);
    Иначе
        ПересчитатьСуммуОперации(ЭтаФорма);
    КонецЕсли;

КонецПроцедуры

// Оповещение на вопрос о подтверждение очистки.
//
// Параметры:
//  Результат    - КодВозвратаДиалога.
//  ДопПараметры - Структура.
//
&НаКлиенте
Процедура бит_ОтветНаПотверждениеОчистки(РезультатОтвет, ДопПараметры) Экспорт
	
	ОчищатьДанные = РезультатОтвет = КодВозвратаДиалога.Да;
    
    Если ОчищатьДанные Тогда
        бит_ЗаполнитьДвиженияПоВыбраннымДанным(ДопПараметры.ВыбранноеЗначение, ОчищатьДанные);
    КонецЕсли;
    
КонецПроцедуры

//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-08-29 (#3077)
&НаКлиенте
Процедура ПродолжениеРаботыПользователяПослеВыгрузкиАксапту(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ДополнительныеПараметры.Отказ = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры
//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-08-29 (#3077)

#Область бит_РедактированиеОборотовПоБюджетам

// Добавляет реквизиты связанные с ручным редактированием факта
&НаСервере
Процедура бит_СоздатьРеквизитыФормыНачало()
	
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;

	Если ИменаРеквизитов.Найти("бит_РучнаяКорректировкаФакта") = Неопределено Тогда
		НовыйРеквизит = Новый РеквизитФормы("бит_РучнаяКорректировкаФакта", Новый ОписаниеТипов("Булево"), , , Истина);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		НовыйРеквизит = Новый РеквизитФормы("бит_ОбРучнаяКорректировкаФакта", Новый ОписаниеТипов("Булево"), , , Истина);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		НовыйРеквизит = Новый РеквизитФормы("бит_ИзмененаРучнаяКорректировкаФакта", Новый ОписаниеТипов("Булево"), , , Истина);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		НовыйРеквизит = Новый РеквизитФормы("бит_ЕстьРучнаяКорректировкаФакта", Новый ОписаниеТипов("Булево"), , , Истина);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли; 
	
КонецПроцедуры	

// Расширение процедуры "ПрочитатьДвиженияДокумента"
//
&НаСервере
Процедура бит_ПрочитатьДвиженияДокументаЗавершение(ДокументДвижений)
	//В "корректировке движений" - это "бит_ЗаполнитьРеквизитыОбъектаЗавершение"
	МетаданныеДокумента = ДокументДвижений.Метаданные();
	ВозможнаРучнаяКорректировкаФакта = Ложь;
	Если (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("бит_ФинансистПолныеПрава")) И ПолучитьФункциональнуюОпцию("бит_ИспользоватьРучнуюКорректировкуФакта") Тогда		
		мдДвижения   					 = МетаданныеДокумента.Движения;
		ВозможнаРучнаяКорректировкаФакта = мдДвижения.Содержит(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам);
	КонецЕсли; 
		
	Если ВозможнаРучнаяКорректировкаФакта Тогда
		// Если есть записи в "СоответствиеЗаписейТрансляции", связанные с "ОборотыПоБюджетам" можно показать 
		
		ИменаРеквизитов = Новый Массив;
		Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
			ИменаРеквизитов.Добавить(Реквизит.Имя);
		КонецЦикла;
		ВозможнаРучнаяКорректировкаФакта = НЕ ИменаРеквизитов.Найти("бит_СоответствиеЗаписейТрансляцииНаборЗаписей") = Неопределено;
		
	КонецЕсли; 
	
	Если ВозможнаРучнаяКорректировкаФакта Тогда
		// Гарантированно есть реквизит
		СоответствиеЗаписейТрансляции = РеквизитФормыВЗначение("бит_СоответствиеЗаписейТрансляцииНаборЗаписей").Выгрузить();
		
		Отбор = Новый Структура();
		Отбор.Вставить("Приемник", бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам));
		НайденныеСтроки = СоответствиеЗаписейТрансляции.НайтиСтроки(Отбор); 	
		
		ВозможнаРучнаяКорректировкаФакта = НайденныеСтроки.Количество() > 0;
		
	КонецЕсли; 
	
	ЭтотОбъект["бит_ЕстьРучнаяКорректировкаФакта"] = ВозможнаРучнаяКорректировкаФакта;
	
	// Не важно если возможность редактировать, важно что в РС живет
	Значение = бит_МеханизмДопИзмерений.ЕстьРучнаяКорректировкаФакта(ДокументДвижений);
	ЭтотОбъект["бит_ОбРучнаяКорректировкаФакта"] = ?(Значение = Неопределено, Ложь, Значение);
	ЭтотОбъект["бит_РучнаяКорректировкаФакта"]   = ?(Значение = Неопределено, Ложь, Значение);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-14 (#3270)
	Если ЗначениеЗаполнено(Объект.СторнируемыйДокумент) И
		 ТипЗнч(Объект.СторнируемыйДокумент) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") И 
		 Регистры.НайтиСтроки(Новый Структура("Имя,ЕстьРеквизит","бит_ОборотыПоБюджетам", Истина)).Количество()>0
	Тогда
		ЗаполнитьДвиженияПоОПБ(ДокументДвижений);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-14 (#3270)
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-15 (#3270)
&НаКлиенте
Процедура Подключаемый_бит_ОборотыПоБюджетам_ПриИзмененииСтатьиБДР(Элемент)
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-17 (#3267)	
	ТекСтрока = Элементы.бит_оборотыПоБюджетам.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
	Если ТипЗнч(Объект.СторнируемыйДокумент) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
	 ИЛИ НЕ бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СторнируемыйДокумент, "ок_ПоИсполнительнымЛистам") Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)
		Если ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда
			// определим уровень по движениям КЗБ сторнируемого документа
			УровеньСценария 	= ОК_ОбщегоНазначения.УровеньСценарияПоДвижениямДокумента(Объект.СторнируемыйДокумент);
			ТекСтрока.Сценарий 	= ОК_ОбщегоНазначения.ОпределитьСценарийПоСтатьеОборотов(ТекСтрока.СтатьяОборотов, , УровеньСценария);
		Иначе
			ТекСтрока.Сценарий 	= ОК_ОбщегоНазначения.ОпределитьСценарийПоСтатьеОборотов(ТекСтрока.СтатьяОборотов);
		КонецЕсли;	
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-17 (#3267)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)
	
	Если Не ЗначениеЗаполнено(Объект.СторнируемыйДокумент) ИЛИ
		 ТипЗнч(Объект.СторнируемыйДокумент) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
	Тогда 
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-17 (#3267)
	//ТекущиеДанные = Элементы["бит_ОборотыПоБюджетам"].ТекущиеДанные;
	//ТекущиеДанные.СтатьяБДДС = ПолучитьСоответствующуюСтатьюБДДС(ТекущиеДанные.СтатьяОборотов);
	
	ТекСтрока.СтатьяБДДС = ПолучитьСоответствующуюСтатьюБДДС(ТекСтрока.СтатьяОборотов);
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2019-05-17 (#3267)
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствующуюСтатьюБДДС(СтатьяОборотов)
	
	Возврат РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(ПредопределенноеЗначение("Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС"),СтатьяОборотов);
	
КонецФункции

// Расширение процдуры "СоздатьЭлементыФормы"
//
&НаСервере
Процедура бит_СоздатьЭлементыФормыЗавершение()

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-06 (#3087)
	мНайденныеСтрокиРегистра = Регистры.НайтиСтроки(Новый Структура("Имя","бит_ОборотыПоБюджетам"));
	элОпБ = Элементы.Найти("бит_ОборотыПоБюджетам");
	Если мНайденныеСтрокиРегистра.Количество()>0 И
		 мНайденныеСтрокиРегистра[0].Отображение И		 
		 элОпБ <> Неопределено	 
	Тогда 
	
	    ДобавитьКомандуФормы("бит_ОборотыПоБюджетам_КомандаИзменитьТабЧасть", НСтр("ru = 'Изменить'"), "ИзменитьТабЧасть");
		ВывестиКомандуНаФорму("ИзменитьТабЧасть", "бит_ОборотыПоБюджетам_КомандаИзменитьТабЧасть", НСтр("ru = 'Изменить'"), элОпБ.КоманднаяПанель);
		
		ДобавитьКомандуФормы("бит_ОборотыПоБюджетам_КомандаЗаполнитьКолонкуОпБ", НСтр("ru = 'Заполнить колонку'"), "КонтекстноеМенюОпБЗаполнитьКолонку");
		ВывестиКомандуНаФорму("КонтекстноеМенюОпБЗаполнитьКолонку", "бит_ОборотыПоБюджетам_КомандаЗаполнитьКолонкуОпБ", НСтр("ru = 'Заполнить колонку'"), элОпБ.КонтекстноеМеню, БиблиотекаКартинок.бит_СкопироватьВверхВниз);						
				
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-19 (#3051)
	// Отображение дополнительных измерений в табличных полях.
	Если элОпБ <> Неопределено Тогда 
		бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																							, "бит_ОборотыПоБюджетам"
																							, фКэшЗначений.ИзмеренияДоп
																							, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-19 (#3051)
	
	ДобавитьКомандуФормы("бит_ОборотыПоБюджетам_КомандаДобавитьЗаписиСИнвертированнымЗнаком", НСтр("ru = 'Заполнить движениями с инвертированием знака'"), "ДобавитьЗаписиСИнвертированнымЗнаком");
	ВывестиКомандуНаФорму("ДобавитьЗаписиСИнвертированнымЗнаком", "бит_ОборотыПоБюджетам_КомандаДобавитьЗаписиСИнвертированнымЗнаком", НСтр("ru = 'Заполнить движениями с инвертированием знака'"),Элементы.ФормаКоманднаяПанель);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-06 (#3087)
	
	// Программное создание функций редактирования
	Если ЭтотОбъект["бит_ЕстьРучнаяКорректировкаФакта"] Тогда
		ТаблицаОборотыПоБюджетам = ЭтотОбъект.Элементы.Найти("бит_ОборотыПоБюджетам");
		Если ТаблицаОборотыПоБюджетам = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		ГруппаШапкаПравая = ЭтотОбъект.Элементы.Найти("ГруппаШапкаПравая");
		Если ГруппаШапкаПравая = Неопределено Тогда
			ВызватьИсключение "Не определена группы формы. Приведите форму к стандартному виду.";
		КонецЕсли; 

		Если ЭтотОбъект.Элементы.Найти("бит_РучнаяКорректировкаФакта") = Неопределено  Тогда
			ФлагРедактироватьФакт                    = ЭтотОбъект.Элементы.Добавить("бит_РучнаяКорректировкаФакта", Тип("ПолеФормы"),ГруппаШапкаПравая);
			ФлагРедактироватьФакт.Вид                = ВидПоляФормы.ПолеФлажка;
			ФлагРедактироватьФакт.УстановитьДействие("ПриИзменении", "бит_Подключаемый_РучнаяКорректировкаФактаПриИзменении");
			ФлагРедактироватьФакт.Заголовок 		  = НСтр("ru = 'Редактировать фактические данные'");
			ФлагРедактироватьФакт.ПутьКДанным 		  = "бит_РучнаяКорректировкаФакта";
			ФлагРедактироватьФакт.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		КонецЕсли; 
		Если ЭтотОбъект.Элементы.Найти("бит_РедактироватьОборотыПоБюджетам") = Неопределено Тогда
			КомандаРедактировать = ЭтотОбъект.Команды.Добавить("бит_РедактироватьОборотыПоБюджетам");
			КомандаРедактировать.Заголовок 			   	   =  НСтр("ru = 'Редактировать'");
			КомандаРедактировать.Действие 				   = "бит_Подключаемый_РедактироватьОборотыПоБюджетам";
			КомандаРедактировать.ИзменяетСохраняемыеДанные = Истина;
			
			КнопкаРедактировать = ЭтотОбъект.Элементы.Добавить("бит_РедактироватьОборотыПоБюджетам", Тип("КнопкаФормы"), ТаблицаОборотыПоБюджетам.КоманднаяПанель);
			КнопкаРедактировать.ИмяКоманды = "бит_РедактироватьОборотыПоБюджетам"; 
			КнопкаРедактировать.Заголовок  = НСтр("ru = 'Редактировать'");
		КонецЕсли; 
	КонецЕсли; 
	
	//СофтЛаб Начало 2018-09-30 3092
	ИмяГруппы = "Группа_ок_СтруктураПодчиненностиБК";
	ЗаголовокГруппы = "Структура подчиненности БК";
	ТекГруппа = Элементы.Найти(ИмяГруппы);
	Если ТекГруппа = Неопределено 
		И РольДоступна("ПолныеПрава") Тогда

		ТекГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров);
		ТекГруппа.Заголовок = ЗаголовокГруппы;

		// На странице регистра создаем таблицу
		ИмяТаблицы = "ок_СтруктураПодчиненностиБК";
		ТекТаблица = Элементы.Найти(ИмяТаблицы);
		Если ТекТаблица <> Неопределено Тогда
			Элементы.Удалить(ТекТаблица);
		КонецЕсли;
		ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
		ПутьКДаннымТаблицы = "Объект.ок_СтруктураПодчиненностиБК";
		ТекТаблица.ПутьКДанным = ПутьКДаннымТаблицы;
		ТекГруппа.ПутьКДаннымЗаголовка = ПутьКДаннымТаблицы + ".КоличествоСтрок";
		
		// Создаем колонки таблицы
		ИмяКолонки = ИмяТаблицы + "НомерСтроки";
		ТекКолонка = Элементы.Найти(ИмяКолонки);
		Если ТекКолонка = Неопределено Тогда
			ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
		КонецЕсли;
		ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + ".НомерСтроки";
		ТекКолонка.Заголовок   = "N";
		
		ДобавляемыеРеквизиты = Метаданные.Документы.ОперацияБух.ТабличныеЧасти.ок_СтруктураПодчиненностиБК.Реквизиты;
		Для каждого КолонкаРеквизита Из ДобавляемыеРеквизиты Цикл
			
			ИмяКолонки = ИмяТаблицы + КолонкаРеквизита.Имя;
			ТекКолонка = Элементы.Найти(ИмяКолонки);
			Если ТекКолонка = Неопределено Тогда
				ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
			КонецЕсли;
			ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
			ТекКолонка.Заголовок   = КолонкаРеквизита.Синоним;
			ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
			
		КонецЦикла;
		
	КонецЕсли;
	//СофтЛаб Конец 2018-09-30 3092

КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-15 (#3270)

&НаКлиенте 	
Процедура бит_Подключаемый_РедактироватьОборотыПоБюджетам(Команда)
	
	ТекущиеДанные = Элементы.бит_ОборотыПоБюджетам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	     ТекущаяСтрока = Неопределено;
	Иначе
		 ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли; 
	 
	АдресХранилища = "";
	бит_ПодготовитьПараметрыРедактированияФакта(АдресХранилища, ТекущаяСтрока);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресХранилища", АдресХранилища);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("бит_РедактироватьОборотыПоБюджетамНаСервереОкончание", ЭтотОбъект);
	РежимОткрытия      = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.бит_КорректировкаФакта.Форма", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,ОписаниеОповещения, РежимОткрытия);
		
КонецПроцедуры

&НаСервере
Процедура бит_ПодготовитьПараметрыРедактированияФакта(АдресХранилища, ТекущаяСтрока)  

	Таблицы = Новый Структура();
	Таблицы.Вставить("ТекущаяСтрока",                ТекущаяСтрока);
	Таблицы.Вставить("Регистратор",                  Объект.Ссылка); 
	Таблицы.Вставить("ОборотыПоБюджетам",            РеквизитФормыВЗначение("бит_ОборотыПоБюджетамНаборЗаписей").Выгрузить());
	Таблицы.Вставить("СоответствиеЗаписейТрансляции",РеквизитФормыВЗначение("бит_СоответствиеЗаписейТрансляцииНаборЗаписей").Выгрузить());

	АдресХранилища = ПоместитьВоВременноеХранилище(Таблицы, УникальныйИдентификатор);

КонецПроцедуры // Бит_ТестСервер()

// Обработчик завершения открытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
//
&НаСервере
Процедура бит_РедактироватьОборотыПоБюджетамНаСервереОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успех") И Результат.Успех Тогда
		
		Таблицы = ПолучитьИзВременногоХранилища(Результат.АдресХранилища);

		ЗначениеВРеквизитФормы(Таблицы.СоответствиеЗаписейТрансляции, "бит_СоответствиеЗаписейТрансляцииНаборЗаписей");
		ЗначениеВРеквизитФормы(Таблицы.ОборотыПоБюджетам, 			  "бит_ОборотыПоБюджетамНаборЗаписей");

	КонецЕсли;

КонецПроцедуры // 

// Управляет видимостью кнопок "Записать и закрыть", "Редактировать ФАКТ", страницей регистра "Обороты по бюджету"
// 
&НаСервере
Процедура бит_УстановитьВозможностьРедактированияЗаписейФакта()
	
	КнопкаРедактировать = Элементы.Найти("бит_РедактироватьОборотыПоБюджетам");
	Если НЕ КнопкаРедактировать = Неопределено Тогда
		КнопкаРедактировать.Видимость = ПолучитьФункциональнуюОпцию("бит_ИспользоватьРучнуюКорректировкуФакта") И ЭтотОбъект["бит_РучнаяКорректировкаФакта"];
	КонецЕсли; 
	
	СтраницыФакта = Новый Массив(); 
	СтраницыФакта.Добавить("Группабит_ОборотыПоБюджетам");
	СтраницыФакта.Добавить("Группабит_СоответствиеЗаписейТрансляции");
	
	Для каждого ИмяСтраницыРегистра Из СтраницыФакта Цикл
		СтраницаРегистра = Элементы.ПанельРегистров.ПодчиненныеЭлементы.Найти(ИмяСтраницыРегистра);
		Если НЕ СтраницаРегистра = Неопределено Тогда
			ВозможностьРедактированияЗаписей = ЭтотОбъект["бит_РучнаяКорректировкаФакта"];
			// Меняем из спецализированой формы, 
			// если пользователь может осознанно редактировать факт
			СтраницаРегистра.ТолькоПросмотр = ВозможностьРедактированияЗаписей;
			ИмяРегистра     = СтрЗаменить(СтраницаРегистра.Имя, "Группа", "");
			ТаблицаРегистра = Элементы[ИмяРегистра];
			ТаблицаРегистра.ИзменятьСоставСтрок  = НЕ ВозможностьРедактированияЗаписей;
			ТаблицаРегистра.ИзменятьПорядокСтрок = НЕ ВозможностьРедактированияЗаписей;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура бит_Подключаемый_РучнаяКорректировкаФактаПриИзменении(Элемент)
	
	бит_ВыполнитьДействияПриИзмененииРучнойКорректировкиФакта();
	
КонецПроцедуры // Бит_Подключаемый_РучнаяКорректировкаФактаПриИзменении()

&НаСервере
Процедура бит_ВыполнитьДействияПриИзмененииРучнойКорректировкиФакта()

	Если НЕ Объект.Ссылка.Пустая() Тогда
		Если ЭтотОбъект["бит_РучнаяКорректировкаФакта"] = ЭтотОбъект["бит_ОбРучнаяКорректировкаФакта"] Тогда
			ПодготовитьФормуНаСервере(Объект.Ссылка);
			ЭтотОбъект.Модифицированность = Ложь;
		Иначе
			бит_УстановитьВозможностьРедактированияЗаписейФакта();
		КонецЕсли;
	КонецЕсли; 
	// NB Активность движений!!!
	
КонецПроцедуры // Бит_ВыполнитьДействияПриИзмененииРучнойКорректировкиФакта()

#КонецОбласти 

// БИТ Тртилек 08.12.11 Процедура заполняет значение субконто у соответствующего РБП, указанного в проводке
&НаСервере
Процедура бит_ЗаполнениеСубконтоРБП()
	Набор = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Объект.Ссылка);
	Набор.Прочитать();
	Для Каждого Элемент Из Набор Цикл
		Если Элемент.СубконтоДт.РасходыБудущихПериодов <> Неопределено
			И Элемент.СубконтоКт.Контрагенты <> Неопределено Тогда
			РБП = Элемент.СубконтоДт.РасходыБудущихПериодов.ПолучитьОбъект();
			Если ТипЗнч(РБП.бит_Субконто1) = Тип ("СправочникСсылка.Контрагенты") И ТипЗнч(РБП.бит_Субконто2) = Тип ("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если РБП.бит_Субконто1 <> Элемент.СубконтоКт.Контрагенты ИЛИ РБП.бит_Субконто2 <> Элемент.СубконтоКт.Договоры Тогда
					РБП.бит_Субконто1 = Элемент.СубконтоКт.Контрагенты;
					РБП.бит_Субконто2 = Элемент.СубконтоКт.Договоры;
					РБП.Записать();			
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-28 (#3051)
&НаКлиенте
Процедура ок_ЗаполнитьБК(Команда)
	
	Если Не ЗначениеЗаполнено(ок_ФВБ) Тогда 
		ПоказатьПредупреждение(,НСтр("ru = 'Не заполнено значение номера заявки'"),30);
		Возврат;
	КонецЕсли;
	
	Если Объект.ТаблицаРегистровНакопления.НайтиСтроки(Новый Структура("Имя","бит_ОборотыПоБюджетам")).Количество()>0 И
		 ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Количество()>0 
	Тогда 
	
		пОповещениеОтветНаВопросОбОчисткеПриЗаполненииПоБК = Новый ОписаниеОповещения("ОтветНаВопросОбОчисткеПриЗаполненииПоБК",ЭтотОбъект);
	    ПоказатьВопрос(пОповещениеОтветНаВопросОбОчисткеПриЗаполненииПоБК,НСтр("ru = 'Табличная часть ""Обороты по бюджетам (БИТ)"" будет очищена. Продолжить?'"),РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
	    Возврат;
	КонецЕсли;	 
	 	
	ЗаполнитьБКНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОбОчисткеПриЗаполненииПоБК(Результат, ДопПараметры) Экспорт
	
	Если Результат<>КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-05 (#3445)
	//Если Объект.ТаблицаРегистровНакопления.НайтиСтроки(Новый Структура("Имя","бит_ОборотыПоБюджетам")).Количество()>0 И
	//Заменено на:
	Если Регистры.НайтиСтроки(Новый Структура("Имя,ЕстьРеквизит","бит_ОборотыПоБюджетам",Истина)).Количество()>0 И
		 Объект.ТаблицаРегистровНакопления.НайтиСтроки(Новый Структура("Имя","бит_ОборотыПоБюджетам")).Количество()>0 И
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-05 (#3445)
		 ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Количество()>0 
	Тогда 
		ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Очистить();
	КонецЕсли;
	
	ЗаполнитьБКНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБКНаКлиенте()
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяТЧ"						,	"бит_ОборотыПоБюджетамНаборЗаписей");
	ДопПараметры.Вставить("Документ"					,	Объект.Ссылка);
	ДопПараметры.Вставить("Форма"						, 	ЭтотОбъект);
	ДопПараметры.Вставить("ОтборПоКонтрагентуДоговору"	, 	Истина);
	ДопПараметры.Вставить("ОтборОрганизация"			, 	Объект.Организация);
	
	
	бит_БК_ОбщийКлиент.ПослеВводаЗначенияФВБДляЗаполненияПоУпрАналитикам(ок_ФВБ, ДопПараметры);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБКНаСервере()
	
	ХозрасчетныйНаборЗаписей.Очистить();
	Если Объект.ТаблицаРегистровНакопления.НайтиСтроки(Новый Структура("бит_ОборотыПоБюджетам")).Количество()>0	Тогда 
		ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Очистить();
	КонецЕсли;
		  
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧПоУправленческимАналитикам(Результат, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
		
	ЗаполнитьТЧПоУправленческимАналитикамНаСервере(Результат, ДопПараметры.ИмяТЧ, ДопПараметры.Заявка);
	
КонецПроцедуры

Процедура ЗаполнитьТЧПоУправленческимАналитикамНаСервере(АдресДанныхЗаполнения, ИмяТЧ, Заявка)
	
	пДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресДанныхЗаполнения);

	Если пДанныеЗаполнения.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ТаблицаРегистровНакопления.НайтиСтроки(Новый Структура("Имя","бит_ОборотыПоБюджетам")).Количество()=0 Тогда 
		
		пСписокИзменений = Новый СписокЗначений;
		пСписокИзменений.Добавить("бит_ОборотыПоБюджетам",,Истина);
		
		ПрименитьНастройкуСоставаРегистров(пСписокИзменений);		
		
	КонецЕсли;
	
	пВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	пВалютаУпрУчета = Константы.бит_ВалютаУправленческогоУчета.Получить();
	пВалютаФВБ		= ок_ФВБ.ВалютаДокумента; 
		
	пДата = ?(ЗначениеЗаполнено(Объект.Ссылка),Объект.Дата,ТекущаяДата());
		
	//Если Найти(Объект.СпособЗаполнения, "Сторно") > 0 Тогда 
	//	//Сторно записи                                   
	//	Для Каждого пСтрокаДанных Из пДанныеЗаполнения Цикл 
	//		пСтрокаОпБ = ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Добавить();
	//		пСтрокаОпБ.Сценарий			= ?(пСтрокаДанных.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность"),
	//													ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест"),
	//													ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У"));
	//		пВалютаСценарий = пСтрокаОпБ.Сценарий.Валюта;
	//		
	//		пСтрокаОпБ.Период		    = пСтрокаДанных.ок_Период;
	//		пСтрокаОпБ.ЦФО 				= пСтрокаДанных.ок_ЦФО;
	//		пСтрокаОпБ.СтатьяОборотов 	= пСтрокаДанных.ок_СтатьяОборотов;
	//		Если пСтрокаДанных.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда 
	//			пСтрокаОпБ.Контрагент 		  = пСтрокаДанных.ок_Контрагент;
	//			пСтрокаОпБ.ДоговорКонтрагента = пСтрокаДанных.ок_ДоговорКонтрагента;
	//			пСтрокаОпБ.Проект			  = пСтрокаДанных.ок_Проект;
	//		КонецЕсли;
	//		пСтрокаОпБ.Аналитика_1 = ок_ФВБ;
	//		пСтрокаОпБ.Аналитика_2 = пСтрокаДанных.ок_Аналитика_2;
	//		пСтрокаОпБ.Сумма	   = -пСтрокаДанных.СуммаБезНДС;
	//		пСтрокаОпБ.СуммаСНДС   = -пСтрокаДанных.Сумма;
	//		
	//		Если пВалютаФВБ<>пВалютаРегУчета Тогда 
	//			пСтрокаОпБ.СуммаРегл	   = -бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.СуммаБезНДС,пДата,пВалютаФВБ,пВалютаРегУчета);
	//			пСтрокаОпБ.СуммаСНДСРегл   = -бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.Сумма,пДата,пВалютаФВБ,пВалютаРегУчета);
	//		Иначе
	//			пСтрокаОпБ.СуммаРегл	   = -пСтрокаДанных.СуммаБезНДС;
	//			пСтрокаОпБ.СуммаСНДСРегл   = -пСтрокаДанных.Сумма;
	//		КонецЕсли;
	//		
	//		Если пВалютаФВБ<>пВалютаУпрУчета Тогда 
	//			пСтрокаОпБ.СуммаУпр	    = -бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.СуммаБезНДС,пДата,пВалютаФВБ,пВалютаУпрУчета);
	//			пСтрокаОпБ.СуммаСНДСУпр = -бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.Сумма,пДата,пВалютаФВБ,пВалютаУпрУчета);
	//		Иначе
	//			пСтрокаОпБ.СуммаУпр	    = -пСтрокаДанных.СуммаБезНДС;
	//			пСтрокаОпБ.СуммаСНДСУпр = -пСтрокаДанных.Сумма;
	//		КонецЕсли;
	//		
	//		Если пВалютаФВБ<>пВалютаСценарий Тогда 
	//			пСтрокаОпБ.СуммаСценарий	   = -бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.СуммаБезНДС,пДата,пВалютаФВБ,пВалютаСценарий);
	//			пСтрокаОпБ.СуммаСНДССценарий   = -бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.Сумма,пДата,пВалютаФВБ,пВалютаСценарий);
	//		Иначе
	//			пСтрокаОпБ.СуммаСценарий	   = -пСтрокаДанных.СуммаБезНДС;
	//			пСтрокаОпБ.СуммаСНДССценарий   = -пСтрокаДанных.Сумма;
	//		КонецЕсли;
	//		
	//		пСтрокаОпБ.Активность = Истина;
	//		
	//		пСтрокаОпБ.бит_БК_Организация = пСтрокаДанных.ок_Организация;
	//		
	//	КонецЦикла;
	//КонецЕсли;
	
	Для Каждого пСтрокаДанных Из пДанныеЗаполнения Цикл 
		пСтрокаОпБ = ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Добавить();
		пСтрокаОпБ.Сценарий			= ?(пСтрокаДанных.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность"),
		ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест"),
		ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У"));
		пВалютаСценарий = пСтрокаОпБ.Сценарий.Валюта;
		
		пСтрокаОпБ.Период		    = пСтрокаДанных.ок_Период;		
		пСтрокаОпБ.ЦФО 				= пСтрокаДанных.ок_ЦФО;
		пСтрокаОпБ.СтатьяОборотов 	= пСтрокаДанных.ок_СтатьяОборотов;
		Если пСтрокаДанных.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда 
			пСтрокаОпБ.Контрагент 		  = пСтрокаДанных.ок_Контрагент;
			пСтрокаОпБ.ДоговорКонтрагента = пСтрокаДанных.ок_ДоговорКонтрагента;
			пСтрокаОпБ.Проект			  = пСтрокаДанных.ок_Проект;
		КонецЕсли;
		пСтрокаОпБ.Аналитика_1 = ок_ФВБ;
		пСтрокаОпБ.Аналитика_2 = пСтрокаДанных.ок_Аналитика_2;
		пСтрокаОпБ.Сумма	   = пСтрокаДанных.СуммаБезНДС;
		пСтрокаОпБ.СуммаСНДС   = пСтрокаДанных.Сумма;
		
		Если пВалютаФВБ<>пВалютаРегУчета Тогда 
			пСтрокаОпБ.СуммаРегл	   = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.СуммаБезНДС,пДата,пВалютаФВБ,пВалютаРегУчета);
			пСтрокаОпБ.СуммаСНДСРегл   = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.Сумма,пДата,пВалютаФВБ,пВалютаРегУчета);
		Иначе
			пСтрокаОпБ.СуммаРегл	   = пСтрокаДанных.СуммаБезНДС;
			пСтрокаОпБ.СуммаСНДСРегл   = пСтрокаДанных.Сумма;
		КонецЕсли;
		
		Если пВалютаФВБ<>пВалютаУпрУчета Тогда 
			пСтрокаОпБ.СуммаУпр	    = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.СуммаБезНДС,пДата,пВалютаФВБ,пВалютаУпрУчета);
			пСтрокаОпБ.СуммаСНДСУпр = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.Сумма,пДата,пВалютаФВБ,пВалютаУпрУчета);
		Иначе
			пСтрокаОпБ.СуммаУпр	    = пСтрокаДанных.СуммаБезНДС;
			пСтрокаОпБ.СуммаСНДСУпр = пСтрокаДанных.Сумма;
		КонецЕсли;
		
		Если пВалютаФВБ<>пВалютаСценарий Тогда 
			пСтрокаОпБ.СуммаСценарий	   = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.СуммаБезНДС,пДата,пВалютаФВБ,пВалютаСценарий);
			пСтрокаОпБ.СуммаСНДССценарий   = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пСтрокаДанных.Сумма,пДата,пВалютаФВБ,пВалютаСценарий);
		Иначе
			пСтрокаОпБ.СуммаСценарий	   = пСтрокаДанных.СуммаБезНДС;
			пСтрокаОпБ.СуммаСНДССценарий   = пСтрокаДанных.Сумма;
		КонецЕсли;
		
		пСтрокаОпБ.Активность = Истина;
		
		пСтрокаОпБ.бит_БК_Организация = пСтрокаДанных.ок_Организация;
		Если Не ЗначениеЗаполнено(пСтрокаОпБ.бит_БК_Организация) Тогда 
			пСтрокаОпБ.бит_БК_Организация = Объект.Организация;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерЗаявкиНаСервере(СсылкаНаДокумент)
	Возврат бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(СсылкаНаДокумент,
									   	   ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ"), ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
КонецФункции

&НаСервере
Функция ПолучитьСписокВыбораНомераЗаявкиНаСервере()
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Очистить();
	
	Если НЕ фКэшЗначений.Свойство("АналитикаНомерЗаявки") Тогда 
		Возврат СписокВыбора;
	КонецЕсли;
	
	пЗапрос = Новый Запрос;
	пЗапрос.УстановитьПараметр("СписокПТУ"	,	Объект.Товары.Выгрузить(,"ДокументПартии").ВыгрузитьКолонку("ДокументПартии"));
	пЗапрос.УстановитьПараметр("Аналитика"	,	фКэшЗначений.АналитикаНомерЗаявки);
	
	пТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ФормаВводаБюджета.Ссылка КАК ФВБ
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	|		ПО ((ВЫРАЗИТЬ(бит_ДополнительныеАналитики.ЗначениеАналитики КАК Документ.бит_ФормаВводаБюджета)) = бит_ФормаВводаБюджета.Ссылка)
	|			И (бит_ДополнительныеАналитики.Объект В(&СписокПТУ))
	|			И (бит_ДополнительныеАналитики.Аналитика = &Аналитика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	бит_ФормаВводаБюджета.Номер,
	|	бит_ФормаВводаБюджета.Дата";
	пЗапрос.Текст = пТекст;
	
	пРезультат = пЗапрос.Выполнить();
	
	Если пРезультат.Пустой() Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Выборка = пРезультат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		СписокВыбора.Добавить(Выборка.ФВБ);
	КонецЦикла;     
	
	Возврат СписокВыбора;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	// Данные по дополнительным аналитикам
	фКэшЗначений.Вставить("НастройкиИзмерений"	  	, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      	  	, бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	
	// Произвольные измерения
	фКэшЗначений.Вставить("Измерения"         	  	, бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));
	
	фКэшЗначений.Вставить("ОписаниеТиповДопАналитик", Метаданные.РегистрыСведений.бит_ДополнительныеАналитики.Измерения.Объект.Тип);
	
	фКэшЗначений.Вставить("АналитикаНомерЗаявки"	, ПолучитьАналитикуНомерЗаявки());	
	
	фКэшЗначений.Вставить("ВалютаУпрУчета"			, Константы.бит_ВалютаУправленческогоУчета.Получить());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаКлиенте
Процедура ок_ФВБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивВидовОпераций = Новый Массив;
	МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный"));
	МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный"));
	МассивВидовОпераций.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный"));
    	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации", МассивВидовОпераций));
	
	НовыеПараметрыВыбора =  Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.ок_ФВБ.ПараметрыВыбора = НовыеПараметрыВыбора;
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-28 (#3051)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-27 (#3076)
&НаСервере
Функция НеСтроковыеДанныеДокументаИзменены()
	
	пЗапрос = Новый Запрос("ВЫБРАТЬ
	|	ОперацияБух.Дата КАК Дата,
	|	ОперацияБух.Организация КАК Организация,
	|	ОперацияБух.СторнируемыйДокумент КАК СторнируемыйДокумент	
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.Ссылка = &Ссылка");	
	пЗапрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	пШапкаДо = пЗапрос.Выполнить().Выгрузить();
	Если пШапкаДо.Количество()>0 Тогда 
		Для Каждого пИмяКолонки Из пШапкаДо.Колонки Цикл 
			
			Если Объект[пИмяКолонки.Имя]<>пШапкаДо[0][пИмяКолонки.Имя] Тогда 
				Возврат Истина;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
	
	ПроверяемаяТаблица = ХозрасчетныйНаборЗаписей.Выгрузить();
		
	пНаборХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	пНаборХозрасчетный.Отбор.Регистратор.Установить(Объект.Ссылка);
	пНаборХозрасчетный.Прочитать();
	
	пТЗСравнения = пНаборХозрасчетный.Выгрузить();
	
	Если пТЗСравнения.Количество()<>ПроверяемаяТаблица.Количество() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ТипСтрока = Тип("Строка");	
	
	пИндекс = ПроверяемаяТаблица.Количество()-1;
	
	Пока пИндекс>=0 Цикл 
		Для Каждого пКолонка Из ПроверяемаяТаблица.Колонки Цикл 
						
			Если пКолонка.ТипЗначения.СодержитТип(ТипСтрока) ИЛИ
				 пТЗСравнения.Колонки.Найти(пКолонка.Имя) = Неопределено
			Тогда 				
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПроверяемаяТаблица[пИндекс][пКолонка.Имя]) И
				 НЕ ЗначениеЗаполнено(пТЗСравнения[пИндекс][пКолонка.Имя]) 
				 ИЛИ
				 НЕ ЗначениеЗаполнено(ПроверяемаяТаблица[пИндекс][пКолонка.Имя]) И
				 ЗначениеЗаполнено(пТЗСравнения[пИндекс][пКолонка.Имя])
			Тогда 
				Возврат Истина;
			ИначеЕсли НЕ ЗначениеЗаполнено(ПроверяемаяТаблица[пИндекс][пКолонка.Имя]) И
					  НЕ ЗначениеЗаполнено(пТЗСравнения[пИндекс][пКолонка.Имя])
			Тогда 				
				Продолжить;
			ИначеЕсли ПроверяемаяТаблица[пИндекс][пКолонка.Имя]<>пТЗСравнения[пИндекс][пКолонка.Имя] Тогда 
				Возврат Истина;
			КонецЕсли;	
			
		КонецЦикла;
		пИндекс = пИндекс-1;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-27 (#3076)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-06 (#3078)
&НаКлиенте
Процедура ИзменитьТабЧасть(Команда)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-10 (#3816)
	//ПараметрыФормы = Новый Структура;
	////ПараметрыФормы.Вставить("Команда" 	 , "бит_ОборотыПоБюджетам");
	////ПараметрыФормы.Вставить("Объект"  	 , Объект.Ссылка);
	////ПараметрыФормы.Вставить("АналитикиТЧ", ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"]);
	//
	//ПараметрыФормы.Вставить("Команда"	 		, "бит_ОборотыПоБюджетам");
	//ПараметрыФормы.Вставить("Объект"	 		, Объект.Ссылка);
	//ПараметрыФормы.Вставить("ИмяТабличнойЧасти"	, "бит_ОборотыПоБюджетамНаборЗаписей");
	//ПараметрыФормы.Вставить("ТабличнаяЧасть"	, ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"]);
	ПараметрыФормы = ПараметрыИзмененияТаблицыДокумента();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-10 (#3816)
		
	ОткрытьФорму("Обработка.бит_ИзменениеТабЧастиДанныеБюджета.Форма", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-10 (#3816)
&НаСервере
Функция ПараметрыИзмененияТаблицыДокумента()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Команда",			"бит_ОборотыПоБюджетам");
	ПараметрыФормы.Вставить("Объект",			Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти","бит_ОборотыПоБюджетамНаборЗаписей");
	ПараметрыФормы.Вставить("ТабличнаяЧасть",	 
		ПоместитьВоВременноеХранилище(ЭтотОбъект.бит_ОборотыПоБюджетамНаборЗаписей.Выгрузить(), УникальныйИдентификатор));
		
	Возврат ПараметрыФормы;	
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-10 (#3816)

// Процедура набор записей по ОпБ.
// 
&НаСервере
Процедура ПерезаполнитьТабличнуюЧасть(ХранилищеДанные)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-10 (#3816)
	//ДанныеЗаполнения = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ХранилищеДанные);
	Если НЕ ЭтоАдресВременногоХранилища(ХранилищеДанные) Тогда
		Возврат;
	КонецЕсли; 
	
	Модифицированность = Истина;
	ДанныеЗаполнения   = ПолучитьИзВременногоХранилища(ХранилищеДанные);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-10 (#3816)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-25 (#3270)
	СоотБДРиБДДС = Новый Соответствие;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ТаблицаЗначений") И
		Элементы.Найти("бит_ОборотыПоБюджетамСтатьяБДДС")<>Неопределено 
		Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_СтатьиОборотов.Ссылка КАК СтатьяБДР,
		|	ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.бит_СтатьиОборотов) КАК СтатьяБДДС
		|ИЗ
		|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
		|		ПО бит_СтатьиОборотов.Ссылка = бит_СоответствияАналитик.ЛеваяАналитика_1
		|			И (бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
		|ГДЕ
		|	бит_СтатьиОборотов.Ссылка В(&СписокСтатейБДР)";
		
		Запрос.УстановитьПараметр("СписокСтатейБДР", ДанныеЗаполнения.Скопировать(Новый Структура("Реквизит", "СтатьяОборотов")).ВыгрузитьКолонку("Значение"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СоотБДРиБДДС.Вставить(ВыборкаДетальныеЗаписи.СтатьяБДР, ВыборкаДетальныеЗаписи.СтатьяБДДС);
		КонецЦикла;
		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-25 (#3270)
	
	Для каждого Строка Из ДанныеЗаполнения Цикл
		ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"][Строка.ИД][Строка.Реквизит] = Строка.Значение;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-25 (#3270)
		Если Строка.Реквизит = "СтатьяОборотов"	Тогда 
			ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"][Строка.ИД]["СтатьяБДДС"] = СоотБДРиБДДС.Получить(Строка.Значение);
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-25 (#3270)
	КонецЦикла; 

КонецПроцедуры // ПерезаполнитьТабличнуюЧасть()

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-06 (#3078)


//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-10 (#3087)
&НаКлиенте
Процедура КонтекстноеМенюОпБЗаполнитьКолонку(Команда)
	
	мНайденныеСтрокиРегистра = Регистры.НайтиСтроки(Новый Структура("Имя","бит_ОборотыПоБюджетам"));
	Если НЕ (ЗначениеЗаполнено(ок_ФВБ) И
			 мНайденныеСтрокиРегистра.Количество()>0 И
			 мНайденныеСтрокиРегистра[0].Отображение И
			 ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Количество()>0)
	Тогда 
		Возврат;
	КонецЕсли;	
	
	КолонкаИмя = Элементы.бит_ОборотыПоБюджетам.ТекущийЭлемент.Имя;
	ПутьКДанным = СтрЗаменить(КолонкаИмя, "бит_ОборотыПоБюджетам", "");
	
	пСтруктураЗаполнения = Новый Структура(ПутьКДанным);		
	ЗаполнитьЗначенияСвойств(пСтруктураЗаполнения, Элементы.бит_ОборотыПоБюджетам.ТекущиеДанные); 
	
	Для Каждого ТекСтрока Из ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"] Цикл
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, пСтруктураЗаполнения);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаписиСИнвертированнымЗнаком(Команда)
	
	ДобавитьЗаписиСИнвертированнымЗнакомНаСервере();
			  		
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписиСИнвертированнымЗнакомНаСервере()
	
	мНайденныеСтрокиРегистра = Регистры.НайтиСтроки(Новый Структура("Имя","бит_ОборотыПоБюджетам"));
	Если 
		 мНайденныеСтрокиРегистра.Количество()>0 И
		 мНайденныеСтрокиРегистра[0].Отображение И
		 ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Количество()>0
	Тогда 
		
		мдОпБРесурсы = Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Ресурсы;
				
		пИндекс = ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Количество()-1;
		
		Пока пИндекс>=0 Цикл 
			
			пСтрокаОпБ = ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Добавить();
			
			ЗаполнитьЗначенияСвойств(пСтрокаОпБ, ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"][пИндекс]);
			
			Для Каждого Ресурс Из мдОпБРесурсы Цикл 
				
				пНайденноеЗначение = Неопределено;
				Если Не пСтрокаОпБ.Свойство(Ресурс.Имя,пНайденноеЗначение) ИЛИ
					 Не ЗначениеЗаполнено(пНайденноеЗначение) ИЛИ
					 ТипЗнч(пНайденноеЗначение)<>Тип("Число")
				Тогда 
					Продолжить;
				КонецЕсли;
				
				Выполнить("пСтрокаОпБ."+Ресурс.Имя +"= -пНайденноеЗначение");
				
			КонецЦикла;
			
			пИндекс = пИндекс-1; 
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ХозрасчетныйНаборЗаписей.Количество()>0 Тогда 
		
		мдХозрасчетныйРесурсы = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Ресурсы;
			
		пИндекс = ХозрасчетныйНаборЗаписей.Количество()-1;
		
		Пока пИндекс>=0 Цикл 
			
			пСтрокаХозрасчетный = ХозрасчетныйНаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(пСтрокаХозрасчетный, ЭтотОбъект["ХозрасчетныйНаборЗаписей"][пИндекс]);
				
			Для Каждого Ресурс Из мдХозрасчетныйРесурсы Цикл 
				
				пНайденноеЗначение = Неопределено;
				
				Если Ресурс.ПризнакУчета = Неопределено Тогда
					
					Если пСтрокаХозрасчетный.Свойство(Ресурс.Имя,пНайденноеЗначение) И
						ЗначениеЗаполнено(пНайденноеЗначение) И
						ТипЗнч(пНайденноеЗначение)=Тип("Число")
					Тогда 
						Выполнить("пСтрокаХозрасчетный."+Ресурс.Имя +"= -пНайденноеЗначение");
					КонецЕсли;			
					
				Иначе
					
					Если пСтрокаХозрасчетный.Свойство(Ресурс.Имя + "Дт",пНайденноеЗначение) И
						ЗначениеЗаполнено(пНайденноеЗначение) И
						ТипЗнч(пНайденноеЗначение)=Тип("Число")
					Тогда 
						Выполнить("пСтрокаХозрасчетный."+Ресурс.Имя + "Дт" +"= -пНайденноеЗначение");
					КонецЕсли;
					
					Если пСтрокаХозрасчетный.Свойство(Ресурс.Имя + "Кт",пНайденноеЗначение) И
						ЗначениеЗаполнено(пНайденноеЗначение) И
						ТипЗнч(пНайденноеЗначение)=Тип("Число")
					Тогда 
						Выполнить("пСтрокаХозрасчетный."+Ресурс.Имя + "Кт" +"= -пНайденноеЗначение");
					КонецЕсли;
					
				КонецЕсли;
						
			КонецЦикла;
			
			пИндекс = пИндекс-1; 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-10 (#3087)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-10 (#3051)

&НаКлиенте
Процедура ок_ФВБОчистка(Элемент, СтандартнаяОбработка)
	
	СкрытьОтобразитьБК();	
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ФВБПриИзменении(Элемент)
	
	СкрытьОтобразитьБК();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтобразитьБК()
	
	пМодифицируем = Ложь;
	
	мНайденныеСтрокиРегистра = Регистры.НайтиСтроки(Новый Структура("Имя","бит_ОборотыПоБюджетам"));
	Если Не ЗначениеЗаполнено(ок_ФВБ) И
		 мНайденныеСтрокиРегистра.Количество()>0 И
		 мНайденныеСтрокиРегистра[0].Отображение		 
	Тогда 
	
		ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"].Очистить();
		
		мНайденныеСтрокиРегистра[0].Отображение = Ложь;
		пМодифицируем = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(ок_ФВБ) И
			  мНайденныеСтрокиРегистра.Количество()>0 И
			  Не мНайденныеСтрокиРегистра[0].Отображение
	Тогда 
	
		мНайденныеСтрокиРегистра[0].Отображение = Истина;
		пМодифицируем = Истина;
	
	КонецЕсли;
	
	Если пМодифицируем Тогда 		
		
		СоздатьРеквизитыФормы();
		СоздатьЭлементыФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуФормы(Имя, Заголовок, Действие)
	
	Если Команды.Найти(Имя) = Неопределено Тогда 
		Команда = Команды.Добавить(Имя);
		Команда.Заголовок 			   	   =  Заголовок;
		Команда.Действие 				   = Действие;
		Команда.ИзменяетСохраняемыеДанные  = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКомандуНаФорму(Имя, ИмяКоманды, Заголовок, Родитель, Картинка = Неопределено)
	
	Если Элементы.Найти(Имя) = Неопределено Тогда 	
		Кнопка = Элементы.Добавить(Имя, Тип("КнопкаФормы"), Родитель);
		Кнопка.ИмяКоманды = ИмяКоманды; 
		Кнопка.Заголовок  = Заголовок;		
		Если Картинка <> Неопределено Тогда           
			Кнопка.Картинка = Картинка;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерЗаявкиАксапты(Ссылка)
	пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_ДополнительныеДанныеПоОперациямАксапты.НомерЗаявки КАК НомерЗаявки
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеДанныеПоОперациямАксапты КАК бит_ДополнительныеДанныеПоОперациямАксапты
	|ГДЕ
	|	бит_ДополнительныеДанныеПоОперациямАксапты.Документ = &Документ");
	пЗапрос.УстановитьПараметр("Документ"	,	Ссылка);
	пРезультат = пЗапрос.Выполнить();
	Если пРезультат.Пустой() Тогда 
		Возврат ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
	КонецЕсли;
	
	Выборка = пРезультат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НомерЗаявки;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАналитикуНомерЗаявки()
	
	Возврат ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПрофильРазноскиПоСторнируемомуДокументу(Ссылка)
	
	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета") И
		 ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет")
	Тогда
	    Возврат Неопределено;
	КонецЕсли;

	Возврат Ссылка.ПодразделениеОрганизации;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_бит_ОборотыПоБюджетам_ПриИзмененииСтавкиНДС(Элемент)
	
	ПересчитатьСуммуВОпБНаСервере("СуммаРегл", Элементы.бит_оборотыПоБюджетам.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_бит_ОборотыПоБюджетам_ПриИзмененииСценария(Элемент)
	
	ПересчитатьСуммуВОпБНаСервере("СуммаРегл", Элементы.бит_оборотыПоБюджетам.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_бит_ОборотыПоБюджетам_ПриИзмененииВалюты(Элемент)
	
	ПересчитатьСуммуВОпБНаСервере("СуммаРегл", Элементы.бит_оборотыПоБюджетам.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_бит_ОборотыПоБюджетам_ПриИзмененииСумм(Элемент)
	
	ПересчитатьСуммуВОпБНаСервере(СтрЗаменить(Элемент.Имя,"бит_ОборотыПоБюджетам",""), Элементы.бит_оборотыПоБюджетам.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуВОпБНаСервере(ИмяЭлемента, ИдТекСтроки)
	
	Перем пВалютаПересчета;
	
	пТекДанные = ЭтотОбъект["бит_оборотыПоБюджетамНаборЗаписей"].НайтиПоИдентификатору(ИдТекСтроки);
	Если пТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//Пересчитываем СуммуРегл, от нее рассчитываем остальные суммы
	пВалютаСценария = пТекДанные.Сценарий.Валюта;
	
	Если НЕ ЗначениеЗаполнено(пВалютаСценария) Тогда 
		пВалютаСценария = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пТекДанные.СтавкаНДС) Тогда 
		СуммаНДСТекКолонки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
														пТекДанные[ИмяЭлемента],
														СтрНайти(ИмяЭлемента,"СНДС")>0,
														УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пТекДанные.СтавкаНДС));
	Иначе 
		СуммаНДСТекКолонки = 0;
	КонецЕсли;
	
	пИмяПарнойКолонки = ?(СтрНайти(ИмяЭлемента,"СНДС")>0,СтрЗаменить(ИмяЭлемента,"СНДС",""), СтрЗаменить(ИмяЭлемента,"Сумма","СуммаСНДС"));
	
	Если пТекДанные.Свойство(пИмяПарнойКолонки) Тогда 
		пТекДанные[пИмяПарнойКолонки] = пТекДанные[ИмяЭлемента]+?(СтрНайти(ИмяЭлемента,"СНДС")>0,-1,1)*СуммаНДСТекКолонки;
	КонецЕсли;

	Если СтрНайти(ИмяЭлемента, "Регл") > 0 Тогда 
		
		пВалютаПересчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
	ИначеЕсли СтрНайти(ИмяЭлемента, "Упр") > 0 Тогда 
		
		пВалютаПересчета = фКэшЗначений.ВалютаУпрУчета;
		
	ИначеЕсли СтрНайти(ИмяЭлемента, "Сценарий") > 0 Тогда
		
		пВалютаПересчета = пВалютаСценария;
		
	Иначе
		
		пВалютаПересчета = пТекДанные.Валюта;		
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(пВалютаПересчета) Тогда 
		пВалютаПересчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
		
	Если пВалютаПересчета <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда 
		пТекДанные.СуммаРегл = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пТекДанные[СтрЗаменить(ИмяЭлемента,"СНДС","")], Объект.Дата, пВалютаПересчета, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Иначе
		пТекДанные.СуммаРегл = пТекДанные[СтрЗаменить(ИмяЭлемента,"СНДС","")];
	КонецЕсли;	
	
	мИсключенияИзПересчета = Новый Массив;
	мИсключенияИзПересчета.Добавить(ИмяЭлемента);
	мИсключенияИзПересчета.Добавить(пИмяПарнойКолонки);
	
	ПересчитатьСуммыОпБПоСуммеРегл(пТекДанные, мИсключенияИзПересчета, пВалютаСценария);
			
КонецПроцедуры

Процедура ПересчитатьСуммыОпБПоСуммеРегл(пТекДанные, мИсключенияИзПересчета, ВалютаСценария);
	
	Если мИсключенияИзПересчета.Найти("СуммаУпр") = Неопределено Тогда 
		
		Если фКэшЗначений.ВалютаУпрУчета <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда 
			пТекДанные.СуммаУпр = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пТекДанные.СуммаРегл, Объект.Дата, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),фКэшЗначений.ВалютаУпрУчета);
		Иначе
			пТекДанные.СуммаУпр = пТекДанные.СуммаРегл;
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(пТекДанные.СтавкаНДС) Тогда 
			СуммаНДСТекКолонки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
																	пТекДанные.СуммаУпр,
																	Ложь,
																	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пТекДанные.СтавкаНДС));
		Иначе 
			СуммаНДСТекКолонки = 0;
		КонецЕсли;

		пТекДанные.СуммаСНДСУпр = пТекДанные.СуммаУпр + СуммаНДСТекКолонки;		
		
	КонецЕсли;
	
	Если мИсключенияИзПересчета.Найти("СуммаСценарий") = Неопределено Тогда 
		
		Если ВалютаСценария <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда 
			пТекДанные.СуммаСценарий = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пТекДанные.СуммаРегл, Объект.Дата, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),ВалютаСценария);
		Иначе
			пТекДанные.СуммаСценарий = пТекДанные.СуммаРегл;
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(пТекДанные.СтавкаНДС) Тогда 
			СуммаНДСТекКолонки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
																	пТекДанные.СуммаСценарий,
																	Ложь,
																	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пТекДанные.СтавкаНДС));
		Иначе 
			СуммаНДСТекКолонки = 0;
		КонецЕсли;

		пТекДанные.СуммаСНДССценарий = пТекДанные.СуммаСценарий + СуммаНДСТекКолонки;		
		
	КонецЕсли;
	
	Если мИсключенияИзПересчета.Найти("Сумма") = Неопределено Тогда 
		
		Если пТекДанные.Валюта <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда 
			пТекДанные.Сумма = бит_МеханизмТрансляции.ПересчитатьПоВалюте(пТекДанные.СуммаРегл, Объект.Дата, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),пТекДанные.Валюта);
		Иначе
			пТекДанные.Сумма = пТекДанные.СуммаРегл;
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(пТекДанные.СтавкаНДС) Тогда 
			СуммаНДСТекКолонки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
																	пТекДанные.Сумма,
																	Ложь,
																	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пТекДанные.СтавкаНДС));
		Иначе 
			СуммаНДСТекКолонки = 0;
		КонецЕсли;

		пТекДанные.СуммаСНДС = пТекДанные.Сумма + СуммаНДСТекКолонки;		
		
	КонецЕсли;
	
	Если мИсключенияИзПересчета.Найти("СуммаСНДСРегл") = Неопределено Тогда 
			
		Если ЗначениеЗаполнено(пТекДанные.СтавкаНДС) Тогда 
			СуммаНДСТекКолонки = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
																	пТекДанные.СуммаРегл,
																	Ложь,
																	УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(пТекДанные.СтавкаНДС));
		Иначе 
			СуммаНДСТекКолонки = 0;
		КонецЕсли;

		пТекДанные.СуммаСНДСРегл = пТекДанные.СуммаРегл + СуммаНДСТекКолонки;		
		
	КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-10 (#3051)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-07 (#3118)
&НаКлиенте
Процедура ПроверитьПовторноеИспользованиеСторнируемогоДокументаНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.СторнируемыйДокумент) Тогда 
		Возврат;
	КонецЕсли;
	
	РанееВведенныеОперации = ПроверитьПовторноеИспользованиеСторнируемогоДокументаНаСервере(Объект.Ссылка, Объект.СторнируемыйДокумент);
	
	Если РанееВведенныеОперации.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	пТекстСообщения = НСтр("ru = 'На основании документа %1 уже создан(ы) следующий(е) документ(ы):'");	
	пТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстСообщения, Объект.СторнируемыйДокумент);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстСообщения, Объект.СторнируемыйДокумент, "Объект.СторнируемыйДокумент");
	
	Для Каждого Операция Из РанееВведенныеОперации Цикл 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(Операция), Операция);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПовторноеИспользованиеСторнируемогоДокументаНаСервере(Ссылка, Документ)
	
	мРезультат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОперацияБух.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.Дата >= &Дата
	|	И ОперацияБух.Ссылка <> &Ссылка
	|	И ОперацияБух.СторнируемыйДокумент = &СторнируемыйДокумент
	|	И НЕ ОперацияБух.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОперацияБух.Дата";
	
	Запрос.УстановитьПараметр("Дата"				, Документ.Дата);
	Запрос.УстановитьПараметр("Ссылка"				, Ссылка);
	Запрос.УстановитьПараметр("СторнируемыйДокумент", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		мРезультат.Добавить(ВыборкаДетальныеЗаписи.Ссылка);	
	КонецЦикла;
	
	Возврат мРезультат;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-07 (#3118)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-10 (#3124)
&НаКлиенте
Процедура СторнируемыйДокументОчистка(Элемент, СтандартнаяОбработка)

	Объект.СторнируемыйДокумент = Неопределено;
	УстановитьОграничениеНаТипСторнируемогоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеНаТипСторнируемогоДокумента()
	
	ТипОперацияАксапты = Тип("ДокументСсылка.бит_ок_ОперацияАксапты");
	
	Если ТипЗнч(Объект.СторнируемыйДокумент)<>ТипОперацияАксапты 
	   	 И Элементы.СторнируемыйДокумент.ОграничениеТипа.СодержитТип(ТипОперацияАксапты) 
	Тогда 
		Элементы.СторнируемыйДокумент.ОграничениеТипа = Новый ОписаниеТипов(Элементы.СторнируемыйДокумент.ОграничениеТипа,,"ДокументСсылка.бит_ок_ОперацияАксапты");
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-26 (#ПроектИнтеграцияАксапта12)
	ТипОперацияАксапты12 = Тип("ДокументСсылка.бит_ок_ОперацияАксапты12");
	
	Если ТипЗнч(Объект.СторнируемыйДокумент)<>ТипОперацияАксапты12 
	   	 И Элементы.СторнируемыйДокумент.ОграничениеТипа.СодержитТип(ТипОперацияАксапты12) 
	Тогда 
		Элементы.СторнируемыйДокумент.ОграничениеТипа = Новый ОписаниеТипов(Элементы.СторнируемыйДокумент.ОграничениеТипа,,"ДокументСсылка.бит_ок_ОперацияАксапты12");
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-26 (#ПроектИнтеграцияАксапта12)
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-10 (#3124)


//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-25 (#3270)
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипЗнч(Объект.СторнируемыйДокумент) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Найти("бит_ОборотыПоБюджетам") <> Неопределено Тогда 
		
		ТЧОбороты = ЭтотОбъект["бит_ОборотыПоБюджетамНаборЗаписей"];
		
		мСтрокиСПустымиСтатьямиДДС = ТЧОбороты.НайтиСтроки(Новый Структура("СтатьяБДДС"	  , ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка")));
		
		Если мСтрокиСПустымиСтатьямиДДС.Количество()>0 Тогда 
			пСтрокиОшибки = "";
			
			Для Каждого СтрокаТЧ Из мСтрокиСПустымиСтатьямиДДС Цикл 
				пСтрокиОшибки = пСтрокиОшибки + "," + СтрокаТЧ.НомерСтроки;	
			КонецЦикла;
			
			пТекстОшибки = НСтр("ru = 'На вкладке ОПБ не заполнена статья БДДС в следующих строках: %1'");
			
			пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, Сред(пСтрокиОшибки,2));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);			
			
		КонецЕсли;	
		
		мСтрокиСПустымиСтатьямиБДР = ТЧОбороты.НайтиСтроки(Новый Структура("СтатьяОборотов", ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка")));
		
		Если мСтрокиСПустымиСтатьямиБДР.Количество()>0 Тогда 
			пСтрокиОшибки = "";
			
			Для Каждого СтрокаТЧ Из мСтрокиСПустымиСтатьямиБДР Цикл 
				пСтрокиОшибки = пСтрокиОшибки + "," + СтрокаТЧ.НомерСтроки;	
			КонецЦикла;
			
			пТекстОшибки = НСтр("ru = 'На вкладке ОПБ не заполнена статья БДР в следующих строках: %1'");
			
			пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, Сред(пСтрокиОшибки,2));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);			
			
		КонецЕсли;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-13 (#3654)
		//ТЗПроверкаСтатей = ТЧОбороты.Выгрузить(,"НомерСтроки,СтатьяБДДС,СтатьяОборотов");
		//Заменено на:
		ТЗПроверкаСтатей = ТЧОбороты.Выгрузить(,"НомерСтроки,СтатьяБДДС,СтатьяОборотов,Сумма,СуммаСНДС");
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-13 (#3654)		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗПроверкиСтатей.НомерСтроки КАК НомерСтроки,
		|	ТЗПроверкиСтатей.СтатьяОборотов КАК СтатьяОборотов,
		|	ТЗПроверкиСтатей.СтатьяБДДС КАК СтатьяБДДС
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-13 (#3654)
		|	,ТЗПроверкиСтатей.Сумма КАК Сумма,
		|	ТЗПроверкиСтатей.СуммаСНДС КАК СуммаСНДС
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-13 (#3654)
		|ПОМЕСТИТЬ ВТ0_ТЗПроверкиСтатей
		|ИЗ
		|	&ТЗПроверкиСтатей КАК ТЗПроверкиСтатей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЗПроверкиСтатей.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ0_ТЗПроверкиСтатей КАК ТЗПроверкиСтатей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
		|		ПО (ТЗПроверкиСтатей.СтатьяОборотов = (ВЫРАЗИТЬ(бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Справочник.бит_СтатьиОборотов)))
		|			И (бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
		|			И (ТЗПроверкиСтатей.СтатьяБДДС <> (ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.бит_СтатьиОборотов)))
		|			И (ТЗПроверкиСтатей.СтатьяОборотов <> ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
		|				И ТЗПроверкиСтатей.СтатьяБДДС <> ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-13 (#3654)
		|
		|ГДЕ
		|	ТЗПроверкиСтатей.Сумма >= 0
		|	И ТЗПроверкиСтатей.СуммаСНДС >= 0
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-13 (#3654)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЗПроверкиСтатей.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("ТЗПроверкиСтатей"	, ТЗПроверкаСтатей);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда 
			Возврат;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		пСтрокиОшибки = "";
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			пСтрокиОшибки = пСтрокиОшибки + "," + ВыборкаДетальныеЗаписи.НомерСтроки;	
		КонецЦикла;
		
		пТекстОшибки = НСтр("ru = 'На вкладке ОПБ статья БДР не соответствует статье БДДС в следующих строках: %1'");
		   
		пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, Сред(пСтрокиОшибки,2));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);		
		
	КонецЕсли;

КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-25 (#3270)

#КонецОбласти
