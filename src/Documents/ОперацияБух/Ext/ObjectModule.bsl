#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает/снимает признак активности движений документа в зависимости от пометки удаления.
// Следует вызывать перед записью измененной пометки удаления.
// Помеченный на удаление документ не должен иметь активных движений.
// Не помеченный на удаление документ может иметь неактивные движения.
Процедура СинхронизироватьАктивностьДвиженийСПометкойУдаления()
	
	Если НЕ ПометкаУдаления Тогда
		// Не помеченный на удаление документ может иметь неактивные движения.
		// Однако, при снятии пометки удаления все движения становятся активными.
		Если ЭтоНовый() Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") = ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Данные движений будут читаться только при неинтерактивной работе (например, при пометке на удаление документа
	// из списка). Поэтому чтение без контроля прав будет безопасным.
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = Новый Массив;
	Для Каждого Движение Из Движения Цикл
		
		Если Движение.Записывать = Ложь Тогда // При работе формы набор может быть уже "потроган" (прочитан, модифицирован)
			// Набор никто не трогал
			Движение.Прочитать();
		КонецЕсли;
		
		Если Движение.Количество() > 0 Тогда
			РегистрыСДвижениями.Добавить(Движение);
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Активность = НЕ ПометкаУдаления;
	Для Каждого Движение Из РегистрыСДвижениями Цикл
		
		Для Каждого Строка Из Движение Цикл
			
			Если Строка.Активность = Активность Тогда
				Продолжить;
			КонецЕсли;
			
			Строка.Активность   = Активность;
			Движение.Записывать = Истина; // На случай, если набор был прочитан выше
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРегистрНакопления(ИмяРегистра)
	
	Если ТаблицаРегистровНакопления.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
		ТаблицаРегистровНакопления.Добавить().Имя = ИмяРегистра;
	КонецЕсли;
	
КонецПроцедуры
		
Процедура ДобавитьРегистрСведений(ИмяРегистра)
	
	Если ТаблицаРегистровСведений.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
		ТаблицаРегистровСведений.Добавить().Имя = ИмяРегистра;
	КонецЕсли;
	
КонецПроцедуры
		
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-27 (#3077)
	СБ_ВыгруженВAXAPTA = Ложь;
	СБ_ВыгруженВAXAPTA_Актуальный = Ложь;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-27 (#3077)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-07 (#3118)
	СторнируемыйДокумент = Неопределено;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-07 (#3118)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-28 (#3147)
	СпособЗаполнения = "Сторно";
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-28 (#3147)
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ТиповыеОперации") Тогда
		ЭтотОбъект.СпособЗаполнения	 = "ТиповаяОперация";
		ЭтотОбъект.ТиповаяОперация	 = ДанныеЗаполнения.Ссылка;
	Иначе
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-28 (#3147)
	Если ПустаяСтрока(ЭтотОбъект.СпособЗаполнения) Тогда 
		ЭтотОбъект.СпособЗаполнения	= "Сторно";
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-28 (#3147)
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-20 (#3051)
	Если Не Отказ И
		 (ТипЗнч(СторнируемыйДокумент) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") ИЛИ
		 ТипЗнч(СторнируемыйДокумент) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"))
	Тогда 
		ПроверитьПрофилиРазноски(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-20 (#3051)
	
	//ОКЕЙ Наумов В.И.(СофтЛаб) Начало 2018-08-27 (#3077)
	Если Модифицированность() И СБ_ВыгруженВAXAPTA_Актуальный И НЕ ДополнительныеСвойства.Свойство("НеСбрасыватьПризнакВыгрузки") Тогда
		СБ_ВыгруженВAXAPTA_Актуальный = Ложь;
		ТекстСообщения = НСтр("ru = 'У документа %1 сброшен признак выгрузки в AXAPTA. Требуется перевыгрузить документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения , Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	//ОКЕЙ Наумов В.И.(СофтЛаб) Начало 2018-08-27 (#3077)	
	
	Если СпособЗаполнения = "Вручную" Тогда
		ТиповаяОперация      = Неопределено;
		СторнируемыйДокумент = Неопределено;
	ИначеЕсли СтрНайти(СпособЗаполнения, "Сторно") > 0 Тогда
		ТиповаяОперация = Неопределено;
				
		//При сторнировании документа прошлого месяца необходимо отметить проводки, не полежащие 
		//корректировке при расчете себестоимости
		Если ЗначениеЗаполнено(СторнируемыйДокумент) И (НачалоМесяца(СторнируемыйДокумент.Дата) <> НачалоМесяца(Дата)) Тогда
			МассивСчетов 			= УчетЗатрат.ПредопределенныеСчетаЗапасов();
		    МассивСчетовРасходов 	= УчетЗатрат.ПредопределенныеСчетаРасходов(); 
			
			Для Каждого СчетРасходов Из МассивСчетовРасходов Цикл
				МассивСчетов.Добавить(СчетРасходов);
			КонецЦикла;	
			
			МассивСубсчетов = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов);
			
			Для Каждого Проводка Из Движения.Хозрасчетный Цикл
				Проводка.НеКорректироватьСтоимостьАвтоматически = (МассивСубсчетов.Найти(Проводка.СчетКт) <> Неопределено)
					ИЛИ (МассивСубсчетов.Найти(Проводка.СчетДт) <> Неопределено);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли СпособЗаполнения = "ТиповаяОперация" Тогда
		СторнируемыйДокумент = Неопределено;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-30 (#3051)
	Если СпособЗаполнения = "Вручную" ИЛИ
		 СтрНайти(СпособЗаполнения, "Сторно") > 0		 		 
	Тогда 
		
		Если Движения.бит_ОборотыПоБюджетам.Количество()>0 И
			 Движения.бит_ОборотыПоБюджетам.Записывать
		Тогда 
		    		    
			Если ЗначениеЗаполнено(СторнируемыйДокумент) ИЛИ 
				 ДополнительныеСвойства.Свойство("Аналитика") И
				 ДополнительныеСвойства.Свойство("ок_ФВБ") И
				 ЗначениеЗаполнено(ДополнительныеСвойства.ок_ФВБ)
			Тогда
			
			    //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-15 (#3270)
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
				//Если ТипЗнч(СторнируемыйДокумент) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") И
					 //ДополнительныеСвойства.Свойство("СтатьиБДДС")
				Если ЗначениеЗаполнено(СторнируемыйДокумент) 
					И ТипЗнч(СторнируемыйДокумент) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") 
					И ДополнительныеСвойства.Свойство("СтатьиБДДС")
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)
				Тогда 
					ДозаполнитьОПБПоСтатьямДДС();
				КонецЕсли;
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-15 (#3270)
			
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-28 (#3147)
				Для Каждого СтрокаОПБ ИЗ Движения.бит_ОборотыПоБюджетам Цикл 
					СтрокаОПБ.СтавкаНДС = Неопределено;
				КонецЦикла;
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-28 (#3147)
				
				ЗаполнитьРНКЗБпоОпБ();
			Иначе 
				Движения.бит_ОборотыПоБюджетам.Очистить();
				Движения.бит_ОборотыПоБюджетам.Записывать = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-30 (#3051)	
	
	// Заполнение даты документа и реквизитов регистров Период и Организация.
	ФиксированноеВремяДокументов.УстановитьВремяНовогоДокумента(ЭтотОбъект, Отказ);
	Для каждого НаборЗаписей Из Движения Цикл
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПустаяТаблица   = НаборЗаписей.ВыгрузитьКолонки();
		ЕстьОрганизация = ПустаяТаблица.Колонки.Найти("Организация") <> Неопределено;
		ЕстьПериод      = ПустаяТаблица.Колонки.Найти("Период") <> Неопределено;
		
		Если НЕ (ЕстьОрганизация ИЛИ ЕстьПериод) Тогда
			Продолжить;
		КонецЕсли;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-13 (#3087)
		ИмяРегистра = НаборЗаписей.Метаданные().Имя;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-13 (#3087)		
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		Если ЕстьОрганизация Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-13 (#3087)
		//Если ЕстьПериод Тогда
		//Заменено на:
		Если ЕстьПериод И
			 ИмяРегистра <> "бит_ОборотыПоБюджетам" И
			 ИмяРегистра <> "бит_КонтрольныеЗначенияБюджетов"			 
		Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-13 (#3087)	
		ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		КонецЕсли;
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		
		// Актуализируем списки регистров
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-13 (#3087)
		//Перенесено выше
		//ИмяРегистра = НаборЗаписей.Метаданные().Имя;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-13 (#3087)
		Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
			ДобавитьРегистрНакопления(ИмяРегистра);
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(НаборЗаписей.Метаданные()) Тогда
			ДобавитьРегистрСведений(ИмяРегистра);
		КонецЕсли;
		
		//БИТ АКриштопов 07042016 ++
		Если ИмяРегистра = "бит_ОборотыПоБюджетам" Тогда
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		//БИТ АКриштопов 07042016 --		
		
		// В первый день применения УСН после перехода с уплаты налога на прибыль
		// не требуется очищать суммы НУ, ВР, ПР в операциях, сформированных "Помощником по переходу на УСН"
		Если Метаданные.РегистрыБухгалтерии.Содержит(НаборЗаписей.Метаданные()) Тогда
			Если УчетУСН.ЭтоПервыйДеньПримененияУСНПослеУплатыНалогаНаПрибыль(Организация, Дата) Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("СменаНалоговогоУчета", Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СинхронизироватьАктивностьДвиженийСПометкойУдаления();
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	Если СтрНайти(СпособЗаполнения, "Сторно") = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СторнируемыйДокумент");
	КонецЕсли;
	Если СтрНайти(СпособЗаполнения, "ТиповаяОперация") = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТиповаяОперация");
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2017-08-09 (#2836)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ОК_ПодпискиНаСобытия.ЭтоИзменениеРеквизитовОбъектаБезПроведения(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2017-08-09 (#2836)
	
	// бит_Финанс добавление кода. Начало: 27.03.2017  {{BF-377
	бит_ПриЗаписи(Отказ);
	// бит_Финанс добавление кода конец }} 
	
	//БИТ Тртилек 04.04.2012 Удаление движений РБ Международный и РС Соответсвие записей трансляции
	Если НЕ ЭтоНовый() Тогда 
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-30 (#3076)
		//ДвиженияСоответствия = РегистрыСведений.бит_СоответствиеЗаписейТрансляции.СоздатьНаборЗаписей();
		//ДвиженияСоответствия.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
		//ДвиженияСоответствия.Прочитать();	
		//ДвиженияСоответствия.Очистить();	
		//ДвиженияСоответствия.Записать();
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-30 (#3076)
		
		ДвиженияМеждународный = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
		ДвиженияМеждународный.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
		ДвиженияМеждународный.Прочитать();	
		ДвиженияМеждународный.Очистить();	
		ДвиженияМеждународный.Записать();
		
	КонецЕсли;
	///БИТ Тртилек
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-06 (#3051)
	Если Не Отказ И
		 ДополнительныеСвойства.Свойство("ок_ФВБ") И
		 ДополнительныеСвойства.Свойство("Аналитика")
	Тогда 		
		бит_БК_Общий.ПроверитьИДобавитьЗаписьПоАналитике1(Ссылка,ДополнительныеСвойства.Аналитика,ДополнительныеСвойства.ок_ФВБ);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-06 (#3051)	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-22 (#3267)
	Сценарий_НеСопоставлено = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Служебные элементы Не сопоставлено", "Сценарии", ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка"));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-22 (#3267)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-06 (#3051)
	соотСценарийОчищаемыеПоля = Новый Соответствие;
	мдЗнчПеречисления = Метаданные.Перечисления.бит_БК_ИзмеренияКонтроляБюджета.ЗначенияПеречисления;
	
	Если Не Отказ Тогда 
						
		Если Движения.бит_ОборотыПоБюджетам.Записывать Тогда 
			ТЗДляКолонок = Движения.бит_ОборотыПоБюджетам.ВыгрузитьКолонки();
			Для Каждого ДвижениеОпБ Из Движения.бит_ОборотыПоБюджетам Цикл 
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-22 (#3267)
				Если ДвижениеОпБ.Сценарий = Сценарий_НеСопоставлено Тогда 
					Продолжить;
				КонецЕсли;
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-22 (#3267)
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-18 (#3155)
				//ДвижениеОпБ.Аналитика_4 = ОК_ID_Разноска;
				//Заменено на:
				ДвижениеОпБ.Аналитика_4 = рс_ОбщийМодуль.ОбработатьID(ОК_ID_Разноска);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-18 (#3155)
				бит_КонтрольПоБюджету.ОчиститьНеиспользуемыеИзмеренияКонтроля(ДвижениеОпБ,соотСценарийОчищаемыеПоля,мдЗнчПеречисления,ТЗДляКолонок.Колонки);			
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
				Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СторнируемыйДокумент) Тогда
					Если ДвижениеОпБ.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
						ДвижениеОпБ.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У");	
					ИначеЕсли ДвижениеОпБ.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
						ДвижениеОпБ.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест");	
					КонецЕсли;	
				КонецЕсли;
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)		
			КонецЦикла;
		КонецЕсли;
					
		Если Движения.бит_КонтрольныеЗначенияБюджетов.Записывать Тогда 
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-14 (#3147)
			Движения.бит_КонтрольныеЗначенияБюджетов.ДополнительныеСвойства.Вставить("бит_БК_УстановкаСтатусаПослеПроведения", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-14 (#3147)
			
			ТЗДляКолонок = Движения.бит_КонтрольныеЗначенияБюджетов.ВыгрузитьКолонки();
			Для Каждого ДвижениеКЗБ Из Движения.бит_КонтрольныеЗначенияБюджетов Цикл 
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-22 (#3267)
				Если ДвижениеКЗБ.Сценарий = Сценарий_НеСопоставлено 
					 ИЛИ ДвижениеКЗБ.СценарийКонтролируемый = Сценарий_НеСопоставлено 
				Тогда 
					Продолжить;
				КонецЕсли;
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-22 (#3267)
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-18 (#3155)
				//ДвижениеКЗБ.Аналитика_4 = ОК_ID_Разноска;
				//Заменено на:
				ДвижениеКЗБ.Аналитика_4 = рс_ОбщийМодуль.ОбработатьID(ОК_ID_Разноска);				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-18 (#3155)
				бит_КонтрольПоБюджету.ОчиститьНеиспользуемыеИзмеренияКонтроля(ДвижениеКЗБ,соотСценарийОчищаемыеПоля,мдЗнчПеречисления,ТЗДляКолонок.Колонки);			
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-06 (#3051)
	
КонецПроцедуры

// Расширение процедуры ПриЗаписи    
// 
Процедура бит_ПриЗаписи(Отказ)
	
	Если ДополнительныеСвойства.Свойство("бит_РучнаяКорректировкаФакта") Тогда
	
		НаборЗаписей = РегистрыСведений.бит_РучнаяКорректировкаФакта.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Ссылка);
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = Ссылка;
		Запись.Значение = ДополнительныеСвойства.бит_РучнаяКорректировкаФакта;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-30 (#3051)
Процедура ЗаполнитьРНКЗБпоОпБ()
	
	Движения.бит_КонтрольныеЗначенияБюджетов.Записывать = Истина;	
	пТаблицаДвижений = Движения.бит_КонтрольныеЗначенияБюджетов.Выгрузить();
	пТаблицаДвижений.Очистить();
	мСценарии = Движения.бит_ОборотыПоБюджетам.ВыгрузитьКолонку("Сценарий");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарии", мСценарии);
	Запрос.УстановитьПараметр("Группа"	, "Контролируемый сценарий");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования) КАК СценарийКонтролирующий,
	|	ВЫРАЗИТЬ(бит_БК_НастройкиБК.ЗначениеСсылка КАК Справочник.СценарииПланирования) КАК СценарийКонтролируемый
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
	|	,ВЫРАЗИТЬ(бит_БК_НастройкиБК.ЗначениеСсылка КАК Справочник.СценарииПланирования).ок_УровеньСценария КАК УровеньКонтролируемогоСценария 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)
	|ИЗ
	|	РегистрСведений.бит_БК_НастройкиБК КАК бит_БК_НастройкиБК
	|ГДЕ
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-21 (#3267)
	//|	(ВЫРАЗИТЬ(бит_БК_НастройкиБК.ЗначениеСсылка КАК Справочник.СценарииПланирования)) <> ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)	И
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-21 (#3267)
	|	бит_БК_НастройкиБК.Группа = &Группа
	|	И (бит_БК_НастройкиБК.ИмяНастройки В(&Сценарии)
	|	ИЛИ бит_БК_НастройкиБК.ЗначениеСсылка В(&Сценарии))";
	
	пСоответствиеСценариев = Запрос.Выполнить().Выгрузить();	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-22 (#3267)
	Сценарий_НеСопоставлено = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Служебные элементы Не сопоставлено", "Сценарии", ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка"));
	стрСценарийНеСопоставлено = пСоответствиеСценариев.Добавить();
	стрСценарийНеСопоставлено.СценарийКонтролирующий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
	стрСценарийНеСопоставлено.СценарийКонтролируемый = Сценарий_НеСопоставлено;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-22 (#3267)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
	мСтатейОборотов = Движения.бит_ОборотыПоБюджетам.ВыгрузитьКолонку("СтатьяОборотов");
	соотСтатейИТипов = ПолучитьСоответствиеСтатейОборотовВидамСтатей(мСтатейОборотов);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)
	
	Для Каждого пСтрокаДвижений Из Движения.бит_ОборотыПоБюджетам Цикл 
		//Контроль
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-25 (#3147)
		мНайденнаяСтрока = пСоответствиеСценариев.НайтиСтроки(Новый Структура("СценарийКонтролирующий", пСтрокаДвижений.Сценарий));
		
		Если мНайденнаяСтрока.Количество()>0 Тогда 			
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-25 (#3147)
		
		пСтрокаДвиженияКЗБ = пТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(пСтрокаДвиженияКЗБ, пСтрокаДвижений);
		
		пСтрокаДвиженияКЗБ.Активность = Истина;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-25 (#3147)
		//Перенесено выше
		//мНайденнаяСтрока = пСоответствиеСценариев.НайтиСтроки(Новый Структура("СценарийКонтролирующий", пСтрокаДвиженияКЗБ.Сценарий));
		//
		//Если мНайденнаяСтрока.Количество()>0 Тогда 
		//	пСтрокаДвиженияКЗБ.СценарийКонтролируемый = мНайденнаяСтрока[0].СценарийКонтролируемый;
		//КонецЕсли;		
		//Заменено на:
		пСтрокаДвиженияКЗБ.СценарийКонтролируемый = мНайденнаяСтрока[0].СценарийКонтролируемый;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-25 (#3147)
		
		пСтрокаДвиженияКЗБ.СуммаСценарийКонтроль	 = пСтрокаДвижений.Сумма;
		пСтрокаДвиженияКЗБ.СуммаСценарийКонтрольСНДС = пСтрокаДвижений.СуммаСНДС;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-25 (#3147)
		КонецЕсли;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-25 (#3147)
				
		//Исполнение
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-25 (#3147)
		мНайденнаяСтрока = пСоответствиеСценариев.НайтиСтроки(Новый Структура("СценарийКонтролируемый", пСтрокаДвижений.Сценарий));
		
		Если мНайденнаяСтрока.Количество()>0 Тогда 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
		Если мНайденнаяСтрока[0].УровеньКонтролируемогоСценария = 5
		   И соотСтатейИТипов.Получить(пСтрокаДвижений.СтатьяОборотов) = ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС")  Тогда 
			Продолжить;//Делаем движения только по статье БДР
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)
			
			
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-07 (#3155)
		пСценарий = мНайденнаяСтрока[0].СценарийКонтролирующий;
		СуммаСценарийИсполнениеСНДС = 0;
		Если пСценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест")
			И пСценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У") 
			И пСценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест")
			И пСценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_У")
			И пСценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Контракт_Инвест")
			И пСценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест")
			И пСценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У")
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-22 (#3267)
			И пСтрокаДвижений.Сценарий <> Сценарий_НеСопоставлено
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-22 (#3267)
		Тогда 
			СуммаСценарийИсполнениеСНДС = пСтрокаДвижений.СуммаСНДС;		
		КонецЕсли;
		
		Если пСтрокаДвижений.Сумма = 0 И
			 СуммаСценарийИсполнениеСНДС = 0
		Тогда 
			Продолжить;
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-07 (#3155)	
			
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-25 (#3147)
		пСтрокаДвиженияКЗБ = пТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(пСтрокаДвиженияКЗБ, пСтрокаДвижений);
		пСтрокаДвиженияКЗБ.СуммаСценарийИсполнение	 = пСтрокаДвижений.Сумма;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-25 (#3147)
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-07 (#3155)
		//пСтрокаДвиженияКЗБ.СуммаСценарийИсполнениеСНДС = пСтрокаДвижений.СуммаСНДС;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-07 (#3155)
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-25 (#3147)
		
		пСтрокаДвиженияКЗБ.СценарийКонтролируемый = пСтрокаДвижений.Сценарий;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-25 (#3147)
		//Перенесено выше
		//мНайденнаяСтрока = пСоответствиеСценариев.НайтиСтроки(Новый Структура("СценарийКонтролируемый", пСтрокаДвижений.Сценарий));
		//
		//Если мНайденнаяСтрока.Количество()>0 Тогда 
		//	пСтрокаДвиженияКЗБ.Сценарий = мНайденнаяСтрока[0].СценарийКонтролирующий;
		//КонецЕсли;
		//Заменено на:
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-18 (#3155)
		//пСтрокаДвиженияКЗБ.Сценарий = мНайденнаяСтрока[0].СценарийКонтролирующий;		
		//Заменено на:
		пСтрокаДвиженияКЗБ.Сценарий = пСценарий;		
		пСтрокаДвиженияКЗБ.СуммаСценарийИсполнениеСНДС = СуммаСценарийИсполнениеСНДС;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-18 (#3155)	
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-22 (#3267)
		Если НЕ ЗначениеЗаполнено(пСтрокаДвиженияКЗБ.Сценарий) 
			И пСтрокаДвиженияКЗБ.СценарийКонтролируемый = Сценарий_НеСопоставлено			
		Тогда 
			пСтрокаДвиженияКЗБ.Контрагент	      = Неопределено;
			пСтрокаДвиженияКЗБ.ДоговорКонтрагента = Неопределено;
			пСтрокаДвиженияКЗБ.Аналитика_4		  = Неопределено;
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-22 (#3267)
		
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-25 (#3147)
	
	КонецЦикла;
	
	Движения.бит_КонтрольныеЗначенияБюджетов.мТаблицаДвижений = пТаблицаДвижений;
	Движения.бит_КонтрольныеЗначенияБюджетов.ДобавитьДвижение();
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-30 (#3051)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-20 (#3051)
Процедура ПроверитьПрофилиРазноски(Отказ)
	                       
	пЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДляПроверки.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаДляПроверки.СчетДт КАК ПланСчетов.Хозрасчетный) КАК СчетДт,
	|	ВЫРАЗИТЬ(ТаблицаДляПроверки.ПодразделениеДт КАК Справочник.ПодразделенияОрганизаций) КАК ПодразделениеДт,
	|	ВЫРАЗИТЬ(ТаблицаДляПроверки.СчетКт КАК ПланСчетов.Хозрасчетный) КАК СчетКт,
	|	ВЫРАЗИТЬ(ТаблицаДляПроверки.ПодразделениеКт КАК Справочник.ПодразделенияОрганизаций) КАК ПодразделениеКт
	|ПОМЕСТИТЬ ВТ0_ПроверяемыеДанные
	|ИЗ
	|	&ТаблицаДляПроверки КАК ТаблицаДляПроверки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетДт,
	|	СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ0_ПроверяемыеДанные.СчетДт КАК Счет
	|ПОМЕСТИТЬ ВТ01_СчетаДляПроверки
	|ИЗ
	|	ВТ0_ПроверяемыеДанные КАК ВТ0_ПроверяемыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКонтрагенты
	|		ПО ВТ0_ПроверяемыеДанные.СчетДт = ВидСубконтоКонтрагенты.Ссылка
	|			И (ВидСубконтоКонтрагенты.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДоговоры
	|		ПО ВТ0_ПроверяемыеДанные.СчетДт = ВидСубконтоДоговоры.Ссылка
	|			И (ВидСубконтоДоговоры.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ0_ПроверяемыеДанные.СчетКт
	|ИЗ
	|	ВТ0_ПроверяемыеДанные КАК ВТ0_ПроверяемыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоКонтрагенты
	|		ПО ВТ0_ПроверяемыеДанные.СчетКт = ВидСубконтоКонтрагенты.Ссылка
	|			И (ВидСубконтоКонтрагенты.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДоговоры
	|		ПО ВТ0_ПроверяемыеДанные.СчетКт = ВидСубконтоДоговоры.Ссылка
	|			И (ВидСубконтоДоговоры.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ01_СчетаДляПроверки.Счет КАК Счет
	|ПОМЕСТИТЬ ВТ02_СгруппированныеСчетаДляПроверки
	|ИЗ
	|	ВТ01_СчетаДляПроверки КАК ВТ01_СчетаДляПроверки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ01_СчетаДляПроверки.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ01_СчетаДляПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ0_ПроверяемыеДанные.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ СчетаДляПроверкиДт.Счет ЕСТЬ NULL
	|				И ВТ0_ПроверяемыеДанные.ПодразделениеДт <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				И ВТ0_ПроверяемыеДанные.СчетДт.УчетПоПодразделениям
	|				И ДТ_ПрофилиРазноски.ЗначениеАналитики ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаСчетДт,
	|	ВЫБОР
	|		КОГДА НЕ СчетаДляПроверкиКт.Счет ЕСТЬ NULL
	|				И ВТ0_ПроверяемыеДанные.ПодразделениеКт <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				И ВТ0_ПроверяемыеДанные.СчетКт.УчетПоПодразделениям
	|				И КТ_ПрофилиРазноски.ЗначениеАналитики ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаСчетКт,
	|	ЛОЖЬ КАК ОшибкаПодразделений
	|ПОМЕСТИТЬ ВТ1_ТаблицаПроверки
	|ИЗ
	|	ВТ0_ПроверяемыеДанные КАК ВТ0_ПроверяемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК ДТ_ПрофилиРазноски
	|		ПО (ВТ0_ПроверяемыеДанные.СчетДт = (ВЫРАЗИТЬ(ДТ_ПрофилиРазноски.ЗначениеАналитики КАК ПланСчетов.Хозрасчетный)))
	|			И (ДТ_ПрофилиРазноски.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.СчетРСБУ))
	|			И ((ВЫРАЗИТЬ(ДТ_ПрофилиРазноски.Аналитика КАК СТРОКА(15))) = (ВЫРАЗИТЬ(ВТ0_ПроверяемыеДанные.ПодразделениеДт.Наименование КАК СТРОКА(15))))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_ЗагрузкаПД_СопоставлениеКодовАналитикиAXAPTA КАК КТ_ПрофилиРазноски
	|		ПО (ВТ0_ПроверяемыеДанные.СчетКт = (ВЫРАЗИТЬ(КТ_ПрофилиРазноски.ЗначениеАналитики КАК ПланСчетов.Хозрасчетный)))
	|			И (КТ_ПрофилиРазноски.ВидАналитики = ЗНАЧЕНИЕ(Перечисление.СБ_ЗагрузкаПД_ВидыАналитикКодовAXAPTA.СчетРСБУ))
	|			И ((ВЫРАЗИТЬ(КТ_ПрофилиРазноски.Аналитика КАК СТРОКА(15))) = (ВЫРАЗИТЬ(ВТ0_ПроверяемыеДанные.ПодразделениеКт.Наименование КАК СТРОКА(15))))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ02_СгруппированныеСчетаДляПроверки КАК СчетаДляПроверкиДт
	|		ПО ВТ0_ПроверяемыеДанные.СчетДт = СчетаДляПроверкиДт.Счет	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ02_СгруппированныеСчетаДляПроверки КАК СчетаДляПроверкиКт
	|		ПО ВТ0_ПроверяемыеДанные.СчетКт = СчетаДляПроверкиКт.Счет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ0_ПроверяемыеДанные.НомерСтроки,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА ВТ0_ПроверяемыеДанные.СчетДт.УчетПоПодразделениям
	|				И ВТ0_ПроверяемыеДанные.СчетКт.УчетПоПодразделениям
	|				И ВТ0_ПроверяемыеДанные.ПодразделениеДт <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				И ВТ0_ПроверяемыеДанные.ПодразделениеКт <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				И ВТ0_ПроверяемыеДанные.ПодразделениеДт <> ВТ0_ПроверяемыеДанные.ПодразделениеКт
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	ВТ0_ПроверяемыеДанные КАК ВТ0_ПроверяемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ0_ПроверяемыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ1_ТаблицаПроверки.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ВТ1_ТаблицаПроверки.ОшибкаСчетДт) КАК ОшибкаСчетДт,
	|	МАКСИМУМ(ВТ1_ТаблицаПроверки.ОшибкаСчетКт) КАК ОшибкаСчетКт,
	|	МАКСИМУМ(ВТ1_ТаблицаПроверки.ОшибкаПодразделений) КАК ОшибкаПодразделений
	|ИЗ
	|	ВТ1_ТаблицаПроверки КАК ВТ1_ТаблицаПроверки,
	|	ВТ02_СгруппированныеСчетаДляПроверки КАК ВТ02_СгруппированныеСчетаДляПроверки
	|ГДЕ
	|	(ВТ1_ТаблицаПроверки.ОшибкаСчетДт
	|			ИЛИ ВТ1_ТаблицаПроверки.ОшибкаСчетКт
	|			ИЛИ ВТ1_ТаблицаПроверки.ОшибкаПодразделений)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ1_ТаблицаПроверки.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	пЗапрос.УстановитьПараметр("ТаблицаДляПроверки", Движения.Хозрасчетный.Выгрузить(,"НомерСтроки,СчетДт,ПодразделениеДт,СчетКт,ПодразделениеКт"));
	
	Результат = пЗапрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		пТекстОшибки = "В строке %1" + ?(Выборка.ОшибкаПодразделений, " не совпадают профили разноски Дт и Кт,","")
									  + ?(Выборка.ОшибкаСчетДт		 , " счет Дт не соответствует выбранному профилю разноски,","")
									  + ?(Выборка.ОшибкаСчетКт		 , " счет Кт не соответствует выбранному профилю разноски,","");
		пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Лев(пТекстОшибки, СтрДлина(пТекстОшибки)-1), Выборка.НомерСтроки); 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки, , , , Отказ);	
		
	КонецЦикла;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-20 (#3051)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-15 (#3270)
Процедура ДозаполнитьОПБПоСтатьямДДС()
	
	СтатьиБДДС = ДополнительныеСвойства.СтатьиБДДС;
	
	Если СтатьиБДДС.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
		
	пТаблицаДвижений = Движения.бит_ОборотыПоБюджетам.Выгрузить();
	
	Движения.бит_ОборотыПоБюджетам.Очистить();
		
	пТаблицаСоответствия = Движения.бит_СоответствиеЗаписейТрансляции.Выгрузить();	
	
	ОбСистемы_ОПБ = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрНакопления.бит_ОборотыПоБюджетам");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-14 (#3267)
	//пИндекс = пТаблицаСоответствия.Количество()-1;
	//Пока пИндекс>=0 Цикл 
	//	
	//	Если пТаблицаСоответствия[пИндекс].Источник = ОбСистемы_ОПБ 
	//	   И пТаблицаСоответствия[пИндекс].Приемник = ОбСистемы_ОПБ
	//	Тогда 
	//	 	пТаблицаСоответствия.Удалить(пИндекс);
	//	КонецЕсли;
	//		
	//	пИндекс = пИндекс - 1;
	//	
	//КонецЦикла;
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-14 (#3267)
	//Заменено на:
	ОК_ОбщегоНазначения.ОчиститьТаблицуСоответствияОтЗаписейПоВидамСтатейВОПБ(ОбСистемы_ОПБ,пТаблицаСоответствия);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
	УровеньСценария = ПолучитьУровеньСценария(ЭтотОбъект.СторнируемыйДокумент);
	Для каждого стр Из пТаблицаДвижений Цикл
		стр.Сценарий = ОК_ОбщегоНазначения.ОпределитьСценарий(стр.СтатьяОборотов.ВидСтатьи,УровеньСценария);
	КонецЦикла;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)		
	
	пИндекс = СтатьиБДДС.Количество()-1;
	Пока пИндекс>=0 Цикл 
		Если ЗначениеЗаполнено(СтатьиБДДС[пИндекс]) Тогда 
			
			нСтрокаБДДС = пТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрокаБДДС, пТаблицаДвижений[пИндекс]);
			
			нСтрокаБДДС.НомерСтроки	   = пТаблицаДвижений.Количество();
			нСтрокаБДДС.Активность     = Истина;
			нСтрокаБДДС.СтатьяОборотов = СтатьиБДДС[пИндекс];
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
			нСтрокаБДДС.Сценарий = ОК_ОбщегоНазначения.ОпределитьСценарий(нСтрокаБДДС.СтатьяОборотов.ВидСтатьи, УровеньСценария);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)		
						
			//Соответствие
			пДвижениеПоСоответствию	= пТаблицаСоответствия.Добавить();
			
			пДвижениеПоСоответствию.Период	 		 	 = НачалоДня(Дата);
			пДвижениеПоСоответствию.Активность 		 	 = Истина;
			пДвижениеПоСоответствию.Источник 		 	 = ОбСистемы_ОПБ;
			пДвижениеПоСоответствию.Приемник			 = ОбСистемы_ОПБ;
			пДвижениеПоСоответствию.Организация			 = Организация;
			пДвижениеПоСоответствию.НомерСтрокиИсточника = пТаблицаДвижений[пИндекс].НомерСтроки;		
			пДвижениеПоСоответствию.НомерСтрокиПриемника = нСтрокаБДДС.НомерСтроки;					
			
		КонецЕсли;
		пИндекс = пИндекс - 1;
	КонецЦикла;
		
	Движения.бит_ОборотыПоБюджетам.мТаблицаДвижений = пТаблицаДвижений;
	Движения.бит_ОборотыПоБюджетам.Записывать		= Истина;
	Движения.бит_ОборотыПоБюджетам.ДобавитьДвижение();
	
	Если пТаблицаСоответствия.Количество()>0 Тогда
		пДвиженияСоответстивия = Движения.бит_СоответствиеЗаписейТрансляции;
		пДвиженияСоответстивия.Записывать = Истина;
		пДвиженияСоответстивия.Загрузить(пТаблицаСоответствия);	
	КонецЕсли;

КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-15 (#3270)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
Функция ПолучитьСоответствиеСтатейОборотовВидамСтатей(мСтатейОборотов)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мСтатейОборотов", мСтатейОборотов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_СтатьиОборотов.Ссылка КАК Статья,
	|	бит_СтатьиОборотов.ТипСтатьи КАК ТипСтатьи
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|ГДЕ
	|	бит_СтатьиОборотов.Ссылка В(&мСтатейОборотов)";	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Вставить(ВыборкаДетальныеЗаписи.Статья, ВыборкаДетальныеЗаписи.ТипСтатьи);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
Функция ПолучитьУровеньСценария(СторнируемыйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_КонтрольныеЗначенияБюджетов.СценарийКонтролируемый КАК СценарийКонтролируемый,
		|	бит_КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение КАК СуммаСценарийИсполнение,
		|	бит_КонтрольныеЗначенияБюджетов.СценарийКонтролируемый.ок_УровеньСценария КАК СценарийКонтролируемыйок_УровеньСценария
		|ИЗ
		|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК бит_КонтрольныеЗначенияБюджетов
		|ГДЕ
		|	бит_КонтрольныеЗначенияБюджетов.Регистратор = &Регистратор
		|	И бит_КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение <> 0";
	
	Запрос.УстановитьПараметр("Регистратор", СторнируемыйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СценарийКонтролируемыйок_УровеньСценария;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)		


#КонецЕсли

