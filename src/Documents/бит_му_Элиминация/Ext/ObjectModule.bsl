#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

Перем мПроводки Экспорт; // Хранит таблицу значений для формирования проводок.

Перем СтруктураДляПротоколаПроведения; // Хранит данные, необходимые для формирования протокола проведения.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	             	
	ПроверкаРеквизитов(Отказ, Заголовок);	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если мПроводки = Неопределено Тогда
		СформироватьДанныеДляПроведения();
	КонецЕсли;
	ПроверитьДанныеДляПроведения(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегистрам(Отказ, Заголовок);
               
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция определяет будут ли движения по международному учету.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЕстьМеждународныйУчет() Экспорт

	Если Метаданные.РегистрыБухгалтерии[ОбъектСистемы.ИмяОбъекта].Ресурсы.Найти("СуммаМУ") = Неопределено Тогда
		ЕстьМеждународныйУчет = Ложь;
	Иначе
		ЕстьМеждународныйУчет = Истина;
	КонецЕсли;

	Возврат ЕстьМеждународныйУчет;
	
КонецФункции // ЕстьМеждународныйУчет()	

// Определяет будут ли формироваться движения по РБ.бит_Бюджетирование.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЕстьБюджетирование() Экспорт

	Если ОбъектСистемы.ИмяОбъекта = "бит_Бюджетирование" Тогда
		
		флЕсть = Истина;
		
	Иначе	
		
		флЕсть = Ложь;
		
	КонецЕсли; 

	Возврат флЕсть;
	
КонецФункции // ЕстьБюджетирование()

// Процедура формирует данные для проведения документа.
// 
Процедура СформироватьДанныеДляПроведения() Экспорт

	ГраницаКон = Новый Граница(КонецДня(ДатаКон),ВидГраницы.Включая);
	
	Для каждого ТекНастройка Из Настройки Цикл
		
		Для каждого ТекСтр Из ТекНастройка.Настройка.Настройки Цикл
			
			// Если ТекСтр.ТипАлгоритмаЭлиминации = Перечисления.бит_му_ТипыАлгоритмовЭлиминации.Простой Тогда.
				
				Параметры = Новый Структура;				
				Параметры.Вставить("ПериметрКонсолидации", Периметр);
				Параметры.Вставить("РегистрБухгалтерии"  , ОбъектСистемы);
				
				СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
				СтрПар.Параметры = Параметры;
				
				РезультатЗапроса = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ТекСтр.ИсточникДанных, ДатаНач, ГраницаКон, СтрПар);
				ДобавитьТаблицуЗначений(РезультатЗапроса, ТекСтр.ТипАлгоритмаЭлиминации, ТекСтр.СчетДополнительногоДвижения, ТекНастройка.Настройка, ТекСтр.ИсточникДанных);
				
			// Иначе
			// 	
			// 	Параметры = Новый Структура;				
			// 	Параметры.Вставить("ПериметрКонсолидации", Периметр);
			// 	Параметры.Вставить("РегистрБухгалтерии"  , ОбъектСистемы);
			// 	
			// 	СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
			// 	СтрПар.Параметры = Параметры;				
			// 	
			// 	РезультатЗапроса = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ТекСтр.ИсточникДанных
			// 																			, ДатаНач
			// 																			, ГраницаКон
			// 																			, СтрПар);
			// 	ДобавитьТаблицуЗначений(РезультатЗапроса
			// 							, ТекСтр.ТипАлгоритмаЭлиминации
			// 							, ТекСтр.СчетДополнительногоДвижения
			// 							, ТекНастройка.Настройка
			// 							, ТекСтр.ИсточникДанных);
			// 	
			// КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // СформироватьДанныеДляПроведения()

// Функция возвращает массив показателей (ресурсов регистра) для отчета.
// 
// Возвращаемое значение:
//  Массив.
// 
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
    
	МассивПоказателей.Добавить("СуммаРегл");
    
	МассивПоказателей.Добавить("СуммаУпр");
	
	Если ЕстьМеждународныйУчет() Тогда
		МассивПоказателей.Добавить("СуммаМУ");
	КонецЕсли;
	
	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

// Процедура обводит области отчета.
// 
// Параметры:
//  ДокументРезультат - ТабличныйДокумент.
//  НачалоСекции  	  - Число.
//  Линия    		  - Число.
//  ЛинияЖирная 	  - Число.
// 
Процедура ОбвестиОбластиОтчета(ДокументРезультат, НачалоСекции = 0, Линия, ЛинияЖирная) Экспорт
	
	КонСтр = ДокументРезультат.ВысотаТаблицы;

	ДокументРезультат.Область(КонСтр,  2, КонСтр,  5).ГраницаСнизу  = Линия;
	ДокументРезультат.Область(КонСтр,  6, КонСтр,  9).ГраницаСнизу  = ЛинияЖирная;
	ДокументРезультат.Область(КонСтр, 10, КонСтр, 13).ГраницаСнизу = Линия;
	
	ДокументРезультат.Область(НачалоСекции,2,КонСтр,2).Объединить();
	ДокументРезультат.Область(НачалоСекции,3,КонСтр,3).Объединить();
	ДокументРезультат.Область(НачалоСекции,2,КонСтр,3).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
КонецПроцедуры // ОбвестиОбластиОтчета()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект,
												 бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"),
												 ПараметрОбъектКопирования);
												
	Если ПараметрОбъектКопирования = Неопределено Тогда
		ОбъектСистемы = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(ПланыВидовХарактеристик.бит_НастройкиПользователей.ОсновнойРегистрБухгалтерииУУ);
	КонецЕсли;												
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Функция определяет собственного контрагента организации.
// 
// Параметры:
//  СоответствиеОрганизаций - Структура.
// 	Организация 			- СправочникСсылка.Организации.
// 
// Возвращаемое значение:
//  Результат - СправочникСсылка.Контрагенты.
// 
Функция ВернутьКонтрагентаОрганизации(СоответствиеОрганизаций, Организация)
	
	// Изменение кода. Начало. 03.04.2012{{
	НайденнаяОрганизация = СоответствиеОрганизаций.Получить(Организация);
	
	Если НайденнаяОрганизация = Неопределено Тогда
		
		НайденнаяОрганизация = бит_ОбщегоНазначения.ПолучитьСобственногоКонтрагентаПоОрганизации(Организация);
		Если ЗначениеЗаполнено(НайденнаяОрганизация) Тогда
			СоответствиеОрганизаций.Вставить(Организация, НайденнаяОрганизация);
		Иначе
			НайденнаяОрганизация = Неопределено;
		КонецЕсли;
		// Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		// 					  |	СобственныеКонтрагенты.Контрагент
		// 					  |ИЗ
		// 					  |	РегистрСведений.бит_СобственныеКонтрагенты КАК СобственныеКонтрагенты
		// 					  |ГДЕ
		// 					  |	СобственныеКонтрагенты.ВидСвязи = &ВидСвязи
		// 					  |	И СобственныеКонтрагенты.Объект = &Объект");
		// Запрос.УстановитьПараметр("ВидСвязи", 	Перечисления.бит_ВидыСобственныхКонтрагентов.Организация);
		// Запрос.УстановитьПараметр("Объект", 	Организация);
		// Рез = Запрос.Выполнить().Выгрузить();
		// Если Рез.Количество()>0 тогда
		// 	НайденнаяОрганизация = Рез[0].Контрагент;
		// 	СоответствиеОрганизаций.Вставить(Организация, НайденнаяОрганизация);
		// КонецЕсли;
		
	КонецЕсли;
	// Изменение кода. Конец. 03.04.2012}}
	
	Возврат НайденнаяОрганизация;
	
КонецФункции

// Процедура заполняет проводку для вспомогательного счета.
// 
Процедура ЗаполнитьСторонуВспомогательногоСчета(Счет, Субконто, ТекСтр, СчетПК, СоответствиеОрганизаций, Контрагент = Неопределено, СтруктураЗаполненияСубконто = Неопределено)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//Если Счет = СчетПК Тогда
	Если НЕ Счет = СчетПК Тогда
		Возврат;
	КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
		СобственнаяОрганизация = ВернутьКонтрагентаОрганизации(СоответствиеОрганизаций, ТекСтр.Организация);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто, "СобственнаяОрганизация", СобственнаяОрганизация);
		
		ТипКонтрагент = Тип("СправочникСсылка.Контрагенты");
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Если (мПроводки.Колонки.Найти("Субконто1") <> Неопределено) И ТипЗнч(ТекСтр.Субконто1) = ТипКонтрагент Тогда
				Контрагент= ТекСтр.Субконто1;
			ИначеЕсли (мПроводки.Колонки.Найти("Субконто2") <> Неопределено) И ТипЗнч(ТекСтр.Субконто2) = ТипКонтрагент Тогда
				Контрагент = ТекСтр.Субконто2;
			// Добавление кода. Начало. 19.02.2016{{
			ИначеЕсли (мПроводки.Колонки.Найти("Субконто3") <> Неопределено) И ТипЗнч(ТекСтр.Субконто3) = ТипКонтрагент Тогда
				Контрагент = ТекСтр.Субконто3;
			ИначеЕсли (мПроводки.Колонки.Найти("Субконто4") <> Неопределено) И ТипЗнч(ТекСтр.Субконто4) = ТипКонтрагент Тогда
				Контрагент = ТекСтр.Субконто4;
			// Добавление кода. Конец. 19.02.2016}}
			КонецЕсли;
		КонецЕсли;
		
		//БИТ Тртилек 19072013 если значение контрагента не заполнилось раньше, то получаем значение колонки "Контрагент", если оная существует
		Если мПроводки.Колонки.Найти("Контрагент") <> Неопределено и ЗначениеЗаполнено(ТекСтр.Контрагент) И НЕ ЗначениеЗаполнено(Контрагент) Тогда	
			Контрагент = ТекСтр.Контрагент;
		КонецЕсли;
		///БИТ Тртилек
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто, "Контрагенты", Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто, "ВидыКонсолидационныхПоправок", ТекСтр.Настройка.ВидКонсолидационныхПоправок);
		
		//БИТ Тртилек 19072013 если значение контрагента не заполнилось раньше, то получаем значение колонки "Контрагент", если оная существует
		Если мПроводки.Колонки.Найти("Организация") <> Неопределено и ЗначениеЗаполнено(ТекСтр.Организация) Тогда	
			//Найдем встречные контрагенты
			ЗапросВстречныхКонтрагентов = Новый Запрос;
			ЗапросВстречныхКонтрагентов.Текст = "ВЫБРАТЬ
			                                    |	бит_СобственныеКонтрагенты.Контрагент КАК Контрагент
			                                    |ИЗ
			                                    |	РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты
			                                    |ГДЕ
			                                    |	бит_СобственныеКонтрагенты.Объект = &Организация
			                                    |	И бит_СобственныеКонтрагенты.ВидСвязи = &ВидСвязи
			                                    |
			                                    |УПОРЯДОЧИТЬ ПО
			                                    |	бит_СобственныеКонтрагенты.Контрагент.Код";
			ЗапросВстречныхКонтрагентов.УстановитьПараметр("Организация", ТекСтр.Организация);
			ЗапросВстречныхКонтрагентов.УстановитьПараметр("ВидСвязи", Перечисления.бит_ВидыСобственныхКонтрагентов.Организация);
			
			ВыборкаЗапросаВстерчныхКонтрагентов = ЗапросВстречныхКонтрагентов.Выполнить().Выбрать();
			
			Если ВыборкаЗапросаВстерчныхКонтрагентов.Следующий() Тогда
				 бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто, "СобственнаяОрганизация", ВыборкаЗапросаВстерчныхКонтрагентов.Контрагент);
			КонецЕсли;
		КонецЕсли;
		///БИТ Тртилек
		
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ИначеЕсли СтруктураЗаполненияСубконто <> Неопределено Тогда
	//	
	//	Если СтруктураЗаполненияСубконто.Организация Тогда		
	//		СобственнаяОрганизация = ВернутьКонтрагентаОрганизации(СоответствиеОрганизаций, ТекСтр.Организация);
	//		бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто, "СобственнаяОрганизация", СобственнаяОрганизация);
	//	КонецЕсли;
	//		
	//	Если СтруктураЗаполненияСубконто.Контрагент Тогда
	//		бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто, "Контрагенты", ТекСтр.Контрагент);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

КонецПроцедуры // ЗаполнитьСторонуВспомогательногоСчета

// Процедура выполняет проверку заполнения шапки и таб. частей.
// 
// Параметры:
//  Отказ 	  - Булево.
//  Заголовок - Строка.
// 
Процедура ПроверкаРеквизитов(Отказ, Заголовок)

	// Проверим заполнение шапки.
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Периметр");
	СтруктураОбязательныхПолей.Вставить("Организация");
	СтруктураОбязательныхПолей.Вставить("ОбъектСистемы");
	
	бит_РаботаСМетаданными.ПроверитьЗаполнениеШапки(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если НЕ ЗначениеЗаполнено(СчетВспомогательный) Тогда
		ПредставлениеРеквизита = Метаданные().Реквизиты.СчетВспомогательный.Представление();
		бит_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!""", Отказ, Заголовок);
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Настройка");
	
	бит_ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Настройки", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(Отказ, Заголовок)
		
	Если мПроводки <> Неопределено Тогда
		СформироватьПроводки();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДобавитьПроводкуСторно(Проводки, ТекПроводка, СтруктураРес)

	ЕстьКоличество 		  = СтруктураРес.ЕстьКоличество;
	ЕстьМеждународныйУчет = СтруктураРес.ЕстьМеждународныйУчет;
	ЕстьБюдж	   		  = СтруктураРес.ЕстьБюдж;

	Если НЕ ЗначениеЗаполнено(ДатаСторно) Тогда
		// Не формируется проводка сторно, если дата сторно не заполнена.	
		Возврат;	
	КонецЕсли;
	
	НоваяСтрока = Проводки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПроводка);
	
	НоваяСтрока.Период = ДатаСторно;
	
	Для каждого ЭлСуб Из ТекПроводка.СубконтоДт Цикл
	 	Если ЗначениеЗаполнено(ЭлСуб.Значение) Тогда
			НоваяСтрока.СубконтоДт.Вставить(ЭлСуб.Ключ, ЭлСуб.Значение);		
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлСуб Из ТекПроводка.СубконтоКт Цикл
	 	Если ЗначениеЗаполнено(ЭлСуб.Значение) Тогда
			НоваяСтрока.СубконтоКт.Вставить(ЭлСуб.Ключ, ЭлСуб.Значение);		
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока.СуммаРегл = - НоваяСтрока.СуммаРегл;
	НоваяСтрока.СуммаУпр  = - НоваяСтрока.СуммаУпр;
	Если ЕстьМеждународныйУчет Тогда
		НоваяСтрока.СуммаМУ = - НоваяСтрока.СуммаМУ;	
	КонецЕсли;
	Если ЕстьБюдж Тогда
		НоваяСтрока.СуммаСценарий = - НоваяСтрока.СуммаСценарий;	
	КонецЕсли;
	
	НоваяСтрока.ВалютнаяСуммаДт = - НоваяСтрока.ВалютнаяСуммаДт;	
	НоваяСтрока.ВалютнаяСуммаКт = - НоваяСтрока.ВалютнаяСуммаКт;
	
	Если ЕстьКоличество Тогда
		НоваяСтрока.КоличествоДт = - НоваяСтрока.КоличествоДт;
		НоваяСтрока.КоличествоКт = - НоваяСтрока.КоличествоКт;
	КонецЕсли;  	

КонецПроцедуры // ДобавитьПроводкуСторно()

// Процедура обрабатывает таблицу значений мПроводки, заполняет движения документа.
// 
Процедура СформироватьПроводки()

	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, Дата, ВидыКурсов);
	
	ПодготовитьСтруктуруДляПротоколаПроведения();
	
	ЕстьМеждународныйУчет = ЕстьМеждународныйУчет(); 
	флЕстьБюдж = ЕстьБюджетирование();
	Если флЕстьБюдж Тогда
		
		МассивЦФО = бит_Бюджетирование.СвязанныеЦФОИПодразделения(Организация);
		Если МассивЦФО.Количество() > 0 Тогда
			
			ЦФО_Консолидирующее = МассивЦФО[0];
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	Проводки = Движения[ОбъектСистемы.ИмяОбъекта];
	
	УчетнаяПолитикаОрг = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(КонецДня(Дата), Новый Структура("Организация", Организация));	
	СчетПК = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(УчетнаяПолитикаОрг
			  											    ,ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.ПромежуточныйСчетДляКонсолидации);
	
	СоответствиеОрганизаций = Новый Соответствие;
	СтруктураЗаполненияСубконто = Новый Структура;
	СтруктураЗаполненияСубконто.Вставить("Организация", мПроводки.Колонки.Найти("Организация") <> Неопределено);
	СтруктураЗаполненияСубконто.Вставить("Контрагент" , мПроводки.Колонки.Найти("Контрагент") <> Неопределено);
	
	ЕстьКоличество = мПроводки.Колонки.Найти("Количество_Дт") <> Неопределено
					ИЛИ мПроводки.Колонки.Найти("Количество_Кт") <> Неопределено;
					
	// ++ BIT AMerkulov 10032014 {
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бит_СобственныеКонтрагенты.Контрагент КАК Контрагент,
		|	бит_СобственныеКонтрагенты.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты");
	ТаблицаСобственныхКонтрагентов = Запрос.Выполнить().Выгрузить();					  	
	// }
	
	СтруктураРес = Новый Структура("ЕстьКоличество, ЕстьМеждународныйУчет, ЕстьБюдж"
							, ЕстьКоличество, ЕстьМеждународныйУчет, флЕстьБюдж);
	
	Для каждого ТекСтр Из мПроводки Цикл
			
		Если ТекСтр.ТипАлгоритмаЭлиминации = Перечисления.бит_му_ТипыАлгоритмовЭлиминации.ВыручкаВГО Тогда
			
			Если флЕстьБюдж Тогда				
				// Данный тип алгоритма не поддерживается для РБ.бит_Бюджетирование.
				Продолжить;     			
			КонецЕсли; 
			
			// Создадим проводку ДТ Счет выручки КТ Вспомогательный счет.
			НоваяСтрока = Проводки.Добавить();
			
			НоваяСтрока.Период 		= Дата;
			НоваяСтрока.Организация = Организация;
			
			НоваяСтрока["СчетДт"] = ТекСтр.СчетДт;
			Для Н = 1 По мКоличествоСубконтоМУ Цикл
				ИмяТекСб = "Субконто" + Н; 
				Если мПроводки.Колонки.Найти(ИмяТекСб) <> Неопределено Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(ТекСтр.СчетДт, НоваяСтрока["СубконтоДт"], Н, ТекСтр[ИмяТекСб]);
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока["СчетКт"] = СчетВспомогательный;
			
			СторонаПроводкиСчетДоп = "Кт";
			ЗаполнитьСторонуВспомогательногоСчета(НоваяСтрока["Счет" + СторонаПроводкиСчетДоп]
												  	, НоваяСтрока["Субконто" + СторонаПроводкиСчетДоп]
												  	, ТекСтр
												  	, СчетПК
												  	, СоответствиеОрганизаций
												  	, ТекСтр.Контрагент
													, СтруктураЗаполненияСубконто);
			
			НоваяСтрока.Содержание  = Строка(ТекСтр.Организация) + " > " + ТекСтр.Контрагент;

			НоваяСтрока.СуммаРегл  	= ТекСтр.СуммаРегл;
			НоваяСтрока.СуммаУпр    = ТекСтр.СуммаУпр;
			Если ЕстьМеждународныйУчет Тогда															 
				НоваяСтрока.СуммаМУ    = ТекСтр.СуммаМУ;
			КонецЕсли;
			
			ПротоколПроведенияДобавитьСтроку(НоваяСтрока, ТекСтр.Настройка, ТекСтр.ИсточникДанных);
			ДобавитьПроводкуСторно(Проводки, НоваяСтрока, СтруктураРес);
						
			// Создадим проводку ДТ Вспомогательный счет КТ Счет доп. движения.
			Если НЕ ЗначениеЗаполнено(ТекСтр.СчетДопДвижения) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Проводки.Добавить();
			
			НоваяСтрока.Период 		= Дата;
			НоваяСтрока.Организация = Организация;
			
			НоваяСтрока["СчетДт"] 									= СчетВспомогательный;
			
			СторонаПроводкиСчетДоп = "Дт";
			ЗаполнитьСторонуВспомогательногоСчета(НоваяСтрока["Счет" + СторонаПроводкиСчетДоп]
													, НоваяСтрока["Субконто" + СторонаПроводкиСчетДоп]
													, ТекСтр
													, СчетПК
													, СоответствиеОрганизаций
													, ТекСтр.Контрагент
													, СтруктураЗаполненияСубконто);
			
			НоваяСтрока["СчетКт"] = ТекСтр.СчетДопДвижения;
			Для Н = 1 По мКоличествоСубконтоМУ Цикл
				ИмяТекСб = "Субконто" + Н; 
				Если мПроводки.Колонки.Найти(ИмяТекСб) <> Неопределено Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(НоваяСтрока.СчетКт, НоваяСтрока["СубконтоКт"], Н, ТекСтр[ИмяТекСб]);
				КонецЕсли;	
			КонецЦикла;
			
			НоваяСтрока.Содержание  = Строка(ТекСтр.Организация) + " > " + ТекСтр.Контрагент;

			НоваяСтрока.СуммаРегл  	= ТекСтр.СуммаРегл;
			НоваяСтрока.СуммаУпр    = ТекСтр.СуммаУпр;
			Если ЕстьМеждународныйУчет Тогда															 
				НоваяСтрока.СуммаМУ    = ТекСтр.СуммаМУ;
			КонецЕсли;
			
			ПротоколПроведенияДобавитьСтроку(НоваяСтрока, ТекСтр.Настройка, ТекСтр.ИсточникДанных);
			ДобавитьПроводкуСторно(Проводки, НоваяСтрока, СтруктураРес);
			
		ИначеЕсли ТекСтр.ТипАлгоритмаЭлиминации = Перечисления.бит_му_ТипыАлгоритмовЭлиминации.НереализованнаяПрибыль Тогда
			
			Если флЕстьБюдж Тогда				
				// Данный тип алгоритма не поддерживается для РБ.бит_Бюджетирование.
				Продолжить;   			
			КонецЕсли; 
			
			// Создадим проводку ДТ Вспомогательный счет КТ Счет запасов МПЗ.
			НоваяСтрока = Проводки.Добавить();
			
			НоваяСтрока.Период 		= Дата;
			НоваяСтрока.Организация = Организация;
			
			НоваяСтрока["СчетДт"] 									= СчетВспомогательный;
			
			СторонаПроводкиСчетДоп = "Дт";
			ЗаполнитьСторонуВспомогательногоСчета(НоваяСтрока["Счет" + СторонаПроводкиСчетДоп]
													, НоваяСтрока["Субконто" + СторонаПроводкиСчетДоп]
													, ТекСтр
													, СчетПК
													, СоответствиеОрганизаций);
			
			НоваяСтрока["СчетКт"] 									= ТекСтр.СчетКт;
			Для Н = 1 По мКоличествоСубконтоМУ Цикл
				ИмяТекСб = "Субконто" + Н; 
				Если мПроводки.Колонки.Найти(ИмяТекСб) <> Неопределено Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(ТекСтр.СчетКт, НоваяСтрока["СубконтоКт"], Н, ТекСтр[ИмяТекСб]);
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока.Содержание = ТекСтр.Организация;

			СуммаУпр  = 0;
			СуммаРегл = 0;
			СуммаМу   = 0;
			ЕстьРесурсУпр  = мПроводки.Колонки.Найти("СуммаУпр") <> Неопределено;
			ЕстьРесурсМу   = мПроводки.Колонки.Найти("СуммаМУ") <> Неопределено;
			ЕстьРесурсРегл = мПроводки.Колонки.Найти("СуммаРегл") <> Неопределено;
			
			ИмяРесурсаПересчет = "";
			СуммаРасчет = 0;
			Если ЕстьРесурсРегл Тогда
				СуммаРасчет        = ТекСтр.СуммаРегл; 
				ИмяРесурсаПересчет = "Регл"
			КонецЕсли; 
			Если ЕстьРесурсМу Тогда
				СуммаРасчет        = ТекСтр.СуммаМу; 
				ИмяРесурсаПересчет = "Му"
			КонецЕсли; 
			Если ЕстьРесурсУпр Тогда
				СуммаРасчет        = ТекСтр.СуммаУпр; 
				ИмяРесурсаПересчет = "Упр"
			КонецЕсли; 
			
			Если Не ПустаяСтрока(ИмяРесурсаПересчет) Тогда
				Если ЕстьРесурсРегл Тогда
					СуммаРегл = ТекСтр.СуммаРегл;
				Иначе
					СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРасчет,
																		 СтруктураКурсыВалют[ИмяРесурсаПересчет].Валюта, СтруктураКурсыВалют["Регл"].Валюта,
																		 СтруктураКурсыВалют[ИмяРесурсаПересчет].Курс, СтруктураКурсыВалют["Регл"].Курс,
																		 СтруктураКурсыВалют[ИмяРесурсаПересчет].Кратность, СтруктураКурсыВалют["Регл"].Кратность);
				КонецЕсли;
				
				Если ЕстьРесурсМу Тогда
					СуммаМу = ТекСтр.СуммаМу;
				Иначе
					СуммаМу = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРасчет,
																		 СтруктураКурсыВалют[ИмяРесурсаПересчет].Валюта, СтруктураКурсыВалют["Му"].Валюта,
																		 СтруктураКурсыВалют[ИмяРесурсаПересчет].Курс, СтруктураКурсыВалют["Му"].Курс,
																		 СтруктураКурсыВалют[ИмяРесурсаПересчет].Кратность, СтруктураКурсыВалют["Му"].Кратность);
				КонецЕсли;
				
				Если ЕстьРесурсУпр Тогда
					СуммаУпр = ТекСтр.СуммаУпр;
				Иначе
					СуммаУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРасчет,
																		 СтруктураКурсыВалют[ИмяРесурсаПересчет].Валюта, СтруктураКурсыВалют["Упр"].Валюта,
																		 СтруктураКурсыВалют[ИмяРесурсаПересчет].Курс, СтруктураКурсыВалют["Упр"].Курс,
																		 СтруктураКурсыВалют[ИмяРесурсаПересчет].Кратность, СтруктураКурсыВалют["Упр"].Кратность);
				КонецЕсли;
			КонецЕсли; 
			
			НоваяСтрока.СуммаУпр  = СуммаУпр;	
			НоваяСтрока.СуммаРегл = СуммаРегл;
			
			Если ЕстьМеждународныйУчет Тогда	
				НоваяСтрока.СуммаМУ = СуммаМУ;
			КонецЕсли;
			
			ПротоколПроведенияДобавитьСтроку(НоваяСтрока, ТекСтр.Настройка, ТекСтр.ИсточникДанных);
			ДобавитьПроводкуСторно(Проводки, НоваяСтрока, СтруктураРес);
			
			// Создадим проводку ДТ Вспомогательный счет КТ Счет доп. движения.
			Если НЕ ЗначениеЗаполнено(ТекСтр.СчетДопДвижения) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Проводки.Добавить();
			
			НоваяСтрока.Период 		= Дата;
			НоваяСтрока.Организация = Организация;
			
			НоваяСтрока["СчетДт"]   = ТекСтр.СчетДопДвижения;
			бит_му_ОбщегоНазначения.УстановитьСубконто(НоваяСтрока.СчетДт, НоваяСтрока.СубконтоДт, "НоменклатурныеГруппы", ТекСтр.Субконто1.НоменклатурнаяГруппа);
			
			НоваяСтрока["СчетКт"]   = СчетВспомогательный;
			
			СторонаПроводкиСчетДоп = "Кт";
			ЗаполнитьСторонуВспомогательногоСчета(НоваяСтрока["Счет" + СторонаПроводкиСчетДоп]
													, НоваяСтрока["Субконто" + СторонаПроводкиСчетДоп]
													, ТекСтр
													, СчетПК
													, СоответствиеОрганизаций);
			
			НоваяСтрока.Содержание = ТекСтр.Организация;

			НоваяСтрока.СуммаУпр   = СуммаУпр;
			НоваяСтрока.СуммаРегл  = СуммаРегл;
			Если ЕстьМеждународныйУчет Тогда															 
				НоваяСтрока.СуммаМУ    = СуммаМУ;
			КонецЕсли;
			
			ПротоколПроведенияДобавитьСтроку(НоваяСтрока, ТекСтр.Настройка, ТекСтр.ИсточникДанных);
			ДобавитьПроводкуСторно(Проводки, НоваяСтрока, СтруктураРес);
			
		ИначеЕсли ТекСтр.ТипАлгоритмаЭлиминации = Перечисления.бит_му_ТипыАлгоритмовЭлиминации.Простой 
			//ИЛИ ТекСтр.ТипАлгоритмаЭлиминации = Перечисления.бит_му_ТипыАлгоритмовЭлиминации.Сторно Тогда        //Inegorov
			ИЛИ ТекСтр.ТипАлгоритмаЭлиминации = Перечисления.бит_му_ТипыАлгоритмовЭлиминации.бит_НРП_ВНА  Тогда    //Inegorov

			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
			//Если ТекСтр.ТипАлгоритмаЭлиминации = Перечисления.бит_му_ТипыАлгоритмовЭлиминации.Простой Тогда
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
				// Простой тип алгоритма элиминации.
				Если мПроводки.Колонки.Найти("СуммаУпр_Дт") <> Неопределено 
					И (ЗначениеЗаполнено(ТекСтр["СуммаУпр_Дт"]) 
						//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
						//ИЛИ (ЕстьКоличество И ЗначениеЗаполнено(ТекСтр["Количество_Дт"])) 
						//ИЛИ ЗначениеЗаполнено(ТекСтр["ВалютнаяСумма_Дт"])) Тогда
						) Тогда
						//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
					СторонаПоказателей	= "Дт";	СторонаПроводкиСчетОсн	= "Кт";	СторонаПроводкиСчетДоп 	= "Дт";
				Иначе
					СторонаПоказателей	= "Кт";	СторонаПроводкиСчетОсн = "Дт";	СторонаПроводкиСчетДоп 	= "Кт";
				КонецЕсли;
				ЗнакСумм = 1;
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (	
			//Иначе
			//	// Сторно.
			//	Если мПроводки.Колонки.Найти("СуммаУпр_Дт") <> Неопределено 
			//		И (ЗначениеЗаполнено(ТекСтр["СуммаУпр_Дт"]) 
			//			ИЛИ (ЕстьКоличество И ЗначениеЗаполнено(ТекСтр["Количество_Дт"])) 
			//			ИЛИ ЗначениеЗаполнено(ТекСтр["ВалютнаяСумма_Дт"])) Тогда
			//		СторонаПоказателей = "Дт";	СторонаПроводкиСчетОсн	= "Дт";	СторонаПроводкиСчетДоп 	= "Кт";
			//	Иначе
			//		СторонаПоказателей = "Кт";	СторонаПроводкиСчетОсн = "Кт";	СторонаПроводкиСчетДоп 	= "Дт";
			//	КонецЕсли;
			//	ЗнакСумм = -1;
			//КонецЕсли;
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
			
			Если мПроводки.Колонки.Найти("СуммаУпр_" + СторонаПоказателей) = Неопределено Тогда 				
				Продолжить;				
			КонецЕсли;
			
			Если ТекСтр["СуммаУпр_" + СторонаПоказателей] = 0 Тогда 				
				Продолжить;				
			КонецЕсли;
			
			// Формируем проводку.
			НоваяСтрока = Проводки.Добавить();           
            
			НоваяСтрока.Период 		= Дата;
			НоваяСтрока.Организация = Организация;
			
			// Виды сумм для заполнения.
			СуммаСценарий = 0;
			СуммаУпр      = 0;
			СуммаРегл     = 0;
			СуммаМу       = 0;
			СуммаВалютная = 0;
			
			Если флЕстьБюдж Тогда
				СуммаСценарий = ТекСтр["СуммаСценарий_" + СторонаПоказателей] * ЗнакСумм;
				
			  	НоваяСтрока.Сценарий      = ТекСтр.Сценарий;
			  	НоваяСтрока.ЦФО           = ЦФО_Консолидирующее;
			  	НоваяСтрока.СуммаСценарий = СуммаСценарий			  
			Иначе	
				//НоваяСтрока.Организация = Организация;
			  	НоваяСтрока.Содержание  = ТекСтр.Организация;			  
			КонецЕсли; 
			
			НоваяСтрока["Счет" + СторонаПроводкиСчетОсн] = ТекСтр.Счет;
            СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекСтр.Счет);
			
			Если СвСч.Валютный Тогда
				//БИТ Тртилек в случае отсутствия валюты заполним рублем по умолчанию
				//НоваяСтрока["Валюта" + СторонаПроводкиСчетОсн] 			= ?(мПроводки.Колонки.Найти("Валюта") <> Неопределено, ТекСтр["Валюта"], Справочники.Валюты.ПустаяСсылка());
				//СуммаВалютная = ?(мПроводки.Колонки.Найти("ВалютнаяСумма_" + СторонаПоказателей) <> Неопределено, ТекСтр["ВалютнаяСумма_" + СторонаПоказателей] * ЗнакСумм, 0); 
				НоваяСтрока["Валюта" + СторонаПроводкиСчетОсн] 			= ?(ЗначениеЗаполнено(ТекСтр["Валюта"]), ТекСтр["Валюта"], ?(ТекСтр.Счет.Валютный, Справочники.Валюты.НайтиПоКоду("643"), Null));
				СуммаВалютная = ?(ЗначениеЗаполнено(ТекСтр["ВалютнаяСумма_" + СторонаПоказателей]), ТекСтр["ВалютнаяСумма_" + СторонаПоказателей], ?(ТекСтр.Счет.Валютный, ТекСтр["СуммаРегл_" + СторонаПоказателей], 0));
				///БИТ Тртилек
				НоваяСтрока["ВалютнаяСумма" + СторонаПроводкиСчетОсн] = СуммаВалютная;	
			КонецЕсли;
			
			Для Н = 1 По мКоличествоСубконтоМУ Цикл
				ИмяТекСб = "Субконто" + Н; 
				Если мПроводки.Колонки.Найти(ИмяТекСб) <> Неопределено Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(ТекСтр.Счет
																, НоваяСтрока["Субконто" + СторонаПроводкиСчетОсн]
																, Н
																, ТекСтр[ИмяТекСб]);
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока["Счет" + СторонаПроводкиСчетДоп] = СчетВспомогательный;
			
			//БИТ Тртилек 23072013 заполним валюту и валютную сумму на стороне вспомогательного счета
			Если ТекСтр.Счет.Валютный Тогда
				НоваяСтрока["Валюта" + СторонаПроводкиСчетДоп] 			= ?(ЗначениеЗаполнено(ТекСтр["Валюта"]), ТекСтр["Валюта"], Справочники.Валюты.НайтиПоКоду("643"));
				НоваяСтрока["ВалютнаяСумма" + СторонаПроводкиСчетДоп] 	= ?(ЗначениеЗаполнено(ТекСтр["ВалютнаяСумма_" + СторонаПоказателей]), ТекСтр["ВалютнаяСумма_" + СторонаПоказателей], ТекСтр["СуммаРегл_" + СторонаПоказателей]);
			КонецЕсли;
			///БИТ Тртилек
			
			ЗаполнитьСторонуВспомогательногоСчета(НоваяСтрока["Счет" + СторонаПроводкиСчетДоп]
													, НоваяСтрока["Субконто" + СторонаПроводкиСчетДоп]
													, ТекСтр
													, СчетПК
													, СоответствиеОрганизаций
													, 
													, СтруктураЗаполненияСубконто);
						
			//1c-izhtc А.В. Пушин ( 
			//СуммаРегл = ?(ТекСтр["СуммаРегл_" + СторонаПоказателей] = Неопределено, 0, ТекСтр["СуммаРегл_" + СторонаПоказателей] * ЗнакСумм);
			//СуммаУпр  = ?(ТекСтр["СуммаУпр_" + СторонаПоказателей] = Неопределено, 0, ТекСтр["СуммаУпр_" + СторонаПоказателей] * ЗнакСумм);
			//
			//НоваяСтрока.СуммаРегл = СуммаРегл;
			//НоваяСтрока.СуммаУпр  = СуммаУпр;
			Если НЕ (ТипЗнч(ТекСтр["СуммаРегл_" + СторонаПоказателей]) = Тип("Неопределено")) Тогда
				НоваяСтрока.СуммаРегл = ТекСтр["СуммаРегл_" + СторонаПоказателей] * ЗнакСумм;

			КонецЕсли;
			Если НЕ (ТипЗНЧ(ТекСтр["СуммаУпр_" + СторонаПоказателей]) = Тип("Неопределено")) Тогда
				НоваяСтрока.СуммаУпр  = ТекСтр["СуммаУпр_" + СторонаПоказателей] * ЗнакСумм;
			КонецЕсли;
			//1c-izhtc А.В. Пушин )

			//ОК+ Аверьянова 30012018 исправление после обновления релиза AT-1636831
			//Если ЕстьМеждународныйУчет Тогда
			//	ВалютаОрганизацииОстатки         = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(ТекСтр.Организация,,Ложь);
			//	ВалютаКонсолидирующейОрганизации = СтруктураКурсыВалют.МУ.Валюта;
			//	СуммаМуОстаток                   = ?(ТекСтр["СуммаМУ_" + СторонаПоказателей] = Неопределено, 0, ТекСтр["СуммаМУ_" + СторонаПоказателей] * ЗнакСумм);
			//	Если ВалютаОрганизацииОстатки <> ВалютаКонсолидирующейОрганизации Тогда
			//		СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаОрганизацииОстатки,Дата);
			//		СуммаМу  = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаМуОстаток,
			//															 ВалютаОрганизацииОстатки, СтруктураКурсыВалют["МУ"].Валюта,
			//															 СтрКурса.Курс, СтруктураКурсыВалют["МУ"].Курс,
			//															 СтрКурса.Кратность, СтруктураКурсыВалют["МУ"].Кратность);
			//	Иначе
			//		СуммаМУ = СуммаМуОстаток;
			//	КонецЕсли; 
		    //
			//	НоваяСтрока.СуммаМУ = СуммаМУ;
			//КонецЕсли;
			//ОК-
			
			// ++ BIT AMerkulov 10032014 {
			Если НоваяСтрока.СчетДт = ПланыСчетов.бит_Дополнительный_2.ПромежуточныйСчетДляКонсолидацииДДС Тогда
				НоваяСтрока.СубконтоДт.ВидыКонсолидационныхПоправок = ТекСтр.Настройка.ВидКонсолидационныхПоправок;	
				НоваяСтрока.СубконтоДт.Контрагенты					= ТекСтр.Субконто1.Ссылка;	
				
				
				Отбор = Новый Структура;
				Отбор.Вставить("Объект", ТекСтр.Организация);
				
				НайденныеСтроки = ТаблицаСобственныхКонтрагентов.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() Тогда
					НоваяСтрока.СубконтоДт.СобственнаяОрганизация 		= НайденныеСтроки[0].Контрагент;
				КонецЕсли;

			КонецЕсли;
			
			
			Если НоваяСтрока.СчетКт = ПланыСчетов.бит_Дополнительный_2.ПромежуточныйСчетДляКонсолидацииДДС Тогда
				НоваяСтрока.СубконтоКт.ВидыКонсолидационныхПоправок = ТекСтр.Настройка.ВидКонсолидационныхПоправок;	
				НоваяСтрока.СубконтоКт.Контрагенты					= ТекСтр.Субконто1.Ссылка;	
				
				Отбор = Новый Структура;
				Отбор.Вставить("Объект", ТекСтр.Организация);
				
				НайденныеСтроки = ТаблицаСобственныхКонтрагентов.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() Тогда
					НоваяСтрока.СубконтоКт.СобственнаяОрганизация 		= НайденныеСтроки[0].Контрагент;
				КонецЕсли;
				
			КонецЕсли;
			
			// }
			//+СБ Пискунова В 07.06.2016 #2486 
			//+ #2555 05.07.2016 Нужно сделать данную доработку только для определенной настройки
			Если  НоваяСтрока.СчетКт = ПланыСчетов.бит_Дополнительный_2.ПромежуточныйСчетДляКонсолидации 
				и ТекСтр.Настройка = Справочники.бит_му_НастройкиЭлиминации.НайтиПоКоду("000000054")  	Тогда
				НоваяСтрока.СубконтоКт.ВидыКонсолидационныхПоправок = ТекСтр.Настройка.ВидКонсолидационныхПоправок;				
				НоваяСтрока.СубконтоКт.СобственнаяОрганизация					= ТекСтр.Контрагент;  			
				
				Отбор = Новый Структура;
				Отбор.Вставить("Объект", ТекСтр.Организация);
				
				НайденныеСтроки = ТаблицаСобственныхКонтрагентов.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() Тогда
					НоваяСтрока.СубконтоКт.Контрагенты 		= НайденныеСтроки[0].Контрагент; 					
				КонецЕсли;
				
			КонецЕсли;
			//- #2555 05.07.2016 Нужно сделать данную доработку только для определенной настройки
			//-СБ Пискунова В 07.06.2016   #2486
			
			ПротоколПроведенияДобавитьСтроку(НоваяСтрока, ТекСтр.Настройка, ТекСтр.ИсточникДанных);
			ДобавитьПроводкуСторно(Проводки, НоваяСтрока, СтруктураРес);
			
			Если НЕ ЗначениеЗаполнено(ТекСтр.СчетДопДвижения) Тогда
				Продолжить;
			КонецЕсли;
			
			Врем = СторонаПроводкиСчетОсн; СторонаПроводкиСчетОсн = СторонаПроводкиСчетДоп; СторонаПроводкиСчетДоп = Врем;
			
			// Формируем проводку со счетом дополнительного движения.
			НоваяСтрока = Проводки.Добавить();
			
			НоваяСтрока.Период 		= Дата;
			НоваяСтрока.Организация = Организация;
			
			Если флЕстьБюдж Тогда
			  	НоваяСтрока.Сценарий      = ТекСтр.Сценарий;
			  	НоваяСтрока.ЦФО           = ЦФО_Консолидирующее;
			  	НоваяСтрока.СуммаСценарий = СуммаСценарий;			  			  
			Иначе	
				//НоваяСтрока.Организация = Организация;
			  	НоваяСтрока.Содержание  = ТекСтр.Организация;			  
			КонецЕсли; 
			
			НоваяСтрока["Счет" + СторонаПроводкиСчетОсн] = ТекСтр.Счет;
			
			Если СвСч.Валютный Тогда
				НоваяСтрока["Валюта" + СторонаПроводкиСчетОсн] 			= ?(мПроводки.Колонки.Найти("Валюта") <> Неопределено, ТекСтр["Валюта"], Справочники.Валюты.ПустаяСсылка());
				НоваяСтрока["ВалютнаяСумма" + СторонаПроводкиСчетОсн] 	= СуммаВалютная;
			КонецЕсли;
		
			Для Н = 1 По мКоличествоСубконтоМУ Цикл
				ИмяТекСб = "Субконто" + Н; 
				Если мПроводки.Колонки.Найти(ИмяТекСб) <> Неопределено Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(ТекСтр.Счет
															, НоваяСтрока["Субконто" + СторонаПроводкиСчетОсн]
															, Н
															, ТекСтр[ИмяТекСб]);
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока["Счет" + СторонаПроводкиСчетДоп] = ТекСтр.СчетДопДвижения; 
			
			НоваяСтрока.СуммаРегл  	= СуммаРегл;
			НоваяСтрока.СуммаУпр    = СуммаУпр;			
			Если ЕстьМеждународныйУчет Тогда
				НоваяСтрока.СуммаМУ   = ТекСтр["СуммаМУ_" + СторонаПоказателей] * ЗнакСумм;
			КонецЕсли;
				
			ПротоколПроведенияДобавитьСтроку(НоваяСтрока, ТекСтр.Настройка, ТекСтр.ИсточникДанных);
			ДобавитьПроводкуСторно(Проводки, НоваяСтрока, СтруктураРес);
					
		КонецЕсли;
		
	КонецЦикла;
	
	//Начало_бит_Магомедов_05.08.2013 
	//заполним вид движения
	Для Каждого ТекСтрока Из Проводки Цикл
		ТекСтрока.ВидДвиженияМСФО  = Перечисления.БИТ_ВидыДвиженияМСФО.Элиминация;
	КонецЦикла;
	//Конец_бит_Магомедов_05.08.2013 
	
	// Запишем протокол проведения.
	НоваяСтрока = Движения.бит_ПротоколВыполненияРегламентныхОпераций.Добавить();
	НоваяСтрока.Период   = Дата;
	НоваяСтрока.Протокол = Новый ХранилищеЗначения(СтруктураДляПротоколаПроведения.ДокументРезультат );

	// ++ BIT AMerkulov 31032014 /Элиминация на забалансе по ПДДС {
	КоличествоЗаписей = Проводки.Количество();
	Для Инд =0 По КоличествоЗаписей-1 Цикл
		
		Строка = Проводки[Инд];
		Если Строка.СчетДт = ПланыСчетов.бит_Дополнительный_2.ПромежуточныйСчетДляКонсолидацииДДС Тогда
			
			ДобавленнаяСтрока = Проводки.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,Строка);
			ДобавленнаяСтрока.Период = Дата;
			ДобавленнаяСтрока.СчетДт = ПланыСчетов.бит_Дополнительный_2.ПромежуточныйСчетДляКонсолидацииДДС;
			ДобавленнаяСтрока.СчетКт = Неопределено;
			ДобавленнаяСтрока.СубконтоДт.ВидыКонсолидационныхПоправок 	= Строка.СубконтоДт.ВидыКонсолидационныхПоправок;
			ДобавленнаяСтрока.СубконтоДт.Контрагенты 					= Строка.СубконтоДт.Контрагенты;
			ДобавленнаяСтрока.СубконтоДт.СобственнаяОрганизация		 	= Строка.СубконтоДт.СобственнаяОрганизация;
			
			Строка.СчетДт 		= Неопределено;
			Строка.ВалютаДт		= Неопределено; 
			Строка.ВалютнаяСуммаДт = 0;
		КонецЕсли;
		
		Если Строка.СчетКт = ПланыСчетов.бит_Дополнительный_2.ПромежуточныйСчетДляКонсолидацииДДС Тогда
			
			ДобавленнаяСтрока = Проводки.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,Строка);
			ДобавленнаяСтрока.Период = Дата;
			ДобавленнаяСтрока.СчетКт = ПланыСчетов.бит_Дополнительный_2.ПромежуточныйСчетДляКонсолидацииДДС;
			ДобавленнаяСтрока.СчетДт = Неопределено;
			ДобавленнаяСтрока.СубконтоКт.ВидыКонсолидационныхПоправок 	= Строка.СубконтоКт.ВидыКонсолидационныхПоправок;
			ДобавленнаяСтрока.СубконтоКт.Контрагенты 					= Строка.СубконтоКт.Контрагенты;
			ДобавленнаяСтрока.СубконтоКт.СобственнаяОрганизация		 	= Строка.СубконтоКт.СобственнаяОрганизация;
			
			Строка.СчетКт 		= Неопределено;
			Строка.ВалютаКт		= Неопределено; 
			Строка.ВалютнаяСуммаКт = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	// }
	
КонецПроцедуры // СформироватьПроводки()

// Процедура добавляет к таблице мПроводки таблицу значений из параметра.
// 
// Параметры:
//  ТабЗнач                - ТаблицаЗначений.
// 	ТипАлгоритмаЭлиминации - Перечисления.бит_му_ТипыАлгоритмовЭлиминации.
//  СчетДопДвижения        - Счет.
//  Настройка              - СправочникСсылка бит_му_НастройкиЭлиминации.
//  ИсточникДанных         - СправочникСсылка бит_ИсточникиДанных.
// 
Процедура ДобавитьТаблицуЗначений(ТабЗнач, ТипАлгоритмаЭлиминации, СчетДопДвижения, Настройка, ИсточникДанных)
	
	ТабЗнач.Колонки.Добавить("ТипАлгоритмаЭлиминации");
	ТабЗнач.ЗаполнитьЗначения(ТипАлгоритмаЭлиминации, "ТипАлгоритмаЭлиминации");
	
	ТабЗнач.Колонки.Добавить("СчетДопДвижения");
	ТабЗнач.ЗаполнитьЗначения(СчетДопДвижения, "СчетДопДвижения");
	
	ТабЗнач.Колонки.Добавить("Настройка");
	ТабЗнач.ЗаполнитьЗначения(Настройка, "Настройка");
	
	ТабЗнач.Колонки.Добавить("ИсточникДанных");
	ТабЗнач.ЗаполнитьЗначения(ИсточникДанных, "ИсточникДанных");
	
	Если мПроводки = Неопределено Тогда
		мПроводки = ТабЗнач;
		Возврат;
	КонецЕсли;
	
	Для каждого ТекКолонка Из ТабЗнач.Колонки Цикл
		Если мПроводки.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			мПроводки.Колонки.Добавить(ТекКолонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтр Из ТабЗнач Цикл
		НоваяСтрока = мПроводки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьТаблицуЗначений()

// Процедура проверка данных.
// 
// Параметры:
//  Отказ - Булево.
// 
Процедура ПроверитьДанныеДляПроведения(Отказ)
        	
	Если Метаданные.РегистрыБухгалтерии[ОбъектСистемы.ИмяОбъекта].Ресурсы.ВалютнаяСумма.ПризнакУчетаСубконто = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЕстьСчет  = мПроводки.Колонки.Найти("Счет") <> Неопределено;
	ЕстьВалДт = мПроводки.Колонки.Найти("ВалютнаяСумма_Дт") <> Неопределено;
	ЕстьВалКт = мПроводки.Колонки.Найти("ВалютнаяСумма_Кт") <> Неопределено;
	Если ЕстьСчет И (ЕстьВалДт ИЛИ ЕстьВалКт) Тогда

		КолонкиДляПроверки = "Счет" 
			+ ?(ЕстьВалДт, ", ВалютнаяСумма_Дт", "")
			+ ?(ЕстьВалКт, ", ВалютнаяСумма_Кт", "");
		
		ТаблицаПроверки = мПроводки.Скопировать(, КолонкиДляПроверки);
		ТаблицаПроверки.Свернуть(КолонкиДляПроверки);
		Для каждого ТекСтр Из ТаблицаПроверки Цикл
			
			ТекущийСчет = ТекСтр.Счет;
			Если Не ЗначениеЗаполнено(ТекущийСчет) Тогда
				Продолжить;			
			КонецЕсли;
            
            СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущийСчет);
            
			Если СвСч.Валютный 
				И((ЕстьВалДт И ТекСтр.ВалютнаяСумма_Дт <> 0) ИЛИ (ЕстьВалКт И ТекСтр.ВалютнаяСумма_Кт <> 0)) Тогда
							
				// Проверим субконто.
				Для каждого ВидСубконто Из ТекущийСчет.ВидыСубконто Цикл
					
					Если Не ВидСубконто.Валютный Тогда
						ТекстСообщения = Нстр("ru = 'Для субконто счета %1% не установлены валютные признаки.'");
						ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекущийСчет);						 
						бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
						Отказ = Истина;				
						Прервать;
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры // ПроверитьДанныеДляПроведения()

#КонецОбласти

#Область ПротоколПроведения

// Функция возвращает значение субконто.
// 
Функция ПолучитьСубконто(Счет, Субконто, Номер)

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Если СвСч.КоличествоСубконто < Номер Тогда
		Возврат Неопределено;
	КонецЕсли;
	
    Возврат Субконто[СвСч["ВидСубконто" + Номер]];
	
КонецФункции // ПолучитьСубконто()

// Процедура выполняет заполнение параметров области.
// 
// Параметры:
//  Область - Область табличного документа, с параметрами для заполнения.
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
//  МассивРесурсов         - Массив.
//  ТекстОкончаниеРесурсов - Строка.
// 
//  НачИмяПараметра        - Строка, начальное имя параметра области,
//                           по умолчанию "Сумма".
//  СоотвИменПараметров    - Соответствие, Состав: Ключ     - окончание ресурса,
//                                                 Значение - имя параметра области,
//                           по умолчанию "Сумма".
// 
//  ОтображатьНулевыеЗначения - Булево, если значение равно нулю, тогда пишется "0,00",
//                              по умолчанию Ложь.
// 
Процедура ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(Область, Выборка, МассивРесурсов, ТекстОкончаниеРесурсов, 
                                                              НачИмяПараметра = "Сумма", СоотвИменПараметров = Неопределено,
                                                              ОтображатьНулевыеЗначения = Ложь) Экспорт

    СтруктураОкончаний = Новый Структура(ТекстОкончаниеРесурсов);
    
    Для Каждого КлючЗначение Из СтруктураОкончаний Цикл
        
        ТекстСумма   = "";
        ТекОкончание = КлючЗначение.Ключ;
        
        Для Каждого ТекРесурс Из МассивРесурсов Цикл
            
            ТекСумма = Выборка[ТекРесурс + ?(ТекОкончание = "ПустойКлюч", "", ТекОкончание)];
            
            Если ОтображатьНулевыеЗначения Тогда
                СтрокаСумма = ?(ТекСумма <> 0, Формат(ТекСумма, "ЧЦ=15; ЧДЦ=2"), "0,00");
            Иначе
                СтрокаСумма = Формат(ТекСумма, "ЧЦ=15; ЧДЦ=2");
            КонецЕсли;
                
            ТекстСумма = ТекстСумма + ?(ПустаяСтрока(ТекстСумма), "", Символы.ПС) + СтрокаСумма;
            
        КонецЦикла;
        
        Если СоотвИменПараметров = Неопределено Тогда
            Область.Параметры[НачИмяПараметра + ТекОкончание] = ТекстСумма;
        Иначе
            Область.Параметры[СоотвИменПараметров.Получить(ТекОкончание)] = ТекстСумма
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры // ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов()

// Процедура добавляет строку в протокол проведения.
// 
// Параметры:
//  Проводка       - Строка движений.
//  Настройка      - СправочникСсылка бит_му_НастройкиЭлиминации.
//  ИсточникДанных - СправочникСсылка бит_ИсточникиДанных.
// 
Процедура ПротоколПроведенияДобавитьСтроку(Проводка, Настройка, ИсточникДанных)
 
	ОблСтрока 			= СтруктураДляПротоколаПроведения.ОблСтрока;
	ОблСтрокаСубконто 	= СтруктураДляПротоколаПроведения.ОблСтрокаСубконто;
	ОблСтрокаКоличество = СтруктураДляПротоколаПроведения.ОблСтрокаКоличество;
	ОблСтрокаВалюта		= СтруктураДляПротоколаПроведения.ОблСтрокаВалюта;
	
	МассивПоказателей 	= СтруктураДляПротоколаПроведения.МассивПоказателей;
	ДокументРезультат 	= СтруктураДляПротоколаПроведения.ДокументРезультат;
	
	Линия 		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияЖирная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	 
	ОблСтрока.Параметры.Заполнить(Проводка);
	
	ОблСтрока.Параметры.Настройка 		= Настройка;
	ОблСтрока.Параметры.ИсточникДанных 	= ИсточникДанных;
	
	СоотвИменПараметров = Новый Соответствие;
	СоотвИменПараметров.Вставить("ПустойКлюч", "Сумма");
	
	// Заполним параметры области, вывели старые обороты. 
	ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОблСтрока, Проводка, МассивПоказателей, 
																				"ПустойКлюч",, СоотвИменПараметров);
    
    СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
    СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
    
	ОблСтрока.Параметры.СубконтоДт  = ПолучитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1);
	ОблСтрока.Параметры.СубконтоКт  = ПолучитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1);
	ДокументРезультат.Вывести(ОблСтрока, 1);
	
	УжеВыведено = 1;
	
	НачалоСекции = ДокументРезультат.ВысотаТаблицы;
		
	КолвоСубконтоДт = СвСчДт.КоличествоСубконто;
	КолвоСубконтоКт = СвСчКт.КоличествоСубконто;
		
	КолвоСтрокСубконто = Макс(КолвоСубконтоДт, КолвоСубконтоКт);
		
	ЕстьВалюта = СвСчДт.Валютный  	   Или СвСчКт.Валютный;
	ЕстьКолво  = СвСчДт.Количественный Или СвСчКт.Количественный;
		
	КолвоСтрокПрочих = 1 + ?(ЕстьВалюта, 1, 0) + ?(ЕстьКолво, 1, 0);
		
	ВыводитьСтрокСубконто = КолвоСтрокСубконто - КолвоСтрокПрочих;
	ВсегоСтрок = Макс(КолвоСтрокСубконто, КолвоСтрокПрочих);
		
	Если УжеВыведено < ВсегоСтрок Тогда
		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
	КонецЕсли;
		
	Для н = 1 По ВыводитьСтрокСубконто Цикл
		
		ОблСтрокаСубконто.Параметры.СубконтоДт  = ПолучитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1+н);
		ОблСтрокаСубконто.Параметры.СубконтоКт  = ПолучитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1+н);
			
		ДокументРезультат.Вывести(ОблСтрокаСубконто, 1);
			
		УжеВыведено = УжеВыведено + 1;
			
		Если УжеВыведено<ВсегоСтрок Тогда
			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
		КонецЕсли;
			
	КонецЦикла;
		
	Если ЕстьКолво Тогда
			
		ОблСтрокаКоличество.Параметры.КоличествоДт = Проводка.КоличествоДт;
		ОблСтрокаКоличество.Параметры.КоличествоКт = Проводка.КоличествоКт;
		ОблСтрокаКоличество.Параметры.СубконтоДт  = ПолучитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, УжеВыведено+1);
		ОблСтрокаКоличество.Параметры.СубконтоКт  = ПолучитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, УжеВыведено+1);
			
		ДокументРезультат.Вывести(ОблСтрокаКоличество, 1);
			
		УжеВыведено = УжеВыведено + 1;
			
		Если УжеВыведено<ВсегоСтрок Тогда
			ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
		КонецЕсли;
			
	КонецЕсли;
		
	Если ЕстьВалюта Тогда
			
		ОблСтрокаВалюта.Параметры.ВалютнаяСуммаДт = Проводка.ВалютнаяСуммаДт;
		ОблСтрокаВалюта.Параметры.ВалютнаяСуммаКт = Проводка.ВалютнаяСуммаКт;
			
		ОблСтрокаВалюта.Параметры.ВалютаДт = Проводка.ВалютаДт;
		ОблСтрокаВалюта.Параметры.ВалютаКт = Проводка.ВалютаКт;
			
		ОблСтрокаВалюта.Параметры.СубконтоДт  = ПолучитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, УжеВыведено+1);
		ОблСтрокаВалюта.Параметры.СубконтоКт  = ПолучитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, УжеВыведено+1);
			
		ДокументРезультат.Вывести(ОблСтрокаВалюта, 1);
			
	КонецЕсли;
	
	ОбвестиОбластиОтчета(ДокументРезультат, НачалоСекции, Линия, ЛинияЖирная);
	
КонецПроцедуры // ПротоколПроведенияДобавитьСтроку()

// Процедура подготавливает структуру для формирования протокола проведения.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
// 
Процедура ПодготовитьСтруктуруДляПротоколаПроведения()
	
	СтруктураДляПротоколаПроведения = Новый Структура;
	
	Макет = ПолучитьМакет("МакетПротоколПроведения");
	
    СтруктураДляПротоколаПроведения.Вставить("МассивПоказателей", СформироватьМассивПоказателей());
	
	СтруктураДляПротоколаПроведения.Вставить("ДокументРезультат", Новый ТабличныйДокумент);
	
	СтруктураДляПротоколаПроведения.Вставить("ОбластьШапки", 		Макет.ПолучитьОбласть("Шапка"));
	СтруктураДляПротоколаПроведения.ДокументРезультат.Вывести(СтруктураДляПротоколаПроведения.ОбластьШапки, 1);
	
	СтруктураДляПротоколаПроведения.Вставить("ОблСтрока", 			Макет.ПолучитьОбласть("Строка"));
	СтруктураДляПротоколаПроведения.Вставить("ОблСтрокаСубконто",   Макет.ПолучитьОбласть("СтрокаСубконто"));
	СтруктураДляПротоколаПроведения.Вставить("ОблСтрокаКоличество", Макет.ПолучитьОбласть("СтрокаКоличество"));
	СтруктураДляПротоколаПроведения.Вставить("ОблСтрокаВалюта", 	Макет.ПолучитьОбласть("СтрокаВалюта"));

КонецПроцедуры // ПодготовитьСтруктуруДляПротоколаПроведения()

#КонецОбласти

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ 			= 4;
мПроводки 			  			= Неопределено;
СтруктураДляПротоколаПроведения = Неопределено;

#КонецОбласти

#КонецЕсли
