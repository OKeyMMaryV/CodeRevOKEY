
#Область ОписаниеПеременных

&НаКлиенте
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы.

#КонецОбласти  

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		СтруктураЗаполнения = Параметры.ЗначенияЗаполнения; 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-27 (#2925)
		Если Параметры.Свойство("ОтправитьСсылкуПриЗакрытии") Тогда
			ок_ОтправитьСсылкуПриЗакрытии = Истина;
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-27 (#2925)
		Если ЗначениеЗаполнено(СтруктураЗаполнения) И СтруктураЗаполнения.Свойство("РегистрБухгалтерии") Тогда
			// Установка регистра бухгалтерии.
			Объект.РегистрБухгалтерии = СтруктураЗаполнения.РегистрБухгалтерии;
		КонецЕсли;
		
	КонецЕсли;
	
	//1c-izhtc spawn (
	Если Параметры.Свойство("бит_ЗагрузкаИзExcel") Тогда
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.бит_ЗагрузкаИзExcel);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных);
		Объект.Движения.бит_Дополнительный_2.Загрузить(СтруктураДанных.ТаблицаПроводок);
	КонецЕсли;
	//1c-izhtc spawn )
	
	фКоличествоСубконтоБУ = 4;
		
	ИзменениеРегистраБухгалтерииСервер(Истина);
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	ЗаполнитьКэшЗначений();
	
	УстановитьВидимостьДоступность();
	
	// Заполнение валюты международного учета.
	ПолучитьВалютуМСФО(Объект.Организация, фИмяРегистраБухгалтерии);
	 		
	// Установка текущей строки движения.	
	бит_БухгалтерскиеОтчетыСервер.УстановитьТекущуюСтрокуТаблицыДвиженийДокумента(Элементы, Параметры);
	
	ЗаголовокПроводкиДоп2 = ?(бит_ОбщегоНазначения.ЕстьОбъектыМСФО()
															, "Проводки (Журнал проводок (международный))"
															, "Проводки (Журнал проводок (дополнительный 2))");
	Элементы.Страница_бит_Дополнительный_2.Заголовок 	   = ЗаголовокПроводкиДоп2;
	Элементы.Страница_бит_Дополнительный_2.Подсказка 	   = ЗаголовокПроводкиДоп2;
	
	УстановитьПараметрыВыбораДляСчетов();
    	
	// Получим дату открытого периода.
	ПолучитьДатуОткрытогоПериода();
	
	//БИТ Тртилек 12.02.2013 добавим дату открытого документа, чтобы отслеживать ее изменения
	ДатаОткрытогоДокумента = Объект.Дата;
	///БИТ Тртилек
	
	//БИТ Тртилек 01112013
	УстановитьВидимостьМУ();
	///БИТ Тртилек
	
	ИзменениеВидаОперацииСервер(Истина); //1c-izhtc spawn 06.08.15
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Дата");
	мКэшРеквизитовФормы.Вставить("РегистрБухгалтерии");
	мКэшРеквизитовФормы.Вставить("Организация");
	мКэшРеквизитовФормы.Вставить("ДатаСторно");
	мКэшРеквизитовФормы.Вставить("ВидОперации"); //1c-izhtc spawn 06.08.15
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();	                               
	
	// Если в форме списка есть отбор по регистру бухгалтерии
	// , то нужно закрыть для редактирования соответствующий элемент текущей формы.
	Попытка
		ЕстьОтборПоРегиструБухгалтерии = ЗначениеЗаполнено(ЭтаФорма.ВладелецФормы.Родитель.РегистрБухгалтерииОтбор);	
	Исключение
	    ЕстьОтборПоРегиструБухгалтерии = Ложь;
	КонецПопытки;
	Если ЕстьОтборПоРегиструБухгалтерии Тогда	
		Элементы.РегистрБухгалтерии.ТолькоПросмотр = Истина;	
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ВыбранноеЗначение, "РезультатПолученияДанных") Тогда
		
		Если ВыбранноеЗначение.Режим = "Заполнить" 
			И Объект.Движения[фИмяРегистраБухгалтерии].Количество() > 0 Тогда 
			
			// В режиме заполнения существующие данные следует очистить.
			
            ДопПараметры = Новый Структура;
            ДопПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			бит_РаботаСДиалогамиКлиент.ЗапросПодтвержденияОчисткиДанных(ЭтаФорма, ДопПараметры);
            
        Иначе
            
            ЗаполнитьДвиженияПоВыбраннымДанным(ВыбранноеЗначение, Ложь);
            
		КонецЕсли; // Режим заполнения.	
				
	КонецЕсли;
	       	
КонецПроцедуры // ОбработкаВыбора()
            
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "бит_ПереносОстатков" И Источник = ЭтаФорма Тогда
		
		ОбработкаПереносОстатков(Параметр);	
		
	КонецЕсли;	
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УстановитьВидимостьДоступность();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СсылкаДатаСторно = ТекущийОбъект.ДатаСторно;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	//***БИТ***Теплова***(2012.04.16
	Если НЕ РольДоступна("бит_му_ПолныеПрава") Тогда
		ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ТекущийОбъект.ПометкаУдаления Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров); 
		
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
		
	КонецЕсли;

	СсылкаДатаСторно = ТекущийОбъект.ДатаСторно;
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры
    
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
                      	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Объект.ДатаСторно) И Объект.ДатаСторно < фДатаОткрытогоПериода Тогда
		ТекстСообщения = НСтр("ru = 'Дата сторно не может быть меньше даты открытого периода.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ДатаСторно", "Объект.ДатаСторно", Отказ);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ОперацияУправленческий";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление(
	Если СообщитьПредупреждение Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Указанные проводки следует проводить специализированными документами! Записать ручную операцию?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	//ОК+ Аврьянова 18.03.2016 если документ новый, то не проверяем дату
	Если ЭтаФорма.Объект.Ссылка.пустая() Тогда
		Возврат;
	КонецЕсли;
	//ОК-
	
	Если ЗначениеЗаполнено(Объект.ДатаСторно) И Объект.Дата > Объект.ДатаСторно Тогда
		ТекстСообщения = НСтр("ru = 'Дата документа не может быть больше даты сторно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Дата", "Объект.Дата");
		Объект.Дата = мКэшРеквизитовФормы.Дата;
	Иначе
		Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
			Для каждого СтрокаТЧ Из Объект.Движения[фИмяРегистраБухгалтерии] Цикл
				Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидПроводки) И СтрокаТЧ.Период <> Объект.ДатаСторно Тогда
					СтрокаТЧ.Период = Объект.Дата;
				КонецЕсли; 
			КонецЦикла;	
			
			ИзменениеДатыСервер();
			
			//БИТ Тртилек 08.02.2013
			//проверим и при необходимости пересчитаем суммы(при смене курса валют)
			ТекущийРБ   = фИмяРегистраБухгалтерии;
			Пересчитать = Ложь;
			ПроверитьСуммыПриСменеКурса(Объект.Дата, ДатаОткрытогоДокумента, Объект.Движения[фИмяРегистраБухгалтерии], Пересчитать);
			
			Если Пересчитать = Истина Тогда
				Для Каждого Строка Из Объект.Движения[фИмяРегистраБухгалтерии] Цикл
					
					СинхронизацияВалютныхСуммДт(Строка);
					Если ЗначениеЗаполнено(Строка.ВалютаДт) Тогда
						// Выполним расчет сумм в текущей строке.
						ВыполнитьРасчетСуммВТекущейСтроке(Строка, Строка.ВалютаДт, Строка.ВалютнаяСуммаДт);
					КонецЕсли;
					
					СинхронизацияВалютныхСуммКт(Строка);
					Если ЗначениеЗаполнено(Строка.ВалютаКт) Тогда
						// Выполним расчет сумм в текущей строке.
						ВыполнитьРасчетСуммВТекущейСтроке(Строка, Строка.ВалютаКт, Строка.ВалютнаяСуммаКт);
					КонецЕсли;
					
				КонецЦикла;
				
				ДатаОткрытогоДокумента = Объект.Дата;
				
			КонецЕсли;
			
			ПересчитатьСуммуОперации();
			///БИТ Тртилек
			
			ДобавитьВКэш("Дата");
		КонецЕсли; 
	КонецЕсли; 
		
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ТипПроводокПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаСторно) Тогда
		ТипПроводок = ?(ЗначениеЗаполнено(Объект.ТипПроводок), 
					Объект.ТипПроводок, 
					ПредопределенноеЗначение("Справочник.бит_ТипыПроводок.ПараллельныйУчет"));
		Для каждого СтрокаТЧ Из Объект.Движения[фИмяРегистраБухгалтерии] Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидПроводки) Тогда
				СтрокаТЧ.ТипПроводки = ТипПроводок;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(фКэшЗначений.ВидОбъектаРегистрБухгалтерии);	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Объект.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", фКэшЗначений.СписокДоступныхРегистров);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);	
	
КонецПроцедуры // РегистрБухгалтерииНачалоВыбора()

&НаКлиенте
Процедура РегистрБухгалтерииПриИзменении(Элемент)
	
	ИзмененРегистрБухгалтерии = Истина;
	СтарыйРегистрБухгалтерии = мКэшРеквизитовФормы.РегистрБухгалтерии;
	
	Если Объект.РегистрБухгалтерии <> СтарыйРегистрБухгалтерии Тогда
		
		Если фИмяРегистраБухгалтерии <> "" И Объект.Движения[фИмяРегистраБухгалтерии].Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru = 'Текущие движения документа будут очищены. Продолжить?'");
			ОповещениВопрос = Новый ОписаниеОповещения("ВопросРегистрБухгалтерииПриИзменении", ЭтотОбъект, ИзмененРегистрБухгалтерии);
			
			ПоказатьВопрос(ОповещениВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
			
		Иначе
			
			Если ИзмененРегистрБухгалтерии Тогда
					
				ИзменениеРегистраБухгалтерииСервер();
				ДобавитьВКэш("РегистрБухгалтерии");
							
				УстановитьЗаголовокФормыДокумента();
				
			Иначе
				
				ИзвлечьИзКэша("РегистрБухгалтерии");
				
			КонецЕсли;

		КонецЕсли;
				
	КонецЕсли;	
	
КонецПроцедуры // РегистрБухгалтерииПриИзменении()
 
&НаКлиенте
Процедура ВопросРегистрБухгалтерииПриИзменении(Ответ, ИзмененРегистрБухгалтерии) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ИзмененРегистрБухгалтерии = Ложь;
   	КонецЕсли;

	Если ИзмененРегистрБухгалтерии Тогда
					
		ИзменениеРегистраБухгалтерииСервер();
		ДобавитьВКэш("РегистрБухгалтерии");
					
		УстановитьЗаголовокФормыДокумента();
		
	Иначе
		
		ИзвлечьИзКэша("РегистрБухгалтерии");
		
	КонецЕсли;

КонецПроцедуры // ВопросРегистрБухгалтерииПриИзменении()

&НаКлиенте
Процедура РегистрБухгалтерииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // РегистрБухгалтерииОчистка()

&НаКлиенте
Процедура РегистрБухгалтерииОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // РегистрБухгалтерииОткрытие()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтараяОрганизация = мКэшРеквизитовФормы.Организация;
	СтараяВалютаМСФО  = фКэшЗначений.ВалютаМСФО;

	НоваяОрганизация = Объект.Организация;
	НоваяВалютаМСФО  = ПолучитьВалютуМСФО(НоваяОрганизация, фИмяРегистраБухгалтерии);
	                   		
	ИзменитьОрганизацию = Истина;
	ПересчитыватьСуммы 	= Ложь;
	
	Если НоваяОрганизация = СтараяОрганизация Тогда
		Возврат;
	КонецЕсли;
			
	Если ЗначениеЗаполнено(фИмяРегистраБухгалтерии) 
		И Объект.Движения[фИмяРегистраБухгалтерии].Количество() > 0 Тогда
		
		ТекстВопроса = "Изменилась организация";
		 			
		Если фКэшЗначений.ЕстьОбъектыМСФО И фИмяРегистраБухгалтерии = "бит_Дополнительный_2" Тогда
			
			НоваяВалютаМСФО = ПолучитьВалютуМСФО(НоваяОрганизация, фИмяРегистраБухгалтерии);
			Если НоваяВалютаМСФО <> фКэшЗначений.ВалютаМСФО Тогда
				ТекстВопроса = ТекстВопроса + " и валюта МСФО";
				ПересчитыватьСуммы = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИзменитьОрганизацию", ИзменитьОрганизацию);
		ДопПараметры.Вставить("СтараяВалютаМСФО"   , СтараяВалютаМСФО);
        ДопПараметры.Вставить("НоваяВалютаМСФО"    , НоваяВалютаМСФО);
        ДопПараметры.Вставить("ПересчитыватьСуммы" , ПересчитыватьСуммы);

		ТекстВопроса = НСтр("ru = '. Будут изменены данные табличной части. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОрганизацияПриИзменении", ЭтотОбъект, ДопПараметры);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		Если ИзменитьОрганизацию Тогда 			
			ДобавитьВКэш("Организация");
			фКэшЗначений.ВалютаМСФО = НоваяВалютаМСФО;
			ИзменениеОрганизацииСервер(ПересчитыватьСуммы, СтараяВалютаМСФО);
		Иначе	
			ИзвлечьИзКэша("Организация");
		КонецЕсли;

	КонецЕсли;
				
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ВопросОрганизацияПриИзменении(Ответ, ДопПараметры) Экспорт

	ИзменитьОрганизацию = ДопПараметры.ИзменитьОрганизацию;
	СтараяВалютаМСФО    = ДопПараметры.СтараяВалютаМСФО;
    НоваяВалютаМСФО     = ДопПараметры.НоваяВалютаМСФО;
    ПересчитыватьСуммы  = ДопПараметры.ПересчитыватьСуммы;

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ИзменитьОрганизацию = Ложь;			  
	КонецЕсли;

	Если ИзменитьОрганизацию Тогда 			
		ДобавитьВКэш("Организация");
		фКэшЗначений.ВалютаМСФО = НоваяВалютаМСФО;
		ИзменениеОрганизацииСервер(ПересчитыватьСуммы, СтараяВалютаМСФО);
	Иначе	
		ИзвлечьИзКэша("Организация");
	КонецЕсли;

КонецПроцедуры // ВопросОрганизацияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДвижения

&НаКлиенте
Процедура ДвиженияБитПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТипПроводок = ?(ЗначениеЗаполнено(Объект.ТипПроводок), 
					Объект.ТипПроводок, 
					ПредопределенноеЗначение("Справочник.бит_ТипыПроводок.ПараллельныйУчет"));
					
	ТекущиеДанные = Элементы["Движения" + фИмяРегистраБухгалтерии].ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда
		ТекущиеДанные.Период  = Объект.Дата;
	КонецЕсли; 
	ТекущиеДанные.Организация = Объект.Организация;
    ТекущиеДанные.ТипПроводки = ТипПроводок;
	
	Если Копирование Тогда
		// Для корректной работы механизма закрытого периода.
		ТекущиеДанные.ВидПроводки = Неопределено;
		ТекущиеДанные.ДатаФормирования = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияБитПриНачалеРедактирования()

&НаКлиенте
Процедура Движениябит_Дополнительный_1ПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Движениябит_Дополнительный_1.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПроводкуНаСторно(ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Движениябит_Дополнительный_2ПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Движениябит_Дополнительный_2.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПроводкуНаСторно(ТекущиеДанные, Отказ);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВидПроводки) И Не РазрешеноИзменениеПроводокЗакрытогоПериода(Объект.Ссылка) Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазрешеноИзменениеПроводокЗакрытогоПериода(ОбъектСсылка)
	Возврат бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(ОбъектСсылка,
		                                   	ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ОтразитьВЗакрытомПериоде, Ложь);
КонецФункции 

											
&НаКлиенте
Процедура Движениябит_Дополнительный_3ПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Движениябит_Дополнительный_3.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПроводкуНаСторно(ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Движениябит_Дополнительный_4ПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Движениябит_Дополнительный_4.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПроводкуНаСторно(ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Движениябит_Дополнительный_5ПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Движениябит_Дополнительный_5.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПроводкуНаСторно(ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБитСчетПриИзменении(Элемент)

	ТекущиеДанные = Элементы["Движения" + фИмяРегистраБухгалтерии].ТекущиеДанные;  	
	
	ИзменениеСчетаТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор(), Прав(Элемент.Имя, 2));
	
КонецПроцедуры // ДвиженияБитСчетПриИзменении()

&НаКлиенте
Процедура ДвиженияБитСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы["Движения" + фИмяРегистраБухгалтерии].ТекущиеДанные;
	
	ИмяСубконто       = Прав(Элемент.Имя, 11);	
	ЗначениеСубконто  = ТекущиеДанные[ИмяСубконто];	
	
	НачалоВыбораСубконтоБУ(Элемент, СтандартнаяОбработка, ТекущиеДанные, ЗначениеСубконто, ИмяСубконто);
	
КонецПроцедуры // ДвиженияБитСубконтоНачалоВыбора()

&НаКлиенте
Процедура ДвиженияБитСубконтоПриИзменении(Элемент)

	ТекущиеДанные = Элементы["Движения" + фИмяРегистраБухгалтерии].ТекущиеДанные;
	
	ИмяСубконто = Прав(Элемент.Имя, 11);
	ЗначениеСубконто  = ТекущиеДанные[ИмяСубконто];
	
	ИзменениеСубконтоБУ(ТекущиеДанные, ЗначениеСубконто, ИмяСубконто);
	
КонецПроцедуры // ДвиженияБитСубконтоПриИзменении()

&НаКлиенте
Процедура ДвиженияБитСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СубконтоБУАвтоПодбор(Элемент, Параметры);
	
КонецПроцедуры


&НаКлиенте
Процедура ДвиженияБитВалютаДтПриИзменении(Элемент)

	ТекущиеДанные = Элементы["Движения" + фИмяРегистраБухгалтерии].ТекущиеДанные;	
		
	ИзменениеВалютыТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор(), "Дт");
	
	//***БИТ***Теплова***(2012.04.09
	СинхронизацияВалютныхСуммДт(ТекущиеДанные);
	//***БИТ***Теплова***)
	
КонецПроцедуры // ДвиженияБитВалютаДтПриИзменении()

&НаКлиенте
Процедура ДвиженияБитВалютаКтПриИзменении(Элемент)

	ТекущиеДанные = Элементы["Движения" + фИмяРегистраБухгалтерии].ТекущиеДанные;
		
	ИзменениеВалютыТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор(), "Кт");
	
	//***БИТ***Теплова***(2012.04.09
	СинхронизацияВалютныхСуммКт(ТекущиеДанные);
	//***БИТ***Теплова***)
	
КонецПроцедуры // ДвиженияБитВалютаКтПриИзменении()

&НаКлиенте
Процедура ДвиженияБитСуммаМуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы["Движения" + фИмяРегистраБухгалтерии].ТекущиеДанные;
		
	ИзменениеСуммыТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор(), "ИзменениеМУСуммы");
	
КонецПроцедуры // ДвиженияБитСуммаМуПриИзменении()
    
&НаКлиенте
Процедура ДвиженияБитСуммаУпрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы["Движения" + фИмяРегистраБухгалтерии].ТекущиеДанные;
		
	ИзменениеСуммыТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор(), "ИзменениеУпрСуммы");
	
КонецПроцедуры // ДвиженияБитСуммаУпрПриИзменении()

&НаКлиенте
Процедура ДвиженияБитСуммаРеглПриИзменении(Элемент)

	ТекущиеДанные = Элементы["Движения" + фИмяРегистраБухгалтерии].ТекущиеДанные;
		
	ИзменениеСуммыТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор(), "ИзменениеРеглСуммы");
	
КонецПроцедуры // ДвиженияБитСуммаРеглПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаСохранитьШаблон(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоЗаполнениеИзДокументаОперации", Истина);
	СтруктураПараметров.Вставить("РегистрБухгалтерии"			   , Объект.РегистрБухгалтерии);
	СтруктураПараметров.Вставить("ИмяРегистра"			           , фИмяРегистраБухгалтерии);
	СтруктураПараметров.Вставить("Организация"    				   , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДок"      			       , Объект.Дата);
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ. Записать?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("СохранитьШаблонПродолжение", ЭтотОбъект, СтруктураПараметров);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);
		
	Иначе
		
		СоздатьШаблонПроводокКлиент(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры // КомандаСохранитьШаблон()

&НаКлиенте
Процедура КомандаСохранитьШаблонНовый(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоЗаполнениеИзДокументаОперации", Истина);
	СтруктураПараметров.Вставить("РегистрБухгалтерии"			   , Объект.РегистрБухгалтерии);
	СтруктураПараметров.Вставить("ИмяРегистра"			           , фИмяРегистраБухгалтерии);
	СтруктураПараметров.Вставить("ВидДокумента"                    , ОпределитьРегистрБухгалтерииВидДокумента("ВидДокумента"));
	СтруктураПараметров.Вставить("Организация"    				   , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДок"      			       , Объект.Дата);
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ. Записать?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("СохранитьШаблонНовыйПродолжение", ЭтотОбъект, СтруктураПараметров);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);
		
	Иначе
		
		СоздатьШаблонПроводокНовыйКлиент(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоШаблонуДобавить(Команда)
	
	КомандаЗаполнитьПоШаблонуКлиент("Добавить");
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоШаблонуЗагрузить(Команда)
	
	КомандаЗаполнитьПоШаблонуКлиент("Загрузить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереключитьАктивность(Команда)
	
	ОчиститьСообщения();
	ПереключитьАктивностьПроводок();
	
	Модифицированность = Истина;
	
КонецПроцедуры // КомандаПереключитьАктивность()

&НаКлиенте
Процедура КомандаЗаполнить(Кнопка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭтоЗаполнениеИзДокументаОперации", Истина);
	ПараметрыФормы.Вставить("ОбъектСистемы"				      , Объект.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("Организация"    				  , Объект.Организация);
	ПараметрыФормы.Вставить("ДатаДок"      			          , Объект.Дата);
	ПараметрыФормы.Вставить("Режим"        				 	  , "Одиночный");
	
	ОткрытьФорму("Обработка.бит_ПолучениеДанныхРегистровБухгалтерии.Форма.ФормаУправляемая", ПараметрыФормы, ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
Процедура КомандаЗаполнитьОстатки(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
	
		ТекстСообщения = Нстр("ru = 'Для заполнения остатков выберете Организацию!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			 
		Возврат;
		
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РегистрПриемник"	, Объект.РегистрБухгалтерии);
	СтруктураПараметров.Вставить("Организация"		, Объект.Организация);
	СтруктураПараметров.Вставить("Дата"				, Объект.Дата);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПараметров",	СтруктураПараметров);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.бит_ПолучениеОстатковРегистровБухгалтерии.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСторноПоПравиламТрансляции(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли; 
	
	СтандартныйПериод = Новый СтандартныйПериод(НачалоМесяца(Объект.Дата), КонецМесяца(Объект.Дата));
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = СтандартныйПериод;
	Диалог.Показать(Новый ОписаниеОповещения("ЗаполнитьСторноПоПравиламТрансляцииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСторноПоПравиламТрансляцииЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		ЗаполнитьСторноПоПравиламТрансляцииНаСервере(Период);
		Модифицированность = Истина;
	КонецЕсли; 	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.Движениябит_Дополнительный_1СчетДт);
	МассивЭлементов.Добавить(Элементы.Движениябит_Дополнительный_1СчетКт);
	МассивЭлементов.Добавить(Элементы.Движениябит_Дополнительный_2СчетДт);
	МассивЭлементов.Добавить(Элементы.Движениябит_Дополнительный_2СчетКт);
	МассивЭлементов.Добавить(Элементы.Движениябит_Дополнительный_3СчетДт);
	МассивЭлементов.Добавить(Элементы.Движениябит_Дополнительный_3СчетКт);
	МассивЭлементов.Добавить(Элементы.Движениябит_Дополнительный_4СчетДт);
	МассивЭлементов.Добавить(Элементы.Движениябит_Дополнительный_4СчетКт);
	МассивЭлементов.Добавить(Элементы.Движениябит_Дополнительный_5СчетДт);
	МассивЭлементов.Добавить(Элементы.Движениябит_Дополнительный_5СчетКт);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ЕстьОбъектыМСФО", бит_ОбщегоНазначения.ЕстьОбъектыМСФО());
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
	
	фКэшЗначений.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	фКэшЗначений.Вставить("ВалютаУпрУчета" , Константы.бит_ВалютаУправленческогоУчета.Получить());
	фКэшЗначений.Вставить("ВалютаМСФО"     , ПолучитьВалютуМСФО(Объект.Организация, фИмяРегистраБухгалтерии));
	    
	КоличествоСубконто = ?(фИмяРегистраБухгалтерии = "", 0, Метаданные.РегистрыБухгалтерии[фИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто);
	фКэшЗначений.Вставить("КоличествоСубконто", КоличествоСубконто);
	
	фКэшЗначений.Вставить("ВидОбъектаРегистрБухгалтерии", Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	фКэшЗначений.Вставить("СписокДоступныхРегистров"    , бит_БухгалтерскиеОтчетыСервер.СформироватьСписокДоступныхРегистровБухгалтерииДляУправленческихОтчетов());

КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавливает видимость, доступность элементам формы.
// 
&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ДвиженияДоступны = ЗначениеЗаполнено(Объект.РегистрБухгалтерии) 
						И ЗначениеЗаполнено(Объект.Организация);
						
	ЭтоУпр  = фИмяРегистраБухгалтерии = "бит_Дополнительный_1";
	ЭтоДоп2 = фИмяРегистраБухгалтерии = "бит_Дополнительный_2";
	ЭтоДоп3 = фИмяРегистраБухгалтерии = "бит_Дополнительный_3";
	ЭтоДоп4 = фИмяРегистраБухгалтерии = "бит_Дополнительный_4";
	ЭтоДоп5 = фИмяРегистраБухгалтерии = "бит_Дополнительный_5";
	//1c-izhtc spawn 06.08.15 (
	//ЭтоМСФО = бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(фИмяРегистраБухгалтерии);
	ЭтоМСФО = ЭтоДоп2 ИЛИ ЭтоДоп3;
	//1c-izhtc spawn 06.08.15 )
	
	Если Не бит_ОбщегоНазначения.ЕстьОбъектыМСФО() Тогда
		Элементы.СуммаОперацииМУ.Видимость  		 		   = Ложь;	
		Элементы.СуммаОперацииМУ1.Видимость 		 		   = Ложь;
		Элементы.Движениябит_Дополнительный_2СуммаМУ.Видимость = Ложь;
	КонецЕсли;

	Элементы.Страница_бит_Дополнительный_1.Видимость = ЭтоУпр;
	Элементы.Страница_бит_Дополнительный_2.Видимость = ЭтоДоп2;
	Элементы.Страница_бит_Дополнительный_3.Видимость = ЭтоДоп3;
	Элементы.Страница_бит_Дополнительный_4.Видимость = ЭтоДоп4;
	Элементы.Страница_бит_Дополнительный_5.Видимость = ЭтоДоп5;	
	
	Элементы.Движениябит_Дополнительный_1.Доступность = ДвиженияДоступны;
	Элементы.Движениябит_Дополнительный_2.Доступность = ДвиженияДоступны;
	Элементы.Движениябит_Дополнительный_3.Доступность = ДвиженияДоступны;
	Элементы.Движениябит_Дополнительный_4.Доступность = ДвиженияДоступны;
	Элементы.Движениябит_Дополнительный_5.Доступность = ДвиженияДоступны;
	
	Элементы.ГруппаСуммыОперации1.Видимость = Ложь;// ЭтоУпр;
	Элементы.ГруппаСуммыОперации2.Видимость = Ложь;// ЭтоДоп2;
	Элементы.ГруппаСуммыОперации3.Видимость = Ложь;// ЭтоДоп3;
	Элементы.ГруппаСуммыОперации4.Видимость = Ложь;// ЭтоДоп4;
	Элементы.ГруппаСуммыОперации5.Видимость = Ложь;// ЭтоДоп5;
	
	Элементы.Движениябит_Дополнительный_1ГруппаШаблоны.Доступность = ДвиженияДоступны;
	Элементы.Движениябит_Дополнительный_2ГруппаШаблоны.Доступность = ДвиженияДоступны;
    Элементы.Движениябит_Дополнительный_3ГруппаШаблоны.Доступность = ДвиженияДоступны;
    Элементы.Движениябит_Дополнительный_4ГруппаШаблоны.Доступность = ДвиженияДоступны;
    Элементы.Движениябит_Дополнительный_5ГруппаШаблоны.Доступность = ДвиженияДоступны;
	
	Элементы.Движениябит_Дополнительный_1ГруппаЗаполнитьПоШаблону.Доступность = ДвиженияДоступны;
	Элементы.Движениябит_Дополнительный_2ГруппаЗаполнитьПоШаблону.Доступность = ДвиженияДоступны;
    Элементы.Движениябит_Дополнительный_3ГруппаЗаполнитьПоШаблону.Доступность = ДвиженияДоступны;
    Элементы.Движениябит_Дополнительный_4ГруппаЗаполнитьПоШаблону.Доступность = ДвиженияДоступны;
    Элементы.Движениябит_Дополнительный_5ГруппаЗаполнитьПоШаблону.Доступность = ДвиженияДоступны;
	
	//БИТ Тртилек 20.12.2011
	Если фИмяРегистраБухгалтерии = "бит_Дополнительный_3" Тогда
		Элементы.СуммаОперацииРегл.Видимость = ЛОЖЬ;
		Элементы.СуммаОперацииУпр.Видимость = ЛОЖЬ;
	Иначе
		Элементы.СуммаОперацииРегл.Видимость = Истина;
		Элементы.СуммаОперацииУпр.Видимость = Истина;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры // УстановитьВидимостьДоступность()

// Функция получает и записывает валюту международного учета в кэш значений.
// 
// Параметры:
//  Организация 		   - СправочникСсылка.Организации.
//  ИмяРегистраБухгалтерии - Строка.
// 
// Возвращаемое значение:
//   СправочникСсылка.Валюты.
// 
&НаСервереБезКонтекста 
Функция ПолучитьВалютуМСФО(Организация, ИмяРегистраБухгалтерии)
	
	// Получим валюту международного учета.
	ВыводитьОшибки = бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(ИмяРегистраБухгалтерии);
	ВалютаМСФО     = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация, , ВыводитьОшибки);
	
	Возврат ВалютаМСФО;
	
КонецФункции // ПолучитьВалютуМСФО()

// Процедура выполняет пересчет сумм в текущей строке.
// 
// Параметры:
//  ТекущиеДанные      - ДанныеФормыЭлементКоллекции.
//  ВалютаДляПересчета - СправочникСсылка.Валюты.
//  СуммаДляПересчета  - Число.
//  Действие 		   - Строка.
// 
&НаСервере
Процедура ВыполнитьРасчетСуммВТекущейСтроке(ТекущиеДанные, ВалютаДляПересчета, СуммаДляПересчета, Действие = "")

	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	ДокументОбъект.ВыполнитьРасчетСуммВТекущейСтроке(ТекущиеДанные, ВалютаДляПересчета, СуммаДляПересчета, Действие, фЕстьРесурсСуммаМУ, фКэшЗначений.ВалютаМСФО);
	
КонецПроцедуры // ВыполнитьРасчетСуммВТекущейСтроке()

// Процедура выполняет пересчет сумм в текущей строке.
// 
// Параметры:
//  СтараяВалютаМСФО - СправочникСсылка.Валюты.
// 
&НаСервере
Процедура ПересчитатьСуммыПоСуммеМСФО(СтараяВалютаМСФО)

	НоваяВалютаМСФО = фКэшЗначений.ВалютаМСФО;
	
	КурсКратностьСтаройВалютыМСФО = бит_КурсыВалют.ПолучитьКурсВалюты(СтараяВалютаМСФО, Объект.Дата);
	КурсКратностьНовойВалютыМСФО  = бит_КурсыВалют.ПолучитьКурсВалюты(НоваяВалютаМСФО, Объект.Дата);
	
	Для каждого ТекущиеДанные Из Объект.Движения[фИмяРегистраБухгалтерии] Цикл
		
		ТекущиеДанные.СуммаМУ = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаМУ 
												 , СтараяВалютаМСФО
												 , НоваяВалютаМСФО
												 , КурсКратностьСтаройВалютыМСФО.Курс
												 , КурсКратностьНовойВалютыМСФО.Курс
												 , КурсКратностьСтаройВалютыМСФО.Кратность
												 , КурсКратностьНовойВалютыМСФО.Кратность);
												 
		ВыполнитьРасчетСуммВТекущейСтроке(ТекущиеДанные, НоваяВалютаМСФО, ТекущиеДанные.СуммаМУ, "ИзменениеМУСуммы");
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьСуммыПоСуммеМСФО()

// Процедура выполняет действия, необходимые при изменении даты.
// 
&НаСервере
Процедура ИзменениеДатыСервер()

	УстановитьВидимостьДоступность();	

КонецПроцедуры // ИзменениеДатыСервер()

// Процедура выполняет действия, необходимые при изменении регистра бухгалтерии.
// 
// Параметры:
//  ВызовПриСозданииФормы - Булево (По умолчанию = Ложь).
// 
&НаСервере
Процедура ИзменениеРегистраБухгалтерииСервер(ВызовПриСозданииФормы = Ложь)
	
	Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		фИмяРегистраБухгалтерии = Объект.РегистрБухгалтерии.ИмяОбъекта;
		фСтрокаВидаОперации     = Объект.РегистрБухгалтерии.Наименование;
		// КоличествоСубконто      = Метаданные.РегистрыБухгалтерии[фИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		фКоличествоСубконтоБУ   = Метаданные.РегистрыБухгалтерии[фИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		фЕстьРесурсСуммаМУ = бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(фИмяРегистраБухгалтерии);		
	Иначе
		фИмяРегистраБухгалтерии = "";
		фСтрокаВидаОперации     = "";
		// КоличествоСубконто      = 0;
		фЕстьРесурсСуммаМУ = Ложь;
	КонецЕсли;
	
	Если Не ВызовПриСозданииФормы Тогда
		
		Объект.Движения.бит_Дополнительный_1.Очистить();
		Объект.Движения.бит_Дополнительный_2.Очистить();
		Объект.Движения.бит_Дополнительный_3.Очистить();
		Объект.Движения.бит_Дополнительный_4.Очистить();
		Объект.Движения.бит_Дополнительный_5.Очистить();
		
		УстановитьВидимостьДоступность();
		
		КоличествоСубконто = ?(фИмяРегистраБухгалтерии = "", 0, Метаданные.РегистрыБухгалтерии[фИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто);
		фКэшЗначений.Вставить("КоличествоСубконто", КоличествоСубконто);
	
	КонецЕсли;
	
	ПолучитьДатуОткрытогоПериода();
		
КонецПроцедуры // ИзменениеРегистраБухгалтерииСервер()
                  
// Процедура выполняет действия, необходимые при изменении организации.
// 
// Параметры:
//  ПересчитыватьСуммы - Булево.
//  СтараяВалютаМСФО   - СправочникСсылка.Валюты.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер(ПересчитыватьСуммы, СтараяВалютаМСФО)
	
	ПолучитьВалютуМСФО(Объект.Организация, фИмяРегистраБухгалтерии);
	
	ДокументОб = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	ДокументОб.ВыполнитьДействияПриИзмененииОрганизации(фИмяРегистраБухгалтерии);
	ЗначениеВДанныеФормы(ДокументОб, Объект);
	
	Если ПересчитыватьСуммы Тогда
		ПересчитатьСуммыПоСуммеМСФО(СтараяВалютаМСФО);		
	КонецЕсли;	
	
    ПолучитьДатуОткрытогоПериода();
	
	УстановитьВидимостьДоступность();
	
	//БИТ Тртилек 01112013
	УстановитьВидимостьМУ();
	///БИТ Тртилек
	
	// 1c-izhtc ChuckNorris 18.03.2016 ( 
	//ИзменениеВидаОперацииСервер(); //1c-izhtc spawn 06.08.15
	// 1c-izhtc ChuckNorris 18.03.2016 ) 
		
КонецПроцедуры // ИзменениеОрганизацииСервер()


// Процедура обрабатывает изменение счета текущей записи.
// 
// Параметры:
//  ТекИд - Число.
//  ДтКт  - Строка ("Дт" или "Кт").
// 
&НаСервере
Процедура ИзменениеСчетаТекущейЗаписи(ТекИд, ДтКт)

	ТекущиеДанные = Объект.Движения[фИмяРегистраБухгалтерии].НайтиПоИдентификатору(ТекИд);
    Если ТекущиеДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные["Счет" + ДтКт]);
	Если Не СвСч.Валютный Тогда
		Возврат;
	КонецЕсли;
 	
	// Выполним расчет сумм в текущей строке.
	ВыполнитьРасчетСуммВТекущейСтроке(ТекущиеДанные, ТекущиеДанные["Валюта" + ДтКт], ТекущиеДанные["ВалютнаяСумма" + ДтКт]);
		
КонецПроцедуры // ИзменениеСчетаТекущейЗаписи()

// Процедура обрабатывает изменение валюты в строке.
// 
// Параметры:
//  ТекИд - Число.
//  ДтКт  - Строка.
// 
&НаСервере
Процедура ИзменениеВалютыТекущейЗаписи(ТекИд, ДтКт)

	ТекущиеДанные = Объект.Движения[фИмяРегистраБухгалтерии].НайтиПоИдентификатору(ТекИд);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетДт);
	//***БИТ***Теплова***(2012.04.09
	//Если ДтКт = "Дт" ИЛИ Не СвСч.Валютный Тогда
	Если ДтКт = "Дт" ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ВалютнаяСуммаКт) Тогда
	//***БИТ***Теплова***)
	
		// Выполним расчет сумм в текущей строке.
		ВыполнитьРасчетСуммВТекущейСтроке(ТекущиеДанные, ТекущиеДанные["Валюта" + ДтКт], ТекущиеДанные["ВалютнаяСумма" + ДтКт]);
	КонецЕсли;	

КонецПроцедуры // ИзменениеВалютыТекущейЗаписи()

// Процедура обрабатывает изменение суммы текущей записи.
// 
// Параметры:
//  ТекИд    - Число.
//  Действие - Строка.
// 
&НаСервере
Процедура ИзменениеСуммыТекущейЗаписи(ТекИд, Действие = "")

	ТекущиеДанные = Объект.Движения[фИмяРегистраБухгалтерии].НайтиПоИдентификатору(ТекИд);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;	
	
	Если Действие = "ИзменениеМУСуммы" Тогда
		ВалютаПересчета = фКэшЗначений.ВалютаМСФО;
		СуммаПересчета  = ТекущиеДанные.СуммаМУ;
	ИначеЕсли Действие = "ИзменениеРеглСуммы" Тогда
	    ВалютаПересчета = фКэшЗначений.ВалютаРеглУчета;
		СуммаПересчета  = ТекущиеДанные.СуммаРегл;
	ИначеЕсли Действие = "ИзменениеУпрСуммы" Тогда	
		ВалютаПересчета = фКэшЗначений.ВалютаУпрУчета;
		СуммаПересчета  = ТекущиеДанные.СуммаУпр;
	Иначе
		Возврат;
	КонецЕсли;	
	
	// Выполним расчет сумм в текущей строке.
	ВыполнитьРасчетСуммВТекущейСтроке(ТекущиеДанные, ВалютаПересчета, СуммаПересчета, Действие);
	
	ПересчитатьСуммуОперации();
	
КонецПроцедуры // ИзменениеСуммыТекущейЗаписи()

&НаСервере
Процедура ПересчитатьСуммуОперации()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПересчитатьСуммуОперации();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры

// Процедура заполняет движения.
// 
// Параметры:
//  ВыбранноеЗначение - Структура.
//  ОчищатьДанные     - Булево.
// 
&НаСервере
Процедура ЗаполнитьДвиженияПоВыбраннымДанным(ВыбранноеЗначение, ОчищатьДанные)

	Если ОчищатьДанные Тогда					
		Объект.Движения[фИмяРегистраБухгалтерии].Очистить();					
	КонецЕсли;
	
	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	
	Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.ЗаполнитьДвижения(ВыбранноеЗначение.ХранилищеДанные
																		, ДокОбъект.Движения[фИмяРегистраБухгалтерии]
																		, фКэшЗначений.КоличествоСубконто
																		, фИмяРегистраБухгалтерии);
																		
	ЗначениеВДанныеФормы(ДокОбъект, Объект);																		
                         
КонецПроцедуры // ЗаполнитьДвиженияПоВыбраннымДанным()

// Процедура переключает активность проводок.
// 
&НаСервере
Процедура ПереключитьАктивностьПроводок()

	Если НЕ ПереключениеПроводокДоступно() Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаЗапись Из Объект.Движения[фИмяРегистраБухгалтерии] Цикл
		СтрокаЗапись.Активность = Не СтрокаЗапись.Активность;	
	КонецЦикла;

КонецПроцедуры // ПереключитьАктивностьПроводок()
 
// Процедура получает дату открытого периода для данного объекта. 
// 
&НаСервере
Процедура ПолучитьДатуОткрытогоПериода()

	// Получим дату открытого периода.
	РезДаты = бит_КонтрольЗакрытогоПериода.ПолучитьДатыОткрытогоПериода(Объект.Организация, Объект.РегистрБухгалтерии);
	фДатаОткрытогоПериода = РезДаты[Объект.РегистрБухгалтерии];

КонецПроцедуры // ПолучитьДатуОткрытогоПериода()

// Процедура обрабатывает перенос остатков
//  из обработки бит_ПолучениеОстатковРегистровБухгалтерии. 
//
// Параметры:
//  СтрЗаполнения - Структура.
//
&НаСервере
Процедура ОбработкаПереносОстатков(СтрЗаполнения)

	// Изменение кода. Начало. 19.12.2016{{
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	ДокументОбъект.ЗаполнитьДвиженияИзТаблицы(СтрЗаполнения,
											фИмяРегистраБухгалтерии, 
											фЕстьРесурсСуммаМУ, 
											фКэшЗначений.ВалютаМСФО);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	// Изменение кода. Конец. 19.12.2016}}

КонецПроцедуры // ОбработкаПереносОстатков()

#КонецОбласти

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , фСтрокаВидаОперации);
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	СтруктураЗаголовка.Вставить("ПроведениеРазрешено" , Ложь);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																, СтруктураЗаголовка);
																
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения
     
// Процедура обрабатывает начало выбора субконто.
// 
// Параметры:
//  Элемент              - ЭлементУправления.
//  СтандартнаяОбработка - Булево.
//  Контейнер            - Произвольный.
//  ЗначениеСубконто     - Произвольный.
//  ИмяСубконто  		 - Строка.
// 
&НаКлиенте
Процедура НачалоВыбораСубконтоБУ(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто, ИмяСубконто)
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() И ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(Контейнер, СтандартнаяОбработка, ИмяСубконто);
		
	Иначе
		
		НачалоИмениСубконто = Лев(ИмяСубконто, 10);
		
		СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      , Объект
	                                                                                      , НачалоИмениСубконто
																						  , ЗначениеСубконто
																						  , фКоличествоСубконтоБУ);	
	
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
	
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораСубконто()

// Процедура обрабатывает изменение субконто.
// 
// Параметры:
//  Контейнер         - Произвольный.
//  ЗначениеСубконто  - Произвольный - Текущее значение субконто.
//  ИмяСубконто  	  - Строка.
// 
&НаКлиенте
Процедура ИзменениеСубконтоБУ(Контейнер, ЗначениеСубконто, ИмяСубконто)

	НачалоИмениСубконто = Лев(ИмяСубконто, 10);
	
	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, НачалоИмениСубконто, фКоличествоСубконтоБУ);
	  
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, НачалоИмениСубконто, ЗначениеСубконто, фКоличествоСубконтоБУ);
	  
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, НачалоИмениСубконто, "", фКоличествоСубконтоБУ);																   

КонецПроцедуры // ИзменениеСубконтоБУ()

&НаКлиенте
Процедура ПроверитьПроводкуНаСторно(ТекущиеДанные, Отказ)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Период) И ЗначениеЗаполнено(СсылкаДатаСторно) Тогда
		Если ТекущиеДанные.Период = СсылкаДатаСторно Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПроводкуНаСторно()

// Процедура обрабатывает авто-подбор субконто. Устанавливаются фильтры при авто-подборе.
// 
// Параметры:
//  Элемент   - ПолеФормы.
//  Параметры - Структура.
// 
&НаКлиенте
Процедура СубконтоБУАвтоПодбор(Элемент, Параметры)

	ТекущиеДанные = Элементы["Движения" + фИмяРегистраБухгалтерии].ТекущиеДанные;	
	
	ИмяСубконто       = Прав(Элемент.Имя, 11);	
	ЗначениеСубконто  = ТекущиеДанные[ИмяСубконто];	
	
	НачалоИмениСубконто = Лев(ИмяСубконто, 10);
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(ТекущиеДанные
                                                                                      , Объект
                                                                                      , НачалоИмениСубконто
																					  , ЗначениеСубконто
																					  , фКоличествоСубконтоБУ);	

	// Установим параметры выбора субконто.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

	Для каждого КиЗ Из СтруктураПараметров Цикл
	
		Параметры.Отбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
	
	КонецЦикла; 
		
КонецПроцедуры // СубконтоБУАвтоПодбор()

&НаКлиенте
Процедура ДатаСторноПриИзменении(Элемент)
	
	 Если ЗначениеЗаполнено(фДатаОткрытогоПериода) И ЗначениеЗаполнено(Объект.ДатаСторно) Тогда
	 
	 	 Если Объект.ДатаСторно < фДатаОткрытогоПериода Тогда
		 
		 	   ТекстСообщения =  НСтр("ru = 'Дата сторно не может быть в закрытом периоде!'");
			   бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			   
			   ИзвлечьИзКэша("ДатаСторно");
			   Возврат;
			   
		 КонецЕсли; 
	 
	 КонецЕсли; 
	 
	 ДобавитьВКэш("ДатаСторно");
	 
КонецПроцедуры

// Процедура - Переключение проводок доступно определяет допустимость действия "переключение проводок".
//
&НаСервере
Функция ПереключениеПроводокДоступно()
	
	Возврат бит_КонтрольЗакрытогоПериода.ПереключениеПроводокДоступно(Объект.Ссылка, 
				Объект.Организация, Объект.Дата, фИмяРегистраБухгалтерии);
	
КонецФункции // ПереключениеПроводокДоступно()
 
#КонецОбласти

#Область РазделРаботыСШаблонами

// Обработка оповещения. 
//
// Параметры:
//  Ответ               - КодВозвратаДиалога.
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура СохранитьШаблонНовыйПродолжение(Ответ, СтруктураПараметров) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда			
			СоздатьШаблонПроводокНовыйКлиент(СтруктураПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьШаблонПродолжение() 

// Процедура создает шаблон проводок. 
//
// Параметры:
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура СоздатьШаблонПроводокНовыйКлиент(СтруктураПараметров)

	СоздатьШаблонПроводокНовыйСервер(СтруктураПараметров);
	
	Если СтруктураПараметров.Свойство("ШаблонСсылка") И ТипЗнч(СтруктураПараметров.ШаблонСсылка) = Тип("СправочникСсылка.бит_ШаблоныДвижений") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", СтруктураПараметров.ШаблонСсылка);
		Форма = ПолучитьФорму("Справочник.бит_ШаблоныДвижений.ФормаОбъекта", ПараметрыФормы);
		Форма.Записать();
		Форма.Открыть();
		
	КонецЕсли;

КонецПроцедуры // СоздатьШаблонПроводокКлиент()

// Процедура создает шаблон проводок на сервере. 
//
// Параметры:
//  СтруктураПараметров - Структура.
//
&НаСервере
Процедура СоздатьШаблонПроводокНовыйСервер(СтруктураПараметров)

	Если бит_РаботаСМетаданными.ЕстьРегистрБухгалтерии(фИмяРегистраБухгалтерии) Тогда
		
		СтруктураПараметров.Вставить("ТаблицаПроводок", Объект.Движения[фИмяРегистраБухгалтерии].Выгрузить());
		
		ШаблонСсылка = Неопределено;
		
		бит_МеханизмХозяйственныхОперацийСервер.СоздатьОбновитьШаблонПроводокОперация(СтруктураПараметров, ШаблонСсылка, Истина);	
		
		СтруктураПараметров.Очистить();

		СтруктураПараметров.Вставить("ШаблонСсылка", ШаблонСсылка);
	
	КонецЕсли;

КонецПроцедуры // СоздатьШаблонПроводок()

// Процедура выполнения команды ЗаполнитьПоШаблону
//
// Параметры:
//  ДобавитьЗагрузить - Строка.
//
&НаКлиенте
Процедура КомандаЗаполнитьПоШаблонуКлиент(ДобавитьЗагрузить)

	ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ. Записать?'");
	ОповещениеВопрос = Новый ОписаниеОповещения("КомандаЗаполнитьПоШаблонуПродолжение", ЭтотОбъект, ДобавитьЗагрузить);

	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);	
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Текущие движения будут очищены, продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("КомандаЗаполнитьПоШаблонуЗавершение", ЭтотОбъект, ДобавитьЗагрузить);
		
		Если ДобавитьЗагрузить = "Загрузить" И Объект.Движения[фИмяРегистраБухгалтерии].Количество() > 0 Тогда
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);	
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ОповещениеВопрос, КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьПоШаблону()

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ             - КодВозвратаДиалога.
//  ДобавитьЗагрузить - Строка.
//
&НаКлиенте
Процедура КомандаЗаполнитьПоШаблонуПродолжение(Ответ, ДобавитьЗагрузить) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда			
			
			ТекстВопроса = НСтр("ru = 'Текущие движения будут очищены, продолжить?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("КомандаЗаполнитьПоШаблонуЗавершение", ЭтотОбъект, ДобавитьЗагрузить);
			
			Если ДобавитьЗагрузить = "Загрузить" И Объект.Движения[фИмяРегистраБухгалтерии].Количество() > 0 Тогда
				
				ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);	
				
			Иначе
				
				ВыполнитьОбработкуОповещения(ОповещениеВопрос, КодВозвратаДиалога.Да);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // КомандаЗаполнитьПоШаблонуПродолжение()

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ             - КодВозвратаДиалога.
//  ДобавитьЗагрузить - Строка.
//
&НаКлиенте
Процедура КомандаЗаполнитьПоШаблонуЗавершение(Ответ, ДобавитьЗагрузить) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		РегистрБухгалтерии = ОпределитьРегистрБухгалтерииВидДокумента("РегистрБухгалтерии");
		ВидДокумента       = ОпределитьРегистрБухгалтерииВидДокумента("ВидДокумента");

		ПараметрыФормы = Новый Структура;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Регистр", РегистрБухгалтерии);
	    Отбор.Вставить("ВидДокумента", ВидДокумента);
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеФормыВыбораШаблона", ЭтотОбъект, ДобавитьЗагрузить);
		
		ОткрытьФорму("Справочник.бит_ШаблоныДвижений.ФормаВыбора", ПараметрыФормы,,,,, ОповещениеОЗакрытии);

	КонецЕсли;

КонецПроцедуры // КомандаЗаполнитьПоШаблонуПродолжение()

// Обработка оповещения закрытия формы выбора шаблона. 
//
// Параметры:
//  Результат.
//  ДобавитьЗагрузить - Строка.
//
&НаКлиенте
Процедура ЗакрытиеФормыВыбораШаблона(Результат, ДобавитьЗагрузить) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		
		ЗаполнитьТаблицуДвиженийНаСервере(Результат, ДобавитьЗагрузить);
		
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеФормыВыбораШаблона()

// Процедура заполянет проводки по выбранному щаблону. 
//
// Параметры:
//  ШаблонСсылка      - СправочникСсылка.
//  ДобавитьЗагрузить - Строка.
//
&НаСервере
Процедура ЗаполнитьТаблицуДвиженийНаСервере(ШаблонСсылка, ДобавитьЗагрузить)

	бит_МеханизмХозяйственныхОперацийСервер.ЗаписатьДвиженияОперацияУпр(Объект.Ссылка, ШаблонСсылка, фИмяРегистраБухгалтерии, ДобавитьЗагрузить);
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры // ЗаполнитьТаблицуДвиженийНаСервере()

// Функция возвращает ссылку на объект.
//
// Параметры:
//  ИскомыйОбъект.
//
// Возвращаемое значение:
//  Строка.
//
&НаСервере
Функция ОпределитьРегистрБухгалтерииВидДокумента(ИскомыйОбъект)

	Результат = Неопределено;
	
	Если ИскомыйОбъект = "РегистрБухгалтерии" Тогда

		Результат = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоРеквизиту("ИмяРегистра", фИмяРегистраБухгалтерии);
		
	ИначеЕсли  ИскомыйОбъект = "ВидДокумента" Тогда
	
	    Результат = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъекта", "бит_ОперацияУправленческий");

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОпределитьРегистрБухгалтерииВидДокумента()

// Обработка оповещения. 
//
// Параметры:
//  Ответ               - КодВозвратаДиалога.
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура СохранитьШаблонПродолжение(Ответ, СтруктураПараметров) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда			
			СоздатьШаблонПроводокКлиент(СтруктураПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьШаблонПродолжение() 

// Процедура создает шаблон проводок. 
//
// Параметры:
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура СоздатьШаблонПроводокКлиент(СтруктураПараметров)

	РегистрБухгалтерии = ОпределитьРегистрБухгалтерииВидДокумента("РегистрБухгалтерии");
	ВидДокумента       = ОпределитьРегистрБухгалтерииВидДокумента("ВидДокумента");

	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Регистр", РегистрБухгалтерии);
    Отбор.Вставить("ВидДокумента", ВидДокумента);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеФормыВыбораШаблонаСохранение", ЭтотОбъект, СтруктураПараметров);
	
	ОткрытьФорму("Справочник.бит_ШаблоныДвижений.ФормаВыбора", ПараметрыФормы,,,,, ОповещениеОЗакрытии);

КонецПроцедуры // СоздатьШаблонПроводокКлиент()

// Обработка оповещения закрыти формы выбора шаблона. 
//
// Параметры:
//  ШаблонСсылка        - СправочникСсылка.
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура ЗакрытиеФормыВыбораШаблонаСохранение(ШаблонСсылка, СтруктураПараметров) Экспорт

	СоздатьШаблонПроводокСервер(ШаблонСсылка, СтруктураПараметров);
	
	Если ЗначениеЗаполнено(ШаблонСсылка) И ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.бит_ШаблоныДвижений") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ШаблонСсылка);
		Форма = ПолучитьФорму("Справочник.бит_ШаблоныДвижений.ФормаОбъекта", ПараметрыФормы);
		Форма.Записать();
		Форма.Открыть();
		
	КонецЕсли;

КонецПроцедуры // ЗакрытиеФормыВыбораШаблонаСохранение()

// Процедура создает шаблон проводок на сервере. 
//
// Параметры:
//  ШаблонСсылка.
//  СтруктураПараметров - Структура.
//
&НаСервере
Процедура СоздатьШаблонПроводокСервер(ШаблонСсылка, СтруктураПараметров)

	Если бит_РаботаСМетаданными.ЕстьРегистрБухгалтерии(фИмяРегистраБухгалтерии) И ЗначениеЗаполнено(ШаблонСсылка) Тогда
		
		СтруктураПараметров.Вставить("ТаблицаПроводок", Объект.Движения[фИмяРегистраБухгалтерии].Выгрузить());
		//
		//РегистрБухгалтерии = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоРеквизиту("ИмяРегистра", СтруктураПараметров.ИмяРегистра);
		
		//бит_МеханизмХозяйственныхОперацийСервер.ЗаписатьЗначенияРеквизитовДвиженийШаблонаУпр(ШаблонСсылка, РегистрБухгалтерии, ТаблицаПроводок);	
		
		бит_МеханизмХозяйственныхОперацийСервер.СоздатьОбновитьШаблонПроводокОперация(СтруктураПараметров, ШаблонСсылка);	
		
		СтруктураПараметров.ТаблицаПроводок = "";
		
	КонецЕсли;

КонецПроцедуры // СоздатьШаблонПроводокСервер()

// Оповещение на вопрос о подтверждение очистки.
//
// Параметры:
//  Результат    - КодВозвратаДиалога.
//  ДопПараметры - Структура.
//
&НаКлиенте
Процедура ОтветНаПотверждениеОчистки(РезультатОтвет, ДопПараметры) Экспорт
	
	ОчищатьДанные = РезультатОтвет = КодВозвратаДиалога.Да;
    
    Если ОчищатьДанные Тогда
        ЗаполнитьДвиженияПоВыбраннымДанным(ДопПараметры.ВыбранноеЗначение, ОчищатьДанные);
    КонецЕсли;
    
КонецПроцедуры // ОтветНаПотверждениеОчистки()

#КонецОбласти   

&НаСервере
Процедура ЗаполнитьСторноПоПравиламТрансляцииНаСервере(Период)

	Объект.Движения.бит_Дополнительный_2.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) Тогда
		НачалоПериода = "0001-01-01";
	Иначе
		НачалоПериода = Период.ДатаНачала;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		КонецПериода = '2030-12-31 23-59-59';
	Иначе	
		КонецПериода = Период.ДатаОкончания;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДвиженияССубконто.Период КАК Период,
	|	ДвиженияССубконто.СчетДт КАК СчетДт,
	|	ДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	|	ДвиженияССубконто.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	ДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	|	ДвиженияССубконто.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	ДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	|	ДвиженияССубконто.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	ДвиженияССубконто.СубконтоДт4 КАК СубконтоДт4,
	|	ДвиженияССубконто.ВидСубконтоДт4 КАК ВидСубконтоДт4,
	|	ДвиженияССубконто.СчетКт КАК СчетКт,
	|	ДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|	ДвиженияССубконто.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	ДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|	ДвиженияССубконто.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	ДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	|	ДвиженияССубконто.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	ДвиженияССубконто.СубконтоКт4 КАК СубконтоКт4,
	|	ДвиженияССубконто.ВидСубконтоКт4 КАК ВидСубконтоКт4,
	|	ДвиженияССубконто.Организация КАК Организация,
	|	ДвиженияССубконто.ВалютаДт КАК ВалютаДт,
	|	ДвиженияССубконто.ВалютаКт КАК ВалютаКт,
	|	-ДвиженияССубконто.СуммаРегл КАК СуммаРегл,
	|	-ДвиженияССубконто.СуммаУпр КАК СуммаУпр,
	|	-ДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	-ДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	-ДвиженияССубконто.КоличествоДт КАК КоличествоДт,
	|	-ДвиженияССубконто.КоличествоКт КАК КоличествоКт,
	|	-ДвиженияССубконто.СуммаМУ КАК СуммаМУ,
	|	ДвиженияССубконто.Содержание КАК Содержание,
	|	ДвиженияССубконто.НомерЖурнала КАК НомерЖурнала,
	|	ДвиженияССубконто.ВидПроводки КАК ВидПроводки,
	|	ДвиженияССубконто.ДатаФормирования КАК ДатаФормирования,
	|	ДвиженияССубконто.ТипПроводки КАК ТипПроводки
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(&НачалоПериода, &КонецПериода, Организация = &Организация, Период, ) КАК ДвиженияССубконто
	|ГДЕ
	|	ДвиженияССубконто.СторнируемаяПроводка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Проводки = ТекущийОбъект.Движения.бит_Дополнительный_2; 
	Пока Выборка.Следующий() Цикл
		
		Проводка = Проводки.Добавить();
		Проводка.Активность = Истина;
		Проводка.Период = Объект.Дата;
		ЗаполнитьЗначенияСвойств(Проводка, Выборка,,"Период");
		
		Если ЗначениеЗаполнено(Выборка.СчетДт) Тогда
			Для Индекс = 1 По 4 Цикл
				бит_БухгалтерияСервер.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Индекс, Выборка["СубконтоДт" + Индекс]); 
			КонецЦикла; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Выборка.СчетКт) Тогда
			Для Индекс = 1 По 4 Цикл
				бит_БухгалтерияСервер.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, Индекс, Выборка["СубконтоКт" + Индекс]); 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;

	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура УстановитьВидимостьМУ()
	
	//БИТ Тртилек 30102013
	мОрганизацияКонсолидирующая = ОпределитьКонсолидированностьОрганизации();
	Элементы.Движениябит_Дополнительный_2СуммаМУ.Доступность = НЕ мОрганизацияКонсолидирующая;	
	Элементы.Движениябит_Дополнительный_3СуммаМУ.Доступность = Не мОрганизацияКонсолидирующая;
	///БИТ Тртилек
	
КонецПроцедуры

//БИТ Тртилек 08.02.2013
//обойдем все строки и пересчитаем суммы регл, упр, МУ
&НаКлиенте
Процедура ПроверитьСуммыПриСменеКурса(ДатаНов, ДатаПред, ТаблицаДвижений, Пересчитать = ЛОЖЬ) Экспорт
	
	Если НЕ НачалоДня(ДатаНов) = НачалоДня(ДатаПред) Тогда
		
		Для Каждого мДвижение ИЗ ТаблицаДвижений Цикл
			
			Если ЗначениеЗаполнено(мДвижение.ВалютаДТ) Тогда
				
				КурсДтДО = ПолучитьКурсВалюты(мДвижение.ВалютаДТ, ДатаПред);
				КурсДтПосле = ПолучитьКурсВалюты(мДвижение.ВалютаДТ, ДатаНов);
				
				Если НЕ КурсДтДО.Курс = КурсДтПосле.Курс Тогда 
					Ответ = Вопрос("Курсы по валютам из табличной части не совпадают с курсом на создаваемую дату. Выполнить пересчет?", РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Да Тогда
						Пересчитать = Истина;
						Возврат;
					Иначе
						ДатаНов = ДатаПред;
						Возврат;
					КонецЕсли;
				КонецЕсли;				
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(мДвижение.ВалютаКТ) Тогда
				
				КурсКтДО = ПолучитьКурсВалюты(мДвижение.ВалютаКТ, ДатаПред);
				КурсКтПосле = ПолучитьКурсВалюты(мДвижение.ВалютаКТ, ДатаНов);
				
				Если НЕ КурсКтДО.Курс = КурсКтПосле.Курс Тогда 
					Ответ = Вопрос("Курсы по валютам из табличной части не совпадают с курсом на создаваемую дату. Выполнить пересчет?", РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Да Тогда
						Пересчитать = Истина;
						Возврат;
					Иначе
						ДатаНов = ДатаПред;
						Возврат;
					КонецЕсли;
				КонецЕсли;				
				
			КонецЕсли;

			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//***БИТ***Теплова***(2012.04.09
&НаКлиенте
Процедура СинхронизацияВалютныхСуммДт(ТекущиеДанные)
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетКт) и ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СчетКт, "Валютный") и ЗначениеЗаполнено(ТекущиеДанные.ВалютнаяСуммаДт) Тогда
	    ТекущиеДанные.ВалютнаяСуммаКт = ТекущиеДанные.ВалютнаяСуммаДт;
	    ТекущиеДанные.ВалютаКт = ТекущиеДанные.ВалютаДт;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СинхронизацияВалютныхСуммКт(ТекущиеДанные)
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) и ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СчетДт, "Валютный") и ЗначениеЗаполнено(ТекущиеДанные.ВалютнаяСуммаКт) Тогда
	    ТекущиеДанные.ВалютнаяСуммаДт = ТекущиеДанные.ВалютнаяСуммаКт;
	    ТекущиеДанные.ВалютаДт = ТекущиеДанные.ВалютаКт;
	КонецЕсли;
КонецПроцедуры
//***БИТ***Теплова***)

//БИТ Тртилек 30102013 узнаем - является ли организация консолидированной
&НаСервере
Функция ОпределитьКонсолидированностьОрганизации()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация,
	               |	МАКСИМУМ(бит_му_СоставПериметровКонсолидацииСрезПоследних.ТипКонсолидации) КАК ТипКонсолидации
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(
	               |			&Период,
	               |			Организация = &Организация
	               |				И ТипКонсолидации = &КонсолидирующийТип) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	               |ГДЕ
	               |	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Период
	               |			ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = &ПустаяДата)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", 			  Объект.Дата);
	Запрос.УстановитьПараметр("ПустаяДата",			  Дата('00010101'));
	Запрос.УстановитьПараметр("Организация",		  Объект.Организация);
	Запрос.УстановитьПараметр("КонсолидирующийТип",	  Перечисления.бит_му_ТипыКонсолидации.Консолидирующая);
	
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаОрганизаций.Количество() > 0 И ТаблицаОрганизаций[0]. ТипКонсолидации = Перечисления.бит_му_ТипыКонсолидации.Консолидирующая Тогда
		 Возврат Истина;
	Иначе		 
		 Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, Дата)
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
КонецФункции

//1c-izhtc spawn 06.08.15 (

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ИзмененВидОперации = Истина;
	СтарыйВидОперации = мКэшРеквизитовФормы.ВидОперации;
	
	Если Объект.ВидОперации <> СтарыйВидОперации Тогда
		
		Если фИмяРегистраБухгалтерии <> "" И Объект.Движения[фИмяРегистраБухгалтерии].Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru = 'Текущие движения документа будут очищены. Продолжить?'");
			ОповещениВопрос = Новый ОписаниеОповещения("ВопросВидОперацииПриИзменении", ЭтотОбъект, ИзмененВидОперации);
			
			ПоказатьВопрос(ОповещениВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
			
		Иначе
			
			Если ИзмененВидОперации Тогда
					
				ИзменениеВидаОперацииСервер();
				ДобавитьВКэш("ВидОперации");
							
			Иначе
				
				ИзвлечьИзКэша("ВидОперации");
				
			КонецЕсли;

		КонецЕсли;
				
	КонецЕсли;	
	
КонецПроцедуры // РегистрБухгалтерииПриИзменении()

// бит_AMuntyan Процедура 
//
// Параметры:
//  Параметр1 – Строка.
//
&НаКлиенте
Процедура ВопросВидОперацииПриИзменении(Ответ, ИзмененВидОперации) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ИзмененВидОперации = Ложь;
   	КонецЕсли;

	Если ИзмененВидОперации Тогда
					
		ИзменениеВидаОперацииСервер();
		ДобавитьВКэш("ВидОперации");
					
	Иначе
		
		ИзвлечьИзКэша("ВидОперации");
		
	КонецЕсли;

КонецПроцедуры // ВопросРегистрБухгалтерииПриИзменении()

&НаСервере
Процедура ИзменениеВидаОперацииСервер(ВызовПриСозданииФормы = Ложь)
	Если Не ВызовПриСозданииФормы Тогда
		Объект.Движения.бит_Дополнительный_1.Очистить();
		Объект.Движения.бит_Дополнительный_2.Очистить();
		Объект.Движения.бит_Дополнительный_3.Очистить();
		Объект.Движения.бит_Дополнительный_4.Очистить();
		Объект.Движения.бит_Дополнительный_5.Очистить();
		УстановитьВидимостьДоступность();
	КонецЕсли;
	Если фИмяРегистраБухгалтерии<>"бит_Дополнительный_2" И фИмяРегистраБухгалтерии<>"бит_Дополнительный_3" Тогда 
		Возврат;
	КонецЕсли;
	Для Каждого ДанныеСтроки ИЗ Объект.Движения[фИмяРегистраБухгалтерии] Цикл 
		Если фИмяРегистраБухгалтерии="бит_Дополнительный_2" И ДанныеСтроки.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.ПустаяСсылка() Тогда 
			ДанныеСтроки.ВидДвиженияМСФО = ПолучитьВидДвиженияМСФОПоВидуОперации(Объект.ВидОперации, ДанныеСтроки.ВидДвиженияМСФО);
		КонецЕсли;
		//БИТ Тртилек 30102013
		Если мОрганизацияКонсолидирующая Тогда
			 ДанныеСтроки.СуммаМУ = 0;
		КонецЕсли;
		///БИТ Тртилек
	КонецЦикла;
КонецПроцедуры // ИзменениеРегистраБухгалтерииСервер()

&НаСервереБезКонтекста
Функция ПолучитьВидДвиженияМСФОПоВидуОперации(ВидОперации, ТекВидДвиженияМСФО)
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийОперацияУправленческий.Аккруал Тогда
		Возврат Перечисления.БИТ_ВидыДвиженияМСФО.Аккруал 
	ИначеЕсли ВидОперации = Перечисления.бит_му_ВидыОперацийОперацияУправленческий.Корректировка Тогда
		Возврат Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО
	ИначеЕсли ВидОперации = Перечисления.бит_му_ВидыОперацийОперацияУправленческий.СторноАккруала Тогда
		Возврат Перечисления.БИТ_ВидыДвиженияМСФО.СторноАккруала
	ИначеЕсли ВидОперации = Перечисления.бит_му_ВидыОперацийОперацияУправленческий.РСБУ Тогда
		Возврат Перечисления.БИТ_ВидыДвиженияМСФО.РСБУ
	КонецЕсли;
	Возврат ТекВидДвиженияМСФО;
КонецФункции

&НаКлиенте
Процедура ВидОперацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Движениябит_Дополнительный_2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Движениябит_Дополнительный_2.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидДвиженияМСФО = ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.ПустаяСсылка") Тогда 
		ТекущиеДанные.ВидДвиженияМСФО = ПолучитьВидДвиженияМСФОПоВидуОперации(Объект.ВидОперации, ТекущиеДанные.ВидДвиженияМСФО);
	КонецЕсли;
	
	//БИТ Тртилек 30102013
	Если мОрганизацияКонсолидирующая Тогда
		 ТекущиеДанные.СуммаМУ = 0;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры

&НаКлиенте
Процедура Движениябит_Дополнительный_3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Движениябит_Дополнительный_3.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//БИТ Тртилек 30102013
	Если мОрганизацияКонсолидирующая Тогда
		 ТекущиеДанные.СуммаМУ = 0;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-27 (#2925)
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не Отказ И 		 
		 ок_ОтправитьСсылкуПриЗакрытии
	Тогда 
		ок_ОтправитьСсылкуПриЗакрытии = Ложь;
		Закрыть(Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-27 (#2925)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-23 (#3095)
&НаКлиенте
Процедура Движениябит_Дополнительный_2ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования ИЛИ
		 Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийОперацияУправленческий.ок_КорректировкаАудиторов")
	Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.Движениябит_Дополнительный_2.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не НоваяСтрока ИЛИ
		 ЗначениеЗаполнено(ТекДанные.ВидДвиженияМСФО)
	Тогда 
		Возврат;	
	КонецЕсли;
	
	ТекДанные.ВидДвиженияМСФО = ПредопределенноеЗначение("Перечисление.БИТ_ВидыДвиженияМСФО.КорректировкаАудиторов");		
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-23 (#3095)
