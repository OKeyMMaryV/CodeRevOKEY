#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мВалютаУправленческогоУчета Экспорт; // Хранит валюту управленческого учета.

Перем мСписокРегистров Экспорт; // Хранит список регистров бухгалтерии управленческого учета.

Перем ИмяРегистраБухгалтерии Экспорт; // Хранит имя регистра бухгалтерии.

Перем мВалютаМеждУчета Экспорт; // Хранит валюту международного учета.

Перем мЕстьРесурсСуммаМУ Экспорт; // Хранит подтверждение наличия ресурса "СуммаМУ".

Перем мКоличествоСубконто Экспорт; // Хранит количество субконто.

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		// Заполнение нового документа.
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			
			Если ДанныеЗаполнения.Свойство("СтруктураДанных") Тогда
				ИмяРегистраБухгалтерии = РегистрБухгалтерии.ИмяОбъекта;
			    ЭтоРегистрМСФО = ИмяРегистраБухгалтерии = "бит_Дополнительный_2";
				Если ЭтоРегистрМСФО Тогда
				 	ЗаполнитьВалютуМеждународногоУчета();
				КонецЕсли;				
			    ЗаполнитьДвиженияИзТаблицы(ДанныеЗаполнения.СтруктураДанных, ИмяРегистраБухгалтерии, ЭтоРегистрМСФО, мВалютаМеждУчета);
			КонецЕсли;  	
			
		КонецЕсли;
		
		// Заполнение шапки.
		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
		                                               , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
													   , Неопределено);
				
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
			
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	СформироватьСторнирущиеПроводки();
	
	Если ПометкаУдаления Тогда			
		бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
	КонецЕсли;
	
	Если ТребуетсяУстанавливатьАктивностьПроводокОтСтатуса() Тогда
		УстановитьАктивностьПроводокОтСтатуса();		
	Иначе
		СинхронизироватьАктивностьДвиженийСПометкойУдаления();
	КонецЕсли;
	
    ПересчитатьСуммуОперации();	
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
	
	СтатусНач = мТекущийСтатус;
	УстановитьСтатус();
	
	//БИТ Тртилек 04.04.2012 Удаление движений РБ Международный и РС Соответсвие записей трансляции
	Если Не ЭтоНовый() Тогда 
		ДвиженияСоответствия = РегистрыСведений.бит_СоответствиеЗаписейТрансляции.СоздатьНаборЗаписей();
		ДвиженияСоответствия.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
		ДвиженияСоответствия.Прочитать();	
		ДвиженияСоответствия.Очистить();	
		ДвиженияСоответствия.Записать();
		
		ДвиженияМеждународный = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
		ДвиженияМеждународный.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
		ДвиженияМеждународный.Прочитать();	
		ДвиженияМеждународный.Очистить();	
		ДвиженияМеждународный.Записать();
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)

	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.бит_ОперацияУправленческий") Тогда
		Возврат;
	КонецЕсли;

	Дата               = ТекущаяДатаСеанса();
	Организация		   = ОбъектКопирования.Организация;
	РегистрБухгалтерии = ОбъектКопирования.РегистрБухгалтерии;
	Комментарий   	   = ОбъектКопирования.Комментарий;
	Содержание    	   = ОбъектКопирования.Содержание;
	//+Сундукова 29.03.16 - попросили убрать
	//Ответственный 	   = Пользователи.ТекущийПользователь();;
	Ответственный 	   = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновнойОтветственный", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	//-Сундукова 29.03.16 - попросили убрать
	
	// Укажем имя регистра бухгалтерии.
	ИмяРегистраБухгалтерии = РегистрБухгалтерии.ИмяОбъекта;
	
	ДвиженияУправленческий = РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);

	ЭтоМУ =  бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(ИмяРегистраБухгалтерии);
	
	Пока ДвиженияУправленческий.Следующий() Цикл

        Если ДвиженияУправленческий.Период = ОбъектКопирования.ДатаСторно Тогда
            Продолжить;       
        КонецЕсли;
        
		Проводка = Движения[ИмяРегистраБухгалтерии].Добавить();

		Проводка.Период          = Дата;
		Проводка.СчетДт          = ДвиженияУправленческий.СчетДт;
		Проводка.СчетКт          = ДвиженияУправленческий.СчетКт;

		Для каждого Субконто Из ДвиженияУправленческий.СубконтоДт Цикл
			Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из ДвиженияУправленческий.СубконтоКт Цикл
			Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Проводка.ВалютаДт        = ДвиженияУправленческий.ВалютаДт;
		Проводка.ВалютаКт        = ДвиженияУправленческий.ВалютаКт;
		Проводка.ВалютнаяСуммаДт = ДвиженияУправленческий.ВалютнаяСуммаДт;
		Проводка.ВалютнаяСуммаКт = ДвиженияУправленческий.ВалютнаяСуммаКт;
		Проводка.КоличествоДт    = ДвиженияУправленческий.КоличествоДт;
		Проводка.КоличествоКт    = ДвиженияУправленческий.КоличествоКт;
		Проводка.НомерЖурнала    = ДвиженияУправленческий.НомерЖурнала;
		Проводка.Организация     = ДвиженияУправленческий.Организация;
		Проводка.Содержание      = ДвиженияУправленческий.Содержание;
		Проводка.СуммаРегл       = ДвиженияУправленческий.СуммаРегл;
		Проводка.СуммаУпр        = ДвиженияУправленческий.СуммаУпр;
		
		Если ЭтоМУ Тогда
			
			Проводка.СуммаМУ		 = ДвиженияУправленческий.СуммаМУ;
			
		КонецЕсли; 
		
		//БИТ Тртилек 12.03.2012
		Если Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Ресурсы.Найти("СуммаМУ") <> Неопределено Тогда
			Проводка.СуммаМУ                = ДвиженияУправленческий.СуммаМУ;
		КонецЕсли;
		Если Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Измерения.Найти("ВидДвиженияМСФО") <> Неопределено Тогда
			Проводка.ВидДвиженияМСФО        = ДвиженияУправленческий.ВидДвиженияМСФО;
		КонецЕсли;
		///БИТ Тртилек

	КонецЦикла;
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция реализует алгоритм определения статуса объекта по-умолчанию.
//
//
Функция ОпределитьСтатус(НачальныйСтатус, ВсеВизыПолучены, ЕстьОтклонено, вхРежимЗаписи) Экспорт

    РезСтатус = НачальныйСтатус;
	
	Если НЕ ПометкаУдаления Тогда
		РезСтатус = Справочники.бит_СтатусыОбъектов.Операция_Рабочая;
	Иначе
		РезСтатус = Справочники.бит_СтатусыОбъектов.Операция_Черновик;
	КонецЕсли;
	
    Если РезСтатус = Справочники.бит_СтатусыОбъектов.Операция_Рабочая 
        ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.Операция_Утверждена 
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.Операция_Отклонена Тогда
		
		Если ЕстьОтклонено Тогда
			
			РезСтатус = Справочники.бит_СтатусыОбъектов.Операция_Отклонена;
			
		Иначе	
			
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.Операция_Утверждена;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.Операция_Рабочая;
			КонецЕсли; 
			
		КонецЕсли;
        
    КонецЕсли; 
    
    Возврат РезСтатус;
    
КонецФункции // ОпределитьСтатус()

// Процедура устанавливает статус документа.
// 
// Параметры:
//  РежимЗаписи - РежимЗаписиДокумента.
// 
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено) Экспорт
	
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект, Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;	
	
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда	
	
		Если вхРежимЗаписи = Неопределено Тогда
		     РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
		     РежимЗаписи = вхРежимЗаписи;
		КонецЕсли;
		
		// Вычислим переменные, необходимые для установки статуса.
	    ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);		
		
		// Определим статус.		
	    Статус = ОпределитьСтатус(мТекущийСтатус,ВсеВизыПолучены, ЕстьОтклонено,РежимЗаписи);
		
		// Если статус изменился - запишем его
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		, Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		, Статус
																		, мТекущийСтатус
																		, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		, ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				мТекущийСтатус 		  = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
				
				// Записать(РежимЗаписиДокумента.Запись); // 09.12.2016 убрал запись BF-382
				
			КонецЕсли; 	
			
		КонецЕсли;
	
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
			
        РежимСообщений = ?(КомментироватьВыполнение, "Все", "Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект", ЭтотОбъект);
		
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса, СтруктураКонтекст, РежимСообщений);
		
	КонецЕсли;   	
	
КонецПроцедуры // УстановитьСтатус()

// Пересчет валютной суммы в основную по курсу на указанную дату.
// 
// Параметры:
//  ВалютнаяСумма - Число.
//  Валюта        - СправочникСсылка.Валюты.
//  Дата          - Дата.
// 
// Возвращаемое значение:
//  Число.
// 
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата) Экспорт

	Если ВалютнаяСумма = Null ИЛИ ВалютнаяСумма = Неопределено Тогда
		ВалютнаяСумма = 0;	
	КонецЕсли;
	
	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / Запись.Кратность;
	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

// Процедура выполняет расчет сумм в текущей строке.
// 
// Параметры:
//  ТекущаяСтрока      - СтрокаТабличногоПоля.ТабличноеПолеДвиженияБюджетирование.
//  ВалютаДляПересчета - СправочникСсылка.Валюты.
//  СуммаДляПересчета  - Число.
//  Действие           - Строка. По умолчанию "".
//  ЭтоРегистрМСФО	   - Булево. По умолчанию Ложь.
//  ВалютаМСФО         - СправочникСсылка.Валюты.
// 
Процедура ВыполнитьРасчетСуммВТекущейСтроке(ТекущаяСтрока
										   , ВалютаДляПересчета
										   , СуммаДляПересчета
										   , Действие = ""
										   , ЭтоРегистрМСФО = Ложь
										   , ВалютаМСФО = Неопределено) Экспорт
	
	КурсКратностьВалютыСтроки = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДляПересчета, Дата);
	
	//БИТ Тртилек 22012014
	//Если Не Действие = "ИзменениеРеглСуммы"
	//	И Не (Действие = "ИзменениеУпрСуммы" И ЭтоРегистрМСФО И ТекущаяСтрока.СуммаРегл <> 0)Тогда
	Если (Не Действие = "ИзменениеРеглСуммы"
		И Не (Действие = "ИзменениеУпрСуммы" И ЭтоРегистрМСФО И ТекущаяСтрока.СуммаРегл <> 0))
		ИЛИ Действие = "ИзменениеУпрСуммы" И ЭтоРегистрМСФО И ОрганизацияКонсолидирующая() Тогда
	///БИТ Тртилек
		ТекущаяСтрока.СуммаРегл = ПересчетСуммыПоКурсу(СуммаДляПересчета, ВалютаДляПересчета, Дата);
	КонецЕсли;
	
	Если Не Действие = "ИзменениеУпрСуммы"
		И Не (Действие = "ИзменениеРеглСуммы" И ТекущаяСтрока.СуммаУпр <> 0) Тогда
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
			КурсКратностьВалютыУпрУчета = бит_КурсыВалют.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Дата);
			
			//***БИТ***Теплова***(2012.04.09
			//НАГолубева 22.01.2016 ++
			//бтКурсВалютыДляПересчета = ?(ВалютаДляПересчета.бит_КурсыЕвропейскогоБанка = Истина,КурсКратностьВалютыСтроки.бит_КурсыЕБ, КурсКратностьВалютыСтроки.Курс);                        
			бтКурсВалютыДляПересчета = КурсКратностьВалютыСтроки.Курс; 
			//НАГолубева 22.01.2016 --
			//***БИТ***Теплова***)
			
			ТекущаяСтрока.СуммаУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
																					 ВалютаДляПересчета, мВалютаУправленческогоУчета,
																					 //***БИТ***Теплова***(2012.04.09
																					 //КурсКратностьВалютыСтроки.Курс, КурсКратностьВалютыУпрУчета.Курс,
																					 бтКурсВалютыДляПересчета, КурсКратностьВалютыУпрУчета.Курс,
																					 //***БИТ***Теплова***)
																					 КурсКратностьВалютыСтроки.Кратность, КурсКратностьВалютыУпрУчета.Кратность);
																					 
		Иначе
			ТекущаяСтрока.СуммаУпр = 0;
		КонецЕсли;	
			
	КонецЕсли;
	
	Если (мЕстьРесурсСуммаМУ Или ЭтоРегистрМСФО)
		И Не ((Действие = "ИзменениеРеглСуммы" Или Действие = "ИзменениеУпрСуммы")
			  И ТекущаяСтрока.СуммаМУ <> 0) Тогда
			  
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
  		Если Не КурсКратностьВалютыСтроки.Курс = 0 И НЕ ОрганизацияКонсолидирующая() Тогда
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )	
			
			КурсКратностьВалютыМеждУчета = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаМСФО, Дата);
			
			//***БИТ***Теплова***(2012.04.09
			бтКурсВалютыДляПересчета = ?(ВалютаДляПересчета.бит_КурсыЕвропейскогоБанка = Истина,КурсКратностьВалютыСтроки.бит_КурсыЕБ, КурсКратностьВалютыСтроки.Курс);                        
			//***БИТ***Теплова***)
			
			ТекущаяСтрока.СуммаМУ = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
																					ВалютаДляПересчета, ВалютаМСФО,
																					//***БИТ***Теплова***(2012.04.09
																					//КурсКратностьВалютыСтроки.Курс, КурсКратностьВалютыМеждУчета.Курс,
																					бтКурсВалютыДляПересчета, КурсКратностьВалютыМеждУчета.Курс,
																					//***БИТ***Теплова***)
																					КурсКратностьВалютыСтроки.Кратность, КурсКратностьВалютыМеждУчета.Кратность);
																					 
		Иначе
			ТекущаяСтрока.СуммаМУ = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьРасчетСуммВТекущейСтроке()

// Процедура выполняет расчет валютных сумм в текущей строке.
// 
// Параметры:
//  ТекущаяСтрока      - СтрокаТабличногоПоля.ТабличноеПолеДвиженияБюджетирование.
//  ВалютаДляПересчета - СправочникСсылка.Валюты.
//  СуммаДляПересчета  - Число.
// 
Процедура ВыполнитьРасчетВалютныхСуммВТекущейСтроке(ТекущаяСтрока, ВалютаДляПересчета, СуммаДляПересчета) Экспорт
	
	СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДт);
    СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетКт);
    
    Если СвСчДт.Валютный 
		И ТекущаяСтрока.ВалютнаяСуммаДт = 0 Тогда

		КурсКратностьВалютыСтроки    = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущаяСтрока.ВалютаДт, Дата);
		КурсКратностьВалютыПересчета = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДляПересчета, Дата);
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
			ТекущаяСтрока.ВалютнаяСуммаДт = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
																							ВалютаДляПересчета, ТекущаяСтрока.ВалютаДт,
																							КурсКратностьВалютыПересчета.Курс, КурсКратностьВалютыСтроки.Курс,
																							КурсКратностьВалютыПересчета.Кратность, КурсКратностьВалютыСтроки.Кратность);
																							
		Иначе
			ТекущаяСтрока.ВалютнаяСуммаДт = 0;
		КонецЕсли;	
		
	ИначеЕсли Не СвСчДт.Валютный
		И СвСчКт.Валютный
		И ТекущаяСтрока.ВалютнаяСуммаКт = 0 Тогда

		КурсКратностьВалютыСтроки    = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущаяСтрока.ВалютаКт, Дата);
		КурсКратностьВалютыПересчета = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДляПересчета, Дата);
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
			ТекущаяСтрока.ВалютнаяСуммаКт = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
																							ВалютаДляПересчета, ТекущаяСтрока.ВалютаКт,
																							КурсКратностьВалютыПересчета.Курс, КурсКратностьВалютыСтроки.Курс,
																							КурсКратностьВалютыПересчета.Кратность, КурсКратностьВалютыСтроки.Кратность);
																							
		Иначе
			ТекущаяСтрока.ВалютнаяСуммаКт = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьРасчетВалютныхСуммВТекущейСтроке()

// Процедура заполняет валюту международного учета.
// 
Процедура ЗаполнитьВалютуМеждународногоУчета() Экспорт
	
	мВалютаМеждУчета = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
КонецПроцедуры // ЗаполнитьВалютуМеждународногоУчета()

// Процедура зачищает некорректные значения в движениях при изменении организации.
// 
// Параметры:
//  ИмяРегистраБухгалтерии - Строка.
// 
Процедура ВыполнитьДействияПриИзмененииОрганизации(ИмяРегистраБухгалтерии) Экспорт

	НомерСтроки = 1;
	
	Если Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии) Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого СтрПроводки Из Движения[ИмяРегистраБухгалтерии] Цикл
		
		СтрПроводки.Организация = Организация;
		ЗачиститьСубконто(СтрПроводки, "СубконтоДт", НомерСтроки);
		ЗачиститьСубконто(СтрПроводки, "СубконтоКт", НомерСтроки);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;	

КонецПроцедуры // ВыполнитьДействияПриИзмененииОрганизации()

// Пересчитывает сумму операции при изменении сумм в проводках.
// 
Процедура ПересчитатьСуммуОперации() Экспорт

	СуммаОперацииРегл = 0;
	СуммаОперацииУпр  = 0;
	СуммаОперацииМУ   = 0;
	
	ИмяРегистраБухгалтерии   = РегистрБухгалтерии.ИмяОбъекта;
	ВедетсяМеждународныйУчет = бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(ИмяРегистраБухгалтерии);
	
	Для Каждого Проводка Из Движения[ИмяРегистраБухгалтерии] Цикл
		
		// Сторно не будем учитывать в суммах документа.
		Если Проводка.Период = ДатаСторно Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаОперацииРегл = СуммаОперацииРегл + Проводка.СуммаРегл;
		СуммаОперацииУпр  = СуммаОперацииУпр  + Проводка.СуммаУпр;
		
		//ОК Довбешка Т.     23.08.2013		
		//Если ВедетсяМеждународныйУчет Тогда
		Если (ИмяРегистраБухгалтерии = "бит_Дополнительный_2")или(ИмяРегистраБухгалтерии = "бит_Дополнительный_3") Тогда
		//конец
			СуммаОперацииМУ = СуммаОперацииМУ + Проводка.СуммаМУ;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПересчитатьСуммуОперации()

// Процедура заполняет движения документа из таблицы. 
//
// СтрЗаполнения 		   - Структура.
// фИмяРегистраБухгалтерии - Строка.
// ЭтоРегистрМСФО 		   - Булево (По умолчанию = Ложь).
// ВалютаМСФО 			   - СправочникСсылка.Валюты (По умолчанию = Неопределено).
// ЗаполнитьИзШапки        - Булево (По умолчанию = Истина).
//
Процедура ЗаполнитьДвиженияИзТаблицы(СтрЗаполнения, фИмяРегистраБухгалтерии, ЭтоРегистрМСФО = Ложь, ВалютаМСФО = Неопределено, ЗаполнитьИзШапки = Истина) Экспорт

	ТабличнаяЧасть = Движения[фИмяРегистраБухгалтерии];
	
	Если СтрЗаполнения.ОчищатьТабЧасть Тогда	
		ТабличнаяЧасть.Очистить();  	
	КонецЕсли; 
	
	ТаблицаОстатки = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтрЗаполнения.Хранилище);	
	Для каждого Строка Из ТаблицаОстатки Цикл
		
		Если ЗначениеЗаполнено(Строка.СчетПриемника) Тогда
			
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			
			НоваяСтрока.Активность = Истина;
			
			НоваяСтрока.Период = СтрЗаполнения.ДатаТрансляции;
			Если ЗаполнитьИзШапки Тогда  			
				НоваяСтрока.Организация = Организация;
				//НоваяСтрока.ТипПроводки = ТипПроводок;  			
			КонецЕсли;
			
			Если Строка.СуммаРеглКт = 0 Тогда				
				ДтКт = "Дт";
				КорДтКт = "Кт";  							
			Иначе	    				
				ДтКт = "Кт";
				КорДтКт = "Дт";
			КонецЕсли; 		
			
			НоваяСтрока["Счет" + ДтКт] = Строка.СчетПриемника;
			Для i = 1 по 4 Цикл  		
				бит_БухгалтерияСервер.УстановитьСубконто(НоваяСтрока["Счет" + ДтКт], НоваяСтрока["Субконто" + ДтКт], i, Строка["СубконтоПриемника" + i]);				
			КонецЦикла;
					
			НоваяСтрока.СуммаРегл = Строка["СуммаРегл" + ДтКт];
			
			ВалРегл = мВалютаРегламентированногоУчета;
			ВыполнитьРасчетСуммВТекущейСтроке(НоваяСтрока, ВалРегл, НоваяСтрока.СуммаРегл, "ИзменениеРеглСуммы", ЭтоРегистрМСФО, ВалютаМСФО);

			Если ЗначениеЗаполнено(Строка["СуммаУпр" + ДтКт]) Тогда			
				НоваяСтрока.СуммаУпр = Строка["СуммаУпр" + ДтКт];  			
			КонецЕсли; 
			
			НоваяСтрока["Счет" + КорДтКт] = СтрЗаполнения.ДополнительныйСчет;
						
			НоваяСтрока["Валюта" + ДтКт] = Строка.Валюта;
			Если ТаблицаОстатки.Колонки.Найти("Количество") <> Неопределено Тогда
				НоваяСтрока["Количество" + ДтКт]    = Строка.Количество;
				НоваяСтрока["ВалютнаяСумма" + ДтКт] = Строка.ВалютнаяСумма;
			ИначеЕсли ТаблицаОстатки.Колонки.Найти("КоличествоДт") <> Неопределено Тогда	
			 	НоваяСтрока["Количество" + ДтКт]    = Строка["Количество" + ДтКт];
				НоваяСтрока["ВалютнаяСумма" + ДтКт] = Строка["ВалютнаяСумма" + ДтКт];
			КонецЕсли;
					
		КонецЕсли; 
		
	КонецЦикла;
	
	ПересчитатьСуммуОперации();

КонецПроцедуры // ЗаполнитьДвиженияИзТаблицы()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура зачищает значения субконто.
// 
// Параметры:
//  СтрПроводки  - Запись регистра бухгалтерии.
//  ИмяРеквизита - Строка.
//  НомерСтроки	 - Число.
// 
Процедура ЗачиститьСубконто(СтрПроводки, ИмяРеквизита, НомерСтроки)

	Если ЗначениеЗаполнено(СтрПроводки[ИмяРеквизита].БанковскиеСчета) Тогда
		СтрПроводки[ИмяРеквизита].БанковскиеСчета = Справочники.БанковскиеСчета.ПустаяСсылка();
		ТекстСообщения = Нстр("ru = 'В строке №%1% очищено значение банковского счета (" + ИмяРеквизита + ").'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, НомерСтроки);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтрПроводки[ИмяРеквизита].ДоговорыКонтрагентов) Тогда
		СтрПроводки[ИмяРеквизита].ДоговорыКонтрагентов = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ТекстСообщения = Нстр("ru = 'В строке №%1% очищено значение договора контрагента (" + ИмяРеквизита + ").'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, НомерСтроки);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры // ЗачиститьСубконто()

Процедура СформироватьСторнирущиеПроводки()
	
    ИмяРегистраБухгалтерии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрБухгалтерии, "ИмяОбъекта");
    //----------------------------------------------------------------------
    // Удаление сущствующих записей сторно.
	Если НЕ ЭтоНовый() Тогда
		
		Реквизиты 		 = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Дата, ДатаСторно");
		СтараяДата 		 = Реквизиты.Дата;
		СтараяДатаСторно = Реквизиты.ДатаСторно;
		
		Если СтараяДатаСторно > СтараяДата Тогда		
			// Поиск
			ЗаписиКУдалению = Новый Массив;		
			Для Каждого Проводка Из Движения[ИмяРегистраБухгалтерии]  Цикл
				Если Проводка.Период = СтараяДатаСторно 
					И Не ЗначениеЗаполнено(Проводка.ВидПроводки) Тогда
					ЗаписиКУдалению.Добавить(Проводка);
				КонецЕсли;
			КонецЦикла;	
			// Удаление
			Для Каждого ТекЗапись Из ЗаписиКУдалению Цикл
				Движения[ИмяРегистраБухгалтерии].Удалить(ТекЗапись);
			КонецЦикла;		
		КонецЕсли;
	КонецЕсли;
	
	//----------------------------------------------------------------------
    // Поиск записей для добавления записей сторно.
	ТЗПроводки = Движения[ИмяРегистраБухгалтерии].Выгрузить();
	ЗаписиКДобавлению = Новый Массив;	
	Для Каждого Проводка Из ТЗПроводки Цикл	 	
        Если НЕ ЗначениеЗаполнено(Проводка.ВидПроводки) Тогда			
			Проводка.Период = Дата;			
		КонецЕсли; 
		Проводка.Организация = Организация;
        Проводка.ТипПроводки = ТипПроводок;		
		Если ДатаСторно >= Проводка.Период И НЕ ЗначениеЗаполнено(Проводка.ВидПроводки) Тогда
			ЗаписиКДобавлению.Добавить(Проводка);
		КонецЕсли;
	КонецЦикла;
	
	//----------------------------------------------------------------------
    // Добавление сторно-записей.
	МетаНабор = Движения[ИмяРегистраБухгалтерии].Метаданные();
	Для Каждого ТекЗапись Из ЗаписиКДобавлению Цикл		
	    
	    НоваяЗапись = ТЗПроводки.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекЗапись);		
		НоваяЗапись.Период = ДатаСторно;
		Для Каждого ТекущийРесурс Из МетаНабор.Ресурсы Цикл
			СтороныПроводок = Новый Массив;			
			Если ТекущийРесурс.Балансовый Тогда
				СтороныПроводок.Добавить("");
			Иначе
				СтороныПроводок.Добавить("Дт");
				СтороныПроводок.Добавить("Кт");
			КонецЕсли;			
			Для Каждого ДтКт Из СтороныПроводок Цикл
				Если ТипЗнч(НоваяЗапись[ТекущийРесурс.Имя+ДтКт]) = Тип("Число") Тогда
					НоваяЗапись[ТекущийРесурс.Имя + ДтКт] = -НоваяЗапись[ТекущийРесурс.Имя + ДтКт];
				КонецЕсли;
			КонецЦикла;			
		КонецЦикла;
		
	КонецЦикла;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-03 (#3377)
	//Если ЗаписиКДобавлению.Количество() > 0 Тогда
	//	Движения[ИмяРегистраБухгалтерии].Загрузить(ТЗПроводки);
	//КонецЕсли; 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-03 (#3377)	
	
	Если ТЗПроводки.Количество() > 0 Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-03 (#3377)
		Движения[ИмяРегистраБухгалтерии].Загрузить(ТЗПроводки);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-03 (#3377)	
		Движения[ИмяРегистраБухгалтерии].Записывать = Истина;
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьПроводкиКЗаписи()

// Устанавливает/снимает признак активности движений документа в зависимости от пометки удаления.
// Следует вызывать перед записью измененной пометки удаления.
// Помеченный на удаление документ не должен иметь активных движений.
// Не помеченный на удаление документ может иметь неактивные движения.
Процедура СинхронизироватьАктивностьДвиженийСПометкойУдаления()
	
	Если НЕ ПометкаУдаления 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") = ПометкаУдаления Тогда
		// Не помеченный на удаление документ может иметь неактивные движения.
		// Однако, при снятии пометки удаления все движения становятся активными.
		Возврат;
	КонецЕсли;
	
	Активность = НЕ ПометкаУдаления;
	
	Для Каждого Движение Из Движения Цикл
		
		Если Движение.Записывать = Ложь Тогда // При работе формы набор может быть уже "потроган" (прочитан, модифицирован)
			// Набор никто не трогал
			Движение.Прочитать();
		КонецЕсли;
		
		Для Каждого Строка Из Движение Цикл
			
			Если Строка.Активность = Активность Тогда
				Продолжить;
			КонецЕсли;
			
			// BF-2923. При контроле активности проводок, будут удалены лишние проводки открытого периода.
			Если ТипЗнч(Движение) = Тип("РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2") Тогда
				Если ЗначениеЗаполнено(Строка.ВидПроводки) Тогда
					Строка.Активность = Истина;
				Иначе
					Строка.Активность = Активность;
				КонецЕсли;
			Иначе		
				Строка.Активность   = Активность;
			КонецЕсли;
			
			Движение.Записывать = Истина; // На случай, если набор был прочитан выше.			
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

#Область АктивностиПроводокОтСтатуса

// Процедура выполняет изменение активность проводок в зависимости от статуса. 
//
Процедура УстановитьАктивностьПроводокОтСтатуса()
	
	РезСтруктура  = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	Активность    = ?(РезСтруктура.Статус = Справочники.бит_СтатусыОбъектов.Операция_Утверждена, Истина, ЛОжь);
	
	Для Каждого Движение Из Движения Цикл
		
		Если Движение.Записывать = Ложь Тогда // При работе формы набор может быть уже "потроган" (прочитан, модифицирован)
			// Набор никто не трогал
			Движение.Прочитать();
		КонецЕсли;
		
		Для Каждого Строка Из Движение Цикл
			
			Если Строка.Активность = Активность Тогда
				Продолжить;
			КонецЕсли;
			
			Строка.Активность   = Активность;
			Движение.Записывать = Истина; // На случай, если набор был прочитан выше.			
		КонецЦикла;		
	КонецЦикла;
			
КонецПроцедуры // ИзменениеАктивностиПроводокОтСтатуса()

// Функция устанавливает активность проводок в зависимости от статуса.
//
// Возвращаемое значение:
//  Результат - Строка.
//
Функция ТребуетсяУстанавливатьАктивностьПроводокОтСтатуса()
	
	Результат = Ложь;
	
	Если ПометкаУдаления 
		И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") = ПометкаУдаления Тогда
		Возврат Результат;
	КонецЕсли;

	Если Не ПометкаУдаления Тогда
		ИмяРегистраБухгалтерии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрБухгалтерии, "ИмяОбъекта");
		ЭтоМеждународный       = бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(ИмяРегистраБухгалтерии);
		
		Если ЭтоМеждународный И Константы.бит_му_ПроводитьОперацииПослеУтверждения.Получить() Тогда
			Результат = Истина;
		КонецЕсли;	
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции // УстанавливатьАктивностьПроводокОтСтатуса()

#КонецОбласти

#КонецОбласти

//БИТ Тртилек 22012014 функция возвращает истину, если организация консолидирующая
Функция ОрганизацияКонсолидирующая()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ПериметрКонсолидации
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(
	               |			&ДатаСреза,
	               |			Организация = &Организация
	               |				И ТипКонсолидации = &Консолидирующая) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаСреза"  , Дата);
	Запрос.УстановитьПараметр("Консолидирующая", Перечисления.бит_му_ТипыКонсолидации.Консолидирующая);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Консолидирующая = Истина;
	Иначе
		Консолидирующая = Ложь;
	КонецЕсли;
	
	Возврат Консолидирующая;
	
КонецФункции
///БИТ Тртилек 

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаУправленческогоУчета     = Константы.бит_ВалютаУправленческогоУчета.Получить();

// Сформируем список выбора регистров бухгалтерии.
#Если Клиент Тогда
мСписокРегистров = бит_УправленческийУчет.СформироватьСписокОбъектовДляВыбора(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии, "бит_Дополнительный");
#КонецЕсли

мЕстьРесурсСуммаМУ  = Ложь;
мКоличествоСубконто = 4;

// Получаем статус и дату изменения статуса для документа.
РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);

мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

#КонецОбласти 	

#КонецЕсли
