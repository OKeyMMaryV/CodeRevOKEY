#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
			
	// Операция (управленческий).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор	= "УправленческаяОперация";
	КомандаПечати.Представление	= НСтр("ru = 'Операция (управленческий)'");
	Если НЕ бит_ОбщегоНазначения.ЭтоУТ() Тогда
		КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КонецЕсли;
	КомандаПечати.Порядок		= 10;	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УправленческаяОперация") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УправленческаяОперация",
			НСтр("ru = 'Операция (управленческий)'"), 
			СформироватьПечатнуюФормуУправленческаяОперация(МассивОбъектов),,
			"Документ.бит_ОперацияУправленческий.УправленческаяОперация");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);		
         
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает результат основного запроса по бюджетной операции.
// 
// Параметры:
//  МассивСсылок - Массив.
//  
// Возвращаемое значение:
//   Результат запроса
// 
Функция ПолучитьРезультатЗапросаПоУправленческойОперации(Ссылка, ИмяРегистраБухгалтерии, лЕстьРесурсСуммаМУ)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УправленческийДвиженияССубконто.Регистратор КАК Ссылка,
	|	УправленческийДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	УправленческийДвиженияССубконто.Организация,
	|	УправленческийДвиженияССубконто.СчетДт,
	|	УправленческийДвиженияССубконто.СубконтоДт1,
	|	УправленческийДвиженияССубконто.СубконтоДт2,
	|	УправленческийДвиженияССубконто.СубконтоДт3,
	|	УправленческийДвиженияССубконто.СубконтоДт4,
	|	УправленческийДвиженияССубконто.СчетКт,
	|	УправленческийДвиженияССубконто.СубконтоКт1,
	|	УправленческийДвиженияССубконто.СубконтоКт2,
	|	УправленческийДвиженияССубконто.СубконтоКт3,
	|	УправленческийДвиженияССубконто.СубконтоКт4,
	|	УправленческийДвиженияССубконто.ВалютаДт,
	|	УправленческийДвиженияССубконто.ВалютаКт,
	|	УправленческийДвиженияССубконто.СуммаРегл,
	|	УправленческийДвиженияССубконто.СуммаУпр,
	|";
	
	Если лЕстьРесурсСуммаМУ Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	УправленческийДвиженияССубконто.СуммаМУ,
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	УправленческийДвиженияССубконто.ВалютнаяСуммаДт,
	|	УправленческийДвиженияССубконто.ВалютнаяСуммаКт,
	|	УправленческийДвиженияССубконто.КоличествоДт,
	|	УправленческийДвиженияССубконто.КоличествоКт,
	|	УправленческийДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ДвиженияССубконто(, , Регистратор = &Ссылка) КАК УправленческийДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	//БИТ Тртилек 29.03.2012 Уберем четвертое субконто для планов счетов с наименьшим количеством Субконто
	Если Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто < 4 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УправленческийДвиженияССубконто.СубконтоДт4,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УправленческийДвиженияССубконто.СубконтоКт4,", "");
		Если Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто < 3 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УправленческийДвиженияССубконто.СубконтоДт3,", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УправленческийДвиженияССубконто.СубконтоКт3,", "");
		КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек 	
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
		
КонецФункции

// Функция формирует печатную форму бюджетной операции.
// 
// Параметры:
//  МассивСсылок  		   - Массив.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент.
// 
Функция СформироватьПечатнуюФормуУправленческаяОперация(МассивСсылок)
	
	// Текущий документ	
	ТекДокумент = МассивСсылок[0];
		
	ИмяРегистраБухгалтерии = ТекДокумент.РегистрБухгалтерии.ИмяОбъекта;
	// Проверим наличие ресурса с именем "СуммаМУ".
	лЕстьРесурсСуммаМУ  = бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(ИмяРегистраБухгалтерии);
	// Количество субконто
	лКоличествоСубконто = 4;
	//БИТ Тртилек 29.03.2012 Уберем четвертое субконто для планов счетов с наименьшим количеством Субконто
	Если Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто < 4 Тогда
		лКоличествоСубконто = 3;
		Если Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто < 3 Тогда
			лКоличествоСубконто = 2;
		КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек 	
	// Спиосок регистров
	лСписокРегистров = бит_УправленческийУчет.СформироватьСписокОбъектовДляВыбора(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии, "бит_Дополнительный");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_бит_ОперацияУправленческий_УправленческаяОперация";
			
	// Формируем запрос по документам.
	РезультатЗапроса = ПолучитьРезультатЗапросаПоУправленческойОперации(ТекДокумент, ИмяРегистраБухгалтерии, лЕстьРесурсСуммаМУ);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		// Получаем макет и области.
		Макет = ПолучитьМакет("УправленческаяОперация");
		// Получаем области
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрокаТаблицы  	= Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
		ОбластьПодвал  	 	 	= Макет.ПолучитьОбласть("Подвал");
		
		// Вывод результатов
		ПервыйДокумент   = Истина;     		
							
		// Разделитель страниц
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Текущий документ
		
		// Выведем шапку документа.
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ТекДокумент.Организация, ТекДокумент.Дата);
		// Заполним представление регистра бухгалтерии.
		ПредставлениеРегистра = бит_ПраваДоступа.ПолучитьПредставлениеОбъектаСистемыИзСпискаЗначений(лСписокРегистров, ТекДокумент.РегистрБухгалтерии);
		
		ОбластьШапка.Параметры.Организация    	     = бит_ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьШапка.Параметры.ПредставлениеРегистра = ПредставлениеРегистра;
		ОбластьШапка.Параметры.НомерДокумента 	     = бит_ОбщегоНазначенияКлиентСервер.ПолучитьНомерНаПечать(ТекДокумент);
		ОбластьШапка.Параметры.ДатаДокумента  	     = Формат(ТекДокумент.Дата, "ДЛФ=D");
		ОбластьШапка.Параметры.Содержание     	     = ТекДокумент.Содержание;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТекстСуммаЗТ = "Регл." + Символы.ПС + "Упр." + ?(лЕстьРесурсСуммаМУ, Символы.ПС + "МСФО", "");
		ОбластьЗаголовокТаблицы.Параметры.ТекстСумма = ТекстСуммаЗТ;
		
		// Выведем заголовок таблицы.
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		// Вывод таблицы движений
		ВыборкаИзЗапросаДвижения = РезультатЗапроса.Выбрать();
		// ВыборкаИзЗапросаДвижения = ВыборкаИзЗапросаВерх.Выбрать();		
		Пока ВыборкаИзЗапросаДвижения.Следующий() Цикл
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаИзЗапросаДвижения);
			
			ТекстСуммаСТ = "" + бит_ОбщегоНазначения.ФорматСумм(ВыборкаИзЗапросаДвижения.СуммаРегл) + Символы.ПС
			+ бит_ОбщегоНазначения.ФорматСумм(ВыборкаИзЗапросаДвижения.СуммаУпр) 
			+ ?(лЕстьРесурсСуммаМУ, Символы.ПС + бит_ОбщегоНазначения.ФорматСумм(ВыборкаИзЗапросаДвижения.СуммаМУ), "");
			
			ОбластьСтрокаТаблицы.Параметры.ТекстСумма = ТекстСуммаСТ;
			
			АналитикаДт = "";
			АналитикаКт = "";
			
			Для Ном = 1 По лКоличествоСубконто Цикл
				
				АналитикаДт = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(АналитикаДт, ВыборкаИзЗапросаДвижения["СубконтоДт" + Ном], Символы.ПС);
				АналитикаКт = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(АналитикаКт, ВыборкаИзЗапросаДвижения["СубконтоКт" + Ном], Символы.ПС);
				
			КонецЦикла;
			
			ОбластьСтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
			ОбластьСтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
			
			// Проверим, помещается ли строка с подвалом.
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьСтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ОбластьПодвалТаблицы);
			СтрокаСПодвалом.Добавить(ОбластьПодвал);
			
			Если НЕ бит_ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				
				// Выведем подвал таблицы.
				ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
				
				// Выведем разрыв страницы.
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Выведем заголовок таблицы.
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);			
			
		КонецЦикла;
		
		// Вывод подвала таблицы движений
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		
		// Вывод подвала документа
		// !!!БИТ.СДЕЛАТЬ - вывод исполнителя по физ. лицу?
		// Ответственный = ТекДокумент.Ответственный;
		// ОбластьПодвал.Параметры.РасшифровкаПодписиИсполнителя = 
		// 							?(НЕ ЗначениеЗаполнено(Ответственный)
		// 								, ""
		// 								, ОбщегоНазначения.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
		ОбластьПодвал.Параметры.РасшифровкаПодписиИсполнителя = ТекДокумент.Ответственный;
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// КонецЦикла;
		
	КонецЕсли;
	
	// Параметры макета по умолчанию.
	ТабличныйДокумент.ПолеСверху              = 10;
	ТабличныйДокумент.ПолеСлева               = 0;
	ТабличныйДокумент.ПолеСнизу               = 0;
	ТабличныйДокумент.ПолеСправа              = 0;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб 			  = Истина;
	
	Возврат ТабличныйДокумент;
		
КонецФункции

#КонецОбласти

#КонецЕсли
