
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

&НаКлиенте
Перем мНастройкиСубконтоСчетовМУ; // Хранит настройки видимости полей субконто.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Максимальное количество субконто на счете по МУ.
	фКоличествоСубконтоМУ = 4;
	
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("Дата");
	фКэшРеквизитов.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();

	Если Параметры.Ключ.Пустая() Тогда
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО();
		УстановитьСостояниеДокумента();
	Иначе
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО(Ложь);
	КонецЕсли;
	
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы,"СчетУчета","Субконто",фКоличествоСубконтоМУ,,"Элементы.НематериальныеАктивы.ТекущиеДанные");
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы,"КорСчет","КорСубконто",фКоличествоСубконтоМУ,,"Элементы.НематериальныеАктивы.ТекущиеДанные");
	
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетУчета"
												   ,"Субконто"
												   ,фКоличествоСубконтоМУ
												   ,"НематериальныеАктивы"
												   ,"Элементы.НематериальныеАктивы.ТекущиеДанные");
												   
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"КорСчет"
												   ,"КорСубконто"
												   ,фКоличествоСубконтоМУ
												   ,"НематериальныеАктивы"
												   ,"Элементы.НематериальныеАктивы.ТекущиеДанные");											   
												   
	ВосстановитьКоличествоДоступныхСубконто();
	
	НастроитьОформлениеФормы();														   
	
	// Изменение кода. Начало. 03.04.2014{{
	УстановитьПараметрыВыбораДляСчетов();
    // Изменение кода. Конец. 03.04.2014}}
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();

	Элементы.НематериальныеАктивыРедактироватьВДиалоге.Пометка = флРедактироватьВДиалоге;
	Элементы.ГруппаДанныеСтроки.Видимость = флРедактироватьВДиалоге;
	
	ЗаполнитьКэшНастроекСубконто(мНастройкиСубконтоСчетовМУ);
	
	УстановитьВидимость();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ВыбранноеЗначение, "РезультатИзменения") Тогда
		
		ПерезаполнитьТабличнуюЧасть(ВыбранноеЗначение.ХранилищеДанные);
		
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("Действие") Тогда
			
			Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
				
				Если Объект.НематериальныеАктивы.Количество() > 0 Тогда
					
					Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
					ТекстВопроса = НСтр("ru='Табличная часть ""Нематериальные активы"" будет очищена. Продолжить?'");
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
					
				Иначе
					
					ДобавитьЗагрузитьНМА(ВыбранноеЗначение);
					
				КонецЕсли;
				
			Иначе
				
				ДобавитьЗагрузитьНМА(ВыбранноеЗначение);
				
			КонецЕсли;
			
		КонецЕсли; // В структуре есть поле действие 
	КонецЕсли; // Это структура
	
КонецПроцедуры

// Процедура - завершение выбора НМА 
// 
&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НематериальныеАктивы.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьЗагрузитьНМА(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = УникальныйИдентификатор Тогда
		
		Если ИмяСобытия = "ВосстановитьЗагруженныеИзExcelДанные" Тогда	        
	        ВосстановитьЗагруженныеИзExcelДанные(Параметр.ИмяТабЧасти, Параметр.Ссылка);			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	 ВосстановитьКоличествоДоступныхСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ПринятиеКУчетуНМА";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,,Истина)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
	фКэшРеквизитов.Дата = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не фКэшРеквизитов.Организация = Объект.Организация
		И Объект.НематериальныеАктивы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект, Элемент);
		ТекстВопроса = НСтр("ru='Табличная часть ""Нематериальные активы"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ПриИзмененииОрганизации();
	
		фКэшРеквизитов.Организация = Объект.Организация;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НематериальныеАктивы.Очистить();
	Иначе
		Объект.Организация = фКэшРеквизитов.Организация;
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОрганизации();
	
	фКэшРеквизитов.Организация = Объект.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНематериальныеАктивы

&НаКлиенте
Процедура НематериальныеАктивыПриАктивизацииСтроки(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // НематериальныеАктивыПриАктивизацииСтроки()

&НаКлиенте
Процедура НематериальныеАктивыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ПриНачалеРедактированияСтрокиНМА(ТекущиеДанные.ПолучитьИдентификатор());//, фКэшЗначений);
		
	КонецЕсли;
	
КонецПроцедуры // НематериальныеАктивыПриНачалеРедактирования()

&НаКлиенте
Процедура НематериальныеАктивыНематериальныйАктивПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НМАНематериальныйАктивПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // НематериальныеАктивыНематериальныйАктивПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыКлассПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НМАКлассПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // НематериальныеАктивыКлассПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыНачислятьАмортизациюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.НачислятьАмортизацию Тогда
		ТекущиеДанные.НачислятьАмортизациюСТекущегоПериода = Ложь;
	КонецЕсли;
	
КонецПроцедуры // НематериальныеАктивыНачислятьАмортизациюПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыНачислятьАмортизациюСТекущегоПериодаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НачислятьАмортизациюСТекущегоПериода Тогда
		ТекущиеДанные.НачислятьАмортизацию = Истина;
	КонецЕсли;
	
КонецПроцедуры // НематериальныеАктивыНачислятьАмортизациюСТекущегоПериодаПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыПервоначальнаяСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	НМАПервоначальнаяСтоимостьПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // НематериальныеАктивыПервоначальнаяСтоимостьПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	НМАСуммаПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // НематериальныеАктивыСуммаПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыМетодНачисленияАмортизацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	НМАМетодНачисленияАмортизацииПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
	УстановитьВидимость();
	
КонецПроцедуры // НематериальныеАктивыМетодНачисленияАмортизацииПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеСчетаУчетаНМА(ТекущиеДанные.ПолучитьИдентификатор(), мНастройкиСубконтоСчетовМУ);
			
КонецПроцедуры // НематериальныеАктивыСчетУчетаПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"НематериальныеАктивы",Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные,"Субконто",ЗначениеСубконто);
	
КонецПроцедуры // НематериальныеАктивыСубконтоПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"НематериальныеАктивы",Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущиеДанные,"Субконто",ЗначениеСубконто);
	
КонецПроцедуры // НематериальныеАктивыСубконтоНачалоВыбора()

&НаКлиенте
Процедура НематериальныеАктивыСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "НематериальныеАктивы", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "Субконто"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // НематериальныеАктивыСубконтоАвтоПодбор()

&НаКлиенте
Процедура НематериальныеАктивыКорСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКорСчетаНМА(ТекущиеДанные.ПолучитьИдентификатор(), мНастройкиСубконтоСчетовМУ);
		
КонецПроцедуры // НематериальныеАктивыКорСчетПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыКорСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"НематериальныеАктивы",Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные,"КорСубконто",ЗначениеСубконто);
	
КонецПроцедуры // НематериальныеАктивыКорСубконтоПриИзменении()

&НаКлиенте
Процедура НематериальныеАктивыКорСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"НематериальныеАктивы",Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущиеДанные,"КорСубконто",ЗначениеСубконто);
	
КонецПроцедуры // НематериальныеАктивыКорСубконтоНачалоВыбора()

&НаКлиенте
Процедура НематериальныеАктивыКорСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "НематериальныеАктивы", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "КорСубконто"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // НематериальныеАктивыКорСубконтоАвтоПодбор()
	
#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиКомандРаботыСExcel

#Область ЗагрузкаДанныхИзТабличногоДокумента

&НаКлиенте
Процедура ЗагрузитьЧерезТабДок(Команда)
    
    ОткрытьФормуЗагрузкиДанныхЧерезТабДок();	
    
КонецПроцедуры // ЗагрузитьЧерезТабДок()

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура РедактироватьВДиалоге(Команда)
	
	флРедактироватьВДиалоге = НЕ флРедактироватьВДиалоге;
	
	Элементы.НематериальныеАктивыРедактироватьВДиалоге.Пометка = флРедактироватьВДиалоге;              
	Элементы.ГруппаДанныеСтроки.Видимость = флРедактироватьВДиалоге;
	
	Если флРедактироватьВДиалоге Тогда
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНМА(Команда)
	
	ПараметрыФормы = ЗаполнитьПараметрыПодбора(); 	
	
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма", ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры //ПодборНМА()

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	РежимПодбора = фКэшЗначений.Перечисления.бит_му_РежимыПодбораВНА.ПринятиеКУчетуНМАПоОстаткам;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Режим"			    , РежимПодбора);
	ПараметрыФормы.Вставить("ДатаОкончания"		, КонецМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("Организация"		, Объект.Организация);
	ПараметрыФормы.Вставить("ВалютаДокумента"	, Объект.ВалютаДокумента);	
	
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры // ПодборПоОстаткам()

&НаКлиенте
Процедура ИзменитьТабЧасть(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Команда"	 		, "бит_му_ПринятиеКУчетуНМА");
	ПараметрыФормы.Вставить("Объект"	 		, Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти"	, "НематериальныеАктивы");
	ПараметрыФормы.Вставить("ТабличнаяЧасть"	, Объект.НематериальныеАктивы);
		
	ОткрытьФорму("Обработка.бит_ИзменениеТабЧастиДокумента.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.СчетНРП);
	МассивЭлементов.Добавить(Элементы.НематериальныеАктивыСчетНачисленияАмортизации);
	МассивЭлементов.Добавить(Элементы.НематериальныеАктивыСчетРезерваПереоценки);
	МассивЭлементов.Добавить(Элементы.НематериальныеАктивыСчетСниженияСтоимости);
	МассивЭлементов.Добавить(Элементы.НематериальныеАктивыСчетУчета);
	МассивЭлементов.Добавить(Элементы.НематериальныеАктивыКорСчет);
	МассивЭлементов.Добавить(Элементы.СчетНачисленияАмортизации);
	МассивЭлементов.Добавить(Элементы.СчетРезерваПереоценки);
	МассивЭлементов.Добавить(Элементы.СчетСниженияСтоимости);
	МассивЭлементов.Добавить(Элементы.СчетУчета);
	МассивЭлементов.Добавить(Элементы.КорСчет);

	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаСервере
Процедура НастроитьОформлениеФормы()
	
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"НематериальныеАктивы"
	                                                           ,"Субконто"
															   ,"КоличествоДоступныхСубконто"
															   ,фКоличествоСубконтоМУ
                                                               ,,,,,, Истина);
															   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"НематериальныеАктивы"
	                                                           ,"КорСубконто"
															   ,"КоличествоДоступныхКорСубконто"
															   ,фКоличествоСубконтоМУ
                                                               ,,,,,, Истина);
															   
	УстановитьОформлениеПараметровАмортизации();
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
												   
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеПараметровАмортизации()
	
	Для Каждого ТекущийМетод Из Перечисления.бит_му_МетодыНачисленияАмортизацииНМА Цикл
		
		ИмитацияСтроки = Новый Структура;
		ИмитацияСтроки.Вставить("МетодНачисленияАмортизации", ТекущийМетод);
		
		МассивНедоступныхПолей = бит_му_ВНА.СформироватьМассивНедоступныхПараметровАмортизации(ИмитацияСтроки);
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		// Оформление
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(225,225,225));
		
		// Оформляемые поля
		Для Каждого ТекущееПоле Из МассивНедоступныхПолей Цикл
			ПолеОформления = ЭлементУО.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НематериальныеАктивы"+ТекущееПоле);
			ПолеОформления.Использование = Истина;
		КонецЦикла;
		
		// Условие
		бит_ОбщегоНазначенияКлиентСервер.УстановитьОтборУСписка(ЭлементУО.Отбор
															   ,Новый ПолеКомпоновкиДанных("Объект.НематериальныеАктивы.МетодНачисленияАмортизации")
															   ,ТекущийМетод
															   ,ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	Для каждого СтрокаТаблицы Из Объект.НематериальныеАктивы Цикл
        
        СвСчУч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
        СвСчКр = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.КорСчет);
        
        СтрокаТаблицы.КоличествоДоступныхСубконто    = СвСчУч.КоличествоСубконто;
		СтрокаТаблицы.КоличествоДоступныхКорСубконто = СвСчКр.КоличествоСубконто;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	КэшПеречисления = Новый Структура;
	
	КэшПеречисления.Вставить("бит_му_МетодыНачисленияАмортизацииНМА", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_МетодыНачисленияАмортизацииНМА));
	КэшПеречисления.Вставить("бит_му_РежимыПодбораВНА", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_РежимыПодбораВНА));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуМСФО(ЗаполнитьВалютуДокумента=Истина)
	
	// Получим валюту международного учета.
	ВалютаМСФО 	 = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	СтрокаВалютаМежУчета = Строка(ВалютаМСФО);
	
	Элементы.ДекорацияВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМежУчета), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМежУчета);
	
	Если ЗаполнитьВалютуДокумента Тогда
		Объект.ВалютаДокумента = ВалютаМСФО;
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

&НаСервере
Процедура УстановитьВидимостьСубконто(СчетМУ, ИмяЭлемента, мНастройкиСубконтоСчетовМУ)
	
	НастройкиСубконто = мНастройкиСубконтоСчетовМУ[СчетМУ];
	
	Если НастройкиСубконто = Неопределено Тогда
		НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(СчетМУ,фКоличествоСубконтоМУ);
		мНастройкиСубконтоСчетовМУ.Вставить(СчетМУ, НастройкиСубконто);
	КонецЕсли;
	
	Ном = 1;
	Для каждого ЭлементНастроек Из НастройкиСубконто Цикл
		
		Если ЭлементНастроек.Пометка Тогда
			ТекИмяЭлемента = ИмяЭлемента + Ном;
		Иначе
			ТекИмяЭлемента = ИмяЭлемента + Ном + "Нет";
		КонецЕсли;
		
		Элементы["ГруппаСтраницы" + ИмяЭлемента + Ном].ТекущаяСтраница = Элементы["ГруппаСтраница" + ТекИмяЭлемента];
		
		Ном = Ном + 1;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСубконто()

&НаСервере
Процедура УстановитьВидимостьСервер(Ид, мНастройкиСубконтоСчетовМУ)
	
	ДанныеСтроки = Объект.НематериальныеАктивы.НайтиПоИдентификатору(Ид);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		УстановитьВидимостьСубконто(ДанныеСтроки.СчетУчета, "СубконтоСчетУчета", мНастройкиСубконтоСчетовМУ);		
		УстановитьВидимостьСубконто(ДанныеСтроки.КорСчет  , "СубконтоКорСчет"  , мНастройкиСубконтоСчетовМУ);
		
		// Установим доступность параметров ВНА зависимых от метода начисления амортизации.
		
		ИмяСтраницы = "ПустойМетодНачисленияАмортизации";
		
		Для Каждого КлючЗначение Из фКэшЗначений.Перечисления.бит_му_МетодыНачисленияАмортизацииНМА Цикл
			Если КлючЗначение.Значение = ДанныеСтроки.МетодНачисленияАмортизации Тогда
				ИмяСтраницы = КлючЗначение.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элементы["ГруппаСтраницыПараметрыАмортизации"].ТекущаяСтраница = Элементы["ГруппаСтраница"+ИмяСтраницы];
		
	КонецЕсли;
		
КонецПроцедуры // УстановитьВидимостьСервер()

&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры // ИзменениеВалюты()

&НаСервере
Процедура ПриИзмененииОрганизации()
	
	// Заполним счет нераспределенной прибыли из учетной политики.
	Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСчетаУчетаНМА(Идентификатор, мНастройкиСубконтоСчетовМУ = Неопределено)
	
	ТекущиеДанные = Объект.НематериальныеАктивы.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущиеДанные.СчетУчета, фКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущиеДанные, НастройкиСубконто, "Субконто");

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчета);
    
	ТекущиеДанные.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;
	
	// Синхронизируем реквизиты строки НМА.
	СинхронизироватьРеквизитыСтрокиНМА(ТекущиеДанные, "Субконто");
	
	Если мНастройкиСубконтоСчетовМУ <> Неопределено Тогда	
		УстановитьВидимостьСубконто(ТекущиеДанные.СчетУчета, "СубконтоСчетУчета", мНастройкиСубконтоСчетовМУ);	
	КонецЕсли;
	
КонецПроцедуры // ИзменениеСчетаУчетаНМА()

&НаСервере
Процедура ИзменениеКорСчетаНМА(Идентификатор, мНастройкиСубконтоСчетовМУ = Неопределено)
	
	Если ТипЗнч(Идентификатор) = Тип("Число") Тогда
		ТекущиеДанные = Объект.НематериальныеАктивы.НайтиПоИдентификатору(Идентификатор);
	Иначе
		ТекущиеДанные = Идентификатор;
	КонецЕсли;
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущиеДанные.КорСчет, фКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущиеДанные, НастройкиСубконто, "КорСубконто");

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.КорСчет);
	    
	ТекущиеДанные.КоличествоДоступныхКорСубконто = СвСч.КоличествоСубконто;
	
	// Синхронизируем реквизиты строки НМА.
	СинхронизироватьРеквизитыСтрокиНМА(ТекущиеДанные, "КорСубконто");
	
	Если мНастройкиСубконтоСчетовМУ <> Неопределено Тогда	
		УстановитьВидимостьСубконто(ТекущиеДанные.КорСчет, "СубконтоКорСчет", мНастройкиСубконтоСчетовМУ);	
	КонецЕсли;
	
КонецПроцедуры // ИзменениеКорСчетаНМА()

&НаСервере
Процедура ЗаполнитьКлассПоУмолчанию(ТекущиеДанные)

	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;  		
	КонецЕсли; 
	
	// Изменение кода. Начало. 19.12.2016{{
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьКлассПоУмолчаниюМодуль(ТекущиеДанные);	
		
	ПриИзмененииСчетУчета(ТекущиеДанные);	
	// Изменение кода. Конец. 19.12.2016}}
	
КонецПроцедуры // ЗаполнитьКлассПоУмолчанию()

&НаСервере
Процедура ИзменениеКласса(ТекущиеДанные)

	Если ТекущиеДанные = Неопределено Тогда	
		Возврат; 	
	КонецЕсли; 
	
	// Изменение кода. Начало. 19.12.2016{{
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеКлассаМодуль(ТекущиеДанные, Истина);	
		
	ПриИзмененииСчетУчета(ТекущиеДанные);	
	// Изменение кода. Конец. 19.12.2016}}

КонецПроцедуры // ИзменениеКласса()

&НаСервере
Процедура ПриИзмененииСчетУчета(ТекущаяСтрока)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИзменениеСчетаУчетаНМА(ТекущаяСтрока.ПолучитьИдентификатор());
													 
	// Синхронизируем реквизиты строки НМА.
	СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, "Субконто");
													 
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, ИмяСубконто)
	
	Если ТекущаяСтрока = Неопределено Тогда
		 Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяСтрока.НематериальныйАктив) Тогда
		
		ТипОС = Тип("СправочникСсылка.НематериальныеАктивы");
		//++Сис_инфо // заполнение объекта строительства // 2012-07-23
		ТипОбъектСтроительства = Тип("СправочникСсылка.ОбъектыСтроительства");
		//--Сис_инфо
		
		Для Ном = 1 По фКоличествоСубконтоМУ Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипОС Тогда
				 ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.НематериальныйАктив;
			 КонецЕсли; 
			 
			//++Сис_инфо // заполнение объекта строительства // 2012-07-23
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипОбъектСтроительства Тогда
				 ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.НематериальныйАктив.бит_ОбъектСтроительства;
			КонецЕсли;
			//--Сис_инфо
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиНМА()

&НаСервере
Процедура ДобавитьЗагрузитьНМА(ВыбранноеЗначение)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Документы.бит_му_ПринятиеКУчетуНМА.ЗаполнитьНМА(ВыбранноеЗначение, ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы,"СчетУчета","Субконто",фКоличествоСубконтоМУ,,"Элементы.НематериальныеАктивы.ТекущиеДанные");
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы,"КорСчет","КорСубконто",фКоличествоСубконтоМУ,,"Элементы.НематериальныеАктивы.ТекущиеДанные");
	
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетУчета"
												   ,"Субконто"
												   ,фКоличествоСубконтоМУ
												   ,"НематериальныеАктивы"
												   ,"Элементы.НематериальныеАктивы.ТекущиеДанные");
												   
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"КорСчет"
												   ,"КорСубконто"
												   ,фКоличествоСубконтоМУ
												   ,"НематериальныеАктивы"
												   ,"Элементы.НематериальныеАктивы.ТекущиеДанные");											   
												   
	ВосстановитьКоличествоДоступныхСубконто();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшНастроекСубконто(КэшНастроек)
	
	КэшНастроек = Новый Соответствие;
	
	Для Каждого ТекСтрока Из Объект.НематериальныеАктивы Цикл
		
		Если КэшНастроек[ТекСтрока.СчетУчета] = Неопределено Тогда
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекСтрока.СчетУчета,фКоличествоСубконтоМУ);
			КэшНастроек.Вставить(ТекСтрока.СчетУчета, НастройкиСубконто);
		КонецЕсли;
		
		Если КэшНастроек[ТекСтрока.КорСчет] = Неопределено Тогда
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекСтрока.КорСчет,фКоличествоСубконтоМУ);
			КэшНастроек.Вставить(ТекСтрока.КорСчет, НастройкиСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.НематериальныеАктивы;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество()>0 
		И ЗначениеЗаполнено(мКэшРеквизитовФормы.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаДокумента)Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
	
	КонецЕсли;
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТаблицаОбъекта = Объект.НематериальныеАктивы;
		
		// Получим курсы валют на дату принятия к учету для каждого ОС.
		КурсыСтарые = ПолучитьКурсыВалютПоПериодам(мКэшРеквизитовФормы);
		КурсыНовые = ПолучитьКурсыВалютПоПериодам(,Истина);
		
		МассивСуммДляПересчета = Новый Массив;
		МассивСуммДляПересчета.Добавить("ПервоначальнаяСтоимость");
		МассивСуммДляПересчета.Добавить("СуммаНачисленнойАмортизации");
		МассивСуммДляПересчета.Добавить("Сумма");
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			СтарыеКурсы = КурсыСтарые[СтрокаТаблицы.ДатаПринятияКУчету].СтарыеКурсы;
			НовыеКурсы = КурсыНовые[СтрокаТаблицы.ДатаПринятияКУчету].НовыеКурсы;
			
			Для каждого ИмяСуммы Из МассивСуммДляПересчета Цикл
				
				СтрокаТаблицы[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[ИмяСуммы]
																								,СтарыеКурсы.Валюта
																								,НовыеКурсы.Валюта
																								,СтарыеКурсы.Курс
																								,НовыеКурсы.Курс
																								,СтарыеКурсы.Кратность
																								,НовыеКурсы.Кратность);
				
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()

&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	  
КонецПроцедуры // ИзменениеВалютыСервер()

&НаСервере
Функция ЗаполнитьПараметрыПодбора()

	ДокументОбъект   = РеквизитФормыВЗначение("Объект");
	ПараметрыПодбора = Документы.бит_му_ПринятиеКУчетуНМА.ЗаполнитьПараметрыПодбора(ДокументОбъект);
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

&НаСервере
Функция ПолучитьКурсыВалютПоПериодам(КешСтарыеКурсы = Неопределено, флНовыеКурсы=Ложь)
	
	Если флНовыеКурсы Тогда
		
		НовыеКурсы = Новый Структура;
		НовыеКурсы.Вставить("Валюта", Объект.ВалютаДокумента);
		НовыеКурсы.Вставить("Кратность", Объект.КратностьДокумента);
		НовыеКурсы.Вставить("Курс", Объект.КурсДокумента);
		
		СтруктураКурсовВалют = Новый Структура;
		СтруктураКурсовВалют.Вставить("НовыеКурсы", НовыеКурсы);
		
	Иначе
		
		СтарыеКурсы = Новый Структура;
		СтарыеКурсы.Вставить("Валюта", КешСтарыеКурсы.ВалютаДокумента); 
		СтарыеКурсы.Вставить("Кратность", КешСтарыеКурсы.КратностьДокумента);
		СтарыеКурсы.Вставить("Курс", КешСтарыеКурсы.КурсДокумента);
		
		СтруктураКурсовВалют = Новый Структура;
		СтруктураКурсовВалют.Вставить("СтарыеКурсы", СтарыеКурсы);
		
	КонецЕсли; 
	
	ТаблицаДанных = Объект.НематериальныеАктивы.Выгрузить(); 
	ТаблицаПериодов = ТаблицаДанных.Скопировать( , "ДатаПринятияКУчету");
	ТаблицаПериодов.Колонки.ДатаПринятияКУчету.Имя = "Период";
	ТаблицаПериодов.Свернуть("Период");
	
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсовВалют);
	
	Возврат Курсы;
	
КонецФункции

#КонецОбласти

#Область СерверныеПроцедурыОбработкиСобытийЭлементов

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	// Заполним счет нераспределенной прибыли из учетной политики.
	Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	
	УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	
КонецПроцедуры

&НаСервере
Процедура НМАНематериальныйАктивПриИзмененииСервер(ИДСтроки)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(ИДСтроки);
	
	ЗаполнитьКлассПоУмолчанию(ТекущаяСтрока);
	// Синхронизируем реквизиты строки НМА.
	СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, "Субконто");
	СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, "КорСубконто");
	
КонецПроцедуры

&НаСервере
Процедура НМАКлассПриИзмененииСервер(ИДСтроки)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(ИДСтроки);
	
	ИзменениеКласса(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура НМАПервоначальнаяСтоимостьПриИзмененииСервер(ИДСтроки)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(ИДСтроки);
	
	бит_ОбщегоНазначения.СинхронизироватьСвойстваКонтейнера(ТекущаяСтрока, Неопределено,
		Новый Структура("ПервоначальнаяСтоимость", "Сумма"));
	
КонецПроцедуры

&НаСервере
Процедура НМАМетодНачисленияАмортизацииПриИзмененииСервер(ИДСтроки)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(ИДСтроки);
	
	// Очистим параметры НМА недоступные для выбранного метода ничасления амортизации.
	бит_му_ВНА.ОчиститьНедоступныеПараметрыАмортизации(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура НМАСуммаПриИзмененииСервер(ИДСтроки)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(ИДСтроки);
	
	бит_ОбщегоНазначения.СинхронизироватьСвойстваКонтейнера(ТекущаяСтрока, Неопределено,
		Новый Структура("Сумма", "ПервоначальнаяСтоимость"));
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура УстановитьВидимость()
	
	ДанныеСтроки = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		УстановитьВидимостьСервер(ДанныеСтроки.ПолучитьИдентификатор(), мНастройкиСубконтоСчетовМУ);
		
	КонецЕсли;
		
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , "");
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаСервере 
Процедура ПриНачалеРедактированияСтрокиНМА(ИДСтроки)
	
	ТекущиеДанные = ?(ТипЗнч(ИДСтроки) = Тип("Число")
			 			, Объект.НематериальныеАктивы.НайтиПоИдентификатору(ИДСтроки)
						, ИДСтроки); 						
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ТекущиеДанные.НачислятьАмортизацию       = Истина;
	ТекущиеДанные.МетодНачисленияАмортизации = фКэшЗначений.Перечисления.бит_му_МетодыНачисленияАмортизацииНМА.Линейный;
	
	// Параметр "НачислятьАмортизациюСТекущегоПериодаНМА" извлекается из учетной политики.
    ДанныеУчетнойПолитики = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(Объект.Дата, Новый Структура("Организация", Объект.Организация));
	
	ТекущиеДанные.НачислятьАмортизациюСТекущегоПериода = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ДанныеУчетнойПолитики
												, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.НачислятьАмортизациюСТекущегоПериодаНМА);
	
КонецПроцедуры // ПриНачалеРедактированияСтрокиНМА()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,ИмяТабличногоПоля,ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента,ИмяТабличногоПоля,"");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура ИзменениеСубконто(Контейнер,ИмяСубконто,ЗначениеСубконто)

	  СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер,ИмяСубконто,фКоличествоСубконтоМУ);
	  бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто,ИмяСубконто,ЗначениеСубконто,фКоличествоСубконтоМУ);
      бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто,Контейнер,ИмяСубконто,"",фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Контейнер,ИмяСубконто,ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,ИмяСубконто
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

#КонецОбласти

#Область РаботаСExcel

#Область ЗагрузкаДанныхИзТабличногоДокумента

// Процедура открывает форму обработки бит_ЗагрузкаДанныхИзТабличногоДокумента проверяя записан ли документ. 
//
&НаКлиенте
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДок()
       
    Если Параметры.Ключ.Пустая() Тогда  
        
        ТекстВопроса = НСтр("ru='Данные еще не записаны. 
		|Выполнение действия ""Загрузить через табличный документ"" возможно только после записи данных.
		|Записать?'");				
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗаписатьДокументДляЗагрузкиЧерезТД", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        
    Иначе
        
        ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание();
        
    КонецЕсли;	
		
КонецПроцедуры // ОткрытьФормуЗагрузкиДанныхЧерезТабДок()

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Результат               - Строка.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте
Процедура ВопросЗаписатьДокументДляЗагрузкиЧерезТД(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
   	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
        
        ЗаписьВыполнена = Записать();        
        Если ЗаписьВыполнена Тогда
            
            // Флаг модифицированности автоматически не снимается.
            ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание();
            
        КонецЕсли;
    
	КонецЕсли;

КонецПроцедуры // ВопросЗаписатьДокументДляЗагрузкиЧерезТД()

// Процедура открывает форму обработки бит_ЗагрузкаДанныхИзТабличногоДокумента. 
//
&НаКлиенте
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание()

    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимЗагрузки"		 , "ТабличнаяЧасть");
    ПараметрыФормы.Вставить("ОбъектМетаданных"   , "Документ.бит_му_ПринятиеКУчетуНМА");
    ПараметрыФормы.Вставить("ОбъектДляЗаполнения", Объект.Ссылка);
    ПараметрыФормы.Вставить("ИмяТабЧасти"        , "НематериальныеАктивы");
    
    ОткрытьФорму("Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента.Форма"
                    , ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
  	                   
КонецПроцедуры // ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание() 

// Процедура восстанавливает загруженные из Excel данные.
//
// Параметры:
//  ОбъектДляЗаполнения - ДанныеФормыСтруктура.
//  ИмяТабЧасти         - Строка.
//  
&НаСервере
Процедура ВосстановитьЗагруженныеИзExcelДанные(ИмяТабЧасти, Знач ОбъектДляЗаполнения = Неопределено)
    
    Если ТипЗнч(ОбъектДляЗаполнения) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуНМА") Тогда
        ОбъектДляЗаполнения_Объект = ОбъектДляЗаполнения.ПолучитьОбъект();
    КонецЕсли;
	ЗначениеВДанныеФормы(ОбъектДляЗаполнения_Объект, Объект);
    
	Модифицированность = Истина;
	 
КонецПроцедуры // ВосстановитьЗагруженныеИзExcelДанные()

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПерезаполнитьТабличнуюЧасть(ХранилищеДанные)

	ДанныеЗаполнения = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ХранилищеДанные);
	
	Для каждого Строка Из ДанныеЗаполнения Цикл
		
		Объект.НематериальныеАктивы[Строка.ИД][Строка.Реквизит] = Строка.Значение;
		
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти
