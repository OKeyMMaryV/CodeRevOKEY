#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаМеждУчета Экспорт; // Хранит валюту международного учета

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Переменная, хранящее структуру шапки документа.
	Перем СтруктураШапкиДокумента;
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	// Подготовим структуру шапки документа.
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Получим структуру курсов валют.
	СтруктураКурсыВалют = ПолучитьСтруктуруКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	// Подготовим таблицы для возможности проведения.
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют);
	
	// Получим структуру курсов на даты принятия к учету.
	ИсторическиеКурсы = ПолучитьСтруктуруИсторическихКурсов(СтруктураТаблиц.НМА, СтруктураКурсыВалют);

	// Проверить заполнение таблиц.
	ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, ИсторическиеКурсы, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		// Заполнение нового документа
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
				ИзменениеВалютыМодуль();			
			КонецЕсли;
			                                          			
			Если ДанныеЗаполнения.Свойство("ТаблицаВНА") Тогда
				
				//НематериальныеАктивы.Загрузить(ДанныеЗаполнения.ТаблицаВНА);
				
				ТипНМА = Тип("СправочникСсылка.НематериальныеАктивы");
				
				// Метод начисления амортизации по умолчанию
				ЛинейныйМетодНачисления = Перечисления.бит_му_МетодыНачисленияАмортизацииНМА.Линейный;
				// Параметр "НачислятьАмортизациюСТекущегоПериодаНМА" извлекается из учетной политики.
	    		ДанныеУчетнойПолитики = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(Дата, Новый Структура("Организация", Организация));
				НачислятьАмортизациюСТекущегоПериода = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ДанныеУчетнойПолитики
												, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.НачислятьАмортизациюСТекущегоПериодаНМА);
	                                                   				
				Для каждого СтрокаТаблицы Из ДанныеЗаполнения.ТаблицаВНА Цикл
													
					СтрТч = НематериальныеАктивы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрТч, СтрокаТаблицы);
			
					СтрТч.НематериальныйАктив = СтрокаТаблицы.ВНА;								

					// Действия при начале редактирования строки НМА
					СтрТч.НачислятьАмортизацию       		   = Истина;
					СтрТч.МетодНачисленияАмортизации 		   = ЛинейныйМетодНачисления;	                 	
					СтрТч.НачислятьАмортизациюСТекущегоПериода = НачислятьАмортизациюСТекущегоПериода;
												
					// Класс по умолчанию
					ЗаполнитьКлассПоУмолчаниюМодуль(СтрТч);
					
					НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(СтрТч.СчетУчета, мКоличествоСубконтоМУ);									  
	 				бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(СтрТч, НастройкиСубконто, "Субконто");

					// Значения субконто НМА
					Если ЗначениеЗаполнено(СтрТч.НематериальныйАктив) Тогда 																
						Для Ном = 1 По мКоличествоСубконтоМУ Цикл 								
							ТекИмяСубконто = "Субконто" + Ном;  								
							Если ТипЗнч(СтрТч[ТекИмяСубконто]) = ТипНМА Тогда
								СтрТч[ТекИмяСубконто] = СтрТч.НематериальныйАктив;
							КонецЕсли;          							
						КонецЦикла;  						
					КонецЕсли;
					
					СтрТч.КорСчет = ДанныеЗаполнения.КорСчет;
				
				КонецЦикла;  		
			
			КонецЕсли;  	
			
		КонецЕсли;
						
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверим наличие суммы начисленной ранее амортизации.
	Если Не НематериальныеАктивы.Итог("СуммаНачисленнойАмортизации") = 0 Тогда
		
		Если Не ЗначениеЗаполнено(СчетНРП) Тогда
			ТекстСообщения = НСтр("ru='Не заполнено значение реквизита ""Счет нераспределенной прибыли""!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,ЭтотОбъект,"СчетНРП",Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим заполнение таб.части НематериальныеАктивы.
	
	ОбязательныеПоляАмортизации = Новый Структура;
	
	ОбязательныеПоляАмортизации.Вставить("МетодНачисленияАмортизации", НСтр("ru='Метод начисления амортизации'"));
	ОбязательныеПоляАмортизации.Вставить("СпособОтраженияРасходовПоАмортизации", НСтр("ru='Способ отражения расходов по амортизации'"));
	ОбязательныеПоляАмортизации.Вставить("СчетНачисленияАмортизации", НСтр("ru='Счет начисления амортизации'"));
	
	Для Каждого ТекущаяСтрока Из НематериальныеАктивы Цикл
		
		Ном = ТекущаяСтрока.НомерСтроки-1;
		
		Если ТекущаяСтрока.НачислятьАмортизацию Тогда
			
			Для Каждого ТекущееПоле Из ОбязательныеПоляАмортизации Цикл
				
				Если Не ЗначениеЗаполнено(ТекущаяСтрока[ТекущееПоле.Ключ]) Тогда
					ТекстСообщения = НСтр("ru='Не заполнено значение реквизита ""%1%""!'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекущееПоле.Значение);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,ЭтотОбъект,"НематериальныеАктивы["+Ном+"]."+ТекущееПоле.Ключ,Отказ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// 1c-izhtc, ChuckNorris, 18.08.2015 ( 
		// У реквизита СрокПолезногоИспользования убрал проверку заполнения (не проверять)
		Если НЕ (НЕ ТекущаяСтрока.НачислятьАмортизацию И ТекущаяСтрока.СрокПолезногоИспользования = 0) И ТекущаяСтрока.СрокПолезногоИспользования = 0 Тогда
			ТекстСообщения = НСтр("ru='Не заполнено значение реквизита ""%1%""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, НСтр("ru='Срок полезного использования'"));
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,ЭтотОбъект,"НематериальныеАктивы["+Ном+"]."+"СрокПолезногоИспользования",Отказ);
		КонецЕсли;
		// 1c-izhtc, ChuckNorris, 18.08.2015 )		
		
	КонецЦикла;
	
	СтруктураНеДублирующихсяПолей = Новый Структура;
	СтруктураНеДублирующихсяПолей.Вставить("НематериальныйАктив");
																		 
	////////////////////////////////////////////////////////////////////////////////
	// Таблица "НематериальныеАктивы"
	
	ТекстКритерий1 = "СтрокаТаблицы.НачислятьАмортизацию";
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("СрокПолезногоИспользования", ТекстКритерий1);

	бит_ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект
															, "НематериальныеАктивы"
															, СтруктураОбязательныхПолей
															, Отказ
															, Заголовок);
															
	////////////////////////////////////////////////////////////////////////////////
	// Проверим наличие дублей в табличной части "НематериальныеАктивы".
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
																	 , "НематериальныеАктивы"
																	 , СтруктураНеДублирующихсяПолей
																	 , Отказ
																	 , Заголовок);
																 
																	 
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура синхронизирует реквизиты строки НМА с аналитикой счетов.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.НематериальныеАктивы.
//  ИмяСубконто   - Строка.
// 
Процедура СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, ИмяСубконто) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		 Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяСтрока.НематериальныйАктив) Тогда
		
		ТипОС = Тип("СправочникСсылка.НематериальныеАктивы");
		
		Для Ном = 1 По мКоличествоСубконтоМУ Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипОС Тогда
				 ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.НематериальныйАктив;
			 КонецЕсли; 
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиНМА()

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// бит_ASubbotina Процедура обрабатывает изменение класса в строке табличной части.
// 
// Параметры:
//  ТекущиеДанные - СтрокаТабличнойЧасти.НематериальныеАктивы.
//  ВызовИзФормы  - Булево (По умолчанию = Ложь).
// 
Процедура ИзменениеКлассаМодуль(ТекущиеДанные, ВызовИзФормы = Ложь) Экспорт

	Если ТекущиеДанные = Неопределено Тогда	
		Возврат; 	
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(ТекущиеДанные.Класс) Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Организация", Организация);
		СтруктураПараметров.Вставить("Класс"      , ТекущиеДанные.Класс);
		
		ПараметрыКласса   = бит_му_ВНА.ПолучитьПараметрыКлассаВНА(СтруктураПараметров);
		МетаданныеОбъекта = Ссылка.Метаданные();
		
		Для Каждого ТекПараметр Из ПараметрыКласса Цикл
			
			ИмяКолонки 		  = ТекПараметр.Ключ;
			ЗначениеПараметра = ТекПараметр.Значение;
			
			Если бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(ИмяКолонки, МетаданныеОбъекта, "НематериальныеАктивы") Тогда
					
					ТекущиеДанные[ИмяКолонки] = ЗначениеПараметра;
					
					Если ИмяКолонки = "СчетУчета" И НЕ ВызовИзФормы Тогда
						НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущиеДанные.СчетУчета, мКоличествоСубконтоМУ);
						бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущиеДанные, НастройкиСубконто, "Субконто");
					КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Если ЗначениеЗаполнено(ТекущаяСтрока.Класс) Тогда.

КонецПроцедуры // ИзменениеКлассаМодуль()

// Процедура заполняет класс по умолчанию.
// 
// Параметры:
//  ТекущиеДанные - СтрокаТабличнойЧасти.НематериальныеАктивы.
// 
Процедура ЗаполнитьКлассПоУмолчаниюМодуль(ТекущиеДанные) Экспорт

	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;		
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НематериальныйАктив) И НЕ ЗначениеЗаполнено(ТекущиеДанные.Класс) Тогда
		
		 // Определяем класс по виду НМА и организации.
	     КлассПоУмолчанию = бит_му_ВНА.ПолучитьКлассВНА(ТекущиеДанные.НематериальныйАктив.ВидНМА, Организация);
		 Если ЗначениеЗаполнено(КлассПоУмолчанию) Тогда
		 
		 	ТекущиеДанные.Класс = КлассПоУмолчанию;
			ИзменениеКлассаМодуль(ТекущиеДанные);
		 
		 КонецЕсли; 
	
	 КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКлассПоУмолчаниюМодуль()

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
КонецПроцедуры

// Функция готовит таблицы документа для проведения.
// 
// Возвращаемое значение:
//   СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"			, Ссылка);
	Запрос.УстановитьПараметр("Организация"		, СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СостояниеПринято", Перечисления.бит_му_СостоянияНМА.ПринятоКУчету);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабЧасть.НомерСтроки,
	|	ТабЧасть.НематериальныйАктив,
	|	ТабЧасть.ДатаПринятияКУчету,
	|	ТабЧасть.СрокПолезногоИспользования,
	|	ТабЧасть.ПервоначальнаяСтоимость,
	|	ТабЧасть.НачислятьАмортизацию,
	|	ТабЧасть.НачислятьАмортизациюСТекущегоПериода,
	|	ТабЧасть.МетодНачисленияАмортизации,
	|	ТабЧасть.СуммаНачисленнойАмортизации,
	|	ТабЧасть.СпособОтраженияРасходовПоАмортизации,
	|	ТабЧасть.КоэффициентУскорения,
	|	ТабЧасть.СчетНачисленияАмортизации,
	|	ТабЧасть.ПредполагаемыйОбъемПродукции,
	|	ТабЧасть.ЕдиницаИзмеренияОбъемаПродукции,
	|	ТабЧасть.Сумма,
	|	ТабЧасть.СчетРезерваПереоценки,
	|	ТабЧасть.СчетСниженияСтоимости,
	|	ТабЧасть.СчетУчета,
	|	ТабЧасть.Субконто1,
	|	ТабЧасть.Субконто2,
	|	ТабЧасть.Субконто3,
	|	ТабЧасть.Субконто4,
	|	ТабЧасть.КорСчет,
	|	ТабЧасть.КорСубконто1,
	|	ТабЧасть.КорСубконто2,
	|	ТабЧасть.КорСубконто3,
	|	ТабЧасть.КорСубконто4,
	|	ТабЧасть.Класс,
	|	СостоянияНМА.Состояние,
	|	СостоянияНМА.ДатаСостояния
	|ИЗ
	|	Документ.бит_му_ПринятиеКУчетуНМА.НематериальныеАктивы КАК ТабЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияНМА КАК СостоянияНМА
	|		ПО ТабЧасть.НематериальныйАктив = СостоянияНМА.НематериальныйАктив
	|			И (СостоянияНМА.Организация = &Организация)
	|			И (СостоянияНМА.Состояние = &СостояниеПринято)
	|ГДЕ
	|	ТабЧасть.Ссылка = &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоНМА = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("НМА", ТаблицаПоНМА);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования=Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();	
	КонецЕсли; 	
	
	// Заполним шапку документа значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);
	
	// Заполним счет нераспределенной прибыли из учетной политики.
	Если ОбъектКопирования = Неопределено Тогда
		СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Организация, Дата);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);		
		СтруктураКурса     = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДатаСеанса()); 		
		КурсДокумента      = СтруктураКурса.Курс;
		КратностьДокумента = СтруктураКурса.Кратность;
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет правильность заполнения строк таблиц документа.
// 
// Параметры: 
//  СтруктураТаблиц			- Структура, таблицы значений, содержащая данные для проведения и проверки.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
// 
Процедура ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоНМА = СтруктураТаблиц.НМА;
	
	// Проверим таблицу НМА по строчно.
	Для Каждого ТекСтрока Из ТаблицаПоНМА Цикл
	
		Если ЗначениеЗаполнено(ТекСтрока.Состояние) Тогда
			
			ТекстСообщения = НСтр("ru='В строке № %1% табличной части ""Нематериальные активы"" "
							+"указан нематериальный актив ""%2%"" принятый к учету %3%. Повторное принятие к учету невозможно!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																					, ТекСтрока.НомерСтроки
																					, ТекСтрока.НематериальныйАктив
																					, Формат(ТекСтрока.ДатаСостояния, "ДЛФ=DT"));				 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицДокумента()

// Процедура выполняет движения по регистрам.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, ИсторическиеКурсы, Отказ, Заголовок)
	
	ТекОрганизация   = СтруктураШапкиДокумента.Организация;
	СостояниеПринято = Перечисления.бит_му_СостоянияНМА.ПринятоКУчету;
	ТаблицаДанных    = СтруктураТаблиц.НМА;
	
	НаборЗаписей_МУ 	     = Движения.бит_Дополнительный_2;
	НаборЗаписей_Состояние   = Движения.бит_му_СостоянияНМА;
	ТаблицаЗаписей_Состояние = НаборЗаписей_Состояние.Выгрузить();
	
	ТаблицаЗаписей_Состояние.Очистить();
	
	// Выполним движения.
	ВыполнитьДвижения(СтруктураШапкиДокумента
					 ,ТаблицаДанных
					 ,СтруктураКурсыВалют
					 ,ИсторическиеКурсы
					 ,НаборЗаписей_МУ
					 ,ТаблицаЗаписей_Состояние);
					 
	// Выполним движения по регистру параметров НМА.
	ВыполнитьДвиженияПоРегиструПараметровНМА(СтруктураШапкиДокумента, ТаблицаДанных, ИсторическиеКурсы);
	
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(Истина          , "Активность");	
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(ТекОрганизация  , "Организация");
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(СостояниеПринято, "Состояние");
	
	НаборЗаписей_Состояние.Загрузить(ТаблицаЗаписей_Состояние);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура выполняет движения.
// 
// Параметры: 
//  СтруктураШапкиДокумента  - Структура.
//  ТаблицаДанных			 - ТаблицаЗначений.
//  СтруктураКурсыВалют      - Структура.
//  НаборЗаписей_МУ			 - РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  ТаблицаЗаписей_Состояние - ТаблицаЗначений.
// 
Процедура ВыполнитьДвижения(СтруктураШапкиДокумента
						   ,ТаблицаДанных
						   ,СтруктураКурсыВалют
						   ,ИсторическиеКурсы
						   ,НаборЗаписей_МУ
						   ,ТаблицаЗаписей_Состояние)
						   
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// ДТ СчетУчета КТ КорСчет Сумма
		СоздатьЗаписьПоПринятиюКУчету(СтруктураШапкиДокумента
									 ,НаборЗаписей_МУ
									 ,СтрокаТаблицы
									 ,ИсторическиеКурсы[СтрокаТаблицы.ДатаПринятияКУчету]
									 ,СтрокаТаблицы.Сумма
									 ,"Принятие к учету НМА");
									 
		// ДТ СчетНРП КТ СчетНачисленияАмортизации СуммаНачисленнойАмортизации.
		СоздатьЗаписьПоНачисленюРаннейАмортизации(СтруктураШапкиДокумента
												 ,НаборЗаписей_МУ
												 ,СтрокаТаблицы
												 ,ИсторическиеКурсы[СтрокаТаблицы.ДатаПринятияКУчету]
												 ,СтрокаТаблицы.СуммаНачисленнойАмортизации
												 ,"Начисленная амортизация НМА");
			
		// Добавим состояние по НМА.
		ЗаписьСостояние = ТаблицаЗаписей_Состояние.Добавить();
		ЗаписьСостояние.НематериальныйАктив = СтрокаТаблицы.НематериальныйАктив;
		ЗаписьСостояние.ДатаСостояния       = СтрокаТаблицы.ДатаПринятияКУчету;
		
	КонецЦикла; // Обход таблицы НМА.
							 
КонецПроцедуры // ВыполнитьДвижения()

// Функция получает структуру курсов валют.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  Отказ					- Булево.
//  Заголовок				- Строка.
// 
// Возвращаемое значение:
//  СтруктураКурсыВалют - Структура.
// 
Функция ПолучитьСтруктуруКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ВидыКурсов = Новый Структура("Упр, Регл, МУ, Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект
																			  ,СтруктураШапкиДокумента.Дата
																			  ,ВидыКурсов);
	
	// Получим валюту международного учета.
	СтрКурсов = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	
	Если Не ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		
		ТекстСообщения = НСтр("ru='Для организации ""%1%"" не указана валюта международного учета!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтруктураШапкиДокумента.Организация);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // ПолучитьСтруктуруКурсовВалют()

// Функция получает курсы валют на даты принятия к учету НМА.
// 
// Параметры:
// 	ТаблицаДанных - ТаблицаЗначений - таблица данных по НМА
// 	СтруктураКурсыВалют - Структура - курсы валют на дату документа.
// 
// Возвращаемое значение:
// 	Курсы - Соответствие - значения курсов на дату принятия к учету 
// 						   будут иметь аналогичную структуру как и СтруктураКурсыВалют.
// 
Функция ПолучитьСтруктуруИсторическихКурсов(ТаблицаДанных, СтруктураКурсыВалют)
	
	ТаблицаПериодов = ТаблицаДанных.Скопировать(, "ДатаПринятияКУчету");
	ТаблицаПериодов.Колонки.ДатаПринятияКУчету.Имя = "Период";
	ТаблицаПериодов.Свернуть("Период");
	
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов,,СтруктураКурсыВалют);
	
	Возврат Курсы;
	
КонецФункции

// Процедура формирует движения по параметрам НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  ТаблицаДанных			- ТаблицаЗначений.
// 	ИсторическиеКурсы		- Соответствие.
// 
Процедура ВыполнитьДвиженияПоРегиструПараметровНМА(СтруктураШапкиДокумента, ТаблицаДанных, ИсторическиеКурсы)
	
	МенеджерПВХ = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА;
	
	// Движения по регистру сведений "бит_му_ПараметрыНМА".
	НаборЗаписей_Параметры = Движения.бит_му_ПараметрыНМА;
	
	ВидыПараметров = бит_му_ВНА.ПолучитьВидыПараметров(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НематериальныеАктивы);
	
	//++СисИнфо// получение параметра ОбъектСтроительства// 2012-07-23
	ВидыПараметров.Вставить("Субконто2_НМА",ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ОбъектСтроительства);
	//--СисИнфо
	
	// Выполним запись параметров НМА.
	бит_му_ВНА.ЗаписатьПараметрыВНА(НаборЗаписей_Параметры, СтруктураШапкиДокумента, ТаблицаДанных, ВидыПараметров, "НМА");
	
	// Добавим параметры по историческим курсам
	Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
		
		КурсыНаПериод = ИсторическиеКурсы[ТекущаяСтрока.ДатаПринятияКУчету];
		
		Если КурсыНаПериод = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяВалюта Из КурсыНаПериод Цикл
			ПараметрыВалюты = ТекущаяВалюта.Значение;
			
			Для Каждого ПараметрВалюты Из ПараметрыВалюты Цикл
				Параметр = ВидыПараметров[ПараметрВалюты.Ключ+ТекущаяВалюта.Ключ+"_НМА"];
				
				Если НЕ ЗначениеЗаполнено(Параметр) Тогда
					Продолжить;
				КонецЕсли;
				
				Запись = НаборЗаписей_Параметры.Добавить();
				Запись.Регистратор      = СтруктураШапкиДокумента.Ссылка;
				Запись.Период           = СтруктураШапкиДокумента.Дата;
				Запись.Организация		= СтруктураШапкиДокумента.Организация;
				Запись.НематериальныйАктив = ТекущаяСтрока.НематериальныйАктив;
				
				Запись.Параметр         = Параметр;
				Запись.ЗначениеПараметра= ПараметрВалюты.Значение;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьДвиженияПоРегиструПараметровНМА()

// Процедура формирует проводку по принятию к учету НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаПринятия			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоПринятиюКУчету(СтруктураШапкиДокумента
									   ,НаборЗаписей
									   ,СтрокаТаблицы
									   ,СтруктураКурсыВалют
									   ,СуммаПринятия
									   ,СодержаниеДвижения)
	Если СуммаПринятия = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	//++СисИнфо //заполнение доп.аналитики // 2012-07-23
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//--СисИнфо	
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 // ,мВалютаМеждУчета
										 ,СтруктураКурсыВалют.Документ.Валюта
										 ,СтрокаТаблицы.СчетУчета
										 ,СтрокаТаблицы.КорСчет
										 ,СуммаПринятия
										 ,СодержаниеДвижения);
	
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"Субконто","КорСубконто",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
		
КонецПроцедуры // СоздатьЗаписьПоПринятиюКУчету()

// Процедура формирует проводку по начислению ранней амортизации НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаАмортизации		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоНачисленюРаннейАмортизации(СтруктураШапкиДокумента
												   ,НаборЗаписей
												   ,СтрокаТаблицы
												   ,СтруктураКурсыВалют
												   ,СуммаАмортизации
												   ,СодержаниеДвижения)
	Если СуммаАмортизации = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	//++СисИнфо //заполнение доп.аналитики // 2012-07-23
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//--СисИнфо
		
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 // ,мВалютаМеждУчета
										 ,СтруктураКурсыВалют.Документ.Валюта
										 ,СтруктураШапкиДокумента.СчетНРП
										 ,СтрокаТаблицы.СчетНачисленияАмортизации
										 ,СуммаАмортизации
										 ,СодержаниеДвижения);
	
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	// Заполним аналитику счета Кт.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
		
КонецПроцедуры // СоздатьЗаписьПоНачисленюРаннейАмортизации()

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
