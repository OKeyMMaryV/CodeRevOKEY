#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция получает параметры, передаваемые в обработку подбора ОС.
//
Функция ЗаполнитьПараметрыПодбора(Объект) Экспорт
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе"	, Ложь);
	ПараметрыПодбора.Вставить("Организация"			, Объект.Организация);                             
	ПараметрыПодбора.Вставить("Режим"				, Перечисления.бит_му_РежимыПодбораВНА.ПринятиеКУчетуНМА);
	ПараметрыПодбора.Вставить("ДатаНачала"			, НачалоМесяца(Объект.Дата));
	ПараметрыПодбора.Вставить("ДатаОкончания"		, КонецМесяца(Объект.Дата));
	ПараметрыПодбора.Вставить("ВалютаДокумента"		, Объект.ВалютаДокумента);

	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

Процедура ЗаполнитьНМА(ВыбранноеЗначение, Объект) Экспорт 
	
	ОписаниеТаблицы  = ВыбранноеЗначение.Данные;
	ТаблицаДанных    = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов,ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	лУчетнаяПолитика = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(Объект.Дата, Новый Структура("Организация", Объект.Организация));

	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НематериальныйАктив", СтрокаТаблицы.ВНА);
		
		МассивСтрок = Объект.НематериальныеАктивы.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = Объект.НематериальныеАктивы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.НематериальныйАктив        = СтрокаТаблицы.ВНА;
			НоваяСтрока.НачислятьАмортизацию       = Истина;
			НоваяСтрока.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизацииНМА.Линейный;
			
			НоваяСтрока.НачислятьАмортизациюСТекущегоПериода = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(лУчетнаяПолитика
											, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.НачислятьАмортизациюСТекущегоПериодаНМА);
											
			Объект.ИзменениеКлассаМодуль(НоваяСтрока, Истина);
			
			// Выполним подбор счетов.
			ВыполнитьПодборСчетов(НоваяСтрока, СтрокаТаблицы, Объект);
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Нематериальный актив ""%1%"" уже подобран в строке №%2%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.ВНА, НайденнаяСтрока.НомерСтроки);				 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПодборСчетов(НоваяСтрока, СтрокаТаблицы, Объект)
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетКт) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = бит_му_ОбщегоНазначения.ПодготовитьСтруктуруПараметровДляПодбораСчетовМУ(Объект.Организация, Объект.Дата);
	
	///////////////////////////////////////////////////////////////////////////////
	// Заполним счета и аналитику новой строки.
	
	НаборИсточник = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборПриемник = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
	
	// Заполним набор записей источник по строке таблицы значений.
	ЗаписьИсточник = НаборИсточник.Добавить();
	ЗаписьИсточник.СчетДт = СтрокаТаблицы.СчетДт;
	ЗаписьИсточник.СчетКт = СтрокаТаблицы.СчетКт;
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(ЗаписьИсточник, СтрокаТаблицы, "СубконтоДт", "СубконтоКт", 3);
	
	ПротоколТрансляции = "";
	
	// Выполним подбор счетов по правилам трансляции.
	бит_МеханизмТрансляции.ВыполнитьТрансляциюДвижений(Объект
													  ,НаборИсточник
													  ,НаборПриемник
													  ,СтруктураПараметров
													  ,ПротоколТрансляции);
	Если НаборПриемник.Количество() > 0 Тогда
		
		// Запишем результат подбора счетов в шапку документа.
		ЗаписьПриемник = НаборПриемник[0];
		
		Если ЗначениеЗаполнено(ЗаписьПриемник.СчетДт) Тогда
			
			НоваяСтрока.СчетУчета = ЗаписьПриемник.СчетДт;
			
			// Заполним аналитику счета учета.
			Для Ном = 1 По 4 Цикл
				НоваяСтрока["Субконто" + Ном] = бит_МеханизмТрансляции.ЗначениеСубконто(ЗаписьПриемник, "Дт", Ном);
			КонецЦикла; 
			
			ПриИзмененииСчетаВСтроке(НоваяСтрока, "СчетУчета", "Субконто");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьПриемник.СчетКт) Тогда
			
			НоваяСтрока.КорСчет = ЗаписьПриемник.СчетКт;
			
			// Заполним аналитику кор счета.
			Для Ном = 1 По 4 Цикл
				НоваяСтрока["КорСубконто" + Ном] = бит_МеханизмТрансляции.ЗначениеСубконто(ЗаписьПриемник, "Кт", Ном);
			КонецЦикла; 
			
			ПриИзмененииСчетаВСтроке(НоваяСтрока, "КорСчет", "КорСубконто");
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьПодборСчетов()

Процедура СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, ИмяСубконто)
	
	Если ТекущаяСтрока = Неопределено Тогда
		 Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяСтрока.НематериальныйАктив) Тогда
		
		ТипОС = Тип("СправочникСсылка.НематериальныеАктивы");
		
		Для Ном = 1 По 4 Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипОС Тогда
				 ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.НематериальныйАктив;
			 КонецЕсли; 
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСчетаВСтроке(ТекущиеДанные, РевизитСчет, РеквизитыСубконто)

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущиеДанные[РевизитСчет], 4);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущиеДанные, НастройкиСубконто, РеквизитыСубконто);
	
	СинхронизироватьРеквизитыСтрокиНМА(ТекущиеДанные, РеквизитыСубконто);

КонецПроцедуры

#КонецОбласти

#КонецЕсли
