
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект); 	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументРаспр = РеквизитФормыВЗначение("Объект");
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументРаспр, МассивТипов, Отказ);
	
	ТекущаяВалютаДокумента    = Объект.ВалютаДокумента;
	ТекущаяКратностьДокумента = Объект.КратностьДокумента;
	ТекущийКурсДокумента      = Объект.КурсДокумента;

	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаполнитьКэшЗначений();
	УстановитьУсловноеОформление();
	
	// Восстановим настройки формы
	ВосстановитьНастройки();
	Элементы.КомандаАвтовидимостьКолонок.Пометка = АвтовидимостьКолонок;
	
	// Элементы управления для измерений несуществующих в смежном решении	
	// создаются программно для унификации кода.
	// ++ БП 
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправленияРаспределениеБюджета(Элементы);
	// -- БП
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "Данные", "Данные",
		Элементы.ДанныеКоличество);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "База", "База",
		Элементы.БазаКоличество);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "РезультатРаспределения", "РезультатРаспределения", 
		Элементы.РезультатРаспределенияКоличество);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "ЗависимыеОбороты", "ЗависимыеОбороты", 
		Элементы.ЗависимыеОборотыКоличество);

	// Отобразим дополнительные измерения в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"Данные", КэшЗначений.ИзмеренияДоп, КэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"База", КэшЗначений.ИзмеренияДоп , КэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, 
		"РезультатРаспределения", КэшЗначений.ИзмеренияДоп, КэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"ЗависимыеОбороты", КэшЗначений.ИзмеренияДоп, КэшЗначений.НастройкиИзмерений);																	
																	
	// Оформление табличных частей
	ОформитьТаблицу("РезультатРаспределения", СписокСтатейОформленияРезультата);
	ОформитьТаблицу("Данные", СписокСтатейОформленияДанных);
	ОформитьТаблицу("ЗависимыеОбороты", СписокСтатейОформленияЗависимыеОбороты);
	
	// Проверка наличия зафиксированных бюджетных данных.
	Если Объект.Проведен Тогда
		бит_Бюджетирование.ПроверитьФиксациюВФорме(ЭтотОбъект, Объект.Ссылка, Истина);
	КонецЕсли;

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// Автовидимость колонок
	УстановитьАвтовидимостьКолонок(); 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьНастройки();
	
КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбратьПериодЗавершение" И Источник = УникальныйИдентификатор Тогда	
		Если Параметр.Вид = "Данные" Тогда
			РедактированиеКомандаДанныеВыборПериода(Параметр.Результат, Неопределено);
		Иначе
			РедактированиеКомандаБазаВыборПериода(Параметр.Результат, Неопределено);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеРаспределениеБюджетаБИТ";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыВФорме();
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ИзменениеСценария();
	ИзменениеВалютыВФорме(Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура Данные_ДатаНачалаПриИзменении(Элемент)
	
	Данные_СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
КонецПроцедуры

&НаКлиенте
Процедура Данные_ДатаОкончанияПриИзменении(Элемент)
	
	Данные_СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
КонецПроцедуры

&НаКлиенте
Процедура База_ДатаНачалаПриИзменении(Элемент)
	
	База_СтандартныйПериод.Вариант   = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
КонецПроцедуры

&НаКлиенте
Процедура База_ДатаОкончанияПриИзменении(Элемент)
	
	База_СтандартныйПериод.Вариант   = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
КонецПроцедуры

&НаКлиенте
Процедура СторнироватьДанныеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущаяСтраницаДанные                 = ТекущаяСтраница = Элементы.ГруппаСтраницаДанные;
	ТекущаяСтраницаБаза                   = ТекущаяСтраница = Элементы.ГруппаСтраницаБаза;
	ТекущаяСтраницаРезультатРаспределения = ТекущаяСтраница = Элементы.ГруппаСтраницаРезультатРаспределения;
	
	Элементы.ДанныеИтогКоличество.Видимость = ТекущаяСтраницаДанные;
	Элементы.ДанныеИтогСумма.Видимость      = ТекущаяСтраницаДанные;
	
	Элементы.БазаИтогКоличество.Видимость   = ТекущаяСтраницаБаза;
	Элементы.БазаИтогСумма.Видимость        = ТекущаяСтраницаБаза;

	Элементы.РезультатРаспределенияИтогКоличество.Видимость = ТекущаяСтраницаРезультатРаспределения;
	Элементы.РезультатРаспределенияИтогСумма.Видимость      = ТекущаяСтраницаРезультатРаспределения;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанные
         
&НаКлиенте
Процедура ДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = Объект.Данные.Добавить();
		Элементы.Данные.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		УстановитьАвтовидимостьКолонокТабличнойЧасти("Данные");	
		
	КонецЕсли;
	
КонецПроцедуры // ДанныеПередНачаломДобавления()

&НаКлиенте
Процедура ДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
	
		 ПриНачалеРедактированияСтроки("Данные");
		
	КонецЕсли; 
	
КонецПроцедуры // ДанныеПриНачалеРедактирования()

&НаКлиенте
Процедура ДанныеПослеУдаления(Элемент)
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("Данные");
		
КонецПроцедуры // ДанныеПослеУдаления()

&НаКлиенте
Процедура ДанныеПериодПриИзменении(Элемент)
	
	ПериодПриИзменении("Данные");                    
	
КонецПроцедуры // ДанныеПериодПриИзменении()

&НаКлиенте
Процедура ДанныеСтатьяОборотовПриИзменении(Элемент)
	
	СтатьяОборотовПриИзменении("Данные");
			
КонецПроцедуры // ДанныеСтатьяОборотовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБаза

&НаКлиенте
Процедура БазаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
	
		 ПриНачалеРедактированияСтроки("База");
		
	КонецЕсли; 
	
КонецПроцедуры // БазаПриНачалеРедактирования()

&НаКлиенте
Процедура БазаПослеУдаления(Элемент)
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("База");
		
КонецПроцедуры // БазаПослеУдаления()

&НаКлиенте
Процедура БазаПериодПриИзменении(Элемент)
	
	ПериодПриИзменении("База");                    
	
КонецПроцедуры // БазаПериодПриИзменении()

&НаКлиенте
Процедура БазаСтатьяОборотовПриИзменении(Элемент)
	
	СтатьяОборотовПриИзменении("База");
				
КонецПроцедуры // БазаСтатьяОборотовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатРаспределения

&НаКлиенте
Процедура РезультатРаспределенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
	
		ПриНачалеРедактированияСтроки("РезультатРаспределения");
		
	КонецЕсли; 
	
КонецПроцедуры // РезультатРаспределенияПриНачалеРедактирования()

&НаКлиенте
Процедура РезультатРаспределенияПослеУдаления(Элемент)
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("РезультатРаспределения");
		
КонецПроцедуры // РезультатРаспределенияПослеУдаления()

&НаКлиенте
Процедура РезультатРаспределенияПериодПриИзменении(Элемент)
	
	ПериодПриИзменении("РезультатРаспределения");      
	
КонецПроцедуры // РезультатРаспределенияПериодПриИзменении()

&НаКлиенте
Процедура РезультатРаспределенияСтатьяОборотовПриИзменении(Элемент)
	
	СтатьяОборотовПриИзменении("РезультатРаспределения");
			
КонецПроцедуры // РезультатРаспределенияСтатьяОборотовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗависимыеОбороты

&НаКлиенте
Процедура ЗависимыеОборотыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Объект.ЗависимыеОбороты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ЗависимыеОборотыКомментарийРасчета" И НЕ ПустаяСтрока(ТекущиеДанные.КомментарийРасчета) Тогда
		
		СтандартнаяОбработка = Ложь;		
		
		ПараметрыФормы = Новый Структура("КомментарийРасчета", ТекущиеДанные.КомментарийРасчета);
		ОткрытьФорму("ОбщаяФорма.бит_ФормаКомментарияРасчетаЗависимыхОборотовУправляемая", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			ИмяРеквизита = СтрЗаменить(Поле.Имя, "ЗависимыеОбороты", "");
			ТекЗнч = ТекущиеДанные[ИмяРеквизита];
			
			Если ЗначениеЗаполнено(ТекЗнч) Тогда
				
				ПоказатьЗначение(,ТекЗнч);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ЗависимыеОборотыВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПодключаемыеКомандыЭлементовТаблицФормы

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиПриИзменении(Элемент)

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, КэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, КэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, КэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, КэшЗначений.НастройкиИзмерений);
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, ИмяПоля,
		СтандартнаяОбработка, КэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
	
#КонецОбласти

&НаКлиенте
Процедура КомандаЗаполнитьДанные(Команда)
	
	Если НеобходимыеПараметрыЗаполнены("Данные") Тогда
		Если Объект.Данные.Количество() > 0 Тогда
		
			ТекстСообщения = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросКомандаЗаполнитьДанные", ЭтотОбъект);
			ПоказатьВопрос(ОповещениеВопрос, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		Иначе
			ЗаполнитьДанныеПоНастройке();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросКомандаЗаполнитьДанные(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеПоНастройке();			
	КонецЕсли;	

КонецПроцедуры // ВопросКомандаЗаполнитьДанные()

&НаКлиенте
Процедура КомандаЗаполнитьБазу(Команда)
	
	Если НеобходимыеПараметрыЗаполнены("База") Тогда
		
		Если Объект.База.Количество() > 0 Тогда
		
			ТекстСообщения = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросКомандаЗаполнитьБазу", ЭтотОбъект);
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
						
		Иначе
			
			ЗаполнитьБазуПоНастройке();
			
		КонецЕсли;
		 		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьБазу()

// Процедура - Вопрос команда заполнить базу
//
// Параметры:
//  Ответ		 - КодВозврата - Ответ.
//  ДопПараметры - Структура - ДопПараметры.
//
&НаКлиенте
Процедура ВопросКомандаЗаполнитьБазу(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьБазуПоНастройке();			
	КонецЕсли;

КонецПроцедуры // ВопросКомандаЗаполнитьБазу()

&НаКлиенте
Процедура КомандаРаспределить(Команда)
	
	Если НЕ ПроверитьПередРаспределением() Тогда
		Возврат;	
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("КомандаРаспределитьЗавершение", ЭтотОбъект);
	Если Объект.РезультатРаспределения.Количество() > 0 Тогда
		ТекстСообщения 	 = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет,,,НСтр("ru = 'Распределение бюджета'"));
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 
		
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура КомандаРаспределитьЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьПрогнозРезультатаРаспределения();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПрогнозРезультатаРаспределения()

	Оповещение = Новый ОписаниеОповещения("ВыполнитьПрогнозРезультатаРаспределенияЗавершение", ЭтотОбъект); 
	Если Объект.База.Количество() * Объект.Данные.Количество() > 10000 Тогда
		ТекстСообщения = НСтр("ru = 'Прогнозируемый результат распределения больше 10 000 строк.
								    |Для комфортной работы рекомендуется уменьшить количество строк в списках ""Данные"" и ""База"".
						 			|Продолжить распределение?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет,,,НСтр("ru = 'Распределение бюджета'"));
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 	

КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ВыполнитьПрогнозРезультатаРаспределенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РаспределитьНаКлиенте();
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура КомандаЗаполнитьРаспределить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВопросКомандаЗаполнитьРаспределить", ЭтотОбъект);
	Если Объект.РезультатРаспределения.Количество()>0 
		 ИЛИ Объект.Данные.Количество()>0 
		 ИЛИ Объект.База.Количество()>0 Тогда
	
		 ТекстСообщения = НСтр("ru = 'Перед заполнением табличные части будут очищены. Продолжить?'");
		 ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);	 
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 

КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросКомандаЗаполнитьРаспределить(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда	
		Если НеобходимыеПараметрыЗаполнены() Тогда
			ЗаполнитьРаспределить();
			Если НЕ ПроверитьПередРаспределением() Тогда
				Возврат;	
			КонецЕсли;
			РаспределитьНаКлиенте();
		КонецЕсли;
	КонецЕсли; 	
	
КонецПроцедуры // ВопросКомандаЗаполнитьРаспределить() 

&НаКлиенте
Процедура КомандаДанныеВыборПериода(Команда)
	
	Если НЕ ЗначениеЗаполнено(Данные_СтандартныйПериод.ДатаНачала) Тогда
	
		Данные_СтандартныйПериод.ДатаНачала = Объект.Данные_ДатаНачала;
	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Данные_СтандартныйПериод.ДатаОкончания) Тогда
	
		Данные_СтандартныйПериод.ДатаОкончания = Объект.Данные_ДатаОкончания;
	
	КонецЕсли; 
		
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.Данные_ДатаНачала);
	ПараметрыПередачи.Вставить("ДатаОкончания", Объект.Данные_ДатаОкончания);
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	ПараметрыПередачи.Вставить("Вид", 			"Данные");
	
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);

КонецПроцедуры // КомандаДанныеВыборПериода()

// Обработка оповещения о завершении редактирования периода. 
// 
// Параметры:
//  Результат - СтандартныйПериод.
// 
&НаКлиенте
Процедура РедактированиеКомандаДанныеВыборПериода(Результат, ДопПараметры)

	Если ТипЗнч(Результат) <> Тип("Неопределено") Тогда
		Данные_СтандартныйПериод = Результат;
		
		Объект.Данные_ДатаНачала        = Данные_СтандартныйПериод.ДатаНачала;
		Объект.Данные_ДатаОкончания     = Данные_СтандартныйПериод.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаБазаВыборПериода(Команда)
	
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.База_ДатаНачала);
	ПараметрыПередачи.Вставить("ДатаОкончания", Объект.База_ДатаОкончания);
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	ПараметрыПередачи.Вставить("Вид", 			"База");
	
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);
	
КонецПроцедуры // КомандаБазаВыборПериода()

// Обработка оповещения о завершении редактирования периода. 
// 
// Параметры:
//  Результат - СтандартныйПериод.
// 
&НаКлиенте
Процедура РедактированиеКомандаБазаВыборПериода(Результат, ДопПараметры)

	Если ТипЗнч(Результат) <> Тип("Неопределено") Тогда
		База_СтандартныйПериод          = Результат;
		Объект.База_ДатаНачала          = База_СтандартныйПериод.ДатаНачала;
		Объект.База_ДатаОкончания       = База_СтандартныйПериод.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАвтовидимостьКолонок(Команда)
	
	АвтовидимостьКолонок = Не АвтовидимостьКолонок;
	
	Элементы.КомандаАвтовидимостьКолонок.Пометка = АвтовидимостьКолонок;
	
	УстановитьАвтовидимостьКолонок(Истина); 
	
КонецПроцедуры // КомандаАвтовидимостьКолонок()

&НаКлиенте
Процедура КомандаОчиститьДанные(Команда)
	
	Объект.Данные.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьБазу(Команда)
	
	Объект.База.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьРаспределение(Команда)
	
	Объект.РезультатРаспределения.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьЗависимыеОбороты(Команда)
	
	Если Объект.ЗависимыеОбороты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Зависимые обороты будут очищены. Продолжить?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗависимыеОборотыЗаполнить", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ЗаполнитьЗависимыеОборотыСервер();

	КонецЕсли; 
	
КонецПроцедуры

// Процедура - Вопрос зависимые обороты заполнить.
//
// Параметры:
//  Ответ		 - Диалог - Ответ.
//  ДопПараметры - Структура - ДопПараметры.
//
&НаКлиенте
Процедура ВопросЗависимыеОборотыЗаполнить(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗависимыеОборотыСервер();
	КонецЕсли;
	
КонецПроцедуры // ВопросЗависимыеОборотыЗаполнить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	КэшЗначений = Новый Структура;
	
	// Данные по дополнительным аналитикам
	КэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	КэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	// Произвольные измерения
	КэшЗначений.Вставить("Измерения"         , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));

	// Параметры, используемые для управления автовидимостью колонок.
	КэшЗначений.Вставить("НастройкаВидимостиКолонок", Новый Структура);
	КэшЗначений.Вставить("МассивСтатей_РезультатРаспределения", Новый Массив);
	КэшЗначений.Вставить("МассивСтатей_Данные", Новый Массив);
	КэшЗначений.Вставить("МассивСтатей_База", Новый Массив);
	
	КэшЗначений.Вставить("СтруктураДопПолей", Новый Структура("Учет_Сумма", "НДС"));

КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект 	 = Форма.Объект;
	
	Элементы.СторнироватьЗависимыеОбороты.Доступность = Объект.СторнироватьДанные;
	Элементы.КурсДокумента.Видимость = Объект.ВалютаДокумента <> Форма.ВалютаРеглУчета; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАвтовидимостьКолонокТабличнойЧасти(ИмяТабличнойЧасти, ОбновлятьБезусловно = Ложь)
	
	ИмяМассива = "МассивСтатей_" + ИмяТабличнойЧасти;
	
	Если АвтовидимостьКолонок Тогда
		
		ТаблРез = Объект[ИмяТабличнойЧасти].Выгрузить();
		МассивСтатей = ТаблРез.ВыгрузитьКолонку("СтатьяОборотов");
		НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(МассивСтатей
																		,КэшЗначений[ИмяМассива]
																		,КэшЗначений.НастройкаВидимостиКолонок
																		,КэшЗначений.НастройкиИзмерений);
		
		Если НеобходимоИзменение Тогда
			
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				,КэшЗначений.НастройкаВидимостиКолонок
											 				,ИмяТабличнойЧасти);
						
		КонецЕсли; 
		
	Иначе
		
		Если ОбновлятьБезусловно Тогда
			
			НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(Новый Массив
																		,КэшЗначений[ИмяМассива]
																		,КэшЗначений.НастройкаВидимостиКолонок
																		,КэшЗначений.НастройкиИзмерений);
																		
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				,КэшЗначений.НастройкаВидимостиКолонок
											 				,ИмяТабличнойЧасти);
		КонецЕсли;

	КонецЕсли; 
	
КонецПроцедуры // УстановитьАвтовидимостьКолонокТабличнойЧасти()

&НаСервере
Процедура УстановитьАвтовидимостьКолонок(ОбновлятьБезусловно = Ложь)
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("РезультатРаспределения", ОбновлятьБезусловно); 
	УстановитьАвтовидимостьКолонокТабличнойЧасти("Данные"			     , ОбновлятьБезусловно);
	УстановитьАвтовидимостьКолонокТабличнойЧасти("База"			     	 , ОбновлятьБезусловно);
	
КонецПроцедуры // УстановитьАвтовидимостьКолонок()

&НаСервере
Процедура ОформитьТаблицу(ИмяТаблицы, СписокСтатей, СтатьяОборотов = Неопределено) 
	
	УдалитьСтароеОформление = Ложь;
	
	Если СтатьяОборотов = Неопределено Тогда
	
		УдалитьСтароеОформление = Истина;
	
			// Формирование массива статей, по которым нужно добавить элементы УО.
		ТаблРез = Объект[ИмяТаблицы].Выгрузить();
		МассивСтатей = ТаблРез.ВыгрузитьКолонку("СтатьяОборотов");
		МассивСтатей = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		
		СписокСтатей.ЗагрузитьЗначения(МассивСтатей);
		
	Иначе // Работаем только с одной статьей оборотов		
		
		МассивСтатей = Новый Массив;
		
		НайденноеЗначение = СписокСтатей.НайтиПоЗначению(СтатьяОборотов);
		Если НайденноеЗначение = Неопределено Тогда 			
			
			МассивСтатей.Добавить(СтатьяОборотов);
			СписокСтатей.Добавить(СтатьяОборотов);
		
		КонецЕсли;  		
		
	КонецЕсли;	
	
	ДопПараметры = Новый Структура;
	Если ИмяТаблицы = "РезультатРаспределения" Тогда
		ДопПараметры.Вставить("ОтметитьОбязательныеРазрезыСтатей", Истина);
	КонецЕсли;
	
	бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление, 
		МассивСтатей, УдалитьСтароеОформление, "Объект.", ИмяТаблицы, "", КэшЗначений.СтруктураДопПолей,, ДопПараметры);
		
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммы(Валюта, Курс, Кратность)

	Объект.СуммаДокумента = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
								Объект.СуммаДокумента, Валюта, Объект.ВалютаДокумента, Курс, Объект.КурсДокумента, 
								Кратность,Объект.КратностьДокумента);
															
	// Данные
	Для каждого СтрокаТаблицы Из Объект.Данные Цикл
		СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
								СтрокаТаблицы.Сумма, Валюта, Объект.ВалютаДокумента, Курс, Объект.КурсДокумента,
								Кратность, Объект.КратностьДокумента);
	КонецЦикла;

	// База
	Для каждого СтрокаТаблицы Из Объект.База Цикл
		СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
								СтрокаТаблицы.Сумма, Валюта ,Объект.ВалютаДокумента, Курс, Объект.КурсДокумента,
								Кратность, Объект.КратностьДокумента);
	КонецЦикла;
	
	// Результат распределения
	Для каждого СтрокаТаблицы Из Объект.РезультатРаспределения Цикл
		СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
								СтрокаТаблицы.Сумма, Валюта, Объект.ВалютаДокумента, Курс, Объект.КурсДокумента,
								Кратность,Объект.КратностьДокумента);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеОборотыСервер()

	Объект.ЗависимыеОбороты.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьЗависимыеОбороты();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ОформитьТаблицу("ЗависимыеОбороты", СписокСтатейОформленияЗависимыеОбороты);
	
	Модифицированность = Истина;

КонецПроцедуры // ЗаполнитьЗависимыеОборотыСервер()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ИзменениеВалюты()
	
	КурсВалюты = бит_КурсыВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента      = КурсВалюты.Курс;
	Объект.КратностьДокумента = КурсВалюты.Кратность;
	  
КонецПроцедуры

&НаСервере
Процедура ИзменениеПериода(ИД, ИмяТабличнойЧасти)

	ТекущиеДанные = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИД);
	Если ТекущиеДанные <> Неопределено Тогда
		 ТекущиеДанные.Период = бит_Бюджетирование.ПолучитьНачалоПериода(ТекущиеДанные.Период, Объект.Сценарий.бит_Периодичность);
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ИзменениеСтатьиОборотов(ИД, ИмяТабличнойЧасти)
    	
	ТекущиеДанные = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИД);
	СтатьяОборотов = ТекущиеДанные.СтатьяОборотов;
	
	Если СтатьяОборотов.ЭтоГруппа Тогда
		 Возврат;
	КонецЕсли; 		
	
	Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
		
		НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(ТекущиеДанные.СтатьяОборотов);	
		
		// Очистка суммы, количества 
		Если ИмяТабличнойЧасти <> "База" Тогда
		
			бит_Бюджетирование.УстановитьИспользованиеРесурсов(ТекущиеДанные, НастройкиСтатьи);
			
		КонецЕсли;
		
		// Очистить неиспользуемые измерения
		бит_Бюджетирование.УстановитьИспользованиеАналитики(ТекущиеДанные, НастройкиСтатьи, КэшЗначений.Измерения);
		
	КонецЕсли;
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти(ИмяТабличнойЧасти);
	
	Если ИмяТабличнойЧасти = "РезультатРаспределения" Тогда
		ОформитьТаблицу(ИмяТабличнойЧасти, СписокСтатейОформленияРезультата, СтатьяОборотов);
	ИначеЕсли ИмяТабличнойЧасти = "Данные" Тогда	
		ОформитьТаблицу(ИмяТабличнойЧасти, СписокСтатейОформленияДанных, СтатьяОборотов);
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ИзменениеСценария()

	// Изменяем валюту документа на валюту из сценария.
	Объект.ВалютаДокумента = Объект.Сценарий.Валюта;

	ИзменениеВалюты();
	
КонецПроцедуры // ИзменениеСценария()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииПоЗаполнениюТабличныхЧастей

&НаСервере
Функция ПодготовитьСтруктуруЗаполненияАналитик(ЭтоДанные)

	стрЗаполнениеАналитик = Новый Структура;
	
	Если ЭтоДанные Тогда
		стрЗаполнениеАналитик.Вставить("ЦФО"			, Новый Структура("Использовать, Значение",Объект.ЗаполнениеЦФОДанные,            Объект.ЦФО));
		стрЗаполнениеАналитик.Вставить("СтатьяОборотов"	, Новый Структура("Использовать, Значение",Объект.ЗаполнениеСтатьяОборотовДанные, Объект.СтатьяОборотов));
		// ++ БП
		стрЗаполнениеАналитик.Вставить("Проект"			, Новый Структура("Использовать, Значение",Объект.ЗаполнениеПроектДанные,         Объект.Проект));
		// -- БП
	Иначе	
		стрЗаполнениеАналитик.Вставить("ЦФО"			, Новый Структура("Использовать, Значение",Объект.ЗаполнениеЦФОБаза,            Объект.ЦФО));
		стрЗаполнениеАналитик.Вставить("СтатьяОборотов"	, Новый Структура("Использовать, Значение",Объект.ЗаполнениеСтатьяОборотовБаза, Объект.СтатьяОборотов));
		// ++ БП
		стрЗаполнениеАналитик.Вставить("Проект"			, Новый Структура("Использовать, Значение",Объект.ЗаполнениеПроектБаза,         Объект.Проект));
		// -- БП
	КонецЕсли; 
	
	Возврат стрЗаполнениеАналитик;
	
КонецФункции // ПодготовитьСтруктуруЗаполненияАналитик()

&НаСервере
Процедура ЗаполнитьДанныеПоНастройке()

	Объект.Данные.Очистить();
	
	ТаблицаРезультат = Документы.бит_РаспределениеБюджета.ПодготовитьТаблицуЗаполнения(Объект, Истина, 
							ПодготовитьСтруктуруЗаполненияАналитик(Истина));
	
	// Предполагается, что результат запроса источника может возвращать (или не возвращать вовсе)
	// разные значения Сценария.
	ПериодичностьСценариев = Новый Соответствие(); 
	ЕстьПериод   = ТаблицаРезультат.Колонки.Найти("Период") <> Неопределено;
	ЕстьСценарий = ТаблицаРезультат.Колонки.Найти("Сценарий") <> Неопределено;
	ПериодичностьСценариев.Вставить(Объект.Сценарий, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сценарий, "бит_Периодичность"));
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьСценарий Тогда
			Периодичность = ПериодичностьСценариев.Получить(Объект.Сценарий);
			Если Периодичность = Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Сценарий) Тогда
				Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Сценарий, "бит_Периодичность");
				ПериодичностьСценариев.Вставить(Объект.Сценарий, Периодичность);
			Иначе
				Периодичность = ПериодичностьСценариев.Получить(Объект.Сценарий);
			КонецЕсли; 
		Иначе	
			Периодичность = ПериодичностьСценариев.Получить(Объект.Сценарий);
		КонецЕсли; 
		
		НоваяСтрока = Объект.Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		Если ЕстьПериод Тогда
			НоваяСтрока.Период = бит_Бюджетирование.ПолучитьНачалоПериода(СтрокаТаблицы.Период, Периодичность);
		КонецЕсли;
		
	КонецЦикла;  	
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("Данные");
	ОформитьТаблицу("Данные", СписокСтатейОформленияДанных);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьДанныеПоНастройке()

&НаСервере
Процедура ЗаполнитьБазуПоНастройке()
	
	Объект.База.Очистить();

	ТаблицаРезультат = Документы.бит_РаспределениеБюджета.ПодготовитьТаблицуЗаполнения(ЭтотОбъект.Объект, Ложь, 
							ПодготовитьСтруктуруЗаполненияАналитик(Ложь));
							
	ПриводитьПериод  = ТаблицаРезультат.Колонки.Найти("Период") <> Неопределено
						И ТаблицаРезультат.Колонки.Найти("Сценарий") <> Неопределено;
							
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.База.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		Если ПриводитьПериод Тогда
			НоваяСтрока.Период = бит_Бюджетирование.ПолучитьНачалоПериода(СтрокаТаблицы.Период, СтрокаТаблицы.Сценарий.бит_Периодичность);
		КонецЕсли;
		
	КонецЦикла; 
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("База");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьНаКлиенте()

	ДлительнаяОперация = ПараметрыРаспределенияБюджета();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Распределение бюджета'"); 
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииРаспределения", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

// Обрабортка оповещения процедуры "РаспределитьНаКлиенте".
//
// Параметры:
//  Результат				 - Структура - См. общий модуль ДлительныеОперации.
//  ДополнительныеПараметры	 - Произвольный - произвольные данные, переданные в обработку оповещения. 
//
&НаКлиенте
Процедура ПриЗавершенииРаспределения(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		// Ничего не делать или обработать ошибку.
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка при выполнении: %1'"), 
			Результат.КраткоеПредставлениеОшибки));
	Иначе	
		// Загрузка данных в объект на сервере.
		ПриЗавершенииРаспределенияНаСервере(Результат.АдресРезультата);
		Модифицированность 	= Истина;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииРаспределенияНаСервере(АдресРезультата)

	Объект.РезультатРаспределения.Загрузить(ПолучитьИзВременногоХранилища(АдресРезультата).РезультатРаспределения);
	
	Если Объект.РезультатРаспределения.Количество() > 10000 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Количество строк в результате распределения (%1) превышает %2.
											|Рекомендуем использовать отборы в настройке распределения.'"),
											Формат(Объект.РезультатРаспределения.Количество(), "ЧЦ=15; ЧДЦ="),
											Формат(10000, "ЧЦ=15; ЧДЦ="));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
	
	ИмяТабличнойЧасти = "РезультатРаспределения";
	УстановитьАвтовидимостьКолонокТабличнойЧасти(ИмяТабличнойЧасти);
	ОформитьТаблицу(ИмяТабличнойЧасти, СписокСтатейОформленияРезультата);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаспределить()

	ЗаполнитьДанныеПоНастройке();
	ЗаполнитьБазуПоНастройке();	
	
	УстановитьАвтовидимостьКолонок();
	//ОформитьТаблицу("РезультатРаспределения", СписокСтатейОформленияРезультата);
	ОформитьТаблицу("Данные", СписокСтатейОформленияДанных);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьРаспределить()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииПоРаботеСНастройками

&НаСервере
Процедура СохранитьНастройки() 
	
	Настройки = Новый Структура;
	Настройки.Вставить("АвтовидимостьКолонок", АвтовидимостьКолонок);
	
	ХранилищеОбщихНастроек.Сохранить("Документ.бит_РаспределениеБюджета", "Настройки", Настройки);	
	
КонецПроцедуры // СохранитьНастройки()

&НаСервере
Процедура ВосстановитьНастройки() 
	
	ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить("Документ.бит_РаспределениеБюджета", "Настройки");
	
	Если ЗначениеЗаполнено(ЗначениеНастроек) И ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		АвтовидимостьКолонок = ЗначениеНастроек.АвтовидимостьКолонок;		
	
	КонецЕсли;                                                	
	
КонецПроцедуры // СохранитьНастройки()

#КонецОбласти

&НаКлиенте
Процедура ИзменениеВалютыВФорме(ИзменитьВалюту = Истина) 
	
	Если ИзменитьВалюту Тогда
		ИзменениеВалюты();	
	КонецЕсли;	
	
	ОповещениеВопрос = Новый ОписаниеОповещения("ИзменениеВалютыВФормеЗавершение", ЭтотОбъект);
	ТаблицыЗаполнены = Объект.Данные.Количество() + Объект.База.Количество() + Объект.РезультатРаспределения.Количество();
	
	Если ТекущаяВалютаДокумента <> Объект.ВалютаДокумента И ТаблицыЗаполнены > 0 Тогда			
		ТекстВопроса =  НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеВопрос, КодВозвратаДиалога.Нет);
	КонецЕсли; 
	
КонецПроцедуры 

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
// 
&НаКлиенте
Процедура ИзменениеВалютыВФормеЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчитатьСуммы(ТекущаяВалютаДокумента, ТекущийКурсДокумента, ТекущаяКратностьДокумента);	
	КонецЕсли; 
		
	ТекущаяВалютаДокумента    = Объект.ВалютаДокумента;
	ТекущаяКратностьДокумента = Объект.КратностьДокумента;
	ТекущийКурсДокумента      = Объект.КурсДокумента;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция НеобходимыеПараметрыЗаполнены(ИмяТаблицы = Неопределено)
	
	Заполнены = Истина;
	
	Если ИмяТаблицы = Неопределено ИЛИ  ИмяТаблицы = "Данные" Тогда
		Если Не бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Объект.Данные_ДатаНачала, Объект.Данные_ДатаОкончания) Тогда
			Заполнены = Ложь;	
		КонецЕсли;
	КонецЕсли;
	Если ИмяТаблицы = Неопределено ИЛИ  ИмяТаблицы = "База" Тогда
		Если Не бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Объект.База_ДатаНачала, Объект.База_ДатаОкончания) Тогда
			Заполнены = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТаблицы = "Данные" Тогда
		Если Не ЗначениеЗаполнено(Объект.Данные_ДатаНачала) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена дата начала периода.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Заполнены = Ложь;
		КонецЕсли;
		
        Если Не ЗначениеЗаполнено(Объект.Данные_ДатаОкончания) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена дата окончания периода.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Заполнены = Ложь;
		КонецЕсли;
    КонецЕсли;
	
	Если ИмяТаблицы = "База" Тогда
		Если Не ЗначениеЗаполнено(Объект.База_ДатаНачала) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена дата начала периода.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Заполнены = Ложь;
		КонецЕсли;
		
        Если Не ЗначениеЗаполнено(Объект.База_ДатаОкончания) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена дата окончания периода.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Заполнены = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НастройкаРаспределения) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена настройка распределения.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Заполнены = Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена дата документа.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Заполнены = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена валюта документа.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Заполнены = Ложь;
	КонецЕсли;
	
	Если Объект.КурсДокумента = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Обнаружен нулевой курс (курс документа).'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Заполнены = Ложь;
	КонецЕсли;
	
	Возврат Заполнены;

КонецФункции // НеобходимыеПараметрыЗаполнены()

&НаКлиенте
Процедура ПриНачалеРедактированияСтроки(ИмяТаблицы)

	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, 
																КэшЗначений.ИзмеренияДоп, 
																КэшЗначений.НастройкиИзмерений);	 
	 
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(ИмяТабличнойЧасти)
	
	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
		
		ТекущиеДанные = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
		ИзменениеПериода(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТабличнойЧасти);	
		
	КонецЕсли;                    
	
КонецПроцедуры // ПериодПриИзменении()
     
&НаКлиенте
Процедура СтатьяОборотовПриИзменении(ИмяТабличнойЧасти)
	  		
	ТекущиеДанные = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, КэшЗначений.ИзмеренияДоп, КэшЗначений.НастройкиИзмерений);
	
	ИзменениеСтатьиОборотов(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТабличнойЧасти);
		
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПередРаспределением()
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.НастройкаРаспределения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Настройка распределения'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "НастройкаРаспределения", "Объект", Отказ);
	КонецЕсли; 		
	
	Если Объект.Данные.Количество() = 0 Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список",,,,НСтр("ru = 'Данные'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Функция ПараметрыРаспределенияБюджета()

	НаименованиеЗадания = НСтр("ru = 'Распределение бюджета.'");
	ВыполняемыйМетод = "Документы.бит_РаспределениеБюджета.РаспределитьБюджет";
	
	ПараметрыРаспределения = Документы.бит_РаспределениеБюджета.НовыеПараметрыРаспределения();
	ПараметрыРаспределения.Вставить("Данные", Объект.Данные.Выгрузить());
	ПараметрыРаспределения.Вставить("База", Объект.База.Выгрузить());
	ПараметрыРаспределения.Вставить("НастройкаРаспределения", Объект.НастройкаРаспределения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыРаспределения, ПараметрыВыполнения);

КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// ЗависимыеОборотыКомментарийРасчета
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыКомментарийРасчета");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ЗависимыеОбороты.КомментарийРасчета", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Комментарий расчета'"));

КонецПроцедуры
 
#КонецОбласти
