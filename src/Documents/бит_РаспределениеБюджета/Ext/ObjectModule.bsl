#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		// Заполнение нового документа
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		// Заполнить реквизиты значениями по умолчанию.
		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
		                                               ,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
													   ,Неопределено
													   ,"РасходованиеБДДС");
													   
		Если ЗначениеЗаполнено(Сценарий) Тогда 		
			ВалютаДокумента = Сценарий.Валюта; 			
		Иначе                                  			
			ВалютаДокумента = Константы.бит_ВалютаУправленческогоУчета.Получить();  		
		КонецЕсли; 											   
		
		ПолучитьКурсВалюты();  		
		 
		Если НЕ ЗначениеЗаполнено(Данные_ДатаНачала) Тогда 			
			Данные_ДатаНачала = НачалоМесяца(ТекущаяДатаСеанса()); 			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Данные_ДатаОкончания) Тогда 			
			Данные_ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(База_ДатаНачала) Тогда 			
			База_ДатаНачала = НачалоМесяца(ТекущаяДатаСеанса());  			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(База_ДатаОкончания) Тогда    			
			База_ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса()); 			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РежимЗависимыхОборотов) Тогда 			
			РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.НеФормировать;  			
		КонецЕсли; 
		
	КонецЕсли;  	

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	бит_Бюджетирование.ПроверитьОбязательныеРазрезыСтатейОборотов(ЭтотОбъект, "РезультатРаспределения", Отказ);
	ПроверитьРезультатРаспределения(Отказ); 
	ДополнительныеСвойства.Вставить("ПроверитьЗаполнение", Ложь);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, 
		Пользователи.ТекущийПользователь(), ОбъектКопирования,"РасходованиеБДДС");
	
	ПолучитьКурсВалюты();
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьЗависимыеОбороты();
	КонецЕсли; 
	
КонецПроцедуры
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
		
КонецПроцедуры 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	ПроверитьЗаполнение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, 
									"ПроверитьЗаполнение", Истина);
	
	Если ПроверитьЗаполнение Тогда
		Если НЕ ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураКурсыВалют = бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария(ЭтотОбъект, Дата, Новый Структура("Документ, Регл, Упр, Сценарий"));
	
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют);
		
	Если НЕ Отказ Тогда    		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);  		
	КонецЕсли; 
    
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

#КонецОбласти
	 	
#Область СлужебныйПрограммныйИнтерфейс

// Процедура очищает табличную часть ЗависимыеОбороты.
// 
Процедура ОчиститьЗависимыеОбороты() Экспорт

	ЗависимыеОбороты.Очистить();

КонецПроцедуры // ОчиститьЗависимыеОбороты()

// Процедура заполняет табличную часть ЗависимыеОбороты.
// 
Процедура ЗаполнитьЗависимыеОбороты() Экспорт

	УстановитьПривилегированныйРежим(Истина);	
	
	ОчиститьЗависимыеОбороты();
	
	Если НЕ ЗначениеЗаполнено(РежимЗависимыхОборотов)
		ИЛИ РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.НеФормировать Тогда
		// Не формируем зависимые обороты.
		Возврат;
	КонецЕсли;
	
	Измерения 		   = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","имя");
	
	МаксПериод = бит_Бюджетирование.ПолучитьМаксПериод(РезультатРаспределения);		
	НастройкиЗависимыхОборотов = бит_Бюджетирование.ПолучитьНастройкиЗависимыхОборотов(Сценарий, МаксПериод);		
	
	Для каждого СтрокаТаблицы Из РезультатРаспределения Цикл
		ПараметрыФормирования = бит_Бюджетирование.НовыеПараметрыФормированияЗависмыхОборотовПоСтроке();
		ПараметрыФормирования.ДатаЗаполнения 			= СтрокаТаблицы.Период;
		ПараметрыФормирования.ТекущийОбъект 			= ЭтотОбъект;
		ПараметрыФормирования.СтрокаТабличнойЧасти		= СтрокаТаблицы;
		ПараметрыФормирования.ИмяТабличнойЧастиИсточник = "РезультатРаспределения";
		ПараметрыФормирования.ИмяТабличнойЧастиПриемник = "ЗависимыеОбороты";
		ПараметрыФормирования.ИзмеренияБюджетирования	= Измерения;
		ПараметрыФормирования.вхНастройкиЗависимых		= НастройкиЗависимыхОборотов;
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоСтроке(ПараметрыФормирования);
	КонецЦикла; 
	
	Если СторнироватьДанные И СторнироватьЗависимыеОбороты Тогда
		СторнироватьРанееСозданныеЗависимыеОбороты(Измерения);
	КонецЕсли; 														 
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры


// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  Структура
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют)  Экспорт

	СтруктураТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Распределение.Ссылка,
	|	Распределение.НомерСтроки,
	|	Распределение.Период,
	|	Распределение.Ссылка.Сценарий,
	|	Распределение.Количество,
	|	Распределение.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	|	Распределение.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	Распределение.Ссылка.ВалютаДокумента КАК Валюта,
	|	Распределение.Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	0 КАК СуммаСценарий,
	|	Распределение.Комментарий
	|ИЗ
	|	Документ.бит_РаспределениеБюджета.РезультатРаспределения КАК Распределение
	|ГДЕ
	|	Распределение.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Зависимые.Ссылка,
	|	Зависимые.НомерСтроки,
	|	Зависимые.Период,
	|	Зависимые.Сценарий,
	|	Зависимые.Количество,
	|	Зависимые.СтатьяОборотов.СтавкаНДС,
	|	Зависимые.СтатьяОборотов.ЭтоКоэффициент,
	|	Зависимые.Ссылка.ВалютаДокумента,
	|	Зависимые.Сумма,
	|	0,
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	Документ.бит_РаспределениеБюджета.ЗависимыеОбороты КАК Зависимые
	|ГДЕ
	|	Зависимые.Ссылка = &Ссылка";
				   
				   
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл		
		
		ИмяИзмерения = ТекИзмерение.Имя;
		Если ИмяИзмерения = "Валюта" Или ИмяИзмерения = "Сценарий" Тогда
			Продолжить;		
		КонецЕсли;
		
		// Дополняем поля запроса измерениями бюджетирования.
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("Распределение."+ИмяИзмерения);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[1].ВыбираемыеПоля.Добавить("Зависимые."+ИмяИзмерения);
				
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
				   
  	Результат = Запрос.Выполнить();
  
  	ТаблицаРаспределение = Результат.Выгрузить();
	  
	// Таблица периодов
	КурсыПоПериодам = Неопределено;
	  
	ТаблицаПериодов = РезультатРаспределения.Выгрузить();
	ТаблицаПериодов.Свернуть("Период");
	  
	// Установка настройки для получения курсов по периодам.
	СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Сценарий, ВалютаДокумента);
	  
	// Курсы по периодам
	КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, Сценарий, СтруктураПараметров);
	  
	бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаРаспределение, КурсыПоПериодам, СтруктураКурсыВалют);
	  
	СтруктураТаблиц.Вставить("ТаблицаРаспределение", ТаблицаРаспределение);

  
  	Если СтруктураШапкиДокумента.СторнироватьДанные Тогда
		
		ПустойСценарий = Справочники[бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования()].ПустаяСсылка();
		
	  	Запрос = Новый Запрос;
	  	Запрос.УстановитьПараметр("Ссылка"		  , СтруктураШапкиДокумента.Ссылка);
		Запрос.УстановитьПараметр("ПустойСценарий", ПустойСценарий);
	 	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Данные.Ссылка,
		|	Данные.НомерСтроки,
		|	Данные.Период,
		|	ВЫБОР
		|		КОГДА Данные.Сценарий ЕСТЬ NULL 
		|				ИЛИ Данные.Сценарий = &ПустойСценарий
		|			ТОГДА Данные.Ссылка.Сценарий
		|		ИНАЧЕ Данные.Сценарий
		|	КОНЕЦ КАК Сценарий,
		|	Данные.Ссылка.ВалютаДокумента КАК Валюта,
		|	Данные.Количество,
		|	Данные.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
		|	Данные.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,		
		|	-Данные.Сумма 					КАК Сумма,
		|	-Данные.СуммаРегл 				КАК СуммаРегл,
		|	-Данные.СуммаУпр 				КАК СуммаУпр,
		|	-Данные.СуммаСценарий 			КАК СуммаСценарий
		|ИЗ
		|	Документ.бит_РаспределениеБюджета.Данные КАК Данные
		|ГДЕ
		|	Данные.Ссылка = &Ссылка
		|	И Данные.СуммаСценарий = 0 И Данные.Количество = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Ссылка,
		|	Данные.НомерСтроки,
		|	Данные.Ссылка.ВалютаДокумента КАК Валюта,
		|	Данные.Период,
		|	ВЫБОР
		|		КОГДА Данные.Сценарий ЕСТЬ NULL 
		|				ИЛИ Данные.Сценарий = &ПустойСценарий
		|			ТОГДА Данные.Ссылка.Сценарий
		|		ИНАЧЕ Данные.Сценарий
		|	КОНЕЦ КАК Сценарий,
		|	Данные.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
		|	Данные.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,		
		|	-Данные.Количество 		КАК Количество,
		|	-Данные.Сумма 			КАК Сумма,
		|	-Данные.СуммаРегл 		КАК СуммаРегл,
		|	-Данные.СуммаУпр 		КАК СуммаУпр,
		|	-Данные.СуммаСценарий 	КАК СуммаСценарий
		|ИЗ
		|	Документ.бит_РаспределениеБюджета.Данные КАК Данные
		|ГДЕ
        |   (Данные.СуммаСценарий <> 0 
		|    ИЛИ Данные.Количество <> 0)		
		|	 И Данные.Ссылка = &Ссылка
		|";
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		
		Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл		
			
			ИмяИзмерения = ТекИзмерение.Имя;
			Если ИмяИзмерения = "Валюта" Или ИмяИзмерения = "Сценарий" Тогда
				Продолжить;		
			КонецЕсли;
			
		    // Дополняем поля запроса измерениями бюджетирования.			
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("Данные."+ИмяИзмерения);
			СхемаЗапроса.ПакетЗапросов[1].Операторы[0].ВыбираемыеПоля.Добавить("Данные."+ИмяИзмерения);
			
		КонецЦикла;
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
	
		ТаблицаДанныеРучн = МассивРезультатов[0].Выгрузить();	
		ТаблицаДанныеАвто = МассивРезультатов[1].Выгрузить();
	
		ТаблицаПериодов = ТаблицаДанныеРучн.Скопировать();
		ТаблицаПериодов.Свернуть("Период");
	
		// Установка настройки для получения курсов по периодам.
		СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Сценарий, ВалютаДокумента);
	
		// Курсы по периодам
		КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, Сценарий, СтруктураПараметров);
	
		бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаДанныеРучн, КурсыПоПериодам, СтруктураКурсыВалют);
	
		СтруктураТаблиц.Вставить("ТаблицаСторноРучн", ТаблицаДанныеРучн);
		СтруктураТаблиц.Вставить("ТаблицаСторноАвто", ТаблицаДанныеАвто);	
	
  	КонецЕсли; 
  
  	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()	

#КонецОбласти 	

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьКурсВалюты()
	
	КурсВалюты = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = КурсВалюты.Курс;
	КратностьДокумента = КурсВалюты.Кратность;
	
КонецПроцедуры

// Процедура сторнирует ранее созданные зависимые обороты при нажатии флага СторнироватьЗависимыеОбороты. 
// 
Процедура СторнироватьРанееСозданныеЗависимыеОбороты(Измерения)

	ТаблицаКолонок = Данные.Выгрузить();
	
	ТЗ = Данные.Выгрузить();
		
	Для каждого СтрокаТаблицы Из ТЗ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сценарий) Тогда
		
			СтрокаТаблицы.Сценарий = Сценарий;
		
		КонецЕсли; 
		
		НастройкиЗависимыхОборотов = бит_Бюджетирование.ПолучитьНастройкиЗависимыхОборотов(СтрокаТаблицы.Сценарий, СтрокаТаблицы.Период);		
		
		СтрокаТаблицы.Сумма 		= - СтрокаТаблицы.Сумма;
		СтрокаТаблицы.СуммаРегл 	= - СтрокаТаблицы.СуммаРегл;
		СтрокаТаблицы.СуммаСценарий = - СтрокаТаблицы.СуммаСценарий;
		СтрокаТаблицы.СуммаУпр	 	= - СтрокаТаблицы.СуммаУпр;
		
		ПараметрыФормирования = бит_Бюджетирование.НовыеПараметрыФормированияЗависмыхОборотовПоСтроке();
		ПараметрыФормирования.ДатаЗаполнения 			= СтрокаТаблицы.Период;
		ПараметрыФормирования.ТекущийОбъект 			= ЭтотОбъект;
		ПараметрыФормирования.СтрокаТабличнойЧасти		= СтрокаТаблицы;
		ПараметрыФормирования.ИмяТабличнойЧастиИсточник = "Данные";
		ПараметрыФормирования.ИмяТабличнойЧастиПриемник = "ЗависимыеОбороты";
		ПараметрыФормирования.ИзмеренияБюджетирования	= Измерения;
		ПараметрыФормирования.вхНастройкиЗависимых		= НастройкиЗависимыхОборотов;
	
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоСтроке(ПараметрыФормирования);
	КонецЦикла; 

КонецПроцедуры // СторнироватьРанееСозданныеЗависимыеОбороты()

Процедура ПроверитьРезультатРаспределения(Отказ)

	Для Каждого СтрокаТаблицы Из РезультатРаспределения Цикл
		Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 Тогда
			ТекстСообщения =  НСтр("ru = 'В строке №%1% табличной части ""Результат распределения"" не заполнены ни сумма ни количество.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , ,Отказ); 
		КонецЕсли; 
	КонецЦикла;
		
КонецПроцедуры

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок)
	
	// Движения по регистру обороты по бюджетам
	ТаблицаДвижений = Движения.бит_ОборотыПоБюджетам.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТаблицы Из СтруктураТаблиц.ТаблицаРаспределение Цикл
	
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		
	КонецЦикла; 
	
	// Движения по регистру бухгалтерии бюджетирование.
	бит_Бюджетирование.СформироватьПроводкиБюджетирования(СтруктураТаблиц.ТаблицаРаспределение, Движения.бит_Бюджетирование);
	
	// Сторнирование
	Если СтруктураШапкиДокумента.СторнироватьДанные Тогда
		
		Для Каждого СтрокаТаблицы Из СтруктураТаблиц.ТаблицаСторноРучн Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла; 
		
		Для Каждого СтрокаТаблицы Из СтруктураТаблиц.ТаблицаСторноАвто Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла; 
		
		// Движения по регистру бухгалтерии бюджетирование.
		бит_Бюджетирование.СформироватьПроводкиБюджетирования(СтруктураТаблиц.ТаблицаСторноРучн, Движения.бит_Бюджетирование, Ложь);
		бит_Бюджетирование.СформироватьПроводкиБюджетирования(СтруктураТаблиц.ТаблицаСторноАвто, Движения.бит_Бюджетирование, Ложь);
		
	КонецЕсли; 
	
	Движения.бит_ОборотыПоБюджетам.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_ОборотыПоБюджетам.ДобавитьДвижение();  	
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#КонецЕсли
