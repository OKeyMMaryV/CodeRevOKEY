
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
    Если Отказ Тогда
		Возврат;
    КонецЕсли;
    
	// Максимальное количество субконто на счете по МУ.
	фКоличествоСубконтоМУ = 4;
	
	ЗаполнитьКэшЗначений();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("Дата");
	фКэшРеквизитов.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьВалютуМСФО();	
		УстановитьСостояниеДокумента();
	Иначе
		ЗаполнитьВалютуМСФО(Ложь);	
	КонецЕсли;
	
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетУчета"
												   ,"Субконто"
												   ,фКоличествоСубконтоМУ
												   ,"ОсновныеСредства"
												   ,"Элементы.ОсновныеСредства.ТекущиеДанные");
												   
	ВосстановитьКоличествоДоступныхСубконто();
	
	НастроитьОформлениеФормы();
	
	ЗаполнитьИнвентарныеНомера();
	
	УстановитьПараметрыВыбораДляСчетов();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	УстановитьЗаголовокФормыДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("Действие") Тогда
			
			Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
				
				Если Объект.ОсновныеСредства.Количество() > 0 Тогда
					
					Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
					ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
					
				Иначе
					
					ОбработатьПодборОС(ВыбранноеЗначение);
					
				КонецЕсли;
				
			Иначе
				
				ОбработатьПодборОС(ВыбранноеЗначение);
				
			КонецЕсли; 
			
		КонецЕсли; // В структуре есть поле действие 
		
	КонецЕсли; // Это структура

КонецПроцедуры

// Процедура - завершение выбора ОС 
// 
&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбработатьПодборОС(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьКоличествоДоступныхСубконто();
	ЗаполнитьИнвентарныеНомера();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ПереводОСВСоставИнвестиционнойСобственности";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	фКэшРеквизитов.Дата = Объект.Дата;
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация <> фКэшРеквизитов.Организация 
		И Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);

	Иначе
		
		ПриИзмененииОрганизации();
		
		фКэшРеквизитов.Организация = Объект.Организация;
		
		// Установим валюту межд. учета
		ЗаполнитьВалютуМСФО();

	КонецЕсли; 
	
КонецПроцедуры

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Объект.Организация = фКэшРеквизитов.Организация;
		Возврат;
	КонецЕсли;
	
	Объект.ОсновныеСредства.Очистить();
	
	ПриИзмененииОрганизации();
	
	фКэшРеквизитов.Организация = Объект.Организация;
	
	// Установим валюту межд. учета
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеСредства

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОС(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваКлассПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииКласса(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаУчета(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоПриИзменении(Элемент)
														  
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, "ОсновныеСредства", Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные, "Субконто", ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, "ОсновныеСредства", Элемент.Имя);		
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, ТекущиеДанные , "Субконто", ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ОсновныеСредства", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "Субконто"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ОсновныеСредстваСубконтоАвтоПодбор()
	
#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьВсе(Команда)
	
	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьВсеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Параметры в табличной части будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);

	Иначе
		
		ЗаполнитьПараметрыОС();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - завершение обработки команды "ЗаполнитьВсе".
// 
&НаКлиенте
Процедура КомандаЗаполнитьВсеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыОС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТекущейСтроке(Команда)
	
	ТекущаяСтрока = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОС(ТекущаяСтрока.ПолучитьИдентификатор());
		
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	// ВидКласса = фКэшЗначений.Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Организация"		, Объект.Организация);                             
	ПараметрыФормы.Вставить("Режим"				, ПредопределенноеЗначение("Перечисление.бит_му_РежимыПодбораВНА.ПереводОСВСоставИнвестиционнойСобственности"));  
	ПараметрыФормы.Вставить("ДатаНачала"		, НачалоМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("ДатаОкончания"		, КонецМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("МОЛ"				, Объект.МОЛ);
	ПараметрыФормы.Вставить("Местонахождение"	, Объект.Подразделение);
	// ПараметрыФормы.Вставить("ВидКласса"			, ВидКласса);
	// ПараметрыФормы.Вставить("МодельУчета"		, фКэшЗначений.Перечисления.бит_му_МоделиУчетаВНА.ПоПервоначальнойСтоимости);
	
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма",ПараметрыФормы,ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетУчета_Старый);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетУчета);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетСниженияСтоимости_Старый);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетСниженияСтоимости);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетНачисленияАмортизации_Старый);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетНачисленияАмортизации);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	КэшПеречисления = Новый Структура;	
	КэшПеречисления.Вставить("бит_му_РежимыПодбораВНА", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_РежимыПодбораВНА));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеФормы()
	
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"ОсновныеСредства"
	                                                           ,"Субконто"
															   ,"КоличествоДоступныхСубконто"
															   ,фКоличествоСубконтоМУ);
															   
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
														   
КонецПроцедуры

&НаСервере
Процедура ИзменениеСчетаУчета(Идентификатор)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетУчета,фКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока,НастройкиСубконто,"Субконто");

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетУчета);

	ТекущаяСтрока.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;
	
	СинхронизироватьРеквизитыОС(ТекущаяСтрока);
	
	//БИТ Тртилек 03.07.2012
	Если ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
		Для Ном = 1 По ТекущаяСтрока.КоличествоДоступныхСубконто Цикл
			Если ТипЗнч(ТекущаяСтрока["Субконто"+ Строка(Ном)]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				 ТекущаяСтрока["Субконто"+ Строка(Ном)] = ТекущаяСтрока.ОсновноеСредство.Объект; 
				 Прервать;
			 КонецЕсли;
		 КонецЦикла;
	КонецЕсли;
	///БИТ Тртилек	
	
КонецПроцедуры // ИзменениеСчетаУчетаНМА()

&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	Для каждого СтрокаТаблицы Из Объект.ОсновныеСредства Цикл
		СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		СтрокаТаблицы.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуМСФО(ЗаполнитьВалютуДокумента=Истина)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	СтрокаВалютаМежУчета = Строка(ВалютаМСФО);
	
	Элементы.ДекорацияВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМежУчета), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМежУчета);
	
	Если ЗаполнитьВалютуДокумента Тогда
		Объект.ВалютаДокумента = ВалютаМСФО;
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры // ИзменениеВалюты()

&НаСервере
Процедура ЗаполнитьИнвентарныеНомера(ИДСтроки=Неопределено)
	
	СоответствиеОС_ИнвентарныйНомер = Новый Соответствие;
	
	Если ИДСтроки = Неопределено Тогда
		
		бит_му_ВНА.ЗаполнитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвентарныйНомер
															,Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство")
															,Объект.Организация);
													   
		Для Каждого ТекСтрока Из Объект.ОсновныеСредства Цикл
			ТекСтрока.ИнвентарныйНомер = СоответствиеОС_ИнвентарныйНомер[ТекСтрока.ОсновноеСредство];
		КонецЦикла;
		
	Иначе
		ДанныеСтроки = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
		
		Если НЕ ДанныеСтроки = Неопределено Тогда
			ДанныеСтроки.ИнвентарныйНомер = бит_му_ВНА.ПолучитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвентарныйНомер
																					,ДанныеСтроки.ОсновноеСредство
																					,Объект.Организация);
		КонецЕсли;
																				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации()
	
	бит_ОбщегоНазначения.ПроверитьПринадлежностьАналитики(Объект
	                                                      ,
														  ,"Подразделение"
														  ,"Владелец"
														  ,"Организация"
														  ,"СправочникСсылка.ПодразделенияОрганизаций"
														  ,"В документе"
														  ,"Изменение значения реквизита Организация");
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьРеквизитыОС(ТекущаяСтрока) 

	Если ТекущаяСтрока = Неопределено Тогда
	
		 Возврат;
	
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
	
		Для ном = 1 По фКоличествоСубконтоМУ Цикл
			
			ИмяСубконто = "Субконто"+ном;
			// Адаптация для ERP. Начало. 18.03.2014{{
			Если ТипЗнч(ТекущаяСтрока[ИмяСубконто]) = Тип(бит_ОбщегоНазначения.ПолучитьИмяТипаОсновныеСредства()) Тогда
			// Адаптация для ERP. Конец. 18.03.2014}}
				 ТекущаяСтрока[ИмяСубконто] = ТекущаяСтрока.ОсновноеСредство;
			
			 КонецЕсли; 
		
		КонецЦикла; // По субконто
	
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьРеквизитыОС()

&НаСервере
Процедура ПриИзмененииОС(ИДСтроки)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОС = Новый Массив;
	МассивОС.Добавить(ТекущаяСтрока.ОсновноеСредство);
	ПараметрыОС = ПолучитьПараметрыОССервер(МассивОС);	
	
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента(ПараметрыОС); 
	
	СтрокаДанных = ПараметрыОС[ТекущаяСтрока.ОсновноеСредство];
	ЗаполнитьСтрокуТЧПоСтрокеДанных(ТекущаяСтрока,СтрокаДанных);
	
	ЗаполнитьИнвентарныеНомера(ИДСтроки);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОССервер(МассивОС)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыОС = ДокОбъект.ПолучитьПараметрыОС(МассивОС);
	
	Возврат ПараметрыОС;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуТЧПоСтрокеДанных(ТекущаяСтрока,СтрокаДанных)
	
	Если СтрокаДанных <> Неопределено 
		И ТекущаяСтрока <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,СтрокаДанных);	
		Для й = 1 По фКоличествоСубконтоМУ Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СчетУчета) Тогда
				
				ТекущаяСтрока.СчетУчета = СтрокаДанных.СчетУчета_Старый;
				ИзменениеСчетаУчета(ТекущаяСтрока.ПолучитьИдентификатор());
				ТекущаяСтрока["Субконто"+й] = СтрокаДанных["Субконто_старый"+й];
				
			КонецЕсли; 
			
		КонецЦикла; // По количесту субконто МУ
		
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьСтрокуТЧПоСтрокеДанных()

&НаСервере
Процедура ПриИзмененииКласса(ИДСтроки)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.Класс) Тогда
		Возврат;
	КонецЕсли;
	
	// //проверим, что вид класса - инвестиционная собственность
	// Если ТекущаяСтрока.Класс.ВидКласса <> Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность Тогда
	// 	
	// 	ТекущаяСтрока.Класс = Неопределено;
	// 	ТекстСообщения = НСтр("ru='Может быть выбран только класс вида ""Инвестиционная собственность""!'");
	// 	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	// 	
	// КонецЕсли; 
	
	
	// Получим параметры класса и заполним реквизиты таб. части.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Объект.Организация);
	СтруктураПараметров.Вставить("Класс"      ,ТекущаяСтрока.Класс);
	
	ПараметрыКласса = бит_му_ВНА.ПолучитьПараметрыКлассаВНА(СтруктураПараметров);
	
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Для Каждого КиЗ Из ПараметрыКласса Цикл
		
		ИмяКолонки = КиЗ.Ключ;
		
		Если бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(ИмяКолонки,МетаданныеОбъекта,"ОсновныеСредства") Тогда
			
			ТекущаяСтрока[ИмяКолонки] = КиЗ.Значение;
			
			Если ИмяКолонки = "СчетУчета" Тогда
				
				ИзменениеСчетаУчета(ИДСтроки);
				
			КонецЕсли; 
			
		КонецЕсли;  // Есть реквизит ТЧ
		
	КонецЦикла; // По параметрам класса
	
	Если ПараметрыКласса.МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости Тогда
		
		ТекущаяСтрока.НачислятьАмортизацию      = Ложь;
		ТекущаяСтрока.СчетНачисленияАмортизации = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
		
	Иначе	 
		
		ТекущаяСтрока.НачислятьАмортизацию = ТекущаяСтрока.НачислятьАмортизацию_Старый;
		
	КонецЕсли; 
	
	//БИТ Тртилек К.И. 29.06.2012 новый счет заполняется жестко
	Если ТекущаяСтрока.Класс = Справочники.бит_му_КлассыОсновныхСредств.ЗданияИС Тогда
		 ТекущаяСтрока.СчетУчета = ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду("11302");
	ИначеЕсли ТекущаяСтрока.Класс = Справочники.бит_му_КлассыОсновныхСредств.ЗемляИС Тогда
		 ТекущаяСтрока.СчетУчета = ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду("11301");
	КонецЕсли;	
	///БИТ Тртилек	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОС()
	
	МассивОС    = Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	ПараметрыОС = ПолучитьПараметрыОССервер(МассивОС);	
	
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента(ПараметрыОС); 
	
	Для Каждого ТекущаяСтрока Из Объект.ОсновныеСредства Цикл
		
		СтрокаДанных = ПараметрыОС[ТекущаяСтрока.ОсновноеСредство];
		ЗаполнитьСтрокуТЧПоСтрокеДанных(ТекущаяСтрока,СтрокаДанных);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборОС(ВыбранноеЗначение)
	
	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов,ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	
	МассивОС = ТаблицаДанных.ВыгрузитьКолонку("ВНА");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивОС);
	ПараметрыОбъектов = ПолучитьПараметрыОССервер(МассивОС);
	
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента(ПараметрыОбъектов); 
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ВНА);
		
		МассивСтрок = Объект.ОсновныеСредства.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = Объект.ОсновныеСредства.Добавить();
			НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ВНА;
			СтрокаПараметров = ПараметрыОбъектов[НоваяСтрока.ОсновноеСредство];
			ЗаполнитьСтрокуТЧПоСтрокеДанных(НоваяСтрока,СтрокаПараметров);
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Основное средство ""%1%"" инв. № %2% уже подобрано в строке №%3%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																					,СтрокаТаблицы.ВНА
																					,СтрокаТаблицы.ИнвентарныйНомер
																					,НайденнаяСтрока.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных
	
	ЗаполнитьИнвентарныеНомера();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента(ПараметрыОС)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыОС);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
		
КонецПроцедуры


// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ОсновныеСредства;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество()>0 
		И ЗначениеЗаполнено(мКэшРеквизитовФормы.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаДокумента)Тогда

		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);						  
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;
	
КонецПроцедуры // ИзменениеВалютыКлиент()  

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТаблицаОбъекта = Объект.ОсновныеСредства;
		
		// Получим курсы валют на дату принятия к учету для каждого ОС.
		КурсыСтарые = ПолучитьКурсыВалютПоПериодам(мКэшРеквизитовФормы);
		КурсыНовые = ПолучитьКурсыВалютПоПериодам(,Истина);
		
		МассивСуммДляПересчета = Новый Массив;
		МассивСуммДляПересчета.Добавить("БалансоваяСтоимость");
		МассивСуммДляПересчета.Добавить("НачисленнаяАмортизация");
		МассивСуммДляПересчета.Добавить("СуммаОбесценения");
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			Если НЕ КурсыСтарые[СтрокаТаблицы.ОсновноеСредство] = Неопределено 
				И НЕ КурсыНовые[СтрокаТаблицы.ОсновноеСредство] = Неопределено Тогда
				
				СтарыеКурсы = КурсыСтарые[СтрокаТаблицы.ОсновноеСредство].СтарыеКурсы;
				НовыеКурсы = КурсыНовые[СтрокаТаблицы.ОсновноеСредство].НовыеКурсы;
				
				Для каждого ИмяСуммы Из МассивСуммДляПересчета Цикл
					
					
					СтрокаТаблицы[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[ИмяСуммы]
																									,СтарыеКурсы.Валюта
																									,НовыеКурсы.Валюта
																									,СтарыеКурсы.Курс
																									,НовыеКурсы.Курс
																									,СтарыеКурсы.Кратность
																									,НовыеКурсы.Кратность);
				КонецЦикла; 
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()

&НаСервере
Функция ПолучитьКурсыВалютПоПериодам(КешСтарыеКурсы = Неопределено, флНовыеКурсы = Ложь)
	
	Если флНовыеКурсы Тогда
		
		НовыеКурсы = Новый Структура;
		НовыеКурсы.Вставить("Валюта", Объект.ВалютаДокумента);
		НовыеКурсы.Вставить("Кратность", Объект.КратностьДокумента);
		НовыеКурсы.Вставить("Курс", Объект.КурсДокумента);
		
		СтруктураКурсовВалют = Новый Структура;
		СтруктураКурсовВалют.Вставить("НовыеКурсы", НовыеКурсы);
		
	Иначе
		
		СтарыеКурсы = Новый Структура;
		СтарыеКурсы.Вставить("Валюта", КешСтарыеКурсы.ВалютаДокумента); 
		СтарыеКурсы.Вставить("Кратность", КешСтарыеКурсы.КратностьДокумента);
		СтарыеКурсы.Вставить("Курс", КешСтарыеКурсы.КурсДокумента);
		
		СтруктураКурсовВалют = Новый Структура;
		СтруктураКурсовВалют.Вставить("СтарыеКурсы", СтарыеКурсы);
		
	КонецЕсли; 
	
	МассивОС = Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ТаблицаДанных = ДокументОбъект.ПодготовитьТаблицуДатПринятияОС(МассивОС);
	ТаблицаПериодов = ТаблицаДанных.Скопировать(, "Период");
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсовВалют);
	
	СоответствиеКурсовИОС = Новый Соответствие;
	
	Для каждого Строка Из ТаблицаДанных Цикл
		СоответствиеКурсовИОС.Вставить(Строка.ОсновноеСредство, Курсы[Строка.Период])
	КонецЦикла; 

	Возврат СоответствиеКурсовИОС;
	
КонецФункции

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , "");
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,ИмяТабличногоПоля,ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента,ИмяТабличногоПоля,"");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура ИзменениеСубконто(Контейнер,ИмяСубконто,ЗначениеСубконто)

	  СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер,ИмяСубконто,фКоличествоСубконтоМУ);
	  бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто,ИмяСубконто,ЗначениеСубконто,фКоличествоСубконтоМУ);
      бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто,Контейнер,ИмяСубконто,"",фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Контейнер,ИмяСубконто,ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,ИмяСубконто
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

#КонецОбласти

#КонецОбласти

