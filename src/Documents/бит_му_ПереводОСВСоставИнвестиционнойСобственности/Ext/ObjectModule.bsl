#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаМеждУчета Экспорт; // Хранит валюту международного учета

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураКурсыВалют     = СформироватьСтруктуруКурсовВалют(СтруктураШапкиДокумента,Отказ,Заголовок);
	
	// Получим исторические курсы валют по каждому ВНА.
	МассивОС = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	МассивОС = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивОС);
	ИсторическиеКурсы = ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, СтруктураШапкиДокумента.Дата, СтруктураКурсыВалют);

	СтруктураТаблиц = ПодготовитьТаблицыДокумента();
	
	ПроверкаТаблицыОС(СтруктураТаблиц.ОС,СтруктураШапкиДокумента,Отказ,Заголовок);
	
	//БИТ Тртилек 10.07.2012
	ПроверкаНаАмортизациюПозднейДатой(Отказ, СтруктураТаблиц.ОС, Дата);
	///БИТ Тртилек
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураКурсыВалют,ИсторическиеКурсы,СтруктураТаблиц,Отказ,Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
 
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверим таблицу 
	ТекстКритерий1 = "СтрокаТаблицы.НачислятьАмортизацию";
	
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("СчетНачисленияАмортизации",ТекстКритерий1);		
	
	бит_ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект
	                                                        ,"ОсновныеСредства"
															,СтруктураОбязательныхПолей
															,Отказ
															,"");
	
	// Проверим наличие дублей в табличной части "Основные средства".	
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство");
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
	                                                                  , "ОсновныеСредства"
																	  , СтруктураОбязательныхПолей
																	  , Отказ);
																	  
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция получает параметры ОС по массиву ОС.
// 
// Параметры:
//  МассивОС  - Массив
// 
// Возвращаемое значение:
// ПараметрыОС - Соответствие
// 
Функция ПолучитьПараметрыОС(МассивОС)   Экспорт

	// Адаптация для ERP. Начало. 18.03.2014{{
	ИмяСправочникаОсновныеСредства = бит_ОбщегоНазначения.ПолучитьИмяСправочникаОсновныеСредства();
	// Адаптация для ERP. Конец. 18.03.2014}}
	
	// Сформируем массив параметров ОС для получения.
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
	
	// Сформируем структуру параметров для получения таблицы параметров ОС.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     , Организация);
	СтруктураПараметров.Вставить("ОсновноеСредство", МассивОС);
	СтруктураПараметров.Вставить("МоментВремени"   , ?(ЭтоНовый(), КонецДня(Дата), МоментВремени()));
	СтруктураПараметров.Вставить("ПараметрыВНА"	   , ПараметрыВНА);
	
	// Получим таблицу параметров ОС.
	ТаблицаПараметров = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	
	//БИТ Тртилек 09.07.2012
	Параметры = Новый Массив(2);
	Параметры[0] = МоментВремени();
	Параметры[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),Параметры);
	///БИТ Тртилек
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаПараметров",ТаблицаПараметров);
	//БИТ Тртилек 09.07.2012
	//Запрос.УстановитьПараметр("МоментВремени",МоментВремени());
	Запрос.УстановитьПараметр("МоментВремени",Граница);
	///БИТ Тртилек	
	Запрос.УстановитьПараметр("КонецМесяца", Новый Граница(КонецМесяца(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("МассивОС",МассивОС);
	Запрос.УстановитьПараметр("МассивСчетовУчета",ТаблицаПараметров.ВыгрузитьКолонку("СчетУчета_ОС"));
	Запрос.УстановитьПараметр("МассивСчетовАмортизация",ТаблицаПараметров.ВыгрузитьКолонку("СчетНачисленияАмортизации_ОС"));
	Запрос.УстановитьПараметр("МассивСчетовСнижения",ТаблицаПараметров.ВыгрузитьКолонку("СчетСниженияСтоимости_ОС"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПараметров.ВНА КАК ОсновноеСредство,
	               |	ТаблицаПараметров.Класс_ОС КАК Класс,
	               |	ТаблицаПараметров.СчетСниженияСтоимости_ОС КАК СчетСниженияСтоимости,
	               |	ТаблицаПараметров.НачислятьАмортизацию_ОС КАК НачислятьАмортизацию,
	               |	ТаблицаПараметров.СчетНачисленияАмортизации_ОС КАК СчетНачисленияАмортизации,
	               |	ТаблицаПараметров.СчетУчета_ОС КАК СчетУчета
	               |ПОМЕСТИТЬ ТаблицаПараметров
	               |ИЗ
	               |	&ТаблицаПараметров КАК ТаблицаПараметров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПараметров.ОсновноеСредство,
	               |	ТаблицаПараметров.Класс КАК Класс_Старый,
	               |	ТаблицаПараметров.СчетСниженияСтоимости КАК СчетСниженияСтоимости_Старый,
	               |	ТаблицаПараметров.НачислятьАмортизацию КАК НачислятьАмортизацию_Старый,
	               |	ТаблицаПараметров.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации_Старый,
	               |	ТаблицаПараметров.СчетУчета КАК СчетУчета_Старый,
	               |	Стоимость_Остатки.Счет КАК Стоимость_Счет,
	               |	Стоимость_Остатки.Субконто1 КАК Субконто_Старый1,
	               |	Стоимость_Остатки.Субконто2 КАК Субконто_Старый2,
	               |	Стоимость_Остатки.Субконто3 КАК Субконто_Старый3,
	               |	Стоимость_Остатки.Субконто4 КАК Субконто_Старый4,
	               |	Амортизация_Остатки.Счет КАК Амортизация_Счет,
	               |	Амортизация_Остатки.Субконто1 КАК Амортизация_Субконто1,
	               |	Амортизация_Остатки.Субконто2 КАК Амортизация_Субконто2,
	               |	Амортизация_Остатки.Субконто3 КАК Амортизация_Субконто3,
	               |	Амортизация_Остатки.Субконто4 КАК Амортизация_Субконто4,
	               |	ЕСТЬNULL(Обесценение_Остатки.СуммаМУОстатокКт, 0) КАК СуммаОбесценения,
	               |	ЕСТЬNULL(Амортизация_Остатки.СуммаМУОстатокКт, 0) КАК НачисленнаяАмортизация,
	               |	ЕСТЬNULL(Стоимость_Остатки.СуммаМУОстатокДт, 0) КАК БалансоваяСтоимость
	               |ИЗ
	               |	ТаблицаПараметров КАК ТаблицаПараметров
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&МоментВремени,
	               |				Счет В (&МассивСчетовУчета),
	               |				,
	               |				Организация = &Организация
	             //  |					И Субконто1 В (&МассивОС)
	               |					И ВЫБОР
				   // Адаптация для ERP. Начало. 18.03.2014{{
				   |						КОГДА Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто1  В (&МассивОС)
	               |						КОГДА Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто2  В (&МассивОС)
	               |						КОГДА Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто3  В (&МассивОС)
	               |						КОГДА Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто4  В (&МассивОС)
	               |						ИНАЧЕ ЛОЖЬ
	               |					КОНЕЦ) КАК Стоимость_Остатки
	               |		ПО (ВЫБОР
	               |				КОГДА Стоимость_Остатки.Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Стоимость_Остатки.Субконто1
	               |				КОГДА Стоимость_Остатки.Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Стоимость_Остатки.Субконто2
	               |				КОГДА Стоимость_Остатки.Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Стоимость_Остатки.Субконто3
	               |				КОГДА Стоимость_Остатки.Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Стоимость_Остатки.Субконто4
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ)
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&КонецМесяца,
	               |				Счет В (&МассивСчетовАмортизация),
	               |				,
	               |				Организация = &Организация
	              // |					И Субконто1 В (&МассивОС)
	               |					И ВЫБОР
	               |						КОГДА Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто1  В (&МассивОС)
	               |						КОГДА Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто2  В (&МассивОС)
	               |						КОГДА Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто3  В (&МассивОС)
	               |						КОГДА Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто4  В (&МассивОС)
	               |						ИНАЧЕ ЛОЖЬ
	               |					КОНЕЦ) КАК Амортизация_Остатки
	               |		ПО (ВЫБОР
	               |				КОГДА Амортизация_Остатки.Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Амортизация_Остатки.Субконто1
	               |				КОГДА Амортизация_Остатки.Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Амортизация_Остатки.Субконто2
	               |				КОГДА Амортизация_Остатки.Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Амортизация_Остатки.Субконто3
	               |				КОГДА Амортизация_Остатки.Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Амортизация_Остатки.Субконто4
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ)
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&МоментВремени,
	               |				Счет В (&МассивСчетовСнижения),
	               |				,
	               |				Организация = &Организация
	              // |					И Субконто1 В (&МассивОС)
	               |					И ВЫБОР
	               |						КОГДА Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто1  В (&МассивОС)
	               |						КОГДА Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто2  В (&МассивОС)
	               |						КОГДА Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто3  В (&МассивОС)
	               |						КОГДА Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |							ТОГДА Субконто4  В (&МассивОС)
	               |						ИНАЧЕ ЛОЖЬ
	               |					КОНЕЦ) КАК Обесценение_Остатки
	               |		ПО (ВЫБОР
	               |				КОГДА Обесценение_Остатки.Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Обесценение_Остатки.Субконто1
	               |				КОГДА Обесценение_Остатки.Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Обесценение_Остатки.Субконто2
	               |				КОГДА Обесценение_Остатки.Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Обесценение_Остатки.Субконто3
	               |				КОГДА Обесценение_Остатки.Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+"
	               |					ТОГДА ТаблицаПараметров.ОсновноеСредство = Обесценение_Остатки.Субконто4
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ)
				   // Адаптация для ERP. Конец. 18.03.2014}}
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаПараметров";
				   
    Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ПараметрыОС = Новый Соответствие;
	
	РезТаблица = Результат.Выгрузить();
	
	Для каждого СтрокаТаблицы Из РезТаблица Цикл
	
		ПараметрыОС.Вставить(СтрокаТаблицы.ОсновноеСредство,СтрокаТаблицы);
	
	КонецЦикла; 
	
	
	Возврат ПараметрыОС;

КонецФункции // ПолучитьПараметрыОС()

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура выполняет валютные пересчеты из валюты МУ в валюту документа.
// 
// Параметры:
//  ПараметрыОС
// 
Процедура ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыОС) Экспорт
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ВидыКурсов = Новый Структура("МУ, Документ");
	
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата,ВидыКурсов);
	
	МассивСуммДляПересчета = Новый Массив;
	МассивСуммДляПересчета.Добавить("БалансоваяСтоимость");
	МассивСуммДляПересчета.Добавить("НачисленнаяАмортизация");
	МассивСуммДляПересчета.Добавить("СуммаОбесценения");
	
	МассивОС = Новый Массив; 
	Для каждого КлючИЗначение Из ПараметрыОС Цикл
		МассивОС.Добавить(КлючИЗначение.Ключ);
	КонецЦикла; 
	ТаблицаДанных = ПодготовитьТаблицуДатПринятияОС(МассивОС);
	ТаблицаПериодов = ТаблицаДанных.Скопировать(, "Период");
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсыВалют);
	
	СоответствиеКурсовИОС = Новый Соответствие;
	
	Для каждого Строка Из ТаблицаДанных Цикл
		СоответствиеКурсовИОС.Вставить(Строка.ОсновноеСредство, Курсы[Строка.Период])
	КонецЦикла; 

	Для Каждого КлючИЗначение Из ПараметрыОС Цикл
		
		КурсыМУ 	  = СоответствиеКурсовИОС[КлючИЗначение.Ключ].МУ;
		КурсыДокумент = СоответствиеКурсовИОС[КлючИЗначение.Ключ].Документ;
		
		ВНА = КлючИЗначение.Значение;
		
		Для каждого ИмяСуммы Из МассивСуммДляПересчета Цикл
			
			
			ВНА[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ВНА[ИмяСуммы]
							,КурсыМУ.Валюта
							,КурсыДокумент.Валюта
							,КурсыМУ.Курс
							,КурсыДокумент.Курс
							,КурсыМУ.Кратность
							,КурсыДокумент.Кратность);
		КонецЦикла; 
		
	КонецЦикла;

	
КонецПроцедуры

// Функция готовит таблицы документа для проведения.
// 
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицыДокумента()  Экспорт
	
	СтруктураТаблиц = Новый Структура;
	
	// Получим параметры классов ВНА
	ПараметрыКлассов = Новый Соответствие;
	МассивКлассов = ОсновныеСредства.ВыгрузитьКолонку("Класс");
	МассивОС	  = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	
	Для каждого Класс Из МассивКлассов Цикл
		
		СтруктураПараметров = Новый Структура("Организация,Класс",Организация,Класс);
		ПараметрыКлассов.Вставить(Класс,бит_му_ВНА.ПолучитьПараметрыКлассаВНА(СтруктураПараметров));
	
	КонецЦикла; 
	
	СтруктураТаблиц.Вставить("ПараметрыКлассов",ПараметрыКлассов);
	
	// Сформирует таблицу ОС
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка"             ,Ссылка);
	Запрос.УстановитьПараметр("МоментВремени"      ,МоментВремени());
	Запрос.УстановитьПараметр("Организация"        ,Организация);
	Запрос.УстановитьПараметр("ПараметрФинансоваяАренда",ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ФинансоваяАренда_ОС);
	Запрос.УстановитьПараметр("ПустоеСсылочноеЗначение" ,Перечисления.бит_му_МетодыНачисленияАмортизации.ПустаяСсылка());
	Запрос.УстановитьПараметр("СостояниеПринято"   ,Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("СостояниеВыбыло"    ,Перечисления.бит_му_СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("МассивОС", МассивОС);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	бит_му_СобытияОС.ОсновноеСредство
	|ПОМЕСТИТЬ НачисленаАмортизацияСледующий
	|ИЗ
	|	РегистрСведений.бит_му_СобытияОС КАК бит_му_СобытияОС
	|ГДЕ
	|	бит_му_СобытияОС.Организация = &Организация
	|	И бит_му_СобытияОС.Событие = ЗНАЧЕНИЕ(Перечисление.бит_му_СобытияОс.НачислениеАмортизации)
	|	И бит_му_СобытияОС.ОсновноеСредство В(&МассивОС)
	|	И бит_му_СобытияОС.Период >= ДОБАВИТЬКДАТЕ(&НачалоПериода, МЕСЯЦ, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабЧасть.ОсновноеСредство,
	|	ТабЧасть.НомерСтроки,
	|	Принятые.ДатаСостояния КАК ДатаПринятия,
	|	Выбывшие.ДатаСостояния КАК ДатаВыбытия,
	|	ВЫБОР
	|		КОГДА ТабЧасть.Класс_Старый <> ТабЧасть.Класс
	|			ТОГДА ТабЧасть.Класс
	|		ИНАЧЕ &ПустоеСсылочноеЗначение
	|	КОНЕЦ КАК Класс_ОС,
	|	ВЫБОР
	|		КОГДА ТабЧасть.СчетУчета_Старый <> ТабЧасть.СчетУчета
	|			ТОГДА ТабЧасть.СчетУчета
	|		ИНАЧЕ &ПустоеСсылочноеЗначение
	|	КОНЕЦ КАК СчетУчета_ОС,
	|	ВЫБОР
	|		КОГДА ТабЧасть.СчетНачисленияАмортизации_Старый <> ТабЧасть.СчетНачисленияАмортизации
	|			ТОГДА ТабЧасть.СчетНачисленияАмортизации
	|		ИНАЧЕ &ПустоеСсылочноеЗначение
	|	КОНЕЦ КАК СчетНачисленияАмортизации_ОС,
	|	ВЫБОР
	|		КОГДА ТабЧасть.СчетСниженияСтоимости_Старый <> ТабЧасть.СчетСниженияСтоимости
	|			ТОГДА ТабЧасть.СчетСниженияСтоимости
	|		ИНАЧЕ &ПустоеСсылочноеЗначение
	|	КОНЕЦ КАК СчетСниженияСтоимости_ОС,
	|	ВЫБОР
	|		КОГДА ТабЧасть.НачислятьАмортизацию_Старый <> ТабЧасть.НачислятьАмортизацию
	|			ТОГДА ТабЧасть.НачислятьАмортизацию
	|		ИНАЧЕ &ПустоеСсылочноеЗначение
	|	КОНЕЦ КАК НачислятьАмортизацию_ОС,
	|	ТабЧасть.Класс,
	|	ТабЧасть.СчетУчета,
	|	ТабЧасть.СчетНачисленияАмортизации,
	|	ТабЧасть.СчетСниженияСтоимости,
	|	ТабЧасть.НачислятьАмортизацию,
	|	ТабЧасть.СчетУчета_Старый,
	|	ТабЧасть.Субконто_старый1,
	|	ТабЧасть.Субконто_старый2,
	|	ТабЧасть.Субконто_старый3,
	|	ТабЧасть.Субконто_старый4,
	|	ТабЧасть.Субконто1,
	|	ТабЧасть.Субконто2,
	|	ТабЧасть.Субконто3,
	|	ТабЧасть.Субконто4,
	|	ТабЧасть.БалансоваяСтоимость,
	|	ТабЧасть.НачисленнаяАмортизация,
	|	ТабЧасть.СуммаОбесценения,
	|	ТабЧасть.СчетНачисленияАмортизации_Старый,
	|	ТабЧасть.СчетСниженияСтоимости_Старый,
	|	ВЫБОР
	|		КОГДА НЕ НачисленаАмортизацияСледующий.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачисленаСледующий
	|ИЗ
	|	Документ.бит_му_ПереводОСВСоставИнвестиционнойСобственности.ОсновныеСредства КАК ТабЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК Принятые
	|		ПО ТабЧасть.ОсновноеСредство = Принятые.ОсновноеСредство
	|			И ТабЧасть.Ссылка.Организация = Принятые.Организация
	|			И (Принятые.Состояние = &СостояниеПринято)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК Выбывшие
	|		ПО ТабЧасть.ОсновноеСредство = Выбывшие.ОсновноеСредство
	|			И ТабЧасть.Ссылка.Организация = Выбывшие.Организация
	|			И (Выбывшие.Состояние = &СостояниеВыбыло)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленаАмортизацияСледующий КАК НачисленаАмортизацияСледующий
	|		ПО ТабЧасть.ОсновноеСредство = НачисленаАмортизацияСледующий.ОсновноеСредство
	|ГДЕ
	|	ТабЧасть.Ссылка = &Ссылка
	|	И (ТабЧасть.Класс_Старый <> ТабЧасть.Класс
	|			ИЛИ ТабЧасть.СчетУчета_Старый <> ТабЧасть.СчетУчета
	|			ИЛИ ТабЧасть.СчетНачисленияАмортизации_Старый <> ТабЧасть.СчетНачисленияАмортизации
	|			ИЛИ ТабЧасть.НачислятьАмортизацию_Старый <> ТабЧасть.НачислятьАмортизацию
	|			ИЛИ ТабЧасть.СчетСниженияСтоимости_Старый <> ТабЧасть.СчетСниженияСтоимости)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачисленаАмортизацияСледующий";
					
	РезТаблица = Запрос.Выполнить().Выгрузить();
	
	СтруктураТаблиц.Вставить("ОС",РезТаблица);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицуБДДС()

// Функция подготавливает таблицу дат принятия ОС.
// 
// Параметры:
//  МассивОС - Массив
// 
// Возвращаемое значение:
//  ТаблицаЗначения
// 
Функция ПодготовитьТаблицуДатПринятияОС(МассивОС) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СостояниеПринято", Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("МассивОС", МассивОС);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_му_СостоянияОС.ОсновноеСредство,
	|	бит_му_СостоянияОС.ДатаСостояния КАК Период
	|ИЗ
	|	РегистрСведений.бит_му_СостоянияОС КАК бит_му_СостоянияОС
	|ГДЕ
	|	бит_му_СостоянияОС.ОсновноеСредство В(&МассивОС)
	|	И бит_му_СостоянияОС.Состояние = &СостояниеПринято
	|	И бит_му_СостоянияОС.Организация = &Организация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования=Неопределено)
	
	// Заполним шапку документа значениями по умолчанию.
    бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);

	Дата = ТекущаяДатаСеанса();
	
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

// Процедура проверят таблицу ОС на наличие принятые либо выбывшие ОС.
// 
// Параметры:
//  ТаблицаОС  - ТаблицаЗначений
//  Отказ      - Булево
//  Заголовок  - Строка
// 
Процедура ПроверкаТаблицыОС(ТаблицаОС,СтруктураШапкиДокумента,Отказ,Заголовок)

	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл
		
		НачалоСообщения = НСтр("ru='В строке № %1% табличной части ""Основные средства""'");
		НачалоСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НачалоСообщения,СтрокаТаблицы.НомерСтроки);
		
		// Проверка на принятие к учету, выбытие и финансовую аренду.
		бит_му_ВНА.ПроверитьСтрокуТаблицыОС(СтрокаТаблицы,ТаблицаОС.Колонки,СтруктураШапкиДокумента,Отказ,Заголовок);							   		
		
		Если СтрокаТаблицы.НачисленаСледующий Тогда
			
			ТекстСообщения = НСтр("ru=' указано основное средство ""%1%"", по которому начислена амортизация в следующих периодах!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтрокаТаблицы.ОсновноеСредство);
			
			ТекстСообщения = НачалоСообщения + ТекстСообщения;
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры // ПроверкаТаблицыОС()

// Функция получает курсы валют, необходимые для выполнения валютных пересчетов.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  Отказ                    - Булево.
//  Заголовок                - Строка.
// 
Функция СформироватьСтруктуруКурсовВалют(СтруктураШапкиДокумента,Отказ,Заголовок) 
	
	// Получим курсы валют, неоходимые для выполнения пересчетов
	// ВидыКурсов = Новый Структура("Упр,Регл,МУ");
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата,ВидыКурсов);
	// СтруктураКурсыВалют.Вставить("Документ",СтруктураКурсыВалют.МУ);
	
	СтрКурсов = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	Если НЕ ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		
		ТекстСообщения = НСтр("ru='Для организации ""%1%"" не указана валюта международного учета!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтруктураШапкиДокумента.Организация);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		
	КонецЕсли; 
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // СформироватьСтруктуруКурсовВалют()

Функция ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, Период, СтруктураКурсыВалют)
	
	ИсторическиеКурсы = бит_му_ВНА.ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, Период, СтруктураКурсыВалют);	
	
	// Получим дату принятия к учету для каждого ОС.
	ТаблицаДатПринятияОС = ПодготовитьТаблицуДатПринятияОС(МассивОС);
	
	ТаблицаПериодов = ТаблицаДатПринятияОС.Скопировать();
	ТаблицаПериодов.Свернуть("Период");
	СтруктураКурсыВалютДокумент = Новый Структура;
	СтруктураКурсыВалютДокумент.Вставить("Документ", СтруктураКурсыВалют.Документ); 
	
	// Получим курсы валюты документа для каждого ОС на дату принятия к учету.
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсыВалютДокумент);

	СоответствиеКурсовИОС = Новый Соответствие;
	 
	Для каждого Строка Из ТаблицаДатПринятияОС Цикл
		СоответствиеКурсовИОС.Вставить(Строка.ОсновноеСредство, Курсы[Строка.Период])
	КонецЦикла; 
	
	Для Каждого ТекОС Из ИсторическиеКурсы Цикл
		Если НЕ СоответствиеКурсовИОС[ТекОС.Ключ] = Неопределено Тогда
			ТекОС.Значение.Документ = СоответствиеКурсовИОС[ТекОС.Ключ].Документ;
		КонецЕсли;
	КонецЦикла;

	// Для Каждого ТекОС Из ИсторическиеКурсы Цикл
	// 	ТекОС.Значение.Документ = ТекОС.Значение.МУ;
	// КонецЦикла;
	
	Возврат ИсторическиеКурсы;
	
КонецФункции

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураКурсыВалют,ИсторическиеКурсы,СтруктураТаблиц,Отказ,Заголовок)
	
	// Движения по регистру сведений бит_му_ПараметрыОС.
	КолонкиТаблицы = СтруктураТаблиц.ОС.Колонки;
	ТаблицаДанных  = СтруктураТаблиц.ОС;
	НаборЗаписей   = Движения.бит_му_ПараметрыОС;
	
	ВидыПараметров = бит_му_ВНА.ПолучитьВидыПараметров(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ОсновныеСредства);
	бит_му_ВНА.ЗаписатьПараметрыВНА(НаборЗаписей,СтруктураШапкиДокумента,ТаблицаДанных,ВидыПараметров);	
	
	// Движения по регистру бухгалтерии бит_Дополнительный_2.
	
	СтрКурса = СтруктураКурсыВалют.МУ;
	ВалютаМУ = СтрКурса.Валюта;
	
	ПараметрыКлассов = СтруктураТаблиц.ПараметрыКлассов;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ПараметрыКласса = СтруктураТаблиц.ПараметрыКлассов[СтрокаТаблицы.Класс];
		флУчетПоСправедливойСтоимости = Ложь;
		Если ПараметрыКласса <> Неопределено Тогда
			 флУчетПоСправедливойСтоимости = ?(ПараметрыКласса.МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости,Истина,Ложь);
		КонецЕсли; 
		
		Если флУчетПоСправедливойСтоимости Тогда
			
			// Списание амортизации
			// ДТ СчетАмортизацииОС КТ СчетУчетаОС НачисленнаяАмортизация.
			 СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента,СтрокаТаблицы,ВалютаМУ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]);
			
			
			// Перевод балансовой стоимости
			// ДТ СчетУчетаИН КТ СчетУчетаОС БалансоваяСтоимость+НачисленнаяАмортизация.
			 СоздатьЗаписьПоПереводуБалансовойСтоимости(СтруктураШапкиДокумента,СтрокаТаблицы,ВалютаМУ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство],Истина);
			
			
			
			
		Иначе // По первоначальной стоимости
			
			// Перевод балансовой стоимости
			// ДТ СчетУчетаИН КТ СчетУчетаОС БалансоваяСтоимость.
			 СоздатьЗаписьПоПереводуБалансовойСтоимости(СтруктураШапкиДокумента,СтрокаТаблицы,ВалютаМУ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство],Ложь);
			
			
			// Перевод амортизации
			// ДТ СчетАмортизацииОС КТ СчетАмортизацииИН НачисленнаяАмортизация.
			 СоздатьЗаписьПоПереводуАмортизации(СтруктураШапкиДокумента,СтрокаТаблицы,ВалютаМУ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]);
			
			   
			
		КонецЕсли; 
		
		
		// Перевод обесценения
		// ДТ СчетСниженияСтоимостиОС КТ СчетСниженияСтоимостиИН СуммаОбесценения.
		 СоздатьЗаписьПоПереводуОбесценения(СтруктураШапкиДокумента,СтрокаТаблицы,ВалютаМУ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]);
		
		
			
	КонецЦикла; 
	
	// Движения по регистру сведений "бит_му_СобытияОС".
	
	НаборЗаписей   = Движения.бит_му_СобытияОС;
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Запись = ТаблицаЗаписей.Добавить();
		Запись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
	КонецЦикла;
	
	Событие = Перечисления.бит_му_СобытияОС.ПереводВСоставИнвестиционнойСобственности;
	
	ТаблицаЗаписей.ЗаполнитьЗначения(Истина		   						, "Активность");
	ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата		, "Период");
	ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаЗаписей.ЗаполнитьЗначения(Событие	   						, "Событие");
	
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует проводку по переводу балансовой стоимости ОС на счет ИН.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТаблицыЗначений.
//  ВалютаМУ                 - СправочникСсылка.Валюты.
//  СтруктураКурсыВалют      - Структура.
//  АмортизацияСписана       - Булево - признак, того что к балансовой стоимости следует добавлять сумму амортизации.
//                
Процедура СоздатьЗаписьПоПереводуБалансовойСтоимости(СтруктураШапкиДокумента,СтрокаТаблицы,ВалютаМУ,СтруктураКурсыВалют,АмортизацияСписана)

	Если АмортизацияСписана Тогда
		
		СуммаЗаписи = СтрокаТаблицы.БалансоваяСтоимость-СтрокаТаблицы.НачисленнаяАмортизация;
		
	Иначе	
		
		СуммаЗаписи = СтрокаТаблицы.БалансоваяСтоимость;
		
	КонецЕсли; 

	Если СуммаЗаписи = 0 Тогда
	
		Возврат;
	
	КонецЕсли; 

	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	СодержаниеПроводки = НСтр("ru='перевод балансовой стоимости'");
	
	// Заполнение атрибутов записи
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										   ,СтруктураШапкиДокумента.Организация
										   ,СтруктураШапкиДокумента.Дата
										   // ,ВалютаМУ
										   ,СтруктураКурсыВалют.Документ.Валюта
										   ,СтрокаТаблицы.СчетУчета
										   ,СтрокаТаблицы.СчетУчета_Старый
										   ,СуммаЗаписи
										   ,СодержаниеПроводки);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	// Заполнение аналитики
	Для  ном = 1 по мКоличествоСубконтоМУ Цикл
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,ном,СтрокаТаблицы["Субконто"+ном]);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,ном,СтрокаТаблицы["Субконто_старый"+ном]);			
		
		//БИТ Тртилек 13.07.2012
		Если СтрокаТаблицы["Субконто_старый"+ном] = Справочники.ОбъектыСтроительства.ПустаяСсылка() Тогда
			 бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,ном,СтрокаТаблицы["Субконто"+ном]);			
		КонецЕсли;
		///БИТ Тртилек
	КонецЦикла; 
	
	// Выполнение валютных пересчетов
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
													,Запись
													,МассивИмен
													,СтруктураКурсыВалют
													,СтруктураКурсыВалют.Документ);

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры // СоздатьЗаписьПоПереводуБалансовойСтоимости()

// Процедура формирует проводку по списанию амортизации ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТаблицыЗначений.
//  ВалютаМУ                 - СправочникСсылка.Валюты.
//  СтруктураКурсыВалют      - Структура.
//                
Процедура СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента,СтрокаТаблицы,ВалютаМУ,СтруктураКурсыВалют)

	Если СтрокаТаблицы.НачисленнаяАмортизация = 0 Тогда
	
		Возврат;
	
	КонецЕсли; 

	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	СодержаниеПроводки = НСтр("ru='списана амортизация'");
	// Заполнение атрибутов записи	
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										   ,СтруктураШапкиДокумента.Организация
										   ,СтруктураШапкиДокумента.Дата
										   // ,ВалютаМУ
										   ,СтруктураКурсыВалют.Документ.Валюта
										   ,СтрокаТаблицы.СчетНачисленияАмортизации_Старый
										   ,СтрокаТаблицы.СчетУчета_Старый
										   ,СтрокаТаблицы.НачисленнаяАмортизация
										   ,СодержаниеПроводки);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	// Заполнение аналитики	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,"ОсновныеСредства",СтрокаТаблицы.ОсновноеСредство);		
	
	Для  ном = 1 по мКоличествоСубконтоМУ Цикл
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,ном,СтрокаТаблицы["Субконто_старый"+ном]);			
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,ном,СтрокаТаблицы["Субконто"+ном]);			
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		
		//БИТ Тртилек 13.07.2012
		Если СтрокаТаблицы["Субконто_старый"+ном] = Справочники.ОбъектыСтроительства.ПустаяСсылка() Тогда
			 бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,ном,СтрокаТаблицы["Субконто"+ном]);			
		КонецЕсли;
		///БИТ Тртилек
		
	КонецЦикла; 
	
	// Выполнение валютных пересчетов	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
													,Запись
													,МассивИмен
													,СтруктураКурсыВалют
													,СтруктураКурсыВалют.Документ);

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

КонецПроцедуры // СоздатьЗаписьПоСписаниюАмортизации()

// Процедура формирует проводку по переводу начисленной амортизации со счета ОС на счет ИН.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТаблицыЗначений.
//  ВалютаМУ                 - СправочникСсылка.Валюты.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура СоздатьЗаписьПоПереводуАмортизации(СтруктураШапкиДокумента,СтрокаТаблицы,ВалютаМУ,СтруктураКурсыВалют)

	Если СтрокаТаблицы.НачисленнаяАмортизация = 0 Тогда
	
		Возврат;
	
	КонецЕсли; 

	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	СодержаниеПроводки = НСтр("ru='перевод начисленной амортизации'");
	// Заполнение атрибутов записи		
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										   ,СтруктураШапкиДокумента.Организация
										   ,СтруктураШапкиДокумента.Дата
										   // ,ВалютаМУ
										   ,СтруктураКурсыВалют.Документ.Валюта
										   ,СтрокаТаблицы.СчетНачисленияАмортизации_Старый
										   ,СтрокаТаблицы.СчетНачисленияАмортизации
										   ,СтрокаТаблицы.НачисленнаяАмортизация
										   ,СодержаниеПроводки);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	// Заполнение аналитики	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,"ОсновныеСредства",СтрокаТаблицы.ОсновноеСредство);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"ОсновныеСредства",СтрокаТаблицы.ОсновноеСредство);			
	
	// Выполнение валютных пересчетов		
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
													,Запись
													,МассивИмен
													,СтруктураКурсыВалют
													,СтруктураКурсыВалют.Документ);


	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

КонецПроцедуры // СоздатьЗаписьПоПереводуБалансовойСтоимости()

// Процедура формирует проводку по переводу обесценения со счета ОС на счет ИН.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТаблицыЗначений.
//  ВалютаМУ                 - СправочникСсылка.Валюты.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура СоздатьЗаписьПоПереводуОбесценения(СтруктураШапкиДокумента,СтрокаТаблицы,ВалютаМУ,СтруктураКурсыВалют)

	Если СтрокаТаблицы.СуммаОбесценения = 0 Тогда
	
		Возврат;
	
	КонецЕсли; 

	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	СодержаниеПроводки = НСтр("ru='перевод обесценения'");
	// Заполнение атрибутов записи			
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										   ,СтруктураШапкиДокумента.Организация
										   ,СтруктураШапкиДокумента.Дата
										   // ,ВалютаМУ
										   ,СтруктураКурсыВалют.Документ.Валюта
										   ,СтрокаТаблицы.СчетСниженияСтоимости_Старый
										   ,СтрокаТаблицы.СчетСниженияСтоимости
										   ,СтрокаТаблицы.СуммаОбесценения
										   ,СодержаниеПроводки);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	// Заполнение аналитики			
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,"ОсновныеСредства",СтрокаТаблицы.ОсновноеСредство);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"ОсновныеСредства",СтрокаТаблицы.ОсновноеСредство);			
	
	//БИТ Тртилек 20.07.2012
	Для Ном = 1 По мКоличествоСубконтоМУ Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы["Субконто"+Ном]) И ТипЗнч(СтрокаТаблицы["Субконто"+Ном]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			 бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,"Объект",СтрокаТаблицы["Субконто"+Ном]);			
			 бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"Объект",СтрокаТаблицы["Субконто"+Ном]);			
		КонецЕсли;	
	КонецЦикла;
	///БИТ Тртилек
	
	// Выполнение валютных пересчетов			
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
													,Запись
													,МассивИмен
													,СтруктураКурсыВалют
													,СтруктураКурсыВалют.Документ);

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

КонецПроцедуры // СоздатьЗаписьПоПереводуОбесценения()

#КонецОбласти

//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
Процедура ПроверкаНаАмортизациюПозднейДатой(Отказ, ТаблицаОС, Дата)
	
	МассивОС = Новый Массив;
	
	Для Каждого Строка Из ТаблицаОС Цикл
		МассивОС.Добавить(Строка.ОсновноеСредство);		
	КонецЦикла;
	
	Если МассивОС.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_Дополнительный_2Субконто.Регистратор,
		               |	бит_Дополнительный_2Субконто.Значение
		               |ИЗ
		               |	РегистрБухгалтерии.бит_Дополнительный_2.Субконто КАК бит_Дополнительный_2Субконто
		               |ГДЕ
		               |	бит_Дополнительный_2Субконто.Вид = &Вид
		               |	И бит_Дополнительный_2Субконто.Период > &Период
		               |	И бит_Дополнительный_2Субконто.Значение В(&МассивОС)
		               |	И бит_Дополнительный_2Субконто.Регистратор ССЫЛКА Документ.бит_му_НачислениеАмортизацииОС
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	бит_Дополнительный_2Субконто.Регистратор,
		               |	бит_Дополнительный_2Субконто.Значение";
					   
		Запрос.УстановитьПараметр("Вид", ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ОсновныеСредства);			   
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("МассивОС", МассивОС);
		
		ТаблицаОсновныхСредств = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаОсновныхСредств.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаОсновныхСредств Цикл
				Сообщить("По основному средству: " + СтрокаТаблицы.Значение + " введено начисление аммортизации: " + Строка(СтрокаТаблицы.Регистратор) + " более поздним числом");
				Отказ = Истина;
			КонецЦикла;
		КонецЕсли; 		
		
	КонецЕсли;
	
КонецПроцедуры
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
