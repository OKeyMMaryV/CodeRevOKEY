#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗаполнитьСвойстваШапки() Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;

	ДокументПоступленияСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументПоступления = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
		Иначе	
			ИсправляемыйДокументПоступления = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументПоступления = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
	КонецЕсли;
	
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, ДокументПоступленияСсылка);
	
	Если ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда 
		
		РасчетыВУсловныхЕдиницах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступленияСсылка, "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
		Если РасчетыВУсловныхЕдиницах = Истина Тогда 
			ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КонецЕсли;
		
	КонецЕсли;
		
	// Если в качестве корректируемого документа выбран счет-фактура полученный, то 
	// в корректировку реализации реквизиты СуммаВключаетНДС, НДСВключенВСтоимость, ТипЦен 
	// необходимо из основания счета-фактуры.
	Если ТипЗнч(ДокументПоступленияСсылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		РеквизитыСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, "ДокументОснование");
		Если ЗначениеЗаполнено(РеквизитыСФ.ДокументОснование) Тогда
			МетаданныеДокументаОснования = РеквизитыСФ.ДокументОснование.Метаданные();
			СписокРеквизитов = "";
			
			// ТипЦен.
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипЦен", МетаданныеДокументаОснования) Тогда
				СписокРеквизитов = СписокРеквизитов + ", ТипЦен";
			КонецЕсли;

			// СуммаВключаетНДС.
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
				СписокРеквизитов = СписокРеквизитов + ", СуммаВключаетНДС";
			КонецЕсли;

			// НДСВключенВСтоимость.
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСВключенВСтоимость", МетаданныеДокументаОснования) Тогда
				СписокРеквизитов = СписокРеквизитов + ", НДСВключенВСтоимость";
			КонецЕсли;

			СписокРеквизитов = Сред(СписокРеквизитов, 3);
			Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
				РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСФ.ДокументОснование, СписокРеквизитов);
				
				Для Каждого Реквизит Из РеквизитыДокументаОснования Цикл
					ЭтотОбъект[Реквизит.Ключ] = Реквизит.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание, ВидОперацииЗаполнения = Неопределено) Экспорт
	
	ДокументПоступления = Основание;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		ЗаполнитьСвойстваШапки();
		Документы.КорректировкаПоступления.ЗаполнитьПоПоступлению(ЭтотОбъект);
		КорректироватьБУиНУ = Документы.КорректировкаПоступления.ДоступнаКорректировкаБУиНУ(ЭтотОбъект.ДокументПоступления);
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Грузоотправитель, Грузополучатель");
		Грузоотправитель   = ЗначенияРеквизитов.Грузоотправитель;
		Грузополучатель    = ЗначенияРеквизитов.Грузополучатель;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ЕстьСделкаПоДокументу = ЗначениеЗаполнено(Документы.ВозвратТоваровПоставщику.СделкаПоДокументу(Основание));
		
		Если НЕ ЕстьСделкаПоДокументу Тогда
			// Если нет сделки по документу - корректировка возможна только к КСФ к возврату
			ДокументПоступления = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Основание);
			Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не зарегистрирован счет-фактура к документу %1.'"),
					ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Основание));
					
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли; 
		Иначе
			КорректироватьБУиНУ = Документы.КорректировкаПоступления.ДоступнаКорректировкаБУиНУ(Основание);
		КонецЕсли; 
		
		ЗаполнитьСвойстваШапки();
		Документы.КорректировкаПоступления.ЗаполнитьПоВозвратуПоставщику(ЭтотОбъект, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		ЗаполнитьСвойстваШапки();
		Документы.КорректировкаПоступления.ЗаполнитьПоДопРасходам(ЭтотОбъект);
		КорректироватьБУиНУ = Документы.КорректировкаПоступления.ДоступнаКорректировкаБУиНУ(ЭтотОбъект.ДокументПоступления);
		
	Иначе
		
		ЗаполнитьСвойстваШапки();
		
	КонецЕсли;
	
	КорректироватьНДС = Истина;
	
	ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		?(ВидОперацииЗаполнения <> Неопределено, ВидОперацииЗаполнения, ВидОперации), Дата, ДокументПоступления);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыИсправления);
	
	Если КорректироватьБУиНУ Тогда
		ДокументПоступленияСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
		
		РеквизитыДокументаПоступления = Неопределено;
		Если ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
			РеквизитыДокументаПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступленияСсылка, "Дата");
		КонецЕсли;
		ДатаДокументаПоступления	= ?(РеквизитыДокументаПоступления <> Неопределено, РеквизитыДокументаПоступления.Дата, '00010101');
		
		Если ЗначениеЗаполнено(ДокументПоступленияСсылка) 
			И Год(ДатаДокументаПоступления) < Год(Дата) Тогда
			
			Если НЕ ЗначениеЗаполнено(СтатьяПрочихДоходовИРасходов) Тогда
				СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПредставлениеНомера() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		ЭтотОбъект.УстановитьНовыйНомер();	
	КонецЕсли;
	
	Если НЕ (ДополнительныеСвойства.Свойство("ПропуститьОбновлениеРеквизитовВСвязанныхДокументах") 
		И ДополнительныеСвойства.ПропуститьОбновлениеРеквизитовВСвязанныхДокументах = Истина) Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
			Если ЗначениеЗаполнено(ИсправляемыйДокументПоступления) Тогда
				НомерПредставления 	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокументПоступления, "Номер"), Истина, Ложь); 
				ПредставлениеНомера = Строка(НомерПредставления) + " (испр. " + НомерИсправления + ")";
			Иначе
				ПредставлениеНомера = "(испр. " + НомерИсправления + ")";	
			КонецЕсли;
		Иначе
			ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-13 (#3050)
	пИменаТЧ = "Товары,Услуги,АгентскиеУслуги";
	мИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пИменаТЧ);
	Для Каждого пИмяТЧ Из мИменаТЧ Цикл 
		Для Каждого Стр Из ЭтотОбъект[пИмяТЧ] Цикл
			Стр.ок_Период 			= Неопределено;	
			Стр.ок_ЦФО 				= Неопределено;	
			Стр.ок_Проект			= Неопределено;	
			Стр.ок_Аналитика_2 		= Неопределено;	
			Стр.ок_СтатьяОборотов 	= Неопределено;			
		КонецЦикла;
	КонецЦикла;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-13 (#3050)
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения.ДокументОснование, ВидОперацииЗаполнения);	
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	ПризнаватьЗачитыватьАванс = Истина;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
		
		Если Дата < '20150101' Тогда 
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Дата документа'"), , ,
				НСтр("ru = 'Исправление собственной ошибки не поддерживается до 01.01.2015 г.'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Дата", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	
	ЭтоКомиссия = ЗначениеЗаполнено(ДоговорКонтрагента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата);

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-29 (#4214)
	ЭтоВвозИзЕАЭС = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-29 (#4214) 
	
	РозницаВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
		И ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
		И НЕ ЭтоКомиссия;

	Если РозницаВПродажныхЦенах Тогда
		Для Каждого Строка Из Товары Цикл
			Если ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
				Строка.СчетУчета    = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
				Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
			Иначе
				Строка.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
				Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата) Тогда
		НДСВключенВСтоимость = Ложь;
	КонецЕсли;

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	УстановитьПредставлениеНомера();
	
	ЗаполнитьСвойстваШапки();

	ОбработатьСуммыДокорректировки();

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("ПометкаУдаления", ЭтотОбъект, "СчетФактураПолученный");
	Если НЕ (КорректироватьБУиНУ ИЛИ КорректироватьНДС) Тогда
		ПараметрыДействия.СостояниеФлага = Истина;
	КонецЕсли;
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);
	
	Если НЕ (ДополнительныеСвойства.Свойство("ПропуститьОбновлениеРеквизитовВСвязанныхДокументах") 
		И ДополнительныеСвойства.ПропуститьОбновлениеРеквизитовВСвязанныхДокументах = Истина) Тогда
		Документы.КорректировкаПоступления.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Товары,Услуги,АгентскиеУслуги", ",");
		
	СуммаУвеличение		= 0;
	СуммаУменьшение		= 0;
	СуммаНДСДокумента	= 0;
	СуммаНДСУвеличение	= 0;
	СуммаНДСУменьшение	= 0;
	Для каждого ИмяТабличнойЧасти Из МассивТабличныхЧастейДляРасчетаИтогов Цикл
		СуммаНДСДокумента	= СуммаНДСДокумента + ЭтотОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		Для каждого СтрокаТабличнойЧасти Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
			СуммаУвеличение		= СуммаУвеличение + Макс(СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаДоИзменения, 0);
			СуммаУменьшение		= СуммаУменьшение + Макс(СтрокаТабличнойЧасти.СуммаДоИзменения - СтрокаТабличнойЧасти.Сумма, 0);
			СуммаНДСУвеличение	= СуммаНДСУвеличение + Макс(СтрокаТабличнойЧасти.СуммаНДС - СтрокаТабличнойЧасти.СуммаНДСДоИзменения, 0);
			СуммаНДСУменьшение	= СуммаНДСУменьшение + Макс(СтрокаТабличнойЧасти.СуммаНДСДоИзменения - СтрокаТабличнойЧасти.СуммаНДС, 0);
		КонецЦикла;
	КонецЦикла;
	
    //ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-29 (#4214)
	ПрослеживаемыйТовар = Товары.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыйТовар = ПрослеживаемыйТовар.Количество() <> 0;
	
	Если НЕ ЕстьПрослеживаемыйТовар 
		ИЛИ ЭтоВвозИзЕАЭС Тогда
		СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-29 (#4214) 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		УчетНДСПереопределяемый.СинхронизироватьРеквизитыСчетаФактурыПолученного(ЭтотОбъект);
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-25 (#3050)
	Если Не Отказ Тогда 
		
		элПВХ = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ");
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-16 (#ФР-МП-10)
		// до изменения
		//пНомерЗаявкиОснования = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(ДокументПоступления,
		//																				элПВХ, ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
		// изменено:
		// Для документа поступления с типом ок_ОперацияАксапты значение аналитики НомерЗаявки получаем
		// из регистра сведений бит_ДополнительныеДанныеПоОперациямАксапты
		Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.бит_ок_ОперацияАксапты") Тогда
			пНомерЗаявкиОснования = ок_ПолучитьНомерЗаявкиАксапты(ДокументПоступления);
		Иначе
			пНомерЗаявкиОснования = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(ДокументПоступления,
										элПВХ, ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
		КонецЕсли;
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-16 (#ФР-МП-10)
		пНомерЗаявки = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Ссылка,
																				элПВХ, ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
		Если пНомерЗаявкиОснования<>пНомерЗаявки Тогда 
			Если Не ЗначениеЗаполнено(пНомерЗаявкиОснования) Тогда 
				//Удаляем номер заявки документа
				пЗаписьДопИзм = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьМенеджерЗаписи();
				пЗаписьДопИзм.Объект 	= Ссылка;
				пЗаписьДопИзм.Аналитика = элПВХ;
				пЗаписьДопИзм.Прочитать();
				Если пЗаписьДопИзм.Выбран() Тогда 
					Попытка
						пЗаписьДопИзм.Удалить();
					Исключение
						пТекстОшибки = НСтр("ru = 'Не удалось обновить значение аналитики № заявки, по причине:%1'");
						пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
						ЗаписьЖурналаРегистрации("Механизм доп. аналитик", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.бит_ДополнительныеАналитики, Ссылка, пТекстОшибки);					
					КонецПопытки;				
				КонецЕсли;
			Иначе
				пЗаписьДопИзм = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьМенеджерЗаписи();
				пЗаписьДопИзм.Объект 			= Ссылка;
				пЗаписьДопИзм.Аналитика 	    = элПВХ;
				пЗаписьДопИзм.ЗначениеАналитики = пНомерЗаявкиОснования;
				Попытка
					пЗаписьДопИзм.Записать(Истина);
					пНомерЗаявки = пНомерЗаявкиОснования;
				Исключение
					пТекстОшибки = НСтр("ru = 'Не удалось обновить значение аналитики № заявки, по причине:%1'");
					пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
					ЗаписьЖурналаРегистрации("Механизм доп. аналитик", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.бит_ДополнительныеАналитики, Ссылка, пТекстОшибки);					
					пНомерЗаявки = Неопределено;
				КонецПопытки;							
				
			КонецЕсли;			
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пНомерЗаявки) Тогда 
			
			Если ДополнительныеСвойства.Свойство("ДополнительныеАналитики") Тогда  
				ДополнительныеСвойства.Вставить("ДополнительныеАналитики", Новый Соответствие);
			КонецЕсли;					
			
			ДополнительныеСвойства.ДополнительныеАналитики.Вставить("NЗАЯВКИ", пНомерЗаявки);
			
		КонецЕсли;
		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-25 (#3050)
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив();

	// проверки из шапки
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
		Запрос.УстановитьПараметр("ЭтотДокумент"       , Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПоступления.Ссылка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.ДокументПоступления = &ДокументПоступления
		|	И КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|	И КорректировкаПоступления.Ссылка <> &ЭтотДокумент
		|	И КорректировкаПоступления.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаПоступления.Дата УБЫВ";

		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='К документу %1 введено больше одного корректировочного документа с видом операции ""Исправление первичных документов"". 
					|Каждую последующую корректировку следует вводить на основании предыдущей.'"),
					ДокументПоступления);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументПоступления", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		ДокументПоступленияСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
		Если ТипЗнч(ДокументПоступленияСсылка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			Если НЕ ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнен исправляемый документ поступления!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументПоступления", "Объект", Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЭтоКомиссияПоПродаже = ЗначениеЗаполнено(ДоговорКонтрагента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

	// Установка значений переменных для дальнейшей проверки

	Счет4112 = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
	РазделятьПоСтавкамНДС = Счет4112.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС,
		"ВидСубконто") <> Неопределено;

	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата) =
		Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	ОптовыйСклад = ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	СкладНТТ = ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;

	РозницаВПродажныхЦенах = УчетВПродажныхЦенах И НЕ ОптовыйСклад И НЕ ЭтоКомиссияПоПродаже;
	НТТ = РозницаВПродажныхЦенах И СкладНТТ;

	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Дата);
	ЕстьКомиссияПоЗакупке = ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-29 (#4214)
	ЭтоВвозИзЕАЭС = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(Контрагент);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-29 (#4214) 
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
				НСтр("ru = 'Договор'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		ИЛИ ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки
		ИЛИ НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсправления");
	КонецЕсли;
	
	// Табличная часть "Товары".
	Если НТТ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	КонецЕсли;

	Если НЕ НТТ ИЛИ НЕ РазделятьПоСтавкамНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДСВРознице");
	КонецЕсли;

	ПроверятьСтавкуНДС = НЕ ЭтоКомиссияПоПродаже
		И НЕ НДСВключенВСтоимость
		И НЕ РозницаВПродажныхЦенах;

	Для каждого СтрокаТаблицы Из Товары Цикл
		Префикс = "Товары[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));

		ИмяСписка = НСтр("ru = 'Товары'");

		// Проверка договора комитента по закупке для товаров, учитываемых за балансом.
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		Если НЕ ЭтоКомиссияПоПродаже И ЕстьКомиссияПоЗакупке И КорректироватьБУиНУ Тогда
			Если СвойстваСчета.Забалансовый Тогда
				// Если заполнен контрагент, то это комиссия по закупке, иначе это ответ.хранение.
				Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Договор с комитентом'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
					Поле = Префикс + "ДоговорКонтрагента";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;

				Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетРасчетов) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Счет расчетов'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка);
					Поле = Префикс + "СчетРасчетов";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-29 (#4214)
		// Проверка заполнения таблицы СведенияПрослеживаемости
		Если СтрокаТаблицы.ПрослеживаемыйТовар
			И НЕ ЭтоВвозИзЕАЭС Тогда
			
			СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаТаблицы.ИдентификаторСтроки);
			РНПТПоСтроке = СведенияПрослеживаемости.Выгрузить(СтруктураОтбора);
			КоличествоРНПТ = РНПТПоСтроке.Итог("Количество");
			Если СтрокаТаблицы.Количество <> КоличествоРНПТ Тогда
				ТекстСообщенияРасшифрвка = НСтр("ru = 'Количество РНПТ не совпадает с количеством товара в строке.'");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","Корректность", НСтр("ru = 'РНПТ'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщенияРасшифрвка);
				Поле = Префикс + "РНПТ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-29 (#4214) 
	КонецЦикла;

	// Табличная часть "Услуги"
	Если НЕ ПроверятьСтавкуНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;

	// Табличная часть "АгентскиеУслуги"
	Если НЕ ПроверятьСтавкуНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("АгентскиеУслуги.СтавкаНДС");
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-22 (#3050)
	Если ДополнительныеСвойства.Свойство("ДополнительныеАналитики") И 
		 ДополнительныеСвойства.ДополнительныеАналитики.Получить("NЗАЯВКИ")<>Неопределено
	Тогда 
		
		пНомерЗаявки =  ДополнительныеСвойства.ДополнительныеАналитики["NЗАЯВКИ"];	
	ИначеЕсли ЗначениеЗаполнено(ДокументПоступления) Тогда 
		//Берем номер заявки основания
		пНомерЗаявки = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(ДокументПоступления,
									   	   ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ"), ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));	
		
	КонецЕсли;
									   
	Если НЕ ЗначениеЗаполнено(пНомерЗаявки) Тогда 
		пИменаНеобходимыхТаблиц = "Товары,Услуги,АгентскиеУслуги";
		мИменаТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пИменаНеобходимыхТаблиц,",");
		
		пИменаРеквизитовТЧ = "ок_Период,ок_ЦФО,ок_СтатьяОборотов,ок_Аналитика_2";
		мИменаРеквизитовТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пИменаРеквизитовТЧ,",");
		
		Для каждого пИмяТаблицы Из мИменаТаблиц Цикл
			Для Каждого стрТЧ Из ЭтотОбъект[пИмяТаблицы] Цикл                                       
				Для Каждого пИмяРеквизитаТЧ Из мИменаРеквизитовТЧ Цикл 
					МассивНепроверяемыхРеквизитов.Добавить(пИмяТаблицы + "." + пИмяРеквизитаТЧ);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла; 	
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-22 (#3050)	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	// Принудительная очистка движений, т.к. движения документа могут быть сформированы задним числом.
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект, Ложь);
	// Далее вызов ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей() не требуется,
	// т.к. был передан параметр ВыборочноОчищатьРегистры = Ложь, и все действия уже выполнены.
	
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.КорректировкаПоступления.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	//ОКЕЙ Лещенко Д.Ю. (БИТ) Начало 2021-05-17 (#НТП-МП-03)
	ОбработатьПроведениеПоОперацииАксапты(ПараметрыПроведения);
	//ОКЕЙ Лещенко Д.Ю. (БИТ) Конец 2021-05-17 (#НТП-МП-03)
	
	Если ПараметрыПроведения = Неопределено Тогда
		// В текущем виде документ не требуется проводить по регистрам (например, он был введен только для печатной формы),
		// но, возможно, что он ранее был проведен с другими данными и отражался в последовательности.
		// Чтобы теперь он не мешал последовательности, исключим его.
		РаботаСПоследовательностями.ЗарегистрироватьВПоследовательности(ЭтотОбъект, Отказ, Истина);
		УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(ЭтотОбъект, Отказ);
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ (АНАЛИЗ ОСТАТКОВ И Т.П.)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-17 (#3526)
	Если ТипЗнч(ПараметрыПроведения) = Тип("Структура")
		И ПараметрыПроведения.Свойство("Реквизиты")
		И ТипЗнч(ПараметрыПроведения.Реквизиты) = Тип("Структура")
		И НЕ ПараметрыПроведения.Реквизиты.Свойство("ок_КорректировкаТекущимГодом") Тогда
		ПараметрыПроведения.Реквизиты.Вставить("ок_КорректировкаТекущимГодом", ок_КорректировкаТекущимГодом);
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-17 (#3526)
	
	// Таблица взаиморасчетов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ТаблицаЗачетАвансов, 
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
	ТаблицаВзаиморасчетыВозврат = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ТаблицаЗачетАвансов, 
		ПараметрыПроведения.ВыделениеАвансаРеквизиты, Отказ);
		
	ТаблицаВзаиморасчетыДляУСНиИП = ТаблицаВзаиморасчеты.Скопировать();	
	
	ТаблицаВзаиморасчеты = Документы.КорректировкаПоступления.ПодготовитьТаблицыАвансовОплат(ТаблицаВзаиморасчеты, ПараметрыПроведения.Реквизиты);
	
	ТаблицаВзаиморасчетыВозврат = Документы.КорректировкаПоступления.ПодготовитьТаблицуВыделениеАвансов(ТаблицаВзаиморасчетыВозврат, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТовары, ПараметрыПроведения.ТаблицаУслуги, ПараметрыПроведения.ТаблицаАгентскиеУслуги);
	
	СтруктураТаблицДокумента = Документы.КорректировкаПоступления.ПодготовитьТаблицуДокументаПоКурсуАвансов(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТовары, ПараметрыПроведения.ТаблицаУслуги, ПараметрыПроведения.ТаблицаАгентскиеУслуги, ТаблицаВзаиморасчеты);

	ТаблицаПоТоварам = Документы.КорректировкаПоступления.ПодготовитьТаблицыТоваровУслуг(
		ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТовары);

	ТаблицаПоТоварам = Документы.КорректировкаПоступления.ДополнитьОстаткамиБУТаблицуКорректировкиТоваров(
		ПараметрыПроведения.Реквизиты, ТаблицаПоТоварам);

	ТаблицаПоУслугам = Документы.КорректировкаПоступления.ПодготовитьТаблицыТоваровУслуг(
		ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаУслуги, Истина);

	ТаблицаПоАгентскимУслугам = Документы.КорректировкаПоступления.ПодготовитьТаблицыТоваровУслуг(
		ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаАгентскиеУслуги, Истина);
		
	// Таблица товаров, закупленных по поручению комитентов
	ТаблицаОстаткиТоварыКомитентов = УчетТоваров.ПодготовитьТаблицуЗакупленныхТоварыКомитентов(
		ПараметрыПроведения.ЗакупленныеТоварыКомитента,
		ПараметрыПроведения.Реквизиты, Отказ);
		
	ЗакупленныеТоварыКомитента = Документы.КорректировкаПоступления.ПодготовитьТаблицуТоварыУслугиКомиссияПоЗакупке(
		ПараметрыПроведения.ЗакупленныеТоварыКомитента, 
		ПараметрыПроведения.Реквизиты, Отказ);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура;
	СтруктураТаблицУСН.Вставить("УСНРеквизиты", ПараметрыПроведения.УСНРеквизиты);
	СтруктураТаблицУСН.Вставить("ТаблицаРасчетов", ТаблицаВзаиморасчеты);
	СтруктураТаблицУСН.Вставить("ТаблицаПриход",   ПараметрыПроведения.УСНТаблицаПриход);
	СтруктураТаблицУСН.Вставить("ТаблицаКорректировка", ПараметрыПроведения.УСНТаблицаКорректировка);
	
	// Учет доходов и расходов ИП
	ИПТаблицыКорректировкиПоступления = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыКорректировкиПоступленияМПЗ(
		ПараметрыПроведения.ИПТаблицаТоваров, ПараметрыПроведения.ИПТаблицаУслуг, ПараметрыПроведения.ИПРеквизиты, Отказ);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
		
	// Рублевые суммы документов в валюте
	
	ТаблицаДляПроведенияПоРегиструРублевыеСуммыДокументовВВалюте = Документы.КорректировкаПоступления.ПодготовитьТаблицуДляПроведенияПоРублевымСуммам(ПараметрыПроведения.Реквизиты, 
	СтруктураТаблицДокумента, ПараметрыПроведения.РублевыеСуммыДокументовВВалюте);
	
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаДляПроведенияПоРегиструРублевыеСуммыДокументовВВалюте,
		ПараметрыПроведения.РеквизитыРублевыеСуммыДокументыВВалюте, Движения, Отказ);

	Документы.КорректировкаПоступления.СформироватьДвиженияВыделениеАванса(
		ТаблицаВзаиморасчетыВозврат, ПараметрыПроведения.ВыделениеАвансаРеквизиты, Движения, Отказ);
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчеты, ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
	
	// Учет НДС
	УчетНДС.СформироватьДвиженияНДСКорректировкиПоступлениеТоваровУслуг(
		ПараметрыПроведения.Реквизиты, ПараметрыПроведения.НДСТаблицыДокумента, Движения, Отказ);
		
	УчетНДСРаздельный.СформироватьДвиженияНДСКорректировкиПоступлениеТоваровУслуг(
		ПараметрыПроведения.Реквизиты, ПараметрыПроведения.НДСТаблицыДокумента, Движения, Отказ);
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-29 (#4214)
	// Учет прослеживаемых товаров
	ПрослеживаемостьБП.СформироватьДвиженияКорректировкаПоступленияТоваров(
		ПараметрыПроведения.ПрослеживаемыеТоварыУвеличение,
		ПараметрыПроведения.ПрослеживаемыеТоварыУменьшение,
		ПараметрыПроведения.ПрослеживаемыеОперации,
		ПараметрыПроведения.Реквизиты,
		Движения);	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-29 (#4214) 
	
	// Учет товаров
	УчетТоваров.СформироватьДвиженияКорректировкиПоступленияТоваров(
		ПараметрыПроведения.Реквизиты, ТаблицаПоТоварам, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияКорректировкиПоступленияУслуг(
		ПараметрыПроведения.Реквизиты, ТаблицаПоУслугам, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияКорректировкиПоступленияАгентскихУслуг(
		ПараметрыПроведения.Реквизиты, ТаблицаПоАгентскимУслугам, Движения, Отказ);
	УчетТоваров.СформироватьДвиженияКорректировкаПоступленияПоЗакупленнымТоварамКомитента(
		ЗакупленныеТоварыКомитента, ТаблицаОстаткиТоварыКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Учет УСН
	
	// приход УСН
	УчетУСН.КорректировкаПоступленияПоступлениеРасходовУСН(ПараметрыПроведения.УСНТаблицаПриход,
		ПараметрыПроведения.УСНРеквизиты, Движения, Отказ);

	Если НЕ Отказ И Движения.РасходыПриУСН.Количество() > 0 Тогда
		Движения.РасходыПриУСН.Записать(Истина);
		Движения.РасходыПриУСН.Записывать = Ложь;
	КонецЕсли;
	// корректировка УСН
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияКорректировкиПоступленияМПЗ(ИПТаблицыКорректировкиПоступления,
		ТаблицаВзаиморасчетыДляУСНиИП, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
		
	ТаблицаПереоценкаДвиженийДокумента = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(ПараметрыПроведения.Реквизиты, Движения, Отказ);	

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценкаДвиженийДокумента,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	// Регистрация в последовательности
	Документы.КорректировкаПоступления.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, ПараметрыПроведения, Отказ);
	
	Движения.Записать();
	
	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект, "СчетФактураПолученный");	
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-22 (#3050)
	стрТаблицыДляПроведенияПоБК = Новый Структура;
	
	пИменаНеобходимыхТаблиц = "Товары,Услуги,АгентскиеУслуги";
	мИменаТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пИменаНеобходимыхТаблиц,",");
	
	пИменаКолонокТаблиц = "Ссылка,Период,НомерСтроки,ЦФО,СтатьяОборотов,ВидСтатьи,Проект,Аналитика_2,СуммаРуб,СуммаРубДоИзменения,СуммаНДСРуб,СуммаНДСРубДоИзменения";
	пРасчетыВВалюте = ПараметрыПроведения.Реквизиты[0].ВалютаВзаиморасчетов<>ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если пРасчетыВВалюте Тогда 
		пИменаКолонокТаблиц = пИменаКолонокТаблиц + ",СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов,СуммаВзаиморасчетовДоИзменения,СуммаНДСВзаиморасчетовДоИзменения";
	КонецЕсли;
	
	Для Каждого пИмяТаблицы Из мИменаТаблиц Цикл 
		Если ПараметрыПроведения.Свойство("Таблица" + пИмяТаблицы) Тогда 
			Если ПараметрыПроведения["Таблица" + пИмяТаблицы]<>Неопределено И 
				ПараметрыПроведения["Таблица" + пИмяТаблицы].Количество()>0
			Тогда 
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-28 (#3192)
				//пТаблица = ПараметрыПроведения["Таблица" + пИмяТаблицы].Скопировать(,пИменаКолонокТаблиц);
				//Заменено на:
				пИмяКолонкиСчета = "";
				Если ПараметрыПроведения["Таблица" + пИмяТаблицы].Колонки.Найти("СчетЗатрат") <> Неопределено Тогда 					
					пИмяКолонкиСчета = "СчетЗатрат"; 
				ИначеЕсли ПараметрыПроведения["Таблица" + пИмяТаблицы].Колонки.Найти("СчетУчета") <> Неопределено Тогда 
					пИмяКолонкиСчета = "СчетУчета"; 
				ИначеЕсли ПараметрыПроведения["Таблица" + пИмяТаблицы].Колонки.Найти("СчетРасчетов") <> Неопределено Тогда 
					пИмяКолонкиСчета = "СчетРасчетов"; 					
				КонецЕсли;
				
				пТаблица = ПараметрыПроведения["Таблица" + пИмяТаблицы].Скопировать(,пИменаКолонокТаблиц + ?(ПустаяСтрока(пИмяКолонкиСчета),"",","+пИмяКолонкиСчета));
				
				Если Не ПустаяСтрока(пИмяКолонкиСчета) Тогда 
					пТаблица.Колонки[пИмяКолонкиСчета].Имя = "Счет";
				КонецЕсли;			
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-28 (#3192)
				
				пТаблица.Колонки.Добавить("СуммаНДСРуб1",Новый ОписаниеТипов("Число"));		
				
				Для Каждого пСтрока Из пТаблица Цикл
                    пСтрока.СуммаРуб = пСтрока.СуммаРуб - пСтрока.СуммаРубДоИзменения;
					пСтрока.СуммаНДСРуб1 = пСтрока.СуммаНДСРуб - пСтрока.СуммаНДСРубДоИзменения;
					Если пРасчетыВВалюте Тогда 
						пИменаКолонокТаблиц = пИменаКолонокТаблиц + ",СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов,СуммаВзаиморасчетовДоИзменения,СуммаНДСВзаиморасчетовДоИзменения";
						пСтрока.СуммаВзаиморасчетов = пСтрока.СуммаВзаиморасчетов - пСтрока.СуммаВзаиморасчетовДоИзменения;
						// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-11-12 (#4407)
						//пТаблица.Колонки.Добавить("СуммаНДСВзаиморасчетов1",Новый ОписаниеТипов("Число"));
						Если пТаблица.Колонки.Найти("СуммаНДСВзаиморасчетов1") = Неопределено Тогда
							пТаблица.Колонки.Добавить("СуммаНДСВзаиморасчетов1", Новый ОписаниеТипов("Число"));
						КонецЕсли;
						// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-11-12 (#4407)
						пСтрока.СуммаНДСВзаиморасчетов1 = пСтрока.СуммаНДСВзаиморасчетов - пСтрока.СуммаНДСВзаиморасчетовДоИзменения;
					КонецЕсли;
				КонецЦикла;
				
				пТаблица.Колонки.Удалить("СуммаНДСРуб");
				пТаблица.Колонки["СуммаНДСРуб1"].Имя = "СуммаНДСРуб";
				
				Если пРасчетыВВалюте Тогда 
					пТаблица.Колонки.Удалить("СуммаНДСВзаиморасчетов");
					пТаблица.Колонки["СуммаНДСВзаиморасчетов1"].Имя = "СуммаНДСВзаиморасчетов";
				КонецЕсли;
				
				стрТаблицыДляПроведенияПоБК.Вставить("Таблица" + пИмяТаблицы, пТаблица);         
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если стрТаблицыДляПроведенияПоБК.Количество()>0 Тогда 
		Если НЕ пРасчетыВВалюте Тогда 
			Для Каждого КлючЗнчТаб Из стрТаблицыДляПроведенияПоБК Цикл 
				пТаблица = КлючЗнчТаб.Значение;
				пТаблица.Колонки.Добавить("СуммаВзаиморасчетов"	  , Новый ОписаниеТипов("Число"));
				пТаблица.Колонки.Добавить("СуммаНДСВзаиморасчетов", Новый ОписаниеТипов("Число"));
				Для Каждого СтрТаб Из пТаблица Цикл 
					СтрТаб.СуммаВзаиморасчетов	  = СтрТаб.СуммаРуб;
					СтрТаб.СуммаНДСВзаиморасчетов = СтрТаб.СуммаНДСРуб;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ТаблицыДокумента", стрТаблицыДляПроведенияПоБК);			
	КонецЕсли;               
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-22 (#3050)
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	ПараметрыДействия = УчетНДСПереопределяемый.НовыеПараметрыСостоянияСчетаФактуры("Проведен", ЭтотОбъект, "СчетФактураПолученный");	
	ПараметрыДействия.СостояниеФлага = Ложь;
	УчетНДСПереопределяемый.УстановитьСостояниеСчетаФактуры(ПараметрыДействия, Отказ);

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьСуммыДокорректировки()

	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументПоступления)
		И (ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления"))
		И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ИсправляемыйДокументПоступления, "ВидОперации") = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");

		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
		АгентскиеУслуги.ЗагрузитьКолонку(АгентскиеУслуги.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		АгентскиеУслуги.ЗагрузитьКолонку(АгентскиеУслуги.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		АгентскиеУслуги.ЗагрузитьКолонку(АгентскиеУслуги.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		АгентскиеУслуги.ЗагрузитьКолонку(АгентскиеУслуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
	ИначеЕсли Не ИсправлениеКорректировки Тогда

		Для Каждого СтрокаТаблицы из Товары Цикл
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
		КонецЦикла;

		Для Каждого СтрокаТаблицы из Услуги Цикл
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
		КонецЦикла;

		Для Каждого СтрокаТаблицы из АгентскиеУслуги Цикл
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

//ОКЕЙ Лещенко Д.Ю. (БИТ) Начало 2021-05-17 (#НТП-МП-03)
Процедура ОбработатьПроведениеПоОперацииАксапты(ПараметрыПроведения)
	
	Если ПараметрыПроведения.Реквизиты.Количество() > 0 Тогда
		Реквизиты = ПараметрыПроведения.Реквизиты[0];
		Основание = Реквизиты.ДокументОснование;	
		Если Типзнч(Основание) = Тип("ДокументСсылка.бит_ок_ОперацияАксапты") Тогда
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки") Тогда
				Для Каждого СтрокаУслуга Из ПараметрыПроведения.ТаблицаУслуги Цикл
					Если СтрокаУслуга.СуммаРубДоИзменения <> СтрокаУслуга.СуммаРуб Тогда
						НовСтрока = ПараметрыПроведения.КнигаПокупок.Добавить();
						НовСтрока.Период 						= Реквизиты.Период;	
						НовСтрока.Регистратор	            	= Реквизиты.Регистратор;
						НовСтрока.Содержание	            	= "Сторнирование вычета НДС";
						НовСтрока.Организация	            	= Реквизиты.Организация;
						НовСтрока.Поставщик	                	= Реквизиты.Регистратор.Контрагент;
						НовСтрока.СчетФактура	            	= Реквизиты.ДокументОснование;
						НовСтрока.ВидЦенности	            	= Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
						НовСтрока.СтавкаНДС	                	= СтрокаУслуга.СтавкаНДСДоИзменения;
						НовСтрока.Событие	                	= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
						НовСтрока.ДатаСобытия	            	= Реквизиты.ДокументОснование.Дата;
						НовСтрока.ЗаписьДополнительногоЛиста 	= Истина;	
						НовСтрока.СторнирующаяЗаписьДопЛиста 	= Истина;	
						НовСтрока.КорректируемыйПериод	        = Реквизиты.Регистратор.ок_ДатаИсходногоСФ;
						НовСтрока.СуммаБезНДС	                = -СтрокаУслуга.СуммаРубДоИзменения;
						НовСтрока.НДС	                        = -СтрокаУслуга.СуммаНДСРубДоИзменения;
						НовСтрока.СчетУчетаНДС	                = СтрокаУслуга.СчетУчетаНДС;
						//ОКЕЙ Лещенко Д.Ю. (ПервыйБИТ) Начало 2021-07-31 (#НТП-МП-03)      
						Если СтрокаУслуга.СуммаРуб = 0 Тогда
							НовСтрока.ИсправленныйСчетФактура   = Ссылка;
						КонецЕсли;						
						//ОКЕЙ Лещенко Д.Ю. (ПервыйБИТ) Конец 2021-07-31 (#НТП-МП-03)
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыПроведения.Реквизиты[0].СчетУчетаРасчетовСКонтрагентом = ок_СчетУчетаРасчетовСКонтрагентом;
			Если ТипЗнч(ПараметрыПроведения.ЗачетАвансовТаблицаДокумента) = Тип("ТаблицаЗначений") Тогда
				Для Каждого СтрокаТЧ Из ПараметрыПроведения.ЗачетАвансовТаблицаДокумента Цикл
					СтрокаТЧ.СчетРасчетов = ок_СчетУчетаРасчетовСКонтрагентом;
					СтрокаТЧ.СчетАвансов = ок_СчетУчетаРасчетовПоАвансам;		
				КонецЦикла;
			КонецЕсли;    
			
			Если ТипЗнч(ПараметрыПроведения.ТаблицаЗачетАвансов) = Тип("ТаблицаЗначений") Тогда
				Для Каждого СтрокаТЧ Из ПараметрыПроведения.ТаблицаЗачетАвансов Цикл
					СтрокаТЧ.СчетРасчетов = ок_СчетУчетаРасчетовСКонтрагентом;
					СтрокаТЧ.СчетАвансов = ок_СчетУчетаРасчетовПоАвансам;		
				КонецЦикла;
			КонецЕсли; 
			
			Если ТипЗнч(ПараметрыПроведения.ЗачетАвансовРеквизиты) = Тип("ТаблицаЗначений") Тогда
				Для Каждого СтрокаТЧ Из ПараметрыПроведения.ЗачетАвансовРеквизиты Цикл
					СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = ок_СчетУчетаРасчетовСКонтрагентом;
					СтрокаТЧ.СчетУчетаРасчетовПоАвансам = ок_СчетУчетаРасчетовПоАвансам;		
				КонецЦикла;
			КонецЕсли; 
			
			Если ТипЗнч(ПараметрыПроведения.ВыделениеАвансаРеквизиты) = Тип("ТаблицаЗначений") Тогда
				Для Каждого СтрокаТЧ Из ПараметрыПроведения.ВыделениеАвансаРеквизиты Цикл
					СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = ок_СчетУчетаРасчетовСКонтрагентом;
					СтрокаТЧ.СчетУчетаРасчетовПоАвансам = ок_СчетУчетаРасчетовПоАвансам;		
				КонецЦикла;
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Лещенко Д.Ю. (БИТ) Конец 2021-05-17 (#НТП-МП-03)

//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-16 (#ФР-МП-10)
Функция ок_ПолучитьНомерЗаявкиАксапты(ДокументПоступления)
	пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_ДополнительныеДанныеПоОперациямАксапты.НомерЗаявки КАК НомерЗаявки
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеДанныеПоОперациямАксапты КАК бит_ДополнительныеДанныеПоОперациямАксапты
	|ГДЕ
	|	бит_ДополнительныеДанныеПоОперациямАксапты.Документ = &Документ");
	пЗапрос.УстановитьПараметр("Документ", ДокументПоступления);
	пРезультат = пЗапрос.Выполнить();
	Если пРезультат.Пустой() Тогда 
		Возврат Документы.бит_ФормаВводаБюджета.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = пРезультат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НомерЗаявки;
КонецФункции
//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-16 (#ФР-МП-10)

#КонецЕсли