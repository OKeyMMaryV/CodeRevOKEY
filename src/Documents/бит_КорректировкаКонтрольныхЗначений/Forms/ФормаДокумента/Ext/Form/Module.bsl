
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
    МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументКорректировка = РеквизитФормыВЗначение("Объект");
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументКорректировка, МассивТипов, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли; 
	
	ТекущийВидОперации 		= Объект.ВидОперации;
	ТекущийВидКорректировки = Объект.ВидКорректировки;
	ТекущийСценарий 	  	= Объект.Сценарий;
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Заполним список имен элементов управления, которые необходимо блокировать при изменении статусов.
	ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке();
	
	// Восстановим настройки формы.
	ВосстановитьНастройки();
	
	Элементы.ФормаКомандаАвтовидимостьКолонок.Пометка = АвтовидимостьКолонок;
	
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "СуммыКорректировокПриход", 
		"СуммыКорректировок", Элементы.СуммыКорректировокПриходСумма);

	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "СуммыКорректировокРасход", 
		"СуммыКорректировок", Элементы.СуммыКорректировокРасходСумма);																					 
	
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"СуммыКорректировокПриход", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"СуммыКорректировокРасход", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);

	ДобавитьРеквизитыФормы();																				 
	НастроитьОформлениеФормы();
	УправлениеЭлементамиФормы();
	ПоказатьВалютуСценария();
	УстановитьАвтовидимостьКолонок();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ДействияПриОткрытииОбщие();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы И СохранитьНастройкиФормы Тогда
		СохранитьНастройкиНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров); 
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
	КонецЕсли; 
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Заполним добавленные реквизиты значениями.
	Для Каждого ТекущаяСтрока Из Объект.СуммыКорректировок Цикл
		ИДСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	КонецЦикла;
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	УправлениеФормой(ЭтотОбъект);
	
	Если СохранитьНастройкиФормы Тогда
		СохранитьНастройкиНаСервере();
	КонецЕсли;	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ВладелецФормы = ЭтотОбъект Тогда
		ТекущиеДанныеПриход = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
		Если ТекущиеДанныеПриход <> Неопределено Тогда
			ИДВладельца = ТекущиеДанныеПриход.ИД;
		Иначе
			ИДВладельца = "";
		КонецЕсли;
		Результат = Ложь;
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИДВладельца, Результат);
		
		Если Результат = Истина Тогда
			// Обновление отбора и итогов.
			УстановитьОтборСтрок(Объект, Элементы, фКэшЗначений, Объект.ВидКорректировки, ТекущиеДанныеПриход);
			ОбновитьИтоги();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_КорректировкаКонтрольныхЗначений";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УстановитьНастройкиДоступностиЭлементов();
		УправлениеЭлементамиФормы();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	Если НЕ Объект.Сценарий = ТекущийСценарий Тогда 
		// Очищать таблицу Увеличение большого смысла нет
		// , т.к. эту таблицу можно заполнить руками как угодно, поэтому очищаем только Уменьшение.
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидДвижения", фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
		
		МассивКУдалению = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
		
		Если НЕ МассивКУдалению.Количество() = 0 Тогда
			Если Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет") Тогда
				НазваниеТаблицы = НСтр("ru = 'За счет'");
			Иначе
				НазваниеТаблицы = НСтр("ru = 'Уменьшение'");
			КонецЕсли;
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСценарийПриИзменении", ЭтотОбъект, МассивКУдалению);
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Таблица ""%1"" будет очищена. Продолжить?'"), НазваниеТаблицы);
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет)
		Иначе
			ПоказатьВалютуСценария();
		КонецЕсли;
	Иначе
		ПоказатьВалютуСценария();
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  МассивКУдалению - Массив.
// 
&НаКлиенте
Процедура ВопросСценарийПриИзменении(Ответ, МассивКУдалению) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Объект.Сценарий = ТекущийСценарий;
	Иначе
		Для Каждого ТекущаяСтрока Из МассивКУдалению Цикл
			Объект.СуммыКорректировок.Удалить(ТекущаяСтрока);
		КонецЦикла;
		ОбновитьИтоги();
		ПоказатьВалютуСценария();
	КонецЕсли;
	
	ТекущийСценарий = Объект.Сценарий;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидКорректировки".
// 
&НаКлиенте
Процедура ВидКорректировкиПриИзменении(Элемент)
	
	Если Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет")
		И НЕ Объект.ВидКорректировки = ТекущийВидКорректировки Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидДвижения", фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
		МассивКУдалению = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
		Если НЕ МассивКУдалению.Количество() = 0 Тогда
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросВидКорректировкиПриИзменении", ЭтотОбъект, МассивКУдалению);
			ТекстВопроса = НСтр("ru = 'Таблица ""Уменьшение"" будет очищена. Продолжить?'");
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		Иначе
			УправлениеЭлементамиФормы();
		КонецЕсли;
	Иначе
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
	ТекущийВидКорректировки = Объект.ВидКорректировки;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  МассивКУдалению - Массив.
// 
&НаКлиенте
Процедура ВопросВидКорректировкиПриИзменении(Ответ, МассивКУдалению) Экспорт
			
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Объект.ВидКорректировки = ТекущийВидКорректировки;
	Иначе
		Для Каждого ТекущаяСтрока Из МассивКУдалению Цикл
			Объект.СуммыКорректировок.Удалить(ТекущаяСтрока);
		КонецЦикла;
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Объект.ДокументОснование);
	
КонецПроцедуры

&НаКлиенте 
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ТекущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	   	
	ЗаполнитьСценарийКонтролируемыйПоУмолчанию();
	Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет");
	
	Объект.СуммыКорректировок.Очистить();
	
	УправлениеЭлементамиФормы();
	УправлениеФормой(ЭтотОбъект);
	
	ТекущийВидОперации = Объект.ВидОперации;
	ТекущийВидКорректировки = Объект.ВидКорректировки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСуммыКорректировокПриход

&НаКлиенте
Процедура СуммыКорректировокПриходПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	Если Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет") Тогда
		УстановитьОтборСтрок(Объект, Элементы, фКэшЗначений, Объект.ВидКорректировки, ТекущиеДанные);
		ОбновитьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		УстановитьИДСтроки(ТекущиеДанные);
		ТекущиеДанные.ВидДвижения = фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
		УстановитьОтборСтрок(Объект, Элементы, фКэшЗначений, Объект.ВидКорректировки, ТекущиеДанные);
		ОбновитьИтоги();
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные
																		   ,фКэшЗначений.ИзмеренияДоп
																		   ,фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
																	   
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено 
		И НЕ Отказ 
		И Объект.ВидКорректировки = фКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидДвижения", фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
		СтруктураОтбора.Вставить("ИДВладельца", ТекущиеДанные.ИД);
		МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаКУдалению Из МассивСтрок Цикл
			Объект.СуммыКорректировок.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПослеУдаления(Элемент)
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", "Приход");
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПериодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПериодаПриходаСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	ИндексСтроки  = ТекущиеДанные.НомерСтроки - 1;
	УстановитьПараметрыВыбораСтатей(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИДСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСтатьиОборотов(ИДСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСуммыКорректировокРасход

&НаКлиенте
Процедура СуммыКорректировокРасходПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		УстановитьИДСтроки(ТекущиеДанные);
		ДанныеСтрокиВладельца = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
		Если НЕ ДанныеСтрокиВладельца = Неопределено Тогда
			ТекущиеДанные.ИДВладельца = ДанныеСтрокиВладельца.ИД;
		КонецЕсли;
		ТекущиеДанные.ВидДвижения = фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные
																		   ,фКэшЗначений.ИзмеренияДоп
																		   ,фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
																	   
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПослеУдаления(Элемент)
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", "Расход");
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПодключаемыеКомандыЭлементовТаблицФормы

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, ИмяПоля,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
	
#КонецОбласти 

&НаКлиенте
Процедура КомандаПодборЗаписейПриход(Команда)
	
	ОткрытьФормуПодбораЗаписей("Приход");
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", "Приход");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборЗаписейРасход(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидКорректировки) Тогда
		ТекстСообщения = НСтр("ru='Не заполнен вид корректировки. Невозможно выполнить подбор.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидКорректировки = фКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
		ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Не указана строка в которой происходит увеличение. Невозможно выполнить подбор.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФормуПодбораЗаписей("Расход");
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", "Расход");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьВсе(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидДвижения", фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	ПериодичностьСценария = ПериодичностьСценария(Объект.Сценарий);
	
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
		Отказ = Ложь;
		ПроверитьУникальностьСтроки(Элементы.СуммыКорректировокПриход, ТекущаяСтрока, "Приход", Отказ, Ложь);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим строку в таблицу.
		НоваяСтрока = Объект.СуммыКорректировок.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		УстановитьИДСтроки(НоваяСтрока);
		
		НоваяСтрока.ВидДвижения = фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
		НоваяСтрока.ИДВладельца = "";
		УстановитьДатуСтроки(НоваяСтрока, ПериодичностьСценария);

		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,фКэшЗначений.ИзмеренияДоп
																		   ,фКэшЗначений.НастройкиИзмерений);
																		   
		ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
		ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	КонецЦикла;
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", "Приход");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьТекущуюСтроку(Команда)
	
	ТекущиеДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьУникальностьСтроки(Элементы.СуммыКорректировокПриход, ТекущиеДанные, "Приход", Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим строку в таблицу.
	НоваяСтрока = Объект.СуммыКорректировок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	
	УстановитьИДСтроки(НоваяСтрока);
	
	НоваяСтрока.ВидДвижения = фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
	НоваяСтрока.ИДВладельца = "";
	ПериодичностьСценария	= ПериодичностьСценария(Объект.Сценарий);
	УстановитьДатуСтроки(НоваяСтрока, ПериодичностьСценария);
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,фКэшЗначений.ИзмеренияДоп
																		   ,фКэшЗначений.НастройкиИзмерений);
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", "Приход");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАвтовидимостьКолонок(Команда)
	
	АвтовидимостьКолонок = Не АвтовидимостьКолонок;
	СохранитьНастройкиФормы = Не СохранитьНастройкиФормы;
	Элементы.ФормаКомандаАвтовидимостьКолонок.Пометка = АвтовидимостьКолонок;
	УстановитьАвтовидимостьКолонок(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_ВидыКорректировокКонтрольныхЗначений"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыКорректировокКонтрольныхЗначений));
	КэшПеречисления.Вставить("бит_ВидДвиженияНакопления"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидДвиженияНакопления));
	КэшПеречисления.Вставить("бит_РежимыКонтроляПоБюджету"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РежимыКонтроляПоБюджету));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов"		, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_РасходДоход"				, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	КэшированныеЗначения.Вставить("ВидыОпераций", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений));
	
	// Статусы. 
	КэшированныеЗначения.Вставить("КорректировкаКонтрольныхЗначений_Черновик"	, Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Черновик);
	КэшированныеЗначения.Вставить("КорректировкаКонтрольныхЗначений_Утверждена" , Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Рабочий);
	КэшированныеЗначения.Вставить("КорректировкаКонтрольныхЗначений_Закрыта"	, Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Утвержден);
	
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	ПустойСценарий = Справочники[ИмяСправочникаСценарии].ПустаяСсылка();
	
	КэшированныеЗначения.Вставить("ПустойСценарий", ПустойСценарий);
	
	ДокументКорректировка = РеквизитФормыВЗначение("Объект");
	
	КэшированныеЗначения.Вставить("ИзмеренияДоп"      		  , ДокументКорректировка.мИзмеренияДоп);
	КэшированныеЗначения.Вставить("НастройкиИзмерений"		  , ДокументКорректировка.мНастройкиИзмерений);
	КэшированныеЗначения.Вставить("ПроводитьПослеУтверждения", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения"));
		
	// Параметры, используемые для управления автовидимостью колонок.
	КэшированныеЗначения.Вставить("НастройкаВидимостиКолонок"	   , Новый Структура);
	КэшированныеЗначения.Вставить("МассивСтатей_СуммыКорректировок", Новый Массив);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", МетаданныеОбъекта.ПредставлениеОбъекта);
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке()
	
	МетаданныеТчОбъекта = Объект.Ссылка.Метаданные().ТабличныеЧасти.СуммыКорректировок;
	
	// Имена элементов управления, подлежащие блокировке в статусах выше рабочего.
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("Сценарий");
	ИменаЭлементов.Добавить("СценарийКонтролируемый");
	ИменаЭлементов.Добавить("ВидКорректировки");
	ИменаЭлементов.Добавить("ВидОперации");
	
	ИменаЭлементов.Добавить("СуммыКорректировокПриходПериод");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходПериод");
	
	ИменаЭлементов.Добавить("СуммыКорректировокПриходЦФО");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходЦФО");
	
	ИменаЭлементов.Добавить("СуммыКорректировокПриходСтатьяОборотов");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходСтатьяОборотов");
	
	Если бит_ОбщегоНазначения.ЕстьРеквизит("Контрагент", МетаданныеТчОбъекта) Тогда
		ИменаЭлементов.Добавить("СуммыКорректировокПриходКонтрагент");
		ИменаЭлементов.Добавить("СуммыКорректировокРасходКонтрагент");
	КонецЕсли;
	
	Если бит_ОбщегоНазначения.ЕстьРеквизит("ДоговорКонтрагента", МетаданныеТчОбъекта) Тогда
		ИменаЭлементов.Добавить("СуммыКорректировокПриходДоговорКонтрагента");
		ИменаЭлементов.Добавить("СуммыКорректировокРасходДоговорКонтрагента");
	КонецЕсли;
	
	Если бит_ОбщегоНазначения.ЕстьРеквизит("Проект", МетаданныеТчОбъекта) Тогда
		ИменаЭлементов.Добавить("СуммыКорректировокПриходПроект");
		ИменаЭлементов.Добавить("СуммыКорректировокРасходПроект");
	КонецЕсли;
	
	Если бит_ОбщегоНазначения.ЕстьРеквизит("НоменклатурнаяГруппа", МетаданныеТчОбъекта) Тогда
		ИменаЭлементов.Добавить("СуммыКорректировокПриходНоменклатурнаяГруппа");
		ИменаЭлементов.Добавить("СуммыКорректировокРасходНоменклатурнаяГруппа");
	КонецЕсли;
	
	Если бит_ОбщегоНазначения.ЕстьРеквизит("БанковскийСчет", МетаданныеТчОбъекта) Тогда
		ИменаЭлементов.Добавить("СуммыКорректировокПриходБанковскийСчет");
		ИменаЭлементов.Добавить("СуммыКорректировокРасходБанковскийСчет");
	КонецЕсли;
	
	КолАн = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для н = 1 По КолАн Цикл
		ИменаЭлементов.Добавить("СуммыКорректировокПриходАналитика_" + н);
		ИменаЭлементов.Добавить("СуммыКорректировокРасходАналитика_" + н);
	КонецЦикла; 
	
	ИменаЭлементов.Добавить("СуммыКорректировокПриходСумма");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходСумма");
	
	ИменаЭлементов.Добавить("СуммыКорректировокПриходКоличество");	
	ИменаЭлементов.Добавить("СуммыКорректировокРасходКоличество");   
	
	фКэшЗначений.Вставить("ИменаЭлементов", ИменаЭлементов);
	
КонецПроцедуры

&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ФормаОбработкаУстановкаВизСогласование.Видимость = Ложь;
	
	ЗаблокироватьЭлементы = НужноЗаблокироватьКлючевыеЭлементы(Объект.Проведен, Статус);
	
	Для каждого ИмяЭлемента Из фКэшЗначений.ИменаЭлементов Цикл
		 Элементы[ИмяЭлемента].ТолькоПросмотр = ЗаблокироватьЭлементы;
	КонецЦикла; 
	
	ЕстьКнопкаПровестиИЗакрыть = Элементы.Найти("ФормаПровестиИЗакрыть");
	
	// Под ограниченными правами управляемая форма сама удаляет кнопку.
	Если НЕ ЕстьКнопкаПровестиИЗакрыть = Неопределено Тогда
		Элементы.ФормаПровестиИЗакрыть.Доступность = Не ЗаблокироватьЭлементы;
	КонецЕсли;
	
	Элементы.ФормаЗаписать.Доступность = Не ЗаблокироватьЭлементы;
	
	Элементы.СуммыКорректировокПриход.ИзменятьСоставСтрок = НЕ ЗаблокироватьЭлементы;
	Элементы.СуммыКорректировокРасход.ИзменятьСоставСтрок = НЕ ЗаблокироватьЭлементы;
	
	Элементы.КомандаПодборЗаписейПриход.Доступность = НЕ ЗаблокироватьЭлементы;
	Элементы.КомандаПодборЗаписейРасход.Доступность = НЕ ЗаблокироватьЭлементы;
	
	Элементы.СуммыКорректировокРасходКомандаСкопироватьТекущуюСтроку.Доступность = НЕ ЗаблокироватьЭлементы;
	Элементы.СуммыКорректировокРасходКомандаСкопироватьВсе.Доступность 			 = НЕ ЗаблокироватьЭлементы;
	
	Элементы.СценарийКонтролируемый.Видимость = Объект.ВидОперации = фКэшЗначений.ВидыОпераций.КонтрольБюджета;
	
	ТекущаяСтрокаВладелец = Элементы.СуммыКорректировокПриход.ТекущаяСтрока;
	
	УстановитьОтборСтрок(Объект, Элементы, фКэшЗначений, Объект.ВидКорректировки, ТекущаяСтрокаВладелец);
			
	// Установим настройки доступности элементов формы.
	УстановитьНастройкиДоступностиЭлементов();
	
	Если фКэшЗначений.ПроводитьПослеУтверждения 
		И Объект.Проведен И Объект.ОтправленНаСогласование
		И Объект.РежимПринятияКУчету = 1
		И Статус <> Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Утвержден Тогда
		Элементы.ПредупреждениеОПринятиеКУчетуПослеУтверждения.Видимость = Истина;
	Иначе
		Элементы.ПредупреждениеОПринятиеКУчетуПослеУтверждения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(пОбъект, пЭлементы, пКэшЗначений, пВидКорректировки, пТекущаяСтрокаВладелец)
	
	ОтборСтрокПриход = Новый Структура;
	ОтборСтрокПриход.Вставить("ВидДвижения", пКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	
	пЭлементы.СуммыКорректировокПриход.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрокПриход);
	
	ОтборСтрокРасход = Новый Структура;
	ОтборСтрокРасход.Вставить("ВидДвижения", пКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	
	Если пВидКорректировки = пКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
		Если ТипЗнч(пТекущаяСтрокаВладелец) = Тип("Число") Тогда
			ТекущиеДанные = пОбъект.СуммыКорректировок.НайтиПоИдентификатору(пТекущаяСтрокаВладелец);
			Если ТекущиеДанные = Неопределено Тогда
				ИДВладельца = "";
			Иначе
				ИДВладельца = ТекущиеДанные.ИД;
			КонецЕсли;
		ИначеЕсли пТекущаяСтрокаВладелец = Неопределено Тогда
			ИДВладельца = "";
		Иначе
			ИДВладельца = пТекущаяСтрокаВладелец.ИД;
		КонецЕсли;	
		ОтборСтрокРасход.Вставить("ИДВладельца", ИДВладельца);
	КонецЕсли;	
	
	пЭлементы.СуммыКорректировокРасход.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрокРасход);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеФормы()
	
	РеквизитыСтатьи = ПолучитьРеквизиты("Объект.СуммыКорректировок");
	
	Для Каждого РеквизитСтатьи Из РеквизитыСтатьи Цикл
		НайденнаяПозиция = Найти(РеквизитСтатьи.Имя, "СтатьяОборотов_Учет_");
		
		Если НайденнаяПозиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = СтрЗаменить(РеквизитСтатьи.Имя, "СтатьяОборотов_Учет_", "");
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОформления.Использование = Истина;
		
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемыеПоля.Использование = Истина;
		ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммыКорректировокПриход"+ИмяРеквизита);
		
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемыеПоля.Использование = Истина;
		ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммыКорректировокРасход"+ИмяРеквизита);
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.бит_БыстрыеОтборыФонГруппы);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;      
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СуммыКорректировок."+РеквизитСтатьи.Имя);
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыФормы()
	
	МетаСтатьиОборотов = Метаданные.Справочники.бит_СтатьиОборотов;
	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("произвольные","синоним");
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	МассивРеквизитов = Новый Массив;
	
	Для Каждого КлючИЗначение Из Измерения Цикл
		ИмяРеквизита = "Учет_"+КлючИЗначение.Ключ;
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизита,МетаСтатьиОборотов) Тогда  
			ТекущаяНастройка = фКэшЗначений.НастройкиИзмерений[КлючИЗначение.Ключ];
			Если Найти(ВРег(КлючИЗначение.Ключ), "АНАЛИТИКА") > 0 Тогда
				Если НЕ ТекущаяНастройка = Неопределено Тогда
					НовыйРеквизит = Новый РеквизитФормы("СтатьяОборотов_"+ИмяРеквизита, ОписаниеТипаБулево, "Объект.СуммыКорректировок", ТекущаяНастройка.Синоним);
					МассивРеквизитов.Добавить(НовыйРеквизит);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			НовыйРеквизит = Новый РеквизитФормы("СтатьяОборотов_"+ИмяРеквизита, ОписаниеТипаБулево, "Объект.СуммыКорректировок", КлючИЗначение.Значение);
			МассивРеквизитов.Добавить(НовыйРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим разрезы по количеству и сумме
	НовыйРеквизит = Новый РеквизитФормы("СтатьяОборотов_Учет_Количество", ОписаниеТипаБулево, "Объект.СуммыКорректировок", "Количество");
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("СтатьяОборотов_Учет_Сумма", ОписаниеТипаБулево, "Объект.СуммыКорректировок", "Сумма");
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	// Обновим реквизитный состав формы
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Заполним добавленные реквизиты значениями.
	Для Каждого ТекущаяСтрока Из Объект.СуммыКорректировок Цикл
		ИДСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция НужноЗаблокироватьКлючевыеЭлементы(Проведен, Статус)

	флЗаблокироватьЭлементы = Ложь;
	Если Проведен 
		ИЛИ Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Рабочий") Тогда
		
		флЗаблокироватьЭлементы = Истина;
	КонецЕсли; 
	Возврат флЗаблокироватьЭлементы;
	
КонецФункции

// Процедура применяет настройки доступности и видимости для элементов формы.
// 
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСтатьиОборотов(ИДСтроки)
	
	ТекущиеДанные = Объект.СуммыКорректировок.НайтиПоИдентификатору(ИДСтроки);
	
	Если Не ТекущиеДанные.СтатьяОборотов.Учет_Сумма Тогда
		ТекущиеДанные.Сумма = 0;
	КонецЕсли;
	
	Если Не ТекущиеДанные.СтатьяОборотов.Учет_Количество Тогда
		ТекущиеДанные.Количество = 0;
	КонецЕсли;
	
	// Запомним разрезы бюджетирования используемые в статье оборотов.
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", Строка(ТекущиеДанные.ВидДвижения));
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки)
	
	ТекущиеДанные = Объект.СуммыКорректировок.НайтиПоИдентификатору(ИДСтроки);
	
	РеквизитыСтатьи = ПолучитьРеквизиты("Объект.СуммыКорректировок");
	
	Для Каждого РеквизитСтатьи Из РеквизитыСтатьи Цикл
		НайденнаяПозиция = Найти(РеквизитСтатьи.Имя, "СтатьяОборотов_Учет_");
		Если НайденнаяПозиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		ИмяРеквизитаСтатьи = СтрЗаменить(РеквизитСтатьи.Имя, "СтатьяОборотов_", "");
		ТекущиеДанные[РеквизитСтатьи.Имя] = ТекущиеДанные.СтатьяОборотов[ИмяРеквизитаСтатьи];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАвтовидимостьКолонок(ОбновлятьБезусловно = Ложь)
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", "Приход", ОбновлятьБезусловно); 
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", "Расход", ОбновлятьБезусловно);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАвтовидимостьКолонокТабличнойЧасти(ИмяТабличнойЧасти, ВидДвижения, ОбновлятьБезусловно = Ложь)
	
	ИмяМассива = "МассивСтатей_" + ИмяТабличнойЧасти;
	
	Если АвтовидимостьКолонок Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидДвижения", фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления[ВидДвижения]);
		МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
		ТаблРез = Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок);
		МассивСтатей = ТаблРез.ВыгрузитьКолонку("СтатьяОборотов");
		НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(МассивСтатей
																		,фКэшЗначений[ИмяМассива]
																		,фКэшЗначений.НастройкаВидимостиКолонок
																		,фКэшЗначений.НастройкиИзмерений);
		
		Если НеобходимоИзменение Тогда
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				,фКэшЗначений.НастройкаВидимостиКолонок
											 				,ИмяТабличнойЧасти+ВидДвижения);
		КонецЕсли; 
	Иначе
		Если ОбновлятьБезусловно Тогда
			
			НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(Новый Массив
																		,фКэшЗначений[ИмяМассива]
																		,фКэшЗначений.НастройкаВидимостиКолонок
																		,фКэшЗначений.НастройкиИзмерений);
																		
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				,фКэшЗначений.НастройкаВидимостиКолонок
											 				,ИмяТабличнойЧасти+ВидДвижения);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьВалютуСценария()
	
	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ВалютаСценария = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сценарий, "Валюта");
		Элементы.СуммаДокументаПриход.Заголовок = СтрШаблон(Нстр("ru = 'Увеличение (%1)'"), ВалютаСценария);
		Элементы.СуммаДокументаРасход.Заголовок = СтрШаблон(Нстр("ru = 'Уменьшение (%1)'"), ВалютаСценария);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаПриходаСервер(ИДСтроки)
	
	ТекущаяСтрока = Объект.СуммыКорректировок.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено И НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Возврат;
	КонецЕсли;
	
	// Приводим выбранный период на начало периода в завсимости от реквизита "Периодичность" выбранного сценария.
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сценарий, "бит_Периодичность"); 
	ТекущаяСтрока.Период = бит_Бюджетирование.ПолучитьНачалоПериода(ТекущаяСтрока.Период, Периодичность);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуСтроки(НоваяСтрока, ПериодичностьСценария)
	
	НоваяСтрока.Период = бит_ОбщегоНазначенияКлиентСервер.ПолучитьНачалоПериода(Объект.Дата, ПериодичностьСценария);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПериодичностьСценария(Сценарий)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "бит_Периодичность");

КонецФункции 

#КонецОбласти

#Область ДействияПриОткрытии

// Процедура выполняет действия, необходимые при открытии, необходимые как для нового, 
// так и для сохраненного документа. 
// 
&НаКлиенте
Процедура ДействияПриОткрытииОбщие()
	
	ОбновитьИтоги();

КонецПроцедуры

#КонецОбласти

#Область СерверныеПроцедурыИФункцииПоРаботеСНастройками

// Процедура сохраняет настройки формы в хранилища общих настроек.
// 
&НаСервере
Процедура СохранитьНастройкиНаСервере() 
	
	Настройки = Новый Структура;
	Настройки.Вставить("АвтовидимостьКолонок", АвтовидимостьКолонок);
	
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеОбщихНастроек.Сохранить("Документ.бит_КорректировкаКонтрольныхЗначений", "Настройки", Настройки);	
	УстановитьПривилегированныйРежим(Ложь);
	
	СохранитьНастройкиФормы = Ложь;	
	
КонецПроцедуры

// Процедура восстанавливает настройки формы из хранилища общих настроек.
// 
&НаСервере
Процедура ВосстановитьНастройки() 
	
	ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить("Документ.бит_КорректировкаКонтрольныхЗначений", "Настройки");
	Если ЗначениеЗаполнено(ЗначениеНастроек) И ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		ЗначениеНастроек.Свойство("АвтовидимостьКолонок", АвтовидимостьКолонок);		
	КонецЕсли;                                                	
	
КонецПроцедуры

#КонецОбласти
 
&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСценарийКонтролируемыйПоУмолчанию()
	
	Если Объект.ВидОперации = фКэшЗначений.ВидыОпераций.КонтрольГрафиковДоговоров Тогда
		Объект.СценарийКонтролируемый = фКэшЗначений.Перечисления.бит_РежимыКонтроляПоБюджету.ГрафикиДоговоров;
	ИначеЕсли Объект.ВидОперации = фКэшЗначений.ВидыОпераций.КонтрольЗаявок Тогда
		Объект.СценарийКонтролируемый = фКэшЗначений.ПустойСценарий;
	Иначе
		ТипСценарий = бит_ОбщегоНазначения.ПолучитьИмяТипаСценарииБюджетирования();
		Если НЕ ЗначениеЗаполнено(Объект.СценарийКонтролируемый)
			ИЛИ НЕ ТипЗнч(Объект.СценарийКонтролируемый) = Тип(ТипСценарий) Тогда
			
			Объект.СценарийКонтролируемый = фКэшЗначений.ПустойСценарий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыСтатьи(Статья)
	
	Если ЗначениеЗаполнено(Статья) Тогда
		РеквизитыСтатьи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Статья,"ТипСтатьи, РасходДоход");
	Иначе	
		РеквизитыСтатьи = Новый Структура; 
		РеквизитыСтатьи.Вставить("ТипСтатьи", Перечисления.бит_ТипыСтатейОборотов.ПустаяСсылка());
		РеквизитыСтатьи.Вставить("РасходДоход", Перечисления.бит_РасходДоход.ПустаяСсылка());
	КонецЕсли; 
	
	Возврат РеквизитыСтатьи;
	
КонецФункции	

// Процедура открывает форму подбора записей из регистра контрольные значения бюджетов.
// 
// Параметры:
// 	Направление - строка - Приход,Расход - используется для определеия ТЧ в которую будет производиться подбор.
// 
&НаКлиенте
Процедура ОткрытьФормуПодбораЗаписей(Направление)
	
	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе"	, Ложь);
	ПараметрыФормы.Вставить("Сценарий"				, Объект.Сценарий);
	ПараметрыФормы.Вставить("СценарийКонтролируемый", Объект.СценарийКонтролируемый);
	ПараметрыФормы.Вставить("Направление"			, Направление);
	ПараметрыФормы.Вставить("ЭтоКонтрольБюджета"	, Объект.ВидОперации = фКэшЗначений.ВидыОпераций.КонтрольБюджета);
	
	СтруктураОтбора = Новый Структура;
	
	Если Объект.ВидКорректировки = фКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет
		И Направление = "Расход" Тогда
		// В этом случае даем подбирать статьи с тем направлением и типом,
		// какие установлены в статье-владельце таблицы Увеличение.
		ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			РеквизитыСтатьи = РеквизитыСтатьи(ТекущиеДанные.СтатьяОборотов);
			СтруктураОтбора.Вставить("СтатьяОборотов_тчк_ТипСтатьи",   РеквизитыСтатьи.ТипСтатьи);
			СтруктураОтбора.Вставить("СтатьяОборотов_тчк_РасходДоход", РеквизитыСтатьи.РасходДоход);
		КонецЕсли;
	Иначе
		Если бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЗнч(Объект.ДокументОснование), "ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
			СтруктураОтбора.Вставить("СтатьяОборотов_тчк_ТипСтатьи"	 , фКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
			СтруктураОтбора.Вставить("СтатьяОборотов_тчк_РасходДоход", фКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		ИначеЕсли бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЗнч(Объект.ДокументОснование), "ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			СтруктураОтбора.Вставить("СтатьяОборотов_тчк_ТипСтатьи"	 , фКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР);
			СтруктураОтбора.Вставить("СтатьяОборотов_тчк_РасходДоход", фКэшЗначений.Перечисления.бит_РасходДоход.Расходование);	
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СтруктураОтбора", СтруктураОтбора);
	
	ОткрытьФорму("Документ.бит_КорректировкаКонтрольныхЗначений.Форма.ФормаПодбораЗаписей", 
		ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура проверяет уникальность добавляемой строки
// , чтобы одну и ту же строку нельзя было добавить дважды в одно поле.
// 
// Параметры:
// 	Элемент - ТаблицаФормы - таблица, в которую осуществляется добавление строки
// 	ВыбранноеЗначение - ДанныеФормыЭлементКоллекции - строка, которая добавляется
// 	ВидДвижения - строка
// 	Отказ - булево
// 	ВыводитьСообщения - булево.
// 
&НаКлиенте
Процедура ПроверитьУникальностьСтроки(Элемент, ВыбранноеЗначение, ВидДвижения, Отказ=Ложь, ВыводитьСообщения=Истина, ИДВладельца="")
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидДвижения", фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления[ВидДвижения]);
	
	// Сформируем структуру поиска по тем полям, которые есть и в таблице на форме и в подборе.
	Для Каждого ТекущееПоле Из Элемент.ПодчиненныеЭлементы Цикл
		ИмяРеквизита = СтрЗаменить(ТекущееПоле.Имя, "СуммыКорректировок"+ВидДвижения, "");
		
		Если ИмяРеквизита = "НомерСтроки"
			ИЛИ ИмяРеквизита = "Количество"
			ИЛИ ИмяРеквизита = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыбранноеЗначение.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Вставить(ИмяРеквизита, ВыбранноеЗначение[ИмяРеквизита]);
	КонецЦикла;
	
	Если Объект.ВидКорректировки = фКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
		СтруктураПоиска.Вставить("ИДВладельца", ИДВладельца);
	КонецЕсли;
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(СтруктураПоиска
																		   ,фКэшЗначений.ИзмеренияДоп
																		   ,фКэшЗначений.НастройкиИзмерений);
																		   
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураПоиска);
	
	ИмяТаблицы = ?(ВидДвижения="Приход", "Увеличение", "Уменьшение");
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ И ВыводитьСообщения Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Данная строка уже подобрана в табличную часть ""%1"" в строке № %2'"), 
			ИмяТаблицы, МассивСтрок[0].НомерСтроки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет уникальность добавляемой строки
// , чтобы одну и ту же строку нельзя было добавить дважды в одно поле.
// 
// Параметры:
// 	Элемент - ТаблицаФормы - таблица, в которую осуществляется добавление строки
// 	ВыбранноеЗначение - ДанныеФормыЭлементКоллекции - строка, которая добавляется
// 	ВидДвижения - строка
// 	Отказ - булево
// 	ВыводитьСообщения - булево.
// 
&НаСервере
Функция  ПроверитьУникальностьСтрокиСервер(Элемент, ВыбранноеЗначение, ВидДвижения, ВыводитьСообщения = Истина, ИДВладельца = "")
	
	Результат = Ложь;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидДвижения", фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления[ВидДвижения]);
	
	// Сформируем структуру поиска по тем полям, которые есть и в таблице на форме и в подборе.
	Для Каждого ТекущееПоле Из Элемент.ПодчиненныеЭлементы Цикл
		ИмяРеквизита = СтрЗаменить(ТекущееПоле.Имя, "СуммыКорректировок"+ВидДвижения, "");
		
		Если ИмяРеквизита = "НомерСтроки"
			ИЛИ ИмяРеквизита = "Количество"
			ИЛИ ИмяРеквизита = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыбранноеЗначение.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Вставить(ИмяРеквизита, ВыбранноеЗначение[ИмяРеквизита]);
	КонецЦикла;
	
	Если Объект.ВидКорректировки = фКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
		СтруктураПоиска.Вставить("ИДВладельца", ИДВладельца);
	КонецЕсли;
	
	бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(СтруктураПоиска
																		   ,фКэшЗначений.ИзмеренияДоп
																		   ,фКэшЗначений.НастройкиИзмерений);
																		   
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураПоиска);
	
	ИмяТаблицы = ?(ВидДвижения="Приход", "Увеличение", "Уменьшение");
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Если Результат И ВыводитьСообщения Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Данная строка уже подобрана в табличную часть ""%1"" в строке № %2'"), 
			ИмяТаблицы, МассивСтрок[0].НомерСтроки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура устанавливает отборы для статьи оборотов.
// 
// Параметры:
//  Контейнер - ПолеФормы.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатей(Контейнер)

	МассивПараметров = Новый Массив;
	
	Если бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЗнч(Объект.ДокументОснование), "ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтатьи"	, фКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
		МассивПараметров.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.РасходДоход", фКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		МассивПараметров.Добавить(НовыйПараметр);
		
	ИначеЕсли бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЗнч(Объект.ДокументОснование), "ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтатьи"	, фКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР);
		МассивПараметров.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.РасходДоход", фКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		МассивПараметров.Добавить(НовыйПараметр);
	КонецЕсли;
	
	Контейнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

// Процедура Устанавливает ид строки табличной части.
// 
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИДСтроки(ТекущаяСтрока)

	ТекущаяСтрока.ИД = Строка(Новый УникальныйИдентификатор());

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИДВладельца, Результат = Ложь)
	
	ТаблицаКонтрольныхЗначений = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобранныхКонтрольныхЗначенийВХранилище);
	
	Если ТаблицаКонтрольныхЗначений.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Если ВыбранноеЗначение.Направление = "Приход" Тогда
		Для Каждого КонтрольноеЗначение Из ТаблицаКонтрольныхЗначений Цикл
			Если ПроверитьУникальностьСтрокиСервер(Элементы.СуммыКорректировокПриход, КонтрольноеЗначение, "Приход") Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавим строку расхода.
			НоваяСтрока = Объект.СуммыКорректировок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КонтрольноеЗначение);
			УстановитьИДСтроки(НоваяСтрока);
			
			НоваяСтрока.ВидДвижения = фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
			НоваяСтрока.Сумма		= 0;
			НоваяСтрока.Количество	= 0;
		
			бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																			,фКэшЗначений.ИзмеренияДоп
																			,фКэшЗначений.НастройкиИзмерений);
			ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
			ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
		КонецЦикла;
		
	Иначе	
		// Для вида корректировки ЗаСчет строки таблицы уменьшение подчинены строкам увеличения.
		Если Объект.ВидКорректировки = Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
			Если ИДВладельца = "" Тогда
				ТекстСообщения = НСтр("ru='Не указана строка в которой происходит увеличение.'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				Возврат;
			КонецЕсли;
		Иначе
			ИДВладельца = "";
		КонецЕсли;
		
		Для Каждого КонтрольноеЗначение Из ТаблицаКонтрольныхЗначений Цикл
			Если ПроверитьУникальностьСтрокиСервер(Элементы.СуммыКорректировокРасход, КонтрольноеЗначение, "Расход",,ИДВладельца) Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавим строку расхода.
			НоваяСтрока = Объект.СуммыКорректировок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КонтрольноеЗначение);
			УстановитьИДСтроки(НоваяСтрока);
			
			НоваяСтрока.ВидДвижения = фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
			НоваяСтрока.ИДВладельца = ИДВладельца;
			НоваяСтрока.Сумма		= КонтрольноеЗначение.СуммаСценарийКонтроль - КонтрольноеЗначение.СуммаСценарийИсполнение;
			НоваяСтрока.Количество	= КонтрольноеЗначение.КоличествоСценарийКонтроль - КонтрольноеЗначение.КоличествоСценарийИсполнение;
		
			бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																			,фКэшЗначений.ИзмеренияДоп
																			,фКэшЗначений.НастройкиИзмерений);
			ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
			ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ НоваяСтрока = Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура подсчитывает итоги по табличным частям.
// 
&НаКлиенте
Процедура ОбновитьИтоги()
	
	// Приход.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидДвижения", фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	СтрокиПриход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	пКоличество = 0;
	
	Для Каждого СтрокаПриход Из СтрокиПриход Цикл
		пСумма 		= пСумма + СтрокаПриход.Сумма;
		пКоличество = пКоличество + СтрокаПриход.Количество;
	КонецЦикла;
	
	мСуммаПриход 	 	 = пСумма;
	мКоличествоПриход 	 = пКоличество;
	СуммаДокументаПриход = мСуммаПриход;
	
	// Расход.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидДвижения", фКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	СтрокиРасход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	
	Для Каждого СтрокаРасход Из СтрокиРасход Цикл
		пСумма 		= пСумма + СтрокаРасход.Сумма;
	КонецЦикла;
	
	СуммаДокументаРасход = пСумма;
	
	// Подсчитаем сумму по подчиненным строкам таблицы Расход.
	Если Объект.ВидКорректировки = фКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
		ТекущаяСтрокаПриход = Элементы.СуммыКорректировокПриход.ТекущаяСтрока;
		Если НЕ ТекущаяСтрокаПриход = Неопределено Тогда
			ДанныеТекущейСтроки = Объект.СуммыКорректировок.НайтиПоИдентификатору(ТекущаяСтрокаПриход);
			
			Если НЕ ДанныеТекущейСтроки = Неопределено Тогда
				СтруктураОтбора.Вставить("ИДВладельца", ДанныеТекущейСтроки.ИД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиРасход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	пКоличество = 0;
	
	Для Каждого СтрокаРасход Из СтрокиРасход Цикл
		пСумма 		= пСумма + СтрокаРасход.Сумма;
		пКоличество = пКоличество + СтрокаРасход.Количество;
	КонецЦикла;
	
	мСуммаРасход 	  = пСумма;
	мКоличествоРасход = пКоличество;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект 	 = Форма.Объект;
	
	ВидКорректировкиЗаСчет 		  = ПредопределенноеЗначение("Перечисление.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет");
	ВидКорректировкиИзменение 	  = ПредопределенноеЗначение("Перечисление.бит_ВидыКорректировокКонтрольныхЗначений.Изменение");
	ВидКорректировкиВозвратЛимита = ПредопределенноеЗначение("Перечисление.бит_ВидыКорректировокКонтрольныхЗначений.ВозвратЛимита");
	
	Элементы.ГруппаСписание.Видимость = 
		Объект.ВидКорректировки = ВидКорректировкиЗаСчет ИЛИ Объект.ВидКорректировки = ВидКорректировкиИзменение;
		
	Элементы.ДокументОснование.Видимость = 
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийКорректировкаКонтрольныхЗначений.КонтрольЗаявок");	
	
	Элементы.СуммыКорректировокРасходГруппаСкопироватьВУвеличение.Видимость = 
		Объект.ВидКорректировки = ВидКорректировкиИзменение;
		
	Если Объект.ВидКорректировки = ВидКорректировкиЗаСчет Тогда
		Элементы.ГруппаСписание.Заголовок = Нстр("ru = 'За счет'");
	Иначе
		Элементы.ГруппаСписание.Заголовок = Нстр("ru = 'Уменьшение'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти
