
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сценарий 				= Параметры.Сценарий;
	СценарийКонтролируемый 	= Параметры.СценарийКонтролируемый;
	Направление 			= Параметры.Направление;
	ЭтоКонтрольБюджета		= Параметры.ЭтоКонтрольБюджета;
	СтруктураОтбора			= Параметры.СтруктураОтбора;
	
	Период.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	
	ИнициализироватьКомпоновщик(КомпоновщикНастроек);
	
	// Настроим отображение полей доп. аналитик в таблицах формы.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"КонтрольныеЗначенияБюджетов", Неопределено, Неопределено);
																					 																	 
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьНаборКонтрольныхЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	КонтрольныеЗначенияБюджетовПодбор = КонтрольныеЗначенияБюджетов.НайтиСтроки(Новый Структура("Перенести", Истина));
	
	Если ЗавершениеРаботы И КонтрольныеЗначенияБюджетовПодбор.Количество() > 0 Тогда
		Отказ = Истина;
	ИначеЕсли Не ПеренестиВДокумент И КонтрольныеЗначенияБюджетовПодбор.Количество() > 0 Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Подобранные контрольные значения бюджетов не перенесены в документ.
			|
			|Перенести?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПеренестиВДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПеренестиВДокументЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	СтруктураВозврата = ПриЗакрытииНаСервере();
	
	Если ПеренестиВДокумент Тогда
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриЗакрытииНаСервере()
	
	СтруктураВозврата = Новый Структура();
	
	Если ПеренестиВДокумент Тогда
		АдресПодобранныхКонтрольныхЗначенийВХранилище = ПоместитьПодобранныеКонтрольныеЗначенияВХранилище();
		СтруктураВозврата.Вставить("АдресПодобранныхКонтрольныхЗначенийВХранилище", АдресПодобранныхКонтрольныхЗначенийВХранилище);
		СтруктураВозврата.Вставить("Направление",									Направление);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодДатаНачалаПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, 
																				Период.ДатаОкончания);
																				
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаОкончанияПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, 
																				Период.ДатаОкончания);
																				
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрольныеЗначенияБюджетов

&НаКлиенте
Процедура КонтрольныеЗначенияБюджетовПеренестиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.КонтрольныеЗначенияБюджетов.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Для расхода не дадим выбирать строки, в которых исполнение превысило контроль.
	Если Направление = "Расход" Тогда
		Если ТекущаяСтрока.СуммаСценарийКонтроль - ТекущаяСтрока.СуммаСценарийИсполнение < 0 Тогда
			ТекстСообщения = НСтр("ru='В выбранной строке сумма-исполнение превысила сумму-контроль."
								+" Строка может быть использована только для увеличения суммы-контроль'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			ТекущаяСтрока.Перенести = Ложь;
		КонецЕсли;
		Если ТекущаяСтрока.КоличествоСценарийКонтроль - ТекущаяСтрока.КоличествоСценарийИсполнение < 0 Тогда
			ТекстСообщения = НСтр("ru='В выбранной строке количество-исполнение превысило количество-контроль."
								+" Строка может быть использована только для увеличения количество-контроль'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			ТекущаяСтрока.Перенести = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОбновитьНаборКонтрольныхЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаПериода(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
	
	ОбработатьФлаги(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ОбработатьФлаги(0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	ОбработатьФлаги(1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция инициализирует схему компоновки данных и пользовательские настройки.
// 
// Параметры:
// 	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - настройки которые будут заполнены из макета СКД.
// 
// Возвращаемое значение:
// 	АдресСхемыКомпоновкиДанных - строка адрес временного хранилища, где хранится СКД.
// 
&НаСервере
Функция ИнициализироватьКомпоновщик(пКомпоновщик)
	
	СхемаКомпоновкиДанных = Документы.бит_КорректировкаКонтрольныхЗначений.ПолучитьМакет("СКДПодборЗаписей");
	
	мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СхемаКомпоновкиДанных, 
					"НаборДанных1", 
					мНастройкиИзмерений);
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	пКомпоновщик.Инициализировать(ИсточникНастроек);
	пКомпоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПериодичности(СтрПериодичность)
	
	ЗначениеПериодичности = 9;
	
	Если СтрПериодичность = "День" Тогда
		ЗначениеПериодичности = 6;
	ИначеЕсли СтрПериодичность = "Неделя" Тогда
		ЗначениеПериодичности = 7;
	ИначеЕсли СтрПериодичность = "Декада" Тогда
		ЗначениеПериодичности = 8;
	ИначеЕсли СтрПериодичность = "Месяц" Тогда
		ЗначениеПериодичности = 9;	
	ИначеЕсли СтрПериодичность = "Квартал" Тогда
		ЗначениеПериодичности = 10;
	ИначеЕсли СтрПериодичность = "Полугодие" Тогда
		ЗначениеПериодичности = 11;
	ИначеЕсли СтрПериодичность = "Год" Тогда
		ЗначениеПериодичности = 12;	
	КонецЕсли;
	
	Возврат ЗначениеПериодичности;
	
КонецФункции

// Процедура выполняет СКД и загружает таблицу КонтрольныеЗначнияБюджетов.
// 
&НаСервере
Процедура ОбновитьНаборКонтрольныхЗначений()
	
	Если ЭтоКонтрольБюджета
		И НЕ ЗначениеЗаполнено(СценарийКонтролируемый) Тогда
		// Если вид операции КонтрольБюджета, но сценарий контролируемый не заполнен
		// , то будут подбираться записи по заявкам - это неправильно.
		Возврат;
	КонецЕсли;
	
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	ПустойСценарий = Справочники[ИмяСправочникаСценарии].ПустаяСсылка();
	
	Периодичность = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(Сценарий);
	
	СтрПериодичность = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования,Периодичность);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ПараметрыСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("Период", Период);
	ПараметрыСКД.УстановитьЗначениеПараметра("Сценарий", Сценарий);
	ПараметрыСКД.УстановитьЗначениеПараметра("СценарийКонтролируемый", СценарийКонтролируемый);
	ПараметрыСКД.УстановитьЗначениеПараметра("ПустойСценарий", ПустойСценарий);
	ПараметрыСКД.УстановитьЗначениеПараметра("Периодичность", ПолучитьЗначениеПериодичности(СтрПериодичность));
	ПараметрыСКД.УстановитьЗначениеПараметра("Направление", Направление);
	
	Для Каждого КлючЗначение Из СтруктураОтбора Цикл
		ИмяПоля = СтрЗаменить(КлючЗначение.Ключ, "_тчк_", ".");
		ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПравоеЗначение = КлючЗначение.Значение;
		// Найдем пользовательские отборы
		ИДПользовательскийОтбор = КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
		ПользовательскийОтборКомпоновки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИДПользовательскийОтбор);
		
		Если НЕ ПользовательскийОтборКомпоновки = Неопределено Тогда
			бит_ОбщегоНазначенияКлиентСервер.УстановитьОтборУСписка(ПользовательскийОтборКомпоновки, ЛевоеЗначение, ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиСКД = КомпоновщикНастроек.ПолучитьНастройки(); 
	                          
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		НастройкиСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаНаборКонтрольныхЗначений = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаНаборКонтрольныхЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	КонтрольныеЗначенияБюджетов.Загрузить(ТаблицаНаборКонтрольныхЗначений);
	
	// Скроем колонки в которых нет значений.
	НастроитьВидимостьКолонок(ТаблицаНаборКонтрольныхЗначений);
	
КонецПроцедуры

// Процедура настраивает видимость колонок в зависимости от их использования
// 	если хотя бы в одной строке значение в колонке заполнено, то колонка видна.
// 
// Параметры:
// 	ТаблицаИспользованияКолонок - ТаблицаЗначений 
// 			(таблица аналог таблицы КонтрольныеЗначенияБюджетов с дополнением в виде
// 			  колонок с типом булево, указывающих, что значение в текущей строке в соответствующей колонке заполнено).
// 
&НаСервере
Процедура НастроитьВидимостьКолонок(ТаблицаИспользованияКолонок)
	
	Если ТаблицаИспользованияКолонок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСкрываемыхКолонок = Новый Массив;
	
	Для Каждого ТекущаяКолонка Из ТаблицаИспользованияКолонок.Колонки Цикл
		Если Найти(ТекущаяКолонка.Имя, "Показывать_") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСкрываемыхКолонок.Добавить(ТекущаяКолонка.Имя);
	КонецЦикла;
	
	Если НЕ МассивСкрываемыхКолонок.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		
		ТекстПолей 			= "";
		ТекстПолейМаксимум 	= "";
		ТекстПолейЕстьNULL 	= "";
		
		Для Каждого ТекущаяКолонка Из МассивСкрываемыхКолонок Цикл
			ТекстПолей = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
						|	ТаблицаКолонок." + ТекущаяКолонка;
						
			ТекстПолейМаксимум = ТекстПолейМаксимум + ?(ПустаяСтрока(ТекстПолейМаксимум), "", ",") + "
						|	МАКСИМУМ(ТаблицаКолонок." + ТекущаяКолонка + ") КАК " + ТекущаяКолонка;
						
			ТекстПолейЕстьNULL = ТекстПолейЕстьNULL + ?(ПустаяСтрока(ТекстПолейЕстьNULL), "", ",") + "
						|	ЕстьNULL(ТаблицаКолонок." + ТекущаяКолонка + ", ИСТИНА) КАК " + ТекущаяКолонка;			
		КонецЦикла; 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	"+ТекстПолей+"
		|ПОМЕСТИТЬ ТаблицаКолонок
		|ИЗ
		|	&ТаблицаКолонок КАК ТаблицаКолонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	"+ТекстПолейЕстьNULL+"
		|ИЗ
		|	(ВЫБРАТЬ
		|		"+ТекстПолейМаксимум+"
		|	ИЗ
		|		ТаблицаКолонок КАК ТаблицаКолонок) КАК ТаблицаКолонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаКолонок";
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ТаблицаКолонок", ТаблицаИспользованияКолонок);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Для Каждого ТекущаяКолонка Из МассивСкрываемыхКолонок Цикл
				ИмяКолонкиТаблицы = СтрЗаменить(ТекущаяКолонка, "Показывать_", "");
				
				НайденнаяКолонкаТаблицы = Элементы.Найти("КонтрольныеЗначенияБюджетов"+ИмяКолонкиТаблицы);
				
				Если НайденнаяКолонкаТаблицы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НайденнаяКолонкаТаблицы.Видимость = Выборка[ТекущаяКолонка];
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПодобранныеКонтрольныеЗначенияВХранилище()
	
	ТаблицаКонтрольныхЗначений = КонтрольныеЗначенияБюджетов.Выгрузить(Новый Структура("Перенести", Истина));
	АдресПодобраннойНоменклатурыВХранилище = ПоместитьВоВременноеХранилище(ТаблицаКонтрольныхЗначений, УникальныйИдентификатор);
	Возврат АдресПодобраннойНоменклатурыВХранилище;
	
КонецФункции

// Процедура управляет флагами в табличной части.
// 
// Парметры:
//  ЗначениеФлага - Число (0 - снять флаги, 1 - установить истина, 2 - инвертировать).
&НаКлиенте
Процедура ОбработатьФлаги(ЗначениеФлага)
	
	Для Каждого СтрокаТаблицы Из КонтрольныеЗначенияБюджетов Цикл
		Если ЗначениеФлага = 0 Тогда
			СтрокаТаблицы.Перенести = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			СтрокаТаблицы.Перенести = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			СтрокаТаблицы.Перенести = НЕ СтрокаТаблицы.Перенести;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
     
#КонецОбласти   
