#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем мНастройкиПрограммы Экспорт; // Хранит настройки БИТ.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли; 
	
	ДополнительныеСвойства.Вставить("Проведен",		Проведен);
	ДополнительныеСвойства.Вставить("РежимЗаписи",	РежимЗаписи);
	ПроводитьПослеУтверждения = ?(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения") = Истина, Истина, Ложь);
	ДополнительныеСвойства.Вставить("ПроводитьПослеУтверждения",	ПроводитьПослеУтверждения);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	Если ВидОперации <> Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений.КонтрольЗаявок Тогда
		ДокументОснование 	   = Неопределено;
	КонецЕсли; 

	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	ПустойСценарий		   = Справочники[ИмяСправочникаСценарии].ПустаяСсылка();
	
	УстановитьКонтролируемыйСценарий();

	Если ВидКорректировки = Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ВозвратЛимита Тогда
		Индекс = СуммыКорректировок.Количество() - 1;
		Пока Индекс >= 0 Цикл
			СтрокаТаблицы = СуммыКорректировок.Получить(Индекс);
			Если СтрокаТаблицы.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Расход Тогда
				СуммыКорректировок.Удалить(СтрокаТаблицы);			
			КонецЕсли; 
			Индекс = Индекс - 1;
		КонецЦикла; 
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
	Если ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ОтправленНаСогласование = Истина;
		Иначе
			ОтправленНаСогласование = Ложь;
			бит_Визирование.ОчиститьВсеВизыБезусловно(Ссылка)
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		Если ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
			// Если документ был проведен в системе ранее, без отправки на согласование,
			// при повторном проведении его движения стирать нельзя.
			Если НЕ Проведен ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				РежимПринятияКУчету = 1;
			КонецЕсли;
		Иначе
			РежимПринятияКУчету = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	бит_ОбщегоНазначенияПереопределяемый.ОбработкаПроведенияНачало(ЭтотОбъект, РежимПроведения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.бит_КорректировкаКонтрольныхЗначений.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	Документы.бит_КорректировкаКонтрольныхЗначений.ПроверитьОстаткиПоКонтрольнымЗначениям(
		ПараметрыПроведения.ПроверкаКонтрольныхЗначений, 
		ПараметрыПроведения.ПроверкаКонтрольныхЗначенийРеквизиты, Отказ);
	
	Если Отказ Тогда  
		Возврат;
	КонецЕсли; 
	
	//{ bit SVKushnirenko Bit 27.01.2017 #2657
	ЭтотОбъект.Движения.бит_КонтрольныеЗначенияБюджетов.ДополнительныеСвойства.Вставить("бит_БК_УстановкаСтатусаПослеПроведения", Истина);
	//} bit SVKushnirenko Bit 27.01.2017 #2657	
	
	Документы.бит_КорректировкаКонтрольныхЗначений.СформироватьКонтрольныеЗначениябюджетов(
		ПараметрыПроведения.КонтрольныеЗначенияБюджетов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Если НЕ Отказ Тогда
		Если НЕ ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
			Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ ДополнительныеСвойства.Проведен Тогда
				СтруктураПараметров = Новый Структура;
				бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
			КонецЕсли; 
		КонецЕсли; 				
		// Установим статус.
		УстановитьСтатус(РежимЗаписиДокумента.Проведение);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//{ bit SVKushnirenko Bit 27.01.2017 #2657
	ЭтотОбъект.Движения.бит_КонтрольныеЗначенияБюджетов.ДополнительныеСвойства.Вставить("бит_БК_УстановкаСтатусаПередУдалением", Истина);
	//} bit SVKushnirenko Bit 27.01.2017 #2657
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ); 
	
	// Проверим допустимость отмены проведения 
	РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	мТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	мДатаИзмененияСтатуса = РезСтруктура.Дата;
	
	Если НЕ Отказ Тогда
		// Очистим визы.
		Если НЕ ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
			бит_Визирование.ОчиститьВсеВизыБезусловно(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
		
	Если НЕ Отказ Тогда
		СтатусНач = мТекущийСтатус;			
		УстановитьСтатус(ДополнительныеСвойства.РежимЗаписи);
		Если ДополнительныеСвойства.ПроводитьПослеУтверждения 
			И (СтатусНач = Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Черновик ИЛИ НЕ ЗначениеЗаполнено(СтатусНач))
			И ОтправленНаСогласование Тогда
			
			СтруктураПараметров = Новый Структура;
			бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив();
	
	Если ВидОперации <> Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений.КонтрольБюджета Тогда
		НепроверяемыеРеквизиты.Добавить("СценарийКонтролируемый");
	КонецЕсли;
	
	РеквизитыСтатей = Новый Соответствие(); 
	
	Для Каждого ТекущаяСтрока Из СуммыКорректировок Цикл
		// Определим название таблицы. 
		Если ТекущаяСтрока.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Приход Тогда
			НазваниеТаблицы = Нстр("ru = 'Увеличение'");
		Иначе
			Если ВидКорректировки = Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
				НазваниеТаблицы = Нстр("ru = 'За счет'");
			Иначе
				НазваниеТаблицы = Нстр("ru = 'Уменьшение'");
			КонецЕсли;
		КонецЕсли;
		
		РеквизитыСтатьи = РеквизитыСтатей[ТекущаяСтрока.СтатьяОборотов];
		Если РеквизитыСтатьи = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.СтатьяОборотов) Тогда
				РеквизитыСтатьи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.СтатьяОборотов, "Учет_Сумма, Учет_Количество");
			Иначе	
				РеквизитыСтатьи = Новый Структура("Учет_Сумма, Учет_Количество", Ложь, Ложь); 
			КонецЕсли;
			РеквизитыСтатей.Вставить(ТекущаяСтрока.СтатьяОборотов, РеквизитыСтатьи);
		КонецЕсли; 
		
		// Проверим заполненность суммы.
		Если РеквизитыСтатьи.Учет_Сумма И РеквизитыСтатьи.Учет_Количество Тогда
			
			// Проверим заполненность суммы.
			Если ТекущаяСтрока.Сумма = 0 И ТекущаяСтрока.Количество = 0 Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,
					Нстр("ru = 'Сумма корректировки'"), ТекущаяСтрока.НомерСтроки, НазваниеТаблицы);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,Отказ);
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,
					Нстр("ru = 'Количество'"), ТекущаяСтрока.НомерСтроки, НазваниеТаблицы);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,Отказ);
			КонецЕсли;

		Иначе
			// Проверим заполненность суммы.
			Если РеквизитыСтатьи.Учет_Сумма И ТекущаяСтрока.Сумма = 0 Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,
					Нстр("ru = 'Сумма корректировки'"), ТекущаяСтрока.НомерСтроки, НазваниеТаблицы);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,Отказ);
			КонецЕсли;
			
			// Проверим заполненность количество.
			Если РеквизитыСтатьи.Учет_Количество И ТекущаяСтрока.Количество = 0 Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,
					Нстр("ru = 'Количество'"), ТекущаяСтрока.НомерСтроки, НазваниеТаблицы);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Для вида корректировки ЗаСчет сумма прихода должна совпадать с суммой расхода.
		Если ВидКорректировки = Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет
			И ТекущаяСтрока.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Приход Тогда
			
			СуммаПриход = ТекущаяСтрока.Сумма;
			СуммаРасход = 0;
			
			КоличествоПриход = ТекущаяСтрока.Количество;
			КоличествоРасход = 0;
			
			// Найдем подчиненные строки.
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидДвижения", Перечисления.бит_ВидДвиженияНакопления.Расход);
			СтруктураОтбора.Вставить("ИДВладельца", ТекущаяСтрока.ИД);
			
			МассивСтрок = СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого ПодчиненнаяСтрока Из МассивСтрок Цикл
				СуммаРасход 	 = СуммаРасход + ПодчиненнаяСтрока.Сумма;
				КоличествоРасход = КоличествоРасход + ПодчиненнаяСтрока.Количество;
			КонецЦикла;

			Префикс = СтрШаблон("СуммыКорректировок[%1].", Формат(ТекущаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ="));

			Если НЕ СуммаПриход = СуммаРасход Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА","КОРРЕКТНОСТЬ",
					Нстр("ru = 'Сумма корректировки'"), ТекущаяСтрока.НомерСтроки, Нстр("ru = 'Увеличение'"),
					Нстр("ru = 'Сумма корректировки не совпадает с общей суммой корректировки по списку ""За счет"".'"));
					
				Поле = Префикс + "Сумма";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, ,Отказ);
			КонецЕсли;
			Если НЕ КоличествоПриход = КоличествоРасход Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА","КОРРЕКТНОСТЬ",
					Нстр("ru = 'Количество'"), ТекущаяСтрока.НомерСтроки, Нстр("ru = 'Увеличение'"),
					Нстр("ru = 'Количество не совпадает с общим количеством по списку ""За счет"".'"));
					
				Поле = Префикс + "Количество";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, ,Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Установка настроек обязательности реквизитов.
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПроводитьПослеУтверждения = ?(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения") = Истина, Истина, Ложь);
	ДополнительныеСвойства.Вставить("ПроводитьПослеУтверждения",	ПроводитьПослеУтверждения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокОснование") Тогда
		
		// Если документ создается на основании другого, то в данные заполнения надо передавать структуру
		// с обязательными ключами:
		// 	- ДокОснование - ДокументСсылка
		//  - МассивСтрокПревышения - массив.
		Если ТипЗнч(ДанныеЗаполнения.ДокОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств")
			ИЛИ ТипЗнч(ДанныеЗаполнения.ДокОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			
			Если ДанныеЗаполнения.Свойство("ВозвратЛимита") Тогда
				ВидОперации 	 = Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений.КонтрольЗаявок;
				ВидКорректировки = Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ВозвратЛимита;
			Иначе
				ВидОперации 	 = Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений.КонтрольЗаявок;
				ВидКорректировки = Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет;
			КонецЕсли;
			
			Сценарий 		  = ДанныеЗаполнения.ДокОснование.Сценарий;
			ДокументОснование = ДанныеЗаполнения.ДокОснование;
			
			Если ДанныеЗаполнения.Свойство("МассивСтрокПревышения")
				И ТипЗнч(ДанныеЗаполнения.МассивСтрокПревышения) = Тип("Массив") Тогда
				
				МассивСтрокПревышения = ДанныеЗаполнения.МассивСтрокПревышения;
				
				Для Каждого ТекущаяСтрока Из МассивСтрокПревышения Цикл
					
					НоваяСтрока = СуммыКорректировок.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
					
					УстановитьИДСтроки(НоваяСтрока);
					
					НоваяСтрока.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Приход;
					НоваяСтрока.Сумма 		= -ТекущаяСтрока.Разность;
					НоваяСтрока.Количество 	= -ТекущаяСтрока.КоличествоРазность;
					
					бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока, мИзмеренияДоп, мНастройкиИзмерений);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда 	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента();
	
	Если ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
		РежимПринятияКУчету = 1;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ПроводитьПослеУтверждения = ?(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения") = Истина, Истина, Ложь);
	ДополнительныеСвойства.Вставить("ПроводитьПослеУтверждения",	ПроводитьПослеУтверждения);
	
	// Сбрасываем признак начала согласования.
	ОтправленНаСогласование = Ложь;
	ДокументОснование 		= Неопределено;
	ВидОперации 			= ОбъектКопирования.ВидОперации;
	Ответственный			= Пользователи.ТекущийПользователь();
	Если ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
		РежимПринятияКУчету = 1;
	Иначе
		РежимПринятияКУчету = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура устанавливает статус.
// 
// Параметры:
//  вхРежимЗаписи			 - РежимЗаписиДокумента.
//  вхЗатратыСтруктура		 - Структура.
//  вхСинхронизироватьЗатраты - Булево. По умолчанию Истина.
// 
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено) Экспорт
						  
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
						  
						  
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
		
		
		Если вхРежимЗаписи = Неопределено Тогда
			 РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			 РежимЗаписи = вхРежимЗаписи;
		КонецЕсли; 
		
		// Вычислим переменные, необходимые для установки статуса.
		ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);				
		
		// Определим статус заявки.
		Статус = ОпределитьСтатус(ЭтотОбъект, мТекущийСтатус, РежимЗаписи, ВсеВизыПолучены, ЕстьОтклонено);
		
		
		// Если статус изменился - запишем его.
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,мТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				
				мТекущийСтатус = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));	
			
		РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура Устанавливает ид строки табличной части.
// 
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.
// 
Процедура УстановитьИДСтроки(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.ИД = Строка(Новый УникальныйИдентификатор());

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет шапку документа.
// 
// Параметры:
// 	ПараметрОбъектКопирования - ДокументСсылка.
// 
Процедура ЗаполнитьШапкуДокумента(ПараметрОбъектКопирования = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений.КонтрольЗаявок;
	КонецЕсли;											
	
	Если НЕ ЗначениеЗаполнено(ВидКорректировки) Тогда
		ВидКорректировки = Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет;
	КонецЕсли;

	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, Пользователи.ТекущийПользователь(), ПараметрОбъектКопирования);
	
	УстановитьКонтролируемыйСценарий();

КонецПроцедуры

Процедура УстановитьКонтролируемыйСценарий()
	
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	ПустойСценарий		   = Справочники[ИмяСправочникаСценарии].ПустаяСсылка();
	
	Если ВидОперации = Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений.КонтрольГрафиковДоговоров Тогда
		СценарийКонтролируемый = Перечисления.бит_РежимыКонтроляПоБюджету.ГрафикиДоговоров;
	ИначеЕсли ВидОперации = Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений.КонтрольЗаявок Тогда
		СценарийКонтролируемый = ПустойСценарий;
	Иначе
		ОписаниеТипаСценарий   = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаСценарии);
		СценарийКонтролируемый = ОписаниеТипаСценарий.ПривестиЗначение(СценарийКонтролируемый);
	КонецЕсли;

КонецПроцедуры

// Процедура получает статус объекта.
// 
// Параметры:
//  Нет.
// 
Процедура ПолучитьСтатусМодуль()
	
	// Получаем статус и дату изменения статуса для документа.
	РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	
	мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус)
					  		 ,РезСтруктура.Статус
					  		 ,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
							  
	мДатаИзмененияСтатуса = РезСтруктура.Дата;
	
КонецПроцедуры

// Функция определяет текущий статус документа.
// 
// Параметры:
//  ТекущийОбъект    - ДокументСсылка.бит_КорректировкаКонтрольныхЗначений.
//  НачальныйСтатус  - текущее значение статуса.
//  ВсеВизыПолучены  - Булево.
//  ЕстьОтклонено    - Булево.
// 
// Возвращаемое значение:
//   РезСтатус   - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция ОпределитьСтатус(ТекущийОбъект, НачальныйСтатус, РежимЗаписи, ВсеВизыПолучены, ЕстьОтклонено)

	Если НЕ ДополнительныеСвойства.Свойство("ПроводитьПослеУтверждения") Тогда
		ПроводитьПослеУтверждения = ?(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения") = Истина, Истина, Ложь);
		ДополнительныеСвойства.Вставить("ПроводитьПослеУтверждения", ПроводитьПослеУтверждения);
	КонецЕсли;

	РезСтатус = НачальныйСтатус;
	
	Если ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
		// Алгоритм изменения статусов для режима "ПроводитьДокументыПослеУтверждения".
		Если ОтправленНаСогласование Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Рабочий;
		Иначе
			РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Черновик;
		КонецЕсли; 
	Иначе	
		// Алгоритм изменения статусов для обычного режима.
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
			ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Запись И ТекущийОбъект.Проведен) Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Рабочий;
		Иначе
			РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Черновик;
		КонецЕсли; 
	КонецЕсли; 
	
	Если РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Рабочий Тогда
		Если ЕстьОтклонено Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Отклонен;
		Иначе	
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Утвержден;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Рабочий;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
  	Возврат РезСтатус;
  
КонецФункции
 
#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

ПолучитьСтатусМодуль();

РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
мТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

мНастройкиПрограммы = Новый Соответствие;

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

мРежимОбновленияВиз = Константы.бит_РежимОбновленияПеречняВиз.Получить();

#КонецОбласти

#КонецЕсли
