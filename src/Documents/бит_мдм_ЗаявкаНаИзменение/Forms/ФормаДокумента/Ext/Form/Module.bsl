
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
    // Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	ТекущийОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_мдм_ЗаявкаНаИзменение"));
	фИмяОбъекта = Объект.ОписаниеОбъекта.Имя;
	
	Настройки   = РегистрыСведений.бит_мдм_ПравилаРегистрацииИзменений.ПолучитьНастройкиВнутреннейМиграции(Объект.ОписаниеОбъекта);
	фРежимИзменения = Настройки.РежимИзменения;
	
	фЭтоАдмин = бит_мдм.ЭтоАдминистраторМДМ();
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОбъектКопирования  = Параметры.ЗначениеКопирования.ПолучитьОбъект();
		фМодельОбъекта     = ОбъектКопирования.ПолучитьМодельОбъекта();
		фМодельОбъектаПред = ОбъектКопирования.ПолучитьМодельОбъекта();
	Иначе	
		фМодельОбъекта     = ТекущийОбъект.ПолучитьМодельОбъекта();
		фМодельОбъектаПред = ТекущийОбъект.ПолучитьМодельОбъектаПред();
	КонецЕсли; 
	
	ГенерироватьФорму(Ложь);
	УправлениеЭлементамиФормы();
	
	Если ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ТипыРеквизитовОбъекта();
	Иначе
		ТипыРеквизитов = Неопределено;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	
		 Если ВыбранноеЗначение.Свойство("Статус") Тогда
		 
			 ЭтаФорма.Статус               = ВыбранноеЗначение.Статус;
			 ЭтаФорма.ДатаИзмененияСтатуса = ВыбранноеЗначение.ДатаИзмененияСтатуса;
			 СтруктураПараметров  = Новый Структура("Статус,ДатаИзмененияСтатуса"
			                                        ,ВыбранноеЗначение.Статус
													,ВыбранноеЗначение.ДатаИзмененияСтатуса);
			 ИнформацияСтатус     = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
		 
		 КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьПараметрыСтатуса();
	
	фИмяОбъекта = Объект.ОписаниеОбъекта.Имя;
	Настройки   = РегистрыСведений.бит_мдм_ПравилаРегистрацииИзменений.ПолучитьНастройкиВнутреннейМиграции(Объект.ОписаниеОбъекта);
	фРежимИзменения = Настройки.РежимИзменения;
	
	ГенерироватьФорму(Истина);
	УправлениеЭлементамиФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ Тогда
	
		Если ТипЗнч(фМодельОбъекта) = Тип("Структура") Тогда
		
			 ТекущийОбъект.ЗаписатьМодельОбъекта(фМодельОбъекта);
		
		КонецЕсли; 
		
		Если ТипЗнч(фМодельОбъектаПред) = Тип("Структура") Тогда
		
			 ТекущийОбъект.ЗаписатьМодельОбъектаПред(фМодельОбъектаПред);
		
		КонецЕсли; 
		
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_мдм_ЗаявкаНаИзменение";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УстановитьНастройкиДоступностиЭлементов();
		УправлениеЭлементамиФормы();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ВидОперацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОбъектаПриИзменении(Элемент)
	
	ОписаниеОбъектаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеОбъектаПриИзмененииНаСервере()
	
	фИмяОбъекта = Объект.ОписаниеОбъекта.Имя;
	Настройки   = РегистрыСведений.бит_мдм_ПравилаРегистрацииИзменений.ПолучитьНастройкиВнутреннейМиграции(Объект.ОписаниеОбъекта);
	фРежимИзменения = Настройки.РежимИзменения;
	
	УстановитьТипПредмета();
	Если ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ТипыРеквизитовОбъекта();
	Иначе
		ТипыРеквизитов = Неопределено;
	КонецЕсли;
	ГенерироватьФорму(Истина);	
	
	Если НЕ фРежимИзменения = ПредопределенноеЗначение("Перечисление.бит_мдм_РежимыИзменения.ПоЗаявке") Тогда
		ТекстСообщения =  НСтр("ru = 'Для объекта обмена ""%1%"" заявки на изменения не используются.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Объект.ОписаниеОбъекта);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметПриИзменении(Элемент)
	
	 ПредметПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПредметПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		
		фМодельОбъекта     = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьРеальныйОбъект(Объект.Предмет, Объект.Предмет.Метаданные());
		фМодельОбъектаПред = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьРеальныйОбъект(Объект.Предмет, Объект.Предмет.Метаданные());
		
	Иначе
		
		фМодельОбъекта     = Справочники.бит_мдм_ОписанияОбъектовОбмена.МодельОбъектаКонструктор();
		фМодельОбъектаПред = Справочники.бит_мдм_ОписанияОбъектовОбмена.МодельОбъектаКонструктор();		
		
	КонецЕсли; 
	
	Объект.СоздатьГруппу = МодельЭтоГруппа(фМодельОбъекта);
	
	ИсточникМета = Метаданные.Справочники[фИмяОбъекта];
	ПсевдоМета = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданныеРеальныйОбъект(ИсточникМета, Объект.СоздатьГруппу);	
	
	ГенерироватьФорму(Ложь);	
	
	ОбновитьДанныеШапки(ПсевдоМета);
	ОбновитьДанныеТабличныхЧастей(ПсевдоМета);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьТипПредмета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПредметаПриИзменении(Элемент)
	
	УстановитьТипПредмета();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДанныеШапки

&НаКлиенте
Процедура ТаблицаДанныеШапкиПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДанныеШапки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТипыРеквизитов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТаблицаДанныеШапкиНовоеЗначение Тогда
		Если ТипыРеквизитов.Свойство(ТекущиеДанные.Имя) Тогда
			Элемент.ТекущийЭлемент.ОграничениеТипа = ТипыРеквизитов[ТекущиеДанные.Имя];
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныеШапкиНовоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДанныеШапки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ фМодельОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если фМодельОбъекта.Реквизиты.Свойство(ТекущиеДанные.Имя) Тогда
		фМодельОбъекта.Реквизиты[ТекущиеДанные.Имя] = ТекущиеДанные.НовоеЗначение;
	ИначеЕсли фМодельОбъекта.СтандартныеРеквизиты.Свойство(ТекущиеДанные.Имя) Тогда
		фМодельОбъекта.СтандартныеРеквизиты[ТекущиеДанные.Имя] = ТекущиеДанные.НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	КомандаВыполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура КомандаВыполнитьНаСервере()
	
	ТекущийОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_мдм_ЗаявкаНаИзменение"));
	ТекущийОбъект.ИсполнитьЗаявку();
	
	ЗначениеВДанныеФормы(ТекущийОбъект, Объект);
	ЭтаФорма.Прочитать();
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	УправлениеЭлементамиФормы();	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактировать(Команда)
	
	Отказ = Ложь;
	
	Если Объект.ВидОперации =  ПредопределенноеЗначение("Перечисление.бит_мдм_ВидыОперацийЗаявкаНаИзменение.Изменение") 
		 И НЕ ЗначениеЗаполнено(Объект.Предмет) Тогда
		 
		 ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("ПОЛЕ" ,"Заполнение" ,"Предмет");
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Предмет","Объект",Отказ);
	 	 Возврат;
	 
	 КонецЕсли; 
	 
	 Если НЕ фРежимИзменения = ПредопределенноеЗначение("Перечисление.бит_мдм_РежимыИзменения.ПоЗаявке") Тогда
	 
		 Дополнение 	=  НСтр("ru = 'Для объекта обмена заявки на изменения не используются.'");
		 ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("ПОЛЕ" ,"Корректность" ,"ОписаниеОбъекта",,,Дополнение);
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ОписаниеОбъекта",,Отказ);
	 	 Возврат;
	 
	 КонецЕсли; 
	 
	 Группа   = Объект.СоздатьГруппу;
	 ВидФормы = ?(Группа, "ФормаГруппы", "ФормаОбъекта");
	 ТекИмяФормы = "Справочник.%1%.%2%";
	 ТекИмяФормы = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекИмяФормы, фИмяОбъекта, ВидФормы);
	 
	 Оповещение = Новый ОписаниеОповещения("ОткрытиеЭлементаЗавершение", ЭтотОбъект);
	 РежимОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	 
	 ПараметрыФормы = Новый Структура;
	 Если Группа Тогда
		 ПараметрыФормы.Вставить("ЭтоГруппа", Истина);
	 КонецЕсли;
	 
	 ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
	 Если Объект.ПодчиненныйСправочник Тогда
	 	ПараметрыФормы.ЗначенияЗаполнения.Вставить("Владелец", Объект.ВладелецПредмета);
	 КонецЕсли; 
	 Если ТипЗнч(фМодельОбъекта) = Тип("Структура") Тогда
	 	  ПараметрыФормы.ЗначенияЗаполнения.Вставить("бит_мдм_ЗаполнениеЗаявки", Истина);
		  ПараметрыФормы.ЗначенияЗаполнения.Вставить("МодельОбъекта", фМодельОбъекта);
		  ПараметрыФормы.Вставить("бит_мдм_ЗаполнениеЗаявки", Истина);		  
	 КонецЕсли; 
	 УстановитьПризнакРедактирования(Истина);
	 ОткрытьФорму(ТекИмяФормы,ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОкна);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура управляет видимостью/доступностью элементов формы. 
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	флЭтоСозданиеНового = ?(Объект.ВидОперации = Перечисления.бит_мдм_ВидыОперацийЗаявкаНаИзменение.ВводНового, Истина, Ложь);
	флУтверждена = ?(Статус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаИзменение_Утверждена, Истина, Ложь);
	Элементы.ФормаКомандаВыполнить.Доступность = флУтверждена И фЭтоАдмин;
	
	ЭлементыТолькоПросмотр = ?(Статус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаИзменение_Черновик
								ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Ложь, Истина);
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда  
			Элемент.ТолькоПросмотр = ЭлементыТолькоПросмотр;
		КонецЕсли; 
	КонецЦикла;
	
	Элементы.КомандаРедактировать.Доступность = НЕ ЭлементыТолькоПросмотр;
	Элементы.ВладелецПредмета.Видимость 	  = Объект.ПодчиненныйСправочник;
	Если ЗначениеЗаполнено(Объект.ВладелецПредмета) Тогда
		Элементы.ВладелецПредмета.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	Если флЭтоСозданиеНового Тогда
	     Элементы.Предмет.АвтоОтметкаНезаполненного = Ложь;
		 Элементы.Предмет.ОтметкаНезаполненного = Ложь;
		 Элементы.Предмет.ТолькоПросмотр = Истина;
	Иначе	
	     Элементы.Предмет.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	Элементы.ТаблицаДанныеШапкиСтароеЗначение.Видимость = НЕ флЭтоСозданиеНового;
	
	Если НЕ ЭлементыТолькоПросмотр И флЭтоСозданиеНового
		И ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Элементы.ГруппаДинамическиеСтраницы.ТолькоПросмотр = Ложь;
		Элементы.ТаблицаДанныеШапкиНовоеЗначение.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ГруппаДинамическиеСтраницы.ТолькоПросмотр = Истина;
		Элементы.ТаблицаДанныеШапкиНовоеЗначение.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если НЕ флЭтоСозданиеНового Тогда
		Элементы.СоздатьГруппу.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры // УправлениеЭлементамиФормы()

// Процедура применяет настройки доступности и видимости для элементов формы.
// 
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()

	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
	
КонецПроцедуры

// Процедура устанавливает тип реквизита Предмет в зависимости от выбранного описания объекта. 
// 
&НаСервере
Процедура УстановитьТипПредмета()
	
	Если ЗначениеЗаполнено(Объект.ОписаниеОбъекта) Тогда
		
		МетаданныеПредмета = Метаданные.Справочники.Найти(Объект.ОписаниеОбъекта.Имя);
		Если НЕ МетаданныеПредмета = Неопределено Тогда
			ИмяТипа 			  = "СправочникСсылка."+Объект.ОписаниеОбъекта.Имя;
			Объект.ПодчиненныйСправочник = Ложь;
			Для Инд = 0 По МетаданныеПредмета.СтандартныеРеквизиты.Количество()-1 Цикл
				Если МетаданныеПредмета.СтандартныеРеквизиты[Инд].Имя = "Владелец" Тогда
					Объект.ПодчиненныйСправочник = Истина;
					Прервать;	
				КонецЕсли; 
			КонецЦикла; 
			Если Объект.ПодчиненныйСправочник Тогда
				ОписаниеТипов 	        = МетаданныеПредмета.СтандартныеРеквизиты.Владелец.Тип;
				Объект.ВладелецПредмета = ОписаниеТипов.ПривестиЗначение(Объект.ВладелецПредмета);
			КонецЕсли; 
		Иначе	
			ИмяТаблицы = бит_мдм.ИмяОбъектаХранения(Объект.ОписаниеОбъекта);			
			ИмяТипа = "СправочникСсылка."+ИмяТаблицы;
			Объект.ПодчиненныйСправочник   = Ложь;
			Объект.ВладелецПредмета = Неопределено;
		КонецЕсли; 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип(ИмяТипа));
		
		Описание = Новый ОписаниеТипов(МассивТипов);
		Объект.Предмет = Описание.ПривестиЗначение(Объект.Предмет);
	Иначе	
		Объект.Предмет		    = Неопределено;
		Объект.ВладелецПредмета = Неопределено;
		Объект.ПодчиненныйСправочник   = Ложь;
	КонецЕсли; 	
	
	УправлениеЭлементамиФормы();

КонецПроцедуры  // УстановитьТипПредмета()

// Процедура обработчик оповещения "ОткрытиеЭлементаЗавершение".
// 
// Параметры:
// РезДанные - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ОткрытиеЭлементаЗавершение(РезДанные, ДополнительныеДанные) Экспорт
	
	ПолучитьИзБуфера();
	
КонецПроцедуры	// ОткрытиеЭлементаЗавершение

// Процедура устанавливает значение признака редактирования. 
// 
// Параметры:
//  ЗначениеПризнака - Булево.
// 
&НаСервереБезКонтекста
Процедура УстановитьПризнакРедактирования(ЗначениеПризнака)

	ПараметрыСеанса.бит_мдм_ПризнакРедактирования = ЗначениеПризнака;

КонецПроцедуры // УстановитьПризнакРедактирования()

// Процедура извлекает из буфера сохраненную модель объекта.
// 
&НаСервере
Процедура ПолучитьИзБуфера()
	
	Попытка
		фМодельОбъектаНов = ПараметрыСеанса.бит_мдм_Буфер.Получить();
	Исключение
		фМодельОбъектаНов = Неопределено;
	КонецПопытки;
	
	ПараметрыСеанса.бит_мдм_Буфер = Новый ХранилищеЗначения(Неопределено);	
	УстановитьПризнакРедактирования(Ложь);
	
	Если ТипЗнч(фМодельОбъектаНов) = Тип("Структура") Тогда
		
		фМодельОбъекта = фМодельОбъектаНов;
		
		ИсточникМета = Метаданные.Справочники[фИмяОбъекта];
		ПсевдоМета = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданныеРеальныйОбъект(ИсточникМета, Объект.СоздатьГруппу);
		
		Если фМодельОбъекта.Свойство("СтандартныеРеквизиты") 
			И фМодельОбъекта.СтандартныеРеквизиты.Свойство("ЭтоГруппа") Тогда
			
			фМодельОбъекта.СтандартныеРеквизиты.ЭтоГруппа = Объект.СоздатьГруппу;
			
		КонецЕсли; 
		
		ОбновитьДанныеШапки(ПсевдоМета);
		ОбновитьДанныеТабличныхЧастей(ПсевдоМета);		
		
	КонецЕсли; 
	
	
КонецПроцедуры // ПолучитьИзБуфера()

// Функция конструктор имени ТаблицыФормы для хранения данных ТЧ.
// 
// Параметры:
//   ИмяТЧ - Строка
//   ЭтоСтарыйДанные - Булево
// 
// Возвращаемое значение:
//  Имя - Строка.
// 
&НаСервереБезКонтекста
Функция ИмяТаблицыХраненияТЧ(ИмяТЧ, ЭтоСтарыеДанные = Ложь)

	Имя = "Таблица_"+?(ЭтоСтарыеДанные,"Старая_","")+ИмяТЧ;
	
	Возврат Имя;
	
КонецФункции // ИмяТаблицыХраненияТЧ()

// Функция конструктор имени реквизита для хранения итогов.
// 
// Параметры:
//  ИмяТаблицы - Строка
//  ИмяРеквизита - Строка
// 
// Возвращаемое значение:
//  Имя - Строка.
// 
&НаСервереБезКонтекста
Функция ИмяРеквизитаИтогов(ИмяТаблицы, ИмяРеквизита)
	
	Имя = ИмяТаблицы+"_"+ИмяРеквизита+"_Итог";
	
	Возврат Имя;
	
КонецФункции // ИмяРеквизитаИтогов()

// Функция определяет, является ли данный реквизит числовым.
// 
// Параметры:
//  МетаРеквизит - Структура
// 
// Возвращаемое значение:
//  флЧисловой - Булево.
// 
&НаСервереБезКонтекста
Функция ЭтоЧисловойРеквизит(МетаРеквизит)

	флЧисловой =?(МетаРеквизит.Тип.СодержитТип(Тип("Число")) 
				   И МетаРеквизит.Тип.Типы().Количество() = 1, Истина, Ложь);
	
	Возврат флЧисловой;
	
КонецФункции // ЭтоЧисловойРеквизит()

// Функция определяется является ли модель объекта группой.
// 
// Параметры:
//  МодельОбъекта - Структура
// 
// Возвращаемое значение:
//  ЭтоГруппа - Булево.
// 
&НаСервереБезКонтекста
Функция МодельЭтоГруппа(МодельОбъекта)
	
	ЭтоГруппа = ? (МодельОбъекта.СтандартныеРеквизиты.Свойство("ЭтоГруппа") И МодельОбъекта.СтандартныеРеквизиты.ЭтоГруппа = Истина, Истина, Ложь);	
	
	Возврат ЭтоГруппа;
	
КонецФункции // МодельЭтоГруппа()

// Процедура добавляет табличное поле, для отображения данных табличной части.
// 
&НаСервере
Процедура ДобавитьТабличноеПоле(МетаТабЧасть, СтраницаРодитель, ЭтоСтарая)
	
	ИмяГруппы = "Группа_"+?(ЭтоСтарая,"Старая_","")+МетаТабЧасть.Имя;
	ГруппаТаблица = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), СтраницаРодитель);
	ГруппаТаблица.Заголовок = МетаТабЧасть.Имя+?(ЭтоСтарая," ("+ НСтр("ru = 'Предыдущие данные'")+")","");
	ГруппаТаблица.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТаблица.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаТаблица.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	
	ИмяТаблицы = ИмяТаблицыХраненияТЧ(МетаТабЧасть.Имя, ЭтоСтарая);		
	НоваяТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ГруппаТаблица);
	НоваяТаблица.ПутьКДанным = ИмяТаблицы;
	НоваяТаблица.ИзменятьСоставСтрок  = Ложь;
	НоваяТаблица.ИзменятьПорядокСтрок = Ложь;
	НоваяТаблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	НоваяТаблица.ЧередованиеЦветовСтрок = Истина;
	НоваяТаблица.Подвал = Истина;
	
	
	Для каждого КиЗР Из МетаТабЧасть.Реквизиты Цикл
		
		МетаРеквизит = КиЗР.Значение;
		
		ИмяЭлемента = ИмяТаблицы+"_"+МетаРеквизит.Имя;
		ПутьКДанным = ИмяТаблицы+"."+МетаРеквизит.Имя;
		НовоеПоле = бит_мдм_РаботаСДиалогами.ДобавитьПолеФормы(Элементы, ИмяЭлемента, ПутьКДанным, МетаРеквизит.НастройкиОтображения, НоваяТаблица);
		НовоеПоле.ТолькоПросмотр = Истина;
		
		Если ЭтоЧисловойРеквизит(МетаРеквизит) Тогда
			
			ИмяРеквизита = ИмяРеквизитаИтогов(ИмяТаблицы, МетаРеквизит.Имя);
			Если фИтоговыеРеквизиты.Свойство(ИмяРеквизита) Тогда
				
				НовоеПоле.ПутьКДаннымПодвала = ИмяРеквизита;
	            НовоеПоле.ШрифтПодвала = Новый Шрифт(,,Истина);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ДобавитьТабличноеПоле()

// Процедура создает элементы для отображения данных табличных частей.
// 
// Параметры:
//  ПсевдоМета - Структура.
// 
&НаСервере
Процедура ДобавитьДинамическиеЭлементы(ПсевдоМетаданные)

	флОтображатьСтарые = ?(Объект.ВидОперации = Перечисления.бит_мдм_ВидыОперацийЗаявкаНаИзменение.Изменение, Истина, Ложь);
	
	СтрПар = Новый Структура;
	СтрПар.Вставить("Страницы", "ГруппаДинамическиеСтраницы"); 
	СтрПар.Вставить("СтраницаПоУмолчанию", "ГруппаСтраницаДанныеШапки");
		
	фИтоговыеРеквизиты = Новый Структура;
	
	Элементы.ВладелецПредмета.Видимость 	 = Объект.ПодчиненныйСправочник;
	Элементы.ВладелецПредмета.ТолькоПросмотр = Ложь;
	
	// Добавление реквизитов и элементов управления табличных частей.
	ДобавляемыеРеквизиты = Новый Массив;	
	Для каждого КиЗ Из ПсевдоМетаданные.ТабличныеЧасти Цикл
		
		МетаТабЧасть = КиЗ.Значение;
		
		// Таблица формы для отображения текущих данных.
		ИмяТаблицы = ИмяТаблицыХраненияТЧ(МетаТабЧасть.Имя);
		
		Описание = Новый ОписаниеТипов("ТаблицаЗначений");
		
		НоваяТаблица = Новый РеквизитФормы(ИмяТаблицы, Описание,  ,МетаТабЧасть.Синоним, Истина); 
		ДобавляемыеРеквизиты.Добавить(НоваяТаблица);
		
		// Таблица формы для отображени предыдущих данных.
		ИмяТаблицыСтарая = ИмяТаблицыХраненияТЧ(МетаТабЧасть.Имя, Истина);
		
		ТаблицаСтарая = Новый РеквизитФормы(ИмяТаблицыСтарая, Описание,  ,МетаТабЧасть.Синоним, Истина); 
		ДобавляемыеРеквизиты.Добавить(ТаблицаСтарая);
		
		Для каждого КиЗР Из МетаТабЧасть.Реквизиты Цикл
			
			// Реквизит новой таблицы 
			МетаРеквизит = КиЗР.Значение;
			НовыйРеквизит = Новый РеквизитФормы(МетаРеквизит.Имя, МетаРеквизит.Тип, ИмяТаблицы, МетаРеквизит.Синоним);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
			// Реквизит старой таблицы 
			НовыйРеквизит = Новый РеквизитФормы(МетаРеквизит.Имя, МетаРеквизит.Тип, ИмяТаблицыСтарая, МетаРеквизит.Синоним);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
			Если ЭтоЧисловойРеквизит(МетаРеквизит) Тогда
				
				// Реквизит для вывода итогов, необходим, т.к. для таблиц формы недоступны авто-итоги.
				ИмяРеквизита = ИмяРеквизитаИтогов(ИмяТаблицы, МетаРеквизит.Имя);
				НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, МетаРеквизит.Тип);
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				фИтоговыеРеквизиты.Вставить(ИмяРеквизита);
				
				// Реквизит для вывода итогов, необходим, т.к. для таблиц формы недоступны авто-итоги.
				ИмяРеквизита = ИмяРеквизитаИтогов(ИмяТаблицыСтарая, МетаРеквизит.Имя);
				НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, МетаРеквизит.Тип);
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				фИтоговыеРеквизиты.Вставить(ИмяРеквизита);
				
			КонецЕсли; 
			
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	ЭтотОбъект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для каждого КиЗ Из ПсевдоМетаданные.ТабличныеЧасти Цикл
		
		МетаТабЧасть = КиЗ.Значение;
		
		ИмяСтраницы = "Страница_"+МетаТабЧасть.Имя;
		НоваяСтраница = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы[СтрПар.Страницы]);
		НоваяСтраница.Вид = ВидГруппыФормы.Страница;
		НоваяСтраница.Заголовок = МетаТабЧасть.Синоним;
		
		Если флОтображатьСтарые Тогда
			
			// Старая таблица
			ДобавитьТабличноеПоле(МетаТабЧасть, НоваяСтраница, Истина);
			
		КонецЕсли; 
		
		// Новая таблица
		ДобавитьТабличноеПоле(МетаТабЧасть, НоваяСтраница, Ложь);
		
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(СтрПар.СтраницаПоУмолчанию) Тогда
		
		Элементы.ГруппаДинамическиеСтраницы.ТекущаяСтраница = Элементы[СтрПар.СтраницаПоУмолчанию];
		
	КонецЕсли; 
	

КонецПроцедуры // ДобавитьДинамическиеЭлементы()

// Процедура обновляет данные шапки.
// 
&НаСервере
Процедура ОбновитьДанныеШапки(ПсевдоМета = Неопределено)
	
	Если ПсевдоМета = Неопределено Тогда
		
		ИсточникМета = Метаданные.Справочники[фИмяОбъекта];
		ПсевдоМета = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданныеРеальныйОбъект(ИсточникМета, Объект.СоздатьГруппу);
		
	КонецЕсли; 	
	
	флЗаполнятьСтарые = Ложь;
	Если Объект.ВидОперации = Перечисления.бит_мдм_ВидыОперацийЗаявкаНаИзменение.Изменение 
		И ЗначениеЗаполнено(Объект.Предмет) Тогда
		
		флЗаполнятьСтарые = Истина;
		
	КонецЕсли; 
	
	ТаблицаДанныеШапки.Очистить();
	
	КоллекцииРеквизитов = Новый Массив;
	КоллекцииРеквизитов.Добавить("СтандартныеРеквизиты");
	Если ПсевдоМета.Свойство("ПризнакиУчета") Тогда
		
		КоллекцииРеквизитов.Добавить("ПризнакиУчета");
		
	КонецЕсли; 		
	КоллекцииРеквизитов.Добавить("Реквизиты");
	
	Для каждого ИмяКоллекции Из КоллекцииРеквизитов Цикл
		
		Для каждого КиЗ Из фМодельОбъекта[ИмяКоллекции] Цикл
			
			ИмяРеквизита       = КиЗ.Ключ;
			ЗначениеРеквизита  = КиЗ.Значение;
			
			ПсевдоМетаРеквизит = Неопределено;
			ПсевдоМета[ИмяКоллекции].Свойство(ИмяРеквизита, ПсевдоМетаРеквизит);
			
			Если ПсевдоМетаРеквизит = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли; 
			
			// Проверка на вывод кода
			Если ИмяКоллекции = "СтандартныеРеквизиты" 
				 И ИмяРеквизита = "Код" 
				 И НЕ Объект.ОписаниеОбъекта.ОтправлятьКод Тогда
			
				 Продолжить;
			
			КонецЕсли; 
			
			НоваяСтрока = ТаблицаДанныеШапки.Добавить();
			НоваяСтрока.Имя           = ИмяРеквизита;
			НоваяСтрока.Синоним       = ПсевдоМетаРеквизит.Синоним;
			НоваяСтрока.НовоеЗначение = ЗначениеРеквизита;
			
			Если флЗаполнятьСтарые Тогда
				
				НоваяСтрока.СтароеЗначение = фМодельОбъектаПред[ИмяКоллекции][ИмяРеквизита];
				
			КонецЕсли; 
			
		КонецЦикла; // Стандартные реквизиты
		
	КонецЦикла; // Коллекции реквизитов
	
КонецПроцедуры // ОбновитьДанныеШапки()

// Процедура обновляет данные табличных частей.
// 
// Параметры:
//  ПсевдоМета - Структура.
// 
&НаСервере
Процедура ОбновитьДанныеТабличныхЧастей(ПсевдоМета = Неопределено)
	
	Если ПсевдоМета = Неопределено Тогда
		
		ИсточникМета = Метаданные.Справочники[фИмяОбъекта];
		ПсевдоМета = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданныеРеальныйОбъект(ИсточникМета, Объект.СоздатьГруппу);
		
	КонецЕсли; 	
	
	флЗаполнятьСтарые = Ложь;
	Если Объект.ВидОперации = Перечисления.бит_мдм_ВидыОперацийЗаявкаНаИзменение.Изменение 
		И ЗначениеЗаполнено(Объект.Предмет) Тогда
		
		флЗаполнятьСтарые = Истина;
		
	КонецЕсли; 
	
	// Сброс значений итогов
	Для каждого КиЗ Из фИтоговыеРеквизиты  Цикл
	
		ЭтотОбъект[КиЗ.Ключ] = 0;
	
	КонецЦикла; 
	
	Для каждого КиЗ Из ПсевдоМета.ТабличныеЧасти Цикл
		
		ИмяТЧ = КиЗ.Ключ;
		МетаТабЧасть = КиЗ.Значение;
		
		ИмяТаблицы = ИмяТаблицыХраненияТЧ(ИмяТЧ);
		ИмяТаблицыСтарая = ИмяТаблицыХраненияТЧ(ИмяТЧ, Истина);
		
		ЭтотОбъект[ИмяТаблицы].Очистить();
		ЭтотОбъект[ИмяТаблицыСтарая].Очистить();
		
		Если флЗаполнятьСтарые Тогда
			
			Если фМодельОбъектаПред.ТабличныеЧасти.Свойство(ИмяТЧ) Тогда
				
				Для каждого МодельСтроки Из фМодельОбъектаПред.ТабличныеЧасти[ИмяТЧ]  Цикл
					
					НоваяСтрока = ЭтотОбъект[ИмяТаблицыСтарая].Добавить();			
					Для каждого КиЗР Из МетаТабЧасть.Реквизиты Цикл
						
						ИмяРеквизита = КиЗР.Ключ;
						
						// Итоги приходится считать "вручную", т.к. для таблиц формы автоматические поля итогов недоступны.
						ИмяРеквизитаИт = ИмяРеквизитаИтогов(ИмяТаблицыСтарая, ИмяРеквизита);
						Если фИтоговыеРеквизиты.Свойство(ИмяРеквизитаИт) Тогда
							
							ЭтотОбъект[ИмяРеквизитаИт] = ЭтотОбъект[ИмяРеквизитаИт] + МодельСтроки[ИмяРеквизита];
							
						КонецЕсли; 
						
						НоваяСтрока[ИмяРеквизита] = МодельСтроки[ИмяРеквизита];
						
					КонецЦикла; 
					
				КонецЦикла; // По старым данным
			
			КонецЕсли; 
			
		КонецЕсли;
		
		Если фМодельОбъекта.ТабличныеЧасти.Свойство(ИмяТЧ) Тогда
			
			Для каждого МодельСтроки Из фМодельОбъекта.ТабличныеЧасти[ИмяТЧ]  Цикл
				
				НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();			
				Для каждого КиЗР Из МетаТабЧасть.Реквизиты Цикл
					
					ИмяРеквизита = КиЗР.Ключ;
					
					// Итоги приходится считать "вручную", т.к. для таблиц формы автоматические поля итогов недоступны.
					ИмяРеквизитаИт = ИмяРеквизитаИтогов(ИмяТаблицы, ИмяРеквизита);
					Если фИтоговыеРеквизиты.Свойство(ИмяРеквизитаИт) Тогда
						
						ЭтотОбъект[ИмяРеквизитаИт] = ЭтотОбъект[ИмяРеквизитаИт] + МодельСтроки[ИмяРеквизита];
						
					КонецЕсли; 
					
					НоваяСтрока[ИмяРеквизита] = МодельСтроки[ИмяРеквизита];
					
				КонецЦикла; 
				
			КонецЦикла; // По новым данных
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ОбновитьДанныеТабличныхЧастей()

// Процедура добавляет динамические элементы на форму.
// 
&НаСервере
Процедура ГенерироватьФорму(ИзвлекатьМодели)
	
	бит_мдм_РаботаСДиалогами.УдалитьДинамическиеЭлементы(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(фИмяОбъекта) Тогда
		
		ТекущийОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_мдм_ЗаявкаНаИзменение"));
		
		Если ИзвлекатьМодели Тогда
			
			фМодельОбъекта     = ТекущийОбъект.ПолучитьМодельОбъекта();
			фМодельОбъектаПред = ТекущийОбъект.ПолучитьМодельОбъектаПред();
			
		КонецЕсли; 
		
		ИсточникМета = Метаданные.Справочники[фИмяОбъекта];
		ПсевдоМета = Справочники.бит_мдм_ОписанияОбъектовОбмена.ЭмулироватьМетаданныеРеальныйОбъект(ИсточникМета, Объект.СоздатьГруппу);

		ДобавитьДинамическиеЭлементы(ПсевдоМета);
		
		ОбновитьДанныеШапки(ПсевдоМета);
		ОбновитьДанныеТабличныхЧастей(ПсевдоМета);
		
	КонецЕсли; 
	
КонецПроцедуры // ГенерироватьФорму()

#КонецОбласти

&НаСервере
Функция ТипыРеквизитовОбъекта();
	
	ТипыРеквизитов = Новый Структура;
	ОбъектМетаданных = Объект.Предмет.Метаданные();
	Реквизиты = ОбъектМетаданных.Реквизиты;
	Для каждого Реквизит Из Реквизиты Цикл
		ТипыРеквизитов.Вставить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла; 
	СтандартныеРеквизиты = ОбъектМетаданных.СтандартныеРеквизиты;
	Для каждого Реквизит Из СтандартныеРеквизиты Цикл
		ТипыРеквизитов.Вставить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДанныеШапкиНовоеЗначение");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("Код");
	СписокЗначений.Добавить("Владелец");
	СписокЗначений.Добавить("Родитель");
	СписокЗначений.Добавить("ЭтоГруппа");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблицаДанныеШапки.Имя", ВидСравненияКомпоновкиДанных.ВСписке, СписокЗначений);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

#КонецОбласти
