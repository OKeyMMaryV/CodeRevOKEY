#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реклассификация задолженности по финансовой аренде ОС.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "РеклассификацияЗадолженностиРегл";
	КомандаПечати.Представление				= НСтр("ru = 'Реклассификация задолженности по финансовой аренде ОС'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ВидВалюты", "Регл");
	КомандаПечати.Порядок					= 10;	
	
	// Реклассификация задолженности по финансовой аренде ОС.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "РеклассификацияЗадолженностиДокумент";
	КомандаПечати.Представление				= НСтр("ru = 'Реклассификация задолженности по финансовой аренде ОС'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ВидВалюты", "Документ");
	КомандаПечати.Порядок					= 20;	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеклассификацияЗадолженностиРегл") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеклассификацияЗадолженностиРегл",
			НСтр("ru = 'Реклассификация задолженности по финансовой аренде ОС'"), 
			ПолучитьПечатныйДокументРеклассификацииЗадолженности(МассивОбъектов, ПараметрыПечати),,
			"Документ.бит_му_РеклассификацияЗадолженностиПоФинансовойАрендеОС.Макет");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеклассификацияЗадолженностиДокумент") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеклассификацияЗадолженностиДокумент",
			НСтр("ru = 'Реклассификация задолженности по финансовой аренде ОС'"), 
			ПолучитьПечатныйДокументРеклассификацииЗадолженности(МассивОбъектов, ПараметрыПечати),,
			"Документ.бит_му_РеклассификацияЗадолженностиПоФинансовойАрендеОС.Макет");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает табличный документ печатной формы.
// 
// Параметры:
//  МассивСсылок    - Массив. Массив ссылок, которые нужно распечатать.
// 	ПараметрыПечати - Структура.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
// 
Функция ПолучитьПечатныйДокументРеклассификацииЗадолженности(МассивСсылок, ПараметрыПечати)

	Результат = Новый ТабличныйДокумент;
	
	Для каждого Документ Из МассивСсылок Цикл
		
		ТабЧасть = Документ.Договора;
		ТЗ = ТабЧасть.Выгрузить(, "ДоговорКонтрагента, СуммаРеклассификации,
									|СчетУчетаДолгосрочный, СчетУчетаКраткосрочный");
		
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("Организация", Документ.Организация);
		СтруктураПараметров.Вставить("Дата"	      , Документ.Дата);
		СтруктураПараметров.Вставить("Валюта"	  , Документ.ВалютаДокумента);
		СтруктураПараметров.Вставить("Кратность"  , Документ.КратностьДокумента);
		СтруктураПараметров.Вставить("Курс"  	  , Документ.КурсДокумента);
		СтруктураПараметров.Вставить("Договора"	  , ТЗ);
		
		Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("ВидВалюты") Тогда
			СтруктураПараметров.Вставить("ВидВалюты", ПараметрыПечати.ВидВалюты);
		КонецЕсли;
		
		Результат = СформироватьТабличныйДокумент(СтруктураПараметров, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает сформированный табличный документ.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 	ТабДокумент 		- ТабличныйДокумент (По умолчанию = неопределено).
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
// 
Функция СформироватьТабличныйДокумент(СтруктураПараметров, ТабДокумент = Неопределено)
	
	ВидВалюты = СтруктураПараметров.ВидВалюты;
	СтруктураПараметров.Вставить("ВалютаРегл" , Константы.ВалютаРегламентированногоУчета.Получить());
		
	// Табличный документ.
	Если ТабДокумент = Неопределено Тогда
		ТабДок = Новый ТабличныйДокумент;
	Иначе
		ТабДок = ТабДокумент;
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЕсли;
	Макет = ПолучитьМакет("Макет");
	ОбластьЗаголовок 	   = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка		   = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаДоговоров = Макет.ПолучитьОбласть("СтрокаДоговоров");
	ОбластьСтрокаОбъектов  = Макет.ПолучитьОбласть("СтрокаОбъектов");
		
	// Выведем заголовок и шапку.
	ОбластьЗаголовок.Параметры.Заполнить(СтруктураПараметров);
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапка);
	
	// Начнем группировку строк.
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	// Сформируем запрос и получим результат. 
	Результат = ПолучитьРезультатЗапроса(СтруктураПараметров);

	ВыборкаДог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаДог.Следующий() Цикл
		
		ОбластьСтрокаДоговоров.Параметры.Заполнить(ВыборкаДог);
		Если ВидВалюты = "Документ" И СтруктураПараметров.ВалютаРегл <> СтруктураПараметров.Валюта Тогда
			ПересчитатьИзВалютыРегл(ОбластьСтрокаДоговоров.Параметры.СуммаПоСчету    , СтруктураПараметров);
			ПересчитатьИзВалютыРегл(ОбластьСтрокаДоговоров.Параметры.СуммаПоГрафику  , СтруктураПараметров);
			
		Иначе
			ПересчитатьИзВалютыРегл(ОбластьСтрокаДоговоров.Параметры.СуммаПоДокументу, СтруктураПараметров, Истина);	
		КонецЕсли;
		СуммаПоСчету   = ОбластьСтрокаДоговоров.Параметры.СуммаПоСчету;
		СуммаПоГрафику = ОбластьСтрокаДоговоров.Параметры.СуммаПоГрафику;		
        ОбластьСтрокаДоговоров.Параметры.СуммаРеклассификации = СуммаПоСчету - СуммаПоГрафику;
		
		ТабДок.Вывести(ОбластьСтрокаДоговоров, 0);
		
		Если ВыборкаДог.Объект <> NULL Тогда 
			
			Выборка = ВыборкаДог.Выбрать();	
			Пока Выборка.Следующий() Цикл
				
				ОбластьСтрокаОбъектов.Параметры.Заполнить(Выборка);
				Если ВидВалюты = "Документ" И СтруктураПараметров.ВалютаРегл <> СтруктураПараметров.Валюта Тогда
					ПересчитатьИзВалютыРегл(ОбластьСтрокаОбъектов.Параметры.СуммаПоГрафику, СтруктураПараметров);
				КонецЕсли;
          		ТабДок.Вывести(ОбластьСтрокаОбъектов, 1);
		
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ТабДок.ОтображатьГруппировки = Истина;
    ТабДок.ПоказатьУровеньГруппировокСтрок(1);
	
	Возврат ТабДок;
	
КонецФункции

// Процедура пересчитывает сумму из валюты регл учета в валюту.
// 
// Параметры:
//  Сумма  	  	    - Число.
//  СтруктураДанных - Структура.
// 
Процедура ПересчитатьИзВалютыРегл(Сумма, СтруктураДанных, Обратно = Ложь)

	Если Обратно Тогда
		Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма
													  ,СтруктураДанных.Валюта
													  ,СтруктураДанных.ВалютаРегл
													  ,СтруктураДанных.Курс
													  ,1
													  ,СтруктураДанных.Кратность
													  ,1);		
	Иначе
		Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма
													  ,СтруктураДанных.ВалютаРегл
													  ,СтруктураДанных.Валюта
													  ,1
													  ,СтруктураДанных.Курс
													  ,1
													  ,СтруктураДанных.Кратность);
		
	КонецЕсли; 

КонецПроцедуры

// Функция формирует и выполняет запрос.
// 
// Параметры:
//  СтруктураПараметров - Структура.
//  
// Возвращаемое значение:
//  Результат выполнения запроса.
// 
Функция ПолучитьРезультатЗапроса(СтруктураПараметров)

	Организация = СтруктураПараметров.Организация;
	Дата 		= СтруктураПараметров.Дата;
	Договора 	= СтруктураПараметров.Договора;
	
	ПВХПараметрыКЗ = ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов;
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ДоговорыКонтрагентов);

	ВидИсточника = Перечисления.бит_му_ВидыИсточниковЗадолженности.ОсновныеСредства;
	
	мКонтрагент = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"	      , Дата);
	Запрос.УстановитьПараметр("ДатаЧерезГод"  , ДобавитьМесяц(Дата, 13));
	Запрос.УстановитьПараметр("Организация"   , Организация);
	Запрос.УстановитьПараметр("ПараметрСД"    , ПВХПараметрыКЗ.СчетДолгосрочныхОбязательств);
	Запрос.УстановитьПараметр("ПараметрСК"    , ПВХПараметрыКЗ.СчетКраткосрочныхОбязательств);
	Запрос.УстановитьПараметр("ВидИсточника"  , ВидИсточника);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
  	Запрос.УстановитьПараметр("ТаблДоговора"  , Договора);
 	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Договора.ДоговорКонтрагента,
	|	Договора.СуммаРеклассификации КАК СуммаПоДокументу,
	|	Договора.СчетУчетаДолгосрочный,
	|	Договора.СчетУчетаКраткосрочный
	|	
	|ПОМЕСТИТЬ Договора
	|ИЗ
	|	&ТаблДоговора КАК Договора
    |
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКЗ_СД.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПараметрыКЗ_СД.ЗначениеПараметра КАК СчетУчетаДолгосрочный,
	|	ПараметрыКЗ_СК.ЗначениеПараметра КАК СчетУчетаКраткосрочный
	|ПОМЕСТИТЬ СчетаУчета
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &ПараметрСД) КАК ПараметрыКЗ_СД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &ПараметрСК) КАК ПараметрыКЗ_СК
	|		ПО ПараметрыКЗ_СД.ДоговорКонтрагента = ПараметрыКЗ_СК.ДоговорКонтрагента
	|ГДЕ
	|	ПараметрыКЗ_СД.ДоговорКонтрагента В (ВЫБРАТЬ ДоговорКонтрагента ИЗ Договора)
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблСчетаУчета.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблСчетаУчета.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
	|	ТаблСчетаУчета.СчетУчетаКраткосрочный КАК СчетУчетаКраткосрочный,
	|	РегБухОстатки.СуммаРеглОстатокКт КАК СуммаПоСчету
	|ПОМЕСТИТЬ ИнфПоДоговору
	|ИЗ
	|	СчетаУчета КАК ТаблСчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(&Дата, , &МассивСубконто, Организация = &Организация) КАК РегБухОстатки
	|		ПО ТаблСчетаУчета.ДоговорКонтрагента = РегБухОстатки.Субконто2
	|			И ТаблСчетаУчета.СчетУчетаДолгосрочный = РегБухОстатки.Счет
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегФинНач.Объект,
	|	РегФинНач.Контрагент,
	|	РегФинНач.ДоговорКонтрагента,
	|	РегФинНач.СуммаПлатежаРеглОборот - РегФинНач.ПогашеннаяСуммаФинансовыхПроцентовРеглОборот КАК СуммаПоГрафику
	|ПОМЕСТИТЬ РегФинНач
	|ИЗ
	|	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	|			&ДатаЧерезГод,
	|			,
	|			,
	|			Организация = &Организация
	|				И ДоговорКонтрагента В (ВЫБРАТЬ ДоговорКонтрагента ИЗ Договора)
	|				И ВидИсточникаЗадолженности = &ВидИсточника) КАК РегФинНач
	|ГДЕ
	|	РегФинНач.Организация = &Организация
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Договора.ДоговорКонтрагента                               			 КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(РегФинНач.Контрагент, Договора.ДоговорКонтрагента."+мКонтрагент+") КАК Контрагент,
	|	Договора.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
	|	Договора.СчетУчетаКраткосрочный КАК СчетУчетаКраткосрочный,
	|	ЕСТЬNULL(ИнфПоДоговору.СуммаПоСчету, 0)                   КАК СуммаПоСчету,
	|	ЕСТЬNULL(РегФинНач.СуммаПоГрафику, 0)                     КАК СуммаПоГрафику,
	|	Договора.СуммаПоДокументу КАК СуммаПоДокументу,
	|	РегФинНач.Объект КАК Объект
	|ИЗ
	|	Договора КАК Договора
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегФинНач КАК РегФинНач
	|		ПО Договора.ДоговорКонтрагента = РегФинНач.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнфПоДоговору КАК ИнфПоДоговору
	|		ПО (РегФинНач.ДоговорКонтрагента = ИнфПоДоговору.ДоговорКонтрагента)
    |
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента
	|ИТОГИ
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(СчетУчетаДолгосрочный),
	|	МАКСИМУМ(СчетУчетаКраткосрочный),
	|	МАКСИМУМ(СуммаПоСчету),
	|	СУММА(СуммаПоГрафику),
	|	МАКСИМУМ(СуммаПоДокументу),
	|	КОЛИЧЕСТВО(Объект)
	|ПО
	|	ДоговорКонтрагента
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СчетаУчета
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИнфПоДоговору
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегФинНач
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Договора
	|";
	Результат = Запрос.Выполнить();

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецЕсли
