
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

&НаКлиенте 
Перем мСписокВидовДоговоров; // Хранит список доступных для выбора видов договоров. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
    
    Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	бит_РаботаСДиалогамиСервер.УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы);
	
	УстановитьПараметрыВыбораДляСчетов();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли; 
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	// Установка параметров выбора для Договоров.
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ОсновнаяТаблицаДоговорКонтрагента, "Объект.Договора.Контрагент");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_РеклассификацияЗадолженностиПоФинансовойАрендеОС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.Договора.Итог("СуммаРеклассификации");
	
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновнаяТаблица

&НаКлиенте
Процедура ОсновнаяТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		Отказ = Истина;
		ДанныеКопирования = Элемент.ТекущиеДанные;
		НоваяСтрока = Объект.Договора.Добавить();
		НоваяСтрока.Контрагент 			   = ДанныеКопирования.Контрагент;
		НоваяСтрока.СчетУчетаКраткосрочный = ДанныеКопирования.СчетУчетаКраткосрочный;
		НоваяСтрока.СчетУчетаДолгосрочный  = ДанныеКопирования.СчетУчетаДолгосрочный;
		
	КонецЕсли;

КонецПроцедуры // ОсновнаяТаблицаПередНачаломДобавления()


&НаКлиенте
Процедура ОсновнаяТаблицаКонтрагентПриИзменении(Элемент)
	
	Идентификатор = Элементы.ОсновнаяТаблица.ТекущаяСтрока;
	ИзменениеКонтрагентаСервер(Идентификатор);
	
КонецПроцедуры // ОсновнаяТаблицаКонтрагентПриИзменении()
  
&НаКлиенте
Процедура ОсновнаяТаблицаДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Изменение кода. Начало. 19.01.2017{{
    Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
        Возврат;
    КонецЕсли;
    // Изменение кода. Конец. 19.01.2017}}
    
	ОтменитьВвод = Ложь;
	ДоговорКонтрагента = ТекущийЭлемент.ТекущиеДанные.ДоговорКонтрагента;
	
	Если ДоговорКонтрагента <> ВыбранноеЗначение Тогда
		
		Если ЭтоПовторныйВвод(ВыбранноеЗначение) Тогда
			ОтменитьВвод = Истина;
		КонецЕсли;		
	
		ДанныеДоговора = ПолучитьДанныеПоДоговору(ВыбранноеЗначение);
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда	
			Объект.Организация = ДанныеДоговора.Организация;
		ИначеЕсли Объект.Организация <> ДанныеДоговора.Организация Тогда
			ТекстСообщения = Нстр("ru = 'Договор %Договор% не может быть выбран, так как организация, указанная в нем не соответствует организации по документу.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Договор%", ДанныеДоговора.Наименование);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			ОтменитьВвод = Истина;
		КонецЕсли; 
		
		Если Не ОтменитьВвод И Не ЗначениеЗаполнено(ТекущийЭлемент.ТекущиеДанные.Контрагент) Тогда
			ТекущийЭлемент.ТекущиеДанные.Контрагент = ДанныеДоговора.Контрагент;
		ИначеЕсли ТекущийЭлемент.ТекущиеДанные.Контрагент <> ДанныеДоговора.Контрагент Тогда
			ТекстСообщения = Нстр("ru = 'Договор %Договор% не может быть выбран, так как контрагент, указанный в нем не соответствует контрагенту текущей строки.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Договор%", ДанныеДоговора.Наименование);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			ОтменитьВвод = Истина;
		КонецЕсли; 
		   
	КонецЕсли;
	
	Если ОтменитьВвод Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 
		
КонецПроцедуры // ОсновнаяТаблицаДоговорКонтрагентаОбработкаВыбора()

&НаКлиенте
Процедура ОсновнаяТаблицаДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда	
		Возврат;	
	КонецЕсли;
	
	ОбновитьДанныеИзЗапроса();
		
КонецПроцедуры // ОсновнаяТаблицаДоговорКонтрагентаПриИзменении()

&НаКлиенте
Процедура ОсновнаяТаблицаКурсВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
	СтруктураВзаиморасчеты = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента", 
										фКэшЗначений.ПустаяВалюта,
										ТекущиеДанные.КурсВзаиморасчетов,
										ТекущиеДанные.КратностьВзаиморасчетов);

	СтрутураРезультата = Новый Структура("СуммаПоСчетуВзаиморасчеты, СуммаПоГрафику",
										ТекущиеДанные.СуммаПоСчету, 
										ТекущиеДанные.СуммаПоГрафикуВзаиморасчеты);
	ПересчитатьСуммуПоВалюте(СтрутураРезультата.СуммаПоСчетуВзаиморасчеты  , мКэшРеквизитовФормы, СтруктураВзаиморасчеты);
	ПересчитатьСуммуПоВалюте(СтрутураРезультата.СуммаПоГрафику, СтруктураВзаиморасчеты, мКэшРеквизитовФормы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрутураРезультата);
	ТекущиеДанные.СуммаРеклассификации = ТекущиеДанные.СуммаПоСчету - ТекущиеДанные.СуммаПоГрафику;
	ТекущиеДанные.СуммаРеклассификацииВзаиморасчеты = ТекущиеДанные.СуммаПоСчетуВзаиморасчеты - ТекущиеДанные.СуммаПоГрафикуВзаиморасчеты;
			
КонецПроцедуры // ОсновнаяТаблицаКурсВзаиморасчетовПриИзменении()

&НаКлиенте
Процедура ОсновнаяТаблицаСуммаРеклассификацииВзаиморасчетыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
	СтруктураИсточник = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента", 
										фКэшЗначений.ПустаяВалюта,
										ТекущиеДанные.КурсВзаиморасчетов,
										ТекущиеДанные.КратностьВзаиморасчетов);

	СтрутураРезультата = Новый Структура("СуммаРеклассификации",
										ТекущиеДанные.СуммаРеклассификацииВзаиморасчеты);
	ПересчитатьСуммуПоВалюте(СтрутураРезультата.СуммаРеклассификации, СтруктураИсточник, мКэшРеквизитовФормы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрутураРезультата);
	
КонецПроцедуры // ОсновнаяТаблицаСуммаРеклассификацииВзаиморасчетыПриИзменении()

&НаКлиенте
Процедура ОсновнаяТаблицаСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
	СтруктураПриемник = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента", 
										фКэшЗначений.ПустаяВалюта,
										ТекущиеДанные.КурсВзаиморасчетов,
										ТекущиеДанные.КратностьВзаиморасчетов);

	СтрутураРезультата = Новый Структура("СуммаРеклассификацииВзаиморасчеты",
										ТекущиеДанные.СуммаРеклассификации);
	ПересчитатьСуммуПоВалюте(СтрутураРезультата.СуммаРеклассификацииВзаиморасчеты, мКэшРеквизитовФормы, СтруктураПриемник);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрутураРезультата);	
	
КонецПроцедуры // ОсновнаяТаблицаСуммаПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура СформироватьТабличнуюЧасть(Команда)
	
	Если Объект.Договора.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СформироватьТабличнуюЧастьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	
	Иначе
		
		ОбновитьДанныеИзЗапроса(Ложь, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТабличнуюЧасть()

// Процедура - обработчик оповещения "СформироватьТабличнуюЧастьЗавершение".
// 
&НаКлиенте
Процедура СформироватьТабличнуюЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеИзЗапроса(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧасть(Команда)
	
	ОбновитьДанныеИзЗапроса(Ложь);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

&НаКлиенте
Процедура ЗаполнитьПоТекущейСтроке(Команда)
	
	ОбновитьДанныеИзЗапроса();

КонецПроцедуры // ЗаполнитьПоТекущейСтроке()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	// Адаптация для ERP. Начало. 18.03.2014{{
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()]));
	// Адаптация для ERP. Конец. 18.03.2014}}
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Валюта регламентированного учета.
	фКэшЗначений.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	фКэшЗначений.Вставить("ПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура получает и записывает валюту международного учета в кэш значений.
// 
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура пересчитывает сумму из валюты в валюту.
// 
// Параметры:
//  Сумма  	          - Число.
//  СтруктураИсточник - Структура.
// 
&НаСервере
Процедура ПересчитатьСуммуПоВалюте(Сумма, СтруктураИсточник, СтруктураПриемник = Неопределено)

	Если СтруктураПриемник = Неопределено Тогда
		СтруктураПриемник = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента",
											Объект.ВалютаДокумента,
											Объект.КурсДокумента,
											Объект.КратностьДокумента);	
	КонецЕсли; 
	
	Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма
															 ,СтруктураИсточник.ВалютаДокумента
															 ,СтруктураПриемник.ВалютаДокумента
															 ,СтруктураИсточник.КурсДокумента
															 ,СтруктураПриемник.КурсДокумента
															 ,СтруктураИсточник.КратностьДокумента
															 ,СтруктураПриемник.КратностьДокумента);
                                                                                
КонецПроцедуры // ПересчитатьСуммуПоВалюте()

// Процедура пересчитывает сумму из валюты регл учета в валюту.
// 
// Параметры:
//  Сумма  	  	    - Число.
//  СтруктураДанных - Структура.
// 
&НаСервереБезКонтекста
Процедура ПересчитатьИзВалютыРегл(Сумма, СтруктураДанных)

	Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма
													  ,СтруктураДанных.ВалютаРеглУчета
													  ,СтруктураДанных.Валюта
													  ,1
													  ,СтруктураДанных.Курс
													  ,1
													  ,СтруктураДанных.Кратность);
	

КонецПроцедуры // ПересчитатьИзВалютыРегл()

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  КэшРеквизитовФормы - Структура.
// 
&НаСервере
Процедура ИзменениеВалютыСервер(КэшРеквизитовФормы = Неопределено)
	
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	Если КэшРеквизитовФормы <> Неопределено Тогда
		
		// Выполним пересчет сумм строк табличной части.
		Для Каждого СтрокаТаблицы Из Объект.Договора Цикл
			
			ПересчитатьСуммуПоВалюте(СтрокаТаблицы.СуммаПоСчету        , КэшРеквизитовФормы);
			ПересчитатьСуммуПоВалюте(СтрокаТаблицы.СуммаПоГрафику	   , КэшРеквизитовФормы);
			ПересчитатьСуммуПоВалюте(СтрокаТаблицы.СуммаРеклассификации, КэшРеквизитовФормы);
			
		КонецЦикла;
  	
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеВалютыСервер()

// Процедура обрабатывает изменение договора. Сервер.
// 
// Параметры:
//  Договор				- СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаСервереБезКонтекста 
Функция ПолучитьДанныеПоДоговору(Договор)
	
	ДанныеДоговора = Неопределено;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);
		
		ДанныеДоговора = Новый Структура("Наименование, Организация, Контрагент",
											Договор.Наименование,
											Договор.Организация,
											Контрагент_Владелец);
	КонецЕсли;
	
	Возврат ДанныеДоговора;
	
КонецФункции // ИзменениеДоговораСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	ОрганизацияОбъекта = Объект.Организация;
	ТаблицаОбъекта 	   = Объект.Договора;
	
	// Проверим организацию договоров по табличной части.
	Для каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
		
		ТекущийДоговор = СтрокаТаблицы.ДоговорКонтрагента;
		
		Если ЗначениеЗаполнено(ТекущийДоговор) 
			 И Не ТекущийДоговор.Организация = ОрганизацияОбъекта Тогда
				 
			ТекстСообщения = Нстр("ru = 'В строке номер ""%1%"" организация договора ""%2%"" " 
								+ "не соответствует организации документа. Данные очищены.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																					   ,Строка(СтрокаТаблицы.НомерСтроки)
																					   ,Строка(ТекущийДоговор));
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект);
			
			СтрокаТаблицы.ДоговорКонтрагента     = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			СтрокаТаблицы.СчетУчетаДолгосрочный  = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
			СтрокаТаблицы.СчетУчетаКраткосрочный = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
			СтрокаТаблицы.СуммаПоСчету 			 = 0;
			СтрокаТаблицы.СуммаПоГрафику 		 = 0;
			СтрокаТаблицы.СуммаРеклассификации   = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// Процедура выполняет действия необходимые при изменении контрагента.
// 
// Параметры:
//  Идентификатор - Число.
// 
&НаСервере
Процедура ИзменениеКонтрагентаСервер(Идентификатор)

	СтрокаТаблицы = Объект.Договора.НайтиПоИдентификатору(Идентификатор);
	ТекущийДоговор    = СтрокаТаблицы.ДоговорКонтрагента;
	ТекущийКонтрагент = СтрокаТаблицы.Контрагент;
	
	Если ЗначениеЗаполнено(ТекущийДоговор) Тогда
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(ТекущийДоговор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийДоговор) 
		И Контрагент_Владелец <> ТекущийКонтрагент Тогда
				 
		ТекстСообщения = Нстр("ru = 'В строке номер ""%1%"" контрагент " 
								+ "не соответствует владельцу договора ""%2%"". Данные очищены.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																					   ,Строка(СтрокаТаблицы.НомерСтроки)
																					   ,Строка(ТекущийДоговор));
			
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект);
			
		СтрокаТаблицы.ДоговорКонтрагента     = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		СтрокаТаблицы.СчетУчетаДолгосрочный  = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
		СтрокаТаблицы.СчетУчетаКраткосрочный = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
		СтрокаТаблицы.СуммаПоСчету 			 = 0;
		СтрокаТаблицы.СуммаПоГрафику 		 = 0;
		СтрокаТаблицы.СуммаРеклассификации   = 0;
			
	КонецЕсли;

КонецПроцедуры // ИзменениеКонтрагентаСервер()
         
// Процедура заполняет табличную часть Договора.
// 
// Параметры:
//  СтруктураДанных    - Структура.
//  СформироватьЗаного - Булево.
// 
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьДаннымиЗапроса(СтруктураДанных, СформироватьЗаного = Ложь)
    		
	Если Не СформироватьЗаного Тогда
		ТаблицаОбъектов = Объект.Договора.Выгрузить(, "ДоговорКонтрагента");
		МассивОбъектов  = ТаблицаОбъектов.ВыгрузитьКолонку("ДоговорКонтрагента");
		СтруктураДанных.Вставить("Договора", МассивОбъектов);
	КонецЕсли; 

	ДанныеЗапроса = ПолучитьДанныеИзЗапроса(СтруктураДанных);

	Если СформироватьЗаного Тогда	
		
		Объект.Договора.Очистить();
		
		Для каждого СтрокаДанных Из ДанныеЗапроса Цикл
			
			НоваяСтрока = Объект.Договора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.СуммаРеклассификации = СтрокаДанных.СуммаПоСчету - СтрокаДанных.СуммаПоГрафику;
			
		КонецЦикла;
	Иначе
		
		МассивОбъектов = Новый Массив;
		
		Для каждого СтрокаДанных Из  ДанныеЗапроса Цикл
			
			Отбор = Новый Структура("ДоговорКонтрагента", СтрокаДанных.ДоговорКонтрагента); 
			НайденныеСтроки = Объект.Договора.НайтиСтроки(Отбор);	
		    Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденнаяСтрока = НайденныеСтроки[0]; 
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаДанных);
				
				МассивОбъектов.Добавить(СтрокаДанных.ДоговорКонтрагента);
				
			КонецЕсли;
			
		КонецЦикла; 
		
		// Очистим объекты, по которым нет данных в результате запроса.
		Для каждого СтрокаДог Из Объект.Договора Цикл
			НайденнаяСтрока = МассивОбъектов.Найти(СтрокаДог.ДоговорКонтрагента);
			Если НайденнаяСтрока = Неопределено Тогда
				СтрокаДог.СчетУчетаДолгосрочный  = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
				СтрокаДог.СчетУчетаКраткосрочный = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
				СтрокаДог.СуммаПоСчету 			 = 0;
				СтрокаДог.СуммаПоГрафику 		 = 0;
				СтрокаДог.СуммаРеклассификации   = 0;
				СтрокаДог.СуммаПоСчетуВзаиморасчеты 	    = 0;
				СтрокаДог.СуммаПоГрафикуВзаиморасчеты 	    = 0;
				СтрокаДог.СуммаРеклассификацииВзаиморасчеты = 0;
				СтрокаДог.ВалютаВзаиморасчетов 	   = Справочники.Валюты.ПустаяСсылка();
				СтрокаДог.КурсВзаиморасчетов   	   = 0;
				СтрокаДог.КратностьВзаиморасчетов  = 0;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьДаннымиЗапроса()

// Процедура получает данные из запроса.
// 
// Параметры:
//  СтруктураДанных  		- Структура.
//  ФормироватьПустуюСтроку - Булево.
// 
&НаСервереБезКонтекста
Функция ПолучитьДанныеИзЗапроса(СтруктураДанных, ФормироватьПустуюСтроку = Ложь)
 	
	МассивРезультата = Новый Массив;
											
	Результат = ПолучитьРезультатЗапроса(СтруктураДанных);
		
	Если Результат.Пустой() И ФормироватьПустуюСтроку Тогда
		
		// Пустая строка заполняется если данные нужно получить для определенной строки
		// но результат выполнения запроса пуст.
		// Очищаем текущие данные.
		СтрокаРезультата = Новый Структура("СчетУчетаДолгосрочный, СчетУчетаКраткосрочный,
									|СуммаПоСчету, СуммаПоГрафику, СуммаРеклассификации,
									|ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов,
									|СуммаПоСчетуВзаиморасчеты,
									|СуммаПоГрафикуВзаиморасчеты,
									|СуммаРеклассификацииВзаиморасчеты");

		СтрокаРезультата.СчетУчетаДолгосрочный  = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
		СтрокаРезультата.СчетУчетаКраткосрочный = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
		СтрокаРезультата.СуммаПоСчету 			= 0;
		СтрокаРезультата.СуммаПоГрафику 		= 0;
		СтрокаРезультата.СуммаРеклассификации   = 0;
		СтрокаРезультата.СуммаПоСчетуВзаиморасчеты 	       = 0;
		СтрокаРезультата.СуммаПоГрафикуВзаиморасчеты 	   = 0;
		СтрокаРезультата.СуммаРеклассификацииВзаиморасчеты = 0;
		СтрокаРезультата.ВалютаВзаиморасчетов 	   = Справочники.Валюты.ПустаяСсылка();
		СтрокаРезультата.КурсВзаиморасчетов   	   = 0;
		СтрокаРезультата.КратностьВзаиморасчетов   = 0;
		МассивРезультата.Добавить(СтрокаРезультата);	
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаРезультата = Новый Структура("Контрагент, ДоговорКонтрагента, 
									|СчетУчетаДолгосрочный, СчетУчетаКраткосрочный,
									|СуммаПоСчету, СуммаПоГрафику, СуммаРеклассификации,
									|ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов,
									|СуммаПоСчетуВзаиморасчеты,
									|СуммаПоГрафикуВзаиморасчеты,
									|СуммаРеклассификацииВзаиморасчеты");

			ЗаполнитьЗначенияСвойств(СтрокаРезультата, Выборка);				
			
			ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
			СтруктураВзаиморасчетов = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, СтруктураДанных.Дата);
			СтруктураВзаиморасчетов.Вставить("Валюта", ВалютаВзаиморасчетов);
			СтруктураВзаиморасчетов.Вставить("ВалютаРеглУчета", СтруктураДанных.ВалютаРеглУчета);
			Если СтруктураДанных.ВалютаРеглУчета <> СтруктураДанных.Валюта Тогда
				ПересчитатьИзВалютыРегл(СтрокаРезультата.СуммаПоСчету, СтруктураДанных);
			КонецЕсли;
			
			СтрокаРезультата.СуммаПоГрафику = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.СуммаПоГрафикуВзаиморасчеты
													  ,Выборка.ВалютаВзаиморасчетов
													  ,СтруктураДанных.Валюта
													  ,Выборка.КурсВзаиморасчетов
													  ,СтруктураДанных.Курс
													  ,Выборка.КратностьВзаиморасчетов
													  ,СтруктураДанных.Кратность);
				
			ПересчитатьИзВалютыРегл(СтрокаРезультата.СуммаПоСчетуВзаиморасчеты, СтруктураВзаиморасчетов);
						
			СтрокаРезультата.СуммаРеклассификацииВзаиморасчеты = СтрокаРезультата.СуммаПоСчетуВзаиморасчеты - СтрокаРезультата.СуммаПоГрафикуВзаиморасчеты;
			СтрокаРезультата.СуммаРеклассификации = СтрокаРезультата.СуммаПоСчету - СтрокаРезультата.СуммаПоГрафику;
			
			МассивРезультата.Добавить(СтрокаРезультата);

		КонецЦикла;
	
	КонецЕсли; 
	
	Возврат МассивРезультата;

КонецФункции // ПолучитьДанныеИзЗапроса() 

// Функция формирует запрос и получает результат.
// 
// Параметры:
//  СтруктураДанных - Структура.
//  
// Возвращаемое значение:
//   Результат запроса.
// 
&НаСервереБезКонтекста
Функция ПолучитьРезультатЗапроса(СтруктураДанных)

	Дата = СтруктураДанных.Дата;
	ПВХПараметрыКЗ = ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов;
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ДоговорыКонтрагентов);
	
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("РасчетыВУсловныхЕдиницах") <> Неопределено Тогда
		мРасчетыВУсловныхЕдиницах = "РасчетыВУсловныхЕдиницах";
	Иначе
		мРасчетыВУсловныхЕдиницах = "ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте)";
	КонецЕсли; 
    мКонтрагент = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"	        , Дата);
	Запрос.УстановитьПараметр("ДатаЧерезГод"    , КонецМесяца(ДобавитьМесяц(Дата, 11)));
	Запрос.УстановитьПараметр("Организация"     , СтруктураДанных.Организация);
	Запрос.УстановитьПараметр("ПараметрСД"      , ПВХПараметрыКЗ.СчетДолгосрочныхОбязательств);
	Запрос.УстановитьПараметр("ПараметрСК"      , ПВХПараметрыКЗ.СчетКраткосрочныхОбязательств);
	Запрос.УстановитьПараметр("ВидИсточника"    , Перечисления.бит_му_ВидыИсточниковЗадолженности.ОсновныеСредства);
	Запрос.УстановитьПараметр("МассивСубконто"  , МассивСубконто);
	Запрос.УстановитьПараметр("ВалютаРеглУчета" , СтруктураДанных.ВалютаРеглУчета);
	Текст = "
	|ВЫБРАТЬ
	|	ПараметрыКЗ_СД.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПараметрыКЗ_СД.ЗначениеПараметра КАК СчетУчетаДолгосрочный,
	|	ПараметрыКЗ_СК.ЗначениеПараметра КАК СчетУчетаКраткосрочный
	|ПОМЕСТИТЬ СчетаУчета
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &ПараметрСД) КАК ПараметрыКЗ_СД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &ПараметрСК) КАК ПараметрыКЗ_СК
	|		ПО ПараметрыКЗ_СД.ДоговорКонтрагента = ПараметрыКЗ_СК.ДоговорКонтрагента
	|%УсловиеПоДоговоруПараметры%
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка 	КАК ДоговорКонтрагента,
	// |	ДоговорыКонтрагентов.Владелец 	КАК Контрагент,
	|	ДоговорыКонтрагентов."+мКонтрагент+" 	КАК Контрагент,
	|   ДоговорыКонтрагентов.ВалютаВзаиморасчетов	КАК ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ Договоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|%УсловиеПоДоговоруДоговора%
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Договоры.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Договоры.Контрагент,
	|	Договоры.ВалютаВзаиморасчетов,
	|	ТаблСчетаУчета.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
	|	ТаблСчетаУчета.СчетУчетаКраткосрочный КАК СчетУчетаКраткосрочный,
	|	ЕСТЬNULL(РегБухОстатки.СуммаРеглОстатокКт, 0) КАК СуммаПоСчетуРегл
	|ПОМЕСТИТЬ ИнфПоДоговору
	|ИЗ
	|	Договоры КАК Договоры
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаУчета КАК ТаблСчетаУчета
	|		ПО Договоры.ДоговорКонтрагента = ТаблСчетаУчета.ДоговорКонтрагента
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(&Дата, , &МассивСубконто, Организация = &Организация) КАК РегБухОстатки
	|			ПО ТаблСчетаУчета.ДоговорКонтрагента = РегБухОстатки.Субконто2
	|				И ТаблСчетаУчета.СчетУчетаДолгосрочный = РегБухОстатки.Счет
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КурсыВалют.Курс) 			КАК Курс,
	|	МАКСИМУМ(КурсыВалют.Кратность) 		КАК Кратность,
	|	ИнфПоДоговору.ВалютаВзаиморасчетов 	КАК Валюта
	|ПОМЕСТИТЬ ТаблВзаиморасчетов
	|ИЗ
	|	ИнфПоДоговору КАК ИнфПоДоговору
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|		ПО ИнфПоДоговору.ВалютаВзаиморасчетов = КурсыВалют.Валюта
    |
	|СГРУППИРОВАТЬ ПО
	|	ИнфПоДоговору.ВалютаВзаиморасчетов	
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	| ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РегФинНач.РасходДоход = ЗНАЧЕНИЕ(Перечисление.бит_РасходДоход.Расходование)
	|				ТОГДА РегФинНач.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот - РегФинНач.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот - РегФинНач.СуммаВзаиморасчетыОборот
	|			ИНАЧЕ РегФинНач.СуммаВзаиморасчетыОборот
	|		КОНЕЦ) КАК СуммаПоГрафикуВзаиморасчеты,
	|	РегФинНач.ДоговорКонтрагента
	| ПОМЕСТИТЬ РегФинНач
	| ИЗ
	|	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	|			,
	|			&ДатаЧерезГод,
	|			,
	|				Организация = &Организация
	|				И ВидИсточникаЗадолженности = &ВидИсточника
	|               %УсловиеПоДоговоруРегФинНач%) КАК РегФинНач
	|
	|  СГРУППИРОВАТЬ ПО
	|	РегФинНач.ДоговорКонтрагента
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ	
	|	ИнфПоДоговору.Контрагент,
	|	ИнфПоДоговору.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|
	|	ТаблВзаиморасчетов.Валюта 	 КАК ВалютаВзаиморасчетов,
	|	ТаблВзаиморасчетов.Курс   	 КАК КурсВзаиморасчетов,
	|	ТаблВзаиморасчетов.Кратность КАК КратностьВзаиморасчетов,
	|
	|	ИнфПоДоговору.СчетУчетаДолгосрочный 	КАК СчетУчетаДолгосрочный,
	|	ИнфПоДоговору.СчетУчетаКраткосрочный 	КАК СчетУчетаКраткосрочный,
	|
	|	ИнфПоДоговору.СуммаПоСчетуРегл 						КАК СуммаПоСчету,
	|	ЕСТЬNULL(РегФинНач.СуммаПоГрафикуВзаиморасчеты, 0)  КАК СуммаПоГрафику,
	|
	|	ИнфПоДоговору.СуммаПоСчетуРегл 						КАК СуммаПоСчетуВзаиморасчеты,
	|	ЕСТЬNULL(РегФинНач.СуммаПоГрафикуВзаиморасчеты, 0)  КАК СуммаПоГрафикуВзаиморасчеты
	|	
	|ИЗ
	|	РегФинНач КАК РегФинНач
	//{begin  Санникова Н.В. ошибка обновления 16.02.2021 
	|		ПРАВОЕ СОЕДИНЕНИЕ ИнфПоДоговору КАК ИнфПоДоговору
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ИнфПоДоговору КАК ИнфПоДоговору
	// Санникова Н.В. ошибка обновления 16.02.2021 end}
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблВзаиморасчетов КАК ТаблВзаиморасчетов
	|			ПО ИнфПоДоговору.ВалютаВзаиморасчетов = ТаблВзаиморасчетов.Валюта
	|		ПО РегФинНач.ДоговорКонтрагента = ИнфПоДоговору.ДоговорКонтрагента
	|%УсловиеПоСуммеСчета%
    |
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента";
	
	Если Не СтруктураДанных.Свойство("Договора") Тогда
 		Текст = СтрЗаменить(Текст, "%УсловиеПоДоговоруПараметры%", "");
		Текст = СтрЗаменить(Текст, "%УсловиеПоДоговоруДоговора%"
							, " ДоговорыКонтрагентов.Ссылка В (ВЫБРАТЬ Таб.ДоговорКонтрагента ИЗ СчетаУчета КАК Таб) ");
		Текст = СтрЗаменить(Текст, "%УсловиеПоДоговоруРегФинНач%", "");
		Текст = СтрЗаменить(Текст, "%УсловиеПоСуммеСчета%"," ГДЕ ИнфПоДоговору.СуммаПоСчетуРегл <> 0 ");
	Иначе
		Запрос.УстановитьПараметр("ДоговораКонтрагента", СтруктураДанных.Договора);
		Текст = СтрЗаменить(Текст, "%УсловиеПоДоговоруПараметры%", "
									|ГДЕ
									|	ПараметрыКЗ_СД.ДоговорКонтрагента В (&ДоговораКонтрагента) ");
        Текст = СтрЗаменить(Текст, "%УсловиеПоДоговоруДоговора%"
							, " ДоговорыКонтрагентов.Ссылка В(&ДоговораКонтрагента) ");
		Текст = СтрЗаменить(Текст, "%УсловиеПоДоговоруРегФинНач%", " 
									|И ДоговорКонтрагента В (&ДоговораКонтрагента) ");
		Текст = СтрЗаменить(Текст, "%УсловиеПоСуммеСчета%","");
	КонецЕсли;
		
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить();

	Возврат Результат;
	
КонецФункции // ПолучитьРезультатЗапроса()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ОсновнаяТаблицаСчетУчетаДолгосрочный);
	МассивЭлементов.Добавить(Элементы.ОсновнаяТаблицаСчетУчетаКраткосрочный);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ТаблицаОбъекта = Объект.Договора;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И (Не ТаблицаОбъекта.Итог("СуммаПоСчету") 		= 0 
	    ИЛИ Не ТаблицаОбъекта.Итог("СуммаПоГрафику") 	= 0
		ИЛИ ТаблицаОбъекта.Итог("СуммаРеклассификации") = 0
		) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыКлиентЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура - обработчик оповещения "СформироватьТабличнуюЧастьЗавершение".
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиентЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИзменениеВалютыСервер(мКэшРеквизитовФормы);	
	Иначе	
		ИзменениеВалютыСервер();
	КонецЕсли;
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");
	
КонецПроцедуры


// Функция проверяет повторный ввод.
// 
// Параметры:
//  ЗагружаемоеЗначение - СправочникСсылка.ДоговорыКонтрагентов.
//  
// Возвращаемое значение:
//   Булево.
// 
&НаКлиенте
Функция ЭтоПовторныйВвод(ЗагружаемоеЗначение)

    ЭтоПовторныйВвод = Ложь;
    
    Отбор = Новый Структура("ДоговорКонтрагента", ЗагружаемоеЗначение);
    НайденныеСтроки = Объект.Договора.НайтиСтроки(Отбор);
    
    Если НайденныеСтроки.Количество() > 0 Тогда
    	
    	ТекстСообщения = Нстр("ru = 'Ошибка повторного ввода. Договор %Договор% уже указан в таблице.'");
    	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Договор%", ЗагружаемоеЗначение);
    	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
    	
    	ЭтоПовторныйВвод = Истина;
    	
    КонецЕсли; 
 
    Возврат ЭтоПовторныйВвод;
	
КонецФункции // ПроверитьПовторныйВводОС()

// Функция формирует структуру данных, 
// куда входит информация по валюте документа и валюта регламентированного учета,
// организация, дата документа.
//  
// Возвращаемое значение:
//   Структура. 
// 
&НаКлиенте
Функция ПолучитьСтруктуруДанных()

	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Курс"     		, Объект.КурсДокумента);
	СтруктураДанных.Вставить("Кратность"		, Объект.КратностьДокумента);
	СтруктураДанных.Вставить("Валюта"   		, Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("ВалютаРеглУчета"  , фКэшЗначений.ВалютаРеглУчета);
	
    СтруктураДанных.Вставить("Дата"		  , Объект.Дата);
	СтруктураДанных.Вставить("Организация", Объект.Организация);
 	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьСтруктуруКурсов()

// Процедура получает из регистра накопления и записывает 
// сумму начисленных процентов, контрагента и договор контрагента.
// 
&НаКлиенте
Процедура ОбновитьДанныеИзЗапроса(ТолькоПоОднойСтроке = Истина, СформироватьЗаного = Ложь)
 	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	
	Если ТолькоПоОднойСтроке Тогда
		
		ОбновитьДанныеИзЗапросаДляСтроки(СтруктураДанных);
		
	Иначе
		
		ЗаполнитьТабличнуюЧастьДаннымиЗапроса(СтруктураДанных, СформироватьЗаного);
		
	КонецЕсли; 
		
КонецПроцедуры // ОбновитьДанныеПоФинансовымНачислениямИзРегистра()

// Процедура получает из регистра накопления и записывает в текущие данные
// сумму начисленных процентов, контрагента и договор контрагента.
// 
&НаКлиенте
Процедура ОбновитьДанныеИзЗапросаДляСтроки(СтруктураДанных)
	
	ТекущиеДанные = Элементы.ОсновнаяТаблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ТекущиеДанные.ДоговорКонтрагента);
	СтруктураДанных.Вставить("Договора", МассивОбъектов);
	
	ДанныеЗапроса = ПолучитьДанныеИзЗапроса(СтруктураДанных, Истина);	
	
	Если ДанныеЗапроса.Количество() > 0 Тогда 
			
		СтрокаДог = ДанныеЗапроса[0];
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаДог);
		
	КонецЕсли;
		
КонецПроцедуры // ОбновитьДанныеИзЗапросаДляСтроки()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
	
КонецПроцедуры // УправлениеЭлементамиФормы()

// Процедура устнавливает заголовок формы документа.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
&НаКлиенте 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()


#КонецОбласти

#КонецОбласти