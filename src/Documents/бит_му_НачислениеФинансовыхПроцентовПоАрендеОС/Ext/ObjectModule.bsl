#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// Хранит количество субконто му
Перем мКоличествоСубконтоМУ;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;       
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	// Проверка данных
	ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		// Получим курсы валют, неоходимые для выполнения пересчетов.
		ВидыКурсов = Новый Структура("Упр, Регл, МУ, Документ");
		СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура получает из регистра сумму начисленных процентов, объект, 
// контрагента и договор контрагента.
// 
// Параметры:
//  СтруктураДанных  		- Структура.
//  ФормироватьПустуюСтроку - Булево (необязательный).
//
// Возвращаемое значение:
//  Данные финансовых начислений.
// 
Функция ПолучитьДанныеПоФинансовымНачислениям(СтруктураДанных, ФормироватьПустуюСтроку = Ложь) Экспорт

	МассивРезультата = Новый Массив;
	СтрокаРезультата = Новый Структура("Объект, Сумма, СуммаВзаиморасчеты,  
												|Контрагент, ДоговорКонтрагента,
												|ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов,
												|СчетУчетаКраткосрочный");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	   , СтруктураДанных.Организация);
	Запрос.УстановитьПараметр("Дата"	  	   , СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("ДатаНачала"	   , НачалоМесяца(СтруктураДанных.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания"  , КонецМесяца(СтруктураДанных.Дата));
	Запрос.УстановитьПараметр("ПараметрСК"	   , ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетКраткосрочныхПроцентов);
	Запрос.УстановитьПараметр("ВидИсточника"   , Перечисления.бит_му_ВидыИсточниковЗадолженности.ОсновныеСредства);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", СтруктураДанных.ВалютаРеглУчета);
	Текст = "
	|ВЫБРАТЬ
	|	Обороты.Объект 													КАК Объект,
	|	Обороты.НачисленнаяСуммаФинансовыхПроцентовРеглОборот 			КАК СуммаРегл,
	|	Обороты.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот 	КАК СуммаВзаиморасчеты,
	|	Обороты.Контрагент 										КАК Контрагент,
	|	Обороты.ДоговорКонтрагента 								КАК ДоговорКонтрагента,
	|   Обороты.ДоговорКонтрагента.ВалютаВзаиморасчетов         КАК ВалютаВзаиморасчетов,
	|	ПараметрыКЗ_СК.ЗначениеПараметра 						КАК СчетУчетаКраткосрочный
	|ПОМЕСТИТЬ ТаблИнфо
	|ИЗ
	|	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			%УсловияПоОбъектам%
	|			Организация = &Организация
	|				И ВидИсточникаЗадолженности = &ВидИсточника) КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &ПараметрСК) КАК ПараметрыКЗ_СК
	|		ПО Обороты.ДоговорКонтрагента = ПараметрыКЗ_СК.ДоговорКонтрагента
    |
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблИнфо.Объект 				КАК Объект,
	|	ТаблИнфо.СуммаРегл,
	|	ТаблИнфо.СуммаВзаиморасчеты,
	|	ТаблИнфо.Контрагент,
	|	ТаблИнфо.ДоговорКонтрагента,
	|	ТаблИнфо.ВалютаВзаиморасчетов   КАК ВалютаВзаиморасчетов,
	|	КурсыВалют.Курс 				КАК КурсВзаиморасчетов,
	|	КурсыВалют.Кратность 			КАК КратностьВзаиморасчетов,
	|	ТаблИнфо.СчетУчетаКраткосрочный	
	|ИЗ
	|	ТаблИнфо КАК ТаблИнфо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&ДатаНачала,
	|				Валюта В (ВЫБРАТЬ ТИ.ВалютаВзаиморасчетов
	|						ИЗ ТаблИнфо КАК ТИ)) КАК КурсыВалют
	|		ПО ТаблИнфо.ВалютаВзаиморасчетов = КурсыВалют.Валюта
    |
	|УПОРЯДОЧИТЬ ПО
	|	Объект
	|";
	
	// Если в структуре данных указан массив объектов, по которым нужно получить информацию,
	// то добавляем условие в запросе.
	Если СтруктураДанных.Свойство("Объекты") Тогда
		Запрос.УстановитьПараметр("Объекты"		, СтруктураДанных.Объекты);
		Текст = СтрЗаменить(Текст, "%УсловияПоОбъектам%", "Объект В (&Объекты) И ");
	Иначе	
		Текст = СтрЗаменить(Текст, "%УсловияПоОбъектам%", "");
	КонецЕсли;
	Запрос.Текст = Текст;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() И ФормироватьПустуюСтроку Тогда
		
		// Пустая строка заполняется если данные нужно получить для определенной строки
		// но результат выполнения запроса пуст
		// Очищаем текущие данные.
		СтрокаРезультата.Объект 				 = Справочники[бит_ОбщегоНазначения.ПолучитьИмяСправочникаОсновныеСредства()].ПустаяСсылка();
		СтрокаРезультата.Контрагент 			 = Справочники.Контрагенты.ПустаяСсылка();
		СтрокаРезультата.ДоговорКонтрагента 	 = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		СтрокаРезультата.ВалютаВзаиморасчетов    = Справочники.Валюты.ПустаяСсылка();
		СтрокаРезультата.КурсВзаиморасчетов 	 = 0;
		СтрокаРезультата.КратностьВзаиморасчетов = 0;
		СтрокаРезультата.СчетУчетаКраткосрочный  = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
		СтрокаРезультата.Сумма 					 = 0;
		СтрокаРезультата.СуммаВзаиморасчеты	     = 0;
		МассивРезультата.Добавить(СтрокаРезультата);	
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаРезультата = Новый Структура("Объект, Сумма, СуммаВзаиморасчеты,  
												|Контрагент, ДоговорКонтрагента,
												|ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов,
												|СчетУчетаКраткосрочный");
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, Выборка);
			
			Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.СуммаВзаиморасчеты
													  ,Выборка.ВалютаВзаиморасчетов
													  ,СтруктураДанных.Валюта
													  ,Выборка.КурсВзаиморасчетов
													  ,СтруктураДанных.Курс
													  ,Выборка.КратностьВзаиморасчетов
													  ,СтруктураДанных.Кратность);										  
													  
			СтрокаРезультата.Сумма 				= Сумма;
						
			МассивРезультата.Добавить(СтрокаРезультата);

		КонецЦикла;
	
	КонецЕсли; 
	
	Возврат МассивРезультата;

	
КонецФункции // ПолучитьДанныеПоФинансовымНачислениям()

// Процедура заполняет табличную часть "ОсновныеСредства".
// 
// Параметры:
//  СтруктураДанных     - Структура.
//  СформироватьЗаного  - Булево.
//  ЭтоОбработкаПодбора - Булево.
// 
Процедура ЗаполнитьТчОсновныеСредства(СтруктураДанных = Неопределено, СформироватьЗаного = Ложь, ЭтоОбработкаПодбора = Ложь) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		СтруктураДанных = ПолучитьСтруктуруДанных();	
	КонецЕсли;
	
	ДанныеФинансовыхНачислений = ПолучитьДанныеПоФинансовымНачислениям(СтруктураДанных);	
	
	Если СформироватьЗаного Тогда
		
		ОсновныеСредства.Очистить();
		
		Для каждого СтрокаДанных Из ДанныеФинансовыхНачислений Цикл
			
			НоваяСтрокаОС = ОсновныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОС, СтрокаДанных);
			НоваяСтрокаОС.ОсновноеСредство = СтрокаДанных.Объект;
			
		КонецЦикла;	
		
	Иначе
	
		МассивОбъектов = Новый Массив;
		
		Для каждого СтрокаДанных Из  ДанныеФинансовыхНачислений Цикл
			
			Отбор = Новый Структура("ОсновноеСредство", СтрокаДанных.Объект); 
			НайденныеСтроки = ОсновныеСредства.НайтиСтроки(Отбор);	
		    Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденнаяСтрока = НайденныеСтроки[0]; 
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаДанных);
                НайденнаяСтрока.ОсновноеСредство = СтрокаДанных.Объект;
				
				МассивОбъектов.Добавить(СтрокаДанных.Объект);
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Если Не ЭтоОбработкаПодбора Тогда
			// Очистим объекты, по которым нет данных в регистре накопления.
			Для каждого СтрокаОС Из ОсновныеСредства Цикл
				НайденнаяСтрока = МассивОбъектов.Найти(СтрокаОС.ОсновноеСредство);
				Если НайденнаяСтрока = Неопределено Тогда
					СтрокаОС.Контрагент 			 = Справочники.Контрагенты.ПустаяСсылка();
					СтрокаОС.ДоговорКонтрагента 	 = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					СтрокаОС.СчетУчетаКраткосрочный  = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
					СтрокаОС.ВалютаВзаиморасчетов    = Справочники.Валюты.ПустаяСсылка();
					СтрокаОС.КурсВзаиморасчетов 	 = 0;
					СтрокаОС.КратностьВзаиморасчетов = 0;
					СтрокаОС.Сумма 					 = 0;
					СтрокаОС.СуммаВзаиморасчеты	     = 0;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьТчОсновныеСредства()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, Организация
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	// Получим валюту международного учета.
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	ИзменениеВалютыМодуль();
	
	// Заполняет табличную часть "ОсновныеСредства"
	СтруктураДанных = ПолучитьСтруктуруДанных();
	ЗаполнитьТчОсновныеСредства(СтруктураДанных, Истина);	

КонецПроцедуры // ЗаполнитьДокумент()

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	// Таблица основные средства
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = " 
	|ВЫБРАТЬ
	|	ФинансовыеНачисления.НомерСтроки,
	|	ФинансовыеНачисления.ОсновноеСредство,
	|	ФинансовыеНачисления.Контрагент,
	|	ФинансовыеНачисления.ДоговорКонтрагента,
	|	ФинансовыеНачисления.Сумма,
	|	ФинансовыеНачисления.СчетУчетаКраткосрочный,
	|	ФинансовыеНачисления.СчетРасходов,
	|	ФинансовыеНачисления.Субконто_1,
	|	ФинансовыеНачисления.Субконто_2,
	|	ФинансовыеНачисления.Субконто_3,
	|	ФинансовыеНачисления.Субконто_4,
	|   ФинансовыеНачисления.ВалютаВзаиморасчетов		КАК ВалютаВзаиморасчетов,
	|   ФинансовыеНачисления.СуммаВзаиморасчеты 		КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.бит_му_НачислениеФинансовыхПроцентовПоАрендеОС.ОсновныеСредства КАК ФинансовыеНачисления
	|ГДЕ
	|	ФинансовыеНачисления.Ссылка = &Ссылка
	|";
				   
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПоОсновнымСредствам = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ОсновныеСредства", ТаблицаПоОсновнымСредствам);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует структуру данных, 
// куда входит информация по валюте документа и валюта регламентированного учета,
// организация, дата документа.
// 
// Параметры:
//  Нет.
//  
// Возвращаемое значение:
//   Структура.
// 
Функция ПолучитьСтруктуруДанных()

	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Курс"     		, КурсДокумента);
	СтруктураДанных.Вставить("Кратность"		, КратностьДокумента);
	СтруктураДанных.Вставить("Валюта"   		, ВалютаДокумента);
	СтруктураДанных.Вставить("ВалютаРеглУчета"  , Константы.ВалютаРегламентированногоУчета.Получить());
	
    СтруктураДанных.Вставить("Дата"		  , Дата);
	СтруктураДанных.Вставить("Организация", Организация);
		
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьСтруктуруКурсов()

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Процедура проверяет данные.
// 
// Параметры:
//  Параметр1  - Тип_описание
//  Параметр2  - Тип_описание
// 
Процедура ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок)

	// Проверка дублирующих строк
	СтруктураНеповторяющихсяПолей = Новый Структура("ОсновноеСредство");
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект, 
																	"ОсновныеСредства", 
																	СтруктураНеповторяющихсяПолей, 
																	Отказ);

	// Проверка на заполненность счета расходов
	Если Не ЗначениеЗаполнено(СчетРасходов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СчетРасходов", ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ФинансовыеНачисления.НомерСтроки,
		|	ФинансовыеНачисления.ОсновноеСредство,
		|	ФинансовыеНачисления.СчетРасходов
		|ИЗ
		|	Документ.бит_му_НачислениеФинансовыхПроцентовПоАрендеОС.ОсновныеСредства КАК ФинансовыеНачисления
		|ГДЕ
		|	ФинансовыеНачисления.Ссылка 		= &Ссылка
		|	И ФинансовыеНачисления.СчетРасходов = &СчетРасходов
		|";
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщения = Нстр("ru = 'В строке номер %НомерСтроки% не указан счет расходов для основного средства %ОсновноеСредство%.'");
		    	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%"	 , Выборка.НомерСтроки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОсновноеСредство%", Выборка.ОсновноеСредство);
				бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				
			КонецЦикла;
			
			ТекстСообщения = Нстр("ru = 'Укажите счета расходов для названных строк или заполните значение счета по умолчанию на вкладке ""Счет расходов"".'");
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			
		КонецЕсли; 
 	
	КонецЕсли; 
	
КонецПроцедуры // ПроверкаДанных()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаДанных = СтруктураТаблиц.ОсновныеСредства;
	
	
	// Регистр сведений бит_му_СобытияОС ("НачислениеПроцентов").
  	НаборЗаписей   = Движения.бит_му_СобытияОС;
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Регистр сведений бит_му_СобытияОС 
		СтрокаЗапись = ТаблицаЗаписей.Добавить();
		СтрокаЗапись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
				
		// Регистр бухгалтерии бит_Дополнительный_2
		// ДТ СчетРасходов КТ СчетУчетаКраткосрочный Сумма.
		СформироватьДвиженияПоВзаиморасчетам(СтруктураШапкиДокумента, СтруктураКурсыВалют, СтрокаТаблицы);

	КонецЦикла; // По строкам табличной части
	
	// Регистр сведений бит_му_СобытияОС 
	ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация		  	  ,"Организация");
	ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата				  	  ,"Период");
	ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.бит_му_СобытияОС.НачислениеПроцентов,"Событие");
	ТаблицаЗаписей.ЗаполнитьЗначения(Истина                        				  	  ,"Активность");	
	НаборЗаписей.Загрузить(ТаблицаЗаписей); 	
 	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение по взаиморасчетам Дт СчетРасходов Кт Счет учета краткосрочный.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют 	- Структура.
//  СтруктураТаблиц			- Структура.
// 
Процедура СформироватьДвиженияПоВзаиморасчетам(СтруктураШапкиДокумента, СтруктураКурсыВалют, СтрокаТаблицы)
	
	Запись = Движения.бит_Дополнительный_2.Добавить();

	ДанныеДляСчетаДт = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов), СтрокаТаблицы, ЭтотОбъект);
		
	СтруктураПараметров = Новый Структура("Организация, Период, Валюта, СчетДт, СчетКт, Сумма, Содержание"
											   ,СтруктураШапкиДокумента.Организация
											   ,СтруктураШапкиДокумента.Дата
											   ,СтрокаТаблицы.ВалютаВзаиморасчетов
											   ,ДанныеДляСчетаДт.СчетРасходов
											   ,СтрокаТаблицы.СчетУчетаКраткосрочный
											   ,СтрокаТаблицы.СуммаВзаиморасчетов
											   ,"Начисление процентов по аренде ОС");
											   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
		
	// Заполнение аналитик	
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись, ДанныеДляСчетаДт, "Субконто_", , мКоличествоСубконтоМУ);
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"Контрагенты"         ,СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"ДоговорыКонтрагентов",СтрокаТаблицы.ДоговорКонтрагента);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"ОсновныеСредства"    ,СтрокаТаблицы.ОсновноеСредство);
	
	// Валютные пересчеты
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("СуммаВзаиморасчеты");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтрокаТаблицы
													,Запись
													,МассивИмен
													,СтруктураКурсыВалют
													,СтруктураКурсыВалют.Документ
													,МассивИсключений);
												
												
КонецПроцедуры // СформироватьДвижениеПоВзаиморасчетамДЕМО()

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
