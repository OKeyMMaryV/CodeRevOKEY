
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	// Кешируем количество субконто
	фКоличествоСубконтоМУ = 4;
		 
	ОформитьСубконто();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	УстановитьПараметрыВыбораДляСчетов();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	// Установка параметров выбора для Договоров.
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ОсновныеСредстваДоговорКонтрагента, "Объект.ОсновныеСредства.Контрагент");

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
    мКэшРеквизитовФормы.Вставить("Организация");
	мКэшРеквизитовФормы.Вставить("Дата");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) = Тип("Массив") Тогда
		
		Если ИмяСобытия = "Добавить" Тогда
					
			ОбработкаПодбора(Объект.ОсновныеСредства, Параметр);
						
		ИначеЕсли ИмяСобытия = "Загрузить" Тогда

			Объект.ОсновныеСредства.Очистить();
			ОбработкаПодбора(Объект.ОсновныеСредства, Параметр);
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_НачислениеФинансовыхПроцентовПоАрендеОС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.ОсновныеСредства.Итог("Сумма");
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	ВосстановитьКоличествоДоступныхСубконто(); 
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеДатыКлиент();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
								
	СтруктураДанных = Неопределено;
	
	Если мКэшРеквизитовФормы.Организация <> Объект.Организация 
		И Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект, ВалютаДокументаЗаполнена);
		ТекстВопроса = НСтр("ru = ' Данные по финансовым начислениям для табличной части 
								  |""Основные средства"" будут перезаполнены. Продолжить?'");
								  
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ИзменениеОрганизацииСервер(СтруктураДанных);
		
		Если Не ВалютаДокументаЗаполнена
			И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			
			ДобавитьВКэш("ВалютаДокумента");
			ДобавитьВКэш("КратностьДокумента");
			ДобавитьВКэш("КурсДокумента");
			
		КонецЕсли;
		
		ДобавитьВКэш("Организация");
		
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО();
		
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураДанных = Неопределено;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтруктураДанных = ПолучитьСтруктуруДанных();
	Иначе
		Объект.Организация = мКэшРеквизитовФормы.Организация;
		Возврат;
	КонецЕсли;
	
	ИзменениеОрганизацииСервер(СтруктураДанных);
	
	ВалютаДокументаЗаполнена = ДополнительныеПараметры;
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
	ДобавитьВКэш("Организация");
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();

КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры // ВалютаДокументаПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода "СчетУчета".
// 
&НаКлиенте
Процедура СчетРасходовМУПриИзменении(Элемент)
	
	ИзменениеСчетаМУ();
	
КонецПроцедуры // СчетРасходовМУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоМУ_<i>".
// 
&НаКлиенте
Процедура СубконтоМУПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконтоМУ(Объект,ЗначениеСубконто);
	
КонецПроцедуры // СубконтоМУПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоМУ_<i>".
// 
&НаКлиенте
Процедура СубконтоМУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконтоМУ(Элемент,СтандартнаяОбработка,Объект,ЗначениеСубконто);
   
КонецПроцедуры // СубконтоМУНачалоВыбора()

&НаКлиенте
Процедура СубконтоРасходыАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
													 , Параметры
													 , Объект
													 , Объект
													 , "Субконто_"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);

КонецПроцедуры // СубконтоРасходыАвтоПодбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеСредства

// Процедура - обработчик события "ПередНачаломДобавления" 
// табличного поля "ОсновныеСредства".
// 
&НаКлиенте
Процедура ОсновныеСредстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
	    Отказ = Истина;
		ДанныеКопирования = Элемент.ТекущиеДанные;
		НоваяСтрока = Объект.ОсновныеСредства.Добавить();
		НоваяСтрока.СчетУчетаКраткосрочный = ДанныеКопирования.СчетУчетаКраткосрочный;
		НоваяСтрока.СчетРасходов		   = ДанныеКопирования.СчетРасходов;
	    НоваяСтрока.Субконто_1 = ДанныеКопирования.Субконто_1;
		НоваяСтрока.Субконто_2 = ДанныеКопирования.Субконто_2;
		НоваяСтрока.Субконто_3 = ДанныеКопирования.Субконто_3;
		НоваяСтрока.Субконто_4 = ДанныеКопирования.Субконто_4;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеСредстваПередНачаломДобавления()

&НаКлиенте
Процедура ОсновныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ОсновныеСредстваДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

// Процедура - обработчик события "Выбор" табличного поля "ОсновныеСредства".
// 
&НаКлиенте
Процедура ОсновныеСредстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ИмяРеквизита = СтрЗаменить(Поле.Имя, "ОсновныеСредства", "");
	
	// По событию выбор открываем значения в полях, для которых установлен только просмотр.
	Если Поле.ТолькоПросмотр Тогда
		
		ТекЗначение = ТекущаяСтрока[ИмяРеквизита];
		
		Если ЗначениеЗаполнено(ТекЗначение) Тогда
			
			ПоказатьЗначение(,ТекЗначение);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетРасходов" 
// табличного поля "ОсновныеСредства".
// 
&НаКлиенте
Процедура ОсновныеСредстваСчетРасходовПриИзменении(Элемент)
	
	Идентификатор     = Элементы.ОсновныеСредства.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаТабличноеПолеМУ(Идентификатор);
	
КонецПроцедуры // ОсновныеСредстваСчетРасходовПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Субконто" 
// табличного поля "ОсновныеСредства".
// 
&НаКлиенте
Процедура ОсновныеСредстваСубконтоПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ОсновныеСредства", Элемент.Имя);		
	ИзменениеСубконтоМУ(Элементы.ОсновныеСредства.ТекущиеДанные, ЗначениеСубконто);
	
КонецПроцедуры // ОсновныеСредстваСубконтоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Субконто" 
// табличного поля "ОсновныеСредства".
// 
&НаКлиенте
Процедура ОсновныеСредстваСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока     = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ОсновныеСредства", Элемент.Имя);		
	НачалоВыбораСубконтоМУ(Элемент, СтандартнаяОбработка, ТекущаяСтрока, ЗначениеСубконто);
	
КонецПроцедуры // ОсновныеСредстваСубконтоНачалоВыбора()

&НаКлиенте
Процедура ОсновныеСредстваСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ОсновныеСредства", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "Субконто_"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ОсновныеСредстваСубконтоАвтоПодбор()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "ОсновноеСредство" 
// табличного поля "ОсновныеСредства".
// 
&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОС = ТекущийЭлемент.ТекущиеДанные.ОсновноеСредство;
	
	Если ОС <> ВыбранноеЗначение Тогда
		
		Если ЭтоПовторныйВводОс(ВыбранноеЗначение) Тогда
			
			СтандартнаяОбработка = Ложь;
			Возврат;
			
		КонецЕсли; 
		
	КонецЕсли;
	  
КонецПроцедуры // ОсновныеСредстваОсновноеСредствоОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ОсновноеСредство" 
// табличного поля "ОсновныеСредства".
// 
&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)
	
	ОбновитьДанныеПоФинансовымНачислениямИзРегистра();		
	
КонецПроцедуры // ОсновныеСредстваОсновноеСредствоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов" 
// табличного поля "ОсновныеСредства".
// 
&НаКлиенте
Процедура ОсновныеСредстваКурсВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	СтруктураИсточник = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента", 
										фКэшЗначений.ПустаяВалюта,
										ТекущиеДанные.КурсВзаиморасчетов,
										ТекущиеДанные.КратностьВзаиморасчетов);

	СтрутураРезультата = Новый Структура("Сумма", ТекущиеДанные.СуммаВзаиморасчеты);
	ПересчитатьСуммуПоВалюте(СтрутураРезультата.Сумма ,СтруктураИсточник, мКэшРеквизитовФормы);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрутураРезультата);
			
КонецПроцедуры // ОсновныеСредстваКурсВзаиморасчетовПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаВзаиморасчеты" 
// табличного поля "ОсновныеСредства".
// 
&НаКлиенте
Процедура ОсновныеСредстваСуммаВзаиморасчетыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	СтруктураИсточник = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента", 
										фКэшЗначений.ПустаяВалюта,
										ТекущиеДанные.КурсВзаиморасчетов,
										ТекущиеДанные.КратностьВзаиморасчетов);

	СтрутураРезультата = Новый Структура("Сумма", ТекущиеДанные.СуммаВзаиморасчеты);
	ПересчитатьСуммуПоВалюте(СтрутураРезультата.Сумма ,СтруктураИсточник, мКэшРеквизитовФормы);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрутураРезультата);
	
КонецПроцедуры // ОсновныеСредстваСуммаПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

// Процедура - обработчик события "Нажатие" кнопки "Подбор" 
// коммандной панели "ОсновныеСредстваКоманднаяПанель".
// 
&НаКлиенте
Процедура Подбор(Команда)
	
	КомандаТекст      = "НачислениеПроцентов";
	
	ИмяТабличнойЧасти = "ОсновныеСредства";
    ПредставлениеДок = "Начисление финансовых процентов по аренде ОС (МСФО)";
	ПараметрЗаголовок = "Подбор ВНА в документ " + ПредставлениеДок + " № " + Объект.Номер + " (" + ИмяТабличнойЧасти + ")";
	
	// Параметры запросов.
	ПараметрыФормы = Новый Структура("Команда, Организация, ДатаНачала, ДатаОкончания, Заголовок"
									, КомандаТекст
									, Объект.Организация
									, НачалоМесяца(Объект.Дата)
									, КонецМесяца(Объект.Дата)
									, ПараметрЗаголовок);
 	
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма.ФормаУправляемая", ПараметрыФормы, Элементы.ОсновныеСредства);
  	
КонецПроцедуры // Подбор()

// Процедура - обработчик события "Нажатие" кнопки "СформироватьТабличнуюЧасть" 
// коммандной панели "ОсновныеСредстваКоманднаяПанель".
// 
&НаКлиенте
Процедура СформироватьТабличнуюЧасть(Команда)
	
	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СформироватьТабличнуюЧастьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть «Основные средства» будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	
	Иначе
		
		ОбновитьДанныеПоФинансовымНачислениямИзРегистра(Ложь, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТабличнуюЧасть()

// Процедура - завершение команды формирования табличной части.
// 
&НаКлиенте
Процедура СформироватьТабличнуюЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеПоФинансовымНачислениямИзРегистра(Ложь, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ЗаполнитьТабличнуюЧасть" 
// коммандной панели "ОсновныеСредстваКоманднаяПанель".
// 
&НаКлиенте
Процедура ЗаполнитьТабличнуюЧасть(Команда)
	
	ОбновитьДанныеПоФинансовымНачислениямИзРегистра(Ложь);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Процедура - обработчик события "Нажатие" кнопки "ЗаполнитьПоТекущейСтроке" 
// коммандной панели "ОсновныеСредстваКоманднаяПанель".
// 
&НаКлиенте
Процедура ЗаполнитьПоТекущейСтроке(Команда)
	
	ОбновитьДанныеПоФинансовымНачислениямИзРегистра();
	
КонецПроцедуры // ЗаполнитьПоТекущейСтроке()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
	
КонецПроцедуры // УправлениеЭлементамиФормы()
											   
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	// Валюта регламентированного учета
	фКэшЗначений.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	фКэшЗначений.Вставить("ПустаяВалюта"   , Справочники.Валюты.ПустаяСсылка());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
    Для каждого СтрокаТаблицы Из Объект.ОсновныеСредства Цикл
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетРасходов);
		СтрокаТаблицы.КоличествоДоступныхСубконтоМУ = СвСч.КоличествоСубконто;
	КонецЦикла;
	
КонецПроцедуры // ВосстановитьКоличествоДоступныхСубконто()

&НаСервере
Процедура ПересчитатьСуммуПоВалюте(Сумма, СтруктураИсточник, СтруктураПриемник = Неопределено)

	Если СтруктураПриемник = Неопределено Тогда
		СтруктураПриемник = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента",
											Объект.ВалютаДокумента,
											Объект.КурсДокумента,
											Объект.КратностьДокумента);	
	КонецЕсли; 
	
	Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма
															 ,СтруктураИсточник.ВалютаДокумента
															 ,СтруктураПриемник.ВалютаДокумента
															 ,СтруктураИсточник.КурсДокумента
															 ,СтруктураПриемник.КурсДокумента
															 ,СтруктураИсточник.КратностьДокумента
															 ,СтруктураПриемник.КратностьДокумента);
                                                                                
КонецПроцедуры // ПересчитатьСуммуПоВалюте()
														 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

&НаСервере
Процедура ИзменениеВалютыСервер(КэшРеквизитовФормы = Неопределено)
	                 
	ПересчитатьКурсКратность();
	
	Если КэшРеквизитовФормы <> Неопределено Тогда
		
		// Выполним пересчет сумм строк табличной части.
		Для Каждого СтрокаТаблицы Из Объект.ОсновныеСредства Цикл			
			ПересчитатьСуммуПоВалюте(СтрокаТаблицы.Сумма, КэшРеквизитовФормы);						
		КонецЦикла;
  	
	КонецЕсли;
	  
КонецПроцедуры // ИзменениеВалютыСервер()

&НаСервере
Процедура ПересчитатьКурсКратность()

	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	ВосстановитьКоличествоДоступныхСубконто();

КонецПроцедуры // ПересчитатьКурсКратность()

&НаСервере
Процедура ИзменениеОрганизацииСервер(СтруктураДанных)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
		Если СтруктураДанных <> Неопределено Тогда
			СтруктураДанных.Вставить("Курс"     		, Объект.КурсДокумента);
			СтруктураДанных.Вставить("Кратность"		, Объект.КратностьДокумента);
			СтруктураДанных.Вставить("Валюта"   		, Объект.ВалютаДокумента);
		КонецЕсли;

	КонецЕсли;
	
	Если СтруктураДанных <> Неопределено Тогда
		
		ОбновитьДанныеПоФинансовымНачислениямИзРегистраДляТаблицы(СтруктураДанных);
			
	КонецЕсли;

КонецПроцедуры // ИзменениеОрганизацииСервер()

&НаСервере
Процедура ИзменениеСчетаМУ()

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект,НастройкиСубконто,"Субконто_");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"Субконто_");

КонецПроцедуры // ИзменениеСчетаМУ()

&НаСервере
Процедура ИзменениеСчетаТабличноеПолеМУ(Идентификатор)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетРасходов, фКоличествоСубконтоМУ);									  
    бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "Субконто_");

	СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетРасходов);
    
    ТекущаяСтрока.КоличествоДоступныхСубконтоМУ = СвСч.КоличествоСубконто;
	    	
КонецПроцедуры // ИзменениеСчетаВТабличномПолеМУ()

&НаСервере
Процедура ИзменениеКонтрагента(ИдСтроки)

	ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(ТекущиеДанные.ДоговорКонтрагента
														  ,ТекущиеДанные.Контрагент
														  ,Объект.Организация
														  ,// ФСписокВидовДоговоров
														  ,// СтруктураДополнительныхПараметров
														  );
														  
	// Могли поменять договор.
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);														  

	СписокИдентификаторов = Новый Массив;
	СписокИдентификаторов.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	
	ЗаполнитьКурсВзаиморасчетов(ТекущиеДанные.ПолучитьИдентификатор());		
	
КонецПроцедуры // ИзменениеКонтрагента()

&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);
	КонецЕсли;

КонецПроцедуры // ИзменениеДоговораСервер()

&НаСервере         
Процедура ЗаполнитьКурсВзаиморасчетов(Идентификатор)

	ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВалютаВзаиморасчетов = ТекущиеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаВзаиморасчетов, Объект.Дата);
	
	ТекущиеДанные.КурсВзаиморасчетов 		= СтрКурса.Курс;
	ТекущиеДанные.КратностьВзаиморасчетов 	= СтрКурса.Кратность;

КонецПроцедуры // ЗаполнитьКурсВзаиморасчетов()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСДаннымиПоФинансовымНачислениямНаКлиенте

&НаКлиенте
Функция ПолучитьСтруктуруДанных()

	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Курс"     		, Объект.КурсДокумента);
	СтруктураДанных.Вставить("Кратность"		, Объект.КратностьДокумента);
	СтруктураДанных.Вставить("Валюта"   		, Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("ВалютаРеглУчета"  , фКэшЗначений.ВалютаРеглУчета);
	
    СтруктураДанных.Вставить("Дата"		  , Объект.Дата);
	СтруктураДанных.Вставить("Организация", Объект.Организация);
		
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьСтруктуруКурсов()

&НаКлиенте
Процедура ОбновитьДанныеПоФинансовымНачислениямИзРегистра(ТолькоПоОднойСтроке = Истина, СформироватьЗаного = Ложь, МассивОбъектов = Неопределено)
 	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	Если МассивОбъектов <> Неопределено Тогда
		СтруктураДанных.Вставить("Объекты", МассивОбъектов);	
	КонецЕсли;
	
	Если ТолькоПоОднойСтроке Тогда
		
		ОбновитьДанныеПоФинансовымНачислениямИзРегистраДляСтроки(СтруктураДанных);
		
	Иначе
		
		ОбновитьДанныеПоФинансовымНачислениямИзРегистраДляТаблицы(СтруктураДанных, СформироватьЗаного);
		
	КонецЕсли; 
		
КонецПроцедуры // ОбновитьДанныеПоФинансовымНачислениямИзРегистра()

&НаКлиенте
Процедура ОбновитьДанныеПоФинансовымНачислениямИзРегистраДляСтроки(СтруктураДанных)
 	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;	
                                                           	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ТекущиеДанные.ОсновноеСредство);
	СтруктураДанных.Вставить("Объекты", МассивОбъектов);
	
	ДанныеФинансовыхНачислений = ПолучитьДанныеПоФинансовымНачислениям(СтруктураДанных, Истина);	
	
	Если ДанныеФинансовыхНачислений.Количество() > 0 Тогда 
			
		СтрокаОС = ДанныеФинансовыхНачислений[0];
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаОС);
		
	КонецЕсли;
		
КонецПроцедуры // ОбновитьДанныеПоФинансовымНачислениямИзРегистраДляСтроки()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетУчетаКраткосрочный);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетРасходов);
	МассивЭлементов.Добавить(Элементы.СчетРасходов);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяТабличногоПоля, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяТабличногоПоля = "ОсновныеСредства";
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента, ИмяТабличногоПоля, "");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура ИзменениеСубконтоМУ(Контейнер, ЗначениеСубконто)

	  СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "Субконто_" , фКоличествоСубконтоМУ);
	  бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "Субконто_", ЗначениеСубконто  , фКоличествоСубконтоМУ);
      бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "Субконто_",""  , фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

&НаКлиенте
Процедура НачалоВыбораСубконтоМУ(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"Субконто_"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ТаблицаОбъекта = Объект.ОсновныеСредства;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И (Не ТаблицаОбъекта.Итог("Сумма") = 0) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыКлиентЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КурсДокумента");
		ДобавитьВКэш("КратностьДокумента");
		
	КонецЕсли; 
			
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиентЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИзменениеВалютыСервер(мКэшРеквизитовФормы);	
	Иначе	
		ИзменениеВалютыСервер();
	КонецЕсли;
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КурсДокумента");
	ДобавитьВКэш("КратностьДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()

&НаКлиенте
Процедура ИзменениеДатыКлиент()
	
	Если Не мКэшРеквизитовФормы.Дата = Объект.Дата Тогда 		
		ПересчитатьКурсКратность(); 		 				
	КонецЕсли; 
	
	ДобавитьВКэш("Дата");
	ДобавитьВКэш("КурсДокумента");
	ДобавитьВКэш("КратностьДокумента");
		
КонецПроцедуры // ИзменениеДатыКлиент()

&НаКлиенте
Функция ЭтоПовторныйВводОс(ЗагружаемоеОС)

	ЭтоПовторныйВводОс = Ложь;
	
	Отбор = Новый Структура("ОсновноеСредство", ЗагружаемоеОС);
	НайденныеСтроки = Объект.ОсновныеСредства.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекстСообщения = Нстр("ru = 'Ошибка повторного ввода. Основное средство %ОС% уже указанно в таблице.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОС%", ЗагружаемоеОС);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		ЭтоПовторныйВводОс = Истина;
		
	КонецЕсли; 
 
	Возврат ЭтоПовторныйВводОс;
	
КонецФункции // ПроверитьПовторныйВводОС()

&НаКлиенте
Процедура ОбработкаПодбора(ТабЧасть, МассивПодбора)

	МассивОбъектов = Новый Массив;
	
	
	Для каждого ЭлементМассива Из МассивПодбора Цикл
		
		ЗагружаемоеОС = ЭлементМассива.ОсновноеСредство;
						
		Если ЭтоПовторныйВводОс(ЗагружаемоеОС) Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		НоваяСтрока = ТабЧасть.Добавить(); 	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
		НоваяСтрока.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма
													  ,фКэшЗначений.ВалютаРеглУчета
													  ,Объект.ВалютаДокумента
													  ,1
													  ,Объект.КурсДокумента
													  ,1
													  ,Объект.КратностьДокумента);
        
		МассивОбъектов.Добавить(ЗагружаемоеОС);
		
	КонецЦикла;	
	
	ОбновитьДанныеПоФинансовымНачислениямИзРегистра(Ложь, Ложь, МассивОбъектов);

КонецПроцедуры // ОбработкаПодбора()

&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(фСписокВидовДоговоров.ВыгрузитьЗначения()));
		КонецЕсли;
		Если фСписокТиповДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("бит_ТипДоговора", фСписокТиповДоговоров);
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

&НаКлиенте
Процедура ОсновныеСредстваКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКонтрагента(ТекущиеДанные.ПолучитьИдентификатор());
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ОсновныеСредстваДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
	ЗаполнитьКурсВзаиморасчетов(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаСервере 
Процедура ОформитьСубконто()
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	 бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетРасходов", "Субконто_", фКоличествоСубконтоМУ);
	 бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	 											  ,"СчетРасходов"
	    										   ,"Субконто_"
	    										   ,фКоличествоСубконтоМУ
	    										   ,"ОсновныеСредства"
	    										   ,"Элементы.ОсновныеСредства.ТекущиеДанные");
	 
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	ВосстановитьКоличествоДоступныхСубконто(); 
	
	УсловноеОформление.Элементы.Очистить();

	// Настройки оформления для полей субконто
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"ОсновныеСредства"
	                                                           ,"Субконто_"
															   ,"КоличествоДоступныхСубконтоМУ"
															   ,фКоличествоСубконтоМУ);
	
	
	// Установить видимость реквизитов и заголовков колонок.	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "Субконто_");
	
КонецПроцедуры // ОформитьСубконто()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСДаннымиПоФинансовымНачислениямНаСервере

// Процедура получает из регистра сумму начисленных процентов, объект, 
// контрагента и договор контрагента.
// 
// Параметры:
//  СтруктураДанных  - Структура
//  ДляТекущихДанных - Булево (необязательный).
//
// Возвращаемое значение:
//  Данные финансовых начислений.
// 
&НаСервере
Функция ПолучитьДанныеПоФинансовымНачислениям(СтруктураДанных, ФормироватьПустуюСтроку = Ложь)
	
	ДокОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДанныеФинансовыхНачислений = ДокОбъект.ПолучитьДанныеПоФинансовымНачислениям(СтруктураДанных, ФормироватьПустуюСтроку); 
	
	Возврат ДанныеФинансовыхНачислений;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеПоФинансовымНачислениямИзРегистраДляТаблицы(СтруктураДанных,  СформироватьЗаного = Ложь)
	
	ЭтоОбработкаПодбора = СтруктураДанных.Свойство("Объекты");
	
	Если Не СформироватьЗаного И Не ЭтоОбработкаПодбора Тогда
		ТаблицаОбъектов = Объект.ОсновныеСредства.Выгрузить(, "ОсновноеСредство");
		МассивОбъектов  = ТаблицаОбъектов.ВыгрузитьКолонку("ОсновноеСредство");
		СтруктураДанных.Вставить("Объекты", МассивОбъектов);
	КонецЕсли; 
	
	ДокОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокОбъект.ЗаполнитьТчОсновныеСредства(СтруктураДанных,  СформироватьЗаного, ЭтоОбработкаПодбора);
	ЗначениеВДанныеФормы(ДокОбъект, Объект);
	
	ВосстановитьКоличествоДоступныхСубконто();
		
КонецПроцедуры // ОбновитьДанныеПоФинансовымНачислениямИзРегистраДляТаблицы()

#КонецОбласти

#КонецОбласти
