
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

&НаКлиенте
Перем мБуфер; // Служит для передачи данных копирования.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокОбъект, МассивТипов, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	УстановитьУсловноеОформление();
	
	ПериодПланирования.ДатаНачала = Объект.ДатаНачалаПланирования;
	ПериодПланирования.ДатаОкончания = Объект.ДатаОкончанияПланирования;
	
	// Определим ид БДДС для установки в новой строке.
	ТабБДДС   = Объект.БДДС.Выгрузить();
	ТекИдБДДС = бит_Бюджетирование.ОпределитьТекущийИД(ТабБДДС,"ИД");	
		
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	ЗаполнитьКэшЗначений();
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ДокОб = Параметры.ЗначениеКопирования.ПолучитьОбъект();
	Иначе	
		ДокОб = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.НастройкаФормы) Тогда
		СтрНастроек = Справочники.бит_ЭлементыДанных.ПолучитьНастройкиПостроителя(Объект.НастройкаФормы);
	Иначе	
		СтрНастроек = ДокОбъект.ПолучитьНастройкиПостроителя();	
	КонецЕсли; 
	
	ТекстЗапроса = Объект.НастройкаФормы.ТекстЗапроса;
	
	АдресКомпоновкиСтруктура = Документы.бит_АктуализацияБюджета.ИнициализироватьКомпоновщикСтруктура(ТекстЗапроса, КомпоновщикСтруктура, Новый УникальныйИдентификатор);
	ВосстановитьОтбор(СтрНастроек);
	
	// Инициализация компоновщика для получения данных.
	ИнициализироватьКомпоновщикДанные(ДокОб);
	
	// Установка сохраненного отбора компоновщика данные.
	Если СтрНастроек.Свойство("НастройкиКомпоновщикаДанные") 
		И ТипЗнч(СтрНастроек.НастройкиКомпоновщикаДанные) = Тип("НастройкиКомпоновкиДанных")  Тогда
		
		Если СтрНастроек.НастройкиКомпоновщикаДанные.Отбор.Элементы.Количество() > 0 Тогда
			КомпоновщикДанные.ЗагрузитьНастройки(СтрНастроек.НастройкиКомпоновщикаДанные);
		КонецЕсли; 
	КонецЕсли; 
	
	// Восстановление дерева из хранилища
	ТабДокДанные = ДокОб.ПолучитьДерево();
	фЗависимостиЯчеек = бит_БюджетированиеКлиентСервер.ПолучитьЗависимостиЯчеек(ТабДокДанные);	
	
	МассивСтатей = ИзвлечьСтатьиИзДерева(ТабДокДанные);
	фКэшЗначений.НастройкиСтатей = Новый Соответствие;
    бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(МассивСтатей, фКэшЗначений.НастройкиСтатей);	
	
	// Элементы управления для измерений несуществующих в смежном решении	
	// создаются программно для унификации кода.
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправленияВкладкиОсновные(Элементы, Элементы.ГруппаДопАналитики);
	
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "БДДС_Редактирование", "БДДС", 
		Элементы.БДДС_РедактированиеКоличество);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "БДДС", "БДДС", 
		Элементы.БДДСКоличество);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "ЗависимыеОбороты", "ЗависимыеОбороты",
		Элементы.ЗависимыеОборотыКоличество);

	// Настроим отображение полей доп. аналитик в форме.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ЭтотОбъект, 
		фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);	
	
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"БДДС_Редактирование", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"БДДС", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"ЗависимыеОбороты", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	
	// Установка оформления таблиц БДДС и ЗависимыеОбороты.
	ИменаТаблиц = Новый Массив;  
	ИменаТаблиц.Добавить("БДДС");
	ИменаТаблиц.Добавить("БДДС_Редактирование");
	ОФормитьТаблицу("БДДС", ИменаТаблиц, МассивСтатей);	
	
	УправлениеФормой(ЭтотОбъект);
	
	// Установка видимости/доступности элементов управления.
	УстановитьВидимость();

	// Установка видимости колонок табличных полей БДДС_Редактирование И ЗависимыеОбороты_Редактирование.
	УправлениеВидимостьюКолонокТаблиц();
	
	// Установка текущей страницы
	Если ТабДокДанные.Области.Количество() > 0 Тогда
		 Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаДанныеБюджета;
	КонецЕсли; 	
	
	// Проверка наличия зафиксированных бюджетных данных.
	Если Объект.Проведен Тогда
		бит_Бюджетирование.ПроверитьФиксациюВФорме(ЭтотОбъект, Объект.Ссылка, Истина);
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический;
		УстановитьСостояниеДокумента();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("НастройкаФормы");
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("Сценарий");
	мКэшРеквизитовФормы.Вставить("СценарийЭталон");
	мКэшРеквизитовФормы.Вставить("СпособАктуализации");
	мКэшРеквизитовФормы.Вставить("ДатаНачалаПланирования");
	мКэшРеквизитовФормы.Вставить("ДатаАктуализации");
	мКэшРеквизитовФормы.Вставить("РежимЗависимыхОборотов");
	
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УстановитьНастройкиДоступностиЭлементов();
	ИначеЕсли ИмяСобытия = "ВыбратьПериодЗавершение" И Источник = УникальныйИдентификатор Тогда	
		РедактированиеПериода(Параметр.Результат, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранение дерева данных
	ТекущийОбъект.СохранитьДерево(ТабДокДанные);
	
	// Сохранение отбора построителя
	СтруктураНастройки = Новый Структура;
	
	СтруктураНастройки.Вставить("НастройкиКомпоновщика", КомпоновщикСтруктура.ПолучитьНастройки());
	СтруктураНастройки.Вставить("НастройкиКомпоновщикаДанные", КомпоновщикДанные.ПолучитьНастройки());
	
	ТекущийОбъект.СохранитьНастройкиПостроителя(СтруктураНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	УстановитьСостояниеДокумента();
	
	УстановитьВидимость();		
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Состояние кнопки Отбор
	Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Пометка = фУстанавливатьОтборЗависимых;
	УстановитьКартинкуКнопкиОтбор();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастройкаФормыПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("НастройкаФормыПриИзмененииЗавершение", ЭтотОбъект); 
	ЗадатьВопросОбОчисткеДанных(Оповещение);
			
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура НастройкаФормыПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИзменениеНастройкиФормы(мКэшРеквизитовФормы.НастройкаФормы);	
		ДобавитьВКэш("НастройкаФормы");
	Иначе
		ИзвлечьИзКэша("НастройкаФормы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийЭталонПриИзменении(Элемент)
		
	Если СценарииМожноИспользоватьВместе() Тогда
		ПриИзмененииПлановыхСценариев();
	Иначе
		ИзвлечьИзКэшаПлановыеСценарии();
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	Если СценарииМожноИспользоватьВместе() Тогда
		ПриИзмененииПлановыхСценариев();
	Иначе	
		ИзвлечьИзКэшаПлановыеСценарии();
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПланированияПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДатаНачалаПланированияПриИзмененииЗавершение", ЭтотОбъект); 
	ЗадатьВопросОбОчисткеДанных(Оповещение);
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ДатаНачалаПланированияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ДатаНачалаПланированияИзменение();
		ПериодПланирования.ДатаНачала = Объект.ДатаНачалаПланирования;	
		ДобавитьВКэш("ДатаНачалаПланирования");
	Иначе
		ИзвлечьИзКэша("ДатаНачалаПланирования");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПланированияПриИзменении(Элемент)
	
	ПериодПланирования.ДатаОкончания = Объект.ДатаОкончанияПланирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаАктуализацииПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДатаАктуализацииПриИзмененииЗавершение", ЭтотОбъект); 
	ЗадатьВопросОбОчисткеДанных(Оповещение);
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ДатаАктуализацииПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДатаАктуализацииИзменение();	
		ДобавитьВКэш("ДатаАктуализации");
	Иначе
		ИзвлечьИзКэша("ДатаАктуализации");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаАктуализацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДопПараметры = Новый Структура("Направление", Направление);
	Оповещение = Новый ОписаниеОповещения("ДатаАктуализацииРегулированиеЗавершение", ЭтотОбъект, ДопПараметры); 
	ЗадатьВопросОбОчисткеДанных(Оповещение);
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ДатаАктуализацииРегулированиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	               
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДатаАктуализацииРегулированиеСервер(ДополнительныеПараметры.Направление);	
		ДобавитьВКэш("ДатаАктуализации");
	Иначе
		ИзвлечьИзКэша("ДатаАктуализации");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Оповещение  = Новый ОписаниеОповещения("ВалютаДокументаПриИзмененииЗавершение", ЭтотОбъект);
	Если Объект.БДДС.Количество() > 0 Тогда
		ТекстВопроса =  НСтр("ru = 'Изменена валюта документа. Пересчитать суммы в документе?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ВалютаДокументаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда			
		ИзменениеВалюты(Истина, мКэшРеквизитовФормы["ВалютаДокумента"]);
		ДобавитьВКэш("ВалютаДокумента");			
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда  			
		ИзменениеВалюты(Ложь, мКэшРеквизитовФормы["ВалютаДокумента"]);
		ДобавитьВКэш("ВалютаДокумента");		 
	Иначе	 
		ИзвлечьИзКэша("ВалютаДокумента");
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура СпособАктуализацииПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("СпособАктуализацииПриИзмененииЗавершение", ЭтотОбъект); 
	ЗадатьВопросОбОчисткеДанных(Оповещение);
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура СпособАктуализацииПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СпособАктуализацииИзменение();	
		ДобавитьВКэш("СпособАктуализации");
	Иначе
		ИзвлечьИзКэша("СпособАктуализации");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимЗависимыхОборотовПриИзменении(Элемент)
	
	ТекущийРежимЗависимыхОборотов = мКэшРеквизитовФормы.РежимЗависимыхОборотов;
	Если ТекущийРежимЗависимыхОборотов = Объект.РежимЗависимыхОборотов Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущийРежимЗависимыхОборотов", ТекущийРежимЗависимыхОборотов);
	Оповещение = Новый ОписаниеОповещения("РежимЗависимыхОборотовПриИзмененииЗавершение", ЭтотОбъект, ДопПараметры);
	Если Объект.ЗависимыеОбороты.Количество() > 0 Тогда
		ТекстВопроса = Нстр("ru = 'Зависимые обороты будут очищены. Продолжить?'"); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура РежимЗависимыхОборотовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда 			
		Объект.ЗависимыеОбороты.Очистить();  
		УправлениеФормой(ЭтотОбъект);
	Иначе
		РежимЗависимыхОборотов = ДополнительныеПараметры.ТекущийРежимЗависимыхОборотов;
	КонецЕсли;
	
	ДобавитьВКэш("РежимЗависимыхОборотов");

КонецПроцедуры

&НаКлиенте
Процедура РежимЗависимыхОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.Автоматический"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.НеФормировать"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОборотыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбСтрока = Объект.ЗависимыеОбороты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "ЗависимыеОборотыКомментарийРасчета" 
		  И НЕ ВыбСтрока = Неопределено 
		  И НЕ ПустаяСтрока(ВыбСтрока.КомментарийРасчета) Тогда
		
		СтандартнаяОбработка = Ложь;		
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КомментарийРасчета", ВыбСтрока.КомментарийРасчета);
		ОткрытьФорму("ОбщаяФорма.бит_ФормаКомментарияРасчетаЗависимыхОборотовУправляемая", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		
		Если НЕ ВыбСтрока = Неопределено Тогда
			ИмяРеквизита = СтрЗаменить(Поле.Имя, "ЗависимыеОбороты", "");
			ТекЗнч = ВыбСтрока[ИмяРеквизита];
			Если ЗначениеЗаполнено(ТекЗнч) Тогда
				ПоказатьЗначение(,ТекЗнч);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабДокДанные

&НаКлиенте
Процедура ТабДокДанныеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Расшифровка, "РасшифровкаЯчейкиФормыВвода")  Тогда
	
		Если Расшифровка.Вид = "Измерение" И ЗначениеЗаполнено(Расшифровка.Значение) Тогда
		
			ПоказатьЗначение( , Расшифровка.Значение);
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокДанныеВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если НЕ флЭлементыФормыДоступны Тогда
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Область.Расшифровка, "РасшифровкаЯчейкиФормыВвода")  Тогда
			Если Область.Расшифровка.Вид = "Значение" Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ТабДокДанныеПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблМакета.Расшифровка, "РасшифровкаЯчейкиФормыВвода") Тогда
			
			ИзменениеСодержимогоОбласти(ОблМакета);
			
		КонецЕсли;	// ИмяКласса подходит
		
		бит_БюджетированиеКлиентСервер.ВычислитьЗависимыеФормулы(ТабДокДанные, фЗависимостиЯчеек, ОблМакета.Имя);
		
	КонецЕсли; // ОблМакета подходит
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокДанныеПриАктивизацииОбласти(Элемент)
	
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблМакета.Расшифровка, "РасшифровкаЯчейкиФормыВвода") Тогда
			
			  ОбластьР = ОблМакета.Расшифровка;
			  
			  Если ОбластьР.Вид = "Значение" Тогда
				  
				  // Устанавливаем отбор по периоду и комбинации измерений.
				  СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(ОбластьР);
				  
				  Элементы.БДДС_Редактирование.ОтборСтрок = Новый ФиксированнаяСтруктура(СтрОтбор);
				  
			  Иначе	
				  
				  УстановитьНесуществующийОтборБДДС();
				  
			  КонецЕсли; 
			  
		  Иначе	  
			  
			  УстановитьНесуществующийОтборБДДС();
			  
		  КонецЕсли;	// ИмяКласса подходит
		
	КонецЕсли; // ОблМакета подходит
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБДДС_Редактирование

&НаКлиенте
Процедура БДДС_РедактированиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ АктивнаРедактируемаяЯчейка() Тогда
		
		ТекстСообщения =  НСтр("ru = 'Для добавления данных необходимо установить курсор в редактируемую ячейку.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущаяСтрока.ИД = Строка(Новый УникальныйИдентификатор);
		Если НЕ Копирование И АктивнаРедактируемаяЯчейка() Тогда
			
			 ОбластьР = Элементы.ТабДокДанные.ТекущаяОбласть.Расшифровка;
			 бит_БюджетированиеКлиентСервер.ЗаполнитьНовуюСтрокуБюджета(Объект, ТекущаяСтрока ,ОбластьР.Период, ОбластьР.Измерения, фКэшЗначений.НастройкиФормы.Измерения);
		
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования И АктивнаРедактируемаяЯчейка() Тогда
		
		Обл = Элементы.ТабДокДанные.ТекущаяОбласть;
		ОбластьР   = Обл.Расшифровка;
		
		ОбновитьЗначениеЯчейкиДерева(Обл, ОбластьР);
		ОбновитьПарнуюЯчейки(Обл);		
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПослеУдаления(Элемент)
	
	Если АктивнаРедактируемаяЯчейка() Тогда
		
		Обл = Элементы.ТабДокДанные.ТекущаяОбласть;
		ОбластьР   = Обл.Расшифровка;
		
		ОбновитьЗначениеЯчейкиДерева(Обл, ОбластьР);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеСтатьяОборотовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущаяСтрока, фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	
	ИзменениеСтатьиОборотовВТабличнойЧасти(ТекущаяСтрока.ПолучитьИдентификатор(),"БДДС", "БДДС_Редактирование");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБддс

&НаКлиенте
Процедура БДДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Объект.БДДС.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяРеквизита = СтрЗаменить(Поле.Имя, "БДДС", "");
		ТекЗнч = ТекущаяСтрока[ИмяРеквизита];
		
		Если ЗначениеЗаполнено(ТекЗнч) Тогда
			
			ПоказатьЗначение(, ТекЗнч);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БДДСПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.БДДС.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		УстановитьОтборЗависимые(ТекущаяСтрока.ИД);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПодключаемыеКомандыЭлементовФормы

&НаКлиенте
Процедура Подключаемый_АналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяПоля  = Элемент.Имя;
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(Элемент.Имя, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(Объект, СтандартнаяОбработка, Элемент.Имя);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма, Элемент, Объект, Элемент.Имя,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаОчистка(Элемент, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, Объект, Элемент.Имя,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);

КонецПроцедуры

#КонецОбласти 

#Область ПодключаемыеКомандыЭлементовТаблицФормы

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, ИмяПоля,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
	
#КонецОбласти 

&НаКлиенте
Процедура КомандаРедактироватьПериод(Команда)
	
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.ДатаНачалаПланирования);
	ПараметрыПередачи.Вставить("ДатаОкончания", Объект.ДатаОкончанияПланирования);
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	Если ЗаполнениеДереваВозможно() Тогда
		Оповещение  = Новый ОписаниеОповещения("КомандаОбновитьЗавершение", ЭтотОбъект); 			
		Если Объект.БДДС.Количество() > 0 Тогда
			ТекстВопроса = ?(Объект.Проведен
							, НСтр("ru = 'Проведение документа будет отменено. Данные будут очищены. Продолжить?'")
							, НСтр("ru = 'Данные будут очищены. Продолжить?'"));
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		Иначе
			ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура КомандаОбновитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновлениеДереваКлиент();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаВосстановить(Команда)
	
	Если ЗаполнениеДереваВозможно() Тогда
		
		Состояние( НСтр("ru = 'Выполняется обновление дерева...'"));		
		ВосстановитьДерево(Истина);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАктуализировать(Команда)
	
	Если АктуализацияВозможна() Тогда
		АктуализироватьНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьДанные(Команда)
	
	флОтказ = Истина;
	мБуфер = Неопределено;
	ОблВыделенная = ТабДокДанные.ТекущаяОбласть;
	
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблВыделенная) Тогда
		
		мБуфер = Новый Массив;		
		
		// Необходимо определить координаты всех ячеек выделенной области
		// и обойти по отдельности эти ячейки.
		
		ДельтаГ = ОблВыделенная.Право - ОблВыделенная.Лево + 1;
		ДельтаВ = ОблВыделенная.Низ   - ОблВыделенная.Верх + 1;
		
		ЛевоНач = ОблВыделенная.Лево;
		ВерхНач = ОблВыделенная.Верх;
		Для нг = 1 По ДельтаГ Цикл
			
			Лево   = ЛевоНач + нг-1;
			
			Для нв = 1 По ДельтаВ Цикл
				
				Верх = ВерхНач + нв-1;
				Обл  = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
				
				// Если выделенная ячейка является ячейкой вида Значение - сохраним параметры, необходимые для копирования в буфер.
				ОбластьР = Обл.Расшифровка;
				Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьР, "РасшифровкаЯчейкиФормыВвода") 
					 И ОбластьР.Вид = "Значение" Тогда
					 
					флОтказ = Ложь;
					
					ПарамКопирования = Новый Структура;
					ПарамКопирования.Вставить("ИмяКласса", "БуферКопированияФормыВвода");
					ПарамКопирования.Вставить("Период"   , ОбластьР.Период);
					ПарамКопирования.Вставить("Измерения", ОбластьР.Измерения);
					ПарамКопирования.Вставить("СдвигГор" , нг-1);
					ПарамКопирования.Вставить("СдвигВерт", нв-1);
					
					мБуфер.Добавить(ПарамКопирования);
					
				КонецЕсли;	// ИмяКласса подходит
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЕсли; // ОблМакета подходит
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВставитьДанные(Команда)
	
	Если ТипЗнч(мБуфер) = Тип("Массив") Тогда
		
		Обл = ТабДокДанные.ТекущаяОбласть;		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) Тогда
			ПараметрыВставки = Новый Структура;
			ПараметрыВставки.Вставить("ИмяОбласти", Обл.Имя);
			ПараметрыВставки.Вставить("Верх", Обл.Верх);
			ПараметрыВставки.Вставить("Лево", Обл.Лево);
			ПараметрыВставки.Вставить("Низ", Обл.Низ);
			ПараметрыВставки.Вставить("Право", Обл.Право);
			ВыполнитьКопированиеДанных(мБуфер, ПараметрыВставки);			
		КонецЕсли; // ОблМакета подходит
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьБуфер(Команда)
	
	мБуфер = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьЗависимыеОбороты(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьЗависимыеОборотыЗавершение", ЭтотОбъект);
	Если Объект.ЗависимыеОбороты.Количество()>0 Тогда
		ТекстВопроса = Нстр("ru = 'Зависимые обороты будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура КомандаЗаполнитьЗависимыеОборотыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьЗависимыеОбороты();
		ЗаполнитьЗависимыеОбороты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереключитьОтбор(Команда)
	
	Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Пометка = НЕ Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Пометка;	
	фУстанавливатьОтборЗависимых = Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Пометка;
	
	Если фУстанавливатьОтборЗависимых Тогда
		
		ТекущаяСтрока = Элементы.БДДС.ТекущиеДанные;
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			УстановитьОтборЗависимые(ТекущаяСтрока.ИД);
			
		КонецЕсли; 
		
	Иначе	
		
		ОтключитьОтборЗависимые();
		
	КонецЕсли; 
	
	УстановитьКартинкуКнопкиОтбор();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура заполняет значения, необходимые на клинте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	фКэшЗначений.Вставить("ИзмеренияДоп", бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним"));
	фКэшЗначений.Вставить("ИзмеренияВсе", бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","синоним"));
	фКэшЗначений.Вставить("НастройкиИзмерений" , бит_Бюджетирование.НастройкиИзмеренийБюджетирования()); 
	фКэшЗначений.Вставить("НастройкиФормы"     , Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Объект.НастройкаФормы));
	фКэшЗначений.Вставить("ТекущийПользователь", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));	
	фКэшЗначений.Вставить("ВидСравненияРавно"  , ВидСравнения.Равно);
	фКэшЗначений.Вставить("ПроводитьПослеУтверждения", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения"));	
		
	// Параметры, используемые для управления автовидимостью колонок.
	фКэшЗначений.Вставить("НастройкаВидимостиКолонок"	 , Новый Структура);
	фКэшЗначений.Вставить("МассивСтатей_БДДС"			 , Новый Массив);
	фКэшЗначений.Вставить("МассивСтатей_ЗависимыеОбороты", Новый Массив);
	
	фКэшЗначений.Вставить("СтруктураДопПолей", Новый Структура("Учет_Сумма, Учет_Количество", "Норма","Норма"));
	
	фКэшЗначений.Вставить("НастройкиСтатей", Новый Соответствие);
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);

	фКэшЗначений.Вставить("СценарийЭталон", Объект.СценарийЭталон);
	фКэшЗначений.Вставить("Сценарий",		Объект.Сценарий);
	
КонецПроцедуры

// Процедура очищает табличные части ЗависимыеОбороты и БДДС.
// 
&НаСервере
Процедура ОчиститьТаблицы()

	Объект.БДДС.Очистить();
	Объект.ДоИзменения.Очистить();
	
КонецПроцедуры

// Очищает таблицы данных и дерево данных. 
// 
&НаСервере
Процедура ОчиститьВсе()

	ТабДокДанные.Очистить();
	
	ОчиститьТаблицы();

КонецПроцедуры

// Функция проверяет возможность заполнения дерева данные. 
// Заполнение возможно, если заполнены НастройкаФормы и все измерения, обязательные к заполнению.
// 
// Параметры:
// СтрПар - СтруктураПараметров
// ВыводитьСообщения  - Булево.
// 
// Возвращаемое значение:
//   ЗаполнениеВозможно   - Булево.
// 
&НаСервере
Функция ЗаполнениеДереваВозможно()

	ЗаполнениеВозможно = Истина;
	
	ТекстСообщения = "";
	Если НЕ ЗначениеЗаполнено(Объект.НастройкаФормы) Тогда
		ТекстСообщения      =  НСтр("ru = 'Не заполнена настройка формы ввода.'");	
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.НастройкаФормы");
		ЗаполнениеВозможно = Ложь;	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.СценарийЭталон) Тогда
		ТекстСообщения      =  НСтр("ru = 'Не заполнен эталонный сценарий.'");	
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.СценарийЭталон");
		ЗаполнениеВозможно = Ложь;	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ТекстСообщения  =  НСтр("ru = 'Не заполнен сценарий актуализации.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.Сценарий");
		ЗаполнениеВозможно = Ложь;	
	КонецЕсли; 
	
	Если Объект.Сценарий.бит_Периодичность <> Объект.СценарийЭталон.бит_Периодичность Тогда
		ТекстСообщения   =  НСтр("ru = 'Не совпадает периодичность эталонного сценария и сценария актуализации.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.Сценарий");
		ЗаполнениеВозможно = Ложь;	
	КонецЕсли; 
	
	Если Объект.Сценарий.ПродолжительностьИнтервала <> Объект.СценарийЭталон.ПродолжительностьИнтервала Тогда
		ТекстСообщения   =  НСтр("ru = 'Не совпадает продолжительность интервала планирования эталонного сценария и сценария актуализации.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.Сценарий");
		ЗаполнениеВозможно = Ложь;	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаПланирования) Тогда
		ТекстСообщения      =  НСтр("ru = 'Не указана дата начала периода планирования.'");	
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.ДатаНачалаПланирования");
		ЗаполнениеВозможно = Ложь;	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияПланирования) И Объект.ДатаОкончанияПланирования < Объект.ДатаНачалаПланирования Тогда
		ТекстСообщения =  НСтр("ru = 'Не верно указан интервал планирования. Дата окончания предшествует дате начала.'");	
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.ДатаОкончанияПланирования");
		ЗаполнениеВозможно = Ложь;	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаАктуализации) Тогда
		ТекстСообщения =  НСтр("ru = 'Не указана дата начала актуализации.'");	
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.ДатаАктуализации");
		ЗаполнениеВозможно = Ложь;	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ДатаАктуализации) Тогда
	
		Если ЗначениеЗаполнено(Объект.ДатаНачалаПланирования) 
			  И ЗначениеЗаполнено(Объект.ДатаОкончанияПланирования)
			  И  ( Объект.ДатаАктуализации <= Объект.ДатаНачалаПланирования 
			       ИЛИ Объект.ДатаАктуализации > Объект.ДатаОкончанияПланирования) Тогда
		
				   ТекстСообщения      =  НСтр("ru = 'Дата начала актуализации %1% не попадает в интервал планирования (%2%,%3%].'");	
				   ТекстСообщения      = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
				                                                                                ,Формат(Объект.ДатаАктуализации,"Л=ru_RU; ДФ=dd.MM.yyyy")
																								,Формат(Объект.ДатаНачалаПланирования,"Л=ru_RU; ДФ=dd.MM.yyyy")
																								,Формат(Объект.ДатаОкончанияПланирования,"Л=ru_RU; ДФ=dd.MM.yyyy"));
		           бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.ДатаАктуализации");
				   ЗаполнениеВозможно = Ложь;	
		
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Объект.ДатаНачалаПланирования) 
			  И НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияПланирования) 
			  И Объект.ДатаАктуализации <=Объект.ДатаНачалаПланирования Тогда
		
				   ТекстСообщения =  НСтр("ru = 'Дата начала актуализации %1% не попадает в интервал планирования (%2%,%3%].'");	
				   ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
				                                                                                ,Формат(Объект.ДатаАктуализации,"Л=ru_RU; ДФ=dd.MM.yyyy")
																								,Формат(Объект.ДатаНачалаПланирования,"Л=ru_RU; ДФ=dd.MM.yyyy")
																								,Формат(Объект.ДатаОкончанияПланирования,"Л=ru_RU; ДФ=dd.MM.yyyy"));
				   
		           бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.ДатаАктуализации");
				   ЗаполнениеВозможно = Ложь;	
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбязательныеИзмерения = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию")];
	
	Если ОбязательныеИзмерения <> Неопределено Тогда
		
		Для каждого Измерение Из ОбязательныеИзмерения Цикл
			
			Если НЕ ЗначениеЗаполнено(Объект[Измерение]) Тогда
				
				ТекстСообщения =  НСтр("ru = 'Не заполнено значение по умолчанию ""%1%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Измерение);
		        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект."+Измерение);
				
				ЗаполнениеВозможно = Ложь;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если НЕ ЗаполнениеВозможно Тогда
		
		ТекстСообщения =  НСтр("ru = 'Заполнение невозможно.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 
	
	Возврат ЗаполнениеВозможно;
	
	
КонецФункции

// Выполняет обновление дерева данных. 
// 
&НаСервере
Процедура ОбновитьДерево(ОчищатьТаблицы)
	
	Если Объект.БДДС.Количество() > 0 И Объект.Проведен Тогда
	
		Если Объект.Проведен Тогда
	        ДокОб = РеквизитФормыВЗначение("Объект");			
			Попытка
				ДокОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				ТекстСообщения =  НСтр("ru = 'Не удалось отменить проведение документа. Описание ошибки: %1%. Для перезаполнения табличной части отмените проведение документа.'");
				ТекстСообщения =  бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				Возврат;
			КонецПопытки;
	       ЗначениеВДанныеФормы(ДокОб, Объект);			
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Очистим таблицу с данными
	Если ОчищатьТаблицы Тогда
		
		ОчиститьТаблицы();
		
	КонецЕсли; 
	
	СтрПар = Новый Структура;
	СтрПар.Вставить("АдресКомпоновкиСтруктура", АдресКомпоновкиСтруктура);
	СтрПар.Вставить("НастройкиКомпоновщикаСтруктура", КомпоновщикСтруктура.ПолучитьНастройки());
	СтрПар.Вставить("АдресКомпоновкиДанные", АдресКомпоновкиДанные);
	СтрПар.Вставить("НастройкиКомпоновщикаДанные", КомпоновщикДанные.ПолучитьНастройки());
	
	ДокОб = РеквизитФормыВЗначение("Объект");
	ДокОб.ОбновитьДеревоДанных(ТабДокДанные, Объект.НастройкаФормы, ТекстЗапроса, СтрПар);
	ЗначениеВДанныеФормы(ДокОб, Объект);
	Объект.АктуализацияВыполнена = Ложь;
	
	МассивСтатей = ИзвлечьСтатьиИзДерева(ТабДокДанные);
	фКэшЗначений.НастройкиСтатей = Новый Соответствие;	
	бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(МассивСтатей, фКэшЗначений.НастройкиСтатей);
	
	фЗависимостиЯчеек = бит_БюджетированиеКлиентСервер.ПолучитьЗависимостиЯчеек(ТабДокДанные);	
	УправлениеВидимостьюКолонокТаблиц();
	
КонецПроцедуры

// Восстанавливает дерево данных по табличным частям. 
// 
&НаСервере
Процедура ВосстановитьДерево(ВыводитьСообщения = Ложь)
	
	ДокОб = РеквизитФормыВЗначение("Объект");
	
	СтрПар = Новый Структура("ВыводитьСообщения"    , ВыводитьСообщения);
	СтрПар.Вставить("АдресКомпоновкиСтруктура"      , АдресКомпоновкиСтруктура);
	СтрПар.Вставить("НастройкиКомпоновщикаСтруктура", КомпоновщикСтруктура.ПолучитьНастройки());
	СтрПар.Вставить("АдресКомпоновкиДанные"         , АдресКомпоновкиДанные);
	СтрПар.Вставить("НастройкиКомпоновщикаДанные"   , КомпоновщикДанные.ПолучитьНастройки());
	
	ДокОб.ВосстановитьДеревоПоДанным(ТабДокДанные, Объект.НастройкаФормы, ТекстЗапроса, СтрПар);
	
	МассивСтатей = ИзвлечьСтатьиИзДерева(ТабДокДанные);	
	фКэшЗначений.НастройкиСтатей = Новый Соответствие;
	бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(МассивСтатей, фКэшЗначений.НастройкиСтатей);
	
	фЗависимостиЯчеек = бит_БюджетированиеКлиентСервер.ПолучитьЗависимостиЯчеек(ТабДокДанные);	
	УправлениеВидимостьюКолонокТаблиц();
	
КонецПроцедуры

// Процедура выполняет блокировку элементов формы в зависимости от статуса.
// 
&НаСервере
Процедура ЗаблокироватьЭлементыФормы()

	флЭлементыФормыДоступны = ?( Статус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Черновик
							      ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Истина, Ложь);
								  
	МассивНедоступныхЭлементов = Новый Массив;
	МассивНедоступныхЭлементов.Добавить("ГруппаКомПанельДерево");
	МассивНедоступныхЭлементов.Добавить("ГруппаОсновныеОтбор");
	МассивНедоступныхЭлементов.Добавить("ГруппаДанные");
	МассивНедоступныхЭлементов.Добавить("ЗависимыеОборотыКоманднаяПанель");
	
	Для каждого ИмяЭлемента Из МассивНедоступныхЭлементов Цикл
		
		ТекЭлемент = Элементы[ИмяЭлемента];
		
		Если ТипЗнч(ТекЭлемент) = Тип("ПолеФормы") Тогда
			ТекЭлемент.ТолькоПросмотр = НЕ флЭлементыФормыДоступны;
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") Тогда	
			
			Если ТекЭлемент.Вид = ВидГруппыФормы.КоманднаяПанель Тогда
				ТекЭлемент.Доступность = флЭлементыФормыДоступны;
			Иначе	
				ТекЭлемент.ТолькоПросмотр = НЕ флЭлементыФормыДоступны;
			КонецЕсли;
		Иначе	
			ТекЭлемент.Доступность = флЭлементыФормыДоступны;
		КонецЕсли; 
	КонецЦикла; 

	// Управлем на уровне редактирования.
	Элементы.ТабДокДанные.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы. 
// 
&НаСервере
Процедура УстановитьВидимость()

	// Видимость элементов шапки
	Для каждого КиЗ Из фКэшЗначений.НастройкиИзмерений Цикл
		
		Имя       = КиЗ.Ключ;
		Настройка = КиЗ.Значение;
		
		Если Имя = "Сценарий" Тогда
			Продолжить;
		КонецЕсли; 		
		
		Если Найти(Имя,"Аналитика_")>0 Тогда
			Если Настройка = Неопределено Тогда
				Элементы[Имя].Видимость = Ложь;
			Иначе
				Элементы[Имя].Заголовок = Настройка.Синоним;
			КонецЕсли; 
		КонецЕсли; 
		
		Элементы[Имя].АвтоОтметкаНезаполненного = Ложь;
		Элементы[Имя].ОтметкаНезаполненного = Ложь;		
		
	КонецЦикла; 
	
	// Автоотметка значений по умолчанию, обязательных к заполнению.
	ИзмеренияОбязательные = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию];
	
	Для каждого Имя Из ИзмеренияОбязательные Цикл
	    Элементы[Имя].АвтоОтметкаНезаполненного = Истина;
		Если НЕ ЗначениеЗаполнено(Объект[Имя]) Тогда
			Элементы[Имя].ОтметкаНезаполненного = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	флАктуализацияПоПрофилю = ?(Объект.СпособАктуализации = Перечисления.бит_СпособыАктуализации.ПоПрофилю, Истина, Ложь);
	Элементы.ПрофильРаспределения.Видимость = флАктуализацияПоПрофилю;
	
	// Блокировка элементов управления в зависимости от статуса.
	ЗаблокироватьЭлементыФормы();	
	
	УстановитьДоступностьЭлементов();
	
	// Вызов механизма доступности элементов управления.
	УстановитьНастройкиДоступностиЭлементов();		
	
	Если фКэшЗначений.ПроводитьПослеУтверждения 
		И Объект.Проведен И Объект.ОтправленНаСогласование
		И Объект.РежимПринятияКУчету = 1
		И Статус <> Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Утвержден Тогда
		Элементы.ПредупреждениеОПринятиеКУчетуПослеУтверждения.Видимость = Истина;
	Иначе
		Элементы.ПредупреждениеОПринятиеКУчетуПослеУтверждения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект 	 = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.СценарийЭталон = Объект.Сценарий
		И Объект.РежимЗависимыхОборотов = ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.Автоматический") Тогда
		Элементы.СторнироватьЗависимыеОбороты.Видимость = Истина
	Иначе	
		Элементы.СторнироватьЗависимыеОбороты.Видимость = Ложь;	
	КонецЕсли; 

КонецПроцедуры
  
// Процедура устанавливает доступность элементам формы.
// 
// Параметры:
//  Доступность - Булево.
// 
&НаСервере
Процедура УстановитьДоступностьЭлементов()

	ЭлементыТолькоПросмотр = ?(Статус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Черновик
			ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Ложь, Истина);

	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда  
			Элемент.ТолькоПросмотр = ЭлементыТолькоПросмотр;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

// Процедура применяет настройки доступности и видимости для элементов формы.
// 
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()

	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтотОбъект, Объект, Статус);
	
КонецПроцедуры

// Процедура инициализирует компоновщик, используемый для фильтрации данных. 
// 
&НаСервере
Процедура ИнициализироватьКомпоновщикДанные(ТекущийОбъект)
	
	// Предполагаем, что разворот идет по одному измерению.
	ИмяИзмеренияРазворачивать = фКэшЗначений.НастройкиФормы.ИмяРазворачивать;
	ТекстЗапросаДанные = ТекущийОбъект.ПодготовитьТекстЗапросаПлановыеДанные(ИмяИзмеренияРазворачивать);
	
	// Создаем СКД по запросу
	СКД = бит_МеханизмПолученияДанных.СоздатьСхемуКомпоновкиПоЗапросу(ТекстЗапросаДанные);
	АдресКомпоновкиДанные = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	// Инициализируем компоновщик
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресКомпоновкиДанные);
	КомпоновщикДанные.Инициализировать(ИсточникНастроек);
	КомпоновщикДанные.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
КонецПроцедуры

// Выполняет пересчеты табличных частей при изменении валюты. 
// 
// Параметры:
//  КурсыДок - Структура
// 
&НаСервере
Процедура ПересчитатьТабличныеЧастиПоВалюте(КурсыДок)
	
	ПоляПересчета = Новый Массив;
	ПоляПересчета.Добавить("Сумма");
	
	бит_Бюджетирование.ПересчитатьТабЧастьПоВалюте(Объект.БДДС, Объект.Сценарий, КурсыДок, ПоляПересчета);
	
	ПоляПересчета = Новый Массив;
	ПоляПересчета.Добавить("Сумма");
	
	бит_Бюджетирование.ПересчитатьТабЧастьПоВалюте(Объект.ФактическиеДанные, Объект.Сценарий, КурсыДок, ПоляПересчета, "Измерение");
	
	
КонецПроцедуры

// Функция проверяет допустимость совместного использования сценария эталон и сценария актуализации.
// 
// 
// Возвращаемое значение:
//   ЕстьОшибки   - 
// 
&НаСервере
Функция СценарииМожноИспользоватьВместе()
	
	Если НЕ ЗначениеЗаполнено(Объект.СценарийЭталон) ИЛИ НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Объект.СценарийЭталон = Объект.Сценарий Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Отказ = Ложь;

	СписокРеквизитов		= "бит_Периодичность, ПродолжительностьИнтервала";
	РеквизитыДоИзменения    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СценарийЭталон, СписокРеквизитов);
	РеквизитыПослеИзменения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Сценарий, 		СписокРеквизитов);
	
	Если РеквизитыДоИзменения.бит_Периодичность <> РеквизитыПослеИзменения.бит_Периодичность  Тогда
		ТекстСообщения = НСтр("ru = 'Не совпадает периодичность сценариев ""План"" и ""Актуализация""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли; 
	
	Если РеквизитыДоИзменения.ПродолжительностьИнтервала <> РеквизитыПослеИзменения.ПродолжительностьИнтервала Тогда
		ТекстСообщения = НСтр("ru = 'Не совпадает продолжительность сценариев ""План"" и ""Актуализация""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли; 
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПлановыхСценариев()

	СценарийЭталонКонтроль = фКэшЗначений.СценарийЭталон;
	СценарийКонтроль 	   = фКэшЗначений.Сценарий;
	
	Если НЕ ЗначениеЗаполнено(СценарийЭталонКонтроль) ИЛИ НЕ ЗначениеЗаполнено(СценарийКонтроль) Тогда
		ДобавитьВКэшПлановыеСценарии();
		Возврат;
	КонецЕсли; 
	
	СторнировкаКонтроль = СценарийЭталонКонтроль = СценарийКонтроль;
	Сторнировка 		= Объект.СценарийЭталон = Объект.Сценарий;
	
	Если Сторнировка = СторнировкаКонтроль Тогда
		ДобавитьВКэшПлановыеСценарии();
		Возврат;
	КонецЕсли; 
	
	Если Сторнировка Тогда
		// Надо перезаполнить "до изменения".
		ТекстСообщения = Нстр("ru = 'Сценарии ""план"" и ""актуализация"" совпадают.
									|Для сторнирования плановых данных при проведении документа,
									|необходимо повторно обновить данные бюджета.'");
		Кнопки = Новый СписокЗначений(); 
		Кнопки.Добавить(КодВозвратаДиалога.Да, Нстр("ru = 'Обновить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, Нстр("ru = 'Отменить'"));
		
		Дополнительно = Новый Структура("Сторнировка", Сторнировка); 
		Оповещение = Новый ОписаниеОповещения("ПриИзмененииПлановыхСценариевЗавершение", ЭтотОбъект, Дополнительно); 
		ПоказатьВопрос(Оповещение, ТекстСообщения, Кнопки,,КодВозвратаДиалога.Да, Нстр("ru = 'Актуализация бюджета.'"));
		
	Иначе
		// Надо очистить "до изменения" , но спросить.
		ТекстСообщения = Нстр("ru = 'Сценарии ""план"" и ""актуализация"" теперь не совпадают.
									|Если планируется возврат к варианту документа с совпадающимим сценариями,
									|тогда для сторнирования плановых данных при проведении документа,
									|потребуется повторно обновить данные бюджета. Продолжить?'");
		
		Дополнительно = Новый Структура("Сторнировка", Сторнировка);
		Оповещение = Новый ОписаниеОповещения("ПриИзмененииПлановыхСценариевЗавершение", ЭтотОбъект, Дополнительно); 
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да, Нстр("ru = 'Актуализация бюджета.'"));
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ПриИзмененииПлановыхСценариевЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Сторнировка Тогда
			Если ЗаполнениеДереваВозможно() Тогда
				ОбновлениеДереваКлиент();
				ДобавитьВКэшПлановыеСценарии();
			Иначе
				ИзвлечьИзКэшаПлановыеСценарии();
			КонецЕсли; 
		Иначе
			Объект.ДоИзменения.Очистить();
			ДобавитьВКэшПлановыеСценарии();
		КонецЕсли; 
	Иначе
		ИзвлечьИзКэшаПлановыеСценарии();
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКэшПлановыеСценарии()

	фКэшЗначений.Вставить("СценарийЭталон", Объект.СценарийЭталон);
	фКэшЗначений.Вставить("Сценарий", Объект.Сценарий);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИзКэшаПлановыеСценарии()

	Объект.СценарийЭталон = фКэшЗначений.СценарийЭталон;
	Объект.Сценарий 	  = фКэшЗначений.Сценарий;
	
КонецПроцедуры

// формирует массив статей, которые присутствуют в дереве.
// 
// Параметры:
//  ТабДок - ТабличныйДокумент
// 
// Возвращаемое значение:
//  МассивСтатей - Массив.
// 
&НаСервере
Функция ИзвлечьСтатьиИзДерева(ТабДок)
	
	МассивСтатей = Новый Массив;
	
	Для каждого Обл Из ТабДок.Области Цикл
		
		Если Найти(Обл.Имя, "СтатьяОборотов_") > 0 Тогда
			
			Если ТипЗнч(Обл.Расшифровка.Значение) = Тип("СправочникСсылка.бит_СтатьиОборотов") 
				 И НЕ Обл.Расшифровка.Значение.ЭтоГруппа Тогда
				
				МассивСтатей.Добавить(Обл.Расшифровка.Значение);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТабВрем = Объект.БДДС.Выгрузить();
	ТабВрем.Свернуть("СтатьяОборотов");
	
	Для каждого СтрокаТаблицы Из ТабВрем Цикл
	
		МассивСтатей.Добавить(СтрокаТаблицы.СтатьяОборотов);
	
	КонецЦикла; 
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	
	Возврат МассивСтатей;
	
КонецФункции

// Управляет видимостью колонок табличных полей БДДС_Редактирование и ЗависимыеОбороты_Редактирование.
// 
&НаСервере
Процедура УправлениеВидимостьюКолонокТаблиц()

	Для каждого КиЗ Из фКэшЗначений.НастройкиФормы.Измерения Цикл
		
		Если КиЗ.Ключ = "Сценарий" Тогда
		
			Продолжить;
		
		КонецЕсли; 		
		
		ТекОписание = КиЗ.Значение;
		
		ИмяКолонки = "БДДС_Редактирование"+ТекОписание.Имя;
		Элементы[ИмяКолонки].Видимость = Истина;
	
	КонецЦикла; 
	
	// Скроем аналитики, которые заведомо не используются ни в одной статье в рамках формы ввода.
	локМассивСтатей = Новый Массив;
	Для каждого КиЗ Из фКэшЗначений.НастройкиСтатей Цикл
	
		локМассивСтатей.Добавить(КиЗ.Ключ);
	
	КонецЦикла; 
	локНастройкаВидимостиКолонок = Новый Структура;
	
	НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(локМассивСтатей
																		, Новый Массив
																		, локНастройкаВидимостиКолонок);
	
	
	бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				, локНастройкаВидимостиКолонок
											 				, "БДДС_Редактирование");
															

	// Скрываем в поле редактирования колонки, для которых установлен режим "Разворачивать" или "ПоУмолчанию".
	Для каждого КиЗ Из фКэшЗначений.НастройкиФормы.Измерения Цикл
		
		Если КиЗ.Ключ = "Сценарий" Тогда
		
			Продолжить;
		
		КонецЕсли; 		
		
		ТекОписание = КиЗ.Значение;
		
		флВидимость = ?(ТекОписание.СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию 
		                 ИЛИ ТекОписание.СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать, Ложь, Истина);
						 				 						 
		Если Найти(ТекОписание.Имя,"Аналитика_")>0 Тогда
		
			Если фКэшЗначений.НастройкиИзмерений[ТекОписание.Имя] = Неопределено Тогда
				флВидимость = Ложь;
			КонецЕсли;	
		
		КонецЕсли; 				 
		
		Если НЕ флВидимость Тогда
			
			ИмяКолонки = "БДДС_Редактирование"+ТекОписание.Имя;
			Элементы[ИмяКолонки].Видимость = флВидимость;
			
		КонецЕсли; 
	
	КонецЦикла; 
															
															
КонецПроцедуры

// Процедура оформляет табличное поле.
// 
// Параметры:
//  ПрефиксТаблицы 		- Строка
//  МассивОформляемыхТаблиц - Массив
//  вхМассивСтатей - Массив.
// 
&НаСервере
Процедура ОФормитьТаблицу(ПрефиксТаблицы, МассивОформляемыхТаблиц = Неопределено, вхМассивСтатей = Неопределено) 
	
	// ----------------------------------------------------------------------
	// Оформление реквизитов строк по статьям оборотов
	УдалитьСтароеОформление = Ложь;
	ПрефиксКонтейнера = "Объект.";
	
	Если вхМассивСтатей = Неопределено Тогда
	
		УдалитьСтароеОформление = Истина;
	
		// Формирование массива статей, по которым нужно добавить элементы УО.
		ТаблицаПоиска = Объект[ПрефиксТаблицы].Выгрузить();
		МассивСтатей = ТаблицаПоиска.ВыгрузитьКолонку("СтатьяОборотов");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		
		ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].ЗагрузитьЗначения(МассивСтатей);
		
	Иначе // Работаем только с массивом статей оборотов.
		
		МассивСтатей = Новый Массив; 		
		
		Для каждого ТекСтатья Из вхМассивСтатей Цикл
			
			НайденноеЗначение = ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].НайтиПоЗначению(ТекСтатья);
			Если НайденноеЗначение = Неопределено Тогда	
				
				МассивСтатей.Добавить(ТекСтатья);
				ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].Добавить(ТекСтатья);		
				
			КонецЕсли;  		
			
		КонецЦикла; 
		
		
	КонецЕсли;	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОтметитьОбязательныеРазрезыСтатей", Истина);
	
	бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление
	                                                             , МассивСтатей
																 , УдалитьСтароеОформление
																 , ПрефиксКонтейнера
																 , ПрефиксТаблицы
																 , ""
																 , фКэшЗначений.СтруктураДопПолей
																 , МассивОформляемыхТаблиц
																 , ДопПараметры);
	
КонецПроцедуры

// Процедура обрабатывает изменение реквизита "СтатьяОборотов" в табличной части "БДДС".
// 
&НаСервере
Процедура ИзменениеСтатьиОборотовВТабличнойЧасти(ИдСтроки, ИмяТабЧасти, ИмяПоля, ЗаполнятьНорму = Истина)
	
	ТекущаяСтрока = Объект[ИмяТабЧасти].НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если фКэшЗначений.НастройкиСтатей[ТекущаяСтрока.СтатьяОборотов] = Неопределено Тогда
	
		бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(ТекущаяСтрока.СтатьяОборотов, фКэшЗначений.НастройкиСтатей);
	
	КонецЕсли; 
	
	бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ТекущаяСтрока,фКэшЗначений.ИзмеренияДоп,фКэшЗначений.НастройкиИзмерений);	
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить(ИмяПоля);
	
	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(ТекущаяСтрока.СтатьяОборотов);
	
	ОФормитьТаблицу(ИмяТабЧасти, ИменаПолей, МассивСтатей);			
	
	ИзмеренияРазворачивать = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать")];	
	флУдаленоКлючевоеПоле = бит_БюджетированиеКлиентСервер.ПроверитьПоляВСтроке(ТекущаяСтрока, фКэшЗначений.НастройкиСтатей, фКэшЗначений.ИзмеренияВсе, ИзмеренияРазворачивать);
	
	Если флУдаленоКлючевоеПоле Тогда
	
        бит_БюджетированиеКлиентСервер.ВывестиСообщениеОНесоответствииСтатьи(ТекущаяСтрока.СтатьяОборотов);		
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает параметры выбора статей оборотов, в зависимости от настройки формы ввода бюджета.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораСтатей()
	
	ИзмеренияРазворачивать = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать")];
	Если ИзмеренияРазворачивать.Найти("СтатьяОборотов") = Неопределено Тогда
		
		// Если разворот не по статьям, выбирать можно только те статьи, 
		// в которых ведется учет как минимум разворачиваемых аналитик.
		СтрОтбор = Новый Структура;
		Для каждого Имя Из ИзмеренияРазворачивать Цикл
			СтрОтбор.Вставить("Учет_"+Имя, Истина);
		КонецЦикла; 
		
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.БДДС_РедактированиеСтатьяОборотов, СтрОтбор);
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.СтатьяОборотов, СтрОтбор);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура восстанавливает отбор из хранилища значения.
// 
// Параметры:
//  СохраненнаяНастройка - Структура.
// 
&НаСервере
Процедура ВосстановитьОтбор(СохраненнаяНастройка)

	Если СохраненнаяНастройка.Свойство("НастройкиКомпоновщика") 
		И ТипЗнч(СохраненнаяНастройка.НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных")  Тогда
		
		Если СохраненнаяНастройка.НастройкиКомпоновщика.Отбор.Элементы.Количество() > 0 Тогда
			
			КомпоновщикСтруктура.ЗагрузитьНастройки(СохраненнаяНастройка.НастройкиКомпоновщика);
			
		КонецЕсли;  
		
	Иначе
		
		// Если сохранена еще старая настройка выполним конвертацию отбора построителя в отбор компоновщика.
		бит_МеханизмПолученияДанных.КонвертацияОтборПостроителяОтборКомпоновщика(СохраненнаяНастройка, КомпоновщикСтруктура, ТекстЗапроса);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ВыполнитьАктуализацию();
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	ВосстановитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОбОчисткеДанных(Оповещение)
	
	Если Объект.БДДС.Количество() > 0 Тогда
		ТекстВопроса =  НСтр("ru = 'Данные будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеПериода(ДопПараметры)
	
	ПериодПланирования = ДопПараметры.ПериодРезультат;
	Объект.ДатаНачалаПланирования    = ПериодПланирования.ДатаНачала;
	Объект.ДатаОкончанияПланирования = ПериодПланирования.ДатаОкончания;
	
    ОчиститьВсе();	
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПериода(ПериодРезультат, ДопПараметры)
	
	Если ПериодРезультат <> Неопределено Тогда
		ДопПараметры = Новый Структура("ПериодРезультат", ПериодРезультат);
		Оповещение = Новый ОписаниеОповещения("РедактированиеПериодаЗавершение", ЭтотОбъект, ДопПараметры); 
		ЗадатьВопросОбОчисткеДанных(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура РедактированиеПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьДанныеПериода(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДереваКлиент()
	
	Состояние(НСтр("ru = 'Выполняется построение дерева...'"));
	ОбновитьДерево(Истина);
			
КонецПроцедуры

// Устанвавливает заведомо несуществующий отбор табличной части БДДС. 
// 
&НаКлиенте
Процедура УстановитьНесуществующийОтборБДДС()
	
	// Устанавливаем заведомом несуществующий отбор, т.к. в таб. части документа не может быть больше 100000 строк.
	Элементы.БДДС_Редактирование.ОтборСтрок = Новый ФиксированнаяСтруктура("ИД",9999999);
	
КонецПроцедуры

// Обрабатывает изменение ячейки данных дерева данных. 
// 
// Параметры:
//  Обл - ОбластьЯчеекТабличногоДокумента.
// 
&НаКлиенте
Процедура ИзменениеСодержимогоОбласти(Обл)
	
	ОбластьР = Обл.Расшифровка;
	
	Если ОбластьР.Вид = "Значение" Тогда
		
		СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(ОбластьР);
		
		МассивСтрок = Объект.БДДС.НайтиСтроки(СтрОтбор);
		
		Если Обл.Значение = 0 Тогда
			
			// Удаляем строки по данной комбинации измерений.
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
				Объект.БДДС.Удалить(СтрокаТаблицы);
			
			КонецЦикла; 
			
		Иначе	
			
			Если МассивСтрок.Количество() = 0 Тогда
				
				// Создаем новую строку
				СоздатьНовуюСтрокуБюджета_Клиент(ОбластьР, Обл.Значение);
				
			ИначеЕсли МассивСтрок.Количество() = 1 Тогда	
				
				// Изменяем значение строки
				ТекСтрока = МассивСтрок[0];
				ТекСтрока[ОбластьР.ИмяРесурса] = Обл.Значение;
				бит_БюджетированиеКлиентСервер.ПроверитьПоляВСтроке(ТекСтрока, фКэшЗначений.НастройкиСтатей);
				
			Иначе
				
				// Восстанавливаем предыдущее значение
				Ит = 0;
				Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				
					Ит = Ит + СтрокаТаблицы[ОбластьР.ИмяРесурса];
				
				КонецЦикла; 
				Обл.Значение = Ит;
				
			КонецЕсли; 
			
		КонецЕсли;  // Обл.Значение = 0
		
		Модифицированность = Истина;
		
		// Значения могли быть очищены, поэтому обновляем значения ячейки по данным табличной части.
		ОбновитьЗначениеЯчейкиДерева(Обл, ОбластьР);
		// Обновляем парную ячейку
		ОбновитьПарнуюЯчейки(Обл);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура создает и заполняен новую строку табличной части БДДС на клиенте. 
// Серверный вызов возникает, только при работе механизма норм.
// 
// Параметры:
//  Расшифровка - Структура.
//  НовоеЗначение - Число.
// 
&НаКлиенте
Процедура СоздатьНовуюСтрокуБюджета_Клиент(Расшифровка, НовоеЗначение)

	НоваяСтрока = Объект.БДДС.Добавить();
	
	// Установка ИД строки
	НоваяСтрока.ИД = Строка(Новый УникальныйИдентификатор);
	
	// Заполнение аналитики
	бит_БюджетированиеКлиентСервер.ЗаполнитьНовуюСтрокуБюджета(Объект, НоваяСтрока, Расшифровка.Период, Расшифровка.Измерения, фКэшЗначений.НастройкиФормы.Измерения);
	
	// Заполнение ресурсов
	НоваяСтрока[Расшифровка.ИмяРесурса] = НовоеЗначение;
		
	// Проверка возможности заполнения полей в строке в зависимости от статьи оборотов.
	ИзмеренияРазворачивать = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать")];
	флУдаленоКлючевоеПоле  = бит_БюджетированиеКлиентСервер.ПроверитьПоляВСтроке(НоваяСтрока,фКэшЗначений.НастройкиСтатей, фКэшЗначений.ИзмеренияВсе, ИзмеренияРазворачивать); 	
	
	Если флУдаленоКлючевоеПоле Тогда
		
        бит_БюджетированиеКлиентСервер.ВывестиСообщениеОНесоответствииСтатьи(НоваяСтрока.СтатьяОборотов);		
		// Необходимо удалить строку, потому что к ней не будет доступа, т.к. отбор в табличном поле 
		// редактирования осуществляется по измерениям со способом заполнения Разворачивать.
		Объект.БДДС.Удалить(НоваяСтрока);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обновляет значение в ячейке дерева данных по данным, установленным в табличной части. 
// 
// Параметры:
//  Обл - ТабличныйДокумент
//  Расшифровка - Структура
// 
&НаКлиенте
Процедура ОбновитьЗначениеЯчейкиДерева(Обл, Расшифровка)
	
	// Копируем отбор из отбора строк
	СтрОтбор = Новый Структура;
	Для каждого КиЗ Из Элементы.БДДС_Редактирование.ОтборСтрок Цикл
		
		СтрОтбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
		
	КонецЦикла; 
	
	// Вычисляем итог для данного отбора
	МассивСтрок = Объект.БДДС.НайтиСтроки(СтрОтбор);
	
	Ит = 0;
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		Ит = Ит+СтрокаТаблицы[Расшифровка.ИмяРесурса];
		
	КонецЦикла; 
	
	// Устанавливаем в дерево
	Обл.Значение = Ит;
	бит_БюджетированиеКлиентСервер.ВычислитьЗависимыеФормулы(ТабДокДанные, фЗависимостиЯчеек, Обл.Имя);
	
КонецПроцедуры

// Процедура обновляет парную ячейку (Количество для Сумма, Сумму для Количества) в дереве.
// 
&НаКлиенте
Процедура ОбновитьПарнуюЯчейки(Обл)
	
	// Возможно следует обновить значение парной ячейки.
	Если ИспользуютсяДвеЯчейки() Тогда
		
		ИмяПарн = бит_БюджетированиеКлиент.ИмяВторойЯчейки(Обл.Имя);
		ОблПарн = ТабДокДанные.Области.Найти(ИмяПарн);
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблПарн) 
			И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблПарн.Расшифровка, "РасшифровкаЯчейкиФормыВвода") Тогда
			
			ОбновитьЗначениеЯчейкиДерева(ОблПарн, ОблПарн.Расшифровка);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция определяет, используются ли обе ячейки в табличном документе.
// 
// Возвращаемое значение:
//  флИспользуются - Булево.
// 
&НаКлиенте
Функция ИспользуютсяДвеЯчейки()
	
	флИспользуются = фКэшЗначений.НастройкиФормы.УчетСумма И фКэшЗначений.НастройкиФормы.УчетКоличество;	
	
	Возврат флИспользуются;
	
КонецФункции

// Определяет, что активна ячейка для ввода значения.
// 
// Возвращаемое значение:
//  флЭтоРедактируемаяЯчейка - Булево.
// 
&НаКлиенте
Функция АктивнаРедактируемаяЯчейка()
	
	флЭтоРедактируемаяЯчейка = Ложь;
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблМакета.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
			  И ОблМакета.Расшифровка.Вид = "Значение" Тогда
			
			флЭтоРедактируемаяЯчейка = Истина;
			
		КонецЕсли;	// ИмяКласса подходит
		
	КонецЕсли; // ОблМакета подходит
	
	Возврат флЭтоРедактируемаяЯчейка;
	
КонецФункции

// Функция определяет возможна ли актуализация.
// 
// Возвращаемое значение:
//  флВозможна - Булево.
// 
&НаКлиенте
Функция АктуализацияВозможна()

	Отказ = Ложь;
	ОчиститьСообщения();
	
	// Проверки перед выполнением актуализации
	Если Объект.СпособАктуализации = ПредопределенноеЗначение("Перечисление.бит_СпособыАктуализации.Ручной") Тогда
		ТекстСообщения =  НСтр("ru = 'Установлен способ актуализации ""Ручной"". Автоматическая актуализация не производится.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.СпособАктуализации",,Отказ);
	КонецЕсли; 
	
	Если Объект.СпособАктуализации = ПредопределенноеЗначение("Перечисление.бит_СпособыАктуализации.ПоПрофилю") 
	   И НЕ ЗначениеЗаполнено(Объект.ПрофильРаспределения) Тогда
		ТекстСообщения =  НСтр("ru = 'Не заполнен профиль распределения.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ПрофильРаспределения",,Отказ);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ТекстСообщения =  НСтр("ru = 'Не заполнено значение реквизита ""Сценарий актуализации"".'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Сценарий",,Отказ);
	КонецЕсли; 
	
	Если Объект.АктуализацияВыполнена Тогда
		ТекстСообщения =  НСтр("ru = 'Актуализация уже выполнена. Для повторного выполнения актуализации следует обновить данные.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.АктуализацияВыполнена",,Отказ);
	КонецЕсли; 

	Возврат НЕ Отказ;
	
КонецФункции

// Процедура выполняет копирование данных из буфера. 
// 
// Параметры:
//  Буфер      - Массив.
//  ПараметрыВставки - Структура
// 
&НаКлиенте
Процедура ВыполнитьКопированиеДанных(Буфер, ПараметрыВставки)
	
	КоличествоСкопированных = Буфер.Количество();
	Приемники = Новый Массив;
	
	// Определение ячеек приемников
	Если КоличествоСкопированных = 0 Тогда
		
		// Ничего делать не нужно
		
	ИначеЕсли КоличествоСкопированных = 1 Тогда
		
		// Если скопирована одна ячейка, то в случае выделения области ее нужно вставить во вся ячейки области.
		
		ДельтаГ = ПараметрыВставки.Право - ПараметрыВставки.Лево + 1;
		ДельтаВ = ПараметрыВставки.Низ   - ПараметрыВставки.Верх + 1;
		
		ЛевоНач = ПараметрыВставки.Лево;
		ВерхНач = ПараметрыВставки.Верх;
		Для нг = 1 По ДельтаГ Цикл
			
			Лево   = ЛевоНач + нг-1;
			
			Для нв = 1 По ДельтаВ Цикл
				
				Верх = ВерхНач + нв-1;
				Обл  = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
				
				// Если выделенная ячейка является ячейкой вида Значение - запомним координаты.
				ОбластьР = Обл.Расшифровка;
				Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьР, "РасшифровкаЯчейкиФормыВвода") 
					И ОбластьР.Вид = "Значение" Тогда
					
					Приемники.Добавить(Обл);
					
				КонецЕсли;	// ИмяКласса подходит
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	Иначе	
		
		// Если копируется более одной ячейки - 
		// выполняем копирование области начиная с левого верхнего угла выделенной области.
		Обл = ТабДокДанные.Область(ПараметрыВставки.Верх, ПараметрыВставки.Лево, ПараметрыВставки.Верх, ПараметрыВставки.Лево);
		ОбластьР = Обл.Расшифровка;
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьР, "РасшифровкаЯчейкиФормыВвода") 
			И ОбластьР.Вид = "Значение" Тогда
			
			Приемники.Добавить(Обл);
			
		КонецЕсли;	// ИмяКласса подходит
		
	КонецЕсли; 
	
	// Подготовка данных для копирования
	ДанныеКопирования = Новый Массив;
	
	Для каждого ПараметрыКопирования Из Буфер Цикл
	
		// Выполним копирование данных
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Период", ПараметрыКопирования.Период);
		Для каждого КиЗ Из ПараметрыКопирования.Измерения Цикл
			
			СтрОтбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
			
		КонецЦикла; // МПараметрыПеретаскивания.Измерения
		
		// Источник копирования
		МассивИсточник = Объект.БДДС.НайтиСтроки(СтрОтбор);
		
		ДанныеКопирования.Добавить(Новый Структура("СдвигГор, СдвигВерт, МассивДанных"
		                                             , ПараметрыКопирования.СдвигГор
													 , ПараметрыКопирования.СдвигВерт
													 , МассивИсточник));
		
	КонецЦикла;  // По параметрам копирования
	
	// Выполнение копирования
	Для каждого ОбластьПриемник Из Приемники  Цикл
		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОбластьПриемник) Тогда
			
			ЛевоНач = ОбластьПриемник.Лево;
			ВерхНач = ОбластьПриемник.Верх;
			
			Для каждого ПараметрыКопирования Из ДанныеКопирования Цикл
				
				Лево = ЛевоНач+ПараметрыКопирования.СдвигГор;
				Верх = ВерхНач+ПараметрыКопирования.СдвигВерт;
				
				Обл = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
				
					Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) 
						 И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
						 И Обл.Расшифровка.Вид = "Значение" 
						 И НЕ ЗначениеЗаполнено(Обл.Значение) Тогда
					
						 ОбластьР = Обл.Расшифровка;
						 
						 Если ОбластьР.ПланФакт = "Ф" Тогда
						 
						 	  Продолжить;
						 
						 КонецЕсли; 
						 
						 // Источник копирования
						 МассивИсточник = ПараметрыКопирования.МассивДанных;
						 
						 ИтСумма = 0;
						 ИтКоличество = 0;
						 Для каждого СтрокаИсточник Из МассивИсточник Цикл
						 	
						 	НоваяСтрока = Объект.БДДС.Добавить();
						 	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
						 	НоваяСтрока.ИД = Строка(Новый УникальныйИдентификатор);
						 	НоваяСтрока.Период = ОбластьР.Период;
						 	Для каждого КиЗ Из ОбластьР.Измерения Цикл
						 		
						 		НоваяСтрока[КиЗ.Ключ] = КиЗ.Значение;
						 		
						 	КонецЦикла; 
						 	
						 	ИтСумма = ИтСумма+НоваяСтрока.Сумма;
						 	ИтКоличество = ИтКоличество+НоваяСтрока.Количество;
						 	
							
							УстановитьЗначениеЯчейки(Обл, ИтКоличество, ИтСумма);
							
						 КонецЦикла; // МассивИсточник 
					
					КонецЕсли; 
				
			КонецЦикла; // По данным копирования
			
		КонецЕсли;  // Область приемник подходит
		
	КонецЦикла; // Приемники
	
	
КонецПроцедуры

// Устанавливает значение в ячейке дерева. 
// 
// Параметры:
//  Обл - ОбластьЯчеекТабличногоДокумента.
//  ЗнКоличество - Число
//  ЗнСумма - Число;
// 
&НаКлиенте
Процедура УстановитьЗначениеЯчейки(Обл, ЗнКоличество, ЗнСумма)

	Если Лев(Обл.Имя,1) = "С" Тогда
	
		Обл.Значение = ЗнСумма;
		
		Рез = бит_БюджетированиеКлиентСервер.ВычислитьЗависимыеФормулы(ТабДокДанные, фЗависимостиЯчеек, Обл.Имя);
		Для каждого ОблИзмененная  Из Рез.ИзмененныеОбласти Цикл
			
			ИзменениеСодержимогоОбласти(ОблИзмененная);
			
		КонецЦикла; 
		
		Если фКэшЗначений.НастройкиФормы.УчетКоличество Тогда
		
			Имя = СтрЗаменить(Обл.Имя,"С","К");
			ОблСвяз = ТабДокДанные.Область(Имя);
			
			Если ОблСвяз <> Неопределено Тогда
			
				ОблСвяз.Значение = ЗнКоличество;
				Рез = бит_БюджетированиеКлиентСервер.ВычислитьЗависимыеФормулы(ТабДокДанные, фЗависимостиЯчеек, ОблСвяз.Имя);
				Для каждого ОблИзмененная  Из Рез.ИзмененныеОбласти Цикл
					
					ИзменениеСодержимогоОбласти(ОблИзмененная);
					
				КонецЦикла; 
				
			
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Лев(Обл.Имя,1) = "К" Тогда
		
		Обл.Значение = ЗнКоличество;
		
		Рез = бит_БюджетированиеКлиентСервер.ВычислитьЗависимыеФормулы(ТабДокДанные, фЗависимостиЯчеек, Обл.Имя);
		Для каждого ОблИзмененная  Из Рез.ИзмененныеОбласти Цикл
			
			ИзменениеСодержимогоОбласти(ОблИзмененная);
			
		КонецЦикла; 
		
		Если фКэшЗначений.НастройкиФормы.УчетСумма Тогда
			
			Имя = СтрЗаменить(Обл.Имя,"К","С");
			ОблСвяз = ТабДокДанные.Область(Имя);
			
			Если ОблСвяз <> Неопределено Тогда
				
				ОблСвяз.Значение = ЗнСумма;
				Рез = бит_БюджетированиеКлиентСервер.ВычислитьЗависимыеФормулы(ТабДокДанные, фЗависимостиЯчеек, ОблСвяз.Имя);
				Для каждого ОблИзмененная  Из Рез.ИзмененныеОбласти Цикл
					
					ИзменениеСодержимогоОбласти(ОблИзмененная);
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийЭлементовФормыНаСервере

// Процедура обрабатывает изменение настройки формы ввода.
// 
&НаСервере
Процедура ИзменениеНастройкиФормы(ТекущаяНастройкаФормы)
	
	НовНастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Объект.НастройкаФормы);
	
	Если НовНастройкиФормы.КоличествоРазворачивать > 1 Тогда
	
		Объект.НастройкаФормы = ТекущаяНастройкаФормы;
		ТекстСообщения =  НСтр("ru = 'Актуализация может быть проведена только по настройкам с одним разворачиваемым измерением.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	
	КонецЕсли; 
	
	ОчиститьВсе();	
	
    фКэшЗначений.НастройкиФормы = НовНастройкиФормы;	
	
	ТекстЗапроса = Объект.НастройкаФормы.ТекстЗапроса;
	АдресКомпоновкиСтруктура = Документы.бит_АктуализацияБюджета.ИнициализироватьКомпоновщикСтруктура(ТекстЗапроса, КомпоновщикСтруктура, Новый УникальныйИдентификатор);
	
	ДокОб = РеквизитФормыВЗначение("Объект");
	// Инициализация компоновщика для получения данных.
	ИнициализироватьКомпоновщикДанные(ДокОб);
	
	Если ЗначениеЗаполнено(Объект.НастройкаФормы) Тогда
		
		// Копирование отбора из настройки
		ОбНастройка   = Объект.НастройкаФормы.ПолучитьОбъект();
		СохрНастройка = ОбНастройка.ПолучитьНастройкиПостроителя();
		
		ВосстановитьОтбор(СохрНастройка);
		
		// Копирование значений по-умолчанию из настройки.
		Для каждого КиЗ Из фКэшЗначений.НастройкиФормы.Измерения Цикл
			
			ТекОписание = КиЗ.Значение;
			Если НЕ ТекОписание.СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать 
				И ЗначениеЗаполнено(ТекОписание.ЗначениеПоУмолчанию) Тогда
				
				флЕстьРазличия = ?(Объект[ТекОписание.Имя] <> ТекОписание.ЗначениеПоУмолчанию, Истина, Ложь);
				Объект[ТекОписание.Имя] = ТекОписание.ЗначениеПоУмолчанию;
				
				Если флЕстьРазличия Тогда
					
					// Вызов обработчиков
					Если ТекОписание.Имя = "Сценарий" Тогда
						
						ИзменениеСценария(Ложь);
						
					ИначеЕсли ТекОписание.Имя = "Контрагент" Тогда
						
						ИзменениеКонтрагента();
						
					ИначеЕсли ТекОписание.Имя = "ДоговорКонтрагента" Тогда	
						
						ИзменениеДоговораКонтрагента();
						
					КонецЕсли; 
					
				КонецЕсли; // ФлЕстьРазличия
				
			КонецЕсли; 
			
		КонецЦикла; // ФКэшЗначений.НастройкиФормы.Измерения
		
        УстановитьПараметрыВыбораСтатей();
		
	КонецЕсли; // ЗначениеЗаполнено(Объект.НастройкаФормы)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты.
// 
&НаСервере
Процедура ИзменениеВалюты(ПересчитатьСуммы, ВалютаНач = Неопределено)
	
	СтрНач = бит_КурсыВалютКлиентСервер.СтруктураКурса(ВалютаНач, Объект.КурсДокумента, Объект.КратностьДокумента);	
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ИзменениеВалюты();
	ЗначениеВДанныеФормы(ДокОбъект, Объект);
	
	Если ПересчитатьСуммы И ЗначениеЗаполнено(ВалютаНач) Тогда
		
		СтрКон = бит_КурсыВалютКлиентСервер.СтруктураКурса(Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
		
		КурсыДок = Новый Структура("Нач, Кон", СтрНач, СтрКон);
		
		ПересчитатьТабличныеЧастиПоВалюте(КурсыДок);
		
		ВосстановитьДерево();
		
	КонецЕсли; // Пересчитать	
	
КонецПроцедуры

// Процедура обрабатывает изменение сценария. 
// 
&НаСервере
Процедура ИзменениеСценария(ПересчитатьСуммы)
	
	ВалютаНач = Объект.ВалютаДокумента;
	СтрНач = бит_КурсыВалютКлиентСервер.СтруктураКурса(ВалютаНач, Объект.КурсДокумента, Объект.КратностьДокумента);		
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ИзменениеСценария(Ложь);
	ЗначениеВДанныеФормы(ДокОбъект, Объект);
	
	СтрКон = бит_КурсыВалютКлиентСервер.СтруктураКурса(Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
		
	Если ПересчитатьСуммы И ЗначениеЗаполнено(ВалютаНач) Тогда
		
		КурсыДок = Новый Структура("Нач, Кон", СтрНач, СтрКон);
		
		ПересчитатьТабличныеЧастиПоВалюте(КурсыДок);
		
	КонецЕсли; // Пересчитать
	
	Если ПересчитатьСуммы Тогда
	
		ВосстановитьДерево(Истина);
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обрабатывает изменение способа актуализации. 
// 
&НаСервере
Процедура СпособАктуализацииИзменение()
	
	ОчиститьВсе();	
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура обрабатывает изменение даты начала планирования. 
// 
&НаСервере
Процедура ДатаНачалаПланированияИзменение()

	ОчиститьВсе();

	Объект.ДатаАктуализации = бит_Бюджетирование.ПолучитьНачалоПериода(Объект.ДатаАктуализации,Объект.Сценарий.бит_Периодичность);	
	
КонецПроцедуры

// Процедура обрабатывает изменение даты актуализации. 
// 
&НаСервере
Процедура ДатаАктуализацииИзменение()

	ОчиститьВсе();
	
	Объект.ДатаАктуализации = бит_Бюджетирование.ПолучитьНачалоПериода(Объект.ДатаАктуализации,Объект.Сценарий.бит_Периодичность);

КонецПроцедуры

// Процедура обрабатывает регулирование даты актуализации. 
// 
// Параметры:
//  Направление - Число.
// 
&НаСервере
Процедура ДатаАктуализацииРегулированиеСервер(Направление)

	ОчиститьВсе();	
	
	Объект.ДатаАктуализации = бит_Бюджетирование.ПолучитьНачалоПериода(Объект.ДатаАктуализации,Объект.Сценарий.бит_Периодичность);
	Объект.ДатаАктуализации = бит_Бюджетирование.ПолучитьПериодПоСдвигу(Объект.ДатаАктуализации,Направление,Объект.Сценарий.бит_Периодичность);

КонецПроцедуры

// Обрабатывает изменение контрагента. 
// 
&НаСервере
Процедура ИзменениеКонтрагента()
	
	бит_РаботаСДиалогамиСервер.ПроверитьВладельцаДоговораКонтрагентаВСтроке(Объект.Контрагент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

// Обрабатывает изменение договора контрагента. 
// 
&НаСервере
Процедура ИзменениеДоговораКонтрагента()

  бит_РаботаСДиалогамиСервер.ИзменениеДоговораКонтрагента(Объект.ДоговорКонтрагента, Объект.Контрагент);	

КонецПроцедуры

#КонецОбласти

#Область ЗависимыеОбороты

// Процедура отключает отбор в табличном поле ЗависимыеОбороты.
// 
&НаКлиенте
Процедура ОтключитьОтборЗависимые()

	Элементы.ЗависимыеОбороты.ОтборСтрок = Неопределено;

КонецПроцедуры

// Процедура устанавливает отбор в табличном поле ЗависимыеОбороты.
// 
&НаКлиенте
Процедура УстановитьОтборЗависимые(ИдСтроки)
	
	Если фУстанавливатьОтборЗависимых Тогда
		
		СтрОтбор = Новый Структура("ИД", ИдСтроки);
		СтрокаРодитель = Объект.БДДС.НайтиСтроки(СтрОтбор);
		
		Если СтрокаРодитель.Количество()>0 Тогда
			
			СтрокаБДДС = СтрокаРодитель[0];
			Элементы.ЗависимыеОбороты.ОтборСтрок = Новый ФиксированнаяСтруктура("ИД_Родитель",СтрокаБДДС.ИД);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает картинку и подсказку кнопки переключения отбора. 
// 
&НаСервере
Процедура УстановитьКартинкуКнопкиОтбор()

	Если фУстанавливатьОтборЗависимых Тогда
		
		Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Картинка  = БиблиотекаКартинок.ОтключитьОтбор;
		Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Заголовок = НСтр("ru = 'Отключить отбор'");
		
	Иначе	
		
		Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Картинка  = БиблиотекаКартинок.ОтборКомпоновкиДанных;
		Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Заголовок = НСтр("ru = 'Установить отбор'");
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция РазрешенВводЗависимыхОборотов()

	Если Объект.РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический Тогда
	  ФлРазрешен = Истина;
	Иначе	
	  ФлРазрешен = Ложь;
	КонецЕсли;

	Возврат ФлРазрешен;
	
КонецФункции

// Выполняет очистку зависимых оборотов. 
// 
&НаСервере
Процедура ОчиститьЗависимыеОбороты()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ОчиститьЗависимыеОбороты();
	ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
	
КонецПроцедуры

// Выполняет заполнение зависимых оборотов. 
// 
&НаСервере
Процедура ЗаполнитьЗависимыеОбороты()
	
	Если РазрешенВводЗависимыхОборотов() Тогда
		
		ДокОбъект = РеквизитФормыВЗначение("Объект");	
		ДокОбъект.ЗаполнитьЗависимыеОбороты();
		ЗначениеВДанныеФормы(ДокОбъект, Объект);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыКомментарийРасчета");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.КурсДокумента", ВидСравненияКомпоновкиДанных.Больше, -1);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Комментарий расчета'"));

КонецПроцедуры
 
#КонецОбласти