#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Функция подготавливает параметры проведения.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.бит_НазначениеСоответствияАналитик - ссылка на документ.
//  Отказ          - Булево - признак обнаружения ошибки и отказа от дальнейших действий.
//
// Возвращаемое значение:
//  Структура - структура параметров проведения.
//
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура(); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Сценарий КАК Сценарий,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.СторнироватьЗависимыеОбороты КАК СторнироватьЗависимыеОбороты,
	|	Реквизиты.СверхБюджета КАК СверхБюджета,
	|	Реквизиты.Сценарий.ИспользоватьКурсыСценария КАК ИспользоватьКурсыСценария,
	|	Реквизиты.Сценарий.Валюта КАК ВалютаСценария,
	|	ВЫБОР
	|		КОГДА Реквизиты.Сценарий.ПериодичностьКонтроля = ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.Месяц)
	|		ИНАЧЕ Реквизиты.Сценарий.ПериодичностьКонтроля
	|	КОНЕЦ КАК ПериодичностьКонтроля,
	|	Реквизиты.Сценарий.бит_Периодичность КАК ПериодичностьПланирования,
	|	Реквизиты.СценарийЭталон КАК СценарийЭталон,
	|	Реквизиты.РежимПринятияКУчету КАК РежимПринятияКУчету
	|ИЗ
	|	Документ.бит_АктуализацияБюджета КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить().Выгрузить();
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	
	Если НЕ бит_ОбщегоНазначения.ВалютаУпрУчетаУстановлена(Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;

	КурсыВалют = бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария(Реквизиты.Регистратор, 
											Реквизиты.Период, Новый Структура("Документ, Регл, Упр, Сценарий"));
	
	Реквизиты.Вставить("КурсыВалют", КурсыВалют);
	
	ПодготовитьТаблицы = Истина;
	ПроводитьПослеУтверждения = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения");
	Если ПроводитьПослеУтверждения И Реквизиты.РежимПринятияКУчету = 1 Тогда
		ПараметрыСтатуса = бит_Визирование.ПолучитьСтатусОбъекта(ДокументСсылка);
		ТекущийСтатус = ПараметрыСтатуса.Статус;
		Если ТекущийСтатус <> Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Утвержден Тогда
			ПодготовитьТаблицы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.СценарийЭталон = Реквизиты.Сценарий Тогда
		СценарииСовпадают = Истина;
	Иначе	
		СценарииСовпадают = Ложь;
	КонецЕсли;
	
	НомераТаблиц = Новый Структура(); 
	ТекстЗапроса = ТекстЗапросаВременнаяТаблицаДокумента(НомераТаблиц)
				 + ТекстЗапросаТаблицыВалютногоПерерасчета(НомераТаблиц)
				 + ТекстЗапросаТаблицаКонтрольныеЗначения(НомераТаблиц)
				 + ТекстЗапросаТаблицаСторноДоИзменения(НомераТаблиц);
				 
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПодготовитьТаблицы",	ПодготовитьТаблицы);
	Запрос.УстановитьПараметр("СценарииСовпадают",	СценарииСовпадают);
	
	Запрос.УстановитьПараметр("СинонимБДДС", 			 НСтр("ru = 'Данные бюджета'"));
	Запрос.УстановитьПараметр("СинонимЗависимыеОбороты", НСтр("ru = 'Зависимые обороты'"));
	Запрос.УстановитьПараметр("СинонимДоИзменения", 	 НСтр("ru = 'До изменения'"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла; 	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	Если Реквизиты.СторнироватьЗависимыеОбороты Тогда
		НаборОбороты = РегистрыНакопления.бит_ОборотыПоБюджетам.СоздатьНаборЗаписей();
		НаборОбороты.Загрузить(ПараметрыПроведения.ТаблицаСторноДоИзменения);
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоНаборуЗаписей(ДокументСсылка, НаборОбороты);
		ПараметрыПроведения.ТаблицаСторноДоИзменения = НаборОбороты.Выгрузить();
	КонецЕсли; 
	
	ПодготовитьТаблицыДокументаРасчетыВВалюте(ПараметрыПроведения, Реквизиты);	
	
	Если ПодготовитьТаблицы Тогда
		ТаблицаОборотыПоБюджетам = ПараметрыПроведения.ТаблицаКонтрольныеЗначения.Скопировать();
	Иначе
		ТаблицаОборотыПоБюджетам = Новый ТаблицаЗначений();
	КонецЕсли;
	ПараметрыПроведения.Вставить("ТаблицаОборотыПоБюджетам", ТаблицаОборотыПоБюджетам);

	Возврат ПараметрыПроведения;
	
КонецФункции 
 
// Формирует движения по регистру накопления: Контрольные значения бюджетов (БИТ).
//
// Параметры:
//  ТаблицаКонтрольныеЗначения	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты					 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения					 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ						 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияКонтрольныеЗначенияБюджетов(ТаблицаКонтрольныеЗначения, Реквизиты, Движения, Отказ) Экспорт
	
	КонтрольныеЗначения = Движения.бит_КонтрольныеЗначенияБюджетов;    
	Если ТаблицаКонтрольныеЗначения.Количество() > 0 Тогда
		ИсключаемыеПоля = Новый Массив;
		ИсключаемыеПоля.Добавить("Сценарий");
		ИсключаемыеПоля.Добавить("СтатьяОборотов");
		
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
		ИзмеренияКонтроля  = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(ИсключаемыеПоля,,,НастройкиИзмерений);
		
		// Формирование и контроль новых записей контрольных значений.
		Результат = ПодготовитьТаблицуКонтрольныхЗначений(ТаблицаКонтрольныеЗначения, ИзмеренияКонтроля, Реквизиты);
		
		ПараметрыКонтроля = Новый Структура;
		ПараметрыКонтроля.Вставить("ИзмеренияКонтроля",	  ИзмеренияКонтроля);
		ПараметрыКонтроля.Вставить("Сценарий" ,			  Реквизиты.Сценарий);
		ПараметрыКонтроля.Вставить("СверхБюджета",		  Реквизиты.СверхБюджета);
		ПараметрыКонтроля.Вставить("РежимКонтроля",		  "Бюджет");
		ПараметрыКонтроля.Вставить("Объект",			  Реквизиты.Регистратор);
		ПараметрыКонтроля.Вставить("КонтролироватьБюджет",Истина);
		
		бит_КонтрольПоБюджету.ОбработатьРезультатКонтроля(Результат, КонтрольныеЗначения, ПараметрыКонтроля, Отказ, "");
		Для каждого СтрокаТаблицы Из КонтрольныеЗначения Цикл
			СтрокаТаблицы.СценарийКонтролируемый = Реквизиты.Сценарий;
		КонецЦикла; 
	КонецЕсли;
	КонтрольныеЗначения.Записывать = Истина;
	
КонецПроцедуры

// Формирует движения по регистру накопления: Обороты по бюджетам (БИТ).
//
// Параметры:
//  ДанныеБюджета	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияОборотыПоБюджетам(ДанныеБюджета, Реквизиты, Движения, Отказ) Экспорт 
	
	Для каждого СтрокаТаблицы Из ДанныеБюджета Цикл
		Движение = Движения.бит_ОборотыПоБюджетам.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
	КонецЦикла; 
	Движения.бит_ОборотыПоБюджетам.Записывать = Истина;
	
КонецПроцедуры

// Формирует движения по регистру бухгалтерии: Журнал проводок (бюджетирование).
//
// Параметры:
//  ДанныеБюджета	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияБюджетирование(ДанныеБюджета, Реквизиты, Движения, Отказ) Экспорт 
	
	Если ДанныеБюджета.Количество() > 0 Тогда
		бит_Бюджетирование.СформироватьПроводкиБюджетирования(ДанныеБюджета,
			Движения.бит_Бюджетирование, Ложь);
	КонецЕсли;
	Движения.бит_Бюджетирование.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Инициализирует компоновщик, используемый для фильтрации структуры дерева.
// 
Функция ИнициализироватьКомпоновщикСтруктура(вхТекстЗапроса, КомпоновщикСтруктура, УникальныйИдентификатор) Экспорт
	
	АдресКомпоновкиСтруктура = "";
	
	ТекстЗапроса = бит_МеханизмПолученияДанных.АдаптироватьТекстПостроителяДляКомпоновки(вхТекстЗапроса);
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		// Создаем СКД по запросу
		СКД = бит_МеханизмПолученияДанных.СоздатьСхемуКомпоновкиПоЗапросу(ТекстЗапроса);
		// Параметр Бюджет не должен быть доступен в настройках СКД.
		Если Найти(ТекстЗапроса, "&Бюджет") > 0 Тогда
			ПараметрСКД = СКД.Параметры.Добавить();
			ПараметрСКД.Имя						= "Бюджет";
			ПараметрСКД.Заголовок				= "Бюджет";
			ПараметрСКД.ТипЗначения				= Новый ОписаниеТипов("СправочникСсылка.бит_Бюджеты");
			ПараметрСКД.ВключатьВДоступныеПоля	= Ложь;
			ПараметрСКД.ОграничениеИспользования= Ложь;
			ПараметрСКД.Значение				= Справочники.бит_Бюджеты.ПустаяСсылка();
		КонецЕсли; 

		АдресКомпоновкиСтруктура = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
		
		// Инициализируем компоновщик
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресКомпоновкиСтруктура);
		Попытка
			
			КомпоновщикСтруктура.Инициализировать(ИсточникНастроек);
			
		Исключение
			
			ТекстСообщения =  НСтр("ru = 'Не удалось инициализировать компоновщик для отбора структуры! Попробуйте обновить текст запроса в настройке формы ввода бюджета.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецПопытки;
		КомпоновщикСтруктура.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
	КонецЕсли; 
	
	Возврат АдресКомпоновкиСтруктура;
	
КонецФункции // ИнициализироватьКомпоновщикСтруктура()
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаВременнаяТаблицаДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""БДДС"" КАК ИмяСписка,
	|	&СинонимБДДС КАК ПредставлениеСписка,
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Ссылка.Сценарий КАК Сценарий,
	|	Таблица.Ссылка.ВалютаДокумента КАК Валюта,
	|	Таблица.ЦФО КАК ЦФО,
	|	Таблица.СтатьяОборотов КАК СтатьяОборотов,
	|	Таблица.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	Таблица.Количество КАК Количество,
	|	Таблица.Сумма КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	0 КАК СуммаСценарий,
	|	Таблица.Комментарий КАК Комментарий,
	|	Таблица.Аналитика_1 КАК Аналитика_1,
	|	Таблица.Аналитика_2 КАК Аналитика_2,
	|	Таблица.Аналитика_3 КАК Аналитика_3,
	|	Таблица.Аналитика_4 КАК Аналитика_4,
	|	Таблица.Аналитика_5 КАК Аналитика_5,
	|	Таблица.Аналитика_6 КАК Аналитика_6,
	|	Таблица.Аналитика_7 КАК Аналитика_7,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Таблица.Проект КАК Проект,
	|	Таблица.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Таблица.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ВременнаяТаблицаДокумента
	|ИЗ
	|	Документ.бит_АктуализацияБюджета.БДДС КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЗависимыеОбороты"",
	|	&СинонимЗависимыеОбороты,
	|	Таблица.Ссылка,
	|	Таблица.НомерСтроки,
	|	Таблица.Период,
	|	Таблица.Ссылка.Сценарий,
	|	Таблица.Ссылка.ВалютаДокумента,
	|	Таблица.ЦФО,
	|	Таблица.СтатьяОборотов,
	|	Таблица.СтатьяОборотов.СтавкаНДС,
	|	Таблица.СтатьяОборотов.ЭтоКоэффициент,
	|	Таблица.Количество,
	|	Таблица.Сумма,
	|	0,
	|	0,
	|	0,
	|	Таблица.Комментарий,
	|	Таблица.Аналитика_1,
	|	Таблица.Аналитика_2,
	|	Таблица.Аналитика_3,
	|	Таблица.Аналитика_4,
	|	Таблица.Аналитика_5,
	|	Таблица.Аналитика_6,
	|	Таблица.Аналитика_7,
	|	Таблица.Контрагент,
	|	Таблица.ДоговорКонтрагента,
	|	Таблица.Проект,
	|	Таблица.НоменклатурнаяГруппа,
	|	Таблица.БанковскийСчет
	|ИЗ
	|	Документ.бит_АктуализацияБюджета.ЗависимыеОбороты КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыВалютногоПерерасчета(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВремТаблицаПериодов",НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПериодов",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Сценарии",			НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанныеБюджета.Период КАК Период,
	|	ТаблицаДанныеБюджета.Сценарий КАК Сценарий,
	|	ТаблицаДанныеБюджета.Сценарий.ИспользоватьКурсыСценария КАК ИспользоватьКурсыСценария,
	|	ТаблицаДанныеБюджета.Сценарий.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВремТаблицаПериодов
	|ИЗ
	|	ВременнаяТаблицаДокумента КАК ТаблицаДанныеБюджета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаблицаПериодов.Период КАК Период,
	|	ВремТаблицаПериодов.Сценарий КАК Сценарий,
	|	ВремТаблицаПериодов.ИспользоватьКурсыСценария КАК ИспользоватьКурсыСценария
	|ИЗ
	|	ВремТаблицаПериодов КАК ВремТаблицаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремТаблицаПериодов.Сценарий КАК Сценарий,
	|	ВремТаблицаПериодов.Валюта КАК Валюта
	|ИЗ
	|	ВремТаблицаПериодов КАК ВремТаблицаПериодов";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ТекстЗапросаТаблицаКонтрольныеЗначения(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаКонтрольныеЗначения", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДанные.ИмяСписка КАК ИмяСписка,
	|	ТаблицаДанные.ПредставлениеСписка КАК ПредставлениеСписка,
	|	ТаблицаДанные.Ссылка КАК Ссылка,
	|	ТаблицаДанные.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанные.Период КАК Период,
	|	ТаблицаДанные.Ссылка.Сценарий КАК Сценарий,
	|	ТаблицаДанные.Ссылка.ВалютаДокумента КАК Валюта,
	|	ТаблицаДанные.ЦФО КАК ЦФО,
	|	ТаблицаДанные.СтатьяОборотов КАК СтатьяОборотов,
	|	ТаблицаДанные.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДанные.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	ТаблицаДанные.Количество КАК Количество,
	|	ТаблицаДанные.Сумма КАК Сумма,
	|	ТаблицаДанные.СуммаРегл КАК СуммаРегл,
	|	ТаблицаДанные.СуммаУпр КАК СуммаУпр,
	|	ТаблицаДанные.СуммаСценарий КАК СуммаСценарий,
	|	ТаблицаДанные.Комментарий КАК Комментарий,
	|	ТаблицаДанные.Аналитика_1 КАК Аналитика_1,
	|	ТаблицаДанные.Аналитика_2 КАК Аналитика_2,
	|	ТаблицаДанные.Аналитика_3 КАК Аналитика_3,
	|	ТаблицаДанные.Аналитика_4 КАК Аналитика_4,
	|	ТаблицаДанные.Аналитика_5 КАК Аналитика_5,
	|	ТаблицаДанные.Аналитика_6 КАК Аналитика_6,
	|	ТаблицаДанные.Аналитика_7 КАК Аналитика_7,
	|	ТаблицаДанные.Контрагент КАК Контрагент,
	|	ТаблицаДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДанные.Проект КАК Проект,
	|	ТаблицаДанные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаДанные.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	ВременнаяТаблицаДокумента КАК ТаблицаДанные";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ТекстЗапросаТаблицаСторноДоИзменения(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаСторноДоИзменения", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""ДоИзменения"" КАК ИмяСписка,
	|	&СинонимДоИзменения КАК ПредставлениеСписка,
	|	ТаблицаДанные.Ссылка КАК Ссылка,
	|	ТаблицаДанные.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанные.Ссылка.Сценарий КАК Сценарий,
	|	ТаблицаДанные.Ссылка.СценарийЭталон КАК СценарийЭталон,
	|	ТаблицаДанные.Валюта КАК Валюта,
	|	ТаблицаДанные.ЦФО КАК ЦФО,
	|	ТаблицаДанные.СтатьяОборотов КАК СтатьяОборотов,
	|	ТаблицаДанные.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДанные.Период КАК Период,
	|	ТаблицаДанные.Комментарий КАК Комментарий,
	|	-ТаблицаДанные.Количество КАК Количество,
	|	-ТаблицаДанные.Сумма КАК Сумма,
	|	-ТаблицаДанные.СуммаРегл КАК СуммаРегл,
	|	-ТаблицаДанные.СуммаУпр КАК СуммаУпр,
	|	-ТаблицаДанные.СуммаСценарий КАК СуммаСценарий,
	|	ТаблицаДанные.Аналитика_1 КАК Аналитика_1,
	|	ТаблицаДанные.Аналитика_2 КАК Аналитика_2,
	|	ТаблицаДанные.Аналитика_3 КАК Аналитика_3,
	|	ТаблицаДанные.Аналитика_4 КАК Аналитика_4,
	|	ТаблицаДанные.Аналитика_5 КАК Аналитика_5,
	|	ТаблицаДанные.Аналитика_6 КАК Аналитика_6,
	|	ТаблицаДанные.Аналитика_7 КАК Аналитика_7,
	|	ТаблицаДанные.Контрагент КАК Контрагент,
	|	ТаблицаДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДанные.Проект КАК Проект,
	|	ТаблицаДанные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаДанные.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	Документ.бит_АктуализацияБюджета.ДоИзменения КАК ТаблицаДанные
	|ГДЕ
	|	ТаблицаДанные.Ссылка = &Ссылка
	|	И &ПодготовитьТаблицы = ИСТИНА
	|	И &СценарииСовпадают";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(ПараметрыПроведения, Реквизиты)

	Если ПараметрыПроведения.ТаблицаКонтрольныеЗначения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сценарии			= ПараметрыПроведения.Сценарии;
	ТаблицаПериодов		= ПараметрыПроведения.ТаблицаПериодов;
	КонтрольныеЗначения = ПараметрыПроведения.ТаблицаКонтрольныеЗначения;
	КурсыПоПериодам		= Неопределено;
	
	Если ТаблицаПериодов.Количество() >= 1000 Тогда
		ТаблицаПериодов.Индексы.Добавить("Сценарий");
	КонецЕсли; 
	
	Если КонтрольныеЗначения.Количество() >= 1000 Тогда
		КонтрольныеЗначения.Индексы.Добавить("Сценарий");
	КонецЕсли;
	
	Если Реквизиты.ИспользоватьКурсыСценария Тогда
		Для каждого СтрокаТаблицы Из Сценарии Цикл
			
			Отбор	= Новый Структура("Сценарий", СтрокаТаблицы.Сценарий);
			Периоды = ТаблицаПериодов.Скопировать(Отбор);
			Валюты  =  бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(СтрокаТаблицы.Сценарий, Реквизиты.ВалютаДокумента);
		
			КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(Периоды, СтрокаТаблицы.Сценарий, Валюты);
			
			НайденныСтроки = КонтрольныеЗначения.НайтиСтроки(Отбор);
			бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(НайденныСтроки, 
								КурсыПоПериодам, Реквизиты.КурсыВалют);

		КонецЦикла; 
	Иначе
		
		бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(КонтрольныеЗначения, 
								Неопределено, Реквизиты.КурсыВалют);
	КонецЕсли;
							
КонецПроцедуры

Функция ПодготовитьТаблицуКонтрольныхЗначений(ТаблицаДляКонтроля, ИзмеренияКонтроля, Реквизиты)
		
	Периодичность = Реквизиты.ПериодичностьКонтроля;	
	бит_КонтрольПоБюджету.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля, ИзмеренияКонтроля, Периодичность);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля",				ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий",						Реквизиты.Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",	Истина);
	СтруктураПараметров.Вставить("РежимКонтроля",					"Бюджет");
	
	ТекстЗапроса = бит_КонтрольПоБюджету.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;	
	
	ТаблицаДляКонтроля.Сортировать("Период Возр");
	
	Если ТаблицаДляКонтроля.Количество() > 0 Тогда	   
		ДатаНачала    = ТаблицаДляКонтроля[0].Период;
		ДатаОкончания = ТаблицаДляКонтроля[ТаблицаДляКонтроля.Количество()-1].Период;	   
	Иначе	   
		ДатаНачала    = Реквизиты.Период;
		ДатаОкончания = Реквизиты.Период;	   
	КонецЕсли; 
	
	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаНачала,Периодичность);
	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаОкончания,Периодичность);
	
	МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	Запрос.УстановитьПараметр("ДатаНачала",				ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания",			ДатаКон);
	Запрос.УстановитьПараметр("СценарийКонтролируемый",	Реквизиты.Сценарий);
	Запрос.УстановитьПараметр("МассивСтатьяОборотов",	МассивСтатей);
	Запрос.УстановитьПараметр("Ссылка",					Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаДляКонтроля",		ТаблицаДляКонтроля);
	
	бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля, ИзмеренияКонтроля, Запрос);
	
	Возврат Запрос.Выполнить();

КонецФункции

#КонецОбласти

#КонецЕсли
