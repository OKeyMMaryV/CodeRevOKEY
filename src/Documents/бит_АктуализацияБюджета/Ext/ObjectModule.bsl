#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли; 
	
	ДополнительныеСвойства.Вставить("Проведен", Проведен);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("ПроводитьПослеУтверждения", 
		бит_ОбщегоНазначенияПовтИсп.ПроводитьДокументыПослеУтверждения());
	
	Если СценарийЭталон <> Сценарий Тогда
		СторнироватьЗависимыеОбороты = Ложь;
	Иначе 
		Если РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.НеФормировать Тогда
			СторнироватьЗависимыеОбороты = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьЗависимыеОбороты();
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
	ПередЗаписьюВБП(Отказ);
	
	// Заполним аналитику в шапке документа.
	бит_ОбщегоНазначения.ЗаполнитьАналитикуВШапкеДокумента(ЭтотОбъект, БДДС, Отказ);
	
	// Очистка неиспользуемых разрезов бюджетирования по статье оборотов.
	бит_Бюджетирование.ОчиститьНеИспользуемыеАналитикиСтатейОборотов(БДДС);
	бит_Бюджетирование.ОчиститьНеИспользуемыеАналитикиСтатейОборотов(ЗависимыеОбороты);
	
	Если ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ОтправленНаСогласование = Истина;
		Иначе
			ОтправленНаСогласование = Ложь;
			бит_Визирование.ОчиститьВсеВизыБезусловно(Ссылка)
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		Если ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
			// Если документ был проведен в системе ранее, без отправки на согласование,
			// при повторном проведении его движения стирать нельзя.
			Если НЕ Проведен ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				РежимПринятияКУчету = 1;
			КонецЕсли;
		Иначе
			РежимПринятияКУчету = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаПроведенияНачало(ЭтотОбъект, РежимПроведения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.бит_АктуализацияБюджета.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Документы.бит_АктуализацияБюджета.СформироватьДвиженияКонтрольныеЗначенияБюджетов(
		ПараметрыПроведения.ТаблицаКонтрольныеЗначения, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Документы.бит_АктуализацияБюджета.СформироватьДвиженияОборотыПоБюджетам(
		ПараметрыПроведения.ТаблицаОборотыПоБюджетам, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.бит_АктуализацияБюджета.СформироватьДвиженияОборотыПоБюджетам(
		ПараметрыПроведения.ТаблицаСторноДоИзменения, ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.бит_АктуализацияБюджета.СформироватьДвиженияБюджетирование(
		ПараметрыПроведения.ТаблицаОборотыПоБюджетам, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.бит_АктуализацияБюджета.СформироватьДвиженияБюджетирование(
		ПараметрыПроведения.ТаблицаСторноДоИзменения, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если НЕ Отказ Тогда
		Если НЕ ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
			// Заполним перечень виз.
			Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ ДополнительныеСвойства.Проведен Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЦФО",ЦФО);		
				бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
			КонецЕсли; 		
		КонецЕсли; 		
		// Установим статус.
		УстановитьСтатус(РежимЗаписиДокумента.Проведение);
	КонецЕсли; 
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаПроведенияЗавершение(ЭтотОбъект); 

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//++ БП
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	//-- БП
	
	Если НЕ Отказ Тогда
		// Очистим визы.
		Если НЕ ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
			бит_Визирование.ОчиститьВсеВизыБезусловно(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		СтатусНач = мТекущийСтатус;			
		УстановитьСтатус(ДополнительныеСвойства.РежимЗаписи);
		Если ДополнительныеСвойства.ПроводитьПослеУтверждения 
			И (СтатусНач = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Черновик ИЛИ НЕ ЗначениеЗаполнено(СтатусНач))  
			И ОтправленНаСогласование Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЦФО",ЦФО);		
			бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	Если СпособАктуализации = Перечисления.бит_СпособыАктуализации.ПоПрофилю Тогда
		ПроверяемыеРеквизиты.Добавить("ПрофильРаспределения");
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы Из БДДС Цикл
		Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 Тогда
			ТекстСообщения =  НСтр("ru = 'В строке №%1 табличной части ""Данные бюджета"" не заполнены ни сумма ни количество.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	бит_Бюджетирование.ПроверитьОбязательныеРазрезыСтатейОборотов(ЭтотОбъект, "БДДС", Отказ);
	
	// Установка настроек обязательности реквизитов.
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек); 

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

		// Заполнение нового документа.
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		 бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
		                                               ,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
													   ,Неопределено);
													   
        Если ЗначениеЗаполнено(Сценарий) Тогда
		
			ИзменениеСценария(Ложь);
		
		КонецЕсли; 													   
		
		ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
		СценарийФАКТ 		   = Справочники[ИмяСправочникаСценарии].ФАКТ;
		
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ВалютаДокумента      = Константы.ВалютаРегламентированногоУчета.Получить();
			КурсДокумента        = 1;
			КратностьДокумента   = 1;			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СпособАктуализации) Тогда
		
			СпособАктуализации = Перечисления.бит_СпособыАктуализации.Равномерно;
		
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДатаНачалаПланирования) Тогда
			
			ДатаНачалаПланирования = НачалоГода(ТекущаяДатаСеанса());		
			
		КонецЕсли; 
		
		Если бит_ОбщегоНазначенияПовтИсп.ПроводитьДокументыПослеУтверждения() Тогда
			РежимПринятияКУчету = 1;	
		КонецЕсли;
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// Скидываем значение флага "СверхБюджета".
	СверхБюджета = Ложь;
	// И признак начала согласования.
	ОтправленНаСогласование = Ложь;
	Ответственный = Пользователи.ТекущийПользователь();
	Если бит_ОбщегоНазначенияПовтИсп.ПроводитьДокументыПослеУтверждения() Тогда
		РежимПринятияКУчету = 1;
	Иначе
		РежимПринятияКУчету = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Сохраняет дерево данных в хранилище значения.
// 
Процедура СохранитьДерево(ТабДок) Экспорт

	ХранилищеДерева = Новый ХранилищеЗначения(ТабДок);

КонецПроцедуры

// Извлекает дерево данных из хранилища.
// 
// Возвращаемое значение:
//  ТабДок - Табличный документ.
// 
Функция ПолучитьДерево() Экспорт
	
	ТабДок = ХранилищеДерева.Получить();
	
	Если НЕ ТипЗнч(ТабДок) = Тип("ТабличныйДокумент") Тогда
		
		ТабДок = Новый ТабличныйДокумент;
		
	КонецЕсли; 
	
	Возврат ТабДок;
	
КонецФункции

// Процедура сохраняет настройки построителя.
// 
// Параметры:
//  СтруктураНастроек - Структура.
// 
Процедура СохранитьНастройкиПостроителя(СтруктураНастроек)  Экспорт
	
	НастройкиПостроителя = Новый ХранилищеЗначения(СтруктураНастроек);
	
КонецПроцедуры

// Функция получает настройки построителя.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура.
// 
Функция ПолучитьНастройкиПостроителя() Экспорт
	
	СтруктураНастроек = НастройкиПостроителя.Получить();
	
	Если НЕ ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
	
		СтруктураНастроек = Новый Структура;
	
	КонецЕсли; 
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Процедура устанавливает статус документа.
// 
// Параметры:
//  РежимЗаписи - РежимЗаписиДокумента.
// 
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено) Экспорт
	
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
	
	
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
	
		Если вхРежимЗаписи = Неопределено Тогда
			 РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			 РежимЗаписи = вхРежимЗаписи;
		КонецЕсли;
		 
		// Вычислим переменные, необходимые для установки статуса.
	    ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);
		
		
		// Определим статус.		
	    Статус = ОпределитьСтатус(мТекущийСтатус, ВсеВизыПолучены, ЕстьОтклонено, РежимЗаписи);
		
		// Если статус изменился - запишем его.
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		, Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		, Статус
																		, мТекущийСтатус
																		, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		, ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				мТекущийСтатус 		  = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
			КонецЕсли; 	
			
		КонецЕсли;
	
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
			
        РежимСообщений = ?(КомментироватьВыполнение, "Все", "Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект", ЭтотОбъект);
		
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
	КонецЕсли;	
	
КонецПроцедуры

// Функция реализует алгоритм определения статуса объекта по-умолчанию.
// 
// 
Функция ОпределитьСтатус(НачальныйСтатус, ВсеВизыПолучены, ЕстьОтклонено, вхРежимЗаписи)

    РезСтатус = НачальныйСтатус;
	
	Если бит_ОбщегоНазначенияПовтИсп.ПроводитьДокументыПослеУтверждения() Тогда
		// Алгоритм изменения статусов для режима "ПроводитьДокументыПослеУтверждения".
		Если ОтправленНаСогласование Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Рабочая;
		Иначе	
			РезСтатус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Черновик;
		КонецЕсли; 
	Иначе	
		// Алгоритм изменения статусов для обычного режима.
		Если вхРежимЗаписи = РежимЗаписиДокумента.Проведение 
			ИЛИ (вхРежимЗаписи = РежимЗаписиДокумента.Запись И Проведен) Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Рабочая;
		Иначе
			РезСтатус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Черновик;
		КонецЕсли; 
	КонецЕсли; 
    
    Если РезСтатус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Рабочая 
        ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Утвержден
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Отклонен Тогда
		
		Если ЕстьОтклонено Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Отклонен;
		Иначе	
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Утвержден;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.АктуализацияБюджета_Рабочая;
			КонецЕсли; 
		КонецЕсли;
		
    КонецЕсли; 
    
    Возврат РезСтатус;
    
КонецФункции

// Процедура очищает табличные части ФактическиеДанные и БДДС.
// 
Процедура ОчиститьТаблицы()
	
	ФактическиеДанные.Очистить();
	БДДС.Очистить();
	
КонецПроцедуры

// Устанавливает Ид в строке таб. части БДДС.
 // Параметры:
 // ТекущаяСтрока  - СтрокаТабличнойЧасти БДДС.
 // 
 Процедура УстановитьНовыйИд(ТекущаяСтрока)
	 
	 ТекущаяСтрока.ИД = Строка(Новый УникальныйИдентификатор);
	 
 КонецПроцедуры

// Функция получает фактические данные.
// 
// Параметры:
//  МассивСсылок  - Массив ссылок измерения для фильтрации.
//  ИмяИзмерения  - Строка.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ПолучитьФактическиеДанные(МассивСсылок,ИмяИзмерения, СтрПар)

	Периодичность	   = Сценарий.бит_Периодичность;
	ТекстПериодичность = бит_РаботаСМетаданными.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования,Периодичность, "Месяц");
	
	// Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ОборотыПоБюджетамОбороты.Период,
	|	бит_ОборотыПоБюджетамОбороты."+ИмяИзмерения+" КАК Измерение,
	|	СУММА(бит_ОборотыПоБюджетамОбороты.КоличествоОборот) КАК Количество,
	|    СУММА(ВЫБОР
	|		КОГДА бит_ОборотыПоБюджетамОбороты.Сценарий.Валюта <> &ВалютаДокумента
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) <> 0
	|						ТОГДА бит_ОборотыПоБюджетамОбороты.СуммаРеглОборот * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) / ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ бит_ОборотыПоБюджетамОбороты.СуммаСценарийОборот
	|	 КОНЕЦ) КАК Сумма
	|    ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			" + ТекстПериодичность + ",
	|			Сценарий = &СценарийФакт
	|				И " + ИмяИзмерения + " В (&МассивСсылок)) КАК бит_ОборотыПоБюджетамОбороты,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаЗапроса, Валюта = &ВалютаДокумента) КАК КурсыВалютСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ОборотыПоБюджетамОбороты.Период,
	|	бит_ОборотыПоБюджетамОбороты." + ИмяИзмерения;
				   
	
	КонецПериода = бит_Бюджетирование.ПолучитьКонецПериода(бит_Бюджетирование.ПолучитьНачалоПериода(ДатаАктуализации,Периодичность)-1,Периодичность);
	
	Запрос.УстановитьПараметр("МассивСсылок"   , МассивСсылок);		
	Запрос.УстановитьПараметр("НачалоПериода"  , ДатаНачалаПланирования);
	Запрос.УстановитьПараметр("КонецПериода"   , КонецПериода);
	Запрос.УстановитьПараметр("ДатаЗапроса"    , Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	Если ЗначениеЗаполнено(СценарийФакт) Тогда
		
		Запрос.УстановитьПараметр("СценарийФакт", СценарийФакт);
		
	Иначе
		
		ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
		Запрос.УстановитьПараметр("СценарийФакт", Справочники[ИмяСправочникаСценарии].ФАКТ);
		
	КонецЕсли; 
	
	// Применение отбора, настроенного с использованием компоновщика.
	Если ТипЗнч(СтрПар) = Тип("Структура") И СтрПар.Свойство("АдресКомпоновкиДанные") Тогда
		
		// Отбор устанавливается для запроса на получение плановых данных, 
		// поэтому создадим СКД по запросу для фактических данных.
		// и попробуем скопировать отбор из компоновщика для плановых данных.
		СКД = бит_МеханизмПолученияДанных.СоздатьСхемуКомпоновкиПоЗапросу(Запрос.Текст);
		АдресСКД = ПоместитьВоВременноеХранилище(СКД);
		
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
		Компоновщик.Инициализировать(ИсточникНастроек);
		Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
		// Копирование отбора
		Для каждого эоИсточник Из СтрПар.НастройкиКомпоновщикаДанные.Отбор.Элементы Цикл
			
			эо = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(эо, эоИсточник);
			
		КонецЦикла; 
		
		КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД, Компоновщик.ПолучитьНастройки());
		
		// Получаем запрос макета компоновки данных.
		Попытка
			
			Запрос.Текст = МакетСКД.НаборыДанных.НаборДанныхОсновной.Запрос;
			
		Исключение
			
			ТекстСообщения =  НСтр("ru = 'Не удалось установить отбор для получения фактических данных.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецПопытки;
		
		// Устанавливаем параметры запроса.
		ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
		Для каждого ОписаниеПараметраЗапроса Из ОписаниеПараметровЗапроса Цикл
			Если НЕ МакетСКД.ЗначенияПараметров.Найти(ОписаниеПараметраЗапроса.Имя) = Неопределено Тогда
				
				Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
				
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	
    Возврат Результат;
	
КонецФункции

// Функция получает текст запроса для получения плановых данных.
// 
// Параметры:
//  ИмяИзмерения - Строка.
// 
// Возвращаемое значение:
//  ТекстЗапроса - Строка.
// 
Функция ПодготовитьТекстЗапросаПлановыеДанные(ИмяИзмерения) Экспорт

	ТекстПериодичность = бит_РаботаСМетаданными.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования, 
									?(ЗначениеЗаполнено(Сценарий), Сценарий.бит_Периодичность, Неопределено), 
									"Месяц");	
	
	ТекстПолей = "";
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл		
		
		ИмяИзмеренияПоле = ТекИзмерение.Имя;
		Если ИмяИзмеренияПоле = "Валюта" Или ИмяИзмеренияПоле = "Сценарий" Или ИмяИзмеренияПоле = "ЦФО" Или ИмяИзмеренияПоле = "СтатьяОборотов"  Тогда
			Продолжить;		
		КонецЕсли;
		
		// Поля запроса
		ТекстПолей = ТекстПолей + Символы.ПС + "	бит_ОборотыПоБюджетамОбороты." + ИмяИзмеренияПоле + ",";
				
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ОборотыПоБюджетамОбороты.ПериодМесяц КАК Период,
	|	бит_ОборотыПоБюджетамОбороты." + ИмяИзмерения + " КАК Измерение,
	|	&СценарийАктуализация КАК Сценарий,
	|" + ТекстПолей + "
	|	бит_ОборотыПоБюджетамОбороты.ЦФО,
	|	бит_ОборотыПоБюджетамОбороты.СтатьяОборотов,
	|	бит_ОборотыПоБюджетамОбороты.Валюта,
	|	СУММА(бит_ОборотыПоБюджетамОбороты.КоличествоОборот) КАК Количество,
	|	СУММА(бит_ОборотыПоБюджетамОбороты.КоличествоОборот) КАК КоличествоДоИзменения,
	|	СУММА(бит_ОборотыПоБюджетамОбороты.СуммаОборот) КАК СуммаДоИзменения,
	|	СУММА(бит_ОборотыПоБюджетамОбороты.СуммаРеглОборот) КАК СуммаРеглДоИзменения,
	|	СУММА(бит_ОборотыПоБюджетамОбороты.СуммаУпрОборот) КАК СуммаУпрДоИзменения,
	|	СУММА(бит_ОборотыПоБюджетамОбороты.СуммаСценарийОборот) КАК СуммаСценарийДоИзменения,
	|	СУММА(ВЫБОР
	|			КОГДА бит_ОборотыПоБюджетамОбороты.Сценарий.Валюта <> &ВалютаДокумента
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) <> 0
	|							ТОГДА бит_ОборотыПоБюджетамОбороты.СуммаРеглОборот * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) / ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ бит_ОборотыПоБюджетамОбороты.СуммаСценарийОборот
	|		КОНЕЦ) КАК Сумма,
	|	бит_ОборотыПоБюджетамОбороты.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК НДС
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Авто,
	|			Сценарий = &Сценарий
	|				И " + ИмяИзмерения + " В (&МассивСсылок)) КАК бит_ОборотыПоБюджетамОбороты,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаЗапроса, Валюта = &ВалютаДокумента) КАК КурсыВалютСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ОборотыПоБюджетамОбороты.ПериодМесяц,
	|	бит_ОборотыПоБюджетамОбороты.СтатьяОборотов,
	|	бит_ОборотыПоБюджетамОбороты.Сценарий,
	|	бит_ОборотыПоБюджетамОбороты.ЦФО,
	|" + ТекстПолей + "
	|	бит_ОборотыПоБюджетамОбороты.СтатьяОборотов.СтавкаНДС,
	|	бит_ОборотыПоБюджетамОбороты.СтатьяОборотов,
	|	бит_ОборотыПоБюджетамОбороты.Валюта
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция получает плановые данные по бюджету.
// 
// Параметры:
//  МассивСсылок  - Массив ссылок измерения для фильтрации.
//  ИмяИзмерения  - Строка.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ПолучитьПлановыеДанные(МассивСсылок, ИмяИзмерения, СтрПар)

	Запрос = Новый Запрос;
	Запрос.Текст = ПодготовитьТекстЗапросаПлановыеДанные(ИмяИзмерения);
	
	ПараметрыСценария		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, "бит_Периодичность, ПродолжительностьИнтервала");
	Периодичность			= ПараметрыСценария.бит_Периодичность;
	КоличествоИнтервалов	= ПараметрыСценария.ПродолжительностьИнтервала;
	Если ЗначениеЗаполнено(ДатаОкончанияПланирования) Тогда
		ДатаОкончания = ДатаОкончанияПланирования;
	Иначе	
		ДатаОкончания = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ДатаНачалаПланирования,КоличествоИнтервалов-1,Периодичность);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("МассивСсылок",			МассивСсылок);		
	Запрос.УстановитьПараметр("НачалоПериода",			ДатаНачалаПланирования);
	Запрос.УстановитьПараметр("КонецПериода",			ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаЗапроса",			Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента",		ВалютаДокумента);
	Запрос.УстановитьПараметр("Сценарий",				СценарийЭталон);
	Запрос.УстановитьПараметр("СценарийАктуализация",	Сценарий);
	
	// Применение отбора, настроенного с использованием компоновщика.
	Если ТипЗнч(СтрПар) = Тип("Структура")
		И СтрПар.Свойство("АдресКомпоновкиДанные") 
		И ЭтоАдресВременногоХранилища(СтрПар.АдресКомпоновкиДанные) Тогда
		
		СКД = ПолучитьИзВременногоХранилища(СтрПар.АдресКомпоновкиДанные);
		КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД, СтрПар.НастройкиКомпоновщикаДанные);
		
		// Получаем запрос макета компоновки данных.
		Попытка
			Запрос.Текст = МакетСКД.НаборыДанных.НаборДанныхОсновной.Запрос;
		Исключение
			ТекстСообщения =  НСтр("ru = 'Не удалось установить отбор для получения плановых данных.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецПопытки;
		
		// Устанавливаем параметры запроса.
		ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
		Для каждого ОписаниеПараметраЗапроса Из ОписаниеПараметровЗапроса Цикл
			Если НЕ МакетСКД.ЗначенияПараметров.Найти(ОписаниеПараметраЗапроса.Имя) = Неопределено Тогда
				Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	ТекстПериодичность = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования, Периодичность);
	Если Периодичность <> Перечисления.бит_ПериодичностьПланирования.Месяц Тогда
		ТекстПериодичность = "бит_ОборотыПоБюджетамОбороты.Период" + ТекстПериодичность;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "бит_ОборотыПоБюджетамОбороты.ПериодМесяц", ТекстПериодичность); 
	КонецЕсли;
	Результат = Запрос.Выполнить();
	
    Возврат Результат;
	
КонецФункции

// Процедура выполняет актуализацию.
// 
// 
Процедура ВыполнитьАктуализацию() Экспорт

	РеквизитыСценария 	 = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, "бит_Периодичность, ПродолжительностьИнтервала");
	Периодичность        = РеквизитыСценария.бит_Периодичность;
	КоличествоИнтервалов = РеквизитыСценария.ПродолжительностьИнтервала;
	
	ПериодичностьСтр = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования,Периодичность);
	КоличествоИнтерваловФакт = бит_Бюджетирование.РазностьДат(ДатаНачалаПланирования,ДатаАктуализации,ПериодичностьСтр);
	КоличествоИнтерваловПлан = КоличествоИнтервалов - КоличествоИнтерваловФакт;
	
	ТаблицаФакт = ФактическиеДанные.Выгрузить();
	ТаблицаФакт.Сортировать("Период");
	
	ТаблицаПлан = БДДС.Выгрузить();
	ТаблицаПлан.Сортировать("Период");
	
	// Сформируем сетку дат для дополнения таблицы план.
	ТаблицаПериоды = СформироватьТаблицуПериодов(ДатаНачалаПланирования,Периодичность,КоличествоИнтервалов);
	
	Профиль = Новый Соответствие;
	
	Если СпособАктуализации = Перечисления.бит_СпособыАктуализации.ПоПрофилю 
	   И ЗначениеЗаполнено(ПрофильРаспределения) Тогда
		
		// Подготовка коффициентов по периодам
		Коэффициенты = Справочники.бит_ПрофилиРаспределенияПоПериодам.ПолучитьКоээфициенты(ПрофильРаспределения, "К");
		
		Счетчик = 1;
		Для каждого СтрокаПериод Из ТаблицаПериоды Цикл
			
			Если СтрокаПериод.Период >= ДатаАктуализации Тогда
				// Периоды профиля начинаем отсчитывать с начала актуализации с 1.
				ТекКоэфф = Коэффициенты[Счетчик];
				Если НЕ ТипЗнч(ТекКоэфф) = Тип("Число") Тогда
					ТекКоэфф = 0;
				КонецЕсли; 
				Счетчик = Счетчик + 1;			
			Иначе
				ТекКоэфф = 0;
			КонецЕсли; 
			
			Профиль.Вставить(СтрокаПериод.Период, ТекКоэфф);			
			
		КонецЦикла; 
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый	МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаФакт",			ТаблицаФакт);
	Запрос.УстановитьПараметр("ТаблицаПлан",			ТаблицаПлан);
	Запрос.УстановитьПараметр("ТаблицаПериоды",			ТаблицаПериоды);
	Запрос.УстановитьПараметр("ДатаАктуализации"      ,	ДатаАктуализации);
	Запрос.УстановитьПараметр("ДатаНачалаПланирования",	ДатаНачалаПланирования);
	Запрос.УстановитьПараметр("КоличествоИнтервалов",	КоличествоИнтервалов);
	Запрос.УстановитьПараметр("Пропорционально",	СпособАктуализации = Перечисления.бит_СпособыАктуализации.Пропорционально);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФакт.Измерение КАК Измерение,
	|	ТаблицаФакт.Сумма КАК Сумма,
	|	ТаблицаФакт.Количество КАК Количество,
	|	ТаблицаФакт.Период КАК Период
	|ПОМЕСТИТЬ Факт
	|ИЗ
	|	&ТаблицаФакт КАК ТаблицаФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПлан.Измерение КАК Измерение,
	|	ТаблицаПлан.Период КАК Период,
	|	ТаблицаПлан.Сумма КАК Сумма,
	|	ТаблицаПлан.Количество КАК Количество,
	|	ТаблицаПлан.Ид КАК Ид
	|ПОМЕСТИТЬ План
	|ИЗ
	|	&ТаблицаПлан КАК ТаблицаПлан
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериоды.Период КАК Период
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	&ТаблицаПериоды КАК ТаблицаПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.Период КАК Период,
	|	План.Измерение КАК Измерение
	|ПОМЕСТИТЬ ПериодИзмерение
	|ИЗ
	|	Периоды КАК Периоды,
	|	План КАК План
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	План.Измерение КАК Измерение,
	|	План.Период КАК Период,
	|	План.Сумма КАК Сумма,
	|	План.Количество КАК Количество,
	|	План.Ид КАК ИД,
	|	1 КАК ЧислоПериодовПлан
	|ПОМЕСТИТЬ ПланПолный
	|ИЗ
	|	План КАК План
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодИзмерение.Измерение,
	|	ПериодИзмерение.Период,
	|	0,
	|	0,
	|	-99999999,
	|	ВЫБОР КОГДА &Пропорционально ТОГДА 0 ИНАЧЕ 1 КОНЕЦ
	|ИЗ
	|	ПериодИзмерение КАК ПериодИзмерение
	|		ЛЕВОЕ СОЕДИНЕНИЕ План КАК План
	|		ПО (План.Измерение = ПериодИзмерение.Измерение)
	|			И (План.Период = ПериодИзмерение.Период)
	|ГДЕ
	|	План.Измерение ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Факт.Измерение КАК Измерение,
	|	СУММА(Факт.Сумма) КАК Сумма,
	|	СУММА(Факт.Количество) КАК Количество,
	|	Факт.Период КАК Период
	|ПОМЕСТИТЬ ИтогиПоФактуВПериоде
	|ИЗ
	|	Факт КАК Факт
	|
	|СГРУППИРОВАТЬ ПО
	|	Факт.Измерение,
	|	Факт.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Факт.Измерение КАК Измерение,
	|	СУММА(Факт.Сумма) КАК Сумма,
	|	СУММА(Факт.Количество) КАК Количество
	|ПОМЕСТИТЬ ИтогиПоФакту
	|ИЗ
	|	Факт КАК Факт
	|
	|СГРУППИРОВАТЬ ПО
	|	Факт.Измерение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	План.Измерение КАК Измерение,
	|	План.Период КАК Период,
	|	СУММА(План.Сумма) КАК Сумма,
	|	СУММА(План.Количество) КАК Количество
	|ПОМЕСТИТЬ Запланировано
	|ИЗ
	|	План КАК План
	|
	|СГРУППИРОВАТЬ ПО
	|	План.Измерение,
	|	План.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	План.Измерение КАК Измерение,
	|	СУММА(План.Сумма) КАК Сумма,
	|	СУММА(План.Количество) КАК Количество
	|ПОМЕСТИТЬ Актуализировать
	|ИЗ
	|	План КАК План
	|ГДЕ
	|	План.Период >= &ДатаАктуализации
	|
	|СГРУППИРОВАТЬ ПО
	|	План.Измерение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	План.Измерение КАК Измерение,
	|	СУММА(План.Сумма) КАК Сумма,
	|	СУММА(План.Количество) КАК Количество
	|ПОМЕСТИТЬ ИсполненныйПлан
	|ИЗ
	|	План КАК План
	|ГДЕ
	|	План.Период < &ДатаАктуализации
	|
	|СГРУППИРОВАТЬ ПО
	|	План.Измерение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ИсполненныйПлан.Измерение, ИтогиПоФакту.Измерение) КАК Измерение,
	|	ЕСТЬNULL(ИтогиПоФакту.Сумма, 0) - ЕСТЬNULL(ИсполненныйПлан.Сумма, 0) КАК СуммаАктуализация,
	|	ЕСТЬNULL(ИтогиПоФакту.Количество, 0) - ЕСТЬNULL(ИсполненныйПлан.Количество, 0) КАК КоличествоАктуализация,
	|	РАЗНОСТЬДАТ(&ДатаНачалаПланирования, &ДатаАктуализации, МЕСЯЦ) КАК КоличествоИнтерваловФакт,
	|	&КоличествоИнтервалов - РАЗНОСТЬДАТ(&ДатаНачалаПланирования, &ДатаАктуализации, МЕСЯЦ) КАК КоличествоИнтерваловПлан
	|ПОМЕСТИТЬ СуммыАктуализации
	|ИЗ
	|	ИсполненныйПлан КАК ИсполненныйПлан
	|		ПОЛНОЕ СОЕДИНЕНИЕ ИтогиПоФакту КАК ИтогиПоФакту
	|		ПО ИсполненныйПлан.Измерение = ИтогиПоФакту.Измерение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолныйПлан.ИД КАК Ид,
	|	ПолныйПлан.Измерение КАК Измерение,
	|	ПолныйПлан.Период КАК Период,
	|	0 КАК КоэффициентПериодСумма,
	|	0 КАК КоэффициентПериодКоличество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Запланировано.Сумма, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ПолныйПлан.Сумма / Запланировано.Сумма
	|	КОНЕЦ КАК КоэффициентСумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Запланировано.Количество, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ПолныйПлан.Количество / Запланировано.Количество
	|	КОНЕЦ КАК КоэффициентКоличество,
	|	ЕСТЬNULL(СуммыАктуализации.СуммаАктуализация, 0) КАК СуммаКАктуализации,
	|	ЕСТЬNULL(СуммыАктуализации.КоличествоАктуализация, 0) КАК КоличествоКАктуализации,
	|	ЕСТЬNULL(Запланировано.Сумма, 0) КАК СуммаИтог,
	|	ЕСТЬNULL(Запланировано.Количество, 0) КАК КоличествоИтог,
	|	ЕСТЬNULL(ИтогиПоФактуВПериоде.Сумма, 0) КАК СуммаФакт,
	|	ЕСТЬNULL(ИтогиПоФактуВПериоде.Количество, 0) КАК КоличествоФакт,
	|	ПолныйПлан.Сумма КАК Сумма,
	|	ПолныйПлан.Количество КАК Количество,
	|	Актуализировать.Сумма КАК СуммаПлан,
	|	Актуализировать.Количество КАК КоличествоПлан,
	|	ЕСТЬNULL(Запланировано.Сумма, 0) КАК СуммаПланИтог,
	|	ЕСТЬNULL(ИтогиПоФактуВПериоде.Сумма, 0) КАК СуммаФактИтог,
	|	ЕСТЬNULL(Запланировано.Количество, 0) КАК КоличествоПланИтог,
	|	ЕСТЬNULL(ИтогиПоФактуВПериоде.Количество, 0) КАК КоличествоФактИтог,
	|	0 КАК К1,
	|	ПолныйПлан.ЧислоПериодовПлан КАК ЧислоПериодовПлан
	|ИЗ
	|	ПланПолный КАК ПолныйПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ Запланировано КАК Запланировано
	|		ПО ПолныйПлан.Измерение = Запланировано.Измерение
	|			И ПолныйПлан.Период = Запланировано.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыАктуализации КАК СуммыАктуализации
	|		ПО ПолныйПлан.Измерение = СуммыАктуализации.Измерение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиПоФактуВПериоде КАК ИтогиПоФактуВПериоде
	|		ПО ПолныйПлан.Измерение = ИтогиПоФактуВПериоде.Измерение
	|			И ПолныйПлан.Период = ИтогиПоФактуВПериоде.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Актуализировать КАК Актуализировать
	|		ПО ПолныйПлан.Измерение = Актуализировать.Измерение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Измерение,
	|	Период,
	|	Ид
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МАКСИМУМ(СуммаПлан), 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ СУММА(ПолныйПлан.Сумма) / МАКСИМУМ(СуммаПлан)
	|	КОНЕЦ КАК КоэффициентПериодСумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МАКСИМУМ(КоличествоПлан), 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ СУММА(ПолныйПлан.Количество) / МАКСИМУМ(КоличествоПлан)
	|	КОНЕЦ КАК КоэффициентПериодКоличество,
	|	МАКСИМУМ(СуммаКАктуализации),
	|	МАКСИМУМ(КоличествоКАктуализации),
	|	МАКСИМУМ(СуммаИтог),
	|	МАКСИМУМ(КоличествоИтог),
	|	МАКСИМУМ(СуммаФакт),
	|	МАКСИМУМ(КоличествоФакт),
	|	СУММА(КоличествоПлан),
	|	СУММА(СуммаПланИтог),
	|	СУММА(СуммаФактИтог),
	|	СУММА(КоличествоПланИтог),
	|	СУММА(КоличествоФактИтог),
	|	СУММА(ЧислоПериодовПлан)
	|ПО
	|	Измерение,
	|	Период";				   
	
	Результат = Запрос.Выполнить();
	ДеревоАктуализация = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Подготовка дополнительных параметров для проведения актуализации.
	НастрФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(НастройкаФормы);
	МассивИменРазворачивать = НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать];
	
	МетаОбъект = Метаданные();
	СтрЗначенияПоУмолчанию  = Новый Структура;
	МассивИменПоУмолчанию   = НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию];
	Для каждого ТекИмяИзмерения Из НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчаниюРедактирование]  Цикл
	
		МассивИменПоУмолчанию.Добавить(ТекИмяИзмерения);
	
	КонецЦикла; 
	Для каждого ИмяИзмерения Из МассивИменПоУмолчанию Цикл
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяИзмерения,МетаОбъект) 
			 И бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(ИмяИзмерения,МетаОбъект,"БДДС") 
			 И ЗначениеЗаполнено(ЭтотОбъект[ИмяИзмерения]) Тогда
		
			  СтрЗначенияПоУмолчанию.Вставить(ИмяИзмерения, ЭтотОбъект[ИмяИзмерения]);
		
		КонецЕсли; 
	КонецЦикла; 	
	
	СтрПар = Новый Структура;
	СтрПар.Вставить("ИменаРазворачивать", МассивИменРазворачивать);
	СтрПар.Вставить("ЗначенияПоУмолчанию", СтрЗначенияПоУмолчанию);
	СтрПар.Вставить("Профиль", Профиль);
	
	// Выполнение актуализации.
	КоличествоИзмерений = ДеревоАктуализация.Строки.Количество();
	Счетчик = 1;
	Для каждого СтрокаИзмерение Из ДеревоАктуализация.Строки Цикл
		
		Если НастройкаФормы.Учет_Сумма Тогда
			Если СтрокаИзмерение.СуммаФактИтог < СтрокаИзмерение.СуммаПланИтог Тогда
				ВыполнитьАктуализациюПоИзмерению(СтрокаИзмерение,КоличествоИнтерваловПлан,"Сумма", СтрПар);
			КонецЕсли; 
		КонецЕсли; 
		
		Если НастройкаФормы.Учет_Количество Тогда
			Если СтрокаИзмерение.КоличествоФактИтог< СтрокаИзмерение.КоличествоПланИтог Тогда
				ВыполнитьАктуализациюПоИзмерению(СтрокаИзмерение,КоличествоИнтерваловПлан,"Количество", СтрПар);
			КонецЕсли; 
		КонецЕсли; 
		
		Счетчик = Счетчик+1;	
	КонецЦикла;
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("Сумма", 0);
	СтрОтбор.Вставить("Количество", 0);
	
	МассивСтрок = БДДС.НайтиСтроки(СтрОтбор);
	
	Для каждого ТекущаяСтрока Из МассивСтрок Цикл
	
		БДДС.Удалить(ТекущаяСтрока);
	
	КонецЦикла; 
	
    АктуализацияВыполнена = Истина;
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалюты() Экспорт
	
	СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий,ВалютаДокумента,Дата);
	КурсДокумента      = СтрКурса.Курс;
	КратностьДокумента = СтрКурса.Кратность;
	
КонецПроцедуры

// Процедура обрабатывает изменение сценария в шапке документа.
// 
Процедура ИзменениеСценария(ОчищатьДанные = Истина)  Экспорт

	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		Если ОчищатьДанные Тогда
			
			ОчиститьТаблицы();
			
		КонецЕсли; 
		
		ВалютаДокумента = Сценарий.Валюта;
		ИзменениеВалюты();
		
	КонецЕсли; 

КонецПроцедуры

// Процедура очищает табличную часть ЗависимыеОбороты.
// 
// Параметры:
//  Нет.
// 
Процедура ОчиститьЗависимыеОбороты() Экспорт

	ЗависимыеОбороты.Очистить();

КонецПроцедуры

// Процедура заполняет табличную часть ЗависимыеОбороты.
// 
// Параметры:
//  Нет.
// 
Процедура ЗаполнитьЗависимыеОбороты() Экспорт

	УстановитьПривилегированныйРежим(Истина);	
	
	ОчиститьЗависимыеОбороты();
	
	Если НЕ ЗначениеЗаполнено(РежимЗависимыхОборотов)
		ИЛИ РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.НеФормировать Тогда
		// Не формируем зависимые обороты.
		Возврат;
	КонецЕсли;
	
	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","имя");
	
	МаксПериод = бит_Бюджетирование.ПолучитьМаксПериод(БДДС);		
	НастройкиЗависимыхОборотов = бит_Бюджетирование.ПолучитьНастройкиЗависимыхОборотов(Сценарий, МаксПериод);		
	
	Для каждого СтрокаТаблицы Из БДДС Цикл
		ПараметрыФормирования = бит_Бюджетирование.НовыеПараметрыФормированияЗависмыхОборотовПоСтроке();
		ПараметрыФормирования.ДатаЗаполнения 			= СтрокаТаблицы.Период;
		ПараметрыФормирования.ТекущийОбъект 			= ЭтотОбъект;
		ПараметрыФормирования.СтрокаТабличнойЧасти		= СтрокаТаблицы;
		ПараметрыФормирования.ИмяТабличнойЧастиИсточник = "БДДС";
		ПараметрыФормирования.ИмяТабличнойЧастиПриемник = "ЗависимыеОбороты";
		ПараметрыФормирования.ИзмеренияБюджетирования	= Измерения;
		ПараметрыФормирования.вхНастройкиЗависимых		= НастройкиЗависимыхОборотов;

		бит_Бюджетирование.СформироватьЗависимыеОборотыПоСтроке(ПараметрыФормирования);
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует таблицу с сеткой дат, исходя из даты начала и периодичности.
// 
// Параметры:
//  ДатаНачала     - Дата.
//  Периодичность  - ПеречислениеСсылка.бит_ПериодичностьПланирования.
// 
// Возвращаемое значение:
//   ТаблицаПериоды - ТаблицаЗначений.
// 
Функция СформироватьТаблицуПериодов(ДатаНачала,Периодичность,КоличествоИнтервалов)

	ТаблицаПериоды = Новый ТаблицаЗначений;
	ТаблицаПериоды.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Для Сч = 1 По КоличествоИнтервалов Цикл
		ТекущаяДата = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ДатаНачала, Сч-1, Периодичность);
		НоваяСтрока = ТаблицаПериоды.Добавить();
		НоваяСтрока.Период = ТекущаяДата;
	КонецЦикла;	

    Возврат ТаблицаПериоды;
	
КонецФункции

// Процедура выполняет актуализацию для указанного измерения.
// 
// Параметры:
//  СтрокаИзмерение          - СтрокаДерева.
//  КоличествоИнтерваловПлан - Число.
//  ИмяРеквизита             - Строка.
// 
Процедура ВыполнитьАктуализациюПоИзмерению(СтрокаИзмерение, КоличествоИнтерваловПлан, ИмяРеквизита, ПараметрыРаспределения)

	// Определим параметры необходимы для выполнения актуализации.
	ТочностьОкругления = ?(ИмяРеквизита = "Сумма", 2, 3);
	ПолеКАктуализации 	   = ИмяРеквизита + "КАктуализации";
	ПолеФакт          	   = ИмяРеквизита + "Факт";
	ПолеФактИтог      	   = ИмяРеквизита + "ФактИтог";	
	ПолеПланИтог      	   = ИмяРеквизита + "ПланИтог";	
	ПолеКоэффициент        = "Коэффициент" + ИмяРеквизита;
	ПолеКоэффициентПериода = "КоэффициентПериод" + ИмяРеквизита;
	
	Профиль    = ПараметрыРаспределения.Профиль;
	МассивИмен = ПараметрыРаспределения.ИменаРазворачивать;
	
	ЧислоНенулевыхИнтервалов = КоличествоИнтерваловПлан;
	Ном = 0;
	Пока Окр(СтрокаИзмерение[ПолеКАктуализации],ТочностьОкругления)<>0 Цикл
		
		// Защита от бесконечных циклов. Если за 10 циклов не актуализировали - выходим.
		Если Ном>10 Тогда
			Возврат;
		КонецЕсли; 
		
		ПоказательКАктуализацииНач    = СтрокаИзмерение[ПолеКАктуализации];
		ПоказательКАктуализацииПериод = ?(ЧислоНенулевыхИнтервалов <> 0,
										СтрокаИзмерение[ПолеКАктуализации]/ЧислоНенулевыхИнтервалов,
										СтрокаИзмерение[ПолеКАктуализации]);
										
		// Подготовка счетчиков периодов и строк. 
		// Чтобы исключить рассчет на последней итерации циклов и списывать все что осталось.
		Если СпособАктуализации = Перечисления.бит_СпособыАктуализации.ПоПрофилю Тогда
			КоличествоПериодов = 0;
			ПоследнийПериод    = Дата(1,1,1);
			Для каждого КлючЗначение Из Профиль Цикл
				Если КлючЗначение.Значение <> 0 Тогда
					КоличествоПериодов = КоличествоПериодов + 1;
					Если КлючЗначение.Ключ > ПоследнийПериод Тогда
						ПоследнийПериод = КлючЗначение.Ключ;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		Иначе
			КоличествоПериодов = СтрокаИзмерение.ЧислоПериодовПлан;
		КонецЕсли; 
		
		Для каждого СтрокаПериод Из СтрокаИзмерение.Строки Цикл  // По периодам
			
			ЧислоСтрок = 0;
			Если СпособАктуализации = Перечисления.бит_СпособыАктуализации.ПоПрофилю Тогда
				
				// Установка коээфициентов по профилю.
				Коэффициент = Профиль[СтрокаПериод.Период];
				Коэффициент = ?(ТипЗнч(Коэффициент) = Тип("Число"), Коэффициент, 0);
				СтрокаПериод.КоэффициентПериодСумма      = Коэффициент;
				СтрокаПериод.КоэффициентПериодКоличество = Коэффициент;

				Если СтрокаПериод.Период = ПоследнийПериод Тогда
					КоличествоПериодов            = 0;
					ПоказательКАктуализацииПериод = СтрокаИзмерение[ПолеКАктуализации];
				Иначе
					ПоказательКАктуализацииПериод = Окр(СтрокаПериод[ПолеКоэффициентПериода] * ПоказательКАктуализацииНач, ТочностьОкругления);
				КонецЕсли;
				Если СтрокаПериод.Период >= ДатаАктуализации Тогда
					Для каждого СтрокаТаблицы Из СтрокаПериод.Строки Цикл
						Если СтрокаТаблицы[ИмяРеквизита] > 0 ИЛИ ПоказательКАктуализацииПериод <= 0  Тогда
							ЧислоСтрок = ЧислоСтрок + 1;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли;
				
			ИначеЕсли СпособАктуализации = Перечисления.бит_СпособыАктуализации.Пропорционально Тогда
				ПоказательКАктуализацииПериод = Окр(СтрокаПериод[ПолеКоэффициентПериода] * ПоказательКАктуализацииНач, ТочностьОкругления);
			КонецЕсли; 
			
			Если СпособАктуализации <> Перечисления.бит_СпособыАктуализации.ПоПрофилю Тогда
				Если СтрокаПериод.Период >= ДатаАктуализации Тогда
					КоличествоПериодов = КоличествоПериодов - 1;
					Если КоличествоПериодов = 0 Тогда
						// Последняя итерация по периодам.
						ПоказательКАктуализацииПериод = СтрокаИзмерение[ПолеКАктуализации];
					КонецЕсли; 
					Для каждого СтрокаТаблицы Из СтрокаПериод.Строки Цикл
						Если СтрокаТаблицы[ИмяРеквизита] > 0 ИЛИ ПоказательКАктуализацииПериод <= 0  Тогда
							ЧислоСтрок = ЧислоСтрок + 1;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли;	
			КонецЕсли;	
			
			// Если остаток к актуализации мал, не смысла дробить его по периодам.
			// Актуализируем все в текущем периоде.
			Если бит_ОбщегоНазначения.МодульЧисла(СтрокаИзмерение[ПолеКАктуализации]) <= 1 Тогда
				ПоказательКАктуализацииПериод = СтрокаИзмерение[ПолеКАктуализации];
			КонецЕсли; 
			
			// Остаток фактических данных, подлежащий к актуализации.
			ПоказательФактПериод = СтрокаПериод[ПолеФакт];
			
			// Служит для накопления уже актуализированных данных в текущем периоде.
			Итог = 0;
			// Служит для накопления итогов по данным с учетом проведенной актуализации в текущем периоде.
			ИтогДанные = 0;
						
			Для каждого СтрокаДетали Из СтрокаПериод.Строки Цикл // По строкам
				
				СтрокаДанных = БДДС.Найти(СтрокаДетали.Ид,"ИД");
				Если СтрокаДанных = Неопределено Тогда
					
					// Если необходимо добавить данные, и строки в периоде нет, то создаем новую строку.
					Если (СтрокаПериод.Период >= ДатаАктуализации И ПоказательКАктуализацииПериод < 0) 
						  ИЛИ (СтрокаПериод.Период < ДатаАктуализации И ПоказательФактПериод > 0) Тогда
						СтрокаДанных = БДДС.Добавить();
						СтрокаДанных.Период    = СтрокаДетали.Период;
						СтрокаДанных.Измерение = СтрокаДетали.Измерение;
						Для каждого КиЗ Из ПараметрыРаспределения.ЗначенияПоУмолчанию Цикл
						
							СтрокаДанных[КиЗ.Ключ] = КиЗ.Значение;
						
						КонецЦикла; 
						Если МассивИмен <> Неопределено Тогда
							ИмяРеквизитаИзмерение = МассивИмен[0];
							СтрокаДанных[ИмяРеквизитаИзмерение] = СтрокаДетали.Измерение;
						КонецЕсли; 
						УстановитьНовыйИд(СтрокаДанных);
						СтрокаДетали.ИД = СтрокаДанных.ИД;
					Иначе	
						Продолжить;
					КонецЕсли; 
					
				КонецЕсли; 
				
				Если СтрокаДетали.Период >=ДатаАктуализации Тогда 
					// Актуализацию выполняем если в строке данных показатель имеет положительное значение.
					// Или ПоказательКАктуализацииПериод отрицательныый, т.е. происходит увеличение плановых данных.
					Если СтрокаДанных[ИмяРеквизита] > 0 ИЛИ ПоказательКАктуализацииПериод <= 0 Тогда
						
						ЧислоСтрок = ЧислоСтрок - 1;
						Если ЧислоСтрок = 0 И КоличествоПериодов = 0 Тогда
							// Последняя итерация по строкам. Больше распределений не будет.
							СуммаАктуализации = СтрокаИзмерение[ПолеКАктуализации];
						Иначе
							СуммаАктуализации  = Окр(Мин(СтрокаДетали[ПолеКоэффициент]*ПоказательКАктуализацииПериод,СтрокаДанных[ИмяРеквизита]),ТочностьОкругления);
						КонецЕсли; 
						
						СтрокаДанных[ИмяРеквизита] = СтрокаДанных[ИмяРеквизита]-СуммаАктуализации;
						Итог = Итог+СуммаАктуализации;
						ИтогДанные = ИтогДанные+СтрокаДанных[ИмяРеквизита];
						СтрокаИзмерение[ПолеКАктуализации] = СтрокаИзмерение[ПолеКАктуализации]-СуммаАктуализации;
						// Весь остаток подлежещий актуализации распределили - выходим.
						Если Окр(бит_ОбщегоНазначения.МодульЧисла(СтрокаИзмерение[ПолеКАктуализации]),ТочностьОкругления)<=0 Тогда
							Прервать;
						КонецЕсли; 
					КонецЕсли; 
				Иначе 
					// ФАКТ
					// Фактические данные просто заменяют плановые. 
					// В строках распределяем данные согласно коэффициентов строк.
					// Коэффициенты вычисляется пропорционально вкладам строк в текущем периоде.
					Если ПоказательФактПериод>=0 И Ном = 0 Тогда
						
						Если НеАктуализироватьФактБольшеПлана И СтрокаПериод[ПолеФактИтог] > СтрокаПериод[ПолеПланИтог] Тогда
							// В данном режиме, если факт больше плана, оставляем план как есть.
							// А сумму актуализации уменьшаем.
							Итог = Итог+СтрокаДанных[ИмяРеквизита];	
							ПоказательФактПериод = Итог;
							
						Иначе	
							
							СтрокаДанных[ИмяРеквизита] = СтрокаДетали[ПолеКоэффициент]*ПоказательФактПериод;
							Итог = Итог+СтрокаДанных[ИмяРеквизита];	
							СтрокаПериод[ПолеФакт] = СтрокаПериод[ПолеФакт]-СтрокаДанных[ИмяРеквизита];
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЦикла; // По строкам
			
			Если НеАктуализироватьФактБольшеПлана И СтрокаПериод[ПолеФактИтог] > СтрокаПериод[ПолеПланИтог] И Ном = 0 Тогда
				РазностьПланФакт = СтрокаДетали[ПолеФактИтог] - СтрокаДетали[ПолеПланИтог];
				СтрокаИзмерение[ПолеКАктуализации] = СтрокаИзмерение[ПолеКАктуализации]-РазностьПланФакт;
			КонецЕсли;
			
			// Уберем ошибки округления.
			Если СтрокаПериод.Период >=ДатаАктуализации Тогда 
				// АКТУАЛИЗАЦИЯ
				Разность = Окр(ПоказательКАктуализацииПериод-Итог,ТочностьОкругления);
				Если СтрокаИзмерение[ПолеКАктуализации]>0 Тогда
					Разность = Мин(Разность,СтрокаИзмерение[ПолеКАктуализации]);
				КонецЕсли; 
				Если СтрокаДанных <> Неопределено И Разность <>0 И СтрокаДанных[ИмяРеквизита] >Разность Тогда
					СтрокаДанных[ИмяРеквизита] = СтрокаДанных[ИмяРеквизита]-Разность;
					ИтогДанные = ИтогДанные-Разность;
					СтрокаИзмерение[ПолеКАктуализации] =СтрокаИзмерение[ПолеКАктуализации]-Разность;
				КонецЕсли; 
				
				// Если актуализация обнулила все данные в текущем периоде, изменим количество ненулевых интервалов.
				Если ИтогДанные <=0 Тогда
					ЧислоНенулевыхИнтервалов = ЧислоНенулевыхИнтервалов - 1;
				КонецЕсли; 
				
			Иначе 
				// ФАКТ
				Разность = ПоказательФактПериод-Итог;
				Если Разность<>0 И СтрокаДанных <> Неопределено И Ном = 0 Тогда
					Если ПоказательФактПериод >=0  Тогда
						
						СтрокаДанных[ИмяРеквизита]     = СтрокаДанных[ИмяРеквизита]+Разность;
						СтрокаПериод[ПолеФакт] = СтрокаПериод[ПолеФакт]+Разность;					
						
					Иначе
						
						// Если факт отрицательный актуализацию не выполняем, а заменяем план на ноль (замечание 3311).
						СтрокаДанных[ИмяРеквизита]     = 0;
						СтрокаПериод[ПолеФакт] = 0;
						СтрокаИзмерение[ПолеКАктуализации] = СтрокаИзмерение[ПолеКАктуализации]-ПоказательФактПериод;						
						
					КонецЕсли;				
				КонецЕсли; 
			
		  КонецЕсли;
		КонецЦикла;  // По периодам. 
		
	Ном = Ном+1;	
	КонецЦикла;  // Пока есть что актуализировать.
	

КонецПроцедуры

#Область ФормированиеДерева

// Процедура восстанавливает дерево по данным. 
// 
// Параметры:
//  ТабДок       - ТабличныйДокумент.
//  Настройка    - СправочникСсылка.бит_НастройкиФормВвода.
//  ТекстЗапроса - Строка.
//  СтрПар       - Структура.
// 
Процедура ВосстановитьДеревоПоДанным(ТабДок, Настройка, ТекстЗапроса, СтрПар = Неопределено) Экспорт

	Бюджет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "Бюджет");
	Если Справочники.бит_Бюджеты.БюджетЗапрещенВПланировании(Бюджет) Тогда
		ВызватьИсключение НСтр("ru = 'Выполнение операции остановлено.
									|Бюджет настройки формы ввода не должен содержать дубли статей оборотов.'");
	КонецЕсли;
	
	НастрФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Настройка);	
	
	ВывестиДеревоДанных(ТабДок, Настройка, ТекстЗапроса, СтрПар);
	
	// Установка значений в дерево
	УстановитьЗначенияВДерево(ТабДок, НастрФормы.ИмяРазворачивать);

КонецПроцедуры

// Процедура обновляет дерево данных. 
// 
// Параметры:
//  ТабДок    - ТабличныйДокумент.
//  Настройка - СправочникСсылка.бит_НастройкиФормВвода.
//  ТекстЗапроса - Строка.
//  СтрПар - Структура.
// 
Процедура ОбновитьДеревоДанных(ТабДок, Настройка, ТекстЗапроса,  СтрПар = Неопределено) Экспорт

	Бюджет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "Бюджет");
	Если Справочники.бит_Бюджеты.БюджетЗапрещенВПланировании(Бюджет) Тогда
		ВызватьИсключение НСтр("ru = 'Выполнение операции остановлено.
									|Бюджет настройки формы ввода не должен содержать дубли статей оборотов.'");
	КонецЕсли;
	
	НастрФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Настройка);	
	
	МассивОтбор = ВывестиДеревоДанных(ТабДок, Настройка, ТекстЗапроса, СтрПар);
	
	ИмяИзмеренияРазворачивать = НастрФормы.ИмяРазворачивать;
   
	// Получение фактических данных.
	РезультатФакт = ПолучитьФактическиеДанные(МассивОтбор, ИмяИзмеренияРазворачивать, СтрПар);
	ФактическиеДанные.Загрузить(РезультатФакт.Выгрузить());
	
	// Получение плановых данных.
	РезультатПлан = ПолучитьПлановыеДанные(МассивОтбор, ИмяИзмеренияРазворачивать, СтрПар);
	Таблица = РезультатПлан.Выгрузить();
	БДДС.Загрузить(Таблица);
	
	ДоИзменения.Очистить();
	Если СценарийЭталон = Сценарий Тогда
		ТаблицаДоИзменения = Таблица.Скопировать();
		ТаблицаДоИзменения.Колонки.Удалить("Сумма");
		ТаблицаДоИзменения.Колонки.Удалить("Количество");
		
		Переименовать = Новый Структура(); 
		Переименовать.Вставить("КоличествоДоИзменения",		"Количество");
		Переименовать.Вставить("СуммаДоИзменения",			"Сумма");
		Переименовать.Вставить("СуммаРеглДоИзменения",		"СуммаРегл");
		Переименовать.Вставить("СуммаУпрДоИзменения",		"СуммаУпр");
		Переименовать.Вставить("СуммаСценарийДоИзменения",	"СуммаСценарий");
		
		Для каждого Колонки Из Переименовать Цикл
			ТаблицаДоИзменения.Колонки[Колонки.Ключ].Имя = Колонки.Значение;
		КонецЦикла; 
		ДоИзменения.Загрузить(ТаблицаДоИзменения);
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из БДДС Цикл	
		УстановитьНовыйИд(СтрокаТаблицы);	
	КонецЦикла; 
	
	// Установка значений в дерево
	УстановитьЗначенияВДерево(ТабДок, ИмяИзмеренияРазворачивать);
	
КонецПроцедуры

Функция ВывестиДеревоДанных(ТабДок, Настройка, ТекстЗапроса, СтрПар)
	
	СтрокаСортировки = "";	
	
	МассивОтбор = Новый Массив;
	
	ТабДок.Очистить();
	
	НастрФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Настройка);	
	
	// Инициализация построителя.
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Бюджет", НастрФормы.Бюджет);
	Попытка
		
		Запрос.Текст = ТекстЗапроса;
		
	Исключение
		
		ТекстСообщения =  НСтр("ru = 'Неверный текст запроса. Описание ошибки: %1%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(ОписаниеОшибки()));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецПопытки;
	
	Если ТипЗнч(СтрПар) = Тип("Структура") И СтрПар.Свойство("АдресКомпоновкиСтруктура") Тогда
		
		Если ЭтоАдресВременногоХранилища(СтрПар.АдресКомпоновкиСтруктура) Тогда
			
			СКД = ПолучитьИзВременногоХранилища(СтрПар.АдресКомпоновкиСтруктура);
			
			КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД, СтрПар.НастройкиКомпоновщикаСтруктура);
			
			// Получаем запрос макета компоновки данных.
			Попытка
				
				Запрос.Текст = МакетСКД.НаборыДанных.НаборДанныхОсновной.Запрос;
				
			Исключение
				
				ТекстСообщения =  НСтр("ru = 'Не удалось установить отбор для получения структуры.'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецПопытки;
			
			// Устанавливаем параметры запроса.
			ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
			Для каждого ОписаниеПараметраЗапроса Из ОписаниеПараметровЗапроса Цикл
				
				Если НЕ МакетСКД.ЗначенияПараметров.Найти(ОписаниеПараметраЗапроса.Имя) = Неопределено Тогда
					
					Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Формируем строку сортировки.
	СохраненнаяНастройка = Справочники.бит_ЭлементыДанных.ПолучитьНастройкиПостроителя(Настройка);
	Если СохраненнаяНастройка.Свойство("НастройкиКомпоновщика") 
		И ТипЗнч(СохраненнаяНастройка.НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных")  Тогда
		
		Для каждого ЭлПорядка Из СохраненнаяНастройка.НастройкиКомпоновщика.Порядок.Элементы Цикл
			
			Если ЭлПорядка.Использование = Истина И НЕ Строка(ЭлПорядка.Поле) = "" Тогда
				
				НаправлениеСтр = ?(ЭлПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв, "УБЫВ", "ВОЗР"); 
				СтрокаСортировки = СтрокаСортировки+?(ПустаяСтрока(СтрокаСортировки),"",",")+Строка(ЭлПорядка.Поле)+" "+НаправлениеСтр;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Установка отбора под владельцу дополнительных аналитик при необходимости.
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");	
	ИзмеренияРазворачивать = НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать];
	Для каждого Имя Из ИзмеренияРазворачивать Цикл
	
		ТекНастройка = НастройкиИзмерений[Имя];
		
		Если НЕ ТекНастройка = Неопределено 
			 И ТекНастройка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.бит_ДополнительныеЗначенияАналитик")) Тогда
		
			 Запрос.УстановитьПараметр(Имя, ТекНастройка.Аналитика);
		
		КонецЕсли; 
	
	КонецЦикла; 	
	
	Попытка
		
		Результат = Запрос.Выполнить();
		
	Исключение
		
		ТекстСообщения =  НСтр("ru = 'Не удалось заполнить дерево данных. Описание ошибки: %1%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(ОписаниеОшибки()));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат МассивОтбор;
		
	КонецПопытки;
	
	РезДерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	флНовыйЗапрос = ?(РезДерево.Колонки.Найти("Ссылка") = Неопределено, Истина, Ложь);
	
	// Получение областей, необходимых для вывода.
	Макет = Документы.бит_АктуализацияБюджета.ПолучитьМакет("Макет");	
	Области = Новый Структура;
	Области.Вставить("Заголовок_Кодификатор",Макет.ПолучитьОбласть("Заголовок|Кодификатор"));
	Области.Вставить("Заголовок_Измерение"  ,Макет.ПолучитьОбласть("Заголовок|Измерение"));
	Области.Вставить("Заголовок_Поле"       ,Макет.ПолучитьОбласть("Заголовок|Поле"));
	Области.Вставить("Заголовок_ПолеДубль"  ,Макет.ПолучитьОбласть("Заголовок|ПолеДубль"));
	Области.Вставить("Строка_Кодификатор"   ,Макет.ПолучитьОбласть("Строка|Кодификатор"));
	Области.Вставить("Строка_Измерение"     ,Макет.ПолучитьОбласть("Строка|Измерение"));
	Области.Вставить("Строка_ПолеКоличество",Макет.ПолучитьОбласть("Строка|ПолеКоличество"));
	Области.Вставить("Строка_ПолеСумма"     ,Макет.ПолучитьОбласть("Строка|ПолеСумма"));
	Области.Вставить("Строка_ПолеДубль"     ,Макет.ПолучитьОбласть("Строка|ПолеДубль"));
	Области.Вставить("СтрокаРасчетная_ПолеКоличество", Макет.ПолучитьОбласть("СтрокаРасчетная|ПолеКоличество"));
	Области.Вставить("СтрокаРасчетная_ПолеСумма"     , Макет.ПолучитьОбласть("СтрокаРасчетная|ПолеСумма"));
	Области.Вставить("СтрокаРасчетная_ПолеДубль", Макет.ПолучитьОбласть("СтрокаРасчетная|ПолеДубль"));
	
	ЭтоНастройкаПоБюджету   = ?(ЗначениеЗаполнено(НастрФормы.Бюджет), Истина, Ложь);
	ИспользоватьКоэфициенты = ?(ЭтоНастройкаПоБюджету И НастрФормы.Настройка.ИспользоватьКоэффициентыСтатейБюджета, Истина, Ложь);
	
	Если ИспользоватьКоэфициенты Тогда
		
		// Если используются коэффициенты статей бюджета необходимо установить специальный формат.
		яч = Области.Строка_ПолеСумма.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.Строка_ПолеКоличество.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.Строка_ПолеДубль.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.Строка_ПолеДубль.Область(1,2,1,2);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		
		яч = Области.СтрокаРасчетная_ПолеСумма.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.СтрокаРасчетная_ПолеКоличество.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.СтрокаРасчетная_ПолеДубль.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.СтрокаРасчетная_ПолеДубль.Область(1,2,1,2);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		
	КонецЕсли; 
	
	// Вывод дерева данных.
	Периоды = ВывестиШапку(ТабДок, Области, НастрФормы);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	локСтрПар = Новый Структура;
	локСтрПар.Вставить("ЭтоНовыйЗапрос", флНовыйЗапрос);
	
	// Сортировка по кодификатору.
	Если ПустаяСтрока(СтрокаСортировки) Тогда
		
		ИзмеренияРазворачивать  = НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать];
		Если ИзмеренияРазворачивать.Количество() > 1 Тогда
			
			ИмяПервого = ИзмеренияРазворачивать[0];
			ИмяКодификатор = ИмяПервого+"_Кодификатор";
			
			Если НЕ РезДерево.Колонки.Найти(ИмяКодификатор) = Неопределено Тогда
				
				СтрокаСортировки = ИмяКодификатор+","+ИмяПервого;
				
			КонецЕсли; 
			
		КонецЕсли; 	
		
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаСортировки) Тогда
		
		Попытка
			
			РезДерево.Строки.Сортировать(СтрокаСортировки, Истина);
			
		Исключение
			
			ТекстСообщения =  НСтр("ru = 'Не удалось выполнить сортировку по настройке: %1%. Описание ошибки: %2%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаСортировки, ОписаниеОшибки());
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли; 
	
	ОбойтиДерево(РезДерево, ТабДок, Области, НастрФормы, Периоды, 1, локСтрПар);
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.БезПерехода;
	
	ИмяИзмеренияРазворачивать = НастрФормы.ИмяРазворачивать;
	Если флНовыйЗапрос Тогда
	   МассивОтбор = Результат.Выгрузить().ВыгрузитьКолонку(ИмяИзмеренияРазворачивать);
	Иначе	
	   МассивОтбор = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
    КонецЕсли; 
    бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивОтбор);	
	
	Возврат МассивОтбор;
	
КонецФункции

// Осуществляет вывод шапки дерева данных. 
// 
// Параметры:
//  ТабДок - ТабличныйДокумент.
//  Области - Структура - Области макета.
//  НастрФормы - Структура - Настройки формы ввода.
// 
Функция ВывестиШапку(ТабДок, Области, НастрФормы)
	
	// Колонка кодификатор.
	ТабДок.Вывести(Области.Заголовок_Кодификатор);
	
	// Имена измерений.
	Для каждого Имя Из НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать] Цикл
		
		Области.Заголовок_Измерение.Параметры.ИмяИзмерения = НастрФормы.Измерения[Имя].Синоним;
		ТабДок.Присоединить(Области.Заголовок_Измерение);
	
	КонецЦикла; 
	
	// Фиксация области измерений.
	ТабДок.ФиксацияСверху = 2;
	ТабДок.ФиксацияСлева  = НастрФормы.КоличествоРазворачивать+1;
	
	// Вывод заголовка периодов
	Периодичность        = Сценарий.бит_Периодичность;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончанияПланирования) Тогда
		
		КоличествоИнтервалов = Сценарий.ПродолжительностьИнтервала;
		
	Иначе
		
		КоличествоИнтервалов = бит_Бюджетирование.РазностьДат(ДатаНачалаПланирования, ДатаОкончанияПланирования, Периодичность)+1;
		
	КонецЕсли; 
	
	УчетПоКоличеству     = НастройкаФормы.Учет_Количество;
	УчетПоСумме          = НастройкаФормы.Учет_Сумма;
	ИмяОбластиПериод     = ?(УчетПоКоличеству И УчетПоСумме, "Заголовок_ПолеДубль","Заголовок_Поле");
	
	// Проверим, следует ли создавать дополнительные итоговые колонки.
	ПериодыИтогов = Новый Массив;
	Для каждого СтрНастройки Из НастрФормы.ДополнительныеИтоги Цикл
	
		Если Перечисления.бит_ПериодичностьПланирования.Индекс(СтрНастройки.Периодичность) > Перечисления.бит_ПериодичностьПланирования.Индекс(Периодичность) Тогда
		
			  ПериодыИтогов.Добавить(СтрНастройки);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Признак того, что нужно обработать выходные дни.
	флОбработатьВыходные = ?(Периодичность = Перечисления.бит_ПериодичностьПланирования.День 
	                          И НЕ НастрФормы.ОтображениеВыходных = Перечисления.бит_РежимыОтображенияВыходныхДнейФормыВвода.Обычный, Истина, Ложь);
	
							  
    ВыходныеДни = Новый Соответствие;
	Если флОбработатьВыходные Тогда
		
		// Получим календарь по которому будем проверять выходные.
		НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ДатаНачалаПланирования,,Новый Структура,"Ошибки");
		ИмяНастройкиКалендарь	 = ПланыВидовХарактеристик.бит_НастройкиПрограммы.Календарь;
	    Календарь = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ИмяНастройкиКалендарь);
		
		Если ЗначениеЗаполнено(Календарь) Тогда
			
			МассивВидов = Новый Массив;
			МассивВидов.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
			МассивВидов.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
			МассивВидов.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
			
			ДатаОкончанияКалендаря = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ДатаНачалаПланирования,КоличествоИнтервалов,Периодичность);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Календарь);
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаПланирования);
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияКалендаря);
			Запрос.УстановитьПараметр("МассивВидов", МассивВидов);
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ТабКалендарь.Дата
			               |ИЗ
			               |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ТабКалендарь
			               |ГДЕ
			               |	ТабКалендарь.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
			               |	И ТабКалендарь.ВидДня В(&МассивВидов)
			               |	И ТабКалендарь.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
						   
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
			
				ВыходныеДни.Вставить(Выборка.Дата, Истина);
			
			КонецЦикла; 
			
			
		Иначе	
			
			флОбработатьВыходные = Ложь;
			ТекстСообщения =  НСтр("ru = 'Невозможно определить выходные дни, т.к. не установлен Календарь в настройках программы (БИТ).'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЕсли;	//ОбработатьВыходные						  
							  
							  
	Периоды = Новый Массив;
	НомИт = 1;
	Для й=1 По КоличествоИнтервалов Цикл
	
		ТекущийПериод = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ДатаНачалаПланирования,й-1,Периодичность);
		Синоним 	  = бит_Бюджетирование.СформироватьПредставлениеПериода(ТекущийПериод,Периодичность);		
		
		ПараметрыОписанияПериода = бит_Бюджетирование.НовыеПараметрыОписаниеПериода();
		ПараметрыОписанияПериода.Период  = ТекущийПериод;
		ПараметрыОписанияПериода.Синоним = Синоним;
		ТекОписаниеПериода = бит_Бюджетирование.ОписаниеПериода(ПараметрыОписанияПериода);
		
		Если флОбработатьВыходные Тогда
			
			Если ВыходныеДни[ТекущийПериод] = Истина Тогда
				
				Если НастрФормы.ОтображениеВыходных = Перечисления.бит_РежимыОтображенияВыходныхДнейФормыВвода.НеОтображать Тогда
					
					Продолжить;
					
				КонецЕсли; 
				
				ТекОписаниеПериода.ЭтоВыходной = Истина;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		
		Периоды.Добавить(ТекОписаниеПериода);
		
		// Добавление дополнительных итоговых колонок по периодам.
		КонецТекПериода = бит_Бюджетирование.ПолучитьКонецПериода(ТекущийПериод, Периодичность);		
		Для каждого СтрНастройки Из ПериодыИтогов Цикл
			
			КонецИтПериода = бит_Бюджетирование.ПолучитьКонецПериода(ТекущийПериод, СтрНастройки.Периодичность);
			
			Если КонецТекПериода = КонецИтПериода Тогда
			
				Синоним = бит_Бюджетирование.СформироватьПредставлениеПериода(ТекущийПериод, СтрНастройки.Периодичность);
				НачалоИтПериода = бит_Бюджетирование.ПолучитьНачалоПериода(ТекущийПериод, СтрНастройки.Периодичность);
				
				ПараметрыОписанияПериода = бит_Бюджетирование.НовыеПараметрыОписаниеПериода();
				ПараметрыОписанияПериода.Период  			= НачалоИтПериода;
				ПараметрыОписанияПериода.Синоним 			= Синоним;
				ПараметрыОписанияПериода.Имя 	 			= "Ит_"+Формат(НомИт,"ЧГ=");
				ПараметрыОписанияПериода.ЭтоИтог 			= Истина;
				ПараметрыОписанияПериода.ЭтоНарастающийИтог = СтрНастройки.НарастающийИтог;
				ПараметрыОписанияПериода.КонецПериода 		= КонецИтПериода;
				
				ТекОписаниеПериода = бит_Бюджетирование.ОписаниеПериода(ПараметрыОписанияПериода);
		        Периоды.Добавить(ТекОписаниеПериода);				
				
				НомИт = НомИт + 1;
			КонецЕсли; 
		
		КонецЦикла; // ПериодыИтогов.
		
	КонецЦикла; // По интервалам.

	// Колонки итогов
	Если НастрФормы.ВыводитьОбщиеИтоги Тогда
		ПараметрыОписанияПериода = бит_Бюджетирование.НовыеПараметрыОписаниеПериода();
		ПараметрыОписанияПериода.Период  			= Дата('00010101');
		ПараметрыОписанияПериода.Синоним 			= НСтр("ru = 'Итого'");
		ПараметрыОписанияПериода.Имя 	 			= "Итог";
		ПараметрыОписанияПериода.ЭтоИтог 			= Истина;

		ТекОписаниеПериода = бит_Бюджетирование.ОписаниеПериода(ПараметрыОписанияПериода);
		Периоды.Добавить(ТекОписаниеПериода);
	КонецЕсли;
	
	Для каждого ТекОписание Из Периоды Цикл
		
		ОбластьПериод = Области[ИмяОбластиПериод];
		
		ОбластьПериод.Параметры.ИмяПоля = ТекОписание.Синоним;
		
		яч = ОбластьПериод.Область(1,1,1,1);
		
		Если ТекОписание.ЭтоВыходной 
			 И НастрФормы.ОтображениеВыходных = Перечисления.бит_РежимыОтображенияВыходныхДнейФормыВвода.Выделять Тогда
		
			 яч.ЦветТекста = WebЦвета.Красный;
			 
		Иначе
			 
			 яч.ЦветТекста = WebЦвета.Черный;
			 
		КонецЕсли; 

		
		ТабДок.Присоединить(Области[ИмяОбластиПериод]);
		
	КонецЦикла; 
	
	Возврат Периоды;
	
КонецФункции

// Выводит групировки в дерево данных. 
// 
// Параметры:
//  СтрокаВерх - СтрокаДереваЗначений.
//  ТабДок - ТабличныйДокумент.
//  Области - Структура.
//  НастрФормы - Структура.
//  Периоды - Массив.
//  Ном - Число.
//  СтрПар - Структура.
// 
Функция ОбойтиДерево(СтрокаВерх, ТабДок, Области, НастрФормы, Периоды, Ном, СтрПар)
	
	ИменаЯчеек = Новый Соответствие;
	ИзмеренияРазворачивать  = НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать];
	КоличествоРазворачивать = НастрФормы.КоличествоРазворачивать;
	ЭтоНастройкаПоБюджету   = ?(ЗначениеЗаполнено(НастрФормы.Бюджет), Истина, Ложь);
	ИспользоватьКоэфициенты = ?(ЭтоНастройкаПоБюджету И НастрФормы.Настройка.ИспользоватьКоэффициентыСтатейБюджета, Истина, Ложь);	
	
	ЦветФактПрошлый = WebЦвета.Белый;
	ЦветНедоступный = WebЦвета.Лимонный;
	
	// Структура для хранения данных, используемых при анализе необходимости объединения ячеек.
	ДанныеВрем = бит_Бюджетирование.КонструкторСтруктурыПроверкиОбъединения(ИзмеренияРазворачивать);
	
	Для каждого СтрокаДерева Из СтрокаВерх.Строки Цикл
		
		Уровень = СтрокаДерева.Уровень();
		флЕстьПодчиненные = ?(СтрокаДерева.Строки.Количество()>0, Истина, Ложь);
		// Если настройка не по бюджету, коэфициент всегда 1.
		// Для настройки по бюджету, для групп коэфициент 1, для статей берем указанный в статье.
		Коэф = ?(ИспользоватьКоэфициенты, ?(СтрокаДерева.СтатьяБюджета.ЭтоГруппа, 1, СтрокаДерева.СтатьяБюджета.Коэффициент), 1);
		// Если нет подчиненных строк - строку, содержащую группы выводить не нужно.
		
		флЕстьГруппы = Ложь;
		Для каждого Имя Из ИзмеренияРазворачивать Цикл
			
			Если СтрПар.ЭтоНовыйЗапрос Тогда
				// Новый формат запроса может содержать несколько измерений.
				ТекЗначение = СтрокаДерева[Имя];
			Иначе	
				// Формат запроса редакции 2.8 содержал, только одно измерение с именем Ссылка.
				ТекЗначение = СтрокаДерева.Ссылка; 
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ТекЗначение) И ТекЗначение.ЭтоГруппа Тогда
				
				флЕстьГруппы = Истина;
				Прервать;
				
			КонецЕсли; 
			
		КонецЦикла;  // По именам измерений.
		
		Если флЕстьГруппы И НЕ флЕстьПодчиненные Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		// Если в подчиненных строках только группы - выводить не нужно.
		флТолькоГруппы = Истина;
		бит_Бюджетирование.ПроверитьНаличиеПодчиненныхЭлементов(СтрокаДерева, ИзмеренияРазворачивать, СтрПар.ЭтоНовыйЗапрос, флТолькоГруппы); 			
        Если флТолькоГруппы Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		// Измерения
		ЗначенияИзмерений = Новый Структура;
		ИдИзмерений = "";
		флЕстьГруппа = Ложь;
		Сч = 1;
		Для каждого Имя Из ИзмеренияРазворачивать Цикл
			
			Если Сч = 1  Тогда
				// Вывод кодификатора для первого измерения.
				Если СтрПар.ЭтоНовыйЗапрос Тогда
					
					Области.Строка_Кодификатор.Параметры.Кодификатор = СтрокаДерева[Имя+"_Кодификатор"];
					
				Иначе	
					
					Области.Строка_Кодификатор.Параметры.Кодификатор = СтрокаДерева.Кодификатор;
					
				КонецЕсли; 
				
				ТабДок.Вывести(Области.Строка_Кодификатор, Уровень);
				
			КонецЕсли; 
			
			Если СтрПар.ЭтоНовыйЗапрос Тогда
				// Новый формат запроса может содержать несколько измерений.
				ТекЗначение = СтрокаДерева[Имя];
			Иначе	
				// Формат запроса редакции 2.8 содержал, только одно измерение с именем Ссылка.
				ТекЗначение = СтрокаДерева.Ссылка; 
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ТекЗначение) И ТекЗначение.ЭтоГруппа Тогда
			
				флЕстьГруппа = Истина;
			
			КонецЕсли; 
			
			Области.Строка_Измерение.Параметры.ЗначениеИзмерения = ТекЗначение;
			Если ЗначениеЗаполнено(ТекЗначение) Тогда
				
			    ЗначенияИзмерений.Вставить(Имя, ТекЗначение);
				ИдИзмерений = ИдИзмерений+?(ПустаяСтрока(ИдИзмерений),"","_")+СтрЗаменить(Строка(ТекЗначение.УникальныйИдентификатор()),"-","");
				
			КонецЕсли; 
			
			ИмяЯчейки = Имя+"_"+Формат(Ном,"ЧГ=");
			Обл = Области.Строка_Измерение.Область(1,1,1,1);
			Обл.Имя = Имя+"_"+Формат(Ном,"ЧГ=");
			Области.Строка_Измерение.Параметры.р = бит_Бюджетирование.РасшифровкаЯчейки(ИмяЯчейки, , , "Измерение", ,ТекЗначение);
			ТабДок.Присоединить(Области.Строка_Измерение, Уровень);
			
			Если НастрФормы.ОбъединятьЯчейки И Сч < КоличествоРазворачивать Тогда
				
				// Объединяем ячейки с повторяющимися значениями аналитик.
				бит_Бюджетирование.ПроверитьВыполнитьОбъединениеЯчеек(ТабДок, ДанныеВрем, Имя, ТекЗначение, флЕстьПодчиненные);
				
			КонецЕсли; 
			
			Сч = Сч +1;
		КонецЦикла;  // По именам измерений.
		
		// Ячейки данных
		флДваРесурса = (НастройкаФормы.Учет_Сумма И НастройкаФормы.Учет_Количество);
		ИмяСтроки  = ?(НЕ флЕстьПодчиненные И НЕ флЕстьГруппа , "Строка", "СтрокаРасчетная");
		ИмяКолонки = ?(флДваРесурса, "ПолеДубль", ?(НастройкаФормы.Учет_Количество,"ПолеКоличество","ПолеСумма"));
		ИмяОбласти = ИмяСтроки+"_"+ИмяКолонки;
		ИмяОбластиИтог = "СтрокаРасчетная_"+ИмяКолонки;
		ВидЯчейки  = ?(НЕ флЕстьПодчиненные И НЕ флЕстьГруппа , "Значение", "Формула");
		
	    Префиксы = Новый Структура;
		Префиксы.Вставить("ИмяСумма","СП");
		Префиксы.Вставить("ИмяСуммаФакт","СФ");
		Префиксы.Вставить("ИмяКоличество","КП");
		Префиксы.Вставить("ИмяКоличествоФакт","КФ");
		
		Арг   = Новый Структура;  // Хранит аргументы для формул.
		Имена = Новый Структура;  // хранит имена различных типов ячеек.
		Для каждого КиЗ Из Префиксы Цикл
		
			Арг.Вставить(КиЗ.Значение, Новый Массив);
			Имена.Вставить(КиЗ.Значение, "");
		
		КонецЦикла; 
		
		Для каждого ТекОписание Из Периоды Цикл
			
			// Определение цвета ячейка фактических данных.
			Если НЕ ТекОписание.ЭтоИтог Тогда
				
				ЦветЯчейкиФакт = ?(ТекОписание.Период < ДатаАктуализации, ЦветФактПрошлый, ЦветНедоступный);
				
			Иначе	
				
				ЦветЯчейкиФакт = ?(ТекОписание.КонецПериода < ДатаАктуализации И ЗначениеЗаполнено(ТекОписание.Период), ЦветФактПрошлый, ЦветНедоступный);
				
			КонецЕсли; 
			
			// Подготовка имен
			Для каждого КиЗ Из Префиксы Цикл
				
				ТипИмени = КиЗ.Ключ;
				Префикс  = КиЗ.Значение;
				
				ТекИмяБезАналитики = ТекОписание[ТипИмени];
				ТекИмяЯчейки = ТекОписание[ТипИмени]+"_"+ИдИзмерений;
				Имена[Префикс] = ТекИмяЯчейки;
				Если ИменаЯчеек[ТекИмяБезАналитики] = Неопределено Тогда
					
					ИменаЯчеек[ТекИмяБезАналитики] = Новый Массив;
					
				КонецЕсли; 
				
			   ИменаЯчеек[ТекИмяБезАналитики].Добавить(Новый Структура("Имя, Коэф", Имена[Префикс], Коэф));			   			   
			   Если НЕ ТекОписание.ЭтоИтог Тогда
			   
			   	  Арг[Префикс].Добавить(Имена[Префикс]);
			   
			   КонецЕсли; 
			   
			КонецЦикла; // Префиксы.
			
			Если флДваРесурса Тогда
				
				// Форма с двумя ресурсами.
				
				Если ТекОписание.ЭтоИтог Тогда
					
					// Итоговые колонки.
					
					Обл = Области[ИмяОбластиИтог];
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = Имена.КП;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = "Формула";
					ПараметрыДоработки.Аргументы 	   = Арг.КП;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 2;
					ПараметрыДоработки.Имя 			   = Имена.СП;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = "Формула";
					ПараметрыДоработки.Аргументы 	   = Арг.СП;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 2;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = Имена.КФ;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = "Формула";
					ПараметрыДоработки.Цвет 		   = ЦветЯчейкиФакт;
					ПараметрыДоработки.Аргументы 	   = Арг.КФ;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 2;
					ПараметрыДоработки.НомСтолбца 	   = 2;
					ПараметрыДоработки.Имя 			   = Имена.СФ;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = "Формула";
					ПараметрыДоработки.Цвет 		   = ЦветЯчейкиФакт;
					ПараметрыДоработки.Аргументы 	   = Арг.СФ;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);										
					
					ТабДок.Присоединить(Обл);					
					
				Иначе	
					
					// Колонки для ввода данных.
					Обл = Области[ИмяОбласти];
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = Имена.КП;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = ВидЯчейки;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);

					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 2;
					ПараметрыДоработки.Имя 			   = Имена.СП;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = ВидЯчейки;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 2;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = Имена.КФ;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = ВидЯчейки;
					ПараметрыДоработки.Цвет 		   = ЦветЯчейкиФакт;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);					
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 2;
					ПараметрыДоработки.НомСтолбца 	   = 2;
					ПараметрыДоработки.Имя 			   = Имена.СФ;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = ВидЯчейки;
					ПараметрыДоработки.Цвет 		   = ЦветЯчейкиФакт;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);										
					
					ТабДок.Присоединить(Обл);
				КонецЕсли; 
				
			Иначе	
				
				// Форма с одним ресурсом.
				ИмяЯчейки     = ?(НастройкаФормы.Учет_Количество, Имена.КП, Имена.СП);
				ИмяЯчейкиФакт = ?(НастройкаФормы.Учет_Количество, Имена.КФ, Имена.СФ);
				
				Если ТекОписание.ЭтоИтог Тогда
					
					// Итоговая колонка.
					Обл = Области[ИмяОбластиИтог];
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = ИмяЯчейки;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = "Формула";
					ПараметрыДоработки.Аргументы 	   = ?(НастройкаФормы.Учет_Количество, Арг.КП, Арг.СП);
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 2;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = ИмяЯчейкиФакт;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = "Формула";
					ПараметрыДоработки.Цвет 		   = ЦветЯчейкиФакт;
					ПараметрыДоработки.Аргументы 	   = ?(НастройкаФормы.Учет_Количество, Арг.КФ, Арг.СФ);
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);										
					ТабДок.Присоединить(Обл);
				Иначе	
					
					// Колонка для ввода данных.
					Обл = Области[ИмяОбласти];
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = ИмяЯчейки;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = ВидЯчейки;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 2;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = ИмяЯчейкиФакт;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = ВидЯчейки;
					ПараметрыДоработки.Цвет 		   = ЦветЯчейкиФакт;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);					
					ТабДок.Присоединить(Обл);
				КонецЕсли; 
			КонецЕсли;  // ФлДваРесурса.
		КонецЦикла; // Периоды.
		
		ТекНом = Ном; // Фиксируем номер строки до входа в рекурсивный вызов.
		Ном = Ном + 1;	
		
		ИменаЯчеекПодч = ОбойтиДерево(СтрокаДерева, ТабДок, Области, НастрФормы, Периоды, Ном, СтрПар);
		
		// Установим формулы для вычисления итогов по группам.
		Если ИменаЯчеекПодч.Количество() > 0 Тогда
			
			// После выхода из подчиненного вызова сбрасываем параметры проверяющие объединение ячеек.
			ДанныеВрем = бит_Бюджетирование.КонструкторСтруктурыПроверкиОбъединения(ИзмеренияРазворачивать);
			
			Для каждого ТекОписание Из Периоды Цикл
				
				Если НастройкаФормы.Учет_Количество Тогда
				
					 бит_Бюджетирование.УстановитьФормулуИтоговПоГруппе(ТабДок, ИменаЯчеекПодч, ТекОписание.ИмяКоличество, ИдИзмерений);
					 бит_Бюджетирование.УстановитьФормулуИтоговПоГруппе(ТабДок, ИменаЯчеекПодч, ТекОписание.ИмяКоличествоФакт, ИдИзмерений);
				
				КонецЕсли; 
				
				Если НастройкаФормы.Учет_Сумма Тогда
				
					 бит_Бюджетирование.УстановитьФормулуИтоговПоГруппе(ТабДок, ИменаЯчеекПодч, ТекОписание.ИмяСумма, ИдИзмерений);
					 бит_Бюджетирование.УстановитьФормулуИтоговПоГруппе(ТабДок, ИменаЯчеекПодч, ТекОписание.ИмяСуммаФакт, ИдИзмерений);
				
				КонецЕсли; 
				
			КонецЦикла; // Периоды - установка формул.
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам дерева данного уровня
	
	Если НастрФормы.ОбъединятьЯчейки Тогда
		
		// Вызова процедуры объединения для объединения ячеек в случае завершения группировки.
		Сч = 1;
		Для каждого Имя Из ИзмеренияРазворачивать Цикл
			
			Если Сч < КоличествоРазворачивать Тогда
				
				// Объединяем ячейки с повторяющимися значениями аналитик.
		        флЕстьПодчиненные = ?(ТипЗнч(СтрокаВерх) = Тип("ДеревоЗначений"), Истина, Ложь);					
				бит_Бюджетирование.ПроверитьВыполнитьОбъединениеЯчеек(ТабДок, ДанныеВрем, Имя, "НереальноеЗначение", флЕстьПодчиненные, Истина);
				
			КонецЕсли; 
			
			Сч = Сч +1;
		КонецЦикла;  // По именам измерений.
		
	КонецЕсли; 
	
	Возврат ИменаЯчеек;
	
КонецФункции

// Устанавливает значения в дерево из табличных частей БДДС и Фактические данные. 
// 
Процедура УстановитьЗначенияВДерево(ТабДок, ИмяИзмеренияРазворачивать, СтрПар = Неопределено)

	ОписаниеБулево = Новый ОписаниеТипов("Булево");
	ТабФакт = ФактическиеДанные.Выгрузить();
	ТабФакт.Колонки.Добавить("Обработана", ОписаниеБулево);
	ТабДанные = БДДС.Выгрузить();
	ТабДанные.Колонки.Добавить("Обработана", ОписаниеБулево);
	
	// Восстанавливаем значения областей по значениям табличной части БДДС.
	Для каждого Обл Из ТабДок.Области Цикл
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка,"РасшифровкаЯчейкиФормыВвода") Тогда
			
			расш = Обл.Расшифровка;
			Если расш.Вид = "Значение" Тогда
				
				Если расш.ПланФакт = "Ф" Тогда
					
					// Факт
					СтрОтбор = Новый Структура;
					СтрОтбор.Вставить("Период", расш.Период);
					СтрОтбор.Вставить("Измерение", расш.Измерения[ИмяИзмеренияРазворачивать]);
					
					МассивСтрок = ТабФакт.НайтиСтроки(СтрОтбор);
					
				Иначе	
					
					// План
					СтрОтбор = Новый Структура;
					СтрОтбор.Вставить("Период", расш.Период);
					Для каждого КиЗ Из расш.Измерения Цикл
						
						СтрОтбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
						
					КонецЦикла; // Обл.Расшифровка.Измерения.
					
					МассивСтрок = ТабДанные.НайтиСтроки(СтрОтбор);
					
				КонецЕсли; // ПланФакт
				
					ИтСумма      = 0;				 
					ИтКоличество = 0;
					Для каждого СтрокаТаблицы Из МассивСтрок Цикл
						
						СтрокаТаблицы.Обработана = Истина;
						ИтСумма      = ИтСумма + СтрокаТаблицы.Сумма;
						ИтКоличество = ИтКоличество + СтрокаТаблицы.Количество;
						
					КонецЦикла; // МассивСтрок
					
					Если Лев(Обл.Имя,1) = "С" Тогда
						
						Обл.Значение = ИтСумма;
						
					КонецЕсли; 
					
					Если Лев(Обл.Имя,1) = "К" Тогда
						
						Обл.Значение = ИтКоличество;
						
					КонецЕсли; 
				
				
			КонецЕсли; // Р.Вид = Значение.
			
		КонецЕсли; // ИмяКласса.
		
	КонецЦикла; // ТабДок.Области.
	
	// Выполнение расчетов по формулам в табличном документе.
	бит_Бюджетирование.ВыполнитьРасчеты(ТабДок);	
	
	флВыводитьСообщения = Ложь;
	Если ТипЗнч(СтрПар) = Тип("Структура") 
		И СтрПар.Свойство("ВыводитьСообщения") 
		И СтрПар.ВыводитьСообщения Тогда
		
		флВыводитьСообщения = Истина;
		
	КонецЕсли; 
	
	// Выполним поиск строк, для которых не удалось найти ячейки в дереве.
	Если флВыводитьСообщения Тогда
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Обработана", Ложь);
		
		МассивСтрок = ТабДанные.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			ТекстСообщения =  НСтр("ru = 'Не удалось найти ячейку дерева для строки данных бюджета №%1%, Период %2%, Статья оборотов ""%3%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, 
								СтрокаТаблицы.НомерСтроки, Формат(СтрокаТаблицы.Период,"Л=ru_RU; ДФ=dd.MM.yyyy"), СтрокаТаблицы.СтатьяОборотов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

Процедура ПередЗаписьюВБП(Отказ)

	Если РольДоступна("бит_рлс_ФинансистЦФО") Тогда
		// Проверка на наличие недопустимых ЦФО.
		Заголовок = Нстр("ru = 'Проверка прав доступа:'");
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект,БДДС,"БДДС",Заголовок,Отказ);
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект,ЗависимыеОбороты,Нстр("ru = 'Зависимые обороты'"),Заголовок,Отказ);
	Иначе
		// Проверка на наличие недопустимых пар ЦФО/СтатьяОборотов.
		Заголовок = Нстр("ru = 'Проверка прав доступа:'"); 	
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект,БДДС,"БДДС",Заголовок,Отказ);
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект,ЗависимыеОбороты,Нстр("ru = 'Зависимые обороты'"),Заголовок,Отказ);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

мРежимОбновленияВиз             = Константы.бит_РежимОбновленияПеречняВиз.Получить();

// Получаем статус и дату изменения статуса для документа.
РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);

мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

#КонецОбласти

#КонецЕсли