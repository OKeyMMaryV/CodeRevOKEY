
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	фКоличествоСубконтоМУ = 4;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем виды операций для группы подменю.
	Для каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности[ИмяЗначенияПеречисления];
		
		ИмяКнопки = ИмяЗначенияПеречисления;
		
		ИмяКоманды = "Команда_" + ИмяКнопки;
		
		// Добавляем новую команду обработки выбора вида операции.
		КомандаУстановитьОперацию = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
		КомандаУстановитьОперацию.Действие = "ДействияФормыДействиеУстановитьОперацию";
		
		КнопкаГруппыПодменю = ЭтотОбъект.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭтотОбъект.Элементы.ПодменюВидаОперации);
		КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
		КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
			
	КонецЦикла;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	УстановитьПараметрыВыбораДляСчетов();
	
	// Установка параметров выбора для Договоров.
    бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДанныеРеклассификацииДоговорКонтрагента, "Объект.ДанныеРеклассификации.Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Изменение кода. Начало. 11.03.2015{{
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда

			Объект.ВидОперации = Неопределено;
			СформироватьДеревоВидовОпераций();
			
			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
				
			Иначе 
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			КонецЕсли;	
				
		Иначе
			
			ПриОткрытииПромежуточная(Отказ);
			ПриОткрытииОкончание();
			
		КонецЕсли;
						
	Иначе
		
		ПриОткрытииОкончание();
		
	КонецЕсли;
	// Изменение кода. Конец. 11.03.2015}}
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_РеклассификацияЗадолженности";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.ДанныеРеклассификации.Количество() = 0 Тогда
		
		ДобавитьВКэш("Дата");
		ИзменениеВалютыКлиент();

	Иначе
		
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросДатаПриИзменении", ЭтотОбъект);
	
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

	КонецЕсли;
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ        - Строка.
//  ДопПараметры - Структура.
// 
&НаКлиенте
Процедура ВопросДатаПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДобавитьВКэш("Дата");
		Объект.ДанныеРеклассификации.Очистить();

	Иначе
		
		ИзвлечьИзКэша("Дата");

	КонецЕсли;	
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры // ВопросДатаПриИзменении()

&НаКлиенте
Процедура ДатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ДанныеРеклассификации.Количество() <> 0 Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВыборРеквизитаШапки", ЭтотОбъект, ВыбранноеЗначение);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
	ОрганизацияОбъекта = Объект.Организация;
	ТаблицаОбъекта = Объект.ДанныеРеклассификации;
	
	Если ТаблицаОбъекта.Количество() > 0 Тогда
						  
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");			  
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОрганизацияПриИзменении", ЭтотОбъект, ТаблицаОбъекта);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ          - Строка.
//  ТаблицаОбъекта - ДанныеФормыКоллекция.
// 
&НаКлиенте
Процедура ВопросОрганизацияПриИзменении(Ответ, ТаблицаОбъекта) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТаблицаОбъекта.Очистить();			
	КонецЕсли;
	
КонецПроцедуры // ВопросОрганизацияПриИзменении()

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если Объект.ДанныеРеклассификации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
	ОповещениеВопрос = Новый ОписаниеОповещения("ВыборРеквизитаШапки", ЭтотОбъект, ВыбранноеЗначение);
	
	ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ             - Строка.
//  ВыбранноеЗначение - СправочникСсылка, Дата.
// 
&НаКлиенте
Процедура ВыборРеквизитаШапки(Ответ, ВыбранноеЗначение) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ДанныеРеклассификации.Очистить();

		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
			
			Объект.Организация = ВыбранноеЗначение;
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Дата") Тогда
			
			Объект.Дата = ВыбранноеЗначение
	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыборРеквизитаШапки()

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКонтрагента(ТекущиеДанные.ПолучитьИдентификатор());
	
	
	КомандаОбновитьТекущуюСтроку(Команды.КомандаОбновитьТекущуюСтроку);
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДанныеРеклассификацииДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоВыбораДоговораКлиент(Элемент, ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
	КомандаОбновитьТекущуюСтроку(Команды.КомандаОбновитьТекущуюСтроку);
	
	ЗаполнитьКурсВзаиморасчетов(ТекущиеДанные.ПолучитьИдентификатор());	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеРеклассификации

&НаКлиенте
Процедура ДанныеРеклассификацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДанныеРеклассификацииДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРеклассификацииСуммаПоГрафикуПриИзменении(Элемент)
	
	ВычислитьСуммаРеклассификации();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРеклассификацииСуммаПоСчетуПриИзменении(Элемент)
	
	ВычислитьСуммаРеклассификации();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРеклассификацииКурсВзаиморасчетовПриИзменении(Элемент)
	
	ДанныеРеклассификацииСуммаПоГрафикуВзаиморасчетыПриИзменении(Элементы.ДанныеРеклассификацииСуммаПоГрафикуВзаиморасчеты);
	ДанныеРеклассификацииСуммаПоСчетуВзаиморасчетыПриИзменении(Элементы.ДанныеРеклассификацииСуммаПоСчетуВзаиморасчеты);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРеклассификацииСуммаПоГрафикуВзаиморасчетыПриИзменении(Элемент)
	
	ВычислитьСуммаРеклассификацииВзаиморасчеты();

	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаПоГрафику = ВычислитьСумму(ТекущиеДанные.СуммаПоГрафикуВзаиморасчеты,
												  ТекущиеДанные.КурсВзаиморасчетов, 	 Объект.КурсДокумента,
												  ТекущиеДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРеклассификацииСуммаПоСчетуВзаиморасчетыПриИзменении(Элемент)
	
	ВычислитьСуммаРеклассификацииВзаиморасчеты();

	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаПоСчету = ВычислитьСумму(ТекущиеДанные.СуммаПоСчетуВзаиморасчеты,
												ТекущиеДанные.КурсВзаиморасчетов, 	   Объект.КурсДокумента,
												ТекущиеДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРеклассификацииСуммаРеклассификацииВзаиморасчетыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаРеклассификации = ВычислитьСумму(ТекущиеДанные.СуммаРеклассификацииВзаиморасчеты,
														ТекущиеДанные.КурсВзаиморасчетов, 	   Объект.КурсДокумента,
														ТекущиеДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.ДанныеРеклассификации.Количество() > 0 Тогда
					  
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросКомандаЗаполнить", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ЗаполнитьДанныеДляРеклассификации();

	КонецЕсли;
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ        - Строка.
//  ДопПараметры - Структура.
// 
&НаКлиенте
Процедура ВопросКомандаЗаполнить(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ДанныеРеклассификации.Очистить();
		ЗаполнитьДанныеДляРеклассификации();

	КонецЕсли;	

КонецПроцедуры // ВопросКомандаЗаполнить()

&НаКлиенте
Процедура КомандаОбновитьТекущуюСтроку(Команда)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокИдентификаторов = Новый Массив;
	СписокИдентификаторов.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	
	ЗаполнитьДанныеДляРеклассификации(СписокИдентификаторов);
	
КонецПроцедуры
 
&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	СписокИдентификаторов = Новый Массив;	
	Для каждого ТекСтр Из Объект.ДанныеРеклассификации Цикл
		СписокИдентификаторов.Добавить(ТекСтр.ПолучитьИдентификатор());
	КонецЦикла;
	
	ЗаполнитьДанныеДляРеклассификации(СписокИдентификаторов);
	
КонецПроцедуры

&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)

	// Сохраним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации; 
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, 	"_");
	ИмяПодменю      = Лев(ИмяКнопки, 	Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки, 	Позиция + 1);
	
	Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности[ИмяВидаОперации];
	
	// Если операция не поменялась, то выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		
		// Установить видимость реквизитов и заголовков колонок.	
		УправлениеЭлементамиФормыСервер();
			
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеВидаОперацииСервер();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	// Адаптация для ERP. Начало. 18.03.2014{{
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()]));
	// Адаптация для ERP. Конец. 18.03.2014}}
	КэшПеречисления.Вставить("бит_му_ВидыОперацийРеклассификацияЗадолженности", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Типы договоров
	КэшированныеЗначения.Вставить("ТипДоговораЗаймыПолученные", 	Справочники.бит_ТипыДоговоров.ЗаймыПолученные);
	КэшированныеЗначения.Вставить("ТипДоговораКредитыПолученные", 	Справочники.бит_ТипыДоговоров.КредитыПолученные);
	КэшированныеЗначения.Вставить("ТипДоговораЗаймыВыданные", 		Справочники.бит_ТипыДоговоров.ЗаймыВыданные);
	КэшированныеЗначения.Вставить("ТипДоговораЦенныеБумаги", 		Справочники.бит_ТипыДоговоров.ЦенныеБумаги);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура обрабатывает изменение вида операции.
// 
&НаСервере
Процедура ОбработатьИзменениеВидаОперацииСервер()

	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	Модифицированность = Истина;

КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер() 

// Процедура заполняет валюту и курс взаиморасчетов для строки табличной части.
// 
// Параметры:
//  Идентификатор - Число - Индентификатор строки табличной части.
// 
&НаСервере         
Процедура ЗаполнитьКурсВзаиморасчетов(Идентификатор)

	ТекущиеДанные = Объект.ДанныеРеклассификации.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВалютаВзаиморасчетов = ТекущиеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаВзаиморасчетов, Объект.Дата);
	
	ТекущиеДанные.КурсВзаиморасчетов 		= СтрКурса.Курс;
	ТекущиеДанные.КратностьВзаиморасчетов 	= СтрКурса.Кратность;

КонецПроцедуры // ЗаполнитьКурсВзаиморасчетов()

// Формирует список видов операций для выбора вида операции перед созданием документа.
// 
&НаКлиенте
Процедура СформироватьДеревоВидовОпераций()

	ЭлементыДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = ЭлементыДерева.Добавить();
	СтрокаНовая.ВидОперации = "Доступные виды операций";
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекСтр Из фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности Цикл
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекСтр.Значение;	
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

// Процедура получает и записывает валюту международного учета в кэш значений.
// 
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура обрабатывает изменение валюты документа.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// Процедура обрабатывает изменение контрагента.
// 
// Параметры:
//  ИдСтроки - Число.
// 
&НаСервере
Процедура ИзменениеКонтрагента(ИдСтроки)

	ТекущаяСтрока = Объект.ДанныеРеклассификации.НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда	
		Возврат;	
	КонецЕсли; 
	
	СтруктураДополнительныхПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(фСписокТиповДоговоров) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗначениеОтбора", 		фСписокТиповДоговоров);
		СтруктураОтбора.Вставить("ВидСравненияОтбора",	ВидСравнения.ВСписке);
		
		СтруктураДополнительныхПараметров.Вставить("бит_ТипДоговора", СтруктураОтбора);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(ТекущаяСтрока.ДоговорКонтрагента
														  ,ТекущаяСтрока.Контрагент
														  ,Объект.Организация
														  ,фСписокВидовДоговоров
														  ,СтруктураДополнительныхПараметров);
														  
	// Мог измениться договор.
	ИзменениеДоговораСервер(ТекущаяСтрока.ДоговорКонтрагента, ТекущаяСтрока.Контрагент);
		
	
	СписокИдентификаторов = Новый Массив;
	СписокИдентификаторов.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	
	ЗаполнитьДанныеДляРеклассификации(СписокИдентификаторов);
	
	ЗаполнитьКурсВзаиморасчетов(ТекущаяСтрока.ПолучитьИдентификатор());			
	
КонецПроцедуры // ИзменениеКонтрагента()

// Процедура обрабатывает изменение договора. Сервер.
// 
// Параметры:
//  Договор				- СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);
	КонецЕсли;
	
КонецПроцедуры // ИзменениеДоговораСервер()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
&НаСервере 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

// Процедура заполняет табличную часть "ДанныеРеклассификации".
// 
// Параметры:
//  СписокИдентификаторов - Массив.
// 
&НаСервере 
Процедура ЗаполнитьДанныеДляРеклассификации(СписокИдентификаторов = Неопределено)
	
	Если СписокИдентификаторов = Неопределено Тогда   		
		
		НомераСтрок     = Неопределено;
		СписокДоговоров = Неопределено;
		
	Иначе
		
		НомераСтрок 	= Новый Массив;
		СписокДоговоров = Новый Массив;
		
		Для каждого ТекСтр Из СписокИдентификаторов Цикл
			СтрокаТЧ = Объект.ДанныеРеклассификации.НайтиПоИдентификатору(ТекСтр);
			СписокДоговоров.Добавить(СтрокаТЧ.ДоговорКонтрагента);
			НомераСтрок.Добавить(Объект.ДанныеРеклассификации.Индекс(СтрокаТЧ));
		КонецЦикла;
		
	КонецЕсли;
	
	ДокОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокОбъект.ЗаполнитьТчДанныеРеклассификации(НомераСтрок, СписокДоговоров);
	ЗначениеВДанныеФормы(ДокОбъект, Объект);
	
КонецПроцедуры // ЗаполнитьДанныеДляРеклассификации()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ДанныеРеклассификацииСчетКраткосрочныхОбязательств);
	МассивЭлементов.Добавить(Элементы.ДанныеРеклассификацииСчетДолгосрочныхОбязательств);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура устанавливает отборы для договора контрагента.
// 
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(фСписокВидовДоговоров.ВыгрузитьЗначения()));
		КонецЕсли;
	    Если фСписокТиповДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("бит_ТипДоговора", фСписокТиповДоговоров);
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура формирует список доступных видов договоров.
// 
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
	ВидыОпераций				= фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности;
	ВидыДоговоровКонтрагентов 	= фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов;
	
	фСписокВидовДоговоров.Очистить();;
												   
	Если Объект.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПокупателем);
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомитентом);
		
		Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда		
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(фСписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомиссионеромНаЗакупку");
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(фСписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");		
			фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);		
		КонецЕсли; 
				
		фСписокТиповДоговоров.Очистить();
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
		
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПоставщиком);
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомитентом);
		
		Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда		
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(фСписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомиссионеромНаЗакупку");
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(фСписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");				
			фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);		
		КонецЕсли; 
				
		фСписокТиповДоговоров.Очистить();
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		
		Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда		
			фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);		
		КонецЕсли; 
				
		фСписокТиповДоговоров.Очистить();
		фСписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораЗаймыПолученные);
		фСписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораКредитыПолученные);
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
		
		Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда		
			фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);		
		КонецЕсли; 
				
		фСписокТиповДоговоров.Очистить();
		фСписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораЗаймыВыданные);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ДанныеРеклассификации;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество() > 0 Тогда
						  
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать сумму документа?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыКлиент", ЭтотОбъект, ТаблицаОбъекта);	
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли; 
		
КонецПроцедуры // ИзменениеВалютыКлиент()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ          - Строка.
//  ТаблицаОбъекта - ДанныеФормыКоллекция.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыКлиент(Ответ, ТаблицаОбъекта) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Выполним пересчет сумм строк табличной части.
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			СтрокаТаблицы.СуммаПоГрафику = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПоГрафику
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
			СтрокаТаблицы.СуммаПоСчету = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПоСчету
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
			СтрокаТаблицы.СуммаРеклассификации = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаРеклассификации
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
		КонецЦикла;
		
	КонецЕсли;

	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ВопросИзменениеВалютыКлиент()

// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
// 
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим отбор для договора контрагента.
		УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
		
	Иначе
		
		СтруктураДополнительныхПараметров = Новый Структура;
		
		Если ЗначениеЗаполнено(фСписокТиповДоговоров) Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЗначениеОтбора", 		фСписокТиповДоговоров);
			СтруктураОтбора.Вставить("ВидСравненияОтбора",	ВидСравнения.ВСписке);
			СтруктураОтбора.Вставить("ДоступностьОтбора",	Ложь);
			
			СтруктураДополнительныхПараметров.Вставить("бит_ТипДоговора", СтруктураОтбора);
		КонецЕсли;
		
		// Обработаем начало выбора договора контрагента в обычном приложении.
		бит_РаботаСДиалогамиКлиент.НачалоВыбораДоговораКонтрагентаОбычноеПриложение(Объект
																				   ,Элемент
																				   ,Контрагент_Владелец
																				   ,Договор
																				   ,фСписокВидовДоговоров
																				   ,СтандартнаяОбработка
																				   ,СтруктураДополнительныхПараметров);
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораДоговораКлиент()

// Процедура вычисляет сумму реклассификации.
// 
&НаКлиенте 
Процедура ВычислитьСуммаРеклассификации()

	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаРеклассификации = ТекущиеДанные.СуммаПоГрафику - ТекущиеДанные.СуммаПоСчету;

КонецПроцедуры // ВычислитьСуммаПогашенияОбязательства() 

// Процедура вычисляет сумму реклассификации.
// 
&НаКлиенте 
Процедура ВычислитьСуммаРеклассификацииВзаиморасчеты()

	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаРеклассификацииВзаиморасчеты = ТекущиеДанные.СуммаПоГрафикуВзаиморасчеты - ТекущиеДанные.СуммаПоСчетуВзаиморасчеты;

	ДанныеРеклассификацииСуммаРеклассификацииВзаиморасчетыПриИзменении(Элементы.ДанныеРеклассификацииСуммаРеклассификацииВзаиморасчеты);
	
КонецПроцедуры // ВычислитьСуммаПогашенияОбязательства() 

// Функция вычисляет сумму в валюте документа.
// 
// Параметры:
//  Сумма			- Число.
//  ПоКурсуНач 		- Число.
//  ПоКратностьНач 	- Число.
//  ПоКурсуКон 		- Число.
//  ПоКратностьКон 	- Число.
// 
// Возвращаемое значение:
//  Результат 		- Число.
// 
&НаКлиенте 
Функция ВычислитьСумму(Сумма, ПоКурсуНач, ПоКратностьНач, ПоКурсуКон, ПоКратностьКон)

	Результат = 0;
	
	Если (ПоКурсуКон = 0) ИЛИ (ПоКратностьНач = 0) Тогда
		ТекстСообщения = "При пересчете суммы обнаружен нулевой курс!";	 
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		Результат = (Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции // ВычислитьСумму()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормыСервер()
	
	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности;
	
	Если Объект.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
		ЗаголовокКраткосрочныхАктивовОбязательств 	= "Счет краткосрочных активов";
		ЗаголовокДолгосрочныхАктивовОбязательств 	= "Счет долгосрочных активов";
		
	Иначе
		ЗаголовокКраткосрочныхАктивовОбязательств 	= "Счет краткосрочных обязательств";
		ЗаголовокДолгосрочныхАктивовОбязательств 	= "Счет долгосрочных обязательств";
	КонецЕсли;
	
	Элементы.ДанныеРеклассификацииСчетКраткосрочныхОбязательств.Заголовок 	= ЗаголовокКраткосрочныхАктивовОбязательств;
	Элементы.ДанныеРеклассификацииСчетДолгосрочныхОбязательств.Заголовок	= ЗаголовокДолгосрочныхАктивовОбязательств;
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);

КонецПроцедуры // УправлениеЭлементамиФормыСервер()

// Процедура окончание выбора вида операции.
// 
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если (ТипЗнч(СтруктураПараметров) = Тип("Структура")) И СтруктураПараметров.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = СтруктураПараметров.ВидОперации;																		   
	Иначе
		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности.КредитыЗаймыПолученные;
	КонецЕсли;
	
	ОбработатьИзменениеВидаОперацииСервер();
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;

КонецПроцедуры // ПриОткрытииПромежуточная()

// Процедура выполняет окончательные операции по открытию формы. 
// 
&НаКлиенте
Процедура ПриОткрытииОкончание()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	мКэшРеквизитовФормы.Вставить("Дата");

	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();

КонецПроцедуры // ПриОткрытииОкончание()


#КонецОбласти

#КонецОбласти