#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
               
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Подсчитаем и запишем сумму документа.
	СуммаДокумента = ДанныеРеклассификации.Итог("СуммаРеклассификации");
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда.
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	ТабЧасть.Контрагент,
	               	|	ТабЧасть.ДоговорКонтрагента,
	               	|	ТабЧасть.СуммаПоГрафику,
	               	|	ТабЧасть.СуммаПоСчету,
	               	|	ТабЧасть.СуммаРеклассификации,
	               	|	ТабЧасть.СчетКраткосрочныхОбязательств,
	               	|	ТабЧасть.СчетДолгосрочныхОбязательств,
	               	|	ТабЧасть.ВалютаВзаиморасчетов,
	               	|	ТабЧасть.СуммаРеклассификацииВзаиморасчеты КАК СуммаВзаиморасчетов
	               	|ИЗ
	               	|	Документ.бит_му_РеклассификацияЗадолженности.ДанныеРеклассификации КАК ТабЧасть
	               	|ГДЕ
	               	|	ТабЧасть.Ссылка = &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоДанныеРеклассификации = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДанныеРеклассификации", ТаблицаПоДанныеРеклассификации);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура заполняет табличную часть "ДанныеРеклассификации".
// 
// Параметры:
//  НомераСтрок 	 - Массив.
//  СписокДоговоров  - Массив.
// 
Процедура ЗаполнитьТчДанныеРеклассификации(НомераСтрок = Неопределено, СписокДоговоров = Неопределено) Экспорт
	
	// Сформируем список колонок для очистки.
	ТабЗнач = ДанныеРеклассификации.Выгрузить();
	Колонки = Новый Массив;
	Для каждого ТекСтр Из ТабЗнач.Колонки Цикл
		Если (ТекСтр.Имя <> "Контрагент") И (ТекСтр.Имя <> "ДоговорКонтрагента") 
			И (ТекСтр.Имя <> "НомерСтроки") И (ТекСтр.Имя <> "ИсходныйНомерСтроки") Тогда
			Колонки.Добавить(ТекСтр.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Выборка = ПолучитьВыборкуДляЗаполненияДокумента(СписокДоговоров);
	
	Если НомераСтрок = Неопределено Тогда
		
		// Заполним ТЧ.
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДанныеРеклассификации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	Иначе
		
		Для каждого ТекСтр Из НомераСтрок Цикл
			
			СтрокаТЧ = ДанныеРеклассификации[ТекСтр];
			
			// Очистим данные в строке ТЧ.
			Для каждого ТекКолонка Из Колонки Цикл
				СтрокаТЧ[ТекКолонка] = Неопределено;
			КонецЦикла;
			
			// Найдем данные в выборке и заполним строку ТЧ.
			СтуктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента");
			СтуктураПоиска.Контрагент 			= СтрокаТЧ.Контрагент;
			СтуктураПоиска.ДоговорКонтрагента	= СтрокаТЧ.ДоговорКонтрагента;
			
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(СтуктураПоиска) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;			

КонецПроцедуры // ЗаполнитьТчДанныеРеклассификации()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, Организация, ВидОперации.
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	// Получим валюту международного учета.
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	ИзменениеВалютыМодуль();
	
	// Заполняет табличную часть "ДанныеРеклассификации".
	ЗаполнитьТчДанныеРеклассификации();	

КонецПроцедуры // ЗаполнитьДокумент()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
		ВидОперации = Неопределено;
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Функция возвращает коэффициент пересчета сумм из валюты регламентированного учета в валюту документа.
// 
Функция ПолучитьКоэффициентВалют()
	
	ВидыКурсов			= Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, Дата, ВидыКурсов);
	
	КурсыРегл  	= СтруктураКурсыВалют.Регл;
	КурсыДок 	= СтруктураКурсыВалют.Документ;

	Коэффициент = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(1, КурсыРегл.Валюта, 		КурсыДок.Валюта,
																	 КурсыРегл.Курс, 		КурсыДок.Курс,
																	 КурсыРегл.Кратность, 	КурсыДок.Кратность);
																	 
	Возврат Коэффициент;
	
КонецФункции // ПолучитьКоэффициентВалют()

// Функция возвращает выборку для заполнения табличной части.
// 
// Параметры:
//  СписокДоговоров - Массив.
// 
// Возвращаемое значение:
// 	Выборка из результата запроса.
// 
Функция ПолучитьВыборкуДляЗаполненияДокумента(СписокДоговоров = Неопределено)
	
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("РасчетыВУсловныхЕдиницах") <> Неопределено Тогда
		мРасчетыВУсловныхЕдиницах = "РасчетыВУсловныхЕдиницах";
	Иначе
		мРасчетыВУсловныхЕдиницах = "ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте)";
	КонецЕсли; 
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК Курс,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Кратность
	|ПОМЕСТИТЬ КурсыВалютСрезПоследних
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	|		ПО Валюты.Ссылка = КурсыВалютСрезПоследних.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_му_ФинансовыеНачисленияОборотыВесьПериод.Контрагент,
	|	бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента,
	|	СУММА(ВЫБОР
	|			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидИсточникаЗадолженности = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыИсточниковЗадолженности.КредиторскаяЗадолженность)
	|				ТОГДА ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот, 0) - ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0) + ЕСТЬNULL(бит_му_ФинансовыеНачисленияОборотыПредыдущие.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0)
	|			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидИсточникаЗадолженности = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыИсточниковЗадолженности.ДебиторскаяЗадолженность)
	|				ТОГДА ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот, 0) - ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0) + ЕСТЬNULL(бит_му_ФинансовыеНачисленияОборотыПредыдущие.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0)
	|			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента)
	|					И бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыКредитовЗаймов.Рыночный)
	|				ТОГДА ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот, 0) - ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0)
	|			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента)
	|					И бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыКредитовЗаймов.Нерыночный)
	|				ТОГДА ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот, 0) - ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПоГрафику,
	|	бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра КАК ВидКредитаЗайма,
	|	бит_му_ПараметрыФинИнструментовСрезПоследних1.ЗначениеПараметра КАК СчетКраткосрочныхОбязательств,
	|	бит_му_ПараметрыФинИнструментовСрезПоследних2.ЗначениеПараметра КАК СчетДолгосрочныхОбязательств
	|ПОМЕСТИТЬ ФинансовыеНачисления
	|ИЗ
	|	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	|			&Дата,
	|			,
	|			,
	|			Организация = &Организация
	|				И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности
	|" + ?(НЕ ЗначениеЗаполнено(СписокДоговоров), "", "
	|				И ДоговорКонтрагента В (&СписокДоговоров)") + "	
	|) КАК бит_му_ФинансовыеНачисленияОборотыВесьПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	|				&ДатаНач,
	|				,
	|				,
	|				Организация = &Организация
	|					И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности
	|" + ?(НЕ ЗначениеЗаполнено(СписокДоговоров), "", "
	|				И ДоговорКонтрагента В (&СписокДоговоров)") + "	
	|) КАК бит_му_ФинансовыеНачисленияОбороты
	|		ПО бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента = бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента
	|			И бит_му_ФинансовыеНачисленияОборотыВесьПериод.Контрагент = бит_му_ФинансовыеНачисленияОбороты.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	|				,
	|				&МоментВремени,
	|				,
	|				Организация = &Организация
	|					И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности
	|" + ?(НЕ ЗначениеЗаполнено(СписокДоговоров), "", "
	|				И ДоговорКонтрагента В (&СписокДоговоров)") + "	
	|) КАК бит_му_ФинансовыеНачисленияОборотыПредыдущие
	|		ПО бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента = бит_му_ФинансовыеНачисленияОборотыПредыдущие.ДоговорКонтрагента
	|			И бит_му_ФинансовыеНачисленияОборотыВесьПериод.Контрагент = бит_му_ФинансовыеНачисленияОборотыПредыдущие.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &ВидКредитаЗайма) КАК бит_му_ПараметрыФинИнструментовСрезПоследних
	|		ПО бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &СчетКраткосрочныхОбязательств) КАК бит_му_ПараметрыФинИнструментовСрезПоследних1
	|		ПО бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних1.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &СчетДолгосрочныхОбязательств) КАК бит_му_ПараметрыФинИнструментовСрезПоследних2
	|		ПО бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних2.ДоговорКонтрагента
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_му_ФинансовыеНачисленияОборотыВесьПериод.Контрагент,
	|	бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента,
	|	бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра,
	|	бит_му_ПараметрыФинИнструментовСрезПоследних2.ЗначениеПараметра,
	|	бит_му_ПараметрыФинИнструментовСрезПоследних1.ЗначениеПараметра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФинансовыеНачисления.СчетДолгосрочныхОбязательств
	|ПОМЕСТИТЬ СчетаУчета
	|ИЗ
	|	ФинансовыеНачисления КАК ФинансовыеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_му_СобытияФинИнструментовСрезПоследних.Период,
	|	бит_му_СобытияФинИнструментовСрезПоследних.ДоговорКонтрагента,
	|	бит_му_СобытияФинИнструментовСрезПоследних.Регистратор
	|ПОМЕСТИТЬ СобытияРеклассификации
	|ИЗ
	|	РегистрСведений.бит_му_СобытияФинИнструментов.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.бит_му_СобытияФинИнструментов.РеклассификацияЗадолженности)) КАК бит_му_СобытияФинИнструментовСрезПоследних
	|ГДЕ
	|	НЕ бит_му_СобытияФинИнструментовСрезПоследних.Регистратор = &ЭтотДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыеНачисления.Контрагент,
	|	ФинансовыеНачисления.ДоговорКонтрагента,
	|	ФинансовыеНачисления.ВидКредитаЗайма,
	|	ФинансовыеНачисления.СчетКраткосрочныхОбязательств,
	|	ФинансовыеНачисления.СчетДолгосрочныхОбязательств,
	|	СУММА(ФинансовыеНачисления.СуммаПоГрафику) КАК СуммаПоГрафикуВзаиморасчеты,
	|	СУММА(ВЫБОР
	|			КОГДА бит_Дополнительный_2Остатки.Счет = ФинансовыеНачисления.СчетДолгосрочныхОбязательств
	|				ТОГДА ВЫБОР
	|						КОГДА бит_Дополнительный_2Остатки.Счет.Валютный
	|							ТОГДА ЕСТЬNULL(ВЫБОР
	|										КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|											ТОГДА бит_Дополнительный_2Остатки.ВалютнаяСуммаОстатокДт
	|										КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|											ТОГДА бит_Дополнительный_2Остатки.ВалютнаяСуммаОстатокКт
	|										ИНАЧЕ бит_Дополнительный_2Остатки.ВалютнаяСуммаОстаток
	|									КОНЕЦ, 0)
	|						ИНАЧЕ ЕСТЬNULL(ВЫБОР
	|									КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|										ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокДт
	|									КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|										ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокКт
	|									ИНАЧЕ бит_Дополнительный_2Остатки.СуммаРеглОстаток
	|								КОНЕЦ, 0) / КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПоСчетуВзаиморасчеты,
	|	0 КАК СуммаРеклассификацииВзаиморасчеты,
	|	КурсыВалютСрезПоследних.Валюта КАК ВалютаВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
	|	СУММА(ФинансовыеНачисления.СуммаПоГрафику * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент) КАК СуммаПоГрафику,
	|	СУММА(ВЫБОР
	|			КОГДА бит_Дополнительный_2Остатки.Счет = ФинансовыеНачисления.СчетДолгосрочныхОбязательств
	|				ТОГДА ЕСТЬNULL(ВЫБОР
	|							КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|								ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокДт
	|							КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|								ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокКт
	|							ИНАЧЕ бит_Дополнительный_2Остатки.СуммаРеглОстаток
	|						КОНЕЦ, 0) * &Коэффициент
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПоСчету,
	|	0 КАК СуммаРеклассификации
	|ПОМЕСТИТЬ ФинансовыеНачисленияОстатки
	|ИЗ
	|	ФинансовыеНачисления КАК ФинансовыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаУчета.СчетДолгосрочныхОбязательств
	|					ИЗ
	|						СчетаУчета КАК СчетаУчета),
	|				&МассивСубконто,
	|				Организация = &Организация) КАК бит_Дополнительный_2Остатки
	|		ПО ФинансовыеНачисления.Контрагент = бит_Дополнительный_2Остатки.Субконто1
	|			И ФинансовыеНачисления.ДоговорКонтрагента = бит_Дополнительный_2Остатки.Субконто2
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютСрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО (ВЫБОР
	// Адаптация для ERP. Начало. 20.03.2014{{
	|				КОГДА ФинансовыеНачисления.ДоговорКонтрагента." + мРасчетыВУсловныхЕдиницах + "
	// Адаптация для ERP. Конец. 20.03.2014}}
	|					ТОГДА &ВалютаРеглУчета = КурсыВалютСрезПоследних.Валюта
	|				ИНАЧЕ ФинансовыеНачисления.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СобытияРеклассификации КАК СобытияРеклассификации
	|		ПО ФинансовыеНачисления.ДоговорКонтрагента = СобытияРеклассификации.ДоговорКонтрагента
	|
	|ГДЕ
	|	НЕ КОНЕЦПЕРИОДА(ЕстьNULL(СобытияРеклассификации.Период, ДАТАВРЕМЯ(1,1,1)), МЕСЯЦ) = КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФинансовыеНачисления.Контрагент,
	|	ФинансовыеНачисления.ДоговорКонтрагента,
	|	ФинансовыеНачисления.ВидКредитаЗайма,
	|	ФинансовыеНачисления.СчетКраткосрочныхОбязательств,
	|	ФинансовыеНачисления.СчетДолгосрочныхОбязательств,
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыеНачисленияОстатки.Контрагент,
	|	ФинансовыеНачисленияОстатки.ДоговорКонтрагента,
	|	ФинансовыеНачисленияОстатки.ВидКредитаЗайма,
	|	ФинансовыеНачисленияОстатки.СчетКраткосрочныхОбязательств,
	|	ФинансовыеНачисленияОстатки.СчетДолгосрочныхОбязательств,
	|	ФинансовыеНачисленияОстатки.СуммаПоГрафикуВзаиморасчеты,
	|	ФинансовыеНачисленияОстатки.СуммаПоСчетуВзаиморасчеты,
	|	Выразить(ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоСчетуВзаиморасчеты, 0) - ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоГрафикуВзаиморасчеты, 0) КАК Число(15,2)) КАК СуммаРеклассификацииВзаиморасчеты,
	|	ФинансовыеНачисленияОстатки.ВалютаВзаиморасчетов,
	|	ФинансовыеНачисленияОстатки.КурсВзаиморасчетов,
	|	ФинансовыеНачисленияОстатки.КратностьВзаиморасчетов,
	|	ФинансовыеНачисленияОстатки.СуммаПоГрафикуВзаиморасчеты * &Коэффициент * ФинансовыеНачисленияОстатки.КурсВзаиморасчетов / ФинансовыеНачисленияОстатки.КратностьВзаиморасчетов КАК СуммаПоГрафику,
	|	ФинансовыеНачисленияОстатки.СуммаПоСчетуВзаиморасчеты * &Коэффициент * ФинансовыеНачисленияОстатки.КурсВзаиморасчетов / ФинансовыеНачисленияОстатки.КратностьВзаиморасчетов КАК СуммаПоСчету,
	|	Выразить((ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоСчетуВзаиморасчеты, 0) - ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоГрафикуВзаиморасчеты, 0)) КАК Число(15,2)) * &Коэффициент * ФинансовыеНачисленияОстатки.КурсВзаиморасчетов / ФинансовыеНачисленияОстатки.КратностьВзаиморасчетов КАК СуммаРеклассификации,
	|	ФинансовыеНачисленияОстатки.СуммаПоГрафику КАК СуммаПоГрафикуРегл,
	|	ФинансовыеНачисленияОстатки.СуммаПоСчету КАК СуммаПоСчетуРегл,
	|	ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоСчету, 0) - ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоГрафику, 0) КАК СуммаРеклассификацииРегл
	|ИЗ
	|	ФинансовыеНачисленияОстатки КАК ФинансовыеНачисленияОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СчетаУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ФинансовыеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ФинансовыеНачисленияОстатки
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ВидыСубконто = ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ВидыСубконто.Контрагенты);
	МассивСубконто.Добавить(ВидыСубконто.ДоговорыКонтрагентов);
	
	СледМесяц = НачалоМесяца(КонецМесяца(Дата)+1);
	
	Запрос.УстановитьПараметр("ДатаНач", 							ДобавитьМесяц(СледМесяц, 12));
	Запрос.УстановитьПараметр("Дата", 								КонецДня(Дата));
	Запрос.УстановитьПараметр("МоментВремени",						КонецДня(Дата));	
	Запрос.УстановитьПараметр("Организация", 						Организация);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",					Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ЭтотДокумент", 						Ссылка);
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности;
	ВидыИсточниковЗадолженности = Перечисления.бит_му_ВидыИсточниковЗадолженности;
	ВидыПараметров = ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов;
	
	Если ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности", 		ВидыИсточниковЗадолженности.КредитыЗаймы);
		Запрос.УстановитьПараметр("СчетКраткосрочныхОбязательств", 	ВидыПараметров.СчетКраткосрочныхОбязательств);
		Запрос.УстановитьПараметр("СчетДолгосрочныхОбязательств", 	ВидыПараметров.СчетДолгосрочныхОбязательств);

	ИначеЕсли ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности",		ВидыИсточниковЗадолженности.ДебиторскаяЗадолженность);
		Запрос.УстановитьПараметр("СчетКраткосрочныхОбязательств", 	ВидыПараметров.СчетКраткосрочныхОбязательств);
		Запрос.УстановитьПараметр("СчетДолгосрочныхОбязательств", 	ВидыПараметров.СчетДолгосрочныхОбязательств);
		
	ИначеЕсли ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности",		ВидыИсточниковЗадолженности.КредиторскаяЗадолженность);
		Запрос.УстановитьПараметр("СчетКраткосрочныхОбязательств", 	ВидыПараметров.СчетКраткосрочныхОбязательств);
		Запрос.УстановитьПараметр("СчетДолгосрочныхОбязательств", 	ВидыПараметров.СчетДолгосрочныхОбязательств);
		
	ИначеЕсли ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности", 		ВидыИсточниковЗадолженности.ЗаймыВыданные);
		Запрос.УстановитьПараметр("СчетКраткосрочныхОбязательств", 	ВидыПараметров.СчетКраткосрочныхАктивов);
		Запрос.УстановитьПараметр("СчетДолгосрочныхОбязательств", 	ВидыПараметров.СчетДолгосрочныхАктивов);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидКредитаЗайма", 					ВидыПараметров.ВидКредитаЗайма);
	Запрос.УстановитьПараметр("Коэффициент",						ПолучитьКоэффициентВалют());
	Запрос.УстановитьПараметр("СписокДоговоров",					СписокДоговоров);
	Запрос.УстановитьПараметр("МассивСубконто",						МассивСубконто);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;

КонецФункции // ПолучитьВыборкуДляЗаполненияДокумента()

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаДанных = СтруктураТаблиц.ДанныеРеклассификации;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Формируем проводку по реклассификации задолженности.
		// Дт Счет обязательства долгосрочный Кт Счет обязательства краткосрочный.
		СформироватьЗаписьПоРеклассификацииЗадолженности(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение по реклассификации задолженности.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 	СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьЗаписьПоРеклассификацииЗадолженности(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности;
	
	Если СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		// Дт Счет обязательства долгосрочный Кт Счет обязательства краткосрочный.
		СчетДт = СтрокаТаблицы.СчетДолгосрочныхОбязательств;	СчетКт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		// Дт Счет обязательства краткосрочный Кт Счет обязательства долгосрочный.
		СчетДт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;	СчетКт = СтрокаТаблицы.СчетДолгосрочныхОбязательств;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
		// Дт Счет актива краткосрочный Кт Счет актива долгосрочный.
		СчетДт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;	СчетКт = СтрокаТаблицы.СчетДолгосрочныхОбязательств;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
		// Дт Счет обязательства долгосрочный Кт Счет обязательства краткосрочный.
		СчетДт = СтрокаТаблицы.СчетДолгосрочныхОбязательств;	СчетКт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;
		
	Иначе
		Возврат;		
	КонецЕсли;
	
	СуммаПроводки = СтрокаТаблицы.СуммаРеклассификации;
	СуммаПроводкиВзаиморасчеты = СтрокаТаблицы.СуммаВзаиморасчетов;
	Если СуммаПроводки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.КорректироватьКраткосрочнуюЗадолженность И (СуммаПроводки < 0) Тогда
		СуммаПроводки = - СуммаПроводки;
		СуммаПроводкиВзаиморасчеты = - СуммаПроводкиВзаиморасчеты;
		Счет = СчетДт;		СчетДт = СчетКт;		СчетКт = Счет;
	КонецЕсли;
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтрокаТаблицы.ВалютаВзаиморасчетов
										 ,СчетДт
										 ,СчетКт
										 ,СуммаПроводкиВзаиморасчеты
										 ,"Реклассификация задолженности");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	// Выполним валютные пересчеты.
	СтруктураПараметров.Вставить("Сумма", СуммаПроводки);
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	// Запишем событие.
	НоваяЗапись = Движения.бит_му_СобытияФинИнструментов.Добавить();
	НоваяЗапись.ДоговорКонтрагента 	= СтрокаТаблицы.ДоговорКонтрагента;
	НоваяЗапись.Организация			= СтруктураШапкиДокумента.Организация;
	НоваяЗапись.Период				= СтруктураШапкиДокумента.Дата;
	НоваяЗапись.Событие				= Перечисления.бит_му_СобытияФинИнструментов.РеклассификацияЗадолженности;
	
КонецПроцедуры // СформироватьЗаписьПоРеклассификацииЗадолженности()

#КонецОбласти

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
