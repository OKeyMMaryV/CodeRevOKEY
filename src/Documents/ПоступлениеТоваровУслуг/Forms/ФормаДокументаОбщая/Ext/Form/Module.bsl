// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
&НаКлиенте
Перем ЭтоНоваяСтрока;
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормы.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия") Тогда
		СписокТабличныхЧастей.Добавить("Товары", "Товары");
		Если НЕ ЭтоКомиссия Тогда
			СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
			СписокТабличныхЧастей.Добавить("АгентскиеУслуги", "АгентскиеУслуги");
		КонецЕсли;
		СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
		СписокТабличныхЧастей.Добавить("Товары", "Товары");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование") Тогда
		СписокТабличныхЧастей.Добавить("Оборудование", "Оборудование");
		СписокТабличныхЧастей.Добавить("Товары", "Товары");
		Если НЕ ЭтоКомиссия Тогда
			СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
		КонецЕсли;
		СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства") Тогда
		СписокТабличныхЧастей.Добавить("ОбъектыСтроительства", "ОбъектыСтроительства");
		Если НЕ ЭтоКомиссия Тогда
			СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
		КонецЕсли;
	// BIT AMerkulov 30-12-2015 ++
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары") ИЛИ
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги")Тогда
		СписокТабличныхЧастей.Добавить("Товары", "Товары");
		Если НЕ ЭтоКомиссия Тогда
			СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
			СписокТабличныхЧастей.Добавить("АгентскиеУслуги", "АгентскиеУслуги");
		КонецЕсли;
		СписокТабличныхЧастей.Добавить("ВозвратнаяТара", "ВозвратнаяТара");
	// BIT AMerkulov 30-12-2015 --		
	КонецЕсли;
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	Если НЕ ЗначениеЗаполнено(АктивизироватьТабличнуюЧасть) Тогда
		// Если все табличные части пустые, то функция ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть()
		// вернет пустую строку, активизируем при этом первую в списке табличную часть,
		// чтобы не оставались текущими табличные части на скрытых закладках.
		АктивизироватьТабличнуюЧасть = СписокТабличныхЧастей[0].Значение;
	КонецЕсли;
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// Изменение вида операции: Топливо -> Товары, услуги, комиссия
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия")
		И ЗначениеЗаполнено(Объект.Топливо) И Не ЗначениеЗаполнено(Объект.Товары) Тогда
		
		Объект.Товары.Загрузить(Объект.Топливо.Выгрузить());
		Объект.Топливо.Очистить();
		
	КонецЕсли;
	
	ВидОперацииПриОткрытии = Объект.ВидОперации;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование) Тогда
		ИспользуютсяСканерыШтрихкода = (МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	УстановитьЭлементыФормыПоВидуОперации();
	
	УстановитьВидимостьСчетовУчета();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
	ЗаполнитьКэшЗначений();
	пИменаНеобходимыхТаблиц = "Товары,Услуги,Оборудование,ОбъектыСтроительства,АгентскиеУслуги";
	мИменаТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пИменаНеобходимыхТаблиц,",");
		
	Для каждого пИмяТаблицы Из мИменаТаблиц Цикл
		
		// Отображение дополнительных измерений в табличных полях.
		бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	, пИмяТаблицы
																	, фКэшЗначений.ИзмеренияДоп
																	, фКэшЗначений.НастройкиИзмерений);
	КонецЦикла;                                              	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)	
	
	УстановитьУсловноеОформление();
	
	// ИнтеграцияЕГАИС
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ТТНВходящаяЕГАИС = Параметры.Основание;
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
		
	//izhtc alena 17.08.2015(
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.ПоступлениеТоваровУслуг.ФормаДокументаОбщая");
	Если Объект.Ссылка.Пустая() Тогда 
		//Ванюков К. + // для пользователей ОКЕЯ реквизит «Зачет авансов» автоматически принимет значение «Не зачитывать» // 2012-03-26
		ОК_ОбщегоНазначения.УстановитьСпособЗачетаАвансов(Объект.СпособЗачетаАвансов);
		//Ванюков К. -
	КонецЕсли;
	ОК_ИзменитьСвойстваПолейФормы();
	//izhtc alena 17.08.2015)		
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ПоступлениеТоваровУслуг",
		"ФормаДокументаОбщая",
		НСтр("ru='Новости: Поступление (акт, накладная)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	ДополнительныеПараметры = Неопределено;
	СобытияФормИС.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтаФорма);
	
	// бит_Финанс изменения кода. Начало.
	бит_ПриСозданииНаСервереЗавершение();
	// бит_Финанс добавление кода. 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-17 (#3758)
	ОбновитьДоступностьID_Разноска();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-17 (#3758)
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-04-26 (#ТП_БП05_ФР05)
	ок_МодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-04-26 (#ТП_БП05_ФР05)

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеТоваровУслугФормы.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПоставщика.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаПодбораРНПТ" Тогда
		ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекущийКод = Параметр[0];
			Иначе
				ТекущийКод = Параметр[1][1];
			КонецЕсли;
			ДобавитьПоШтрихкодуНаСервере(ТекущийКод);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_СчетФактураПолученный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			ОригиналПолучен = ЕстьОригиналДокумента(Объект.Организация, Объект.Ссылка);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ДоговорыКонтрагентов" И Объект.ДоговорКонтрагента = Источник Тогда
		
		ТребуетсяПерерасчитатьСрокОплаты =
			ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты;
			
		Если ТребуетсяПерерасчитатьСрокОплаты Тогда
			ОбновитьСрокОплатыНаСервере();
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	ИначеЕсли ИмяСобытия = "Запись_УведомлениеОВвозеПрослеживаемыхТоваров" 
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ПервичныйДокумент") И Объект.Ссылка = Параметр.ПервичныйДокумент 
		ИЛИ ИмяСобытия = "СозданыУведомленияВПомощникеПолученияРНПТ" Тогда
		
		УстановитьПредставлениеНадписиУведомлениеОВвозе();
		ПодключитьОбработчикОжидания("Подключаемый_НапоминатьОбУведомленияхОВвозе", 0.1, Истина);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 	
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Начало_бит_Магомедов_01.08.2013
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//Конец_бит_Магомедов_01.08.2013
	//izhtc alena 09/10/2015(
	УстановитьВидимость();
	//izhtc alena 09/10/2015)
	
	Если НЕ ТТНВходящаяЕГАИС.Пустая()
		И Параметры.Ключ.Пустая() 
		И ЕстьНесопоставленныеТовары() Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьТоварыПоЕГАИСНаКлиенте", 0.1, Истина);
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	// Возможно было изменение вида операции в ПередЗаписьюНаСервере() на прошлом этапе записи текущего документа из формы. 
	// Поэтому чтобы в модуле объекта в ОбработкаПроверкиЗаполнения() проверка выдавала сообщения
	// относительно общей формы, установим вид операции, который был при открытии 
	// (гарантированно соответствующий общей форме)
	// Если проверки пройдут, то в ПередЗаписьюНаСервере() будет определен рекомендуемый вид операции снова.
	Объект.ВидОперации = ВидОперацииПриОткрытии;

	ПоступлениеТоваровУслугФормыКлиент.ПередЗаписью(
		ЭтаФорма, Отказ, ПараметрыЗаписи);
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	РекомендуемыйВидОперации = ОпределитьРекомендуемыйВидОперации();
	Если ЗначениеЗаполнено(РекомендуемыйВидОперации) Тогда
		ТекущийОбъект.ВидОперации = РекомендуемыйВидОперации;
	Иначе
		// Если рекомендации нет, то оставляем вид операции, который был при открытии.
		ТекущийОбъект.ВидОперации = ВидОперацииПриОткрытии;
	КонецЕсли;
	
	//БИТ Тртилек 07.12.11
	Если  ТекущийОбъект.Модифицированность() = Истина Тогда
		Для Каждого СтрокаТЧ ИЗ ТекущийОбъект.Услуги Цикл
			Если ТипЗнч(СтрокаТЧ.Субконто1) = Тип("СправочникСсылка.РасходыБудущихПериодов") И СтрокаТЧ.Субконто1 <> Справочники.РасходыБудущихПериодов.ПустаяСсылка() Тогда
				РБПОбъект = СтрокаТЧ.Субконто1.ПолучитьОбъект();
				Если ТипЗнч(РБПОбъект.бит_Субконто1) = Тип ("СправочникСсылка.Контрагенты") И ТипЗнч(РБПОбъект.бит_Субконто2) = Тип ("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Если РБПОбъект.бит_Субконто1 <> ТекущийОбъект.Контрагент ИЛИ РБПОбъект.бит_Субконто2 <> ТекущийОбъект.ДоговорКонтрагента Тогда
						РБПОбъект.бит_Субконто1 = ТекущийОбъект.Контрагент;
						РБПОбъект.бит_Субконто2 = ТекущийОбъект.ДоговорКонтрагента;
						РБПОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	///БИТ Тртилек 07.12.11
	
	//Ванюков К. + // Проверка заполненности ОК_РазнесениеОборотов // 2012-01-25
	ОК_ОбщегоНазначения.ПроверитьЗаполнениеОК_РазнесениеОборотов(ТекущийОбъект, ПараметрыЗаписи.РежимЗаписи, Отказ);
	//Ванюков К. -	
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПоступлениеТоваровУслугФормы.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеТоваровУслугФормы.ПослеЗаписиНаСервере(
		ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-25 (#4214)
	УчетНДСКлиентСервер.ОтобразитьПолеУПД(ЭтотОбъект, ТекущийОбъект.ЭтоУниверсальныйДокумент);	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-25 (#4214) 
	
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтеграцияЕГАИС
	ТТНВходящаяЕГАИСОбновитьФорму = Ложь;
	Если ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
		ТТНВходящаяЕГАИСДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНВходящаяЕГАИС, "ДокументОснование");
		Если Не ЗначениеЗаполнено(ТТНВходящаяЕГАИСДокументОснование) Тогда
			ИнтеграцияЕГАИСВызовСервера.ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(
				ТТНВходящаяЕГАИС,
				Объект.Ссылка);
			ТТНВходящаяЕГАИСОбновитьФорму = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.Ссылка);
		
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Если ТТНВходящаяЕГАИСОбновитьФорму Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка",     ТТНВходящаяЕГАИС);
		ПараметрыОповещения.Вставить("Основание",  Объект.Ссылка);
		ПараметрыОповещения.Вставить("Перечитать", Истина);
		
		Оповестить("Запись_ТТНВходящаяЕГАИС", ПараметрыОповещения, Объект.Ссылка);
		ТТНВходящаяЕГАИСОбновитьФорму = Ложь;
		
	КонецЕсли;
	
	СобытияФормИСКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормы.ПриЗаписиНаСервере(
		ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ПоступлениеТоваровУслугФормыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ПоступлениеТоваровУслугФормыКлиент.ПриЗакрытии(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)
	
	ПоступлениеТоваровУслугФормыКлиент.НомерВходящегоДокументаПриИзменении(ЭтаФорма, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И НЕ Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
	Если Объект.Товары.Количество()>0 ИЛИ
		Объект.Услуги.Количество()>0 ИЛИ
		Объект.Оборудование.Количество()>0 ИЛИ
		Объект.ОбъектыСтроительства.Количество()>0 ИЛИ
		Объект.АгентскиеУслуги.Количество()>0
		Тогда
		пОповещениеОтветПоЗаполнениюПериодаВТЧ = Новый ОписаниеОповещения("ОтветПоЗаполнениюПериодаВТЧ",ЭтотОбъект);
		ПоказатьВопрос(пОповещениеОтветПоЗаполнениюПериодаВТЧ, НСтр("ru = 'Дата вх. документа будет установлена в поле ""Период"" табличных частей документа. Продолжить?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	ДатаПриИзмененииНаКлиенте();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-05-28 (#ТП_БП05_ФР05)
	ок_ПерезаполнитьТЧУслуги();
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-05-28 (#ТП_БП05_ФР05)

	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-05-28 (#ТП_БП05_ФР05)
	ок_ПерезаполнитьТЧУслуги();
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-05-28 (#ТП_БП05_ФР05)
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ТоварыСвернуты	= Ложь;
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
	Если НТТ И РассчитыватьСуммаВРознице Тогда
		ТекстВопроса = НСтр("ru = 'Свернуть табличную часть по номенклатуре?'");
		ЗаголовокВопроса = НСтр("ru = 'Свертка по номенклатуре'");
		Оповещение = Новый ОписаниеОповещения("ВопросСвернутьТабличнуюЧастьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
	ЗаполнитьАналитика2ПоСкладу();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	//Начало_бит_Магомедов_01.08.2013
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//Конец_бит_Магомедов_01.08.2013	
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораКонтрагенты");

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	ПоступлениеТоваровУслугФормыКлиент.ПорядокУчетаРасчетовНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка, АдресХранилищаЗачетАвансов);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)
	
	ПоступлениеТоваровУслугФормыКлиент.НомерСчетаФактурыПолученногоПриИзменении(ЭтаФорма, Элемент);	

КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПоставщикаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетНаОплатуПоставщика) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Заполнить документ по счету?";
	Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоСчетуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура КодВидаТранспортаПриИзменении(Элемент)
	
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(Объект.КодВидаТранспорта);
	Если ТекущийКод <> Неопределено Тогда
		НадписьВидТранспорта = Сред(ТекущийКод.Представление, 5);
	Иначе
		НадписьВидТранспорта = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Оборудование

&НаКлиенте
Процедура ОборудованиеПриИзменении(Элемент)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
	УстановитьДоступностьКнопокКопированияКолонокТЧ("Оборудование", Элементы.Оборудование);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
	
	ОбновитьИтоги(ЭтаФорма);
	
	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//izhtc alena 17.08.2015)	

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		Если Элемент.ТекущиеДанные.ПрослеживаемыйТовар Тогда
			Элемент.ТекущиеДанные.РНПТ = "";
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		//izhtc alena 17.08.2015(
		бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
		//izhtc alena 17.08.2015)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
		|ИдентификаторСтроки, РНПТ, ПодсказкаРНПТ, ПрослеживаемыйТовар,
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
		|НомерГТД, СтранаПроисхождения, Всего");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДоговорКонтрагента, НДСНеВыделять");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Объект.НДСНеВыделять Тогда
		ДанныеОбъекта.Вставить("СуммаВключаетНДС", Истина);
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Оборудование.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
		
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ДанныеОбъекта);
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
	ДанныеОбъекта.Вставить("ок_Ссылка", Объект.Ссылка);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)	
	
	ОборудованиеНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Оборудование");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Оборудование");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеЕдиницаИзмеренияПриИзменении(Элемент)

	Элементы.Оборудование.ТекущиеДанные.Коэффициент = 1;

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Оборудование",, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Оборудование",, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Оборудование",, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Оборудование", ПрименяютсяСтавки4и2);
	РаботаСДоговорамиКонтрагентовБПКлиент.НастроитьСпособЗаполненияСтавкиНДС(ЭтотОбъект, "Оборудование");

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Оборудование");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОбъектыСтроительства

&НаКлиенте
Процедура ОбъектыСтроительстваПриИзменении(Элемент)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
	УстановитьДоступностьКнопокКопированияКолонокТЧ("ОбъектыСтроительства", Элементы.ОбъектыСтроительства);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
	
	ОбновитьИтоги(ЭтаФорма);
	
	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//izhtc alena 17.08.2015)	

КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
&НаКлиенте
Процедура ОбъектыСтроительстваПриАктивизацииЯчейки(Элемент)
	
	УстановитьДоступностьКнопокКопированияКолонокТЧ("ОбъектыСтроительства", Элементы.ОбъектыСтроительства);
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)

&НаКлиенте
Процедура ОбъектыСтроительстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		//izhtc alena 17.08.2015(
		бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
		//izhtc alena 17.08.2015)	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваОбъектСтроительстваПриИзменении(Элемент)

	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"ОбъектыСтроительства.ОбъектСтроительства",
		Объект,
		Элементы.ОбъектыСтроительства.ТекущиеДанные);

	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)	
	Элементы.ОбъектыСтроительства.ТекущиеДанные.ок_Аналитика_2 = ПолучитьОбъектСтроительстваДляАналитики2(Элементы.ОбъектыСтроительства.ТекущиеДанные.ОбъектСтроительства);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "ОбъектыСтроительства",, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОбъектыСтроительства", ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "ОбъектыСтроительства");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
	УстановитьДоступностьКнопокКопированияКолонокТЧ("Товары", Элементы.Товары);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
	
	ОбновитьИтоги(ЭтаФорма);

	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//izhtc alena 17.08.2015)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если Копирование И ИспользоватьКонтрольныеЗнакиГИСМ Тогда
		Элемент.ТекущиеДанные.КиЗ_ГИСМ = Неопределено;
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = "";
		Если Элемент.ТекущиеДанные.ПрослеживаемыйТовар Тогда
			Элемент.ТекущиеДанные.РНПТ = "";
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНоваяСтрока = НоваяСтрока;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы	= Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.ОтражениеВУСН	= ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
		Объект.ВидОперации, ЭтоКомиссия);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		//izhtc alena 17.08.2015(
		бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
		//izhtc alena 17.08.2015)
	КонецЕсли;
	
	Если ВестиУчетТабачнойПродукцииМОТП
		ИЛИ ВестиУчетОбувнойПродукцииИСМП Тогда
		ТоварыПриОкончанииРедактированияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриОкончанииРедактированияНаСервере()

	ДополнительныеПараметры = Неопределено;
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, добавленные в табличное поле текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаЗабалансовый", ТекущиеДанные.СчетУчетаЗабалансовый);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("РНПТ", ТекущиеДанные.РНПТ);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("ПодсказкаРНПТ", ТекущиеДанные.ПодсказкаРНПТ);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
		
	ТоварыНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы,
		ПараметрыОбработки.ДанныеОбъекта,
		ПараметрыОбработки.СчетаУчетаКЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	Если ТекущиеДанные <> Неопределено
		И НЕ (ПараметрыОбработки.ДанныеОбъекта.Свойство("ок_Ссылка") 
			И ЗначениеЗаполнено(ПараметрыОбработки.ДанныеОбъекта.ок_Ссылка)) Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом") Тогда
		ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "ТоварыНаКомиссии");
	Иначе
		ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, Материалы");
	КонецЕсли;
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом") Тогда
		ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "ТоварыНаКомиссии");
	Иначе
		ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, Материалы");
	КонецЕсли;
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораНоменклатура");	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	Элементы.Товары.ТекущиеДанные.Коэффициент = 1;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары",, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары",, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Товары",, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Товары", ПрименяютсяСтавки4и2);
	РаботаСДоговорамиКонтрагентовБПКлиент.НастроитьСпособЗаполненияСтавкиНДС(ЭтотОбъект, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаВРознице;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентПриИзменении(Элемент)

	КомитентТабличнойЧастиПриИзменении("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаПриИзменении(Элемент)

	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Товары.ДоговорКонтрагента",
		Объект,
		Элементы.Товары.ТекущиеДанные);
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СчетУчетаЗабалансовый = ЗначениеЗаполнено(ТекущиеДанные.СчетУчета)
		И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетУчета).Забалансовый;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	Если Поле.Имя = "ТоварыРНПТ" Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар 
			И НЕ ПоставщикРезидентТаможенногоСоюза Тогда
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ТоварыПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКиЗ_ГИСМОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Владелец = Элементы.Товары.ТекущиеДанные.Номенклатура;
	ИнтеграцияГИСМКлиентБП.Киз_ГИСМОбработкаВыбора(Элемент, ВыбранноеЗначение, Владелец, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКиЗ_ГИСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИнтеграцияГИСМКлиентБП.Киз_ГИСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКиЗ_ГИСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ИнтеграцияГИСМКлиентБП.Киз_ГИСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
	УстановитьДоступностьКнопокКопированияКолонокТЧ("Услуги", Элементы.Услуги);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
	
	ОбновитьИтоги(ЭтаФорма);
	
	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//izhtc alena 17.08.2015)	

КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
&НаКлиенте
Процедура УслугиПриАктивизацииЯчейки(Элемент)
	
	УстановитьДоступностьКнопокКопированияКолонокТЧ("Услуги", Элементы.Услуги);
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)

&НаКлиенте
Процедура УслугиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	СтрокаТаблицы.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, ЭтоКомиссия);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОтменаРедактированияНовойСтроки = НоваяСтрока И ОтменаРедактирования;
	
	Если Объект.НДСНеВыделять И НЕ ОтменаРедактированияНовойСтроки Тогда
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.СтавкаНДС) тогда
			ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ОтменаРедактированияНовойСтроки Тогда
		ОбновитьИтоги(ЭтаФорма);
		//izhtc alena 17.08.2015(
		бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
		//izhtc alena 17.08.2015)		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиУслугиНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("ПодразделениеЗатратДоступность", ТекущиеДанные.ПодразделениеЗатратДоступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто1Доступность", ТекущиеДанные.Субконто1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто2Доступность", ТекущиеДанные.Субконто2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Субконто3Доступность", ТекущиеДанные.Субконто3Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоНУ1Доступность", ТекущиеДанные.СубконтоНУ1Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоНУ2Доступность", ТекущиеДанные.СубконтоНУ2Доступность);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СубконтоНУ3Доступность", ТекущиеДанные.СубконтоНУ3Доступность);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
		
	УслугиНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы,
		ПараметрыОбработки.ДанныеОбъекта,
		ПараметрыОбработки.СчетаУчетаКЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
	//// BIT AMerkulov 15-08-2015 ++	
	//Если ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда
	//	ЗаполнитьАналитику(ТекущиеДанные.НомерСтроки - 1);
	//КонецЕсли;
	//// BIT AMerkulov 15-08-2015 --
	//Заменено на:
	ЗаполнитьАналитику(ТекущиеДанные.НомерСтроки - 1);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСодержаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	РаботаСНоменклатуройКлиент.СодержаниеПриИзменении(ТекущиеДанные, ТекущаяДатаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораНоменклатура");		

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги", 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги", ПрименяютсяСтавки4и2);
	РаботаСДоговорамиКонтрагентовБПКлиент.НастроитьСпособЗаполненияСтавкиНДС(ЭтотОбъект, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекущиеДанные.СчетЗатратНУ <> ТекущиеДанные.СчетЗатрат Тогда
		
		ТекущиеДанные.СчетЗатратНУ = ТекущиеДанные.СчетЗатрат;
		
		Для Индекс = 1 По 3 Цикл
			ТекущиеДанные["СубконтоНУ" + Индекс] = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(ТекущиеДанные, ПараметрыОбъекта)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
	//// BIT AMerkulov ++
	//Если ЗначениеЗаполнено(Элементы.Услуги.ТекущиеДанные.Период) Тогда
	//	ЗаполнитьАналитику(Элементы.Услуги.ТекущиеДанные.НомерСтроки-1);
	//КонецЕсли;
	//// BIT AMerkulov --
	//Заменено на:
	;
	ЗаполнитьАналитику(Элементы.Услуги.ТекущиеДанные.НомерСтроки-1);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораУслугиСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
	СтатьяЗатратНачалоВыбораНаКлиенте(Элемент, СтандартнаяОбработка, "Услуги", "Субконто1"); 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто1ПриИзменении(Элемент)
	
	ПриИзмененииУслугиСубконто(1);
	
	// BIT AMerkulov 15-08-2015 ++
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3048)
	//ПриИзмененииСубконто(Элементы.Услуги.ТекущиеДанные.НомерСтроки-1, Элементы.Услуги.ТекущиеДанные.Субконто1);
	//Заменено на:
	ПриИзмененииСубконто(Элементы.Услуги.ТекущиеДанные.НомерСтроки-1, Элементы.Услуги.ТекущиеДанные.Субконто1,1);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3048)
	// BIT AMerkulov 15-08-2015 --	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораУслугиСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
	СтатьяЗатратНачалоВыбораНаКлиенте(Элемент, СтандартнаяОбработка, "Услуги", "Субконто2"); 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто2ПриИзменении(Элемент)
	
	ПриИзмененииУслугиСубконто(2);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат)
		И ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
		ДанныеСчетаБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		ДанныеСчетаНУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
		
		Для ИндексБУ = 1 По 3 Цикл
			Для ИндексНУ = 1 По 3 Цикл
				Если ДанныеСчетаБУ["ВидСубконто" + ИндексБУ + "ТипЗначения"] = ДанныеСчетаНУ["ВидСубконто" + ИндексНУ + "ТипЗначения"] Тогда
					СтрокаТаблицы["СубконтоНУ" + ИндексНУ] = СтрокаТаблицы["Субконто" + ИндексБУ];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	// BIT AMerkulov 15-08-2015 ++
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3048)
	//ПриИзмененииСубконто(Элементы.Услуги.ТекущиеДанные.НомерСтроки-1, СтрокаТаблицы.Субконто2);
	//Заменено на:
	ПриИзмененииСубконто(Элементы.Услуги.ТекущиеДанные.НомерСтроки-1, СтрокаТаблицы.Субконто2, 2);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3048)
	// BIT AMerkulov 15-08-2015 --
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораУслугиСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
	СтатьяЗатратНачалоВыбораНаКлиенте(Элемент, СтандартнаяОбработка, "Услуги", "Субконто3"); 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконто3ПриИзменении(Элемент)
	
	ПриИзмененииУслугиСубконто(3);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат)
		И ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
		ДанныеСчетаБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		ДанныеСчетаНУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
		
		Для ИндексБУ = 1 По 3 Цикл
			Для ИндексНУ = 1 По 3 Цикл
				Если ДанныеСчетаБУ["ВидСубконто" + ИндексБУ + "ТипЗначения"] = ДанныеСчетаНУ["ВидСубконто" + ИндексНУ + "ТипЗначения"] Тогда
					СтрокаТаблицы["СубконтоНУ" + ИндексНУ] = СтрокаТаблицы["Субконто" + ИндексБУ];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	// BIT AMerkulov 15-08-2015 ++
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3048)
	//ПриИзмененииСубконто(Элементы.Услуги.ТекущиеДанные.НомерСтроки-1, СтрокаТаблицы.Субконто3);
	//Заменено на:
	ПриИзмененииСубконто(Элементы.Услуги.ТекущиеДанные.НомерСтроки-1, СтрокаТаблицы.Субконто3, 3);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3048)
	// BIT AMerkulov 15-08-2015 --
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетЗатратНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(ТекущиеДанные, ПараметрыОбъекта)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораУслугиСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
	СтатьяЗатратНачалоВыбораНаКлиенте(Элемент, СтандартнаяОбработка, "Услуги", "СубконтоНУ1"); 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ1ПриИзменении(Элемент)
	
	ПриИзмененииУслугиСубконтоНУ(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораУслугиСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
	СтатьяЗатратНачалоВыбораНаКлиенте(Элемент, СтандартнаяОбработка, "Услуги", "СубконтоНУ2"); 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ2ПриИзменении(Элемент)
	
	ПриИзмененииУслугиСубконтоНУ(2);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораУслугиСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
	СтатьяЗатратНачалоВыбораНаКлиенте(Элемент, СтандартнаяОбработка, "Услуги", "СубконтоНУ3"); 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоНУ3ПриИзменении(Элемент)
	
	ПриИзмененииУслугиСубконтоНУ(3);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Услуги");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ АгентскиеУслуги

&НаКлиенте
Процедура АгентскиеУслугиПриИзменении(Элемент)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
	УстановитьДоступностьКнопокКопированияКолонокТЧ("АгентскиеУслуги", Элементы.АгентскиеУслуги);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
&НаКлиенте
Процедура АгентскиеУслугиПриАктивизацииЯчейки(Элемент)
	
	УстановитьДоступностьКнопокКопированияКолонокТЧ("АгентскиеУслуги", Элементы.АгентскиеУслуги);
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)

&НаКлиенте
Процедура АгентскиеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Всего");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ВидОперации, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ЭтоКомиссия, ДоговорКонтрагента");
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ДанныеОбъекта);
	
	АгентскиеУслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСодержаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	РаботаСНоменклатуройКлиент.СодержаниеПриИзменении(ТекущиеДанные, ТекущаяДатаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораНоменклатура");	

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "АгентскиеУслуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "АгентскиеУслуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "АгентскиеУслуги", 1);

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "АгентскиеУслуги");
	РаботаСДоговорамиКонтрагентовБПКлиент.НастроитьСпособЗаполненияСтавкиНДС(ЭтотОбъект, "АгентскиеУслуги");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "АгентскиеУслуги");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентПриИзменении(Элемент)

	КомитентТабличнойЧастиПриИзменении("АгентскиеУслуги");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиДоговорКонтрагентаПриИзменении(Элемент)
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"АгентскиеУслуги.ДоговорКонтрагента",
		Объект,
		Элементы.АгентскиеУслуги.ТекущиеДанные);
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ТаблицаФормыВыбор(ЭтотОбъект, Элемент, Поле);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВозвратнаяТара

&НаКлиенте
Процедура ВозвратнаяТараПриИзменении(Элемент)

	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ВозвратнаяТара.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ВидОперации, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.СуммаВключаетНДС = Истина;
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"ВозвратнаяТара.Номенклатура",
		Объект,
		ТекущиеДанные,
		ДанныеОбъекта,
		ДанныеСтрокиТаблицы);
	
	ВозвратнаяТараНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "ВозвратнаяТара");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "ВозвратнаяТара");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "ВозвратнаяТара");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОборудование(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Оборудование", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Товары", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Услуги", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПодборВозвратнаяТара(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "ВозвратнаяТара", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	АдресХранилищаТовары = ПоместитьТоварыВоВременноеХранилищеНаСервере();

	ПоступлениеТоваровУслугФормыКлиент.ИзменитьТовары(ЭтаФорма, Команда, АдресХранилищаТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ЗарегистрироватьСчетФактуру(ЭтаФорма, Команда);
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВАгентскиеУслуги(Команда)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Не выбрана строка.'"));
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.АгентскиеУслуги.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	Объект.Услуги.Удалить(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВУслуги(Команда)
	
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Не выбрана строка.'"));
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.Услуги.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	Объект.АгентскиеУслуги.Удалить(ТекущиеДанные);
	
	// Заполняем счета учета
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"Услуги.Номенклатура",
		Объект,
		НоваяСтрока);
	
	ИзмененныеРеквизиты = СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	Если ИзмененныеРеквизиты.Свойство("СчетДоходов") И ЗначениеЗаполнено(НоваяСтрока.СчетДоходов) Тогда
		НоваяСтрока.СчетДоходовВедетсяУчетПоНоменклатурнымГруппам =
			БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(НоваяСтрока.СчетДоходов);
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	ОписаниеОповещенияПоискПоШтрихкоду = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ФормаВводШтрихкода", , ЭтотОбъект,,,,ОписаниеОповещенияПоискПоШтрихкоду , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВГИСМ(Команда)
	ИнтеграцияГИСМКлиентБП.КомандаВыгрузитьВГИСМ(ЭтотОбъект);
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-14 (#3758)
&НаКлиенте
Процедура ЗаполнитьIDИзЗаявкиНаДоговор(Команда)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-03 (#4046)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите договор контрагента"); 
		Возврат;
		
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-03 (#4046)
	
	СтруктураПараметрыВыбора = Новый Структура;
	СтруктураПараметрыВыбора.Вставить("РежимВыбора",		Истина);
	СтруктураПараметрыВыбора.Вставить("МножественныйВыбор",	Ложь);
	СтруктураПараметрыВыбора.Вставить("ЗакрыватьПриВыборе",	Истина);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-02 (#4046)
	//СтруктураОтбора = Новый Структура();
	//СтруктураОтбора.Вставить("Контрагент",			Объект.Контрагент);
	//СтруктураОтбора.Вставить("ДоговорКонтрагента",	Объект.ДоговорКонтрагента);
	//
	//СтруктураПараметрыВыбора.Вставить("Отбор",	СтруктураОтбора);
	//
	//ЗаявкаНаДоговорФормаВыбора = ПолучитьФорму("Документ.рс_ЗаявкаНаДоговор.Форма.ФормаВыбораУправляемая", СтруктураПараметрыВыбора, Этаформа);
	//ЗаявкаНаДоговорФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии", ЭтаФорма);
	//
	//МассивДоступныхПолей = Новый Массив;
	//МассивДоступныхПолей.Добавить("дата");
	//МассивДоступныхПолей.Добавить("номер");
	//МассивДоступныхПолей.Добавить("организация");
	//МассивДоступныхПолей.Добавить("контрагент");
	//МассивДоступныхПолей.Добавить("договорконтрагента");
	//МассивДоступныхПолей.Добавить("сумма");
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-22 (#4017)
	//МассивДоступныхПолей.Добавить(НРег("ЦФО"));
	//МассивДоступныхПолей.Добавить(НРег("СтатьяОборотов"));
	//МассивДоступныхПолей.Добавить(НРег("ID"));
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-22 (#4017)
	//
	//Для каждого Список_ТекущийЭлемент Из ЗаявкаНаДоговорФормаВыбора.Элементы.Список.ПодчиненныеЭлементы Цикл
	//	
	//	Если МассивДоступныхПолей.Найти(НРег(Список_ТекущийЭлемент.Имя)) = Неопределено Тогда
	//		Список_ТекущийЭлемент.Видимость = Ложь;
	//	КонецЕсли; 
	//
	//КонецЦикла; 
	//
	//ЗаявкаНаДоговорФормаВыбора.Открыть();
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
		СтруктураПараметрыВыбора.Вставить("ДатаНачала",		НачалоМесяца(Объект.ДатаВходящегоДокумента));
		СтруктураПараметрыВыбора.Вставить("ДатаОкончания",	КонецМесяца(Объект.ДатаВходящегоДокумента));
	ИначеЕсли ЗначениеЗаполнено(Объект.Дата) Тогда
		СтруктураПараметрыВыбора.Вставить("ДатаНачала",		НачалоМесяца(Объект.Дата));
		СтруктураПараметрыВыбора.Вставить("ДатаОкончания",	КонецМесяца(Объект.Дата));
	Иначе
		СтруктураПараметрыВыбора.Вставить("ДатаНачала",		НачалоМесяца(ТекущаяДата()));
		СтруктураПараметрыВыбора.Вставить("ДатаОкончания",	КонецМесяца(ТекущаяДата()));
	КонецЕсли;
	
	ЗаявкаНаДоговорФормаВыбора = ПолучитьФорму("Документ.рс_ЗаявкаНаДоговор.Форма.ФормаВыбораУправляемая_Дерево", СтруктураПараметрыВыбора, Этаформа);
	ЗаявкаНаДоговорФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии", ЭтаФорма); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Организация",
		Объект.Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Контрагент",
		Объект.Контрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"ДоговорКонтрагента",
		Объект.ДоговорКонтрагента,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-05 (#4111)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Проведен",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-05 (#4111) 
	
	ЗаявкаНаДоговорФормаВыбора.Открыть();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-02 (#4046)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-02 (#4046)
	//СтруктураЗначенийРеквизитов = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РезультатЗакрытия, "ID");
	//Объект.ОК_ID_Разноска = СтруктураЗначенийРеквизитов.ID;
	
	ВыбраннаяЗаявкаНаДоговор = Неопределено;
	Если ТипЗнч(РезультатЗакрытия) = Тип("КлючСтрокиДинамическогоСписка") Тогда
		
		Для каждого КлючЗначение Из РезультатЗакрытия Цикл
			
			Если КлючЗначение.Ключ = "Ссылка"
				И ТипЗнч(КлючЗначение.Значение) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
			
				ВыбраннаяЗаявкаНаДоговор = КлючЗначение.Значение;
			
			КонецЕсли;
		
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Если РезультатЗакрытия.ИмяГруппировки = "Ссылка"
			И ТипЗнч(РезультатЗакрытия.Ключ) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
		
			ВыбраннаяЗаявкаНаДоговор = РезультатЗакрытия.Ключ;
			
		ИначеЕсли РезультатЗакрытия.РодительскаяГруппировка <> Неопределено Тогда 
			
			ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии(РезультатЗакрытия.РодительскаяГруппировка, ДополнительныеПараметры);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
		
		ВыбраннаяЗаявкаНаДоговор = РезультатЗакрытия;
		
	КонецЕсли;  
	
	Если ВыбраннаяЗаявкаНаДоговор <> Неопределено Тогда
	
		СтруктураЗначенийРеквизитов = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВыбраннаяЗаявкаНаДоговор, "ID");
		Объект.ОК_ID_Разноска = СтруктураЗначенийРеквизитов.ID;
	
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-02 (#4046)
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьID_Разноска() Экспорт
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Элементы.Найти("ОК_ID_Разноска") = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4145)
	Элементы.ОК_ID_Разноска.ТолькоПросмотр = Истина;
	Возврат;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4145)
	
	МассивДокументовРасчета = Новый Массив();
	МассивДокументовРасчета.Добавить(Объект.Ссылка);
	
	СтатусыЗаявокДляИсключений = Новый Массив();
	СтатусыЗаявокДляИсключений.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Оплачена"));
	
	Элементы.ОК_ID_Разноска.ТолькоПросмотр = РегистрыБухгалтерии.Хозрасчетный.ПроверитьНаличиеСозданногоДокументаЗнРДСВСтатусе(МассивДокументовРасчета,,СтатусыЗаявокДляИсключений);	
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-14 (#3758)

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Оборудование" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Оборудование Цикл
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214) 
			//ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(СтрокаТаблицы, ПараметрыОбъекта);
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(ЭтаФорма, СтрокаТаблицы, ПараметрыОбъекта);
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ОбъектыСтроительства" Тогда
		Для Каждого СтрокаТаблицы Из Объект.ОбъектыСтроительства Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОбъектыСтроительства(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214) 
			//ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, ПараметрыОбъекта);
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтаФорма, СтрокаТаблицы, ПараметрыОбъекта);
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
		КонецЦикла;
		
		ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(Объект.Товары, ИспользоватьКонтрольныеЗнакиГИСМ, ВестиУчетТабачнойПродукцииМОТП)
		
	КонецЕслИ;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
		
		БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
			Объект.Услуги, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
		
		БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
			Объект.Услуги, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "АгентскиеУслуги" Тогда
		Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);

	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//izhtc alena 17.08.2015)
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ОригиналПолучен = ЕстьОригиналДокумента(Объект.Организация, Объект.Ссылка);
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		и ЗначениеЗаполнено(Объект.Контрагент)
		и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтаФорма);
	ИначеЕсли ВестиУчетПоДоговорам И ПоступлениеТоваровУслугФормы.ДоступноСозданиеОсновногоДоговораПоВидуОперации(Объект.ВидОперации) Тогда
		ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормы.УстановитьПараметрыПоДоговору(ЭтаФорма);
	
	ПоступлениеТоваровУслугФормы.УстановитьПараметрыВыбора(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		УстановитьПараметрыВыбораДляСчетовУчета();
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормы.ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтаФорма);
	
	Если НТТ И РассчитыватьСуммаВРознице И Объект.Товары.Количество() > 0 Тогда
		
		ТоварыСвернуты	= Истина;
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				ТоварыСвернуты	= Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ТоварыСвернуты	= Ложь;
	КонецЕсли;
	
	СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	
	ЕстьВозвратнаяТара = Объект.ВозвратнаяТара.Количество() > 0;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ПоставщикРезидентТаможенногоСоюза = УчетНДС.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);
	
	ЗаполнитьСписокВыбораВидовТранспорта(ЭтаФорма.Элементы.КодВидаТранспорта.СписокВыбора);
		
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
		
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
	ОбновитьИтоги(ЭтаФорма);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтаФорма);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	УстановитьВидимость();
	
	ПоступлениеТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
	// Проверка буфера обмена на наличие скопированных строк	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДоговоров() Экспорт

	СписокВидовДоговоров = Новый Массив;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
		Если ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров Тогда
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		КонецЕсли;
		
		Если ОсуществляетсяРеализацияТоваровУслугКомитентов Тогда
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		КонецЕсли;
		
	Иначе
		
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
		Если ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров Тогда
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		КонецЕсли;
		
	КонецЕсли;

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтаФорма);
	
	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

	ПлательщикНалогаНаПрибыль   = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	УпрощенныйУчетНДС           = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	ПрименениеУСН               = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы         = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	
	УчетВПродажныхЦенах = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
		
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");	 
	РаздельныйУчетНДСНаСчете19       = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ЕстьВалютныйУчет                 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ВестиУчетПоДоговорам             = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ОбратноеНачислениеНДС            = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();
	
	ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров = ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров");
	ОсуществляетсяЗакупкаТоваровУслугДляКомитентов      = ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
	ОсуществляетсяРеализацияТоваровУслугКомитентов      = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	ИспользуетсяПланированиеПлатежей                    = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейПоставщикам");
	ИспользоватьКонтрольныеЗнакиГИСМ                    = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеЗнакиГИСМ");
	ВестиУчетТабачнойПродукцииМОТП                      = ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП");
	ВестиУчетОбувнойПродукцииИСМП                       = ПолучитьФункциональнуюОпцию("ВестиУчетОбувнойПродукцииИСМП");
	СпособЗаполненияСтавкиНДС                           = РаботаСДоговорамиКонтрагентовБП.СпособЗаполненияСтавкиНДСПоДоговору(
		Объект.ДоговорКонтрагента);

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Объект.Дата);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетовУчета() Экспорт
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга Тогда
		
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		Если ЭтоКомиссия Тогда
			НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Истина));
		КонецЕсли;
		
		НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		Элементы.ТоварыСчетУчета.ПараметрыВыбора = НовыеПараметрыВыбора;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОборудование Тогда
		
		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ОборудованиеОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если Форма.ПрименяютсяСтавки4и2
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("ОборудованиеПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеОборудование();
		КонецЕсли;

	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектыСтроительства Тогда

		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ОбъектыСтроительстваОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если Форма.ПрименяютсяСтавки4и2
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("ОбъектыСтроительстваПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеОбъектыСтроительства();
		КонецЕсли;

	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТовары Тогда

		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если Форма.ПрименяютсяСтавки4и2
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеТовары();
		КонецЕсли;

	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУслуги Тогда

		НадоИнициализировать = Ложь;
		Если НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если Форма.ПлательщикНалогаНаПрибыль
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиНУПроинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		Если Форма.ПрименяютсяСтавки4и2
			И НЕ Форма.НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
			НадоИнициализировать = Истина;
		КонецЕсли;
		
		Если НадоИнициализировать Тогда
			Форма.УстановитьУсловноеОформлениеУслуги();
		КонецЕсли;

	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаАгентскиеУслуги
		И НЕ Форма.НастройкиУсловногоОформления.Свойство("АгентскиеУслугиПроинициализировано") Тогда

		Форма.УстановитьУсловноеОформлениеАгентскиеУслуги();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформлениеНаСервере() Экспорт

	Если ТипЗнч(НастройкиУсловногоОформления) = Тип("Структура") Тогда
		// При смене вида операции процедура вызывается из общего модуля 
		// ПоступлениеТоваровУслугФормы раньше, чем отработает 
		// УстановитьУсловноеОформление(). Поэтому вызываем обновление только
		// тогда, когда структура НастройкиУсловногоОформления уже была инициализирована.
		ОбновитьУсловноеОформление(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	// Для ввезенных прослеживаемых товаров необходимо указывать номер и дату входящего документа.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерВходящегоДокумента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТребуетсяНапоминание", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НомерВходящегоДокумента", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДатаВходящегоДокумента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТребуетсяНапоминание", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДатаВходящегоДокумента", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	// Склад

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Склад");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Склад", ВидСравненияКомпоновкиДанных.Заполнено);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ОтметкаНезаполненногоСклад", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыНоменклатура, ТоварыНоменклатураАртикул, ТоварыНоменклатураКод, ТоварыКоличество, ТоварыЦена

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатураАртикул");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатураКод");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличествоМест");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЕдиницаИзмерения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоэффициент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТД");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НТТ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТоварыСвернуты", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСчетУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"УчетАгентскогоНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыЦенаВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"ТоварыСвернуты", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"НТТ", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"НТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДСВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДСВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РазделениеПоСтавкамВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"НТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСуммаВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРознице");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"НТТ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДС, ТоварыСуммаНДС, ТоварыВсего, ТоварыНомерГТД, ТоварыСтранаПроисхождения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТД");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыОтражениеВУСН

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыОтражениеВУСН");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"НТТ", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименениеУСН", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименениеУСНДоходы", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// УслугиОтражениеВУСН

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиОтражениеВУСН");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименениеУСН", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименениеУСНДоходы", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// УслугиСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"УчетАгентскогоНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СчетУчетаРасчетовПоТаре

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаРасчетовПоТаре");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьВозвратнаяТара", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыКонтрагент, ТоварыДоговорКонтрагента, ТоварыСчетРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКонтрагентГруппа");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЭтоНекорректныйКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасчетов");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоКомиссия", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Субконто БУ и НУ
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	Для Сч = 1 По 3 Цикл
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// ПрочееСубконтоНУ
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ" + Сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.СубконтоНУ" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЦикла;
	
	// Субконто БУ
	// Первое субконто не скрываем, чтобы не мигала колонка в разных строках.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.Субконто3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Субконто НУ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ1Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.СубконтоНУ3Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Скрыть НДС при применении УСН доходы

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеВсего");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыСтроительстваСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыСтроительстваСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыСтроительстваВсего");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСНеВыделять", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОборудование() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("ОборудованиеОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеОборудованиеОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ОборудованиеПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеОборудованиеПрименяютсяСтавки4и2();
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-10 (#3048)
	ОК_ОбщегоНазначения.УстановитьУсловноеОформлениеДопАналитик(ЭтотОбъект,"Оборудование");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-10 (#3048)	

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОборудованиеОбщее()

	НастройкиУсловногоОформления.Вставить("ОборудованиеОбщееПроинициализировано", Истина);


	// ОборудованиеСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Оборудование.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Оборудование

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Оборудование");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьСтрокиВТабличныхЧастях", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ОборудованиеСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Оборудование.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Оборудование.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ОборудованиеСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Оборудование.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Оборудование.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Оборудование таможенная декларация или РНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеПодсказкаРНПТ");
	
	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"ПоставщикРезидентТаможенногоСоюза", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Оборудование.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Оборудование.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"Объект.Оборудование.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"ПоставщикРезидентТаможенногоСоюза", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	// Оборудование страна происхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Оборудование.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоставщикРезидентТаможенногоСоюза", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Оборудование.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОборудованиеПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУсловногоОформления.Вставить("ОборудованиеПрименяютсяСтавки4и2Проинициализировано", Истина);

	// ОборудованиеСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Оборудование.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Оборудование.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4%'"));


	// ОборудованиеСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОборудованиеСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Оборудование.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Оборудование.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2%'"));


КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбъектыСтроительства() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("ОбъектыСтроительстваОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеОбъектыСтроительстваОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ОбъектыСтроительстваПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеОбъектыСтроительстваПрименяютсяСтавки4и2();
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-10 (#3048)
	ОК_ОбщегоНазначения.УстановитьУсловноеОформлениеДопАналитик(ЭтотОбъект,"ОбъектыСтроительства");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-10 (#3048)	

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбъектыСтроительстваОбщее()

	НастройкиУсловногоОформления.Вставить("ОбъектыСтроительстваОбщееПроинициализировано", Истина);


	// ОбъектыСтроительстваСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыСтроительстваСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОбъектыСтроительства.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ОбъектыСтроительства

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыСтроительства");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьСтрокиВТабличныхЧастях", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ОбъектыСтроительстваСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыСтроительстваСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОбъектыСтроительства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОбъектыСтроительства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ОбъектыСтроительстваСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыСтроительстваСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОбъектыСтроительства.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ОбъектыСтроительства.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбъектыСтроительстваПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУсловногоОформления.Вставить("ОбъектыСтроительстваПрименяютсяСтавки4и2Проинициализировано", Истина);

	// ОбъектыСтроительстваСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыСтроительстваСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ОбъектыСтроительства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ОбъектыСтроительства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2%'"));


	// ОбъектыСтроительстваСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыСтроительстваСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ОбъектыСтроительства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.ОбъектыСтроительства.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4%'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("ТоварыОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеТоварыОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ТоварыПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеТоварыПрименяютсяСтавки4и2();
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-10 (#3048)
	ОК_ОбщегоНазначения.УстановитьУсловноеОформлениеДопАналитик(ЭтотОбъект,"Товары");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-10 (#3048)	

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыОбщее()

	НастройкиУсловногоОформления.Вставить("ТоварыОбщееПроинициализировано", Истина);


	// ТоварыСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"УчетАгентскогоНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыНоменклатура, ТоварыКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НТТ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РассчитыватьСуммаВРознице", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыДоговорКонтрагента, ТоварыСчетРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДоговорКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Контрагент", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Товары

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Товары");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьСтрокиВТабличныхЧастях", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ТоварыКиЗ_ГИСМ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПродукцияМаркируемаяДляГИСМ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// КиЗ_ГИСМ только для товаров
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");
	ЗапрещенныеОперации = Новый СписокЗначений;
	ЗапрещенныеОперации.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
	ЗапрещенныеОперации.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеВСписке, ЗапрещенныеОперации);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	// Признак прослеживаемости
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПрослеживаемыйТовар");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Таможенная декларация или РНПТ
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПодсказкаРНПТ");
	
	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"ВедетсяУчетПрослеживаемыхТоваров", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"ПоставщикРезидентТаможенногоСоюза", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыРНПТ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НомерГТД", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		"ПоставщикРезидентТаможенногоСоюза", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не требуется>'"));
	
	// Страна происхождения
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПрослеживаемыйТовар", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоставщикРезидентТаможенногоСоюза", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТоварыПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУсловногоОформления.Вставить("ТоварыПрименяютсяСтавки4и2Проинициализировано", Истина);


	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4%'"));


	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2%'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслуги() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиНУПроинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиНУ();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("УслугиПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2();
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-10 (#3048)
	ОК_ОбщегоНазначения.УстановитьУсловноеОформлениеДопАналитик(ЭтотОбъект,"Услуги");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-10 (#3048)	

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиОбщее()

	НастройкиУсловногоОформления.Вставить("УслугиОбщееПроинициализировано", Истина);


	// Субконто
	Для Сч = 1 По 3 Цикл

		// Незаполненное субконто

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконто" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.Субконто" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.Субконто" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;


	// УслугиПодразделениеЗатрат

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиПодразделениеЗатрат");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.ПодразделениеЗатратДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"УчетАгентскогоНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// Услуги

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Услуги");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьСтрокиВТабличныхЧастях", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиНУ()

	Если НЕ ПлательщикНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;	

	НастройкиУсловногоОформления.Вставить("УслугиНУПроинициализировано", Истина);

	// СубконтоНУ
	Для Сч = 1 По 3 Цикл

		// Незаполненное субконто

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСубконтоНУ" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.СубконтоНУ" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Услуги.СубконтоНУ" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУслугиПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУсловногоОформления.Вставить("УслугиПрименяютсяСтавки4и2Проинициализировано", Истина);

	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4%'"));


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2%'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАгентскиеУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("АгентскиеУслугиПроинициализировано", Истина);


	// АгентскиеУслуги

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслуги");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьСтрокиВТабличныхЧастях", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// АгентскиеУслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-10 (#3048)
	ОК_ОбщегоНазначения.УстановитьУсловноеОформлениеДопАналитик(ЭтотОбъект,"АгентскиеУслуги");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-10 (#3048)	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	// Заголовок поля с РНПТ
	ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация или РНПТ'");
	Если НЕ Форма.ВедетсяУчетПрослеживаемыхТоваров 
		ИЛИ Форма.ПоставщикРезидентТаможенногоСоюза Тогда
		ТекстЗаголовкаРНПТ = НСтр("ru = 'Таможенная декларация'");
	КонецЕсли;
	Элементы.ТоварыГруппаРНПТ.Заголовок       = ТекстЗаголовкаРНПТ;
	Элементы.ОборудованиеГруппаРНПТ.Заголовок = ТекстЗаголовкаРНПТ;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	
	ВидимостьУслуги =
		(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства"))
		И НЕ Форма.ЭтоКомиссия
		И Форма.ВидАгентскогоДоговора <> ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров");
	
	ВидимостьАгентскиеУслуги = НЕ Форма.ЭтоКомиссия
		И Форма.ВидАгентскогоДоговора <> ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров")
		И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
			
	Элементы.ГруппаУслуги.Видимость                    = ВидимостьУслуги;
	Элементы.ГруппаАгентскиеУслуги.Видимость           = ВидимостьАгентскиеУслуги;
	Элементы.УслугиПеренестиВАгентскиеУслуги.Видимость = ВидимостьАгентскиеУслуги;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-25 (#4214)
	Если Объект.ЭтоУниверсальныйДокумент Тогда
		НеОтображатьРеквизитыСчетаФактуры = Истина;
	Иначе
		НеОтображатьРеквизитыСчетаФактуры = Объект.НДСНеВыделять;
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-25 (#4214) 
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		Объект.НДСНеВыделять,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
	
	УчетНДСКлиентСервер.НастроитьПолеПродавецПоСчетуФактуре(
		Элементы.Продавец,
		Форма.ЭтоКомиссияНаЗакупку);
	
	Элементы.ИтогиВсегоНДС.Видимость = Не Объект.НДСНеВыделять;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.ДоговорКонтрагента.Доступность = 
		ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);

	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
	
	Элементы.ГруппаВидаТранспорта.Видимость = Форма.ПоставщикРезидентТаможенногоСоюза;
	
	ТекущийКод = Элементы.КодВидаТранспорта.СписокВыбора.НайтиПоЗначению(Объект.КодВидаТранспорта);
	Если ТекущийКод <> Неопределено Тогда 
		Форма.НадписьВидТранспорта = Сред(ТекущийКод.Представление, 5);
	Иначе
		Форма.НадписьВидТранспорта = "";
	КонецЕсли;
	
	ЗаполнитьСписокВыбораСтавокНДС(Форма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(Форма)

	Элементы = Форма.Элементы;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ТоварыСтавкаНДС.СписокВыбора);
	МассивЭлементов.Добавить(Элементы.УслугиСтавкаНДС.СписокВыбора);
	МассивЭлементов.Добавить(Элементы.ОборудованиеСтавкаНДС.СписокВыбора);
	МассивЭлементов.Добавить(Элементы.ОбъектыСтроительстваСтавкаНДС.СписокВыбора);
	
	Для Каждого СписокВыбора Из МассивЭлементов Цикл
		
		Если Форма.ПрименяютсяСтавки4и2 Тогда
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
			
		Иначе
			
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ПоказыватьКонтрагентаСчетаФактуры = (НЕ ЗначениеЗаполнено(ЭтаФорма.СчетФактура)) И ЭтоКомиссияНаЗакупку;
	Если Элементы.Продавец.Видимость <> ПоказыватьКонтрагентаСчетаФактуры Тогда
		Элементы.Продавец.Видимость = ПоказыватьКонтрагентаСчетаФактуры;
	КонецЕсли;
	
	//СБ Ванюков К.+ // Вывести подразделение указанное в договоре, на форму
	Если Элементы.Найти("НадписьПодразделениеДоговора")<>Неопределено Тогда 
		Если не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) тогда
			Элементы.НадписьПодразделениеДоговора.Заголовок = "";
		ИначеЕсли Найти(Строка(Объект.ДоговорКонтрагента.Подразделение),"Объект не найден") > 0 тогда
			Элементы.НадписьПодразделениеДоговора.Заголовок = "";
		Иначе 
			Элементы.НадписьПодразделениеДоговора.Заголовок = Объект.ДоговорКонтрагента.Подразделение
		КонецЕсли;
	КонецЕсли;
	//СБ Ванюков К.+ // Установить видимость элементов связанных с ID_Разноска
	Если Элементы.Найти("ОК_ID_Разноска")<>Неопределено Тогда 
		Элементы.ОК_ID_Разноска.Видимость 							= Не Объект.ОК_ID_ВТЧ;
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
		//Элементы.ОК_РазнесениеОборотов.Видимость 					= Не Объект.ОК_ID_ВТЧ;
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)
		
		Элементы.УслугиОК_ID_Разноска.Видимость 			= Объект.ОК_ID_ВТЧ;
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
		//Элементы.УслугиОК_РазнесениеОборотов.Видимость 	= Объект.ОК_ID_ВТЧ;
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)
	КонецЕсли;
	//СБ Ванюков К.-	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЭлементыФормыПоВидуОперации()

	// При создании формы сразу устанавливаем свойства элементов,
	// которые зависят от вида операции и которые в дальнейшем менять не требуется.

	Элементы.ГруппаТовары.Видимость =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
	
	Элементы.ГруппаВозвратнаяТара.Видимость =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
	
	Элементы.ГруппаОборудование.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование");
	
	Элементы.ГруппаОбъектыСтроительства.Видимость =
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
	
	Элементы.ГруппаИтогиВсегоНДС.Доступность =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
	
	Элементы.Склад.Доступность =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
		
	Элементы.ФормаВыгрузитьВГИСМ.Видимость = 
		(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"))
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетИмпортныхТоваров");
	
КонецПроцедуры

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214) 
//&НаСервереБезКонтекста
&НаСервере
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
Процедура ОборудованиеНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
	Если ДанныеОбъекта.Свойство("ок_Ссылка") 
		И ЗначениеЗаполнено(ДанныеОбъекта.ок_Ссылка)
		И ЗначениеЗаполнено(ок_ОбменСКонтрагентамиВнутренний.АктуальныйЭлектронныйДокументВладельца(ДанныеОбъекта.ок_Ссылка)) Тогда
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения				= СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент					= СведенияОНоменклатуре.Коэффициент;
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-04 (#4383)
		Если ВедетсяУчетПрослеживаемыхТоваров Тогда
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СведенияОНоменклатуре.ПрослеживаемыйТовар;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-04 (#4383)
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214) 
		//ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(СтрокаТабличнойЧасти, ДанныеОбъекта);
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(ЭтаФорма, СтрокаТабличнойЧасти, ДанныеОбъекта);
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
		Возврат;
		
	КонецЕсли;	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Оборудование",
		СтрокаТабличнойЧасти);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
		СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС				= ?(ДанныеОбъекта.НДСНеВыделять, Перечисления.СтавкиНДС.БезНДС, СведенияОНоменклатуре.СтавкаНДС);
		СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
		Если ВедетсяУчетПрослеживаемыхТоваров Тогда
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СведенияОНоменклатуре.ПрослеживаемыйТовар;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214) 
	//ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(ЭтаФорма, СтрокаТабличнойЧасти, ДанныеОбъекта);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	ПоступлениеТоваровУслугФормы.ТоварыНоменклатураПриИзменении(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению);
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)  
	//ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(ЭтаФорма, СтрокаТабличнойЧасти, ДанныеОбъекта);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	ПоступлениеТоваровУслугФормы.УслугиНоменклатураПриИзменении(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	Если СтрокаТабличнойЧасти.Свойство("СчетЗатрат") Тогда
	
		ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетЗатрат, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
		
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("СчетЗатратНУ") Тогда
		
		ПоляОбъектаСубконтоНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВозвратнаяТараНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"ВозвратнаяТара",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчетаУчета);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЗаполненияСтрокиТабличнойЧастиПоКомитенту(Знач ИмяТабличнойЧасти, Знач КонтейнерСтрока, Знач КонтейнерОбъект, Знач СчетаУчетаКЗаполнению)
	
	Результат = Новый Структура;
	
	ДопустимыеВидыДоговоров = Новый Массив;
	ДопустимыеВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);

	ДоговорКонтрагента = КонтейнерСтрока.ДоговорКонтрагента;
	Если РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		ДоговорКонтрагента,
		КонтейнерСтрока.Контрагент,
		КонтейнерОбъект.Организация,
		ДопустимыеВидыДоговоров) Тогда
		
		Результат.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		
	КонецЕсли;
	
	ЗаполненныеСчетаУчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		КонтейнерОбъект,
		ИмяТабличнойЧасти,
		КонтейнерСтрока);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ЗаполненныеСчетаУчета, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура АгентскиеУслугиНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТаблицы.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТаблицы.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	СтрокаТаблицы.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		СведенияОНоменклатуре.Цена, СведенияОНоменклатуре.ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, ДанныеОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,Услуги,АгентскиеУслуги", ",");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары", ",");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Оборудование,Товары,Услуги", ",");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства") Тогда
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ОбъектыСтроительства,Услуги", ",");
	Иначе
		МассивТабличныхЧастейДляРасчетаИтогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Оборудование,ОбъектыСтроительства,Товары,Услуги,АгентскиеУслуги", ",");
	КонецЕсли;

	СуммаИтогов    = 0;
	СуммаНДСИтогов = 0;

	Для Каждого ТекущаяТабличнаяЧасть Из МассивТабличныхЧастейДляРасчетаИтогов Цикл
		СуммаИтогов    = СуммаИтогов    + Объект[ТекущаяТабличнаяЧасть].Итог("Всего");
		СуммаНДСИтогов = СуммаНДСИтогов + Объект[ТекущаяТабличнаяЧасть].Итог("СуммаНДС");
	КонецЦикла;

	Форма.ИтогиВсего    = СуммаИтогов;
	Форма.ИтогиВсегоНДС = СуммаНДСИтогов;

	ЕстьМатериальныеЦенности = Объект.Товары.Количество() > 0 ИЛИ Объект.ВозвратнаяТара.Количество() > 0 ИЛИ Объект.Оборудование.Количество() > 0;
	Форма.ОтметкаНезаполненногоСклад = ЕстьМатериальныеЦенности;
	
	Форма.ЕстьСтрокиВТабличныхЧастях = ЕстьМатериальныеЦенности ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.АгентскиеУслуги.Количество() > 0;

	//БИТ Тртилек 30082013 обновим суммы для связанных документов
	Форма.бит_ИтоговаяСумма = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Объект.бит_ДокументыСобственныхКонтрагентов.Итог("бит_Сумма"));
	Форма.бит_ИтоговаяСуммаБезНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Объект.бит_ДокументыСобственныхКонтрагентов.Итог("бит_СуммаБезНДС"));
	///БИТ Тртилек
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ОрганизацияПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	ТребуетсяПерерасчитатьСрокОплаты = ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты
										И (НачалоДня(Объект.Дата) <> НачалоДня(ТекущаяДатаДокумента));
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера ИЛИ ТребуетсяПерерасчитатьСрокОплаты Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДатаПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтаФорма);
	УстановитьВидимость();

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДоговорКонтрагентаПриИзменении(ЭтаФорма);
	//Ванюков К. + // для пользователей ОКЕЯ реквизит «Зачет авансов» автоматически принимет значение «Не зачитывать» // 2012-03-26
	ОК_ОбщегоНазначения.УстановитьСпособЗачетаАвансов(Объект.СпособЗачетаАвансов);
	//Ванюков К. -	
    УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура СвернутьТоварыНаСервере()

	ПоступлениеТоваровУслугФормы.СвернутьТовары(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.СкладПриИзменении(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтаФорма);
	
	ПоступлениеТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС,
		ПрименяютсяСтавки4и2);
		
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

КонецПроцедуры

&НаСервереБезКонтекста
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
//Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(СтрокаТаблицы, Знач ПараметрыОбъекта)
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОборудование(Форма, СтрокаТаблицы, Знач ПараметрыОбъекта)
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(Форма, СтрокаТаблицы);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыОбъектыСтроительства(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214) 
//Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Знач ПараметрыОбъекта)
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(Форма, СтрокаТаблицы, Знач ПараметрыОбъекта)
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	Если СтрокаТаблицы.Свойство("СчетУчета") Тогда
		СтрокаТаблицы.СчетУчетаЗабалансовый = 
			ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета).Забалансовый;
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)
	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(Форма, СтрокаТаблицы);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(Товары, ИспользоватьКонтрольныеЗнакиГИСМ, ВестиУчетТабачнойПродукцииМОТП)
	
	Если (Не ИспользоватьКонтрольныеЗнакиГИСМ)
		И (Не ВестиУчетТабачнойПродукцииМОТП) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеМаркируемаяПродукция = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина), "ПродукцияМаркируемаяДляГИСМ, ТабачнаяПродукция");
	Для Каждого СтрокаТаблицы Из Товары Цикл
		СтрокаНоменклатуры = СоответствиеМаркируемаяПродукция.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаНоменклатуры = Неопределено Тогда
			ПараметрыМаркируемойПродукции = Новый Структура("ПродукцияМаркируемаяДляГИСМ , МаркируемаяПродукцияГосИС" , Ложь, Ложь);
		Иначе
			ПараметрыМаркируемойПродукции = Новый Структура("ПродукцияМаркируемаяДляГИСМ , МаркируемаяПродукцияГосИС" , 
				СтрокаНоменклатуры.ПродукцияМаркируемаяДляГИСМ, СтрокаНоменклатуры.ТабачнаяПродукция);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыМаркируемойПродукции);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
	УчетПоПодразделениям = Неопределено;
	Если СтрокаТаблицы.Свойство("СчетЗатрат") Тогда
		
		СвойстваСчетаБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		
		УчетПоПодразделениям = СвойстваСчетаБУ.УчетПоПодразделениям;
		
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("СчетЗатратНУ") Тогда
		
		СвойстваСчетаНУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
		
		Если УчетПоПодразделениям = Неопределено Тогда
			УчетПоПодразделениям = Ложь;
		КонецЕсли;
		УчетПоПодразделениям = УчетПоПодразделениям Или СвойстваСчетаНУ.УчетПоПодразделениям;
		
	КонецЕсли;
	
	Если УчетПоПодразделениям <> Неопределено Тогда
		СтрокаТаблицы.ПодразделениеЗатратДоступность = УчетПоПодразделениям;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСчету(Команда)
	
	ЗаполнитьТабличнуюЧастьПоСчету("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСчетуТара(Команда)
	
	ЗаполнитьТабличнуюЧастьПоСчету("ВозвратнаяТара");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСчетуУслуги(Команда)
	
	ЗаполнитьТабличнуюЧастьПоСчету("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоСчету(ТабличнаяЧасть)

	Если Объект[ТабличнаяЧасть].Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ТабличнаяЧасть);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораСчетаНаОплату(ТабличнаяЧасть);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСчетаНаОплату(ТабличнаяЧасть)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы",         ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаВыбора", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ТабличнаяЧасть) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект[ТабличнаяЧасть].Очистить();
		ОткрытьФормуВыбораСчетаНаОплату(ТабличнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПоСчетуНаОплату()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.СчетНаОплатуПоставщика);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СчетНаОплатуПоставщикаТовары.Номенклатура.Услуга, ИСТИНА)
	|			ТОГДА ""Услуги""
	|		ИНАЧЕ ""Товары""
	|	КОНЕЦ КАК ИмяТЧ,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура.НомерГТД КАК НомерГТД,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СчетНаОплатуПоставщикаТовары.Цена,
	|	СчетНаОплатуПоставщикаТовары.Сумма,
	|	СчетНаОплатуПоставщикаТовары.СтавкаНДС,
	|	СчетНаОплатуПоставщикаТовары.СуммаНДС,
	|	СчетНаОплатуПоставщикаТовары.Количество,
	|	СчетНаОплатуПоставщикаТовары.НомерСтроки КАК НомерСтроки,
	|	NULL КАК Содержание
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВозвратнаяТара"",
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура.НомерГТД,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура.СтранаПроисхождения,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Цена,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Сумма,
	|	0,
	|	0,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Количество,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.НомерСтроки,
	|	NULL
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуПоставщикаВозвратнаяТара
	|ГДЕ
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяТЧ,
	|	НомерСтроки";

	Результат = Запрос.Выполнить().Выбрать();

	Объект.Товары.Очистить();
	Объект.ВозвратнаяТара.Очистить();
	Объект.Услуги.Очистить();

	ЗаполненныеТабличныеЧасти = Новый Структура;
	
	Пока Результат.Следующий() Цикл
		ЗаполненныеТабличныеЧасти.Вставить(Результат.ИмяТЧ);
		НоваяСтрока = Объект[Результат.ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		Если Результат.ИмяТЧ = "Товары" Тогда
			НоваяСтрока.ЕдиницаИзмерения 	= Результат.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент	 	 	= 1;
			НоваяСтрока.НомерГТД            = Результат.НомерГТД;
			НоваяСтрока.СтранаПроисхождения = Результат.СтранаПроисхождения;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ЗаполненныеТабличныеЧасти Цикл
		СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект[КлючИЗначение.Ключ], КлючИЗначение.Ключ,  Объект, Документы.ПоступлениеТоваровУслуг);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоСчету(ТабличнаяЧасть, ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	ПоступлениеТоваровУслугФормы.ОбработкаВыбораПорядокУчетаРасчетов(ЭтаФорма, ВыбранноеЗначение);

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ПоступлениеТоваровУслугФормы.ОбработкаОповещенияОбработкиТабличнойЧастиТовары(ЭтаФорма, Параметры);
	
	ЗаполнитьДобавленныеКолонкиТаблиц("Товары");
	
	ОбновитьИтоги(ЭтаФорма);

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ВопросСвернутьТабличнуюЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТоварыСвернуты = Истина;
		СвернутьТоварыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоСчетуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТЧПоСчетуНаОплату();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидовТранспорта(СписокВыбора)
	
	Документы.ЗаявлениеОВвозеТоваров.ЗаполнитьСписокВыбораВидовТранспорта(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомитентТабличнойЧастиПриИзменении(ИмяТабличнойЧасти)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	// Узнаем на сервере договор и счета учета
	
	// Контейнер служит для передачи на сервер.
	// Сначала передадим данные для вычисления договора
	КонтейнерСтрока = Новый Структура("Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(КонтейнерСтрока, СтрокаТабличнойЧасти);
	
	КонтейнерОбъект = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(КонтейнерОбъект, Объект);
	
	// ... теперь для счетов учета
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить(ИмяТабличнойЧасти + ".Контрагент");
	ПричиныИзменения.Добавить(ИмяТабличнойЧасти + ".ДоговорКонтрагента"); // Может быть изменен в ходе серверного вызова
	ПараметрыЗаполненияСчетовУчета = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		ПричиныИзменения,
		Объект,
		СтрокаТабличнойЧасти,
		КонтейнерОбъект,
		КонтейнерСтрока);
		
	// Получим данные с сервера
	ДанныеЗаполнения = ДанныеЗаполненияСтрокиТабличнойЧастиПоКомитенту(
		ИмяТабличнойЧасти,
		КонтейнерСтрока,
		КонтейнерОбъект,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеЗаполнения);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы[ИмяТабличнойЧасти]);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
&НаКлиенте
Процедура СтатьяЗатратНачалоВыбораНаКлиенте(Элемент, СтандартнаяОбработка, ИмяТЧ, ИмяПоля)
	
	Если Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат")
		ИЛИ Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		
		ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено
			И ЗначениеЗаполнено(ТекущиеДанные.ок_СтатьяОборотов) Тогда
		
			МассивСсылок = ПолучитьСписокСтатейРеглСоответствующихСтатьеОборотов(ТекущиеДанные.ок_СтатьяОборотов);
			
			Если МассивСсылок.Количество() > 0 Тогда
			
				СтандартнаяОбработка = Ложь;
				
				СтруктураПараметровВыбора = Новый Структура;
				СтруктураПараметровВыбора.Вставить("РежимВыбора",        Истина);
				СтруктураПараметровВыбора.Вставить("МножественныйВыбор", Ложь);
				
				СтруктураДополнительныхПараметров = Новый Структура();
				СтруктураДополнительныхПараметров.Вставить("Поле", 			ИмяПоля);
				СтруктураДополнительныхПараметров.Вставить("ИмяТЧ", 		ИмяТЧ);
				СтруктураДополнительныхПараметров.Вставить("ТекущаяСтрока", Элементы[ИмяТЧ].ТекущаяСтрока);
				
				ОбработкаВыбораСтатьиРегл = Новый ОписаниеОповещения("ОбработкаЗавершенияВыбораСтатьиРегл",ЭтаФорма,СтруктураДополнительныхПараметров);
				
				Если Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат") Тогда
						
					ФормаВыбора = ОткрытьФорму("Справочник.СтатьиЗатрат.Форма.ФормаВыбора", СтруктураПараметровВыбора, ЭтаФорма,,,, ОбработкаВыбораСтатьиРегл, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
					ПользовательскийОтбор = ФормаВыбора.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
				    ПользовательскийОтбор.Элементы.Очистить();

				    //Установка элемента отбора
				    ОтборВладелец = ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				    ОтборВладелец.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				    ОтборВладелец.ИдентификаторПользовательскойНастройки = "ОтборПоСсылке";
				    ОтборВладелец.Использование = Истина;
				    ОтборВладелец.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
				    ОтборВладелец.ПравоеЗначение = МассивСсылок;
					
				Иначе
					
					ФормаВыбора = ОткрытьФорму("Справочник.ПрочиеДоходыИРасходы.Форма.ФормаВыбора", СтруктураПараметровВыбора, ЭтаФорма,,,, ОбработкаВыбораСтатьиРегл, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
					ПользовательскийОтбор = ФормаВыбора.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
				    ПользовательскийОтбор.Элементы.Очистить();

				    //Установка элемента отбора
				    ОтборВладелец = ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				    ОтборВладелец.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				    ОтборВладелец.ИдентификаторПользовательскойНастройки = "ОтборПоСсылке";
				    ОтборВладелец.Использование = Истина;
				    ОтборВладелец.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
				    ОтборВладелец.ПравоеЗначение = МассивСсылок;
					
				КонецЕсли;
				
				ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗавершенияВыбораСтатьиРегл(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли; 
	
	НайденнаяСтрока = Объект[ДополнительныеПараметры.ИмяТЧ].НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	Если НайденнаяСтрока <> Неопределено Тогда
	
		НайденнаяСтрока[ДополнительныеПараметры.Поле] = РезультатЗакрытия;
	
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)

// Рекомендации об использовании простых форм

&НаСервере
Функция ОпределитьРекомендуемыйВидОперации()

	Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоКомиссия Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 
		И Объект.Услуги.Количество() = 0 
		И Объект.АгентскиеУслуги.Количество() = 0 Тогда
	
		Если ОсуществляетсяЗакупкаТоваровУслугДляКомитентов Тогда
			Если Документы.ПоступлениеТоваровУслуг.ЕстьКомитентыНаЗакупку(Объект) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		
	ИначеЕсли Объект.Товары.Количество() = 0
		И Объект.Услуги.Количество() > 0 
		И Объект.АгентскиеУслуги.Количество() = 0 Тогда
		
		Возврат Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура ОбновитьСрокОплатыНаСервере()
	
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУслугиСубконто(НомерСубконто)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект,
		СтрокаТаблицы,
		НомерСубконто,
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат)
		И ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
		
		ДанныеСчетаБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		ДанныеСчетаНУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатратНУ);
		
		Для ИндексБУ = 1 По 3 Цикл
			Для ИндексНУ = 1 По 3 Цикл
				Если ДанныеСчетаБУ["ВидСубконто" + ИндексБУ + "ТипЗначения"] = ДанныеСчетаНУ["ВидСубконто" + ИндексНУ + "ТипЗначения"] Тогда
					СтрокаТаблицы["СубконтоНУ" + ИндексНУ] = СтрокаТаблицы["Субконто" + ИндексБУ];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
			ЭтотОбъект, 
			СтрокаТаблицы,
			ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораУслугиСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Услуги.ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУслугиСубконтоНУ(НомерСубконто)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСубконто(
		ЭтотОбъект, Элементы.Услуги.ТекущиеДанные, НомерСубконто, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораУслугиСубконтоНУ(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.Услуги.ТекущиеДанные, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"УслугиСубконто", "УслугиПодразделение", "Субконто", "ПодразделениеЗатрат", "СчетЗатрат");
		
	Результат.ПоляОбъекта.Вставить("ПодразделениеДоступность", "ПодразделениеЗатратДоступность");
	Результат.ПоляОбъекта.Вставить("УчетПоПодразделениям",     "ПодразделениеЗатратНУДоступность");
	
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоНУ(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"УслугиСубконтоНУ", "ПрочееПодразделениеЗатрат", "СубконтоНУ", "ПодразделениеЗатрат", "СчетЗатратНУ");
	
	Результат.ПоляОбъекта.Вставить("ПодразделениеДоступность", "ПодразделениеЗатратНУДоступность");
	Результат.ПоляОбъекта.Вставить("УчетПоПодразделениям",     "ПодразделениеЗатратДоступность");
	
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;

КонецФункции

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ОборудованиеСчетУчета");
	ЭлементыСчетов.Добавить("ОборудованиеСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ОборудованиеСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ОбъектыСтроительстваСчетУчета");
	ЭлементыСчетов.Добавить("ОбъектыСтроительстваСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ОбъектыСтроительстваСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетРасчетов");
	ЭлементыСчетов.Добавить("УслугиСчетЗатрат");
	ЭлементыСчетов.Добавить("УслугиПодразделениеЗатрат");
	ЭлементыСчетов.Добавить("УслугиСубконто1");
	ЭлементыСчетов.Добавить("УслугиСубконто2");
	ЭлементыСчетов.Добавить("УслугиСубконто3");
	ЭлементыСчетов.Добавить("УслугиСубконтоНУ1");
	ЭлементыСчетов.Добавить("УслугиСубконтоНУ2");
	ЭлементыСчетов.Добавить("УслугиСубконтоНУ3");
	ЭлементыСчетов.Добавить("УслугиСчетУчетаНДС");
	ЭлементыСчетов.Добавить("УслугиСпособУчетаНДС");
	ЭлементыСчетов.Добавить("УслугиСчетЗатратНУ");
	ЭлементыСчетов.Добавить("АгентскиеУслугиСчетРасчетов");
	ЭлементыСчетов.Добавить("ВозвратнаяТараСчетУчета");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоТаре");
	
	// Поле формы ПорядокУчетаРасчетов содержит счета и другие реквизиты.
	// Поэтому видимостью этого поля управляем в УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов()
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция ЕстьОригиналДокумента(Знач Организация, Знач Ссылка)
	
	Возврат (РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус =
		Перечисления.СтатусыДокументовПоступления.ОригиналПолучен);
	
КонецФункции

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Элементы.Товары.ТекущиеДанные.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Элементы.АгентскиеУслуги.ТекущиеДанные.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзЕГАИС

&НаКлиенте
Функция ЕстьНесопоставленныеТовары()
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции
 
&НаКлиенте
Процедура ЗаполнитьТоварыПоЕГАИСНаКлиенте()

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТоварыПоЕГАИСЗавершение", ЭтотОбъект);

	ПараметрыФормы = Новый Структура("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	ОткрытьФорму("Обработка.СопоставлениеДанныхЕГАИС.Форма.СопоставлениеНоменклатуры", ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоЕГАИСЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(РезультатВыполнения) Тогда
	
		ЗаполнитьТоварыПоЕГАИСНаСервере(РезультатВыполнения);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоЕГАИСНаСервере(АдресВременногоХранилища);
	РезультатЗаполнения = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ТаблицаТоваров      = РезультатЗаполнения.ТаблицаСопоставленияНоменклатуры;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	Для каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Объект.Товары[СтрокаТаблицыТоваров.НомерСтроки-1];
		СтрокаТабличнойЧасти.Номенклатура = СтрокаТаблицыТоваров.Номенклатура;
		Если СтрокаТаблицыТоваров.КоэффициентПересчетаУпаковки <> 1 Тогда
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество * СтрокаТаблицыТоваров.КоэффициентПересчетаУпаковки;
			СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);
		КонецЕсли;
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре[СтрокаТабличнойЧасти.Номенклатура];
		Если СведенияОНоменклатуре <> Неопределено И СведенияОНоменклатуре.СтавкаНДС <> СтрокаТабличнойЧасти.СтавкаНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
		КонецЕсли;
		
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
	
	КонецЦикла; 
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, "Товары", Объект, Документы.ПоступлениеТоваровУслуг);
	
	ЗаполнитьДобавленныеКолонкиТаблиц("Товары");
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

#КонецОбласти


// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ПоступлениеТоваровУслугФормы.ОбработкаВыбораПодборВставкаИзБуфера(ЭтаФорма, ВыбранноеЗначение, ИмяТаблицы);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы);
	
	ОбновитьИтоги(ЭтаФорма);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда
		
		ИмяТаблицы = "Услуги";
		
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаОборудование" Тогда
		
		ИмяТаблицы = "Оборудование";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	
	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("КоличествоМест");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НомерГТД");
		СписокСвойств.Добавить("СтранаПроисхождения");
		СписокСвойств.Добавить("ЦенаВРознице");
		СписокСвойств.Добавить("СтавкаНДСВРознице");
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчета");
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				
				СписокСвойств.Добавить("СчетУчетаНДС");
				СписокСвойств.Добавить("СчетРасчетов");
				
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
	
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				
			СписокСвойств.Добавить("СчетЗатрат");
			СписокСвойств.Добавить("ПодразделениеЗатрат");
			СписокСвойств.Добавить("Субконто1");
			СписокСвойств.Добавить("Субконто2");
			СписокСвойств.Добавить("Субконто3");
			СписокСвойств.Добавить("СчетЗатратНУ");
			СписокСвойств.Добавить("СубконтоНУ1");
			СписокСвойств.Добавить("СубконтоНУ2");
			СписокСвойств.Добавить("СубконтоНУ3");
			СписокСвойств.Добавить("СчетУчетаНДС");
		
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Оборудование" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НомерГТД");
		СписокСвойств.Добавить("СтранаПроисхождения");
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчета");
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				
				СписокСвойств.Добавить("СчетУчетаНДС");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность						 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	Элементы.ОборудованиеВставитьСтроки.Доступность					 = Доступность;
	Элементы.ОборудованиеКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДобавитьНоменклатуруНаСервере(Результат.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруНаСервере(Номенклатура)

	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура");
	ТаблицаТовары.Колонки.Добавить("Количество");
	ТаблицаТовары.Колонки.Добавить("Цена");
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, СуммаВключаетНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("ТипЦен", Объект.ТипЦен);
	Иначе
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Номенклатура, ДанныеОбъекта, Ложь, Истина);
	Иначе
		СведенияОНоменклатуре = Неопределено;
	КонецЕсли;
	
	СтрокаТаблицаТовары = ТаблицаТовары.Добавить();
	
	СтрокаТаблицаТовары.Номенклатура = Номенклатура;
	СтрокаТаблицаТовары.Количество = 1;
	СтрокаТаблицаТовары.Цена = ?(СведенияОНоменклатуре = Неопределено, 0, СведенияОНоменклатуре.Цена);
	
	Значение = Новый Структура("АдресПодобраннойНоменклатурыВХранилище, КоличествоДобавленныхСтрок", ПоместитьВоВременноеХранилище(ТаблицаТовары, УникальныйИдентификатор));
	
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(Значение, "Товары");

КонецПроцедуры 

&НаСервере
Функция ДобавитьПоШтрихкодуНаСервере(Штрихкод)
	ТаблицаНоменклатурыПоШтрихкоду = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Штрихкод);
	
	Если ТаблицаНоменклатурыПоШтрихкоду.Количество() = 1 Тогда
		ДобавитьНоменклатуруНаСервере(ТаблицаНоменклатурыПоШтрихкоду[0].Номенклатура);
	Иначе
		ДобавитьНоменклатуруНаСервере(Справочники.Номенклатура.ПустаяСсылка());
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда, ДополнительныеПараметры);
	
КонецПроцедуры


#Область бит_МодификацияФормы

// бит_Финанс изменения кода. Начало: 
// Расширение функционала обраотчика "ПриСозданииНаСервере".
//
&НаСервере
Процедура бит_ПриСозданииНаСервереЗавершение()

	Если НЕ ПравоДоступа("Просмотр", Метаданные.Документы.бит_РасходнаяПозиция) Тогда
		Возврат;	
	КонецЕсли; 
	
	ПолеРасходнаяПозиция			= Элементы.Вставить("бит_РасходнаяПозиция", Тип("ПолеФормы"), Элементы.ГруппаПодвал, Элементы.ГруппаКомментарийОтветственный); 
	ПолеРасходнаяПозиция.Вид		= ВидПоляФормы.ПолеВвода;
	ПолеРасходнаяПозиция.ПутьКДанным= "Объект.бит_РасходнаяПозиция";
	ПолеРасходнаяПозиция.Подсказка	= НСтр("ru = 'Ссылка на связанный документ ""Расходная позиция"", для формирования структуры подчиненности.'");

КонецПроцедуры // бит_Финанс изменения кода. Конец.

#КонецОбласти

//Ванюков К. + // При вводе ID разноски программа должна найти документ разнесения оборотов // 2012-01-25
//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
//&НаКлиенте
//Процедура ОК_ID_РазноскаПриИзменении(Элемент) Экспорт 
//	
//	ОК_РазнесениеОборотов = ОК_ОбщегоНазначения.НайтиРазнесениеОборотовПоID(Объект.ОК_ID_Разноска);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОК_ID_РазноскаПриТЧИзменении(Элемент) Экспорт 
//	
//	ТекущийЭлемент.ТекущаяСтрока.ОК_РазнесениеОборотов = ОК_ОбщегоНазначения.НайтиРазнесениеОборотовПоID(Элемент.Значение);
//	
//КонецПроцедуры
//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)

//Ванюков К. + // При покупке билетов через бюджетный контроль у одного документа может быть несколько ID. в таких случаях вводится ID в табличной части "Услуги" // 2012-01-25
&НаКлиенте
Процедура ОК_ID_ВТЧПриИзменении(Элемент) Экспорт 
	
	УстановитьВидимость();
	
	Если Объект.ОК_ID_ВТЧ Тогда 
		Для Каждого СтрокаТЧ из Объект.Услуги Цикл 
			СтрокаТЧ.ОК_ID_Разноска				= Объект.ОК_ID_Разноска;
			//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
			//СтрокаТЧ.ОК_РазнесениеОборотов		= Объект.ОК_РазнесениеОборотов;
			//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)
		КонецЦикла;
		ОК_ID_Разноска							= "";
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
	    //ОК_РазнесениеОборотов					= ПредопределенноеЗначение("Документ.;
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)
	Иначе 
		Для Каждого СтрокаТЧ из Объект.Услуги Цикл 
			СтрокаТЧ.ОК_ID_Разноска				= "";
			//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
			//СтрокаТЧ.ОК_РазнесениеОборотов		= Документы.бит_БК_РазнесениеОборотов.ПустаяСсылка();
			//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//БИТ Тртилек 22082013
&НаКлиенте
Процедура ПодборДокументовНажатие(Команда)
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("РеализацияТоваровУслуг", "Реализация товаров и услуг");
	СписокТипов.Добавить("ОперацияБух", "Операция (бухгалтерский и налоговый учет)");	
	СписокТипов.Добавить("ПередачаОС", "Передача ОС");	        //ОК Довбешка Т.  17.04.2015
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлементаПодборДокументов", ЭтаФорма);
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, "Выберите вид документа");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлементаПодборДокументов(ВыбранныйЭлемент, СписокПараметров) Экспорт
    Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
	КонецЕсли;
	АдресТаблицы = ПослеВыбораЭлементаПодборДокументовСервер(ВыбранныйЭлемент.Значение)	;
	Если АдресТаблицы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Парарара = ОткрытьФорму("ОбщаяФорма.бит_ФормаПодбораСобственныхКонтрагентов", Новый Структура("АдресТЗТаблицаДокументов", АдресТаблицы), ЭтаФорма);
	

КонецПроцедуры

&НаСервере
Функция ПослеВыбораЭлементаПодборДокументовСервер(ВыбранноеЗначение)
	НашЗапрос = СформироватьЗапросДляСобственныхКонтрагентов(ВыбранноеЗначение);
	
	Если НашЗапрос =ЛОЖЬ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документы сформированы не будут");
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗТаблицаДокументов = НашЗапрос.Выполнить().Выгрузить();
	Возврат ПоместитьВоВременноеХранилище(ТЗТаблицаДокументов);
КонецФункции

&НаСервере
Функция  СформироватьЗапросДляСобственныхКонтрагентов(ТипДокумента)
	
	Запрос = Новый Запрос;
	Если ТипДокумента = "РеализацияТоваровУслуг" Тогда 
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Организация = &Организация
		|	И РеализацияТоваровУслуг.Контрагент В ИЕРАРХИИ(&Контрагент)
		|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
		|	И РеализацияТоваровУслуг.Склад = &Склад
		|	И НЕ РеализацияТоваровУслуг.Ссылка В
		|				(ВЫБРАТЬ
		|					ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи
		|				ИЗ
		|					Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
		|				ГДЕ
		|					НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		|				ИЗ
		|					Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
		|				ГДЕ
		|					НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка)
		|	И НЕ РеализацияТоваровУслуг.Ссылка В (&МассивТекДокументовПередачи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Ссылка,
		|	СУММА(Данные.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_СуммаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Документы.Ссылка КАК Ссылка,
		|		ЕСТЬNULL(РеализацияТоваровУслугТовары.СуммаНДС, 0) КАК СуммаНДС
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугТовары.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Документы.Ссылка,
		|		ЕСТЬNULL(РеализацияТоваровУслугУслуги.СуммаНДС, 0)
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугУслуги.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Документы.Ссылка,
		|		ЕСТЬNULL(РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС, 0)
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
		|			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугАгентскиеУслуги.Ссылка) КАК Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Документы.Ссылка КАК Документ,
		|	ВТ_Документы.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ВТ_Документы.Ссылка.СуммаДокумента - ВТ_СуммаНДС.СуммаНДС КАК СуммаБезНДС,
		|	ЛОЖЬ КАК Выбрать
		|ИЗ
		|	ВТ_Документы КАК ВТ_Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДС КАК ВТ_СуммаНДС
		|		ПО ВТ_Документы.Ссылка = ВТ_СуммаНДС.Ссылка";
		
    //ОК Довбешка Т. 16.04.2015
	ИначеЕсли ТипДокумента = "ПередачаОС" Тогда 
		Запрос.Текст = "ВЫБРАТЬ
		|	ПередачаОС.Ссылка
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	Документ.ПередачаОС КАК ПередачаОС
		|ГДЕ
		|	ПередачаОС.Организация = &Организация
		|	И ПередачаОС.Контрагент В ИЕРАРХИИ(&Контрагент)
		|	И ПередачаОС.Проведен = ИСТИНА
		|	И НЕ ПередачаОС.Ссылка В (&МассивТекДокументовПередачи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Ссылка,
		|	СУММА(Данные.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_СуммаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Документы.Ссылка КАК Ссылка,
		|		ЕСТЬNULL(ПередачаОС.СуммаНДС, 0) КАК СуммаНДС
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаОС.ОС КАК ПередачаОС
		|			ПО ВТ_Документы.Ссылка = ПередачаОС.Ссылка) КАК Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Документы.Ссылка КАК Документ,
		|	ВТ_Документы.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ВТ_Документы.Ссылка.СуммаДокумента - ВТ_СуммаНДС.СуммаНДС КАК СуммаБезНДС,
		|	ЛОЖЬ КАК Выбрать
		|ИЗ
		|	ВТ_Документы КАК ВТ_Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДС КАК ВТ_СуммаНДС
		|		ПО ВТ_Документы.Ссылка = ВТ_СуммаНДС.Ссылка";
    //ОК Довбешка Т.
			
	ИначеЕсли ТипДокумента = "ОперацияБух" Тогда 
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
		               |	0 КАК СуммаБезНДС,
		               |	ЛОЖЬ КАК Выбрать,
		               |	ХозрасчетныйДвиженияССубконто.Регистратор.СуммаОперации КАК СуммаДокумента
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		               |			&ДатаНач,
		               |			&ДатаКон,
		               |			Регистратор ССЫЛКА Документ.ОперацияБух
		               |				И Регистратор.ПометкаУдаления = ЛОЖЬ
		               |				И Организация = &Организация
		               |				И ВЫБОР
		               |					КОГДА ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
		               |						ТОГДА Субконто1 В (&Контрагент)
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |				И ВЫБОР
		               |					КОГДА ВидКорСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства)
		               |						ТОГДА КорСубконто1 В ИЕРАРХИИ (&Объект)
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ,
		               |			,
		               |			) КАК ХозрасчетныйДвиженияССубконто
		               |ГДЕ
		               |	НЕ ХозрасчетныйДвиженияССубконто.Регистратор В
		               |				(ВЫБРАТЬ
		               |					ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		               |		
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |				ВЫБРАТЬ
		               |					ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка)
		               |	И НЕ ХозрасчетныйДвиженияССубконто.Регистратор В (&МассивТекДокументовПередачи)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ХозрасчетныйДвиженияССубконто.Регистратор,
		               |	ХозрасчетныйДвиженияССубконто.Регистратор.СуммаОперации";
	КонецЕсли;	
		//Найдем встречную организацию
	ОтборПоКонтрагенту = Новый Структура("Контрагент, ВидСвязи");
	ОтборПоКонтрагенту.Контрагент = Объект.Контрагент;
	ОтборПоКонтрагенту.ВидСвязи = Перечисления.бит_ВидыСобственныхКонтрагентов.Организация;
	
	НаборЗаписейВстречныхОрганизаций = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборПоКонтрагенту, "бит_СобственныеКонтрагенты");
	
	Если НаборЗаписейВстречныхОрганизаций.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(НаборЗаписейВстречныхОрганизаций[0].Объект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для контрагента: " + Объект.Контрагент.Наименование + " не указана организация в регистре ""Собственные контрагенты"". Подбор не возможен", СтатусСообщения.Важное);
		Возврат ЛОЖЬ;
	Иначе
		ВстречнаяОрганизация = НаборЗаписейВстречныхОрганизаций[0].Объект;
	КонецЕсли;
	
	//Найдем встречные контрагенты
	ЗапросВстречныхКонтрагентов = Новый Запрос;
	ЗапросВстречныхКонтрагентов.Текст = "ВЫБРАТЬ
	                                    |	бит_СобственныеКонтрагенты.Контрагент
	                                    |ИЗ
	                                    |	РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты
	                                    |ГДЕ
	                                    |	бит_СобственныеКонтрагенты.Объект = &Организация
	                                    |	И бит_СобственныеКонтрагенты.ВидСвязи = &ВидСвязи";
	ЗапросВстречныхКонтрагентов.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросВстречныхКонтрагентов.УстановитьПараметр("ВидСвязи", Перечисления.бит_ВидыСобственныхКонтрагентов.Организация);
	
	РезультатЗапросаВстерчныхКонтрагентов = ЗапросВстречныхКонтрагентов.Выполнить();
	
	Если Не РезультатЗапросаВстерчныхКонтрагентов.Пустой() Тогда
		МассивВстречныхКонтрагентов = РезультатЗапросаВстерчныхКонтрагентов.Выгрузить().ВыгрузитьКолонку("Контрагент");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для организации: " + Объект.Организация.Наименование + " не найдены контрагенты в регистре ""Собственные контрагенты"". Подбор не возможен", СтатусСообщения.Важное);
		Возврат ЛОЖЬ
	КонецЕсли;
				   
	Запрос.УстановитьПараметр("Контрагент"   , МассивВстречныхКонтрагентов);				   
	Запрос.УстановитьПараметр("Организация"  , ВстречнаяОрганизация);
	Запрос.УстановитьПараметр("Склад"        , Объект.Склад);
	Запрос.УстановитьПараметр("Объект"       , Объект.Склад.Объект);
	Запрос.УстановитьПараметр("ДатаНач"      , НачалоДня(ДобавитьМесяц(Объект.Дата, -12)));
	Запрос.УстановитьПараметр("ДатаКон"      , КонецДня(Объект.Дата));
	
	МассивТекДокументовПередачи = Объект.бит_ДокументыСобственныхКонтрагентов.Выгрузить().ВыгрузитьКолонку("ДокументРеализацииПередачи");
	Запрос.УстановитьПараметр("МассивТекДокументовПередачи",МассивТекДокументовПередачи);
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	Возврат Запрос;
	
КонецФункции

//Начало_бит_Магомедов_01.08.2013
&НаКлиенте
Процедура бит_УстановитьВидимостьРеализацияУСобственногоЮЛ()
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
КонецПроцедуры

&НаСервере
Процедура бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер()
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-25 (#3878)
	Если Элементы.Найти("бит_РеализацияУСобственногоЮЛ") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-25 (#3878)
	//БИТ Тртилек 11072013 установим видимость страницы Релаизация у собств ЮЛ
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Элементы.бит_РеализацияУСобственногоЮЛ.Видимость = ДокументОбъект.УстановитьВидимостьРеализацияУСобственногоЮЛ();
	///БИТ Тртилек
КонецПроцедуры

&НаКлиенте
Процедура бит_ТабличноеПолеДокументыСобственныхКонтрагентовПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные;
	
	Если ТекущиеДанные<>Неопределено Тогда 
		Если ТипЗнч(ТекущиеДанные.ДокументРеализацииПередачи) = Тип("ДокументСсылка.ОперацияБух") Тогда 
			Элементы.бит_Сумма.ТолькоПросмотр = Истина;
			Элементы.бит_Сумма.Доступность = Ложь;
			Элементы.бит_СуммаБезНДС.ТолькоПросмотр = Ложь;
			Элементы.бит_СуммаБезНДС.Доступность = Истина;
		//ОК Довбешка Т.  17.04.2015
		ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументРеализацииПередачи) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
			ИЛИ ТипЗнч(ТекущиеДанные.ДокументРеализацииПередачи) = Тип("ДокументСсылка.ПередачаОС") Тогда 
		//ОК Довбешка Т.
			Элементы.бит_Сумма.ТолькоПросмотр = Истина;
			Элементы.бит_СуммаБезНДС.ТолькоПросмотр = Истина;
			Элементы.бит_Сумма.Доступность = Ложь;
			Элементы.бит_СуммаБезНДС.Доступность = Ложь;
		Иначе
			Элементы.бит_Сумма.ТолькоПросмотр = Ложь;
			Элементы.бит_Сумма.Доступность = Истина;
			Элементы.бит_СуммаБезНДС.ТолькоПросмотр = Ложь;
			Элементы.бит_СуммаБезНДС.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//БИТ Тртилек 22082013 обработчик события ПриИзменении поля ввода Документ реализации поступления
&НаКлиенте
Процедура бит_ТабличноеПолеДокументыСобственныхКонтрагентовДокументРеализацииПередачиПриИзменении(Элемент)
	ДокументРеализацииПередачи = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДокументРеализацииПередачи;
	Если ЗначениеЗаполнено(ДокументРеализацииПередачи) Тогда
		
		ДокументСсылка = ДокументРеализацииПередачи;
		ТипДокумента = ТипЗнч(ДокументСсылка);
		РеквизитыДокумента = ПолучитьРеквизитыДокумента(ДокументСсылка);
		//ОК Довбешка Т.  16.04.2015
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = ?((ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") или ТипДокумента = Тип("ДокументСсылка.ПередачаОС")), РеквизитыДокумента.СуммаДокумента, РеквизитыДокумента.СуммаОперации);		
		//ОК Довбешка Т.
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДатаДокументаРеализацииПередачи = РеквизитыДокумента.Дата;
		Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			СуммаНДС =  РеквизитыДокумента.ТоварыСуммаНДС + РеквизитыДокумента.УслугиСуммаНДС;
			Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_СуммаБезНДС = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма - СуммаНДС;
		//ОК Довбешка Т.  16.04.2015
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаОС") Тогда
			СуммаНДС =  РеквизитыДокумента.ОССуммаНДС;
			Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_СуммаБезНДС = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма - СуммаНДС;
		//ОК Довбешка Т.
		КонецЕсли;
		
	Иначе
		
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = 0;
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДатаДокументаРеализацииПередачи = '00010101';
		
	КонецЕсли;
	ОбновитьИтоги(ЭтаФорма);
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыДокумента(ВыбранныйДокумент)
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Дата", ВыбранныйДокумент.Дата);
	Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		РеквизитыДокумента.Вставить("СуммаДокумента", ВыбранныйДокумент.СуммаДокумента);
		РеквизитыДокумента.Вставить("УслугиСуммаНДС", ВыбранныйДокумент.Услуги.Итог("СуммаНДС"));
		РеквизитыДокумента.Вставить("ТоварыСуммаНДС", ВыбранныйДокумент.Товары.Итог("СуммаНДС"));
	ИначеЕсли ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ОперацияБух") Тогда 
		РеквизитыДокумента.Вставить("СуммаОперации", ВыбранныйДокумент.СуммаОперации);
	ИначеЕсли  ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ПередачаОС") Тогда 
		РеквизитыДокумента.Вставить("ОССуммаНДС", ВыбранныйДокумент.ОС.Итог("СуммаНДС"));
		РеквизитыДокумента.Вставить("СуммаДокумента", ВыбранныйДокумент.СуммаДокумента);
	КонецЕсли;
	Возврат РеквизитыДокумента;
КонецФункции

//БИТ Тртилек 22082013 обработчик события НачалоВыбора поля ввода Документ реализации поступления
&НаКлиенте
Процедура бит_ТабличноеПолеДокументыСобственныхКонтрагентовДокументРеализацииПередачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("РеализацияТоваровУслуг", "Реализация товаров и услуг");
	СписокТипов.Добавить("ОперацияБух", "Операция (бухгалтерский и налоговый учет)");	
	СписокТипов.Добавить("ПередачаОС", "Передача ОС");	        //ОК Довбешка Т.  17.04.2015
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма);
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, "Выберите вид документа"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбранныйЭлемент, СписокПараметров) Экспорт
    Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
    Иначе
        ВыбранноеЗначение = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ВыбранныйДокумент = Неопределено;
	
	ФормаВыбора = Получитьформу("Документ."+ВыбранноеЗначение+".ФормаВыбора");
	
	
	//Найдем встречную организацию
	ОтборПоКонтрагенту = Новый Структура("Контрагент, ВидСвязи");
	ОтборПоКонтрагенту.Контрагент = Объект.Контрагент;
	ОтборПоКонтрагенту.ВидСвязи = ПредопределенноеЗначение("Перечисление.бит_ВидыСобственныхКонтрагентов.Организация");
	
	СтруктураНабораЗаписейВстречныхОрганизаций = ПолучитьСтруктуруНабораЗаписейВстречныхОрганизаций(ОтборПоКонтрагенту);
	
	Если СтруктураНабораЗаписейВстречныхОрганизаций.Количество = 0 ИЛИ НЕ ЗначениеЗаполнено(СтруктураНабораЗаписейВстречныхОрганизаций.Объект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для контрагента: " + Объект.Контрагент + " не указана организация в регистре ""Собственные контрагенты"". В форме выбора отбор установлен не будет");
	Иначе
		ВстречнаяОрганизация = СтруктураНабораЗаписейВстречныхОрганизаций.Объект;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ФормаВыбора.Список, "Организация", ВстречнаяОрганизация, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	КонецЕсли;	
	
	ВыбранныйДокумент = ОткрытьФормуМодально(ФормаВыбора);
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДокументРеализацииПередачи = ВыбранныйДокумент;
	РеквизитыДокумента = ПолучитьРеквизитыДокумента(ВыбранныйДокумент);
	Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДатаДокументаРеализацииПередачи = РеквизитыДокумента.Дата;
	Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = РеквизитыДокумента.СуммаДокумента;
		СуммаНДС =  РеквизитыДокумента.ТоварыСуммаНДС + РеквизитыДокумента.УслугиСуммаНДС;
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_СуммаБезНДС = РеквизитыДокумента.СуммаДокумента - СуммаНДС;
	//ОК Довбешка Т.  16.04.2015
	ИначеЕсли ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ПередачаОС") Тогда
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = РеквизитыДокумента.СуммаДокумента;
		СуммаНДС =  РеквизитыДокумента.ОССуммаНДС;
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_СуммаБезНДС = РеквизитыДокумента.СуммаДокумента - СуммаНДС;
	//ОК Довбешка Т.
	ИначеЕсли ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ОперацияБух") Тогда
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = РеквизитыДокумента.СуммаОперации;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНабораЗаписейВстречныхОрганизаций(ОтборПоКонтрагенту)
	НаборЗаписейВстречныхОрганизаций = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборПоКонтрагенту, "бит_СобственныеКонтрагенты");
	КоличествоЗаписей = НаборЗаписейВстречныхОрганизаций.Количество();
	Возврат Новый Структура("Количество, Объект", КоличествоЗаписей, ?(КоличествоЗаписей = 0, Неопределено, НаборЗаписейВстречныхОрганизаций[0].Объект));
КонецФункции

//Конец_бит_Магомедов_01.08.2013

//ОК Калинин М.  050313
&НаСервере
Процедура ОК_ИзменитьСвойстваПолейФормы()
	Элементы.ДатаВходящегоДокумента.АвтоОтметкаНезаполненного=Истина;
КонецПроцедуры	

//ОК Калинин М.


// BIT AMerkulov ++
&НаКлиенте
Процедура ЗаполнитьПоУправленческимАналитикам(Команда)
	
	ИмяТЧ = "Товары";
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-07 (#3048)
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ);
	Возврат;  
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-07 (#3048)
	
	Если Объект[ИмяТЧ].Количество() Тогда
		Ответ = Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) = Ложь Тогда
		Предупреждение("Необходимо записать документ перед заполнением!");
		Возврат;
	КонецЕсли;
		
	Объект[ИмяТЧ].Очистить();	 
	Заявка =  ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
	ВвестиЗначение(Заявка, "Выберите заявку для заполнения");
	
	Если ЗначениеЗаполнено(Заявка) Тогда
		ПараметрыОткрытия = Новый Структура("Заявка",Заявка);
		ПараметрыОткрытия.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС); 
		ФормаВыбора = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.Форма.битФормаВыбораАналитик",ПараметрыОткрытия);		
		Результат = ФормаВыбора.ОткрытьМодально();
		
		ЗаполнитьПоУправленческимАналитикамНаСервере(ИмяТЧ, Заявка, Результат);
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоУправленческимАналитикамУслуги(Команда)
	
	ИмяТЧ = "Услуги";
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-07 (#3048)
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ);
	Возврат;  
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-07 (#3048)
	
	Если Объект[ИмяТЧ].Количество() Тогда
		Ответ = Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) = Ложь Тогда
		Предупреждение("Необходимо записать документ перед заполнением!");
		Возврат;
	КонецЕсли;
		
	Объект[ИмяТЧ].Очистить();	 
	Заявка =  ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
	ВвестиЗначение(Заявка, "Выберите заявку для заполнения");
	
	Если ЗначениеЗаполнено(Заявка) Тогда
		ПараметрыОткрытия = Новый Структура("Заявка",Заявка);
		ПараметрыОткрытия.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС); 
		ФормаВыбора = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.Форма.битФормаВыбораАналитик",ПараметрыОткрытия);		
		Результат = ФормаВыбора.ОткрытьМодально();
		
		ЗаполнитьПоУправленческимАналитикамНаСервере(ИмяТЧ, Заявка, Результат);
		
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоУправленческимАналитикамНаСервере(ИмяТЧ, Заявка, Результат)
	
	 
	Если Результат <> Неопределено Тогда
		
		Для Каждого Стр Из Результат Цикл
			Если Стр.Выбор Тогда
				ДобавленнаяСтрока = Объект[ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,Стр);
				ДобавленнаяСтрока.Цена = ДобавленнаяСтрока.Сумма;
				ДобавленнаяСтрока.Количество = 1;
				
				// БИТ_YK_н	01/16
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДобавленнаяСтрока, 1);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДобавленнаяСтрока, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				ДобавленнаяСтрока.Всего = ДобавленнаяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, ДобавленнаяСтрока.СуммаНДС);
					
			КонецЕсли;
		КонецЦикла;
		ОбновитьИтоги(ЭтаФорма);
		// БИТ_YK_к	
	КонецЕсли;
	
	ЗаписьДопАналитик = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьМенеджерЗаписи();
	ЗаписьДопАналитик.Объект = Объект.Ссылка;
	ЗаписьДопАналитик.ЗначениеАналитики = Заявка;
	ЗаписьДопАналитик.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки");
	ЗаписьДопАналитик.Записать();
			
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКолонкуТовары(Команда)
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		//Имя 		= Элементы.Товары.ТекущаяКолонка.Данные;
		//Значение 	= Элементы.Товары.ТекущиеДанные[Имя];
		//
		//Для Каждого Стр Из Объект.Товары Цикл
		//	Стр[Имя] = Значение;	
		//КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКолонкуУслуги(Команда)
	
	Если Элементы.Услуги.ТекущиеДанные <> Неопределено Тогда
		//Имя 		= Элементы.Услуги.ТекущаяКолонка.Данные;
		//Значение 	= Элементы.Услуги.ТекущиеДанные[Имя];
		//
		//Для Каждого Стр Из Объект.Услуги Цикл
		//	Стр[Имя] = Значение;	
		//КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАналитику(НомерСтроки)
	
	СтрокаТабличнойЧасти = Объект.Услуги[НомерСтроки];

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
	//Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Объект) Тогда	
	//	Для инд=1 По 3 Цикл
	//		
	//		Если ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда				
	//			
	//			СтрокаТабличнойЧасти["Субконто"+инд] = СтрокаТабличнойЧасти.Объект;	
	//			
	//		КонецЕсли;				
	//		Если ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
	//			
	//			СтрокаТабличнойЧасти["СубконтоНУ"+инд] = СтрокаТабличнойЧасти.Объект;	
	//			
	//		КонецЕсли;			
	//	КонецЦикла;
	//КонецЕсли;	
	//
	//Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЦФО) Тогда
	//
	//	Для инд=1 По 3 Цикл
	//		Если ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.Подразделения") Тогда
	//			
	//			СтрокаТабличнойЧасти["Субконто"+инд] = СтрокаТабличнойЧасти.ЦФО;	
	//			
	//		КонецЕсли;				
	//		Если ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = Тип("СправочникСсылка.Подразделения") Тогда
	//			
	//			СтрокаТабличнойЧасти["СубконтоНУ"+инд] = СтрокаТабличнойЧасти.ЦФО;	
	//			
	//		КонецЕсли;			
	//	КонецЦикла;
	//КонецЕсли;
	//	
	//Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяОборотов) Тогда
	//
	//	
	//	Запрос = Новый Запрос;	
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
	//	               |ИЗ
	//	               |	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	//	               |ГДЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.СтатьиЗатрат 
	//				   | И бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов = &Статья";					   
	//	
	//	Запрос.УстановитьПараметр("Статья",СтрокаТабличнойЧасти.СтатьяОборотов);
	//	
	//	ТаблицаСтатейЗатрат = Запрос.Выполнить().Выгрузить();
	//	
	//	Запрос = Новый Запрос;	
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
	//	               |ИЗ
	//	               |	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	//	               |ГДЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.ПрочиеДоходыИРасходы 
	//				   | И бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов = &Статья";					   
	//	
	//	Запрос.УстановитьПараметр("Статья",СтрокаТабличнойЧасти.СтатьяОборотов);
	//	
	//	ТаблицаПрочихДоходов = Запрос.Выполнить().Выгрузить();
	//	
	//	
	//	Если ТаблицаСтатейЗатрат.Количество() Тогда
	//		Для инд=1 По 3 Цикл
	//			Если ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
	//				СтрокаТабличнойЧасти["Субконто"+инд] = ТаблицаСтатейЗатрат[0].СтатьяРегл;
	//				
	//				Если ТаблицаСтатейЗатрат.Количество() > 1 Тогда
	//					Сообщить("Найдено более одной статьи затрат по соответствию с указанной статьей оборотов!");	
	//				КонецЕсли;
	//				
	//				
	//			КонецЕсли;				
	//			Если ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
	//				СтрокаТабличнойЧасти["СубконтоНУ"+инд] = ТаблицаСтатейЗатрат[0].СтатьяРегл;	
	//			КонецЕсли;			
	//		КонецЦикла;
	//	КонецЕсли;	
	//	
	//	Если ТаблицаПрочихДоходов.Количество() Тогда
	//		Для инд=1 По 3 Цикл
	//			Если ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
	//				СтрокаТабличнойЧасти["Субконто"+инд] = ТаблицаПрочихДоходов[0].СтатьяРегл;
	//				
	//				Если ТаблицаПрочихДоходов.Количество() > 1 Тогда
	//					Сообщить("Найдено более одной статьи прочих доходов-расходов по соответствию с указанной статьей оборотов!");	
	//				КонецЕсли;
	//				
	//				
	//			КонецЕсли;				
	//			Если ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
	//				СтрокаТабличнойЧасти["СубконтоНУ"+инд] = ТаблицаПрочихДоходов[0].СтатьяРегл;	
	//			КонецЕсли;			
	//		КонецЦикла;
	//	КонецЕсли;			
	//КонецЕсли;  
	//Заменено на:
	
	Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_ЦФО) И
			 ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_СтатьяОборотов) И
			 ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_Аналитика_2)) 
	Тогда 
		Возврат;
	КонецЕсли;
	
	пВидыСубконтоНУ = СтрокаТабличнойЧасти.СчетЗатратНУ.ВидыСубконто;
	
	Для инд=1 По 3 Цикл
		//БУ
		Если ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = ТипЗнч(СтрокаТабличнойЧасти.ок_Аналитика_2) Тогда
			 Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_Аналитика_2) Тогда 
				СтрокаТабличнойЧасти["Субконто"+инд] = СтрокаТабличнойЧасти.ок_Аналитика_2;	
			КонецЕсли;			
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = ТипЗнч(СтрокаТабличнойЧасти.ок_ЦФО) Тогда
			 Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_ЦФО) Тогда 
				СтрокаТабличнойЧасти["Субконто"+инд] = СтрокаТабличнойЧасти.ок_ЦФО;	
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			пСтатьяРегл = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтрокаТабличнойЧасти.ок_СтатьяОборотов, фКэшЗначений);
			Если ЗначениеЗаполнено(пСтатьяРегл) Тогда 
				СтрокаТабличнойЧасти["Субконто"+инд] = пСтатьяРегл;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-27 (#3713)
			//пСтатьяРегл = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтрокаТабличнойЧасти.ок_СтатьяОборотов, фКэшЗначений);
			пСтатьяРегл = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтрокаТабличнойЧасти.ок_СтатьяОборотов, фКэшЗначений, Истина);
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-27 (#3713)
			Если ЗначениеЗаполнено(пСтатьяРегл) Тогда 
				СтрокаТабличнойЧасти["Субконто"+инд] = пСтатьяРегл;
			КонецЕсли;
		КонецЕсли;	
						
		//НУ
		Если СтрокаТабличнойЧасти.СчетЗатрат = СтрокаТабличнойЧасти.СчетЗатратНУ Тогда 
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти["Субконто"+инд]) Тогда 
				СтрокаТабличнойЧасти["СубконтоНУ"+инд] = СтрокаТабличнойЧасти["Субконто"+инд];
			КонецЕсли;
		Иначе 
			Для Каждого пВидСубконтоНУ Из пВидыСубконтоНУ Цикл 
				Если ЗначениеЗаполнено(пВидСубконтоНУ.ВидСубконто) Тогда 
					Если пВидСубконтоНУ.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТабличнойЧасти.ок_Аналитика_2)) Тогда 			
						СтрокаТабличнойЧасти["СубконтоНУ"+инд] = СтрокаТабличнойЧасти.ок_Аналитика_2;
					ИначеЕсли пВидСубконтоНУ.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТабличнойЧасти.ок_ЦФО)) Тогда
						СтрокаТабличнойЧасти["СубконтоНУ"+инд] = СтрокаТабличнойЧасти.ок_ЦФО;
					ИначеЕсли пВидСубконтоНУ.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда 
						пСтатьяРегл = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтрокаТабличнойЧасти.ок_СтатьяОборотов, фКэшЗначений);
						Если ЗначениеЗаполнено(пСтатьяРегл) Тогда 
							СтрокаТабличнойЧасти["СубконтоНУ"+инд] = пСтатьяРегл;
						КонецЕсли;						
					ИначеЕсли пВидСубконтоНУ.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПрочиеДоходыИРасходы")) Тогда 
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-27 (#3713)
						//пСтатьяРегл = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтрокаТабличнойЧасти.ок_СтатьяОборотов, фКэшЗначений);
						пСтатьяРегл = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтрокаТабличнойЧасти.ок_СтатьяОборотов, фКэшЗначений, Истина);
						//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-27 (#3713)
						Если ЗначениеЗаполнено(пСтатьяРегл) Тогда 
							СтрокаТабличнойЧасти["СубконтоНУ"+инд] = пСтатьяРегл;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
	
КонецПроцедуры

&НаСервере
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-19 (#3048)	
Процедура ПриИзмененииСубконто(НомерСтроки, Значение, НомерСубконто)
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-19 (#3048)	
	
	ТекущаяСтрока = Объект.Услуги[НомерСтроки];
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-19 (#3048)	
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.ОбъектыСтроительства") И ЗначениеЗаполнено(ТекущаяСтрока.Объект) Тогда
	//	ТекущаяСтрока.Объект = Значение;	
	//КонецЕсли;
	//
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") И ЗначениеЗаполнено(ТекущаяСтрока.Объект) Тогда
	//	ТекущаяСтрока.Объект = Значение.Объект;	
	//КонецЕсли;
	//
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") И ЗначениеЗаполнено(ТекущаяСтрока.ЦФО) Тогда
	//	ТекущаяСтрока.ЦФО = Значение.ОК_Функция;	
	//КонецЕсли;
	//
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.ОсновныеСредства") И ЗначениеЗаполнено(ТекущаяСтрока.Объект) Тогда
	//	ТекущаяСтрока.Объект = Значение.Объект;	
	//КонецЕсли;
	//
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И ЗначениеЗаполнено(ТекущаяСтрока.СтатьяОборотов) Тогда
	//	
	//	Запрос = Новый Запрос;	
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
	//	               |ИЗ
	//	               |	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	//	               |ГДЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.СтатьиЗатрат 
	//				   | И бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл = &Статья";					   
	//	Запрос.УстановитьПараметр("Статья",Значение);
	//	Результат = Запрос.Выполнить();
	//	Если НЕ Результат.Пустой() Тогда
	//		Выборка = Результат.Выбрать();
	//		Выборка.Следующий();
	//		ТекущаяСтрока.СтатьяОборотов = Выборка.СтатьяОборотов;	
	//	КонецЕсли;
	//КонецЕсли;
	//Заменено на:
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		ТекущаяСтрока.ок_Аналитика_2 = ПолучитьОбъектСтроительстваДляАналитики2(Значение);	
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-29 (#3141)
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
	//	ТекущаяСтрока.ок_Аналитика_2 = Значение.Объект;	
	//КонецЕсли;
	
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
	//	ТекущаяСтрока.ок_ЦФО = Значение.ОК_Функция;	
	//КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-29 (#3141)
		
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Подразделения") Тогда
		ТекущаяСтрока.ок_ЦФО = Значение;	
	КонецЕсли;	
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		ТекущаяСтрока.ок_Аналитика_2 = Значение.Объект;	
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		
		стрРезультат = ПолучитьСтатьюОборотовНаСервере(Значение);
		Если стрРезультат.Свойство("Ошибки") Тогда 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(стрРезультат.Ошибки,,"Объект.Услуги["+Объект.Услуги.Индекс(ТекущаяСтрока)+"].Субконто" + НомерСубконто);
			ТекущаяСтрока.ок_СтатьяОборотов = ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка");
			
		ИначеЕсли стрРезультат.Свойство("СтатьяОборотов") Тогда 
			
			ТекущаяСтрока.ок_СтатьяОборотов = стрРезультат.СтатьяОборотов;
			
		КонецЕсли;		
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда	
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-18 (#3791)
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-10 (#3141)
		////Запрос = Новый Запрос;	
		////Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		////|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
		////|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
		////|ИЗ
		////|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
		////|ГДЕ
		////|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.ПрочиеДоходыИРасходы 
		////| И бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл = &Статья";					   
		////Запрос.УстановитьПараметр("Статья",Значение);
		////Результат = Запрос.Выполнить();
		////Если НЕ Результат.Пустой() Тогда
		////	Выборка = Результат.Выбрать();
		////	Выборка.Следующий();
		////	ТекущаяСтрока.ок_СтатьяОборотов = Выборка.СтатьяОборотов;	
		////КонецЕсли;  
		////Заменено на:
		//ТекущаяСтрока.ок_СтатьяОборотов = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(Значение, фКэшЗначений, Истина);
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-10 (#3141)
		
		стрРезультат = ПолучитьСтатьюОборотовНаСервере(Значение);
		Если стрРезультат.Свойство("Ошибки") Тогда 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(стрРезультат.Ошибки,,"Объект.Услуги["+Объект.Услуги.Индекс(ТекущаяСтрока)+"].Субконто" + НомерСубконто);
			ТекущаяСтрока.ок_СтатьяОборотов = ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка");
			
		ИначеЕсли стрРезультат.Свойство("СтатьяОборотов") Тогда 
			
			ТекущаяСтрока.ок_СтатьяОборотов = стрРезультат.СтатьяОборотов;
			
		КонецЕсли;
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-18 (#3791)
		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-19 (#3048)
	
КонецПроцедуры

&НаКлиенте

&НаКлиенте

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура("Номенклатура",ТекущаяСтрока.Номенклатура);
		ПараметрыОткрытия.Вставить("Количество",ТекущаяСтрока.Количество); 
		ПараметрыОткрытия.Вставить("Цена",ТекущаяСтрока.Цена); 
		ПараметрыОткрытия.Вставить("Сумма",ТекущаяСтрока.Сумма); 
		ПараметрыОткрытия.Вставить("СуммаНДС",ТекущаяСтрока.СуммаНДС); 
		ПараметрыОткрытия.Вставить("СтавкаНДС",ТекущаяСтрока.СтавкаНДС); 
		ПараметрыОткрытия.Вставить("СчетУчета",ТекущаяСтрока.СчетУчета); 
		ПараметрыОткрытия.Вставить("СчетУчетаНДС",ТекущаяСтрока.СчетУчетаНДС); 
		ПараметрыОткрытия.Вставить("Объект",ЭтаФорма.Объект); 
		Форма =  ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.Форма.битФормаРазбитияСтрокиТовары",ПараметрыОткрытия);
		
		Результат = Форма.ОткрытьМодально();
		// Получим общие параметры обработки для реквизитов документа
		ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(ЭтаФорма, ТекущаяСтрока);
		
		// Дополнительные поля, добавленные в табличное поле текущей формы.
		ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущаяСтрока.Всего);
		ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаЗабалансовый", ТекущаяСтрока.СчетУчетаЗабалансовый);
		
		ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
		//РазбитьСтрокуНаСервере(Результат, ТекущаяСтрока.НомерСтроки-1, ТекущаяСтрока.Объект,ТекущаяСтрока.Период,ТекущаяСтрока.ЦФО,ТекущаяСтрока.СтатьяОборотов, параметрыОбработки );
		//Заменено на:
		РазбитьСтрокуНаСервере(Результат, ТекущаяСтрока.НомерСтроки-1, ТекущаяСтрока.ок_Аналитика_2,ТекущаяСтрока.ок_Период,ТекущаяСтрока.ок_ЦФО,ТекущаяСтрока.ок_СтатьяОборотов, параметрыОбработки );
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)			    
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере 
Процедура РазбитьСтрокуНаСервере(Результат, НомерСтроки, ОбъектСсылка, Период, ЦФО, СтатьяОборотов,параметрыобработки)
	
		Если Результат <> Неопределено Тогда
			
			Объект.Товары.Удалить(НомерСтроки);
			
			Для Каждого Стр Из Результат Цикл
				ДобавленнаяСтрока = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,Стр);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)				
				//ДобавленнаяСтрока.Объект = ОбъектСсылка;
				//ДобавленнаяСтрока.Период = Период;
				//ДобавленнаяСтрока.ЦФО	 = ЦФО;
				//ДобавленнаяСтрока.СтатьяОборотов = СтатьяОборотов;			
				//Заменено на:
				ДобавленнаяСтрока.ок_Объект			= ОбъектСсылка;
				ДобавленнаяСтрока.ок_Период			= НачалоМесяца(Период);
				ДобавленнаяСтрока.ок_ЦФО			= ЦФО;
				ДобавленнаяСтрока.ок_СтатьяОборотов = СтатьяОборотов;			
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)			
				
				ТоварыНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы,
		ПараметрыОбработки.ДанныеОбъекта,
		ПараметрыОбработки.СчетаУчетаКЗаполнению);
		
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, ПараметрыОбработки.ДанныеСтрокиТаблицы,"СчетУчета,СчетУчетаНДС");
			КонецЦикла;
			
			
		КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьПоУправленческимАналитикамУслуги(Команда)
	
	ИмяТЧ = "Услуги";
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-07 (#3048)
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ, Ложь);
	Возврат;  
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-07 (#3048)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) = Ложь Тогда
		Предупреждение("Необходимо записать документ перед заполнением!");
		Возврат;
	КонецЕсли;
		
	Заявка =  ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
	ВвестиЗначение(Заявка, "Выберите заявку для заполнения");
	
	Если ЗначениеЗаполнено(Заявка) Тогда
		ПараметрыОткрытия = Новый Структура("Заявка",Заявка);
		ПараметрыОткрытия.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС); 
		ФормаВыбора = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.Форма.битФормаВыбораАналитик",ПараметрыОткрытия);		
		Результат = ФормаВыбора.ОткрытьМодально();
		
		ДоЗаполнитьПоУправленческимАналитикамНаСервере(ИмяТЧ, Заявка, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоЗаполнитьПоУправленческимАналитикамНаСервере(ИмяТЧ, Заявка, Результат)
	
	Если Результат <> Неопределено Тогда
		
		КоличествоСтрокВТЧ = Объект[ИмяТЧ].Количество()-1;
		Инд = 0;
		
		Для Каждого Стр Из Результат Цикл
			Если Стр.Выбор Тогда
				Если Инд <= КоличествоСтрокВТЧ Тогда
					СтрокаКЗаполнению = Объект[ИмяТЧ][Инд];
				Иначе 
					СтрокаКЗаполнению = Объект[ИмяТЧ].Добавить();					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаКЗаполнению,Стр);
				
				Инд = Инд+1;
				
			КонецЕсли;
		КонецЦикла;
		
		Объект.бит_ДозаполненоПоУправленческимАналитикам = Истина;	
		
	КонецЕсли;
	
	ЗаписьДопАналитик = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьМенеджерЗаписи();
	ЗаписьДопАналитик.Объект = Объект.Ссылка;
	ЗаписьДопАналитик.ЗначениеАналитики = Заявка;
	ЗаписьДопАналитик.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки");
	ЗаписьДопАналитик.Записать();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьПоУправленческимАналитикамТовары(Команда)
	
	ИмяТЧ = "Товары";
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-07 (#3048)
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ, Ложь);
	Возврат;  
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-07 (#3048)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) = Ложь Тогда
		Предупреждение("Необходимо записать документ перед заполнением!");
		Возврат;
	КонецЕсли;
		
	Заявка =  ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
	ВвестиЗначение(Заявка, "Выберите заявку для заполнения");
	
	Если ЗначениеЗаполнено(Заявка) Тогда
		ПараметрыОткрытия = Новый Структура("Заявка",Заявка);
		ПараметрыОткрытия.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС); 
		ФормаВыбора = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.Форма.битФормаВыбораАналитик",ПараметрыОткрытия);		
		Результат = ФормаВыбора.ОткрытьМодально();
		
		ДоЗаполнитьПоУправленческимАналитикамНаСервере(ИмяТЧ, Заявка, Результат);
		
	КонецЕсли;
	
КонецПроцедуры
//BIT  AMerkulov --

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-07 (#3048)
&НаКлиенте
Процедура ЗаполнитьТЧПоУправленческимАналитикам(Результат, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ТоварыНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	
	ЗаполнитьТЧПоУправленческимАналитикамНаСервере(Результат, ДопПараметры.ИмяТЧ, ДопПараметры.Заявка);
	
	Элементы.ТоварыНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-22 (#3141)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-22 (#3141)	
	
КонецПроцедуры

Процедура ЗаполнитьТЧПоУправленческимАналитикамНаСервере(АдресДанныхЗаполнения, ИмяТЧ, Заявка)
	
	пДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресДанныхЗаполнения);
		
	Если ИмяТЧ = "ОбъектыСтроительства" Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.ок_ОсновноеСоответствие КАК ОсновноеСоответствие,
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов КАК СтатьяОборотов,
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл КАК СтатьяРегл
		|ИЗ
		|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
		|ГДЕ
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.СтатьиЗатрат
		|	И бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов В(&СтатьиОборотов)";
		
		Запрос.УстановитьПараметр("СтатьиОборотов", пДанныеЗаполнения.ВыгрузитьКолонку("ок_СтатьяОборотов"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		пСоответствиеСтатей = РезультатЗапроса.Выгрузить();		
		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-10 (#3141)
	ИначеЕсли ИмяТЧ = "Услуги" Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.ок_ОсновноеСоответствие КАК ОсновноеСоответствие,
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов КАК СтатьяОборотов,
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл КАК Статья,
		|	ЛОЖЬ КАК СтатьяПДР
		|ИЗ
		|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
		|ГДЕ
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.СтатьиЗатрат
		|	И бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов В(&СтатьиОборотов)
		|
		|СГРУППИРОВАТЬ ПО
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.ок_ОсновноеСоответствие,
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.ок_ОсновноеСоответствие КАК ОсновноеСоответствие,
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
		|ГДЕ
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|	И бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов В(&СтатьиОборотов)
		|
		|СГРУППИРОВАТЬ ПО
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.ок_ОсновноеСоответствие,
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
		|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл";
		
		Запрос.УстановитьПараметр("СтатьиОборотов", пДанныеЗаполнения.ВыгрузитьКолонку("ок_СтатьяОборотов"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		пСоответствиеСтатей = РезультатЗапроса.Выгрузить();		
		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-10 (#3141)
		
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-09 (#3141)
	//СтрПоиска = Новый Структура("ок_ЦФО,ок_СтатьяОборотов,ок_Проект,ок_Период,ок_Аналитика_2,СтавкаНДС");
	//Заменено на:
	пИндекс = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-09 (#3141)
	Для Каждого пСтрокаЗаполнения Из пДанныеЗаполнения Цикл 			
	
		Если Объект.ДатаВходящегоДокумента <> Дата('00010101') Тогда 
			пСтрокаЗаполнения.ок_Период = Объект.ДатаВходящегоДокумента;
		КонецЕсли;		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-09 (#3141)
	//	пСтрокаТЧ = Неопределено;
	//	ЗаполнитьЗначенияСвойств(СтрПоиска, пСтрокаЗаполнения);
	//	пСтрокиТЧ = Объект[ИмяТЧ].НайтиСтроки(СтрПоиска);
	//	Если пСтрокиТЧ.Количество() > 0 Тогда 
	//		пСтрокаТЧ = пСтрокиТЧ[0];	
	//	КонецЕсли;
	//	Если пСтрокаТЧ = Неопределено Тогда 
	//		пСтрокаТЧ = Объект[ИмяТЧ].Добавить();
	//		ЗаполнитьЗначенияСвойств(пСтрокаТЧ, пСтрокаЗаполнения,,"СуммаНДС,Сумма");	
	//	КонецЕсли;
	//	
	//пСтрокаТЧ.СуммаНДС = пСтрокаТЧ.СуммаНДС + пСтрокаЗаполнения.СуммаНДС;
	//Если НЕ Объект.СуммаВключаетНДС Тогда 
	//		пСтрокаТЧ.Сумма = пСтрокаТЧ.Сумма+пСтрокаЗаполнения.СуммаБезНДС;
	//		пСтрокаТЧ.Всего = пСтрокаТЧ.Сумма + пСтрокаТЧ.СуммаНДС;
	//	Иначе
	//		пСтрокаТЧ.Сумма = пСтрокаТЧ.Сумма+пСтрокаЗаполнения.Сумма;
	//		пСтрокаТЧ.Всего = пСтрокаТЧ.Сумма;
	//	КонецЕсли;		
	//Заменено на:
		Если пИндекс<Объект[ИмяТЧ].Количество() Тогда 
			пСтрокаТЧ = Объект[ИмяТЧ][пИндекс];
		Иначе
			пСтрокаТЧ = Объект[ИмяТЧ].Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(пСтрокаТЧ, пСтрокаЗаполнения,,"Сумма");
		Если НЕ Объект.СуммаВключаетНДС Тогда 
			пСтрокаТЧ.Сумма = пСтрокаЗаполнения.СуммаБезНДС;
			пСтрокаТЧ.Всего = пСтрокаТЧ.Сумма + пСтрокаТЧ.СуммаНДС;
		Иначе
			пСтрокаТЧ.Сумма = пСтрокаЗаполнения.Сумма;
			пСтрокаТЧ.Всего = пСтрокаТЧ.Сумма;
		КонецЕсли;		
		
		Если пСтрокаТЧ.Свойство("Цена") Тогда 
			
			Если пСтрокаТЧ.Количество = 0 Тогда 
				пСтрокаТЧ.Количество = 1;
			КонецЕсли;
			
			пСтрокаТЧ.Цена = пСтрокаТЧ.Сумма/пСтрокаТЧ.Количество;
			
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-09 (#3141)			
				
		Если ИмяТЧ = "ОбъектыСтроительства" Тогда 
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-14 (#3141)
			//пСтрокаТЧ.ОбъектСтроительства = пСтрокаЗаполнения.ок_Аналитика_2;
			//Заменено на:
			Если ЗначениеЗаполнено(пСтрокаЗаполнения.ок_Аналитика_2) И
				 пСтрокаТЧ.ОбъектСтроительства <> пСтрокаЗаполнения.ок_Аналитика_2
			Тогда 
			
			    пСтрокаТЧ.ОбъектСтроительства = ОК_ОбщегоНазначения.ОпределитьОбъектСтроительстваОтносительноАналитикиБК(пСтрокаТЧ.ОбъектСтроительства, пСтрокаЗаполнения.ок_Аналитика_2);
				
			КонецЕсли;
			
			пСтрокаТЧ.СтатьяЗатрат = Неопределено;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-14 (#3141)			
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
			//пНайденнаяСтрока = пСоответствиеСтатей.Найти(пСтрокаЗаполнения.ок_СтатьяОборотов);
			СтркутураОтбора = Новый Структура();
			СтркутураОтбора.Вставить("СтатьяОборотов",		пСтрокаЗаполнения.ок_СтатьяОборотов);
			СтркутураОтбора.Вставить("ОсновноеСоответствие",Истина);
			пНайденныеСтроки = пСоответствиеСтатей.НайтиСтроки(СтркутураОтбора);
			Если пНайденныеСтроки.Количество() > 0 Тогда
				пНайденнаяСтрока = пНайденныеСтроки[0];
			Иначе
				СтркутураОтбора = Новый Структура();
				СтркутураОтбора.Вставить("СтатьяОборотов",		пСтрокаЗаполнения.ок_СтатьяОборотов);
				пНайденныеСтроки = пСоответствиеСтатей.НайтиСтроки(СтркутураОтбора);
				Если пНайденныеСтроки.Количество() = 1 Тогда
					пНайденнаяСтрока = пНайденныеСтроки[0];
				ИначеЕсли пНайденныеСтроки.Количество() > 1 Тогда
					ТекстСообшенияОбОшибках = "Для статьи оборотов «%1» найдено несколько сопоставлений статье %2.";
					ТекстСообшенияОбОшибках = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообшенияОбОшибках, пСтрокаЗаполнения.ок_СтатьяОборотов, "затрат");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообшенияОбОшибках);
					пНайденнаяСтрока = Неопределено;
				Иначе
					ТекстСообшенияОбОшибках = "Для статьи оборотов «%1» не найдено сопоставление статье %2. Необходимо обратиться в службу поддержки";
					ТекстСообшенияОбОшибках = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообшенияОбОшибках, пСтрокаЗаполнения.ок_СтатьяОборотов, "затрат");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообшенияОбОшибках);
					пНайденнаяСтрока = Неопределено;
				КонецЕсли;
			КонецЕсли; 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
			
			Если пНайденнаяСтрока<>Неопределено Тогда 
				пСтрокаТЧ.СтатьяЗатрат = пНайденнаяСтрока.СтатьяРегл;				
			КонецЕсли;		
			
		КонецЕсли;		
		
		пСтрокаТЧ.ок_Период = НачалоМесяца(пСтрокаТЧ.ок_Период);		
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-09 (#3141)
		Если ИмяТЧ = "Услуги" И
			(ЗначениеЗаполнено(пСтрокаТЧ.СчетЗатрат) ИЛИ
			ЗначениеЗаполнено(пСтрокаТЧ.СчетЗатратНУ))
			И (ЗначениеЗаполнено(пСтрокаТЧ.ок_ЦФО) ИЛИ
			ЗначениеЗаполнено(пСтрокаТЧ.ок_СтатьяОборотов) ИЛИ
			ЗначениеЗаполнено(пСтрокаТЧ.ок_Аналитика_2)) 			 
		Тогда 
		
			Если ЗначениеЗаполнено(пСтрокаТЧ.СчетЗатрат) Тогда 
				
				ЗаполнитьЗначенияСубконтоВСтрокеТЧ(пСтрокаТЧ,,пСоответствиеСтатей);		
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(пСтрокаТЧ.СчетЗатратНУ) Тогда 
				
				ЗаполнитьЗначенияСубконтоВСтрокеТЧ(пСтрокаТЧ,"НУ",пСоответствиеСтатей);		
				
			КонецЕсли;
			
		КонецЕсли;
		пИндекс = пИндекс+1;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-09 (#3141)
	КонецЦикла;	
			
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-10 (#3141)
Процедура ЗаполнитьЗначенияСубконтоВСтрокеТЧ(пСтрокаТЧ, БУНУ = "", пСоответствиеСтатей)
	
	пИндексСубконто = 1;
	
	Для Каждого ВидСубконтоСтрока Из пСтрокаТЧ["СчетЗатрат"+БУНУ].ВидыСубконто Цикл 
		
		ОписаниеТиповВидаСубконто = ВидСубконтоСтрока.ВидСубконто.ТипЗначения;
		
		Если ЗначениеЗаполнено(пСтрокаТЧ.ок_ЦФО) И
			ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.Подразделения")) 
		Тогда 
			пСтрокаТЧ["Субконто"+БУНУ+пИндексСубконто] = пСтрокаТЧ.ок_ЦФО;
		ИначеЕсли ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.ОбъектыСтроительства")) 
		Тогда 
			Если Не ЗначениеЗаполнено(пСтрокаТЧ.ок_Аналитика_2) Тогда 
				//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-09-17 (#ИСПРАВЛЕНИЕ_тестБП05)
				// При подобной "очистке" субконто очищался и тип, 
				// при повторном вызове процедуры объект строительства более не заполнялся, т.к. тип не соответствовал искомому
				//пСтрокаТЧ["Субконто"+БУНУ+пИндексСубконто] = Неопределено;	
				пСтрокаТЧ["Субконто"+БУНУ+пИндексСубконто] = ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка");																	
				//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-09-17 (#ИСПРАВЛЕНИЕ_тестБП05)
			Иначе
				пСтрокаТЧ["Субконто"+БУНУ+пИндексСубконто] = ОК_ОбщегоНазначения.ОпределитьОбъектСтроительстваОтносительноАналитикиБК(пСтрокаТЧ["Субконто"+БУНУ+пИндексСубконто], пСтрокаТЧ.ок_Аналитика_2);
			КонецЕсли;		
		ИначеЕсли ЗначениеЗаполнено(пСтрокаТЧ.ок_СтатьяОборотов) И 
			(ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) ИЛИ						
			ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.ПрочиеДоходыИРасходы")))
		Тогда 
		
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
			//пСтатья = Неопределено;
			//мНайденныеСтатьи = пСоответствиеСтатей.НайтиСтроки(Новый Структура("СтатьяОборотов,СтатьяПДР",пСтрокаТЧ.ок_СтатьяОборотов 
			//,ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.ПрочиеДоходыИРасходы"))));
			//Если мНайденныеСтатьи.Количество()>0 Тогда 
			//	пСтатья = мНайденныеСтатьи[0].Статья;																													 
			//КонецЕсли;	
			//
			//Если ЗначениеЗаполнено(пСтатья) Тогда 
			//	пСтрокаТЧ["Субконто"+БУНУ+пИндексСубконто] = пСтатья;
			//КонецЕсли;
			
			СтатьяПДиР = ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
			
			СтркутураОтбора = Новый Структура();
			СтркутураОтбора.Вставить("СтатьяОборотов",		пСтрокаТЧ.ок_СтатьяОборотов);
			СтркутураОтбора.Вставить("СтатьяПДР",			СтатьяПДиР);
			СтркутураОтбора.Вставить("ОсновноеСоответствие",Истина);
			пНайденныеСтроки = пСоответствиеСтатей.НайтиСтроки(СтркутураОтбора);
			Если пНайденныеСтроки.Количество() > 0 Тогда
				пНайденнаяСтрока = пНайденныеСтроки[0];
			Иначе
				СтркутураОтбора = Новый Структура();
				СтркутураОтбора.Вставить("СтатьяОборотов",	пСтрокаТЧ.ок_СтатьяОборотов);
				СтркутураОтбора.Вставить("СтатьяПДР",		СтатьяПДиР);
				пНайденныеСтроки = пСоответствиеСтатей.НайтиСтроки(СтркутураОтбора);
				Если пНайденныеСтроки.Количество() = 1 Тогда
					пНайденнаяСтрока = пНайденныеСтроки[0];
				ИначеЕсли пНайденныеСтроки.Количество() > 1 Тогда
					ТекстСообшенияОбОшибках = "Для статьи оборотов «%1» найдено несколько сопоставлений статье %2.";
					ТекстСообшенияОбОшибках = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообшенияОбОшибках, пСтрокаТЧ.ок_СтатьяОборотов, ?(СтатьяПДиР,"прочих доходов-расходов","затрат"));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообшенияОбОшибках);
					пНайденнаяСтрока = Неопределено;
				Иначе
					ТекстСообшенияОбОшибках = "Для статьи оборотов «%1» не найдено сопоставление статье %2. Необходимо обратиться в службу поддержки";
					ТекстСообшенияОбОшибках = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообшенияОбОшибках, пСтрокаТЧ.ок_СтатьяОборотов, ?(СтатьяПДиР,"прочих доходов-расходов","затрат"));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообшенияОбОшибках);
					пНайденнаяСтрока = Неопределено;
				КонецЕсли;
			КонецЕсли; 
			
			Если пНайденнаяСтрока <> Неопределено Тогда 
				пСтрокаТЧ["Субконто"+БУНУ+пИндексСубконто] = пНайденнаяСтрока.Статья;
			Иначе
				пСтрокаТЧ["Субконто"+БУНУ+пИндексСубконто] = Неопределено;
			КонецЕсли;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
			
		КонецЕсли;			
		
		пИндексСубконто = пИндексСубконто + 1;
		
	КонецЦикла;	
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-10 (#3141)

&НаКлиенте
Процедура ЗаполнитьПоУправленческимАналитикамОбъектыСтроительства(Команда)
	
	ИмяТЧ = "ОбъектыСтроительства";
	
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ);		
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьПоУправленческимАналитикамОбъектыСтроительства(Команда)
	
	ИмяТЧ = "ОбъектыСтроительства";
	
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ, Ложь);		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУправленческимАналитикамОборудование(Команда)
	
	ИмяТЧ = "Оборудование";
	
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ);		
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьПоУправленческимАналитикамОборудование(Команда)
	
	ИмяТЧ = "Оборудование";
	
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ, Ложь);		
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-07 (#3048)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
&НаКлиенте
Процедура ОтветПоЗаполнениюПериодаВТЧ(Результат, ДопПараметры) Экспорт

	Если Результат<>КодВозвратаДиалога.Да Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	пИменаНеобходимыхТаблиц = "Товары,Услуги,Оборудование,ОбъектыСтроительства,АгентскиеУслуги";
	мИменаТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пИменаНеобходимыхТаблиц,",");
		
	Для каждого пИмяТаблицы Из мИменаТаблиц Цикл
	    Для Каждого стрТЧ Из Объект[пИмяТаблицы] Цикл 
			стрТЧ.ок_Период = НачалоМесяца(Объект.ДатаВходящегоДокумента);
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАналитика2ПоСкладу()
	
	пИменаНеобходимыхТаблиц = "Товары,АгентскиеУслуги,Оборудование";
	мИменаТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пИменаНеобходимыхТаблиц,",");
	
	фКэшЗначений.Вставить("ОбъектПоСкладу", Объект.Склад.Объект);
		
	Для каждого пИмяТаблицы Из мИменаТаблиц Цикл
	    Для Каждого стрТЧ Из Объект[пИмяТаблицы] Цикл 
			стрТЧ.ок_Аналитика_2 = фКэшЗначений.ОбъектПоСкладу;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбъектСтроительстваДляАналитики2(ОбъектСтроительства)
	
	пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыСтроительства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	ОбъектыСтроительства.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ");
	пЗапрос.УстановитьПараметр("Ссылка",	ОбъектСтроительства);
	
	пРезультат = пЗапрос.Выполнить();
	
	Если пРезультат.Пустой() Тогда 
		Возврат ОбъектСтроительства;
	КонецЕсли;
	
	Выборка = пРезультат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	МетаданныеОбъекта = Метаданные.Документы.ПоступлениеТоваровУслуг;
	фКэшЗначений = Новый Структура;
			
	// Данные по дополнительным аналитикам
	фКэшЗначений.Вставить("НастройкиИзмерений"	  , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      	  , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	
	// Произвольные измерения
	фКэшЗначений.Вставить("Измерения"         	  , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));
	
	фКэшЗначений.Вставить("АналитикаНомерЗаявки"  , ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ"));
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		пНомерЗаявки = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Объект.Ссылка,
			фКэшЗначений.АналитикаНомерЗаявки, ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
		Если ЗначениеЗаполнено(пНомерЗаявки) Тогда 	
			фКэшЗначений.Вставить("НомерЗаявки",пНомерЗаявки);
		КонецЕсли;	
		  	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКэшЗначений()


&НаКлиенте
Процедура ЗаполнитьПоУправленческимАналитикамАгентскиеУслуги(Команда)
		
	ИмяТЧ = "АгентскиеУслуги";
	
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ);	
	
КонецПроцедуры


&НаКлиенте
Процедура ДозаполнитьПоУправленческимАналитикамАгентскиеУслуги(Команда)
	
	ИмяТЧ = "АгентскиеУслуги";
	
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ, Ложь);
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-14 (#3141)
&НаКлиенте
Процедура ОбъектыСтроительстваСтатьяЗатратПриИзменении(Элемент)
	
	пТекДанные = Элементы.ОбъектыСтроительства.ТекущиеДанные;
	Если ЗначениеЗаполнено(пТекДанные.СтатьяЗатрат) Тогда 
		стрРезультат = ПолучитьСтатьюОборотовНаСервере(пТекДанные.СтатьяЗатрат);
		Если стрРезультат.Свойство("Ошибки") Тогда 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(стрРезультат.Ошибки,,"Объект.ОбъектыСтроительства["+Объект.ОбъектыСтроительства.Индекс(Элементы.ОбъектыСтроительства.ТекущаяСтрока)+"].ок_СтатьяОборотов");
			пТекДанные.ок_СтатьяОборотов = ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка");
			
		ИначеЕсли стрРезультат.Свойство("СтатьяОборотов") Тогда 
			пТекДанные.ок_СтатьяОборотов = стрРезультат.СтатьяОборотов;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
&НаКлиенте
Процедура ОбъектыСтроительстваСтатьяЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.ОграничениеТипа <> Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат") Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат")
	КонецЕсли;
	СтатьяЗатратНачалоВыбораНаКлиенте(Элемент, СтандартнаяОбработка, "ОбъектыСтроительства", "СтатьяЗатрат"); 
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)

&НаКлиенте
Процедура ОбъектыСтроительстваок_СтатьяОборотовПриИзменении(Элемент)
	
	пТекДанные = Элементы.ОбъектыСтроительства.ТекущиеДанные;
	Если ЗначениеЗаполнено(пТекДанные.ок_СтатьяОборотов) Тогда 
		пТекДанные.СтатьяЗатрат = ПолучитьСтатьюЗатратНаСервере(пТекДанные.ок_СтатьяОборотов);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваАналитика_2ПриИзменении(Элемент)
	
	пТекДанные = Элементы.ОбъектыСтроительства.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(пТекДанные.ок_Аналитика_2) Тогда 
		
		//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-09-17 (#ИСПРАВЛЕНИЕ_тестБП05)
		// При подобной "очистке" субконто очищался и тип, 
		// при повторном вызове процедуры объект строительства более не заполнялся, т.к. тип не соответствовал искомому
		//пТекДанные.ОбъектСтроительства = Неопределено;
		пТекДанные.ОбъектСтроительства = ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка");																	
		//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-09-17 (#ИСПРАВЛЕНИЕ_тестБП05)

		Возврат;
	КонецЕсли;
	
	пТекДанные.ОбъектСтроительства = ОК_ОбщегоНазначения.ОпределитьОбъектСтроительстваОтносительноАналитикиБК(пТекДанные.ОбъектСтроительства, пТекДанные.ок_Аналитика_2);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатьюЗатратНаСервере(СтатьяОборотов);
	
	Возврат Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтатьяОборотов, фКэшЗначений);
			
КонецФункции

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-14 (#3141)

&НаСервереБезКонтекста
Функция ПолучитьСтатьюОборотовНаСервере(СтатьяЗатрат);
	
	Возврат ОК_ОбщегоНазначения.ПолучитьСтатьюОборотовНаСервере(СтатьяЗатрат);
			
КонецФункции

&НаКлиенте
Процедура Оборудованиеок_ПериодПриИзменении(Элемент)
	
	ПривестиКНачалуМесяцаПериод("Оборудование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиКНачалуМесяцаПериод(ИмяТЧ)
	
	ТекДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекДанные<>Неопределено Тогда 
		ТекДанные.ок_Период = НачалоМесяца(ТекДанные.ок_Период);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСтроительстваок_ПериодПриИзменении(Элемент)
	ПривестиКНачалуМесяцаПериод("ОбъектыСтроительства");
КонецПроцедуры

&НаКлиенте
Процедура Товарыок_ПериодПриИзменении(Элемент)
	ПривестиКНачалуМесяцаПериод("Товары");
КонецПроцедуры

&НаКлиенте
Процедура Услугиок_ПериодПриИзменении(Элемент)
	ПривестиКНачалуМесяцаПериод("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиок_ПериодПриИзменении(Элемент)
	ПривестиКНачалуМесяцаПериод("АгентскиеУслуги");
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-10 (#3141)
&НаКлиенте
Процедура УслугиАналитика_2ПриИзменении(Элемент)
	
	ЗаполнитьСубконтоПоАналитикеКлиент("ок_Аналитика_2");
		
КонецПроцедуры

&НаКлиенте
Процедура Услугиок_СтатьяОборотовПриИзменении(Элемент)
	
	ЗаполнитьСубконтоПоАналитикеКлиент("ок_СтатьяОборотов");
	
КонецПроцедуры

&НаКлиенте
Процедура Услугиок_ЦФОПриИзменении(Элемент)
	
	ЗаполнитьСубконтоПоАналитикеКлиент("ок_ЦФО");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСубконтоПоАналитикеКлиент(ИмяРеквизитаТЧ)
	
	Перем ЗначениеРеквизитаТЧ;
	
	ТекДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекДанные = Неопределено 
		 ИЛИ (Не ЗначениеЗаполнено(ТекДанные.СчетЗатрат) И
		 	  Не ЗначениеЗаполнено(ТекДанные.СчетЗатратНУ))
		 ИЛИ (ТекДанные.Свойство(ИмяРеквизитаТЧ,ЗначениеРеквизитаТЧ) И
		 	  Не ЗначениеЗаполнено(ЗначениеРеквизитаТЧ))
	Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.СчетЗатрат) Тогда 
		ЗаполнитьСубконтоПоАналитикеСервер(ИмяРеквизитаТЧ,ЗначениеРеквизитаТЧ,ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.СчетЗатратНУ) Тогда 
		ЗаполнитьСубконтоПоАналитикеСервер(ИмяРеквизитаТЧ,ЗначениеРеквизитаТЧ,ТекДанные.ПолучитьИдентификатор(), "НУ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСубконтоПоАналитикеСервер(ИмяРеквизитаТЧ,ЗначениеРеквизитаТЧ,ИДСтроки,БУНУ = "")
	
	ТекДанные = Объект.Услуги.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	пИндексСубконто = 1;
	
	Пока пИндексСубконто<=3 Цикл 
		Если ТипЗнч(ТекДанные["Субконто"+БУНУ+пИндексСубконто]) = ТипЗнч(ЗначениеРеквизитаТЧ) Тогда 
			Если ИмяРеквизитаТЧ = "ок_Аналитика_2" Тогда 					
				Если Не ЗначениеЗаполнено(ЗначениеРеквизитаТЧ) Тогда 
					//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-09-17 (#ИСПРАВЛЕНИЕ_тестБП05)
					// При подобной "очистке" субконто очищался и тип, 
					// при повторном вызове процедуры объект строительства более не заполнялся, т.к. тип не соответствовал искомому
					//ТекДанные["Субконто"+БУНУ+пИндексСубконто] = Неопределено;	
					ТекДанные["Субконто"+БУНУ+пИндексСубконто] = ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка");																	
					//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-09-17 (#ИСПРАВЛЕНИЕ_тестБП05)
				Иначе
					ТекДанные["Субконто"+БУНУ+пИндексСубконто] = ОК_ОбщегоНазначения.ОпределитьОбъектСтроительстваОтносительноАналитикиБК(ТекДанные["Субконто"+БУНУ+пИндексСубконто], ЗначениеРеквизитаТЧ);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеРеквизитаТЧ) = Тип("СправочникСсылка.бит_СтатьиОборотов") И
				(ТипЗнч(ЗначениеРеквизитаТЧ) = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ
				ТипЗнч(ЗначениеРеквизитаТЧ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы"))		
				Тогда
				ТекДанные["Субконто"+БУНУ+пИндексСубконто] = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(ЗначениеРеквизитаТЧ, фКэшЗначений, ТипЗнч(ЗначениеРеквизитаТЧ) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
				Прервать;			
			Иначе		
				ТекДанные["Субконто"+БУНУ+пИндексСубконто] = ЗначениеРеквизитаТЧ;
				Прервать;
			КонецЕсли;					
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)	
		ИначеЕсли ТипЗнч(ЗначениеРеквизитаТЧ) = Тип("СправочникСсылка.бит_СтатьиОборотов")
			И (ТипЗнч(ТекДанные["Субконто"+БУНУ+пИндексСубконто]) = Тип("СправочникСсылка.СтатьиЗатрат")
				ИЛИ ТипЗнч(ТекДанные["Субконто"+БУНУ+пИндексСубконто]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы"))
			Тогда
				ТекДанные["Субконто"+БУНУ+пИндексСубконто] = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(ЗначениеРеквизитаТЧ, фКэшЗначений, ТипЗнч(ТекДанные["Субконто"+БУНУ+пИндексСубконто]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
				Прервать;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)
		КонецЕсли;
		пИндексСубконто = пИндексСубконто + 1;
		
		
	КонецЦикла;
		
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-10 (#3141)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)


//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)

&НаКлиенте
Процедура ок_НомерЗаявкиПриИзменении(Элемент) Экспорт
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("УчетныйДокумент", Объект.Ссылка);
		
		ПараметрыДокумента.Вставить("ТипЗначенияУчетныйДокумент", ТипЗнч(Объект.Ссылка));
		
		ПараметрыДокумента.Вставить("ФВБУчетныйДокумент", Объект.ок_НомерЗаявки);
		ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ДополнитьПараметрыПроверкиСоответствияУчетногоДокументаИВходящегоЭД(ПараметрыДокумента); 
		
		Если Не ПараметрыДокумента.Свойство("ЭлектронныйДокумент") Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеОшибки = "";
		Если ПараметрыДокумента.ФВБУчетныйДокумент <> ПараметрыДокумента.ФВБЭлектронныйДокумент Тогда
		
			ОписаниеОшибки = "В документе номер заявки отличается от данных входящего ЭД  " + ПараметрыДокумента.ЭлектронныйДокумент + ".";
			
		КонецЕсли;	
		
		Если ОписаниеОшибки <> "" Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭДЗавершение", ЭтотОбъект, Новый Структура("Имя", "ок_НомерЗаявки")), ОписаниеОшибки + " Изменить номер заявки?", РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		 Объект.ок_НомерЗаявки = ЭтотОбъект.ок_ПредыдущийНомерЗаявки;
	КонецЕсли;	
	
	ЭтотОбъект.ок_ПредыдущийНомерЗаявки = Объект.ок_НомерЗаявки;
	
КонецПроцедуры	

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)

#Область _3414
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)

&НаКлиенте
Процедура ок_ТекстБумажныйДокументНажатие(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.ок_БумажныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ЭтотОбъект.ок_БумажныйДокумент);
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
#КонецОбласти

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-22 (#3713)
&НаСервереБезКонтекста
Функция ПолучитьСписокСтатейРеглСоответствующихСтатьеОборотов(СтатьяОборотов, ДобавитьГруппыСтатей = Ложь)
	
	СписокСтатейРегл = РегистрыСведений.бит_СтатьиОборотов_СтатьиРегл.ПолучитьСписокСтатейРеглСоответствующихСтатьеОборотов(СтатьяОборотов);
	
	Если ДобавитьГруппыСтатей Тогда	
		Для каждого ТекущаяСсылка Из СписокСтатейРегл Цикл
			Если ЗначениеЗаполнено(ТекущаяСсылка.Значение.Родитель)
				И СписокСтатейРегл.НайтиПоЗначению(ТекущаяСсылка.Значение.Родитель) = Неопределено Тогда
				СписокСтатейРегл.Добавить(ТекущаяСсылка.Значение.Родитель);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Возврат СписокСтатейРегл;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-22 (#3713)

//ОКЕЙ Рычаков А.С.(СофтЛаб) 2021-01-19 Начало (#3790)
&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcelТовары(Команда)
	
	ВыполнитьЗагрузкуИзExcel("Товары");
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcelУслуги(Команда)

	ВыполнитьЗагрузкуИзExcel("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcelОборудование(Команда)
	
	ВыполнитьЗагрузкуИзExcel("Оборудование");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcelОбъектыСтроительства(Команда)
	
	ВыполнитьЗагрузкуИзExcel("ОбъектыСтроительства");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcel(ТаблицаДействия)
	
	Если Объект[ТаблицаДействия].Количество() Тогда		
		ТекстВопроса = "ru = 'Данные будут перезаполнены. Продолжить?'";
		ДопПараметры = Новый Структура("ТаблицаДействия", ТаблицаДействия);
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьЗагрузкуИзExcelЗавершение", ЭтотОбъект, ДопПараметры)
						,НСтр(ТекстВопроса), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат; 		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ТекстВопроса = "ru = 'Для продолжения необходимо записать документ. Записать?'";
		ДопПараметры = Новый Структура("ТаблицаДействия", ТаблицаДействия);
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьЗагрузкуИзExcelЗаписьЗавершение", ЭтотОбъект, ДопПараметры)
						,НСтр(ТекстВопроса), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;	
	
	ВыполнитьЗагрузкуИзExcelОткрытьФорму(ТаблицаДействия);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcelЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	Объект[ДопПараметры.ТаблицаДействия].Очистить();
	
	Если Объект.Ссылка.Пустая() Тогда 
		ТекстВопроса = "ru = 'Для продолжения необходимо записать документ. Записать?'";
		ДопПараметры = Новый Структура("ТаблицаДействия", ДопПараметры.ТаблицаДействия);
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьЗагрузкуИзExcelЗаписьЗавершение", ЭтотОбъект, ДопПараметры)
						,НСтр(ТекстВопроса), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуИзExcelОткрытьФорму(ДопПараметры.ТаблицаДействия);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcelЗаписьЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	Если Записать() Тогда 	
		ВыполнитьЗагрузкуИзExcelОткрытьФорму(ДопПараметры.ТаблицаДействия);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcelОткрытьФорму(ТаблицаДействия)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиИзExcel", ЭтотОбъект
													,Новый Структура("ТаблицаДействия",ТаблицаДействия));
	ОткрытьФорму("Обработка.ок_ЗагрузкаИзExcelПТиУ.Форма.Форма",, ЭтаФорма, , , , ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗагрузкиИзExcel(Результат, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;

	ОбработатьРезультатЗагрузкиИзExcelНаСервере(Результат,ДопПараметры.ТаблицаДействия);	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗагрузкиИзExcelНаСервере(АдресВрХранилища,ТаблицаДействия)
	
	ТаблицаЗаполнения = ПолучитьИзВременногоХранилища(АдресВрХранилища);

	Если ТипЗнч(ТаблицаЗаполнения) <> Тип("ТаблицаЗначений") ИЛИ ТаблицаЗаполнения.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТаблицаЗаполнения[0].ФВБ) Тогда
		СформироватьДопАналитикуФВБ(ТаблицаЗаполнения[0].ФВБ);
		Объект.ОК_ID_Разноска = "";
	Иначе 
		Объект.ОК_ID_Разноска = ТаблицаЗаполнения[0].IDРазноски;
		Объект.ок_СтруктураПодчиненностиБК.Очистить();
		УдалитьДопАналитикуФВБ();
	КонецЕсли;	
	
	Для Каждого СтрокаЗаполнения Из ТаблицаЗаполнения Цикл 
		НоваяСтрока = Объект[ТаблицаДействия].Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаполнения);
	КонецЦикла;
	
	Если ТаблицаДействия = "ОбъектыСтроительства" Тогда 
		
		Для Каждого ТекСтрока Из Объект[ТаблицаДействия] Цикл 
			
			Если ЗначениеЗаполнено(ТекСтрока.ок_СтатьяОборотов) Тогда 
				ТекСтрока.СтатьяЗатрат = ПолучитьСтатьюЗатратНаСервере(ТекСтрока.ок_СтатьяОборотов);		
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ТаблицаДействия = "Услуги" Тогда 
		
		Для Каждого ТекСтрока Из Объект[ТаблицаДействия] Цикл 
			
			Если ТекСтрока.СчетЗатратНУ <> ТекСтрока.СчетЗатрат Тогда
				
				ТекСтрока.СчетЗатратНУ = ТекСтрока.СчетЗатрат;
				
				Для Индекс = 1 По 3 Цикл
					ТекСтрока["СубконтоНУ" + Индекс] = Неопределено;
				КонецЦикла;
				
			КонецЕсли;
			
			ПараметрыУстановкиСвойствСубконто = ПараметрыУстановкиСвойствСубконто(ЭтотОбъект); 
			
			БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект, ТекСтрока, ПараметрыУстановкиСвойствСубконто);
			
			БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
			ЭтотОбъект, ТекСтрока, ПараметрыУстановкиСвойствСубконтоНУ(ЭтотОбъект));
			
			ПоляОбъекта = ПараметрыУстановкиСвойствСубконто.ПоляОбъекта;
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекСтрока[ПоляОбъекта.СчетУчета]);
			
			Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
				Если ЗначениеЗаполнено(ПоляОбъекта["Субконто" + Индекс]) Тогда
					ТекСтрока[ПоляОбъекта["Субконто" + Индекс]] = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"].ПривестиЗначение(1);
				КонецЕсли;
			КонецЦикла;
	
			ЗаполнитьАналитику(ТекСтрока.НомерСтроки-1);
			
		КонецЦикла;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура СформироватьДопАналитикуФВБ(ФВБ)
	
	Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки");
	
	Если Не ЗначениеЗаполнено(Аналитика) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти аналитику по коду ""NЗаявки"".");
		Возврат;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект.Ссылка; 
	МенеджерЗаписи.Аналитика = Аналитика;
	МенеджерЗаписи.ЗначениеАналитики = ФВБ;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьДопАналитикуФВБ()
	
	Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки");
	
	Если Не ЗначениеЗаполнено(Аналитика) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти аналитику по коду ""NЗаявки"".");
		Возврат;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект.Ссылка; 
	МенеджерЗаписи.Аналитика = Аналитика;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда 
		МенеджерЗаписи.Удалить();
	КонецЕсли;	

КонецПроцедуры
//ОКЕЙ Рычаков А.С.(СофтЛаб) 2021-01-19 Конец (#3790)

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-21 (#4214)

&НаКлиенте
Процедура НадписьУведомлениеОВвозеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ПрослеживаемостьФормыКлиентБП.СоздатьПоказатьУведомления(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыОборудование

&НаКлиенте
Процедура ОборудованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОборудованиеРНПТ" Тогда
		ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар 
			И НЕ ПоставщикРезидентТаможенногоСоюза Тогда
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Оборудование");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ОборудованиеПрослеживаемыйТовар" Тогда
		ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
		Если ТекущиеДанные.ПрослеживаемыйТовар Тогда
			ПрослеживаемостьФормыКлиентБП.ПоказатьПредупреждениеПрослеживаемыйТовар();
		Конецесли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеНадписиУведомлениеОВвозе()
	
	ПрослеживаемостьФормыБП.УстановитьПредставлениеНадписиУведомлениеОВвозе(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Оборудование.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаОборудование Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Оборудование.НайтиПоИдентификатору(СтрокаОборудование);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриАктивизацииЯчейки(Элемент)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
	УстановитьДоступностьКнопокКопированияКолонокТЧ("Оборудование", Элементы.Оборудование);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
	
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНоваяСтрока Тогда
		
		ТекущаяКолонкаТаблицы = Элементы.Оборудование.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "ОборудованиеРНПТ" 
			И Не ЗначениеЗаполнено(ТекущиеДанные.РНПТ) Тогда
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Оборудование");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Оборудование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Оборудование.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар 
			И НЕ ПоставщикРезидентТаможенногоСоюза Тогда
			СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки));
			
			Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
				Объект.СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
			КонецЦикла;
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСтранаПроисхожденияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Оборудование.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Товары.НайтиПоИдентификатору(СтрокаТовары);
		Если ТекДанные <> Неопределено Тогда
			// Необходимо очистить дополнительные сведения
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИдентификаторСтроки = ТекДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
	УстановитьДоступностьКнопокКопированияКолонокТЧ("Товары", Элементы.Товары);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНоваяСтрока Тогда
		
		ТекущаяКолонкаТаблицы = Элементы.Товары.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыРНПТ" 
			И Не ЗначениеЗаполнено(ТекущиеДанные.РНПТ) Тогда
			ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРНПТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПрослеживаемостьФормыКлиентБП.ОткрытьФормуПодбораРНПТ(ЭтаФорма, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРНПТОчистка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ПрослеживаемыйТовар 
			И НЕ ПоставщикРезидентТаможенногоСоюза Тогда
			СтрокиСРНПТ = Объект.СведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки));
			
			Для Каждого СтрокаСРНПТ Из СтрокиСРНПТ Цикл
				Объект.СведенияПрослеживаемости.Удалить(СтрокаСРНПТ);
			КонецЦикла;
		Иначе
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		КонецЕсли;
		
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Необходимо очистить дополнительные сведения
		НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УдалитьСвязанныеЗаписи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораГТДНаКлиенте(ВыбранноеЗначение, ИмяТаблицы)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТаблицы].ТекущиеДанные;

	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Если в результате выбора пришло только значение,
		// то переложим его в структуру.
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
			ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
	КонецЕсли;

	ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРНПТНаКлиенте(ВыбранноеЗначение, ИмяТаблицы)
	
	СтрокаТабличнойЧасти = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторСтроки) Тогда
			СтрокаТабличнойЧасти.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ОбработкаВыбораРНПТНаСервере(СтрокаТабличнойЧасти.ИдентификаторСтроки, ВыбранноеЗначение);
		ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТНаСервере(ИдентификаторСтроки, ВыбранноеЗначение)	
	ПрослеживаемостьФормыБП.ОбработкаВыбораРНПТН(ЭтотОбъект, ИдентификаторСтроки, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьСвязанныеЗаписи()

	Если ТаблицаУдаленныхСтрок.Количество() > 0 Тогда
		УдалитьСвязанныеЗаписиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеЗаписиНаСервере()
	
	Для каждого СтрокаКлюча Из ТаблицаУдаленныхСтрок Цикл
		СтруктураОтбора = Новый Структура("ИдентификаторСтроки", СтрокаКлюча.ИдентификаторСтроки);
		МассивСтрокСведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТЧ Из МассивСтрокСведенияПрослеживаемости Цикл
			Объект.СведенияПрослеживаемости.Удалить(СтрокаТЧ);
		КонецЦикла;
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТоваров.Количество() > 0 Тогда
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокиТоваров[0]);

		КонецЕсли;
		СтрокиОборудование = Объект.Оборудование.НайтиСтроки(СтруктураОтбора);
		Если СтрокиОборудование.Количество() > 0 Тогда
			ПрослеживаемостьФормыКлиентСерверБП.ЗаполнитьПредставлениеРНПТ(ЭтаФорма, СтрокиОборудование[0]);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаУдаленныхСтрок.Очистить();
	
КонецПроцедуры

//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-04-26 (#ТП_БП05_ФР05)

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-07-25 (#4214)
&НаКлиенте
Процедура УПДПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ЭтотОбъект.Объект);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуПродавцыВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(ЭтотОбъект.Продавец, УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ПредставлениеУПДНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаПродавцы = ПоместитьТаблицуПродавцыВоВременноеХранилищеНаСервере();
	УчетНДСКлиент.ОткрытьФормуРеквизитовУПД(ЭтотОбъект, СтандартнаяОбработка, АдресХранилищаПродавцы);
	
КонецПроцедуры

//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-04-26 (#ТП_БП05_ФР05)
&НаКлиенте
Процедура Подключаемый_ПодотчетноеЛицоПриИзменении(Элемент)
	
	МассивИдентификаторовСтрок = Новый Массив;
	МассивИдентификаторовСтрок.Добавить(Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор());
	ок_ЗаполнитьОбъектИФункцию(МассивИдентификаторовСтрок);
	
КонецПроцедуры
&НаКлиенте
Процедура ок_ПерезаполнитьТЧУслуги()
	
	МассивИдентификаторовСтрок = Новый Массив;
	Для каждого СтрокаУслуги Из Объект.Услуги Цикл
		МассивИдентификаторовСтрок.Добавить(СтрокаУслуги.ПолучитьИдентификатор());
	КонецЦикла;  	
	ок_ЗаполнитьОбъектИФункцию(МассивИдентификаторовСтрок, Истина);

КонецПроцедуры

&НаСервере
Функция ок_ЗаполнитьОбъектИФункцию(МассивИдентификаторовСтрок, ОбновитьВсюТЧ = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	ФизическиеЛица = Новый Массив;
	Для каждого ИДСтроки Из МассивИдентификаторовСтрок Цикл
		СтрокаТЧ = Объект.Услуги.НайтиПоИдентификатору(ИДСтроки);
		ФизическиеЛица.Добавить(СтрокаТЧ.ок_ПодотчетноеЛицо);
	КонецЦикла;
	
	ОбъектИФункция = РегистрыСведений.ок_ДанныеФизическихЛицБОСС.ок_ПолучитьОбъектИФункцию(ФизическиеЛица, Объект.Организация, Объект.Дата);
	Для каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		СтрокаТЧ = Объект.Услуги.НайтиПоИдентификатору(ИДСтроки);
		СтрокаПоФизЛицу = ОбъектИФункция.Найти(СтрокаТЧ.Ок_ПодотчетноеЛицо, "ФизическоеЛицо");
		Если СтрокаПоФизЛицу<>Неопределено Тогда
		СтрокаТЧ.ок_ЦФО = СтрокаПоФизЛицу.Функция;
		СтрокаТЧ.ок_Аналитика_2 = СтрокаПоФизЛицу.Объект;
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетЗатрат) Тогда 
			ЗаполнитьСубконтоПоАналитикеСервер("ок_ЦФО",СтрокаТЧ.ок_ЦФО,ИДСтроки);
			ЗаполнитьСубконтоПоАналитикеСервер("ок_Аналитика_2",СтрокаТЧ.ок_Аналитика_2,ИДСтроки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетЗатратНУ) Тогда 
			ЗаполнитьСубконтоПоАналитикеСервер("ок_ЦФО",СтрокаТЧ.ок_ЦФО,ИДСтроки, "НУ");
			ЗаполнитьСубконтоПоАналитикеСервер("ок_Аналитика_2",СтрокаТЧ.ок_Аналитика_2,ИДСтроки, "НУ");
		КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-25 (#4214) 

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
//#Область Инициализация
//ЭтоНоваяСтрока = Ложь;
//#КонецОбласти
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-07-21 (#4214) 
#КонецОбласти

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
#Область Команды_ЗаполнитьКолонку

&НаКлиенте
Процедура ок_ЗаполнитьКолонку_Товары(Команда)

	ЗаполнитьКолонкуТЧ(ЭтаФорма, Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ЗаполнитьКолонку_Услуги(Команда)

	ЗаполнитьКолонкуТЧ(ЭтаФорма, Элементы.Услуги);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ЗаполнитьКолонку_АгентскиеУслуги(Команда)

	ЗаполнитьКолонкуТЧ(ЭтаФорма, Элементы.АгентскиеУслуги);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ЗаполнитьКолонку_Оборудование(Команда)

	ЗаполнитьКолонкуТЧ(ЭтаФорма, Элементы.Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ЗаполнитьКолонку_ОбъектыСтроительства(Команда)

	ЗаполнитьКолонкуТЧ(ЭтаФорма, Элементы.ОбъектыСтроительства);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокКопированияКолонокТЧ(ИмяТЧ, ТаблицаФормы)
	
	ок_ОбщегоНазначенияКлиент.УстановитьДоступностьКнопокКопированияКолонокТЧ(ЭтаФорма, Элементы["ок_ЗаполнитьКолонку_" + ИмяТЧ], ТаблицаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолонкуТЧ(Форма, ТаблицаФормы)

	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТЧ 			= ТаблицаФормы.Имя;
	ИмяКолонки 		= СтрЗаменить(НРег(ТаблицаФормы.ТекущийЭлемент.Имя), НРег(ИмяТЧ), "");
	ЗначениеКолонки	= ТекущиеДанные[ИмяКолонки];
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ИмяКолонки", 		ИмяКолонки);
	ПараметрыОповещения.Вставить("ЗначениеКолонки", ЗначениеКолонки);
	ПараметрыОповещения.Вставить("ИмяТЧ", 			ИмяТЧ);
	
	Оповещение 		= Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьКолонкуТЧ", ЭтотОбъект, ПараметрыОповещения);
	ТекстВопроса 	= НСтр("ru = 'Выбранное значение ""%1"" будет заполнено во всех строках табличной части ""%2"".
								|Продолжить выполнение операции?'");
	ТекстВопроса 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ЗначениеКолонки, ИмяТЧ, ИмяКолонки);
	Режим 			= РежимДиалогаВопрос.ДаНет;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьКолонкуТЧ(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	ИмяКолонки 		= НРег(Параметры.ИмяКолонки);
	ЗначениеКолонки = Параметры.ЗначениеКолонки;
	ИмяТЧ 			= НРег(Параметры.ИмяТЧ);
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		СтрокаТЧ[ИмяКолонки] = ЗначениеКолонки;
		
		// Активируем изменяемую строку табличного поля, для того что бы обновить данные в значении свойства "ТекущиеДанные"
		// это необходимо делать, т.к. связанные события используют значение из свойства "ТекущиеДанные" табличного поля
		ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
		Элементы[ИмяТЧ].ТекущаяСтрока = ИдентификаторСтроки;
		
		Если ИмяТЧ = НРег("Товары") Тогда
		
			Если ИмяКолонки = НРег("Количество") Тогда
			
				ТоварыКоличествоПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("Цена") Тогда
				
				ТоварыЦенаПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("СтавкаНДС") Тогда
				
				ТоварыСтавкаНДСПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("СчетУчета") Тогда
				
				ТоварыСчетУчетаПриИзменении(Неопределено);
				
			КонецЕсли; 
			
		ИначеЕсли ИмяТЧ = НРег("Услуги") Тогда
		
			Если ИмяКолонки = НРег("Количество") Тогда
			
				УслугиКоличествоПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("Цена") Тогда
				
				УслугиЦенаПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("СтавкаНДС") Тогда
				
				УслугиСтавкаНДСПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("СчетЗатрат") Тогда
				
				СтрокаТЧ.СчетЗатратНУ = ЗначениеКолонки;
				
				КоличествоСубконтоБУ = 3; //Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;
				НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(СтрокаТЧ[ИмяКолонки], КоличествоСубконтоБУ);
				бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(СтрокаТЧ, НастройкиСубконто, "Субконто");
				бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(СтрокаТЧ, НастройкиСубконто, "СубконтоНУ");
				
				УслугиСчетЗатратПриИзменении(Неопределено);
				
			КонецЕсли; 
			
		ИначеЕсли ИмяТЧ = НРег("АгентскиеУслуги") Тогда
		
			Если ИмяКолонки = НРег("Количество") Тогда
			
				АгентскиеУслугиКоличествоПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("Цена") Тогда
				
				АгентскиеУслугиЦенаПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("СтавкаНДС") Тогда
				
				АгентскиеУслугиСтавкаНДСПриИзменении(Неопределено);
				
			КонецЕсли; 
			
		ИначеЕсли ИмяТЧ = НРег("Оборудование") Тогда
		
			Если ИмяКолонки = НРег("Количество") Тогда
			
				ОборудованиеКоличествоПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("Цена") Тогда
				
				ОборудованиеЦенаПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("СтавкаНДС") Тогда
				
				ОборудованиеСтавкаНДСПриИзменении(Неопределено);
				
			КонецЕсли; 
			
		ИначеЕсли ИмяТЧ = НРег("ОбъектыСтроительства") Тогда
		
			Если ИмяКолонки = НРег("СтавкаНДС") Тогда
				
				ОбъектыСтроительстваСтавкаНДСПриИзменении(Неопределено);
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяТЧ = НРег("Товары") Тогда
		
		ТоварыПриИзменении(Неопределено);
		
	ИначеЕсли ИмяТЧ = НРег("Услуги") Тогда
	
		УслугиПриИзменении(Неопределено);
		
	ИначеЕсли ИмяТЧ = НРег("АгентскиеУслуги") Тогда
	
		АгентскиеУслугиПриИзменении(Неопределено);
		
	ИначеЕсли ИмяТЧ = НРег("Оборудование") Тогда
	
		ОборудованиеПриИзменении(Неопределено);
		
	ИначеЕсли ИмяТЧ = НРег("ОбъектыСтроительства") Тогда
		
		ОбъектыСтроительстваПриИзменении(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область Инициализация

ЭтоНоваяСтрока = Ложь;

#КонецОбласти
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
