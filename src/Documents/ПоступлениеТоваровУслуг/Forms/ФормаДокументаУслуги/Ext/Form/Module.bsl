// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ЭтоНоваяСтрока;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоступлениеТоваровУслугФормы.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
		
	УстановитьВидимостьСчетовУчета();
	
	УстановитьУсловноеОформление();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
		
	//izhtc alena 17.08.2015(
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.ПоступлениеТоваровУслуг.ФормаДокументаУслуги");
	Если Объект.Ссылка.Пустая() Тогда 
		//Ванюков К. + // для пользователей ОКЕЯ реквизит «Зачет авансов» автоматически принимет значение «Не зачитывать» // 2012-03-26
		ОК_ОбщегоНазначения.УстановитьСпособЗачетаАвансов(Объект.СпособЗачетаАвансов);
		//Ванюков К. -
	КонецЕсли;	
	ОК_ИзменитьСвойстваПолейФормы();
	//izhtc alena 17.08.2015)		
		
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ПоступлениеТоваровУслуг",
		"ФормаДокументаУслуги",
		НСтр("ru='Новости: Поступление (акт, накладная)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиБП.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	// бит_Финанс изменения кода. Начало.
	бит_ПриСозданииНаСервереЗавершение();
	// бит_Финанс добавление кода. Конец.
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
	ЗаполнитьКэшЗначений();
	пИменаНеобходимыхТаблиц = "Товары,Услуги,Оборудование,ОбъектыСтроительства";
	мИменаТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пИменаНеобходимыхТаблиц,",");
		
	Для каждого пИмяТаблицы Из мИменаТаблиц Цикл
		
		// Отображение дополнительных измерений в табличных полях.
		бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	, пИмяТаблицы
																	, фКэшЗначений.ИзмеренияДоп
																	, фКэшЗначений.НастройкиИзмерений);
	КонецЦикла;                                              	
																	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)	
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-17 (#3758)
	ОбновитьДоступностьID_Разноска();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-17 (#3758)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПоставщика.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеСчетаЗатрат" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			ОригиналПолучен = ЕстьОригиналДокумента(Объект.Организация, Объект.Ссылка);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ДоговорыКонтрагентов" И Объект.ДоговорКонтрагента = Источник Тогда
		
		ТребуетсяПерерасчитатьСрокОплаты =
			ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты;
			
		Если ТребуетсяПерерасчитатьСрокОплаты Тогда
			ОбновитьСрокОплатыНаСервере();
		КонецЕсли;
		

	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	//Начало_бит_Магомедов_01.08.2013
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//Конец_бит_Магомедов_01.08.2013
	//izhtc alena 09/10/2015(
	УстановитьВидимость();
	//izhtc alena 09/10/2015)	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеТоваровУслугФормы.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормыКлиент.ПередЗаписью(
		ЭтаФорма, Отказ, ПараметрыЗаписи);
			
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПоступлениеТоваровУслугФормы.ПослеЗаписиНаСервере(
		ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
		
	УстановитьСостояниеДокумента();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	РаботаСДоговорамиКонтрагентовБП.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ТекущийОбъект.ДоговорКонтрагента,
		ТекущийОбъект.Ссылка)
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	//БИТ Тртилек 07.12.11
	Если  ТекущийОбъект.Модифицированность() = Истина Тогда
		Для Каждого СтрокаТЧ ИЗ ТекущийОбъект.Услуги Цикл
			Если ТипЗнч(СтрокаТЧ.Субконто1) = Тип("СправочникСсылка.РасходыБудущихПериодов") И СтрокаТЧ.Субконто1 <> Справочники.РасходыБудущихПериодов.ПустаяСсылка() Тогда
				РБПОбъект = СтрокаТЧ.Субконто1.ПолучитьОбъект();
				Если ТипЗнч(РБПОбъект.бит_Субконто1) = Тип ("СправочникСсылка.Контрагенты") И ТипЗнч(РБПОбъект.бит_Субконто2) = Тип ("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Если РБПОбъект.бит_Субконто1 <> ТекущийОбъект.Контрагент ИЛИ РБПОбъект.бит_Субконто2 <> ТекущийОбъект.ДоговорКонтрагента Тогда
						РБПОбъект.бит_Субконто1 = ТекущийОбъект.Контрагент;
						РБПОбъект.бит_Субконто2 = ТекущийОбъект.ДоговорКонтрагента;
						РБПОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	///БИТ Тртилек 07.12.11
	
	//Ванюков К. + // Проверка заполненности ОК_РазнесениеОборотов // 2012-01-25
	ОК_ОбщегоНазначения.ПроверитьЗаполнениеОК_РазнесениеОборотов(ТекущийОбъект, ПараметрыЗаписи.РежимЗаписи, Отказ);
	//Ванюков К. -
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПоступлениеТоваровУслугФормы.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормы.ПриЗаписиНаСервере(
		ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоступлениеТоваровУслугФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)
	
	ПоступлениеТоваровУслугФормыКлиент.НомерВходящегоДокументаПриИзменении(ЭтаФорма, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И НЕ Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
	пОповещениеОтветПоЗаполнениюПериодаВТЧ = Новый ОписаниеОповещения("ОтветПоЗаполнениюПериодаВТЧ",ЭтотОбъект);
	ПоказатьВопрос(пОповещениеОтветПоЗаполнениюПериодаВТЧ, НСтр("ru = 'Дата вх. документа будет установлена в поле ""Период"" табличной части документа. Продолжить?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	ДатаПриИзмененииНаКлиенте();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
	//Начало_бит_Магомедов_01.08.2013
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//Конец_бит_Магомедов_01.08.2013	
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораКонтрагенты");

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		ДоговорКонтрагентаПриИзмененииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	ПоступлениеТоваровУслугФормыКлиент.ПорядокУчетаРасчетовНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка, АдресХранилищаЗачетАвансов);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)

	ПоступлениеТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)
	
	ПоступлениеТоваровУслугФормыКлиент.НомерСчетаФактурыПолученногоПриИзменении(ЭтаФорма, Элемент);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
	УстановитьДоступностьКнопокКопированияКолонокТЧ("Услуги", Элементы.Услуги);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
	
	ОбновитьИтоги(ЭтаФорма);
	
	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//izhtc alena 17.08.2015)
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "УслугиАналитикаУчета" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриАктивизацииЯчейки(Элемент)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
	УстановитьДоступностьКнопокКопированияКолонокТЧ("Услуги", Элементы.Услуги);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)
	
	Если Элементы.Услуги.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.Услуги.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "УслугиАналитикаУчета"
			И НЕ Элементы.Услуги.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.Услуги.ТекущаяСтрока;
			ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ЭтоНоваяСтрока = НоваяСтрока;

	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы	= Элементы.Услуги.ТекущиеДанные;
	СтрокаТаблицы.ОтражениеВУСН	= ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, Ложь);
	СтрокаТаблицы.АналитикаУчета = "<...>";

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтаФорма);
	ИначеЕсли Объект.НДСНеВыделять Тогда
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.СтавкаНДС) тогда
			ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
		КонецЕсли;
	КонецЕсли;

	ЭтоНоваяСтрока = Ложь;

	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ОбновитьИтоги(ЭтаФорма);
	
	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//izhtc alena 17.08.2015)	

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = ПоступлениеТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиУслугиНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчета", ТекущиеДанные.АналитикаУчета);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчетаЗаполнена", ТекущиеДанные.АналитикаУчетаЗаполнена);
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
		
	УслугиНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы,
		ПараметрыОбработки.ДанныеОбъекта,
		ПараметрыОбработки.СчетаУчетаКЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)	
	ЗаполнитьАналитику(ТекущиеДанные.НомерСтроки - 1);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)	

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораНоменклатура");

КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСодержаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	РаботаСНоменклатуройКлиент.СодержаниеПриИзменении(ТекущиеДанные, ТекущаяДатаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги", 1, ПрименяютсяСтавки4и2);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги", ПрименяютсяСтавки4и2);
	РаботаСДоговорамиКонтрагентовБПКлиент.НастроитьСпособЗаполненияСтавкиНДС(ЭтотОбъект, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Услуги.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)

	ПоступлениеТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Услуги", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ПоступлениеТоваровУслугФормыКлиент.ЗарегистрироватьСчетФактуру(ЭтаФорма, Команда);	
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-14 (#3758)
&НаКлиенте
Процедура ЗаполнитьIDИзЗаявкиНаДоговор(Команда)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-03 (#4046)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите договор контрагента"); 
		Возврат;
		
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-03 (#4046)
	
	СтруктураПараметрыВыбора = Новый Структура;
	СтруктураПараметрыВыбора.Вставить("РежимВыбора",		Истина);
	СтруктураПараметрыВыбора.Вставить("МножественныйВыбор",	Ложь);
	СтруктураПараметрыВыбора.Вставить("ЗакрыватьПриВыборе",	Истина);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-02 (#4046)
	//СтруктураОтбора = Новый Структура();
	//СтруктураОтбора.Вставить("Контрагент",			Объект.Контрагент);
	//СтруктураОтбора.Вставить("ДоговорКонтрагента",	Объект.ДоговорКонтрагента);
	//
	//СтруктураПараметрыВыбора.Вставить("Отбор",	СтруктураОтбора);
	//
	//ЗаявкаНаДоговорФормаВыбора = ПолучитьФорму("Документ.рс_ЗаявкаНаДоговор.Форма.ФормаВыбораУправляемая", СтруктураПараметрыВыбора, Этаформа);
	//ЗаявкаНаДоговорФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии", ЭтаФорма);
	//
	//МассивДоступныхПолей = Новый Массив;
	//МассивДоступныхПолей.Добавить("дата");
	//МассивДоступныхПолей.Добавить("номер");
	//МассивДоступныхПолей.Добавить("организация");
	//МассивДоступныхПолей.Добавить("контрагент");
	//МассивДоступныхПолей.Добавить("договорконтрагента");
	//МассивДоступныхПолей.Добавить("сумма");
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-22 (#4017)
	//МассивДоступныхПолей.Добавить(НРег("ЦФО"));
	//МассивДоступныхПолей.Добавить(НРег("СтатьяОборотов"));
	//МассивДоступныхПолей.Добавить(НРег("ID"));
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-22 (#4017)
	//
	//Для каждого Список_ТекущийЭлемент Из ЗаявкаНаДоговорФормаВыбора.Элементы.Список.ПодчиненныеЭлементы Цикл
	//	
	//	Если МассивДоступныхПолей.Найти(НРег(Список_ТекущийЭлемент.Имя)) = Неопределено Тогда
	//		Список_ТекущийЭлемент.Видимость = Ложь;
	//	КонецЕсли; 
	//
	//КонецЦикла; 
	//
	//ЗаявкаНаДоговорФормаВыбора.Открыть();
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
		СтруктураПараметрыВыбора.Вставить("ДатаНачала",		НачалоМесяца(Объект.ДатаВходящегоДокумента));
		СтруктураПараметрыВыбора.Вставить("ДатаОкончания",	КонецМесяца(Объект.ДатаВходящегоДокумента));
	ИначеЕсли ЗначениеЗаполнено(Объект.Дата) Тогда
		СтруктураПараметрыВыбора.Вставить("ДатаНачала",		НачалоМесяца(Объект.Дата));
		СтруктураПараметрыВыбора.Вставить("ДатаОкончания",	КонецМесяца(Объект.Дата));
	Иначе
		СтруктураПараметрыВыбора.Вставить("ДатаНачала",		НачалоМесяца(ТекущаяДата()));
		СтруктураПараметрыВыбора.Вставить("ДатаОкончания",	КонецМесяца(ТекущаяДата()));
	КонецЕсли;
	
	ЗаявкаНаДоговорФормаВыбора = ПолучитьФорму("Документ.рс_ЗаявкаНаДоговор.Форма.ФормаВыбораУправляемая_Дерево", СтруктураПараметрыВыбора, Этаформа);
	ЗаявкаНаДоговорФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии", ЭтаФорма); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Организация",
		Объект.Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Контрагент",
		Объект.Контрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"ДоговорКонтрагента",
		Объект.ДоговорКонтрагента,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-05 (#4111)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Проведен",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-05 (#4111) 
	
	ЗаявкаНаДоговорФормаВыбора.Открыть();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-02 (#4046)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-02 (#4046)
	//СтруктураЗначенийРеквизитов = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РезультатЗакрытия, "ID");
	//Объект.ОК_ID_Разноска = СтруктураЗначенийРеквизитов.ID;
	
	ВыбраннаяЗаявкаНаДоговор = Неопределено;
	Если ТипЗнч(РезультатЗакрытия) = Тип("КлючСтрокиДинамическогоСписка") Тогда
		
		Для каждого КлючЗначение Из РезультатЗакрытия Цикл
			
			Если КлючЗначение.Ключ = "Ссылка"
				И ТипЗнч(КлючЗначение.Значение) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
			
				ВыбраннаяЗаявкаНаДоговор = КлючЗначение.Значение;
			
			КонецЕсли;
		
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Если РезультатЗакрытия.ИмяГруппировки = "Ссылка"
			И ТипЗнч(РезультатЗакрытия.Ключ) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
		
			ВыбраннаяЗаявкаНаДоговор = РезультатЗакрытия.Ключ;
			
		ИначеЕсли РезультатЗакрытия.РодительскаяГруппировка <> Неопределено Тогда 
			
			ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии(РезультатЗакрытия.РодительскаяГруппировка, ДополнительныеПараметры);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
		
		ВыбраннаяЗаявкаНаДоговор = РезультатЗакрытия;
		
	КонецЕсли;  
	
	Если ВыбраннаяЗаявкаНаДоговор <> Неопределено Тогда
	
		СтруктураЗначенийРеквизитов = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВыбраннаяЗаявкаНаДоговор, "ID");
		Объект.ОК_ID_Разноска = СтруктураЗначенийРеквизитов.ID;
	
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-02 (#4046)
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьID_Разноска() Экспорт
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Элементы.Найти("ОК_ID_Разноска") = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4145)
	Элементы.ОК_ID_Разноска.ТолькоПросмотр = Истина;
	Возврат;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4145)
	
	МассивДокументовРасчета = Новый Массив();
	МассивДокументовРасчета.Добавить(Объект.Ссылка);
	
	СтатусыЗаявокДляИсключений = Новый Массив();
	СтатусыЗаявокДляИсключений.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Оплачена"));
	
	Элементы.ОК_ID_Разноска.ТолькоПросмотр = РегистрыБухгалтерии.Хозрасчетный.ПроверитьНаличиеСозданногоДокументаЗнРДСВСтатусе(МассивДокументовРасчета,,СтатусыЗаявокДляИсключений);	
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-14 (#3758)

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт

	ОбновитьИтоги(ЭтаФорма);
	
	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//izhtc alena 17.08.2015)	

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ОригиналПолучен = ЕстьОригиналДокумента(Объект.Организация, Объект.Ссылка);
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		и ЗначениеЗаполнено(Объект.Контрагент)
		и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтаФорма);
	ИначеЕсли ВестиУчетПоДоговорам И ПоступлениеТоваровУслугФормы.ДоступноСозданиеОсновногоДоговораПоВидуОперации(Объект.ВидОперации) Тогда
		ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
	УстановитьФакторинговуюКомпаниюПоОрганизации();
	
	УстановитьПараметрыПоДоговору();
	
	УстановитьПараметрыВыбора();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);

	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
	ОбновитьИтоги(ЭтаФорма);
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтаФорма);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьВидимость();
	
	ПоступлениеТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФакторинговуюКомпаниюПоОрганизации()

	Если Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) ИЛИ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем факторинговую компанию и договор факторинга.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Владелец
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией)";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Объект.Контрагент = Выборка.Владелец;
			Объект.ДоговорКонтрагента = Выборка.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыПоДоговору()

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, 
			"ВидДоговора, ВалютаВзаиморасчетов, УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2, ВидАгентскогоДоговора, ЭлектронныеУслуги");
		ВидДоговора           = РеквизитыДоговора.ВидДоговора;
		ЭтоКомиссия           = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		ЭтоКомиссияНаЗакупку  = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
		УчетАгентскогоНДС     = РеквизитыДоговора.УчетАгентскогоНДС;
		ВидАгентскогоДоговора = РеквизитыДоговора.ВидАгентскогоДоговора;
		ВалютаВзаиморасчетов  = РеквизитыДоговора.ВалютаВзаиморасчетов;
		РасчетыВУЕ            = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
		ПрименяютсяСтавки4и2  = РеквизитыДоговора.НДСПоСтавкам4и2;
		ЭлектронныеУслуги     = РеквизитыДоговора.ЭлектронныеУслуги;
	Иначе
		ВидДоговора           = Неопределено;
		ЭтоКомиссияНаЗакупку  = Ложь;
		УчетАгентскогоНДС     = Ложь;
		РасчетыВУЕ            = Ложь;
		ПрименяютсяСтавки4и2  = Ложь;
		ЭлектронныеУслуги     = Ложь;
	КонецЕсли;

	СпособЗаполненияСтавкиНДС = РаботаСДоговорамиКонтрагентовБП.СпособЗаполненияСтавкиНДСПоДоговору(
		Объект.ДоговорКонтрагента);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора()

	МассивВидовДоговоров = Новый ФиксированныйМассив(ПолучитьМассивВидовДоговоров());

	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));
	
	ПоступлениеТоваровУслугФормы.ПараметрыВыбораПоВидуОперации(НовыйМассивПараметров, Объект.ВидОперации);

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДоговоров() Экспорт

	СписокВидовДоговоров = Новый Массив;

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга") Тогда
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией"));
	Иначе
		СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		
		Если ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров Тогда
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
		//izhtc alena 17.08.2015(
		бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
		//izhtc alena 17.08.2015)		
	КонецЕсли;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьТребуетсяСчетФактура(ЭтаФорма);
	
	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетовУчета() Экспорт
	
	// В форме услуг параметры выбора счетов учета не используются.
	// Процедура необходима для совместимости с другими формами документа.
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС                     = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19        = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ПлательщикНалогаНаПрибыль         = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПрименениеУСН                     = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПрименениеУСНДоходы               = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	СпособОценкиТоваровВРознице       = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры   = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	РаздельныйУчетНДСНаСчете19        = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ЕстьВалютныйУчет                  = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров = 
										ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров");
	ИспользуетсяПланированиеПлатежей  = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейПоставщикам");
	ВестиУчетПоДоговорам              = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ОбратноеНачислениеНДС             = БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	НадоИнициализировать = Ложь;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ОбщееПроинициализировано") Тогда
		НадоИнициализировать = Истина;
	КонецЕсли;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ПрименяютсяСтавки4и2Проинициализировано") Тогда
		НадоИнициализировать = Истина;
	КонецЕсли;
	
	Если НадоИнициализировать Тогда
		Форма.УстановитьУсловноеОформлениеДокумента();
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-10 (#3048)
	УстановитьУОДопАналитик(Форма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-10 (#3048)	

КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-10 (#3048)
&НаСервереБезКонтекста
Процедура УстановитьУОДопАналитик(Форма)
		
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();  
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиПериод");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиЦФО");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтатьяОборотов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Услугиок_Проект");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиАналитика_2");
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда 
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Иначе 
		пНомерЗаявки = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Форма.Объект.Ссылка,
									   	   ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ"), ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", ЗначениеЗаполнено(пНомерЗаявки));
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-10 (#3048)

&НаСервере
Процедура ОбновитьУсловноеОформлениеНаСервере() Экспорт

	Если ТипЗнч(НастройкиУсловногоОформления) = Тип("Структура") Тогда
		// При смене вида операции процедура вызывается из общего модуля 
		// ПоступлениеТоваровУслугФормы раньше, чем отработает 
		// УстановитьУсловноеОформление(). Поэтому вызываем обновление только
		// тогда, когда структура НастройкиУсловногоОформления уже была инициализирована.
		ОбновитьУсловноеОформление(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДокумента() Экспорт

	Если НЕ НастройкиУсловногоОформления.Свойство("ОбщееПроинициализировано") Тогда
		УстановитьУсловноеОформлениеОбщее();
	КонецЕсли;
	
	Если НЕ НастройкиУсловногоОформления.Свойство("ПрименяютсяСтавки4и2Проинициализировано") Тогда
		УстановитьУсловноеОформлениеПрименяютсяСтавки4и2();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбщее()

	НастройкиУсловногоОформления.Вставить("ОбщееПроинициализировано", Истина);


	// УслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// УслугиАналитикаУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиАналитикаУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Услуги.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Скрыть НДС при применении УСН доходы

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиВсего");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСНеВыделять", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПрименяютсяСтавки4и2()

	Если НЕ ПрименяютсяСтавки4и2 Тогда
		Возврат;
	КонецЕсли;

	НастройкиУсловногоОформления.Вставить("ПрименяютсяСтавки4и2Проинициализировано", Истина);


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС18_118);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '4 %'"));


	// УслугиСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УслугиСтавкаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПрименяютсяСтавки4и2", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Услуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС10_110);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '2 %'"));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		Объект.НДСНеВыделять,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
	
	УчетНДСКлиентСервер.НастроитьПолеПродавецПоСчетуФактуре(
		Элементы.Продавец,
		Форма.ЭтоКомиссияНаЗакупку);
	
	Элементы.ИтогиВсегоНДС.Видимость 		= Не Объект.НДСНеВыделять;
	
	ПоступлениеТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);	
	
	ЭтоУслугиФакторинга = 
		(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга"));
	Элементы.УслугиКоличество.Видимость       = НЕ ЭтоУслугиФакторинга;
	Элементы.УслугиЦена.Видимость             = НЕ ЭтоУслугиФакторинга;
	Элементы.СчетНаОплатуПоставщика.Видимость = НЕ ЭтоУслугиФакторинга;
		
	Элементы.ДоговорКонтрагента.Доступность = 
		ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
		
	ЗаполнитьСписокВыбораСтавокНДС(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(Форма)

	Элементы = Форма.Элементы;
	
	СписокВыбораСтавок = Элементы.УслугиСтавкаНДС.СписокВыбора;
	СписокВыбораСтавок.Очистить();
	
	Если Форма.ПрименяютсяСтавки4и2 Тогда
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		
	Иначе
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ПоказыватьКонтрагентаСчетаФактуры = (НЕ ЗначениеЗаполнено(ЭтаФорма.СчетФактура)) И ЭтоКомиссияНаЗакупку;
	Если Элементы.Продавец.Видимость <> ПоказыватьКонтрагентаСчетаФактуры Тогда
		Элементы.Продавец.Видимость = ПоказыватьКонтрагентаСчетаФактуры;
	КонецЕсли;
	
	//СБ Ванюков К.+ // Вывести подразделение указанное в договоре, на форму
	Если Элементы.Найти("НадписьПодразделениеДоговора")<>Неопределено Тогда 
		Если не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) тогда
			Элементы.НадписьПодразделениеДоговора.Заголовок = "";
		ИначеЕсли Найти(Строка(Объект.ДоговорКонтрагента.Подразделение),"Объект не найден") > 0 тогда
			Элементы.НадписьПодразделениеДоговора.Заголовок = "";
		Иначе 
			Элементы.НадписьПодразделениеДоговора.Заголовок = Объект.ДоговорКонтрагента.Подразделение
		КонецЕсли;
	КонецЕсли;
	//СБ Ванюков К.+ // Установить видимость элементов связанных с ID_Разноска
	Если Элементы.Найти("ОК_ID_Разноска")<>Неопределено Тогда 
		Элементы.ОК_ID_Разноска.Видимость 							= Не Объект.ОК_ID_ВТЧ;
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
		//Элементы.ОК_РазнесениеОборотов.Видимость 					= Не Объект.ОК_ID_ВТЧ;
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)
		
		Элементы.УслугиОК_ID_Разноска.Видимость 			= Объект.ОК_ID_ВТЧ;
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
		//Элементы.УслугиОК_РазнесениеОборотов.Видимость 	= Объект.ОК_ID_ВТЧ;
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)
	КонецЕсли;
	//СБ Ванюков К.-	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	ПоступлениеТоваровУслугФормы.УслугиНоменклатураПриИзменении(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсего    = Объект.Услуги.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Услуги.Итог("СуммаНДС");
	
	//БИТ Тртилек 30082013 обновим суммы для связанных документов
	Форма.бит_ИтоговаяСумма = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Объект.бит_ДокументыСобственныхКонтрагентов.Итог("бит_Сумма"));
	Форма.бит_ИтоговаяСуммаБезНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Объект.бит_ДокументыСобственныхКонтрагентов.Итог("бит_СуммаБезНДС"));
	///БИТ Тртилек	

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ОрганизацияПриИзменении(ЭтаФорма);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	ТребуетсяПерерасчитатьСрокОплаты = 
		ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты И (НачалоДня(Объект.Дата) <> НачалоДня(ТекущаяДатаДокумента));
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера ИЛИ ТребуетсяПерерасчитатьСрокОплаты Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.ДатаПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	ПоступлениеТоваровУслугФормы.КонтрагентПриИзменении(ЭтаФорма);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьВидимость();

КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ПоступлениеТоваровУслугФормы.ДоговорКонтрагентаПриИзменении(ЭтаФорма);
	//Ванюков К. + // для пользователей ОКЕЯ реквизит «Зачет авансов» автоматически принимет значение «Не зачитывать» // 2012-03-26
	ОК_ОбщегоНазначения.УстановитьСпособЗачетаАвансов(Объект.СпособЗачетаАвансов);
	//Ванюков К. -	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьВидимость();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	ЗаполнитьДобавленныеКолонкиСтрокиАналитикиУчета(СтрокаТаблицы, ПараметрыОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС",               Объект.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("НДСВключенВСтоимость",           Объект.НДСВключенВСтоимость);
	ПараметрыОбъекта.Вставить("ПлательщикНалогаНаПрибыль",      Форма.ПлательщикНалогаНаПрибыль);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                  Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПрименениеУСНДоходы",            Форма.ПрименениеУСНДоходы);
	ПараметрыОбъекта.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("УчетАгентскогоНДС",              Форма.УчетАгентскогоНДС);
	ПараметрыОбъекта.Вставить("РаздельныйУчетНДСНаСчете19",     Форма.РаздельныйУчетНДСНаСчете19);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиАналитикиУчета(ДанныеСтроки, Знач ПараметрыОбъекта)

	АналитикаУчетаТекст 	= "";
	АналитикаУчетаЗаполнена = Истина;

	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	СтроковыеПредставленияСубконто = Новый Структура();
	
	Если ДанныеСтроки.Свойство("СчетЗатрат") Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетЗатрат) Тогда
			СвойстваСчета 		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетЗатрат);
			
			АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + СвойстваСчета.Код;
			
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.ПодразделениеЗатрат) Тогда
					ТекстСтроки 			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ПодразделениеЗатрат, "Наименование");
					АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", " + ТекстСтроки;
				Иначе
					АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
				КонецЕсли;
			КонецЕсли;
			
			Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл
				ЗначениеСубконто = ДанныеСтроки["Субконто" + Н];
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					ПредставлениеСубконто = "";
					ТипСубконто = ТипЗнч(ЗначениеСубконто);
					Если ИспользоватьОднуНоменклатурнуюГруппу И ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						Продолжить;
					ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
					ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
					Иначе
						ПредставлениеСубконто = Строка(ЗначениеСубконто);
					КонецЕсли;
					
					СтроковыеПредставленияСубконто.Вставить("ЗначениеСубконто" + Н, ЗначениеСубконто);
					СтроковыеПредставленияСубконто.Вставить("ПредставлениеСубконто" + Н, ПредставлениеСубконто);
					
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ПредставлениеСубконто;
				Иначе
					АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
			АналитикаУчетаЗаполнена = Ложь;
		КонецЕсли;
	КонецЕсли;

	// СчетУчетаНДС - до затрат НУ, т.к. аналитика НУ чаще всего совпадает с БУ
	Если ДанныеСтроки.Свойство("СчетУчетаНДС") Тогда
		Если ПараметрыОбъекта.НДСВключенВСтоимость
			И НЕ ПараметрыОбъекта.УчетАгентскогоНДС
			И НЕ ПараметрыОбъекта.РаздельныйУчетНДСНаСчете19 Тогда
			// в этих случаях счет учета НДС не показывается
		Иначе
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДС) Тогда
				СвойстваСчета 		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДС);
				АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + СвойстваСчета.Код;
			Иначе
				Если ДанныеСтроки.СуммаНДС <> 0 Тогда
					АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
					АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("СпособУчетаНДС") Тогда
		Если ПараметрыОбъекта.РаздельныйУчетНДСНаСчете19 Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.СпособУчетаНДС) Тогда
				АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + Строка(ДанныеСтроки.СпособУчетаНДС);
			Иначе
				Если ДанныеСтроки.СуммаНДС <> 0 Тогда
					АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
					АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// СчетУчетаЗатратНУ
	Если ДанныеСтроки.Свойство("СчетЗатратНУ") Тогда
		Если ПараметрыОбъекта.ПлательщикНалогаНаПрибыль Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетЗатратНУ) Тогда
				СвойстваСчетаНУ 	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетЗатратНУ);
				
				АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + СвойстваСчетаНУ.Код;
				
				Для Н = 1 По СвойстваСчетаНУ.КоличествоСубконто Цикл
					
					ЗначениеСубконтоНУ 	= ДанныеСтроки["СубконтоНУ" + Н];
					
					Если ЗначениеЗаполнено(ЗначениеСубконтоНУ) Тогда

						ПредставлениеСубконтоНУ = "";
						
						// Если совпадает с субконто БУ, то представление выводим как для БУ.
						ЗначениеСубконтоБУ = Неопределено;
						Если СтроковыеПредставленияСубконто.Свойство("ЗначениеСубконто" + Н, ЗначениеСубконтоБУ) Тогда
							Если ЗначениеСубконтоБУ = ЗначениеСубконтоНУ Тогда
								ПредставлениеСубконтоНУ = СтроковыеПредставленияСубконто["ПредставлениеСубконто" + Н];
							КонецЕсли;
						КонецЕсли;
						
						Если ПустаяСтрока(ПредставлениеСубконтоНУ) Тогда
							ТипСубконто = ТипЗнч(ЗначениеСубконтоНУ);
							Если ИспользоватьОднуНоменклатурнуюГруппу И ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
								Продолжить;
							ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
								ПредставлениеСубконтоНУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконтоНУ, "Представление");
							ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
								ПредставлениеСубконтоНУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконтоНУ, "Представление");
							Иначе
								ПредставлениеСубконтоНУ = Строка(ЗначениеСубконтоНУ);
							КонецЕсли;
						КонецЕсли;
					
						АналитикаУчетаТекст = АналитикаУчетаТекст + ", " + ПредставлениеСубконтоНУ;
					
					Иначе
						АналитикаУчетаТекст = АналитикаУчетаТекст + ", <...>";
					КонецЕсли;
					
				КонецЦикла;

			Иначе
				АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
				АналитикаУчетаЗаполнена = Ложь;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	// ОтражениеВУСН
	Если НЕ ПараметрыОбъекта.ПрименениеУСН
		ИЛИ ПараметрыОбъекта.ПрименениеУСНДоходы Тогда	
		// в этих случаях ОтражениеВУСН не требуется
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.ОтражениеВУСН) Тогда
		    АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", " + Строка(ДанныеСтроки.ОтражениеВУСН);
		Иначе
			АналитикаУчетаТекст 	= АналитикаУчетаТекст + ", <...>";
			АналитикаУчетаЗаполнена = Ложь;
		КонецЕсли;
	КонецЕсли;

	ДанныеСтроки.АналитикаУчета 			= Сред(АналитикаУчетаТекст, 3);
	ДанныеСтроки.АналитикаУчетаЗаполнена 	= АналитикаУчетаЗаполнена;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	ПоступлениеТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС,
		ПрименяютсяСтавки4и2);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//izhtc alena 17.08.2015)	

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	ПоступлениеТоваровУслугФормы.ОбработкаВыбораПорядокУчетаРасчетов(ЭтаФорма, ВыбранноеЗначение);

	ЗаполнитьДобавленныеКолонкиТаблиц();

КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ДанныеСтроки 	= Объект.Услуги.НайтиПоИдентификатору(ВыбранноеЗначение);
			
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",       ТолькоПросмотр);
	ПараметрыФормы.Вставить("ДатаДокумента",        Объект.Дата);
	ПараметрыФормы.Вставить("Организация",          Объект.Организация);
	ПараметрыФормы.Вставить("СчетУчетаНДС",         ДанныеСтроки.СчетУчетаНДС);
	ПараметрыФормы.Вставить("СпособУчетаНДС",       ДанныеСтроки.СпособУчетаНДС);
	ПараметрыФормы.Вставить("СуммаНДС",             ДанныеСтроки.СуммаНДС);
	ПараметрыФормы.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	ПараметрыФормы.Вставить("УчетАгентскогоНДС",    УчетАгентскогоНДС);
	ПараметрыФормы.Вставить("ОтражениеВУСН",        ДанныеСтроки.ОтражениеВУСН);
	
	ПараметрыФормы.Вставить("СчетЗатрат",          ДанныеСтроки.СчетЗатрат);
	ПараметрыФормы.Вставить("ПодразделениеЗатрат", ДанныеСтроки.ПодразделениеЗатрат);
	ПараметрыФормы.Вставить("Субконто1",           ДанныеСтроки.Субконто1);
	ПараметрыФормы.Вставить("Субконто2",           ДанныеСтроки.Субконто2);
	ПараметрыФормы.Вставить("Субконто3",           ДанныеСтроки.Субконто3);
	ПараметрыФормы.Вставить("СчетЗатратНУ",        ДанныеСтроки.СчетЗатратНУ);
	ПараметрыФормы.Вставить("СубконтоНУ1",         ДанныеСтроки.СубконтоНУ1);
	ПараметрыФормы.Вставить("СубконтоНУ2",         ДанныеСтроки.СубконтоНУ2);
	ПараметрыФормы.Вставить("СубконтоНУ3",         ДанныеСтроки.СубконтоНУ3);
	ПараметрыФормы.Вставить("Номенклатура",        ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("Контрагент",          Объект.Контрагент);
	ПараметрыФормы.Вставить("ДоговорКонтрагента",  Объект.ДоговорКонтрагента);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСчетаЗатрат", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение)

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	ДанныеСтроки = Новый Структура("Сумма, СчетУчетаНДС, СуммаНДС, СпособУчетаНДС,
		|СчетЗатрат, Субконто1, Субконто2, Субконто3,
		|СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3,
		|ПодразделениеЗатрат, ОтражениеВУСН,
		|Всего, АналитикаУчета, АналитикаУчетаЗаполнена");
		
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыбранноеЗначение);
	ДанныеСтроки.Сумма 		= ТекущиеДанные.Сумма;
	ДанныеСтроки.СуммаНДС 	= ТекущиеДанные.СуммаНДС;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(ДанныеСтроки, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки, , "Сумма, СуммаНДС");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ТабличнаяЧасть)

	ТекстВопроса = "Заполнить документ по счету?";
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);

	Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоСчетуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоСчетуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработкаЗаполненияПоСчетуНаСервере(ДополнительныеПараметры.ВыбранноеЗначение, ДополнительныеПараметры.ТабличнаяЧасть);
	Иначе
		Объект.СчетНаОплатуПоставщика = ДополнительныеПараметры.ВыбранноеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	ПоступлениеТоваровУслугФормы.ОбработкаЗаполненияПоСчету(ЭтаФорма, ВыбранноеЗначение, ТабличнаяЧасть);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПоставщикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоступлениеТоваровУслугФормыКлиент.ОткрытьФормуВыбораСчетаНаОплату(ЭтаФорма, "Услуги");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСрокОплатыНаСервере()
	
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("УслугиАналитикаУчета");
	
	// Поле формы ПорядокУчетаРасчетов содержит счета и другие реквизиты.
	// Поэтому видимостью этого поля управляем в УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов()
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция ЕстьОригиналДокумента(Знач Организация, Знач Ссылка)
	
	Возврат (РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус =
		Перечисления.СтатусыДокументовПоступления.ОригиналПолучен);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	ДобавленныеСтроки = ПоступлениеТоваровУслугФормы.ОбработкаВыбораПодборВставкаИзБуфера(ЭтаФорма, ВыбранноеЗначение, ИмяТаблицы);
	
	Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Услуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыУслуги(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//izhtc alena 17.08.2015)	

КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Услуги";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("Содержание");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("СтавкаНДС");
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах И ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
		
		СписокСвойств.Добавить("СчетЗатрат");
		СписокСвойств.Добавить("ПодразделениеЗатрат");
		СписокСвойств.Добавить("Субконто1");
		СписокСвойств.Добавить("Субконто2");
		СписокСвойств.Добавить("Субконто3");
		СписокСвойств.Добавить("СчетЗатратНУ");
		СписокСвойств.Добавить("СубконтоНУ1");
		СписокСвойств.Добавить("СубконтоНУ2");
		СписокСвойств.Добавить("СубконтоНУ3");
		СписокСвойств.Добавить("СчетУчетаНДС");
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.УслугиВставитьСтроки.Доступность					 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область бит_МодификацияФормы

// бит_Финанс изменения кода. Начало:
// Расширение функционала обраотчика "ПриСозданииНаСервере".
//
&НаСервере
Процедура бит_ПриСозданииНаСервереЗавершение()

	Если НЕ ПравоДоступа("Просмотр", Метаданные.Документы.бит_РасходнаяПозиция) Тогда
		Возврат;	
	КонецЕсли; 
	
	ПолеРасходнаяПозиция			= Элементы.Вставить("бит_РасходнаяПозиция", Тип("ПолеФормы"), Элементы.ГруппаПодвал, Элементы.ГруппаКомментарийОтветственный); 
	ПолеРасходнаяПозиция.Вид		= ВидПоляФормы.ПолеВвода;
	ПолеРасходнаяПозиция.ПутьКДанным= "Объект.бит_РасходнаяПозиция";
	ПолеРасходнаяПозиция.Подсказка	= НСтр("ru = 'Ссылка на связанный документ ""Расходная позиция"", для формирования структуры подчиненности.'");

КонецПроцедуры // бит_Финанс изменения кода. Конец.

#КонецОбласти

//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
//Ванюков К. + // При вводе ID разноски программа должна найти документ разнесения оборотов // 2012-01-25
//&НаКлиенте
//Процедура ОК_ID_РазноскаПриИзменении(Элемент) Экспорт 
//	
//	ОК_РазнесениеОборотов = ОК_ОбщегоНазначения.НайтиРазнесениеОборотовПоID(Объект.ОК_ID_Разноска);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОК_ID_РазноскаПриТЧИзменении(Элемент) Экспорт 
//	
//	ТекущийЭлемент.ТекущаяСтрока.ОК_РазнесениеОборотов = ОК_ОбщегоНазначения.НайтиРазнесениеОборотовПоID(Элемент.Значение);
//	
//КонецПроцедуры
//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)

//Ванюков К. + // При покупке билетов через бюджетный контроль у одного документа может быть несколько ID. в таких случаях вводится ID в табличной части "Услуги" // 2012-01-25
&НаКлиенте
Процедура ОК_ID_ВТЧПриИзменении(Элемент) Экспорт 
	
	УстановитьВидимость();
	
	Если Объект.ОК_ID_ВТЧ Тогда 
		Для Каждого СтрокаТЧ из Объект.Услуги Цикл 
			СтрокаТЧ.ОК_ID_Разноска				= Объект.ОК_ID_Разноска;
			//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
			//СтрокаТЧ.ОК_РазнесениеОборотов		= Объект.ОК_РазнесениеОборотов;
			//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)
		КонецЦикла;
		ОК_ID_Разноска							= "";
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
	    //ОК_РазнесениеОборотов					= ПредопределенноеЗначение("Документ.;
		//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)
	Иначе 
		Для Каждого СтрокаТЧ из Объект.Услуги Цикл 
			СтрокаТЧ.ОК_ID_Разноска				= "";
			//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется(
			//СтрокаТЧ.ОК_РазнесениеОборотов		= Документы.бит_БК_РазнесениеОборотов.ПустаяСсылка();
			//1c-izhtc alena 11.08.2015 ОК_РазнесениеОборотов не используется)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//БИТ Тртилек 22082013
&НаКлиенте
Процедура ПодборДокументовНажатие(Команда)
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("РеализацияТоваровУслуг", "Реализация товаров и услуг");
	СписокТипов.Добавить("ОперацияБух", "Операция (бухгалтерский и налоговый учет)");	
	СписокТипов.Добавить("ПередачаОС", "Передача ОС");	        //ОК Довбешка Т.  17.04.2015
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлементаПодборДокументов", ЭтаФорма);
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, "Выберите вид документа");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлементаПодборДокументов(ВыбранныйЭлемент, СписокПараметров) Экспорт
    Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
	КонецЕсли;
	АдресТаблицы = ПослеВыбораЭлементаПодборДокументовСервер(ВыбранныйЭлемент.Значение);
	Если АдресТаблицы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ФормаДокументов = ПолучитьФорму("ОбщаяФорма.бит_ФормаПодбораСобственныхКонтрагентов", Новый Структура("АдресТЗТаблицаДокументов", АдресТаблицы));
	Парарара = ОткрытьФорму("ОбщаяФорма.бит_ФормаПодбораСобственныхКонтрагентов",,ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПослеВыбораЭлементаПодборДокументовСервер(ВыбранноеЗначение)
	НашЗапрос = СформироватьЗапросДляСобственныхКонтрагентов(ВыбранноеЗначение);
	
	Если НашЗапрос =ЛОЖЬ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документы сформированы не будут");
		Возврат Неопределено;
	КонецЕсли;
				
	ТЗТаблицаДокументов = НашЗапрос.Выполнить().Выгрузить();
	Возврат ПоместитьВоВременноеХранилище(ТЗТаблицаДокументов);
КонецФункции



&НаСервере
Функция  СформироватьЗапросДляСобственныхКонтрагентов(ТипДокумента)
	
	Запрос = Новый Запрос;
	Если ТипДокумента = "РеализацияТоваровУслуг" Тогда 
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Организация = &Организация
		|	И РеализацияТоваровУслуг.Контрагент В ИЕРАРХИИ(&Контрагент)
		|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
		|	И РеализацияТоваровУслуг.Склад = &Склад
		|	И НЕ РеализацияТоваровУслуг.Ссылка В
		|				(ВЫБРАТЬ
		|					ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи
		|				ИЗ
		|					Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
		|				ГДЕ
		|					НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		|				ИЗ
		|					Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
		|				ГДЕ
		|					НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка)
		|	И НЕ РеализацияТоваровУслуг.Ссылка В (&МассивТекДокументовПередачи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Ссылка,
		|	СУММА(Данные.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_СуммаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Документы.Ссылка КАК Ссылка,
		|		ЕСТЬNULL(РеализацияТоваровУслугТовары.СуммаНДС, 0) КАК СуммаНДС
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугТовары.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Документы.Ссылка,
		|		ЕСТЬNULL(РеализацияТоваровУслугУслуги.СуммаНДС, 0)
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугУслуги.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Документы.Ссылка,
		|		ЕСТЬNULL(РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС, 0)
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
		|			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугАгентскиеУслуги.Ссылка) КАК Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Документы.Ссылка КАК Документ,
		|	ВТ_Документы.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ВТ_Документы.Ссылка.СуммаДокумента - ВТ_СуммаНДС.СуммаНДС КАК СуммаБезНДС,
		|	ЛОЖЬ КАК Выбрать
		|ИЗ
		|	ВТ_Документы КАК ВТ_Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДС КАК ВТ_СуммаНДС
		|		ПО ВТ_Документы.Ссылка = ВТ_СуммаНДС.Ссылка";
		
    //ОК Довбешка Т. 16.04.2015
	ИначеЕсли ТипДокумента = "ПередачаОС" Тогда 
		Запрос.Текст = "ВЫБРАТЬ
		|	ПередачаОС.Ссылка
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	Документ.ПередачаОС КАК ПередачаОС
		|ГДЕ
		|	ПередачаОС.Организация = &Организация
		|	И ПередачаОС.Контрагент В ИЕРАРХИИ(&Контрагент)
		|	И ПередачаОС.Проведен = ИСТИНА
		|	И НЕ ПередачаОС.Ссылка В (&МассивТекДокументовПередачи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Ссылка,
		|	СУММА(Данные.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_СуммаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Документы.Ссылка КАК Ссылка,
		|		ЕСТЬNULL(ПередачаОС.СуммаНДС, 0) КАК СуммаНДС
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаОС.ОС КАК ПередачаОС
		|			ПО ВТ_Документы.Ссылка = ПередачаОС.Ссылка) КАК Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Документы.Ссылка КАК Документ,
		|	ВТ_Документы.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ВТ_Документы.Ссылка.СуммаДокумента - ВТ_СуммаНДС.СуммаНДС КАК СуммаБезНДС,
		|	ЛОЖЬ КАК Выбрать
		|ИЗ
		|	ВТ_Документы КАК ВТ_Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДС КАК ВТ_СуммаНДС
		|		ПО ВТ_Документы.Ссылка = ВТ_СуммаНДС.Ссылка";
    //ОК Довбешка Т.
			
	ИначеЕсли ТипДокумента = "ОперацияБух" Тогда 
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
		               |	0 КАК СуммаБезНДС,
		               |	ЛОЖЬ КАК Выбрать,
		               |	ХозрасчетныйДвиженияССубконто.Регистратор.СуммаОперации КАК СуммаДокумента
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		               |			&ДатаНач,
		               |			&ДатаКон,
		               |			Регистратор ССЫЛКА Документ.ОперацияБух
		               |				И Регистратор.ПометкаУдаления = ЛОЖЬ
		               |				И Организация = &Организация
		               |				И ВЫБОР
		               |					КОГДА ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
		               |						ТОГДА Субконто1 В (&Контрагент)
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |				И ВЫБОР
		               |					КОГДА ВидКорСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства)
		               |						ТОГДА КорСубконто1 В ИЕРАРХИИ (&Объект)
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ,
		               |			,
		               |			) КАК ХозрасчетныйДвиженияССубконто
		               |ГДЕ
		               |	НЕ ХозрасчетныйДвиженияССубконто.Регистратор В
		               |				(ВЫБРАТЬ
		               |					ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		               |		
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |				ВЫБРАТЬ
		               |					ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка)
		               |	И НЕ ХозрасчетныйДвиженияССубконто.Регистратор В (&МассивТекДокументовПередачи)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ХозрасчетныйДвиженияССубконто.Регистратор,
		               |	ХозрасчетныйДвиженияССубконто.Регистратор.СуммаОперации";
	КонецЕсли;	
		//Найдем встречную организацию
	ОтборПоКонтрагенту = Новый Структура("Контрагент, ВидСвязи");
	ОтборПоКонтрагенту.Контрагент = Объект.Контрагент;
	ОтборПоКонтрагенту.ВидСвязи = Перечисления.бит_ВидыСобственныхКонтрагентов.Организация;
	
	НаборЗаписейВстречныхОрганизаций = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборПоКонтрагенту, "бит_СобственныеКонтрагенты");
	
	Если НаборЗаписейВстречныхОрганизаций.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(НаборЗаписейВстречныхОрганизаций[0].Объект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для контрагента: " + Объект.Контрагент.Наименование + " не указана организация в регистре ""Собственные контрагенты"". Подбор не возможен", СтатусСообщения.Важное);
		Возврат ЛОЖЬ;
	Иначе
		ВстречнаяОрганизация = НаборЗаписейВстречныхОрганизаций[0].Объект;
	КонецЕсли;
	
	//Найдем встречные контрагенты
	ЗапросВстречныхКонтрагентов = Новый Запрос;
	ЗапросВстречныхКонтрагентов.Текст = "ВЫБРАТЬ
	                                    |	бит_СобственныеКонтрагенты.Контрагент
	                                    |ИЗ
	                                    |	РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты
	                                    |ГДЕ
	                                    |	бит_СобственныеКонтрагенты.Объект = &Организация
	                                    |	И бит_СобственныеКонтрагенты.ВидСвязи = &ВидСвязи";
	ЗапросВстречныхКонтрагентов.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросВстречныхКонтрагентов.УстановитьПараметр("ВидСвязи", Перечисления.бит_ВидыСобственныхКонтрагентов.Организация);
	
	РезультатЗапросаВстерчныхКонтрагентов = ЗапросВстречныхКонтрагентов.Выполнить();
	
	Если Не РезультатЗапросаВстерчныхКонтрагентов.Пустой() Тогда
		МассивВстречныхКонтрагентов = РезультатЗапросаВстерчныхКонтрагентов.Выгрузить().ВыгрузитьКолонку("Контрагент");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для организации: " + Объект.Организация.Наименование + " не найдены контрагенты в регистре ""Собственные контрагенты"". Подбор не возможен", СтатусСообщения.Важное);
		Возврат ЛОЖЬ
	КонецЕсли;
				   
	Запрос.УстановитьПараметр("Контрагент"   , МассивВстречныхКонтрагентов);				   
	Запрос.УстановитьПараметр("Организация"  , ВстречнаяОрганизация);
	Запрос.УстановитьПараметр("Склад"        , Объект.Склад);
	Запрос.УстановитьПараметр("Объект"       , Объект.Склад.Объект);
	Запрос.УстановитьПараметр("ДатаНач"      , НачалоДня(ДобавитьМесяц(Объект.Дата, -12)));
	Запрос.УстановитьПараметр("ДатаКон"      , КонецДня(Объект.Дата));
	
	МассивТекДокументовПередачи = Объект.бит_ДокументыСобственныхКонтрагентов.Выгрузить().ВыгрузитьКолонку("ДокументРеализацииПередачи");
	Запрос.УстановитьПараметр("МассивТекДокументовПередачи",МассивТекДокументовПередачи);
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	Возврат Запрос;
	
КонецФункции

//Начало_бит_Магомедов_01.08.2013
&НаКлиенте
Процедура бит_УстановитьВидимостьРеализацияУСобственногоЮЛ()
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
КонецПроцедуры

&НаСервере
Процедура бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер()
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-25 (#3878)
	Если Элементы.Найти("бит_РеализацияУСобственногоЮЛ") = Неопределено
		ИЛИ Элементы.Найти("ГруппаСтраницы") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-25 (#3878)
	//БИТ Тртилек 11072013 установим видимость страницы Релаизация у собств ЮЛ
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ВидимостьРеализации =  ДокументОбъект.УстановитьВидимостьРеализацияУСобственногоЮЛ();
	Элементы.ГруппаСтраницы.Видимость = ВидимостьРеализации;
	Если ВидимостьРеализации Тогда 
		Элементы.Переместить(Элементы.Услуги, Элементы.СтраницаУслуги);
	КонецЕсли;
	Элементы.бит_РеализацияУСобственногоЮЛ.Видимость = ВидимостьРеализации;
	///БИТ Тртилек
КонецПроцедуры

&НаКлиенте
Процедура бит_ТабличноеПолеДокументыСобственныхКонтрагентовПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные;
	
	Если ТекущиеДанные<>Неопределено Тогда 
		Если ТипЗнч(ТекущиеДанные.ДокументРеализацииПередачи) = Тип("ДокументСсылка.ОперацияБух") Тогда 
			Элементы.бит_Сумма.ТолькоПросмотр = Истина;
			Элементы.бит_Сумма.Доступность = Ложь;
			Элементы.бит_СуммаБезНДС.ТолькоПросмотр = Ложь;
			Элементы.бит_СуммаБезНДС.Доступность = Истина;
		//ОК Довбешка Т.  17.04.2015
		ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументРеализацииПередачи) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
			ИЛИ ТипЗнч(ТекущиеДанные.ДокументРеализацииПередачи) = Тип("ДокументСсылка.ПередачаОС") Тогда 
		//ОК Довбешка Т.
			Элементы.бит_Сумма.ТолькоПросмотр = Истина;
			Элементы.бит_СуммаБезНДС.ТолькоПросмотр = Истина;
			Элементы.бит_Сумма.Доступность = Ложь;
			Элементы.бит_СуммаБезНДС.Доступность = Ложь;
		Иначе
			Элементы.бит_Сумма.ТолькоПросмотр = Ложь;
			Элементы.бит_Сумма.Доступность = Истина;
			Элементы.бит_СуммаБезНДС.ТолькоПросмотр = Ложь;
			Элементы.бит_СуммаБезНДС.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//БИТ Тртилек 22082013 обработчик события ПриИзменении поля ввода Документ реализации поступления
&НаКлиенте
Процедура бит_ТабличноеПолеДокументыСобственныхКонтрагентовДокументРеализацииПередачиПриИзменении(Элемент)
	ДокументРеализацииПередачи = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДокументРеализацииПередачи;
	Если ЗначениеЗаполнено(ДокументРеализацииПередачи) Тогда
		
		ДокументСсылка = ДокументРеализацииПередачи;
		ТипДокумента = ТипЗнч(ДокументСсылка);
		РеквизитыДокумента = ПолучитьРеквизитыДокумента(ДокументСсылка);
		//ОК Довбешка Т.  16.04.2015
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = ?((ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") или ТипДокумента = Тип("ДокументСсылка.ПередачаОС")), РеквизитыДокумента.СуммаДокумента, РеквизитыДокумента.СуммаОперации);		
		//ОК Довбешка Т.
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДатаДокументаРеализацииПередачи = РеквизитыДокумента.Дата;
		Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			СуммаНДС =  РеквизитыДокумента.ТоварыСуммаНДС + РеквизитыДокумента.УслугиСуммаНДС;
			Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_СуммаБезНДС = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма - СуммаНДС;
		//ОК Довбешка Т.  16.04.2015
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаОС") Тогда
			СуммаНДС =  РеквизитыДокумента.ОССуммаНДС;
			Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_СуммаБезНДС = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма - СуммаНДС;
		//ОК Довбешка Т.
		КонецЕсли;
		
	Иначе
		
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = 0;
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДатаДокументаРеализацииПередачи = '00010101';
		
	КонецЕсли;
	ОбновитьИтоги(ЭтаФорма);
	//izhtc alena 17.08.2015(
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//izhtc alena 17.08.2015)
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыДокумента(ВыбранныйДокумент)
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Дата", ВыбранныйДокумент.Дата);
	Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		РеквизитыДокумента.Вставить("СуммаДокумента", ВыбранныйДокумент.СуммаДокумента);
		РеквизитыДокумента.Вставить("УслугиСуммаНДС", ВыбранныйДокумент.Услуги.Итог("СуммаНДС"));
		РеквизитыДокумента.Вставить("ТоварыСуммаНДС", ВыбранныйДокумент.Товары.Итог("СуммаНДС"));
	ИначеЕсли ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ОперацияБух") Тогда 
		РеквизитыДокумента.Вставить("СуммаОперации", ВыбранныйДокумент.СуммаОперации);
	ИначеЕсли  ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ПередачаОС") Тогда 
		РеквизитыДокумента.Вставить("СуммаДокумента", ВыбранныйДокумент.СуммаДокумента);
		РеквизитыДокумента.Вставить("ОССуммаНДС", ВыбранныйДокумент.ОС.Итог("СуммаНДС"));
	КонецЕсли;
	Возврат РеквизитыДокумента;
КонецФункции

//БИТ Тртилек 22082013 обработчик события НачалоВыбора поля ввода Документ реализации поступления
&НаКлиенте
Процедура бит_ТабличноеПолеДокументыСобственныхКонтрагентовДокументРеализацииПередачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("РеализацияТоваровУслуг", "Реализация товаров и услуг");
	СписокТипов.Добавить("ОперацияБух", "Операция (бухгалтерский и налоговый учет)");	
	СписокТипов.Добавить("ПередачаОС", "Передача ОС");	        //ОК Довбешка Т.  17.04.2015
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма);
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, "Выберите вид документа"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбранныйЭлемент, СписокПараметров) Экспорт
    Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
    Иначе
        ВыбранноеЗначение = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ВыбранныйДокумент = Неопределено;
	
	ФормаВыбора = Получитьформу("Документ."+ВыбранноеЗначение+".ФормаВыбора");
	
	
	//Найдем встречную организацию
	ОтборПоКонтрагенту = Новый Структура("Контрагент, ВидСвязи");
	ОтборПоКонтрагенту.Контрагент = Объект.Контрагент;
	ОтборПоКонтрагенту.ВидСвязи = ПредопределенноеЗначение("Перечисление.бит_ВидыСобственныхКонтрагентов.Организация");
	
	СтруктураНабораЗаписейВстречныхОрганизаций = ПолучитьСтруктуруНабораЗаписейВстречныхОрганизаций(ОтборПоКонтрагенту);
	
	Если СтруктураНабораЗаписейВстречныхОрганизаций.Количество = 0 ИЛИ НЕ ЗначениеЗаполнено(СтруктураНабораЗаписейВстречныхОрганизаций.Объект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для контрагента: " + Объект.Контрагент + " не указана организация в регистре ""Собственные контрагенты"". В форме выбора отбор установлен не будет");
	Иначе
		ВстречнаяОрганизация = СтруктураНабораЗаписейВстречныхОрганизаций.Объект;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ФормаВыбора.Список, "Организация", ВстречнаяОрганизация, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	КонецЕсли;	
	
	ВыбранныйДокумент = ОткрытьФормуМодально(ФормаВыбора);
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДокументРеализацииПередачи = ВыбранныйДокумент;
	РеквизитыДокумента = ПолучитьРеквизитыДокумента(ВыбранныйДокумент);
	Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДатаДокументаРеализацииПередачи = РеквизитыДокумента.Дата;
	Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = РеквизитыДокумента.СуммаДокумента;
		СуммаНДС =  РеквизитыДокумента.ТоварыСуммаНДС + РеквизитыДокумента.УслугиСуммаНДС;
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_СуммаБезНДС = РеквизитыДокумента.СуммаДокумента - СуммаНДС;
	//ОК Довбешка Т.  16.04.2015
	ИначеЕсли ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ПередачаОС") Тогда
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = РеквизитыДокумента.СуммаДокумента;
		СуммаНДС =  РеквизитыДокумента.ОССуммаНДС;
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_СуммаБезНДС = РеквизитыДокумента.СуммаДокумента - СуммаНДС;
	//ОК Довбешка Т.
	ИначеЕсли ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ОперацияБух") Тогда
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = РеквизитыДокумента.СуммаОперации;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНабораЗаписейВстречныхОрганизаций(ОтборПоКонтрагенту)
	НаборЗаписейВстречныхОрганизаций = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборПоКонтрагенту, "бит_СобственныеКонтрагенты");
	КоличествоЗаписей = НаборЗаписейВстречныхОрганизаций.Количество();
	Возврат Новый Структура("Количество, Объект", КоличествоЗаписей, ?(КоличествоЗаписей = 0, Неопределено, НаборЗаписейВстречныхОрганизаций[0].Объект));
КонецФункции

//Конец_бит_Магомедов_01.08.2013

//ОК Калинин М.  050313
&НаСервере
Процедура ОК_ИзменитьСвойстваПолейФормы()
	Элементы.ДатаВходящегоДокумента.АвтоОтметкаНезаполненного=Истина;
КонецПроцедуры	
//ОК Калинин М.



// BIT AMerkulov ++

&НаКлиенте
Процедура ЗаполнитьПоУправленческимАналитикамУслуги(Команда)
	
	ИмяТЧ = "Услуги";
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-07 (#3048)
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ);
	Возврат;  
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-07 (#3048)
	
	Если Объект[ИмяТЧ].Количество() Тогда
		Ответ = Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) = Ложь Тогда
		Предупреждение("Необходимо записать документ перед заполнением!");
		Возврат;
	КонецЕсли;
		
	Объект[ИмяТЧ].Очистить();	 
	Заявка =  ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
	ВвестиЗначение(Заявка, "Выберите заявку для заполнения");
	
	Если ЗначениеЗаполнено(Заявка) Тогда
		ПараметрыОткрытия = Новый Структура("Заявка",Заявка);
		ПараметрыОткрытия.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС); 
		ФормаВыбора = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.Форма.битФормаВыбораАналитик",ПараметрыОткрытия);		
		Результат = ФормаВыбора.ОткрытьМодально();
		
		ЗаполнитьПоУправленческимАналитикамНаСервере(ИмяТЧ, Заявка, Результат);
		
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоУправленческимАналитикамНаСервере(ИмяТЧ, Заявка, Результат)
	
	 
	Если Результат <> Неопределено Тогда
		
		Для Каждого Стр Из Результат Цикл
			Если Стр.Выбор Тогда
				ДобавленнаяСтрока = Объект[ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,Стр);
				ДобавленнаяСтрока.Цена = ДобавленнаяСтрока.Сумма;
				ДобавленнаяСтрока.Количество = 1;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьДопАналитик = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьМенеджерЗаписи();
	ЗаписьДопАналитик.Объект = Объект.Ссылка;
	ЗаписьДопАналитик.ЗначениеАналитики = Заявка;
	ЗаписьДопАналитик.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки");
	ЗаписьДопАналитик.Записать();
		
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКолонкуТовары(Команда)
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		//Имя 		= Элементы.Товары.ТекущаяКолонка.Данные;
		//Значение 	= Элементы.Товары.ТекущиеДанные[Имя];
		//
		//Для Каждого Стр Из Объект.Товары Цикл
		//	Стр[Имя] = Значение;	
		//КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКолонкуУслуги(Команда)
	
	Если Элементы.Услуги.ТекущиеДанные <> Неопределено Тогда
		//Имя 		= Элементы.Услуги.ТекущаяКолонка.Данные;
		//Значение 	= Элементы.Услуги.ТекущиеДанные[Имя];
		//
		//Для Каждого Стр Из Объект.Услуги Цикл
		//	Стр[Имя] = Значение;	
		//КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАналитику(НомерСтроки)
	
	СтрокаТабличнойЧасти = Объект.Услуги[НомерСтроки];

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
	//Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Объект) Тогда	
	//	Для инд=1 По 3 Цикл
	//		
	//		Если ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда				
	//			
	//			СтрокаТабличнойЧасти["Субконто"+инд] = СтрокаТабличнойЧасти.Объект;	
	//			
	//		КонецЕсли;				
	//		Если ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
	//			
	//			СтрокаТабличнойЧасти["СубконтоНУ"+инд] = СтрокаТабличнойЧасти.Объект;	
	//			
	//		КонецЕсли;			
	//	КонецЦикла;
	//КонецЕсли;	
	//
	//Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЦФО) Тогда
	//
	//	Для инд=1 По 3 Цикл
	//		Если ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.Подразделения") Тогда
	//			
	//			СтрокаТабличнойЧасти["Субконто"+инд] = СтрокаТабличнойЧасти.ЦФО;	
	//			
	//		КонецЕсли;				
	//		Если ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = Тип("СправочникСсылка.Подразделения") Тогда
	//			
	//			СтрокаТабличнойЧасти["СубконтоНУ"+инд] = СтрокаТабличнойЧасти.ЦФО;	
	//			
	//		КонецЕсли;			
	//	КонецЦикла;
	//КонецЕсли;
	//	
	//Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяОборотов) Тогда
	//
	//	
	//	Запрос = Новый Запрос;	
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
	//	               |ИЗ
	//	               |	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	//	               |ГДЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.СтатьиЗатрат 
	//				   | И бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов = &Статья";					   
	//	
	//	Запрос.УстановитьПараметр("Статья",СтрокаТабличнойЧасти.СтатьяОборотов);
	//	
	//	ТаблицаСтатейЗатрат = Запрос.Выполнить().Выгрузить();
	//	
	//	Запрос = Новый Запрос;	
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
	//	               |ИЗ
	//	               |	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	//	               |ГДЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.ПрочиеДоходыИРасходы 
	//				   | И бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов = &Статья";					   
	//	
	//	Запрос.УстановитьПараметр("Статья",СтрокаТабличнойЧасти.СтатьяОборотов);
	//	
	//	ТаблицаПрочихДоходов = Запрос.Выполнить().Выгрузить();
	//	
	//	
	//	Если ТаблицаСтатейЗатрат.Количество() Тогда
	//		Для инд=1 По 3 Цикл
	//			Если ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
	//				СтрокаТабличнойЧасти["Субконто"+инд] = ТаблицаСтатейЗатрат[0].СтатьяРегл;
	//				
	//				Если ТаблицаСтатейЗатрат.Количество() > 1 Тогда
	//					Сообщить("Найдено более одной статьи затрат по соответствию с указанной статьей оборотов!");	
	//				КонецЕсли;
	//				
	//				
	//			КонецЕсли;				
	//			Если ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
	//				СтрокаТабличнойЧасти["СубконтоНУ"+инд] = ТаблицаСтатейЗатрат[0].СтатьяРегл;	
	//			КонецЕсли;			
	//		КонецЦикла;
	//	КонецЕсли;	
	//	
	//	Если ТаблицаПрочихДоходов.Количество() Тогда
	//		Для инд=1 По 3 Цикл
	//			Если ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
	//				СтрокаТабличнойЧасти["Субконто"+инд] = ТаблицаПрочихДоходов[0].СтатьяРегл;
	//				
	//				Если ТаблицаПрочихДоходов.Количество() > 1 Тогда
	//					Сообщить("Найдено более одной статьи прочих доходов-расходов по соответствию с указанной статьей оборотов!");	
	//				КонецЕсли;
	//				
	//				
	//			КонецЕсли;				
	//			Если ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
	//				СтрокаТабличнойЧасти["СубконтоНУ"+инд] = ТаблицаПрочихДоходов[0].СтатьяРегл;	
	//			КонецЕсли;			
	//		КонецЦикла;
	//	КонецЕсли;			
	//КонецЕсли;  
	//Заменено на:
	
	Если Не (ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_ЦФО) И
			 ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_СтатьяОборотов) И
			 ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_Аналитика_2)) 
	Тогда 
		Возврат;
	КонецЕсли;
	
	Для инд=1 По 3 Цикл
		//БУ
		Если ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = ТипЗнч(СтрокаТабличнойЧасти.ок_Аналитика_2) Тогда
			 Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_Аналитика_2) Тогда 
				СтрокаТабличнойЧасти["Субконто"+инд] = СтрокаТабличнойЧасти.ок_Аналитика_2;	
			КонецЕсли;			
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = ТипЗнч(СтрокаТабличнойЧасти.ок_ЦФО) Тогда
			 Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_ЦФО) Тогда 
				СтрокаТабличнойЧасти["Субконто"+инд] = СтрокаТабличнойЧасти.ок_ЦФО;	
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			пСтатьяРегл = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтрокаТабличнойЧасти.ок_СтатьяОборотов, фКэшЗначений);
			Если ЗначениеЗаполнено(пСтатьяРегл) Тогда 
				СтрокаТабличнойЧасти["Субконто"+инд] = пСтатьяРегл;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти["Субконто"+инд]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда 
			пСтатьяРегл = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтрокаТабличнойЧасти.ок_СтатьяОборотов, фКэшЗначений);
			Если ЗначениеЗаполнено(пСтатьяРегл) Тогда 
				СтрокаТабличнойЧасти["Субконто"+инд] = пСтатьяРегл;
			КонецЕсли;
		КонецЕсли;	
		
		//НУ
		Если ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = ТипЗнч(СтрокаТабличнойЧасти.ок_Аналитика_2) Тогда
			 Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_Аналитика_2) Тогда 
				СтрокаТабличнойЧасти["СубконтоНУ"+инд] = СтрокаТабличнойЧасти.ок_Аналитика_2;	
			КонецЕсли;			
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = ТипЗнч(СтрокаТабличнойЧасти.ок_ЦФО) Тогда
			 Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ок_ЦФО) Тогда 
				СтрокаТабличнойЧасти["СубконтоНУ"+инд] = СтрокаТабличнойЧасти.ок_ЦФО;	
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			пСтатьяРегл = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтрокаТабличнойЧасти.ок_СтатьяОборотов, фКэшЗначений);
			Если ЗначениеЗаполнено(пСтатьяРегл) Тогда 
				СтрокаТабличнойЧасти["СубконтоНУ"+инд] = пСтатьяРегл;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти["СубконтоНУ"+инд]) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда 
			пСтатьяРегл = Документы.ПоступлениеТоваровУслуг.ПолучитьСтатьюРеглПоСтатьеОборотов(СтрокаТабличнойЧасти.ок_СтатьяОборотов, фКэшЗначений);
			Если ЗначениеЗаполнено(пСтатьяРегл) Тогда 
				СтрокаТабличнойЧасти["СубконтоНУ"+инд] = пСтатьяРегл;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСубконто(НомерСтроки, Значение)
	
	ТекущаяСтрока = Объект.Услуги[НомерСтроки];
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-19 (#3048)	
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.ОбъектыСтроительства") И ЗначениеЗаполнено(ТекущаяСтрока.Объект) Тогда
	//	ТекущаяСтрока.Объект = Значение;	
	//КонецЕсли;
	//
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") И ЗначениеЗаполнено(ТекущаяСтрока.Объект) Тогда
	//	ТекущаяСтрока.Объект = Значение.Объект;	
	//КонецЕсли;
	//
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") И ЗначениеЗаполнено(ТекущаяСтрока.ЦФО) Тогда
	//	ТекущаяСтрока.ЦФО = Значение.ОК_Функция;	
	//КонецЕсли;
	//
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.ОсновныеСредства") И ЗначениеЗаполнено(ТекущаяСтрока.Объект) Тогда
	//	ТекущаяСтрока.Объект = Значение.Объект;	
	//КонецЕсли;
	//
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И ЗначениеЗаполнено(ТекущаяСтрока.СтатьяОборотов) Тогда
	//	
	//	Запрос = Новый Запрос;	
	//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
	//	               |ИЗ
	//	               |	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	//	               |ГДЕ
	//	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.СтатьиЗатрат 
	//				   | И бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл = &Статья";					   
	//	Запрос.УстановитьПараметр("Статья",Значение);
	//	Результат = Запрос.Выполнить();
	//	Если НЕ Результат.Пустой() Тогда
	//		Выборка = Результат.Выбрать();
	//		Выборка.Следующий();
	//		ТекущаяСтрока.СтатьяОборотов = Выборка.СтатьяОборотов;	
	//	КонецЕсли;
	//КонецЕсли;
	//Заменено на:
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ОбъектыСтроительства") И ЗначениеЗаполнено(ТекущаяСтрока.ок_Аналитика_2) Тогда
		ТекущаяСтрока.ок_Аналитика_2 = Значение;	
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") И ЗначениеЗаполнено(ТекущаяСтрока.ок_Аналитика_2) Тогда
		ТекущаяСтрока.ок_Аналитика_2 = Значение.Объект;	
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") И ЗначениеЗаполнено(ТекущаяСтрока.ок_ЦФО) Тогда
		ТекущаяСтрока.ок_ЦФО = Значение.ОК_Функция;	
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ОсновныеСредства") И ЗначениеЗаполнено(ТекущаяСтрока.ок_Аналитика_2) Тогда
		ТекущаяСтрока.ок_Аналитика_2 = Значение.Объект;	
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.СтатьиЗатрат") И ЗначениеЗаполнено(ТекущаяСтрока.ок_СтатьяОборотов) Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
		               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
		               |ИЗ
		               |	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
		               |ГДЕ
		               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.СтатьиЗатрат 
					   | И бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл = &Статья";					   
		Запрос.УстановитьПараметр("Статья",Значение);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ТекущаяСтрока.ок_СтатьяОборотов = Выборка.СтатьяОборотов;	
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-19 (#3048)

КонецПроцедуры



&НаКлиенте
Процедура ДозаполнитьПоУправленческимАналитикамУслуги(Команда)
	
	ИмяТЧ = "Услуги";
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-07 (#3048)
	бит_БК_ОбщийКлиент.ЗаполнитьТЧПоУправленческимАналитикам(ЭтотОбъект, ИмяТЧ, Ложь);
	Возврат;  
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-07 (#3048)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) = Ложь Тогда
		Предупреждение("Необходимо записать документ перед заполнением!");
		Возврат;
	КонецЕсли;
		
	Заявка =  ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
	ВвестиЗначение(Заявка, "Выберите заявку для заполнения");
	
	Если ЗначениеЗаполнено(Заявка) Тогда
		ПараметрыОткрытия = Новый Структура("Заявка",Заявка);
		ПараметрыОткрытия.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС); 
		ФормаВыбора = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.Форма.битФормаВыбораАналитик",ПараметрыОткрытия);		
		Результат = ФормаВыбора.ОткрытьМодально();
		
		ДоЗаполнитьПоУправленческимАналитикамНаСервере(ИмяТЧ, Заявка, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоЗаполнитьПоУправленческимАналитикамНаСервере(ИмяТЧ, Заявка, Результат)
	
	Если Результат <> Неопределено Тогда
		
		КоличествоСтрокВТЧ = Объект[ИмяТЧ].Количество()-1;
		Инд = 0;
		
		Для Каждого Стр Из Результат Цикл
			Если Стр.Выбор Тогда
				Если Инд <= КоличествоСтрокВТЧ Тогда
					СтрокаКЗаполнению = Объект[ИмяТЧ][Инд];
				Иначе 
					СтрокаКЗаполнению = Объект[ИмяТЧ].Добавить();					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаКЗаполнению,Стр);
				
				Инд = Инд+1;
				
			КонецЕсли;
		КонецЦикла;
		
		Объект.бит_ДозаполненоПоУправленческимАналитикам = Истина;	
		
	КонецЕсли;
	
	ЗаписьДопАналитик = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьМенеджерЗаписи();
	ЗаписьДопАналитик.Объект = Объект.Ссылка;
	ЗаписьДопАналитик.ЗначениеАналитики = Заявка;
	ЗаписьДопАналитик.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки");
	ЗаписьДопАналитик.Записать();
	
	
	
КонецПроцедуры
//BIT  AMerkulov --

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-07 (#3048)
&НаКлиенте
Процедура ЗаполнитьТЧПоУправленческимАналитикам(Результат, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТЧПоУправленческимАналитикамНаСервере(Результат, ДопПараметры.ИмяТЧ, ДопПараметры.Заявка)
		
КонецПроцедуры

Процедура ЗаполнитьТЧПоУправленческимАналитикамНаСервере(АдресДанныхЗаполнения, ИмяТЧ, Заявка)
	
	пДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресДанныхЗаполнения);
	
	СтрПоиска = Новый Структура("ок_ЦФО,ок_СтатьяОборотов,ок_Проект,ок_Период,ок_Аналитика_2,СтавкаНДС");
	
	Для Каждого пСтрокаЗаполнения Из пДанныеЗаполнения Цикл 
		
		Если Объект.ДатаВходящегоДокумента <> Дата('00010101') Тогда 
			пСтрокаЗаполнения.ок_Период = Объект.ДатаВходящегоДокумента;
		КонецЕсли;
		
		пСтрокаТЧ = Неопределено;
		ЗаполнитьЗначенияСвойств(СтрПоиска, пСтрокаЗаполнения);
		пСтрокиТЧ = Объект[ИмяТЧ].НайтиСтроки(СтрПоиска);
		Если пСтрокиТЧ.Количество() > 0 Тогда 
			пСтрокаТЧ = пСтрокиТЧ[0];	
		КонецЕсли;
		Если пСтрокаТЧ = Неопределено Тогда 
			пСтрокаТЧ = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(пСтрокаТЧ, пСтрокаЗаполнения,,"СуммаНДС,Сумма");	
		КонецЕсли;
		
		пСтрокаТЧ.СуммаНДС = пСтрокаТЧ.СуммаНДС + пСтрокаЗаполнения.СуммаНДС;
		
		Если НЕ Объект.СуммаВключаетНДС Тогда 
			пСтрокаТЧ.Сумма = пСтрокаТЧ.Сумма + пСтрокаЗаполнения.СуммаБезНДС;
			пСтрокаТЧ.Всего = пСтрокаТЧ.Сумма + пСтрокаТЧ.СуммаНДС;
		Иначе
			пСтрокаТЧ.Сумма = пСтрокаТЧ.Сумма + пСтрокаЗаполнения.Сумма;
			пСтрокаТЧ.Всего = пСтрокаТЧ.Сумма;
		КонецЕсли;		
		
		пСтрокаТЧ.ок_Период = НачалоМесяца(пСтрокаТЧ.ок_Период);			
		
	КонецЦикла;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-07 (#3048)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3048)
&НаКлиенте
Процедура ОтветПоЗаполнениюПериодаВТЧ(Результат, ДопПараметры) Экспорт

	Если Результат<>КодВозвратаДиалога.Да Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого стрТЧ Из Объект["Услуги"] Цикл 
		стрТЧ.ок_Период = НачалоМесяца(Объект.ДатаВходящегоДокумента);
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	МетаданныеОбъекта = Метаданные.Документы.ПоступлениеТоваровУслуг;
	фКэшЗначений = Новый Структура;
			
	// Данные по дополнительным аналитикам
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	
	// Произвольные измерения
	фКэшЗначений.Вставить("Измерения"         , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаКлиенте
Процедура УслугиПериодПриИзменении(Элемент)
	
	ТекДанные = Элементы["Услуги"].ТекущиеДанные;
	
	Если ТекДанные<>Неопределено Тогда 
		ТекДанные.ок_Период = НачалоМесяца(ТекДанные.ок_Период);
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3048)

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)

&НаКлиенте
Процедура ок_НомерЗаявкиПриИзменении(Элемент) Экспорт
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("УчетныйДокумент", Объект.Ссылка);
		
		ПараметрыДокумента.Вставить("ТипЗначенияУчетныйДокумент", ТипЗнч(Объект.Ссылка));
		
		ПараметрыДокумента.Вставить("ФВБУчетныйДокумент", Объект.ок_НомерЗаявки);
		ок_ОбменСКонтрагентамиСлужебныйВызовСервера.ДополнитьПараметрыПроверкиСоответствияУчетногоДокументаИВходящегоЭД(ПараметрыДокумента); 
		
		Если Не ПараметрыДокумента.Свойство("ЭлектронныйДокумент") Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеОшибки = "";
		Если ПараметрыДокумента.ФВБУчетныйДокумент <> ПараметрыДокумента.ФВБЭлектронныйДокумент Тогда
		
			ОписаниеОшибки = "В документе номер заявки отличается от данных входящего ЭД  " + ПараметрыДокумента.ЭлектронныйДокумент + ".";
			
		КонецЕсли;	
		
		Если ОписаниеОшибки <> "" Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭДЗавершение", ЭтотОбъект, Новый Структура("Имя", "ок_НомерЗаявки")), ОписаниеОшибки + " Изменить номер заявки?", РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкиНаСоответствиеДаннымДокументаЭДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		 Объект.ок_НомерЗаявки = ЭтотОбъект.ок_ПредыдущийНомерЗаявки;
	КонецЕсли;	
	
	ЭтотОбъект.ок_ПредыдущийНомерЗаявки = Объект.ок_НомерЗаявки;
	
КонецПроцедуры	

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)

#Область _3414
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)

&НаКлиенте
Процедура ок_ТекстБумажныйДокументНажатие(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.ок_БумажныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ЭтотОбъект.ок_БумажныйДокумент);
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
#КонецОбласти

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-08 (#4338)
#Область Команды_ЗаполнитьКолонку

&НаКлиенте
Процедура ок_ЗаполнитьКолонку_Услуги(Команда)

	ЗаполнитьКолонкуТЧ(ЭтаФорма, Элементы.Услуги);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокКопированияКолонокТЧ(ИмяТЧ, ТаблицаФормы)
	
	ок_ОбщегоНазначенияКлиент.УстановитьДоступностьКнопокКопированияКолонокТЧ(ЭтаФорма, Элементы["ок_ЗаполнитьКолонку_" + ИмяТЧ], ТаблицаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолонкуТЧ(Форма, ТаблицаФормы)

	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТЧ 			= ТаблицаФормы.Имя;
	ИмяКолонки 		= СтрЗаменить(НРег(ТаблицаФормы.ТекущийЭлемент.Имя), НРег(ИмяТЧ), "");
	ЗначениеКолонки	= ТекущиеДанные[ИмяКолонки];
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ИмяКолонки", 		ИмяКолонки);
	ПараметрыОповещения.Вставить("ЗначениеКолонки", ЗначениеКолонки);
	ПараметрыОповещения.Вставить("ИмяТЧ", 			ИмяТЧ);
	
	Оповещение 		= Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьКолонкуТЧ", ЭтотОбъект, ПараметрыОповещения);
	ТекстВопроса 	= НСтр("ru = 'Выбранное значение ""%1"" будет заполнено во всех строках табличной части ""%2"".
								|Продолжить выполнение операции?'");
	ТекстВопроса 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ЗначениеКолонки, ИмяТЧ, ИмяКолонки);
	Режим 			= РежимДиалогаВопрос.ДаНет;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьКолонкуТЧ(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	ИмяКолонки 		= НРег(Параметры.ИмяКолонки);
	ЗначениеКолонки = Параметры.ЗначениеКолонки;
	ИмяТЧ 			= НРег(Параметры.ИмяТЧ);
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		СтрокаТЧ[ИмяКолонки] = ЗначениеКолонки;
		
		// Активируем изменяемую строку табличного поля, для того что бы обновить данные в значении свойства "ТекущиеДанные"
		// это необходимо делать, т.к. связанные события используют значение из свойства "ТекущиеДанные" табличного поля
		ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
		Элементы[ИмяТЧ].ТекущаяСтрока = ИдентификаторСтроки;
		
		Если ИмяТЧ = НРег("Услуги") Тогда
		
			Если ИмяКолонки = НРег("Количество") Тогда
			
				УслугиКоличествоПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("Цена") Тогда
				
				УслугиЦенаПриИзменении(Неопределено);
				
			ИначеЕсли ИмяКолонки = НРег("СтавкаНДС") Тогда
				
				УслугиСтавкаНДСПриИзменении(Неопределено);
				
			КонецЕсли; 
			
			УслугиПриИзменении(Неопределено);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-08 (#4338)

ЭтоНоваяСтрока = Ложь;

