перем мЭлементВерний;

Функция ВыполнениеЗапроса() Экспорт
	
	Если ДтКт = "Дт" Тогда
		КтДт = "Кт";
	Иначе
		КтДт = "Дт";
	КонецЕсли;
	
//+СБ Пискунова 30.09.2016 #2531
//СБ Пискунова В #2531 Данные будем брать по МСФО, а к ним подтягивать данные по РСБУ, без учета трансляции	

	#Область Бекап 
	
	//Запрос = Новый Запрос;
	////БИТ АКриштопов 16022016 -->> Вносятся изменение в запрос с учетом возможного формирования проводок в другом
	////периоде. Например, когда старый документа проводят в новом периоде, проводки старые консервируются, новые
	////формируются.
	////Запрос.Текст = "ВЫБРАТЬ
	////               |	ЗначенияСвойствОбъектов.Объект,
	////               |	ЗначенияСвойствОбъектов.Значение
	////               |ПОМЕСТИТЬ ВТДопСтатьи
	////               |ИЗ
	////               |	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	////               |ГДЕ
	////               |	ЗначенияСвойствОбъектов.Свойство = &Свойство
	////               |;
	////               |
	////               |////////////////////////////////////////////////////////////////////////////////
	////               |ВЫБРАТЬ
	////               |	бит_СоответствиеЗаписейТрансляции.Регистратор,
	////               |	бит_СоответствиеЗаписейТрансляции.НомерСтрокиИсточника,
	////               |	бит_СоответствиеЗаписейТрансляции.НомерСтрокиПриемника
	////               |ПОМЕСТИТЬ ВТСоответствиеСтатей
	////               |ИЗ
	////               |	РегистрСведений.бит_СоответствиеЗаписейТрансляции КАК бит_СоответствиеЗаписейТрансляции
	////               |ГДЕ
	////               |	бит_СоответствиеЗаписейТрансляции.Источник = &Источник
	////               |	И бит_СоответствиеЗаписейТрансляции.Приемник = &Приемник
	////               |;
	////               |
	////               |////////////////////////////////////////////////////////////////////////////////
	////               |ВЫБРАТЬ
	////               |	бит_Дополнительный_2ОборотыДтКт.Регистратор КАК Регистратор,
	////               |	ВТСоответствиеСтатей.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
	////               |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт1,
	////               |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт2,
	////               |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт3
	////               |ПОМЕСТИТЬ ВТРегистраторИНомерСтроки
	////               |ИЗ
	////               |	РегистрБухгалтерии.бит_Дополнительный_2.ОборотыДтКт(&НачПериода, &КонПериода, Запись, СчетДт = &Счет, , , , Организация = &Организация) КАК бит_Дополнительный_2ОборотыДтКт
	////               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеСтатей КАК ВТСоответствиеСтатей
	////               |		ПО бит_Дополнительный_2ОборотыДтКт.Регистратор = ВТСоответствиеСтатей.Регистратор
	////               |			И бит_Дополнительный_2ОборотыДтКт.НомерСтроки = ВТСоответствиеСтатей.НомерСтрокиПриемника
	////               |ГДЕ
	////               |	НЕ бит_Дополнительный_2ОборотыДтКт.Регистратор ССЫЛКА Документ.бит_РеклассификацияНеПринимаемыхРасходов
	////               |	И НЕ бит_Дополнительный_2ОборотыДтКт.Регистратор ССЫЛКА Документ.бит_ОперацияУправленческий
	////               |;
	////               |
	////               |////////////////////////////////////////////////////////////////////////////////
	////               |ВЫБРАТЬ
	////               |	ВТРегистраторИНомерСтроки.Регистратор,
	////               |	ХозрасчетныйОборотыДтКт.СчетДт,
	////               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	////               |	ВТРегистраторИНомерСтроки.НомерСтрокиИсточника,
	////               |	ВТДопСтатьи.Значение,
	////               |	ХозрасчетныйОборотыДтКт.ПодразделениеДт,
	////               |	ХозрасчетныйОборотыДтКт.ПодразделениеКт,
	////               |	ВТРегистраторИНомерСтроки.СубконтоДт1,
	////               |	ХозрасчетныйОборотыДтКт.СчетКт,
	////               |	ВТРегистраторИНомерСтроки.СубконтоДт2,
	////               |	ВТРегистраторИНомерСтроки.СубконтоДт3,
	////               |	ХозрасчетныйОборотыДтКт.Регистратор КАК РегистраторХозрасчетный
	////               |ИЗ
	////               |	ВТРегистраторИНомерСтроки КАК ВТРегистраторИНомерСтроки
	////               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Запись, , , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	////               |		ПО ВТРегистраторИНомерСтроки.Регистратор = ХозрасчетныйОборотыДтКт.Регистратор
	////               |			И ВТРегистраторИНомерСтроки.НомерСтрокиИсточника = ХозрасчетныйОборотыДтКт.НомерСтроки
	////               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДопСтатьи КАК ВТДопСтатьи
	////               |		ПО ВТРегистраторИНомерСтроки.Регистратор = ВТДопСтатьи.Объект";
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗначенияСвойствОбъектов.Объект КАК Объект,
	//               |	ЗначенияСвойствОбъектов.Значение КАК Значение
	//               |ПОМЕСТИТЬ ВТДопСтатьи
	//               |ИЗ
	//               |	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	//               |ГДЕ
	//               |	ЗначенияСвойствОбъектов.Свойство = &Свойство
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	бит_СоответствиеЗаписейТрансляции.Регистратор КАК Регистратор,
	//               |	бит_СоответствиеЗаписейТрансляции.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
	//               |	бит_СоответствиеЗаписейТрансляции.НомерСтрокиПриемника КАК НомерСтрокиПриемника,
	//               |	бит_СоответствиеЗаписейТрансляции.Период
	//               |ПОМЕСТИТЬ ВТСоответствиеСтатей
	//               |ИЗ
	//               |	РегистрСведений.бит_СоответствиеЗаписейТрансляции КАК бит_СоответствиеЗаписейТрансляции
	//               |ГДЕ
	//               |	бит_СоответствиеЗаписейТрансляции.Источник = &Источник
	//               |	И бит_СоответствиеЗаписейТрансляции.Приемник = &Приемник
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	бит_Дополнительный_2ОборотыДтКт.Регистратор КАК Регистратор,
	//               |	ВТСоответствиеСтатей.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
	//               |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт1,
	//               |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт2,
	//               |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт3,
	//               |	ВТСоответствиеСтатей.Период КАК Период
	//               |ПОМЕСТИТЬ ВТРегистраторИНомерСтроки
	//               |ИЗ
	//               |	РегистрБухгалтерии.бит_Дополнительный_2.ОборотыДтКт(&НачПериода, &КонПериода, Запись, СчетДт = &Счет, , , , Организация = &Организация) КАК бит_Дополнительный_2ОборотыДтКт
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеСтатей КАК ВТСоответствиеСтатей
	//               |		ПО бит_Дополнительный_2ОборотыДтКт.Регистратор = ВТСоответствиеСтатей.Регистратор
	//               |			И бит_Дополнительный_2ОборотыДтКт.НомерСтроки = ВТСоответствиеСтатей.НомерСтрокиПриемника
	//               |ГДЕ
	//               |	НЕ бит_Дополнительный_2ОборотыДтКт.Регистратор ССЫЛКА Документ.бит_РеклассификацияНеПринимаемыхРасходов
	//               |	И НЕ бит_Дополнительный_2ОборотыДтКт.Регистратор ССЫЛКА Документ.бит_ОперацияУправленческий
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВТРегистраторИНомерСтроки.Регистратор,
	//               |	ХозрасчетныйОборотыДтКт.СчетДт,
	//               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	//               |	ВТРегистраторИНомерСтроки.НомерСтрокиИсточника,
	//               |	ВТДопСтатьи.Значение,
	//               |	ХозрасчетныйОборотыДтКт.ПодразделениеДт,
	//               |	ХозрасчетныйОборотыДтКт.ПодразделениеКт,
	//               |	ВТРегистраторИНомерСтроки.СубконтоДт1,
	//               |	ХозрасчетныйОборотыДтКт.СчетКт,
	//               |	ВТРегистраторИНомерСтроки.СубконтоДт2,
	//               |	ВТРегистраторИНомерСтроки.СубконтоДт3,
	//               |	ХозрасчетныйОборотыДтКт.Регистратор КАК РегистраторХозрасчетный
	//               |ИЗ
	//               |	ВТРегистраторИНомерСтроки КАК ВТРегистраторИНомерСтроки
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Запись, , , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	//               |		ПО ВТРегистраторИНомерСтроки.Регистратор = ХозрасчетныйОборотыДтКт.Регистратор
	//               |			И ВТРегистраторИНомерСтроки.НомерСтрокиИсточника = ХозрасчетныйОборотыДтКт.НомерСтроки
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДопСтатьи КАК ВТДопСтатьи
	//               |		ПО ВТРегистраторИНомерСтроки.Регистратор = ВТДопСтатьи.Объект";
	////БИТ АКриштопов 16022016 <<--			   
	//Если ДтКт = "Кт" Тогда
	//    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачПериода, &КонПериода, Запись, СчетДт = &Счет, , , , Организация = &Организация", "&НачПериода, &КонПериода, Запись, , , СчетКт = &Счет, , Организация = &Организация"); 
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "бит_Дополнительный_2ОборотыДтКт.СубконтоДт1", "бит_Дополнительный_2ОборотыДтКт.СубконтоКт1");
	//	//БИТ Тртилек 01.03.2013 дополнительно вытянем функцию и объект
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "бит_Дополнительный_2ОборотыДтКт.СубконтоДт2", "бит_Дополнительный_2ОборотыДтКт.СубконтоКт2");
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "бит_Дополнительный_2ОборотыДтКт.СубконтоДт3", "бит_Дополнительный_2ОборотыДтКт.СубконтоКт3");
	//	///БИТ Тртилек 
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРегистраторИНомерСтроки.СубконтоДт1", "ВТРегистраторИНомерСтроки.СубконтоКт1");
	//	//БИТ Тртилек 01.03.2013 дополнительно вытянем функцию и объект
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРегистраторИНомерСтроки.СубконтоДт2", "ВТРегистраторИНомерСтроки.СубконтоКт2");
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРегистраторИНомерСтроки.СубконтоДт3", "ВТРегистраторИНомерСтроки.СубконтоКт3");
	//	///БИТ Тртилек
	//КонецЕсли;
	//
	//Запрос.УстановитьПараметр("НачПериода" , ПериодС);
	//Запрос.УстановитьПараметр("КонПериода" , КонецДня(ПериодПо));
	//Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("Счет"       , Счет);
	//Запрос.УстановитьПараметр("Источник"   , Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001021"));
	//Запрос.УстановитьПараметр("Приемник"   , Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024"));
	//Запрос.УстановитьПараметр("Свойство"   , ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Статья затрат доп."));
	//Выборка = Запрос.Выполнить().Выбрать();
	# КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияСвойствОбъектов.Объект КАК Объект,
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ПОМЕСТИТЬ ВТДопСтатьи
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СоответствиеЗаписейТрансляции.Регистратор КАК Регистратор,
	|	бит_СоответствиеЗаписейТрансляции.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
	|	бит_СоответствиеЗаписейТрансляции.НомерСтрокиПриемника КАК НомерСтрокиПриемника,
	|	бит_СоответствиеЗаписейТрансляции.Период
	|ПОМЕСТИТЬ ВТСоответствиеСтатей
	|ИЗ
	|	РегистрСведений.бит_СоответствиеЗаписейТрансляции КАК бит_СоответствиеЗаписейТрансляции
	|ГДЕ
	|	бит_СоответствиеЗаписейТрансляции.Источник = &Источник
	|	И бит_СоответствиеЗаписейТрансляции.Приемник = &Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_Дополнительный_2ОборотыДтКт.Регистратор КАК Регистратор,
	|	бит_Дополнительный_2ОборотыДтКт.Период КАК ПериодПроводки,
	|	бит_Дополнительный_2ОборотыДтКт.Организация,
	|	бит_Дополнительный_2ОборотыДтКт.СубконтоДт1,
	|	бит_Дополнительный_2ОборотыДтКт.СубконтоДт2,
	|	бит_Дополнительный_2ОборотыДтКт.СубконтоДт3,
	|	ВТДопСтатьи.Значение,
	|	бит_Дополнительный_2ОборотыДтКт.Регистратор КАК РегистраторХозрасчетный,
	|	бит_Дополнительный_2ОборотыДтКт.СуммаРеглОборот КАК СуммаОборот,
	|	бит_Дополнительный_2ОборотыДтКт.СчетДт КАК СчетДтМСФО,
	|	бит_Дополнительный_2ОборотыДтКт.СчетКт КАК СчетКтМСФО,
	|	бит_Дополнительный_2ОборотыДтКт.СубконтоКт1 КАК СубконтоМСФО1,
	|	бит_Дополнительный_2ОборотыДтКт.СубконтоКт2 КАК СубконтоМСФО2,
	|	бит_Дополнительный_2ОборотыДтКт.СубконтоКт3 КАК СубконтоМСФО3,
	|	бит_Дополнительный_2ОборотыДтКт.СубконтоКт4 КАК СубконтоМСФО4,
	|	бит_Дополнительный_2ОборотыДтКт.СчетДт,
	|	бит_Дополнительный_2ОборотыДтКт.СчетКт
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.ОборотыДтКт(&НачПериода, &КонПериода, Регистратор, СчетДт = &Счет, , , , Организация = &Организация) КАК бит_Дополнительный_2ОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДопСтатьи КАК ВТДопСтатьи
	|		ПО бит_Дополнительный_2ОборотыДтКт.Регистратор = ВТДопСтатьи.Объект
	|ГДЕ
	|	НЕ бит_Дополнительный_2ОборотыДтКт.Регистратор ССЫЛКА Документ.бит_РеклассификацияНеПринимаемыхРасходов
	|	И НЕ бит_Дополнительный_2ОборотыДтКт.Регистратор ССЫЛКА Документ.бит_ОперацияУправленческий";
	
	Запрос.УстановитьПараметр("НачПериода" , ПериодС);
	Запрос.УстановитьПараметр("КонПериода" , КонецДня(ПериодПо));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет"       , Счет);
	Запрос.УстановитьПараметр("Источник"   , Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001021"));
	Запрос.УстановитьПараметр("Приемник"   , Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024"));
	Запрос.УстановитьПараметр("Свойство"   , ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Статья затрат доп."));
	
	Если ДтКт = "Кт" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НачПериода, &КонПериода, Регистратор, СчетДт = &Счет, , , , Организация = &Организация", "&НачПериода, &КонПериода, Регистратор, , , СчетКт = &Счет, , Организация = &Организация"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "бит_Дополнительный_2ОборотыДтКт.СубконтоДт1", "бит_Дополнительный_2ОборотыДтКт.СубконтоКт1");  		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "бит_Дополнительный_2ОборотыДтКт.СубконтоДт2", "бит_Дополнительный_2ОборотыДтКт.СубконтоКт2");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "бит_Дополнительный_2ОборотыДтКт.СубконтоДт3", "бит_Дополнительный_2ОборотыДтКт.СубконтоКт3");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗначенийМСФО = РезультатЗапроса.Выгрузить();
	СписокДокументов =ТаблицаЗначенийМСФО.ВыгрузитьКолонку("РегистраторХозрасчетный");
	ТЗ_ДанныеРСБУ = СБ_ПолучитьДанныеРСБУ(СписокДокументов);
	Выборка = РезультатЗапроса.Выбрать();
	
	//-СБ Пискунова 30.09.2016 #2531
	
	ДокументОперация = ЭтотОбъект.Ссылка;
	ИмяИсточника = "Хозрасчетный";
	ИмяПриемника = "бит_Дополнительный_2";	
	КодПравилТрансляции = бит_МеханизмТрансляции.ПолучитьПравилаИКэш(Организация
												                    ,ИмяИсточника
												                    ,ИмяПриемника
																	,ДокументОперация);
																	
    //Найдем все счета, у которых Субконто "СтатьиЗатрат"
	ЗапросСчетов = Новый Запрос;
	ЗапросСчетов.Текст = "ВЫБРАТЬ
	                     |	Хозрасчетный.Ссылка КАК Ссылка,
	                     |	Хозрасчетный.ВидыСубконто.(
	                     |		ВидСубконто
	                     |	)
	                     |ИЗ
	                     |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	                     |ГДЕ
	                     |	Хозрасчетный.ВидыСубконто.ВидСубконто = &ВидСубконто
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	Ссылка";
    ЗапросСчетов.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);			
	Таблица = ЗапросСчетов.Выполнить().Выгрузить();
	МассивСчетовСтатьиЗатрат = Таблица.ВыгрузитьКолонку("Ссылка"); 

	Пока Выборка.Следующий() Цикл
		//+СБ ПИскунова 30.09.2016 #2531
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("РегистраторХозрасчетный",Выборка.РегистраторХозрасчетный);
		ПараметрыОтбора.Вставить("СуммаОборот",Выборка.СуммаОборот);
		НайденныеСтроки = ТЗ_ДанныеРСБУ.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() >0 Тогда
			СтрокаДанныхРСБУ  = НайденныеСтроки[0];
		Иначе
			СБ_ДобавитьНовуюСтрокуБезДанныхРСБУ(Выборка,Неопределено);
			Продолжить;
		КонецЕсли;
		//Если Выборка.НомерСтрокиИсточника = Null Тогда
		//	Сообщить("По документу: " + Выборка.Регистратор + " не заполнены записи в регистре ""Соответствие записей трансляции");
		//	Продолжить;
		//КонецЕсли;
		//
		//Если Выборка.РегистраторХозрасчетный = Null Тогда
		//	Сообщить("По документу: " + Выборка.Регистратор + " не сопоставить проводки из Хозрасчетного регистра, возможно проводки РСБУ из другого периода");
		//	Продолжить;
		//КонецЕсли;
		//-СБ ПИскунова 30.09.2016 #2531

		Документ = Выборка.Регистратор;
		ТипДокумента = ТипЗнч(Документ);
		
		//В условном операторе перебираем все типы документов из ТЗ
		Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
				Сообщить("Для документа: " + Выборка.Регистратор + " не заполнено значение доп статьи затрат.");
				ЗаписьПриемникСтруктура = Новый Структура("СчетДт, СчетКт");
				ЗаписьПриемникСтруктура.СчетДт = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
				ЗаписьПриемникСтруктура.СчетКт = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
				ДобавитьНовуюСтроку(Выборка, ЗаписьПриемникСтруктура);
				Продолжить;
			КонецЕсли;
			
			//Если наш счет уже присутствует в массиве, тогда перемещаем его на первое место при обходе
			Если МассивСчетовСтатьиЗатрат.Найти(Выборка["Счет" + ДтКт]) <> Неопределено Тогда
				МассивСчетовСтатьиЗатрат.Удалить(МассивСчетовСтатьиЗатрат.Найти(Выборка["Счет" + ДтКт]));
				МассивСчетовСтатьиЗатрат.Вставить(0,Выборка["Счет" + ДтКт]); 
			КонецЕсли;
			
			
			Для Каждого СчетСтатьиЗатрат Из МассивСчетовСтатьиЗатрат Цикл 
				
				Параметры = Новый Структура;
				Если ДтКт = "Дт" Тогда
					Параметры.Вставить("СчетДт"		      , СчетСтатьиЗатрат);
					Параметры.Вставить("СчетКт"		      , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
				Иначе
					Параметры.Вставить("СчетКт"		      , СчетСтатьиЗатрат);
					Параметры.Вставить("СчетДт"		      , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
				КонецЕсли;
				Параметры.Вставить("СубконтоДт1"      , Выборка.Значение);
				Параметры.Вставить("СубконтоКт1"      , Выборка.Значение);
				//+СБ Пискунова В 2016-11-09 #2730
				//Параметры.Вставить("ПодразделениеДт"  , Выборка.ПодразделениеДт);
				//Параметры.Вставить("ПодразделениеКт"  , Выборка.ПодразделениеКт);
				Попытка
					Параметры.Вставить("ПодразделениеДт"  , СтрокаДанныхРСБУ.ПодразделениеДт);
					Параметры.Вставить("ПодразделениеКт"  , СтрокаДанныхРСБУ.ПодразделениеКт);
				Исключение
				КонецПопытки;
                //-СБ Пискунова В 2016-11-09 #2730

				Параметры.Вставить("Сумма"            , Выборка.СуммаОборот);
				
				Отказ = Ложь;
				
				ЗаписьПриемникСтруктура = бит_МеханизмТрансляции.ВыполнитьПодборСчетаПоПравилам(Параметры
																								,Организация
																								,ИмяИсточника
																								,ИмяПриемника
																								,Выборка.Регистратор
																								,КодПравилТрансляции
																								,Отказ);
				
				
				Если ЗаписьПриемникСтруктура.Отказ = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗаписьПриемникСтруктура.ЗаписьПриемник["Счет" + ДтКт] <> ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка() Тогда 
					Если НЕ ЗаписьПриемникСтруктура.ЗаписьПриемник["Счет" + ДтКт].ПринадлежитЭлементу(ПланыСчетов.бит_Дополнительный_2.Расходы) Тогда
						ЗаписьПриемникСтруктура.ЗаписьПриемник["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();																					
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗаписьПриемникСтруктура = ЗаписьПриемникСтруктура.ЗаписьПриемник;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаДолга") Тогда	
			
			ЗаписьПриемникСтруктура = Новый Структура("Счет"+ДтКт);			
			ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду("62501");			
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвизоПрочееВходящее")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.АвизоПрочееИсходящее")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.РегламентнаяОперация")Тогда
			
			ЗаписьПриемникСтруктура = Новый Структура("Счет" + ДтКт);
			
			мЭлементВерний = ПланыСчетов.Хозрасчетный.ПустаяСсылка();																				
			НайтиСамогоВерхнего(Выборка["Счет" + КтДт]);																				
			Если мЭлементВерний = ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств Тогда
				
				ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.АмортизацияОС_расх;
				
			ИначеЕсли Выборка["Счет"+КтДт] = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				
				ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.ПрочиеРаботыУслуги;
				
			КонецЕсли;			
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияБух") Тогда
			
			ЗаписьПриемникСтруктура = Новый Структура("Счет" + ДтКт);
			//+СБ Пискунова #2730 07.12.2016 
			//Если Выборка["Счет" + КтДт] <> ПланыСчетов.Хозрасчетный.ПустаяСсылка()  Тогда
			  Если Выборка["Счет" + КтДт] <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() и ТипЗнч(Выборка["Счет" + КтДт]) = ТипЗнч(ПланыСчетов.Хозрасчетный.ПустаяСсылка()) Тогда
			//-СБ Пискунова #2730 07.12.2016      		
				
				Если Выборка["Счет" + КтДт].ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям) Тогда //19
					
					ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.НДСНеПринимаемыйКВычету;
								
				ИначеЕсли Выборка["Счет" + КтДт] = ПланыСчетов.Хозрасчетный.ФСС Тогда  //69.01
					
					//+СБ Пискунова #2531 нет такого субсчета больше					
					//ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.ЕСНрасходы; //72103
					ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.СтраховыеВзносыСФОТ; //72103
					//-СБ Пискунова #2531 нет такого субсчета больше  
					
				ИначеЕсли Выборка["Счет" + КтДт] = ПланыСчетов.Хозрасчетный.НДС Тогда //68.02
					
					ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.НДСНеПринимаемыйКВычету; //73204
										
				ИначеЕсли Выборка["Счет" + КтДт] = ПланыСчетов.Хозрасчетный.ТранспортныйНалог Тогда //68.07
					
					ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.РасходТранспортныйНалог; //73203
					
				ИначеЕсли Выборка["Счет" + КтДт] = ПланыСчетов.Хозрасчетный.НалогНаИмущество Тогда //68.08
					
					ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.РасходНалогНаИмущество; //73201
					
				ИначеЕсли Выборка["Счет" + КтДт] = ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы Тогда //68.10
					
					ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.ПрочиеОперационныеНалоги; //73205
					
				ИначеЕсли Выборка["Счет" + КтДт] = ПланыСчетов.Хозрасчетный.ЕНВД Тогда //68.11
					
					ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.ПрочиеОперационныеНалоги; //73205				
					
				ИначеЕсли Выборка["Счет"+КтДт] = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда  //79.02
				
					ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.ПрочиеРаботыУслуги;
					
				Иначе 
					
					ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
					
				КонецЕсли;
				
			Иначе
				ЗаписьПриемникСтруктура["Счет" + ДтКт] = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
			КонецЕсли;
		
		
			
		КонецЕсли;
		
		//БИТ АКриштопов 17022016 -->>
		Если НЕ ЗаписьПриемникСтруктура = Неопределено Тогда
			ДобавитьНовуюСтроку(Выборка, ЗаписьПриемникСтруктура);			
		КонецЕсли;
		//БИТ АКриштопов 17022016 <<--		
	КонецЦикла;
	
	
	
КонецФункции

Процедура ДобавитьНовуюСтроку(Выборка, ЗаписьПриемникСтруктура)
		
	НоваяСтрокаКонечнойТаблицы = ТаблицаРазноски.Добавить();
	НоваяСтрокаКонечнойТаблицы.Регистратор  = Выборка.Регистратор;
	НоваяСтрокаКонечнойТаблицы.СчетРазноски = ЗаписьПриемникСтруктура["Счет" + ДтКт];
	
	НоваяСтрокаКонечнойТаблицы.Объект       = Выборка["Субконто"+ДтКт+"1"];
	//БИТ Тртилек дополнительно добавим функцию и период
	НоваяСтрокаКонечнойТаблицы.Функция       = Выборка["Субконто"+ДтКт+"2"];
	НоваяСтрокаКонечнойТаблицы.Период       = Выборка["Субконто"+ДтКт+"3"];
	///БИТ Тртилек
	НоваяСтрокаКонечнойТаблицы.Сумма        = Выборка.СуммаОборот;

КонецПроцедуры

Процедура НайтиСамогоВерхнего(ТекЭлемент)
	
	Если НЕ ЗначениеЗаполнено(ТекЭлемент.Родитель) Тогда
		мЭлементВерний = ТекЭлемент;
	Иначе
		НайтиСамогоВерхнего(ТекЭлемент.Родитель);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//НашаФорма = ЭтотОбъект.ПолучитьФорму("ФормаДокумента");
	
	ИндикаторНаФорме = Индикатор;
	ОтборДляСтрок = Новый Структура("СчетРазноски");
	ОтборДляСтрок.СчетРазноски = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	НайденныеСтроки = ТаблицаРазноски.НайтиСтроки(ОтборДляСтрок);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Сообщить("Не все строки табличной части заполнены. Документ проведен не будет");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	ДокументыСПересекающимсяПериодом = ПоискДокументовСПересекающимисяПериодами();
	
	//#Если Клиент Тогда	
	Если ДокументыСПересекающимсяПериодом.Количество() > 0 Тогда
		Пока ДокументыСПересекающимсяПериодом.Следующий() Цикл
			Сообщить("Период документа пересекается с периодом существующего документа: "+ Строка(ДокументыСПересекающимсяПериодом.Ссылка));
		КонецЦикла;
	КонецЕсли;
	//#КонецЕсли
	
	Индикатор = 0;
	//ИндикаторНаФорме.МаксимальноеЗначение = ТаблицаРазноски.Количество();
	
	Если ДтКт = "Дт" Тогда
		КтДт = "Кт";
	Иначе
		КтДт = "Дт";
	КонецЕсли;
	
	НаборЗаписей = ЭтотОбъект.Движения.бит_Дополнительный_2;
	НаборЗаписей.Очистить();
	
	Для Каждого Строка Из ТаблицаРазноски Цикл
		
		Если Строка.СчетРазноски.Пустая() Тогда
			Сообщить("В строке №"+Строка.НомерСтроки+" не задан счет Дт. Движения созданы не будут");
			Индикатор = Индикатор + 1;
			Продолжить;
		КонецЕсли;			
			
			НоваяСтрокаНабора = НаборЗаписей.Добавить();
			НоваяСтрокаНабора["Счет"+ДтКт]              = Строка.СчетРазноски;
			НоваяСтрокаНабора["Счет"+КтДт]              = ЭтотОбъект.Счет;
			НоваяСтрокаНабора.Период                    = ЭтотОбъект.Дата;
			НоваяСтрокаНабора.СуммаМУ                   = Строка.Сумма;
			НоваяСтрокаНабора.СуммаРегл                 = Строка.Сумма;
			НоваяСтрокаНабора.СуммаУпр                  = Строка.Сумма;
			НоваяСтрокаНабора.Организация               = ЭтотОбъект.Организация;	 				
			НоваяСтрокаНабора.ВидДвиженияМСФО           = Перечисления.БИТ_ВидыДвиженияМСФО.РСБУ;
			//установим объект
			Если Строка.Объект <> Справочники.ОбъектыСтроительства.ПустаяСсылка() Тогда
				
				НоваяСтрокаНабора["Субконто" + КтДт].Объект = Строка.Объект;
				Если НоваяСтрокаНабора["Счет"+ДтКт].Видысубконто.Найти(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Объект) <> Неопределено Тогда
					НоваяСтрокаНабора["Субконто"+ДтКт].Объект = Строка.Объект;
				КонецЕсли;
					
			КонецЕсли;
			
			//установим функцию
			Если Строка.Функция <> Справочники.Подразделения.ПустаяСсылка() Тогда
				
				НоваяСтрокаНабора["Субконто" + КтДт].Функции = Строка.Функция;
				Если НоваяСтрокаНабора["Счет"+ДтКт].Видысубконто.Найти(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Функции) <> Неопределено Тогда
					НоваяСтрокаНабора["Субконто"+ДтКт].Функции = Строка.Функция;
				КонецЕсли;
					
			КонецЕсли;

			//установим период
			Если Строка.Период <> Справочники.рс_МесяцыНачисления.ПустаяСсылка() Тогда
				
				НоваяСтрокаНабора["Субконто" + КтДт].Периоды = Строка.Период;
				Если НоваяСтрокаНабора["Счет"+ДтКт].Видысубконто.Найти(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Периоды) <> Неопределено Тогда
					НоваяСтрокаНабора["Субконто"+ДтКт].Периоды = Строка.Период;
				КонецЕсли;
					
			КонецЕсли;
		
		Индикатор = Индикатор + 1;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ЭтотОбъект.Записать();
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	НаборЗаписей = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();		
	
КонецПроцедуры

Функция ПоискДокументовСПересекающимисяПериодами() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_РеклассификацияНеПринимаемыхРасходов.Ссылка
	               |ИЗ
	               |	Документ.бит_РеклассификацияНеПринимаемыхРасходов КАК бит_РеклассификацияНеПринимаемыхРасходов
	               |ГДЕ
	               |	бит_РеклассификацияНеПринимаемыхРасходов.Организация = &Организация
	               |	И бит_РеклассификацияНеПринимаемыхРасходов.Счет = &Счет
	               |	И бит_РеклассификацияНеПринимаемыхРасходов.ДтКт = &ДтКт
	               |	И бит_РеклассификацияНеПринимаемыхРасходов.Проведен = ИСТИНА
	               |	И (НЕ(бит_РеклассификацияНеПринимаемыхРасходов.ПериодС < &ПериодС
	               |					И бит_РеклассификацияНеПринимаемыхРасходов.ПериодПо < &ПериодС
	               |				ИЛИ бит_РеклассификацияНеПринимаемыхРасходов.ПериодС > &ПериодПо
	               |					И бит_РеклассификацияНеПринимаемыхРасходов.ПериодПо > &ПериодПо))
	               |	И бит_РеклассификацияНеПринимаемыхРасходов.Ссылка <> &Регистратор";
				   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДтКт", ДтКт);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ПериодС", ПериодС);
	Запрос.УстановитьПараметр("ПериодПо",ПериодПо);
	Запрос.УстановитьПараметр("Регистратор",ЭтотОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции


Процедура ПриЗаписи(Отказ)
	РегистрБухгалтерии = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024");
КонецПроцедуры

//+СБ Пискунова В #2531 30-09-2016
//Возьмем данные РСБУ 
Функция  СБ_ПолучитьДанныеРСБУ(СписокДокументов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетДт,
	|	ХозрасчетныйОборотыДтКт.ПодразделениеДт,
	|	ХозрасчетныйОборотыДтКт.ПодразделениеКт,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК РегистраторХозрасчетный,
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт3,
	|	ХозрасчетныйОборотыДтКт.ВалютаДт,
	|	ХозрасчетныйОборотыДтКт.ВалютаКт,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1РСБУ,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2РСБУ,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК СубконтоДт3РСБУ,
	|	ХозрасчетныйОборотыДтКт.Организация,
	|	ХозрасчетныйОборотыДтКт.Период
	
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.Регистратор В(&СписокДокументов)";
	
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокДокументов",СписокДокументов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
	
КонецФункции 
Процедура СБ_ДобавитьНовуюСтрокуБезДанныхРСБУ(Выборка, ЗаписьПриемникСтруктура)
	
	НоваяСтрокаКонечнойТаблицы = ТаблицаРазноски.Добавить();
	НоваяСтрокаКонечнойТаблицы.Регистратор  = Выборка.Регистратор;
	НоваяСтрокаКонечнойТаблицы.Объект       = Выборка["Субконто"+ДтКт+"1"];  
	НоваяСтрокаКонечнойТаблицы.Функция       = Выборка["Субконто"+ДтКт+"2"];  	
	НоваяСтрокаКонечнойТаблицы.Период       = Выборка["Субконто"+ДтКт+"3"]; 
	НоваяСтрокаКонечнойТаблицы.Сумма        = Выборка.СуммаОборот;  	
	
КонецПроцедуры
//-СБ ПИскунова В #2531
