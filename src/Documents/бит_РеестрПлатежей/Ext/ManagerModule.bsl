#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр платежей полный.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр_Полный";
	КомандаПечати.Представление = НСтр("ru = 'Реестр платежей полный'");
	Если НЕ бит_ОбщегоНазначения.ЭтоУТ() Тогда
		КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КонецЕсли;
	КомандаПечати.Порядок       = 10;
	
	// Реестр платежей в оплату.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр_ВОплату";
	КомандаПечати.Представление = НСтр("ru = 'Реестр платежей в оплату'");
	Если НЕ бит_ОбщегоНазначения.ЭтоУТ() Тогда
		КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КонецЕсли;
	КомандаПечати.Порядок       = 20;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Реестр_Полный") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Реестр_Полный",
			"Реестр платежей полный",
			СформироватьПечатнуюФормуРеестраПлатежей(МассивОбъектов),
			,
			"Документ.бит_РеестрПлатежей.РеестрПлатежей");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Реестр_ВОплату") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Реестр_ВОплату",
			"Реестр платежей в оплату",
			СформироватьПечатнуюФормуРеестраПлатежей(МассивОбъектов, Истина),
			,
			"Документ.бит_РеестрПлатежей.РеестрПлатежей");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НовыеНастройкиФормыДокумента() Экспорт

	Настройки = Новый Структура; 
	Настройки.Вставить("РежимЗаписи",							"Запись");
	Настройки.Вставить("РежимСообщений",						"Все");
	Настройки.Вставить("РежимТабло",							"Автономно");
	Настройки.Вставить("ОтменитьФильтрПоСчетамВТабло", 			Ложь);
	Настройки.Вставить("ИнтервалАвтообновленияТаблоСчетов", 	0);
	Настройки.Вставить("ИсточникДанныхТабло", 					Перечисления.бит_РежимПолученияДанныхТаблоСчетов.ДанныеБухгалтерскогоУчета);
	Настройки.Вставить("ПоказыватьСуммуПланируемыхПоступлений", Ложь);
	Настройки.Вставить("НеФормироватьПлатежныеПоручения", 		Ложь);
	Настройки.Вставить("ПроводитьПлатежныеПоручения", 			Ложь);
	Настройки.Вставить("НеФормироватьДокументыОплаты", 			Ложь);
	Настройки.Вставить("ПроводитьДокументыОплаты", 				Ложь);
	Настройки.Вставить("ОтобразитьТаблоСчетов", 				Ложь);
	
	Возврат Настройки;
	
КонецФункции

// Процедура заполняет соотвестствие доступности флага "Оплата",
// в зависимости от заполненности платежного документа в регистре сведений "бит_ДополнительныеАналитики".
// 
// Параметры:
//  ТаблицаСДанными 			 - ТаблицаЗначений, Оформление строк табличного поля.
//  СоответствиеДоступностиФлага - Соответствие.
//  ЭтоОформлениеСтрок 			 - Булево (По умолчанию = Ложь).
//  ПолучениеПлДокумента 		 - Булево (По умолчанию = Ложь).
//  УправляемаяФорма 		 	 - Булево (По умолчанию = Ложь).
// 
Процедура ЗаполнитьСоответствиеДоступностиФлага_Оплата(ТаблицаСДанными, СоответствиеДоступностиФлага, 
			ЭтоОформлениеСтрок = Ложь, ПолучениеПлДокумента = Ложь, УправляемаяФорма = Ложь) Экспорт 
	
	Если ТаблицаСДанными.Количество() <> 0 Тогда
	
		Запрос = Новый Запрос;
		
		ЭтоМассивСтрок = ТипЗнч(ТаблицаСДанными) = Тип("Массив");
		
		// Если это не таблица значений, тогда
		Если ЭтоОформлениеСтрок Или ЭтоМассивСтрок Тогда
			
			ТаблицаДляЗаполнения = Новый ТаблицаЗначений;
			ТаблицаДляЗаполнения.Колонки.Добавить("НомерСтроки", 	  Новый ОписаниеТипов("Число"));
			ТаблицаДляЗаполнения.Колонки.Добавить("Заявка", 	  	  Новый ОписаниеТипов("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств"));
			ТаблицаДляЗаполнения.Колонки.Добавить("ПлатежнаяПозиция", Новый ОписаниеТипов("ДокументСсылка.бит_ПлатежнаяПозиция"));
			
			Если ЭтоОформлениеСтрок Тогда
				
				Для Каждого ТекСтрока Из ТаблицаСДанными Цикл
					НовСтрока = ТаблицаДляЗаполнения.Добавить();
					Если Не УправляемаяФорма Тогда
						ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока.ДанныеСтроки);
					Иначе
						ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
					КонецЕсли; 
					
				КонецЦикла;
				
			Иначе
				бит_РаботаСКоллекциями.ЗагрузитьВТаблицуЗначений(ТаблицаСДанными, ТаблицаДляЗаполнения);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ТаблицаСДанными", ТаблицаДляЗаполнения);
			
		Иначе
			Запрос.УстановитьПараметр("ТаблицаСДанными", ТаблицаСДанными);
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСДанными.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСДанными.Заявка КАК Заявка,
		|	ТаблицаСДанными.ПлатежнаяПозиция КАК ПлатежнаяПозиция
		|ПОМЕСТИТЬ ТаблицаСДанными
		|ИЗ
		|	&ТаблицаСДанными КАК ТаблицаСДанными
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(бит_ДополнительныеАналитики.ЗначениеАналитики КАК Документ.бит_ПлатежнаяПозиция) КАК ПлатежнаяПозиция,
		|	бит_ДополнительныеАналитики.Объект КАК ПлатежныйДокумент
		|ПОМЕСТИТЬ ВТ_ДокументыОплаты
		|ИЗ
		|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
		|ГДЕ
		|	бит_ДополнительныеАналитики.ЗначениеАналитики В
		|			(ВЫБРАТЬ
		|				ТаблицаСДанными.ПлатежнаяПозиция
		|			ИЗ
		|				ТаблицаСДанными КАК ТаблицаСДанными)
		|	И бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция,
		|	бит_ДокументыМножественнойОплаты.ДокументОплаты
		|ИЗ
		|	РегистрСведений.бит_ДокументыМножественнойОплаты КАК бит_ДокументыМножественнойОплаты
		|ГДЕ
		|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция В
		|			(ВЫБРАТЬ
		|				ТаблицаСДанными.ПлатежнаяПозиция
		|			ИЗ
		|				ТаблицаСДанными КАК ТаблицаСДанными)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументыОснованияПлатежногоПоручения.ПлатежнаяПозиция,
		|	ДокументыОснованияПлатежногоПоручения.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручение.бит_ПлатежныеПозиции КАК ДокументыОснованияПлатежногоПоручения
		|ГДЕ
		|	НЕ ДокументыОснованияПлатежногоПоручения.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_ДокументыОплаты.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
		|	ВТ_ДокументыОплаты.ПлатежныйДокумент КАК ПлатежныйДокумент
		|ПОМЕСТИТЬ АналитикиДокументов
		|ИЗ
		|	ВТ_ДокументыОплаты КАК ВТ_ДокументыОплаты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПлатежнаяПозиция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бит_СтатусыОбъектов.Объект КАК Объект,
		|	бит_СтатусыОбъектов.Статус КАК СтатусЗаявки
		|ПОМЕСТИТЬ СтатусыОбъектов
		|ИЗ
		|	РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|ГДЕ
		|	бит_СтатусыОбъектов.Объект В
		|			(ВЫБРАТЬ
		|				ТаблицаСДанными.Заявка
		|			ИЗ
		|				ТаблицаСДанными КАК ТаблицаСДанными)
		|	И бит_СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бит_СтатусыОбъектов.Объект КАК Объект,
		|	бит_СтатусыОбъектов.Статус КАК СостояниеОплаты
		|ПОМЕСТИТЬ СостоянияОплат
		|ИЗ
		|	РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|ГДЕ
		|	бит_СтатусыОбъектов.Объект В
		|			(ВЫБРАТЬ
		|				ТаблицаСДанными.Заявка
		|			ИЗ
		|				ТаблицаСДанными КАК ТаблицаСДанными)
		|	И бит_СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.СостояниеОплаты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//Заменено на:
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-09 (Исправление ошибки
		|	ТаблицаСДанными.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСДанными.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
		|	АналитикиДокументов.ПлатежныйДокумент КАК ПлатежныйДокумент,
		// +СБ. Широков Николай. 2014-10-02. Оптимизация
		|	ВЫРАЗИТЬ(ТаблицаСДанными.ПлатежнаяПозиция КАК Документ.бит_ПлатежнаяПозиция).Проведен КАК ПлатежнаяПозиция_Проведен,
		// -СБ. Широков Николай
		// 1c-izhtc Оптимизация (
		|	АналитикиДокументов.ПлатежныйДокумент.Дата КАК ДатаОплатыФакт,
		// 1c-izhtc Оптимизация )
		|	СтатусыОбъектов.СтатусЗаявки КАК СтатусЗаявки,
		|	ВЫБОР
		|		КОГДА СтатусыОбъектов.СтатусЗаявки = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Утверждена)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗаявкаУтверждена,
		|	СостоянияОплат.СостояниеОплаты КАК СостояниеОплаты
		|ИЗ
		|	ТаблицаСДанными КАК ТаблицаСДанными
		|		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиДокументов КАК АналитикиДокументов
		|		ПО ТаблицаСДанными.ПлатежнаяПозиция = АналитикиДокументов.ПлатежнаяПозиция
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО ТаблицаСДанными.Заявка = СтатусыОбъектов.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОплат КАК СостоянияОплат
		|		ПО ТаблицаСДанными.Заявка = СостоянияОплат.Объект";
			
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			// Устанавливаем соответствие номер строки - не "заполненность платежного документа" и заявка должна быть утверждена.
			СоответствиеДоступностиФлага.Вставить(ВыборкаЗапроса.НомерСтроки, Не ЗначениеЗаполнено(ВыборкаЗапроса.ПлатежныйДокумент) 
																			  // +СБ. Широков Николай. 2014-10-02. Оптимизация
																			  И ВыборкаЗапроса.ПлатежнаяПозиция_Проведен
																			  // -СБ. Широков Николай
																			  И ВыборкаЗапроса.ЗаявкаУтверждена);
																			 
			
			// Устанавливаем соответствие платежная позиция - структура(платежный документ, статус заявки),
			// это необходимо для заполнения платежных документов и статусов заявок в табличное поле "Заявки".
			Если ЭтоОформлениеСтрок Или ПолучениеПлДокумента Тогда
				
				СтруктураДляЗаполнения = Новый Структура;
				СтруктураДляЗаполнения.Вставить("ПлатежныйДокумент", ВыборкаЗапроса.ПлатежныйДокумент);
				СтруктураДляЗаполнения.Вставить("СтатусЗаявки", 	 ВыборкаЗапроса.СтатусЗаявки);
				СтруктураДляЗаполнения.Вставить("СостояниеОплаты",   ВыборкаЗапроса.СостояниеОплаты);
				СтруктураДляЗаполнения.Вставить("ДатаОплатыФакт",   ВыборкаЗапроса.ДатаОплатыФакт); // 1c-izhtc Оптимизация
				СоответствиеДоступностиФлага.Вставить(ВыборкаЗапроса.ПлатежнаяПозиция, СтруктураДляЗаполнения);
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСоответствиеДоступностиФлага_Оплата()

Функция ВыборкаДляЗаполненияТаблицыЗаявок(МассивПлатежек) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПлатежек",  МассивПлатежек);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Платежки.Ссылка КАК ПлатежнаяПозиция,
	|	Платежки.Организация КАК Организация,
	|	Платежки.ВалютаДокумента КАК ВалютаДокумента,
	|	Платежки.СтавкаНДС КАК СтавкаНДС,
	|	Платежки.Сумма КАК Сумма,
	|	Платежки.НДС КАК НДС,
	|	Платежки.Номер КАК НомерПлатежнойПозиции,
	|	Платежки.Дата КАК ДатаПлатежнойПозиции,
	|	Платежки.Проведен КАК ПлатежнаяПозицияПроведена,
	|	Платежки.Важность КАК Важность,
	|	Платежки.ДатаРасхода КАК ДатаРасхода,
	|	Платежки.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Платежки.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Платежки.ДатаПлатежаКрайняя КАК ДатаПлатежаКрайняя,
	|	Платежки.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Платежки.БанковскийСчетОрганизация КАК БанковскийСчетОрганизация,
	|	Платежки.Касса КАК Касса,
	|	Платежки.ДокументОснование КАК ДокументОснование,
	|	Платежки.УсловиеПоКурсу КАК УсловиеПоКурсу,
	|	Платежки.Процент КАК Процент
	|ПОМЕСТИТЬ ПлатежныеПозиции
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция КАК Платежки
	|ГДЕ
	|	Платежки.Ссылка В(&МассивПлатежек)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныеПозиции.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
	|	ДополнительныеАналитики.Объект КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ДополнительныеАналитики.Объект ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ТОГДА ВЫРАЗИТЬ(ДополнительныеАналитики.Объект КАК Документ.СписаниеСРасчетногоСчета).Дата
	|		КОГДА ДополнительныеАналитики.Объект ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(ДополнительныеАналитики.Объект КАК Документ.РасходныйКассовыйОрдер).Дата
	|	КОНЕЦ КАК ДатаОплатыФакт
	|ПОМЕСТИТЬ ТаблицаДокументыОплаты
	|ИЗ
	|	ПлатежныеПозиции КАК ПлатежныеПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеАналитики КАК ДополнительныеАналитики
	|		ПО (ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция))
	|			И ПлатежныеПозиции.ПлатежнаяПозиция = ДополнительныеАналитики.ЗначениеАналитики
	|ГДЕ
	|	(ДополнительныеАналитики.Объект ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ИЛИ ДополнительныеАналитики.Объект ССЫЛКА Документ.РасходныйКассовыйОрдер)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПлатежныеПозиции.ПлатежнаяПозиция,
	|	ДокументыМножественнойОплаты.ДокументОплаты,
	|	ДокументыМножественнойОплаты.ДокументОплаты.Дата
	|ИЗ
	|	ПлатежныеПозиции КАК ПлатежныеПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДокументыМножественнойОплаты КАК ДокументыМножественнойОплаты
	|		ПО ПлатежныеПозиции.ПлатежнаяПозиция = ДокументыМножественнойОплаты.ПлатежнаяПозиция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлатежнаяПозиция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланируемыйРасходДенежныхСредствОстатки.ДокументПланирования КАК ПлатежнаяПозиция,
	|	ВЫБОР
	|		КОГДА ПланируемыйРасходДенежныхСредствОстатки.СуммаОстаток > 0
	|			ТОГДА ПланируемыйРасходДенежныхСредствОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОстаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Остатки(
	|			,
	|			ДокументПланирования В
	|				(ВЫБРАТЬ
	|					ПлатежныеПозиции.ПлатежнаяПозиция КАК ПлатежнаяПозиция
	|				ИЗ
	|					ПлатежныеПозиции КАК ПлатежныеПозиции)) КАК ПланируемыйРасходДенежныхСредствОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлатежнаяПозиция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныеПозиции.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
	|	ПлатежныеПозиции.Организация КАК Организация,
	|	ПлатежныеПозиции.ВалютаДокумента КАК ВалютаДокумента,
	|	ПлатежныеПозиции.СтавкаНДС КАК СтавкаНДС,
	|	ПлатежныеПозиции.Сумма КАК Сумма,
	|	ПлатежныеПозиции.НДС КАК НДС,
	|	ПлатежныеПозиции.НомерПлатежнойПозиции КАК НомерПлатежнойПозиции,
	|	ПлатежныеПозиции.ДатаПлатежнойПозиции КАК ДатаПлатежнойПозиции,
	|	ПлатежныеПозиции.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПлатежныеПозиции.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПлатежныеПозиции.ПлатежнаяПозицияПроведена КАК ПлатежнаяПозицияПроведена,
	|	ПлатежныеПозиции.Важность КАК Важность,
	|	ПлатежныеПозиции.ДатаРасхода КАК ДатаРасхода,
	|	ПлатежныеПозиции.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежныеПозиции.ДатаПлатежаКрайняя КАК ДатаПлатежаКрайняя,
	|	ВЫБОР
	|		КОГДА Заявка.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные)
	|			ТОГДА ПлатежныеПозиции.БанковскийСчетОрганизация
	|		ИНАЧЕ ПлатежныеПозиции.Касса
	|	КОНЕЦ КАК БанковскийСчетОрганизация,
	|	ВЫБОР
	|		КОГДА Заявка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|			ТОГДА &ВалютаРеглУчета
	|		ИНАЧЕ ПлатежныеПозиции.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	Заявка.ФормаОплаты КАК ФормаОплаты,
	|	Заявка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Заявка.Контрагент КАК Контрагент,
	|	Заявка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Заявка.СтатьяОборотов КАК СтатьяОборотов,
	|	Заявка.ЦФО КАК ЦФО,
	|	Заявка.Аналитика_1 КАК Аналитика_1,
	|	Заявка.Аналитика_2 КАК Аналитика_2,
	|	Заявка.Аналитика_3 КАК Аналитика_3,
	|	Заявка.Аналитика_4 КАК Аналитика_4,
	|	Заявка.Аналитика_5 КАК Аналитика_5,
	|	Заявка.Аналитика_6 КАК Аналитика_6,
	|	Заявка.Аналитика_7 КАК Аналитика_7,
	|	Заявка.Проект КАК Проект,
	|	Заявка.Номер КАК НомерЗаявки,
	|	Заявка.Дата КАК ДатаЗаявки,
	|	Заявка.Ссылка КАК Заявка,
	|	ЕСТЬNULL(Заявка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	СтатусыОбъектов.Статус КАК СтатусЗаявки,
	|	ТаблицаДокументыОплаты.ДокументОплаты КАК ПлатежныйДокумент,
	|	ТаблицаДокументыОплаты.ДатаОплатыФакт КАК ДатаОплатыФакт,
	|	ПлатежныеПозиции.УсловиеПоКурсу КАК УсловиеПоКурсу,
	|	ПлатежныеПозиции.Процент КАК Процент,
	|	ЕСТЬNULL(Остатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	ПлатежныеПозиции КАК ПлатежныеПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК Заявка
	|		ПО ПлатежныеПозиции.ДокументОснование = Заявка.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	|			И (Заявка.Ссылка = СтатусыОбъектов.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ПлатежныеПозиции.ПлатежнаяПозиция = Остатки.ПлатежнаяПозиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДокументыОплаты КАК ТаблицаДокументыОплаты
	|		ПО ПлатежныеПозиции.ПлатежнаяПозиция = ТаблицаДокументыОплаты.ПлатежнаяПозиция";
				   
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выбрать();		
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует печатную форму реестра платежей.
// 
// Параметры:
//  МассивСсылок 		   	  - Массив.
//  СтавитьОграничениеВОплату - Булево. По умолчанию Ложь.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент.
// 
Функция СформироватьПечатнуюФормуРеестраПлатежей(МассивСсылок, СтавитьОграничениеВОплату = Ложь)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_бит_РеестрПлатежей_РеестрПлатежей";
	
	// Получаем макет.
	Макет = ПолучитьМакет("РеестрПлатежей");
	
	// Полуаем области.
	ОблЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОблШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОблСтрока 			= Макет.ПолучитьОбласть("Строка");
	ОблРасшифровка      = Макет.ПолучитьОбласть("Расшифровка");
	ОблЛиния 			= Макет.ПолучитьОбласть("Линия");		 
	ОблШапкаСогласовано = Макет.ПолучитьОбласть("ШапкаСогласовано");
	ОблШапкаВизы 		= Макет.ПолучитьОбласть("ШапкаВизы");
	ОблСтрокаВизы 		= Макет.ПолучитьОбласть("СтрокаВизы");
	ОблГруппировка 		= Макет.ПолучитьОбласть("Группировка");
	ОблСтрокаОтступ 	= Макет.ПолучитьОбласть("СтрокаОтступ");
	ОблШапкаИтого 		= Макет.ПолучитьОбласть("ШапкаИтого");
	ОблСтрокаИтого 		= Макет.ПолучитьОбласть("СтрокаИтого");
		
	// Получим таблицу по итогам.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_РеестрПлатежейЗаявки.Ссылка,
	|	бит_РеестрПлатежейЗаявки.Заявка.Организация КАК Организация,
	|	СУММА(бит_РеестрПлатежейЗаявки.СуммаКОплате) КАК Сумма,
	|	бит_РеестрПлатежейЗаявки.Валюта
	|ИЗ
	|	Документ.бит_РеестрПлатежей.Заявки КАК бит_РеестрПлатежейЗаявки
	|ГДЕ
	|	бит_РеестрПлатежейЗаявки.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_РеестрПлатежейЗаявки.Заявка.Организация,
	|	бит_РеестрПлатежейЗаявки.Валюта,
	|	бит_РеестрПлатежейЗаявки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	// Изменение кода. Начало. 22.07.2014{{
	Если СтавитьОграничениеВОплату Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "бит_РеестрПлатежейЗаявки.Ссылка В(&МассивСсылок)", "бит_РеестрПлатежейЗаявки.Ссылка В(&МассивСсылок) 
														  |И бит_РеестрПлатежейЗаявки.Оплачено = Истина");	
	КонецЕсли;
	// Изменение кода. Конец. 22.07.2014}}
	ТаблицаПоИтогам = Запрос.Выполнить().Выгрузить();
	
	// Получим таблицу установленных виз.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_УстановленныеВизы.Объект КАК Ссылка,
	|	бит_УстановленныеВизы.Виза,
	|	бит_УстановленныеВизы.ФизическоеЛицо КАК ФИО
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	бит_УстановленныеВизы.Объект В(&МассивСсылок)
	|	И НЕ бит_УстановленныеВизы.Виза.РежимПечати = ЗНАЧЕНИЕ(Перечисление.бит_РежимПечатиВиз.НеВыводить)
	|
	|УПОРЯДОЧИТЬ ПО
	|	бит_УстановленныеВизы.КодСортировки";
	
	ТаблицаПоВизам = Запрос.Выполнить().Выгрузить();
	
	// Формируем запрос по реестру платежей.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокПлатежнаяПозицияРасш.Ссылка КАК ПлатежнаяПозиция,
	               |	СУММА(1) КАК КоличествоРасш
	               |ПОМЕСТИТЬ ТаблДеления
	               |ИЗ
	               |	Документ.бит_РеестрПлатежей.Заявки КАК ДокРеестрТчЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция.Распределение КАК ДокПлатежнаяПозицияРасш
	               |		ПО ДокРеестрТчЗаявки.ПлатежнаяПозиция = ДокПлатежнаяПозицияРасш.Ссылка
	               |ГДЕ
	               |	ДокРеестрТчЗаявки.Ссылка В(&МассивСсылок)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДокПлатежнаяПозицияРасш.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокРеестрТчЗаявки.Ссылка КАК Ссылка,
	               |	ДокРеестрТчЗаявки.Заявка КАК Заявка,
	               |	ДокРеестрТчЗаявки.Валюта КАК ВалютаДокумента,
	               |	СтатусыОбъектов.Статус КАК СтатусЗаявки,
	               |	ДокРеестрТчЗаявки.Заявка.Организация КАК Плательщик,
	               |	ДокПлатежнаяПозицияРасш.Ссылка КАК ПлатежнаяПозиция,
	               |	ТаблДеления.КоличествоРасш КАК КоличествоРасш,
	               |	ВЫБОР
	               |		КОГДА ТаблДеления.КоличествоРасш = 1
	               |			ТОГДА ДокРеестрТчЗаявки.СуммаКОплате
	               |		ИНАЧЕ ДокРеестрТчЗаявки.СуммаКОплате * (ДокПлатежнаяПозицияРасш.Сумма * 100 / ДокПлатежнаяПозицияРасш.Ссылка.Сумма) / 100
	               |	КОНЕЦ КАК СуммаКОплате,
	               |	ДокЗаявкаРасш.ЦФО КАК ЦФО,
	               |	ДокЗаявкаРасш.СтатьяОборотов КАК СтатьяОборотов,
	               |	ДокЗаявкаРасш.Проект КАК Проект,
	               |	ДокРеестрТчЗаявки.Заявка.Контрагент КАК Получатель,
	               |	ДокРеестрТчЗаявки.Заявка.ФизическоеЛицо КАК ФизЛицо,
	               |	ДокРеестрТчЗаявки.Заявка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ДокРеестрТчЗаявки.Заявка.НазначениеПлатежа КАК НазначениеПлатежа,
	               |	ДокРеестрТчЗаявки.Заявка.СверхБюджета КАК СверхБюджета,
	               |	ДокРеестрТчЗаявки.Заявка.ТипЗаявки КАК ТипЗаявки,
	               |	ДокРеестрТчЗаявки.Заявка.НазначениеПлатежаУпр КАК НазначениеПлатежаУпр
	               |ИЗ
	               |	Документ.бит_РеестрПлатежей.Заявки КАК ДокРеестрТчЗаявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СтатусыОбъектов
	               |		ПО ДокРеестрТчЗаявки.Заявка = СтатусыОбъектов.Объект
	               |			И (СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция.Распределение КАК ДокПлатежнаяПозицияРасш
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК ДокЗаявкаРасш
	               |			ПО ДокПлатежнаяПозицияРасш.Ссылка.ДокументОснование = ДокЗаявкаРасш.Ссылка
	               |				И ДокПлатежнаяПозицияРасш.ИД = ДокЗаявкаРасш.ИД
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ТаблДеления КАК ТаблДеления
	               |			ПО ДокПлатежнаяПозицияРасш.Ссылка = ТаблДеления.ПлатежнаяПозиция
	               |		ПО ДокРеестрТчЗаявки.ПлатежнаяПозиция = ДокПлатежнаяПозицияРасш.Ссылка
	               |ГДЕ
	               |	ДокРеестрТчЗаявки.Ссылка В(&МассивСсылок)
	               |ИТОГИ
	               |	МАКСИМУМ(Заявка),
	               |	МАКСИМУМ(ВалютаДокумента),
	               |	МАКСИМУМ(СтатусЗаявки),
	               |	СУММА(КоличествоРасш / КоличествоРасш) КАК КоличествоРасш,
	               |	СУММА(СуммаКОплате),
	               |	МАКСИМУМ(ЦФО),
	               |	МАКСИМУМ(СтатьяОборотов),
	               |	МАКСИМУМ(Проект),
	               |	МАКСИМУМ(Получатель),
	               |	МАКСИМУМ(ФизЛицо),
	               |	МАКСИМУМ(ДоговорКонтрагента),
	               |	МАКСИМУМ(НазначениеПлатежа),
	               |	МАКСИМУМ(СверхБюджета),
	               |	МАКСИМУМ(ТипЗаявки),
	               |	МАКСИМУМ(НазначениеПлатежаУпр)
	               |ПО
	               |	Ссылка,
	               |	Заявка,
	               |	ВалютаДокумента,
	               |	СтатусЗаявки,
	               |	Плательщик,
	               |	ПлатежнаяПозиция";
	      
	Если СтавитьОграничениеВОплату Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИТОГИ", "И ДокРеестрТчЗаявки.Оплачено = ИСТИНА 
														  |ИТОГИ");	
	КонецЕсли;
	
	МассивСформированных = Новый Массив;
	ПервыйДокумент		 = Истина;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаРеестр = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		
		Пока ВыборкаРеестр.Следующий() Цикл
			
			ТекДокумент = ВыборкаРеестр.Ссылка;
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			МассивСформированных.Добавить(ТекДокумент);
			
			// Заполняем заголовок табличного документа.
			ОблЗаголовок.Параметры.НомерДок = бит_ОбщегоНазначенияКлиентСервер.ПолучитьНомерНаПечать(ТекДокумент);
			ОблЗаголовок.Параметры.ДатаДок  = Формат(ТекДокумент.Дата, "ДФ=dd.MM.yyyy");
			
			// Выводим заголовок с шапкой.
			ТабличныйДокумент.Вывести(ОблЗаголовок);
			ТабличныйДокумент.Вывести(ОблШапка);
			
			ВыборкаПлательщик = ВыборкаРеестр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Плательщик");
			ПорядковыйНомер   = 1;
			
			ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
			
			// Выводим данные по заявкам.
			Пока ВыборкаПлательщик.Следующий() Цикл
				
				// Выводим группировку.
				ОблГруппировка.Параметры.Группировка = ВыборкаПлательщик.Плательщик;
				ТабличныйДокумент.Вывести(ОблГруппировка, 1);
				
				Выборка = ВыборкаПлательщик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПлатежнаяПозиция");
				
				// Выводим данные по заявкам в пределах текущей группировки.
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.СверхБюджета Тогда
						ТекстСверхБюджета = "ru = 'Да'";
					Иначе
						ТекстСверхБюджета = "ru = 'Нет'";
					КонецЕсли;
					
					ПараметрыВидимости = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(Выборка.Заявка);
					
					Получатель = ?(ПараметрыВидимости.ЭтоПодотчет ИЛИ ПараметрыВидимости.ЭтоВыплатаЗПРаботнику
								  ,Выборка.ФизЛицо
								  ,Выборка.Получатель);
								  
					ДоговорКонтрагента = ?(ПараметрыВидимости.ДоговорНеобходим
										  ,Выборка.ДоговорКонтрагента
										  ,"");
					
					ОблСтрока.Параметры.Заполнить(Выборка);
					ОблСтрока.Параметры.Номер 		 	   = ПорядковыйНомер;
					ОблСтрока.Параметры.СверхБюджета 	   = НСтр(ТекстСверхБюджета);
					ОблСтрока.Параметры.Получатель 		   = Получатель;
					ОблСтрока.Параметры.ДоговорКонтрагента = ДоговорКонтрагента;
					
					Если Выборка.КоличествоРасш > 1 Тогда 
						
						// Область строка
						ОблСтрока.Параметры.ЦФО 			= "";
						ОблСтрока.Параметры.СтатьяОборотов 	= "";
						ОблСтрока.Параметры.Проект 			= "";
						ТабличныйДокумент.Вывести(ОблСтрока, 2);
						
						// Область расшифровки
						ВыборкаРасш = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "");
						Пока ВыборкаРасш.Следующий() Цикл
							ОблРасшифровка.Параметры.Заполнить(ВыборкаРасш);
							ТабличныйДокумент.Вывести(ОблРасшифровка, 3);
						КонецЦикла;
						
					Иначе
						
						// Область строка
						ТабличныйДокумент.Вывести(ОблСтрока, 2);
								
					КонецЕсли;
					
					ПорядковыйНомер = ПорядковыйНомер + 1;
									
				КонецЦикла;	
				
			КонецЦикла;	
			
			ТабличныйДокумент.Вывести(ОблЛиния, 0);
			ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
			
			// Заполним и выведем область итого и визы.
			ЗаполнитьИВывестиОбластьИтогиИВизы(ТекДокумент
											  ,ТаблицаПоИтогам
											  ,ТаблицаПоВизам
											  ,ТабличныйДокумент
											  ,ОблШапкаИтого
											  ,ОблСтрокаИтого
											  ,ОблШапкаСогласовано
											  ,ОблШапкаВизы
											  ,ОблСтрокаВизы);
			
		КонецЦикла; // Пока ВыборкаРеестр.Следующий() Цикл
	
	КонецЕсли; // Если Не РезультатЗапроса.Пустой() Тогда
	
	Если Не МассивСформированных.Количество() = МассивСсылок.Количество() Тогда
		
		Для Каждого ТекДокумент Из МассивСсылок Цикл
			
			НайденныйДокумент = МассивСформированных.Найти(ТекДокумент);
			
			Если НайденныйДокумент = Неопределено Тогда
				Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				ПервыйДокумент = Ложь;
				
				// Заполняем заголовок табличного документа.
				ОблЗаголовок.Параметры.НомерДок = бит_ОбщегоНазначенияКлиентСервер.ПолучитьНомерНаПечать(ТекДокумент);
				ОблЗаголовок.Параметры.ДатаДок  = Формат(ТекДокумент.Дата, "ДФ=dd.MM.yyyy");
				
				// Выводим заголовок с шапкой.
				ТабличныйДокумент.Вывести(ОблЗаголовок);
				ТабличныйДокумент.Вывести(ОблШапка);
				
				// Заполним и выведем область итого и визы.
				ЗаполнитьИВывестиОбластьИтогиИВизы(ТекДокумент
												  ,ТаблицаПоИтогам
												  ,ТаблицаПоВизам
												  ,ТабличныйДокумент
												  ,ОблШапкаИтого
												  ,ОблСтрокаИтого
												  ,ОблШапкаСогласовано
												  ,ОблШапкаВизы
												  ,ОблСтрокаВизы);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуРеестраПлатежей()

// Процедура заполняет и выводит област итоги и визы.
// 
// Параметры:
//  ТекДокумент 		- ДокументСсылка.бит_РеестрПлатежей.
//  ТаблицаПоИтогам 	- ТаблицаЗначений.
//  ТаблицаПоВизам  	- ТаблицаЗначений.
//  ТабличныйДокумент 	- ТабличныйДокумент.
//  ОблШапкаИтого 		- ТабличныйДокумент.
//  ОблСтрокаИтого 		- ТабличныйДокумент.
//  ОблШапкаСогласовано - ТабличныйДокумент.
//  ОблШапкаВизы 		- ТабличныйДокумент.
//  ОблСтрокаВизы 		- ТабличныйДокумент.
// 
Процедура ЗаполнитьИВывестиОбластьИтогиИВизы(ТекДокумент
											,ТаблицаПоИтогам
											,ТаблицаПоВизам
											,ТабличныйДокумент
											,ОблШапкаИтого
											,ОблСтрокаИтого
											,ОблШапкаСогласовано
											,ОблШапкаВизы
											,ОблСтрокаВизы)
						   
	Отбор = Новый Структура;
	Отбор.Вставить("Ссылка", ТекДокумент);
	
	// Выводим шапку итогов.
	ТабличныйДокумент.Вывести(ОблШапкаИтого);
	
	// Получим итог по текущему реестру.
	МассивСтрокИтоги = ТаблицаПоИтогам.НайтиСтроки(Отбор);
	
	// Заполняем и выводим итоги.
	Для Каждого ТекСтрока Из МассивСтрокИтоги Цикл
		
		ОблСтрокаИтого.Параметры.Заполнить(ТекСтрока);
		ТабличныйДокумент.Вывести(ОблСтрокаИтого);
		
	КонецЦикла;
	
	// Выводим заголовок и шапку раздела виз.
	ТабличныйДокумент.Вывести(ОблШапкаСогласовано);
	ТабличныйДокумент.Вывести(ОблШапкаВизы);
	
	// Получим список виз для текущего документа.
	МассивСтрокВизы = ТаблицаПоВизам.НайтиСтроки(Отбор);
	
	// Заполняем и выводим в табличный документ строки с визами.
	Для Каждого ТекСтрока Из МассивСтрокВизы Цикл
		
		ОблСтрокаВизы.Параметры.Заполнить(ТекСтрока);
		ТабличныйДокумент.Вывести(ОблСтрокаВизы);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьИВывестиОбластьИтогиИВизы()

#КонецОбласти

#КонецЕсли
