#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.
Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.
Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, Пользователи.ТекущийПользователь(), Неопределено);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда 	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Настройки 			 = Документы.бит_РеестрПлатежей.НовыеНастройкиФормыДокумента();
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Документ.бит_РеестрПлатежей", "Настройки", Настройки);
	ЗаполнитьЗначенияСвойств(Настройки, СохраненныеНастройки); // Подушка безопасности для синхронизации свойств.

	ПрименитьПредпочтенияПользователя(Настройки, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Установка настроек обязательности реквизитов
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// Очистим табличную часть "Заявки"
	Заявки.Очистить();
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = ПодготовитьМассивТиповДляПроверки();
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	Если НЕ Отказ  Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров);
		
		Если КоличествоВиз = 0 Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Организация);
			СтруктураПараметров.Вставить("ЦФО",ЦФО);	
			бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
			
		КонецЕсли; 
		
		УстановитьСтатус();
		
		СтруктураТаблиц = ПодготовитьТаблицыДокумента();
		СформироватьЗаписиПоРегиструРеестрПлатежей(СтруктураТаблиц);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура устанавливает статус документа.
// 
// Параметры:
//  Нет.
// 
Процедура УстановитьСтатус() Экспорт
	
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
	
	
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
		
		ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);
		
		Если ЕстьОтклонено Тогда
			Статус = Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Отклонен;
		Иначе	
			Если ВсеВизыПолучены Тогда
				//БИТ АКриштопов 13042016 ++ #2384
				//Статус = Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден;
				ОбнаруженоРасхождение = Ложь;
				Для Каждого Строка Из Заявки Цикл
					Если ЗначениеЗаполнено(Строка.ПлатежнаяПозиция) И ЗначениеЗаполнено(Строка.Заявка) Тогда 
						Если Строка.ПлатежнаяПозиция.СуммаДокумента	<> Строка.Заявка.СуммаДокумента Тогда
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = "Обнаружено расхождене сумм документов по заявке " + Строка.Заявка.Номер;
							Сообщение.Сообщить();
							ОбнаруженоРасхождение = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если ОбнаруженоРасхождение Тогда
					Возврат;
				Иначе
					Статус = Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден;
				КонецЕсли;
				//БИТ АКриштопов 13042016 -- #2384
			Иначе	
				Статус = Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Черновик;
			КонецЕсли; 
		КонецЕсли; 
		
		// Если статус изменился - запишем его
		Если мТекущийСтатус <> Статус Тогда
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка,
				Перечисления.бит_ВидыСтатусовОбъектов.Статус,Статус, мТекущийСтатус,
				Пользователи.ТекущийПользователь(), ТекущаяДата());
			
			Если ДействиеВыполнено Тогда
				мТекущийСтатус 		  = Статус;
				мДатаИзмененияСтатуса = ТекущаяДата();
			КонецЕсли; 	
		КонецЕсли;
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								Пользователи.ТекущийПользователь());
			
        РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСтатус()

// Функция возвращает массив типов для проверки.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  МассивТипов - Массив.
// 
Функция ПодготовитьМассивТиповДляПроверки() Экспорт

	// Получим массив основных типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Добавим дополнительные типы для проверки.
	МассивТипов.Добавить(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств"));
	МассивТипов.Добавить(Тип("ДокументСсылка.бит_ПлатежнаяПозиция"));

	Возврат МассивТипов;
	
КонецФункции // ПодготовитьМассивТиповДляПроверки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция подготавливает таблицы документа для записи в регистры.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   Структура
// 
Функция ПодготовитьТаблицыДокумента()

	// Таблица платежей
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеестрЗаявки.Ссылка 			КАК РеестрПлатежей,
	|	РеестрЗаявки.Заявка,
	|	РеестрЗаявки.ПлатежнаяПозиция
	|ИЗ
	|	Документ.бит_РеестрПлатежей.Заявки КАК РеестрЗаявки
	|ГДЕ
	|	РеестрЗаявки.Ссылка = &Ссылка
	|
	|АВТОУПОРЯДОЧИВАНИЕ
	|";
	Результат = Запрос.Выполнить();
	ТаблицаПлатежей = Результат.Выгрузить();
	
	// Структура таблиц
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаПлатежей", ТаблицаПлатежей);
	
	Возврат СтруктураТаблиц;
   	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура формирует записи в регистре бит_РеестрыПлатежей.
// 
// Параметры:
//  СтруктураТаблиц - Структура
// 
Процедура СформироватьЗаписиПоРегиструРеестрПлатежей(СтруктураТаблиц)

	ТаблицаПлатежей = СтруктураТаблиц.ТаблицаПлатежей;
	
	НаборЗаписей = РегистрыСведений.бит_РеестрыПлатежей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РеестрПлатежей.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для каждого СтрПлатежа Из ТаблицаПлатежей Цикл
			
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрПлатежа);
	
	КонецЦикла; 
	
	НаборЗаписей.Записать();

КонецПроцедуры // СформироватьЗаписиПоРегиструРеестрПлатежей()

Процедура ПрименитьПредпочтенияПользователя(Настройки, ДанныеЗаполнения)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		СписокСвойств = "НеФормироватьПлатежныеПоручения,"
					  + "ПроводитьПлатежныеПоручения,"
				  	  + "НеФормироватьДокументыОплаты,"
					  + "ПроводитьДокументыОплаты";
					  
		СписокСвойств = СтрРазделить(СписокСвойств,",");
		Для каждого Свойство Из СписокСвойств Цикл
			Если НЕ ДанныеЗаполнения.Свойство(Свойство) Тогда
				ЭтотОбъект[Свойство] = Настройки[Свойство];
			КонецЕсли; 
		КонецЦикла; 
	Иначе	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
	КонецЕсли; 	

КонецПроцедуры
 
#КонецОбласти

//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
Процедура ЗаполнитьТаблоСчетов(ТаблоСчетов, ОтменитьФильтрПоСчетамВТабло, ПоказыватьСуммуПланируемыхПоступлений, ИсточникДанныхТабло = Неопределено) Экспорт
	
	ТаблоСчетов.Строки.Очистить();
	
	ТаблицаЗаявки = Заявки.Выгрузить();
	
// +СБ. Широков Николай. 2014-10-23.  Доработка #1091 
//	Результат = бит_Казначейство.ПолучитьДанныеДляЗаполненияТаблоСчетов(ТаблицаЗаявки, 
//																ОтменитьФильтрПоСчетамВТабло, 
//																ПоказыватьСуммуПланируемыхПоступлений,
//																ИсточникДанныхТабло);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РеестрСсылка", 	Ссылка);
	ДополнительныеПараметры.Вставить("РеестрДата",		Дата);
	
	Результат = бит_Казначейство.ПолучитьДанныеДляЗаполненияТаблоСчетов(ТаблицаЗаявки, 
																ОтменитьФильтрПоСчетамВТабло, 
																ИсточникДанныхТабло,
																ДополнительныеПараметры);
// -СБ. Широков Николай 	
	
	
	
	

	ТаблоСчетов = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблоСчетов.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	бит_Казначейство.ЗаполнитьОписаниеВДереве(ТаблоСчетов);
	
КонецПроцедуры // ЗаполнитьТаблоСчетов()
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

#Область Инициализация

// Получаем статус и дату изменения статуса для документа.
РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);

мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

#КонецОбласти

#КонецЕсли
