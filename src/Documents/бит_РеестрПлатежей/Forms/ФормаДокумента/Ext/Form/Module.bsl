
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийБанковскийСчет; // Хранит текущий банковский счет для передачи между обработчиками НачалоВыбора и ПриИзменении.

&НаКлиенте
Перем мУстанавливатьОтборВПеречне; // Хранит признак повторного входа в процедуру активизации строки в табло счетов
                                   // (пока значение переменной неопределено - отбор в перечне не устанавливается).

&НаКлиенте
Перем мУстановленОтбор; // Хранит актуальную настройку.

// +СБ. Широков Николай. 2014-09-15. ТЗ "Казначейство" 2.2.3.1.
//Переменные хранящие значение отбора ТЧ "Заявки"
&НаКлиенте
Перем мДополнительныеОтборы;
// -СБ. Широков Николай

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +СБ. Широков Николай. 2014-09-11. ТЗ "Казначейство" 2.2.3.1.
	//СБ_КазначействоКлиент.бит_РеестрПлатежейФормаДокументаПриОткрытии(ЭтаФорма);
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.бит_РеестрПлатежей.ФормаДокументаУправляемая");
	// -СБ. Широков Николай
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);	
	ЗаполнитьКэшЗначений();
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли; 

	ТекущаяКонтрольнаяСумма = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	
	УстановитьУсловноеОформление();
	// 1c-izhtc Оптимизация (
	//УправлениеЭлементамиФормы();
	УправлениеЭлементамиФормы(ЭтотОбъект);
	УстановитьНастройкиДоступностиЭлементов();
	// 1c-izhtc Оптимизация )
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3062)
	ДобавитьКнопкуОтчетаПланФактДДС();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3062)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если Не Параметры.Ключ.Пустая() Тогда 
		
		Если ИнтервалАвтообновленияТаблоСчетов > 0 Тогда
			ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьТабло" 
										,ИнтервалАвтообновленияТаблоСчетов, Ложь);
		КонецЕсли;
		
		// Обновим табло счетов.
		ОбновитьТаблоСчетов(Истина);
		РасчитатьСуммыРасхода();

	Иначе
		ОтобразитьТаблоСчетов  = Ложь;
	КонецЕсли;
	
	// Установим видимость табло счетов и платежей.
	УправлениеТабломСчетов();
	
	мУстановленОтбор = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	ПодготовитьФормуНаСервере();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ОбновитьТаблоСчетовСервер();
	ОбновитьТабЧастьСервер();
	ОбновитьТаблоСчетовСервер(Истина);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров);
		
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
		
	КонецЕсли; 

	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	//ОбновитьТабЧастьСервер();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	ОбновитьТаблоСчетовСервер();
	РасчитатьСуммыРасходаНаСервере();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// 1c-izhtc Оптимизация (
	//УправлениеЭлементамиФормы();
	УправлениеЭлементамиФормы(ЭтотОбъект);
	УстановитьНастройкиДоступностиЭлементов();
	// 1c-izhtc Оптимизация )
	ЗаполнитьДобавленныеКолонкиТаблиц(Истина);      //Пересчитаем служебные поля таблицы заявки
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_РеестрПлатежей";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборВТабличнуюЧастьЗаявки" И Источник = ЭтаФорма Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			ОбработкаПодбора(Объект.Заявки, Параметр);
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда
			Для Каждого СтруктураПодбора Из Параметр Цикл
				ОбработкаПодбора(Объект.Заявки, СтруктураПодбора);	
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		// 1c-izhtc Оптимизация (
		//УправлениеЭлементамиФормы();
		УправлениеЭлементамиФормы(ЭтотОбъект);
		УстановитьНастройкиДоступностиЭлементов();
		// 1c-izhtc Оптимизация )
	КонецЕсли;

	ОбновитьТаблоСчетов();
	РасчитатьСуммыРасхода();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();                	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;	
	КонецЕсли; 
	
	СписокИд = Новый СписокЗначений;
	
	// Заполняем список индексов строк.
	Для каждого СтрокаПеречня Из Объект.Заявки Цикл
	
		 Если СтрокаПеречня.Организация <> Объект.Организация Тогда
		 
		  	Индекс = СтрокаПеречня.НомерСтроки - 1;
			СписокИд.Вставить(0, Индекс);
		 
		 КонецЕсли;
	
	КонецЦикла; 
	
	// Удаляем строки с конца.
	Для каждого Индекс Из СписокИд Цикл
		
		Объект.Заявки.Удалить(Индекс.Значение);		
	
	КонецЦикла;  	
	
	ОбновитьТаблоСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиПередУдалением(Элемент, Отказ)
	
	// 1c-izhtc Оптимизация (
	//Отказ = НЕ ПроверитьВозможностьРедактированияСпискаЗаявок();
	Отказ = НЕ ПроверитьВозможностьРедактированияСпискаЗаявок(Статус);
	// 1c-izhtc Оптимизация )
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблоСчетов

&НаКлиенте
Процедура ТаблоСчетовПриАктивизацииСтроки(Элемент)
	
	Если мУстанавливатьОтборВПеречне <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.ТаблоСчетов.ТекущиеДанные;
		
		Если ТекущаяСтрока <> Неопределено И РежимТабло = "УстанавливатьОтборы" Тогда
			УстановитьОтборВЗаявках(ТекущаяСтрока.КонтрольнаяСумма);
		КонецЕсли; 	
	КонецЕсли; 
	
	мУстанавливатьОтборВПеречне = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаявки

&НаКлиенте
Процедура ЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    	
	Если Поле.Имя = "ЗаявкиПлатежныйДокумент" Тогда 
		СтандартнаяОбработка = Ложь;
		ОткрытьПлатежныйДокумент();
	ИначеЕсли Поле.Имя = "ЗаявкиПлатежнаяПозиция" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьПлатежнуюПозицию();
	ИначеЕсли Поле.Имя = "ЗаявкиЗаявка" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗаявку();	
	Иначе
		бит_РаботаСДиалогамиКлиент.ОбработкаВыбораПоляТабличногоПоля("Заявки", Объект.Заявки, 
																		Поле, ВыбраннаяСтрока);
	КонецЕсли; 
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФормыПлатежногоДокумента(ПлатежныйДокумент)

	ИмяТаблицы = ПлатежныйДокумент.Метаданные().Имя;
	Возврат "Документ." + ИмяТаблицы + ".ФормаОбъекта";

КонецФункции
 
&НаКлиенте
Процедура ЗаявкиПриАктивизацииСтроки(Элемент)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-27 (#3882)
	Если Элементы.Заявки.ТекущийЭлемент <> Элементы.ЗаявкиОплачено Тогда
		Элементы.Заявки.ТекущийЭлемент = Элементы.ЗаявкиОплачено;
 	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-27 (#3882)
	ТекущиеДанные = Элементы.Заявки.ТекущиеДанные;
	ВыделитьТекущуюСтрокуВТабло(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Выполним подбор "Заявок на расходование денежных средств" в табличную часть "Заявки".
	// 1c-izhtc Оптимизация (
	//Если ПроверитьВозможностьРедактированияСпискаЗаявок() Тогда
	Если ПроверитьВозможностьРедактированияСпискаЗаявок(Статус) Тогда
	// 1c-izhtc Оптимизация )
	
		ВыполнитьПодборДляПеречня();
	
	КонецЕсли; 
   
	// Выполним отказ от добавления строки.
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиПослеУдаления(Элемент)
	
	// Обновим табло счетов и платежей.
	ОбновитьТаблоСчетов(Истина);
	РасчитатьСуммыРасхода();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиОплаченоПриИзменении(Элемент)
	
	ТекущаяСтрока  = Элементы.Заявки.ТекущиеДанные;
	Если ТекущаяСтрока.ОплаченоДоступность Тогда
		// Произведем вычисления в табличном поле "ТаблоСчетов".
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПлатежныйДокумент) Тогда
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
			//ОбработатьИзменениеФлажка(ТекущаяСтрока);
			ОбработатьИзменениеФлажка(ЭтотОбъект, ТекущаяСтрока);
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		КонецЕсли; 
		ОбновитьТаблоПлатежейСервер();
	Иначе		
		ТекущаяСтрока.Оплачено = Не ТекущаяСтрока.Оплачено;
		ТекстСообщения = НСтр("ru = 'К оплате могут быть допущены только проведенные платежные позиции.'");
		ПоказатьПредупреждение(,ТекстСообщения,, НСтр("ru ='Реестр платежей'"));
	КонецЕсли;	

КонецПроцедуры
  
&НаКлиенте
Процедура ЗаявкиБанковскийСчетОрганизацияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Заявки.ТекущиеДанные;
	БанковскийСчет   = ТекущаяСтрока.БанковскийСчетОрганизация;
	ПлатежнаяПозиция = ТекущаяСтрока.ПлатежнаяПозиция;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ОбновитьПлатежнуюПозицию(ПлатежнаяПозиция, БанковскийСчет, мТекущийБанковскийСчет, РежимСообщений);
		Если БанковскийСчет <> мТекущийБанковскийСчет Тогда
			ОбновитьТаблоСчетов();
			РасчитатьСуммыРасхода();
		Иначе
			ТекущаяСтрока.БанковскийСчетОрганизация = мТекущийБанковскийСчет;
		КонецЕсли; 
	КонецЕсли; 

	мТекущийБанковскийСчет = Неопределено; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиБанковскийСчетОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Заявки.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ВалютаДляОтбора = ПолучитьВалютуДляОтбора(ТекущаяСтрока.Заявка, ТекущаяСтрока.ВалютаДокумента);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец"       			, ТекущаяСтрока.Организация);
	СтруктураПараметров.Вставить("ВалютаДенежныхСредств"	, ВалютаДляОтбора);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизация", ТекущаяСтрока.БанковскийСчетОрганизация);
    СтруктураПараметров.Вставить("ЭлементВладелец"			, Элемент);

	мТекущийБанковскийСчет = ТекущаяСтрока.БанковскийСчетОрганизация;
	
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуВыбораРасчетногоСчета(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиСуммаКОплатеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Заявки.ТекущиеДанные;
	
	// Проверим превышение суммы к оплате над суммой план.
	ПроверитьПревышениеСуммыКОплатеНадСуммойПлан_ВСтроке(ТекущаяСтрока, Истина);
	
	ОбновитьТаблоСчетов(Истина);
	РасчитатьСуммыРасхода();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ДействияФормыОбновить(Кнопка)
	
	// Обновим табло счетов.
	ОбновитьТаблоСчетов();
	РасчитатьСуммыРасхода();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыНастройка(Кнопка)
	
	СписокСвойств = "НеФормироватьПлатежныеПоручения, ПроводитьПлатежныеПоручения,"
					"НеФормироватьДокументыОплаты, ПроводитьДокументыОплаты";

	СвойстваОбъекта = Новый Структура(СписокСвойств); 
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, Объект);
	
	ПараметрыФормы = Новый Структура("СвойстваОбъекта", СвойстваОбъекта);
	
	Оповещение = Новый ОписаниеОповещения("ДействияФормыНастройкаОкончание", ЭтотОбъект); 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ОткрытьФорму("Документ.бит_РеестрПлатежей.Форма.ФормаНастройки", ПараметрыФормы,ЭтотОбъект,,,,Оповещение, 
	//	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ОткрытьФорму("Документ.бит_РеестрПлатежей.Форма.ФормаНастройки", ПараметрыФормы,ЭтотОбъект,,,,Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

// Процедура окончание процедуры "ДействияФормыНастройка".
// 
&НаКлиенте 
Процедура ДействияФормыНастройкаОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	СтруктураНастроек = РезультатВыбора;
	
    Если СтруктураНастроек = Неопределено Тогда
    	Возврат;
    КонецЕсли;
	
	СписокСвойств = "НеФормироватьПлатежныеПоручения, ПроводитьПлатежныеПоручения,"
					"НеФормироватьДокументыОплаты, ПроводитьДокументыОплаты";

    // Заполним значения реквизитов формы документа.
    ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек, СписокСвойств);
	 
	Если ОтобразитьТаблоСчетов Тогда
		Если ИнтервалАвтообновленияТаблоСчетов > 0 Тогда
			ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновитьТабло",
										ИнтервалАвтообновленияТаблоСчетов, Ложь);
		Иначе
			ОтключитьОбработчикОжидания("ОбработчикОжиданияОбновитьТабло");
		КонецЕсли; 
	Иначе
		ОтключитьОбработчикОжидания("ОбработчикОжиданияОбновитьТабло");
	КонецЕсли;											   
    
    Если РежимТабло = "Автономно" Тогда
    	Элементы.Заявки.ОтборСтрок = Неопределено;
    КонецЕсли;
 
    // Обновим табло счетов.
    ОбновитьТаблоСчетов();
    РасчитатьСуммыРасхода();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеТаблоСчетов(Команда)
	
	ОтобразитьТаблоСчетов = Не ОтобразитьТаблоСчетов;
		
	УправлениеТабломСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьПоКурсам(Команда)
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
	Если НЕ ЗначениеЗаполнено(ДатаОплаты) Тогда	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен реквизит ""Дата оплаты""";
		Сообщение.Поле 	= "ДатаОплаты";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
	
	АктуализироватьКурсыЗаявок();
	
	Модифицированность = Истина;
	
	ОбновитьТабЧастьСервер();
	ОбновитьТаблоСчетов();
	РасчитатьСуммыРасхода();
	
КонецПроцедуры

#Область ПроцедурыДействияКомандПанелиКомандыСпискаЗаявок

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ОбработатьФлаги(0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	ОбработатьФлаги(1);
	
КонецПроцедуры
 
&НаКлиенте
Процедура Инвертировать(Команда)
	
	ОбработатьФлаги(2);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ВыполнитьПодборДляПеречня();

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДействияКомандПанелиКомандыОплата

&НаКлиенте
Процедура БанковскиеДокументы(Команда)
	
	СоздатьПлатежныеДокументы(мКэшЗначений.Перечисления.бит_ВидыДенежныхСредств.Безналичные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходныеКассовыеОрдера(Команда)
	
	СоздатьПлатежныеДокументы(мКэшЗначений.Перечисления.бит_ВидыДенежныхСредств.Наличные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеПлатежныеДокументы(Команда)
	
	СоздатьПлатежныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабЧасть(Команда)
	
	ОбновитьТабЧастьСервер();
	ОбновитьТаблоСчетов(Истина);
	РасчитатьСуммыРасхода();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОплатыПриИзменении(Элемент)
	
	// Заполним соотвестствие платежных документов.
	СоответствиеПлатежныхДокументов = ЗаполнитьСоответствиеВМодулеОбъекта();

	ДатаОплаты = ?(ЗначениеЗаполнено(ДатаОплаты), ДатаОплаты, ТекущаяДата());	
	
	СтрокиПересчета    = Новый СписокЗначений;
	КоличествоСтрок    = Объект.Заявки.Количество();
	СтрокиДляОбработки = Новый Массив;
	
	Для каждого СтрокаТаблицы Из Объект.Заявки Цикл
		Если СоответствиеПлатежныхДокументов.Получить(СтрокаТаблицы.НомерСтроки) Тогда
			
			СвойстваСтроки = Новый Структура("Идентификатор, Валюта, СуммаОстаток, ПлатежнаяПозиция, СуммаПлатежа"); 
			ЗаполнитьЗначенияСвойств(СвойстваСтроки, СтрокаТаблицы);
			
			СвойстваСтроки.Идентификатор = СтрокаТаблицы.ПолучитьИдентификатор();
			СвойстваСтроки.СуммаПлатежа  = 0;
			СтрокиДляОбработки.Добавить(СвойстваСтроки);
		КонецЕсли; 
	КонецЦикла;
	
	ПересчитатьСуммыПлатежейПоВалюте(ДатаОплаты, СтрокиДляОбработки);
	
	Для каждого СтрокаПерерасчета Из СтрокиДляОбработки Цикл
		
		СуммаПлатежа  = СтрокаПерерасчета.СуммаПлатежа;
		СтрокаТаблицы = Объект.Заявки.НайтиПоИдентификатору(СтрокаПерерасчета.Идентификатор);
		
		КоэффициентСумм = ?(СтрокаТаблицы.СуммаКОплатеНач = 0, 1,
							СтрокаТаблицы.СуммаКОплатеНач / СтрокаТаблицы.СуммаКОплате);

		СтрокаТаблицы.СуммаКОплате    = СуммаПлатежа / КоэффициентСумм;
		СтрокаТаблицы.СуммаКОплатеНач = СуммаПлатежа;
		
	КонецЦикла; 
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-19 (#НТП_БП12_ФР01)
	Если ЗначениеЗаполнено(ДатаОплаты) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо актуализировать курсы валют'");
		Сообщение.Сообщить();
	КонецЕсли;
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-19 (#НТП_БП12_ФР01)
	
КонецПроцедуры
  
#КонецОбласти

&НаКлиенте
Процедура ТаблоСчетовРазвернутьВсе(Команда)
	
	РазвернутьУзлыТаблоСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблоСчетовСвернутьВсе(Команда)
	
	Для каждого Элемент Из ТаблоСчетов.ПолучитьЭлементы() Цикл
		Элементы.ТаблоСчетов.Свернуть(Элемент.ПолучитьИдентификатор());
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьПлатежныйДокумент()
	
	ТекущаяСтрока = Элементы.Заявки.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПлатежныйДокумент) Тогда
			Идентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
			СтрокаПлДок = Неопределено;
			ПлДокумент = ПолучитьПлатежныйДокумент(Идентификатор, СтрокаПлДок);
			ТекущаяСтрока.ПлатежныйДокумент = ПлДокумент;
		Иначе	
			ПлДокумент = ТекущаяСтрока.ПлатежныйДокумент;
		КонецЕсли; 
		
		// Откроем форму платежного документа.
		Если ЗначениеЗаполнено(ПлДокумент) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ПлДокумент);
			ОткрытьФорму(ИмяФормыПлатежногоДокумента(ПлДокумент), ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявку()

	ТекущаяСтрока  = Элементы.Заявки.ТекущиеДанные;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущаяСтрока.Заявка);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьЗаявкуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.бит_ЗаявкаНаРасходованиеСредств.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

// Обработка оаповещения процедуры "ОткрытьЗаявку".
//
// Параметры:
//  РезультатВыбора			 - произвольный.
//  ДополнительныеПараметры	 - произвольный.
//
&НаКлиенте
Процедура ОткрытьЗаявкуЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьПлатежнуюПозицию()
	
	ТекущаяСтрока  = Элементы.Заявки.ТекущиеДанные;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущаяСтрока.ПлатежнаяПозиция);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьПлатежнуюПозициюЗавершение", ЭтотОбъект); 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ОткрытьФорму("Документ.бит_ПлатежнаяПозиция.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ОткрытьФорму("Документ.бит_ПлатежнаяПозиция.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры
 
// Обработка оаповещения процедуры "ОткрытьПлатежнуюПозицию".
//
// Параметры:
//  РезультатВыбора			 - произвольный.
//  ДополнительныеПараметры	 - произвольный.
//
&НаКлиенте 
Процедура ОткрытьПлатежнуюПозициюЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Заявки.ТекущиеДанные;
	
	// Проверим, может быть изменилась сумма
	ОбработатьИзмененияВПлатежнойПозиции(ТекущаяСтрока.ПлатежнаяПозиция, ТекущаяСтрока.ПолучитьИдентификатор());
	
	ОбновитьТаблоСчетов(Истина);
	РасчитатьСуммыРасхода();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	мКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
    мКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);

	КэшПеречисления = Новый Структура;
 	КэшПеречисления.Вставить("бит_ВидыДенежныхСредств", 
							бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыДенежныхСредств));
							
 	КэшПеречисления.Вставить("бит_РежимПолученияДанныхТаблоСчетов", 
							бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РежимПолученияДанныхТаблоСчетов));
							
	мКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	мКэшЗначений.Вставить("ЭтоБухгалтерия"		, бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия());
	мКэшЗначений.Вставить("ПустойБанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//Нет такого справочника
	//Если Метаданные.Справочники.Найти("Кассы") <> Неопределено Тогда
	//	мКэшЗначений.Вставить("ПустаяКасса", Справочники["Кассы"].ПустаяСсылка());	
	//КонецЕсли; 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	
	мКэшЗначений.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	мКэшЗначений.Вставить("НачИсточникДанныхТабло", Перечисления.бит_РежимПолученияДанныхТаблоСчетов.ДанныеБухгалтерскогоУчета);
	
	СтатусыОбъекта = Новый Структура;
	СтатусыОбъекта.Вставить("Утвержден", Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден);
	мКэшЗначений.Вставить("СтатусыОбъекта", СтатусыОбъекта);
			
КонецПроцедуры

// Процедура восстанавливает настройки формы из хранилища общих настроек
// или записывает настройки по умолчанию.
// 
&НаСервере
Процедура ВосстановитьНастройки()
		
	Настройки 			 = Документы.бит_РеестрПлатежей.НовыеНастройкиФормыДокумента();
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Документ.бит_РеестрПлатежей", "Настройки", Настройки);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраненныеНастройки);

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	СписокСвойств = "НеФормироватьПлатежныеПоручения, ПроводитьПлатежныеПоручения,"
					"НеФормироватьДокументыОплаты, ПроводитьДокументыОплаты";
	
	Настройки = Документы.бит_РеестрПлатежей.НовыеНастройкиФормыДокумента();
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(Настройки, Объект, СписокСвойств);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Документ.бит_РеестрПлатежей","Настройки", Настройки);
	
КонецПроцедуры 

// 1c-izhtc Оптимизация (
//&НаСервере
//Процедура УправлениеЭлементамиФормы()
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)
// 1c-izhtc Оптимизация )

	// Управление доступностью команды создать на основании.
	// 1c-izhtc Оптимизация (
	//Если ПроверитьВозможностьРедактированияСпискаЗаявок() Тогда
	Элементы = Форма.Элементы;
	Если ПроверитьВозможностьРедактированияСпискаЗаявок(Форма.Статус) Тогда
	// 1c-izhtc Оптимизация )
		Элементы.Добавить.Доступность		= Истина;
		Элементы.Скопировать.Доступность	= Истина;
		Элементы.Удалить.Доступность		= Истина;
		Элементы.ЗаявкиПодбор.Доступность 	= Истина;
	Иначе
		Элементы.Добавить.Доступность		= Ложь;
		Элементы.Скопировать.Доступность	= Ложь;
		Элементы.Удалить.Доступность		= Ложь;
		Элементы.ЗаявкиПодбор.Доступность 	= Ложь;
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//УстановитьНастройкиДоступностиЭлементов();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
КонецПроцедуры

// 1c-izhtc Оптимизация (
//&НаСервере
//Функция ПроверитьВозможностьРедактированияСпискаЗаявок()
&НаСервереБезКонтекста
Функция ПроверитьВозможностьРедактированияСпискаЗаявок(Статус)
// 1c-izhtc Оптимизация )

	МассивСтатусовСоздатьНаОсновании = Новый Массив;
	МассивСтатусовСоздатьНаОсновании.Добавить(Справочники.бит_СтатусыОбъектов.РеестрПлатежей_Утвержден);
	Если ТипЗнч(МассивСтатусовСоздатьНаОсновании.Найти(Статус)) = Тип("Неопределено") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"					   , Объект.ЦФО);		
	
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТабЧастьСервер()
	
	МассивПлатежек = Объект.Заявки.Выгрузить(,"ПлатежнаяПозиция").ВыгрузитьКолонку("ПлатежнаяПозиция");
    Результат 	   = Документы.бит_РеестрПлатежей.ВыборкаДляЗаполненияТаблицыЗаявок(МассивПлатежек);
	//Выборка		   = Результат.Выбрать();
	
	Для каждого СтрокаТаблицы Из Объект.Заявки Цикл
		ЗаполнитьДобавленныеКолонкиСтроки(Результат, СтрокаТаблицы);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтроки(РеквизитыПлатПозиций, ДанныеСтроки)
			
	Если РеквизитыПлатПозиций.НайтиСледующий(ДанныеСтроки.ПлатежнаяПозиция, "ПлатежнаяПозиция") Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, РеквизитыПлатПозиций);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Дата", ?(ЗначениеЗаполнено(ДатаОплаты), ДатаОплаты, ТекущаяДата()));
		СтруктураПараметров.Вставить("ВалютаДокумента", ДанныеСтроки.Валюта);
		СуммаПлатежа = бит_Казначейство.ПересчитатьСуммуПлатежаПоВалюте(ДанныеСтроки.СуммаОстаток, 
							РеквизитыПлатПозиций, СтруктураПараметров);
		ЕстьПлатежныйДокумент = ЗначениеЗаполнено(РеквизитыПлатПозиций.ПлатежныйДокумент);
		ДанныеСтроки.СуммаКОплате 	  = ?(ЕстьПлатежныйДокумент, 0, СуммаПлатежа);
		ДанныеСтроки.СуммаКОплатеНач = ?(ЕстьПлатежныйДокумент, 0, СуммаПлатежа);
		
		// 1c-izhtc spawn (
		ДанныеСтроки_ = ЗаполитьРеквизитыДляОтбораПоЗавке(ДанныеСтроки.Заявка);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСтроки_);
		 
		ДанныеСтроки_ = ЗаполитьРеквизитыДляОтбораПоПлатежнойПозиции(ДанныеСтроки.ПлатежнаяПозиция);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСтроки_);
		// 1c-izhtc spawn )
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияВПлатежнойПозиции(ПлатежнаяПозиция, ИДСтроки)
	
	ТекущаяСтрока = Объект.Заявки.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка,
	|	СУММА(бит_ПлатежнаяПозицияРаспределение.Сумма) КАК Сумма
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
	|ГДЕ
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка = &ПлатежнаяПозиция
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ПлатежнаяПозицияРаспределение.Ссылка";
	
	Запрос.УстановитьПараметр("ПлатежнаяПозиция", ТекущаяСтрока.ПлатежнаяПозиция);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если НЕ Выборка.Сумма = ТекущаяСтрока.Сумма Тогда
			Позиции = Новый Массив(); 
			Позиции.Добавить(ТекущаяСтрока.ПлатежнаяПозиция);
			Выборка = Документы.бит_РеестрПлатежей.ВыборкаДляЗаполненияТаблицыЗаявок(Позиции);

			ЗаполнитьДобавленныеКолонкиСтроки(Выборка, ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
//
//	СоответствиеДоступностиФлага = ЗаполнитьСоответствиеВМодулеОбъекта(Истина, Ложь);

Процедура ЗаполнитьДобавленныеКолонкиТаблиц(фТолькоСлужебныеПоля = Ложь)

	Если НЕ фТолькоСлужебныеПоля Тогда 
		СоответствиеДоступностиФлага = ЗаполнитьСоответствиеВМодулеОбъекта(Истина, Ложь);
	КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	СписокДокументов  = Объект.Заявки.Выгрузить(, "ПлатежнаяПозиция, Заявка");
	Позиции 		  = СписокДокументов.ВыгрузитьКолонку("ПлатежнаяПозиция");
	Заявки  		  = СписокДокументов.ВыгрузитьКолонку("Заявка");
	
	РеквизитыПозиций = "Дата, Номер, Важность, НомерВходящегоДокумента, ДатаВходящегоДокумента,"
					 + "НазначениеПлатежа, СтавкаНДС, НДС, ДатаРасхода, ДатаПлатежаКрайняя,"
					 + "РучнаяКорректировка, Проведен, ПометкаУдаления";
					 
	РеквизитыЗаявок = "Дата, Номер, Контрагент, ДоговорКонтрагента, ТипПлатежа, ЦФО, СтатьяОборотов, Проект";
					
	СвойстваПозиций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Позиции, РеквизитыПозиций);
	СвойстваЗаявок = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Заявки, РеквизитыЗаявок);	
	
	Для Каждого ТекущаяСтрока Из Объект.Заявки Цикл
		
		//+Сундукова 04.04.16
		ФлажокДоступен = ФлажокОплаченоДоступен(ТекущаяСтрока);
		Если НЕ фТолькоСлужебныеПоля Тогда 
		//-Сундукова 04.04.16
		
		ПлатежнаяПозиция = ТекущаяСтрока.ПлатежнаяПозиция;
		//+Сундукова 04.04.16
		//ТекЗаявка = ТекущаяСтрока.Заявка;
		//-Сундукова 04.04.16
		
		СвойстваСтроки = СвойстваСтрокиТаблицыЗаявки();
		ЗаполнитьЗначенияСвойств(СвойстваСтроки, ТекущаяСтрока);
		
		// Заполняем платежный документ и статус заявки из соответствия.
		СтруктураДопДанных = СоответствиеДоступностиФлага.Получить(ПлатежнаяПозиция);
        Если ЗначениеЗаполнено(СтруктураДопДанных.ПлатежныйДокумент) Тогда
			ТекущаяСтрока.ПлатежныйДокумент = СтруктураДопДанных.ПлатежныйДокумент;
			// 1c-izhtc Оптимизация (
			//Если ЗначениеЗаполнено(ТекущаяСтрока.ПлатежныйДокумент) Тогда
			//	ТекущаяСтрока.ДатаОплатыФакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.ПлатежныйДокумент, "Дата");
			//Иначе	
			//	ТекущаяСтрока.ДатаОплатыФакт = '0001-01-01';
			//КонецЕсли; 			
			ТекущаяСтрока.ДатаОплатыФакт 	= СтруктураДопДанных.ДатаОплатыФакт;
			// 1c-izhtc Оптимизация )
		КонецЕсли;
		ТекущаяСтрока.СтатусЗаявки = СтруктураДопДанных.СтатусЗаявки;
		ТекущаяСтрока.СостояниеОплаты = СтруктураДопДанных.СостояниеОплаты;
		
		//+Сундукова 04.04.16
		КонецЕсли; 
		//-Сундукова 04.04.16
	
		Если ЗначениеЗаполнено(ТекущаяСтрока.Заявка) Тогда
			СвойстваЗаявки = СвойстваЗаявок[ТекущаяСтрока.Заявка];
			ТекущаяСтрока.ЗаявкаДата 			   = СвойстваЗаявки.Дата;
			ТекущаяСтрока.ЗаявкаНомер 			   = СвойстваЗаявки.Номер;
			ТекущаяСтрока.ЗаявкаКонтрагент 		   = СвойстваЗаявки.Контрагент;
			ТекущаяСтрока.ЗаявкаДоговорКонтрагента = СвойстваЗаявки.ДоговорКонтрагента;
			ТекущаяСтрока.ЗаявкаТипПлатежа 		   = СвойстваЗаявки.ТипПлатежа;
			ТекущаяСтрока.ЗаявкаЦФО 			   = СвойстваЗаявки.ЦФО;
			ТекущаяСтрока.ЗаявкаСтатьяОборотов 	   = СвойстваЗаявки.СтатьяОборотов;
			ТекущаяСтрока.ЗаявкаПроект 			   = СвойстваЗаявки.Проект;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПлатежнаяПозиция) Тогда
			СвойстваПозиции = СвойстваПозиций[ТекущаяСтрока.ПлатежнаяПозиция];
			ТекущаяСтрока.ПозицияВажность				 = СвойстваПозиции.Важность;
			ТекущаяСтрока.ПозицияНомер   				 = СвойстваПозиции.Номер;
			ТекущаяСтрока.ПозицияДата    				 = СвойстваПозиции.Дата;
			ТекущаяСтрока.ПозицияНомерВходящегоДокумента = СвойстваПозиции.НомерВходящегоДокумента;
			ТекущаяСтрока.ПозицияДатаВходящегоДокумента  = СвойстваПозиции.ДатаВходящегоДокумента;
			ТекущаяСтрока.ПозицияНазначениеПлатежа		 = СвойстваПозиции.НазначениеПлатежа;
			ТекущаяСтрока.ПозицияСтавкаНДС				 = СвойстваПозиции.СтавкаНДС;
			ТекущаяСтрока.ПозицияНДС					 = СвойстваПозиции.НДС;
			ТекущаяСтрока.ПозицияДатаРасхода			 = СвойстваПозиции.ДатаРасхода;
			ТекущаяСтрока.ПозицияДатаПлатежаКрайняя		 = СвойстваПозиции.ДатаПлатежаКрайняя;
			ТекущаяСтрока.ПозицияСостояние      		 = ОбщегоНазначенияБП.СостояниеДокумента(СвойстваПозиции);
			ТекущаяСтрока.ПозицияПроведен                = СвойстваПозиции.Проведен;
		КонецЕсли; 
		
		ТекущаяСтрока.ОплаченоДоступность = ФлажокОплаченоДоступен(ТекущаяСтрока);
		
		// 1c-izhtc spawn (
		ДанныеСтроки = ЗаполитьРеквизитыДляОтбораПоЗавке(ТекущаяСтрока.Заявка);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСтроки);
		 
		ДанныеСтроки = ЗаполитьРеквизитыДляОтбораПоПлатежнойПозиции(ТекущаяСтрока.ПлатежнаяПозиция);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСтроки);
		// 1c-izhtc spawn )
		
		Если ТекущаяСтрока.ОплаченоДоступность И ТекущаяСтрока.СуммаКОплате = 0 Тогда
			ТекущаяСтрока.СуммаКОплате = ТекущаяСтрока.СуммаКОплатеНач;
		КонецЕсли; 
		
		ТекущаяСтрока.КонтрольнаяСумма = КонтрольнаяСуммаСтрокой(ТекущаяСтрока.Валюта, 
			ТекущаяСтрока.БанковскийСчетОрганизация, ТекущаяСтрока.Организация);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция КонтрольнаяСуммаСтрокой(Валюта, БанковскийСчет, Организация)
		
	Возврат бит_Казначейство.КонтрольнаяСтрокиСуммаДереваСчетов(Валюта, БанковскийСчет, Организация);
		
КонецФункции
  
&НаСервере
Функция ПолучитьПлатежныйДокумент(Идентификатор, СтрокаПлДок)

	ПлДокумент = Неопределено;
	
	// Заполним таблицу с данными для поиска документа.
	ТаблицаСДанными = Новый ТаблицаЗначений();
	ТаблицаСДанными.Колонки.Добавить("НомерСтроки"	   , Новый ОписаниеТипов("Число"));
	ТаблицаСДанными.Колонки.Добавить("Заявка"		   , Новый ОписаниеТипов("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств"));
	ТаблицаСДанными.Колонки.Добавить("ПлатежнаяПозиция", Новый ОписаниеТипов("ДокументСсылка.бит_ПлатежнаяПозиция"));
	
	ТекущаяСтрока = Объект.Заявки.НайтиПоИдентификатору(Идентификатор);
	НовСтрока 	  = ТаблицаСДанными.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, ТекущаяСтрока);

	СоответствиеПлДокумента = ЗаполнитьСоответствиеВМодулеОбъекта(Ложь, Истина, ТаблицаСДанными);
	
	// Получаем платежный документ.
	СтруктураДопДанных = СоответствиеПлДокумента.Получить(ТекущаяСтрока.ПлатежнаяПозиция);
	ПлДокумент = СтруктураДопДанных.ПлатежныйДокумент;

	СтрокаПлДок = Строка(ПлДокумент);
	Возврат ПлДокумент;
	
КонецФункции
   
&НаСервере
Функция ЗаполнитьСоответствиеВМодулеОбъекта(ОформлятьПереченьЗаявок = Ложь, ПолучитьПлДокумент = Ложь, ТаблицаЗаявки = Неопределено)
	
	Если ТаблицаЗаявки = Неопределено Тогда
		Таблица = Объект.Заявки.Выгрузить();
	Иначе	
		Таблица = ТаблицаЗаявки;
	КонецЕсли; 				
	
	Результат = Новый Соответствие();
	
	Документы.бит_РеестрПлатежей.ЗаполнитьСоответствиеДоступностиФлага_Оплата(Таблица,
		Результат, ОформлятьПереченьЗаявок, ПолучитьПлДокумент, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьТаблоСчетовСервер(ОбновитьТаблоПлатежей = Ложь)

	ТаблоСчетов.ПолучитьЭлементы().Очистить();
	
	Если Объект.Заявки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;   	

	ТаблицаПеречень = Объект.Заявки.Выгрузить();
	
	// +СБ. Широков Николай. 2014-10-23.  Доработка #1091 
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РеестрСсылка", 	Объект.Ссылка);
	ДополнительныеПараметры.Вставить("РеестрДата",		Объект.Дата);
	// -СБ. Широков Николай
	
	Результат = бит_Казначейство.ПолучитьДанныеДляЗаполненияТаблоСчетов(ТаблицаПеречень, 
					// +СБ. Широков Николай. 2014-10-23.  Доработка #1091
					//ОтменитьФильтрПоСчетамВТабло, ПоказыватьСуммуПланируемыхПоступлений, ИсточникДанныхТабло);
					ОтменитьФильтрПоСчетамВТабло, ПоказыватьСуммуПланируемыхПоступлений, ИсточникДанныхТабло, ДополнительныеПараметры);
					// -СБ. Широков Николай
					
	ДеревоТаблоСчетов = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоТаблоСчетов.Колонки.Добавить("Описание",Новый ОписаниеТипов("Строка"));
	ДеревоТаблоСчетов.Колонки.Добавить("КонтрольнаяСумма", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	
	бит_Казначейство.ЗаполнитьОписаниеВДереве(ДеревоТаблоСчетов);
	ЗначениеВДанныеФормы(ДеревоТаблоСчетов, ТаблоСчетов);	
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ОбновитьТаблоПлатежей Тогда 	
		ОбновитьТаблоПлатежейСервер();  	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблоПлатежейСервер()
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
Экспорт
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	ТаблоПлатежей.Очистить();
	ТаблицаПлатежныхПозиций = Новый ТаблицаЗначений(); 
	ТаблицаПлатежныхПозиций.Колонки.Добавить("Валюта");
	ТаблицаПлатежныхПозиций.Колонки.Добавить("СуммаКОплате", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для каждого СтрокаТаблицы Из Объект.Заявки Цикл
		Если СтрокаТаблицы.Оплачено И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда		
			НоваяСтрока = ТаблицаПлатежныхПозиций.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли; 
	КонецЦикла; 
	ТаблицаПлатежныхПозиций.Свернуть("Валюта", "СуммаКОплате");
	
	Для каждого СтрокаТаблицы Из ТаблицаПлатежныхПозиций Цикл
		Если СтрокаТаблицы.СуммаКОплате <> 0 Тогда 			
			НоваяСтрока = ТаблоПлатежей.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьПлатежныеДокументыСервер(ФормаОплаты)

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// +СБ. Широков Николай. 2015-01-29. Консультация #1244
	//Для каждого СтрокаТаблицы Из Объект.Заявки Цикл
	Записать();
	// -СБ. Широков Николай
	
	// +СБ. Широков Николай. 2015-01-23. Консультация #1244
	Свойство_СрокИсполнения 	= ПолучитьСвойствоХарактеристик("Срок исполнения");	//СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Свойство_СрокИсполнения");
	ДопРеквизит_Инициатор 		= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ДопРеквизит_Инициатор");
	ВалютаРегл 					= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ_Заявки.ПлатежнаяПозиция КАК ПлатежнаяПозиция
	|ПОМЕСТИТЬ ПлатежныеПозиции
	|ИЗ
	|	Документ.бит_РеестрПлатежей.Заявки КАК ТЧ_Заявки
	|ГДЕ
	|	ТЧ_Заявки.Ссылка = &Ссылка
	|	И ТЧ_Заявки.Оплачено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлатежнаяПозиция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(бит_ДополнительныеАналитики.ЗначениеАналитики КАК Документ.бит_ПлатежнаяПозиция) КАК ПлатежнаяПозиция,
	|	бит_ДополнительныеАналитики.Объект КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ПлатежныеДокументы
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеПозиции КАК ПлатежныеПозиции
	|		ПО бит_ДополнительныеАналитики.ЗначениеАналитики = ПлатежныеПозиции.ПлатежнаяПозиция
	|ГДЕ
	|	бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция,
	|	бит_ДокументыМножественнойОплаты.ДокументОплаты
	|ИЗ
	|	РегистрСведений.бит_ДокументыМножественнойОплаты КАК бит_ДокументыМножественнойОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлатежныеПозиции КАК ПлатежныеПозиции
	|		ПО бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция = ПлатежныеПозиции.ПлатежнаяПозиция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлатежнаяПозиция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ_Заявки.НомерСтроки,
	|	ТЧ_Заявки.Оплачено,
	|	ТЧ_Заявки.ФормаОплаты,
	|	ТЧ_Заявки.БанковскийСчетОрганизация,
	|	ТЧ_Заявки.ПлатежнаяПозиция,
	|	ТЧ_Заявки.Сумма,
	|	ТЧ_Заявки.Валюта,
	|	ТЧ_Заявки.СуммаКОплатеНач,
	|	ТЧ_Заявки.СуммаКОплате,
	|	СтатусыПП.Статус КАК ПлатежнаяПозиция_Статус,
	|	бит_ЗаявкаНаРасходованиеСредств.ДоговорКонтрагента.ВалютаВзаиморасчетов  КАК ВалютаДоговора,
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-03-22 (#ТП_БП05_ФР08)
	|	бит_ЗаявкаНаРасходованиеСредств.ОК_НеФормироватьПлатежноеПоручение КАК ОК_НеФормироватьПлатежноеПоручение,
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-03-22 (#ТП_БП05_ФР08)
	|ИЗ
	|	Документ.бит_РеестрПлатежей.Заявки КАК ТЧ_Заявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СтатусыПП
	|		ПО ТЧ_Заявки.ПлатежнаяПозиция = СтатусыПП.Объект
	|			И (СтатусыПП.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	|		ПО ТЧ_Заявки.ПлатежнаяПозиция = бит_ПлатежнаяПозиция.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СтатусыЗаявок
	|		ПО ТЧ_Заявки.Заявка = СтатусыЗаявок.Объект
	|			И (СтатусыЗаявок.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлатежныеДокументы КАК ПлатежныеДокументы
	|		ПО ТЧ_Заявки.ПлатежнаяПозиция = ПлатежныеДокументы.ПлатежнаяПозиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	|		ПО ТЧ_Заявки.Заявка = бит_ЗаявкаНаРасходованиеСредств.Ссылка
	|ГДЕ
	|	ТЧ_Заявки.Ссылка = &Ссылка
	|	И ТЧ_Заявки.Оплачено
	|	И ВЫБОР
	|			КОГДА бит_ПлатежнаяПозиция.Проведен
	|					И СтатусыЗаявок.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Утверждена)
	|					И ПлатежныеДокументы.ПлатежныйДокумент ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	СтрокаТаблицы = Запрос.Выполнить().Выбрать();
	
	ВыполнениеВТранзации = Ложь;
	//Если РежимЗаписи <> "Проведение" Тогда
	//	НачатьТранзакцию();
	//	ВыполнениеВТранзации = Истина;
	//КонецЕсли; 
	// -СБ. Широков Николай	
	
	// +СБ. Широков Николай. 2015-01-28. Консультация #1244 
	
	//Для каждого СтрокаТаблицы Из Объект.Заявки Цикл
	Пока СтрокаТаблицы.Следующий() Цикл
	// -СБ. Широков Николай
		
		флЕстьОшибки = Ложь;
		
		// Оплаченные платежные позиции не обрабатываются.
		Если НЕ СтрокаТаблицы.Оплачено Тогда
			Продолжить;
		КонецЕсли; 
		
		//1c-izhtc (
		//Если НЕ СтрокаТаблицы.ОплаченоДоступность Тогда
		//	Продолжить;
		//КонецЕсли; 
		//1c-izhtc )

		Если ЗначениеЗаполнено(ФормаОплаты) И ФормаОплаты <> СтрокаТаблицы.ФормаОплаты Тогда
			Продолжить;
		КонецЕсли; 
		
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
		//Если ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда
		//	Продолжить;
		//КонецЕсли;		
		//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )

		Префикс = "Заявки[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));

		// Проверка заполнения банковского счета
		Если СтрокаТаблицы.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные 
			 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетОрганизация) Тогда
			 
			Поле = Префикс + "БанковскийСчетОрганизация";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "Заполнение",
								"Банковский счет", СтрокаТаблицы.НомерСтроки,"Заявки");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,"Объект", флЕстьОшибки);
			
		ИначеЕсли Не бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия() И 
			СтрокаТаблицы.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчетОрганизация) Тогда
						
			Поле = Префикс + "БанковскийСчетОрганизация";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "Заполнение",
								"Касса", СтрокаТаблицы.НомерСтроки,"Заявки");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", флЕстьОшибки);
		КонецЕсли; 
		
		// Проверим статус платежной позиции
		// +СБ. Широков Николай. 2015-01-28. Консультация #1244 
		//СтрСтатус = бит_Визирование.ПолучитьСтатусОбъекта(СтрокаТаблицы.ПлатежнаяПозиция,Перечисления.бит_ВидыСтатусовОбъектов.Статус);
		//Если СтрСтатус.Статус = Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта Тогда
		Если СтрокаТаблицы.ПлатежнаяПозиция_Статус = Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта Тогда
		// -СБ. Широков Николай
			
			Поле = Префикс + "Статус";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ",
								"Статус", СтрокаТаблицы.НомерСтроки, "Заявки", "Указана закрытая платежная позиция");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле, "Объект",флЕстьОшибки);
		КонецЕсли; 
		
		// Проверка на превышение суммы оплаты
		Если СтрокаТаблицы.СуммаКОплате > СтрокаТаблицы.СуммаКОплатеНач Тогда
			Пояснение = СтрШаблон(НСтр("ru = 'Сумма к оплате %1 превышает плановую сумму %2.'"),
				бит_ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.СуммаКОплате,СтрокаТаблицы.Валюта),
				бит_ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.СуммаКОплатеНач,СтрокаТаблицы.Валюта));

			Поле = Префикс + "ПлатежнаяПозиция";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ",
				"Платежная позиция", СтрокаТаблицы.НомерСтроки, "Заявки", Пояснение);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Поле, "Объект", флЕстьОшибки);
		КонецЕсли; 
		
		Если флЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыФормирования = бит_Казначейство.НовыеПараметрыФормированияПлатежныхДокументов();		
		Если ЗначениеЗаполнено(ДатаОплаты) Тогда                                                   
			ПараметрыФормирования.ДатаОплаты = ДатаОплаты;
		КонецЕсли;
	  
		// Была отредактирована сумма платежа - указываем явно.
		Если СтрокаТаблицы.СуммаКОплате <> СтрокаТаблицы.СуммаКОплатеНач Тогда
			ПараметрыФормирования.СуммаКОплате  = СтрокаТаблицы.СуммаКОплате;
			ПараметрыФормирования.ВалютаПлатежа = СтрокаТаблицы.Валюта;
			ПараметрыФормирования.СуммаВВалютеПлатежа = Истина; // ++ NB 44.4
		КонецЕсли; 
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-03-22 (#ТП_БП05_ФР08)
		//ПараметрыФормирования.НеФормироватьПлатежныеПоручения = Объект.НеФормироватьПлатежныеПоручения;
		ПараметрыФормирования.НеФормироватьПлатежныеПоручения = СтрокаТаблицы.ОК_НеФормироватьПлатежноеПоручение;
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-03-22 (#ТП_БП05_ФР08)
		ПараметрыФормирования.ПроводитьПлатежныеПоручения 	  = Объект.ПроводитьПлатежныеПоручения;
		ПараметрыФормирования.НеФормироватьДокументыОплаты 	  = Объект.НеФормироватьДокументыОплаты;
		ПараметрыФормирования.ПроводитьДокументыОплаты 		  = Объект.ПроводитьДокументыОплаты;
		ПараметрыФормирования.РежимСообщений   				  = РежимСообщений;
		
		Если Объект.ПроводитьДокументыОплаты Тогда
			РежимЗаписи = "Проведение";
		Иначе
			РежимЗаписи = "Запись";
		КонецЕсли; 
		
		// Если оплачиваем не всю сумму - разобъем платежную позицию.
		Если СтрокаТаблицы.СуммаКОплате < СтрокаТаблицы.СуммаКОплатеНач Тогда
			// Если валюта документа отличается от валюты платежа, нужно пересчиать из валюты в валюту. 
			//ОК Довбешка Т. 14.06.2019 исправление ошибки обновления
			//Если СтрокаТаблицы.Валюта <> СтрокаТаблицы.ВалютаДокумента Тогда
			//	
			//	ИсходнаяВалюта = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТаблицы.Валюта, 
			//						СтрокаТаблицы.ПлатежнаяПозиция.ДатаРасхода);
			//						
			//	НоваяВалюта = бит_КурсыВалютКлиентСервер.СтруктураКурса(СтрокаТаблицы.ВалютаДокумента, 
			//						СтрокаТаблицы.ПлатежнаяПозиция.КурсДокумента, СтрокаТаблицы.ПлатежнаяПозиция.КратностьДокумента);
			//						
			//	СуммаКОплате = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТаблицы.СуммаКОплате, 
			//						ИсходнаяВалюта, НоваяВалюта); 
			//	
			//	СуммаКОплатеНач = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТаблицы.СуммаКОплатеНач, 
			//						ИсходнаяВалюта, НоваяВалюта);	
			//Иначе
			//	СуммаКОплате 	= СтрокаТаблицы.СуммаКОплате ;
			//	СуммаКОплатеНач = СтрокаТаблицы.СуммаКОплатеНач;
			//КонецЕсли; 
			СуммаКОплате 	= СтрокаТаблицы.СуммаКОплате ;
			СуммаКОплатеНач = СтрокаТаблицы.СуммаКОплатеНач;
			//ОК Довбешка Т. 14.06.2019 исправление ошибки обновления
			
			ДействиеВыполнено = бит_Казначейство.РазбитьПлатежнуюПозицию(СтрокаТаблицы.ПлатежнаяПозиция, 
									СуммаКОплате, СуммаКОплатеНач, РежимСообщений);
			Если НЕ ДействиеВыполнено Тогда												 
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		// -- NB 44.4 ПараметрыФормирования.СуммаПлатежныхПозиций = СтрокаТаблицы.СуммаКОплате;
		
		// +СБ. Широков Николай. 2015-01-23. Консультация #1244 
		ПараметрыФормирования.Вставить("Свойство_СрокИсполнения", Свойство_СрокИсполнения);
		ПараметрыФормирования.Вставить("ДопРеквизит_Инициатор", 	ДопРеквизит_Инициатор);
		ПараметрыФормирования.Вставить("ВалютаРегл", 				ВалютаРегл);
		ПараметрыФормирования.Вставить("ВалютаДоговора",			СтрокаТаблицы.ВалютаДоговора);
		// -СБ. Широков Николай
		
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-03-22 (#ТП_БП05_ФР09)
		ПараметрыФормирования.Вставить("ЗаявкаНаРасходованиеДенежныхСредств",			СтрокаТаблицы.ЗаявкаНаРасходованиеДенежныхСредств);
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-03-22 (#ТП_БП05_ФР09)
		
		бит_Казначейство.СформироватьДокументыОплаты(СтрокаТаблицы.ПлатежнаяПозиция, ПараметрыФормирования);
	КонецЦикла; 

	Если РежимСообщений = "Все" Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Создание платежных документов завершено.");	
	КонецЕсли; 
	
	// +СБ. Широков Николай. 2015-01-23. Консультация #1244
	Если ВыполнениеВТранзации Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	// -СБ. Широков Николай
	
	// +СБ. Широков Николай. 2014-11-25. ТЗ 2.2.11.3
	СБ_КазначействоСервер.ВыгрузитьПлатежныеПорученияВФоновомЗадании(Объект.Ссылка);
	// -СБ. Широков Николай
	
	ОбновитьТаблоСчетовСервер();
	ОбновитьТаблоПлатежейСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФлажокОплаченоДоступен(ТекущаяСтрока) 
	 	
	ФлажокДоступен = ТекущаяСтрока.ПозицияПроведен И (ТекущаяСтрока.СтатусЗаявки = Справочники.бит_СтатусыОбъектов.Заявка_Утверждена
					ИЛИ ТекущаяСтрока.СостояниеОплаты = Справочники.бит_СтатусыОбъектов.ЧастичнаяОплата);
	
	Возврат ФлажокДоступен;
	
КонецФункции

&НаСервере
Функция ПолучитьВалютуДляОтбора(Заявка, ВалютаДокумента)

	РасчетыВУЕ = Заявка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	ВалютаДляОтбора  = ?(РасчетыВУЕ, мКэшЗначений.ВалютаРегл, ВалютаДокумента);
	
	Возврат ВалютаДляОтбора;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПересчитатьСуммыПлатежейПоВалюте(ДатаОплаты, СтрокиПересчета)
  		
	СтруктураПараметров = Новый Структура;
	
	Для каждого СтрокаПерерасчета Из СтрокиПересчета Цикл
		
		ВалютаДокумента  = СтрокаПерерасчета.Валюта;
		СуммаОстаток	 = СтрокаПерерасчета.СуммаОстаток;
		ПлатежнаяПозиция = СтрокаПерерасчета.ПлатежнаяПозиция;
		
		СтруктураПараметров.Вставить("Дата"	, ДатаОплаты);
		СтруктураПараметров.Вставить("ВалютаДокумента", ВалютаДокумента);
		
		СтрокаПерерасчета.СуммаПлатежа = бит_Казначейство.ПересчитатьСуммуПлатежаПоВалюте(
											СуммаОстаток, ПлатежнаяПозиция, СтруктураПараметров);
	КонецЦикла;
		
КонецПроцедуры

&НаСерверебезКонтекста
Процедура ОбновитьПлатежнуюПозицию(ПлатежнаяПозиция, БанковскийСчет, мТекущийБанковскийСчет, РежимСообщений)

	// Обновим платежную позицию
	ОбъектПлатежнаяПозиция = ПлатежнаяПозиция.ПолучитьОбъект();
	
	Если бит_ОбщегоНазначения.ЗаблокироватьОбъект(ОбъектПлатежнаяПозиция,Строка(ПлатежнаяПозиция),, РежимСообщений) Тогда
		
		ОбъектПлатежнаяПозиция.БанковскийСчетОрганизация = БанковскийСчет;
		
		РежимЗаписиПлатежнойПозиции = ?(ОбъектПлатежнаяПозиция.Проведен
										, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		Если Не бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ОбъектПлатежнаяПозиция
										, РежимЗаписиПлатежнойПозиции,, РежимСообщений) Тогда
			БанковскийСчет = мТекущийБанковскийСчет;
		КонецЕсли;
	Иначе
		БанковскийСчет = мТекущийБанковскийСчет;
	КонецЕсли;            		

КонецПроцедуры

&НаКлиенте
Процедура КомандаГрупповаяОплата(Команда)
	
	Если Объект.Заявки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка статуса
	Статус_Утвержден = мКэшЗначений.СтатусыОбъекта.Утвержден;
	Если Статус <> Статус_Утвержден Тогда
		ТекстСообщения = СтрШаблон(НСтр("en = 'Формирование сводных платежных документов разрешено в 
                                         |утвержденном реестре платежей (статус ""%1"").';
										 |ru = 'Формирование сводных платежных документов разрешено в 
                                         |утвержденном реестре платежей (статус ""%1"").'"),
											Статус_Утвержден);
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПозиций = СформироватьСтруктуруПозиций();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПозиций", Новый ФиксированныйМассив(СтруктураПозиций));
	ПараметрыФормы.Вставить("ДатаОплаты"	  , ДатаОплаты);
	ПараметрыФормы.Вставить("РежимЗаписи"	  , РежимЗаписи);
	ПараметрыФормы.Вставить("РежимСообщений"  , РежимСообщений);
	ПараметрыФормы.Вставить("НеФормироватьПлатежныеПоручения", Объект.НеФормироватьПлатежныеПоручения);
	ПараметрыФормы.Вставить("НеФормироватьДокументыОплаты",    Объект.НеФормироватьДокументыОплаты);
	ПараметрыФормы.Вставить("ПроводитьПлатежныеПоручения",     Объект.ПроводитьПлатежныеПоручения);
	ПараметрыФормы.Вставить("ПроводитьДокументыОплаты",        Объект.ПроводитьДокументыОплаты);
	
	Оповещение = Новый ОписаниеОповещения("КомандаГрупповаяОплатаОкончание", ЭтотОбъект); 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ОткрытьФорму("Обработка.бит_ГрупповаяОплатаЗаявок.Форма", ПараметрыФормы, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ОткрытьФорму("Обработка.бит_ГрупповаяОплатаЗаявок.Форма", ПараметрыФормы, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

// Процедура окончание процедуры "КомандаГрупповаяОплата".
// 
&НаКлиенте 
Процедура КомандаГрупповаяОплатаОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ОбновитьТаблоСчетов();
	
	// +СБ. Широков Николай. 2014-11-25. ТЗ 2.2.11.3 
	СБ_КазначействоСервер.ВыгрузитьПлатежныеПорученияВФоновомЗадании(Объект.Ссылка);
	// -СБ. Широков Николай
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПозиций()
	
	СтруктураПозиций = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Объект.Заявки Цикл
		
		Если НЕ СтрокаТаблицы.ОплаченоДоступность Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ СтрокаТаблицы.Оплачено Тогда
			Продолжить;
		КонецЕсли;  		

		// Проверим статус платежной позиции.
		СтрСтатус = бит_Визирование.ПолучитьСтатусОбъекта(СтрокаТаблицы.ПлатежнаяПозиция,Перечисления.бит_ВидыСтатусовОбъектов.Статус);
		Если СтрСтатус.Статус = Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта Тогда
			Продолжить;
		КонецЕсли; 
		
		// Проверка на превышение суммы оплаты.
		Если СтрокаТаблицы.СуммаКОплате > СтрокаТаблицы.СуммаКОплатеНач Тогда
			Продолжить;
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("ПлатежнаяПозиция", СтрокаТаблицы.ПлатежнаяПозиция);
		Структура.Вставить("СуммаКОплате"	 , СтрокаТаблицы.СуммаКОплате);
		Структура.Вставить("СуммаКОплатеНач" , СтрокаТаблицы.СуммаКОплатеНач);
		Структура.Вставить("ВалютаПлатежа"	 , СтрокаТаблицы.Валюта);
		
		СтруктураПозиций.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат СтруктураПозиций;
	
КонецФункции

// Процедура актуализирует курсы выбранных заявок. 
//
&НаСервере
Процедура АктуализироватьКурсыЗаявок()
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-28 (#НТП_БП12_ФР01)
	ок_ПроверитьНаличиеКурсовНаДату(ДатаОплаты);
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-28 (#НТП_БП12_ФР01)

	Для каждого Стр Из Объект.Заявки Цикл
		ТекОбъект = Стр.Заявка.ПолучитьОбъект();
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
		Если ТекОбъект.ДатаРасхода <> ДатаОплаты Тогда
			ТекОбъект.ДатаРасхода = ДатаОплаты;	
		КонецЕсли;
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
		ТекОбъект.АктуализироватьПоКурсам()
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСтрокиТаблицыЗаявки()

	СвойстваСтроки = Новый Структура("ПлатежнаяПозиция, СтатусЗаявки, СостояниеОплаты, ПозицияПроведен"); 	
	Возврат СвойстваСтроки;
	
КонецФункции
 
&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ВосстановитьНастройки();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияОбновитьТабло()

	// Обновим табло счетов.
	ОбновитьТаблоСчетов();

КонецПроцедуры

//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
//&НаКлиенте
&НаКлиентеНаСервереБезКонтекста
//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
Функция НайтиСтрокуВТаблоСчетов(КонтрольнаяСумма, Коллекция)

	Результат = Неопределено;
	
	Для каждого Элемент Из Коллекция Цикл
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если Элемент.КонтрольнаяСумма = КонтрольнаяСумма Тогда
			Результат = Элемент;
		Иначе
			ПодчиненныеСтроки = Элемент.ПолучитьЭлементы();
			Если ПодчиненныеСтроки.Количество() > 0 Тогда
				Результат = НайтиСтрокуВТаблоСчетов(КонтрольнаяСумма, ПодчиненныеСтроки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-25 (#3882)
&НаКлиентеНаСервереБезКонтекста
Функция НайтиРодительскуюСтрокуВТаблоСчетов(Строка, Коллекция, МассивИменСоответствий = Неопределено)
	
	Результат = Неопределено;
	
	Если МассивИменСоответствий = Неопределено Тогда
		
		МассивИменСоответствий = Новый Массив();
		
		СтруктураСоответствий = Новый Структура();
		СтруктураСоответствий.Вставить("ИмяРеквизитаТабло", "Организация");
		СтруктураСоответствий.Вставить("ИмяРеквизитаПеречня", "Организация");
		МассивИменСоответствий.Добавить(СтруктураСоответствий);
		
		СтруктураСоответствий = Новый Структура();
		СтруктураСоответствий.Вставить("ИмяРеквизитаТабло", "ВидДенежныхСредств");
		СтруктураСоответствий.Вставить("ИмяРеквизитаПеречня", "ФормаОплаты");
		МассивИменСоответствий.Добавить(СтруктураСоответствий);
	
	КонецЕсли; 
	
	Для каждого Элемент Из Коллекция Цикл
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПроверитьСоответствие(Элемент, Строка, МассивИменСоответствий) Тогда
			Результат = Элемент;
		Иначе
			ПодчиненныеСтроки = Элемент.ПолучитьЭлементы();
			Если ПодчиненныеСтроки.Количество() > 0 Тогда
				Результат = НайтиРодительскуюСтрокуВТаблоСчетов(Строка, ПодчиненныеСтроки, МассивИменСоответствий);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьСоответствие(СтрокаТабло, СтрокаПеречень, МассивИменРодителей)

	Для каждого ЭлементСоответствия Из МассивИменРодителей Цикл
	
		Если СтрокаТабло[ЭлементСоответствия.ИмяРеквизитаТабло] <> СтрокаПеречень[ЭлементСоответствия.ИмяРеквизитаПеречня] Тогда
		
			Возврат Ложь;
		
		КонецЕсли; 
	
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция НайтиСтрокуВТаблоСчетовНаКлиенте(КонтрольнаяСумма, Коллекция)

	Результат = Неопределено;
	
	Для каждого Элемент Из Коллекция Цикл
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если Элемент.КонтрольнаяСумма = КонтрольнаяСумма Тогда
			Результат = Элемент;
		Иначе
			ПодчиненныеСтроки = Элемент.ПолучитьЭлементы();
			Если ПодчиненныеСтроки.Количество() > 0 Тогда
				Результат = НайтиСтрокуВТаблоСчетовНаКлиенте(КонтрольнаяСумма, ПодчиненныеСтроки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НайтиРодительскуюСтрокуВТаблоСчетовНаКлиенте(Строка, Коллекция, МассивИменСоответствий = Неопределено)
	
	Результат = Неопределено;
	
	Если МассивИменСоответствий = Неопределено Тогда
		
		МассивИменСоответствий = Новый Массив();
		
		СтруктураСоответствий = Новый Структура();
		СтруктураСоответствий.Вставить("ИмяРеквизитаТабло", "Организация");
		СтруктураСоответствий.Вставить("ИмяРеквизитаПеречня", "Организация");
		МассивИменСоответствий.Добавить(СтруктураСоответствий);
		
		СтруктураСоответствий = Новый Структура();
		СтруктураСоответствий.Вставить("ИмяРеквизитаТабло", "ВидДенежныхСредств");
		СтруктураСоответствий.Вставить("ИмяРеквизитаПеречня", "ФормаОплаты");
		МассивИменСоответствий.Добавить(СтруктураСоответствий);
	
	КонецЕсли; 
	
	Для каждого Элемент Из Коллекция Цикл
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПроверитьСоответствиеНаКлиенте(Элемент, Строка, МассивИменСоответствий) Тогда
			Результат = Элемент;
		Иначе
			ПодчиненныеСтроки = Элемент.ПолучитьЭлементы();
			Если ПодчиненныеСтроки.Количество() > 0 Тогда
				Результат = НайтиРодительскуюСтрокуВТаблоСчетовНаКлиенте(Строка, ПодчиненныеСтроки, МассивИменСоответствий);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьСоответствиеНаКлиенте(СтрокаТабло, СтрокаПеречень, МассивИменРодителей)

	Для каждого ЭлементСоответствия Из МассивИменРодителей Цикл
	
		Если СтрокаТабло[ЭлементСоответствия.ИмяРеквизитаТабло] <> СтрокаПеречень[ЭлементСоответствия.ИмяРеквизитаПеречня] Тогда
		
			Возврат Ложь;
		
		КонецЕсли; 
	
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-25 (#3882)

&НаКлиенте
Процедура ВыделитьТекущуюСтрокуВТабло(ТекущаяСтрока)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекущаяКонтрольнаяСумма = ТекущаяСтрока.КонтрольнаяСумма;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-25 (#3882)
	//Элемент = НайтиСтрокуВТаблоСчетов(ТекущаяКонтрольнаяСумма, ТаблоСчетов.ПолучитьЭлементы());	
	Элемент = НайтиСтрокуВТаблоСчетовНаКлиенте(ТекущаяКонтрольнаяСумма, ТаблоСчетов.ПолучитьЭлементы());	
	Если Элемент = Неопределено Тогда
		Элемент = НайтиРодительскуюСтрокуВТаблоСчетовНаКлиенте(ТекущаяСтрока, ТаблоСчетов.ПолучитьЭлементы());
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-25 (#3882)
	Если Элемент <> Неопределено  Тогда
		Элементы.ТаблоСчетов.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблоСчетов(ОбновитьТаблоПлатежей = Ложь)
	
	ОбновитьТаблоСчетовСервер(ОбновитьТаблоПлатежей);
	мУстановленОтбор = Ложь;

	РазвернутьУзлыТаблоСчетов();	
	         	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУзлыТаблоСчетов()

	Для каждого Элемент Из ТаблоСчетов.ПолучитьЭлементы() Цикл
		Элементы.ТаблоСчетов.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
	КонецЦикла;	

КонецПроцедуры
 
&НаКлиенте
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура РасчитатьСуммыРасхода()
Процедура РасчитатьСуммыРасхода(ОбновлятьТабло = Ложь)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	// Рассчитаем суммы расхода в табло счетов
	// 1c-izhtc Оптимизация (
	//Для Каждого СтрокаТаблицы Из Объект.Заявки Цикл
	//	Если СтрокаТаблицы.Оплачено И Не ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда
	//		ОбработатьИзменениеФлажка(СтрокаТаблицы);
	//	КонецЕсли; 
	//КонецЦикла; 
 	РасчитатьСуммыРасходаНаСервере();
	// 1c-izhtc Оптимизация )	
	
	ОбновитьТаблоПлатежейСервер();

КонецПроцедуры

//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (	
//&НаКлиенте
//Процедура ОбработатьИзменениеФлажка(ТекущаяСтрока)
&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеФлажка(Форма, ТекущаяСтрока, ОбновлятьТабло = Истина)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	 //1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	 //СтрокаТабло = НайтиСтрокуВТаблоСчетов(ТекущаяСтрока.КонтрольнаяСумма, ТаблоСчетов.ПолучитьЭлементы());
	 СтрокаТабло = НайтиСтрокуВТаблоСчетов(ТекущаяСтрока.КонтрольнаяСумма, Форма.ТаблоСчетов.ПолучитьЭлементы());
	 //1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	 //ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-25 (#3882)
	 Если СтрокаТабло = Неопределено Тогда
	 	СтрокаТабло = НайтиРодительскуюСтрокуВТаблоСчетов(ТекущаяСтрока, Форма.ТаблоСчетов.ПолучитьЭлементы());
	 КонецЕсли; 
	 //ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-25 (#3882)
	 
	 // Изменение сумм в табличном поле "ТаблоСчетов".
	 Если СтрокаТабло <> Неопределено Тогда
		 Оплачено = ?(ТекущаяСтрока.Оплачено, ТекущаяСтрока.СуммаКОплате, - ТекущаяСтрока.СуммаКОплате); 
	 	 СтрокаТабло.СуммаРасход 	= СтрокаТабло.СуммаРасход + Оплачено;
	 	 СтрокаТабло.СуммаКонОстаток = СтрокаТабло.СуммаНачОстаток + СтрокаТабло.СуммаПриход - СтрокаТабло.СуммаРасход;
	 КонецЕсли; 
	 
	 Если ОбновлятьТабло Тогда 
		 Форма.ОбновитьТаблоПлатежейСервер();
	 КонецЕсли;
	 
КонецПроцедуры
 
// 1c-izhtc Оптимизация (
//&НаКлиенте
&НаСервере
// 1c-izhtc Оптимизация )
Процедура ОбработатьФлаги(ЗначениеФлага)
		
	Для каждого СтрокаТаблицы Из Объект.Заявки Цикл
		Если НЕ СтрокаТаблицы.ОплаченоДоступность ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда
			Продолжить;		
		КонецЕсли; 		
		
		ПредыдущееЗначениеФлага = СтрокаТаблицы.Оплачено;
		
		Если ЗначениеФлага = 0 Тогда
			СтрокаТаблицы.Оплачено = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			СтрокаТаблицы.Оплачено = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			СтрокаТаблицы.Оплачено = НЕ СтрокаТаблицы.Оплачено;
		КонецЕсли; 
		
		Если ПредыдущееЗначениеФлага <> СтрокаТаблицы.Оплачено И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент)Тогда
			// 1c-izhtc Оптимизация (
			//ОбработатьИзменениеФлажка(СтрокаТаблицы);
			ОбработатьИзменениеФлажка(ЭтаФорма, СтрокаТаблицы, Ложь);
			// 1c-izhtc Оптимизация )
		КонецЕсли; 
	КонецЦикла;
	
	ОбновитьТаблоПлатежейСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВЗаявках(КонтрольнаяСумма)
	
	Элементы.Заявки.ОтборСтрок = Неопределено;
	
	Если ПустаяСтрока(КонтрольнаяСумма) Тогда
		Элементы.Заявки.ОтборСтрок = Неопределено;
		мУстановленОтбор = Ложь;
	Иначе
		Отбор = Новый Структура("КонтрольнаяСумма", КонтрольнаяСумма);
		Элементы.Заявки.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		мУстановленОтбор = Истина;
	КонецЕсли; 
		
КонецПроцедуры
         
// Процедура проверяет превышение суммы к оплате над суммой план 
// в строке табличной части.
// 
// Параметры:
//  СтрокаТабЧасти    - СтрокаТабличнойЧасти.Заявки.
//  ЭтоИзменениеСуммы - Булево.
//  Отказ             - Булево, флаг превышения суммы к оплате над суммой план.
// 
&НаКлиенте
Процедура ПроверитьПревышениеСуммыКОплатеНадСуммойПлан_ВСтроке(СтрокаТабЧасти, ЭтоИзменениеСуммы, Отказ = Ложь) 
    
    Если СтрокаТабЧасти = Неопределено Тогда
        Возврат;
    КонецЕсли; 
    
    ВведеннаяСуммаКОплате = СтрокаТабЧасти.СуммаКОплате;
    
    Если ВведеннаяСуммаКОплате > СтрокаТабЧасти.СуммаКОплатеНач Тогда
        
        // Это  превышение.
        Если Не ЭтоИзменениеСуммы Тогда
            ТекстНачальногоСообщения = "В строке номер """ + СтрокаТабЧасти.НомерСтроки + """ табличной части ""Заявки"": ";
        Иначе
            ТекстНачальногоСообщения = "";
            СтрокаТабЧасти.СуммаКОплате = СтрокаТабЧасти.СуммаКОплатеНач;
        КонецЕсли;
        
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстНачальногоСообщения + "Введенная сумма к оплате (" + ВведеннаяСуммаКОплате + 
                                          ") превышает сумму план (" + СтрокаТабЧасти.СуммаКОплатеНач + ").");
        Отказ = Истина;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборДляПеречня()

	Команда           = "ПодборВТабличнуюЧастьЗаявки";
	ИмяТабличнойЧасти = "Заявки";
        
	ПредставлениеДок = "Реестр";
	 
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда" , Команда);

	// Параметры запросов.
	СтруктураПараметровПодбора.Вставить("ДатаНачала"	, НачалоДня(Объект.Дата));
	СтруктураПараметровПодбора.Вставить("ДатаОкончания" , КонецДня(Объект.Дата));
	СтруктураПараметровПодбора.Вставить("Организация"	, Объект.Организация);

	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор заявок на расходование денежных средств в документ " + 
										ПредставлениеДок + " № " + Объект.Номер + " (" + ИмяТабличнойЧасти + ")");

	// Открываем форму подбора.
	ОткрытьФорму("Обработка.бит_ПодборЗаявокНаРасходованиеДенежныхСредств.Форма", СтруктураПараметровПодбора, ЭтаФорма);

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
// 
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию "заявки на расходование средств".
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
// 
&НаКлиенте
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	// ПлатежнаяПозиция - Найденное значение в структуре ЗначениеВыбора.
	Перем ПлатежнаяПозиция;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("ПлатежнаяПозиция", ПлатежнаяПозиция);
	
	// Ищем выбранную позицию в таблице подобранной заявки на расходование денежных средств.
	// Если найдем - сообщим пользователю о наличии такой строки; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	Если ТабличнаяЧасть = Объект.Заявки Тогда
		СтруктураОтбора.Вставить("ПлатежнаяПозиция", ПлатежнаяПозиция);
	КонецЕсли;
	
	// СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-05 (#4209)
	Если ЭтотОбъект.Окно <> АктивноеОкно() Тогда
		Активизировать();
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-05 (#4209)
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Платежная позиция """ + ПлатежнаяПозиция + """ уже подобрана в строке №" + СтрокаТабличнойЧасти.НомерСтроки + ".");
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) И ЗначениеВыбора.Организация <> Объект.Организация Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Не добавлена позиция """ + ПлатежнаяПозиция + " . Организация не соответствует значению, указанному в реестре.");	
	Иначе
		
		// Не нашли и организация соответствует значению в реестре - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		
		Если ТабличнаяЧасть = Объект.Заявки Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначениеВыбора);
			
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-02 (#4209)
			Если Не БанковскийСчетУказанКорректно(ЗначениеВыбора.Заявка) Тогда
				
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("Номер");
				СтруктураРеквизитов.Вставить("Дата");
				
				РеквизитыПлатежнойОперации = ПолучитьЗначенияРеквизитовОбъекта(ЗначениеВыбора.ПлатежнаяПозиция, СтруктураРеквизитов);
				
				ШаблонСообщения = "В строке № %1 банковский счет контрагента заполнен не по правилам. Платежная позиция №%2 от %3";
				ПутьКПолюТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Заявки", СтрокаТабличнойЧасти.НомерСтроки, "ЗаявкаНомер");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, 
											Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧГ=0"),
											РеквизитыПлатежнойОперации.Номер,
											РеквизитыПлатежнойОперации.Дата);
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ПутьКПолюТабличнойЧасти);
			КонецЕсли;
			// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-02 (#4209)
				
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежныеДокументы(ФормаОплаты = Неопределено)

	Если Объект.Заявки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	Если НЕ ЗначениеЗаполнено(ДатаОплаты) Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр("ru='Не указана Дата уплаты'"));
		Возврат;
	КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	// Проверка статуса.
	Статус_Утвержден = мКэшЗначений.СтатусыОбъекта.Утвержден;
	Если Статус <> Статус_Утвержден Тогда
		ПоказатьПредупреждение(,НСтр("ru='Формирование платежных документов разрешено в 
					  					 |утвержденном реестре платежей (статус """ + Статус_Утвержден + """).'"), 30);
		Возврат;
	КонецЕсли;                                                                             
	
	ОчиститьСообщения();
	Если РежимСообщений = "Все" Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр("ru='Выполняется создание платежных документов...'"));
	КонецЕсли; 
	
	БезналичныеДС = мКэшЗначений.Перечисления.бит_ВидыДенежныхСредств.Безналичные;
	
	// Создадим документы.
	СоздатьПлатежныеДокументыСервер(ФормаОплаты);
	ПоказатьОповещениеПользователя("Обработка завершена",,"Формирование документов оплаты завершено", БиблиотекаКартинок.Информация32);
	
	// Раскроем табло счетов.
	РазвернутьУзлыТаблоСчетов();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УправлениеТабломСчетов()
	
	ГруппаТабло = Элементы.ГруппаТаблоСчетов;
	
	Если ГруппаТабло.Видимость <> ОтобразитьТаблоСчетов Тогда
		ГруппаТабло.Видимость = ОтобразитьТаблоСчетов;		
	КонецЕсли;
	
	Элементы.ФормаОтобразитьСкрытьТаблоСчетов.Пометка = ОтобразитьТаблоСчетов;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	// СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	СостояниеДокумента = -1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// ТаблоСчетов
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблоСчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблоСчетов.СуммаКонОстаток", ВидСравненияКомпоновкиДанных.Меньше, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблоСчетов");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблоСчетов.КонтрольнаяСумма", ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных("ТекущаяКонтрольнаяСумма"));
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблоСчетов.Описание", ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных("ОписаниеБанковскогоСчета"));
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.бит_ОсновнойЭлементСписка);
	
	// ЗаявкиБанковскийСчетОрганизация, ЗаявкиСуммаКОплате, ЗаявкиОплачено.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗаявкиБанковскийСчетОрганизация");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗаявкиСуммаКОплате");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗаявкиОплачено");
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,,
	//				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
	//	"Объект.Заявки.ПлатежныйДокумент", ВидСравненияКомпоновкиДанных.Заполнено, "");
	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
	//	"Объект.Заявки.ОплаченоДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,,
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"Объект.Заявки.СостояниеОплаты", ВидСравненияКомпоновкиДанных.НеРавно, Справочники.бит_СтатусыОбъектов.ЧастичнаяОплата);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
		"Объект.Заявки.СтатусЗаявки", ВидСравненияКомпоновкиДанных.НеРавно, Справочники.бит_СтатусыОбъектов.Заявка_Утверждена);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ЗаявкиБанковскийСчетОрганизация.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗаявкиБанковскийСчетОрганизация");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Заявки.ФормаОплаты", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыДенежныхСредств.Наличные);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ЗаявкиОплачено.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗаявкиОплачено");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Заявки.СуммаКОплате", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти

// 1c-izhtc spawn (
&НаСервереБезКонтекста
Функция ЗаполитьРеквизитыДляОтбораПоЗавке(ТекущаяЗаявка)
	ДанныеСтроки = Новый Структура;
	Если ЗначениеЗаполнено(ТекущаяЗаявка) Тогда 
		ДанныеСтроки.Вставить("Контрагент", "Контрагент");
		ДанныеСтроки.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
		ДанныеСтроки.Вставить("СтатьяОборотов", "СтатьяОборотов");
		ДанныеСтроки.Вставить("ЗаявкаНомер", "Номер");
		ДанныеСтроки.Вставить("ЗаявкаДата", "Дата");
		ДанныеСтроки.Вставить("ЗаявкаТипПлатежа", "ТипПлатежа");
		ДанныеСтроки.Вставить("ЗаявкаЦФО", "ЦФО");
		ДанныеСтроки.Вставить("ЗаявкаПроект", "Проект");
		ДанныеСтроки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяЗаявка, ДанныеСтроки);
		Если ЗначениеЗаполнено(ДанныеСтроки.СтатьяОборотов) Тогда 
			ДанныеСтроки.Вставить("ВидСтатьиОборота", ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ДанныеСтроки.СтатьяОборотов, "ВидСтатьи"));
		КонецЕсли;
	КонецЕсли;
	Возврат ДанныеСтроки;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполитьРеквизитыДляОтбораПоПлатежнойПозиции(ПлатежнаяПозиция)
	ДанныеСтроки = Новый Структура;
	Если ЗначениеЗаполнено(ПлатежнаяПозиция) Тогда 
		ДанныеСтроки.Вставить("ПлатежнаяПозицияНомер", "Номер");
		ДанныеСтроки.Вставить("ПлатежнаяПозицияДата", "Дата");
		ДанныеСтроки.Вставить("ПлатежнаяПозицияВажность", "Важность");
		ДанныеСтроки.Вставить("ПлатежнаяПозицияПроведен", "Проведен");
		ДанныеСтроки.Вставить("ПлатежнаяПозицияСтавкаНДС", "СтавкаНДС");
		ДанныеСтроки.Вставить("ПлатежнаяПозицияНДС", "НДС");
		ДанныеСтроки.Вставить("ПлатежнаяПозицияДатаРасхода", "ДатаРасхода");
		ДанныеСтроки.Вставить("ПлатежнаяПозицияДатаПлатежаКрайняя", "ДатаПлатежаКрайняя");
		ДанныеСтроки.Вставить("ПлатежнаяПозицияНомерВходящегоДокумента", "НомерВходящегоДокумента");
		ДанныеСтроки.Вставить("ПлатежнаяПозицияДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		ДанныеСтроки.Вставить("ПлатежнаяПозицияНазначениеПлатежа", "НазначениеПлатежа");
		ДанныеСтроки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПлатежнаяПозиция, ДанныеСтроки);
	КонецЕсли; 
	Возврат ДанныеСтроки;
КонецФункции

&НаСервере
Процедура РасчитатьСуммыРасходаНаСервере()
	
	// Рассчитаем суммы расхода в табло счетов.
	Для Каждого СтрокаТаблицы Из Объект.Заявки Цикл
		//Если СтрокаТаблицы.Оплачено И Не ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда
		Если СтрокаТаблицы.Оплачено Тогда
			// 1c-izhtc Оптимизация (
			//ОбработатьИзменениеФлажка(СтрокаТаблицы);
			ОбработатьИзменениеФлажка(ЭтаФорма, СтрокаТаблицы, Ложь);
			// 1c-izhtc Оптимизация )
		КонецЕсли; 
	КонецЦикла; 
	
	ОбновитьТаблоПлатежейСервер();
 
КонецПроцедуры

// 1c-izhtc spawn )

&НаСервереБезКонтекста
Функция ПолучитьСвойствоХарактеристик(ИмяХарактеристики)
	Если СокрЛП(ИмяХарактеристики) = "" Тогда
	    Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ДополнительныеРеквизитыИСведения.Ссылка
					|ИЗ
					|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
					|ГДЕ
					|	ДополнительныеРеквизитыИСведения.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", СокрЛП(ИмяХарактеристики));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	    Возврат Выборка.Ссылка;
	Иначе
	    Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	КонецЕсли; 

КонецФункции // ПолучитьСвойствоХарактеристик()

// +СБ. Широков Николай. 2015-01-27. Доработка #1258
//
&НаКлиентеНаСервереБезКонтекста
Функция ВидСравненияКомпоновкиДанныхПоВидуСравнения(ВидСравненияОтбора)

	Если ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат ВидСравненияКомпоновкиДанных.Больше;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВИерархии;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат ВидСравненияКомпоновкиДанных.Меньше;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВИерархии;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСписке;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеРавно;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеСодержит Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеСодержит;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Содержит Тогда
		Возврат ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;	

КонецФункции 
// -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-15. ТЗ "Казначейство" 2.2.3.1.
&НаКлиенте
Процедура СБ_РаспределитьПоБИК(Команда)
	
	Если Объект.Заявки.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 	
	СБ_РаспределитьПоБИКНаСервере();
	// Обновим табло счетов
	ОбновитьТаблоСчетов(Истина);
	
КонецПроцедуры 

&НаСервере
Процедура СБ_РаспределитьПоБИКНаСервере()

	МассивПлатежныхПозиций = Новый Массив;
	Для каждого СтрТЧ Из Объект.Заявки Цикл
		МассивПлатежныхПозиций.Добавить(СтрТЧ.ПлатежнаяПозиция);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ПлатежнаяПозиция.Ссылка КАК ПлатежнаяПозиция,
	|	бит_ПлатежнаяПозиция.Организация,
	|	БанковскиеСчета.Банк
	|ПОМЕСТИТЬ БанкиВыплаты
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО бит_ПлатежнаяПозиция.БанковскийСчетКонтрагент = БанковскиеСчета.Ссылка
	|ГДЕ
	|	бит_ПлатежнаяПозиция.Ссылка В(&МассивПлатежныхПозиций)
	|	И бит_ПлатежнаяПозиция.БанковскийСчетОрганизация = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанкиВыплаты.ПлатежнаяПозиция,
	|	МАКСИМУМ(БанковскиеСчета.Ссылка) КАК БанковскийСчетОрганизация,
	|	ПРЕДСТАВЛЕНИЕ(БанкиВыплаты.ПлатежнаяПозиция) КАК ПлатежнаяПозицияПредставление
	|ИЗ
	|	БанкиВыплаты КАК БанкиВыплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО БанкиВыплаты.Организация = БанковскиеСчета.Владелец
	|			И БанкиВыплаты.Банк = БанковскиеСчета.Банк
	|			И (БанковскиеСчета.СБ_РаспределениеПоБанкам)
	|
	|СГРУППИРОВАТЬ ПО
	|	БанкиВыплаты.ПлатежнаяПозиция";
	Запрос.УстановитьПараметр("МассивПлатежныхПозиций", МассивПлатежныхПозиций);
	
	РезультаЗапроса = Запрос.Выполнить();
	
	Если РезультаЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли; 
		
	Выборка = РезультаЗапроса.Выбрать();
	
	СчетаПлатежныхПозиций = Новый Соответствие;
	
	//ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	//
	//ФормаПрогрессора.Значение = 0;
	//ФормаПрогрессора.МаксимальноеЗначение = Выборка.Количество();
	//ФормаПрогрессора.НаименованиеОбработкиДанных  	= "Распределить по БИК";
	//ФормаПрогрессора.КомментарийОбработкиДанных  	= "Изменение платежных позиций";
	//
	//ФормаПрогрессора.Открыть();
	
	Сч = 0;
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Сч = Сч + 1;
		
		//ФормаПрогрессора.КомментарийЗначения = Выборка.ПлатежнаяПозицияПредставление;
		
		Попытка
		
			//ПлатежнаяПозицияОбъект = Выборка.ПлатежнаяПозиция.ПолучитьОбъект();
			//ПлатежнаяПозицияОбъект.Заблокировать();
			//ПлатежнаяПозицияОбъект.БанковскийСчетОрганизация = Выборка.БанковскийСчетОрганизация;
			//
			//мРежимЗаписиДокумента = ?(ПлатежнаяПозицияОбъект.Проведен
			//	, РежимЗаписиДокумента.Проведение
			//	, РежимЗаписиДокумента.Запись
			//	);
			//	
			//ПлатежнаяПозицияОбъект.Записать(мРежимЗаписиДокумента);
			//
			Сообщить("В документе " + СокрЛП(Выборка.ПлатежнаяПозицияПредставление) + " проставлен банковский счет организации"); 
			
			СчетаПлатежныхПозиций.Вставить(Выборка.ПлатежнаяПозиция, Выборка.БанковскийСчетОрганизация);
			МассивДокументов.Добавить(Выборка.ПлатежнаяПозиция);
			
			//ФормаПрогрессора.Значение = Сч;
			
		Исключение
			
			Сообщить(СокрЛП(Выборка.ПлатежнаяПозицияПредставление) + ": " + ОписаниеОшибки());
			
		КонецПопытки; 
		
	КонецЦикла;
	
	ИзменитьБанковскийСчетВПлатежныхПозициях(МассивДокументов, СчетаПлатежныхПозиций);
	
	//Проставим банковский счет в ТЧ
	Для каждого СтрТЧ Из Объект.Заявки Цикл
		
		СчетПлатежнойПозиции = СчетаПлатежныхПозиций[СтрТЧ.ПлатежнаяПозиция];
		
		Если ЗначениеЗаполнено(СчетПлатежнойПозиции) Тогда
			СтрТЧ.БанковскийСчетОрганизация = СчетПлатежнойПозиции;	
		КонецЕсли;
		
	КонецЦикла; 
	
	//ФормаПрогрессора.КомментарийОбработкиДанных  	= "Обновление табло счетов и платежей";
	//ФормаПрогрессора.КомментарийЗначения 		= "";
	
	//ФормаПрогрессора.Закрыть();
	
	ОбновитьТаблоСчетовСервер();
	ОбновитьТаблоПлатежейСервер();
	РасчитатьСуммыРасходаНаСервере();
	
КонецПроцедуры // СБ_РаспределитьПоБИКНаСервере()
 // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-15. ТЗ "Казначейство" 2.2.3.1.  
&НаКлиенте
Процедура СБ_РаспределитьПоСумме(Команда)
	ЗаполнитьДобавленныеКолонкиТаблиц(Истина);         //Пересчитаем служебные поля таблицы заявки
	//Проверим установлены ли отборы
	УстановленныеОтобры = Новый Массив;
	
	//ОтборСтрок - Фиксированная структура
	//Для каждого ЭлементОтбора Из Элементы.Заявки.ОтборСтрок Цикл
	//	Если НЕ ЭлементОтбора.Использование Тогда
	//		Продолжить;
	//	КонецЕсли; 
	//	УстановленныеОтобры.Добавить(ЭлементОтбора);
	//	
	//КонецЦикла;
	
	Если НЕ (Элементы.Заявки.ОтборСтрок = Неопределено) Тогда
	    УстановленныеОтобры.Добавить(Элементы.Заявки.ОтборСтрок) 
	КонецЕсли; 
	
	//Если отборы установлены, то спросим пользователя
	ПараметрыКоманды = Новый Структура ;
	
	ИспользоватьФильтр = Ложь;
	ПараметрыКоманды.Вставить("УстановленныеОтобры", УстановленныеОтобры);
	ПараметрыКоманды.Вставить("ИспользоватьФильтр",  ИспользоватьФильтр);
	Если УстановленныеОтобры.Количество() > 0 Тогда
		ТекстВопроса = "Выполнить действие с учетом наложенного фильтра?";
		Оповещение = Новый ОписаниеОповещения("ОбработкаУстановленныхОтборов", ЭтаФорма, ПараметрыКоманды);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("Документ.бит_РеестрПлатежей.Форма.СБ_ПараметрыДействия",ПараметрыФормы,,,
						ВариантОткрытияОкна.ОтдельноеОкно,,
						Новый ОписаниеОповещения("ОбработкаФормыСБ_РаспределитьПоСумме",ЭтотОбъект, ПараметрыКоманды),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	КонецЕсли; 
	
КонецПроцедуры 

// Обработка оповещения УстановленныеОтборы
&НаКлиенте
Процедура ОбработкаУстановленныхОтборов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.ИспользоватьФильтр = Истина;
	Иначе
		ДополнительныеПараметры.ИспользоватьФильтр = Ложь;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ОткрытьФорму("Документ.бит_РеестрПлатежей.Форма.СБ_ПараметрыДействия",ПараметрыФормы,,,
						ВариантОткрытияОкна.ОтдельноеОкно,,
						Новый ОписаниеОповещения("ОбработкаФормыСБ_РаспределитьПоСумме",ЭтотОбъект, ДополнительныеПараметры),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	

КонецПроцедуры // ОбработкаУстановленныхОтборов()
 
// обработка оповещения оОбработки формы СБ_ПараметрыДействия
&НаКлиенте
Процедура ОбработкаФормыСБ_РаспределитьПоСумме(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;	                             
	КонецЕсли;
	ДополнительныеПараметры.Вставить("Результат",  Результат);
	СБ_РаспределитьПоСуммеНаСервере(ДополнительныеПараметры);
	
	// Обновим табло счетов
	ОбновитьТаблоСчетов(Истина);
	
КонецПроцедуры // ОбработкаФормыСБ_ПараметрыДействия()
 

&НаСервере
Процедура СБ_РаспределитьПоСуммеНаСервере(ПараметрыФункции)

	УстановленныеОтобры = ПараметрыФункции.УстановленныеОтобры;
	ИспользоватьФильтр  = ПараметрыФункции.ИспользоватьФильтр;
	Результат 			= ПараметрыФункции.Результат;
	ОстатокРаспределения 	= Результат.Сумма;
	РаспределитьВсего		= Результат.Сумма;
	ВыбранныйСчет			= Результат.БанковскийСчетОрганизация;
	
	//Получим список платежных позиций
	СхемаИсточникаДанных = Документы.бит_РеестрПлатежей.ПолучитьМакет("СБ_ИзвлечениеДанныхИзТЧЗаявки");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИсточникаДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИсточникаДанных.НастройкиПоУмолчанию);
	
	Если ИспользоватьФильтр Тогда
	    
		Для каждого ЭлементОтбора Из УстановленныеОтобры Цикл
			
			Для каждого КлючИЗначение Из ЭлементОтбора Цикл
				ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор, КлючИЗначение.Ключ);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КомпоновщикНастроек.Настройки.Отбор, 
																	КлючИЗначение.Ключ, 
																	КлючИЗначение.Значение, 
																	ВидСравненияКомпоновкиДанных.Равно);
																	//ВидСравненияКомпоновкиДанныхПоВидуСравнения(ЭлементОтбора.ВидСравнения));
			
			КонецЦикла; 
				//ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек
				//	, ЭлементОтбора.Имя
				//	, ЭлементОтбора.Значение
				//	, ВидСравненияКомпоновкиДанныхПоВидуСравнения(ЭлементОтбора.ВидСравнения)
				//	);
				//	
		КонецЦикла; 
	
	КонецЕсли; 
	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаИсточникаДанных, 
												  КомпоновщикНастроек.Настройки,
												  ,
												  , 
												  Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), 
												  Ложь);

	ВнешниеНаборыДанных = Новый Структура;
	ТЗЗаявки = Объект.Заявки.Выгрузить();
	ВнешниеНаборыДанных.Вставить("ТЧ_Заявки", ТЗЗаявки);
												  
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки
											, ВнешниеНаборыДанных
											,
											, Истина
											);
	
	ТаблицаПлатежныхПозиций = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаПлатежныхПозиций);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	//
	//ФормаПрогрессора.Значение = 0;
	//ФормаПрогрессора.МаксимальноеЗначение = РаспределитьВсего;
	//ФормаПрогрессора.НаименованиеОбработкиДанных  	= "Распределить по сумме";
	//ФормаПрогрессора.КомментарийОбработкиДанных 	= "Распределение";
	//
	//ФормаПрогрессора.Открыть();
	
	МассивПлатежныхПозицийСПодменойСчета = Новый Массив;
	
	Для каждого СтрокаПлатежнаяПозиция Из ТаблицаПлатежныхПозиций Цикл
	
		СуммаПозиции = СтрокаПлатежнаяПозиция.СуммаРегл;
		
		Если СуммаПозиции < ОстатокРаспределения Тогда
			
			ОстатокРаспределения = ОстатокРаспределения - СуммаПозиции;
			
			//ПлатежнаяПозицияОбъект = СтрокаПлатежнаяПозиция.ПлатежнаяПозиция.ПолучитьОбъект();
			//ПлатежнаяПозицияОбъект.Заблокировать();
			//ПлатежнаяПозицияОбъект.БанковскийСчетОрганизация = ВыбранныйСчет;
			//
			//мРежимЗаписиДокумента = ?(ПлатежнаяПозицияОбъект.Проведен
			//	, РежимЗаписиДокумента.Проведение
			//	, РежимЗаписиДокумента.Запись
			//	);
			//	
			//ПлатежнаяПозицияОбъект.Записать(мРежимЗаписиДокумента);
			
			//ФормаПрогрессора.Значение 				= РаспределитьВсего - ОстатокРаспределения;
			//ФормаПрогрессора.КомментарийЗначения 	= СтрокаПлатежнаяПозиция.Представление;
			
			Сообщить("В документе " + СокрЛП(СтрокаПлатежнаяПозиция.Представление) + " проставлен банковский счет организации"); 
			
			МассивПлатежныхПозицийСПодменойСчета.Добавить(СтрокаПлатежнаяПозиция.ПлатежнаяПозиция);
			
		КонецЕсли; 
		
		Если ОстатокРаспределения = 0 Тогда
			Прервать;		
		КонецЕсли; 
		
	КонецЦикла; 
	
	ИзменитьБанковскийСчетВПлатежныхПозициях(МассивПлатежныхПозицийСПодменойСчета, ВыбранныйСчет);
	
	//Проставим банковский счет в ТЧ
	Для каждого СтрТЧ Из Объект.Заявки Цикл
		Если МассивПлатежныхПозицийСПодменойСчета.Найти(СтрТЧ.ПлатежнаяПозиция) <> Неопределено Тогда
			СтрТЧ.БанковскийСчетОрганизация = ВыбранныйСчет;	
		КонецЕсли; 
	КонецЦикла; 
	
	//ФормаПрогрессора.КомментарийОбработкиДанных  	= "Обновление табло счетов и платежей";
	//ФормаПрогрессора.КомментарийЗначения 		= "";
	
	//ФормаПрогрессора.Закрыть();	
	
	ОбновитьТаблоСчетовСервер();
	ОбновитьТаблоПлатежейСервер();
	РасчитатьСуммыРасходаНаСервере();
	
КонецПроцедуры // СБ_РаспределитьПоСуммеНаСервере()

// -СБ. Широков Николай

// +СБ. Широков Николай. 2015-02-04. Консультация #1300
&НаСервере
Процедура ИзменитьБанковскийСчетВПлатежныхПозициях(МассивДокументов, БанковскийСчетОрганизация)
	
	ЭтоСоответствие = (ТипЗнч(БанковскийСчетОрганизация) = Тип("Соответствие"));

	//ФормаПрогрессора.Значение = 0;
	//ФормаПрогрессора.МаксимальноеЗначение 		= МассивДокументов.Количество();
	//ФормаПрогрессора.КомментарийОбработкиДанных = "Изменение платежных позиций";
	//ФормаПрогрессора.КомментарийЗначения 		= "";
	
	Сч = 0;
	
	Для каждого ДокументСсылка Из МассивДокументов Цикл
		
		Сч = Сч + 1;
		
		//ФормаПрогрессора.Значение = Сч;
		
		ПлатежнаяПозицияОбъект = ДокументСсылка.ПолучитьОбъект();	
		ПлатежнаяПозицияОбъект.Заблокировать();
		
		ПлатежнаяПозицияОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьДополнительныеДействияПриОтменеПроведения");
		
		Если ЭтоСоответствие Тогда
			ПлатежнаяПозицияОбъект.БанковскийСчетОрганизация = БанковскийСчетОрганизация[ДокументСсылка];			
		Иначе	
			ПлатежнаяПозицияОбъект.БанковскийСчетОрганизация = БанковскийСчетОрганизация;			
		КонецЕсли; 
			
		ПлатежнаяПозицияОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_ПланируемыйРасходДенежныхСредств.Период,
	|	бит_ПланируемыйРасходДенежныхСредств.Регистратор КАК Регистратор,
	|	бит_ПланируемыйРасходДенежныхСредств.НомерСтроки,
	|	бит_ПланируемыйРасходДенежныхСредств.Активность,
	|	бит_ПланируемыйРасходДенежныхСредств.ВидДвижения,
	|	бит_ПланируемыйРасходДенежныхСредств.Организация,
	|	бит_ПланируемыйРасходДенежныхСредств.ВидДенежныхСредств,
	|	бит_ПланируемыйРасходДенежныхСредств.Валюта,
	|	бит_ПланируемыйРасходДенежныхСредств.ДокументПланирования,
	|	бит_ПланируемыйРасходДенежныхСредств.ЦФО,
	|	бит_ПланируемыйРасходДенежныхСредств.СтатьяОборотов,
	|	бит_ПланируемыйРасходДенежныхСредств.Проект,
	|	бит_ПланируемыйРасходДенежныхСредств.НоменклатурнаяГруппа,
	|	бит_ПланируемыйРасходДенежныхСредств.Контрагент,
	|	бит_ПланируемыйРасходДенежныхСредств.ДоговорКонтрагента,
	|	бит_ПланируемыйРасходДенежныхСредств.БанковскийСчет,
	|	бит_ПланируемыйРасходДенежныхСредств.Аналитика_1,
	|	бит_ПланируемыйРасходДенежныхСредств.Аналитика_2,
	|	бит_ПланируемыйРасходДенежныхСредств.Аналитика_3,
	|	бит_ПланируемыйРасходДенежныхСредств.Аналитика_4,
	|	бит_ПланируемыйРасходДенежныхСредств.Сумма,
	|	бит_ПланируемыйРасходДенежныхСредств.СуммаРегл,
	|	бит_ПланируемыйРасходДенежныхСредств.СуммаУпр,
	|	бит_ПланируемыйРасходДенежныхСредств.СуммаВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств КАК бит_ПланируемыйРасходДенежныхСредств
	|ГДЕ
	|	бит_ПланируемыйРасходДенежныхСредств.Регистратор В(&МассивДокументов)
	|ИТОГИ ПО
	|	Регистратор";
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//ФормаПрогрессора.Значение = 0;
	//ФормаПрогрессора.МаксимальноеЗначение 		= ВыборкаДокументы.Количество();
	//ФормаПрогрессора.КомментарийОбработкиДанных = "Изменение движений плаженых позиций";
	
	Сч = 0;
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		Сч = Сч + 1;
		
		//ФормаПрогрессора.Значение = Сч;
		
		ДокументСсылка = ВыборкаДокументы.Регистратор;
		
		НаборЗаписей = РегистрыНакопления.бит_ПланируемыйРасходДенежныхСредств.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		
		Выборка = ВыборкаДокументы.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Если Выборка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				Если ЭтоСоответствие Тогда
					Запись.БанковскийСчет = БанковскийСчетОрганизация[ДокументСсылка];			
				Иначе	
					Запись.БанковскийСчет = БанковскийСчетОрганизация;			
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла; 
		
		НаборЗаписей.Записать();
		
	КонецЦикла; 

КонецПроцедуры
 
// +СБ. Широков Николай. 2014-09-15. ТЗ "Казначейство" 2.2.3.1. 
&НаКлиенте
Процедура СБ_ОчиститьБанковскийСчет(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("Документ.бит_РеестрПлатежей.Форма.СБ_ПараметрыДействия", 
				ПараметрыФормы,,,
				ВариантОткрытияОкна.ОтдельноеОкно,,
				Новый ОписаниеОповещения("ОбработатьФормуСБ_ОчиститьБанковскийСчет",ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

// Обработка оповещения после открытия формы СБ_ПараметрыДействия
//
&НаКлиенте
Процедура ОбработатьФормуСБ_ОчиститьБанковскийСчет(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	                             
	КонецЕсли;
	ОстатокРаспределения 	= Результат.Сумма;
	РаспределитьВсего		= Результат.Сумма;
	ВыбранныйСчет			= Результат.БанковскийСчетОрганизация;
	СБ_ОчиститьБанковскийСчетНаСервере(ВыбранныйСчет, РаспределитьВсего, ОстатокРаспределения);
	
	// Обновим табло счетов
	ОбновитьТаблоСчетов(Истина);

КонецПроцедуры  // ОбработатьФормуСБ_ПараметрыДействия()

&НаСервере
Процедура СБ_ОчиститьБанковскийСчетНаСервере(ВыбранныйСчет, РаспределитьВсего, ОстатокРаспределения)

	МассивПлатежныхПозиций = Новый Массив;
	
	Для каждого СтрТЧ Из Объект.Заявки Цикл
		МассивПлатежныхПозиций.Добавить(СтрТЧ.ПлатежнаяПозиция);	
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ПлатежнаяПозиция.Ссылка КАК ПлатежнаяПозиция,
	|	бит_ПлатежнаяПозиция.СуммаРегл КАК Сумма,
	|	бит_ПлатежнаяПозиция.Представление
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	|ГДЕ
	|	бит_ПлатежнаяПозиция.Ссылка В(&МассивПлатежныхПозиций)
	|	И бит_ПлатежнаяПозиция.БанковскийСчетОрганизация = &ВыбранныйСчет";
	Запрос.УстановитьПараметр("МассивПлатежныхПозиций", МассивПлатежныхПозиций);
	Запрос.УстановитьПараметр("ВыбранныйСчет", 			ВыбранныйСчет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли; 
	
	МассивПлатежныхПозицийСПодменойСчета = Новый Массив;
	ПустойСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	//ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	//
	//ФормаПрогрессора.Значение = 0;
	//ФормаПрогрессора.МаксимальноеЗначение = РаспределитьВсего;
	//ФормаПрогрессора.КомментарийОбработкиДанных  = "Изменение платежных позиций";
	//ФормаПрогрессора.НаименованиеОбработкиДанных = "Очистить банковский счет";
	//
	//ФормаПрогрессора.Открыть();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СуммаПозиции = Выборка.Сумма;
		
		Если СуммаПозиции <= ОстатокРаспределения Тогда
			
			ОстатокРаспределения = ОстатокРаспределения - СуммаПозиции;
			
			////ПлатежнаяПозицияОбъект = Выборка.ПлатежнаяПозиция.ПолучитьОбъект();
			////ПлатежнаяПозицияОбъект.Заблокировать();
			////ПлатежнаяПозицияОбъект.БанковскийСчетОрганизация = ПустойСчет;
			////
			////мРежимЗаписиДокумента = ?(ПлатежнаяПозицияОбъект.Проведен
			////	, РежимЗаписиДокумента.Проведение
			////	, РежимЗаписиДокумента.Запись
			////	);
			////	
			////ПлатежнаяПозицияОбъект.Записать(мРежимЗаписиДокумента);
			
			//ФормаПрогрессора.Значение 				= РаспределитьВсего - ОстатокРаспределения;
			//ФормаПрогрессора.КомментарийЗначения 	= Выборка.Представление;

			Сообщить("В документе " + СокрЛП(Выборка.Представление) + " очищен банковский счет организации"); 
			
			МассивПлатежныхПозицийСПодменойСчета.Добавить(Выборка.ПлатежнаяПозиция);
			
		КонецЕсли; 
		
		Если ОстатокРаспределения = 0 Тогда
			Прервать;		
		КонецЕсли; 
		
	КонецЦикла; 
	
	ИзменитьБанковскийСчетВПлатежныхПозициях(МассивПлатежныхПозицийСПодменойСчета, ПустойСчет);
	
	//Проставим банковский счет в ТЧ
	Для каждого СтрТЧ Из Объект.Заявки Цикл
		Если МассивПлатежныхПозицийСПодменойСчета.Найти(СтрТЧ.ПлатежнаяПозиция) <> Неопределено Тогда
			СтрТЧ.БанковскийСчетОрганизация = ПустойСчет;	
		КонецЕсли; 
	КонецЦикла; 
	
	//ФормаПрогрессора.КомментарийОбработкиДанных = "Обновление табло счетов и платежей";
	//ФормаПрогрессора.КомментарийЗначения 		= "";
	
	//ФормаПрогрессора.Закрыть();	

	ОбновитьТаблоСчетовСервер();
	ОбновитьТаблоПлатежейСервер();
	РасчитатьСуммыРасходаНаСервере();
	
КонецПроцедуры // СБ_ОчиститьБанковскийСчетНаСервере()  // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-15. ТЗ "Казначейство" 2.2.3.1. 
&НаКлиенте
Процедура СБ_ОчиститьЗаявки(Команда)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("БанковскийСчетОрганизация", ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка"));
	
	МассивУдаляемыхСтрок = Объект.Заявки.НайтиСтроки(СтруктураПоиска);
	
	//ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	//
	//ФормаПрогрессора.Значение = 0;
	//ФормаПрогрессора.МаксимальноеЗначение = МассивУдаляемыхСтрок.Количество();
	//ФормаПрогрессора.НаименованиеОбработкиДанных  	= "Очистить заявки";
	//ФормаПрогрессора.КомментарийОбработкиДанных 	= "Удаление строк табличной части";
	//
	//ФормаПрогрессора.Открыть();
	
	Сч = 0;
	
	Для каждого СтрТЧ Из МассивУдаляемыхСтрок Цикл
		
		Сч = Сч + 1;
		//ФормаПрогрессора.Значение = Сч;
		
		Объект.Заявки.Удалить(СтрТЧ);
		
	КонецЦикла; 	
	
	//ФормаПрогрессора.КомментарийОбработкиДанных  	= "Обновление табло счетов и платежей";
	
	СБ_ОчиститьЗаявкиСервер();
	// Обновим табло счетов
	ОбновитьТаблоСчетов(Истина);
	
	//ФормаПрогрессора.Закрыть();	
	
КонецПроцедуры // -СБ. Широков Николай

Процедура СБ_ОчиститьЗаявкиСервер()
	ОбновитьТаблоСчетовСервер();
	ОбновитьТаблоПлатежейСервер();
	РасчитатьСуммыРасходаНаСервере();
КонецПроцедуры

// +СБ. Широков Николай. 2014-09-15. ТЗ "Казначейство" 2.2.3.1.  
&НаКлиенте
Процедура СБ_ДополнительныйОтбор(Команда)
	
	//Если мДополнительныеОтборы = Неопределено Тогда
	//
	//	мДополнительныеОтборы = Новый Структура("Контрагент, ДоговорКонтрагента, СтатьяОборотов, ВидСтатьиОборота");
	//	
	//КонецЕсли; 
	//
	//мДополнительныеОтборы.Вставить("АдресОсновногоОтбора", ПоместитьВоВременноеХранилище(Элементы.Заявки.ОтборСтрок)); 
	мДополнительныеОтборы = Новый Структура;
	Если НЕ (Элементы.Заявки.ОтборСтрок = Неопределено) Тогда
		Для каждого КлючЗначение Из Элементы.Заявки.ОтборСтрок Цикл
		   мДополнительныеОтборы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение)
		КонецЦикла; 
	КонецЕсли; 
	
	мДополнительныеОтборы = Новый Структура;
	мДополнительныеОтборы.Вставить("ОсновнойОтбор",Элементы.Заявки.ОтборСтрок);
	ОткрытьФорму("Документ.бит_РеестрПлатежей.Форма.СБ_ДополнительныйОтбор", 
				мДополнительныеОтборы, 
				ЭтаФорма,,
				ВариантОткрытияОкна.ОтдельноеОкно,,
				Новый ОписаниеОповещения("ОбработкаФормыСБ_ДополнительныйОтбор",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецПроцедуры	
			
&НаКлиенте
Процедура ОбработкаФормыСБ_ДополнительныйОтбор(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		Если Результат.Количество() > 0 Тогда
		    Элементы.Заявки.ОтборСтрок = Новый ФиксированнаяСтруктура(Результат);
			Элементы.СБ_ОтключитьОтбор.Доступность = Истина;
		Иначе
			Элементы.Заявки.ОтборСтрок = Неопределено;
			Элементы.СБ_ОтключитьОтбор.Доступность = Ложь;
		КонецЕсли; 
		
		//мДополнительныеОтборы 	= Результат;
		//ОсновнойОтбор 			= Результат.ОсновнойОтбор;
		//
		//мДополнительныеОтборы.Удалить("ОсновнойОтбор");
		//
		//ЕстьУстановленныеЗначенияОтбора = Ложь;
		//
		//Для каждого ЭлементДопОтбора Из мДополнительныеОтборы Цикл
		//	Если ЗначениеЗаполнено(ЭлементДопОтбора.Значение) Тогда
		//		ЕстьУстановленныеЗначенияОтбора = Истина;		
		//	КонецЕсли;                                          	
		//КонецЦикла; 
		//
		//КоллекцияОтборов = Элементы.Заявки.ОтборСтрок;
		//
		//Если ЕстьУстановленныеЗначенияОтбора Тогда
		//	УстановитьОтборПоСвязаннымДанным(мДополнительныеОтборы);
		//Иначе
		//	Если КоллекцияОтборов.Свойство("Заявка") Тогда
		//		//ОтборПоЗаявкам = КоллекцияОтборов.Найти();
		//		//ОтборПоЗаявкам.Использование 	= Ложь;
		//		 КоллекцияОтборов.Заявка = Неопределено;
		//	КонецЕсли; 
		//КонецЕсли; 
		//
		////Установим основной отбор
		//Для каждого НастройкаОтбора Из ОсновнойОтбор Цикл
		//	
		//	//ЭлементОтбора = КоллекцияОтборов.Найти(НастройкаОтбора.ПолеОтбора);
		//	//ЭлементОтбора.ВидСравнения 	= НастройкаОтбора.ВидСравнения;
		//	//ЭлементОтбора.Использование = НастройкаОтбора.Использование;
		//	
		//	//Если ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке
		//	//	ИЛИ ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		//	//	
		//	//	мСписок = Новый СписокЗначений;
		//	//	мСписок.ЗагрузитьЗначения(НастройкаОтбора.ЗначениеСписок);
		//	//	ЭлементОтбора.Значение = мСписок;
		//	//ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Интервал
		//	//	ИЛИ ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы
		//	//	ИЛИ ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало
		//	//	ИЛИ ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		//	//	
		//	//	ЭлементОтбора.ЗначениеС		= НастройкаОтбора.ЗначениеС;
		//	//	ЭлементОтбора.ЗначениеПо	= НастройкаОтбора.ЗначениеПо;
		//	//Иначе
		//	//	ЭлементОтбора.Значение		= НастройкаОтбора.Значение;
		//	//КонецЕсли;
		//	
		//КонецЦикла; 
		//ОбновитьСостояниеКнопокОтбораПоЗначениеюВКолонке();
		
	КонецЕсли;
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-10-09. ТЗ "Казначейство" 2.2.3.1. 
&НаКлиенте
Процедура СБ_ОтборПоЗначениюВТекущейКононке(Команда)
	
	ТабличноеПолеЗаявки = Элементы.Заявки;
	
	ТекущаяСтрока = ТабличноеПолеЗаявки.ТекущиеДанные; 	//.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	УстановитьОтбор = НЕ Элементы.СБ_ОтборПоЗначениюВТекущейКононке.Пометка; //НЕ Кнопка.Пометка;
	
	
	Элементы.СБ_ОтборПоЗначениюВТекущейКононке.Пометка	= УстановитьОтбор;
	//Контекстное меню
	Элементы.СБ_КонтекстноеМенюЗаявкиОтборПоЗначениюВТекущейКононке.Пометка = УстановитьОтбор;
	
	ИмяКолонки = ?(Найти(ТабличноеПолеЗаявки.ТекущийЭлемент.Имя, "Заявки") = 1, 
			Прав(ТабличноеПолеЗаявки.ТекущийЭлемент.Имя,СтрДлина(ТабличноеПолеЗаявки.ТекущийЭлемент.Имя) - СтрДлина("Заявки")), 
			ТабличноеПолеЗаявки.ТекущийЭлемент.Имя); //ТекущейКолонка.Имя;
	
	Если  ЭтоПолеДополнительногоОтбора(ИмяКолонки) Тогда
	
	//ИначеЕсли УстановитьОтбор Тогда
		Если УстановитьОтбор Тогда
		ИмяКолонки = ?(Найти(ИмяКолонки, "Заявка") = 1, 
					Прав(ИмяКолонки, СтрДлина(ИмяКолонки) - СтрДлина("Заявка")), 
					ИмяКолонки);
		//мДополнительныеОтборы = Новый ФиксированнаяСтруктура("Контрагент, ДоговорКонтрагента, СтатьяОборотов, ВидСтатьиОборота");
		
		//Если ИмяКолонки = "ВидСтатьиОборота" Тогда
		//	СтатьяОборотов 						= ТекущаяСтрока.СтатьяОборотов;	//ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Заявка, 	"СтатьяОборотов"); 
		//	мДополнительныеОтборы[ИмяКолонки] 	= ТекущаяСтрока.ВидСтатьи;		//ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяОборотов, 		"ВидСтатьи");
		//	
		//Иначе
		//	
		//	мДополнительныеОтборы[ИмяКолонки] = Элементы.Заявки.ТекущийЭлемент.	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Заявка, ИмяКолонки);
		//	
		//КонецЕсли; 
		
		//УстановитьОтборПоСвязаннымДанным(мДополнительныеОтборы);
		
		//Возврат;
		КонецЕсли;
	//Иначе
	//	ИмяКолонки = "Заявка";	
	ИначеЕсли  ИмяКолонки = "Статус"  Тогда
	    ИмяКолонки = "СтатусЗаявки";
	КонецЕсли;
	
	Если УстановитьОтбор Тогда
		Элементы.Заявки.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяКолонки,ТекущаяСтрока[ИмяКолонки]);
		Элементы.СБ_ОтключитьОтбор.Доступность = Истина;
		//Контекстное меню
		Элементы.СБ_КонтекстноеМенюЗаявкиОтключитьОтбор.Доступность = Истина;
	Иначе
		Элементы.Заявки.ОтборСтрок = Неопределено;
		Элементы.СБ_ОтключитьОтбор.Доступность = Ложь;
		//Контекстное меню
		Элементы.СБ_КонтекстноеМенюЗаявкиОтключитьОтбор.Доступность = Ложь;
	КонецЕсли;
	
	//ЭлементОтбора.Использование	= УстановитьОтбор;
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-10-09. ТЗ "Казначейство" 2.2.3.1.
&НаКлиенте
Процедура СБ_ОтключитьОтбор(Команда)
	
	//Для каждого ЭлементОтбора Из Элементы.Заявки.ОтборСтрок Цикл
	//
	//	ЭлементОтбора.Использование = Ложь;	
	//
	//КонецЦикла; 	
	Элементы.Заявки.ОтборСтрок = Неопределено;
	Элементы.СБ_ОтборПоЗначениюВТекущейКононке.Пометка = Ложь;
	Элементы.СБ_ОтключитьОтбор.Доступность = Ложь;
	
	//Контекстное меню
	Элементы.СБ_КонтекстноеМенюЗаявкиОтборПоЗначениюВТекущейКононке.Пометка = Ложь;
	Элементы.СБ_КонтекстноеМенюЗаявкиОтключитьОтбор.Доступность = Ложь;
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-10-09. ТЗ "Казначейство" 2.2.3.1. 
//&НаСервере
//Процедура УстановитьОтборПоСвязаннымДанным(мДополнительныеОтборы)

//	СписокЗаявок = Новый СписокЗначений;
//	
//	Для каждого СтрТЧ Из Объект.Заявки Цикл
//		СписокЗаявок.Добавить(СтрТЧ.Заявка);	
//	КонецЦикла; 
//	
//	СхемаИсточникаДанных = Документы.бит_РеестрПлатежей.ПолучитьМакет("СБ_ДополнительныйОтбор");
//	
//	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
//	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИсточникаДанных));
//	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИсточникаДанных.НастройкиПоУмолчанию);
//	
//	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Заявка", СписокЗаявок, ВидСравненияКомпоновкиДанных.ВСписке);
//	
//	Для каждого ЭлементДопОтбора Из мДополнительныеОтборы Цикл
//		Если ЗначениеЗаполнено(ЭлементДопОтбора.Значение) Тогда
//			
//			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, ЭлементДопОтбора.Ключ, ЭлементДопОтбора.Значение);
//		
//		КонецЕсли;                                          	
//	КонецЦикла; 
//	
//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
//	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаИсточникаДанных, 
//												  КомпоновщикНастроек.Настройки,
//												  ,
//												  , 
//												  Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), 
//												  Ложь);

//	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
//	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
//	
//	ТаблицаЗаявок = Новый ТаблицаЗначений;
//	
//	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
//	ПроцессорВывода.УстановитьОбъект(ТаблицаЗаявок);
//	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
//	
//	СписокЗаявок.ЗагрузитьЗначения(ТаблицаЗаявок.ВыгрузитьКолонку("Заявка"));
//	
//	//Наложим отбор по полученному списку заявок
//	
//	КоллекцияОтборов = Элементы.Заявки.ОтборСтрок;
//	
//	//ОтборПоЗаявкам = КоллекцияОтборов.Найти("Заявка");
//	//ИжТиСи
//	//Если ОтборПоЗаявкам = Неопределено Тогда
//		КоллекцияОтборов = Новый ФиксированнаяСтруктура("Заявка",СписокЗаявок);
//		//ОтборПоЗаявкам = КоллекцияОтборов.Добавить("Заявка");
//	//КонецЕсли; 
//	
//	//ОтборПоЗаявкам.ВидСравнения		= ВидСравнения.ВСписке;
//	//ОтборПоЗаявкам.Значение			= СписокЗаявок;
//	//ОтборПоЗаявкам.Использование 	= Истина;

//КонецПроцедуры // -СБ. Широков Николай 

// +СБ. Широков Николай. 2015-01-29. 
&НаКлиенте
Процедура СБ_ПрочитататьБанковскиеСчета(Команда)

	Если Объект.Заявки.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 	
	
	СБ_ПрочитататьБанковскиеСчетаНаСервере();
	// Обновим табло счетов
	ОбновитьТаблоСчетов(Истина);
	
КонецПроцедуры // СБ_ПрочиататьБанковскиеСчета()
	
&НаСервере
Процедура СБ_ПрочитататьБанковскиеСчетаНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ_Док.НомерСтроки,
	|	ТЧ_Док.Оплачено,
	|	ТЧ_Док.ФормаОплаты,
	|	ТЧ_Док.Организация,
	|	ТЧ_Док.БанковскийСчетОрганизация,
	|	ТЧ_Док.Заявка,
	|	ТЧ_Док.ПлатежнаяПозиция КАК ПлатежнаяПозиция,
	|	ТЧ_Док.ВалютаДокумента,
	|	ТЧ_Док.Сумма,
	|	ТЧ_Док.СуммаОстаток,
	|	ТЧ_Док.Валюта,
	|	ТЧ_Док.СуммаКОплатеНач,
	|	ТЧ_Док.СуммаКОплате
	|ПОМЕСТИТЬ ВТ_ДокТЧ
	|ИЗ
	|	&ТЧ_Заявки КАК ТЧ_Док
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлатежнаяПозиция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокТЧ.НомерСтроки,
	|	ВТ_ДокТЧ.Оплачено,
	|	ВТ_ДокТЧ.ФормаОплаты,
	|	ВТ_ДокТЧ.Организация,
	|	бит_ПлатежнаяПозиция.БанковскийСчетОрганизация,
	|	ВТ_ДокТЧ.Заявка,
	|	ВТ_ДокТЧ.ПлатежнаяПозиция,
	|	ВТ_ДокТЧ.ВалютаДокумента,
	|	ВТ_ДокТЧ.Сумма,
	|	ВТ_ДокТЧ.СуммаОстаток,
	|	ВТ_ДокТЧ.Валюта,
	|	ВТ_ДокТЧ.СуммаКОплатеНач,
	|	ВТ_ДокТЧ.СуммаКОплате
	|ИЗ
	|	ВТ_ДокТЧ КАК ВТ_ДокТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	|		ПО ВТ_ДокТЧ.ПлатежнаяПозиция = бит_ПлатежнаяПозиция.Ссылка";
	Запрос.УстановитьПараметр("ТЧ_Заявки", Объект.Заявки.Выгрузить());
	Объект.Заявки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ОбновитьТаблоСчетовСервер();
	ОбновитьТаблоПлатежейСервер();
	РасчитатьСуммыРасходаНаСервере();
	
КонецПроцедуры // -СБ. Широков Николай 

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПолеДополнительногоОтбора(ИмяПоля)

	МассивПолей = Новый Массив;
	МассивПолей.Добавить("ЗаявкаКонтрагент");			//	"Контрагент");
	МассивПолей.Добавить("ЗаявкаДоговорКонтрагента");	//	"ДоговорКонтрагента");
	МассивПолей.Добавить("ЗаявкаСтатьяОборотов");		//	"СтатьяОборотов");
	МассивПолей.Добавить("ЗаявкаВидСтатьиОборота");		//	"ВидСтатьиОборота");
	
	Если МассивПолей.Найти(ИмяПоля) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;	
	КонецЕсли; 

КонецФункции // -СБ. Широков Николай
 
// +СБ. Широков Николай. 2014-10-09. 1034	
Функция ПоТекущейКолонкеВозможенОтбор()

	ЭлементыФормы = ЭтаФорма.Элементы;
	
	ТекущаяКолонка = ЭлементыФормы.Заявки.ТекущаяКолонка;
	Если ТекущаяКолонка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ИмяКолонки = ТекущаяКолонка.Имя;
	
	Если ЭтоПолеДополнительногоОтбора(ИмяКолонки) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ЭлементОтбора = ЭлементыФормы.Заявки.ОтборСтрок;
	
	Если ЭлементОтбора <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции // -СБ. Широков Николай 

// +СБ. Широков Николай. 2014-10-09. 1034	
//&НаКлиенте
//Процедура ОбновитьСостояниеКнопокОтбораПоЗначениеюВКолонке()

//	ЭлементыФормы = ЭтаФорма.Элементы;

//	ОтборВозможен 	= ПоТекущейКолонкеВозможенОтбор();
//	ОтборНаложен	= ПоТекущейКолонкеНаложенОтбор();
//	
//	Кнопка = ЭлементыФормы.КоманднаяПанельЗаявки.Кнопки.ОтборПоЗначениюВТекущейКононке;	
//	
//	Кнопка.Доступность 	= ОтборВозможен;
//	Кнопка.Пометка 		= ОтборНаложен;
//	
//	Кнопка = ЭлементыФормы.СБ_КонтекстноеМенюЗаявки.Кнопки.ОтборПоЗначениюВТекущейКононке;	
//	
//	Кнопка.Доступность 	= ОтборВозможен;
//	Кнопка.Пометка 		= ОтборНаложен;

//КонецПроцедуры // -СБ. Широков Николай
 

// +СБ. Широков Николай. 2014-10-09. 1034
&НаКлиенте
Функция ПоТекущейКолонкеНаложенОтбор()

	ЭлементыФормы = ЭтаФорма.Элементы;
	ТекущаяКолонка = ЭлементыФормы.Заявки.ТекущаяКолонка;
	Если ТекущаяКолонка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ИмяКолонки = ТекущаяКолонка.Имя;
	
	Если ЭтоПолеДополнительногоОтбора(ИмяКолонки) Тогда
		
		Если мДополнительныеОтборы <> Неопределено
			И ЗначениеЗаполнено(мДополнительныеОтборы[ИмяКолонки]) Тогда
			ИмяКолонки = "Заявка";
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли; 
	
	ЭлементОтбора = ЭлементыФормы.Заявки.ОтборСтрок[ИмяКолонки];
	
	Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции // -СБ. Широков Николай 

// +СБ. Широков Николай. 2014-09-12. ТЗ "Казначейство" 2.2.3.1.
&НаКлиенте
Процедура СБ_ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.СБ_ВидДокумента = ПредопределенноеЗначение("Перечисление.СБ_ВидыРеестраПлатежа.Основной") 
		И СБ_КазначействоСервер.НаДатуУжеВведенОсновнойРеестрПлатежей(Объект.Дата, Объект.Организация, Объект.Ссылка) Тогда
				//Сообщить("На указанную дату уже введен документ ""Реестр платежей"" с признаком ""Основной""");
		ПоказатьПредупреждение(,"На указанную дату уже введен документ ""Реестр платежей"" с признаком ""Основной""");
		Отказ = Истина;	
	КонецЕсли;
	
КонецПроцедуры

// +СБ. Широков Николай. 2014-10-09. 1034
&НаКлиенте
Процедура СБ_ЗаявкиПриАктивизацииКолонки(Элемент)
	
	Если Элементы.Заявки.ОтборСтрок = Неопределено Тогда
	    Возврат;
	КонецЕсли; 
	ИмяКолонки = ?(Найти(Элемент.ТекущийЭлемент.Имя, "Заявки") = 1, 
			Прав(Элемент.ТекущийЭлемент.Имя,СтрДлина(Элемент.ТекущийЭлемент.Имя) - СтрДлина("Заявки")), 
			Элемент.ТекущийЭлемент.Имя); //ТекущейКолонка.Имя;
	
	Если  ЭтоПолеДополнительногоОтбора(ИмяКолонки) Тогда
		Если УстановитьОтбор Тогда
		ИмяКолонки = ?(Найти(ИмяКолонки, "Заявка") = 1, 
					Прав(ИмяКолонки, СтрДлина(ИмяКолонки) - СтрДлина("Заявка")), 
					ИмяКолонки);
		КонецЕсли;
	ИначеЕсли  ИмяКолонки = "Статус"  Тогда
	    ИмяКолонки = "СтатусЗаявки";
	КонецЕсли;
	ФлагКолонки = Элементы.Заявки.ОтборСтрок.Свойство(ИмяКолонки);
	Элементы.СБ_ОтборПоЗначениюВТекущейКононке.Пометка	= ФлагКолонки;
	//Контекстное меню
	Элементы.СБ_КонтекстноеМенюЗаявкиОтборПоЗначениюВТекущейКононке.Пометка = ФлагКолонки;
	//ОбновитьСостояниеКнопокОтбораПоЗначениеюВКолонке();
	
КонецПроцедуры // -СБ. Широков Николай 

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3062)
Процедура ДобавитьКнопкуОтчетаПланФактДДС()
	
	НоваяКоманда = Команды.Добавить("ок_ОткрытьОтчетПланФактДДС");	
	НоваяКоманда.Действие = "ОткрытьОтчетПланФактДДС";
		
	НовыйЭлемент = Элементы.Добавить("ок_ОткрытьОтчетПланФактДДС", Тип("КнопкаФормы"), Элементы.ФормаКоманднаяПанель);	
	НовыйЭлемент.ИмяКоманды = "ок_ОткрытьОтчетПланФактДДС";
	НовыйЭлемент.Заголовок  = "Плановые и фактические ДДС";
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПланФактДДС(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ОписаниеОповещенияОтветНаЗапись = Новый ОписаниеОповещения("ОтветНаВопросОЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОтветНаЗапись, НСтр("ru = 'Действие возможно только с записанным документом. Записать?'"), РежимДиалогаВопрос.ДаНет); 
		Возврат;
	КонецЕсли;
	ОткрытьОтчетПланФактДДСНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПланФактДДСНаКлиенте()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РеестрПлатежей" , Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Период"		    , Объект.Дата);
	ПараметрыОткрытия.Вставить("Организация"    , Объект.Организация);
	//Глубина детализации: Валюта(0), Банки(1), Банковские счета(2)
	ПараметрыОткрытия.Вставить("Группировка1"   , 1);
	
	ОткрытьФорму("Отчет.СБ_ПланИФактДДС.Форма", ПараметрыОткрытия, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОЗаписи(Результат, ДопПараметры) Экспорт 
	
	Если Результат<>КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	Исключение
		пТекстОшибки = НСтр("ru = 'Не удалось записать документ по причине: %1'");
		пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ОткрытьОтчетПланФактДДСНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаявкиПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3062)


//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-28 (#НТП_БП12_ФР01)
&Насервере
Процедура ок_ПроверитьНаличиеКурсовНаДату(ДатаКурсов = Неопределено)
	
	// Значения по умолчанию
	ДатаПроверки 	= ?(ЗначениеЗаполнено(ДатаКурсов), ДатаКурсов, ДатаОплаты);
	ВалютаРегУчета	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	              	|	ТЗ.ВалютаДокумента КАК ВалютаДокумента,
	              	|	ТЗ.Заявка КАК Заявка
	              	|ПОМЕСТИТЬ ВТ_ТЗ
	              	|ИЗ
	              	|	&ТЗ КАК ТЗ
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
					|	ВТ_ТЗ.Заявка.Контрагент КАК Контрагент,
					|	ВТ_ТЗ.Заявка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	              	|	ВТ_ТЗ.ВалютаДокумента КАК ВалютаДокумента,
	              	|	ВТ_ТЗ.Заявка КАК Заявка,
					|   КурсыВалютСрезПоследних.Период КАК Период,
	              	|	КурсыВалютСрезПоследних.Курс КАК Курс
	              	|ИЗ
	              	|	ВТ_ТЗ КАК ВТ_ТЗ
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПроверки, ) КАК КурсыВалютСрезПоследних
	              	|		ПО ВТ_ТЗ.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта
	              	//|			И (НАЧАЛОПЕРИОДА(&ДатаПроверки, ДЕНЬ) = НАЧАЛОПЕРИОДА(КурсыВалютСрезПоследних.Период, ДЕНЬ))
	              	|ГДЕ
					|	НЕ ВТ_ТЗ.ВалютаДокумента = &ВалютаРегУчета
	              	//|	И КурсыВалютСрезПоследних.Курс ЕСТЬ NULL
					|	И НЕ НАЧАЛОПЕРИОДА(&ДатаПроверки, ДЕНЬ) = НАЧАЛОПЕРИОДА(КурсыВалютСрезПоследних.Период, ДЕНЬ)";
	Запрос.УстановитьПараметр("ТЗ", 			Объект.Заявки.Выгрузить(, "Заявка, ВалютаДокумента"));
	Запрос.УстановитьПараметр("ВалютаРегУчета", ВалютаРегУчета);
	Запрос.УстановитьПараметр("ДатаПроверки", 	ДатаПроверки);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ТекстШаблона = НСтр("ru= '%1, %2, %3, %4 – отсутствует курс на дату расхода %5. Курс будет взять на дату %6'");
		
	Пока Результат.Следующий() Цикл
		ТекстСообщения = СтрШаблон(
			ТекстШаблона,
				Результат.Контрагент, //1
				Результат.ДоговорКонтрагента, //2
				Результат.ВалютаДокумента, //3
				Результат.Заявка, //4
				Формат(ДатаПроверки, "ДЛФ=ДД"), //5
				Формат(Результат.Период, "ДЛФ=ДД")); //6 	
				
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();	
	КонецЦикла;
	
КонецПроцедуры
//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-28 (#НТП_БП12_ФР01)

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-02 (#4209)
&НаСервереБезКонтекста
Функция БанковскийСчетУказанКорректно(ЗаявкаСсылка)
	
	ПолучаемыеРеквизиты = Новый Структура;
	ПолучаемыеРеквизиты.Вставить("ок_СпособСоздания");
	ПолучаемыеРеквизиты.Вставить("Контрагент");
	ПолучаемыеРеквизиты.Вставить("ДоговорКонтрагента");
	ПолучаемыеРеквизиты.Вставить("СБ_БанковскийСчетКонтрагента");
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаСсылка, ПолучаемыеРеквизиты, Истина);
	
	Если РеквизитыЗаявки.ок_СпособСоздания = 4 Или РеквизитыЗаявки.ок_СпособСоздания = 5 Тогда
		
		ОсновнойБанковскийСчет = Справочники.ДоговорыКонтрагентов.ПолучитьБанковскийСчетКонтрагента(РеквизитыЗаявки.ДоговорКонтрагента, РеквизитыЗаявки.Контрагент, Истина);
		
		Если Не ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда // не с чем сравнить, считаем что пользователь заполнил корректно
			Возврат Истина
		КонецЕсли;
		
		Если ОсновнойБанковскийСчет = РеквизитыЗаявки.СБ_БанковскийСчетКонтрагента Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитовОбъекта(Ссылка, СтруктураРеквизитов)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СтруктураРеквизитов);
	
КонецФункции
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-02 (#4209)
