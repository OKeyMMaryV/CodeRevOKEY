
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();	
	КонецЕсли; 
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);

	УстановитьВалютыВФорме(ЭтотОбъект);
	УправлениеЭлементамиФормы(ЭтотОбъект);

	ОбновитьДокументыПланирования();
	УстановитьВидимость();
	
	//СофтЛаб Начало 2019-09-22 #3493
	ок_УправлениеФормами.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	//СофтЛаб Конец 2019-09-22 #3493
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьДокументыПланирования();
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	УстановитьВидимость();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УстановитьНастройкиДоступностиЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьПараметрыСтатуса();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СуммаПервойЧастиСделкиВПервойВалютеПриИзменении(Элемент)
	
	Если Объект.ВидСделки = ПредопределенноеЗначение("Перечисление.бит_ВидСделки.ПродажаПокупка") Тогда
		Объект.СуммаВторойЧастиСделкиВПервойВалюте = Объект.СуммаПервойЧастиСделкиВПервойВалюте;
		ПересчитатьСуммы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПервойЧастиСделкиВоВторойВалютеПриИзменении(Элемент)
	
	Если Объект.ВидСделки = ПредопределенноеЗначение("Перечисление.бит_ВидСделки.ПокупкаПродажа") Тогда
		Объект.СуммаВторойЧастиСделкиВоВторойВалюте = Объект.СуммаПервойЧастиСделкиВоВторойВалюте;
		ПересчитатьСуммы(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СуммаВторойЧастиСделкиВоВторойВалютеПриИзменении(Элемент)
	
	Если Объект.ВидСделки = ПредопределенноеЗначение("Перечисление.бит_ВидСделки.ПокупкаПродажа") Тогда
		Объект.СуммаПервойЧастиСделкиВоВторойВалюте = Объект.СуммаВторойЧастиСделкиВоВторойВалюте;
		ПересчитатьСуммы(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СуммаВторойЧастиСделкиВПервойВалютеПриИзменении(Элемент)
	
	Если Объект.ВидСделки = ПредопределенноеЗначение("Перечисление.бит_ВидСделки.ПродажаПокупка") Тогда
		Объект.СуммаПервойЧастиСделкиВПервойВалюте = Объект.СуммаВторойЧастиСделкиВПервойВалюте;
		ПересчитатьСуммы(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидСделкиПриИзменении(Элемент)
	
	УстановитьВалютыВФорме(ЭтотОбъект);
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерваяВалютаПриИзменении(Элемент)
	
	УстановитьВалютыВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВтораяВалютаПриИзменении(Элемент)
	
	УстановитьВалютыВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СнятьФлажкиДокументы(Команда)
	
	ИзменитьФлажкиДерево(ДокументыПланирования.ПолучитьЭлементы(), 0);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиДокументы(Команда)
	
	ИзменитьФлажкиДерево(ДокументыПланирования.ПолучитьЭлементы(), 1);

КонецПроцедуры

// Устанавливает значение флажка в нужное состояние в дереве. Вызывается рекурсивно.
//
// Параметры:
//	ЭлементыДерева - ДанныеФормыДерево
//	ЗначениеФлажка - булево.
//
&НаКлиенте
Процедура ИзменитьФлажкиДерево(ЭлементыДерева, ЗначениеФлажка)
	
	Для Каждого ТекущаяВетка Из ЭлементыДерева Цикл
		
		ТекущаяВетка.Выполнять = ЗначениеФлажка;
		
		ИзменитьФлажкиДерево(ТекущаяВетка.ПолучитьЭлементы(), ЗначениеФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПланированияВыполнятьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыПланирования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// затемненный флажок устанавливается только программно
	Если ТекущиеДанные.Выполнять = 2 Тогда
		ТекущиеДанные.Выполнять = 0;
	КонецЕсли;
	
	ИзменитьФлажкиДерево(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Выполнять);
	
	ИзменитьФлажкиРодителей(ТекущиеДанные.ПолучитьРодителя(), ТекущиеДанные.Выполнять);

КонецПроцедуры

// Процедура настраивает флаги для родительских строк. Вызывается рекурсивно.
//
// Параметры:
//	
&НаКлиенте
Процедура ИзменитьФлажкиРодителей(ВеткаРодитель, ЗначениеФлажка)
	
	Если ВеткаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = ВеткаРодитель.ПолучитьЭлементы();
	
	СостояниеРодителя = ЗначениеФлажка;
	
	Для Каждого ТекущаяВетка Из ЭлементыРодителя Цикл
		Если НЕ ТекущаяВетка.Выполнять = ЗначениеФлажка Тогда
			СостояниеРодителя = 2;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВеткаРодитель.Выполнять = СостояниеРодителя;
	
	ИзменитьФлажкиРодителей(ВеткаРодитель.ПолучитьРодителя(), ЗначениеФлажка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидСделки = ПредопределенноеЗначение("Перечисление.бит_ВидСделки.ПокупкаПродажа") Тогда
		Элементы.ГруппаСуммаПервогоЧастиСделкиКПолучению.ЦветФона = Новый Цвет();
		Элементы.ГруппаСуммаВторойЧастиСделкиКОплате.ЦветФона     = Новый Цвет();
		
		Элементы.ГруппаСуммаПервойЧастиСделкиКОплате.ЦветФона    = Новый Цвет(197, 255, 185);
		Элементы.ГруппаСуммаВторойЧастиСделкиКПолучению.ЦветФона = Новый Цвет(197, 255, 185);
		
	ИначеЕсли Объект.ВидСделки = ПредопределенноеЗначение("Перечисление.бит_ВидСделки.ПродажаПокупка") Тогда
		Элементы.ГруппаСуммаПервогоЧастиСделкиКПолучению.ЦветФона = Новый Цвет(197, 255, 185);
		Элементы.ГруппаСуммаВторойЧастиСделкиКОплате.ЦветФона     = Новый Цвет(197, 255, 185);
		
		Элементы.ГруппаСуммаПервойЧастиСделкиКОплате.ЦветФона    = Новый Цвет();
		Элементы.ГруппаСуммаВторойЧастиСделкиКПолучению.ЦветФона = Новый Цвет();
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы. 
// 
&НаСервере
Процедура УстановитьВидимость()

	УстановитьДоступностьЭлементов();	
	// Вызов механизма доступности элементов управления.
	УстановитьНастройкиДоступностиЭлементов();		

КонецПроцедуры

// Процедура устанавливает доступность элементам формы.
// 
// Параметры:
//  Доступность - Булево.
// 
&НаСервере
Процедура УстановитьДоступностьЭлементов()

	ЭлементыТолькоПросмотр = ?(Статус = Справочники.бит_СтатусыОбъектов.ВалютныйСвоп_Черновик
			ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Ложь, Истина);

	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда  
			Элемент.ТолькоПросмотр = ЭлементыТолькоПросмотр;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВалютыВФорме(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидСделки = ПредопределенноеЗначение("Перечисление.бит_ВидСделки.ПокупкаПродажа") Тогда
		Форма.ВалютаПокупки =  Объект.ВтораяВалюта;
		Форма.ВалютаПродажи =  Объект.ПерваяВалюта;
	Иначе
		Форма.ВалютаПокупки =  Объект.ПерваяВалюта;
		Форма.ВалютаПродажи =  Объект.ВтораяВалюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммы(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.КратностьПервойЧастиСделки = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно пересчитать сумму первой части сделки, так как кратность валюты равна нулю'."));
		Возврат;
	ИначеЕсли Объект.КратностьВторойЧастиСДелки = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТр("ru = 'Невозможно пересчитать сумму второй части сделки, так как кратность валюты равна нулю.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидСделки = ПредопределенноеЗначение("Перечисление.бит_ВидСделки.ПокупкаПродажа") Тогда
		Объект.СуммаПервойЧастиСделкиВПервойВалюте =  бит_КурсыВалютКлиентСервер.ПересчитатьСуммуПоКурсу(Объект.СуммаПервойЧастиСделкиВоВторойВалюте, Объект.КурсПервойЧастиСделки, Объект.КратностьПервойЧастиСделки);
		Объект.СуммаВторойЧастиСделкиВПервойВалюте =  бит_КурсыВалютКлиентСервер.ПересчитатьСуммуПоКурсу(Объект.СуммаВторойЧастиСделкиВоВторойВалюте, Объект.КурсВторойЧастиСделки, Объект.КратностьВторойЧастиСДелки);
	Иначе
		Объект.СуммаПервойЧастиСделкиВоВторойВалюте =  бит_КурсыВалютКлиентСервер.ПересчитатьСуммуПоКурсу(Объект.СуммаПервойЧастиСделкиВПервойВалюте, Объект.КурсПервойЧастиСделки, Объект.КратностьПервойЧастиСделки);
		Объект.СуммаВторойЧастиСделкиВоВторойВалюте =  бит_КурсыВалютКлиентСервер.ПересчитатьСуммуПоКурсу(Объект.СуммаВторойЧастиСделкиВПервойВалюте, Объект.КурсВторойЧастиСделки, Объект.КратностьВторойЧастиСДелки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсПервойЧастиСделкиПриИзменении(Элемент)
	
	ПересчитатьСуммы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КратностьПервойЧастиСделкиПриИзменении(Элемент)
	
	ПересчитатьСуммы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КурсВторойЧастиСделкиПриИзменении(Элемент)
	
	ПересчитатьСуммы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КратностьВторойЧастиСДелкиПриИзменении(Элемент)
	
	ПересчитатьСуммы(ЭтотОбъект);
	
КонецПроцедуры

// Процедура применяет настройки доступности и видимости для элементов формы
//
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус,);
	
КонецПроцедуры

#Область ПроцедурыИФункцииСозданиеУдалениеДокументовПланирования

// Функция определяет, есть ли созданные документы планирования по сделке. 
//
// Параметры:
//
&НаСервере
Функция ЕстьДокументыПланНаСервере()

	Возврат Документы.бит_ВалютныйСвоп.ПолучитьДеревоДокументовПланирования(Объект.Ссылка).ЕстьДокументыПлан;
	
КонецФункции // ЕстьДокументыПланНаСервере()

// Процедура обновляет табличное поле "ДокументыПланирования".
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ОбновитьДокументыПланирования()
	
	//ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДеревоДокументов = Документы.бит_ВалютныйСвоп.ПолучитьДеревоДокументовПланирования(Объект.Ссылка).ДеревоДокументов;
	
	ДеревоДокументовПланирования = ДанныеФормыВЗначение(ДокументыПланирования, Тип("ДеревоЗначений"));
	
	ДеревоДокументовПланирования.Строки.Очистить();
	 
	ДеревоДокументовПланирования = ДеревоДокументов.Скопировать();
	
	ЗначениеВДанныеФормы(ДеревоДокументовПланирования, ДокументыПланирования);
	
КонецПроцедуры // ОбновитьТаблоСчетов()

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	СоздатьДокументыПланированияКлиент();

КонецПроцедуры

// Выполняет необходимые проверки и инициирует создание документов планирования для графика.
//
// Параметры:
//	ИмяГрафика - строка
//	ВидДокумента - Строка
&НаКлиенте
Процедура СоздатьДокументыПланированияКлиент()
	
	Статус_Утвержден = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ВалютныйСвоп_Утвержден");
	
	Если НЕ Статус = Статус_Утвержден Тогда
		ТекстСообщения = НСтр("ru='Создание документа планирования разрешено в утвержденном документе (статус ""%1%"")'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Статус_Утвержден);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ЕстьДокументыПланНаСервере() Тогда
		ТекстСообщения = НСтр("ru='По текущей сделке уже созданы документы планирования.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Документ изменен. 
		|Для создания документа планирования его необходимо записать.
		|Записать?'");
				
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗаписатьДокумент",ЭтотОбъект),ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
	Иначе	
			
		// Создадим документы планирования.
		СоздатьДокументыПланированияСервер();
			    
		// Обновим документы планирования.
		ОбновитьДокументыПланирования();
	    
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Результат - Строка.
//  ДополнительныеПараметры - Структура.
//
Процедура ВопросЗаписатьДокумент(Результат, ДопПараметры) Экспорт

	ЗаписьВыполнена = Ложь;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписьВыполнена = ЗаписатьПровестиДокумент();
	КонецЕсли;

	Если НЕ ЗаписьВыполнена Тогда
		Возврат;
	КонецЕсли;

	// флаг модифицированности автоматически не снимается
	Модифицированность = НЕ ЗаписьВыполнена;
		
	// Создадим документы планирования.
	СоздатьДокументыПланированияСервер();
	    
	// Обновим документы планирования.
	ОбновитьДокументыПланирования();
    
КонецПроцедуры // ВопросЗаписатьДокумент() 

&НаСервере
Процедура СоздатьДокументыПланированияСервер()
	
	Документы.бит_ВалютныйСвоп.СоздатьДокументыПланирования(Объект.Ссылка);
	
КонецПроцедуры

// Функция выполняет запись документа
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	ДействиеВыполнено - булево 
//
&НаСервере
Функция ЗаписатьПровестиДокумент()
	
	Если Объект.Проведен Тогда
		РежимЗаписиДок = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписиДок = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// Запишем документ.
	ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокументОбъект, РежимЗаписиДок,, "Ошибки");
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат ДействиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура УдалитьДокументыПланирования(Команда)
	
	Если ДокументыПланирования.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Документ изменен. 
		|Для установки пометки на удаление документов планирования его необходимо записать.
		|Записать?'");
		
		ОповещениеУстановкаПометокНаУдаление = Новый ОписаниеОповещения("ВопросУстановкаПометокНаУдаление", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеУстановкаПометокНаУдаление, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
	Иначе
		
		ТекстВопроса = НСтр("ru='Будут удалены документы планирования. Продолжить?'");
				  
		ОповещениеВопросОчисткаСсылок = Новый ОписаниеОповещения("ВопросУдалениеДокументов", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопросОчисткаСсылок, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
				
	КонецЕсли;

КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросУстановкаПометокНаУдаление(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписьВыполнена = ЗаписатьПровестиДокумент();
	КонецЕсли;
	
	Если НЕ ЗаписьВыполнена Тогда
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru='Будут удалены документы планирования. Продолжить?'");
				  
	ОповещениеВопросОчисткаСсылок = Новый ОписаниеОповещения("ВопросУдалениеДокументов", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеВопросОчисткаСсылок, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);

КонецПроцедуры // ВопросУстановкаПометокНаУдаление()

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ - Строка.
//
&НаКлиенте
Процедура ВопросУдалениеДокументов(Ответ, Доппараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
        УдалитьДокументыПланированияНаСервере();;
	КонецЕсли;
	
КонецПроцедуры // ВопросОчисткаСсылок()

&НаСервере
Процедура УдалитьДокументыПланированияНаСервере()
	
	ДеревоДокументовПланирования = ДанныеФормыВЗначение(ДокументыПланирования, Тип("ДеревоЗначений"));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выполнять", 1);
	
	МассивДокументов = ДеревоДокументовПланирования.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
    Если МассивДокументов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не указаны документы для удаления!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
    КонецЕсли;
	
	Для Каждого ДокументКУдалению Из МассивДокументов Цикл
		
		Если ТипЗнч(ДокументКУдалению.ДокументПланирования) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
				
		// Пометим на удаление текущий документ планирования.
		ДействиеВыполнено =  бит_ОбщегоНазначения.ИзменитьПометкуНаУдалениеУОбъекта(ДокументКУдалению.ДокументПланирования, Истина,,,);
		
		Если Не ДействиеВыполнено Тогда
			// сообщить пользователю
		КонецЕсли;
		
	КонецЦикла;

	ОбновитьДокументыПланирования();
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти
