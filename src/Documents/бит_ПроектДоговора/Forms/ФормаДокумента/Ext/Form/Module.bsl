
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПроектДоговора"));
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ); 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	ТекущаяСсылка = Объект.Ссылка;
	
	ЭтоНовый 		 = Параметры.Ключ.Пустая();
	ЭтоДопСоглашение = ЗначениеЗаполнено(Объект.ОсновнойДоговор);// Или Параметры.Основание <> Неопределено;
		
	// Параметры финансового договора.
	Если ЭтоНовый И ЭтоДопСоглашение Тогда
	    ЗаполнитьПараметрыФинансовогоДоговора(Объект.ОсновнойДоговор);// Параметры.Основание.Ссылка);
	Иначе
		ЗаполнитьПараметрыФинансовогоДоговора(ТекущаяСсылка);	
	КонецЕсли;  	
	
	ЗначениеПараметраПроектДоговора = ?(ЗначениеЗаполнено(ТекущаяСсылка), ТекущаяСсылка, Неопределено);
	
	ГрафикВыдачиТраншей.Параметры.УстановитьЗначениеПараметра("ПроектДоговора", ЗначениеПараметраПроектДоговора);
	бит_ОбщегоНазначенияКлиентСервер.УстановитьОтборУСписка(НоминальныеСтавки.Отбор, Новый ПолеКомпоновкиДанных("ДоговорКонтрагента"), ТекущаяСсылка);
	
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма, "ГрафикПлатежей");
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма, "ГрафикНачислений");
	
	// Установим параметры для списка документов исков и претензий.
	УстановитьПараметрыДляСпискаТребованийИсков();
	
	// Заполним список имен элементов управления, которые необходимо блокировать при изменении статусов.
	ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке();
	
	ТекущаяСсылкаОсновная = ?(ТекущаяСсылка.Пустая(), Неопределено, ТекущаяСсылка);
	СписокДопСоглашений.Параметры.УстановитьЗначениеПараметра("ОсновнойДоговор", ТекущаяСсылкаОсновная);
	ВыборкаДопСоглашений = Документы.бит_ПроектДоговора.Выбрать(, , Новый Структура("ОсновнойДоговор", ТекущаяСсылкаОсновная));
	Элементы.СписокДопСоглашений.Видимость = ВыборкаДопСоглашений.Следующий();
	
	// Номер договора.
	ПроверитьШаблоныЗаполненияРеквизитов("НомерДоговора");
	
	Если ЭтоНовый Тогда 
		Если Не ЭтоДопСоглашение Тогда
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				Объект.СпособРасчетаФинПлатежей = Неопределено;   			
				ИзменениеВалюты();
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Управление видимостью вызываем для записанного документа.
		ЗаполнитьТекстПроДоговорКонтрагента();   		
		УправлениеЭлементамиФормы();	
	КонецЕсли;
	
	Элементы.СтатьиОборотовРасходДоход.СписокВыбора.Очистить();
	
	Для каждого Эл Из фКэшЗначений.СписокНаправлений Цикл
		Элементы.СтатьиОборотовРасходДоход.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	КонецЦикла; 
	
	УстановитьОтборДляСпискаСобытий();
	
	УстановитьПараметрыВыбораКуратора(ЭтотОбъект);
	
	СтадияДоговораИсходная = Объект.СтадияДоговора;
	
	ОплатаВРублях = Объект.РасчетыВУсловныхЕдиницах;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЭтоНовый = Параметры.Ключ.Пустая(); 	
	Если ЭтоНовый Тогда		
		// Установить видимость реквизитов и заголовков колонок.	
		УправлениеЭлементамиФормы();
	КонецЕсли;

	// Рассчитаем сумму без НДС для отображения на форме.
	РассчитатьСуммуБезНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("Статус") Тогда
			Статус               = ВыбранноеЗначение.Статус;
			ДатаИзмененияСтатуса = ВыбранноеЗначение.ДатаИзмененияСтатуса;
			
			СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "СозданиеСобытия" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("Событие", Параметр.Событие);
			
			МассивСтрок = Объект.бит_УсловияОплатыНачислений.НайтиСтроки(СтруктураОтбор);
			
			Если МассивСтрок.Количество() = 0 И Параметр.Договор = Объект.Ссылка Тогда
				НоваяСтрока = Объект.бит_УсловияОплатыНачислений.Добавить();
				НоваяСтрока.Событие             = Параметр.Событие;
				НоваяСтрока.Состояние           = Параметр.Состояние;
				НоваяСтрока.ДатаВыполнения      = Параметр.ДатаВыполнения;
				НоваяСтрока.НаименованиеСобытия = Параметр.Наименование;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ИмяСобытия = "ВыбратьПериодЗавершение" И Источник = УникальныйИдентификатор Тогда	
		
		ОбработкаВыбораВыбратьСтандартныйПериод(Параметр.Результат, Параметр.ВидДанных);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = ТипЗнч(Объект.Ссылка)
		И Не Элементы.СписокДопСоглашений.Видимость Тогда
		ПроверитьНовоеДопСоглашение(НовыйОбъект);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.ОсновнойДоговор) Тогда
		ИзмененыЗначимыеРеквизиты("НомерДоговора", "Договор №");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДеревоПараметров = РеквизитФормыВЗначение("ЗначенияПараметровФинДоговоров");
	
	бит_ДоговораСервер.ЗаписатьПараметрыФинансовогоДоговора(ТекущийОбъект.Ссылка, ДеревоПараметров);
	
	// Установить значения параметры "Договор".
	УстановитьПараметрыДляСпискаТребованийИсков();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	ГрафикВыдачиТраншей.Параметры.УстановитьЗначениеПараметра("ПроектДоговора", Объект.Ссылка);
	бит_ОбщегоНазначенияКлиентСервер.УстановитьОтборУСписка(НоминальныеСтавки.Отбор, Новый ПолеКомпоновкиДанных("ДоговорКонтрагента"), Объект.Ссылка);
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	// +СБ. Кузнецова С. 2014-09-05
	Если ЗначениеЗаполнено(Объект.СБ_ДоговорКонтрагента) Тогда
		ОК_ОбщегоНазначения.ЗаполнитьДоговорПоПроектуДоговора(Объект.СБ_ДоговорКонтрагента, Объект.Ссылка);
	КонецЕсли;
	// -СБ. Кузнецова С.
	
	УстановитьОтборДляСпискаСобытий();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ПроектДоговора";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыВФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзменениеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьПараметрыВыбораКуратора(ЭтотОбъект);

	Если ЗначениеЗаполнено(Объект.КураторДоговораСоСтороныКонтрагента) 
		И ТипЗнч(Объект.КураторДоговораСоСтороныКонтрагента) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ПроверитьКуратораДоговораСоСтороныКонтрагента();
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ИзменениеВалютыВФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Объект.РасчетыВУсловныхЕдиницах = ОплатаВРублях;
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзаиморасчетыПриИзменении(Элемент)
	
	РассчитатьСуммуНДС(Объект);
	РассчитатьСуммуБезНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	РассчитатьСуммуНДС(Объект);
	РассчитатьСуммуБезНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	
	ТекДатаОтбора = ТекущаяДата();
	
	Для Каждого ТекСтрока Из Объект.СтатьиОборотов Цикл
		
		// Проверим принадлежность статьи оборотов.
		ПроверитьПринадлежностьЦФОКСтатьеОборотов(ТекСтрока, ТекДатаОтбора);
		
	КонецЦикла;
	
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьиОборотов.ПодчиненныеЭлементы.СтатьиОборотовСтатьяОборотов);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиОборотовСтатьяОборотовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СтатьиОборотов.ТекущиеДанные;
    ИзменениеСтатьиОборотов(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	
	Если Не КонтролируемыеРеквизиты.ВидДоговора = Объект.ВидДоговора
		И Не Объект.СтатьиОборотов.Количество() = 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменился вид договора контрагента.
                             |Список статей оборотов будет очищен. 
                             |Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросВидДоговораПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	Иначе
		ОбработатьИзменениеВидаДоговора();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросВидДоговораПриИзменении(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.СтатьиОборотов.Очистить();
		Объект.ОсновнаяСтатьяОборотов = фКэшЗначений.ПустаяСтатьяОборотов;
		// Обработаем удаление в статьях оборотов.
		ОбработатьУдалениеВСтатьяхОборотов();
	Иначе
		ИзвлечьИзКэша("ВидДоговора");
	КонецЕсли;
	
	ОбработатьИзменениеВидаДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВидаДоговора()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидДоговора)
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией")) Тогда
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
		ОплатаВРублях = 0
	КонецЕсли;
	
	Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку")
		ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку") Тогда
		Объект.ВалютаВзаиморасчетов = фКэшЗначений.ВалютаРеглУчета;
	КонецЕсли;
	
	Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией") Тогда
		Объект.ВалютаВзаиморасчетов = фКэшЗначений.ВалютаРеглУчета;
	КонецЕсли;
	
	// Сформируем список доступных направлений.
	фКэшЗначений.СписокНаправлений = СформироватьСписокДоступныхНаправлений();
	
	ДобавитьВКэш("ВидДоговора");
	
	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаКлиенте
Процедура ТипДоговораПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДоговораПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДоговорКонтрагентаНажатие(Элемент)
	
	// Если договора контрагента нет, то и открывать нечего.
	Если НЕ ЗначениеЗаполнено(мДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	// Откроем договор.
	ОткрытьДоговорКонтрагента(ЭтаФорма, Объект.Ссылка)
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПредставлениеНомераДоговора = ?(ЗначениеЗаполнено(Объект.ОсновнойДоговор), НСтр("ru = 'Доп. согл. №'"), НСтр("ru = 'Договор №'"));
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредставлениеНомераДоговора + Объект.НомерДоговора + " от " + Формат(Объект.ДатаДоговора, "ДФ=dd.MM.yyyy"));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборНаименованиеНачалоВыбораИзСписка", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеОЗакрытии, СписокВыбора, Элемент);
		
КонецПроцедуры

// Обработка выбора из списка. 
// 
// Параметры:
//  ВыбранноеЗначение - Строка.
// 
&НаКлиенте
Процедура ВыборНаименованиеНачалоВыбораИзСписка(ВыбранноеЗначение, ДопПараметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.Наименование = ВыбранноеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда 	
		Объект.Наименование = ВыбранноеЗначение;
		Модифицированность = Истина;     	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ПредставлениеНомераДоговора = ?(ЗначениеЗаполнено(Объект.ОсновнойДоговор), НСтр("ru = 'Доп. согл. №'"), НСтр("ru = 'Договор №'"));
	
	Элемент.СписокВыбора.Очистить();
	
	Элемент.СписокВыбора.Добавить(ПредставлениеНомераДоговора + Объект.НомерДоговора + " от " + Формат(Объект.ДатаДоговора, "ДФ=dd.MM.yyyy"));
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаФинПлатежейПриИзменении(Элемент)
	
	ЗаполнитьПараметрыФинансовогоДоговора(Объект.СпособРасчетаФинПлатежей);
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ЗначенияПараметровФинДоговоров, ЗначенияПараметровФинДоговоров.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КураторДоговораСоСтороныКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                               , Элемент
								   , Объект
								   , Элемент.Имя
								   , фКэшЗначений.СписокВыбораТипаКуратораДоговораОтКонтрагента
								   , СтандартнаяОбработка);
								   
	
КонецПроцедуры

&НаКлиенте
Процедура КураторДоговораСоСтороныКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.КураторДоговораСоСтороныКонтрагента = Неопределено;
	Элемент.ВыбиратьТип 					   = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтадияДоговораПриИзменении(Элемент)
	
	Если Объект.СтадияДоговора = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Закрыт") 
		И Объект.Проведен Тогда
		
		ВариантыОповещения = ВариантыОповещенияПользователяОбИзмененииСтадииДоговора();
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросПользователюОповещение", ЭтотОбъект);	
		Если ВариантыОповещения.ЕстьДокументыЗаявкиНаРасходДС 
			И ВариантыОповещения.ЕстьДокументыЗаявкиНаЗатраты  Тогда
			ТекстВопроса = НСтр("ru = 'По договору имеются неоплаченные заявки на расходование денежных средств и неисполненные заявки на затраты. Продолжить?'");
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет);
			
		ИначеЕсли ВариантыОповещения.ЕстьДокументыЗаявкиНаРасходДС Тогда
			ТекстВопроса = НСтр("ru = 'По договору имеются неоплаченные заявки на расходование денежных средств. Продолжить?'");
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет);
			
		ИначеЕсли ВариантыОповещения.ЕстьДокументыЗаявкиНаЗатраты Тогда
			ТекстВопроса = НСтр("ru = 'По договору имеются неисполненные заявки на затраты. Продолжить?'");
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет);
			
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеВопрос, КодВозвратаДиалога.Да);
		КонецЕсли; 
		
	Иначе
		СтадияДоговораИсходная = Объект.СтадияДоговора;
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю.
//
&НаКлиенте
Процедура ВопросПользователюОповещение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Объект.СтадияДоговора = СтадияДоговораИсходная;
	Иначе
		СтадияДоговораИсходная = Объект.СтадияДоговора;
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатьиОборотов

&НаКлиенте
Процедура СтатьиОборотовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	НовСтрока = Объект.СтатьиОборотов.Добавить();
	
	Если Не фКэшЗначений.СписокНаправлений.Количество() = 0 Тогда
		
		НовСтрока.РасходДоход = фКэшЗначений.СписокНаправлений[0].Значение;
		
		ПроверитьПринадлежностьЦФОКСтатьеОборотов(НовСтрока, ТекущаяДата());
		
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиОборотовПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.СтатьиОборотов.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено
		И ЗначениеЗаполнено(ТекущаяСтрока.СтатьяОборотов) Тогда
		
		Если ТекущаяСтрока.СтатьяОборотов = Объект.ОсновнаяСтатьяОборотов Тогда
			Объект.ОсновнаяСтатьяОборотов = Неопределено;
		ИначеЕсли ТекущаяСтрока.СтатьяОборотов = Объект.ОсновнаяСтатьяОборотовБДР Тогда
			Объект.ОсновнаяСтатьяОборотовБДР = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиОборотовПослеУдаления(Элемент)
	
	ОбработатьУдалениеВСтатьяхОборотов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиОборотовРасходДоходОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
	
		ТекущиеДанные = Элементы.СтатьиОборотов.ТекущиеДанные;
		ТекущиеДанные.РасходДоход = ВыбранноеЗначение;
		
		// Проверим принадлежность статьи оборотов.
		ПроверитьПринадлежностьЦФОКСтатьеОборотов(ТекущиеДанные, ТекущаяДата());
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиОборотовРасходДоходПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СтатьиОборотов.ТекущиеДанные;
	
	// Проверим принадлежность статьи оборотов.
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(ТекущиеДанные, ТекущаяДата());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияПараметровФинДоговоров

&НаКлиенте
Процедура ЗначенияПараметровФинДоговоровЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗначенияПараметровФинДоговоров.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатьяОборотовБДДСПоступление"	, фКэшЗначений.СтатьяОборотовБДДСПоступление);
	СтруктураПараметров.Вставить("СтатьяОборотовБДДСРасходование"	, фКэшЗначений.СтатьяОборотовБДДСРасходование);
	СтруктураПараметров.Вставить("СтатьяОборотовБДРПоступление"		, фКэшЗначений.СтатьяОборотовБДРПоступление);
	СтруктураПараметров.Вставить("СтатьяОборотовБДРРасходование"	, фКэшЗначений.СтатьяОборотовБДРРасходование);
	СтруктураПараметров.Вставить("Перечисления"						, фКэшЗначений.Перечисления);
	СтруктураПараметров.Вставить("ИмяРеквизитаЗначение"				, "Значение");
	СтруктураПараметров.Вставить("ИмяРеквизитаТипПлатежа"			, "ТипПлатежа");
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораЗначенияПараметраСоставляющейПлатежа(ЭтаФорма, Элемент, ТекущиеДанные, СтруктураПараметров, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПараметровФинДоговоровЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗначенияПараметровФинДоговоров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	бит_РаботаСДиалогамиКлиент.ОчисткаЗначенияПараметраСоставляющейПлатежа(ТекущиеДанные, "Параметр", "Значение", СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНоминальныеСтавки

&НаКлиенте
Процедура НоминальныеСтавкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru='Перед вводом номинальных ставок проект договора необходимо записать!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "ДопУсловияПоДоговору".
// 
&НаКлиенте
Процедура ДопУсловияПоДоговоруПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДопУсловияПоДоговору.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ГрафикПлатежей.Параметры.УстановитьЗначениеПараметра("ДокДопУсловия" , фКэшЗначений.ПустойДокументДопУсловияПоДоговору);
		ГрафикНачислений.Параметры.УстановитьЗначениеПараметра("ДокДопУсловия", фКэшЗначений.ПустойДокументДопУсловияПоДоговору);
	Иначе
		ГрафикПлатежей.Параметры.УстановитьЗначениеПараметра("ДокДопУсловия" , ТекущиеДанные.Ссылка);
		ГрафикНачислений.Параметры.УстановитьЗначениеПараметра("ДокДопУсловия", ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	//+ СБ  Пискунова В 19-09-2016 #2387
	ЭтаФорма.Элементы.ГрафикПлатежей.Обновить();
	//- СБ  Пискунова В 19-09-2016 #2387
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСобытий

&НаКлиенте
Процедура СписокСобытийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Если Модифицированность Тогда
			ДействиеВыполнено = ЗаписатьПровестиДокумент();
			Модифицированность = НЕ ДействиеВыполнено;			
		КонецЕсли;
	Иначе
		
		Если Модифицированность Тогда
			Если РазрешеноСоздаватьСобытия() Тогда

				ТекстВопроса = НСтр("ru = 'Документ изменен. Перед началом работы с событиями его необходимо записать. Записать?'");
				ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСписокСобытийПередНачаломДобавления", ЭтотОбъект, "Добавление");
				
				ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30,,НСтр("ru = 'Документ изменен'"));
			КонецЕсли;	
			
		Иначе
			
			Если РазрешеноСоздаватьСобытия() Тогда

				Если Объект.СуммаВзаиморасчеты > 0 Тогда
					
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Договор", Объект.Ссылка);
					ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
			        ПараметрыФормы.Вставить("Организация", Объект.Организация);
					
					ОткрытьФорму("Документ.бит_СобытиеДоговора.Форма.ФормаДокумента", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
				Иначе
					
					ТекстСообщения = НСтр("ru = 'Перед добавлением событий, необходимо ввести сумму договора.'");
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСобытийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ изменен. Перед началом работы с событиями его необходимо записать. Записать?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСписокСобытийПередНачаломДобавления", ЭтотОбъект, "Изменение");
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30,,НСтр("ru = 'Документ изменен'"))
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСобытий.ТекущиеДанные;
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
		
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СписокСобытийПередНачаломИзменения(Элемент, Отказ)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ изменен. Перед началом работы с событиями его необходимо записать. Записать?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСписокСобытийПередНачаломДобавления", ЭтотОбъект, "Изменение");
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30,,НСтр("ru = 'Документ изменен'"));
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокСобытий.ТекущиеДанные;
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);

	КонецЕсли;
		
	Отказ = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПретензийИсков

&НаКлиенте
Процедура СписокПретензийИсковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокПретензийИсков.ТекущиеДанные;
	ПоказатьЗначение(,ТекущиеДанные.Документ);
		
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

&НаКлиенте
Процедура СоздатьПретензию(Команда)
	
	СоздатьИскПретензию("Претензия");	

КонецПроцедуры

&НаКлиенте
Процедура СоздатьИсковоеТребование(Команда)
	
	СоздатьИскПретензию("Иск");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПланВыборПериода(Команда)
	
	ВыбратьСтандартныйПериод("План");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФактВыборПериода(Команда)
	
	ВыбратьСтандартныйПериод("Факт");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновнуюСтатьюОборотов(Команда)
	
	ТекущиеДанные = Элементы.СтатьиОборотов.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОсновнуюСтатьюСервер(ТекущиеДанные.ПолучитьИдентификатор());	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговор(Команда)
	
	Причина = "";
	Если Не РазрешеноСоздаватьДоговорКонтрагента(Объект.ОсновнойДоговор, Статус, Причина) Тогда
		ВызватьИсключение Причина;
	КонецЕсли; 
	
	Отказ = Ложь;	
	Если Не ЗначениеЗаполнено(Объект.ОсновнойДоговор) И Не ЗначениеЗаполнено(Объект.НомерДоговора) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, "Номер договора");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НомерДоговора", "Объект", Отказ);
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Данные еще не записаны.
							|Создание договора возможно только после записи данных.
							|Записать документ?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСоздатьДоговорЗавершение", ЭтотОбъект);

		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Создание договора'"));
		
	ИначеЕсли НЕ Объект.Проведен Тогда	
		ТекстВопроса = НСтр("ru='Создание договора возможно только после проведения документа.
							|Провести документ?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСоздатьДоговорЗавершение", ЭтотОбъект);

		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Создание договора'"));

	Иначе
		ОчиститьСообщения();
		СоздатьДоговорСервер();
	КонецЕсли;
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросСоздатьДоговорЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			ДействиеВыполнено  = ЗаписатьПровестиДокумент(Истина);
			Модифицированность = НЕ ДействиеВыполнено;
			Если ДействиеВыполнено Тогда
				ОчиститьСообщения();
				СоздатьДоговорСервер();
			Иначе
				ТекстСообщения = Нстр("ru = 'При проведении документа произошла ошибка.'");
				ПоказатьПредупреждение(,ТекстСообщения,, Нстр("ru = 'Создание договора'")); 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомерДоговора(Команда)
	
	Если ЗначениеЗаполнено(Объект.НомерДоговора) И Не ИзмененыЗначимыеРеквизиты("НомерДоговора") Тогда
		
		ТекстВопроса = НСтр("ru = 'Вы точно хотите перезаполнить номер договора?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗаполнитьНомерДоговора", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьЗначениеРеквизитаПоШаблону("НомерДоговора");
		Модифицированность = Истина;

	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросЗаполнитьНомерДоговора(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьЗначениеРеквизитаПоШаблону("НомерДоговора");
		Модифицированность = Истина;

	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНомерДоговора(Команда)
	
	Если Элементы.НомерДоговора.ТолькоПросмотр Тогда
	
		ТекстВопроса = НСтр("ru = 'Номер договора присваивается по кнопке ""Заполнить Договор №"". Самостоятельное его редактирование может привести к нарушению нумерации. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросРедактироватьНомерДоговора", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
				
	Иначе
		
		Если НужноЗаблокироватьКлючевыеЭлементыСервер() Тогда
			
			Если ДоступенНомерДоговора() Тогда
				Элементы.НомерДоговора.ТолькоПросмотр = Ложь;
			Иначе
				Элементы.НомерДоговора.ТолькоПросмотр = Истина;
			КонецЕсли;
			
		Иначе
			Элементы.НомерДоговора.ТолькоПросмотр = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросРедактироватьНомерДоговора(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если НужноЗаблокироватьКлючевыеЭлементыСервер() Тогда
			
			Если ДоступенНомерДоговора() Тогда
				Элементы.НомерДоговора.ТолькоПросмотр = Ложь;
			Иначе
				Элементы.НомерДоговора.ТолькоПросмотр = Истина;
			КонецЕсли;
			
		Иначе
			Элементы.НомерДоговора.ТолькоПросмотр = Ложь;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Устанавливается значение параметра "Договор" для СписокПретензий и ИсковыеТребования.
// 
&НаСервере
Процедура УстановитьПараметрыДляСпискаТребованийИсков()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Договор = бит_ДоговораСервер.НайтиДоговорКонтрагентаПоПроектуДоговора(Объект.Ссылка);

		СписокПретензийИсков.Параметры.УстановитьЗначениеПараметра("ПроектДоговора", Объект.Ссылка);
		СписокПретензийИсков.Параметры.УстановитьЗначениеПараметра("Договор", Договор);
		
	Иначе
		
		СписокПретензийИсков.Параметры.УстановитьЗначениеПараметра("ПроектДоговора", Документы.бит_ПроектДоговора.ПустаяСсылка());
		СписокПретензийИсков.Параметры.УстановитьЗначениеПараметра("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

	КонецЕсли;
	
КонецПроцедуры

// Устанавливается отбор при выборе событий в качестве контрольного. 
// 
// Параметры:
// 
&НаСервере
Процедура УстановитьОтборДляСпискаСобытий()

	ЭлементыОтбора = СписокСобытий.Отбор.Элементы;
    ЭлементыОтбора.Очистить();
	
	Группа = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
    Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	НовыйЭлемент = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовыйЭлемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Договор");
    НовыйЭлемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлемент.ПравоеЗначение   = Объект.Ссылка;
    НовыйЭлемент.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	
	НовыйЭлемент = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовыйЭлемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Договор");
    НовыйЭлемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлемент.ПравоеЗначение   = бит_ДоговораСервер.НайтиДоговорКонтрагентаПоПроектуДоговора(Объект.Ссылка);
    НовыйЭлемент.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;

	НовыйЭлемент = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовыйЭлемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Организация");
    НовыйЭлемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлемент.ПравоеЗначение   = Объект.Организация;
    НовыйЭлемент.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;	

	НовыйЭлемент = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовыйЭлемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Контрагент");
    НовыйЭлемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлемент.ПравоеЗначение   = Объект.Контрагент;
    НовыйЭлемент.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	
КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();	
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("СтавкиНДС"				, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СтавкиНДС));
	КэшПеречисления.Вставить("бит_РасходДоход"			, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.ВидыДоговоровКонтрагентов));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_ТипыПлатежейПоФинансовымДоговорам", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыПлатежейПоФинансовымДоговорам));
	КэшПеречисления.Вставить("бит_АлгоритмыРасчетовПоФинДоговорам"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_АлгоритмыРасчетовПоФинДоговорам));
	КэшПеречисления.Вставить("бит_КонтекстыВыполненияПользовательскихФункций", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_КонтекстыВыполненияПользовательскихФункций));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	// Статусы проекта договора.
	фКэшЗначений.Вставить("ПроектДоговора_Черновик"	, Справочники.бит_СтатусыОбъектов.ПроектДоговора_Черновик);
	фКэшЗначений.Вставить("ПроектДоговора_Утвержден", Справочники.бит_СтатусыОбъектов.ПроектДоговора_Утвержден);
	фКэшЗначений.Вставить("ПроектДоговора_Рабочий"  , Справочники.бит_СтатусыОбъектов.ПроектДоговора_Рабочий);
	
	фКэшЗначений.Вставить("ВалютаРеглУчета"		, Константы.ВалютаРегламентированногоУчета.Получить());
	
	фКэшЗначений.Вставить("ПустойДокументДопУсловияПоДоговору", Документы.бит_ДополнительныеУсловияПоДоговору.ПустаяСсылка());
	фКэшЗначений.Вставить("ПустаяСтатьяОборотов"			  , Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	фКэшЗначений.Вставить("СписокНаправлений"				  , СформироватьСписокДоступныхНаправлений());
	
	фКэшЗначений.Вставить("СписокСтатейПринадлежность", ПолучитьСписокСтатейПоПринадлежности());
		
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", ?(ЗначениеЗаполнено(Объект.ОсновнойДоговор), НСтр("ru = 'Доп. соглашение'"), НСтр("ru = 'Проект договора'")));
			
	фКэшЗначений.Вставить("СтатьяОборотовБДДСПоступление" , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДДСПоступление);
	фКэшЗначений.Вставить("СтатьяОборотовБДДСРасходование", ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДДСРасходование);
	фКэшЗначений.Вставить("СтатьяОборотовБДРПоступление"  , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДРПоступление);
	фКэшЗначений.Вставить("СтатьяОборотовБДРРасходование" , ПланыВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СтатьяОборотовБДРРасходование);

	СписокТипов = бит_ОбщегоНазначения.ПодготовитьСписокВыбораТипа(МетаданныеОбъекта.Реквизиты.КураторДоговораСоСтороныКонтрагента.Тип.Типы());	
	фКэшЗначений.Вставить("СписокВыбораТипаКуратораДоговораОтКонтрагента", СписокТипов);
	
КонецПроцедуры

// Функция получает список статей оборотов, принадлежащих данному ЦФО.
// 
// Параметры:
//  ВыводитьСообщения - Булево.
//  ИндексСтроки 	  - Число, по умолчанию Неопределено.
// 
// Возвращаемое значение:
//  СписокСтатей - СписокЗначений.
// 
&НаСервере
Функция ПолучитьСписокСтатейПоПринадлежности(ВыводитьСообщения = Ложь, ИндексСтроки = Неопределено)

	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПроектДоговора"));
	СписокСтатей   = ДокументОбъект.ПолучитьСписокСтатейПоПринадлежностиМодуль(ВыводитьСообщения, ИндексСтроки);

    Возврат СписокСтатей;
	
КонецФункции

// Процедура заполняет список имен элементов управления,
// которые необходимо блокировать при изменении статусов.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке()
	
	// Имена элементов управления, подлежащие блокировке в статусах выше рабочего.
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("Организация");
	ИменаЭлементов.Добавить("Контрагент");
	ИменаЭлементов.Добавить("Наименование");
	ИменаЭлементов.Добавить("ВидДоговора");
	// ИменаЭлементов.Добавить("НомерДоговора");
	ИменаЭлементов.Добавить("ДатаДоговора");
	ИменаЭлементов.Добавить("СрокДействия");
	ИменаЭлементов.Добавить("ВалютаВзаиморасчетов");
	ИменаЭлементов.Добавить("ОплатаВРублях");
	ИменаЭлементов.Добавить("КурсВзаиморасчетов");
	ИменаЭлементов.Добавить("НаправлениеДоговора");
	ИменаЭлементов.Добавить("ПодразделениеОрганизации");
	ИменаЭлементов.Добавить("ТипДоговора");
	ИменаЭлементов.Добавить("Сценарий");
	ИменаЭлементов.Добавить("ЦФО");
	ИменаЭлементов.Добавить("Проект");
	ИменаЭлементов.Добавить("СтавкаНДС");
	ИменаЭлементов.Добавить("СуммаВзаиморасчеты");
	ИменаЭлементов.Добавить("ПредметДоговора");
	ИменаЭлементов.Добавить("ОписаниеРабот");
	ИменаЭлементов.Добавить("СостояниеДоговора");
	// ИменаЭлементов.Добавить("СтадияДоговора");
	ИменаЭлементов.Добавить("НачалоПлановое");
	ИменаЭлементов.Добавить("ОкончаниеПлановое");
	ИменаЭлементов.Добавить("ФактическоеНачало");
	ИменаЭлементов.Добавить("ФактическоеОкончание");
	ИменаЭлементов.Добавить("БазовыйПериодИсчисленияПериода");
	ИменаЭлементов.Добавить("ШтрафнойПроцентОтСуммыЗаПериод");
	ИменаЭлементов.Добавить("ШтрафнаяСуммаЗаПериод");
	ИменаЭлементов.Добавить("ДержательДоговора");
	ИменаЭлементов.Добавить("КураторДоговора");
	ИменаЭлементов.Добавить("КураторДоговораСоСтороныКонтрагента");
	ИменаЭлементов.Добавить("СтатьиОборотов");
	ИменаЭлементов.Добавить("СпособРасчетаФинПлатежей");
	ИменаЭлементов.Добавить("ЗначенияПараметровФинДоговоров");
	ИменаЭлементов.Добавить("ВнешнийНомер");	
	ИменаЭлементов.Добавить("ДополняютсяУсловияОсновногоДоговора");
	
	// Кнопки.
	ИменаЭлементов.Добавить("кнопка_СтатьиОборотовУстановитьОсновнуюСтатьюОборотов");
	ИменаЭлементов.Добавить("кнопка_ДействиеПланВыборПериода");
	ИменаЭлементов.Добавить("кнопка_ДействиеФактВыборПериода");

	фКэшЗначений.Вставить("ИменаЭлементов", ИменаЭлементов);
	
КонецПроцедуры

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда 
		Элементы.ФормаОбработкабит_УстановкаВизСогласование.Видимость = Ложь;
	КонецЕсли;
		
	ЗаблокироватьЭлементы = НужноЗаблокироватьКлючевыеЭлементыСервер();
	
	Для каждого ИмяЭлемента Из фКэшЗначений.ИменаЭлементов Цикл
		Если Лев(ИмяЭлемента, 7) = "кнопка_" Тогда
			ИмяЭлементаУправления = СтрЗаменить(ИмяЭлемента, "кнопка_", "");
			Элементы[ИмяЭлементаУправления].Доступность = НЕ ЗаблокироватьЭлементы;
		Иначе
			Элементы[ИмяЭлемента].ТолькоПросмотр = ЗаблокироватьЭлементы;
		КонецЕсли;
	КонецЦикла; 
	
	ЕстьКнопкаПровестиИЗакрыть = Элементы.Найти("ФормаПровестиИЗакрыть");
	
	// Под ограниченными правами управляемая форма сама удаляет кнопку.
	Если ЕстьКнопкаПровестиИЗакрыть <> Неопределено Тогда
		Элементы.ФормаПровестиИЗакрыть.Доступность = Не ЗаблокироватьЭлементы;
	КонецЕсли;
	
	Элементы.ФормаЗаписать.Доступность 		      = Не ЗаблокироватьЭлементы; 	
	Элементы.ВключатьВРеестрДоговоров.Доступность = НЕ ЗаблокироватьЭлементы;
	
	ИмяСтраницыДляУстановки = "";
	СтраницыПанели 			= Элементы.ПанельОсновная.ПодчиненныеЭлементы;
	
	ИмяСтраницыДляУстановки = "СтраницаОсновные";
	
	СтраницыПанели["СтраницаОсновные"].Видимость = Истина;
	
	Если Не ПустаяСтрока(ИмяСтраницыДляУстановки) Тогда
		Элементы.ПанельОсновная.ТекущаяСтраница = СтраницыПанели[ИмяСтраницыДляУстановки];
	КонецЕсли; 
	
	ЭтоДоговорРеализации   = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	
	Элементы.ОплатаВРублях.Видимость = (ЭтоДоговорРеализации И Объект.ВидДоговора <> ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку")
			ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"))
		И (Объект.ВалютаВзаиморасчетов <> фКэшЗначений.ВалютаРеглУчета)
		И ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов);
						
	ЗначениеВыбора = Элементы.ОплатаВРублях.СписокВыбора.НайтиПоЗначению(0);
	ЗначениеВыбора.Представление = Объект.ВалютаВзаиморасчетов;
	
	ЭтоДоговорФакторинга = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией"));
	Элементы.ВалютаВзаиморасчетов.Доступность = НЕ ЭтоДоговорФакторинга;
	
	// Страница Графики.
	ДопУсловияПоДоговору.Параметры.УстановитьЗначениеПараметра("ПроектДоговора", Объект.Ссылка);
	ДопУсловияПоДоговору.Параметры.УстановитьЗначениеПараметра("ВыводитьСписок", ЗначениеЗаполнено(Объект.Ссылка));
	
	ТекущиеДанные = Элементы.ДопУсловияПоДоговору.ТекущаяСтрока;
	
	Если ТекущиеДанные = Неопределено Тогда
		ГрафикПлатежей.Параметры.УстановитьЗначениеПараметра("ДокДопУсловия"  , фКэшЗначений.ПустойДокументДопУсловияПоДоговору);
		ГрафикНачислений.Параметры.УстановитьЗначениеПараметра("ДокДопУсловия", фКэшЗначений.ПустойДокументДопУсловияПоДоговору);
	Иначе
		ГрафикПлатежей.Параметры.УстановитьЗначениеПараметра("ДокДопУсловия"  , ТекущиеДанные.Ссылка);
		ГрафикНачислений.Параметры.УстановитьЗначениеПараметра("ДокДопУсловия", ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	флВидимостьФинРеквизитов = Объект.НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.Финансовый
							ИЛИ Объект.ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
							ИЛИ Объект.ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
							ИЛИ Объект.ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные;
	
	Элементы.СтраницаЗначенияПараметровФинДоговоров.Видимость = флВидимостьФинРеквизитов;
	
	Элементы.СтраницаНоминальныеСтавки.Видимость = флВидимостьФинРеквизитов;
	
	УправлениеЭлементамиФормыПоШаблонамЗаполненияРеквизитов(ЗаблокироватьЭлементы);
	
	ВидимостьДанныхПоСобытиям = ВидимостьКолонокСобытия();

	Элементы.ГрафикПлатежейНаименованиеСобытия.Видимость = ВидимостьДанныхПоСобытиям;
	Элементы.ГрафикПлатежейСостояниеСобытия.Видимость    = ВидимостьДанныхПоСобытиям;
	
	Если Объект.ТипДоговора = Справочники.бит_ТипыДоговоров.АрендаОС 
		Или Объект.ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыВыданные
		Или Объект.ТипДоговора = Справочники.бит_ТипыДоговоров.ЗаймыПолученные
		Или Объект.ТипДоговора = Справочники.бит_ТипыДоговоров.КредитыПолученные
		Или Объект.ТипДоговора = Справочники.бит_ТипыДоговоров.ЦенныеБумаги 
		Или Объект.НаправлениеДоговора = Справочники.бит_НаправленияДоговоров.Финансовый Тогда
		
		Элементы.СписокСобытий.Видимость = Ложь;
	Иначе
		Элементы.СписокСобытий.Видимость = Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ОсновнойДоговор) Тогда
		Элементы.ДополняютсяУсловияОсновногоДоговора.Видимость = Истина;
	КонецЕсли;
	
	// Установим настройки доступности элементов формы.
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры

// Функция.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
&НаСервере
Функция ВидимостьКолонокСобытия()

	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_СобытиеДоговора.Ссылка) КАК КолвоСобытий
		|ИЗ
		|	Документ.бит_СобытиеДоговора КАК бит_СобытиеДоговора
		|ГДЕ
		|	бит_СобытиеДоговора.Договор = &ПроектДоговора";

	Запрос.УстановитьПараметр("ПроектДоговора", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если Выборка.КолвоСобытий > 0 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Процедура применяет настройки доступности и видимости для элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
																			 
	Если ДоступенНомерДоговора() Тогда
		ЭтоДопСоглашение = ЗначениеЗаполнено(Объект.ОсновнойДоговор);
	
		Если ЭтоДопСоглашение Тогда
		 	Элементы.НомерДоговора.ТолькоПросмотр = Ложь;
		Иначе	
			СтруктураШаблона = фСтруктураШаблоновЗаполненияРеквизитов["СтруктураШаблона_НомерДоговора"];
			Элементы.НомерДоговора.ТолькоПросмотр = СтруктураШаблона <> Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// +СБ. Кузнецова С. 2014-09-05 
	ВидимостьВкладок = Объект.ТипДоговора = ПредопределенноеЗначение("Справочник.бит_ТипыДоговоров.КредитыПолученные") Или
							Объект.ТипДоговора = ПредопределенноеЗначение("Справочник.бит_ТипыДоговоров.ЗаймыПолученные");
							
	Элементы.ГруппаХеджирование.Видимость = ВидимостьВкладок;
	Элементы.ГруппаОбеспечение.Видимость = ВидимостьВкладок;
							
	Элементы.СБ_ДоговорыХеджирования.Видимость = Объект.СБ_Захеджировано;
	Элементы.СБ_КонтрагентХеджирования.Видимость = Объект.СБ_Захеджировано;
	
	ВидимостьОбеспечения = Объект.СБ_ТипКредитногоДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеОбеспеченные") Или
							Объект.СБ_ТипКредитногоДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицОбеспеченные");
							
	Элементы.НадписьОбеспечители.Видимость = ВидимостьОбеспечения;
	Элементы.СБ_Обеспечители.Видимость = ВидимостьОбеспечения;
	Элементы.НадписьОсновныеСредстваВЗалоге.Видимость = ВидимостьОбеспечения;
	Элементы.СБ_ОсновныеСредстваВЗалоге.Видимость = ВидимостьОбеспечения;
	Элементы.НадписьПрочиеАктивыВЗалоге.Видимость = ВидимостьОбеспечения;
	Элементы.СБ_ПрочиеАктивыВЗалоге.Видимость = ВидимостьОбеспечения;
	// -СБ. Кузнецова С.
	
КонецПроцедуры

// Функция определяет доступность элемента управления "НомерДоговора".
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Результат - Булево.
// 
&НаСервере
Функция ДоступенНомерДоговора()

	Результат = Ложь;
	
	// Получение таблицы настроек доступности элементов управления.
	ТаблицаНастроекДоступности = бит_ОбщегоНазначения.ПолучитьНастройкиДоступностиЭлементовУправления(Объект, Истина);

	СтрокаНомер = ТаблицаНастроекДоступности.Найти("НомерДоговора", "ИмяЭлементаУправления");
	Если СтрокаНомер <> Неопределено Тогда
		Если СтрокаНомер.Доступность Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция определяет следует ли заблокировать ключевые реквизиты проекта договора. Сервер.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//   ЗаблокироватьРеквизиты - Булево.
// 
&НаСервере 
Функция НужноЗаблокироватьКлючевыеЭлементыСервер()

	флЗаблокироватьЭлементы = Статус = Справочники.бит_СтатусыОбъектов.ПроектДоговора_Утвержден;
		
	Возврат флЗаблокироватьЭлементы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"					   , Объект.ЦФО);		
	
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалюты()
	
	// Зачистка флага "Расчеты в условных единицах" для валюты, совпадающей с валютой рег. учета.
	Если Объект.ВалютаВзаиморасчетов = фКэшЗначений.ВалютаРеглУчета Тогда 		
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
		ОплатаВРублях = 0;
	Иначе
		
		Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем")
			ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"))
			ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком")) Тогда
			
			Объект.РасчетыВУсловныхЕдиницах = Истина;
			ОплатаВРублях = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПроектДоговора"));
	ДокументОбъект.ИзменениеВалютыМодуль();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры

// Процедура выполняет действия на сервере, необходимые при изменении Организации.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеОрганизации()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПроектДоговора"));
	
	// Выполняем общие действия для всех документов при изменении Организация.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ПроверитьШаблоныЗаполненияРеквизитов("НомерДоговора");
	
КонецПроцедуры

// Процедура обрабатывает изменение статьи оборотов в строке таблицы.
// 
// Параметры:
//  Контейнер - Идентификатор СтрокиТабличнойЧасти.СтатьиОборотов.
// 
&НаСервере
Процедура ИзменениеСтатьиОборотов(ИДСтроки)

	Контейнер = Объект.СтатьиОборотов.НайтиПоИдентификатору(ИДСтроки);
	
	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
    Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) Тогда
        
        Если Контейнер.СтатьяОборотов.ЭтоГруппа Тогда
			ТекстСообщения = НСтр("ru = 'Выбор групп статей запрещен.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Контейнер.СтатьяОборотов = фКэшЗначений.ПустаяСтатьяОборотов;
			Возврат;
        КонецЕсли; 
        
        Если Контейнер.СтатьяОборотов.РасходДоход <> Контейнер.РасходДоход Тогда
            ВидСтатьи = ?(Контейнер.РасходДоход = фКэшЗначений.Перечисления.бит_РасходДоход.Поступление, "доходную", "расходную");
			
			ТекстСообщения = НСтр("ru = 'Следует выбрать %1% статью.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ВидСтатьи);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Контейнер.СтатьяОборотов = фКэшЗначений.ПустаяСтатьяОборотов;
			Возврат;
        КонецЕсли; 
		
		// Если еще не указана основная статья оборотов, тогда.
		Если (Не ЗначениеЗаполнено(Объект.ОсновнаяСтатьяОборотов)
			И Контейнер.СтатьяОборотов.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДДС)
			ИЛИ (Не ЗначениеЗаполнено(Объект.ОсновнаяСтатьяОборотовБДР)
			И Контейнер.СтатьяОборотов.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДР) Тогда 
			
			УстановитьОсновнуюСтатьюСервер(ИДСтроки);
		КонецЕсли;
		
	КонецЕсли; 
    
КонецПроцедуры

// Процедура выполняет действия на сервере, необходимые при изменении ЦФО.
// 
// Параметры:
//  СтруктураПараметров - Структура.
//  ИндексСтроки 		- Число, по умолчанию Неопределено.
// 
&НаСервере
Процедура ИзменениеЦФО(СтруктураПараметров, ИндексСтроки = Неопределено)

	ВыводитьСообщения = ?(СтруктураПараметров.Свойство("ВыводитьСообщения"), СтруктураПараметров.ВыводитьСообщения, Ложь);
	
	СтруктураПараметров.СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежности(ВыводитьСообщения);

КонецПроцедуры

// Функция формирует список доступных для выбора направлений в зависимости от вида договора. 
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//   СписокНаправлений - СписокЗначений.
// 
&НаСервере
Функция СформироватьСписокДоступныхНаправлений()
	
	СписокНаправлений = Новый СписокЗначений;	
	
	Если ЗначениеЗаполнено(Объект.ВидДоговора)
		И Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		СписокНаправлений.Добавить(фКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидДоговора)
		И Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		СписокНаправлений.Добавить(фКэшЗначений.Перечисления.бит_РасходДоход.Поступление);
		
	Иначе
		СписокНаправлений.Добавить(фКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		СписокНаправлений.Добавить(фКэшЗначений.Перечисления.бит_РасходДоход.Поступление);
	КонецЕсли; 
	
	Возврат СписокНаправлений;
	
КонецФункции

// Процедура устанавливает основную статью оборотов.
// 
// Параметры:
//  ИдСтроки - ИдентификаторСтроки.
// 
&НаСервере
Процедура УстановитьОсновнуюСтатьюСервер(ИдСтроки)

	ТекущаяСтрока = Объект.СтатьиОборотов.НайтиПоИдентификатору(ИдСтроки);
	
	Если Не ТекущаяСтрока = Неопределено
		И ЗначениеЗаполнено(ТекущаяСтрока.СтатьяОборотов) Тогда
		
		Если ТекущаяСтрока.СтатьяОборотов.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
			Объект.ОсновнаяСтатьяОборотов = ТекущаяСтрока.СтатьяОборотов;
		ИначеЕсли ТекущаяСтрока.СтатьяОборотов.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДР Тогда 
			Объект.ОсновнаяСтатьяОборотовБДР = ТекущаяСтрока.СтатьяОборотов;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			Объект.СтавкаНДС = Объект.ОсновнаяСтатьяОборотов.СтавкаНДС;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Функция выполняет запись документа.
// 
// Параметры:
// 	нет
// 
// Возвращаемое значение:
// 	ДействиеВыполнено - булево. 
// 
&НаСервере
Функция ЗаписатьПровестиДокумент(ПровестиПринудительно = Ложь)
	
	Если ПровестиПринудительно Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе	
		Если Объект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
	КонецЕсли; 
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// Запишем документ.
	ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокументОбъект, РежимЗаписи,, "Ошибки");
	
	УстановитьОтборДляСпискаСобытий();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат ДействиеВыполнено;
	
КонецФункции

// Заполняет текст про договор контрагента в форме документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьТекстПроДоговорКонтрагента()

	// Для нового проекта не надо искать договор.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	мДоговорКонтрагента = бит_ДоговораСервер.НайтиДоговорКонтрагентаПоПроектуДоговора(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(мДоговорКонтрагента) Тогда
		
		Элементы.ГиперссылкаДоговорКонтрагента.Заголовок   = Строка(мДоговорКонтрагента);
		Элементы.ГиперссылкаДоговорКонтрагента.ГиперСсылка = Истина;
		
	Иначе
		Элементы.ГиперссылкаДоговорКонтрагента.Заголовок   = "Договор контрагента не создан";
		Элементы.ГиперссылкаДоговорКонтрагента.ГиперСсылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет действия необходимые при создании договора.
// 
// Параметры:
// 	нет
// 
&НаСервере
Процедура СоздатьДоговорСервер()
	
	СозданныйДоговор = бит_ДоговораСервер.СоздатьДоговорНаОснованииПроекта(Объект.Ссылка, "Ошибки");
	
	Если НЕ СозданныйДоговор = Неопределено Тогда 
		бит_ДоговораСервер.ОбновитьДоговорВДокументахДопУсловияПоДоговору(СозданныйДоговор, Объект.Ссылка, "Все");
		
		// Заполним текст про договор контрагента.
		ЗаполнитьТекстПроДоговорКонтрагента();
		
		УправлениеЭлементамиФормы();
		
		УстановитьОтборДляСпискаСобытий();
		
		// Устанавливаем параметры для списка требований и исков.
		УстановитьПараметрыДляСпискаТребованийИсков();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет дерево параметров финансового договора.
// 
&НаСервере
Процедура ЗаполнитьПараметрыФинансовогоДоговора(ИсточникЗаполнения)
	
	ДеревоПараметров = бит_ДоговораСервер.ПолучитьДеревоПараметровФинДоговоров(ИсточникЗаполнения);
	
	ЭлементыДереваВФорме = ЗначенияПараметровФинДоговоров.ПолучитьЭлементы();
	ЭлементыДереваВФорме.Очистить();
	
	Для Каждого ТекущаяВетка Из ДеревоПараметров.Строки Цикл
		
		НоваяСтрока = ЭлементыДереваВФорме.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяВетка);
		
		ЭлементыСтрокиРодителя = НоваяСтрока.ПолучитьЭлементы();
		
		Для Каждого ПодчиненнаяВетка Из ТекущаяВетка.Строки Цикл
			НоваяПодчиненнаяСтрока = ЭлементыСтрокиРодителя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПодчиненнаяСтрока, ПодчиненнаяВетка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНовоеДопСоглашение(НовыйОбъект)

	Элементы.СписокДопСоглашений.Видимость = НовыйОбъект.ОсновнойДоговор = Объект.Ссылка;
		
КонецПроцедуры

// Функция проверяет возможность создания договора контрагента.
//
// Параметры:
//  ОсновнойДоговор	 - СправочникСсылка.ДоговорыКонтрагентов.  
//  Статус			 - СправочникСсылка.бит_СтатусыОбъектов.
//  Причина			 - Строка.
// 
// Возвращаемое значение:
// 	Разрешено - булево.
//
&НаСервереБезКонтекста
Функция РазрешеноСоздаватьДоговорКонтрагента(ОсновнойДоговор, Статус, Причина)

	Разрешено = Истина;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Причина 			= "";
	
	// Проверка константы «Создавать договоры контрагентов из Доп. соглашений».
	Если ЗначениеЗаполнено(ОсновнойДоговор) И Не Константы.бит_СоздаватьДоговорыКонтрагентовИзДопСоглашений.Получить() Тогда
		ТекстСообщения = Нстр("ru = 'Запрещено создавать договор контрагента из дополнительных соглашений.'");
		Разделитель = ?(ПустаяСтрока(Причина),"", Символы.ПС);
		Причина = Причина + Разделитель + ТекстСообщения;
		Разрешено = Ложь;
	КонецЕсли;
	
	// Проверка дополнительного права пользователя «Разрешено создание договора контрагента из проекта договора».
	Если Не бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(ТекущийПользователь, 
				ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноСозданиеДоговораКонтрагентаИзПроектаДоговора) Тогда
		ТекстСообщения = Нстр("ru = 'Запрещено создавать договор контрагента из проекта договора.
		                            |Необходимо назначить дополнительное право ""Разрешено создание договоров контрагента из проекта договора"". 
									|Для установки данного права обратитесь к Администратору.'");
		Разделитель = ?(ПустаяСтрока(Причина),"", Символы.ПС);
		Причина = Причина + Разделитель + ТекстСообщения;
	 	Разрешено = Ложь;	
	КонецЕсли;
	
	Если Статус <> Справочники.бит_СтатусыОбъектов.ПроектДоговора_Утвержден Тогда
		ТекстСообщения = Нстр("ru = 'Запрещено создавать договор контрагента до утверждения проекта.'");
		Разделитель = ?(ПустаяСтрока(Причина),"", Символы.ПС);
		Причина = Причина + Разделитель + ТекстСообщения;
		Разрешено = Ложь;
	КонецЕсли; 
	
	Возврат Разрешено;
	
КонецФункции

&НаСервере
Функция ВариантыОповещенияПользователяОбИзмененииСтадииДоговора()
			
	Возврат Документы.бит_ПроектДоговора.ОпределитьНаличиеНеЗакрытыхДокументов(Объект.Ссылка);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораКуратора(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыВыбораКуратора = Новый ПараметрВыбора("Отбор.ОбъектВладелец", Объект.Контрагент);

	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(ПараметрыВыбораКуратора);

	Элементы.КураторДоговораСоСтороныКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);	

КонецПроцедуры

// Процедура открывает форму договора контрагента.
// 
// Параметры:
//  ПроектДоговора  - ДокументСсылка.бит_ПроектДоговора. По умолчанию Неопределено.
//  ФормаДокумента 	  - форма документа.
//  Договор - СправочникСсылка.ДоговорыКонтрагентов По умолчанию Неопределено.
// 
&НаКлиенте
Процедура ОткрытьДоговорКонтрагента(ФормаДокумента,
									ПроектДоговора = Неопределено)
									
	Договор = Неопределено;
	
	Если Не ПроектДоговора = Неопределено Тогда
		Договор = бит_ДоговораСервер.НайтиДоговорКонтрагентаПоПроектуДоговора(ПроектДоговора);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	// Откроем форму для просмотра платежного документа. 
	ПараметрыФормы = Новый Структура("Ключ", Договор);
	
	ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы);
	ФормаДоговора.ВладелецФормы 				= ФормаДокумента;
	
	ФормаДоговора.Открыть();
	
КонецПроцедуры

// Процедура расчитывает суммму НДС.
// 
// Параметры:
//  Контейнер - Объект, СтрокаТабличнойЧасти.
// 
&НаКлиенте 
Процедура РассчитатьСуммуНДС(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС
																	   , фКэшЗначений.Перечисления.СтавкиНДС);
	
	Контейнер.СуммаНДСВзаиморасчеты  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.СуммаВзаиморасчеты
																	  	, Истина
																		, Истина
																		, СтавкаНДСЧисло);
																							
КонецПроцедуры

// Процедура расчитывает суммму без НДС.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура РассчитатьСуммуБезНДС()

	ЭтаФорма.СуммаБезНДС = Объект.СуммаВзаиморасчеты - Объект.СуммаНДСВзаиморасчеты;
																							
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа в форме документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыВФорме() 
	
	ИзменениеВалюты();
	
	// Спросим, а не пересчитать ли суммы.
	Если Не КонтролируемыеРеквизиты.ВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетов 
		И Не Объект.СуммаВзаиморасчеты = 0 Тогда
	
		ТекстВопроса = НСтр("ru = 'Изменилась валюта проекта договора. Пересчитать сумму?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыВФорме", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	Иначе
		ДобавитьВКэш("ВалютаВзаиморасчетов");
		ДобавитьВКэш("КратностьВзаиморасчетов");
		ДобавитьВКэш("КурсВзаиморасчетов");
		УправлениеЭлементамиФормы()
	КонецЕсли; 
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыВФорме(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		Объект.СуммаВзаиморасчеты = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаВзаиморасчеты
															   		  , КонтролируемыеРеквизиты.ВалютаВзаиморасчетов
																	  , Объект.ВалютаВзаиморасчетов
																	  , КонтролируемыеРеквизиты.КурсВзаиморасчетов
																	  , Объект.КурсВзаиморасчетов
																	  , КонтролируемыеРеквизиты.КратностьВзаиморасчетов
																	  , Объект.КратностьВзаиморасчетов);
		
		РассчитатьСуммуНДС(Объект);
		РассчитатьСуммуБезНДС();																	
		
	Иначе
		// Объект.СуммаВзаиморасчеты = 0;
	КонецЕсли;

	ДобавитьВКэш("ВалютаВзаиморасчетов");
	ДобавитьВКэш("КратностьВзаиморасчетов");
	ДобавитьВКэш("КурсВзаиморасчетов");
	
	УправлениеЭлементамиФормы()

КонецПроцедуры

// Процедура проверяем принадлежность ЦФО к статье оборотов.
// 
// Параметры:
//  Контейнер  - СтрокаТабличнойЧасти.СтатьиОборотов.
//  ДатаОтбора - Дата.
// 
&НаКлиенте
Процедура ПроверитьПринадлежностьЦФОКСтатьеОборотов(Контейнер, ДатаОтбора)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокСтатейПринадлежность", фКэшЗначений.СписокСтатейПринадлежность);
	СтруктураПараметров.Вставить("ЦФО"						 , Объект.ЦФО);
	СтруктураПараметров.Вставить("СтатьяОборотов"			 , Контейнер.СтатьяОборотов);
	
	ИзменениеЦФО(СтруктураПараметров);
	
	фКэшЗначений.СписокСтатейПринадлежность = СтруктураПараметров.СписокСтатейПринадлежность;	
	
	Если Не бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(СтруктураПараметров) Тогда
		Контейнер.СтатьяОборотов = Неопределено;
	КонецЕсли;
	
	ИзменениеСтатьиОборотов(Контейнер.ПолучитьИдентификатор());
    
КонецПроцедуры

// Процедура устанавливает отборы для статьи оборотов.
// 
// Параметры:
//  Контейнер - ПолеФормы.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатей(Контейнер)

	СтруктураОтбора = Новый Структура;
	
	фКэшЗначений.СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежности();
	
	Если ТипЗнч(фКэшЗначений.СписокСтатейПринадлежность) = Тип("СписокЗначений") Тогда
		СтруктураОтбора.Вставить("Ссылка", фКэшЗначений.СписокСтатейПринадлежность);
	КонецЕсли;
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Контейнер, СтруктураОтбора);

КонецПроцедуры

// Процедура проверяет наличие строк в табличной части СтатьиОборотов,
// если таблица пуста - очищает основную статью оборотов.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ОбработатьУдалениеВСтатьяхОборотов()
	
	Если Объект.СтатьиОборотов.Количество() = 0
		И (ЗначениеЗаполнено(Объект.ОсновнаяСтатьяОборотов)
		ИЛИ ЗначениеЗаполнено(Объект.ОсновнаяСтатьяОборотовБДР))Тогда
		
		Объект.ОсновнаяСтатьяОборотов 	 = фКэшЗначений.ПустаяСтатьяОборотов;
		Объект.ОсновнаяСтатьяОборотовБДР = фКэшЗначений.ПустаяСтатьяОборотов;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает стандартную форму редактирования периода.
// 
&НаКлиенте
Процедура ВыбратьСтандартныйПериод(ВидДанных)
			
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	ПараметрыПередачи.Вставить("ВидДанных", 	ВидДанных);
	Если ВидДанных = "План" Тогда
		ПараметрыПередачи.ДатаНачала    = Объект.НачалоПлановое;
		ПараметрыПередачи.ДатаОкончания = Объект.ОкончаниеПлановое;
	Иначе
		ПараметрыПередачи.ДатаНачала    = Объект.ФактическоеНачало;
		ПараметрыПередачи.ДатаОкончания = Объект.ФактическоеОкончание;
	КонецЕсли;	
	
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);

КонецПроцедуры

// Обработка оповещения завершения редактирования периода. 
// 
// Параметры:
//  Результат - СтандартныйПериод.
// 
&НаКлиенте
Процедура ОбработкаВыбораВыбратьСтандартныйПериод(Результат, ВидДанных)

	Если ТипЗнч(Результат) <> Тип("Неопределено") Тогда
		
		СтандартныйПериодФормы = Результат;
		Если ВидДанных = "План" Тогда
			Объект.НачалоПлановое        = СтандартныйПериодФормы.ДатаНачала;
			Объект.ОкончаниеПлановое     = СтандартныйПериодФормы.ДатаОкончания;
		Иначе
			Объект.ФактическоеНачало    = СтандартныйПериодФормы.ДатаНачала;
			Объект.ФактическоеОкончание = СтандартныйПериодФормы.ДатаОкончания;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

// Создание иска или претензии.
// Параметры:
//   ВидДокумента - Строка.
// 
&НаКлиенте
Процедура СоздатьИскПретензию(ВидДокумента)

	Если Модифицированность Тогда
		
		Если РазрешеноСоздаватьСобытия() Тогда

			ТекстВопроса = НСтр("ru = 'Документ изменен, перед началом добавления исков или претензий его необходимо записать. Записать?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСоздатьИскПретензию", ЭтотОбъект, ВидДокумента);
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30,,НСтр("ru = 'Документ изменен'"));
		КонецЕсли;	
		
	Иначе
		
		Если РазрешеноСоздаватьСобытия() Тогда

			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.Ссылка);
			ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	        ПараметрыФормы.Вставить("Организация", Объект.Организация);
			ПараметрыПередачи = Новый Структура("Основание", ПараметрыФормы); 
			
			Если ВидДокумента = "Иск" Тогда
				ОткрытьФорму("Документ.бит_ИсковоеТребование.Форма.ФормаДокумента", ПараметрыПередачи,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Иначе
				ОткрытьФорму("Документ.бит_Претензия.Форма.ФормаДокумента", ПараметрыПередачи,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

// Обработка оповещения вопроса пользователю.
// Параметры:
//  Ответ - Строка.
//  ВидДокумента - Строка.
// 
&НаКлиенте
Процедура ВопросСоздатьИскПретензию(Ответ, ВидДокумента) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДействиеВыполнено = ЗаписатьПровестиДокумент();
		
		Модифицированность = НЕ ДействиеВыполнено;
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Договор", Объект.Ссылка);
		ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
        ПараметрыФормы.Вставить("Организация", Объект.Организация);
		
		Если ВидДокумента = "Иск" Тогда
	
			ОткрытьФорму("Документ.бит_ИсковоеТребование.Форма.ФормаДокумента", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		Иначе
			
			ОткрытьФорму("Документ.бит_Претензия.Форма.ФормаДокумента", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Функция определяет возможность создания событий.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
&НаКлиенте
Функция РазрешеноСоздаватьСобытия()

	Результат = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = "Поле ""Организация"" не заполнено";
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Результат = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = "Поле ""Контрагент"" не заполнено";
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Обработка оповещения вопроса пользователю.
// 
// Параметры:
//  Ответ - Строка.
//  ВариантРедактирования - Строка.
// 
&НаКлиенте
Процедура ВопросСписокСобытийПередНачаломДобавления(Ответ, ВариантРедактирования) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДействиеВыполнено = ЗаписатьПровестиДокумент();
		
		Модифицированность = НЕ ДействиеВыполнено;
				
		Если ВариантРедактирования = "Добавление" Тогда
			Если Объект.СуммаВзаиморасчеты > 0 Тогда
			
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Договор", Объект.Ссылка);
				ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
		        ПараметрыФормы.Вставить("Организация", Объект.Организация);
				
				ОткрытьФорму("Документ.бит_СобытиеДоговора.Форма.ФормаДокумента", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Перед добавлением событий, необходимо ввести сумму договора.'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли;

		ИначеЕсли ВариантРедактирования = "Изменение" Тогда
			ТекущиеДанные = Элементы.СписокСобытий.ТекущиеДанные;
			ПоказатьЗначение(,ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаСервере 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	НаборРеквизитов = Новый Структура;
	НаборРеквизитов.Вставить("ВалютаВзаиморасчетов");
	НаборРеквизитов.Вставить("КурсВзаиморасчетов");
	НаборРеквизитов.Вставить("КратностьВзаиморасчетов");
	НаборРеквизитов.Вставить("ВидДоговора");

	ЗаполнитьЗначенияСвойств(НаборРеквизитов, Объект);
	
	КонтролируемыеРеквизиты = Новый ФиксированнаяСтруктура(НаборРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	НаборРеквизитов = Новый Структура;
	Для каждого КлючЗначение Из КонтролируемыеРеквизиты Цикл
		НаборРеквизитов.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла; 
	НаборРеквизитов.Вставить(КлючЗначение.Ключ, Объект[ИмяРеквизита]);
	
	КонтролируемыеРеквизиты = Новый ФиксированнаяСтруктура(НаборРеквизитов);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = КонтролируемыеРеквизиты[ИмяРеквизита];
	
КонецПроцедуры

#КонецОбласти

#Область ПодсистемаСвойств

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства
	
#КонецОбласти

#Область ШаблонЗаполненияРеквизитов

&НаСервере 
Процедура УправлениеЭлементамиФормыПоШаблонамЗаполненияРеквизитов(ЗаблокироватьЭлементы)
		
	ЭтоДопСоглашение = ЗначениеЗаполнено(Объект.ОсновнойДоговор);
	
	Если ЭтоДопСоглашение Тогда
	 	РедактироватьНомерПоКнопке = Ложь;
	Иначе	
		СтруктураШаблона = фСтруктураШаблоновЗаполненияРеквизитов["СтруктураШаблона_НомерДоговора"];
		РедактироватьНомерПоКнопке = СтруктураШаблона <> Неопределено;
	КонецЕсли;

	Если ЗаблокироватьЭлементы И Не ДоступенНомерДоговора() Тогда
		Элементы.НомерДоговора.ТолькоПросмотр = Истина;
	Иначе
		Элементы.НомерДоговора.ТолькоПросмотр = РедактироватьНомерПоКнопке;	
	КонецЕсли;
		
	Элементы.ГруппаОсновнойДоговор.Видимость  = ЭтоДопСоглашение;
	Элементы.Организация.ТолькоПросмотр 	  = ЗаблокироватьЭлементы Или ЭтоДопСоглашение;
	Элементы.Контрагент.ТолькоПросмотр  	  = ЗаблокироватьЭлементы Или ЭтоДопСоглашение;
	
	Элементы.ДекорацияНомерДоговора.Заголовок   = ?(ЭтоДопСоглашение, "Доп. согл. №", "Договор №");
	Элементы.ЗаполнитьНомерДоговора.Видимость   = Не ЭтоДопСоглашение И РедактироватьНомерПоКнопке;
	//Элементы.ЗаполнитьНомерДоговора.Доступность = Не ЗаблокироватьЭлементы;
			
КонецПроцедуры
            
&НаСервере
Процедура ПроверитьШаблоныЗаполненияРеквизитов(ИмяРеквизита)

	Если ЗначениеЗаполнено(Объект.ОсновнойДоговор) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСтруктурыШаблона = "СтруктураШаблона_" + ИмяРеквизита;
	
	// Поиск сохраненной структуры шаблона.
	Если фСтруктураШаблоновЗаполненияРеквизитов = Неопределено Тогда
		фСтруктураШаблоновЗаполненияРеквизитов = Новый Структура;
	КонецЕсли;
	Если Не фСтруктураШаблоновЗаполненияРеквизитов.Свойство(ИмяСтруктурыШаблона) Тогда
		фСтруктураШаблоновЗаполненияРеквизитов.Вставить(ИмяСтруктурыШаблона);	
	КонецЕсли;
	СохрСтруктураШаблона = фСтруктураШаблоновЗаполненияРеквизитов[ИмяСтруктурыШаблона];
	
	// Поиск новой структуры шаблона.
	НовСтруктураШаблона = Справочники.бит_ШаблоныЗаполненияРеквизитов.СформироватьСтруктуруПараметровШаблона(Объект, ИмяРеквизита);
	Если НовСтруктураШаблона = Неопределено Тогда
		
		Элементы.НомерДоговора.ТолькоПросмотр     = Ложь;
		Элементы.ЗаполнитьНомерДоговора.Видимость = Ложь;
		
		Если СохрСтруктураШаблона <> Неопределено Тогда
			// Очистка сохраненной структуры.
			фСтруктураШаблоновЗаполненияРеквизитов.Вставить(ИмяСтруктурыШаблона, НовСтруктураШаблона);
			// Очистка значения реквизита.
			Объект[ИмяРеквизита] = "";
		КонецЕсли;   	
				
	Иначе
		
		Элементы.НомерДоговора.ТолькоПросмотр     = Истина;
		Элементы.ЗаполнитьНомерДоговора.Видимость = Истина;
		
		Если СохрСтруктураШаблона = Неопределено Тогда
			// Заполнение сохраненной структуры.
			фСтруктураШаблоновЗаполненияРеквизитов.Вставить(ИмяСтруктурыШаблона, НовСтруктураШаблона);
			Если ЗначениеЗаполнено(Объект.НомерДоговора) Тогда
				ЗапомнитьЗначенияЗначимыхРеквизитов(ИмяРеквизита);			
			КонецЕсли;
		Иначе
			Если СохрСтруктураШаблона.ШаблонСсылка <> НовСтруктураШаблона.ШаблонСсылка Тогда
				// Заполнение сохраненной структуры.
				фСтруктураШаблоновЗаполненияРеквизитов.Вставить(ИмяСтруктурыШаблона, НовСтруктураШаблона);
				// Очистка значения реквизита.
				Объект[ИмяРеквизита] = "";
			КонецЕсли;
		КонецЕсли;	
				
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗначениеРеквизитаПоШаблону(ИмяРеквизита)

	СтруктураШаблона = фСтруктураШаблоновЗаполненияРеквизитов["СтруктураШаблона_" + ИмяРеквизита];
	
  	ЗначениеРезультат = Справочники.бит_ШаблоныЗаполненияРеквизитов.СформироватьЗначениеРеквизитаПоШаблону(Объект, ИмяРеквизита, СтруктураШаблона);
	Объект[ИмяРеквизита] = ЗначениеРезультат;
	
	Если СтруктураШаблона <> Неопределено Тогда
		ЗапомнитьЗначенияЗначимыхРеквизитов(ИмяРеквизита);
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ЗапомнитьЗначенияЗначимыхРеквизитов(ИмяРеквизита)

	Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШаблона = фСтруктураШаблоновЗаполненияРеквизитов["СтруктураШаблона_" + ИмяРеквизита];
	Если СтруктураШаблона <> Неопределено Тогда
		
		СтруктураЗначимыхРеквизитов = СтруктураШаблона.СтруктураЗначимыхРеквизитов;

		СтруктураЗначимыхРеквизитов = фСтруктураШаблоновЗаполненияРеквизитов["СтруктураШаблона_" + ИмяРеквизита].СтруктураЗначимыхРеквизитов;
		Справочники.бит_ШаблоныЗаполненияРеквизитов.ЗапомнитьЗначенияЗначимыхРеквизитов(Объект, СтруктураЗначимыхРеквизитов);
	
	КонецЕсли;
  	
КонецПроцедуры

&НаСервере
Функция ИзмененыЗначимыеРеквизиты(ИмяРеквизита, ПредставлениеЗаполняемогоРеквизита = Неопределено)

	Изменены = Ложь;
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		 	
		СтруктураШаблона = фСтруктураШаблоновЗаполненияРеквизитов["СтруктураШаблона_" + ИмяРеквизита];
		Если СтруктураШаблона <> Неопределено Тогда
			
			СтруктураЗначимыхРеквизитов = СтруктураШаблона.СтруктураЗначимыхРеквизитов;
		
			Изменены = Справочники.бит_ШаблоныЗаполненияРеквизитов.ПроверитьИзмененияЗначимыхРеквизитов(Объект
								, СтруктураЗначимыхРеквизитов
								, ПредставлениеЗаполняемогоРеквизита);
			
		КонецЕсли;
							
	КонецЕсли;
	
	Возврат Изменены;

КонецФункции

// Процедура проверяет значение куратора договора со стороны контрагента.
// 
&НаСервере
Процедура ПроверитьКуратораДоговораСоСтороныКонтрагента()
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
	 	Если Объект.КураторДоговораСоСтороныКонтрагента.ОбъектВладелец <> Объект.Контрагент Тогда	
			Объект.КураторДоговораСоСтороныКонтрагента = Неопределено;                     	
		КонецЕсли;
	ИначеЕсли бит_ОбщегоНазначения.ЭтоСемействоУПП() Тогда	
	    Если Объект.КураторДоговораСоСтороныКонтрагента.Владелец <> Объект.Контрагент Тогда	
			Объект.КураторДоговораСоСтороныКонтрагента = Неопределено;                     	
		КонецЕсли;
	КонецЕсли;  	
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти


// +СБ. Кузнецова С. 2014-09-05 

// Процедура - обработчик события "ПриИзменении" поля ввода "СБ_ДоговорКонтрагента"
//
&НаКлиенте
Процедура СБ_ДоговорКонтрагентаПриИзменении(Элемент)
	
	Ответ = Вопрос("Заполнить документ данными договора?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПроектДоговораПоДоговору();
		УстановитьНастройкиДоступностиЭлементов();
		ЗаполнитьПараметрыФинансовогоДоговора(Объект.СпособРасчетаФинПлатежей);
		бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ЗначенияПараметровФинДоговоров,ЗначенияПараметровФинДоговоров.ПолучитьЭлементы(),Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПроектДоговораПоДоговору()
	
	ПроектОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПроектДоговора"));
	ОК_ОбщегоНазначения.ЗаполнитьПроектДоговораПоДоговору(ПроектОбъект, Объект.СБ_ДоговорКонтрагента, Ложь);
	ЗначениеВДанныеФормы(ПроектОбъект, Объект);
	
КонецФункции

// Процедура - обработчик события "ПриИзменении" признака "СБ_Захеджировано"
//
&НаКлиенте
Процедура СБ_ЗахеджированоПриИзменении(Элемент)
	
	Если Не Объект.СБ_Захеджировано Тогда
		Объект.СБ_КонтрагентХеджирования = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.СБ_ДоговорыХеджирования.Очистить();
	КонецЕсли;
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "СБ_ТипКредитногоДоговора"
//
&НаКлиенте
Процедура СБ_ТипКредитногоДоговораПриИзменении(Элемент)
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "СБ_ДоговорКонтрагента"
//
&НаКлиенте
Процедура СБ_ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// +СБ. Кузнецова С. 2014-09-17 
	//ФормаВыбора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора");
	ФормаВыбора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", , Элемент);
	// -СБ. Кузнецова С.
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Владелец", Объект.Контрагент, ВидСравненияКомпоновкиДанных.Равно);
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Организация", Объект.Организация, ВидСравненияКомпоновкиДанных.Равно);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "СБ_ДоговорХеджирования"
// 	табличной части "Договоры хеджирования"
&НаКлиенте
Процедура СБ_ДоговорыХеджированияДоговорХеджированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", , Элемент);
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Владелец", Объект.СБ_КонтрагентХеджирования, ВидСравненияКомпоновкиДанных.Равно);
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(ФормаВыбора.Список, "Организация", Объект.Организация, ВидСравненияКомпоновкиДанных.Равно);
	ФормаВыбора.Открыть();
	
КонецПроцедуры
// -СБ. Кузнецова С.
