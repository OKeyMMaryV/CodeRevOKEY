#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных
    
Перем мНастройкиПрограммы Экспорт; // Хранит настройки БИТ.

Перем мИгнорироватьЗапись Экспорт; // Хранит признак того, что статус в данной транзакции уже установлен.

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

Перем мБылПроведен; // Служит для передачи признака проведения между обработчиками.

Перем мРежимЗаписи; // Служит для передачи режима записи между обработчиками.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнятьДаннымиПоУмолчанию = Истина;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_ПроектДоговора")  Тогда
		
		// Заполнение по документу - основанию (По основному проекту договора).
		НезаполняемыеРеквизиты = "Дата, Номер, Ссылка, Проведен, ПометкаУдаления,
								 |НомерДоговора, ДатаДоговора, Наименование, СрокДействия,
								 |СуммаВзаиморасчеты, СуммаНДСВзаиморасчеты, 
								 |ОсновнойДоговор, Ответственный";
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , НезаполняемыеРеквизиты);
		
		ОсновнойДоговор = ДанныеЗаполнения.Ссылка;
		
		Для каждого СтрТч Из ДанныеЗаполнения.СтатьиОборотов Цикл
			НовСтрТч = СтатьиОборотов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрТч, СтрТч);				
		КонецЦикла;
		
		ЗаполнятьДаннымиПоУмолчанию = Ложь;
		
		Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента(Неопределено, ЗаполнятьДаннымиПоУмолчанию);
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда  
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Обновим реквизиты договора.
	ОбновитьРеквизитыДоговора(Отказ);
	
	Если НЕ Отказ Тогда
		
		// Заполним перечень виз
		Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ мБылПроведен Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Организация);
			СтруктураПараметров.Вставить("ЦФО"					   ,ЦФО);		
			бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
			
		КонецЕсли; 
		УстановитьСтатус(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	бит_ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
		
	// Установка настроек обязательности реквизитов
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.ПроектДоговора_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	// Проверим допустимость отмены проведения 
	РезСтруктура   		  = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	мДатаИзмененияСтатуса = РезСтруктура.Дата;
	
	
	// Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ПроектДоговора_Утвержден Тогда.
	// 	
	// 	ТекстСообщения = "Документ в статусе """ + СокрЛП(мТекущийСтатус) + """, отмена проведения не возможна!";
	// 	Заголовок      = "Отмена проведения документа: " + СокрЛП(Ссылка);
	// 	бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);
	// 	
	// КонецЕсли; 
	
	Если НЕ Отказ Тогда  		
		// Очистим визы
		бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);         		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мБылПроведен = Проведен;
	мРежимЗаписи = РежимЗаписи;
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ЦФО"		  , ЦФО);

	мНастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Дата ,, СтруктураПараметров, "Ошибки");	
	
    Если Не Отказ Тогда        
        // Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
        бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);        
	КонецЕсли;
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
	// * Проверка на наличие недопустимых пар ЦФО/СтатьяОборотов
	// Заголовок = "Проверка прав доступа:";	
	// бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект,Распределение,"Распределение",Заголовок,Отказ);

	// Проверка уникальности номера договора
	// добавить проверку на периодичность, организацию.
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//Если Не ЗначениеЗаполнено(ОсновнойДоговор) Тогда
	//	Справочники.бит_ШаблоныЗаполненияРеквизитов.ПроверитьУникальностьРеквизитаДляДокумента(ЭтотОбъект, "НомерДоговора", Отказ);
	//КонецЕсли;                                                                                                                     	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
	
	Если НЕ Отказ Тогда
		
		Если мРежимЗаписи <> РежимЗаписиДокумента.Проведение  Тогда 			
			УстановитьСтатус(мРежимЗаписи);   			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерДоговора     = "";
	СостояниеДоговора = Неопределено;
	СтадияДоговора    = Неопределено;
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция получает список статей, принадлежащих данному ЦФО.
// 
// Параметры:
//  ВыводитьСообщения - Булево.
//  ИндексСтроки 	  - Число, по умолчанию Неопределено.
// 
Функция ПолучитьСписокСтатейПоПринадлежностиМодуль(ВыводитьСообщения = Ложь, ИндексСтроки = Неопределено) Экспорт
	
	ПараметрЦФО = ЦФО;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"       		, Дата);
	СтруктураПараметров.Вставить("ЦФО"        		, ПараметрЦФО);
	СтруктураПараметров.Вставить("Организация"		, Организация);
	// СтруктураПараметров.Вставить("РасходДоход"		, Перечисления.бит_РасходДоход.Расходование);
	// СтруктураПараметров.Вставить("ТипСтатьи"  		, Перечисления.бит_ТипыСтатейОборотов.БДР);
	СтруктураПараметров.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	СписокСтатей = бит_Казначейство.ПолучитьСписокСтатейПоПринадлежности(СтруктураПараметров);
	
	Возврат СписокСтатей;
	
КонецФункции // ПолучитьСписокСтатейПоПринадлежностиМодуль()

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	Если Дата = Дата("00010101") Тогда
		ДатаКурса = ТекущаяДата();
	Иначе
		ДатаКурса = Дата;
	КонецЕсли;
	
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов,ДатаКурса);
	КурсВзаиморасчетов 		= СтрКурса.Курс;
	КратностьВзаиморасчетов = СтрКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура получает статус объекта.
// 
// Параметры:
//  Нет.
// 
Процедура ПолучитьСтатусМодуль()  Экспорт
	
	// Получаем статус и дату изменения статуса для документа.
	РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	
	мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус)
					  		 ,РезСтруктура.Статус
					  		 ,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
							  
	мДатаИзмененияСтатуса = РезСтруктура.Дата;
	
КонецПроцедуры // ПолучитьСтатусМодуль()

// Функция определяет текущий статус документа.
// 
// Параметры:
//  ТекущийОбъект    - ДокументСсылка.бит_ЗаявкаНаЗатраты.
//  НачальныйСтатус  - текущее значение статуса.
//  ВсеВизыПолучены  - Булево.
//  ЕстьОтклонено    - Булево.
// 
// Возвращаемое значение:
//   РезСтатус   - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция ОпределитьСтатусДокумента(ТекущийОбъект, НачальныйСтатус, РежимЗаписи, ВсеВизыПолучены, ЕстьОтклонено) Экспорт

	РезСтатус = НачальныйСтатус;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Запись И ТекущийОбъект.Проведен) Тогда
		РезСтатус = Справочники.бит_СтатусыОбъектов.ПроектДоговора_Рабочий;
	Иначе
		РезСтатус = Справочники.бит_СтатусыОбъектов.ПроектДоговора_Черновик;
	КонецЕсли; 
	
	Если РезСтатус = Справочники.бит_СтатусыОбъектов.ПроектДоговора_Рабочий Тогда
		
		Если ЕстьОтклонено Тогда
			
			РезСтатус = Справочники.бит_СтатусыОбъектов.ПроектДоговора_Отклонен;
			
		Иначе	
			
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.ПроектДоговора_Утвержден;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.ПроектДоговора_Рабочий;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
  	Возврат РезСтатус;
  
КонецФункции // ОпределитьСтатус()

// Процедура устанавливает статус.
// 
// Параметры:
//  вхРежимЗаписи			 - РежимЗаписиДокумента.
//  вхСтруктураЗатрат		 - Структура.
//  вхСинхронизироватьЗатраты - Булево. По умолчанию Истина.
// 
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено) Экспорт
						  
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
						  
						  
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
		
		
		Если вхРежимЗаписи = Неопределено Тогда
			 РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			 РежимЗаписи = вхРежимЗаписи;
		КонецЕсли; 
		
		// Вычислим переменные, необходимые для установки статуса.
		ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);		
		
		// Определим статус 
		Статус = ОпределитьСтатусДокумента(ЭтотОбъект,мТекущийСтатус,РежимЗаписи,ВсеВизыПолучены, ЕстьОтклонено);
		
		
		// Если статус изменился - запишем его
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,мТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				
				мТекущийСтатус = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));	
			
        РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСтатус()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет шапку документа.
// 
// Параметры:
//  ПараметрОбъектКопирования   - ДокументОбъект.бит_ПроектДоговора.
//  ЗаполнятьДаннымиПоУмолчанию - Булево (По умолчанию = Истина).
// 
Процедура ЗаполнитьШапкуДокумента(ПараметрОбъектКопирования = Неопределено, ЗаполнятьДаннымиПоУмолчанию = Истина)
	
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		СуммаВключаетНДС 		 = Истина;
		ВключатьВРеестрДоговоров = Истина;
		
		Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			
			ВалютаВзаиморасчетов    = мВалютаРегламентированногоУчета;
			КурсВзаиморасчетов      = 1;
			КратностьВзаиморасчетов = 1;			
			
		КонецЕсли; 
		
		СтавкаНДС = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновнаяСтавкаНДС", ТекПользователь);
		Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПодразделениеОрганизации = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновноеПодразделениеОрганизации", ТекПользователь);

		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе // Документ скопирован.
		
		СпособРасчетаПлатежей = Неопределено;
		
		ИзменениеВалютыМодуль();
		
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	Если ЗаполнятьДаннымиПоУмолчанию Тогда
		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, ТекПользователь, ПараметрОбъектКопирования);
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

Процедура ОбновитьРеквизитыДоговора(Отказ)
		
	ДоговорКонтрагента = бит_ДоговораСервер.НайтиДоговорКонтрагентаПоПроектуДоговора(Ссылка);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ТребуетсяОбновлениеДоговора(ДоговорКонтрагента) Тогда		
		
		ОбъектДоговора = ДоговорКонтрагента.ПолучитьОбъект();
		Попытка
			ОбъектДоговора.Заблокировать();
		Исключение
			ТекстСообщения = Нстр("ru = 'Не удалось заблокировать для изменения договор %1!
								 |Возможно, он редактируется другим пользоватем.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(ДоговорКонтрагента)); 
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		бит_ДоговораСервер.ЗаполнитьДоговорКонтрагентаПоПроектуДополнительные(ОбъектДоговора, Ссылка);
		Если ОбъектДоговора.ПроверитьЗаполнение() Тогда
			Попытка
				ОбъектДоговора.Записать();
			Исключение
				ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		Иначе
			ТекстСообщения = Нстр("ru = 'При записи договора произошли ошибки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектДоговора, , ,Отказ);
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Определяет необходимость обновления реквизитов договора.
//
// Параметры:
//  ДоговорКонтрагента	 - СравочникСсылка.ДоговорыКонтрагентов.
// 
// Возвращаемое значение:
//  Результат - булево. 
//
Функция ТребуетсяОбновлениеДоговора(ДоговорКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор",ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Проект", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договор.бит_ПроектДоговора.Ссылка КАК ПроектСсылка,
	|	Договор.Ссылка КАК ДоговорСсылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Договор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ПроектДоговора КАК ПроектДоговора
	|		ПО Договор.бит_ПроектДоговора = ПроектДоговора.Ссылка
	|			И Договор.бит_ДержательДоговора = ПроектДоговора.ДержательДоговора
	|			И Договор.бит_НачалоПлановое = ПроектДоговора.НачалоПлановое
	|			И Договор.бит_ОкончаниеПлановое = ПроектДоговора.ОкончаниеПлановое
	|			И Договор.бит_ФактическоеНачало = ПроектДоговора.ФактическоеНачало
	|			И Договор.бит_ФактическоеОкончание = ПроектДоговора.ФактическоеОкончание
	|			И Договор.бит_СостояниеДоговора = ПроектДоговора.СостояниеДоговора
	|			И Договор.бит_СтадияДоговора = ПроектДоговора.СтадияДоговора
	|			И Договор.бит_ШтрафнойПроцентОтСуммыЗаПериод = ПроектДоговора.ШтрафнойПроцентОтСуммыЗаПериод
	|			И Договор.бит_ШтрафнаяСуммаЗаПериод = ПроектДоговора.ШтрафнаяСуммаЗаПериод
	|			И Договор.бит_БазовыйПериодИсчисленияПериода = ПроектДоговора.БазовыйПериодИсчисленияПериода
	|			И ((ВЫРАЗИТЬ(Договор.бит_ПредметДоговора КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(ПроектДоговора.ПредметДоговора КАК СТРОКА(1000))))
	|			И ((ВЫРАЗИТЬ(Договор.бит_ОписаниеРабот КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(ПроектДоговора.ОписаниеРабот КАК СТРОКА(1000))))
	|			И Договор.бит_ОсновнаяСтатьяОборотов = ПроектДоговора.ОсновнаяСтатьяОборотов
	|			И Договор.бит_ЦФО = ПроектДоговора.ЦФО
	|			И Договор.бит_Проект = ПроектДоговора.Проект
	|			И Договор.бит_СуммаДоговора = ПроектДоговора.СуммаВзаиморасчеты
	|			И Договор.бит_ТипДоговора = ПроектДоговора.ТипДоговора
	|			И Договор.бит_НаправлениеДоговора = ПроектДоговора.НаправлениеДоговора
	|			И Договор.бит_ПодразделениеОрганизации = ПроектДоговора.ПодразделениеОрганизации
	|			И Договор.бит_ВключатьВРеестрДоговоров = ПроектДоговора.ВключатьВРеестрДоговоров
	|			И Договор.бит_КураторДоговора = ПроектДоговора.КураторДоговора
	|			И Договор.бит_КураторДоговораСоСтороныКонтрагента = ПроектДоговора.КураторДоговораСоСтороныКонтрагента
	|			И Договор.бит_СпособРасчетаФинПлатежей = ПроектДоговора.СпособРасчетаФинПлатежей
	|			И Договор.бит_Ответственный = ПроектДоговора.Ответственный
	|			И Договор.СрокДействия = ПроектДоговора.СрокДействия
	|ГДЕ
	|	Договор.Ссылка = &Договор
	|	И ПроектДоговора.Ссылка = &Проект";
	
	Результат = Запрос.Выполнить().Пустой();
	
	Возврат Результат;

КонецФункции
 
#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

ПолучитьСтатусМодуль();

мИгнорироватьЗапись = Ложь;

РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
мТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

мНастройкиПрограммы = Новый Соответствие;

мРежимОбновленияВиз = Константы.бит_РежимОбновленияПеречняВиз.Получить();

#КонецОбласти

#КонецЕсли
