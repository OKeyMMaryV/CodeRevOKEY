////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция выполняет вызов серверной функции по синхронизации значения реквизита РучнаяКорректировка
// при корректировки движений через обработку "Результат проведения".
//
// Параметры:
//  РучнаяКорректировка - Булево.
//
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаКлиенте 
Функция ВыполнитьСинхронизациюРучнойКорректировки(РучнаяКорректировка) Экспорт
	
	ДействиеВыполнено = СинхронизироватьРучнуюКорректировку(РучнаяКорректировка);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	Возврат ДействиеВыполнено;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// бит_AMuntyan Процедура устанвливает параметры выбора для элементов формы. 
//
// Параметры:
//  МассивЭлементов – Массив.
//
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.СчетРасходов);
	МассивЭлементов.Добавить(Элементы.СчетДоходов);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// бит_DKravchenko Процедура обрабатывает изменение субконто.
//
// Параметры:
//  Контейнер        - Произвольный.
//  ЗначениеСубконто - Произвольный. Текущее значение субконто.
//  ИмяСубконтоСчета - Строка. / "СубконтоРасходов" / "СубконтоДоходов" /.
//
&НаКлиенте
Процедура ИзменениеСубконто(Контейнер, ЗначениеСубконто, ИмяСубконтоСчета)

	КоличествоСубконто = фКэшЗначений.КоличествоСубконто;
	СтруктураСубконто  = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер
																				 ,ИмяСубконтоСчета
																				 ,КоличествоСубконто);
																				
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто
													 ,ИмяСубконтоСчета
													 ,ЗначениеСубконто
													 ,КоличествоСубконто);
													 
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто
															,Контейнер
															,ИмяСубконтоСчета
															,""
															,КоличествоСубконто);

КонецПроцедуры // ИзменениеСубконтоСубконтоРасходов()

// бит_DKravchenko Процедура обрабатывает начало выбора субконто.
//
// Параметры:
//  Элемент              - ЭлементУправления.
//  СтандартнаяОбработка - Булево.
//  Контейнер            - Произвольный.
//  ЗначениеСубконто     - Произвольный.
//  ИмяСубконтоСчета     - Строка. / "СубконтоРасходов" / "СубконтоДоходов" /.
//
&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент
							  ,СтандартнаяОбработка
							  ,Контейнер
							  ,ЗначениеСубконто
							  ,ИмяСубконтоСчета)
	
	КоличествоСубконто   = фКэшЗначений.КоличествоСубконто;
	ИсключитьОрганизацию = ?(Объект.ОбъектСистемы = фРегБухБюджетирование, Истина, Ложь);
	СтруктураПараметров  = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                     ,Объект
																						 ,ИмяСубконтоСчета
																						 ,ЗначениеСубконто
																						 ,КоличествоСубконто
																						 ,ИсключитьОрганизацию);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
		
	Иначе
		
		// Если это не регистр бюджетирования, тогда
		Если Не Объект.ОбъектСистемы = фРегБухБюджетирование Тогда
			ЗначениеОрганизация = Объект.Организация;
		Иначе
			ЗначениеОрганизация = Неопределено;
		КонецЕсли;
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                   ,СтандартнаяОбработка
																	   ,ЗначениеСубконто
																	   ,ЗначениеОрганизация
																	   ,СтруктураПараметров);
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконтоРасходов()

// бит_AMuntyan Обработка выбора объекта системы. 
//
// Параметры:
//  ВыбранноеЗначение – СправочникСсылка.бит_ОбъектыСистемы.
//
&НаКлиенте
Процедура ВыборОбъектСистемы(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		Объект.ОбъектСистемы = ВыбранноеЗначение.Значение;
		ИзменениеОбъектСистемыСервер();
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры // ВыборОбъектСистемы() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устнавливает заголовок формы документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	ДопТекстЗаголовка = "";
	
	Если Не Элементы.ОбъектСистемы.Видимость Тогда
		
		Если Объект.ОбъектСистемы = фРегБухМеждународный Тогда
			ДопТекстЗаголовка = "МСФО";
			
		ИначеЕсли Объект.ОбъектСистемы = фРегБухБюджетирование Тогда
			ДопТекстЗаголовка = "Бюджетирование";
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , ДопТекстЗаголовка);
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// бит_DKravchenko Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Если Не ЗначениеЗаполнено(фОбъектСистемыИзСписка) 
	//	И ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ТаблицаФормы") 
	//	И ЭтаФорма.ВладелецФормы.Родитель.ИмяФормы = "Документ.бит_ПереоценкаВалютныхДенежныхСтатей.Форма.ФормаСпискаУправляемая"
	//	И ЭтаФорма.ВладелецФормы.Родитель.фФормаСпискаОткрытаСОтбором Тогда
	//	Элементы.ОбъектСистемы.Видимость = Ложь;
	//КонецЕсли;
	//
	//// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	//УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// бит_DKravchenko Процедура - обработчик события "НачалоВыбора" поля ввода "ОбъектСистемы".
// 
&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	ИзменениеОбъектСистемыСервер();
	
КонецПроцедуры

// бит_DKravchenko Процедура - обработчик события "НачалоВыбора" поля ввода "ОбъектСистемы".
// 
&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеВыбор = Новый ОписаниеОповещения("ВыборОбъектСистемы", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбор, фСписокРегистров, Элемент);
	
	//ВыбранноеЗначение = ВыбратьИзСписка(фСписокРегистров, Элемент, фСписокРегистров.НайтиПоЗначению(Объект.ОбъектСистемы));

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзменениеОрганизацииСервер();
	
КонецПроцедуры

// бит_DKravchenko Процедура - обработчик события "ПриИзменении" поля ввода "СчетРасходов".
//
&НаКлиенте
Процедура СчетРасходовПриИзменении(Элемент)
	
	ИзменениеСчетРасходовСервер();
	
КонецПроцедуры

// бит_DKravchenko Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоРасходов_<i>".
//
&НаКлиенте
Процедура СубконтоРасходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконто(Объект, ЗначениеСубконто, "СубконтоРасходов");
	
КонецПроцедуры

// бит_DKravchenko Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоРасходов_<i>".
//
&НаКлиенте
Процедура СубконтоРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто, "СубконтоРасходов");
   
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	ИсключитьОрганизацию = ?(Объект.ОбъектСистемы = фРегБухБюджетирование, Истина, Ложь);	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоРасходов"
													 , ЗначениеСубконто
													 , фКэшЗначений.КоличествоСубконто
													 , ИсключитьОрганизацию);
	
КонецПроцедуры

// бит_DKravchenko Процедура - обработчик события "ПриИзменении" поля ввода "СчетДоходов".
//
&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	
	ИзменениеСчетДоходовСервер();
	
КонецПроцедуры

// бит_DKravchenko Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоДоходов_<i>".
//
&НаКлиенте
Процедура СубконтоДоходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконто(Объект, ЗначениеСубконто, "СубконтоДоходов");
	
КонецПроцедуры

// бит_DKravchenko Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоДоходов_<i>".
//
&НаКлиенте
Процедура СубконтоДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто, "СубконтоДоходов");
   
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	ИсключитьОрганизацию = ?(Объект.ОбъектСистемы = фРегБухБюджетирование, Истина, Ложь);	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоДоходов"
													 , ЗначениеСубконто
													 , фКэшЗначений.КоличествоСубконто
													 , ИсключитьОрганизацию);
													 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Вызов механизма защиты.
	бит_ЛицензированиеБФCервер.ПроверитьВозможностьРаботы(ЭтаФорма, МетаданныеОбъекта.ПолноеИмя(), Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ЗначенияЗаполнения.Свойство("ОбъектСистемы", фОбъектСистемыИзСписка);
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Заполним значения реквизитов формы.
	МетаРегБухБюджетирование = Метаданные.РегистрыБухгалтерии.бит_Бюджетирование;
	МетаРегБухМеждународный  = Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2;
	//БИТ Тртилек 19.01.2012
	МетаРегБухИК             = Метаданные.РегистрыБухгалтерии.бит_Дополнительный_3;
	///БИТ Тртилек
	
	фРегБухБюджетирование = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегБухБюджетирование);
	фРегБухМеждународный  = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегБухМеждународный);
	//БИТ Тртилек 19.01.2012
	бит_фРегБухИК             = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегБухИК);
	///БИТ Тртилек
	
	// Сформируем список регистров бухгалтерии для выбора.
	ВидОбъектаРегБух = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии;
	
	фСписокРегистров = бит_УправленческийУчет.СформироватьСписокОбъектовДляВыбора(ВидОбъектаРегБух, "бит_Дополнительный");
	фСписокРегистров.Добавить(фРегБухБюджетирование
							 ,"Журнал проводок (бюджетирование)"
							 ,
							 ,БиблиотекаКартинок.РегистрБухгалтерии);
	
	// Отсортируем список регистров для выбора.
	фСписокРегистров.СортироватьПоПредставлению();
	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		
		ЭтоРегистрБюджетирования = ?(Объект.ОбъектСистемы = фРегБухБюджетирование, Истина, Ложь);
		
		Если ЗначениеЗаполнено(Объект.Сценарий)
			И Не ЭтоРегистрБюджетирования Тогда
			Объект.Сценарий = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Организация)
			И ЭтоРегистрБюджетирования Тогда
			Объект.Организация = Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			// Заполним сценарий при необходимости.
			ЗаполнитьСценарий();
			
			// Приведем тип значения счетов и субконто.
			ПривестиТипЗначенияСчетовИСубконто();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	// Установим связи субконто.
	УстановитьСвязиСубконто();
	
	// бит_AMuntyan изменение кода. Начало. 03.04.2014{{
	УстановитьПараметрыВыбораДляСчетов();
    // бит_AMuntyan изменение кода. Конец. 03.04.2014}}

	Объект.ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024");
	Элементы.ОбъектСистемы.Доступность = ЛОЖЬ;
	Элементы.ПереоценкаСуммаУпр.Видимость = Истина;
	Элементы.ПереоценкаСуммаУпр.Доступность = ЛОЖЬ;
	Элементы.ПереоценкаСуммаМу.Видимость = Ложь;
	Объект.ПереоценкаСуммаУпр = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// бит_DKravchenko Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  КэшированныеЗначения - Структура.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	//БИТ Тртилек 23.01.2012
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	///БИТ Тртилек
	
	// Получим и запишем количество субконто плана счетов регистра в кэш значений.
	ПолучитьИЗаписатьКоличествоСубконтоВКэшЗначений(КэшированныеЗначения);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// бит_DKravchenko Процедура осуществляет управление доступностью/видимостью элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОбъектСистемы.Видимость = Не ЗначениеЗаполнено(фОбъектСистемыИзСписка);
	
	ОбъектСистемы 			 = Объект.ОбъектСистемы;
	ЭтоРегистрБюджетирования = ОбъектСистемы = фРегБухБюджетирование;
	ЕстьОрганизация = бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация();	
	
	Элементы.Сценарий.Видимость	   = ЭтоРегистрБюджетирования;
	Элементы.Организация.Видимость = Не ЭтоРегистрБюджетирования ИЛИ ЕстьОрганизация;
	
	Элементы.ПереоценкаСуммаСценарий.Видимость = ЭтоРегистрБюджетирования;
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() И бит_ОбщегоНазначения.ЕстьРеквизит("ПереоценкаСуммаМУ", Метаданные.Документы.бит_ПересчетСтатейВВалютуПредставленияМСФО) Тогда
		//БИТ Тртилек 19.01.2012
		//Элементы.ПереоценкаСуммаМУ.Видимость = ОбъектСистемы = фРегБухМеждународный;
		Элементы.ПереоценкаСуммаМУ.Видимость = ОбъектСистемы = фРегБухМеждународный ИЛИ ОбъектСистемы = бит_фРегБухИК;
		Элементы.ПереоценкаСуммаУпр.Видимость= ОбъектСистемы = бит_фРегБухИК;
		///БИТ Тртилек
	КонецЕсли;
	
	Элементы.ГруппаСчета.Видимость = ЗначениеЗаполнено(ОбъектСистемы);
	
КонецПроцедуры // УправлениеЭлементамиФормы()

// Функция выполняет синхронизацию значения реквизита РучнаяКорректировка
// при корректировки движений через обработку "Результат проведения".
//
// Параметры:
//  РучнаяКорректировка - Булево.
//
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаСервере 
Функция СинхронизироватьРучнуюКорректировку(РучнаяКорректировка)
	
	ДокументОбъект 	  = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДействиеВыполнено = бит_ОбщегоНазначения.ВыполнитьСинхронизациюРучнойКорректировки(ДокументОбъект
																					  ,РучнаяКорректировка);
	
	Если ДействиеВыполнено Тогда
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	Иначе
		ДокументОбъект = Неопределено;
	КонецЕсли;
	
	Возврат ДействиеВыполнено;
	
КонецФункции // СинхронизироватьРучнуюКорректировку()

// бит_DKravchenko Процедура получает и записывает валюту международного учета в кэш значений.
//
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьКоличествоСубконтоВКэшЗначений(КэшированныеЗначения)
	
	Если ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		
		МатаданныеПланаСчетов = Метаданные.РегистрыБухгалтерии[Объект.ОбъектСистемы.ИмяОбъекта].ПланСчетов;
		КоличествоСубконто 	  = МатаданныеПланаСчетов.МаксКоличествоСубконто;
		
	Иначе
		КоличествоСубконто = 0;
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("КоличествоСубконто", КоличествоСубконто);
	
КонецПроцедуры // ПолучитьИЗаписатьКоличествоСубконтоВКэшЗначений()

// бит_DKravchenko Процедура заполняет сценарий, если он не заполнен и выбран регистр бюджетирования.
//
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьСценарий()
	
	Если Не ЗначениеЗаполнено(Объект.Сценарий)
		И Объект.ОбъектСистемы = фРегБухБюджетирование Тогда
		
		// Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
		ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
		
		// Заполним на предопределенный ФАКТ.
		Объект.Сценарий = Справочники[ИмяСправочникаСценарии].ФАКТ;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСценарий()

// Функция получает тип объекта.
//
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
//
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// бит_DKravchenko Процедура устанавливает связи субконто счета расхода и дохода.
//
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УстановитьСвязиСубконто()
	
	Если Не ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		Возврат
	КонецЕсли;
	
	КоличествоСубконто = фКэшЗначений.КоличествоСубконто;
	
	// Устанавливаем связи параметров выбора и связи по типу субконто для расходов.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетРасходов", "СубконтоРасходов", КоличествоСубконто);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходов, КоличествоСубконто);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоРасходов");
	
	// Устанавливаем связи параметров выбора и связи по типу субконто для доходов.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетДоходов", "СубконтоДоходов", КоличествоСубконто);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, КоличествоСубконто);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");
	
КонецПроцедуры // УстановитьСвязиСубконто()

// бит_DKravchenko Процедура выполняет действия необходимые при изменении Организации. Сервер.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	КоличествоСубконто = фКэшЗначений.КоличествоСубконто;
	
	бит_БухгалтерияСервер.ПроверитьСоответствиеОрганизации(Объект, "СубконтоРасходов", КоличествоСубконто);
	бит_БухгалтерияСервер.ПроверитьСоответствиеОрганизации(Объект, "СубконтоДоходов" , КоличествоСубконто);
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// бит_DKravchenko Процедура обрабатывает изменение объекта системы. Сервер.
//
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ИзменениеОбъектСистемыСервер()
	
	ЭтоРегистрБюджетирования = ?(Объект.ОбъектСистемы = фРегБухБюджетирование, Истина, Ложь);
	ЭтоРегистрМУ 			 = ?(Объект.ОбъектСистемы = фРегБухМеждународный , Истина, Ложь);
	//БИТ Тртилек 19.01.2012
	ЭтоРегистрИК 			 = ?(Объект.ОбъектСистемы = бит_фРегБухИК , Истина, Ложь);
	///БИТ Тртилек
	
	Если ЗначениеЗаполнено(Объект.Сценарий)
		И Не ЭтоРегистрБюджетирования Тогда
		Объект.Сценарий = Неопределено;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЭтоРегистрБюджетирования Тогда
		Объект.Организация = Неопределено;
	КонецЕсли;
	
	Если Объект.ПереоценкаСуммаСценарий
		И Не ЭтоРегистрБюджетирования Тогда
		Объект.ПереоценкаСуммаСценарий = Ложь;
	КонецЕсли;
		
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() И Объект.ПереоценкаСуммаМУ
		И Не ЭтоРегистрМУ 
		//БИТ Тртилек 19.01.2012 
		И НЕ ЭтоРегистрИК 
		/// БИТ Тртилек
		Тогда
		Объект.ПереоценкаСуммаМУ = Ложь;
	КонецЕсли;
	
	// Заполним сценарий при необходимости.
	ЗаполнитьСценарий();
	
	// Получим и запишем количество субконто плана счетов регистра в кэш значений.
	ПолучитьИЗаписатьКоличествоСубконтоВКэшЗначений(фКэшЗначений);
	
	// Приведем тип значения счетов и субконто.
	ПривестиТипЗначенияСчетовИСубконто();
	
	// Установим связи субконто.
	УстановитьСвязиСубконто();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	//БИТ Тртилек 19.01.2012 Проверим если ИК
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЭтоРегистрИК Тогда
		Объект.ПереоценкаСуммаМУ = Истина;
		Объект.ПереоценкаСуммаУпр = Ложь;
		Объект.ПереоценкаСуммаСценарий = Ложь;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры // ИзменениеОбъектСистемыСервер()

// бит_DKravchenko Процедура приводит тип значения счетов и субконто к типу плана счетов 
// выбранного регистра бухгалтерии.
//
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ПривестиТипЗначенияСчетовИСубконто()
	
	Если Не ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		
		Объект.СчетРасходов = Неопределено;
		Объект.СчетДоходов  = Неопределено;
		
	Иначе
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить("СчетРасходов");
		МассивСчетов.Добавить("СчетДоходов");
		
		// Получим пустую ссылку плана счетов выбранного регистра бухгалтерии.
		ИмяРегБух 	     = Объект.ОбъектСистемы.ИмяОбъекта;
		ИмяПланаСчетов   = Метаданные.РегистрыБухгалтерии[ИмяРегБух].ПланСчетов.Имя;
		СчетПустаяСсылка = ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка();
		
		Для Каждого ТекИмяРеквизитаСчета Из МассивСчетов Цикл
			
			ЗначениеСчета = Объект[ТекИмяРеквизитаСчета];
			
			Если ЗначениеСчета = Неопределено Тогда
				
				Объект[ТекИмяРеквизитаСчета] = СчетПустаяСсылка;
				
				Если ТекИмяРеквизитаСчета = "СчетРасходов" Тогда
					ИзменениеСчетРасходовСервер();
				Иначе
					ИзменениеСчетДоходовСервер();
				КонецЕсли;
				
			Иначе
				
				Если Не ТипЗнч(ЗначениеСчета) = ТипЗнч(СчетПустаяСсылка) Тогда
					
					// Найдем счет по коду ранее выбранного счета.
					СчетДляЗамены = ПланыСчетов[ИмяПланаСчетов].НайтиПоКоду(ЗначениеСчета.Код);
					
					Если ЗначениеЗаполнено(СчетДляЗамены) Тогда
						Объект[ТекИмяРеквизитаСчета] = СчетДляЗамены;
					Иначе
						Объект[ТекИмяРеквизитаСчета] = СчетПустаяСсылка;
					КонецЕсли;
					
					Если ТекИмяРеквизитаСчета = "СчетРасходов" Тогда
						ИзменениеСчетРасходовСервер();
					Иначе
						ИзменениеСчетДоходовСервер();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; // Если ЗначениеСчета = Неопределено Тогда
			
		КонецЦикла; // Для Каждого ТекИмяРеквизитаСчета Из МассивСчетов Цикл
		
	КонецЕсли; // Если Не ЗначениеЗаполнено(ОбъектСистемы) Тогда
	
КонецПроцедуры // ПривестиТипЗначенияСчетовИСубконто()

// бит_DKravchenko Процедура обрабатывает изменение счета "СчетРасходов". Сервер.
//
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеСчетРасходовСервер()
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходов, фКэшЗначений.КоличествоСубконто);
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоРасходов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоРасходов");
	
КонецПроцедуры // ИзменениеСчетРасходовСервер()

// бит_DKravchenko Процедура обрабатывает изменение счета "СчетДоходов". Сервер.
//
// Параметры:
//  Нет.
// 
//
&НаСервере
Процедура ИзменениеСчетДоходовСервер()
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, фКэшЗначений.КоличествоСубконто);
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоДоходов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");
	
КонецПроцедуры // ИзменениеСчетДоходовСервер()


// БИТ Тртилек 23.01.2012 Процедура обрабатывает изменение вида операции.
&НаСервере
Процедура ОбработатьИзменениеВидаОперацииСервер()



КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер() 

// БИТ Тртилек 23.01.2012 Формирует список видов операций для выбора вида операции перед созданием документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура СформироватьДеревоВидовОпераций()

	СформироватьДеревоВидовОперацийНаСервере();
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

&НаСервере
Функция СформироватьДеревоВидовОперацийНаСервере()
	
	ЭлементыДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = ЭлементыДерева.Добавить();
	СтрокаНовая.ВидОперации = "Доступные виды операций";
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекСтр Из фКэшЗначений.Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств Цикл
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекСтр.Значение;	
	КонецЦикла;

КонецФункции

// БИТ Меркулов 27.04.2014 / Команда дополнительных аналитик {
&НаКлиенте
Процедура Аналитики(Команда)
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Объект", Объект.Ссылка); 
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор"		   , СтруктураОтбор);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//ПараметрыФормы.Вставить("ТекущийОбъект", Объект.Ссылка);

	//ОткрытьФорму("Обработка.бит_РедактированиеДополнительныхАналитик.Форма"
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);

	ОткрытьФорму("ОбщаяФорма.бит_РедактированиеДополнительныхАналитик"
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	          , ПараметрыФормы
			  , Объект.Ссылка);

КонецПроцедуры
// }

