#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаМеждУчета Экспорт; // Хранит валюту международного учета

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Переменная, хранящее структуру шапки документа.
	Перем СтруктураШапкиДокумента;
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	// Подготовим структуру шапки документа.
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Получим структуру курсов валют.
	СтруктураКурсыВалют = ПолучитьСтруктуруКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим исторические курсы валют по каждому НМА.
	МассивНМА = НематериальныеАктивы.ВыгрузитьКолонку("НематериальныйАктив");
	МассивНМА = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивНМА);
	ИсторическиеКурсы = ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, СтруктураШапкиДокумента.Дата, СтруктураКурсыВалют);

	// Подготовим таблицы для возможности проведения.
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют);
	
	// Проверить заполнение таблиц.
	ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Пересчитаем Справедливую стоимость из валюты документа в валюту МСФО.
	ВыполнитьПересчетСправедливойСтоимости(СтруктураТаблиц.НМА);

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, ИсторическиеКурсы, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СтруктураНеДублирующихсяПолей = Новый Структура;
	СтруктураНеДублирующихсяПолей.Вставить("НематериальныйАктив");
	
	// Проверим наличие дублей в табличной части "НематериальныеАктивы".
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
																	 ,"НематериальныеАктивы"
																	 ,СтруктураНеДублирующихсяПолей
																	 ,Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура выполняет валютные пересчеты из валюты МУ в валюту документа.
// 
// Параметры:
//  ПараметрыОС
// 
Процедура ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыОС) Экспорт
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ВидыКурсов = Новый Структура("МУ, Документ");
	
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата,ВидыКурсов);
	
	МассивНМА = ПараметрыОС.ВыгрузитьКолонку("НематериальныйАктив"); 
	
	ТаблицаДанных = ПодготовитьТаблицуДатПринятияНМА(МассивНМА);
	ТаблицаПериодов = ТаблицаДанных.Скопировать(, "Период");
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсыВалют);
	
	СоответствиеКурсовИНМА = Новый Соответствие;
	
	Для каждого Строка Из ТаблицаДанных Цикл
		СоответствиеКурсовИНМА.Вставить(Строка.НематериальныйАктив, Курсы[Строка.Период])
	КонецЦикла; 

	Для Каждого Строка Из ПараметрыОС Цикл
		
		КурсыМУ 	  = СоответствиеКурсовИНМА[Строка.НематериальныйАктив].МУ;
		КурсыДокумент = СоответствиеКурсовИНМА[Строка.НематериальныйАктив].Документ;
		
		Строка.БалансоваяСтоимость = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Строка.БалансоваяСтоимость
																			  ,КурсыМУ.Валюта
																			  ,КурсыДокумент.Валюта
																			  ,КурсыМУ.Курс
																			  ,КурсыДокумент.Курс
																			  ,КурсыМУ.Кратность
																			  ,КурсыДокумент.Кратность);
		
	КонецЦикла;


	
КонецПроцедуры

// Процедура получает данные по НМА.
// 
// Параметры:
//  СписокНМА 		 - СправочникСсылка.ОсновныеСредства, массив.
//  ЭтоНовыйДокумент - Булево.
// 
Функция ПолучитьДанныеПонематериальнымАктивам(СписокНМА, ЭтоНовыйДокумент = Истина) Экспорт
	
	// Сформируем массив параметров НМА для получения.
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_НМА);
	
	// Сформируем структуру параметров для получения таблицы параметров НМА.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"		  , Организация);
	СтруктураПараметров.Вставить("НематериальныйАктив", СписокНМА);
	СтруктураПараметров.Вставить("МоментВремени"	  , ?(ЭтоНовыйДокумент, КонецДня(Дата), Ссылка.МоментВремени()));
	СтруктураПараметров.Вставить("ПараметрыВНА"		  , ПараметрыВНА);
	
	// Получим таблицу параметров НМА.
	ТаблицаПараметровНМА = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	
	// Получим массив счетов по НМА.
	МассивСчетовАмортизации 	  = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетНачисленияАмортизации_НМА");
	МассивСчетовСниженияСтоимости = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетСниженияСтоимости_НМА");
	МассивСчетовУчета 			  = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетУчета_НМА");
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовАмортизации	  , Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовСниженияСтоимости, Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета			  , Истина);
	
	Граница = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПараметров"      		 , ТаблицаПараметровНМА);  	
	Запрос.УстановитьПараметр("МоментВремени"				 , Граница);
		// ?(Параметры.Ключ.Пустая(),Объект.Дата,Объект.Ссылка.МоментВремени()));
	Запрос.УстановитьПараметр("МассивСчетовАмортизации"		 , МассивСчетовАмортизации);
	Запрос.УстановитьПараметр("МассивСчетовСниженияСтоимости", МассивСчетовСниженияСтоимости);
	Запрос.УстановитьПараметр("МассивСчетовУчета"			 , МассивСчетовУчета);
	Запрос.УстановитьПараметр("СубконтоНМА"					 , ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.НематериальныеАктивы);
	Запрос.УстановитьПараметр("Организация"					 , Организация);
	Запрос.УстановитьПараметр("СписокНМА"					 , СписокНМА);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПараметров.ВНА КАК НематериальныйАктив,
	|	ТаблицаПараметров.Класс_НМА КАК Класс
	|ПОМЕСТИТЬ ТаблицаПараметров
	|ИЗ
	|	&ТаблицаПараметров КАК ТаблицаПараметров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПараметров.НематериальныйАктив,
	|	ЕСТЬNULL(СтоимостьНМА_МУ.СуммаМУОстатокДт, 0) - ЕСТЬNULL(АмортизацияНМА_МУ.СуммаМУОстатокКт, 0) - ЕСТЬNULL(ФактОбесценениеНМА_МУ.СуммаМУОстатокКт, 0) КАК БалансоваяСтоимость,
	|	бит_му_ПараметрыКлассовВНА.СчетДоходовОтОбесценения КАК СчетДоходаОтПереоценки,
	|	бит_му_ПараметрыКлассовВНА.СчетРасходовОтОбесценения КАК СчетРасходаОтПереоценки
	|ИЗ
	|	ТаблицаПараметров КАК ТаблицаПараметров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыКлассовВНА КАК бит_му_ПараметрыКлассовВНА
	|		ПО ТаблицаПараметров.Класс = бит_му_ПараметрыКлассовВНА.Класс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовСниженияСтоимости),
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК ФактОбесценениеНМА_МУ
	|		ПО ТаблицаПараметров.НематериальныйАктив = ФактОбесценениеНМА_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовУчета),
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК СтоимостьНМА_МУ
	|		ПО ТаблицаПараметров.НематериальныйАктив = СтоимостьНМА_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовАмортизации),
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК АмортизацияНМА_МУ
	|		ПО ТаблицаПараметров.НематериальныйАктив = АмортизацияНМА_МУ.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПараметров";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТекущиеПараметры = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаТекущиеПараметры;
	
КонецФункции // ПолучитьДанныеПонематериальнымАктивам()

// Функция получает параметры, передаваемые в обработку подбора НМА.
//
Функция ЗаполнитьПараметрыПодбора() Экспорт
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("Организация"		  , Организация);                             
	ПараметрыПодбора.Вставить("Режим"			  , Перечисления.бит_му_РежимыПодбораВНА.ПереоценкаНМА);
	ПараметрыПодбора.Вставить("ДатаОкончания"	  , КонецМесяца(Дата));
	ПараметрыПодбора.Вставить("МодельУчета"		  , Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости);
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

// Процедура синхронизирует реквизиты строки НМА с аналитикой счетов.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции 
//					или ДокументТабличнаяЧастьСтрока.бит_му_ПереоценкаНМА.НематериальныеАктивы.
//  ИмяСубконто - Строка.
// 
Процедура СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, ИмяСубконто) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяСтрока.НематериальныйАктив) Тогда
		
		ТипНМА = Тип("СправочникСсылка.НематериальныеАктивы");
		
		Для Ном = 1 По мКоличествоСубконтоМУ Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипНМА Тогда
				ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.НематериальныйАктив;
			КонецЕсли; 
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиНМА()

// Процедура выполняет действия необходимые при изменении СчетаУчета.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции 
//					или ДокументТабличнаяЧастьСтрока.бит_му_ПереоценкаНМА.НематериальныеАктивы.
// 
Процедура ИзменениеСчетаДохода(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетДоходаОтПереоценки, мКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "СубконтоД");

	СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, "СубконтоД");
	
КонецПроцедуры // ИзменениеСчетаДохода()

// Процедура выполняет действия необходимые при изменении СчетаУчета.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции 
//					или ДокументТабличнаяЧастьСтрока.бит_му_ПереоценкаНМА.НематериальныеАктивы.
// 
Процедура ИзменениеСчетаРасхода(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетРасходаОтПереоценки, мКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "СубконтоР");

	СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, "СубконтоР");
	
КонецПроцедуры // ИзменениеСчетаРасхода()

// Процедура получает параметры нематериального актива.
// 
// Параметры:
//  ТекущаяСтрока 	 - СтрокаТабличнойЧасти.НематериальныеАктивы, массив НМА.
//  ЭтоДобавлениеНМА - Булево, по умолчанию Ложь.
//  ЭтоНовыйДокумент - Булево, по умолчанию Ложь.
// 
Процедура ПолучитьПараметрыНМА(ТекущаяСтрока, ЭтоДобавлениеНМА = Ложь, ЭтоНовыйДокумент = Истина) Экспорт

	ЭтоМассив = (ТипЗнч(ТекущаяСтрока) = Тип("Массив")); 	
	Если ЭтоМассив Тогда
		МассивНМА = ТекущаяСтрока;
	Иначе
		ТекущаяСтрока = НематериальныеАктивы[ТекущаяСтрока];
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		МассивНМА = ТекущаяСтрока.НематериальныйАктив;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивНМА) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана организация - данные по нематериальному активу не были заполнены.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 		
		Возврат;
	КонецЕсли;
	
	ТаблицаТекущиеПараметры = ПолучитьДанныеПонематериальнымАктивам(МассивНМА, ЭтоНовыйДокумент);
	
	// Пересчитаем балансовую стоимость из валюты МСФО в валюту документа.
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ТаблицаТекущиеПараметры);
	
	Если ЭтоМассив Тогда
		ТаблицаДляОбхода = НематериальныеАктивы;
	Иначе 		
		ТаблицаДляОбхода = Новый Массив;
		ТаблицаДляОбхода.Добавить(ТекущаяСтрока); 				
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаДляОбхода Цикл

		ИДТекСтроки = НематериальныеАктивы.Индекс(ТекСтрока);
		
		ТекущиеПараметрыНМА = ТаблицаТекущиеПараметры.Найти(ТекСтрока.НематериальныйАктив, "НематериальныйАктив");
		
		Если ТекущиеПараметрыНМА = Неопределено Тогда
			
			// Очистим реквизиты строки НМА.
			ОчиститьРеквизитыСтрокиНМА(ТекСтрока);
			
			ТекСтрока.СправедливаяСтоимость = 0;
			
		Иначе

			ТекСтрока.БалансоваяСтоимость     = ТекущиеПараметрыНМА.БалансоваяСтоимость;
			
			ТекСтрока.СчетДоходаОтПереоценки  = ТекущиеПараметрыНМА.СчетДоходаОтПереоценки;
			ТекСтрока.СчетРасходаОтПереоценки = ТекущиеПараметрыНМА.СчетРасходаОтПереоценки;
			
			ИзменениеСчетаДохода(ТекСтрока);
			ИзменениеСчетаРасхода(ТекСтрока);
			
			Если Не ЭтоДобавлениеНМА Тогда
				ТекстСообщения = НСтр("ru='Заполнение параметров для нематериального актива ""%1%"" выполнено.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекСтрока.НематериальныйАктив);												  
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;					
	
КонецПроцедуры // ПолучитьПараметрыНМА()

// Процедура заполняет табличную часть "НематериальныеАктивы".
// 
// Параметры:
// 	ВыбранноеЗначение - Структура.
// 
Процедура ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора(ВыбранноеЗначение) Экспорт
	
	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов, ОписаниеТаблицы.ПереченьОбъектов_Колонки);

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НематериальныйАктив", СтрокаТаблицы.ВНА);
		
		МассивСтрок = НематериальныеАктивы.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = НематериальныеАктивы.Добавить();
			НоваяСтрока.НематериальныйАктив = СтрокаТаблицы.ВНА;
			// Получим параметры по НМА.
			ИдСтроки = НематериальныеАктивы.Индекс(НоваяСтрока);
			ПолучитьПараметрыНМА(ИдСтроки, Истина);
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Нематериальный актив ""%1%"" уже подобран в строке №%2%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.ВНА, НайденнаяСтрока.НомерСтроки);									 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных
	
КонецПроцедуры // ЗаполнитьТчОсновныеСредстваПоДаннымПодбора()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, Организация
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	// Получим валюту международного учета.
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	ИзменениеВалютыМодуль();
		
	// Заполняет табличную часть "ОсновныеСредства"
	ВыбранноеЗначение = ВыполнитьПодборНМА();
	ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора(ВыбранноеЗначение);	

КонецПроцедуры // ЗаполнитьДокумент()

// Функция подготавливает таблицу дат принятия НМА.
// 
// Параметры:
//  МассивНМА - Массив
// 
// Возвращаемое значение:
//  ТаблицаЗначения
// 
Функция ПодготовитьТаблицуДатПринятияНМА(МассивНМА) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СостояниеПринято", Перечисления.бит_му_СостоянияНМА.ПринятоКУчету);
	Запрос.УстановитьПараметр("МассивНМА", МассивНМА);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_му_СостоянияНМА.НематериальныйАктив,
	|	бит_му_СостоянияНМА.ДатаСостояния КАК Период
	|ИЗ
	|	РегистрСведений.бит_му_СостоянияНМА КАК бит_му_СостоянияНМА
	|ГДЕ
	|	бит_му_СостоянияНМА.НематериальныйАктив В(&МассивНМА)
	|	И бит_му_СостоянияНМА.Состояние = &СостояниеПринято
	|	И бит_му_СостоянияНМА.Организация = &Организация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
		
КонецФункции

// Функция готовит таблицы документа для проведения.
// 
// Возвращаемое значение:
//   СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют)  Экспорт
	
	// Сформируем массив параметров НМА для получения.
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетРезерваПереоценки_НМА);
	
	// Сформируем структуру параметров для получения таблицы параметров НМА.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     	  , СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("НематериальныйАктив", СтруктураШапкиДокумента.СписокНМА);
	СтруктураПараметров.Вставить("МоментВремени"   	  , ?(ЭтоНовый(), КонецДня(СтруктураШапкиДокумента.Дата), МоментВремени()));
	СтруктураПараметров.Вставить("ПараметрыВНА"	   	  , ПараметрыВНА);
	
	// Получим таблицу параметров НМА.
	ТаблицаПараметровНМА = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	
	// Получим массив счетов по НМА.
	МассивСчетовСниженияСтоимости = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетСниженияСтоимости_НМА");
	МассивСчетовУчета 			  = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетУчета_НМА");
	МассивСчетовАмортизации 	  = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетНачисленияАмортизации_НМА");
	МассивСчетовРезерваПереоценки = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетРезерваПереоценки_НМА");
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовСниженияСтоимости, Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета			  , Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовАмортизации	  , Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовРезерваПереоценки, Истина);
	
	Граница = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПараметров"      		 , ТаблицаПараметровНМА);
	// Запрос.УстановитьПараметр("МоментВремени"				 , МоментВремени());
	Запрос.УстановитьПараметр("МоментВремени"				 , Граница);
	Запрос.УстановитьПараметр("НачалоПериода"                , НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("КонецПериода"                 , КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("МассивСчетовСниженияСтоимости", МассивСчетовСниженияСтоимости);
	Запрос.УстановитьПараметр("МассивСчетовУчета"			 , МассивСчетовУчета);
	Запрос.УстановитьПараметр("МассивСчетовАмортизации"		 , МассивСчетовАмортизации);
	Запрос.УстановитьПараметр("МассивСчетовРезерваПереоценки", МассивСчетовРезерваПереоценки);
	Запрос.УстановитьПараметр("Организация"					 , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокНМА"					 , СтруктураШапкиДокумента.СписокНМА);
	Запрос.УстановитьПараметр("СубконтоНМА"					 , ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СостояниеПринятоКУчету"		 , Перечисления.бит_му_СостоянияНМА.ПринятоКУчету);
	Запрос.УстановитьПараметр("СостояниеСнятоСУчета"  		 , Перечисления.бит_му_СостоянияНМА.СнятоСУчета);
	Запрос.УстановитьПараметр("Ссылка"						 , СтруктураШапкиДокумента.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПараметров.ВНА КАК НематериальныйАктив,
	|	ТаблицаПараметров.СчетСниженияСтоимости_НМА КАК СчетСниженияСтоимости,
	|	ТаблицаПараметров.НачислятьАмортизацию_НМА КАК НачислятьАмортизацию,
	|	ТаблицаПараметров.СчетНачисленияАмортизации_НМА КАК СчетНачисленияАмортизации,
	|	ТаблицаПараметров.СчетУчета_НМА КАК СчетУчета,
	|	ТаблицаПараметров.СчетРезерваПереоценки_НМА КАК СчетРезерваПереоценки,
	|	ТаблицаПараметров.Класс_НМА КАК Класс
	|ПОМЕСТИТЬ ТаблицаПараметров
	|ИЗ
	|	&ТаблицаПараметров КАК ТаблицаПараметров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервОбесценение_МУ.КорСубконто1 КАК НематериальныйАктив,
	|	СУММА(ЕСТЬNULL(РезервОбесценение_МУ.СуммаМУОборотДт, 0)) - СУММА(ЕСТЬNULL(РезервОбесценение_МУ.СуммаМУОборотКт, 0)) КАК СуммаРезерва_Обесценения
	|ПОМЕСТИТЬ РезервОбесценение_МУ
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
	|			,
	|			&МоментВремени,
	|			Регистратор,
	|			,
	|			,
	|			Организация = &Организация
	|				И КорСубконто1 В (&СписокНМА),
	|			КорСчет В (&МассивСчетовАмортизации),
	|			&СубконтоНМА) КАК РезервОбесценение_МУ
	|ГДЕ
	|	РезервОбесценение_МУ.Регистратор ССЫЛКА Документ.бит_му_ПереоценкаНМА
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервОбесценение_МУ.КорСубконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_му_СобытияНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ НачисленаАмортизацияТекущий
	|ИЗ
	|	РегистрСведений.бит_му_СобытияНМА КАК бит_му_СобытияНМА
	|ГДЕ
	|	бит_му_СобытияНМА.Организация = &Организация
	|	И бит_му_СобытияНМА.Событие = ЗНАЧЕНИЕ(Перечисление.бит_му_СобытияНМА.НачислениеАмортизации)
	|	И бит_му_СобытияНМА.НематериальныйАктив В(&СписокНМА)
	|	И бит_му_СобытияНМА.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_му_СобытияНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ НачисленаАмортизацияСледующий
	|ИЗ
	|	РегистрСведений.бит_му_СобытияНМА КАК бит_му_СобытияНМА
	|ГДЕ
	|	бит_му_СобытияНМА.Организация = &Организация
	|	И бит_му_СобытияНМА.Событие = ЗНАЧЕНИЕ(Перечисление.бит_му_СобытияНМА.НачислениеАмортизации)
	|	И бит_му_СобытияНМА.НематериальныйАктив В(&СписокНМА)
	|	И бит_му_СобытияНМА.Период >= ДОБАВИТЬКДАТЕ(&НачалоПериода, МЕСЯЦ, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПереоценкаНМА_НМА.НомерСтроки КАК НомерСтроки,
	|	ПереоценкаНМА_НМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаПараметров.СчетУчета КАК СчетУчета,
	|	СтоимостьНМА_МУ.Субконто1 КАК СУ_Субконто1,
	|	СтоимостьНМА_МУ.Субконто2 КАК СУ_Субконто2,
	|	СтоимостьНМА_МУ.Субконто3 КАК СУ_Субконто3,
	|	СтоимостьНМА_МУ.Субконто4 КАК СУ_Субконто4,
	|	ТаблицаПараметров.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	АмортизацияНМА_МУ.Субконто1 КАК СНА_Субконто1,
	|	АмортизацияНМА_МУ.Субконто2 КАК СНА_Субконто2,
	|	АмортизацияНМА_МУ.Субконто3 КАК СНА_Субконто3,
	|	АмортизацияНМА_МУ.Субконто4 КАК СНА_Субконто4,
	|	ТаблицаПараметров.СчетСниженияСтоимости КАК СчетСниженияСтоимости,
	|	ПереоценкаНМА_НМА.НематериальныйАктив КАК ССС_Субконто1,
	|	ФактОбесценениеНМА_МУ.Субконто2 КАК ССС_Субконто2,
	|	ФактОбесценениеНМА_МУ.Субконто3 КАК ССС_Субконто3,
	|	ФактОбесценениеНМА_МУ.Субконто4 КАК ССС_Субконто4,
	|	ТаблицаПараметров.СчетРезерваПереоценки КАК СчетРезерваПереоценки,
	|	ПереоценкаНМА_НМА.НематериальныйАктив КАК СРП_Субконто1,
	|	РезПереоценкиНМА_МУ.Субконто2 КАК СРП_Субконто2,
	|	РезПереоценкиНМА_МУ.Субконто3 КАК СРП_Субконто3,
	|	РезПереоценкиНМА_МУ.Субконто4 КАК СРП_Субконто4,
	|	ЕСТЬNULL(СтоимостьНМА_МУ.СуммаМУОстатокДт, 0) КАК Стоимость,
	|	ЕСТЬNULL(АмортизацияНМА_МУ.СуммаМУОстатокКт, 0) КАК Амортизация,
	|	ЕСТЬNULL(ФактОбесценениеНМА_МУ.СуммаМУОстатокКт, 0) КАК СуммаОбесценения,
	|	ЕСТЬNULL(РезПереоценкиНМА_МУ.СуммаМУОстатокКт, 0) КАК СуммаРезерваПереоценки,
	|	ЕСТЬNULL(СтоимостьНМА_МУ.СуммаМУОстатокДт, 0) - ЕСТЬNULL(АмортизацияНМА_МУ.СуммаМУОстатокКт, 0) - ЕСТЬNULL(ФактОбесценениеНМА_МУ.СуммаМУОстатокКт, 0) КАК БалансоваяСтоимость,
	|	ПереоценкаНМА_НМА.СправедливаяСтоимость КАК СправедливаяСтоимость,
	|	ПереоценкаНМА_НМА.СчетДоходаОтПереоценки КАК СчетДоходаОтПереоценки,
	|	ПереоценкаНМА_НМА.СубконтоД1 КАК СубконтоД1,
	|	ПереоценкаНМА_НМА.СубконтоД2 КАК СубконтоД2,
	|	ПереоценкаНМА_НМА.СубконтоД3 КАК СубконтоД3,
	|	ПереоценкаНМА_НМА.СубконтоД4 КАК СубконтоД4,
	|	ПереоценкаНМА_НМА.СчетРасходаОтПереоценки КАК СчетРасходаОтПереоценки,
	|	ПереоценкаНМА_НМА.СубконтоР1 КАК СубконтоР1,
	|	ПереоценкаНМА_НМА.СубконтоР2 КАК СубконтоР2,
	|	ПереоценкаНМА_НМА.СубконтоР3 КАК СубконтоР3,
	|	ПереоценкаНМА_НМА.СубконтоР4 КАК СубконтоР4,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РезервОбесценение_МУ.СуммаРезерва_Обесценения, 0) > 0
	|			ТОГДА ЕСТЬNULL(РезервОбесценение_МУ.СуммаРезерва_Обесценения, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКорректировкиРезерва,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РезервОбесценение_МУ.СуммаРезерва_Обесценения, 0) < 0
	|			ТОГДА ЕСТЬNULL(РезервОбесценение_МУ.СуммаРезерва_Обесценения, 0) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКорректировкиОбесценения,
	|	ПринятыеНМА_МУ.ДатаСостояния КАК ДатаПринятия,
	|	ВыбывшиеНМА_МУ.ДатаСостояния КАК ДатаВыбытия,
	|	ЕСТЬNULL(ТаблицаПараметров.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизацию,
	|	ВЫБОР
	|		КОГДА НЕ НачисленаАмортизацияТекущий.НематериальныйАктив ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачисленаТекущий,
	|	ВЫБОР
	|		КОГДА НЕ НачисленаАмортизацияСледующий.НематериальныйАктив ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачисленаСледующий
	|ИЗ
	|	Документ.бит_му_ПереоценкаНМА.НематериальныеАктивы КАК ПереоценкаНМА_НМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияНМА КАК ПринятыеНМА_МУ
	|		ПО ПереоценкаНМА_НМА.НематериальныйАктив = ПринятыеНМА_МУ.НематериальныйАктив
	|			И (ПринятыеНМА_МУ.Организация = &Организация)
	|			И (ПринятыеНМА_МУ.Состояние = &СостояниеПринятоКУчету)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияНМА КАК ВыбывшиеНМА_МУ
	|		ПО ПереоценкаНМА_НМА.НематериальныйАктив = ВыбывшиеНМА_МУ.НематериальныйАктив
	|			И (ВыбывшиеНМА_МУ.Организация = &Организация)
	|			И (ВыбывшиеНМА_МУ.Состояние = &СостояниеСнятоСУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров
	|		ПО ПереоценкаНМА_НМА.НематериальныйАктив = ТаблицаПараметров.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовСниженияСтоимости),
	|				,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК ФактОбесценениеНМА_МУ
	|		ПО ПереоценкаНМА_НМА.НематериальныйАктив = ФактОбесценениеНМА_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовРезерваПереоценки),
	|				,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК РезПереоценкиНМА_МУ
	|		ПО ПереоценкаНМА_НМА.НематериальныйАктив = РезПереоценкиНМА_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовУчета),
	|				,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК СтоимостьНМА_МУ
	|		ПО ПереоценкаНМА_НМА.НематериальныйАктив = СтоимостьНМА_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовАмортизации),
	|				,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК АмортизацияНМА_МУ
	|		ПО ПереоценкаНМА_НМА.НематериальныйАктив = АмортизацияНМА_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезервОбесценение_МУ КАК РезервОбесценение_МУ
	|		ПО ПереоценкаНМА_НМА.НематериальныйАктив = РезервОбесценение_МУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленаАмортизацияСледующий КАК НачисленаАмортизацияСледующий
	|		ПО ПереоценкаНМА_НМА.НематериальныйАктив = НачисленаАмортизацияСледующий.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленаАмортизацияТекущий КАК НачисленаАмортизацияТекущий
	|		ПО ПереоценкаНМА_НМА.НематериальныйАктив = НачисленаАмортизацияТекущий.НематериальныйАктив
	|ГДЕ
	|	ПереоценкаНМА_НМА.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПараметров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РезервОбесценение_МУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачисленаАмортизацияТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачисленаАмортизацияСледующий";
	
	РезультатЗапроса = Запрос.Выполнить();
		
	ТаблицаПоНМА = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("НМА", ТаблицаПоНМА);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("мВалютаМеждУчета"		, мВалютаМеждУчета);
	СтруктураШапкиДокумента.Вставить("мКоличествоСубконтоМУ", мКоличествоСубконтоМУ);
	
	// Получим список НМА документа.
	СписокНМА = НематериальныеАктивы.ВыгрузитьКолонку("НематериальныйАктив");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(СписокНМА, Истина);
	
	СтруктураШапкиДокумента.Вставить("СписокНМА", СписокНМА);
	
	// Из учетной политики получим "Метод учета амортизации при переоценке".
	МетодУчетаАмортизацииПриПереоценке = Перечисления.бит_му_МетодыУчетаАмортизацииПриПереоценке.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		
		ДанныеУчетнойПолитики = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(СтруктураШапкиДокумента.Дата
																		 ,Новый Структура("Организация", СтруктураШапкиДокумента.Организация));
		
		ПВХМетодУчетаАмортизацииПриПереоценке = ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.МетодУчетаАмортизацииПриПереоценке;
		МетодУчетаАмортизацииПриПереоценке 	  = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ДанныеУчетнойПолитики
																							  ,ПВХМетодУчетаАмортизацииПриПереоценке);
		
		Если Не ЗначениеЗаполнено(МетодУчетаАмортизацииПриПереоценке) Тогда
			
			ТекстСообщения = НСтр("ru='В учетной политике не заполнено значение ""Метод учета амортизации при переоценке"" для организации ""%1%""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтруктураШапкиДокумента.Организация);							 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("МетодУчетаАмортизацииПриПереоценке", МетодУчетаАмортизацииПриПереоценке);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования = Неопределено)
	
	// Заполним шапку документа значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);
	
	Дата = ТекущаяДатаСеанса();
	
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

// Функция выполняет подбор ОС через обработку подбора
//
Функция ВыполнитьПодборНМА()
	
	ПараметрыПодбора  = ЗаполнитьПараметрыПодбора();
	ОбработкаПодбора  = Обработки.бит_му_ПодборВНА.Создать();
	ВыбранноеЗначение = ОбработкаПодбора.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	
	Возврат ВыбранноеЗначение;
	
КонецФункции // ВыполнитьПодборНМА()

// Процедура очищает реквизиты строки табличной части НМА.
// 
// Параметры:
//  СтрокаТабличнойЧастиНМА - СтрокаТабличнойЧасти.НематериальныеАктивы.
// 
Процедура ОчиститьРеквизитыСтрокиНМА(СтрокаТабличнойЧастиНМА)
	
	МассивИмен = Новый Массив; 
	МассивИмен.Добавить("БалансоваяСтоимость"); 
	
	Для Каждого ТекИмя Из МассивИмен Цикл
		СтрокаТабличнойЧастиНМА[ТекИмя] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРеквизитыСтрокиНМА()

Процедура ВыполнитьПересчетСправедливойСтоимости(ТаблицаДанных);

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ВидыКурсов = Новый Структура("МУ, Документ");
	
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата,ВидыКурсов);
	
	Для Каждого Строка Из ТаблицаДанных Цикл
		
		КурсыМУ 	  = СтруктураКурсыВалют.МУ;
		КурсыДокумент = СтруктураКурсыВалют.Документ;
		
		Строка.СправедливаяСтоимость = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Строка.СправедливаяСтоимость
																			  ,КурсыДокумент.Валюта
																			  ,КурсыМУ.Валюта
																			  ,КурсыДокумент.Курс
																			  ,КурсыМУ.Курс
																			  ,КурсыДокумент.Кратность
																			  ,КурсыМУ.Кратность);
		
	КонецЦикла;

	
КонецПроцедуры

// Процедура проверяет правильность заполнения строк таблиц документа.
// 
// Параметры: 
//  СтруктураТаблиц			- Структура, таблицы значений, содержащая данные для проведения и проверки.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
// 
Процедура ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок)

	ТаблицаПоНМА = СтруктураТаблиц.НМА;
	КолонкиНМА	 = ТаблицаПоНМА.Колонки;
	
	// Проверим таблицу НМА по строчно.
	Для Каждого ТекСтрока Из ТаблицаПоНМА Цикл
		
		// Проверим заполненность значений строки.
		бит_му_ВНА.ПроверитьСтрокуТаблицыНМА(ТекСтрока, КолонкиНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		НачалоСообщения = НСтр("ru='В строке № %1% табличной части ""Нематериальные активы""'");
		НачалоСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НачалоСообщения, ТекСтрока.НомерСтроки);							   
		
		Если ТекСтрока.НачислятьАмортизацию Тогда
			
			// Проверки на начисление амортизации в текущем и следующем периодах.
			Если НЕ ТекСтрока.НачисленаТекущий Тогда
				
				ТекстСообщения = НСтр("ru=' указан нематериальный актив ""%1%"", по которому не начислена амортизация в текущем периоде!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекСтрока.НематериальныйАктив);								 
				
				ТекстСообщения = НачалоСообщения + ТекстСообщения;
				
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			
			КонецЕсли;  
			
			Если ТекСтрока.НачисленаСледующий Тогда
				
				ТекстСообщения = НСтр("ru=' указан нематериальный актив ""%1%"", по которому начислена амортизация в следующих периодах!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекСтрока.НематериальныйАктив);								 
				
				ТекстСообщения = НачалоСообщения + ТекстСообщения;
				
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			
			КонецЕсли; 
			
		КонецЕсли; // Если ТекСтрока.НачислятьАмортизацию Тогда.
		
	КонецЦикла; // Для Каждого ТекСтрока Из ТаблицаПоНМА Цикл.
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицДокумента()

// Процедура выполняет движения по регистрам.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, ИсторическиеКурсы, Отказ, Заголовок)
	
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ТаблицаДанных  = СтруктураТаблиц.НМА;
	
	НаборЗаписей_МУ 	   = Движения.бит_Дополнительный_2;
	НаборЗаписей_События   = Движения.бит_му_СобытияНМА;
	ТаблицаЗаписей_События = НаборЗаписей_События.Выгрузить();
	
	ТаблицаЗаписей_События.Очистить();
	
	// Выполним движения.
	бит_му_ВНА.ВыполнитьДвиженияПоПереоценкиВНА(СтруктураШапкиДокумента
											   ,ТаблицаДанных
											   ,СтруктураКурсыВалют
											   ,НаборЗаписей_МУ
											   ,ТаблицаЗаписей_События
											   ,"НМА"
											   ,ИсторическиеКурсы);
	
	// Движения по регистру сведений "бит_му_СобытияНМА".
	ТаблицаЗаписей_События.ЗаполнитьЗначения(ДатаДока	   , "Период");
	ТаблицаЗаписей_События.ЗаполнитьЗначения(Истина		   , "Активность");
	ТаблицаЗаписей_События.ЗаполнитьЗначения(ТекОрганизация, "Организация");
	
	НаборЗаписей_События.Загрузить(ТаблицаЗаписей_События);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Функция получает структуру курсов валют.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  Отказ					- Булево.
//  Заголовок				- Строка.
// 
// Возвращаемое значение:
//  СтруктураКурсыВалют - Структура.
// 
Функция ПолучитьСтруктуруКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ВидыКурсов = Новый Структура("Упр, Регл, МУ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект
																			  ,СтруктураШапкиДокумента.Дата
																			  ,ВидыКурсов);
	СтруктураКурсыВалют.Вставить("Документ", СтруктураКурсыВалют.МУ);
	
	// Получим валюту международного учета.
	СтрКурсов = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	
	Если Не ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		
		ТекстСообщения = "Для организации """ + СтруктураШапкиДокумента.Организация + """ не указана валюта международного учета!";
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // ПолучитьСтруктуруКурсовВалют()

Функция ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, Период, СтруктураКурсыВалют)
	
	ИсторическиеКурсы = бит_му_ВНА.ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, Период, СтруктураКурсыВалют);	
	
	
	Для Каждого ТекНМА Из ИсторическиеКурсы Цикл
		ТекНМА.Значение.Документ = ТекНМА.Значение.МУ;
	КонецЦикла;
	
	Возврат ИсторическиеКурсы;
	
КонецФункции

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
