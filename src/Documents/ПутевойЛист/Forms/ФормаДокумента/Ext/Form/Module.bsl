
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОбновитьПоказанияОдометра();
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		АктуализироватьСотрудника();
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормойПриСозданииНаСервере(ЭтотОбъект);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Для Каждого ТекущийПараметр Из ВыбранноеЗначение Цикл
			Если Объект.Свойство(ТекущийПараметр.Ключ) Тогда
				Объект[ТекущийПараметр.Ключ] = ТекущийПараметр.Значение;
			КонецЕсли;
		КонецЦикла;
		ОбновитьПредставлениеПорядокУчетаЗатрат();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоТранспортноеСредство"
		И Параметр = Объект.ТранспортноеСредство Тогда
		
		ОбновитьПоляИРеквизитыФормы(ЭтотОбъект);
		ОбновитьИтоги();
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" И Объект.Организация = Источник Тогда
		
		ОрганизацияПриИзмененииНаСервере();
		
	Иначе
		
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(
			ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	УстановитьВремяМаршрута();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект.Организация);
	ПараметрыФормы.Вставить("Контекст", Новый Структура);
	ПараметрыФормы.Вставить("Назначение", "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты",   ПроверяемыеРеквизитыОрганизации());
	ПараметрыФормы.Контекст.Вставить("Период",        Объект.Дата);
	ПараметрыФормы.Контекст.Вставить("ИмяРеглОтчета", "");
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоПриИзменении(Элемент)
	
	ТранспортноеСредствоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаЗатратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",       ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата",                 Объект.Дата);
	ПараметрыФормы.Вставить("Организация",          Объект.Организация);
	ПараметрыФормы.Вставить("ОтражениеВУСН",        Объект.ОтражениеВУСН);
	
	ПараметрыФормы.Вставить("СчетЗатрат",          Объект.СчетЗатрат);
	ПараметрыФормы.Вставить("ПодразделениеЗатрат", Объект.ПодразделениеЗатрат);
	ПараметрыФормы.Вставить("Субконто1",           Объект.Субконто1);
	ПараметрыФормы.Вставить("Субконто2",           Объект.Субконто2);
	ПараметрыФормы.Вставить("Субконто3",           Объект.Субконто3);
	ПараметрыФормы.Вставить("НДСВключенВСтоимость",Истина);
	ПараметрыФормы.Вставить("УчетАгентскогоНДС",   Ложь);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСчетаЗатрат", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НормаРасходаПриИзменении(Элемент)
	
	ПересчитатьРасходМаршрута();
	
	Оповещение   = Новый ОписаниеОповещения("НормаРасходаПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'Запомнить норму расхода для транспортного средства?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Норма расхода изменена'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

#Область Топливо

&НаКлиенте
Процедура ТопливоВидВходящегоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Топливо.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидВходящегоДокумента
		= ПредопределенноеЗначение("Перечисление.ВидыДокументовПриобретенияГСМ.ТопливнаяКарта") Тогда
		
		ТекущиеДанные.Цена  = 0;
		ТекущиеДанные.Сумма = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоКоличествоПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Топливо");
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоЦенаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Топливо");
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоСуммаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "Топливо");
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ТопливоПослеУдаления(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область Маршрут

&НаКлиенте
Процедура МаршрутПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	КоличествоСтрок = Объект.Маршрут.Количество();
	
	Если НоваяСтрока И КоличествоСтрок = 1 Тогда
		
		ТекущиеДанные.ПоказаниеОдометраДо = ПоказаниеОдометра;
		
	ИначеЕсли НоваяСтрока Тогда
		
		МаксимальноеЗначение = 0;
		Для Каждого ТекущаяСтрока Из Объект.Маршрут Цикл
			МаксимальноеЗначение = Макс(МаксимальноеЗначение, ТекущаяСтрока.ПоказаниеОдометраПосле);
		КонецЦикла;
		
		ТекущиеДанные.ПоказаниеОдометраДо = МаксимальноеЗначение;
		ТекущиеДанные.ПоказаниеОдометраПосле = ТекущиеДанные.ПоказаниеОдометраДо + ТекущиеДанные.Расстояние;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги();
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ДатаОтправления = ПолнаяДатаМаршрута(ТекущиеДанные.ОтправлениеДата, ТекущиеДанные.ОтправлениеВремя);
	ТекущиеДанные.ДатаВозвращения = ПолнаяДатаМаршрута(ТекущиеДанные.ВозвращениеДата, ТекущиеДанные.ВозвращениеВремя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПослеУдаления(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПоказаниеОдометраДоПриИзменении(Элемент)
	
	ПересчитатьПоказателиМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПоказаниеОдометраПослеПриИзменении(Элемент)
	
	ПересчитатьПоказателиМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутРасстояниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	ТекущиеДанные.ПоказаниеОдометраПосле = ТекущиеДанные.ПоказаниеОдометраДо + ТекущиеДанные.Расстояние;
	
	ПересчитатьРасходМаршрута(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция АналитикаЗатратЗаполнена(Субконто)
	
	Если ЗначениеЗаполнено(Субконто) И ТипЗнч(Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы")
		И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу() Тогда
		Значение = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Субконто) Тогда
		Значение = Истина;
	Иначе
		Значение = Ложь;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Маршрут) Тогда
		РеквизитыТС = РеквизитыТранспортногоСредства(Объект.ТранспортноеСредство, Объект.Ссылка, Объект.Дата);
		ПоказаниеОдометра = РеквизитыТС.ПоказаниеОдометра;
	КонецЕсли;
	
	АктуализироватьСотрудника();
	ОбновитьПредставлениеПорядокУчетаЗатрат();
	
	ЗаполнитьЗависимыеСчета("Дата");
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяТрудНаемныхРаботников(Организация)
	
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		ИспользуетсяТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
	Иначе
		ИспользуетсяТрудНаемныхРаботников = Истина;
	КонецЕсли;
	
	Возврат ИспользуетсяТрудНаемныхРаботников;
	
КонецФункции

&НаКлиенте
Процедура НормаРасходаПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНормуРасходаТоплива(Объект.ТранспортноеСредство, Объект.НормаРасхода);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПоляИРеквизитыФормы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	РеквизитыТС = РеквизитыТранспортногоСредства(Объект.ТранспортноеСредство, Объект.Ссылка, Объект.Дата);
	Форма.ПоказаниеОдометра = РеквизитыТС.ПоказаниеОдометра;
	
	Если РеквизитыТС.Свойство("ЕдиницаИзмеренияНаименование", Форма.ЕдиницаИзмеренияНаименование)
		И Не ПустаяСтрока(Форма.ЕдиницаИзмеренияНаименование) Тогда
		
		Элементы.ТопливоКоличество.Заголовок = СтрШаблон(НСтр("ru = 'Количество, %1'"), Форма.ЕдиницаИзмеренияНаименование);
		Элементы.МаршрутРасход.Заголовок     = СтрШаблон(НСтр("ru = 'Расход, %1'"), Форма.ЕдиницаИзмеренияНаименование);
		
	Иначе
		
		Элементы.ТопливоКоличество.Заголовок = НСтр("ru = 'Количество'");
		Элементы.МаршрутРасход.Заголовок     = НСтр("ru = 'Расход'");
		
	КонецЕсли;
	
	Форма.ПодсказкаНормаРасхода = РеквизитыТС.Подсказка;
	РеквизитыТС.Свойство("НормаРасхода", Объект.НормаРасхода);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	Если Объект.Ссылка.Пустая() Тогда
		ДатаДокумента = КонецДня(Объект.Дата);
	Иначе
		ДатаДокумента = Новый Граница(Объект.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	КонецЕсли;
	
	ОстатокНачало  = Справочники.ТранспортныеСредства.ОстатокТопливаВБаке(
		Объект.Организация, Объект.ТранспортноеСредство, ДатаДокумента);
	ПокупкаТоплива = Объект.Топливо.Итог("Количество");
	РасходТоплива  = Объект.Маршрут.Итог("Расход");
	ОстатокНаКонец = ОстатокНачало + ПокупкаТоплива - РасходТоплива;
	ПереносСтроки  = Символы.ПС;
	
	ИтогОстатокНачало  = СтрШаблон(НСтр("ru = 'Топливо в баке
		|%1 %2'"), ОстатокНачало, ЕдиницаИзмеренияНаименование);
	
	ИтогПокупкаТоплива = СтрШаблон(НСтр("ru = 'Куплено
		|%1 %2'"), ПокупкаТоплива, ЕдиницаИзмеренияНаименование);
	
	ИтогРасходТоплива  = СтрШаблон(НСтр("ru = 'Израсходовано
		|%1 %2'"), РасходТоплива, ЕдиницаИзмеренияНаименование);
	
	ЭтоПерерасходТоплива = ОстатокНаКонец < 0;
	Если ЭтоПерерасходТоплива Тогда
		ИтогОстатокКонец = СтрШаблон(НСтр("ru = 'Перерасход
			|%1 %2'"), - ОстатокНаКонец, ЕдиницаИзмеренияНаименование);
		Элементы.ОстатокВБакеНаКонец.ЦветФона = ЦветаСтиля.НекорректныйКонтрагентЦветФонаВСписке;
	Иначе
		ИтогОстатокКонец = СтрШаблон(НСтр("ru = 'Остаток
			|%1 %2'"), ОстатокНаКонец, ЕдиницаИзмеренияНаименование);
		Элементы.ОстатокВБакеНаКонец.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказанияОдометра()
	
	// Обновить показания одометра - за начальные показания одометра в табличной части принимаются данные первой строки
	Если ЗначениеЗаполнено(Объект.Маршрут) И ПоказаниеОдометра <> Объект.Маршрут[0].ПоказаниеОдометраДо Тогда
		
		ПоказаниеОдометраТекущие = ПоказаниеОдометра;
		Для Каждого ТекущаяСтрока Из Объект.Маршрут Цикл
			
			ТекущаяСтрока.ПоказаниеОдометраДо    = ПоказаниеОдометраТекущие;
			ТекущаяСтрока.ПоказаниеОдометраПосле = ТекущаяСтрока.ПоказаниеОдометраДо + ТекущаяСтрока.Расстояние;
			ПоказаниеОдометраТекущие = ТекущаяСтрока.ПоказаниеОдометраПосле;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеПорядокУчетаЗатрат()
	
	ПорядокУчетаЗатрат = "";
	
	АналитикаПредставления = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		АналитикаПредставления.Добавить(Объект.СчетЗатрат);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеЗатрат)
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") Тогда
		АналитикаПредставления.Добавить(Объект.ПодразделениеЗатрат);
	КонецЕсли;
	
	Если АналитикаЗатратЗаполнена(Объект.Субконто1) Тогда
		АналитикаПредставления.Добавить(Объект.Субконто1);
	КонецЕсли;
	
	Если АналитикаЗатратЗаполнена(Объект.Субконто2) Тогда
		АналитикаПредставления.Добавить(Объект.Субконто2);
	КонецЕсли;
	
	Если АналитикаЗатратЗаполнена(Объект.Субконто3) Тогда
		АналитикаПредставления.Добавить(Объект.Субконто3);
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата)
		И ЗначениеЗаполнено(Объект.ОтражениеВУСН) Тогда
		АналитикаПредставления.Добавить(СтрШаблон(НСтр("ru = 'расходы %1'"), Нрег(Объект.ОтражениеВУСН)));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АналитикаПредставления) Тогда
		ПорядокУчетаЗатрат = НСтр("ru = 'Заполнить'");
	Иначе
		ПорядокУчетаЗатрат = СтрСоединить(АналитикаПредставления, ", ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьЗависимыеСчета("Организация");
	
	ИспользуетсяТрудНаемныхРаботников = ИспользуетсяТрудНаемныхРаботников(Объект.Организация);
	
	АктуализироватьСотрудника();
	
	ОбновитьПредставлениеПорядокУчетаЗатрат();
	ПроверитьРеквизитыОрганизацииНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходМаршрута(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ТекущаяСтрока.Расход = ТекущаяСтрока.Расстояние * Объект.НормаРасхода / ПробегАвтотранспортаПоНормативу;
		
	Иначе
		
		Для Каждого ТекущийМаршрут Из Объект.Маршрут Цикл
			ПересчитатьРасходМаршрута(ТекущийМаршрут);
		КонецЦикла;
		ОбновитьИтоги();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПоказателиМаршрута()
	
	РассчитатьРасстояниеТекущегоМаршрута();
	ПересчитатьРасходМаршрута(Элементы.Маршрут.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ПробегАвтотранспортаПоНормативу = Справочники.ТранспортныеСредства.ПробегАвтотранспортаПоНормативу();
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
	Элементы.ГруппаНормаРасхода.РасширеннаяПодсказка.Заголовок =
		Справочники.ТранспортныеСредства.ПодсказкаОписаниеНормыМинтранса();
	
	ИспользуетсяТрудНаемныхРаботников = ИспользуетсяТрудНаемныхРаботников(Объект.Организация);
	
	ОбновитьПоляИРеквизитыФормы(ЭтотОбъект);
	УстановитьВремяМаршрута();
	ОбновитьПредставлениеПорядокУчетаЗатрат();
	ОбновитьИтоги();
	ПроверитьРеквизитыОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция ПолнаяДатаМаршрута(Дата, Время)
	
	Возврат Дата + (Время - НачалоДня(Время));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверяемыеРеквизитыОрганизации()
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("ИНН");
	ПроверяемыеРеквизиты.Добавить("ОГРН");
	ПроверяемыеРеквизиты.Добавить("Телефон");
	ПроверяемыеРеквизиты.Добавить("Адрес");
	
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииНаСервере()
	
	НезаполненныеРеквизиты = Неопределено;
	ПроверяемыеРеквизиты   = ПроверяемыеРеквизитыОрганизации();
	
	РеквизитыОрганизацииЗаполнены = ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Объект.Организация,
		ПроверяемыеРеквизиты,
		НезаполненныеРеквизиты);
	
	Если Не РеквизитыОрганизацииЗаполнены Тогда
		
		СообщениеТребуютсяРеквизиты   = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(
			Объект.Организация, НСтр("ru = 'подготовить путевой лист'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРасстояниеТекущегоМаршрута()
	
	ТекущаяСтрока = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущаяСтрока.ПоказаниеОдометраПосле = 0 Тогда
		ТекущаяСтрока.Расстояние = 0;
	Иначе
		ТекущаяСтрока.Расстояние = ТекущаяСтрока.ПоказаниеОдометраПосле - ТекущаяСтрока.ПоказаниеОдометраДо;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыТранспортногоСредства(ТранспортноеСредство, СсылкаНаДокумент, ДатаДокумента)
	
	СтруктураРезультат = Справочники.ТранспортныеСредства.РеквизитыТранспортногоСредства(
		ТранспортноеСредство, ДатаДокумента);
	
	// Если транспортное средство то же самое, что и было указано в документе,
	// тогда показание нужно оставить такими, какие были введены в записанном документе
	Если ЗначениеЗаполнено(СсылкаНаДокумент)
		И ТранспортноеСредство = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "ТранспортноеСредство") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МИНИМУМ(ПутевойЛистМаршрут.ПоказаниеОдометраДо) КАК ПоказаниеОдометраДо
		|ИЗ
		|	Документ.ПутевойЛист.Маршрут КАК ПутевойЛистМаршрут
		|ГДЕ
		|	ПутевойЛистМаршрут.Ссылка = &СсылкаНаДокумент
		|	И ПутевойЛистМаршрут.ПоказаниеОдометраДо > 0");
		Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураРезультат.Вставить("ПоказаниеОдометра", Выборка.ПоказаниеОдометраДо);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ТранспортноеСредствоПриИзмененииНаСервере()
	
	ОбновитьПоляИРеквизитыФормы(ЭтотОбъект);
	ОбновитьПоказанияОдометра();
	
	ОбновитьИтоги();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВремяМаршрута()
	
	Для Каждого ТекущаяСтрока Из Объект.Маршрут Цикл
		ТекущаяСтрока.ОтправлениеДата  = ТекущаяСтрока.ДатаОтправления;
		ТекущаяСтрока.ОтправлениеВремя = ТекущаяСтрока.ДатаОтправления;
		ТекущаяСтрока.ВозвращениеДата  = ТекущаяСтрока.ДатаВозвращения;
		ТекущаяСтрока.ВозвращениеВремя = ТекущаяСтрока.ДатаВозвращения;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьНормуРасходаТоплива(ТранспортноеСредство, НормаРасхода)
	
	Справочники.ТранспортныеСредства.ИзменитьНормуРасходаТоплива(ТранспортноеСредство, НормаРасхода);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьСотрудника()
	
	Если Не ИспользуетсяТрудНаемныхРаботников Тогда
		Объект.ФизЛицо = ОтветственныеЛицаБП.ОтветственныеЛица(Объект.Организация, Объект.Дата).Руководитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормойПриСозданииНаСервере(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПорядокУчетаЗатрат.Видимость = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ФонТребуютсяРеквизиты.Видимость = Не Форма.РеквизитыОрганизацииЗаполнены
		И ЗначениеЗаполнено(Объект.Организация);
	
	Элементы.ПодсказкаНормаРасхода.Видимость = Не ПустаяСтрока(Форма.ПодсказкаНормаРасхода);
	Элементы.Сотрудник.Видимость = Форма.ИспользуетсяТрудНаемныхРаботников;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ТопливнаяКарта = Перечисления.ВидыДокументовПриобретенияГСМ.ТопливнаяКарта;
	Равно = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоЦена");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Топливо.ВидВходящегоДокумента", Равно, ТопливнаяКарта);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоЦена");
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Топливо.ВидВходящегоДокумента", ВидСравненияКомпоновкиДанных.НеРавно, ТопливнаяКарта);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.Топливо.Цена", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТопливоСумма");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Топливо.ВидВходящегоДокумента", Равно, ТопливнаяКарта);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ШрифтЗаголовкаСтроки = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,, Истина);
	ЦветТекста = ЦветаСтиля.ЗаголовкиСтрокЦветТекста;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутЗаголовокОтправление");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отправление'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтЗаголовкаСтроки);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "МаршрутЗаголовокНазначение");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Назначение'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтЗаголовкаСтроки);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
	
	
КонецПроцедуры

#Область СчетаУчета

&НаСервере
Процедура ЗаполнитьЗависимыеСчета(ИмяРеквизита)
	
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ИмяРеквизита, Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПутевойЛист",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетЗатрат");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
	КонецЕсли;

	// СчетЗатрат
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатрат") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Субконто3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
	КонецЕсли;

	// ПодразделениеОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеЗатрат");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;

		// СчетЗатрат
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетЗатрат") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Субконто3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;

		// ПодразделениеОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетЗатрат");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения

	Возврат ПараметрыЗаполнения;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

