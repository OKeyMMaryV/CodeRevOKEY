#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаКонтрольноЛогическаяПроверкаНеПройдена);
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОбработки);
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОтклоненОператором);
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаПроверкаФорматаНеПройдена);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт

	Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Черновик;

КонецФункции
	
// Возвращает дальнейшее действие по умолчанию.
//
/// Параметры:
// 	СтруктураПараметров - Неопределено, Структура - Параметры для расчета:
// 	 ОбъектРасчета - ДокументСсылка, ДанныеФормыОбъект - Объект для расчета допустимых действий.
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	ДальнейшиеДействия = Новый Массив;
	
	Если СтруктураПараметров <> Неопределено И СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
		ДобавитьВМассивДоступныеДействия(ДальнейшиеДействия, СтруктураПараметров.ОбъектРасчета);
	Иначе
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
	КонецЕсли;
	
	Возврат ДальнейшиеДействия;

КонецФункции

Функция ДопустимыеДействия(Объект) Экспорт
	
	ДопустимыеДействия = Новый Массив;
	
	ДобавитьВМассивДоступныеДействия(ДопустимыеДействия, Объект);
	
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);
	
	Возврат ДопустимыеДействия;
	
КонецФункции

// Конвертирует общий статус документа ИС МП в статус текущего документа.
// 
// Параметры:
// 	ИсходныйСтатус - ПеречислениеСсылка.СтатусыДокументовИСМП - Исходный статус.
// Возвращаемое значение:
// 	ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП,
// 	ПеречислениеСсылка.СтатусыДокументовИСМП - Конвертированный статус.
//
Функция КонвертированныйОбщийСтатус(ИсходныйСтатус) Экспорт
	
	Если ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки
		Или ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
		ИтоговыйСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
	ИначеЕсли ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.Неопределен Тогда
		ИтоговыйСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПНаРассмотренииОператором;
	ИначеЕсли ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.НеПроверен Тогда
		ИтоговыйСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаПроверкаФорматаНеПройдена;
	ИначеЕсли ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
		ИтоговыйСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбрабатывается;
	ИначеЕсли ИсходныйСтатус = Перечисления.СтатусыДокументовИСМП.Проверен Тогда
		ИтоговыйСтатус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПGTINНаОстаткиПолучены;
	Иначе 
		ИтоговыйСтатус = ИсходныйСтатус;
	КонецЕсли;
	
	Возврат ИтоговыйСтатус;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки
	 Или Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
		
		ВидПродукцииИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции");
		
		Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувная Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
				ДокументСсылка,
				Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.КПередачеВИСМП);
		ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табачная Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
				ДокументСсылка,
				Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.КПередачеВСУЗ);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ Тогда
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса Тогда
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ Тогда
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * ФорматОбмена - ПеречислениеСсылка.ВерсииФорматаОбменаСУЗ - Формат обмена с СУЗ
//   * СтанцияУправленияЗаказами - СправочникСсылка.СтанцииУправленияЗаказамиИСМП - СУЗ
//   * Назначение - ПеречислениеСсылка.НазначениеСообщенийИСМП.ИСМП - Назначение сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
		
		ВидПродукцииИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции");
		
		Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувная Тогда
			
			СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			
			Если ДополнительныеПараметры <> Неопределено
				И ДополнительныеПараметры.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
				СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКПроверкеФормата;
			Иначе
				СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
			КонецЕсли;
			
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			
			Если ДополнительныеПараметры <> Неопределено
				И ДополнительныеПараметры.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
				СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаПроверкаФорматаНеПройдена;
			Иначе
				СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
			КонецЕсли;
			
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
			
		ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табачная Тогда
			
			СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			
			СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			
			СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
			
		КонецЕсли;
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
		Иначе
			СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Выполнен;
		КонецЕсли;
		
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ Тогда
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса Тогда
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ Тогда
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиЗаказаНаЭмиссиюКодовМаркировки
		Или Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
			
			Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			Статусы.Принят = ДополнительныеПараметры.Статус;
			
			Статусы.Обрабатывается = ДополнительныеПараметры.Статус;
			
			Статусы.Ошибка = ДополнительныеПараметры.Статус;
			
			Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
				Статусы.ОшибкаДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
				Статусы.ПринятДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
				Статусы.ОбрабатываетсяДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
			Иначе
				Статусы.ОбрабатываетсяДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
				Статусы.ОшибкаДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
			КонецЕсли;
				
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
		Иначе
			
			Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			Статусы.Принят = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы;
			
			Статусы.Обрабатывается = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбрабатывается;
			Статусы.ОбрабатываетсяДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			
			Статусы.Ошибка = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
			
			Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
				Статусы.ОшибкаДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
			Иначе
				Статусы.ОшибкаДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
			КонецЕсли;
			
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовИСМП - Операция ИСМП
//
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * ФорматОбмена - ПеречислениеСсылка.ВерсииФорматаОбменаСУЗ - Формат обмена с СУЗ
//   * СтанцияУправленияЗаказами - СправочникСсылка.СтанцииУправленияЗаказамиИСМП - СУЗ
//   * Назначение - ПеречислениеСсылка.НазначениеСообщенийИСМП.ИСМП - Назначение сообщения.
//
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  Документ - ДокументСсылка - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ, для которого требуется обновить статус.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияИСМП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки);
	
	Возврат Таблица;
	
КонецФункции

// Перерасчитать статус оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Предыдущий статус.
//
Процедура РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт

	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусОформления(ДокументСсылка);
	КонецЕсли;

КонецПроцедуры

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт

	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);

	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);

КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ - Ссылка на документ эмиссии.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
// 
// Возвращаемое значение:
//  Структура - Данные JSON сообщения.
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки Тогда
		
		Возврат ЗаявкаНаЭмиссиюКодовМаркировкиJSON(ДокументСсылка, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки Тогда
		
		Возврат ПолучениеGTINНаОстаткиJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия.
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаПанелиОбменаИСМПОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовИСМП.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ДокументИСМП
	|		ПО СтатусыДокументовЕГАИС.Документ = ДокументИСМП.Ссылка
	|ГДЕ
	|	ДокументИСМП.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ДокументИСМП.ПометкаУдаления
	|	И СтатусыДокументовИСМП.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (ДокументИСМП.Организация В(&Организации)
	|		ИЛИ &БезОтбораПоОрганизации)
	|	И (ДокументИСМП.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанелиОбменаИСМПОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовИСМП.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ДокументИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ДокументИСМП.Ссылка
	|ГДЕ
	|	ДокументИСМП.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ДокументИСМП.ПометкаУдаления
	|	И СтатусыДокументовИСМП.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (ДокументИСМП.Организация В(&Организации)
	|		ИЛИ &БезОтбораПоОрганизации)
	|	И (ДокументИСМП.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область GTINМаркировкаОстатков

Функция ТребуетсяЗапросGTIN(Объект) Экспорт
	
	Если Не Объект.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ, Ограничение);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаявкаНаЭмиссиюКодовМаркировкиJSON(ДокументСсылка, ДополнительныеПараметры) Экспорт
	
	Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.ВладелецФайла
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	// Общие реквизиты для табака и обуви
	|	Шапка.ВидПродукции                         КАК ВидПродукции,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.СпособВводаВОборот                   КАК СпособВводаВОборот,
	|
	|	// Основные реквизиты
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Контрагент                 КАК Контрагент,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.ПроизводственныйОбъект     КАК ПроизводственныйОбъект,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление
	|
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	// Универсальные реквизиты
	|	Товары.Номенклатура                      КАК Номенклатура,
	|	Товары.Характеристика                    КАК Характеристика,
	|	Товары.GTIN                              КАК GTIN,
	|	Товары.КодТНВЭД                          КАК КодТНВЭД,
	|	Товары.ТоварныйЗнак                      КАК ТоварныйЗнак,
	|	Товары.Количество                        КАК Количество,
	|	Товары.СпособФормированияСерийногоНомера КАК СпособФормированияСерийногоНомера,
	|	1                                        КАК КоличествоСтрок,
	|	ЛОЖЬ                                     КАК СтрокаДобавлена,
	|	
	|	// Табачная продукция
	|	Представление(Товары.Ссылка.ПроизводственныйОбъект) КАК ПроизводственныйОбъектПредставление,
	|	Товары.Ссылка.ПроизводственныйОбъектИдентификатор   КАК ПроизводственныйОбъектИдентификатор,
	|	Товары.Ссылка.ПроизводственныйОбъектАдресСтрокой    КАК ПроизводственныйОбъектАдресСтрокой,
	|	Товары.Ссылка.ИдентификаторПроизводственнойЛинии    КАК ИдентификаторПроизводственнойЛинии,
	|	Товары.Ссылка.ОжидаемаяДатаНачалаПроизводства       КАК ОжидаемаяДатаНачалаПроизводства,
	|	Представление(Товары.Номенклатура)                  КАК НоменклатураПредставление,
	|	Представление(Товары.Характеристика)                КАК ХарактеристикаПредставление,
	|	
	|	Товары.МаксимальнаяРозничнаяЦена КАК МРЦ,
	|	Товары.Шаблон                    КАК Шаблон,
	|	
	|	// Устаревшие реквизиты
	|	Товары.Ссылка.ВидСредстваИдентификации КАК ВидСредстваИдентификации,
	|	Товары.Ссылка.ВидМаркировки            КАК ВидМаркировки
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СерийныеНомера.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СерийныеНомера.СерийныйНомер       КАК СерийныйНомер
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка = &Ссылка
	|",
	"СерийныеНомера");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	ТабличнаяЧастьТовары         = РезультатЗапроса["Товары"].Выгрузить();
	ТабличнаяЧастьСерийныеНомера = РезультатЗапроса["СерийныеНомера"].Выгрузить();
	
	Если ТабличнаяЧастьТовары.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Документ = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СтанцияУправленияЗаказами = Неопределено;
	ФорматОбмена              = Неопределено;
	НастройкиОбменаСУЗ        = ДополнительныеПараметры.ПараметрыОбмена.НастройкиОбменаСУЗ;
	Для Каждого КлючИЗначение Из НастройкиОбменаСУЗ.ОбменНаСервере Цикл
		
		Организация     = КлючИЗначение.Ключ;
		НастройкаОбмена = КлючИЗначение.Значение;
		
		Если Организация <> Шапка.Организация Тогда
			Продолжить;
		КонецЕсли;
		
		Если НастройкаОбмена.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
			РезультатПроверки = ИнтерфейсСУЗ.ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбмена);
			Если РезультатПроверки.Доступен = Истина Тогда
				СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
				ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
			КонецЕсли;
		Иначе
			СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
			ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
		ВызватьИсключение НСтр("ru = 'Формат обмена V1 не поддерживается.'")
	КонецЕсли;
	
	Если СтанцияУправленияЗаказами = Неопределено Тогда
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка, НомерВерсии);
		
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не удалось определить активный СУЗ для организации %1.'"),
				Шапка.Организация));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
		
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса;
		
		АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
		АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
		АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
		АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		АбстрактноеСообщениеJSON.Операция                  = АбстрактнаяОперация;
		АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = Новый Массив;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = "00000000-0000-0000-0000-000000000000";
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
		АбстрактноеСообщениеJSON.ТребуетсяПодписание       = Ложь;
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧастьТовары Цикл
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			СообщениеJSON.ЗагружатьДо       = АбстрактноеСообщениеJSON.Идентификатор;
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				Операция, ДокументСсылка, НомерВерсии);
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("factoryId", СтрокаТЧ.ПроизводственныйОбъектИдентификатор); // GLN фабрики
			Если ЗначениеЗаполнено(СтрокаТЧ.ПроизводственныйОбъектПредставление) Тогда
				ТелоЗапроса.Вставить("factoryName", СтрокаТЧ.ПроизводственныйОбъектПредставление); // Наименование производства
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.ПроизводственныйОбъектАдресСтрокой) Тогда
				ТелоЗапроса.Вставить("factoryAddress", СтрокаТЧ.ПроизводственныйОбъектАдресСтрокой);  // Адрес производства
			КонецЕсли;
			ТелоЗапроса.Вставить("factoryCountry",     НСтр("ru = 'Россия'"));                     // Страна производства
			ТелоЗапроса.Вставить("productionLineId",   СтрокаТЧ.ИдентификаторПроизводственнойЛинии);
			ТелоЗапроса.Вставить("productCode",        Строка(СтрокаТЧ.Номенклатура.УникальныйИдентификатор()));      // Код продукта, SKU
			ТелоЗапроса.Вставить("productDescription", СтрокаТЧ.НоменклатураПредставление); // Описание продукции
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ТоварныйЗнак) Тогда
				ТелоЗапроса.Вставить("brandcode", СтрокаТЧ.ТоварныйЗнак);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
				ТелоЗапроса.Вставить("poNumber", Шапка.ИдентификаторПроизводственногоЗаказа);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.ОжидаемаяДатаНачалаПроизводства) Тогда
				ТелоЗапроса.Вставить("expectedStartDate", Формат(СтрокаТЧ.ОжидаемаяДатаНачалаПроизводства, "ДФ=yyyy-MM-dd;")); // Дата начала производства продукции
			КонецЕсли;
			ТелоЗапроса.Вставить("products", Новый Массив);
			
			СтрокаЗаказаКодовМаркировки = Новый Структура;
			СтрокаЗаказаКодовМаркировки.Вставить("gtin",       СтрокаТЧ.GTIN);
			СтрокаЗаказаКодовМаркировки.Вставить("quantity",   СтрокаТЧ.Количество);
			СтрокаЗаказаКодовМаркировки.Вставить("templateId", ИнтерфейсСУЗСлужебный.ШаблонКодаМаркировки(СтрокаТЧ.Шаблон));
			
			СтрокаЗаказаКодовМаркировки.Вставить("serialNumberType", ИнтерфейсСУЗСлужебный.СпособФормированияСерийногоНомера(СтрокаТЧ.СпособФормированияСерийногоНомера)); // OPERATOR или SELF_MADE
			Если СтрокаТЧ.СпособФормированияСерийногоНомера = Перечисления.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
				СтрокаЗаказаКодовМаркировки.Вставить("serialNumbers", ТабличнаяЧастьСерийныеНомера.Скопировать(ПараметрыОтбора).ВыгрузитьКолонку("СерийныйНомер"));
			КонецЕсли;
			
			Если СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка Тогда
				
				Если ЗначениеЗаполнено(СтрокаТЧ.МРЦ) Тогда
					СтрокаМРЦ = Формат(СтрокаТЧ.МРЦ * 100, "ЧГ=0;"); // МРЦ в копейках
				Иначе
					СтрокаМРЦ = "0000";
				КонецЕсли;
				
				СтрокаЗаказаКодовМаркировки.Вставить("mrp", СтрокаМРЦ);
				
			ИначеЕсли СтрокаТЧ.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек Тогда
				
				Если ЗначениеЗаполнено(СтрокаТЧ.МРЦ) Тогда
					СтрокаМРЦ = ШтрихкодированиеМОТПКлиентСервер.ЗначениеМРЦДляБлока(СтрокаТЧ.МРЦ);
				Иначе
					СтрокаМРЦ = "000000";
				КонецЕсли;
				
				СтрокаЗаказаКодовМаркировки.Вставить("mrp", СтрокаМРЦ);
				
			КонецЕсли;
			
			ТелоЗапроса["products"].Добавить(СтрокаЗаказаКодовМаркировки);
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", "");
			ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", СтрокаТЧ.ИдентификаторСтроки);
			ПараметрыЗапроса.Вставить("GTIN",                      СтрокаТЧ.GTIN);
			ПараметрыЗапроса.Вставить("Шаблон",                    СтрокаТЧ.Шаблон);
			
			ПараметрыЗапросов = Новый Массив;
			ПараметрыЗапросов.Добавить(ПараметрыЗапроса);
			
			ТелоСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
			
			СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
			СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИС.Исходящий;
			
			СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
			СообщениеJSON.Операция           = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки;
			
			СообщениеJSON.Версия             = НомерВерсии;
			СообщениеJSON.ПараметрыЗапроса   = ПараметрыЗапросов;
			
			СообщениеJSON.ТребуетсяПодписание       = Ложь;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ФорматОбмена              = ФорматОбмена;
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
			
	ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
		
		Шаблон               = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(Шапка.ВидПродукции);
		ИдентификаторШаблона = ИнтерфейсСУЗСлужебный.ШаблонКодаМаркировки(Шаблон);
		
		МассивГруппСтрок    = МассивГруппСтрокПоGTINИКоличеству(ТабличнаяЧастьТовары);
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса;
		
		АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
		АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
		АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
		АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		АбстрактноеСообщениеJSON.Операция                  = АбстрактнаяОперация;
		АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = Новый Массив;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = "00000000-0000-0000-0000-000000000000";
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
		АбстрактноеСообщениеJSON.ТребуетсяПодписание       = Ложь;
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);

		Для Каждого ГруппаСтрок Из МассивГруппСтрок Цикл
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			СообщениеJSON.ПараметрыЗапроса  = Новый Массив;
			СообщениеJSON.ЗагружатьДо       = АбстрактноеСообщениеJSON.Идентификатор;
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				Операция, ДокументСсылка, НомерВерсии);
				
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("contactPerson",     Шапка.ОтветственныйПредставление);
			ТелоЗапроса.Вставить("releaseMethodType", ИнтерфейсСУЗСлужебный.СпособВыпускаВОборот(Шапка.СпособВводаВОборот, "СУЗ"));
			ТелоЗапроса.Вставить("createMethodType",  "SELF_MADE");  // SELF_MADE или CEM
			ТелоЗапроса.Вставить("productionOrderId", Шапка.ИдентификаторПроизводственногоЗаказа);
			ТелоЗапроса.Вставить("products",          Новый Массив);
			
			Если Шапка.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля Тогда
				
				СведенияОКонтрагенте = Новый Структура();
				СведенияОКонтрагенте.Вставить("НалоговыйНомерВСтранеРегистрации", "");
				СведенияОКонтрагенте.Вставить("Наименование",                     "");
				ИнтеграцияИСПереопределяемый.ЗаполнитьСведенияОбОрганизации(Шапка.Контрагент, СведенияОКонтрагенте);
				
				ТелоЗапроса.Вставить("exporter_taxpayer_id", СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации);
				
			КонецЕсли;
				
			Для Каждого СтрокаТЧ Из ГруппаСтрок Цикл
				
				СтрокаЗаказаКодовМаркировки = Новый Структура;
				СтрокаЗаказаКодовМаркировки.Вставить("gtin",             СтрокаТЧ.GTIN);
				СтрокаЗаказаКодовМаркировки.Вставить("quantity",         СтрокаТЧ.Количество);
				СтрокаЗаказаКодовМаркировки.Вставить("serialNumberType", ИнтерфейсСУЗСлужебный.СпособФормированияСерийногоНомера(СтрокаТЧ.СпособФормированияСерийногоНомера)); // OPERATOR или SELF_MADE
				СтрокаЗаказаКодовМаркировки.Вставить("templateId",       ИдентификаторШаблона);
				
				Если СтрокаТЧ.СпособФормированияСерийногоНомера = Перечисления.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно Тогда
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
					СтрокаЗаказаКодовМаркировки.Вставить("serialNumbers", ТабличнаяЧастьСерийныеНомера.Скопировать(ПараметрыОтбора).ВыгрузитьКолонку("СерийныйНомер"));
				КонецЕсли;
				
				ТелоЗапроса["products"].Добавить(СтрокаЗаказаКодовМаркировки);
				
				ПараметрыЗапроса = Новый Структура;
				ПараметрыЗапроса.Вставить("GTIN",                      СтрокаТЧ.GTIN);
				ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", "");
				ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", СтрокаТЧ.ИдентификаторСтроки);
				ПараметрыЗапроса.Вставить("Шаблон", Шаблон);
				
				СообщениеJSON.ПараметрыЗапроса.Добавить(ПараметрыЗапроса);
				
			КонецЦикла;
			
			ТелоСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
			
			СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
			СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИС.Исходящий;
			
			СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
			СообщениеJSON.Операция           = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки;
			
			СообщениеJSON.Версия             = НомерВерсии;
			
			СообщениеJSON.ТребуетсяПодписание       = Истина;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ФорматОбмена              = ФорматОбмена;
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция МассивГруппСтрокПоGTINИКоличеству(ТабличнаяЧастьТовары)
	
	МаксимальноеКоличествоСтрокВЗаказе = 10;
		
	МассивГруппСтрок = Новый Массив;
	
	ТаблицаПодсчетаGTIN = ТабличнаяЧастьТовары.Скопировать(, "GTIN,КоличествоСтрок");
	ТаблицаПодсчетаGTIN.Свернуть("GTIN", "КоличествоСтрок");
	ТабличнаяЧастьТовары.Индексы.Добавить("GTIN");

	Пока Истина Цикл
		
		ТаблицаПодсчетаGTIN.Сортировать("КоличествоСтрок Убыв");
		
		ТекущаяГруппаСтрок = Новый Массив;
		
		Для Каждого СтрокаТаблицыПодсчета Из ТаблицаПодсчетаGTIN Цикл
			
			Если СтрокаТаблицыПодсчета.КоличествоСтрок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоискаСтрок = Новый Структура("GTIN, СтрокаДобавлена", СтрокаТаблицыПодсчета.GTIN, Ложь);
			ПоискСтрокТовары     = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаСтрок);
			
			ВсеСтрокиПоGTINВыбраны = Истина;
			Для Каждого СтрокаТаблицы Из ПоискСтрокТовары Цикл
				Если ТекущаяГруппаСтрок.Количество() = МаксимальноеКоличествоСтрокВЗаказе Тогда
					ВсеСтрокиПоGTINВыбраны = Ложь;
				Иначе
					ТекущаяГруппаСтрок.Добавить(СтрокаТаблицы);
					СтрокаТаблицы.СтрокаДобавлена = Истина;
				КонецЕсли;
				Прервать;
			КонецЦикла;
			
			Если ВсеСтрокиПоGTINВыбраны Тогда
				СтрокаТаблицыПодсчета.КоличествоСтрок = СтрокаТаблицыПодсчета.КоличествоСтрок - 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущаяГруппаСтрок.Количество() Тогда
			МассивГруппСтрок.Добавить(ТекущаяГруппаСтрок);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивГруппСтрок;

КонецФункции

Функция ПолучениеGTINНаОстаткиJSON(ДокументСсылка, ДополнительныеПараметры) Экспорт
	
	Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.ВладелецФайла
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	// Общие реквизиты для табака и обуви
	|	Шапка.ВидПродукции                         КАК ВидПродукции,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|
	|	// Основные реквизиты
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.ПроизводственныйОбъект     КАК ПроизводственныйОбъект,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление
	|
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	// Универсальные реквизиты
	|	Товары.GTIN               КАК GTIN,
	|	Товары.КодТНВЭД           КАК КодТНВЭД,
	|	Товары.ВидОбуви           КАК ВидОбуви,
	|	Товары.СпособВводаВОборот КАК СпособВводаВОборот
	|
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.GTIN = """"
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	ТабличнаяЧастьТовары = РезультатЗапроса["Товары"].Выгрузить();
	Если ТабличнаяЧастьТовары.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Документ = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("products_list",         Новый Массив);
	ТелоЗапроса.Вставить("trade_participant_inn", РеквизитыОрганизации.ИНН);
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧастьТовары Цикл
		
		СтрокаЗаказаКодовМаркировки = Новый Структура;
		СтрокаЗаказаКодовМаркировки.Вставить("product_gender",
			ИнтерфейсСУЗСлужебный.ВидОбуви(СтрокаТЧ.ВидОбуви));
		СтрокаЗаказаКодовМаркировки.Вставить("release_method",
			ИнтерфейсСУЗСлужебный.СпособВыпускаВОборот(СтрокаТЧ.СпособВводаВОборот, "ОСТАТКИ"));
		СтрокаЗаказаКодовМаркировки.Вставить(
			"tnved_code_2", ИнтеграцияИСМПСлужебный.КодТНВЭДДляПередачиВИСМП(СтрокаТЧ.КодТНВЭД));
		
		ТелоЗапроса["products_list"].Добавить(СтрокаЗаказаКодовМаркировки);
		
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", "");
	ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", СтрокаТЧ.ИдентификаторСтроки);
	
	ПараметрыЗапросов = Новый Массив;
	ПараметрыЗапросов.Добавить(ПараметрыЗапроса);
	
	ТелоСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
	СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИС.Исходящий;
	
	СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
	СообщениеJSON.Операция           = Операция;
	
	СообщениеJSON.Версия             = НомерВерсии;
	СообщениеJSON.ПараметрыЗапроса   = ПараметрыЗапросов;
	
	СообщениеJSON.ТребуетсяПодписание       = Истина;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.ФорматОбмена              = Неопределено;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Процедура ДобавитьВМассивДоступныеДействия(ДопустимыеДействия, Объект)
	
	ЗапроситьGTIN = Ложь;
	
	Если ИнтеграцияИСМПКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(Объект.ВидПродукции)
		И ТребуетсяЗапросGTIN(Объект) Тогда
		ЗапроситьGTIN = Истина;
	КонецЕсли;
		
	Если ЗапроситьGTIN Тогда
		ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки);
	Иначе
		ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли