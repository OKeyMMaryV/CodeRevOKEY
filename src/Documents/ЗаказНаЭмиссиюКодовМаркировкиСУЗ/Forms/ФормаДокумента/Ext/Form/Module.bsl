#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП.Тип;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДоступныеВидыПродукцииИС = Новый Массив;
	ДоступныеВидыПродукцииИС.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
	ДоступныеВидыПродукцииИС.Добавить(Перечисления.ВидыПродукцииИС.Обувная);
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыУпаковка");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВидимостьПодключаемыхКоманд") Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВводДоступен() Тогда
		Возврат;
	ИначеЕсли РедактированиеФормыНедоступно
		Или НЕ ПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие" , Событие);
	ОписаниеСобытия.Вставить("Данные"  , Данные);
	
	Результат = МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства(ОписаниеСобытия);
	
	Если Результат <> Неопределено
		И Результат.Источник = "ПодключаемоеОборудование"
		И Результат.ИмяСобытия = "ScanData"
		И Найти(ПоддерживаемыеТипыПодключаемогоОборудования, "СканерШтрихкода") > 0 Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ВнешнееСобытиеОбработатьВводШтрихкода");
		
		ДанныеШтрихкода = СобытияФормИСКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Результат.Параметр);
		ВводШтрихкодаЗавершение(ДанныеШтрихкода, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ОбновитьПредставленияНаФорме();
	
	РассчитатьЗависимыеПризнакиФормы();
	
	ЗаполнитьКоличествоЭмитированоВТоварах();
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	РазблокироватьДанныеФормыДляРедактирования();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	СобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Заказ на эмиссию кодов маркировки"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Заказ на эмиссию кодов маркировки"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

#Область ПроизводственныйОбъектАдрес

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	Объект.ПроизводственныйОбъектАдресСтрокой = ВыбранноеЗначение.Представление;
	КомментарийАдресаПроизводственногоОбъекта   = ВыбранноеЗначение.Комментарий;
	Объект.ПроизводственныйОбъектАдрес          = ВыбранноеЗначение.КонтактнаяИнформация;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.ПроизводственныйОбъектАдресСтрокой = "";
		КомментарийАдресаДоставки                   = "";
		Объект.ПроизводственныйОбъектАдрес          = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииАдресаДоставки.
	Объект.ПроизводственныйОбъектАдресСтрокой = Текст;
	Объект.ПроизводственныйОбъектАдрес = ЗначенияПолейКонтактнойИнформацииСервер(
		Текст, ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта, КомментарийАдресаДоставки);

КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> Объект.ПроизводственныйОбъектАдресСтрокой Тогда
		Объект.ПроизводственныйОбъектАдресСтрокой = Элемент.ТекстРедактирования;
		Объект.ПроизводственныйОбъектАдрес = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта);
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           Объект.ПроизводственныйОбъектАдрес);
	ПараметрыОткрытия.Вставить("Представление",           Объект.ПроизводственныйОбъектАдресСтрокой);
	ПараметрыОткрытия.Вставить("Комментарий",             КомментарийАдресаПроизводственногоОбъекта);
	
	// Переопределямый заголовок формы, по умолчанию отобразятся данные по ВидКонтактнойИнформации.
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Адрес доставки'"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	// Сбрасываем как представления, так и внутренние значения полей.
	Объект.ПроизводственныйОбъектАдресСтрокой = "";
	КомментарийАдресаПроизводственногоОбъекта   = "";
	Объект.ПроизводственныйОбъектАдрес          = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(ЭтотОбъект, ТекущиеДанные);
	
	ОбновитьСтатусыПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокПриИзменении(Элемент)
	УстановитьОтборСтрок(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
	НастроитьЭлементыФормыНаСервере();
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыпускаВОборотПриИзменении(Элемент)
	
	ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
	
	Если Объект.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля") Тогда
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
	Иначе
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
	КонецЕсли;
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	Если ПредыдущийСпособВводаВОборот <> Объект.СпособВводаВОборот
		И Не ЭтоМаркировкаОстатков
		И ПредыдущийСпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков") Тогда
		ОчиститьGTIN();
	КонецЕсли;
	
	ПредыдущийСпособВводаВОборот = Объект.СпособВводаВОборот;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0
		И Объект.ВидПродукции <> ВыбранноеЗначение Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru='При изменении вида продукции табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	ЗаполнитьПоляСтрокиТоварыПоСтатистике(Элементы.Товары.ТекущаяСтрока);
	ОбновитьСтатусыПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ВидыПродукции = Новый Массив;
	ВидыПродукции.Добавить(Объект.ВидПродукции);
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
		Элемент, ТекущиеДанные, СтандартнаяОбработка, ВидыПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	ЗаполнитьПоляСтрокиТоварыПоСтатистике(Элементы.Товары.ТекущаяСтрока);
	ОбновитьСтатусыПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.СписокВыбора.ЗагрузитьЗначения(
		МассивЗначенийGTINДляВыбора(Элементы.Товары.ТекущаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидОбувиПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.GTIN = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособВводаВОборотПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.GTIN = "";
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ОбновитьСтатусУказанияСерийныхНомеров();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособФормированияСерийногоНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СпособФормированияСерийногоНомера = ТекущиеДанные.СпособФормированияСерийногоНомера;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособФормированияСерийногоНомераПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если СпособФормированияСерийногоНомера = ТекущиеДанные.СпособФормированияСерийногоНомера Тогда
		Возврат;
	КонецЕсли;
	
	АвтоматическоеФормирование = ПредопределенноеЗначение(
		"Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически");
	Если ТекущиеДанные.СпособФормированияСерийногоНомера = АвтоматическоеФормирование Тогда
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
		НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросОбУдаленииСвязанныхСерийныхНомеровЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Все связанные серийные номера будут очищены. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбновитьСтатусУказанияСерийныхНомеров();
			
		КонецЕсли;
		
	Иначе
		
		ОбновитьСтатусУказанияСерийныхНомеров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораКодТНВЭД(Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДоступныеGTIN(Команда)
	
	ОчиститьСообщения();
	
	Если ЭтоМаркировкаОстатков И Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДоступныеGTINНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПередатьСведенияОТоварах(Команда)

	Товары = Новый Массив;
	Для Каждого СтрокаТовары Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Новый Структура("Номенклатура, Характеристика, GTIN, КодТНВЭД");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Объект.Товары.НайтиПоИдентификатору(СтрокаТовары));
		Товары.Добавить(ДанныеСтроки);
	КонецЦикла;

	ОткрытьФорму("Обработка.ПодготовкаСведенийВКаталогGS46.Форма.Форма", 
		Новый Структура("Товары, Организация", Товары, Объект.Организация), ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	СобытияФормИСМПКлиент.ОтрытьФормуПечатиКодовМаркировок(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВиртуальнаяАгрегация(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Документ", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ВидПродукции", Объект.ВидПродукции);
	
	ОткрытьФорму(
		"Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма",
		ПараметрыОткрытия,
		ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	
	СобытияФормИСМПКлиентПереопределяемый.ВыгрузитьДанныеВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводШтрихкодаЗавершение", ЭтотОбъект);
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОписанияОстатков(Команда)
	
	ОповещениеЗакрытияФормыЗаполненияОстатков = Новый ОписаниеОповещения(
		"Подключаемый_ЗаполнениеПараметровОстатковЗавершение", ЭтотОбъект, Элементы.Товары.ВыделенныеСтроки);
		
	ОткрытьФорму(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаЗаполненияТовары",,
		ЭтотОбъект,,,,
		ОповещениеЗакрытияФормыЗаполненияОстатков);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерийныеНомера(Команда)
	ОткрытьФормуВыбораСерий();
КонецПроцедуры

#Область ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	// Реквизит формы, контролирующий работу с адресом доставки.
	// Используемые поля аналогичны полям справочника ВидыКонтактнойИнформации.
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта = Новый Структура;
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("АдресТолькоРоссийский",        Истина);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("СкрыватьНеактуальныеАдреса",   Ложь);
	
	// Считываем данные из полей адреса в реквизиты для редактирования.
	Объект.ПроизводственныйОбъектАдресСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		Объект.ПроизводственныйОбъектАдрес);
	КомментарийАдресаПроизводственногоОбъекта = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(
		Объект.ПроизводственныйОбъектАдрес);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция МассивЗначенийGTINДляВыбора(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Возврат ИнтеграцияИСМП.МассивЗначенийGTINДляВыбора(ТекущиеДанные, ЭтотОбъект, ЭтоМаркировкаОстатков);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКоличествоЭмитированоВТоварах()
	
	Если Не ОтобразитьКоличествоЭмитировано Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТовары = Объект.Товары.Выгрузить();
	ЗаполнениеОбъектовПоСтатистикеИСМП.ПронумероватьИсходнуюТаблицуДанныхЗаполнения(ТаблицаТовары);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	&Ссылка                            КАК Ссылка,
		|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ТаблицаТовары.Характеристика       КАК Характеристика,
		|	ТаблицаТовары.Количество           КАК Количество,
		|	ТаблицаТовары.GTIN                 КАК GTIN
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	GTIN,
		|	Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	МАКСИМУМ(ВременнаяТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА ПулКодовМаркировкиСУЗ.Номенклатура ЕСТЬ NULL
		|			ТОГДА 0
		|			ИНАЧЕ 1 КОНЕЦ)                      КАК КоличествоЭмитировано
		|ИЗ
		|	ВременнаяТаблицаТовары                                     КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ПО ВременнаяТаблицаТовары.Номенклатура  = ПулКодовМаркировкиСУЗ.Номенклатура
		|		И ВременнаяТаблицаТовары.Характеристика = ПулКодовМаркировкиСУЗ.Характеристика
		|		И ВременнаяТаблицаТовары.Ссылка         = ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию
		|		И ВременнаяТаблицаТовары.GTIN           = ПулКодовМаркировкиСУЗ.GTIN
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки
		|";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Ссылка",        Объект.Ссылка);
	
	ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		СтрокаТовары                       = Объект.Товары.Получить(ВыборкаИзРезультатаЗапроса.ИндексИсходнойСтроки);
		СтрокаТовары.КоличествоЭмитировано = ВыборкаИзРезультатаЗапроса.КоличествоЭмитировано;
		Если ВыборкаИзРезультатаЗапроса.Количество <> ВыборкаИзРезультатаЗапроса.КоличествоЭмитировано Тогда
			СтрокаТовары.ЕстьОтличия = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыНаСервере()
	
	МаркировкаОстатков                         = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	ВидПродукцииПоддерживаетМаркировкуОстатков = ИнтеграцияИСМПКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(Объект.ВидПродукции);
	
	ЭлементВыбораМаркировкаОстатков = Элементы.СпособВыпускаВОборот.СписокВыбора.НайтиПоЗначению(МаркировкаОстатков);
	Если ВидПродукцииПоддерживаетМаркировкуОстатков И ЭлементВыбораМаркировкаОстатков = Неопределено Тогда
		Элементы.СпособВыпускаВОборот.СписокВыбора.Добавить(МаркировкаОстатков);
	ИначеЕсли Не ВидПродукцииПоддерживаетМаркировкуОстатков И ЭлементВыбораМаркировкаОстатков <> Неопределено Тогда
		Элементы.СпособВыпускаВОборот.СписокВыбора.Удалить(ЭлементВыбораМаркировкаОстатков);
		Объект.СпособВводаВОборот = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыПриНеобходимости()
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗависимыеПризнакиФормы()
	
	СтатусПозволяетОтображатьЭмитировано = Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично
		Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
	
	ОтобразитьКоличествоЭмитировано = Не Объект.Ссылка.Пустая() И СтатусПозволяетОтображатьЭмитировано 
		И ВПулеЕстьКодыМаркировки(Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВПулеЕстьКодыМаркировки(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &ЗаказНаЭмиссию";
	
	Запрос.УстановитьПараметр("ЗаказНаЭмиссию", Документ);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)

	Если Форма.ОтборСтрок = "НеПолучено" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ЕстьОтличия", Истина);
		Форма.Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Форма.Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСтрокиТоварыПоСтатистике(ТекущаяСтрока)
	
	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) 
		Или Не ЗначениеЗаполнено(ДанныеСтроки.Характеристика) И ДанныеСтроки.ХарактеристикиИспользуются Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоляСтрокиТоварыПоСтатистикеСервер(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляСтрокиТоварыПоСтатистикеСервер(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если Объект.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда 
		ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьСтрокуТаблицыТоварыЗаказаНаЭмиссиюКодмаМаркировки(
			ТекущиеДанные, Объект.Организация, Объект.СпособВводаВОборот);
	Иначе
		ТекущиеДанные.СпособФормированияСерийногоНомера = СпособФормированияСерийногоНомераПоСтатистике(
			ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	ОтборСтрок      = "Все";
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ);
	ПредыдущийСпособВводаВОборот = Объект.СпособВводаВОборот;
	
	СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ОбновитьПредставленияНаФорме();
	
	НастроитьЭлементыФормыНаСервере();
	
	РассчитатьЗависимыеПризнакиФормы();
	
	ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	ЗаполнитьКоличествоЭмитированоВТоварах();
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, ПараметрыЗаполнения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, ПараметрыЗаполнения)
	
	СобытияФормИСМППереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	Статус          = МенеджерОбъекта.СтатусПоУмолчанию();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбъектРасчета", Объект);
	
	ДопустимыеДействия = МенеджерОбъекта.ДопустимыеДействия(Объект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		Запрос.УстановитьПараметр(
			"МассивДальнейшиеДействия", ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Статус = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			
			ДальнейшиеДействияРегистр = Новый Массив;
			ДальнейшиеДействияРегистр.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшиеДействияРегистр.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшиеДействияРегистр.Добавить(Выборка.ДальнейшееДействие3);
			
			Для Каждого ДальнейшееДействиеРегиср Из ДальнейшиеДействияРегистр Цикл
				
				ДобавляемоеДействие = ДальнейшееДействиеРегиср;
				Если ДопустимыеДействия.Найти(ДобавляемоеДействие) = Неопределено Тогда
					Если ДобавляемоеДействие =
						Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки Тогда
						ДобавляемоеДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки;
					ИначеЕсли ДобавляемоеДействие =
						Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки Тогда
						ДобавляемоеДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки;
					КонецЕсли;
				КонецЕсли;
				
				Если ДальнейшееДействие.Найти(ДобавляемоеДействие) = Неопределено Тогда
					ДальнейшееДействие.Добавить(ДобавляемоеДействие);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	
	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(
		Статус,
		ДальнейшееДействие,
		ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = (Статус <> Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Черновик
		И Статус <> Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПGTINНаОстаткиПолучены
		И МенеджерОбъекта.СтатусыОшибок().Найти(Статус) = Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВидОбуви.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСпособВводаВОборот.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = "04";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыМаксимальнаяРозничнаяЦена.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыМаксимальнаяРозничнаяЦена.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '0,00'"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусИСМП();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьДоступностьЭлементовФормы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоТабачнаяПродукция  = (Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная"));
	ЭтоОбувнаяПродукция   = (Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная"));
	
	ЭтоТрансграничнаяТорговля = (Объект.СпособВводаВОборот = ПредопределенноеЗначение(
		"Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля"));
		
	Элементы.ГруппаОбувнаяПродукция.Видимость                    = ЭтоОбувнаяПродукция;
	Элементы.ТоварыПодготовитьПередатьСведенияОТоварах.Видимость = ЭтоОбувнаяПродукция;
	
	Элементы.ГруппаТабачнаяПродукция.Видимость         = ЭтоТабачнаяПродукция;
	Элементы.ТоварыМаксимальнаяРозничнаяЦена.Видимость = ЭтоТабачнаяПродукция;
	Элементы.ТоварыТоварныйЗнак.Видимость              = ЭтоТабачнаяПродукция;
	
	Элементы.ТоварыВидОбуви.Видимость                      = Форма.ЭтоМаркировкаОстатков;
	Элементы.ТоварыСпособВводаВОборот.Видимость            = Форма.ЭтоМаркировкаОстатков;
	Элементы.ТоварыКодТНВЭД.Видимость                      = Форма.ЭтоМаркировкаОстатков;
	Элементы.ЗаполнитьПараметрыОписанияОстатков.Видимость = Форма.ЭтоМаркировкаОстатков;
	
	Элементы.ТоварыШаблон.СписокВыбора.Очистить();
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции);
	Для Каждого ЭлементСпискаЗначений Из ДоступныеШаблоны Цикл
		Элементы.ТоварыШаблон.СписокВыбора.Добавить(
			ЭлементСпискаЗначений.Значение, ЭлементСпискаЗначений.Представление);
	КонецЦикла;
	
	Элементы.ТоварыШаблон.Видимость = Элементы.ТоварыШаблон.СписокВыбора.Количество() > 1;
	
	ЗависимыеОтСтатусаОбработкиЗаказа = Новый Массив;
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ГруппаШапка");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("Товары");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыКоманднаяПанельЕще");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыГруппаПодменюЗаполнить");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыГруппаТорговоеОборудование");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыУказатьСерийныеНомера");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ГруппаДоговор");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("Ответственный");
	
	ИнтеграцияИСКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма,
		ЗависимыеОтСтатусаОбработкиЗаказа, Не Форма.РедактированиеФормыНеДоступно);
	
	Элементы.ТоварыКоличествоЭмитировано.Видимость = Форма.ОтобразитьКоличествоЭмитировано;
	Элементы.ОтборСтрок.Видимость                  = Форма.ОтобразитьКоличествоЭмитировано;
	Элементы.Контрагент.Видимость                  = ЭтоТрансграничнаяТорговля;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ТекстОшибки = "";
	ДанныеШтрихкода.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
	ДанныеШтрихкода.Вставить("ШтрихкодBase64", Истина);
	
	ОбработатьШтрихкоды(ДанныеШтрихкода, КэшированныеЗначения, ТекстОшибки);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.ТекстОшибки = ТекстОшибки;
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытия);
		
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляОбработкиШтрихкодов.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеСопоставленияНеизвестныхШтрихкодов", ЭтотОбъект);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ДанныеДляОбработкиШтрихкодов.НеизвестныеШтрихкоды, ЭтотОбъект, ОповещениеОЗакрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСопоставленияНеизвестныхШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
		ОбработатьШтрихкоды(Результат.ЗарегистрированныеШтрихкоды[0], КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДопустимыйФорматШтрихкода(ДанныеШтрихкодов)
	
	Если Не ДанныеШтрихкодов.Свойство("ШтрихкодBase64") Или Не ДанныеШтрихкодов.ШтрихкодBase64 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗначениеШтрихкода = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ДанныеШтрихкодов.Штрихкод);
	Если НайтиНедопустимыеСимволыXML(ЗначениеШтрихкода) > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеШтрихкодов.Штрихкод = ЗначениеШтрихкода;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, КэшированныеЗначения, ТекстОшибки = "")
	
	Если Не ДопустимыйФорматШтрихкода(ДанныеШтрихкодов) Тогда
		ТекстОшибки = НСтр("ru='Недопустимый формат штрихкода'");
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = Новый Массив;
	ВидыПродукции.Добавить(Объект.ВидПродукции);
	
	ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(ВидыПродукции);
	Если ЭтоМаркировкаОстатков Тогда
		ПараметрыЗаполнения.ЗаполнитьGTIN = Ложь;
	КонецЕсли;
	
	ДанныеДляОбработкиШтрихкодов = Неопределено;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Структура") Тогда
		ДанныеПоШтрихкодам = Новый Массив;
		ДанныеПоШтрихкодам.Добавить(ДанныеШтрихкодов);
	Иначе
		ДанныеПоШтрихкодам = ДанныеШтрихкодов;
	КонецЕсли;
	
	ТоварыДоОбработки = Объект.Товары.Выгрузить();
	
	ШтрихкодированиеИСПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
		ЭтотОбъект, ДанныеПоШтрихкодам, ПараметрыЗаполнения, ДанныеДляОбработкиШтрихкодов);
	
	ШтрихкодированиеИСПереопределяемый.ОбработатьШтрихкоды(ЭтотОбъект, ДанныеДляОбработкиШтрихкодов, КэшированныеЗначения);
	
	ЗаполнитьСтрокиТоваровПоСтатистике(ТоварыДоОбработки);
	
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиТоваровПоСтатистике(ТоварыДоОбработки)
	
	Если ТоварыДоОбработки.Количество() < Объект.Товары.Количество() Тогда
		ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамЗаказаНаЭмиссиюКодовМаркировкиСУЗ(
			Объект.Товары, Объект.Организация, Объект.СпособВводаВОборот, "СпособФормированияСерийногоНомера");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, НовыйВидПродукции) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		УстановленныйСпособВвода = Объект.СпособВводаВОборот;
		
		Объект.ВидПродукции = НовыйВидПродукции;
		Объект.Товары.Очистить();
		НастроитьЭлементыФормыНаСервере();
		ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
		
		ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
		
		Если УстановленныйСпособВвода = ПредопределенноеЗначение(
			"Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков") Тогда
			ОбновитьСтатусИСМП();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не (ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСерий()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.СпособФормированияСерийногоНомера <> ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
	
	СерийныеНомера = Новый Массив;
	Для Каждого Строка Из НайденныеСтроки Цикл
		СерийныеНомера.Добавить(Строка.СерийныйНомер);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СерийныеНомера",             СерийныеНомера);
	ПараметрыОткрытия.Вставить("Номенклатура",               ТекущиеДанные.Номенклатура);
	ПараметрыОткрытия.Вставить("Характеристика",             ТекущиеДанные.Характеристика);
	ПараметрыОткрытия.Вставить("ТребуемоеКоличествоНомеров", ТекущиеДанные.Количество);
	ПараметрыОткрытия.Вставить("ВидПродукции",               Объект.ВидПродукции);
	
	ОткрытьФорму("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаВыбораСерий", 
		ПараметрыОткрытия, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ФормаВыбораСерийЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбУдаленииСвязанныхСерийныхНомеровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТекущиеДанные.СпособФормированияСерийногоНомера = СпособФормированияСерийногоНомера;
	Иначе
		ОчиститьСерийныеНомераПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки);
		ОбновитьСтатусУказанияСерийныхНомеров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыбораСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОчиститьСерийныеНомераПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки);
	
	Для Каждого Элемент Из Результат Цикл
		
		НоваяСтрокаСерии = Объект.СерийныеНомера.Добавить();
		НоваяСтрокаСерии.СерийныйНомер       = Элемент;
		НоваяСтрокаСерии.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		
	КонецЦикла;
	
	ОбновитьСтатусУказанияСерийныхНомеров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусУказанияСерийныхНомеров()
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		Если СтрокаТовары.СпособФормированияСерийногоНомера = ПредопределенноеЗначение(
			"Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически") Тогда
			СтрокаТовары.СтатусУказанияСерии = 2;
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
		НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = СтрокаТовары.Количество Тогда
			СтрокаТовары.СтатусУказанияСерии = 2;
		Иначе
			СтрокаТовары.СтатусУказанияСерии = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСерийныеНомераПоИдентификатору(ИдентификаторСтроки)
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДляУдаления Из НайденныеСтроки Цикл
		
		Объект.СерийныеНомера.Удалить(СтрокаДляУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Ложь)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьКодыМаркировки" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьGTINНаОстатки" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);

		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Тогда
		СобытияФормИСМПКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма);
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступныеGTINНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	ТребуетсяОбновитьКлючСессии = ЗаполнитьДоступныеGTINНаСервере();
	
	Если ТребуетсяОбновитьКлючСессии = Истина И Результат = Неопределено Тогда
		ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(
			Объект.Организация);
		
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ПараметрыЗапросаКлючаСессии,
			Новый ОписаниеОповещения("ЗаполнитьДоступныеGTINНаКлиенте", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДоступныеGTINНаСервере()
	
	ТаблицаПроверки = Объект.Товары.Выгрузить(,"Номенклатура,Характеристика");
	ТаблицаПроверки.Свернуть("Номенклатура,Характеристика");
	ТаблицаПроверки.Индексы.Добавить("Номенклатура,Характеристика");
	
	ПроверяемыеGTIN = Новый Массив;
	СоответствиеGTIN = Новый Соответствие;
	
	ШтрихкодированиеИСМППереопределяемый.ЗаполнитьПроверяемыеGTIN(ТаблицаПроверки, ПроверяемыеGTIN, СоответствиеGTIN);
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
			Если ПроверяемыеGTIN.Найти(СтрокаТовары.GTIN) = Неопределено Тогда
				ПроверяемыеGTIN.Добавить(СтрокаТовары.GTIN);
				СоответствиеGTIN.Вставить(СтрокаТовары.GTIN,
					Новый Структура(
						"Номенклатура,Характеристика", СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПроверки.Колонки.Добавить("ЕстьGTIN", Новый ОписаниеТипов("Булево"));
	ТаблицаПроверки.Колонки.Добавить("ДоступныеGTIN");
	
	Если ПроверяемыеGTIN.Количество() > 0 Тогда
		
		Если Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
			РезультатПроверки = ИнтерфейсМОТП.ДанныеПродукцииПоШтрихкодуEAN(ПроверяемыеGTIN);
		Иначе
			РезультатПроверки = ИнтерфейсИСМП.ДанныеПродукцииПоШтрихкодуEAN(ПроверяемыеGTIN);
		КонецЕсли;
		
		Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат Истина;
		ИначеЕсли РезультатПроверки.ДанныеПродукцииПоШтрихкодуEAN = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(РезультатПроверки.ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		РезультатПроверки = РезультатПроверки.ДанныеПродукцииПоШтрихкодуEAN;
		
		ИНН = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Объект.Организация).ИНН;
		Для Каждого СтрокаGTIN Из СоответствиеGTIN Цикл
			
			Если РезультатПроверки.Получить(СтрокаGTIN.Ключ) <> Неопределено 
				И РезультатПроверки.Получить(СтрокаGTIN.Ключ).ИННПроизводителя <> ИНН Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаПроверки.НайтиСтроки(
				Новый Структура("Номенклатура,Характеристика",
					СтрокаGTIN.Значение.Номенклатура, СтрокаGTIN.Значение.Характеристика))[0];
			Если Не СтрокаТаблицы.ЕстьGTIN Тогда
				СтрокаТаблицы.ЕстьGTIN = Истина;
				СтрокаТаблицы.ДоступныеGTIN = Новый Массив;
			КонецЕсли;
			СтрокаТаблицы.ДоступныеGTIN.Добавить(ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаGTIN.Ключ));
			
		КонецЦикла;
		
		Для Каждого СтрокаДокумента Из Объект.Товары Цикл
			
			СтрокаТаблицы = ТаблицаПроверки.НайтиСтроки(
				Новый Структура(
					"Номенклатура, Характеристика",
					СтрокаДокумента.Номенклатура, СтрокаДокумента.Характеристика))[0];
			
			Если ЗначениеЗаполнено(СтрокаДокумента.GTIN) И
				(Не СтрокаТаблицы.ЕстьGTIN
				Или СтрокаТаблицы.ДоступныеGTIN.Найти(СтрокаДокумента.GTIN) = Неопределено) Тогда
				СтрокаДокумента.GTIN = Неопределено;
			КонецЕсли;
			
			Если Не СтрокаТаблицы.ЕстьGTIN Тогда
				СтрокаДокумента.ТребуетсяГенерацияGTIN = Истина;
			ИначеЕсли СтрокаТаблицы.ДоступныеGTIN.Количество() И Не ЗначениеЗаполнено(СтрокаДокумента.GTIN) Тогда
				СтрокаДокумента.GTIN = СтрокаТаблицы.ДоступныеGTIN[0];
				ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(ЭтотОбъект, СтрокаДокумента);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.GTIN)
				И РезультатПроверки.Получить(СтрокаДокумента.GTIN) = Неопределено Тогда
				СтрокаДокумента.ТребуетсяГенерацияGTIN = Истина;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЭтоМаркировкаОстатков Тогда
	
		ТребуетсяОбновитьКлючСессии = ИнтеграцияИСМПСлужебный.ЗаполнитьGTINМаркировкиОстатков(
			Объект.Товары, Объект.Организация);
		
		Если ТребуетсяОбновитьКлючСессии Тогда
			Возврат Истина;
		КонецЕсли;
		
		ОбновитьСтатусИСМП();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция СпособФормированияСерийногоНомераПоСтатистике(Номенклатура, Характеристика)
	
	Возврат ЗаполнениеОбъектовПоСтатистикеИСМП.СпособФормированияСерийногоНомераПоСтатистике(
		Номенклатура, Характеристика)
	
КонецФункции

#КонецОбласти

#Область РаботаСТСД

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, ДополнительныеПараметры) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = Новый Структура("Штрихкоды, Обработано, Всего", Штрихкоды, 0, Штрихкоды.Количество());
	ШтрихкодированиеИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД() Экспорт
	
	Если ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Всего Тогда
		ШтрихкодированиеИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		ЗагрузкаДанныхТСД = Неопределено;
	Иначе
		Штрихкод = ЗагрузкаДанныхТСД.Штрихкоды[ЗагрузкаДанныхТСД.Обработано];
		ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
		ДанныеШтрихкода = Новый Структура("Штрихкод, Количество", Штрихкод, 1);
		ВводШтрихкодаЗавершение(ДанныеШтрихкода, Новый ОписаниеОповещения("ОбработатьОчереднойШтрихкод", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчереднойШтрихкод(Результат, ДополнительныеПараметры) Экспорт
	ПодключитьОбработчикОжидания("ОбработатьПолученныеДанныеТСД", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОстаткиОбуви

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Если ДополнительныеПараметры.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки")
		Или ДополнительныеПараметры.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки") Тогда
		Прочитать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнениеПараметровОстатковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСписка Из ДополнительныеПараметры Цикл
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(СтрокаСписка);
		Если ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого КлючИзНачение Из Результат Цикл
			СтрокаТовары[КлючИзНачение.Ключ] = КлючИзНачение.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьGTIN()
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.GTIN = "";
	КонецЦикла;
	ОбновитьСтатусИСМП();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.ДокументОснование = Неопределено;
	ОчиститьGTIN();
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьФлагЭтоМаркировкаОстатков(Форма)
	
	МаркировкаОстатков = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков");
	
	Форма.ЭтоМаркировкаОстатков = (Форма.Объект.СпособВводаВОборот = МаркировкаОстатков);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(Форма, ТекущиеДанные)
	
	Если Форма.ЭтоМаркировкаОстатков И СтрНачинаетсяС(ТекущиеДанные.GTIN, "04") Тогда
		ТекущиеДанные.ВидОбуви           = Неопределено;
		ТекущиеДанные.СпособВводаВОборот = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти