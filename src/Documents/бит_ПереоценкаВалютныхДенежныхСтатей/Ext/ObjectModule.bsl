#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура - структура шапки документа.
//  СтруктураКурсыВалют 	- Структура - структура курсов валют.
// 
// Возвращаемое значение:
//  Структура - структура таблиц документа.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют)  Экспорт
	
	ИмяРегБухгалтерии = СтруктураШапкиДокумента.ИмяРегистраБухгалтерии;
	ИмяПланаСчетов 	  = Метаданные.РегистрыБухгалтерии[ИмяРегБухгалтерии].ПланСчетов.Имя;
	
	// Получим массив валютных счетов для переоценки.
	МассивСчетов = Новый Массив;
	
	//БИТ Тртилек 08.02.2012 если вид движения "Переоценка суммы международного учета", то счета отбираются все
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ПланСчетов.Ссылка
	//|ИЗ
	//|	ПланСчетов." + ИмяПланаСчетов + " КАК ПланСчетов
	//|ГДЕ
	//|	ПланСчетов.Валютный";
	Если ЭтотОбъект.ВидОперации <> Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПереоценкаСуммыМеждународногоУчета Тогда
		///БИТ Тртилек
		Запрос = Новый Запрос;
		Запрос.Текст =
				"ВЫБРАТЬ
				|	ПланСчетов.Ссылка
				|ИЗ
				|	ПланСчетов." + ИмяПланаСчетов + " КАК ПланСчетов
				|ГДЕ
				|	ПланСчетов.Валютный";
		
		//БИТ Тртилек 08.02.2012
	Иначе
		СчетаИсключенияЗапрос = Новый Запрос;
		СчетаИсключенияЗапрос.Текст = "ВЫБРАТЬ
				|	бит_му_Настройки.Значение
				|ИЗ
				|	РегистрСведений.бит_му_Настройки КАК бит_му_Настройки
				|ГДЕ
				|	бит_му_Настройки.Группа = ""Счета-исключения для переоценки МСФО""";
		СчетаИсключенияВыборка = СчетаИсключенияЗапрос.Выполнить().Выбрать();
		СчетаИсключения = Новый СписокЗначений;
		Пока СчетаИсключенияВыборка.Следующий() Цикл
			СчетаИсключения.Добавить(СчетаИсключенияВыборка.Значение);
		КонецЦикла;
		Запрос = Новый Запрос;
		Если СчетаИсключения.Количество() > 0 Тогда
			Запрос.Текст =
					"ВЫБРАТЬ
					|	ПланСчетов.Ссылка
					|ИЗ
					|	ПланСчетов.бит_Дополнительный_2 КАК ПланСчетов
					|ГДЕ
					|	(НЕ ПланСчетов.Ссылка В ИЕРАРХИИ (&СчетаИсключения))
					|	И ПланСчетов.Забалансовый = ЛОЖЬ";
		Иначе
			Запрос.Текст =
					"ВЫБРАТЬ
					|	ПланСчетов.Ссылка
					|ИЗ
					|	ПланСчетов.бит_Дополнительный_2 КАК ПланСчетов
					|ГДЕ
					|	ПланСчетов.Забалансовый = ЛОЖЬ";
		КонецЕсли;
		Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
		
	КонецЕсли;
	///БИТ Тртилек
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл
			МассивСчетов.Добавить(ВыборкаИзЗапроса.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаПереоценки"	 	  , СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("ИмяРегБухгалтерии" 	  , ИмяРегБухгалтерии);
	СтруктураПараметров.Вставить("МассивСчетов"		 	  , МассивСчетов);
	СтруктураПараметров.Вставить("ПереоценкаСуммаУпр"	  , СтруктураШапкиДокумента.ПереоценкаСуммаУпр);
	СтруктураПараметров.Вставить("ПереоценкаСуммаРегл"	  , СтруктураШапкиДокумента.ПереоценкаСуммаРегл);
	СтруктураПараметров.Вставить("ПереоценкаСуммаСценарий", СтруктураШапкиДокумента.ПереоценкаСуммаСценарий);
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() И бит_ОбщегоНазначения.ЕстьРеквизит("ПереоценкаСуммаМУ", Метаданные.Документы.бит_ПереоценкаВалютныхДенежныхСтатей) Тогда
		СтруктураПараметров.Вставить("ПереоценкаСуммаМУ", СтруктураШапкиДокумента.ПереоценкаСуммаМУ);
	КонецЕсли;
	СтруктураПараметров.Вставить("СтруктураКурсыВалют"	  , СтруктураКурсыВалют);
	СтруктураПараметров.Вставить("ЦФО"	                  , СтруктураШапкиДокумента.ЦФО);
	СтруктураПараметров.Вставить("ПоВсемОрганизациям"     , СтруктураШапкиДокумента.ПоВсемОрганизациям);
	СтруктураПараметров.Вставить("ПоВсемЦФО"              , СтруктураШапкиДокумента.ПоВсемЦФО);
	
	//БИТ Тртилек 01.02.2012
	СтруктураПараметров.Вставить("Документ"	              , СтруктураШапкиДокумента.Ссылка);
	///БИТ Тртилек
	
	// Если это регистр бюджетирования, тогда
	Если ИмяРегБухгалтерии = "бит_Бюджетирование" Тогда
		СтруктураПараметров.Вставить("Сценарий", СтруктураШапкиДокумента.Сценарий);
	    ЕстьОрганизация = бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация();			
		Если ЕстьОрганизация Тогда
			
			СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
			
		КонецЕсли; 
	Иначе
		СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	КонецЕсли;
	
	// Получим таблицу по переоценки валютных денежных статей.
	ТаблицаПоПереоценке = бит_УправленческийУчет.ПолучитьТаблицуПереоценкиВалютныхДенежныхСтатей(СтруктураПараметров);
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаПереоценки", ТаблицаПоПереоценке);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента(ДанныеЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(, ОбъектКопирования);
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента();
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,МУ,Регл");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	// Если это регистр бюджетирования, тогда
	Если СтруктураШапкиДокумента.ИмяРегистраБухгалтерии = "бит_Бюджетирование" Тогда
		
		// Получим курс кратность валюты сценария.
		ВалютаСценария	   	   = СтруктураШапкиДокумента.Сценарий.Валюта;
		СтруктураКурсыСценария = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария, СтруктураШапкиДокумента.Дата);
		СтруктураКурсыСценария.Вставить("Валюта", ВалютаСценария);
		
		СтруктураКурсыВалют.Вставить("Сценарий", СтруктураКурсыСценария);
		СтруктураШапкиДокумента.Вставить("ЕстьАналитикаОрганизация", бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация());		
		
	КонецЕсли;
	
	// Получим структура таблиц.
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют);	
	
	ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ДанныеЗаполнения		  - Структура. По умолчанию Неопределено.
//  ПараметрОбъектКопирования - ДокументОбъект. По умолчанию Неопределено.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ДанныеЗаполнения = Неопределено, ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		// Заполнение объекта системы
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ОбъектСистемы) Тогда
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
				И ДанныеЗаполнения.Свойство("ОбъектСистемы") Тогда
				ОбъектСистемы = ДанныеЗаполнения.ОбъектСистемы;
			Иначе
				// Для новой записи заполним объект системы из настроек пользователя.
				ПолучаемаяНастройка = ПланыВидовХарактеристик.бит_НастройкиПользователей.ОсновнойРегистрБухгалтерииУУ;
				ОбъектСистемы 		= бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(ПолучаемаяНастройка);
			КонецЕсли;
			
		КонецЕсли; 
				
		ЭтотОбъект.ПереоценкаСуммаУпр = Истина;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.ОбъектСистемы) 
			 И ЭтотОбъект.ОбъектСистемы.ИмяОбъекта = "бит_Дополнительный_2" Тогда
			
			ЭтотОбъект.ПереоценкаСуммаМУ = Истина;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Функция получает структуру шапки документа.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураШапкиДокумента - Структура.
// 
Функция СформироватьСтруктуруШапкиДокумента()
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Дополним структуру.
	ИмяРегистраБухгалтерии = СтруктураШапкиДокумента.ОбъектСистемы.ИмяОбъекта;
	КоличествоСубконто 	   = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.МаксКоличествоСубконто;
	
	СтруктураШапкиДокумента.Вставить("ИмяРегистраБухгалтерии", ИмяРегистраБухгалтерии);
	СтруктураШапкиДокумента.Вставить("КоличествоСубконто"	 , КоличествоСубконто);
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьСтруктуруШапкиДокумента()

// Процедура выполняет проверку данных документа.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок)
	
	// Сформируем структуру обязательных полей.
	СтруктураОбязательныхПолей = Новый Структура;
	
	// Если это регистр бюджетирования, тогда
	Если СтруктураШапкиДокумента.ИмяРегистраБухгалтерии = "бит_Бюджетирование" Тогда
		СтруктураОбязательныхПолей.Вставить("Сценарий");
	Иначе
		СтруктураОбязательныхПолей.Вставить("Организация");
	КонецЕсли;
	
	// Проверим заполнение шапки.
	бит_РаботаСМетаданными.ПроверитьЗаполнениеШапки(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаДанных()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	РесурсыПереоценки = Новый Массив;
	
	Если СтруктураШапкиДокумента.ПереоценкаСуммаУпр Тогда
		РесурсыПереоценки.Добавить("СуммаУпр");
	КонецЕсли;
	Если СтруктураШапкиДокумента.ПереоценкаСуммаРегл Тогда
		РесурсыПереоценки.Добавить("СуммаРегл");
	КонецЕсли;
	Если СтруктураШапкиДокумента.ПереоценкаСуммаСценарий Тогда
		РесурсыПереоценки.Добавить("СуммаСценарий");
	КонецЕсли;
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() 
		И СтруктураШапкиДокумента.Свойство("ПереоценкаСуммаМУ") И СтруктураШапкиДокумента.ПереоценкаСуммаМУ Тогда
		РесурсыПереоценки.Добавить("СуммаМУ");
	КонецЕсли;
	
	// Валюты сравнения
	ВалютаСравненияУпр  = СтруктураКурсыВалют.Упр.Валюта;
	ВалютаСравненияМу   = СтруктураКурсыВалют.Му.Валюта;
	ВалютаСравненияРегл = СтруктураКурсыВалют.Регл.Валюта;

	ТаблицаДанных = СтруктураТаблиц.ТаблицаПереоценки;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Для Каждого ТекИмяРесурса Из РесурсыПереоценки Цикл
			
			ЗначениеРесурса = СтрокаТаблицы[ТекИмяРесурса];
			
			Если ТекИмяРесурса = "СуммаУпр" И (ВалютаСравненияУпр = СтрокаТаблицы.Валюта) Тогда
				// Не формировать переоценку по упр учету, если валюта договора или расчетного счета равна валюте упр. учета.
				Продолжить;	
			ИначеЕсли ТекИмяРесурса = "СуммаМУ" И (ВалютаСравненияМу = СтрокаТаблицы.Валюта) Тогда
				// Не формировать переоценку по МСФО, если валюта договора или расчетного счета равна валюте МСФО.
				Продолжить;		
			ИначеЕсли ТекИмяРесурса = "СуммаРегл" И (ВалютаСравненияРегл = СтрокаТаблицы.Валюта) Тогда
				// Не формировать переоценку по регл.учету, если валюта договора или расчетного счета равна валюте МСФО.
				Продолжить;	
			КонецЕсли;
			
			// Если значение ресурса больше нуля, тогда
			Если ЗначениеРесурса > 0 Тогда
				
				// Отобразим курсовую разницу по доходу.
				// ДТ СчетУчета КТ СчетДоходов Сумма.
				//БИТ Тртилек 22.02.2012 Добавлен параметр СтруктураКурсыВалют.МУ для заполнения суммы регл
				//СформироватьЗаписьПоДоходу(СтруктураШапкиДокумента, СтрокаТаблицы, ТекИмяРесурса);
				СформироватьЗаписьПоДоходу(СтруктураШапкиДокумента, СтрокаТаблицы, ТекИмяРесурса, СтруктураКурсыВалют.МУ); 
				///БИТ Тртилек 22.02.2012
				
				// Иначе если значение ресурса меньше нуля, тогда.
			ИначеЕсли ЗначениеРесурса < 0 Тогда
				
				// Отобразим курсовую разницу по расходу.
				// ДТ СчетРасходов КТ СчетУчета Сумма.
				//БИТ Тртилек 22.02.2012 Добавлен параметр СтруктураКурсыВалют.МУ для заполнения суммы регл
				//СформироватьЗаписьПоРасходу(СтруктураШапкиДокумента, СтрокаТаблицы, ТекИмяРесурса);
				СформироватьЗаписьПоРасходу(СтруктураШапкиДокумента, СтрокаТаблицы, ТекИмяРесурса, СтруктураКурсыВалют.МУ); 
				///БИТ Тртилек 22.02.2012
			КонецЕсли;
			
		КонецЦикла; // Для Каждого КлючЗначение Из РесурсыПереоценки Цикл.
		
	КонецЦикла; // Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл.
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение курсовой разницы по доходу.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтрокаТаблицы 			- СтрокаТаблицыЗначений.
//  ИмяРесурса 				- Строка.
// 
//БИТ Тртилек 22.02.2012 Добавлен параметр ВалютаМУ для заполнения суммы регл)
//Процедура СформироватьЗаписьПоДоходу(СтруктураШапкиДокумента, СтрокаТаблицы, ИмяРесурса)
Процедура СформироватьЗаписьПоДоходу(СтруктураШапкиДокумента, СтрокаТаблицы, ИмяРесурса, ВалютаМУ) 
///БИТ Тртилек 22.02.2012
	
	Запись = Движения[СтруктураШапкиДокумента.ИмяРегистраБухгалтерии].Добавить();
	
	// Заполнение атрибутов записи.
	ЗаполнитьАтрибутыЗаписи(Запись, СтруктураШапкиДокумента, СтрокаТаблицы);
	
	// Заполним аналитику счета Дт и Кт.
	ЗаполнитьАналитикуЗаписи(Запись, СтруктураШапкиДокумента, СтрокаТаблицы);
												   
	// Заполним сумму.
	Запись[ИмяРесурса] = СтрокаТаблицы[ИмяРесурса];
	
	//ОК+ Аверьянова 02.03.15 завполним ВидДвиженияМСФО
	Если Движения[СтруктураШапкиДокумента.ИмяРегистраБухгалтерии] = "бит_Дополнительный_2" Тогда
		Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	КонецЕсли;	
	//ОК- Аверьянова 02.03.15
	
	//БИТ Тртилек 22.02.2012
	Если СтруктураШапкиДокумента.Ссылка.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		Если СтруктураШапкиДокумента.Ссылка.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПереоценкаСуммыМеждународногоУчета
			И ВалютаМУ.Валюта = Справочники.Валюты.НайтиПоКоду("840") Тогда 
			Запись.СуммаРегл = Запись.СуммаУпр;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.бит_ПересчетСтатейВВалютуПредставленияМСФО") Тогда
		Запись.СуммаРегл = Запись.СуммаУпр;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры // СформироватьЗаписьПоДоходу()

// Процедура формирует движение курсовой разницы по расходу.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтрокаТаблицы 			- СтрокаТаблицыЗначений.
//  ИмяРесурса 				- Строка.
// 
 //БИТ Тртилек 22.02.2012 Добавлен параметр ВалютаМУ для заполнения суммы регл)
//Процедура СформироватьЗаписьПоРасходу(СтруктураШапкиДокумента, СтрокаТаблицы, ИмяРесурса)
Процедура СформироватьЗаписьПоРасходу(СтруктураШапкиДокумента, СтрокаТаблицы, ИмяРесурса, ВалютаМУ)
///БИТ Тртилек 22.02.2012
 
	Запись = Движения[СтруктураШапкиДокумента.ИмяРегистраБухгалтерии].Добавить();
	
	// Заполнение атрибутов записи.
	ЗаполнитьАтрибутыЗаписи(Запись, СтруктураШапкиДокумента, СтрокаТаблицы, Ложь);
	
	// Заполним аналитику счета Дт и Кт.
	ЗаполнитьАналитикуЗаписи(Запись, СтруктураШапкиДокумента, СтрокаТаблицы, Ложь);
	
	// Заполним сумму.
	Запись[ИмяРесурса] = СтрокаТаблицы[ИмяРесурса] * -1;
	
	//ОК+ Аверьянова 02.03.15 завполним ВидДвиженияМСФО
	Если Движения[СтруктураШапкиДокумента.ИмяРегистраБухгалтерии] = "бит_Дополнительный_2" Тогда
		Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	КонецЕсли;	
	//ОК- Аверьянова 02.03.15
	
	//БИТ Тртилек 22.02.2012
	Если СтруктураШапкиДокумента.Ссылка.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		Если СтруктураШапкиДокумента.Ссылка.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПереоценкаСуммыМеждународногоУчета
			И ВалютаМУ.Валюта = Справочники.Валюты.НайтиПоКоду("840") Тогда 
			Запись.СуммаРегл = Запись.СуммаУпр;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.бит_ПересчетСтатейВВалютуПредставленияМСФО") Тогда
		Запись.СуммаРегл = Запись.СуммаУпр;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры // СформироватьЗаписьПоРасходу()

// Процедура заполняет атрибуты записи.
// 
// Параметры:
//  Запись					- РегистрБухгалтерииЗапись.
//  СтруктураШапкиДокумента - Структура.
//  СтрокаТаблицы 			- СтрокаТаблицыЗначений.
//  ЭтоДоход                - Булево. По умолчанию Истина.
// 
Процедура ЗаполнитьАтрибутыЗаписи(Запись, СтруктураШапкиДокумента, СтрокаТаблицы, ЭтоДоход = Истина)
	
	Если СтруктураШапкиДокумента.ИмяРегистраБухгалтерии = "бит_Бюджетирование" Тогда
		Запись.Сценарий    = СтруктураШапкиДокумента.Сценарий;
		Запись.ЦФО		   = СтрокаТаблицы.ЦФО;
		Если СтруктураШапкиДокумента.Свойство("ЕстьАналитикаОрганизация") И СтруктураШапкиДокумента.ЕстьАналитикаОрганизация = Истина Тогда
			
			Запись.Организация = СтрокаТаблицы.Организация;		
			
		КонецЕсли; 
	Иначе	
		Запись.Организация = СтрокаТаблицы.Организация;
	КонецЕсли;

	Запись.Период     = СтруктураШапкиДокумента.Дата;
	Запись.Активность = Истина;
	
	ТекстСодержания   = "ru = 'Курсовая разница'";
	Запись.Содержание = Нстр(ТекстСодержания);
	
	Если ЭтоДоход Тогда
		Запись.СчетДт = СтрокаТаблицы.Счет;
		Запись.СчетКт = СтруктураШапкиДокумента.СчетДоходов;
	Иначе
		Запись.СчетДт = СтруктураШапкиДокумента.СчетРасходов;
		Запись.СчетКт = СтрокаТаблицы.Счет;
	КонецЕсли;
    
    СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетДт);
    СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетКт);
    
	Если СвСчДт.Валютный Тогда
		Запись.ВалютаДт        = СтрокаТаблицы.Валюта;
		Запись.ВалютнаяСуммаДт = 0;
	КонецЕсли; 
	
	Если СвСчКт.Валютный Тогда
		Запись.ВалютаКт        = СтрокаТаблицы.Валюта;
		Запись.ВалютнаяСуммаКт = 0;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьАтрибутыЗаписи()

// Процедура заполняет аналитику счета Дт и Кт записи.
// 
// Параметры:
//  Запись					- РегистрБухгалтерииЗапись.
//  СтруктураШапкиДокумента - Структура.
//  СтрокаТаблицы 			- СтрокаТаблицыЗначений.
//  ЭтоДоход                - Булево. По умолчанию Истина.
// 
Процедура ЗаполнитьАналитикуЗаписи(Запись, СтруктураШапкиДокумента, СтрокаТаблицы, ЭтоДоход = Истина)
	
	КоличествоСубконто = СтруктураШапкиДокумента.КоличествоСубконто;
	
	Для Ном = 1 по КоличествоСубконто Цикл
		
		Если ЭтоДоход Тогда
			ЗначениеАналитикиДт = СтрокаТаблицы["Субконто" + Ном];
			ЗначениеАналитикиКт = СтруктураШапкиДокумента["СубконтоДоходов" + Ном];
		Иначе
			ЗначениеАналитикиДт = СтруктураШапкиДокумента["СубконтоРасходов" + Ном];
			ЗначениеАналитикиКт = СтрокаТаблицы["Субконто" + Ном];
		КонецЕсли;
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Ном, ЗначениеАналитикиДт);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Ном, ЗначениеАналитикиКт);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАналитикуЗаписи()

#КонецОбласти

#КонецЕсли
