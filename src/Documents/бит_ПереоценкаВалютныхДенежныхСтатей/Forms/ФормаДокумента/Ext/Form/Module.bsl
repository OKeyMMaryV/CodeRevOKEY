
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//izhtc Алексей Яковлев 14.08.2015(
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	Если ЭтоНовый Тогда
		Объект.ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПереоценкаСуммыМеждународногоУчета Тогда
		Элементы.ПереоценкаСуммаМУ.Видимость = Ложь;		
		Элементы.ПереоценкаСуммаУпр.Видимость = Истина;
		Элементы.ПереоценкаСуммаУпр.Доступность = Ложь;
		Объект.ПереоценкаСуммаМУ = Ложь;
		Объект.ПереоценкаСуммаУпр = Истина;
		Объект.ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024");
		Элементы.ОбъектСистемы.Доступность = ЛОЖЬ;
	КонецЕсли;	
	//izhtc Алексей Яковлев 14.08.2015)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
    Если Параметры.Ключ.Пустая() Тогда // Если это новый документ
        
        ПодготовитьФормуНаСервере();
    		
		ЭтоРегистрБюджетирования = Объект.ОбъектСистемы = фРегБухБюджетирование;
		
		Если ЗначениеЗаполнено(Объект.Сценарий)	И Не ЭтоРегистрБюджетирования Тогда
			Объект.Сценарий = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Организация) И ЭтоРегистрБюджетирования Тогда
			Объект.Организация = Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда			
			// Заполним сценарий при необходимости.
			ЗаполнитьСценарий();			
			// Приведем тип значения счетов и субконто.
			ПривестиТипЗначенияСчетовИСубконто();			
		КонецЕсли;
		
    КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	// Установим связи субконто.
	УстановитьСвязиСубконто();
	
	УстановитьПараметрыВыбораДляСчетов();
    
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//БИТ Тртилек 19.01.2012 Регистр д.б. виден всегда
	//Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ТаблицаФормы") 
	//	И ЭтаФорма.ВладелецФормы.Родитель.ИмяФормы = "Документ.бит_ПереоценкаВалютныхДенежныхСтатей.Форма.ФормаСпискаУправляемая"
	//	И ЭтаФорма.ВладелецФормы.Родитель.фФормаСпискаОткрытаСОтбором Тогда    
	//	Элементы.ОбъектСистемы.Видимость = Не ЗначениеЗаполнено(Объект.ОбъектСистемы);    
	//КонецЕсли;
	///БИТ Тртилек
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	///БИТ Тртилек 19.01.2012 Заголовок формы всегда один и тот же
	//УстановитьЗаголовокФормыДокумента();
	///БИТ Тртилек
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	ПриОткрытииНаСервере();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	// БИТ Тртилек 14.06.2012 Установить доступность формы с учетом даты запрета редактирования
	//ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ПереоценкаВалютныхДенежныхСтатей"));
	//РаботаСДиалогами.УстановитьДоступностьФормыДляРедактирования(ДокументОбъект, ЭтаФорма);
	///БИТ Тртилек
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Стандатные подсистемы ДатыЗапретаИзменения
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ПереоценкаВалютныхДенежныхСтатей";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	ИзменениеОбъектСистемыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеВыбор = Новый ОписаниеОповещения("ВыборОбъектСистемы", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбор, фСписокРегистров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзменениеОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетРасходовПриИзменении(Элемент)
	
	ИзменениеСчетРасходовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконто(Объект, ЗначениеСубконто, "СубконтоРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто, "СубконтоРасходов");
   
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	ИсключитьОрганизацию = ?(Объект.ОбъектСистемы = фРегБухБюджетирование, Истина, Ложь);	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоРасходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконто
													 , ИсключитьОрганизацию);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	
	ИзменениеСчетДоходовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконто(Объект, ЗначениеСубконто, "СубконтоДоходов");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто, "СубконтоДоходов");
   
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	ИсключитьОрганизацию = ?(Объект.ОбъектСистемы = фРегБухБюджетирование, Истина, Ложь);	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоДоходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконто
													 , ИсключитьОрганизацию);
													 
КонецПроцедуры

&НаКлиенте
Процедура ПоВсемОрганизациямПриИзменении(Элемент)
	
	Если Объект.ПоВсемОрганизациям Тогда
		Объект.Организация = Неопределено;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоВсемЦФОПриИзменении(Элемент)
	
	Если Объект.ПоВсемЦФО Тогда
		Объект.ЦФО = Неопределено;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура заполняет значения, необходимые при работе на клиенте.
//
&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// Представление документа для формирования заголовка.
	фПредставлениеОбъекта = Объект.Ссылка.Метаданные().ПредставлениеОбъекта;
    
	// Получим количество субконто плана счетов регистра.
	ПолучитьКоличествоСубконто();
	
	// Заполним значения реквизитов формы.
	МетаРегБухБюджетирование = Метаданные.РегистрыБухгалтерии.бит_Бюджетирование;
	МетаРегБухМеждународный  = Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2;
	//БИТ Тртилек 19.01.2012
	МетаРегБухИК             = Метаданные.РегистрыБухгалтерии.бит_Дополнительный_3;
	///БИТ Тртилек
	
	фРегБухБюджетирование = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегБухБюджетирование);
	фРегБухМеждународный  = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегБухМеждународный);
	//БИТ Тртилек 19.01.2012
	бит_фРегБухИК             = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаРегБухИК);
	///БИТ Тртилек
	
	// Сформируем список регистров бухгалтерии для выбора.
	ВидОбъектаРегБух = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии;	
	фСписокРегистров = бит_УправленческийУчет.СформироватьСписокОбъектовДляВыбора(ВидОбъектаРегБух, "бит_Дополнительный");    	
	// Отсортируем список регистров для выбора.
	фСписокРегистров.СортироватьПоПредставлению();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПодготовитьФормуНаСервере()

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	ДопТекстЗаголовка = "";
	
	Если Не Элементы.ОбъектСистемы.Видимость Тогда
		
		Если Объект.ОбъектСистемы = фРегБухМеждународный Тогда
			ДопТекстЗаголовка = "МСФО";
			
		ИначеЕсли Объект.ОбъектСистемы = фРегБухБюджетирование Тогда
			ДопТекстЗаголовка = "Бюджетирование";
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , ДопТекстЗаголовка);
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
    
    ОбъектСистемы 			 = Объект.ОбъектСистемы;
	ЭтоРегистрБюджетирования = ОбъектСистемы = фРегБухБюджетирование;
	ЕстьОрганизация = бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация();	
	
	Элементы.Сценарий.Видимость	          = ЭтоРегистрБюджетирования;
	Элементы.ЦФО.Видимость                = ЭтоРегистрБюджетирования;
	Элементы.ПоВсемЦФО.Видимость          = ЭтоРегистрБюджетирования;
	Элементы.Организация.Видимость        = Не ЭтоРегистрБюджетирования ИЛИ ЕстьОрганизация;
	Элементы.ПоВсемОрганизациям.Видимость = ЭтоРегистрБюджетирования И ЕстьОрганизация;
	Если ЭтоРегистрБюджетирования Тогда
		Элементы.Организация.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Элементы.Организация.Доступность = НЕ Объект.ПоВсемОрганизациям;
	Элементы.ЦФО.Доступность         = НЕ Объект.ПоВсемЦФО;
	
	Элементы.ПереоценкаСуммаСценарий.Видимость = ЭтоРегистрБюджетирования;
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() И бит_ОбщегоНазначения.ЕстьРеквизит("ПереоценкаСуммаМУ", Метаданные.Документы.бит_ПереоценкаВалютныхДенежныхСтатей) Тогда
		Элементы.ПереоценкаСуммаМУ.Видимость = ОбъектСистемы = фРегБухМеждународный;	
	КонецЕсли;
	
	//БИТ Тртилек 19.01.2012
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() И бит_ОбщегоНазначения.ЕстьРеквизит("ПереоценкаСуммаУпр", Метаданные.Документы.бит_ПереоценкаВалютныхДенежныхСтатей) Тогда
		Элементы.ПереоценкаСуммаУпр.Видимость = ОбъектСистемы <> бит_фРегБухИК;
	КонецЕсли;
	//БИТ Тртилек
	
	Элементы.ГруппаСчета.Видимость = ЗначениеЗаполнено(ОбъектСистемы);
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
												   
КонецПроцедуры

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.СчетРасходов);
	МассивЭлементов.Добавить(Элементы.СчетДоходов);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура обрабатывает изменение субконто.
// 
// Параметры:
//  Контейнер        - Произвольный.
//  ЗначениеСубконто - Произвольный. Текущее значение субконто.
//  ИмяСубконтоСчета - Строка. / "СубконтоРасходов" / "СубконтоДоходов" /.
// 
&НаКлиенте
Процедура ИзменениеСубконто(Контейнер, ЗначениеСубконто, ИмяСубконтоСчета)

	СтруктураСубконто  = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер
																				 ,ИмяСубконтоСчета
																				 ,фКоличествоСубконто);
																				
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто
													 ,ИмяСубконтоСчета
													 ,ЗначениеСубконто
													 ,фКоличествоСубконто);
													 
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто
															,Контейнер
															,ИмяСубконтоСчета
															,""
															,фКоличествоСубконто);

КонецПроцедуры // ИзменениеСубконтоСубконтоРасходов()

// Процедура обрабатывает начало выбора субконто.
// 
// Параметры:
//  Элемент              - ЭлементУправления.
//  СтандартнаяОбработка - Булево.
//  Контейнер            - Произвольный.
//  ЗначениеСубконто     - Произвольный.
//  ИмяСубконтоСчета     - Строка. / "СубконтоРасходов" / "СубконтоДоходов" /.
// 
&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент
							  ,СтандартнаяОбработка
							  ,Контейнер
							  ,ЗначениеСубконто
							  ,ИмяСубконтоСчета)
	
	ИсключитьОрганизацию = ?(Объект.ОбъектСистемы = фРегБухБюджетирование, Истина, Ложь);
	СтруктураПараметров  = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                     ,Объект
																						 ,ИмяСубконтоСчета
																						 ,ЗначениеСубконто
																						 ,фКоличествоСубконто
																						 ,ИсключитьОрганизацию);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
		
	Иначе
		
		// Если это не регистр бюджетирования, тогда.
		Если Не Объект.ОбъектСистемы = фРегБухБюджетирование Тогда
			ЗначениеОрганизация = Объект.Организация;
		Иначе
			ЗначениеОрганизация = Неопределено;
		КонецЕсли;
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                   ,СтандартнаяОбработка
																	   ,ЗначениеСубконто
																	   ,ЗначениеОрганизация
																	   ,СтруктураПараметров);
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконтоРасходов()

// Обработка выбора объекта системы. 
// 
// Параметры:
//  ВыбранноеЗначение - СправочникСсылка.бит_ОбъектыСистемы.
// 
&НаКлиенте
Процедура ВыборОбъектСистемы(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		Объект.ОбъектСистемы = ВыбранноеЗначение.Значение;
		ИзменениеОбъектСистемыСервер();
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры // ВыборОбъектСистемы() 

// Процедура получает количество субконто.
// 
&НаСервере 
Процедура ПолучитьКоличествоСубконто()
	
	Если ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда		
		МатаданныеПланаСчетов = Метаданные.РегистрыБухгалтерии[Объект.ОбъектСистемы.ИмяОбъекта].ПланСчетов;
		фКоличествоСубконто   = МатаданныеПланаСчетов.МаксКоличествоСубконто;		
	Иначе
		фКоличествоСубконто = 0;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьКоличествоСубконто()

// Процедура заполняет сценарий, если он не заполнен и выбран регистр бюджетирования.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьСценарий()
	
	Если Не ЗначениеЗаполнено(Объект.Сценарий)
		И Объект.ОбъектСистемы = фРегБухБюджетирование Тогда
		
		// Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
		ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
		
		// Заполним на предопределенный ФАКТ.
		Объект.Сценарий = Справочники[ИмяСправочникаСценарии].ФАКТ;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСценарий()

// Процедура устанавливает связи субконто счета расхода и дохода.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УстановитьСвязиСубконто()
	
	Если Не ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		Возврат
	КонецЕсли;
	
	// Устанавливаем связи параметров выбора и связи по типу субконто для расходов.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетРасходов", "СубконтоРасходов", фКоличествоСубконто);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходов, фКоличествоСубконто);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоРасходов");
	
	// Устанавливаем связи параметров выбора и связи по типу субконто для доходов.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетДоходов", "СубконтоДоходов", фКоличествоСубконто);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, фКоличествоСубконто);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");
	
КонецПроцедуры // УстановитьСвязиСубконто()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	бит_БухгалтерияСервер.ПроверитьСоответствиеОрганизации(Объект, "СубконтоРасходов", фКоличествоСубконто);
	бит_БухгалтерияСервер.ПроверитьСоответствиеОрганизации(Объект, "СубконтоДоходов" , фКоличествоСубконто);
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// Процедура обрабатывает изменение объекта системы. Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ИзменениеОбъектСистемыСервер()
	
	ЭтоРегистрБюджетирования = ?(Объект.ОбъектСистемы = фРегБухБюджетирование, Истина, Ложь);
	ЭтоРегистрМУ 			 = ?(Объект.ОбъектСистемы = фРегБухМеждународный , Истина, Ложь);
	//БИТ Тртилек 19.01.2012
	ЭтоРегистрИК 			 = ?(Объект.ОбъектСистемы = бит_фРегБухИК , Истина, Ложь);
	///БИТ Тртилек
	
	Если ЗначениеЗаполнено(Объект.Сценарий)
		И Не ЭтоРегистрБюджетирования Тогда
		Объект.Сценарий = Неопределено;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЭтоРегистрБюджетирования Тогда
		Объект.Организация = Неопределено;
	КонецЕсли;
	
	Если Объект.ПереоценкаСуммаСценарий
		И Не ЭтоРегистрБюджетирования Тогда
		Объект.ПереоценкаСуммаСценарий = Ложь;
	КонецЕсли;
		
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() И Объект.ПереоценкаСуммаМУ
		//БИТ Тртилек 19.01.2012 
		И НЕ ЭтоРегистрИК 
		/// БИТ Тртилек
		И Не ЭтоРегистрМУ Тогда
		Объект.ПереоценкаСуммаМУ = Ложь;
	КонецЕсли;
	
	// Заполним сценарий при необходимости.
	ЗаполнитьСценарий();
	
	// Получим и запишем количество субконто плана счетов регистра в кэш значений.
	ПолучитьКоличествоСубконто();
	
	// Приведем тип значения счетов и субконто.
	ПривестиТипЗначенияСчетовИСубконто();
	
	// Установим связи субконто.
	УстановитьСвязиСубконто();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	//БИТ Тртилек 19.01.2012 Проверим если ИК
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЭтоРегистрИК Тогда
		Объект.ПереоценкаСуммаМУ = Истина;
		Объект.ПереоценкаСуммаУпр = Ложь;
		Объект.ПереоценкаСуммаСценарий = Ложь;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры // ИзменениеОбъектСистемыСервер()

// Процедура приводит тип значения счетов и субконто к типу плана счетов 
// выбранного регистра бухгалтерии.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ПривестиТипЗначенияСчетовИСубконто()
	
	Если Не ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		
		Объект.СчетРасходов = Неопределено;
		Объект.СчетДоходов  = Неопределено;
		
	Иначе
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить("СчетРасходов");
		МассивСчетов.Добавить("СчетДоходов");
		
		// Получим пустую ссылку плана счетов выбранного регистра бухгалтерии.
		ИмяРегБух 	     = Объект.ОбъектСистемы.ИмяОбъекта;
		ИмяПланаСчетов   = Метаданные.РегистрыБухгалтерии[ИмяРегБух].ПланСчетов.Имя;
		СчетПустаяСсылка = ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка();
		
		Для Каждого ТекИмяРеквизитаСчета Из МассивСчетов Цикл
			
			ЗначениеСчета = Объект[ТекИмяРеквизитаСчета];
			
			Если ЗначениеСчета = Неопределено Тогда
				
				Объект[ТекИмяРеквизитаСчета] = СчетПустаяСсылка;
				
				Если ТекИмяРеквизитаСчета = "СчетРасходов" Тогда
					ИзменениеСчетРасходовСервер();
				Иначе
					ИзменениеСчетДоходовСервер();
				КонецЕсли;
				
			Иначе
				
				Если Не ТипЗнч(ЗначениеСчета) = ТипЗнч(СчетПустаяСсылка) Тогда
					
					// Найдем счет по коду ранее выбранного счета.
					СчетДляЗамены = ПланыСчетов[ИмяПланаСчетов].НайтиПоКоду(ЗначениеСчета.Код);
					
					Если ЗначениеЗаполнено(СчетДляЗамены) Тогда
						Объект[ТекИмяРеквизитаСчета] = СчетДляЗамены;
					Иначе
						Объект[ТекИмяРеквизитаСчета] = СчетПустаяСсылка;
					КонецЕсли;
					
					Если ТекИмяРеквизитаСчета = "СчетРасходов" Тогда
						ИзменениеСчетРасходовСервер();
					Иначе
						ИзменениеСчетДоходовСервер();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; // Если ЗначениеСчета = Неопределено Тогда
			
		КонецЦикла; // Для Каждого ТекИмяРеквизитаСчета Из МассивСчетов Цикл.
		
	КонецЕсли; // Если Не ЗначениеЗаполнено(ОбъектСистемы) Тогда.
	
КонецПроцедуры // ПривестиТипЗначенияСчетовИСубконто()

// Процедура обрабатывает изменение счета "СчетРасходов". Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеСчетРасходовСервер()
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходов, фКоличествоСубконто);
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоРасходов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоРасходов");
	
КонецПроцедуры // ИзменениеСчетРасходовСервер()

// Процедура обрабатывает изменение счета "СчетДоходов". Сервер.
// 
// Параметры:
//  Нет.
// 
// 
&НаСервере
Процедура ИзменениеСчетДоходовСервер()
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, фКоличествоСубконто);
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоДоходов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");
	
КонецПроцедуры // ИзменениеСчетДоходовСервер()

#КонецОбласти

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриОткрытииНаСервере()
	//БИТ Тртилек 23.01.2012 Обработка выбора вида операции	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
		
	Если ЭтоНовый Тогда
		
		Объект.ВидОперации = Неопределено;
		СформироватьДеревоВидовОпераций();
		Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
		ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
		ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	///БИТ Тртилек	
КонецПроцедуры

&НаСервере 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	//Отказ = Ложь;	
	//Если СтруктураПараметров = Неопределено Тогда
	//	Отказ = Истина;	
	//КонецЕсли;
	Если (ТипЗнч(СтруктураПараметров) = Тип("Структура")) И СтруктураПараметров.Свойство("ВидОперации") Тогда
		Если СтруктураПараметров.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПереоценкаСуммыМеждународногоУчета Тогда
			Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПереоценкаСуммыМеждународногоУчета;
		КонецЕсли;
		Если СтруктураПараметров.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПоУмолчанию Тогда
			Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПоУмолчанию;
		КонецЕсли;
	Иначе
		Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПоУмолчанию;
	КонецЕсли;
	
	ОбработатьИзменениеВидаОперацииСервер();
	
	
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств.ПереоценкаСуммыМеждународногоУчета Тогда
		Элементы.ПереоценкаСуммаМУ.Видимость = Ложь;		
		Элементы.ПереоценкаСуммаУпр.Видимость = Истина;
		Элементы.ПереоценкаСуммаУпр.Доступность = Ложь;
		Объект.ПереоценкаСуммаМУ = Ложь;
		Объект.ПереоценкаСуммаУпр = Истина;
		Объект.ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоКоду("000001024");
		Элементы.ОбъектСистемы.Доступность = ЛОЖЬ;
	КонецЕсли;
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

// БИТ Тртилек 23.01.2012 Процедура обрабатывает изменение вида операции.
&НаСервере
Процедура ОбработатьИзменениеВидаОперацииСервер()



КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер() 

// БИТ Тртилек 23.01.2012 Формирует список видов операций для выбора вида операции перед созданием документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура СформироватьДеревоВидовОпераций()

	ЭлементыДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = ЭлементыДерева.Добавить();
	СтрокаНовая.ВидОперации = "Доступные виды операций";
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекСтр Из КэшироватьЗначенияПеречисления_бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств() Цикл
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекСтр.Значение;	
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

// *Обновление*, Братухин М.В., 2017.10.12 (
&НаСервере
Функция КэшироватьЗначенияПеречисления_бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств()
	
	Возврат бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийПереоценкаВалютныхДенежныхСредств);
	
КонецФункции
// *Обновление*, Братухин М.В., 2017.10.12 )