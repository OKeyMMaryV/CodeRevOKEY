
&НаКлиенте
Перем мВидКорректировки;
&НаКлиенте
Перем мСценарий;
&НаКлиенте
Перем мФунДиректор;

////////////////////////////////////////////////////////////////////////////////
// КЛИЕНТСКИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Процедура устанавливает отборы для договора контрагента.
//
// Параметры:
//  Элемент - ПолеФормы. Для которого необходимо установить параметры выбора.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Контейнер, Элемент)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контейнер.Контрагент) Тогда
		СтруктураОтбора.Вставить("Владелец", Контейнер.Контрагент);
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

#Если ТолстыйКлиентОбычноеПриложение Тогда
	

// Процедура обрабатывает начало выбора статьи в толстом клиенте
//
// Параметры:
//  Элемент    - ЭлементУправления
//  СтандартнаяОбработка - Булево
//
&НаКлиенте
Процедура НачалоВыбораСтатьяОборотов(Элемент,НачальноеЗначение,СтандартнаяОбработка)
		
	СтруктураПараметров = Новый Структура;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
		СтруктураПараметров.Вставить("РасходДоход",мКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		СтруктураПараметров.Вставить("ТипСтатьи"  ,мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
		СтруктураПараметров.Вставить("РасходДоход",мКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		СтруктураПараметров.Вставить("ТипСтатьи"  ,мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР);
	КонецЕсли;
	
	бит_РаботаСДиалогами.ОткрытьФормуВыбораСтатейОборотов(Элемент
	                                                     ,НачальноеЗначение
														 ,СтандартнаяОбработка
														 ,СтруктураПараметров
														 ,СтруктураПараметров);
	
КонецПроцедуры //НачалоВыбораСтатьяОборотов()

#КонецЕсли

&НаСервере
Функция ПолучитьЗначениеРеквизита(Данные, ИмяРеквизита)
	
	Возврат Данные[ИмяРеквизита];
	
КонецФункции	

// Процедура открывает форму подбора записей из регистра контрольные значения бюджетов
//
// Параметры:
//	Направление - строка - Приход,Расход - используется для определеия ТЧ в которую будет производиться подбор
//
&НаКлиенте
Процедура ОткрытьФормуПодбораЗаписей(Знач Оповещение)
	
	Перем ОтборЦФО;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе"	, Ложь);
	 
	ПараметрыФормы.Вставить("Сценарий"				, Объект.Сценарий);
			
	ПараметрыФормы.Вставить("СценарийКонтролируемый", бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролируемый сценарий", Объект.Сценарий, ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка")));
	ПараметрыФормы.Вставить("Направление"			, "Расход");
	ПараметрыФормы.Вставить("ЭтоКонтрольБюджета"	, Истина);
	
	СтруктураОтбора = Новый Структура;
		
	Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") Тогда 
		МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(Новый Структура("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход));
		
		Если МассивСтрок.Количество() = 1 Тогда
			
			ТекСтрока 			= МассивСтрок[0];
			ОтборСтатьи 		= ТекСтрока.СтатьяОборотов;
			ОтборЦФО 			= ТекСтрока.ЦФО;
			ОтборПроект 		= ТекСтрока.Проект;
			ОтборАналитика_2 	= ТекСтрока.Аналитика_2;
			
		Иначе 
			
			ОтборСтатьи 		= Новый СписокЗначений;
			ОтборЦФО 			= Новый СписокЗначений;
			ОтборПроект 		= Новый СписокЗначений;
			ОтборАналитика_2 	= Новый СписокЗначений;			
			
			Для Каждого ТекСтрока Из МассивСтрок Цикл
				
				ОтборСтатьи.Добавить(ТекСтрока.СтатьяОборотов);
				ОтборЦФО.Добавить(ТекСтрока.ЦФО);			
				ОтборАналитика_2.Добавить(ТекСтрока.Аналитика_2);					
				ОтборПроект.Добавить(ТекСтрока.Проект);	
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураОтбора.Вставить("СтатьяОборотов"	, ОтборСтатьи);
		СтруктураОтбора.Вставить("ЦФО"			 	, ОтборЦФО);
		СтруктураОтбора.Вставить("Проект"		 	, ОтборПроект);
		СтруктураОтбора.Вставить("Аналитика_2"	 	, ОтборАналитика_2);
		
	КонецЕсли;
		
	СтруктураОтбора.Вставить("Сценарий"		 	, Объект.Сценарий);
	
	ПараметрыФормы.Вставить("СтруктураОтбора"	, СтруктураОтбора);

	Если НЕ ЗначениеЗаполнено(ОтборЦФО) Тогда 
		
		мЦФО = мКэшЗначений.соотФД_ЦФО.Получить(Объект.ок_ФункциональныйДиректор);
		Если мЦФО<>Неопределено Тогда 
			Если мЦФО.Количество() = 1 Тогда 
				ОтборЦФО = мЦФО[0];
			Иначе
				ОтборЦФО = Новый СписокЗначений;
				ОтборЦФО.ЗагрузитьЗначения(мЦФО);
			КонецЕсли;	
			ПараметрыФормы.СтруктураОтбора.Вставить("ЦФО", ОтборЦФО);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ок_ВидКорректировки", Объект.ок_ВидКорректировки);
	
	Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррВПределахФункцийФД") Тогда 
		
		СписокПериодов = Новый СписокЗначений;
		
		Если Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У") Тогда 
			Для Каждого СтрПриход Из Объект.СуммыКорректировок Цикл 
				Если СтрПриход.ВидДвижения <> мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход
					ИЛИ Не ЗначениеЗаполнено(СтрПриход.Период) Тогда  
					Продолжить;
				КонецЕсли;
				
				СписокПериодов.Добавить(СтрПриход.Период);
				
			КонецЦикла;
		КонецЕсли;
		
		Если СписокПериодов.Количество() Тогда 
			СтруктураОтбора.Вставить("СписокПериодов" , СписокПериодов);
		КонецЕсли;
		
		СтруктураОтбора.Вставить("МинимальныйПериод"	, НачалоГода(ТекущаяДата()));
		СтруктураОтбора.Вставить("МаксимальныйПериод"	, КонецГода(ТекущаяДата()));
		
	ИначеЕсли Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") Тогда 
		
		СтруктураОтбора.Вставить("МинимальныйПериод"	, ДобавитьМесяц(НачалоГода(ТекущаяДата()), 6));
		СтруктураОтбора.Вставить("МаксимальныйПериод"	, КонецГода(ТекущаяДата()));
		СтруктураОтбора.Вставить("ПериодТолькоПросмотр"	, Истина);		
		
	КонецЕсли;	
	
	ВладелецФормыПодбора = Элементы.СуммыКорректировокРасход;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-25 (#3714)
	ПараметрыФормы.Вставить("ОтключитьПараметрыРедактирования", Ложь);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-25 (#3714)
	
	ОткрытьФорму("Документ.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.Форма.ФормаПодбораЗаписей", ПараметрыФормы, ВладелецФормыПодбора,,,, Новый ОписаниеОповещения("ОткрытьФормуПодбораЗаписейЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Функция ВернутьКонтролирующийСценарий(СценарийОбр)
	Если СценарийОбр = справочники.СценарииПланирования.Бюджет_А или
		СценарийОбр = справочники.СценарииПланирования.Бюджет_Инвест или
		СценарийОбр = справочники.СценарииПланирования.Бюджет_У тогда
		СценарийВозврат 		  =СценарийОбр;
	иначе  				
		СценарийВозврат 		  = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролирующий сценарий", СценарийОбр);
	конецЕсли;
	возврат СценарийВозврат;
КонецФункции			

&НаСервере
Функция ПолучитьДоступностьРоли()
	Возврат РольДоступна("ОК_ПолнаяКорректировкаКонтрольныхЗначений") или РольДоступна("ПолныеПрава");
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПодбораЗаписейЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    ОбновитьИтоги();
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

// Процедура проверяет уникальность добавляемой строки, чтобы одну и ту же строку нельзя было добавить дважды в одно поле
//
// Параметры:
//	Элемент - ТаблицаФормы - таблица, в которую осуществляется добавление строки
//	ВыбранноеЗначение - ДанныеФормыЭлементКоллекции - строка, которая добавляется
//	ВидДвижения - строка
//	Отказ - булево
//	ВыводитьСообщения - булево
//
&НаКлиенте
Процедура ПроверитьУникальностьСтроки(Элемент, ВыбранноеЗначение, ВидДвижения, Отказ=Ложь, ВыводитьСообщения=Истина, ИДВладельца="")
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления[ВидДвижения]);
	
	// сформируем структуру поиска по тем полям, которые есть и в таблице на форме и в подборе
	Для Каждого ТекущееПоле Из Элемент.ПодчиненныеЭлементы Цикл
		ИмяРеквизита = СтрЗаменить(ТекущееПоле.Имя, "СуммыКорректировок"+ВидДвижения, "");
		
		Если ИмяРеквизита = "НомерСтроки"
			ИЛИ ИмяРеквизита = "Количество"
			ИЛИ ИмяРеквизита = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыбранноеЗначение.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Вставить(ИмяРеквизита, ВыбранноеЗначение[ИмяРеквизита]);
	КонецЦикла;
	 
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(СтруктураПоиска
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураПоиска);
	
	ИмяТаблицы = ?(ВидДвижения="Приход", "Увеличение", "Уменьшение");
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ И ВыводитьСообщения Тогда
		ТекстСообщения = НСтр("ru='Данная строка уже подобрана в табличную часть """+ИмяТаблицы+""" в строке № "+МассивСтрок[0].НомерСтроки+"'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает отборы для статьи оборотов.
//
// Параметры:
//  Контейнер - ПолеФормы.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатей(Контейнер)

	МассивПараметров = Новый Массив;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтатьи"	, мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
		МассивПараметров.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.РасходДоход", мКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		МассивПараметров.Добавить(НовыйПараметр);
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтатьи"	, мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР);
		МассивПараметров.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.РасходДоход", мКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		МассивПараметров.Добавить(НовыйПараметр);	
	КонецЕсли;
	
	Если МассивПараметров.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Контейнер.ПараметрыВыбора = ПараметрыВыбора;

КонецПроцедуры // УстановитьПараметрыОтбораСтатей()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устнавливает заголовок формы документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Объект.Ссылка.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма, СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура отображает статус на форме документа.
//
// Параметры:
//  Статус 				 - СправочникСсылка.бит_СтатусыОбъектов.
//  ДатаИзмененияСтатуса - Дата.
//
&НаКлиенте                      
Процедура УстановитьСтатусВФорме(пСтатус, пДатаИзмененияСтатуса) Экспорт

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус"			   , пСтатус);
	СтруктураПараметров.Вставить("ДатаИзмененияСтатуса", пДатаИзмененияСтатуса);
	
	ИнформацияСтатус = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
	мКэшЗначений.Вставить("ТекущийСтатус"		, пСтатус);
	мКэшЗначений.Вставить("ДатаИзмененияСтатуса", пДатаИзмененияСтатуса);
	
	ЭтаФорма.Статус 			  = пСтатус;
	ЭтаФорма.ДатаИзмененияСтатуса = пДатаИзмененияСтатуса;
	
КонецПроцедуры // УстановитьСтатусВФорме()

////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриСозданииНаСервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("УстановитьПривилегированныйРежим")
	   И Параметры.УстановитьПривилегированныйРежим
	Тогда 
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	// стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// вызов механизма защиты
	бит_ЛицензированиеБФCервер.ПроверитьВозможностьРаботы(ЭтаФорма,МетаданныеОбъекта.ПолноеИмя(),Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументКорректировка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументКорректировка, МассивТипов, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	// Заполним список имен элементов управления, которые необходимо блокировать при изменении статусов.
	ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке();
		
	// Настроим отображение полей доп. аналитик в таблицах формы.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																					 ,"СуммыКорректировокПриход"
																					 ,мКэшЗначений.ИзмеренияДоп
																					 ,мКэшЗначений.НастройкиИзмерений);
																				 
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																					 ,"СуммыКорректировокРасход"
																					 ,мКэшЗначений.ИзмеренияДоп
																					 ,мКэшЗначений.НастройкиИзмерений);																			 
	НастроитьОформлениеФормы();
	
	// Управление видимостью вызываем для записанного документа.
	УправлениеЭлементамиФормы();
	
	ПоказатьВалютуСценария();
		
	Если НЕ Объект.Проведен Тогда 
		ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.ФормаДокумента");
	КонецЕсли;
	
	мФД = Новый Массив;
	Для Каждого элСоот Из мКэшЗначений.соотФД_ЦФО Цикл 
		мФД.Добавить(элСоот.Ключ);
	КонецЦикла;
	
	фмФД = Новый ФиксированныйМассив(мФД);
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", фмФД);
	
	мПараметров = Новый Массив;
	мПараметров.Добавить(ПараметрВыбора);  		
	фмПараметров = Новый ФиксированныйМассив(мПараметров);
	
	Элементы.ок_ФункциональныйДиректор.ПараметрыВыбора = фмПараметров;
	
	Если мКэшЗначений.соотФД_ЦФО.Количество() = 1 Тогда 
		
		Элементы.ок_ФункциональныйДиректор.Видимость   = Ложь;
		Элементы.ок_ФункциональныйДиректор.Доступность = Ложь;
		
		Объект.ок_ФункциональныйДиректор = мФД[0];		
			
	КонецЕсли;  	
		
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ок_ВозможнаКорректировкаБюджета", Истина);
	
	мПараметров = Новый Массив;
	мПараметров.Добавить(ПараметрВыбора);  		
	
	фмПараметровАналитика_2 = Новый ФиксированныйМассив(мПараметров);
	
	фмПараметровПроект = Новый ФиксированныйМассив(мПараметров);

	Элементы.СуммыКорректировокПриходПроект.Видимость = Объект.Сценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У");
	Элементы.СуммыКорректировокПриходПроект.ПараметрыВыбора		 = фмПараметровПроект;
		
	Элементы.СуммыКорректировокРасходПроект.Видимость = Объект.Сценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У");
	Элементы.СуммыКорректировокРасходПроект.ПараметрыВыбора = фмПараметровПроект;
	
	Элементы.СуммыКорректировокПриходАналитика_2.ПараметрыВыбора = фмПараметровАналитика_2;
	Элементы.СуммыКорректировокРасходАналитика_2.ПараметрыВыбора = фмПараметровАналитика_2;
	
	ПрограммноДобавитьЭлементыФормыСогласующих();
	
	Если Параметры.Свойство("РежимСогласования") Тогда 
		РежимСогласования = Параметры.РежимСогласования;
		Если РежимСогласования Тогда 
			РежимСогласования = ПолучитьДоступностьКнопокСогласования(Объект.Ссылка, мКэшЗначений.ТекущийСтатус);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаСогласование.Видимость = РежимСогласования;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатейОборотов()
	
	мПараметров = Новый Массив;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ок_ВозможнаКорректировкаБюджета", Истина);
	мПараметров.Добавить(ПараметрВыбора);
		
	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда 
		
		Если Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У") Тогда 
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидСтатьи", ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка"));
		Иначе
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидСтатьи", ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность"));
		КонецЕсли;
		
		мПараметров.Добавить(ПараметрВыбора);
		
		Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") Тогда 
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.РасходДоход", ПредопределенноеЗначение("Перечисление.бит_РасходДоход.Расходование"));			 
			мПараметров.Добавить(ПараметрВыбора);
		КонецЕсли;
		
		фмПараметров = Новый ФиксированныйМассив(мПараметров);		
				
		Элементы.СуммыКорректировокПриходСтатьяОборотов.ПараметрыВыбора = фмПараметров;
		
		Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") Тогда 
			
			мСтрокПриход = Объект.СуммыКорректировок.НайтиСтроки(Новый Структура("ВидДвижения", ПредопределенноеЗначение("Перечисление.бит_ВидДвиженияНакопления.Приход")));
			
			мСтатейОборотов = Новый Массив;
			
			Для Каждого стрТЧ Из мСтрокПриход Цикл 
				Если Не ЗначениеЗаполнено(стрТЧ.СтатьяОборотов) Тогда 
					Продолжить;
				КонецЕсли;
				
				мСтатейОборотов.Добавить(стрТЧ.СтатьяОборотов);
				
			КонецЦикла;
			
			Если мСтатейОборотов.Количество() > 0 Тогда 
				
				фмСтатейОборотов = Новый ФиксированныйМассив(мСтатейОборотов);
				ПараметрВыбора	 = Новый ПараметрВыбора("Отбор.Ссылка", фмСтатейОборотов);
				мПараметров.Добавить(ПараметрВыбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		фмПараметров = Новый ФиксированныйМассив(мПараметров);
	
		Элементы.СуммыКорректировокПриходСтатьяОборотов.ПараметрыВыбора = фмПараметров;
		
	КонецЕсли;

	фмПараметров = Новый ФиксированныйМассив(мПараметров);
	
	Элементы.СуммыКорректировокРасходСтатьяОборотов.ПараметрыВыбора = фмПараметров;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораЦФОПоФД()
	
	мЦФО = Новый Массив;
	мЦФО.Добавить(ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка"));
	
	Если ЗначениеЗаполнено(Объект.ок_ФункциональныйДиректор) Тогда 
		
		мЦФО = мКэшЗначений.соотФД_ЦФО.Получить(Объект.ок_ФункциональныйДиректор);
		Если мЦФО = Неопределено Тогда 
			мЦФО = Новый Массив;
		КонецЕсли;
		
	КонецЕсли;
	
	фмЦФО = новый ФиксированныйМассив(мЦФО);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", фмЦФО);
	
	мПараметров = Новый Массив;
	мПараметров.Добавить(ПараметрВыбора);  		
	фмПараметров = Новый ФиксированныйМассив(мПараметров);
	
	Элементы.СуммыКорректировокПриходЦФО.ПараметрыВыбора = фмПараметров;
	Элементы.СуммыКорректировокРасходЦФО.ПараметрыВыбора = фмПараметров;
	
	УправлениеЭлементамиФормы();
	
	мФунДиректор = Объект.ок_ФункциональныйДиректор;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыВыбораСценария(ВидКорректировки)
	
	СтрРезультат = Новый Структура;	
	мСценариев = Новый Массив;
	
	пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_БК_НастройкиБК.ИмяНастройки КАК Сценарий,
	|	бит_БК_НастройкиБК.ЗначениеСсылка КАК СценарийКонтролируемый
	|ИЗ
	|	РегистрСведений.бит_БК_НастройкиБК КАК бит_БК_НастройкиБК
	|ГДЕ
	|	бит_БК_НастройкиБК.ИмяНастройки В (ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Бюджет_У), ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Бюджет_Инвест))
	|	И бит_БК_НастройкиБК.Группа = ""Сценарий контролируемый""");
	
	тСоотСценариев = пЗапрос.Выполнить().Выгрузить();
	
	Если ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") Тогда 
		
		СтрРезультат.Вставить("СценарийВидимость", Ложь); //Сценарий единственный, поэтому скрываем
		
		СтрРезультат.Вставить("Сценарий", ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У"));
		
		стрСоотСценария = тСоотСценариев.Найти(СтрРезультат.Сценарий, "Сценарий");
		Если стрСоотСценария <> Неопределено Тогда 
			СтрРезультат.Вставить("СценарийКонтролируемый", стрСоотСценария.СценарийКонтролируемый);
		КонецЕсли;
		
		мСценариев.Добавить(СтрРезультат.Сценарий);
		
	КонецЕсли;
	
	Если мСценариев.Количество() = 0 Тогда 
		мСценариев = тСоотСценариев.ВыгрузитьКолонку("Сценарий");
	КонецЕсли;
	
	фмСценариев = Новый ФиксированныйМассив(мСценариев);
			
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", фмСценариев);
	
	мПараметров = Новый Массив;
	мПараметров.Добавить(ПараметрВыбора);  		
	
	фмПараметров = Новый ФиксированныйМассив(мПараметров);
	
	СтрРезультат.Вставить("ПараметрыВыбораСценарий", фмПараметров);
	
	Возврат СтрРезультат;
	
КонецФункции

// Процедура - обработчик события "ПриОткрытии" формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда 
			Объект.ВидОперации = мКэшЗначений.ВидыОпераций.КонтрольБюджета;
		КонецЕсли;
		
		// Установить видимость реквизитов и заголовков колонок.	
		УправлениеЭлементамиФормы();
		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2021-04-15 (#4130)
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ок_ВидКорректировки) Тогда 
		
		ОткрытьФорму("Документ.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.Форма.ФормаДокумента", Новый Структура("Ключ", Параметры.Ключ));
		
		Отказ = Истина;
		Возврат;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2021-04-15 (#4130)	
		
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();

	// Установим текущий статус.
	УстановитьСтатусВФорме(мКэшЗначений.ТекущийСтатус, мКэшЗначений.ДатаИзмененияСтатуса);
	
	ОбновитьИтогиБезПересчетаНДС();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
	//ОбновитьИтоги();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	
	УстановитьПараметрыВыбораЦФОПоФД();
	
	ПриИзмененииВидаКорректировки();
	
	УстановитьВидимостьПоВидуКорректировки();	
	УстановитьПараметрыВыбораПоВидуКорректировки();
	
	
	мСценарий 		  = Объект.Сценарий;
	мВидКорректировки = Объект.ок_ВидКорректировки;
	мФунДиректор	  = Объект.ок_ФункциональныйДиректор;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СнятьПривилегированныйРежим();
			
КонецПроцедуры

&НаСервере
Процедура СнятьПривилегированныйРежим()
	
	Если ПривилегированныйРежим() Тогда 
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписиНаСервере" формы
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения 
	    И ЗначениеЗаполнено(ТекущийОбъект.Ок_ВидКорректировки)
		И ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗапуститьМаршрутСогласования")
			    И ТекущийОбъект.ДополнительныеСвойства.ЗапуститьМаршрутСогласования	
	Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров); 
		
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ТекущийСтатус 		 = ТекущийОбъект.мТекущийСтатус;
	ДатаИзмененияСтатуса = ТекущийОбъект.мДатаИзмененияСтатуса;
	
	мКэшЗначений.Вставить("ТекущийСтатус"		, ТекущийСтатус);
	мКэшЗначений.Вставить("ДатаИзмененияСтатуса", ДатаИзмененияСтатуса);
	
	ЭтаФорма.Статус               = ТекущийСтатус;
	ЭтаФорма.ДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус"			   , ТекущийСтатус);
	СтруктураПараметров.Вставить("ДатаИзмененияСтатуса", ДатаИзмененияСтатуса);
	
	ЭтаФорма.ИнформацияСтатус = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);	
	
	// заполним добавленные реквизиты значениями
	Для Каждого ТекущаяСтрока Из Объект.СуммыКорректировок Цикл
		ИДСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	КонецЦикла;
	
	Если Объект.Проведен Тогда 
		
		КнопкаЗаполнитьКолонкуПриход = Элементы.Найти("СуммыКорректировокПриход_ЗаполнитьКолонку");
		Если НЕ КнопкаЗаполнитьКолонкуПриход = Неопределено Тогда 
			Элементы.Удалить(КнопкаЗаполнитьКолонкуПриход);
		КонецЕсли;
		
		КнопкаЗаполнитьКолонкуРасход = Элементы.Найти("СуммыКорректировокРасход_ЗаполнитьКолонку");		
		Если НЕ КнопкаЗаполнитьКолонкуРасход = Неопределено Тогда 
			Элементы.Удалить(КнопкаЗаполнитьКолонкуРасход);
		КонецЕсли;		
		
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаПодборЗаписейПриходЗавершение(Результат, ДополнительныеПараметры) Экспорт
        
КонецПроцедуры

// Процедура - действие команды "КомандаПодборЗаписейРасход"
//
&НаКлиенте
Процедура КомандаПодборЗаписейРасход(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидКорректировки) Тогда
		ТекстСообщения = НСтр("ru='Не заполнен вид корректировки. Невозможно выполнить подбор!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
		
	ОткрытьФормуПодбораЗаписей(Новый ОписаниеОповещения("КомандаПодборЗаписейРасходЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборЗаписейРасходЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры

// Процедура - действие команды "КомандаСкопироватьВсе"
//
&НаКлиенте
Процедура КомандаСкопироватьВсе(Команда)
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		Отказ = Ложь;
		
		ПроверитьУникальностьСтроки(Элементы.СуммыКорректировокПриход, ТекущаяСтрока, "Приход", Отказ, Ложь);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		// добавим строку в таблицу
		НоваяСтрока = Объект.СуммыКорректировок.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		УстановитьИДСтроки(НоваяСтрока);
		
		НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
		НоваяСтрока.ИДВладельца = "";
		
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
		ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
		ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
		СуммыКорректировокПриИзменении(НоваяСтрока);
		
	КонецЦикла;
			
	ОбновитьИтогиБезПересчетаНДС();
	
КонецПроцедуры

// Процедура - действие команды "КомандаСкопироватьТекущуюСтроку"
//
&НаКлиенте
Процедура КомандаСкопироватьТекущуюСтроку(Команда)
	
	ТекущиеДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьУникальностьСтроки(Элементы.СуммыКорректировокПриход, ТекущиеДанные, "Приход", Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// добавим строку в таблицу
	НоваяСтрока = Объект.СуммыКорректировок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	
	УстановитьИДСтроки(НоваяСтрока);
	
	НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
	НоваяСтрока.ИДВладельца = "";
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
			
	СуммыКорректировокПриИзменении(НоваяСтрока);
	
	ОбновитьИтогиБезПересчетаНДС();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СценарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мСценарий = Объект.Сценарий;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	Если НЕ Объект.Сценарий = мСценарий Тогда 
		
		Если Объект.СуммыКорректировок.Количество()<>0 Тогда 
			
			ДопПараметры = Новый Структура;
			СтрСохрРеквизиты = Новый Структура("Сценарий", мСценарий);
			ДопПараметры.Вставить("СохраненныеРеквизиты", СтрСохрРеквизиты);
			ДопПараметры.Вставить("ВыполнитьДействие"	, "ПриИзмененииСценария();");
			ОтветНаВопросОбОчисткеТаблиц = Новый ОписаниеОповещения("ОтветНаВопросОбОчисткеТаблиц", ЭтотОбъект, ДопПараметры); 
			ПоказатьВопрос(ОтветНаВопросОбОчисткеТаблиц, НСтр("ru = 'Табличные части будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
        
	КонецЕсли;

	ПриИзмененииСценария();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСценария()
	
	ПоказатьВалютуСценария();
	
	Для Каждого СтрТЧ Из Объект.СуммыКорректировок Цикл 
		СтрТЧ.Сценарий = Объект.Сценарий;
	КонецЦикла;
	
	УстановитьПараметрыВыбораСтатейОборотов();
	
	Элементы.СуммыКорректировокПриходПроект.Видимость   = Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест");
	Элементы.СуммыКорректировокПриходПроект.Доступность = Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест");
	
	Элементы.СуммыКорректировокРасходПроект.Видимость   = Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест");
	Элементы.СуммыКорректировокРасходПроект.Видимость   = Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест");
	
	УправлениеЭлементамиФормы();
	
	мСценарий = Объект.Сценарий;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидКорректировки"
//
&НаКлиенте
Процедура ВидКорректировкиПриИзменении(Элемент)
	 
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "СуммыКорректировокПриход"

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-04-28 (#3630)
&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcel(Команда)
	
	мУдаляемых = Объект.СуммыКорректировок.НайтиСтроки(Новый Структура("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход));
	
	Если мУдаляемых.Количество() <> 0 Тогда		
		ТекстВопроса = "ru = 'Данные будут перезаполнены. Продолжить?'";
		ДопПараметры = Новый Структура("УдаляемыеСтроки", мУдаляемых);
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьЗагрузкуИзExcelЗавершение", ЭтотОбъект, ДопПараметры), НСтр(ТекстВопроса), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат; 		
	КонецЕсли;	
	
	ВыполнитьЗагрузкуИзExcelОткрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcelЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 		
	
	Для Каждого пСтрУдаления Из ДопПараметры.УдаляемыеСтроки Цикл 
		Объект.СуммыКорректировок.Удалить(пСтрУдаления);
	КонецЦикла; 	
	
	ОбновитьИтоги();
	
	ВыполнитьЗагрузкуИзExcelОткрытьФорму();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзExcelОткрытьФорму()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиИзExcel", ЭтотОбъект);
	мЦФО = мКэшЗначений.соотФД_ЦФО.Получить(Объект.ок_ФункциональныйДиректор);
	Если мЦФО = Неопределено Тогда 
		мЦФО = Новый Массив;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ФункциональныйДиректор, ДоступныеЦФО, ВидКорректировки,Сценарий", Объект.ок_ФункциональныйДиректор, мЦФО, Объект.ок_ВидКорректировки, Объект.Сценарий);
	
	ОткрытьФорму("Обработка.ок_ЗагрузкаИзExcelЗаявки.Форма.ФормаЗагрузки", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗагрузкиИзExcel(Результат, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;

	ОбработатьРезультатЗагрузкиИзExcelНаСервере(Результат);	
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗагрузкиИзExcelНаСервере(АдресВрХранилища)
	
	ТаблицаЗаполнения = ПолучитьИзВременногоХранилища(АдресВрХранилища);

	Если ТипЗнч(ТаблицаЗаполнения)<>Тип("ТаблицаЗначений") ИЛИ ТаблицаЗаполнения.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗаполнения Из ТаблицаЗаполнения Цикл 
		НоваяСтрока = Объект.СуммыКорректировок.Добавить();
		НоваяСтрока.ВидДвижения	= ПредопределенноеЗначение("Перечисление.бит_ВидДвиженияНакопления.Приход");	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаполнения);
	КонецЦикла;
		
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-04-28 (#3630)

&НаКлиенте
Процедура СуммыКорректировокПриходПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	 
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		УстановитьИДСтроки(ТекущиеДанные);
		ТекущиеДанные.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
		
		УстановитьОтборСтрок(Объект, Элементы, мКэшЗначений, Объект.ВидКорректировки, ТекущиеДанные);
		
		ОбновитьИтоги();
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
																	   
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	 
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПослеУдаления(Элемент)
			
	ОбновитьИтоги();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// проверим чтобы одну и ту же строку не добавили дважды
	Отказ = Ложь;
	
	ПроверитьУникальностьСтроки(Элемент, ВыбранноеЗначение, "Приход", Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// добавим строку расхода
	НоваяСтрока = Объект.СуммыКорректировок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
	
	УстановитьИДСтроки(НоваяСтрока);
	
	НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
	
	НоваяСтрока.Сумма		= ВыбранноеЗначение.СуммаРазность;
	НоваяСтрока.Количество	= ВыбранноеЗначение.КоличествоРазность;
	
	НоваяСтрока.СуммаСНДС		= ВыбранноеЗначение.СуммаСНДСРазность;	
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
	// в принципе вызов не нужен, но если заново отбор не установить, то не всегда обновляется содержимое таб.частей
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	СуммыКорректировокПриИзменении(ТекущиеДанные);
		
	УстановитьОтборСтрок(Объект, Элементы, мКэшЗначений, Объект.ВидКорректировки, ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Период" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходПериодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик")
	   И НачалоГода(ТекущиеДанные.Период) <> НачалоГода(ТекущаяДата()) Тогда 
		ТекущиеДанные.Период = Неопределено;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Доступен выбор периода в границах текущего года'"),,,"Объект.СуммыКорректировок["+ТекущиеДанные.ПолучитьИдентификатор()+"].Период");
		Возврат;
	КонецЕсли;	
	
	// Приводим выбранный период на начало периода в завсимости от реквизита "Периодичность" выбранного сценария
	ТекущиеДанные.Период = бит_Бюджетирование.ПолучитьНачалоПериода(ТекущиеДанные.Период, ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Сценарий, "бит_Периодичность"));
			
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СтатьяОборотов" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//
	//ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	//
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	////для управляемой формы отбор устанавливается через параметры выбора, для обычной, по старинке-ручками
	//НачалоВыбораСтатьяОборотов(Элемент,ТекущиеДанные.СтатьяОборотов,СтандартнаяОбработка);
	//#Иначе
	//ИндексСтроки  = ТекущиеДанные.НомерСтроки - 1;
	//
	//УстановитьПараметрыВыбораСтатей(Элемент);
	//#КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтатьяОборотов" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ИзменениеСтатьиОборотов(ИДСтроки);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииДоговора(ИДСтроки);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		НачалоВыбораДоговорКонтрагента(ТекущиеДанные, Элемент, СтандартнаяОбработка);
	#Иначе	
		// Установим отбор для договора контрагента.
		УстановитьПараметрыВыбораДоговораКонтрагента(ТекущиеДанные,Элемент);
	#КонецЕсли
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "БанковскийСчет" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйБанковскийСчет = бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчет(ТекущиеДанные.БанковскийСчет, "Контрагент");
	
	Если НЕ ВыбранныйБанковскийСчет = Неопределено Тогда
		ТекущиеДанные.БанковскийСчет = ВыбранныйБанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "Аналитика_i" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "СуммыКорректировокПриход", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
	                                                                       	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
																			
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Аналитика_i" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "СуммыКорректировокПриход", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
															   
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-15 (#3714)
	УстановитьФормуВыбораДляОбъектаСтроительства(Элемент.Имя);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-15 (#3714)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "СуммыКорректировокРасход"

&НаСервере
Процедура РаспределитьАвтоматически(АдресТЧ)
	
	ТЗДляРаспределения = ПолучитьИзВременногоХранилища(АдресТЧ);
	
	Если ТипЗнч(ТЗДляРаспределения) <> Тип("ТаблицаЗначений") Тогда 
		Возврат;
	КонецЕсли;
	
	ТЗДляРаспределения.Сортировать("Период УБЫВ");
	
	ТЗПриход = Объект.СуммыКорректировок.Выгрузить(Новый Структура("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход));
	
	ТЗРасход = ТЗПриход.СкопироватьКолонки();
	
	ТЗПриход.Колонки.Добавить("ОстатокДляРаспределения");
	ТЗПриход.ЗагрузитьКолонку(ТЗПриход.ВыгрузитьКолонку("Сумма"),"ОстатокДляРаспределения");
	
	ТЗПриход.Сортировать("Период Возр");
	
	Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") Тогда 
		СтрОтбор = Новый Структура("ЦФО,СтатьяОборотов,Проект,Аналитика_2");
	Иначе
		СтрОтбор = Новый Структура("Период");
	КонецЕсли;
	
	Для Каждого СтрПриемник Из ТЗПриход Цикл 
		ОстатокДляРаспределения = СтрПриемник.ОстатокДляРаспределения;
		ЗаполнитьЗначенияСвойств(СтрОтбор, СтрПриемник);
		мНайденных = ТЗДляРаспределения.НайтиСтроки(СтрОтбор);
		пИндекс = мНайденных.Количество()-1;
		Пока пИндекс>=0	Цикл 
			Если ОстатокДляРаспределения <= 0 Тогда 
				Прервать;
			КонецЕсли;
			СуммаРаспределения = Мин(мНайденных[пИндекс].СуммаРазность, ОстатокДляРаспределения);
			
			нСтрРасход = ТЗРасход.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрРасход, мНайденных[пИндекс]);
			нСтрРасход.Сумма = СуммаРаспределения;
			
			ОстатокДляРаспределения = ОстатокДляРаспределения - СуммаРаспределения;
			мНайденных[пИндекс].СуммаРазность = мНайденных[пИндекс].СуммаРазность - СуммаРаспределения;
			Если мНайденных[пИндекс].СуммаРазность = 0 Тогда 
				ТЗДляРаспределения.Удалить(мНайденных[пИндекс]);
			КонецЕсли;
			
			нСтрРасход.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
			
			пИндекс = пИндекс - 1;
		КонецЦикла;
	КонецЦикла;
	
	ТЗРасход.Свернуть("Период,Сценарий,ЦФО,СтатьяОборотов,Проект,Аналитика_2,ВидДвижения", "Сумма");
	мУдаляемые = Объект.СуммыКорректировок.НайтиСтроки(Новый Структура("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход));
	
	пИндексУд = мУдаляемые.Количество()-1;
	Пока пИндексУд >= 0 Цикл 
		Объект.СуммыКорректировок.Удалить(мУдаляемые[пИндексУд]);
		пИндексУд = пИндексУд - 1;
	КонецЦикла;
	
	Для Каждого нСтрРасход Из ТЗРасход Цикл 
		НовСтрокаТЧ = Объект.СуммыКорректировок.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, нСтрРасход);
		НовСтрокаТЧ.ИД = Строка(Новый УникальныйИдентификатор());	
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" табличного поля "СуммыКорректировокРасход"
//
&НаКлиенте
Процедура СуммыКорректировокРасходОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда 
		РаспределитьАвтоматически(ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
	// проверим чтобы одну и ту же строку не добавили дважды
	Отказ = Ложь;
	ДанныеСтрокиВладельца = Неопределено;
	ИДВладельца = "";
		
	ПроверитьУникальностьСтроки(Элемент, ВыбранноеЗначение, "Расход", Отказ,, ИДВладельца);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// добавим строку расхода
	НоваяСтрока = Объект.СуммыКорректировок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
	
	УстановитьИДСтроки(НоваяСтрока);
	
	НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
	НоваяСтрока.ИДВладельца = ИДВладельца;
	НоваяСтрока.Сумма		= ВыбранноеЗначение.СуммаСценарийКонтроль - ВыбранноеЗначение.СуммаСценарийИсполнение;
	//НоваяСтрока.СуммаСНДС	= ВыбранноеЗначение.СуммаСНДССценарийКонтроль - ВыбранноеЗначение.СуммаСНДССценарийИсполнение;
	//НоваяСтрока.Количество	= ВыбранноеЗначение.КоличествоСценарийКонтроль - ВыбранноеЗначение.КоличествоСценарийИсполнение;
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
	// в принципе вызов не нужен, но если заново отбор не установить, то не всегда обновляется содержимое таб.частей
	УстановитьОтборСтрок(Объект, Элементы, мКэшЗначений, Объект.ВидКорректировки, ДанныеСтрокиВладельца);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "СуммыКорректировокРасход"
//
&НаКлиенте
Процедура СуммыКорректировокРасходПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		УстановитьИДСтроки(ТекущиеДанные);
		
		ДанныеСтрокиВладельца = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
		Если НЕ ДанныеСтрокиВладельца = Неопределено Тогда
			ТекущиеДанные.ИДВладельца = ДанныеСтрокиВладельца.ИД;
		КонецЕсли;
		
		ТекущиеДанные.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
		
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
																	   
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПослеУдаления(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  КэшированныеЗначения - Структура.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_ВидыКорректировокКонтрольныхЗначений"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыКорректировокКонтрольныхЗначений));
	КэшПеречисления.Вставить("бит_ВидДвиженияНакопления"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидДвиженияНакопления));
	КэшПеречисления.Вставить("бит_РежимыКонтроляПоБюджету"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РежимыКонтроляПоБюджету));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов"		, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_РасходДоход"				, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("СтавкиНДС"					, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СтавкиНДС));
	
	ЗначенияСтавокНДС = Новый Соответствие();
	Для Каждого ПеречислениеСсылка Из Перечисления.СтавкиНДС Цикл
		ЗначенияСтавокНДС.Вставить(ПеречислениеСсылка,УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ПеречислениеСсылка));
	КонецЦикла;
	КэшированныеЗначения.Вставить("ЗначенияСтавокНДС",ЗначенияСтавокНДС);
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	КэшированныеЗначения.Вставить("ВидыОпераций", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений));
	
	// Статусы 
	КэшированныеЗначения.Вставить("КорректировкаКонтрольныхЗначений_Черновик"		, ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Черновик"));
	КэшированныеЗначения.Вставить("КорректировкаКонтрольныхЗначений_Отменена"  		, ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Отменена"));
	КэшированныеЗначения.Вставить("КорректировкаКонтрольныхЗначений_НаСогласовании"	, ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_НаСогласовании"));
	КэшированныеЗначения.Вставить("КорректировкаКонтрольныхЗначений_Согласована"	, ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Согласована"));
	
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	ПустойСценарий = Справочники[ИмяСправочникаСценарии].ПустаяСсылка();
	
	КэшированныеЗначения.Вставить("ПустойСценарий", ПустойСценарий);
		
	ДокументКорректировка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));
	
	КэшированныеЗначения.Вставить("ИзмеренияДоп"      		  , ДокументКорректировка.мИзмеренияДоп);
	КэшированныеЗначения.Вставить("НастройкиИзмерений"		  , ДокументКорректировка.мНастройкиИзмерений);
	КэшированныеЗначения.Вставить("ТекущийСтатус"             , ДокументКорректировка.мТекущийСтатус);
	КэшированныеЗначения.Вставить("ДатаИзмененияСтатуса"      , ДокументКорректировка.мДатаИзмененияСтатуса);
	
	флЭтоКомплекснаяАвтоматизация = бит_ОбщегоНазначения.ЭтоКомплекснаяАвтоматизация();
	флЭтоУПП					  = Ложь;
	
	КэшированныеЗначения.Вставить("флЭтоКомплекснаяАвтоматизация", флЭтоКомплекснаяАвтоматизация);
	КэшированныеЗначения.Вставить("флЭтоУПП"					 , флЭтоУПП);
	
	// Параметры, используемые для управления автовидимостью колонок
	КэшированныеЗначения.Вставить("НастройкаВидимостиКолонок"	   , Новый Структура);
	КэшированныеЗначения.Вставить("МассивСтатей_СуммыКорректировок", Новый Массив);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", МетаданныеОбъекта.ПредставлениеОбъекта);
	
	КэшированныеЗначения.Вставить("ПроцессСогласованияЗапущен", Документы.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.ПроцессСогласованияЗапущен(Объект.Ссылка));
			
	Если Параметры.Свойство("соотФД_ЦФО") Тогда
		КэшированныеЗначения.Вставить("соотФД_ЦФО", Параметры.соотФД_ЦФО);			
	Иначе
		КэшированныеЗначения.Вставить("соотФД_ЦФО"	, Новый Соответствие);
	КонецЕсли;	     
	
	Если Параметры.Свойство("мДоступныхЦФО") Тогда
		КэшированныеЗначения.Вставить("мДоступныхЦФО", Параметры.мДоступныхЦФО);			
	Иначе
		КэшированныеЗначения.Вставить("мДоступныхЦФО", Новый Массив);
	КонецЕсли;     
	
	Если Параметры.Свойство("РежимСогласования") Тогда 
		КэшированныеЗначения.Вставить("РежимСогласования", Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура заполняет список имен элементов управления,
// которые необходимо блокировать при изменении статусов.
//
// Параметры:
//  Нет.
//
&НаСервере 
Процедура ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке()
	
	// Имена элементов управления, подлежащие блокировке в статусах выше рабочего.
	ИменаЭлементов = Новый Массив;
	
	ИменаЭлементов.Добавить("СуммыКорректировокПриходПериод");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходЦФО");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходСтатьяОборотов");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходПроект");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходБанковскийСчет");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходАналитика_1");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходАналитика_2");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходАналитика_3");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходАналитика_4");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходСумма");
		
	ИменаЭлементов.Добавить("СуммыКорректировокРасходПериод");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходЦФО");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходСтатьяОборотов");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходПроект");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходБанковскийСчет");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходАналитика_1");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходАналитика_2");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходАналитика_3");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходАналитика_4");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходСумма");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходКоличество");
	
	ИменаЭлементов.Добавить("СуммыКорректировокПриходГруппа1");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходГруппа1");
	
	ИменаЭлементов.Добавить("СуммыКорректировокПриходОКЕЙ_КомандаСкопироватьТекущуюСтроку1");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходОКЕЙ_КомандаСкопироватьВсе1");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходОКЕЙ_КомандаСкопироватьВсе");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходОКЕЙ_КомандаСкопироватьТекущуюСтроку");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-04-28 (#3630)
	ИменаЭлементов.Добавить("ВыполнитьЗагрузкуИзExcel");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-04-28 (#3630)
	                                                                                         
	мКэшЗначений.Вставить("ИменаЭлементов", ИменаЭлементов);
	
КонецПроцедуры // ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));
	                         
	ЗаблокироватьЭлементы = НужноЗаблокироватьКлючевыеЭлементы(Объект, мКэшЗначений);
	
	Для каждого ИмяЭлемента Из мКэшЗначений.ИменаЭлементов Цикл
		 Элементы[ИмяЭлемента].Доступность = Не ЗаблокироватьЭлементы;
	КонецЦикла; 
	
	Элементы.Дата.ТолькоПросмотр = Объект.Проведен;
	
	ЕстьКнопкаПровестиИЗакрыть = Элементы.Найти("ФормаПровестиИЗакрыть");
	
	// под ограниченными правами управляемая форма сама удаляет кнопку
	Если НЕ ЕстьКнопкаПровестиИЗакрыть = Неопределено Тогда
		Элементы.ФормаПровестиИЗакрыть.Доступность = Не ЗаблокироватьЭлементы;
	КонецЕсли;
			
	Элементы.ФормаЗаписать.Доступность = Не ЗаблокироватьЭлементы;
	
	Элементы.СуммыКорректировокПриход.ИзменятьСоставСтрок = НЕ ЗаблокироватьЭлементы;
	Элементы.СуммыКорректировокРасход.ИзменятьСоставСтрок = НЕ ЗаблокироватьЭлементы;
	
	Элементы.КомандаПодборЗаписейРасход.Доступность = НЕ ЗаблокироватьЭлементы;
	
	Элементы.ок_ФункциональныйДиректор.Доступность = НЕ ЗаблокироватьЭлементы ИЛИ НЕ Объект.Проведен;
	Элементы.ок_ВидКорректировки.Доступность	   = НЕ ЗаблокироватьЭлементы ИЛИ НЕ Объект.Проведен;
	Элементы.Сценарий.Доступность				   = НЕ ЗаблокироватьЭлементы ИЛИ НЕ Объект.Проведен;
	
	//Элементы.СуммыКорректировокРасходКомандаСкопироватьТекущуюСтроку.Доступность = НЕ ЗаблокироватьЭлементы;
	//Элементы.СуммыКорректировокРасходКомандаСкопироватьВсе.Доступность 			 = НЕ ЗаблокироватьЭлементы;
	
	ТекущаяСтрокаВладелец = Элементы.СуммыКорректировокПриход.ТекущаяСтрока;
	
	УстановитьОтборСтрок(Объект, Элементы, мКэшЗначений, Объект.ВидКорректировки, ТекущаяСтрокаВладелец);
	
	Если Объект.ВидКорректировки = мКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
		Элементы.ГруппаРасход.Заголовок = "За счет";
	Иначе
		Элементы.ГруппаРасход.Заголовок = "Уменьшение";
	КонецЕсли;
	
	// Установим настройки доступности элементов формы.
	//УстановитьНастройкиДоступностиЭлементов();
	
	Элементы.ЗапуститьМаршрутСогласования.Доступность = Не мКэшЗначений.ПроцессСогласованияЗапущен;		
	Элементы.ФормаОтменитьКорректировку.Доступность	  = Объект.Проведен;	
	
	Элементы.СуммыКорректировокПриходАналитика_1.Видимость   = Ложь;
	Элементы.СуммыКорректировокПриходАналитика_1.Доступность = Ложь;
	Элементы.СуммыКорректировокРасходАналитика_1.Видимость	 = Ложь;
	Элементы.СуммыКорректировокРасходАналитика_1.Доступность = Ложь;
	
	Элементы.СуммыКорректировокПриходАналитика_3.Видимость   = Ложь;
	Элементы.СуммыКорректировокПриходАналитика_3.Доступность = Ложь;
	Элементы.СуммыКорректировокРасходАналитика_3.Видимость	 = Ложь;
	Элементы.СуммыКорректировокРасходАналитика_3.Доступность = Ложь;
	
	Элементы.СуммыКорректировокПриходАналитика_4.Видимость   = Ложь;
	Элементы.СуммыКорректировокПриходАналитика_4.Доступность = Ложь;
	Элементы.СуммыКорректировокРасходАналитика_4.Видимость	 = Ложь;
	Элементы.СуммыКорректировокРасходАналитика_4.Доступность = Ложь;
	
	Элементы.СуммыКорректировокПриходАналитика_5.Видимость	 = Ложь;
	Элементы.СуммыКорректировокПриходАналитика_5.Доступность = Ложь;	
	Элементы.СуммыКорректировокРасходАналитика_5.Видимость	 = Ложь;
	Элементы.СуммыКорректировокРасходАналитика_5.Доступность = Ложь;
	
	Элементы.СуммыКорректировокРасходНоменклатурнаяГруппа.Видимость	 = Ложь;
	Элементы.СуммыКорректировокРасходНоменклатурнаяГруппа.Доступность = Ложь;
	
	Если Объект.Проведен Тогда 
		Элементы.ок_ФункциональныйДиректор.Доступность = Ложь;
		Элементы.ок_ВидКорректировки.Доступность	   = Ложь;
		Элементы.Сценарий.Доступность				   = Ложь;
	КонецЕсли;
	
	Если мКэшЗначений.ТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Отклонен") 
	 ИЛИ мКэшЗначений.ТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Отменена")
	 ИЛИ мКэшЗначений.ТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Согласована") 
	Тогда 
		
		Элементы.ФормаОтменитьКорректировку.Доступность = Ложь;
		Элементы.ЗапуститьМаршрутСогласования.Доступность = Ложь;    
		
	КонецЕсли;
	
	
КонецПроцедуры // УправлениеЭлементамиФормы()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(пОбъект, пЭлементы, пКэшЗначений, пВидКорректировки, пТекущаяСтрокаВладелец)
	
	ОтборСтрокПриход = Новый Структура;
	ОтборСтрокПриход.Вставить("ВидДвижения", пКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	
	пЭлементы.СуммыКорректировокПриход.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрокПриход);
	
	ОтборСтрокРасход = Новый Структура;
	ОтборСтрокРасход.Вставить("ВидДвижения", пКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	пЭлементы.СуммыКорректировокРасход.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрокРасход);
	
КонецПроцедуры

// Процедура настраивает условное оформление формы
//
// Параметры:
//	нет
//
&НаСервере
Процедура НастроитьОформлениеФормы()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОформления.Использование = Истина;
	
	ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемыеПоля.Использование = Истина;
	ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммаДокументаПриход");
	
	ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемыеПоля.Использование = Истина;
	ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммаДокументаРасход");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;      
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СуммаДокументаПриход");
	ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СуммаДокументаРасход");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОформления.Использование = Истина;
	
	ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемыеПоля.Использование = Истина;
	ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммаДокументаПриход");
	
	ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемыеПоля.Использование = Истина;
	ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммаДокументаРасход");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаФормы);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;      
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СуммаДокументаПриход");
	ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СуммаДокументаРасход");
		
	РеквизитыСтатьи = ПолучитьРеквизиты("Объект.СуммыКорректировок");
	
	Для Каждого РеквизитСтатьи Из РеквизитыСтатьи Цикл
		
		НайденнаяПозиция = Найти(РеквизитСтатьи.Имя, "СтатьяОборотов_Учет_");
		
		Если НайденнаяПозиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = СтрЗаменить(РеквизитСтатьи.Имя, "СтатьяОборотов_Учет_", "");
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОформления.Использование = Истина;
		
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемыеПоля.Использование = Истина;
		ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммыКорректировокПриход"+ИмяРеквизита);
		
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемыеПоля.Использование = Истина;
		ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммыКорректировокРасход"+ИмяРеквизита);
		
		ЦветРазличийПолей = Новый Цвет(225,225,225);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветРазличийПолей);
				 	
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;      
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СуммыКорректировок."+РеквизитСтатьи.Имя);
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
	КонецЦикла;
	
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемыеПоля.Использование = Истина;
			ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммыКорректировокПриходАналитика_1");
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемыеПоля.Использование = Истина;
			ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммыКорректировокРасходАналитика_1");
			
	СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Справочники.СценарииПланирования.Бюджет_А);
		СписокЗначений.Добавить(Справочники.СценарииПланирования.Бюджет_У);
		СписокЗначений.Добавить(Справочники.СценарииПланирования.Бюджет_Инвест);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;      
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СуммыКорректировок.Сценарий");
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СписокЗначений;
		
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;      
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СуммыКорректировок.Аналитика_1");
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
КонецПроцедуры

// Функция определяет следует ли заблокировать ключевые реквизиты. Сервер.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   ЗаблокироватьРеквизиты – Булево.
//
&НаКлиентеНаСервереБезКонтекста 
Функция НужноЗаблокироватьКлючевыеЭлементы(пОбъект, пмКэшЗначений)

	флЗаблокироватьЭлементы = Ложь;
	
	Если пОбъект.Проведен 
		ИЛИ пмКэшЗначений.ТекущийСтатус = пмКэшЗначений.КорректировкаКонтрольныхЗначений_Согласована
		ИЛИ пмКэшЗначений.ТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Отклонен") 
	 	ИЛИ пмКэшЗначений.ТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Отменена")
		ИЛИ НЕ ЗначениеЗаполнено(пОбъект.ок_ФункциональныйДиректор)
		ИЛИ НЕ ЗначениеЗаполнено(пОбъект.ок_ВидКорректировки)
		ИЛИ НЕ ЗначениеЗаполнено(пОбъект.Сценарий)
	Тогда 	
		флЗаблокироватьЭлементы = Истина;   		
	КонецЕсли; 
	
	Возврат флЗаблокироватьЭлементы;
	
КонецФункции // НужноЗаблокироватьКлючевыеЭлементыСервер()

// Процедура применяет настройки доступности и видимости для элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов() Экспорт
	
	// Получение таблицы настроек доступности элементов управления.
	ТаблицаНастроекДоступности = бит_ОбщегоНазначения.ПолучитьНастройкиДоступностиЭлементовУправления(Объект, Истина);
	
	// Фильтр таблицы настроек по статусу.
	ДокументОбъект 			  = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));
	ТекущийСтатус			  = ДокументОбъект.мТекущийСтатус;
	ТаблицаАктуальныхНастроек = бит_ОбщегоНазначения.ПолучитьАктуальныеНастройки(ТаблицаНастроекДоступности
																				,ТекущийСтатус);
	
	// Структура параметров для проверки произвольного условия.
	ПараметрыУсловия = Новый Структура;
	ПараметрыУсловия.Вставить("ТекущийОбъект", Объект);
	ПараметрыУсловия.Вставить("Статус"		 , ТекущийСтатус);
	
	// Применяем настройки.
	бит_ОбщегоНазначения.УстановитьДоступностьЭлементовУправленияПоНастройкам(ЭтаФорма
																			 ,ТаблицаАктуальныхНастроек
																			 ,ПараметрыУсловия);
	
КонецПроцедуры // УстановитьНастройкиДоступностиЭлементов() 

// Процедура перезаполняет перечень виз по документу.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ЗаполнитьВизы() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры //ЗаполнитьВизы()

// Процедура обрабатывает изменение статьи оборотов
//
// Параметры:
//	ИДСтроки - число - идентификатор строки в которой надо обработать изменение статьи
//
&НаСервере
Процедура ИзменениеСтатьиОборотов(ИДСтроки)
	
	ТекущиеДанные = Объект.СуммыКорректировок.НайтиПоИдентификатору(ИДСтроки);
	
	Если Не ТекущиеДанные.СтатьяОборотов.Учет_Сумма Тогда
		
		ТекущиеДанные.Сумма = 0;
				
	КонецЕсли;
	
	Если Не ТекущиеДанные.СтатьяОборотов.Учет_Количество Тогда
		
		ТекущиеДанные.Количество = 0;
				
	КонецЕсли;
	
	// запомним разрезы бюджетирования используемые в статье оборотов
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
		
КонецПроцедуры

// Процедура заполняет программно добавленные реквизиты формы значениями
//
// Параметры:
//	ИДСтроки - число - идентификатор строки
//
&НаСервере
Процедура ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки)
	
	ТекущиеДанные = Объект.СуммыКорректировок.НайтиПоИдентификатору(ИДСтроки);
	
	РеквизитыСтатьи = ПолучитьРеквизиты("Объект.СуммыКорректировок");
	
	Для Каждого РеквизитСтатьи Из РеквизитыСтатьи Цикл
		
		НайденнаяПозиция = Найти(РеквизитСтатьи.Имя, "СтатьяОборотов_Учет_");
		
		Если НайденнаяПозиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаСтатьи = СтрЗаменить(РеквизитСтатьи.Имя, "СтатьяОборотов_", "");
		
		ТекущиеДанные[РеквизитСтатьи.Имя] = ТекущиеДанные.СтатьяОборотов[ИмяРеквизитаСтатьи];
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обрабатывает изменение договора контрагента
//
// Параметры:
//	ИДСтроки - число - идентификатор строки
//
&НаСервере
Процедура ПриИзмененииДоговора(ИДСтроки)
	
	ТекущиеДанные = Объект.СуммыКорректировок.НайтиПоИдентификатору(ИДСтроки);
	
	Если НЕ ТекущиеДанные.Контрагент = ТекущиеДанные.ДоговорКонтрагента.Владелец Тогда
		ТекущиеДанные.Контрагент = ТекущиеДанные.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
КонецПроцедуры

// Процедура Устанавливает ид строки табличной части
//
// Параметры:
//  ТекущаяСтрока  – СтрокаТабличнойЧасти
//
&НаКлиенте
Процедура УстановитьИДСтроки(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.ИД = Строка(Новый УникальныйИдентификатор());

КонецПроцедуры //УстановитьИДСтроки()

// Процедура подсчитывает итоги по табличным частям
//
&НаКлиенте
Процедура ОбновитьИтоги()
	
	// приход
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	
	СтрокиПриход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	пСуммаФакт  = 0;
	пКоличество = 0;
	
	пСуммаПриходСНДС = 0;
	
	Для Каждого СтрокаПриход Из СтрокиПриход Цикл
		пСумма 		= пСумма + СтрокаПриход.Сумма;
		пСуммаФакт  = пСуммаФакт + СтрокаПриход.СуммаИсполнения;
		пКоличество = пКоличество + СтрокаПриход.Количество;
		
		пСуммаПриходСНДС 		= пСуммаПриходСНДС + СтрокаПриход.СуммаСНДС;
		
	КонецЦикла;
	
	мСуммаПриход 	 	 = пСумма;
	мСуммаПриходФакт 	 = пСуммаФакт;
	мКоличествоПриход 	 = пКоличество;
	СуммаДокументаПриход = мСуммаПриход;
	СуммаДокументаПриходФакт = мСуммаПриходФакт;
	
	мСуммаПриходСНДС = пСуммаПриходСНДС;
	
	// расход
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	
	СтрокиРасход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	пСуммаФакт  = 0;
	пКоличество = 0;
	
	пСуммаРасходСНДС = 0;
	
	Для Каждого СтрокаРасход Из СтрокиРасход Цикл
		пСумма 		= пСумма + СтрокаРасход.Сумма;
		пСуммаФакт  = пСуммаФакт + СтрокаРасход.СуммаИсполнения;
		пКоличество = пКоличество + СтрокаРасход.Количество;
		
		пСуммаРасходСНДС 		= пСуммаРасходСНДС + СтрокаРасход.СуммаСНДС;
		
	КонецЦикла;
	
	мСуммаРасход 	  = пСумма;
	мСуммаРасходФакт  = пСуммаФакт;
	мКоличествоРасход = пКоличество;
	СуммаДокументаРасход = пСумма;             
	СуммаДокументаРасходФакт = мСуммаРасходФакт;
	
	мСуммаРасходСНДС = пСуммаРасходСНДС;
	 
	//Пересчет НДС в строках
	ПересчитатьНДСвСтроках();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьВалютуСценария()
	
	Элементы.СуммаДокументаПриход.Заголовок = "Увеличение ("+Объект.Сценарий.Валюта+")";
	Элементы.СуммаДокументаРасход.Заголовок = "Уменьшение ("+Объект.Сценарий.Валюта+")";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С НАСТРОЙКАМИ

// Процедура сохраняет настройки формы в хранилища общих настроек
//
&НаСервере
Процедура СохранитьНастройки() 
	
	Настройки = Новый Структура;
	Настройки.Вставить("АвтовидимостьКолонок", АвтовидимостьКолонок);
	
	ХранилищеОбщихНастроек.Сохранить("Документ.бит_КорректировкаКонтрольныхЗначений", "Настройки", Настройки);	
	
КонецПроцедуры // СохранитьНастройки()

// Процедура восстанавливает настройки формы из хранилища общих настроек
//
&НаСервере
Процедура ВосстановитьНастройки() 
	
	ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить("Документ.бит_КорректировкаКонтрольныхЗначений", "Настройки");
	
	Если ЗначениеЗаполнено(ЗначениеНастроек) И ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗначениеНастроек.Свойство("АвтовидимостьКолонок", АвтовидимостьКолонок);		
	
	КонецЕсли;                                                	
	
КонецПроцедуры // СохранитьНастройки()

////////////////////////////////////////////////////////
//	Процедуры и фунции для переноса в общие модули

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//  МассивИсключений              - значения элементов коллекции ОбъектЗаполнения, которые не должны добавляться
//
Процедура УстановитьПодменюВыбораВидаОперации(УправляемаяФорма, ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации, МассивИсключений = Неопределено) Экспорт
	
	Если ТипЗнч(МассивИсключений) <> Тип("Массив") Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		
		Если МассивИсключений.Найти(ЭлементЗаполнения.Имя) = Неопределено Тогда
			
			ИмяКнопки = ЭлементМеню.Имя+"_"+ЭлементЗаполнения.Имя;
			
			Кнопка = УправляемаяФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭлементМеню);
			
			ИмяКоманды = "Команда_" + ИмяКнопки;
			
			// Добавляем новую команду обработки выбора вида операции.
			КомандаУстановитьОперацию = УправляемаяФорма.Команды.Добавить(ИмяКоманды);
			КомандаУстановитьОперацию.Действие = ОбъектОбработкиВыбораОперации;
			
			Кнопка.Вид		  = ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.Заголовок  = ЭлементЗаполнения.Синоним;
			
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

&НаКлиенте
Процедура ПересчитатьНДСвСтроках()
	
	Для Каждого ТекСтрока Из Объект.СуммыКорректировок Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда 
			ТекСтрока.СтавкаНДС = мКэшЗначений.Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;
		
		ТекСтрока.СуммаНДС = бит_БК_ОбщийКлиент.РассчитатьСуммуНДС(ТекСтрока.Сумма, Истина, Ложь, мКэшЗначений.ЗначенияСтавокНДС[ТекСтрока.СтавкаНДС]);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КонтекстноеМенюЗаполнитьКолонкуНаСервере(ТекущаяСтрока)
	строкаФормы=объект.СуммыКорректировок.НайтиПоИдентификатору(ТекущаяСтрока);
	ПутьКДанным=этаформа.ТекущийЭлемент.ТекущийЭлемент.ПутьКДанным;
	КолонкаИмя=СтрЗаменить(ПутьКДанным, "Объект.СуммыКорректировок.", "");
	ДокументОбъект = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));		
	ДокументОбъект.ЗаполнитьКолонку(новый  Структура("ВидДвижения,КолонкаИмя,НомерСтрокиИсточника",строкаФормы.ВидДвижения,КолонкаИмя,строкаФормы.НомерСтроки-1));
	ЗначениеВДанныеФормы(ДокументОбъект,Объект); 
	Модифицированность=истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюЗаполнитьКолонку()
	
	КонтекстноеМенюЗаполнитьКолонкуНаСервере(Этаформа.ТекущийЭлемент.ТекущаяСтрока); 	
	ОбновитьИтоги();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры


&НаКлиенте
Процедура ДокументОснованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение)
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеДокументаОснование", ЭтотОбъект, ВыбранноеЗначение); 
	ТекстВопроса = НСтр("ru = 'Документ будет перезаполнен на основании данных выбранного документа-основания. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте 
Процедура ИзменениеДокументаОснование(Ответ, ДополнительныеДанные) Экспорт
	
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДокументОснование = ДополнительныеДанные;
		
		ДокументОснование = ДополнительныеДанные;
		
		Если Объект.СуммыКорректировок.Количество() > 0 Тогда
			Объект.СуммыКорректировок.Очистить();	
		КонецЕсли;	
		
		ПриИзмененииДокументаОснования();
		
		ОбновитьИтогиБезПересчетаНДС();
		
	КонецЕсли; 
                
КонецПроцедуры // ИзменениеДокументаОснование

&НаСервере
Процедура ПриИзмененииДокументаОснования()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		УправлениеЭлементамиФормы();
		
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Объект.ДокументОснование;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("ВводОснованияИзФормыДокумента");		
	КонецЕсли;	
	
	// вызовем стандартную процедуру заполнения документа
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
	УправлениеЭлементамиФормы();
	
КонецПроцедуры


&НаСервере
Функция ВвестиНаОснованииНаСервере()
		
	ТЗСтрок = Объект.ДокументОснование.БДДС.Выгрузить();
	Если Объект.ДокументОснование.Сценарий = Справочники.СценарииПланирования.Заявка_Инвест ИЛИ Объект.ДокументОснование.Сценарий = Справочники.СценарииПланирования.Заявка_У Тогда 
		ТЗСтрок.ЗаполнитьЗначения(Документы.бит_ФормаВводаБюджета.ПустаяСсылка(),"Аналитика_1");
	ИначеЕсли Объект.ДокументОснование.Сценарий = Справочники.СценарииПланирования.Контракт_Инвест Тогда  
		ТЗСтрок.ЗаполнитьЗначения(Объект.бит_БК_НомерЗаявки,"Аналитика_1");
	КонецЕсли;	
	
	Возврат ПоместитьВоВременноеХранилище(ТЗСтрок, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура СуммыКорректировокПриходПриИзменении(Элемент)

	ТекущиеДанные = Элементы["СуммыКорректировокПриход"].ТекущиеДанные;	
	СуммыКорректировокПриИзменении(ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы["СуммыКорректировокРасход"].ТекущиеДанные;	
	СуммыКорректировокПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриИзменении(ТекущиеДанные)
			
	//Если ТекущиеДанные<>Неопределено и мСписокСценариев.Найти(ТекущиеДанные.Сценарий)<>Неопределено Тогда
	//	ТекущиеДанные.Аналитика_1 = Неопределено;
	//КонецЕсли;

КонецПроцедуры

// заменяет процедуру обновления итогов, т.к. возникает ошибка при открытии при пересчете НДС в форме
//непонятно, зачем идет пересчет при открытии 
&НаКлиенте
Процедура ОбновитьИтогиБезПересчетаНДС()
	
	// приход
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	
	СтрокиПриход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	пСуммаФакт  = 0;
	пКоличество = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
	пСуммаПриходСНДС = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	
	Для Каждого СтрокаПриход Из СтрокиПриход Цикл
		пСумма 		= пСумма + СтрокаПриход.Сумма;
		пСуммаФакт  = пСуммаФакт + СтрокаПриход.СуммаИсполнения;
		пКоличество = пКоличество + СтрокаПриход.Количество;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
		пСуммаПриходСНДС 		= пСуммаПриходСНДС + СтрокаПриход.СуммаСНДС;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	КонецЦикла;
	
	мСуммаПриход 	 	 = пСумма;
	мСуммаПриходФакт 	 = пСуммаФакт;
	мКоличествоПриход 	 = пКоличество;
	СуммаДокументаПриход = мСуммаПриход;
	СуммаДокументаПриходФакт = мСуммаПриходФакт;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
	мСуммаПриходСНДС = пСуммаПриходСНДС;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	
	// расход
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	
	СтрокиРасход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	пСуммаФакт  = 0;
	пКоличество = 0;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
	пСуммаРасходСНДС = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	
	Для Каждого СтрокаРасход Из СтрокиРасход Цикл
		пСумма 		= пСумма + СтрокаРасход.Сумма;
		пСуммаФакт  = пСуммаФакт + СтрокаРасход.СуммаИсполнения;
		пКоличество = пКоличество + СтрокаРасход.Количество;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
		пСуммаРасходСНДС 		= пСуммаРасходСНДС + СтрокаРасход.СуммаСНДС;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	КонецЦикла;
	
	мСуммаРасход 	  = пСумма;
	мСуммаРасходФакт  = пСуммаФакт;
	мКоличествоРасход = пКоличество;
	СуммаДокументаРасход = пСумма;             
	СуммаДокументаРасходФакт = мСуммаРасходФакт;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
	мСуммаРасходСНДС = пСуммаРасходСНДС;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	
КонецПроцедуры

&НаКлиенте
Процедура ОКЕЙ_КомандаСкопироватьВсе(Команда)
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		Отказ = Ложь;
		
		ПроверитьУникальностьСтроки(Элементы.СуммыКорректировокРасход, ТекущаяСтрока, "Расход", Отказ, Ложь);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		// добавим строку в таблицу
		НоваяСтрока = Объект.СуммыКорректировок.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		УстановитьИДСтроки(НоваяСтрока);
		
		НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
		НоваяСтрока.ИДВладельца = "";
		
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
		ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
		ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
		СуммыКорректировокПриИзменении(НоваяСтрока);
				
	КонецЦикла;
			
	ОбновитьИтогиБезПересчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОКЕЙ_КомандаСкопироватьТекущуюСтроку(Команда)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ВидДвиж = ?(СтрНайти(Команда.Имя, "Приход") >0, "Приход", "Расход");
	ПроверитьУникальностьСтроки(Элементы.СуммыКорректировокРасход, ТекущиеДанные, ВидДвиж, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// добавим строку в таблицу
	НоваяСтрока = Объект.СуммыКорректировок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	
	УстановитьИДСтроки(НоваяСтрока);
	
	НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
	НоваяСтрока.ИДВладельца = "";
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
			
	СуммыКорректировокПриИзменении(НоваяСтрока);
	
	ОбновитьИтогиБезПересчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОКЕЙ_ИнвертироватьУвеличение(Команда)
	
	ИнвертироватьСуммыТабличнойЧасти(мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	ОбновитьИтогиБезПересчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОКЕЙ_ИнвертироватьУменьшение(Команда)
	
	ИнвертироватьСуммыТабличнойЧасти(мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	ОбновитьИтогиБезПересчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьСуммыТабличнойЧасти(ВидДвиженияТЧ)

	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", ВидДвиженияТЧ);
	
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		ПромежуточнаяСумма 				= ТекущаяСтрока.Сумма;
		ТекущаяСтрока.Сумма 			= ТекущаяСтрока.СуммаИсполнения;
		ТекущаяСтрока.СуммаИсполнения   = ПромежуточнаяСумма;
		
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходСуммаПриИзменении(Элемент)
	
	ТекДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходСтавкаНДСПриИзменении(Элемент)
	
	ТекДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходСуммаПриИзменении(Элемент)
	
	ТекДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходСтавкаНДСПриИзменении(Элемент)
			
	ТекДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьМаршрутСогласованияНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗапуститьМаршрутСогласования", Истина);
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Ошибка = НСтр("ru = 'Не удалось запустить маршрут согласования по причине: %1'");
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, ОписаниеОшибки());
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Ошибка;
	КонецПопытки;
	
	мКэшЗначений.Вставить("ТекущийСтатус"             , ДокументОбъект.мТекущийСтатус);
	мКэшЗначений.Вставить("ДатаИзмененияСтатуса"      , ДокументОбъект.мДатаИзмененияСтатуса);
	
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(Новый Структура("Объект", ДокументОбъект.Ссылка));
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	мСтрокСПустымиИнициаторами = ТаблицаЗаписей.НайтиСтроки(Новый Структура("ФизическоеЛицо", ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.ПустаяСсылка")));
	Если мСтрокСПустымиИнициаторами.Количество()<>0 Тогда
		
		Ошибка = "";
		
		Для Каждого стрСПустымИнициатором ИЗ мСтрокСПустымиИнициаторами Цикл 
			Ошибка = Ошибка + "," + стрСПустымИнициатором.Виза;
		КонецЦикла;
		
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Не заданы согласователи следующих виз: %1", Сред(Ошибка,2));;
		
		Ошибка = Ошибка + Символы.ПС + НСтр("ru = 'Обратитесь к финансовому контролеру'");
		
		НаборЗаписей.Очистить();
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
			УстановитьПривилегированныйРежим(Ложь);
			Возврат ОписаниеОшибки();	
		КонецПопытки;
		
		ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
		
		УправлениеЭлементамиФормы();
	
		Модифицированность = Ложь;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат Ошибка;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
	мКэшЗначений.Вставить("ПроцессСогласованияЗапущен", Истина);

	Элементы.ЗапуститьМаршрутСогласования.Доступность = Ложь;
	
	бит_Визирование.ОтправитьСообщениеИнициаторуОСменеСтатуса_ККЗБ(Объект.Ссылка);
	
	ОтправитьСообщениеСотрудникамФинОтдела(Объект.Ссылка);
	
	ПрограммноДобавитьЭлементыФормыСогласующих();
	
	УправлениеЭлементамиФормы();
	
	Модифицированность = Ложь;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтправитьСообщениеСотрудникамФинОтдела(Ссылка)
	
	ШаблонФинДиректору = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Оповещения ККЗБ", "Шаблон оповещения сотрудников фин отдела о запуске маршрута");
	
	КэшАдресов = Неопределено;      
	
	АдресатыФинОтдел = бит_Визирование.ПолучитьАдресатовФинОтдела(Ссылка, КэшАдресов);
	
    Для Каждого ЭлАдресат Из АдресатыФинОтдел Цикл 
		
		СтруктураКонтекста = бит_Визирование.ПолучитьСтруктуруКонтекстаДляПисьма_ККЗБ(Ссылка, ШаблонФинДиректору);
		
		СтруктураКонтекста.Вставить("Получатель"	, ЭлАдресат.Значение);
		СтруктураКонтекста.Вставить("Пользователь"	, ЭлАдресат.Значение);
		
		бит_Визирование.ВыполнитьОтправкуОповещенияОСогласовании(СтруктураКонтекста, КэшАдресов);
		
	КонецЦикла;			
		
КонецПроцедуры

&НаКлиенте
Процедура ОтветПровестиИЗапуститьМаршрут(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ЗапуститьМаршрутСогласованияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьМаршрутСогласования(Команда)
	
	Если Не Объект.Проведен Тогда 
		ОписаниеОповещенияПровестиИЗапуститьМаршрут = Новый ОписаниеОповещения("ОтветПровестиИЗапуститьМаршрут", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияПровестиИЗапуститьМаршрут, НСтр("ru = 'Перед запуском маршрута документ будет проведен. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ЗапуститьМаршрутСогласованияНаКлиенте();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьМаршрутСогласованияНаКлиенте()
	
	ОшибкиПриЗапускеМаршрута = ЗапуститьМаршрутСогласованияНаСервере();
	
	Прочитать();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();		
	
	// Установим текущий статус.
	УстановитьСтатусВФорме(мКэшЗначений.ТекущийСтатус, мКэшЗначений.ДатаИзмененияСтатуса);			
	
	Если ПустаяСтрока(ОшибкиПриЗапускеМаршрута) Тогда 		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Запущен процесс согласования корректировки по маршруту'"));
	Иначе 
		ТекстОшибки = НСтр("ru = 'Не удалось запустить процесс согласования, т.к.:
                           |%1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОшибкиПриЗапускеМаршрута);
		ПоказатьПредупреждение(,ТекстОшибки,30);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрограммноДобавитьЭлементыФормыСогласующих() 
	
	УдаляемыеРеквизиты = Новый Массив;
	Реквизиты = ПолучитьРеквизиты();
	Колво=Реквизиты.Количество();
	Для п = 0 по Колво-1 Цикл
		ТекЭлемент = Реквизиты.Получить(п);
		Если Сред(ТекЭлемент.Имя,1,3)="Рек" Тогда
			УдаляемыеРеквизиты.Добавить(ТекЭлемент.Имя);
		КонецЕсли;   		
	КонецЦикла; 
	
	ДобавляемыеРеквизиты = Новый Массив;
	пСтруктураРеквизитЗначение = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(ЕСТЬNULL(бит_УстановленныеВизы.Виза, """")) КАК Виза,
	|	ЕСТЬNULL(бит_УстановленныеВизы.ФизическоеЛицо, """") КАК ФизическоеЛицо,
	|	МАКСИМУМ(ЕСТЬNULL(бит_УстановленныеВизы.Решение, """")) КАК Решение,
	|	МАКСИМУМ(ЕСТЬNULL(бит_УстановленныеВизы.ФизическоеЛицо.ЦФО, """")) КАК ЦФО,
	|	МАКСИМУМ(ЕСТЬNULL(бит_УстановленныеВизы.ФизическоеЛицо.Email, """")) КАК Email,
	|	МАКСИМУМ(ЕСТЬNULL(бит_УстановленныеВизы.ФизическоеЛицо.Должность, """")) КАК Должность,
	|	МАКСИМУМ(ЕСТЬNULL(бит_УстановленныеВизы.ФизическоеЛицо.Телефон, """")) КАК Телефон,
	|	МИНИМУМ(бит_УстановленныеВизы.КодСортировки) КАК КодСортировки,
	|	бит_УстановленныеВизы.Виза.СБ_ГруппаВиз
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	бит_УстановленныеВизы.Объект = &Объект
	|	И бит_УстановленныеВизы.ФизическоеЛицо <> Значение(Справочник.Бит_БК_Инициаторы.СБ_НеЗадан)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_УстановленныеВизы.Виза.СБ_ГруппаВиз,
	|	ЕСТЬNULL(бит_УстановленныеВизы.ФизическоеЛицо, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСортировки";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Сч = 0;
	СчГрупп = 0;
	НомерГруппы = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сч = Сч + 1;
		
		Если Цел(СчГрупп/4)= СчГрупп/4  или СчГрупп/4 = 0 Тогда
			НомерГруппы = НомерГруппы + 1;
			Если Элементы.Найти("СБ_Группа"+Строка(НомерГруппы)) = Неопределено Тогда	
				
				СтрЗапРекв = Новый Структура;
				СтрЗапРекв.Вставить("ТипЭлемента"			,	Тип("ГруппаФормы"));
				СтрЗапРекв.Вставить("ИмяЭлементаРодителя"	,	"Группа12");
				СтрЗапРекв.Вставить("Вид"					,	ВидГруппыФормы.ОбычнаяГруппа);
				СтрЗапРекв.Вставить("Заголовок"				,	"");				
				СтрЗапРекв.Вставить("Группировка"			,	ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);				
				пСтруктураРеквизитЗначение.Вставить("СБ_Группа"+Строка(НомерГруппы),СтрЗапРекв);
						
			КонецЕсли;	
		КонецЕсли;
		
		СчГрупп=СчГрупп+1;
		
		//Добавим группу:
		
		ЭлементГруппыСогласующих = Элементы.Найти("СБ_ГруппаСогласующих"+Строка(Сч));
		Если ЭлементГруппыСогласующих = Неопределено Тогда 
			СтрЗапРекв = Новый Структура;
			СтрЗапРекв.Вставить("ТипЭлемента"			,	Тип("ГруппаФормы"));
			СтрЗапРекв.Вставить("ИмяЭлементаРодителя"	,	"СБ_Группа"+Строка(НомерГруппы));
			СтрЗапРекв.Вставить("Вид"					,	ВидГруппыФормы.ОбычнаяГруппа);
			СтрЗапРекв.Вставить("Заголовок"				,	""+ВыборкаДетальныеЗаписи.Виза);				
			СтрЗапРекв.Вставить("Отображение"			,	ОтображениеОбычнойГруппы.СильноеВыделение);			
			пСтруктураРеквизитЗначение.Вставить("СБ_ГруппаСогласующих"+Строка(Сч),СтрЗапРекв);			
		Иначе
			ЭлементГруппыСогласующих.Заголовок = "" +ВыборкаДетальныеЗаписи.Виза; 
		КонецЕсли;
		 
		ЕстьЛиЭлемент = Истина;
		
		Если  ЕстьЛиЭлемент <> Неопределено Тогда
			МассивТипов = новый Массив;
			МассивТипов.Добавить("СправочникСсылка.бит_БК_Инициаторы");
			МассивТипов.Добавить("СправочникСсылка.Пользователи");
			МассивТипов.Добавить("Строка");
			
			МассивТипов.Добавить(ТипЗнч(ВыборкаДетальныеЗаписи.ФизическоеЛицо));
						
			Реквизит = Новый РеквизитФормы("Реквизит"+Строка(Сч)+"1", Новый ОписаниеТипов(МассивТипов),,"", Истина);	
			
			ДобавляемыеРеквизиты.Добавить(Реквизит);
				
			Если Элементы.Найти("Реквизит" + Строка(Сч)+"1") = Неопределено Тогда
				СтрЗапРекв = Новый Структура;
				СтрЗапРекв.Вставить("ПутьКДанным"			,	Реквизит.Имя);
				СтрЗапРекв.Вставить("ТипЭлемента"			,	Тип("ПолеФормы"));
				СтрЗапРекв.Вставить("ИмяЭлементаРодителя"	,	"СБ_ГруппаСогласующих"+Строка(Сч)); 
				СтрЗапРекв.Вставить("Вид"					,	ВидПоляФормы.ПолеВвода);
				СтрЗапРекв.Вставить("Заголовок"				,	"ФИО");
				СтрЗапРекв.Вставить("ТолькоПросмотр"		,	Истина);				
				СтрЗапРекв.Вставить("РекЗначение"			,	ВыборкаДетальныеЗаписи.ФизическоеЛицо);
				
				пСтруктураРеквизитЗначение.Вставить(Реквизит.Имя,СтрЗапРекв);
				
			Иначе
				ЭтаФорма["Реквизит" + Строка(Сч)+"1"] = ВыборкаДетальныеЗаписи.ФизическоеЛицо;
			КонецЕсли;
			
			//Реквизит Функция сч_2:
			МассивТипов = новый Массив;
			МассивТипов.Добавить("СправочникСсылка.Подразделения");
			МассивТипов.Добавить("Строка");
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
			//ДобавляемыеРеквизиты = Новый Массив;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			МассивТипов.Добавить(ТипЗнч(ВыборкаДетальныеЗаписи.ЦФО));
			
			
			Реквизит = Новый РеквизитФормы("Реквизит"+Строка(Сч)+"2", Новый ОписаниеТипов(МассивТипов),,"", Истина);	
			
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
			//ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			Если Элементы.Найти("Реквизит" + Строка(Сч)+"2") = Неопределено Тогда
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
				//НовыйЭлемент = ЭтаФорма.Элементы.Добавить("Реквизит" + Строка(Сч)+"2", Тип("ПолеФормы"), ЕстьЛиЭлемент);
				//НовыйЭлемент.ПутьКДанным 	= "Реквизит"+Строка(Сч)+"2";
				//НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
				//НовыйЭлемент.Заголовок = "ЦФО";
				//НовыйЭлемент.ТолькоПросмотр = Истина; 
				//ЭтаФорма["Реквизит" + Строка(Сч)+"2"] = ВыборкаДетальныеЗаписи.ЦФО;
				//Заменено на:				
				СтрЗапРекв = Новый Структура;
				СтрЗапРекв.Вставить("ПутьКДанным"			,	Реквизит.Имя);
				СтрЗапРекв.Вставить("ТипЭлемента"			,	Тип("ПолеФормы"));
				СтрЗапРекв.Вставить("ИмяЭлементаРодителя"	,	"СБ_ГруппаСогласующих"+Строка(Сч)); 
				СтрЗапРекв.Вставить("Вид"					,	ВидПоляФормы.ПолеВвода);
				СтрЗапРекв.Вставить("Заголовок"				,	"ЦФО");
				СтрЗапРекв.Вставить("ТолькоПросмотр"		,	Истина);
				СтрЗапРекв.Вставить("РекЗначение"			,	ВыборкаДетальныеЗаписи.ЦФО);
				
				пСтруктураРеквизитЗначение.Вставить(Реквизит.Имя,СтрЗапРекв);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			Иначе
				ЭтаФорма["Реквизит" + Строка(Сч)+"2"] = ВыборкаДетальныеЗаписи.ЦФО;
			КонецЕсли;
			
			//Реквизит Должность сч_3:
			МассивТипов = новый Массив; 		
			МассивТипов.Добавить("Строка");
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
			//ДобавляемыеРеквизиты = Новый Массив;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			МассивТипов.Добавить(ТипЗнч(ВыборкаДетальныеЗаписи.Должность));
			
			
			Реквизит = Новый РеквизитФормы("Реквизит"+Строка(Сч)+"3", Новый ОписаниеТипов(МассивТипов),,"", Истина);	
			
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
			//ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			Если Элементы.Найти("Реквизит" + Строка(Сч)+"3") = Неопределено Тогда
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
				//НовыйЭлемент = ЭтаФорма.Элементы.Добавить("Реквизит" + Строка(Сч)+"3", Тип("ПолеФормы"), ЕстьЛиЭлемент);
				//НовыйЭлемент.ПутьКДанным 	= "Реквизит"+Строка(Сч)+"3";
				//НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
				//НовыйЭлемент.Заголовок = "Должность";
				//НовыйЭлемент.ТолькоПросмотр = Истина;
				//ЭтаФорма["Реквизит" + Строка(Сч)+"3"] = ВыборкаДетальныеЗаписи.Должность;
				//Заменено на:				
				СтрЗапРекв = Новый Структура;
				СтрЗапРекв.Вставить("ПутьКДанным"			,	Реквизит.Имя);
				СтрЗапРекв.Вставить("ТипЭлемента"			,	Тип("ПолеФормы"));
				СтрЗапРекв.Вставить("ИмяЭлементаРодителя"	,	"СБ_ГруппаСогласующих"+Строка(Сч)); 
				СтрЗапРекв.Вставить("Вид"					,	ВидПоляФормы.ПолеВвода);
				СтрЗапРекв.Вставить("Заголовок"				,	"Должность");
				СтрЗапРекв.Вставить("ТолькоПросмотр"		,	Истина);
				СтрЗапРекв.Вставить("РекЗначение"			,	ВыборкаДетальныеЗаписи.Должность);
				
				пСтруктураРеквизитЗначение.Вставить(Реквизит.Имя,СтрЗапРекв);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			Иначе
				ЭтаФорма["Реквизит" + Строка(Сч)+"3"] = ВыборкаДетальныеЗаписи.Должность;
			КонецЕсли;
			//Реквизит емейл сч_4:
			МассивТипов = новый Массив;	
			МассивТипов.Добавить("Строка");
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
			//ДобавляемыеРеквизиты = Новый Массив;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			
			МассивТипов.Добавить(ТипЗнч(ВыборкаДетальныеЗаписи.Email));
			
			
			Реквизит = Новый РеквизитФормы("Реквизит"+Строка(Сч)+"4", Новый ОписаниеТипов(МассивТипов),,"", Истина);	
			
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
			//ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			Если Элементы.Найти("Реквизит" + Строка(Сч)+"4") = Неопределено Тогда
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
				//НовыйЭлемент = ЭтаФорма.Элементы.Добавить("Реквизит" + Строка(Сч)+"4", Тип("ПолеФормы"), ЕстьЛиЭлемент);
				//НовыйЭлемент.ПутьКДанным 	= "Реквизит"+Строка(Сч)+"4";
				//НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
				//НовыйЭлемент.Заголовок = "Email";
				//НовыйЭлемент.ТолькоПросмотр = Истина;
				//ЭтаФорма["Реквизит" + Строка(Сч)+"4"] = ВыборкаДетальныеЗаписи.Email;
				//Заменено на:				
				СтрЗапРекв = Новый Структура;
				СтрЗапРекв.Вставить("ПутьКДанным"			,	Реквизит.Имя);
				СтрЗапРекв.Вставить("ТипЭлемента"			,	Тип("ПолеФормы"));
				СтрЗапРекв.Вставить("ИмяЭлементаРодителя"	,	"СБ_ГруппаСогласующих"+Строка(Сч)); 
				СтрЗапРекв.Вставить("Вид"					,	ВидПоляФормы.ПолеВвода);
				СтрЗапРекв.Вставить("Заголовок"				,	"Email");
				СтрЗапРекв.Вставить("ТолькоПросмотр"		,	Истина);
				СтрЗапРекв.Вставить("РекЗначение"			,	ВыборкаДетальныеЗаписи.Email);
				
				пСтруктураРеквизитЗначение.Вставить(Реквизит.Имя,СтрЗапРекв);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			Иначе
				ЭтаФорма["Реквизит" + Строка(Сч)+"4"] = ВыборкаДетальныеЗаписи.Email;
			КонецЕсли;
			//Реквизит телефон сч_5:
			МассивТипов = новый Массив;	
			МассивТипов.Добавить("Строка");
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
			//ДобавляемыеРеквизиты = Новый Массив;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			
			МассивТипов.Добавить(ТипЗнч(ВыборкаДетальныеЗаписи.Телефон));
			
			
			Реквизит = Новый РеквизитФормы("Реквизит"+Строка(Сч)+"5", Новый ОписаниеТипов(МассивТипов),,"", Истина);	
			
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
			//ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			Если Элементы.Найти("Реквизит" + Строка(Сч)+"5") = Неопределено Тогда
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
				//НовыйЭлемент = ЭтаФорма.Элементы.Добавить("Реквизит" + Строка(Сч)+"5", Тип("ПолеФормы"), ЕстьЛиЭлемент);
				//НовыйЭлемент.ПутьКДанным 	= "Реквизит"+Строка(Сч)+"5";
				//НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
				//НовыйЭлемент.Заголовок = "Телефон";
				//НовыйЭлемент.ТолькоПросмотр = Истина;
				//ЭтаФорма["Реквизит" + Строка(Сч)+"5"] = ВыборкаДетальныеЗаписи.Телефон;
				//Заменено на:				
				СтрЗапРекв = Новый Структура;
				СтрЗапРекв.Вставить("ПутьКДанным"			,	Реквизит.Имя);
				СтрЗапРекв.Вставить("ТипЭлемента"			,	Тип("ПолеФормы"));
				СтрЗапРекв.Вставить("ИмяЭлементаРодителя"	,	"СБ_ГруппаСогласующих"+Строка(Сч)); 
				СтрЗапРекв.Вставить("Вид"					,	ВидПоляФормы.ПолеВвода);
				СтрЗапРекв.Вставить("Заголовок"				,	"Телефон");
				СтрЗапРекв.Вставить("ТолькоПросмотр"		,	Истина);
				СтрЗапРекв.Вставить("РекЗначение"			,	ВыборкаДетальныеЗаписи.Телефон);
				
				пСтруктураРеквизитЗначение.Вставить(Реквизит.Имя,СтрЗапРекв);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			Иначе
				ЭтаФорма["Реквизит" + Строка(Сч)+"5"] = ВыборкаДетальныеЗаписи.Телефон;
			КонецЕсли;
			//Реквизит Решение сч_6:
			МассивТипов = новый Массив;	
			МассивТипов.Добавить("Строка");
			МассивТипов.Добавить("СправочникСсылка.бит_ВидыРешенийСогласования");
			
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
			//ДобавляемыеРеквизиты = Новый Массив;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			
			МассивТипов.Добавить(ТипЗнч(ВыборкаДетальныеЗаписи.Решение));
			
			
			Реквизит = Новый РеквизитФормы("Реквизит"+Строка(Сч)+"6", Новый ОписаниеТипов(МассивТипов),,"", Истина);	
			
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
			//ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
			
			Если Элементы.Найти("Реквизит" + Строка(Сч)+"6") = Неопределено Тогда
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
				//НовыйЭлемент = ЭтаФорма.Элементы.Добавить("Реквизит" + Строка(Сч)+"6", Тип("ПолеФормы"), ЕстьЛиЭлемент);
				//НовыйЭлемент.ПутьКДанным 	= "Реквизит"+Строка(Сч)+"6";
				//НовыйЭлемент.Вид			= ВидПоляФормы.ПолеВвода;
				//НовыйЭлемент.Заголовок = "Решение";
				//НовыйЭлемент.ТолькоПросмотр = Истина;
				//ЭтаФорма["Реквизит" + Строка(Сч)+"6"] = ВыборкаДетальныеЗаписи.Решение;
				//Заменено на:				
				СтрЗапРекв = Новый Структура;
				СтрЗапРекв.Вставить("ПутьКДанным"			,	Реквизит.Имя);
				СтрЗапРекв.Вставить("ТипЭлемента"			,	Тип("ПолеФормы"));
				СтрЗапРекв.Вставить("ИмяЭлементаРодителя"	,	"СБ_ГруппаСогласующих"+Строка(Сч)); 
				СтрЗапРекв.Вставить("Вид"					,	ВидПоляФормы.ПолеВвода);
				СтрЗапРекв.Вставить("Заголовок"				,	"Решение");
				СтрЗапРекв.Вставить("ТолькоПросмотр"		,	Истина);
				СтрЗапРекв.Вставить("РекЗначение"			,	ВыборкаДетальныеЗаписи.Решение);
				
				пСтруктураРеквизитЗначение.Вставить(Реквизит.Имя,СтрЗапРекв);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942) 
			Иначе
				ЭтаФорма["Реквизит" + Строка(Сч)+"6"] = ВыборкаДетальныеЗаписи.Решение;
			КонецЕсли;
					
		КонецЕсли;
	КонецЦикла;

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
	Если ДобавляемыеРеквизиты.Количество()>0 ИЛИ
		 УдаляемыеРеквизиты.Количество()>0
	Тогда  
	  	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
				
		Для Каждого пСоздаваемыйЭлемент Из пСтруктураРеквизитЗначение Цикл 
			Если пСоздаваемыйЭлемент.Значение.ТипЭлемента =  Тип("ПолеФормы") Тогда 
				НовыйЭлемент = ЭтаФорма.Элементы.Добавить(пСоздаваемыйЭлемент.Ключ, пСоздаваемыйЭлемент.Значение.ТипЭлемента, Элементы[пСоздаваемыйЭлемент.Значение.ИмяЭлементаРодителя]);
				НовыйЭлемент.ПутьКДанным 	= пСоздаваемыйЭлемент.Значение.ПутьКДанным;
				НовыйЭлемент.Вид			= пСоздаваемыйЭлемент.Значение.Вид;
				НовыйЭлемент.Заголовок 		= пСоздаваемыйЭлемент.Значение.Заголовок;
				НовыйЭлемент.ТолькоПросмотр = пСоздаваемыйЭлемент.Значение.ТолькоПросмотр;
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-24 (#3231)
				Если пСоздаваемыйЭлемент.Значение.Свойство("МногострочныйРежим") Тогда 
					НовыйЭлемент.МногострочныйРежим = пСоздаваемыйЭлемент.Значение.МногострочныйРежим;
				КонецЕсли;
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-24 (#3231)
				
				ЭтаФорма[НовыйЭлемент.ПутьКДанным] = пСоздаваемыйЭлемент.Значение.РекЗначение;
			ИначеЕсли пСоздаваемыйЭлемент.Значение.ТипЭлемента =  Тип("ГруппаФормы") Тогда 
				НовыйЭлемент = ЭтаФорма.Элементы.Добавить(пСоздаваемыйЭлемент.Ключ, пСоздаваемыйЭлемент.Значение.ТипЭлемента, Элементы[пСоздаваемыйЭлемент.Значение.ИмяЭлементаРодителя]);
				НовыйЭлемент.Вид			= пСоздаваемыйЭлемент.Значение.Вид;
				НовыйЭлемент.Заголовок 		= пСоздаваемыйЭлемент.Значение.Заголовок;
				Если пСоздаваемыйЭлемент.Значение.Свойство("Отображение") Тогда 
					НовыйЭлемент.Отображение = пСоздаваемыйЭлемент.Значение.Отображение;
				КонецЕсли;
				Если пСоздаваемыйЭлемент.Значение.Свойство("Группировка") Тогда 
					НовыйЭлемент.Группировка = пСоздаваемыйЭлемент.Значение.Группировка;
				КонецЕсли;                                                              
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ФункциональныйДиректорПриИзменении(Элемент)
	
	Если Объект.ок_ФункциональныйДиректор = мФунДиректор Тогда 		
		Возврат;
	КонецЕсли;
	
	Если Объект.СуммыКорректировок.Количество()<>0 Тогда 
		
		ДопПараметры = Новый Структура;
		СтрСохрРеквизиты = Новый Структура("ок_ФункциональныйДиректор", мФунДиректор);
		ДопПараметры.Вставить("СохраненныеРеквизиты", СтрСохрРеквизиты);
		ДопПараметры.Вставить("ВыполнитьДействие"	, "УстановитьПараметрыВыбораЦФОПоФД();");
		ОтветНаВопросОбОчисткеТаблиц = Новый ОписаниеОповещения("ОтветНаВопросОбОчисткеТаблиц", ЭтотОбъект, ДопПараметры); 
		ПоказатьВопрос(ОтветНаВопросОбОчисткеТаблиц, НСтр("ru = 'Табличные части будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
		Возврат;
		
	КонецЕсли; 
	
	УстановитьПараметрыВыбораЦФОПоФД();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Не ЗначениеЗаполнено(Объект.ок_ВидКорректировки) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен вид корректировки'"),,"ок_ВидКорректировки","Объект",Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ок_ВидКорректировкиПриИзменении(Элемент)
		
	Если мВидКорректировки = Объект.ок_ВидКорректировки Тогда 
  		Возврат;
	КонецЕсли;
	
	Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик")
	   И Объект.Сценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У")
	   И Объект.СуммыКорректировок.Количество() > 0
	Тогда 
		ДопПараметры = Новый Структура;
		СтрСохрРеквизиты = Новый Структура("ок_ВидКорректировки", мВидКорректировки);
		ДопПараметры.Вставить("СохраненныеРеквизиты", СтрСохрРеквизиты);
		ДопПараметры.Вставить("ВыполнитьДействие"	, "ПриИзмененииВидаКорректировки();");
		ОтветНаВопросОбОчисткеТаблиц = Новый ОписаниеОповещения("ОтветНаВопросОбОчисткеТаблиц", ЭтотОбъект, ДопПараметры); 
		ПоказатьВопрос(ОтветНаВопросОбОчисткеТаблиц, НСтр("ru = 'Табличные части будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;

	ПриИзмененииВидаКорректировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОбОчисткеТаблиц(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		
		Если ДопПараметры.Свойство("СохраненныеРеквизиты") Тогда 
			Для Каждого ЭлСохр Из ДопПараметры.СохраненныеРеквизиты Цикл 
				Объект[ЭлСохр.Ключ] = ЭлСохр.Значение;
			КонецЦикла;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Объект.СуммыКорректировок.Очистить();
	
	Если ДопПараметры.Свойство("ВыполнитьДействие") Тогда 
		Выполнить(ДопПараметры.ВыполнитьДействие);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаКорректировки()
	
	УстановитьВидимостьПоВидуКорректировки();
	УстановитьЗначенияПоВидуКорректировки();
	УстановитьПараметрыВыбораПоВидуКорректировки();
	УправлениеЭлементамиФормы();
	
	мВидКорректировки = Объект.ВидКорректировки;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораПоВидуКорректировки()
	
	УстановитьПараметрыВыбораЦФОПоФД();
	
	мСценариев = Новый Массив;
	
	Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") Тогда 
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
		
		мСтрокПриход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
		Если мСтрокПриход.Количество()>0 Тогда
			мЦФОПриход			  = Новый Массив;
			мСтатьяОборотовПриход = Новый Массив;
			мАналитика2Приход	  = Новый Массив;
			
			Для Каждого стрПриход Из мСтрокПриход Цикл 
				Если ЗначениеЗаполнено(стрПриход.ЦФО) Тогда 
					мЦФОПриход.Добавить(стрПриход.ЦФО);
				КонецЕсли;
				Если ЗначениеЗаполнено(стрПриход.СтатьяОборотов) Тогда 
					мСтатьяОборотовПриход.Добавить(стрПриход.СтатьяОборотов);
				КонецЕсли;
				Если ЗначениеЗаполнено(стрПриход.Аналитика_2) Тогда 
					мАналитика2Приход.Добавить(стрПриход.Аналитика_2);
				КонецЕсли;
			КонецЦикла;
			
			Если мЦФОПриход.Количество()>0 Тогда 
				фмЦФО = Новый ФиксированныйМассив(мЦФОПриход);
				ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", фмЦФО);
				мПараметровВыбора = Новый Массив;
				мПараметровВыбора.Добавить(ПараметрВыбора);
				фмПараметровВыбора = Новый ФиксированныйМассив(мПараметровВыбора);
				Элементы.СуммыКорректировокРасходЦФО.ПараметрыВыбора = фмПараметровВыбора;
			КонецЕсли;
			
			Если мСтатьяОборотовПриход.Количество()>0 Тогда 
				фмСтатьяОборотов = Новый ФиксированныйМассив(мСтатьяОборотовПриход);
				ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", фмСтатьяОборотов);
				мПараметровВыбора = Новый Массив;
				мПараметровВыбора.Добавить(ПараметрВыбора);
				фмПараметровВыбора = Новый ФиксированныйМассив(мПараметровВыбора);
				Элементы.СуммыКорректировокРасходСтатьяОборотов.ПараметрыВыбора = фмПараметровВыбора;
			КонецЕсли;
			
			Если мАналитика2Приход.Количество()>0 Тогда 
				фмАналитика2 = Новый ФиксированныйМассив(мАналитика2Приход);
				ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", фмАналитика2);
				мПараметровВыбора = Новый Массив;
				мПараметровВыбора.Добавить(ПараметрВыбора);
				фмПараметровВыбора = Новый ФиксированныйМассив(мПараметровВыбора);
				Элементы.СуммыКорректировокРасходАналитика_2.ПараметрыВыбора = фмПараметровВыбора;
			КонецЕсли;
			
			мСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У"));
			
		КонецЕсли;		
		
	Иначе
		
		мСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У"));
		мСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест"));	
		
	КонецЕсли;
	
	фмСценариев = Новый ФиксированныйМассив(мСценариев);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", фмСценариев);
	
	мПараметров = Новый Массив;
	мПараметров.Добавить(ПараметрВыбора);  		
	
	фмПараметров = Новый ФиксированныйМассив(мПараметров);
	
	Элементы.Сценарий.ПараметрыВыбора = фмПараметров;
	
	УстановитьПараметрыВыбораСтатейОборотов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияПоВидуКорректировки()
	
	Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") Тогда 
		
		Если Объект.Сценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У") Тогда 
			Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У");
			ПриИзмененииСценария();	
		КонецЕсли;
		
	ИначеЕсли Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.УвеличениеБюджета") Тогда 
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
		
		МассивКУдалению = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекущаяСтрока Из МассивКУдалению Цикл
			Объект.СуммыКорректировок.Удалить(ТекущаяСтрока);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоВидуКорректировки()
	
	Элементы.ГруппаРасход.Видимость   = Истина;
	Элементы.ГруппаРасход.Доступность = Истина;
	
	Элементы.СуммыКорректировокПриходПроект.Видимость   = Истина;
	Элементы.СуммыКорректировокПриходПроект.Доступность = Истина;
	                     		
	Элементы.СуммыКорректировокРасходПроект.Видимость   = Истина;
	Элементы.СуммыКорректировокРасходПроект.Доступность = Истина;
	
	Элементы.ГруппаСуммыДокумента.Видимость = Истина;
	
	Элементы.Сценарий.Видимость = Истина;
	
	Элементы.СуммыКорректировокПриходГруппа1.Видимость  = Ложь;
	Элементы.СуммыКорректировокРасходГруппа1.Видимость = Ложь;
	
	Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") Тогда 
		
		Элементы.СуммыКорректировокПриходПроект.Видимость   = Ложь;
		Элементы.СуммыКорректировокПриходПроект.Доступность = Ложь;
		
		Элементы.СуммыКорректировокРасходПроект.Видимость   = Ложь;
		Элементы.СуммыКорректировокРасходПроект.Доступность = Ложь;
		
		Элементы.Сценарий.Видимость = Ложь;
					
		Элементы.СуммыКорректировокПриходГруппа1.Видимость  = Истина;
		Элементы.СуммыКорректировокРасходГруппа1.Видимость  = Истина;
		
	ИначеЕсли Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррВПределахФункцийФД") Тогда 
		
		Элементы.СуммыКорректировокПриходГруппа1.Видимость  = Истина;
		Элементы.СуммыКорректировокРасходГруппа1.Видимость  = Истина;
		
	ИначеЕсли Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.УвеличениеБюджета") Тогда 
		
		Элементы.ГруппаРасход.Видимость   = Ложь;
		Элементы.ГруппаРасход.Доступность = Ложь;
		
		Элементы.ГруппаСуммыДокумента.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.СуммыКорректировокПриходПроект.Видимость   = Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест");
	Элементы.СуммыКорректировокПриходПроект.Доступность = Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест");
	
	Элементы.СуммыКорректировокРасходПроект.Видимость   = Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест");
	Элементы.СуммыКорректировокРасходПроект.Видимость   = Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест");
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ВидКорректировкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	мВидКорректировки = Объект.ок_ВидКорректировки;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходЦФОПриИзменении(Элемент)
	УстановитьПараметрыВыбораПоВидуКорректировки();
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходСтатьяОборотовПриИзменении(Элемент)
	УстановитьПараметрыВыбораПоВидуКорректировки();
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходАналитика_2ПриИзменении(Элемент)
	УстановитьПараметрыВыбораПоВидуКорректировки();
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-15 (#3714)
&НаКлиенте
Процедура СуммыКорректировокРасходАналитика_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьФормуВыбораДляОбъектаСтроительства(Элемент.Имя);
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-15 (#3714)

&НаКлиенте
Процедура ок_ВидКорректировкиОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.СуммыКорректировок.Очистить();	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПериодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик")
	   И НачалоГода(ТекущиеДанные.Период) <> НачалоГода(ТекущаяДата()) Тогда 
		ТекущиеДанные.Период = Неопределено;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Доступен выбор периода в границах текущего года'"),,,"Объект.СуммыКорректировок["+ТекущиеДанные.ПолучитьИдентификатор()+"].Период");
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные.Период = бит_Бюджетирование.ПолучитьНачалоПериода(ТекущиеДанные.Период, ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Сценарий, "бит_Периодичность"));
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	  
	мСценарий = Объект.Сценарий;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ВидКорректировкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	мВидКорректировки = Объект.ок_ВидКорректировки;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьКорректировку(Команда)
	
	ДопПараметры = Новый Структура;
	
	ОтветОПродолженииОтмены = Новый ОписаниеОповещения("ОтветНаВопросОПродолженииОтменыКорректировки", ЭтотОбъект, ДопПараметры);
	
	пСообщение = НСтр("ru = 'Процесс согласования будет остановлен, корректировка будет отменена. Использовать документ в дальнейшем будет невозможно. Продолжить отмену?'");
	ПоказатьВопрос(ОтветОПродолженииОтмены, пСообщение, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);	

КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОПродолженииОтменыКорректировки(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ОтменитьКорректировкуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьКорректировкуКлиент()
	
	Если НЕ ОтменитьКорректировкуСервер() Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	// Заполним список имен элементов управления, которые необходимо блокировать при изменении статусов.
	ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке();
	
	УправлениеЭлементамиФормы();	
	
	Статус 			 	 = мКэшЗначений.ТекущийСтатус;
	ДатаИзмененияСтатуса = мКэшЗначений.ДатаИзмененияСтатуса;
	
	// Установим текущий статус.
	УстановитьСтатусВФорме(мКэшЗначений.ТекущийСтатус, мКэшЗначений.ДатаИзмененияСтатуса);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ успешно отменен'"));
	
КонецПроцедуры

&НаСервере
Функция ОтменитьКорректировкуСервер()
	
	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	НаборКЗБ = РегистрыНакопления.бит_КонтрольныеЗначенияБюджетов.СоздатьНаборЗаписей();
	НаборКЗБ.Отбор.Регистратор.Установить(Объект.Ссылка);
	НаборКЗБ.Прочитать();
	НаборКЗБ.Очистить();
	Попытка
		
		НаборКЗБ.Записать();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		пТекстОшибки = НСтр("ru = 'Не удалось очистить движения по РН ""Контрольные значения бюджетов"" по причине:
		|%1'");
		пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	НаборОПБ = РегистрыНакопления.бит_ОборотыПоБюджетам.СоздатьНаборЗаписей();
	НаборОПБ.Отбор.Регистратор.Установить(Объект.Ссылка);
	
	НаборОПБ.Прочитать();
	НаборОПБ.Очистить();
	Попытка
		
		НаборОПБ.Записать();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		пТекстОшибки = НСтр("ru = 'Не удалось очистить движения по РН ""Обороты по бюджетам"" по причине:
		|%1'");
		пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат Ложь;
		
	КонецПопытки;    
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ДополнительныеСвойства.Вставить("СтатусКорректировки", ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Отменена"));
	ДокументОбъект.УстановитьСтатус();
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СогласоватьКорректировку(Команда)
	Если ПринятьРешениеСервер(ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Согласовано")) Тогда 
		Элементы.ГруппаСогласование.Доступность = Ложь;	
		УстановитьСтатусВФорме(мКэшЗначений.ТекущийСтатус, мКэшЗначений.ДатаИзмененияСтатуса);
		Оповестить("бит_БК_ИзмСтатусаПослеИзмБалансаЗаявок");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьКорректировку(Команда)
	
	Если ПринятьРешениеСервер(ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено")) Тогда 
		Элементы.ГруппаСогласование.Доступность = Ложь;		
		УстановитьСтатусВФорме(мКэшЗначений.ТекущийСтатус, мКэшЗначений.ДатаИзмененияСтатуса);				
		Оповестить("бит_БК_ИзмСтатусаПослеИзмБалансаЗаявок");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПринятьРешениеСервер(Решение)
	
	Результат = бит_Визирование.УстановитьРешениеЭкспортируемая(Объект.Ссылка, ПараметрыСеанса.бит_БК_ТекущийИнициатор, Решение);
	
	Если Результат Тогда 
		
		РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
		мТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
		мДатаИзмененияСтатуса = РезСтруктура.Дата;
		мКэшЗначений.Вставить("ТекущийСтатус"             , мТекущийСтатус);
		мКэшЗначений.Вставить("ДатаИзмененияСтатуса"      , мДатаИзмененияСтатуса);
		
		Если мТекущийСтатус <> ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Согласована") Тогда 			
			бит_Визирование.ОтправитьСообщениеИнициаторуОСменеСтатуса_ККЗБ(Объект.Ссылка);
		КонецЕсли;
		
		ПрограммноДобавитьЭлементыФормыСогласующих();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере()
	Если ПривилегированныйРежим() Тогда 
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2021-05-06 (#4130)
	Если ЗавершениеРаботы = Истина Тогда 
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2021-05-06 (#4130)
	
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступностьКнопокСогласования(Ссылка, ТекущийСтатус)
	
	Доступность = Ложь;	
	
	НаборЗаписей	 = бит_Визирование.ПрочитатьНаборВиз(Новый Структура("Объект",Ссылка));
	ТаблицаЗаписей   = НаборЗаписей.Выгрузить();  		
	ДоступныеТочкиАлгоритма = бит_Визирование.ПолучитьДоступныеТочкиАлгоритма(ТаблицаЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 
	"ВЫБРАТЬ
	|	бит_НазначенныеЗаместители.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА бит_НазначенныеЗаместители.Виза ССЫЛКА Справочник.бит_Визы
	|			ТОГДА бит_НазначенныеЗаместители.Виза
	|		ИНАЧЕ бит_ГруппыВизВизыГруппы.Виза
	|	КОНЕЦ КАК Виза,
	|	бит_НазначенныеЗаместители.Заместитель КАК Заместитель,
	|	бит_НазначенныеЗаместители.ДатаНачала КАК ДатаНачала,
	|	бит_НазначенныеЗаместители.ДатаОкончания КАК ДатаОкончания,
	|	бит_НазначенныеЗаместители.Пользователь КАК Пользователь,
	|	бит_БК_Инициаторы.Ссылка КАК Инициатор
	|ПОМЕСТИТЬ ВТ_ЗаместителиИВизы
	|ИЗ
	|	РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
	|		ПО бит_НазначенныеЗаместители.Виза = бит_ГруппыВизВизыГруппы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
	|		ПО бит_НазначенныеЗаместители.Заместитель = бит_БК_Инициаторы.Пользователь
	|ГДЕ
	|	бит_НазначенныеЗаместители.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен)
	|	И бит_НазначенныеЗаместители.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	|	И бит_НазначенныеЗаместители.ДатаНачала <= &ДатаДок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_УстановленныеВизы.Виза КАК Виза,
	|	бит_УстановленныеВизы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	бит_УстановленныеВизы.Объект КАК Объект,
	|	бит_УстановленныеВизы.Решение КАК Решение,
	|	бит_УстановленныеВизы.ОК_ВидРасхода КАК ОК_ВидРасхода,
	|	бит_УстановленныеВизы.КодСортировки КАК КодСортировки
	//|ПОМЕСТИТЬ ВТ_ВизыПользователя
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	(бит_УстановленныеВизы.ФизическоеЛицо = &ФизическоеЛицо
	|			ИЛИ бит_УстановленныеВизы.Пользователь = &ФизическоеЛицо)
	|	И бит_УстановленныеВизы.Объект = &Объект
	|	И бит_УстановленныеВизы.ТочкаАлгоритма В(&ДоступныеТочкиАлгоритма)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗаместителиИВизы.Виза,
	|	ВТ_ЗаместителиИВизы.Инициатор,
	|	бит_УстановленныеВизы.Объект,
	|	бит_УстановленныеВизы.Решение,
	|	бит_УстановленныеВизы.ОК_ВидРасхода,
	|	бит_УстановленныеВизы.КодСортировки
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
	|		ПО бит_УстановленныеВизы.Виза = ВТ_ЗаместителиИВизы.Виза
	|			И бит_УстановленныеВизы.ФизическоеЛицо.Пользователь = ВТ_ЗаместителиИВизы.Пользователь
	|			И (бит_УстановленныеВизы.Объект = &Объект)
	|			И (бит_УстановленныеВизы.Объект = &Объект)
	|			И (бит_УстановленныеВизы.Пользователь = ВТ_ЗаместителиИВизы.Инициатор.Пользователь
	|				ИЛИ бит_УстановленныеВизы.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|ГДЕ
	|	(ВТ_ЗаместителиИВизы.Инициатор = &ФизическоеЛицо
	|			ИЛИ ВТ_ЗаместителиИВизы.Заместитель = &ФизическоеЛицо)
	|	И бит_УстановленныеВизы.ТочкаАлгоритма В(&ДоступныеТочкиАлгоритма)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗаместителиИВизы.Виза,
	|	ВТ_ЗаместителиИВизы.Инициатор,
	|	бит_УстановленныеВизы.Объект,
	|	бит_УстановленныеВизы.Решение,
	|	бит_УстановленныеВизы.ОК_ВидРасхода,
	|	бит_УстановленныеВизы.КодСортировки
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиЗаместителей
	|			ПО ВТ_ЗаместителиИВизы.Заместитель = ВТ_ЗаместителиЗаместителей.Пользователь
	|				И ВТ_ЗаместителиИВизы.Виза = ВТ_ЗаместителиЗаместителей.Виза
	|		ПО бит_УстановленныеВизы.Виза = ВТ_ЗаместителиИВизы.Виза
	|			И бит_УстановленныеВизы.ФизическоеЛицо.Пользователь = ВТ_ЗаместителиИВизы.Пользователь
	|			И (бит_УстановленныеВизы.Объект = &Объект)
	|			И (бит_УстановленныеВизы.Пользователь = ВТ_ЗаместителиИВизы.Инициатор.Пользователь
	|				ИЛИ бит_УстановленныеВизы.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|ГДЕ
	|	(ВТ_ЗаместителиЗаместителей.Инициатор = &ФизическоеЛицо
	|			ИЛИ ВТ_ЗаместителиЗаместителей.Заместитель = &ФизическоеЛицо)
	|	И бит_УстановленныеВизы.ТочкаАлгоритма В(&ДоступныеТочкиАлгоритма)";
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	бит_УстановленныеВизы.Объект,
	//|	бит_УстановленныеВизы.Виза,
	//|	бит_УстановленныеВизы.Решение
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	ВТ_ВизыПользователя.Решение КАК Решение,
	//|	ВТ_ВизыПользователя.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	бит_фн_РегистрацияСобытийОповещений.Виза КАК Виза,
	//|	ВТ_ВизыПользователя.КодСортировки КАК КодСортировки
	//|ИЗ
	//|	ВТ_ВизыПользователя КАК ВТ_ВизыПользователя
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_РегистрацияСобытийОповещений КАК бит_фн_РегистрацияСобытийОповещений
	//|		ПО ВТ_ВизыПользователя.Виза = бит_фн_РегистрацияСобытийОповещений.Виза
	//|			И ВТ_ВизыПользователя.ФизическоеЛицо.Пользователь = бит_фн_РегистрацияСобытийОповещений.Пользователь
	//|			И ВТ_ВизыПользователя.Объект = бит_фн_РегистрацияСобытийОповещений.Объект
	//|ГДЕ
	//|	НЕ бит_фн_РегистрацияСобытийОповещений.Виза ЕСТЬ NULL
	//|	И ВТ_ВизыПользователя.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.ПустаяСсылка)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	КодСортировки";
	
	Запрос.УстановитьПараметр("Объект"					, Ссылка);
	Запрос.УстановитьПараметр("ФизическоеЛицо"			, ПараметрыСеанса.бит_БК_ТекущийИнициатор);
	Запрос.УстановитьПараметр("ДатаДок"					, ТекущаяДата());
	Запрос.УстановитьПараметр("ДоступныеТочкиАлгоритма"	,ДоступныеТочкиАлгоритма);
			 
	РезультатЗапроса = Запрос.Выполнить();
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Виза) И
			НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Решение) 
			Тогда
			Доступность = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	  		
	НаличиеОтклонений = бит_Визирование.ПроверитьОтклоненияПоВизам(Ссылка, Ложь);
	Если НаличиеОтклонений Тогда
		
		Доступность = Ложь;
		
	КонецЕсли;  	
	
	Если ТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Черновик")
		ИЛИ ТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Согласована")
		ИЛИ ТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Отменена")
		Тогда
		Доступность = Ложь
	КонецЕсли;
		
	Возврат Доступность;
	
КонецФункции

&НаКлиенте
Процедура ПрикрепленныеФайлы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ТекстВопроса = НСтр("ru='Документ не записан. Записать?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьДокументИОткрытьФормуПрикрепленныхФайловПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		Возврат;
	КонецЕсли;
	
	ОткрытьФормуУправленияПрикрепленнымиФайлами();	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУправленияПрикрепленнымиФайлами()
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объект", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПоказыватьОбъект", Ложь);
	
	Форма = ПолучитьФорму("Обработка.бит_ПрикреплениеФайлов.Форма.ФормаУправляемая", ПараметрыОткрытия, ЭтаФорма, Объект.Ссылка);
	Форма.Объект.Объект = Объект.Ссылка;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументИОткрытьФормуПрикрепленныхФайловПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Если Не Записать(ПараметрыЗаписи) Тогда 
		Возврат;
	КонецЕсли;
	
	
	ОткрытьФормуУправленияПрикрепленнымиФайлами();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораПроектов(Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораПроектов(Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПроектов(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("ОтображениеСписка", ОтображениеТаблицы.Список);
	
	Если Объект.ок_ВидКорректировки <> ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.УвеличениеБюджета") Тогда 
		ЗначениеОтбора = Новый Структура("ок_ВозможнаКорректировкаБюджета", Истина);
		ПараметрыОткрытия.Вставить("Отбор", ЗначениеОтбора);	
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-14 (#3714)
	//ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыОткрытия, Элемент);
	Если НЕ ПараметрыОткрытия.Свойство("Отбор") Тогда
		ЗначениеОтбора = Новый Структура();
		ПараметрыОткрытия.Вставить("Отбор", ЗначениеОтбора);	
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.Проекты.Форма.ок_ФормаВыбораУправляемая_Тонкая", ПараметрыОткрытия, Элемент);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-14 (#3714)
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-14 (#3714)
&НаСервере
Функция ПроверитьАктивностьКонтролируемойСтатьи(КонтролируемаяСтатья)
	
	Возврат РегистрыСведений.бит_БК_КонтролирующиеСтатьиОборотов.ПроверитьАктивностьКонтролируемойСтатьи(КонтролируемаяСтатья);
	
КонецФункции

&НаСервере
Процедура УстановитьФормуВыбораДляОбъектаСтроительства(ИмяЭлемента)
	
	ЭлементОбъектаСтроительства = Элементы[ИмяЭлемента];
	
	ОписаниеТипов_ОбъектыСтроительства = Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства");
	Если ЭлементОбъектаСтроительства.ОграничениеТипа = ОписаниеТипов_ОбъектыСтроительства 
		И ЭлементОбъектаСтроительства.ФормаВыбора <> "Справочник.ОбъектыСтроительства.Форма.ок_ФормаВыбора_Тонкая" Тогда
	
		ЭлементОбъектаСтроительства.ФормаВыбора = "Справочник.ОбъектыСтроительства.Форма.ок_ФормаВыбора_Тонкая";
		
	КонецЕсли; 
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-14 (#3714)