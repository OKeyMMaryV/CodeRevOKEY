
////////////////////////////////////////////////////////////////////////////////
// КЛИЕНТСКИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// бит_DFedotov Процедура - обработчик события "ПриСозданииНаСервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сценарий 				= Параметры.Сценарий;
	СценарийКонтролируемый 	= Параметры.СценарийКонтролируемый;
	Направление 			= Параметры.Направление;
	ЭтоКонтрольБюджета		= Параметры.ЭтоКонтрольБюджета;
	СтруктураОтбора			= Параметры.СтруктураОтбора;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-24 (#3393)
	Параметры.Свойство("ок_ВидКорректировки", ок_ВидКорректировки);
	 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-24 (#3393)
	 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-25 (#3714)
	Если НЕ Параметры.Свойство("ОтключитьПараметрыРедактирования", ОтключитьПараметрыРедактирования) Тогда
		ОтключитьПараметрыРедактирования = Истина;
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-25 (#3714)
	
	ИнициализироватьКомпоновщик(КомпоновщикНастроек);
	
	// Настроим отображение полей доп. аналитик в таблицах формы.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																					 ,"КонтрольныеЗначенияБюджетов"
																					 ,Неопределено
																					 ,Неопределено);
	 //Начало_бит_Магомедов_16.07.2012
	 Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда 
		 УстановитьОпределенныеНастройки();
	 КонецЕсли;
	 //Конец_бит_Магомедов_16.07.2012 
	 
	 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-24 (#3393)
	 Если ЗначениеЗаполнено(ок_ВидКорректировки) Тогда 
			
		 УстановитьДоступностьВидимостьПоВидуКорректировки();
		 
	 КонецЕсли;
	 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-24 (#3393)
																					 
КонецПроцедуры
																				 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-14 (#3393)
	//бит_РаботаСДиалогамиКлиент.ИнициализироватьНастройкуПериода(НастройкаПериода, Период);
	//Период.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	Если НЕ ЗначениеЗаполнено(ок_ВидКорректировки) Тогда 
		бит_РаботаСДиалогамиКлиент.ИнициализироватьНастройкуПериода(НастройкаПериода, Период);
		Период.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-14 (#3393)
	
	ОбновитьНаборКонтрольныхЗначений();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// бит_DFedotov Процедура - действие команды "КомандаОбновить"
//
&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОбновитьНаборКонтрольныхЗначений();
	
	//Начало_бит_Магомедов_26.07.2012 
	Если КонтрольныеЗначенияБюджетов.Количество() = 0 Тогда 
		ИтогКоличествоИсполнение 	= 0;
		ИтогКоличествоКонтроль		= 0;
		ИтогКоличествоРазность 		= 0;
		ИтогСуммаИсполнение 		= 0;
		ИтогСуммаКонтроль 			= 0;
		ИтогСуммаРазность 			= 0;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-30 (#3078)
		ИтогСуммаСНДСИсполнение		= 0;
		ИтогСуммаСНДСКонтроль		= 0;
		ИтогСуммаСНДСРазность		= 0;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-30 (#3078)
		ПоказатьПредупреждение(,"Нет данных");
	Иначе
		ИтогКоличествоИсполнение 	= КонтрольныеЗначенияБюджетов.Итог("КоличествоСценарийИсполнение");
		ИтогКоличествоКонтроль		= КонтрольныеЗначенияБюджетов.Итог("КоличествоСценарийКонтроль");
		ИтогКоличествоРазность 		= КонтрольныеЗначенияБюджетов.Итог("КоличествоСценарийИсполнение");
		ИтогСуммаИсполнение 		= КонтрольныеЗначенияБюджетов.Итог("СуммаСценарийИсполнение");
		ИтогСуммаКонтроль 			= КонтрольныеЗначенияБюджетов.Итог("СуммаСценарийКонтроль");
		ИтогСуммаРазность 			= КонтрольныеЗначенияБюджетов.Итог("СуммаРазность");
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-30 (#3078)
		ИтогСуммаСНДСИсполнение		= КонтрольныеЗначенияБюджетов.Итог("СуммаСНДССценарийИсполнение");;
		ИтогСуммаСНДСКонтроль		= КонтрольныеЗначенияБюджетов.Итог("СуммаСНДССценарийКонтроль");;
		ИтогСуммаСНДСРазность		= КонтрольныеЗначенияБюджетов.Итог("СуммаСНДСРазность");;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-30 (#3078)
	КонецЕсли;
	
КонецПроцедуры

// бит_DFedotov Процедура - действие команды "КомандаНастройкаПериода"
//
&НаКлиенте
Процедура КомандаНастройкаПериода(Команда)
	
	бит_РаботаСДиалогамиКлиент.НастроитьПериод(Период, НастройкаПериода);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// бит_DFedotov Процедура - обработчик события "ПриИзменении" поля ввода "ПериодДатаНачала"
//
&НаКлиенте
Процедура ПериодДатаНачалаПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, 
																				Период.ДатаОкончания);
																				
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ПриИзменении" поля ввода "ПериодДатаОкончания"
//
&НаКлиенте
Процедура ПериодДатаОкончанияПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, 
																				Период.ДатаОкончания);
																				
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "КонтрольныеЗначенияБюджетов"

// бит_DFedotov Процедура - обработчик события "Выбор" табличного поля "КонтрольныеЗначенияБюджетов"
//
&НаКлиенте
Процедура КонтрольныеЗначенияБюджетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.КонтрольныеЗначенияБюджетов.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// для расхода не дадим выбирать строки, в которых исполнение превысило контроль
	//Если Направление = "Расход" Тогда
	//	Если ТекущаяСтрока.СуммаСценарийКонтроль - ТекущаяСтрока.СуммаСценарийИсполнение < 0 Тогда
	//		ТекстСообщения = НСтр("ru='В выбранной строке сумма-исполнение превысила сумму-контроль."
	//							+" Строка может быть использована только для увеличения суммы-контроль'");
	//		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	//		
	//		Возврат;
	//	КонецЕсли;
	//	Если ТекущаяСтрока.КоличествоСценарийКонтроль - ТекущаяСтрока.КоличествоСценарийИсполнение < 0 Тогда
	//		ТекстСообщения = НСтр("ru='В выбранной строке количество-исполнение превысило количество-контроль."
	//							+" Строка может быть использована только для увеличения количество-контроль'");
	//		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	//		
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	ОповеститьОВыборе(ТекущаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// бит_DFedotov Функция инициализирует схему компоновки данных и пользовательские настройки
//
// Параметры:
//	пКомпоновщик - КомпоновщикНастроекКомпоновкиДанных - настройки которые будут заполнены из макета СКД
//
// Возвращаемое значение:
//	АдресСхемыКомпоновкиДанных - строка - адрес временного хранилища, где хранится СКД
//
&НаСервере
Функция ИнициализироватьКомпоновщик(пКомпоновщик) Экспорт
	
	СхемаКомпоновкиДанных = Документы.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.ПолучитьМакет("СКДПодборЗаписей");
	
	мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СхемаКомпоновкиДанных, 
					"НаборДанных1", 
					мНастройкиИзмерений);
					
    //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-10 (#3393)
	Если ЗначениеЗаполнено(ок_ВидКорректировки) Тогда 
		УстановитьНастройкиПоВидуКорректировки(СхемаКомпоновкиДанных);	
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-10 (#3393)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-25 (#3714)
	Если ОтключитьПараметрыРедактирования Тогда
		ОтключитьПараметрыРедактирования(СхемаКомпоновкиДанных);
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-25 (#3714)
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	пКомпоновщик.Инициализировать(ИсточникНастроек);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-10 (#3393)
	//пКомпоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	//Заменено на:
	Если ЗначениеЗаполнено(ок_ВидКорректировки) Тогда 
		
		НастройкиПоУмолчанию = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Основной");
		Если НастройкиПоУмолчанию = Неопределено Тогда 
			НастройкиПоУмолчанию = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		Иначе 
			НастройкиПоУмолчанию = НастройкиПоУмолчанию.Настройки;
		КонецЕсли;	
		
		Если Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У") Тогда
			
			ПолеПроект = Новый ПолеКомпоновкиДанных("Проект");
			
			Для Каждого ЭлОтбора Из НастройкиПоУмолчанию.Отбор.Элементы Цикл 
				Если ЭлОтбора.ЛевоеЗначение = ПолеПроект Тогда 
					НастройкиПоУмолчанию.Отбор.Элементы.Удалить(ЭлОтбора);
					Прервать;
				КонецЕсли;				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе 
		
		НастройкиПоУмолчанию = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("ОсновнойСОтбором");
		Если НастройкиПоУмолчанию = Неопределено Тогда 
			НастройкиПоУмолчанию = СхемаКомпоновкиДанных.НастройкиПоУмолчанию
		Иначе 
			НастройкиПоУмолчанию = НастройкиПоУмолчанию.Настройки;
		КонецЕсли;	
		
	КонецЕсли;                                                                  
	
	пКомпоновщик.ЗагрузитьНастройки(НастройкиПоУмолчанию);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-10 (#3393)

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-10 (#3393)

&НаСервере
Процедура ДобавитьПараметрВыбораКД(ПараметрыВыбораКД, Имя, Значение)
		
	ПараметрВыбораКД		  = ПараметрыВыбораКД.Значение.Добавить();
	ПараметрВыбораКД.Имя	  = Имя;
	ПараметрВыбораКД.Значение = Значение;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПоВидуКорректировки(СКД)
	
	НаборКЗБ = СКД.НаборыДанных.Найти("НаборДанных1");
	
	Если СтруктураОтбора.Свойство("ЦФО")
	   И ЗначениеЗаполнено(СтруктураОтбора.ЦФО)
	Тогда 
		ПолеЦФО			   = НаборКЗБ.Поля.Найти("ЦФО");
		Если ПолеЦФО <> Неопределено Тогда 
			Если ТипЗнч(СтруктураОтбора.ЦФО) <> Тип("СписокЗначений") Тогда 
				СпЦФО = Новый СписокЗначений;
				СпЦФО.Добавить(СтруктураОтбора.ЦФО);
			Иначе
				СпЦФО = СтруктураОтбора.ЦФО;
			КонецЕсли;
			ПолеЦФО.УстановитьДоступныеЗначения(СпЦФО);
		КонецЕсли;
	КонецЕсли;
	
	ПолеСтатьяОборотов			   = НаборКЗБ.Поля.Найти("СтатьяОборотов");
	Если ПолеСтатьяОборотов <> Неопределено Тогда 
		Если СтруктураОтбора.Свойство("СтатьяОборотов")
			И ЗначениеЗаполнено(СтруктураОтбора.СтатьяОборотов)
			Тогда 				
			Если ок_ВидКорректировки = ПредопределенноеЗначение("Перечисление.ок_ВидКорректировкиКонтрольныхЗначенийИБюджета.КоррМеждуПолугодиямиБезИзмененияАналитик") Тогда 
				Если ТипЗнч(СтруктураОтбора.СтатьяОборотов) <> Тип("СписокЗначений") Тогда 
					СпСтатьяОборотов = Новый СписокЗначений;
					СпСтатьяОборотов.Добавить(СтруктураОтбора.СтатьяОборотов);
				Иначе
					СпСтатьяОборотов = СтруктураОтбора.СтатьяОборотов;
				КонецЕсли;
				Если ЗначениеЗаполнено(СпСтатьяОборотов) Тогда
					ПолеСтатьяОборотов.УстановитьДоступныеЗначения(СпСтатьяОборотов);
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		
		ПараметрыВыбораЗнПарКД = ПолеСтатьяОборотов.ПараметрыРедактирования.Элементы.Найти("ПараметрыВыбора");
		Если ПараметрыВыбораЗнПарКД <> Неопределено Тогда 
			
			ПараметрыВыбораЗнПарКД.Использование = Истина;
			
			ДобавитьПараметрВыбораКД(ПараметрыВыбораЗнПарКД, "Отбор.ок_ВозможнаКорректировкаБюджета", Истина);
			
			Если ЗначениеЗаполнено(Сценарий) Тогда 
				
				ВидСтатьиОборотов = ?(Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У"),
				ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка"),
				ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность"));			
				ДобавитьПараметрВыбораКД(ПараметрыВыбораЗнПарКД, "Отбор.ВидСтатьи", ВидСтатьиОборотов);
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	ПолеПроект = НаборКЗБ.Поля.Найти("Проект");
	Если ПолеПроект <> Неопределено Тогда 
		ПараметрыВыбораЗнПарКД = ПолеПроект.ПараметрыРедактирования.Элементы.Найти("ПараметрыВыбора");
		Если ПараметрыВыбораЗнПарКД <> Неопределено Тогда 
			ПараметрыВыбораЗнПарКД.Использование = Истина;
			ДобавитьПараметрВыбораКД(ПараметрыВыбораЗнПарКД, "Отбор.ок_ВозможнаКорректировкаБюджета", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПолеАналитика_2 = НаборКЗБ.Поля.Найти("Аналитика_2");
	Если ПолеАналитика_2 <> Неопределено Тогда 
		ПараметрыВыбораЗнПарКД = ПолеАналитика_2.ПараметрыРедактирования.Элементы.Найти("ПараметрыВыбора");
		Если ПараметрыВыбораЗнПарКД <> Неопределено Тогда 
			ПараметрыВыбораЗнПарКД.Использование = Истина;
			ДобавитьПараметрВыбораКД(ПараметрыВыбораЗнПарКД, "Отбор.ок_ВозможнаКорректировкаБюджета", Истина);
		КонецЕсли;
	КонецЕсли;

	Если СтруктураОтбора.Свойство("МинимальныйПериод")
	 ИЛИ СтруктураОтбора.Свойство("МаксимальныйПериод")
	Тогда 
		
		Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		
		Если СтруктураОтбора.Свойство("МинимальныйПериод") Тогда 			
			Период.ДатаНачала = СтруктураОтбора.МинимальныйПериод;
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("МаксимальныйПериод") Тогда 
			Период.ДатаОкончания = СтруктураОтбора.МаксимальныйПериод;
		КонецЕсли;
			
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("СкрыватьПериод")
	   И СтруктураОтбора.СкрыватьПериод = Истина
	Тогда
		Элементы.ГруппаПериод.Видимость = Ложь;			
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("ПериодТолькоПросмотр")
	   И СтруктураОтбора.ПериодТолькоПросмотр = Истина
	Тогда
		Элементы.ГруппаПериод.ТолькоПросмотр		 = Истина;	
		Элементы.КомандаНастройкаПериода.Доступность = Ложь;
	КонецЕсли;	
	
	Если СтруктураОтбора.Свойство("СписокПериодов")
	   И ЗначениеЗаполнено(СтруктураОтбора.СписокПериодов)
	Тогда 
		
		ЭлОтбораПериоды = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлОтбораПериоды.Использование  = Истина;
		ЭлОтбораПериоды.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Период");
		ЭлОтбораПериоды.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
						
		ЭлОтбораПериоды.ПравоеЗначение = СтруктураОтбора.СписокПериодов;
		
		ЭлОтбораПериоды.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(СКД.НастройкиПоУмолчанию, "СуммаРазность", 0, ВидСравненияКомпоновкиДанных.Больше, Истина, Ложь);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(СКД.НастройкиПоУмолчанию, "Сценарий", Сценарий, ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
		
	ПолеАналитика_1 = Новый ПолеКомпоновкиДанных("Аналитика_1");
	ПолеСценарий    = Новый ПолеКомпоновкиДанных("Сценарий");
	
	Для Каждого стрОтбор Из СКД.НастройкиПоУмолчанию.Отбор.Элементы Цикл
		
		Если стрОтбор.ЛевоеЗначение = ПолеАналитика_1 Тогда 
			стрОтбор.Использование = Ложь;
		ИначеЕсли стрОтбор.ЛевоеЗначение = ПолеСценарий Тогда 
			стрОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-10 (#3393)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-25 (#3714)
&НаСервере
Процедура ОтключитьПараметрыРедактирования(СКД)
	
	НаборКЗБ = СКД.НаборыДанных.Найти("НаборДанных1");
	
	Для каждого ТекущееПоле Из НаборКЗБ.Поля Цикл
		Для каждого ТекущиеПараметрыРедактирования Из ТекущееПоле.ПараметрыРедактирования.Элементы Цикл
			Если ТекущиеПараметрыРедактирования.Использование Тогда
				ТекущиеПараметрыРедактирования.Использование = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-25 (#3714)

// бит_DFedotov Функция получает численное представление периодичности
//
// Параметры:
//	СтрПериодичность - строка- строковое представление периодичности
//
// Возвращаемое значение:
//	ЗначениеПериодичности - число
//
&НаСервере
Функция ПолучитьЗначениеПериодичности(СтрПериодичность)
	
	ЗначениеПериодичности = 9;
	
	Если СтрПериодичность = "День" Тогда
		ЗначениеПериодичности = 6;
	ИначеЕсли СтрПериодичность = "Неделя" Тогда
		ЗначениеПериодичности = 7;
	ИначеЕсли СтрПериодичность = "Декада" Тогда
		ЗначениеПериодичности = 8;
	ИначеЕсли СтрПериодичность = "Месяц" Тогда
		ЗначениеПериодичности = 9;	
	ИначеЕсли СтрПериодичность = "Квартал" Тогда
		ЗначениеПериодичности = 10;
	ИначеЕсли СтрПериодичность = "Полугодие" Тогда
		ЗначениеПериодичности = 11;
	ИначеЕсли СтрПериодичность = "Год" Тогда
		ЗначениеПериодичности = 12;	
	КонецЕсли;
	
	Возврат ЗначениеПериодичности;
	
КонецФункции

// бит_DFedotov Процедура выполняет СКД и загружает таблицу КонтрольныеЗначнияБюджетов
//
// Параметры:
//	нет
//
&НаСервере
Процедура ОбновитьНаборКонтрольныхЗначений()
	
	//Если ЭтоКонтрольБюджета
	//	И НЕ ЗначениеЗаполнено(СценарийКонтролируемый) Тогда
	//	// если вид операции КонтрольБюджета, но сценарий контролируемый не заполнен, то будут подбираться записи по заявкам - это неправильно
	//	Возврат;
	//КонецЕсли;
	
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	ПустойСценарий = Справочники[ИмяСправочникаСценарии].ПустаяСсылка();
	
	Если ТипЗнч(Сценарий) = Тип("СправочникСсылка.СценарииПланирования") тогда
		Периодичность = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(Сценарий);
	иначе
		Периодичность = Перечисления.бит_ПериодичностьПланирования.Месяц;
	КонецЕсли;

	СтрПериодичность = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования,Периодичность);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ПараметрыСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("Период", Период);
	//ПараметрыСКД.УстановитьЗначениеПараметра("Сценарий", Сценарий);
//	ПараметрыСКД.УстановитьЗначениеПараметра("СценарийКонтролируемый", СценарийКонтролируемый);
//	ПараметрыСКД.УстановитьЗначениеПараметра("ПустойСценарий", ПустойСценарий);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-30 (#3078)
	//ПараметрыСКД.УстановитьЗначениеПараметра("Периодичность", ПолучитьЗначениеПериодичности(СтрПериодичность));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-30 (#3078)
	ПараметрыСКД.УстановитьЗначениеПараметра("Направление", "Приход");

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-15 (#3232)
	пСписокПериодГод = Новый СписокЗначений;
	пНастройкиКонтроля = бит_БК_Общий.СценариПланированияНастройкиВыбораСумм();
	Для каждого пНастройка Из пНастройкиКонтроля Цикл
		
		пТипНастройкиПериода = бит_БК_Общий.ПолучитьНастройкуПериода(пНастройка.Значение);
		
		Если пТипНастройкиПериода = ПредопределенноеЗначение("Перечисление.бит_БК_ДопИзмеренияКонтроля.ПериодГод") Тогда
			
			пСписокПериодГод.Добавить(Справочники.СценарииПланирования[пНастройка.Ключ]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если пСписокПериодГод.Количество()>0 Тогда 
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	бит_БК_НастройкиБК.ЗначениеСсылка КАК Сценарий
		|ИЗ
		|	РегистрСведений.бит_БК_НастройкиБК КАК бит_БК_НастройкиБК
		|ГДЕ
		|	бит_БК_НастройкиБК.Группа = ""Контролирующий сценарий""
		|	И бит_БК_НастройкиБК.ИмяНастройки В(&СписокСценариев)");
		
		Запрос.УстановитьПараметр("СписокСценариев"	,	пСписокПериодГод);
		пСписокПериодГод.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сценарий"));
		
	КонецЕсли;

	ПараметрыСКД.УстановитьЗначениеПараметра("СценарииСПериодичностьюГод", пСписокПериодГод);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-15 (#3232)
	
	//Для Каждого КлючЗначение Из СтруктураОтбора Цикл
	//	ИмяПоля = СтрЗаменить(КлючЗначение.Ключ, "_тчк_", ".");
	//	ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	//	ПравоеЗначение = КлючЗначение.Значение;
	//	// найдем пользовательские отборы
	//	ИДПользовательскийОтбор = КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
	//	ПользовательскийОтборКомпоновки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИДПользовательскийОтбор);
	//	
	//	Если НЕ ПользовательскийОтборКомпоновки = Неопределено Тогда
	//		бит_ОбщегоНазначенияКлиентСервер.УстановитьОтборУСписка(ПользовательскийОтборКомпоновки, ЛевоеЗначение, ПравоеЗначение, ВидСравненияКомпоновкиДанных.ВСписке, Истина);
	//	КонецЕсли;
	//КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиСКД = КомпоновщикНастроек.ПолучитьНастройки(); 

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-15 (#3393)
	Если ЗначениеЗаполнено(ок_ВидКорректировки) Тогда 
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкиСКД, Новый ПолеКомпоновкиДанных("СтатьяОборотов.ок_ВозможнаКорректировкаБюджета"), Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкиСКД, Новый ПолеКомпоновкиДанных("Аналитика_2.ок_ВозможнаКорректировкаБюджета"), Истина);
		Если Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест") Тогда 
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкиСКД, Новый ПолеКомпоновкиДанных("Проект.ок_ВозможнаКорректировкаБюджета"), Истина);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("ЦФО") Тогда 
			ПолеЦФО = Новый ПолеКомпоновкиДанных("ЦФО");
			
			Для Каждого элОтбор Из НастройкиСКД.Отбор.Элементы Цикл 
				Если элОтбор.ЛевоеЗначение = ПолеЦФО Тогда 
					Если НЕ элОтбор.Использование Тогда 
						Если ТипЗнч(СтруктураОтбора.ЦФО) = Тип("СписокЗначений") Тогда 
							элОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						Иначе 	
							элОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						КонецЕсли;
						
						элОтбор.ПравоеЗначение = СтруктураОтбора.ЦФО;
						элОтбор.Использование  = Истина;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-15 (#3393)
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
												НастройкиСКД,
												,
												,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаНаборКонтрольныхЗначений = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаНаборКонтрольныхЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//ОК Калинин М. 061212 если «Исполнение» меньше 0, то либо Разность отображать равной 0, либо строку не отображать.	
	//КонтрольныеЗначенияБюджетов.Загрузить(ТаблицаНаборКонтрольныхЗначений);
	КонтрольныеЗначенияБюджетов.Очистить();
	для каждого стр из ТаблицаНаборКонтрольныхЗначений
	цикл	
		если стр.СуммаСценарийИсполнение>=0 тогда 
			нов=КонтрольныеЗначенияБюджетов.Добавить();
			ЗаполнитьЗначенияСвойств(нов,стр);	
		иначе	
	//		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Строка с отрицательной суммой "+строка(стр.СуммаСценарийИсполнение)+" пропущена");
		конецесли;
	конеццикла;
	//ОК Калинин М.
	
	// скроем колонки в которых нет значений
	НастроитьВидимостьКолонок(ТаблицаНаборКонтрольныхЗначений);
	
КонецПроцедуры

// бит_DFedotov Процедура настраивает видимость колонок в зависимости от их использования
//	если хотя бы в одной строке значение в колонке заполнено, то колонка видна
//
// Параметры:
//	ТаблицаИспользованияКолонок - ТаблицаЗначений - таблица аналог таблицы КонтрольныеЗначенияБюджетов с дополнением в виде
//										колонок с типом булево, указывающих, что значение в текущей строке в соответствующей колонке заполнено
//
&НаСервере
Процедура НастроитьВидимостьКолонок(ТаблицаИспользованияКолонок)
	
	Если ТаблицаИспользованияКолонок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСкрываемыхКолонок = Новый Массив;
	
	Для Каждого ТекущаяКолонка Из ТаблицаИспользованияКолонок.Колонки Цикл
		Если Найти(ТекущаяКолонка.Имя, "Показывать_") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСкрываемыхКолонок.Добавить(ТекущаяКолонка.Имя);
	КонецЦикла;
	
	Если НЕ МассивСкрываемыхКолонок.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		
		ТекстПолей 			= "";
		ТекстПолейМаксимум 	= "";
		ТекстПолейЕстьNULL 	= "";
		
		Для Каждого ТекущаяКолонка Из МассивСкрываемыхКолонок Цикл
			ТекстПолей = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
						|	ТаблицаКолонок." + ТекущаяКолонка;
						
			ТекстПолейМаксимум = ТекстПолейМаксимум + ?(ПустаяСтрока(ТекстПолейМаксимум), "", ",") + "
						|	МАКСИМУМ(ТаблицаКолонок." + ТекущаяКолонка + ") КАК " + ТекущаяКолонка;
						
			ТекстПолейЕстьNULL = ТекстПолейЕстьNULL + ?(ПустаяСтрока(ТекстПолейЕстьNULL), "", ",") + "
						|	ЕстьNULL(ТаблицаКолонок." + ТекущаяКолонка + ", ИСТИНА) КАК " + ТекущаяКолонка;			
		КонецЦикла; 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	"+ТекстПолей+"
		|ПОМЕСТИТЬ ТаблицаКолонок
		|ИЗ
		|	&ТаблицаКолонок КАК ТаблицаКолонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	"+ТекстПолейЕстьNULL+"
		|ИЗ
		|	(ВЫБРАТЬ
		|		"+ТекстПолейМаксимум+"
		|	ИЗ
		|		ТаблицаКолонок КАК ТаблицаКолонок) КАК ТаблицаКолонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаКолонок";
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ТаблицаКолонок", ТаблицаИспользованияКолонок);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Для Каждого ТекущаяКолонка Из МассивСкрываемыхКолонок Цикл
				ИмяКолонкиТаблицы = СтрЗаменить(ТекущаяКолонка, "Показывать_", "");
				
				НайденнаяКолонкаТаблицы = Элементы.Найти("КонтрольныеЗначенияБюджетов"+ИмяКолонкиТаблицы);
				
				Если НайденнаяКолонкаТаблицы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НайденнаяКолонкаТаблицы.Видимость = Выборка[ТекущаяКолонка];
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Начало_бит_Магомедов_16.07.2012
&НаСервере
Процедура УстановитьОпределенныеНастройки()
	
	Для Каждого КлючЗначение Из СтруктураОтбора Цикл
		ИмяПоля = СтрЗаменить(КлючЗначение.Ключ, "_тчк_", ".");
		ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ПравоеЗначение = КлючЗначение.Значение;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-21 (#3393)
		ИДПользовательскийОтбор = "";
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-21 (#3393)
		
		// найдем пользовательский отбор
		Для Каждого ТекОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ТекОтбор.ЛевоеЗначение = ЛевоеЗначение Тогда  
				ИДПользовательскийОтбор = ТекОтбор.ИдентификаторПользовательскойНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПользовательскийОтборКомпоновки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИДПользовательскийОтбор);
		Если НЕ ПользовательскийОтборКомпоновки = Неопределено Тогда
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
			//ПользовательскийОтборКомпоновки.ЛевоеЗначение = ЛевоеЗначение;
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
			Если ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда 
				ПользовательскийОтборКомпоновки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе 
				ПользовательскийОтборКомпоновки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			
			
			ПользовательскийОтборКомпоновки.ПравоеЗначение = ПравоеЗначение;
			ПользовательскийОтборКомпоновки.Использование = Истина;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-13 (#3393)
			Если ЗначениеЗаполнено(ок_ВидКорректировки) Тогда 
				
				Если НЕ ЗначениеЗаполнено(ПользовательскийОтборКомпоновки.ПравоеЗначение) Тогда 
					ПользовательскийОтборКомпоновки.Использование = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если ИмяПоля = "Сценарий" Тогда 
					ПользовательскийОтборКомпоновки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				КонецЕсли;
				Если Сценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест") 
				   И ИмяПоля = "Проект"
				Тогда 
					ПользовательскийОтборКомпоновки.Использование = Ложь;
					ПользовательскийОтборКомпоновки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				КонецЕсли;					
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-13 (#3393)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Конец_бит_Магомедов_16.07.2012 

//ОК Калинин М. 140912
&НаКлиенте
Процедура Перенести(Команда)
	для каждого ТекущаяСтрока из  КонтрольныеЗначенияБюджетов
		цикл
		если ТекущаяСтрока.Переносить тогда
			
			// для расхода не дадим выбирать строки, в которых исполнение превысило контроль
			Если Направление = "Расход" Тогда
				//Если ТекущаяСтрока.СуммаСценарийКонтроль - ТекущаяСтрока.СуммаСценарийИсполнение < 0 Тогда
				//	ТекстСообщения = НСтр("ru='В выбранной строке сумма-исполнение превысила сумму-контроль."
				//	+" Строка может быть использована только для увеличения суммы-контроль'");
				//	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				//	
				//	Возврат;
				//КонецЕсли;
				//Если ТекущаяСтрока.КоличествоСценарийКонтроль - ТекущаяСтрока.КоличествоСценарийИсполнение < 0 Тогда
				//	ТекстСообщения = НСтр("ru='В выбранной строке количество-исполнение превысило количество-контроль."
				//	+" Строка может быть использована только для увеличения количество-контроль'");
				//	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				//	
				//	Возврат;
				//КонецЕсли;
			КонецЕсли;
			
			ОповеститьОВыборе(ТекущаяСтрока);
			
		конецесли;
	конеццикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсчитатьИтогВыделенных()
	Итог=0;
	для каждого стр из  КонтрольныеЗначенияБюджетов
		цикл		
		Если стр.Переносить тогда
			Итог=Итог+стр.СуммаРазность;
		конецесли;	
	конеццикла;  
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьПометки(значение)	
	для каждого стр из  КонтрольныеЗначенияБюджетов
		цикл
		стр.Переносить=значение;	
	конеццикла;  	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеЗначенияБюджетовСнятьПометки(Команда)
	УстановитьПометки(ложь);
	ПодсчитатьИтогВыделенных();
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеЗначенияБюджетовУстановитьПометки(Команда)
	УстановитьПометки(истина);
	ПодсчитатьИтогВыделенных();
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеЗначенияБюджетовПереноситьПриИзменении(Элемент)
	ПодсчитатьИтогВыделенных();
КонецПроцедуры
//ОК Калинин М. 140912

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-24 (#3393)
&НаСервере
Процедура УстановитьДоступностьВидимостьПоВидуКорректировки()
	
	Элементы.КонтрольныеЗначенияБюджетовАналитика_3.Видимость 	 		  = Ложь;
	Элементы.КонтрольныеЗначенияБюджетовАналитика_5.Видимость 	 		  = Ложь;
	
	Элементы.КонтрольныеЗначенияБюджетовСуммаСценарийКонтроль.Видимость   = Ложь;
	Элементы.КонтрольныеЗначенияБюджетовСуммаСценарийИсполнение.Видимость = Ложь;
	Элементы.КонтрольныеЗначенияБюджетовГруппаСуммаСНДС.Видимость 		  = Ложь;	
	
КонецПроцедуры


&НаКлиенте
Процедура Автораспределение(Команда)
	
	мВыделенных = КонтрольныеЗначенияБюджетов.НайтиСтроки(Новый Структура("Переносить", Истина));
	
	Если мВыделенных.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрано ни одной строки для распределения!'"));
		Возврат;
	КонецЕсли;
	
	АдресТЧ = ПолучитьТаблицуДляРаспределения();
	ОповеститьОВыборе(АдресТЧ);
	Закрыть();

КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДляРаспределения()
	
	ТЧ = КонтрольныеЗначенияБюджетов.Выгрузить(Новый Структура("Переносить", Истина));
	Возврат ПоместитьВоВременноеХранилище(ТЧ);
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-24 (#3393)


