
&НаКлиенте
Перем мВидКорректировки;
&НаКлиенте
Перем мСценарий;

//+ Сенин С. CR#2670 23.09.2016
&НаКлиенте
Перем мСписокСценариев;
//- Сенин С. CR#2670 23.09.2016

////////////////////////////////////////////////////////////////////////////////
// КЛИЕНТСКИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// бит_DFedotov Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)

	// Проверим возможность изменения вида операции.
	ЗаблокироватьЭлементы = НужноЗаблокироватьКлючевыеЭлементы(Объект, мКэшЗначений);
	Если ЗаблокироватьЭлементы Тогда
		Возврат;
	КонецЕсли; 
	
	// Сохраним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации; 
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, "_");
	ИмяПодменю      = Лев(ИмяКнопки  , Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки , Позиция + 1);
	
	Объект.ВидОперации = мКэшЗначений.ВидыОпераций[ИмяВидаОперации];
	
	// Если операция не поменялась, то выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСценарийКонтролируемыйПоУмолчанию();
	
	Объект.ДокументОснование = Неопределено;
	
	Объект.СуммыКорректировок.Очистить();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
																
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

&НаКлиенте
Процедура ЗаполнитьСценарийКонтролируемыйПоУмолчанию()
	
	Если Объект.ВидОперации = мКэшЗначений.ВидыОпераций.КонтрольГрафиковДоговоров Тогда
		Объект.СценарийКонтролируемый = мКэшЗначений.Перечисления.бит_РежимыКонтроляПоБюджету.ГрафикиДоговоров;
	ИначеЕсли Объект.ВидОперации = мКэшЗначений.ВидыОпераций.КонтрольЗаявок Тогда
		Объект.СценарийКонтролируемый = мКэшЗначений.ПустойСценарий;
	Иначе
		ТипСценарий = бит_ОбщегоНазначения.ПолучитьИмяТипаСценарииБюджетирования();
		
		Если НЕ ЗначениеЗаполнено(Объект.СценарийКонтролируемый)
			ИЛИ НЕ ТипЗнч(Объект.СценарийКонтролируемый) = Тип(ТипСценарий) Тогда
			
			Объект.СценарийКонтролируемый = мКэшЗначений.ПустойСценарий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// бит_DFedotov Процедура устанавливает отборы для договора контрагента.
//
// Параметры:
//  Элемент - ПолеФормы. Для которого необходимо установить параметры выбора.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Контейнер, Элемент)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контейнер.Контрагент) Тогда
		СтруктураОтбора.Вставить("Владелец", Контейнер.Контрагент);
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// бит_DFedotov Процедура обрабатывает начало выбора ДоговораКонтрагента
//
// Параметры:
//  Контейнер  – СтрокаТабличнойЧасти
//  Элемент    - ЭлементУправления
//  СтандартнаяОбработка - Булево
//
&НаКлиенте
Процедура НачалоВыбораДоговорКонтрагента(Контейнер,Элемент,СтандартнаяОбработка)

	//Если Контейнер = Неопределено Тогда
	//
	//	Возврат;
	//
	//КонецЕсли; 	
	//
	//// сохраним договор контрагента, возможно понадобится к нему вернуться
	//мТекущийДоговорКонтрагента = Контейнер.ДоговорКонтрагента;
	//
	//СтруктураДополнительныхПараметров = Новый Структура;
	//
	//мСписокВидовДоговоров = Неопределено;
	//
	//РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(Объект.Ссылка, ЭтаФорма, Элемент, Контейнер.Контрагент, Контейнер.ДоговорКонтрагента,
	//										мСписокВидовДоговоров, СтандартнаяОбработка, СтруктураДополнительныхПараметров);
	

КонецПроцедуры //НачалоВыбораДоговорКонтрагента()

// бит_DFedotov Процедура обрабатывает начало выбора статьи в толстом клиенте
//
// Параметры:
//  Элемент    - ЭлементУправления
//  СтандартнаяОбработка - Булево
//
&НаКлиенте
Процедура НачалоВыбораСтатьяОборотов(Элемент,НачальноеЗначение,СтандартнаяОбработка)
		
	СтруктураПараметров = Новый Структура;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
		СтруктураПараметров.Вставить("РасходДоход",мКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		СтруктураПараметров.Вставить("ТипСтатьи"  ,мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
		СтруктураПараметров.Вставить("РасходДоход",мКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		СтруктураПараметров.Вставить("ТипСтатьи"  ,мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР);
	КонецЕсли;
	//
	//// Добавим доп. параметры для отбора списка выбора статей оборотов.
	//СтруктураПараметров.Вставить("ОрганизацияОтбор", Объект.Организация);
	//СтруктураПараметров.Вставить("ДатаОтбор"       , Объект.Дата);
	//СтруктураПараметров.Вставить("ЦФОДляОтбора"    , Контейнер.ЦФО);
    
	бит_РаботаСДиалогами.ОткрытьФормуВыбораСтатейОборотов(Элемент
	                                                     ,НачальноеЗначение
														 ,СтандартнаяОбработка
														 ,СтруктураПараметров
														 ,СтруктураПараметров);
	
КонецПроцедуры //НачалоВыбораСтатьяОборотов()

#КонецЕсли

&НаСервере
Функция ПолучитьЗначениеРеквизита(Данные, ИмяРеквизита)
	
	Возврат Данные[ИмяРеквизита];
	
КонецФункции	

// бит_DFedotov Процедура открывает форму подбора записей из регистра контрольные значения бюджетов
//
// Параметры:
//	Направление - строка - Приход,Расход - используется для определеия ТЧ в которую будет производиться подбор
//
&НаКлиенте
Процедура ОткрытьФормуПодбораЗаписей(Знач Оповещение, Направление)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе"	, Ложь);
	//Начало_бит_Магомедов_13.07.2012 
	Если ЗначениеЗаполнено(Объект.Сценарий) и не ПолучитьДоступностьРоли() Тогда 
		ПараметрыФормы.Вставить("Сценарий"				, Объект.Сценарий);
	иначе
		СписокСценарии = Новый СписокЗначений;
		СписокСценарии.Добавить(Объект.СценарийБюджетА);
		СписокСценарии.Добавить(Объект.СценарийБюджетУ);
		СписокСценарии.Добавить(Объект.СценарийБюджетИнвест);
		//+Сундукова 21.04.16 №2362
		Если ПолучитьДоступностьРоли() тогда
			СписокСценарии.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_А"));
			СписокСценарии.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест"));
			СписокСценарии.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У"));
			СписокСценарии.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Заявка_Инвест"));
			СписокСценарии.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Заявка_У"));
			СписокСценарии.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Контракт_Инвест"));
			СписокСценарии.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Факт_А"));
			СписокСценарии.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Факт_Инвест"));
			СписокСценарии.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Факт_У"));
			СписокСценарии.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Факт_УУ"));
		КонецЕсли;
		//-Сундукова 21.04.16 №2362
		ПараметрыФормы.Вставить("Сценарий"		, СписокСценарии);
	КонецЕсли;
		
	ПараметрыФормы.Вставить("СценарийКонтролируемый", Объект.Сценарий);
	ПараметрыФормы.Вставить("Направление"			, Направление);
	ПараметрыФормы.Вставить("ЭтоКонтрольБюджета"	, Объект.ВидОперации = мКэшЗначений.ВидыОпераций.КонтрольБюджета);
	
	СтруктураОтбора = Новый Структура;
	
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(Новый Структура("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход));
		Если МассивСтрок.Количество() = 1 Тогда
			
			ТекСтрока 			= МассивСтрок[0];
			ОтборСтатьи 		= ТекСтрока.СтатьяОборотов;
			ОтборЦФО 			= ТекСтрока.ЦФО;
			ОтборПроект 		= ТекСтрока.Проект;
			ОтборАналитика_2 	= ТекСтрока.Аналитика_2;
			ОтборСценарий 		= ТекСтрока.Сценарий;
			ОтборЗаявок			= ТекСтрока.Аналитика_1;
		Иначе 
			
			ОтборСтатьи 		= Новый СписокЗначений;
			ОтборЦФО 			= Новый СписокЗначений;
			ОтборПроект 		= Новый СписокЗначений;
			ОтборАналитика_2 	= Новый СписокЗначений;
			ОтборСценарий 		= новый СписокЗначений;
			ОтборЗаявок 		= новый СписокЗначений;
			Для Каждого ТекСтрока Из МассивСтрок Цикл
				ОтборСтатьи.Добавить(ТекСтрока.СтатьяОборотов);
				ОтборЦФО.Добавить(ТекСтрока.ЦФО);
				ОтборПроект.Добавить(ТекСтрока.Проект);
				ОтборАналитика_2.Добавить(ТекСтрока.Аналитика_2);
				ОтборСценарий.Добавить(ТекСтрока.Сценарий);
				ОтборЗаявок.Добавить(ТекСтрока.Аналитика_1); 
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("СтатьяОборотов"		, ОтборСтатьи);
		ПараметрыФормы.Вставить("ЦФО"		, ОтборЦФО);
		ПараметрыФормы.Вставить("Проект"		, ОтборПроект);
		ПараметрыФормы.Вставить("Аналитика_2"		, ОтборАналитика_2);
		
		СтруктураОтбора.Вставить("СтатьяОборотов", ОтборСтатьи);
		СтруктураОтбора.Вставить("ЦФО"			 , ОтборЦФО);
		СтруктураОтбора.Вставить("Проект"		 , ОтборПроект);
		СтруктураОтбора.Вставить("Аналитика_2"	 , ОтборАналитика_2);
		//+Сундукова 01.06.16 №2362
		СтруктураОтбора.Вставить("Сценарий"		 , ОтборСценарий);
		СтруктураОтбора.Вставить("Аналитика_1"	 , ОтборЗаявок);
		//-Сундукова 01.06.16 №2362

	//КонецЕсли;

	ПараметрыФормы.Вставить("СтруктураОтбора", СтруктураОтбора);
	
	Если Направление = "Приход" Тогда
		ВладелецФормыПодбора = Элементы.СуммыКорректировокПриход;
	Иначе
		ВладелецФормыПодбора = Элементы.СуммыКорректировокРасход;
	КонецЕсли;
	
	ОткрытьФорму("Документ.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.Форма.ФормаПодбораЗаписей", ПараметрыФормы, ВладелецФормыПодбора,,,, Новый ОписаниеОповещения("ОткрытьФормуПодбораЗаписейЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры
&НаСервере
Функция ВернутьКонтролирующийСценарий(СценарийОбр)
	Если СценарийОбр = справочники.СценарииПланирования.Бюджет_А или
		СценарийОбр = справочники.СценарииПланирования.Бюджет_Инвест или
		СценарийОбр = справочники.СценарииПланирования.Бюджет_У тогда
		СценарийВозврат 		  =СценарийОбр;
	иначе  				
		СценарийВозврат 		  = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролирующий сценарий", СценарийОбр);
	конецЕсли;
	возврат СценарийВозврат;
КонецФункции			

//+Сундукова 21.04.16 №2362
&НаСервере
Функция ПолучитьДоступностьРоли()
	Возврат РольДоступна("ОК_ПолнаяКорректировкаКонтрольныхЗначений") или РольДоступна("ПолныеПрава");
КонецФункции
//-Сундукова 21.04.16 №2362
&НаКлиенте
Процедура ОткрытьФормуПодбораЗаписейЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    ОбновитьИтоги();
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

// бит_DFedotov Процедура проверяет уникальность добавляемой строки, чтобы одну и ту же строку нельзя было добавить дважды в одно поле
//
// Параметры:
//	Элемент - ТаблицаФормы - таблица, в которую осуществляется добавление строки
//	ВыбранноеЗначение - ДанныеФормыЭлементКоллекции - строка, которая добавляется
//	ВидДвижения - строка
//	Отказ - булево
//	ВыводитьСообщения - булево
//
&НаКлиенте
Процедура ПроверитьУникальностьСтроки(Элемент, ВыбранноеЗначение, ВидДвижения, Отказ=Ложь, ВыводитьСообщения=Истина, ИДВладельца="")
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления[ВидДвижения]);
	
	// сформируем структуру поиска по тем полям, которые есть и в таблице на форме и в подборе
	Для Каждого ТекущееПоле Из Элемент.ПодчиненныеЭлементы Цикл
		ИмяРеквизита = СтрЗаменить(ТекущееПоле.Имя, "СуммыКорректировок"+ВидДвижения, "");
		
		Если ИмяРеквизита = "НомерСтроки"
			ИЛИ ИмяРеквизита = "Количество"
			ИЛИ ИмяРеквизита = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВыбранноеЗначение.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска.Вставить(ИмяРеквизита, ВыбранноеЗначение[ИмяРеквизита]);
	КонецЦикла;
	 //Начало_бит_Магомедов_03.08.2012 
	//Если Объект.ВидКорректировки = мКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
	//	СтруктураПоиска.Вставить("ИДВладельца", ИДВладельца);
	//КонецЕсли;
	//Конец_бит_Магомедов_03.08.2012 
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(СтруктураПоиска
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураПоиска);
	
	ИмяТаблицы = ?(ВидДвижения="Приход", "Увеличение", "Уменьшение");
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ И ВыводитьСообщения Тогда
		ТекстСообщения = НСтр("ru='Данная строка уже подобрана в табличную часть """+ИмяТаблицы+""" в строке № "+МассивСтрок[0].НомерСтроки+"'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// бит_DFedotov Процедура устанавливает отборы для статьи оборотов.
//
// Параметры:
//  Контейнер - ПолеФормы.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатей(Контейнер)

	МассивПараметров = Новый Массив;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтатьи"	, мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
		МассивПараметров.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.РасходДоход", мКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		МассивПараметров.Добавить(НовыйПараметр);
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтатьи"	, мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР);
		МассивПараметров.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.РасходДоход", мКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
		МассивПараметров.Добавить(НовыйПараметр);	
	КонецЕсли;
	
	//Если ТипЗнч(мКэшЗначений.СписокСтатейПринадлежность) = Тип("СписокЗначений") Тогда
	//	
	//	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка" , мКэшЗначений.СписокСтатейПринадлежность);
	//	МассивПараметров.Добавить(НовыйПараметр);
	//	
	//КонецЕсли; 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-21 (#3078)
	//Если массив параметров пустой, то уходило в ошибку
	Если МассивПараметров.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-21 (#3078)
	
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Контейнер.ПараметрыВыбора = ПараметрыВыбора;

КонецПроцедуры // УстановитьПараметрыОтбораСтатей()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// бит_DFedotov Процедура устнавливает заголовок формы документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма, СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// бит_DFedotov Процедура отображает статус на форме документа.
//
// Параметры:
//  Статус 				 - СправочникСсылка.бит_СтатусыОбъектов.
//  ДатаИзмененияСтатуса - Дата.
//
&НаКлиенте                      
Процедура УстановитьСтатусВФорме(пСтатус, пДатаИзмененияСтатуса) Экспорт

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус"			   , пСтатус);
	СтруктураПараметров.Вставить("ДатаИзмененияСтатуса", пДатаИзмененияСтатуса);
	
	ИнформацияСтатус = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
	мКэшЗначений.Вставить("ТекущийСтатус"		, пСтатус);
	мКэшЗначений.Вставить("ДатаИзмененияСтатуса", пДатаИзмененияСтатуса);
	
	ЭтаФорма.Статус 			  = пСтатус;
	ЭтаФорма.ДатаИзмененияСтатуса = пДатаИзмененияСтатуса;
	
КонецПроцедуры // УстановитьСтатусВФорме()

////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// бит_DFedotov Процедура - обработчик события "ПриСозданииНаСервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-11-25 (#3393)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-11-25 (#3393)
	
	// стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// вызов механизма защиты
	бит_ЛицензированиеБФCервер.ПроверитьВозможностьРаботы(ЭтаФорма,МетаданныеОбъекта.ПолноеИмя(),Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументКорректировка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументКорректировка, МассивТипов, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	// Заполним список имен элементов управления, которые необходимо блокировать при изменении статусов.
	ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке();
	
	// Восстановим настройки формы
	ВосстановитьНастройки();
	
	Элементы.ФормаКомандаАвтовидимостьКолонок.Пометка = АвтовидимостьКолонок;
	
	// Настроим отображение полей доп. аналитик в таблицах формы.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																					 ,"СуммыКорректировокПриход"
																					 ,мКэшЗначений.ИзмеренияДоп
																					 ,мКэшЗначений.НастройкиИзмерений);
																				 
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																					 ,"СуммыКорректировокРасход"
																					 ,мКэшЗначений.ИзмеренияДоп
																					 ,мКэшЗначений.НастройкиИзмерений);																			 
																					 
	МетаВидыОпераций = Объект.ВидОперации.Метаданные();
	
	//УстановитьПодменюВыбораВидаОперации(ЭтаФорма,ЭтаФорма.Элементы.ПодменюВидаОперации, МетаВидыОпераций.ЗначенияПеречисления, "ДействияФормыДействиеУстановитьОперацию");
																					 
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьРеквизитыФормы();																				 
	
	НастроитьОформлениеФормы();
	
	// Управление видимостью вызываем для записанного документа.
	Если Не ЭтоНовый Тогда
		УправлениеЭлементамиФормы();
	КонецЕсли;

	ПоказатьВалютуСценария();
	
	// автовидимость колонок
	УстановитьАвтовидимостьКолонок();
	//Начало_бит_Магомедов_13.07.2012 
	УстановитьСписокВыбораСценария();
	//Конец_бит_Магомедов_13.07.2012 

	//ОК Калинин М. 250613 Добавление команды заполнить колонку в меню таблиц
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.ФормаДокумента");
	//ОК Калинин М. 
//+Сундукова 10.06.2016	
этаформа.элементы.СуммыКорректировокПриходАналитика_3.Видимость = ложь;
этаформа.элементы.СуммыКорректировокРасходАналитика_3.Видимость = ложь;
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-03 (#3078)
//этаформа.элементы.СуммыКорректировокПриходСтавкаНДС.Видимость = ложь;
//этаформа.элементы.СуммыКорректировокРасходСтавкаНДС.Видимость = ложь;
//этаформа.элементы.СуммыКорректировокПриходНДС.Видимость = ложь;
//этаформа.элементы.СуммыКорректировокРасходНДС.Видимость = ложь;
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-03 (#3078)
//-Сундукова 10.06.2016

	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-07-13 Начало (#3774)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3925)
	//Элементы.ок_СверхБюджета.Доступность = УправлениеДоступом.ЕстьРоль("ок_ПроведениеККЗиБ_СверхБюджета");
	ок_ПроведениеККЗиБ_СверхБюджета = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
										   бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"),
 				                           ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ДополнительныеПраваПользователей.ок_ПроведениеККЗиБ_СверхБюджета"));
	Элементы.ок_СверхБюджета.Доступность = ок_ПроведениеККЗиБ_СверхБюджета;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3925)
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-07-13 Конец (#3774)

КонецПроцедуры
//Начало_бит_Магомедов_13.07.2012 
&НаСервере
Процедура УстановитьСписокВыбораСценария()
	Массив = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)и не ПолучитьДоступностьРоли()Тогда 
		Массив.Добавить(Объект.Сценарий);
	иначе
		Массив.Добавить(Объект.СценарийБюджетА);
		Массив.Добавить(Объект.СценарийБюджетУ);
		Массив.Добавить(Объект.СценарийБюджетИнвест);
		//+Сундукова 21.04.16 №2362
		Если ПолучитьДоступностьРоли() тогда
			Массив.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_А"));
			Массив.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест"));
			Массив.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У"));
			Массив.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Заявка_Инвест"));
			Массив.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Заявка_У"));
			Массив.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Контракт_Инвест"));
			Массив.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Факт_А"));
			Массив.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Факт_Инвест"));
			Массив.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Факт_У"));
			Массив.Добавить(ПредопределенноеЗначение("справочник.СценарииПланирования.Факт_УУ"));
			//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-07-13 Начало (#3774)
			Массив.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_У"));
			Массив.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_И"));
			Массив.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.ФактОплат_И"));
			Массив.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.ФактОплат_У"));
			//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-07-13 Конец (#3774)
		КонецЕсли;
		//-Сундукова 21.04.16 №2362

	КонецЕсли;
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-07-13 Начало (#3774)
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(Массив);
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2020-07-13 Конец (#3774)
	
	Элементы.СуммыКорректировокПриходСценарий.СписокВыбора.Очистить();
	Элементы.СуммыКорректировокПриходСценарий.СписокВыбора.ЗагрузитьЗначения(Массив);
	
	Элементы.СуммыКорректировокРасходСценарий.СписокВыбора.Очистить();
	Элементы.СуммыКорректировокРасходСценарий.СписокВыбора.ЗагрузитьЗначения(Массив);
	
КонецПроцедуры
//Конец_бит_Магомедов_13.07.2012 

// бит_DFedotov Процедура - обработчик события "ПриОткрытии" формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-11-25 (#3393)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-11-25 (#3393)
	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		
		//ВыбратьВидОперации(Объект, мКэшЗначений.ВидыОпераций, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСценарийКонтролируемыйПоУмолчанию();
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда 
			Объект.ВидОперации = мКэшЗначений.ВидыОпераций.КонтрольБюджета;
		КонецЕсли;
		
		// Установить видимость реквизитов и заголовков колонок.	
		УправлениеЭлементамиФормы();
		
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();

	ЭтаФорма.Статус 			  = мКэшЗначений.ТекущийСтатус;
	ЭтаФорма.ДатаИзмененияСтатуса = мКэшЗначений.ДатаИзмененияСтатуса;
	
	// Установим текущий статус.
	УстановитьСтатусВФорме(мКэшЗначений.ТекущийСтатус, мКэшЗначений.ДатаИзмененияСтатуса);
	
	//ОК+ Аверьянова 27.09.16 Омни #AT-1454891#
	//ОбновитьИтоги();
	ОбновитьИтогиБезПересчетаНДС();
	//ОК-			
	
	//+ Сенин С. CR#2670 23.09.2016
	мСписокСценариев = Новый Массив;
		мСписокСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_А"));
		мСписокСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У"));
		мСписокСценариев.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест"));
	//- Сенин С. CR#2670 23.09.2016
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-29 (#3149)
	//ОбновитьИтоги();
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-29 (#3149)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ПослеЗаписиНаСервере" формы
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-20 (#3393)
	//Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
	//	
	//	СтруктураПараметров = Новый Структура;
	//	СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
	//	КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров); 
	//	
	//	Если КоличествоВиз = 0 Тогда
	//		ЗаполнитьВизы();
	//	КонецЕсли; 
	//	
	//КонецЕсли; 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-20 (#3393)
	
	ТекущийСтатус 		 = ТекущийОбъект.мТекущийСтатус;
	ДатаИзмененияСтатуса = ТекущийОбъект.мДатаИзмененияСтатуса;
	
	мКэшЗначений.Вставить("ТекущийСтатус"		, ТекущийСтатус);
	мКэшЗначений.Вставить("ДатаИзмененияСтатуса", ДатаИзмененияСтатуса);
	
	ЭтаФорма.Статус               = ТекущийСтатус;
	ЭтаФорма.ДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус"			   , ТекущийСтатус);
	СтруктураПараметров.Вставить("ДатаИзмененияСтатуса", ДатаИзмененияСтатуса);
	
	ЭтаФорма.ИнформацияСтатус = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);	
	
	// заполним добавленные реквизиты значениями
	Для Каждого ТекущаяСтрока Из Объект.СуммыКорректировок Цикл
		ИДСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	КонецЦикла;
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ПослеЗаписи" формы
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	//{ bit SVKushnirenko Bit 27.01.2017 #2657
	пМассивОбновления = ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(Объект.Ссылка);
	Если рекМассивДокументовОповещенияДляИзмененияСтатуса.Количество() <>  0 Тогда
		
		Для каждого пСтрокаДанных Из рекМассивДокументовОповещенияДляИзмененияСтатуса Цикл
			
			пМассивОбновления.Добавить(пСтрокаДанных.Значение);
		КонецЦикла; 
	КонецЕсли;
	 
	Если пМассивОбновления.Количество()  >  0 Тогда
		
		Оповестить("бит_БК_ИзмСтатусаПослеИзмБалансаЗаявок", Новый Структура("Ссылки", пМассивОбновления));
	КонецЕсли;
	//} bit SVKushnirenko Bit 27.01.2017 #2657
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ПередЗакрытием" формы
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьНастройки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// бит_DFedotov Процедура - действие команды "КомандаПодборЗаписейПриход"
//
&НаКлиенте
Процедура КомандаПодборЗаписейПриход(Команда)
	
	ОткрытьФормуПодбораЗаписей(Новый ОписаниеОповещения("КомандаПодборЗаписейПриходЗавершение", ЭтотОбъект), "Приход");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборЗаписейПриходЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", , "Приход");

КонецПроцедуры

// бит_DFedotov Процедура - действие команды "КомандаПодборЗаписейРасход"
//
&НаКлиенте
Процедура КомандаПодборЗаписейРасход(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидКорректировки) Тогда
		ТекстСообщения = НСтр("ru='Не заполнен вид корректировки. Невозможно выполнить подбор!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	ОткрытьФормуПодбораЗаписей(Новый ОписаниеОповещения("КомандаПодборЗаписейРасходЗавершение", ЭтотОбъект), "Расход");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборЗаписейРасходЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    //Начало_бит_Магомедов_03.08.2012 
    //Если Объект.ВидКорректировки = мКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
    //	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
    //	
    //	Если ТекущиеДанные = Неопределено Тогда
    //		ТекстСообщения = НСтр("ru='Не указана строка в которой происходит увеличение. Невозможно выполнить подбор!'");
    //		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
    //		
    //		Возврат;
    //	КонецЕсли;
    //КонецЕсли;
    //Конец_бит_Магомедов_03.08.2012 
    
    
    УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", , "Расход");

КонецПроцедуры

// бит_DFedotov Процедура - действие команды "КомандаСкопироватьВсе"
//
&НаКлиенте
Процедура КомандаСкопироватьВсе(Команда)
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		Отказ = Ложь;
		
		ПроверитьУникальностьСтроки(Элементы.СуммыКорректировокПриход, ТекущаяСтрока, "Приход", Отказ, Ложь);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		// добавим строку в таблицу
		НоваяСтрока = Объект.СуммыКорректировок.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		УстановитьИДСтроки(НоваяСтрока);
		
		НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
		НоваяСтрока.ИДВладельца = "";
		
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
		ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
		ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
		//+ Сенин С. CR#2670 23.09.2016
		СуммыКорректировокПриИзменении(НоваяСтрока);
		//- Сенин С. CR#2670 23.09.2016
		
	КонецЦикла;
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", , "Приход");
	
	//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-08 (#2841)
	ОбновитьИтогиБезПересчетаНДС();
	//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-08 (#2841)

КонецПроцедуры

// бит_DFedotov Процедура - действие команды "КомандаСкопироватьТекущуюСтроку"
//
&НаКлиенте
Процедура КомандаСкопироватьТекущуюСтроку(Команда)
	
	ТекущиеДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьУникальностьСтроки(Элементы.СуммыКорректировокПриход, ТекущиеДанные, "Приход", Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// добавим строку в таблицу
	НоваяСтрока = Объект.СуммыКорректировок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	
	УстановитьИДСтроки(НоваяСтрока);
	
	НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
	НоваяСтрока.ИДВладельца = "";
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", , "Приход");
	
	//+ Сенин С. CR#2670 23.09.2016
	СуммыКорректировокПриИзменении(НоваяСтрока);
	//- Сенин С. CR#2670 23.09.2016
	
	//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-08 (#2841)
	ОбновитьИтогиБезПересчетаНДС();
	//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-08 (#2841)
	
КонецПроцедуры

// бит_DFedotov Процедура - действие команды "КомандаАвтовидимостьКолонок"
//
&НаКлиенте
Процедура КомандаАвтовидимостьКолонок(Команда)
	
	АвтовидимостьКолонок = Не АвтовидимостьКолонок;
	
	Элементы.ФормаКомандаАвтовидимостьКолонок.Пометка = АвтовидимостьКолонок;
	
	УстановитьАвтовидимостьКолонок(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СценарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мСценарий = Объект.Сценарий;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	Если НЕ Объект.Сценарий = мСценарий Тогда 
		// очищать таблицу Увеличение большого смысла нет, т.к. эту таблицу можно заполнить руками как угодно, поэтому очищаем только Уменьшение
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
		
		МассивКУдалению = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
		
		Если НЕ МассивКУдалению.Количество() = 0 Тогда
			Если Объект.ВидКорректировки = мКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
				НазваниеТаблицы = "За счет";
			Иначе
				НазваниеТаблицы = "Уменьшение";
			КонецЕсли;
			ПоказатьВопрос(Новый ОписаниеОповещения("СценарийПриИзмененииВопросЗавершение", ЭтотОбъект, Новый Структура("МассивКУдалению", МассивКУдалению)), "Таблица """+НазваниеТаблицы+""" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
            Возврат;
		КонецЕсли;
	КонецЕсли;

	ПоказатьВалютуСценария();
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзмененииВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    МассивКУдалению = ДополнительныеПараметры.МассивКУдалению;
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Объект.Сценарий = мСценарий;
        Возврат;
    КонецЕсли;
    
    Для Каждого ТекущаяСтрока Из МассивКУдалению Цикл
        Объект.СуммыКорректировок.Удалить(ТекущаяСтрока);
    КонецЦикла;
    
    ОбновитьИтоги();
    
    ПоказатьВалютуСценария();

КонецПроцедуры

&НаКлиенте
Процедура ВидКорректировкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мВидКорректировки = Объект.ВидКорректировки;
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ПриИзменении" поля ввода "ВидКорректировки"
//
&НаКлиенте
Процедура ВидКорректировкиПриИзменении(Элемент)
	//Начало_бит_Магомедов_03.08.2012 
	//Если Объект.ВидКорректировки = мКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет
	//	И НЕ Объект.ВидКорректировки = мВидКорректировки Тогда
	//	
	//	СтруктураОтбора = Новый Структура;
	//	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	//	
	//	МассивКУдалению = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	//	
	//	Если НЕ МассивКУдалению.Количество() = 0 Тогда
	//		Ответ = Вопрос("Таблица ""Уменьшение"" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	//		
	//		Если Ответ = КодВозвратаДиалога.Нет Тогда
	//			Объект.ВидКорректировки = мВидКорректировки;
	//			
	//			Возврат;
	//		КонецЕсли;
	//		
	//		Для Каждого ТекущаяСтрока Из МассивКУдалению Цикл
	//			Объект.СуммыКорректировок.Удалить(ТекущаяСтрока);
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
	//Конец_бит_Магомедов_03.08.2012 
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "СуммыКорректировокПриход"

&НаКлиенте
Процедура СуммыКорректировокПриходПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	//Начало_бит_Магомедов_03.08.2012 
	//Если Объект.ВидКорректировки = мКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
	//	УстановитьОтборСтрок(Объект, Элементы, мКэшЗначений, Объект.ВидКорректировки, ТекущиеДанные);
	//	
	//	ОбновитьИтоги();
	//КонецЕсли;
	//Конец_бит_Магомедов_03.08.2012 
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		УстановитьИДСтроки(ТекущиеДанные);
		ТекущиеДанные.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
		
		УстановитьОтборСтрок(Объект, Элементы, мКэшЗначений, Объект.ВидКорректировки, ТекущиеДанные);
		
		ОбновитьИтоги();
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
																	   
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	//Начало_бит_Магомедов_03.08.2012 
	//Если НЕ ТекущиеДанные = Неопределено 
	//	И НЕ Отказ 
	//	И Объект.ВидКорректировки = мКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
	//	
	//	СтруктураОтбора = Новый Структура;
	//	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	//	СтруктураОтбора.Вставить("ИДВладельца", ТекущиеДанные.ИД);
	//	
	//	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	//	
	//	Для Каждого СтрокаКУдалению Из МассивСтрок Цикл
	//		Объект.СуммыКорректировок.Удалить(СтрокаКУдалению);
	//	КонецЦикла;
	//КонецЕсли;
	//Конец_бит_Магомедов_03.08.2012 
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходПослеУдаления(Элемент)
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", , "Приход");
	
	ОбновитьИтоги();
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ОбработкаВыбора" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// проверим чтобы одну и ту же строку не добавили дважды
	Отказ = Ложь;
	
	ПроверитьУникальностьСтроки(Элемент, ВыбранноеЗначение, "Приход", Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// добавим строку расхода
	НоваяСтрока = Объект.СуммыКорректировок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
	
	УстановитьИДСтроки(НоваяСтрока);
	
	НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход;
	//+Сундукова 27.04.16 №2362
	//НоваяСтрока.Сумма		= 0;
	//НоваяСтрока.Количество	= 0;
	НоваяСтрока.Сумма		= ВыбранноеЗначение.СуммаРазность;
	НоваяСтрока.Количество	= ВыбранноеЗначение.КоличествоРазность;
	//Сундукова 27.04.16 №2362
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-03 (#3078)
	НоваяСтрока.СуммаСНДС		= ВыбранноеЗначение.СуммаСНДСРазность;	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-03 (#3078)
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
	// в принципе вызов не нужен, но если заново отбор не установить, то не всегда обновляется содержимое таб.частей
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	//+ Сенин С. CR#2670 23.09.2016
	СуммыКорректировокПриИзменении(ТекущиеДанные);
	//- Сенин С. CR#2670 23.09.2016
	
	УстановитьОтборСтрок(Объект, Элементы, мКэшЗначений, Объект.ВидКорректировки, ТекущиеДанные);
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ПриИзменении" поля ввода "Период" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходПериодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Приводим выбранный период на начало периода в завсимости от реквизита "Периодичность" выбранного сценария
	ТекущиеДанные.Период = бит_Бюджетирование.ПолучитьНачалоПериода(ТекущиеДанные.Период, ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Сценарий, "бит_Периодичность"));
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "НачалоВыбора" поля ввода "СтатьяОборотов" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	//1С-ИжТиСи, Кондратьев, 16.03.2020, обновление (
	////для управляемой формы отбор устанавливается через параметры выбора, для обычной, по старинке-ручками
	//НачалоВыбораСтатьяОборотов(Элемент,ТекущиеДанные.СтатьяОборотов,СтандартнаяОбработка);
	//1С-ИжТиСи, Кондратьев, 16.03.2020, обновление )
	#Иначе
	ИндексСтроки  = ТекущиеДанные.НомерСтроки - 1;
	
	//мКэшЗначений.СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежности(, ИндексСтроки);
	УстановитьПараметрыВыбораСтатей(Элемент);
	#КонецЕсли

КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ПриИзменении" поля ввода "СтатьяОборотов" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ИзменениеСтатьиОборотов(ИДСтроки);
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИДСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииДоговора(ИДСтроки);
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		НачалоВыбораДоговорКонтрагента(ТекущиеДанные, Элемент, СтандартнаяОбработка);
	#Иначе	
		// Установим отбор для договора контрагента.
		УстановитьПараметрыВыбораДоговораКонтрагента(ТекущиеДанные,Элемент);
	#КонецЕсли
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "НачалоВыбора" поля ввода "БанковскийСчет" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйБанковскийСчет = бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчет(ТекущиеДанные.БанковскийСчет, "Контрагент");
	
	Если НЕ ВыбранныйБанковскийСчет = Неопределено Тогда
		ТекущиеДанные.БанковскийСчет = ВыбранныйБанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "Очистка" поля ввода "Аналитика_i" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "СуммыКорректировокПриход", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
	                                                                       	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
																			
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "НачалоВыбора" поля ввода "Аналитика_i" табличного поля "СуммыКорректировокПриход"
//
&НаКлиенте
Процедура СуммыКорректировокПриходАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "СуммыКорректировокПриход", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
															   
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "СуммыКорректировокРасход"

// бит_DFedotov Процедура - обработчик события "ОбработкаВыбора" табличного поля "СуммыКорректировокРасход"
//
&НаКлиенте
Процедура СуммыКорректировокРасходОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// проверим чтобы одну и ту же строку не добавили дважды
	Отказ = Ложь;
	//Начало_бит_Магомедов_03.08.2012 
	// для вида корректировки ЗаСчет строки таблицы уменьшение подчинены строкам увеличения
	//Если Объект.ВидКорректировки = мКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
	//	ДанныеСтрокиВладельца = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	//	
	//	Если ДанныеСтрокиВладельца = Неопределено Тогда
	//		ТекстСообщения = НСтр("ru='Не указана строка в которой происходит увеличение!'");
	//		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	//		
	//		Возврат;
	//	КонецЕсли;
	//	ИДВладельца = ДанныеСтрокиВладельца.ИД;
	//Иначе
		ДанныеСтрокиВладельца = Неопределено;
		ИДВладельца = "";
	//КонецЕсли;
	//Конец_бит_Магомедов_03.08.2012 
	
	ПроверитьУникальностьСтроки(Элемент, ВыбранноеЗначение, "Расход", Отказ,, ИДВладельца);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// добавим строку расхода
	НоваяСтрока = Объект.СуммыКорректировок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
	
	УстановитьИДСтроки(НоваяСтрока);
	
	НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
	НоваяСтрока.ИДВладельца = ИДВладельца;
	НоваяСтрока.Сумма		= ВыбранноеЗначение.СуммаСценарийКонтроль - ВыбранноеЗначение.СуммаСценарийИсполнение;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-03 (#3078)
	НоваяСтрока.СуммаСНДС		= ВыбранноеЗначение.СуммаСНДССценарийКонтроль - ВыбранноеЗначение.СуммаСНДССценарийИсполнение;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-03 (#3078)
	НоваяСтрока.Количество	= ВыбранноеЗначение.КоличествоСценарийКонтроль - ВыбранноеЗначение.КоличествоСценарийИсполнение;
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
	// в принципе вызов не нужен, но если заново отбор не установить, то не всегда обновляется содержимое таб.частей
	УстановитьОтборСтрок(Объект, Элементы, мКэшЗначений, Объект.ВидКорректировки, ДанныеСтрокиВладельца);
	
	////Начало_бит_Магомедов_16.07.2012 
	//Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
	//	СуммыКорректировокПриходОбработкаВыбора(Элементы.СуммыКорректировокПриход, ВыбранноеЗначение, СтандартнаяОбработка);
	//КонецЕсли;
	
	//+ Сенин С. CR#2670 23.09.2016
	СуммыКорректировокПриИзменении(НоваяСтрока);
	//- Сенин С. CR#2670 23.09.2016
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
//Начало_бит_Магомедов_12.07.2012 	
	//Отказ = Истина;
	//Возврат;
	//
	//Если Объект.ВидКорректировки = мКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
	//	// для вида корректировки ЗаСчет строки таблицы уменьшение подчинены строкам увеличения
	//	ДанныеСтрокиВладельца = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	//	
	//	Если ДанныеСтрокиВладельца = Неопределено Тогда
	//		ТекстСообщения = НСтр("ru='Не указана строка в которой происходит увеличение!'");
	//		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,, Отказ);
	//		
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
//Конец_бит_Магомедов_03.08.2012 	
КонецПроцедуры

// бит_DFedotov Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "СуммыКорректировокРасход"
//
&НаКлиенте
Процедура СуммыКорректировокРасходПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		УстановитьИДСтроки(ТекущиеДанные);
		
		ДанныеСтрокиВладельца = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
		Если НЕ ДанныеСтрокиВладельца = Неопределено Тогда
			ТекущиеДанные.ИДВладельца = ДанныеСтрокиВладельца.ИД;
		КонецЕсли;
		
		ТекущиеДанные.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
		
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
																	   
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПослеУдаления(Элемент)
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", , "Расход");
	
	ОбновитьИтоги();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// бит_DFedotov Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  КэшированныеЗначения - Структура.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_ВидыКорректировокКонтрольныхЗначений"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыКорректировокКонтрольныхЗначений));
	КэшПеречисления.Вставить("бит_ВидДвиженияНакопления"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидДвиженияНакопления));
	КэшПеречисления.Вставить("бит_РежимыКонтроляПоБюджету"	, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РежимыКонтроляПоБюджету));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов"		, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_РасходДоход"				, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	//Начало_бит_Магомедов_17.07.2012 
	КэшПеречисления.Вставить("СтавкиНДС"				, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СтавкиНДС));
	ЗначенияСтавокНДС = Новый Соответствие();
	Для Каждого ПеречислениеСсылка Из Перечисления.СтавкиНДС Цикл
		ЗначенияСтавокНДС.Вставить(ПеречислениеСсылка,УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ПеречислениеСсылка));
	КонецЦикла;
	КэшированныеЗначения.Вставить("ЗначенияСтавокНДС",ЗначенияСтавокНДС);
	//Конец_бит_Магомедов_17.07.2012 
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	КэшированныеЗначения.Вставить("ВидыОпераций", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений));
	
	// Статусы 
	КэшированныеЗначения.Вставить("КорректировкаКонтрольныхЗначений_Черновик"	, Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Черновик);
	КэшированныеЗначения.Вставить("КорректировкаКонтрольныхЗначений_Утверждена" , Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Рабочий);
	КэшированныеЗначения.Вставить("КорректировкаКонтрольныхЗначений_Закрыта"	, Справочники.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_Утвержден);
	
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	ПустойСценарий = Справочники[ИмяСправочникаСценарии].ПустаяСсылка();
	
	КэшированныеЗначения.Вставить("ПустойСценарий", ПустойСценарий);
		
	ДокументКорректировка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));
	
	КэшированныеЗначения.Вставить("ИзмеренияДоп"      		  , ДокументКорректировка.мИзмеренияДоп);
	КэшированныеЗначения.Вставить("НастройкиИзмерений"		  , ДокументКорректировка.мНастройкиИзмерений);
	//КэшированныеЗначения.Вставить("СписокСтатейПринадлежность", ПолучитьСписокСтатейПоПринадлежности());
	КэшированныеЗначения.Вставить("ТекущийСтатус"             , ДокументКорректировка.мТекущийСтатус);
	КэшированныеЗначения.Вставить("ДатаИзмененияСтатуса"      , ДокументКорректировка.мДатаИзмененияСтатуса);
	//КэшированныеЗначения.Вставить("ВалютаРеглУчета"			  , Константы.ВалютаРегламентированногоУчета.Получить());
	
	// Сформируем список доступных валют.
	//СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);
	
	//КэшированныеЗначения.Вставить("СписокВалют", СписокВалют);
	
	флЭтоКомплекснаяАвтоматизация = бит_ОбщегоНазначения.ЭтоКомплекснаяАвтоматизация();
	флЭтоУПП					  = Ложь;
	
	КэшированныеЗначения.Вставить("флЭтоКомплекснаяАвтоматизация", флЭтоКомплекснаяАвтоматизация);
	КэшированныеЗначения.Вставить("флЭтоУПП"					 , флЭтоУПП);
	
	// Параметры, используемые для управления автовидимостью колонок
	КэшированныеЗначения.Вставить("НастройкаВидимостиКолонок"	   , Новый Структура);
	КэшированныеЗначения.Вставить("МассивСтатей_СуммыКорректировок", Новый Массив);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", МетаданныеОбъекта.ПредставлениеОбъекта);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-21 (#3393)
	КэшированныеЗначения.Вставить("ПроцессСогласованияЗапущен", Документы.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.ПроцессСогласованияЗапущен(Объект.Ссылка));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-21 (#3393)
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// бит_DFedotov Процедура заполняет список имен элементов управления,
// которые необходимо блокировать при изменении статусов.
//
// Параметры:
//  Нет.
//
&НаСервере 
Процедура ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке()
	
	// Имена элементов управления, подлежащие блокировке в статусах выше рабочего.
	ИменаЭлементов = Новый Массив;
	//ИменаЭлементов.Добавить("Сценарий");
	//ИменаЭлементов.Добавить("СценарийКонтролируемый");
	//ИменаЭлементов.Добавить("ВидКорректировки");
	
	ИменаЭлементов.Добавить("СуммыКорректировокПриходПериод");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходЦФО");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходСтатьяОборотов");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходКонтрагент");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходДоговорКонтрагента");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходПроект");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходНоменклатурнаяГруппа");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходАналитика_5");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходБанковскийСчет");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходАналитика_1");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходАналитика_2");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходАналитика_3");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходАналитика_4");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходСумма");
	ИменаЭлементов.Добавить("СуммыКорректировокПриходКоличество");
	
	ИменаЭлементов.Добавить("СуммыКорректировокРасходПериод");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходЦФО");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходСтатьяОборотов");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходКонтрагент");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходДоговорКонтрагента");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходПроект");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходНоменклатурнаяГруппа");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходАналитика_5");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходБанковскийСчет");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходАналитика_1");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходАналитика_2");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходАналитика_3");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходАналитика_4");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходСумма");
	ИменаЭлементов.Добавить("СуммыКорректировокРасходКоличество");

	
	мКэшЗначений.Вставить("ИменаЭлементов", ИменаЭлементов);
	
КонецПроцедуры // ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке()

// бит_DFedotov Процедура осуществляет управление доступностью/видимостью элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));
	
	//Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда 
	//	Элементы.ФормаОбработкабит_УстановкаВизСогласование.Видимость = Ложь;
	//КонецЕсли;
	
	ЗаблокироватьЭлементы = НужноЗаблокироватьКлючевыеЭлементы(Объект, мКэшЗначений);
	
	Для каждого ИмяЭлемента Из мКэшЗначений.ИменаЭлементов Цикл
		 Элементы[ИмяЭлемента].ТолькоПросмотр = ЗаблокироватьЭлементы;
	КонецЦикла; 
	
	ЕстьКнопкаПровестиИЗакрыть = Элементы.Найти("ФормаПровестиИЗакрыть");
	
	// под ограниченными правами управляемая форма сама удаляет кнопку
	Если НЕ ЕстьКнопкаПровестиИЗакрыть = Неопределено Тогда
		Элементы.ФормаПровестиИЗакрыть.Доступность = Не ЗаблокироватьЭлементы;
	КонецЕсли;
	
	Элементы.ФормаЗаписать.Доступность = Не ЗаблокироватьЭлементы;
	
	Элементы.СуммыКорректировокПриход.ИзменятьСоставСтрок = НЕ ЗаблокироватьЭлементы;
	Элементы.СуммыКорректировокРасход.ИзменятьСоставСтрок = НЕ ЗаблокироватьЭлементы;
	
	Элементы.КомандаПодборЗаписейПриход.Доступность = НЕ ЗаблокироватьЭлементы;
	Элементы.КомандаПодборЗаписейРасход.Доступность = НЕ ЗаблокироватьЭлементы;
	
	Элементы.СуммыКорректировокРасходКомандаСкопироватьТекущуюСтроку.Доступность = НЕ ЗаблокироватьЭлементы;
	Элементы.СуммыКорректировокРасходКомандаСкопироватьВсе.Доступность 			 = НЕ ЗаблокироватьЭлементы;
	
//	Элементы.СценарийКонтролируемый.Видимость = Объект.ВидОперации = мКэшЗначений.ВидыОпераций.КонтрольБюджета;
	
	ТекущаяСтрокаВладелец = Элементы.СуммыКорректировокПриход.ТекущаяСтрока;
	
	УстановитьОтборСтрок(Объект, Элементы, мКэшЗначений, Объект.ВидКорректировки, ТекущаяСтрокаВладелец);
	
	Если Объект.ВидКорректировки = мКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
		Элементы.ГруппаРасход.Заголовок = "За счет";
	Иначе
		Элементы.ГруппаРасход.Заголовок = "Уменьшение";
	КонецЕсли;
	
	// Установим настройки доступности элементов формы.
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры // УправлениеЭлементамиФормы()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(пОбъект, пЭлементы, пКэшЗначений, пВидКорректировки, пТекущаяСтрокаВладелец)
	
	ОтборСтрокПриход = Новый Структура;
	ОтборСтрокПриход.Вставить("ВидДвижения", пКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	
	пЭлементы.СуммыКорректировокПриход.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрокПриход);
	
	ОтборСтрокРасход = Новый Структура;
	ОтборСтрокРасход.Вставить("ВидДвижения", пКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	//Начало_бит_Магомедов_03.08.2012 
	//Если пВидКорректировки = пКэшЗначений.Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет Тогда
	//	Если ТипЗнч(пТекущаяСтрокаВладелец) = Тип("Число") Тогда
	//		ТекущиеДанные = пОбъект.СуммыКорректировок.НайтиПоИдентификатору(пТекущаяСтрокаВладелец);
	//		Если ТекущиеДанные = Неопределено Тогда
	//			ИДВладельца = "";
	//		Иначе
	//			ИДВладельца = ТекущиеДанные.ИД;
	//		КонецЕсли;
	//	ИначеЕсли пТекущаяСтрокаВладелец = Неопределено Тогда
	//		ИДВладельца = "";
	//	Иначе
	//		ИДВладельца = пТекущаяСтрокаВладелец.ИД;
	//	КонецЕсли;	
	//	ОтборСтрокРасход.Вставить("ИДВладельца", ИДВладельца);
	//КонецЕсли;	
	//Конец_бит_Магомедов_03.08.2012 
	пЭлементы.СуммыКорректировокРасход.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрокРасход);
	
КонецПроцедуры

// бит_DFedotov Процедура настраивает условное оформление формы
//
// Параметры:
//	нет
//
&НаСервере
Процедура НастроитьОформлениеФормы()
	
	// 1c-izhtc spawn 24.08.15 (
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОформления.Использование = Истина;
	
	ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемыеПоля.Использование = Истина;
	ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммаДокументаПриход");
	
	ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемыеПоля.Использование = Истина;
	ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммаДокументаРасход");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;      
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СуммаДокументаПриход");
	ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СуммаДокументаРасход");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОформления.Использование = Истина;
	
	ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемыеПоля.Использование = Истина;
	ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммаДокументаПриход");
	
	ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемыеПоля.Использование = Истина;
	ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммаДокументаРасход");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаФормы);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;      
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СуммаДокументаПриход");
	ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СуммаДокументаРасход");
	// 1c-izhtc spawn 24.08.15 )
	
	РеквизитыСтатьи = ПолучитьРеквизиты("Объект.СуммыКорректировок");
	
	Для Каждого РеквизитСтатьи Из РеквизитыСтатьи Цикл
		
		НайденнаяПозиция = Найти(РеквизитСтатьи.Имя, "СтатьяОборотов_Учет_");
		
		Если НайденнаяПозиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = СтрЗаменить(РеквизитСтатьи.Имя, "СтатьяОборотов_Учет_", "");
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОформления.Использование = Истина;
		
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемыеПоля.Использование = Истина;
		ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммыКорректировокПриход"+ИмяРеквизита);
		
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемыеПоля.Использование = Истина;
		ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммыКорректировокРасход"+ИмяРеквизита);
		
		ЦветРазличийПолей = Новый Цвет(225,225,225);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветРазличийПолей);
		
		 //Начало_бит_Магомедов_10.08.2012 //Все можно
		//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		//Конец_бит_Магомедов_10.08.2012 
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;      
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СуммыКорректировок."+РеквизитСтатьи.Имя);
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
	КонецЦикла;
	
	//+ Сенин С. CR#2670 23.09.2016
	//+Аналитика_1
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемыеПоля.Использование = Истина;
			ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммыКорректировокПриходАналитика_1");
		ОформляемыеПоля = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемыеПоля.Использование = Истина;
			ОформляемыеПоля.Поле 		  = Новый ПолеКомпоновкиДанных("СуммыКорректировокРасходАналитика_1");
			
	СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Справочники.СценарииПланирования.Бюджет_А);
		СписокЗначений.Добавить(Справочники.СценарииПланирования.Бюджет_У);
		СписокЗначений.Добавить(Справочники.СценарииПланирования.Бюджет_Инвест);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;      
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СуммыКорректировок.Сценарий");
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СписокЗначений;
		
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;      
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СуммыКорректировок.Аналитика_1");
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	//-Аналитика_1
	//- Сенин С. CR#2670 23.09.2016
	
КонецПроцедуры

// бит_DFedotov Процедура расширяет состав реквизитов формы
//
// Параметры:
//	нет
//
&НаСервере
Процедура ДобавитьРеквизитыФормы()
	
	МетаСтатьиОборотов = Метаданные.Справочники.бит_СтатьиОборотов;
	
	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("произвольные","синоним");
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	МассивРеквизитов = Новый Массив;
	
	Для Каждого КлючИЗначение Из Измерения Цикл
		
		ИмяРеквизита = "Учет_"+КлючИЗначение.Ключ;
		
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента(ИмяРеквизита,МетаСтатьиОборотов) Тогда  
			
			ТекущаяНастройка = мКэшЗначений.НастройкиИзмерений[КлючИЗначение.Ключ];
			
			Если Найти(ВРег(КлючИЗначение.Ключ), "АНАЛИТИКА") > 0 Тогда
				Если НЕ ТекущаяНастройка = Неопределено Тогда
					НовыйРеквизит = Новый РеквизитФормы("СтатьяОборотов_"+ИмяРеквизита, ОписаниеТипаБулево, "Объект.СуммыКорректировок", ТекущаяНастройка.Синоним);
					
					МассивРеквизитов.Добавить(НовыйРеквизит);
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			НовыйРеквизит = Новый РеквизитФормы("СтатьяОборотов_"+ИмяРеквизита, ОписаниеТипаБулево, "Объект.СуммыКорректировок", КлючИЗначение.Значение);
			
			МассивРеквизитов.Добавить(НовыйРеквизит);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// добавим разрезы по количеству и сумме
	НовыйРеквизит = Новый РеквизитФормы("СтатьяОборотов_Учет_Количество", ОписаниеТипаБулево, "Объект.СуммыКорректировок", "Количество");
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("СтатьяОборотов_Учет_Сумма", ОписаниеТипаБулево, "Объект.СуммыКорректировок", "Сумма");
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	// обновим реквизитный состав формы
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// заполним добавленные реквизиты значениями
	Для Каждого ТекущаяСтрока Из Объект.СуммыКорректировок Цикл
		ИДСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	КонецЦикла;
	
КонецПроцедуры

// бит_DFedotov Функция определяет следует ли заблокировать ключевые реквизиты. Сервер.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   ЗаблокироватьРеквизиты – Булево.
//
&НаКлиентеНаСервереБезКонтекста 
Функция НужноЗаблокироватьКлючевыеЭлементы(пОбъект, пмКэшЗначений)

	флЗаблокироватьЭлементы = Ложь;
	
	Если пОбъект.Проведен 
		Или пмКэшЗначений.ТекущийСтатус = пмКэшЗначений.КорректировкаКонтрольныхЗначений_Утверждена Тогда
		
		флЗаблокироватьЭлементы = Истина;
		
	КонецЕсли; 
	
	Возврат флЗаблокироватьЭлементы;
	
КонецФункции // НужноЗаблокироватьКлючевыеЭлементыСервер()

// бит_DFedotov Процедура применяет настройки доступности и видимости для элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов() Экспорт
	
	// Получение таблицы настроек доступности элементов управления.
	ТаблицаНастроекДоступности = бит_ОбщегоНазначения.ПолучитьНастройкиДоступностиЭлементовУправления(Объект, Истина);
	
	// Фильтр таблицы настроек по статусу.
	ДокументОбъект 			  = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));
	ТекущийСтатус			  = ДокументОбъект.мТекущийСтатус;
	ТаблицаАктуальныхНастроек = бит_ОбщегоНазначения.ПолучитьАктуальныеНастройки(ТаблицаНастроекДоступности
																				,ТекущийСтатус);
	
	// Структура параметров для проверки произвольного условия.
	ПараметрыУсловия = Новый Структура;
	ПараметрыУсловия.Вставить("ТекущийОбъект", Объект);
	ПараметрыУсловия.Вставить("Статус"		 , ТекущийСтатус);
	
	// Применяем настройки.
	бит_ОбщегоНазначения.УстановитьДоступностьЭлементовУправленияПоНастройкам(ЭтаФорма
																			 ,ТаблицаАктуальныхНастроек
																			 ,ПараметрыУсловия);
	
КонецПроцедуры // УстановитьНастройкиДоступностиЭлементов() 

// бит_DFedotov Процедура перезаполняет перечень виз по документу.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ЗаполнитьВизы() Экспорт
	
	СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.Организация);
	//СтруктураПараметров.Вставить("ЦФО"					   , Объект.ЦФО);		
	
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры //ЗаполнитьВизы()

// бит_DFedotov Процедура обрабатывает изменение статьи оборотов
//
// Параметры:
//	ИДСтроки - число - идентификатор строки в которой надо обработать изменение статьи
//
&НаСервере
Процедура ИзменениеСтатьиОборотов(ИДСтроки)
	
	ТекущиеДанные = Объект.СуммыКорректировок.НайтиПоИдентификатору(ИДСтроки);
	
	Если Не ТекущиеДанные.СтатьяОборотов.Учет_Сумма Тогда
		
		ТекущиеДанные.Сумма = 0;
				
	КонецЕсли;
	
	Если Не ТекущиеДанные.СтатьяОборотов.Учет_Количество Тогда
		
		ТекущиеДанные.Количество = 0;
				
	КонецЕсли;
	
	// запомним разрезы бюджетирования используемые в статье оборотов
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", , Строка(ТекущиеДанные.ВидДвижения));
	
КонецПроцедуры

// бит_DFedotov Процедура заполняет программно добавленные реквизиты формы значениями
//
// Параметры:
//	ИДСтроки - число - идентификатор строки
//
&НаСервере
Процедура ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки)
	
	ТекущиеДанные = Объект.СуммыКорректировок.НайтиПоИдентификатору(ИДСтроки);
	
	РеквизитыСтатьи = ПолучитьРеквизиты("Объект.СуммыКорректировок");
	
	Для Каждого РеквизитСтатьи Из РеквизитыСтатьи Цикл
		
		НайденнаяПозиция = Найти(РеквизитСтатьи.Имя, "СтатьяОборотов_Учет_");
		
		Если НайденнаяПозиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаСтатьи = СтрЗаменить(РеквизитСтатьи.Имя, "СтатьяОборотов_", "");
		
		ТекущиеДанные[РеквизитСтатьи.Имя] = ТекущиеДанные.СтатьяОборотов[ИмяРеквизитаСтатьи];
		
	КонецЦикла;
	
КонецПроцедуры

// бит_DFedotov Процедура обрабатывает изменение договора контрагента
//
// Параметры:
//	ИДСтроки - число - идентификатор строки
//
&НаСервере
Процедура ПриИзмененииДоговора(ИДСтроки)
	
	ТекущиеДанные = Объект.СуммыКорректировок.НайтиПоИдентификатору(ИДСтроки);
	
	Если НЕ ТекущиеДанные.Контрагент = ТекущиеДанные.ДоговорКонтрагента.Владелец Тогда
		ТекущиеДанные.Контрагент = ТекущиеДанные.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
КонецПроцедуры

// бит_DFedotov Процедура устанавливает автовидимость колонок
//
// Параметры:
//  ОбновлятьБезусловно - Булево (по умолчанию = Ложь)
//
&НаСервере
Процедура УстановитьАвтовидимостьКолонок(ОбновлятьБезусловно = Ложь)
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", ОбновлятьБезусловно, "Приход"); 
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", ОбновлятьБезусловно, "Расход");
	
КонецПроцедуры // УстановитьАвтовидимостьКолонок()

// бит_DFedotov Процедура устанавливает автовидимость колонок
//
// Параметры:
//  ИмяТабличнойЧасти   - Строка
//  ОбновлятьБезусловно - Булево (по умолчанию = Ложь)
//
&НаСервере
Процедура УстановитьАвтовидимостьКолонокТабличнойЧасти(ИмяТабличнойЧасти, ОбновлятьБезусловно = Ложь, ВидДвижения)
	
	ИмяМассива = "МассивСтатей_" + ИмяТабличнойЧасти;
	
	Если АвтовидимостьКолонок Тогда
		
		СтруктураОтбора = Новый Структура;
		
		СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления[ВидДвижения]);
		
		МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
		
		ТаблРез = Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок);
		МассивСтатей = ТаблРез.ВыгрузитьКолонку("СтатьяОборотов");
		НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(МассивСтатей
																		,мКэшЗначений[ИмяМассива]
																		,мКэшЗначений.НастройкаВидимостиКолонок
																		,мКэшЗначений.НастройкиИзмерений);
		
		Если НеобходимоИзменение Тогда
			
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				,мКэшЗначений.НастройкаВидимостиКолонок
											 				,ИмяТабличнойЧасти+ВидДвижения);
						
		КонецЕсли; 
		
	Иначе
		
		Если ОбновлятьБезусловно Тогда
			
			НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(Новый Массив
																		,мКэшЗначений[ИмяМассива]
																		,мКэшЗначений.НастройкаВидимостиКолонок
																		,мКэшЗначений.НастройкиИзмерений);
																		
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				,мКэшЗначений.НастройкаВидимостиКолонок
											 				,ИмяТабличнойЧасти+ВидДвижения);
		КонецЕсли;

	КонецЕсли; 
	
КонецПроцедуры // УстановитьАвтовидимостьКолонокТабличнойЧасти()

// бит_DFedotov Процедура Устанавливает ид строки табличной части
//
// Параметры:
//  ТекущаяСтрока  – СтрокаТабличнойЧасти
//
&НаКлиенте
Процедура УстановитьИДСтроки(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.ИД = Строка(Новый УникальныйИдентификатор());

КонецПроцедуры //УстановитьИДСтроки()

// бит_DFedotov Процедура подсчитывает итоги по табличным частям
//
&НаКлиенте
Процедура ОбновитьИтоги()
	
	// приход
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	
	СтрокиПриход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	пСуммаФакт  = 0;
	пКоличество = 0;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-29 (#3149)
	пСуммаПриходСНДС = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-29 (#3149)
	
	Для Каждого СтрокаПриход Из СтрокиПриход Цикл
		пСумма 		= пСумма + СтрокаПриход.Сумма;
		пСуммаФакт  = пСуммаФакт + СтрокаПриход.СуммаИсполнения;
		пКоличество = пКоличество + СтрокаПриход.Количество;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-29 (#3149)
		пСуммаПриходСНДС 		= пСуммаПриходСНДС + СтрокаПриход.СуммаСНДС;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-29 (#3149)
		
	КонецЦикла;
	
	мСуммаПриход 	 	 = пСумма;
	мСуммаПриходФакт 	 = пСуммаФакт;
	мКоличествоПриход 	 = пКоличество;
	СуммаДокументаПриход = мСуммаПриход;
	СуммаДокументаПриходФакт = мСуммаПриходФакт;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-29 (#3149)
	мСуммаПриходСНДС = пСуммаПриходСНДС;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-29 (#3149)
	
	// расход
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	
	СтрокиРасход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	пСуммаФакт  = 0;
	пКоличество = 0;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-29 (#3149)
	пСуммаРасходСНДС = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-29 (#3149)
	
	Для Каждого СтрокаРасход Из СтрокиРасход Цикл
		пСумма 		= пСумма + СтрокаРасход.Сумма;
		пСуммаФакт  = пСуммаФакт + СтрокаРасход.СуммаИсполнения;
		пКоличество = пКоличество + СтрокаРасход.Количество;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-29 (#3149)
		пСуммаРасходСНДС 		= пСуммаРасходСНДС + СтрокаРасход.СуммаСНДС;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-29 (#3149)
		
	КонецЦикла;
	
	мСуммаРасход 	  = пСумма;
	мСуммаРасходФакт  = пСуммаФакт;
	мКоличествоРасход = пКоличество;
	СуммаДокументаРасход = пСумма;             
	СуммаДокументаРасходФакт = мСуммаРасходФакт;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-29 (#3149)
	мСуммаРасходСНДС = пСуммаРасходСНДС;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-29 (#3149)	
	
	//1c-izhtc spawn 24.08.15 (
	// перенес в УО
	////Начало_бит_Магомедов_12.07.2012 
	//Если СуммаДокументаПриход <> СуммаДокументаРасход Тогда
	//	Элементы.СуммаДокументаПриход.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	//	Элементы.СуммаДокументаРасход.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	//Иначе 
	//	Элементы.СуммаДокументаПриход.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	//	Элементы.СуммаДокументаРасход.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	//КонецЕсли;
	//1c-izhtc spawn 24.08.15 )
	//Начало_бит_Магомедов_17.07.2012 
	//Пересчет НДС в строках
	ПересчитатьНДСвСтроках();
	//Конец_бит_Магомедов_12.07.2012 
КонецПроцедуры

&НаСервере
Процедура ПоказатьВалютуСценария()
	
	Элементы.СуммаДокументаПриход.Заголовок = "Увеличение ("+Объект.Сценарий.Валюта+")";
	Элементы.СуммаДокументаРасход.Заголовок = "Уменьшение ("+Объект.Сценарий.Валюта+")";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С НАСТРОЙКАМИ

// бит_DFedotov Процедура сохраняет настройки формы в хранилища общих настроек
//
&НаСервере
Процедура СохранитьНастройки() 
	
	Настройки = Новый Структура;
	Настройки.Вставить("АвтовидимостьКолонок", АвтовидимостьКолонок);
	
	ХранилищеОбщихНастроек.Сохранить("Документ.бит_КорректировкаКонтрольныхЗначений", "Настройки", Настройки);	
	
КонецПроцедуры // СохранитьНастройки()

// бит_DFedotov Процедура восстанавливает настройки формы из хранилища общих настроек
//
&НаСервере
Процедура ВосстановитьНастройки() 
	
	ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить("Документ.бит_КорректировкаКонтрольныхЗначений", "Настройки");
	
	Если ЗначениеЗаполнено(ЗначениеНастроек) И ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗначениеНастроек.Свойство("АвтовидимостьКолонок", АвтовидимостьКолонок);		
	
	КонецЕсли;                                                	
	
КонецПроцедуры // СохранитьНастройки()

////////////////////////////////////////////////////////
//	Процедуры и фунции для переноса в общие модули

// бит_DFedotov 
&НаКлиенте
Процедура ВыбратьВидОперации(ДокументОбъект, СтруктураВидовОпераций, Отказ, МассивИсключений = Неопределено) Экспорт
		
	//Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) 
	//	И бит_УправлениеПользователямиСервер.ПолучитьЗначениеТиповойНастройкиПользователя("ЗапрашиватьВидОперацииПриВводеНового") Тогда
	//	
	//	Если ТипЗнч(МассивИсключений) <> Тип("Массив") Тогда
	//		МассивИсключений = Новый Массив;
	//	КонецЕсли;
	//	
	//	СписокВидов = Новый СписокЗначений();
	//	Для каждого ЭлементЗаполнения из СтруктураВидовОпераций Цикл
	//		Если МассивИсключений.Найти(ЭлементЗаполнения.Ключ) = Неопределено Тогда
	//			СписокВидов.Добавить(ЭлементЗаполнения.Значение, Строка(ЭлементЗаполнения.Значение));
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Вид = СписокВидов.ВыбратьЭлемент("Выбор вида операции документа");
	//	
	//	Если НЕ Вид = Неопределено Тогда
	//		ДокументОбъект.ВидОперации = Вид.Значение;
	//	Иначе
	//		Отказ = Истина;
	//	Конецесли;

	//КонецЕсли;
	
КонецПроцедуры

// бит_DFedotov Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//  МассивИсключений              - значения элементов коллекции ОбъектЗаполнения, которые не должны добавляться
//
Процедура УстановитьПодменюВыбораВидаОперации(УправляемаяФорма, ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации, МассивИсключений = Неопределено) Экспорт
	
	Если ТипЗнч(МассивИсключений) <> Тип("Массив") Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		
		Если МассивИсключений.Найти(ЭлементЗаполнения.Имя) = Неопределено Тогда
			
			ИмяКнопки = ЭлементМеню.Имя+"_"+ЭлементЗаполнения.Имя;
			
			Кнопка = УправляемаяФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭлементМеню);
			
			ИмяКоманды = "Команда_" + ИмяКнопки;
			
			// Добавляем новую команду обработки выбора вида операции.
			КомандаУстановитьОперацию = УправляемаяФорма.Команды.Добавить(ИмяКоманды);
			КомандаУстановитьОперацию.Действие = ОбъектОбработкиВыбораОперации;
			
			Кнопка.Вид		  = ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.Заголовок  = ЭлементЗаполнения.Синоним;
			
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

//Начало_бит_Магомедов_16.07.2012 

&НаКлиенте
Процедура ПересчитатьНДСвСтроках()
	
	Для Каждого ТекСтрока Из Объект.СуммыКорректировок Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда 
			ТекСтрока.СтавкаНДС = мКэшЗначений.Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-11 (#3078)		
		//ТекСтрока.НДС = бит_БК_ОбщийКлиент.РассчитатьСуммуНДС(ТекСтрока.Сумма, Истина, Ложь, мКэшЗначений.ЗначенияСтавокНДС[ТекСтрока.СтавкаНДС]);
		//Заменено на:
		ТекСтрока.СуммаНДС = бит_БК_ОбщийКлиент.РассчитатьСуммуНДС(ТекСтрока.Сумма, Истина, Ложь, мКэшЗначений.ЗначенияСтавокНДС[ТекСтрока.СтавкаНДС]);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-11 (#3078)
	КонецЦикла;
	
КонецПроцедуры

//Конец_бит_Магомедов_16.07.2012 


//ОК Калинин М. 250613
&НаСервере
Процедура КонтекстноеМенюЗаполнитьКолонкуНаСервере(ТекущаяСтрока)
	строкаФормы=объект.СуммыКорректировок.НайтиПоИдентификатору(ТекущаяСтрока);
	ПутьКДанным=этаформа.ТекущийЭлемент.ТекущийЭлемент.ПутьКДанным;
	КолонкаИмя=СтрЗаменить(ПутьКДанным, "Объект.СуммыКорректировок.", "");
	ДокументОбъект = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета"));		
	ДокументОбъект.ЗаполнитьКолонку(новый  Структура("ВидДвижения,КолонкаИмя,НомерСтрокиИсточника",строкаФормы.ВидДвижения,КолонкаИмя,строкаФормы.НомерСтроки-1));
	ЗначениеВДанныеФормы(ДокументОбъект,Объект); 
	Модифицированность=истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюЗаполнитьКолонку()
	
	КонтекстноеМенюЗаполнитьКолонкуНаСервере(Этаформа.ТекущийЭлемент.ТекущаяСтрока); 	
	//+Сундукова 31.03.2016 чтобы суммы и НДС тоже пересчитывались при заполнении ставки НДС
	ОбновитьИтоги();	
	//-Сундукова 31.03.2016
КонецПроцедуры
//ОК Калинин М.

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры


&НаКлиенте
Процедура ДокументОснованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение)
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИзменениеДокументаОснование", ЭтотОбъект, ВыбранноеЗначение); 
	ТекстВопроса = НСтр("ru = 'Документ будет перезаполнен на основании данных выбранного документа-основания. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте 
Процедура ИзменениеДокументаОснование(Ответ, ДополнительныеДанные) Экспорт
	
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДокументОснование = ДополнительныеДанные;
		
		ДокументОснование = ДополнительныеДанные;
		
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-07 (#2841)
		Если Объект.СуммыКорректировок.Количество() > 0 Тогда
			Объект.СуммыКорректировок.Очистить();	
		КонецЕсли;	
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-07 (#2841)
	
		ПриИзмененииДокументаОснования();
		
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-08 (#2841)
		ОбновитьИтогиБезПересчетаНДС();
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-08 (#2841)
		
	Иначе
			
		
		
	КонецЕсли; 
                
КонецПроцедуры // ИзменениеДокументаОснование

&НаСервере
Процедура ПриИзмененииДокументаОснования()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		УправлениеЭлементамиФормы();
		
		Возврат;
	КонецЕсли;
	
	//+ Сенин С. CR#2362 26.07.2016
	//ДанныеЗаполнения = Новый Структура;
	//ДанныеЗаполнения.Вставить("ДокОснование", Объект.ДокументОснование);
	//
	//ТЗСтрок = ВвестиНаОснованииНаСервере();
	//
	//ДанныеЗаполнения.Вставить("МассивСтрокПревышения", ТЗСтрок);
	//ДанныеЗаполнения.Вставить("ВыборСуммы", "Полностью");
	//ДанныеЗаполнения.Вставить("Дата", ТекущаяДата());
	//ДанныеЗаполнения.Вставить("ДокОснование", Объект.ДокументОснование);
	ДанныеЗаполнения = Объект.ДокументОснование;
	//- Сенин С. CR#2362 26.07.2016

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-08 (#2841)
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("ВводОснованияИзФормыДокумента");		
	КонецЕсли;	
	//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-08 (#2841)
	
	// вызовем стандартную процедуру заполнения документа
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
	УправлениеЭлементамиФормы();
	
КонецПроцедуры


&НаСервере
Функция ВвестиНаОснованииНаСервере()
		
	ТЗСтрок = Объект.ДокументОснование.БДДС.Выгрузить();
	Если Объект.ДокументОснование.Сценарий = Справочники.СценарииПланирования.Заявка_Инвест ИЛИ Объект.ДокументОснование.Сценарий = Справочники.СценарииПланирования.Заявка_У Тогда 
		ТЗСтрок.ЗаполнитьЗначения(Документы.бит_ФормаВводаБюджета.ПустаяСсылка(),"Аналитика_1");
	ИначеЕсли Объект.ДокументОснование.Сценарий = Справочники.СценарииПланирования.Контракт_Инвест Тогда  
		ТЗСтрок.ЗаполнитьЗначения(Объект.бит_БК_НомерЗаявки,"Аналитика_1");
	КонецЕсли;	
	
	Возврат ПоместитьВоВременноеХранилище(ТЗСтрок, УникальныйИдентификатор);
КонецФункции
//ОК-

&НаКлиенте
Процедура СуммыКорректировокПриходПриИзменении(Элемент)

	//- Сенин С. CR#2670 23.09.2016
	ТекущиеДанные = Элементы["СуммыКорректировокПриход"].ТекущиеДанные;	
	СуммыКорректировокПриИзменении(ТекущиеДанные);
	//- Сенин С. CR#2670 23.09.2016
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходПриИзменении(Элемент)
	
	//+ Сенин С. CR#2670 23.09.2016
	ТекущиеДанные = Элементы["СуммыКорректировокРасход"].ТекущиеДанные;	
	СуммыКорректировокПриИзменении(ТекущиеДанные);
	//- Сенин С. CR#2670 23.09.2016
	
КонецПроцедуры

//+ Сенин С. CR#2670 23.09.2016
//
&НаКлиенте
Процедура СуммыКорректировокПриИзменении(ТекущиеДанные)
			
	Если ТекущиеДанные<>Неопределено и мСписокСценариев.Найти(ТекущиеДанные.Сценарий)<>Неопределено Тогда
		ТекущиеДанные.Аналитика_1 = Неопределено;
	КонецЕсли;

КонецПроцедуры


//ОК+ Аверьянова 27.09.16 Омни #AT-1454891# 
// заменяет процедуру обновления итогов, т.к. возникает ошибка при открытии при пересчете НДС в форме
//непонятно, зачем идет пересчет при открытии 
&НаКлиенте
Процедура ОбновитьИтогиБезПересчетаНДС()
	
	// приход
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	
	СтрокиПриход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	пСуммаФакт  = 0;
	пКоличество = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
	пСуммаПриходСНДС = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	
	Для Каждого СтрокаПриход Из СтрокиПриход Цикл
		пСумма 		= пСумма + СтрокаПриход.Сумма;
		пСуммаФакт  = пСуммаФакт + СтрокаПриход.СуммаИсполнения;
		пКоличество = пКоличество + СтрокаПриход.Количество;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
		пСуммаПриходСНДС 		= пСуммаПриходСНДС + СтрокаПриход.СуммаСНДС;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	КонецЦикла;
	
	мСуммаПриход 	 	 = пСумма;
	мСуммаПриходФакт 	 = пСуммаФакт;
	мКоличествоПриход 	 = пКоличество;
	СуммаДокументаПриход = мСуммаПриход;
	СуммаДокументаПриходФакт = мСуммаПриходФакт;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
	мСуммаПриходСНДС = пСуммаПриходСНДС;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	
	// расход
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	
	СтрокиРасход = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	пСумма 		= 0;
	пСуммаФакт  = 0;
	пКоличество = 0;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
	пСуммаРасходСНДС = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	
	Для Каждого СтрокаРасход Из СтрокиРасход Цикл
		пСумма 		= пСумма + СтрокаРасход.Сумма;
		пСуммаФакт  = пСуммаФакт + СтрокаРасход.СуммаИсполнения;
		пКоличество = пКоличество + СтрокаРасход.Количество;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
		пСуммаРасходСНДС 		= пСуммаРасходСНДС + СтрокаРасход.СуммаСНДС;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	КонецЦикла;
	
	мСуммаРасход 	  = пСумма;
	мСуммаРасходФакт  = пСуммаФакт;
	мКоличествоРасход = пКоличество;
	СуммаДокументаРасход = пСумма;             
	СуммаДокументаРасходФакт = мСуммаРасходФакт;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-29 (#3774)
	мСуммаРасходСНДС = пСуммаРасходСНДС;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-29 (#3774)
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-21 (#3393)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
	   И мКэшЗначений.ПроцессСогласованияЗапущен
	   И Не ПараметрыЗаписи.Свойство("ОтветОбОчисткеПолучен")
	Тогда 
	
		Отказ = Истина;	    
		ОписаниеОтветНаВопросОбОчисткеМаршрута = Новый ОписаниеОповещения("ОтветНаВопросОбОчисткеМаршрута", ЭтотОбъект, ПараметрыЗаписи);
		ПоказатьВопрос(ОписаниеОтветНаВопросОбОчисткеМаршрута, НСтр("ru = 'После отмены проведения будет очищен алгоритм. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	    Возврат;
	КонецЕсли;
	ПараметрыЗаписи.Удалить("ОтветОбОчисткеПолучен");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-21 (#3393)
	
	//{ bit SVKushnirenko Bit 27.01.2017 #2657
	пМассивОбновления = ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(Объект.Ссылка);
	рекМассивДокументовОповещенияДляИзмененияСтатуса.ЗагрузитьЗначения(пМассивОбновления);
	//} bit SVKushnirenko Bit 27.01.2017 #2657
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-21 (#3393)
&НаКлиенте
Процедура ОтветНаВопросОбОчисткеМаршрута(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ДопПараметры.Вставить("ОтветОбОчисткеПолучен");
	Записать(ДопПараметры);                           		
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-21 (#3393)

//bit_SVKushnirenko 27.01.2017 #2657
//Прокладка для вызова серверного метода из клиента на форме
// Параметры:
//парСсылка - ссылка на текущий документ
&НаСервереБезКонтекста
Функция ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(парСсылка)

	Возврат бит_БК_Общий.ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(парСсылка);
КонецФункции // ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях()
//bit_SVKushnirenko 27.01.2017 #2657

//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-08 (#2841)
&НаКлиенте
Процедура ОКЕЙ_КомандаСкопироватьВсе(Команда)
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		Отказ = Ложь;
		
		ПроверитьУникальностьСтроки(Элементы.СуммыКорректировокРасход, ТекущаяСтрока, "Расход", Отказ, Ложь);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		// добавим строку в таблицу
		НоваяСтрока = Объект.СуммыКорректировок.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		УстановитьИДСтроки(НоваяСтрока);
		
		НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
		НоваяСтрока.ИДВладельца = "";
		
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
		ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
		ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
		СуммыКорректировокПриИзменении(НоваяСтрока);
				
	КонецЦикла;
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", , "Расход");
	
	ОбновитьИтогиБезПересчетаНДС();
		
КонецПроцедуры

&НаКлиенте
Процедура ОКЕЙ_КомандаСкопироватьТекущуюСтроку(Команда)
	
	ТекущиеДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьУникальностьСтроки(Элементы.СуммыКорректировокРасход, ТекущиеДанные, "Расход", Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// добавим строку в таблицу
	НоваяСтрока = Объект.СуммыКорректировок.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	
	УстановитьИДСтроки(НоваяСтрока);
	
	НоваяСтрока.ВидДвижения = мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход;
	НоваяСтрока.ИДВладельца = "";
	
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
																		   
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗапомнитьИспользуемыеРазрезыСтатьиОборотов(ИДСтроки);
	
	УстановитьАвтовидимостьКолонокТабличнойЧасти("СуммыКорректировок", , "Расход");
	
	СуммыКорректировокПриИзменении(НоваяСтрока);
	
	ОбновитьИтогиБезПересчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОКЕЙ_ИнвертироватьУвеличение(Команда)
	
	ИнвертироватьСуммыТабличнойЧасти(мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Приход);
	ОбновитьИтогиБезПересчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОКЕЙ_ИнвертироватьУменьшение(Команда)
	
	ИнвертироватьСуммыТабличнойЧасти(мКэшЗначений.Перечисления.бит_ВидДвиженияНакопления.Расход);
	ОбновитьИтогиБезПересчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьСуммыТабличнойЧасти(ВидДвиженияТЧ)

	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДвижения", ВидДвиженияТЧ);
	
	МассивСтрок = Объект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		ПромежуточнаяСумма 				= ТекущаяСтрока.Сумма;
		ТекущаяСтрока.Сумма 			= ТекущаяСтрока.СуммаИсполнения;
		ТекущаяСтрока.СуммаИсполнения   = ПромежуточнаяСумма;
		
	КонецЦикла;	

КонецПроцедуры


//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-08 (#2841)
	
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-03 (#3078)
&НаКлиенте
Процедура СуммыКорректировокПриходСуммаПриИзменении(Элемент)
	
	ТекДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокПриходСтавкаНДСПриИзменении(Элемент)
	
	ТекДанные = Элементы.СуммыКорректировокПриход.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходСуммаПриИзменении(Элемент)
	
	ТекДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыКорректировокРасходСтавкаНДСПриИзменении(Элемент)
			
	ТекДанные = Элементы.СуммыКорректировокРасход.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные, Истина);
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-03 (#3078)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-23 (#3393)
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПрикрепленныеФайлы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ТекстВопроса = НСтр("ru='Документ не записан. Записать?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьДокументИОткрытьФормуПрикрепленныхФайловПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		Возврат;
	КонецЕсли;
	
	ОткрытьФормуУправленияПрикрепленнымиФайлами();	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУправленияПрикрепленнымиФайлами()
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объект", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПоказыватьОбъект", Ложь);
	
	Форма = ПолучитьФорму("Обработка.бит_ПрикреплениеФайлов.Форма.ФормаУправляемая", ПараметрыОткрытия, ЭтаФорма, Объект.Ссылка);
	Форма.Объект.Объект = Объект.Ссылка;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументИОткрытьФормуПрикрепленныхФайловПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Если Не Записать(ПараметрыЗаписи) Тогда 
		Возврат;
	КонецЕсли;
	
	
	ОткрытьФормуУправленияПрикрепленнымиФайлами();

КонецПроцедуры



//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-23 (#3393)
