#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Подсчитаем и запишем сумму документа.
	СуммаДокумента = ДанныеНачисления.Итог("СуммаПроцентовПоЭСП");
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);	
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура заполняет табличную часть "ДанныеНачисления".
// 
// Параметры:
//  СписокИндексов - Массив.
// 
Процедура ЗаполнитьТчДанныеНачисления(СписокИндексов = Неопределено) Экспорт
	
	// Сформируем список договоров
	СписокДоговоров = Неопределено;
	Если СписокИндексов <> Неопределено Тогда 		
		СписокДоговоров = Новый Массив;
		Для каждого ТекСтр Из СписокИндексов Цикл
			СтрокаТЧ = ДанныеНачисления[ТекСтр];
			СписокДоговоров.Добавить(СтрокаТЧ.ДоговорКонтрагента);
		КонецЦикла;		
	КонецЕсли;
	
	// Сформируем список колонок для очистки
	ТабЗнач = ДанныеНачисления.Выгрузить();
	Колонки = Новый Массив;
	Для каждого ТекСтр Из ТабЗнач.Колонки Цикл
		Если (ТекСтр.Имя <> "Контрагент") И (ТекСтр.Имя <> "ДоговорКонтрагента") 
			И (ТекСтр.Имя <> "НомерСтроки") И (ТекСтр.Имя <> "ИсходныйНомерСтроки") Тогда
			Колонки.Добавить(ТекСтр.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Выборка = ПолучитьВыборкуДляЗаполненияДокумента(СписокДоговоров);

	Если СписокИндексов = Неопределено Тогда
		
		// Заполним ТЧ
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДанныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);			
			ЗаполнитьСчетРасходовИзСпособаОтраженияРасходов(НоваяСтрока);
		КонецЦикла;
		
	Иначе
		
		Для каждого ТекСтр Из СписокИндексов Цикл
			
			СтрокаТЧ = ДанныеНачисления[ТекСтр];
			
			// Очистим данные в строке ТЧ
			Для каждого ТекКолонка Из Колонки Цикл
				СтрокаТЧ[ТекКолонка] = Неопределено;
			КонецЦикла;
			
			// Найдем данные в выборке и заполним строку ТЧ.
			СтуктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента");
			СтуктураПоиска.Контрагент 			= СтрокаТЧ.Контрагент;
			СтуктураПоиска.ДоговорКонтрагента	= СтрокаТЧ.ДоговорКонтрагента;
			
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(СтуктураПоиска) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);				
				ЗаполнитьСчетРасходовИзСпособаОтраженияРасходов(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТчДанныеНачисления()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, Организация, ВидОперации
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	// Получим валюту международного учета.
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	ИзменениеВалютыМодуль();
	
	// Заполняет табличную часть "ДанныеНачисления"
	ЗаполнитьТчДанныеНачисления();	

КонецПроцедуры // ЗаполнитьДокумент()

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЧасть.НомерСтроки,
	               |	ТабЧасть.Контрагент,
	               |	ТабЧасть.ДоговорКонтрагента,
	               |	ТабЧасть.СуммаПроцентовПоЭСП,
	               |	ТабЧасть.СуммаПроцентовПоНоминальнойСтавке,
	               |	ТабЧасть.АмортизацияРезерва,
	               |	ТабЧасть.СчетРезерва,
	               |	ТабЧасть.СчетКраткосрочныхПроцентов,
	               |	ТабЧасть.СчетРасходов,
	               |	ТабЧасть.СчетДолгосрочныхОбязательств,
	               |	ТабЧасть.СубконтоРасходов1,
	               |	ТабЧасть.СубконтоРасходов2,
	               |	ТабЧасть.СубконтоРасходов3,
	               |	ТабЧасть.СубконтоРасходов4,
	               |	ТабЧасть.СчетДоходов,
	               |	ТабЧасть.СубконтоДоходов1,
	               |	ТабЧасть.СубконтоДоходов2,
	               |	ТабЧасть.СубконтоДоходов3,
	               |	ТабЧасть.СубконтоДоходов4,
	               |	ТабЧасть.ВидКредитаЗайма,
	               |	ЕСТЬNULL(бит_Дополнительный_2Остатки.СуммаМУОстатокДт, 0) КАК СуммаМУОстатокДт,
	               |	ЕСТЬNULL(бит_Дополнительный_2Остатки.СуммаМУОстатокКт, 0) КАК СуммаМУОстатокКт,
	               |	ТабЧасть.СпособОтраженияРасходов,
	               |	ТабЧасть.СпособОтраженияДисконта,
	               |	ТабЧасть.ВалютаВзаиморасчетов,
	               |	ТабЧасть.СуммаПроцентовПоЭСПВзаиморасчеты,
	               |	ТабЧасть.СуммаПроцентовПоНоминальнойСтавкеВзаиморасчеты,
	               |	ТабЧасть.АмортизацияРезерваВзаиморасчеты
	               |ИЗ
	               |	Документ.бит_му_НачислениеПроцентовПоФинИнструментам.ДанныеНачисления КАК ТабЧасть
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&ДатаКон,
	               |				Счет В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						ТабЧасть.СчетРезерва
	               |					ИЗ
	               |						Документ.бит_му_НачислениеПроцентовПоФинИнструментам.ДанныеНачисления КАК ТабЧасть),
	               |				,
	               |				Организация = &Организация) КАК бит_Дополнительный_2Остатки
	               |		ПО ТабЧасть.СчетРезерва = бит_Дополнительный_2Остатки.Счет
	               |			И (ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(бит_Дополнительный_2Остатки.Субконто1) = ТИП(Справочник.ДоговорыКонтрагентов)
	               |					ТОГДА ТабЧасть.ДоговорКонтрагента = бит_Дополнительный_2Остатки.Субконто1
	               |				КОГДА ТИПЗНАЧЕНИЯ(бит_Дополнительный_2Остатки.Субконто2) = ТИП(Справочник.ДоговорыКонтрагентов)
	               |					ТОГДА ТабЧасть.ДоговорКонтрагента = бит_Дополнительный_2Остатки.Субконто2
	               |				КОГДА ТИПЗНАЧЕНИЯ(бит_Дополнительный_2Остатки.Субконто3) = ТИП(Справочник.ДоговорыКонтрагентов)
	               |					ТОГДА ТабЧасть.ДоговорКонтрагента = бит_Дополнительный_2Остатки.Субконто3
	               |				КОГДА ТИПЗНАЧЕНИЯ(бит_Дополнительный_2Остатки.Субконто4) = ТИП(Справочник.ДоговорыКонтрагентов)
	               |					ТОГДА ТабЧасть.ДоговорКонтрагента = бит_Дополнительный_2Остатки.Субконто4
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА ТИПЗНАЧЕНИЯ(бит_Дополнительный_2Остатки.Субконто1) = ТИП(Справочник.Контрагенты)
	               |					ТОГДА ТабЧасть.Контрагент = бит_Дополнительный_2Остатки.Субконто1
	               |				КОГДА ТИПЗНАЧЕНИЯ(бит_Дополнительный_2Остатки.Субконто2) = ТИП(Справочник.Контрагенты)
	               |					ТОГДА ТабЧасть.Контрагент = бит_Дополнительный_2Остатки.Субконто2
	               |				КОГДА ТИПЗНАЧЕНИЯ(бит_Дополнительный_2Остатки.Субконто3) = ТИП(Справочник.Контрагенты)
	               |					ТОГДА ТабЧасть.Контрагент = бит_Дополнительный_2Остатки.Субконто3
	               |				КОГДА ТИПЗНАЧЕНИЯ(бит_Дополнительный_2Остатки.Субконто4) = ТИП(Справочник.Контрагенты)
	               |					ТОГДА ТабЧасть.Контрагент = бит_Дополнительный_2Остатки.Субконто4
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |ГДЕ
	               |	ТабЧасть.Ссылка = &Ссылка";
				   
	// На счете резерва может отсутствовать субконто ДоговорКонтрагента, 
	// 	в этом случае остатки надо брать только в разрезе контрагентов - поэтому отказались от массива субконто
	// 	условие реализовано в запросе
	// МассивСубконто = Новый Массив;
	// МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты);
	// МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ДоговорыКонтрагентов);
				  
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	Запрос.УстановитьПараметр("ДатаКон", 		СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
	// Запрос.УстановитьПараметр("МассивСубконто",	МассивСубконто);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоДанныеНачисления = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДанныеНачисления", ТаблицаПоДанныеНачисления);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
		//ВидОперации = Неопределено;
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Функция проверяет заполнение реквизита в табличной части.
// 
// Параметры:
//  ЗначениеРеквизита 		- Любой тип.
//  ПредставлениеРеквизита 	- Строка.
// 	СтрокаТаблицы 			- Строка таблицы значений.
//  Отказ 					- Булево.
// 
// Возвращаемое значение:
// 	Результат 				- Булево
// 
Функция ПроверитьЗаполнениеРеквизита(ЗначениеРеквизита, ПредставлениеРеквизита, СтрокаТаблицы, Отказ)

	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		МетаданныеРеквизиты 	= Метаданные().ТабличныеЧасти.ДанныеНачисления.Реквизиты;
		ПредставлениеРеквизита 	= МетаданныеРеквизиты[ПредставлениеРеквизита].Представление();

		СтрокаСообщения = НСтр("ru = 'Строка номер %1%: Не заполнено значение реквизита ""%2%"".'");
		СтрокаСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(СтрокаСообщения, СокрЛП(СтрокаТаблицы.НомерСтроки), ПредставлениеРеквизита);
		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(СтрокаСообщения, ЭтотОбъект, , Отказ);
		
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПроверитьЗаполнениеРеквизита() 

// Функция возвращает выборку для заполнения табличной части.
// 
// Параметры:
//  СписокДоговоров - Массив.
// 
// Возвращаемое значение:
// 	Выборка - Выборка из результата запроса.
// 
Функция ПолучитьВыборкуДляЗаполненияДокумента(СписокДоговоров = Неопределено)

	// Адаптация для ERP. Начало. 20.03.2014{{
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("РасчетыВУсловныхЕдиницах") <> Неопределено Тогда
		мРасчетыВУсловныхЕдиницах = "РасчетыВУсловныхЕдиницах";
	Иначе
		мРасчетыВУсловныхЕдиницах = "ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте)";
	КонецЕсли; 
	// Адаптация для ERP. Конец. 20.03.2014}}

	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Валюты.Ссылка КАК Валюта,
	               |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК Курс,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	               |	КОНЕЦ КАК Кратность
	               |ПОМЕСТИТЬ КурсыВалютСрезПоследних
	               |ИЗ
	               |	Справочник.Валюты КАК Валюты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок, ) КАК КурсыВалютСрезПоследних
	               |		ПО Валюты.Ссылка = КурсыВалютСрезПоследних.Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_му_ФинансовыеНачисленияОбороты.Контрагент,
	               |	бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента,
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента)
	               |				ТОГДА бит_му_ФинансовыеНачисленияОбороты.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаПроцентовПоНоминальнойСтавкеВзаиморасчеты,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра КАК ВидКредитаЗайма,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних1.ЗначениеПараметра КАК СчетРезерва,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних2.ЗначениеПараметра КАК СчетКраткосрочныхПроцентов,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних3.ЗначениеПараметра КАК СпособОтраженияРасходов,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних4.ЗначениеПараметра КАК СпособОтраженияДисконта,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних5.ЗначениеПараметра КАК СчетДолгосрочныхОбязательств,				   				   
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента)
	               |				ТОГДА бит_му_ФинансовыеНачисленияОбороты.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаПроцентовПоЭСПВзаиморасчеты,
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента)
	               |				ТОГДА бит_му_ФинансовыеНачисленияОбороты.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот
	               |			ИНАЧЕ 0
	               |		КОНЕЦ - ВЫБОР
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента)
	               |				ТОГДА бит_му_ФинансовыеНачисленияОбороты.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК АмортизацияРезерваВзаиморасчеты,
	               |	КурсыВалютСрезПоследних.Валюта КАК ВалютаВзаиморасчетов,
	               |	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
	               |	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента)
	               |				ТОГДА бит_му_ФинансовыеНачисленияОбороты.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаПроцентовПоНоминальнойСтавке,
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента)
	               |				ТОГДА бит_му_ФинансовыеНачисленияОбороты.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаПроцентовПоЭСП,
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента)
	               |				ТОГДА бит_му_ФинансовыеНачисленияОбороты.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент
	               |			ИНАЧЕ 0
	               |		КОНЕЦ - ВЫБОР
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента)
	               |				ТОГДА бит_му_ФинансовыеНачисленияОбороты.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК АмортизацияРезерва
	               |ИЗ
	               |	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Месяц,
	               |			Организация = &Организация
	               |				И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности
				   |" + ?(НЕ ЗначениеЗаполнено(СписокДоговоров), "", "
				   |				И ДоговорКонтрагента В (&СписокДоговоров)") + "
				   |) КАК бит_му_ФинансовыеНачисленияОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&ДатаКон, Параметр = &ВидКредитаЗайма) КАК бит_му_ПараметрыФинИнструментовСрезПоследних
	               |		ПО бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних.ДоговорКонтрагента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&ДатаКон, Параметр = &СчетРезерва) КАК бит_му_ПараметрыФинИнструментовСрезПоследних1
	               |		ПО бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних1.ДоговорКонтрагента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&ДатаКон, Параметр = &СчетКраткосрочныхПроцентов) КАК бит_му_ПараметрыФинИнструментовСрезПоследних2
	               |		ПО бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних2.ДоговорКонтрагента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&ДатаКон, Параметр = &СпособОтраженияРасходов) КАК бит_му_ПараметрыФинИнструментовСрезПоследних3
	               |		ПО бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних3.ДоговорКонтрагента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&ДатаКон, Параметр = &СпособОтраженияДисконта) КАК бит_му_ПараметрыФинИнструментовСрезПоследних4
	               |		ПО бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних4.ДоговорКонтрагента	
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&ДатаКон, Параметр = &СчетДолгосрочныхОбязательств) КАК бит_му_ПараметрыФинИнструментовСрезПоследних5
	               |		ПО бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних5.ДоговорКонтрагента				   				   
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютСрезПоследних КАК КурсыВалютСрезПоследних
	               |		ПО (ВЫБОР
				   // Адаптация для ERP. Начало. 20.03.2014{{
				   |				КОГДА бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента."+мРасчетыВУсловныхЕдиницах+"
				   // Адаптация для ERP. Конец. 20.03.2014}}
	               |					ТОГДА &ВалютаРеглУчета = КурсыВалютСрезПоследних.Валюта
	               |				ИНАЧЕ бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_ФинансовыеНачисленияОбороты.Контрагент,
	               |	бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних1.ЗначениеПараметра,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних2.ЗначениеПараметра,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних3.ЗначениеПараметра,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних4.ЗначениеПараметра,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних5.ЗначениеПараметра,
	               |	КурсыВалютСрезПоследних.Валюта,
	               |	КурсыВалютСрезПоследних.Курс,
	               |	КурсыВалютСрезПоследних.Кратность
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КурсыВалютСрезПоследних";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ВидыПараметров = ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов;
	
	Запрос.УстановитьПараметр("ДатаНач", 					НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаКон", 					КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаДок", 					Дата);
	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",			Константы.ВалютаРегламентированногоУчета.Получить());
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам;
	ВидыИсточниковЗадолженности = Перечисления.бит_му_ВидыИсточниковЗадолженности;
												   
	Если ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности", 	ВидыИсточниковЗадолженности.ДебиторскаяЗадолженность);
		Запрос.УстановитьПараметр("СчетКраткосрочныхПроцентов", ВидыПараметров.СчетДолгосрочныхОбязательств);

	ИначеЕсли ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности", 	ВидыИсточниковЗадолженности.КредиторскаяЗадолженность);
		Запрос.УстановитьПараметр("СчетКраткосрочныхПроцентов", ВидыПараметров.СчетДолгосрочныхОбязательств);
		
	ИначеЕсли ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности", 	ВидыИсточниковЗадолженности.КредитыЗаймы);
		Запрос.УстановитьПараметр("СчетКраткосрочныхПроцентов", ВидыПараметров.СчетКраткосрочныхПроцентов);
		
	ИначеЕсли ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
		
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности", 	ВидыИсточниковЗадолженности.ЗаймыВыданные);
		Запрос.УстановитьПараметр("СчетКраткосрочныхПроцентов", ВидыПараметров.СчетКраткосрочныхПроцентов);		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СпособОтраженияРасходов", 	ВидыПараметров.СпособОтраженияРасходов);
	Запрос.УстановитьПараметр("СпособОтраженияДисконта",    ВидыПараметров.СпособОтраженияДисконта);
	Запрос.УстановитьПараметр("СчетДолгосрочныхОбязательств", ВидыПараметров.СчетДолгосрочныхОбязательств);
	
	Запрос.УстановитьПараметр("ВидКредитаЗайма", 			ВидыПараметров.ВидКредитаЗайма);
	Запрос.УстановитьПараметр("СчетРезерва", 				ВидыПараметров.СчетРезерва);
	Запрос.УстановитьПараметр("Коэффициент",				ПолучитьКоэффициентВалют());
	Запрос.УстановитьПараметр("СписокДоговоров",			СписокДоговоров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;

КонецФункции // ПолучитьВыборкуДляЗаполненияДокумента() 

// Процедура заполняет реквизит СчетРасходов в табличной части ДанныеНачисления.
// 
// Параметры:
//  СтрокаТЧ - Строка табличной части.
// 
Процедура ЗаполнитьСчетРасходовИзСпособаОтраженияРасходов(СтрокаТЧ)

	ВидыОпераций = Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам;
	
	// Если не кредиты и займы полученные, не заполняем.
	Если ВидОперации <> ВидыОпераций.КредитыЗаймыПолученные Тогда
		Возврат;
	КонецЕсли;
	
	// Если заполнен способ отражения расходов
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособОтраженияРасходов) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ.СчетРасходов = СтрокаТЧ.СпособОтраженияРасходов.ОсновнойСчетЗатрат;
	
	Для Н = 1 По мКоличествоСубконтоМУ Цикл
		СтрокаТЧ["СубконтоРасходов" + Н] = СтрокаТЧ.СпособОтраженияРасходов["ОсновнойСубконто" + Н];
	КонецЦикла;
		
	//СтрокаТЧ.КоличествоДоступныхСубконтоРасходов = СтрокаТЧ.СчетРасходов.ВидыСубконто.Количество();
	
КонецПроцедуры // ЗаполнитьСчетРасходовИзСпособаОтраженияРасходов()

// Функция возвращает коэффициент пересчета сумм из валюты регламентированного учета в валюту документа.
// 
Функция ПолучитьКоэффициентВалют()
	
	ВидыКурсов			= Новый Структура("Упр,Регл,МУ,Документ");
	//ДокументОбъект 		= ДанныеФормывЗначение(Документ, Тип("ДокументОбъект.бит_му_НачислениеПроцентовПоФинИнструментам"));
	ДокументОбъект = ЭтотОбъект;
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ДокументОбъект, ДокументОбъект.Дата, ВидыКурсов);
	
	КурсыРегл  	= СтруктураКурсыВалют.Регл;
	КурсыДок 	= СтруктураКурсыВалют.Документ;

	Коэффициент = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(1, КурсыРегл.Валюта, 		КурсыДок.Валюта,
																	 КурсыРегл.Курс, 		КурсыДок.Курс,
																	 КурсыРегл.Кратность, 	КурсыДок.Кратность);
																	 
	Возврат Коэффициент;
	
КонецФункции

// Процедура выполняет проверку данных документа.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок)
	
	// Нельзя два раза в месяц начислять проценты по одному и тому же договору.
	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_СобытияФинИнструментовСрезПоследних.Регистратор,
	               |	бит_му_СобытияФинИнструментовСрезПоследних.Период,
	               |	бит_му_СобытияФинИнструментовСрезПоследних.ДоговорКонтрагента
	               |ИЗ
	               |	РегистрСведений.бит_му_СобытияФинИнструментов.СрезПоследних(
	               |			&Дата,
	               |			ДоговорКонтрагента В (&СписокДоговоров)
	               |				И Событие = ЗНАЧЕНИЕ(Перечисление.бит_му_СобытияФинИнструментов.НачислениеПроцентов)) КАК бит_му_СобытияФинИнструментовСрезПоследних";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("СписокДоговоров", 	СтруктураТаблиц.ДанныеНачисления.ВыгрузитьКолонку("ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("Дата",				КонецМесяца(СтруктураШапкиДокумента.Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СтрокаСообщения = "";
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если Выборка.Период >= НачалоМесяца(СтруктураШапкиДокумента.Дата) Тогда
				СтрокаСообщения = СтрокаСообщения + НСтр("ru = 'для договора ""%1%"": %2%'") + Символы.ПС;
				СтрокаСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(СтрокаСообщения, Выборка.ДоговорКонтрагента, Выборка.Регистратор);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаСообщения <> "" Тогда
			СтрокаСообщения = НСтр("ru = 'Проведение документа невозможно, существуют проведенные документы начисления процентов в данном месяце'") + Символы.ПС + СтрокаСообщения; 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(СтрокаСообщения, , , Отказ);
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры // ПроверкаДанных()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаДанных = СтруктураТаблиц.ДанныеНачисления;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Формируем проводку по начислению процентов.
		СформироватьЗаписьПоНачислениюПроцентов(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, Отказ);
		
		// Формируем проводку по амортизации резерва.
		СформироватьЗаписьПоАмортизацииРезерва(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, Отказ);
		
		// Запишем событие
		НоваяЗапись = Движения.бит_му_СобытияФинИнструментов.Добавить();
		НоваяЗапись.ДоговорКонтрагента 	= СтрокаТаблицы.ДоговорКонтрагента;
		НоваяЗапись.Организация			= СтруктураШапкиДокумента.Организация;
		НоваяЗапись.Период				= СтруктураШапкиДокумента.Дата;
		НоваяЗапись.Событие				= Перечисления.бит_му_СобытияФинИнструментов.НачислениеПроцентов;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение по начислению процентов. Дт Счет расходов Кт Счет процентов краткосрочных
// Параметры:
//  СтруктураСчета 			- Структура.
//  СтруктураШапкиДокумента - Структура.
// 	СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
// 
Процедура СформироватьПроводкуПоНачислениюПроцентовРасходы(СтруктураСчета, СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, СуммаВзаиморасчетов, Сумма)
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтрокаТаблицы.ВалютаВзаиморасчетов
										 ,СтруктураСчета.СчетРасходов
										 ,СтрокаТаблицы.СчетКраткосрочныхПроцентов
										 ,СуммаВзаиморасчетов
										 ,"Начисление процентов по финансовым инструментам");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	Для Н = 1 По мКоличествоСубконтоМУ Цикл
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Н, СтруктураСчета["СубконтоРасходов" + Н]);
	КонецЦикла;
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	// Выполним валютные пересчеты.
	СтруктураПараметров.Вставить("Сумма", Сумма);
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СформироватьПроводкуПоНачислениюПроцентовРасходы()

// Процедура формирует движение по начислению процентов. Дт Счет процентов краткосрочных Кт Счет доходов
// Параметры:
//  СтруктураСчета 			- Структура.
//  СтруктураШапкиДокумента - Структура.
// 	СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
// 
Процедура СформироватьПроводкуПоНачислениюПроцентовДоходы(СтруктураСчета, СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, СуммаВзаиморасчетов, Сумма)
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтрокаТаблицы.ВалютаВзаиморасчетов
										 ,СтрокаТаблицы.СчетКраткосрочныхПроцентов
										 ,СтруктураСчета.СчетДоходов
										 ,СуммаВзаиморасчетов
										 ,"Начисление процентов по финансовым инструментам");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	Для Н = 1 По мКоличествоСубконтоМУ Цикл
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Н, СтруктураСчета["СубконтоДоходов" + Н]);
	КонецЦикла;
	
	// Выполним валютные пересчеты.
	СтруктураПараметров.Вставить("Сумма", Сумма);
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СформироватьПроводкуПоНачислениюПроцентовДоходы()

// Процедура формирует движение по начислению процентов.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 	СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
// 
Процедура СформироватьЗаписьПоНачислениюПроцентов(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, Отказ)
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам;
	
	// Если договор с рыночными условиями
	Если (СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные) И (СтрокаТаблицы.ВидКредитаЗайма = Перечисления.бит_му_ВидыКредитовЗаймов.Рыночный) Тогда
		// То начисление процентов происходит по номинальной ставке договора.
		Сумма = СтрокаТаблицы.СуммаПроцентовПоНоминальнойСтавке;
		СуммаВзаиморасчетов = СтрокаТаблицы.СуммаПроцентовПоНоминальнойСтавкеВзаиморасчеты;
	Иначе
		// Иначе по рыночной ставке
		Сумма = СтрокаТаблицы.СуммаПроцентовПоЭСП;
		СуммаВзаиморасчетов = СтрокаТаблицы.СуммаПроцентовПоЭСПВзаиморасчеты;
	КонецЕсли;
	
	// Если указан СпособОтраженияРасходов, распределяем сумму.
	Если (СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные) И ЗначениеЗаполнено(СтрокаТаблицы.СпособОтраженияРасходов) Тогда
		
		СуммаПроводки = Сумма;
		СуммаПроводкиВзаиморасчетов = СуммаВзаиморасчетов;
		
		Способы = СтрокаТаблицы.СпособОтраженияРасходов.Способы.Выгрузить();
		
		МассивСумм = бит_ОбщегоНазначения.РаспределитьПропорционально(Сумма, Способы.ВыгрузитьКолонку("Коэффициент"));
		МассивСуммВзаиморасчетов = бит_ОбщегоНазначения.РаспределитьПропорционально(СуммаПроводкиВзаиморасчетов, Способы.ВыгрузитьКолонку("Коэффициент"));
		
		Способы.Колонки.Добавить("Сумма");
		Способы.ЗагрузитьКолонку(МассивСумм, "Сумма");
		Способы.Колонки.Добавить("СуммаВзаиморасчетов");
		Способы.ЗагрузитьКолонку(МассивСуммВзаиморасчетов, "СуммаВзаиморасчетов");
		
		Для каждого ТекСтр Из Способы Цикл
			СтруктураСчетаРасходов = Новый Структура;
			СтруктураСчетаРасходов.Вставить("СчетРасходов", ТекСтр.СчетЗатрат);
			
			Для Н = 1 По мКоличествоСубконтоМУ Цикл
				СтруктураСчетаРасходов.Вставить("СубконтоРасходов" + Н, ТекСтр["Субконто" + Н]);
			КонецЦикла;
			
			СформироватьПроводкуПоНачислениюПроцентовРасходы(СтруктураСчетаРасходов, 
															 СтруктураШапкиДокумента, 
															 СтрокаТаблицы, 
															 СтруктураКурсыВалют, 
															 ТекСтр.СуммаВзаиморасчетов, 
															 ТекСтр.Сумма);			
		КонецЦикла;
		
	Иначе
		
		Если (СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ЗаймыВыданные) ИЛИ (СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность) Тогда
			
			// Если счет доходов в табличной части не указан, 
			// то в проводках используется счет доходов из шапки документа.
			СтруктураСчетаДоходов = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов), СтрокаТаблицы, СтруктураШапкиДокумента);
			
			Если НЕ ПроверитьЗаполнениеРеквизита(СтруктураСчетаДоходов.СчетДоходов, "СчетДоходов", СтрокаТаблицы, Отказ) Тогда
				Возврат;
			КонецЕсли;
			
			СформироватьПроводкуПоНачислениюПроцентовДоходы(СтруктураСчетаДоходов, 
															СтруктураШапкиДокумента, 
															СтрокаТаблицы, 
															СтруктураКурсыВалют, 
															СуммаВзаиморасчетов, 
															Сумма);
			
		Иначе
			
			// Если счет расходов в табличной части не указан, 
			// то в проводках используется счет расходов из шапки документа.
			СтруктураСчетаРасходов = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов), СтрокаТаблицы, СтруктураШапкиДокумента);
			
			Если НЕ ПроверитьЗаполнениеРеквизита(СтруктураСчетаРасходов.СчетРасходов, "СчетРасходов", СтрокаТаблицы, Отказ) Тогда
				Возврат;
			КонецЕсли;
			
			СформироватьПроводкуПоНачислениюПроцентовРасходы(СтруктураСчетаРасходов, 
															 СтруктураШапкиДокумента, 
															 СтрокаТаблицы, 
															 СтруктураКурсыВалют, 
															 СуммаВзаиморасчетов, 
															 Сумма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьЗаписьПоНачислениюПроцентов()

// Процедура формирует движение по амортизации резерва.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 	СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
// 
Процедура СформироватьЗаписьПоАмортизацииРезерва(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, Отказ)
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам;
	
	// Проводка только для договоров с нерыночными условиями.
	Если (СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные) И (СтрокаТаблицы.ВидКредитаЗайма = Перечисления.бит_му_ВидыКредитовЗаймов.Рыночный) Тогда
		Возврат;
	КонецЕсли;
	
	// 
	ВидДоговора = СтрокаТаблицы.ДоговорКонтрагента[бит_ОбщегоНазначения.ПолучитьВидДоговора()];
	ВидыДоговоров = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()];
	
	// Для вида операции «Дебиторская задолженность»: если речь идет о задолженности 
	// по расчетам с покупателями и заказчиками
	// (что определяется по типу договора - с покупателем или с комиссионером), 
	// то больше никаких проводок не делается. 
	Если (СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность) Тогда
		Если (ВидДоговора = ВидыДоговоров.СПокупателем) ИЛИ (ВидДоговора = ВидыДоговоров.СКомиссионером) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	// Для вида операции «Кредиторская задолженность»: если речь идет о задолженности 
	// по расчетам с поставщиками и подрядчиками
	// (что определяется по типу договора - с поставщиком или с комитентом), 
	// то больше никаких проводок не делается.
	Если (СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность) Тогда
		Если (ВидДоговора = ВидыДоговоров.СПоставщиком) ИЛИ (ВидДоговора = ВидыДоговоров.СКомитентом) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Если счет резерва в табличной части не указан, 
	// то в проводках используется счет резерва из шапки документа.
	СтруктураСчетаРезерва = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетРезерва), СтрокаТаблицы, СтруктураШапкиДокумента);
	
	// Если счет расходов в табличной части не указан, 
	// то в проводках используется счет расходов из шапки документа.
	СтруктураСчетаРасходов = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов), СтрокаТаблицы, СтруктураШапкиДокумента);
	
	// Если счет доходов в табличной части не указан, 
	// то в проводках используется счет доходов из шапки документа.
	СтруктураСчетаДоходов = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов), СтрокаТаблицы, СтруктураШапкиДокумента);
	
	// 
	СуммаПроводки 			   = СтрокаТаблицы.АмортизацияРезерва;
	СуммаПроводкиВзаиморасчеты = СтрокаТаблицы.АмортизацияРезерваВзаиморасчеты;
	
	Если СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
		// Дт Счет расходов Кт Счет резерва
		СчетДт 				= СтруктураСчетаРасходов.СчетРасходов; 	СчетКт 		= СтруктураСчетаРезерва.СчетРезерва;
		СтруктураДт 		= СтруктураСчетаРасходов;				СтруктураКт = Неопределено;
		СубконтоДт			= "СубконтоРасходов";
		СчетДтПредставление = "СчетРасходов";						СчетКтПредставление = "СчетРезерва";

	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные 
		И СтрокаТаблицы.СпособОтраженияДисконта = Перечисления.бит_му_СпособыОтраженияДисконта.НаСчетДоходов Тогда
	
		СчетДт      = СтруктураСчетаРасходов.СчетРасходов;
		СтруктураДт = СтруктураСчетаРасходов;
		СубконтоДт  = "СубконтоРасходов";
		СчетДтПредставление = "СчетРасходов";
		
		СчетКт = СтрокаТаблицы.СчетДолгосрочныхОбязательств;
		СтруктураКт = Неопределено;
		СчетКтПредставление = "СчетДолгосрочныхОбязательств";
		
	ИначеЕсли (СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность) ИЛИ (СтрокаТаблицы.СуммаМУОстатокДт > 0) Тогда
		// Дт Счет расходов Кт Счет резерва, если остаток на счете резерва дебетовый.
		СчетДт 				= СтруктураСчетаРасходов.СчетРасходов; 	СчетКт 		= СтруктураСчетаРезерва.СчетРезерва;
		СтруктураДт 		= СтруктураСчетаРасходов;				СтруктураКт = Неопределено;
		СубконтоДт			= "СубконтоРасходов";
		СчетДтПредставление = "СчетРасходов";						СчетКтПредставление = "СчетРезерва";
		
		// Изменяем знак суммы проводки на положительный, если необходимо.
		Если СуммаПроводки < 0 Тогда
			СуммаПроводки 			   = - СуммаПроводки;
			СуммаПроводкиВзаиморасчеты = - СуммаПроводкиВзаиморасчеты;
		КонецЕсли;
		
	ИначеЕсли СтрокаТаблицы.СуммаМУОстатокКт > 0 Тогда
		// Дт Счет резерва Кт Счет доходов, если остаток на счете резерва кредитовый.
		СчетДт 				= СтруктураСчетаРезерва.СчетРезерва;  	СчетКт = СтруктураСчетаДоходов.СчетДоходов;
		СтруктураДт 		= Неопределено;							СтруктураКт = СтруктураСчетаДоходов;
		СубконтоКт			= "СубконтоДоходов";
		СчетДтПредставление = "СчетРезерва";						СчетКтПредставление = "СчетДоходов";
		
	ИначеЕсли СтрокаТаблицы.СуммаМУОстатокКт < 0 Тогда
		// Дт Счет расходов Кт Счет резерва, если остаток на счете резерва кредитовый.
		СчетДт 				= СтруктураСчетаРасходов.СчетРасходов; 	СчетКт = СтруктураСчетаРезерва.СчетРезерва;
		СтруктураДт 		= СтруктураСчетаРасходов;				СтруктураКт = Неопределено;
		СубконтоДт			= "СубконтоРасходов";
		СчетДтПредставление = "СчетРасходов";						СчетКтПредставление = "СчетРезерва";
		
		// Изменяем знак суммы проводки на положительный, если необходимо.
		Если СуммаПроводки < 0 Тогда
			СуммаПроводки 			   = - СуммаПроводки;
			СуммаПроводкиВзаиморасчеты = - СуммаПроводкиВзаиморасчеты;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	
	// Проверим заполнение счетов
	Если НЕ ПроверитьЗаполнениеРеквизита(СчетДт, СчетДтПредставление, СтрокаТаблицы, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеРеквизита(СчетКт, СчетКтПредставление, СтрокаТаблицы, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Движения.бит_Дополнительный_2.Добавить();

	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтрокаТаблицы.ВалютаВзаиморасчетов
										 ,СчетДт
										 ,СчетКт
										 ,СуммаПроводкиВзаиморасчеты
										 ,"Амортизация резерва по финансовым инструментам");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	Если СтруктураДт = Неопределено Тогда
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	Иначе
		Для Н = 1 По мКоличествоСубконтоМУ Цикл
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Н, СтруктураДт[СубконтоДт + Н]);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураКт = Неопределено Тогда
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	Иначе
		Для Н = 1 По мКоличествоСубконтоМУ Цикл
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Н, СтруктураКт[СубконтоКт + Н]);
		КонецЦикла;
	КонецЕсли;
	
	// Выполним валютные пересчеты.
	СтруктураПараметров.Вставить("Сумма", СуммаПроводки);
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СформироватьЗаписьПоАмортизацииРезерва()

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти 

#КонецЕсли
