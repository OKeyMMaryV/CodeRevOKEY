 
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем виды операций для группы подменю.
	Для каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам[ИмяЗначенияПеречисления];
		
		ИмяКнопки = ИмяЗначенияПеречисления;
		
		ИмяКоманды = "Команда_" + ИмяКнопки;
		
		// Добавляем новую команду обработки выбора вида операции.
		КомандаУстановитьОперацию = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
		КомандаУстановитьОперацию.Действие = "ДействияФормыДействиеУстановитьОперацию";
		
		КнопкаГруппыПодменю = ЭтотОбъект.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭтотОбъект.Элементы.ПодменюВидаОперации);
		КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
		КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
			
	КонецЦикла;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Кешируем количество субконто
	фКоличествоСубконтоМУ = 4;
	 
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетРасходов"
												   ,"СубконтоРасходов"
												   ,фКоличествоСубконтоМУ
												   ,"ДанныеНачисления"
												   ,"Элементы.ДанныеНачисления.ТекущиеДанные");	 
												   
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
												   ,"СчетДоходов"
												   ,"СубконтоДоходов"
												   ,фКоличествоСубконтоМУ
												   ,"ДанныеНачисления"
												   ,"Элементы.ДанныеНачисления.ТекущиеДанные");	 
	 
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	ВосстановитьКоличествоДоступныхСубконто(); 											   
	
	УсловноеОформление.Элементы.Очистить();

	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   ,"ДанныеНачисления"
															   ,"СубконтоРасходов"
															   ,"КоличествоДоступныхСубконтоРасходов"
															   ,фКоличествоСубконтоМУ);
															   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   ,"ДанныеНачисления"
															   ,"СубконтоДоходов"
															   ,"КоличествоДоступныхСубконтоДоходов"
															   ,фКоличествоСубконтоМУ);
	
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетРасходов", "СубконтоРасходов", фКоличествоСубконтоМУ);
	 
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоРасходов");
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетДоходов", "СубконтоДоходов", фКоличествоСубконтоМУ);
	 
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();	
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	УстановитьПараметрыВыбораДляСчетов();
	
	// Установка параметров выбора для Договоров.
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДанныеНачисленияДоговорКонтрагента, "Объект.ДанныеНачисления.Контрагент");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
			Объект.ВидОперации = Неопределено;
			СформироватьДеревоВидовОпераций();
			
			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
			Иначе
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			КонецЕсли;
		Иначе
			// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
			УстановитьЗаголовокФормыДокумента();
		КонецЕсли;
						
	Иначе
		ПриОткрытииОкончание();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	ВосстановитьКоличествоДоступныхСубконто(); 											   	
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_НачислениеПроцентовПоФинИнструментам";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
// 
&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)

	// Сохраним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации; 
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, 	"_");
	ИмяПодменю      = Лев(ИмяКнопки, 	Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки, 	Позиция + 1);
	
	Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам[ИмяВидаОперации];
	
	// Если операция не поменялась, то выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
																
	ОбработатьИзменениеВидаОперацииСервер();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.ДанныеНачисления.Количество() <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеДаты", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("Дата");
		
		ИзменениеВалютыКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - завершение изменения реквизита "Дата".
// 
&НаКлиенте
Процедура ОбработатьИзменениеДаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Объект.ДанныеНачисления.Очистить();
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		ДобавитьВКэш("Дата");
	Иначе
		ИзвлечьИзКэша("Дата");
	КонецЕсли;

	ИзменениеВалютыКлиент();
	
КонецПроцедуры // ИзменениеВалютыЗавершение()

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДанныеНачисления.Очистить();
	Иначе
		Объект.Организация = мКэшРеквизитовФормы.Организация;
		Возврат;
	КонецЕсли;
	
	ИзменениеОрганизацииСервер();
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
																   ,Истина
																   ,Ложь);
																   			
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
	ДобавитьВКэш("Организация");
	
	ИзменениеОрганизации();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.Организация = ВыбранноеЗначение;
	
	Если Не мКэшРеквизитовФормы.Организация = Объект.Организация
		 И Объект.ДанныеНачисления.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ИзменениеОрганизацииСервер();
		
		ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
																		,Истина
																		,Ложь);
		
		Если Не ВалютаДокументаЗаполнена
			И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			
			ДобавитьВКэш("ВалютаДокумента");
			ДобавитьВКэш("КратностьДокумента");
			ДобавитьВКэш("КурсДокумента");
			
		КонецЕсли;
		
		ДобавитьВКэш("Организация");
		
		ИзменениеОрганизации();
		
	КонецЕсли;

КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетРасходов".
// 
&НаКлиенте
Процедура СчетРасходовПриИзменении(Элемент)
	
	ИзменениеСчетРасходов();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоРасходов_<i>".
// 
&НаКлиенте
Процедура СубконтоРасходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконтоРасходов(Объект, ЗначениеСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоРасходов_<i>".
// 
&НаКлиенте
Процедура СубконтоРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконтоРасходов(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто);
   
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоРасходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
	
КонецПроцедуры // СубконтоРасходовАвтоПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетДоходов".
// 
&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	
	ИзменениеСчетДоходов();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоДоходов_<i>".
// 
&НаКлиенте
Процедура СубконтоДоходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконтоДоходов(Объект, ЗначениеСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоДоходов_<i>".
// 
&НаКлиенте
Процедура СубконтоДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконтоДоходов(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто);
   
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоДоходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
	
КонецПроцедуры // СубконтоДоходовАвтоПодбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеНачисления

// Процедура - обработчик события "НачалоВыбора" поля ввода "СпособОтраженияРасходов" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисленияСпособОтраженияРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетРасходов" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисления_СчетРасходовПриИзменении(Элемент)
	
	Идентификатор     = Элементы.ДанныеНачисления.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаСчетРасходовТабличноеПолеДанныеНачисления(Идентификатор);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоРасходов" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисления_СубконтоРасходовПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.ДанныеНачисления.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ДанныеНачисления", Элемент.Имя);		
	ИзменениеСубконтоРасходов(Элементы.ДанныеНачисления.ТекущиеДанные, ЗначениеСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоРасходов" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисления_СубконтоРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока     = Элементы.ДанныеНачисления.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ДанныеНачисления", Элемент.Имя);		
	НачалоВыбораСубконтоРасходов(Элемент, СтандартнаяОбработка, ТекущаяСтрока, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеНачисления_СубконтоРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеНачисления.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ДанныеНачисления", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоРасходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ДанныеНачисления_СубконтоРасходовАвтоПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетДоходов" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисления_СчетДоходовПриИзменении(Элемент)
	
	Идентификатор     = Элементы.ДанныеНачисления.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаСчетДоходовТабличноеПолеДанныеНачисления(Идентификатор);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоДоходов" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисления_СубконтоДоходовПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.ДанныеНачисления.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ДанныеНачисления", Элемент.Имя);		
	ИзменениеСубконтоДоходов(Элементы.ДанныеНачисления.ТекущиеДанные, ЗначениеСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоДоходов" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисления_СубконтоДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока     = Элементы.ДанныеНачисления.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ДанныеНачисления", Элемент.Имя);		
	НачалоВыбораСубконтоДоходов(Элемент, СтандартнаяОбработка, ТекущаяСтрока, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеНачисления_СубконтоДоходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеНачисления.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ДанныеНачисления", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоДоходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ДанныеНачисления_СубконтоДоходовАвтоПодбор()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеНачисления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоВыбораДоговораКлиент(Элемент, ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеНачисления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКонтрагента(ТекущиеДанные.ПолучитьИдентификатор());
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДанныеНачисленияДоговорКонтрагента, ТекущиеДанные.Контрагент);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеНачисления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
	КомандаОбновитьТекущуюСтроку(Команды.КомандаОбновитьТекущуюСтроку);
	
	ЗаполнитьКурсВзаиморасчетов(ТекущиеДанные.ПолучитьИдентификатор());	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаПроцентовПоЭСПП" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисленияСуммаПроцентовПоЭСППриИзменении(Элемент)
	
	ВычислитьСуммуАмортизацияРезерва();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаПроцентовПоНоминальнойСтавке" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисленияСуммаПроцентовПоНоминальнойСтавкеПриИзменении(Элемент)
	
	ВычислитьСуммуАмортизацияРезерва();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисленияКурсВзаиморасчетовПриИзменении(Элемент)
	
	ДанныеНачисленияСуммаПроцентовПоЭСПВзаиморасчетыПриИзменении(Элементы.ДанныеНачисленияСуммаПроцентовПоЭСПВзаиморасчеты);
	ДанныеНачисленияСуммаПроцентовПоНоминальнойСтавкеВзаиморасчетыПриИзменении(Элементы.ДанныеНачисленияАмортизацияРезерваВзаиморасчеты);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаПроцентовПоЭСПВзаиморасчеты" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисленияСуммаПроцентовПоЭСПВзаиморасчетыПриИзменении(Элемент)
	
	ВычислитьСуммуАмортизацияРезерваВзаморасчеты();
	
	ТекущиеДанные = Элементы.ДанныеНачисления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаПроцентовПоЭСП = ВычислитьСумму(ТекущиеДанные.СуммаПроцентовПоЭСПВзаиморасчеты,
													   ТекущиеДанные.КурсВзаиморасчетов, 	  Объект.КурсДокумента,
													   ТекущиеДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаПроцентовПоНоминальнойСтавкеВзаиморасчеты" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисленияСуммаПроцентовПоНоминальнойСтавкеВзаиморасчетыПриИзменении(Элемент)
	
	ВычислитьСуммуАмортизацияРезерваВзаморасчеты();
	
	ТекущиеДанные = Элементы.ДанныеНачисления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаПроцентовПоНоминальнойСтавке = ВычислитьСумму(ТекущиеДанные.СуммаПроцентовПоНоминальнойСтавкеВзаиморасчеты,
																	 ТекущиеДанные.КурсВзаиморасчетов, 		Объект.КурсДокумента,
																	 ТекущиеДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "АмортизацияРезерваВзаиморасчеты" 
// табличного поля "ДанныеНачисления".
// 
&НаКлиенте
Процедура ДанныеНачисленияАмортизацияРезерваВзаиморасчетыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеНачисления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.АмортизацияРезерва = ВычислитьСумму(ТекущиеДанные.АмортизацияРезерваВзаиморасчеты,
													  ТекущиеДанные.КурсВзаиморасчетов, 	 Объект.КурсДокумента,
													  ТекущиеДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.ДанныеНачисления.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьДанныеНачисления();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - завершение обработки команды "Заполнить".
// 
&НаКлиенте
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДанныеНачисления.Очистить();
	
	ЗаполнитьДанныеНачисления();

КонецПроцедуры 

&НаКлиенте
Процедура КомандаОбновитьТекущуюСтроку(Команда)
	
	ТекущиеДанные = Элементы.ДанныеНачисления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокИдентификаторов = Новый Массив;
	СписокИдентификаторов.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	
	ЗаполнитьДанныеНачисления(СписокИдентификаторов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	СписокИдентификаторов = Новый Массив;	
	Для каждого ТекСтр Из Объект.ДанныеНачисления Цикл
		СписокИдентификаторов.Добавить(ТекСтр.ПолучитьИдентификатор());
	КонецЦикла;
	
	ЗаполнитьДанныеНачисления(СписокИдентификаторов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	// Адаптация для ERP. Начало. 18.03.2014{{
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()]));
	// Адаптация для ERP. Конец. 18.03.2014}}

	КэшПеречисления.Вставить("бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Типы договоров
	КэшированныеЗначения.Вставить("ТипДоговораЗаймыПолученные", 	Справочники.бит_ТипыДоговоров.ЗаймыПолученные);
	КэшированныеЗначения.Вставить("ТипДоговораКредитыПолученные", 	Справочники.бит_ТипыДоговоров.КредитыПолученные);
	КэшированныеЗначения.Вставить("ТипДоговораЗаймыВыданные", 		Справочники.бит_ТипыДоговоров.ЗаймыВыданные);
	КэшированныеЗначения.Вставить("ТипДоговораЦенныеБумаги", 		Справочники.бит_ТипыДоговоров.ЦенныеБумаги);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Восстанавливает количество доступных субконто для счета дохода/расхода в строках таб.части.
// 
&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
    Для каждого СтрокаТаблицы Из Объект.ДанныеНачисления Цикл
        
        СвСчРх = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетРасходов);
        СвСчДх = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходов);
    
		СтрокаТаблицы.КоличествоДоступныхСубконтоРасходов = СвСчРх.КоличествоСубконто;
		СтрокаТаблицы.КоличествоДоступныхСубконтоДоходов  = СвСчДх.КоличествоСубконто;
        
    КонецЦикла;
	
КонецПроцедуры // ВосстановитьКоличествоДоступныхСубконто()

// Процедура обрабатывает изменение вида операции.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ОбработатьИзменениеВидаОперацииСервер()

	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();

КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер() 

&НаСервере         
Процедура ЗаполнитьКурсВзаиморасчетов(Идентификатор)

	ТекущиеДанные = Объект.ДанныеНачисления.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВалютаВзаиморасчетов = ТекущиеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаВзаиморасчетов, Объект.Дата);
	
	ТекущиеДанные.КурсВзаиморасчетов 		= СтрКурса.Курс;
	ТекущиеДанные.КратностьВзаиморасчетов 	= СтрКурса.Кратность;

КонецПроцедуры // ЗаполнитьКурсВзаиморасчетов()

// Формирует список видов операций для выбора вида операции перед созданием документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура СформироватьДеревоВидовОпераций()

	ЭлементыДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = ЭлементыДерева.Добавить();
	СтрокаНовая.ВидОперации = "Доступные виды операций";
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекСтр Из фКэшЗначений.Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам Цикл
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекСтр.Значение;	
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	ВосстановитьКоличествоДоступныхСубконто();
	  
КонецПроцедуры // ИзменениеВалютыСервер()

&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();	
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

&НаСервере
Процедура ИзменениеКонтрагента(ИдСтроки)

	ТекущиеДанные = Объект.ДанныеНачисления.НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	СтруктураДополнительныхПараметров = Новый Структура;
	
	Если фСписокТиповДоговоров.Количество() > 0 Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗначениеОтбора", 		фСписокТиповДоговоров);
		СтруктураОтбора.Вставить("ВидСравненияОтбора",	ВидСравнения.ВСписке);
		
		СтруктураДополнительныхПараметров.Вставить("бит_ТипДоговора", СтруктураОтбора);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(ТекущиеДанные.ДоговорКонтрагента
														  ,ТекущиеДанные.Контрагент
														  ,Объект.Организация
														  ,фСписокВидовДоговоров
														  ,СтруктураДополнительныхПараметров);
														  
	// Могли поменять договор.
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);														  

	СписокИдентификаторов = Новый Массив;
	СписокИдентификаторов.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	
	ЗаполнитьДанныеНачисления(СписокИдентификаторов);

	ЗаполнитьКурсВзаиморасчетов(ТекущиеДанные.ПолучитьИдентификатор());		
	
КонецПроцедуры // ИзменениеКонтрагента()

&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);
	КонецЕсли;

КонецПроцедуры // ИзменениеДоговораСервер()

&НаСервере 
Процедура ЗаполнитьДанныеНачисления(СписокИдентификаторов = Неопределено)
	              	
	Если СписокИдентификаторов <> Неопределено Тогда		
		НомераСтрок = Новый Массив;
		Для каждого ТекСтр Из СписокИдентификаторов Цикл
			СтрокаТЧ = Объект.ДанныеНачисления.НайтиПоИдентификатору(ТекСтр);
			НомераСтрок.Добавить(Объект.ДанныеНачисления.Индекс(СтрокаТЧ));
		КонецЦикла;		
	Иначе
		НомераСтрок = Неопределено;	
	КонецЕсли;
	
	ДокОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокОбъект.ЗаполнитьТчДанныеНачисления(НомераСтрок);
	ЗначениеВДанныеФормы(ДокОбъект, Объект);
	
	ВосстановитьКоличествоДоступныхСубконто();
	
КонецПроцедуры // ЗаполнитьДанныеНачисления()

&НаСервере
Процедура ИзменениеОрганизации()
	 
	бит_БухгалтерияСервер.ПроверитьСоответствиеОрганизации(Объект, "СубконтоРасходов", фКоличествоСубконтоМУ, "В обработке");	 
	бит_БухгалтерияСервер.ПроверитьСоответствиеОрганизации(Объект, "СубконтоДоходов", фКоличествоСубконтоМУ, "В обработке");	 
	 
КонецПроцедуры // ИзменениеОрганизации()

&НаСервере
Процедура ИзменениеСчетРасходов()

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоРасходов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоРасходов");

КонецПроцедуры // ИзменениеСчетРасходов()

&НаСервере
Процедура ИзменениеСчетДоходов()

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоДоходов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");

КонецПроцедуры // ИзменениеСчетДоходов()

&НаСервере         
Процедура ИзменениеСчетаСчетРасходовТабличноеПолеДанныеНачисления(Идентификатор)
	
	ТекущаяСтрока = Объект.ДанныеНачисления.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетРасходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "СубконтоРасходов");
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетРасходов);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоРасходов = СвСч.КоличествоСубконто;
	
КонецПроцедуры // ИзменениеСчетаСчетРасходовТабличноеПолеДанныеНачисления()

&НаСервере
Процедура ИзменениеСчетаСчетДоходовТабличноеПолеДанныеНачисления(Идентификатор)
	
	ТекущаяСтрока = Объект.ДанныеНачисления.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетДоходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "СубконтоДоходов");

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДоходов);

	ТекущаяСтрока.КоличествоДоступныхСубконтоДоходов  = СвСч.КоличествоСубконто;
	
КонецПроцедуры // ИзменениеСчетаСчетДоходовТабличноеПолеДанныеНачисления()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

&НаКлиенте
Процедура ДанныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДанныеНачисления.ТекущиеДанные;
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДанныеНачисленияДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ДанныеНачисленияСчетРасходов);
	МассивЭлементов.Добавить(Элементы.ДанныеНачисленияСчетДоходов);
    МассивЭлементов.Добавить(Элементы.СчетРасходов);
	МассивЭлементов.Добавить(Элементы.СчетДоходов);
    МассивЭлементов.Добавить(Элементы.ДанныеНачисленияСчетКраткосрочныхПроцентов);
	МассивЭлементов.Добавить(Элементы.ДанныеНачисленияСчетРезерва);
	МассивЭлементов.Добавить(Элементы.ДанныеНачисленияСчетДолгосрочныхОбязательств);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаКлиенте
Процедура ИзменениеСубконтоРасходов(Контейнер, ЗначениеСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "СубконтоРасходов", фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "СубконтоРасходов", ЗначениеСубконто, фКоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "СубконтоРасходов", "", фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоСубконтоРасходов()

&НаКлиенте
Процедура НачалоВыбораСубконтоРасходов(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоРасходов"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконтоРасходов()

&НаКлиенте
Процедура ИзменениеСубконтоДоходов(Контейнер, ЗначениеСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "СубконтоДоходов", фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "СубконтоДоходов", ЗначениеСубконто, фКоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "СубконтоДоходов", "", фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоСубконтоДоходов()

&НаКлиенте
Процедура НачалоВыбораСубконтоДоходов(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоДоходов"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконтоДоходов()

// Функция получает значение субконто в табличном поле 
// исходя из имени элемента и имени табличного поля.
// Значение получается исходя из предположения что ИмяЭлементаУправления = ИмяТабличногоПоля+ИмяРеквизита.
// 
// Параметры:
//  ТекущаяСтрока      - ДанныеФормыКоллекция
//  ИмяТабличногоПоля  - Строка
//  ИмяЭлемента        - Строка.
// 
// Возвращаемое значение:
//  ЗначениеСубконто   - Произвольный.
// 
&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяТабличногоПоля, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента, ИмяТабличногоПоля, "");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

// Процедура устанавливает отборы для договора контрагента.
// 
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(фСписокВидовДоговоров.ВыгрузитьЗначения()));
		КонецЕсли;
	    Если фСписокТиповДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("бит_ТипДоговора", фСписокТиповДоговоров);
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура формирует список доступных видов договоров.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
	ВидыОпераций				= фКэшЗначений.Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам;
	ВидыДоговоровКонтрагентов 	= фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов;
	
	фСписокВидовДоговоров.Очистить();
												   
	Если Объект.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПокупателем);
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомитентом);
		
		Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда			
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(фСписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомиссионеромНаЗакупку");
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(фСписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");						
			фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);		
		КонецЕсли; 
		
		фСписокТиповДоговоров.Очистить();
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
		
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПоставщиком);
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомитентом);
		
		Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(фСписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомиссионеромНаЗакупку");
			бит_ДоговораКлиентСервер.ДобавитьВидДоговора(фСписокВидовДоговоров, ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");						
			фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);
		КонецЕсли; 
				
		фСписокТиповДоговоров.Очистить();
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		
		Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
			фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);
		КонецЕсли; 
				
		фСписокТиповДоговоров = Новый СписокЗначений;
		фСписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораЗаймыПолученные);
		фСписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораКредитыПолученные);
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
		
		Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
			фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);
		КонецЕсли; 
				
		фСписокТиповДоговоров = Новый СписокЗначений;
		фСписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораЗаймыВыданные);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	    
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ДанныеНачисления;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыКлиентЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
					  
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли; 
				  
		
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиентЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		// Выполним пересчет сумм строк табличной части.
		Для Каждого СтрокаТаблицы Из Объект.ДанныеНачисления Цикл
				
				СтрокаТаблицы.СуммаПроцентовПоЭСП = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПроцентовПоЭСП
																					 ,мКэшРеквизитовФормы.ВалютаДокумента
																					 ,Объект.ВалютаДокумента
																					 ,мКэшРеквизитовФормы.КурсДокумента
																					 ,Объект.КурсДокумента
																					 ,мКэшРеквизитовФормы.КратностьДокумента
																					 ,Объект.КратностьДокумента);
																					 
				СтрокаТаблицы.СуммаПроцентовПоНоминальнойСтавке = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПроцентовПоНоминальнойСтавке
																					 ,мКэшРеквизитовФормы.ВалютаДокумента
																					 ,Объект.ВалютаДокумента
																					 ,мКэшРеквизитовФормы.КурсДокумента
																					 ,Объект.КурсДокумента
																					 ,мКэшРеквизитовФормы.КратностьДокумента
																					 ,Объект.КратностьДокумента);
																					 
				СтрокаТаблицы.АмортизацияРезерва = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.АмортизацияРезерва
																					 ,мКэшРеквизитовФормы.ВалютаДокумента
																					 ,Объект.ВалютаДокумента
																					 ,мКэшРеквизитовФормы.КурсДокумента
																					 ,Объект.КурсДокумента
																					 ,мКэшРеквизитовФормы.КратностьДокумента
																					 ,Объект.КратностьДокумента);
																					 
		КонецЦикла;
			
	КонецЕсли;
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КурсДокумента");
	ДобавитьВКэш("КратностьДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()


// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
// 
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим отбор для договора контрагента.
		УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
		
	Иначе
		
		СтруктураДополнительныхПараметров = Новый Структура;
		
		Если фСписокТиповДоговоров.Количество() > 0 Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЗначениеОтбора", 		фСписокТиповДоговоров);
			СтруктураОтбора.Вставить("ВидСравненияОтбора",	ВидСравнения.ВСписке);
			СтруктураОтбора.Вставить("ДоступностьОтбора",	Ложь);
			
			СтруктураДополнительныхПараметров.Вставить("бит_ТипДоговора", СтруктураОтбора);
		КонецЕсли;
		
		// Обработаем начало выбора договора контрагента в обычном приложении.
		бит_РаботаСДиалогамиКлиент.НачалоВыбораДоговораКонтрагентаОбычноеПриложение(Объект
																				   ,Элемент
																				   ,Контрагент_Владелец
																				   ,Договор
																				   ,фСписокВидовДоговоров
																				   ,СтандартнаяОбработка
																				   ,СтруктураДополнительныхПараметров);
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораДоговораКлиент()

// Процедура обрабатывает выбор реквизита формы.
// 
// Параметры:
//  СтандартнаяОбработка - Булево.
// 
// &НаКлиенте 
// Процедура ОбработатьВыборРеквизитаШапки(СтандартнаяОбработка)

// Если Объект.ДанныеНачисления.Количество() = 0 Тогда
// 		Возврат;
// 	КонецЕсли;
// 	
// 	Ответ = Вопрос(НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'")
// 				  ,РежимДиалогаВопрос.ДаНет
// 				  ,30
// 				  ,КодВозвратаДиалога.Нет);
// 					  
// 	Если Ответ = КодВозвратаДиалога.Нет Тогда
// 		СтандартнаяОбработка = Ложь;
// 		Возврат;
// 	КонецЕсли;
// 	
// 	Объект.ДанныеНачисления.Очистить();
// 	
// КонецПроцедуры //  ОбработатьВыборРеквизитаШапки() 

// Процедура вычисляет сумму амортизации резерва.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ВычислитьСуммуАмортизацияРезерва()

	ТекущиеДаннные = Элементы.ДанныеНачисления.ТекущиеДанные;
	Если ТекущиеДаннные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ТекущиеДаннные.АмортизацияРезерва = ТекущиеДаннные.СуммаПроцентовПоЭСП - ТекущиеДаннные.СуммаПроцентовПоНоминальнойСтавке;

КонецПроцедуры // ВычислитьСуммуАмортизацияРезерваВзаморасчеты() 

// Процедура вычисляет сумму амортизации резерва.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ВычислитьСуммуАмортизацияРезерваВзаморасчеты()

	ТекущиеДаннные = Элементы.ДанныеНачисления.ТекущиеДанные;
	Если ТекущиеДаннные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ТекущиеДаннные.АмортизацияРезерваВзаиморасчеты = ТекущиеДаннные.СуммаПроцентовПоЭСПВзаиморасчеты - ТекущиеДаннные.СуммаПроцентовПоНоминальнойСтавкеВзаиморасчеты;
	
	ДанныеНачисленияАмортизацияРезерваВзаиморасчетыПриИзменении(Элементы.ДанныеНачисленияАмортизацияРезерваВзаиморасчеты);

КонецПроцедуры // ВычислитьСуммуАмортизацияРезерваВзаморасчеты() 

// Функция вычисляет сумму в валюте документа.
// 
// Параметры:
//  Сумма			- Число.
//  ПоКурсуНач 		- Число.
//  ПоКратностьНач 	- Число.
//  ПоКурсуКон 		- Число.
//  ПоКратностьКон 	- Число.
// 
// Возвращаемое значение:
//  Результат 		- Число.
// 
&НаКлиенте 
Функция ВычислитьСумму(Сумма, ПоКурсуНач, ПоКратностьНач, ПоКурсуКон, ПоКратностьКон)

	Результат = 0;
	
	Если (ПоКурсуКон = 0) ИЛИ (ПоКратностьНач = 0) Тогда
		ТекстСообщения = "При пересчете суммы обнаружен нулевой курс!";	 
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		Результат = (Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции // ВычислитьСумму()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормыСервер()
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам;
	
	флЭтоКредитыЗаймы = ?(Объект.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные, Истина, Ложь);
	Элементы.ДанныеНачисленияСпособОтраженияРасходов.Видимость      = флЭтоКредитыЗаймы;
	Элементы.ДанныеНачисленияСпособОтраженияДисконта.Видимость      = флЭтоКредитыЗаймы;
	Элементы.ДанныеНачисленияСчетДолгосрочныхОбязательств.Видимость = флЭтоКредитыЗаймы;
	
	// 
	Если Объект.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		РеквизитыДляКредитовЗаймовВидимость = Ложь;
	Иначе
		РеквизитыДляКредитовЗаймовВидимость = Истина;
	КонецЕсли;
	
	Элементы.ДанныеНачисленияГруппаРасходов.Видимость						= РеквизитыДляКредитовЗаймовВидимость;
	Элементы.ГруппаСчетРасходов.Видимость									= РеквизитыДляКредитовЗаймовВидимость;
	Элементы.ДанныеНачисленияСчетРасходов.Видимость							= РеквизитыДляКредитовЗаймовВидимость;
	
	// Отобразим/скроем реквизиты с номинальной суммой.
	Если (Объект.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность) ИЛИ (Объект.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность) Тогда
		НоминальнаяСуммаВидимость = Ложь;
	Иначе
		НоминальнаяСуммаВидимость = Истина;
	КонецЕсли;
	
	Элементы.ДанныеНачисленияСуммаПроцентовПоНоминальнойСтавкеВзаиморасчеты.Видимость 	= НоминальнаяСуммаВидимость;
	Элементы.ДанныеНачисленияСуммаПроцентовПоНоминальнойСтавке.Видимость				= НоминальнаяСуммаВидимость;
	
	// 
	Если Объект.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		ЗаголовокТекст = "Счет долгосрочных обязательств";

	ИначеЕсли Объект.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
		ЗаголовокТекст = "Счет долгосрочных обязательств";
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		ЗаголовокТекст = "Счет краткосрочных процентов";
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
		ЗаголовокТекст = "Счет краткосрочных процентов";
	КонецЕсли;
	
	Элементы.ДанныеНачисленияСчетКраткосрочныхПроцентов.Заголовок = ЗаголовокТекст;
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);

КонецПроцедуры // УправлениеЭлементамиФормыСервер()

// Процедура окончание выбора вида операции.
// 
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если (ТипЗнч(СтруктураПараметров) = Тип("Структура")) И СтруктураПараметров.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = СтруктураПараметров.ВидОперации;
	Иначе
		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийНачислениеПроцентовПоФинИнструментам.КредитыЗаймыПолученные;
	КонецЕсли;
	
	ОбработатьИзменениеВидаОперацииСервер();
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		ЭтотОбъект.Закрыть();
	КонецЕсли;

КонецПроцедуры // ПриОткрытииПромежуточная()

// Процедура выполняет окончательные операции по открытию формы. 
// 
&НаКлиенте
Процедура ПриОткрытииОкончание()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();

КонецПроцедуры // ПриОткрытииОкончание()

#КонецОбласти

#КонецОбласти

#Область Инициализация

// Зададим имена реквизитов, подлежащих кешированию.
мКэшРеквизитовФормы = Новый Структура;
мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
мКэшРеквизитовФормы.Вставить("КурсДокумента");
мКэшРеквизитовФормы.Вставить("КратностьДокумента");
мКэшРеквизитовФормы.Вставить("Дата");
мКэшРеквизитовФормы.Вставить("Организация");

#КонецОбласти
