#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

Перем мБылПроведен; // Служит для передачи признака проведения между обработчиками.

Перем мРежимЗаписи; // Служит для передачи режима записи между обработчиками.

Перем мНастройкиПрограммы Экспорт; // Хранит настройки БИТ.

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мБылПроведен = Проведен;
	мРежимЗаписи = РежимЗаписи;
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	Сумма = Товары.Итог("Всего");
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		ОбработатьНоменклатуруТабличнойЧастиТовары();
	
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
	
	Если НЕ Отказ Тогда
		
		Если НЕ мРежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
			
			УстановитьСтатус(мРежимЗаписи);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	 // Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Выполним движения
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,Отказ,Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// Заполним перечень виз
		Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ мБылПроведен Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение", Организация);
			СтруктураПараметров.Вставить("ЦФО"					   , ЦФО);		
			бит_Визирование.ОбновитьПереченьВиз(Ссылка, Дата, СтруктураПараметров);
			
		КонецЕсли; 
		
		УстановитьСтатус(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
	// Проверим допустимость отмены проведения.
	РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	
	мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	мДатаИзмененияСтатуса = РезСтруктура.Дата;
	
	Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Закрыта
		ИЛИ мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Закупка
		ИЛИ мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Выдача
		ИЛИ мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Исполнена
		ИЛИ мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_ЧастичноИсполнена Тогда
		
		ТекстСообщения = "Документ в статусе """ + СокрЛП(мТекущийСтатус) + """. Отмена проведения невозможна!";
		Заголовок      = "Отмена проведения документа: " + СокрЛП(Ссылка);
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок, СтатусСообщения.Важное);
		                          		
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		
		// Очистим визы
		бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаЗакупкиПлан = ТекущаяДата();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.Количество");
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы ИЗ Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС)
			И (ЗначениеЗаполнено(СтрокаТаблицы.Сумма) ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.Всего)) Тогда
			
			Префикс = "Товары[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
			Поле = Префикс + "СтавкаНДС";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", "СтавкаНДС", СтрокаТаблицы.НомерСтроки, "Товары");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли; 
	КонецЦикла;
	
	// Установка настроек обязательности реквизитов.
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Процедура получает статус объекта.
// 
Процедура ПолучитьСтатусМодуль()

	// Получаем статус и дату изменения статуса для документа.
	РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	
	мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус)
					  		 ,РезСтруктура.Статус
					  		 ,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
							  
	мДатаИзмененияСтатуса = РезСтруктура.Дата;

КонецПроцедуры // ПолучитьСтатусМодуль()
	
// Функция определяет текущий статус заявки на потребность.
// 
// Параметры:
//  ТекущийОбъект    - ДокументСсылка.бит_ЗаявкаНаЗатраты.
//  НачальныйСтатус  - текущее значение статуса.
//  ВсеВизыПолучены  - Булево.
// 
// Возвращаемое значение:
//   РезСтатус   - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция ОпределитьСтатусЗаявкиНаПотребность(ТекущийОбъект
											,НачальныйСтатус
											,РежимЗаписи
											,ВсеВизыПолучены
											,ЕстьОтклонено
											,ОстаткиПотребности
											,ОстаткиКВыдаче
											,ОстаткиПоУслуге) Экспорт

	РезСтатус = НачальныйСтатус;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Запись И ТекущийОбъект.Проведен) Тогда
		РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Рабочая;
	Иначе
		РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Черновик;
	КонецЕсли; 
	
	Если РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Рабочая 
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Утверждена 
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Отклонена Тогда
		
		Если ЕстьОтклонено Тогда
			
			РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Отклонена;
			
		Иначе	
			
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Утверждена;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Рабочая;
			КонецЕсли; 
			
			// Для услуг нет выдачи, поэтому статусы проставляются по-другому.
			Если ТекущийОбъект.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги Тогда
			
				Если ОстаткиПоУслуге.Количество() > 0 Тогда
					
					НоменклатураОстатки = ОстаткиПоУслуге.Скопировать();
					НоменклатураОстатки.Свернуть("Потребность");
					
					НоменклатураТовары = Товары.Выгрузить();
					НоменклатураТовары.Свернуть("Номенклатура");
					
					Если ОстаткиПоУслуге.Итог("КоличествоОстаток") <=0.01 
						И ОстаткиПоУслуге.Итог("КоличествоФакт") > 0
						И НоменклатураОстатки.Количество() = НоменклатураТовары.Количество() Тогда 
					
						РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Исполнена;
						
					ИначеЕсли ОстаткиПоУслуге.Итог("КоличествоФакт") > 0 Тогда 	
							
						РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_ЧастичноИсполнена;
						
					Иначе
						
						РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Выдача;
						
					КонецЕсли; 
					
				КонецЕсли; 
			
			Иначе 
				
				// Выдача приоритетнее закупки.
				Если ОстаткиКВыдаче.Количество()>0 Тогда
				
					Если ОстаткиКВыдаче.Итог("КоличествоФакт")<=0.01 Тогда
					
						РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Выдача;
						
					Иначе
						
						Если ОстаткиПотребности.Итог("КоличествоОстаток") <=0.01 
							И ОстаткиПотребности.Итог("КоличествоФакт") > 0
							И ОстаткиПотребности.Итог("КоличествоПлан") <= ОстаткиКВыдаче.Итог("КоличествоФакт") Тогда 
						
							РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Исполнена;
							
						Иначе	
							
							РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_ЧастичноИсполнена;
							
						КонецЕсли; 
						
					КонецЕсли; 
					
				ИначеЕсли ОстаткиПотребности.Итог("КоличествоФакт")>0 Тогда 
					
					РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Закупка;
					
				КонецЕсли; 
				
			КонецЕсли;	
				
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат РезСтатус;
  
КонецФункции // ОпределитьСтатусЗаявкиНаПотребность()

// Процедура устанавливает статус.
// 
// Параметры:
//  РежимЗаписиВх			 - РежимЗаписиДокумента.
//  ЗатратыСтруктураВх		 - Структура.
//  СинхронизироватьЗатратыВх - Булево. По умолчанию Истина.
//  ПереданныйСтатус - СправочникСсылка.бит_СтатусыОбъектов.
// 
Процедура УстановитьСтатус(РежимЗаписиВх = Неопределено
						  ,ЗатратыСтруктураВх = Неопределено
						  ,СинхронизироватьЗатратыВХ = Истина
						  ,ПереданныйСтатус = Неопределено) Экспорт
						  
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
						  
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
		
		Если РежимЗаписиВх = Неопределено Тогда
			 РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			 РежимЗаписи = РежимЗаписиВх;
		КонецЕсли; 
		
		Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаПотребность_Закрыта Тогда
			Возврат;
		КонецЕсли; 
		
		// Вычислим переменные, необходимые для установки статуса.
		ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);						
		
		// Получим остаток по регистру Потребности номенклатуры.
		ОстаткиПотребности = Новый ТаблицаЗначений;
		ОстаткиКВыдаче = Новый ТаблицаЗначений;
		ОстаткиПоУслуге = Новый ТаблицаЗначений;
		Документы.бит_мто_ЗаявкаНаПотребность.ПолучитьОстатки(Ссылка, ОстаткиПотребности, ОстаткиКВыдаче, ОстаткиПоУслуге);
		
		// Определим статус заявки.
		Если ПереданныйСтатус = Неопределено Тогда
		
			Статус = ОпределитьСтатусЗаявкиНаПотребность(ЭтотОбъект, мТекущийСтатус, РежимЗаписи, ВсеВизыПолучены, ЕстьОтклонено, ОстаткиПотребности, ОстаткиКВыдаче, ОстаткиПоУслуге);
			
		Иначе	
			Статус = ПереданныйСтатус;
		КонецЕсли; 
		
		// Если статус изменился - запишем его.
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,мТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				
				мТекущийСтатус = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе	
		
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));	
			
        РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
	КонецЕсли; 
	
	
КонецПроцедуры // УстановитьСтатус()

// Процедура выполняет движения по регистрам.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,Отказ,Заголовок)
	
	// Движение по регистру бит_мто_ПотребностьНоменклатуры.
	ДвиженияПоРегиструПотребностьНоменклатуры(СтруктураШапкиДокумента);
	
	ТаблицаПотребности = ПодготовитьТаблицуПотребностей();
	
	ДвиженияПоРегиструПотребностиНоменклатурыАналитика(СтруктураШапкиДокумента, ТаблицаПотребности);	
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура заполняет шапку документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.бит_мто_ЗаявкаНаПотребность.
// 
Процедура ЗаполнитьШапкуДокумента(ПараметрОбъектКопирования = Неопределено)
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;			
			
		КонецЕсли; 
		
		Важность = Перечисления.бит_Важность.Средняя;
		ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Товары;
		
	Иначе // Документ скопирован.
		
		
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
												
	// Инициализируем значения доп. измерений.
	бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ЭтотОбъект, мИзмеренияДоп, мНастройкиИзмерений);
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Функция готовит таблицу по потребностям для проведения.
// 
Функция ПодготовитьТаблицуПотребностей()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_мто_ЗаявкаНаПотребность.Организация,
	               |	бит_мто_ЗаявкаНаПотребность.СтатьяОборотов,
	               |	бит_мто_ЗаявкаНаПотребность.ЦФО,
	               |	бит_мто_ЗаявкаНаПотребность.Контрагент,
	               |	бит_мто_ЗаявкаНаПотребность.ДоговорКонтрагента,
	               |	бит_мто_ЗаявкаНаПотребность.Проект,
	               |	бит_мто_ЗаявкаНаПотребность.НоменклатурнаяГруппа,
	               |	бит_мто_ЗаявкаНаПотребность.БанковскийСчет,
	               |	бит_мто_ЗаявкаНаПотребность.Аналитика_1,
	               |	бит_мто_ЗаявкаНаПотребность.Аналитика_2,
	               |	бит_мто_ЗаявкаНаПотребность.Аналитика_3,
	               |	бит_мто_ЗаявкаНаПотребность.Аналитика_4,
	               |	бит_мто_ЗаявкаНаПотребность.Аналитика_5,
	               |	бит_мто_ЗаявкаНаПотребность.Аналитика_6,
	               |	бит_мто_ЗаявкаНаПотребность.Аналитика_7,
	               |	бит_мто_ЗаявкаНаПотребность.ВалютаДокумента,
	               |	бит_мто_ЗаявкаНаПотребностьТовары.Всего - бит_мто_ЗаявкаНаПотребностьТовары.СуммаНДС КАК Сумма,
	               |	бит_мто_ЗаявкаНаПотребностьТовары.СтавкаНДС,
	               |	бит_мто_ЗаявкаНаПотребностьТовары.СуммаНДС,
	               |	бит_мто_ЗаявкаНаПотребностьТовары.Количество,
	               |	бит_мто_ЗаявкаНаПотребность.ДатаЗакупкиПлан КАК Период,
	               |	бит_мто_ЗаявкаНаПотребностьТовары.Цена,
	               |	бит_мто_ЗаявкаНаПотребностьТовары.Всего,
	               |	бит_мто_ЗаявкаНаПотребностьТовары.Номенклатура,
	               |	бит_мто_ЗаявкаНаПотребностьТовары.ЕдиницаИзмерения,
	               |	бит_мто_ЗаявкаНаПотребностьТовары.Номенклатура КАК Потребность
	               |ИЗ
	               |	Документ.бит_мто_ЗаявкаНаПотребность КАК бит_мто_ЗаявкаНаПотребность
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_мто_ЗаявкаНаПотребность.Товары КАК бит_мто_ЗаявкаНаПотребностьТовары
	               |		ПО бит_мто_ЗаявкаНаПотребность.Ссылка = бит_мто_ЗаявкаНаПотребностьТовары.Ссылка
	               |ГДЕ
	               |	бит_мто_ЗаявкаНаПотребность.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	РезТаблица = Результат.Выгрузить();
	
	Возврат РезТаблица;
	
КонецФункции // ПодготовитьТаблицуЗакупок()

// Процедура проверяет номенклатуру в табличной части, если тип строка
// 	пытается найти в справочнике потребности. Если не находит создает новый элемент 
// 	с таким наименованием.
// 
Процедура ОбработатьНоменклатуруТабличнойЧастиТовары()

	ПроверкаДублей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаПотребностьТовары.Номенклатура КАК Номенклатура,
	               |	ЗаявкаНаПотребностьТовары.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	&Товары КАК ЗаявкаНаПотребностьТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	бит_мто_Потребности.Ссылка КАК Потребность,
	               |	Товары.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Товары КАК Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_мто_Потребности КАК бит_мто_Потребности
	               |		ПО Товары.Номенклатура = бит_мто_Потребности.Наименование
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(Товары.Номенклатура) = ТИП(СТРОКА)";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = Товары[Выборка.НомерСтроки - 1];
		Дубль = ПроверкаДублей[Строка.Номенклатура];
		
		Если ЗначениеЗаполнено(Выборка.Потребность) Тогда
			НоваяНоменклатура = Выборка.Потребность;
		ИначеЕсли Дубль <> Неопределено Тогда 
			НоваяНоменклатура = Дубль;
		Иначе	
			СпрОб = Справочники.бит_мто_Потребности.СоздатьЭлемент();
			СпрОб.Наименование = Строка.Номенклатура;
			бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОб,,"Ошибки");
			НоваяНоменклатура = СпрОб.Ссылка;
			ПроверкаДублей.Вставить(СпрОб.Наименование, СпрОб.Ссылка);
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.бит_мто_Потребности"));
		Описание = Новый ОписаниеТипов(МассивТипов);
		Строка.Номенклатура = Описание.ПривестиЗначение();
		Строка.Номенклатура = НоваяНоменклатура;
		
	КонецЦикла;

КонецПроцедуры // ОбработатьНоменклатуруТабличнойЧастиТовары()

// Процедура выполняет движения по регистру бит_мто_ПотребностьНоменклатуры.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
Процедура ДвиженияПоРегиструПотребностьНоменклатуры(СтруктураШапкиДокумента)

	Для каждого НаборЗаписей Из Движения Цикл
	
		НаборЗаписей.Записывать = Истина;
	
	КонецЦикла; 

	НаборЗаписей = Движения.бит_мто_ПотребностиНоменклатуры; 
	 
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого Строка Из Товары Цикл
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация 			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ДокументПланирования = СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижений.Номенклатура			= Строка.Номенклатура;
		
		// Изменение кода. Начало. 04.10.2016{{
		Если ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги
			И Строка.Количество = 0 Тогда
		
			СтрокаДвижений.Количество = 1;
			
		Иначе	
			СтрокаДвижений.Количество = Строка.Количество;
		КонецЕсли; 
		// Изменение кода. Конец. 04.10.2016}}
		
	КонецЦикла; 
	
	НаборЗаписей.мПериод          = СтруктураШапкиДокумента.ДатаЗакупкиПлан;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ВыполнитьПриход();

КонецПроцедуры // ДвиженияПоРегиструПотребностьНоменклатуры()

// Процедура выполняет движения по регистру бит_мто_ПотребностиНоменклатурыАналитика.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  ТаблицаТовары            - ТаблицаЗначений.
//  Отказ                    - Булево.
// 
Процедура ДвиженияПоРегиструПотребностиНоменклатурыАналитика(СтруктураШапкиДокумента, ТаблицаПотребности)

	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Упр,Регл"));
	
	// Выполнение движений
	ТаблицаДвижений = Движения.бит_мто_ПотребностиНоменклатурыАналитика.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого Стр Из ТаблицаПотребности Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.ДокументПланирования = ЭтотОбъект.Ссылка;
		
		НоваяСтрока.СтатьяОборотов = СтруктураШапкиДокумента.СтатьяОборотов;
		НоваяСтрока.ЦФО = СтруктураШапкиДокумента.ЦФО;
		НоваяСтрока.Проект = СтруктураШапкиДокумента.Проект;
		НоваяСтрока.НоменклатурнаяГруппа = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		
		МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
		
		Для н = 1 По МаксКолвоДопАналитик Цикл
			НоваяСтрока["Аналитика_"+н]  = СтруктураШапкиДокумента["Аналитика_"+н];
		КонецЦикла;	
	   
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(НоваяСтрока,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
	КонецЦикла; 
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
	
		Движения.бит_мто_ПотребностиНоменклатурыАналитика.Записывать = Истина;
		Движения.бит_мто_ПотребностиНоменклатурыАналитика.мТаблицаДвижений = ТаблицаДвижений;
		Движения.бит_мто_ПотребностиНоменклатурыАналитика.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегиструПотребностиНоменклатурыАналитика()

#КонецОбласти 

#Область Инициализация

ПолучитьСтатусМодуль();

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
мТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

мНастройкиПрограммы = Новый Соответствие;

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

мРежимОбновленияВиз = Константы.бит_РежимОбновленияПеречняВиз.Получить();

// Хранилище должно быть доступно и в объекте и в форме, поэтому определим его сразу.
мАдресХранилищаСтрокПревышения = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);

#КонецОбласти 

#КонецЕсли
