
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	фМаксимальноеКоличествоАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоИзмеренийПроизвольныхПараметров();
	ОформитьАналитики();
    	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьНастройкиОформления();	
	 
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_УстановкаЗначенийПроизвольныхПараметров";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроизвольныеПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПроизвольныеПараметры.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные.ЗначениеПараметра) = Тип("Число") Тогда
		ФорматЧисла = ПолучитьФорматРедактирования(ТекущиеДанные.ПолучитьИдентификатор());
		Элементы.ПроизвольныеПараметрыЗначениеПараметра.ФорматРедактирования = ФорматЧисла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеПараметрыПараметрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПроизвольныеПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ИзменениеПараметраТабличноеПоле(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;                                                                 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеПараметрыАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПроизвольныеПараметры.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ПроизвольныеПараметры", "");
	
	НастройкиИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиИзмеренийПроизвольногоПараметра(ТекущиеДанные.Параметр);
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
														  	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,НастройкиИзмерений);
		
КонецПроцедуры // ПроизвольныеПараметрыАналитика_НачалоВыбора()

&НаКлиенте
Процедура ПроизвольныеПараметрыАналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПроизвольныеПараметры.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ПроизвольныеПараметры", "");
	
	НастройкиИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиИзмеренийПроизвольногоПараметра(ТекущиеДанные.Параметр);
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
														  	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,НастройкиИзмерений);

КонецПроцедуры // ПроизвольныеПараметрыАналитика_АвтоПодбор()
														   
&НаКлиенте
Процедура ПроизвольныеПараметрыАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПроизвольныеПараметры.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ПроизвольныеПараметры", "");
	
	НастройкиИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиИзмеренийПроизвольногоПараметра(ТекущиеДанные.Параметр);
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
	                                                                       	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,НастройкиИзмерений);
	
КонецПроцедуры // ПроизвольныеПараметрыАналитика_Очистка()														   

&НаКлиенте
Процедура ПроизвольныеПараметрыЕдиницаИзмеренияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПроизвольныеПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекПараметр = ТекущиеДанные.Параметр;
		
		Если ЗначениеЗаполнено(ТекПараметр) Тогда
			ТекЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияПараметра(ТекПараметр);
			Если ТекущиеДанные.ЕдиницаИзмерения <> ТекЕдиницаИзмерения Тогда
				ТекстСообщения = Нстр("ru = 'Значение единицы измерения не соответствует значению, задонному для параметра по умолчанию (" + ТекЕдиницаИзмерения + ").'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗначенияПараметровЕдиницаИзмеренияПриИзменении()

&НаКлиенте
Процедура ПроизвольныеПараметрыЕдиницаИзмеренияОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПроизвольныеПараметрыЕдиницаИзмеренияОчистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	фКэшЗначений.Вставить("СоответствиеНастроекИзмерений", Новый Соответствие);
	      
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Функция ПолучитьЕдиницуИзмеренияПараметра(ТекПараметр)

	Возврат ТекПараметр.ЕдиницаИзмерения;
	
КонецФункции // ПолучитьЕдиницуИзмеренияПараметра()

#КонецОбласти

#Область ОформлениеСубконтоСчетовДоходовИРасходовНаСервере

&НаСервере
Функция ПолучитьНастройкиИзмеренийСтроки(ТекПараметр)

	СоответствиеНастроекИзмерений = фКэшЗначений.СоответствиеНастроекИзмерений;
	НастройкиИзмерений = СоответствиеНастроекИзмерений.Получить(ТекПараметр);
	
	Если НастройкиИзмерений = Неопределено Тогда
		
		НастройкиИзмерений = ?(ЗначениеЗаполнено(ТекПараметр)
							, бит_МеханизмДопИзмерений.ПолучитьНастройкиИзмеренийПроизвольногоПараметра(ТекПараметр)
							, Неопределено);
		
	    СоответствиеНастроекИзмерений.Вставить(ТекПараметр, НастройкиИзмерений);
		фКэшЗначений.Вставить("СоответствиеНастроекИзмерений", Новый Соответствие);
		
	КонецЕсли; 	

	Возврат НастройкиИзмерений;
	
КонецФункции // ПолучитьНастройкиИзмеренийСтроки()

&НаСервере
Процедура УстановитьПараметрыОформления(СтрокаТаблицы, НастройкиИзмерений)

	ТекПараметр = СтрокаТаблицы.Параметр;
	
	Если ЗначениеЗаполнено(ТекПараметр) Тогда
		
		СтрокаТаблицы.КоличествоДоступныхАналитик = НастройкиИзмерений.Количество(); 		
		СтрокаТаблицы.ЭтоИзменяемаяЕдИзм = ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) И ТипЗнч(СтрокаТаблицы.ЕдиницаИзмерения) = Тип("СправочникСсылка.Валюты");
		
		Если ТипЗнч(СтрокаТаблицы.ЗначениеПараметра) = Тип("Число") Тогда
			
			// Структура оформления
			КвЧисла     = СтрокаТаблицы.Параметр.ТипЗначения.КвалификаторыЧисла;
			ФорматЧисла = "ЧЦ=" + Строка(КвЧисла.Разрядность) + "; ЧДЦ=" + Строка(КвЧисла.РазрядностьДробнойЧасти);
			СтруктураОформления = Новый Структура("Формат", ФорматЧисла);
			// Структура условия		
			СтруктураУсловия = Новый Структура("УсловиеЛевое, УсловиеПравое"
												, Новый ПолеКомпоновкиДанных("Объект.ПроизвольныеПараметры.Параметр")
												, ТекПараметр);
			// Массив оформляемых полей
			МассивОформляемыхПолей = Новый Массив;
			МассивОформляемыхПолей.Добавить("ПроизвольныеПараметрыЗначениеПараметра");
												
			// Структура условного оформления	
			СтруктураУО = Новый Структура("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей" 
											, СтруктураОформления 
											, СтруктураУсловия
											, МассивОформляемыхПолей);	
											
			бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление, "Значения параметров", СтруктураУО);
			      		
		КонецЕсли;
						
	Иначе
		
		СтрокаТаблицы.КоличествоДоступныхАналитик = 0;		
		СтрокаТаблицы.ЭтоИзменяемаяЕдИзм = Ложь;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыОформленияПоСчету()

&НаСервере
Процедура ПривестиЗначения(Контейнер, НастройкиИзмерений, ИмяАналитики, МаксКоличествоАналитик, ЭтоИзменениеПараметра = Ложь)
	
	Если НастройкиИзмерений = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Значение параметра, единица измерения
	ТекПараметр = Контейнер.Параметр;
	Если ТекПараметр = Неопределено Тогда
	    Контейнер.ЗначениеПараметра = Неопределено;
		Контейнер.ЕдиницаИзмерения  = Неопределено;
	Иначе
		ТипЗначенияПараметра 		= ТекПараметр.ТипЗначения;
		Контейнер.ЗначениеПараметра = ТипЗначенияПараметра.ПривестиЗначение(Контейнер.ЗначениеПараметра);
		Если ЭтоИзменениеПараметра Тогда
		 	Контейнер.ЕдиницаИзмерения  = ТекПараметр.ЕдиницаИзмерения;
		КонецЕсли;		
	КонецЕсли;

	// Значение аналитик
	Для Ном = 1 По МаксКоличествоАналитик Цикл
		
		ИмяРеквизита = ИмяАналитики + Ном;
		СтруктураАналитики = НастройкиИзмерений.Получить(ИмяРеквизита);
		
		Если СтруктураАналитики = Неопределено Тогда
			Контейнер[ИмяРеквизита] = Неопределено;
		Иначе
		    Контейнер[ИмяРеквизита] = СтруктураАналитики.ТипЗначения.ПривестиЗначение(Контейнер[ИмяРеквизита]);
			Если ЭтоИзменениеПараметра Тогда
				Контейнер[ИмяРеквизита] = СтруктураАналитики.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ОформитьАналитики()

	бит_РаботаСДиалогамиСервер.УдалитьЭлементыОформленияПоПредставлению("Оформление субконто таблицы" , УсловноеОформление);
	
	// Установка параметров оформления по счету
	Для каждого СтрокаТаблицы Из Объект.ПроизвольныеПараметры Цикл 		
		
		НастройкиИзмерений = ПолучитьНастройкиИзмеренийСтроки(СтрокаТаблицы.Параметр);
		
		ПривестиЗначения(СтрокаТаблицы, НастройкиИзмерений, "Аналитика_", фМаксимальноеКоличествоАналитик);		
				
		УстановитьПараметрыОформления(СтрокаТаблицы, НастройкиИзмерений);
		  		
	КонецЦикла;
		
	// Настройки оформления для полей субконто
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															, "ПроизвольныеПараметры"
															, "Аналитика_"
															, "КоличествоДоступныхАналитик"
															, фМаксимальноеКоличествоАналитик);
	
КонецПроцедуры // ОформитьСубконтоСчетовМСФО()

&НаСервере
Процедура ВосстановитьНастройкиОформления()

	Для каждого СтрокаТаблицы Из Объект.ПроизвольныеПараметры Цикл
		
		НастройкиИзмерений = ПолучитьНастройкиИзмеренийСтроки(СтрокаТаблицы.Параметр);
		
		УстановитьПараметрыОформления(СтрокаТаблицы, НастройкиИзмерений);
				
	КонецЦикла;	

КонецПроцедуры // ВосстановитьНастройкиОформления()

&НаСервере
Процедура ИзменениеПараметраТабличноеПоле(Идентификатор)
	
	ТекущиеДанные = Объект.ПроизвольныеПараметры.НайтиПоИдентификатору(Идентификатор);
		
	НастройкиИзмерений = ПолучитьНастройкиИзмеренийСтроки(ТекущиеДанные.Параметр);
	
	ПривестиЗначения(ТекущиеДанные, НастройкиИзмерений, "Аналитика_", фМаксимальноеКоличествоАналитик, Истина);		
	
	УстановитьПараметрыОформления(ТекущиеДанные, НастройкиИзмерений);
	
КонецПроцедуры // ИзменениеСчетаТабличноеПоле()

&НаСервере 
Функция ПолучитьФорматРедактирования(Идентификатор)
	
	ТекущиеДанные = Объект.ПроизвольныеПараметры.НайтиПоИдентификатору(Идентификатор);
	
	КвЧисла     = ТекущиеДанные.Параметр.ТипЗначения.КвалификаторыЧисла;
	ФорматЧисла = "ЧЦ=" + Строка(КвЧисла.Разрядность) + "; ЧДЦ=" + Строка(КвЧисла.РазрядностьДробнойЧасти);   	
	
	Возврат ФорматЧисла;
	
КонецФункции // ПолучитьФорматРедактирования()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

#КонецОбласти

#КонецОбласти
