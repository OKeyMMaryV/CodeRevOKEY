#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
                       			
		// Заполнение шапки
		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
		                                               , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
													   , Неопределено);
	
	КонецЕсли;
		
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
               

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	// Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка
	// , Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
	// 	Возврат
	// КонецЕсли;	
	// ПроверкаРеквизитов(Отказ,Заголовок);  	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект); 	
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента();
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);
	КонецЕсли;
               
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция готовит таблицы документа для проведения.
// 
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицыДокумента()  Экспорт
	
	СтруктураТаблиц = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПроизвольныеПараметры.НомерСтроки,
	|	ПроизвольныеПараметры.Период,
	|	ПроизвольныеПараметры.Параметр,
	|	ПроизвольныеПараметры.ЕдиницаИзмерения,
	|	ПроизвольныеПараметры.Аналитика_1,
	|	ПроизвольныеПараметры.Аналитика_2,
	|	ПроизвольныеПараметры.Аналитика_3,
	|	ПроизвольныеПараметры.Аналитика_4,
	|	ПроизвольныеПараметры.ЗначениеПараметра
	|ИЗ
	|	Документ.бит_УстановкаЗначенийПроизвольныхПараметров.ПроизвольныеПараметры КАК ПроизвольныеПараметры
	|ГДЕ
	|	ПроизвольныеПараметры.Ссылка = &Ссылка
	|";
	Результат = Запрос.Выполнить();
	
	ТаблицаПроизвольныхПараметров = Результат.Выгрузить();	
	
	СтруктураТаблиц.Вставить("ПроизвольныеПараметры", ТаблицаПроизвольныхПараметров);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицуБДДС()

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок)
	
	Движения.бит_ЗначенияПроизвольныхПараметровРегистратор.Записывать = Истина;
	Движения.бит_ЗначенияПроизвольныхПараметровРегистратор.Очистить();
	
	Для Каждого ТекСтрокаТч Из СтруктураТаблиц.ПроизвольныеПараметры Цикл
		Движение = Движения.бит_ЗначенияПроизвольныхПараметровРегистратор.Добавить();
		Движение.Сценарий = СтруктураШапкиДокумента.Сценарий;
		ЗаполнитьЗначенияСвойств(Движение, ТекСтрокаТч);
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#КонецЕсли
