
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	ЕстьСправочникКассы = Метаданные.Справочники.Найти("Кассы") <> Неопределено;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Организация");

	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_УстановкаНеснижаемыхОстатков";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,,Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтараяОрганизация = мКэшРеквизитовФормы.Организация;
		
	Если СтараяОрганизация <> Объект.Организация 
		И Объект.НеснижаемыеОстатки.Количество() > 0 Тогда
				
		ТекстСообщения = Нстр("ru = 'Табличная часть будет очищена. Продолжить?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОрганизацияПриИзменении", ЭтотОбъект, СтараяОрганизация);
		ПоказатьВопрос(ОповещениеВопрос, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
				
	Иначе
		
		ДобавитьВКэш("Организация");
	
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросОрганизацияПриИзменении(Ответ, СтараяОрганизация) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеснижаемыеОстатки.Очистить();
	Иначе
		Объект.Организация = СтараяОрганизация;
	КонецЕсли; 

	ДобавитьВКэш("Организация");

КонецПроцедуры // ВопросОрганизацияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНеснижаемыеОстатки

&НаКлиенте
Процедура НеснижаемыеОстаткиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо заполнить организацию'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НеснижаемыеОстаткиБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.НеснижаемыеОстатки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// ++ БП 
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		СтруктураПараметров = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец"       	  , Объект.Организация);
		СтруктураПараметров.Вставить("ТекущийЭлемент" , ТекущиеДанные.БанковскийСчет);
		СтруктураПараметров.Вставить("Отбор", Отбор);
		СтруктураПараметров.Вставить("ЗакрыватьПриВыборе", Истина);
			
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", СтруктураПараметров, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе	
		
		ТекстСообщения = Нстр("ru = 'Необходимо заполнить организацию'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли;
	// -- БП 
	
КонецПроцедуры // НеснижаемыеОстаткиБанковскийСчетНачалоВыбора()

&НаКлиенте
Процедура НеснижаемыеОстаткиБанковскийСчетАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.НеснижаемыеОстатки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		СтандартнаяОбработка = Истина;
		
	Иначе	
		
		ТекстСообщения = Нстр("ru = 'Необходимо заполнить организацию'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // НеснижаемыеОстаткиБанковскийСчетАвтоПодбор()

&НаКлиенте
Процедура НеснижаемыеОстаткиБанковскийСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НеснижаемыеОстатки.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.БанковскийСчет) Тогда
		// ++ БП 
		Если ТипЗнч(ТекущиеДанные.БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ДанныеПоБанковскому = ПолучитьДанныеПоБанковскомуСчету(ТекущиеДанные.БанковскийСчет);
			ТекущиеДанные.НомерСчета = ДанныеПоБанковскому.НомерСчета;
			ТекущиеДанные.Валюта 	 = ДанныеПоБанковскому.Валюта;
		Иначе
			ПолучитьДанныеПоКассе(Неопределено);
		КонецЕсли;
		// -- БП 
	КонецЕсли;
	
КонецПроцедуры // НеснижаемыеОстаткиБанковскийСчетПриИзменении()

&НаКлиенте
Процедура НеснижаемыеОстаткиБанковскийСчетОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НеснижаемыеОстатки.ТекущиеДанные;
	
	ТекущиеДанные.НомерСчета = "";
	ТекущиеДанные.Валюта 	 = фКэшЗначений.ПустаяВалюта;
	
КонецПроцедуры // НеснижаемыеОстаткиБанковскийСчетОчистка()

&НаКлиенте
Процедура НеснижаемыеОстаткиСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НеснижаемыеОстатки.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
		
		Если ЭтотСчетВалютный(ТекущиеДанные.СчетУчета) Тогда
			ТекущиеДанные.Валюта = фКэшЗначений.ПустаяВалюта;
		Иначе
			ТекущиеДанные.Валюта = фКэшЗначений.ВалютаРеглУчета;
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры // НеснижаемыеОстаткиСчетУчетаПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	// Валюта регламентированного учета
	фКэшЗначений.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	фКэшЗначений.Вставить("ПустаяВалюта"   , Справочники.Валюты.ПустаяСсылка());
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Функция ПолучитьДанныеПоБанковскомуСчету(БанковскийСчет)

	Результат = Новый Структура("НомерСчета, Валюта", 
							БанковскийСчет.НомерСчета,
							БанковскийСчет.ВалютаДенежныхСредств);	

	Возврат Результат;
	
КонецФункции // ПолучитьДанныеПоБанковскомуСчету()

&НаСервере
Функция ПолучитьДанныеПоКассе(Касса)

	// ++ БП 
	Совместимо = Истина;
	// -- БП 
	
КонецФункции

&НаСервере
Функция ЭтотСчетВалютный(СчетУчета)

	СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
    	
	Возврат СвСч.Валютный;
	
КонецФункции // ЭтотСчетВалютный()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#КонецОбласти
