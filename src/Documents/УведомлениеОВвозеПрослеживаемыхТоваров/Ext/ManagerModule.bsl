#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ПрослеживаемостьПереопределяемый.ТекстЗапросаТаблицаТоваров(НомераТаблиц, ДокументСсылка);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"УведомлениеОВвозеПрослеживаемыхТоваров", 
			"Уведомление о ввозе прослеживаемых товаров",
			ПечатьУведомленияОВвозеПрослеживаемыхТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "УведомлениеОВвозеПрослеживаемыхТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Печать'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Уведомление о ввозе прослеживаемых товаров'");
	КомандаПечати.Обработчик     = "ПрослеживаемостьФормыКлиент.ВыполнитьКомандуПечатиУведомленияОВвозеПрослеживаемыхТоваров";
	КомандаПечати.СписокФорм     = "ФормаДокумента,ФормаСписка";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьУведомленияОВвозеПрослеживаемыхТоваров(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = ПодготовитьТаблицыУведомленияОВвозеПрослеживаемыхТоваров(МассивОбъектов);
	
	Возврат ТабДокумент;

КонецФункции

Функция ВыгрузитьУведомлениеОВвозеПрослеживаемыхТоваров(Документ) Экспорт
	
	ПараметрыВыгрузки = ПараметрыУведомления(Документ);
	
	Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(ПараметрыВыгрузки);
	
	Если Контейнер.Свойство("Ошибки") 
		И Контейнер.Ошибки.Количество() > 0 Тогда
		
		Возврат Новый Структура("АдресФайлаВыгрузки,ИмяФайлаВыгрузки,Ошибки",
					Контейнер.АдресФайлаВыгрузки, Контейнер.ИмяФайлаВыгрузки, Контейнер.Ошибки);
	
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизиты(Контейнер, Документ);
	
	ЗаполнитьРаздел1(Контейнер.Раздел1, Документ);
	
	Результат = ИнтерфейсыВзаимодействияБРО.ВыгрузитьДанныеАлгоритмамиРегламентированногоОтчета(Контейнер);
	
	Возврат Новый Структура("АдресФайлаВыгрузки,ИмяФайлаВыгрузки,Ошибки",
					Результат.АдресФайлаВыгрузки, Результат.ИмяФайлаВыгрузки, Результат.Ошибки);
	
КонецФункции

Функция ЗаполнитьДополнительныеРеквизиты(Контейнер, Документ)
	
	ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Организация,Дата,Номер");
	
	Контейнер.Организация = Документ.Организация;
	Контейнер.НалоговыйОрган = ПрослеживаемостьПереопределяемый.КодГосударственногоОрганаОрганизации(
			ПараметрыДокумента.Организация);
			
	Контейнер.ДатаУведомления = ПараметрыДокумента.Дата;
	Контейнер.ДатаПодписи = ПараметрыДокумента.Дата;
	
	Контейнер.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыДокумента.Организация, "КПП");
	Контейнер.НомерУведомления = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДокумента.Номер, Истина, Ложь);
	Контейнер.ДатаУведомления = ПараметрыДокумента.Дата;
	
КонецФункции

Процедура ЗаполнитьРаздел1(ТаблицаРаздел1, Документ)
	
	// Схема таблицы ТаблицаРаздел1
	// Данные - Структура данные показатели
	// ДанныеМногострочныхЧастей - - Структура - содержит таблицу П00001М1
	//
	// Структура Данные содержит: 
	//      П000010000100 - Строка - признак физического лица, возможны значения: "V" - физ. лицо; "" - организация.
	//      П000010000200 - Строка - наименование организации (1 - 1000 символов).
	//                               Заполняется, если признак физического лица не заполнен; иначе не заполняется.
	//      П000010000300 - Строка - фамилия физического лица (1 - 60 символов).
	//                               Заполняется, если признак физического лица заполнен; иначе не заполняется.
	//      П000010000400 - Строка - имя физического лица (1 - 60 символов).
	//                               Заполняется, если признак физического лица заполнен; иначе не заполняется.
	//      П000010000500 - Строка - отчество физического лица (1 - 60 символов).
	//                               Заполняется (при наличии), если признак физического лица заполнен;
	//                               иначе не заполняется.
	//      П000010000600 - Строка - код государства-члена ЕАЭС продавца (ОКСМ) (3 цифры).
	//      П000010000700 - Строка - идентификационный код (номер) продавца государства-члена ЕАЭС (8 - 14 символов).
	//      П000010000800 - Строка - адрес продавца государства-члена ЕАЭС (1 - 1000 символов).
	//      П000010000900 - Строка - код товара в соответствии с ТН ВЭД ЕАЭС (6 - 10 цифр).
	//      П000010001000 - Число  - количество товара в соответствии с сопроводительным документом
	//                               (0 - 9999999999999.999999).
	//      П000010001100 - Строка - код единицы измерения товара в соответствии с сопроводительным документом (по ОКЕИ)
	//                               (3 - 4 цифры).
	//      П000010001200 - Строка - регистрационный номер партии товара, подлежащего прослеживаемости (1 - 29 символов);
	//                               не заполняется, если НомерКорректировки равен 0.
	//      П000010001300 - Строка - код количественной единицы измерения товара (по ОКЕИ) (3 - 4 цифры).
	//      П000010001400 - Число  - количество товара, подлежащего прослеживаемости, в количественной единице измерения
	//                               товара (0 - 999999999999999.99999999999).
	//      П000010001500 - Число  - стоимость товаров (без НДС) в рублях и копейках (0 - 99999999999999999.99).
	//
	// Таблица П00001М1 содержит:
	//      Данные - Структура - показатели:
	//        П00001М100001 - Строка - вид документа, возможны значения: 1 - сф, 2 - УПД, 3 - Прочее
	//        П00001М100002 - Строка - номер сопроводительного документа.
	//        П00001М100003 - Дата   - дата сопроводительного документа.
	//

	Запрос = Новый Запрос;
	Запрос.Текст = ПрослеживаемостьПереопределяемый.ТекстЗапросаПоТаблицеТоваровУведомленияОВвозе();
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Результат = Запрос.Выполнить().Выбрать();
	Если НЕ Результат.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем шаблоны таблицы заполнения
	Раздел1 = ТаблицаРаздел1.Строки[0];
	ШаблонДанныеРазделДанные = Раздел1.Данные;
	ШаблонДанныеМногострочныхЧастейРаздел1 = Раздел1.ДанныеМногострочныхЧастей;
	
	ШаблонТаблицаП00001М1СопроводительныеДокументы = ШаблонДанныеМногострочныхЧастейРаздел1.П00001М1.Скопировать();
	ШаблонДанныеТаблицаП00001М1СопроводительныеДокументы = 
		ШаблонТаблицаП00001М1СопроводительныеДокументы.Строки[0].Данные;
		
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(ШаблонДанныеРазделДанные);
	ПрослеживаемостьФормированиеОтчетности.ОчиститьЗначенияПоказателей(
		ШаблонДанныеТаблицаП00001М1СопроводительныеДокументы);
	
	ШаблонТаблицаП00001М1СопроводительныеДокументы.Строки.Очистить();
	ТаблицаРаздел1.Строки.Очистить();
	
	Раздел1НоваяСтрока = ТаблицаРаздел1.Строки.Добавить();
	Раздел1НоваяСтрока.Данные = ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеРазделДанные);
	Раздел1НоваяСтрока.ДанныеМногострочныхЧастей = 
		ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеМногострочныхЧастейРаздел1);
	
	ДанныеРаздел1 = Раздел1НоваяСтрока.Данные;
	ДанныеМногострочныхЧастейРаздел1 = Раздел1НоваяСтрока.ДанныеМногострочныхЧастей;
	
	ДанныеМногострочныхЧастейРаздел1.П00001М1 = ШаблонТаблицаП00001М1СопроводительныеДокументы.Скопировать();
	СопроводительныеДокументы = ДанныеМногострочныхЧастейРаздел1.П00001М1;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата, Контрагент");
	КодСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.Контрагент, "СтранаРегистрации.Код");
	СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		РеквизитыДокумента.Контрагент, РеквизитыДокумента.Дата);
		
	Если СведенияОПродавце.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ДанныеРаздел1.П000010000200 = СведенияОПродавце.НаименованиеДляПечатныхФорм;
	Иначе
		ДанныеРаздел1.П000010000100 = Истина;
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОПродавце.НаименованиеДляПечатныхФорм);
		ДанныеРаздел1.П000010000300 = ФИО.Фамилия;
		ДанныеРаздел1.П000010000400 = ФИО.Имя;
		ДанныеРаздел1.П000010000500 = ФИО.Отчество;
	КонецЕсли;
	
	ДанныеРаздел1.П000010000600 = КодСтраны; //- Строка - код государства-члена ЕАЭС продавца (ОКСМ) (3 цифры).
	ДанныеРаздел1.П000010000700 = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации; // - Строка - идентификационный код (номер) продавца государства-члена ЕАЭС (8 - 14 символов).
	ДанныеРаздел1.П000010000800 = СведенияОПродавце.ЮридическийАдрес; // - Строка - адрес продавца государства-члена ЕАЭС (1 - 1000 символов).
	ДанныеРаздел1.П000010000900 = Результат["КодТНВЭД"]; // - Строка - код товара в соответствии с ТН ВЭД ЕАЭС (6 - 10 цифр).
	ДанныеРаздел1.П000010001000 = Результат["КолТоварДок"]; // - Число  - количество товара в соответствии с сопроводительным документом
							//                               (0 - 9999999999999.999999).
	ДанныеРаздел1.П000010001100 = Результат["ЕдинИзмерДок"]; // - Строка - код единицы измерения товара в соответствии с сопроводительным документом (по ОКЕИ)
															 //                               (3 - 4 цифры).
	ДанныеРаздел1.П000010001200 = ""; // - Строка - регистрационный номер партии товара, подлежащего прослеживаемости (1 - 29 символов);
						//                               не заполняется, если НомерКорректировки равен 0.
	ДанныеРаздел1.П000010001300 = Результат["ЕдинИзмерПрослеж"]; // - Строка - код количественной единицы измерения товара (по ОКЕИ) (3 - 4 цифры).
	ДанныеРаздел1.П000010001400 = Результат["КоличТоварПрослеж"]; // - Число  - количество товара, подлежащего прослеживаемости, в количественной единице измерения
								//                               товара (0 - 999999999999999.99999999999).
	ДанныеРаздел1.П000010001500 = Результат["СтТоварБезНДС"]; // - Число  - стоимость товаров (без НДС) в рублях и копейках (0 - 99999999999999999.99).
	
	// ДанныеМногострочныхЧастейРаздел1.П00001М1
	СопроводительныеДокументыНоваяСтрока = СопроводительныеДокументы.Строки.Добавить();
	СопроводительныеДокументыНоваяСтрока.Данные = 
		ПрослеживаемостьФормированиеОтчетности.НоваяСтруктура(ШаблонДанныеТаблицаП00001М1СопроводительныеДокументы);
	СопроводительныеДокументыНоваяСтрока.Данные.П00001М100001 = 2; //вид документа, возможны значения: 1 - сф, 2 - УПД, 3 - Прочее
	СопроводительныеДокументыНоваяСтрока.Данные.П00001М100002 = Результат["НомСопрДок"]; //номер сопроводительного документа.
	СопроводительныеДокументыНоваяСтрока.Данные.П00001М100003 = Результат["ДатаСопрДок"]; //дата сопроводительного документа.
	
КонецПроцедуры

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.РНПТ КАК РНПТ,
	|	Реквизиты.ПервичныйДокумент КАК Основание,
	|	ЛОЖЬ КАК ЭтоКорректировочноеУведомление,
	|	ЛОЖЬ КАК ПолученоПодтверждениеИзФНС
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.УведомлениеОВвозеПрослеживаемыхТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.РНПТ КАК РНПТ,
	|	Реквизиты.Основание КАК Основание,
	|	Реквизиты.ЭтоКорректировочноеУведомление КАК ЭтоКорректировочноеУведомление,
	|	Реквизиты.ПолученоПодтверждениеИзФНС КАК ПолученоПодтверждениеИзФНС
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТаблицыУведомленияОВвозеПрослеживаемыхТоваров(МассивДокументов)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 10;
	ТабДокумент.ПолеСнизу  = 10;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОВвозеПрослеживаемыхТоваров";
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущееЗначение Из МассивДокументов Цикл
		
		Результат = ПолучитьПечатнуюФормуУведомления(ТекущееЗначение);
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		ТабДокумент.Вывести(Результат);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьПечатнуюФормуУведомления(Документ) Экспорт
	
	ПараметрыПечати = ПараметрыУведомления(Документ);
	
	Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(ПараметрыПечати);
	
	Если Контейнер.Свойство("Ошибки") 
		И Контейнер.Ошибки.Количество() > 0 Тогда
		
		Возврат Новый ТабличныйДокумент;
	
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизиты(Контейнер, Документ);
	
	ЗаполнитьРаздел1(Контейнер.раздел1, Документ);
	
	Результат = ИнтерфейсыВзаимодействияБРО.ПечатныйБланкСформированныйАлгоритмамиРегламентированныхОтчетов(Контейнер);
	
	Если Результат.Количество() = 0 Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Возврат ПолучитьИзВременногоХранилища(Результат[0]);
	
КонецФункции

Функция ПараметрыУведомления(Документ)
	
	ПараметрыВыгрузки = Новый Структура();
	ПараметрыВыгрузки.Вставить("ИсточникОтчета", "РегламентированныйОтчетПрослеживаемыеТоварыВвоз");
	ПараметрыВыгрузки.Вставить("ВыбраннаяФорма", "ФормаОтчета2021Кв3");
	ПараметрыВыгрузки.Вставить("ВерсияФормата",  "5.01");
	ПараметрыВыгрузки.Вставить("СсылкаНаВнешнийОбъект", Документ);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
