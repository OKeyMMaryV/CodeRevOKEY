#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//Начало_бит_Магомедов_20.07.2012

// Хранит валюту международного учета
Перем мВалютаМеждУчета Экспорт;

// Хранит количество субконто международного учета в документа
Перем мКоличествоСубконтоМУ Экспорт;

//Конец_бит_Магомедов_20.07.2012

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаПроведенияНачало(ЭтотОбъект, РежимПроведения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.бит_му_ИзменениеПараметровУчетаОС.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	ПроверкаТаблицыОС(ПараметрыПроведения.ПараметрыОсновныхСредств,ПараметрыПроведения.Реквизиты,Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Документы.бит_му_ИзменениеПараметровУчетаОС.СформироватьДвиженияФинансовыеНачисления(ПараметрыПроведения.ОсновныеСредства,
	                                                                                     ПараметрыПроведения.Платежи,
					                                                                     ПараметрыПроведения.Реквизиты,
																						 ПараметрыПроведения.СтруктураКурсыВалют,
																						 Движения, 
																						 Отказ);
																						 
	Документы.бит_му_ИзменениеПараметровУчетаОС.СформироватьДвиженияМеждународныйУчет(ПараметрыПроведения.ОсновныеСредства, 
					                                                                  ПараметрыПроведения.Реквизиты,
																					  ПараметрыПроведения.СтруктураКурсыВалют,
																					  Движения, 
																					  Отказ);
	
	Документы.бит_му_ИзменениеПараметровУчетаОС.СформироватьДвиженияПараметрыОС(ПараметрыПроведения.ПараметрыОсновныхСредств, 
			                                                                    ПараметрыПроведения.Реквизиты, 
																				Движения, 
																				Отказ);
																				
	Документы.бит_му_ИзменениеПараметровУчетаОС.СформироватьДвиженияПараметрыФинИнструментов(ПараметрыПроведения.Реквизиты, 
																							 Движения, 
																							 Отказ);
																							 
	//Начало_бит_Магомедов_20.07.2012
	// по регистру бухгалтерии бит_Дополнительный_2
	СтруктураЗаписи = Новый Структура("СчетДт, СчетКт , Объект, Содержание, Сумма");
	ТаблицаДанных = ПараметрыПроведения.ПараметрыОсновныхСредств;
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураКурсыВалют = ПараметрыПроведения.СтруктураКурсыВалют;
	Для Каждого  СтрокаТаблицы Из ТаблицаДанных Цикл
		
		//по счету учета
		СтруктураЗаписи.СчетДт = СтрокаТаблицы.СчетУчета;
		СтруктураЗаписи.СчетКт = СтрокаТаблицы.СчетУчета_старый;
		СтруктураЗаписи.Содержание = "Изменение параметров учета ОС (балансовая стоимость)"; 
		СтруктураЗаписи.Объект = СтрокаТаблицы.ОсновноеСредство.Объект;
		СтруктураЗаписи.Сумма = СтрокаТаблицы.ПервоначальнаяСтоимость;
		
		СоздатьЗаписьПоРегиструБухгалтерии(СтруктураШапкиДокумента,СтрокаТаблицы,СтруктураКурсыВалют, СтруктураЗаписи);
		
		//по счету амортизации
		Если НЕ СтрокаТаблицы.НачисленнаяАмортизация = 0 Тогда
			
			СтруктураЗаписи.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации_старый;
			СтруктураЗаписи.СчетКт = СтрокаТаблицы.СчетНачисленияАмортизации;
			СтруктураЗаписи.Содержание = "Изменение параметров учета ОС (накопленная амортизация)"; 
			СтруктураЗаписи.Объект = СтрокаТаблицы.ОсновноеСредство.Объект;
			СтруктураЗаписи.Сумма = СтрокаТаблицы.НачисленнаяАмортизация;
			
			СоздатьЗаписьПоРегиструБухгалтерии(СтруктураШапкиДокумента,СтрокаТаблицы,СтруктураКурсыВалют, СтруктураЗаписи);
			
			
		КонецЕсли;
		
		//по счету снижения
		Если НЕ СтрокаТаблицы.СуммаОбесценения = 0 Тогда
			
			СтруктураЗаписи.СчетДт = СтрокаТаблицы.СчетСниженияСтоимости_старый;
			СтруктураЗаписи.СчетКт = СтрокаТаблицы.СчетСниженияСтоимости;
			СтруктураЗаписи.Содержание = "Изменение параметров учета ОС (накопленный убыток)"; 
			СтруктураЗаписи.Объект = СтрокаТаблицы.ОсновноеСредство.Объект;
			СтруктураЗаписи.Сумма = СтрокаТаблицы.СуммаОбесценения;

			СоздатьЗаписьПоРегиструБухгалтерии(СтруктураШапкиДокумента,СтрокаТаблицы,СтруктураКурсыВалют, СтруктураЗаписи);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	
	//Изменение класса в справочнике ОС
	Для Каждого  СтрокаТаблицы Из ТаблицаДанных Цикл
		// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-11-09 (#4297) 
		//Если НЕ СтрокаТаблицы.ОсновноеСредство.БИТ_ГруппаОСУУ = СтрокаТаблицы.Класс Тогда
		Если НЕ СтрокаТаблицы.ОсновноеСредство.БИТ_ГруппаОСУУ = СтрокаТаблицы.Класс_Новый Тогда
		// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-11-09 (#4297) 
			ОбъектОС = СтрокаТаблицы.ОсновноеСредство.ПолучитьОбъект();
			ОбъектОС.БИТ_ГруппаОСУУ = СтрокаТаблицы.Класс;
			ОбъектОС.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	//Конец_бит_Магомедов_20.07.2012 
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаПроведенияЗавершение(ЭтотОбъект); 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 

	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 	 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) =  Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли; 
	
	// Заполним шапку документа значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
			
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийИзменениеПараметровУчетаОС.ИзменениеПараметровУчетаОС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	    МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("СпособПолученияСтавки");
		МассивНепроверяемыхРеквизитов.Добавить("ОсновныеСредства.Ставка");
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Проверим заполнение таб.части НематериальныеАктивы.
	ОбязательныеПоляАмортизации = Новый Структура;
	
	ОбязательныеПоляАмортизации.Вставить("МетодНачисленияАмортизации", НСтр("ru='Метод начисления амортизации'"));
	ОбязательныеПоляАмортизации.Вставить("СпособОтраженияРасходовПоАмортизации", НСтр("ru='Способ отражения расходов по амортизации'"));
	
	Для Каждого ТекущаяСтрока Из ОсновныеСредства Цикл
		
		Ном = ТекущаяСтрока.НомерСтроки-1;
		
		Если ТекущаяСтрока.НачислятьАмортизацию Тогда
			
			Для Каждого ТекущееПоле Из ОбязательныеПоляАмортизации Цикл
				
				Если Не ЗначениеЗаполнено(ТекущаяСтрока[ТекущееПоле.Ключ]) Тогда
					ТекстСообщения = НСтр("ru='Не заполнено значение реквизита ""%1%""!'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекущееПоле.Значение);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,"ОсновныеСредства["+Ном+"]."+ТекущееПоле.Ключ,Отказ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим наличие дублей в табличной части "Основные средства".	
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство");
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
	                                                                  , "ОсновныеСредства"
																	  , СтруктураОбязательныхПолей
																	  , Отказ);
																	  
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура проверят таблицу ОС на наличие принятые либо выбывшие ОС.
// 
// Параметры:
//  ТаблицаОС  - ТаблицаЗначений,
//  СтруктураШапкиДокумента - Структура,
//  Отказ      - Булево,
//  Заголовок  - Строка.
// 
Процедура ПроверкаТаблицыОС(ТаблицаОС,Реквизиты,Отказ)

	КолонкиТаблицы = ТаблицаОС.Колонки;
	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл
		
		бит_му_ВНА.ПроверитьСтрокуТаблицыОС(СтрокаТаблицы,КолонкиТаблицы,Реквизиты,Отказ);
		
	КонецЦикла; 

КонецПроцедуры // ПроверкаТаблицыОС()

#КонецОбласти

//Начало_бит_Магомедов_20.07.2012

// бит_MZyubin Функция получает параметры ОС для массива ОС или одного основного средства
//
// Параметры:
//  МассивОС  – Массив
//
// Возвращаемое значение:
// ПараметрыОС - Соответствие
//
Функция ПолучитьПараметры(ПереченьОбъектов) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"  ,Организация);
	СтруктураПараметров.Вставить("Дата"         ,Дата);
	СтруктураПараметров.Вставить("ЭтоНовый"     ,ЭтоНовый());
	СтруктураПараметров.Вставить("МоментВремени",Новый МоментВремени(Дата));
	СтруктураПараметров.Вставить("ВидДвижения"  ,Перечисления.бит_му_ВидыДвиженияОбесценения.ФормированиеРезерва);
	
	Параметры = бит_му_ВНА.ПолучитьПараметрыДляОбесцененияВНА(ПереченьОбъектов,СтруктураПараметров);
	
	Возврат Параметры;

КонецФункции //ПолучитьПараметрыОС()

// бит_MZyubin Процедура обрабатывает изменение класса ОС в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.ОсновныеСредства
//  ИзмененСчет    - Булево
//
Процедура ИзменениеКлассаМодуль(ТекущаяСтрока, ИзмененСчет = Ложь) Экспорт

   Если ТекущаяСтрока = Неопределено Тогда
   
	  Возврат;
   
   КонецЕсли; 

   Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Класс) Тогда
   
   	  Возврат;
   
   КонецЕсли; 
   
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("Класс"      ,ТекущаяСтрока.Класс);
	ПараметрыКласса = бит_му_ВНА.ПолучитьПараметрыКлассаВНА(СтруктураПараметров);
	
	МетаданныеОбъекта = Метаданные();
	
	Для каждого КиЗ Из ПараметрыКласса Цикл
		
		ИмяКолонки = КиЗ.Ключ;
		
		Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента(ИмяКолонки,МетаданныеОбъекта,"ОсновныеСредства") Тогда
			
			ТекущаяСтрока[ИмяКолонки] = КиЗ.Значение;
			
			Если ИмяКолонки = "СчетУчета" Тогда
				
				ИзмененСчет = Истина;
				
			КонецЕсли; 
			
		КонецЕсли;  // есть реквизит ТЧ
		
	КонецЦикла; // по параметрам класса
	

КонецПроцедуры // ИзменениеКласса()

// бит_MZyubin Процедура формирует проводку по формированию резерва/возврату обесценения ОС
//
// Параметры:
//  СтруктураШапкиДокумента  – Структура
//  СтрокаТаблицы            - СтрокаТаблицыЗначений
//  ВалютаМУ                 - СправочникСсылка.Валюты
//  СтруктураКурсыВалют      - Структура
//                
Процедура СоздатьЗаписьПоРегиструБухгалтерии(СтруктураШапкиДокумента,СтрокаТаблицы,СтруктураКурсыВалют, СтруктураЗаписи)

	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// заполнение атрибутов записи	
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										   ,СтруктураШапкиДокумента.Организация
										   ,СтруктураШапкиДокумента.Дата
										   ,мВалютаМеждУчета
										   ,
										   ,
										   ,СтруктураЗаписи.Сумма
										   ,СтруктураЗаписи.Содержание);
										   
										   
	
	СтруктураПараметров["СчетДт"]  = СтруктураЗаписи.СчетДт;
	СтруктураПараметров["СчетКт"]  = СтруктураЗаписи.СчетКт;
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	//заполнение субконто
		//Дт
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["СчетДт"]
	                                            ,Запись["СубконтоДт"]
												,"ОсновныеСредства"
												,СтрокаТаблицы.ОсновноеСредство);		
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["СчетДт"]
	                                            ,Запись["СубконтоДт"]
												,"Объект"
												,СтруктураЗаписи.Объект);
		//Кт											
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["СчетКт"]
	                                            ,Запись["СубконтоКт"]
												,"ОсновныеСредства"
												,СтрокаТаблицы.ОсновноеСредство);		
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["СчетКт"]
	                                            ,Запись["СубконтоКт"]
												,"Объект"
												,СтруктураЗаписи.Объект);
	//
	Запись.ВидДвиженияМСФО = СтрокаТаблицы.ВидДвиженияМСФО;
	// выполнение валютных пересчетов	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("СуммаВзаиморасчеты");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
													,Запись
													,МассивИмен
													,СтруктураКурсыВалют
													,СтруктураКурсыВалют.Документ, МассивИсключений);
													
	
КонецПроцедуры //СоздатьЗаписьПоСписаниюАмортизации()

Процедура ПроверитьсоответствиеПараметровКлассаНМА(ТекущаяСтрока, ТекстВозврат = Неопределено) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Класс) Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("Класс"      ,ТекущаяСтрока.Класс);
	ПараметрыКласса = бит_му_ВНА.ПолучитьПараметрыКлассаВНА(СтруктураПараметров);
	
	МетаданныеОбъекта = Метаданные();
		
	Для каждого КиЗ Из ПараметрыКласса Цикл
		
		ИмяКолонки = КиЗ.Ключ;
		
		Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента(ИмяКолонки,МетаданныеОбъекта,"ОсновныеСредства") Тогда
			
			СинонимКолонки = МетаданныеОбъекта.ТабличныеЧасти["ОсновныеСредства"].Реквизиты.Найти(ИмяКолонки).Синоним;
			
			//БИТ Тртилек 20.11.2012 уберем из проверки СПИ в случае, если в параметрах класса не заданы оба срока полезного использования
			Если Киз.Ключ = "СрокПолезногоИспользования" Тогда
				СПИ = Киз.Значение;
				СПИМакс = 0;
				Если ПараметрыКласса.Свойство("СрокПолезногоИспользованияМаксимальный") Тогда
					СПИМакс =  ПараметрыКласса.СрокПолезногоИспользованияМаксимальный; 
				КонецЕсли;
				
				Если СПИ = 0 и СПИМакс=0 Тогда
					Продолжить;
				КонецЕсли;
				
				
				Если ТекущаяСтрока.СрокПолезногоИспользования >= СПИ
					И ТекущаяСтрока.СрокПолезногоИспользования <= СПИМакс Тогда
					Продолжить;
				КонецЕсли;
				
				
			КонецЕсли;
			//БИТ Тртилек
			
			Если НЕ ТекущаяСтрока[ИмяКолонки] = КиЗ.Значение Тогда
				
				ТекстСообщения = "Строка ("+ТекущаяСтрока.НомерСтроки+"): выбранный "+СинонимКолонки +" ОС  ("+ТекущаяСтрока[ИмяКолонки]+") не соответствует параметру <"+СинонимКолонки+"> для класса ("+ТекущаяСтрока.Класс+") ("+КиЗ.Значение+")!";
				Если НЕ ТекстВозврат = Неопределено тогда
					ТекстВозврат = ТекстВозврат + Символы.ПС + ТекстСообщения; 
				Иначе 
					Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;  // есть реквизит ТЧ
		
	КонецЦикла; // по параметрам класса
	
КонецПроцедуры

//Начало_бит_Магомедов_25.07.2012

мКоличествоСубконтоМУ = 4;

//Конец_бит_Магомедов_25.07.2012

#КонецЕсли
