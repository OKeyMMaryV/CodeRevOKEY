#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
    // Справка-расчет в валюте регл. учета.
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.Идентификатор				= "СправкаРасчетФинансовыхНачисленийРегл";
    КомандаПечати.Представление				= НСтр("ru = 'Справка-расчет в валюте регл. учета'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ВидСуммы", "Регл");
	КомандаПечати.Порядок					= 10;
	
	// Справка-расчет в валюте взаиморасчетов.
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.Идентификатор				= "СправкаРасчетФинансовыхНачисленийВзаим";
    КомандаПечати.Представление				= НСтр("ru = 'Справка-расчет в валюте взаиморасчетов'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ВидСуммы", "Взаиморасчеты");
	КомандаПечати.Порядок					= 20;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийРегл") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийРегл", НСтр("ru = 'Справка-расчет в валюте регл. учета'"), 
			ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачислений(МассивОбъектов, ПараметрыПечати),,"Отчет.бит_му_СправкаРасчетФинансовыхНачислений.Макет");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийВзаим") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийВзаим", НСтр("ru = 'Справка-расчет в валюте взаиморасчетов'"), 
			ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачислений(МассивОбъектов, ПараметрыПечати),,"Отчет.бит_му_СправкаРасчетФинансовыхНачислений.Макет");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
         
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция подготавливает параметры проведения.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.бит_НазначениеСоответствияАналитик - ссылка на документ.
//  Отказ          - Булево - признак обнаружения ошибки и отказа от дальнейших действий.
//
// Возвращаемое значение:
//  Структура - структура параметров проведения.
//
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура(); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Реквизиты.Организация КАК Организация,
	               |	Реквизиты.Подразделение КАК Подразделение,
	               |	Реквизиты.Контрагент КАК Контрагент,
	               |	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	Реквизиты.СпособПолученияСтавки КАК СпособПолученияСтавки,
	               |	Реквизиты.СчетДоходовРасходов КАК СчетДоходовРасходов,
	               |	Реквизиты.Субконто_1 КАК Субконто_1,
	               |	Реквизиты.Субконто_2 КАК Субконто_2,
	               |	Реквизиты.Субконто_3 КАК Субконто_3,
	               |	Реквизиты.Субконто_4 КАК Субконто_4,
	               |	Реквизиты.Ставка КАК Ставка,
	               |	Реквизиты.МоментВремени КАК МоментВремени,
	               |	Реквизиты.Дата КАК Период,
	               |	Реквизиты.ДоговорКонтрагента.Представление КАК ДоговорКонтрагентаПредставление,
	               |	Реквизиты.Ссылка КАК Ссылка,
	               |	Реквизиты.Дата КАК Дата,
	               |	Реквизиты.ВидОперации КАК ВидОперации,
	               |	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	               |ИЗ
	               |	Документ.бит_му_ИзменениеПараметровУчетаОС КАК Реквизиты
	               |ГДЕ
	               |	Реквизиты.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	
	СпособРасчетаЭСП = бит_му_ОбщегоНазначения.ПолучитьСпособРасчетаЭСП(Реквизиты.Организация);
	Реквизиты.Вставить("СпособРасчетаЭСП", СпособРасчетаЭСП);
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Реквизиты.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	
	// определим вариант расчета фин процентов по договору.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	СтруктураОтбора.Вставить("Параметр",           ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.ВариантРасчетаПроцентов);
    ЗначениеПараметра = РегистрыСведений.бит_му_ПараметрыФинИнструментов.ПолучитьПоследнее(Реквизиты.Период, СтруктураОтбора).ЗначениеПараметра;
	ВариантРасчетаФинансовыхПроцентов = ?(ЗначениеПараметра = Неопределено, 
	                                      Перечисления.бит_му_ВариантыРасчетаФинансовыхПроцентов.Аванс, 
										  ЗначениеПараметра);
	Реквизиты.Вставить("ВариантРасчетаФинансовыхПроцентов", ВариантРасчетаФинансовыхПроцентов);
	
	НомераТаблиц = Новый Структура(); 
	ТекстЗапроса = ТекстЗапросаВременныеТаблицы(НомераТаблиц)
	               + ТекстЗапросаОсновныеСредстваАренда(НомераТаблиц)
	               + ТекстЗапросаПлатежи(НомераТаблиц)
				   + ТекстЗапросаПараметрыОсновныхСредств(НомераТаблиц);
				 
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Ссылка",                 ДокументСсылка);
	Запрос.УстановитьПараметр("ПустоеСсылочноеЗначение",Перечисления.бит_му_МетодыНачисленияАмортизации.ПустаяСсылка());
	Запрос.УстановитьПараметр("СостояниеПринято",       Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("СостояниеВыбыло",        Перечисления.бит_му_СостоянияОС.СнятоСУчета);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла; 
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ, Взаиморасчеты");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ДокументСсылка, Реквизиты.Период, ВидыКурсов);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	СтруктураКурсыВалют.Вставить("Документ", СтруктураКурсыВалют.МУ);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	ВзаиморасчетыКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаВзаиморасчетов, 
	                                                           Реквизиты.Дата);
	СтруктураКурсыВалют.Взаиморасчеты = ВзаиморасчетыКурс;
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	ПараметрыПроведения.Вставить("СтруктураКурсыВалют", СтруктураКурсыВалют);
	
	Возврат ПараметрыПроведения;
	
КонецФункции 

// Формирует движения по регистру сведений: Параметры ОС (МСФО).
//
// Параметры:
//  ПараметрыОсновныхСредств - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Реквизиты				 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения				 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ					 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияПараметрыОС(ПараметрыОсновныхСредств, Реквизиты, Движения, Отказ) Экспорт

	Если ПараметрыОсновныхСредств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по регистру сведений бит_му_ПараметрыОС.
	КолонкиТаблицы = ПараметрыОсновныхСредств.Колонки;
	ТаблицаДанных  = ПараметрыОсновныхСредств;
	НаборЗаписей   = Движения.бит_му_ПараметрыОС;
	
	ВидыПараметров = бит_му_ВНА.ПолучитьВидыПараметров(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ОсновныеСредства);
	//Начало_бит_Магомедов_25.07.2012 
	//Удаляем ненужные параметры
	Если НЕ ВидыПараметров.Получить("ПервоначальнаяСтоимость_ОС") = Неопределено Тогда 
		ВидыПараметров.Удалить("ПервоначальнаяСтоимость_ОС");
	КонецЕсли;
	//Конец_бит_Магомедов_25.07.2012 	
	бит_му_ВНА.ЗаписатьПараметрыВНА(НаборЗаписей,Реквизиты,ТаблицаДанных,ВидыПараметров,"ОС");
		
	Движения.бит_му_ПараметрыОС.Записывать = Истина;

КонецПроцедуры

// Формирует движения по регистру сведений: Параметры фин. инуструментов (МСФО).
//
// Параметры:
//  Реквизиты		         - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		         - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			         - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияПараметрыФинИнструментов(Реквизиты, Движения, Отказ) Экспорт
	
	Если Реквизиты.ВидОперации = Перечисления.бит_му_ВидыОперацийИзменениеПараметровУчетаОС.ИзменениеПараметровУчетаОС Тогда
		Возврат;
	КонецЕсли; 
	
	Запись = Движения.бит_му_ПараметрыФинИнструментов.Добавить();
	Запись.Период				= Реквизиты.Дата;
	Запись.ДоговорКонтрагента 	= Реквизиты.ДоговорКонтрагента;
	Запись.Параметр				= ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СпособПолученияСтавки;
	Запись.ЗначениеПараметра 	= Реквизиты.СпособПолученияСтавки;
	
	Если Реквизиты.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		ИмяПараметра = "НоминальнаяСтавка"; 
	Иначе
		ИмяПараметра = "ЭффективнаяСтавка"; 
	КонецЕсли;
	
	Запись = Движения.бит_му_ПараметрыФинИнструментов.Добавить();
	Запись.Период				= Реквизиты.Дата;
	Запись.ДоговорКонтрагента 	= Реквизиты.ДоговорКонтрагента;
	Запись.Параметр				= ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов[ИмяПараметра];
	Запись.ЗначениеПараметра 	= Реквизиты.Ставка;
				
	Движения.бит_му_ПараметрыФинИнструментов.Записывать = Истина;

КонецПроцедуры

// Формирует движения по регистру накоплений: Финансовые начисления (МСФО).
//
// Параметры:
//  ОсновныеСредства	 - ТаблицаЗначений - таблица реквизитов по документу.
//  Платежи				 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Реквизиты			 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  СтруктураКурсыВалют	 - Структура		 - структура курсов валют.
//  Движения			 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ				 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияФинансовыеНачисления(ОсновныеСредства, Платежи, Реквизиты, СтруктураКурсыВалют, Движения, Отказ) Экспорт

	Если Реквизиты.ВидОперации = Перечисления.бит_му_ВидыОперацийИзменениеПараметровУчетаОС.ИзменениеПараметровУчетаОС Тогда
		Возврат;
	КонецЕсли; 
	
	Если ОсновныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ОсновныеСредства Цикл
		СформироватьНаборЗаписейПоФинансовымНачислениям(Движения, Платежи, СтрокаТаблицы, Реквизиты, СтруктураКурсыВалют);
	КонецЦикла;

	Движения.бит_му_ФинансовыеНачисления.Записывать = Истина;
	
КонецПроцедуры

// Формирует движения по регистру бухгалтерии: Журнал проводок (международный).
//
// Параметры:
//  ОсновныеСредства	 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Реквизиты			 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  СтруктураКурсыВалют	 - Структура		 - структура курсов валют.
//  Движения			 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ				 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияМеждународныйУчет(ОсновныеСредства, Реквизиты, СтруктураКурсыВалют, Движения, Отказ) Экспорт

	Если Реквизиты.ВидОперации = Перечисления.бит_му_ВидыОперацийИзменениеПараметровУчетаОС.ИзменениеПараметровУчетаОС Тогда
		Возврат;
	КонецЕсли; 
	
	Если ОсновныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ОсновныеСредства Цикл
		СформироватьЗаписиПоФинНачислениямДляРегистраБухгалтерииМУ(Движения, СтрокаТаблицы, Реквизиты, СтруктураКурсыВалют, Отказ);	
		Если Отказ Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	Движения.бит_Дополнительный_2.Записывать = Истина;
	
КонецПроцедуры

// Процедура заполняет реквизиты шапки, "Контрагент" и "ДоговорКонтрагента",
// на основании данных табличной части "ОсновныеСредства".
//
Процедура ЗаполнитьРеквизитыШапкиИзменениеПараметровУчетаОС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.бит_му_ВидыОперацийИзменениеПараметровУчетаОС.ИзменениеПараметровУчетаОСвФинансовойАренде);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка КАК Ссылка,
	|	ИзменениеПараметровУчетаОСОсновныеСредства.УдалитьКонтрагент КАК Контрагент,
	|	ИзменениеПараметровУчетаОСОсновныеСредства.УдалитьДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.бит_му_ИзменениеПараметровУчетаОС.ОсновныеСредства КАК ИзменениеПараметровУчетаОСОсновныеСредства
	|ГДЕ
	|	ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка.ВидОперации = &ВидОперации
	|	И ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И ИзменениеПараметровУчетаОСОсновныеСредства.НомерСтроки = 1
	|	И ИзменениеПараметровУчетаОСОсновныеСредства.УдалитьКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		ТекущийОбъект.Контрагент         = Выборка.Контрагент;
		ТекущийОбъект.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
		ТекущийОбъект.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийОбъект,,, РежимЗаписиДокумента.Запись);
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать документ: %1 по причине:
					|%2'"),
					Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.бит_му_ИзменениеПараметровУчетаОС, Выборка.Ссылка, ТекстСообщения);
				
			ОтменитьТранзакцию();
				
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирует проводки по финансовым начислениям.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТабличнойЧасти.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура СформироватьНаборЗаписейПоФинансовымНачислениям(Движения, Платежи, СтрокаТаблицы, Реквизиты, СтруктураКурсыВалют)
	
	Движения.бит_му_ФинансовыеНачисления.Записать();
	
	// сторно записей регистра бит_му_ФинансовыеНачисления.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент",         Реквизиты.Контрагент);		
	Запрос.УстановитьПараметр("ОсновноеСредство",   СтрокаТаблицы.ОсновноеСредство);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыеНачисления.Период КАК Период,
		|	ФинансовыеНачисления.РасходДоход КАК РасходДоход,
		|	ФинансовыеНачисления.ВидСтавки КАК ВидСтавки,
		|	ФинансовыеНачисления.ВидИсточникаЗадолженности КАК ВидИсточникаЗадолженности,
		|	ФинансовыеНачисления.Организация КАК Организация,
		|	ФинансовыеНачисления.Контрагент КАК Контрагент,
		|	ФинансовыеНачисления.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ФинансовыеНачисления.Объект КАК Объект,
		|	-ФинансовыеНачисления.СуммаРеглОборот КАК СуммаРегл,
		|	-ФинансовыеНачисления.СуммаВзаиморасчетыОборот КАК СуммаВзаиморасчеты,
		|	-ФинансовыеНачисления.ПогашеннаяСуммаФинансовыхПроцентовРеглОборот КАК ПогашеннаяСуммаФинансовыхПроцентовРегл,
		|	-ФинансовыеНачисления.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот КАК ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчеты,
		|	-ФинансовыеНачисления.НачисленнаяСуммаФинансовыхПроцентовРеглОборот КАК НачисленнаяСуммаФинансовыхПроцентовРегл,
		|	-ФинансовыеНачисления.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот КАК НачисленнаяСуммаФинансовыхПроцентовВзаиморасчеты,
		|	-ФинансовыеНачисления.СуммаПлатежаРеглОборот КАК СуммаПлатежаРегл,
		|	-ФинансовыеНачисления.СуммаПлатежаВзаиморасчетыОборот КАК СуммаПлатежаВзаиморасчеты
		|ИЗ
		|	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
		|			&НачалоПериода,
		|			,
		|			Запись,
		|			Организация = &Организация
		|				И Объект = &ОсновноеСредство
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ФинансовыеНачисления";
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.бит_му_ФинансовыеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.Сторно = Истина;
	КонецЦикла;
	
	// Набор записей регистра бит_му_ФинансовыеНачисления.
	НаборЗаписей = Движения.бит_му_ФинансовыеНачисления;
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
				
	// Сумма взаиморасчеты.
	СуммаВзаиморасчеты = СтрокаТаблицы.ТекущееОбязательство;
	
	// Сумма регл.
	ВалютаНач = СтруктураКурсыВалют.Взаиморасчеты;
	ВалютаКон = СтруктураКурсыВалют.Регл;
	СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчеты
																		, ВалютаНач.Валюта
																		, ВалютаКон.Валюта
																		, ВалютаНач.Курс
																		, ВалютаКон.Курс
																		, ВалютаНач.Кратность
																		, ВалютаКон.Кратность);
																		
	Если Реквизиты.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		ВидСтавки = Перечисления.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента;
	Иначе
		ВидСтавки = Перечисления.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"                      , Реквизиты.Период);
	СтруктураПараметров.Вставить("Организация"               , Реквизиты.Организация);
	СтруктураПараметров.Вставить("Контрагент"                , Реквизиты.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента"        , Реквизиты.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Объект"                    , СтрокаТаблицы.ОсновноеСредство);
	СтруктураПараметров.Вставить("ВариантРасчетаПроцентов"   , Реквизиты.ВариантРасчетаФинансовыхПроцентов);
	СтруктураПараметров.Вставить("ВидСтавки"                 , ВидСтавки);
	СтруктураПараметров.Вставить("ВидИсточникаЗадолженности" , Перечисления.бит_му_ВидыИсточниковЗадолженности.ОсновныеСредства);	
	СтруктураПараметров.Вставить("Стоимость"                 , СуммаРегл);
	СтруктураПараметров.Вставить("СтоимостьВзаиморасчеты"    , СуммаВзаиморасчеты);
    СтруктураПараметров.Вставить("СпособРасчетаЭСП"          , Реквизиты.СпособРасчетаЭСП);	
	СтруктураПараметров.Вставить("ИзменениеПараметровУчетаОС", Истина);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
	МассивСтрокПлатежей = Платежи.НайтиСтроки(СтруктураОтбора);
	
	ФинансовыйГрафик = ФинансовыйГрафикПоОС(Реквизиты, МассивСтрокПлатежей, СтруктураКурсыВалют["Взаиморасчеты"]);
	СтруктураПараметров.Вставить("ФинансовыйГрафик", ФинансовыйГрафик);
	
	Если Реквизиты.СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		СтруктураПараметров.Вставить("Периодичность", "День");	
		СтруктураПараметров.Вставить("Ставка", СтрокаТаблицы.Ставка);
	ИначеЕсли Реквизиты.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		СтруктураПараметров.Вставить("Ставка", СтрокаТаблицы.Ставка/12);
	Иначе
		СтруктураПараметров.Вставить("Ставка", СтрокаТаблицы.Ставка);
	КонецЕсли;
	
	бит_му_ОбщегоНазначения.СформироватьТаблицуФинансовыхНачислений(ТаблицаДвижений
																	 , СтруктураПараметров
																	 , СтруктураКурсыВалют);
																		
	// Запись проводок в регистр.
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;														
	НаборЗаписей.ДобавитьДвижение();

	ТаблицаДвижений.Очистить();
			
КонецПроцедуры

// Процедура формирует проводки по финансовым начислениям для регистров бухгалтерии.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТабличнойЧасти.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура СформироватьЗаписиПоФинНачислениямДляРегистраБухгалтерииМУ(Движения, СтрокаТаблицы, Реквизиты, СтруктураКурсыВалют, Отказ)
	
	СчетДолгосрочныхОбязательств  = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	СчетКраткосрочныхОбязательств = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация"     , Реквизиты.Организация);
	СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
	СтруктураОтбора.Вставить("Параметр",         ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
	ЗначениеПараметра = РегистрыСведений.бит_му_ПараметрыОС.ПолучитьПоследнее(Реквизиты.Период, СтруктураОтбора).ЗначениеПараметра;
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
	    СчетУчетаОС = ЗначениеПараметра;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не задан счет учета для основного средства ""%1"". Проверьте регистр сведений ""Параметры ОС (МСФО)"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.ОсновноеСредствоПредставление);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,,, Отказ);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("МомВремени", Реквизиты.Период);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПараметрыДолгосрочныйСчет.ЗначениеПараметра КАК СчетДолгосрочныхОбязательств,
		|	ПараметрыКраткосрочныйСчет.ЗначениеПараметра КАК СчетКраткосрочныхОбязательств
		|ИЗ
		|	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(
		|			&МомВремени,
		|			ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетДолгосрочныхОбязательств)) КАК ПараметрыДолгосрочныйСчет,
		|	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(
		|			&МомВремени,
		|			ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетКраткосрочныхОбязательств)) КАК ПараметрыКраткосрочныйСчет";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СчетДолгосрочныхОбязательств = Выборка.СчетДолгосрочныхОбязательств;
		СчетКраткосрочныхОбязательств = Выборка.СчетКраткосрочныхОбязательств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетДолгосрочныхОбязательств) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан счет учета долгосрочных обязательств. Проверьте регистр сведений ""Параметры финансовых инструментов (МСФО)"" по договору ""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Реквизиты.ДоговорКонтрагентаПредставление);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(СчетКраткосрочныхОбязательств) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан счет учета краткосрочных обязательств. Проверьте регистр сведений ""Параметры финансовых инструментов (МСФО)"" по договору ""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Реквизиты.ДоговорКонтрагентаПредставление);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Первоначальная стоимость старая.
	// Вадюта МСФО.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",      Реквизиты.Организация);
	СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
	СтруктураОтбора.Вставить("Параметр",         ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПервоначальнаяСтоимость_ОС);		
	ЗначениеПараметра = РегистрыСведений.бит_му_ПараметрыОС.ПолучитьПоследнее(Реквизиты.Период, СтруктураОтбора).ЗначениеПараметра;
	ПервоначальнаяСтоимостьСтарая = ?(ЗначениеПараметра = Неопределено, 0, ЗначениеПараметра);
	
	Если СтрокаТаблицы.РазницаВОценкеОбязательств < 0 Тогда
			
		СуммаВзаиморасчеты = -СтрокаТаблицы.РазницаВОценкеОбязательств;
		ВалютаНач = СтруктураКурсыВалют.Взаиморасчеты;
		ВалютаКон = СтруктураКурсыВалют.МУ;
		СуммаМУ = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчеты
																					, ВалютаНач.Валюта
																					, ВалютаКон.Валюта
																					, ВалютаНач.Курс
																					, ВалютаКон.Курс
																					, ВалютаНач.Кратность
																					, ВалютаКон.Кратность);
																				
		// 1. Признано ОС (и обязательство по аренде для принятия к учету).
		// Принятие к учету: Дт Счет учета ОС Кт Счет обязательства долгосрочный (Сумма по ОС из табличной части). 
		СтруктураПараметров = Новый Структура("Организация
		                                       |, Период
											   |, Валюта
											   |, СчетДт
											   |, СчетКт
											   |, СуммаМУ
											   |, Сумма
											   |, Количество
											   |, Содержание");
		
		СтруктураПараметров.Организация = Реквизиты.Организация;
		СтруктураПараметров.Период      = Реквизиты.Период;
		СтруктураПараметров.Валюта      = Реквизиты.ВалютаВзаиморасчетов;
		СтруктураПараметров.СчетДт      = СчетУчетаОС;
		СтруктураПараметров.СчетКт      = СчетДолгосрочныхОбязательств;
		СтруктураПараметров.СуммаМУ     = СуммаМУ;
		СтруктураПараметров.Сумма       = СуммаВзаиморасчеты;
		СтруктураПараметров.Количество  = 1;
		СтруктураПараметров.Содержание  = НСтр("ru = ''");
		
		ДвижениеПоРегиструМУ(Движения, СтруктураПараметров, Реквизиты, СтрокаТаблицы, СтруктураКурсыВалют);
		
		// 2. Реклассификация задолженности.
		// Дт Счет обязательства долгосрочный Кт Счет обязательства краткосрочный. 
		// (Сумма рекласса по графику = Сумма долгосрочной задолженности по счету - 
		// - Сумма погашения основного долга по графику до конца графика после 12 месяцев ).
		СуммаПогашения = ПолучитьСуммуПогашения(Движения, Реквизиты, СтрокаТаблицы);
		Если СуммаПогашения > 0 Тогда
			СтруктураПараметров.СчетДт = СчетДолгосрочныхОбязательств;
			СтруктураПараметров.СчетКт = СчетКраткосрочныхОбязательств;
			СтруктураПараметров.Сумма  = СуммаПогашения;
			
			ВалютаНач = СтруктураКурсыВалют.Взаиморасчеты;
			ВалютаКон = СтруктураКурсыВалют.МУ;
			СуммаПогашенияМУ = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаПогашения,
																					 ВалютаНач.Валюта,
																					 ВалютаКон.Валюта, 
																					 ВалютаНач.Курс,
																					 ВалютаКон.Курс, 
																					 ВалютаНач.Кратность,
																					 ВалютаКон.Кратность);
			
			
			СтруктураПараметров.СуммаМУ = СуммаПогашенияМУ;
			СтруктураПараметров.Содержание = НСтр("ru = 'Реклассификация задолженности'");
			
			ДвижениеПоРегиструМУ(Движения, СтруктураПараметров, Реквизиты, СтрокаТаблицы, СтруктураКурсыВалют);
		КонецЕсли; 
		
	ИначеЕсли СтрокаТаблицы.РазницаВОценкеОбязательств > 0 Тогда
		
		// текущее обязательство
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
		Запрос.УстановитьПараметр("МомВремени", Реквизиты.МоментВремени);
		Субконто = Новый Массив;
		Субконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ОсновныеСредства);
		Запрос.УстановитьПараметр("Субконто", Субконто);
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПараметрыОС.ЗначениеПараметра КАК СчетУчета
			|ПОМЕСТИТЬ СчетаУчетаОС
			|ИЗ
			|	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
			|			&МомВремени,
			|			Организация = &Организация
			|				И ОсновноеСредство = &ОсновноеСредство
			|				И Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС)) КАК ПараметрыОС
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПараметрыОС.ЗначениеПараметра
			|ИЗ
			|	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
			|			&МомВремени,
			|			Организация = &Организация
			|				И ОсновноеСредство = &ОсновноеСредство
			|				И Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_ОС)) КАК ПараметрыОС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Международный.СуммаМУОстатокКт КАК СуммаПоСчетам
			|ИЗ
			|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
			|			&МомВремени,
			|			Счет В
			|				(ВЫБРАТЬ
			|					СчетаУчетаОС.СчетУчета КАК СчетУчета
			|				ИЗ
			|					СчетаУчетаОС КАК СчетаУчетаОС),
			|			&Субконто,
			|			Субконто1 = &ОсновноеСредство) КАК Международный";
						
		РезультатЗапроса = Запрос.Выполнить();			
		Выборка = РезультатЗапроса.Выбрать();
		
		СуммаПоСчетам = 0;
		Пока Выборка.Следующий() Цикл
			СуммаПоСчетам = Выборка.СуммаПоСчетам;
		КонецЦикла;
		
		ВалютаНач = СтруктураКурсыВалют.Взаиморасчеты;
		ВалютаКон = СтруктураКурсыВалют.МУ;
		РазницаВОценкеОбязательствМУ = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.РазницаВОценкеОбязательств, 
		                                                                                     ВалютаНач.Валюта, 
																							 ВалютаКон.Валюта, 
																							 ВалютаНач.Курс, 
																							 ВалютаКон.Курс, 
																							 ВалютаНач.Кратность, 
																							 ВалютаКон.Кратность);
																					
		ДельтаСтоимостиОС = ПервоначальнаяСтоимостьСтарая - СуммаПоСчетам - РазницаВОценкеОбязательствМУ;
		
		Если ДельтаСтоимостиОС > 0 Тогда
			
			СуммаВзаиморасчеты = СтрокаТаблицы.РазницаВОценкеОбязательств;
			СуммаМУ            = РазницаВОценкеОбязательствМУ;
																					
			// 1. Признано ОС (и обязательство по аренде для принятия к учету).
			// Принятие к учету: Дт Счет учета ОС Кт Счет обязательства долгосрочный (Сумма по ОС из табличной части). 
			СтруктураПараметров = Новый Структура("Организация
			                                       |, Период
												   |, Валюта
												   |, СчетДт
												   |, СчетКт
												   |, СуммаМУ
												   |, Сумма
												   |, Количество
												   |, Содержание");
			
			СтруктураПараметров.Организация = Реквизиты.Организация;
			СтруктураПараметров.Период      = Реквизиты.Период;
			СтруктураПараметров.Валюта      = Реквизиты.ВалютаВзаиморасчетов;
			СтруктураПараметров.СчетДт      = СчетДолгосрочныхОбязательств;
			СтруктураПараметров.СчетКт      = СчетУчетаОС;
			СтруктураПараметров.СуммаМУ     = СуммаМУ;
			СтруктураПараметров.Сумма       = СуммаВзаиморасчеты;
			СтруктураПараметров.Количество  = 1;
			СтруктураПараметров.Содержание  = НСтр("ru = ''");
		
			ДвижениеПоРегиструМУ(Движения, СтруктураПараметров, Реквизиты, СтрокаТаблицы, СтруктураКурсыВалют);
			
			// 2. Реклассификация задолженности.
			// Дт Счет обязательства краткосрочный Кт Счет обязательства долгосрочный. 
			// (Сумма рекласса по графику = Сумма долгосрочной задолженности по счету - 
			// - Сумма погашения основного долга по графику до конца графика после 12 месяцев ).
			СуммаПогашения = ПолучитьСуммуПогашения(Движения, Реквизиты, СтрокаТаблицы);
			Если СуммаПогашения < 0 Тогда
				Сумма = -СуммаПогашения;
				СтруктураПараметров.СчетДт = СчетКраткосрочныхОбязательств;
				СтруктураПараметров.СчетКт = СчетДолгосрочныхОбязательств;
				СтруктураПараметров.Сумма  = Сумма;
				
				ВалютаНач = СтруктураКурсыВалют.Взаиморасчеты;
				ВалютаКон = СтруктураКурсыВалют.МУ;
				СуммаПогашенияМУ = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма,
																					     ВалютаНач.Валюта, 
																						 ВалютаКон.Валюта, 
																						 ВалютаНач.Курс, 
																						 ВалютаКон.Курс, 
																						 ВалютаНач.Кратность, 
																						 ВалютаКон.Кратность);
																						 
				СтруктураПараметров.СуммаМУ = СуммаПогашенияМУ;
				
				СтруктураПараметров.Содержание = НСтр("ru = 'Реклассификация задолженности'");
				
				ДвижениеПоРегиструМУ(Движения, СтруктураПараметров, Реквизиты, СтрокаТаблицы, СтруктураКурсыВалют);
			КонецЕсли;
			
		ИначеЕсли ДельтаСтоимостиОС < 0 Тогда
			
			Если ЗначениеЗаполнено(Реквизиты.СчетДоходовРасходов) Тогда
			
				СуммаМУОС = ПервоначальнаяСтоимостьСтарая - СуммаПоСчетам;
				СуммаМУОСПоМодулю = Макс(СуммаМУОС, -СуммаМУОС);
				
				ВалютаНач = СтруктураКурсыВалют.МУ;
				ВалютаКон = СтруктураКурсыВалют.Взаиморасчеты;
				СуммаВзаиморасчеты = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаМУОСПоМодулю
																							, ВалютаНач.Валюта
																							, ВалютаКон.Валюта
																							, ВалютаНач.Курс
																							, ВалютаКон.Курс
																							, ВалютаНач.Кратность
																							, ВалютаКон.Кратность);
																							
				// 1. Признано ОС (и обязательство по аренде для принятия к учету).
				// Принятие к учету: Дт Счет учета ОС Кт Счет обязательства долгосрочный (Сумма по ОС из табличной части). 
				СтруктураПараметров = Новый Структура("Организация
				                                       |, Период
													   |, Валюта
													   |, СчетДт
													   |, СчетКт
													   |, СуммаМУ
													   |, Сумма
													   |, Количество
													   |, Содержание");
		
				СтруктураПараметров.Организация = Реквизиты.Организация;
				СтруктураПараметров.Период      = Реквизиты.Период;
				СтруктураПараметров.Валюта      = Реквизиты.ВалютаВзаиморасчетов;
				СтруктураПараметров.СчетДт      = СчетДолгосрочныхОбязательств;
				СтруктураПараметров.СчетКт      = СчетУчетаОС;
				СтруктураПараметров.СуммаМУ     = СуммаМУОСПоМодулю;
				СтруктураПараметров.Сумма       = СуммаВзаиморасчеты;
				СтруктураПараметров.Количество  = 1;
				СтруктураПараметров.Содержание  = НСтр("ru = ''");
							
				ДвижениеПоРегиструМУ(Движения, СтруктураПараметров, Реквизиты, СтрокаТаблицы, СтруктураКурсыВалют);
				
				СуммаМУ = СтрокаТаблицы.РазницаВОценкеОбязательств - СуммаМУОСПоМодулю;
				СуммаМУПоМодулю = Макс(СуммаМУ, -СуммаМУ);
				ВалютаНач = СтруктураКурсыВалют.МУ;
				ВалютаКон = СтруктураКурсыВалют.Взаиморасчеты;
				СуммаВзаиморасчеты = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаМУПоМодулю
																							, ВалютаНач.Валюта
																							, ВалютаКон.Валюта
																							, ВалютаНач.Курс
																							, ВалютаКон.Курс
																							, ВалютаНач.Кратность
																							, ВалютаКон.Кратность);
																							
				// 2.																			
				СтруктураПараметров.СчетДт  = СчетДолгосрочныхОбязательств;
				СтруктураПараметров.СчетКт  = Реквизиты.СчетДоходовРасходов;
				СтруктураПараметров.СуммаМУ = СуммаМУПоМодулю;
				СтруктураПараметров.Сумма   = СуммаВзаиморасчеты;
				
				СтруктураПараметров.Вставить("СчетДоходовРасходов", Истина);
				
				ДвижениеПоРегиструМУ(Движения, СтруктураПараметров, Реквизиты, СтрокаТаблицы, СтруктураКурсыВалют);
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Поле ""Счет доходов/расходов"" не заполнено'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СчетДоходовРасходов", ,Отказ);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // СформироватьЗаписиПоФинНачислениямДляРегистраБухгалтерииМУ() 

// Процедура формирует движение по регистру бухгалтерии МУ.
// 
// Параметры:
//  СтруктураПараметров		 - Структура.
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТабличнойЧасти.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура ДвижениеПоРегиструМУ(Движения, СтруктураПараметров, Реквизиты, СтрокаТаблицы, СтруктураКурсыВалют)
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);
	
	// Заполним аналитику счета Дт и Кт.
	УстановитьСубконто("Дт", Запись, СтрокаТаблицы, Реквизиты);
	Если СтруктураПараметров.Свойство("СчетДоходовРасходов") Тогда
		УстановитьСубконто("Кт", Запись, СтрокаТаблицы, Реквизиты, СтруктураПараметров.СчетДоходовРасходов);
	Иначе
		УстановитьСубконто("Кт", Запись, СтрокаТаблицы, Реквизиты,);
	КонецЕсли; 
	
	Если СтруктураПараметров.Свойство("СуммаМУ") Тогда
		СтруктураПараметров.Сумма = СтруктураПараметров.СуммаМУ;
	КонецЕсли;												   
	
	// Выполним валютные пересчеты.
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("СуммаВзаиморасчеты");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
												   , Запись
												   , МассивИмен
												   , СтруктураКурсыВалют
												   , СтруктураКурсыВалют.МУ
												   , МассивИсключений);
												   
КонецПроцедуры 

// Процедура устанавливает субконто Дт для счета.
// 
// Параметры:
//  ДтКт  	  				- Строка.
//  Запись    				- Запись регистра бухгалтерии.
//  ТекСтрока 				- СтрокаТаблицыЗначений.
//  СтруктураШапкиДокумента - Структура.
// 
Процедура УстановитьСубконто(ДтКт, Запись, ТекСтрока, Реквизиты, СчетДоходовРасходов = Ложь)

	Счет 	 = Запись["Счет" 	 + ДтКт];
	Субконто = Запись["Субконто" + ДтКт];
	
    Если СчетДоходовРасходов Тогда
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		Для Ном = 1 по СвСч.КоличествоСубконто Цикл
			бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто, Ном, Реквизиты["Субконто_" + Ном]);
		КонецЦикла;
	Иначе
		бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто , "Контрагенты" ,          Реквизиты.Контрагент);	
		бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто , "ДоговорыКонтрагентов" , Реквизиты.ДоговорКонтрагента);		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто , "ОсновныеСредства" ,     ТекСтрока.ОсновноеСредство);	
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСубконто()

// Функция расчитывает сумму погашения за год.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтруктураКурсыВалют		 - Структура.
//  СтрокаТаблицы  			 - СтрокаТабличнойЧасти.
//  
// Возвращаемое значение:
//   Число.
// 
Функция ПолучитьСуммуПогашения(Движения, Реквизиты, СтрокаТаблицы)
	
	ДвиженияФинНач = Движения.бит_му_ФинансовыеНачисления;

	// Возвращаем сумму в валюте взаиморасчетов.
	// ТаблицаДвиженийФинНач = ДвиженияФинНач.Выгрузить(, "РасходДоход, Период, СуммаВзаиморасчеты, Объект");
	ТаблицаДвиженийФинНач = ДвиженияФинНач.Выгрузить(, "РасходДоход, Период, Объект, СуммаВзаиморасчеты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расход"			  , Перечисления.бит_РасходДоход.Расходование);
	Запрос.УстановитьПараметр("ДвиженияФинНач"	  , ТаблицаДвиженийФинНач);
	Запрос.УстановитьПараметр("ДатаЧерезГод"	  , КонецМесяца(ДобавитьМесяц(Реквизиты.Период, 11)));
	Запрос.УстановитьПараметр("Объект"			  , СтрокаТаблицы.ОсновноеСредство);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Обороты.Период КАК Период,
	               |	ЕСТЬNULL(Обороты.СуммаВзаиморасчеты, 0) КАК СуммаВзаиморасчеты
	               |ПОМЕСТИТЬ ТаблицаФинНач
	               |ИЗ
	               |	&ДвиженияФинНач КАК Обороты
	               |ГДЕ
	               |	Обороты.Период <= &ДатаЧерезГод
	               |	И Обороты.Объект = &Объект
				   |	И Обороты.РасходДоход = &Расход
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаФинНач.СуммаВзаиморасчеты КАК СуммаВзаиморасчеты
	               |ИЗ
	               |	ТаблицаФинНач КАК ТаблицаФинНач
	               |ИТОГИ
	               |	СУММА(СуммаВзаиморасчеты)
	               |ПО
	               |	ОБЩИЕ";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда	
		СуммаПогашения = Выборка.СуммаВзаиморасчеты;   	
	Иначе	    	
		СуммаПогашения = 0;     	
	КонецЕсли;
	
	Возврат СуммаПогашения;
	
КонецФункции // ПолучитьСуммуПогашения()

Функция ФинансовыйГрафикПоОС(Реквизиты, МассивСтрокПлатежей, ВзаиморасчетыКурсы)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	// Добавим колонки для сумм в валютах регл. учета и взаиморасчетов.
	ТаблицаДанных.Колонки.Добавить("Период", 		        	Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("СуммаПлатежаРегл", 			Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СуммаПлатежаВзаиморасчеты",	Новый ОписаниеТипов("Число"));
		
	// Пересчитаем суммы в таблице значений
	Для каждого СтрокаПлатежа Из МассивСтрокПлатежей Цикл
		
		СтрокаТаблицыДанных = ТаблицаДанных.Добавить();
		СтрокаТаблицыДанных.Период = СтрокаПлатежа.Период;
		СтрокаТаблицыДанных.СуммаПлатежаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатежа.Сумма
																									 ,Реквизиты.ВалютаВзаиморасчетов
																									 ,Реквизиты.ВалютаРеглУчета
																									 ,ВзаиморасчетыКурсы.Курс
																									 ,1
																									 ,ВзаиморасчетыКурсы.Кратность
																									 ,1);

		СтрокаТаблицыДанных.СуммаПлатежаВзаиморасчеты = СтрокаПлатежа.Сумма;
		
	КонецЦикла;
	
	ТаблицаДанных.Свернуть("Период", "СуммаПлатежаРегл, СуммаПлатежаВзаиморасчеты");
	ТаблицаДанных.Сортировать("Период");
	
	Если ТаблицаДанных.Количество()>0 Тогда
		
		Если Реквизиты.СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
			ДатаПлатежа = НачалоДня(Реквизиты.Дата);
			ПерваяСтрока = ТаблицаДанных[0];
			Если ДатаПлатежа <> НачалоДня(ПерваяСтрока.Период) Тогда
				НоваяСтрока = ТаблицаДанных.Вставить(0);
				НоваяСтрока.Период                    = ДатаПлатежа;
				НоваяСтрока.СуммаПлатежаРегл          = 0;
				НоваяСтрока.СуммаПлатежаВзаиморасчеты = 0;
			КонецЕсли; 
		Иначе
			ДатаПлатежа = НачалоМесяца(Реквизиты.Дата);
			ПерваяСтрока = ТаблицаДанных[0];
			Пока КонецМесяца(ПерваяСтрока.Период) <> КонецМесяца(ДатаПлатежа) Цикл
				НоваяСтрока = ТаблицаДанных.Вставить(0);
				НоваяСтрока.Период                    = ДатаПлатежа;
				НоваяСтрока.СуммаПлатежаРегл          = 0;
				НоваяСтрока.СуммаПлатежаВзаиморасчеты = 0;
				
				ДатаПлатежа = ДобавитьМесяц(ДатаПлатежа, 1);
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ТаблицаДанных; 
	
КонецФункции

// Функция возвращает табличный документ печатной формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать.
// 	ПараметрыПечати - Структура.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
// 
Функция ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачислений(МассивОбъектов, ПараметрыПечати)

	Результат = Новый ТабличныйДокумент;
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ТекущийДокумент = МассивОбъектов[0];
	
	Для каждого СтрокаОС Из ТекущийДокумент.ОсновныеСредства Цикл
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокумент, "Организация, Дата, Контрагент, ДоговорКонтрагента");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Организация"				, ЗначенияРеквизитов.Организация);
		СтруктураПараметров.Вставить("Контрагент"				, ЗначенияРеквизитов.Контрагент);
		СтруктураПараметров.Вставить("ДоговорКонтрагента"		, ЗначенияРеквизитов.ДоговорКонтрагента);
		СтруктураПараметров.Вставить("Объект"					, СтрокаОС.ОсновноеСредство);
		СтруктураПараметров.Вставить("НоминальнаяСтавка"        , СтрокаОС.Ставка);
		СтруктураПараметров.Вставить("ИзменениеПараметровУчетаОСДата", ЗначенияРеквизитов.Дата);
		СтруктураПараметров.Вставить("ТипДокумента"             , ТипЗнч(ТекущийДокумент));	
		
		Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("ВидСуммы") Тогда
			СтруктураПараметров.Вставить("ВидСуммы", ПараметрыПечати.ВидСуммы);
		КонецЕсли;
		
		Результат = Отчеты.бит_му_СправкаРасчетФинансовыхНачислений.СформироватьТабличныйДокумент(СтруктураПараметров, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВременныеТаблицы(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаОсновныеСредства", НомераТаблиц.Количество());	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка КАК Ссылка,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.СрокПолезногоИспользования_Старый КАК СрокПолезногоИспользования_Старый,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.НачислятьАмортизацию_Старый КАК НачислятьАмортизацию_Старый,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.НачислятьАмортизацию КАК НачислятьАмортизацию,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.МетодНачисленияАмортизации_Старый КАК МетодНачисленияАмортизации_Старый,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ПредполагаемыйОбъемПродукции_Старый КАК ПредполагаемыйОбъемПродукции_Старый,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ПредполагаемыйОбъемПродукции КАК ПредполагаемыйОбъемПродукции,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ЕдиницаИзмеренияОбъемаПродукции_Старый КАК ЕдиницаИзмеренияОбъемаПродукции_Старый,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ЕдиницаИзмеренияОбъемаПродукции КАК ЕдиницаИзмеренияОбъемаПродукции,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.КоэффициентУскорения_Старый КАК КоэффициентУскорения_Старый,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.КоэффициентУскорения КАК КоэффициентУскорения,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.СпособОтраженияРасходовПоАмортизации_Старый КАК СпособОтраженияРасходовПоАмортизации_Старый,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ЛиквидационнаяСтоимость_Старый КАК ЛиквидационнаяСтоимость_Старый,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ПервоначальнаяСтоимостьСтарая КАК ПервоначальнаяСтоимостьСтарая,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.СтавкаСтарая КАК СтавкаСтарая,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.Ставка КАК Ставка,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ТекущееОбязательствоСтарое КАК ТекущееОбязательствоСтарое,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ТекущееОбязательство КАК ТекущееОбязательство,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.РазницаВОценкеОбязательств КАК РазницаВОценкеОбязательств,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.НомерСтроки КАК НомерСтроки
					//Начало_бит_Магомедов_25.07.2012
					|	,ИзменениеПараметровУчетаОСОсновныеСредства.НачисленнаяАмортизация КАК НачисленнаяАмортизация,
					|	ИзменениеПараметровУчетаОСОсновныеСредства.СуммаОбесценения,
					|	ИзменениеПараметровУчетаОСОсновныеСредства.СчетУчета,
					|	ИзменениеПараметровУчетаОСОсновныеСредства.СчетНачисленияАмортизации,
					|	ИзменениеПараметровУчетаОСОсновныеСредства.СчетСниженияСтоимости,
					|	Значение(Перечисление.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО) КАК ВидДвиженияМСФО,
					|	ИзменениеПараметровУчетаОСОсновныеСредства.СчетУчета_старый,
					|	ИзменениеПараметровУчетаОСОсновныеСредства.СчетНачисленияАмортизации_старый,
					|	ИзменениеПараметровУчетаОСОсновныеСредства.СчетСниженияСтоимости_старый,
					|	ИзменениеПараметровУчетаОСОсновныеСредства.Класс,
					|	ИзменениеПараметровУчетаОСОсновныеСредства.Класс_старый
					//Конец_бит_Магомедов_25.07.2012
	               |ПОМЕСТИТЬ ОсновныеСредства
	               |ИЗ
	               |	Документ.бит_му_ИзменениеПараметровУчетаОС.ОсновныеСредства КАК ИзменениеПараметровУчетаОСОсновныеСредства
	               |ГДЕ
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаОсновныеСредстваАренда(НомераТаблиц)
	
	НомераТаблиц.Вставить("ОсновныеСредства", НомераТаблиц.Количество());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ПервоначальнаяСтоимостьСтарая КАК ПервоначальнаяСтоимостьСтарая,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.Ставка КАК Ставка,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ТекущееОбязательствоСтарое КАК ТекущееОбязательствоСтарое,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ТекущееОбязательство КАК ТекущееОбязательство,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.РазницаВОценкеОбязательств КАК РазницаВОценкеОбязательств,
	               |	ИзменениеПараметровУчетаОСОсновныеСредства.ОсновноеСредство.Представление КАК ОсновноеСредствоПредставление
	               |ИЗ
	               |	ОсновныеСредства КАК ИзменениеПараметровУчетаОСОсновныеСредства";
	
	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПлатежи(НомераТаблиц)
	
	НомераТаблиц.Вставить("Платежи", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИзменениеПараметровУчетаОСПлатежи.ОсновноеСредство КАК ОсновноеСредство,
	|	ИзменениеПараметровУчетаОСПлатежи.Период КАК Период,
	|	ИзменениеПараметровУчетаОСПлатежи.СуммаСтарая КАК СуммаСтарая,
	|	ИзменениеПараметровУчетаОСПлатежи.Сумма КАК Сумма
	|ИЗ
	|	Документ.бит_му_ИзменениеПараметровУчетаОС.Платежи КАК ИзменениеПараметровУчетаОСПлатежи
	|ГДЕ
	|	ИзменениеПараметровУчетаОСПлатежи.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПараметрыОсновныхСредств(НомераТаблиц) 
	
	НомераТаблиц.Вставить("ПараметрыОсновныхСредств", НомераТаблиц.Количество());
	
	ТекстЗапроса =  "ВЫБРАТЬ
	                |	ТабЧасть.ОсновноеСредство КАК ОсновноеСредство,
	                |	ТабЧасть.НомерСтроки КАК НомерСтроки,
	                |	Принятые.ДатаСостояния КАК ДатаПринятия,
	                |	Выбывшие.ДатаСостояния КАК ДатаВыбытия,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.СрокПолезногоИспользования_Старый <> ТабЧасть.СрокПолезногоИспользования
	                |			ТОГДА ТабЧасть.СрокПолезногоИспользования
	                |		ИНАЧЕ &ПустоеСсылочноеЗначение
	                |	КОНЕЦ КАК СрокПолезногоИспользования,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.НачислятьАмортизацию_Старый <> ТабЧасть.НачислятьАмортизацию
	                |			ТОГДА ТабЧасть.НачислятьАмортизацию
	                |		ИНАЧЕ &ПустоеСсылочноеЗначение
	                |	КОНЕЦ КАК НачислятьАмортизацию,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.МетодНачисленияАмортизации_Старый <> ТабЧасть.МетодНачисленияАмортизации
	                |			ТОГДА ТабЧасть.МетодНачисленияАмортизации
	                |		ИНАЧЕ &ПустоеСсылочноеЗначение
	                |	КОНЕЦ КАК МетодНачисленияАмортизации,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.ПредполагаемыйОбъемПродукции_Старый <> ТабЧасть.ПредполагаемыйОбъемПродукции
	                |			ТОГДА ТабЧасть.ПредполагаемыйОбъемПродукции
	                |		ИНАЧЕ &ПустоеСсылочноеЗначение
	                |	КОНЕЦ КАК ПредполагаемыйОбъемПродукции,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.ЕдиницаИзмеренияОбъемаПродукции_Старый <> ТабЧасть.ЕдиницаИзмеренияОбъемаПродукции
	                |			ТОГДА ТабЧасть.ЕдиницаИзмеренияОбъемаПродукции
	                |		ИНАЧЕ &ПустоеСсылочноеЗначение
	                |	КОНЕЦ КАК ЕдиницаИзмеренияОбъемаПродукции,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.КоэффициентУскорения_Старый <> ТабЧасть.КоэффициентУскорения
	                |			ТОГДА ТабЧасть.КоэффициентУскорения
	                |		ИНАЧЕ &ПустоеСсылочноеЗначение
	                |	КОНЕЦ КАК КоэффициентУскорения,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.СпособОтраженияРасходовПоАмортизации_Старый <> ТабЧасть.СпособОтраженияРасходовПоАмортизации
	                |			ТОГДА ТабЧасть.СпособОтраженияРасходовПоАмортизации
	                |		ИНАЧЕ &ПустоеСсылочноеЗначение
	                |	КОНЕЦ КАК СпособОтраженияРасходовПоАмортизации,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.ЛиквидационнаяСтоимость_Старый <> ТабЧасть.ЛиквидационнаяСтоимость
	                |			ТОГДА ТабЧасть.ЛиквидационнаяСтоимость
	                |		ИНАЧЕ &ПустоеСсылочноеЗначение
	                |	КОНЕЦ КАК ЛиквидационнаяСтоимость,
	                |	ВЫБОР
	                |		КОГДА ТабЧасть.СтавкаСтарая <> ТабЧасть.Ставка
	                |			ТОГДА ТабЧасть.Ставка
	                |		ИНАЧЕ &ПустоеСсылочноеЗначение
	                |	КОНЕЦ КАК СтавкаПроцента
					//Начало_бит_Магомедов_25.07.2012
					|	,ТабЧасть.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
					|	ТабЧасть.НачисленнаяАмортизация КАК НачисленнаяАмортизация,
					|	ТабЧасть.СуммаОбесценения,
					|	ТабЧасть.СчетУчета,
					|	ТабЧасть.СчетНачисленияАмортизации,
					|	ТабЧасть.СчетСниженияСтоимости,
					|	ЗНАЧЕНИЕ(Перечисление.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО) КАК ВидДвиженияМСФО,
					|	ТабЧасть.СчетУчета_старый,
					|	ТабЧасть.СчетНачисленияАмортизации_старый,
					|	ТабЧасть.СчетСниженияСтоимости_старый,
					|	ТабЧасть.Класс,
					|	ТабЧасть.Класс_старый
					//Конец_бит_Магомедов_25.07.2012
	                |ИЗ
	                |	ОсновныеСредства КАК ТабЧасть
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК Принятые
	                |		ПО ТабЧасть.ОсновноеСредство = Принятые.ОсновноеСредство
	                |			И ТабЧасть.Ссылка.Организация = Принятые.Организация
	                |			И (Принятые.Состояние = &СостояниеПринято)
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК Выбывшие
	                |		ПО ТабЧасть.ОсновноеСредство = Выбывшие.ОсновноеСредство
	                |			И ТабЧасть.Ссылка.Организация = Выбывшие.Организация
	                |			И (Выбывшие.Состояние = &СостояниеВыбыло)
	                |ГДЕ
	                |	ТабЧасть.Ссылка = &Ссылка
	                |	И (ТабЧасть.СрокПолезногоИспользования_Старый <> ТабЧасть.СрокПолезногоИспользования
	                |			ИЛИ ТабЧасть.НачислятьАмортизацию_Старый <> ТабЧасть.НачислятьАмортизацию
	                |			ИЛИ ТабЧасть.МетодНачисленияАмортизации_Старый <> ТабЧасть.МетодНачисленияАмортизации
	                |			ИЛИ ТабЧасть.ПредполагаемыйОбъемПродукции_Старый <> ТабЧасть.ПредполагаемыйОбъемПродукции
	                |			ИЛИ ТабЧасть.ЕдиницаИзмеренияОбъемаПродукции_Старый <> ТабЧасть.ЕдиницаИзмеренияОбъемаПродукции
	                |			ИЛИ ТабЧасть.КоэффициентУскорения_Старый <> ТабЧасть.КоэффициентУскорения
	                |			ИЛИ ТабЧасть.СпособОтраженияРасходовПоАмортизации_Старый <> ТабЧасть.СпособОтраженияРасходовПоАмортизации
	                |			ИЛИ ТабЧасть.ЛиквидационнаяСтоимость_Старый <> ТабЧасть.ЛиквидационнаяСтоимость
					//Начало_бит_Магомедов_25.07.2012
					|			ИЛИ ТабЧасть.Класс_старый <> ТабЧасть.Класс
					|			ИЛИ ТабЧасть.СчетУчета_старый <> ТабЧасть.СчетУчета
					|			ИЛИ ТабЧасть.СчетНачисленияАмортизации_старый <> ТабЧасть.СчетНачисленияАмортизации
					|			ИЛИ ТабЧасть.СчетСниженияСтоимости_старый <> ТабЧасть.СчетСниженияСтоимости
					|			ИЛИ ТабЧасть.Класс_старый <> ТабЧасть.Класс
					//Конец_бит_Магомедов_25.07.2012
	                |			ИЛИ ТабЧасть.СтавкаСтарая <> ТабЧасть.Ставка)";
					
	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();;
		
КонецФункции

#КонецОбласти

#КонецЕсли
