
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьДанныеФормы();
	КонецЕсли;
							
	// Заполнить соответствие объектов ОС и их инвентарных номеров.
	ЗаполнитьИнвентарныеНомера();
	
	ВосстановитьГрафикПлатежейОбъект();
	
КонецПроцедуры
											   
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОтобразитьВалютуМСФОНаФорме();
	ОтобразитьВалютуВзаиморасчетовНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьИнвентарныеНомера();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	СохранитьГрафикПлатежейОбъект(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ИзменениеПараметровУчетаОС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	// БИТ Тртилек 20.11.2012 Процедура - обработчик события "ПередЗаписью" формы	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТекстСоответствиеПараметровКласса = ПроверитьСоответствиеПараметровКлассаНМА_Все();
		Если НЕ ТекстСоответствиеПараметровКласса = "" Тогда 
			ТекстВопроса = ТекстСоответствиеПараметровКласса+Символы.ПС+Символы.ПС+"Продолжить проведение документа?";
			
			КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 10, , "Предупреждение", КодВозвратаДиалога.Нет); 
			Если КодВозврата = КодВозвратаДиалога.Нет ИЛИ  КодВозврата = КодВозвратаДиалога.Таймаут Тогда 
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;
	// БИТ Тртилек 20.11.2012
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Оповещение = Новый ОписаниеОповещения("ВидОперацииПриИзмененииЗавершение", ЭтотОбъект);
	Если Объект.ОсновныеСредства.Количество()>0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 
КонецПроцедуры

// Процедура - Вид операции изменение завершение.
//
// Параметры:
//  Ответ				 - КодВозвратаДиалога	 - ответ пользователя.
//  ДополнительныеПараметры	 - проивзольный	 - дополнительные параметры обработчика оповещения.
//
&НаКлиенте
Процедура ВидОперацииПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
		ТекущийВидОперации = Объект.ВидОперации;
		УправлениеФормой(ЭтотОбъект);
	Иначе
		Объект.ВидОперации = ТекущийВидОперации;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
		
	Если Объект.ВидОперации =  ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийИзменениеПараметровУчетаОС.ИзменениеПараметровУчетаОСвФинансовойАренде")
		И Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		ТекстВопрса = НСтр("ru = 'Дата документа изменена, обновить данные документа?'");
		Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияДатаПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопрса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещенияДатаПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОрганизацияПриИзмененииКлиент();
		ДоговорКонтрагентаПриИзмененииКлиент();
		ОбновитьДанныеДокументаНаСервере();
		ТекущаяДатаДокумента = Объект.Дата;
	Иначе
		Объект.Дата = ТекущаяДатаДокумента;
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
		
	ТекстВопроса = НСтр("ru = 'Оргнизация изменена, данные будут очищены, продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ЭлементШапкиПриИзмененииЗавершение", ЭтотОбъект, "Организация");
	ПоказатьВопросПользователю(Оповещение, ТекстВопроса);
		
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовРасходовПриИзменении(Элемент)
	бит_БухгалтерияКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоСчетДоходовРасходов(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура СпособПолученияСтавкиПриИзменении(Элемент)
	АрендаОСВыполнитьРасчет();
КонецПроцедуры

&НаКлиенте
Процедура СтавкаПриИзменении(Элемент)
	АрендаОСВыполнитьРасчет();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ТекстВопроса = НСтр("ru = 'Договор изменен, данные будут очищены, продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ЭлементШапкиПриИзмененииЗавершение", ЭтотОбъект, "ДоговорКонтрагента");
	ПоказатьВопросПользователю(Оповещение, ТекстВопроса);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ТекстВопроса = НСтр("ru = 'Контрагент изменен, данные будут очищены, продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ЭлементШапкиПриИзмененииЗавершение", ЭтотОбъект, "Контрагент");
	ПоказатьВопросПользователю(Оповещение, ТекстВопроса);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеСредства

&НаКлиенте
Процедура ОсновныеСредстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru='Не заполнена Организация. Добавление новых строк невозможно!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ПриИзмененииОС(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваАрендаПервоначальнаяСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	ТекущиеДанные.РазницаВОценкеОбязательств = ТекущиеДанные.ПервоначальнаяСтоимостьСтарая - ТекущиеДанные.ПервоначальнаяСтоимость;
	ТекущиеДанные.ТекущееОбязательство       = ТекущиеДанные.ТекущееОбязательствоСтарое - ТекущиеДанные.РазницаВОценкеОбязательств;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваАрендаТекущееОбязательствоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОсновныеСредстваАренда.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОсновныеСредстваАрендаСтавкаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлатежи

&НаКлиенте
Процедура ПлатежиСуммаПриИзменении(Элемент)
	Родитель = Элементы.Платежи.ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		СтрокиДерева = Родитель.ПолучитьЭлементы();
		ИтогСумма = 0;
		Для каждого СтрокаДерева Из СтрокиДерева Цикл
			ИтогСумма = ИтогСумма + СтрокаДерева.Сумма;
		КонецЦикла;
		Родитель.Сумма = ИтогСумма;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Платежи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительСтроки = Неопределено Тогда
		Возврат;	
	КонецЕсли;
		
	Если Копирование Тогда
		РодительСтроки.Сумма = РодительСтроки.Сумма + ТекущиеДанные.Сумма;
		КоллекцияСтрок = РодительСтроки.ПолучитьЭлементы();	
		
		НовСтрока        = КоллекцияСтрок.Добавить();
		НовСтрока.Сумма  = ТекущиеДанные.Сумма;
		НовСтрока.Период = ТекущиеДанные.Период;
	Иначе 
		КоллекцияСтрок = РодительСтроки.ПолучитьЭлементы();	
		НовСтрока = КоллекцияСтрок.Добавить();
	КонецЕсли;
	
	Если НЕ НовСтрока = Неопределено Тогда
		Элементы.Платежи.ТекущаяСтрока = НовСтрока.ПолучитьИдентификатор();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Платежи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительСтроки = Неопределено Тогда
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
	РодительСтроки.Сумма = РодительСтроки.Сумма - ТекущиеДанные.Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПериодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Платежи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если СпособРасчетаЭСП = ПредопределенноеЗначение("Перечисление.бит_му_СпособыРасчетаЭСП.ПоМесяцам") Тогда
		ТекущиеДанные.Период = НачалоМесяца(ТекущиеДанные.Период);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура Перерасчет(Команда)
	АрендаОСВыполнитьРасчет();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТекущейСтроке(Команда)
	
	ТекущаяСтрока = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ПриИзмененииОС(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Параметры в табличной части будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик оповещения вопроса из процедуры Заполнить.
// 
&НаКлиенте
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьОССервер();

КонецПроцедуры // ИзменениеВалютыЗавершение()

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	ОбновитьДанныеДокументаНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьДанныеФормы()

	УстановитьСостояниеДокумента();	
	
	бит_БухгалтерияКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоСчетДоходовРасходов(ЭтотОбъект));
		
    ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СтруктураКурсыМСФО = ВалютаМСФОСервер(Объект.Организация, Объект.Дата);
	ВалютаМСФО         = СтруктураКурсыМСФО.Валюта;
	КурсМСФО           = СтруктураКурсыМСФО.Курс;
	КратностьМСФО      = СтруктураКурсыМСФО.Кратность;
	
	СтруктураКурсыВзаим     = ВалютаВзаиморасчетовСервер(Объект.ДоговорКонтрагента, Объект.Дата);
	ВалютаВзаиморасчетов    = СтруктураКурсыВзаим.Валюта;
	КурсВзаиморасчетов      = СтруктураКурсыВзаим.Курс;
	КратностьВзаиморасчетов = СтруктураКурсыВзаим.Кратность;
	
	ТекущаяОрганизация   = Объект.Организация;
	ТекущийКонтрагент    = Объект.Контрагент;
	ТекущийДоговор       = Объект.ДоговорКонтрагента;
	ТекущаяДатаДокумента = Объект.Дата;
	
	ТекущийВидОперации = Объект.ВидОперации;
	СпособРасчетаЭСП   = бит_му_ОбщегоНазначения.ПолучитьСпособРасчетаЭСП(Объект.Организация);
	
	ИзменениеОбязательства = Объект.ОсновныеСредства.Итог("РазницаВОценкеОбязательств");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПользователю(Оповещение, ТекстВопроса)

	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураКурсыМСФО = ВалютаМСФОСервер(Объект.Организация, Объект.Дата);
		ВалютаМСФО         = СтруктураКурсыМСФО.Валюта;
		КурсМСФО           = СтруктураКурсыМСФО.Курс;
		КратностьМСФО      = СтруктураКурсыМСФО.Кратность;
	Иначе
		ВалютаМСФО         = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		КурсМСФО           = 1;
		КратностьМСФО      = 1;
	КонецЕсли; 
	
	ОтобразитьВалютуМСФОНаФорме();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВалютуМСФОНаФорме()

	Если ЗначениеЗаполнено(ВалютаМСФО) Тогда
		СтрокаВалютаМежУчета = НСтр("ru = '%1 = %2 %3'");
		КурсВалюты           = ?(КурсМСФО = 0, 1, КурсМСФО/КратностьМСФО);
		СтрокаВалютаМежУчета = СтрШаблон(СтрокаВалютаМежУчета, ВалютаМСФО, КурсВалюты, ВалютаРегламентированногоУчета);
		Элементы.ДекорацияВалютаМСФО.Заголовок = СтрокаВалютаМежУчета;
	Иначе
		Элементы.ДекорацияВалютаМСФО.Заголовок = НСтр("ru = 'НЕ УСТАНОВЛЕНА'");	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(ЭтотОбъект)

	Элементы = ЭтотОбъект.Элементы;
	Объект   = ЭтотОбъект.Объект;
	
	ЗаблокироватьЭлементы = ?(Объект.Проведен, Истина, Ложь);
	
	Элементы.ГруппаШапка.ТолькоПросмотр            = ЗаблокироватьЭлементы;
    Элементы.ГруппаСтраницыОсновная.ТолькоПросмотр = ЗаблокироватьЭлементы;
	
	Элементы.ОбновитьДанныеДокумента.Доступность                  = Не ЗаблокироватьЭлементы;
	Элементы.Перерасчет.Доступность                               = Не ЗаблокироватьЭлементы;
	Элементы.ОсновныеСредстваЗаполнить.Доступность                = Не ЗаблокироватьЭлементы;
	Элементы.ОсновныеСредстваЗаполнитьПоТекущейСтроке.Доступность = Не ЗаблокироватьЭлементы;
	Элементы.ПлатежиЗаполнитьПлатежи.Доступность                  = Не ЗаблокироватьЭлементы;
	
	ВидОперацииАренда = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийИзменениеПараметровУчетаОС.ИзменениеПараметровУчетаОСвФинансовойАренде");
	
	Элементы.ОбновитьДанныеДокумента.Видимость = ВидОперацииАренда;
	Элементы.Контрагент.Видимость              = ВидОперацииАренда;
	Элементы.ДоговорКонтрагента.Видимость      = ВидОперацииАренда;
	Элементы.ГруппаДанныеПоФинАренде.Видимость = ВидОперацииАренда;
	Элементы.СтраницаАренда.Видимость          = ВидОперацииАренда;
	Элементы.СтраницаПлатежи.Видимость         = ВидОперацииАренда;
    Элементы.СчетДоходовРасходов.Видимость     = ВидОперацииАренда;
	Элементы.СчетДоходовРасходов.АвтоОтметкаНезаполненного = ВидОперацииАренда;
	
	Элементы.ОсновныеСредства.ИзменятьСоставСтрок = Не ВидОперацииАренда;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьИнвентарныеНомера(ДанныеСтроки=Неопределено)
	
	СоответствиеОС_ИнвентарныйНомер = Новый Соответствие;
	
	Если ДанныеСтроки = Неопределено Тогда
		
		бит_му_ВНА.ЗаполнитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвентарныйНомер
													   ,Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство")
													   ,Объект.Организация);
													   
		Для Каждого ТекСтрока Из Объект.ОсновныеСредства Цикл
			ТекСтрока.ИнвентарныйНомер = СоответствиеОС_ИнвентарныйНомер[ТекСтрока.ОсновноеСредство];
		КонецЦикла;
		
	Иначе
		ДанныеСтроки.ИнвентарныйНомер = бит_му_ВНА.ПолучитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвентарныйНомер
																					,ДанныеСтроки.ОсновноеСредство
																					,Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОС(ИДСтроки)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОС = ПолучитьПараметрыОС(ТекущаяСтрока.ОсновноеСредство);
	ЗаполнитьСтрокуТЧПоДанным(ТекущаяСтрока,ПараметрыОС);
	
	ЗаполнитьИнвентарныеНомера(ТекущаяСтрока);
	
	//Начало_бит_Магомедов_20.07.2012
	
	ПараметрыОбъектов = РеквизитФормыВЗначение("Объект").ПолучитьПараметры(ТекущаяСтрока.ОсновноеСредство);
	
	СтрокаДанных = ПараметрыОбъектов[ТекущаяСтрока.ОсновноеСредство];
	
	//ЗаполнитьСтрокуТЧПоСтрокеДанных(ТекущаяСтрока,СтрокаДанных);
	
	//БИТ Тртилек К.И. 20.11.2012 проверим, чтобы строка не равнялась неопределено
	Если НЕ СтрокаДанных = Неопределено Тогда
		///БИТ Тртилек
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,СтрокаДанных);
		//обходим 4 субконто, ищем Объект
		//Для сч = 1 по 4 Цикл 
		//	Если ТипЗнч(СтрокаДанных["СубконтоУчета"+сч]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда 
		//		ТекущаяСтрока.бит_му_Объект_старый = СтрокаДанных["СубконтоУчета"+сч];
		//		ТекущаяСтрока.бит_му_Объект		   = СтрокаДанных["СубконтоУчета"+сч];
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;
		
		//БИТ Тртилек 20.11.2012
	Иначе
		Сообщить("Данное основное средство не было принято к учету документом ""Принятие к учету ОС МСФО"" для организации: " + Объект.Организация.Наименование, СтатусСообщения.Важное);
		ТекущаяСтрока.ОсновноеСредство = Справочники.ОсновныеСредства.ПустаяСсылка();
	КонецЕсли;
	///БИТ Тртилек
	//Конец_бит_Магомедов_25.07.2012
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОС(ОС)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     ,Объект.Организация);
	СтруктураПараметров.Вставить("ОсновноеСредство",ОС);
	СтруктураПараметров.Вставить("МоментВремени"   ,?(Параметры.Ключ.Пустая(),КонецДня(Объект.Дата),Объект.Ссылка.МоментВремени()));
	
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СрокПолезногоИспользования_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.МетодНачисленияАмортизации_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПредполагаемыйОбъемПродукции_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КоэффициентУскорения_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СпособОтраженияРасходовПоАмортизации_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ЛиквидационнаяСтоимость_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ЕдиницаИзмеренияОбъемаПродукции_ОС);	
	//Начало_бит_Магомедов_25.07.2012 
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);	
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС);	
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_ОС);	
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);	
	//Конец_бит_Магомедов_25.07.2012 
	
	СтруктураПараметров.Вставить("ПараметрыВНА",ПараметрыВНА);
	
	РезЗначения = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров,"Соответствие");
	
	Возврат РезЗначения;

КонецФункции // ПолучитьПараметрыОС()

&НаСервере
Процедура ЗаполнитьСтрокуТЧПоДанным(ТекущаяСтрока,РезЗначения)
	
	Если РезЗначения <> Неопределено И ТекущаяСтрока <> Неопределено Тогда
		
		ПараметрыОС = РезЗначения[ТекущаяСтрока.ОсновноеСредство];
		
		Если ПараметрыОС <> Неопределено Тогда
			
			Для каждого КиЗ Из ПараметрыОС Цикл
				
				ТекущееЗначение    = КиЗ.Значение;
				Параметр           = КиЗ.Ключ;
				ИмяПараметра       = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПолучитьИмяПредопределенного(Параметр); 
				ИмяРеквизита       = СтрЗаменить(ИмяПараметра,"_ОС","");
				ИмяРеквизитаСтарый = ИмяРеквизита+"_Старый";
				
				ТекущаяСтрока[ИмяРеквизита]        = ТекущееЗначение;
				ТекущаяСтрока[ИмяРеквизитаСтарый]  = ТекущееЗначение;
				
			КонецЦикла; // По параметрам 	
			
		КонецЕсли; // Есть параметры
		
	КонецЕсли; 
		
КонецПроцедуры // ЗаполнитьСтрокуТЧПоСтрокеДанных()

&НаСервере
Процедура ЗаполнитьОССервер()
	
	МассивОС = Объект.ОсновныеСредства.Выгрузить(,"ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство");
	ПараметрыОС = ПолучитьПараметрыОС(МассивОС);	
	
	Для Каждого ТекущаяСтрока Из Объект.ОсновныеСредства Цикл
		
		ЗаполнитьСтрокуТЧПоДанным(ТекущаяСтрока,ПараметрыОС);
		
	КонецЦикла;
	
	ЗаполнитьИнвентарныеНомера();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДокументаНаСервере()
	
	ЗаполнитьПлатежиНаСервере();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",           Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",   Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("НачалоПериода",        Объект.Дата);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФинансовыеНачисленияОбороты.Объект КАК ОсновноеСредство,
		|	ФинансовыеНачисленияОбороты.СуммаВзаиморасчетыОборот КАК ТекущееОбязательствоСтарое
		|ПОМЕСТИТЬ ОсновныеСредстваВАренде
		|ИЗ
		|	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
		|			&НачалоПериода,
		|			,
		|			,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Объект ССЫЛКА Справочник.ОсновныеСредства) КАК ФинансовыеНачисленияОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК СостоянияОС
		|		ПО ФинансовыеНачисленияОбороты.Организация = СостоянияОС.Организация
		|			И ФинансовыеНачисленияОбороты.Объект = СостоянияОС.ОсновноеСредство
		|ГДЕ
		|	СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_му_СостоянияОС.ПринятоКУчету)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеСредстваВАренде.ОсновноеСредство КАК ОсновноеСредство,
		|	ОсновныеСредстваВАренде.ТекущееОбязательствоСтарое КАК ТекущееОбязательствоСтарое
		|ИЗ
		|	ОсновныеСредстваВАренде КАК ОсновныеСредстваВАренде";
		
	Объект.ОсновныеСредства.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЗаполнитьОССервер();
	
	АрендаОСВыполнитьРасчет();
	
КонецПроцедуры

&НаСервере
Процедура АрендаОСВыполнитьРасчет()

	Для каждого СтрокаТЧ Из Объект.ОсновныеСредства Цикл
		АрендаОСВыполнитьРасчетПоСтроке(СтрокаТЧ);
	КонецЦикла;

	Если Объект.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.Расчет Тогда
		РассчитатьЭффективнуюСтавку();
	КонецЕсли; 
	
	ИзменениеОбязательства = Объект.ОсновныеСредства.Итог("РазницаВОценкеОбязательств");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЭффективнуюСтавку()

	СуммаПоВсемОС          = Объект.ОсновныеСредства.Итог("ТекущееОбязательство");
	РасчетнаяСуммаПоВсемОС = 0;
			
	Для каждого СтрокаТЧ Из Объект.ОсновныеСредства Цикл
		РасчетнаяСуммаПоВсемОС = РасчетнаяСуммаПоВсемОС + СтрокаТЧ.ТекущееОбязательство*СтрокаТЧ.Ставка;
	КонецЦикла;

	Объект.Ставка = РасчетнаяСуммаПоВсемОС/СуммаПоВсемОС;
	
КонецПроцедуры

&НаСервере
Процедура АрендаОСВыполнитьРасчетПоСтроке(СтрокаТЧ)
	
	// Ставка старая
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТЧ.ОсновноеСредство);
	СтруктураОтбора.Вставить("Параметр", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СтавкаПроцента_ОС);
	ЗначениеПараметра = РегистрыСведений.бит_му_ПараметрыОС.ПолучитьПоследнее(Объект.Дата, СтруктураОтбора).ЗначениеПараметра;
	СтрокаТЧ.СтавкаСтарая = ?(ЗначениеПараметра = Неопределено, 0, ЗначениеПараметра);
	
	ФинансовыйГрафик = ФинансовыйГрафикПоОС(СтрокаТЧ.ОсновноеСредство);
	
	// Ставка новая
	Если Объект.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		СтрокаТЧ.Ставка = Объект.Ставка;
		
		// текущее обязательство.
		// Вадюта МСФО.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("РежимКорректировки");
		СтруктураПараметров.Вставить("ФинансовыйГрафик", ФинансовыйГрафик);
		Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
			
			СтруктураПараметров.Вставить("Периодичность", "День");
			
			ТаблицаПлатежи = бит_му_ОбщегоНазначения.ПолучитьТаблицуПлатежей(Объект.ДоговорКонтрагента
																			 ,СтрокаТЧ.ОсновноеСредство
																			 ,Объект.Дата 
																			 ,Ложь 
																			 ,СтруктураПараметров);

			ПараметрыФункции = Новый Массив;
			Для каждого СтрокаТаблицы Из ТаблицаПлатежи Цикл
				
				Коэф    = СтрокаТаблицы.СуммаПлатежаВзаиморасчеты;
				Если НачалоДня(СтрокаТаблицы.ДатаПлатежа) <= НачалоДня(Объект.Дата) Тогда
					Степень = 0;
				Иначе
					Степень = (НачалоДня(СтрокаТаблицы.ДатаПлатежа)-НачалоДня(Объект.Дата))/(86400*365);
				КонецЕсли; 
				
				ПарамСлагаемого = бит_му_ОбщегоНазначения.ПараметрыСтепеннойФункции(Коэф, Степень);
				ПараметрыФункции.Добавить(ПарамСлагаемого);
				
			КонецЦикла; 
			
			Аргумент = (1/(1 + СтрокаТЧ.Ставка/100));
			СтрокаТЧ.ТекущееОбязательство = бит_му_ОбщегоНазначения.СтепеннаяФункция(ПараметрыФункции, Аргумент);
					
		Иначе
			
			СтруктураПараметров.Вставить("Взаиморасчеты");
			МассивПлатежей = бит_му_ОбщегоНазначения.СформироватьМассивПлатежей(Объект.ДоговорКонтрагента
																			     ,СтрокаТЧ.ОсновноеСредство
																				 ,Объект.Дата
																				 ,Истина
																				 ,СтруктураПараметров);
																				 
				
			Аргумент = (1/(1 + СтрокаТЧ.Ставка/(100*12)));
			СтрокаТЧ.ТекущееОбязательство = бит_му_ОбщегоНазначения.АлгебраическаяФункция(МассивПлатежей, Аргумент);
			
		КонецЕсли;
		
	Иначе 
		СтрокаТЧ.ТекущееОбязательство = СтрокаТЧ.ТекущееОбязательствоСтарое;
		РассчитатьТекущееЭСП(СтрокаТЧ, СпособРасчетаЭСП, ФинансовыйГрафик);
	КонецЕсли;
	
	СтрокаТЧ.РазницаВОценкеОбязательств = СтрокаТЧ.ТекущееОбязательствоСтарое - СтрокаТЧ.ТекущееОбязательство;
	
КонецПроцедуры

&НаСервере
Функция ФинансовыйГрафикПоОС(ОсновноеСредство)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	// Добавим колонки для сумм в валютах регл. учета и взаиморасчетов.
	ТаблицаДанных.Колонки.Добавить("Период", 		        	Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("СуммаПлатежаРегл", 			Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СуммаПлатежаВзаиморасчеты",	Новый ОписаниеТипов("Число"));
	
	ПлатежиДерево = РеквизитФормыВЗначение("Платежи");
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ОсновноеСредство", ОсновноеСредство);
	
	МассивСтрок = ПлатежиДерево.Строки.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрок.Количество()>0 Тогда
		ПлатежиПоОС = МассивСтрок[0].Строки;
		
		// Пересчитаем суммы в таблице значений
		Для каждого СтрокаПлатежа Из ПлатежиПоОС Цикл
			
			СтрокаТаблицыДанных = ТаблицаДанных.Добавить();
			СтрокаТаблицыДанных.Период = СтрокаПлатежа.Период;
			СтрокаТаблицыДанных.СуммаПлатежаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатежа.Сумма
																						 ,ВалютаВзаиморасчетов
																						 ,ВалютаРегламентированногоУчета
																						 ,КурсВзаиморасчетов
																						 ,1
																						 ,КратностьВзаиморасчетов
																						 ,1);

			СтрокаТаблицыДанных.СуммаПлатежаВзаиморасчеты = СтрокаПлатежа.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
			
	Если ТаблицаДанных.Количество()>0 Тогда
	
		ДатаПлатежа = НачалоМесяца(Объект.Дата);
			
		ПерваяСтрока = ТаблицаДанных[0];
		Пока КонецМесяца(ПерваяСтрока.Период) <> КонецМесяца(ДатаПлатежа) Цикл
			НоваяСтрока = ТаблицаДанных.Вставить(0);
			НоваяСтрока.Период                    = ДатаПлатежа;
			НоваяСтрока.СуммаПлатежаРегл          = 0;
			НоваяСтрока.СуммаПлатежаВзаиморасчеты = 0;
			
			ДатаПлатежа = ДобавитьМесяц(ДатаПлатежа, 1);
		КонецЦикла;
	
	КонецЕсли; 
	
	ТаблицаДанных.Свернуть("Период", "СуммаПлатежаРегл, СуммаПлатежаВзаиморасчеты");
	ТаблицаДанных.Сортировать("Период");
	
	Возврат ТаблицаДанных; 
	
КонецФункции

&НаСервере
Процедура РассчитатьТекущееЭСП(СтрокаТЧ, СпособРасчетаЭСП, ФинансовыйГрафик)

	Отказ = Ложь;
	
	МассивПлатежей = Новый Массив;
	ТаблицаПлатежи = Новый ТаблицаЗначений;
	
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФинансовыйГрафик", ФинансовыйГрафик);
	
	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоМесяцам И ФинансовыйГрафик.Количество()>0 Тогда
		Дельта = ФинансовыйГрафик[0].СуммаПлатежаВзаиморасчеты;
	Иначе
		Дельта = 0;
	КонецЕсли; 
	
	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		// По дням.
		СтруктураПараметров.Вставить("Периодичность", "День");
		ТаблицаПлатежи = бит_му_ОбщегоНазначения.ПолучитьТаблицуПлатежей(Объект.ДоговорКонтрагента, ОсновноеСредство, Объект.Дата, Ложь, СтруктураПараметров);
	Иначе	
		// По месяцам.		
		СтруктураПараметров.Вставить("Взаиморасчеты");
		МассивПлатежей = бит_му_ОбщегоНазначения.СформироватьМассивПлатежей(Объект.ДоговорКонтрагента, ОсновноеСредство, Объект.Дата, Истина, СтруктураПараметров);
	КонецЕсли; 
		
	Если МассивПлатежей.Количество() > 0 ИЛИ ТаблицаПлатежи.Количество() > 0 Тогда
		
		Отказ = Ложь;
			
		Стоимость = СтрокаТЧ.ТекущееОбязательство - Дельта;
		
		Если Стоимость < 0 Тогда
			ТекстСообщения = Нстр("ru = 'В строке №%1 стоимость равна нулю.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);				 
			Отказ = Истина;	
		КонецЕсли; 
						 
		Если Не Отказ Тогда
			
			СтруктураПараметровЭСП = Новый Структура;
			СтруктураПараметровЭСП.Вставить("СпособРасчета" , СпособРасчетаЭСП);
			СтруктураПараметровЭСП.Вставить("ТаблицаПлатежи", ТаблицаПлатежи);
			СтруктураПараметровЭСП.Вставить("МассивПлатежи" , МассивПлатежей);
			СтруктураПараметровЭСП.Вставить("Стоимость"     , Стоимость);
			СтруктураПараметровЭСП.Вставить("Точность"      , 0.000000000001); 
			СтруктураПараметровЭСП.Вставить("ПервыйПериод"  , Объект.Дата);
			
			ЭСП = бит_му_ОбщегоНазначения.ВычислитьЭСП(СтруктураПараметровЭСП);
			
			Если ЭСП < 0 Тогда
				ТекстСообщения = Нстр("ru = 'В строке № %1 указано основное средство ""%2"" для которого ЭСП отрицательна.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТЧ.НомерСтроки, СтрокаТЧ.ОсновноеСредство);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);							   
			КонецЕсли;
			
			СтрокаТЧ.Ставка = ЭСП;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = Нстр("ru = 'В строке № %1 указано основное средство ""%2"" для которого не сформирован график платежей.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТЧ.НомерСтроки, СтрокаТЧ.ОсновноеСредство);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);						   
		
		СтрокаТЧ.Ставка = 0;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОсновноеСредствоВФинансовойАренде(Организация, ОсновноеСредство, ДатаДокумента)

	// заполнение контрагента и договора
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",      Организация);
	СтруктураОтбора.Вставить("ОсновноеСредство", ОсновноеСредство);
	СтруктураОтбора.Вставить("Параметр",         ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ФинансоваяАренда_ОС);
	
	ЗначениеПараметра = РегистрыСведений.бит_му_ПараметрыОС.ПолучитьПоследнее(ДатаДокумента, СтруктураОтбора).ЗначениеПараметра;
	
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		ОСвФинансовойАренде = ЗначениеПараметра;
	Иначе
		ОСвФинансовойАренде = Ложь;
	КонецЕсли; 
	
	Возврат ОСвФинансовойАренде;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоСчетДоходовРасходов(Форма)
	
	Результат = бит_БухгалтерияКлиентСервер.НовыеПараметрыУстановкиСвойствСубконто();
	
	Результат.ПоляФормы.Субконто1   = "Субконто_1";
	Результат.ПоляОбъекта.Субконто1 = "Субконто_1";
	Результат.ПоляФормы.Субконто2   = "Субконто_2";
	Результат.ПоляОбъекта.Субконто2 = "Субконто_2";
	Результат.ПоляФормы.Субконто3   = "Субконто_3";
	Результат.ПоляОбъекта.Субконто3 = "Субконто_3";
	Результат.ПоляФормы.Субконто4   = "Субконто_4";
	Результат.ПоляОбъекта.Субконто4 = "Субконто_4";
	Результат.ПоляОбъекта.СчетУчета = "СчетДоходовРасходов";
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.ДопРеквизиты.Вставить("Контрагент", Форма.Объект.Контрагент);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОсновныеСредстваАрендаСтавкаПриИзмененииНаСервере(ИДСтроки)
	
	СтрокаТЧ = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
		
	ФинансовыйГрафик = ФинансовыйГрафикПоОС(СтрокаТЧ.ОсновноеСредство);
	Если ФинансовыйГрафик.Количество()>0 Тогда
		РассчитатьТекущееЭСП(СтрокаТЧ, СпособРасчетаЭСП, ФинансовыйГрафик);
		
		Если Объект.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.Расчет Тогда
			РассчитатьЭффективнуюСтавку();
		КонецЕсли; 
	КонецЕсли;
	
	СтрокаТЧ.РазницаВОценкеОбязательств = СтрокаТЧ.ТекущееОбязательствоСтарое - СтрокаТЧ.ТекущееОбязательство;
	
	ИзменениеОбязательства = Объект.ОсновныеСредства.Итог("РазницаВОценкеОбязательств");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлатежиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",      Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",         Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФинансовыеНачисленияОбороты.Объект КАК ОсновноеСредство,
		|	ФинансовыеНачисленияОбороты.Период КАК Период,
		|	ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот КАК Сумма,
		|	ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот КАК СуммаСтарая
		|ИЗ
		|	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
		|			&НачалоПериода,
		|			,
		|			Месяц,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Объект ССЫЛКА Справочник.ОсновныеСредства) КАК ФинансовыеНачисленияОбороты
		|ГДЕ
		|	ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(СуммаСтарая)
		|ПО
		|	ОсновноеСредство";
	
	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Месяц", "День");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОсновныеСредства = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияОбъектов = Платежи.ПолучитьЭлементы();
	КоллекцияОбъектов.Очистить();
	
	Пока ВыборкаОсновныеСредства.Следующий() Цикл
		УзелДерева = КоллекцияОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(УзелДерева, ВыборкаОсновныеСредства);
		УзелДерева.ЭтоВерхнийУровень = Истина;
	
		Выборка = ВыборкаОсновныеСредства.Выбрать();
		КоллекцияСтрок = УзелДерева.ПолучитьЭлементы();
		Пока Выборка.Следующий() Цикл
			СтрокаГрафика  = КоллекцияСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГрафика, Выборка, , "ОсновноеСредство");
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлатежи(Команда)
	ЗаполнитьПлатежиНаСервере();
КонецПроцедуры

&НаСервере
Процедура СохранитьГрафикПлатежейОбъект(ТекущийОбъект)
	
	ТекущийОбъект.Платежи.Очистить();
	СтрокиГрафика = Платежи.ПолучитьЭлементы();
	Для Каждого СтрокаОбъекта Из СтрокиГрафика Цикл
		ОсновноеСредство  = СтрокаОбъекта.ОсновноеСредство;		
		ПодчиненныеСтроки = СтрокаОбъекта.ПолучитьЭлементы();
		Для Каждого СтрокаПлатежи Из ПодчиненныеСтроки Цикл
			СтрокаТЧ = ТекущийОбъект.Платежи.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаПлатежи);
			СтрокаТЧ.ОсновноеСредство = ОсновноеСредство;
		КонецЦикла;		
	КонецЦикла;		
	 	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьГрафикПлатежейОбъект()
	
	Если Объект.Платежи.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
		
 	Запрос = Новый Запрос;
	ТаблицаПлатежи = Объект.Платежи.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаПлатежи", ТаблицаПлатежи);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПлатежи.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТаблицаПлатежи.Период КАК Период,
	               |	ТаблицаПлатежи.Сумма КАК Сумма,
	               |	ТаблицаПлатежи.СуммаСтарая КАК СуммаСтарая
	               |ПОМЕСТИТЬ Платежи
	               |ИЗ
	               |	&ТаблицаПлатежи КАК ТаблицаПлатежи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Платежи.ОсновноеСредство КАК ОсновноеСредство,
	               |	Платежи.Период КАК Период,
	               |	Платежи.Сумма КАК Сумма,
	               |	Платежи.СуммаСтарая КАК СуммаСтарая
	               |ИЗ
	               |	Платежи КАК Платежи
	               |ИТОГИ
	               |	СУММА(Сумма),
	               |	СУММА(СуммаСтарая)
	               |ПО
	               |	ОсновноеСредство";
			
	Результат = Запрос.Выполнить();
	
	ВыборкаОсновноеСредство = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	СтрокиПлатежи = Платежи.ПолучитьЭлементы();
	
	Пока ВыборкаОсновноеСредство.Следующий() Цикл
		
		// Добавим строку с объектом.
		СтрокаОсновнойСредство = СтрокиПлатежи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОсновнойСредство, ВыборкаОсновноеСредство);
		СтрокаОсновнойСредство.ЭтоВерхнийУровень = Истина;
		Выборка = ВыборкаОсновноеСредство.Выбрать();
		
		СтрокиОбъекта = СтрокаОсновнойСредство.ПолучитьЭлементы();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = СтрокиОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,, "ОсновноеСредство");
		КонецЦикла;
	
	КонецЦикла;
 
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтруктураКурсы          = ВалютаВзаиморасчетовСервер(Объект.ДоговорКонтрагента, Объект.Дата);
		ВалютаВзаиморасчетов    = СтруктураКурсы.Валюта;
		КурсВзаиморасчетов      = СтруктураКурсы.Курс;
		КратностьВзаиморасчетов = СтруктураКурсы.Кратность;
	Иначе	
		ВалютаВзаиморасчетов    = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		КурсВзаиморасчетов      = 1;
		КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	ОтобразитьВалютуВзаиморасчетовНаФорме();
	
	ДоговорКонтрагентаПриИзмененииСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВалютуВзаиморасчетовНаФорме()

	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		СтрокаВалютаВзаиморасчетов = НСтр("ru = '%1 = %2 %3'");
		КурсВалюты = ?(КурсВзаиморасчетов = 0, 1, КурсВзаиморасчетов/КратностьВзаиморасчетов);
		СтрокаВалютаВзаиморасчетов = СтрШаблон(СтрокаВалютаВзаиморасчетов, ВалютаВзаиморасчетов, КурсВалюты, ВалютаРегламентированногоУчета);
		Элементы.ДекорацияВалютаВзаиморасчетов.Заголовок = СтрокаВалютаВзаиморасчетов;
	Иначе
		Элементы.ДекорацияВалютаВзаиморасчетов.Заголовок = НСтр("ru = 'НЕ УСТАНОВЛЕНА'");	
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииСервер()
	
	Объект.ОсновныеСредства.Очистить();
	Объект.Платежи.Очистить();
	ПлатежиДерево = РеквизитФормыВЗначение("Платежи");
	ПлатежиДерево.Строки.Очистить();
	ЗначениеВРеквизитФормы(ПлатежиДерево, "Платежи");
	
	СтруктураОтбораФинИнструменты = Новый Структура;
	СтруктураОтбораФинИнструменты.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураОтбораФинИнструменты.Вставить("Параметр", ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СпособПолученияСтавки);
	ЗначениеПараметра = РегистрыСведений.бит_му_ПараметрыФинИнструментов.ПолучитьПоследнее(Объект.Дата, СтруктураОтбораФинИнструменты).ЗначениеПараметра;
	Объект.СпособПолученияСтавки = ?(ЗначениеПараметра = Неопределено, Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ, ЗначениеПараметра);

	Если Объект.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		ЗначениеПараметра = РегистрыСведений.бит_му_НоминальныеСтавки.ПолучитьПоследнее(Объект.Дата, СтруктураОтбора).Ставка;
		Объект.Ставка = ?(ЗначениеПараметра = Неопределено, 0, ЗначениеПараметра);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ЭлементШапкиПриИзмененииЗавершение(Ответ, ИмяЭлемента) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
				
		Если СтрСравнить(ИмяЭлемента, "Организация") = 0 Тогда
			ТекущаяОрганизация = Объект.Организация;
			ТекущийДоговор     = Объект.ДоговорКонтрагента;
			ОрганизацияПриИзмененииКлиент();
			ДоговорКонтрагентаПриИзмененииКлиент();
		ИначеЕсли СтрСравнить(ИмяЭлемента, "Контрагент") = 0 Тогда
			ТекущийКонтрагент  = Объект.Контрагент;
			ТекущийДоговор     = Объект.ДоговорКонтрагента;
			ДоговорКонтрагентаПриИзмененииКлиент();
		ИначеЕсли СтрСравнить(ИмяЭлемента, "ДоговорКонтрагента") = 0 Тогда
			ТекущийДоговор     = Объект.ДоговорКонтрагента;
			ДоговорКонтрагентаПриИзмененииКлиент();
		КонецЕсли;
		
	Иначе
		
		Если СтрСравнить(ИмяЭлемента, "Организация") = 0 Тогда
			Объект.Организация        = ТекущаяОрганизация;
			Объект.ДоговорКонтрагента = ТекущийДоговор;
		ИначеЕсли СтрСравнить(ИмяЭлемента, "Контрагент") = 0 Тогда
			Объект.Контрагент         = ТекущийКонтрагент;
			Объект.ДоговорКонтрагента = ТекущийДоговор;
		ИначеЕсли СтрСравнить(ИмяЭлемента, "ДоговорКонтрагента") = 0 Тогда
			Объект.ДоговорКонтрагента = ТекущийДоговор;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВалютаМСФОСервер(Организация, ДатаКурса)
	
	ВалютыМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютыМСФО, ДатаКурса);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВалютаВзаиморасчетовСервер(ДоговорКонтрагента, ДатаКурса)
	
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурса);
	
КонецФункции

//Начало_бит_Магомедов_25.07.2012 

// бит_MZyubin Процедура обрабатывает изменение класса ОС в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.ОсновныеСредства
//
&НаСервере
Процедура ИзменениеКласса(ИдТекущейСтроки)

   флИзмененСчет = Ложь;
   _Объект = РеквизитФормыВЗначение("Объект");
   ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИдТекущейСтроки);
   _Объект.ИзменениеКлассаМодуль(ТекущаяСтрока, флИзмененСчет);
   //ЗначениеВРеквизитФормы(_Объект, "Объект");
   Если флИзмененСчет Тогда
   
     // ПриИзмененииСчетаУчета(ТекущаяСтрока);
   
   КонецЕсли; 
   
КонецПроцедуры // ИзменениеКласса()

&НаСервере
Функция ПроверитьСоответствиеПараметровКлассаНМА(ИДСтроки)
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	ТекстСоответствиеПараметровКласса = "";
	_Объект = РеквизитФормыВЗначение("Объект");
	_Объект.ПроверитьсоответствиеПараметровКлассаНМА(ТекущаяСтрока, ТекстСоответствиеПараметровКласса);
	//ЗначениеВРеквизитФормы(_Объект, "Объект");
	Возврат ТекстСоответствиеПараметровКласса;	
КонецФункции

&НаСервере
Функция ПроверитьСоответствиеПараметровКлассаНМА_Все()
	//Начало_бит_Магомедов_10.09.2012
	//кусок кода перенесен из модуля объекта, т.к. не все (интерфейсные) служебные метаданные понимаются вне модулей форм (баг)
	ТекстСоответствиеПараметровКласса = "";
	_Объект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из Объект.ОсновныеСредства Цикл  
		_Объект.ПроверитьсоответствиеПараметровКлассаНМА(ТекСтрока, ТекстСоответствиеПараметровКласса);
	КонецЦикла;
	ЗначениеВРеквизитФормы(_Объект, "Объект");
	Возврат ТекстСоответствиеПараметровКласса;	
КонецФункции

&НаКлиенте
Процедура ОсновныеСредстваКлассПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОсновныеСредства.ТекущиеДанные;
	ИзменениеКласса(ТекущаяСтрока.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСчетУчетаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОсновныеСредства.ТекущиеДанные;
	ПроверитьСоответствиеПараметровКлассаНМА(ТекущаяСтрока.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСчетСниженияСтоимостиПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти
