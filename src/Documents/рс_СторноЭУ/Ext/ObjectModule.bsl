#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
                            		 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
//
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
//
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,ПользователиКлиентСервер.ТекущийПользователь()
												,ПараметрОбъектКопирования);
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()
											
// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура
//  СтруктураТаблиц         - Структура
//  Отказ            		- Булево
//  Заголовок 				- Строка
//
Процедура ПроверкаДанных(Отказ)
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", ДокументОснование.Метаданные()) И Организация <> ДокументОснование.Организация Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Организации в документе-основании и в документе Сторно ЭУ не совпадают!",,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура выполняет движения по регистрам.
//
Процедура ДвиженияПоРегистрам(Отказ)
	
	ДвиженияМСФО	= Движения.бит_Дополнительный_2;
	
	ТаблицаЗапрос = Документы[Метаданные().Имя].ПолучитьДвиженияПоДокументу(ДокументОснование);
//ОК Ванюков К. +// До включения даты открытого периода нужно сделать, что бы дата проводок устанавливалась датой документа // 2013-04-30
	//мДатаПроводок = Документы[Метаданные().Имя].РассчитатьДатуПроводок(ЭтотОбъект);
    мДатаПроводок	= Дата;
//ОК Ванюков К. -	
	
	// Rarus-spb byse 2012.12.21 {
	Если ЗначениеЗаполнено(ДокументОснование) И Не ДокументОснование.Проведен И Строка(ДокументОснование.Метаданные().Проведение) = "Разрешить" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ-основание " + ДокументОснование + " не проведен!",,,, Отказ);
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(бит_Дополнительный_2.Период) КАК Период
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2 КАК бит_Дополнительный_2
	|ГДЕ
	|	бит_Дополнительный_2.Регистратор = &Регистратор
	|	И НЕ бит_Дополнительный_2.Период ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("Регистратор",ДокументОснование);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Период) И мДатаПроводок < Выборка.Период  Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата проводок (" + мДатаПроводок + ") в документе " + Ссылка + " меньше даты документа-основания " + ДокументОснование,,,, Отказ);
	КонецЕсли;	
	// Rarus-spb byse 2012.12.21 }
	
	Для Каждого СтрокаЗапрос Из ТаблицаЗапрос Цикл
		
		Движение = ДвиженияМСФО.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаЗапрос);
		
		// Rarus-spb byse 2012.12.21 {
		Движение.Период 	 		= мДатаПроводок;
		// Rarus-spb byse 2012.12.21 }
		
		рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1,  СтрокаЗапрос.СубконтоДт1);
		рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2,  СтрокаЗапрос.СубконтоДт2);
		рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3,  СтрокаЗапрос.СубконтоДт3);
		рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 4,  СтрокаЗапрос.СубконтоДт4);
		
		рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1,  СтрокаЗапрос.СубконтоКт1);
		рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2,  СтрокаЗапрос.СубконтоКт2);
		рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3,  СтрокаЗапрос.СубконтоКт3);
		рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 4,  СтрокаЗапрос.СубконтоКт4);
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.рс_АккруалПоID") 
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.рс_АккруалБезID") Тогда
			Движение.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.СторноАккруала;
		Иначе
			Движение.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаЭУ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
	КонецЕсли;
	
	ТаблицаЗапрос = Документы[Метаданные().Имя].ПолучитьДвиженияПоДокументу(ДокументОснование);
	ТаблицаЗапрос.Свернуть("СчетДт");

	Если ТаблицаЗапрос.Количество() = 1 Тогда
		Счет = ТаблицаЗапрос[0].СчетДт;
	Иначе
		Счет = Неопределено;
	КонецЕсли;
	
	// Rarus-spb byse 2012.12.27 {
	Если Не Отказ Тогда
		РассчитатьСуммуДокумента();
	КонецЕсли;
	// Rarus-spb byse 2012.12.27 }
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Проверка данных
	ПроверкаДанных(Отказ);
	
	// Проведение
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Отказ);
	КонецЕсли; 

	// Rarus-spb byse 2012.12.27 {
	Если Не Отказ Тогда
		РассчитатьСуммуДокумента();
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	// Rarus-spb byse 2012.12.27 }
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	//БИТ Тртилек 24102013
	//Документы.рс_СторноЭУ.ЗаполнениеПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
	Документы.рс_СторноЭУ.ЗаполнениеПоОснованию(ЭтотОбъект, ДанныеЗаполнения, Новый Структура("Организация, ID", ДанныеЗаполнения.Организация, ДанныеЗаполнения.ID));
	///БИТ Тртилек
	
КонецПроцедуры

// Rarus-spb byse 2012.12.27 {
Процедура РассчитатьСуммуДокумента () Экспорт
	СуммаДокумента = Движения.бит_Дополнительный_2.Итог("СуммаМУ");
КонецПроцедуры	                        

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если Не Отказ Тогда
		СуммаДокумента = 0;
	КонецЕсли;
КонецПроцедуры
// Rarus-spb byse 2012.12.27 {

#КонецЕсли