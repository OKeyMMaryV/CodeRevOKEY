////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущие значения реквизитов формы. Клиент.
&НаКлиенте 
Перем мКэшРеквизитовФормы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устнавливает заголовок формы документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КЭШЕМ РЕКВИЗИТОВ ФОРМЫ

// Процедура заполняет кэш реквизитов формы данными объекта.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	//мКэшРеквизитовФормы.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	Модифицированность = Ложь;
	//ЗагрузитьДвиженияПоДокументу();
	
КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ     


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьКэшЗначений();
	УстановитьНастройкиДоступностиЭлементов();
			
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Rarus-spb byse 2012.12.21 {
	// Отказ от открытия формы новых, введенных на основании непроведенных, документов
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ДокументОснование)
		И Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.ДокументОснование))
		И Не Объект.ДокументОснование.Проведен 
		И Строка(Объект.ДокументОснование.Метаданные().Проведение) = "Разрешить" 
		
		Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ-основание " + Объект.ДокументОснование + " не проведен!");
		Отказ = Истина;
	КонецЕсли;	
	// Rarus-spb byse 2012.12.21 }	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие нового 
   	Если Параметры.Ключ.Пустая() Тогда
		
		ЗаполнитьКэшЗначений();
		
	КонецЕсли;

	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		// Заполнить реквизиты значениями по умолчанию.
		рс_ОбщийМодуль.ЗаполнитьШапкуДокумента(Объект, Объект.Ссылка.Метаданные(), ПользователиКлиентСервер.ТекущийПользователь());
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Объект.Дата = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗагрузитьДвиженияПоДокументу();
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Не Отказ Тогда		
			//ТекущийОбъект.ДополнительныеСвойства.Вставить("СуммаАбсолютногоРасхождения"	  , Объект.СуммаАбсолютногоРасхождения);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();

	фКэшЗначений.Вставить("ПредставлениеОбъекта", МетаданныеОбъекта.ПредставлениеОбъекта);
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
 	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавлиант видимость доступность элементов формы
//
// Параметры:
//  Нет
//
&НаСервере
Процедура УстановитьВидимость()
	
	//ЭтоРегистрБюдж = Объект.РегистрБухгалтерии.ИмяОбъекта = "бит_Бюджетирование";
	//Элементы.Сценарий.Видимость = ЭтоРегистрБюдж;
	
КонецПроцедуры // УстановитьВидимостьДоступностьПоРегБух()

// Процедура применяет настройки доступности и видимости для элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов() Экспорт
	
	// Получение таблицы настроек доступности элементов управления.
	ТаблицаНастроекДоступности = бит_ОбщегоНазначения.ПолучитьНастройкиДоступностиЭлементовУправления(Объект, Истина);
	
	// Фильтр таблицы настроек по статусу.
	ДокументЗаявка 			  = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	ТекущийСтатус			  = Неопределено;
	ТаблицаАктуальныхНастроек = бит_ОбщегоНазначения.ПолучитьАктуальныеНастройки(ТаблицаНастроекДоступности
																				,ТекущийСтатус);
	
	// Структура параметров для проверки произвольного условия.
	ПараметрыУсловия = Новый Структура;
	ПараметрыУсловия.Вставить("ТекущийОбъект", Объект);
	//ПараметрыУсловия.Вставить("Статус"		 , ТекущийСтатус);
	
	// Применяем настройки.
	бит_ОбщегоНазначения.УстановитьДоступностьЭлементовУправленияПоНастройкам(ЭтаФорма
																			 ,ТаблицаАктуальныхНастроек
																			 ,ПараметрыУсловия);
КонецПроцедуры // УстановитьНастройкиДоступностиЭлементов()

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Объект.Комментарий = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Комментарий");
	
	НаборЗаписейбит_Дополнительный_2.Очистить();
	НаборЗаписейДвиженияПоДокументам.Очистить();
	
	//ЗагрузитьДвиженияПоДокументу();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДвиженияПоДокументу()
	
	мДатаПроводок = Документы[Объект.Ссылка.Метаданные().Имя].РассчитатьДатуПроводок(Объект);

	// Rarus-spb byse 2012.12.29 ОШИБКА 89 Редмайн{
	//ТаблицаЗапрос = Документы[Объект.Ссылка.Метаданные().Имя].ПолучитьДвиженияПоДокументу(Объект.ДокументОснование);
	//ТаблицаЗапрос = Документы[Объект.Ссылка.Метаданные().Имя].ПолучитьДвиженияПоДокументу(Объект.Ссылка);
	//// Rarus-spb byse 2012.12.29 }
	//
	//ТаблицаЗапрос.ЗаполнитьЗначения(мДатаПроводок, "Период");
	//
	//НаборЗаписейбит_Дополнительный_2.Загрузить(ТаблицаЗапрос);
	//
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ID", Объект.ДокументОснование.Метаданные()) Тогда
		IDВыборки = Объект.ДокументОснование.ID;
	ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ОК_ID_Разноска", Объект.ДокументОснование.Метаданные()) Тогда
		IDВыборки = Объект.ДокументОснование.ОК_ID_Разноска;
	КонецЕсли;
	
	IDВыборки = рс_ОбщийМодуль.ОбработатьID(IDВыборки);
	
	Если IDВыборки <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	бит_Дополнительный_2ДвиженияССубконто.Период,
		|	бит_Дополнительный_2ДвиженияССубконто.Регистратор,
		|	бит_Дополнительный_2ДвиженияССубконто.НомерСтроки,
		|	бит_Дополнительный_2ДвиженияССубконто.Активность,
		|	бит_Дополнительный_2ДвиженияССубконто.СчетДт,
		|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт1,
		|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт1,
		|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт2,
		|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт2,
		|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт3,
		|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт3,
		|	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт4,
		|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт4,
		|	бит_Дополнительный_2ДвиженияССубконто.СчетКт,
		|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт1,
		|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт1,
		|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт2,
		|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт2,
		|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт3,
		|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт3,
		|	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт4,
		|	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт4,
		|	бит_Дополнительный_2ДвиженияССубконто.Организация,
		|	бит_Дополнительный_2ДвиженияССубконто.ВалютаДт,
		|	бит_Дополнительный_2ДвиженияССубконто.ВалютаКт,
		|	бит_Дополнительный_2ДвиженияССубконто.ВидДвиженияМСФО,
		|	бит_Дополнительный_2ДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	бит_Дополнительный_2ДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	бит_Дополнительный_2ДвиженияССубконто.КоличествоДт,
		|	бит_Дополнительный_2ДвиженияССубконто.КоличествоКт,
		|	бит_Дополнительный_2ДвиженияССубконто.СуммаРегл КАК СуммаРегл,
		|	бит_Дополнительный_2ДвиженияССубконто.СуммаУпр КАК СуммаУпр,
		|	бит_Дополнительный_2ДвиженияССубконто.СуммаМУ КАК СуммаМУ,
		|	бит_Дополнительный_2ДвиженияССубконто.Содержание,
		|	бит_Дополнительный_2ДвиженияССубконто.НомерЖурнала,
		|	бит_Дополнительный_2ДвиженияССубконто.ВидПроводки,
		|	бит_Дополнительный_2ДвиженияССубконто.ДатаФормирования
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.ДвиженияССубконто(
		|			,
		|			,
		|			Регистратор В
		|				(ВЫБРАТЬ
		|					рс_ДокументыПоID.Регистратор
		|				ИЗ
		|					РегистрСведений.рс_ДокументыПоID КАК рс_ДокументыПоID
		|				ГДЕ
		|					рс_ДокументыПоID.ID = &ID),
		|			,
		|			) КАК бит_Дополнительный_2ДвиженияССубконто";
		Запрос.УстановитьПараметр("ID", IDВыборки);
		ТаблицаЗапрос = Запрос.Выполнить().Выгрузить();
		
		НаборЗаписейДвиженияПоДокументам.Загрузить(ТаблицаЗапрос);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗагрузитьДвиженияПоДокументу();
	
КонецПроцедуры

