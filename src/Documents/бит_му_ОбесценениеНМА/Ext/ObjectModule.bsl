#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаМеждУчета Экспорт; // Хранит валюту международного учета

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураКурсыВалют = СформироватьСтруктуруКурсовВалют(СтруктураШапкиДокумента,Отказ,Заголовок);
	
	// Получим исторические курсы валют по каждому НМА.
	МассивНМА = НематериальныеАктивы.ВыгрузитьКолонку("НематериальныйАктив");
	МассивНМА = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивНМА);
	ИсторическиеКурсы = ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, СтруктураШапкиДокумента.Дата, СтруктураКурсыВалют);

	СтруктураТаблиц = Документы.бит_му_ОбесценениеНМА.ПодготовитьТаблицыДокумента(ЭтотОбъект, СтруктураШапкиДокумента);
	
	ПроверитьТаблицыДокумента(СтруктураШапкиДокумента,СтруктураТаблиц,Отказ,Заголовок);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураТаблиц,СтруктураКурсыВалют,ИсторическиеКурсы,Отказ,Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
 
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СтруктураНеДублирующихсяПолей = Новый Структура;
	СтруктураНеДублирующихсяПолей.Вставить("НематериальныйАктив");
	
	// Проверим наличие дублей в табличной части "НематериальныеАктивы".
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
																	 ,"НематериальныеАктивы"
																	 ,СтруктураНеДублирующихсяПолей
																	 ,Отказ);
	//ОК Калинин М. 290413
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка); // 1c-izhtc, ChuckNorris, 17.08.2015
	ОК_ОбщегоНазначения.ПроверитьЗаполненостьАналитикСчетаВТабличнойЧастиДокумента(ЭтотОбъект,"НематериальныеАктивы","СчетДоходовРасходов","Субконто",Отказ,Заголовок);
	//ОК Калинин М.
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура выполняет валютные пересчеты из валюты МУ в валюту документа.
// 
// Параметры:
//  ПараметрыНМА
// 
Процедура ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыНМА) Экспорт

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ВидыКурсов = Новый Структура("МУ, Документ");
	
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	МассивСуммДляПересчета = Новый Массив;
	МассивСуммДляПересчета.Добавить("БалансоваяСтоимость");
	МассивСуммДляПересчета.Добавить("НачисленнаяАмортизация");
	МассивСуммДляПересчета.Добавить("ПервоначальнаяСтоимость");
	МассивСуммДляПересчета.Добавить("СуммаОбесценения");

	МассивНМА = Новый Массив; 
	Для каждого КлючИЗначение Из ПараметрыНМА Цикл
		МассивНМА.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	СоответствиеНМАиКурсовДокумента = бит_му_ВНА.ПолучитьСоответствиеНМАиКурсовНаДатуПринятия(МассивНМА, СтруктураКурсыВалют, Организация);
	
	Для Каждого КлючИЗначение Из ПараметрыНМА Цикл
		
		КурсыМУ 	  = СоответствиеНМАиКурсовДокумента[КлючИЗначение.Ключ].МУ;
		КурсыДокумент = СоответствиеНМАиКурсовДокумента[КлючИЗначение.Ключ].Документ;
		
		НМА = КлючИЗначение.Значение;
		
		Для каждого ИмяСуммы Из МассивСуммДляПересчета Цикл
			
			
			НМА[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НМА[ИмяСуммы]
							,КурсыМУ.Валюта
							,КурсыДокумент.Валюта
							,КурсыМУ.Курс
							,КурсыДокумент.Курс
							,КурсыМУ.Кратность
							,КурсыДокумент.Кратность);
		КонецЦикла; 
		
	КонецЦикла;

	
КонецПроцедуры // ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль()

// Функция получает параметры, передаваемые в обработку подбора НМА.
//
Функция ЗаполнитьПараметрыПодбора() Экспорт
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("Организация"		  , Организация);                             
	ПараметрыПодбора.Вставить("Режим"			  , Перечисления.бит_му_РежимыПодбораВНА.ОбесценениеНМА);
	ПараметрыПодбора.Вставить("МодельУчета"		  , Перечисления.бит_му_МоделиУчетаВНА.ПоПервоначальнойСтоимости);
	ПараметрыПодбора.Вставить("ДатаОкончания"	  , КонецМесяца(Дата));
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

// Функция получает параметры  для массива НМА или одного НМА.
// 
// Параметры:
//  ПереченьОбъектов - Массив
//  ЭтоНовыйДокумент - Булево
// 
// Возвращаемое значение:
//  Структура
//  
Функция ПолучитьПараметры(ПереченьОбъектов, ЭтоНовыйДокумент) Экспорт
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"  , Организация);
	СтруктураПараметров.Вставить("Дата"         , Дата);
	СтруктураПараметров.Вставить("ЭтоНовый"     , ЭтоНовыйДокумент);
	// 1c-izhtc ChuckNorris 23.10.2015 (
	//СтруктураПараметров.Вставить("МоментВремени", ?(ЭтоНовыйДокумент ,Дата, Ссылка.МоментВремени()));
	СтруктураПараметров.Вставить("МоментВремени", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	// 1c-izhtc ChuckNorris 23.10.2015 ) 	
	СтруктураПараметров.Вставить("ВидДвижения"  , ВидДвижения);
	
	СтрПараметры = бит_му_ВНА.ПолучитьПараметрыДляОбесцененияВНА(ПереченьОбъектов, СтруктураПараметров);
	
	Возврат СтрПараметры;

КонецФункции // ПолучитьПараметры()

// Процедура выполняет действия необходимые при изменении СчетаУчета.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции 
//					или ДокументТабличнаяЧастьСтрока.бит_му_ОбесценениеНМА.НематериальныеАктивы.
// 
Процедура ИзменениеСчетаДоходовРасходов(ТекущаяСтрока) Экспорт
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетДоходовРасходов, мКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "Субконто");
	
	СинхронизироватьРеквизитыНМА(ТекущаяСтрока);
	
КонецПроцедуры // ИзменениеСчетаДоходовРасходов()

// Процедура выполняет расчет суммы в табличной части.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции 
//					или ДокументТабличнаяЧастьСтрока.бит_му_ОбесценениеНМА.НематериальныеАктивы.
// 
Процедура РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.Сумма = ТекущаяСтрока.БалансоваяСтоимость - ТекущаяСтрока.ВозмещаемаяСтоимость;

	Если ВидДвижения = Перечисления.бит_му_ВидыДвиженияОбесценения.ВозвратОбесценения Тогда		
		ТекущаяСтрока.Сумма = -ТекущаяСтрока.Сумма; 		
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуВСтрокеТЧ()

// Процедура заполняет параметры в строке табличной части.
// 
// Параметры:
//  ИДСтроки     - Число.
//  СтрокаДанных - СтрокаТаблицыЗначений.
// 
Процедура ЗаполнитьСтрокуТЧПоСтрокеДанных(ИДСтроки, СтрокаДанных) Экспорт

	ТекущаяСтрока = НематериальныеАктивы[ИДСтроки];	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокаДанных = Неопределено Тогда	
		Возврат;  	
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаДанных);
	ИзменениеСчетаДоходовРасходов(ТекущаяСтрока);
	РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока);

КонецПроцедуры // ЗаполнитьСтрокуТЧПоСтрокеДанных()

// Процедура заполняет табличную часть "НематериальныеАктивы".
// 
// Параметры:
//  ВыбранноеЗначение - Структура.
//  ЭтоНовыйДокумент  - Булево.
// 
Процедура ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора(ВыбранноеЗначение, ЭтоНовыйДокумент = Истина) Экспорт
	
	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов, ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	
	МассивНМА = ТаблицаДанных.ВыгрузитьКолонку("ВНА");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивНМА);
	
	ПараметрыОбъектов = ПолучитьПараметры(МассивНМА, ЭтоНовыйДокумент);
	
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыОбъектов);
	
	ИДСтроки = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НематериальныйАктив", СтрокаТаблицы.ВНА);
		
		МассивСтрок = НематериальныеАктивы.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = НематериальныеАктивы.Добавить();
			НоваяСтрока.НематериальныйАктив = СтрокаТаблицы.ВНА;
			СтрокаПараметров = ПараметрыОбъектов[НоваяСтрока.НематериальныйАктив];
			ЗаполнитьСтрокуТЧПоСтрокеДанных(ИДСтроки, СтрокаПараметров);
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Нематериальный актив ""%1%"" уже подобран в строке №%2%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.ВНА, НайденнаяСтрока.НомерСтроки);									 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
		ИДСтроки = ИДСтроки + 1;
		
	КонецЦикла; // По строкам таблицы данных			

КонецПроцедуры // ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, Организация, ВидДвижения
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	// Получим валюту международного учета.
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	ИзменениеВалютыМодуль();
	
	// Заполняет табличную часть "НематериальныеАктивы"
	ВыбранноеЗначение = ВыполнитьПодборНМА();
	ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора(ВыбранноеЗначение);	

КонецПроцедуры // ЗаполнитьДокумент()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования = Неопределено)
	
	// Заполним шапку документа значениями по умолчанию.
    бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);

	Если ОбъектКопирования = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ВидДвижения) Тогда
		ВидДвижения = Перечисления.бит_му_ВидыДвиженияОбесценения.ФормированиеРезерва;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

// Функция выполняет подбор НМА через обработку подбора
//
Функция ВыполнитьПодборНМА()
	
	ПараметрыПодбора  = ЗаполнитьПараметрыПодбора();
	ОбработкаПодбора  = Обработки.бит_му_ПодборВНА.Создать();
	ВыбранноеЗначение = ОбработкаПодбора.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	
	Возврат ВыбранноеЗначение;
	
КонецФункции // ВыполнитьПодборНМА()

// Процедура синхронизирует значения реквизитов типа "СправочникСсылка.НематериальныеАктивы"
// строки табличной части ОсновныеСредства.
// 
// Параметры:
//  ТекущаяСтрока - ДокументТабличнаяЧастьСтрока.бит_му_ОбесценениеНМА.НематериальныеАктивы.
// 
Процедура СинхронизироватьРеквизитыНМА(ТекущаяСтрока) 
	
	Если ТекущаяСтрока = Неопределено Тогда 		
		Возврат; 		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.НематериальныйАктив) Тогда
		
		Для ном = 1 По мКоличествоСубконтоМУ Цикл
			
			ИмяСубконто = "Субконто" + ном;
			
			Если ТипЗнч(ТекущаяСтрока[ИмяСубконто]) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
				ТекущаяСтрока[ИмяСубконто] = ТекущаяСтрока.НематериальныйАктив;   				
			КонецЕсли; 
			
		КонецЦикла; // По субконто
		
	КонецЕсли; 
	
КонецПроцедуры // СинхронизироватьРеквизитыНМА()

// Функция получает курсы валют, необходимые для выполнения валютных пересчетов.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  Отказ                    - Булево.
//  Заголовок                - Строка.
// 
Функция СформироватьСтруктуруКурсовВалют(СтруктураШапкиДокумента,Отказ,Заголовок) 
	
	// Получим курсы валют, неоходимые для выполнения пересчетов
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата,ВидыКурсов);
	
	СтрКурсов = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	Если НЕ ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		ТекстСообщения = НСтр("ru='Для организации ""%1%"" не указана валюта международного учета!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтруктураШапкиДокумента.Организация);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
	КонецЕсли; 
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // СформироватьСтруктуруКурсовВалют()

Функция ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, Период, СтруктураКурсыВалют)
	
	ИсторическиеКурсы = бит_му_ВНА.ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, Период, СтруктураКурсыВалют);	
	
	// Получим соответствие НМА и курсов валюты документа на дату принятия соответствующего НМА.
	СоответствиеНМАиКурсовДокумента = бит_му_ВНА.ПолучитьСоответствиеНМАиКурсовНаДатуПринятия(МассивНМА, СтруктураКурсыВалют.Документ, Организация);
	
	Для Каждого ТекНМА Из ИсторическиеКурсы Цикл
		КурсВалюты = СоответствиеНМАиКурсовДокумента[ТекНМА.Ключ];
		Если КурсВалюты <> Неопределено И КурсВалюты.Свойство("Документ") Тогда
			ТекНМА.Значение.Документ = КурсВалюты.Документ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИсторическиеКурсы;
	
КонецФункции

// Процедура выполняет проверку таблицы НМА.
// 
// Параметры:
//  СтруктураТаблиц  - Структура
//  Отказ            - Булево
//  Заголовок        - Строка
// 
Процедура ПроверитьТаблицыДокумента(СтруктураШапкиДокумента,СтруктураТаблиц,Отказ,Заголовок)  
	
	КолонкиТаблицы = СтруктураТаблиц.НМА.Колонки;
	
	Для Каждого СтрокаТаблицы Из СтруктураТаблиц.НМА Цикл
		
		НачалоСообщения = НСтр("ru='В строке № %1% табличной части ""Нематериальные активы""'");
		НачалоСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НачалоСообщения, СтрокаТаблицы.НомерСтроки);							   
							   
		// Проверка на принятие к учету, выбытие					   
		бит_му_ВНА.ПроверитьСтрокуТаблицыНМА(СтрокаТаблицы,КолонкиТаблицы,СтруктураШапкиДокумента,Отказ,Заголовок);							   
		
		
		// Проверка модели учета
		ПараметрыКласса = СтруктураТаблиц.ПараметрыКлассов[СтрокаТаблицы.Класс];
		флУчетПоПервоначальнойСтоимости = Ложь;
		Если ПараметрыКласса <> Неопределено Тогда
			 флУчетПоПервоначальнойСтоимости = ?(ПараметрыКласса.МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПоПервоначальнойСтоимости,Истина,Ложь);
		КонецЕсли; 
		
		Если НЕ флУчетПоПервоначальнойСтоимости Тогда
			
			ТекстСообщения = НСтр("ru=' указан нематериальный актив ""%1%"" учитываемый НЕ по первоначальной(исторической) стоимости. Обесценение невозможно!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.НематериальныйАктив);							   
			
		    ТекстСообщения = НачалоСообщения + ТекстСообщения;
							   
            бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		
		КонецЕсли; 
		
		// Проверки на начисление амортизации в текущем и следующем периодах.
		Если НЕ СтрокаТаблицы.НачисленаТекущий Тогда
			
			ТекстСообщения = НСтр("ru=' указан нематериальный актив ""%1%"", по которому не начислена амортизация в текущем периоде!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.НематериальныйАктив);							 
			
			ТекстСообщения = НачалоСообщения + ТекстСообщения;
							 
            бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
							 
		КонецЕсли;  
		
		Если СтрокаТаблицы.НачисленаСледующий Тогда
			
			ТекстСообщения = НСтр("ru=' указан нематериальный актив ""%1%"", по которому начислена амортизация в следующих периодах!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.НематериальныйАктив);							 
			
			ТекстСообщения = НачалоСообщения + ТекстСообщения;
							 
            бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		
		КонецЕсли; 
		
		// При формировании резерва проверка на превышение ликвидационной стоимости.
		Если СтруктураШапкиДокумента.ВидДвижения = Перечисления.бит_му_ВидыДвиженияОбесценения.ФормированиеРезерва 
			И СтрокаТаблицы.ВозмещаемаяСтоимость < СтрокаТаблицы.ЛиквидационнаяСтоимость Тогда
			
			ТекстСообщения = НСтр("ru=' указана возмещаемая стоимость: %1% меньше ликвидационной стоимости: %2%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
													,бит_ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ВозмещаемаяСтоимость,мВалютаМеждУчета,"0.00")
													,бит_ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ЛиквидационнаяСтоимость,мВалютаМеждУчета,"0.00"));
			
			ТекстСообщения =  НачалоСообщения + ТекстСообщения;
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);							   							   
			
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ВидДвижения = Перечисления.бит_му_ВидыДвиженияОбесценения.ВозвратОбесценения Тогда
			
			// При возврате проверка на наличие формирования резерва.
			Если СтрокаТаблицы.ДатаФормированияРезерва>= СтруктураШапкиДокумента.Дата Тогда
				
				ТекстСообщения = НСтр("ru=' указан нематериальный актив ""%1%"", по которому ранее не было проведено формирование резерва. Возврат обесценения невозможен!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.НематериальныйАктив);
				
				ТекстСообщения = НачалоСообщения + ТекстСообщения;
				
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
				
			КонецЕсли; 
			
			// Проверка возмещаемой стоимости
			КонтрольнаяСумма = СтрокаТаблицы.БалансоваяСтоимостьНач-СтрокаТаблицы.СуммаАмортизации;
			Если КонтрольнаяСумма < СтрокаТаблицы.ВозмещаемаяСтоимость Тогда
				
				ТекстСообщения = НСтр("ru=' возмещаемая стоимость: %1% больше чем первоначальная стоимость за минусом амортизации по первоначальным параметрам: %2%. Возврат обесценения невозможен!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
												,бит_ОбщегоНазначения.ФорматСумм(СтрокаТаблицы.ВозмещаемаяСтоимость,мВалютаМеждУчета)
												,бит_ОбщегоНазначения.ФорматСумм(КонтрольнаяСумма,мВалютаМеждУчета));
				
				ТекстСообщения = НачалоСообщения + ТекстСообщения;
				
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);				 
				
			КонецЕсли; 
			
		КонецЕсли; // Возврат обесценения
		
	КонецЦикла; // По строкам таблицы	
	
КонецПроцедуры // ПроверитьТаблицыДокумента()

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураТаблиц,СтруктураКурсыВалют,ИсторическиеКурсы,Отказ,Заголовок)
	
	ТаблицаНМА = СтруктураТаблиц.НМА;
	
	// По регистру бит_му_СобытияОС
	НаборЗаписей = Движения.бит_му_СобытияНМА;
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаНМА Цикл
		
		Запись = ТаблицаЗаписей.Добавить();
		Запись.НематериальныйАктив = СтрокаТаблицы.НематериальныйАктив;
		
	КонецЦикла; // По таблице НМА 
	
	Если СтруктураШапкиДокумента.ВидДвижения = Перечисления.бит_му_ВидыДвиженияОбесценения.ВозвратОбесценения Тогда
		
		Событие = Перечисления.бит_му_СобытияНМА.ВозвратОбесценения;
		
	Иначе
		
		Событие = Перечисления.бит_му_СобытияНМА.ФормированиеРезерва;
		
	КонецЕсли; 
	
	
	ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаЗаписей.ЗаполнитьЗначения(Событие                            ,"Событие");
	ТаблицаЗаписей.ЗаполнитьЗначения(Истина                             ,"Активность");	
	ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата       ,"Период");
	
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	
	// По регистру бухгалтерии бит_Дополнительный_2.
	Для каждого СтрокаТаблицы Из ТаблицаНМА Цикл
		
		// Если СтруктураШапкиДокумента.ВидДвижения = Перечисления.бит_му_ВидыДвиженияОбесценения.ВозвратОбесценения Тогда.
			КурсыВалют = ИсторическиеКурсы[СтрокаТаблицы.НематериальныйАктив];
		// Иначе
		// 	КурсыВалют = СтруктураКурсыВалют;
		// КонецЕсли;
		
		// Возврат обесценения
		// ДТ СчетСниженияСтоимости КТ СчетРасходов Сумма
		// формирование резерва
		// ДТ СчетРасходов КТ СчетСниженияСтоимости Сумма.
		СоздатьЗаписьПоФормированиюРезерва(СтруктураШапкиДокумента
		                                     ,СтрокаТаблицы
											 ,КурсыВалют
											 ,СтруктураШапкиДокумента.ВидДвижения);

		
		
		
	КонецЦикла; // По таблице НМА
	
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует проводку по формированию резерва/возврату обесценения НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТаблицыЗначений.
//  ВалютаМУ                 - СправочникСсылка.Валюты.
//  СтруктураКурсыВалют      - Структура.
//                
Процедура СоздатьЗаписьПоФормированиюРезерва(СтруктураШапкиДокумента,СтрокаТаблицы,СтруктураКурсыВалют,ВидДвижения)

	Если СтрокаТаблицы.Сумма = 0 Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	//++СисИнфо //заполнение доп.аналитики по регистру //2012-07-23
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//--СисИнфо
	
	Если ВидДвижения = Перечисления.бит_му_ВидыДвиженияОбесценения.ВозвратОбесценения Тогда
		
		 ДтКтРасходы  = "Кт";
		 ДтКтСнижение = "Дт";
		 Содержание = НСтр("ru='возврат обесценения'");
		 
	Иначе 
		 // Формирование резерва
		 ДтКтРасходы  = "Дт";
		 ДтКтСнижение = "Кт";
		 Содержание = НСтр("ru='формирование резерва'");

	КонецЕсли; 
	
	// Заполнение атрибутов записи	
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										   ,СтруктураШапкиДокумента.Организация
										   ,СтруктураШапкиДокумента.Дата
										   // ,мВалютаМеждУчета
										   ,СтруктураКурсыВалют.Документ.Валюта
										   ,
										   ,
										   ,СтрокаТаблицы.Сумма
										   ,Содержание);
										   
										   
	
	СтруктураПараметров["Счет"+ДтКтСнижение] = СтрокаТаблицы.СчетСниженияСтоимости;
	СтруктураПараметров["Счет"+ДтКтРасходы]  = СтрокаТаблицы.СчетДоходовРасходов;
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	// Заполнение аналитики	
	Для  ном = 1 по мКоличествоСубконтоМУ Цикл
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["Счет"+ДтКтРасходы]
		                                            ,Запись["Субконто"+ДтКтРасходы]
													,ном
													,СтрокаТаблицы["Субконто"+ном]);			
		
	КонецЦикла; 
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["Счет"+ДтКтСнижение]
	                                            ,Запись["Субконто"+ДтКтСнижение]
												,"НематериальныеАктивы"
												,СтрокаТаблицы.НематериальныйАктив);		
	
	//++СисИнфо  //заполняем аналитику по объекту строительства //2012-07-23
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["Счет"+ДтКтСнижение]
	                                            ,Запись["Субконто"+ДтКтСнижение]
												,"Объект"
												,СтрокаТаблицы.ОбъектСтроительства);
	//--СисИнфо					
	
	// Выполнение валютных пересчетов	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
													,Запись
													,МассивИмен
													,СтруктураКурсыВалют
													,СтруктураКурсыВалют.Документ);


КонецПроцедуры // СоздатьЗаписьПоСписаниюАмортизации()

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти  

#КонецЕсли
