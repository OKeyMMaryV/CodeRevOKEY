
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Максимальное количество субконто на счете по МУ.
	фКоличествоСубконтоМУ = 4;
	
	ЗаполнитьКэшЗначений();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("Дата");
	фКэшРеквизитов.Вставить("Организация");
	фКэшРеквизитов.Вставить("ВидДвижения");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьВалютуМСФО();	
		УстановитьСостояниеДокумента();
	Иначе
		ЗаполнитьВалютуМСФО(Ложь);	
	КонецЕсли;
	
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетДоходовРасходов"
												   ,"Субконто"
												   ,фКоличествоСубконтоМУ
												   ,"НематериальныеАктивы"
												   ,"Элементы.НематериальныеАктивы.ТекущиеДанные");
												   
	ВосстановитьКоличествоДоступныхСубконто();
	
	НастроитьОформлениеФормы();
	
	// Изменение кода. Начало. 03.04.2014{{
	УстановитьПараметрыВыбораДляСчетов();
    // Изменение кода. Конец. 03.04.2014}}
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("Действие") Тогда
			
			Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
				
				Если Объект.НематериальныеАктивы.Количество() > 0 Тогда
					
					Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
					ТекстВопроса = НСтр("ru='Табличная часть ""Нематериальные активы"" будет очищена. Продолжить?'");
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
					
				Иначе
					
					ОбработатьПодборНМА(ВыбранноеЗначение);
					
				КонецЕсли;
				
			Иначе
				
				ОбработатьПодборНМА(ВыбранноеЗначение);
				
			КонецЕсли; 
			
		КонецЕсли; // В структуре есть поле действие 
		
	КонецЕсли; // Это структура
	
КонецПроцедуры

// Процедура - завершение выбора ОС 
// 
&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НематериальныеАктивы.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбработатьПодборНМА(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	ВосстановитьКоличествоДоступныхСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ОбесценениеНМА";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	
	фКэшРеквизитов.Дата = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДвиженияПриИзменении(Элемент)
	
	Если Объект.ВидДвижения <> фКэшРеквизитов.ВидДвижения 
		И Объект.НематериальныеАктивы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеВидаДвижения", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
		
	Иначе
		
		фКэшРеквизитов.ВидДвижения = Объект.ВидДвижения;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - завершение изменения реквизита "ВидДвижения".
// 
&НаКлиенте
Процедура ОбработатьИзменениеВидаДвижения(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВидДвижения = фКэшРеквизитов.ВидДвижения;
		Возврат;
	КонецЕсли;
	
	Объект.НематериальныеАктивы.Очистить();
	
	фКэшРеквизитов.ВидДвижения = Объект.ВидДвижения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация <> фКэшРеквизитов.Организация 
		И Объект.НематериальныеАктивы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

	Иначе
		
		фКэшРеквизитов.Организация = Объект.Организация;
	
		// Установим валюту межд. учета
		ЗаполнитьВалютуМСФО();
		
	КонецЕсли; 
		
КонецПроцедуры

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Объект.Организация = фКэшРеквизитов.Организация;
		Возврат;
	КонецЕсли;
	
	Объект.НематериальныеАктивы.Очистить();
	
	фКэшРеквизитов.Организация = Объект.Организация;
	
	// Установим валюту межд. учета
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНематериальныеАктивы

&НаКлиенте
Процедура НематериальныеАктивыНематериальныйАктивПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииНМА(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСчетДоходовРасходовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаДоходовРасходов(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"НематериальныеАктивы",Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные,"Субконто",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"НематериальныеАктивы",Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущиеДанные,"Субконто",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "НематериальныеАктивы", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "Субконто"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // НематериальныеАктивыСубконтоАвтоПодбор()

&НаКлиенте
Процедура НематериальныеАктивыВозмещаемаяСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТЧ(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = ЗаполнитьПараметрыПодбора();
	
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.НематериальныеАктивы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Параметры в табличной части будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Да);
		
	Иначе
		
		ЗаполнитьНМА();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - завершение обработки команды "Заполнить".
// 
&НаКлиенте
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНМА();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТекущейСтроке(Команда)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииНМА(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	КэшПеречисления = Новый Структура;	
	КэшПеречисления.Вставить("бит_му_РежимыПодбораВНА", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_РежимыПодбораВНА));
	КэшПеречисления.Вставить("бит_му_МоделиУчетаВНА"  , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_МоделиУчетаВНА));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.НематериальныеАктивыСчетСниженияСтоимости);
	МассивЭлементов.Добавить(Элементы.НематериальныеАктивыСчетДоходовРасходов);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаСервере
Процедура НастроитьОформлениеФормы()
	
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"НематериальныеАктивы"
	                                                           ,"Субконто"
															   ,"КоличествоДоступныхСубконто"
															   ,фКоличествоСубконтоМУ);
															   
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
												   
	// 1c-izhtc, ChuckNorris, 18.08.2015 (
	Для каждого СтрокаТаблицы Из Объект.НематериальныеАктивы Цикл
		СтрокаТаблицы.ДоступностьСубконто1 = (ТипЗнч(СтрокаТаблицы.Субконто1) <> Тип("СправочникСсылка.ОбъектыСтроительства"));
		СтрокаТаблицы.ДоступностьСубконто2 = (ТипЗнч(СтрокаТаблицы.Субконто2) <> Тип("СправочникСсылка.ОбъектыСтроительства"));
		СтрокаТаблицы.ДоступностьСубконто3 = (ТипЗнч(СтрокаТаблицы.Субконто3) <> Тип("СправочникСсылка.ОбъектыСтроительства"));
		СтрокаТаблицы.ДоступностьСубконто4 = (ТипЗнч(СтрокаТаблицы.Субконто4) <> Тип("СправочникСсылка.ОбъектыСтроительства"));
	КонецЦикла;
	// 1c-izhtc, ChuckNorris, 18.08.2015 ) 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНМА(ИДСтроки)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(ИДСтроки);
	
	ПараметрыОбъектов = ПолучитьПараметры(ТекущаяСтрока.НематериальныйАктив);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	м_КоличествоДоступныхСубконто = Объект.НематериальныеАктивы.Выгрузить(, "КоличествоДоступныхСубконто, ДоступностьСубконто1, ДоступностьСубконто2, ДоступностьСубконто3, ДоступностьСубконто4"); // 1c-izhtc ChuckNorris 26.10.2015
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	// Изменение кода. Начало. 18.04.2014{{
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента(ПараметрыОбъектов);
	// Изменение кода. Конец. 18.04.2014}}
	
	// 1c-izhtc ChuckNorris 23.10.2015
	// Исправление: Восстановление значения "КоличествоДоступныхСубконто" и "ДоступностьСубконто" после обращения к процедуре модуля объекта
	Инд = 0;
	Для Каждого Стр Из Объект.НематериальныеАктивы Цикл
		ЗаполнитьЗначенияСвойств(Стр, м_КоличествоДоступныхСубконто[Инд]);
		Инд = Инд + 1;
	КонецЦикла;
	// 1c-izhtc ChuckNorris 23.10.2015 ) 
	
	СтрокаДанных = ПараметрыОбъектов[ТекущаяСтрока.НематериальныйАктив];
	
	ЗаполнитьСтрокуТЧПоСтрокеДанных(ТекущаяСтрока,СтрокаДанных);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента(ПараметрыОбъектов)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыОбъектов);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ВосстановитьКоличествоДоступныхСубконто();
		
КонецПроцедуры // ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента()

&НаСервере
Процедура ЗаполнитьСтрокуТЧПоСтрокеДанных(СтрокаТабличнойЧасти, СтрокаДанных)

	ИДСтроки = Объект.НематериальныеАктивы.Индекс(СтрокаТабличнойЧасти);
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ЗаполнитьСтрокуТЧПоСтрокеДанных(ИДСтроки, СтрокаДанных);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ВосстановитьКоличествоДоступныхСубконто();

	//++СисИнфо //заполнение объекта строительства //2012-07-23
	мКоличествоСубконтоМУ = 4; // 1c-izhtc, ChuckNorris, 17.08.2015
	Если ЗначениеЗаполнено(СтрокаДанных.ОбъектСтроительства) Тогда
		Для ном = 1 По мКоличествоСубконтоМУ Цикл
			ИмяСубконто = "Субконто"+ном;
			Если ТипЗнч(СтрокаТабличнойЧасти[ИмяСубконто]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				 СтрокаТабличнойЧасти[ИмяСубконто] = СтрокаДанных.ОбъектСтроительства;
			 КонецЕсли; 
		 КонецЦикла; // по субконто
	КонецЕсли;
	//--СисИнфо
	
КонецПроцедуры // ЗаполнитьСтрокуТЧПоСтрокеДанных()

// Функция получает параметры, передаваемые в обработку подбора НМА.
//
&НаСервере
Функция ЗаполнитьПараметрыПодбора()

	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ПараметрыПодбора = ДокументОбъект.ЗаполнитьПараметрыПодбора();
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

// Функция получает параметры  для массива НМА или одного НМА.
// 
// Параметры:
//  МассивОС  - Массив
// 
// Возвращаемое значение:
// ПараметрыОС - Соответствие
// 
&НаСервере
Функция ПолучитьПараметры(ПереченьОбъектов)
	
	ЭтоНовыйДокумент = Параметры.Ключ.Пустая();
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	СтрПараметры = ДокументОбъект.ПолучитьПараметры(ПереченьОбъектов, ЭтоНовыйДокумент);
	
	Возврат СтрПараметры;

КонецФункции // ПолучитьПараметрыОС()

// Восстанавливает количество доступных субконто для счета дохода/расхода в строках таб.части.
// 
&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
    Для каждого СтрокаТаблицы Из Объект.НематериальныеАктивы Цикл
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходовРасходов);
		СтрокаТаблицы.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;  		
	КонецЦикла;
	
КонецПроцедуры // ВосстановитьКоличествоДоступныхСубконто()

// Процедура выполняет заполнение валюты МСФО.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьВалютуМСФО(ЗаполнитьВалютуДокумента=Истина)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	СтрокаВалютаМежУчета = Строка(ВалютаМСФО);
	
	Элементы.ДекорацияВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМежУчета), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМежУчета);
	
	Если ЗаполнитьВалютуДокумента Тогда
		Объект.ВалютаДокумента = ВалютаМСФО;
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры // ИзменениеВалюты()

&НаСервере
Процедура ОбработатьПодборНМА(ВыбранноеЗначение)
	
	ЭтоНовыйДокумент = Параметры.Ключ.Пустая();
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора(ВыбранноеЗначение, ЭтоНовыйДокумент);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ВосстановитьКоличествоДоступныхСубконто();
		
КонецПроцедуры

&НаСервере
Процедура ИзменениеСчетаДоходовРасходов(Идентификатор)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(Идентификатор);
		
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеСчетаДоходовРасходов(ТекущаяСтрока);
	
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДоходовРасходов);

	ТекущаяСтрока.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;
	
КонецПроцедуры // ИзменениеСчетаУчетаНМА()

// Процедура выполняет расчет суммы в табличной части.
// 
// Параметры:
//  Идентификатор - Число
// 
&НаСервере
Процедура РассчитатьСуммуВСтрокеТЧ(Идентификатор)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(Идентификатор);
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТЧ()

// Заполняет данные по НМА в строках таб.части.
// 
&НаСервере
Процедура ЗаполнитьНМА()
	
	МассивНМА = Объект.НематериальныеАктивы.Выгрузить().ВыгрузитьКолонку("НематериальныйАктив");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивНМА);
	ПараметрыОбъектов = ПолучитьПараметры(МассивНМА);
	
	// Изменение кода. Начало. 18.04.2014{{
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента(ПараметрыОбъектов);
	// Изменение кода. Конец. 18.04.2014}}
	
	Для Каждого ТекущаяСтрока Из Объект.НематериальныеАктивы Цикл
		
		СтрокаДанных = ПараметрыОбъектов[ТекущаяСтрока.НематериальныйАктив];
		ЗаполнитьСтрокуТЧПоСтрокеДанных(ТекущаяСтрока,СтрокаДанных);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКурсыВалютПоПериодам(КешСтарыеКурсы = Неопределено, флНовыеКурсы = Ложь)
	
	Если флНовыеКурсы Тогда
		СтруктураКурсыВалют = Новый Структура;
		СтруктураКурсыВалют.Вставить("Валюта", Объект.ВалютаДокумента);
		СтруктураКурсыВалют.Вставить("Кратность", Объект.КратностьДокумента);
		СтруктураКурсыВалют.Вставить("Курс", Объект.КурсДокумента);
	Иначе
		СтруктураКурсыВалют = Новый Структура;
		СтруктураКурсыВалют.Вставить("Валюта", КешСтарыеКурсы.ВалютаДокумента); 
		СтруктураКурсыВалют.Вставить("Кратность", КешСтарыеКурсы.КратностьДокумента);
		СтруктураКурсыВалют.Вставить("Курс", КешСтарыеКурсы.КурсДокумента);
	КонецЕсли; 
	
	МассивНМА = Объект.НематериальныеАктивы.Выгрузить().ВыгрузитьКолонку("НематериальныйАктив");
	
	СоответствиеНМАиКурсовДокумента = бит_му_ВНА.ПолучитьСоответствиеНМАиКурсовНаДатуПринятия(МассивНМА, СтруктураКурсыВалют, Объект.Организация);

	Возврат СоответствиеНМАиКурсовДокумента;
	
КонецФункции

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();  	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ВосстановитьКоличествоДоступныхСубконто();
	  
КонецПроцедуры // ИзменениеВалютыСервер()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , "");
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,ИмяТабличногоПоля,ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента,ИмяТабличногоПоля,"");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Контейнер,ИмяСубконто,ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,ИмяСубконто
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

&НаКлиенте
Процедура ИзменениеСубконто(Контейнер,ИмяСубконто,ЗначениеСубконто)

	  СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер,ИмяСубконто,фКоличествоСубконтоМУ);
	  бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто,ИмяСубконто,ЗначениеСубконто,фКоличествоСубконтоМУ);
      бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто,Контейнер,ИмяСубконто,"",фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.НематериальныеАктивы;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество()>0 
		И ЗначениеЗаполнено(мКэшРеквизитовФормы.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаДокумента)Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТаблицаОбъекта = Объект.НематериальныеАктивы;
		
		// Получим курсы валют на дату принятия к учету для каждого ОС.
		КурсыСтарые = ПолучитьКурсыВалютПоПериодам(мКэшРеквизитовФормы);
		КурсыНовые = ПолучитьКурсыВалютПоПериодам(,Истина);
		
		МассивСуммДляПересчета = Новый Массив;
		МассивСуммДляПересчета.Добавить("ВозмещаемаяСтоимость");
		МассивСуммДляПересчета.Добавить("БалансоваяСтоимость");
		
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
							
				Для каждого ИмяСуммы Из МассивСуммДляПересчета Цикл
					
					// Балансовую стоимость рассчитаем на дату принятия к учету ОС.
					Если ИмяСуммы = "БалансоваяСтоимость" Тогда
						
						Если НЕ КурсыСтарые[СтрокаТаблицы.НематериальныйАктив] = Неопределено 
							И НЕ КурсыНовые[СтрокаТаблицы.НематериальныйАктив] = Неопределено Тогда
							
							СтарыеКурсы = КурсыСтарые[СтрокаТаблицы.НематериальныйАктив].Документ;
							НовыеКурсы = КурсыНовые[СтрокаТаблицы.НематериальныйАктив].Документ;

					
							СтрокаТаблицы[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[ИмяСуммы]
																									,СтарыеКурсы.Валюта
																									,НовыеКурсы.Валюта
																									,СтарыеКурсы.Курс
																									,НовыеКурсы.Курс
																									,СтарыеКурсы.Кратность
																									,НовыеКурсы.Кратность);
						КонецЕсли;
					Иначе
						
						СтрокаТаблицы[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[ИмяСуммы]
																							   ,мКэшРеквизитовФормы.ВалютаДокумента
																							   ,Объект.ВалютаДокумента
																							   ,мКэшРеквизитовФормы.КурсДокумента
																							   ,Объект.КурсДокумента
																							   ,мКэшРеквизитовФормы.КратностьДокумента
																					   		   ,Объект.КратностьДокумента);
					КонецЕсли;
				КонецЦикла;
				
				// Рассчитаем сумму
				РассчитатьСуммуВСтрокеТЧ(СтрокаТаблицы.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЕсли; 
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()


#КонецОбласти

#КонецОбласти

// 1c-izhtc, ChuckNorris, 18.08.2015 ( 
&НаКлиенте
Процедура НематериальныеАктивыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	ТекущиеДанные.ДоступностьСубконто1 = (ТипЗнч(ТекущиеДанные.Субконто1) <> Тип("СправочникСсылка.ОбъектыСтроительства"));
	ТекущиеДанные.ДоступностьСубконто2 = (ТипЗнч(ТекущиеДанные.Субконто2) <> Тип("СправочникСсылка.ОбъектыСтроительства"));
	ТекущиеДанные.ДоступностьСубконто3 = (ТипЗнч(ТекущиеДанные.Субконто3) <> Тип("СправочникСсылка.ОбъектыСтроительства"));
	ТекущиеДанные.ДоступностьСубконто4 = (ТипЗнч(ТекущиеДанные.Субконто4) <> Тип("СправочникСсылка.ОбъектыСтроительства"));
	
КонецПроцедуры
// 1c-izhtc, ChuckNorris, 18.08.2015 )
