
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы.

&НаКлиенте 
Перем мСписокВидовДоговоров; // Хранит список доступных для выбора видов договоров.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ЗаявкаНаЗатраты"));
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументЗаявка, МассивТипов, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	// Настроим отображение полей доп. аналитик в форме.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ЭтотОбъект
																				 ,мКэшЗначений.ИзмеренияДоп
																				 ,мКэшЗначений.НастройкиИзмерений);
																				 
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьНачальныеСвойстваАналитикШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект));																			 
																				 
	// Заполним текст про график начислений.
	ЗаполнитьТекстПроГрафикНачислений();																			 
																				 
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// При копировании метод ОбработкаЗаполнения не вызывается
			// ДокументЗаявка.ЗаполнитьШапкуДокумента(Параметры.ЗначениеКопирования);
			// ЗначениеВРеквизитФормы(ДокументЗаявка, "Объект");
			ИзменениеВалюты();
		КонецЕсли;
		УстановитьТипВидаОперации(ЭтотОбъект);
	КонецЕсли;
	
	// Управление видимостью вызываем для записанного документа.
	Если Не ЭтоНовый Тогда
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
	бит_РаботаСДиалогамиСервер.УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы);
	УправлениеЭлементомВидОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьВозможностьВводаДокумента(Отказ);
	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		
		СтрокаКомментарий = Объект.Комментарий;
		
		ИзменениеСтатьиОборотов(Объект);
		
		// Проверим принадлежность ЦФО к статье оборотов.
		ПроверитьПринадлежностьЦФОКСтатьеОборотов(Объект);
		
		// Установить видимость реквизитов и заголовков колонок.	
		УправлениеЭлементамиФормы();
		
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ДатаРасхода");
	мКэшРеквизитовФормы.Вставить("ДатаПлатежаКрайняя");
	мКэшРеквизитовФормы.Вставить("ТипЗаявки");
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	// Проверка возможности редактирования исполнителя.
	Элементы.Исполнитель.ТолькоПросмотр = мКэшЗначений.РольДоступна.ИсполнительЗаявкиНаЗатраты;
	
	// Оставим только те разрезы, которые указаны в статье оборотов
	// МассивИсключаемыхИзмерений = ПолучитьИзмеренияВидимыеВсегда();
	// НастроитьВидимостьАналитикБюджетирования(Объект.СтатьяОборотов, ЭтаФорма,,,, МассивИсключаемыхИзмерений);
	НастроитьВидимостьАналитикБюджетирования();
	
	// Рассчитаем сумму без НДС для отображения на форме.
	РассчитатьСуммуБезНДС();
	
	// Установим отбор для статей оборотов.
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьяОборотов);
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);

	// Пригодится если используются обычные формы выбора статьи оборотов и договоров.
	мТекущаяСтатья 				= Объект.СтатьяОборотов;
	мТекущийДоговорКонтрагента 	= Объект.ДоговорКонтрагента;
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("Статус") Тогда
			
			ЭтаФорма.Статус               = ВыбранноеЗначение.Статус;
			ЭтаФорма.ДатаИзмененияСтатуса = ВыбранноеЗначение.ДатаИзмененияСтатуса;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Статус"			   , ВыбранноеЗначение.Статус);
			СтруктураПараметров.Вставить("ДатаИзмененияСтатуса", ВыбранноеЗначение.ДатаИзмененияСтатуса);
			
			ИнформацияСтатус = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ЗаявкаНаЗатраты";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли; 
	
	// Надо отследить момент окончания проведения или отказа от него.
	ПодключитьОбработчикОжидания("ОжиданиеПроведенияДокумента", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Статус = мКэшЗначений.Заявка_Закрыта 
			Или Статус = мКэшЗначений.Заявка_Выполнена Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ в статусе ""%1"", проведение невозможно!'"), Статус);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Получим адрес, где будет храниться массив строк по которым прошло превышение бюджета.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		мАдресХранилищаСтрокПревышения = ТекущийОбъект.мАдресХранилищаСтрокПревышения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров); 
		
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьТипВидаОперации(ЭтотОбъект);
	ОбновитьПараметрыСтатуса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УстановитьНастройкиДоступностиЭлементов();
		УправлениеЭлементамиФормы();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыВФорме();
	
КонецПроцедуры

// Процедура - обрботчик события "ПриИзменении" поля ввода "ТипЗаявки".
// 
&НаКлиенте
Процедура ТипЗаявкиПриИзменении(Элемент)
	
	// Для данного документа тип заявки "График платежей" и "График начислений" установить нельзя.
	Если Объект.ТипЗаявки = мКэшЗначений.Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей
		ИЛИ Объект.ТипЗаявки = мКэшЗначений.Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикНачислений Тогда
		
		ТекстСообщения = Нстр("ru = 'Тип заявки ""%1"" вручную установить нельзя.'"); 
		ТекстСообщения = СтрШаблон(ТекстСообщения, Объект.ТипЗаявки);
		ПоказатьПредупреждение(,ТекстСообщения,,НСтр("ru = 'Ошибка изменения типа заявки'"));
		
		ИзвлечьИзКэша("ТипЗаявки");
		
	Иначе
		Модифицированность = Истина;
		ДобавитьВКэш("ТипЗаявки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаявкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеВыборИзСписка = Новый ОписаниеОповещения("ОбработкаВыбораИзСписка", ЭтотОбъект, Элемент);
	ПоказатьВыборИзСписка(ОповещениеВыборИзСписка, СписокВыбораТипЗаявки, Элемент);
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	// Проверим принадлежность ЦФО к статье оборотов.
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(Объект, Истина);
	
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьяОборотов);
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ЦФО".
// 
&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	
	// Проверим принадлежность ЦФО к статье оборотов.
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(Объект, Истина);
	
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьяОборотов);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтатьяОборотов".
// 
&НаКлиенте
Процедура СтатьяОборотовПриИзменении(Элемент)
	
	ИзменениеСтатьиОборотов(Объект);
	РассчитатьСуммуБезНДС();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ИзменениеКонтрагента();
	
	// Могли поменять договор.
	ПриИзмененииДоговораКлиент();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Установим отбор для договора контрагента.
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,Объект
															   ,Элемент.Имя
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодбор" полей ввода "Аналитика_i" (i от 1 до 4).
//
&НаКлиенте
Процедура Аналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,Объект
															   ,Элемент.Имя
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,Объект
	                                                                       	,Элемент.Имя
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаРасхода".
//  
&НаКлиенте
Процедура ДатаРасходаПриИзменении(Элемент)
	
	ИзменениеДатыРасхода();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаПлатежаКрайняя".
// 
&НаКлиенте
Процедура ДатаПлатежаКрайняяПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"				 , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ВидДаты"			 , "Дата расхода");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя", Объект.ДатаПлатежаКрайняя);
	
	Если бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Истина) Тогда
		ИзвлечьИзКэша("ДатаПлатежаКрайняя");
		Возврат;
	КонецЕсли;
	
	ДобавитьВКэш("ДатаПлатежаКрайняя");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ИзменениеВалютыВФорме();
		
	КонецЕсли; 
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма".
// 
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	РассчитатьСуммуНДС(Объект);
	РассчитатьСуммуБезНДС();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтавкаНДС".
// 
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	РассчитатьСуммуНДС(Объект);
	РассчитатьСуммуБезНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаГрафикНачисленийНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ГрафикНачислений) Тогда
		// Откроем форму для просмотра графика начислений. 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ГрафикНачислений);
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		
		ОткрытьФорму("Документ.бит_ДополнительныеУсловияПоДоговору.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект); 
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ОплатаЗаСчет".
// 
&НаКлиенте
Процедура ОплатаЗаСчет(Команда)
	
	Попытка
		МассивСтрокПревышения = ПолучитьИзВременногоХранилища(мАдресХранилищаСтрокПревышения);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ изменен. Перед вводом корректировки его необходимо записать. Записать?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОплатаЗаСчет", ЭтотОбъект, МассивСтрокПревышения);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 30,,НСтр("ru = 'Документ изменен'"));
					   		
	Иначе
		
		ДанныеЗаполнения = Новый Структура;
	
		ДанныеЗаполнения.Вставить("ДокОснование"		 , Объект.Ссылка);
		ДанныеЗаполнения.Вставить("МассивСтрокПревышения", МассивСтрокПревышения);

		ПараметрыФормы = Новый Структура;

		ПараметрыФормы.Вставить("Основание", ДанныеЗаполнения);

		ОткрытьФорму("Документ.бит_КорректировкаКонтрольныхЗначений.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "СверхБюджета".
// 
&НаКлиенте
Процедура СверхБюджетаПриИзменении(Элемент)
	
	УстановитьВидимостьКнопкиОплатитьЗаСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасходногоДокументаПриИзменении(Элемент)
	
	УстановитьТипВидаОперации(ЭтотОбъект);
	УправлениеЭлементомВидОперации(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("СтавкиНДС"						   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СтавкиНДС));
	КэшПеречисления.Вставить("бит_РасходДоход"					   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов"			   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_ТипыЗаявокНаРасходованиеСредств" , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыЗаявокНаРасходованиеСредств));
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов"		   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.ВидыДоговоровКонтрагентов));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Доступные роли. 
	КэшРольДоступна = Новый Структура;
	РольДоступнаИсполнительЗаявкиНаЗатраты = бит_ОбщегоНазначения.РольДоступнаРлс("ИсполнительЗаявкиНаЗатраты");
	КэшРольДоступна.Вставить("ИсполнительЗаявкиНаЗатраты", РольДоступнаИсполнительЗаявкиНаЗатраты);
	
	КэшированныеЗначения.Вставить("РольДоступна", КэшРольДоступна);
	
	// Статусы заявки
	КэшированныеЗначения.Вставить("Заявка_Черновик"	 , Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Черновик);
	КэшированныеЗначения.Вставить("Заявка_Утверждена", Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Утверждена);
	КэшированныеЗначения.Вставить("Заявка_Выполнена" , Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Выполнена);
	КэшированныеЗначения.Вставить("Заявка_Закрыта"	 , Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Закрыта);
	
	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ЗаявкаНаЗатраты"));
	
	КэшированныеЗначения.Вставить("ИзмеренияДоп"      		  , ДокументЗаявка.мИзмеренияДоп);
	КэшированныеЗначения.Вставить("НастройкиИзмерений"		  , ДокументЗаявка.мНастройкиИзмерений);
	КэшированныеЗначения.Вставить("СписокСтатейПринадлежность", ПолучитьСписокСтатейПоПринадлежности());
	КэшированныеЗначения.Вставить("ВалютаРеглУчета"			  , Константы.ВалютаРегламентированногоУчета.Получить());
	
	// Сформируем список доступных валют.
	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
	
	КэшированныеЗначения.Вставить("СписокВалют", СписокВалют);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	СписокВыбораТипЗаявки.Добавить(Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая);
	СписокВыбораТипЗаявки.Добавить(Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Внеплановая);
	
КонецПроцедуры

// Функция получает список статей оборотов, принадлежащих данному ЦФО.
// 
// Параметры:
//  ВыводитьСообщения - Булево.
//  ИндексСтроки 	  - Число, по умолчанию Неопределено.
// 
// Возвращаемое значение:
//  СписокСтатей - СписокЗначений.
// 
&НаСервере
Функция ПолучитьСписокСтатейПоПринадлежности(ВыводитьСообщения = Ложь, ИндексСтроки = Неопределено)

	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ЗаявкаНаЗатраты"));
	СписокСтатей   = ДокументЗаявка.ПолучитьСписокСтатейПоПринадлежностиМодуль(ВыводитьСообщения, ИндексСтроки);

    Возврат СписокСтатей;
	
КонецФункции

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ЗаявкаНаЗатраты"));
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда 
		Элементы.ФормаОбработкабит_УстановкаВизСогласование.Видимость 		= Ложь;
		Элементы.ФормаДокументбит_ЗаявкаНаЗатратыРасходныеПозиции.Видимость = Ложь;
	КонецЕсли;
	
	ЗаблокироватьЭлементы = НужноЗаблокироватьКлючевыеЭлементыСервер();
	
	ЭтоГрафикНачислений = ?(Объект.ТипЗаявки = мКэшЗначений.Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикНачислений
						 ,Истина
						 ,Ложь);
	
	// Если элементы формы не заблокированы
	// и тип заявки "График начислений", тогда
	// запретим его редактирование.
	Если Не ЗаблокироватьЭлементы 
		И ЭтоГрафикНачислений Тогда
		Элементы.ТипЗаявки.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.НадписьГрафикНачислений.Видимость     = ЭтоГрафикНачислений;
	Элементы.ГиперссылкаГрафикНачислений.Видимость = ЭтоГрафикНачислений;
	
	ЕстьКнопкаПровестиИЗакрыть = Элементы.Найти("ФормаПровестиИЗакрыть");
	
	// Под ограниченными правами управляемая форма сама удаляет кнопку.
	Если НЕ ЕстьКнопкаПровестиИЗакрыть = Неопределено Тогда
		Элементы.ФормаПровестиИЗакрыть.Доступность = Не ЗаблокироватьЭлементы;
	КонецЕсли;
	
	Элементы.ФормаЗаписать.Доступность 		   = Не ЗаблокироватьЭлементы;
	
	Элементы.СверхБюджета.Доступность		   = Не ЗаблокироватьЭлементы;
	
	ИмяСтраницыДляУстановки = "";
	СтраницыПанели 			= Элементы.ГруппаСтраницы.ПодчиненныеЭлементы;
	
	ИмяСтраницыДляУстановки = "ГруппаЗаявка";
	
	СтраницыПанели["ГруппаЗаявка"].Видимость = Истина;
	
	Если Не ПустаяСтрока(ИмяСтраницыДляУстановки) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = СтраницыПанели[ИмяСтраницыДляУстановки];
	КонецЕсли; 
	
	УстановитьДоступностьЭлементов();
	
	// Установим настройки доступности элементов формы.
	УстановитьНастройкиДоступностиЭлементов();
	
	Если Статус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Закрыта Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеЭлементомВидОперации(Форма)
	
	Элементы = Форма.Элементы;
	Объект 	 = Форма.Объект;
	
	Если Объект.ВидРасходногоДокумента = ПредопределенноеЗначение("Перечисление.бит_ВидыРасходныхДокументов.ПоступлениеДопРасходов")
		ИЛИ Объект.ВидРасходногоДокумента = ПредопределенноеЗначение("Перечисление.бит_ВидыРасходныхДокументов.ПустаяСсылка") Тогда
		
		Элементы.ВидОперации.АвтоОтметкаНезаполненного = Ложь;	
		Элементы.ВидОперации.ОтметкаНезаполненного = Ложь;	
	Иначе
		Элементы.ВидОперации.АвтоОтметкаНезаполненного = Истина;	
		Элементы.ВидОперации.ОтметкаНезаполненного = Истина;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает доступность элементам формы.
// 
// Параметры:
//  Доступность - Булево.
// 
&НаСервере
Процедура УстановитьДоступностьЭлементов()

	ЭлементыТолькоПросмотр = ?(Статус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Черновик
			ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Ложь, Истина);

	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда  
			Элемент.ТолькоПросмотр = ЭлементыТолькоПросмотр;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

// Функция определяет следует ли заблокировать ключевые реквизиты заявки. Сервер.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//   ЗаблокироватьРеквизиты - Булево.
// 
&НаСервере 
Функция НужноЗаблокироватьКлючевыеЭлементыСервер()

	флЗаблокироватьЭлементы = Ложь;
	Если Объект.Проведен 
		Или Статус = мКэшЗначений.Заявка_Утверждена 
		Или Статус = мКэшЗначений.Заявка_Выполнена
		Или Статус = мКэшЗначений.Заявка_Закрыта Тогда
		
		флЗаблокироватьЭлементы = Истина;
		
	КонецЕсли; 
	
	Возврат флЗаблокироватьЭлементы;
	
КонецФункции

// Процедура применяет настройки доступности и видимости для элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
	
КонецПроцедуры

// Процедура устанавливает ставку НДС.
// 
// Параметры:
//  СтавкиНДСПриемник 	   - СправочникСсылка.СтавкиНДС. Возвращаемый.
//  СтатьяОборотовИсточник - СправочникСсылка.бит_СтатьиОборотов.
// 
&НаСервереБезКонтекста 
Процедура УстановитьСтавкуНДС(КонтейнерПриемникСтавкиНДС, СтатьяОборотовИсточник)
	
	КонтейнерПриемникСтавкиНДС = СтатьяОборотовИсточник.СтавкаНДС;
	
КонецПроцедуры

// Процедура выполняет действия на сервере, необходимые при изменении ЦФО.
// 
// Параметры:
//  СтруктураПараметров - Структура.
//  ИндексСтроки 		- Число, по умолчанию Неопределено.
// 
&НаСервере
Процедура ИзменениеЦФО(СтруктураПараметров, ИндексСтроки = Неопределено)

	ВыводитьСообщения = ?(СтруктураПараметров.Свойство("ВыводитьСообщения"), СтруктураПараметров.ВыводитьСообщения, Ложь);
	
	Если ВыводитьСообщения                      
		И Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(Объект.ЦФО) Тогда
		// Для новых документов с незаполненным ЦФО не выводим сообщения.
		ВыводитьСообщения = Ложь;
	КонецЕсли;
	
	СтруктураПараметров.СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежности(ВыводитьСообщения, ИндексСтроки);

КонецПроцедуры

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалюты()
	
	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ЗаявкаНаЗатраты"));
	ДокументЗаявка.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументЗаявка, Объект);
	  
КонецПроцедуры

// Процедура выполняет действия на сервере, необходимые при изменении Организации.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДокументЗаявка = РеквизитФормыВЗначение("Объект");
	
	// Выполняем общие действия для всех документов при изменении Организация.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументЗаявка, Пользователи.ТекущийПользователь());
	ЗначениеВРеквизитФормы(ДокументЗаявка, "Объект");
	
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект));	

КонецПроцедуры

// Процедура обрабатывает изменение договора Сервер.
// 
// Параметры:
//  ИндексСтроки - Число, по умолчанию Неопределено.
// 
&НаСервере 
Процедура ПриИзмененииДоговораСервер(ИндексСтроки = Неопределено)
	
	Контейнер = Объект;
	
	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Если Не ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Контейнер.ДоговорКонтрагента.Организация;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Контейнер.ДоговорКонтрагента.Владелец;
	КонецЕсли; 
	
	Если мТекущийДоговорКонтрагента = Неопределено Тогда 
		мТекущийДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Конецесли;
	
	Если ТипЗнч(Контейнер) = Тип("ДанныеФормыСтруктура") Тогда
		
		СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Контейнер);	
		Объект.ВалютаДокумента   = ?(Контейнер.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
								    ,мКэшЗначений.ВалютаРеглУчета
								    ,Контейнер.ДоговорКонтрагента.ВалютаВзаиморасчетов);		
		
	Иначе
		
		Если Контейнер.НомерСтроки = 1 Тогда
			
			СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Контейнер);	
			Объект.ВалютаДокумента   = ?(Контейнер.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
									    ,мКэшЗначений.ВалютаРеглУчета
									    ,Контейнер.ДоговорКонтрагента.ВалютаВзаиморасчетов);		   
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
	
	Если НЕ ЗначениеЗаполнено(Контейнер.ЦФО) 
		И ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента.бит_ЦФО) Тогда
		Контейнер.ЦФО = Контейнер.ДоговорКонтрагента.бит_ЦФО; 
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Контейнер.СтатьяОборотов) 
		И ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотовБДР) Тогда
		Если Контейнер.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотовБДР.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
			Контейнер.СтатьяОборотов = Контейнер.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотовБДР;
			// Оставим только те разрезы, которые указаны в статье оборотов.
			НастроитьВидимостьАналитикБюджетирования();
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Контейнер.Проект) 
		И ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента.бит_Проект) Тогда
		Контейнер.Проект = Контейнер.ДоговорКонтрагента.бит_Проект;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"					   , Объект.ЦФО);		
	
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры

// Заполняет текст про график начислений в форме документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьТекстПроГрафикНачислений()

    Если Объект.ТипЗаявки = мКэшЗначений.Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикНачислений Тогда
        
        ГрафикНачислений = бит_ДоговораСервер.НайтиДокументГрафикаНачислений(Объект.Ссылка);
        
        Если ЗначениеЗаполнено(ГрафикНачислений) Тогда
            Элементы.ГиперссылкаГрафикНачислений.Заголовок   = Строка(ГрафикНачислений);
            Элементы.ГиперссылкаГрафикНачислений.ГиперСсылка = Истина;
        Иначе
            Элементы.ГиперссылкаГрафикНачислений.Заголовок   = "Не найден";
            Элементы.ГиперссылкаГрафикНачислений.ГиперСсылка = Ложь;
        КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

// Функция выполняет запись документа.
// 
// Параметры:
// 	нет
// 
// Возвращаемое значение:
// 	ДействиеВыполнено - булево 
// 
&НаСервере
Функция ЗаписатьПровестиДокумент()
	
	Если Объект.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// Запишем документ.
	ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокументОбъект, РежимЗаписи,, "Ошибки");
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат ДействиеВыполнено;
	
КонецФункции

&НаСервере
Процедура УстановитьДоговорКонтрагентаСервер(СписокВидовДоговоров)
	
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента
														  ,Объект.Контрагент
														  ,Объект.Организация
														  ,СписокВидовДоговоров);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  МассивСтрокПревышения - Массив.
// 
&НаКлиенте
Процедура ВопросОплатаЗаСчет(Ответ, МассивСтрокПревышения) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДействиеВыполнено = ЗаписатьПровестиДокумент();
		
		Модифицированность = НЕ ДействиеВыполнено;
		УстановитьЗаголовокФормыДокумента();

		ДанныеЗаполнения = Новый Структура;
		
		ДанныеЗаполнения.Вставить("ДокОснование"		 , Объект.Ссылка);
		ДанныеЗаполнения.Вставить("МассивСтрокПревышения", МассивСтрокПревышения);

		ПараметрыФормы = Новый Структура;

		ПараметрыФормы.Вставить("Основание", ДанныеЗаполнения);

		ОткрытьФорму("Документ.бит_КорректировкаКонтрольныхЗначений.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);

	КонецЕсли;

КонецПроцедуры

// Обработка оповещения выбора из списка. 
// 
// Параметры:
//  ВыбЗначение - Строка.
// 
&НаКлиенте
Процедура ОбработкаВыбораИзСписка(ВыбЗначение, Элемент) Экспорт

	Если НЕ ВыбЗначение = Неопределено Тогда
	
		Объект.ТипЗаявки = ВыбЗначение.Значение;
		ТипЗаявкиПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет действия на сервере, необходимые при изменении СтатьиОборотов.
// 
// Параметры:
//  Контейнер - ДанныеФормыСтруктура, СтрокаТабличнойЧасти.
// 
&НаКлиенте 
Процедура ИзменениеСтатьиОборотов(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) Тогда
		
		УстановитьСтавкуНДС(Контейнер.СтавкаНДС, Контейнер.СтатьяОборотов);
		РассчитатьСуммуНДС(Контейнер);
		
	КонецЕсли;	
	
    ИзменениеСтатьиОборотовСервер();
	
	НастроитьВидимостьАналитикБюджетирования();
	
КонецПроцедуры

// Процедура обрабатывает изменение статьи на сервере 
//
&НаСервере
Процедура ИзменениеСтатьиОборотовСервер()

	Контейнер = Объект;

	Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) Тогда
		
		НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(Контейнер.СтатьяОборотов);
		бит_Бюджетирование.УстановитьИспользованиеАналитики(Контейнер, НастройкиСтатьи, мКэшЗначений.ИзмеренияДоп);
		
	КонецЕсли; 
	
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикШапкиПриИзмененииСтатьиОборотов(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект));

КонецПроцедуры

// Процедура настраивает видимость элементов формы в соответствии с используемыми разрезами бюджетирования
// 	в статье оборотов.
// 
// Параметры:
// 	СтатьяОборотовИсточник 	   - СправочникСсылка.бит_СтатьиОборотов 
// 					(статья оборотов, в соответствии с которой будет настраиваться видимость элементов формы)
// 	ТекущаяФорма 			   - Управляемая форма (форма для которой настраивается видимость элементов формы)
//  Измерения          		   - Структура (измерения регистра бит_ОборотыПоБюджетам)
//  НастройкиИзмерений 		   - Соответствие (настройки используемых дополнительных измерений)
//  СоответствиеИмен   		   - Сответствие 
// 					(соответствие имен измерений регистра и имен элементов управления на форме)
// 									Ключ 	 - Строка 	 (имя измерения в регистре)
// 									Значение - Структура (ИмяПоляВвода)
//  МассивИсключаемыхИзмерений - Массив (имена измерений для которых настройку видимости устанавливать не надо).
// 
&НаСервере
Процедура НастроитьВидимостьАналитикБюджетирования()
	
	НастройкиИзмерений = Неопределено;

	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(Объект.СтатьяОборотов);
	Префикс = "";
	
	МассивИсключаемыхИзмерений = Новый Массив;
	МассивИсключаемыхИзмерений.Добавить("Организация");
	МассивИсключаемыхИзмерений.Добавить("Сценарий");
	МассивИсключаемыхИзмерений.Добавить("ЦФО");
	МассивИсключаемыхИзмерений.Добавить("СтатьяОборотов");
	МассивИсключаемыхИзмерений.Добавить("Проект");
	МассивИсключаемыхИзмерений.Добавить("Контрагент");
	МассивИсключаемыхИзмерений.Добавить("ДоговорКонтрагента");
	МассивИсключаемыхИзмерений.Добавить("ФизическоеЛицо");
	
	НастройкаВидимости = бит_Бюджетирование.ПолучитьНастройкуВидимостиКолонок(МассивСтатей, НастройкиИзмерений);
	
	Для Каждого ТекИзмерение Из МассивИсключаемыхИзмерений Цикл
		
		Если НЕ НастройкаВидимости.Свойство(ТекИзмерение) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаВидимости.Удалить(ТекИзмерение);
		
	КонецЦикла;
	
	бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы, НастройкаВидимости, Префикс);
	
	// Изменение кода. Начало. 19.05.2015{{
	Документы.бит_ЗаявкаНаРасходованиеСредств.ВидимостьНазначенныхАналитик(ЭтаФорма);
	// Изменение кода. Конец. 19.05.2015}}
	
КонецПроцедуры

// Процедура расчитывает суммму НДС.
// 
// Параметры:
//  Контейнер - Объект, СтрокаТабличнойЧасти.
// 
&НаКлиенте 
Процедура РассчитатьСуммуНДС(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС
																	   ,мКэшЗначений.Перечисления.СтавкиНДС);
	
	Контейнер.СуммаНДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
																	  	,Истина
																		,Истина
																		,СтавкаНДСЧисло);
																							
КонецПроцедуры

// Процедура проверяет принадлежность ЦФО к Статье оборотов.
// 
// Параметры:
//  Контейнер 		  - ДанныеФормыСтруктура.
//  ВыводитьСообщения - Булево.
//  ИндексСтроки	  - Число, по умолчанию Неопределено.
// 
&НаКлиенте 
Процедура ПроверитьПринадлежностьЦФОКСтатьеОборотов(Контейнер, ВыводитьСообщения = Ложь, ИндексСтроки = Неопределено)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокСтатейПринадлежность", мКэшЗначений.СписокСтатейПринадлежность);
	СтруктураПараметров.Вставить("ЦФО"						 , Контейнер.ЦФО);
	СтруктураПараметров.Вставить("СтатьяОборотов"			 , Контейнер.СтатьяОборотов);
	СтруктураПараметров.Вставить("ВыводитьСообщения"		 , ВыводитьСообщения);	
	
	ИзменениеЦФО(СтруктураПараметров, ИндексСтроки);
	
	мКэшЗначений.СписокСтатейПринадлежность = СтруктураПараметров.СписокСтатейПринадлежность;	
	
	Если Не бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(СтруктураПараметров) Тогда
		Контейнер.СтатьяОборотов = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует список доступных видов договоров.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	мСписокВидовДоговоров.Добавить(мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
КонецПроцедуры

// Процедура расчитывает суммму без НДС.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура РассчитатьСуммуБезНДС()

	ЭтаФорма.СуммаБезНДС = Объект.Сумма - Объект.СуммаНДС;
																							
КонецПроцедуры

// Процедура устанавливает отборы для статьи оборотов.
// 
// Параметры:
//  Контейнер - ПолеФормы.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатей(Контейнер)

	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("РасходДоход"	, мКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
	СтруктураОтбора.Вставить("ТипСтатьи"	, мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР);
	
	Если ТипЗнч(мКэшЗначений.СписокСтатейПринадлежность) = Тип("СписокЗначений") Тогда
		СтруктураОтбора.Вставить("Ссылка", мКэшЗначений.СписокСтатейПринадлежность);
	КонецЕсли;
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Контейнер, СтруктураОтбора);

КонецПроцедуры

// Процедура обрабатывает изменение валюты документа в форме документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыВФорме() 
	
	ИзменениеВалюты();
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И Не Объект.Сумма = 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать сумму документа?'");
					  
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыВФорме", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли; 
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыВФорме(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		Объект.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.Сумма
															   		  ,мКэшРеквизитовФормы.ВалютаДокумента
																	  ,Объект.ВалютаДокумента
																	  ,мКэшРеквизитовФормы.КурсДокумента
																	  ,Объект.КурсДокумента
																	  ,мКэшРеквизитовФормы.КратностьДокумента
																	  ,Объект.КратностьДокумента);
		
		РассчитатьСуммуНДС(Объект);
		РассчитатьСуммуБезНДС();																	
		
	Иначе
		Объект.Сумма = 0;
	КонецЕсли;

	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");
	
КонецПроцедуры

// Процедура выполняет действия на сервере, необходимые при изменении Контрагента.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ИзменениеКонтрагента()
	
	// Выполняем общие действия для всех документов при изменении Контрагент.
	УстановитьДоговорКонтрагентаСервер(мСписокВидовДоговоров);
	
КонецПроцедуры

// Процедура обрабатывает изменение договора Клиент.
// 
// Параметры:
//  ИндексСтроки - Число, по умолчанию Неопределено.
// 
&НаКлиенте 
Процедура ПриИзмененииДоговораКлиент(ИндексСтроки = Неопределено)
	
	ПриИзмененииДоговораСервер(ИндексСтроки);
	
	ИзменениеВалютыВФорме();
	
КонецПроцедуры

// Процедура устанавливает отборы для договора контрагента.
// 
// Параметры:
//  Элемент - ПолеФормы. Для которого необходимо установить параметры выбора.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить("Владелец", Объект.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мСписокВидовДоговоров) Тогда
		СтруктураОтбора.Вставить("ВидДоговора", мСписокВидовДоговоров);
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры

// Процедура обрабатывает изменение даты расхода.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ИзменениеДатыРасхода()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаРасхода"  , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	
	Если Не бит_Казначейство.ДатаРасходаКорректна(СтруктураПараметров, Истина) Тогда
		ИзвлечьИзКэша("ДатаРасхода");
		Возврат;
	КонецЕсли; 
	
	ДобавитьВКэш("ДатаРасхода");

	СтруктураПараметров.Вставить("Дата"				 , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ВидДаты"			 , "Дата расхода");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя", Объект.ДатаПлатежаКрайняя);
	
	Если ЗначениеЗаполнено(Объект.ДатаПлатежаКрайняя) 
		И бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Ложь) Тогда
		
		Объект.ДатаПлатежаКрайняя 			   = Объект.ДатаРасхода;
		мКэшРеквизитовФормы.ДатаПлатежаКрайняя = Объект.ДатаРасхода;
		
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет возможность ввода документа.
// 
// Параметры:
//  Отказ - Булево.
// 
&НаКлиенте 
Процедура ПроверитьВозможностьВводаДокумента(Отказ)
	
	// Проверка ввода на основании.
	Если Объект.Комментарий = "_*_В_Копировании_Отказано_*_" Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет видимостью кнопки ОплатитьЗаСчет.
// 
// Параметры:
// 	нет
// 
&НаКлиенте
Процедура УстановитьВидимостьКнопкиОплатитьЗаСчет()
	
	Если ЭтоАдресВременногоХранилища(мАдресХранилищаСтрокПревышения) Тогда
		МассивСтрокПревышения = ПолучитьИзВременногоХранилища(мАдресХранилищаСтрокПревышения);
	Иначе
		Элементы.ОплатаЗаСчет.Видимость = Ложь;
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(МассивСтрокПревышения) = Тип("Массив")
		И НЕ МассивСтрокПревышения.Количество() = 0
		И НЕ Объект.СверхБюджета Тогда 
		
		Элементы.ОплатаЗаСчет.Видимость = Истина;
	Иначе
		Элементы.ОплатаЗаСчет.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком ожидания, отслеживает окончание транзакции записи/проведения документа.
// 
// Параметры:
// 	нет
// 
&НаКлиенте
Процедура ОжиданиеПроведенияДокумента()
	
	ОтключитьОбработчикОжидания("ОжиданиеПроведенияДокумента");
	
	УстановитьВидимостьКнопкиОплатитьЗаСчет();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , "");
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствАналитик(Форма)

	Результат = бит_МеханизмДопИзмеренийКлиентСервер.ПараметрыУстановкиСвойствАналитикПоШаблону(
		"Аналитика_", "Аналитика_", "СтатьяОборотов");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипВидаОперации(Форма)
	
	Элементы = Форма.Элементы;
	Объект 	 = Форма.Объект;
	
	Если Объект.ВидРасходногоДокумента = ПредопределенноеЗначение("Перечисление.бит_ВидыРасходныхДокументов.АвансовыйОтчет") Тогда
		Элементы.ВидОперации.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийАвансовыйОтчет");
	ИначеЕсли Объект.ВидРасходногоДокумента = ПредопределенноеЗначение("Перечисление.бит_ВидыРасходныхДокументов.ПоступлениеТоваровУслуг") Тогда
		Элементы.ВидОперации.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг");
	Иначе
		Элементы.ВидОперации.ОграничениеТипа = Новый ОписаниеТипов();
		Объект.ВидОперации = Неопределено;
	КонецЕсли;
	
	Объект.ВидОперации = Элементы.ВидОперации.ОграничениеТипа.ПривестиЗначение(Объект.ВидОперации);

КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти
