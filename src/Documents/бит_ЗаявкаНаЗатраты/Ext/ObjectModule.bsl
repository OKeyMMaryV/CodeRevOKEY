#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных


Перем мНастройкиПрограммы Экспорт; // Хранит настройки БИТ

Перем мИгнорироватьЗапись Экспорт; // Хранит признак того, что статус в данной транзакции уже установлен.
 
Перем мСинхрРеквизиты; // Хранит структуру реквизитов для синхронизации заявки и расходной позиции.

Перем мСоздаватьПозицию Экспорт; // Хранит признак необходимости с-ть расходную позицию автоматически при проведении.

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

Перем мБылПроведен; // Служит для передачи признака проведения между обработчиками.

Перем мРежимЗаписи; // Служит для передачи режима записи между обработчиками.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

Перем мПометкаИзГрафикаНачислений Экспорт; // Признак установки пометки удаления из графика начислений.

Перем мАдресХранилищаСтрокПревышения Экспорт; // Адрес хранилища, где хранится массив строк превышающих лимиты.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив();
	
	// Обязательные измерения из разряда дополнительных.
	Для каждого КлючИЗначение Из мНастройкиИзмерений Цикл
	
		ИмяИзмерения = КлючИЗначение.Ключ;
		Настройка    = КлючИЗначение.Значение;
		
		Если Настройка.Обязательное Тогда
			
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяИзмерения]) Тогда
				ТекстСообщения = НСтр("ru = 'Поле ""%1%"" не заполнено'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Настройка.Синоним);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, ЭтотОбъект, ИмяИзмерения, Отказ);
			КонецЕсли;
		
		КонецЕсли; 
	
	КонецЦикла;
	
	бит_ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	// Установка настроек обязательности реквизитов.
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек);
	
	Если ВидРасходногоДокумента = Перечисления.бит_ВидыРасходныхДокументов.ПоступлениеДопРасходов
		ИЛИ ВидРасходногоДокумента = Перечисления.бит_ВидыРасходныхДокументов.ПустаяСсылка() Тогда
		НепроверяемыеРеквизиты.Добавить("ВидОперации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мБылПроведен = Проведен;
	мРежимЗаписи = РежимЗаписи;
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("ЦФО"		  ,ЦФО);

	мНастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Дата,,СтруктураПараметров,"Ошибки");	
	
	ПересчитатьСуммы();
	
	Если ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикНачислений 
        И Не мПометкаИзГрафикаНачислений Тогда
        // Проверим возможность выполнения действия.
        бит_ДоговораСервер.ПроверитьВозможностьЗаписиДокументаПланирования(ЭтотОбъект, Отказ);
	КонецЕсли;
	
    Если Не Отказ Тогда
        
        // Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
        бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Не Отказ
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
	Если РольДоступна("бит_рлс_ФинансистЦФО") Тогда
		
		// Проверка на наличие недопустимых ЦФО.
		ИмяТипаЦФО = бит_ОбщегоНазначения.ПолучитьИмяТипаЦФО();
		
		Распределение = Новый ТаблицаЗначений;
		Распределение.Колонки.Добавить("НомерСтроки"	, Новый ОписаниеТипов("Число"));
		Распределение.Колонки.Добавить("ЦФО"			, Новый ОписаниеТипов(ИмяТипаЦФО));
		
		НоваяСтрока = Распределение.Добавить();
		НоваяСтрока.НомерСтроки 	= 1;
		НоваяСтрока.ЦФО 			= ЦФО;
		
		Заголовок = "Проверка прав доступа:";	
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект,Распределение,"Распределение",Заголовок,Отказ);
		
	Иначе
		
		// Проверка на наличие недопустимых пар ЦФО/СтатьяОборотов.
		ИмяТипаЦФО = бит_ОбщегоНазначения.ПолучитьИмяТипаЦФО();
		
		Распределение = Новый ТаблицаЗначений;
		Распределение.Колонки.Добавить("НомерСтроки"	, Новый ОписаниеТипов("Число"));
		Распределение.Колонки.Добавить("ЦФО"			, Новый ОписаниеТипов(ИмяТипаЦФО));
		Распределение.Колонки.Добавить("СтатьяОборотов"	, Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов"));
		
		НоваяСтрока = Распределение.Добавить();
		НоваяСтрока.НомерСтроки 	= 1;
		НоваяСтрока.ЦФО 			= ЦФО;
		НоваяСтрока.СтатьяОборотов 	= СтатьяОборотов;
		
		Заголовок = "Проверка прав доступа:";	
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект,Распределение,"Распределение",Заголовок,Отказ);
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПредыдущаяСумма", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Сумма"));	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	
	
	Если НЕ Отказ Тогда
		Если НЕ мРежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
			УстановитьСтатус(мРежимЗаписи);
		КонецЕсли; 
		
		Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Черновик 
			ИЛИ ПометкаУдаления <> Ссылка.ПометкаУдаления  Тогда
			
			СинхронизироватьРасходныеПозиции(Отказ);
		КонецЕсли;	// Необходимо выполнять синхронизацию платежных позиций.
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Если Отказ Тогда  
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(СтруктураШапкиДокумента.Сценарий.Валюта,СтруктураШапкиДокумента.Дата);		
	СтруктураШапкиДокумента.Вставить("КурсСценарий"     ,СтруктураСценарий.Курс);
	СтруктураШапкиДокумента.Вставить("КратностьСценарий",СтруктураСценарий.Кратность);
	
	
	ТаблицаЗатрат = ПодготовитьТаблицуПланируемыеЗатраты();
	
	// Выполним движения.
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаЗатрат,Отказ,Заголовок);
	КонецЕсли;
	
	// Создадим платежную позицию если еще ни одна не создана.
	Если НЕ Отказ Тогда
		
		// Заполним перечень виз.
		Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ мБылПроведен Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Организация);
			СтруктураПараметров.Вставить("ЦФО",ЦФО);		
			бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
			
		КонецЕсли; 
		
		УстановитьСтатус(РежимЗаписиДокумента.Проведение);
		
		ЕстьРасходнаяПозиция = бит_ОбщегоНазначения.ЕстьПодчиненныеДокументы(Ссылка, "бит_РасходнаяПозиция");
		Если НЕ ЕстьРасходнаяПозиция И мСоздаватьПозицию Тогда
			
			РасходнаяПозиция = Документы.бит_РасходнаяПозиция.СоздатьДокумент();
			РасходнаяПозиция.ДополнительныеСвойства.Вставить("ПрограммнаяЗапись");
			РасходнаяПозиция.Заполнить(Ссылка);
			
			РежимЗаписиПозиция = ?(мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Утверждена,
									РежимЗаписиДокумента.Проведение,
									РежимЗаписиДокумента.Запись);
			
			бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(РасходнаяПозиция,РежимЗаписиПозиция,,"Нет");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	// Проверим допустимость отмены проведения. 
	РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	мТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	мДатаИзмененияСтатуса = РезСтруктура.Дата;
	
	
	Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Закрыта 
		ИЛИ мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Выполнена  Тогда
		
		ТекстСообщения = НСтр("ru = 'Отмена проведения документа: %1%'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СокрЛП(Ссылка));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		ТекстСообщения = НСтр("ru = 'Документ в статусе ""%1%"", отмена проведения не возможна!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СокрЛП(мТекущийСтатус));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,, Отказ);
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		
		// Очистим визы.
		бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
		
		// Отменим проведение платежных позиций. 
		МассивПозиций = бит_ОбщегоНазначения.НайтиПодчиненныеДокументы(Ссылка,"бит_РасходнаяПозиция","Проведен");
		Для каждого Позиция Из МассивПозиций Цикл
			
			Если НЕ Позиция.ПометкаУдаления Тогда
				
				ПозицияОбъект = Позиция.ПолучитьОбъект();
				бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПозицияОбъект,РежимЗаписиДокумента.ОтменаПроведения,,"Ошибки");
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// Если тип документа "График начислений", тогда.
	Если ОбъектКопирования.ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикНачислений Тогда
		
		ТекстСообщения = НСтр("ru='Копирование документа «%1%»: 
						|Копировать документ с типом ""График начислений"" запрещено!'"); 
						
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(ОбъектКопирования.Ссылка));				
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Комментарий = "_*_В_Копировании_Отказано_*_";
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// функция получает список статей, принадлежащих данному ЦФО.
// 
// Параметры:
//  ВыводитьСообщения - Булево.
//  ИндексСтроки 	  - Число, по умолчанию Неопределено.
// 
Функция ПолучитьСписокСтатейПоПринадлежностиМодуль(ВыводитьСообщения = Ложь, ИндексСтроки = Неопределено) Экспорт
	
	ПараметрЦФО = ЦФО;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"       		, Дата);
	СтруктураПараметров.Вставить("ЦФО"        		, ПараметрЦФО);
	СтруктураПараметров.Вставить("Организация"		, Организация);
	СтруктураПараметров.Вставить("РасходДоход"		, Перечисления.бит_РасходДоход.Расходование);
	СтруктураПараметров.Вставить("ТипСтатьи"  		, Перечисления.бит_ТипыСтатейОборотов.БДР);
	СтруктураПараметров.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	СписокСтатей = бит_Казначейство.ПолучитьСписокСтатейПоПринадлежности(СтруктураПараметров);
	
	Возврат СписокСтатей;
	
КонецФункции

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	Если Дата = Дата("00010101") Тогда
		ДатаКурса = ТекущаяДата();
	Иначе
		ДатаКурса = Дата;
	КонецЕсли;
	
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента,ДатаКурса);
	КурсДокумента      = СтрКурса.Курс;
	КратностьДокумента = СтрКурса.Кратность;

КонецПроцедуры

// Процедура получает статус объекта.
// 
// Параметры:
//  Нет.
// 
Процедура ПолучитьСтатусМодуль()  Экспорт
	
	// Получаем статус и дату изменения статуса для документа.
	РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	
	мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус)
					  		 ,РезСтруктура.Статус
					  		 ,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
							  
	мДатаИзмененияСтатуса = РезСтруктура.Дата;
	
КонецПроцедуры

// Процедура выполняет пересчет сумм документа в разные валюты.
// 
Процедура ПересчитатьСуммы() Экспорт
	
	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Регл,Упр,Взаиморасчеты"));
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Сумма");
	ИменаРеквизитов.Добавить("СуммаНДС");
	
	бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(ЭтотОбъект,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
	
	// Для вывода структуры подчиненности.
	СуммаДокумента = Сумма;
	
КонецПроцедуры

// Функция определяет текущий статус заявки на затраты.
// 
// Параметры:
//  ТекущийОбъект    - ДокументСсылка.бит_ЗаявкаНаЗатраты.
//  НачальныйСтатус  - текущее значение статуса.
//  ВсеВизыПолучены  - Булево.
//  ЗатратыСтруктура  - Структура.
// 
// Возвращаемое значение:
//   РезСтатус   - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция ОпределитьСтатусЗаявкиНаЗатраты(ТекущийОбъект, НачальныйСтатус, РежимЗаписи, ВсеВизыПолучены, ЕстьОтклонено, ЗатратыСтруктура) Экспорт

	РезСтатус = НачальныйСтатус;
	
	СуммаЗатраты = ЗатратыСтруктура.СуммаЗатраты + ЗатратыСтруктура.СуммаЗакрыта;
	
	// Установим статус по затратам
	Если СуммаЗатраты>0 
		 И СуммаЗатраты>=ЗатратыСтруктура.СуммаПлан Тогда
		 РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Выполнена;
	Иначе
		 РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Рабочая;
	КонецЕсли; 
	
	Если НЕ РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Выполнена Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
			ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Запись И ТекущийОбъект.Проведен) Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Рабочая;
		Иначе
			РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Черновик;
		КонецЕсли; 
		
		Если РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Рабочая 
			ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Утверждена
			ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Отклонена Тогда
			
			Если ЕстьОтклонено Тогда
				
				РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Отклонена;
				
			Иначе	
				
				Если ВсеВизыПолучены Тогда
					РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Утверждена;
				Иначе	
					РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Рабочая;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
  Возврат РезСтатус;
  
КонецФункции

// Процедура устанавливает статус.
// 
// Параметры:
//  вхРежимЗаписи			 - РежимЗаписиДокумента.
//  вхЗатратыСтруктура		 - Структура.
//  вхСинхронизироватьЗатраты - Булево. По умолчанию Истина.
// 
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено
						  ,вхЗатратыСтруктура = Неопределено
						  ,вхСинхронизироватьЗатраты = Истина) Экспорт
						  
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
						  
						  
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
		
		
		Если вхРежимЗаписи = Неопределено Тогда
			 РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			 РежимЗаписи = вхРежимЗаписи;
		КонецЕсли; 
		
		Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Закрыта Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		// Вычислим переменные, необходимые для установки статуса.
		ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);						
		
		Если вхЗатратыСтруктура = Неопределено Тогда
			ЗатратыСтруктура = бит_ДоговораСервер.ПолучитьЗатратыПоЗаявке(Ссылка);
			ЗатратыСтруктура.СуммаПлан = СуммаВзаиморасчеты;
		Иначе	
			ЗатратыСтруктура = вхЗатратыСтруктура;
		КонецЕсли; 
		
		// Определим статус заявки.
		Статус = ОпределитьСтатусЗаявкиНаЗатраты(ЭтотОбъект, мТекущийСтатус, РежимЗаписи, ВсеВизыПолучены, ЕстьОтклонено, ЗатратыСтруктура);
		
		// Если статус изменился - запишем его.
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,мТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				
				мТекущийСтатус = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
				
				Если вхСинхронизироватьЗатраты Тогда
					СинхронизироватьПроведениеПозиций(Проведен, мТекущийСтатус);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));	
			
        РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		// Если НЕ вхЗатратыСтруктура = Неопределено Тогда
		// 	// * непонятно что это за ОплатаЗаявки и где она используется, пока оставим как есть
		// 	СтруктураКонтекст.Вставить("ОплатаЗаявки",вхЗатратыСтруктура);
		// 	
		// КонецЕсли; 
		
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
		Если вхСинхронизироватьЗатраты Тогда
			СинхронизироватьПроведениеПозиций(Проведен, мТекущийСтатус);
		КонецЕсли;
		
		
	КонецЕсли; 
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура синхронизирует проведение заявки и расходных позиций.
// 
// Параметры:
//  флПроведен  - Булево.
//  ТекущийСтатус - Справочники.бит_СтатусыОбъектов.
// 
Процедура СинхронизироватьПроведениеПозиций(флПроведен,ТекущийСтатус)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Утверждена И флПроведен Тогда
		// В статусе утвержден проведем непроведенные расходные позиции.
		МассивПозиций = бит_ОбщегоНазначения.НайтиПодчиненныеДокументы(Ссылка,"бит_РасходнаяПозиция","НеПроведен");
		Для каждого Позиция Из МассивПозиций Цикл
			
			Если НЕ Позиция.ПометкаУдаления Тогда
				
				ПозицияОбъект = Позиция.ПолучитьОбъект();
				ПозицияОбъект.ДополнительныеСвойства.Вставить("ПрограммнаяЗапись");				
				бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПозицияОбъект,РежимЗаписиДокумента.Проведение,,"Ошибки");
				
			КонецЕсли; 
			
		КонецЦикла; 
	ИначеЕсли (ТекущийСтатус <> Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Закрыта 
				И ТекущийСтатус <> Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Выполнена) Тогда
		
		// В более ранних статусах проведенных позиций быть не должно.
		
		МассивПозиций = бит_ОбщегоНазначения.НайтиПодчиненныеДокументы(Ссылка,"бит_РасходнаяПозиция","Проведен");
		Для каждого Позиция Из МассивПозиций Цикл
			
			Если НЕ Позиция.ПометкаУдаления Тогда
				
				ПозицияОбъект = Позиция.ПолучитьОбъект();
				бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПозицияОбъект,РежимЗаписиДокумента.ОтменаПроведения,,"Ошибки");
				
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Процедура выполняет синхронизацию реквизитов заявки и расходных позиций.
// 
Процедура СинхронизироватьРасходныеПозиции(Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_РасходнаяПозиция.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.бит_РасходнаяПозиция КАК бит_РасходнаяПозиция
	|ГДЕ
	|	бит_РасходнаяПозиция.ДокументОснование = &Заявка";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.бит_РасходнаяПозиция");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Результат;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Ссылка, Отказ);
		//ТекстИсключенияЗаписи = СтрШаблон(НСтр("ru = 'Не удалось перезаписать подчиненный документ ""%1"" 
		//|Возможно, документ редактируется другим пользователем.'"), Позиция);
		//Отказ = Истина;
		//ВызватьИсключение ТекстИсключенияЗаписи;
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_РасходнаяПозиция.Ссылка КАК Ссылка,
	|	бит_РасходнаяПозиция.ПометкаУдаления КАК ПометкаУдаления,
	|	бит_РасходнаяПозиция.Сумма КАК СуммаПозиции
	|ИЗ
	|	Документ.бит_РасходнаяПозиция КАК бит_РасходнаяПозиция
	|ГДЕ
	|	бит_РасходнаяПозиция.ДокументОснование = &Заявка";
	
	ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
	СуммаПозиций	= ТаблицаПозиций.Итог("СуммаПозиции");
	ПредыдущаяСумма = ДополнительныеСвойства.ПредыдущаяСумма;
	
	РезультатРаспределения = Неопределено;
	Если ПредыдущаяСумма <= СуммаПозиций
		ИЛИ Сумма < СуммаПозиций Тогда	
		
		ОбщийКоэффициент = СуммаПозиций/ПредыдущаяСумма;
		
		КоэффициентыРаспределения = Новый Массив();
		Для Каждого Позиция Из ТаблицаПозиций Цикл
			КоэффициентыРаспределения.Добавить(Позиция.СуммаПозиции / СуммаПозиций);	
		КонецЦикла;
		
		РаспределяемаяСумма = Сумма * ОбщийКоэффициент;
		РезультатРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма, КоэффициентыРаспределения, 2);
		Если РезультатРаспределения <> Неопределено Тогда
			ТаблицаПозиций.ЗагрузитьКолонку(РезультатРаспределения, "СуммаПозиции");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Позиция Из ТаблицаПозиций Цикл
		
		ПозицияОбъект = Позиция.Ссылка.ПолучитьОбъект();
		
		// Синхронизируем пометку удаления расходных позиций и заявки.
		Если Позиция.ПометкаУдаления <> ПометкаУдаления Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ОбъектПолучен");
			бит_ОбщегоНазначения.ИзменитьПометкуНаУдалениеУОбъекта(ПозицияОбъект, ПометкаУдаления,, "Нет", СтруктураПараметров);
		КонецЕсли; 
		
		// Синхронизируем реквизиты.
		флЕстьИзменения = Ложь;
		Для каждого КлючИЗначение Из мСинхрРеквизиты Цикл
			ИмяРеквизитаЗаявка	= КлючИЗначение.Ключ;
			ИмяРеквизитаПозиция	= КлючИЗначение.Значение;
			Если ЭтотОбъект[ИмяРеквизитаЗаявка] <> ПозицияОбъект[ИмяРеквизитаПозиция] Тогда
				ПозицияОбъект[ИмяРеквизитаПозиция] = ЭтотОбъект[ИмяРеквизитаЗаявка];
				флЕстьИзменения = Истина;
			КонецЕсли; 
		КонецЦикла; // По синхронизируемым реквизитам.
		
		// Реквизит "Создать в бух. учете".
		Если ТаблицаПозиций.Количество() = 1 Тогда
			пДокументЗатрат = бит_Казначейство.НайтиПлатежныйДокументПоПлатежнойПозиции(Позиция.Ссылка);
			
			Если НЕ ЗначениеЗаполнено(пДокументЗатрат) Тогда
				ПозицияОбъект.ВидРасходногоДокумента= ВидРасходногоДокумента;
				ПозицияОбъект.ВидОперации			= ВидОперации;
				флЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Сумма = 0 ИЛИ ПредыдущаяСумма = 0 Тогда
			ПозицияОбъект.Сумма	= 0;
			ПозицияОбъект.СуммаНДС = 0;
		ИначеЕсли РезультатРаспределения <> Неопределено Тогда
			ПозицияОбъект.Сумма = Позиция.СуммаПозиции;
			ПозицияОбъект.РассчитатьСуммуНДС(ПозицияОбъект);
			флЕстьИзменения = Истина;
		КонецЕсли;
		
		// Запишем позицию при необходимости.
		Если флЕстьИзменения Тогда
			ТекстЗаголовка = "Синхронизация реквизитов документов """+Ссылка+""" и """+Позиция.Ссылка+"""." ; 
			РежимЗаписиПозиция = ?(ПозицияОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись); 
			бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПозицияОбъект,РежимЗаписиПозиция,ТекстЗаголовка,"Ошибки");
		КонецЕсли; 
		
	КонецЦикла; // По платежным позициям.
				
КонецПроцедуры

// Процедура заполняет шапку документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.бит_ЗаявкаНаЗатраты.
// 
Процедура ЗаполнитьШапкуДокумента(ПараметрОбъектКопирования = Неопределено) Экспорт
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		СуммаВключаетНДС = Истина;
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;			
			
		КонецЕсли; 
		
		Важность = Перечисления.бит_Важность.Средняя;
		
	Иначе // Документ скопирован.
		      
		ДатаРасхода         = Дата('00010101');
		ДатаПлатежаКрайняя  = Дата('00010101');
		СверхБюджета		= Ложь;
		
		ИзменениеВалютыМодуль();
		
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования
												,"РасходованиеБДР"
												,Ложь);
	
	Если Не ЗначениеЗаполнено(ТипЗаявки) Тогда
		ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;			
		
	КонецЕсли; 
	
	
	// Инициализируем значения доп. измерений.
	бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ЭтотОбъект, мИзмеренияДоп, мНастройкиИзмерений);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Функция готовит таблицу по планируемым затратам для проведения.
// 
// 
// Возвращаемое значение:
//   РезТаблица   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуПланируемыеЗатраты()

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	бит_ЗаявкаНаЗатраты.ЦФО,
	                |	бит_ЗаявкаНаЗатраты.СтатьяОборотов,
	                |	бит_ЗаявкаНаЗатраты.Проект,
	                |	бит_ЗаявкаНаЗатраты.ДоговорКонтрагента,
	                |	ВЫБОР
	                |		КОГДА &БДРПланируетсяСНДС = ИСТИНА
	                |			ТОГДА бит_ЗаявкаНаЗатраты.Сумма
	                |		ИНАЧЕ бит_ЗаявкаНаЗатраты.Сумма - бит_ЗаявкаНаЗатраты.СуммаНДС
	                |	КОНЕЦ КАК Сумма,
	                |	бит_ЗаявкаНаЗатраты.СтавкаНДС,
	                |	бит_ЗаявкаНаЗатраты.СуммаНДС,
	                |	бит_ЗаявкаНаЗатраты.НоменклатурнаяГруппа,
	                |	бит_ЗаявкаНаЗатраты.Аналитика_1,
	                |	бит_ЗаявкаНаЗатраты.Аналитика_2,
	                |	бит_ЗаявкаНаЗатраты.Аналитика_3,
	                |	бит_ЗаявкаНаЗатраты.Аналитика_4,
	                |	бит_ЗаявкаНаЗатраты.Аналитика_5,
	                |	бит_ЗаявкаНаЗатраты.Аналитика_6,
	                |	бит_ЗаявкаНаЗатраты.Аналитика_7,
	                |	бит_ЗаявкаНаЗатраты.ВалютаДокумента,
	                |	бит_ЗаявкаНаЗатраты.Организация
	                |ИЗ
	                |	Документ.бит_ЗаявкаНаЗатраты КАК бит_ЗаявкаНаЗатраты
	                |ГДЕ
	                |	бит_ЗаявкаНаЗатраты.Ссылка = &Ссылка";
					
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	БДРПланируетсяСНДС = бит_ОбщегоНазначенияПовтИсп.ЗначениеПеременной("бит_БДРПланируетсяСНДС");
	Запрос.УстановитьПараметр("БДРПланируетсяСНДС", БДРПланируетсяСНДС);
	
	ТаблицаЗатрат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗатрат;

КонецФункции

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаЗатрат,Отказ,Заголовок)
	
	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Упр,Регл,Взаиморасчеты"));
	
	Для каждого НаборЗаписей Из Движения Цикл
	
		НаборЗаписей.Записывать = Истина;
	
	КонецЦикла; 
	
	Движения.бит_ПланируемыеЗатраты.БлокироватьДляИзменения = Истина;
	// Движения по регистру бит_ПланируемыеЗатраты.
	 
	НаборЗаписей = Движения.бит_ПланируемыеЗатраты; 
	 
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаРасход Из ТаблицаЗатрат Цикл
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация 			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Контрагент           = СтруктураШапкиДокумента.Контрагент;		
		СтрокаДвижений.Валюта      			= СтруктураШапкиДокумента.ВалютаДокумента;
		СтрокаДвижений.СтатьяОборотов       = СтрокаРасход.СтатьяОборотов;
		СтрокаДвижений.Проект               = СтрокаРасход.Проект;
		СтрокаДвижений.ЦФО                  = СтрокаРасход.ЦФО;
		СтрокаДвижений.НоменклатурнаяГруппа = СтрокаРасход.НоменклатурнаяГруппа;	
		
		МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
		Для н = 1 По МаксКолвоДопАналитик Цикл
			СтрокаДвижений["Аналитика_"+н]	= СтрокаРасход["Аналитика_"+н];
		КонецЦикла;
		
		СтрокаДвижений.ДоговорКонтрагента   = СтрокаРасход.ДоговорКонтрагента;	
		СтрокаДвижений.Сумма                = СтрокаРасход.Сумма; 
		
		СтрокаДвижений.ДокументПланирования = СтруктураШапкиДокумента.Ссылка;
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвижений,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
	КонецЦикла; 
	
	НаборЗаписей.мПериод          = СтруктураШапкиДокумента.ДатаРасхода;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ВыполнитьПриход();
	
	Движения.бит_ПланируемыеЗатраты.Записать();
	
	// Контроль сумм по договору.
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	    бит_ДоговораСервер.ПровестиКонтрольСуммПоЗаявкам(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаЗатрат,Отказ,Заголовок);
	
КонецПроцедуры

// Процедура выполняет движения по регистру бит_КонтрольныеЗначенияБюджетов
// и осуществляет контроль по бюджету.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  ТаблицаРасход            - ТаблицаЗначений.
//  Отказ                    - Булево.
//  Заголовок                - Строка.
// 
Процедура ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаЗатрат,Отказ,Заголовок)
	
	НеУчитыватьСверхБюджет = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,ПланыВидовХарактеристик.бит_НастройкиПрограммы.НеУчитыватьСверхБюджетныеЗаявкиНаЗатратыПриКонтролеПоБюджету);
	
	Если НеУчитыватьСверхБюджет
		И СверхБюджета Тогда
		
		Возврат;
	КонецЕсли;
	
	КонтролироватьБюджет = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьЗаявкуНаЗатратыПоБюджету);
	Периодичность        = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(Сценарий);	
	
	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаРасхода,Периодичность);
	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаРасхода,Периодичность);
	
	// Получаем имя типа Сценарии бюджетирования в зависимости от текущего решения.
	ИмяТипаСценарии = бит_ОбщегоНазначения.ПолучитьИмяТипаСценарииБюджетирования();
	
	Запрос = Новый Запрос;
	БДРПланируетсяСНДС = бит_ОбщегоНазначенияПовтИсп.ЗначениеПеременной("бит_БДРПланируетсяСНДС");
	Запрос.УстановитьПараметр("БДРПланируетсяСНДС", БДРПланируетсяСНДС);
	Запрос.УстановитьПараметр("ТекущийДокумент", СтруктураШапкиДокумента.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ЗаявкаНаЗатраты.ЦФО,
	|	бит_ЗаявкаНаЗатраты.СтатьяОборотов,
	|	бит_ЗаявкаНаЗатраты.Проект,
	|	бит_ЗаявкаНаЗатраты.Контрагент,
	|	бит_ЗаявкаНаЗатраты.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА &БДРПланируетсяСНДС = ИСТИНА
	|			ТОГДА бит_ЗаявкаНаЗатраты.Сумма
	|		ИНАЧЕ бит_ЗаявкаНаЗатраты.Сумма - бит_ЗаявкаНаЗатраты.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	бит_ЗаявкаНаЗатраты.СтавкаНДС,
	|	бит_ЗаявкаНаЗатраты.СуммаНДС,
	|	бит_ЗаявкаНаЗатраты.НоменклатурнаяГруппа,
	|	бит_ЗаявкаНаЗатраты.Аналитика_1,
	|	бит_ЗаявкаНаЗатраты.Аналитика_2,
	|	бит_ЗаявкаНаЗатраты.Аналитика_3,
	|	бит_ЗаявкаНаЗатраты.Аналитика_4,
	|	бит_ЗаявкаНаЗатраты.Аналитика_5,
	|	бит_ЗаявкаНаЗатраты.Аналитика_6,
	|	бит_ЗаявкаНаЗатраты.Аналитика_7,
	|	бит_ЗаявкаНаЗатраты.Сценарий
	|ИЗ
	|	Документ.бит_ЗаявкаНаЗатраты КАК бит_ЗаявкаНаЗатраты
	|ГДЕ
	|	бит_ЗаявкаНаЗатраты.Ссылка = &ТекущийДокумент";
	
	
	Результат = Запрос.Выполнить();
	
	ТаблицаДляКонтроля = Результат.Выгрузить();
	
	ТаблицаДляКонтроля.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТаблицаДляКонтроля.ЗаполнитьЗначения(0,"Количество");	
	ТаблицаДляКонтроля.Колонки.Добавить("Период",Новый ОписаниеТипов("Дата"));
	ТаблицаДляКонтроля.ЗаполнитьЗначения(ДатаНач,"Период");
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сценарий");
	МассивИсключений.Добавить("СтатьяОборотов");
	МассивИсключений.Добавить("БанковскийСчет");
	
	ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,мНастройкиИзмерений);
	
	бит_КонтрольПоБюджету.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Периодичность);
	
	ВалютаСценария    = Сценарий.Валюта;
	СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария,Дата);		
	
	Для каждого СтрокаТаблицы Из ТаблицаДляКонтроля Цикл
	
		СтрокаТаблицы.Сумма     = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
																					,ВалютаДокумента
																					,ВалютаСценария
																					,КурсДокумента
																					,СтруктураСценарий.Курс
																					,КратностьДокумента
																					,СтруктураСценарий.Кратность);
	
	КонецЦикла; 
	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля",			ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий",					Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
	СтруктураПараметров.Вставить("РежимКонтроля",         		"Заявки");
	СтруктураПараметров.Вставить("Объект",         				Ссылка);	
	
	
	ТекстЗапроса = бит_КонтрольПоБюджету.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
				   
   
   
   МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
   бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
   
   // Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
   ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
   
   Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
   Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
   Запрос.УстановитьПараметр("Сценарий"      ,Сценарий);
   Запрос.УстановитьПараметр("СценарийКонтролируемый", Справочники[ИмяСправочникаСценарии].ПустаяСсылка());
   Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
   Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
   Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
   
   бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
   
   
   Результат = Запрос.Выполнить();
   
   НаборЗаписей = Движения.бит_КонтрольныеЗначенияБюджетов;    
   ТаблицаДвижений = НаборЗаписей.Выгрузить();
   ТаблицаДвижений.Очистить();
   
   СтруктураПараметров = Новый Структура;
   СтруктураПараметров.Вставить("ИзмеренияКонтроля"   ,ИзмеренияКонтроля);
   СтруктураПараметров.Вставить("Сценарий"            ,Сценарий);
   СтруктураПараметров.Вставить("КонтролироватьБюджет",КонтролироватьБюджет);
   СтруктураПараметров.Вставить("СверхБюджета"        ,СверхБюджета);
   СтруктураПараметров.Вставить("РежимКонтроля"       ,"Заявки");
   
   флОтказДоПроверки = Отказ;
   
   МассивСтрокПревышения = бит_КонтрольПоБюджету.ОбработатьРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок);
   
   ПоместитьВоВременноеХранилище(МассивСтрокПревышения, мАдресХранилищаСтрокПревышения);
   
   Если флОтказДоПроверки Тогда
   
   	  Отказ = Истина;
   
   КонецЕсли; 
   
   НаборЗаписей.мПериод          = СтруктураШапкиДокумента.ДатаРасхода;
   НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
   НаборЗаписей.ДобавитьДвижение();
   

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

ПолучитьСтатусМодуль();

мИгнорироватьЗапись        = Ложь;

мСоздаватьПозицию         = Истина;

мПометкаИзГрафикаНачислений = Ложь;

// Соответствие имен реквизитов шапки и расходной позиции для синхронизации.
мСинхрРеквизиты = Новый Структура;
мСинхрРеквизиты.Вставить("Организация"       	 ,"Организация");
мСинхрРеквизиты.Вставить("Важность"          	 ,"Важность");
мСинхрРеквизиты.Вставить("СодержаниеЗатрат"  	 ,"СодержаниеЗатрат");
мСинхрРеквизиты.Вставить("ДатаРасхода"       	 ,"ДатаРасхода");
мСинхрРеквизиты.Вставить("ДатаПлатежаКрайняя"	 ,"ДатаПлатежаКрайняя");
мСинхрРеквизиты.Вставить("ВалютаДокумента"   	 ,"ВалютаДокумента");
мСинхрРеквизиты.Вставить("КурсДокумента"     	 ,"КурсДокумента");
мСинхрРеквизиты.Вставить("КратностьДокумента"	 ,"КратностьДокумента");
мСинхрРеквизиты.Вставить("СтавкаНДС"		 	 ,"СтавкаНДС");

РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
мТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

мНастройкиПрограммы = Новый Соответствие;

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

мРежимОбновленияВиз = Константы.бит_РежимОбновленияПеречняВиз.Получить();

// Хранилище должно быть доступно и в объекте и в форме, поэтому определим его сразу.
мАдресХранилищаСтрокПревышения = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);

#КонецОбласти

#КонецЕсли
