#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.бит_ПравилаТрансляции") Тогда
		НоваяСтрокаПравил = ПравилаТрансляции.Добавить();
	    НоваяСтрокаПравил.ПравилоТрансляции = ДанныеЗаполнения;
		НоваяСтрокаПравил.Назначение = Перечисления.бит_НазначенияПравилТрансляции.Трансляция;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("МассивПравил") Тогда
			ЗаполнитьПоМассивуПравилТрансляции(ДанныеЗаполнения.МассивПравил);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли; 
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ТаблицаПравил = ПодготовитьТаблицуПравил();
	
	Если НЕ Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПравил,Отказ,Заголовок);
		
		Если  ЕстьПодборТиповПроводок() Тогда
		
			ОбновитьПовторноИспользуемыеЗначения();
		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	Если НЕ Отказ Тогда
		
		Если ЕстьПодборТиповПроводок() Тогда
			
			ОбновитьПовторноИспользуемыеЗначения();
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет шапку документа.
//  
// Параметры:
//  ОбъектКопирования.
//
Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования = Неопределено)
	
	Дата = ТекущаяДатаСеанса();
	
	// Заполнить реквизиты значениями по умолчанию.
	ДатаНачала = Дата;
		
	// Заполним шапку документа значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

Процедура ЗаполнитьПоМассивуПравилТрансляции(МассивПравил)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПравил", МассивПравил); 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаТрансляции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.бит_ПравилаТрансляции КАК ПравилаТрансляции
		|ГДЕ
		|	НЕ ПравилаТрансляции.ЭтоГруппа
		|	И НЕ ПравилаТрансляции.ПометкаУдаления
		|	И ПравилаТрансляции.Ссылка В(&МассивПравил)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ДатаНачалаДействия = ТекущаяДатаСеанса();
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаПравил = ПравилаТрансляции.Добавить();
		НоваяСтрокаПравил.ДатаНачала        = ДатаНачалаДействия;
	    НоваяСтрокаПравил.ПравилоТрансляции = Выборка.Ссылка;
		НоваяСтрокаПравил.Назначение        = Перечисления.бит_НазначенияПравилТрансляции.Трансляция;
	КонецЦикла;

КонецПроцедуры

// Функция определяет, есть ли в табличной части 
// ПравилаТрансляции строки с назначением ПодборТиповПроводок.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЕстьПодборТиповПроводок()

	СтрОтбор = Новый Структура("Назначение", Перечисления.бит_НазначенияПравилТрансляции.ПодборТиповПроводок);
	МассивСтрок = ЭтотОбъект.ПравилаТрансляции.НайтиСтроки(СтрОтбор);
	
	Есть = ?(МассивСтрок.Количество() > 0, Истина, Ложь);

	Возврат Есть;
	
КонецФункции // ЕстьПодборТиповПроводок()

#Область ПроведениеДокумента

// Функция получает таблицу правил.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуПравил()

	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабЧасть.ДатаНачала = &ПустаяДата
	|			ТОГДА ТабЧасть.Ссылка.ДатаНачала
	|		ИНАЧЕ ТабЧасть.ДатаНачала
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА ТабЧасть.Ссылка.ГруппаСтруктурныхПодразделений <> ЗНАЧЕНИЕ(Справочник.бит_ГруппыСтруктурныхПодразделений.ПустаяСсылка)
	|			ТОГДА ТабЧасть.Ссылка.ГруппаСтруктурныхПодразделений
	|		ИНАЧЕ ТабЧасть.Ссылка.Организация
	|	КОНЕЦ КАК СтруктурноеПодразделение,
	|	ТабЧасть.ПравилоТрансляции,
	|	ТабЧасть.ДатаОкончания,
	|	ТабЧасть.Приоритет,
	|	ТабЧасть.Назначение
	|ИЗ
	|	Документ.бит_НазначениеПравилТрансляции.ПравилаТрансляции КАК ТабЧасть
	|ГДЕ
	|	ТабЧасть.Ссылка = &Ссылка";
					
	Запрос.УстановитьПараметр("Ссылка"		,Ссылка);				
	Запрос.УстановитьПараметр("ПустаяДата"	,Дата("00010101"));

	ТаблицаЗависимостей = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗависимостей;
	
КонецФункции // ПодготовитьТаблицуПравил()

// Процедура выполняет движения по регистрам.
//  
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  ТаблицаПравил.
//  Отказ                   - Булево.
//  Заголовок               - Строка.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПравил, Отказ, Заголовок)
	
	// Движения по регистру НазначениеПравилТрансляции.
	НаборЗаписей = Движения.бит_НазначениеПравилТрансляции;
	Для Каждого СтрокаТаблицы Из ТаблицаПравил Цикл
	
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,СтрокаТаблицы);
		
	КонецЦикла; 
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#КонецОбласти

#КонецЕсли
