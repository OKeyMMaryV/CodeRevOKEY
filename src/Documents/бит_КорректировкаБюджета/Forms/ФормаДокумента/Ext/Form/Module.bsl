
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();	
	КонецЕсли; 
	
	ЭтоБП = бит_ОбщегоНазначения.ЭтоСемействоБП();
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	ЗаполнитьКэшЗначений();
	МетаданныеОбъекта = Метаданные.Документы.бит_КорректировкаБюджета;
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Элементы управления для измерений несуществующих в смежном решении	
	// создаются программно для унификации кода.
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправленияКорректировкаБюджета(Элементы);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "ЗависимыеОбороты", "ЗависимыеОбороты",
		Элементы.ЗависимыеОборотыКоличество);
	
	ОтобразитьДополнительныеИзмерения();
	ЗаполнитьДобавленныеКолонкиТаблиц();																
	ОФормитьТаблицу();
	ОФормитьТаблицу(,"ЗависимыеОбороты");
	
	// Упраление видимостью, доступность элементов формы.
	УстановитьВидимостьДоступность();
		
	// Проверка наличия зафиксированных бюджетных данных.
	Если Объект.Проведен Тогда
		бит_Бюджетирование.ПроверитьФиксациюВФорме(ЭтотОбъект, Объект.Ссылка, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Дата");
	мКэшРеквизитовФормы.Вставить("Сценарий");
	мКэшРеквизитовФормы.Вставить("РежимЗависимыхОборотов");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УстановитьНастройкиДоступностиЭлементов();
		УстановитьВидимостьДоступность();
		
	ИначеЕсли СтрСравнить(ИмяСобытия, "ПодборДанныхБюджета") = 0 И Источник = ЭтотОбъект Тогда
		ОбработатьПодборДанныхБюджета(Параметр);
		
	ИначеЕсли ИмяСобытия = "ИзменениеТабличнойЧасти" И Источник = УникальныйИдентификатор Тогда
		ПерезаполнитьТабличнуюЧасть(Параметр);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Упраление видимостью, доступность элементов формы.
	УстановитьВидимостьДоступность();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Установить видимость/доступность элементов формы.
	УстановитьВидимостьДоступность();
                      	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Автовидимость колонок.
	Элементы.ФормаАвтовидимостьКолонок.Пометка = фАвтовидимостьКолонок;	
	УстановитьАвтовидимостьКолонок(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_КорректировкаБюджета";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
		
	ИзменениеВалютыСервер();
	
	ДобавитьВКэш("Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)

	ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСценарийПриИзменении", ЭтотОбъект);
	Если Объект.БДДС.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Данные будут очищены. Продолжить?'");
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеВопрос, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросСценарийПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзменениеСценарияСервер(Истина);
	Иначе
		ИзвлечьИзКэша("Сценарий");
	КонецЕсли;

	ДобавитьВКэш("Сценарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыСервер();
	
КонецПроцедуры
     
&НаКлиенте
Процедура РежимЗависимыхОборотовПриИзменении(Элемент)
	
	ТекущийРежимЗависимыхОборотов = мКэшРеквизитовФормы.РежимЗависимыхОборотов;
	Если ТекущийРежимЗависимыхОборотов = Объект.РежимЗависимыхОборотов Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЗависимыеОбороты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Зависимые обороты будут очищены. Продолжить?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросРежимЗависимыхОборотовПриИзменении", ЭтотОбъект, ТекущийРежимЗависимыхОборотов);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ДобавитьВКэш("РежимЗависимыхОборотов");
		УстановитьВидимостьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗависимыхОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.Автоматический"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.НеФормировать"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБДДС

&НаКлиенте
Процедура БДДСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;

	Если НоваяСтрока Тогда
		Если Копирование Тогда
			ПоляТаблицы = ПоляТаблицы(ЭтотОбъект);
			Для каждого ГруппаПолей Из ПоляТаблицы Цикл
				Для каждого Элемент Из ГруппаПолей.Значение Цикл
					ТекущиеДанные[Элемент + "_Старый"] = Неопределено;
				КонецЦикла; 
			КонецЦикла; 
		Иначе	
			бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, 
				фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
			ТекущиеДанные.Валюта = Объект.ВалютаДокумента;	
		КонецЕсли; 
			
		ТекущиеДанные.РучнаяКорректировка = Истина;	
	КонецЕсли;	
	
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВСтроке(ТекущиеДанные);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура БДДСПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокиТаблицыБДДС();

КонецПроцедуры

&НаКлиенте
Процедура БДДССтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
		
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	
	ИзменениеСтатьиОборотовТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура БДДСВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;  
	ТекИд = ТекущиеДанные.ПолучитьИдентификатор();
	
	ИзменениеСуммыТабличнойЧасти(ТекИд, "Сумма", "");
	
КонецПроцедуры

&НаКлиенте
Процедура БДДССумма_СтарыйПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	ИзменениеСуммыТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор(), "Сумма", "_Старый");
	
КонецПроцедуры

&НаКлиенте
Процедура БДДССуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	ИзменениеСуммыТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор(), "Сумма", "");
	
КонецПроцедуры

&НаКлиенте
Процедура БДДССуммаСценарий_СтарыйПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	ИзменениеСуммыТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор(), "СуммаСценарий", "_Старый");

КонецПроцедуры

&НаКлиенте
Процедура БДДССуммаСценарийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	ИзменениеСуммыТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор(), "СуммаСценарий", "");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗависимыеобороты

&НаКлиенте
Процедура ЗависимыеОборотыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Объект.ЗависимыеОбороты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ЗависимыеОборотыКомментарийРасчета" И НЕ ПустаяСтрока(ТекущиеДанные.КомментарийРасчета) Тогда
		
		СтандартнаяОбработка = Ложь;		
		
		ПараметрыФормы = Новый Структура("КомментарийРасчета", ТекущиеДанные.КомментарийРасчета);
		ОткрытьФорму("ОбщаяФорма.бит_ФормаКомментарияРасчетаЗависимыхОборотовУправляемая", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			ИмяРеквизита = СтрЗаменить(Поле.Имя, "ЗависимыеОбороты", "");
			ТекЗнч = ТекущиеДанные[ИмяРеквизита];
			
			Если ЗначениеЗаполнено(ТекЗнч) Тогда
				
				ПоказатьЗначение(,ТекЗнч);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПодключаемыеКомандыЭлементовТаблицФормы

&НаКлиенте
Процедура Подключаемый_БДДСяАналитикаСтрокиПриИзменении(Элемент)
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БДДСАналитикаСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.БДДС.ТекущиеДанные;
	ИмяПоля  	  = СтрЗаменить(Элемент.Имя, "БДДС", "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БДДСАналитикаСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.БДДС.ТекущиеДанные;
	ИмяПоля  	  = СтрЗаменить(Элемент.Имя, "БДДС", "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БДДСАналитикаСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.БДДС.ТекущиеДанные;
	ИмяПоля  	  = СтрЗаменить(Элемент.Имя, "БДДС", "");
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, ИмяПоля,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиПриИзменении(Элемент)
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ЗависимыеОбороты.ТекущиеДанные;
	ИмяПоля  	  = СтрЗаменить(Элемент.Имя, "ЗависимыеОбороты", "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ЗависимыеОбороты.ТекущиеДанные;
	ИмяПоля  	  = СтрЗаменить(Элемент.Имя, "ЗависимыеОбороты", "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
    
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ЗависимыеОбороты.ТекущиеДанные;
	ИмяПоля  	  = СтрЗаменить(Элемент.Имя, "ЗависимыеОбороты", "");
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, ИмяПоля,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
	
#КонецОбласти 

&НаКлиенте
Процедура АвтовидимостьКолонок(Команда)
	
	фАвтовидимостьКолонок = Не фАвтовидимостьКолонок;	
	Элементы.ФормаАвтовидимостьКолонок.Пометка = фАвтовидимостьКолонок;
	
	УстановитьАвтовидимостьКолонок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборДанныхБюджета(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Команда" , "ПодборДанныхБюджета");
	ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ОткрытьФорму("Обработка.бит_ПодборДанныхБюджета.Форма", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабЧасть(Команда)
	
	ПараметрыФормы = ПараметрыИзмененияТаблицыДокумента();
	ОткрытьФорму("Обработка.бит_ИзменениеТабЧастиДанныеБюджета.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОборотыЗаполнить(Команда)
	
	Если Объект.ЗависимыеОбороты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Зависимые обороты будут очищены. Продолжить?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗависимыеОборотыЗаполнить", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
				
	Иначе
		ЗаполнитьЗависимыеОборотыСервер();
	КонецЕсли; 
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросЗависимыеОборотыЗаполнить(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗависимыеОборотыСервер();
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура РаспределитьПо(Команда)
	
    ТекЭлемент = Элементы.БДДС.ТекущийЭлемент;
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СтрЗаменить(ТекЭлемент.Имя, "БДДС", "");
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	
	Если НЕ РаспределениеПоддерживается(ТекущиеДанные, ТекЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекЭлемент = Элементы.БДДСПериод_Старый ИЛИ ТекЭлемент = Элементы.БДДСПериод Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоПериодам"));
		ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
		
		Оповещение = Новый ОписаниеОповещения("РаспределитьПоАналитикеЗавершение", ЭтотОбъект);
		РежимОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
	Иначе
		Если СтрНайти(ИмяКолонки, "_Старый") = 0 Тогда
			// Значение считываем с исторических данных.
			ИмяКолонки = ИмяКолонки + "_Старый";
		КонецЕсли; 
		ТекущееЗначение = ТекущиеДанные[ИмяКолонки];

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоАналитике"));
		ПараметрыФормы.Вставить("ИмяКолонки", СтрЗаменить(ИмяКолонки, "_Старый", ""));
		ПараметрыФормы.Вставить("ТекущееЗначение", ТекущееЗначение);
		
		Оповещение = Новый ОписаниеОповещения("РаспределитьПоАналитикеЗавершение", ЭтотОбъект);
		РежимОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли; 
	
	ОткрытьФорму("Обработка.бит_РаспределениеБюджетныхДанныхПоПрофилю.Форма",ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОкна);

КонецПроцедуры

// Процедура обработчик оповещения "РаспределитьПоАналитикеЗавершение".
//
// Параметры:
// Результат - Структура - Настройки распределения.
// ДополнительныеДанные - Произвольный.
//
&НаКлиенте 
Процедура РаспределитьПоАналитикеЗавершение(Результат, ДополнительныеДанные) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Строки = Элементы.БДДС.ВыделенныеСтроки;
		РаспределитьНаСервере(Строки, Результат);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	МетаданныеОбъекта = Метаданные.Документы.бит_КорректировкаБюджета;
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
	фКэшЗначений.Вставить("ПроводитьПослеУтверждения", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения"));	
		
	// Данные по дополнительным аналитикам.
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
		
	// Параметры, используемые для управления автовидимостью колонок.
	фКэшЗначений.Вставить("НастройкаВидимостиКолонок", Новый Структура);
	фКэшЗначений.Вставить("МассивСтатей_БДДС"		 , Новый Массив);
	фКэшЗначений.Вставить("МассивСтатей_ЗависимыеОбороты", Новый Массив);
			
	КлючевыеЭлементы = Новый Массив;
	КлючевыеЭлементы.Добавить("Дата");
	КлючевыеЭлементы.Добавить("Сценарий");
	КлючевыеЭлементы.Добавить("ЦФО");
	КлючевыеЭлементы.Добавить("СтатьяОборотов");
	Если МетаданныеОбъекта.Реквизиты.Найти("Проект") <> Неопределено Тогда
		КлючевыеЭлементы.Добавить("Проект");	
	КонецЕсли;
	КлючевыеЭлементы.Добавить("Ответственный");  
	КлючевыеЭлементы.Добавить("Комментарий");	
	КлючевыеЭлементы.Добавить("БДДС");
	КлючевыеЭлементы.Добавить("СторнироватьСверхБюджета");
	КлючевыеЭлементы.Добавить("СверхБюджета");
	
	КлючевыеЭлементы.Добавить("БДДСКоманднаяПанель");  
	КлючевыеЭлементы.Добавить("БДДСКонтекстноеМенюРаспределитьПо");
	КлючевыеЭлементы.Добавить("БДДСПодборДанныхБюджета");
	КлючевыеЭлементы.Добавить("БДДСИзменитьТабЧасть");
	КлючевыеЭлементы.Добавить("ЗависимыеОборотыЗависимыеОборотыЗаполнить");

	фКэшЗначений.Вставить("МассивНередактируемыхЭлементовФормы", КлючевыеЭлементы);
	
	МассивИменСумм = Новый Массив;
	МассивИменСумм.Добавить("СуммаСценарий");
	МассивИменСумм.Добавить("СуммаРегл");
	МассивИменСумм.Добавить("СуммаУпр");
	фКэшЗначений.Вставить("СтруктураДопПолей", Новый Структура("Учет_Сумма", МассивИменСумм));
	  
	// Произвольные измерения.
	фКэшЗначений.Вставить("Измерения"         , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));
	
КонецПроцедуры
																		 
// Процедура устанавливает видимость, доступность элементам формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УстановитьВидимостьДоступность()

	// Устанавливаем доступность кнопки "Подбор" командной панели "КоманднаяПанельБДДС".
	Элементы.БДДСПодборДанныхБюджета.Доступность = ЗначениеЗаполнено(Объект.Сценарий);
	
	// Редактирование документа разрешено только в статусе черновика или документа без статуса.
	ЭлементыФормыДоступны = (Статус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Черновик
							 ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка());                    
	Для Каждого ТекЭлемент Из фКэшЗначений.МассивНередактируемыхЭлементовФормы Цикл
		Если Тип(Элементы[ТекЭлемент]) = Тип("КнопкаФормы") Тогда
			Элементы[ТекЭлемент].Доступность = ЭлементыФормыДоступны;
		Иначе	
			Элементы[ТекЭлемент].ТолькоПросмотр = Не ЭлементыФормыДоступны;
		КонецЕсли; 						 
	КонецЦикла; 	
	
	Элементы.СторнироватьЗависимыеОбороты.Видимость = Объект.РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический;
	
	УстановитьНастройкиДоступностиЭлементов();
	
	Если фКэшЗначений.ПроводитьПослеУтверждения 
		И Объект.Проведен И Объект.ОтправленНаСогласование
		И Объект.РежимПринятияКУчету = 1
		И Статус <> Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Утверждена Тогда
		Элементы.ПредупреждениеОПринятиеКУчетуПослеУтверждения.Видимость = Истина;
	Иначе
		Элементы.ПредупреждениеОПринятиеКУчетуПослеУтверждения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросРежимЗависимыхОборотовПриИзменении(Ответ, ТекущийРежимЗависимыхОборотов) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда 			
		Объект.ЗависимыеОбороты.Очистить();  					
	Иначе
		РежимЗависимыхОборотов = ТекущийРежимЗависимыхОборотов;
	КонецЕсли;

	ДобавитьВКэш("РежимЗависимыхОборотов");
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция РаспределениеПоддерживается(ДанныеСтроки, ПолеФормы)
	
	Поддерживается = Истина;
	ТекстСообщения = "";
	ИмяПоля = СтрЗаменить(ПолеФормы.Имя, "БДДС", "");	   
	Разрез  = СтрЗаменить(ИмяПоля, "_Старый", "");
	Представление = "";
	
	Если НЕ ПустаяСтрока(ПолеФормы.Заголовок) Тогда
		Представление = ПолеФормы.Заголовок;
	Иначе	
		Если ТипЗнч(ПолеФормы.Родитель) = Тип("ГруппаФормы") Тогда
			Представление = ПолеФормы.Родитель.Заголовок;
		Иначе	
			Представление = Разрез;
		КонецЕсли;  
	КонецЕсли; 
	
	Если Поддерживается Тогда
		Исключения = Новый Массив;
		// Технологические.
		Исключения.Добавить(Элементы.БДДСНомерСтроки);
		Исключения.Добавить(Элементы.БДДСНадписиСтароеЗначение);
		Исключения.Добавить(Элементы.БДДСНадписиНовоеЗначение);
		// Значащие.
		Исключения.Добавить(Элементы.БДДССумма_Старый);
		Исключения.Добавить(Элементы.БДДССуммаСценарий_Старый);
		Исключения.Добавить(Элементы.БДДССуммаРегл_Старый);
		Исключения.Добавить(Элементы.БДДССуммаУпр_Старый);
		Исключения.Добавить(Элементы.БДДСВалюта_Старый);
		Исключения.Добавить(Элементы.БДДСКоличество_Старый);
		Исключения.Добавить(Элементы.БДДСКомментарий_Старый);
		Исключения.Добавить(Элементы.БДДССтатьяОборотов_Старый);
		Исключения.Добавить(Элементы.БДДССтавкаНДС_Старый);
		
		Исключения.Добавить(Элементы.БДДССумма);
		Исключения.Добавить(Элементы.БДДССуммаСценарий);
		Исключения.Добавить(Элементы.БДДССуммаРегл);
		Исключения.Добавить(Элементы.БДДССуммаУпр);
		Исключения.Добавить(Элементы.БДДСВалюта);
		Исключения.Добавить(Элементы.БДДСКоличество);
		Исключения.Добавить(Элементы.БДДСКомментарий);
		Исключения.Добавить(Элементы.БДДССтатьяОборотов);
		Исключения.Добавить(Элементы.БДДССтавкаНДС);		

		Если Исключения.Найти(ПолеФормы) <> Неопределено Тогда
			Поддерживается = Ложь;
			ТекстСообщения = НСтр("ru = 'По этой колонке распределение не поддерживается.'");
		КонецЕсли;
	КонецЕсли; 
	
	ПолеПериод = (ПолеФормы = Элементы.БДДСПериод_Старый ИЛИ ПолеФормы = Элементы.БДДСПериод);
	Если Поддерживается И НЕ ПолеПериод Тогда
		// Если по статье не ведется учет по данной аналитике - распределение невозможно.		
		НастройкиСтатьи = ПолучитьНастройкиСтатьи(ДанныеСтроки.СтатьяОборотов);
		Если НЕ НастройкиСтатьи = Неопределено Тогда
			ВедетсяУчет = Ложь;
			НастройкиСтатьи.Свойство("Учет_" + Разрез, ВедетсяУчет);
			Если НЕ ВедетсяУчет = Истина Тогда
				Поддерживается = Ложь;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для статьи ""%1"" по аналитике ""%2"" учет не ведется. Распределение не поддерживается.'"),
									ДанныеСтроки.СтатьяОборотов, Представление);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ Поддерживается Тогда
		ПоказатьПредупреждение(, ТекстСообщения,, Нстр("ru = 'Распределить по ...'"));	
	КонецЕсли; 
	
	Возврат Поддерживается;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиСтатьи(СтатьяОборотов) 

	НастройкиСтатей = Новый Соответствие;
	бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(СтатьяОборотов, НастройкиСтатей);
	Возврат НастройкиСтатей[СтатьяОборотов];
	
КонецФункции

&НаСервере
Процедура РаспределитьНаСервере(ВыделенныеСтроки, НастройкиРаспределения)
	
	Ресурсы = Новый Массив();  
	Ресурсы.Добавить("СуммаСценарий");
	Ресурсы.Добавить("СуммаРегл");
	Ресурсы.Добавить("СуммаУпр");
	Ресурсы.Добавить("Сумма");
	Ресурсы.Добавить("Количество");
	
	Модифицированность = Истина;
	
	Для каждого ИдСтроки Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.БДДС.НайтиПоИдентификатору(ИдСтроки);	
		Если СтрокаТаблицы <> Неопределено Тогда
			// Распределение по профилю.
			НовыеСтроки = бит_Бюджетирование.РаспределитьПоПрофилюАналитики(НастройкиРаспределения, Объект.БДДС, СтрокаТаблицы, Ресурсы);
			// Заполнение сторнируемых ресурсов и надписей.
			Для каждого НоваяСтрока Из НовыеСтроки Цикл
				Если НЕ НоваяСтрока.РучнаяКорректировка Тогда
					Для каждого Ресурс Из Ресурсы Цикл
						НоваяСтрока[Ресурс + "_Старый"] = НоваяСтрока[Ресурс];
					КонецЦикла; 
				КонецЕсли; 
				ЗаполнитьНадписиВСтроке(НоваяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВСтроке(ТекущаяСтрока)

	ТекущаяСтрока.НадписиНовоеЗначение = НСтр("ru = 'после изменения:'");
	ТекущаяСтрока.НадписиСтароеЗначение = НСтр("ru = 'до изменения:'");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для каждого СтрокаТаблицы Из Объект.БДДС Цикл
		ЗаполнитьНадписиВСтроке(СтрокаТаблицы);
	КонецЦикла; 	

КонецПроцедуры

&НаСервере
Процедура ОтобразитьДополнительныеИзмерения()
	
	// Подготовка параметров, необходимых для отображения доп. измерений.
	ПараметрыГрупп = Новый Соответствие;
	ПараметрыПолей = Новый Соответствие;
	Для каждого ТекЭлемент Из фКэшЗначений.ИзмеренияДоп Цикл
		СтруктураИмен = Новый Структура;
		СтруктураИмен.Вставить("ИмяПоля", "БДДСГруппа" + ТекЭлемент.Ключ);
		СтруктураИмен.Вставить("Префикс", "");
		СтруктураИмен.Вставить("Постфикс", "");
		
		ПараметрыГрупп.Вставить(ТекЭлемент.Ключ, СтруктураИмен);
		
		СтруктураИмен = Новый Структура;
		СтруктураИмен.Вставить("ИмяПоля", "БДДС" + ТекЭлемент.Ключ + "_Старый");
		СтруктураИмен.Вставить("Префикс", "");
		СтруктураИмен.Вставить("Постфикс", " "+ НСтр("ru = '(старый)'"));
		
		ПараметрыПолей.Вставить(ТекЭлемент.Ключ, СтруктураИмен);
	КонецЦикла;
	
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(
		ЭтотОбъект, "БДДС", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
																	
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(
		ЭтотОбъект, "БДДС", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений, ПараметрыГрупп);
	
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(
		ЭтотОбъект, "БДДС", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений, ПараметрыПолей);

	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(
		ЭтотОбъект, "ЗависимыеОбороты", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);

КонецПроцедуры

&НаСервере
Процедура УстановитьАвтовидимостьКолонок(ОбновлятьБезусловно = Ложь)
	
	ИмяТабличнойЧасти = "БДДС";
	ИмяМассива = "МассивСтатей_" 		+ ИмяТабличнойЧасти;
	
	Если фАвтовидимостьКолонок Тогда
		
		ТаблРез = Объект[ИмяТабличнойЧасти].Выгрузить();
		МассивСтатей = ТаблРез.ВыгрузитьКолонку("СтатьяОборотов");
		МассивСтарый = ТаблРез.ВыгрузитьКолонку("СтатьяОборотов_Старый"); 			
		Для каждого Элемент Из МассивСтарый Цикл  				
			МассивСтатей.Добавить(Элемент);    				
		КонецЦикла;		
		
		НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(МассивСтатей
																		, фКэшЗначений[ИмяМассива]
																		, фКэшЗначений.НастройкаВидимостиКолонок
																		, фКэшЗначений.НастройкиИзмерений);
		
		Если НеобходимоИзменение Тогда
			
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				, фКэшЗначений.НастройкаВидимостиКолонок
											 				, ИмяТабличнойЧасти);
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				, фКэшЗначений.НастройкаВидимостиКолонок
											 				, ИмяТабличнойЧасти
															, "_Старый"); // Старый.															
						
		КонецЕсли; 
		
	Иначе
		
		Если ОбновлятьБезусловно Тогда
			
			НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(Новый Массив
																		, фКэшЗначений[ИмяМассива]
																		, фКэшЗначений.НастройкаВидимостиКолонок
																		, фКэшЗначений.НастройкиИзмерений);
																		
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				,фКэшЗначений.НастройкаВидимостиКолонок
											 				,ИмяТабличнойЧасти);
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				,фКэшЗначений.НастройкаВидимостиКолонок
											 				,ИмяТабличнойЧасти
															, "_Старый"); // Старый.
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОФормитьТаблицу(СтатьяОборотов = Неопределено, ПрефиксТаблицы="БДДС") 
	
	// ----------------------------------------------------------------------
	// Оформление реквизитов строк по статьям оборотов.
	
	УдалитьСтароеОформление = Ложь;
	ПрефиксКонтейнера = "Объект.";
	
	Если СтатьяОборотов = Неопределено Тогда
	
		УдалитьСтароеОформление = Истина;
	
		// Формирование массива статей, по которым нужно добавить элементы УО.
		ТаблицаПоиска = Объект[ПрефиксТаблицы].Выгрузить();
		МассивСтатей = ТаблицаПоиска.ВыгрузитьКолонку("СтатьяОборотов");
		
		Если ПрефиксТаблицы = "БДДС" Тогда
			МассивСтатейСтарых = ТаблицаПоиска.ВыгрузитьКолонку("СтатьяОборотов_Старый");
			Для каждого ЭлементМассива Из МассивСтатейСтарых Цикл
				МассивСтатей.Добавить(ЭлементМассива);		
			КонецЦикла;
		КонецЕсли;
		
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		
		ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].ЗагрузитьЗначения(МассивСтатей);
		
	Иначе // Работаем только с одной статьей оборотов.		
		
		МассивСтатей = Новый Массив; 		
		
		НайденноеЗначение = ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].НайтиПоЗначению(СтатьяОборотов);
		Если НайденноеЗначение = Неопределено Тогда	
			
			МассивСтатей.Добавить(СтатьяОборотов);
			ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].Добавить(СтатьяОборотов);		
			
		КонецЕсли;  		
		
	КонецЕсли;	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОтметитьОбязательныеРазрезыСтатей", Истина);
	
	бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление, МассивСтатей, УдалитьСтароеОформление, ПрефиксКонтейнера, ПрефиксТаблицы, "", фКэшЗначений.СтруктураДопПолей,,ДопПараметры);
	
	Если ПрефиксТаблицы = "БДДС" Тогда
		бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление, МассивСтатей, Ложь, ПрефиксКонтейнера, ПрефиксТаблицы, "_Старый", фКэшЗначений.СтруктураДопПолей);
		УстановитьУсловноеОформлениеТаблиц();
	КонецЕсли;
	
КонецПроцедуры

// Процедура применяет настройки доступности и видимости для элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтотОбъект, Объект, Статус);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИзВалютыВВалюту(ТекущиеДанные, ИмяРеквизита, ИмяРеквизитаИсточник, СтруктураКурсыНач, СтруктураКурсыКон)

	ТекущиеДанные[ИмяРеквизита] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущиеДанные[ИмяРеквизитаИсточник]
    																			, СтруктураКурсыНач.Валюта
    																			, СтруктураКурсыКон.Валюта
    																			, СтруктураКурсыНач.Курс
    																			, СтруктураКурсыКон.Курс
    																			, СтруктураКурсыНач.Кратность
    																			, СтруктураКурсыКон.Кратность);
	

КонецПроцедуры

&НаСервере
Процедура ВыполнитьВалютныеПересчетыВСтроке(ТекИд, Префикс, Постфикс)

	ТекущиеДанные = Объект.БДДС.НайтиПоИдентификатору(ТекИд);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
  	СтруктураКурсыВалют = бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария(ДокОбъект, ТекущиеДанные.Период, Новый Структура("Документ, Регл, Упр, Сценарий"));
  
  	Если Объект.Сценарий.ИспользоватьКурсыСценария Тогда
		СтруктураКурсыСценарий = СтруктураКурсыВалют.Сценарий;
  	Иначе	
  		СтруктураКурсыСценарий = СтруктураКурсыВалют.Документ;
	КонецЕсли;
	СтруктураКурсыРегл = СтруктураКурсыВалют["Регл"];
	СтруктураКурсыУпр  = СтруктураКурсыВалют["Упр"];
	СтруктураКурсыВал  = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанные.Валюта, ТекущиеДанные.Период);
		
	ИмяРеквизитаИсточник = Префикс + Постфикс;
	           	
	Если Префикс = "СуммаСценарий" Тогда
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "Сумма" + Постфикс	, ИмяРеквизитаИсточник, СтруктураКурсыСценарий, СтруктураКурсыВал);
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "СуммаРегл" + Постфикс, ИмяРеквизитаИсточник, СтруктураКурсыСценарий, СтруктураКурсыРегл);	
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "СуммаУпр" + Постфикс , ИмяРеквизитаИсточник, СтруктураКурсыСценарий, СтруктураКурсыУпр);
	ИначеЕсли Префикс = "Сумма" Тогда	
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "СуммаСценарий" + Постфикс, ИмяРеквизитаИсточник, СтруктураКурсыВал, СтруктураКурсыСценарий);
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "СуммаРегл" + Постфикс	, ИмяРеквизитаИсточник, СтруктураКурсыВал, СтруктураКурсыРегл);	
		ПересчитатьИзВалютыВВалюту(ТекущиеДанные, "СуммаУпр" + Постфикс	 	, ИмяРеквизитаИсточник, СтруктураКурсыВал, СтруктураКурсыУпр);
	КонецЕсли;   	
  	      
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияСтрокиТаблицыБДДС()
	
	УстановитьАвтовидимостьКолонок();

КонецПроцедуры

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеВалютыОбъект();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры

// Процедура обрабатывает изменение сценария.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеСценарияСервер(ОчищатьТч = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеСценарияОбъект(ОчищатьТч);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

// Процедура обрабатывает изменение реквизита "СтатьяОборотов" в табличной части "БДДС".
// 
// Параметры:
//  ТекИд - Число.
// 
&НаСервере
Процедура ИзменениеСтатьиОборотовТабличнойЧасти(Идентификатор)
	
	Если ТипЗнч(Идентификатор) = Тип("Число") Тогда
		ТекущиеДанные = Объект.БДДС.НайтиПоИдентификатору(Идентификатор);
	Иначе
		ТекущиеДанные = Идентификатор;
	КонецЕсли; 

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СтатьяОборотов) Тогда
		НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(ТекущиеДанные.СтатьяОборотов);	
		
		ТекущиеДанные.СтавкаНДС = НастройкиСтатьи.СтавкаНДС;
		Если Не НастройкиСтатьи.Учет_Количество Тогда
			ТекущиеДанные.Количество = 0;
		КонецЕсли;
		
		Если Не НастройкиСтатьи.Учет_Сумма Тогда
			ТекущиеДанные.СуммаСценарий = 0;
			ТекущиеДанные.СуммаРегл 	= 0;
			ТекущиеДанные.СуммаУпр 		= 0;
			ТекущиеДанные.Сумма 		= 0;
		КонецЕсли;
		
		бит_Бюджетирование.УстановитьИспользованиеАналитики(ТекущиеДанные, НастройкиСтатьи, фКэшЗначений.Измерения);
		
		ОФормитьТаблицу(ТекущиеДанные.СтатьяОборотов);		
		УстановитьАвтовидимостьКолонок();
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает изменение реквизита "Сумма...."" в табличной части "БДДС".
// 
// Параметры:
//  ТекИд 	 - Число,
//  Префикс  - Строка,
//  Постфикс - Строка.
// 
&НаСервере
Процедура ИзменениеСуммыТабличнойЧасти(ТекИд, Префикс, Постфикс)
	
	ВыполнитьВалютныеПересчетыВСтроке(ТекИд, Префикс, Постфикс);
			
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборДанныхБюджета(ПараметрыРезультата)

	РезультатПодбора = ПараметрыРезультата.РезультатПодбора;
	Если РезультатПодбора.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	ОчиститьТаблицу  = ПараметрыРезультата.ОчиститьТаблицу;
	Если ОчиститьТаблицу Тогда
		Объект.БДДС.Очистить();
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы Из РезультатПодбора Цикл
		ДобавитьРезультатПолбораВБДДС(СтрокаТаблицы);	
	КонецЦикла;
	
	Модифицированность = Истина;
	ОФормитьТаблицу();
	УстановитьАвтовидимостьКолонок();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРезультатПолбораВБДДС(ДанныеСтроки)
	
	СтрокаТаблицы = Неопределено;
	
	// Поиск такой же строки в таблице БДДС.
	НайденныеСтроки = Объект.БДДС.НайтиСтроки(ДанныеСтроки);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаТаблицы = НайденныеСтроки[0];		
	КонецЕсли;
	
	Если СтрокаТаблицы = Неопределено Тогда
		
		СтрокаТаблицы = Объект.БДДС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтроки);
		
		Для каждого КлЗнч Из ДанныеСтроки Цикл
			ИмяРеквизита = КлЗнч.Ключ;
			СтрокаТаблицы[ИмяРеквизита + "_Старый"] = ДанныеСтроки[ИмяРеквизита];		
		КонецЦикла;

		// Сумма в валюте.
		Если СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.СуммаСценарий <> 0 Тогда
			СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаСценарий;		
		КонецЕсли;

	Иначе
		
		ТекстСообщения = Нстр("ru = 'Данная строка уже подобрана в табличную часть ""Данные бюджета"" строка № %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(СтрокаТаблицы.НомерСтроки,"ЧЦ=5; ЧДЦ="));
		Поле = СтрШаблон("БДДС[%1].НомерСтроки", Формат(СтрокаТаблицы.НомерСтроки - 1,"ЧЦ=5; ЧГ="));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, , Ложь);
	КонецЕсли;
			
КонецПроцедуры

// Процедура заполняет зависимые обороты.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьЗависимыеОборотыСервер()

	Объект.ЗависимыеОбороты.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьЗависимыеОбороты();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ОФормитьТаблицу(,"ЗависимыеОбороты");
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТабличнуюЧасть(ХранилищеДанные)

	Если НЕ ЭтоАдресВременногоХранилища(ХранилищеДанные) Тогда
		Возврат;
	КонецЕсли; 
	
	Модифицированность = Истина;
	ДанныеЗаполнения   = ПолучитьИзВременногоХранилища(ХранилищеДанные);
	
	Для каждого Строка Из ДанныеЗаполнения Цикл
		ТекущиеДанные = Объект.БДДС[Строка.ИД];
		ТекущиеДанные[Строка.Реквизит] = Строка.Значение;
		Если Строка.Реквизит = "СтатьяОборотов" Тогда
			ИзменениеСтатьиОборотовТабличнойЧасти(ТекущиеДанные);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

// Процедура добавляет условное оформление для предопределенных аналитик
//  доступных только в БФ 3.1 для БП 3.0. 
//
&НаСервере
Процедура УстановитьУсловноеОформлениеТаблиц()

	ПоляТаблицы = ПоляТаблицы(ЭтотОбъект);
	Измерения = ПоляТаблицы.Измерения;	
	Для Каждого Поле Из Измерения Цикл
				
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БДДС" + Поле);
		
		ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,"",
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
			"Объект.БДДС." + Поле, ВидСравненияКомпоновкиДанных.НеРавно, 
			Новый ПолеКомпоновкиДанных("Объект.БДДС." + Поле + "_Старый"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ,
			"Объект.БДДС.РучнаяКорректировка", ВидСравненияКомпоновкиДанных.Равно, Ложь);
			
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.бит_ОсновнойЭлементСписка);
	КонецЦикла;

	Для каждого ГруппаПолей Из ПоляТаблицы Цикл
		Для каждого Поле Из ГруппаПолей.Значение Цикл
			ЭлементУО = УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БДДС" + Поле + "_Старый");
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.БДДС.РучнаяКорректировка", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		КонецЦикла; 		
	КонецЦикла; 
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыКомментарийРасчета");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЗависимыеОбороты.КомментарийРасчета", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Комментарий расчета'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыСумма");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЗависимыеОбороты.Сумма", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоляТаблицы(Форма)

	Измерения = Новый Массив(); 
	Измерения.Добавить("Период");
	Измерения.Добавить("ЦФО");
	Измерения.Добавить("СтатьяОборотов");
	
	Если Форма.ЭтоБП Тогда
		Измерения.Добавить("Контрагент");
		Измерения.Добавить("ДоговорКонтрагента");
		Измерения.Добавить("Проект");
		Измерения.Добавить("НоменклатурнаяГруппа");
		Измерения.Добавить("БанковскийСчет");
		КоличествоАналитик = 7;
	Иначе
		КоличествоАналитик = 12;
	КонецЕсли; 
	
	Для Индекс = 1 По КоличествоАналитик Цикл
		Измерения.Добавить("Аналитика_" + Индекс);
	КонецЦикла; 
	
	Ресурсы = Новый Массив(); 
	Ресурсы.Добавить("Количество");
	Ресурсы.Добавить("СуммаСценарий");
	Ресурсы.Добавить("СуммаРегл");
	Ресурсы.Добавить("СуммаУпр");
	Ресурсы.Добавить("Сумма");
	
	Реквизиты = Новый Массив(); 
	Реквизиты.Добавить("СтавкаНДС");
	Реквизиты.Добавить("Валюта");
	Реквизиты.Добавить("Комментарий");
	
	ПоляТаблицы = Новый Структура; 
	ПоляТаблицы.Вставить("Измерения", Измерения);
	ПоляТаблицы.Вставить("Ресурсы", Ресурсы);
	ПоляТаблицы.Вставить("Реквизиты", Реквизиты);
	
	Возврат ПоляТаблицы;
	
КонецФункции

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыИзмененияТаблицыДокумента()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Команда", 			 "бит_КорректировкаБюджета");
	ПараметрыФормы.Вставить("Объект", 			 Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти", "БДДС");
	ПараметрыФормы.Вставить("ТабличнаяЧасть",	 
		ПоместитьВоВременноеХранилище(Объект.БДДС.Выгрузить(), УникальныйИдентификатор));
		
	Возврат ПараметрыФормы;	
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти
