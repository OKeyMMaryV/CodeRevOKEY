#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных 

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения бюджетирования.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.
 
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли; 
	
	ДополнительныеСвойства.Вставить("Проведен", Проведен);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("ПроводитьПослеУтверждения", 
		бит_ОбщегоНазначенияПовтИсп.ПроводитьДокументыПослеУтверждения());
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьЗависимыеОбороты();
	КонецЕсли;
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
	// Заполним аналитику в шапке документа.
	бит_ОбщегоНазначения.ЗаполнитьАналитикуВШапкеДокумента(ЭтотОбъект, БДДС, Отказ);
	
	ПередЗаписьюВБП(Отказ);
	
	// Очистка неиспользуемых разрезов бюджетирования по статье оборотов.
	бит_Бюджетирование.ОчиститьНеИспользуемыеАналитикиСтатейОборотов(БДДС);
	бит_Бюджетирование.ОчиститьНеИспользуемыеАналитикиСтатейОборотов(ЗависимыеОбороты);
	
	Если ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ОтправленНаСогласование = Истина;
		Иначе
			ОтправленНаСогласование = Ложь;
			бит_Визирование.ОчиститьВсеВизыБезусловно(Ссылка)
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		Если ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
			// Если документ был проведен в системе ранее, без отправки на согласование,
			// при повторном проведении его движения стирать нельзя.
			Если НЕ Проведен ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				РежимПринятияКУчету = 1;
			КонецЕсли;
		Иначе
			РежимПринятияКУчету = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаПроведенияНачало(ЭтотОбъект, РежимПроведения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.бит_КорректировкаБюджета.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	// Проверим соответствие исторических данных и данных для сторнирования.
	Документы.бит_КорректировкаБюджета.ОбработатьПревышениеДанныхБюджетаДоИзменения(ПараметрыПроведения.ИсторическиеДанныеБюджета, 
		ПараметрыПроведения.Реквизиты, Отказ);

	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
	Документы.бит_КорректировкаБюджета.СформироватьДвиженияКонтрольныеЗначенияБюджетов(
		ПараметрыПроведения, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Документы.бит_КорректировкаБюджета.СформироватьДвиженияОборотыПоБюджетам(ПараметрыПроведения.ДанныеБюджета,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.бит_КорректировкаБюджета.СформироватьДвиженияОборотыПоБюджетам(ПараметрыПроведения.ЗависимыеОбороты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	Документы.бит_КорректировкаБюджета.СформироватьДвиженияБюджетирование(ПараметрыПроведения.ДанныеБюджета, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	Документы.бит_КорректировкаБюджета.СформироватьДвиженияБюджетирование(ПараметрыПроведения.ЗависимыеОбороты, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если НЕ Отказ Тогда
		Если НЕ ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
			// Заполним перечень виз.
			РежимОбновленияВиз = Константы.бит_РежимОбновленияПеречняВиз.Получить();
			Если РежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ ДополнительныеСвойства.Проведен Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЦФО", ЦФО);		
				бит_Визирование.ОбновитьПереченьВиз(Ссылка, Дата, СтруктураПараметров);
			КонецЕсли; 				
		КонецЕсли; 				
		// Установим статус.
		УстановитьСтатус(РежимЗаписиДокумента.Проведение);
	КонецЕсли; 
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаПроведенияЗавершение(ЭтотОбъект); 

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ); 
		
	Если НЕ Отказ Тогда
		// Очистим визы.
		Если НЕ ДополнительныеСвойства.ПроводитьПослеУтверждения Тогда
			бит_Визирование.ОчиститьВсеВизыБезусловно(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	Если НЕ Отказ Тогда
		СтатусНач = мТекущийСтатус;
		УстановитьСтатус(ДополнительныеСвойства.РежимЗаписи);		
		Если ДополнительныеСвойства.ПроводитьПослеУтверждения 
			И (СтатусНач = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Черновик ИЛИ НЕ ЗначениеЗаполнено(СтатусНач)) 
			И ОтправленНаСогласование Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЦФО",ЦФО);		
			бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИменаСумм = Новый Массив;
	ИменаСумм.Добавить("СуммаСценарий_Старый");
	ИменаСумм.Добавить("СуммаРегл_Старый");
	ИменаСумм.Добавить("СуммаУпр_Старый");
	ИменаСумм.Добавить("Сумма_Старый");
	ИменаСумм.Добавить("СуммаСценарий");
	ИменаСумм.Добавить("СуммаРегл");
	ИменаСумм.Добавить("СуммаУпр");
	ИменаСумм.Добавить("Сумма");
	
	МетаДокумент = Метаданные.Документы.бит_КорректировкаБюджета;
	МетаРеквизитыБДДС = МетаДокумент.ТабличныеЧасти.БДДС.Реквизиты;
	
	Для каждого СтрокаТаблицы Из БДДС Цикл
		
		СуммаСтарых = СтрокаТаблицы.СуммаСценарий_Старый 
					+ СтрокаТаблицы.СуммаРегл_Старый 
					+ СтрокаТаблицы.СуммаУпр_Старый 
					+ СтрокаТаблицы.Сумма_Старый;
					
		СуммаНовых = СтрокаТаблицы.СуммаСценарий 
					+ СтрокаТаблицы.СуммаРегл 
					+ СтрокаТаблицы.СуммаУпр 
					+ СтрокаТаблицы.Сумма;
		
		Для Каждого ТекИмяСуммы Из ИменаСумм Цикл
			
			// Если все суммовые показатели равны 0, то пропускаем проверку.
			Если Найти(ТекИмяСуммы, "_Старый") = 0
				И СуммаНовых = 0 Тогда
				Продолжить;
			ИначеЕсли СуммаСтарых = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы[ТекИмяСуммы] = 0 Тогда
				
				Поле = СтрШаблон("БДДС[%1].%2", Формат(СтрокаТаблицы.НомерСтроки - 1, "Л=ru_RU; ЧГ="), ТекИмяСуммы);
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
									"КОЛОНКА",, МетаРеквизитыБДДС[ТекИмяСуммы], СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Данные бюджета'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла; 	
	КонецЦикла;
	
	Для каждого СтрокаТаблицы ИЗ ЗависимыеОбороты Цикл
		Если СтрокаТаблицы.Сумма = 0 Тогда
			
			Поле = СтрШаблон("ЗависимыеОбороты[%1].Сумма", Формат(СтрокаТаблицы.НомерСтроки - 1, "Л=ru_RU; ЧГ="));
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
									"КОЛОНКА",, НСтр("ru = 'Сумма'"), СтрокаТаблицы.НомерСтроки, НСтр("ru = 'Зависимые обороты'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// Обязательные измерения из разряда дополнительных.
	Для каждого КлючИЗначение Из мНастройкиИзмерений Цикл
		ИмяИзмерения = "БДДС." + КлючИЗначение.Ключ;
		Настройка    = КлючИЗначение.Значение;
		
		Если Настройка.Обязательное Тогда  			
			ПроверяемыеРеквизиты.Добавить(ИмяИзмерения);		
		КонецЕсли; 
	КонецЦикла; 
	
	бит_Бюджетирование.ПроверитьОбязательныеРазрезыСтатейОборотов(ЭтотОбъект, "БДДС", Отказ);
	бит_Бюджетирование.ПроверитьОбязательныеРазрезыСтатейОборотов(ЭтотОбъект, "ЗависимыеОбороты", Отказ);
	
	// Установка настроек обязательности реквизитов
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);	
	КонецЕсли; 
	
	// Заполнение шапки.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, Пользователи.ТекущийПользователь(), Неопределено);
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		ИзменениеСценарияОбъект(); 
	КонецЕсли;
	
	// По умолчанию режим зависимых оборотов "Автоматический".
	РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.НеФормировать;
	
	Если бит_ОбщегоНазначенияПовтИсп.ПроводитьДокументыПослеУтверждения() Тогда
		РежимПринятияКУчету = 1;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	СверхБюджета 			 = Ложь;
	СторнироватьСверхБюджета = Ложь;
	
	// Сбрасываем признак начала согласования.
	ОтправленНаСогласование = Ложь;
	Ответственный = Пользователи.ТекущийПользователь();
	Если бит_ОбщегоНазначенияПовтИсп.ПроводитьДокументыПослеУтверждения() Тогда
		РежимПринятияКУчету = 1;
	Иначе
		РежимПринятияКУчету = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс 

// Процедура устанавливает статус документа.
// 
// Параметры:
//  РежимЗаписи - РежимЗаписиДокумента.
// 
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено) Экспорт
	
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект, Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	АлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;	
	
	Если НЕ ЗначениеЗаполнено(АлгоритмИзмененияСтатуса) Тогда	
	
		Если вхРежимЗаписи = Неопределено Тогда
		     РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
		     РежимЗаписи = вхРежимЗаписи;
		КонецЕсли;
		
		// Вычислим переменные, необходимые для установки статуса.
	    ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);		
		
		// Определим статус.		
	    Статус = ОпределитьСтатус(мТекущийСтатус,ВсеВизыПолучены, ЕстьОтклонено,РежимЗаписи);
		
		// Если статус изменился - запишем его.
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		, Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		, Статус
																		, мТекущийСтатус
																		, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		, ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				мТекущийСтатус 		  = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
			КонецЕсли; 	
			
		КонецЕсли;
	
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
			
        РежимСообщений = ?(КомментироватьВыполнение, "Все", "Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект", ЭтотОбъект);
		
		бит_уп_Сервер.ВыполнитьАлгоритм(АлгоритмИзмененияСтатуса, СтруктураКонтекст, РежимСообщений);
		
	КонецЕсли;   	
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыОбъект() Экспорт
	
	СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ВалютаДокумента, Дата);
	КурсДокумента      = СтрКурса.Курс;
	КратностьДокумента = СтрКурса.Кратность;
	
КонецПроцедуры

// Процедура обрабатывает изменение сценария в шапке документа.
// 
// Параметры:
//  ОчищатьТч - Булево (По умолчанию = Ложь).
// 
Процедура ИзменениеСценарияОбъект(ОчищатьТч = Ложь)  Экспорт

	Если ОчищатьТч Тогда
		БДДС.Очистить();
	КонецЕсли;
	
	ВалютаДокумента = Сценарий.Валюта;
		
	ИзменениеВалютыОбъект();
	
КонецПроцедуры

// Процедура заполняет табличную часть ЗависимыеОбороты.
// 
// Параметры:
//  Нет.
// 
Процедура ЗаполнитьЗависимыеОбороты() Экспорт

	УстановитьПривилегированныйРежим(Истина);	
	
	ОчиститьЗависимыеОбороты();
	
	Если НЕ ЗначениеЗаполнено(РежимЗависимыхОборотов)
		ИЛИ РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.НеФормировать Тогда
		// Не формируем зависимые обороты.
		Возврат;
	КонецЕсли;
	
	РазмерностьЕдиницы = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы);
	Измерения 		   = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","имя");
	
	МаксПериод = бит_Бюджетирование.ПолучитьМаксПериод(БДДС);		
	НастройкиЗависимыхОборотов = бит_Бюджетирование.ПолучитьНастройкиЗависимыхОборотов(Сценарий, МаксПериод);		
	
	Для каждого СтрокаТаблицы Из БДДС Цикл
		
		// Запомним сумму в единице документа. 
		СуммаВЕдиницеДокумента = СтрокаТаблицы.Сумма;
		
		// Расчитаем сумму в указанных единицах измерения сумм.
		СтрокаТаблицы.Сумма = бит_ОбщегоНазначения.ПересчитатьИзРазмерностиВРазмерность(
								СуммаВЕдиницеДокумента,РазмерностьЕдиницы,1);
								
		ПараметрыФормирования = бит_Бюджетирование.НовыеПараметрыФормированияЗависмыхОборотовПоСтроке();
		ПараметрыФормирования.ДатаЗаполнения 			= СтрокаТаблицы.Период;
		ПараметрыФормирования.ТекущийОбъект 			= ЭтотОбъект;
		ПараметрыФормирования.СтрокаТабличнойЧасти		= СтрокаТаблицы;
		ПараметрыФормирования.ИмяТабличнойЧастиИсточник = "БДДС";
		ПараметрыФормирования.ИмяТабличнойЧастиПриемник = "ЗависимыеОбороты";
		ПараметрыФормирования.ИзмеренияБюджетирования	= Измерения;
		ПараметрыФормирования.вхНастройкиЗависимых		= НастройкиЗависимыхОборотов;
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоСтроке(ПараметрыФормирования);
																 
		// После формирования зависимых оборотов по строке
		// необходимо возвратить сумму в единице документа.
		СтрокаТаблицы.Сумма = СуммаВЕдиницеДокумента;
	КонецЦикла; 
	
	Если СторнироватьЗависимыеОбороты Тогда
		СторнироватьРанееСозданныеЗависимыеОбороты(Измерения);
	КонецЕсли; 														 
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

// Процедура очищает табличную часть ЗависимыеОбороты.
// 
// Параметры:
//  Нет.
// 
Процедура ОчиститьЗависимыеОбороты() Экспорт

	ЗависимыеОбороты.Очистить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьСтатус(НачальныйСтатус, ВсеВизыПолучены, ЕстьОтклонено, вхРежимЗаписи) 
	
	РезСтатус = НачальныйСтатус;
	
	ПроводитьПослеУтверждения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства,
									"ПроводитьПослеУтверждения",
									бит_ОбщегоНазначенияПовтИсп.ПроводитьДокументыПослеУтверждения());
	
	Если ПроводитьПослеУтверждения Тогда
		
		// Алгоритм изменения статусов для режима "ПроводитьДокументыПослеУтверждения".
		Если ОтправленНаСогласование Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Рабочая;
		Иначе
			РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Черновик;
		КонецЕсли; 
		
	Иначе	
		
		// Алгоритм изменения статусов для обычного режима.
		Если вхРежимЗаписи = РежимЗаписиДокумента.Проведение 
			ИЛИ (вхРежимЗаписи = РежимЗаписиДокумента.Запись И Проведен) Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Рабочая;
		Иначе
			РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Черновик;
		КонецЕсли; 
		
	КонецЕсли; 
    
    Если РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Рабочая 
        ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Утверждена
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Отклонена Тогда
		
		Если ЕстьОтклонено Тогда
			
			РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Отклонена;
			
		Иначе	
			
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Утверждена;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Рабочая;
			КонецЕсли; 
			
		КонецЕсли;
        
    КонецЕсли; 
    
    Возврат РезСтатус;
    
КонецФункции

// Процедура сторнирует ранее созданные зависимые обороты при нажатии флага СторнироватьЗависимыеОбороты. 
// 
Процедура СторнироватьРанееСозданныеЗависимыеОбороты(Измерения)

	ТаблицаКолонок = БДДС.Выгрузить();
	
	НеобходимыеКолонки = "";
	Для каждого Колон Из ТаблицаКолонок.Колонки Цикл
		Если Колон.Имя = "НомерСтроки" 
			ИЛИ Найти(Колон.Имя, "_Старый")>0 Тогда
			НеобходимыеКолонки = НеобходимыеКолонки + Колон.Имя + ",";
		КонецЕсли; 
	КонецЦикла; 
	
	ТЗ = БДДС.Выгрузить(,НеобходимыеКолонки);
	Для каждого Колонка Из ТЗ.Колонки Цикл
		Если Колонка.Имя = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Найти(Колонка.Имя, "_Старый")>0 Тогда
			Колонка.Имя = СтрЗаменить(Колонка.Имя, "_Старый", "");  
		КонецЕсли; 
	КонецЦикла; 
	
	// Копия завсисмых оборотов, сформированных по "новым" строкам.
	ЗависимыеОборотыПослеИзменения = ЗависимыеОбороты.Выгрузить();
	ЗависимыеОбороты.Очистить();
	
	Для каждого СтрокаТаблицы Из ТЗ Цикл
		
		НастройкиЗависимыхОборотов = бит_Бюджетирование.ПолучитьНастройкиЗависимыхОборотов(Сценарий, 
										СтрокаТаблицы.Период);		
		
		СтрокаТаблицы.Сумма 		= - СтрокаТаблицы.Сумма;
		СтрокаТаблицы.СуммаРегл 	= - СтрокаТаблицы.СуммаРегл;
		СтрокаТаблицы.СуммаСценарий = - СтрокаТаблицы.СуммаСценарий;
		СтрокаТаблицы.СуммаУпр 		= - СтрокаТаблицы.СуммаУпр;
		СтрокаТаблицы.Количество 	= - СтрокаТаблицы.Количество;
		
		ПараметрыФормирования = бит_Бюджетирование.НовыеПараметрыФормированияЗависмыхОборотовПоСтроке();
		ПараметрыФормирования.ДатаЗаполнения 			= СтрокаТаблицы.Период;
		ПараметрыФормирования.ТекущийОбъект 			= ЭтотОбъект;
		ПараметрыФормирования.СтрокаТабличнойЧасти		= СтрокаТаблицы;
		ПараметрыФормирования.ИмяТабличнойЧастиИсточник = "БДДС";
		ПараметрыФормирования.ИмяТабличнойЧастиПриемник = "ЗависимыеОбороты";
		ПараметрыФормирования.ИзмеренияБюджетирования	= Измерения;
		ПараметрыФормирования.вхНастройкиЗависимых		= НастройкиЗависимыхОборотов;
		
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоСтроке(ПараметрыФормирования);
	КонецЦикла; 

	// Маркировка "старых" зависимых оборотов.
	Для каждого СтрокаТаблицы Из ЗависимыеОбороты Цикл
		СтрокаТаблицы.Сторно = Истина;
	КонецЦикла; 
	
	// Восстановление "новых" зависимых оборотов из копии.
	Для каждого СтрокаТаблицы Из ЗависимыеОборотыПослеИзменения Цикл
		ЗаполнитьЗначенияСвойств(ЗависимыеОбороты.Добавить(), СтрокаТаблицы);	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПередЗаписьюВБП(Отказ)

	Если РольДоступна("бит_рлс_ФинансистЦФО") Тогда
		
		// Проверка на наличие недопустимых ЦФО.
		Заголовок = НСтр("ru = 'Проверка прав доступа:'");
		ПроверочнаяТаблица = БДДС.Выгрузить();
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект, ПроверочнаяТаблица, НСтр("ru = 'Данные бюджета'"), Заголовок, Отказ);
															  
		ПроверочнаяТаблица.Колонки.Удалить("ЦФО");
		ТекКолонка = ПроверочнаяТаблица.Колонки.ЦФО_Старый;
		ТекКолонка.Имя = "ЦФО";
	
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект, ПроверочнаяТаблица, НСтр("ru = 'Данные бюджета (старый)'"), Заголовок, Отказ);
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект,ЗависимыеОбороты,НСтр("ru = 'Зависимые обороты'"),Заголовок,Отказ);	
		
	Иначе
		
		// Проверка на наличие недопустимых пар ЦФО/СтатьяОборотов.
		Заголовок = НСтр("ru = 'Проверка прав доступа:'");
		ПроверочнаяТаблица = БДДС.Выгрузить();
		
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект, ПроверочнаяТаблица, 
			НСтр("ru = 'Данные бюджета'"), Заголовок, Отказ);
		
		ПроверочнаяТаблица.Колонки.Удалить("ЦФО");
		ПроверочнаяТаблица.Колонки.Удалить("СтатьяОборотов");
		ТекКолонка = ПроверочнаяТаблица.Колонки.ЦФО_Старый;
		ТекКолонка.Имя = "ЦФО";
		ТекКолонка = ПроверочнаяТаблица.Колонки.СтатьяОборотов_Старый;
		ТекКолонка.Имя = "СтатьяОборотов";
		
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект, ПроверочнаяТаблица, 
			НСтр("ru = 'Данные бюджета (старый)'"), Заголовок, Отказ);
		
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект,ЗависимыеОбороты, НСтр("ru = 'Зависимые обороты'") ,Заголовок,Отказ);														  
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти 

#Область Инициализация

// Получаем статус и дату изменения статуса для документа.
РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);

мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

#КонецОбласти

#КонецЕсли
