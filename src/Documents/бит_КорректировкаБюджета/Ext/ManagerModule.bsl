#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Функция подготавливает параметры проведения.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.бит_НазначениеСоответствияАналитик - ссылка на документ.
//  Отказ          - Булево - признак обнаружения ошибки и отказа от дальнейших действий.
//
// Возвращаемое значение:
//  Структура - структура параметров проведения.
//
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура(); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Сценарий КАК Сценарий,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.СторнироватьСверхБюджета КАК СторнироватьСверхБюджета,
	|	Реквизиты.СторнироватьЗависимыеОбороты КАК СторнироватьЗависимыеОбороты,
	|	Реквизиты.СверхБюджета КАК СверхБюджета,
	|	Реквизиты.Сценарий.ИспользоватьКурсыСценария КАК ИспользоватьКурсыСценария,
	|	Реквизиты.Сценарий.Валюта КАК ВалютаСценария,
	|	ВЫБОР
	|		КОГДА Реквизиты.Сценарий.ПериодичностьКонтроля = ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.Месяц)
	|		ИНАЧЕ Реквизиты.Сценарий.ПериодичностьКонтроля
	|	КОНЕЦ КАК ПериодичностьКонтроля,
	|	Реквизиты.Сценарий.бит_Периодичность КАК ПериодичностьПланирования,
	|	Реквизиты.РежимПринятияКУчету КАК РежимПринятияКУчету
	|ИЗ
	|	Документ.бит_КорректировкаБюджета КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить().Выгрузить();
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	
	Если НЕ бит_ОбщегоНазначения.ВалютаУпрУчетаУстановлена(Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;

	НомераТаблиц = Новый Структура(); 
	ТекстЗапроса = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
				 + ТекстЗапросаПериодыВЗависимыхОборотах(НомераТаблиц)
				 + ТекстЗапросаТаблицыДокумента(НомераТаблиц)
				 + ТекстЗапросаТаблицыКонтрольныеЗначения(НомераТаблиц);
				 
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Ссылка", 				 ДокументСсылка);
	Запрос.УстановитьПараметр("СинонимБДДС", 			 НСтр("ru = 'Данные бюджета'"));
	Запрос.УстановитьПараметр("СинонимЗависимыеОбороты", НСтр("ru = 'Зависимые обороты'"));
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла; 	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	ПараметрыПроведения.Вставить("ИсторическиеДанныеБюджета", ПараметрыПроведения.КонтрольныеЗначенияСторно.Скопировать());
	
	ВыполнитьВалютныеПеререасчеты(ПараметрыПроведения.Зависимыеобороты, 
		ПараметрыПроведения.ПериодыВЗависимыхОборотах, Реквизиты);
		
	КонтрольныеЗначенияСторно = ПараметрыПроведения.КонтрольныеЗначенияСторно;
	КонтрольныеЗначения		  = ПараметрыПроведения.КонтрольныеЗначения;
	
	// Сортировка таблицы "Зависимые обороты".
	Индекс = ПараметрыПроведения.ЗависимыеОбороты.Количество() - 1;
	Пока Индекс >= 0 Цикл
		СтрокаТаблицы = ПараметрыПроведения.ЗависимыеОбороты[Индекс];
		Если СтрокаТаблицы.Сторно Тогда
			ЗаполнитьЗначенияСвойств(КонтрольныеЗначенияСторно.Добавить(), СтрокаТаблицы);
		Иначе
			ЗаполнитьЗначенияСвойств(КонтрольныеЗначения.Добавить(), СтрокаТаблицы);
		КонецЕсли; 
		Индекс = Индекс - 1;
	КонецЦикла; 
	
	ПроводитьПослеУтверждения = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения");
	Если ПроводитьПослеУтверждения И Реквизиты.РежимПринятияКУчету = 1 Тогда
		ПараметрыСтатуса = бит_Визирование.ПолучитьСтатусОбъекта(ДокументСсылка);
		ТекущийСтатус = ПараметрыСтатуса.Статус;
		Если ТекущийСтатус <> Справочники.бит_СтатусыОбъектов.КорректировкаБюджета_Утверждена Тогда
			ПараметрыПроведения.ДанныеБюджета.Очистить();
			ПараметрыПроведения.ЗависимыеОбороты.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции 

// Формирует движения по регистру накопления: Обороты по бюджетам (БИТ).
//
// Параметры:
//  ДанныеБюджета	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияОборотыПоБюджетам(ДанныеБюджета, Реквизиты, Движения, Отказ) Экспорт 

	Для каждого СтрокаТаблицы Из ДанныеБюджета Цикл
		Движение = Движения.бит_ОборотыПоБюджетам.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
	КонецЦикла; 

	Движения.бит_ОборотыПоБюджетам.Записывать = Истина;
	
КонецПроцедуры
 
// Формирует движения по регистру накопления: Контрольные значения бюджетов (БИТ).
//
// Параметры:
//  ТаблицыДляКонтроля	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты			 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения			 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ				 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияКонтрольныеЗначенияБюджетов(ТаблицыДляКонтроля, Реквизиты, Движения, Отказ) Экспорт
	
	ИсключаемыеПоля = Новый Массив;
	ИсключаемыеПоля.Добавить("Сценарий");
	ИсключаемыеПоля.Добавить("СтатьяОборотов");

	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	ИзмеренияКонтроля  = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(ИсключаемыеПоля,,,НастройкиИзмерений);
	
	ПараметрыКонтроля = Новый Структура;
	ПараметрыКонтроля.Вставить("ИзмеренияКонтроля",	  ИзмеренияКонтроля);
	ПараметрыКонтроля.Вставить("Сценарий" ,			  Реквизиты.Сценарий);
	ПараметрыКонтроля.Вставить("СверхБюджета",		  Реквизиты.СверхБюджета);
	ПараметрыКонтроля.Вставить("РежимКонтроля",		  "Бюджет");
	ПараметрыКонтроля.Вставить("Объект",			  Реквизиты.Регистратор);
	ПараметрыКонтроля.Вставить("КонтролироватьБюджет",Ложь);
		
	// Формирование сторнирующих записей контрольных значений.
    Результат = ПодготовитьТаблицуКонтрольныхЗначений(ТаблицыДляКонтроля.КонтрольныеЗначенияСторно, ИзмеренияКонтроля, Реквизиты);
	КонтрольныеЗначения = Движения.бит_КонтрольныеЗначенияБюджетов;    

	ПараметрыКонтроля.КонтролироватьБюджет = Ложь;
	бит_КонтрольПоБюджету.ОбработатьРезультатКонтроля(Результат, КонтрольныеЗначения, ПараметрыКонтроля, Отказ, "");
	
	Для каждого СтрокаТаблицы Из КонтрольныеЗначения Цикл
		СтрокаТаблицы.СценарийКонтролируемый = Реквизиты.Сценарий;
	КонецЦикла; 
	КонтрольныеЗначения.Записывать = Истина;
	КонтрольныеЗначения.Записать();
	
	// Формирование и контроль новых записей контрольных значений.
	Результат = ПодготовитьТаблицуКонтрольныхЗначений(ТаблицыДляКонтроля.КонтрольныеЗначения, ИзмеренияКонтроля, Реквизиты);
	КонтрольныеЗначения = Движения.бит_КонтрольныеЗначенияБюджетов;    
	
	ПараметрыКонтроля.КонтролироватьБюджет = Истина;
	бит_КонтрольПоБюджету.ОбработатьРезультатКонтроля(Результат, КонтрольныеЗначения, ПараметрыКонтроля, Отказ, "");
	Для каждого СтрокаТаблицы Из КонтрольныеЗначения Цикл
		СтрокаТаблицы.СценарийКонтролируемый = Реквизиты.Сценарий;
	КонецЦикла; 
	КонтрольныеЗначения.Записывать = Истина;
	
КонецПроцедуры

// Формирует движения по регистру бухгалтерии: Журнал проводок (бюджетирование).
//
// Параметры:
//  ДанныеБюджета	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияБюджетирование(ДанныеБюджета, Реквизиты, Движения, Отказ) Экспорт 
	
	Если ДанныеБюджета.Количество() > 0 Тогда
		бит_Бюджетирование.СформироватьПроводкиБюджетирования(ДанныеБюджета,
			Движения.бит_Бюджетирование, Ложь);
	КонецЕсли;
	Движения.бит_Бюджетирование.Записывать = Истина;
	
КонецПроцедуры

// Проверка превышений данных бюджета до изменений.
//
// Параметры:
//  ДанныеБюджета	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Отказ			 - Булево			 - флаг отказа от проведения.
//
Процедура ОбработатьПревышениеДанныхБюджетаДоИзменения(ДанныеБюджета, Реквизиты, Отказ) Экспорт
	
	НакопленныеОбороты = НакопленныеОборотыДоИзменения(ДанныеБюджета, Реквизиты);

	// Реквизиты, которые не будут участвовать в отборе.
	Исключения = Новый Массив;
	Исключения.Добавить("Сумма");
	Исключения.Добавить("СуммаРегл");
	Исключения.Добавить("СуммаУпр");
	Исключения.Добавить("СуммаСценарий");
	Исключения.Добавить("Количество");
	Исключения.Добавить("КоличествоОборот");
	Исключения.Добавить("СуммаОборот");
	Исключения.Добавить("НомерСтроки");
	Исключения.Добавить("СуммаРеглОборот");
	Исключения.Добавить("СуммаУпрОборот");
	Исключения.Добавить("СуммаСценарийОборот");

	// Имена для отбора строки по бюджету.
	ЭлементыОтбора = Новый Массив;
	Для каждого Колонка Из НакопленныеОбороты.Колонки Цикл
		Если Исключения.Найти(Колонка.Имя) = Неопределено Тогда   		
			ЭлементыОтбора.Добавить(Колонка.Имя);		
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из ДанныеБюджета Цикл
		
		Отбор = Новый Структура;
		Для каждого Элемент Из ЭлементыОтбора Цикл
			Отбор.Вставить(Элемент, СтрокаТаблицы[Элемент]); 
		КонецЦикла; 
		
		Шаблон = "%1[%2].%3"; // Прим.: "БДДС[0].Сумма_Старый".
		Если СтрокаТаблицы.ИмяСписка = "БДДС" Тогда
			ПолеСумма = СтрШаблон(Шаблон, СтрокаТаблицы.ИмяСписка,Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="), "Сумма_Старый");
			ПолеКолВо = СтрШаблон(Шаблон, СтрокаТаблицы.ИмяСписка, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="), "Количество_Старый");
		Иначе	
			ПолеСумма = СтрШаблон(Шаблон, СтрокаТаблицы.ИмяСписка,Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="), "Сумма");
			ПолеКолВо = СтрШаблон(Шаблон, СтрокаТаблицы.ИмяСписка, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="), "Количество");
		КонецЕсли; 

		НайденныеСтроки = НакопленныеОбороты.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Остатки = НайденныеСтроки[0];
			// Ресурсы в таблице для контроля (сторно) - отрицательные!!!
			КонтрольСумма = - СтрокаТаблицы.Сумма;
			КонтрольКолВо = - СтрокаТаблицы.Количество;
			
			Если КонтрольСумма > Остатки.Сумма Тогда
				Если Реквизиты.СторнироватьСверхБюджета Тогда
					ТекстСообщения = СтрШаблон(Нстр("ru = 'В строке № %1 списка ""%2"" сторнирована сумма сверх бюджета.'"), 
										СтрокаТаблицы.НомерСтроки, СтрокаТаблицы.ПредставлениеСписка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, ПолеСумма, "Объект");
				Иначе 
					Было 	  = Остатки.СуммаОборот;
					Списано   = Остатки.СуммаОборот - Остатки.Сумма;
					НеХватает = КонтрольСумма - Остатки.Сумма;
					ТекстСообщения = СтрШаблон(Нстр("ru = 'В строке № %1 списка ""%6"" ""Сумма (до изменения)"" превышает сумму по бюджету:" + " "
					 					+ "было %2, списано %3, не хватает %4 (%5).'"), СтрокаТаблицы.НомерСтроки, Было, 
										Списано, НеХватает, СтрокаТаблицы.Валюта, СтрокаТаблицы.ПредставлениеСписка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, ПолеСумма, "Объект",Отказ);
				КонецЕсли; 
			КонецЕсли;			
			
			Если КонтрольКолВо > Остатки.Количество Тогда
				Если Реквизиты.СторнироватьСверхБюджета Тогда
					ТекстСообщения = СтрШаблон(Нстр("ru = 'В строке № %1 списка ""%2"" сторнировано количество сверх бюджета.'"), 
										СтрокаТаблицы.НомерСтроки, СтрокаТаблицы.ПредставлениеСписка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, ПолеКолВо, "Объект");
				Иначе 
					Было 	  = Остатки.КоличествоОборот;
					Списано   = Остатки.КоличествоОборот - Остатки.Количество;
					НеХватает = КонтрольКолВо - Остатки.Количество;
					
					ТекстСообщения = СтрШаблон(Нстр("ru = 'В строке № %1 списка ""%5"" ""Количество (до изменения)"" превышает количество по бюджету:" + " "
										+ "было %2, списано %3, не хватает %4.'"), СтрокаТаблицы.НомерСтроки, Было, Списано, НеХватает, 
											СтрокаТаблицы.ПредставлениеСписка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, ПолеКолВо, "Объект",Отказ);
				КонецЕсли; 
			КонецЕсли;
			
			// Уменьшаем остаток.
			Остатки.Сумма = Остатки.Сумма - КонтрольСумма;
			Остатки.Количество = Остатки.Количество - КонтрольКолВо;
			
			// Корректировка данных строки документа для целей контроля по бюджету.
			СтрокаТаблицы.Сумма 		= - Мин(- СтрокаТаблицы.Сумма, Остатки.СуммаОборот);
			СтрокаТаблицы.СуммаУпр 		= - Мин(- СтрокаТаблицы.СуммаУпр, Остатки.СуммаУпрОборот);
			СтрокаТаблицы.СуммаРегл 	= - Мин(- СтрокаТаблицы.СуммаРегл, Остатки.СуммаРеглОборот);
			СтрокаТаблицы.СуммаСценарий = - Мин(- СтрокаТаблицы.СуммаСценарий, Остатки.СуммаСценарийОборот);
			СтрокаТаблицы.Количество	= - Мин(- СтрокаТаблицы.Количество, Остатки.КоличествоОборот);
			
		Иначе	
			Если Реквизиты.СторнироватьСверхБюджета Тогда
				ТекстСообщения = СтрШаблон(Нстр("ru = 'В строке № %1 списка ""%2"" сторнирована сумма сверх бюджета.'"), 
									СтрокаТаблицы.НомерСтроки, СтрокаТаблицы.ПредставлениеСписка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, ПолеСумма, "Объект");
			Иначе 
				ТекстСообщения = СтрШаблон(Нстр("ru = 'По строке № %1 списка ""%2"" данные в бюджете не обнаружены.'"), 
									СтрокаТаблицы.НомерСтроки, СтрокаТаблицы.ПредставлениеСписка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, ПолеСумма, "Объект",Отказ);
			КонецЕсли; 
			// Корректировка данных строки документа для целей контроля по бюджету.
			СтрокаТаблицы.Сумма 		= 0;
			СтрокаТаблицы.СуммаУпр 		= 0;
			СтрокаТаблицы.СуммаРегл 	= 0;
			СтрокаТаблицы.СуммаСценарий = 0;
			СтрокаТаблицы.Количество	= 0;

		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаДанныеБюджета",    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаЗависимыеобороты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""БДДС"" КАК ИмяСписка,
	|	&СинонимБДДС КАК ПредставлениеСписка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период_Старый КАК Период,
	|	Таблица.Ссылка.Сценарий КАК Сценарий,
	|	Таблица.ЦФО_Старый КАК ЦФО,
	|	Таблица.СтатьяОборотов_Старый КАК СтатьяОборотов,
	|	-Таблица.Количество_Старый КАК Количество,
	|	Таблица.СтавкаНДС_Старый КАК СтавкаНДС,
	|	-Таблица.СуммаСценарий_Старый КАК СуммаСценарий,
	|	-Таблица.СуммаРегл_Старый КАК СуммаРегл,
	|	-Таблица.СуммаУпр_Старый КАК СуммаУпр,
	|	-Таблица.Сумма_Старый КАК Сумма,
	|	Таблица.Валюта_Старый КАК Валюта,
	|	Таблица.Комментарий_Старый КАК Комментарий,
	|	Таблица.СтатьяОборотов_Старый.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	ИСТИНА КАК Сторно,
	|	Таблица.Аналитика_1_Старый КАК Аналитика_1,
	|	Таблица.Аналитика_2_Старый КАК Аналитика_2,
	|	Таблица.Аналитика_3_Старый КАК Аналитика_3,
	|	Таблица.Аналитика_4_Старый КАК Аналитика_4,
	|	Таблица.Аналитика_5_Старый КАК Аналитика_5,
	|	Таблица.Аналитика_6_Старый КАК Аналитика_6,
	|	Таблица.Аналитика_7_Старый КАК Аналитика_7,
	|	Таблица.Контрагент_Старый КАК Контрагент,
	|	Таблица.ДоговорКонтрагента_Старый КАК ДоговорКонтрагента,
	|	Таблица.Проект_Старый КАК Проект,
	|	Таблица.НоменклатурнаяГруппа_Старый КАК НоменклатурнаяГруппа,
	|	Таблица.БанковскийСчет_Старый КАК БанковскийСчет
	|ПОМЕСТИТЬ ТаблицаДанныеБюджета
	|ИЗ
	|	Документ.бит_КорректировкаБюджета.БДДС КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И НЕ Таблица.РучнаяКорректировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""БДДС"",
	|	&СинонимБДДС,
	|	Таблица.НомерСтроки,
	|	Таблица.Период,
	|	Таблица.Ссылка.Сценарий,
	|	Таблица.ЦФО,
	|	Таблица.СтатьяОборотов,
	|	Таблица.Количество,
	|	Таблица.СтавкаНДС,
	|	Таблица.СуммаСценарий,
	|	Таблица.СуммаРегл,
	|	Таблица.СуммаУпр,
	|	Таблица.Сумма,
	|	Таблица.Валюта,
	|	Таблица.Комментарий,
	|	Таблица.СтатьяОборотов.ЭтоКоэффициент,
	|	ЛОЖЬ,
	|	Таблица.Аналитика_1,
	|	Таблица.Аналитика_2,
	|	Таблица.Аналитика_3,
	|	Таблица.Аналитика_4,
	|	Таблица.Аналитика_5,
	|	Таблица.Аналитика_6,
	|	Таблица.Аналитика_7,
	|	Таблица.Контрагент,
	|	Таблица.ДоговорКонтрагента,
	|	Таблица.Проект,
	|	Таблица.НоменклатурнаяГруппа,
	|	Таблица.БанковскийСчет
	|ИЗ
	|	Документ.бит_КорректировкаБюджета.БДДС КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ЗависимыеОбороты"" КАК ИмяСписка,
	|	&СинонимЗависимыеОбороты КАК ПредставлениеСписка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Ссылка.Сценарий КАК Сценарий,
	|	Таблица.ЦФО КАК ЦФО,
	|	Таблица.СтатьяОборотов КАК СтатьяОборотов,
	|	Таблица.Количество КАК Количество,
	|	Таблица.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.Сумма КАК Сумма,
	|	0 КАК СуммаСценарий,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	"""" КАК Комментарий,
	|	Таблица.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	Таблица.Ссылка.ВалютаДокумента КАК Валюта,
	|	Таблица.Сторно КАК Сторно,
	|	Таблица.Аналитика_1 КАК Аналитика_1,
	|	Таблица.Аналитика_2 КАК Аналитика_2,
	|	Таблица.Аналитика_3 КАК Аналитика_3,
	|	Таблица.Аналитика_4 КАК Аналитика_4,
	|	Таблица.Аналитика_5 КАК Аналитика_5,
	|	Таблица.Аналитика_6 КАК Аналитика_6,
	|	Таблица.Аналитика_7 КАК Аналитика_7,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Таблица.Проект КАК Проект,
	|	Таблица.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Таблица.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ТаблицаЗависимыеОбороты
	|ИЗ
	|	Документ.бит_КорректировкаБюджета.ЗависимыеОбороты КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПериодыВЗависимыхОборотах(НомераТаблиц)

	НомераТаблиц.Вставить("ПериодыВЗависимыхОборотах",  НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Период КАК Период
	|ИЗ
	|	ТаблицаЗависимыеОбороты КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ДанныеБюджета", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗависимыеОбороты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ИмяСписка КАК ИмяСписка,
	|	Таблица.ПредставлениеСписка КАК ПредставлениеСписка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Сценарий КАК Сценарий,
	|	Таблица.ЦФО КАК ЦФО,
	|	Таблица.СтатьяОборотов КАК СтатьяОборотов,
	|	Таблица.Количество КАК Количество,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаСценарий КАК СуммаСценарий,
	|	Таблица.СуммаРегл КАК СуммаРегл,
	|	Таблица.СуммаУпр КАК СуммаУпр,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.Валюта КАК Валюта,
	|	Таблица.Комментарий КАК Комментарий,
	|	Таблица.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	Таблица.Сторно КАК Сторно,
	|	Таблица.Аналитика_1 КАК Аналитика_1,
	|	Таблица.Аналитика_2 КАК Аналитика_2,
	|	Таблица.Аналитика_3 КАК Аналитика_3,
	|	Таблица.Аналитика_4 КАК Аналитика_4,
	|	Таблица.Аналитика_5 КАК Аналитика_5,
	|	Таблица.Аналитика_6 КАК Аналитика_6,
	|	Таблица.Аналитика_7 КАК Аналитика_7,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Таблица.Проект КАК Проект,
	|	Таблица.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Таблица.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	ТаблицаДанныеБюджета КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ИмяСписка КАК ИмяСписка,
	|	Таблица.ПредставлениеСписка КАК ПредставлениеСписка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Сценарий КАК Сценарий,
	|	Таблица.ЦФО КАК ЦФО,
	|	Таблица.СтатьяОборотов КАК СтатьяОборотов,
	|	Таблица.Количество КАК Количество,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаСценарий КАК СуммаСценарий,
	|	Таблица.СуммаРегл КАК СуммаРегл,
	|	Таблица.СуммаУпр КАК СуммаУпр,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.Валюта КАК Валюта,
	|	Таблица.Комментарий КАК Комментарий,
	|	Таблица.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	Таблица.Сторно КАК Сторно,
	|	Таблица.Аналитика_1 КАК Аналитика_1,
	|	Таблица.Аналитика_2 КАК Аналитика_2,
	|	Таблица.Аналитика_3 КАК Аналитика_3,
	|	Таблица.Аналитика_4 КАК Аналитика_4,
	|	Таблица.Аналитика_5 КАК Аналитика_5,
	|	Таблица.Аналитика_6 КАК Аналитика_6,
	|	Таблица.Аналитика_7 КАК Аналитика_7,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Таблица.Проект КАК Проект,
	|	Таблица.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Таблица.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	ТаблицаЗависимыеОбороты КАК Таблица";
	
	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыКонтрольныеЗначения(НомераТаблиц)

	НомераТаблиц.Вставить("КонтрольныеЗначенияСторно", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("КонтрольныеЗначения", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ИмяСписка КАК ИмяСписка,
	|	Таблица.ПредставлениеСписка КАК ПредставлениеСписка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Сценарий КАК Сценарий,
	|	Таблица.ЦФО КАК ЦФО,
	|	Таблица.СтатьяОборотов КАК СтатьяОборотов,
	|	Таблица.Количество КАК Количество,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаСценарий КАК СуммаСценарий,
	|	Таблица.СуммаРегл КАК СуммаРегл,
	|	Таблица.СуммаУпр КАК СуммаУпр,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.Валюта КАК Валюта,
	|	Таблица.Комментарий КАК Комментарий,
	|	Таблица.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	Таблица.Сторно КАК Сторно,
	|	Таблица.Аналитика_1 КАК Аналитика_1,
	|	Таблица.Аналитика_2 КАК Аналитика_2,
	|	Таблица.Аналитика_3 КАК Аналитика_3,
	|	Таблица.Аналитика_4 КАК Аналитика_4,
	|	Таблица.Аналитика_5 КАК Аналитика_5,
	|	Таблица.Аналитика_6 КАК Аналитика_6,
	|	Таблица.Аналитика_7 КАК Аналитика_7,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Таблица.Проект КАК Проект,
	|	Таблица.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Таблица.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	ТаблицаДанныеБюджета КАК Таблица
	|ГДЕ
	|	Таблица.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ИмяСписка КАК ИмяСписка,
	|	Таблица.ПредставлениеСписка КАК ПредставлениеСписка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Сценарий КАК Сценарий,
	|	Таблица.ЦФО КАК ЦФО,
	|	Таблица.СтатьяОборотов КАК СтатьяОборотов,
	|	Таблица.Количество КАК Количество,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаСценарий КАК СуммаСценарий,
	|	Таблица.СуммаРегл КАК СуммаРегл,
	|	Таблица.СуммаУпр КАК СуммаУпр,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.Валюта КАК Валюта,
	|	Таблица.Комментарий КАК Комментарий,
	|	Таблица.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	Таблица.Сторно КАК Сторно,
	|	Таблица.Аналитика_1 КАК Аналитика_1,
	|	Таблица.Аналитика_2 КАК Аналитика_2,
	|	Таблица.Аналитика_3 КАК Аналитика_3,
	|	Таблица.Аналитика_4 КАК Аналитика_4,
	|	Таблица.Аналитика_5 КАК Аналитика_5,
	|	Таблица.Аналитика_6 КАК Аналитика_6,
	|	Таблица.Аналитика_7 КАК Аналитика_7,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Таблица.Проект КАК Проект,
	|	Таблица.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Таблица.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	ТаблицаДанныеБюджета КАК Таблица
	|ГДЕ
	|	НЕ Таблица.Сторно";
	
	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ВыполнитьВалютныеПеререасчеты(ДанныеБюджета, Периоды, Реквизиты)

	КурсыПоПериодам = Неопределено;				
	Если Реквизиты.ИспользоватьКурсыСценария Тогда
		ПараметрыКурсов = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Реквизиты.Сценарий, 
							Реквизиты.ВалютаДокумента);
		КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(Периоды, 
							Реквизиты.Сценарий, ПараметрыКурсов);
	КонецЕсли; 
	
	КурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(Реквизиты.Регистратор, Реквизиты.Период, 
					Новый Структура("Документ, Регл, Упр, Сценарий"));
					
	бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ДанныеБюджета, КурсыПоПериодам, КурсыВалют);
	
КонецПроцедуры

Функция ПодготовитьТаблицуКонтрольныхЗначений(ТаблицаДляКонтроля, ИзмеренияКонтроля, Реквизиты)
		
	КурсВалюты = бит_КурсыВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаСценария, Реквизиты.Период);	
	
	Для каждого СтрокаТаблицы Из ТаблицаДляКонтроля Цикл
		ПараметрыТекущегоКурса = бит_КурсыВалютКлиентСервер.СтруктураКурса(Реквизиты.ВалютаДокумента, 
									Реквизиты.КурсДокумента, Реквизиты.КратностьДокумента);
		ПараметрыНовогоКурса = бит_КурсыВалютКлиентСервер.СтруктураКурса(Реквизиты.ВалютаСценария, 
									КурсВалюты.Курс, КурсВалюты.Кратность);
		СтрокаТаблицы.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТаблицы.Сумма, 
									ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	КонецЦикла; 
		
	Периодичность = Реквизиты.ПериодичностьКонтроля;	
	бит_КонтрольПоБюджету.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля, ИзмеренияКонтроля, Периодичность);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий"                     ,Реквизиты.Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
	СтруктураПараметров.Вставить("РежимКонтроля"                ,"Бюджет");
	
	ТекстЗапроса = бит_КонтрольПоБюджету.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;	
	
	ТаблицаДляКонтроля.Сортировать("Период Возр");
	
	Если ТаблицаДляКонтроля.Количество() > 0 Тогда	   
		ДатаНачала    = ТаблицаДляКонтроля[0].Период;
		ДатаОкончания = ТаблицаДляКонтроля[ТаблицаДляКонтроля.Количество()-1].Период;	   
	Иначе	   
		ДатаНачала    = Реквизиты.Период;
		ДатаОкончания = Реквизиты.Период;	   
	КонецЕсли; 
	
	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаНачала,Периодичность);
	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаОкончания,Периодичность);
	
	МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
	Запрос.УстановитьПараметр("СценарийКонтролируемый", Реквизиты.Сценарий);
	Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
	Запрос.УстановитьПараметр("Ссылка"                , Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
	
	бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция НакопленныеОборотыДоИзменения(ДанныеБюджета, Реквизиты)

	Периоды = ДанныеБюджета.Скопировать(,"Период");
	Периоды.Сортировать("Период Возр");
	МаксИндекс = Периоды.Количество() - 1;
	
	Если Периоды.Количество() > 0 Тогда
		НачалоПериода = НачалоДня(Периоды[0].Период);
		КонецПериода = ПолучитьКонецПериода(Периоды[МаксИндекс].Период, Реквизиты.ПериодичностьПланирования);
	Иначе
		НачалоПериода = Дата('00010101');
		КонецПериода  = Дата('00010101');
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сценарий КАК Сценарий,
	|	ДанныеДокумента.ЦФО КАК ЦФО,
	|	ДанныеДокумента.СтатьяОборотов КАК СтатьяОборотов,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Аналитика_1 КАК Аналитика_1,
	|	ДанныеДокумента.Аналитика_2 КАК Аналитика_2,
	|	ДанныеДокумента.Аналитика_3 КАК Аналитика_3,
	|	ДанныеДокумента.Аналитика_4 КАК Аналитика_4,
	|	ДанныеДокумента.Аналитика_5 КАК Аналитика_5,
	|	ДанныеДокумента.Аналитика_6 КАК Аналитика_6,
	|	ДанныеДокумента.Аналитика_7 КАК Аналитика_7,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеДокумента.Проект КАК Проект,
	|	ДанныеДокумента.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ОборотыПоБюджетамОбороты.Период КАК Период,
	|	бит_ОборотыПоБюджетамОбороты.Сценарий КАК Сценарий,
	|	бит_ОборотыПоБюджетамОбороты.ЦФО КАК ЦФО,
	|	бит_ОборотыПоБюджетамОбороты.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_ОборотыПоБюджетамОбороты.Валюта КАК Валюта,
	|	бит_ОборотыПоБюджетамОбороты.КоличествоОборот КАК Количество,
	|	бит_ОборотыПоБюджетамОбороты.СуммаОборот КАК Сумма,
	|	бит_ОборотыПоБюджетамОбороты.СуммаРеглОборот КАК СуммаРегл,
	|	бит_ОборотыПоБюджетамОбороты.СуммаУпрОборот КАК СуммаУпр,
	|	бит_ОборотыПоБюджетамОбороты.СуммаСценарийОборот КАК СуммаСценарий,
	|	бит_ОборотыПоБюджетамОбороты.КоличествоОборот КАК КоличествоОборот,
	|	бит_ОборотыПоБюджетамОбороты.СуммаОборот КАК СуммаОборот,
	|	бит_ОборотыПоБюджетамОбороты.СуммаРеглОборот КАК СуммаРеглОборот,
	|	бит_ОборотыПоБюджетамОбороты.СуммаУпрОборот КАК СуммаУпрОборот,
	|	бит_ОборотыПоБюджетамОбороты.СуммаСценарийОборот КАК СуммаСценарийОборот,
	|	бит_ОборотыПоБюджетамОбороты.Аналитика_1 КАК Аналитика_1,
	|	бит_ОборотыПоБюджетамОбороты.Аналитика_2 КАК Аналитика_2,
	|	бит_ОборотыПоБюджетамОбороты.Аналитика_3 КАК Аналитика_3,
	|	бит_ОборотыПоБюджетамОбороты.Аналитика_4 КАК Аналитика_4,
	|	бит_ОборотыПоБюджетамОбороты.Аналитика_5 КАК Аналитика_5,
	|	бит_ОборотыПоБюджетамОбороты.Аналитика_6 КАК Аналитика_6,
	|	бит_ОборотыПоБюджетамОбороты.Аналитика_7 КАК Аналитика_7,
	|	бит_ОборотыПоБюджетамОбороты.Контрагент КАК Контрагент,
	|	бит_ОборотыПоБюджетамОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	бит_ОборотыПоБюджетамОбороты.Проект КАК Проект,
	|	бит_ОборотыПоБюджетамОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	бит_ОборотыПоБюджетамОбороты.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			ДЕНЬ,
	|			(Сценарий, ЦФО, СтатьяОборотов, Валюта, Аналитика_1, Аналитика_2, Аналитика_3, Аналитика_4, Аналитика_5, Аналитика_6, Аналитика_7, Контрагент, ДоговорКонтрагента, Проект, НоменклатурнаяГруппа, БанковскийСчет) В
	|				(ВЫБРАТЬ
	|					ДанныеДокумента.Сценарий КАК Сценарий,
	|					ДанныеДокумента.ЦФО КАК ЦФО,
	|					ДанныеДокумента.СтатьяОборотов КАК СтатьяОборотов,
	|					ДанныеДокумента.Валюта КАК Валюта,
	|					ДанныеДокумента.Аналитика_1 КАК Аналитика_1,
	|					ДанныеДокумента.Аналитика_2 КАК Аналитика_2,
	|					ДанныеДокумента.Аналитика_3 КАК Аналитика_3,
	|					ДанныеДокумента.Аналитика_4 КАК Аналитика_4,
	|					ДанныеДокумента.Аналитика_5 КАК Аналитика_5,
	|					ДанныеДокумента.Аналитика_6 КАК Аналитика_6,
	|					ДанныеДокумента.Аналитика_7 КАК Аналитика_7,
	|					ДанныеДокумента.Контрагент КАК Контрагент,
	|					ДанныеДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|					ДанныеДокумента.Проект КАК Проект,
	|					ДанныеДокумента.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|					ДанныеДокумента.БанковскийСчет КАК БанковскийСчет
	|				ИЗ
	|					ДанныеДокумента КАК ДанныеДокумента)) КАК бит_ОборотыПоБюджетамОбороты";	
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеБюджета);
	Запрос.УстановитьПараметр("НачалоПериода",   НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	 КонецПериода);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьКонецПериода(Период, ПериодичностьПланирования)

	Если ПериодичностьПланирования = Перечисления.бит_ПериодичностьПланирования.День Тогда
		КонецПериода = КонецДня(Период);
	ИначеЕсли ПериодичностьПланирования = Перечисления.бит_ПериодичностьПланирования.Неделя Тогда
		КонецПериода = КонецНедели(Период);
	ИначеЕсли ПериодичностьПланирования = Перечисления.бит_ПериодичностьПланирования.Декада Тогда
		КонецПериода = КонецДня(Период + 9*24*60*60);	
	ИначеЕсли ПериодичностьПланирования = Перечисления.бит_ПериодичностьПланирования.Месяц Тогда
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли ПериодичностьПланирования = Перечисления.бит_ПериодичностьПланирования.Квартал Тогда
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли ПериодичностьПланирования = Перечисления.бит_ПериодичностьПланирования.Полугодие Тогда
		КонецПериода = КонецГода(Период);
	ИначеЕсли ПериодичностьПланирования = Перечисления.бит_ПериодичностьПланирования.Год Тогда
		КонецПериода = КонецГода(Период);
	Иначе
		КонецПериода = КонецДня(Период);
	КонецЕсли;   	

	Возврат КонецПериода;
	
КонецФункции

#КонецОбласти 

#КонецЕсли
