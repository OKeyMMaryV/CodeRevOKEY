
#Область ОбработчикиСобытийФормы
									 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
 	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	флПрофДоступен =  бит_ЛицензированиеБФCервер.СборкаДоступна("ПРОФ");
	Элементы.БДДСКомандаПолучениеДанныхБюджета.Видимость 			 = флПрофДоступен;
	Элементы.БДДСКомандаКопированиеДанныхГрафиковДоговоров.Видимость = флПрофДоступен И Метаданные.РегистрыНакопления.Найти("бит_ГрафикиДоговоров") <> Неопределено;
	Элементы.БДДСПолучениеДанныхПоКурсовымРазницам.Видимость 		 = ЭтоБП();
		
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
		
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	ЗаполнитьКэшЗначений();
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	фИспользоватьНормы = ПолучитьФункциональнуюОпцию("бит_ИспользоватьНормыВБюджетировании");
	фИменаПараметраНорм = ПланыВидовХарактеристик.бит_ВидыПроизвольныхПараметров.ПодготовитьСтруктурыСвязи(Объект.ПараметрНорм);	
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
		ОбновитьПараметрыСтатуса();
	КонецЕсли; 
	
	// Элементы управления для измерений несуществующих в смежном решении	
	// создаются программно для унификации кода.
	// ++ БП 
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементВШапке("Проект", "Проект", Элементы, Элементы.СтраницаДополнительно);
	// -- БП 
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "БДДС", "БДДС",
		Элементы.БДДСКоличество);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "ЗависимыеОбороты", "ЗависимыеОбороты", 
		Элементы.ЗависимыеОборотыКоличество);
	
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, "БДДС",
		фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, "ЗависимыеОбороты",
		фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	      	
	// Оформление таблиц.
	ОФормитьТаблицу("БДДС");
	ОФормитьТаблицу("ЗависимыеОбороты");
	
	// Проверка наличия зафиксированных бюджетных данных.
	Если Объект.Проведен Тогда
		бит_Бюджетирование.ПроверитьФиксациюВФорме(ЭтотОбъект, Объект.Ссылка, Истина);
	КонецЕсли;
	
	ЭтоУХ = бит_ЛицензированиеБФCервер.СборкаДоступна("УХ");
	Элементы.БДДСКомандаЗагрузитьИзПроформы.Видимость = ЭтоУХ;
	Элементы.БДДСКомандаДобавитьИзПроформы.Видимость = ЭтоУХ;
		
	// Видимость элементов управления по-умолчанию
	Элементы.ЗависимыеОборотыИтогСумма.Видимость = Ложь;
	Элементы.ЗависимыеОборотыИтогКоличество.Видимость = Ложь;
	
	// Установка видимости/доступности элементов управления.
	УстановитьВидимостьДоступность();
	УстановитьУсловноеОформление();
	
	//БИТ АКриштопов 10022016 -->>
	Элементы.БДДСКонтекстноеМенюЗаполнитьКолонку.Доступность = Не Объект.Проведен;
	//БИТ АКриштопов 12022016 -->>
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-23 (#3065)
	//Если Объект.БДДС.Количество() > 1 Тогда
	//	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.БИТ_СоздатьЗаявкиРасходованияДС.Доступность = Истина;
	//Иначе
	//	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.БИТ_СоздатьЗаявкиРасходованияДС.Доступность = Ложь;	
	//КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-23 (#3065)
	//БИТ АКриштопов 12022016 <<--
	//БИТ АКриштопов 10022016 <<--
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3102)
	Для Каждого СтрокаТаблицы Из Объект.БДДС Цикл 
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;	
	КонецЦикла;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3102)	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)
	
	// ++ БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
	бит_БК_Общий.ЗаполнитьСписокСтавокНДСДляДокументовБК(Элементы.БДДССтавкаНДС);	
	// -- БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = УникальныйИдентификатор Тогда
		Если ИмяСобытия = "ИзмененСтатус" Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
			СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
			УстановитьВидимостьДоступность();
			
		ИначеЕсли ИмяСобытия = "ВосстановитьЗагруженныеИзExcelДанные" Тогда
			
			ВосстановитьЗагруженныеИзExcelДанные(Параметр.ИмяТабЧасти, Параметр.Ссылка);
			
		ИначеЕсли ИмяСобытия = "ИзменениеТабличнойЧасти" Тогда
			
			ПерезаполнитьТабличнуюЧасть(Параметр);
			
		ИначеЕсли ИмяСобытия = "ПолучениеДанныхБюджета" Тогда
			
			ОбработкаПодбораБюджета(Параметр);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	УстановитьСостояниеДокумента();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-30 (#3102)
	Для Каждого СтрокаТаблицы Из Объект.БДДС Цикл 
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;	
	КонецЦикла;
	ОбновитьИтоги(ЭтотОбъект);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-30 (#3102)
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров); 
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
		
	КонецЕсли;

	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	УстановитьСостояниеДокумента();
	
	УстановитьВидимостьДоступность();	
	
	//БИТ АКриштопов 10022016 -->>
	Элементы.БДДСКонтекстноеМенюЗаполнитьКолонку.Доступность = Не Объект.Проведен;
	//БИТ АКриштопов 10022016 <<--
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Автовидимость колонок.
	Элементы.ФормаАвтовидимостьКолонок.Пометка = фАвтовидимостьКолонок; 	
	УстановитьАвтовидимостьКолонок(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_БюджетнаяОперация";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
	//{ bit SVKushnirenko Bit 27.01.2017 #2657
	пМассивОбновления = ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(Объект.Ссылка);
	рекМассивДокументовОповещенияДляИзмененияСтатуса.ЗагрузитьЗначения(пМассивОбновления);
	//} bit SVKushnirenko Bit 27.01.2017 #2657
 	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
		
	ИзменениеВалютыСервер(Ложь);
	ДобавитьВКэш("Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)

	флПересчитатьСуммы   = Ложь;
	флПерезаполнитьНормы = Ложь;
	
	флИзменитсяВалюта = ИзменитсяВалюта();
	флСпроситьОНормах = ?(фИспользоватьНормы И Объект.БДДС.Количество() > 0 И ЗначениеЗаполнено(Объект.ПараметрНорм), Истина, Ложь);
	
	Если флИзменитсяВалюта ИЛИ флСпроситьОНормах Тогда
	
		ПараметрыФормы = Новый Структура("ИзменитсяВалюта, СпроситьОНормах", флИзменитсяВалюта, флСпроситьОНормах);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("флПересчитатьСуммы", флПересчитатьСуммы);
		ДопПараметры.Вставить("флПерезаполнитьНормы", флПерезаполнитьНормы);
		
		ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ЗакрытиеФормыВопросПриИзмененииСценария", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("ОбщаяФорма.бит_ВопросПриИзмененииСценарияУправляемая", ПараметрыФормы, ЭтаФорма,,,, ОповещениеЗакрытиеФормы);
		
	Иначе
		
		// Изменяем валюту документа на валюту из сценария.
		Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
			ИзменениеСценарияСервер(флПересчитатьСуммы, флПерезаполнитьНормы);
		КонецЕсли;   
		ДобавитьВКэш("Сценарий");
		ДобавитьВКэш("ВалютаДокумента");

	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияСуммПриИзменении(Элемент)
	
	СтараяЕдиницаИзмеренияСумм = КонтролируемыеРеквизиты.ЕдиницаИзмеренияСумм;
	
	Если Не СтараяЕдиницаИзмеренияСумм = Объект.ЕдиницаИзмеренияСумм Тогда
		Если Объект.БДДС.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Изменилась единица измерения сумм. Пересчитать суммы в документе?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЕдиницаИзмеренияСуммПриИзменении", ЭтотОбъект, СтараяЕдиницаИзмеренияСумм);
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, НСтр("ru = 'Изменение единицы измерения сумм'")); 
		Иначе
			ДобавитьВКэш("ЕдиницаИзмеренияСумм");
		КонецЕсли; 	
	Иначе
		ДобавитьВКэш("ЕдиницаИзмеренияСумм");
	КонецЕсли;
			
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросЕдиницаИзмеренияСуммПриИзменении(Ответ, СтараяЕдиницаИзмеренияСумм) Экспорт

  	Если Ответ = КодВозвратаДиалога.Да Тогда
	  	ИзменениеЕдиницыИзмерения(СтараяЕдиницаИзмеренияСумм);
	Иначе
		Объект.ЕдиницаИзмеренияСумм = СтараяЕдиницаИзмеренияСумм;
	КонецЕсли;

	ДобавитьВКэш("ЕдиницаИзмеренияСумм");

КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	флПерезаполнить = Ложь;
	Если Объект.БДДС.Количество() > 0 И Объект.ВалютаДокумента <> КонтролируемыеРеквизиты.ВалютаДокумента Тогда
		ТекстВопроса =  НСтр("ru = 'Изменена валюта документа. Пересчитать суммы в документе?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросВалютаДокументаПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе
		ИзменениеВалютыСервер(флПерезаполнить, КонтролируемыеРеквизиты.ВалютаДокумента);
		ДобавитьВКэш("ВалютаДокумента");
	КонецЕсли; 
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросВалютаДокументаПриИзменении(Ответ, ДопПараметры) Экспорт
		
	Если Ответ = КодВозвратаДиалога.Да Тогда
		флПерезаполнить = Истина;
		ИзменениеВалютыСервер(флПерезаполнить, КонтролируемыеРеквизиты.ВалютаДокумента);
		ДобавитьВКэш("ВалютаДокумента");
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		флПерезаполнить = Ложь;			 
		ИзменениеВалютыСервер(флПерезаполнить, КонтролируемыеРеквизиты.ВалютаДокумента);
		ДобавитьВКэш("ВалютаДокумента");
	Иначе	 
		ИзвлечьИзКэша("ВалютаДокумента");
	КонецЕсли; 

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗависимыхОборотовПриИзменении(Элемент)
	
	ТекущийРежимЗависимыхОборотов = КонтролируемыеРеквизиты.РежимЗависимыхОборотов;
	Если ТекущийРежимЗависимыхОборотов = Объект.РежимЗависимыхОборотов Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЗависимыеОбороты.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Зависимые обороты будут очищены. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросРежимЗависимыхОборотовПриИзменении", ЭтотОбъект, ТекущийРежимЗависимыхОборотов);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	Иначе
		ДобавитьВКэш("РежимЗависимыхОборотов");
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросРежимЗависимыхОборотовПриИзменении(Ответ, ТекущийРежимЗависимыхОборотов) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда 			
		Объект.ЗависимыеОбороты.Очистить();  					
	Иначе
		РежимЗависимыхОборотов = ТекущийРежимЗависимыхОборотов;
	КонецЕсли;

	ДобавитьВКэш("РежимЗависимыхОборотов");

КонецПроцедуры

&НаКлиенте
Процедура РежимЗависимыхОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.Автоматический"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.НеФормировать"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрНормПриИзменении(Элемент)
	
	флПерезаполнить = Ложь;
	Если ЗначениеЗаполнено(Объект.ПараметрНорм) И Объект.БДДС.Количество() > 0 Тогда
		ТекстВопроса =  НСтр("ru = 'Перезаполнить нормы согласно выбранного параметра?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросПараметрНормПриИзменении", ЭтотОбъект, флПерезаполнить);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 15, КодВозвратаДиалога.Отмена);
	Иначе
		ИзменениеПараметраНорм(флПерезаполнить);
		ДобавитьВКэш("ПараметрНорм");
	КонецЕсли; 
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  флПерезаполнить - Булево.
// 
&НаКлиенте
Процедура ВопросПараметрНормПриИзменении(Ответ, флПерезаполнить) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		флПерезаполнить = Истина;
		ИзменениеПараметраНорм(флПерезаполнить);
		ДобавитьВКэш("ПараметрНорм");
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		флПерезаполнить = Ложь;			 
		ИзменениеПараметраНорм(флПерезаполнить);
		ДобавитьВКэш("ПараметрНорм");
	Иначе	 
		ИзвлечьИзКэша("ПараметрНорм");
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ПанельОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	флТекущаяСтраницаЗависимые = ?(ТекущаяСтраница.Имя = "СтраницаЗависимыеОбороты", Истина, Ложь);
	Элементы.ЗависимыеОборотыИтогСумма.Видимость = флТекущаяСтраницаЗависимые;
	Элементы.ЗависимыеОборотыИтогКоличество.Видимость = флТекущаяСтраницаЗависимые;
	Элементы.БДДСИтогСумма.Видимость = НЕ флТекущаяСтраницаЗависимые;
	Элементы.БДДСИтогКоличество.Видимость = НЕ флТекущаяСтраницаЗависимые;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБДДС

&НаКлиенте
Процедура БДДСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;	
	
	Если НоваяСтрока Тогда 
		Если НЕ Копирование Тогда
			бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, фКэшЗначений.ИзмеренияДоп,
				фКэшЗначений.НастройкиИзмерений);
			ТекущиеДанные.Период = НачалоТекущегоПериода();
		КонецЕсли;
	КонецЕсли;															
	
КонецПроцедуры

&НаКлиенте
Процедура БДДСПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокиТаблицыБДДС();

КонецПроцедуры

&НаКлиенте
Процедура БДДСПериодПриИзменении(Элемент)
	 
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	// Выбранный период приводится на начало периода в завсимости от реквизита "Периодичность" выбранного сценария.
	ИзменениеПериодаТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура БДДССтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	ИзменениеСтатьиОборотовТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура БДДСКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.БДДС.ТекущиеДанные;
	бит_БюджетированиеКлиентСервер.РассчитатьПоНорме(ТекущаяСтрока, фИспользоватьНормы);
	
КонецПроцедуры

&НаКлиенте
Процедура БДДСНормаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.БДДС.ТекущиеДанные;
	бит_БюджетированиеКлиентСервер.РассчитатьПоНорме(ТекущаяСтрока, фИспользоватьНормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗависимыеобороты

&НаКлиенте
Процедура ЗависимыеОборотыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Объект.ЗависимыеОбороты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "ЗависимыеОборотыКомментарийРасчета" И НЕ ПустаяСтрока(ТекущиеДанные.КомментарийРасчета) Тогда
		СтандартнаяОбработка = Ложь;		
		ПараметрыФормы = Новый Структура("КомментарийРасчета", ТекущиеДанные.КомментарийРасчета);
		ОткрытьФорму("ОбщаяФорма.бит_ФормаКомментарияРасчетаЗависимыхОборотовУправляемая", ПараметрыФормы, ЭтаФорма);
	Иначе
		Если НЕ ТекущиеДанные = Неопределено Тогда
			ИмяРеквизита = СтрЗаменить(Поле.Имя, "ЗависимыеОбороты", "");
			ТекЗнч = ТекущиеДанные[ИмяРеквизита];
			Если ЗначениеЗаполнено(ТекЗнч) Тогда
				ПоказатьЗначение(,ТекЗнч);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПодключаемыеКомандыЭлементовТаблицФормы

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	
	Если бит_БюджетированиеКлиентСервер.ВыполнятьЗаполнениеНормы(Объект.ПараметрНорм, фИменаПараметраНорм, ИмяПоля, фИспользоватьНормы) Тогда
		ЗаполнитьНорму(ТекущиеДанные.ПолучитьИдентификатор(), ИмяПоля);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, ИмяПоля,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
	
#КонецОбласти 

&НаКлиенте
Процедура АвтовидимостьКолонок(Команда)
	
	фАвтовидимостьКолонок = Не фАвтовидимостьКолонок;	
	Элементы.ФормаАвтовидимостьКолонок.Пометка = фАвтовидимостьКолонок;
	УстановитьАвтовидимостьКолонок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОборотыЗаполнить(Команда)
	
	Если Объект.ЗависимыеОбороты.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Зависимые обороты будут очищены. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗависимыеОборотыЗаполнить", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьЗависимыеОборотыСервер();
	КонецЕсли; 
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю.
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросЗависимыеОборотыЗаполнить(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗависимыеОборотыСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопированиеДанныхБюджета(Команда)
	
	//БИТ АКриштопов 20.04.2016 ++
	//ОткрытьОбработкуПолучения("КопированиеБюджета");
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Необходимо записать документ.");
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб) Начало 2019-10-01 (#3490)
	//Если Не ЗначениеЗаполнено(Объект.НомерЗаявки) Тогда
	Если Не ЗначениеЗаполнено(Объект.НомерЗаявки) И Не Объект.ок_КорректировкаОплаты Тогда
	//ОКЕЙ Рычаков А.С.(СофтЛаб) Конец 2019-10-01 (#3490)	
		Сообщить("Не выбрана заявка.");
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ФормаВвода", Объект.Ссылка);
	ОткрытьФорму("Обработка.бит_КопированиеДанныхБюджета.Форма.ФормаУправляемая", ПараметрыФормы,,,,, Новый ОписаниеОповещения("бит_КопированиеДанныхБюджетаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//БИТ Акриштопов 20.04.2016 --
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучениеДанныхБюджета(Команда)
	
	ОткрытьОбработкуПолучения("ПолучениеБюджета");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопированиеДанныхГрафиковДоговоров(Команда)
	
	ОткрытьОбработкуПолучения("ГрафикДоговоров");
	                            
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеДанныхПоКурсовымРазницам(Команда)
	
	Если НЕ Объект.БДДС.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru='Данные бюджета будут очищены. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросПолучениеДанныхПоКурсовымРазницам", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		// Выполним проверки.
		Отказ = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
			ТекстСообщения = НСтр("ru='Не заполнен сценарий.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		КонецЕсли;
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru='Заполнение по курсовым разницам невозможно.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат;
		КонецЕсли;
		ЗаполнитьДанныеБюджетаПоКурсовымРазницам();
		Если Объект.БДДС.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='Нет данных по курсовым разницам'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю.
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросПолучениеДанныхПоКурсовымРазницам(Ответ, ДопПараметры) Экспорт
		
	Если Ответ = КодВозвратаДиалога.Да Тогда	
		Модифицированность = Истина;
		Объект.БДДС.Очистить();
		// Выполним проверки.
		Отказ = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
			ТекстСообщения = НСтр("ru='Не заполнен сценарий.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		КонецЕсли;
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru='Заполнение по курсовым разницам невозможно.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат;
		КонецЕсли;
		ЗаполнитьДанныеБюджетаПоКурсовымРазницам();
		Если Объект.БДДС.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='Нет данных по курсовым разницам'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабЧасть(Команда)
	
	ПараметрыФормы = ПараметрыИзмененияТаблицыДокумента();
	ОткрытьФорму("Обработка.бит_ИзменениеТабЧастиДанныеБюджета.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьИзПроформы(Команда)
	
	ЗагрузитьДанныеПроформы("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьИзПроформы(Команда)
	
	Если Объект.БДДС.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзПроформыВопросЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе	
		ЗагрузитьДанныеПроформы("Загрузить");
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ЗагрузитьИзПроформыВопросЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ЗагрузитьИзПроформыВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагрузитьДанныеПроформы("Загрузить");
	КонецЕсли; 
	
КонецПроцедуры

// Процедура загружает данные из проформы. 
//
&НаКлиенте
Процедура ЗагрузитьДанныеПроформы(Режим)

	ДополнительныеДанные = Новый Структура("Режим", Режим);
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеПроформыВыборФайлаЗавершение", ЭтотОбъект, ДополнительныеДанные);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.Фильтр = "Все файлы Excel (*.xls, *.xlsx)|*.xls; *.xlsx";
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещение, ДиалогВыбора);
	
КонецПроцедуры

// См. ФайловаяСистемаКлиент.ПоказатьДиалогВыбора().
//
&НаКлиенте 
Процедура ЗагрузитьДанныеПроформыВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеДанные) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда
		
		ПолноеИмя = ВыбранныеФайлы[0];
		ТекстСостояние = НСтр("ru = 'Загрузка данных...'");
		Состояние(ТекстСостояние);
		// Открытие эксель.
		Отказ = Ложь;		
		
		Эксель = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		
		ЭксельКнига = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(Эксель, ПолноеИмя, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ИмяПроформы = "";
		// Чтение данных шапки.
		ЛистШапка = Неопределено;
		Для каждого Лист Из ЭксельКнига.Sheets Цикл
			// Найдем лист с данными шапки требуемой проформы.
			ПараметрыЛиста = бит_ПроформыКлиентСервер.GetHiddenParams(Лист);
			Если ПараметрыЛиста.ВидЛиста = "Шапка"  Тогда
				ИмяПроформы = ПараметрыЛиста.ИмяПроформы;
				ЛистШапка = Лист;
			КонецЕсли; 
		КонецЦикла; 
		
		Если НЕ ЗначениеЗаполнено(ИмяПроформы) Тогда
			Отказ = Истина;
			ТекстСообщения =  НСтр("ru = 'Не удалось определить имя проформы. Возможно данный файл не является шаблоном проформы.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат;
		КонецЕсли; 
		
		РезДанныеВидаПроформы = ДанныеВидаПроформы(ИмяПроформы);
		КомплектДанных = Новый Структура;
		КомплектДанных.Вставить("ИмяПроформы", ИмяПроформы);
		КомплектДанных.Вставить("ПсевдоМетаданные", РезДанныеВидаПроформы.ПсевдоМетаданные);
		КомплектДанных.Вставить("ВидПроформы", РезДанныеВидаПроформы.ВидПроформы);
		КомплектДанных.Вставить("ИмяТаблицыДанных", РезДанныеВидаПроформы.ИмяТаблицыДанных);
		
		// Чтение источников выпадающих списков.
		СпискиИсточники     = бит_ПроформыКлиентСервер.ПрочитатьСпискиИсточники(ЭксельКнига);
		КомплектДанных.Вставить("СпискиИсточники", СпискиИсточники);
		
		МодельДокумента = Новый Структура;
		
		// Чтение данных шапки.
		ЛистШапка = Неопределено;
		Для каждого Лист Из ЭксельКнига.Sheets Цикл
			// Найдем лист с данными шапки требуемой проформы.
			ПараметрыЛиста = бит_ПроформыКлиентСервер.GetHiddenParams(Лист);
			Если ПараметрыЛиста.ВидЛиста = "Шапка" И ПараметрыЛиста.ИмяПроформы = ИмяПроформы Тогда
				ЛистШапка = Лист;
			КонецЕсли; 
		КонецЦикла; 
		
		Если НЕ ЛистШапка = Неопределено Тогда
			бит_ПроформыКлиентСервер.ПрочитатьДанныеШапки(ЭксельКнига, ЛистШапка, КомплектДанных.ПсевдоМетаданные, ИмяПроформы, МодельДокумента);
		КонецЕсли; 
		
		// Чтение данных табличных частей.
		бит_ПроформыКлиентСервер.ПрочитатьДанныеТабЧастей(ЭксельКнига, КомплектДанных.ПсевдоМетаданные, МодельДокумента, ИмяПроформы);
		КомплектДанных.Вставить("МодельДокумента", МодельДокумента);
		бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ЭксельКнига, Ложь);
		бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Эксель);		
		ТекстСостояние = НСтр("ru = 'Преобразование данных...'");
		Состояние(ТекстСостояние);
		ОбработатьЗагруженныеДанные(КомплектДанных, ДополнительныеДанные.Режим);
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция получает настройки статьи оборотов.
//
// Параметры:
//  ТекСтатья - СправочникСсылка.бит_СтатьиОборотов.
//
// Возвращаемое значение:
//  ТекНастройка - Структура.
//
&НаСервере
Функция ПолучитьНастройкиСтатьи(ТекСтатья) 

	НастройкиСтатей = Новый Соответствие;
	бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(ТекСтатья, НастройкиСтатей);
	ТекНастройка = НастройкиСтатей[ТекСтатья];
	Возврат ТекНастройка;
	
КонецФункции

&НаКлиенте
Процедура КомандаРаспределить(Команда)
	
    ТекЭлемент = Элементы.БДДС.ТекущийЭлемент;
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СтрЗаменить(ТекЭлемент.Имя, "БДДС", "");
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	
	Если НЕ РаспределениеПоддерживается(ТекущиеДанные, ТекЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекЭлемент = Элементы.БДДСПериод Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоПериодам"));
		ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
		
		Оповещение = Новый ОписаниеОповещения("РаспределитьПоАналитикеЗавершение", ЭтотОбъект);
		РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
	Иначе
		ТекущееЗначение = ТекущиеДанные[ИмяКолонки];

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоАналитике"));
		ПараметрыФормы.Вставить("ИмяКолонки", ИмяКолонки);
		ПараметрыФормы.Вставить("ТекущееЗначение", ТекущееЗначение);
		
		Оповещение = Новый ОписаниеОповещения("РаспределитьПоАналитикеЗавершение", ЭтотОбъект);
		РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	КонецЕсли; 
	
	ОткрытьФорму("Обработка.бит_РаспределениеБюджетныхДанныхПоПрофилю.Форма",ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОкна);
	
КонецПроцедуры

// Процедура обработчик оповещения "РаспределитьПоАналитикеЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура РаспределитьПоАналитикеЗавершение(РезДанные, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезДанные) = Тип("Структура") Тогда
		МассивСтрок = Элементы.БДДС.ВыделенныеСтроки;
		ВыполнитьРаспределение(МассивСтрок, РезДанные);
	КонецЕсли; 
	
КонецПроцедуры

#Область РаботаСExcel

&НаКлиенте
Процедура ЗагрузитьЧерезТабДокДанныеБюджета(Команда)
    
    ОткрытьФормуЗагрузкиДанныхЧерезТабДок("БДДС");
	
КонецПроцедуры // ЗагрузитьЧерезТабДокДанныеБюджета()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Функция определяет вариант решения.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Результат - Булево.
// 
&НаСервереБезКонтекста
Функция ЭтоБП()

	Результат = Ложь;
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		Результат = Истина;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	МетаданныеОбъекта = Метаданные.Документы.бит_БюджетнаяОперация;
	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Данные по дополнительным аналитикам.
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	
	// Произвольные измерения.
	фКэшЗначений.Вставить("Измерения"         , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));
	
	// Параметры, используемые для управления автовидимостью колонок.
	фКэшЗначений.Вставить("НастройкаВидимостиКолонок"	 , Новый Структура);
	фКэшЗначений.Вставить("МассивСтатей_БДДС"			 , Новый Массив);
	фКэшЗначений.Вставить("МассивСтатей_ЗависимыеОбороты", Новый Массив);
	фКэшЗначений.Вставить("СтруктураДопПолей", Новый Структура("Учет_Сумма, Учет_Количество", "Норма","Норма"));	
	
	КлючевыеЭлементы = Новый Массив;
	КлючевыеЭлементы.Добавить("Дата");
	КлючевыеЭлементы.Добавить("Сценарий");
	КлючевыеЭлементы.Добавить("ЕдиницаИзмеренияСумм");
	КлючевыеЭлементы.Добавить("ВалютаДокумента");
	КлючевыеЭлементы.Добавить("КурсДокумента");
	КлючевыеЭлементы.Добавить("ПараметрНорм");
	КлючевыеЭлементы.Добавить("СверхБюджета");
	КлючевыеЭлементы.Добавить("БДДС");
	КлючевыеЭлементы.Добавить("РежимЗависимыхОборотов");
	КлючевыеЭлементы.Добавить("ЗависимыеОбороты");
	КлючевыеЭлементы.Добавить("ЦФО");
	КлючевыеЭлементы.Добавить("СтатьяОборотов");
	Если МетаданныеОбъекта.Реквизиты.Найти("Проект") <> Неопределено Тогда
		КлючевыеЭлементы.Добавить("Проект");	
	КонецЕсли;
	КлючевыеЭлементы.Добавить("Ответственный");  
	КлючевыеЭлементы.Добавить("Комментарий");
	КлючевыеЭлементы.Добавить("ЗависимыеОборотыКоманднаяПанель");
	КлючевыеЭлементы.Добавить("БДДСКоманднаяПанель");
	КлючевыеЭлементы.Добавить("БДДСКомандаРаспределить");
	КлючевыеЭлементы.Добавить("БДДСКомандаКопированиеДанныхБюджета");
	КлючевыеЭлементы.Добавить("БДДСКомандаПолучениеДанныхБюджета");
	КлючевыеЭлементы.Добавить("БДДСКомандаКопированиеДанныхГрафиковДоговоров");
	КлючевыеЭлементы.Добавить("БДДСПолучениеДанныхПоКурсовымРазницам");
	КлючевыеЭлементы.Добавить("БДДСКомандаЗагрузитьИзПроформы");
	КлючевыеЭлементы.Добавить("БДДСКомандаДобавитьИзПроформы");
	КлючевыеЭлементы.Добавить("БДДСЗагрузитьЧерезТабДокДанныеБюджета");
	КлючевыеЭлементы.Добавить("БДДСИзменитьТабЧасть");
	КлючевыеЭлементы.Добавить("ЗависимыеОборотыЗависимыеОборотыЗаполнить");
	
	фКэшЗначений.Вставить("МассивНередактируемыхЭлементовФормы", КлючевыеЭлементы);
	
КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы. 
// 
&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	//ОК Довбешка Т. 17.01.2018
	
	//ЭлементыФормыДоступны = (Статус = Справочники.бит_СтатусыОбъектов.БюджетнаяОперация_Черновик
	//						 ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка());  
	ЭлементыФормыДоступны = Истина;	
	//ОК
	
	Для Каждого ТекЭлемент Из фКэшЗначений.МассивНередактируемыхЭлементовФормы Цикл
		Если ТипЗнч(Элементы[ТекЭлемент]) = Тип("КнопкаФормы") Тогда
			Элементы[ТекЭлемент].Доступность = ЭлементыФормыДоступны;
		Иначе	
			Элементы[ТекЭлемент].ТолькоПросмотр = Не ЭлементыФормыДоступны;
		КонецЕсли; 
	КонецЦикла; 	
	
	// Вызов механизма доступности элементов управления.
	УстановитьНастройкиДоступностиЭлементов();		

КонецПроцедуры

// Процедура применяет настройки доступности и видимости для элементов формы.
// 
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()

	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЦФО", Объект.ЦФО);		
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры

// Процедура оформляет табличное поле.
// 
// Параметры:
//  ИмяТаблицы 		- Строка
//  СтатьяОборотов 	- СправочникСсылка.бит_СтатьиОборотов.
// 
&НаСервере
Процедура ОФормитьТаблицу(ПрефиксТаблицы, СтатьяОборотов = Неопределено) 
	
	// ----------------------------------------------------------------------
	// Оформление реквизитов строк по статьям оборотов.
	УдалитьСтароеОформление = Ложь;
	ПрефиксКонтейнера = "Объект.";
	
	Если СтатьяОборотов = Неопределено Тогда
		УдалитьСтароеОформление = Истина;
		// Формирование массива статей, по которым нужно добавить элементы УО.
		ТаблицаПоиска = Объект[ПрефиксТаблицы].Выгрузить();
		МассивСтатей = ТаблицаПоиска.ВыгрузитьКолонку("СтатьяОборотов");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		ЭтаФорма["фСписокСтатей" + ПрефиксТаблицы].ЗагрузитьЗначения(МассивСтатей);
	Иначе // Работаем только с одной статьей оборотов.		
		МассивСтатей = Новый Массив; 		
		НайденноеЗначение = ЭтаФорма["фСписокСтатей" + ПрефиксТаблицы].НайтиПоЗначению(СтатьяОборотов);
		Если НайденноеЗначение = Неопределено Тогда	
			МассивСтатей.Добавить(СтатьяОборотов);
			ЭтаФорма["фСписокСтатей" + ПрефиксТаблицы].Добавить(СтатьяОборотов);		
		КонецЕсли;  		
	КонецЕсли;	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОтметитьОбязательныеРазрезыСтатей", Истина);
	бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление, МассивСтатей, УдалитьСтароеОформление, ПрефиксКонтейнера, ПрефиксТаблицы, "", фКэшЗначений.СтруктураДопПолей,,ДопПараметры);
	
КонецПроцедуры

// Процедура устанавливает автоматически видимость колонок таблицы БДДС.
// 
// Параметры:
//  ОбновлятьБезусловно - Булево (по умолчанию = Ложь).
// 
&НаСервере
Процедура УстановитьАвтовидимостьКолонок(ОбновлятьБезусловно = Ложь)
	
	ИмяТабличнойЧасти = "БДДС";
	ИмяМассива = "МассивСтатей_" + ИмяТабличнойЧасти;
	Если фАвтовидимостьКолонок Тогда
		ТаблРез = Объект[ИмяТабличнойЧасти].Выгрузить();
		МассивСтатей = ТаблРез.ВыгрузитьКолонку("СтатьяОборотов");
		НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(МассивСтатей, фКэшЗначений[ИмяМассива],
			фКэшЗначений.НастройкаВидимостиКолонок);
		Если НеобходимоИзменение Тогда
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы, фКэшЗначений.НастройкаВидимостиКолонок,
				ИмяТабличнойЧасти);
		КонецЕсли; 
	Иначе
		Если ОбновлятьБезусловно Тогда
			НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(Новый Массив, фКэшЗначений[ИмяМассива],
				фКэшЗначений.НастройкаВидимостиКолонок);
																		
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы, фКэшЗначений.НастройкаВидимостиКолонок,
				ИмяТабличнойЧасти);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияСтрокиТаблицыБДДС()
	
	УстановитьАвтовидимостьКолонок();
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа.
// 
// 
&НаСервере
Процедура ИзменениеВалютыСервер(ПересчитатьСуммы, ВалютаНач = Неопределено)
	
	СтрНач = бит_КурсыВалютКлиентСервер.СтруктураКурса(ВалютаНач, Объект.КурсДокумента, Объект.КратностьДокумента);
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеВалютыОбъект();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	Если ПересчитатьСуммы И ЗначениеЗаполнено(ВалютаНач) Тогда
		СтрКон = бит_КурсыВалютКлиентСервер.СтруктураКурса(Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
		КурсыДок = Новый Структура("Нач, Кон", СтрНач, СтрКон);
		ПересчитатьТабличныеЧастиПоВалюте(КурсыДок);
	КонецЕсли; // Пересчитать.
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб) Начало 2019-10-01 (#3490)
	Для Каждого СтрокаТаблицы Из Объект.БДДС Цикл 
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;	
	КонецЦикла;
	//ОКЕЙ Рычаков А.С.(СофтЛаб) Конец 2019-10-01 (#3490)
		
КонецПроцедуры

// Процедура обрабатывает изменение сценария.
// 
&НаСервере
Процедура ИзменениеСценарияСервер(ПересчитатьСуммы, ПерезаполнитьНормы)
	
	ВалютаНач = Объект.ВалютаДокумента;
	СтрНач = бит_КурсыВалютКлиентСервер.СтруктураКурса(ВалютаНач, Объект.КурсДокумента, Объект.КратностьДокумента);	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеСценарияОбъект();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	СтрКон = бит_КурсыВалютКлиентСервер.СтруктураКурса(Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
	Если ПересчитатьСуммы И ЗначениеЗаполнено(ВалютаНач) Тогда
		КурсыДок = Новый Структура("Нач, Кон", СтрНач, СтрКон);
		ПересчитатьТабличныеЧастиПоВалюте(КурсыДок);
	КонецЕсли; // Пересчитать.
	Если ПерезаполнитьНормы Тогда
		бит_Бюджетирование.ПерезаполнитьНормыТабЧасти(Объект.ПараметрНорм, Объект.Сценарий, Объект.БДДС, СтрКон, фИменаПараметраНорм, Объект.ЕдиницаИзмеренияСумм);
	КонецЕсли; 	
	
КонецПроцедуры

// Процедура обрабатывает изменение реквизита "ЕдиницаИзмеренияСумм".
// 
// Параметры:
//  ТекущаяЕдиницаИзмеренияСумм - ПеречислениеСсылка.бит_ЕдиницыИзмеренияСумм.
// 
&НаСервере
Процедура ИзменениеЕдиницыИзмерения(ТекущаяЕдиницаИзмеренияСумм)

	ВыполнитьПересчетРазмерностиСумм(ТекущаяЕдиницаИзмеренияСумм);
	
КонецПроцедуры

// Процедура обрабатывает изменение реквизита "Период" в табличной части "БДДС".
// 
// Параметры:
//  ТекИд - Число.
// 
&НаСервере
Процедура ИзменениеПериодаТабличнойЧасти(ТекИд)
	
	ТекущиеДанные = Объект.БДДС.НайтиПоИдентификатору(ТекИд);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьНорму(ТекущиеДанные, "Период");
	
КонецПроцедуры

// Процедура обрабатывает изменение реквизита "СтатьяОборотов" в табличной части "БДДС".
// 
// Параметры:
//  ТекИд - Число.
// 
&НаСервере
Процедура ИзменениеСтатьиОборотовТабличнойЧасти(Идентификатор)
	
	Если ТипЗнч(Идентификатор) = Тип("Число") Тогда
		ТекущиеДанные = Объект.БДДС.НайтиПоИдентификатору(Идентификатор);
	Иначе
		ТекущиеДанные = Идентификатор;
	КонецЕсли; 
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДанныеПоСтатье(ТекущиеДанные);
	ОФормитьТаблицу("БДДС", ТекущиеДанные.СтатьяОборотов);		
	УстановитьАвтовидимостьКолонок();
	
КонецПроцедуры

// Процедура устанавливает данные в строке табличной 
// части в зависимости от настроек статьи оборотов. 
//
// Параметры:
//  ТекущиеДанные - СтрокаТабличнойЧасти.
//
&НаСервере
Процедура УстановитьДанныеПоСтатье(ТекущиеДанные)

	ЗаполнитьНорму(ТекущиеДанные, "СтатьяОборотов");
	НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(ТекущиеДанные.СтатьяОборотов);
	бит_Бюджетирование.УстановитьИспользованиеРесурсов(ТекущиеДанные, НастройкиСтатьи);
	бит_Бюджетирование.УстановитьИспользованиеАналитики(ТекущиеДанные, НастройкиСтатьи, фКэшЗначений.Измерения);
	
КонецПроцедуры

// Процедура выполняет пересчет размерности сумм в документе.
// 
// Параметры:
//  НачЕдиницаИзмеренияСумм - ПеречислениеСсылка.бит_ЕдиницыИзмеренияСумм.
// 
&НаСервере
Процедура ВыполнитьПересчетРазмерностиСумм(НачЕдиницаИзмеренияСумм)
	
	РазмерностьНач = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(НачЕдиницаИзмеренияСумм);
	РазмерностьКон = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(Объект.ЕдиницаИзмеренияСумм);
	Для Каждого ТекСтрока Из Объект.БДДС Цикл
		Если ТекСтрока.СтатьяОборотов.ЭтоКоэффициент Тогда
			// Безразмерные величины не пересчитываем.
			Продолжить;
		КонецЕсли; 
		// Расчитаем сумму в указанных единицах измерения сумм.
		ТекСтрока.Сумма = бит_ОбщегоНазначенияКлиентСервер.ПересчитатьИзРазмерностиВРазмерность(ТекСтрока.Сумма, РазмерностьНач,
			РазмерностьКон);	
		ТекСтрока.Норма = бит_ОбщегоНазначенияКлиентСервер.ПересчитатьИзРазмерностиВРазмерность(ТекСтрока.Норма, РазмерностьНач,
			РазмерностьКон);																				   
	КонецЦикла;
		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)
	
КонецПроцедуры
  
// Процедура заполняет зависимые обороты.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьЗависимыеОборотыСервер()

	Объект.ЗависимыеОбороты.Очистить();
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьЗависимыеОбороты();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	ОФормитьТаблицу("ЗависимыеОбороты");
	Модифицированность = Истина;

КонецПроцедуры

// Процедура обрабатывает изменение параметра норм.
// 
&НаСервере
Процедура ИзменениеПараметраНорм(ПерезаполнитьНормы)

	фИменаПараметраНорм = ПланыВидовХарактеристик.бит_ВидыПроизвольныхПараметров.ПодготовитьСтруктурыСвязи(Объект.ПараметрНорм);
	Если ПерезаполнитьНормы Тогда
		СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);		
		бит_Бюджетирование.ПерезаполнитьНормыТабЧасти(Объект.ПараметрНорм, Объект.Сценарий, Объект.БДДС, СтрКурсаДок, фИменаПараметраНорм, Объект.ЕдиницаИзмеренияСумм);
	КонецЕсли; 

КонецПроцедуры

// Заполняет норму в строке табличной части. 
// 
// Параметры:
//  ТекущиеДанные - СтрокаТабличнойЧасти
//  ИмяПоля - Строка.
// 
&НаСервере
Процедура ЗаполнитьНорму(ВхДанные, ИмяПоля) 

	Если ТипЗнч(ВхДанные) = Тип("Число") Тогда
		ТекущиеДанные = Объект.БДДС.НайтиПоИдентификатору(ВхДанные);
	Иначе	
		ТекущиеДанные = ВхДанные;
	КонецЕсли; 
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если бит_БюджетированиеКлиентСервер.ВыполнятьЗаполнениеНормы(Объект.ПараметрНорм, фИменаПараметраНорм, ИмяПоля, фИспользоватьНормы) Тогда
		Если Объект.Сценарий.ИспользоватьКурсыСценария Тогда
			СтрКурса    = бит_Бюджетирование.ПолучитьКурсПоСценарию(Объект.Сценарий, Объект.ВалютаДокумента, ТекущиеДанные.Период);
			СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, СтрКурса.Курс, СтрКурса.Кратность);
		Иначе
			СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
		КонецЕсли; 
		бит_Бюджетирование.ЗаполнитьНормуВСтроке(ТекущиеДанные, Объект.ПараметрНорм, Объект.Сценарий, СтрКурсаДок, фИменаПараметраНорм, Объект.ЕдиницаИзмеренияСумм);
	КонецЕсли; 

КонецПроцедуры

// Функция определяет изменится ли валюта при изменении сценария.
// 
// Возвращаемое значение:
//  флИзменится - Булево.
// 
&НаСервере
Функция ИзменитсяВалюта()

	флИзменится = Ложь;
	Если ЗначениеЗаполнено(Объект.Сценарий)
		И Объект.Сценарий.Валюта <> Объект.ВалютаДокумента
		И Объект.БДДС.Количество() > 0 Тогда
		флИзменится = Истина;
	КонецЕсли; 
	Возврат флИзменится;
	
КонецФункции

// Выполняет пересчеты табличных частей при изменении валюты. 
// 
// Параметры:
//  КурсыДок - Структура.
// 
&НаСервере
Процедура ПересчитатьТабличныеЧастиПоВалюте(КурсыДок)
	
	ПоляПересчета = Новый Массив;
	ПоляПересчета.Добавить("Сумма");
	ПоляПересчета.Добавить("Норма");		
	бит_Бюджетирование.ПересчитатьТабЧастьПоВалюте(Объект.БДДС, Объект.Сценарий, КурсыДок, ПоляПересчета);
	
	ПоляПересчета = Новый Массив;
	ПоляПересчета.Добавить("Сумма");
	бит_Бюджетирование.ПересчитатьТабЧастьПоВалюте(Объект.ЗависимыеОбороты, Объект.Сценарий, КурсыДок, ПоляПересчета);
	
КонецПроцедуры

// Процедура заполняет табличную часть данными подбора. 
// 
// Параметры:
//  ВыбранноеЗначение - Структура
//  ОчищатьДанные - Булево.
// 
&НаСервере
Процедура ЗаполнитьТабЧасть(ВыбранноеЗначение, ОчищатьДанные)
	
	Модифицированность = Истина;
	Если ОчищатьДанные Тогда	
		Объект.БДДС.Очистить();	
	КонецЕсли; 
	
	ТаблицаДокумента         = Объект.БДДС.Выгрузить();
	ТаблицаОборотыПоБюджетам = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресОборотовПоБюджетам);
	
	Если СтрСравнить(ВыбранноеЗначение.Режим, "Заменить") = 0 Тогда
		Обработки.бит_ПолучениеДанныхБюджета.ЗаполнитьТабЧастьСЗаменой(ТаблицаОборотыПоБюджетам, ТаблицаДокумента);
	Иначе
		Обработки.бит_ПолучениеДанныхБюджета.ЗаполнитьТабЧасть(ТаблицаОборотыПоБюджетам, ТаблицаДокумента);
	КонецЕсли;
	Объект.БДДС.Загрузить(ТаблицаДокумента);
	
	ОФормитьТаблицу("БДДС");
	ТекстСообщения =  НСтр("ru = 'Заполнение завершено.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)
	
КонецПроцедуры

// Процедура заполняет табличную часть БДДС данными по курсовым разницам.
// 
// Параметры:
// 	нет.
// 
&НаСервере
Процедура ЗаполнитьДанныеБюджетаПоКурсовымРазницам()
	
	Таб = ПолучитьДанныеДляБюджетаПоКурсовымРазницам();
	Объект.БДДС.Загрузить(Таб);
	ОФормитьТаблицу("БДДС");
	
КонецПроцедуры

// Функция получает таблицу данных по сформированным проводкам бух.учета по курсовым разницам.
// 
// Параметры:
// 	нет
// 
// Возвращаемое значение:
// 	Таб - ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьДанныеДляБюджетаПоКурсовымРазницам()
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.АккредитивыВал);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);
	
	ВидыПрочихДоходовИРасходов = Новый Массив;
	ВидыПрочихДоходовИРасходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ВидыПрочихДоходовИРасходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	
	РазмерностьЕдиницы = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(Объект.ЕдиницаИзмеренияСумм);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",				НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("КонецПериода",				КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Счета",						Счета);
	Запрос.УстановитьПараметр("КорСчета",					КорСчета);
	Запрос.УстановитьПараметр("ВидыПрочихДоходовИРасходов",	ВидыПрочихДоходовИРасходов);
	Запрос.УстановитьПараметр("РазмерностьЕдиницы",			РазмерностьЕдиницы);
	Запрос.УстановитьПараметр("КурсДокумента",				Объект.КурсДокумента);
	Запрос.УстановитьПараметр("КратностьДокумента",			Объект.КратностьДокумента);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТПрочиеДоходыИРасходы
	               |ИЗ
	               |	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	               |ГДЕ
	               |	(ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВидыПрочихДоходовИРасходов)
	               |			ИЛИ ПрочиеДоходыИРасходы.Ссылка = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты))
	               |	И НЕ ПрочиеДоходыИРасходы.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл КАК СтатьяРегл,
	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов КАК СтатьяОборотов
	               |ПОМЕСТИТЬ ВТСоответствиеСтатейБезСчетовУчетаБУ
	               |ИЗ
	               |	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	               |ГДЕ
	               |	бит_СтатьиОборотов_СтатьиРегл.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяССылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяРегл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл КАК СтатьяРегл,
	               |	бит_СтатьиОборотов_СтатьиРегл.СчетУчетаБУ КАК СчетУчетаБУ,
	               |	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов КАК СтатьяОборотов
	               |ПОМЕСТИТЬ ВТСоответствиеСтатейСчетовУчетаБУ
	               |ИЗ
	               |	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	               |ГДЕ
	               |	бит_СтатьиОборотов_СтатьиРегл.СчетУчетаБУ <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяССылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СтатьяРегл,
	               |	СчетУчетаБУ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ХозрасчетныйОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	               |	ХозрасчетныйОбороты.Субконто1 КАК ПрочиеДоходыИРасходы,
	               |	&СтрокаПодразделение КАК Подразделение,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.СуммаОборот < 0
	               |			ТОГДА ХозрасчетныйОбороты.СуммаОборот * -1 / &РазмерностьЕдиницы
	               |		ИНАЧЕ ХозрасчетныйОбороты.СуммаОборот / &РазмерностьЕдиницы
	               |	КОНЕЦ КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.КоличествоОборот < 0
	               |			ТОГДА ХозрасчетныйОбороты.КоличествоОборот * -1
	               |		ИНАЧЕ ХозрасчетныйОбороты.КоличествоОборот
	               |	КОНЕЦ КАК Количество,
	               |	&СтрокаПериод КАК Период,
	               |	ХозрасчетныйОбороты.Организация КАК Организация,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.КорСубконто1) = ТИП(Справочник.БанковскиеСчета)
	               |			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК БанковскийСчет,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.КорСубконто1) = ТИП(Справочник.БанковскиеСчета)
	               |			ТОГДА ХозрасчетныйОбороты.КорСубконто1.Владелец
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК Контрагент,
	               |	ХозрасчетныйОбороты.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ВТКурсовыеРазницы
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			Запись,
	               |			Счет В (&Счета),
	               |			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	               |			Субконто1 В
	               |				(ВЫБРАТЬ
	               |					ВТПрочиеДоходыИРасходы.Ссылка
	               |				ИЗ
	               |					ВТПрочиеДоходыИРасходы),
	               |			КорСчет В (&КорСчета),
	               |			) КАК ХозрасчетныйОбороты
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ПрочиеДоходыИРасходы,
	               |	Счет,
	               |	Подразделение,
	               |	Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТКурсовыеРазницы.Сумма * &КратностьДокумента / &КурсДокумента КАК Сумма,
	               |	ВТКурсовыеРазницы.Количество КАК Количество,
	               |	ЕСТЬNULL(ВТСоответствиеСтатейСчетовУчетаБУ.СтатьяОборотов, ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)) КАК СтатьяОборотов,
	               |	ВЫБОР
	               |		КОГДА бит_ЦФО_Подразделения_Подразделения.ЦФО ЕСТЬ NULL
	               |			ТОГДА бит_ЦФО_Подразделения_Организации.ЦФО
	               |		ИНАЧЕ бит_ЦФО_Подразделения_Подразделения.ЦФО
	               |	КОНЕЦ КАК ЦФО,
	               |	ВТКурсовыеРазницы.Период КАК Период,
	               |	ВЫБОР
	               |		КОГДА ВТСоответствиеСтатейСчетовУчетаБУ.СтатьяОборотов ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |		КОГДА ВТСоответствиеСтатейСчетовУчетаБУ.СтатьяОборотов.Учет_БанковскийСчет
	               |			ТОГДА ВТКурсовыеРазницы.БанковскийСчет
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |	КОНЕЦ КАК БанковскийСчет,
	               |	ВЫБОР
	               |		КОГДА ВТСоответствиеСтатейСчетовУчетаБУ.СтатьяОборотов ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |		КОГДА ВТСоответствиеСтатейСчетовУчетаБУ.СтатьяОборотов.Учет_Контрагент
	               |			ТОГДА ВТКурсовыеРазницы.Контрагент
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	КОНЕЦ КАК Контрагент,
	               |	ВТКурсовыеРазницы.Регистратор КАК Комментарий,
	               |	ВТКурсовыеРазницы.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы,
	               |	ВТКурсовыеРазницы.Счет КАК Счет,
	               |	ВТКурсовыеРазницы.БанковскийСчет КАК СубконтоБанковскийСчет,
	               |	ВТКурсовыеРазницы.Контрагент КАК СубконтоКонтрагент
	               |ПОМЕСТИТЬ ВТКурсовыеРазницыПоСчетам
	               |ИЗ
	               |	ВТКурсовыеРазницы КАК ВТКурсовыеРазницы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеСтатейСчетовУчетаБУ КАК ВТСоответствиеСтатейСчетовУчетаБУ
	               |		ПО ВТКурсовыеРазницы.ПрочиеДоходыИРасходы = ВТСоответствиеСтатейСчетовУчетаБУ.СтатьяРегл
	               |			И ВТКурсовыеРазницы.Счет = ВТСоответствиеСтатейСчетовУчетаБУ.СчетУчетаБУ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ЦФО_Подразделения КАК бит_ЦФО_Подразделения_Подразделения
	               |		ПО ВТКурсовыеРазницы.Подразделение = бит_ЦФО_Подразделения_Подразделения.Подразделение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ЦФО_Подразделения КАК бит_ЦФО_Подразделения_Организации
	               |		ПО ВТКурсовыеРазницы.Организация = бит_ЦФО_Подразделения_Организации.Подразделение
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТКурсовыеРазницы.ПрочиеДоходыИРасходы,
	               |	ВТКурсовыеРазницы.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВТКурсовыеРазницыПоСчетам.Сумма) КАК Сумма,
	               |	СУММА(ВТКурсовыеРазницыПоСчетам.Количество) КАК Количество,
	               |	ЕСТЬNULL(ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов, ВТКурсовыеРазницыПоСчетам.СтатьяОборотов) КАК СтатьяОборотов,
	               |	ВТКурсовыеРазницыПоСчетам.ЦФО КАК ЦФО,
	               |	ВТКурсовыеРазницыПоСчетам.Период КАК Период,
	               |	ВЫБОР
	               |		КОГДА ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов ЕСТЬ NULL
	               |			ТОГДА ВТКурсовыеРазницыПоСчетам.БанковскийСчет
	               |		КОГДА ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов.Учет_БанковскийСчет
	               |			ТОГДА ВТКурсовыеРазницыПоСчетам.СубконтоБанковскийСчет
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |	КОНЕЦ КАК БанковскийСчет,
	               |	ВЫБОР
	               |		КОГДА ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов ЕСТЬ NULL
	               |			ТОГДА ВТКурсовыеРазницыПоСчетам.Контрагент
	               |		КОГДА ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов.Учет_Контрагент
	               |			ТОГДА ВТКурсовыеРазницыПоСчетам.Контрагент
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	КОНЕЦ КАК Контрагент,
	               |	ВТКурсовыеРазницыПоСчетам.Комментарий КАК Комментарий
	               |ИЗ
	               |	ВТКурсовыеРазницыПоСчетам КАК ВТКурсовыеРазницыПоСчетам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеСтатейБезСчетовУчетаБУ КАК ВТСоответствиеСтатейБезСчетовУчетаБУ
	               |		ПО ВТКурсовыеРазницыПоСчетам.ПрочиеДоходыИРасходы = ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяРегл
	               |			И (ВТКурсовыеРазницыПоСчетам.СтатьяОборотов = ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов, ВТКурсовыеРазницыПоСчетам.СтатьяОборотов),
	               |	ВТКурсовыеРазницыПоСчетам.ЦФО,
	               |	ВТКурсовыеРазницыПоСчетам.Период,
	               |	ВЫБОР
	               |		КОГДА ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов ЕСТЬ NULL
	               |			ТОГДА ВТКурсовыеРазницыПоСчетам.БанковскийСчет
	               |		КОГДА ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов.Учет_БанковскийСчет
	               |			ТОГДА ВТКурсовыеРазницыПоСчетам.СубконтоБанковскийСчет
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов ЕСТЬ NULL
	               |			ТОГДА ВТКурсовыеРазницыПоСчетам.Контрагент
	               |		КОГДА ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов.Учет_Контрагент
	               |			ТОГДА ВТКурсовыеРазницыПоСчетам.Контрагент
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	КОНЕЦ,
	               |	ВТКурсовыеРазницыПоСчетам.Комментарий,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов, ВТКурсовыеРазницыПоСчетам.СтатьяОборотов) = НЕОПРЕДЕЛЕНО
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПУстаяссылка)
	               |		ИНАЧЕ ВТСоответствиеСтатейБезСчетовУчетаБУ.СтатьяОборотов
	               |	КОНЕЦ";
	
	ИзмерениеПодразделение = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Измерения.Найти("Подразделение");
	Если ИзмерениеПодразделение = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаПодразделение", "НЕОПРЕДЕЛЕНО");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаПодразделение", "ХозрасчетныйОбороты.ПодразделениеКор");
	КонецЕсли;
	                        
	СтрПериодичность = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования,Объект.Сценарий.бит_Периодичность);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаПериод", "НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, "+СтрПериодичность+")");
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Таб = Результат.Выгрузить();
	
	Возврат Таб;
	
КонецФункции

//  Процедура перезаполняет табличную часть "БДДС" после групповой замены аналитик.
// 
&НаСервере
Процедура ПерезаполнитьТабличнуюЧасть(ХранилищеДанные)

	Если НЕ ЭтоАдресВременногоХранилища(ХранилищеДанные) Тогда
		Возврат;
	КонецЕсли; 
	
	Модифицированность = Истина;
	ДанныеЗаполнения   = ПолучитьИзВременногоХранилища(ХранилищеДанные);
	
	Для каждого Строка Из ДанныеЗаполнения Цикл
		ТекущиеДанные = Объект.БДДС[Строка.ИД];
		ТекущиеДанные[Строка.Реквизит] = Строка.Значение;
		Если Строка.Реквизит = "СтатьяОборотов" Тогда
			ИзменениеСтатьиОборотовТабличнойЧасти(ТекущиеДанные);
		КонецЕсли; 
	КонецЦикла; 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораБюджета(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.Режим = "Заполнить" 
		И Объект.БДДС.Количество() > 0 Тогда 
		// В режиме заполнения существующие данные следует очистить.
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		бит_РаботаСДиалогамиКлиент.ЗапросПодтвержденияОчисткиДанных(ЭтаФорма, ДопПараметры);
	Иначе
		ЗаполнитьТабЧасть(ВыбранноеЗначение, Ложь);
	КонецЕсли; // Режим заполнения.
	
КонецПроцедуры

// Процедура получает вид проформы и эмулирует метаданные проформы. 
//
// Параметры:
//  ИмяПроформы - Строка.
//
&НаСервереБезКонтекста
Функция ДанныеВидаПроформы(ИмяПроформы)

	РезСтр = Документы.бит_Проформы.ДанныеВидаПроформы(ИмяПроформы);
	Возврат РезСтр;

КонецФункции

// Процедура распознает данные, загруженные из Эксель и записывает в текущий документ.
// 
// Параметры:
//  КомплектДанных - Структура.
// 
&НаСервере
Процедура ОбработатьЗагруженныеДанные(Знач КомплектДанных, Режим)
	
	СпискиИсточники  = КомплектДанных.СпискиИсточники;
	ПсевдоМетаданные = КомплектДанных.ПсевдоМетаданные;
	МодельДокумента  = КомплектДанных.МодельДокумента;
	
	Если МодельДокумента.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для загрузки. Возможно выбран файл, не соответсвующий данному виду проформы.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	Документы.бит_Проформы.РаспознатьДанные(МодельДокумента, ПсевдоМетаданные, СпискиИсточники);
	
	ИмяТаблицыДанных = Документы.бит_Проформы.ИмяТаблицыДляЗагрузкиДанныхБюджета(ПсевдоМетаданные);
	
	// Проверка состава обязательных колонок таблицы.	
	МетаТаб = КомплектДанных.ПсевдоМетаданные.ТабличныеЧасти[ИмяТаблицыДанных];
	ИменаОбязательных = Новый Массив;
	ИменаОбязательных.Добавить("Период");
	ИменаОбязательных.Добавить("СтатьяОборотов");
	ИменаОбязательных.Добавить("ЦФО");
	ИменаОбязательных.Добавить("Сумма");
	
	НетПолей = Новый Массив; 
	Отказ 	 = Ложь;
	Для каждого ТекИмя Из ИменаОбязательных Цикл
		Если МетаТаб.Реквизиты.Найти(ТекИмя) = Неопределено Тогда
			НетПолей.Добавить(ТекИмя);
		КонецЕсли; 
	КонецЦикла; 

	Если НетПолей.Количество() <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'В шаблоне проформы отсутствуют обязательные поля:'") 
								 + Символы.ПС + СтрСоединить(НетПолей, ",");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ); 
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Режим = "Загрузить" Тогда
		Объект.БДДС.Очистить();
		Объект.ЗависимыеОбороты.Очистить();
	КонецЕсли; 
	
	ТаблицаДанныхБюджета = МодельДокумента[ИмяТаблицыДанных].ТаблицаДанных;
	
	// проверим существование колонок.
	КолонкиПроверены = Новый Структура;
	
	МетаДок = Объект.Ссылка.Метаданные();
	Для каждого Колонка Из ТаблицаДанныхБюджета.Колонки Цикл
		Если бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(Колонка.Имя, МетаДок, "БДДС") Тогда
			 КолонкиПроверены.Вставить(Колонка.Имя, Истина);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныхБюджета  Цикл
		НоваяСтрока = Объект.БДДС.Добавить();
		Для каждого КиЗ Из КолонкиПроверены Цикл
			ИмяКолонки = КиЗ.Ключ;
			НоваяСтрока[ИмяКолонки] = СтрокаТаблицы[ИмяКолонки];
		КонецЦикла; 
		УстановитьДанныеПоСтатье(НоваяСтрока);
	КонецЦикла; 
	
	ОФормитьТаблицу("БДДС");	
	УстановитьАвтовидимостьКолонок();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)
	
КонецПроцедуры

// Процедура выполняет распределение по аналитике.
//
// Параметры:
//  ИдСтроки - Число
//  НастройкиРаспределения - Структура.
//
&НаСервере
Процедура ВыполнитьРаспределение(МассивИдСтрок, НастройкиРаспределения)
	
	Для каждого ИдСтроки Из МассивИдСтрок Цикл
		СтрокаИсточник = Объект.БДДС.НайтиПоИдентификатору(ИдСтроки);	
		Если СтрокаИсточник <> Неопределено Тогда
			// Распределение по профилю.
			МассивСтрок = бит_Бюджетирование.РаспределитьПоПрофилюАналитики(НастройкиРаспределения, Объект.БДДС, СтрокаИсточник);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла; // по ИД строк.
	
КонецПроцедуры

&НаСервере
Функция НачалоТекущегоПериода()
	
	ДатаОтсчета           = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	НачалоТекущегоПериода = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаОтсчета, Объект.Сценарий.бит_Периодичность);
	
	Возврат НачалоТекущегоПериода;
	
КонецФункции

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаСервере 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	НаборРеквизитов = Новый Структура;
	НаборРеквизитов.Вставить("Дата");
	НаборРеквизитов.Вставить("РежимЗависимыхОборотов");
	НаборРеквизитов.Вставить("ЕдиницаИзмеренияСумм");
	НаборРеквизитов.Вставить("ПараметрНорм");
	НаборРеквизитов.Вставить("ВалютаДокумента");
	НаборРеквизитов.Вставить("Сценарий");	

	ЗаполнитьЗначенияСвойств(НаборРеквизитов, Объект);
	
	КонтролируемыеРеквизиты = Новый ФиксированнаяСтруктура(НаборРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	НаборРеквизитов = Новый Структура;
	Для каждого КлючЗначение Из КонтролируемыеРеквизиты Цикл
		НаборРеквизитов.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла; 
	НаборРеквизитов.Вставить(КлючЗначение.Ключ, Объект[ИмяРеквизита]);
	
	КонтролируемыеРеквизиты = Новый ФиксированнаяСтруктура(НаборРеквизитов);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = КонтролируемыеРеквизиты[ИмяРеквизита];
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Обработка оповещения закрытия формы. 
// 
// Параметры:
//  РезСтруктура - Структура.
//  ДопПараметры - Структура.
// 
&НаКлиенте
Процедура ЗакрытиеФормыВопросПриИзмененииСценария(РезСтруктура, ДопПараметры) Экспорт

	Если ТипЗнч(РезСтруктура) = Тип("Структура") Тогда
		флПересчитатьСуммы   = РезСтруктура.ПересчитатьСуммы;
		флПерезаполнитьНормы = РезСтруктура.ПерезаполнитьНормы;
		// Изменяем валюту документа на валюту из сценария.
		Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
			ИзменениеСценарияСервер(флПересчитатьСуммы, флПерезаполнитьНормы);
		КонецЕсли;   
		ДобавитьВКэш("Сценарий");
		ДобавитьВКэш("ВалютаДокумента")
	Иначе	
		ИзвлечьИзКэша("Сценарий");
	КонецЕсли;

КонецПроцедуры

// Процедура открывает отбработку получения данных в различных режимах заполнения. 
// 
&НаКлиенте
Процедура ОткрытьОбработкуПолучения(РежимЗаполнения)

	флОткрытьПодбор = Истина;
	Если Модифицированность Тогда
		ТекстВопроса =  НСтр("ru = 'Перед выполнением действия документ необходимо записать. Записать документ?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОткрытьОбработкуПолучения", ЭтотОбъект, РежимЗаполнения);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе
		ВызватьФормуПодбораБюджета(РежимЗаполнения); 
	КонецЕсли; 
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросОткрытьОбработкуПолучения(Ответ, РежимЗаполнения) Экспорт

	ЗаписатьПередВыполнением = (Ответ = КодВозвратаДиалога.Да);
	Если ЗаписатьПередВыполнением И Записать() Тогда
		ВызватьФормуПодбораБюджета(РежимЗаполнения);	
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВызватьФормуПодбораБюджета(РежимЗаполнения)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	ПараметрыЗаполнения.Вставить("КурсДокумента",        Объект.КурсДокумента);
	ПараметрыЗаполнения.Вставить("КратностьДокумента",   Объект.КратностьДокумента);
	ПараметрыЗаполнения.Вставить("Сценарий",             Объект.Сценарий);
	ПараметрыЗаполнения.Вставить("ЕдиницаИзмеренияСумм", Объект.ЕдиницаИзмеренияСумм);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("ДатаДок",             Объект.Дата);
	ПараметрыФормы.Вставить("ДокументЗаполнения",  Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимЗаполнения",     РежимЗаполнения);
	
	ОткрытьФорму("Обработка.бит_ПолучениеДанныхБюджета.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция РаспределениеПоддерживается(ДанныеСтроки, ПолеФормы)
	
	Поддерживается = Истина;
	ТекстСообщения = "";
	Разрез  = СтрЗаменить(ПолеФормы.Имя, "БДДС", "");
	Представление = "";
	
	Если НЕ ПустаяСтрока(ПолеФормы.Заголовок) Тогда
		Представление = ПолеФормы.Заголовок;
	Иначе	
		Представление = Разрез;  
	КонецЕсли; 
	
	Если Поддерживается Тогда
		Исключения = Новый Массив;
		// Технологические.
		Исключения.Добавить(Элементы.БДДСНомерСтроки);
		// Значащие.
		Исключения.Добавить(Элементы.БДДССумма);
		Исключения.Добавить(Элементы.БДДСНорма);
		Исключения.Добавить(Элементы.БДДСКоличество);
		Исключения.Добавить(Элементы.БДДСКомментарий);
		Исключения.Добавить(Элементы.БДДССтатьяОборотов);

		Если Исключения.Найти(ПолеФормы) <> Неопределено Тогда
			Поддерживается = Ложь;
			ТекстСообщения = НСтр("ru = 'По этой колонке распределение не поддерживается.'");
		КонецЕсли;
	КонецЕсли; 
	
	Если Поддерживается И НЕ ПолеФормы = Элементы.БДДСПериод Тогда
		// Если по статье не ведется учет по данной аналитике - распределение невозможно.		
		НастройкиСтатьи = ПолучитьНастройкиСтатьи(ДанныеСтроки.СтатьяОборотов);
		Если НЕ НастройкиСтатьи = Неопределено Тогда
			ВедетсяУчет = Ложь;
			НастройкиСтатьи.Свойство("Учет_" + Разрез, ВедетсяУчет);
			Если НЕ ВедетсяУчет = Истина Тогда
				Поддерживается = Ложь;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для статьи ""%1"" по аналитике ""%2"" учет не ведется. Распределение не поддерживается.'"),
									ДанныеСтроки.СтатьяОборотов, Представление);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ Поддерживается Тогда
		ПоказатьПредупреждение(, ТекстСообщения,, Нстр("ru = 'Распределить по ...'"));	
	КонецЕсли; 
	
	Возврат Поддерживается;
	
КонецФункции

// Оповещение на вопрос о подтверждение очистки.
//
// Параметры:
//  Результат    - КодВозвратаДиалога.
//  ДопПараметры - Структура.
//
&НаКлиенте
Процедура ОтветНаПотверждениеОчистки(РезультатОтвет, ДопПараметры) Экспорт
	
	ОчищатьДанные = РезультатОтвет = КодВозвратаДиалога.Да;
    Если ОчищатьДанные Тогда
        ЗаполнитьТабЧасть(ДопПараметры.ВыбранноеЗначение, ОчищатьДанные);
    КонецЕсли;
    
КонецПроцедуры

#Область РаботаСExcel

&НаКлиенте
// Процедура открывает форму обработки бит_ЗагрузкаДанныхИзТабличногоДокумента проверяя записан ли документ. 
//
// Параметры:
//  ИмяТаблицы - Строка.
//
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДок(ИмяТаблицы)
    
    ДопПараметры = Новый Структура("ИмяТаблицы", ИмяТаблицы);
       
    Если Параметры.Ключ.Пустая() Тогда  
        
        ТекстВопроса = НСтр("ru='Данные еще не записаны. 
		|Выполнение действия ""Загрузить через табличный документ"" возможно только после записи данных.
		|Записать?'");				
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗаписатьДокументДляЗагрузкиЧерезТД", ЭтотОбъект, ДопПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        
    Иначе
        
        ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание(ДопПараметры);
        
    КонецЕсли;	
		
КонецПроцедуры // ОткрытьФормуЗагрузкиДанныхЧерезТабДок()

&НаКлиенте
// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Результат               - Строка.
//  ДополнительныеПараметры - Структура.
//
Процедура ВопросЗаписатьДокументДляЗагрузкиЧерезТД(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
   	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
        
        ЗаписьВыполнена = Записать();        
        Если ЗаписьВыполнена Тогда
            
            // Флаг модифицированности автоматически не снимается.
            ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание(ДополнительныеПараметры);
            
        КонецЕсли;
    
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
// Процедура открывает форму обработки бит_ЗагрузкаДанныхИзТабличногоДокумента. 
//
// Параметры:
//  ДополнительныеПараметры - Структура.
//
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание(ДополнительныеПараметры)

    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимЗагрузки"		 , "ТабличнаяЧасть");
    ПараметрыФормы.Вставить("ОбъектМетаданных"   , "Документ.бит_БюджетнаяОперация");
    ПараметрыФормы.Вставить("ОбъектДляЗаполнения", Объект.Ссылка);
    ПараметрыФормы.Вставить("ИмяТабЧасти"        , ДополнительныеПараметры.ИмяТаблицы);
    
    ОткрытьФорму("Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента.Форма"
                    , ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
  	                   
КонецПроцедуры // ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание() 

// Процедура восстанавливает загруженные из Excel данные.
//
// Параметры:
//  ОбъектДляЗаполнения - ДанныеФормыСтруктура.
//  ИмяТабЧасти         - Строка.
//  
&НаСервере
Процедура ВосстановитьЗагруженныеИзExcelДанные(ИмяТабЧасти, Знач ОбъектДляЗаполнения = Неопределено)
    
    Если ТипЗнч(ОбъектДляЗаполнения) = Тип("ДокументСсылка.бит_БюджетнаяОперация") Тогда
        ОбъектДляЗаполнения_Объект = ОбъектДляЗаполнения.ПолучитьОбъект();
		ЗначениеВДанныеФормы(ОбъектДляЗаполнения_Объект, Объект);   
    КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыИзмененияТаблицыДокумента()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Команда",			"бит_БюджетнаяОперация");
	ПараметрыФормы.Вставить("Объект",			Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти","БДДС");
	ПараметрыФормы.Вставить("ТабличнаяЧасть",	 
		ПоместитьВоВременноеХранилище(Объект.БДДС.Выгрузить(), УникальныйИдентификатор));
		
	Возврат ПараметрыФормы;	
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	// ЗависимыеОборотыКомментарийРасчета
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыКомментарийРасчета");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Объект.Таблица.АналитикиСтатьи", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Комментарий расчета>'"));
	
	// ЗависимыеОборотыСумма, ЗависимыеОборотыНДС, БДДСНДС
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БДДСНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЕдиницаИзмеренияСумм", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "Л=ru_RU; ЧЦ=15; ЧДЦ=2; ЧС=");
	
	// ЗависимыеОборотыСумма, ЗависимыеОборотыНДС, БДДСНДС
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БДДСНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЕдиницаИзмеренияСумм", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ЕдиницыИзмеренияСумм.Тысячи);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "Л=ru_RU; ЧЦ=15; ЧДЦ=5; ЧС=3");
	
	// ЗависимыеОборотыСумма, ЗависимыеОборотыНДС, БДДСНДС
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БДДСНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ЕдиницаИзмеренияСумм", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ЕдиницыИзмеренияСумм.Миллионы);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "Л=ru_RU; ЧЦ=15; ЧДЦ=8; ЧС=6");

КонецПроцедуры 
 

#КонецОбласти

//СофтЛаб Начало 2018-11-20 3091
&НаКлиенте
Процедура ок_ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ок_ДокументОснование) Тогда
	
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеПоДокументуОснованиеВопрос", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Документ будет заполнен по документу основания """ + Объект.ок_ДокументОснование + """. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеПоДокументуОснованиеВопрос(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗагрузитьДанныеПоДокументуОснованиеНаСервере();

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПоДокументуОснованиеНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ок_ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект")
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснования(Команда)
	
	Если ЗначениеЗаполнено(Объект.ок_ДокументОснование) Тогда
	
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеПоДокументуОснованиеВопрос", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Документ будет заполнен по документу основания """ + Объект.ок_ДокументОснование + """. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры
//СофтЛаб Конец 2018-11-20 3091

//bit_SVKushnirenko 27.01.2017 #2657
//Прокладка для вызова серверного метода из клиента на форме
// Параметры:
//парСсылка - ссылка на текущий документ
&НаСервереБезКонтекста
Функция ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(парСсылка)

	Возврат бит_БК_Общий.ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(парСсылка);
КонецФункции // ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях()

//БИТ АКриштопов 20.04.2016 ++
&НаКлиенте
Процедура бит_КопированиеДанныхБюджетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		бит_КопированиеДанныхБюджетаЗавершениеНаСервере(Результат);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
		ОбновитьИтоги(ЭтаФорма);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция бит_КопированиеДанныхБюджетаЗавершениеНаСервере(Результат)
	
	Если Результат.РежимЗагрузки = "Загрузка" Тогда
		Объект.БДДС.Очистить();
		Объект.ЗависимыеОбороты.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.СтрокиДляЗаполнения) Тогда
		СтрокиДляЗаполнения = ПолучитьИзВременногоХранилища(Результат.СтрокиДляЗаполнения);	
		
		Если ТипЗнч(СтрокиДляЗаполнения) = Тип("Массив") Тогда
			Для Каждого ТекСтрока Из СтрокиДляЗаполнения Цикл
				
				НоваяСтрока = Объект.БДДС.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.Период = ТекСтрока.ПериодДляЗаполнения;
				
				//НоваяСтрока.Количество = ТекСтрока.КоличествоДляЗаполнения;
				НоваяСтрока.Сумма =ТекСтрока.СуммаСценарийДляЗаполнения;
				
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	

КонецФункции

Функция РассчитатьНДС(Сумма, СуммаВключаетНДС, ТекСтрока)
	//БИТ Соломина 20160128 ( /ставку ндс берем из тч, а не из статьи оборотов
	Если СуммаВключаетНДС Тогда 
		НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтрока.бит_СтавкаНДС));
	Иначе
		НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Сумма, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтрока.бит_СтавкаНДС));
	КонецЕсли;
	Возврат НДС;
	//БИТ )
КонецФункции

&НаСервере
Функция  ЗаполнитьПоЗавкеНаСервере()
	
	
	//СтрокиЗаявки = Объект.НомерЗаявки.БДДС.Выгрузить();
	//
	//// + БИТ AMerkulov 2013-12-10 /  Универсальная заявка
	//Если Объект.НомерЗаявки.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда
	//	
	//	МассивКУдалению = Новый Массив;
	//	Для Каждого Стр Из СтрокиЗаявки Цикл
	//		Если Стр.Сценарий <> Справочники.бит_СценарииБюджетирования.Заявка_У Тогда
	//			МассивКУдалению.Добавить(Стр);
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Для Каждого Стр Из МассивКУдалению Цикл
	//		СтрокиЗаявки.Удалить(Стр);	
	//	КонецЦикла;
	//	
	//	
	//КонецЕсли;
	//// - БИТ AMerkulov
	//
	//СтрокиЗаявки.Колонки.Вставить(0,"Выбран",Новый ОписаниеТипов("Булево") ,,);
	////Форма = ЭтотОбъект.ПолучитьФорму("ФормаВыбораСтрокЗаявки",ЭлементыФормы.КонтрольБюджета);
	////Форма.ЭлементыФормы.ТабличноеПолеВыбора.Значение = СтрокиЗаявки;
	////Форма.СуммаДляЗагрузки = СтрокиЗаявки.Итог("бит_БК_СуммаБезНДС");
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("СтрокиЗаявки",СтрокиЗаявки);

	//Возврат ПараметрыФормы;   

КонецФункции
&НаКлиенте
Процедура ЗаполнитьПоЗавке(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерЗаявки) Тогда
		Предупреждение("Не выбрана заявка");
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-09 (#3078)	
	////ПараметрыФормы = ЗаполнитьПоЗавкеНаСервере();
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("заявка",Объект.НомерЗаявки);	
	//Оп = Новый ОписаниеОповещения("ЗаполнитьПоЗавявкеОповещение",ЭтаФорма);
	//ОткрытьФорму("Документ.бит_БюджетнаяОперация.Форма.ФормаВыбораСтрокЗаявки",ПараметрыФормы,ЭтаФорма,,,,Оп) ;
	//Заменено на:
	Если Объект.БДДС.Количество()>0 Тогда 	
		пОповещениеОтветНаВопросОбОчисткеПриЗаполненииПоБК = Новый ОписаниеОповещения("ОтветНаВопросОбОчисткеПриЗаполненииПоБК",ЭтотОбъект);
	    ПоказатьВопрос(пОповещениеОтветНаВопросОбОчисткеПриЗаполненииПоБК,НСтр("ru = 'Табличная часть ""Данные бюджета"" будет очищена. Продолжить?'"),РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
	    Возврат;
	КонецЕсли;	 
	 	
	ЗаполнитьБКНаКлиенте();		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-09 (#3078)

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗавявкеОповещение(Результат,Параметры) Экспорт  
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если Результат.СуммаДляЗагрузки = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПереходНаСервер1(Результат);
	
	ПараметрыДляЗагрузки = Новый Структура("Результат",Результат);
	Если Результат.СпособЗагрузки = "Загрузить" И НЕ Объект.БДДС.Количество() = 0 Тогда 
		
	
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗагрузке", ЭтаФорма, ПараметрыДляЗагрузки);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные на закладке <Данные бюджета> будут очищены. Продолжить?';"), Режим,0);
	Иначе
		ЗаполнитьПоЗаявеНаСервере(ПараметрыДляЗагрузки);
	КонецЕсли;

	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗагрузке(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Объект.БДДС.Очистить();
	ЗаполнитьПоЗаявеНаСервере(Параметры);
    
КонецПроцедуры

Процедура ЗаполнитьПоЗаявеНаСервере(Параметры)
	
	мТаблицаДляЗаявки = РеквизитФормыВЗначение("ТаблицаДляЗаявки");
	СтрокиДляЗагрузки = мТаблицаДляЗаявки.Скопировать(Новый Структура("Выбран",Истина));
	СуммаВыбранных = СтрокиДляЗагрузки.Итог("бит_БК_СуммаБезНДС");
	Если СуммаВыбранных = Параметры.Результат.СуммаДляЗагрузки Тогда 
		Коэфф = 1;
	иначе
		Коэфф =  Параметры.Результат.СуммаДляЗагрузки/СуммаВыбранных;
	КонецЕсли;
	//здесь копим сумму округлений
	ОкруглБезНДС = 0;
	ОкруглСНДС = 0;
	Для Каждого ТекСтрока Из СтрокиДляЗагрузки Цикл
		Если НЕ ТекСтрока.Выбран Тогда 
			Продолжить;
		КонецЕсли;
		//округляем в тек. строке
		ТекСуммаБезНДС = ТекСтрока.бит_БК_СуммаБезНДС * Коэфф;
		ОкруглБезНДС = ОкруглБезНДС + (ТекСуммаБезНДС - Окр(ТекСуммаБезНДС,2));
		Если Окр(ОкруглБезНДС,2) <> 0 Тогда
			ТекСуммаБезНДС = ТекСуммаБезНДС + Окр(ОкруглБезНДС,2);
			ОкруглБезНДС = ОкруглБезНДС - Окр(ОкруглБезНДС,2);
		КонецЕсли;
		ТекСуммаСНДС = ТекСтрока.Сумма * Коэфф;
		ОкруглСНДС = ОкруглСНДС + (ТекСуммаСНДС - Окр(ТекСуммаСНДС,2));
		Если Окр(ОкруглСНДС,2) <> 0 Тогда
			ТекСуммаСНДС = ТекСуммаСНДС + Окр(ОкруглСНДС,2);
			ОкруглСНДС = ОкруглСНДС - Окр(ОкруглСНДС,2);
		КонецЕсли;
		
		НоваяСтрока = Объект.БДДС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		НоваяСтрока.Сумма = ТекСуммаБезНДС;
		//НоваяСтрока.НДС = ТекСтрока.НДС * Коэфф;
		//НоваяСтрока.СтавкаНДС = ТекСтрока.СтавкаНДС;
		//НоваяСтрока.СуммаСНДС = ТекСуммаСНДС;
		//НоваяСтрока.Сценарий = ?(ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный,Справочники.бит_СценарииБюджетирования.Факт_У, Справочники.бит_СценарииБюджетирования.Факт_Инвест);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереходНаСервер1(Рез)
	
	ТаблицаИзЗаявки = ПолучитьИзВременногоХранилища(Рез.АдресТаблицыВХранилище);
	//КолонкиИззявки = ТаблицаИзЗаявки.СкопироватьКолонки();
	мТаблицаДляЗаявки = РеквизитФормыВЗначение("ТаблицаДляЗаявки");
	мТаблицаДляЗаявки.Очистить();
	мТаблицаДляЗаявки = ТаблицаИзЗаявки.Скопировать(); 
	МассивУдаляемыхРеквизитов = ПолучитьРеквизиты("ТаблицаДляЗаявки");
	МассивИменУдаляемыхРеквизитов = Новый Массив;
    
    Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
        МассивИменУдаляемыхРеквизитов.Добавить("ТаблицаДляЗаявки" + "." + Элемент.Имя);
    КонецЦикла; 
    
    ИзменитьРеквизиты(,МассивИменУдаляемыхРеквизитов); 
    

	Для Каждого Колонка ИЗ мТаблицаДляЗаявки.Колонки Цикл
		МассивРеквизитов = Новый Массив;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Колонка.ТипЗначения); 	
		
		НоваяКолонка = Новый РеквизитФормы(Колонка.Имя,Новый ОписаниеТипов(Колонка.ТипЗначения), "ТаблицаДляЗаявки");
		МассивРеквизитов.Добавить(НоваяКолонка);
		Попытка
			ИзменитьРеквизиты(МассивРеквизитов);  //Создаются колонки у ТЗ
		Исключение
			МассивРеквизитов = Новый Массив;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Колонка.ТипЗначения);			
			НоваяКолонка = Новый РеквизитФормы(Колонка.Имя,Новый ОписаниеТипов(МассивРеквизитов), "ТаблицаДляЗаявки");
			МассивРеквизитов.Добавить(НоваяКолонка);
			ИзменитьРеквизиты(МассивРеквизитов);
		КонецПопытки;
	КонецЦикла;
	ЗначениеВРеквизитФормы(мТаблицаДляЗаявки,"ТаблицаДляЗаявки");
КонецПроцедуры

// БИТ_YK_н 01/16
&НаКлиенте
Процедура СгенерироватьID(Команда)
	
	Если ЗначениеЗаполнено(Объект.Номер) Тогда
		
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2018-12-04 (#3102)
		ОК_ПодпискиНаСобытия.ПолучитьID_Разноска(Объект, Объект.бит_Организация);
		Возврат;
		//ОКЕЙ Наумов А.Н.(СофтЛаб) Конец 2018-12-04 (#3102)
		
		//ОК Довбешка Т. 09.01.2017
		//Префикс = Формат(1,"ЧЦ=1");
		//
		//ИсходныйНомер = 303840;
		Если Год(Объект.Дата)>2016 Тогда 
			Префикс = Формат(Год(Объект.Дата)-2015,"ЧЦ=1");
			
			ИсходныйНомер = 0;
		Иначе
			Префикс = Формат(1,"ЧЦ=1");
			
			ИсходныйНомер = 303840;
		КонецЕсли;
		//ОК
		Корень = Формат(ИсходныйНомер + Число(Прав(Объект.Номер,6)),"ЧЦ=6; ЧВН=; ЧГ=0");
		СтрокаРезультат = Префикс + Корень;
		
		//вычисляем постфикс
		Сумма = 0;
		Для сч = 0 по 6 Цикл
			НомерСимвола = 7-сч; //от 7 до 1
			СимволС = Сред(СтрокаРезультат,НомерСимвола,1);
			СимволЧ = Число(СимволС);
			Если Цел(НомерСимвола/2) = НомерСимвола/2 Тогда
				СимволЧ = СимволЧ * 2;
				Если СимволЧ > 9 Тогда 
					СимволЧ = СимволЧ - 9;
				КонецЕсли;
			КонецЕсли;
			Сумма = Сумма + СимволЧ;
		КонецЦикла;
		Сумма = (1-(Сумма/10 - Цел(Сумма/10)))*10;
		Если Сумма = 10 Тогда 
			Сумма = 0;
		КонецЕсли;
		СтрокаРезультат = СтрокаРезультат + Строка(Сумма);
		
		Объект.ОК_ID_Разноска = Сред(СтрокаРезультат,1,4) + "-" + Сред(СтрокаРезультат,5,4); 
		
	Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Необходимо записать документ для получения номера документа. ID не сформирован.' ");
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

// БИТ_YK_к


// BIT AMerkulov 31-01-2015 ++
&НаКлиенте
Процедура ПоискОстаткаПоБюджету(Команда)
//+Сундукова 280316		
	МассивЦФО = новый массив;
	МассивСтатьяОборотов = новый массив;
	МассивАналитика_2 = новый массив;
	ДатаНачала = объект.Дата;
	ДатаОкончания  = объект.Дата;
	Для каждого ТекСтрока из объект.БДДС цикл
		Если текСтрока.период < ДатаНачала тогда
			ДатаНачала = текСтрока.период;
		конецЕсли;
		Если текСтрока.период > ДатаОкончания тогда
			ДатаОкончания = текСтрока.период;
		конецЕсли;
		
		МассивЦФО.Добавить(ТекСтрока.ЦФО);
		МассивСтатьяОборотов.Добавить(ТекСтрока.СтатьяОборотов);
		МассивАналитика_2.Добавить(ТекСтрока.Аналитика_2);
	КонецЦикла;
	//Если ЭтоИнвестиционнаяЗаявка(ТекущиеДанные.Аналитика_1) Тогда		
	//	СценарийЗаявка = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест");
	//Иначе	
	//	СценарийЗаявка = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_У");
	//КонецЕсли;

	бит_ФормаВводаБюджетаКлиент.бит_ПоискОстаткаПоБюджету(Объект, ДатаНачала, Объект.Сценарий, МассивЦФО, МассивСтатьяОборотов, МассивАналитика_2,ДатаОкончания);
	//-Сундукова 280316		
КонецПроцедуры

// 1c-izhtc ChuckNorris 18.03.2016 ( 
//&НаСервере
//Процедура ПоискОстаткаПоБюджетуНаСервере(Компоновщик)

//	ЭлементОтбора = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналитика_2");
//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
//	ЭлементОтбора.Использование = Истина;
//	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
//	
//	Таблица = Объект.БДДС.Выгрузить(,"Аналитика_2");
//	Таблица.Свернуть("Аналитика_2");
//	Список = Новый СписокЗначений;
//	Для Каждого ТекСтрока Из Таблица Цикл
//		Список.Добавить(ТекСтрока.Аналитика_2);
//	КонецЦикла;
//	ЭлементОтбора.ПравоеЗначение = Список;
//	
//КонецПроцедуры
// 1c-izhtc ChuckNorris 18.03.2016 ) 

//&НАСервере
//Функция  ПолучитьОтборКомпоновкиДанных(КоллекцияПользовательскихНастроек)
//	результат=неопределено;
//	
//	Для каждого ЭлементПН Из КоллекцияПользовательскихНастроек Цикл
//		
//		Если ТипЗнч(ЭлементПН) = Тип("ОтборКомпоновкиДанных") Тогда
//			
//			результат = ЭлементПН;
//			прервать;
//			
//		КонецЕсли;
//		
//	КонецЦикла;

//	возврат ЭлементПН;

//КонецФункции
// 1c-izhtc ChuckNorris 18.03.2016 ) 

&НаСервере
Функция ВернутьКонтролирующуюСтатью(ДатаНачала, СтатьяОборотов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	бит_БК_КонтролирующиеСтатьиОборотовСрезПоследних.КонтролирующаяСтатья
	|ИЗ
	|	РегистрСведений.бит_БК_КонтролирующиеСтатьиОборотов.СрезПоследних(
	|			&ДатаНачала,
	|			КонтролируемаяСтатья = &КонтролируемаяСтатья
	|				И АктивностьСтроки) КАК бит_БК_КонтролирующиеСтатьиОборотовСрезПоследних";
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("КонтролируемаяСтатья",СтатьяОборотов);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КонтролирующаяСтатья = Выборка.КонтролирующаяСтатья;
	Иначе
		КонтролирующаяСтатья = СтатьяОборотов;
	КонецЕсли;
	Возврат КонтролирующаяСтатья;
КонецФункции

&НаСервере
Функция ЭтоИнвестиционнаяЗаявка(Заявка)
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
		Если Заявка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный ИЛИ Заявка.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
			Возврат Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивОтборов()
	
	МассивОтборов = Новый Массив;
	Список1 = Новый СписокЗначений;
	Список2 = Новый СписокЗначений;
	
	Для Каждого Стр Из Объект.БДДС Цикл
		Список1.Добавить(Стр.ЦФО);
		Список2.Добавить(Стр.Аналитика_2);
	КонецЦикла;
	
	МассивОтборов.Добавить(Список1);
	МассивОтборов.Добавить(Список2);

	
	Возврат МассивОтборов;
	
КонецФункции
// BIT AMerkulov 31-01-2015 --

//БИТ АКриштопов 10022016 -->>
&НаКлиенте
Процедура ЗаполнитьКолонку(Команда)
	КолонкаИмя = Элементы.БДДС.ТекущийЭлемент.Имя;
	ПутьКДанным = СтрЗаменить(КолонкаИмя, "БДДС", "");
	ТекущееЗначение = Элементы.БДДС.ТекущиеДанные[ПутьКДанным];
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-13 (#3102)
	ПерезаполнитьСуммыНДС = ПутьКДанным = "СтавкаНДС" ИЛИ ПутьКДанным = "СуммаНДС" ИЛИ ПутьКДанным = "Сумма";
	СтрСтроки = Новый Структура("СтавкаНДС,СуммаНДС");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-13 (#3102)
	
	Для Каждого ТекСтрока Из Объект.БДДС Цикл
		ТекСтрока[ПутьКДанным] = ТекущееЗначение;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-13 (#3102)
		Если ПерезаполнитьСуммыНДС Тогда 
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекСтрока);	
			ТекСтрока.Всего = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;		
		ИначеЕсли ПутьКДанным = "Всего" Тогда 
			
			ЗаполнитьЗначенияСвойств(СтрСтроки, ТекСтрока);
			СтрСтроки.Вставить("Сумма", ТекСтрока.Всего);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрСтроки, Истина);	
			ТекСтрока.Сумма	   = ТекСтрока.Всего - СтрСтроки.СуммаНДС;	
			ТекСтрока.СуммаНДС = СтрСтроки.СуммаНДС;
			
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-13 (#3102)
		
	КонецЦикла;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)
	
КонецПроцедуры
//БИТ АКриштопов 12022016 -->>

&НаСервере
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3065)
//Процедура БИТ_СоздатьЗаявкиРасходованияДСНаСервере()
//Заменено на:	
Функция БИТ_СоздатьЗаявкиРасходованияДСНаСервере()
	Возврат ОК_ОбщегоНазначения.СоздатьЗаявкиРасходованияДСНаСервере(Объект.Ссылка);
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3065)

	ДокЗаявка = Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
	бит_КазначействоКлиентСервер.ПроверитьИмеющиесяЗаявкиПоОснованию(Объект.Ссылка,ДокЗаявка.Метаданные().Имя,ДокЗаявка,объект);
			
	ЗапросТЧ = Новый Запрос;
	ЗапросТЧ.Текст = 
		"ВЫБРАТЬ
		|	бит_СоответствияАналитик.ПраваяАналитика_1 КАК СтатьяОборотов,
		|	бит_БюджетнаяОперацияБДДС.ЦФО КАК ЦФО,
		|	бит_БюджетнаяОперацияБДДС.Контрагент КАК Контрагент,
		|	бит_БюджетнаяОперацияБДДС.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	бит_БюджетнаяОперацияБДДС.Проект КАК Проект,
		|	бит_БюджетнаяОперацияБДДС.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	бит_БюджетнаяОперацияБДДС.БанковскийСчет КАК БанковскийСчет,
		|	бит_БюджетнаяОперацияБДДС.Аналитика_1 КАК Аналитика_1,
		|	бит_БюджетнаяОперацияБДДС.Аналитика_2 КАК Аналитика_2,
		//|	бит_БюджетнаяОперацияБДДС.Аналитика_3 КАК Аналитика_3,
		//|	бит_БюджетнаяОперацияБДДС.Аналитика_4 КАК Аналитика_4,
		//|	бит_БюджетнаяОперацияБДДС.Аналитика_5 КАК Аналитика_5,
		//|	бит_БюджетнаяОперацияБДДС.Аналитика_6 КАК Аналитика_6,
		//|	бит_БюджетнаяОперацияБДДС.Аналитика_7 КАК Аналитика_7,
		|	бит_БюджетнаяОперацияБДДС.Количество КАК Количество,
		|	бит_БюджетнаяОперацияБДДС.Норма КАК Норма,
		|	СУММА(бит_БюджетнаяОперацияБДДС.Сумма) КАК Сумма,
		|	бит_БюджетнаяОперацияБДДС.Период КАК Период
		|ИЗ
		|	Документ.бит_БюджетнаяОперация.БДДС КАК бит_БюджетнаяОперацияБДДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
		|		ПО бит_БюджетнаяОперацияБДДС.СтатьяОборотов = бит_СоответствияАналитик.ЛеваяАналитика_1
		|ГДЕ
		|	бит_БюджетнаяОперацияБДДС.Ссылка = &Ссылка
		|	И бит_СоответствияАналитик.ВидСоответствия = &ВидСоответствия
		|
		|СГРУППИРОВАТЬ ПО
		|	бит_БюджетнаяОперацияБДДС.ЦФО,
		|	бит_БюджетнаяОперацияБДДС.Контрагент,
		|	бит_БюджетнаяОперацияБДДС.ДоговорКонтрагента,
		|	бит_БюджетнаяОперацияБДДС.Проект,
		|	бит_БюджетнаяОперацияБДДС.НоменклатурнаяГруппа,
		|	бит_БюджетнаяОперацияБДДС.БанковскийСчет,
		|	бит_БюджетнаяОперацияБДДС.Аналитика_1,
		|	бит_БюджетнаяОперацияБДДС.Аналитика_2,
		|	бит_БюджетнаяОперацияБДДС.Аналитика_3,
		|	бит_БюджетнаяОперацияБДДС.Аналитика_4,
		|	бит_БюджетнаяОперацияБДДС.Аналитика_5,
		|	бит_БюджетнаяОперацияБДДС.Аналитика_6,
		|	бит_БюджетнаяОперацияБДДС.Аналитика_7,
		|	бит_БюджетнаяОперацияБДДС.Количество,
		|	бит_БюджетнаяОперацияБДДС.Норма,
		|	бит_БюджетнаяОперацияБДДС.Период,
		|	бит_СоответствияАналитик.ПраваяАналитика_1";
	
	ЗапросТЧ.УстановитьПараметр("ВидСоответствия", Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС);
	ЗапросТЧ.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапросаТЧ = ЗапросТЧ.Выполнить().Выгрузить();
	РезультатЗапросаБезОбъектов = РезультатЗапросаТЧ.скопировать();
	РезультатЗапросаБезОбъектов.Свернуть("СтатьяОборотов,ЦФО,Контрагент,ДоговорКонтрагента,Проект,НоменклатурнаяГруппа,БанковскийСчет,Аналитика_1"
	,"Количество,Норма,Сумма"); 

	ФактИнвест  	   = Объект.сценарий = справочники.СценарииПланирования.Факт_Инвест;		
	Для Каждого СтрокаТЧ Из РезультатЗапросаБезОбъектов Цикл
		ДокЗаявка = Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
		ДокЗаявка.Организация					= Объект.бит_Организация;
		ДокЗаявка.ДокументОснование 			= Объект.Ссылка;
		ДокЗаявка.Дата 							= НачалоДня(ТекущаяДата());
		ДокЗаявка.ДатаРасхода 					= бит_Общий.СледующаяРабочаяДата(ДокЗаявка.дата);			
		ДокЗаявка.ТипПлатежа 					= Справочники.бит_ТипыПлатежей.НайтиПоНаименованию("Оплата");		
		ДокЗаявка.Сценарий 						= Справочники.СценарииПланирования.НайтиПоКоду("ЭУ0000002");
		ДокЗаявка.ВидОперации 					= Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику;
		ДокЗаявка.ФормаОплаты 					= Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		ДокЗаявка.ТипЗаявки 					= Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
		ДокЗаявка.Важность 						= Перечисления.бит_Важность.Средняя; 
		ДокЗаявка.СуммаВключаетНДС 				= Истина;
		ДокЗаявка.ВалютаДокумента				= справочники.Валюты.НайтиПоКоду("643");
		ДокЗаявка.КурсДокумента 				= 1;
		ДокЗаявка.КратностьДокумента 			= 1;
		ДокЗаявка.Исполнитель 					= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		ДокЗаявка.Ответственный 				= ДокЗаявка.Исполнитель;
		ДокЗаявка.СверхБюджета					= Объект.СверхБюджета;				
		ДокЗаявка.СтатьяОборотов 				= СтрокаТЧ.СтатьяОборотов;
		ДокЗаявка.Аналитика_1					= СтрокаТЧ.Аналитика_1;
		ДокЗаявка.ЦФО 							= СтрокаТЧ.ЦФО;				
		ДокЗаявка.Проект 						= СтрокаТЧ.Проект;	
		ДокЗаявка.СБ_Инициатор					= ДокЗаявка.Аналитика_1.бит_БК_Инициатор;
		ДокЗаявка.ОК_ID_Разноска_ДокОснования 	= Объект.ОК_ID_Разноска;

		ТЗДляСтавкиНДС						= Объект.НомерЗаявки.БДДС.выгрузить();		
		ТЗДляСтавкиНДС.свернуть("бит_СтавкаНДС","Сумма");
		Если ТЗДляСтавкиНДС.количество() = 0 тогда
			ДокЗаявка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли  ТЗДляСтавкиНДС.количество() = 1 тогда
			ДокЗаявка.СтавкаНДС = ТЗДляСтавкиНДС[0].бит_СтавкаНДС;
			Если не ЗначениеЗаполнено(ДокЗаявка.СтавкаНДС) тогда
				ДокЗаявка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			КонецЕсли;
		иначе
			ДокЗаявка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
		конецЕсли;
						
		ОтборСтрок = новый Структура;
		ОтборСтрок.Вставить("СтатьяОборотов",СтрокаТЧ.СтатьяОборотов);
		ОтборСтрок.Вставить("Аналитика_1",СтрокаТЧ.Аналитика_1);
		ОтборСтрок.Вставить("ЦФО",СтрокаТЧ.ЦФО);
		Если ФактИнвест тогда
			ОтборСтрок.Вставить("Проект",СтрокаТЧ.Проект);
		КонецЕсли;
		ТЗДляТЧ = РезультатЗапросаТЧ.скопировать(ОтборСтрок);
		Для каждого СтрДляТЧ из ТЗДляТЧ цикл 
		ДобавленнаяСтрока 						= ДокЗаявка.Распределение.Добавить();					
		ДобавленнаяСтрока.СтатьяОборотов 		= СтрДляТЧ.СтатьяОборотов;
		ДобавленнаяСтрока.СтавкаНДС 			= ДокЗаявка.СтавкаНДС;	
		ДобавленнаяСтрока.ЦФО 					= СтрДляТЧ.ЦФО;
		ДобавленнаяСтрока.Проект 				= ?(ФактИнвест,СтрокаТЧ.Проект,Неопределено);
		ДобавленнаяСтрока.ДоговорКонтрагента 	= СтрДляТЧ.ДоговорКонтрагента;
		ДобавленнаяСтрока.Аналитика_1 			= СтрДляТЧ.Аналитика_1;
		ДобавленнаяСтрока.Аналитика_2 			= СтрДляТЧ.Аналитика_2;			
		СтавкаНДСЧисло 							= бит_БухгалтерияСервер.ПолучитьСтавкуНДС(ДобавленнаяСтрока.СтавкаНДС);
		ДобавленнаяСтрока.СуммаБезНДС 			= СтрДляТЧ.Сумма;
		ДобавленнаяСтрока.Сумма 				= ДобавленнаяСтрока.СуммаБезНДС/100*(100 + СтавкаНДСЧисло);
		ДобавленнаяСтрока.НДС  					= бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(ДобавленнаяСтрока.Сумма,Истина,Истина,СтавкаНДСЧисло);			
	КонецЦикла;
	если ТЗДляТЧ.Количество() тогда
		ПерваяСтрокаРаспределение = ТЗДляТЧ.Получить(0);
		ДокЗаявка.Аналитика_2 					= ПерваяСтрокаРаспределение.Аналитика_2;			
		ДокЗаявка.Контрагент 					= ПерваяСтрокаРаспределение.Контрагент;	
		ДокЗаявка.ДоговорКонтрагента 			= ПерваяСтрокаРаспределение.ДоговорКонтрагента;
		ДокЗаявка.СБ_ПрофильРазноски 			= ДокЗаявка.ДоговорКонтрагента.СБ_ПрофильРазноски;
	конецЕсли;

		
		ДокЗаявка.Сумма 				= ДокЗаявка.Распределение.итог("Сумма");
		ДокЗаявка.СуммаВзаиморасчеты 	= ДокЗаявка.Сумма;
		ДокЗаявка.СуммаРегл 			= ДокЗаявка.Сумма; 
		ДокЗаявка.СуммаУпр 				= ДокЗаявка.Сумма; 
		ДокЗаявка.СуммаДокумента 		= ДокЗаявка.Сумма; 
		ДокЗаявка.НДС 					= ДокЗаявка.Распределение.итог("НДС");
		ДокЗаявка.НДСВзаиморасчеты 		= ДокЗаявка.НДС;
		ДокЗаявка.НДСУпр 				= ДокЗаявка.НДС;
		ДокЗаявка.НДСРегл 				= ДокЗаявка.НДС;	
		ДокЗаявка.НазначениеПлатежа 	= "Оплата по договору №"+ДокЗаявка.ДоговорКонтрагента.Номер +" по счет № , в т.ч. НДС " 
// +СБ. Широков Николай. 2016-08-31. 2565
//		+ ДокЗаявка.НДС;
		+ Формат( ДокЗаявка.НДС, "ЧДЦ=2; ЧГ=");
// -СБ. Широков Николай 		
		ДокЗаявка.НазначениеПлатежаУпр 	= ДокЗаявка.НазначениеПлатежа;
		
		ДокЗаявка.Записать();
		ДокЗаявка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "На основании создан документ " + ДокЗаявка;
		Сообщение.Сообщить();
	КонецЦикла;
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3065)
//КонецПроцедуры
//Заменено на:
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3065)

&НаКлиенте
Процедура БИТ_СоздатьЗаявкиРасходованияДС(Команда)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3065)
	//БИТ_СоздатьЗаявкиРасходованияДСНаСервере();
	//Заменено на:
	стрРезультат = БИТ_СоздатьЗаявкиРасходованияДСНаСервере();
	Для Каждого пСозданныйДокумент ИЗ стрРезультат.СозданныеДокументы Цикл 
		пТекст = НСтр("ru = 'На основании создан документ %1'");
		пТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекст,пСозданныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекст,пСозданныйДокумент);
	КонецЦикла;
	
	Если Не ПустаяСтрока(стрРезультат.Ошибки) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(стрРезультат.Ошибки);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3065)	
КонецПроцедуры

&НаСервере
Функция	БИТ_ПолучитьОрганизацию(ДанныеЦФО)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ЦФО_Организаций.Организация
		|ИЗ
		|	РегистрСведений.бит_ЦФО_Организаций КАК бит_ЦФО_Организаций
		|ГДЕ
		|	бит_ЦФО_Организаций.ЦФО = &ДанныеЦФО";
	
	Запрос.УстановитьПараметр("ДанныеЦФО", ДанныеЦФО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Орг = ВыборкаДетальныеЗаписи.Организация;
	КонецЦикла;
	
	Возврат Орг;
	
КонецФункции

&НаСервере
Процедура СформироватьНазначениеПлатежа(ДанныеШапки, ДокОб)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Предмет", 		ПредметОплаты(ДанныеШапки.СтатьяОборотов, ДанныеШапки.СтатьяОборотов.ВидСтатьи));
	СтруктураПараметров.Вставить("ВидДокумента", 	"Акт");//ВыборкаДокументРазнесения.НазначениеПлатежаВидДокумента);
	СтруктураПараметров.Вставить("НомерДокумента",	ДанныеШапки.Номер);
	СтруктураПараметров.Вставить("ДатаДокумента",	ДанныеШапки.Дата);
	
	СтруктураПараметров.Вставить("СтавкаНДС",		Перечисления.СтавкиНДС.НДС18);
	СтруктураПараметров.Вставить("СуммаНДС",		Формат(ДокОб.Распределение.Итог("НДС"),"ЧДЦ=2"));
	
	ДокОб.НазначениеПлатежа=ТекстНазначенияПлатежа(СтруктураПараметров); 
	ДокОб.НазначениеПлатежаУпр=ТекстНазначенияПлатежа(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПредметОплаты(СтатьяОборотов, ВидСтатьи)
	
	ЗначениеПоУмолчанию = "";
	
	Если Не ЗначениеЗаполнено(СтатьяОборотов) Тогда
		Возврат ЗначениеПоУмолчанию;	
	КонецЕсли; 
	
	ОперативнаяДеятельность 	= ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка");
	ИнвестиционнаяДеятельность 	= ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность");
	
	Если ВидСтатьи = ОперативнаяДеятельность Тогда
		Возврат "услуги";
	ИначеЕсли СтатьяОборотов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗданий") Тогда	
		Возврат "здания";
	ИначеЕсли СтатьяОборотов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗемли") Тогда	
		Возврат "землю";
	ИначеЕсли СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокСтатейОборотов_ПриобритениеОборудования").НайтиПоЗначению(СтатьяОборотов) <> Неопределено Тогда	
		Возврат "оборудование";
	ИначеЕсли ВидСтатьи = ИнвестиционнаяДеятельность Тогда
		Возврат "услуги";
	Иначе 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли; 
	
КонецФункции // (

&НаСервере
Функция ТекстНазначенияПлатежа(Параметры)
	
	Шаблон = "Оплата за %1 по %2 № %3 от %4, в т.ч. НДС %5.";
	
	Результат = СтрЗаменить(Шаблон, 	"%1", Параметры.Предмет);
	Результат = СтрЗаменить(Результат, 	"%2", Параметры.ВидДокумента);
	Результат = СтрЗаменить(Результат, 	"%3", Параметры.НомерДокумента);
	Результат = СтрЗаменить(Результат, 	"%4", Формат(Параметры.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	//10.12.14
	Если Параметры.СтавкаНДС=ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") тогда
		Результат = СтрЗаменить(Результат, 	", в т.ч. НДС %5.", " без НДС");
	Иначе
		Результат = СтрЗаменить(Результат, 	"%5", Параметры.СуммаНДС);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции // ()

&НаКлиенте
Процедура БДДСПриИзменении(Элемент)
	БДДСПриИзмененииНаСервере();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)
КонецПроцедуры

&НаСервере
Процедура БДДСПриИзмененииНаСервере()
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-23 (#3065)
	//Если Объект.БДДС.Количество() > 1 Тогда		
	//	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.БИТ_СоздатьЗаявкиРасходованияДС.Доступность = Истина;
	//Иначе
	//	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.БИТ_СоздатьЗаявкиРасходованияДС.Доступность = Ложь;
	//КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-23 (#3065)
КонецПроцедуры
//БИТ АКриштопов 12022016 <<--
//БИТ АКриштопов 10022016 <<--

//+Сенин С.В. 11.08.16 №2593
//
&НаКлиенте
Процедура БИТ_УвеличитьНаКоэффициент(Команда)
	
	Коэффициент = 1.18;
	
	Если ВвестиЧисло(Коэффициент, "Введите коэффициент увеличения", 10, 2)  Тогда 
		
		Для Каждого ТекСтрока Из Объект.БДДС Цикл
			
			Если Коэффициент = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			ТекСтрока.Сумма = ТекСтрока.Сумма*Коэффициент;

		КонецЦикла;
		
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)

КонецПроцедуры
//-Сенин С.В. 11.08.16 №2593

//+Сенин С.В. 11.08.16 №2593
//
&НаКлиенте
Процедура БИТ_УменьшитьНаКоэффициент(Команда)
	
	Коэффициент = 1.18;
	
	Если ВвестиЧисло(Коэффициент, "Введите коэффициент уменьшения", 10, 2)  Тогда 
		
		Для Каждого ТекСтрока Из Объект.БДДС Цикл
			
			Если Коэффициент = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			ТекСтрока.Сумма = ТекСтрока.Сумма/Коэффициент;

		КонецЦикла;
		
	КонецЕсли;	

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)
	
КонецПроцедуры
//-Сенин С.В. 11.08.16 №2593

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-12 (#3078)
&НаКлиенте
Процедура БДДСОк_СтавкаНДСПриИзменении(Элемент)
	
	ТекДанные = Элементы.БДДС.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3102)
	ТекДанные.Всего = ТекДанные.Сумма + ТекДанные.СуммаНДС;	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3102)	
	
КонецПроцедуры

&НаКлиенте
Процедура БДДССуммаПриИзменении(Элемент)
	
	ТекДанные = Элементы.БДДС.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ТекДанные);	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3102)
	ТекДанные.Всего = ТекДанные.Сумма + ТекДанные.СуммаНДС;	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3102)
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОбОчисткеПриЗаполненииПоБК(Результат, ДопПараметры) Экспорт
	
	Если Результат<>КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.БДДС.Очистить();
	
	ЗаполнитьБКНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБКНаКлиенте()
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяТЧ"						,	"БДДС");
	ДопПараметры.Вставить("Документ"					,	Объект.Ссылка);
	ДопПараметры.Вставить("Форма"						, 	ЭтотОбъект);
	ДопПараметры.Вставить("ОтборПоКонтрагентуДоговору"	, 	Истина);
	ДопПараметры.Вставить("ОтборОрганизация"			, 	Объект.бит_Организация);
	
	
	бит_БК_ОбщийКлиент.ПослеВводаЗначенияФВБДляЗаполненияПоУпрАналитикам(Объект.НомерЗаявки, ДопПараметры);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧПоУправленческимАналитикам(Результат, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
		
	ЗаполнитьТЧПоУправленческимАналитикамНаСервере(Результат, ДопПараметры.ИмяТЧ, ДопПараметры.Заявка);
	
КонецПроцедуры

Процедура ЗаполнитьТЧПоУправленческимАналитикамНаСервере(АдресДанныхЗаполнения, ИмяТЧ, Заявка)
	
	пДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресДанныхЗаполнения);
			
	Для Каждого пСтрокаДанных Из пДанныеЗаполнения Цикл 
		
		пСтрокаБДДС = Объект.БДДС.Добавить();
		пСтрокаБДДС.ЦФО			       = пСтрокаДанных.ок_ЦФО;
		пСтрокаБДДС.СтатьяОборотов     = пСтрокаДанных.ок_СтатьяОборотов;
		пСтрокаБДДС.Контрагент	  	   = пСтрокаДанных.ок_Контрагент;
		пСтрокаБДДС.ДоговорКонтрагента = пСтрокаДанных.ок_ДоговорКонтрагента;
		пСтрокаБДДС.Аналитика_1		   = Объект.НомерЗаявки;
		пСтрокаБДДС.Аналитика_2		   = пСтрокаДанных.ок_Аналитика_2;
		пСтрокаБДДС.Сумма			   = пСтрокаДанных.СуммаБезНДС;
		пСтрокаБДДС.Период			   = пСтрокаДанных.ок_Период;
		пСтрокаБДДС.СтавкаНДС		   = пСтрокаДанных.СтавкаНДС;
		пСтрокаБДДС.СуммаНДС		   = пСтрокаДанных.СуммаНДС;
		пСтрокаБДДС.Проект			   = пСтрокаДанных.ок_Проект;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-25 (#3102)
		пСтрокаБДДС.Всего = пСтрокаБДДС.Сумма + пСтрокаБДДС.СуммаНДС;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-25 (#3102)
		
	КонецЦикла;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-12 (#3078)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-22 (#3102)
&НаКлиенте
Процедура БДДСОк_СуммаНДСПриИзменении(Элемент)
	
	ТекДанные = Элементы.БДДС.ТекущиеДанные;
	Если ТекДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ТекДанные.Всего = ТекДанные.Сумма + ТекДанные.СуммаНДС;	

КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-22 (#3102)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = Объект.БДДС.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.БДДС.Итог("СуммаНДС");

КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-30 (#3102)
&НаКлиенте
Процедура БДДСВсегоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.БДДС.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрСтроки = Новый Структура("СтавкаНДС,СуммаНДС");
	ЗаполнитьЗначенияСвойств(СтрСтроки, ТекСтрока);
	СтрСтроки.Вставить("Сумма", ТекСтрока.Всего);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрСтроки, Истина);	
	ТекСтрока.Сумма	   = ТекСтрока.Всего - СтрСтроки.СуммаНДС;	
	ТекСтрока.СуммаНДС = СтрСтроки.СуммаНДС;

	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-30 (#3102)

//ОКЕЙ Рычаков А.С.(СофтЛаб) Начало 2019-10-01 (#3490)
&НаКлиенте
Процедура ок_КорректировкаОплатыПриИзменении(Элемент)
	
	Если Объект.ок_КорректировкаОплаты И Объект.БДДС.Количество() Тогда
		
		НовыйСценарий = Неопределено;
		ВидСтатьи = ПолучитьВидСтатьиОборотов(Объект.БДДС[0].СтатьяОборотов);
		 
		Если ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			НовыйСценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования",Неопределено);
		ИначеЕсли ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
			НовыйСценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования",Неопределено);
		КонецЕсли;
		
		Если НовыйСценарий <> Неопределено И Объект.Сценарий <> НовыйСценарий Тогда 
			Объект.Сценарий = НовыйСценарий;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидСтатьиОборотов(СтатьяОборотов)
	Возврат СтатьяОборотов.ВидСтатьи;
КонецФункции	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	//{ bit SVKushnirenko Bit 27.01.2017 #2657
	пМассивОбновления = ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(Объект.Ссылка);
	Если рекМассивДокументовОповещенияДляИзмененияСтатуса.Количество() <>  0 Тогда
		
		Для каждого пСтрокаДанных Из рекМассивДокументовОповещенияДляИзмененияСтатуса Цикл
			
			пМассивОбновления.Добавить(пСтрокаДанных.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если пМассивОбновления.Количество()  >  0 Тогда
		
		Оповестить("бит_БК_ИзмСтатусаПослеИзмБалансаЗаявок", Новый Структура("Ссылки", пМассивОбновления));
	КонецЕсли;
	//} bit SVKushnirenko Bit 27.01.2017 #2657
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-19 (#3102)
	Для Каждого СтрокаТаблицы Из Объект.БДДС Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;
	КонецЦикла;
	ОбновитьИтоги(ЭтаФорма);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-19 (#3102)	
	
КонецПроцедуры

//ОКЕЙ Рычаков А.С.(СофтЛаб) Конец 2019-10-01 (#3490)