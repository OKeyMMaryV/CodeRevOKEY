#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
               

	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроверитьЗаполнениеТабличнойЧастиКомплектыДвижений(КомплектыДвижений, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если КомплектыДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ);
	КонецЕсли;
               
КонецПроцедуры // ОбработкаПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает доступные варианты печати документа.
// 
// Возвращаемое значение:
//  Структура - каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("УстановкаКомплектов", "Установка активности комплектов");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Функция проверяет принадлежность к организации.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтрокаПринадлежность - Строка.
// 
Функция ПолучитьПринадлежностьОрганизациям() Экспорт
	Если не ЗначениеЗаполнено(Организация) Тогда
		Возврат "для всех организаций";
	КонецЕсли;
	Возврат Организация.Наименование;
КонецФункции

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  Отказ                   - Булево.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Запрос к таблицчной части
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.Ссылка.Организация,
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.ВидДокумента,
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.Комплект,
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.ДатаНачала КАК Период,
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.ДатаОкончания
	|ИЗ
	|	Документ.бит_УстановкаАктивныхКомплектовДвижений.КомплектыДвижений КАК бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений
	|ГДЕ
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.Ссылка = &СсылкаУстановка
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.Ссылка.Организация,
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.ВидДокумента,
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.Комплект,
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.ДатаНачала,
	|	бит_УстановкаАктивныхКомплектовДвиженийКомплектыДвижений.ДатаОкончания");
	
	Запрос.УстановитьПараметр("СсылкаУстановка", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Движения.бит_АктивныеКомплектыДвижений.Загрузить(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура проверяет правильность заполнения строк табличной части "Комплекты движений".
// 
// Параметры: 
//  Таблица 						- таблица значений, содержащая данные для проведения и проверки ТЧ "Комплекты движений"
//  СтруктураШапкиДокумента 		- выборка из результата запроса по шапке документа,
//  Отказ                   		- флаг отказа в проведении.
//  Заголовок               		- строка, заголовок сообщения об ошибке проведения.
// 
Процедура ПроверитьЗаполнениеТабличнойЧастиКомплектыДвижений(Таблица, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ВидДокумента");
	СтруктураОбязательныхПолей.Вставить("Комплект");

	// Теперь вызовем общую процедуру проверки.
	бит_РаботаСМетаданными.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "КомплектыДвижений", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиКомплектыДвижений()

#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецОбласти

#КонецЕсли
