
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 	
	
	УправлениеЭлементамиФормы();
	
	ЗаполнитьКэшЗначений();
	
	// Управляем видимостью колонок дополнительных измерений.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
	                                                                                      , "ФактическиеДанные"
																						  , фКэшЗначений.ИзмеренияДоп
																						  , фКэшЗначений.НастройкиИзмерений);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИтоги(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборЗаявокНаЗакупку" И Источник = ЭтаФорма Тогда
		
		ОбработкаЗаполненияИзПодбора(Параметр);	
		
		ОбновитьИтоги(ЭтаФорма);
		
		ЭтаФорма.ВладелецФормы.Прочитать();
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ТекущийОбъект.ДополнительныеСвойства.ЭтоНовый Тогда
		РазличныеЗаявкиНаЗакупку = ТекущийОбъект.ДополнительныеСвойства.СтруктураРазличных;
	Иначе	
		РазличныеЗаявкиНаЗакупку = Новый Структура;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_мто_ОтражениеФактаЗакупки";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыФактическиеДанные

&НаКлиенте
Процедура ФактическиеДанныеКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена();
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеЦенаПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена();
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеЕдиницаИзмеренияПриИзменении(Элемент)
	Элементы.ФактическиеДанные.ТекущиеДанные.Коэффициент = 1;
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеСуммаПриИзменении(Элемент)
	ПриИзмененииСумма();
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ФактическиеДанные.ТекущиеДанные;
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Ложь);
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Ложь, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ФактическиеДанные.ТекущиеДанные;

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Ложь, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ФактическиеДанные.ТекущиеДанные;
	
	ИзменениеСтатьиОборотов(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ФактическиеДанные.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ФактическиеДанные", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры

&НаКлиенте
Процедура Аналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    ТекущиеДанные = Элементы.ФактическиеДанные.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ФактическиеДанные", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,фКэшЗначений.НастройкиИзмерений);
                                                               
КонецПроцедуры // Аналитика_АвтоПодбор()
                                                           
&НаКлиенте
Процедура Аналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ФактическиеДанные.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "ФактическиеДанные", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
																		   	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // Аналитика_Очистка()

&НаКлиенте
Процедура ФактическиеДанныеНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаписатьЗакрыть(Команда)
	
	флОК = Ложь;
	Если НЕ фКэшЗначений.ОснованиеПроведен Тогда
		
		флОК = Записать();
		
	Иначе	
		
		флОК = Записать();
		Если флОК Тогда
			
			ПровестиБИТ();
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если флОК Тогда
	
		Закрыть();
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Если НЕ фКэшЗначений.ОснованиеПроведен Тогда
		
		Записать();
		
	Иначе	
		
		флОК = Записать();
		Если флОК Тогда
			
			ПровестиБИТ();
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Документ", Объект.ДокументОснование);
	СтруктураПараметров.Вставить("ИмяМакета", "СКД");
	СтруктураПараметров.Вставить("ИмяСобытия", "ПодборЗаявокНаЗакупку");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПараметров",	СтруктураПараметров);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", 	Истина);
	
	ОткрытьФорму("Обработка.бит_мто_ПодборЗаявокНаЗакупку.Форма.Форма", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	// Настройки дополнительных измерений
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	// Настройки всех дополнительных аналитик
	фКэшЗначений.Вставить("НастройкиАналитик", бит_МеханизмДопИзмерений.ПолучитьНастройкиДополнительныхАналитик());
	
	фКэшЗначений.Вставить("ОснованиеПроведен", Объект.ДокументОснование.Проведен);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура выполняет проведение документа по регистрам БИТ.
// 
&НаСервере
Процедура ПровестиБИТ()

	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_мто_ОтражениеФактаЗакупки"));
	Отказ = Ложь;
	ДокОбъект.ПровестиОтражениеФактаЗакупки(ДокОбъект, Отказ);

	Если НЕ Отказ И ЗначениеЗаполнено(РазличныеЗаявкиНаЗакупку) Тогда
	
		Для каждого ЗаявкаНаЗакупку Из РазличныеЗаявкиНаЗакупку.МассивРазличных Цикл
			ЗаявкаНаЗакупку.ПолучитьОбъект().УстановитьСтатус(РежимЗаписиДокумента.Проведение);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // ПровестиБИТ()

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()

	Элементы.ФормаКомандаЗаписать.Заголовок = ?(Объект.ДокументОснование.Проведен
	                                             ,  НСтр("ru = 'Провести (БИТ)'")
												 ,  НСтр("ru = 'Записать'"));

	Элементы.ФормаКомандаЗаписатьЗакрыть.Заголовок = ?(Объект.ДокументОснование.Проведен
	                                             ,  НСтр("ru = 'Провести (БИТ) и закрыть'")
												 ,  НСтр("ru = 'Записать и закрыть'"));
												 
												 
КонецПроцедуры // УправлениеЭлементамиФормы()

// Процедура пересчитывает суммы табличной части при изменении цены или количества.
// 
&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(ЗначениеПустогоКоличества = 0)

	СтрокаТабличнойЧасти = Элементы.ФактическиеДанные.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);

	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Ложь);

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Ложь, 0, СтрокаТабличнойЧасти.СуммаНДС);

КонецПроцедуры // ПриИзмененииКоличествоЦена()

// Процедура осуществляет расчет суммы НДС, исходя из постоянной суммы.
// 
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС = Ложь)

	Если ТипЗнч(СтрокаТабличнойЧасти)=Тип("Структура") Тогда
		Если СтрокаТабличнойЧасти.Свойство("Сумма") И СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
			СтрокаТабличнойЧасти.СуммаНДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(
												СтрокаТабличнойЧасти.Сумма,
												Истина,
												СуммаВключаетНДС,
												бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		КонецЕсли;
	Иначе // Строка табличной части
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СуммаНДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(
												СтрокаТабличнойЧасти.Сумма,
												Истина,
												СуммаВключаетНДС,
												бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчитывает суммы табличной части при изменении суммы.
// 
&НаКлиенте
Процедура ПриИзмененииСумма(ЗначениеПустогоКоличества = 0)

	СтрокаТабличнойЧасти = Элементы.ФактическиеДанные.ТекущиеДанные;

	Если (СтрокаТабличнойЧасти.Количество = 0) И (ЗначениеПустогоКоличества = 0) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
	КонецЕсли;

	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Ложь);

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Ложь, 0, СтрокаТабличнойЧасти.СуммаНДС);

КонецПроцедуры // ПриИзмененииСумма()

// Процедура обновляет итоги по всем суммам.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = Объект.ФактическиеДанные.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.ФактическиеДанные.Итог("СуммаНДС");
	
КонецПроцедуры

// Процедура обрабатывает заполнение табличной части из подбора заявок на потребность.
// 
// Параметры:
//  СтрЗаполнения - Структура.
// 
&НаСервере
Процедура ОбработкаЗаполненияИзПодбора(СтрЗаполнения)

	ТаблицаПодбор = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтрЗаполнения.Хранилище);
	
	ДокОснование = Объект.ДокументОснование.ПолучитьОбъект();
	
	МассивТабЧастей = Новый Массив;
	Если ДокОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
	
		ИмяТабличнойЧасти = "Товары";
		МассивТабЧастей.Добавить(ИмяТабличнойЧасти);
		
	ИначеЕсли ДокОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
	
		ИмяТабличнойЧасти = "Услуги";
		МассивТабЧастей.Добавить(ИмяТабличнойЧасти);
		
	ИначеЕсли ДокОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
	
		ИмяТабличнойЧасти = "Оборудование";
		
	ИначеЕсли ДокОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		
		ИмяТабличнойЧасти = "Товары";
		МассивТабЧастей.Добавить(ИмяТабличнойЧасти);
		ИмяТабличнойЧасти = "Услуги";
		МассивТабЧастей.Добавить(ИмяТабличнойЧасти);
		
	Иначе
		
		Возврат;
		
	КонецЕсли; 
	
	Если СтрЗаполнения.ОчищатьТабЧасть Тогда
	
		Объект.ФактическиеДанные.Очистить();
		
	КонецЕсли; 
	
	Для каждого ИмяТабЧасти Из МассивТабЧастей Цикл
	
		// Добавляем строки только с нужным видом операции.
		Отбор = Новый Структура;
		Если ИмяТабЧасти = "Товары" Тогда
		
			ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Товары;
			ТабЧастьДокОснование = ДокОснование.Товары;
			
		ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
			
			ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги;
			ТабЧастьДокОснование = ДокОснование.Услуги;
			
		ИначеЕсли ИмяТабЧасти = "Оборудование" Тогда 	
			
			ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Оборудование;
			ТабЧастьДокОснование = ДокОснование.Оборудование;
			
		КонецЕсли; 
		
		Если СтрЗаполнения.ОчищатьТабЧасть Тогда
		
			ТабЧастьДокОснование.Очистить();
			
		КонецЕсли; 
		
		Отбор.Вставить("ВидОперации", ВидОперации);
		МассивСтрок = ТаблицаПодбор.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Для каждого Строка Из МассивСтрок Цикл
			
			// Заполняем документ отражение
			
			СтрОтбора = Новый Структура;
			СтрОтбора.Вставить("Потребность", Строка.Потребность);
			СтрОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			СтрОтбора.Вставить("ЗаявкаНаПотребность", Строка.ЗаявкаНаПотребность);
			СтрОтбора.Вставить("ЗаявкаНаЗакупку", Строка.ЗаявкаНаЗакупку);
			СтрОтбора.Вставить("Цена", Строка.Цена);
			НайденныеСтроки = Объект.ФактическиеДанные.НайтиСтроки(СтрОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденныеСтроки[0].Количество 	= НайденныеСтроки[0].Количество + Строка.Количество;
				НайденныеСтроки[0].Сумма 		= НайденныеСтроки[0].Сумма 		+ Строка.Сумма;
				НайденныеСтроки[0].СуммаНДС 	= НайденныеСтроки[0].СуммаНДС 	+ Строка.СуммаНДС;
				НайденныеСтроки[0].Всего 		= НайденныеСтроки[0].Всего 		+ Строка.Всего;
				
				НайденныеСтроки[0].Период = Строка.ДатаЗакупкиПлан;
				
			Иначе
				
				НоваяСтрока = Объект.ФактическиеДанные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Период = Строка.ДатаЗакупкиПлан;
				
			КонецЕсли; 
			
			// Заполняем документ основание
			ЗаполнитьТабЧастьДокументОснование(Строка, ТабЧастьДокОснование);
			
		КонецЦикла; 
		
		Документы.бит_мто_ЗаявкаНаЗакупку.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокОснование, ИмяТабЧасти);
	
	КонецЦикла; 
	
	бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОснование, РежимЗаписиДокумента.Запись,,"Ошибки");
	
	Записать();
	
КонецПроцедуры // ОбработкаЗаполненияИзПодбора()

// Процедура заполняет табличную часть документа Поступление товаров и услуг.
// 
&НаСервере
Процедура ЗаполнитьТабЧастьДокументОснование(Строка, ТабЧасть)

	СтрОтбора = Новый Структура;
	СтрОтбора.Вставить("Номенклатура", Строка.Номенклатура);
	СтрОтбора.Вставить("Цена", Строка.Цена);
	                 
	НайденныеСтроки = ТабЧасть.НайтиСтроки(СтрОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НайденныеСтроки[0].Количество 	= НайденныеСтроки[0].Количество + Строка.Количество;
		НайденныеСтроки[0].Сумма 		= НайденныеСтроки[0].Сумма 		+ Строка.Сумма;
		НайденныеСтроки[0].СуммаНДС 	= НайденныеСтроки[0].СуммаНДС 	+ Строка.СуммаНДС;
		
	Иначе
		
		НоваяСтрока = ТабЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьТабЧастьДокументОснование()

// Процедура выполняет действия на сервере,
//  необходимые при изменении СтатьиОборотов.
//
// Параметры:
//  Контейнер - ДанныеФормыСтруктура, СтрокаТабличнойЧасти.
//
&НаКлиенте 
Процедура ИзменениеСтатьиОборотов(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Контейнер) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		 ИД = Контейнер.ПолучитьИдентификатор();
		
	Иначе	
		
		ИД = Неопределено;
		
	КонецЕсли; 
    ИзменениеСтатьиОборотовСервер(ИД);
	
КонецПроцедуры // ИзменениеСтатьиОборотов()

// Процедура обрабатывает изменение статьи на сервере 
//
&НаСервере
Процедура ИзменениеСтатьиОборотовСервер(ИД)

	Если ТипЗнч(ИД) = Тип("Число") Тогда
		
		Контейнер = Объект.ФактическиеДанные.НайтиПоИдентификатору(ИД);
		
	Иначе	
		
		Контейнер = Объект;
		
	КонецЕсли; 

	Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) Тогда
		
		НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(Контейнер.СтатьяОборотов);
		бит_Бюджетирование.УстановитьИспользованиеАналитики(Контейнер, НастройкиСтатьи, фКэшЗначений.ИзмеренияДоп);
		
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеСтатьиОборотов()

&НаСервере
Процедура НоменклатураПриИзмененииСервер()

	Документы.бит_мто_ОтражениеФактаЗакупки.ВидимостьНазначенныхАналитик(Объект.ФактическиеДанные);

КонецПроцедуры

#КонецОбласти
