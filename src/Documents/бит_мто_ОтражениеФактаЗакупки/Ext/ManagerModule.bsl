#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Процедура управляет видимостью полей назначенных аналитик.
//
// Параметры:
//  ФактическиеДанные	 - ТаблицаЗначений	 - Таблица фактических данных.
//
Процедура ВидимостьНазначенныхАналитик(ФактическиеДанные) Экспорт 
	
	Настр = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Для каждого Аналит Из Настр Цикл
		
		Если НЕ Аналит.Значение.ЭтоСоставнойТип
			И Аналит.Значение.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.Номенклатура") Тогда 
			
			Для каждого Строка Из ФактическиеДанные Цикл
				Строка[Аналит.Ключ] = Строка.Номенклатура;
			КонецЦикла; 
		КонецЕсли;	
	КонецЦикла;	
		
КонецПроцедуры // ВидимостьНазначенныхАналитик()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
// Функция выполняет поиск документа ОтражениеФакта по документу основанию.
// 
// Параметры:
//  ДокументОснование - ДокументСсылка.
// 
// Возвращаемое значение:
//  ДокументОтражение - ДокументСсылка.бит_мто_ОтражениеФактаЗакупки.
// 
Функция НайтиДокументОтражение(ДокументОснование) Экспорт

	Режим = ПривилегированныйРежим();
	
	Если Не Режим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ДокументОтражение = Документы.бит_мто_ОтражениеФактаЗакупки.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_мто_ОтражениеФактаЗакупки.Ссылка
	               |ИЗ
	               |	Документ.бит_мто_ОтражениеФактаЗакупки КАК бит_мто_ОтражениеФактаЗакупки
	               |ГДЕ
	               |	бит_мто_ОтражениеФактаЗакупки.ДокументОснование = &ДокументОснование";
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ДокументОтражение = Выборка.Ссылка;
	
	КонецЕсли; 

	Если Не Режим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ДокументОтражение;
	
КонецФункции // НайтиДокументОтражение()

// Функция готовит табличную часть для документа отражение.
// 
// Параметры:
//  Основание - ДокументСсылка.ПоступлениеТоваровУслуг.
// 
// Возвращаемое значение:
//  ТабличнаяЧастьОснование - Таблица.
// 
Функция ПодготовитьТабличнуюЧастьПоступленияТоваровУслуг(Основание) Экспорт 

	Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
		
		ТабличнаяЧастьОснование = Основание.Товары.Выгрузить();
		
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		
		ТабличнаяЧастьОснование = Основание.Услуги.Выгрузить();
		
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		ТабличнаяЧастьОснование = Основание.Оборудование.Выгрузить();
		
		Для каждого стрТовары Из Основание.Товары.Выгрузить() Цикл
		
			НоваяСтрока = ТабличнаяЧастьОснование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, стрТовары);
		
		КонецЦикла;
		
		Для каждого стрУслуги Из Основание.Услуги.Выгрузить() Цикл
		
			НоваяСтрока = ТабличнаяЧастьОснование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, стрУслуги);
		
		КонецЦикла;
		
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		
		ТабличнаяЧастьОснование = Основание.Товары.Выгрузить();
		
		Для каждого стрУслуги Из Основание.Услуги.Выгрузить() Цикл
		
			НоваяСтрока = ТабличнаяЧастьОснование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, стрУслуги);
		
		КонецЦикла;
		
	КонецЕсли; 

	Возврат ТабличнаяЧастьОснование;
	
КонецФункции // ПодготовитьТабличнуюЧастьПоступленияТоваровУслуг()

#Область ФормированиеДвижений

// Функция готовит таблицу по табличной части документа ОтражениеФактаЗакупки.
// 
Функция ПодготовитьТаблицуОтражениеФакта(ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФактЗакупки.Ссылка,
	               |	ФактЗакупки.Период,
	               |	ФактЗакупки.Номенклатура,
	               |	ФактЗакупки.Количество,
	               |	ФактЗакупки.ЕдиницаИзмерения,
	               |	ФактЗакупки.Цена,
	               |	ФактЗакупки.Сумма,
	               |	ФактЗакупки.СтавкаНДС,
	               |	ФактЗакупки.СуммаНДС,
	               |	ФактЗакупки.Всего,
	               |	ФактЗакупки.СтатьяОборотов,
	               |	ФактЗакупки.ЦФО,
	               |	ФактЗакупки.Проект,
	               |	ФактЗакупки.Контрагент,
	               |	ФактЗакупки.ДоговорКонтрагента,
	               |	ФактЗакупки.НоменклатурнаяГруппа,
	               |	ФактЗакупки.БанковскийСчет,
	               |	ФактЗакупки.Аналитика_1,
	               |	ФактЗакупки.Аналитика_2,
	               |	ФактЗакупки.Аналитика_3,
	               |	ФактЗакупки.Аналитика_4,
	               |	ФактЗакупки.Аналитика_5,
	               |	ФактЗакупки.Аналитика_6,
	               |	ФактЗакупки.Аналитика_7,
	               |	ФактЗакупки.ЗаявкаНаЗакупку,
	               |	ФактЗакупки.ЗаявкаНаПотребность,
	               |	ФактЗакупки.Потребность
	               |ИЗ
	               |	Документ.бит_мто_ОтражениеФактаЗакупки КАК бит_мто_ОтражениеФактаЗакупки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_мто_ОтражениеФактаЗакупки.ФактическиеДанные КАК ФактЗакупки
	               |		ПО бит_мто_ОтражениеФактаЗакупки.Ссылка = ФактЗакупки.Ссылка
	               |ГДЕ
	               |	бит_мто_ОтражениеФактаЗакупки.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	
	РезТаблица = Результат.Выгрузить();
	
	Возврат РезТаблица;
	
КонецФункции // ПодготовитьТаблицуОтражениеФакта()
	
// Процедура записывает движения документа ОтражениеФактаЗакупки. 
// 
// Параметры:
//  Источник - ДокументОбъект.
//  Отказ - Булево.
//  ЗаписыватьДвижения.
// 
Процедура ДвиженияПоРегистрамОтражениеФактаЗакупки(Источник, Отказ, ЗаписыватьДвижения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Источник.Организация);
	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Источник.Дата,,СтруктураПараметров,"Ошибки");	
	КонтрольНоменклатуры = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы,ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьКоличествоНоменклатурыПоЗаявкамНаЗакупку);
	
	ТаблицаТовары = ПодготовитьТаблицуОтражениеФакта(Источник.Ссылка);
	
	// Движения по РН.бит_мто_ПланируемаяЗакупкаНоменклатуры.
	СформироватьДвиженияПланируемаяЗакупкаНоменклатуры(Источник, ТаблицаТовары, ЗаписыватьДвижения);
	
	КонтрольОстатковНоменклатурыПоЗакупкам(ТаблицаТовары, Отказ, КонтрольНоменклатуры, Источник.МоментВремени());
	
	// Движение по РН.бит_мто_НоменклатураКВыдачеПоЗаявкамНаПотребность.
	СформироватьДвиженияПоРегиструНоменклатураКВыдаче(Источник, ТаблицаТовары, ЗаписыватьДвижения);
	
	// Движения по РН.бит_ОборотыПоБюджетам
	СформироватьДвиженияОборотыПоБюджетам(Источник, ТаблицаТовары, ЗаписыватьДвижения);
	
	// Движения по РН.бит_мто_НезапланированныеЗакупки.
	СформироватьДвиженияНезапланированныеЗакупки(Источник, ТаблицаТовары, ЗаписыватьДвижения, Истина);
	
	// Установка статусов
	Если НЕ Отказ Тогда
	
		Для каждого Строка Из ТаблицаТовары Цикл
		
			Если ЗначениеЗаполнено(Строка.ЗаявкаНаПотребность) Тогда
			
				ЗаявкаОб = Строка.ЗаявкаНаПотребность.ПолучитьОбъект();
				Если ЗаявкаОб.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги Тогда
					ЗаявкаОб.УстановитьСтатус();
				Иначе	
					ЗаявкаОб.УстановитьСтатус();
				КонецЕсли; 
			КонецЕсли; 
			Если ЗначениеЗаполнено(Строка.ЗаявкаНаЗакупку) Тогда
				ЗаявкаОб = Строка.ЗаявкаНаЗакупку.ПолучитьОбъект();
				ЗаявкаОб.УстановитьСтатус();
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // ДвиженияПоРегистрамОтражениеФактаЗакупки()	

// Процедура осуществляет контроль количества номенклатуры
// по регистру бит_мто_ПланируемаяЗакупкаНоменклатуры.
// 
// Параметры:
//  ТаблицаТовары - ТаблицаЗначений.
//  Отказ             - Булево.
// 
Процедура КонтрольОстатковНоменклатурыПоЗакупкам(ТаблицаТовары, Отказ, КонтрольНоменклатуры, Момент)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ТаблицаТовары);
	Запрос.УстановитьПараметр("Момент", Момент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.Номенклатура,
	               |	Таблица.ЗаявкаНаЗакупку,
	               |	Таблица.ЕдиницаИзмерения,
	               |	Таблица.Количество
	               |ПОМЕСТИТЬ врем
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПланируемаяЗакупкаНоменклатурыОстатки.Номенклатура,
	               |	ПланируемаяЗакупкаНоменклатурыОстатки.ДокументПланирования,
	               |	ЕСТЬNULL(ПланируемаяЗакупкаНоменклатурыОстатки.КоличествоОстаток, 0) КАК Остаток,
	               |	врем.ЕдиницаИзмерения,
	               |	ЕСТЬNULL(врем.Количество + ПланируемаяЗакупкаНоменклатурыОстатки.КоличествоОстаток, 0) КАК Доступно
	               |ИЗ
	               |	врем КАК врем
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_мто_ПланируемаяЗакупкаНоменклатуры.Остатки(&Момент, ) КАК ПланируемаяЗакупкаНоменклатурыОстатки
	               |		ПО врем.Номенклатура = ПланируемаяЗакупкаНоменклатурыОстатки.Номенклатура
	               |			И врем.ЗаявкаНаЗакупку = ПланируемаяЗакупкаНоменклатурыОстатки.ДокументПланирования";
	
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ДокументПланирования) Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Если НЕ КонтрольНоменклатуры = Перечисления.бит_мто_ВидыКонтроляПоЗаявкамНаЗакупку.НеКонтролировать
			И Выборка.Остаток < 0 Тогда
			
			ТекстСообщения = Нстр("ru = 'Превышен остаток по заявке на закупку: %1%! Всего доступно %2% %3%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.Номенклатура, Выборка.Доступно, Выборка.ЕдиницаИзмерения);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Если КонтрольНоменклатуры = Перечисления.бит_мто_ВидыКонтроляПоЗаявкамНаЗакупку.Контролировать Тогда
			
				Отказ = Истина;
			
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры // КонтрольОстатковНоменклатурыПоЗакупкам()

// Процедура формирует движение по регистру Планируемая закупка номенклатуры.
// 
// Параметры:
//  Источник - ДокументОбъект.
//  ТаблицаФактическиеДанные - ТаблицаЗначений.
// 
Процедура СформироватьДвиженияПланируемаяЗакупкаНоменклатуры(Источник, ТаблицаТовары, ЗаписыватьДвижения)
	
	СтрОтбор = Новый Структура();
	СтрОтбор.Вставить("Регистратор", Источник.Ссылка);
	
	// Выполнение движений
	Если ЗаписыватьДвижения Тогда
		НаборЗаписей = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыНакопления.бит_мто_ПланируемаяЗакупкаНоменклатуры, СтрОтбор);
	Иначе	
		НаборЗаписей = Источник.Движения.бит_мто_ПланируемаяЗакупкаНоменклатуры;
	КонецЕсли;
	
	НаборЗаписей.Записывать = Истина;
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого Стр Из ТаблицаТовары Цикл
		
		Если Стр.ЗаявкаНаЗакупку = Документы.бит_мто_ЗаявкаНаЗакупку.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Регистратор = Источник;
		НоваяСтрока.ДокументПланирования = Стр.ЗаявкаНаЗакупку;
		
		// Изменение кода. Начало. 04.10.2016{{
		Если Стр.ЗаявкаНаЗакупку.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги
			И НоваяСтрока.Количество = 0 Тогда
		
			НоваяСтрока.Количество = 1;
			
		Иначе	
			НоваяСтрока.Количество = Стр.Количество;
		КонецЕсли; 
		// Изменение кода. Конец. 04.10.2016}}
		
	КонецЦикла; 
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
	
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		НаборЗаписей.ДобавитьДвижение();
		
		// Запись выполняем безусловно, т.к. это необходимо для установки статусов.
		НаборЗаписей.Записать();
	Иначе
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;	
	
КонецПроцедуры // СформироватьДвиженияПланируемаяЗакупкаНоменклатуры()

// Процедура выполняет движения по регистру бит_мто_НоменклатураКВыдачеПоЗаявкамНаПотребность. 
// 
// Параметры:
//  Источник - ДокументОбъект.
//  ТаблицаФактическиеДанные - ТаблицаЗначений.
// 
Процедура СформироватьДвиженияПоРегиструНоменклатураКВыдаче(Источник, ТаблицаТовары, ЗаписыватьДвижения)

	СтрОтбор = Новый Структура();
	СтрОтбор.Вставить("Регистратор", Источник.Ссылка);
	
	// Выполнение движений.
	Если ЗаписыватьДвижения Тогда
		НаборЗаписей = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыНакопления.бит_мто_НоменклатураКВыдачеПоЗаявкамНаПотребность, СтрОтбор);
	Иначе	
		НаборЗаписей = Источник.Движения.бит_мто_НоменклатураКВыдачеПоЗаявкамНаПотребность;
	КонецЕсли;
	
	НаборЗаписей.Записывать = Истина;
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого Стр Из ТаблицаТовары Цикл
		
		Если Стр.ЗаявкаНаПотребность = Документы.бит_мто_ЗаявкаНаПотребность.ПустаяСсылка()
			ИЛИ Стр.ЗаявкаНаПотребность.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Организация 		= Стр.ЗаявкаНаПотребность.Организация;
		НоваяСтрока.ЦФО		 			= Стр.ЗаявкаНаПотребность.ЦФО;
		НоваяСтрока.ЗаявкаНаПотребность = Стр.ЗаявкаНаПотребность;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.Регистратор = Источник;
		
	КонецЦикла; 
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
	
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		НаборЗаписей.ДобавитьДвижение();
		
		// Запись выполняем безусловно, т.к. это необходимо для установки статусов.
		НаборЗаписей.Записать();
		
	КонецЕсли;	

КонецПроцедуры // СформироватьДвиженияПоРегиструНоменклатураКВыдаче()

// Процедура формируем движения по оборотам по бюджетам. 
// 
// Параметры:
//  Источник - ДокументОбъект.
//  ТаблицаФактическиеДанные - ТаблицаЗначений.
//  ЗаписыватьДвижения - Булево.
// 
Процедура СформироватьДвиженияОборотыПоБюджетам(Источник, ТаблицаФактическиеДанные, ЗаписыватьДвижения)

	// Проверим необходимость формирования факта.
	СтруктураПараметров = Новый Структура;
	МетаИсточник = Источник.Метаданные();
	Если бит_РаботаСМетаданными.ЕстьРеквизит("Организация", МетаИсточник)  Тогда
	 	СтруктураПараметров.Вставить("Организация",Источник.Организация);
	КонецЕсли;		
	
	НастройкиПрограммы  = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Источник.Дата, , СтруктураПараметров, "Ошибки");	
	ФормироватьДвижения = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.ФормироватьДвиженияПоФактуБюджетаЗакупок);
	ФормироватьПроводкиБюджетирования  = Не бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы
					, ПланыВидовХарактеристик.бит_НастройкиПрограммы.НеФормироватьПроводкиБюджетированияПоФактуБюджетаЗакупок);
	
	Если НЕ ФормироватьДвижения Тогда
		Возврат;
	КонецЕсли; 
	
	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним");	
	
	// Подготовка данных для проведения
	ФормироватьЗависимыеОбороты  = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.ФормироватьЗависимыеОборотыПоФактуБюджетаЗакупок);
	
	СценарийБюджетирования  = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.СценарийОтраженияФактаБДДС);
	Если НЕ ЗначениеЗаполнено(СценарийБюджетирования) Тогда
	
		СценарийБюджетирования = Справочники.СценарииПланирования.ФАКТ;
	
	КонецЕсли; 
	
	СтрОтбор = Новый Структура();
	СтрОтбор.Вставить("Регистратор", Источник.Ссылка);
	
	// Выполнение движений
	Если ЗаписыватьДвижения Тогда
		НаборЗаписей = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыНакопления.бит_ОборотыПоБюджетам, СтрОтбор);
	Иначе	
		НаборЗаписей = Источник.Движения.бит_ОборотыПоБюджетам;
	КонецЕсли;
	
	НаборЗаписей.Записывать = Истина;
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(Источник.Ссылка,Источник.Дата,Новый Структура("Упр,Регл"));
	
	СтрКурса = Новый Структура;
	СтрКурса.Вставить("Курс"     ,Источник.КурсВзаиморасчетов);
	СтрКурса.Вставить("Кратность",Источник.КратностьВзаиморасчетов);
	СтрКурса.Вставить("Валюта"   ,Источник.ВалютаДокумента);
	СтруктураКурсыВалют.Вставить("Документ",СтрКурса);
	
	
	Для каждого СтрокаТаблицы Из ТаблицаФактическиеДанные Цикл
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений,СтрокаТаблицы);
		
		СтрокаДвижений.Сценарий = СценарийБюджетирования;
		
		// Проверка допустимости ввода аналитик.
		Для каждого КлючИЗначение Из Измерения Цикл
			
			ИмяИзмерения     = КлючИЗначение.Ключ;
			ИмяРеквизитаУчет = "Учет_" + КлючИЗначение.Ключ;
			Если НЕ СтрокаДвижений.СтатьяОборотов[ИмяРеквизитаУчет] Тогда					
				СтрокаДвижений[ИмяИзмерения] = Неопределено;					
			КонецЕсли; 
			
		КонецЦикла; // Измерения
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвижений,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
	КонецЦикла; 
	
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ДобавитьДвижение();
	
	Если ФормироватьЗависимыеОбороты Тогда		
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоНаборуЗаписей(Источник, НаборЗаписей);		
	КонецЕсли; 
	
	Если ЗаписыватьДвижения Тогда
		ДвиженияБюджетирование = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыБухгалтерии.бит_Бюджетирование, СтрОтбор);
		
		Если ФормироватьЗависимыеОбороты Тогда
			
			НоваяТаблица = ТаблицаФактическиеДанные.Скопировать();
			НоваяТаблица.Очистить();
			НоваяТаблица.Колонки.Добавить("Сценарий");
			НоваяТаблица.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число"));
			НоваяТаблица.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число"));
			НоваяТаблица.Колонки.Добавить("СуммаСценарий", Новый ОписаниеТипов("Число"));
			Для каждого Элемент Из НаборЗаписей Цикл
			
				НоваяСтрока = НоваяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
			
			КонецЦикла; 
			
			бит_Бюджетирование.СформироватьПроводкиБюджетирования(НоваяТаблица, ДвиженияБюджетирование);	
			
		Иначе
			
			ТаблицаФактическиеДанные.Колонки.Добавить("Сценарий");
			ТаблицаФактическиеДанные.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число"));
			ТаблицаФактическиеДанные.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число"));
			ТаблицаФактическиеДанные.Колонки.Добавить("СуммаСценарий", Новый ОписаниеТипов("Число"));
			бит_Бюджетирование.СформироватьПроводкиБюджетирования(ТаблицаФактическиеДанные, ДвиженияБюджетирование);
			
		КонецЕсли;
		
	Иначе
		
		Если ФормироватьЗависимыеОбороты Тогда
			
			НоваяТаблица = ТаблицаФактическиеДанные.Скопировать();
			НоваяТаблица.Очистить();
			НоваяТаблица.Колонки.Добавить("Сценарий");
			НоваяТаблица.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число"));
			НоваяТаблица.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число"));
			НоваяТаблица.Колонки.Добавить("СуммаСценарий", Новый ОписаниеТипов("Число"));
			Для каждого Элемент Из НаборЗаписей Цикл
			
				НоваяСтрока = НоваяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
				
			
			КонецЦикла; 
			
			бит_Бюджетирование.СформироватьПроводкиБюджетирования(НоваяТаблица, Источник.Движения.бит_Бюджетирование);	
			
		Иначе
			
			ТаблицаФактическиеДанные.Колонки.Добавить("Сценарий");
			ТаблицаФактическиеДанные.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число"));
			ТаблицаФактическиеДанные.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число"));
			ТаблицаФактическиеДанные.Колонки.Добавить("СуммаСценарий", Новый ОписаниеТипов("Число"));
			бит_Бюджетирование.СформироватьПроводкиБюджетирования(ТаблицаФактическиеДанные, Источник.Движения.бит_Бюджетирование);	
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ЗаписыватьДвижения Тогда
		НаборЗаписей.Записать();
	КонецЕсли;	

	// Регистру бухгалтерии бюджетирование
	Если ФормироватьПроводкиБюджетирования Тогда
		
		ТабЗаписейОбороты = НаборЗаписей.Выгрузить();
		Если ЗаписыватьДвижения Тогда
			СоответствиеОтбора = Новый Соответствие();
			СоответствиеОтбора.Вставить("Регистратор", Источник.Ссылка);
			ДвиженияБюджетирование = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыБухгалтерии.бит_Бюджетирование, СоответствиеОтбора);
			бит_Бюджетирование.СформироватьПроводкиБюджетирования(ТабЗаписейОбороты, ДвиженияБюджетирование);
			ДвиженияБюджетирование.Записать();
		Иначе
			бит_Бюджетирование.СформироватьПроводкиБюджетирования(ТабЗаписейОбороты, Источник.Движения.бит_Бюджетирование);		
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // СформироватьДвиженияОборотыПоБюджетам()

// Процедура выполняет движения по регистру бит_мто_НезапланированныеЗакупки.
// 
// Параметры:
//  Источник - ДокументОбъект.
//  ТаблицаФактическиеДанные - ТаблицаЗначений.
//  ЗаписыватьДвижения - Булево.
// 
Процедура СформироватьДвиженияНезапланированныеЗакупки(Источник, ТаблицаТовары, ЗаписыватьДвижения, ЕстьДокументОтражение) Экспорт 

	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(Источник.Ссылка,Источник.Дата,Новый Структура("Упр,Регл"));
	
	СтрКурса = Новый Структура;
	СтрКурса.Вставить("Курс"     ,Источник.КурсВзаиморасчетов);
	СтрКурса.Вставить("Кратность",Источник.КратностьВзаиморасчетов);
	СтрКурса.Вставить("Валюта"   ,Источник.ВалютаДокумента);
	СтруктураКурсыВалют.Вставить("Документ",СтрКурса);
	
	СтрОтбор = Новый Структура();
	СтрОтбор.Вставить("Регистратор", Источник.Ссылка);
	
	// Выполнение движений
	Если ЗаписыватьДвижения Тогда
		НаборЗаписей = бит_ОбщегоНазначения.ПолучитьНаборЗаписейСОтбором(РегистрыНакопления.бит_мто_НезапланированныеЗакупки, СтрОтбор);
	Иначе	
		НаборЗаписей = Источник.Движения.бит_мто_НезапланированныеЗакупки;
	КонецЕсли;
	
	НаборЗаписей.Записывать = Истина;
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Аналитики = ДополнительныеАналитики(Источник);
	
	Для каждого Стр Из ТаблицаТовары Цикл
		
		Если ЕстьДокументОтражение
			И ЗначениеЗаполнено(Стр.ЗаявкаНаЗакупку) Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.Регистратор = Источник;
		Если Аналитики<>Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Аналитики);
		КонецЕсли; 
		
		Если НЕ ЕстьДокументОтражение Тогда
			НоваяСтрока.Период = Источник.Дата;
			НоваяСтрока.ВалютаДокумента = Источник.ВалютаДокумента;
		КонецЕсли; 
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(НоваяСтрока,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
	КонецЦикла; 
	
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ДобавитьДвижение();
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // СформироватьДвиженияНезапланированныеЗакупки()

Функция ДополнительныеАналитики(Источник)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	ИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	Ном = 1;
	Для каждого КлючИЗначение Из ИзмеренияДоп Цикл
		ИмяИзмерения 	 = КлючИЗначение.Ключ;
		ТекущаяНастройка = НастройкиИзмерений[ИмяИзмерения];
		Если ТекущаяНастройка = Неопределено Тогда
			ТекущаяАналитика = Неопределено;
			ПустоеЗначение   = Неопределено;
		Иначе	
			ТекущаяАналитика = ТекущаяНастройка.Аналитика;
			ПустоеЗначение   = ТекущаяНастройка.ЗначениеПоУмолчанию;
		КонецЕсли;
		Запрос.УстановитьПараметр("Аналитика_"+Ном				, ТекущаяАналитика);
		Запрос.УстановитьПараметр("ПустоеЗначениеАналитика_"+Ном, ПустоеЗначение);
		Ном = Ном+1;
	КонецЦикла; 
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ЦФО)
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	               |		КОНЕЦ) КАК ЦФО,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.Проект)
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	               |		КОНЕЦ) КАК Проект,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.СтатьяОборотов)
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	               |		КОНЕЦ) КАК СтатьяОборотов,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.НоменклатурнаяГруппа)
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	               |		КОНЕЦ) КАК НоменклатурнаяГруппа,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_1
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ &ПустоеЗначениеАналитика_1
	               |		КОНЕЦ) КАК Аналитика_1,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_2
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ &ПустоеЗначениеАналитика_2
	               |		КОНЕЦ) КАК Аналитика_2,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_3
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ &ПустоеЗначениеАналитика_3
	               |		КОНЕЦ) КАК Аналитика_3,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_4
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ &ПустоеЗначениеАналитика_4
	               |		КОНЕЦ) КАК Аналитика_4,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_5
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ &ПустоеЗначениеАналитика_5
	               |		КОНЕЦ) КАК Аналитика_5,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_6
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ &ПустоеЗначениеАналитика_6
	               |		КОНЕЦ) КАК Аналитика_6,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА бит_ДополнительныеАналитики.Аналитика = &Аналитика_7
	               |				ТОГДА бит_ДополнительныеАналитики.ЗначениеАналитики
	               |			ИНАЧЕ &ПустоеЗначениеАналитика_7
	               |		КОНЕЦ) КАК Аналитика_7,
	               |	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	               |	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	               |		ПО ПоступлениеТоваровУслуг.Ссылка = бит_ДополнительныеАналитики.Объект
	               |ГДЕ
	               |	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваровУслуг.Контрагент,
	               |	ПоступлениеТоваровУслуг.ДоговорКонтрагента";
	
	Результат = Запрос.Выполнить().Выгрузить();

	Если Результат.Количество()>0 Тогда
		СтрВозврата = Результат[0];
	Иначе	
		СтрВозврата = Неопределено;
	КонецЕсли; 
	
	Возврат СтрВозврата;
	
КонецФункции // ДополнительныеАналитики()

#КонецОбласти

#КонецОбласти

#КонецЕсли
