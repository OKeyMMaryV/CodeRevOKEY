#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ВалютаМеждУчета Экспорт; // Хранит валюту международного учета.

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Переменная, хранящее значение структуры шапки документа.
	Перем СтруктураШапкиДокумента;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	// Подготовим структуру шапки документа.
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Получим структуру курсов валют.
	СтруктураКурсыВалют = СтруктураКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим таблицы для возможности проведения.
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют);
	
	// Проверить заполнение таблиц.
	ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим исторические курсы валют по каждому НМА.
	МассивНМА = НематериальныеАктивы.ВыгрузитьКолонку("НематериальныйАктив");
	МассивНМА = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивНМА);
	ИсторическиеКурсы = СтруктураИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, СтруктураШапкиДокумента.Дата, СтруктураКурсыВалют);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, ИсторическиеКурсы, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	 
	
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЭтоПеревод = (ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеНМА.ПереводВПредназначенныеДляПродажи);
	ЭтоПродажа = (ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеНМА.Продажа);
	
	Если ЭтоПеревод Тогда
		РеквизитСчетНРП = ПроверяемыеРеквизиты.Найти("СчетНРП");
		Если НЕ РеквизитСчетНРП = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(РеквизитСчетНРП);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоПродажа Тогда
		
		РеквизитСчетВзаиморасчетов = ПроверяемыеРеквизиты.Найти("СчетВзаиморасчетов");
		Если НЕ РеквизитСчетВзаиморасчетов = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(РеквизитСчетВзаиморасчетов);
		КонецЕсли;
		
		РеквизитСчетНДС = ПроверяемыеРеквизиты.Найти("СчетНДС");
		Если НЕ РеквизитСчетНДС = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(РеквизитСчетНДС);
		КонецЕсли;
		
		РеквизитСуммаПродажи = ПроверяемыеРеквизиты.Найти("НематериальныеАктивы.СуммаПродажи");
		Если НЕ РеквизитСуммаПродажи = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(РеквизитСуммаПродажи);
		КонецЕсли;
		
	КонецЕсли;	
	
	СтруктураНеДублирующихсяПолей = Новый Структура;
	СтруктураНеДублирующихсяПолей.Вставить("НематериальныйАктив");
	
	// Проверим наличие дублей в табличной части "ДокументыПланирования".
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
																	 ,"НематериальныеАктивы"
																	 ,СтруктураНеДублирующихсяПолей
																	 ,Отказ);
																	 
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура синхронизирует реквизиты строки НМА с аналитикой счетов.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.НематериальныеАктивы.
//  ИмяСубконто   - Строка.
// 
Процедура СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, ИмяСубконто) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		 Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяСтрока.НематериальныйАктив) Тогда
		
		ТипНМА = Тип("СправочникСсылка.НематериальныеАктивы");
		
		Для Ном = 1 По мКоличествоСубконтоМУ Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипНМА Тогда
				ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.НематериальныйАктив;
			КонецЕсли; 
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиНМА()

// Процедура заполняет соответствие "Нематериальный актив - модель учета".
// 
// Параметры:
//  СоответствиеНМА_МодельУчета - Соответствие.
//  НематериальныйАктив		    - СправочникСсылка.НематериальныеАктивы, массив.
// 
Процедура ЗаполнитьСоответствиеНМА_МодельУчета(СоответствиеНМА_МодельУчета
											  ,НематериальныйАктив) Экспорт
											 
	ЭтоПеревод = (ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеНМА.ПереводВПредназначенныеДляПродажи);
											 
	Если Не ЭтоПеревод 
		Или Не ЗначениеЗаполнено(НематериальныйАктив) Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МоментВремени"	   , КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация"		   , Организация);
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("ПараметрКласс"	   , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_НМА);
	Запрос.УстановитьПараметр("ПустаяОрганизация"  , Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассыНМА_МУ.НематериальныйАктив,
	|	КлассыНМА_МУ.ЗначениеПараметра КАК Класс
	|ПОМЕСТИТЬ КлассыНМА_МУ
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыНМА.СрезПоследних(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&НематериальныйАктив)
	|				И Параметр = &ПараметрКласс) КАК КлассыНМА_МУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассыНМА_МУ.НематериальныйАктив,
	|	ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета
	|ПОМЕСТИТЬ ПараметрыКлассовВНА_ПустаяОрганизация
	|ИЗ
	|	КлассыНМА_МУ КАК КлассыНМА_МУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыКлассовВНА КАК ПараметрыКлассовВНА_ПустаяОрганизация
	|		ПО КлассыНМА_МУ.Класс = ПараметрыКлассовВНА_ПустаяОрганизация.Класс
	|			И (ПараметрыКлассовВНА_ПустаяОрганизация.Организация = &ПустаяОрганизация)
	|ГДЕ
	|	(НЕ ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассыНМА_МУ.НематериальныйАктив,
	|	ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета
	|ПОМЕСТИТЬ ПараметрыКлассовВНА_НеПустаяОрганизация
	|ИЗ
	|	КлассыНМА_МУ КАК КлассыНМА_МУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыКлассовВНА КАК ПараметрыКлассовВНА_НеПустаяОрганизация
	|		ПО КлассыНМА_МУ.Класс = ПараметрыКлассовВНА_НеПустаяОрганизация.Класс
	|			И (НЕ ПараметрыКлассовВНА_НеПустаяОрганизация.Организация = &ПустаяОрганизация)
	|ГДЕ
	|	(НЕ ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПараметрыКлассовВНА_НеПустаяОрганизация.НематериальныйАктив ЕСТЬ NULL 
	|			ТОГДА ПараметрыКлассовВНА_ПустаяОрганизация.НематериальныйАктив
	|		ИНАЧЕ ПараметрыКлассовВНА_НеПустаяОрганизация.НематериальныйАктив
	|	КОНЕЦ КАК НематериальныйАктив,
	|	ВЫБОР
	|		КОГДА ПараметрыКлассовВНА_НеПустаяОрганизация.НематериальныйАктив ЕСТЬ NULL 
	|			ТОГДА ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета
	|		ИНАЧЕ ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета
	|	КОНЕЦ КАК МодельУчета
	|ИЗ
	|	ПараметрыКлассовВНА_НеПустаяОрганизация КАК ПараметрыКлассовВНА_НеПустаяОрганизация
	|		ПОЛНОЕ СОЕДИНЕНИЕ ПараметрыКлассовВНА_ПустаяОрганизация КАК ПараметрыКлассовВНА_ПустаяОрганизация
	|		ПО ПараметрыКлассовВНА_НеПустаяОрганизация.НематериальныйАктив = ПараметрыКлассовВНА_ПустаяОрганизация.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КлассыНМА_МУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыКлассовВНА_ПустаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыКлассовВНА_НеПустаяОрганизация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		СоответствиеНМА_МодельУчета.Вставить(ВыборкаИзЗапроса.НематериальныйАктив, ВыборкаИзЗапроса.МодельУчета);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСоответствиеНМА_МодельУчета()

// Функция определяет модель учета НМА по соответствию СоответствиеНМА_МодельУчета.
// 
// Параметры:
//  СоответствиеНМА_МодельУчета - Соответствие.
//  НематериальныйАктив		    - СправочникСсылка.НематериальныеАктивы.
//                     
// Возвращаемое значение:
//  МодельУчета - ПеречислениеСсылка.бит_му_МоделиУчетаВНА.
// 
Функция МодельУчетаПоСоответствиюНМА(СоответствиеНМА_МодельУчета
										   ,НематериальныйАктив) Экспорт
	
	МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПустаяСсылка();
	
	Если СоответствиеНМА_МодельУчета[НематериальныйАктив] = Неопределено Тогда
		
		// Добавим в соответствие НМА его модель учета.
		ЗаполнитьСоответствиеНМА_МодельУчета(СоответствиеНМА_МодельУчета
										    ,НематериальныйАктив);
												  
	КонецЕсли;
	
	Если Не СоответствиеНМА_МодельУчета[НематериальныйАктив] = Неопределено Тогда
		МодельУчета = СоответствиеНМА_МодельУчета[НематериальныйАктив];
	КонецЕсли;
	
	Возврат МодельУчета;
	
КонецФункции

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Функция - Заполнить параметры подбора.
// 
// Возвращаемое значение: 
//  ПараметрыФормы - Структура.
//
Функция ЗаполнитьПараметрыПодбора() Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Организация",   Организация);                             
	ПараметрыФормы.Вставить("ВидДвижения",   ВидОперации);
	ПараметрыФормы.Вставить("Режим",         Перечисления.бит_му_РежимыПодбораВНА.ВыбытиеНМА);
	ПараметрыФормы.Вставить("ДатаНачала",    НачалоМесяца(Дата));
	ПараметрыФормы.Вставить("ДатаОкончания", КонецМесяца(Дата));
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Процедура - Заполнить нематериальные активы.
//
// Параметры:
//  ВыбранноеЗначение - Огранизация.
//
Процедура ЗаполнитьНематериальныеАктивы(ВыбранноеЗначение) Экспорт
	
	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов,ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НематериальныйАктив", СтрокаТаблицы.ВНА);
		
		МассивСтрок = НематериальныеАктивы.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = НематериальныеАктивы.Добавить();
			НоваяСтрока.НематериальныйАктив = СтрокаТаблицы.ВНА;
			НоваяСтрока.СуммаПродажи 	 	= СтрокаТаблицы.Сумма;
			НоваяСтрока.СуммаНДС 		 	= СтрокаТаблицы.СуммаНДС;
			
			// Выполним подбор счетов.
			ВыполнитьПодборСчетов(НоваяСтрока, СтрокаТаблицы);
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Нематериальный актив ""%1%"" уже подобран в строке № %2%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтрокаТаблицы.ВНА,НайденнаяСтрока.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования=Неопределено)
	
	НовыйВидОперации = ВидОперации;
	
	// Заполним шапку документа значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);

	Если НЕ ЗначениеЗаполнено(НовыйВидОперации) Тогда
		// Если этого не сделать, то при создании нового система не предложит выбрать вид операции.
		ВидОперации = НовыйВидОперации;
	КонецЕсли;
	
	Если ОбъектКопирования = Неопределено И НЕ ЗначениеЗаполнено(СчетНРП) Тогда
		СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Организация, Дата);
	КонецЕсли;
	
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДатаСеанса());
	
	КурсДокумента = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

Процедура ВыполнитьПодборСчетов(НоваяСтрока, СтрокаТаблицы)
	
	// Если это перевод, тогда
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеНМА.ПереводВПредназначенныеДляПродажи Тогда
		Возврат;
	КонецЕсли;
	
	// Подбор счетов подбирается только из документа "Передача НМА".
	Если Не ТипЗнч(СтрокаТаблицы.ДокументБУ) = Тип("ДокументСсылка.ПередачаНМА") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПродажа = (ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеНМА.Продажа);
	
	СтруктураПараметров = бит_му_ОбщегоНазначения.ПодготовитьСтруктуруПараметровДляПодбораСчетовМУ(Организация, Дата);
	ПередачаНМА_БУ 		= СтрокаТаблицы.ДокументБУ;
	
	// Получим метаданные документа НМА БУ.
	МетаДокПередачаНМА = ПередачаНМА_БУ.Метаданные();
	фКоличествоСубконтоМУ = Метаданные.ПланыСчетов.бит_Дополнительный_2.МаксКоличествоСубконто;
	
	///////////////////////////////////////////////////////////////////////////////
	// Заполним счета и аналитику шапки документа.
	
	Если ЭтоПродажа Тогда
	
		// Если счет взаиморасчетов не указан, тогда.
		Если Не ЗначениеЗаполнено(СчетВзаиморасчетов) Тогда
			
			НаборИсточник = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			НаборПриемник = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
			
			Если бит_РаботаСМетаданными.ЕстьРеквизит("СчетУчетаРасчетовСКонтрагентом", МетаДокПередачаНМА) Тогда
				
				// Заполним набор записей источник по строке таблицы значений.
				ЗаписьИсточник = НаборИсточник.Добавить();
				ЗаписьИсточник.СчетДт = ПередачаНМА_БУ.СчетУчетаРасчетовСКонтрагентом;
				
				// Заполним аналитику счета Дт.
				Если бит_РаботаСМетаданными.ЕстьРеквизит("Контрагент", МетаДокПередачаНМА) Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетДт, ЗаписьИсточник.СубконтоДт, "Контрагенты", ПередачаНМА_БУ.Контрагент);
				КонецЕсли;
				Если бит_РаботаСМетаданными.ЕстьРеквизит("ДоговорКонтрагента", МетаДокПередачаНМА) Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетДт, ЗаписьИсточник.СубконтоДт, "Договоры"	  , ПередачаНМА_БУ.ДоговорКонтрагента);
				КонецЕсли;
				
				ПротоколТрансляции = "";
				
				// Выполним подбор счетов по правилам трансляции.
				бит_МеханизмТрансляции.ВыполнитьТрансляциюДвижений(ЭтотОбъект
																  ,НаборИсточник
																  ,НаборПриемник
																  ,СтруктураПараметров
																  ,ПротоколТрансляции);
			КонецЕсли;
			
			Если НаборПриемник.Количество() > 0 Тогда
				
				// Запишем результат подбора счетов в шапку документа.
				ЗаписьПриемник = НаборПриемник[0];
				
				Если ЗначениеЗаполнено(ЗаписьПриемник.СчетДт) Тогда
					
					СчетВзаиморасчетов = ЗаписьПриемник.СчетДт;
					
					// Заполним аналитику счета взаиморасчетов.
					Для Ном = 1 По фКоличествоСубконтоМУ Цикл
						ЭтотОбъект["СубконтоВзаиморасчетов" + Ном] = бит_МеханизмТрансляции.ЗначениеСубконто(ЗаписьПриемник, "Дт", Ном);
					КонецЦикла; 
					
					Документы.бит_му_ВыбытиеНМА.ПриИзмененииСчета(ЭтотОбъект, СчетВзаиморасчетов,"СубконтоВзаиморасчетов"); 
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли; // Если Не ЗначениеЗаполнено(СчетВзаиморасчетов) Тогда.
		
		// Если счет НДС не указан, тогда
		Если Не ЗначениеЗаполнено(СчетНДС) Тогда
			
			НаборИсточник = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			НаборПриемник = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
			
			Если бит_РаботаСМетаданными.ЕстьРеквизит("СчетУчетаНДСПоРеализации", МетаДокПередачаНМА) Тогда
				
				// Заполним набор записей источник по строке таблицы значений.
				ЗаписьИсточник = НаборИсточник.Добавить();
				ЗаписьИсточник.СчетДт = ПередачаНМА_БУ.СчетУчетаНДСПоРеализации;
				
				// Заполним аналитику счета Дт.
				Если бит_РаботаСМетаданными.ЕстьРеквизит("СубконтоБУ", МетаДокПередачаНМА) Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетДт, ЗаписьИсточник.СубконтоДт, "ПрочиеДоходыИРасходы", ПередачаНМА_БУ.СубконтоБУ);
					
				ИначеЕсли бит_РаботаСМетаданными.ЕстьРеквизит("Субконто", МетаДокПередачаНМА) Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетДт, ЗаписьИсточник.СубконтоДт, "ПрочиеДоходыИРасходы", ПередачаНМА_БУ.Субконто);
				КонецЕсли;
				
				ПротоколТрансляции = "";
				
				// Выполним подбор счетов по правилам трансляции.
				бит_МеханизмТрансляции.ВыполнитьТрансляциюДвижений(ЭтотОбъект
																  ,НаборИсточник
																  ,НаборПриемник
																  ,СтруктураПараметров
																  ,ПротоколТрансляции);
			КонецЕсли;
			
			Если НаборПриемник.Количество() > 0 Тогда
				
				// Запишем результат подбора счетов в шапку документа.
				ЗаписьПриемник = НаборПриемник[0];
				
				Если ЗначениеЗаполнено(ЗаписьПриемник.СчетДт) Тогда
					
					СчетНДС = ЗаписьПриемник.СчетДт;
					
					// Заполним аналитику счета НДС.
					Для Ном = 1 По фКоличествоСубконтоМУ Цикл
						ЭтотОбъект["СубконтоНДС" + Ном] = бит_МеханизмТрансляции.ЗначениеСубконто(ЗаписьПриемник, "Дт", Ном);
					КонецЦикла; 
					
					Документы.бит_му_ВыбытиеНМА.ПриИзмененииСчета(ЭтотОбъект, СчетНДС, "СубконтоНДС");
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли; // Если Не ЗначениеЗаполнено(СчетНДС) Тогда
	
	КонецЕсли; // Если ЭтоПродажа Тогда
	
	///////////////////////////////////////////////////////////////////////////////
	// Заполним счета и аналитику новой строки.
	
	НаборИсточник = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборПриемник = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
	
	// Заполним набор записей источник по строке таблицы значений.
	ЗаписьИсточник = НаборИсточник.Добавить();
	
	// Заполним счет Дт.
	Если бит_РаботаСМетаданными.ЕстьРеквизит("СчетДоходовБУ", МетаДокПередачаНМА) Тогда
		ЗаписьИсточник.СчетДт = ПередачаНМА_БУ.СчетДоходовБУ;
	ИначеЕсли бит_РаботаСМетаданными.ЕстьРеквизит("СчетДоходов", МетаДокПередачаНМА) Тогда
		ЗаписьИсточник.СчетДт = ПередачаНМА_БУ.СчетДоходов;
	КонецЕсли;
	
	// Заполним счет Кт.
	Если бит_РаботаСМетаданными.ЕстьРеквизит("СчетРасходовБУ", МетаДокПередачаНМА) Тогда
		ЗаписьИсточник.СчетКт = ПередачаНМА_БУ.СчетРасходовБУ;
	ИначеЕсли бит_РаботаСМетаданными.ЕстьРеквизит("СчетРасходов", МетаДокПередачаНМА) Тогда
		ЗаписьИсточник.СчетКт = ПередачаНМА_БУ.СчетРасходов;
	КонецЕсли;
	
	// Заполним аналитику Дт и Кт.
	Если бит_РаботаСМетаданными.ЕстьРеквизит("СубконтоБУ", МетаДокПередачаНМА) Тогда
				
		бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетДт, ЗаписьИсточник.СубконтоДт, "ПрочиеДоходыИРасходы", ПередачаНМА_БУ.СубконтоБУ);
		бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетКт, ЗаписьИсточник.СубконтоКт, "ПрочиеДоходыИРасходы", ПередачаНМА_БУ.СубконтоБУ);
		
	ИначеЕсли бит_РаботаСМетаданными.ЕстьРеквизит("Субконто", МетаДокПередачаНМА) Тогда
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетДт, ЗаписьИсточник.СубконтоДт, "ПрочиеДоходыИРасходы", ПередачаНМА_БУ.Субконто);
		бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетКт, ЗаписьИсточник.СубконтоКт, "ПрочиеДоходыИРасходы", ПередачаНМА_БУ.Субконто);
		
	КонецЕсли;
	
	ПротоколТрансляции = "";
	
	// Выполним подбор счетов по правилам трансляции.
	бит_МеханизмТрансляции.ВыполнитьТрансляциюДвижений(ЭтотОбъект
													  ,НаборИсточник
													  ,НаборПриемник
													  ,СтруктураПараметров
													  ,ПротоколТрансляции);
	Если НаборПриемник.Количество() > 0 Тогда
		
		// Запишем результат подбора счетов в шапку документа.
		ЗаписьПриемник = НаборПриемник[0];
		
		Если ЭтоПродажа И ЗначениеЗаполнено(ЗаписьПриемник.СчетДт) Тогда
			
			НоваяСтрока.СчетДт = ЗаписьПриемник.СчетДт;
			
			// Заполним аналитику счета доходов.
			Для Ном = 1 По фКоличествоСубконтоМУ Цикл
				НоваяСтрока["СубконтоДт" + Ном] = бит_МеханизмТрансляции.ЗначениеСубконто(ЗаписьПриемник, "Дт", Ном);
			КонецЦикла; 
			
			Документы.бит_му_ВыбытиеНМА.ПриИзмененииСчета(НоваяСтрока, НоваяСтрока.СчетДт, "СубконтоДт"); 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ЗаписьПриемник.СчетКт) Тогда
			
			НоваяСтрока.СчетКт = ЗаписьПриемник.СчетКт;
			
			// Заполним аналитику счета расходов.
			Для Ном = 1 По фКоличествоСубконтоМУ Цикл
				НоваяСтрока["СубконтоКт" + Ном] = бит_МеханизмТрансляции.ЗначениеСубконто(ЗаписьПриемник, "Кт", Ном);
			КонецЦикла; 
			
			Документы.бит_му_ВыбытиеНМА.ПриИзмененииСчета(НоваяСтрока, НоваяСтрока.СчетКт, "СубконтоКт");;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьПодборСчетов()

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ)

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения строк таблиц документа.
// 
// Параметры: 
//  СтруктураТаблиц			- Структура, таблицы значений, содержащая данные для проведения и проверки.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
// 
Процедура ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок)

	МенеджерПеречисления = Перечисления.бит_му_ВидыОперацийВыбытиеНМА;
	ЭтоПеревод 			 = (СтруктураШапкиДокумента.ВидОперации = МенеджерПеречисления.ПереводВПредназначенныеДляПродажи);
	ЭтоПродажа			 = (СтруктураШапкиДокумента.ВидОперации = МенеджерПеречисления.Продажа);
	ЭтоВыбытие			 = (СтруктураШапкиДокумента.ВидОперации = МенеджерПеречисления.Выбытие);
	
	//ОК Калинин М. 290413  
	Если ЭтоВыбытие тогда
		ОК_ОбщегоНазначения.ПроверитьЗаполненостьАналитикСчетаВТабличнойЧастиДокумента(ЭтотОбъект,"НематериальныеАктивы","СчетДт","СубконтоДт",Отказ,Заголовок);
		ОК_ОбщегоНазначения.ПроверитьЗаполненостьАналитикСчетаВТабличнойЧастиДокумента(ЭтотОбъект,"НематериальныеАктивы","СчетКт","СубконтоКт",Отказ,Заголовок);
	КонецЕсли;
	//ОК Калинин М.
	
	// 1c-izhtc, ChuckNorris, 12.08.2015 ( 
	Если Отказ Тогда Возврат; КонецЕсли;
	// 1c-izhtc, ChuckNorris, 12.08.2015 ) 
	
	НачТекст = НСтр("ru='Не заполнено значение реквизита '");
	
	Если ЭтоПеревод Тогда 
		ТекстСообщенияДт = НСтр("ru='""Счет учета ВНА, предназначенных для продажи""!'");
		ТекстСообщенияКт = НСтр("ru='""Счет резерва переоценки ВНА для продажи""!'");
		
		ТекстОтсутствияСчетаДт = НачТекст + ТекстСообщенияДт;
		ТекстОтсутствияСчетаКт = НачТекст + ТекстСообщенияКт;
	Иначе
		Если Не ЭтоВыбытие Тогда
			ТекстСообщения = НСтр("ru='""Счет прочих доходов""!'");
			ТекстОтсутствияСчетаДт = НачТекст + ТекстСообщения;
		КонецЕсли;
		ТекстСообщения = НСтр("ru='""Счет прочих расходов""!'");
		ТекстОтсутствияСчетаКт = НачТекст + ТекстСообщения;
	КонецЕсли;
	
	ИмяКолонкиСчетДт = ?(ЭтоПеревод, "СчетУчетаДляПродажи"			  , "СчетПрочихДоходов");
	ИмяКолонкиСчетКт = ?(ЭтоПеревод, "СчетРезерваПереоценкиДляПродажи", "СчетПрочихРасходов");
	
	ТаблицаПоНМА = СтруктураТаблиц.НМА;
	КолонкиНМА	 = ТаблицаПоНМА.Колонки;
	
	// Проверим таблицу НМА по строчно.
	Для Каждого ТекСтрока Из ТаблицаПоНМА Цикл
		
		НачалоСообщения = НСтр("ru='В строке № %1 табличной части ""Нематериальные активы"": '");
		НачалоСообщения = СтрШаблон(НачалоСообщения, ТекСтрока.НомерСтроки);
		
		// Проверим заполненность значений строки.
		бит_му_ВНА.ПроверитьСтрокуТаблицыНМА(ТекСтрока, КолонкиНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
			
		Если ЭтоПеревод И ТекСтрока.Переведено Тогда
			
			ТекстСообщения = НСтр("ru='указан ранее переведенный нематериальный актив ""%1%"", дата перевода: %2%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																						,ТекСтрока.НематериальныйАктив
																						,Формат(ТекСтрока.ДатаПеревода, НСтр("ru = 'ДФ=dd.MM.yyyy'")));
			
			ТекстСообщения = НачалоСообщения + ТекстСообщения;
			ИмяПоля = "НематериальныеАктивы["+(ТекСтрока.НомерСтроки-1)+"].НематериальныйАктив";
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,ЭтотОбъект,ИмяПоля,Отказ);
			
		Иначе
			
			Если (ЭтоПеревод Или (Не ЭтоПеревод И Не ЭтоВыбытие))
				И Не ЗначениеЗаполнено(ТекСтрока[ИмяКолонкиСчетДт]) Тогда
				
				ТекстСообщения = НачалоСообщения + ТекстОтсутствияСчетаДт;
				ИмяПоля = "НематериальныеАктивы["+(ТекСтрока.НомерСтроки-1)+"].СчетДт";
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,ЭтотОбъект,ИмяПоля,Отказ);
				
			КонецЕсли;
			
			Если ТекСтрока.СчетКтОбязателен 
				И Не ЗначениеЗаполнено(ТекСтрока[ИмяКолонкиСчетКт]) Тогда
				
				ТекстСообщения = НачалоСообщения + ТекстОтсутствияСчетаКт;
				ИмяПоля = "НематериальныеАктивы["+(ТекСтрока.НомерСтроки-1)+"].СчетКт";
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,ЭтотОбъект,ИмяПоля,Отказ);
				
			КонецЕсли;
			
		КонецЕсли; // Если ЭтоПеревод И ТекСтрока.Переведено Тогда.
			
	КонецЦикла; // Обход таблицы НМА
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицДокумента()

// Функция готовит таблицы документа для проведения.
// 
// Возвращаемое значение:
//   СтруктураТаблиц - Структура.
// 
	Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют)  Экспорт
	
	МенеджерПеречисления = Перечисления.бит_му_ВидыОперацийВыбытиеНМА;
	ЭтоПеревод 			 = (СтруктураШапкиДокумента.ВидОперации = МенеджерПеречисления.ПереводВПредназначенныеДляПродажи);
	
	// Сформируем массив параметров НМА для получения.
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетРезерваПереоценки_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизациюСТекущегоПериода_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СпособОтраженияРасходовПоАмортизации_НМА);
	
	Если ЭтоПеревод Тогда
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.МетодНачисленияАмортизации_НМА);
	КонецЕсли;
	
	СписокНМА = НематериальныеАктивы.ВыгрузитьКолонку("НематериальныйАктив");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(СписокНМА, Истина);
	
	// Сформируем структуру параметров для получения таблицы параметров НМА.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     	  , СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("НематериальныйАктив", СписокНМА);
	СтруктураПараметров.Вставить("МоментВремени"      , ?(ЭтоНовый(), КонецДня(СтруктураШапкиДокумента.Дата), МоментВремени()));
	СтруктураПараметров.Вставить("ПараметрыВНА"	      , ПараметрыВНА);
	
	// Получим таблицу параметров НМА.
	ТаблицаПараметровНМА = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	
	// Получим массив счетов по НМА.
	МассивСчетовАмортизации 	  = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетНачисленияАмортизации_НМА");
	МассивСчетовСниженияСтоимости = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетСниженияСтоимости_НМА");
	МассивСчетовУчета 			  = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетУчета_НМА");
	МассивСчетовРезерваПереоценки = ТаблицаПараметровНМА.ВыгрузитьКолонку("СчетРезерваПереоценки_НМА");
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовАмортизации	  , Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовСниженияСтоимости, Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета			  , Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовРезерваПереоценки, Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПараметров"      		 , ТаблицаПараметровНМА);
	//++СисИнфо //передаем границу конца месяца, вместо момента времени, т.к. движения по начислению амортизации и обесценению делаются концом месяца //2012-07-25
	Параметры = Новый Массив(2);
	Параметры[0] = КонецМесяца(Дата);
	Параметры[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),Параметры);
	Запрос.УстановитьПараметр("МоментВремени"				 , Граница);
	//Запрос.УстановитьПараметр("МоментВремени"				 , МоментВремени());
	//--СисИнфо
	Запрос.УстановитьПараметр("МассивСчетовАмортизации"		 , МассивСчетовАмортизации);
	Запрос.УстановитьПараметр("МассивСчетовСниженияСтоимости", МассивСчетовСниженияСтоимости);
	Запрос.УстановитьПараметр("МассивСчетовУчета"			 , МассивСчетовУчета);
	Запрос.УстановитьПараметр("МассивСчетовРезерваПереоценки", МассивСчетовРезерваПереоценки);
	Запрос.УстановитьПараметр("Организация"					 , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокНМА"					 , СписокНМА);
	Запрос.УстановитьПараметр("СостояниеПринятоКУчету"		 , Перечисления.бит_му_СостоянияНМА.ПринятоКУчету);
	Запрос.УстановитьПараметр("СостояниеСнятоСУчета"  		 , Перечисления.бит_му_СостоянияНМА.СнятоСУчета);
	Запрос.УстановитьПараметр("СобытиеПеревод"  		 	 , Перечисления.бит_му_СобытияНМА.Перевод);
	Запрос.УстановитьПараметр("СобытиеВыбытие"  		 	 , Перечисления.бит_му_СобытияНМА.Выбытие);
	Запрос.УстановитьПараметр("СобытиеПродажа"  		 	 , Перечисления.бит_му_СобытияНМА.Продажа);
	Запрос.УстановитьПараметр("Ссылка"						 , СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПустойПараметр"		  		 , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПустаяСсылка());
	
	Если ЭтоПеревод Тогда
		
		// Получим массив классов.
		МассивКлассов = ТаблицаПараметровНМА.ВыгрузитьКолонку("Класс_НМА");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивКлассов, Истина);
		
		СписаниеПоСправедливойСтоимости = Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости;
		
		Запрос.УстановитьПараметр("СписаниеПоСправедливойСтоимости", СписаниеПоСправедливойСтоимости);
		Запрос.УстановитьПараметр("МассивКлассов"				   , МассивКлассов);
		Запрос.УстановитьПараметр("ПустаяОрганизация"			   , Справочники.Организации.ПустаяСсылка());
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПараметров.ВНА КАК НематериальныйАктив,
	|	ТаблицаПараметров.СчетСниженияСтоимости_НМА КАК СчетСниженияСтоимости,
	|	ТаблицаПараметров.СчетНачисленияАмортизации_НМА КАК СчетНачисленияАмортизации,
	|	ТаблицаПараметров.СчетУчета_НМА КАК ОсновнойСчетУчета,
	|	ТаблицаПараметров.СчетРезерваПереоценки_НМА КАК ОсновнойСчетРезерваПереоценки,
	|	ТаблицаПараметров.Класс_НМА КАК Класс,
	|	ТаблицаПараметров.НачислятьАмортизациюСТекущегоПериода_НМА КАК НачислятьАмортизациюСТекущегоПериода,
	|	ТаблицаПараметров.СпособОтраженияРасходовПоАмортизации_НМА КАК СпособОтраженияРасходовПоАмортизации,
	|	ТаблицаПараметров.НачислятьАмортизацию_НМА КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ТаблицаПараметров
	|ИЗ
	|	&ТаблицаПараметров КАК ТаблицаПараметров
	|;
	|" + ?(ЭтоПеревод, "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКлассовВНА_ПустаяОрганизация.Класс,
	|	ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета
	|ПОМЕСТИТЬ ПараметрыКлассовВНА_ПустаяОрганизация
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыКлассовВНА КАК ПараметрыКлассовВНА_ПустаяОрганизация
	|ГДЕ
	|	ПараметрыКлассовВНА_ПустаяОрганизация.Организация = &ПустаяОрганизация
	|	И ПараметрыКлассовВНА_ПустаяОрганизация.Класс В (&МассивКлассов)
	|	И (НЕ ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКлассовВНА_НеПустаяОрганизация.Класс,
	|	ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета
	|ПОМЕСТИТЬ ПараметрыКлассовВНА_НеПустаяОрганизация
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыКлассовВНА КАК ПараметрыКлассовВНА_НеПустаяОрганизация
	|ГДЕ
	|	(НЕ ПараметрыКлассовВНА_НеПустаяОрганизация.Организация = &ПустаяОрганизация)
	|	И ПараметрыКлассовВНА_НеПустаяОрганизация.Класс В (&МассивКлассов)
	|	И (НЕ ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПараметрыКлассовВНА_НеПустаяОрганизация.Класс ЕСТЬ NULL 
	|			ТОГДА ПараметрыКлассовВНА_ПустаяОрганизация.Класс
	|		ИНАЧЕ ПараметрыКлассовВНА_НеПустаяОрганизация.Класс
	|	КОНЕЦ КАК Класс,
	|	ВЫБОР
	|		КОГДА ПараметрыКлассовВНА_НеПустаяОрганизация.Класс ЕСТЬ NULL 
	|			ТОГДА ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета
	|		ИНАЧЕ ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета
	|	КОНЕЦ КАК МодельУчета
	|ПОМЕСТИТЬ МоделиУчетаКлассов
	|ИЗ
	|	ПараметрыКлассовВНА_НеПустаяОрганизация КАК ПараметрыКлассовВНА_НеПустаяОрганизация
	|		ПОЛНОЕ СОЕДИНЕНИЕ ПараметрыКлассовВНА_ПустаяОрганизация КАК ПараметрыКлассовВНА_ПустаяОрганизация
	|		ПО ПараметрыКлассовВНА_НеПустаяОрганизация.Класс = ПараметрыКлассовВНА_ПустаяОрганизация.Класс
	|;
	|", "") + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыбытиеНМА_НМА.НомерСтроки,
	|	ВыбытиеНМА_НМА.НематериальныйАктив,
	|	ТаблицаПараметров.ОсновнойСчетУчета,
	|	СтоимостьНМА_МУ.Субконто1 КАК СУ_Субконто1,
	|	СтоимостьНМА_МУ.Субконто2 КАК СУ_Субконто2,
	|	СтоимостьНМА_МУ.Субконто3 КАК СУ_Субконто3,
	|	СтоимостьНМА_МУ.Субконто4 КАК СУ_Субконто4,
	|	ТаблицаПараметров.СчетНачисленияАмортизации,
	|	АмортизацияНМА_МУ.Субконто1 КАК СНА_Субконто1,
	|	АмортизацияНМА_МУ.Субконто2 КАК СНА_Субконто2,
	|	АмортизацияНМА_МУ.Субконто3 КАК СНА_Субконто3,
	|	АмортизацияНМА_МУ.Субконто4 КАК СНА_Субконто4,
	|	ТаблицаПараметров.СчетСниженияСтоимости,
	|	ВыбытиеНМА_НМА.НематериальныйАктив КАК ССС_Субконто1,
	|	ФактОбесценениеНМА_МУ.Субконто2 КАК ССС_Субконто2,
	|	ФактОбесценениеНМА_МУ.Субконто3 КАК ССС_Субконто3,
	|	ФактОбесценениеНМА_МУ.Субконто4 КАК ССС_Субконто4,
	|	ТаблицаПараметров.ОсновнойСчетРезерваПереоценки,
	|	ВыбытиеНМА_НМА.НематериальныйАктив КАК СРП_Субконто1,
	|	РезПереоценкиНМА_МУ.Субконто2 КАК СРП_Субконто2,
	|	РезПереоценкиНМА_МУ.Субконто3 КАК СРП_Субконто3,
	|	РезПереоценкиНМА_МУ.Субконто4 КАК СРП_Субконто4,
	|	ВыбытиеНМА_НМА.СчетДт КАК " 	 + ?(ЭтоПеревод, "СчетУчетаДляПродажи", "СчетПрочихДоходов") + ",
	|	ВыбытиеНМА_НМА.СубконтоДт1 КАК " + ?(ЭтоПеревод, "СУП_Субконто1" , "СПД_Субконто1") + ",
	|	ВыбытиеНМА_НМА.СубконтоДт2 КАК " + ?(ЭтоПеревод, "СУП_Субконто2" , "СПД_Субконто2") + ",
	|	ВыбытиеНМА_НМА.СубконтоДт3 КАК " + ?(ЭтоПеревод, "СУП_Субконто3" , "СПД_Субконто3") + ",
	|	ВыбытиеНМА_НМА.СубконтоДт4 КАК " + ?(ЭтоПеревод, "СУП_Субконто4" , "СПД_Субконто4") + ",
	|	ВыбытиеНМА_НМА.СчетКт КАК " 	 + ?(ЭтоПеревод, "СчетРезерваПереоценкиДляПродажи", "СчетПрочихРасходов") + ",
	|	ВыбытиеНМА_НМА.СубконтоКт1 КАК " + ?(ЭтоПеревод, "СРПП_Субконто1", "СПР_Субконто1") + ",
	|	ВыбытиеНМА_НМА.СубконтоКт2 КАК " + ?(ЭтоПеревод, "СРПП_Субконто2", "СПР_Субконто2") + ",
	|	ВыбытиеНМА_НМА.СубконтоКт3 КАК " + ?(ЭтоПеревод, "СРПП_Субконто3", "СПР_Субконто3") + ",
	|	ВыбытиеНМА_НМА.СубконтоКт4 КАК " + ?(ЭтоПеревод, "СРПП_Субконто4", "СПР_Субконто4") + ",
	|	ВыбытиеНМА_НМА.СуммаПродажи,
	|	ВыбытиеНМА_НМА.СуммаНДС,
	|	ЕСТЬNULL(СтоимостьНМА_МУ.СуммаМУОстатокДт, 0) - ЕСТЬNULL(АмортизацияНМА_МУ.СуммаМУОстатокКт, 0) - ЕСТЬNULL(ФактОбесценениеНМА_МУ.СуммаМУОстатокКт, 0) КАК ОстСтоимость,
	|	ЕСТЬNULL(АмортизацияНМА_МУ.СуммаМУОстатокКт, 0) КАК Амортизация,
	|	ЕСТЬNULL(ФактОбесценениеНМА_МУ.СуммаМУОстатокКт, 0) КАК СуммаОбесценения, " + ?(ЭтоПеревод, "
	|	ВЫБОР
	|		КОГДА МоделиУчетаКлассов.МодельУчета = &СписаниеПоСправедливойСтоимости
	|			ТОГДА ЕСТЬNULL(РезПереоценкиНМА_МУ.СуммаМУОстатокКт, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваПереоценки,
	|	ВЫБОР
	|		КОГДА МоделиУчетаКлассов.МодельУчета = &СписаниеПоСправедливойСтоимости
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СчетКтОбязателен,", "
	|	ЕСТЬNULL(РезПереоценкиНМА_МУ.СуммаМУОстатокКт, 0) КАК СуммаРезерваПереоценки,
	|	ИСТИНА КАК СчетКтОбязателен,") + "
	|	ПринятыеНМА_МУ.ДатаСостояния КАК ДатаПринятия,
	|	ВЫБОР
	|		КОГДА ПереведенныеНМА_МУ.Период ЕСТЬ NULL 
	|			ТОГДА ВыбывшиеНМА_МУ.ДатаСостояния
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВыбытиеПродажаНМА_МУ.Период ЕСТЬ NULL
	|					ТОГДА ВыбывшиеНМА_МУ.ДатаСостояния
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаВыбытия,
	|	ВЫБОР
	|		КОГДА ПереведенныеНМА_МУ.Период ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Переведено,
	|	ПереведенныеНМА_МУ.Период КАК ДатаПеревода,
	|	ВЫБОР
	|		КОГДА ТаблицаПараметров.НачислятьАмортизациюСТекущегоПериода
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НачислятьАмортизациюЗаМесяцВыбытия,
	|	ТаблицаПараметров.СпособОтраженияРасходовПоАмортизации,
	|	ВЫБОР
	|		КОГДА ТаблицаПараметров.НачислятьАмортизацию
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК НачислятьАмортизацию" + ?(ЭтоПеревод, ",
	|	ВыбытиеНМА_НМА.СчетДт КАК СчетУчета,
	|	ВыбытиеНМА_НМА.СчетКт КАК СчетРезерваПереоценки", "") + "
	|ИЗ
	|	Документ.бит_му_ВыбытиеНМА.НематериальныеАктивы КАК ВыбытиеНМА_НМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияНМА КАК ПринятыеНМА_МУ
	|		ПО ВыбытиеНМА_НМА.НематериальныйАктив = ПринятыеНМА_МУ.НематериальныйАктив
	|			И (ПринятыеНМА_МУ.Организация = &Организация)
	|			И (ПринятыеНМА_МУ.Состояние = &СостояниеПринятоКУчету)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияНМА КАК ВыбывшиеНМА_МУ
	|		ПО ВыбытиеНМА_НМА.НематериальныйАктив = ВыбывшиеНМА_МУ.НематериальныйАктив
	|			И (ВыбывшиеНМА_МУ.Организация = &Организация)
	|			И (ВыбывшиеНМА_МУ.Состояние = &СостояниеСнятоСУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СобытияНМА.СрезПоследних(
	|				&МоментВремени,
	|				Организация = &Организация
	|					И НематериальныйАктив В (&СписокНМА)
	|					И Событие = &СобытиеПеревод) КАК ПереведенныеНМА_МУ
	|		ПО ВыбытиеНМА_НМА.НематериальныйАктив = ПереведенныеНМА_МУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СобытияНМА.СрезПоследних(
	|				&МоментВремени,
	|				Организация = &Организация
	|					И НематериальныйАктив В (&СписокНМА)
	|					И (Событие = &СобытиеВыбытие
	|					   ИЛИ Событие = &СобытиеПродажа)) КАК ВыбытиеПродажаНМА_МУ
	|		ПО ВыбытиеНМА_НМА.НематериальныйАктив = ВыбытиеПродажаНМА_МУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров " + ?(ЭтоПеревод, "
	|			ЛЕВОЕ СОЕДИНЕНИЕ МоделиУчетаКлассов КАК МоделиУчетаКлассов
	|			ПО ТаблицаПараметров.Класс = МоделиУчетаКлассов.Класс", "") + "
	|		ПО ВыбытиеНМА_НМА.НематериальныйАктив = ТаблицаПараметров.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовСниженияСтоимости),
	|				,
	|				Организация = &Организация
	|					И (Субконто1 В (&СписокНМА)
	|					ИЛИ Субконто2 В (&СписокНМА)
	|					ИЛИ Субконто3 В (&СписокНМА)
	|					ИЛИ Субконто4 В (&СписокНМА)
	|					)) КАК ФактОбесценениеНМА_МУ
	|		ПО ВыбытиеНМА_НМА.НематериальныйАктив = ФактОбесценениеНМА_МУ.Субконто1
	|		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = ФактОбесценениеНМА_МУ.Субконто2
	|		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = ФактОбесценениеНМА_МУ.Субконто3
	| 		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = ФактОбесценениеНМА_МУ.Субконто4
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовРезерваПереоценки),
	|				,
	|				Организация = &Организация
	|					И (Субконто1 В (&СписокНМА)
	|					ИЛИ Субконто2 В (&СписокНМА)
	|					ИЛИ Субконто3 В (&СписокНМА)
	|					ИЛИ Субконто4 В (&СписокНМА)
	|					)) КАК РезПереоценкиНМА_МУ
	|		ПО ВыбытиеНМА_НМА.НематериальныйАктив = РезПереоценкиНМА_МУ.Субконто1
	|		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = РезПереоценкиНМА_МУ.Субконто2
	|		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = РезПереоценкиНМА_МУ.Субконто3
	| 		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = РезПереоценкиНМА_МУ.Субконто4
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовУчета),
	|				,
	|				Организация = &Организация
	|					И (Субконто1 В (&СписокНМА)
	|					ИЛИ Субконто2 В (&СписокНМА)
	|					ИЛИ Субконто3 В (&СписокНМА)
	|					ИЛИ Субконто4 В (&СписокНМА)
	|					)) КАК СтоимостьНМА_МУ
	|		ПО ВыбытиеНМА_НМА.НематериальныйАктив = СтоимостьНМА_МУ.Субконто1
	|		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = СтоимостьНМА_МУ.Субконто2
	|		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = СтоимостьНМА_МУ.Субконто3
	| 		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = СтоимостьНМА_МУ.Субконто4
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовАмортизации),
	|				,
	|				Организация = &Организация
	|					И (Субконто1 В (&СписокНМА)
	|					ИЛИ Субконто2 В (&СписокНМА)
	|					ИЛИ Субконто3 В (&СписокНМА)
	|					ИЛИ Субконто4 В (&СписокНМА)
	|					)) КАК АмортизацияНМА_МУ
	|		ПО ВыбытиеНМА_НМА.НематериальныйАктив = АмортизацияНМА_МУ.Субконто1
	|		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = АмортизацияНМА_МУ.Субконто2
	|		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = АмортизацияНМА_МУ.Субконто3
	| 		ИЛИ ВыбытиеНМА_НМА.НематериальныйАктив = АмортизацияНМА_МУ.Субконто4
	|ГДЕ
	|	ВыбытиеНМА_НМА.Ссылка = &Ссылка 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПараметров
	|" + ?(ЭтоПеревод, ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыКлассовВНА_ПустаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыКлассовВНА_НеПустаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МоделиУчетаКлассов", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоНМА = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("НМА", ТаблицаПоНМА);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура выполняет движения по регистрам.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, ИсторическиеКурсы, Отказ, Заголовок)
	
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ТаблицаДанных  = СтруктураТаблиц.НМА;
	
	НаборЗаписей_МУ 	   = Движения.бит_Дополнительный_2;
	НаборЗаписей_События   = Движения.бит_му_СобытияНМА;
	ТаблицаЗаписей_События = НаборЗаписей_События.Выгрузить();
	ТаблицаЗаписей_События.Очистить();
	
	НаборЗаписей_Состояние   = Движения.бит_му_СостоянияНМА; 
	ТаблицаЗаписей_Состояние = НаборЗаписей_Состояние.Выгрузить();
	ТаблицаЗаписей_Состояние.Очистить();
	
	// Выполним движения.
	ВыполнитьДвижения(СтруктураШапкиДокумента
					 ,ТаблицаДанных
					 ,СтруктураКурсыВалют
					 ,ИсторическиеКурсы
					 ,НаборЗаписей_МУ
					 ,ТаблицаЗаписей_События
					 ,ТаблицаЗаписей_Состояние);
					 
	// Выполним движения по регистру параметров НМА.
	ВыполнитьДвиженияПоРегиструПараметровНМА(СтруктураШапкиДокумента, ТаблицаДанных);
	
	// Определим событие НМА.
	Событие = ПолучитьСобытиеНМА(СтруктураШапкиДокумента.ВидОперации);
	
	// Движения по регистру сведений "бит_му_СобытияНМА".
	ТаблицаЗаписей_События.ЗаполнитьЗначения(ДатаДока	   , "Период");
	ТаблицаЗаписей_События.ЗаполнитьЗначения(Истина		   , "Активность");
	ТаблицаЗаписей_События.ЗаполнитьЗначения(ТекОрганизация, "Организация");
	ТаблицаЗаписей_События.ЗаполнитьЗначения(Событие	   , "Событие");
	
	НаборЗаписей_События.Загрузить(ТаблицаЗаписей_События);
	
	// Движения по регистру сведений "бит_му_СостоянияНМА".
	Состояние = Перечисления.бит_му_СостоянияНМА.СнятоСУчета;
	
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(Истина		 , "Активность");
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(ТекОрганизация, "Организация");
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(Состояние	 , "Состояние");
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(ДатаДока		 , "ДатаСостояния");
	
	НаборЗаписей_Состояние.Загрузить(ТаблицаЗаписей_Состояние);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура выполняет движения.
// 
// Параметры: 
//  СтруктураШапкиДокумента  - Структура.
//  ТаблицаДанных			 - ТаблицаЗначений.
//  СтруктураКурсыВалют      - Структура.
//  НаборЗаписей_МУ			 - РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  ТаблицаЗаписей_События   - ТаблицаЗначений.
//  ТаблицаЗаписей_Состояние - ТаблицаЗначений.
// 
Процедура ВыполнитьДвижения(СтруктураШапкиДокумента
						   ,ТаблицаДанных
						   ,СтруктураКурсыВалют
						   ,ИсторическиеКурсы
						   ,НаборЗаписей_МУ
						   ,ТаблицаЗаписей_События
						   ,ТаблицаЗаписей_Состояние)
							   
	МенеджерПеречисления = Перечисления.бит_му_ВидыОперацийВыбытиеНМА;
	ЭтоВыбытие 			 = (СтруктураШапкиДокумента.ВидОперации = МенеджерПеречисления.Выбытие);
	ЭтоПеревод 			 = (СтруктураШапкиДокумента.ВидОперации = МенеджерПеречисления.ПереводВПредназначенныеДляПродажи);
	ЭтоПродажа			 = (СтруктураШапкиДокумента.ВидОперации = МенеджерПеречисления.Продажа);
	
	МассивВНА = Новый Массив;
	
	// Получим массив НМА по которым необходимо начислить амортизацию за месяц выбытия.
	//++СисИнфо //Проверка начисления амортизации в текущем месяце //2012-07-25
	//Старый код (
	// Получим массив НМА по которым необходимо начислить амортизацию за месяц выбытия.
	//Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	//	
	//	// Начисление амортизации за месяц выбытия.
	//	Если СтрокаТаблицы.НачислятьАмортизациюЗаМесяцВыбытия Тогда
	//		
	//		Если Не (СтрокаТаблицы.Переведено 
	//			И (ЭтоВыбытие Или ЭтоПродажа)) Тогда
	//			
	//			МассивВНА.Добавить(СтрокаТаблицы.НематериальныйАктив);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//Старый код )	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.НематериальныйАктив,
	|	ТаблицаДанных.Переведено
	|ПОМЕСТИТЬ ВТ_НМА
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|ГДЕ
	|	(НЕ ТаблицаДанных.Переведено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_му_СобытияНМАСрезПоследних.НематериальныйАктив,
	|	ЛОЖЬ КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ВТ_Собыятия
	|ИЗ
	|	РегистрСведений.бит_му_СобытияНМА.СрезПоследних(
	|			&Дата,
	|			НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						Т.НематериальныйАктив
	|					ИЗ
	|						ВТ_НМА КАК Т)
	|				И Событие = &НачислениеАмортизации
	|				И (ГОД(Период) = ГОД(&Дата)) И (МЕСЯЦ(Период) = МЕСЯЦ(&Дата))) КАК бит_му_СобытияНМАСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НМА.НематериальныйАктив,
	|	ЕСТЬNULL(ВТ_Собыятия.НачислятьАмортизацию, ИСТИНА) КАК НачислятьАмортизацию
	|ИЗ
	|	ВТ_НМА КАК ВТ_НМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Собыятия КАК ВТ_Собыятия
	|		ПО ВТ_НМА.НематериальныйАктив = ВТ_Собыятия.НематериальныйАктив";
	Запрос.УстановитьПараметр("ТаблицаДанных",ТаблицаДанных);
	Запрос.УстановитьПараметр("Дата",КонецМесяца(Дата));
	Запрос.УстановитьПараметр("НачислениеАмортизации",Перечисления.бит_му_СобытияНМА.НачислениеАмортизации);
	Результат = Запрос.Выполнить();
	ВыборкаНА = Результат.Выбрать();
	
	Пока ВыборкаНА.Следующий() Цикл
	// Начисление амортизации за месяц выбытия.
		Если ВыборкаНА.НачислятьАмортизацию Тогда
		//	Если (ЭтоВыбытие Или ЭтоПродажа) Тогда
				МассивВНА.Добавить(ВыборкаНА.НематериальныйАктив);
		//	КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	//--СисИнфо	
	
	ВыполнитьРасчетАмортизации = ?(МассивВНА.Количество() = 0, Ложь, Истина);
	
	Если ВыполнитьРасчетАмортизации Тогда
		
		// Выполним расчет амортизации.
		ПараметрыНМА = бит_му_ВНА.ВыполнитьРасчетАмортизации(МассивВНА
															,СтруктураШапкиДокумента.Организация
															,МоментВремени()
															,Истина);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Начисление амортизации за месяц выбытия.
		Если ВыполнитьРасчетАмортизации Тогда
			
			//++СисИнфо //убираем отдельные проводки по обесценению и списанию амортизации
			//из делаем проводку общей суммой //2012-07-23
			СуммаВыбытия = 0;
			//--СисИнфо
			
			// Получим результат расчета амортизации.
			СтрокаПараметров = ПараметрыНМА[СтрокаТаблицы.НематериальныйАктив];
			
			Если Не СтрокаПараметров = Неопределено Тогда
				
				СуммаАмортизацииОбщая       = СтрокаПараметров.СуммаАмортизации;
				СуммаАмортизацииНачисленная = 0;
				
				ТаблицаСпособов = СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.Способы;
				
				Ном = 1;
				КоличествоСпособов = ТаблицаСпособов.Количество();
				
				Для Каждого СтрокаТаблицыСпособов Из ТаблицаСпособов Цикл
					
					// Распределяем согласно коэффициентам способа отражения расходов.
					СуммаАмортизации 			= Окр(СуммаАмортизацииОбщая * СтрокаТаблицыСпособов.Коэффициент, 2);
					СуммаАмортизацииНачисленная = СуммаАмортизацииНачисленная + СуммаАмортизации;
					
					// Убираем ошибки округления.
					Если Ном = КоличествоСпособов Тогда
						СуммаАмортизации = СуммаАмортизации + СуммаАмортизацииОбщая - СуммаАмортизацииНачисленная;
					КонецЕсли;
					
					// ДТ СчетЗатрат КТ СчетНачисленияАмортизации СуммаАмортизации.
					СоздатьЗаписьПоНачисленнойАмортизации(СтруктураШапкиДокумента
												 		 ,НаборЗаписей_МУ
														 ,СтрокаТаблицыСпособов
														 ,СтрокаТаблицы
														 ,ИсторическиеКурсы[СтрокаТаблицы.НематериальныйАктив]
														 ,СуммаАмортизации);
					Ном = Ном + 1;
					
				КонецЦикла;
				
				// Изменим суммовые показатели НМА.
				СтрокаТаблицы.ОстСтоимость = СтрокаТаблицы.ОстСтоимость - СуммаАмортизацииОбщая;
				СтрокаТаблицы.Амортизация  = СтрокаТаблицы.Амортизация  + СуммаАмортизацииОбщая;
				
			КонецЕсли; // Если Не СтрокаПараметров = Неопределено Тогда.
			
		КонецЕсли; // Если ВыполнитьРасчетАмортизации Тогда
		
		Если Не СтрокаТаблицы.Переведено Тогда
			
			// ДТ СчетСниженияСтоимости КТ ОсновнойСчетУчета СуммаОбесценения.
			СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
											  ,НаборЗаписей_МУ
											  ,СтрокаТаблицы
											  ,ИсторическиеКурсы[СтрокаТаблицы.НематериальныйАктив]
											  ,СтрокаТаблицы.СуммаОбесценения
											  ,"Списание обесценения НМА");
											  
			// ДТ СчетНачисленияАмортизации КТ ОсновнойСчетУчета Амортизация.
			СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента
											  ,НаборЗаписей_МУ
											  ,СтрокаТаблицы
											  ,ИсторическиеКурсы[СтрокаТаблицы.НематериальныйАктив]
											  ,СтрокаТаблицы.Амортизация
											  ,"Списание амортизации НМА");
											  
			//++СисИнфо //Считаем общую сумму выбытия //2012-07-23
			СуммаВыбытия = СуммаВыбытия + СтрокаТаблицы.СуммаОбесценения + СтрокаТаблицы.Амортизация;
			//--СисИнфо
			
		КонецЕсли;
		
		Если ЭтоПеревод Тогда
			
			// ДТ СчетУчетаДляПродажи КТ ОсновнойСчетУчета ОстСтоимость.
			СоздатьЗаписьПоПереводуНМАВПредназначенныеДляПродажи(СтруктураШапкиДокумента
															    ,НаборЗаписей_МУ
															    ,СтрокаТаблицы
															    ,ИсторическиеКурсы[СтрокаТаблицы.НематериальныйАктив]
																// 1c-izhtc, ChuckNorris , 12.08.2015 (
																//,СтрокаТаблицы.ОстСтоимость
															    ,СтрокаТаблицы.ОстСтоимость + СуммаВыбытия
																// 1c-izhtc, ChuckNorris , 12.08.2015 )
															    ,"Перевод НМА в предназначенные для продажи");
															   
			// ДТ ОсновнойСчетРезерваПереоценки КТ СчетРезерваПереоценкиДляПродажи СуммаРезерваПереоценки.
			СоздатьЗаписьПоПереводуРезерваНМА(СтруктураШапкиДокумента
											 ,НаборЗаписей_МУ
											 ,СтрокаТаблицы
											 ,ИсторическиеКурсы[СтрокаТаблицы.НематериальныйАктив]
											 ,СтрокаТаблицы.СуммаРезерваПереоценки
											 ,"Перевод резерва НМА");
			
		Иначе
			
			ТекстВыбытие = ?(ЭтоПродажа, "Продажа ", "Выбытие ")
							+ "НМА"
							+ ?(СтрокаТаблицы.Переведено
							   ," предназначенных для продажи"
							   ,"");
			
			// ДТ СчетПрочихРасходов КТ ОсновнойСчетУчета ОстСтоимость.
			СоздатьЗаписьПоВыбытиюНМАПредназначенныхДляПродажи(СтруктураШапкиДокумента
															  ,НаборЗаписей_МУ
															  ,СтрокаТаблицы
															  ,ИсторическиеКурсы[СтрокаТаблицы.НематериальныйАктив]
															  //++СисИнфо //передаем общую стоимость выбытия //2012-07-23
															  //,СтрокаТаблицы.ОстСтоимость
															  ,СтрокаТаблицы.ОстСтоимость + СуммаВыбытия
															  //--СисИнфо
															  //++СисИнфо //передаем остаточную стоимость //2012-07-23
															  //,ТекстВыбытие);
															  ,ТекстВыбытие
															  ,СтрокаТаблицы.ОстСтоимость);
															  //--СисИнфо
			
			// ДТ ОсновнойСчетРезерваПереоценки КТ СчетНРП СуммаРезерваПереоценки.
			СоздатьЗаписьПоСписаниюРезерва(СтруктураШапкиДокумента
										  ,НаборЗаписей_МУ
										  ,СтрокаТаблицы
										  ,ИсторическиеКурсы[СтрокаТаблицы.НематериальныйАктив]
										  ,СтрокаТаблицы.СуммаРезерваПереоценки
										  ,"Списание резерва НМА");
			
			Если ЭтоПродажа Тогда
				
				// ДТ СчетВзаиморасчетов КТ СчетПрочихДоходов СуммаПродажи.
				СоздатьЗаписьПоОтражениюДоходаОтПродажи(СтруктураШапкиДокумента
													   ,НаборЗаписей_МУ
													   ,СтрокаТаблицы
													   ,СтруктураКурсыВалют
													   ,СтрокаТаблицы.СуммаПродажи
													   ,"Отражение дохода от продажи НМА");
													   
				// ДТ СчетПрочихРасходов КТ СчетНДС СуммаНДС.
				СоздатьЗаписьПоОтражениюНалогаОтПродажи(СтруктураШапкиДокумента
													   ,НаборЗаписей_МУ
													   ,СтрокаТаблицы
													   ,СтруктураКурсыВалют
													   ,СтрокаТаблицы.СуммаНДС
													   ,"Отражение налога от продажи НМА");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Добавим событие по НМА.
		ЗаписьСобытие = ТаблицаЗаписей_События.Добавить();
		ЗаписьСобытие.НематериальныйАктив = СтрокаТаблицы.НематериальныйАктив;
		
		// Если ранне не было переведено, тогда
		Если Не СтрокаТаблицы.Переведено Тогда
			
			// Добавим состояние по НМА.
			ЗаписьСостояние = ТаблицаЗаписей_Состояние.Добавить();
			ЗаписьСостояние.НематериальныйАктив = СтрокаТаблицы.НематериальныйАктив;
			
		КонецЕсли;
		
	КонецЦикла; // Обход таблицы НМА.
							 
КонецПроцедуры // ВыполнитьДвижения()

// Функция получает структуру курсов валют.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  Отказ					- Булево.
//  Заголовок				- Строка.
// 
// Возвращаемое значение:
//  СтруктураКурсыВалют - Структура.
// 
Функция СтруктураКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ВидыКурсов = Новый Структура("Упр, Регл, МУ, Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект
																			  ,СтруктураШапкиДокумента.Дата
																			  ,ВидыКурсов);
	
	// Получим валюту международного учета.
	СтрКурсов = СтруктураКурсыВалют.МУ;
	ВалютаМеждУчета = СтрКурсов.Валюта;
	
	Если Не ЗначениеЗаполнено(ВалютаМеждУчета) Тогда
		
		ТекстСообщения = "Для организации """ + СтруктураШапкиДокумента.Организация + """ не указана валюта международного учета!";
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции

Функция СтруктураИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, Период, СтруктураКурсыВалют)
	
	ИсторическиеКурсы = бит_му_ВНА.ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, Период, СтруктураКурсыВалют);	
	
	
	Для Каждого ТекНМА Из ИсторическиеКурсы Цикл
		ТекНМА.Значение.Документ = ТекНМА.Значение.МУ;
	КонецЦикла;
	
	Возврат ИсторическиеКурсы;
	
КонецФункции

// Функция получает событие НМА.
// 
// Параметры:
//  ТекВидОперации - ПеречислениеСсылка.бит_му_ВидыОперацийВыбытиеНМА.
// 
// Возвращаемое значение:
//  Событие - ПеречислениеСсылка.бит_му_СобытияНМА.
// 
Функция ПолучитьСобытиеНМА(ТекВидОперации)
	
	ВидыДвижений = Перечисления.бит_му_ВидыОперацийВыбытиеНМА;
	
	Если ТекВидОперации = ВидыДвижений.ПереводВПредназначенныеДляПродажи Тогда
		Событие = Перечисления.бит_му_СобытияНМА.Перевод;
		
	ИначеЕсли ТекВидОперации = ВидыДвижений.Выбытие Тогда
		Событие = Перечисления.бит_му_СобытияНМА.Выбытие;
	Иначе
		Событие = Перечисления.бит_му_СобытияНМА.Продажа;
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции // ПолучитьСобытиеНМА()

#КонецОбласти

#Область ПроцедурыДляДобавленияДвиженийПриПроведенииДокумента

// Процедура формирует движения по параметрам НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  ТаблицаДанных			- ТаблицаЗначений.
// 
Процедура ВыполнитьДвиженияПоРегиструПараметровНМА(СтруктураШапкиДокумента, ТаблицаДанных)
	
	МенеджерПеречисления = Перечисления.бит_му_ВидыОперацийВыбытиеНМА;
	ЭтоПеревод 			 = (СтруктураШапкиДокумента.ВидОперации = МенеджерПеречисления.ПереводВПредназначенныеДляПродажи);
	МенеджерПВХ 		 = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА;
	
	// Движения по регистру сведений "бит_му_ПараметрыНМА".
	НаборЗаписей_Параметры = Движения.бит_му_ПараметрыНМА;
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить("НачислятьАмортизацию_НМА", МенеджерПВХ.НачислятьАмортизацию_НМА);
	
	Если ЭтоПеревод Тогда
		ВидыПараметров.Вставить("СчетУчета_НМА"			   , МенеджерПВХ.СчетУчета_НМА);
		ВидыПараметров.Вставить("СчетРезерваПереоценки_НМА", МенеджерПВХ.СчетРезерваПереоценки_НМА);
	КонецЕсли;
	
	// Выполним запись параметров НМА.
	бит_му_ВНА.ЗаписатьПараметрыВНА(НаборЗаписей_Параметры, СтруктураШапкиДокумента, ТаблицаДанных, ВидыПараметров, "НМА");
	
КонецПроцедуры // ВыполнитьДвиженияПоРегиструПараметровНМА()

// Процедура формирует проводку по начисленной амортизации НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицыСпособов	- СтрокаТаблицыЗначений.
//  СтрокаТаблицыДанных		- СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаАмортизации		- Число.
// 
Процедура СоздатьЗаписьПоНачисленнойАмортизации(СтруктураШапкиДокумента
											   ,НаборЗаписей
											   ,СтрокаТаблицыСпособов
											   ,СтрокаТаблицыДанных
											   ,СтруктураКурсыВалют
											   ,СуммаАмортизации)
	
	Если СуммаАмортизации = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Запись = НаборЗаписей.Добавить();
	
	//++СисИнфо //заполнение доп.аналитики //2012-07-23
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//--СисИнфо	
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      ВалютаМеждУчета);
    СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицыСпособов.СчетЗатрат);
	СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицыДанных.СчетНачисленияАмортизации);
	СтруктураПараметров.Вставить("Сумма",       СуммаАмортизации);
	СтруктураПараметров.Вставить("Содержание",  НСтр("ru = 'Начисление амортизации НМА'"));

										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицыСпособов,"Субконто",,мКоличествоСубконтоМУ);
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицыДанных,,"СНА_Субконто",мКоличествоСубконтоМУ);
	
	//++СисИнфо //установка аналитики по объекту строительства //2012-07-12
	Если ТипЗнч(СтрокаТаблицыДанных.СНА_Субконто2) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 1, СтрокаТаблицыДанных.СНА_Субконто2);
	КонецЕсли;
	//--СисИнфо
	
	//ОК Калинин М. 290413
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Периоды", СтруктураШапкиДокумента.Период);
	//ОК Калинин М
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоНачисленнойАмортизации()

// Процедура формирует проводку по списанию обесценения по НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаОбесценения		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
											,НаборЗаписей
											,СтрокаТаблицы
											,СтруктураКурсыВалют
											,СуммаОбесценения
											,СодержаниеДвижения)
	Если СуммаОбесценения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//++СисИнфо //убираем старую проводку, в соответствии требованиями по доработке //2012-07-23	
	//Запись = НаборЗаписей.Добавить();
	//
	//// Заполнение атрибутов записи.
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	//СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	//СтруктураПараметров.Вставить("Валюта",      ВалютаМеждУчета);
	//СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.СчетСниженияСтоимости);
	//СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.ОсновнойСчетУчета);
	//СтруктураПараметров.Вставить("Сумма",       СуммаОбесценения);
	//СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
	//									   
	//бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	//
	//// Заполним аналитику счета Дт и Кт.
	//бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"ССС_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	//
	//// Выполним валютные пересчеты.
	//бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	//++СисИнфо //новая проводка по обесценению //2012-07-23	
	Запись = НаборЗаписей.Добавить();
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,ВалютаМеждУчета
										  ,СтрокаТаблицы.СчетСниженияСтоимости
										  ,?(СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеНМА.Выбытие,СтрокаТаблицы.СчетПрочихДоходов,СтрокаТаблицы.СчетУчетаДляПродажи)
										  ,СуммаОбесценения
										  ,СодержаниеДвижения);
										  
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"ССС_Субконто",?(СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеНМА.Выбытие,"СПД_Субконто","СУП_Субконто"),мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);	
	//--СисИнфо	
	//--СисИнфо
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюОбесценения()

// Процедура формирует проводку по списанию амортизации по НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаАмортизации		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента
											,НаборЗаписей
											,СтрокаТаблицы
											,СтруктураКурсыВалют
											,СуммаАмортизации
											,СодержаниеДвижения)
	Если СуммаАмортизации = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//++СисИнфо //убираем старую проводку по списанию амортизации //2012-07-23
	//Запись = НаборЗаписей.Добавить();
	//
	//// Заполнение атрибутов записи.
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	//СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	//СтруктураПараметров.Вставить("Валюта",      ВалютаМеждУчета);
	//СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.СчетНачисленияАмортизации);
	//СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.ОсновнойСчетУчета);
	//СтруктураПараметров.Вставить("Сумма",       СуммаАмортизации);
	//СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
	//									   
	//бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	//
	//// Заполним аналитику счета Дт и Кт.
	//бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СНА_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	//
	//// Выполним валютные пересчеты.
	//бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	//++СисИнфо //новая проводка по списанию амортизации, в соответствии с тех.заданием //2012-07-23
	Запись = НаборЗаписей.Добавить();
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	

	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,ВалютаМеждУчета
										  ,СтрокаТаблицы.СчетНачисленияАмортизации
										  ,?(СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеНМА.Выбытие,СтрокаТаблицы.СчетПрочихДоходов,СтрокаТаблицы.СчетУчетаДляПродажи)
										  ,СуммаАмортизации
										  ,СодержаниеДвижения);
										  
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);

	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СНА_Субконто",?(СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеНМА.Выбытие,"СПД_Субконто","СУП_Субконто"),мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	//--СисИнфо	
	//--СисИнфо
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюАмортизации()

// Процедура формирует проводку по переводу НМА в предназначенные для продажи.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  Стоимость				- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоПереводуНМАВПредназначенныеДляПродажи(СтруктураШапкиДокумента
															  ,НаборЗаписей
															  ,СтрокаТаблицы
															  ,СтруктураКурсыВалют
															  ,Стоимость
															  ,СодержаниеДвижения)
	Если Стоимость = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	//++СисИнфо //заполнение доп.аналитики //2012-07-23
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//--СисИнфо
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      ВалютаМеждУчета);
    СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.СчетУчетаДляПродажи);
	СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.ОсновнойСчетУчета);
	СтруктураПараметров.Вставить("Сумма",       Стоимость);
	//++СисИнфо //изменено содержание проводки по требования заказчика //2012-07-23
	//СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
	СтруктураПараметров.Вставить("Содержание",  "Списание первоначальной стоимости");
	//--СисИнфо
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СУП_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоПереводуНМАВПредназначенныеДляПродажи()
 
// Процедура формирует проводку по переводу резерва НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаРезерва			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоПереводуРезерваНМА(СтруктураШапкиДокумента
										   ,НаборЗаписей
										   ,СтрокаТаблицы
										   ,СтруктураКурсыВалют
										   ,СуммаРезерва
										   ,СодержаниеДвижения)
	Если СуммаРезерва = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	//++СисИнфо //заполнение доп.аналитики //2012-07-23
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//--СисИнфо
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      ВалютаМеждУчета);
    СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.ОсновнойСчетРезерваПереоценки);
	СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.СчетРезерваПереоценкиДляПродажи);
	СтруктураПараметров.Вставить("Сумма",       СуммаРезерва);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СРП_Субконто","СРПП_Субконто",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоПереводуРезерваНМА()

// Процедура формирует проводку по выбытию НМА предназначенных для продажи.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаВыбытия			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоВыбытиюНМАПредназначенныхДляПродажи(СтруктураШапкиДокумента
														    ,НаборЗаписей
														    ,СтрокаТаблицы
														    ,СтруктураКурсыВалют
														    ,СуммаВыбытия
															//++СисИнфо //добален параметр, для передачи данных об остаточной стоимости //2012-07-23
														    //,СодержаниеДвижения)
														    ,СодержаниеДвижения
															,ОстСтоимость=0)
															//--СисИнфо
	Если СуммаВыбытия = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	//++СисИнфо //заполнение доп.аналитики //2012-07-23
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//--СисИнфо	
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      ВалютаМеждУчета);
    СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.СчетПрочихРасходов);
	//++Сисинфо //изменен Счет Кт , для взаимодействия с доп. проводкой //2012-07-23
	//СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.ОсновнойСчетУчета);
	//СтруктураПараметров.Вставить("Сумма",       СуммаВыбытия);	
	СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.СчетПрочихДоходов);
	СтруктураПараметров.Вставить("Сумма",       ОстСтоимость);	
	//--сисинфо
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	//++СисИнфо //изменено заполнение аналитики по счету Кт, для взаимодействия с доп. проводкой //2012-07-23
	//бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СПР_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СПР_Субконто","СПД_Субконто",мКоличествоСубконтоМУ);
	//--СисИнфо
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	//++СисИнфо //доп. проводка по выбытию //2012-07-23
	Если (СуммаВыбытия = ОстСтоимость) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,ВалютаМеждУчета
										  ,СтрокаТаблицы.СчетПрочихДоходов
										  ,СтрокаТаблицы.ОсновнойСчетУчета
										  ,СуммаВыбытия
										  //++СисИнфо //изменено содержание проводки по требования заказчика //2012-07-23
										  ,"Списание первоначальной стоимости");
										  //--СисИнфо
										  
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   									  
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СПД_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);									  
	//--СисИнфо
	
КонецПроцедуры // СоздатьЗаписьПоВыбытиюНМАПредназначенныхДляПродажи()

// Процедура формирует проводку по отражению дохода от продажи НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаПродажи			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоОтражениюДоходаОтПродажи(СтруктураШапкиДокумента
												 ,НаборЗаписей
												 ,СтрокаТаблицы
												 ,СтруктураКурсыВалют
												 ,СуммаПродажи
												 ,СодержаниеДвижения)
	Если СуммаПродажи = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      СтруктураКурсыВалют.Документ.Валюта);
    СтруктураПараметров.Вставить("СчетДт",      СтруктураШапкиДокумента.СчетВзаиморасчетов);
	СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.СчетПрочихДоходов);
	СтруктураПараметров.Вставить("Сумма",       СуммаПродажи);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	Для Ном = 1 По мКоличествоСубконтоМУ Цикл
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Ном, СтруктураШапкиДокумента["СубконтоВзаиморасчетов" + Ном]);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Ном, СтрокаТаблицы["СПД_Субконто" + Ном]);
	КонецЦикла;
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоОтражениюДоходаОтПродажи()

// Процедура формирует проводку по отражению налога от продажи НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаНалога				- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоОтражениюНалогаОтПродажи(СтруктураШапкиДокумента
												 ,НаборЗаписей
												 ,СтрокаТаблицы
												 ,СтруктураКурсыВалют
												 ,СуммаНалога
												 ,СодержаниеДвижения)
	Если СуммаНалога = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      СтруктураКурсыВалют.Документ.Валюта);
    СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.СчетПрочихРасходов);
	СтруктураПараметров.Вставить("СчетКт",      СтруктураШапкиДокумента.СчетНДС);
	СтруктураПараметров.Вставить("Сумма",       СуммаНалога);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	Для Ном = 1 По мКоличествоСубконтоМУ Цикл
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Ном, СтрокаТаблицы["СПР_Субконто" + Ном]);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Ном, СтруктураШапкиДокумента["СубконтоНДС" + Ном]);
	КонецЦикла;
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоОтражениюНалогаОтПродажи()

// Процедура формирует проводку по списанию резерва по НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаРезерва			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюРезерва(СтруктураШапкиДокумента
										,НаборЗаписей
										,СтрокаТаблицы
										,СтруктураКурсыВалют
										,СуммаРезерва
										,СодержаниеДвижения)
	Если СуммаРезерва = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	//++СисИнфо //заполнение доп.аналитики //2012-07-23
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//--СисИнфо
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      ВалютаМеждУчета);
    СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.ОсновнойСчетРезерваПереоценки);
	СтруктураПараметров.Вставить("СчетКт",      СтруктураШапкиДокумента.СчетНРП);
	СтруктураПараметров.Вставить("Сумма",       СуммаРезерва);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись, СтрокаТаблицы, "СРП_Субконто",, мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюРезерва()

#КонецОбласти

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
