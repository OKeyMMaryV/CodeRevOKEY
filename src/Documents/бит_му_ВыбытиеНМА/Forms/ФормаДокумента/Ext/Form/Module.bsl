
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//ОК Калинин 170513
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.бит_му_ВыбытиеНМА.ФормаДокументаУправляемая");
	//ОК Калинин 170513
	
	// Максимальное количество субконто на счете по МУ.
	фКоличествоСубконтоМУ = Метаданные.ПланыСчетов.бит_Дополнительный_2.МаксКоличествоСубконто;
	
	ЗаполнитьКэшЗначений();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("Дата");
	фКэшРеквизитов.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();

	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы,"СчетВзаиморасчетов","СубконтоВзаиморасчетов",фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы,"СчетНДС","СубконтоНДС",фКоличествоСубконтоМУ);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетВзаиморасчетов,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоВзаиморасчетов");
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетНДС,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоНДС");
	
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетДт"
												   ,"СубконтоДт"
												   ,фКоличествоСубконтоМУ
												   ,"НематериальныеАктивы"
												   ,"Элементы.НематериальныеАктивы.ТекущиеДанные");
												   
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетКт"
												   ,"СубконтоКт"
												   ,фКоличествоСубконтоМУ
												   ,"НематериальныеАктивы"
												   ,"Элементы.НематериальныеАктивы.ТекущиеДанные");											   
												   
	ВосстановитьКоличествоДоступныхСубконто();
	
	НастроитьОформлениеФормы();
	
	СформироватьДеревоВидовОпераций();
	СформироватьПодменюВидовОпераций();
	
	Если Параметры.Ключ.Пустая() Тогда
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО();
		УстановитьСостояниеДокумента();
	Иначе
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО(Ложь);
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
	УстановитьПараметрыВыбораДляСчетов();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Изменение кода. Начало. 11.03.2015{{
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда

			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
				
			Иначе 
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			КонецЕсли;	
				
		Иначе
			
			ПриОткрытииПромежуточная(Отказ);
			ПриОткрытииОкончание();
			
		КонецЕсли;
		
		//ОК Калинин М. 290413
		ОбновитьДаты();
		//ОК Калинин М.
		
	Иначе	
		
		ПриОткрытииОкончание();
		
	КонецЕсли;	
	// Изменение кода. Конец. 11.03.2015}}
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("Действие") Тогда
			
			Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
				
				Если Объект.НематериальныеАктивы.Количество() > 0 Тогда
					
					Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
					ТекстВопроса = НСтр("ru='Табличная часть ""Нематериальные активы"" будет очищена. Продолжить?'");
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
					
				Иначе
					
					ОбработатьПодборНМА(ВыбранноеЗначение);

				КонецЕсли;
				
			Иначе
				
				ОбработатьПодборНМА(ВыбранноеЗначение);
				
			КонецЕсли;
			
		КонецЕсли; // В структуре есть поле действие 
		
	КонецЕсли; // Это структура
	
КонецПроцедуры

// Процедура - завершение выбора НМА
// 
&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НематериальныеАктивы.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбработатьПодборНМА(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьКоличествоДоступныхСубконто();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ВыбытиеНМА";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация, , Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
	фКэшРеквизитов.Дата = Объект.Дата;
	
	//ОК Калинин М. 290413
	ОбновитьДаты();
	//ОК Калинин М.
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не фКэшРеквизитов.Организация = Объект.Организация
		И Объект.НематериальныеАктивы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Табличная часть ""Нематериальные активы"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ОрганизацияПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НематериальныеАктивы.Очистить();
	Иначе
		Объект.Организация = фКэшРеквизитов.Организация;
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетВзаиморасчетовПриИзменении(Элемент)
	
	ПриИзмененииСчетаВзаиморасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Объект,"СубконтоВзаиморасчетов",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоВзаиморасчетовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконто(Объект,"СубконтоВзаиморасчетов",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоВзаиморасчетовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоВзаиморасчетов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
	
КонецПроцедуры // СубконтоВзаиморасчетовАвтоПодбор()
												 
&НаКлиенте
Процедура СчетНДСПриИзменении(Элемент)
	
	ПриИзмененииСчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДСПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконто(Объект,"СубконтоНДС",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Объект,"СубконтоНДС",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоНДС"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
	
КонецПроцедуры // СубконтоНДСАвтоПодбор()

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНематериальныеАктивы

&НаКлиенте
Процедура НематериальныеАктивыНематериальныйАктивПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииНМА(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСчетДтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаДт(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"НематериальныеАктивы",Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущиеДанные,"СубконтоДт",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСубконтоДтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"НематериальныеАктивы",Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные,"СубконтоДт",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСубконтоДтАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "НематериальныеАктивы", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоДт"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // НематериальныеАктивыСубконтоДтАвтоПодбор()

&НаКлиенте
Процедура НематериальныеАктивыСчетКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаКт(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСубконтоКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"НематериальныеАктивы",Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные,"СубконтоКт",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСубконтоКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"НематериальныеАктивы",Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущиеДанные,"СубконтоКт",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыСубконтоКтАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "НематериальныеАктивы", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоКт"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // НематериальныеАктивыСубконтоКтАвтоПодбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ПодборНМА(Команда)
	
	ПараметрыФормы = ЗаполнитьПараметрыПодбора();
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
// 
&НаКлиенте 
Процедура КомандаУстановитьОперацию(Команда)

	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	// Запомним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации;
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, "_");
	ИмяПодменю      = Лев(ИмяКнопки  , Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки , Позиция + 1);
	
	Объект.ВидОперации = фКэшЗначений.ВидыОпераций[ИмяВидаОперации];
	
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
		
	Если Объект.НематериальныеАктивы.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПредыдущийВидОперации", ПредыдущийВидОперации);
		
		Оповещение = Новый ОписаниеОповещения("КомандаУстановитьОперациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Табличная часть ""Нематериальные активы"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

	Иначе
		
		ЭтоНеПеревод = (Не Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийВыбытиеНМА.ПереводВПредназначенныеДляПродажи);
		
		Если ЭтоНеПеревод Тогда
			// Заполним счет нераспределенной прибыли из учетной политики.
			Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
		УстановитьЗаголовокФормыДокумента();
		
		// Установить видимость реквизитов.
		УправлениеЭлементамиФормы();
		
		Модифицированность = Истина;
		
		
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - завершение обработки команды "УстановитьОперацию".
// 
&НаКлиенте
Процедура КомандаУстановитьОперациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НематериальныеАктивы.Очистить();
	Иначе
		Объект.ВидОперации = ДополнительныеПараметры["ПредыдущийВидОперации"];
		Возврат;
	КонецЕсли;
	
	ЭтоНеПеревод = (Не Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийВыбытиеНМА.ПереводВПредназначенныеДляПродажи);
	
	Если ЭтоНеПеревод Тогда
		// Заполним счет нераспределенной прибыли из учетной политики.
		Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	УстановитьЗаголовокФормыДокумента();
	
	// Установить видимость реквизитов.
	УправлениеЭлементамиФормы();
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.НематериальныеАктивыСчетДт);
	МассивЭлементов.Добавить(Элементы.НематериальныеАктивыСчетКт);
    МассивЭлементов.Добавить(Элементы.СчетНРП);
	МассивЭлементов.Добавить(Элементы.СчетВзаиморасчетов);
	МассивЭлементов.Добавить(Элементы.СчетНДС);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	фКэшЗначений.Вставить("ВидыОпераций", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийВыбытиеНМА));
		
	КэшПеречисления = Новый Структура;	
	КэшПеречисления.Вставить("бит_му_ВидыОперацийВыбытиеНМА", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийВыбытиеНМА));
	КэшПеречисления.Вставить("бит_му_РежимыПодбораВНА"		, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_РежимыПодбораВНА));
	КэшПеречисления.Вставить("бит_му_МоделиУчетаВНА"		, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_МоделиУчетаВНА));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
		
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоВидовОпераций()

	КореньДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = КореньДерева.Добавить();
	СтрокаНовая.ВидОперации = Нстр("ru = 'Доступные виды операций'");
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекЗначение Из Перечисления.бит_му_ВидыОперацийВыбытиеНМА Цикл
		
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекЗначение;	
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

&НаСервере
Процедура СформироватьПодменюВидовОпераций()
 
	// Заполняем виды операций для группы подменю.
	Для Каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийВыбытиеНМА[ИмяЗначенияПеречисления];
		
		ИмяКнопки = ИмяЗначенияПеречисления;
		
		ИмяКоманды = "Команда_" + ИмяКнопки;
		
		// Добавляем новую команду обработки выбора вида операции.
		КомандаУстановитьОперацию = Команды.Добавить(ИмяКоманды);
		КомандаУстановитьОперацию.Действие = "КомандаУстановитьОперацию";
		
		КнопкаГруппыПодменю = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ПодменюВидаОперации);
		КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
		КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
		
	КонецЦикла; 
	
КонецПроцедуры // СформироватьПодменюВидовОпераций()

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийВыбытиеНМА;
	
	ЭтоПеревод = (Объект.ВидОперации = ВидыОпераций.ПереводВПредназначенныеДляПродажи);
	ЭтоПродажа = (Объект.ВидОперации = ВидыОпераций.Продажа);
	ЭтоВыбытие = (Объект.ВидОперации = ВидыОпераций.Выбытие);
	
	// Управление заголовками и видимостью колонок.
	Элементы.НематериальныеАктивыСчетДт.Заголовок = ?(ЭтоПеревод
								   ,НСтр("ru = 'Счет учета ВНА, предназначенных для продажи'")
								   //++СисИнфо //изменеяем текст шапки в зависимости от вида операции //2012-07-23
								   //,"Счет прочих доходов");
								   ,?(ЭтоВыбытие,"Счет выбытия","Счет прочих доходов"));
								   
	Элементы.НематериальныеАктивыСчетКт.Заголовок = ?(ЭтоПеревод
								   ,НСтр("ru = 'Счет резерва переоценки ВНА для продажи'")
								   ,НСтр("ru = 'Счет прочих расходов'"));
								   
	Элементы.НематериальныеАктивыСуммаПродажи.Видимость = ЭтоПродажа;							   
	Элементы.НематериальныеАктивыСуммаНДС.Видимость 	= ЭтоПродажа;
	
	//++СисИнфо //Счет дебета делаем всегда видимым //2012-07-23
	//ОтобразитьСчетДт = Не ЭтоВыбытие;
	ОтобразитьСчетДт = Истина;
	//--СисИнфо
	
	Элементы.НематериальныеАктивыСчетДт.Видимость 	 = ОтобразитьСчетДт;
	Элементы.НематериальныеАктивыСубконтоДт1.Видимость = ОтобразитьСчетДт;
	Элементы.НематериальныеАктивыСубконтоДт2.Видимость = ОтобразитьСчетДт;
	Элементы.НематериальныеАктивыСубконтоДт3.Видимость = ОтобразитьСчетДт;
	Элементы.НематериальныеАктивыСубконтоДт4.Видимость = ОтобразитьСчетДт;
	
	// Управление заголовками и видимостью элементов форм.
	Элементы.ГруппаСчетаПродажи.Видимость = ЭтоПродажа;
	
	Элементы.ГруппаДополнительно.Видимость = Не ЭтоПеревод;
	
	// Изменение кода. Начало. 21.04.2014{{
	Элементы.ВалютаДокумента.Видимость = ЭтоПродажа;
	Элементы.КурсДокумента.Видимость = ЭтоПродажа;
	// Изменение кода. Конец. 21.04.2014}}
	
	//ОК Калинин М. 290413
	Элементы.Период.Видимость = ЭтоПеревод или ЭтоВыбытие;
	//ОК Калинин М.
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеФормы()
	
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"НематериальныеАктивы"
	                                                           ,"СубконтоДт"
															   ,"КоличествоДоступныхСубконтоДт"
															   ,фКоличествоСубконтоМУ);
															   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"НематериальныеАктивы"
	                                                           ,"СубконтоКт"
															   ,"КоличествоДоступныхСубконтоКт"
															   ,фКоличествоСубконтоМУ);
															   
    Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНМА(ИДСтроки)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Синхронизируем реквизиты строки НМА.
	СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, "СубконтоДт");
	СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, "СубконтоКт");

	ТекущаяСтрока.МодельУчета = ПолучитьМодельУчетаНМА(ТекущаяСтрока.НематериальныйАктив);
	
	Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийВыбытиеНМА.ПереводВПредназначенныеДляПродажи
		И НЕ ТекущаяСтрока.МодельУчета = фКэшЗначений.Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости Тогда
		
		ТекущаяСтрока.СчетКт = Неопределено;
		
		Для Ном = 1 По фКоличествоСубконтоМУ Цикл
			ТекущаяСтрока["СубконтоКт"+Ном] = Неопределено;
		КонецЦикла;
		
		ИзменениеСчетаКт(ИДСтроки);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчетаВзаиморасчетов()
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетВзаиморасчетов,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект,НастройкиСубконто,"СубконтоВзаиморасчетов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоВзаиморасчетов");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчетаНДС()
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетНДС,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект,НастройкиСубконто,"СубконтоНДС");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоНДС");
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСчетаДт(Идентификатор)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетДт,фКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока,НастройкиСубконто,"СубконтоДт");

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДт);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоДт = СвСч.КоличествоСубконто;
	
	// Синхронизируем реквизиты строки НМА.
	СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, "СубконтоДт");
	
КонецПроцедуры // ИзменениеСчетаДт()

&НаСервере
Процедура ИзменениеСчетаКт(Идентификатор)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетКт,фКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока,НастройкиСубконто,"СубконтоКт");

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетКт);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоКт = СвСч.КоличествоСубконто;
	
	// Синхронизируем реквизиты строки НМА.
	СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, "СубконтоКт");
	
КонецПроцедуры // ИзменениеСчетаКт()

&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	Для Каждого СтрокаТаблицы Из Объект.НематериальныеАктивы Цикл
        
        СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДт);
        СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетКт);
        
		СтрокаТаблицы.КоличествоДоступныхСубконтоДт = СвСчДт.КоличествоСубконто;
		СтрокаТаблицы.КоличествоДоступныхСубконтоКт = СвСчКт.КоличествоСубконто;		
		
	КонецЦикла;											   
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуМСФО(ЗаполнитьВалютуДокумента=Истина)
	
	// Получим валюту международного учета.
	ВалютаМСФО 	 = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	СтрокаВалютаМежУчета = Строка(ВалютаМСФО);
	
	Элементы.ДекорацияВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМежУчета), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМежУчета);
	
	Если ЗаполнитьВалютуДокумента Тогда
		Объект.ВалютаДокумента = ВалютаМСФО;
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры // ИзменениеВалюты()

&НаСервере
Процедура ЗаполнитьМоделиУчетаНМА()
	
	МассивНМА = Объект.НематериальныеАктивы.Выгрузить().ВыгрузитьКолонку("НематериальныйАктив");
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	СоответствиеНМА_МодельУчета = Новый Соответствие;
	
	// Заполнить соответствие объектов НМА и их моделей учета.
	ДокОбъект.ЗаполнитьСоответствиеНМА_МодельУчета(СоответствиеНМА_МодельУчета,МассивНМА);
	
	Для Каждого ТекСтрока Из Объект.НематериальныеАктивы Цикл
		
		ТекСтрока.МодельУчета = СоответствиеНМА_МодельУчета[ТекСтрока.НематериальныйАктив];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМодельУчетаНМА(НМА)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	СоответствиеНМА_МодельУчета = Новый Соответствие;
	
	МодельУчета = ДокОбъект.МодельУчетаПоСоответствиюНМА(СоответствиеНМА_МодельУчета, НМА);
	
	Возврат МодельУчета;
	
КонецФункции

&НаСервере
Процедура ОбработатьПодборНМА(ВыбранноеЗначение)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьНематериальныеАктивы(ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы,"СчетВзаиморасчетов","СубконтоВзаиморасчетов",фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы,"СчетНДС","СубконтоНДС",фКоличествоСубконтоМУ);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетВзаиморасчетов,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоВзаиморасчетов");
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетНДС,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоНДС");
	
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетДт"
												   ,"СубконтоДт"
												   ,фКоличествоСубконтоМУ
												   ,"НематериальныеАктивы"
												   ,"Элементы.НематериальныеАктивы.ТекущиеДанные");
												   
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетКт"
												   ,"СубконтоКт"
												   ,фКоличествоСубконтоМУ
												   ,"НематериальныеАктивы"
												   ,"Элементы.НематериальныеАктивы.ТекущиеДанные");											   
												   
	ВосстановитьКоличествоДоступныхСубконто();
	
КонецПроцедуры

// Процедура обрабатывает изменение даты документа.
// 
&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	// Заполним счет нераспределенной прибыли из учетной политики.
	Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	
	УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	
КонецПроцедуры

// Процедура обрабатывает изменение организации.
// 
&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	МассивПодразделений = Новый Массив;
	
	Для Ном = 1 По фКоличествоСубконтоМУ Цикл
		МассивПодразделений.Добавить("СубконтоВзаиморасчетов" + Ном);
		МассивПодразделений.Добавить("СубконтоНДС" 			  + Ном);
	КонецЦикла;
	
	Для Каждого ТекИмяРеквизита Из МассивПодразделений Цикл
		
		// Проверим принадлежность подразделения к выбранной организации.
		бит_ОбщегоНазначения.ПроверитьПринадлежностьАналитики(Объект
															 ,
															 ,ТекИмяРеквизита
															 ,"Владелец"
															 ,"Организация"
															 ,"СправочникСсылка.ПодразделенияОрганизаций"
															 ,НСтр("ru = 'В документе'")
															 ,НСтр("ru = 'Изменение значения реквизита Организация'"));
	КонецЦикла;
	
	фКэшРеквизитов.Организация = Объект.Организация;
	
	ЭтоНеПеревод = (Не Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийВыбытиеНМА.ПереводВПредназначенныеДляПродажи);
	
	Если ЭтоНеПеревод Тогда
		// Заполним счет нераспределенной прибыли из учетной политики.
		Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры

// Процедура синхронизирует субконто с типом НМА с указанным в строке таблицы НМА.
// 
&НаСервере
Процедура СинхронизироватьРеквизитыСтрокиНМА(ТекущаяСтрока, ИмяСубконто)
	
	Если ТекущаяСтрока = Неопределено Тогда
		 Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяСтрока.НематериальныйАктив) Тогда
		
		ТипОС = Тип("СправочникСсылка.НематериальныеАктивы");
		//++СисИнфо //Заполнение аналитики по объекту строительства //2012-07-23
		ТипОбъектСтроительства = Тип("СправочникСсылка.ОбъектыСтроительства");
		//--СисИнфо
		
		Для Ном = 1 По фКоличествоСубконтоМУ Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипОС Тогда
				 ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.НематериальныйАктив;
			 КонецЕсли; 
			 
			//++СисИнфо //Заполнение аналитики по объекту строительства //2012-07-23
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипОбъектСтроительства Тогда
				ТекущаяСтрока[ТекИмяСубконто] = СИС_ПолучитьОбъектСтроительства(ТекущаяСтрока.НематериальныйАктив);
			КонецЕсли;
			//--СисИнфо
			
		КонецЦикла;
	
	КонецЕсли;
	
	//ОК Калинин М. 290413
	Если ЗначениеЗаполнено(Объект.Период) Тогда
		ТипИсточника = Тип("СправочникСсылка.рс_МесяцыНачисления");
		Для Ном = 1 По фКоличествоСубконтоМУ Цикл
			ТекИмяСубконто = ИмяСубконто + Ном;
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипИсточника Тогда
				ТекущаяСтрока[ТекИмяСубконто] = Объект.Период;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//ОК Калинин М.
	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиНМА()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.НематериальныеАктивы;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество()>0 
		И ЗначениеЗаполнено(мКэшРеквизитовФормы.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаДокумента)Тогда

	    Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТаблицаОбъекта = Объект.НематериальныеАктивы;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			СтрокаТаблицы.СуммаПродажи = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПродажи
																							  ,мКэшРеквизитовФормы.ВалютаДокумента
																							  ,Объект.ВалютаДокумента
																							  ,мКэшРеквизитовФормы.КурсДокумента
																							  ,Объект.КурсДокумента
																							  ,мКэшРеквизитовФормы.КратностьДокумента
																							  ,Объект.КратностьДокумента);
			
			СтрокаТаблицы.СуммаНДС = 	бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДС
																						     ,мКэшРеквизитовФормы.ВалютаДокумента
																						     ,Объект.ВалютаДокумента
																						     ,мКэшРеквизитовФормы.КурсДокумента
																						     ,Объект.КурсДокумента
																						     ,мКэшРеквизитовФормы.КратностьДокумента
																						     ,Объект.КратностьДокумента);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()


// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,ИмяТабличногоПоля,ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента,ИмяТабличногоПоля,"");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура ИзменениеСубконто(Контейнер,ИмяСубконто,ЗначениеСубконто)

	  СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер,ИмяСубконто,фКоличествоСубконтоМУ);
	  бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто,ИмяСубконто,ЗначениеСубконто,фКоличествоСубконтоМУ);
      бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто,Контейнер,ИмяСубконто,"",фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Контейнер,ИмяСубконто,ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,ИмяСубконто
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

// Процедура окончание выбора вида операции.
// 
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") 
		И СтруктураПараметров.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = СтруктураПараметров.ВидОперации;																		   
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		Если ЭтотОбъект.Открыта() Тогда
            Закрыть();
        КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда 
		Объект.ВидОперации = фКэшЗначений.ВидыОпераций.Выбытие;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры // ПриОткрытииПромежуточная()

&НаКлиенте
Процедура ПриОткрытииОкончание()

	ЗаполнитьМоделиУчетаНМА();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();

КонецПроцедуры // ПриОткрытииОкончание()

&НаСервере
Функция ЗаполнитьПараметрыПодбора()

	ДокументОбъект   = РеквизитФормыВЗначение("Объект");
	ПараметрыПодбора = ДокументОбъект.ЗаполнитьПараметрыПодбора();
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()
#КонецОбласти

#КонецОбласти

//ОК Калинин М. 290413
&НаКлиенте
Процедура ОбновитьДаты()	
	
    Объект.Период = рс_ОбщийМодуль.ПолучитьМесяцНачисленияПоДате(Объект.Дата);
	
КонецПроцедуры
//ОК Калинин М.

//++СисИнфо //заполнение счета выбытия из параметров НМА//2012-07-23
&НаКлиенте
Процедура НематериальныеАктивыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.СчетДт) Тогда
		// 1c-izhtc, ChuckNorris, 13.08.2015 ( 
		ТекДанные.СчетДт = ПолучитьСчетВыбытия();
		Идентификатор = ТекДанные.ПолучитьИдентификатор();
		ИзменениеСчетаДт(Идентификатор);
		// 1c-izhtc, ChuckNorris, 13.08.2015 ) 
	КонецЕсли;
	
КонецПроцедуры

//++СисИнфо //Функция для получения параметра ОбъектСтроительства //2012-07-23
&НаСервере
Функция СИС_ПолучитьОбъектСтроительства(НМА)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_му_ПараметрыНМАСрезПоследних.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыНМА.СрезПоследних(
	|			&Дата,
	|			Параметр = &ОбъектСтроительства
	|				И НематериальныйАктив = &НМА) КАК бит_му_ПараметрыНМАСрезПоследних";
	
	Запрос.УстановитьПараметр("ОбъектСтроительства", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ОбъектСтроительства);
	// 1c-izhtc ChuckNorris 07.10.2015 ( 
	//Запрос.УстановитьПараметр("Дата",МоментВремени());
	Запрос.УстановитьПараметр("Дата", ?(Объект.Ссылка.Пустая(), Объект.Дата, Объект.Ссылка.МоментВремени()));
	// 1c-izhtc ChuckNorris 07.10.2015 ) 
	Запрос.УстановитьПараметр("НМА",НМА);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеПараметра;
	КонецЕсли;
	Возврат "";
	
КонецФункции

// 1c-izhtc, ChuckNorris, 13.08.2015 ( 
&НаСервере
Функция ПолучитьСчетВыбытия()
	
	МоментВремени = ?(Объект.Ссылка.Пустая(), Новый МоментВремени(Объект.Дата), Объект.Ссылка.МоментВремени()); // 1c-izhtc, ChuckNorris, 13.08.2015
		
	Отбор = Новый Структура();
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("Настройка"	, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.СчетВыбытияНМА);
	ПолитикаМУСрезПоследних = РегистрыСведений.бит_му_УчетнаяПолитика.ПолучитьПоследнее(МоментВремени, Отбор);	
	
	Возврат ПолитикаМУСрезПоследних.ЗначениеНастройки;
	
КонецФункции
// 1c-izhtc, ChuckNorris, 13.08.2015 )