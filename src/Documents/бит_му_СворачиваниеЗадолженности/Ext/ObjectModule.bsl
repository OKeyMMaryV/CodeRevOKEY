#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	НайтиПоследующиеДокументы(Отказ);
	
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности.СворачиваниеЗадолженностиПоПретензиям Тогда
		ПроведениеПретензий();
	ИначеЕсли ВидОперации = Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности.СворачиваниеЗадолженностиПоПремиямПоДоговорамПоставки Тогда
		ПроведениеДоговоровПоставок();
	ИначеЕсли ВидОперации = Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности.ПереносСальдоНаОдинДоговорДляСворачиванияЗадолженности Тогда
		ПроведениеПереносСальдо();
	ИначеЕсли ВидОперации = Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности.СворачиваниеЗадолженностиПоПремиямПоДоговорамМаркетинга Тогда
		ПроведениеДоговоровМаркетинга();
	ИначеЕсли ВидОперации = Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности.СворачиваниеЗадолженностиПоУслугам Тогда
		ПроведениеУслуг();
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-05-15 (#3440)
	ИначеЕсли ВидОперации = Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности.ок_ПереносСальдоНаОдинДоговорСУчетомКодовМСФОВВалюте 
		ИЛИ ВидОперации = Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности.ок_ПереносСальдоНаОдинДоговорСУчетомКодовМСФОВРублях Тогда
		ПроведениеПереносСальдоПоКодамМСФО();
	ИначеЕсли ВидОперации = Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности.ок_ПереносОтрицательногоСальдоПоЗадолженностиВВалюте 
		ИЛИ ВидОперации = Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности.ок_ПереносОтрицательногоСальдоПоЗадолженностиВРублях Тогда
		ПроведениеОтрицательногоСальдо();
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-05-15 (#3440)
	КонецЕсли;  		
	
КонецПроцедуры


Процедура ПроведениеПретензий()
	
		Для Каждого Строка Из ТЧПретензии Цикл
		Если НЕ Строка.СуммаСворачивания = 0 Тогда
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			СтрокаДвижений.СчетДт  = Строка.СчетУчетаКЗ;
			СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания;
			СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания;
			СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания;
			СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания;
			СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания;
			СтрокаДвижений.Период  = ЭтотОбъект.Дата;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
			СтрокаДвижений.Содержание = "Сворачивание задолженности по претензиям с кредиторской задолженностью по товару";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;

			//Сторно
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			СтрокаДвижений.СчетДт  = Строка.СчетУчетаКЗ;
			СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания * -1;
			СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания * -1;
			СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания * -1;
			СтрокаДвижений.Период  = ЭтотОбъект.ДатаСторно;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
			СтрокаДвижений.Содержание = "Сторно сворачивания задолженности по претензиям с кредиторской задолженностью по товару";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;

		КонецЕсли;		
	КонецЦикла;
	
	Движения.бит_Дополнительный_2.Записать();
	
КонецПроцедуры

Процедура ПроведениеДоговоровПоставок()
	
	//МассивНастроек = Новый Массив;
	//МассивНастроек.Добавить("Прочая ДЗ");
	//
	//бит_му_Общий.ДозаполнитьНедостающиеНастройкиНаСервере(МассивНастроек, "Вспомогательные счета сворачивания");
	
	НаборНастроек = РегистрыСведений.бит_му_Настройки.СоздатьНаборЗаписей();
	НаборНастроек.Отбор.ИмяНастройки.Установить("Прочая ДЗ");
	НаборНастроек.Прочитать();
	
	Если НаборНастроек.Количество() > 0 Тогда
	СчетПрочаяДЗ = НаборНастроек[0].Значение;
	КонецЕсли;
	
	Для Каждого Строка Из ТЧПретензии Цикл
		Если ЗначениеЗаполнено(Строка.СчетУчетаКЗ) Тогда
			Если НЕ Строка.СуммаСворачивания = 0 Тогда
				СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
				СтрокаДвижений.СчетДт  = Строка.СчетУчетаКЗ;
				СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
				СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания;
				СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания;
				СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания;
				СтрокаДвижений.Период  = ЭтотОбъект.Дата;
				СтрокаДвижений.Организация = ЭтотОбъект.Организация;
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
				СтрокаДвижений.Содержание = "Сворачивание задолженности по премиям по договорам поставки с кредиторской задолженностью по товару";
				СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
				
				//Сторно
				СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
				СтрокаДвижений.СчетДт  = Строка.СчетУчетаКЗ;
				СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
				СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.Период  = ЭтотОбъект.ДатаСторно;
				СтрокаДвижений.Организация = ЭтотОбъект.Организация;
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
				СтрокаДвижений.Содержание = "Сторно сворачивания задолженности по премиям по договорам поставки с кредиторской задолженностью по товару";
				СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Строка.СуммаОтнесения = 0 Тогда
			//Прочая ДЗ
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			СтрокаДвижений.СчетДт  = СчетПрочаяДЗ;
			СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений.СуммаМУ = Строка.СуммаОтнесения;
			СтрокаДвижений.СуммаРегл = Строка.СуммаОтнесения;
			СтрокаДвижений.СуммаУпр = Строка.СуммаОтнесения;
			СтрокаДвижений.Период  = ЭтотОбъект.Дата;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
			СтрокаДвижений.Содержание = "Перенос задолженности по премиям по договорам поставки на прочую дебиторскую задолженность";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			
		
			//Сторно прочая ДЗ
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			СтрокаДвижений.СчетДт  = СчетПрочаяДЗ;
			СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений.СуммаМУ = Строка.СуммаОтнесения * -1;
			СтрокаДвижений.СуммаРегл = Строка.СуммаОтнесения * -1;
			СтрокаДвижений.СуммаУпр = Строка.СуммаОтнесения * -1;
			СтрокаДвижений.Период  = ЭтотОбъект.ДатаСторно;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
			СтрокаДвижений.Содержание = "Сторно переноса задолженности по премиям по договорам поставки на прочую дебиторскую задолженность";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.бит_Дополнительный_2.Записать();
	
КонецПроцедуры	

Процедура ПроведениеПереносСальдо()
	
	НаборНастроек = РегистрыСведений.бит_му_Настройки.СоздатьНаборЗаписей();
	НаборНастроек.Отбор.Группа.Установить("Вспомогательные счета сворачивания");
	НаборНастроек.Прочитать();
	
	ТаблицаВспомогательныхСчетов = НаборНастроек.Выгрузить();
	
	
	СчетаУчетаДЗПереносСальдо = ТаблицаВспомогательныхСчетов.НайтиСтроки(Новый Структура("ИмяНастройки","Счет ДЗ по премиям по договорам маркетинга"));
	
	Если СчетаУчетаДЗПереносСальдо.Количество() > 0 Тогда
		СчетУчетаДЗПереносСальдо = СчетаУчетаДЗПереносСальдо[0].Значение; //52108
	КонецЕсли;
	
	СчетаУчетаКЗ = ТаблицаВспомогательныхСчетов.НайтиСтроки(Новый Структура("ИмяНастройки","Счет учета КЗ по товару"));
	
	Если СчетаУчетаКЗ.Количество() > 0 Тогда
		СчетУчетаКЗ = СчетаУчетаКЗ[0].Значение; //52101
	КонецЕсли;
	
	СчетаУчетаДЗРаботыУслуги = ТаблицаВспомогательныхСчетов.НайтиСтроки(Новый Структура("ИмяНастройки","Счет ДЗ по работам и услугам"));
	
	Если СчетаУчетаДЗРаботыУслуги.Количество() > 0 Тогда
		СчетУчетаДЗРаботыУслуги = СчетаУчетаДЗРаботыУслуги[0].Значение; //22102
	КонецЕсли;
		
	Для Каждого Строка Из ТЧПретензии Цикл
		
		СтрокиСальдоПослеЗапрос = Новый Запрос;
		СтрокиСальдоПослеЗапрос.Текст ="ВЫБРАТЬ *
										|ПОМЕСТИТЬ ВТТаблицаСтрок
										|ИЗ
										|	&ТаблицаСтрок КАК ТаблицаСтрок
										|ГДЕ
										|	ТаблицаСтрок.СальдоПоСчетуУчетаКЗ > 0
										|	И ТаблицаСтрок.ИНН = &ИНН
										|	И ТаблицаСтрок.КПП = &КПП
										|;
										|
										|////////////////////////////////////////////////////////////////////////////////
										|ВЫБРАТЬ *
										|ИЗ
										|	ВТТаблицаСтрок КАК ВТТаблицаСтрок" ;
										
		СтрокиСальдоПослеЗапрос.УстановитьПараметр("ТаблицаСтрок", 	ЭтотОбъект.ТЧПретензии.Выгрузить());							
		СтрокиСальдоПослеЗапрос.УстановитьПараметр("ИНН"         , 	Строка.ИНН);
		СтрокиСальдоПослеЗапрос.УстановитьПараметр("КПП"         , 	Строка.КПП);
		СтрокиСальдоПослеЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СтрокиСальдоПосле = СтрокиСальдоПослеЗапрос.Выполнить().Выгрузить();
		
		СтрокиСНенулевымСальдо = Новый Структура();
		СтрокиСНенулевымСальдо.Вставить("Строка52101", СтрокиСальдоПосле.Найти(СчетУчетаКЗ, "СчетРасчетаПоПретензиям")); 
		СтрокиСНенулевымСальдо.Вставить("Строка52108", СтрокиСальдоПосле.Найти(СчетУчетаДЗПереносСальдо, "СчетРасчетаПоПретензиям"));
		СтрокиСНенулевымСальдо.Вставить("Строка22102", СтрокиСальдоПосле.Найти(СчетУчетаДЗРаботыУслуги , "СчетРасчетаПоПретензиям")); 		
		
		Если Строка.СальдоПоСчетуУчетаКЗ = 0 Тогда
			Если НЕ СтрокиСНенулевымСальдо.Свойство("Строка" + Строка(Строка.СчетРасчетаПоПретензиям)) ИЛИ СтрокиСНенулевымСальдо["Строка" + Строка(Строка.СчетРасчетаПоПретензиям)] = Неопределено ИЛИ СтрокиСНенулевымСальдо["Строка" + Строка(Строка.СчетРасчетаПоПретензиям)].СуммаСворачивания = 0 Тогда
				Продолжить;
			КонецЕсли;
			ДтКт = ?(Строка.СчетРасчетаПоПретензиям = СчетУчетаДЗРаботыУслуги, "Дт", "Кт");
			КтДт = ?(Строка.СчетРасчетаПоПретензиям = СчетУчетаДЗРаботыУслуги, "Кт", "Дт");
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			СтрокаДвижений["Счет" + ДтКт]  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений["Счет" + КтДт]  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания * ?(Строка.СчетРасчетаПоПретензиям = СчетУчетаДЗПереносСальдо, -1, 1);
			СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания* ?(Строка.СчетРасчетаПоПретензиям = СчетУчетаДЗПереносСальдо, -1, 1);
			СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания* ?(Строка.СчетРасчетаПоПретензиям = СчетУчетаДЗПереносСальдо, -1, 1);
			СтрокаДвижений.Период  = ЭтотОбъект.Дата;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			СтрокаДвижений.Содержание = "Перенос задолженности на один договор для последующего сворачивания задолженности";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			//установим субконто
			Если ЗначениеЗаполнено(СтрокиСНенулевымСальдо["Строка" + Строка(Строка.СчетРасчетаПоПретензиям)]) Тогда
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений["Счет" + ДтКт], СтрокаДвижений["Субконто"+ДтКт], "Контрагенты", СтрокиСНенулевымСальдо["Строка" + Строка(Строка.СчетРасчетаПоПретензиям)].Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений["Счет" + ДтКт], СтрокаДвижений["Субконто"+ДтКт], "ДоговорыКонтрагентов", СтрокиСНенулевымСальдо["Строка" + Строка(Строка.СчетРасчетаПоПретензиям)].Договор);
			КонецЕсли;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений["Счет" + КтДт], СтрокаДвижений["Субконто"+КтДт], "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений["Счет" + КтДт], СтрокаДвижений["Субконто"+КтДт], "ДоговорыКонтрагентов", Строка.Договор);
			
			//Сторно
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			СтрокаДвижений["Счет" + ДтКт]  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений["Счет" + КтДт]  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания * -1 * ?(Строка.СчетРасчетаПоПретензиям = СчетУчетаДЗПереносСальдо, -1, 1);
			СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания* -1 * ?(Строка.СчетРасчетаПоПретензиям = СчетУчетаДЗПереносСальдо, -1, 1);
			СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания* -1 * ?(Строка.СчетРасчетаПоПретензиям = СчетУчетаДЗПереносСальдо, -1, 1);
			СтрокаДвижений.Период  = ЭтотОбъект.ДатаСторно;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			СтрокаДвижений.Содержание = "Сторно переноса задолженности на один договор для последующего сворачивания задолженности";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			//установим субконто
			Если ЗначениеЗаполнено(СтрокиСНенулевымСальдо["Строка" + Строка(Строка.СчетРасчетаПоПретензиям)]) Тогда
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений["Счет" + ДтКт], СтрокаДвижений["Субконто"+ДтКт], "Контрагенты", СтрокиСНенулевымСальдо["Строка" + Строка(Строка.СчетРасчетаПоПретензиям)].Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений["Счет" + ДтКт], СтрокаДвижений["Субконто"+ДтКт], "ДоговорыКонтрагентов", СтрокиСНенулевымСальдо["Строка" + Строка(Строка.СчетРасчетаПоПретензиям)].Договор);
			КонецЕсли;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений["Счет" + КтДт], СтрокаДвижений["Субконто"+КтДт], "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений["Счет" + КтДт], СтрокаДвижений["Субконто"+КтДт], "ДоговорыКонтрагентов", Строка.Договор);
			
			
		КонецЕсли;		
	КонецЦикла;
	
	Движения.бит_Дополнительный_2.Записать();

	
	
КонецПроцедуры

Процедура ПроведениеДоговоровМаркетинга()
	
    НаборНастроек = РегистрыСведений.бит_му_Настройки.СоздатьНаборЗаписей();
	НаборНастроек.Отбор.ИмяНастройки.Установить("Прочая ДЗ");
	НаборНастроек.Прочитать();
	
	Если НаборНастроек.Количество() > 0 Тогда
	СчетПрочаяДЗ = НаборНастроек[0].Значение;
	КонецЕсли;
	
	Для Каждого Строка Из ТЧПретензии Цикл
		Если ЗначениеЗаполнено(Строка.СчетУчетаКЗ) Тогда
			Если НЕ Строка.СуммаСворачивания = 0 Тогда
				СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
				СтрокаДвижений.СчетДт  = Строка.СчетУчетаКЗ;
				СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
				СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания;
				СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания;
				СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания;
				СтрокаДвижений.Период  = ЭтотОбъект.Дата;
				СтрокаДвижений.Организация = ЭтотОбъект.Организация;
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
				СтрокаДвижений.Содержание = "Сворачивание задолженности по премиям по договорам маркетинга с кредиторской задолженностью по товару";
				СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
				
				//Сторно
				СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
				СтрокаДвижений.СчетДт  = Строка.СчетУчетаКЗ;
				СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
				СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.Период  = ЭтотОбъект.ДатаСторно;
				СтрокаДвижений.Организация = ЭтотОбъект.Организация;
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
				СтрокаДвижений.Содержание = "Сторно сворачивания задолженности по премиям по договорам маркетинга с кредиторской задолженностью по товару";
				СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Строка.СуммаОтнесения = 0 Тогда
			//Прочая ДЗ
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			СтрокаДвижений.СчетДт  = СчетПрочаяДЗ;
			СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений.СуммаМУ = Строка.СуммаОтнесения;
			СтрокаДвижений.СуммаРегл = Строка.СуммаОтнесения;
			СтрокаДвижений.СуммаУпр = Строка.СуммаОтнесения;
			СтрокаДвижений.Период  = ЭтотОбъект.Дата;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
			СтрокаДвижений.Содержание = "Перенос задолженности по премиям по договорам маркетинга на прочую дебиторскую задолженность";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			
		
			//Сторно прочая ДЗ
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			СтрокаДвижений.СчетДт  = СчетПрочаяДЗ;
			СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений.СуммаМУ = Строка.СуммаОтнесения * -1;
			СтрокаДвижений.СуммаРегл = Строка.СуммаОтнесения * -1;
			СтрокаДвижений.СуммаУпр = Строка.СуммаОтнесения * -1;
			СтрокаДвижений.Период  = ЭтотОбъект.ДатаСторно;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
			СтрокаДвижений.Содержание = "Сторно переноса задолженности по премиям по договорам маркетинга на прочую дебиторскую задолженность";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.бит_Дополнительный_2.Записать();
	
КонецПроцедуры

Процедура ПроведениеУслуг()
	
	Для Каждого Строка Из ТЧПретензии Цикл
		Если НЕ Строка.СуммаСворачивания = 0 Тогда
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			СтрокаДвижений.СчетДт  = Строка.СчетУчетаКЗ;
			СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания;
			СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания;
			СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания;
			СтрокаДвижений.Период  = ЭтотОбъект.Дата;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
			СтрокаДвижений.Содержание = "Сворачивание задолженности по услугам с кредиторской задолженностью по товару";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			//Сторно
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			СтрокаДвижений.СчетДт  = Строка.СчетУчетаКЗ;
			СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям;
			СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания * -1;
			СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания * -1;
			СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания * -1;
			СтрокаДвижений.Период  = ЭтотОбъект.ДатаСторно;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
			СтрокаДвижений.Содержание = "Сторно сворачивания задолженности по услугам";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
		КонецЕсли;		
	КонецЦикла;
	
	Движения.бит_Дополнительный_2.Записать();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	НайтиПоследующиеДокументы(Отказ);	
		
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	НайтиПоследующиеДокументы(Отказ);
	
КонецПроцедуры

Процедура НайтиПоследующиеДокументы(Отказ) Экспорт
	
	ТекущийВО = ЭтотОбъект.ВидОперации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ              
	               |	бит_му_Настройки.Значение
	               |ИЗ
	               |	РегистрСведений.бит_му_Настройки КАК бит_му_Настройки
	               |ГДЕ
	               |	бит_му_Настройки.Группа = ""Обработка по сворачиванию задолженностей поставщиков товара""
				   |   И бит_му_Настройки.ИмяНастройки = &ТекущийВО";
	Запрос.УстановитьПараметр("ТекущийВО", Строка(ТекущийВО));				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НомерОчереди = Выборка.Значение;
	Иначе
		Сообщить("Проверьте существование настройки с именем: "+ Строка(ТекущийВО) + " в группе ""Обработка по сворачиванию задолженностей поставщиков товара""");
	КонецЕсли;
	
	//Запрос всех последующих сворачиваний
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_му_Настройки.Значение КАК Значение,
	               |	бит_му_Настройки.ИмяНастройки КАК ИмяНастройки
	               |ИЗ
	               |	РегистрСведений.бит_му_Настройки КАК бит_му_Настройки
	               |ГДЕ
	               |	бит_му_Настройки.Группа = ""Обработка по сворачиванию задолженностей поставщиков товара""
	               |	И бит_му_Настройки.Значение > &ТекущаяОчередь
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Значение";
	Запрос.УстановитьПараметр("ТекущаяОчередь", НомерОчереди);				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		мВидОперации = ПолучитьВидОперации(Выборка.ИмяНастройки);
		Если ЗначениеЗаполнено(мВидОперации) Тогда
			ЗапросДокументов = Новый Запрос;
			ЗапросДокументов.Текст = "ВЫБРАТЬ
			                         |	бит_му_СворачиваниеЗадолженности.Ссылка
			                         |ИЗ
			                         |	Документ.бит_му_СворачиваниеЗадолженности КАК бит_му_СворачиваниеЗадолженности
			                         |ГДЕ
			                         |	бит_му_СворачиваниеЗадолженности.ВидОперации = &ВидОперации
			                         |	И бит_му_СворачиваниеЗадолженности.Дата <= &КонецМесяца
			                         |	И бит_му_СворачиваниеЗадолженности.Дата >= &НачалоМесяца
			                         |	И бит_му_СворачиваниеЗадолженности.Проведен = ИСТИНА
			                         |	И бит_му_СворачиваниеЗадолженности.Организация = &Организация";
			ЗапросДокументов.УстановитьПараметр("ВидОперации", мВидОперации);
			ЗапросДокументов.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
			ЗапросДокументов.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
			ЗапросДокументов.УстановитьПараметр("КонецМесяца", КонецМесяца(Дата));
			Результат = ЗапросДокументов.Выполнить();
			Если Не Результат.Пустой() Тогда
				Сообщить("Требуется распровести и очистить табличную часть у следующих документов сворачивания с видом операции: " + Строка(мВидОперации) + " за месяц " + Формат(Дата, "ДФ = ММММ") + ":");
				ВыборкаДокументов = Результат.Выбрать();
				Пока ВыборкаДокументов.Следующий() Цикл
					Сообщить(ВыборкаДокументов.Ссылка);
				КонецЦикла;
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьВидОперации(ВидОперацииСтрока)
	
	ОперацияСоздаваемогоДокумента = Неопределено;
	
	Для Каждого мВидОперации Из Перечисления.бит_му_ВидыОперацийСворачиваниеЗадолженности Цикл		
		
		Если Строка(мВидОперации) = ВидОперацииСтрока Тогда 			
			
			ОперацияСоздаваемогоДокумента = мВидОперации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОперацияСоздаваемогоДокумента;
	
КонецФункции

// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-05-15 (#3440)
Процедура ПроведениеПереносСальдоПоКодамМСФО()
	Для Каждого Строка Из ТЧПретензии Цикл
		Если Строка.СуммаСворачивания <> 0 И Строка.ок_Провести И Строка.ДоговорАксапты <> "Х" Тогда
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить(); 
			Если Строка.СуммаСворачивания > 0 Тогда
				СтрокаДвижений.СчетДт  = ?(ЗначениеЗаполнено(Строка.СчетУчетаКЗ), Строка.СчетУчетаКЗ, Строка.ок_СчетУчетаДЗ);
				СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям; 
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.ок_ПереносНаКонтрагента);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.ок_ПереносНаДоговор);
				СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания;
				СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания;
				СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания;
			Иначе
				СтрокаДвижений.СчетДт  = Строка.СчетРасчетаПоПретензиям;
				СтрокаДвижений.СчетКт  = ?(ЗначениеЗаполнено(Строка.СчетУчетаКЗ), Строка.СчетУчетаКЗ, Строка.ок_СчетУчетаДЗ); 
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.ок_ПереносНаКонтрагента);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.ок_ПереносНаДоговор);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
				СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания * -1;
			КонецЕсли;
			
			СтрокаДвижений.Период  = ЭтотОбъект.Дата;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			СтрокаДвижений.Содержание = "Перенос сальдо по кодам МСФО";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			
			//Сторно
			Если Строка.ок_Сторнировать И ЗначениеЗаполнено(ДатаСторно) Тогда
				СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
				Если Строка.СуммаСворачивания > 0 Тогда
					СтрокаДвижений.СчетДт  = ?(ЗначениеЗаполнено(Строка.СчетУчетаКЗ), Строка.СчетУчетаКЗ, Строка.ок_СчетУчетаДЗ);
					СтрокаДвижений.СчетКт  = Строка.СчетРасчетаПоПретензиям; 
					бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
					бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
					бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.ок_ПереносНаКонтрагента);
					бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.ок_ПереносНаДоговор);
					СтрокаДвижений.СуммаМУ =  Строка.СуммаСворачивания * -1;
					СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания * -1;
					СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания * -1;
				Иначе
					СтрокаДвижений.СчетДт  = Строка.СчетРасчетаПоПретензиям;
					СтрокаДвижений.СчетКт  = ?(ЗначениеЗаполнено(Строка.СчетУчетаКЗ), Строка.СчетУчетаКЗ, Строка.ок_СчетУчетаДЗ); 
					бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.ок_ПереносНаКонтрагента);
					бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.ок_ПереносНаДоговор);
					бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
					бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
					СтрокаДвижений.СуммаМУ =  Строка.СуммаСворачивания;
					СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания;
					СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания;
				КонецЕсли;
				
				СтрокаДвижений.Период  = ЭтотОбъект.ДатаСторно;
				СтрокаДвижений.Организация = ЭтотОбъект.Организация;
				СтрокаДвижений.Содержание = "Сторно переноса сальдо по кодам МСФО";
				СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Движения.бит_Дополнительный_2.Записать();

	
КонецПроцедуры

Процедура ПроведениеОтрицательногоСальдо() 
	
	Для Каждого Строка Из ТЧПретензии Цикл
		Если НЕ Строка.СуммаСворачивания = 0 И Строка.ок_Провести Тогда
			СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
			Если Строка.ок_СчетУчетаДЗ.Вид = ВидСчета.Активный Тогда
				СтрокаДвижений.СчетДт  = Строка.СчетУчетаКЗ;
				СтрокаДвижений.СчетКт  = Строка.ок_СчетУчетаДЗ;         
			Иначе
				СтрокаДвижений.СчетДт  = Строка.ок_СчетУчетаДЗ;
				СтрокаДвижений.СчетКт  = Строка.СчетУчетаКЗ;
			КонецЕсли;
			СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания;
			СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания;
			СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания;
			СтрокаДвижений.Период  = ЭтотОбъект.Дата;
			СтрокаДвижений.Организация = ЭтотОбъект.Организация;
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
			бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
			СтрокаДвижений.Содержание = "Сворачивание отрицательных остатков";
			СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			
			//Сторно
			Если Строка.ок_Сторнировать И ЗначениеЗаполнено(ДатаСторно) Тогда
				СтрокаДвижений = Движения.бит_Дополнительный_2.Добавить();
				Если Строка.ок_СчетУчетаДЗ.Вид = ВидСчета.Активный Тогда
					СтрокаДвижений.СчетДт  = Строка.СчетУчетаКЗ;
					СтрокаДвижений.СчетКт  = Строка.ок_СчетУчетаДЗ;         
				Иначе
					СтрокаДвижений.СчетДт  = Строка.ок_СчетУчетаДЗ;
					СтрокаДвижений.СчетКт  = Строка.СчетУчетаКЗ;
				КонецЕсли;
				СтрокаДвижений.СуммаМУ = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.СуммаРегл = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.СуммаУпр = Строка.СуммаСворачивания * -1;
				СтрокаДвижений.Период  = ЭтотОбъект.ДатаСторно;
				СтрокаДвижений.Организация = ЭтотОбъект.Организация;
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт, "ДоговорыКонтрагентов", Строка.Договор);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "Контрагенты", Строка.Контрагент);
				бит_му_ОбщегоНазначения.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "ДоговорыКонтрагентов", Строка.Договор);
				СтрокаДвижений.Содержание = "Сторно сворачивания отрицательных остатков";
				СтрокаДвижений.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Движения.бит_Дополнительный_2.Записать();
	
	
КонецПроцедуры
// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-05-15 (#3440)
#КонецЕсли