
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

&НаКлиенте 
Перем мВыбранныйСчет; // Хранит выбранный счет. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверкиДляПорталаВГО(Объект);
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект." + Метаданные.Документы.бит_вго_ПротоколРасхождений.Имя));
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ);  	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие нового 
   	Если Параметры.Ключ.Пустая() Тогда
		
		ЗаполнитьКэшЗначений();   
		
		// При копировании
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			ИЛИ ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда  		
			ОбновитьФормуПоДаннымОбъекта();                                     		
		Иначе
			// Установить видимость реквизитов и заголовков колонок.	
			УстановитьВидимостьДоступностьПоРегиструБухгалтерии();
			УстановитьДоступностьТч();
		КонецЕсли;
	
	КонецЕсли;
				
	// Управление отображением счетов и субконто.
	фКоличествоСубконто = 4;
	ОформитьСчета();
	ОформитьРеквизиты();
	
	// Дата запрета редактирования	
	ЗапрещеноРедактировать = Ложь;
	Если Не Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ПараметрыСверки = Новый Структура("Организация1, Контрагент2", Объект.Организация, Объект.Контрагент);	
		бит_вго_Сервер.ПроверитьВозможностьРедактированияДокументовСверкиВГО(Объект.Дата, ПараметрыСверки, ЗапрещеноРедактировать);
		
		Если Объект.Проведен Тогда
			ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
			ДокументОбъект.ПроверитьЗавершениеСверкиВГО(ЗапрещеноРедактировать);		
		КонецЕсли;
		
		ЭтаФорма.ТолькоПросмотр = ЗапрещеноРедактировать;
			
	КонецЕсли;
	
	// Изменение кода. Начало. 03.04.2014{{
	УстановитьПараметрыВыбораДляСчетов();
    // Изменение кода. Конец. 03.04.2014}}

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Дата");
	мКэшРеквизитовФормы.Вставить("НастройкаАктаСверки");
	мКэшРеквизитовФормы.Вставить("РегистрБухгалтерии");
	мКэшРеквизитовФормы.Вставить("Организация");
	мКэшРеквизитовФормы.Вставить("Контрагент");
	мКэшРеквизитовФормы.Вставить("Сценарий");
		
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ВосстановитьНастройкиОформленияПоСчету();
	
	ЗаполнитьКэшЗначений();
	
	ОбновитьФормуПоДаннымОбъекта();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьНастройкиОформленияПоСчету();	
	 
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	ПараметрыОповещения = Новый Структура("Организация, Контрагент, Ссылка"
										, Объект.Организация, Объект.Контрагент, Объект.Ссылка);
	Оповестить("ИзмененДокументСверкиВГО", ПараметрыОповещения);
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_вго_ПротоколРасхождений";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура изменения даты
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СтараяДата = мКэшРеквизитовФормы.Дата;
	
	Если Объект.Проводки.Количество() > 0 И Объект.Дата <> СтараяДата Тогда
		
		Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект, СтараяДата);
		ТекстВопроса = НСтр("ru = 'Дата документа изменена. Будут пересчитаны валютные суммы табличной части. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("Дата");
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура изменения реквизита НастройкаАктаСверки.
// 
&НаКлиенте
Процедура НастройкаАктаСверкиПриИзменении(Элемент)
	
	Если Объект.НастройкаАктаСверки <> мКэшРеквизитовФормы.НастройкаАктаСверки Тогда
		
		Если Объект.Проводки.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("НастройкаАктаСверкиПриИзмененииЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			
		Иначе
			
			ИзменениеНастройкиСервер();
		    ДобавитьВКэш("НастройкаАктаСверки");
			ДобавитьВКэш("РегистрБухгалтерии");
			
		КонецЕсли;     		
				  
	КонецЕсли;
	
КонецПроцедуры // НастройкаАктаСверкиПриИзменении()


// Процедура изменения реквизита ОрганизацияКонсолидирующая.
// 
&НаКлиенте
Процедура ОрганизацияКонсолидирующаяПриИзменении(Элемент)
	
	Возврат;
	// УстановитьДоступностьТч();
	
КонецПроцедуры // ОрганизацияКонсолидирующаяПриИзменении()

// Процедура изменения реквизита Организация.
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтараяОрганизация = мКэшРеквизитовФормы.Организация;
	ТекОрганизация    = Объект.Организация;
	СтараяВалютаМСФО  = фКэшЗначений.ВалютаМСФО;
	ТекВалютаМСФО     = ПолучитьВалютуМСФО();
	
	ИзменитьОрганизацию 	= Истина;
	ПересчитыватьСуммыМСФО 	= Ложь;
	
	
	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
		
		Если ТекОрганизация <> СтараяОрганизация Тогда
		
			Если Объект.Проводки.Количество() > 0 Тогда
				
				ТекстВопроса = "Изменилась организация";
				 			
				Если ИмяРегистраБухгалтерии = "бит_Дополнительный_2" 
					И ТекВалютаМСФО <> СтараяВалютаМСФО Тогда
				
					ТекстВопроса = ТекстВопроса + " и валюта МСФО";
					ПересчитыватьСуммыМСФО = Истина;
					
				КонецЕсли;
				
				// Структура дополнительных параметров для обработки оповещения.
				СтруктураДопПараметров = Новый Структура;
				СтруктураДопПараметров.Вставить("ПересчитыватьСуммыМСФО", ПересчитыватьСуммыМСФО);
				СтруктураДопПараметров.Вставить("СтараяВалютаМСФО", СтараяВалютаМСФО);
				СтруктураДопПараметров.Вставить("ТекВалютаМСФО", ТекВалютаМСФО);
				
				Оповещение = Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект, СтруктураДопПараметров);
				ТекстВопроса = ТекстВопроса + НСтр("ru = '. Будут изменены данные табличной части. Продолжить?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
			Иначе
				
				Если ИзменитьОрганизацию Тогда
					ИзменениеОрганизацииСервер(ПересчитыватьСуммыМСФО, СтараяВалютаМСФО, ТекВалютаМСФО);
					ДобавитьВКэш("Организация");
				Иначе	
					ИзвлечьИзКэша("Организация");
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
			
		УстановитьДоступностьТч();
		
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура изменения реквизита Контрагент
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтарыйКонтрагент  = мКэшРеквизитовФормы.Контрагент;
	ТекКонтрагент     = Объект.Контрагент;
		
	ИзменитьКонтрагента = Истина;
		
	Если ЗначениеЗаполнено(ТекКонтрагент) Тогда  
		
		Если ТекКонтрагент <> СтарыйКонтрагент Тогда
		
			Если Объект.Проводки.Количество() > 0 Тогда
				
				Оповещение = Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект);
				ТекстВопроса = НСтр("ru = 'Изменен контрагент. Будут изменены данные табличной части. Продолжить?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				 			
			Иначе
				
				Если ИзменитьКонтрагента Тогда
					ИзменениеКонтрагентаСервер();
					ДобавитьВКэш("Контрагент");
				Иначе	
					ИзвлечьИзКэша("Контрагент");
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
	Иначе
		
		УстановитьДоступностьТч();
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура изменения реквизита Сценарий
// 
&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	// СценарийЗаполнен = ЗначениеЗаполнено(Объект.Сценарий);
	// Элементы.ГруппаПроводки.ТолькоПросмотр = Не СценарийЗаполнен;
	
	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
		
		// Если ЗначениеЗаполнено(мКэшРеквизитовФормы.Сценарий) Тогда.
		
		ТекВалютаСценария    = ПолучитьВалютуСценария();
		СтараяВалютаСценария = фКэшЗначений.ВалютаСценария; 
			
		Если Объект.Проводки.Количество() > 0 И ТекВалютаСценария <> СтараяВалютаСценария Тогда
			
			СтруктураДопПараметров = Новый Структура;
			СтруктураДопПараметров.Вставить("ТекВалютаСценария", ТекВалютаСценария);
			СтруктураДопПараметров.Вставить("СтараяВалютаСценария", СтараяВалютаСценария);
			
			Оповещение = Новый ОписаниеОповещения("СценарийПриИзмененииЗавершение", ЭтотОбъект, СтруктураДопПараметров);
			ТекстВопроса = НСтр("ru = 'Валюта сценария изменена. Будут пересчитаны суммы табличной части. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			
		Иначе
			
			фКэшЗначений.Вставить("ВалютаСценария", ТекВалютаСценария);
			Объект.ВалютаДокумента = ТекВалютаСценария;
			
			УстановитьДоступностьТч();
		
			ДобавитьВКэш("Сценарий");
			
		КонецЕсли;
			
		// КонецЕсли;
		
	Иначе
		
		УстановитьДоступностьТч();
		
		ДобавитьВКэш("Сценарий");
		
	КонецЕсли;
	 	
КонецПроцедуры // СценарийПриИзменении() 

// Процедура начало выбора реквизита ОперацияВГО табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиОперацияВГОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) И ЗначениеЗаполнено(ТекущиеДанные.СчетКт) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДтКт = ?(ТекущиеДанные.ЭтоСчетРасчетовДт, "Кт", "Дт"); 		
		ЭтоОплата  = фКэшЗначений.МассивСчетовОплаты.Найти(ТекущиеДанные["Счет" + ДтКт]) <> Неопределено;
		
		ИсключаемыйТипОперации = ?(ЭтоОплата
								, фКэшЗначений.Перечисления.бит_вго_ТипыОперацийВГО.НачислениеЗадолженности
								, фКэшЗначений.Перечисления.бит_вго_ТипыОперацийВГО.ПогашениеЗадолженности);
		
								
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока"			, ТекущиеДанные.ОперацияВГО);	
		ПараметрыФормы.Вставить("ИсключаемыйТипОперации", ИсключаемыйТипОперации);
		ОткрытьФорму("Справочник.бит_вго_ОперацииВГО.ФормаВыбора", ПараметрыФормы, Элемент);	
	
	КонецЕсли;
	
КонецПроцедуры // ПроводкиОперацияВГОНачалоВыбора()

// Процедура изменения реквизита ОперацияВГО табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиОперацияВГОПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;	
	ТекущиеДанные.РучноеИзменениеОперацииВГО = ЗначениеЗаполнено(ТекущиеДанные.ОперацияВГО);
		
КонецПроцедуры // ПроводкиОперацияВГОПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроводки

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьЗначенияСвойств(фКэшЗначений.КэшРеквизитовСтроки, Элемент.ТекущиеДанные); 	
	
КонецПроцедуры // ПроводкиПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка, есть ли изменения
	ЕстьИзменения = Ложь;
	КэшРеквизитовСтроки = фКэшЗначений.КэшРеквизитовСтроки;
	Для каждого КлЗнч Из КэшРеквизитовСтроки Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ТекущиеДанные[ИмяРеквизита] <> КэшРеквизитовСтроки[ИмяРеквизита] Тогда
			ЕстьИзменения = Истина;
			Прервать;		
		КонецЕсли;	
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		
		ТекстСообщения = "";
		
		ТекИдентификатор 	 = ТекущиеДанные.ПолучитьИдентификатор();
		
		УстановитьДанныеПоПравиламТрансляции(ТекИдентификатор, ТекстСообщения);	
		ЭтаФорма.Модифицированность = Истина;

		// Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		// 	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		// КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ПроводкиПриОкончанииРедактирования()

// Процедура - обработчик события "НачалоВыбора" табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
	
		Отказ = Истина;
		
		НоваяСтрока = Объект.Проводки.Добавить();
		НоваяСтрока.СчетДт = Элементы.ПроводкиСчетДт.ДоступныеТипы.ПривестиЗначение(НоваяСтрока.СчетДт);
		НоваяСтрока.СчетКт = Элементы.ПроводкиСчетКт.ДоступныеТипы.ПривестиЗначение(НоваяСтрока.СчетКт);
	
	КонецЕсли;
	
КонецПроцедуры // ПроводкиПередНачаломДобавления()

// Процедура - обработчик события "НачалоВыбора" полей ввода "СчетДт" и "СчетКт" 
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = ПолучитьИмяРеквизита(Элемент.Имя);
	
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
	Если ТекущиеДанные[ИмяРеквизита] = Неопределено Тогда
		ТекущиеДанные[ИмяРеквизита] = Элемент.ДоступныеТипы.ПривестиЗначение(ТекущиеДанные[ИмяРеквизита]);
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("ТекущиеДанные", ТекущиеДанные);
	СтруктураДопПараметров.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	ВыбратьСчетНемодально(Новый ОписаниеОповещения("ПроводкиСчетНачалоВыбораЗавершение", ЭтотОбъект, СтруктураДопПараметров), фКэшЗначений.МассивДоступныхСчетов);
	
КонецПроцедуры // ПроводкиСчетНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетДт" или поля ввода "СчетКт" 
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиСчетПриИзменении(Элемент)
	
	Идентификатор = Элементы.Проводки.ТекущиеДанные.ПолучитьИдентификатор();	
	ИмяРеквизита  = ПолучитьИмяРеквизита(Элемент.Имя);
	
	ИзменениеСчетаТабличноеПоле(Идентификатор, Прав(ИмяРеквизита, 2));
			
КонецПроцедуры // ПроводкиСчетДтПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ВалютаДт или ВалютаКт
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
	
	ИмяРеквизита = ПолучитьИмяРеквизита(Элемент.Имя);
	фКэшЗначений.Вставить(ИмяРеквизита, ТекущиеДанные[ИмяРеквизита]);
		
КонецПроцедуры // ПроводкиВалютаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ВалютаДт или ВалютаКт
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
	
	ИмяВалюты = ПолучитьИмяРеквизита(Элемент.Имя);
	ИмяСуммы  = СтрЗаменить(ИмяВалюты, "Валюта", "ВалютнаяСумма");
	
	ВалютаНач = фКэшЗначений[ИмяВалюты];
	ВалютаКон = ТекущиеДанные[ИмяВалюты];
		
	Если ТекущиеДанные[ИмяСуммы] <> 0 И ВалютаНач <> ВалютаКон Тогда		
		ПересчитатьСуммуПоВалютеДляСтроки(ТекущиеДанные.ПолучитьИдентификатор(), ИмяСуммы, ВалютаНач, ВалютаКон);			
	КонецЕсли; 
	
КонецПроцедуры // ПроводкиВалютаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Субконто*" 
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
	ИмяРеквизита  = ПолучитьИмяРеквизита(Элемент.Имя);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец", Объект.Организация);
	
	НачалоВыбораРеквизитаЗаписи(Элемент, СтандартнаяОбработка, СтруктураПараметров, ТекущиеДанные[ИмяРеквизита]);
		
КонецПроцедуры // ПроводкиПодразделениеНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Субконто*" 
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
	ИмяСубконто   = Лев(ПолучитьИмяРеквизита(Элемент.Имя), 11);
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, Элемент.Имя);		
	ИзменениеСубконто(Элементы.Проводки.ТекущиеДанные, ЗначениеСубконто, ИмяСубконто);
	
КонецПроцедуры // ПроводкиСубконтоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Субконто*" 
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
	ИмяСубконто   = Лев(ПолучитьИмяРеквизита(Элемент.Имя), 11);
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, Элемент.Имя);		
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, ТекущиеДанные, ЗначениеСубконто, ИмяСубконто);
	
КонецПроцедуры // ПроводкиСубконтоНачалоВыбора()

// Процедура - обработчик события "АвтоПодбор" поля ввода "Субконто*"
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
	ИмяСубконто   = ПолучитьИмяРеквизита(Элемент.Имя);
	
	ЗначениеСубконто = ТекущиеДанные[ИмяСубконто];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
													 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , Лев(ИмяСубконто, 11)
													 , ЗначениеСубконто
													 , фКоличествоСубконто
													 , Ложь);

КонецПроцедуры // ПроводкиСубконтоАвтоПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма" 
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиСуммаПриИзменении(Элемент)
	
	ИзменениеСуммыСтроки(Элемент.Имя, фКэшЗначений.ВалютаРеглУчета);
	
КонецПроцедуры // ПроводкиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ВалютнаяСуммаДт
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиВалютнаяСуммаДтПриИзменении(Элемент)
	
	ИзменениеСуммыСтроки(Элемент.Имя, "ВалютаДт");
	
КонецПроцедуры // ПроводкиВалютнаяСуммаДтПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ВалютнаяСуммаКт
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиВалютнаяСуммаКтПриИзменении(Элемент)
	
	ИзменениеСуммыСтроки(Элемент.Имя, "ВалютаКт");
 	
КонецПроцедуры // ПроводкиВалютнаяСуммаКтПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаМУ" 
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиСуммаМУПриИзменении(Элемент)
	
	ИзменениеСуммыСтроки(Элемент.Имя, фКэшЗначений.ВалютаМСФО);
   	                              	
КонецПроцедуры // ПроводкиСуммаМУПриИзменении() 

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаУпр" 
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиСуммаУпрПриИзменении(Элемент)
	                         
	ИзменениеСуммыСтроки(Элемент.Имя, фКэшЗначений.ВалютаУпрлУчета);
			
КонецПроцедуры // ПроводкиСуммаУпрПриИзменении()  

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаРегл" 
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиСуммаРеглПриИзменении(Элемент)
	
	ИзменениеСуммыСтроки(Элемент.Имя, фКэшЗначений.ВалютаРеглУчета);
	
КонецПроцедуры // ПроводкиСуммаРеглПриИзменении()  

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаСценарий" 
// табличного поля "Проводки".
// 
&НаКлиенте
Процедура ПроводкиСуммаСценарийПриИзменении(Элемент)
	
	// ВалютаСценария = Объект.Сценарий.Валюта;
	ИзменениеСуммыСтроки(Элемент.Имя, фКэшЗначений.ВалютаСценария);
	
КонецПроцедуры // ПроводкиСуммаСценарийПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьФормуПоДаннымОбъекта()

	// Имя регистра бухгалтерии
	УстановитьИмяРегистраБухгалтерии();
	
	// Заполним валюту МСФО.
	УстановитьВалютуДокумента();
	ЗаполнитьДекорациюВалютыМСФО();

	// Установить видимость реквизитов и заголовков колонок.	
	УстановитьВидимостьДоступностьПоРегиструБухгалтерии();
	УстановитьДоступностьТч();
	
КонецПроцедуры // ОбновитьФормуПоДаннымОбъекта()

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Метаданные.Документы.бит_вго_ПротоколРасхождений.ПредставлениеОбъекта);
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + Метаданные.Документы.бит_вго_ПротоколРасхождений.Имя);
		
	// Валюты регламентированного и управленческого учетов, МСВО и сценария.
	фКэшЗначений.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	фКэшЗначений.Вставить("ВалютаУпрлУчета", Константы.бит_ВалютаУправленческогоУчета.Получить());
	фКэшЗначений.Вставить("ВалютаМСФО"	   , ПолучитьВалютуМСФО());
	фКэшЗначений.Вставить("ВалютаСценария" , ПолучитьВалютуСценария());
	 	
	Если ЗначениеЗаполнено(Объект.НастройкаАктаСверки) Тогда
		// Массив счетов расчетов по настройке 
		ПолучитьСчетаДляФильтров();
	КонецЕсли;
	
	// Инициализация структуры кэша реквизитов строки тч.
	КэшРеквизитовСтроки = Новый Структура;
	Для каждого РеквизитТч Из Метаданные.Документы[Метаданные.Документы.бит_вго_ПротоколРасхождений.Имя].ТабличныеЧасти.Проводки.Реквизиты Цикл
		КэшРеквизитовСтроки.Вставить(РеквизитТч.Имя);
	КонецЦикла;
	фКэшЗначений.Вставить("КэшРеквизитовСтроки", КэшРеквизитовСтроки);
	
	
	// Перечисления
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_вго_ТипыОперацийВГО", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_вго_ТипыОперацийВГО));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере 
Функция ПолучитьВалютуМСФО()
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	Возврат ВалютаМСФО;
	
КонецФункции // ПолучитьВалютуМСФО()

&НаСервере 
Функция ПолучитьВалютуСценария()
	
	// Получим валюту сценария.
	ВалютаСценария = ?(ЗначениеЗаполнено(Объект.Сценарий), Объект.Сценарий.Валюта, Справочники.Валюты.ПустаяСсылка());
		
	Возврат ВалютаСценария;
	
КонецФункции // ПолучитьВалютуСценария()

&НаСервере 
Процедура ЗаполнитьДекорациюВалютыМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьДекорациюВалютыМСФО()

&НаСервере 
Процедура УстановитьДоступностьТч()
	
	ЭтотРегистр_Бюд = ИмяРегистраБухгалтерии = "бит_Бюджетирование";
	
	Элементы.ГруппаПроводки.ТолькоПросмотр = Не ЗначениеЗаполнено(Объект.НастройкаАктаСверки)
												ИЛИ Не ЗначениеЗаполнено(Объект.РегистрБухгалтерии)
												// ИЛИ Не ЗначениеЗаполнено(Объект.ОрганизацияКонсолидирующая).
												ИЛИ Не ЗначениеЗаполнено(Объект.Организация) 
												ИЛИ Не ЗначениеЗаполнено(Объект.Контрагент)
												ИЛИ (ЭтотРегистр_Бюд И Не ЗначениеЗаполнено(Объект.Сценарий));
			
КонецПроцедуры // УстановитьДоступностьТч()

&НаСервере 
Процедура УстановитьВидимостьДоступностьПоРегиструБухгалтерии()
	
	ЭтотРегистр_Бюд = Ложь;
	
	Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		
		// Настройки видимости
		ЭтотРегистр_Хоз = ИмяРегистраБухгалтерии = "Хозрасчетный";
		ЭтотРегистр_Бюд = ИмяРегистраБухгалтерии = "бит_Бюджетирование";
		ЭтотРегистр_Упр = ИмяРегистраБухгалтерии = "бит_Дополнительный_1";
		ЭтотРегистр_Меж = ИмяРегистраБухгалтерии = "бит_Дополнительный_2"; 		
		
		// Видимость элементов формы
		// Общие группы
		Элементы.ПроводкиГруппаПоРегиструБухгалтерии.Видимость 	= Истина;
		Элементы.ГруппаСуммыДокумента.Видимость 			   	= Истина;
		Элементы.ГруппаСценарий.Видимость 						= ЭтотРегистр_Бюд;
		Элементы.ГруппаВалютаМСФО.Видимость						= ЭтотРегистр_Меж;
		// Суммы в шапке
		Элементы.ГруппаСуммаДокумента.Видимость    	= ЭтотРегистр_Хоз;
		Элементы.ГруппаСуммыДокументаБИТ.Видимость 	= Не ЭтотРегистр_Хоз;
		Элементы.СуммаСценарий.Видимость 			= ЭтотРегистр_Бюд;
		Элементы.СуммаМУ.Видимость 					= ЭтотРегистр_Меж;
		// Суммы в табличной части
		Элементы.ПроводкиГруппаСумма.Видимость 		= ЭтотРегистр_Хоз;
		Элементы.ПроводкиГруппаСуммыБИТ.Видимость 	= Не ЭтотРегистр_Хоз;
		Элементы.ПроводкиСуммаСценарий.Видимость    = ЭтотРегистр_Бюд;
		Элементы.ПроводкиСуммаМУ.Видимость          = ЭтотРегистр_Меж;
		// Измерения в табличной части  		
		Элементы.ПроводкиГруппаЦФО.Видимость 		= ЭтотРегистр_Бюд;		
		Элементы.ПроводкиПодразделениеДт.Видимость 	= ЭтотРегистр_Хоз;
		Элементы.ПроводкиПодразделениеКт.Видимость 	= ЭтотРегистр_Хоз;
		
		// Авто отметки незаполненных
		Элементы.Организация.АвтоОтметкаНезаполненного  = Не ЭтотРегистр_Бюд;
		Элементы.Сценарий.АвтоОтметкаНезаполненного 	= ЭтотРегистр_Бюд;
			
	Иначе
		
		// Видимость элементов формы
		Элементы.ПроводкиГруппаПоРегиструБухгалтерии.Видимость 	= Ложь;
		Элементы.ГруппаСуммыДокумента.Видимость 			   	= Ложь;
		Элементы.ГруппаСценарий.Видимость 					   	= Ложь;
		Элементы.ГруппаВалютаМСФО.Видимость					   	= Ложь;
				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сценарий) И Не ЭтотРегистр_Бюд Тогда
		ИмяСправочникаСценарий = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
		Объект.Сценарий = Справочники[ИмяСправочникаСценарий].ПустаяСсылка();
	КонецЕсли;
			
КонецПроцедуры // УстановитьВидимостьДоступностьПоРегиструБухгалтерии()

&НаСервере
Процедура УстановитьИмяРегистраБухгалтерии()

Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		
		ИмяРегистраБухгалтерии = Объект.РегистрБухгалтерии.ИмяОбъекта;
		ИмяПланаСчетов 		   = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;
		МетаданныеПланаСчетов  = Метаданные.ПланыСчетов[ИмяПланаСчетов];
		
		// ФМаксКоличествоСубконто = МетаданныеПланаСчетов.МаксКоличествоСубконто;
		
	Иначе
		
		ИмяРегистраБухгалтерии  = "";
		ИмяПланаСчетов 			= "";
		// ФМаксКоличествоСубконто = 0;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьИмяРегистраБухгалтерии()

&НаСервере
Процедура УстановитьВалютуДокумента()

	ЭтотРегистр_Хоз 	= ИмяРегистраБухгалтерии = "Хозрасчетный";
	ЭтотРегистр_Бюд 	= ИмяРегистраБухгалтерии = "бит_Бюджетирование";
	ЭтотРегистр_Меж 	= ИмяРегистраБухгалтерии = "бит_Дополнительный_2";
	
	Если ЭтотРегистр_Хоз Тогда
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаРеглУчета;	
	ИначеЕсли ЭтотРегистр_Бюд Тогда
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаСценария;	
	ИначеЕсли ЭтотРегистр_Меж Тогда
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;	
	Иначе
	    Объект.ВалютаДокумента = фКэшЗначений.ВалютаУпрлУчета;
	КонецЕсли;   	

КонецПроцедуры // УстановитьВалютуДокумента()

&НаСервере
Процедура ПолучитьСчетаДляФильтров()

	СтруктураСчетов = бит_вго_Сервер.СчетаФильтрации(Объект.НастройкаАктаСверки);
	 				
	фКэшЗначений.Вставить("МассивСчетовРасчетов" , СтруктураСчетов.МассивСчетовРасчетов);
	фКэшЗначений.Вставить("МассивДоступныхСчетов", СтруктураСчетов.МассивДоступныхСчетов);
	фКэшЗначений.Вставить("МассивСчетовОборотов" , СтруктураСчетов.МассивСчетовОборотов);
	фКэшЗначений.Вставить("МассивСчетовОплаты"   , СтруктураСчетов.МассивСчетовОплаты);
		
КонецПроцедуры

&НаСервере
Процедура ИзменениеНастройкиСервер()

	Настройка = Объект.НастройкаАктаСверки;
	
	Объект.Проводки.Очистить();
	          	
	Если Объект.РегистрБухгалтерии <> Настройка.РегистрБухгалтерии Тогда
		Объект.РегистрБухгалтерии 	  = Настройка.РегистрБухгалтерии;
		ИзменениеРегистраБухгалтерииСервер();	
	КонецЕсли;	
	
	ПолучитьСчетаДляФильтров();
	
	УстановитьДоступностьТч();
			
КонецПроцедуры // ИзменениеНастройкиСервер()

&НаСервере
Процедура ИзменениеРегистраБухгалтерииСервер()

	УстановитьИмяРегистраБухгалтерии();
	
	УстановитьВалютуДокумента();
	
	УстановитьВидимостьДоступностьПоРегиструБухгалтерии();
	ОформитьСчета();
		
КонецПроцедуры // ИзменениеРегистраБухгалтерииСервер()

&НаСервере
Процедура ИзменениеОрганизацииСервер(ПересчитыватьСуммыМСФО, СтараяВалютаМСФО, ТекВалютаМСФО)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));			
   	ДокументОбъект.ВыполнитьДействияПриИзмененииОрганизации();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Заполним декорацию валюты МСФО
	фКэшЗначений.Вставить("ВалютаМСФО", ТекВалютаМСФО);
	ЗаполнитьДекорациюВалютыМСФО();
	
	УстановитьВалютуДокумента();
	
	// Действия при изменение валюты МСФО
	Если ПересчитыватьСуммыМСФО Тогда
		ПересчитатьСуммыПоВалютам("СуммаМУ", СтараяВалютаМСФО, ТекВалютаМСФО);
	Иначе
		ВосстановитьНастройкиОформленияПоСчету();	
	КонецЕсли; 
	
	УстановитьДоступностьТч();  	
		
КонецПроцедуры // ИзменениеОрганизацииСервер()

&НаСервере
Процедура ИзменениеКонтрагентаСервер()

	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));			
	ДокументОбъект.ВыполнитьДействияПриИзмененииКонтрагента();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ВосстановитьНастройкиОформленияПоСчету();
	УстановитьДоступностьТч();	

КонецПроцедуры // ИзменениеКонтрагентаСервер()

&НаСервере
Процедура УстановитьДанныеПоПравиламТрансляции(ТекИдентификатор, ТекстСообщения = Неопределено)
	
	ТекущиеДанные = Объект.Проводки.НайтиПоИдентификатору(ТекИдентификатор);
	
	Если ТекущиеДанные.РучноеИзменениеОперацииВГО Тогда
		Возврат;	
	КонецЕсли;
			
	// Определяем максимальное количество субконто источника и приемника.
	ИмяПланаСчетовИсточник     = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;
	КоличествоСубконтоИсточник = Метаданные.ПланыСчетов[ИмяПланаСчетов].МаксКоличествоСубконто;
	КоличествоСубконтоПриемник = 4;
	
	СтруктураПараметров = Новый Структура;	
	
	СтруктураПараметров.Вставить("СчетДт", ТекущиеДанные.СчетДт);
	СтруктураПараметров.Вставить("СчетКт", ТекущиеДанные.СчетКт);
	Для i = 1 По КоличествоСубконтоИсточник Цикл
		Попытка
			СтруктураПараметров.Вставить("СубконтоДт" + i , ТекущиеДанные["СубконтоДт_" + i]);
		Исключение
		   	СтруктураПараметров.Вставить("СубконтоДт" + i , Неопределено);
		КонецПопытки;
		Попытка
			СтруктураПараметров.Вставить("СубконтоКт" + i , ТекущиеДанные["СубконтоКт_" + i]);
		Исключение
		   	СтруктураПараметров.Вставить("СубконтоКт" + i , Неопределено);
		КонецПопытки;
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ИмяРегистраБухгалтерии", ИмяРегистраБухгалтерии);
	СтруктураПараметров.Вставить("ИмяПланаСчетовИсточник", ИмяПланаСчетовИсточник);
	СтруктураПараметров.Вставить("КоличествоСубконтоИсточник", КоличествоСубконтоИсточник);
	СтруктураПараметров.Вставить("КоличествоСубконтоПриемник", КоличествоСубконтоПриемник);
	// ----------------------------------------------------------------------
	РезСтруктура = бит_вго_Сервер.ВыполнитьПодборСчетов(СтруктураПараметров                                                 
							   , Объект.Ссылка
							   , Объект.Организация
							   , Объект.Дата);
							   
	// Заполнение данных по найденным правилам трансляции.
	ЗаполнятьОперацию = Истина;
			
	Если ЗначениеЗаполнено(РезСтруктура.ОперацияВГО) Тогда
		
		ДтКт = ?(ТекущиеДанные.ЭтоСчетРасчетовДт, "Кт", "Дт"); 		
		ЭтоОбороты = фКэшЗначений.МассивСчетовОборотов.Найти(ТекущиеДанные["Счет" + ДтКт]) <> Неопределено;
		
		// Обороты должны соответствовоать начислению задолженности, а данные оплаты - погашению.
		Если ЭтоОбороты Тогда		
			Если ТекущиеДанные.ОперацияВГО.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.ПогашениеЗадолженности Тогда
				ЗаполнятьОперацию = Ложь;
			КонецЕсли; 		
		Иначе
			Если ТекущиеДанные.ОперацияВГО.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.НачислениеЗадолженности Тогда
				// ТекущиеДанные.НекорректнаяОперация = Истина;
			ИначеЕсли ТекущиеДанные.ОперацияВГО.ВидОперации = Перечисления.бит_вго_ВидыОперацийВГО.Техническая Тогда
				ЗаполнятьОперацию = Ложь;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Если ЗаполнятьОперацию Тогда
	 	ТекущиеДанные.ОперацияВГО = РезСтруктура.ОперацияВГО;
	КонецЕсли;
		 	
КонецПроцедуры // УстановитьДанныеПоПравиламТрансляции()

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Процедура выбирает счет
// 
&НаКлиенте
Процедура ВыбратьСчетНемодально(Знач Оповещение, МассивСчетов)
	
	мВыбранныйСчет = Неопределено;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", МассивСчетов));
	
	Обработчик = Новый ОписаниеОповещения("ВыбратьСчетЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ПланСчетов." + ИмяПланаСчетов + ".ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Обработчик, Режим);
		
КонецПроцедуры // ВыбратьСчет()

// Процедура завершает выбор счета
// 
&НаКлиенте
Процедура ВыбратьСчетЗавершение(ВыбранныйСчет, Параметры) Экспорт
	
	мВыбранныйСчет = ВыбранныйСчет;	
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение);
	
КонецПроцедуры

// Процедура завершает выбор счета в проводке.
// 
&НаКлиенте
Процедура ПроводкиСчетНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбранныйСчет = мВыбранныйСчет;
	
	Если ЗначениеЗаполнено(ВыбранныйСчет) Тогда
		ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныйСчет;	 
	КонецЕсли;  
	
	ИзменениеСчетаТабличноеПоле(ДополнительныеПараметры.ТекущиеДанные.ПолучитьИдентификатор(), Прав(ДополнительныеПараметры.ИмяРеквизита, 2));
	
КонецПроцедуры // ПроводкиСчетНачалоВыбораЗавершение()

// Процедура - завершение изменения даты
// 
&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(Ответ, СтараяДата) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчитатьВалютныеСуммыПоДате(СтараяДата);
	Иначе
		ИзвлечьИзКэша("Дата");
	КонецЕсли;
	
	ДобавитьВКэш("Дата");
	
КонецПроцедуры

// Процедура - завершение изменения реквизита НастройкаАктаСверки.
// 
&НаКлиенте
Процедура НастройкаАктаСверкиПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	НужноОчистить = Ответ = КодВозвратаДиалога.Да;
	
	Если НужноОчистить Тогда
		ИзменениеНастройкиСервер();
		ДобавитьВКэш("НастройкаАктаСверки");
		ДобавитьВКэш("РегистрБухгалтерии");
	Иначе
		ИзвлечьИзКэша("НастройкаАктаСверки");	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - завершение изменения реквизита Организация.
// 
&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(Ответ, СтруктураДопПараметров) Экспорт
	
	ИзменитьОрганизацию = Истина;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ИзменитьОрганизацию = Ложь;			  
	КонецЕсли;
	
	Если ИзменитьОрганизацию Тогда
		ИзменениеОрганизацииСервер(СтруктураДопПараметров.ПересчитыватьСуммыМСФО, СтруктураДопПараметров.СтараяВалютаМСФО, СтруктураДопПараметров.ТекВалютаМСФО);
		ДобавитьВКэш("Организация");
	Иначе	
		ИзвлечьИзКэша("Организация");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - завершение изменения реквизита Контрагент.
// 
&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИзменитьКонтрагента = Истина;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ИзменитьКонтрагента = Ложь;			  
	КонецЕсли;
	
	Если ИзменитьКонтрагента Тогда
		ИзменениеКонтрагентаСервер();
		ДобавитьВКэш("Контрагент");
	Иначе	
		ИзвлечьИзКэша("Контрагент");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - завершение изменения реквизита Сценарий.
// 
&НаКлиенте
Процедура СценарийПриИзмененииЗавершение(Ответ, СтруктураДопПараметров) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчитатьСуммыПоВалютам("СуммаСценарий", СтруктураДопПараметров.СтараяВалютаСценария, СтруктураДопПараметров.ТекВалютаСценария);
		фКэшЗначений.Вставить("ВалютаСценария", СтруктураДопПараметров.ТекВалютаСценария);
		Объект.ВалютаДокумента = СтруктураДопПараметров.ТекВалютаСценария;
	Иначе	
		ИзвлечьИзКэша("Сценарий");
	КонецЕсли;
	
	УстановитьДоступностьТч();
		
	ДобавитьВКэш("Сценарий");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ПроводкиСчетДт);
	МассивЭлементов.Добавить(Элементы.ПроводкиСчетКт);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаКлиенте
Функция ПолучитьИмяРеквизита(ИмяЭлемента)

	ИмяРеквизита  = СтрЗаменить(ИмяЭлемента, "Проводки", "");

	Возврат ИмяРеквизита;
	
КонецФункции // ПолучитьИмяРеквизита()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ИмяРеквизита      = ПолучитьИмяРеквизита(ИмяЭлемента);
		ЗначениеСубконто  = ТекущиеДанные[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура ИзменениеСубконто(Контейнер, ЗначениеСубконто, ИмяСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, ИмяСубконто , фКоличествоСубконто);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, ИмяСубконто, ЗначениеСубконто  , фКоличествоСубконто);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, ИмяСубконто, ""  , фКоличествоСубконто);																   

КонецПроцедуры // ИзменениеСубконто()

&НаКлиенте
Процедура НачалоВыбораРеквизитаЗаписи(Элемент, СтандартнаяОбработка, СтруктураПараметров, ЗначениеРеквизита)
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеРеквизита
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораРеквизитаЗаписи()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто, ИмяСубконто)
	
	ТипЭлемента = ТипЗнч(ЗначениеСубконто);																					  
	Если ТипЭлемента = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
		ТекущиеДанные[ПолучитьИмяРеквизита(Элемент.Имя)] = Объект.Контрагент;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,ИмяСубконто
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконто);	
	
																						  
	Если ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 	 	
		СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПараметров.Вставить("Владелец"  , Объект.Контрагент);
	КонецЕсли;
	
	НачалоВыбораРеквизитаЗаписи(Элемент, СтандартнаяОбработка, СтруктураПараметров, ЗначениеСубконто); 
	
КонецПроцедуры // НачалоВыбораСубконто()

&НаКлиенте
Процедура ИзменениеСуммыСтроки(ИмяЭлемента, Валюта)
	
	ТекущиеДанные = Элементы.Проводки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = Объект.Проводки.Индекс(ТекущиеДанные);
	
	ИмяРесурса = ПолучитьИмяРеквизита(ИмяЭлемента);
	Если ТипЗнч(Валюта) = Тип("Строка") Тогда
		Валюта = ТекущиеДанные[Валюта];
	КонецЕсли;
	
	// Выполним расчет сумм в текущей строке.
	ВыполнитьРасчетСуммВТекущейСтрокеСервер(ИндексСтроки, ИмяРесурса, Валюта);
	                		                              	
КонецПроцедуры // ИзменениеСуммыСтроки()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

#КонецОбласти

#Область ОформлениеСчетовИСубконто

&НаСервере
Процедура УстановитьПараметрыОформленияПоСчету(СтрокаТаблицы, ИмяСчета)

	Постфикс = СтрЗаменить(ИмяСчета, "Счет", "");
	
	ТекущийСчет = СтрокаТаблицы[ИмяСчета];
	Если ТекущийСчет <> Неопределено Тогда
        
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущийСчет);
        
		// Количество доступных субконто
		СтрокаТаблицы["КоличествоДоступныхСубконто" + Постфикс] = СвСч.КоличествоСубконто;   
        
		// Счет валютный
		СтрокаТаблицы[ИмяСчета + "Валютный"] = СвСч.Валютный;
		Если Не СвСч.Валютный Тогда
        	СтрокаТаблицы["Валюта" + Постфикс] 		  = Неопределено;
			СтрокаТаблицы["ВалютнаяСумма" + Постфикс] = 0;
       	КонецЕсли;
		
		// Счет количественный
		СтрокаТаблицы[ИмяСчета + "Количественный"] = СвСч.Количественный;
		Если Не СвСч.Количественный Тогда
        	СтрокаТаблицы["Количество" + Постфикс] = 0;
       	КонецЕсли;
		
		Если ИмяРегистраБухгалтерии = "Хозрасчетный" Тогда
			// Счет использует учет по подразделениям
			СтрокаТаблицы[ИмяСчета + "УчетПоПодразделениям"] = СвСч.УчетПоПодразделениям;
			Если Не СвСч.УчетПоПодразделениям Тогда
            	СтрокаТаблицы["Подразделение" + Постфикс] = Неопределено;
   	    	КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 	
 	
КонецПроцедуры // УстановитьПараметрыОформленияПоСчету()
		
&НаСервере
Процедура ОформитьСчета()
	
	Если Не ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТипаДляСчетов = "ПланСчетовСсылка." + ИмяПланаСчетов;
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип(ИмяТипаДляСчетов));
	ОписаниеТиповСчета = Новый ОписаниеТипов(МассивТипов);
	
	Элементы.ПроводкиСчетДт.ВыбиратьТип   = Ложь;
	Элементы.ПроводкиСчетДт.ДоступныеТипы = ОписаниеТиповСчета;
	
	Элементы.ПроводкиСчетКт.ВыбиратьТип   = Ложь;
	Элементы.ПроводкиСчетКт.ДоступныеТипы = ОписаниеТиповСчета;

КонецПроцедуры // ОформитьСчета()

&НаСервере 
Процедура ОформитьРеквизитыПоСчету(ИмяСчета)
	 	
	Постфикс 			   = СтрЗаменить(ИмяСчета, "Счет", "");
	ИмяКоличестваДоступных = "КоличествоДоступныхСубконто" + Постфикс;
	ИмяСубконто			   = "Субконто" + Постфикс + "_";
	
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	 											  ,ИмяСчета
												  ,ИмяСубконто
												  ,фКоличествоСубконто
												  ,"Проводки"
												  ,"Элементы.Проводки.ТекущиеДанные");
												  
	// Восстанавливаем настройки субконто, валюты, валютной суммы в зависимости от счета учета.
	Для каждого СтрокаТаблицы Из Объект.Проводки Цикл
		УстановитьПараметрыОформленияПоСчету(СтрокаТаблицы, ИмяСчета);
	КонецЦикла; 

	// Настройки оформления для полей субконто
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   ,"Проводки"
															   ,ИмяСубконто
															   ,ИмяКоличестваДоступных
															   ,фКоличествоСубконто);
															   
	// Настройки оформления для остальных полей по счету.
	бит_БухгалтерияСервер.УстановитьОформлениеПолейПоСчету(УсловноеОформление, "Проводки", Постфикс);										
																	
КонецПроцедуры // ОформитьРеквизитыПоСчету()

&НаСервере 
Процедура ОформитьРеквизиты()

	// Удалить старое оформление таблицы
	бит_РаботаСДиалогамиСервер.УдалитьЭлементыОформленияПоПредставлению("Оформление субконто таблицы" , УсловноеОформление);
	бит_РаботаСДиалогамиСервер.УдалитьЭлементыОформленияПоПредставлению("Оформление полей по счету"   , УсловноеОформление);
	
	// Установить оформление и связи
	ОформитьРеквизитыПоСчету("СчетДт");
	ОформитьРеквизитыПоСчету("СчетКт");
	
КонецПроцедуры // ОформитьСубконто()

&НаСервере
Процедура ВосстановитьНастройкиОформленияПоСчету()

	Для каждого СтрокаТаблицы Из Объект.Проводки Цикл
		
		УстановитьПараметрыОформленияПоСчету(СтрокаТаблицы, "СчетДт");
		УстановитьПараметрыОформленияПоСчету(СтрокаТаблицы, "СчетКт");
		
	КонецЦикла;	

КонецПроцедуры // ВосстановитьНастройкиОформленияПоСчету()

&НаСервере
Процедура ИзменениеСчетаТабличноеПоле(Идентификатор, ДтКт)
	
	ИмяСчета = "Счет" + ДтКт;
	ИмяСубконто = "Субконто" + ДтКт + "_";
	
	ТекущиеДанные = Объект.Проводки.НайтиПоИдентификатору(Идентификатор);
	
	// Признак - это счет расчетов
	ТекущиеДанные["ЭтоСчетРасчетов" + ДтКт] = фКэшЗначений.МассивСчетовРасчетов.Найти(ТекущиеДанные[ИмяСчета]) <> Неопределено;

	// Настройки субконто
	Если ЗначениеЗаполнено(ТекущиеДанные[ИмяСчета]) Тогда
		НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущиеДанные[ИмяСчета], фКоличествоСубконто);									  
    	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущиеДанные, НастройкиСубконто, ИмяСубконто);
	КонецЕсли;
	
	УстановитьПараметрыОформленияПоСчету(ТекущиеДанные, ИмяСчета);	
		
КонецПроцедуры // ИзменениеСчетаТабличноеПоле()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииПересчетаСуммТабличнойЧасти

&НаСервере
Процедура ВыполнитьРасчетСуммВТекущейСтрокеСервер(ИндексСтроки, ИмяРесурса, Валюта)
	
	СтруктураВалют = Новый Структура("ВалютаДляПересчета, ВалютаМСФО, ВалютаРеглУчета, ВалютаУпрлУчета",
									Валюта, 
									фКэшЗначений.ВалютаМСФО,
									фКэшЗначений.ВалютаРеглУчета,
									фКэшЗначений.ВалютаУпрлУчета);
									
	// Обращение к модулю объекта
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));	
	ДокументОбъект.ВыполнитьРасчетСуммВТекущейСтроке(ИндексСтроки, СтруктураВалют, ИмяРесурса); 
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ВосстановитьНастройкиОформленияПоСчету();
	
КонецПроцедуры // ВыполнитьРасчетСуммВТекущейСтрокеСервер()

&НаСервере
Процедура ПересчитатьСуммуПоВалютеДляСтроки(ИдСтроки, ИмяСуммы, ВалютаНач, ВалютаКон)

	ТекущиеДанные = Объект.Проводки.НайтиПоИдентификатору(ИдСтроки);
	
	// Обращение к модулю объекта
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));			
   	СуммаРезультат = ДокументОбъект.ПересчитатьСуммуПоНовойВалюте(ТекущиеДанные[ИмяСуммы], ВалютаНач, ВалютаКон);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ТекущиеДанные[ИмяСуммы] = СуммаРезультат;
	
	ВосстановитьНастройкиОформленияПоСчету();

КонецПроцедуры // ПересчитатьСуммуПоВалютеДляСтроки()

&НаСервере
Процедура ПересчитатьВалютныеСуммыПоДате(СтараяДата)

	// Обращение к модулю объекта
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));			
   	ДокументОбъект.ВыполнитьПерерасчетВалютныхСуммПоДатам(СтараяДата);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
    ВосстановитьНастройкиОформленияПоСчету();

КонецПроцедуры // ПересчитатьВалютныеСуммыПоДате()

&НаСервере
Процедура ПересчитатьСуммыПоВалютам(ИмяСуммы, СтараяВалюта, НоваяВалюта)
	
	// Обращение к модулю объекта
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));			
   	ДокументОбъект.ВыполнитьПерерасчетСуммПоВалютам(ИмяСуммы, СтараяВалюта, НоваяВалюта);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
    ВосстановитьНастройкиОформленияПоСчету();

КонецПроцедуры // ПересчитатьСуммыПоВалютам()

#КонецОбласти

#КонецОбласти
