#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконто; // Максимальное количество субконто.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
// 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании".
// 
Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	// Проверка даты запрета редактирования.
	ПараметрыСверки = Новый Структура("Организация1, Контрагент2", Организация, Контрагент);
	бит_вго_Сервер.ПроверитьВозможностьРедактированияДокументовСверкиВГО(Дата, ПараметрыСверки, Отказ);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		// Проверка завершения сверки.
		ПроверитьЗавершениеСверкиВГО(Отказ);	
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подсчитаем и запишем сумму документа.
	Если Лев(РегистрБухгалтерии.ИмяОбъекта, 4) = "бит_" Тогда
		СуммаДокумента = Проводки.Итог("СуммаРегл");	
	Иначе	
	    СуммаДокумента = Проводки.Итог("Сумма");
	КонецЕсли;
	 	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	

	СтруктураСчетов = бит_вго_Сервер.СчетаФильтрации(НастройкаАктаСверки);
	МассивСчетовРасчетов = СтруктураСчетов.МассивСчетовРасчетов;
	МассивСчетовОплаты   = СтруктураСчетов.МассивСчетовОплаты;
	
	// Проверка данных.
	ПроверкаДанных(МассивСчетовРасчетов, МассивСчетовОплаты, Отказ, Заголовок);
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, МассивСчетовРасчетов, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения".
// 
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(РегистрБухгалтерии) Тогда
		
		// Имя регистра бухгалтерии.
		ИмяРегистра 		= РегистрБухгалтерии.ИмяОбъекта;
		ЭтотРегистр_Хоз 	= ИмяРегистра = "Хозрасчетный";
		ЭтотРегистр_Бюд 	= ИмяРегистра = "бит_Бюджетирование";
		ЭтотРегистр_Меж 	= ИмяРегистра = "бит_Дополнительный_2";
		
		Если ЭтотРегистр_Бюд Тогда
			ПроверяемыеРеквизиты.Добавить("Сценарий");
		КонецЕсли;  		
	
	КонецЕсли;
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Пересчет валютной суммы в основную по курсу на указанную дату.
// 
// Параметры:
//  ВалютнаяСумма - Число.
//  Валюта        - СправочникСсылка.Валюты.
//  Дата          - Дата.
// 
// Возвращаемое значение:
//  Число.
// 
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата) Экспорт

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / Запись.Кратность;
	КонецЕсли;
    	
	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

// Функция пересчитывает сумму из валюты в валюту.
// 
// Параметры:
//  СуммаДляПересчета  	- Число.
//  ВалютаНач  			- СправочникСсылка.Валюты.
//  ВалютаКон  			- СправочникСсылка.Валюты.
//  СтруктураВалютыНач 	- Структура (По умолчанию = Неопределено).
//  СтруктураВалютыКон 	- Структура (По умолчанию = Неопределено).
// 
// Возвращаемое значение:
//  Число.
// 
Функция ПересчитатьСуммуПоНовойВалюте(СуммаДляПересчета, ВалютаНач, ВалютаКон, 
										СтруктураВалютыНач = Неопределено, СтруктураВалютыКон = Неопределено) Экспорт

	Если СтруктураВалютыНач = Неопределено Тогда
		СтруктураВалютыНач = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаНач, Дата);
	КонецЕсли;
	Если СтруктураВалютыКон = Неопределено Тогда
		СтруктураВалютыКон = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаКон, Дата);
	КонецЕсли;
			 
	НоваяСумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
																ВалютаНач					, ВалютаКон,
																СтруктураВалютыНач.Курс		, СтруктураВалютыКон.Курс,
																СтруктураВалютыНач.Кратность, СтруктураВалютыКон.Кратность);
											
	Возврат НоваяСумма;
	
КонецФункции // ПересчитатьСуммуПоНовойВалюте()

// Процедура выполняет расчет сумм в текущей строке.
// 
// Параметры:
//  ИдСтроки      		- Число - Идентификатор текущей строки.
//  СтруктураВалют 		- Структура.
//  ИмяЭлемента         - Строка.
// 
Процедура ВыполнитьРасчетСуммВТекущейСтроке(ИдСтроки, СтруктураВалют, ИмяЭлемента) Экспорт
										   
	ТекущиеДанные = Проводки.Получить(ИдСтроки);
	
	// Сумма для пересчета.
	СуммаДляПересчета = ТекущиеДанные[ИмяЭлемента];
	
	// Валюты
	ВалютаДляПересчета 	= СтруктураВалют.ВалютаДляПересчета;
	ВалютаМСФО 			= СтруктураВалют.ВалютаМСФО;
	ВалютаРеглУчета  	= СтруктураВалют.ВалютаРеглУчета;
	ВалютаУпрлУчета  	= СтруктураВалют.ВалютаУпрлУчета;
	
	// Имя регистра бухгалтерии.
	ИмяРегистра 		= РегистрБухгалтерии.ИмяОбъекта;
	ЭтотРегистр_Хоз 	= ИмяРегистра = "Хозрасчетный";
	ЭтотРегистр_Бюд 	= ИмяРегистра = "бит_Бюджетирование";
	ЭтотРегистр_Меж 	= ИмяРегистра = "бит_Дополнительный_2";
	ЭтоИзменениеОснСуммы = (ИмяЭлемента = "СуммаРегл" ИЛИ ИмяЭлемента = "СуммаУпр");
	ЭтоВалютнаяСумма     = Лев(ИмяЭлемента, 8) = "Валютная";
	
	// Курс и кратность по валюте пересчета
	КурсКратностьВалютыСтроки = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДляПересчета, Дата);
	
	// Сумма по регистру Хозрасчетный.
	Если ЭтотРегистр_Хоз 
		И Не ИмяЭлемента = "Сумма" 
		И ТекущиеДанные.Сумма = 0 Тогда 
		
		ТекущиеДанные.Сумма = ПересчетСуммыПоКурсу(СуммаДляПересчета, ВалютаДляПересчета, Дата);
		
	КонецЕсли;    
	
	// Сумма регламентированного учета.
	Если // Не ЭтотРегистр_Хоз И 
		ИмяЭлемента <> "СуммаРегл"
		И Не (ИмяЭлемента = "СуммаУпр" И (ЭтотРегистр_Меж ИЛИ ЭтотРегистр_Бюд) И ТекущиеДанные.СуммаРегл <> 0)
		И Не (ЭтоВалютнаяСумма И ТекущиеДанные.СуммаРегл <> 0) Тогда
		
		ТекущиеДанные.СуммаРегл = ПересчетСуммыПоКурсу(СуммаДляПересчета, ВалютаДляПересчета, Дата);
		
	КонецЕсли;
	
	// Сумма управленческого учета.
	Если // Не ЭтотРегистр_Хоз И 
		Не ИмяЭлемента = "СуммаУпр"
		И Не (ИмяЭлемента = "СуммаРегл" И ТекущиеДанные.СуммаУпр <> 0) 
		И Не (ЭтоВалютнаяСумма И ТекущиеДанные.СуммаУпр <> 0) Тогда
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда			
			ТекущиеДанные.СуммаУпр = ПересчитатьСуммуПоНовойВалюте(СуммаДляПересчета, ВалютаДляПересчета, ВалютаУпрлУчета, КурсКратностьВалютыСтроки);																		 
		Иначе
			ТекущиеДанные.СуммаУпр = 0;
		КонецЕсли;	
			
	КонецЕсли;
	
	// Сумма международного учета.
	Если ЭтотРегистр_Меж 
		И Не ((ИмяЭлемента = "СуммаРегл" Или ИмяЭлемента = "СуммаУпр") И ТекущиеДанные.СуммаМУ <> 0) 
		И Не (ЭтоВалютнаяСумма И ТекущиеДанные.СуммаМУ <> 0) Тогда
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			ТекущиеДанные.СуммаМУ = ПересчитатьСуммуПоНовойВалюте(СуммаДляПересчета, ВалютаДляПересчета, ВалютаМСФО, КурсКратностьВалютыСтроки);
		Иначе
			ТекущиеДанные.СуммаМУ = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сумма сценария.
	Если ЭтотРегистр_Бюд 
		И (Не ЭтоИзменениеОснСуммы ИЛИ (ЭтоИзменениеОснСуммы И ТекущиеДанные.СуммаСценарий = 0)) 
		И Не (ЭтоВалютнаяСумма И ТекущиеДанные.СуммаСценарий <> 0) Тогда
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
		    ТекущиеДанные.СуммаСценарий = ПересчитатьСуммуПоНовойВалюте(СуммаДляПересчета, ВалютаДляПересчета, Сценарий.Валюта, КурсКратностьВалютыСтроки);
	    Иначе
			ТекущиеДанные.СуммаСценарий = 0;
		КонецЕсли;	
		
	КонецЕсли;
	
	// Суммы валютные.
	ВыполнитьРасчетВалютныхСуммВТекущейСтроке(ИдСтроки, ВалютаДляПересчета, СуммаДляПересчета, ИмяЭлемента);
    	
КонецПроцедуры // ВыполнитьРасчетСуммВТекущейСтроке()

// Процедура выполняет расчет валютных сумм в текущей строке.
// 
// Параметры:
//  ИдСтроки      		- Число - Идентификатор текущей строки.
//  ВалютаДляПересчета 	- СправочникСсылка.Валюты.
//  СуммаДляПересчета   - Число.
//  ИмяЭлемента      	- Строка.
// 
Процедура ВыполнитьРасчетВалютныхСуммВТекущейСтроке(ИдСтроки, ВалютаДляПересчета, СуммаДляПересчета, ИмяЭлемента) Экспорт
	
	ТекущиеДанные = Проводки.Получить(ИдСтроки);
	
	КурсКратностьВалютыПересчета = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДляПересчета, Дата);
    
    СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетДт);
    СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетКт);
            
	Если ИмяЭлемента <> "ВалютнаяСуммаДт" 
		И Не (ИмяЭлемента = "ВалютнаяСуммаКт" И ТекущиеДанные.ВалютнаяСуммаДт <> 0)
		И ЗначениеЗаполнено(ТекущиеДанные.СчетДт) 
		И СвСчДт.Валютный 
		И ТекущиеДанные.ВалютнаяСуммаДт = 0 Тогда

		КурсКратностьВалютыСтроки = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаДт, Дата);	
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			ТекущиеДанные.ВалютнаяСуммаДт = ПересчитатьСуммуПоНовойВалюте(СуммаДляПересчета, ВалютаДляПересчета, ТекущиеДанные.ВалютаДт
																			,КурсКратностьВалютыПересчета, КурсКратностьВалютыСтроки);
		Иначе
			ТекущиеДанные.ВалютнаяСуммаДт = 0;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ИмяЭлемента <> "ВалютнаяСуммаКт"
		И Не (ИмяЭлемента = "ВалютнаяСуммаДт" И ТекущиеДанные.ВалютнаяСуммаКт <> 0)
		И ЗначениеЗаполнено(ТекущиеДанные.СчетКт) 
		И СвСчКт.Валютный
		И ТекущиеДанные.ВалютнаяСуммаКт = 0 Тогда
		
		КурсКратностьВалютыСтроки = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаКт, Дата);
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			ТекущиеДанные.ВалютнаяСуммаКт = ПересчитатьСуммуПоНовойВалюте(СуммаДляПересчета, ВалютаДляПересчета, ТекущиеДанные.ВалютаКт
																			,КурсКратностьВалютыПересчета, КурсКратностьВалютыСтроки);
		Иначе
			ТекущиеДанные.ВалютнаяСуммаКт = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьРасчетВалютныхСуммВТекущейСтроке()

// Процедура пересчитывает валютные суммы в табличной части.
// 
// Параметры:
//  СтараяДата - Дата.
// 
Процедура ВыполнитьПерерасчетВалютныхСуммПоДатам(СтараяДата) Экспорт

	СоответствиеВалют = Новый Соответствие;
	
	МассивВалютДт = Проводки.ВыгрузитьКолонку("ВалютаДт");
	МассивВалютКт = Проводки.ВыгрузитьКолонку("ВалютаКт");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтараяДата"	 , СтараяДата);
	Запрос.УстановитьПараметр("НоваяДата" 	 , Дата);
	Запрос.УстановитьПараметр("МассивВалютДт", МассивВалютДт);
	Запрос.УстановитьПараметр("МассивВалютКт", МассивВалютКт);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсыСтарые.Валюта,
	|	ВЫБОР КОГДА КурсыНовые.Курс = 0 
	|		ТОГДА 0
	|		ИНАЧЕ КурсыСтарые.Курс / ЕСТЬNULL(КурсыСтарые.Кратность, 1) / (КурсыНовые.Курс / ЕСТЬNULL(КурсыНовые.Кратность, 1))
	|	КОНЕЦ КАК МножительПересчета
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&СтараяДата, 
	|												Валюта В (&МассивВалютДт)ИЛИ Валюта В (&МассивВалютКт)) КАК КурсыСтарые
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НоваяДата, 
	|																Валюта В (&МассивВалютДт) ИЛИ Валюта В (&МассивВалютКт)) КАК КурсыНовые
	|		ПО КурсыСтарые.Валюта = КурсыНовые.Валюта
	|";
	Результат = Запрос.Выполнить();	
	ТаблицаВалют = Результат.Выгрузить();	
		
	Для каждого СтрокаТч Из Проводки Цикл
		
		НомерСтр = СтрокаТч.НомерСтроки;
				
		ПересчитатьВалютнуюСуммуПоТаблицеВалют(СтрокаТч.ВалютнаяСуммаДт, СтрокаТч.ВалютаДт, ТаблицаВалют, НомерСтр);
		ПересчитатьВалютнуюСуммуПоТаблицеВалют(СтрокаТч.ВалютнаяСуммаКт, СтрокаТч.ВалютаКт, ТаблицаВалют, НомерСтр);
		     		
	КонецЦикла; 	

КонецПроцедуры // ВыполнитьПерерасчетВалютныхСумм()

// Процедура пересчитывает валютные суммы в табличной части по валютам.
// 
// Параметры:
//  ИмяСуммы  - Строка.
//  ВалютаНач - СправочникСсылка.Валюты.
//  ВалютаКон - СправочникСсылка.Валюты.
// 
Процедура ВыполнитьПерерасчетСуммПоВалютам(ИмяСуммы, ВалютаНач, ВалютаКон) Экспорт

	СтруктураВалютыНач = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаНач, Дата);
	СтруктураВалютыКон = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаКон, Дата);
	
	Для каждого СтрокаТч Из Проводки Цикл
		
		СтрокаТч[ИмяСуммы] = ПересчитатьСуммуПоНовойВалюте(СтрокаТч[ИмяСуммы], ВалютаНач, ВалютаКон, 
															СтруктураВалютыНач, СтруктураВалютыКон); 	
		  	
	КонецЦикла;
	             
КонецПроцедуры // ВыполнитьПерерасчетСуммПоВалютам()

// Процедура зачищает некорректные значения в табличной части при изменении организации.
// 
// Параметры:
//  Нет.
// 
Процедура ВыполнитьДействияПриИзмененииОрганизации() Экспорт

	КоличествоСубконто = 4;
	
	Для каждого СтрокаТч Из Проводки Цикл
		
		НомСтроки = СтрокаТч.НомерСтроки;
		
		Если ЗначениеЗаполнено(СтрокаТч.ПодразделениеДт) Тогда
			СтрокаТч.ПодразделениеДт = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ТекстСообщения = Нстр("ru = 'В строке №" + НомСтроки + " очищено подразделение Дт'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТч.ПодразделениеКт) Тогда
			СтрокаТч.ПодразделениеКт = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ТекстСообщения = Нстр("ru = 'В строке №" + НомСтроки + " очищено подразделение Кт'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
				
		Для i = 1 По КоличествоСубконто Цикл
		
			ИмяРеквизита = "СубконтоДт_" + Строка(i);
			ЗачиститьСубконто(НомСтроки, ИмяРеквизита, СтрокаТч[ИмяРеквизита]);
			
			ИмяРеквизита = "СубконтоКт_" + Строка(i);
			ЗачиститьСубконто(НомСтроки, ИмяРеквизита, СтрокаТч[ИмяРеквизита]);
		
		КонецЦикла;
	
    КонецЦикла;

КонецПроцедуры // ВыполнитьДействияПриИзмененииОрганизации()

// Процедура зачищает некорректные значения в табличной части при изменении контрагента.
// 
// Параметры:
//  Нет.
// 
Процедура ВыполнитьДействияПриИзмененииКонтрагента() Экспорт
	
	Для каждого СтрокаТч Из Проводки Цикл
		
		НомСтроки = СтрокаТч.НомерСтроки;
		
		Для i = 1 По мКоличествоСубконто Цикл
		
			ИмяРеквизита = "СубконтоДт_" + Строка(i);
			ЗачиститьСубконто(НомСтроки, ИмяРеквизита, СтрокаТч[ИмяРеквизита], Истина);
			
			ИмяРеквизита = "СубконтоКт_" + Строка(i);
			ЗачиститьСубконто(НомСтроки, ИмяРеквизита, СтрокаТч[ИмяРеквизита], Истина);
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры // ВыполнитьДействияПриИзмененииКонтрагента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура зачищает значения субконто.
// 
// Параметры:
//  НомСтроки		  - Число.
//  ИмяРеквизита	  - Строка.
//  РеквизитСубконто  - ЛюбаяСсылка.
//  ПоКонтрагенту     - Булево.
// 
Процедура ЗачиститьСубконто(НомСтроки, ИмяРеквизита, РеквизитСубконто, ПоКонтрагенту = Ложь)

	Если Не ЗначениеЗаполнено(РеквизитСубконто) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(РеквизитСубконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		РеквизитСубконто = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ТекстСообщения = Нстр("ru = 'В строке №" + НомСтроки + " очищен договор контрагента (" + ИмяРеквизита + ").'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	ИначеЕсли Не ПоКонтрагенту И ТипЗнч(РеквизитСубконто) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		РеквизитСубконто = Справочники.БанковскиеСчета.ПустаяСсылка(); // Организация.ОсновнойБанковскийСчет;
		ТекстСообщения = Нстр("ru = 'В строке №" + НомСтроки + " очищен банковский счет (" + ИмяРеквизита + ").'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	ИначеЕсли Не ПоКонтрагенту И ТипЗнч(РеквизитСубконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		РеквизитСубконто = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ТекстСообщения = Нстр("ru = 'В строке №" + НомСтроки + " очищено подразделение организации (" + ИмяРеквизита + ").'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	ИначеЕсли ПоКонтрагенту И ТипЗнч(РеквизитСубконто) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		РеквизитСубконто = Контрагент;
		ТекстСообщения = Нстр("ru = 'В строке №" + НомСтроки + " изменен контрагент (" + ИмяРеквизита + ").'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли;	

КонецПроцедуры // ЗачиститьСубконто()

// Функция пересчитывает валютную сумму по таблице валют.
// 
// Параметры:
//  ВалютнаяСумма   - Тип_описание.
//  Валюта  	 	- Тип_описание.
//  ТаблицаВалют 	- ТаблицаЗначений.
//  НомерСтр 	 	- Число.
// 
Процедура ПересчитатьВалютнуюСуммуПоТаблицеВалют(ВалютнаяСумма, Валюта, ТаблицаВалют, НомерСтр)

	Если ЗначениеЗаполнено(Валюта) И ВалютнаяСумма <> 0 Тогда
		
		СтрТаблВал = ТаблицаВалют.Найти(Валюта, "Валюта");
		
		Если СтрТаблВал = Неопределено ИЛИ СтрТаблВал.МножительПересчета = 0 Тогда
			
			ТекстСообщения = Нстр("ru = 'При пересчете валютной суммы в строке №" 
									+ НомерСтр + " обнаружен нулевой курс. Валюта """ + Валюта + """.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		Иначе
			
			ВалютнаяСумма = ВалютнаяСумма * СтрТаблВал.МножительПересчета;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьВалютнуюСуммуПоТаблицеВалют()

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Процедура проверяет завершение сверки ВГО.
// 
// Параметры:
//  Отказ  - Булево.
// 
Процедура ПроверитьЗавершениеСверкиВГО(Отказ) Экспорт

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала"			, Дата);
	СтруктураПараметров.Вставить("ДатаОкончания"		, Дата);
	СтруктураПараметров.Вставить("Организация1"			, Организация);
	СтруктураПараметров.Вставить("Контрагент2"			, Контрагент);
	СтруктураПараметров.Вставить("РегистрБухгалтерии"	, РегистрБухгалтерии);
	СтруктураПараметров.Вставить("Сценарий"				, Сценарий);
	
	бит_вго_Сервер.ПроверитьЗавершениеСверкиВГО(СтруктураПараметров, Ссылка, Отказ);
	
КонецПроцедуры // ПроверитьЗавершениеСверкиВГО()

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  МассивСчетовРасчетов - Массив.
//  МассивСчетовОплаты   - Массив.
//  Отказ            	 - Булево.
//  Заголовок 			 - Строка.
// 
Процедура ПроверкаДанных(МассивСчетовРасчетов, МассивСчетовОплаты, Отказ, Заголовок)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
    |	ПротоколРасхожденийПроводки.НомерСтроки,
    |	ПротоколРасхожденийПроводки.ОперацияВГО,
    |	ПротоколРасхожденийПроводки.ПричинаРасхождения,
    |	ПротоколРасхожденийПроводки.СчетДт,
    |	ПротоколРасхожденийПроводки.СчетКт,
	|	ПротоколРасхожденийПроводки.ЭтоСчетРасчетовДт,
	|	ПротоколРасхожденийПроводки.ЭтоСчетРасчетовКт
    |ИЗ
    |	Документ.бит_вго_ПротоколРасхождений.Проводки КАК ПротоколРасхожденийПроводки
	|
	|ГДЕ
	|	ПротоколРасхожденийПроводки.Ссылка = &Ссылка
	|
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Если МассивСчетовРасчетов.Найти(Выборка.СчетДт) = Неопределено 
			И МассивСчетовРасчетов.Найти(Выборка.СчетКт) = Неопределено Тогда
			
			ТекстСообщения = Нстр("ru = 'В строке номер %1% ни счет Дт ни счет Кт не являются счетом расчетов.'");				
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
 
		КонецЕсли;
		
		ДтКт = ?(Выборка.ЭтоСчетРасчетовДт, "Кт", "Дт"); 		
		ЭтоОплата = МассивСчетовОплаты.Найти(Выборка["Счет" + ДтКт]) <> Неопределено;
		
		Если ЭтоОплата Тогда
			Если Выборка.ОперацияВГО.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.НачислениеЗадолженности Тогда
				ТекстСообщения = Нстр("ru = 'В строке номер %1% неверный тип операции ВГО. Для данных об оплате не может быть выбрана операция начисления задолженности.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.НомерСтроки);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
			ИначеЕсли Выборка.ОперацияВГО.ВидОперации = Перечисления.бит_вго_ВидыОперацийВГО.Техническая Тогда
				ТекстСообщения = Нстр("ru = 'В строке номер %1% неверный вид операции ВГО. Для данных об оплате не может быть выбрана техническая операция.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.НомерСтроки);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
			КонецЕсли;
		Иначе
			Если Выборка.ОперацияВГО.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.ПогашениеЗадолженности Тогда
				ТекстСообщения = Нстр("ru = 'В строке номер %1% неверный тип операции ВГО. Для оборотов на счете расчетов не может быть выбрана операция погашения задолженности.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.НомерСтроки);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
			КонецЕсли; 		
		КонецЕсли;
				
	КонецЦикла;
	 	    		
КонецПроцедуры // ПроверкаДанных()

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТабЧасть.НомерСтроки,
	|	ТабЧасть.ОперацияВГО,
	|	ТабЧасть.ПричинаРасхождения,
	|	ТабЧасть.ЦФО,
	|	ТабЧасть.ПодразделениеДт,
	|	ТабЧасть.ПодразделениеКт,
	|	ТабЧасть.ВалютаДт,
	|	ТабЧасть.ВалютаКт,
	|	ТабЧасть.СчетДт,
	|	ТабЧасть.СчетКт,
	|	ТабЧасть.СубконтоДт_1,
	|	ТабЧасть.СубконтоДт_2,
	|	ТабЧасть.СубконтоДт_3,
	|	ТабЧасть.СубконтоДт_4,
	|	ТабЧасть.СубконтоКт_1,
	|	ТабЧасть.СубконтоКт_2,
	|	ТабЧасть.СубконтоКт_3,
	|	ТабЧасть.СубконтоКт_4,
	|	ЕСТЬNULL(ТабЧасть.Сумма, 0) 			КАК Сумма,
	|	ЕСТЬNULL(ТабЧасть.СуммаРегл, 0) 		КАК СуммаРегл,
	|	ЕСТЬNULL(ТабЧасть.СуммаУпр, 0) 			КАК СуммаУпр,
	|	ЕСТЬNULL(ТабЧасть.СуммаСценарий, 0) 	КАК СуммаСценарий,
	|	ЕСТЬNULL(ТабЧасть.СуммаМУ, 0) 			КАК СуммаМУ,
	|	ЕСТЬNULL(ТабЧасть.ВалютнаяСуммаДт, 0)	КАК ВалютнаяСуммаДт,
	|	ЕСТЬNULL(ТабЧасть.ВалютнаяСуммаКт, 0) 	КАК ВалютнаяСуммаКт,
	|	ТабЧасть.КоличествоДт,
	|	ТабЧасть.КоличествоКт
	|ИЗ
	|	Документ.бит_вго_ПротоколРасхождений.Проводки КАК ТабЧасть
	|ГДЕ
	|	ТабЧасть.Ссылка = &Ссылка
	|";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоПроводкам = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Проводки", ТаблицаПоПроводкам);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

Процедура ЗаполнитьСуммыДвижения(Движение, ТекСтрокаПроводки, ИмяОсновнойСуммы, ДтКт)

	Движение["СуммаРегл" + ДтКт] 	 = ТекСтрокаПроводки.СуммаРегл;
	Движение["СуммаУпр" + ДтКт] 	 = ТекСтрокаПроводки.СуммаУпр;
	Движение["СуммаСценарий" + ДтКт] = ТекСтрокаПроводки.СуммаСценарий;
	Движение["СуммаМУ" + ДтКт] 	 	 = ТекСтрокаПроводки.СуммаМУ;	

	// Взаиморасчеты.
    Если ЗначениеЗаполнено(ТекСтрокаПроводки["Валюта" + ДтКт]) Тогда 
		Движение["Валюта" + ДтКт]        = ТекСтрокаПроводки["Валюта" + ДтКт];
		Движение["ВалютнаяСумма" + ДтКт] = ТекСтрокаПроводки["ВалютнаяСумма" + ДтКт];	
	Иначе
		Движение["Валюта" + ДтКт]        = ВалютаДокумента;
		Движение["ВалютнаяСумма" + ДтКт] = Движение[ИмяОсновнойСуммы];
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьСуммыДвижения()

// Процедура записывает движения по регистру накопления бит_вго_ДанныеКорректировок.
// 
// Параметры:
//  ТаблицаДвижений			- ТаблицаЗначений.
//  СтруктураШапкиДокумента - Структура.
//  ТекСтрокаПроводки  		- Строка таблицы значений.
//  МассивСчетовРасчетов    - Массив.
// 
Процедура ДобавитьДвиженияПоРегистру_бит_вго_ДанныеКорректировок(ТаблицаДвижений, СтруктураШапкиДокумента, ТекСтрокаПроводки, МассивСчетовРасчетов)

	ИмяРегистра 		= РегистрБухгалтерии.ИмяОбъекта;
	ЭтотРегистр_Хоз 	= ИмяРегистра = "Хозрасчетный";
	ЭтотРегистр_Бюд 	= ИмяРегистра = "бит_Бюджетирование";
	ЭтотРегистр_Меж 	= ИмяРегистра = "бит_Дополнительный_2";
	Если ЭтотРегистр_Хоз Тогда
		ИмяОсновнойСуммы = "Сумма";
	ИначеЕсли ЭтотРегистр_Бюд Тогда	
	    ИмяОсновнойСуммы = "СуммаСценарий";
	ИначеЕсли ЭтотРегистр_Меж Тогда	
	    ИмяОсновнойСуммы = "СуммаМУ";
	Иначе	
	    ИмяОсновнойСуммы = "СуммаУпр";
	КонецЕсли;
	
	// Движение
	Движение = ТаблицаДвижений.Добавить();
	
	Движение.ТипДанныхКорректировок = Перечисления.бит_вго_ТипыДанныхКорректировок.ПротоколРасхождения;
	
	ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);		
	ЗаполнитьЗначенияСвойств(Движение, ТекСтрокаПроводки, ,"ВалютаДт, ВалютаКт, ВалютнаяСуммаДт, ВалютнаяСуммаКт");
	
	Движение.Период 	 	 = СтруктураШапкиДокумента.Дата;
	Движение.Активность	 	 = Истина;
	
	Если МассивСчетовРасчетов.Найти(ТекСтрокаПроводки.СчетДт) <> Неопределено Тогда
		ЗаполнитьСуммыДвижения(Движение, ТекСтрокаПроводки, ИмяОсновнойСуммы, "Дт");
	КонецЕсли;
	Если МассивСчетовРасчетов.Найти(ТекСтрокаПроводки.СчетКт) <> Неопределено Тогда
		ЗаполнитьСуммыДвижения(Движение, ТекСтрокаПроводки, ИмяОсновнойСуммы, "Кт");
	КонецЕсли;
	
	Движение.Валюта = ВалютаДокумента;
		
КонецПроцедуры // ДобавитьДвиженияПоРегистру_бит_вго_ДанныеКорректировок()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, МассивСчетовРасчетов, Отказ, Заголовок)
	
	ТаблицаПроводки 	 =  СтруктураТаблиц.Проводки;
			
	// Регистр накопления бит_вго_ДанныеКорректировок.
	Движения.бит_вго_ДанныеКорректировок.Записывать = Истина;
	Движения.бит_вго_ДанныеКорректировок.Очистить();
		
	
	// Имя регистра бухгалтерии, по которому нужно сформировать движения.
	ИмяРегистраБухгалтерии = РегистрБухгалтерии.ИмяОбъекта;
	ИмяПланаСчетов         = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;
	КоличествоСубконто     = Метаданные.ПланыСчетов[ИмяПланаСчетов].МаксКоличествоСубконто;
	
	// Регистр накопления бит_вго_ДанныеКорректировок.
	ТаблицаДвижений = Движения.бит_вго_ДанныеКорректировок.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого ТекСтрокаПроводки Из ТаблицаПроводки Цикл
		
		// Регистр накопления бит_вго_ДанныеКорректировок.
		ДобавитьДвиженияПоРегистру_бит_вго_ДанныеКорректировок(ТаблицаДвижений, СтруктураШапкиДокумента, ТекСтрокаПроводки, МассивСчетовРасчетов);
			
	КонецЦикла;
	
	// Регистр накопления бит_вго_ДанныеКорректировок.
	Движения.бит_вго_ДанныеКорректировок.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_вго_ДанныеКорректировок.ДобавитьДвижение();
 	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#КонецОбласти

#Область Инициализация

мКоличествоСубконто = 4;

#КонецОбласти

#КонецЕсли