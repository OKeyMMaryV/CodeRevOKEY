 
#Область ОписаниеПеременных

&НаКлиенте
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы

&НаКлиенте
Перем мНастройкиСубконтоСчетовМУ; // Хранит настройки видимости полей субконто.
  
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	 
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
    КонецЕсли;
    
	ЗаполнитьКэшЗначений();
					
	// Максимальное количество субконто на счете по МУ.
	фКоличествоСубконтоМУ = 4;
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	УстановитьПодменюВыбораВидаОперации();	
	
	Если Параметры.Ключ.Пустая() Тогда  		
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО(); 
		УстановитьСостояниеДокумента();
	Иначе 		
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО(Ложь); 		
	КонецЕсли;

	// Установка связей параметров выбора и связей по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
												   , "СчетНезавершенногоСтроительства"
												   , "Субконто"
												   , фКоличествоСубконтоМУ
												   , "ОсновныеСредства"
												   , "Элементы.ОсновныеСредства.ТекущиеДанные");							   
												   
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	// Установка связей параметров выбора и связей по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
												   , "КорСчетМСФО"
												   , "КорСубконто"
												   , фКоличествоСубконтоМУ
												   , "ОсновныеСредстваКонсолидированные"
												   , "Элементы.ОсновныеСредстваКонсолидированные.ТекущиеДанные");							   
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
												   
	// Восстановление отображения субконто по количеству доступных.
	ВосстановитьКоличествоДоступныхСубконто();
	
	// Заполнить соответствие объектов ОС и их инвентарных номеров.
	СоответствиеОС_ИнвентарныйНомер = Новый Соответствие;
	бит_му_ВНА.ЗаполнитьИнвентарныеНомераТаблицыОС(Объект.ОсновныеСредства, Объект.Организация, СоответствиеОС_ИнвентарныйНомер);	
	фКэшЗначений.Вставить("СоответствиеОС_ИнвентарныйНомер", СоответствиеОС_ИнвентарныйНомер);
	    	
	НастроитьОформлениеФормы();
	
	ВыполнитьВсеРасчетыТаблицыОС();

	УстановитьПараметрыВыбораДляСчетов();

	// БИТ Тртилек 02.07.2012 Установим видимость страниц в зависимости от вида операции
	УстановитьВидимостьСтраниц();
	///БИТ Тртилек
	
	бит_УстановитьВидимостьСтраницыДокументовПоступлений();
	Элементы.ГруппаПанельОсновная.ТекущаяСтраница = Элементы.бит_СтраницаДокументыПоступления;
	
	// +СБ. Пискунова Виктория. 2016-11-25. #2372
	СБ_РаботаСФормамиОбъекты.бит_му_МодернизацияОСФормаДокументаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -СБ. Пискунова Виктория. 2016-11-25. #2372
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Изменение кода. Начало. 11.03.2015{{
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда

			// Вид операции
			СформироватьДеревоВидовОпераций();
			
			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
				
			Иначе 
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			КонецЕсли;	
				
		Иначе
			
			ПриОткрытииПромежуточная(Отказ);
			ПриОткрытииОкончание();
			
		КонецЕсли;
						
	Иначе
		
		ПриОткрытииОкончание();
		
	КонецЕсли;
	// Изменение кода. Конец. 11.03.2015}}
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		
	//БИТ Тртилек К.И. 03.07.2012 в зависимости от вида операции выполним обработку выбора
	//Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	//	
	//	Если ВыбранноеЗначение.Свойство("Действие") Тогда
	//		
	//		Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
	//			
	//			Если Объект.ОсновныеСредства.Количество() > 0 Тогда
	//				
	//				Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
	//				ТекстВопроса = НСтр("ru = 'Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
	//				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	//				
	//			Иначе
	//				
	//				ДобавитьЗагрузитьОС(ВыбранноеЗначение, ПроверитьВозможностьЗаполненияПараметров());
	//				
	//			КонецЕсли;
	//			
	//		Иначе
	//			
	//			ДобавитьЗагрузитьОС(ВыбранноеЗначение, ПроверитьВозможностьЗаполненияПараметров());
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли; // В структуре есть поле действие 
	//	
	//КонецЕсли; // Это структура	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС") Тогда
	///БИТ Тртилек
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			Если ВыбранноеЗначение.Свойство("Действие") Тогда
				
				Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
					
					Если Объект.ОсновныеСредства.Количество() > 0 Тогда
						
						Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
						ТекстВопроса = НСтр("ru = 'Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
						ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
						
					Иначе
						
						ДобавитьЗагрузитьОС(ВыбранноеЗначение, ПроверитьВозможностьЗаполненияПараметров());
						
					КонецЕсли;
					
				Иначе
					
					ДобавитьЗагрузитьОС(ВыбранноеЗначение, ПроверитьВозможностьЗаполненияПараметров());
					
				КонецЕсли;
				
			КонецЕсли; // В структуре есть поле действие 
			
		КонецЕсли; // Это структура
		
	//БИТ Тртилек К.И. 03.07.2012 разделим механизм выбора в зависимости от вида операции	
	Иначе
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			Если ВыбранноеЗначение.Свойство("Действие") Тогда
				
				ТаблицаДанных = ВыбранноеЗначение.Данные;
				
				Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
					
					Если Объект.ОсновныеСредстваКонсолидированные.Количество()>0 Тогда
						Ответ = Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
						Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
							Возврат;
						КонецЕсли;
						Объект.ОсновныеСредстваКонсолидированные.Очистить();
					КонецЕсли; 
					
				КонецЕсли; 
				
				
				ОтветНаВопрос = Вопрос("Заменять строки, при их совпадении с документом из подбора?", РежимДиалогаВопрос.ДаНет);
				Если ОбработкаПодбора_НаСервере(ВыбранноеЗначение, ИсточникВыбора.Объект.ОбъектСтроительства, ОтветНаВопрос = КодВозвратаДиалога.Да) = Неопределено Тогда
					Возврат;
				КонецЕсли;
			//	МассивДокументовБУ = ТаблицаДанных.ВыгрузитьКолонку("ДокументБУ");           
			//	
			//	ТаблицаДокументОсновноеСредство = бит_му_Общий.бит_му_ПолучитьСоотношениеДокументОсновноеСредство(ВыбранноеЗначение.Данные);
			//	
			//	// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
			//	Если ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
			//		Если ВыбранноеЗначение.Подбор07_0804 = Истина Тогда
			//			ТаблицаДвиженийДокументовРСБУ      = ПолучитьДвиженияПоХозрасчетномуРегистру07_0804(МассивДокументовБУ);				
			//		Иначе 
			//			ТаблицаДвиженийДокументовРСБУ      = ПолучитьДвиженияПоХозрасчетномуРегистру(МассивДокументовБУ, ИсточникВыбора, ТаблицаДокументОсновноеСредство);
			//		КонецЕсли;	
			//	КонецЕсли;
			//	
			//	МассивДокументовБУ.Очистить();
			//	
			//	Для каждого СтрокаТаблицы Из ТаблицаДвиженийДокументовРСБУ Цикл
			//		
			//		ОтборСтрок = Новый Структура;
			//		ОтборСтрок.Вставить("ДокументРСБУ", СтрокаТаблицы.ДокументРСБУ);
			//		ОтборСтрок.Вставить("Номер"       , СтрокаТаблицы.Номер);
			//		
			//		ИмеющиесяСтроки = Объект.ОсновныеСредстваКонсолидированные.НайтиСтроки(ОтборСтрок);
			//		Если НЕ ИмеющиесяСтроки = Неопределено Тогда
			//			Если ИмеющиесяСтроки.Количество() > 0 Тогда
			//				ОтветНаВопрос = Вопрос("В таблице существуют идентичные строки с документом из подбора(" + СтрокаТаблицы.ДокументРСБУ +") .Заменить?", РежимДиалогаВопрос.ДаНет);
			//				Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			//					Для Каждого НайденнаяСтрока Из ИмеющиесяСтроки Цикл
			//						Объект.ОсновныеСредстваКонсолидированные.Удалить(НайденнаяСтрока);
			//					КонецЦикла;
			//				Иначе
			//					Возврат;
			//				КонецЕсли;
			//			КонецЕсли;
			//		КонецЕсли;
			//		
			//		НоваяСтрока = Объект.ОсновныеСредстваКонсолидированные.Добавить();
			//		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			//		
			//		ДокументВводНачальныхОстатков = ТипЗнч(СтрокаТаблицы.ДокументРСБУ) = Тип("ДокументСсылка.ВводНачальныхОстатков") 
			//		И СтрокаТаблицы.ДокументРСБУ.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ОсновныеСредства");
			//		
			//		//Тртилек 30.08.2012 внедрим механизм трансляции
			//		Если НЕ ДокументВводНачальныхОстатков Тогда
			//			
			//			// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
			//			Если  ВыбранноеЗначение.Свойство("Подбор07_0804")Тогда
			//				Если ВыбранноеЗначение.Подбор07_0804 = Ложь Тогда 
			//					//}	
			//					СчетРСБУ = ?(СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков")
			//					ИЛИ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования")
			//					ИЛИ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств") , СтрокаТаблицы.СчетДт, СтрокаТаблицы.СчетКт);
			//				Иначе 
			//					СчетРСБУ = СтрокаТаблицы.СчетУчетаРСБУ;
			//				КонецЕсли;
			//			КонецЕсли;
			//			// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
			//			Если  ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
			//				Если ВыбранноеЗначение.Подбор07_0804 = Ложь Тогда
			//					КорСчетРСБУ = ?(НЕ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков")
			//					И НЕ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования")
			//					И НЕ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств"), СтрокаТаблицы.СчетДт, СтрокаТаблицы.СчетКт);
			//				КонецЕсли;
			//			КонецЕсли;
			//			ДокументСсылка = Объект.Ссылка;
			//			ИмяИсточника = "Хозрасчетный";
			//			ИмяПриемника = "бит_Дополнительный_2";
			//			КодПравилТрансляции = бит_МеханизмТрансляции.ПолучитьПравилаИКэш(Объект.Организация
			//																			,ИмяИсточника
			//																			,ИмяПриемника
			//																			,ДокументСсылка);
			//			Параметры = Новый Структура;
			//			Параметры.Вставить("СчетДт"		      , СчетРСБУ);
			//			Параметры.Вставить("СчетКт"		      , ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
			//			// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
			//			Если  ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
			//				Если ВыбранноеЗначение.Подбор07_0804 = Истина Тогда
			//					Параметры.Вставить("СубконтоДт1"      , СтрокаТаблицы.Субконто1);
			//					Параметры.Вставить("СубконтоДт2"      , СтрокаТаблицы.Субконто2);
			//				Иначе 
			//					Параметры.Вставить("СубконтоДт1"      , СтрокаТаблицы.СтатьяЗатрат);
			//					Параметры.Вставить("СубконтоДт2"      , СтрокаТаблицы.СтатьяЗатрат);
			//				КонецЕсли;
			//			КонецЕсли;
			//		    //}
			//			Параметры.Вставить("ПодразделениеДт"  , ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка"));
			//			Параметры.Вставить("ПодразделениеКт"  , ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка"));
			//			Параметры.Вставить("Сумма"            , СтрокаТаблицы.Сумма);
			//			
			//			Отказ = Ложь;
			//			
			//			ЗаписьПриемникСтруктура = бит_МеханизмТрансляции.ВыполнитьПодборСчетаПоПравилам(Параметры
			//																							,Объект.Организация
			//																							,ИмяИсточника
			//																							,ИмяПриемника
			//																							,ДокументСсылка
			//																							,КодПравилТрансляции
			//																							,Отказ);
			//			///БИТ Тртилек																								
			//			
			//			
			//			Если ЗаписьПриемникСтруктура.ЗаписьПриемник.СчетДт = ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ПустаяСсылка")  Тогда
			//				
			//				Сообщить("Не найдено соотвествия: счет РСБУ - счет МСФО", СтатусСообщения.Внимание);
			//				Сообщить("1." + " Счет РСБУ " + СчетРСБУ + " Счет МСФО " + " СтатьяЗатрат " + СтрокаТаблицы.СтатьяЗатрат + "!", СтатусСообщения.Внимание);	
			//				Сообщить("Документ " + СтрокаТаблицы.ДокументРСБУ+ ". Не будет перенесен в таличную часть документа!", СтатусСообщения.Внимание);
			//				Продолжить;
			//				
			//			КонецЕсли;
			//			
			//			НоваяСтрока.КорСчетМСФО = ЗаписьПриемникСтруктура.ЗаписьПриемник.СчетДт;
			//		Иначе
			//			СчетРСБУ = ?(СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновныеСредства")
			//			ИЛИ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ"), СтрокаТаблицы.СчетДт, СтрокаТаблицы.СчетКт);
			//			КорСчетРСБУ = ?(НЕ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновныеСредства")
			//			И НЕ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ"), СтрокаТаблицы.СчетДт, СтрокаТаблицы.СчетКт);
			//		КонецЕсли;
			//		
			//		НоваяСтрока.СоставОС    = ПредопределенноеЗначение("Справочник.бит_му_СоставОС.ВНА_РСБУ");
			//		Если не ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
			//			Если ВыбранноеЗначение.Подбор07_0804 = Истина Тогда
			//				НоваяСтрока.Номер		= СтрокаТаблицы.Номер;
			//			КонецЕсли; 
			//		КонецЕсли;
			//	    						
			//		НоваяСтрока.ОсновноеСредство = Объект.бит_ОсновноеСредство;
			//		// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
			//		Если  ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
			//			Если ВыбранноеЗначение.Подбор07_0804 = Истина Тогда
			//				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы)
			//			Иначе 
			//				Если ПринадлежитЭлементу_НаСервере(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновныеСредства"), КорСчетРСБУ)
			//					ИЛИ КорСчетРСБУ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновныеСредства")
			//					ИЛИ ПринадлежитЭлементу_НаСервере(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ"), КорСчетРСБУ)
			//					ИЛИ КорСчетРСБУ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ")  Тогда
			//					НоваяСтрока.СчетУчетаРСБУ = КорСчетРСБУ;
			//					НоваяСтрока.Субконто1     = СтрокаТаблицы.Субконто1;
			//					НоваяСтрока.Субконто2     = СтрокаТаблицы.Субконто2;
			//					НоваяСтрока.Субконто3     = СтрокаТаблицы.Субконто3;
			//				Иначе
			//					НоваяСтрока.СчетУчетаРСБУ = СчетРСБУ;
			//				КонецЕсли;
			//			КонецЕсли;	
			//		КонецЕсли;
			//		Колонки = Элементы.ОсновныеСредстваКонсолидированные.Колонки;
			//		
			//		ПриВыбореСчетаВТабличномПоле(НоваяСтрока.КорСчетМСФО,
			//													НоваяСтрока.КорСубконто1, Колонки.КорСубконто1,
			//													НоваяСтрока.КорСубконто2, Колонки.КорСубконто2,
			//													НоваяСтрока.КорСубконто3, Колонки.КорСубконто3,
			//													НоваяСтрока.КорСубконто4, Колонки.КорСубконто4);
			//		 
			//		УстановитьОбъектВКорСубконто(НоваяСтрока.КорСубконто1, НоваяСтрока.КорСубконто2, НоваяСтрока.КорСубконто3,СтрокаТаблицы.Объект);																
			//												
			//		
			//		
			//	КонецЦикла; 
			//	
			КонецЕсли; // в структуре есть поле действие 
			
		КонецЕсли; // это структура
		
		бит_му_ПересчитатьОбщуюСуммуМодернизации();
		
	КонецЕсли;
	///БИТ Тртилек	
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - завершение выбора ОС.
// 
&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьЗагрузитьОС(ДополнительныеПараметры, ПроверитьВозможностьЗаполненияПараметров());
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	ВосстановитьОтображениеДанныхФормы();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_МодернизацияОС";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если мКэшРеквизитовФормы.Организация <> Объект.Организация Тогда
	
		Если Объект.ОсновныеСредства.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект, Элемент);
			ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
		Иначе
			
			ТекстСообщения = "";
			ИзменениеОрганизацииСервер(ТекстСообщения);
			ВывестиТекстСообщенийПользователю(ТекстСообщения);

			ДобавитьВКэш(Элемент.Имя);
			
		КонецЕсли;
		
	Иначе
		
		ДобавитьВКэш(Элемент.Имя);
		
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ИзвлечьИзКэша(ДополнительныеПараметры.Имя);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	ИзменениеОрганизацииСервер(ТекстСообщения);
	ВывестиТекстСообщенийПользователю(ТекстСообщения);
	
	ДобавитьВКэш(ДополнительныеПараметры.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьВыбранноеПодразделение(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // ПодразделениеОбработкаВыбора()

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Установим новый курс на дату документа
	УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеСредства

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеОсновногоСредстваСервер(ТекущиеДанные.ПолучитьИдентификатор(), ПроверитьВозможностьЗаполненияПараметров());
			
КонецПроцедуры // ОсновныеСредстваОсновноеСредствоПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваМетодНачисленияАмортизацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеМетодаНачисленияАмортизацииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // ОсновныеСредстваМетодНачисленияАмортизацииПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваСчетНезавершенногоСтроительстваПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
   	ИзменениеСчетаНезавершенногоСтроительстваСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // ОсновныеСредстваСчетНезавершенногоСтроительстваПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, "ОсновныеСредства", Элемент.Имя);		
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, ТекущиеДанные, "Субконто", ЗначениеСубконто);
	
КонецПроцедуры // ОсновныеСредстваСубконтоНачалоВыбора()

&НаКлиенте
Процедура ОсновныеСредстваСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, "ОсновныеСредства", Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные, "Субконто", ЗначениеСубконто);
	
КонецПроцедуры // ОсновныеСредстваСубконтоПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ОсновныеСредства", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
													 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "Субконто"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);

КонецПроцедуры // ОсновныеСредстваСубконтоАвтоПодбор()

&НаКлиенте
Процедура ОсновныеСредстваСрокПолезногоИспользованияПриИзменении(Элемент)
	
	ВычислитьОставшийсяСрокПолезногоИспользования();
	
КонецПроцедуры // ОсновныеСредстваСрокПолезногоИспользованияПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваФактСрокИспользованияПриИзменении(Элемент)
	
	ВычислитьОставшийсяСрокПолезногоИспользования();
	
КонецПроцедуры // ОсновныеСредстваФактСрокИспользованияПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваОбъемПродукцииРаботПриИзменении(Элемент)
	
	ВычислитьОставшийсяОбъемПродукцииРабот();

КонецПроцедуры // ОсновныеСредстваОбъемПродукцииРаботПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваФактОбъемПродукцииРаботПриИзменении(Элемент)
	
	ВычислитьОставшийсяОбъемПродукцииРабот();
	
КонецПроцедуры // ОсновныеСредстваФактОбъемПродукцииРаботПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваСтоимостьПриИзменении(Элемент)
	
	ВычислитьОстаточнуюСтоимость();
	
КонецПроцедуры // ОсновныеСредстваСтоимостьПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваСуммаМодернизацииПриИзменении(Элемент)
	
	ВычислитьОстаточнуюСтоимость();
	
КонецПроцедуры // ОсновныеСредстваСуммаМодернизацииПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваСуммаФактическогоОбесцененияПриИзменении(Элемент)
	
	ВычислитьОстаточнуюСтоимость();
	
КонецПроцедуры // ОсновныеСредстваСуммаФактическогоОбесцененияПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваАмортизацияПриИзменении(Элемент)
	
	ВычислитьОстаточнуюСтоимость();
	
КонецПроцедуры // ОсновныеСредстваАмортизацияПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)

	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	                                             	
	ПредыдущийВидОперации = Объект.ВидОперации;
	ИмяВидаОперации       = СтрЗаменить(Команда.Имя, "КомандаПодменюВидаОперации_", "");
	Объект.ВидОперации    = фКэшЗначений.Перечисления.бит_му_ВидыОперацийМодернизацияОС[ИмяВидаОперации];
		
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПредыдущийВидОперации", ПредыдущийВидОперации);
		
		Оповещение = Новый ОписаниеОповещения("КомандаУстановитьОперациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'"); 		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе	
		
		УстановитьЗаголовокФормыДокумента();
	
		Модифицированность = Истина;

	КонецЕсли;
	
	//БИТ Тртилек 02.07.2012 установим видимость страниц
	УстановитьВидимостьСтраниц();
	///БИТ Тртилек
	
	бит_УстановитьВидимостьСтраницыДокументовПоступлений();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - завершение обработки команды "УстановитьОперацию".
// 
&НаКлиенте
Процедура КомандаУстановитьОперациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Объект.ВидОперации = ДополнительныеПараметры["ПредыдущийВидОперации"];
		Возврат;
	КонецЕсли;
	
	УстановитьЗаголовокФормыДокумента();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыФормы = ЗаполнитьПараметрыПодбора();
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма", ПараметрыФормы, ЭтотОбъект);
	ЗаполнитьИОткрытьФорму();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

КонецПроцедуры // ПодборОС()
     
&НаКлиенте
Процедура ЗаполнитьПараметрыДляВсехОС(Команда)
	
	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
	
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьПараметрыДляВсехОСЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Параметры в табличной части ""Основные средства"" будут перезаполнены. Продолжить?'"); 		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);

	Иначе
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыДляВсехОС()

// Процедура - завершение обработки команды "ЗаполнитьПараметрыДляВсехОС".
// 
&НаКлиенте
Процедура КомандаЗаполнитьПараметрыДляВсехОСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьПараметрыТаблицыОССервер(ПроверитьВозможностьЗаполненияПараметров());
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

   
&НаКлиенте
Процедура ЗаполнитьПараметрыДляТекущегоОС(Команда)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = Нстр("ru = 'Для заполнения параметров необходимо выбрать строку с ОС, для которого необходимо заполнить параметры.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим параметры по ОС.
	ПолучитьПараметрыОССервер(ТекущиеДанные.ПолучитьИдентификатор(), , Истина, ПроверитьВозможностьЗаполненияПараметров());

	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьПараметрыДляТекущегоОС()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
			
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_му_ВидыОперацийМодернизацияОС"
							, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийМодернизацияОС));
	КэшПеречисления.Вставить("бит_му_МетодыНачисленияАмортизации"
							, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_МетодыНачисленияАмортизации));
	КэшПеречисления.Вставить("бит_му_ВидыКлассовОС"
							, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыКлассовОС));						
	КэшПеречисления.Вставить("бит_му_РежимыПодбораВНА"		     
							, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_РежимыПодбораВНА));

	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
		
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура ЗаполнитьКэшНастроекСубконто(КэшНастроек)
	
	КэшНастроек = Новый Соответствие;
	
	Для Каждого ТекСтрока Из Объект.ОсновныеСредства Цикл
		
		Если КэшНастроек[ТекСтрока.СчетНезавершенногоСтроительства] = Неопределено Тогда
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекСтрока.СчетНезавершенногоСтроительства, фКоличествоСубконтоМУ);
			КэшНастроек.Вставить(ТекСтрока.СчетНезавершенногоСтроительства, НастройкиСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКэшНастроекСубконто()

&НаСервере
Процедура УстановитьПодменюВыбораВидаОперации()

	ИмяПодменю 	   = "ПодменюВидаОперации";
	ГруппаПодменю  = Элементы.ПодменюВидаОперации;
	ИмяДействия    = "ДействияФормыДействиеУстановитьОперацию";
	
	// Заполняем виды операций для группы подменю.
	Для каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийМодернизацияОС[ИмяЗначенияПеречисления];
		
		ИмяКнопки  = ИмяПодменю + "_" + ИмяЗначенияПеречисления;
		
		// ОК Довбешка Т. 06.02.2018 АТ-1639166
		//бит_РаботаСДиалогамиСервер.ДобавитьКнопкуНаФорму(Элементы
		//										, ЭтотОбъект.Команды
		//										, ИмяКнопки
		//										, ЭлементЗаполнения.Синоним
		//										, ИмяДействия
		//										, ГруппаПодменю);
		ДобавитьКнопкуНаФорму(Элементы, ЭтаФорма.Команды, ИмяКнопки, ЭлементЗаполнения.Синоним, ИмяДействия, ГруппаПодменю);
		//ОК
		
	КонецЦикла;																				   

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

&НаСервере
Процедура ЗаполнитьВалютуМСФО(ЗаполнитьВалютуДокумента = Истина)
	
	// Получим валюту международного учета.
	фВалютаМСФО 	     = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	СтрокаВалютаМежУчета = Строка(фВалютаМСФО);
	
	Элементы.ДекорацияВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМежУчета), Нстр("ru = 'НЕ УСТАНОВЛЕНА'"), СтрокаВалютаМежУчета);
	
	Если ЗаполнитьВалютуДокумента Тогда
		Объект.ВалютаДокумента = фВалютаМСФО;
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;

	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры // ИзменениеВалюты()

&НаСервере
Процедура ИзменениеОрганизацииСервер(ТекстСообщения)
	
	// Очистка табличной части
	Объект.ОсновныеСредства.Очистить();
	//БИТ Тртилек 21.09.2012 очищаем табличную часть с консолидированным ОС
	Объект.ОсновныеСредстваКонсолидированные.Очистить();
	///БИТ Тртилек
	
	// Проверка подразделения
	бит_ОбщегоНазначения.ПроверитьПринадлежностьАналитики(Объект
														  ,
														  , "Подразделение"
														  , "Владелец"
														  , "Организация"
														  , "СправочникСсылка.ПодразделенияОрганизаций"
														  , Нстр("ru = 'В документе'")
														  , Нстр("ru = 'Изменение значения реквизита Организация'")
														  , ТекстСообщения);
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО(); 
	
КонецПроцедуры // ИзменениеОрганизацииСервер()                 

&НаСервере
Процедура ПроверитьВыбранноеПодразделение(ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение.Владелец <> Объект.Организация Тогда
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;

КонецПроцедуры // ПроверитьВыбранноеПодразделение()

&НаСервере
Процедура ПерезаполнитьПараметрыТаблицыОССервер(МожноПерезаполнятьДанныеПоОС)
		
	СписокОС = Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(СписокОС, Истина);
	
	Если СписокОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получим параметры по ОС.
	ПолучитьПараметрыОССервер(СписокОС, , Истина, МожноПерезаполнятьДанныеПоОС);

КонецПроцедуры // ПерезаполнитьПараметрыТаблицыОССервер()

&НаСервере
Функция СформироватьМассивНедоступныхПараметровАмортизации(ТекущиеДанные, Префикс = "", ЭтоУправлениеДоступность = Ложь)
	
	МассивНедоступныхПараметров = Новый Массив;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат МассивНедоступныхПараметров;
	КонецЕсли;
	
	МенеджерПеречисления 		     = Перечисления.бит_му_МетодыНачисленияАмортизации;
	МетодНачисленияАмортизации_Новый = ТекущиеДанные.МетодНачисленияАмортизации;
	
	Если МетодНачисленияАмортизации_Новый = МенеджерПеречисления.Линейный Тогда
		
		МассивНедоступныхПараметров.Добавить(Префикс + "КоэффициентУскорения");
		МассивНедоступныхПараметров.Добавить(Префикс + "ОбъемПродукцииРабот");
		
		Если ЭтоУправлениеДоступность Тогда
			МассивНедоступныхПараметров.Добавить(Префикс + "ФактОбъемПродукцииРабот");
			МассивНедоступныхПараметров.Добавить(Префикс + "ОстОбъемПродукцииРабот");
		КонецЕсли;
		
	ИначеЕсли МетодНачисленияАмортизации_Новый = МенеджерПеречисления.УменьшаемогоОстатка Тогда
		
		МассивНедоступныхПараметров.Добавить(Префикс + "ОбъемПродукцииРабот");
		
		Если ЭтоУправлениеДоступность Тогда
			МассивНедоступныхПараметров.Добавить(Префикс + "ФактОбъемПродукцииРабот");
			МассивНедоступныхПараметров.Добавить(Префикс + "ОстОбъемПродукцииРабот");
		КонецЕсли;
		
	ИначеЕсли МетодНачисленияАмортизации_Новый = МенеджерПеречисления.Производственный Тогда
		
		МассивНедоступныхПараметров.Добавить(Префикс + "КоэффициентУскорения");
		
	КонецЕсли;
	
	Возврат МассивНедоступныхПараметров;
	
КонецФункции // СформироватьМассивНедоступныхПараметровАмортизации()

&НаСервере
Процедура ВосстановитьОтображениеДанныхФормы()

	ВосстановитьКоличествоДоступныхСубконто();
	бит_му_ВНА.ВосстановитьИнвентарныеНомераТаблицыОС(Объект.ОсновныеСредства, фКэшЗначений.СоответствиеОС_ИнвентарныйНомер);	

	ВыполнитьВсеРасчетыТаблицыОС();
	 
КонецПроцедуры // ВосстановитьОтображениеДанныхФормы()

&НаСервере
Процедура ВыборСчетаВТабличномПоле(ТекущиеДанные, ИмяСчета, ИмяСубконто)

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущиеДанные[ИмяСчета], фКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущиеДанные, НастройкиСубконто, ИмяСубконто);

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные[ИмяСчета]);
	ТекущиеДанные["КоличествоДоступных" + ИмяСубконто] = СвСч.КоличествоСубконто;

КонецПроцедуры // ВыборСчетаВТабличномПоле()

&НаСервере
Процедура СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, ИмяСубконто)
	
	Если ТекущиеДанные = Неопределено Тогда
		 Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущиеДанные.ОсновноеСредство) Тогда
		
		// Адаптация для ERP. Начало. 18.03.2014{{
		ТипОС = Тип(бит_ОбщегоНазначения.ПолучитьИмяТипаОсновныеСредства());
		// Адаптация для ERP. Конец. 18.03.2014}}
		
		Для Ном = 1 По фКоличествоСубконтоМУ Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущиеДанные[ТекИмяСубконто]) = ТипОС Тогда
				ТекущиеДанные[ТекИмяСубконто] = ТекущиеДанные.ОсновноеСредство;
			КонецЕсли; 
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиОС()
  
&НаСервере
Процедура ИзменениеОсновногоСредстваСервер(ИДСтроки, МожноПерезаполнятьДанныеПоОС)
	
	ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	// Заполнить инвентарный номер ОС
	СоответствиеОС_ИнвентарныйНомер = фКэшЗначений.СоответствиеОС_ИнвентарныйНомер;
	бит_му_ВНА.ЗаполнитьИнвентарныйНомерТекущегоОС(ТекущиеДанные, Объект.Организация, СоответствиеОС_ИнвентарныйНомер);	
	фКэшЗначений.Вставить("СоответствиеОС_ИнвентарныйНомер", СоответствиеОС_ИнвентарныйНомер);
		
	// Получим параметры по ОС.
	ПолучитьПараметрыОССервер(ТекущиеДанные, , , МожноПерезаполнятьДанныеПоОС);			 	
	
	// Синхронизация реквизитов строки ОС
	СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, "Субконто");
	
	ВыполнитьВсеРасчетыДляСтрокиОС(ТекущиеДанные);
	
КонецПроцедуры // ИзменениеОсновногоСредстваСервер()

&НаСервере
Процедура ИзменениеМетодаНачисленияАмортизацииСервер(ИДСтроки)
	
	ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	МассивНедоступныхПараметров = СформироватьМассивНедоступныхПараметровАмортизации(ТекущиеДанные);
	
	// Очистим параметры ОС недоступные для выбранного метода ничасления амортизации.
	бит_му_ВНА.ОчиститьНедоступныеПараметрыАмортизации(ТекущиеДанные, , МассивНедоступныхПараметров);
	
КонецПроцедуры // ИзменениеМетодаНачисленияАмортизацииСервер()

&НаСервере
Процедура ИзменениеСчетаНезавершенногоСтроительстваСервер(ИДСтроки = Неопределено)
	
	ТекущиеДанные = ?(ТипЗнч(ИДСтроки) = Тип("Число")
			 			, Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки)
						, ИДСтроки);	
						
	ВыборСчетаВТабличномПоле(ТекущиеДанные, "СчетНезавершенногоСтроительства", "Субконто");
		
	// Синхронизируем реквизиты строки ОС.
	СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, "Субконто");
	
КонецПроцедуры // ИзменениеСчетаНезавершенногоСтроительстваСервер()
            
&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	Для каждого СтрокаТаблицы Из Объект.ОсновныеСредства Цикл
        
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНезавершенногоСтроительства);
		СтрокаТаблицы.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;
				
	КонецЦикла;
	
КонецПроцедуры // ВосстановитьКоличествоДоступныхСубконто()

&НаСервере
Процедура УстановитьОформлениеПараметровАмортизации()
	
	Для Каждого ТекущийМетод Из Перечисления.бит_му_МетодыНачисленияАмортизации Цикл
						
		СтруктураОформления = Новый Структура("ТолькоПросмотр, ЦветФона", Истина, Новый Цвет(225,225,225));
		СтруктураУсловия 	= Новый Структура("УсловиеЛевое, УсловиеПравое"
													, "Объект.ОсновныеСредства.МетодНачисленияАмортизации"
													, ТекущийМетод);
		ИмитацияСтроки 		   = Новый Структура("МетодНачисленияАмортизации", ТекущийМетод);
		МассивОформляемыхПолей = СформироватьМассивНедоступныхПараметровАмортизации(ИмитацияСтроки, "ОсновныеСредства");													
													
		СтруктураУО = Новый Структура;
		СтруктураУО.Вставить("СтруктураОформления"   , СтруктураОформления);
		СтруктураУО.Вставить("СтруктураУсловия"      , СтруктураУсловия);
		СтруктураУО.Вставить("МассивОформляемыхПолей", МассивОформляемыхПолей);
		
		бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление
													, "Оформление по методу начисления амортизации"
													, СтруктураУО);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьОформлениеПараметровАмортизации()

&НаСервере
Процедура НастроитьОформлениеФормы()
	
	// Оформление
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   , "ОсновныеСредства"
															   , "Субконто"
															   , "КоличествоДоступныхСубконто"
															   , фКоличествоСубконтоМУ
                                                               ,,,,,, Истина);
																   															   
	УстановитьОформлениеПараметровАмортизации();
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);

КонецПроцедуры // НастроитьОформлениеФормы()

&НаСервере
Процедура ВыполнитьВсеРасчетыДляСтрокиОС(СтрокаОС)

	Документы.бит_му_МодернизацияОС.ВыполнитьВсеРасчетыДляСтрокиОС(СтрокаОС);
	
КонецПроцедуры // ВыполнитьВсеРасчетыДляСтрокиОС()

&НаСервере
Процедура ВыполнитьВсеРасчетыТаблицыОС()

	Для каждого СтрокаОС Из Объект.ОсновныеСредства Цикл
		ВыполнитьВсеРасчетыДляСтрокиОС(СтрокаОС);
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьВсеРасчетыТаблицыОС()

&НаСервере
Процедура ПолучитьПараметрыОССервер(ИдСтроки, Отказ = Ложь, НеИзменяемыеПараметры = Ложь, МожноПерезаполнятьДанныеПоОС)

	ЭтоМассив = ТипЗнч(ИдСтроки) = Тип("Массив");
	
	Если ЭтоМассив Тогда
		
		МассивОС = ИдСтроки;
		
	Иначе	
		
		ТекущиеДанные = ?(ТипЗнч(ИдСтроки) = Тип("Число")
				 			, Объект.ОсновныеСредства.НайтиПоИдентификатору(ИдСтроки)
							, ИдСтроки); 						
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МассивОС = ТекущиеДанные.ОсновноеСредство;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивОС) Тогда
		Возврат;
	КонецЕсли; 
	
	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_му_МодернизацияОС"));
	
	Если Не НеИзменяемыеПараметры Тогда
		              		
		// Проверим ОС.
		Отказ = Ложь;
		ДокОбъект.ПроверитьОСПриВыборе(МассивОС, Отказ);
	                       	
		Если Отказ Тогда
			
			Если Не ЭтоМассив Тогда
				ИмяСправочникаОС = бит_ОбщегоНазначения.ПолучитьИмяСправочникаОсновныеСредства();
				ТекущиеДанные.ОсновноеСредство = Справочники[ИмяСправочникаОС].ПустаяСсылка();
			КонецЕсли;			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	Если МожноПерезаполнятьДанныеПоОС Тогда
		// Заполним данные по основным средствам.
		ДокОбъект.ЗаполнитьДанныеПоОсновнымСредствам(МассивОС, ?(ЭтоМассив, Неопределено, ТекущиеДанные), НеИзменяемыеПараметры);
		Если ЭтоМассив Тогда
			ЗначениеВДанныеФормы(ДокОбъект, Объект);
			ВосстановитьОтображениеДанныхФормы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПараметрыОССервер()

&НаСервере
Процедура ДобавитьЗагрузитьОС(ВыбранноеЗначение, МожноПерезаполнятьДанныеПоОС)

	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ЗаполнитьОсновныеСредства(ВыбранноеЗначение, МожноПерезаполнятьДанныеПоОС);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		
	ВосстановитьОтображениеДанныхФормы();
		
КонецПроцедуры // ДобавитьЗагрузитьОС()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ОсновныеСредства;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество()>0 
		И ЗначениеЗаполнено(мКэшРеквизитовФормы.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаДокумента)Тогда

	    Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТаблицаОбъекта = Объект.ОсновныеСредства;
		
		// Получим курсы валют на дату принятия к учету для каждого ОС.
		КурсыСтарые = ПолучитьКурсыВалютПоПериодам(мКэшРеквизитовФормы);
		КурсыНовые = ПолучитьКурсыВалютПоПериодам(,Истина);
		
		МассивСуммДляПересчета = Новый Массив;
		МассивСуммДляПересчета.Добавить("Стоимость");
		МассивСуммДляПересчета.Добавить("СуммаМодернизации");
		МассивСуммДляПересчета.Добавить("СуммаФактическогоОбесценения");
		МассивСуммДляПересчета.Добавить("Амортизация");
		МассивСуммДляПересчета.Добавить("ЛиквидационнаяСтоимость_Старый");
		МассивСуммДляПересчета.Добавить("ЛиквидационнаяСтоимость");
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
				Для каждого ИмяСуммы Из МассивСуммДляПересчета Цикл
					
					// Сумму модернизации и ликвидационную стоимость пересчитаем на дату документа.
					Если ИмяСуммы = "СуммаМодернизации" ИЛИ ИмяСуммы = "ЛиквидационнаяСтоимость" Тогда
						
						СтрокаТаблицы[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[ИмяСуммы]
																							   ,мКэшРеквизитовФормы.ВалютаДокумента
																							   ,Объект.ВалютаДокумента
																							   ,мКэшРеквизитовФормы.КурсДокумента
																							   ,Объект.КурсДокумента
																							   ,мКэшРеквизитовФормы.КратностьДокумента
																							   ,Объект.КратностьДокумента);
																							
					// Остальные суммы пересчитаем на дату принятия к учету.
					Иначе
						
						Если НЕ КурсыСтарые[СтрокаТаблицы.ОсновноеСредство] = Неопределено 
							И НЕ КурсыНовые[СтрокаТаблицы.ОсновноеСредство] = Неопределено Тогда
							
							СтарыеКурсы = КурсыСтарые[СтрокаТаблицы.ОсновноеСредство].СтарыеКурсы;
							НовыеКурсы = КурсыНовые[СтрокаТаблицы.ОсновноеСредство].НовыеКурсы;

						
							СтрокаТаблицы[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[ИмяСуммы]
																										,СтарыеКурсы.Валюта
																										,НовыеКурсы.Валюта
																										,СтарыеКурсы.Курс
																										,НовыеКурсы.Курс
																										,СтарыеКурсы.Кратность
						                                                                      			,НовыеКурсы.Кратность);
						КонецЕсли;
																									
					КонецЕсли; 
					
			
				КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
	ВычислитьОстаточнуюСтоимость();
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()

&НаСервере
Функция ПолучитьКурсыВалютПоПериодам(КешСтарыеКурсы = Неопределено, флНовыеКурсы = Ложь)
	
	Если флНовыеКурсы Тогда
		
		НовыеКурсы = Новый Структура;
		НовыеКурсы.Вставить("Валюта", Объект.ВалютаДокумента);
		НовыеКурсы.Вставить("Кратность", Объект.КратностьДокумента);
		НовыеКурсы.Вставить("Курс", Объект.КурсДокумента);
		
		СтруктураКурсовВалют = Новый Структура;
		СтруктураКурсовВалют.Вставить("НовыеКурсы", НовыеКурсы);
		
	Иначе
		
		СтарыеКурсы = Новый Структура;
		СтарыеКурсы.Вставить("Валюта", КешСтарыеКурсы.ВалютаДокумента); 
		СтарыеКурсы.Вставить("Кратность", КешСтарыеКурсы.КратностьДокумента);
		СтарыеКурсы.Вставить("Курс", КешСтарыеКурсы.КурсДокумента);
		
		СтруктураКурсовВалют = Новый Структура;
		СтруктураКурсовВалют.Вставить("СтарыеКурсы", СтарыеКурсы);
		
	КонецЕсли; 
	
	МассивОС = Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ТаблицаДанных = ДокументОбъект.ПодготовитьТаблицуДатПринятияОС(МассивОС);
	ТаблицаПериодов = ТаблицаДанных.Скопировать(, "Период");
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсовВалют);
	
	СоответствиеКурсовИОС = Новый Соответствие;
	
	Для каждого Строка Из ТаблицаДанных Цикл
		СоответствиеКурсовИОС.Вставить(Строка.ОсновноеСредство, Курсы[Строка.Период])
	КонецЦикла; 

	Возврат СоответствиеКурсовИОС;
	
КонецФункции

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Функция получает параметры, передаваемые в обработку подбора ОС.
//
&НаСервере
Функция ЗаполнитьПараметрыПодбора()

	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ПараметрыПодбора = ДокументОбъект.ЗаполнитьПараметрыПодбора();
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект, СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетНезавершенногоСтроительства);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаКлиенте
Функция СформироватьДеревоВидовОпераций()

	КореньДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
		
	Для каждого КлЗнч Из фКэшЗначений.Перечисления.бит_му_ВидыОперацийМодернизацияОС Цикл
		
		НовСтрока = КореньДерева.Добавить();		
		НовСтрока.ВидОперации = КлЗнч.Значение;
	
	КонецЦикла;

КонецФункции // СформироватьДеревоВидовОпераций()

// Процедура выводит текст свообщений пользователю.
// 
// Параметры:
//  ТекстСообщения - Строка
// 
&НаКлиенте
Процедура ВывестиТекстСообщенийПользователю(ТекстСообщения)

	Если ТекстСообщения <> "" Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;	

КонецПроцедуры // ВывестиТекстСообщенийПользователю()

// Функция проверяет возможность заполнения параметров ОС.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   Булево
// 
&НаКлиенте
Функция ПроверитьВозможностьЗаполненияПараметров()

	МожноПерезаполнятьДанныеПоОС = ЗначениеЗаполнено(Объект.Организация);
	
	Если Не МожноПерезаполнятьДанныеПоОС Тогда
		ТекстСообщения = Нстр("ru = 'Не выбрана организация - данные по основному средству не были заполнены.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;

	Возврат МожноПерезаполнятьДанныеПоОС;
	
КонецФункции // ПроыеритьВозможностьЗаполненияПараметров()

&НаКлиенте
Процедура ВычислитьОставшийсяСрокПолезногоИспользования()
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОстСрокИспользования = ТекущиеДанные.СрокПолезногоИспользования 
										 - ТекущиеДанные.ФактСрокИспользования;
	
КонецПроцедуры // ВычислитьОставшийсяСрокПолезногоИспользования()
									 
&НаКлиенте
Процедура ВычислитьОставшийсяОбъемПродукцииРабот()
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОстОбъемПродукцииРабот = ТекущиеДанные.ОбъемПродукцииРабот 
										 - ТекущиеДанные.ФактОбъемПродукцииРабот;
	
КонецПроцедуры // ВычислитьОставшийсяОбъемПродукцииРабот()

&НаКлиенте
Процедура ВычислитьОстаточнуюСтоимость()
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОстСтоимость = ТекущиеДанные.Стоимость 
								+ ТекущиеДанные.СуммаМодернизации 
								- ТекущиеДанные.СуммаФактическогоОбесценения 
								- ТекущиеДанные.Амортизация;
	
КонецПроцедуры // ВычислитьОстаточнуюСтоимость()
                   								 
&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, ИмяТабличногоПоля, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента, ИмяТабличногоПоля, "");
		ЗначениеСубконто  = ТекущиеДанные[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура ИзменениеСубконто(Контейнер, ИмяСубконто, ЗначениеСубконто)

	  СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер
	  																				, ИмяСубконто
																					, фКоличествоСубконтоМУ);
	  
	  бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто
	  													, ИмяСубконто
														, ЗначениеСубконто
														, фКоличествоСубконтоМУ);
														
	  бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто
	  															, Контейнер
																, ИмяСубконто
																, ""
																, фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконто()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Контейнер, ИмяСубконто, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
																						  , Объект
																						  , ИмяСубконто
																						  , ЗначениеСубконто
																						  , фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
																		  , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

// Процедура окончание выбора вида операции.
// 
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если СтруктураПараметров <> Неопределено Тогда
	
		Объект.ВидОперации = СтруктураПараметров.ВидОперации;																					   
	
	КонецЕсли; 
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытииПромежуточная()

// Процедура выполняет окончательные операции по открытию формы. 
// 
&НаКлиенте
Процедура ПриОткрытииОкончание()

	// Имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Дата");
	мКэшРеквизитовФормы.Вставить("Организация"); 
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	мКэшРеквизитовФормы.Вставить("бит_ОсновноеСредство");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	        		
	// Заполнение кэша субконто и установка видимости, доступности.
	ЗаполнитьКэшНастроекСубконто(мНастройкиСубконтоСчетовМУ);
	
	// Вывод в заголовке формы вида операции и статуса документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();

КонецПроцедуры // ПриОткрытииОкончание()


#КонецОбласти

#КонецОбласти

//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
&НаСервере
Функция ОбработкаПодбора_НаСервере(ВыбранноеЗначение, ОбъектСтроительства, фЗаменятьИдентичныеСтроки);
	_объект = РеквизитФормыВЗначение("Объект");
	ТаблицаДанных = ВыбранноеЗначение.Данные;
	//МассивДокументовБУ = ТаблицаДанных.ВыгрузитьКолонку("ДокументБУ");           
	//ТаблицаДокументОсновноеСредство = бит_му_Общий.бит_му_ПолучитьСоотношениеДокументОсновноеСредство(ВыбранноеЗначение.Данные);
	МассивДокументовБУ = Новый Массив;
	ТаблицаДокументОсновноеСредство = Новый ТаблицаЗначений;
	ТаблицаДокументОсновноеСредство.Колонки.Добавить("ДокументБУ", Документы.ТипВсеСсылки());
	ТаблицаДокументОсновноеСредство.Колонки.Добавить("ВНА", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Для Каждого текЭлемент Из ТаблицаДанных.ПереченьОбъектов Цикл
		МассивДокументовБУ.Добавить(текЭлемент.ДокументБУ);
		НовСтрока = ТаблицаДокументОсновноеСредство.Добавить();
		//НовСтрока.ДокументБУ = текЭлемент.ДокументБУ;
		//НовСтрока.ВНА = ?(ЗначениеЗаполнено(текЭлемент.ВНА), текЭлемент.ВНА, Справочники.ОсновныеСредства.ПустаяСсылка());
		ЗаполнитьЗначенияСвойств(НовСтрока, текЭлемент);
	КонецЦикла;
	ТаблицаДокументОсновноеСредство.Свернуть("ДокументБУ,ВНА", "");
	
	// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
	Если ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
		Если ВыбранноеЗначение.Подбор07_0804 = Истина Тогда
			ТаблицаДвиженийДокументовРСБУ      = _объект.ПолучитьДвиженияПоХозрасчетномуРегистру07_0804(МассивДокументовБУ);				
		Иначе 
			ТаблицаДвиженийДокументовРСБУ      = _объект.ПолучитьДвиженияПоХозрасчетномуРегистру(МассивДокументовБУ, ОбъектСтроительства, ТаблицаДокументОсновноеСредство);
		КонецЕсли;	
	КонецЕсли;
	
	МассивДокументовБУ.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаДвиженийДокументовРСБУ Цикл
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ДокументРСБУ", СтрокаТаблицы.ДокументРСБУ);
		ОтборСтрок.Вставить("Номер"       , СтрокаТаблицы.Номер);
		
		ИмеющиесяСтроки = Объект.ОсновныеСредстваКонсолидированные.НайтиСтроки(ОтборСтрок);
		Если ИмеющиесяСтроки.Количество() > 0 Тогда
			Если фЗаменятьИдентичныеСтроки Тогда
				Для Каждого НайденнаяСтрока Из ИмеющиесяСтроки Цикл
					Объект.ОсновныеСредстваКонсолидированные.Удалить(НайденнаяСтрока);
				КонецЦикла;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = Объект.ОсновныеСредстваКонсолидированные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		
		ДокументВводНачальныхОстатков = ТипЗнч(СтрокаТаблицы.ДокументРСБУ) = Тип("ДокументСсылка.ВводНачальныхОстатков") 
		И СтрокаТаблицы.ДокументРСБУ.РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ОсновныеСредства");
		
		//Тртилек 30.08.2012 внедрим механизм трансляции
		Если НЕ ДокументВводНачальныхОстатков Тогда
			
			// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
			Если  ВыбранноеЗначение.Свойство("Подбор07_0804")Тогда
				Если ВыбранноеЗначение.Подбор07_0804 = Ложь Тогда 
					//}	
					СчетРСБУ = ?(СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков")
					ИЛИ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования")
					ИЛИ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств") , СтрокаТаблицы.СчетДт, СтрокаТаблицы.СчетКт);
				Иначе 
					СчетРСБУ = СтрокаТаблицы.СчетУчетаРСБУ;
				КонецЕсли;
			КонецЕсли;
			// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
			Если  ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
				Если ВыбранноеЗначение.Подбор07_0804 = Ложь Тогда
					КорСчетРСБУ = ?(НЕ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков")
					И НЕ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования")
					И НЕ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств"), СтрокаТаблицы.СчетДт, СтрокаТаблицы.СчетКт);
				КонецЕсли;
			КонецЕсли;
			ДокументСсылка = Объект.Ссылка;
			ИмяИсточника = "Хозрасчетный";
			ИмяПриемника = "бит_Дополнительный_2";
			КодПравилТрансляции = бит_МеханизмТрансляции.ПолучитьПравилаИКэш(Объект.Организация
																			,ИмяИсточника
																			,ИмяПриемника
																			,ДокументСсылка);
			стПараметры = Новый Структура;
			стПараметры.Вставить("СчетДт"		      , СчетРСБУ);
			стПараметры.Вставить("СчетКт"		      , ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
			// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
			Если  ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
				Если ВыбранноеЗначение.Подбор07_0804 = Истина Тогда
					стПараметры.Вставить("СубконтоДт1"      , СтрокаТаблицы.Субконто1);
					стПараметры.Вставить("СубконтоДт2"      , СтрокаТаблицы.Субконто2);
				Иначе 
					стПараметры.Вставить("СубконтоДт1"      , СтрокаТаблицы.СтатьяЗатрат);
					стПараметры.Вставить("СубконтоДт2"      , СтрокаТаблицы.СтатьяЗатрат);
				КонецЕсли;
			КонецЕсли;
		    //}
			стПараметры.Вставить("ПодразделениеДт"  , ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка"));
			стПараметры.Вставить("ПодразделениеКт"  , ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка"));
			стПараметры.Вставить("Сумма"            , СтрокаТаблицы.Сумма);
			
			Отказ = Ложь;
			
			ЗаписьПриемникСтруктура = бит_МеханизмТрансляции.ВыполнитьПодборСчетаПоПравилам(стПараметры
																							,Объект.Организация
																							,ИмяИсточника
																							,ИмяПриемника
																							,ДокументСсылка
																							,КодПравилТрансляции
																							,Отказ);
			///БИТ Тртилек																								
			
			
			Если ЗаписьПриемникСтруктура.ЗаписьПриемник.СчетДт = ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ПустаяСсылка")  Тогда
				
				Сообщить("Не найдено соотвествия: счет РСБУ - счет МСФО", СтатусСообщения.Внимание);
				Сообщить("1." + " Счет РСБУ " + СчетРСБУ + " Счет МСФО " + " СтатьяЗатрат " + СтрокаТаблицы.СтатьяЗатрат + "!", СтатусСообщения.Внимание);	
				Сообщить("Документ " + СтрокаТаблицы.ДокументРСБУ+ ". Не будет перенесен в таличную часть документа!", СтатусСообщения.Внимание);
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока.КорСчетМСФО = ЗаписьПриемникСтруктура.ЗаписьПриемник.СчетДт;
		Иначе
			СчетРСБУ = ?(СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновныеСредства")
			ИЛИ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ"), СтрокаТаблицы.СчетДт, СтрокаТаблицы.СчетКт);
			КорСчетРСБУ = ?(НЕ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновныеСредства")
			И НЕ СтрокаТаблицы.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ"), СтрокаТаблицы.СчетДт, СтрокаТаблицы.СчетКт);
		КонецЕсли;
		
		НоваяСтрока.СоставОС    = ПредопределенноеЗначение("Справочник.бит_му_СоставОС.ВНА_РСБУ");
		Если не ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
			Если ВыбранноеЗначение.Подбор07_0804 = Истина Тогда
				НоваяСтрока.Номер		= СтрокаТаблицы.Номер;
			КонецЕсли; 
		КонецЕсли;
	    						
		НоваяСтрока.ОсновноеСредство = Объект.бит_ОсновноеСредство;
		// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
		Если  ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
			Если ВыбранноеЗначение.Подбор07_0804 = Истина Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы)
			Иначе 
				Если ПринадлежитЭлементу_НаСервере(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновныеСредства"), КорСчетРСБУ)
					ИЛИ КорСчетРСБУ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновныеСредства")
					ИЛИ ПринадлежитЭлементу_НаСервере(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ"), КорСчетРСБУ)
					ИЛИ КорСчетРСБУ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ")  Тогда
					НоваяСтрока.СчетУчетаРСБУ = КорСчетРСБУ;
					НоваяСтрока.Субконто1     = СтрокаТаблицы.Субконто1;
					НоваяСтрока.Субконто2     = СтрокаТаблицы.Субконто2;
					НоваяСтрока.Субконто3     = СтрокаТаблицы.Субконто3;
				Иначе
					НоваяСтрока.СчетУчетаРСБУ = СчетРСБУ;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		ВыборСчетаВТабличномПоле(НоваяСтрока, "КорСчетМСФО", "КорСубконто");
		// Синхронизируем реквизиты строки ОС.
		СинхронизироватьРеквизитыСтрокиОС(НоваяСтрока, "КорСубконто");

		//Колонки = Элементы.ОсновныеСредстваКонсолидированные.Колонки;
		
		//ПриВыбореСчетаВТабличномПоле(НоваяСтрока.КорСчетМСФО,
		//											НоваяСтрока.КорСубконто1, Колонки.КорСубконто1,
		//											НоваяСтрока.КорСубконто2, Колонки.КорСубконто2,
		//											НоваяСтрока.КорСубконто3, Колонки.КорСубконто3,
		//											НоваяСтрока.КорСубконто4, Колонки.КорСубконто4);
		// 
		УстановитьОбъектВКорСубконто(НоваяСтрока.КорСубконто1, НоваяСтрока.КорСубконто2, НоваяСтрока.КорСубконто3,СтрокаТаблицы.Объект);																
												
		
		
	КонецЦикла; 
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура бит_му_ПересчитатьОбщуюСуммуМодернизации()
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.бит_му_ПересчитатьОбщуюСуммуМодернизации();
	ЗначениеВРеквизитФормы(_объект, "Объект");
КонецПроцедуры

&НаСервере
Функция ПринадлежитЭлементу_НаСервере(Родитель, Потомок)
	Возврат Потомок.ПринадлежитЭлементу(Родитель);
КонецФункции

&НаКлиенте
Процедура КоманднаяПанельОсновныеСредстваКонсолидированныеПодбор07_0804(Команда)
	ЗаполнитьИОткрытьФорму(Истина);
КонецПроцедуры
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

//БИТ Тртилек 02.07.2012 Процедура устанавливает видимость страниц в зависимости от заданного вида операции
&НаСервере
Процедура УстановитьВидимостьСтраниц()
	
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС Тогда
		Элементы.СтраницаОсновныеСредстваКонсолидированные.Видимость = Истина;
		Элементы.СтраницаПараметрыУчета.Видимость                    = Истина;
		Элементы.СтраницаОсновныеСредства.Видимость                  = Ложь;
		Элементы.ГруппаПанельОсновная.ТекущаяСтраница                = Элементы.СтраницаОсновныеСредстваКонсолидированные;
	Иначе
		Элементы.СтраницаОсновныеСредстваКонсолидированные.Видимость = Ложь;
		Элементы.СтраницаПараметрыУчета.Видимость                    = Ложь;
		Элементы.СтраницаОсновныеСредства.Видимость                  = Истина;
		Элементы.ГруппаПанельОсновная.ТекущаяСтраница                = Элементы.СтраницаОсновныеСредства;
	КонецЕсли;		
	
КонецПроцедуры

//БИТ Тртилек 21032013 Процедура устанавливает видимость дополнительной страницы Документов поступления
&НаСервере
Процедура бит_УстановитьВидимостьСтраницыДокументовПоступлений()
	
	Видимость = ЛОЖЬ;
	
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС Тогда
		Для Каждого Строка ИЗ Объект.ОсновныеСредстваКонсолидированные Цикл
			Если Строка.СоставОС.УслугиОтСоственногоЮЛ Тогда
				Видимость = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//очистим НРП ВНА в случае смены видимости с Истины на Ложь
	Если Элементы.бит_СтраницаДокументыПоступления.Видимость = Истина И Видимость = Ложь Тогда
		НаборЗаписейНРПВНА = РегистрыСведений.бит_му_НРП_ВНА.СоздатьНаборЗаписей();
		НаборЗаписейНРПВНА.Отбор.мРегистратор.Установить(Объект.Ссылка);
		НаборЗаписейНРПВНА.Записать();
	КонецЕсли;
	
	Элементы.бит_СтраницаДокументыПоступления.Видимость = Видимость;
	
КонецПроцедуры

//БИТ Тртилек 21032013 Процедура вызывает форму подбора документов
&НаКлиенте
Процедура ПодборДокументовНажатие(Команда)
	СформироватьЗапросДляДокументовПоступления();
	Парарара = ОткрытьФормуМодально("ОбщаяФорма.бит_ФормаПодбораСобственныхКонтрагентов",,ЭтаФорма);
КонецПроцедуры

//БИТ Тртилек 22032013 Процедура очищает табличную часть
&НаКлиенте
Процедура ОчисткаДокументовНажатие(Команда)
	
	Ответ = Вопрос("Будет очищена табличная часть. Выполнить очистку?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.бит_ДокументыПоступления.Очистить();
	КонецЕсли;
	
КонецПроцедуры

//БИТ Тртилек 21032013 Функция возвращает запрос документов поступления
&НаСервере
Процедура СформироватьЗапросДляДокументовПоступления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_му_НРП_ВНА.ДокументПоступления КАК Документ,
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход)
	               |				ТОГДА бит_му_НРП_ВНА.СуммаБезНДС
	               |			ИНАЧЕ бит_му_НРП_ВНА.СуммаБезНДС * -1
	               |		КОНЕЦ) КАК Сумма,
	               |	бит_му_НРП_ВНА.ДокументПоступления.СуммаДокумента КАК СуммаДокумента
	               |ПОМЕСТИТЬ ВТДокументыССуммами
	               |ИЗ
	               |	РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	               |ГДЕ
	               |	бит_му_НРП_ВНА.ДокументПоступления.Организация = &Организация
	               |	И бит_му_НРП_ВНА.ДокументПоступления ССЫЛКА Документ.бит_му_ПоступлениеТоваровУслугПоКЗ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_НРП_ВНА.ДокументПоступления,
	               |	бит_му_НРП_ВНА.ДокументПоступления.СуммаДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДокументыССуммами.Документ,
	               |	0 КАК СуммаБезНДС,
	               |	ЛОЖЬ КАК Выбрать,
	               |	ВТДокументыССуммами.СуммаДокумента КАК СуммаДокумента
	               |ИЗ
	               |	ВТДокументыССуммами КАК ВТДокументыССуммами
	               |ГДЕ
	               |	ВТДокументыССуммами.Документ.Проведен = ИСТИНА
	               |	И ВТДокументыССуммами.Сумма <> 0";
				   
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	ТЗТаблицаДокументов.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

//БИТ Тртилек 02.07.2012 Процедура - обработчик события "ПриИзменении" поля ввода "бит_ОсновноеСредство" 
&НаКлиенте
Процедура бит_ОсновноеСредствоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.бит_ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не мКэшРеквизитовФормы.бит_ОсновноеСредство = Объект.бит_ОсновноеСредство
		И Объект.ОсновныеСредстваКонсолидированные.Количество() > 0 Тогда
		
		Ответ = Вопрос("Табличная часть ""Основные средства"" будет очищена. Продолжить?"
						,РежимДиалогаВопрос.ДаНет
						,30
						,КодВозвратаДиалога.Нет); 
						
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ОсновныеСредстваКонсолидированные.Очистить();
		Иначе
			ИзвлечьИзКэша("бит_ОсновноеСредство");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	
	МассивОС = Объект.бит_ОсновноеСредство;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщить("Не выбрана организация - данные по основному средству не были заполнены.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровУчета = Новый Структура;
	СтруктураПараметровУчета.Вставить("СрокПолезногоИспользования_Старый");
	СтруктураПараметровУчета.Вставить("МетодНачисленияАмортизации_Старый");
	СтруктураПараметровУчета.Вставить("КоэффициентУскорения_Старый");
	СтруктураПараметровУчета.Вставить("ОбъемПродукцииРабот_Старый");
	СтруктураПараметровУчета.Вставить("ЛиквидационнаяСтоимость_Старый");
	СтруктураПараметровУчета.Вставить("СрокПолезногоИспользования");
	СтруктураПараметровУчета.Вставить("МетодНачисленияАмортизации");
	СтруктураПараметровУчета.Вставить("КоэффициентУскорения");
	СтруктураПараметровУчета.Вставить("ОбъемПродукцииРабот");
	СтруктураПараметровУчета.Вставить("ЛиквидационнаяСтоимость");
	СтруктураПараметровУчета.Вставить("ФактСрокИспользования");
	СтруктураПараметровУчета.Вставить("ФактОбъемПродукцииРабот");
	СтруктураПараметровУчета.Вставить("Стоимость");
	СтруктураПараметровУчета.Вставить("Амортизация");
	СтруктураПараметровУчета.Вставить("СуммаМодернизации");
	СтруктураПараметровУчета.Вставить("СуммаФактическогоОбесценения");	
	СтруктураПараметровУчета.Вставить("ОсновноеСредство", Объект.бит_ОсновноеСредство);
																	
	// Заполним данные по основным средствам.
	ЗаполнитьДанныеПоОсновнымСредствам_НаСервере(МассивОС, СтруктураПараметровУчета);
	
	Объект.бит_СрокПолезногоИспользованияСтар  = СтруктураПараметровУчета.СрокПолезногоИспользования_Старый;
	Объект.бит_НовыйСрокИспользования          = СтруктураПараметровУчета.СрокПолезногоИспользования;
	Объект.бит_ФактическийСрокИспользования    = СтруктураПараметровУчета.ФактСрокИспользования;
	Объект.бит_ОставшийсяСрокИспользования     = ?(СтруктураПараметровУчета.СрокПолезногоИспользования = Неопределено, 0, СтруктураПараметровУчета.СрокПолезногоИспользования) - ?(СтруктураПараметровУчета.ФактСрокИспользования = Неопределено, 0, СтруктураПараметровУчета.ФактСрокИспользования);
	Объект.бит_Стоимость                       = СтруктураПараметровУчета.Стоимость;
	Объект.бит_ФактическаяАмортизация          = СтруктураПараметровУчета.Амортизация;
	Объект.бит_СуммаМодернизации               = СтруктураПараметровУчета.СуммаМодернизации;
	Объект.бит_СуммаФактическогоОбесценения    = СтруктураПараметровУчета.СуммаФактическогоОбесценения;
	Объект.бит_МетодНачисленияАмортизации      = СтруктураПараметровУчета.МетодНачисленияАмортизации_Старый;
	Объект.бит_НовыйМетодНачисленияАмортизации = СтруктураПараметровУчета.МетодНачисленияАмортизации;
	Объект.бит_КоэффициентУскорения            = СтруктураПараметровУчета.КоэффициентУскорения_Старый;
	Объект.бит_НовыйКоэффициентУскорения       = СтруктураПараметровУчета.КоэффициентУскорения;
	Объект.бит_ЛиквидационнаяСтоимость         = СтруктураПараметровУчета.ЛиквидационнаяСтоимость_Старый;
	Объект.бит_НоваяЛиквидационнаяСтоимость    = СтруктураПараметровУчета.ЛиквидационнаяСтоимость;
	Объект.бит_Инвентарник                     = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.бит_ОсновноеСредство, "Код");
	Объект.бит_ОстаточнаяСтоимость             = ?(СтруктураПараметровУчета.Стоимость = Неопределено, 0, СтруктураПараметровУчета.Стоимость) - ?(СтруктураПараметровУчета.Амортизация = Неопределено, 0, СтруктураПараметровУчета.Амортизация)+?(СтруктураПараметровУчета.СуммаМодернизации = Неопределено, 0, СтруктураПараметровУчета.СуммаМодернизации);
	
	Объект.бит_ОбъектОсновногоСредства         = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.бит_ОсновноеСредство, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеПоОсновнымСредствам_НаСервере(МассивОС, СтруктураПараметровУчета)
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.ЗаполнитьДанныеПоОсновнымСредствам(МассивОС, СтруктураПараметровУчета, ЛОЖЬ);
КонецФункции

//БИТ Тртилек 08.07.2012 Процедура - обработчик события "ПриИзменении" поля ввода "СуммаМодернизации"
&НаКлиенте
Процедура ОсновныеСредстваКонсолидированныеСуммаМодернизацииПриИзменении(Элемент)
	
	бит_му_ПересчитатьОбщуюСуммуМодернизации();
	
КонецПроцедуры

//БИТ Тртилек 08.07.2012 Процедура - обработчик события "После удаления" 
&НаКлиенте
Процедура ОсновныеСредстваКонсолидированныеПослеУдаления(Элемент)
	
	бит_му_ПересчитатьОбщуюСуммуМодернизации();
	
КонецПроцедуры

//БИТ Тртилек 25.09.2012 Процедура-обработчик события "Перед началом добавления" табличного поля "ОсновныеСредстваКонсолидированные"
&НаКлиенте
Процедура ОсновныеСредстваКонсолидированныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ЗначениеЗаполнено(Объект.бит_ОсновноеСредство) Тогда
		 Сообщить("Не выбрано основное средство, добавление не возможно", СтатусСообщения.Важное);
		 Отказ = Истина;
	КонецЕсли;
	 	
КонецПроцедуры

//БИТ Тртилек 25.09.2012 Процедура-обработчик события "При начале редактирования" табличного поля "ОсновныеСредстваКонсолидированные"
&НаКлиенте
Процедура ОсновныеСредстваКонсолидированныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ОсновныеСредстваКонсолидированные.ТекущиеДанные.ОсновноеСредство = Объект.бит_ОсновноеСредство;
	КонецЕсли;
		
КонецПроцедуры

//БИТ Тртилек 25.09.2012 Процедура-обработчик события "При изменении" поля бит_НовыйСрокИспользования
&НаКлиенте
Процедура бит_НовыйСрокИспользованияПриИзменении(Элемент)
	
	Объект.бит_ОставшийсяСрокИспользования = Объект.бит_НовыйСрокИспользования - Объект.бит_ФактическийСрокИспользования;
	
КонецПроцедуры

//БИТ Тртилек 29.10.2012 Процедура - обработчик события "При изменении" поля КорСчетМСФОПриИзменении
&НаКлиенте
Процедура ОсновныеСредстваКонсолидированныеКорСчетМСФОПриИзменении(Элемент)
	ИзменениеКорСчетМСФОСервер(Элементы.ОсновныеСредстваКонсолидированные.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаСервере
Процедура ИзменениеКорСчетМСФОСервер(ИДСтроки = Неопределено)
	ТекущиеДанные = ?(ТипЗнч(ИДСтроки) = Тип("Число")
			 			, Объект.ОсновныеСредстваКонсолидированные.НайтиПоИдентификатору(ИДСтроки)
						, ИДСтроки);	
						
	ВыборСчетаВТабличномПоле(ТекущиеДанные, "КорСчетМСФО", "КорСубконто");
		
	// Синхронизируем реквизиты строки ОС.
	СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, "КорСубконто");
	
КонецПроцедуры // ИзменениеСчетаНезавершенногоСтроительстваСервер()

//БИТ Тртилек 29.10.2012 Процедура выполняет подстановку объекта в один из субконто
&НаСервере
Процедура УстановитьОбъектВКорСубконто(КорСубконто1, КорСубконто2, КорСубконто3, Объект);																
		
		ЭлементыКорСубконто = Новый Структура("КорСубконто1, КорСубконто2, КорСубконто3", КорСубконто1, КорСубконто2, КорСубконто3);
		
		Для Ном = 1 По 3 Цикл
			Если ТипЗнч(ЭлементыКорСубконто["КорСубконто"+Ном]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				ЭлементыКорСубконто["КорСубконто"+Ном] = Объект;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ КорСубконто1 = ЭлементыКорСубконто.КорСубконто1 Тогда
			КорСубконто1 = ЭлементыКорСубконто.КорСубконто1;
		КонецЕсли;
		
		Если НЕ КорСубконто2 = ЭлементыКорСубконто.КорСубконто2 Тогда
			КорСубконто2 = ЭлементыКорСубконто.КорСубконто2;
		КонецЕсли;
		
		Если НЕ КорСубконто3 = ЭлементыКорСубконто.КорСубконто3 Тогда
			КорСубконто3 = ЭлементыКорСубконто.КорСубконто3;
		КонецЕсли;
		
КонецПроцедуры

//БИТ Тртилек 23.11.2012 Процедура - обработчик события "При изменении" поля КорСчетМСФОПриИзменении
&НаКлиенте
Процедура ОсновныеСредстваКонсолидированныеСчетУчетаРСБУПриИзменении(Элемент)
	ИзменениеСчетУчетаРСБУСервер(Элементы.ОсновныеСредстваКонсолидированные.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаСервере
Процедура ИзменениеСчетУчетаРСБУСервер(ИДСтроки = Неопределено)
	ТекущиеДанные = ?(ТипЗнч(ИДСтроки) = Тип("Число")
			 			, Объект.ОсновныеСредстваКонсолидированные.НайтиПоИдентификатору(ИДСтроки)
						, ИДСтроки);	
						
	ВыборСчетаВТабличномПоле(ТекущиеДанные, "СчетУчетаРСБУ", "Субконто");
		
	// Синхронизируем реквизиты строки ОС.
	СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, "Субконто");
	
КонецПроцедуры // ИзменениеСчетаНезавершенногоСтроительстваСервер()

&НаСервере
Функция КоличествоСубконто(Счет)
	Возврат Счет.ВидыСубконто.Количество();
КонецФункции

//БИТ Тртилек 26.11.2012 процедура типизирует субконто и устанавливает его доствпность
&НаСервере
Процедура ПриВыбореСчетаВТабличномПоле(Счет, Субконто1, ЭлементДиалогаСубконто1_Имя, Субконто2, ЭлементДиалогаСубконто2_Имя, 
	Субконто3, ЭлементДиалогаСубконто3_Имя, Субконто4, ЭлементДиалогаСубконто4_Имя,  Подразделение = Неопределено, ЭлементДиалогаПодразделение = Неопределено, 
	ЭлементДиалогаСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ, ТолькоПросмотрПартииУСН = Истина) Экспорт
	
	ЭлементДиалогаСубконто1 = Элементы[ЭлементДиалогаСубконто1_Имя];
	ЭлементДиалогаСубконто2 = Элементы[ЭлементДиалогаСубконто2_Имя];
	ЭлементДиалогаСубконто3 = Элементы[ЭлементДиалогаСубконто3_Имя];
	ЭлементДиалогаСубконто4 = Элементы[ЭлементДиалогаСубконто4_Имя];
	
	ЭлементыСубконто = Новый Структура(
		"Субконто1,ЭлементДиалогаСубконто1,Субконто2,ЭлементДиалогаСубконто2,Субконто3,ЭлементДиалогаСубконто3, Субконто4,ЭлементДиалогаСубконто4", 
		Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3, Субконто4, ЭлементДиалогаСубконто4);
	
	ЧислоАктивныхСубконто = КоличествоСубконто(Счет);
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		
		Если ТипЗнч(ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч]) = Тип("ПолеФормы") Тогда
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		Иначе
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ЭлементУправления.ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		КонецЕсли; 
			
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 4 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
	Если ЭлементДиалогаПодразделение <> Неопределено Тогда
		ЭлементДиалогаПодразделение.ТолькоПросмотр = НЕ Счет.УчетПоПодразделениям;
	КонецЕсли;
	
	Если ЭлементДиалогаСчет <> Неопределено Тогда
		ЭлементДиалогаСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;

	Если Не Субконто1 = ЭлементыСубконто.Субконто1 Тогда
		Субконто1 = ЭлементыСубконто.Субконто1;
	КонецЕсли;
	Если Не Субконто2 = ЭлементыСубконто.Субконто2 Тогда
		Субконто2 = ЭлементыСубконто.Субконто2;
	КонецЕсли;
	Если Не Субконто3 = ЭлементыСубконто.Субконто3 Тогда
		Субконто3 = ЭлементыСубконто.Субконто3;
	КонецЕсли;
	Если Не Субконто4 = ЭлементыСубконто.Субконто4 Тогда
		Субконто4 = ЭлементыСубконто.Субконто4;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

//БИТ Тртилек 22082013 обработчик события ПриИзменении поля ввода Документ реализации поступления
&НаКлиенте
Процедура бит_ДокументыПоступленияДокументПоступленияПриИзменении(Элемент)
	ДанныеСтроки = Элементы.бит_ДокументыПоступления.ТекущиеДанные;
	Если ЗначениеЗаполнено(ДанныеСтроки.ДокументПоступления) Тогда
		
		ДокументСсылка = ДанныеСтроки.ДокументПоступления;
		ТипДокумента = ТипЗнч(ДокументСсылка);
		ДанныеСтроки.бит_Сумма = ДокументСсылка.СуммаДокумента;		
		ДанныеСтроки.ДатаДокументаПоступления = ДокументСсылка.Дата;
				
	Иначе
		
		ДанныеСтроки.бит_Сумма = 0;
		ДанныеСтроки.ДатаДокументаПоступления = '00010101';
		
	КонецЕсли;
	
КонецПроцедуры

//БИТ Тртилек 22082013 обработчик события НачалоВыбора поля ввода Документ реализации поступления
&НаКлиенте
Процедура бит_ДокументыПоступленияДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ФормаВыбора = ПолучитьФорму("Документ.бит_му_ПоступлениеТоваровУслугПоКЗ.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Организация", Объект.Организация)), ЭтаФорма);
	ВыбранныйДокумент = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.бит_ТабличноеПолеДокументыПоступления.ТекущиеДанные;
	ДанныеСтроки.ДокументПоступления = ВыбранныйДокумент;
	ДанныеСтроки.ДатаДокументаПоступления = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "Дата");
	ДанныеСтроки.бит_Сумма = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "СуммаДокумента");
	
КонецПроцедуры

//БИТ Тртилек 27082013 обработчик события приокончанииредактирования табличного поля ОсновныеСредстваКонсолидированные
&НаКлиенте
Процедура ОсновныеСредстваКонсолидированныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	бит_УстановитьВидимостьСтраницыДокументовПоступлений();	
КонецПроцедуры

//БИТ Тртилек 06092013 процедура показывает "движения" по НРП ВНА
&НаКлиенте
Процедура ПоказатьНРПВНА(Команда)
	ФормаСпискаНРПВНА = ПолучитьФорму("РегистрСведений.бит_му_НРП_ВНА.ФормаСписка", Новый Структура("Отбор", Новый Структура("мРегистратор", Объект.Ссылка)), ЭтаФорма);
	ФормаСпискаНРПВНА.Открыть();
КонецПроцедуры

//bit avseeenkov 15.05.2014 Доработка по ОС
&НаСервере
Функция ПолучитьСкладПоОбъекту()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.бит_ОсновноеСредство.Объект);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат ?(Результат.Количество() = 0, Справочники.Склады.ПустаяСсылка(), Результат[0].Ссылка);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИОткрытьФорму(Счет07_0804 = Ложь)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийМодернизацияОС.ОсновныеСредства") Тогда
		ВидКласса = ПредопределенноеЗначение("Перечисление.бит_му_ВидыКлассовОС.ОсновныеСредства");
	Иначе
		ВидКласса = ПредопределенноеЗначение("Перечисление.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность");
	КонецЕсли;
	
	стПараметры = Новый Структура;
	стПараметры.Вставить("ДатаНачала"		, НачалоМесяца(Объект.Дата));
	стПараметры.Вставить("ДатаОкончания"	, КонецМесяца(Объект.Дата));
	стПараметры.Вставить("Режим"			, ПредопределенноеЗначение("Перечисление.бит_му_РежимыПодбораВНА.МодернизацияОС"));
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС") Тогда
		стПараметры.Вставить("ДатаНачала"		, '19800101');
		// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {

		Если Счет07_0804 Тогда 
			стПараметры.Вставить("Склад"			, ПолучитьСкладПоОбъекту());
			стПараметры.Вставить("Подбор07_0804"			, Истина);
		Иначе
			стПараметры.Вставить("ОбъектСтроительства"			, ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.бит_ОсновноеСредство, "Объект"));
	    КонецЕсли;
		
		стПараметры.Вставить("Организация"	, Объект.Организация);
		стПараметры.Вставить("МОЛ"			, Объект.МОЛ);
		стПараметры.Вставить("Местонахождение", Объект.Подразделение);
		стПараметры.Вставить("ВидКласса"		, ВидКласса);
		стПараметры.Вставить("МетодНачисленияАмортизации", Объект.бит_МетодНачисленияАмортизации);
		стПараметры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	КонецЕсли;
	
	//БИТ Тртилек 02.07.2012 в зависимости от вида операции получаем соответствующую форму выбора
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС") Тогда
		ФормаПодбора = ПолучитьФорму("Обработка.бит_му_ПодборВНАПринятиеМодернизация.Форма.Форма", стПараметры, ЭтаФорма);
	Иначе
		ФормаПодбора = ПолучитьФорму("Обработка.бит_му_ПодборВНА.Форма", стПараметры, ЭтаФорма);
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС") Тогда
		ФормаПодбора.Элементы.ДатаНачала.Доступность = ЛОЖЬ;
	КонецЕсли;		
		///БИТ Тртилек
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
		
	
	//ФормаПодбора.Объект.Режим           = ПредопределенноеЗначение("Перечисление.бит_му_РежимыПодбораВНА.МодернизацияОС");
	//ФормаПодбора.Объект.ДатаНачала      = НачалоМесяца(Объект.Дата);
	//ФормаПодбора.Объект.ДатаОкончания   = КонецМесяца(Объект.Дата);
	////БИТ Тртилек 02.07.2012 устанавливаем значения реквизитов
	//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС") Тогда
	//	ФормаПодбора.Объект.ДатаНачала      = '19800101';
	//	ФормаПодбора.Элементы.ДатаНачала.Доступность = ЛОЖЬ;
	//	// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
	//	Если Счет07_0804 Тогда 
	//		ФормаПодбора.Объект.Склад = ПолучитьСкладПоОбъекту();
	//		ФормаПодбора.Подбор07_0804 = Истина;
	//	Иначе 
	//		ФормаПодбора.Объект.ОбъектСтроительства = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.бит_ОсновноеСредство, "Объект");
	//   КонецЕсли;
	//	
	//	//}

	//	///БИТ Тртилек
	//	ФормаПодбора.Объект.Организация     = Объект.Организация;
	//	ФормаПодбора.Объект.МОЛ             = Объект.МОЛ;
	//	ФормаПодбора.Объект.Местонахождение = Объект.Подразделение;
	//	ФормаПодбора.Объект.ВидКласса 		 = ВидКласса;
	//	ФормаПодбора.Объект.ВалютаДокумента  = Объект.ВалютаДокумента;
	//КонецЕсли;
	
	ФормаПодбора.Открыть();
КонецПроцедуры

// + СБ ПискуноваВ 09.07.2016 #2872
&НаСервере
Процедура СБ_ЗаполнитьПоКарточкеСчетаНаСервере(СписокДокументов)
	
	ДанныеРСБУ = ПолучитьДанныеРСБУ(СписокДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_Дополнительный_2Обороты.Регистратор КАК ДокументРСБУ,
	|	бит_Дополнительный_2Обороты.СуммаРеглОборот КАК Сумма,
	|	бит_Дополнительный_2Обороты.Субконто1 КАК КорСубконто1,
	|	бит_Дополнительный_2Обороты.Субконто2 КАК КорСубконто2,
	|	бит_Дополнительный_2Обороты.Субконто3 КАК КорСубконто3,
	|	бит_Дополнительный_2Обороты.Субконто4 КАК КорСубконто4,
	|	бит_Дополнительный_2Обороты.НомерСтроки,
	|	бит_Дополнительный_2Обороты.Регистратор.Номер КАК Номер,
	|	бит_Дополнительный_2Обороты.Счет КАК КорСчетМСФО
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			Счет В ИЕРАРХИИ (&Счет122и123),
	|			,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
	|				КОНЕЦ,
	|			,
	|			) КАК бит_Дополнительный_2Обороты
	|ГДЕ
	|	бит_Дополнительный_2Обороты.Регистратор В(&СписокДокументов)
	|	И бит_Дополнительный_2Обороты.Регистратор <> &ТекущийОбъект";
	
	СчетаБУ = Новый Массив;
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства); // счет01
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ); // счет03
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств); // счет08.03
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков); // счет08.01
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования); // счет08.02
	//СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств); // счет08.04
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств); // счет08.04.01  //ОК Довбешка Т. 17.04.2017 исправление ошибки после обновления релиза
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке); // счет07
	
	
	
	МассивСчетов122И123  = Новый Массив;
	МассивСчетов122И123.Добавить(ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоЗдания); //122
	МассивСчетов122И123.Добавить(ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоОборудование); //123
	
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("КорСчет", ПланыСчетов.бит_Дополнительный_2.Служебный); //служебный
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Дата('20140101'))); //по заявке 1 января 2014   
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Субконто1", Объект.бит_ОбъектОсновногоСредства);
	Запрос.УстановитьПараметр("Счет122", ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоЗдания);
	Запрос.УстановитьПараметр("Счет123", ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоОборудование);
	Запрос.УстановитьПараметр("Счет1", ПланыСчетов.бит_Дополнительный_2.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("Счет122и123", МассивСчетов122И123);
	Запрос.УстановитьПараметр("СчетаБУ", СчетаБУ);
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ТекущийОбъект", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Сумма <> 0 и ВыборкаДетальныеЗаписи.Сумма <> Неопределено Тогда 
			НовСтрока = Объект.ОсновныеСредстваКонсолидированные.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаДетальныеЗаписи );
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДокументРСБУ",ВыборкаДетальныеЗаписи.ДокументРСБУ);
			//ПараметрыОтбора.Вставить("Сумма",ВыборкаДетальныеЗаписи.Сумма);
			ПараметрыОтбора.Вставить("НомерСтроки",ВыборкаДетальныеЗаписи.НомерСтроки);
			
			МассивНайденныхСтрок = ДанныеРСБУ.найтистроки(ПараметрыОтбора);
			Если МассивНайденныхСтрок.Количество() > 0  Тогда
				//ЗаполнитьЗначенияСвойств(МассивНайденныхСтрок[0],НовСтрока );
				НовСтрока.СчетУчетаРСБУ = МассивНайденныхСтрок[0].СчетУчетаРСБУ;
				НовСтрока.Субконто1 = МассивНайденныхСтрок[0].Субконто1;
				НовСтрока.Субконто2 = МассивНайденныхСтрок[0].Субконто2;					
				НовСтрока.Субконто3 = МассивНайденныхСтрок[0].Субконто3;
			КонецЕсли;
			
			//НовСтрока.ОбъектМСФО = СтрокаТаблицы.ОбъектМСФО;
			Если ВыборкаДетальныеЗаписи.КорСчетМСФО = ПланыСчетов.бит_Дополнительный_2.КредитноеОбеспечение   Тогда   //Если счет 12202, то счет РСБУ не заполняем и состав ОС другой
				НовСтрока.СоставОС = Справочники.бит_му_СоставОС.НайтиПоНаименованию("Капитализированные %%");
				НовСтрока.СчетУчетаРСБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка(); 
			Иначе			
				НовСтрока.СоставОС = Справочники.бит_му_СоставОС.ВНА_РСБУ;
			КонецЕсли;
			//НовСтрока.СчетУчетаРСБУ = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;  	  
			НовСтрока.ОсновноеСредство = Объект.бит_ОсновноеСредство;
			НовСтрока.ОсновноеСредствоПодбор =Объект.бит_ОсновноеСредство;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СБ_ЗаполнитьПоКарточкеСчетаОС(Команда)  
	
	ПараметрыПодбора  =  Новый Структура;
	ПараметрыПодбора.Вставить("ОбъектСтроительства",  Объект.бит_ОбъектОсновногоСредства);
	ПараметрыПодбора.Вставить("ДатаДок",Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",Объект.Организация);
	ПараметрыПодбора.Вставить("Док",Объект.Ссылка);
	ПараметрыПодбора.Вставить("ТипДокумента",Строка(ТипЗнч(Объект.Ссылка)));
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина); 
	
	ОткрытьФорму("ОбщаяФорма.СБ_ФормаПодбораДокументовДляОС",ПараметрыПодбора,Элементы.ОсновныеСредстваКонсолидированные);
	
КонецПроцедуры 


&НаСервере
Функция  ПолучитьДанныеРСБУ(СписокДокументов)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_Дополнительный_2Обороты.Регистратор КАК ДокументРСБУ,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1, СБ_КорректировкаРСБУОбороты.Субконто1) КАК Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто2, СБ_КорректировкаРСБУОбороты.Субконто2) КАК Субконто2,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Счет, СБ_КорректировкаРСБУОбороты.Счет) КАК СчетУчетаРСБУ,
	|	бит_Дополнительный_2Обороты.НомерСтроки,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто3, СБ_КорректировкаРСБУОбороты.Субконто3) КАК Субконто3
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			Счет В ИЕРАРХИИ (&Счет122),
	|			,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
	|				КОНЕЦ,
	|			,
	|			) КАК бит_Дополнительный_2Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Запись,
	|				Счет В ИЕРАРХИИ (&СчетаБУ),
	|				,
	|				ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
	|				КОНЕЦ,
	|				,
	|				) КАК ХозрасчетныйОбороты
	|		ПО бит_Дополнительный_2Обороты.Регистратор = ХозрасчетныйОбороты.Регистратор
	|			И бит_Дополнительный_2Обороты.СуммаРеглОборот = ХозрасчетныйОбороты.СуммаОборот
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.СБ_КорректировкаРСБУ.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Запись,
	|				Счет В ИЕРАРХИИ (&СчетаБУ),
	|				,
	|				ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
	|				КОНЕЦ,
	|				,
	|				) КАК СБ_КорректировкаРСБУОбороты
	|		ПО бит_Дополнительный_2Обороты.Регистратор = СБ_КорректировкаРСБУОбороты.Регистратор
	|			И бит_Дополнительный_2Обороты.СуммаРеглОборот = СБ_КорректировкаРСБУОбороты.СуммаОборот
	|ГДЕ
	|	бит_Дополнительный_2Обороты.Регистратор В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_Дополнительный_2Обороты.Регистратор,
	|	бит_Дополнительный_2Обороты.КорСубконто1,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто2, СБ_КорректировкаРСБУОбороты.Субконто2),
	|	ХозрасчетныйОбороты.Счет,
	|	бит_Дополнительный_2Обороты.НомерСтроки,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто3, СБ_КорректировкаРСБУОбороты.Субконто3)
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			Счет В ИЕРАРХИИ (&Счет123),
	|			,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
	|				КОНЕЦ,
	|			,
	|			) КАК бит_Дополнительный_2Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Запись,
	|				Счет В ИЕРАРХИИ (&СчетаБУ),
	|				,
	|				ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
	|				КОНЕЦ,
	|				,
	|				) КАК ХозрасчетныйОбороты
	|		ПО бит_Дополнительный_2Обороты.Регистратор = ХозрасчетныйОбороты.Регистратор
	|			И бит_Дополнительный_2Обороты.СуммаРеглОборот = ХозрасчетныйОбороты.СуммаОборот
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.СБ_КорректировкаРСБУ.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Запись,
	|				Счет В ИЕРАРХИИ (&СчетаБУ),
	|				,
	|				ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
	|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
	|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
	|				КОНЕЦ,
	|				,
	|				) КАК СБ_КорректировкаРСБУОбороты
	|		ПО бит_Дополнительный_2Обороты.Регистратор = СБ_КорректировкаРСБУОбороты.Регистратор
	|			И бит_Дополнительный_2Обороты.СуммаРеглОборот = СБ_КорректировкаРСБУОбороты.СуммаОборот
	|ГДЕ
	|	бит_Дополнительный_2Обороты.Регистратор В(&СписокДокументов)";
	
	СчетаБУ = Новый Массив;
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства); // счет01
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ); // счет03
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств); // счет08.03
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков); // счет08.01
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования); // счет08.02
	//СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств); // счет08.04
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств); // счет08.04.01      //ОК Довбешка Т. 17.04.2017 исправление ошибки после обновления релиза
	СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке); // счет07
	
	
	МассивСчетов122И123  = Новый Массив;
	МассивСчетов122И123.Добавить(ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоЗдания); //122
	МассивСчетов122И123.Добавить(ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоОборудование); //123
	
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("КорСчет", ПланыСчетов.бит_Дополнительный_2.Служебный); //служебный
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Дата('20140101'))); //по заявке 1 января 2014   
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Субконто1", Объект.бит_ОбъектОсновногоСредства);
	Запрос.УстановитьПараметр("Счет122", ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоЗдания);
	Запрос.УстановитьПараметр("Счет123", ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоОборудование);
	Запрос.УстановитьПараметр("Счет1", ПланыСчетов.бит_Дополнительный_2.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("Счет122и123", МассивСчетов122И123);
	Запрос.УстановитьПараметр("СчетаБУ", СчетаБУ);	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
КонецФункции

&НаКлиенте
Процедура ОсновныеСредстваКонсолидированныеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	СписокДокументов = ВыбранноеЗначение;
	Если  Объект.ОсновныеСредстваКонсолидированные.Количество()>0 Тогда
		Ответ = Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ОсновныеСредстваКонсолидированные.Очистить();
			СБ_ЗаполнитьПоКарточкеСчетаНаСервере(СписокДокументов);  
		КонецЕсли;
	Иначе
		СБ_ЗаполнитьПоКарточкеСчетаНаСервере(СписокДокументов); 
	КонецЕсли;
	//Объект.бит_окей_ПервоначальнаяСтоимость = Объект.бит_окей_СоставОсновныхСредств.Итог("Сумма");
	
КонецПроцедуры
// - СБ ПискуноваВ 09.07.2016 #2872


// ОК Довбешка Т. 06.02.2018 АТ-1639166
// Процедура устанавливает подменю выбора операции.
Процедура ДобавитьКнопкуНаФорму(Элементы, Команды, ИмяКнопки, Синоним, ИмяДействия
	, ГруппаРодитель = Неопределено, ТолькоВоВсехДействиях = Ложь, Картинка = Неопределено, Пометка = Ложь)

	ИмяКоманды = "Команда" + ИмяКнопки;
	
	// Добавляем новую команду обработки выбора вида операции.
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Действие = ИмяДействия;
	Если Картинка <> Неопределено Тогда
		Команда.Картинка = Картинка;
	КонецЕсли;
	
	Если ГруппаРодитель = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"));
	Иначе	
	    НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаРодитель);
	КонецЕсли;  	
	НоваяКнопка.Вид		   				= ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды 				= ИмяКоманды;
	НоваяКнопка.Заголовок  				= Синоним;
	НоваяКнопка.ТолькоВоВсехДействиях 	= ТолькоВоВсехДействиях;
	НоваяКнопка.Пометка 			    = Пометка;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()
//ОК

//БИТ Тртилек 25.09.2012 кэшируем дополнительно основное средство для проверки заполнения
мКэшРеквизитовФормы = Новый Структура("Дата, Организация, бит_ОсновноеСредство");
///БИТ Тртилек