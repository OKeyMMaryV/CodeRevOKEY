#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	// Подсчитаем и запишем сумму документа.
	СуммаДокумента = ДанныеРаспределения.Итог("СуммаПогашения");
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	 
	
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= Документы.бит_му_ЗачетАвансовПоЛизингу.ПодготовитьТаблицыДокумента(Ссылка);	
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура заполняет табличную часть "ДанныеРеклассификации".
// 
Процедура ЗаполнитьТчДанныеРеклассификации() Экспорт
	
	ДанныеРаспределения.Очистить();
	
	РезультатЗапроса = ПолучитьРезультатЗапросаПоЗачетуАвансов();
	
	Выборка = РезультатЗапроса.Выбрать(); 	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеРаспределения.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		СтавкаНДСЧисло = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Выборка.СтавкаНДСПоДоговору);
		
		СуммаНДСАванса 			= бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Выборка.СуммаАвансаСНДС, Истина, Истина, СтавкаНДСЧисло);
		ВалютнаяСуммаНДСАванса 	= бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Выборка.ВалютнаяСуммаАвансаСНДС, Истина, Истина, СтавкаНДСЧисло);
				
		НоваяСтрока.СуммаАванса			= Выборка.СуммаАвансаСНДС - СуммаНДСАванса;
		НоваяСтрока.ВалютнаяСуммаАванса = Выборка.ВалютнаяСуммаАвансаСНДС - ВалютнаяСуммаНДСАванса;
				
		НоваяСтрока.СуммаПогашенияПроцентов 		= Мин(НоваяСтрока.СуммаАванса, НоваяСтрока.СуммаПроцентов);
		НоваяСтрока.ВалютнаяСуммаПогашенияПроцентов = Мин(НоваяСтрока.ВалютнаяСуммаАванса, НоваяСтрока.ВалютнаяСуммаПроцентов);

		Если НоваяСтрока.СуммаАванса > НоваяСтрока.СуммаПогашенияПроцентов Тогда
			НоваяСтрока.СуммаПогашения         = НоваяСтрока.СуммаАванса - НоваяСтрока.СуммаПогашенияПроцентов;
			НоваяСтрока.ВалютнаяСуммаПогашения = НоваяСтрока.ВалютнаяСуммаАванса - НоваяСтрока.ВалютнаяСуммаПогашенияПроцентов;
		Иначе
			НоваяСтрока.СуммаПогашения         = 0;
			НоваяСтрока.ВалютнаяСуммаПогашения = 0;
		КонецЕсли; 
				
	КонецЦикла;				

КонецПроцедуры // ЗаполнитьТчДанныеРеклассификации()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, Организация
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	// Получим валюту международного учета.
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	ИзменениеВалютыМодуль();
	
	// Заполняет табличную часть "ДанныеРеклассификации"
	ЗаполнитьТчДанныеРеклассификации();	

КонецПроцедуры // ЗаполнитьДокумент()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Функция выполняет запрос для получения данных по зачету авансов.
// 
// Параметры:
// 	нет
// 
// Возвращаемое значение:
// 	Результат - результатЗапроса
// 
Функция ПолучитьРезультатЗапросаПоЗачетуАвансов()
	
	Запрос = Новый Запрос;
	
	ПорядокСубконто = Новый Массив;
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ДоговорыКонтрагентов);
	
	Запрос.УстановитьПараметр("Организация"		, Организация);
	Запрос.УстановитьПараметр("ДатаДокумента"	, Дата);
	Запрос.УстановитьПараметр("КонецДняДатаДок"	, Дата);
	Запрос.УстановитьПараметр("НачалоПериода"	, НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода"	, КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ТипДоговора"		, Справочники.бит_ТипыДоговоров.АрендаОС);
	Запрос.УстановитьПараметр("ПорядокСубконто"	, ПорядокСубконто);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СтавкаНДСПоДоговору) КАК СтавкаНДСПоДоговору,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетУчетаАванса) КАК СчетУчетаАванса,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетДолгосрочныхОбязательств) КАК СчетДолгосрочныхОбязательств,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетКраткосрочныхОбязательств) КАК СчетКраткосрочныхОбязательств,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетКраткосрочныхПроцентов) КАК СчетКраткосрочныхПроцентов
	|ПОМЕСТИТЬ ВидыПараметровФинИнструментов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_му_ПараметрыФинИнструментовСрезПоследних.Параметр = ВидыПараметровФинИнструментов.СтавкаНДСПоДоговору
	|				ТОГДА бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК СтавкаНДСПоДоговору,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_му_ПараметрыФинИнструментовСрезПоследних.Параметр = ВидыПараметровФинИнструментов.СчетУчетаАванса
	|				ТОГДА бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК СчетУчетаАванса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_му_ПараметрыФинИнструментовСрезПоследних.Параметр = ВидыПараметровФинИнструментов.СчетДолгосрочныхОбязательств
	|				ТОГДА бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК СчетДолгосрочныхОбязательств,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_му_ПараметрыФинИнструментовСрезПоследних.Параметр = ВидыПараметровФинИнструментов.СчетКраткосрочныхОбязательств
	|				ТОГДА бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК СчетКраткосрочныхОбязательств,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_му_ПараметрыФинИнструментовСрезПоследних.Параметр = ВидыПараметровФинИнструментов.СчетКраткосрочныхПроцентов
	|				ТОГДА бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК СчетКраткосрочныхПроцентов,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов
	|ПОМЕСТИТЬ ПараметрыДоговоров
	|ИЗ
	|	ВидыПараметровФинИнструментов КАК ВидыПараметровФинИнструментов,
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&ДатаДокумента, ) КАК бит_му_ПараметрыФинИнструментовСрезПоследних
	|		ПО ДоговорыКонтрагентов.Ссылка = бит_му_ПараметрыФинИнструментовСрезПоследних.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ДоговорыКонтрагентов.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.бит_ТипДоговора = &ТипДоговора
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.Ссылка,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОборотыДтКтПоАвансам.СубконтоДт1 КАК Контрагент,
	|	ПараметрыДоговоров.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПараметрыДоговоров.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПараметрыДоговоров.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ПараметрыДоговоров.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотыДтКтПоАвансам.ВалютнаяСуммаОборотДт, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ОборотыДтКтПоАвансам.СуммаМУОборот, 0) / ЕСТЬNULL(ОборотыДтКтПоАвансам.ВалютнаяСуммаОборотДт, 0)
	|	КОНЕЦ КАК КурсАванса,
	|	ПараметрыДоговоров.СтавкаНДСПоДоговору КАК СтавкаНДСПоДоговору,
	|	ЕСТЬNULL(ОборотыДтКтПоАвансам.СуммаМУОборот, 0) КАК СуммаАвансаСНДС,
	|	ЕСТЬNULL(ОборотыДтКтПоАвансам.ВалютнаяСуммаОборотДт, 0) КАК ВалютнаяСуммаАвансаСНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотыКтДолгосрочныеОбязательства.СуммаМУОборот, 0) = 0
	|			ТОГДА ЕСТЬNULL(ОстаткиПоКраткосрочнымОбязательствам.СуммаМУОстатокКт, 0)
	|		ИНАЧЕ ЕСТЬNULL(ОстаткиПоДолгосрочнымОбязательствам.СуммаМУОстатокКт, 0)
	|	КОНЕЦ КАК СуммаОбязательств,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотыКтДолгосрочныеОбязательства.СуммаМУОборот, 0) = 0
	|			ТОГДА ЕСТЬNULL(ОстаткиПоКраткосрочнымОбязательствам.ВалютнаяСуммаОстатокКт, 0)
	|		ИНАЧЕ ЕСТЬNULL(ОстаткиПоДолгосрочнымОбязательствам.ВалютнаяСуммаОстатокКт, 0)
	|	КОНЕЦ КАК ВалютнаяСуммаОбязательств,
	|	ПараметрыДоговоров.СчетУчетаАванса КАК СчетУчетаАвансов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотыКтДолгосрочныеОбязательства.СуммаМУОборот, 0) = 0
	|			ТОГДА ПараметрыДоговоров.СчетКраткосрочныхОбязательств
	|		ИНАЧЕ ПараметрыДоговоров.СчетДолгосрочныхОбязательств
	|	КОНЕЦ КАК СчетУчетаОбязательств,
	|	ОстаткиПоПроцентам.Счет КАК СчетУчетаПроцентов,
	|	ЕСТЬNULL(ОстаткиПоПроцентам.СуммаМУОстатокКт, 0) КАК СуммаПроцентов,
	|	ЕСТЬNULL(ОстаткиПоПроцентам.ВалютнаяСуммаОстатокКт, 0) КАК ВалютнаяСуммаПроцентов
	|ИЗ
	|	ПараметрыДоговоров КАК ПараметрыДоговоров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.ОборотыДтКт(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				,
	|				,
	|				СчетКт В
	|					(ВЫБРАТЬ
	|						ПараметрыДоговоров.СчетДолгосрочныхОбязательств
	|					ИЗ
	|						ПараметрыДоговоров КАК ПараметрыДоговоров),
	|				&ПорядокСубконто,
	|				Организация = &Организация) КАК ОборотыКтДолгосрочныеОбязательства
	|		ПО ПараметрыДоговоров.ДоговорКонтрагента = ОборотыКтДолгосрочныеОбязательства.СубконтоКт2
	|			И ПараметрыДоговоров.СчетДолгосрочныхОбязательств = ОборотыКтДолгосрочныеОбязательства.СчетКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&КонецДняДатаДок,
	|				Счет В
	|					(ВЫБРАТЬ
	|						ПараметрыДоговоров.СчетДолгосрочныхОбязательств КАК СчетОбязательств
	|					ИЗ
	|						ПараметрыДоговоров КАК ПараметрыДоговоров),
	|				&ПорядокСубконто,
	|				Организация = &Организация) КАК ОстаткиПоДолгосрочнымОбязательствам
	|		ПО ПараметрыДоговоров.ДоговорКонтрагента = ОстаткиПоДолгосрочнымОбязательствам.Субконто2
	|			И ПараметрыДоговоров.СчетДолгосрочныхОбязательств = ОстаткиПоДолгосрочнымОбязательствам.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&КонецДняДатаДок,
	|				Счет В
	|					(ВЫБРАТЬ
	|						ПараметрыДоговоров.СчетКраткосрочныхОбязательств КАК СчетОбязательств
	|					ИЗ
	|						ПараметрыДоговоров КАК ПараметрыДоговоров),
	|				&ПорядокСубконто,
	|				Организация = &Организация) КАК ОстаткиПоКраткосрочнымОбязательствам
	|		ПО ПараметрыДоговоров.ДоговорКонтрагента = ОстаткиПоКраткосрочнымОбязательствам.Субконто2
	|			И ПараметрыДоговоров.СчетКраткосрочныхОбязательств = ОстаткиПоКраткосрочнымОбязательствам.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.ОборотыДтКт(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				СчетДт В
	|					(ВЫБРАТЬ
	|						ПараметрыДоговоров.СчетУчетаАванса
	|					ИЗ
	|						ПараметрыДоговоров КАК ПараметрыДоговоров),
	|				&ПорядокСубконто,
	|				,
	|				,
	|				Организация = &Организация) КАК ОборотыДтКтПоАвансам
	|		ПО ПараметрыДоговоров.СчетУчетаАванса = ОборотыДтКтПоАвансам.СчетДт
	|			И ПараметрыДоговоров.ДоговорКонтрагента = ОборотыДтКтПоАвансам.СубконтоДт2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&КонецДняДатаДок,
	|				Счет В
	|					(ВЫБРАТЬ
	|						ПараметрыДоговоров.СчетКраткосрочныхПроцентов
	|					ИЗ
	|						ПараметрыДоговоров КАК ПараметрыДоговоров),
	|				&ПорядокСубконто,
	|				Организация = &Организация) КАК ОстаткиПоПроцентам
	|		ПО ПараметрыДоговоров.ДоговорКонтрагента = ОстаткиПоПроцентам.Субконто2
	|			И ПараметрыДоговоров.СчетКраткосрочныхПроцентов = ОстаткиПоПроцентам.Счет";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьРезультатЗапросаПоЗачетуАвансов()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаДанных = СтруктураТаблиц.ДанныеРаспределения;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СформироватьДвиженияПоЗачетуАванса(СтрокаТаблицы, СтруктураШапкиДокумента, СтруктураКурсыВалют);
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура СформироватьДвиженияПоЗачетуАванса(СтрокаТаблицы, СтруктураШапкиДокумента, СтруктураКурсыВалют)
	
	Если СтрокаТаблицы.СуммаПогашенияПроцентов>0 Тогда
		СчетДт = СтрокаТаблицы.СчетУчетаПроцентов;
		СчетКт = СтрокаТаблицы.СчетУчетаАвансов;
		
		Запись = Движения.бит_Дополнительный_2.Добавить();
		
		// Заполнение атрибутов записи.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
		СтруктураПараметров.Вставить("Валюта",      СтрокаТаблицы.ВалютаВзаиморасчетов);
	    СтруктураПараметров.Вставить("СчетДт",      СчетДт);
		СтруктураПараметров.Вставить("СчетКт",      СчетКт);
		СтруктураПараметров.Вставить("Сумма",       СтрокаТаблицы.ВалютнаяСуммаПогашенияПроцентов);
		СтруктураПараметров.Вставить("Содержание",  НСтр("ru = 'Погашение процентов по лизингу'"));
											 
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);
		
		// Заполним аналитику счета Дт и Кт.
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
		
		СтруктураПараметров.Вставить("Валюта", СтруктураШапкиДокумента.ВалютаДокумента);
		СтруктураПараметров.Вставить("Сумма" , СтрокаТаблицы.СуммаПогашенияПроцентов);
		
		// Выполним валютные пересчеты.
		бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	КонецЕсли;

	Если СтрокаТаблицы.СуммаПогашения>0 Тогда		
		СчетДт = СтрокаТаблицы.СчетУчетаОбязательств;
		СчетКт = СтрокаТаблицы.СчетУчетаАвансов;
		
		Запись = Движения.бит_Дополнительный_2.Добавить();
		
		// Заполнение атрибутов записи.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
		СтруктураПараметров.Вставить("Валюта",      СтрокаТаблицы.ВалютаВзаиморасчетов);
	    СтруктураПараметров.Вставить("СчетДт",      СчетДт);
		СтруктураПараметров.Вставить("СчетКт",      СчетКт);
		СтруктураПараметров.Вставить("Сумма",       СтрокаТаблицы.ВалютнаяСуммаПогашения);
		СтруктураПараметров.Вставить("Содержание",  НСтр("ru = 'Зачет аванса по лизингу'"));
											 
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);
		
		// Заполним аналитику счета Дт и Кт.
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
		
		СтруктураПараметров.Вставить("Валюта", СтруктураШапкиДокумента.ВалютаДокумента);
		СтруктураПараметров.Вставить("Сумма" , СтрокаТаблицы.СуммаПогашения);
		
		// Выполним валютные пересчеты.
		бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
