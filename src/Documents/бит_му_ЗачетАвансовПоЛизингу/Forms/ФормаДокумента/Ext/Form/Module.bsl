
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	Если Параметры.Ключ.Пустая() Тогда  		
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО(); 
		УстановитьСостояниеДокумента();
	Иначе 		
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО(Ложь); 		
	КонецЕсли;
	
	УстановитьПараметрыВыбораДляСчетов();
	
	// Установка параметров выбора для Договоров.
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДанныеРаспределенияДоговорКонтрагента, "Объект.ДанныеРаспределения.Контрагент");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");

	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ЗачетАвансовПоЛизингу";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеРаспределения

&НаКлиенте
Процедура ДанныеРаспределенияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаполнитьПризнакУчетаСчетаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаспределенияКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКонтрагента(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаспределенияДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоВыбораДоговораКлиент(Элемент, ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаспределенияДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
	ЗаполнитьКурсВзаиморасчетов(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаспределенияСуммаАвансаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьКурсАванса(ТекущиеДанные);
	
	РассчитатьСуммуПогашения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаспределенияВалютнаяСуммаАвансаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьКурсАванса(ТекущиеДанные);
	
	РассчитатьСуммуПогашения(ТекущиеДанные, "Валютная");
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаспределенияКурсАвансаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КурсАванса = 0 Тогда
		ТекущиеДанные.ВалютнаяСуммаАванса = 0;
	Иначе
		ТекущиеДанные.ВалютнаяСуммаАванса = ТекущиеДанные.СуммаАванса / ТекущиеДанные.КурсАванса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаспределенияСуммаОбязательствПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуПогашения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаспределенияВалютнаяСуммаОбязательствПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуПогашения(ТекущиеДанные, "Валютная");
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаспределенияСчетУчетаАвансовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПризнакУчетаСчета(ТекущиеДанные.ПолучитьИдентификатор(), "СчетУчетаАвансов", "Валютный");
	
	Если НЕ ТекущиеДанные.СчетУчетаАвансовВалютный Тогда
		ТекущиеДанные.ВалютнаяСуммаАванса = 0;
		
		РассчитатьКурсАванса(ТекущиеДанные);
		РассчитатьСуммуПогашения(ТекущиеДанные, "Валютная");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаспределенияСчетУчетаОбязательствПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПризнакУчетаСчета(ТекущиеДанные.ПолучитьИдентификатор(), "СчетУчетаОбязательств", "Валютный");
	
	Если НЕ ТекущиеДанные.СчетУчетаОбязательствВалютный Тогда
		ТекущиеДанные.ВалютнаяСуммаОбязательств = 0;
		
		РассчитатьСуммуПогашения(ТекущиеДанные, "Валютная");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.ДанныеРаспределения.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Данные по договорам будут очищены! Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьДанныеРаспределения();
		
		Если Объект.ДанныеРаспределения.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Нет данных для зачета авансов!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик оповещения вопроса из процедуры Заполнить.
// 
&НаКлиенте
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеРаспределения();
	
	Если Объект.ДанныеРаспределения.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для зачета авансов!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	// Адаптация для ERP. Начало. 18.03.2014{{
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()]));
	// Адаптация для ERP. Конец. 18.03.2014}}
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();	
	
	ОрганизацияОбъекта = Объект.Организация;
	ТаблицаОбъекта 	   = Объект.ДанныеРаспределения;
	
	// Проверим организацию договоров по табличной части.
	Для каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
		
		ТекущийДоговор = СтрокаТаблицы.ДоговорКонтрагента;
		
		Если ЗначениеЗаполнено(ТекущийДоговор) 
			 И Не ТекущийДоговор.Организация = ОрганизацияОбъекта Тогда
			 
			ТекстСообщения = Нстр("ru = 'В строке номер ""%1%"" организация договора ""%2%"" " 
								+ "не соответствует организации документа. Договор очищен.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																					   ,Строка(СтрокаТаблицы.НомерСтроки)
																					   ,Строка(ТекущийДоговор));
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.ДанныеРаспределения");
			
			СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

&НаСервере
Процедура ИзменениеКонтрагента(ИдСтроки)

	ТекущиеДанные = Объект.ДанныеРаспределения.НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(ТекущиеДанные.ДоговорКонтрагента
														  ,ТекущиеДанные.Контрагент
														  ,Объект.Организация
														  ,фСписокВидовДоговоров);
														  
	// Мог поменяться договор
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);
														  
	ЗаполнитьКурсВзаиморасчетов(ТекущиеДанные.ПолучитьИдентификатор());	

КонецПроцедуры // ИзменениеКонтрагента()

&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеДоговораСервер()

&НаСервере 
Процедура ЗаполнитьВалютуМСФО(ЗаполнитьВалютуДокумента=Истина)
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
	Если ЗаполнитьВалютуДокумента Тогда
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры // ИзменениеВалюты()

&НаСервере         
Процедура ЗаполнитьКурсВзаиморасчетов(Идентификатор)

	ТекущиеДанные = Объект.ДанныеРаспределения.НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВалютаВзаиморасчетов = ТекущиеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаВзаиморасчетов, Объект.Дата);
	
	ТекущиеДанные.КурсВзаиморасчетов 		= СтрКурса.Курс;
	ТекущиеДанные.КратностьВзаиморасчетов 	= СтрКурса.Кратность;

КонецПроцедуры // ЗаполнитьКурсВзаиморасчетов()

&НаСервере
Процедура ЗаполнитьДанныеРаспределения()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ЗаполнитьТчДанныеРеклассификации();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	Для каждого ТекСтр Из Объект.ДанныеРаспределения Цикл
		ЗаполнитьПризнакиУчетаСчетов(ТекСтр);	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеРаспределения()

&НаСервере
Процедура ЗаполнитьПризнакУчетаСчета(ИДСтроки, ИмяКолонки, ИмяПризнака)
	
	Если ТипЗнч(ИДСтроки) = Тип("Число") Тогда
		ТекущиеДанные = Объект.ДанныеРаспределения.НайтиПоИдентификатору(ИДСтроки);
	Иначе
		ТекущиеДанные = ИДСтроки;
	КонецЕсли;
	
	ТекущиеДанные[ИмяКолонки+ИмяПризнака] = ТекущиеДанные[ИмяКолонки][ИмяПризнака];
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиУчетаСчетов(ИДСтроки)
	
	ЗаполнитьПризнакУчетаСчета(ИДСтроки, "СчетУчетаАвансов", "Валютный");
	ЗаполнитьПризнакУчетаСчета(ИДСтроки, "СчетУчетаОбязательств", "Валютный");
	
КонецПроцедуры
     
#КонецОбласти  

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ДанныеРаспределенияСчетУчетаАвансов);
	МассивЭлементов.Добавить(Элементы.ДанныеРаспределенияСчетУчетаОбязательств);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура устанавливает отборы для договора контрагента.
// 
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", фСписокВидовДоговоров);
		КонецЕсли;
	КонецЕсли;

	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);

	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура формирует список доступных видов договоров.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
	фСписокВидовДоговоров.Очистить();
	
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
// 
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
		
КонецПроцедуры // НачалоВыбораДоговораКлиент()

&НаКлиенте
Процедура РассчитатьКурсАванса(ТекущиеДанные)
	
	Если ТекущиеДанные.ВалютнаяСуммаАванса = 0 Тогда
		ТекущиеДанные.КурсАванса = 1;
	Иначе
		ТекущиеДанные.КурсАванса = ТекущиеДанные.СуммаАванса / ТекущиеДанные.ВалютнаяСуммаАванса;
	КонецЕсли;
	
КонецПроцедуры

// Процедура рассчитывает сумму погашения для переданной строки.
// 
// Параметры:
// 	ТекущиеДанные - СтрокаТабличнойЧасти
// 	ВидСуммы - строка - пустая строка или "Валютная".
// 
&НаКлиенте
Процедура РассчитатьСуммуПогашения(ТекущиеДанные, ВидСуммы="")
	
	ТекущиеДанные[ВидСуммы+"СуммаПогашения"] = Мин(ТекущиеДанные[ВидСуммы+"СуммаАванса"], ТекущиеДанные[ВидСуммы+"СуммаОбязательств"]);
	
КонецПроцедуры

// Процедура - обработчик ожидания при активизации строки, используется для
// 	заполнения признаков учета счетов. Эти признаки влияют на доступность соответствующих колонок с валютными суммами.
//
&НаКлиенте
Процедура ЗаполнитьПризнакУчетаСчетаКлиент()
	
	ТекущиеДанные = Элементы.ДанныеРаспределения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПризнакиУчетаСчетов(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
	
КонецПроцедуры // УправлениеЭлементамиФормы()


#КонецОбласти

#КонецОбласти
