#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Протокол по всем ЦФО.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "ПротоколПоВсемЦФО";
	КомандаПечати.Представление				= НСтр("ru = 'Протокол по всем ЦФО'");
	Если НЕ бит_ОбщегоНазначения.ЭтоУТ() Тогда
		КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КонецЕсли;
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ИмяМакета", "ПротоколПоВсемЦФО");
	КомандаПечати.Порядок					= 10;	
	
	// Протокол по каждому ЦФО.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "ПротоколПоКаждомуЦФО";
	КомандаПечати.Представление				= НСтр("ru = 'Протокол по каждому ЦФО'");
	Если НЕ бит_ОбщегоНазначения.ЭтоУТ() Тогда
		КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КонецЕсли;
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ИмяМакета", "ПротоколПоКаждомуЦФО");
	КомандаПечати.Порядок					= 20;	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПротоколПоВсемЦФО") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПротоколПоВсемЦФО",
			НСтр("ru = 'Протокол по всем ЦФО'"), 
			СформироватьПечатнуюФормуПротоколРасхождений(МассивОбъектов, ПараметрыПечати),,
			"Документ.бит_ПротоколРасхожденийБюджета.ПротоколПоВсемЦФО");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПротоколПоКаждомуЦФО") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПротоколПоКаждомуЦФО",
			НСтр("ru = 'Протокол по каждому ЦФО'"), 
			СформироватьПечатнуюФормуПротоколРасхождений(МассивОбъектов, ПараметрыПечати),,
			"Документ.бит_ПротоколРасхожденийБюджета.ПротоколПоКаждомуЦФО");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);		

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует печатную форму Протокола расхождений бюджета.
// 
// Параметры:
//  МассивСсылок 	- Массив.
// 	ПараметрыПечати - Структура.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент.
// 
Функция СформироватьПечатнуюФормуПротоколРасхождений(МассивСсылок, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Формируем запрос по заявкам.
	Результат 			= ПолучитьРезультатЗапросаПоПротоколу(МассивСсылок);
	РезультатЗапроса 	= Результат.Выгрузить();
	
	Если РезультатЗапроса.Количество()>0 Тогда
		
		// Получаем макет и области.
		Макет = ПолучитьМакет(ПараметрыПечати.ИмяМакета);
		
		Если ВРег(ПараметрыПечати.ИмяМакета) = ВРег("ПротоколПоКаждомуЦФО") Тогда
		
			ТаблицаЦФО = РезультатЗапроса.Скопировать();
			ТаблицаЦФО.Свернуть("ЦФО");
			
			Для каждого стрЦФО Из ТаблицаЦФО Цикл
				ЗаполнениеМакета(Макет, ТабличныйДокумент, РезультатЗапроса, стрЦФО.ЦФО);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЦикла; 
			
		Иначе	
			ЗаполнениеМакета(Макет, ТабличныйДокумент, РезультатЗапроса);
		КонецЕсли; 
		
	КонецЕсли;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
			
КонецФункции

// Процедура заполняет макет. 
//
Процедура ЗаполнениеМакета(Макет, ТабличныйДокумент, РезультатЗапроса, стрЦФО=Неопределено)

	// Получаем области
	ОбластьПротоколШапка 		= Макет.ПолучитьОбласть("ПротоколШапка");
	ОбластьПодвал 				= Макет.ПолучитьОбласть("Подвал");
	
	// Области табличной части документа.
	Области = Новый Структура;
	Области.Вставить("Шапка_Лево"		,Макет.ПолучитьОбласть("ДанныеБюджетаШапка|ОбластьЛево"));
	Области.Вставить("Шапка_Центр"		,Макет.ПолучитьОбласть("ДанныеБюджетаШапка|ОбластьЦентр"));
	Области.Вставить("Шапка_Право"   	,Макет.ПолучитьОбласть("ДанныеБюджетаШапка|ОбластьПраво"));		
	Области.Вставить("Значение_Лево" 	,Макет.ПолучитьОбласть("ДанныеБюджета|ОбластьЛево"));
	Области.Вставить("Значение_Центр"	,Макет.ПолучитьОбласть("ДанныеБюджета|ОбластьЦентр"));
	Области.Вставить("Значение_Право"	,Макет.ПолучитьОбласть("ДанныеБюджета|ОбластьПраво"));		
	
	
	ТаблицаДокументы = РезультатЗапроса.Скопировать();
	ТаблицаДокументы.Свернуть("Ссылка");
	
	Для каждого Документ Из ТаблицаДокументы Цикл
		
		ПротоколРасхождений = Документ.Ссылка;
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Ссылка", ПротоколРасхождений);
		Если стрЦФО <> Неопределено Тогда
		
			СтрОтбор.Вставить("ЦФО", стрЦФО);
		
		КонецЕсли; 
		
		МассивСтрок = РезультатЗапроса.НайтиСтроки(СтрОтбор);
		
		Если МассивСтрок.количество()=0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ОбластьПротоколШапка.Параметры.Заполнить(МассивСтрок[0]);
		
		ТабличныйДокумент.Вывести(ОбластьПротоколШапка);
		
		ТабДокШапка = Новый ТабличныйДокумент;
		
		ТабДокШапка.Присоединить(Области.Шапка_Лево);
		
		ИзмеренияДоп = бит_Бюджетирование.НастройкиИзмеренийБюджетирования();
		
		// Не рисуем колонки с незаполненными значениями
		МассивПустыхКолонок = Новый Массив;
		Для каждого Аналитика Из Документ.Ссылка.Настройка.Измерения Цикл
			
			Если Аналитика.Выполнять Тогда
				
				Табл = РезультатЗапроса.Скопировать(,Аналитика.Имя);
				Табл.Свернуть(Аналитика.Имя);
				Если Табл.Количество()=1
					И НЕ ЗначениеЗаполнено(Табл[0][Аналитика.Имя]) Тогда
					МассивПустыхКолонок.Добавить(Аналитика.Имя);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;	
				
		Для каждого Аналитика Из Документ.Ссылка.Настройка.Измерения Цикл
			
			Если Аналитика.Выполнять Тогда
				
				Области.Шапка_Центр.Параметры.Аналитика = ИзмеренияДоп[Аналитика.Имя].Синоним;
				
				Если МассивПустыхКолонок.Найти(Аналитика.Имя)=Неопределено Тогда
					ТабДокШапка.Присоединить(Области.Шапка_Центр);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
		ТабДокШапка.Присоединить(Области.Шапка_Право);
		ТабличныйДокумент.Вывести(ТабДокШапка);
		
		Для каждого СтрокаТЧ Из МассивСтрок Цикл
			
			ТабДок = Новый ТабличныйДокумент;
			
			Области.Значение_Лево.Параметры.Заполнить(СтрокаТЧ);
			Области.Значение_Право.Параметры.Заполнить(СтрокаТЧ);
			
			ТабДок.Присоединить(Области.Значение_Лево);
			
			Для каждого Аналитика Из Документ.Ссылка.Настройка.Измерения Цикл
				
				Если Аналитика.Выполнять Тогда
					
					Области.Значение_Центр.Параметры.ЗначениеАналитики = СтрокаТЧ[Аналитика.Имя];
					
					Если МассивПустыхКолонок.Найти(Аналитика.Имя)=Неопределено Тогда
						ТабДок.Присоединить(Области.Значение_Центр);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			ТабДок.Присоединить(Области.Значение_Право);
			ТабличныйДокумент.Вывести(ТабДок);
			
		КонецЦикла; 
		
		ОбластьПодвал.Параметры.Заполнить(МассивСтрок[0]);
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла; 

КонецПроцедуры

// Функция получает результат запроса по массиву документов.
// 
// Параметры:
//  МассивСсылок - Массив
// 
// Возвращаемое значение:
//  Результат - ТаблицаЗначений.
// 
Функция ПолучитьРезультатЗапросаПоПротоколу(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ПротоколРасхожденийБюджета.Ссылка,
	               |	бит_ПротоколРасхожденийБюджета.Номер,
	               |	бит_ПротоколРасхожденийБюджета.Дата КАК ДатаДокумента,
	               |	бит_ПротоколРасхожденийБюджета.СценарийПлан,
	               |	бит_ПротоколРасхожденийБюджета.СценарийФакт,
	               |	бит_ПротоколРасхожденийБюджета.Настройка,
	               |	бит_ПротоколРасхожденийБюджета.Бюджет,
	               |	бит_ПротоколРасхожденийБюджета.ДатаНачала,
	               |	бит_ПротоколРасхожденийБюджета.ДатаОкончания,
	               |	БюджетаДанныеБюджета.НомерСтроки,
	               |	БюджетаДанныеБюджета.Период,
	               |	БюджетаДанныеБюджета.СтатьяОборотов,
	               |	БюджетаДанныеБюджета.ЦФО КАК ЦФО,
	               |	БюджетаДанныеБюджета.Контрагент КАК Контрагент,
	               |	БюджетаДанныеБюджета.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	БюджетаДанныеБюджета.Проект КАК Проект,
	               |	БюджетаДанныеБюджета.НоменклатурнаяГруппа,
	               |	БюджетаДанныеБюджета.БанковскийСчет,
	               |	БюджетаДанныеБюджета.Аналитика_1,
	               |	БюджетаДанныеБюджета.Аналитика_2,
	               |	БюджетаДанныеБюджета.Аналитика_3,
	               |	БюджетаДанныеБюджета.Аналитика_4,
	               |	БюджетаДанныеБюджета.Аналитика_5,
	               |	БюджетаДанныеБюджета.Аналитика_6,
	               |	БюджетаДанныеБюджета.Аналитика_7,
	               |	БюджетаДанныеБюджета.КоличествоПлан,
	               |	БюджетаДанныеБюджета.СуммаРеглПлан,
	               |	БюджетаДанныеБюджета.СуммаУпрПлан,
	               |	БюджетаДанныеБюджета.СуммаСценарийПлан,
	               |	БюджетаДанныеБюджета.КоличествоФакт,
	               |	БюджетаДанныеБюджета.СуммаРеглФакт,
	               |	БюджетаДанныеБюджета.СуммаУпрФакт,
	               |	БюджетаДанныеБюджета.СуммаСценарийФакт,
	               |	БюджетаДанныеБюджета.КоличествоОтклонениеАбс,
	               |	БюджетаДанныеБюджета.СуммаРеглОтклонениеАбс,
	               |	БюджетаДанныеБюджета.СуммаУпрОтклонениеАбс,
	               |	БюджетаДанныеБюджета.СуммаСценарийОтклонениеАбс,
	               |	БюджетаДанныеБюджета.КоличествоОтклонениеОтн,
	               |	БюджетаДанныеБюджета.СуммаРеглОтклонениеОтн,
	               |	БюджетаДанныеБюджета.СуммаУпрОтклонениеОтн,
	               |	БюджетаДанныеБюджета.СуммаСценарийОтклонениеОтн,
	               |	БюджетаДанныеБюджета.ПричинаРасхождений,
	               |	БюджетаДанныеБюджета.Комментарий,
	               |	бит_ПротоколРасхожденийБюджета.Ответственный,
	               |	ВалютаРегламентированногоУчета.Значение КАК Валюта
	               |ИЗ
	               |	Документ.бит_ПротоколРасхожденийБюджета КАК бит_ПротоколРасхожденийБюджета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ПротоколРасхожденийБюджета.ДанныеБюджета КАК БюджетаДанныеБюджета
	               |		ПО бит_ПротоколРасхожденийБюджета.Ссылка = БюджетаДанныеБюджета.Ссылка,
	               |	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	               |ГДЕ
	               |	бит_ПротоколРасхожденийБюджета.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
