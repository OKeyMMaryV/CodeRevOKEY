#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных


Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.
Перем мБылПроведен; // Служит для передачи признака проведения между обработчиками.
Перем мРежимЗаписи; // Служит для передачи режима записи между обработчиками.
Перем мТекущийСтатус Экспорт; // Хранит текущий статус.
Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.
Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	мБылПроведен = Проведен;
	мРежимЗаписи = РежимЗаписи;
    
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
	
	Если НЕ Отказ Тогда
		
		Если НЕ мРежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
			
			УстановитьСтатус(мРежимЗаписи);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	 // Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Выполним движения.
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,Отказ,Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// Заполним перечень виз.
		Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ мБылПроведен Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЦФО"					   , ЦФО);		
			бит_Визирование.ОбновитьПереченьВиз(Ссылка, Дата, СтруктураПараметров);
			
		КонецЕсли; 
		
		УстановитьСтатус(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли; 
    
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
	// Проверим допустимость отмены проведения. 
	РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	
	мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	мДатаИзмененияСтатуса = РезСтруктура.Дата;
	
	Если НЕ Отказ Тогда
		
		// Очистим визы.
		бит_Визирование.ОчиститьВсеВизыБезусловно(Ссылка);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		// Заполнение нового документа.
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
	
	КонецЕсли;
		
	Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");

КонецПроцедуры // ОбработкаЗаполнения()

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Процедура устанавливает статус.
// 
// Параметры:
//  вхРежимЗаписи			 - РежимЗаписиДокумента.
// 
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено) Экспорт
						  
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
						  
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
		
		Если вхРежимЗаписи = Неопределено Тогда
			 РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			 РежимЗаписи = вхРежимЗаписи;
		КонецЕсли; 
		
		// Вычислим переменные, необходимые для установки статуса.
		ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);						
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
			ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Запись И Проведен) Тогда
			Статус = Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Рабочий;
		Иначе
			Статус = Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Черновик;
		КонецЕсли; 
		
		Если Статус = Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Рабочий 
			ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Утвержден 
			ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Отклонен Тогда
		
			Если ЕстьОтклонено Тогда
				
				Статус = Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Отклонен;
				
			Иначе	
				
				Если ВсеВизыПолучены Тогда
					Статус = Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Утвержден;
				Иначе	
					Статус = Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Рабочий;
				КонецЕсли; 
				
			КонецЕсли;
		
		КонецЕсли;
			
		// Если статус изменился - запишем его.
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,мТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				
				мТекущийСтатус = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе	
		
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));	
			
	    РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
	КонецЕсли; 
	
	
КонецПроцедуры // УстановитьСтатус()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура получает статус объекта.
// 
Процедура ПолучитьСтатусМодуль()

	// Получаем статус и дату изменения статуса для документа.
	РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	
	мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус)
					  		 ,РезСтруктура.Статус
					  		 ,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
							  
	мДатаИзмененияСтатуса = РезСтруктура.Дата;

КонецПроцедуры // ПолучитьСтатусМодуль()

// Процедура выполняет движения по регистрам.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,Отказ,Заголовок)
	
	// Выполнение движений.
	ТаблицаДвижений = Движения.бит_ПричиныРасхожденийБюджета.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого Стр Из ДанныеБюджета Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		
		НоваяСтрока.СценарийПлан 	= СтруктураШапкиДокумента.СценарийПлан;
		НоваяСтрока.СценарийФакт 	= СтруктураШапкиДокумента.СценарийФакт;
		
	КонецЦикла; 
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
	
		Движения.бит_ПричиныРасхожденийБюджета.Записывать = Истина;
		Движения.бит_ПричиныРасхожденийБюджета.мТаблицаДвижений = ТаблицаДвижений;
		Движения.бит_ПричиныРасхожденийБюджета.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ПолучитьСтатусМодуль();

#КонецОбласти

#КонецЕсли
